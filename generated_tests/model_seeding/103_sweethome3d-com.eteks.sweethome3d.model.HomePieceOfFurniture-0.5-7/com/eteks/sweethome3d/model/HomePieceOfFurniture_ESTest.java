/*
 * This file was automatically generated by EvoSuite
 * Tue Oct 29 15:50:55 GMT 2019
 */

package com.eteks.sweethome3d.model;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.eteks.sweethome3d.model.CatalogDoorOrWindow;
import com.eteks.sweethome3d.model.CatalogLight;
import com.eteks.sweethome3d.model.CatalogPieceOfFurniture;
import com.eteks.sweethome3d.model.Content;
import com.eteks.sweethome3d.model.HomeDoorOrWindow;
import com.eteks.sweethome3d.model.HomeLight;
import com.eteks.sweethome3d.model.HomePieceOfFurniture;
import com.eteks.sweethome3d.model.HomeTexture;
import com.eteks.sweethome3d.model.Level;
import com.eteks.sweethome3d.model.Light;
import com.eteks.sweethome3d.model.LightSource;
import com.eteks.sweethome3d.model.PieceOfFurniture;
import com.eteks.sweethome3d.model.Sash;
import com.eteks.sweethome3d.model.TextStyle;
import com.eteks.sweethome3d.tools.ResourceURLContent;
import com.eteks.sweethome3d.tools.TemporaryURLContent;
import com.eteks.sweethome3d.tools.URLContent;
import java.beans.PropertyChangeListener;
import java.beans.PropertyChangeListenerProxy;
import java.math.BigDecimal;
import java.math.BigInteger;
import java.net.URL;
import java.net.URLStreamHandler;
import java.util.Comparator;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.Random;
import org.evosuite.runtime.System;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.net.MockURL;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class HomePieceOfFurniture_ESTest extends HomePieceOfFurniture_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      Light light0 = mock(Light.class, new ViolatedAssumptionAnswer());
      doReturn((LightSource[]) null).when(light0).getLightSources();
      doReturn((Integer) null).when(light0).getColor();
      doReturn((String) null).when(light0).getCurrency();
      doReturn(0.0F).when(light0).getDepth();
      doReturn((String) null).when(light0).getDescription();
      doReturn(0.0F).when(light0).getElevation();
      doReturn(0.0F).when(light0).getHeight();
      doReturn((Content) null).when(light0).getIcon();
      doReturn((Content) null).when(light0).getModel();
      doReturn((float[][]) null).when(light0).getModelRotation();
      doReturn((String) null).when(light0).getName();
      doReturn((Content) null).when(light0).getPlanIcon();
      doReturn((BigDecimal) null).when(light0).getPrice();
      doReturn((String) null).when(light0).getStaircaseCutOutShape();
      doReturn((BigDecimal) null).when(light0).getValueAddedTaxPercentage();
      doReturn(0.0F).when(light0).getWidth();
      doReturn(false).when(light0).isBackFaceShown();
      doReturn(false).when(light0).isDeformable();
      doReturn(false).when(light0).isDoorOrWindow();
      doReturn(false).when(light0).isMovable();
      doReturn(false).when(light0).isResizable();
      doReturn(false).when(light0).isTexturable();
      HomeLight homeLight0 = new HomeLight(light0);
      homeLight0.isTopRightPointAt(600.8F, 600.8F, 600.8F);
      homeLight0.getDescription();
      homeLight0.isNameCenterPointAt((-2968.2717F), 2.0F, 3205.479F);
      Level level0 = new Level("", (-680.1428F), 3205.479F, 2.0F);
      homeLight0.isAtLevel(level0);
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      LightSource[] lightSourceArray0 = new LightSource[2];
      float float0 = (-1.0F);
      LightSource lightSource0 = new LightSource((-1.0F), (-1457.99F), 381.9F, 1431655765);
      LightSource lightSource1 = new LightSource((-1.0F), (-69.47F), 700.4569F, (-853));
      lightSourceArray0[1] = lightSource1;
      Integer integer0 = new Integer((-853));
      Light light0 = mock(Light.class, new ViolatedAssumptionAnswer());
      doReturn((LightSource[]) null).when(light0).getLightSources();
      doReturn((Integer) null).when(light0).getColor();
      doReturn((String) null).when(light0).getCurrency();
      doReturn(0.0F).when(light0).getDepth();
      doReturn((String) null).when(light0).getDescription();
      doReturn(0.0F).when(light0).getElevation();
      doReturn(0.0F).when(light0).getHeight();
      doReturn((Content) null).when(light0).getIcon();
      doReturn((Content) null).when(light0).getModel();
      doReturn((float[][]) null).when(light0).getModelRotation();
      doReturn((String) null).when(light0).getName();
      doReturn((Content) null).when(light0).getPlanIcon();
      doReturn((BigDecimal) null).when(light0).getPrice();
      doReturn((String) null).when(light0).getStaircaseCutOutShape();
      doReturn((BigDecimal) null).when(light0).getValueAddedTaxPercentage();
      doReturn(0.0F).when(light0).getWidth();
      doReturn(false).when(light0).isBackFaceShown();
      doReturn(false).when(light0).isDeformable();
      doReturn(false).when(light0).isDoorOrWindow();
      doReturn(false).when(light0).isMovable();
      doReturn(false).when(light0).isResizable();
      doReturn(false).when(light0).isTexturable();
      byte[] byteArray0 = new byte[5];
      byteArray0[1] = (byte)1;
      byteArray0[3] = (byte) (-32);
      byteArray0[4] = (byte)62;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      HomeLight homeLight0 = new HomeLight(light0);
      Integer integer1 = new Integer((byte) (-32));
      Float.floatToIntBits((-1710.0F));
      int int0 = new Integer((byte)1);
      homeLight0.setMovable(true);
      homeLight0.setMovable(true);
      Float.floatToIntBits(0.0F);
      Float.floatToIntBits(0);
      // Undeclared exception!
      try { 
        homeLight0.setShininess((Float) 0.0F);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Piece isn't texturable
         //
         verifyException("com.eteks.sweethome3d.model.HomePieceOfFurniture", e);
      }
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      Light light0 = mock(Light.class, new ViolatedAssumptionAnswer());
      doReturn((LightSource[]) null).when(light0).getLightSources();
      doReturn((Integer) null).when(light0).getColor();
      doReturn((String) null).when(light0).getCurrency();
      doReturn(0.0F).when(light0).getDepth();
      doReturn((String) null).when(light0).getDescription();
      doReturn(0.0F).when(light0).getElevation();
      doReturn(0.0F).when(light0).getHeight();
      doReturn((Content) null).when(light0).getIcon();
      doReturn((Content) null).when(light0).getModel();
      doReturn((float[][]) null).when(light0).getModelRotation();
      doReturn((String) null).when(light0).getName();
      doReturn((Content) null).when(light0).getPlanIcon();
      doReturn((BigDecimal) null).when(light0).getPrice();
      doReturn((String) null).when(light0).getStaircaseCutOutShape();
      doReturn((BigDecimal) null).when(light0).getValueAddedTaxPercentage();
      doReturn(0.0F).when(light0).getWidth();
      doReturn(false).when(light0).isBackFaceShown();
      doReturn(false).when(light0).isDeformable();
      doReturn(false).when(light0).isDoorOrWindow();
      doReturn(false).when(light0).isMovable();
      doReturn(false).when(light0).isResizable();
      doReturn(false).when(light0).isTexturable();
      Float.floatToIntBits((byte) (-32));
      Integer.valueOf((-2369));
      System.setCurrentTimeMillis((-1040187392));
      HomeLight homeLight0 = new HomeLight(light0);
      HomeLight homeLight1 = homeLight0.clone();
      homeLight1.isBackFaceShown();
      homeLight0.isBackFaceShown();
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      Light light0 = mock(Light.class, new ViolatedAssumptionAnswer());
      doReturn((LightSource[]) null).when(light0).getLightSources();
      doReturn((Integer) null).when(light0).getColor();
      doReturn((String) null).when(light0).getCurrency();
      doReturn(0.0F).when(light0).getDepth();
      doReturn((String) null).when(light0).getDescription();
      doReturn(0.0F).when(light0).getElevation();
      doReturn(0.0F).when(light0).getHeight();
      doReturn((Content) null).when(light0).getIcon();
      doReturn((Content) null).when(light0).getModel();
      doReturn((float[][]) null).when(light0).getModelRotation();
      doReturn((String) null).when(light0).getName();
      doReturn((Content) null).when(light0).getPlanIcon();
      doReturn((BigDecimal) null).when(light0).getPrice();
      doReturn((String) null).when(light0).getStaircaseCutOutShape();
      doReturn((BigDecimal) null).when(light0).getValueAddedTaxPercentage();
      doReturn(0.0F).when(light0).getWidth();
      doReturn(false).when(light0).isBackFaceShown();
      doReturn(false).when(light0).isDeformable();
      doReturn(false).when(light0).isDoorOrWindow();
      doReturn(false).when(light0).isMovable();
      doReturn(false).when(light0).isResizable();
      doReturn(false).when(light0).isTexturable();
      HomeLight homeLight0 = new HomeLight(light0);
      homeLight0.getDescription();
      homeLight0.move(0.0F, 593.7749F);
      Level level0 = new Level((String) null, (-119.7F), (-119.7F), 593.7749F);
      homeLight0.isAtLevel(level0);
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      Light light0 = mock(Light.class, new ViolatedAssumptionAnswer());
      doReturn((LightSource[]) null).when(light0).getLightSources();
      doReturn((Integer) null).when(light0).getColor();
      doReturn((String) null).when(light0).getCurrency();
      doReturn(0.0F).when(light0).getDepth();
      doReturn((String) null).when(light0).getDescription();
      doReturn(0.0F).when(light0).getElevation();
      doReturn(0.0F).when(light0).getHeight();
      doReturn((Content) null).when(light0).getIcon();
      doReturn((Content) null).when(light0).getModel();
      doReturn((float[][]) null).when(light0).getModelRotation();
      doReturn((String) null).when(light0).getName();
      doReturn((Content) null).when(light0).getPlanIcon();
      doReturn((BigDecimal) null).when(light0).getPrice();
      doReturn((String) null).when(light0).getStaircaseCutOutShape();
      doReturn((BigDecimal) null).when(light0).getValueAddedTaxPercentage();
      doReturn(0.0F).when(light0).getWidth();
      doReturn(false).when(light0).isBackFaceShown();
      doReturn(false).when(light0).isDeformable();
      doReturn(false).when(light0).isDoorOrWindow();
      doReturn(false).when(light0).isMovable();
      doReturn(false).when(light0).isResizable();
      doReturn(false).when(light0).isTexturable();
      HomeLight homeLight0 = new HomeLight(light0);
      homeLight0.setElevation((-1.0F));
      homeLight0.isBottomRightPointAt((-1.0F), (-1.0F), (-1.0F));
      homeLight0.setNameAngle((-1.0F));
      homeLight0.setY((-1098.0F));
      homeLight0.setMovable(false);
      homeLight0.getValueAddedTaxPercentage();
      homeLight0.getNameAngle();
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      Long long0 = new Long(0L);
      Long long1 = Long.getLong("com.eteks.sweethome3d.model.HomeDoorOrWindow", long0);
      Float float0 = new Float((double) 0L);
      Sash[] sashArray0 = new Sash[2];
      Sash sash0 = new Sash(991.0187F, 0.0F, (-1666.0F), 0.0F, (-1666.0F));
      sashArray0[0] = sash0;
      Sash sash1 = new Sash(0.0F, 0.0F, 0.0F, (-201.17F), 0.3926991F);
      sashArray0[1] = sash1;
      float[][] floatArray0 = new float[4][2];
      float[] floatArray1 = new float[4];
      floatArray1[0] = 0.0F;
      floatArray1[1] = 991.0187F;
      floatArray1[2] = 991.0187F;
      floatArray1[3] = 0.0F;
      floatArray0[0] = floatArray1;
      float[] floatArray2 = new float[3];
      floatArray2[0] = 991.0187F;
      floatArray2[1] = (-201.17F);
      floatArray2[2] = 0.3926991F;
      floatArray0[1] = floatArray2;
      float[] floatArray3 = new float[9];
      floatArray3[0] = 991.0187F;
      floatArray3[1] = (float) 0L;
      floatArray3[2] = (-201.17F);
      floatArray3[3] = (-1.0F);
      floatArray3[4] = 0.0F;
      floatArray3[5] = 0.0F;
      floatArray3[6] = (-1666.0F);
      floatArray3[7] = (-1666.0F);
      floatArray3[8] = (-1666.0F);
      floatArray0[2] = floatArray3;
      float[] floatArray4 = new float[0];
      floatArray0[3] = floatArray4;
      BigInteger bigInteger0 = BigInteger.ZERO;
      BigDecimal bigDecimal0 = new BigDecimal(bigInteger0);
      CatalogDoorOrWindow catalogDoorOrWindow0 = new CatalogDoorOrWindow("com.eteks.sweethome3d.model.TextStyle", "com.eteks.sweethome3d.model.TextStyle", "com.eteks.sweethome3d.model.HomePieceOfFurniture$17", "com.eteks.sweethome3d.model.HomePieceOfFurniture$17", (String[]) null, long1, float0, (Content) null, (Content) null, (Content) null, 0L, 0L, 0.0F, 0.0F, false, (-201.17F), 0L, sashArray0, floatArray0, "2.", true, false, false, bigDecimal0, bigDecimal0, "com.eteks.sweethome3d.model.TextStyle");
      catalogDoorOrWindow0.getWallThickness();
      CatalogDoorOrWindow catalogDoorOrWindow1 = new CatalogDoorOrWindow("TEXTURE", "java.version", "", (Content) null, (Content) null, (Content) null, 1.0F, 0.5F, 0.5F, 672.42474F, true, 0.0F, (-1.0F), sashArray0, floatArray0, "CRCKF", false, true, false, bigDecimal0, bigDecimal0, "");
      catalogDoorOrWindow1.getWallDistance();
      catalogDoorOrWindow0.getSashes();
      HomeDoorOrWindow homeDoorOrWindow0 = new HomeDoorOrWindow(catalogDoorOrWindow1);
      homeDoorOrWindow0.isBottomLeftPointAt((-335.2458F), 1090.71F, 257.83768F);
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      Integer integer0 = new Integer((-1469));
      FileSystemHandling.shouldAllThrowIOExceptions();
      Light light0 = mock(Light.class, new ViolatedAssumptionAnswer());
      doReturn((LightSource[]) null).when(light0).getLightSources();
      doReturn((Integer) null).when(light0).getColor();
      doReturn((String) null).when(light0).getCurrency();
      doReturn(0.0F).when(light0).getDepth();
      doReturn((String) null).when(light0).getDescription();
      doReturn(0.0F).when(light0).getElevation();
      doReturn(0.0F).when(light0).getHeight();
      doReturn((Content) null).when(light0).getIcon();
      doReturn((Content) null).when(light0).getModel();
      doReturn((float[][]) null).when(light0).getModelRotation();
      doReturn((String) null).when(light0).getName();
      doReturn((Content) null).when(light0).getPlanIcon();
      doReturn((BigDecimal) null).when(light0).getPrice();
      doReturn((String) null).when(light0).getStaircaseCutOutShape();
      doReturn((BigDecimal) null).when(light0).getValueAddedTaxPercentage();
      doReturn(0.0F).when(light0).getWidth();
      doReturn(false).when(light0).isBackFaceShown();
      doReturn(false).when(light0).isDeformable();
      doReturn(false).when(light0).isDoorOrWindow();
      doReturn(false).when(light0).isMovable();
      doReturn(false).when(light0).isResizable();
      doReturn(false).when(light0).isTexturable();
      HomeLight homeLight0 = new HomeLight(light0);
      homeLight0.setElevation((-1.0F));
      Float.floatToIntBits((byte) (-32));
      homeLight0.isPointAt((byte)1, (-1.0F), (-1.0F));
      Float.floatToIntBits((-741.9441F));
      homeLight0.getValueAddedTax();
      homeLight0.getLevel();
      HomeLight homeLight1 = homeLight0.clone();
      homeLight1.setAngle((-1.0F));
      homeLight0.setName("");
      Integer integer1 = new Integer((-1469));
      System.setCurrentTimeMillis((byte)1);
      homeLight0.setElevation(1.0F);
      homeLight0.getElevation();
      homeLight1.getLevel();
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      Integer integer0 = new Integer((-1469));
      FileSystemHandling.shouldAllThrowIOExceptions();
      Light light0 = mock(Light.class, new ViolatedAssumptionAnswer());
      doReturn((LightSource[]) null).when(light0).getLightSources();
      doReturn((Integer) null).when(light0).getColor();
      doReturn((String) null).when(light0).getCurrency();
      doReturn(0.0F).when(light0).getDepth();
      doReturn((String) null).when(light0).getDescription();
      doReturn(0.0F).when(light0).getElevation();
      doReturn(0.0F).when(light0).getHeight();
      doReturn((Content) null).when(light0).getIcon();
      doReturn((Content) null).when(light0).getModel();
      doReturn((float[][]) null).when(light0).getModelRotation();
      doReturn((String) null).when(light0).getName();
      doReturn((Content) null).when(light0).getPlanIcon();
      doReturn((BigDecimal) null).when(light0).getPrice();
      doReturn((String) null).when(light0).getStaircaseCutOutShape();
      doReturn((BigDecimal) null).when(light0).getValueAddedTaxPercentage();
      doReturn(0.0F).when(light0).getWidth();
      doReturn(false).when(light0).isBackFaceShown();
      doReturn(false).when(light0).isDeformable();
      doReturn(false).when(light0).isDoorOrWindow();
      doReturn(false).when(light0).isMovable();
      doReturn(false).when(light0).isResizable();
      doReturn(false).when(light0).isTexturable();
      HomeLight homeLight0 = new HomeLight(light0);
      homeLight0.setElevation((-1.0F));
      homeLight0.setNameAngle((-1.0F));
      HomePieceOfFurniture homePieceOfFurniture0 = homeLight0.clone();
      homeLight0.setVisible(true);
      homeLight0.getWidth();
      homePieceOfFurniture0.setNameVisible(true);
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      Integer integer0 = new Integer(1431655765);
      assertNotNull(integer0);
      assertEquals(1431655765, (int)integer0);
      
      LightSource[] lightSourceArray0 = new LightSource[1];
      LightSource lightSource0 = new LightSource((-87.07429F), (-845.7987F), (-87.07429F), 1431655765);
      assertNotNull(lightSource0);
      assertEquals(1431655765, lightSource0.getColor());
      assertNull(lightSource0.getDiameter());
      assertEquals((-87.07429F), lightSource0.getZ(), 0.01F);
      assertEquals((-845.7987F), lightSource0.getY(), 0.01F);
      assertEquals((-87.07429F), lightSource0.getX(), 0.01F);
      
      lightSourceArray0[0] = lightSource0;
      Integer integer1 = Integer.valueOf(0);
      assertNotNull(integer1);
      assertFalse(integer1.equals((Object)integer0));
      assertEquals(0, (int)integer1);
      
      Integer integer2 = Integer.valueOf(0);
      assertNotNull(integer2);
      assertFalse(integer2.equals((Object)integer0));
      assertEquals(0, (int)integer2);
      
      Light light0 = mock(Light.class, new ViolatedAssumptionAnswer());
      doReturn((LightSource[]) null).when(light0).getLightSources();
      doReturn((Integer) null).when(light0).getColor();
      doReturn((String) null).when(light0).getCurrency();
      doReturn(0.0F).when(light0).getDepth();
      doReturn((String) null).when(light0).getDescription();
      doReturn(0.0F).when(light0).getElevation();
      doReturn(0.0F).when(light0).getHeight();
      doReturn((Content) null).when(light0).getIcon();
      doReturn((Content) null).when(light0).getModel();
      doReturn((float[][]) null).when(light0).getModelRotation();
      doReturn((String) null).when(light0).getName();
      doReturn((Content) null).when(light0).getPlanIcon();
      doReturn((BigDecimal) null).when(light0).getPrice();
      doReturn((String) null).when(light0).getStaircaseCutOutShape();
      doReturn((BigDecimal) null).when(light0).getValueAddedTaxPercentage();
      doReturn(0.0F).when(light0).getWidth();
      doReturn(false).when(light0).isBackFaceShown();
      doReturn(false).when(light0).isDeformable();
      doReturn(false).when(light0).isDoorOrWindow();
      doReturn(false).when(light0).isMovable();
      doReturn(false).when(light0).isResizable();
      doReturn(false).when(light0).isTexturable();
      Sash sash0 = new Sash((byte)1, 0.0F, 0.0F, 1431655765, (-414.0F));
      assertNotNull(sash0);
      assertEquals(0.0F, sash0.getYAxis(), 0.01F);
      assertEquals(1.0F, sash0.getXAxis(), 0.01F);
      assertEquals(1.43165581E9F, sash0.getStartAngle(), 0.01F);
      assertEquals((-414.0F), sash0.getEndAngle(), 0.01F);
      assertEquals(0.0F, sash0.getWidth(), 0.01F);
      
      BigInteger bigInteger0 = BigInteger.ZERO;
      assertNotNull(bigInteger0);
      assertEquals((short)0, bigInteger0.shortValue());
      assertEquals((byte)0, bigInteger0.byteValue());
      
      BigDecimal bigDecimal0 = new BigDecimal(bigInteger0);
      assertNotNull(bigDecimal0);
      assertEquals((short)0, bigInteger0.shortValue());
      assertEquals((byte)0, bigInteger0.byteValue());
      assertEquals((byte)0, bigDecimal0.byteValue());
      assertEquals((short)0, bigDecimal0.shortValue());
      
      BigDecimal bigDecimal1 = BigDecimal.TEN;
      assertNotNull(bigDecimal1);
      assertNotSame(bigDecimal1, bigDecimal0);
      assertFalse(bigDecimal1.equals((Object)bigDecimal0));
      assertEquals((short)10, bigDecimal1.shortValue());
      assertEquals((byte)10, bigDecimal1.byteValue());
      
      HomeLight homeLight0 = new HomeLight(light0);
      assertNotNull(homeLight0);
      assertFalse(homeLight0.isTexturable());
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      assertNull(homeLight0.getDescription());
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertFalse(homeLight0.isResizable());
      assertTrue(homeLight0.isVisible());
      assertNull(homeLight0.getShininess());
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertFalse(homeLight0.isDeformable());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertNull(homeLight0.getCurrency());
      assertFalse(homeLight0.isMovable());
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertNull(homeLight0.getCatalogId());
      assertNull(homeLight0.getName());
      assertFalse(homeLight0.isNameVisible());
      assertNull(homeLight0.getColor());
      assertFalse(homeLight0.isBackFaceShown());
      assertFalse(homeLight0.isModelMirrored());
      
      HomeLight homeLight1 = homeLight0.clone();
      assertNotNull(homeLight1);
      assertNotSame(homeLight0, homeLight1);
      assertNotSame(homeLight1, homeLight0);
      assertFalse(homeLight1.equals((Object)homeLight0));
      assertFalse(homeLight0.isTexturable());
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      assertNull(homeLight0.getDescription());
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertFalse(homeLight0.isResizable());
      assertTrue(homeLight0.isVisible());
      assertNull(homeLight0.getShininess());
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertFalse(homeLight0.isDeformable());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertNull(homeLight0.getCurrency());
      assertFalse(homeLight0.isMovable());
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertNull(homeLight0.getCatalogId());
      assertNull(homeLight0.getName());
      assertFalse(homeLight0.isNameVisible());
      assertNull(homeLight0.getColor());
      assertFalse(homeLight0.isBackFaceShown());
      assertFalse(homeLight0.isModelMirrored());
      assertFalse(homeLight1.isDeformable());
      assertFalse(homeLight1.isNameVisible());
      assertEquals(0.0F, homeLight1.getWidth(), 0.01F);
      assertTrue(homeLight1.isVisible());
      assertNull(homeLight1.getCurrency());
      assertNull(homeLight1.getColor());
      assertEquals(0.0F, homeLight1.getNameYOffset(), 0.01F);
      assertEquals(0.0F, homeLight1.getY(), 0.01F);
      assertFalse(homeLight1.isDoorOrWindow());
      assertFalse(homeLight1.isMovable());
      assertFalse(homeLight1.isResizable());
      assertEquals(0.0F, homeLight1.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight1.getX(), 0.01F);
      assertNull(homeLight1.getShininess());
      assertEquals(0.0F, homeLight1.getHeight(), 0.01F);
      assertNull(homeLight1.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight1.getNameAngle(), 0.01F);
      assertNull(homeLight1.getName());
      assertEquals(0.0F, homeLight1.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeLight1.getDepth(), 0.01F);
      assertNull(homeLight1.getDescription());
      assertEquals(0.5F, homeLight1.getPower(), 0.01F);
      assertNull(homeLight1.getCatalogId());
      assertEquals(0.0F, homeLight1.getElevation(), 0.01F);
      assertFalse(homeLight1.isTexturable());
      assertEquals(0.0F, homeLight1.getAngle(), 0.01F);
      assertFalse(homeLight1.isModelMirrored());
      assertFalse(homeLight1.isBackFaceShown());
      
      HomeLight homeLight2 = homeLight0.clone();
      assertNotNull(homeLight2);
      assertNotSame(homeLight0, homeLight1);
      assertNotSame(homeLight0, homeLight2);
      assertNotSame(homeLight2, homeLight1);
      assertNotSame(homeLight2, homeLight0);
      assertFalse(homeLight0.equals((Object)homeLight1));
      assertFalse(homeLight2.equals((Object)homeLight1));
      assertFalse(homeLight2.equals((Object)homeLight0));
      assertFalse(homeLight0.isTexturable());
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      assertNull(homeLight0.getDescription());
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertFalse(homeLight0.isResizable());
      assertTrue(homeLight0.isVisible());
      assertNull(homeLight0.getShininess());
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertFalse(homeLight0.isDeformable());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertNull(homeLight0.getCurrency());
      assertFalse(homeLight0.isMovable());
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertNull(homeLight0.getCatalogId());
      assertNull(homeLight0.getName());
      assertFalse(homeLight0.isNameVisible());
      assertNull(homeLight0.getColor());
      assertFalse(homeLight0.isBackFaceShown());
      assertFalse(homeLight0.isModelMirrored());
      assertEquals(0.0F, homeLight2.getX(), 0.01F);
      assertFalse(homeLight2.isDoorOrWindow());
      assertFalse(homeLight2.isModelMirrored());
      assertEquals(0.0F, homeLight2.getY(), 0.01F);
      assertFalse(homeLight2.isBackFaceShown());
      assertFalse(homeLight2.isTexturable());
      assertFalse(homeLight2.isNameVisible());
      assertEquals(0.0F, homeLight2.getAngle(), 0.01F);
      assertNull(homeLight2.getCurrency());
      assertEquals(0.0F, homeLight2.getNameYOffset(), 0.01F);
      assertNull(homeLight2.getName());
      assertNull(homeLight2.getColor());
      assertNull(homeLight2.getCatalogId());
      assertNull(homeLight2.getShininess());
      assertFalse(homeLight2.isResizable());
      assertEquals(0.5F, homeLight2.getPower(), 0.01F);
      assertEquals(0.0F, homeLight2.getHeight(), 0.01F);
      assertFalse(homeLight2.isMovable());
      assertNull(homeLight2.getDescription());
      assertEquals(0.0F, homeLight2.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeLight2.getElevation(), 0.01F);
      assertEquals(0.0F, homeLight2.getWidth(), 0.01F);
      assertEquals(0.0F, homeLight2.getDepth(), 0.01F);
      assertFalse(homeLight2.isDeformable());
      assertEquals(0.0F, homeLight2.getNameAngle(), 0.01F);
      assertNull(homeLight2.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight2.getGroundElevation(), 0.01F);
      assertTrue(homeLight2.isVisible());
      
      homeLight2.setDescription("");
      assertNotSame(homeLight0, homeLight1);
      assertNotSame(homeLight0, homeLight2);
      assertNotSame(homeLight2, homeLight1);
      assertNotSame(homeLight2, homeLight0);
      assertFalse(homeLight0.equals((Object)homeLight1));
      assertFalse(homeLight0.equals((Object)homeLight2));
      assertFalse(homeLight2.equals((Object)homeLight1));
      assertFalse(homeLight2.equals((Object)homeLight0));
      assertFalse(homeLight0.isTexturable());
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      assertNull(homeLight0.getDescription());
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertFalse(homeLight0.isResizable());
      assertTrue(homeLight0.isVisible());
      assertNull(homeLight0.getShininess());
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertFalse(homeLight0.isDeformable());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertNull(homeLight0.getCurrency());
      assertFalse(homeLight0.isMovable());
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertNull(homeLight0.getCatalogId());
      assertNull(homeLight0.getName());
      assertFalse(homeLight0.isNameVisible());
      assertNull(homeLight0.getColor());
      assertFalse(homeLight0.isBackFaceShown());
      assertFalse(homeLight0.isModelMirrored());
      assertEquals(0.0F, homeLight2.getX(), 0.01F);
      assertFalse(homeLight2.isDoorOrWindow());
      assertFalse(homeLight2.isModelMirrored());
      assertEquals(0.0F, homeLight2.getY(), 0.01F);
      assertFalse(homeLight2.isBackFaceShown());
      assertFalse(homeLight2.isTexturable());
      assertFalse(homeLight2.isNameVisible());
      assertEquals(0.0F, homeLight2.getAngle(), 0.01F);
      assertNull(homeLight2.getCurrency());
      assertEquals(0.0F, homeLight2.getNameYOffset(), 0.01F);
      assertNull(homeLight2.getName());
      assertNull(homeLight2.getColor());
      assertNull(homeLight2.getCatalogId());
      assertNull(homeLight2.getShininess());
      assertFalse(homeLight2.isResizable());
      assertEquals(0.5F, homeLight2.getPower(), 0.01F);
      assertEquals(0.0F, homeLight2.getHeight(), 0.01F);
      assertFalse(homeLight2.isMovable());
      assertEquals("", homeLight2.getDescription());
      assertEquals(0.0F, homeLight2.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeLight2.getElevation(), 0.01F);
      assertEquals(0.0F, homeLight2.getWidth(), 0.01F);
      assertEquals(0.0F, homeLight2.getDepth(), 0.01F);
      assertFalse(homeLight2.isDeformable());
      assertEquals(0.0F, homeLight2.getNameAngle(), 0.01F);
      assertNull(homeLight2.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight2.getGroundElevation(), 0.01F);
      assertTrue(homeLight2.isVisible());
      
      String string0 = homeLight2.getDescription();
      assertNotNull(string0);
      assertNotSame(homeLight0, homeLight1);
      assertNotSame(homeLight0, homeLight2);
      assertNotSame(homeLight2, homeLight1);
      assertNotSame(homeLight2, homeLight0);
      assertFalse(homeLight0.equals((Object)homeLight1));
      assertFalse(homeLight0.equals((Object)homeLight2));
      assertFalse(homeLight2.equals((Object)homeLight1));
      assertFalse(homeLight2.equals((Object)homeLight0));
      assertEquals("", string0);
      assertFalse(homeLight0.isTexturable());
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      assertNull(homeLight0.getDescription());
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertFalse(homeLight0.isResizable());
      assertTrue(homeLight0.isVisible());
      assertNull(homeLight0.getShininess());
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertFalse(homeLight0.isDeformable());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertNull(homeLight0.getCurrency());
      assertFalse(homeLight0.isMovable());
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertNull(homeLight0.getCatalogId());
      assertNull(homeLight0.getName());
      assertFalse(homeLight0.isNameVisible());
      assertNull(homeLight0.getColor());
      assertFalse(homeLight0.isBackFaceShown());
      assertFalse(homeLight0.isModelMirrored());
      assertEquals(0.0F, homeLight2.getX(), 0.01F);
      assertFalse(homeLight2.isDoorOrWindow());
      assertFalse(homeLight2.isModelMirrored());
      assertEquals(0.0F, homeLight2.getY(), 0.01F);
      assertFalse(homeLight2.isBackFaceShown());
      assertFalse(homeLight2.isTexturable());
      assertFalse(homeLight2.isNameVisible());
      assertEquals(0.0F, homeLight2.getAngle(), 0.01F);
      assertNull(homeLight2.getCurrency());
      assertEquals(0.0F, homeLight2.getNameYOffset(), 0.01F);
      assertNull(homeLight2.getName());
      assertNull(homeLight2.getColor());
      assertNull(homeLight2.getCatalogId());
      assertNull(homeLight2.getShininess());
      assertFalse(homeLight2.isResizable());
      assertEquals(0.5F, homeLight2.getPower(), 0.01F);
      assertEquals(0.0F, homeLight2.getHeight(), 0.01F);
      assertFalse(homeLight2.isMovable());
      assertEquals("", homeLight2.getDescription());
      assertEquals(0.0F, homeLight2.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeLight2.getElevation(), 0.01F);
      assertEquals(0.0F, homeLight2.getWidth(), 0.01F);
      assertEquals(0.0F, homeLight2.getDepth(), 0.01F);
      assertFalse(homeLight2.isDeformable());
      assertEquals(0.0F, homeLight2.getNameAngle(), 0.01F);
      assertNull(homeLight2.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight2.getGroundElevation(), 0.01F);
      assertTrue(homeLight2.isVisible());
      
      boolean boolean0 = homeLight2.isNameCenterPointAt((-1.0F), 62.0F, 4.9088755F);
      assertNotSame(homeLight0, homeLight1);
      assertNotSame(homeLight0, homeLight2);
      assertNotSame(homeLight2, homeLight1);
      assertNotSame(homeLight2, homeLight0);
      assertFalse(homeLight0.equals((Object)homeLight1));
      assertFalse(homeLight0.equals((Object)homeLight2));
      assertFalse(homeLight2.equals((Object)homeLight1));
      assertFalse(homeLight2.equals((Object)homeLight0));
      assertFalse(boolean0);
      assertFalse(homeLight0.isTexturable());
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      assertNull(homeLight0.getDescription());
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertFalse(homeLight0.isResizable());
      assertTrue(homeLight0.isVisible());
      assertNull(homeLight0.getShininess());
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertFalse(homeLight0.isDeformable());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertNull(homeLight0.getCurrency());
      assertFalse(homeLight0.isMovable());
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertNull(homeLight0.getCatalogId());
      assertNull(homeLight0.getName());
      assertFalse(homeLight0.isNameVisible());
      assertNull(homeLight0.getColor());
      assertFalse(homeLight0.isBackFaceShown());
      assertFalse(homeLight0.isModelMirrored());
      assertEquals(0.0F, homeLight2.getX(), 0.01F);
      assertFalse(homeLight2.isDoorOrWindow());
      assertFalse(homeLight2.isModelMirrored());
      assertEquals(0.0F, homeLight2.getY(), 0.01F);
      assertFalse(homeLight2.isBackFaceShown());
      assertFalse(homeLight2.isTexturable());
      assertFalse(homeLight2.isNameVisible());
      assertEquals(0.0F, homeLight2.getAngle(), 0.01F);
      assertNull(homeLight2.getCurrency());
      assertEquals(0.0F, homeLight2.getNameYOffset(), 0.01F);
      assertNull(homeLight2.getName());
      assertNull(homeLight2.getColor());
      assertNull(homeLight2.getCatalogId());
      assertNull(homeLight2.getShininess());
      assertFalse(homeLight2.isResizable());
      assertEquals(0.5F, homeLight2.getPower(), 0.01F);
      assertEquals(0.0F, homeLight2.getHeight(), 0.01F);
      assertFalse(homeLight2.isMovable());
      assertEquals("", homeLight2.getDescription());
      assertEquals(0.0F, homeLight2.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeLight2.getElevation(), 0.01F);
      assertEquals(0.0F, homeLight2.getWidth(), 0.01F);
      assertEquals(0.0F, homeLight2.getDepth(), 0.01F);
      assertFalse(homeLight2.isDeformable());
      assertEquals(0.0F, homeLight2.getNameAngle(), 0.01F);
      assertNull(homeLight2.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight2.getGroundElevation(), 0.01F);
      assertTrue(homeLight2.isVisible());
      
      TextStyle textStyle0 = homeLight0.getNameStyle();
      assertNull(textStyle0);
      assertNotSame(homeLight0, homeLight1);
      assertNotSame(homeLight0, homeLight2);
      assertFalse(homeLight0.equals((Object)homeLight1));
      assertFalse(homeLight0.equals((Object)homeLight2));
      assertFalse(homeLight0.isTexturable());
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      assertNull(homeLight0.getDescription());
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertFalse(homeLight0.isResizable());
      assertTrue(homeLight0.isVisible());
      assertNull(homeLight0.getShininess());
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertFalse(homeLight0.isDeformable());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertNull(homeLight0.getCurrency());
      assertFalse(homeLight0.isMovable());
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertNull(homeLight0.getCatalogId());
      assertNull(homeLight0.getName());
      assertFalse(homeLight0.isNameVisible());
      assertNull(homeLight0.getColor());
      assertFalse(homeLight0.isBackFaceShown());
      assertFalse(homeLight0.isModelMirrored());
      
      BigDecimal bigDecimal2 = homeLight0.getValueAddedTaxPercentage();
      assertNull(bigDecimal2);
      assertNotSame(homeLight0, homeLight1);
      assertNotSame(homeLight0, homeLight2);
      assertFalse(homeLight0.equals((Object)homeLight1));
      assertFalse(homeLight0.equals((Object)homeLight2));
      assertFalse(homeLight0.isTexturable());
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      assertNull(homeLight0.getDescription());
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertFalse(homeLight0.isResizable());
      assertTrue(homeLight0.isVisible());
      assertNull(homeLight0.getShininess());
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertFalse(homeLight0.isDeformable());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertNull(homeLight0.getCurrency());
      assertFalse(homeLight0.isMovable());
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertNull(homeLight0.getCatalogId());
      assertNull(homeLight0.getName());
      assertFalse(homeLight0.isNameVisible());
      assertNull(homeLight0.getColor());
      assertFalse(homeLight0.isBackFaceShown());
      assertFalse(homeLight0.isModelMirrored());
      
      // Undeclared exception!
      try { 
        homeLight0.getModelRotation();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.eteks.sweethome3d.model.HomePieceOfFurniture", e);
      }
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      LightSource[] lightSourceArray0 = new LightSource[2];
      LightSource lightSource0 = new LightSource((-1.0F), (-1.0F), 381.9F, 1431655765);
      LightSource lightSource1 = new LightSource((-1.0F), (-69.47F), 700.4569F, (-853));
      lightSourceArray0[1] = lightSource1;
      Integer integer0 = new Integer((-853));
      Light light0 = mock(Light.class, new ViolatedAssumptionAnswer());
      doReturn((LightSource[]) null).when(light0).getLightSources();
      doReturn((Integer) null).when(light0).getColor();
      doReturn((String) null).when(light0).getCurrency();
      doReturn(0.0F).when(light0).getDepth();
      doReturn((String) null).when(light0).getDescription();
      doReturn(0.0F).when(light0).getElevation();
      doReturn(0.0F).when(light0).getHeight();
      doReturn((Content) null).when(light0).getIcon();
      doReturn((Content) null).when(light0).getModel();
      doReturn((float[][]) null).when(light0).getModelRotation();
      doReturn((String) null).when(light0).getName();
      doReturn((Content) null).when(light0).getPlanIcon();
      doReturn((BigDecimal) null).when(light0).getPrice();
      doReturn((String) null).when(light0).getStaircaseCutOutShape();
      doReturn((BigDecimal) null).when(light0).getValueAddedTaxPercentage();
      doReturn(0.0F).when(light0).getWidth();
      doReturn(false).when(light0).isBackFaceShown();
      doReturn(false).when(light0).isDeformable();
      doReturn(false).when(light0).isDoorOrWindow();
      doReturn(false).when(light0).isMovable();
      doReturn(false).when(light0).isResizable();
      doReturn(false).when(light0).isTexturable();
      byte[] byteArray0 = new byte[21];
      byteArray0[1] = (byte)1;
      byteArray0[4] = (byte)62;
      HomeLight homeLight0 = new HomeLight(light0);
      homeLight0.setY((-1.0F));
      homeLight0.getValueAddedTax();
      homeLight0.getValueAddedTax();
      homeLight0.getName();
      homeLight0.getLevel();
      HomeLight homeLight1 = homeLight0.clone();
      homeLight1.setName((String) null);
      homeLight1.setNameYOffset((-1.0F));
      homeLight1.getPriceValueAddedTaxIncluded();
      homeLight0.isDeformable();
      homeLight1.isNameVisible();
      // Undeclared exception!
      try { 
        homeLight0.setModelMirrored(false);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Piece isn't resizable
         //
         verifyException("com.eteks.sweethome3d.model.HomePieceOfFurniture", e);
      }
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      LightSource[] lightSourceArray0 = new LightSource[2];
      LightSource lightSource0 = new LightSource((-1.0F), (-1457.99F), 381.9F, 1431655765);
      LightSource lightSource1 = new LightSource((-1.0F), (-69.47F), 700.4569F, (-853));
      lightSourceArray0[1] = lightSource1;
      Integer integer0 = new Integer((-853));
      Light light0 = mock(Light.class, new ViolatedAssumptionAnswer());
      doReturn((LightSource[]) null).when(light0).getLightSources();
      doReturn((Integer) null).when(light0).getColor();
      doReturn((String) null).when(light0).getCurrency();
      doReturn(0.0F).when(light0).getDepth();
      doReturn((String) null).when(light0).getDescription();
      doReturn(0.0F).when(light0).getElevation();
      doReturn(0.0F).when(light0).getHeight();
      doReturn((Content) null).when(light0).getIcon();
      doReturn((Content) null).when(light0).getModel();
      doReturn((float[][]) null).when(light0).getModelRotation();
      doReturn((String) null).when(light0).getName();
      doReturn((Content) null).when(light0).getPlanIcon();
      doReturn((BigDecimal) null).when(light0).getPrice();
      doReturn((String) null).when(light0).getStaircaseCutOutShape();
      doReturn((BigDecimal) null).when(light0).getValueAddedTaxPercentage();
      doReturn(0.0F).when(light0).getWidth();
      doReturn(false).when(light0).isBackFaceShown();
      doReturn(false).when(light0).isDeformable();
      doReturn(false).when(light0).isDoorOrWindow();
      doReturn(false).when(light0).isMovable();
      doReturn(false).when(light0).isResizable();
      doReturn(false).when(light0).isTexturable();
      byte[] byteArray0 = new byte[5];
      byteArray0[1] = (byte)1;
      byteArray0[3] = (byte) (-32);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      HomeLight homeLight0 = new HomeLight(light0);
      homeLight0.setY((-1.0F));
      homeLight0.getValueAddedTax();
      homeLight0.getValueAddedTax();
      homeLight0.getName();
      homeLight0.getLevel();
      HomeLight homeLight1 = homeLight0.clone();
      homeLight1.setName((String) null);
      homeLight1.setNameYOffset((-1.0F));
      homeLight0.getNameStyle();
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      LightSource[] lightSourceArray0 = new LightSource[2];
      LightSource lightSource0 = new LightSource((-1.0F), (-1457.99F), 381.9F, 1431655765);
      LightSource lightSource1 = new LightSource((-1.0F), (-69.47F), 700.4569F, (-853));
      lightSourceArray0[1] = lightSource1;
      Integer integer0 = new Integer((-853));
      Light light0 = mock(Light.class, new ViolatedAssumptionAnswer());
      doReturn((LightSource[]) null).when(light0).getLightSources();
      doReturn((Integer) null).when(light0).getColor();
      doReturn((String) null).when(light0).getCurrency();
      doReturn(0.0F).when(light0).getDepth();
      doReturn((String) null).when(light0).getDescription();
      doReturn(0.0F).when(light0).getElevation();
      doReturn(0.0F).when(light0).getHeight();
      doReturn((Content) null).when(light0).getIcon();
      doReturn((Content) null).when(light0).getModel();
      doReturn((float[][]) null).when(light0).getModelRotation();
      doReturn((String) null).when(light0).getName();
      doReturn((Content) null).when(light0).getPlanIcon();
      doReturn((BigDecimal) null).when(light0).getPrice();
      doReturn((String) null).when(light0).getStaircaseCutOutShape();
      doReturn((BigDecimal) null).when(light0).getValueAddedTaxPercentage();
      doReturn(0.0F).when(light0).getWidth();
      doReturn(false).when(light0).isBackFaceShown();
      doReturn(false).when(light0).isDeformable();
      doReturn(false).when(light0).isDoorOrWindow();
      doReturn(false).when(light0).isMovable();
      doReturn(false).when(light0).isResizable();
      doReturn(false).when(light0).isTexturable();
      byte[] byteArray0 = new byte[21];
      byteArray0[1] = (byte)1;
      byteArray0[3] = (byte) (-32);
      byteArray0[4] = (byte)62;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      HomeLight homeLight0 = new HomeLight(light0);
      homeLight0.setY((-1.0F));
      homeLight0.getValueAddedTax();
      homeLight0.getValueAddedTax();
      homeLight0.getName();
      homeLight0.getLevel();
      HomeLight homeLight1 = homeLight0.clone();
      homeLight1.setName((String) null);
      homeLight1.setNameYOffset((-1.0F));
      homeLight1.getPriceValueAddedTaxIncluded();
      homeLight0.isDeformable();
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      Light light0 = mock(Light.class, new ViolatedAssumptionAnswer());
      doReturn((LightSource[]) null).when(light0).getLightSources();
      doReturn((Integer) null).when(light0).getColor();
      doReturn((String) null).when(light0).getCurrency();
      doReturn(0.0F).when(light0).getDepth();
      doReturn((String) null).when(light0).getDescription();
      doReturn(0.0F).when(light0).getElevation();
      doReturn(0.0F).when(light0).getHeight();
      doReturn((Content) null).when(light0).getIcon();
      doReturn((Content) null).when(light0).getModel();
      doReturn((float[][]) null).when(light0).getModelRotation();
      doReturn((String) null).when(light0).getName();
      doReturn((Content) null).when(light0).getPlanIcon();
      doReturn((BigDecimal) null).when(light0).getPrice();
      doReturn((String) null).when(light0).getStaircaseCutOutShape();
      doReturn((BigDecimal) null).when(light0).getValueAddedTaxPercentage();
      doReturn(0.0F).when(light0).getWidth();
      doReturn(false).when(light0).isBackFaceShown();
      doReturn(false).when(light0).isDeformable();
      doReturn(false).when(light0).isDoorOrWindow();
      doReturn(false).when(light0).isMovable();
      doReturn(false).when(light0).isResizable();
      doReturn(false).when(light0).isTexturable();
      HomeLight homeLight0 = new HomeLight(light0);
      HomeLight homeLight1 = homeLight0.clone();
      homeLight1.isBottomRightPointAt((-1.0F), (byte) (-32), (-915.78656F));
      homeLight1.setNameAngle(5.8981633F);
      homeLight0.setY((-915.78656F));
      BigDecimal bigDecimal0 = BigDecimal.TEN;
      homeLight1.setDescription((String) null);
      homeLight1.getModel();
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      Light light0 = mock(Light.class, new ViolatedAssumptionAnswer());
      doReturn((LightSource[]) null).when(light0).getLightSources();
      doReturn((Integer) null).when(light0).getColor();
      doReturn((String) null).when(light0).getCurrency();
      doReturn(0.0F).when(light0).getDepth();
      doReturn((String) null).when(light0).getDescription();
      doReturn(0.0F).when(light0).getElevation();
      doReturn(0.0F).when(light0).getHeight();
      doReturn((Content) null).when(light0).getIcon();
      doReturn((Content) null).when(light0).getModel();
      doReturn((float[][]) null).when(light0).getModelRotation();
      doReturn((String) null).when(light0).getName();
      doReturn((Content) null).when(light0).getPlanIcon();
      doReturn((BigDecimal) null).when(light0).getPrice();
      doReturn((String) null).when(light0).getStaircaseCutOutShape();
      doReturn((BigDecimal) null).when(light0).getValueAddedTaxPercentage();
      doReturn(0.0F).when(light0).getWidth();
      doReturn(false).when(light0).isBackFaceShown();
      doReturn(false).when(light0).isDeformable();
      doReturn(false).when(light0).isDoorOrWindow();
      doReturn(false).when(light0).isMovable();
      doReturn(false).when(light0).isResizable();
      doReturn(false).when(light0).isTexturable();
      Integer integer0 = Integer.valueOf((-2369));
      HomeLight homeLight0 = new HomeLight(light0);
      HomeLight homeLight1 = homeLight0.clone();
      homeLight1.isBackFaceShown();
      PropertyChangeListenerProxy propertyChangeListenerProxy0 = new PropertyChangeListenerProxy("[KE", (PropertyChangeListener) null);
      homeLight0.removePropertyChangeListener(propertyChangeListenerProxy0);
      homeLight0.isBackFaceShown();
      // Undeclared exception!
      try { 
        homeLight1.setColor(integer0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Piece isn't texturable
         //
         verifyException("com.eteks.sweethome3d.model.HomePieceOfFurniture", e);
      }
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      Light light0 = mock(Light.class, new ViolatedAssumptionAnswer());
      doReturn((LightSource[]) null).when(light0).getLightSources();
      doReturn((Integer) null).when(light0).getColor();
      doReturn((String) null).when(light0).getCurrency();
      doReturn(0.0F).when(light0).getDepth();
      doReturn((String) null).when(light0).getDescription();
      doReturn(0.0F).when(light0).getElevation();
      doReturn(0.0F).when(light0).getHeight();
      doReturn((Content) null).when(light0).getIcon();
      doReturn((Content) null).when(light0).getModel();
      doReturn((float[][]) null).when(light0).getModelRotation();
      doReturn((String) null).when(light0).getName();
      doReturn((Content) null).when(light0).getPlanIcon();
      doReturn((BigDecimal) null).when(light0).getPrice();
      doReturn((String) null).when(light0).getStaircaseCutOutShape();
      doReturn((BigDecimal) null).when(light0).getValueAddedTaxPercentage();
      doReturn(0.0F).when(light0).getWidth();
      doReturn(false).when(light0).isBackFaceShown();
      doReturn(false).when(light0).isDeformable();
      doReturn(false).when(light0).isDoorOrWindow();
      doReturn(false).when(light0).isMovable();
      doReturn(false).when(light0).isResizable();
      doReturn(false).when(light0).isTexturable();
      HomeLight homeLight0 = new HomeLight(light0);
      homeLight0.setY((-1.0F));
      homeLight0.getValueAddedTax();
      homeLight0.setVisible(false);
      homeLight0.getCurrency();
      float float0 = 0.0F;
      // Undeclared exception!
      try { 
        homeLight0.setHeight(0.0F);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Piece isn't resizable
         //
         verifyException("com.eteks.sweethome3d.model.HomePieceOfFurniture", e);
      }
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      Light light0 = mock(Light.class, new ViolatedAssumptionAnswer());
      doReturn((LightSource[]) null).when(light0).getLightSources();
      doReturn((Integer) null).when(light0).getColor();
      doReturn((String) null).when(light0).getCurrency();
      doReturn(0.0F).when(light0).getDepth();
      doReturn((String) null).when(light0).getDescription();
      doReturn(0.0F).when(light0).getElevation();
      doReturn(0.0F).when(light0).getHeight();
      doReturn((Content) null).when(light0).getIcon();
      doReturn((Content) null).when(light0).getModel();
      doReturn((float[][]) null).when(light0).getModelRotation();
      doReturn((String) null).when(light0).getName();
      doReturn((Content) null).when(light0).getPlanIcon();
      doReturn((BigDecimal) null).when(light0).getPrice();
      doReturn((String) null).when(light0).getStaircaseCutOutShape();
      doReturn((BigDecimal) null).when(light0).getValueAddedTaxPercentage();
      doReturn(0.0F).when(light0).getWidth();
      doReturn(false).when(light0).isBackFaceShown();
      doReturn(false).when(light0).isDeformable();
      doReturn(false).when(light0).isDoorOrWindow();
      doReturn(false).when(light0).isMovable();
      doReturn(false).when(light0).isResizable();
      doReturn(false).when(light0).isTexturable();
      HomeLight homeLight0 = new HomeLight(light0);
      HomeLight homeLight1 = homeLight0.clone();
      homeLight1.setY(700.4569F);
      BigDecimal bigDecimal0 = BigDecimal.TEN;
      homeLight0.isVisible();
      HomeLight homeLight2 = null;
      try {
        homeLight2 = new HomeLight(homeLight0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.eteks.sweethome3d.model.HomePieceOfFurniture", e);
      }
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      Integer integer0 = new Integer(1431655765);
      LightSource lightSource0 = new LightSource(1431655765, (-3203), (-1695.24F), (-3203));
      Integer.valueOf(1431655765);
      Integer.valueOf(0);
      Light light0 = mock(Light.class, new ViolatedAssumptionAnswer());
      doReturn((LightSource[]) null).when(light0).getLightSources();
      doReturn((Integer) null).when(light0).getColor();
      doReturn((String) null).when(light0).getCurrency();
      doReturn(0.0F).when(light0).getDepth();
      doReturn((String) null).when(light0).getDescription();
      doReturn(0.0F).when(light0).getElevation();
      doReturn(0.0F).when(light0).getHeight();
      doReturn((Content) null).when(light0).getIcon();
      doReturn((Content) null).when(light0).getModel();
      doReturn((float[][]) null).when(light0).getModelRotation();
      doReturn((String) null).when(light0).getName();
      doReturn((Content) null).when(light0).getPlanIcon();
      doReturn((BigDecimal) null).when(light0).getPrice();
      doReturn((String) null).when(light0).getStaircaseCutOutShape();
      doReturn((BigDecimal) null).when(light0).getValueAddedTaxPercentage();
      doReturn(0.0F).when(light0).getWidth();
      doReturn(false).when(light0).isBackFaceShown();
      doReturn(false).when(light0).isDeformable();
      doReturn(false).when(light0).isDoorOrWindow();
      doReturn(false).when(light0).isMovable();
      doReturn(false).when(light0).isResizable();
      doReturn(false).when(light0).isTexturable();
      BigInteger bigInteger0 = BigInteger.ZERO;
      HomeLight homeLight0 = new HomeLight(light0);
      homeLight0.setName("K3qCp6Q");
      homeLight0.intersectsRectangle((-1695.24F), 850.46F, 1250.0F, (-3792.2524F));
      homeLight0.setNameYOffset((-40.256F));
      BigDecimal bigDecimal0 = BigDecimal.TEN;
      HomeLight homeLight1 = homeLight0.clone();
      homeLight0.setDescription("K3qCp6Q");
      homeLight0.getDescription();
      homeLight0.isNameCenterPointAt(850.46F, (-1695.24F), 3205.479F);
      HomeLight homeLight2 = homeLight1.clone();
      homeLight2.getNameStyle();
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      LightSource[] lightSourceArray0 = new LightSource[2];
      LightSource lightSource0 = new LightSource((-1.0F), (-1457.99F), 375.34912F, 1431655765);
      LightSource lightSource1 = new LightSource((-1.0F), (-69.47F), 1.0F, (-853));
      lightSourceArray0[1] = lightSource1;
      Integer integer0 = new Integer((-853));
      Light light0 = mock(Light.class, new ViolatedAssumptionAnswer());
      doReturn((LightSource[]) null).when(light0).getLightSources();
      doReturn((Integer) null).when(light0).getColor();
      doReturn((String) null).when(light0).getCurrency();
      doReturn(0.0F).when(light0).getDepth();
      doReturn((String) null).when(light0).getDescription();
      doReturn(0.0F).when(light0).getElevation();
      doReturn(0.0F).when(light0).getHeight();
      doReturn((Content) null).when(light0).getIcon();
      doReturn((Content) null).when(light0).getModel();
      doReturn((float[][]) null).when(light0).getModelRotation();
      doReturn((String) null).when(light0).getName();
      doReturn((Content) null).when(light0).getPlanIcon();
      doReturn((BigDecimal) null).when(light0).getPrice();
      doReturn((String) null).when(light0).getStaircaseCutOutShape();
      doReturn((BigDecimal) null).when(light0).getValueAddedTaxPercentage();
      doReturn(0.0F).when(light0).getWidth();
      doReturn(false).when(light0).isBackFaceShown();
      doReturn(false).when(light0).isDeformable();
      doReturn(false).when(light0).isDoorOrWindow();
      doReturn(false).when(light0).isMovable();
      doReturn(false).when(light0).isResizable();
      doReturn(false).when(light0).isTexturable();
      byte[] byteArray0 = new byte[5];
      byteArray0[1] = (byte)1;
      byteArray0[4] = (byte)62;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      HomeLight homeLight0 = new HomeLight(light0);
      homeLight0.setY((-1.0F));
      Float.floatToIntBits((-1710.0F));
      Float.floatToIntBits((-1710.0F));
      Float.floatToIntBits(0.0F);
      Float.floatToIntBits(0);
      homeLight0.getElevation();
      homeLight0.getLevel();
      homeLight0.isBottomLeftPointAt((-2012.0F), (-2062.8F), (byte)62);
      Random.setNextRandom((-1636));
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      Light light0 = mock(Light.class, new ViolatedAssumptionAnswer());
      doReturn((LightSource[]) null).when(light0).getLightSources();
      doReturn((Integer) null).when(light0).getColor();
      doReturn((String) null).when(light0).getCurrency();
      doReturn(0.0F).when(light0).getDepth();
      doReturn((String) null).when(light0).getDescription();
      doReturn(0.0F).when(light0).getElevation();
      doReturn(0.0F).when(light0).getHeight();
      doReturn((Content) null).when(light0).getIcon();
      doReturn((Content) null).when(light0).getModel();
      doReturn((float[][]) null).when(light0).getModelRotation();
      doReturn((String) null).when(light0).getName();
      doReturn((Content) null).when(light0).getPlanIcon();
      doReturn((BigDecimal) null).when(light0).getPrice();
      doReturn((String) null).when(light0).getStaircaseCutOutShape();
      doReturn((BigDecimal) null).when(light0).getValueAddedTaxPercentage();
      doReturn(0.0F).when(light0).getWidth();
      doReturn(false).when(light0).isBackFaceShown();
      doReturn(false).when(light0).isDeformable();
      doReturn(false).when(light0).isDoorOrWindow();
      doReturn(false).when(light0).isMovable();
      doReturn(false).when(light0).isResizable();
      doReturn(false).when(light0).isTexturable();
      HomeLight homeLight0 = new HomeLight(light0);
      homeLight0.isTopRightPointAt((-119.7F), (-119.7F), (-119.7F));
      homeLight0.getLevel();
      HomeLight homeLight1 = homeLight0.clone();
      homeLight1.setMovable(false);
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      LightSource[] lightSourceArray0 = new LightSource[2];
      LightSource lightSource0 = new LightSource((-1.0F), (-1.0F), 381.9F, 1431655765);
      LightSource lightSource1 = new LightSource((-1.0F), (-69.47F), 700.4569F, 1431655765);
      lightSourceArray0[1] = lightSource1;
      Integer integer0 = new Integer(1431655765);
      Light light0 = mock(Light.class, new ViolatedAssumptionAnswer());
      doReturn((LightSource[]) null).when(light0).getLightSources();
      doReturn((Integer) null).when(light0).getColor();
      doReturn((String) null).when(light0).getCurrency();
      doReturn(0.0F).when(light0).getDepth();
      doReturn((String) null).when(light0).getDescription();
      doReturn(0.0F).when(light0).getElevation();
      doReturn(0.0F).when(light0).getHeight();
      doReturn((Content) null).when(light0).getIcon();
      doReturn((Content) null).when(light0).getModel();
      doReturn((float[][]) null).when(light0).getModelRotation();
      doReturn((String) null).when(light0).getName();
      doReturn((Content) null).when(light0).getPlanIcon();
      doReturn((BigDecimal) null).when(light0).getPrice();
      doReturn((String) null).when(light0).getStaircaseCutOutShape();
      doReturn((BigDecimal) null).when(light0).getValueAddedTaxPercentage();
      doReturn(0.0F).when(light0).getWidth();
      doReturn(false).when(light0).isBackFaceShown();
      doReturn(false).when(light0).isDeformable();
      doReturn(false).when(light0).isDoorOrWindow();
      doReturn(false).when(light0).isMovable();
      doReturn(false).when(light0).isResizable();
      doReturn(false).when(light0).isTexturable();
      HomeLight homeLight0 = new HomeLight(light0);
      HomeLight homeLight1 = homeLight0.clone();
      homeLight1.getName();
      homeLight0.getLevel();
      HomeLight homeLight2 = homeLight0.clone();
      homeLight1.setAngle(39.0F);
      homeLight2.setName("Invalid URL base for JAR entry");
      homeLight2.setDescription("Invalid URL base for JAR entry");
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, (String) null);
      homeLight2.intersectsRectangle(700.4569F, (-1.0F), 39.0F, (-69.47F));
      homeLight1.setNameYOffset((-1154.69F));
      BigDecimal bigDecimal0 = BigDecimal.TEN;
      HomeLight homeLight3 = homeLight0.clone();
      homeLight2.setDescription("Invalid URL base for JAR entry");
      homeLight0.getTexture();
      // Undeclared exception!
      try { 
        homeLight3.setTexture((HomeTexture) null);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Piece isn't texturable
         //
         verifyException("com.eteks.sweethome3d.model.HomePieceOfFurniture", e);
      }
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      Integer integer0 = new Integer(1431655766);
      Light light0 = mock(Light.class, new ViolatedAssumptionAnswer());
      doReturn((LightSource[]) null).when(light0).getLightSources();
      doReturn((Integer) null).when(light0).getColor();
      doReturn((String) null).when(light0).getCurrency();
      doReturn(0.0F).when(light0).getDepth();
      doReturn((String) null).when(light0).getDescription();
      doReturn(0.0F).when(light0).getElevation();
      doReturn(0.0F).when(light0).getHeight();
      doReturn((Content) null).when(light0).getIcon();
      doReturn((Content) null).when(light0).getModel();
      doReturn((float[][]) null).when(light0).getModelRotation();
      doReturn((String) null).when(light0).getName();
      doReturn((Content) null).when(light0).getPlanIcon();
      doReturn((BigDecimal) null).when(light0).getPrice();
      doReturn((String) null).when(light0).getStaircaseCutOutShape();
      doReturn((BigDecimal) null).when(light0).getValueAddedTaxPercentage();
      doReturn(0.0F).when(light0).getWidth();
      doReturn(false).when(light0).isBackFaceShown();
      doReturn(false).when(light0).isDeformable();
      doReturn(false).when(light0).isDoorOrWindow();
      doReturn(false).when(light0).isMovable();
      doReturn(false).when(light0).isResizable();
      doReturn(false).when(light0).isTexturable();
      HomeLight homeLight0 = new HomeLight(light0);
      homeLight0.setY(1431655766);
      homeLight0.getValueAddedTax();
      homeLight0.isTopRightPointAt(1431655766, 1431655766, 1431655766);
      homeLight0.getName();
      homeLight0.getLevel();
      homeLight0.setX((-172.0F));
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, (String) null);
      Float.floatToIntBits((byte)62);
      homeLight0.getPoints();
      homeLight0.setAngle(1800.2F);
      HomeLight homeLight1 = homeLight0.clone();
      homeLight1.setName("");
      Integer.valueOf(1431655766);
      HomeLight homeLight2 = homeLight1.clone();
      homeLight2.getPriceValueAddedTaxIncluded();
      homeLight0.getTexture();
      // Undeclared exception!
      try { 
        homeLight2.setTexture((HomeTexture) null);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Piece isn't texturable
         //
         verifyException("com.eteks.sweethome3d.model.HomePieceOfFurniture", e);
      }
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      Light light0 = mock(Light.class, new ViolatedAssumptionAnswer());
      doReturn((LightSource[]) null).when(light0).getLightSources();
      doReturn((Integer) null).when(light0).getColor();
      doReturn((String) null).when(light0).getCurrency();
      doReturn(0.0F).when(light0).getDepth();
      doReturn((String) null).when(light0).getDescription();
      doReturn(0.0F).when(light0).getElevation();
      doReturn(0.0F).when(light0).getHeight();
      doReturn((Content) null).when(light0).getIcon();
      doReturn((Content) null).when(light0).getModel();
      doReturn((float[][]) null).when(light0).getModelRotation();
      doReturn((String) null).when(light0).getName();
      doReturn((Content) null).when(light0).getPlanIcon();
      doReturn((BigDecimal) null).when(light0).getPrice();
      doReturn((String) null).when(light0).getStaircaseCutOutShape();
      doReturn((BigDecimal) null).when(light0).getValueAddedTaxPercentage();
      doReturn(0.0F).when(light0).getWidth();
      doReturn(false).when(light0).isBackFaceShown();
      doReturn(false).when(light0).isDeformable();
      doReturn(false).when(light0).isDoorOrWindow();
      doReturn(false).when(light0).isMovable();
      doReturn(false).when(light0).isResizable();
      doReturn(false).when(light0).isTexturable();
      Float.floatToIntBits((byte) (-40));
      Integer.valueOf((-2369));
      System.setCurrentTimeMillis((-1038090240));
      HomeLight homeLight0 = new HomeLight(light0);
      HomeLight homeLight1 = homeLight0.clone();
      homeLight1.isBackFaceShown();
      // Undeclared exception!
      try { 
        homeLight1.setTexture((HomeTexture) null);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Piece isn't texturable
         //
         verifyException("com.eteks.sweethome3d.model.HomePieceOfFurniture", e);
      }
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      LightSource[] lightSourceArray0 = new LightSource[2];
      URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      URL uRL0 = MockURL.URL("s<7]@ykxs+ j`a ", (String) null, (-1667), "", uRLStreamHandler0);
      TemporaryURLContent temporaryURLContent0 = new TemporaryURLContent(uRL0);
      BigDecimal bigDecimal0 = BigDecimal.TEN;
      CatalogLight catalogLight0 = new CatalogLight("\"<xp|JAv^\"<^Qh{/~", "s<7]@ykxs+ j`a ", "s<7]@ykxs+ j`a ", temporaryURLContent0, temporaryURLContent0, temporaryURLContent0, (-611.6462F), 1.7441415F, 0.5F, (-897.795F), true, lightSourceArray0, "", (float[][]) null, "P'HZa~G", true, true, true, bigDecimal0, bigDecimal0, "");
      HomeLight homeLight0 = new HomeLight(catalogLight0);
      HomeLight homeLight1 = homeLight0.clone();
      HomeLight homeLight2 = homeLight0.clone();
      Float float0 = new Float(6.283185307179586);
      homeLight2.setShininess(float0);
      homeLight2.setWidth((-1667));
      homeLight0.setMovable(true);
      homeLight1.getPoints();
      // Undeclared exception!
      try { 
        HomePieceOfFurniture.Property.valueOf("s<7]@ykxs+ j`a ");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant com.eteks.sweethome3d.model.HomePieceOfFurniture.Property.s<7]@ykxs+ j`a 
         //
         verifyException("java.lang.Enum", e);
      }
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      Light light0 = mock(Light.class, new ViolatedAssumptionAnswer());
      doReturn((LightSource[]) null).when(light0).getLightSources();
      doReturn((Integer) null).when(light0).getColor();
      doReturn((String) null).when(light0).getCurrency();
      doReturn(0.0F).when(light0).getDepth();
      doReturn((String) null).when(light0).getDescription();
      doReturn(0.0F).when(light0).getElevation();
      doReturn(0.0F).when(light0).getHeight();
      doReturn((Content) null).when(light0).getIcon();
      doReturn((Content) null).when(light0).getModel();
      doReturn((float[][]) null).when(light0).getModelRotation();
      doReturn((String) null).when(light0).getName();
      doReturn((Content) null).when(light0).getPlanIcon();
      doReturn((BigDecimal) null).when(light0).getPrice();
      doReturn((String) null).when(light0).getStaircaseCutOutShape();
      doReturn((BigDecimal) null).when(light0).getValueAddedTaxPercentage();
      doReturn(0.0F).when(light0).getWidth();
      doReturn(false).when(light0).isBackFaceShown();
      doReturn(false).when(light0).isDeformable();
      doReturn(false).when(light0).isDoorOrWindow();
      doReturn(false).when(light0).isMovable();
      doReturn(false).when(light0).isResizable();
      doReturn(false).when(light0).isTexturable();
      HomeLight homeLight0 = new HomeLight(light0);
      homeLight0.setElevation((-1.0F));
      homeLight0.isBottomRightPointAt((-1.0F), (-1.0F), (-1.0F));
      Float.floatToIntBits((byte) (-32));
      HomeLight homeLight1 = homeLight0.clone();
      homeLight1.getLevel();
      HomeLight homeLight2 = homeLight1.clone();
      homeLight1.setAngle(3309.9814F);
      homeLight0.setNameVisible(false);
      homeLight2.getGroundElevation();
      homeLight0.getY();
      // Undeclared exception!
      try { 
        homeLight2.setShininess((Float) null);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Piece isn't texturable
         //
         verifyException("com.eteks.sweethome3d.model.HomePieceOfFurniture", e);
      }
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      String[] stringArray0 = new String[8];
      stringArray0[0] = "";
      Float float0 = new Float((-1729.3374F));
      URLContent uRLContent0 = new URLContent((URL) null);
      Sash[] sashArray0 = new Sash[8];
      Sash sash0 = new Sash((-1.0F), (-10.917348F), (-368.692F), (-368.692F), 0.0F);
      sashArray0[5] = sash0;
      Sash sash1 = new Sash((-1485.2021F), (-368.692F), (-1.0F), (-10.917348F), (-1729.3374F));
      sashArray0[6] = sash1;
      float[][] floatArray0 = new float[3][1];
      float[] floatArray1 = new float[3];
      floatArray0[0] = floatArray1;
      float[] floatArray2 = new float[3];
      floatArray2[2] = (-1.0F);
      floatArray2[1] = (-1.0F);
      floatArray0[1] = floatArray2;
      floatArray0[2] = floatArray1;
      CatalogDoorOrWindow catalogDoorOrWindow0 = new CatalogDoorOrWindow("", "", "", "", stringArray0, (Long) null, float0, uRLContent0, uRLContent0, uRLContent0, (-368.692F), (-368.692F), (-1.0F), (-368.692F), true, (-368.692F), 0.0F, sashArray0, floatArray0, "", true, true, true, (BigDecimal) null, (BigDecimal) null, "");
      HomeDoorOrWindow homeDoorOrWindow0 = new HomeDoorOrWindow(catalogDoorOrWindow0);
      homeDoorOrWindow0.setNameXOffset(2.0F);
      homeDoorOrWindow0.setShininess((Float) 0.0F);
      Random.setNextRandom(2);
      homeDoorOrWindow0.isTexturable();
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      Integer integer0 = new Integer((-1469));
      assertNotNull(integer0);
      assertEquals((-1469), (int)integer0);
      
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      Light light0 = mock(Light.class, new ViolatedAssumptionAnswer());
      doReturn((Integer) null).when(light0).getColor();
      doReturn((String) null).when(light0).getCurrency();
      doReturn(0.0F).when(light0).getDepth();
      doReturn((String) null).when(light0).getDescription();
      doReturn(0.0F).when(light0).getElevation();
      doReturn(0.0F).when(light0).getHeight();
      doReturn((Content) null).when(light0).getIcon();
      doReturn((Content) null).when(light0).getModel();
      doReturn((float[][]) null).when(light0).getModelRotation();
      doReturn((String) null).when(light0).getName();
      doReturn((Content) null).when(light0).getPlanIcon();
      doReturn((BigDecimal) null).when(light0).getPrice();
      doReturn((String) null).when(light0).getStaircaseCutOutShape();
      doReturn((BigDecimal) null).when(light0).getValueAddedTaxPercentage();
      doReturn(0.0F).when(light0).getWidth();
      doReturn(false).when(light0).isBackFaceShown();
      doReturn(false).when(light0).isDeformable();
      doReturn(false).when(light0).isDoorOrWindow();
      doReturn(false).when(light0).isMovable();
      doReturn(false).when(light0).isResizable();
      doReturn(false).when(light0).isTexturable();
      HomePieceOfFurniture homePieceOfFurniture0 = new HomePieceOfFurniture(light0);
      assertNotNull(homePieceOfFurniture0);
      assertNull(homePieceOfFurniture0.getCatalogId());
      assertNull(homePieceOfFurniture0.getStaircaseCutOutShape());
      assertEquals(0.0F, homePieceOfFurniture0.getNameAngle(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture0.getDepth(), 0.01F);
      assertNull(homePieceOfFurniture0.getShininess());
      assertNull(homePieceOfFurniture0.getDescription());
      assertEquals(0.0F, homePieceOfFurniture0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture0.getAngle(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture0.getElevation(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture0.getWidth(), 0.01F);
      assertFalse(homePieceOfFurniture0.isBackFaceShown());
      assertFalse(homePieceOfFurniture0.isNameVisible());
      assertNull(homePieceOfFurniture0.getName());
      assertNull(homePieceOfFurniture0.getColor());
      assertFalse(homePieceOfFurniture0.isModelMirrored());
      assertEquals(0.0F, homePieceOfFurniture0.getX(), 0.01F);
      assertFalse(homePieceOfFurniture0.isDoorOrWindow());
      assertFalse(homePieceOfFurniture0.isTexturable());
      assertEquals(0.0F, homePieceOfFurniture0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture0.getY(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture0.getNameYOffset(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture0.getHeight(), 0.01F);
      assertTrue(homePieceOfFurniture0.isVisible());
      assertNull(homePieceOfFurniture0.getCurrency());
      assertFalse(homePieceOfFurniture0.isMovable());
      assertFalse(homePieceOfFurniture0.isDeformable());
      assertFalse(homePieceOfFurniture0.isResizable());
      
      HomePieceOfFurniture homePieceOfFurniture1 = homePieceOfFurniture0.clone();
      assertNotNull(homePieceOfFurniture1);
      assertNotSame(homePieceOfFurniture0, homePieceOfFurniture1);
      assertNotSame(homePieceOfFurniture1, homePieceOfFurniture0);
      assertFalse(homePieceOfFurniture1.equals((Object)homePieceOfFurniture0));
      assertNull(homePieceOfFurniture0.getCatalogId());
      assertNull(homePieceOfFurniture0.getStaircaseCutOutShape());
      assertEquals(0.0F, homePieceOfFurniture0.getNameAngle(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture0.getDepth(), 0.01F);
      assertNull(homePieceOfFurniture0.getShininess());
      assertNull(homePieceOfFurniture0.getDescription());
      assertEquals(0.0F, homePieceOfFurniture0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture0.getAngle(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture0.getElevation(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture0.getWidth(), 0.01F);
      assertFalse(homePieceOfFurniture0.isBackFaceShown());
      assertFalse(homePieceOfFurniture0.isNameVisible());
      assertNull(homePieceOfFurniture0.getName());
      assertNull(homePieceOfFurniture0.getColor());
      assertFalse(homePieceOfFurniture0.isModelMirrored());
      assertEquals(0.0F, homePieceOfFurniture0.getX(), 0.01F);
      assertFalse(homePieceOfFurniture0.isDoorOrWindow());
      assertFalse(homePieceOfFurniture0.isTexturable());
      assertEquals(0.0F, homePieceOfFurniture0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture0.getY(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture0.getNameYOffset(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture0.getHeight(), 0.01F);
      assertTrue(homePieceOfFurniture0.isVisible());
      assertNull(homePieceOfFurniture0.getCurrency());
      assertFalse(homePieceOfFurniture0.isMovable());
      assertFalse(homePieceOfFurniture0.isDeformable());
      assertFalse(homePieceOfFurniture0.isResizable());
      assertNull(homePieceOfFurniture1.getStaircaseCutOutShape());
      assertEquals(0.0F, homePieceOfFurniture1.getNameAngle(), 0.01F);
      assertNull(homePieceOfFurniture1.getShininess());
      assertEquals(0.0F, homePieceOfFurniture1.getDepth(), 0.01F);
      assertFalse(homePieceOfFurniture1.isResizable());
      assertFalse(homePieceOfFurniture1.isMovable());
      assertNull(homePieceOfFurniture1.getName());
      assertFalse(homePieceOfFurniture1.isTexturable());
      assertTrue(homePieceOfFurniture1.isVisible());
      assertEquals(0.0F, homePieceOfFurniture1.getAngle(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture1.getElevation(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture1.getWidth(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture1.getX(), 0.01F);
      assertNull(homePieceOfFurniture1.getDescription());
      assertFalse(homePieceOfFurniture1.isDoorOrWindow());
      assertEquals(0.0F, homePieceOfFurniture1.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture1.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture1.getY(), 0.01F);
      assertNull(homePieceOfFurniture1.getColor());
      assertFalse(homePieceOfFurniture1.isModelMirrored());
      assertFalse(homePieceOfFurniture1.isDeformable());
      assertNull(homePieceOfFurniture1.getCurrency());
      assertFalse(homePieceOfFurniture1.isBackFaceShown());
      assertFalse(homePieceOfFurniture1.isNameVisible());
      assertEquals(0.0F, homePieceOfFurniture1.getHeight(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture1.getNameYOffset(), 0.01F);
      assertNull(homePieceOfFurniture1.getCatalogId());
      
      homePieceOfFurniture1.setVisible(true);
      assertNotSame(homePieceOfFurniture0, homePieceOfFurniture1);
      assertNotSame(homePieceOfFurniture1, homePieceOfFurniture0);
      assertFalse(homePieceOfFurniture0.equals((Object)homePieceOfFurniture1));
      assertFalse(homePieceOfFurniture1.equals((Object)homePieceOfFurniture0));
      assertNull(homePieceOfFurniture0.getCatalogId());
      assertNull(homePieceOfFurniture0.getStaircaseCutOutShape());
      assertEquals(0.0F, homePieceOfFurniture0.getNameAngle(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture0.getDepth(), 0.01F);
      assertNull(homePieceOfFurniture0.getShininess());
      assertNull(homePieceOfFurniture0.getDescription());
      assertEquals(0.0F, homePieceOfFurniture0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture0.getAngle(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture0.getElevation(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture0.getWidth(), 0.01F);
      assertFalse(homePieceOfFurniture0.isBackFaceShown());
      assertFalse(homePieceOfFurniture0.isNameVisible());
      assertNull(homePieceOfFurniture0.getName());
      assertNull(homePieceOfFurniture0.getColor());
      assertFalse(homePieceOfFurniture0.isModelMirrored());
      assertEquals(0.0F, homePieceOfFurniture0.getX(), 0.01F);
      assertFalse(homePieceOfFurniture0.isDoorOrWindow());
      assertFalse(homePieceOfFurniture0.isTexturable());
      assertEquals(0.0F, homePieceOfFurniture0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture0.getY(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture0.getNameYOffset(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture0.getHeight(), 0.01F);
      assertTrue(homePieceOfFurniture0.isVisible());
      assertNull(homePieceOfFurniture0.getCurrency());
      assertFalse(homePieceOfFurniture0.isMovable());
      assertFalse(homePieceOfFurniture0.isDeformable());
      assertFalse(homePieceOfFurniture0.isResizable());
      assertNull(homePieceOfFurniture1.getStaircaseCutOutShape());
      assertEquals(0.0F, homePieceOfFurniture1.getNameAngle(), 0.01F);
      assertNull(homePieceOfFurniture1.getShininess());
      assertEquals(0.0F, homePieceOfFurniture1.getDepth(), 0.01F);
      assertFalse(homePieceOfFurniture1.isResizable());
      assertFalse(homePieceOfFurniture1.isMovable());
      assertNull(homePieceOfFurniture1.getName());
      assertFalse(homePieceOfFurniture1.isTexturable());
      assertTrue(homePieceOfFurniture1.isVisible());
      assertEquals(0.0F, homePieceOfFurniture1.getAngle(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture1.getElevation(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture1.getWidth(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture1.getX(), 0.01F);
      assertNull(homePieceOfFurniture1.getDescription());
      assertFalse(homePieceOfFurniture1.isDoorOrWindow());
      assertEquals(0.0F, homePieceOfFurniture1.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture1.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture1.getY(), 0.01F);
      assertNull(homePieceOfFurniture1.getColor());
      assertFalse(homePieceOfFurniture1.isModelMirrored());
      assertFalse(homePieceOfFurniture1.isDeformable());
      assertNull(homePieceOfFurniture1.getCurrency());
      assertFalse(homePieceOfFurniture1.isBackFaceShown());
      assertFalse(homePieceOfFurniture1.isNameVisible());
      assertEquals(0.0F, homePieceOfFurniture1.getHeight(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture1.getNameYOffset(), 0.01F);
      assertNull(homePieceOfFurniture1.getCatalogId());
      
      float float0 = homePieceOfFurniture1.getWidth();
      assertNotSame(homePieceOfFurniture0, homePieceOfFurniture1);
      assertNotSame(homePieceOfFurniture1, homePieceOfFurniture0);
      assertFalse(homePieceOfFurniture0.equals((Object)homePieceOfFurniture1));
      assertFalse(homePieceOfFurniture1.equals((Object)homePieceOfFurniture0));
      assertEquals(0.0F, float0, 0.01F);
      assertNull(homePieceOfFurniture0.getCatalogId());
      assertNull(homePieceOfFurniture0.getStaircaseCutOutShape());
      assertEquals(0.0F, homePieceOfFurniture0.getNameAngle(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture0.getDepth(), 0.01F);
      assertNull(homePieceOfFurniture0.getShininess());
      assertNull(homePieceOfFurniture0.getDescription());
      assertEquals(0.0F, homePieceOfFurniture0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture0.getAngle(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture0.getElevation(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture0.getWidth(), 0.01F);
      assertFalse(homePieceOfFurniture0.isBackFaceShown());
      assertFalse(homePieceOfFurniture0.isNameVisible());
      assertNull(homePieceOfFurniture0.getName());
      assertNull(homePieceOfFurniture0.getColor());
      assertFalse(homePieceOfFurniture0.isModelMirrored());
      assertEquals(0.0F, homePieceOfFurniture0.getX(), 0.01F);
      assertFalse(homePieceOfFurniture0.isDoorOrWindow());
      assertFalse(homePieceOfFurniture0.isTexturable());
      assertEquals(0.0F, homePieceOfFurniture0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture0.getY(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture0.getNameYOffset(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture0.getHeight(), 0.01F);
      assertTrue(homePieceOfFurniture0.isVisible());
      assertNull(homePieceOfFurniture0.getCurrency());
      assertFalse(homePieceOfFurniture0.isMovable());
      assertFalse(homePieceOfFurniture0.isDeformable());
      assertFalse(homePieceOfFurniture0.isResizable());
      assertNull(homePieceOfFurniture1.getStaircaseCutOutShape());
      assertEquals(0.0F, homePieceOfFurniture1.getNameAngle(), 0.01F);
      assertNull(homePieceOfFurniture1.getShininess());
      assertEquals(0.0F, homePieceOfFurniture1.getDepth(), 0.01F);
      assertFalse(homePieceOfFurniture1.isResizable());
      assertFalse(homePieceOfFurniture1.isMovable());
      assertNull(homePieceOfFurniture1.getName());
      assertFalse(homePieceOfFurniture1.isTexturable());
      assertTrue(homePieceOfFurniture1.isVisible());
      assertEquals(0.0F, homePieceOfFurniture1.getAngle(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture1.getElevation(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture1.getWidth(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture1.getX(), 0.01F);
      assertNull(homePieceOfFurniture1.getDescription());
      assertFalse(homePieceOfFurniture1.isDoorOrWindow());
      assertEquals(0.0F, homePieceOfFurniture1.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture1.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture1.getY(), 0.01F);
      assertNull(homePieceOfFurniture1.getColor());
      assertFalse(homePieceOfFurniture1.isModelMirrored());
      assertFalse(homePieceOfFurniture1.isDeformable());
      assertNull(homePieceOfFurniture1.getCurrency());
      assertFalse(homePieceOfFurniture1.isBackFaceShown());
      assertFalse(homePieceOfFurniture1.isNameVisible());
      assertEquals(0.0F, homePieceOfFurniture1.getHeight(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture1.getNameYOffset(), 0.01F);
      assertNull(homePieceOfFurniture1.getCatalogId());
      
      homePieceOfFurniture1.setNameVisible(true);
      assertNotSame(homePieceOfFurniture0, homePieceOfFurniture1);
      assertNotSame(homePieceOfFurniture1, homePieceOfFurniture0);
      assertFalse(homePieceOfFurniture0.equals((Object)homePieceOfFurniture1));
      assertFalse(homePieceOfFurniture1.equals((Object)homePieceOfFurniture0));
      assertNull(homePieceOfFurniture0.getCatalogId());
      assertNull(homePieceOfFurniture0.getStaircaseCutOutShape());
      assertEquals(0.0F, homePieceOfFurniture0.getNameAngle(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture0.getDepth(), 0.01F);
      assertNull(homePieceOfFurniture0.getShininess());
      assertNull(homePieceOfFurniture0.getDescription());
      assertEquals(0.0F, homePieceOfFurniture0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture0.getAngle(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture0.getElevation(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture0.getWidth(), 0.01F);
      assertFalse(homePieceOfFurniture0.isBackFaceShown());
      assertFalse(homePieceOfFurniture0.isNameVisible());
      assertNull(homePieceOfFurniture0.getName());
      assertNull(homePieceOfFurniture0.getColor());
      assertFalse(homePieceOfFurniture0.isModelMirrored());
      assertEquals(0.0F, homePieceOfFurniture0.getX(), 0.01F);
      assertFalse(homePieceOfFurniture0.isDoorOrWindow());
      assertFalse(homePieceOfFurniture0.isTexturable());
      assertEquals(0.0F, homePieceOfFurniture0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture0.getY(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture0.getNameYOffset(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture0.getHeight(), 0.01F);
      assertTrue(homePieceOfFurniture0.isVisible());
      assertNull(homePieceOfFurniture0.getCurrency());
      assertFalse(homePieceOfFurniture0.isMovable());
      assertFalse(homePieceOfFurniture0.isDeformable());
      assertFalse(homePieceOfFurniture0.isResizable());
      assertNull(homePieceOfFurniture1.getStaircaseCutOutShape());
      assertEquals(0.0F, homePieceOfFurniture1.getNameAngle(), 0.01F);
      assertNull(homePieceOfFurniture1.getShininess());
      assertEquals(0.0F, homePieceOfFurniture1.getDepth(), 0.01F);
      assertFalse(homePieceOfFurniture1.isResizable());
      assertFalse(homePieceOfFurniture1.isMovable());
      assertNull(homePieceOfFurniture1.getName());
      assertFalse(homePieceOfFurniture1.isTexturable());
      assertTrue(homePieceOfFurniture1.isVisible());
      assertEquals(0.0F, homePieceOfFurniture1.getAngle(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture1.getElevation(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture1.getWidth(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture1.getX(), 0.01F);
      assertNull(homePieceOfFurniture1.getDescription());
      assertFalse(homePieceOfFurniture1.isDoorOrWindow());
      assertEquals(0.0F, homePieceOfFurniture1.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture1.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture1.getY(), 0.01F);
      assertNull(homePieceOfFurniture1.getColor());
      assertFalse(homePieceOfFurniture1.isModelMirrored());
      assertFalse(homePieceOfFurniture1.isDeformable());
      assertNull(homePieceOfFurniture1.getCurrency());
      assertTrue(homePieceOfFurniture1.isNameVisible());
      assertFalse(homePieceOfFurniture1.isBackFaceShown());
      assertEquals(0.0F, homePieceOfFurniture1.getHeight(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture1.getNameYOffset(), 0.01F);
      assertNull(homePieceOfFurniture1.getCatalogId());
      
      homePieceOfFurniture1.getStaircaseCutOutShape();
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      LightSource[] lightSourceArray0 = new LightSource[2];
      LightSource lightSource0 = new LightSource((-1.0F), (-1457.99F), 381.9F, 1431655765);
      LightSource lightSource1 = new LightSource((-1.0F), (-69.47F), 700.4569F, (-853));
      lightSourceArray0[1] = lightSource1;
      Integer integer0 = new Integer((-853));
      Light light0 = mock(Light.class, new ViolatedAssumptionAnswer());
      doReturn((LightSource[]) null).when(light0).getLightSources();
      doReturn((Integer) null).when(light0).getColor();
      doReturn((String) null).when(light0).getCurrency();
      doReturn(0.0F).when(light0).getDepth();
      doReturn((String) null).when(light0).getDescription();
      doReturn(0.0F).when(light0).getElevation();
      doReturn(0.0F).when(light0).getHeight();
      doReturn((Content) null).when(light0).getIcon();
      doReturn((Content) null).when(light0).getModel();
      doReturn((float[][]) null).when(light0).getModelRotation();
      doReturn((String) null).when(light0).getName();
      doReturn((Content) null).when(light0).getPlanIcon();
      doReturn((BigDecimal) null).when(light0).getPrice();
      doReturn((String) null).when(light0).getStaircaseCutOutShape();
      doReturn((BigDecimal) null).when(light0).getValueAddedTaxPercentage();
      doReturn(0.0F).when(light0).getWidth();
      doReturn(false).when(light0).isBackFaceShown();
      doReturn(false).when(light0).isDeformable();
      doReturn(false).when(light0).isDoorOrWindow();
      doReturn(false).when(light0).isMovable();
      doReturn(false).when(light0).isResizable();
      doReturn(false).when(light0).isTexturable();
      byte[] byteArray0 = new byte[5];
      byteArray0[1] = (byte)1;
      byteArray0[3] = (byte) (-32);
      byteArray0[4] = (byte)62;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      HomeLight homeLight0 = new HomeLight(light0);
      Integer integer1 = new Integer((byte) (-32));
      Float.floatToIntBits((-1710.0F));
      homeLight0.isPointAt(1431655765, (-2398.1F), 2632.0835F);
      Float.floatToIntBits((-992624640));
      homeLight0.setMovable(true);
      Float.floatToIntBits(0.0F);
      Float.floatToIntBits(0);
      // Undeclared exception!
      try { 
        homeLight0.setShininess((Float) 0.0F);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Piece isn't texturable
         //
         verifyException("com.eteks.sweethome3d.model.HomePieceOfFurniture", e);
      }
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      String[] stringArray0 = new String[8];
      stringArray0[0] = "";
      Float float0 = new Float((-1729.3374F));
      URLContent uRLContent0 = new URLContent((URL) null);
      Sash[] sashArray0 = new Sash[8];
      Sash sash0 = new Sash((-1.0F), 0.3926991F, (-368.692F), (-368.692F), 0.0F);
      sashArray0[5] = sash0;
      Sash sash1 = new Sash((-1485.2021F), (-368.692F), (-1.0F), 0.3926991F, (-1729.3374F));
      sashArray0[6] = sash1;
      float[][] floatArray0 = new float[3][1];
      float[] floatArray1 = new float[3];
      floatArray1[2] = 2.0F;
      floatArray0[0] = floatArray1;
      float[] floatArray2 = new float[3];
      floatArray2[2] = (-1.0F);
      floatArray2[1] = (-1.0F);
      floatArray2[2] = (-1.0F);
      floatArray0[1] = floatArray2;
      floatArray0[2] = floatArray1;
      CatalogDoorOrWindow catalogDoorOrWindow0 = new CatalogDoorOrWindow("", "", "", "", stringArray0, (Long) null, float0, uRLContent0, uRLContent0, uRLContent0, (-368.692F), (-368.692F), (-1.0F), (-368.692F), true, (-368.692F), 0.0F, sashArray0, floatArray0, "", true, true, true, (BigDecimal) null, (BigDecimal) null, "");
      HomeDoorOrWindow homeDoorOrWindow0 = new HomeDoorOrWindow(catalogDoorOrWindow0);
      HomeDoorOrWindow homeDoorOrWindow1 = homeDoorOrWindow0.clone();
      homeDoorOrWindow1.setNameXOffset(2.0F);
      homeDoorOrWindow0.getCatalogId();
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      LightSource[] lightSourceArray0 = new LightSource[2];
      LightSource lightSource0 = new LightSource((-1.0F), (-1457.99F), 381.9F, 1431655765);
      lightSourceArray0[0] = lightSource0;
      LightSource lightSource1 = new LightSource((-1.0F), (-69.47F), 700.4569F, (-853));
      lightSourceArray0[1] = lightSource1;
      Integer integer0 = new Integer((-853));
      Light light0 = mock(Light.class, new ViolatedAssumptionAnswer());
      doReturn((LightSource[]) null).when(light0).getLightSources();
      doReturn((Integer) null).when(light0).getColor();
      doReturn((String) null).when(light0).getCurrency();
      doReturn(0.0F).when(light0).getDepth();
      doReturn((String) null).when(light0).getDescription();
      doReturn(0.0F).when(light0).getElevation();
      doReturn(0.0F).when(light0).getHeight();
      doReturn((Content) null).when(light0).getIcon();
      doReturn((Content) null).when(light0).getModel();
      doReturn((float[][]) null).when(light0).getModelRotation();
      doReturn((String) null).when(light0).getName();
      doReturn((Content) null).when(light0).getPlanIcon();
      doReturn((BigDecimal) null).when(light0).getPrice();
      doReturn((String) null).when(light0).getStaircaseCutOutShape();
      doReturn((BigDecimal) null).when(light0).getValueAddedTaxPercentage();
      doReturn(0.0F).when(light0).getWidth();
      doReturn(false).when(light0).isBackFaceShown();
      doReturn(false).when(light0).isDeformable();
      doReturn(false).when(light0).isDoorOrWindow();
      doReturn(false).when(light0).isMovable();
      doReturn(false).when(light0).isResizable();
      doReturn(false).when(light0).isTexturable();
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)13;
      byteArray0[1] = (byte)1;
      byteArray0[2] = (byte)13;
      byteArray0[3] = (byte) (-32);
      byteArray0[4] = (byte)62;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      HomeLight homeLight0 = new HomeLight(light0);
      homeLight0.setY((-1.0F));
      homeLight0.getValueAddedTax();
      homeLight0.getValueAddedTax();
      homeLight0.getName();
      homeLight0.getLevel();
      HomeLight homeLight1 = homeLight0.clone();
      homeLight0.setName("s(~@f");
      homeLight1.isNameVisible();
      homeLight0.setNameYOffset((-69.47F));
      homeLight0.getPriceValueAddedTaxIncluded();
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      LightSource[] lightSourceArray0 = new LightSource[2];
      LightSource lightSource0 = new LightSource((-1.0F), (-1457.99F), 381.9F, 1431655765);
      lightSourceArray0[0] = lightSource0;
      LightSource lightSource1 = new LightSource((-1.0F), (-69.47F), 700.4569F, (-853));
      lightSourceArray0[1] = lightSource1;
      Integer integer0 = new Integer((-853));
      Light light0 = mock(Light.class, new ViolatedAssumptionAnswer());
      doReturn((LightSource[]) null).when(light0).getLightSources();
      doReturn((Integer) null).when(light0).getColor();
      doReturn((String) null).when(light0).getCurrency();
      doReturn(0.0F).when(light0).getDepth();
      doReturn((String) null).when(light0).getDescription();
      doReturn(0.0F).when(light0).getElevation();
      doReturn(0.0F).when(light0).getHeight();
      doReturn((Content) null).when(light0).getIcon();
      doReturn((Content) null).when(light0).getModel();
      doReturn((float[][]) null).when(light0).getModelRotation();
      doReturn((String) null).when(light0).getName();
      doReturn((Content) null).when(light0).getPlanIcon();
      doReturn((BigDecimal) null).when(light0).getPrice();
      doReturn((String) null).when(light0).getStaircaseCutOutShape();
      doReturn((BigDecimal) null).when(light0).getValueAddedTaxPercentage();
      doReturn(0.0F).when(light0).getWidth();
      doReturn(false).when(light0).isBackFaceShown();
      doReturn(false).when(light0).isDeformable();
      doReturn(false).when(light0).isDoorOrWindow();
      doReturn(false).when(light0).isMovable();
      doReturn(false).when(light0).isResizable();
      doReturn(false).when(light0).isTexturable();
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)13;
      byteArray0[1] = (byte)1;
      byteArray0[2] = (byte)13;
      byteArray0[3] = (byte) (-32);
      byteArray0[4] = (byte)62;
      HomeLight homeLight0 = new HomeLight(light0);
      HomeLight homeLight1 = homeLight0.clone();
      homeLight1.setX((-192.7F));
      homeLight0.getValueAddedTax();
      homeLight0.getName();
      homeLight0.getLevel();
      homeLight0.setName((String) null);
      homeLight1.isNameVisible();
      homeLight0.setNameYOffset((-2646.802F));
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      Long long0 = new Long(0L);
      Long long1 = Long.getLong("com.eteks.sweethome3d.model.HomeDoorOrWindow", long0);
      Float float0 = new Float((double) 0L);
      Sash[] sashArray0 = new Sash[2];
      Sash sash0 = new Sash(991.0187F, 0.0F, (-1666.0F), 0.0F, (-1666.0F));
      sashArray0[0] = sash0;
      Sash sash1 = new Sash(0.0F, 0.0F, 0.0F, (-201.17F), 0.3926991F);
      sashArray0[1] = sash1;
      float[][] floatArray0 = new float[4][2];
      float[] floatArray1 = new float[4];
      floatArray1[0] = 0.0F;
      floatArray1[1] = 991.0187F;
      floatArray1[2] = 991.0187F;
      floatArray1[3] = 0.0F;
      floatArray0[0] = floatArray1;
      float[] floatArray2 = new float[3];
      floatArray2[0] = 991.0187F;
      floatArray2[1] = (-201.17F);
      floatArray2[2] = 0.3926991F;
      floatArray0[1] = floatArray2;
      float[] floatArray3 = new float[9];
      floatArray3[0] = 991.0187F;
      floatArray3[1] = (float) 0L;
      floatArray3[2] = (-201.17F);
      floatArray3[3] = (-1.0F);
      floatArray3[4] = 0.0F;
      floatArray3[5] = 0.0F;
      floatArray3[6] = (-1666.0F);
      floatArray3[7] = (-1666.0F);
      floatArray3[8] = (-1666.0F);
      floatArray0[2] = floatArray3;
      float[] floatArray4 = new float[0];
      floatArray0[3] = floatArray4;
      BigInteger bigInteger0 = BigInteger.ZERO;
      BigDecimal bigDecimal0 = new BigDecimal(bigInteger0);
      CatalogDoorOrWindow catalogDoorOrWindow0 = new CatalogDoorOrWindow("com.eteks.sweethome3d.model.TextStyle", "com.eteks.sweethome3d.model.TextStyle", "com.eteks.sweethome3d.model.HomePieceOfFurniture$17", "com.eteks.sweethome3d.model.HomePieceOfFurniture$17", (String[]) null, long1, float0, (Content) null, (Content) null, (Content) null, 0L, 0L, 0.0F, 0.0F, false, (-201.17F), 0L, sashArray0, floatArray0, "2.", true, false, false, bigDecimal0, bigDecimal0, "com.eteks.sweethome3d.model.TextStyle");
      catalogDoorOrWindow0.getWallThickness();
      CatalogDoorOrWindow catalogDoorOrWindow1 = new CatalogDoorOrWindow("TEXTURE", "java.version", "", (Content) null, (Content) null, (Content) null, 1.0F, 0.5F, 0.5F, 672.42474F, true, 0.0F, (-1.0F), sashArray0, floatArray0, "CRCKF", false, true, false, bigDecimal0, bigDecimal0, "");
      catalogDoorOrWindow1.getWallDistance();
      catalogDoorOrWindow0.getSashes();
      HomeDoorOrWindow homeDoorOrWindow0 = new HomeDoorOrWindow(catalogDoorOrWindow1);
      HomeDoorOrWindow homeDoorOrWindow1 = homeDoorOrWindow0.clone();
      Level level0 = new Level("Content isn't a JAR entry", (-201.17F), (-635.0F), 3.4028235E38F);
      homeDoorOrWindow1.setLevel(level0);
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      LightSource[] lightSourceArray0 = new LightSource[2];
      URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      URL uRL0 = MockURL.URL("s<7]@ykxs+ 0`a ", (String) null, (-1663), "", uRLStreamHandler0);
      TemporaryURLContent temporaryURLContent0 = new TemporaryURLContent(uRL0);
      BigDecimal bigDecimal0 = BigDecimal.TEN;
      CatalogLight catalogLight0 = new CatalogLight("\"<xp|JAv^\"<^Qh{/~", "s<7]@ykxs+ 0`a ", "s<7]@ykxs+ 0`a ", temporaryURLContent0, temporaryURLContent0, temporaryURLContent0, (-611.6462F), 1.7441415F, 0.5F, (-897.795F), true, lightSourceArray0, "", (float[][]) null, "P'HZa~G", true, true, true, bigDecimal0, bigDecimal0, "");
      HomeLight homeLight0 = new HomeLight(catalogLight0);
      homeLight0.clone();
      HomeLight homeLight1 = homeLight0.clone();
      homeLight0.setY(0.5F);
      homeLight0.setTexture((HomeTexture) null);
      Integer.valueOf(340);
      homeLight1.setModelMirrored(true);
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      Light light0 = mock(Light.class, new ViolatedAssumptionAnswer());
      doReturn((Integer) null).when(light0).getColor();
      doReturn((String) null).when(light0).getCurrency();
      doReturn(0.0F).when(light0).getDepth();
      doReturn((String) null).when(light0).getDescription();
      doReturn(0.0F).when(light0).getElevation();
      doReturn(0.0F).when(light0).getHeight();
      doReturn((Content) null).when(light0).getIcon();
      doReturn((Content) null).when(light0).getModel();
      doReturn((float[][]) null).when(light0).getModelRotation();
      doReturn((String) null).when(light0).getName();
      doReturn((Content) null).when(light0).getPlanIcon();
      doReturn((BigDecimal) null).when(light0).getPrice();
      doReturn((String) null).when(light0).getStaircaseCutOutShape();
      doReturn((BigDecimal) null).when(light0).getValueAddedTaxPercentage();
      doReturn(0.0F).when(light0).getWidth();
      doReturn(false).when(light0).isBackFaceShown();
      doReturn(false).when(light0).isDeformable();
      doReturn(false).when(light0).isDoorOrWindow();
      doReturn(false).when(light0).isMovable();
      doReturn(false).when(light0).isResizable();
      doReturn(false).when(light0).isTexturable();
      HomePieceOfFurniture homePieceOfFurniture0 = new HomePieceOfFurniture(light0);
      HomePieceOfFurniture homePieceOfFurniture1 = homePieceOfFurniture0.clone();
      homePieceOfFurniture1.setNameVisible(true);
      homePieceOfFurniture0.getValueAddedTaxPercentage();
      // Undeclared exception!
      try { 
        homePieceOfFurniture0.setWidth((-1051.0F));
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Piece isn't resizable
         //
         verifyException("com.eteks.sweethome3d.model.HomePieceOfFurniture", e);
      }
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      Integer integer0 = new Integer((-1469));
      FileSystemHandling.shouldAllThrowIOExceptions();
      Light light0 = mock(Light.class, new ViolatedAssumptionAnswer());
      doReturn((Integer) null).when(light0).getColor();
      doReturn((String) null).when(light0).getCurrency();
      doReturn(0.0F).when(light0).getDepth();
      doReturn((String) null).when(light0).getDescription();
      doReturn(0.0F).when(light0).getElevation();
      doReturn(0.0F).when(light0).getHeight();
      doReturn((Content) null).when(light0).getIcon();
      doReturn((Content) null).when(light0).getModel();
      doReturn((float[][]) null).when(light0).getModelRotation();
      doReturn((String) null).when(light0).getName();
      doReturn((Content) null).when(light0).getPlanIcon();
      doReturn((BigDecimal) null).when(light0).getPrice();
      doReturn((String) null).when(light0).getStaircaseCutOutShape();
      doReturn((BigDecimal) null).when(light0).getValueAddedTaxPercentage();
      doReturn(0.0F).when(light0).getWidth();
      doReturn(false).when(light0).isBackFaceShown();
      doReturn(false).when(light0).isDeformable();
      doReturn(false).when(light0).isDoorOrWindow();
      doReturn(false).when(light0).isMovable();
      doReturn(false).when(light0).isResizable();
      doReturn(false).when(light0).isTexturable();
      HomePieceOfFurniture homePieceOfFurniture0 = new HomePieceOfFurniture(light0);
      HomePieceOfFurniture homePieceOfFurniture1 = homePieceOfFurniture0.clone();
      homePieceOfFurniture1.setVisible(true);
      homePieceOfFurniture1.getWidth();
      homePieceOfFurniture0.setNameVisible(false);
      FileSystemHandling.shouldAllThrowIOExceptions();
      homePieceOfFurniture0.setNameYOffset((-1469));
      homePieceOfFurniture0.getGroundElevation();
      homePieceOfFurniture0.getY();
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      Integer integer0 = new Integer((-1469));
      FileSystemHandling.shouldAllThrowIOExceptions();
      Light light0 = mock(Light.class, new ViolatedAssumptionAnswer());
      doReturn((LightSource[]) null).when(light0).getLightSources();
      doReturn((Integer) null).when(light0).getColor();
      doReturn((String) null).when(light0).getCurrency();
      doReturn(0.0F).when(light0).getDepth();
      doReturn((String) null).when(light0).getDescription();
      doReturn(0.0F).when(light0).getElevation();
      doReturn(0.0F).when(light0).getHeight();
      doReturn((Content) null).when(light0).getIcon();
      doReturn((Content) null).when(light0).getModel();
      doReturn((float[][]) null).when(light0).getModelRotation();
      doReturn((String) null).when(light0).getName();
      doReturn((Content) null).when(light0).getPlanIcon();
      doReturn((BigDecimal) null).when(light0).getPrice();
      doReturn((String) null).when(light0).getStaircaseCutOutShape();
      doReturn((BigDecimal) null).when(light0).getValueAddedTaxPercentage();
      doReturn(0.0F).when(light0).getWidth();
      doReturn(false).when(light0).isBackFaceShown();
      doReturn(false).when(light0).isDeformable();
      doReturn(false).when(light0).isDoorOrWindow();
      doReturn(false).when(light0).isMovable();
      doReturn(false).when(light0).isResizable();
      doReturn(false).when(light0).isTexturable();
      HomeLight homeLight0 = new HomeLight(light0);
      homeLight0.setElevation((-1.0F));
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)1;
      byteArray0[1] = (byte)1;
      byteArray0[2] = (byte) (-32);
      PropertyChangeListener propertyChangeListener0 = mock(PropertyChangeListener.class, new ViolatedAssumptionAnswer());
      PropertyChangeListenerProxy propertyChangeListenerProxy0 = new PropertyChangeListenerProxy("yA.", propertyChangeListener0);
      homeLight0.addPropertyChangeListener(propertyChangeListenerProxy0);
      homeLight0.setVisible(true);
      byteArray0[3] = (byte)62;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      homeLight0.setNameAngle((byte) (-32));
      HomeLight homeLight1 = null;
      try {
        homeLight1 = new HomeLight((Light) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.eteks.sweethome3d.model.HomePieceOfFurniture", e);
      }
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      Integer integer0 = new Integer((-1469));
      FileSystemHandling.shouldAllThrowIOExceptions();
      Light light0 = mock(Light.class, new ViolatedAssumptionAnswer());
      doReturn((LightSource[]) null).when(light0).getLightSources();
      doReturn((Integer) null).when(light0).getColor();
      doReturn((String) null).when(light0).getCurrency();
      doReturn(0.0F).when(light0).getDepth();
      doReturn((String) null).when(light0).getDescription();
      doReturn(0.0F).when(light0).getElevation();
      doReturn(0.0F).when(light0).getHeight();
      doReturn((Content) null).when(light0).getIcon();
      doReturn((Content) null).when(light0).getModel();
      doReturn((float[][]) null).when(light0).getModelRotation();
      doReturn((String) null).when(light0).getName();
      doReturn((Content) null).when(light0).getPlanIcon();
      doReturn((BigDecimal) null).when(light0).getPrice();
      doReturn((String) null).when(light0).getStaircaseCutOutShape();
      doReturn((BigDecimal) null).when(light0).getValueAddedTaxPercentage();
      doReturn(0.0F).when(light0).getWidth();
      doReturn(false).when(light0).isBackFaceShown();
      doReturn(false).when(light0).isDeformable();
      doReturn(false).when(light0).isDoorOrWindow();
      doReturn(false).when(light0).isMovable();
      doReturn(false).when(light0).isResizable();
      doReturn(false).when(light0).isTexturable();
      HomeLight homeLight0 = new HomeLight(light0);
      homeLight0.setElevation((-1.0F));
      Float.floatToIntBits((byte) (-32));
      HomeLight homeLight1 = homeLight0.clone();
      homeLight1.isPointAt((byte)1, (-1.0F), (-1.0F));
      Float.floatToIntBits((-741.9441F));
      homeLight1.setY((byte)1);
      homeLight1.getValueAddedTax();
      HomeLight homeLight2 = homeLight1.clone();
      homeLight2.getLevel();
      HomeLight homeLight3 = homeLight1.clone();
      homeLight2.setName("");
      Integer.valueOf(1);
      int int0 = 1001;
      homeLight3.getElevation();
      System.setCurrentTimeMillis((byte)1);
      HomeLight homeLight4 = null;
      try {
        homeLight4 = new HomeLight(homeLight1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.eteks.sweethome3d.model.HomePieceOfFurniture", e);
      }
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      Integer integer0 = new Integer(1431655742);
      Light light0 = mock(Light.class, new ViolatedAssumptionAnswer());
      doReturn((LightSource[]) null).when(light0).getLightSources();
      doReturn((Integer) null).when(light0).getColor();
      doReturn((String) null).when(light0).getCurrency();
      doReturn(0.0F).when(light0).getDepth();
      doReturn((String) null).when(light0).getDescription();
      doReturn(0.0F).when(light0).getElevation();
      doReturn(0.0F).when(light0).getHeight();
      doReturn((Content) null).when(light0).getIcon();
      doReturn((Content) null).when(light0).getModel();
      doReturn((float[][]) null).when(light0).getModelRotation();
      doReturn((String) null).when(light0).getName();
      doReturn((Content) null).when(light0).getPlanIcon();
      doReturn((BigDecimal) null).when(light0).getPrice();
      doReturn((String) null).when(light0).getStaircaseCutOutShape();
      doReturn((BigDecimal) null).when(light0).getValueAddedTaxPercentage();
      doReturn(0.0F).when(light0).getWidth();
      doReturn(false).when(light0).isBackFaceShown();
      doReturn(false).when(light0).isDeformable();
      doReturn(false).when(light0).isDoorOrWindow();
      doReturn(false).when(light0).isMovable();
      doReturn(false).when(light0).isResizable();
      doReturn(false).when(light0).isTexturable();
      HomeLight homeLight0 = new HomeLight(light0);
      homeLight0.setY(1431655742);
      homeLight0.getValueAddedTax();
      homeLight0.isTopRightPointAt(1431655742, 1431655742, 3.4028235E38F);
      homeLight0.getName();
      homeLight0.getLevel();
      homeLight0.setX((-172.0F));
      homeLight0.getValueAddedTax();
      homeLight0.getLevel();
      homeLight0.setName("DOOR_OR_WINDOW");
      homeLight0.isNameVisible();
      HomeLight homeLight1 = homeLight0.clone();
      homeLight1.containsPoint(3676.623F, 3.4028235E38F, 0.5F);
      homeLight1.setNameYOffset((-3249.7466F));
      homeLight1.getModel();
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      LightSource[] lightSourceArray0 = new LightSource[2];
      LightSource lightSource0 = new LightSource((-1.0F), (-1457.99F), 381.9F, 1431655765);
      LightSource lightSource1 = new LightSource((-1.0F), (-69.47F), 700.4569F, (-853));
      lightSourceArray0[1] = lightSource1;
      Integer integer0 = new Integer((-853));
      Light light0 = mock(Light.class, new ViolatedAssumptionAnswer());
      doReturn((LightSource[]) null).when(light0).getLightSources();
      doReturn((Integer) null).when(light0).getColor();
      doReturn((String) null).when(light0).getCurrency();
      doReturn(0.0F).when(light0).getDepth();
      doReturn((String) null).when(light0).getDescription();
      doReturn(0.0F).when(light0).getElevation();
      doReturn(0.0F).when(light0).getHeight();
      doReturn((Content) null).when(light0).getIcon();
      doReturn((Content) null).when(light0).getModel();
      doReturn((float[][]) null).when(light0).getModelRotation();
      doReturn((String) null).when(light0).getName();
      doReturn((Content) null).when(light0).getPlanIcon();
      doReturn((BigDecimal) null).when(light0).getPrice();
      doReturn((String) null).when(light0).getStaircaseCutOutShape();
      doReturn((BigDecimal) null).when(light0).getValueAddedTaxPercentage();
      doReturn(0.0F).when(light0).getWidth();
      doReturn(false).when(light0).isBackFaceShown();
      doReturn(false).when(light0).isDeformable();
      doReturn(false).when(light0).isDoorOrWindow();
      doReturn(false).when(light0).isMovable();
      doReturn(false).when(light0).isResizable();
      doReturn(false).when(light0).isTexturable();
      byte[] byteArray0 = new byte[5];
      byteArray0[1] = (byte)1;
      byteArray0[3] = (byte) (-32);
      byteArray0[4] = (byte)62;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      HomeLight homeLight0 = new HomeLight(light0);
      float float0 = (-1.0F);
      // Undeclared exception!
      try { 
        homeLight0.setWidth((byte)1);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Piece isn't resizable
         //
         verifyException("com.eteks.sweethome3d.model.HomePieceOfFurniture", e);
      }
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      Light light0 = mock(Light.class, new ViolatedAssumptionAnswer());
      doReturn((LightSource[]) null).when(light0).getLightSources();
      doReturn((Integer) null).when(light0).getColor();
      doReturn((String) null).when(light0).getCurrency();
      doReturn(0.0F).when(light0).getDepth();
      doReturn((String) null).when(light0).getDescription();
      doReturn(0.0F).when(light0).getElevation();
      doReturn(0.0F).when(light0).getHeight();
      doReturn((Content) null).when(light0).getIcon();
      doReturn((Content) null).when(light0).getModel();
      doReturn((float[][]) null).when(light0).getModelRotation();
      doReturn((String) null).when(light0).getName();
      doReturn((Content) null).when(light0).getPlanIcon();
      doReturn((BigDecimal) null).when(light0).getPrice();
      doReturn((String) null).when(light0).getStaircaseCutOutShape();
      doReturn((BigDecimal) null).when(light0).getValueAddedTaxPercentage();
      doReturn(0.0F).when(light0).getWidth();
      doReturn(false).when(light0).isBackFaceShown();
      doReturn(false).when(light0).isDeformable();
      doReturn(false).when(light0).isDoorOrWindow();
      doReturn(false).when(light0).isMovable();
      doReturn(false).when(light0).isResizable();
      doReturn(false).when(light0).isTexturable();
      HomeLight homeLight0 = new HomeLight(light0);
      homeLight0.setY((-2369));
      homeLight0.isTopRightPointAt((-2369), (-2369), (-2369));
      homeLight0.getLevel();
      HomeLight homeLight1 = homeLight0.clone();
      homeLight1.setMovable(true);
      homeLight1.setNameYOffset(345.5258F);
      HomePieceOfFurniture.SortableProperty.values();
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      LightSource[] lightSourceArray0 = new LightSource[6];
      LightSource lightSource0 = new LightSource(381.9F, 3.4028235E38F, (-1464.2988F), (-454));
      lightSourceArray0[0] = lightSource0;
      Float float0 = new Float(593.7563F);
      float0.floatValue();
      float0.floatValue();
      float0.floatValue();
      LightSource lightSource1 = new LightSource(3.4028235E38F, 0.0F, 381.9F, (-1073741823), (Float) 593.7563F);
      lightSourceArray0[1] = lightSource1;
      LightSource lightSource2 = new LightSource(593.7563F, 0.0F, 607.54425F, 46);
      lightSourceArray0[2] = lightSource2;
      LightSource lightSource3 = new LightSource(0.0F, 2.0F, 1.0F, (-454));
      lightSourceArray0[3] = lightSource3;
      LightSource lightSource4 = new LightSource(0.0F, 979.7402F, (-494.0921F), 2141875176);
      lightSourceArray0[4] = lightSource4;
      LightSource lightSource5 = new LightSource(1.0F, (-494.0921F), 0.3926991F, (-1135), float0);
      lightSourceArray0[5] = lightSource5;
      Integer integer0 = new Integer((-1306));
      float[][] floatArray0 = new float[1][2];
      float[] floatArray1 = new float[0];
      floatArray0[0] = floatArray1;
      BigDecimal bigDecimal0 = BigDecimal.TEN;
      Light light0 = mock(Light.class, new ViolatedAssumptionAnswer());
      doReturn(lightSourceArray0).when(light0).getLightSources();
      doReturn(integer0).when(light0).getColor();
      doReturn("Gl:`moRZqI@@=e").when(light0).getCurrency();
      doReturn(2632.0835F).when(light0).getDepth();
      doReturn("+N/").when(light0).getDescription();
      doReturn((-446.0F)).when(light0).getElevation();
      doReturn(1118.1F).when(light0).getHeight();
      doReturn((Content) null).when(light0).getIcon();
      doReturn((Content) null).when(light0).getModel();
      doReturn(floatArray0).when(light0).getModelRotation();
      doReturn("HOAdvdEzDQ").when(light0).getName();
      doReturn((Content) null).when(light0).getPlanIcon();
      doReturn(bigDecimal0).when(light0).getPrice();
      doReturn("").when(light0).getStaircaseCutOutShape();
      doReturn(bigDecimal0).when(light0).getValueAddedTaxPercentage();
      doReturn((-1464.2988F)).when(light0).getWidth();
      doReturn(false).when(light0).isBackFaceShown();
      doReturn(false).when(light0).isDeformable();
      doReturn(true).when(light0).isDoorOrWindow();
      doReturn(false).when(light0).isMovable();
      doReturn(true).when(light0).isResizable();
      doReturn(false).when(light0).isTexturable();
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)20;
      byteArray0[1] = (byte)1;
      byteArray0[2] = (byte) (-113);
      byteArray0[3] = (byte) (-32);
      byteArray0[4] = (byte)62;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      HomeLight homeLight0 = new HomeLight(light0);
      homeLight0.setY((-1.0F));
      homeLight0.setVisible(false);
      HomeLight homeLight1 = homeLight0.clone();
      homeLight1.setNameStyle((TextStyle) null);
      homeLight1.getCurrency();
      HomeLight homeLight2 = null;
      try {
        homeLight2 = new HomeLight(homeLight1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("com.eteks.sweethome3d.model.HomePieceOfFurniture", e);
      }
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      HomeLight homeLight0 = null;
      try {
        homeLight0 = new HomeLight((Light) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.eteks.sweethome3d.model.HomePieceOfFurniture", e);
      }
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      String[] stringArray0 = new String[8];
      stringArray0[0] = "";
      Float float0 = new Float((-1729.3374F));
      URLContent uRLContent0 = new URLContent((URL) null);
      Sash[] sashArray0 = new Sash[7];
      Sash sash0 = new Sash((-1.0F), (-10.917348F), (-368.692F), (-368.692F), 3.649628F);
      sashArray0[5] = sash0;
      Sash sash1 = new Sash((-1485.2021F), (-368.692F), 1.1742079F, (-10.917348F), (-1729.3374F));
      sashArray0[6] = sash0;
      float[][] floatArray0 = new float[5][1];
      float[] floatArray1 = new float[3];
      floatArray0[0] = floatArray1;
      float[] floatArray2 = new float[3];
      floatArray2[2] = 1.1742079F;
      floatArray2[1] = (-1.0F);
      floatArray0[1] = floatArray2;
      floatArray0[2] = floatArray1;
      CatalogDoorOrWindow catalogDoorOrWindow0 = new CatalogDoorOrWindow("", "", "", "", stringArray0, (Long) null, float0, uRLContent0, uRLContent0, uRLContent0, (-368.692F), (-368.692F), (-368.692F), (-368.692F), true, (-368.692F), 3.649628F, sashArray0, floatArray0, "", true, true, true, (BigDecimal) null, (BigDecimal) null, "");
      HomeDoorOrWindow homeDoorOrWindow0 = new HomeDoorOrWindow(catalogDoorOrWindow0);
      homeDoorOrWindow0.getValueAddedTax();
      homeDoorOrWindow0.setShininess((Float) 0.0F);
      homeDoorOrWindow0.setHeight((-1.0F));
      homeDoorOrWindow0.getPriceValueAddedTaxIncluded();
      homeDoorOrWindow0.getModelRotation();
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      Light light0 = mock(Light.class, new ViolatedAssumptionAnswer());
      doReturn((LightSource[]) null).when(light0).getLightSources();
      doReturn((Integer) null).when(light0).getColor();
      doReturn((String) null).when(light0).getCurrency();
      doReturn(0.0F).when(light0).getDepth();
      doReturn((String) null).when(light0).getDescription();
      doReturn(0.0F).when(light0).getElevation();
      doReturn(0.0F).when(light0).getHeight();
      doReturn((Content) null).when(light0).getIcon();
      doReturn((Content) null).when(light0).getModel();
      doReturn((float[][]) null).when(light0).getModelRotation();
      doReturn((String) null).when(light0).getName();
      doReturn((Content) null).when(light0).getPlanIcon();
      doReturn((BigDecimal) null).when(light0).getPrice();
      doReturn((String) null).when(light0).getStaircaseCutOutShape();
      doReturn((BigDecimal) null).when(light0).getValueAddedTaxPercentage();
      doReturn(0.0F).when(light0).getWidth();
      doReturn(false).when(light0).isBackFaceShown();
      doReturn(false).when(light0).isDeformable();
      doReturn(false).when(light0).isDoorOrWindow();
      doReturn(false).when(light0).isMovable();
      doReturn(false).when(light0).isResizable();
      doReturn(false).when(light0).isTexturable();
      HomeLight homeLight0 = new HomeLight(light0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      homeLight0.getDescription();
      homeLight0.isNameCenterPointAt((-1469), 3205.479F, (-1469));
      Level level0 = new Level("@bzc!P-", 3205.479F, (-1.0F), (-1265.729F));
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      Light light0 = mock(Light.class, new ViolatedAssumptionAnswer());
      doReturn((LightSource[]) null).when(light0).getLightSources();
      doReturn((Integer) null).when(light0).getColor();
      doReturn((String) null).when(light0).getCurrency();
      doReturn(0.0F).when(light0).getDepth();
      doReturn((String) null).when(light0).getDescription();
      doReturn(0.0F).when(light0).getElevation();
      doReturn(0.0F).when(light0).getHeight();
      doReturn((Content) null).when(light0).getIcon();
      doReturn((Content) null).when(light0).getModel();
      doReturn((float[][]) null).when(light0).getModelRotation();
      doReturn((String) null).when(light0).getName();
      doReturn((Content) null).when(light0).getPlanIcon();
      doReturn((BigDecimal) null).when(light0).getPrice();
      doReturn((String) null).when(light0).getStaircaseCutOutShape();
      doReturn((BigDecimal) null).when(light0).getValueAddedTaxPercentage();
      doReturn(0.0F).when(light0).getWidth();
      doReturn(false).when(light0).isBackFaceShown();
      doReturn(false).when(light0).isDeformable();
      doReturn(false).when(light0).isDoorOrWindow();
      doReturn(false).when(light0).isMovable();
      doReturn(false).when(light0).isResizable();
      doReturn(false).when(light0).isTexturable();
      HomeLight homeLight0 = new HomeLight(light0);
      homeLight0.getValueAddedTax();
      homeLight0.setVisible(false);
      homeLight0.getCurrency();
      float float0 = 0.0F;
      // Undeclared exception!
      try { 
        homeLight0.setHeight(0.0F);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Piece isn't resizable
         //
         verifyException("com.eteks.sweethome3d.model.HomePieceOfFurniture", e);
      }
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      Light light0 = mock(Light.class, new ViolatedAssumptionAnswer());
      doReturn((LightSource[]) null).when(light0).getLightSources();
      doReturn((Integer) null).when(light0).getColor();
      doReturn((String) null).when(light0).getCurrency();
      doReturn(0.0F).when(light0).getDepth();
      doReturn((String) null).when(light0).getDescription();
      doReturn(0.0F).when(light0).getElevation();
      doReturn(0.0F).when(light0).getHeight();
      doReturn((Content) null).when(light0).getIcon();
      doReturn((Content) null).when(light0).getModel();
      doReturn((float[][]) null).when(light0).getModelRotation();
      doReturn((String) null).when(light0).getName();
      doReturn((Content) null).when(light0).getPlanIcon();
      doReturn((BigDecimal) null).when(light0).getPrice();
      doReturn((String) null).when(light0).getStaircaseCutOutShape();
      doReturn((BigDecimal) null).when(light0).getValueAddedTaxPercentage();
      doReturn(0.0F).when(light0).getWidth();
      doReturn(false).when(light0).isBackFaceShown();
      doReturn(false).when(light0).isDeformable();
      doReturn(false).when(light0).isDoorOrWindow();
      doReturn(false).when(light0).isMovable();
      doReturn(false).when(light0).isResizable();
      doReturn(false).when(light0).isTexturable();
      HomeLight homeLight0 = new HomeLight(light0);
      homeLight0.getDescription();
      float float0 = (-119.7F);
      // Undeclared exception!
      try { 
        homeLight0.setDepth(2123.474F);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Piece isn't resizable
         //
         verifyException("com.eteks.sweethome3d.model.HomePieceOfFurniture", e);
      }
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      Light light0 = mock(Light.class, new ViolatedAssumptionAnswer());
      doReturn((LightSource[]) null).when(light0).getLightSources();
      doReturn((Integer) null).when(light0).getColor();
      doReturn((String) null).when(light0).getCurrency();
      doReturn(0.0F).when(light0).getDepth();
      doReturn((String) null).when(light0).getDescription();
      doReturn(0.0F).when(light0).getElevation();
      doReturn(0.0F).when(light0).getHeight();
      doReturn((Content) null).when(light0).getIcon();
      doReturn((Content) null).when(light0).getModel();
      doReturn((float[][]) null).when(light0).getModelRotation();
      doReturn((String) null).when(light0).getName();
      doReturn((Content) null).when(light0).getPlanIcon();
      doReturn((BigDecimal) null).when(light0).getPrice();
      doReturn((String) null).when(light0).getStaircaseCutOutShape();
      doReturn((BigDecimal) null).when(light0).getValueAddedTaxPercentage();
      doReturn(0.0F).when(light0).getWidth();
      doReturn(false).when(light0).isBackFaceShown();
      doReturn(false).when(light0).isDeformable();
      doReturn(false).when(light0).isDoorOrWindow();
      doReturn(false).when(light0).isMovable();
      doReturn(false).when(light0).isResizable();
      doReturn(false).when(light0).isTexturable();
      HomeLight homeLight0 = new HomeLight(light0);
      homeLight0.setY((-1098.0F));
      homeLight0.setVisible(false);
      homeLight0.getWidth();
      homeLight0.setNameVisible(false);
      // Undeclared exception!
      try { 
        homeLight0.setHeight((-1.0F));
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Piece isn't resizable
         //
         verifyException("com.eteks.sweethome3d.model.HomePieceOfFurniture", e);
      }
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      Light light0 = mock(Light.class, new ViolatedAssumptionAnswer());
      doReturn((LightSource[]) null).when(light0).getLightSources();
      doReturn((Integer) null).when(light0).getColor();
      doReturn((String) null).when(light0).getCurrency();
      doReturn(0.0F).when(light0).getDepth();
      doReturn((String) null).when(light0).getDescription();
      doReturn(0.0F).when(light0).getElevation();
      doReturn(0.0F).when(light0).getHeight();
      doReturn((Content) null).when(light0).getIcon();
      doReturn((Content) null).when(light0).getModel();
      doReturn((float[][]) null).when(light0).getModelRotation();
      doReturn((String) null).when(light0).getName();
      doReturn((Content) null).when(light0).getPlanIcon();
      doReturn((BigDecimal) null).when(light0).getPrice();
      doReturn((String) null).when(light0).getStaircaseCutOutShape();
      doReturn((BigDecimal) null).when(light0).getValueAddedTaxPercentage();
      doReturn(0.0F).when(light0).getWidth();
      doReturn(false).when(light0).isBackFaceShown();
      doReturn(false).when(light0).isDeformable();
      doReturn(false).when(light0).isDoorOrWindow();
      doReturn(false).when(light0).isMovable();
      doReturn(false).when(light0).isResizable();
      doReturn(false).when(light0).isTexturable();
      HomeLight homeLight0 = new HomeLight(light0);
      homeLight0.isBackFaceShown();
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      LightSource lightSource0 = new LightSource((-1.0F), (-1457.99F), 381.9F, 1431655765);
      LightSource lightSource1 = new LightSource((-1.0F), (-69.47F), 700.4569F, (-853));
      Integer integer0 = new Integer((-853));
      Light light0 = mock(Light.class, new ViolatedAssumptionAnswer());
      doReturn((LightSource[]) null).when(light0).getLightSources();
      doReturn((Integer) null).when(light0).getColor();
      doReturn((String) null).when(light0).getCurrency();
      doReturn(0.0F).when(light0).getDepth();
      doReturn((String) null).when(light0).getDescription();
      doReturn(0.0F).when(light0).getElevation();
      doReturn(0.0F).when(light0).getHeight();
      doReturn((Content) null).when(light0).getIcon();
      doReturn((Content) null).when(light0).getModel();
      doReturn((float[][]) null).when(light0).getModelRotation();
      doReturn((String) null).when(light0).getName();
      doReturn((Content) null).when(light0).getPlanIcon();
      doReturn((BigDecimal) null).when(light0).getPrice();
      doReturn((String) null).when(light0).getStaircaseCutOutShape();
      doReturn((BigDecimal) null).when(light0).getValueAddedTaxPercentage();
      doReturn(0.0F).when(light0).getWidth();
      doReturn(false).when(light0).isBackFaceShown();
      doReturn(false).when(light0).isDeformable();
      doReturn(false).when(light0).isDoorOrWindow();
      doReturn(false).when(light0).isMovable();
      doReturn(false).when(light0).isResizable();
      doReturn(false).when(light0).isTexturable();
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)13;
      byteArray0[1] = (byte)1;
      byteArray0[2] = (byte) (-113);
      byteArray0[3] = (byte) (-32);
      byteArray0[4] = (byte)62;
      HomeLight homeLight0 = new HomeLight(light0);
      homeLight0.setY((-1.0F));
      homeLight0.getValueAddedTax();
      homeLight0.getValueAddedTax();
      homeLight0.getName();
      homeLight0.getLevel();
      HomeLight homeLight1 = homeLight0.clone();
      homeLight1.setName((String) null);
      Integer.valueOf(21);
      Integer.valueOf(0);
      TextStyle textStyle0 = new TextStyle((byte) (-32), false, false);
      homeLight1.setNameStyle(textStyle0);
      homeLight1.getCurrency();
      HomeLight homeLight2 = null;
      try {
        homeLight2 = new HomeLight(homeLight1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.eteks.sweethome3d.model.HomePieceOfFurniture", e);
      }
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      LightSource[] lightSourceArray0 = new LightSource[2];
      LightSource lightSource0 = new LightSource((-1.0F), (-1.0F), 381.9F, 1431655765);
      LightSource lightSource1 = new LightSource((-1.0F), 381.9F, 700.4569F, 1431655765);
      lightSourceArray0[1] = lightSource1;
      Light light0 = mock(Light.class, new ViolatedAssumptionAnswer());
      doReturn((LightSource[]) null).when(light0).getLightSources();
      doReturn((Integer) null).when(light0).getColor();
      doReturn((String) null).when(light0).getCurrency();
      doReturn(0.0F).when(light0).getDepth();
      doReturn((String) null).when(light0).getDescription();
      doReturn(0.0F).when(light0).getElevation();
      doReturn(0.0F).when(light0).getHeight();
      doReturn((Content) null).when(light0).getIcon();
      doReturn((Content) null).when(light0).getModel();
      doReturn((float[][]) null).when(light0).getModelRotation();
      doReturn((String) null).when(light0).getName();
      doReturn((Content) null).when(light0).getPlanIcon();
      doReturn((BigDecimal) null).when(light0).getPrice();
      doReturn((String) null).when(light0).getStaircaseCutOutShape();
      doReturn((BigDecimal) null).when(light0).getValueAddedTaxPercentage();
      doReturn(0.0F).when(light0).getWidth();
      doReturn(false).when(light0).isBackFaceShown();
      doReturn(false).when(light0).isDeformable();
      doReturn(false).when(light0).isDoorOrWindow();
      doReturn(false).when(light0).isMovable();
      doReturn(false).when(light0).isResizable();
      doReturn(false).when(light0).isTexturable();
      HomeLight homeLight0 = new HomeLight(light0);
      HomeLight homeLight1 = homeLight0.clone();
      homeLight1.getName();
      homeLight0.getLevel();
      HomeLight homeLight2 = homeLight0.clone();
      homeLight1.setAngle(39.0F);
      homeLight2.setDescription("InUalid URL base for JAR entry");
      homeLight2.intersectsRectangle(700.4569F, (-1.0F), 39.0F, (-1.0F));
      BigDecimal bigDecimal0 = BigDecimal.TEN;
      homeLight0.clone();
      homeLight2.setDescription("InUalid URL base for JAR entry");
      homeLight1.isAtLevel((Level) null);
      homeLight1.getAngle();
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      Integer integer0 = new Integer(1431655765);
      LightSource[] lightSourceArray0 = new LightSource[4];
      LightSource lightSource0 = new LightSource(1431655765, 1431655765, (-1695.24F), 1358);
      lightSourceArray0[0] = lightSource0;
      lightSourceArray0[1] = lightSource0;
      LightSource lightSource1 = new LightSource(1431655765, (-3203), (-1695.24F), (-3203));
      lightSourceArray0[2] = lightSource1;
      LightSource lightSource2 = new LightSource(1358, 1.0F, (-894.0F), (-2335));
      lightSourceArray0[3] = lightSource2;
      Integer.valueOf(21);
      Integer.valueOf(0);
      Integer.valueOf(0);
      Light light0 = mock(Light.class, new ViolatedAssumptionAnswer());
      doReturn((LightSource[]) null).when(light0).getLightSources();
      doReturn((Integer) null).when(light0).getColor();
      doReturn((String) null).when(light0).getCurrency();
      doReturn(0.0F).when(light0).getDepth();
      doReturn((String) null).when(light0).getDescription();
      doReturn(0.0F).when(light0).getElevation();
      doReturn(0.0F).when(light0).getHeight();
      doReturn((Content) null).when(light0).getIcon();
      doReturn((Content) null).when(light0).getModel();
      doReturn((float[][]) null).when(light0).getModelRotation();
      doReturn((String) null).when(light0).getName();
      doReturn((Content) null).when(light0).getPlanIcon();
      doReturn((BigDecimal) null).when(light0).getPrice();
      doReturn((String) null).when(light0).getStaircaseCutOutShape();
      doReturn((BigDecimal) null).when(light0).getValueAddedTaxPercentage();
      doReturn(0.0F).when(light0).getWidth();
      doReturn(false).when(light0).isBackFaceShown();
      doReturn(false).when(light0).isDeformable();
      doReturn(false).when(light0).isDoorOrWindow();
      doReturn(false).when(light0).isMovable();
      doReturn(false).when(light0).isResizable();
      doReturn(false).when(light0).isTexturable();
      Sash sash0 = new Sash((byte)1, 0.0F, 0.0F, 1431655765, (-414.0F));
      BigInteger bigInteger0 = BigInteger.ZERO;
      BigDecimal bigDecimal0 = new BigDecimal(bigInteger0);
      HomeLight homeLight0 = new HomeLight(light0);
      homeLight0.setY((-1265.729F));
      homeLight0.getValueAddedTax();
      HomeLight homeLight1 = homeLight0.clone();
      homeLight0.getLevel();
      HomeLight homeLight2 = homeLight0.clone();
      homeLight0.setAngle(414.72678F);
      homeLight1.getLevel();
      HomeLight homeLight3 = homeLight2.clone();
      homeLight1.setAngle(0.0F);
      homeLight3.setName("com.eteks.sweethome3d.model.HomePieceOfFurniture$Property");
      Integer integer1 = new Integer(1431655765);
      System.setCurrentTimeMillis(1431655765);
      homeLight2.getX();
      // Undeclared exception!
      try { 
        homeLight2.setHeight(0.0F);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Piece isn't resizable
         //
         verifyException("com.eteks.sweethome3d.model.HomePieceOfFurniture", e);
      }
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      Light light0 = mock(Light.class, new ViolatedAssumptionAnswer());
      doReturn((LightSource[]) null).when(light0).getLightSources();
      doReturn((Integer) null).when(light0).getColor();
      doReturn((String) null).when(light0).getCurrency();
      doReturn(0.0F).when(light0).getDepth();
      doReturn((String) null).when(light0).getDescription();
      doReturn(0.0F).when(light0).getElevation();
      doReturn(0.0F).when(light0).getHeight();
      doReturn((Content) null).when(light0).getIcon();
      doReturn((Content) null).when(light0).getModel();
      doReturn((float[][]) null).when(light0).getModelRotation();
      doReturn((String) null).when(light0).getName();
      doReturn((Content) null).when(light0).getPlanIcon();
      doReturn((BigDecimal) null).when(light0).getPrice();
      doReturn((String) null).when(light0).getStaircaseCutOutShape();
      doReturn((BigDecimal) null).when(light0).getValueAddedTaxPercentage();
      doReturn(0.0F).when(light0).getWidth();
      doReturn(false).when(light0).isBackFaceShown();
      doReturn(false).when(light0).isDeformable();
      doReturn(false).when(light0).isDoorOrWindow();
      doReturn(false).when(light0).isMovable();
      doReturn(false).when(light0).isResizable();
      doReturn(false).when(light0).isTexturable();
      HomeLight homeLight0 = new HomeLight(light0);
      homeLight0.setY((-1098.0F));
      HomeLight homeLight1 = null;
      try {
        homeLight1 = new HomeLight(homeLight0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.eteks.sweethome3d.model.HomePieceOfFurniture", e);
      }
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      LightSource[] lightSourceArray0 = new LightSource[8];
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      URL uRL0 = MockURL.URL("s<7]@ykxs+ 0`a ", (String) null, (-1666), "", uRLStreamHandler0);
      TemporaryURLContent temporaryURLContent0 = new TemporaryURLContent(uRL0);
      BigDecimal bigDecimal0 = BigDecimal.TEN;
      CatalogLight catalogLight0 = new CatalogLight("", "s<7]@ykxs+ 0`a ", "1.5.0_16", temporaryURLContent0, temporaryURLContent0, temporaryURLContent0, 3129.0F, 443.8429F, 4.324148F, 689.0627F, true, lightSourceArray0, "", (float[][]) null, "s<7]@ykxs+ 0`a ", true, true, true, bigDecimal0, bigDecimal0, "Can't create temporary folder ");
      HomeLight homeLight0 = new HomeLight(catalogLight0);
      HomeLight homeLight1 = homeLight0.clone();
      HomeLight homeLight2 = homeLight1.clone();
      homeLight2.setX(3129.0F);
      homeLight1.isBackFaceShown();
      homeLight2.setMovable(true);
      homeLight2.getIcon();
      homeLight1.setDepth(3.4028235E38F);
      homeLight0.getValueAddedTax();
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      Light light0 = mock(Light.class, new ViolatedAssumptionAnswer());
      doReturn((LightSource[]) null).when(light0).getLightSources();
      doReturn((Integer) null).when(light0).getColor();
      doReturn((String) null).when(light0).getCurrency();
      doReturn(0.0F).when(light0).getDepth();
      doReturn((String) null).when(light0).getDescription();
      doReturn(0.0F).when(light0).getElevation();
      doReturn(0.0F).when(light0).getHeight();
      doReturn((Content) null).when(light0).getIcon();
      doReturn((Content) null).when(light0).getModel();
      doReturn((float[][]) null).when(light0).getModelRotation();
      doReturn((String) null).when(light0).getName();
      doReturn((Content) null).when(light0).getPlanIcon();
      doReturn((BigDecimal) null).when(light0).getPrice();
      doReturn((String) null).when(light0).getStaircaseCutOutShape();
      doReturn((BigDecimal) null).when(light0).getValueAddedTaxPercentage();
      doReturn(0.0F).when(light0).getWidth();
      doReturn(false).when(light0).isBackFaceShown();
      doReturn(false).when(light0).isDeformable();
      doReturn(false).when(light0).isDoorOrWindow();
      doReturn(false).when(light0).isMovable();
      doReturn(false).when(light0).isResizable();
      doReturn(false).when(light0).isTexturable();
      HomeLight homeLight0 = new HomeLight(light0);
      homeLight0.getDescription();
      float float0 = (-119.7F);
      FileSystemHandling.shouldAllThrowIOExceptions();
      homeLight0.setLevel((Level) null);
      // Undeclared exception!
      try { 
        homeLight0.setDepth(2123.474F);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Piece isn't resizable
         //
         verifyException("com.eteks.sweethome3d.model.HomePieceOfFurniture", e);
      }
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      Integer integer0 = new Integer((-1469));
      assertNotNull(integer0);
      assertEquals((-1469), (int)integer0);
      
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      Light light0 = mock(Light.class, new ViolatedAssumptionAnswer());
      doReturn((Integer) null).when(light0).getColor();
      doReturn((String) null).when(light0).getCurrency();
      doReturn(0.0F).when(light0).getDepth();
      doReturn((String) null).when(light0).getDescription();
      doReturn(0.0F).when(light0).getElevation();
      doReturn(0.0F).when(light0).getHeight();
      doReturn((Content) null).when(light0).getIcon();
      doReturn((Content) null).when(light0).getModel();
      doReturn((float[][]) null).when(light0).getModelRotation();
      doReturn((String) null).when(light0).getName();
      doReturn((Content) null).when(light0).getPlanIcon();
      doReturn((BigDecimal) null).when(light0).getPrice();
      doReturn((String) null).when(light0).getStaircaseCutOutShape();
      doReturn((BigDecimal) null).when(light0).getValueAddedTaxPercentage();
      doReturn(0.0F).when(light0).getWidth();
      doReturn(false).when(light0).isBackFaceShown();
      doReturn(false).when(light0).isDeformable();
      doReturn(false).when(light0).isDoorOrWindow();
      doReturn(false).when(light0).isMovable();
      doReturn(false).when(light0).isResizable();
      doReturn(false).when(light0).isTexturable();
      HomePieceOfFurniture homePieceOfFurniture0 = new HomePieceOfFurniture(light0);
      assertNotNull(homePieceOfFurniture0);
      assertNull(homePieceOfFurniture0.getCurrency());
      assertFalse(homePieceOfFurniture0.isDeformable());
      assertTrue(homePieceOfFurniture0.isVisible());
      assertEquals(0.0F, homePieceOfFurniture0.getWidth(), 0.01F);
      assertNull(homePieceOfFurniture0.getColor());
      assertEquals(0.0F, homePieceOfFurniture0.getNameYOffset(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture0.getX(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture0.getY(), 0.01F);
      assertFalse(homePieceOfFurniture0.isResizable());
      assertFalse(homePieceOfFurniture0.isMovable());
      assertNull(homePieceOfFurniture0.getShininess());
      assertEquals(0.0F, homePieceOfFurniture0.getHeight(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture0.getNameAngle(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture0.getElevation(), 0.01F);
      assertNull(homePieceOfFurniture0.getDescription());
      assertNull(homePieceOfFurniture0.getStaircaseCutOutShape());
      assertEquals(0.0F, homePieceOfFurniture0.getDepth(), 0.01F);
      assertFalse(homePieceOfFurniture0.isTexturable());
      assertEquals(0.0F, homePieceOfFurniture0.getGroundElevation(), 0.01F);
      assertNull(homePieceOfFurniture0.getCatalogId());
      assertEquals(0.0F, homePieceOfFurniture0.getNameXOffset(), 0.01F);
      assertFalse(homePieceOfFurniture0.isDoorOrWindow());
      assertEquals(0.0F, homePieceOfFurniture0.getAngle(), 0.01F);
      assertFalse(homePieceOfFurniture0.isModelMirrored());
      assertFalse(homePieceOfFurniture0.isBackFaceShown());
      assertFalse(homePieceOfFurniture0.isNameVisible());
      assertNull(homePieceOfFurniture0.getName());
      
      HomePieceOfFurniture homePieceOfFurniture1 = homePieceOfFurniture0.clone();
      assertNotNull(homePieceOfFurniture1);
      assertNotSame(homePieceOfFurniture0, homePieceOfFurniture1);
      assertNotSame(homePieceOfFurniture1, homePieceOfFurniture0);
      assertFalse(homePieceOfFurniture1.equals((Object)homePieceOfFurniture0));
      assertNull(homePieceOfFurniture0.getCurrency());
      assertFalse(homePieceOfFurniture0.isDeformable());
      assertTrue(homePieceOfFurniture0.isVisible());
      assertEquals(0.0F, homePieceOfFurniture0.getWidth(), 0.01F);
      assertNull(homePieceOfFurniture0.getColor());
      assertEquals(0.0F, homePieceOfFurniture0.getNameYOffset(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture0.getX(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture0.getY(), 0.01F);
      assertFalse(homePieceOfFurniture0.isResizable());
      assertFalse(homePieceOfFurniture0.isMovable());
      assertNull(homePieceOfFurniture0.getShininess());
      assertEquals(0.0F, homePieceOfFurniture0.getHeight(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture0.getNameAngle(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture0.getElevation(), 0.01F);
      assertNull(homePieceOfFurniture0.getDescription());
      assertNull(homePieceOfFurniture0.getStaircaseCutOutShape());
      assertEquals(0.0F, homePieceOfFurniture0.getDepth(), 0.01F);
      assertFalse(homePieceOfFurniture0.isTexturable());
      assertEquals(0.0F, homePieceOfFurniture0.getGroundElevation(), 0.01F);
      assertNull(homePieceOfFurniture0.getCatalogId());
      assertEquals(0.0F, homePieceOfFurniture0.getNameXOffset(), 0.01F);
      assertFalse(homePieceOfFurniture0.isDoorOrWindow());
      assertEquals(0.0F, homePieceOfFurniture0.getAngle(), 0.01F);
      assertFalse(homePieceOfFurniture0.isModelMirrored());
      assertFalse(homePieceOfFurniture0.isBackFaceShown());
      assertFalse(homePieceOfFurniture0.isNameVisible());
      assertNull(homePieceOfFurniture0.getName());
      assertFalse(homePieceOfFurniture1.isTexturable());
      assertEquals(0.0F, homePieceOfFurniture1.getAngle(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture1.getElevation(), 0.01F);
      assertFalse(homePieceOfFurniture1.isDoorOrWindow());
      assertNull(homePieceOfFurniture1.getDescription());
      assertNull(homePieceOfFurniture1.getName());
      assertEquals(0.0F, homePieceOfFurniture1.getNameAngle(), 0.01F);
      assertNull(homePieceOfFurniture1.getStaircaseCutOutShape());
      assertEquals(0.0F, homePieceOfFurniture1.getDepth(), 0.01F);
      assertFalse(homePieceOfFurniture1.isDeformable());
      assertEquals(0.0F, homePieceOfFurniture1.getY(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture1.getX(), 0.01F);
      assertNull(homePieceOfFurniture1.getShininess());
      assertEquals(0.0F, homePieceOfFurniture1.getNameXOffset(), 0.01F);
      assertTrue(homePieceOfFurniture1.isVisible());
      assertEquals(0.0F, homePieceOfFurniture1.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture1.getHeight(), 0.01F);
      assertFalse(homePieceOfFurniture1.isResizable());
      assertNull(homePieceOfFurniture1.getCurrency());
      assertEquals(0.0F, homePieceOfFurniture1.getWidth(), 0.01F);
      assertFalse(homePieceOfFurniture1.isNameVisible());
      assertFalse(homePieceOfFurniture1.isMovable());
      assertNull(homePieceOfFurniture1.getCatalogId());
      assertFalse(homePieceOfFurniture1.isBackFaceShown());
      assertFalse(homePieceOfFurniture1.isModelMirrored());
      assertEquals(0.0F, homePieceOfFurniture1.getNameYOffset(), 0.01F);
      assertNull(homePieceOfFurniture1.getColor());
      
      homePieceOfFurniture1.setVisible(true);
      assertNotSame(homePieceOfFurniture0, homePieceOfFurniture1);
      assertNotSame(homePieceOfFurniture1, homePieceOfFurniture0);
      assertFalse(homePieceOfFurniture0.equals((Object)homePieceOfFurniture1));
      assertFalse(homePieceOfFurniture1.equals((Object)homePieceOfFurniture0));
      assertNull(homePieceOfFurniture0.getCurrency());
      assertFalse(homePieceOfFurniture0.isDeformable());
      assertTrue(homePieceOfFurniture0.isVisible());
      assertEquals(0.0F, homePieceOfFurniture0.getWidth(), 0.01F);
      assertNull(homePieceOfFurniture0.getColor());
      assertEquals(0.0F, homePieceOfFurniture0.getNameYOffset(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture0.getX(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture0.getY(), 0.01F);
      assertFalse(homePieceOfFurniture0.isResizable());
      assertFalse(homePieceOfFurniture0.isMovable());
      assertNull(homePieceOfFurniture0.getShininess());
      assertEquals(0.0F, homePieceOfFurniture0.getHeight(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture0.getNameAngle(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture0.getElevation(), 0.01F);
      assertNull(homePieceOfFurniture0.getDescription());
      assertNull(homePieceOfFurniture0.getStaircaseCutOutShape());
      assertEquals(0.0F, homePieceOfFurniture0.getDepth(), 0.01F);
      assertFalse(homePieceOfFurniture0.isTexturable());
      assertEquals(0.0F, homePieceOfFurniture0.getGroundElevation(), 0.01F);
      assertNull(homePieceOfFurniture0.getCatalogId());
      assertEquals(0.0F, homePieceOfFurniture0.getNameXOffset(), 0.01F);
      assertFalse(homePieceOfFurniture0.isDoorOrWindow());
      assertEquals(0.0F, homePieceOfFurniture0.getAngle(), 0.01F);
      assertFalse(homePieceOfFurniture0.isModelMirrored());
      assertFalse(homePieceOfFurniture0.isBackFaceShown());
      assertFalse(homePieceOfFurniture0.isNameVisible());
      assertNull(homePieceOfFurniture0.getName());
      assertFalse(homePieceOfFurniture1.isTexturable());
      assertEquals(0.0F, homePieceOfFurniture1.getAngle(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture1.getElevation(), 0.01F);
      assertFalse(homePieceOfFurniture1.isDoorOrWindow());
      assertNull(homePieceOfFurniture1.getDescription());
      assertNull(homePieceOfFurniture1.getName());
      assertEquals(0.0F, homePieceOfFurniture1.getNameAngle(), 0.01F);
      assertNull(homePieceOfFurniture1.getStaircaseCutOutShape());
      assertEquals(0.0F, homePieceOfFurniture1.getDepth(), 0.01F);
      assertFalse(homePieceOfFurniture1.isDeformable());
      assertEquals(0.0F, homePieceOfFurniture1.getY(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture1.getX(), 0.01F);
      assertNull(homePieceOfFurniture1.getShininess());
      assertEquals(0.0F, homePieceOfFurniture1.getNameXOffset(), 0.01F);
      assertTrue(homePieceOfFurniture1.isVisible());
      assertEquals(0.0F, homePieceOfFurniture1.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture1.getHeight(), 0.01F);
      assertFalse(homePieceOfFurniture1.isResizable());
      assertNull(homePieceOfFurniture1.getCurrency());
      assertEquals(0.0F, homePieceOfFurniture1.getWidth(), 0.01F);
      assertFalse(homePieceOfFurniture1.isNameVisible());
      assertFalse(homePieceOfFurniture1.isMovable());
      assertNull(homePieceOfFurniture1.getCatalogId());
      assertFalse(homePieceOfFurniture1.isBackFaceShown());
      assertFalse(homePieceOfFurniture1.isModelMirrored());
      assertEquals(0.0F, homePieceOfFurniture1.getNameYOffset(), 0.01F);
      assertNull(homePieceOfFurniture1.getColor());
      
      float float0 = homePieceOfFurniture1.getWidth();
      assertNotSame(homePieceOfFurniture0, homePieceOfFurniture1);
      assertNotSame(homePieceOfFurniture1, homePieceOfFurniture0);
      assertFalse(homePieceOfFurniture0.equals((Object)homePieceOfFurniture1));
      assertFalse(homePieceOfFurniture1.equals((Object)homePieceOfFurniture0));
      assertEquals(0.0F, float0, 0.01F);
      assertNull(homePieceOfFurniture0.getCurrency());
      assertFalse(homePieceOfFurniture0.isDeformable());
      assertTrue(homePieceOfFurniture0.isVisible());
      assertEquals(0.0F, homePieceOfFurniture0.getWidth(), 0.01F);
      assertNull(homePieceOfFurniture0.getColor());
      assertEquals(0.0F, homePieceOfFurniture0.getNameYOffset(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture0.getX(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture0.getY(), 0.01F);
      assertFalse(homePieceOfFurniture0.isResizable());
      assertFalse(homePieceOfFurniture0.isMovable());
      assertNull(homePieceOfFurniture0.getShininess());
      assertEquals(0.0F, homePieceOfFurniture0.getHeight(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture0.getNameAngle(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture0.getElevation(), 0.01F);
      assertNull(homePieceOfFurniture0.getDescription());
      assertNull(homePieceOfFurniture0.getStaircaseCutOutShape());
      assertEquals(0.0F, homePieceOfFurniture0.getDepth(), 0.01F);
      assertFalse(homePieceOfFurniture0.isTexturable());
      assertEquals(0.0F, homePieceOfFurniture0.getGroundElevation(), 0.01F);
      assertNull(homePieceOfFurniture0.getCatalogId());
      assertEquals(0.0F, homePieceOfFurniture0.getNameXOffset(), 0.01F);
      assertFalse(homePieceOfFurniture0.isDoorOrWindow());
      assertEquals(0.0F, homePieceOfFurniture0.getAngle(), 0.01F);
      assertFalse(homePieceOfFurniture0.isModelMirrored());
      assertFalse(homePieceOfFurniture0.isBackFaceShown());
      assertFalse(homePieceOfFurniture0.isNameVisible());
      assertNull(homePieceOfFurniture0.getName());
      assertFalse(homePieceOfFurniture1.isTexturable());
      assertEquals(0.0F, homePieceOfFurniture1.getAngle(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture1.getElevation(), 0.01F);
      assertFalse(homePieceOfFurniture1.isDoorOrWindow());
      assertNull(homePieceOfFurniture1.getDescription());
      assertNull(homePieceOfFurniture1.getName());
      assertEquals(0.0F, homePieceOfFurniture1.getNameAngle(), 0.01F);
      assertNull(homePieceOfFurniture1.getStaircaseCutOutShape());
      assertEquals(0.0F, homePieceOfFurniture1.getDepth(), 0.01F);
      assertFalse(homePieceOfFurniture1.isDeformable());
      assertEquals(0.0F, homePieceOfFurniture1.getY(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture1.getX(), 0.01F);
      assertNull(homePieceOfFurniture1.getShininess());
      assertEquals(0.0F, homePieceOfFurniture1.getNameXOffset(), 0.01F);
      assertTrue(homePieceOfFurniture1.isVisible());
      assertEquals(0.0F, homePieceOfFurniture1.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture1.getHeight(), 0.01F);
      assertFalse(homePieceOfFurniture1.isResizable());
      assertNull(homePieceOfFurniture1.getCurrency());
      assertEquals(0.0F, homePieceOfFurniture1.getWidth(), 0.01F);
      assertFalse(homePieceOfFurniture1.isNameVisible());
      assertFalse(homePieceOfFurniture1.isMovable());
      assertNull(homePieceOfFurniture1.getCatalogId());
      assertFalse(homePieceOfFurniture1.isBackFaceShown());
      assertFalse(homePieceOfFurniture1.isModelMirrored());
      assertEquals(0.0F, homePieceOfFurniture1.getNameYOffset(), 0.01F);
      assertNull(homePieceOfFurniture1.getColor());
      
      homePieceOfFurniture1.setNameVisible(true);
      assertNotSame(homePieceOfFurniture0, homePieceOfFurniture1);
      assertNotSame(homePieceOfFurniture1, homePieceOfFurniture0);
      assertFalse(homePieceOfFurniture0.equals((Object)homePieceOfFurniture1));
      assertFalse(homePieceOfFurniture1.equals((Object)homePieceOfFurniture0));
      assertNull(homePieceOfFurniture0.getCurrency());
      assertFalse(homePieceOfFurniture0.isDeformable());
      assertTrue(homePieceOfFurniture0.isVisible());
      assertEquals(0.0F, homePieceOfFurniture0.getWidth(), 0.01F);
      assertNull(homePieceOfFurniture0.getColor());
      assertEquals(0.0F, homePieceOfFurniture0.getNameYOffset(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture0.getX(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture0.getY(), 0.01F);
      assertFalse(homePieceOfFurniture0.isResizable());
      assertFalse(homePieceOfFurniture0.isMovable());
      assertNull(homePieceOfFurniture0.getShininess());
      assertEquals(0.0F, homePieceOfFurniture0.getHeight(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture0.getNameAngle(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture0.getElevation(), 0.01F);
      assertNull(homePieceOfFurniture0.getDescription());
      assertNull(homePieceOfFurniture0.getStaircaseCutOutShape());
      assertEquals(0.0F, homePieceOfFurniture0.getDepth(), 0.01F);
      assertFalse(homePieceOfFurniture0.isTexturable());
      assertEquals(0.0F, homePieceOfFurniture0.getGroundElevation(), 0.01F);
      assertNull(homePieceOfFurniture0.getCatalogId());
      assertEquals(0.0F, homePieceOfFurniture0.getNameXOffset(), 0.01F);
      assertFalse(homePieceOfFurniture0.isDoorOrWindow());
      assertEquals(0.0F, homePieceOfFurniture0.getAngle(), 0.01F);
      assertFalse(homePieceOfFurniture0.isModelMirrored());
      assertFalse(homePieceOfFurniture0.isBackFaceShown());
      assertFalse(homePieceOfFurniture0.isNameVisible());
      assertNull(homePieceOfFurniture0.getName());
      assertFalse(homePieceOfFurniture1.isTexturable());
      assertEquals(0.0F, homePieceOfFurniture1.getAngle(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture1.getElevation(), 0.01F);
      assertFalse(homePieceOfFurniture1.isDoorOrWindow());
      assertNull(homePieceOfFurniture1.getDescription());
      assertNull(homePieceOfFurniture1.getName());
      assertEquals(0.0F, homePieceOfFurniture1.getNameAngle(), 0.01F);
      assertNull(homePieceOfFurniture1.getStaircaseCutOutShape());
      assertEquals(0.0F, homePieceOfFurniture1.getDepth(), 0.01F);
      assertFalse(homePieceOfFurniture1.isDeformable());
      assertEquals(0.0F, homePieceOfFurniture1.getY(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture1.getX(), 0.01F);
      assertNull(homePieceOfFurniture1.getShininess());
      assertEquals(0.0F, homePieceOfFurniture1.getNameXOffset(), 0.01F);
      assertTrue(homePieceOfFurniture1.isVisible());
      assertEquals(0.0F, homePieceOfFurniture1.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture1.getHeight(), 0.01F);
      assertFalse(homePieceOfFurniture1.isResizable());
      assertTrue(homePieceOfFurniture1.isNameVisible());
      assertNull(homePieceOfFurniture1.getCurrency());
      assertEquals(0.0F, homePieceOfFurniture1.getWidth(), 0.01F);
      assertFalse(homePieceOfFurniture1.isMovable());
      assertNull(homePieceOfFurniture1.getCatalogId());
      assertFalse(homePieceOfFurniture1.isBackFaceShown());
      assertFalse(homePieceOfFurniture1.isModelMirrored());
      assertEquals(0.0F, homePieceOfFurniture1.getNameYOffset(), 0.01F);
      assertNull(homePieceOfFurniture1.getColor());
      
      float float1 = homePieceOfFurniture1.getGroundElevation();
      assertNotSame(homePieceOfFurniture0, homePieceOfFurniture1);
      assertNotSame(homePieceOfFurniture1, homePieceOfFurniture0);
      assertFalse(homePieceOfFurniture0.equals((Object)homePieceOfFurniture1));
      assertFalse(homePieceOfFurniture1.equals((Object)homePieceOfFurniture0));
      assertEquals(float1, float0, 0.01F);
      assertEquals(0.0F, float1, 0.01F);
      assertNull(homePieceOfFurniture0.getCurrency());
      assertFalse(homePieceOfFurniture0.isDeformable());
      assertTrue(homePieceOfFurniture0.isVisible());
      assertEquals(0.0F, homePieceOfFurniture0.getWidth(), 0.01F);
      assertNull(homePieceOfFurniture0.getColor());
      assertEquals(0.0F, homePieceOfFurniture0.getNameYOffset(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture0.getX(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture0.getY(), 0.01F);
      assertFalse(homePieceOfFurniture0.isResizable());
      assertFalse(homePieceOfFurniture0.isMovable());
      assertNull(homePieceOfFurniture0.getShininess());
      assertEquals(0.0F, homePieceOfFurniture0.getHeight(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture0.getNameAngle(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture0.getElevation(), 0.01F);
      assertNull(homePieceOfFurniture0.getDescription());
      assertNull(homePieceOfFurniture0.getStaircaseCutOutShape());
      assertEquals(0.0F, homePieceOfFurniture0.getDepth(), 0.01F);
      assertFalse(homePieceOfFurniture0.isTexturable());
      assertEquals(0.0F, homePieceOfFurniture0.getGroundElevation(), 0.01F);
      assertNull(homePieceOfFurniture0.getCatalogId());
      assertEquals(0.0F, homePieceOfFurniture0.getNameXOffset(), 0.01F);
      assertFalse(homePieceOfFurniture0.isDoorOrWindow());
      assertEquals(0.0F, homePieceOfFurniture0.getAngle(), 0.01F);
      assertFalse(homePieceOfFurniture0.isModelMirrored());
      assertFalse(homePieceOfFurniture0.isBackFaceShown());
      assertFalse(homePieceOfFurniture0.isNameVisible());
      assertNull(homePieceOfFurniture0.getName());
      assertFalse(homePieceOfFurniture1.isTexturable());
      assertEquals(0.0F, homePieceOfFurniture1.getAngle(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture1.getElevation(), 0.01F);
      assertFalse(homePieceOfFurniture1.isDoorOrWindow());
      assertNull(homePieceOfFurniture1.getDescription());
      assertNull(homePieceOfFurniture1.getName());
      assertEquals(0.0F, homePieceOfFurniture1.getNameAngle(), 0.01F);
      assertNull(homePieceOfFurniture1.getStaircaseCutOutShape());
      assertEquals(0.0F, homePieceOfFurniture1.getDepth(), 0.01F);
      assertFalse(homePieceOfFurniture1.isDeformable());
      assertEquals(0.0F, homePieceOfFurniture1.getY(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture1.getX(), 0.01F);
      assertNull(homePieceOfFurniture1.getShininess());
      assertEquals(0.0F, homePieceOfFurniture1.getNameXOffset(), 0.01F);
      assertTrue(homePieceOfFurniture1.isVisible());
      assertEquals(0.0F, homePieceOfFurniture1.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture1.getHeight(), 0.01F);
      assertFalse(homePieceOfFurniture1.isResizable());
      assertTrue(homePieceOfFurniture1.isNameVisible());
      assertNull(homePieceOfFurniture1.getCurrency());
      assertEquals(0.0F, homePieceOfFurniture1.getWidth(), 0.01F);
      assertFalse(homePieceOfFurniture1.isMovable());
      assertNull(homePieceOfFurniture1.getCatalogId());
      assertFalse(homePieceOfFurniture1.isBackFaceShown());
      assertFalse(homePieceOfFurniture1.isModelMirrored());
      assertEquals(0.0F, homePieceOfFurniture1.getNameYOffset(), 0.01F);
      assertNull(homePieceOfFurniture1.getColor());
      
      float float2 = homePieceOfFurniture0.getY();
      assertNotSame(homePieceOfFurniture0, homePieceOfFurniture1);
      assertFalse(homePieceOfFurniture0.equals((Object)homePieceOfFurniture1));
      assertEquals(float2, float0, 0.01F);
      assertEquals(float2, float1, 0.01F);
      assertEquals(0.0F, float2, 0.01F);
      assertNull(homePieceOfFurniture0.getCurrency());
      assertFalse(homePieceOfFurniture0.isDeformable());
      assertTrue(homePieceOfFurniture0.isVisible());
      assertEquals(0.0F, homePieceOfFurniture0.getWidth(), 0.01F);
      assertNull(homePieceOfFurniture0.getColor());
      assertEquals(0.0F, homePieceOfFurniture0.getNameYOffset(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture0.getX(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture0.getY(), 0.01F);
      assertFalse(homePieceOfFurniture0.isResizable());
      assertFalse(homePieceOfFurniture0.isMovable());
      assertNull(homePieceOfFurniture0.getShininess());
      assertEquals(0.0F, homePieceOfFurniture0.getHeight(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture0.getNameAngle(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture0.getElevation(), 0.01F);
      assertNull(homePieceOfFurniture0.getDescription());
      assertNull(homePieceOfFurniture0.getStaircaseCutOutShape());
      assertEquals(0.0F, homePieceOfFurniture0.getDepth(), 0.01F);
      assertFalse(homePieceOfFurniture0.isTexturable());
      assertEquals(0.0F, homePieceOfFurniture0.getGroundElevation(), 0.01F);
      assertNull(homePieceOfFurniture0.getCatalogId());
      assertEquals(0.0F, homePieceOfFurniture0.getNameXOffset(), 0.01F);
      assertFalse(homePieceOfFurniture0.isDoorOrWindow());
      assertEquals(0.0F, homePieceOfFurniture0.getAngle(), 0.01F);
      assertFalse(homePieceOfFurniture0.isModelMirrored());
      assertFalse(homePieceOfFurniture0.isBackFaceShown());
      assertFalse(homePieceOfFurniture0.isNameVisible());
      assertNull(homePieceOfFurniture0.getName());
      
      boolean boolean1 = homePieceOfFurniture1.isModelMirrored();
      assertNotSame(homePieceOfFurniture0, homePieceOfFurniture1);
      assertNotSame(homePieceOfFurniture1, homePieceOfFurniture0);
      assertFalse(homePieceOfFurniture0.equals((Object)homePieceOfFurniture1));
      assertFalse(homePieceOfFurniture1.equals((Object)homePieceOfFurniture0));
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      assertNull(homePieceOfFurniture0.getCurrency());
      assertFalse(homePieceOfFurniture0.isDeformable());
      assertTrue(homePieceOfFurniture0.isVisible());
      assertEquals(0.0F, homePieceOfFurniture0.getWidth(), 0.01F);
      assertNull(homePieceOfFurniture0.getColor());
      assertEquals(0.0F, homePieceOfFurniture0.getNameYOffset(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture0.getX(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture0.getY(), 0.01F);
      assertFalse(homePieceOfFurniture0.isResizable());
      assertFalse(homePieceOfFurniture0.isMovable());
      assertNull(homePieceOfFurniture0.getShininess());
      assertEquals(0.0F, homePieceOfFurniture0.getHeight(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture0.getNameAngle(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture0.getElevation(), 0.01F);
      assertNull(homePieceOfFurniture0.getDescription());
      assertNull(homePieceOfFurniture0.getStaircaseCutOutShape());
      assertEquals(0.0F, homePieceOfFurniture0.getDepth(), 0.01F);
      assertFalse(homePieceOfFurniture0.isTexturable());
      assertEquals(0.0F, homePieceOfFurniture0.getGroundElevation(), 0.01F);
      assertNull(homePieceOfFurniture0.getCatalogId());
      assertEquals(0.0F, homePieceOfFurniture0.getNameXOffset(), 0.01F);
      assertFalse(homePieceOfFurniture0.isDoorOrWindow());
      assertEquals(0.0F, homePieceOfFurniture0.getAngle(), 0.01F);
      assertFalse(homePieceOfFurniture0.isModelMirrored());
      assertFalse(homePieceOfFurniture0.isBackFaceShown());
      assertFalse(homePieceOfFurniture0.isNameVisible());
      assertNull(homePieceOfFurniture0.getName());
      assertFalse(homePieceOfFurniture1.isTexturable());
      assertEquals(0.0F, homePieceOfFurniture1.getAngle(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture1.getElevation(), 0.01F);
      assertFalse(homePieceOfFurniture1.isDoorOrWindow());
      assertNull(homePieceOfFurniture1.getDescription());
      assertNull(homePieceOfFurniture1.getName());
      assertEquals(0.0F, homePieceOfFurniture1.getNameAngle(), 0.01F);
      assertNull(homePieceOfFurniture1.getStaircaseCutOutShape());
      assertEquals(0.0F, homePieceOfFurniture1.getDepth(), 0.01F);
      assertFalse(homePieceOfFurniture1.isDeformable());
      assertEquals(0.0F, homePieceOfFurniture1.getY(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture1.getX(), 0.01F);
      assertNull(homePieceOfFurniture1.getShininess());
      assertEquals(0.0F, homePieceOfFurniture1.getNameXOffset(), 0.01F);
      assertTrue(homePieceOfFurniture1.isVisible());
      assertEquals(0.0F, homePieceOfFurniture1.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture1.getHeight(), 0.01F);
      assertFalse(homePieceOfFurniture1.isResizable());
      assertTrue(homePieceOfFurniture1.isNameVisible());
      assertNull(homePieceOfFurniture1.getCurrency());
      assertEquals(0.0F, homePieceOfFurniture1.getWidth(), 0.01F);
      assertFalse(homePieceOfFurniture1.isMovable());
      assertNull(homePieceOfFurniture1.getCatalogId());
      assertFalse(homePieceOfFurniture1.isBackFaceShown());
      assertFalse(homePieceOfFurniture1.isModelMirrored());
      assertEquals(0.0F, homePieceOfFurniture1.getNameYOffset(), 0.01F);
      assertNull(homePieceOfFurniture1.getColor());
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      LightSource[] lightSourceArray0 = new LightSource[2];
      LightSource lightSource0 = new LightSource((-1.0F), (-1457.99F), 381.9F, 1431655765);
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-54);
      byteArray0[1] = (byte) (-40);
      byteArray0[2] = (byte)111;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      LightSource lightSource1 = new LightSource((-1.0F), (-69.47F), 700.4569F, (-853));
      Integer integer0 = new Integer((-853));
      Light light0 = mock(Light.class, new ViolatedAssumptionAnswer());
      doReturn((LightSource[]) null).when(light0).getLightSources();
      doReturn((Integer) null).when(light0).getColor();
      doReturn((String) null).when(light0).getCurrency();
      doReturn(0.0F).when(light0).getDepth();
      doReturn((String) null).when(light0).getDescription();
      doReturn(0.0F).when(light0).getElevation();
      doReturn(0.0F).when(light0).getHeight();
      doReturn((Content) null).when(light0).getIcon();
      doReturn((Content) null).when(light0).getModel();
      doReturn((float[][]) null).when(light0).getModelRotation();
      doReturn((String) null).when(light0).getName();
      doReturn((Content) null).when(light0).getPlanIcon();
      doReturn((BigDecimal) null).when(light0).getPrice();
      doReturn((String) null).when(light0).getStaircaseCutOutShape();
      doReturn((BigDecimal) null).when(light0).getValueAddedTaxPercentage();
      doReturn(0.0F).when(light0).getWidth();
      doReturn(false).when(light0).isBackFaceShown();
      doReturn(false).when(light0).isDeformable();
      doReturn(false).when(light0).isDoorOrWindow();
      doReturn(false).when(light0).isMovable();
      doReturn(false).when(light0).isResizable();
      doReturn(false).when(light0).isTexturable();
      byte[] byteArray1 = new byte[5];
      byteArray1[1] = (byte)111;
      byteArray1[3] = (byte)0;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray1);
      HomeLight homeLight0 = new HomeLight(light0);
      homeLight0.setY((byte)0);
      homeLight0.getValueAddedTax();
      homeLight0.getValueAddedTax();
      homeLight0.getName();
      homeLight0.getLevel();
      HomeLight homeLight1 = homeLight0.clone();
      homeLight1.setName((String) null);
      homeLight1.intersectsRectangle((byte)0, 1800.2F, 700.4569F, (-73.79F));
      homeLight1.setNameYOffset((-1457.99F));
      homeLight1.getPriceValueAddedTaxIncluded();
      homeLight1.setDescription((String) null);
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      Integer integer0 = new Integer((-1469));
      FileSystemHandling.shouldAllThrowIOExceptions();
      Light light0 = mock(Light.class, new ViolatedAssumptionAnswer());
      doReturn((LightSource[]) null).when(light0).getLightSources();
      doReturn((Integer) null).when(light0).getColor();
      doReturn((String) null).when(light0).getCurrency();
      doReturn(0.0F).when(light0).getDepth();
      doReturn((String) null).when(light0).getDescription();
      doReturn(0.0F).when(light0).getElevation();
      doReturn(0.0F).when(light0).getHeight();
      doReturn((Content) null).when(light0).getIcon();
      doReturn((Content) null).when(light0).getModel();
      doReturn((float[][]) null).when(light0).getModelRotation();
      doReturn((String) null).when(light0).getName();
      doReturn((Content) null).when(light0).getPlanIcon();
      doReturn((BigDecimal) null).when(light0).getPrice();
      doReturn((String) null).when(light0).getStaircaseCutOutShape();
      doReturn((BigDecimal) null).when(light0).getValueAddedTaxPercentage();
      doReturn(0.0F).when(light0).getWidth();
      doReturn(false).when(light0).isBackFaceShown();
      doReturn(false).when(light0).isDeformable();
      doReturn(false).when(light0).isDoorOrWindow();
      doReturn(false).when(light0).isMovable();
      doReturn(false).when(light0).isResizable();
      doReturn(false).when(light0).isTexturable();
      HomeLight homeLight0 = new HomeLight(light0);
      homeLight0.setElevation((-1.0F));
      homeLight0.setNameAngle(0.6792272F);
      homeLight0.setNameYOffset((-2587.0374F));
      homeLight0.getPriceValueAddedTaxIncluded();
      homeLight0.setMovable(true);
      homeLight0.setNameYOffset((-2587.0374F));
      HomePieceOfFurniture.SortableProperty.values();
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      LightSource[] lightSourceArray0 = new LightSource[2];
      LightSource lightSource0 = new LightSource((-1.0F), (-1457.99F), 381.9F, 1431655765);
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-54);
      byteArray0[1] = (byte) (-40);
      byteArray0[2] = (byte)111;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      LightSource lightSource1 = new LightSource((-1.0F), (-69.47F), 700.4569F, (-853));
      lightSourceArray0[1] = lightSource1;
      Integer integer0 = new Integer((-853));
      Light light0 = mock(Light.class, new ViolatedAssumptionAnswer());
      doReturn((LightSource[]) null).when(light0).getLightSources();
      doReturn((Integer) null).when(light0).getColor();
      doReturn((String) null).when(light0).getCurrency();
      doReturn(0.0F).when(light0).getDepth();
      doReturn((String) null).when(light0).getDescription();
      doReturn(0.0F).when(light0).getElevation();
      doReturn(0.0F).when(light0).getHeight();
      doReturn((Content) null).when(light0).getIcon();
      doReturn((Content) null).when(light0).getModel();
      doReturn((float[][]) null).when(light0).getModelRotation();
      doReturn((String) null).when(light0).getName();
      doReturn((Content) null).when(light0).getPlanIcon();
      doReturn((BigDecimal) null).when(light0).getPrice();
      doReturn((String) null).when(light0).getStaircaseCutOutShape();
      doReturn((BigDecimal) null).when(light0).getValueAddedTaxPercentage();
      doReturn(0.0F).when(light0).getWidth();
      doReturn(false).when(light0).isBackFaceShown();
      doReturn(false).when(light0).isDeformable();
      doReturn(false).when(light0).isDoorOrWindow();
      doReturn(false).when(light0).isMovable();
      doReturn(false).when(light0).isResizable();
      doReturn(false).when(light0).isTexturable();
      byte[] byteArray1 = new byte[5];
      byteArray1[1] = (byte)1;
      byteArray1[3] = (byte) (-32);
      byteArray1[4] = (byte)62;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray1);
      HomeLight homeLight0 = new HomeLight(light0);
      homeLight0.setY((-1.0F));
      homeLight0.getValueAddedTax();
      homeLight0.getValueAddedTax();
      homeLight0.getName();
      homeLight0.getLevel();
      HomeLight homeLight1 = homeLight0.clone();
      homeLight1.setName((String) null);
      homeLight1.intersectsRectangle((byte) (-32), 1800.2F, 700.4569F, (-73.79F));
      homeLight1.setNameYOffset((-1.0F));
      homeLight1.getPriceValueAddedTaxIncluded();
      homeLight1.setDescription((String) null);
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      LightSource[] lightSourceArray0 = new LightSource[2];
      LightSource lightSource0 = new LightSource((-1.0F), (-1.0F), 381.9F, 1431655765);
      assertNotNull(lightSource0);
      assertEquals((-1.0F), lightSource0.getY(), 0.01F);
      assertEquals(381.9F, lightSource0.getZ(), 0.01F);
      assertEquals((-1.0F), lightSource0.getX(), 0.01F);
      assertEquals(1431655765, lightSource0.getColor());
      assertNull(lightSource0.getDiameter());
      
      LightSource lightSource1 = new LightSource((-1.0F), (-69.47F), 700.4569F, 1431655765);
      assertNotNull(lightSource1);
      assertFalse(lightSource1.equals((Object)lightSource0));
      assertEquals(700.4569F, lightSource1.getZ(), 0.01F);
      assertEquals(1431655765, lightSource1.getColor());
      assertNull(lightSource1.getDiameter());
      assertEquals((-69.47F), lightSource1.getY(), 0.01F);
      assertEquals((-1.0F), lightSource1.getX(), 0.01F);
      
      lightSourceArray0[1] = lightSource1;
      Integer integer0 = new Integer(1431655765);
      assertNotNull(integer0);
      assertEquals(1431655765, (int)integer0);
      
      Light light0 = mock(Light.class, new ViolatedAssumptionAnswer());
      doReturn((LightSource[]) null).when(light0).getLightSources();
      doReturn((Integer) null).when(light0).getColor();
      doReturn((String) null).when(light0).getCurrency();
      doReturn(0.0F).when(light0).getDepth();
      doReturn((String) null).when(light0).getDescription();
      doReturn(0.0F).when(light0).getElevation();
      doReturn(0.0F).when(light0).getHeight();
      doReturn((Content) null).when(light0).getIcon();
      doReturn((Content) null).when(light0).getModel();
      doReturn((float[][]) null).when(light0).getModelRotation();
      doReturn((String) null).when(light0).getName();
      doReturn((Content) null).when(light0).getPlanIcon();
      doReturn((BigDecimal) null).when(light0).getPrice();
      doReturn((String) null).when(light0).getStaircaseCutOutShape();
      doReturn((BigDecimal) null).when(light0).getValueAddedTaxPercentage();
      doReturn(0.0F).when(light0).getWidth();
      doReturn(false).when(light0).isBackFaceShown();
      doReturn(false).when(light0).isDeformable();
      doReturn(false).when(light0).isDoorOrWindow();
      doReturn(false).when(light0).isMovable();
      doReturn(false).when(light0).isResizable();
      doReturn(false).when(light0).isTexturable();
      HomeLight homeLight0 = new HomeLight(light0);
      assertNotNull(homeLight0);
      assertFalse(homeLight0.isNameVisible());
      assertNull(homeLight0.getColor());
      assertFalse(homeLight0.isDeformable());
      assertFalse(homeLight0.isBackFaceShown());
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertNull(homeLight0.getCurrency());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertFalse(homeLight0.isModelMirrored());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertNull(homeLight0.getCatalogId());
      assertNull(homeLight0.getName());
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertNull(homeLight0.getDescription());
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertFalse(homeLight0.isMovable());
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertFalse(homeLight0.isTexturable());
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertFalse(homeLight0.isResizable());
      assertNull(homeLight0.getShininess());
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertTrue(homeLight0.isVisible());
      
      HomeLight homeLight1 = homeLight0.clone();
      assertNotNull(homeLight1);
      assertNotSame(homeLight0, homeLight1);
      assertNotSame(homeLight1, homeLight0);
      assertFalse(homeLight1.equals((Object)homeLight0));
      assertFalse(homeLight0.isNameVisible());
      assertNull(homeLight0.getColor());
      assertFalse(homeLight0.isDeformable());
      assertFalse(homeLight0.isBackFaceShown());
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertNull(homeLight0.getCurrency());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertFalse(homeLight0.isModelMirrored());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertNull(homeLight0.getCatalogId());
      assertNull(homeLight0.getName());
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertNull(homeLight0.getDescription());
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertFalse(homeLight0.isMovable());
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertFalse(homeLight0.isTexturable());
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertFalse(homeLight0.isResizable());
      assertNull(homeLight0.getShininess());
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertTrue(homeLight0.isVisible());
      assertEquals(0.0F, homeLight1.getDepth(), 0.01F);
      assertEquals(0.0F, homeLight1.getNameAngle(), 0.01F);
      assertNull(homeLight1.getDescription());
      assertNull(homeLight1.getStaircaseCutOutShape());
      assertEquals(0.5F, homeLight1.getPower(), 0.01F);
      assertNull(homeLight1.getName());
      assertEquals(0.0F, homeLight1.getGroundElevation(), 0.01F);
      assertFalse(homeLight1.isResizable());
      assertFalse(homeLight1.isDoorOrWindow());
      assertEquals(0.0F, homeLight1.getAngle(), 0.01F);
      assertNull(homeLight1.getShininess());
      assertEquals(0.0F, homeLight1.getElevation(), 0.01F);
      assertEquals(0.0F, homeLight1.getY(), 0.01F);
      assertEquals(0.0F, homeLight1.getX(), 0.01F);
      assertFalse(homeLight1.isTexturable());
      assertEquals(0.0F, homeLight1.getNameXOffset(), 0.01F);
      assertFalse(homeLight1.isDeformable());
      assertFalse(homeLight1.isNameVisible());
      assertTrue(homeLight1.isVisible());
      assertNull(homeLight1.getCurrency());
      assertEquals(0.0F, homeLight1.getWidth(), 0.01F);
      assertFalse(homeLight1.isModelMirrored());
      assertFalse(homeLight1.isBackFaceShown());
      assertFalse(homeLight1.isMovable());
      assertEquals(0.0F, homeLight1.getHeight(), 0.01F);
      assertNull(homeLight1.getColor());
      assertEquals(0.0F, homeLight1.getNameYOffset(), 0.01F);
      assertNull(homeLight1.getCatalogId());
      
      String string0 = homeLight1.getName();
      assertNull(string0);
      assertNotSame(homeLight0, homeLight1);
      assertNotSame(homeLight1, homeLight0);
      assertFalse(homeLight0.equals((Object)homeLight1));
      assertFalse(homeLight1.equals((Object)homeLight0));
      assertFalse(homeLight0.isNameVisible());
      assertNull(homeLight0.getColor());
      assertFalse(homeLight0.isDeformable());
      assertFalse(homeLight0.isBackFaceShown());
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertNull(homeLight0.getCurrency());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertFalse(homeLight0.isModelMirrored());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertNull(homeLight0.getCatalogId());
      assertNull(homeLight0.getName());
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertNull(homeLight0.getDescription());
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertFalse(homeLight0.isMovable());
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertFalse(homeLight0.isTexturable());
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertFalse(homeLight0.isResizable());
      assertNull(homeLight0.getShininess());
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertTrue(homeLight0.isVisible());
      assertEquals(0.0F, homeLight1.getDepth(), 0.01F);
      assertEquals(0.0F, homeLight1.getNameAngle(), 0.01F);
      assertNull(homeLight1.getDescription());
      assertNull(homeLight1.getStaircaseCutOutShape());
      assertEquals(0.5F, homeLight1.getPower(), 0.01F);
      assertNull(homeLight1.getName());
      assertEquals(0.0F, homeLight1.getGroundElevation(), 0.01F);
      assertFalse(homeLight1.isResizable());
      assertFalse(homeLight1.isDoorOrWindow());
      assertEquals(0.0F, homeLight1.getAngle(), 0.01F);
      assertNull(homeLight1.getShininess());
      assertEquals(0.0F, homeLight1.getElevation(), 0.01F);
      assertEquals(0.0F, homeLight1.getY(), 0.01F);
      assertEquals(0.0F, homeLight1.getX(), 0.01F);
      assertFalse(homeLight1.isTexturable());
      assertEquals(0.0F, homeLight1.getNameXOffset(), 0.01F);
      assertFalse(homeLight1.isDeformable());
      assertFalse(homeLight1.isNameVisible());
      assertTrue(homeLight1.isVisible());
      assertNull(homeLight1.getCurrency());
      assertEquals(0.0F, homeLight1.getWidth(), 0.01F);
      assertFalse(homeLight1.isModelMirrored());
      assertFalse(homeLight1.isBackFaceShown());
      assertFalse(homeLight1.isMovable());
      assertEquals(0.0F, homeLight1.getHeight(), 0.01F);
      assertNull(homeLight1.getColor());
      assertEquals(0.0F, homeLight1.getNameYOffset(), 0.01F);
      assertNull(homeLight1.getCatalogId());
      
      Level level0 = homeLight0.getLevel();
      assertNull(level0);
      assertNotSame(homeLight0, homeLight1);
      assertFalse(homeLight0.equals((Object)homeLight1));
      assertFalse(homeLight0.isNameVisible());
      assertNull(homeLight0.getColor());
      assertFalse(homeLight0.isDeformable());
      assertFalse(homeLight0.isBackFaceShown());
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertNull(homeLight0.getCurrency());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertFalse(homeLight0.isModelMirrored());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertNull(homeLight0.getCatalogId());
      assertNull(homeLight0.getName());
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertNull(homeLight0.getDescription());
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertFalse(homeLight0.isMovable());
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertFalse(homeLight0.isTexturable());
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertFalse(homeLight0.isResizable());
      assertNull(homeLight0.getShininess());
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertTrue(homeLight0.isVisible());
      
      HomeLight homeLight2 = homeLight0.clone();
      assertNotNull(homeLight2);
      assertNotSame(homeLight0, homeLight2);
      assertNotSame(homeLight0, homeLight1);
      assertNotSame(homeLight2, homeLight1);
      assertNotSame(homeLight2, homeLight0);
      assertFalse(homeLight0.equals((Object)homeLight1));
      assertFalse(homeLight2.equals((Object)homeLight1));
      assertFalse(homeLight2.equals((Object)homeLight0));
      assertFalse(homeLight0.isNameVisible());
      assertNull(homeLight0.getColor());
      assertFalse(homeLight0.isDeformable());
      assertFalse(homeLight0.isBackFaceShown());
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertNull(homeLight0.getCurrency());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertFalse(homeLight0.isModelMirrored());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertNull(homeLight0.getCatalogId());
      assertNull(homeLight0.getName());
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertNull(homeLight0.getDescription());
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertFalse(homeLight0.isMovable());
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertFalse(homeLight0.isTexturable());
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertFalse(homeLight0.isResizable());
      assertNull(homeLight0.getShininess());
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertTrue(homeLight0.isVisible());
      assertNull(homeLight2.getDescription());
      assertEquals(0.0F, homeLight2.getElevation(), 0.01F);
      assertEquals(0.0F, homeLight2.getNameAngle(), 0.01F);
      assertNull(homeLight2.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight2.getDepth(), 0.01F);
      assertEquals(0.5F, homeLight2.getPower(), 0.01F);
      assertFalse(homeLight2.isTexturable());
      assertEquals(0.0F, homeLight2.getGroundElevation(), 0.01F);
      assertNull(homeLight2.getCatalogId());
      assertEquals(0.0F, homeLight2.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeLight2.getAngle(), 0.01F);
      assertFalse(homeLight2.isDoorOrWindow());
      assertFalse(homeLight2.isModelMirrored());
      assertFalse(homeLight2.isBackFaceShown());
      assertFalse(homeLight2.isNameVisible());
      assertNull(homeLight2.getName());
      assertFalse(homeLight2.isDeformable());
      assertNull(homeLight2.getCurrency());
      assertTrue(homeLight2.isVisible());
      assertEquals(0.0F, homeLight2.getWidth(), 0.01F);
      assertNull(homeLight2.getColor());
      assertEquals(0.0F, homeLight2.getNameYOffset(), 0.01F);
      assertEquals(0.0F, homeLight2.getX(), 0.01F);
      assertEquals(0.0F, homeLight2.getY(), 0.01F);
      assertFalse(homeLight2.isMovable());
      assertFalse(homeLight2.isResizable());
      assertNull(homeLight2.getShininess());
      assertEquals(0.0F, homeLight2.getHeight(), 0.01F);
      
      homeLight1.setAngle(39.0F);
      assertNotSame(homeLight0, homeLight2);
      assertNotSame(homeLight0, homeLight1);
      assertNotSame(homeLight1, homeLight2);
      assertNotSame(homeLight1, homeLight0);
      assertFalse(homeLight0.equals((Object)homeLight2));
      assertFalse(homeLight0.equals((Object)homeLight1));
      assertFalse(homeLight1.equals((Object)homeLight2));
      assertFalse(homeLight1.equals((Object)homeLight0));
      assertFalse(homeLight0.isNameVisible());
      assertNull(homeLight0.getColor());
      assertFalse(homeLight0.isDeformable());
      assertFalse(homeLight0.isBackFaceShown());
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertNull(homeLight0.getCurrency());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertFalse(homeLight0.isModelMirrored());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertNull(homeLight0.getCatalogId());
      assertNull(homeLight0.getName());
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertNull(homeLight0.getDescription());
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertFalse(homeLight0.isMovable());
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertFalse(homeLight0.isTexturable());
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertFalse(homeLight0.isResizable());
      assertNull(homeLight0.getShininess());
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertTrue(homeLight0.isVisible());
      assertEquals(0.0F, homeLight1.getDepth(), 0.01F);
      assertEquals(0.0F, homeLight1.getNameAngle(), 0.01F);
      assertNull(homeLight1.getDescription());
      assertNull(homeLight1.getStaircaseCutOutShape());
      assertEquals(0.5F, homeLight1.getPower(), 0.01F);
      assertEquals(1.3008882F, homeLight1.getAngle(), 0.01F);
      assertNull(homeLight1.getName());
      assertEquals(0.0F, homeLight1.getGroundElevation(), 0.01F);
      assertFalse(homeLight1.isResizable());
      assertFalse(homeLight1.isDoorOrWindow());
      assertNull(homeLight1.getShininess());
      assertEquals(0.0F, homeLight1.getElevation(), 0.01F);
      assertEquals(0.0F, homeLight1.getY(), 0.01F);
      assertEquals(0.0F, homeLight1.getX(), 0.01F);
      assertFalse(homeLight1.isTexturable());
      assertEquals(0.0F, homeLight1.getNameXOffset(), 0.01F);
      assertFalse(homeLight1.isDeformable());
      assertFalse(homeLight1.isNameVisible());
      assertTrue(homeLight1.isVisible());
      assertNull(homeLight1.getCurrency());
      assertEquals(0.0F, homeLight1.getWidth(), 0.01F);
      assertFalse(homeLight1.isModelMirrored());
      assertFalse(homeLight1.isBackFaceShown());
      assertFalse(homeLight1.isMovable());
      assertEquals(0.0F, homeLight1.getHeight(), 0.01F);
      assertNull(homeLight1.getColor());
      assertEquals(0.0F, homeLight1.getNameYOffset(), 0.01F);
      assertNull(homeLight1.getCatalogId());
      
      homeLight2.setName("Invalid URL base for JAR entry");
      assertNotSame(homeLight0, homeLight2);
      assertNotSame(homeLight0, homeLight1);
      assertNotSame(homeLight2, homeLight1);
      assertNotSame(homeLight2, homeLight0);
      assertFalse(homeLight0.equals((Object)homeLight2));
      assertFalse(homeLight0.equals((Object)homeLight1));
      assertFalse(homeLight2.equals((Object)homeLight1));
      assertFalse(homeLight2.equals((Object)homeLight0));
      assertFalse(homeLight0.isNameVisible());
      assertNull(homeLight0.getColor());
      assertFalse(homeLight0.isDeformable());
      assertFalse(homeLight0.isBackFaceShown());
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertNull(homeLight0.getCurrency());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertFalse(homeLight0.isModelMirrored());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertNull(homeLight0.getCatalogId());
      assertNull(homeLight0.getName());
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertNull(homeLight0.getDescription());
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertFalse(homeLight0.isMovable());
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertFalse(homeLight0.isTexturable());
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertFalse(homeLight0.isResizable());
      assertNull(homeLight0.getShininess());
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertTrue(homeLight0.isVisible());
      assertNull(homeLight2.getDescription());
      assertEquals(0.0F, homeLight2.getElevation(), 0.01F);
      assertEquals(0.0F, homeLight2.getNameAngle(), 0.01F);
      assertNull(homeLight2.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight2.getDepth(), 0.01F);
      assertEquals(0.5F, homeLight2.getPower(), 0.01F);
      assertFalse(homeLight2.isTexturable());
      assertEquals(0.0F, homeLight2.getGroundElevation(), 0.01F);
      assertNull(homeLight2.getCatalogId());
      assertEquals(0.0F, homeLight2.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeLight2.getAngle(), 0.01F);
      assertFalse(homeLight2.isDoorOrWindow());
      assertFalse(homeLight2.isModelMirrored());
      assertFalse(homeLight2.isBackFaceShown());
      assertFalse(homeLight2.isNameVisible());
      assertFalse(homeLight2.isDeformable());
      assertNull(homeLight2.getCurrency());
      assertEquals("Invalid URL base for JAR entry", homeLight2.getName());
      assertTrue(homeLight2.isVisible());
      assertEquals(0.0F, homeLight2.getWidth(), 0.01F);
      assertNull(homeLight2.getColor());
      assertEquals(0.0F, homeLight2.getNameYOffset(), 0.01F);
      assertEquals(0.0F, homeLight2.getX(), 0.01F);
      assertEquals(0.0F, homeLight2.getY(), 0.01F);
      assertFalse(homeLight2.isMovable());
      assertFalse(homeLight2.isResizable());
      assertNull(homeLight2.getShininess());
      assertEquals(0.0F, homeLight2.getHeight(), 0.01F);
      
      homeLight2.setDescription("Invalid URL base for JAR entry");
      assertNotSame(homeLight0, homeLight2);
      assertNotSame(homeLight0, homeLight1);
      assertNotSame(homeLight2, homeLight1);
      assertNotSame(homeLight2, homeLight0);
      assertFalse(homeLight0.equals((Object)homeLight2));
      assertFalse(homeLight0.equals((Object)homeLight1));
      assertFalse(homeLight2.equals((Object)homeLight1));
      assertFalse(homeLight2.equals((Object)homeLight0));
      assertFalse(homeLight0.isNameVisible());
      assertNull(homeLight0.getColor());
      assertFalse(homeLight0.isDeformable());
      assertFalse(homeLight0.isBackFaceShown());
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertNull(homeLight0.getCurrency());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertFalse(homeLight0.isModelMirrored());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertNull(homeLight0.getCatalogId());
      assertNull(homeLight0.getName());
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertNull(homeLight0.getDescription());
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertFalse(homeLight0.isMovable());
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertFalse(homeLight0.isTexturable());
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertFalse(homeLight0.isResizable());
      assertNull(homeLight0.getShininess());
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertTrue(homeLight0.isVisible());
      assertEquals(0.0F, homeLight2.getElevation(), 0.01F);
      assertEquals(0.0F, homeLight2.getNameAngle(), 0.01F);
      assertNull(homeLight2.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight2.getDepth(), 0.01F);
      assertEquals(0.5F, homeLight2.getPower(), 0.01F);
      assertFalse(homeLight2.isTexturable());
      assertEquals(0.0F, homeLight2.getGroundElevation(), 0.01F);
      assertNull(homeLight2.getCatalogId());
      assertEquals(0.0F, homeLight2.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeLight2.getAngle(), 0.01F);
      assertFalse(homeLight2.isDoorOrWindow());
      assertFalse(homeLight2.isModelMirrored());
      assertFalse(homeLight2.isBackFaceShown());
      assertFalse(homeLight2.isNameVisible());
      assertFalse(homeLight2.isDeformable());
      assertNull(homeLight2.getCurrency());
      assertEquals("Invalid URL base for JAR entry", homeLight2.getName());
      assertTrue(homeLight2.isVisible());
      assertEquals(0.0F, homeLight2.getWidth(), 0.01F);
      assertNull(homeLight2.getColor());
      assertEquals(0.0F, homeLight2.getNameYOffset(), 0.01F);
      assertEquals(0.0F, homeLight2.getX(), 0.01F);
      assertEquals("Invalid URL base for JAR entry", homeLight2.getDescription());
      assertEquals(0.0F, homeLight2.getY(), 0.01F);
      assertFalse(homeLight2.isMovable());
      assertFalse(homeLight2.isResizable());
      assertNull(homeLight2.getShininess());
      assertEquals(0.0F, homeLight2.getHeight(), 0.01F);
      
      boolean boolean0 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, (String) null);
      assertFalse(boolean0);
      
      boolean boolean1 = homeLight2.intersectsRectangle(700.4569F, (-1.0F), 39.0F, (-69.47F));
      assertNotSame(homeLight0, homeLight2);
      assertNotSame(homeLight0, homeLight1);
      assertNotSame(homeLight2, homeLight1);
      assertNotSame(homeLight2, homeLight0);
      assertFalse(homeLight0.equals((Object)homeLight2));
      assertFalse(homeLight0.equals((Object)homeLight1));
      assertFalse(homeLight2.equals((Object)homeLight1));
      assertFalse(homeLight2.equals((Object)homeLight0));
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      assertFalse(homeLight0.isNameVisible());
      assertNull(homeLight0.getColor());
      assertFalse(homeLight0.isDeformable());
      assertFalse(homeLight0.isBackFaceShown());
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertNull(homeLight0.getCurrency());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertFalse(homeLight0.isModelMirrored());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertNull(homeLight0.getCatalogId());
      assertNull(homeLight0.getName());
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertNull(homeLight0.getDescription());
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertFalse(homeLight0.isMovable());
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertFalse(homeLight0.isTexturable());
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertFalse(homeLight0.isResizable());
      assertNull(homeLight0.getShininess());
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertTrue(homeLight0.isVisible());
      assertEquals(0.0F, homeLight2.getElevation(), 0.01F);
      assertEquals(0.0F, homeLight2.getNameAngle(), 0.01F);
      assertNull(homeLight2.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight2.getDepth(), 0.01F);
      assertEquals(0.5F, homeLight2.getPower(), 0.01F);
      assertFalse(homeLight2.isTexturable());
      assertEquals(0.0F, homeLight2.getGroundElevation(), 0.01F);
      assertNull(homeLight2.getCatalogId());
      assertEquals(0.0F, homeLight2.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeLight2.getAngle(), 0.01F);
      assertFalse(homeLight2.isDoorOrWindow());
      assertFalse(homeLight2.isModelMirrored());
      assertFalse(homeLight2.isBackFaceShown());
      assertFalse(homeLight2.isNameVisible());
      assertFalse(homeLight2.isDeformable());
      assertNull(homeLight2.getCurrency());
      assertEquals("Invalid URL base for JAR entry", homeLight2.getName());
      assertTrue(homeLight2.isVisible());
      assertEquals(0.0F, homeLight2.getWidth(), 0.01F);
      assertNull(homeLight2.getColor());
      assertEquals(0.0F, homeLight2.getNameYOffset(), 0.01F);
      assertEquals(0.0F, homeLight2.getX(), 0.01F);
      assertEquals("Invalid URL base for JAR entry", homeLight2.getDescription());
      assertEquals(0.0F, homeLight2.getY(), 0.01F);
      assertFalse(homeLight2.isMovable());
      assertFalse(homeLight2.isResizable());
      assertNull(homeLight2.getShininess());
      assertEquals(0.0F, homeLight2.getHeight(), 0.01F);
      
      BigDecimal bigDecimal0 = BigDecimal.TEN;
      assertNotNull(bigDecimal0);
      assertEquals((byte)10, bigDecimal0.byteValue());
      assertEquals((short)10, bigDecimal0.shortValue());
      
      HomeLight homeLight3 = homeLight0.clone();
      assertNotNull(homeLight3);
      assertNotSame(homeLight3, homeLight0);
      assertNotSame(homeLight3, homeLight1);
      assertNotSame(homeLight3, homeLight2);
      assertNotSame(homeLight0, homeLight3);
      assertNotSame(homeLight0, homeLight2);
      assertNotSame(homeLight0, homeLight1);
      assertFalse(homeLight3.equals((Object)homeLight0));
      assertFalse(homeLight3.equals((Object)homeLight1));
      assertFalse(homeLight3.equals((Object)homeLight2));
      assertFalse(homeLight0.equals((Object)homeLight2));
      assertFalse(homeLight0.equals((Object)homeLight1));
      assertEquals(0.0F, homeLight3.getElevation(), 0.01F);
      assertNull(homeLight3.getName());
      assertEquals(0.0F, homeLight3.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeLight3.getGroundElevation(), 0.01F);
      assertNull(homeLight3.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight3.getNameAngle(), 0.01F);
      assertEquals(0.0F, homeLight3.getDepth(), 0.01F);
      assertFalse(homeLight3.isBackFaceShown());
      assertFalse(homeLight3.isModelMirrored());
      assertFalse(homeLight3.isDoorOrWindow());
      assertEquals(0.0F, homeLight3.getX(), 0.01F);
      assertEquals(0.0F, homeLight3.getY(), 0.01F);
      assertEquals(0.0F, homeLight3.getAngle(), 0.01F);
      assertFalse(homeLight3.isNameVisible());
      assertFalse(homeLight3.isTexturable());
      assertNull(homeLight3.getDescription());
      assertEquals(0.0F, homeLight3.getWidth(), 0.01F);
      assertTrue(homeLight3.isVisible());
      assertEquals(0.0F, homeLight3.getNameYOffset(), 0.01F);
      assertFalse(homeLight3.isDeformable());
      assertFalse(homeLight3.isResizable());
      assertNull(homeLight3.getShininess());
      assertNull(homeLight3.getCatalogId());
      assertNull(homeLight3.getColor());
      assertEquals(0.0F, homeLight3.getHeight(), 0.01F);
      assertFalse(homeLight3.isMovable());
      assertNull(homeLight3.getCurrency());
      assertEquals(0.5F, homeLight3.getPower(), 0.01F);
      assertFalse(homeLight0.isNameVisible());
      assertNull(homeLight0.getColor());
      assertFalse(homeLight0.isDeformable());
      assertFalse(homeLight0.isBackFaceShown());
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertNull(homeLight0.getCurrency());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertFalse(homeLight0.isModelMirrored());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertNull(homeLight0.getCatalogId());
      assertNull(homeLight0.getName());
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertNull(homeLight0.getDescription());
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertFalse(homeLight0.isMovable());
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertFalse(homeLight0.isTexturable());
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertFalse(homeLight0.isResizable());
      assertNull(homeLight0.getShininess());
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertTrue(homeLight0.isVisible());
      
      homeLight2.setDescription("Invalid URL base for JAR entry");
      assertNotSame(homeLight0, homeLight3);
      assertNotSame(homeLight0, homeLight2);
      assertNotSame(homeLight0, homeLight1);
      assertNotSame(homeLight2, homeLight1);
      assertNotSame(homeLight2, homeLight0);
      assertNotSame(homeLight2, homeLight3);
      assertFalse(homeLight0.equals((Object)homeLight3));
      assertFalse(homeLight0.equals((Object)homeLight2));
      assertFalse(homeLight0.equals((Object)homeLight1));
      assertFalse(homeLight2.equals((Object)homeLight1));
      assertFalse(homeLight2.equals((Object)homeLight0));
      assertFalse(homeLight2.equals((Object)homeLight3));
      assertFalse(homeLight0.isNameVisible());
      assertNull(homeLight0.getColor());
      assertFalse(homeLight0.isDeformable());
      assertFalse(homeLight0.isBackFaceShown());
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertNull(homeLight0.getCurrency());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertFalse(homeLight0.isModelMirrored());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertNull(homeLight0.getCatalogId());
      assertNull(homeLight0.getName());
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertNull(homeLight0.getDescription());
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertFalse(homeLight0.isMovable());
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertFalse(homeLight0.isTexturable());
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertFalse(homeLight0.isResizable());
      assertNull(homeLight0.getShininess());
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertTrue(homeLight0.isVisible());
      assertEquals(0.0F, homeLight2.getElevation(), 0.01F);
      assertEquals(0.0F, homeLight2.getNameAngle(), 0.01F);
      assertNull(homeLight2.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight2.getDepth(), 0.01F);
      assertEquals(0.5F, homeLight2.getPower(), 0.01F);
      assertFalse(homeLight2.isTexturable());
      assertEquals(0.0F, homeLight2.getGroundElevation(), 0.01F);
      assertNull(homeLight2.getCatalogId());
      assertEquals(0.0F, homeLight2.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeLight2.getAngle(), 0.01F);
      assertFalse(homeLight2.isDoorOrWindow());
      assertFalse(homeLight2.isModelMirrored());
      assertFalse(homeLight2.isBackFaceShown());
      assertFalse(homeLight2.isNameVisible());
      assertFalse(homeLight2.isDeformable());
      assertNull(homeLight2.getCurrency());
      assertEquals("Invalid URL base for JAR entry", homeLight2.getName());
      assertTrue(homeLight2.isVisible());
      assertEquals(0.0F, homeLight2.getWidth(), 0.01F);
      assertNull(homeLight2.getColor());
      assertEquals(0.0F, homeLight2.getNameYOffset(), 0.01F);
      assertEquals(0.0F, homeLight2.getX(), 0.01F);
      assertEquals("Invalid URL base for JAR entry", homeLight2.getDescription());
      assertEquals(0.0F, homeLight2.getY(), 0.01F);
      assertFalse(homeLight2.isMovable());
      assertFalse(homeLight2.isResizable());
      assertNull(homeLight2.getShininess());
      assertEquals(0.0F, homeLight2.getHeight(), 0.01F);
      
      HomeTexture homeTexture0 = homeLight0.getTexture();
      assertNull(homeTexture0);
      assertNotSame(homeLight0, homeLight3);
      assertNotSame(homeLight0, homeLight2);
      assertNotSame(homeLight0, homeLight1);
      assertFalse(homeLight0.equals((Object)homeLight3));
      assertFalse(homeLight0.equals((Object)homeLight2));
      assertFalse(homeLight0.equals((Object)homeLight1));
      assertFalse(homeLight0.isNameVisible());
      assertNull(homeLight0.getColor());
      assertFalse(homeLight0.isDeformable());
      assertFalse(homeLight0.isBackFaceShown());
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertNull(homeLight0.getCurrency());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertFalse(homeLight0.isModelMirrored());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertNull(homeLight0.getCatalogId());
      assertNull(homeLight0.getName());
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertNull(homeLight0.getDescription());
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertFalse(homeLight0.isMovable());
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertFalse(homeLight0.isTexturable());
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertFalse(homeLight0.isResizable());
      assertNull(homeLight0.getShininess());
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertTrue(homeLight0.isVisible());
      
      boolean boolean2 = homeLight1.isAtLevel((Level) null);
      assertNotSame(homeLight0, homeLight3);
      assertNotSame(homeLight0, homeLight2);
      assertNotSame(homeLight0, homeLight1);
      assertNotSame(homeLight1, homeLight2);
      assertNotSame(homeLight1, homeLight0);
      assertNotSame(homeLight1, homeLight3);
      assertFalse(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      assertFalse(homeLight0.equals((Object)homeLight3));
      assertFalse(homeLight0.equals((Object)homeLight2));
      assertFalse(homeLight0.equals((Object)homeLight1));
      assertFalse(homeLight1.equals((Object)homeLight2));
      assertFalse(homeLight1.equals((Object)homeLight0));
      assertFalse(homeLight1.equals((Object)homeLight3));
      assertTrue(boolean2);
      assertFalse(homeLight0.isNameVisible());
      assertNull(homeLight0.getColor());
      assertFalse(homeLight0.isDeformable());
      assertFalse(homeLight0.isBackFaceShown());
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertNull(homeLight0.getCurrency());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertFalse(homeLight0.isModelMirrored());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertNull(homeLight0.getCatalogId());
      assertNull(homeLight0.getName());
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertNull(homeLight0.getDescription());
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertFalse(homeLight0.isMovable());
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertFalse(homeLight0.isTexturable());
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertFalse(homeLight0.isResizable());
      assertNull(homeLight0.getShininess());
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertTrue(homeLight0.isVisible());
      assertEquals(0.0F, homeLight1.getDepth(), 0.01F);
      assertEquals(0.0F, homeLight1.getNameAngle(), 0.01F);
      assertNull(homeLight1.getDescription());
      assertNull(homeLight1.getStaircaseCutOutShape());
      assertEquals(0.5F, homeLight1.getPower(), 0.01F);
      assertEquals(1.3008882F, homeLight1.getAngle(), 0.01F);
      assertNull(homeLight1.getName());
      assertEquals(0.0F, homeLight1.getGroundElevation(), 0.01F);
      assertFalse(homeLight1.isResizable());
      assertFalse(homeLight1.isDoorOrWindow());
      assertNull(homeLight1.getShininess());
      assertEquals(0.0F, homeLight1.getElevation(), 0.01F);
      assertEquals(0.0F, homeLight1.getY(), 0.01F);
      assertEquals(0.0F, homeLight1.getX(), 0.01F);
      assertFalse(homeLight1.isTexturable());
      assertEquals(0.0F, homeLight1.getNameXOffset(), 0.01F);
      assertFalse(homeLight1.isDeformable());
      assertFalse(homeLight1.isNameVisible());
      assertTrue(homeLight1.isVisible());
      assertNull(homeLight1.getCurrency());
      assertEquals(0.0F, homeLight1.getWidth(), 0.01F);
      assertFalse(homeLight1.isModelMirrored());
      assertFalse(homeLight1.isBackFaceShown());
      assertFalse(homeLight1.isMovable());
      assertEquals(0.0F, homeLight1.getHeight(), 0.01F);
      assertNull(homeLight1.getColor());
      assertEquals(0.0F, homeLight1.getNameYOffset(), 0.01F);
      assertNull(homeLight1.getCatalogId());
      
      homeLight3.isDoorOrWindow();
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      Light light0 = mock(Light.class, new ViolatedAssumptionAnswer());
      doReturn((LightSource[]) null).when(light0).getLightSources();
      doReturn((Integer) null).when(light0).getColor();
      doReturn((String) null).when(light0).getCurrency();
      doReturn(0.0F).when(light0).getDepth();
      doReturn((String) null).when(light0).getDescription();
      doReturn(0.0F).when(light0).getElevation();
      doReturn(0.0F).when(light0).getHeight();
      doReturn((Content) null).when(light0).getIcon();
      doReturn((Content) null).when(light0).getModel();
      doReturn((float[][]) null).when(light0).getModelRotation();
      doReturn((String) null).when(light0).getName();
      doReturn((Content) null).when(light0).getPlanIcon();
      doReturn((BigDecimal) null).when(light0).getPrice();
      doReturn((String) null).when(light0).getStaircaseCutOutShape();
      doReturn((BigDecimal) null).when(light0).getValueAddedTaxPercentage();
      doReturn(0.0F).when(light0).getWidth();
      doReturn(false).when(light0).isBackFaceShown();
      doReturn(false).when(light0).isDeformable();
      doReturn(false).when(light0).isDoorOrWindow();
      doReturn(false).when(light0).isMovable();
      doReturn(false).when(light0).isResizable();
      doReturn(false).when(light0).isTexturable();
      HomeLight homeLight0 = new HomeLight(light0);
      homeLight0.getDescription();
      Level level0 = new Level((String) null, (-119.7F), (-119.7F), 593.7749F);
      // Undeclared exception!
      try { 
        homeLight0.setHeight(593.7749F);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Piece isn't resizable
         //
         verifyException("com.eteks.sweethome3d.model.HomePieceOfFurniture", e);
      }
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      Integer integer0 = new Integer(1431655757);
      Light light0 = mock(Light.class, new ViolatedAssumptionAnswer());
      doReturn((LightSource[]) null).when(light0).getLightSources();
      doReturn((Integer) null).when(light0).getColor();
      doReturn((String) null).when(light0).getCurrency();
      doReturn(0.0F).when(light0).getDepth();
      doReturn((String) null).when(light0).getDescription();
      doReturn(0.0F).when(light0).getElevation();
      doReturn(0.0F).when(light0).getHeight();
      doReturn((Content) null).when(light0).getIcon();
      doReturn((Content) null).when(light0).getModel();
      doReturn((float[][]) null).when(light0).getModelRotation();
      doReturn((String) null).when(light0).getName();
      doReturn((Content) null).when(light0).getPlanIcon();
      doReturn((BigDecimal) null).when(light0).getPrice();
      doReturn((String) null).when(light0).getStaircaseCutOutShape();
      doReturn((BigDecimal) null).when(light0).getValueAddedTaxPercentage();
      doReturn(0.0F).when(light0).getWidth();
      doReturn(false).when(light0).isBackFaceShown();
      doReturn(false).when(light0).isDeformable();
      doReturn(false).when(light0).isDoorOrWindow();
      doReturn(false).when(light0).isMovable();
      doReturn(false).when(light0).isResizable();
      doReturn(false).when(light0).isTexturable();
      Sash sash0 = new Sash((byte)47, 0.0F, 0.0F, 1431655757, (byte)47);
      BigInteger bigInteger0 = BigInteger.ZERO;
      BigDecimal bigDecimal0 = new BigDecimal(bigInteger0);
      HomeLight homeLight0 = new HomeLight(light0);
      homeLight0.setY((-1265.729F));
      homeLight0.getValueAddedTax();
      HomeLight homeLight1 = homeLight0.clone();
      homeLight0.getLevel();
      HomeLight homeLight2 = homeLight0.clone();
      homeLight0.setName("zr#$Cy?Ig_QInnju>");
      Integer.valueOf(1);
      homeLight1.containsPoint(0.0F, 0.0F, 0.0F);
      homeLight2.setNameYOffset(306.4907F);
      homeLight1.getPrice();
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      HomePieceOfFurniture homePieceOfFurniture0 = null;
      // Undeclared exception!
      try { 
        HomePieceOfFurniture.access$1500((HomePieceOfFurniture) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.eteks.sweethome3d.model.HomePieceOfFurniture", e);
      }
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      Light light0 = mock(Light.class, new ViolatedAssumptionAnswer());
      doReturn((LightSource[]) null).when(light0).getLightSources();
      doReturn((Integer) null).when(light0).getColor();
      doReturn((String) null).when(light0).getCurrency();
      doReturn(0.0F).when(light0).getDepth();
      doReturn((String) null).when(light0).getDescription();
      doReturn(0.0F).when(light0).getElevation();
      doReturn(0.0F).when(light0).getHeight();
      doReturn((Content) null).when(light0).getIcon();
      doReturn((Content) null).when(light0).getModel();
      doReturn((float[][]) null).when(light0).getModelRotation();
      doReturn((String) null).when(light0).getName();
      doReturn((Content) null).when(light0).getPlanIcon();
      doReturn((BigDecimal) null).when(light0).getPrice();
      doReturn((String) null).when(light0).getStaircaseCutOutShape();
      doReturn((BigDecimal) null).when(light0).getValueAddedTaxPercentage();
      doReturn(0.0F).when(light0).getWidth();
      doReturn(false).when(light0).isBackFaceShown();
      doReturn(false).when(light0).isDeformable();
      doReturn(false).when(light0).isDoorOrWindow();
      doReturn(false).when(light0).isMovable();
      doReturn(false).when(light0).isResizable();
      doReturn(false).when(light0).isTexturable();
      HomeLight homeLight0 = new HomeLight(light0);
      HomeLight homeLight1 = homeLight0.clone();
      homeLight1.isBottomRightPointAt((-1.0F), (byte) (-32), (-915.78656F));
      homeLight1.setNameAngle(5.8981633F);
      homeLight0.setY((-915.78656F));
      homeLight1.isBottomLeftPointAt((-1.0F), 0.3926991F, 2167.424F);
      homeLight0.getPriceValueAddedTaxIncluded();
      homeLight0.setDescription((String) null);
      homeLight0.getStaircaseCutOutShape();
      homeLight0.getPrice();
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      Light light0 = mock(Light.class, new ViolatedAssumptionAnswer());
      doReturn((LightSource[]) null).when(light0).getLightSources();
      doReturn((Integer) null).when(light0).getColor();
      doReturn((String) null).when(light0).getCurrency();
      doReturn(0.0F).when(light0).getDepth();
      doReturn((String) null).when(light0).getDescription();
      doReturn(0.0F).when(light0).getElevation();
      doReturn(0.0F).when(light0).getHeight();
      doReturn((Content) null).when(light0).getIcon();
      doReturn((Content) null).when(light0).getModel();
      doReturn((float[][]) null).when(light0).getModelRotation();
      doReturn((String) null).when(light0).getName();
      doReturn((Content) null).when(light0).getPlanIcon();
      doReturn((BigDecimal) null).when(light0).getPrice();
      doReturn((String) null).when(light0).getStaircaseCutOutShape();
      doReturn((BigDecimal) null).when(light0).getValueAddedTaxPercentage();
      doReturn(0.0F).when(light0).getWidth();
      doReturn(false).when(light0).isBackFaceShown();
      doReturn(false).when(light0).isDeformable();
      doReturn(false).when(light0).isDoorOrWindow();
      doReturn(false).when(light0).isMovable();
      doReturn(false).when(light0).isResizable();
      doReturn(false).when(light0).isTexturable();
      HomeLight homeLight0 = new HomeLight(light0);
      homeLight0.getDescription();
      homeLight0.intersectsRectangle(2018.9861F, (-1.0F), (-119.7F), (-119.7F));
      BigDecimal bigDecimal0 = BigDecimal.TEN;
      HomeLight homeLight1 = homeLight0.clone();
      homeLight1.setDescription((String) null);
      homeLight1.getLevel();
      homeLight1.isAtLevel((Level) null);
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      Integer integer0 = new Integer(1431655765);
      LightSource lightSource0 = new LightSource(1431655765, (-3203), (-1695.24F), (-3203));
      LightSource lightSource1 = new LightSource(1358, 1.0F, (-894.0F), (-2335));
      Integer.valueOf(21);
      Integer.valueOf(0);
      Light light0 = mock(Light.class, new ViolatedAssumptionAnswer());
      doReturn((LightSource[]) null).when(light0).getLightSources();
      doReturn((Integer) null).when(light0).getColor();
      doReturn((String) null).when(light0).getCurrency();
      doReturn(0.0F).when(light0).getDepth();
      doReturn((String) null).when(light0).getDescription();
      doReturn(0.0F).when(light0).getElevation();
      doReturn(0.0F).when(light0).getHeight();
      doReturn((Content) null).when(light0).getIcon();
      doReturn((Content) null).when(light0).getModel();
      doReturn((float[][]) null).when(light0).getModelRotation();
      doReturn((String) null).when(light0).getName();
      doReturn((Content) null).when(light0).getPlanIcon();
      doReturn((BigDecimal) null).when(light0).getPrice();
      doReturn((String) null).when(light0).getStaircaseCutOutShape();
      doReturn((BigDecimal) null).when(light0).getValueAddedTaxPercentage();
      doReturn(0.0F).when(light0).getWidth();
      doReturn(false).when(light0).isBackFaceShown();
      doReturn(false).when(light0).isDeformable();
      doReturn(false).when(light0).isDoorOrWindow();
      doReturn(false).when(light0).isMovable();
      doReturn(false).when(light0).isResizable();
      doReturn(false).when(light0).isTexturable();
      HomeLight homeLight0 = new HomeLight(light0);
      HomeLight homeLight1 = homeLight0.clone();
      homeLight1.isPointAt(1997.7765F, (-2766.0F), 0.03654585F);
      Float.floatToIntBits((-571.491F));
      homeLight0.getValueAddedTax();
      homeLight1.getLevel();
      HomeLight homeLight2 = homeLight1.clone();
      homeLight2.setAngle((-1097.0F));
      homeLight1.setName("");
      Integer integer1 = new Integer(1);
      System.setCurrentTimeMillis(2023L);
      float float0 = new Integer((-3203));
      homeLight1.isNameCenterPointAt((-1.0F), 1.0F, 1);
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      Light light0 = mock(Light.class, new ViolatedAssumptionAnswer());
      doReturn((LightSource[]) null).when(light0).getLightSources();
      doReturn((Integer) null).when(light0).getColor();
      doReturn((String) null).when(light0).getCurrency();
      doReturn(0.0F).when(light0).getDepth();
      doReturn((String) null).when(light0).getDescription();
      doReturn(0.0F).when(light0).getElevation();
      doReturn(0.0F).when(light0).getHeight();
      doReturn((Content) null).when(light0).getIcon();
      doReturn((Content) null).when(light0).getModel();
      doReturn((float[][]) null).when(light0).getModelRotation();
      doReturn((String) null).when(light0).getName();
      doReturn((Content) null).when(light0).getPlanIcon();
      doReturn((BigDecimal) null).when(light0).getPrice();
      doReturn((String) null).when(light0).getStaircaseCutOutShape();
      doReturn((BigDecimal) null).when(light0).getValueAddedTaxPercentage();
      doReturn(0.0F).when(light0).getWidth();
      doReturn(false).when(light0).isBackFaceShown();
      doReturn(false).when(light0).isDeformable();
      doReturn(false).when(light0).isDoorOrWindow();
      doReturn(false).when(light0).isMovable();
      doReturn(false).when(light0).isResizable();
      doReturn(false).when(light0).isTexturable();
      HomeLight homeLight0 = new HomeLight(light0);
      Float.floatToIntBits((byte) (-32));
      HomeLight homeLight1 = homeLight0.clone();
      homeLight1.getLevel();
      homeLight1.clone();
      homeLight1.setAngle(3309.9814F);
      Integer.valueOf((int) (byte) (-32));
      homeLight1.setNameYOffset((byte) (-32));
      HomePieceOfFurniture.SortableProperty.values();
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      String[] stringArray0 = new String[8];
      stringArray0[0] = "";
      Float float0 = new Float((-1729.3374F));
      URLContent uRLContent0 = new URLContent((URL) null);
      Sash[] sashArray0 = new Sash[8];
      Sash sash0 = new Sash((-1.0F), (-10.917348F), (-368.692F), (-368.692F), 0.0F);
      sashArray0[5] = sash0;
      Sash sash1 = new Sash((-1485.2021F), (-368.692F), (-1.0F), (-10.917348F), (-1729.3374F));
      sashArray0[6] = sash1;
      float[][] floatArray0 = new float[3][1];
      float[] floatArray1 = new float[3];
      floatArray0[0] = floatArray1;
      float[] floatArray2 = new float[3];
      floatArray2[2] = (-1.0F);
      floatArray2[1] = (-1.0F);
      floatArray0[1] = floatArray2;
      floatArray0[2] = floatArray1;
      CatalogDoorOrWindow catalogDoorOrWindow0 = new CatalogDoorOrWindow("", "", "", "", stringArray0, (Long) null, float0, uRLContent0, uRLContent0, uRLContent0, (-368.692F), (-368.692F), (-1.0F), (-368.692F), true, (-368.692F), 0.0F, sashArray0, floatArray0, "", true, true, true, (BigDecimal) null, (BigDecimal) null, "");
      HomeDoorOrWindow homeDoorOrWindow0 = new HomeDoorOrWindow(catalogDoorOrWindow0);
      homeDoorOrWindow0.setNameXOffset(2.0F);
      homeDoorOrWindow0.setShininess((Float) 0.0F);
      Random.setNextRandom(2);
      homeDoorOrWindow0.isDeformable();
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      Integer integer0 = new Integer(1431655765);
      Light light0 = mock(Light.class, new ViolatedAssumptionAnswer());
      doReturn((LightSource[]) null).when(light0).getLightSources();
      doReturn((Integer) null).when(light0).getColor();
      doReturn((String) null).when(light0).getCurrency();
      doReturn(0.0F).when(light0).getDepth();
      doReturn((String) null).when(light0).getDescription();
      doReturn(0.0F).when(light0).getElevation();
      doReturn(0.0F).when(light0).getHeight();
      doReturn((Content) null).when(light0).getIcon();
      doReturn((Content) null).when(light0).getModel();
      doReturn((float[][]) null).when(light0).getModelRotation();
      doReturn((String) null).when(light0).getName();
      doReturn((Content) null).when(light0).getPlanIcon();
      doReturn((BigDecimal) null).when(light0).getPrice();
      doReturn((String) null).when(light0).getStaircaseCutOutShape();
      doReturn((BigDecimal) null).when(light0).getValueAddedTaxPercentage();
      doReturn(0.0F).when(light0).getWidth();
      doReturn(false).when(light0).isBackFaceShown();
      doReturn(false).when(light0).isDeformable();
      doReturn(false).when(light0).isDoorOrWindow();
      doReturn(false).when(light0).isMovable();
      doReturn(false).when(light0).isResizable();
      doReturn(false).when(light0).isTexturable();
      Sash sash0 = new Sash((byte)1, 0.0F, 0.0F, 1431655765, (-414.0F));
      BigInteger bigInteger0 = BigInteger.ZERO;
      BigDecimal bigDecimal0 = new BigDecimal(bigInteger0);
      HomeLight homeLight0 = new HomeLight(light0);
      homeLight0.setY((-1265.729F));
      homeLight0.getValueAddedTax();
      HomeLight homeLight1 = homeLight0.clone();
      homeLight1.isTopLeftPointAt((-848.0F), 1.0F, 69.47F);
      homeLight0.getLevel();
      HomeLight homeLight2 = homeLight0.clone();
      homeLight0.setAngle(414.72678F);
      homeLight0.setName("zr#$Cy?Ig_QInnju>");
      Integer.valueOf(1);
      Integer integer1 = new Integer(1001);
      // Undeclared exception!
      try { 
        homeLight2.setColor((Integer) null);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Piece isn't texturable
         //
         verifyException("com.eteks.sweethome3d.model.HomePieceOfFurniture", e);
      }
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      Integer integer0 = new Integer(1431655765);
      LightSource[] lightSourceArray0 = new LightSource[1];
      LightSource lightSource0 = new LightSource((-87.07429F), (-813.2223F), (-87.07429F), 1431655765);
      lightSourceArray0[0] = lightSource0;
      Integer.valueOf(0);
      Integer.valueOf(0);
      Integer.valueOf(463);
      Light light0 = mock(Light.class, new ViolatedAssumptionAnswer());
      doReturn((LightSource[]) null).when(light0).getLightSources();
      doReturn((Integer) null).when(light0).getColor();
      doReturn((String) null).when(light0).getCurrency();
      doReturn(0.0F).when(light0).getDepth();
      doReturn((String) null).when(light0).getDescription();
      doReturn(0.0F).when(light0).getElevation();
      doReturn(0.0F).when(light0).getHeight();
      doReturn((Content) null).when(light0).getIcon();
      doReturn((Content) null).when(light0).getModel();
      doReturn((float[][]) null).when(light0).getModelRotation();
      doReturn((String) null).when(light0).getName();
      doReturn((Content) null).when(light0).getPlanIcon();
      doReturn((BigDecimal) null).when(light0).getPrice();
      doReturn((String) null).when(light0).getStaircaseCutOutShape();
      doReturn((BigDecimal) null).when(light0).getValueAddedTaxPercentage();
      doReturn(0.0F).when(light0).getWidth();
      doReturn(false).when(light0).isBackFaceShown();
      doReturn(false).when(light0).isDeformable();
      doReturn(false).when(light0).isDoorOrWindow();
      doReturn(false).when(light0).isMovable();
      doReturn(false).when(light0).isResizable();
      doReturn(false).when(light0).isTexturable();
      Sash sash0 = new Sash((byte)1, 0.0F, 0.0F, 1431655765, (-414.0F));
      BigInteger bigInteger0 = BigInteger.ZERO;
      BigDecimal bigDecimal0 = new BigDecimal(bigInteger0);
      HomeLight homeLight0 = new HomeLight(light0);
      homeLight0.setY((-1265.729F));
      homeLight0.isNameCenterPointAt(1.0F, (-87.07429F), 3.4028235E38F);
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      String[] stringArray0 = new String[8];
      stringArray0[0] = "";
      Float float0 = new Float((-1729.3374F));
      URLContent uRLContent0 = new URLContent((URL) null);
      Sash[] sashArray0 = new Sash[8];
      Sash sash0 = new Sash((-1.0F), (-10.917348F), (-368.692F), (-368.692F), 0.0F);
      sashArray0[5] = sash0;
      Sash sash1 = new Sash((-1485.2021F), (-368.692F), (-1.0F), (-10.917348F), (-1729.3374F));
      sashArray0[6] = sash1;
      float[][] floatArray0 = new float[3][1];
      float[] floatArray1 = new float[3];
      floatArray0[0] = floatArray1;
      float[] floatArray2 = new float[3];
      floatArray2[2] = (-1.0F);
      floatArray2[1] = (-1.0F);
      floatArray0[1] = floatArray2;
      floatArray0[2] = floatArray1;
      CatalogDoorOrWindow catalogDoorOrWindow0 = new CatalogDoorOrWindow("", "", "", "", stringArray0, (Long) null, float0, uRLContent0, uRLContent0, uRLContent0, (-368.692F), (-368.692F), (-1.0F), (-368.692F), true, (-368.692F), 0.0F, sashArray0, floatArray0, "", true, true, true, (BigDecimal) null, (BigDecimal) null, "");
      HomeDoorOrWindow homeDoorOrWindow0 = new HomeDoorOrWindow(catalogDoorOrWindow0);
      homeDoorOrWindow0.setNameXOffset(2.0F);
      homeDoorOrWindow0.setShininess((Float) 0.0F);
      Random.setNextRandom(2);
      homeDoorOrWindow0.getWidth();
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      LightSource[] lightSourceArray0 = new LightSource[2];
      URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      URL uRL0 = MockURL.URL("s<7]@ykxs+ 0`a ", (String) null, (-1667), "", uRLStreamHandler0);
      TemporaryURLContent temporaryURLContent0 = new TemporaryURLContent(uRL0);
      BigDecimal bigDecimal0 = BigDecimal.TEN;
      CatalogLight catalogLight0 = new CatalogLight("\"<xp|JAv^\"<^Qh{/~", "s<7]@ykxs+ 0`a ", "s<7]@ykxs+ 0`a ", temporaryURLContent0, temporaryURLContent0, temporaryURLContent0, (-611.6462F), 1.7441415F, 0.5F, (-897.795F), true, lightSourceArray0, "", (float[][]) null, "P'HZa~G", true, true, true, bigDecimal0, bigDecimal0, "");
      HomeLight homeLight0 = new HomeLight(catalogLight0);
      homeLight0.clone();
      HomeLight homeLight1 = homeLight0.clone();
      homeLight1.setWidth((-1667));
      homeLight0.setY(0.5F);
      homeLight1.setWidth((-1.0F));
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      HomePieceOfFurniture homePieceOfFurniture0 = null;
      // Undeclared exception!
      try { 
        HomePieceOfFurniture.access$1100((HomePieceOfFurniture) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.eteks.sweethome3d.model.HomePieceOfFurniture", e);
      }
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      Light light0 = mock(Light.class, new ViolatedAssumptionAnswer());
      doReturn((LightSource[]) null).when(light0).getLightSources();
      doReturn((Integer) null).when(light0).getColor();
      doReturn((String) null).when(light0).getCurrency();
      doReturn(0.0F).when(light0).getDepth();
      doReturn((String) null).when(light0).getDescription();
      doReturn(0.0F).when(light0).getElevation();
      doReturn(0.0F).when(light0).getHeight();
      doReturn((Content) null).when(light0).getIcon();
      doReturn((Content) null).when(light0).getModel();
      doReturn((float[][]) null).when(light0).getModelRotation();
      doReturn((String) null).when(light0).getName();
      doReturn((Content) null).when(light0).getPlanIcon();
      doReturn((BigDecimal) null).when(light0).getPrice();
      doReturn((String) null).when(light0).getStaircaseCutOutShape();
      doReturn((BigDecimal) null).when(light0).getValueAddedTaxPercentage();
      doReturn(0.0F).when(light0).getWidth();
      doReturn(false).when(light0).isBackFaceShown();
      doReturn(false).when(light0).isDeformable();
      doReturn(false).when(light0).isDoorOrWindow();
      doReturn(false).when(light0).isMovable();
      doReturn(false).when(light0).isResizable();
      doReturn(false).when(light0).isTexturable();
      HomeLight homeLight0 = new HomeLight(light0);
      Float.floatToIntBits((-358.246F));
      Float.floatToIntBits((-358.246F));
      homeLight0.getLevel();
      homeLight0.getDescription();
      homeLight0.getNameStyle();
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      LightSource[] lightSourceArray0 = new LightSource[2];
      URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      URL uRL0 = MockURL.URL("s<7]@ykxs+ 0`a ", (String) null, (-1667), "", uRLStreamHandler0);
      TemporaryURLContent temporaryURLContent0 = new TemporaryURLContent(uRL0);
      BigDecimal bigDecimal0 = BigDecimal.TEN;
      CatalogLight catalogLight0 = new CatalogLight("\"<xp|JAv^\"<^Qh{/~", "s<7]@ykxs+ 0`a ", "s<7]@ykxs+ 0`a ", temporaryURLContent0, temporaryURLContent0, temporaryURLContent0, (-611.6462F), 1.7441415F, 0.5F, (-897.795F), true, lightSourceArray0, "", (float[][]) null, "P'HZa~G", true, true, true, bigDecimal0, bigDecimal0, "");
      HomeLight homeLight0 = new HomeLight(catalogLight0);
      HomeLight homeLight1 = homeLight0.clone();
      HomeLight homeLight2 = homeLight0.clone();
      homeLight2.setWidth((-1667));
      homeLight0.setY(0.5F);
      Integer integer0 = new Integer((-1667));
      Integer integer1 = new Integer(5);
      homeLight1.setColor(integer1);
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      Integer.valueOf(1285);
      Integer integer0 = Integer.valueOf(1285);
      URL uRL0 = MockURL.getHttpExample();
      ResourceURLContent resourceURLContent0 = new ResourceURLContent(uRL0, true);
      float[][] floatArray0 = new float[7][3];
      float[] floatArray1 = new float[8];
      floatArray1[0] = (float) 1285;
      floatArray1[1] = 3894.95F;
      floatArray1[2] = 3894.95F;
      floatArray1[3] = 3894.95F;
      floatArray1[4] = 3894.95F;
      floatArray1[5] = 3894.95F;
      floatArray1[6] = (float) 1285;
      floatArray1[7] = (-3768.826F);
      floatArray0[0] = floatArray1;
      float[] floatArray2 = new float[2];
      floatArray2[0] = 3894.95F;
      floatArray2[1] = (float) 1285;
      floatArray0[1] = floatArray2;
      float[] floatArray3 = new float[0];
      floatArray0[2] = floatArray3;
      float[] floatArray4 = new float[1];
      floatArray4[0] = (float) 1285;
      floatArray0[3] = floatArray4;
      float[] floatArray5 = new float[7];
      floatArray5[0] = (-2316.3884F);
      floatArray5[1] = (float) 1285;
      floatArray5[2] = (-2316.3884F);
      floatArray5[3] = (-2316.3884F);
      floatArray5[4] = (-3768.826F);
      floatArray5[5] = (float) 1285;
      floatArray5[6] = 3894.95F;
      floatArray0[4] = floatArray5;
      float[] floatArray6 = new float[8];
      floatArray6[0] = (-1.0F);
      floatArray6[1] = 3894.95F;
      floatArray6[2] = (-3768.826F);
      floatArray6[3] = (-2316.3884F);
      floatArray6[4] = (-3768.826F);
      floatArray6[5] = (float) 1285;
      floatArray6[6] = (float) 1285;
      floatArray6[7] = (float) 1285;
      floatArray0[5] = floatArray6;
      float[] floatArray7 = new float[7];
      floatArray7[0] = (float) 1285;
      floatArray7[1] = (-1.0F);
      floatArray7[2] = 3894.95F;
      floatArray7[3] = (-3768.826F);
      floatArray7[4] = (float) 1285;
      floatArray7[5] = 3894.95F;
      floatArray7[6] = (-1.0F);
      floatArray0[6] = floatArray7;
      BigDecimal bigDecimal0 = BigDecimal.TEN;
      PieceOfFurniture pieceOfFurniture0 = mock(PieceOfFurniture.class, new ViolatedAssumptionAnswer());
      doReturn(integer0).when(pieceOfFurniture0).getColor();
      doReturn("/Jq]J9J<eKs8AD12").when(pieceOfFurniture0).getCurrency();
      doReturn(3894.95F).when(pieceOfFurniture0).getDepth();
      doReturn("/Jq]J9J<eKs8AD12").when(pieceOfFurniture0).getDescription();
      doReturn(3894.95F).when(pieceOfFurniture0).getElevation();
      doReturn((-2316.3884F)).when(pieceOfFurniture0).getHeight();
      doReturn(resourceURLContent0).when(pieceOfFurniture0).getIcon();
      doReturn(resourceURLContent0).when(pieceOfFurniture0).getModel();
      doReturn(floatArray0).when(pieceOfFurniture0).getModelRotation();
      doReturn("kXR'cS3?").when(pieceOfFurniture0).getName();
      doReturn(resourceURLContent0).when(pieceOfFurniture0).getPlanIcon();
      doReturn(bigDecimal0).when(pieceOfFurniture0).getPrice();
      doReturn("").when(pieceOfFurniture0).getStaircaseCutOutShape();
      doReturn(bigDecimal0).when(pieceOfFurniture0).getValueAddedTaxPercentage();
      doReturn(3894.95F).when(pieceOfFurniture0).getWidth();
      doReturn(false).when(pieceOfFurniture0).isBackFaceShown();
      doReturn(false).when(pieceOfFurniture0).isDeformable();
      doReturn(false).when(pieceOfFurniture0).isDoorOrWindow();
      doReturn(false).when(pieceOfFurniture0).isMovable();
      doReturn(false).when(pieceOfFurniture0).isResizable();
      doReturn(true).when(pieceOfFurniture0).isTexturable();
      HomePieceOfFurniture homePieceOfFurniture0 = new HomePieceOfFurniture(pieceOfFurniture0);
      homePieceOfFurniture0.getLevel();
      homePieceOfFurniture0.getPlanIcon();
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      Integer integer0 = new Integer(1431655765);
      Light light0 = mock(Light.class, new ViolatedAssumptionAnswer());
      doReturn((LightSource[]) null).when(light0).getLightSources();
      doReturn((Integer) null).when(light0).getColor();
      doReturn((String) null).when(light0).getCurrency();
      doReturn(0.0F).when(light0).getDepth();
      doReturn((String) null).when(light0).getDescription();
      doReturn(0.0F).when(light0).getElevation();
      doReturn(0.0F).when(light0).getHeight();
      doReturn((Content) null).when(light0).getIcon();
      doReturn((Content) null).when(light0).getModel();
      doReturn((float[][]) null).when(light0).getModelRotation();
      doReturn((String) null).when(light0).getName();
      doReturn((Content) null).when(light0).getPlanIcon();
      doReturn((BigDecimal) null).when(light0).getPrice();
      doReturn((String) null).when(light0).getStaircaseCutOutShape();
      doReturn((BigDecimal) null).when(light0).getValueAddedTaxPercentage();
      doReturn(0.0F).when(light0).getWidth();
      doReturn(false).when(light0).isBackFaceShown();
      doReturn(false).when(light0).isDeformable();
      doReturn(false).when(light0).isDoorOrWindow();
      doReturn(false).when(light0).isMovable();
      doReturn(false).when(light0).isResizable();
      doReturn(false).when(light0).isTexturable();
      Sash sash0 = new Sash((byte)1, 0.0F, 0.0F, 1431655765, (byte)1);
      BigInteger bigInteger0 = BigInteger.ZERO;
      BigDecimal bigDecimal0 = new BigDecimal(bigInteger0);
      HomeLight homeLight0 = new HomeLight(light0);
      homeLight0.setY((-1265.729F));
      homeLight0.getValueAddedTax();
      HomeLight homeLight1 = homeLight0.clone();
      homeLight0.getLevel();
      HomeLight homeLight2 = homeLight0.clone();
      homeLight0.setName("zr#$Cy?Ig_QInnju>");
      Integer.valueOf(1);
      homeLight1.containsPoint(0.0F, 0.0F, 0.0F);
      homeLight2.setNameYOffset(306.4907F);
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      LightSource[] lightSourceArray0 = new LightSource[8];
      URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      URL uRL0 = MockURL.URL("s<7]@ykxs+ 0`a ", (String) null, (-1666), "TS", uRLStreamHandler0);
      TemporaryURLContent temporaryURLContent0 = new TemporaryURLContent(uRL0);
      BigDecimal bigDecimal0 = BigDecimal.TEN;
      CatalogLight catalogLight0 = new CatalogLight("\"<xp|JAv^\"<^Qh{/~", "s<7]@ykxs+ 0`a ", "s<7]@ykxs+ 0`a ", temporaryURLContent0, temporaryURLContent0, temporaryURLContent0, (-611.6462F), 1.7441415F, (-611.6462F), (-897.795F), false, lightSourceArray0, "", (float[][]) null, "P'HZa~G", false, false, false, bigDecimal0, bigDecimal0, "TS");
      HomeLight homeLight0 = new HomeLight(catalogLight0);
      homeLight0.clone();
      Level level0 = new Level("", 1178.6547F, 1178.6547F, (-897.795F));
      homeLight0.isAtLevel(level0);
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      LightSource lightSource0 = new LightSource((-1.0F), (-1457.99F), 381.9F, 1431655765);
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-54);
      byteArray0[1] = (byte) (-40);
      byteArray0[2] = (byte)111;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      LightSource lightSource1 = new LightSource((-1.0F), (-69.47F), 700.4569F, (-853));
      Integer integer0 = new Integer((-853));
      Light light0 = mock(Light.class, new ViolatedAssumptionAnswer());
      doReturn((LightSource[]) null).when(light0).getLightSources();
      doReturn((Integer) null).when(light0).getColor();
      doReturn((String) null).when(light0).getCurrency();
      doReturn(0.0F).when(light0).getDepth();
      doReturn((String) null).when(light0).getDescription();
      doReturn(0.0F).when(light0).getElevation();
      doReturn(0.0F).when(light0).getHeight();
      doReturn((Content) null).when(light0).getIcon();
      doReturn((Content) null).when(light0).getModel();
      doReturn((float[][]) null).when(light0).getModelRotation();
      doReturn((String) null).when(light0).getName();
      doReturn((Content) null).when(light0).getPlanIcon();
      doReturn((BigDecimal) null).when(light0).getPrice();
      doReturn((String) null).when(light0).getStaircaseCutOutShape();
      doReturn((BigDecimal) null).when(light0).getValueAddedTaxPercentage();
      doReturn(0.0F).when(light0).getWidth();
      doReturn(false).when(light0).isBackFaceShown();
      doReturn(false).when(light0).isDeformable();
      doReturn(false).when(light0).isDoorOrWindow();
      doReturn(false).when(light0).isMovable();
      doReturn(false).when(light0).isResizable();
      doReturn(false).when(light0).isTexturable();
      byte[] byteArray1 = new byte[5];
      byteArray1[1] = (byte)111;
      byteArray1[3] = (byte)0;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray1);
      HomeLight homeLight0 = new HomeLight(light0);
      homeLight0.setY((byte)0);
      homeLight0.getValueAddedTax();
      homeLight0.getValueAddedTax();
      homeLight0.getName();
      homeLight0.getLevel();
      homeLight0.setName((String) null);
      homeLight0.intersectsRectangle((byte)0, 1800.2F, 700.4569F, (-73.79F));
      homeLight0.setNameYOffset((-1457.99F));
      homeLight0.getPriceValueAddedTaxIncluded();
      homeLight0.setDescription((String) null);
      homeLight0.getX();
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      Integer integer0 = new Integer(1431655765);
      Light light0 = mock(Light.class, new ViolatedAssumptionAnswer());
      Sash sash0 = new Sash((byte)1, 0.0F, 0.0F, 1431655765, (-414.0F));
      BigInteger bigInteger0 = BigInteger.ZERO;
      BigDecimal bigDecimal0 = new BigDecimal(bigInteger0);
      Sash[] sashArray0 = new Sash[4];
      sashArray0[0] = sash0;
      sashArray0[1] = sash0;
      sashArray0[2] = sash0;
      sashArray0[3] = sash0;
      CatalogDoorOrWindow catalogDoorOrWindow0 = new CatalogDoorOrWindow(")_MS9u#[a^", "CRCKF", "CRCKF", (Content) null, (Content) null, (Content) null, (-1.0F), 0.0F, (-1.0F), (-1265.729F), true, (-19.712702F), (-414.0F), sashArray0, (float[][]) null, "", true, true, true, bigDecimal0, bigDecimal0, ")_MS9u#[a^");
      HomeDoorOrWindow homeDoorOrWindow0 = new HomeDoorOrWindow(catalogDoorOrWindow0);
      homeDoorOrWindow0.isBottomLeftPointAt(26.65861F, 1599.2F, 1599.2F);
      homeDoorOrWindow0.isTopRightPointAt((-19.712702F), (-111.972F), (-1.0F));
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      Light light0 = mock(Light.class, new ViolatedAssumptionAnswer());
      doReturn((LightSource[]) null).when(light0).getLightSources();
      doReturn((Integer) null).when(light0).getColor();
      doReturn((String) null).when(light0).getCurrency();
      doReturn(0.0F).when(light0).getDepth();
      doReturn((String) null).when(light0).getDescription();
      doReturn(0.0F).when(light0).getElevation();
      doReturn(0.0F).when(light0).getHeight();
      doReturn((Content) null).when(light0).getIcon();
      doReturn((Content) null).when(light0).getModel();
      doReturn((float[][]) null).when(light0).getModelRotation();
      doReturn((String) null).when(light0).getName();
      doReturn((Content) null).when(light0).getPlanIcon();
      doReturn((BigDecimal) null).when(light0).getPrice();
      doReturn((String) null).when(light0).getStaircaseCutOutShape();
      doReturn((BigDecimal) null).when(light0).getValueAddedTaxPercentage();
      doReturn(0.0F).when(light0).getWidth();
      doReturn(false).when(light0).isBackFaceShown();
      doReturn(false).when(light0).isDeformable();
      doReturn(false).when(light0).isDoorOrWindow();
      doReturn(false).when(light0).isMovable();
      doReturn(false).when(light0).isResizable();
      doReturn(false).when(light0).isTexturable();
      HomeLight homeLight0 = new HomeLight(light0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      homeLight0.getName();
      homeLight0.getNameStyle();
      homeLight0.setNameStyle((TextStyle) null);
      homeLight0.getLevel();
      HomeLight homeLight1 = homeLight0.clone();
      FileSystemHandling.shouldAllThrowIOExceptions();
      homeLight0.isNameVisible();
      HomeLight homeLight2 = null;
      try {
        homeLight2 = new HomeLight(homeLight1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.eteks.sweethome3d.model.HomePieceOfFurniture", e);
      }
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      Light light0 = mock(Light.class, new ViolatedAssumptionAnswer());
      doReturn((LightSource[]) null).when(light0).getLightSources();
      doReturn((Integer) null).when(light0).getColor();
      doReturn((String) null).when(light0).getCurrency();
      doReturn(0.0F).when(light0).getDepth();
      doReturn((String) null).when(light0).getDescription();
      doReturn(0.0F).when(light0).getElevation();
      doReturn(0.0F).when(light0).getHeight();
      doReturn((Content) null).when(light0).getIcon();
      doReturn((Content) null).when(light0).getModel();
      doReturn((float[][]) null).when(light0).getModelRotation();
      doReturn((String) null).when(light0).getName();
      doReturn((Content) null).when(light0).getPlanIcon();
      doReturn((BigDecimal) null).when(light0).getPrice();
      doReturn((String) null).when(light0).getStaircaseCutOutShape();
      doReturn((BigDecimal) null).when(light0).getValueAddedTaxPercentage();
      doReturn(0.0F).when(light0).getWidth();
      doReturn(false).when(light0).isBackFaceShown();
      doReturn(false).when(light0).isDeformable();
      doReturn(false).when(light0).isDoorOrWindow();
      doReturn(false).when(light0).isMovable();
      doReturn(false).when(light0).isResizable();
      doReturn(false).when(light0).isTexturable();
      HomeLight homeLight0 = new HomeLight(light0);
      float float0 = (-1.0F);
      homeLight0.setElevation((-1.0F));
      PropertyChangeListener propertyChangeListener0 = mock(PropertyChangeListener.class, new ViolatedAssumptionAnswer());
      PropertyChangeListenerProxy propertyChangeListenerProxy0 = new PropertyChangeListenerProxy("uV-\"Kq7`%Z|o0@g&", propertyChangeListener0);
      homeLight0.addPropertyChangeListener(propertyChangeListenerProxy0);
      homeLight0.isBottomRightPointAt((-1.0F), (-1.0F), (-1.0F));
      homeLight0.setNameAngle((-1.0F));
      homeLight0.setY((-1098.0F));
      // Undeclared exception!
      try { 
        homeLight0.setDepth(1.0F);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Piece isn't resizable
         //
         verifyException("com.eteks.sweethome3d.model.HomePieceOfFurniture", e);
      }
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      LightSource[] lightSourceArray0 = new LightSource[8];
      URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      URL uRL0 = MockURL.URL("s<7]@ykxs+ 0`a ", (String) null, (-1666), "", uRLStreamHandler0);
      TemporaryURLContent temporaryURLContent0 = new TemporaryURLContent(uRL0);
      BigDecimal bigDecimal0 = BigDecimal.TEN;
      CatalogLight catalogLight0 = new CatalogLight("\"<xp|JAv^\"<^Qh{/~", "s<7]@ykxs+ 0`a ", "s<7]@ykxs+ 0`a ", temporaryURLContent0, temporaryURLContent0, temporaryURLContent0, (-611.6462F), 1.7441415F, 0.5F, (-897.795F), false, lightSourceArray0, "", (float[][]) null, "P'HZa~G", false, false, false, bigDecimal0, bigDecimal0, "");
      HomeLight homeLight0 = new HomeLight(catalogLight0);
      HomeLight homeLight1 = homeLight0.clone();
      HomeLight homeLight2 = homeLight1.clone();
      homeLight1.isBottomRightPointAt((-1180.51F), 0.5F, 3.4028235E38F);
      homeLight2.setNameAngle(0.5F);
      homeLight2.isBackFaceShown();
      HomeLight homeLight3 = new HomeLight(homeLight2);
      homeLight3.setMovable(false);
      homeLight1.getIcon();
      // Undeclared exception!
      try { 
        homeLight0.setDepth((-611.6462F));
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Piece isn't resizable
         //
         verifyException("com.eteks.sweethome3d.model.HomePieceOfFurniture", e);
      }
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      String[] stringArray0 = new String[8];
      stringArray0[0] = "";
      Float float0 = new Float((-1729.3374F));
      URLContent uRLContent0 = new URLContent((URL) null);
      Sash[] sashArray0 = new Sash[8];
      Sash sash0 = new Sash((-1.0F), (-10.917348F), (-368.692F), (-368.692F), 0.0F);
      sashArray0[5] = sash0;
      Sash sash1 = new Sash((-1485.2021F), (-368.692F), (-1.0F), (-10.917348F), (-1729.3374F));
      sashArray0[6] = sash1;
      float[][] floatArray0 = new float[6][1];
      float[] floatArray1 = new float[3];
      floatArray0[0] = floatArray1;
      float[] floatArray2 = new float[3];
      floatArray2[2] = (-1.0F);
      floatArray2[1] = (-1.0F);
      floatArray0[1] = floatArray2;
      floatArray0[2] = floatArray1;
      CatalogDoorOrWindow catalogDoorOrWindow0 = new CatalogDoorOrWindow("", "", "", "", stringArray0, (Long) null, float0, uRLContent0, uRLContent0, uRLContent0, (-368.692F), (-368.692F), (-1.0F), (-368.692F), true, (-368.692F), 0.0F, sashArray0, floatArray0, "", true, true, true, (BigDecimal) null, (BigDecimal) null, "");
      HomeDoorOrWindow homeDoorOrWindow0 = new HomeDoorOrWindow(catalogDoorOrWindow0);
      HomePieceOfFurniture.SortableProperty.values();
      homeDoorOrWindow0.getHeight();
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      Integer integer0 = new Integer((-1469));
      FileSystemHandling.shouldAllThrowIOExceptions();
      Light light0 = mock(Light.class, new ViolatedAssumptionAnswer());
      doReturn((LightSource[]) null).when(light0).getLightSources();
      doReturn((Integer) null).when(light0).getColor();
      doReturn((String) null).when(light0).getCurrency();
      doReturn(0.0F).when(light0).getDepth();
      doReturn((String) null).when(light0).getDescription();
      doReturn(0.0F).when(light0).getElevation();
      doReturn(0.0F).when(light0).getHeight();
      doReturn((Content) null).when(light0).getIcon();
      doReturn((Content) null).when(light0).getModel();
      doReturn((float[][]) null).when(light0).getModelRotation();
      doReturn((String) null).when(light0).getName();
      doReturn((Content) null).when(light0).getPlanIcon();
      doReturn((BigDecimal) null).when(light0).getPrice();
      doReturn((String) null).when(light0).getStaircaseCutOutShape();
      doReturn((BigDecimal) null).when(light0).getValueAddedTaxPercentage();
      doReturn(0.0F).when(light0).getWidth();
      doReturn(false).when(light0).isBackFaceShown();
      doReturn(false).when(light0).isDeformable();
      doReturn(false).when(light0).isDoorOrWindow();
      doReturn(false).when(light0).isMovable();
      doReturn(false).when(light0).isResizable();
      doReturn(false).when(light0).isTexturable();
      HomeLight homeLight0 = new HomeLight(light0);
      homeLight0.setElevation((-1.0F));
      homeLight0.setNameAngle(0.6792272F);
      homeLight0.setY((-1.0F));
      homeLight0.getLevel();
      homeLight0.getY();
      HomeLight homeLight1 = homeLight0.clone();
      homeLight1.getElevation();
      homeLight0.isModelMirrored();
      System.setCurrentTimeMillis((-1469));
      homeLight0.getCatalogId();
      homeLight1.getNameAngle();
      homeLight0.isBottomLeftPointAt((-1.0F), 64.369F, (-1.0F));
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      LightSource[] lightSourceArray0 = new LightSource[2];
      LightSource lightSource0 = new LightSource((-1.0F), 1431655765, 700.4569F, 1431655765);
      lightSourceArray0[1] = lightSource0;
      Integer integer0 = new Integer(1431655765);
      Light light0 = mock(Light.class, new ViolatedAssumptionAnswer());
      doReturn((LightSource[]) null).when(light0).getLightSources();
      doReturn((Integer) null).when(light0).getColor();
      doReturn((String) null).when(light0).getCurrency();
      doReturn(0.0F).when(light0).getDepth();
      doReturn((String) null).when(light0).getDescription();
      doReturn(0.0F).when(light0).getElevation();
      doReturn(0.0F).when(light0).getHeight();
      doReturn((Content) null).when(light0).getIcon();
      doReturn((Content) null).when(light0).getModel();
      doReturn((float[][]) null).when(light0).getModelRotation();
      doReturn((String) null).when(light0).getName();
      doReturn((Content) null).when(light0).getPlanIcon();
      doReturn((BigDecimal) null).when(light0).getPrice();
      doReturn((String) null).when(light0).getStaircaseCutOutShape();
      doReturn((BigDecimal) null).when(light0).getValueAddedTaxPercentage();
      doReturn(0.0F).when(light0).getWidth();
      doReturn(false).when(light0).isBackFaceShown();
      doReturn(false).when(light0).isDeformable();
      doReturn(false).when(light0).isDoorOrWindow();
      doReturn(false).when(light0).isMovable();
      doReturn(false).when(light0).isResizable();
      doReturn(false).when(light0).isTexturable();
      HomeLight homeLight0 = new HomeLight(light0);
      homeLight0.isPointAt((-1.0F), 679.4F, 700.4569F);
      homeLight0.setY((-237.43F));
      homeLight0.getY();
      homeLight0.getElevation();
      homeLight0.setNameAngle((-1.0F));
      homeLight0.isBottomLeftPointAt((-1.0F), (-1.0F), (-237.43F));
      homeLight0.getLevel();
      // Undeclared exception!
      try { 
        homeLight0.setWidth(1431655765);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Piece isn't resizable
         //
         verifyException("com.eteks.sweethome3d.model.HomePieceOfFurniture", e);
      }
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      Light light0 = mock(Light.class, new ViolatedAssumptionAnswer());
      doReturn((LightSource[]) null).when(light0).getLightSources();
      doReturn((Integer) null).when(light0).getColor();
      doReturn((String) null).when(light0).getCurrency();
      doReturn(0.0F).when(light0).getDepth();
      doReturn((String) null).when(light0).getDescription();
      doReturn(0.0F).when(light0).getElevation();
      doReturn(0.0F).when(light0).getHeight();
      doReturn((Content) null).when(light0).getIcon();
      doReturn((Content) null).when(light0).getModel();
      doReturn((float[][]) null).when(light0).getModelRotation();
      doReturn((String) null).when(light0).getName();
      doReturn((Content) null).when(light0).getPlanIcon();
      doReturn((BigDecimal) null).when(light0).getPrice();
      doReturn((String) null).when(light0).getStaircaseCutOutShape();
      doReturn((BigDecimal) null).when(light0).getValueAddedTaxPercentage();
      doReturn(0.0F).when(light0).getWidth();
      doReturn(false).when(light0).isBackFaceShown();
      doReturn(false).when(light0).isDeformable();
      doReturn(false).when(light0).isDoorOrWindow();
      doReturn(false).when(light0).isMovable();
      doReturn(false).when(light0).isResizable();
      doReturn(false).when(light0).isTexturable();
      Integer.valueOf((-2369));
      HomeLight homeLight0 = new HomeLight(light0);
      HomeLight homeLight1 = homeLight0.clone();
      homeLight1.isBackFaceShown();
      homeLight0.isBackFaceShown();
      homeLight1.setMovable(true);
      homeLight0.getValueAddedTax();
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      String[] stringArray0 = new String[8];
      stringArray0[0] = "";
      Float float0 = new Float((-1729.3374F));
      URLContent uRLContent0 = new URLContent((URL) null);
      Sash[] sashArray0 = new Sash[8];
      Sash sash0 = new Sash((-1.0F), 0.3926991F, (-368.692F), (-368.692F), 2.0F);
      sashArray0[5] = sash0;
      Sash sash1 = new Sash((-1485.2021F), (-368.692F), (-1.0F), 0.3926991F, (-1729.3374F));
      sashArray0[6] = sash1;
      Sash sash2 = new Sash((-368.692F), (-1485.2021F), (-1.0F), (-279.02225F), 2.0F);
      float[][] floatArray0 = new float[3][1];
      float[] floatArray1 = new float[3];
      floatArray1[2] = (-1.0F);
      floatArray0[0] = floatArray1;
      float[] floatArray2 = new float[3];
      floatArray2[0] = (-1.0F);
      floatArray2[1] = (-1.0F);
      floatArray2[2] = (-1.0F);
      floatArray0[1] = floatArray2;
      floatArray0[2] = floatArray1;
      CatalogDoorOrWindow catalogDoorOrWindow0 = new CatalogDoorOrWindow("", "", "", "", stringArray0, (Long) null, float0, uRLContent0, uRLContent0, uRLContent0, (-368.692F), (-368.692F), (-1.0F), (-368.692F), true, (-368.692F), 0.0F, sashArray0, floatArray0, "", true, true, true, (BigDecimal) null, (BigDecimal) null, "");
      HomeDoorOrWindow homeDoorOrWindow0 = new HomeDoorOrWindow(catalogDoorOrWindow0);
      HomeDoorOrWindow homeDoorOrWindow1 = homeDoorOrWindow0.clone();
      homeDoorOrWindow1.setNameXOffset((-15.475195F));
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      Long long0 = new Long(0L);
      Long long1 = Long.getLong("com.eteks.sweethome3d.model.HomeDoorOrWindow", long0);
      Float float0 = new Float((double) 0L);
      Sash[] sashArray0 = new Sash[2];
      Sash sash0 = new Sash(991.0187F, 0.0F, (-1666.0F), 0.0F, (-1666.0F));
      sashArray0[0] = sash0;
      Sash sash1 = new Sash(0.0F, 0.0F, 0.0F, (-201.17F), 0.3926991F);
      sashArray0[1] = sash1;
      float[][] floatArray0 = new float[4][2];
      float[] floatArray1 = new float[4];
      floatArray1[0] = 0.0F;
      floatArray1[1] = 991.0187F;
      floatArray1[2] = 991.0187F;
      floatArray1[3] = 0.0F;
      floatArray0[0] = floatArray1;
      float[] floatArray2 = new float[3];
      floatArray2[0] = 991.0187F;
      floatArray2[1] = (-201.17F);
      floatArray2[2] = 0.3926991F;
      floatArray0[1] = floatArray2;
      float[] floatArray3 = new float[9];
      floatArray3[0] = 991.0187F;
      floatArray3[1] = (float) 0L;
      floatArray3[2] = (-201.17F);
      floatArray3[3] = (-1.0F);
      floatArray3[4] = 0.0F;
      floatArray3[5] = 0.0F;
      floatArray3[6] = (-1666.0F);
      floatArray3[7] = (-1666.0F);
      floatArray3[8] = (-1666.0F);
      floatArray0[2] = floatArray3;
      float[] floatArray4 = new float[0];
      floatArray0[3] = floatArray4;
      BigInteger bigInteger0 = BigInteger.ZERO;
      BigDecimal bigDecimal0 = new BigDecimal(bigInteger0);
      CatalogDoorOrWindow catalogDoorOrWindow0 = new CatalogDoorOrWindow("com.eteks.sweethome3d.model.TextStyle", "com.eteks.sweethome3d.model.TextStyle", "com.eteks.sweethome3d.model.HomePieceOfFurniture$17", "com.eteks.sweethome3d.model.HomePieceOfFurniture$17", (String[]) null, long1, float0, (Content) null, (Content) null, (Content) null, 0L, 0L, 0.0F, 0.0F, false, (-201.17F), 0L, sashArray0, floatArray0, "2.", true, false, false, bigDecimal0, bigDecimal0, "com.eteks.sweethome3d.model.TextStyle");
      catalogDoorOrWindow0.getWallThickness();
      CatalogDoorOrWindow catalogDoorOrWindow1 = new CatalogDoorOrWindow("TEXTURE", "java.version", "", (Content) null, (Content) null, (Content) null, 1.0F, 0.5F, 0.5F, 672.42474F, true, 0.0F, (-1.0F), sashArray0, floatArray0, "CRCKF", false, true, false, bigDecimal0, bigDecimal0, "");
      catalogDoorOrWindow1.getWallDistance();
      catalogDoorOrWindow0.getSashes();
      HomeDoorOrWindow homeDoorOrWindow0 = new HomeDoorOrWindow(catalogDoorOrWindow1);
      homeDoorOrWindow0.isTexturable();
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      Light light0 = mock(Light.class, new ViolatedAssumptionAnswer());
      doReturn((LightSource[]) null).when(light0).getLightSources();
      doReturn((Integer) null).when(light0).getColor();
      doReturn((String) null).when(light0).getCurrency();
      doReturn(0.0F).when(light0).getDepth();
      doReturn((String) null).when(light0).getDescription();
      doReturn(0.0F).when(light0).getElevation();
      doReturn(0.0F).when(light0).getHeight();
      doReturn((Content) null).when(light0).getIcon();
      doReturn((Content) null).when(light0).getModel();
      doReturn((float[][]) null).when(light0).getModelRotation();
      doReturn((String) null).when(light0).getName();
      doReturn((Content) null).when(light0).getPlanIcon();
      doReturn((BigDecimal) null).when(light0).getPrice();
      doReturn((String) null).when(light0).getStaircaseCutOutShape();
      doReturn((BigDecimal) null).when(light0).getValueAddedTaxPercentage();
      doReturn(0.0F).when(light0).getWidth();
      doReturn(false).when(light0).isBackFaceShown();
      doReturn(false).when(light0).isDeformable();
      doReturn(false).when(light0).isDoorOrWindow();
      doReturn(false).when(light0).isMovable();
      doReturn(false).when(light0).isResizable();
      doReturn(false).when(light0).isTexturable();
      Sash sash0 = new Sash(2433.6218F, 0.0F, (-1.0F), (byte)1, 0.0F);
      BigInteger bigInteger0 = BigInteger.ONE;
      BigDecimal bigDecimal0 = new BigDecimal(bigInteger0);
      HomeLight homeLight0 = new HomeLight(light0);
      homeLight0.setY((-172.0F));
      homeLight0.getValueAddedTax();
      HomeLight homeLight1 = homeLight0.clone();
      Float.floatToIntBits((-532.5314F));
      Float.floatToIntBits((-1006296574));
      homeLight0.getLevel();
      homeLight0.setName("f@hfU4hz");
      homeLight0.getShininess();
      Float float0 = new Float(572.7966744129549);
      // Undeclared exception!
      try { 
        homeLight1.setShininess(float0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Piece isn't texturable
         //
         verifyException("com.eteks.sweethome3d.model.HomePieceOfFurniture", e);
      }
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      Integer integer0 = new Integer((-1469));
      FileSystemHandling.shouldAllThrowIOExceptions();
      Light light0 = mock(Light.class, new ViolatedAssumptionAnswer());
      doReturn((Integer) null).when(light0).getColor();
      doReturn((String) null).when(light0).getCurrency();
      doReturn(0.0F).when(light0).getDepth();
      doReturn((String) null).when(light0).getDescription();
      doReturn(0.0F).when(light0).getElevation();
      doReturn(0.0F).when(light0).getHeight();
      doReturn((Content) null).when(light0).getIcon();
      doReturn((Content) null).when(light0).getModel();
      doReturn((float[][]) null).when(light0).getModelRotation();
      doReturn((String) null).when(light0).getName();
      doReturn((Content) null).when(light0).getPlanIcon();
      doReturn((BigDecimal) null).when(light0).getPrice();
      doReturn((String) null).when(light0).getStaircaseCutOutShape();
      doReturn((BigDecimal) null).when(light0).getValueAddedTaxPercentage();
      doReturn(0.0F).when(light0).getWidth();
      doReturn(false).when(light0).isBackFaceShown();
      doReturn(false).when(light0).isDeformable();
      doReturn(false).when(light0).isDoorOrWindow();
      doReturn(false).when(light0).isMovable();
      doReturn(false).when(light0).isResizable();
      doReturn(false).when(light0).isTexturable();
      HomePieceOfFurniture homePieceOfFurniture0 = new HomePieceOfFurniture(light0);
      homePieceOfFurniture0.setDescription("");
      HomePieceOfFurniture homePieceOfFurniture1 = homePieceOfFurniture0.clone();
      homePieceOfFurniture1.setVisible(true);
      homePieceOfFurniture1.getWidth();
      homePieceOfFurniture1.setNameVisible(true);
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      Integer integer0 = new Integer(1431655742);
      Light light0 = mock(Light.class, new ViolatedAssumptionAnswer());
      doReturn((LightSource[]) null).when(light0).getLightSources();
      doReturn((Integer) null).when(light0).getColor();
      doReturn((String) null).when(light0).getCurrency();
      doReturn(0.0F).when(light0).getDepth();
      doReturn((String) null).when(light0).getDescription();
      doReturn(0.0F).when(light0).getElevation();
      doReturn(0.0F).when(light0).getHeight();
      doReturn((Content) null).when(light0).getIcon();
      doReturn((Content) null).when(light0).getModel();
      doReturn((float[][]) null).when(light0).getModelRotation();
      doReturn((String) null).when(light0).getName();
      doReturn((Content) null).when(light0).getPlanIcon();
      doReturn((BigDecimal) null).when(light0).getPrice();
      doReturn((String) null).when(light0).getStaircaseCutOutShape();
      doReturn((BigDecimal) null).when(light0).getValueAddedTaxPercentage();
      doReturn(0.0F).when(light0).getWidth();
      doReturn(false).when(light0).isBackFaceShown();
      doReturn(false).when(light0).isDeformable();
      doReturn(false).when(light0).isDoorOrWindow();
      doReturn(false).when(light0).isMovable();
      doReturn(false).when(light0).isResizable();
      doReturn(false).when(light0).isTexturable();
      HomeLight homeLight0 = new HomeLight(light0);
      homeLight0.setY(1431655742);
      homeLight0.setElevation(1431655742);
      homeLight0.setNameAngle(1431655742);
      homeLight0.setY((-1.0F));
      homeLight0.getLevel();
      homeLight0.isBottomLeftPointAt(2.4503121F, 21.0F, 74.982F);
      homeLight0.setMovable(true);
      homeLight0.setName("Can't create temporary folder ");
      homeLight0.setNameYOffset(2.4503121F);
      HomePieceOfFurniture.SortableProperty.values();
      homeLight0.isAtLevel((Level) null);
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      Integer integer0 = new Integer((-1469));
      FileSystemHandling.shouldAllThrowIOExceptions();
      Light light0 = mock(Light.class, new ViolatedAssumptionAnswer());
      doReturn((Integer) null).when(light0).getColor();
      doReturn((String) null).when(light0).getCurrency();
      doReturn(0.0F).when(light0).getDepth();
      doReturn((String) null).when(light0).getDescription();
      doReturn(0.0F).when(light0).getElevation();
      doReturn(0.0F).when(light0).getHeight();
      doReturn((Content) null).when(light0).getIcon();
      doReturn((Content) null).when(light0).getModel();
      doReturn((float[][]) null).when(light0).getModelRotation();
      doReturn((String) null).when(light0).getName();
      doReturn((Content) null).when(light0).getPlanIcon();
      doReturn((BigDecimal) null).when(light0).getPrice();
      doReturn((String) null).when(light0).getStaircaseCutOutShape();
      doReturn((BigDecimal) null).when(light0).getValueAddedTaxPercentage();
      doReturn(0.0F).when(light0).getWidth();
      doReturn(false).when(light0).isBackFaceShown();
      doReturn(false).when(light0).isDeformable();
      doReturn(false).when(light0).isDoorOrWindow();
      doReturn(false).when(light0).isMovable();
      doReturn(false).when(light0).isResizable();
      doReturn(false).when(light0).isTexturable();
      HomePieceOfFurniture homePieceOfFurniture0 = new HomePieceOfFurniture(light0);
      HomePieceOfFurniture homePieceOfFurniture1 = homePieceOfFurniture0.clone();
      homePieceOfFurniture1.setVisible(true);
      homePieceOfFurniture1.getWidth();
      homePieceOfFurniture1.setNameVisible(true);
      homePieceOfFurniture1.getNameYOffset();
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      Integer integer0 = new Integer(1431655765);
      Integer.valueOf(21);
      Light light0 = mock(Light.class, new ViolatedAssumptionAnswer());
      doReturn((LightSource[]) null).when(light0).getLightSources();
      doReturn((Integer) null).when(light0).getColor();
      doReturn((String) null).when(light0).getCurrency();
      doReturn(0.0F).when(light0).getDepth();
      doReturn((String) null).when(light0).getDescription();
      doReturn(0.0F).when(light0).getElevation();
      doReturn(0.0F).when(light0).getHeight();
      doReturn((Content) null).when(light0).getIcon();
      doReturn((Content) null).when(light0).getModel();
      doReturn((float[][]) null).when(light0).getModelRotation();
      doReturn((String) null).when(light0).getName();
      doReturn((Content) null).when(light0).getPlanIcon();
      doReturn((BigDecimal) null).when(light0).getPrice();
      doReturn((String) null).when(light0).getStaircaseCutOutShape();
      doReturn((BigDecimal) null).when(light0).getValueAddedTaxPercentage();
      doReturn(0.0F).when(light0).getWidth();
      doReturn(false).when(light0).isBackFaceShown();
      doReturn(false).when(light0).isDeformable();
      doReturn(false).when(light0).isDoorOrWindow();
      doReturn(false).when(light0).isMovable();
      doReturn(false).when(light0).isResizable();
      doReturn(false).when(light0).isTexturable();
      BigInteger bigInteger0 = BigInteger.ZERO;
      HomeLight homeLight0 = new HomeLight(light0);
      homeLight0.isTopRightPointAt((-1.0F), 21, 2012.03F);
      homeLight0.getLevel();
      HomeLight homeLight1 = homeLight0.clone();
      homeLight0.setNameYOffset(21);
      homeLight1.getPriceValueAddedTaxIncluded();
      homeLight1.setMovable(false);
      homeLight0.setNameYOffset((-762.977F));
      HomePieceOfFurniture.SortableProperty.values();
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      LightSource[] lightSourceArray0 = new LightSource[2];
      LightSource lightSource0 = new LightSource((-1.0F), (-1.0F), 381.9F, 1431655765);
      LightSource lightSource1 = new LightSource((-1.0F), 381.9F, 700.4569F, 1431655765);
      lightSourceArray0[1] = lightSource1;
      Light light0 = mock(Light.class, new ViolatedAssumptionAnswer());
      doReturn((LightSource[]) null).when(light0).getLightSources();
      doReturn((Integer) null).when(light0).getColor();
      doReturn((String) null).when(light0).getCurrency();
      doReturn(0.0F).when(light0).getDepth();
      doReturn((String) null).when(light0).getDescription();
      doReturn(0.0F).when(light0).getElevation();
      doReturn(0.0F).when(light0).getHeight();
      doReturn((Content) null).when(light0).getIcon();
      doReturn((Content) null).when(light0).getModel();
      doReturn((float[][]) null).when(light0).getModelRotation();
      doReturn((String) null).when(light0).getName();
      doReturn((Content) null).when(light0).getPlanIcon();
      doReturn((BigDecimal) null).when(light0).getPrice();
      doReturn((String) null).when(light0).getStaircaseCutOutShape();
      doReturn((BigDecimal) null).when(light0).getValueAddedTaxPercentage();
      doReturn(0.0F).when(light0).getWidth();
      doReturn(false).when(light0).isBackFaceShown();
      doReturn(false).when(light0).isDeformable();
      doReturn(false).when(light0).isDoorOrWindow();
      doReturn(false).when(light0).isMovable();
      doReturn(false).when(light0).isResizable();
      doReturn(false).when(light0).isTexturable();
      HomeLight homeLight0 = new HomeLight(light0);
      HomeLight homeLight1 = homeLight0.clone();
      homeLight1.getName();
      homeLight0.getLevel();
      HomeLight homeLight2 = homeLight0.clone();
      homeLight1.setAngle(39.0F);
      homeLight2.setDescription("Invalid URL base for JAR entry");
      homeLight2.intersectsRectangle(700.4569F, (-1.0F), 39.0F, (-1.0F));
      BigDecimal bigDecimal0 = BigDecimal.TEN;
      homeLight0.clone();
      homeLight2.setDescription("Invalid URL base for JAR entry");
      homeLight1.isAtLevel((Level) null);
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      Light light0 = mock(Light.class, new ViolatedAssumptionAnswer());
      doReturn((LightSource[]) null).when(light0).getLightSources();
      doReturn((Integer) null).when(light0).getColor();
      doReturn((String) null).when(light0).getCurrency();
      doReturn(0.0F).when(light0).getDepth();
      doReturn((String) null).when(light0).getDescription();
      doReturn(0.0F).when(light0).getElevation();
      doReturn(0.0F).when(light0).getHeight();
      doReturn((Content) null).when(light0).getIcon();
      doReturn((Content) null).when(light0).getModel();
      doReturn((float[][]) null).when(light0).getModelRotation();
      doReturn((String) null).when(light0).getName();
      doReturn((Content) null).when(light0).getPlanIcon();
      doReturn((BigDecimal) null).when(light0).getPrice();
      doReturn((String) null).when(light0).getStaircaseCutOutShape();
      doReturn((BigDecimal) null).when(light0).getValueAddedTaxPercentage();
      doReturn(0.0F).when(light0).getWidth();
      doReturn(false).when(light0).isBackFaceShown();
      doReturn(false).when(light0).isDeformable();
      doReturn(false).when(light0).isDoorOrWindow();
      doReturn(false).when(light0).isMovable();
      doReturn(false).when(light0).isResizable();
      doReturn(false).when(light0).isTexturable();
      Integer integer0 = Integer.valueOf((-2369));
      HomeLight homeLight0 = new HomeLight(light0);
      HomeLight homeLight1 = homeLight0.clone();
      homeLight1.isBackFaceShown();
      homeLight0.isBackFaceShown();
      // Undeclared exception!
      try { 
        homeLight1.setColor(integer0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Piece isn't texturable
         //
         verifyException("com.eteks.sweethome3d.model.HomePieceOfFurniture", e);
      }
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      LightSource[] lightSourceArray0 = new LightSource[2];
      LightSource lightSource0 = new LightSource((-1.0F), (-1.0F), 381.9F, 1431655765);
      LightSource lightSource1 = new LightSource((-1.0F), (-69.47F), 700.4569F, 1431655765);
      lightSourceArray0[1] = lightSource1;
      Integer integer0 = new Integer(1431655765);
      Light light0 = mock(Light.class, new ViolatedAssumptionAnswer());
      doReturn((LightSource[]) null).when(light0).getLightSources();
      doReturn((Integer) null).when(light0).getColor();
      doReturn((String) null).when(light0).getCurrency();
      doReturn(0.0F).when(light0).getDepth();
      doReturn((String) null).when(light0).getDescription();
      doReturn(0.0F).when(light0).getElevation();
      doReturn(0.0F).when(light0).getHeight();
      doReturn((Content) null).when(light0).getIcon();
      doReturn((Content) null).when(light0).getModel();
      doReturn((float[][]) null).when(light0).getModelRotation();
      doReturn((String) null).when(light0).getName();
      doReturn((Content) null).when(light0).getPlanIcon();
      doReturn((BigDecimal) null).when(light0).getPrice();
      doReturn((String) null).when(light0).getStaircaseCutOutShape();
      doReturn((BigDecimal) null).when(light0).getValueAddedTaxPercentage();
      doReturn(0.0F).when(light0).getWidth();
      doReturn(false).when(light0).isBackFaceShown();
      doReturn(false).when(light0).isDeformable();
      doReturn(false).when(light0).isDoorOrWindow();
      doReturn(false).when(light0).isMovable();
      doReturn(false).when(light0).isResizable();
      doReturn(false).when(light0).isTexturable();
      HomeLight homeLight0 = new HomeLight(light0);
      HomeLight homeLight1 = homeLight0.clone();
      homeLight0.containsPoint(2428.0F, (-34.02777F), 1431655765);
      homeLight1.setY(0.5F);
      homeLight1.getValueAddedTax();
      HomeLight homeLight2 = homeLight1.clone();
      homeLight2.getLevel();
      HomeLight homeLight3 = homeLight1.clone();
      HomeLight homeLight4 = homeLight3.clone();
      homeLight3.setAngle(414.72678F);
      homeLight0.setName("o+5");
      Integer.valueOf(1431655765);
      Integer integer1 = new Integer((-11));
      // Undeclared exception!
      try { 
        homeLight4.setColor((Integer) null);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Piece isn't texturable
         //
         verifyException("com.eteks.sweethome3d.model.HomePieceOfFurniture", e);
      }
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      Integer integer0 = new Integer(1431655765);
      Light light0 = mock(Light.class, new ViolatedAssumptionAnswer());
      doReturn((LightSource[]) null).when(light0).getLightSources();
      doReturn((Integer) null).when(light0).getColor();
      doReturn((String) null).when(light0).getCurrency();
      doReturn(0.0F).when(light0).getDepth();
      doReturn((String) null).when(light0).getDescription();
      doReturn(0.0F).when(light0).getElevation();
      doReturn(0.0F).when(light0).getHeight();
      doReturn((Content) null).when(light0).getIcon();
      doReturn((Content) null).when(light0).getModel();
      doReturn((float[][]) null).when(light0).getModelRotation();
      doReturn((String) null).when(light0).getName();
      doReturn((Content) null).when(light0).getPlanIcon();
      doReturn((BigDecimal) null).when(light0).getPrice();
      doReturn((String) null).when(light0).getStaircaseCutOutShape();
      doReturn((BigDecimal) null).when(light0).getValueAddedTaxPercentage();
      doReturn(0.0F).when(light0).getWidth();
      doReturn(false).when(light0).isBackFaceShown();
      doReturn(false).when(light0).isDeformable();
      doReturn(false).when(light0).isDoorOrWindow();
      doReturn(false).when(light0).isMovable();
      doReturn(false).when(light0).isResizable();
      doReturn(false).when(light0).isTexturable();
      byte[] byteArray0 = new byte[5];
      byteArray0[1] = (byte)1;
      HomeLight homeLight0 = new HomeLight(light0);
      homeLight0.setY(1431655765);
      homeLight0.getValueAddedTax();
      homeLight0.getName();
      homeLight0.getLevel();
      HomeLight homeLight1 = homeLight0.clone();
      homeLight1.setAngle(39.641678F);
      homeLight0.setY(430.6548F);
      homeLight0.getValueAddedTax();
      homeLight1.getLevel();
      homeLight0.setX((-44.352943F));
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "");
      homeLight0.intersectsRectangle(1431655765, 0.5F, (-2812.7058F), 430.6548F);
      homeLight1.getGroundElevation();
      float float0 = new Float(39.641678F);
      homeLight1.setX(0.0F);
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      Light light0 = mock(Light.class, new ViolatedAssumptionAnswer());
      doReturn((LightSource[]) null).when(light0).getLightSources();
      doReturn((Integer) null).when(light0).getColor();
      doReturn((String) null).when(light0).getCurrency();
      doReturn(0.0F).when(light0).getDepth();
      doReturn((String) null).when(light0).getDescription();
      doReturn(0.0F).when(light0).getElevation();
      doReturn(0.0F).when(light0).getHeight();
      doReturn((Content) null).when(light0).getIcon();
      doReturn((Content) null).when(light0).getModel();
      doReturn((float[][]) null).when(light0).getModelRotation();
      doReturn((String) null).when(light0).getName();
      doReturn((Content) null).when(light0).getPlanIcon();
      doReturn((BigDecimal) null).when(light0).getPrice();
      doReturn((String) null).when(light0).getStaircaseCutOutShape();
      doReturn((BigDecimal) null).when(light0).getValueAddedTaxPercentage();
      doReturn(0.0F).when(light0).getWidth();
      doReturn(false).when(light0).isBackFaceShown();
      doReturn(false).when(light0).isDeformable();
      doReturn(false).when(light0).isDoorOrWindow();
      doReturn(false).when(light0).isMovable();
      doReturn(false).when(light0).isResizable();
      doReturn(false).when(light0).isTexturable();
      HomeLight homeLight0 = new HomeLight(light0);
      Float.compare(254.82954F, 254.82954F);
      Float.floatToIntBits((byte) (-32));
      HomeLight homeLight1 = homeLight0.clone();
      homeLight0.isPointAt((-1.0F), 450.0388F, 6.0181546F);
      Float.floatToIntBits(402.91016F);
      homeLight1.setVisible(false);
      homeLight0.getWidth();
      homeLight0.setNameVisible(true);
      homeLight1.getGroundElevation();
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      LightSource[] lightSourceArray0 = new LightSource[2];
      URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      URL uRL0 = MockURL.URL("s<7]@ykxs+ 0`a ", (String) null, (-1663), "", uRLStreamHandler0);
      TemporaryURLContent temporaryURLContent0 = new TemporaryURLContent(uRL0);
      BigDecimal bigDecimal0 = BigDecimal.TEN;
      CatalogLight catalogLight0 = new CatalogLight("\"<xp|JAv^\"<^Qh{/~", "s<7]@ykxs+ 0`a ", "s<7]@ykxs+ 0`a ", temporaryURLContent0, temporaryURLContent0, temporaryURLContent0, (-611.6462F), 1.7441415F, 0.5F, (-897.795F), true, lightSourceArray0, "", (float[][]) null, "P'HZa~G", true, true, true, bigDecimal0, bigDecimal0, "");
      HomeLight homeLight0 = new HomeLight(catalogLight0);
      homeLight0.clone();
      HomeLight homeLight1 = homeLight0.clone();
      homeLight1.setWidth((-1663));
      homeLight0.setTexture((HomeTexture) null);
      homeLight1.setWidth((-1.0F));
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      Light light0 = mock(Light.class, new ViolatedAssumptionAnswer());
      doReturn((LightSource[]) null).when(light0).getLightSources();
      doReturn((Integer) null).when(light0).getColor();
      doReturn((String) null).when(light0).getCurrency();
      doReturn(0.0F).when(light0).getDepth();
      doReturn((String) null).when(light0).getDescription();
      doReturn(0.0F).when(light0).getElevation();
      doReturn(0.0F).when(light0).getHeight();
      doReturn((Content) null).when(light0).getIcon();
      doReturn((Content) null).when(light0).getModel();
      doReturn((float[][]) null).when(light0).getModelRotation();
      doReturn((String) null).when(light0).getName();
      doReturn((Content) null).when(light0).getPlanIcon();
      doReturn((BigDecimal) null).when(light0).getPrice();
      doReturn((String) null).when(light0).getStaircaseCutOutShape();
      doReturn((BigDecimal) null).when(light0).getValueAddedTaxPercentage();
      doReturn(0.0F).when(light0).getWidth();
      doReturn(false).when(light0).isBackFaceShown();
      doReturn(false).when(light0).isDeformable();
      doReturn(false).when(light0).isDoorOrWindow();
      doReturn(false).when(light0).isMovable();
      doReturn(false).when(light0).isResizable();
      doReturn(false).when(light0).isTexturable();
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)20;
      byteArray0[1] = (byte)1;
      byteArray0[2] = (byte) (-113);
      byteArray0[3] = (byte) (-32);
      byteArray0[4] = (byte)62;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      HomeLight homeLight0 = new HomeLight(light0);
      homeLight0.setY((-1.0F));
      homeLight0.getValueAddedTax();
      homeLight0.setVisible(false);
      homeLight0.setNameStyle((TextStyle) null);
      homeLight0.getCurrency();
      float float0 = 0.0F;
      // Undeclared exception!
      try { 
        homeLight0.setHeight(0.0F);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Piece isn't resizable
         //
         verifyException("com.eteks.sweethome3d.model.HomePieceOfFurniture", e);
      }
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      Light light0 = mock(Light.class, new ViolatedAssumptionAnswer());
      doReturn((LightSource[]) null).when(light0).getLightSources();
      doReturn((Integer) null).when(light0).getColor();
      doReturn((String) null).when(light0).getCurrency();
      doReturn(0.0F).when(light0).getDepth();
      doReturn((String) null).when(light0).getDescription();
      doReturn(0.0F).when(light0).getElevation();
      doReturn(0.0F).when(light0).getHeight();
      doReturn((Content) null).when(light0).getIcon();
      doReturn((Content) null).when(light0).getModel();
      doReturn((float[][]) null).when(light0).getModelRotation();
      doReturn((String) null).when(light0).getName();
      doReturn((Content) null).when(light0).getPlanIcon();
      doReturn((BigDecimal) null).when(light0).getPrice();
      doReturn((String) null).when(light0).getStaircaseCutOutShape();
      doReturn((BigDecimal) null).when(light0).getValueAddedTaxPercentage();
      doReturn(0.0F).when(light0).getWidth();
      doReturn(false).when(light0).isBackFaceShown();
      doReturn(false).when(light0).isDeformable();
      doReturn(false).when(light0).isDoorOrWindow();
      doReturn(false).when(light0).isMovable();
      doReturn(false).when(light0).isResizable();
      doReturn(false).when(light0).isTexturable();
      HomeLight homeLight0 = new HomeLight(light0);
      homeLight0.setElevation((-1.0F));
      FileSystemHandling.shouldAllThrowIOExceptions();
      HomeLight homeLight1 = homeLight0.clone();
      homeLight1.getLevel();
      homeLight1.setName((String) null);
      homeLight0.setNameYOffset(0.5F);
      BigDecimal bigDecimal0 = BigDecimal.TEN;
      HomeLight homeLight2 = homeLight1.clone();
      homeLight0.setDescription((String) null);
      homeLight1.getDescription();
      homeLight2.isNameCenterPointAt(3205.479F, (-1.0F), 3205.479F);
      homeLight2.getNameStyle();
      homeLight1.isAtLevel((Level) null);
      homeLight0.getDepth();
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      Light light0 = mock(Light.class, new ViolatedAssumptionAnswer());
      doReturn((LightSource[]) null).when(light0).getLightSources();
      doReturn((Integer) null).when(light0).getColor();
      doReturn((String) null).when(light0).getCurrency();
      doReturn(0.0F).when(light0).getDepth();
      doReturn((String) null).when(light0).getDescription();
      doReturn(0.0F).when(light0).getElevation();
      doReturn(0.0F).when(light0).getHeight();
      doReturn((Content) null).when(light0).getIcon();
      doReturn((Content) null).when(light0).getModel();
      doReturn((float[][]) null).when(light0).getModelRotation();
      doReturn((String) null).when(light0).getName();
      doReturn((Content) null).when(light0).getPlanIcon();
      doReturn((BigDecimal) null).when(light0).getPrice();
      doReturn((String) null).when(light0).getStaircaseCutOutShape();
      doReturn((BigDecimal) null).when(light0).getValueAddedTaxPercentage();
      doReturn(0.0F).when(light0).getWidth();
      doReturn(false).when(light0).isBackFaceShown();
      doReturn(false).when(light0).isDeformable();
      doReturn(false).when(light0).isDoorOrWindow();
      doReturn(false).when(light0).isMovable();
      doReturn(false).when(light0).isResizable();
      doReturn(false).when(light0).isTexturable();
      HomeLight homeLight0 = new HomeLight(light0);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Float.compare(254.82954F, 254.82954F);
      homeLight0.setName("k.u3Alfr");
      TextStyle textStyle0 = new TextStyle(254.82954F);
      homeLight0.setNameStyle(textStyle0);
      Float.floatToIntBits((byte) (-32));
      HomeLight homeLight1 = homeLight0.clone();
      Float.floatToIntBits(402.91016F);
      homeLight0.getWidth();
      homeLight0.setNameVisible(true);
      homeLight1.getGroundElevation();
      Integer integer0 = new Integer(933);
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      Light light0 = mock(Light.class, new ViolatedAssumptionAnswer());
      doReturn((LightSource[]) null).when(light0).getLightSources();
      doReturn((Integer) null).when(light0).getColor();
      doReturn((String) null).when(light0).getCurrency();
      doReturn(0.0F).when(light0).getDepth();
      doReturn((String) null).when(light0).getDescription();
      doReturn(0.0F).when(light0).getElevation();
      doReturn(0.0F).when(light0).getHeight();
      doReturn((Content) null).when(light0).getIcon();
      doReturn((Content) null).when(light0).getModel();
      doReturn((float[][]) null).when(light0).getModelRotation();
      doReturn((String) null).when(light0).getName();
      doReturn((Content) null).when(light0).getPlanIcon();
      doReturn((BigDecimal) null).when(light0).getPrice();
      doReturn((String) null).when(light0).getStaircaseCutOutShape();
      doReturn((BigDecimal) null).when(light0).getValueAddedTaxPercentage();
      doReturn(0.0F).when(light0).getWidth();
      doReturn(false).when(light0).isBackFaceShown();
      doReturn(false).when(light0).isDeformable();
      doReturn(false).when(light0).isDoorOrWindow();
      doReturn(false).when(light0).isMovable();
      doReturn(false).when(light0).isResizable();
      doReturn(false).when(light0).isTexturable();
      HomeLight homeLight0 = new HomeLight(light0);
      homeLight0.getDescription();
      Level level0 = new Level((String) null, (-119.7F), (-119.7F), 593.7749F);
      homeLight0.isPointAt((-3722.32F), 904.7602F, 904.7602F);
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      LightSource[] lightSourceArray0 = new LightSource[2];
      LightSource lightSource0 = new LightSource((-1.0F), (-1457.99F), 382.40326F, 1431655765);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, false, false);
      LightSource lightSource1 = new LightSource((-1.0F), (-69.47F), 700.4569F, (-853));
      lightSourceArray0[1] = lightSource1;
      Integer integer0 = new Integer((-853));
      Light light0 = mock(Light.class, new ViolatedAssumptionAnswer());
      doReturn((LightSource[]) null).when(light0).getLightSources();
      doReturn((Integer) null).when(light0).getColor();
      doReturn((String) null).when(light0).getCurrency();
      doReturn(0.0F).when(light0).getDepth();
      doReturn((String) null).when(light0).getDescription();
      doReturn(0.0F).when(light0).getElevation();
      doReturn(0.0F).when(light0).getHeight();
      doReturn((Content) null).when(light0).getIcon();
      doReturn((Content) null).when(light0).getModel();
      doReturn((float[][]) null).when(light0).getModelRotation();
      doReturn((String) null).when(light0).getName();
      doReturn((Content) null).when(light0).getPlanIcon();
      doReturn((BigDecimal) null).when(light0).getPrice();
      doReturn((String) null).when(light0).getStaircaseCutOutShape();
      doReturn((BigDecimal) null).when(light0).getValueAddedTaxPercentage();
      doReturn(0.0F).when(light0).getWidth();
      doReturn(false).when(light0).isBackFaceShown();
      doReturn(false).when(light0).isDeformable();
      doReturn(false).when(light0).isDoorOrWindow();
      doReturn(false).when(light0).isMovable();
      doReturn(false).when(light0).isResizable();
      doReturn(false).when(light0).isTexturable();
      byte[] byteArray0 = new byte[5];
      byteArray0[1] = (byte)1;
      HomeLight homeLight0 = new HomeLight(light0);
      homeLight0.setY((-853));
      homeLight0.getValueAddedTax();
      homeLight0.getName();
      homeLight0.getLevel();
      HomeLight homeLight1 = homeLight0.clone();
      homeLight1.setAngle(39.0F);
      homeLight0.setName("LEVEL");
      Integer.valueOf((int) (byte)0);
      Integer integer1 = Integer.valueOf((int) (byte)62);
      Integer.valueOf((-87));
      // Undeclared exception!
      try { 
        homeLight1.setColor(integer1);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Piece isn't texturable
         //
         verifyException("com.eteks.sweethome3d.model.HomePieceOfFurniture", e);
      }
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      LightSource[] lightSourceArray0 = new LightSource[2];
      Integer integer0 = new Integer(1431655765);
      Light light0 = mock(Light.class, new ViolatedAssumptionAnswer());
      doReturn((LightSource[]) null).when(light0).getLightSources();
      doReturn((Integer) null).when(light0).getColor();
      doReturn((String) null).when(light0).getCurrency();
      doReturn(0.0F).when(light0).getDepth();
      doReturn((String) null).when(light0).getDescription();
      doReturn(0.0F).when(light0).getElevation();
      doReturn(0.0F).when(light0).getHeight();
      doReturn((Content) null).when(light0).getIcon();
      doReturn((Content) null).when(light0).getModel();
      doReturn((float[][]) null).when(light0).getModelRotation();
      doReturn((String) null).when(light0).getName();
      doReturn((Content) null).when(light0).getPlanIcon();
      doReturn((BigDecimal) null).when(light0).getPrice();
      doReturn((String) null).when(light0).getStaircaseCutOutShape();
      doReturn((BigDecimal) null).when(light0).getValueAddedTaxPercentage();
      doReturn(0.0F).when(light0).getWidth();
      doReturn(false).when(light0).isBackFaceShown();
      doReturn(false).when(light0).isDeformable();
      doReturn(false).when(light0).isDoorOrWindow();
      doReturn(false).when(light0).isMovable();
      doReturn(false).when(light0).isResizable();
      doReturn(false).when(light0).isTexturable();
      HomeLight homeLight0 = new HomeLight(light0);
      HomeLight homeLight1 = homeLight0.clone();
      homeLight1.getName();
      homeLight0.getLevel();
      HomeLight homeLight2 = homeLight0.clone();
      homeLight1.setAngle(39.0F);
      homeLight2.setName("Invalid URL base for JAR entry");
      homeLight2.setDescription("Invalid URL base for JAR entry");
      homeLight0.setNameXOffset(39.0F);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, (String) null);
      homeLight2.intersectsRectangle(381.9F, (-1.0F), 39.0F, 1431655765);
      BigDecimal bigDecimal0 = BigDecimal.TEN;
      HomeLight homeLight3 = homeLight0.clone();
      homeLight2.setDescription("Invalid URL base for JAR entry");
      homeLight0.getTexture();
      homeLight1.isAtLevel((Level) null);
      homeLight2.getX();
      homeLight2.isAtLevel((Level) null);
      homeLight0.isDoorOrWindow();
      homeLight3.getHeight();
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      HomePieceOfFurniture.SortableProperty homePieceOfFurniture_SortableProperty0 = HomePieceOfFurniture.SortableProperty.ELEVATION;
      HomePieceOfFurniture.getFurnitureComparator(homePieceOfFurniture_SortableProperty0);
      String string0 = null;
      // Undeclared exception!
      try { 
        HomePieceOfFurniture.Property.valueOf((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Name is null
         //
         verifyException("java.lang.Enum", e);
      }
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      LightSource[] lightSourceArray0 = new LightSource[2];
      LightSource lightSource0 = new LightSource((-1.0F), 1431655765, 700.4569F, 1431655765);
      lightSourceArray0[1] = lightSource0;
      Integer integer0 = new Integer(1431655765);
      Light light0 = mock(Light.class, new ViolatedAssumptionAnswer());
      doReturn((LightSource[]) null).when(light0).getLightSources();
      doReturn((Integer) null).when(light0).getColor();
      doReturn((String) null).when(light0).getCurrency();
      doReturn(0.0F).when(light0).getDepth();
      doReturn((String) null).when(light0).getDescription();
      doReturn(0.0F).when(light0).getElevation();
      doReturn(0.0F).when(light0).getHeight();
      doReturn((Content) null).when(light0).getIcon();
      doReturn((Content) null).when(light0).getModel();
      doReturn((float[][]) null).when(light0).getModelRotation();
      doReturn((String) null).when(light0).getName();
      doReturn((Content) null).when(light0).getPlanIcon();
      doReturn((BigDecimal) null).when(light0).getPrice();
      doReturn((String) null).when(light0).getStaircaseCutOutShape();
      doReturn((BigDecimal) null).when(light0).getValueAddedTaxPercentage();
      doReturn(0.0F).when(light0).getWidth();
      doReturn(false).when(light0).isBackFaceShown();
      doReturn(false).when(light0).isDeformable();
      doReturn(false).when(light0).isDoorOrWindow();
      doReturn(false).when(light0).isMovable();
      doReturn(false).when(light0).isResizable();
      doReturn(false).when(light0).isTexturable();
      HomeLight homeLight0 = new HomeLight(light0);
      homeLight0.getTexture();
      homeLight0.setAngle(0.0F);
      homeLight0.setName("");
      Integer.valueOf((-1416));
      // Undeclared exception!
      try { 
        homeLight0.setColor(integer0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Piece isn't texturable
         //
         verifyException("com.eteks.sweethome3d.model.HomePieceOfFurniture", e);
      }
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      LightSource[] lightSourceArray0 = new LightSource[2];
      LightSource lightSource0 = new LightSource((-1.0F), (-1457.99F), 381.9F, 1431655765);
      lightSourceArray0[0] = lightSource0;
      LightSource lightSource1 = new LightSource((-1.0F), (-69.47F), 700.4569F, (-853));
      lightSourceArray0[1] = lightSource1;
      Integer integer0 = new Integer((-853));
      Light light0 = mock(Light.class, new ViolatedAssumptionAnswer());
      doReturn((LightSource[]) null).when(light0).getLightSources();
      doReturn((Integer) null).when(light0).getColor();
      doReturn((String) null).when(light0).getCurrency();
      doReturn(0.0F).when(light0).getDepth();
      doReturn((String) null).when(light0).getDescription();
      doReturn(0.0F).when(light0).getElevation();
      doReturn(0.0F).when(light0).getHeight();
      doReturn((Content) null).when(light0).getIcon();
      doReturn((Content) null).when(light0).getModel();
      doReturn((float[][]) null).when(light0).getModelRotation();
      doReturn((String) null).when(light0).getName();
      doReturn((Content) null).when(light0).getPlanIcon();
      doReturn((BigDecimal) null).when(light0).getPrice();
      doReturn((String) null).when(light0).getStaircaseCutOutShape();
      doReturn((BigDecimal) null).when(light0).getValueAddedTaxPercentage();
      doReturn(0.0F).when(light0).getWidth();
      doReturn(false).when(light0).isBackFaceShown();
      doReturn(false).when(light0).isDeformable();
      doReturn(false).when(light0).isDoorOrWindow();
      doReturn(false).when(light0).isMovable();
      doReturn(false).when(light0).isResizable();
      doReturn(false).when(light0).isTexturable();
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)13;
      byteArray0[1] = (byte)1;
      byteArray0[2] = (byte)13;
      byteArray0[3] = (byte) (-32);
      byteArray0[4] = (byte)62;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      HomeLight homeLight0 = new HomeLight(light0);
      homeLight0.setY((-1.0F));
      homeLight0.getValueAddedTax();
      homeLight0.getValueAddedTax();
      homeLight0.getName();
      homeLight0.getLevel();
      HomeLight homeLight1 = homeLight0.clone();
      homeLight1.setName((String) null);
      homeLight0.isNameVisible();
      homeLight1.setNameYOffset((-1.0F));
      homeLight1.getPriceValueAddedTaxIncluded();
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      LightSource[] lightSourceArray0 = new LightSource[2];
      LightSource lightSource0 = new LightSource((-1.0F), (-1457.99F), 381.9F, 1431655765);
      LightSource lightSource1 = new LightSource((-1.0F), (-69.47F), 700.4569F, (-853));
      lightSourceArray0[1] = lightSource1;
      Integer integer0 = new Integer((-853));
      Light light0 = mock(Light.class, new ViolatedAssumptionAnswer());
      doReturn((LightSource[]) null).when(light0).getLightSources();
      doReturn((Integer) null).when(light0).getColor();
      doReturn((String) null).when(light0).getCurrency();
      doReturn(0.0F).when(light0).getDepth();
      doReturn((String) null).when(light0).getDescription();
      doReturn(0.0F).when(light0).getElevation();
      doReturn(0.0F).when(light0).getHeight();
      doReturn((Content) null).when(light0).getIcon();
      doReturn((Content) null).when(light0).getModel();
      doReturn((float[][]) null).when(light0).getModelRotation();
      doReturn((String) null).when(light0).getName();
      doReturn((Content) null).when(light0).getPlanIcon();
      doReturn((BigDecimal) null).when(light0).getPrice();
      doReturn((String) null).when(light0).getStaircaseCutOutShape();
      doReturn((BigDecimal) null).when(light0).getValueAddedTaxPercentage();
      doReturn(0.0F).when(light0).getWidth();
      doReturn(false).when(light0).isBackFaceShown();
      doReturn(false).when(light0).isDeformable();
      doReturn(false).when(light0).isDoorOrWindow();
      doReturn(false).when(light0).isMovable();
      doReturn(false).when(light0).isResizable();
      doReturn(false).when(light0).isTexturable();
      byte[] byteArray0 = new byte[5];
      byteArray0[1] = (byte)1;
      byteArray0[3] = (byte) (-32);
      byteArray0[4] = (byte)62;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      HomeLight homeLight0 = new HomeLight(light0);
      Integer integer1 = new Integer((byte) (-32));
      Float.floatToIntBits((-1710.0F));
      homeLight0.getLevel();
      homeLight0.setName("");
      homeLight0.intersectsRectangle((-192.7F), 381.9F, 0.0F, 649.6529F);
      homeLight0.setNameYOffset((-73.79F));
      homeLight0.getPriceValueAddedTaxIncluded();
      homeLight0.setDescription("");
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      LightSource[] lightSourceArray0 = new LightSource[2];
      LightSource lightSource0 = new LightSource((-1.0F), (-1457.99F), 381.9F, 1431655765);
      lightSourceArray0[0] = lightSource0;
      LightSource lightSource1 = new LightSource((-1.0F), (-69.47F), 700.4569F, (-853));
      lightSourceArray0[1] = lightSource1;
      Integer integer0 = new Integer((-853));
      Light light0 = mock(Light.class, new ViolatedAssumptionAnswer());
      doReturn((LightSource[]) null).when(light0).getLightSources();
      doReturn((Integer) null).when(light0).getColor();
      doReturn((String) null).when(light0).getCurrency();
      doReturn(0.0F).when(light0).getDepth();
      doReturn((String) null).when(light0).getDescription();
      doReturn(0.0F).when(light0).getElevation();
      doReturn(0.0F).when(light0).getHeight();
      doReturn((Content) null).when(light0).getIcon();
      doReturn((Content) null).when(light0).getModel();
      doReturn((float[][]) null).when(light0).getModelRotation();
      doReturn((String) null).when(light0).getName();
      doReturn((Content) null).when(light0).getPlanIcon();
      doReturn((BigDecimal) null).when(light0).getPrice();
      doReturn((String) null).when(light0).getStaircaseCutOutShape();
      doReturn((BigDecimal) null).when(light0).getValueAddedTaxPercentage();
      doReturn(0.0F).when(light0).getWidth();
      doReturn(false).when(light0).isBackFaceShown();
      doReturn(false).when(light0).isDeformable();
      doReturn(false).when(light0).isDoorOrWindow();
      doReturn(false).when(light0).isMovable();
      doReturn(false).when(light0).isResizable();
      doReturn(false).when(light0).isTexturable();
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)13;
      byteArray0[1] = (byte)1;
      byteArray0[2] = (byte) (-113);
      byteArray0[3] = (byte) (-32);
      byteArray0[4] = (byte)62;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      HomeLight homeLight0 = new HomeLight(light0);
      homeLight0.setY((-1.0F));
      homeLight0.getValueAddedTax();
      homeLight0.getValueAddedTax();
      homeLight0.getName();
      homeLight0.getLevel();
      HomeLight homeLight1 = homeLight0.clone();
      homeLight1.setName((String) null);
      homeLight0.isNameVisible();
      homeLight1.setNameYOffset((-1.0F));
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      PieceOfFurniture pieceOfFurniture0 = mock(PieceOfFurniture.class, new ViolatedAssumptionAnswer());
      doReturn((Integer) null).when(pieceOfFurniture0).getColor();
      doReturn((String) null).when(pieceOfFurniture0).getCurrency();
      doReturn(0.0F).when(pieceOfFurniture0).getDepth();
      doReturn((String) null).when(pieceOfFurniture0).getDescription();
      doReturn(0.0F).when(pieceOfFurniture0).getElevation();
      doReturn(0.0F).when(pieceOfFurniture0).getHeight();
      doReturn((Content) null).when(pieceOfFurniture0).getIcon();
      doReturn((Content) null).when(pieceOfFurniture0).getModel();
      doReturn((float[][]) null).when(pieceOfFurniture0).getModelRotation();
      doReturn((String) null).when(pieceOfFurniture0).getName();
      doReturn((Content) null).when(pieceOfFurniture0).getPlanIcon();
      doReturn((BigDecimal) null).when(pieceOfFurniture0).getPrice();
      doReturn((String) null).when(pieceOfFurniture0).getStaircaseCutOutShape();
      doReturn((BigDecimal) null).when(pieceOfFurniture0).getValueAddedTaxPercentage();
      doReturn(0.0F).when(pieceOfFurniture0).getWidth();
      doReturn(false).when(pieceOfFurniture0).isBackFaceShown();
      doReturn(false).when(pieceOfFurniture0).isDeformable();
      doReturn(false).when(pieceOfFurniture0).isDoorOrWindow();
      doReturn(false).when(pieceOfFurniture0).isMovable();
      doReturn(false).when(pieceOfFurniture0).isResizable();
      doReturn(false).when(pieceOfFurniture0).isTexturable();
      HomePieceOfFurniture homePieceOfFurniture0 = new HomePieceOfFurniture(pieceOfFurniture0);
      homePieceOfFurniture0.getLevel();
      homePieceOfFurniture0.getPlanIcon();
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      LightSource[] lightSourceArray0 = new LightSource[2];
      URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      URL uRL0 = MockURL.URL("s<7]@ykxs+ 0`a ", (String) null, (-1667), "", uRLStreamHandler0);
      TemporaryURLContent temporaryURLContent0 = new TemporaryURLContent(uRL0);
      BigDecimal bigDecimal0 = BigDecimal.TEN;
      CatalogLight catalogLight0 = new CatalogLight("\"<xp|JAv^\"<^Qh{/~", "s<7]@ykxs+ 0`a ", "s<7]@ykxs+ 0`a ", temporaryURLContent0, temporaryURLContent0, temporaryURLContent0, (-611.6462F), 1.7441415F, 0.5F, (-897.795F), true, lightSourceArray0, "", (float[][]) null, "P'HZa~G", true, true, true, bigDecimal0, bigDecimal0, "");
      HomeLight homeLight0 = new HomeLight(catalogLight0);
      HomeLight homeLight1 = homeLight0.clone();
      HomeLight homeLight2 = homeLight0.clone();
      homeLight1.isBackFaceShown();
      homeLight2.getIcon();
      homeLight1.setDepth(0.5F);
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      Light light0 = mock(Light.class, new ViolatedAssumptionAnswer());
      doReturn((LightSource[]) null).when(light0).getLightSources();
      doReturn((Integer) null).when(light0).getColor();
      doReturn((String) null).when(light0).getCurrency();
      doReturn(0.0F).when(light0).getDepth();
      doReturn((String) null).when(light0).getDescription();
      doReturn(0.0F).when(light0).getElevation();
      doReturn(0.0F).when(light0).getHeight();
      doReturn((Content) null).when(light0).getIcon();
      doReturn((Content) null).when(light0).getModel();
      doReturn((float[][]) null).when(light0).getModelRotation();
      doReturn((String) null).when(light0).getName();
      doReturn((Content) null).when(light0).getPlanIcon();
      doReturn((BigDecimal) null).when(light0).getPrice();
      doReturn((String) null).when(light0).getStaircaseCutOutShape();
      doReturn((BigDecimal) null).when(light0).getValueAddedTaxPercentage();
      doReturn(0.0F).when(light0).getWidth();
      doReturn(false).when(light0).isBackFaceShown();
      doReturn(false).when(light0).isDeformable();
      doReturn(false).when(light0).isDoorOrWindow();
      doReturn(false).when(light0).isMovable();
      doReturn(false).when(light0).isResizable();
      doReturn(false).when(light0).isTexturable();
      HomeLight homeLight0 = new HomeLight(light0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      homeLight0.getName();
      homeLight0.getLevel();
      HomeLight homeLight1 = homeLight0.clone();
      homeLight1.getPriceValueAddedTaxIncluded();
      FileSystemHandling.shouldAllThrowIOExceptions();
      Level level0 = new Level((String) null, 2968.2717F, 2968.2717F, 0.0F);
      homeLight1.isAtLevel((Level) null);
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      Light light0 = mock(Light.class, new ViolatedAssumptionAnswer());
      doReturn((LightSource[]) null).when(light0).getLightSources();
      doReturn((Integer) null).when(light0).getColor();
      doReturn((String) null).when(light0).getCurrency();
      doReturn(0.0F).when(light0).getDepth();
      doReturn((String) null).when(light0).getDescription();
      doReturn(0.0F).when(light0).getElevation();
      doReturn(0.0F).when(light0).getHeight();
      doReturn((Content) null).when(light0).getIcon();
      doReturn((Content) null).when(light0).getModel();
      doReturn((float[][]) null).when(light0).getModelRotation();
      doReturn((String) null).when(light0).getName();
      doReturn((Content) null).when(light0).getPlanIcon();
      doReturn((BigDecimal) null).when(light0).getPrice();
      doReturn((String) null).when(light0).getStaircaseCutOutShape();
      doReturn((BigDecimal) null).when(light0).getValueAddedTaxPercentage();
      doReturn(0.0F).when(light0).getWidth();
      doReturn(false).when(light0).isBackFaceShown();
      doReturn(false).when(light0).isDeformable();
      doReturn(false).when(light0).isDoorOrWindow();
      doReturn(false).when(light0).isMovable();
      doReturn(false).when(light0).isResizable();
      doReturn(false).when(light0).isTexturable();
      HomeLight homeLight0 = new HomeLight(light0);
      homeLight0.setElevation((-1.0F));
      homeLight0.isBottomRightPointAt((-1.0F), (-1.0F), (-1.0F));
      homeLight0.setMovable(false);
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      Light light0 = mock(Light.class, new ViolatedAssumptionAnswer());
      doReturn((LightSource[]) null).when(light0).getLightSources();
      doReturn((Integer) null).when(light0).getColor();
      doReturn((String) null).when(light0).getCurrency();
      doReturn(0.0F).when(light0).getDepth();
      doReturn((String) null).when(light0).getDescription();
      doReturn(0.0F).when(light0).getElevation();
      doReturn(0.0F).when(light0).getHeight();
      doReturn((Content) null).when(light0).getIcon();
      doReturn((Content) null).when(light0).getModel();
      doReturn((float[][]) null).when(light0).getModelRotation();
      doReturn((String) null).when(light0).getName();
      doReturn((Content) null).when(light0).getPlanIcon();
      doReturn((BigDecimal) null).when(light0).getPrice();
      doReturn((String) null).when(light0).getStaircaseCutOutShape();
      doReturn((BigDecimal) null).when(light0).getValueAddedTaxPercentage();
      doReturn(0.0F).when(light0).getWidth();
      doReturn(false).when(light0).isBackFaceShown();
      doReturn(false).when(light0).isDeformable();
      doReturn(false).when(light0).isDoorOrWindow();
      doReturn(false).when(light0).isMovable();
      doReturn(false).when(light0).isResizable();
      doReturn(false).when(light0).isTexturable();
      Integer.valueOf((-2369));
      HomeLight homeLight0 = new HomeLight(light0);
      HomeLight homeLight1 = homeLight0.clone();
      FileSystemHandling.shouldAllThrowIOExceptions();
      homeLight0.isBackFaceShown();
      // Undeclared exception!
      try { 
        homeLight1.getModelRotation();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.eteks.sweethome3d.model.HomePieceOfFurniture", e);
      }
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      Light light0 = mock(Light.class, new ViolatedAssumptionAnswer());
      doReturn((LightSource[]) null).when(light0).getLightSources();
      doReturn((Integer) null).when(light0).getColor();
      doReturn((String) null).when(light0).getCurrency();
      doReturn(0.0F).when(light0).getDepth();
      doReturn((String) null).when(light0).getDescription();
      doReturn(0.0F).when(light0).getElevation();
      doReturn(0.0F).when(light0).getHeight();
      doReturn((Content) null).when(light0).getIcon();
      doReturn((Content) null).when(light0).getModel();
      doReturn((float[][]) null).when(light0).getModelRotation();
      doReturn((String) null).when(light0).getName();
      doReturn((Content) null).when(light0).getPlanIcon();
      doReturn((BigDecimal) null).when(light0).getPrice();
      doReturn((String) null).when(light0).getStaircaseCutOutShape();
      doReturn((BigDecimal) null).when(light0).getValueAddedTaxPercentage();
      doReturn(0.0F).when(light0).getWidth();
      doReturn(false).when(light0).isBackFaceShown();
      doReturn(false).when(light0).isDeformable();
      doReturn(false).when(light0).isDoorOrWindow();
      doReturn(false).when(light0).isMovable();
      doReturn(false).when(light0).isResizable();
      doReturn(false).when(light0).isTexturable();
      Sash sash0 = new Sash(2433.6218F, 0.0F, (-1.0F), (byte)1, 0.0F);
      HomeLight homeLight0 = new HomeLight(light0);
      homeLight0.setY((-172.0F));
      BigDecimal bigDecimal0 = BigDecimal.ONE;
      HomeLight homeLight1 = homeLight0.clone();
      Level level0 = new Level("com.eteks.sweethome3d.model.HomePieceOfFurniture$14", (-1342.7212F), (-1342.7212F), (-2108.7F));
      level0.getElevation();
      level0.getHeight();
      homeLight1.setLevel(level0);
      homeLight1.isPointAt(0.0F, 1.0F, 4430.7637F);
      Float.floatToIntBits((-1.0F));
      homeLight1.setVisible(false);
      homeLight1.getWidth();
      homeLight0.setNameVisible(false);
      homeLight1.getGroundElevation();
      Integer integer0 = new Integer(17);
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      Integer integer0 = new Integer(1431655765);
      LightSource[] lightSourceArray0 = new LightSource[8];
      Float float0 = new Float(1316816.5861536646);
      LightSource lightSource0 = new LightSource(1431655765, 1431655765, 1431655765, 1431655765, float0);
      lightSourceArray0[0] = lightSource0;
      LightSource lightSource1 = new LightSource(1431655765, (-3487.8594F), (-3487.8594F), (-2146022773));
      lightSourceArray0[1] = lightSource1;
      Float.compare((-2513.206F), 0.0F);
      Float.compare(0.0F, (-1));
      Float.compare((-1), (-2513.206F));
      LightSource lightSource2 = new LightSource((-1.0F), 1431655765, (-17.25F), 1431655765, (Float) 0.0F);
      lightSourceArray0[2] = lightSource2;
      LightSource lightSource3 = new LightSource((-2146022773), 0.0F, 0.0F, 1624, float0);
      lightSourceArray0[3] = lightSource3;
      LightSource lightSource4 = new LightSource((-172.0F), 1431655765, (-2146022773), 4);
      lightSourceArray0[4] = lightSource4;
      LightSource lightSource5 = new LightSource(1624, 1.43165581E9F, (-1.0F), 1749, float0);
      lightSourceArray0[5] = lightSource5;
      Float float1 = new Float((-17.25F));
      LightSource lightSource6 = new LightSource(0.0F, (-934.1F), (-694.344F), (-1097), float1);
      lightSourceArray0[6] = lightSource6;
      Float float2 = new Float(521.065508);
      float2.floatValue();
      LightSource lightSource7 = new LightSource(3211.5857F, (-110.62663F), (-1), 2146815188, (Float) 521.0655F);
      lightSourceArray0[7] = lightSource7;
      Light light0 = mock(Light.class, new ViolatedAssumptionAnswer());
      doReturn((LightSource[]) null).when(light0).getLightSources();
      doReturn((Integer) null).when(light0).getColor();
      doReturn((String) null).when(light0).getCurrency();
      doReturn(0.0F).when(light0).getDepth();
      doReturn((String) null).when(light0).getDescription();
      doReturn(0.0F).when(light0).getElevation();
      doReturn(0.0F).when(light0).getHeight();
      doReturn((Content) null).when(light0).getIcon();
      doReturn((Content) null).when(light0).getModel();
      doReturn((float[][]) null).when(light0).getModelRotation();
      doReturn((String) null).when(light0).getName();
      doReturn((Content) null).when(light0).getPlanIcon();
      doReturn((BigDecimal) null).when(light0).getPrice();
      doReturn((String) null).when(light0).getStaircaseCutOutShape();
      doReturn((BigDecimal) null).when(light0).getValueAddedTaxPercentage();
      doReturn(0.0F).when(light0).getWidth();
      doReturn(false).when(light0).isBackFaceShown();
      doReturn(false).when(light0).isDeformable();
      doReturn(false).when(light0).isDoorOrWindow();
      doReturn(false).when(light0).isMovable();
      doReturn(false).when(light0).isResizable();
      doReturn(false).when(light0).isTexturable();
      Sash sash0 = new Sash((byte)1, 0.0F, 0.0F, 1431655765, (-414.0F));
      BigInteger bigInteger0 = BigInteger.ZERO;
      BigDecimal bigDecimal0 = new BigDecimal(bigInteger0);
      HomeLight homeLight0 = new HomeLight(light0);
      homeLight0.setY((-1265.729F));
      homeLight0.getValueAddedTax();
      HomeLight homeLight1 = homeLight0.clone();
      homeLight0.getLevel();
      HomeLight homeLight2 = homeLight0.clone();
      homeLight0.setAngle(414.72678F);
      homeLight0.setName("zr#$Cy?Ig_QInnju>");
      Integer.valueOf(1);
      homeLight0.getY();
      homeLight1.getElevation();
      System.setCurrentTimeMillis(1001);
      homeLight1.getX();
      // Undeclared exception!
      try { 
        homeLight2.setHeight(2.2578979F);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Piece isn't resizable
         //
         verifyException("com.eteks.sweethome3d.model.HomePieceOfFurniture", e);
      }
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      LightSource[] lightSourceArray0 = new LightSource[2];
      float float0 = (-1.0F);
      LightSource lightSource0 = new LightSource((-1.0F), (-1457.99F), 381.9F, 1431655765);
      lightSourceArray0[0] = lightSource0;
      float float1 = 700.4569F;
      LightSource lightSource1 = new LightSource((-1.0F), (-69.47F), 700.4569F, (-853));
      lightSourceArray0[1] = lightSource1;
      Integer integer0 = new Integer((-853));
      Light light0 = mock(Light.class, new ViolatedAssumptionAnswer());
      doReturn((LightSource[]) null).when(light0).getLightSources();
      doReturn((Integer) null).when(light0).getColor();
      doReturn((String) null).when(light0).getCurrency();
      doReturn(0.0F).when(light0).getDepth();
      doReturn((String) null).when(light0).getDescription();
      doReturn(0.0F).when(light0).getElevation();
      doReturn(0.0F).when(light0).getHeight();
      doReturn((Content) null).when(light0).getIcon();
      doReturn((Content) null).when(light0).getModel();
      doReturn((float[][]) null).when(light0).getModelRotation();
      doReturn((String) null).when(light0).getName();
      doReturn((Content) null).when(light0).getPlanIcon();
      doReturn((BigDecimal) null).when(light0).getPrice();
      doReturn((String) null).when(light0).getStaircaseCutOutShape();
      doReturn((BigDecimal) null).when(light0).getValueAddedTaxPercentage();
      doReturn(0.0F).when(light0).getWidth();
      doReturn(false).when(light0).isBackFaceShown();
      doReturn(false).when(light0).isDeformable();
      doReturn(false).when(light0).isDoorOrWindow();
      doReturn(false).when(light0).isMovable();
      doReturn(false).when(light0).isResizable();
      doReturn(false).when(light0).isTexturable();
      HomeLight homeLight0 = new HomeLight(light0);
      HomeLight homeLight1 = homeLight0.clone();
      homeLight1.setElevation(700.4569F);
      homeLight1.getValueAddedTax();
      homeLight1.setVisible(true);
      homeLight0.getCurrency();
      // Undeclared exception!
      try { 
        homeLight0.setHeight(381.9F);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Piece isn't resizable
         //
         verifyException("com.eteks.sweethome3d.model.HomePieceOfFurniture", e);
      }
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      LightSource[] lightSourceArray0 = new LightSource[2];
      URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      URL uRL0 = MockURL.URL("s<7]@ykxs+ 0`a ", (String) null, (-1667), "s<7]@ykxs+ 0`a ", uRLStreamHandler0);
      TemporaryURLContent temporaryURLContent0 = new TemporaryURLContent(uRL0);
      BigDecimal bigDecimal0 = BigDecimal.TEN;
      CatalogLight catalogLight0 = new CatalogLight("?!hm", "", "s<7]@ykxs+ 0`a ", temporaryURLContent0, temporaryURLContent0, temporaryURLContent0, 5632.0F, 1.7441415F, (-1667), 148.03F, false, lightSourceArray0, "n2JY<", (float[][]) null, "", false, true, false, bigDecimal0, bigDecimal0, "n2JY<");
      HomeLight homeLight0 = new HomeLight(catalogLight0);
      HomeLight homeLight1 = new HomeLight(homeLight0);
      HomeLight homeLight2 = homeLight1.clone();
      HomeLight homeLight3 = homeLight2.clone();
      homeLight3.isBottomRightPointAt((-285.84613F), (-285.84613F), (-285.84613F));
      homeLight0.setMovable(false);
      homeLight0.getPoints();
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      Light light0 = mock(Light.class, new ViolatedAssumptionAnswer());
      doReturn((LightSource[]) null).when(light0).getLightSources();
      doReturn((Integer) null).when(light0).getColor();
      doReturn((String) null).when(light0).getCurrency();
      doReturn(0.0F).when(light0).getDepth();
      doReturn((String) null).when(light0).getDescription();
      doReturn(0.0F).when(light0).getElevation();
      doReturn(0.0F).when(light0).getHeight();
      doReturn((Content) null).when(light0).getIcon();
      doReturn((Content) null).when(light0).getModel();
      doReturn((float[][]) null).when(light0).getModelRotation();
      doReturn((String) null).when(light0).getName();
      doReturn((Content) null).when(light0).getPlanIcon();
      doReturn((BigDecimal) null).when(light0).getPrice();
      doReturn((String) null).when(light0).getStaircaseCutOutShape();
      doReturn((BigDecimal) null).when(light0).getValueAddedTaxPercentage();
      doReturn(0.0F).when(light0).getWidth();
      doReturn(false).when(light0).isBackFaceShown();
      doReturn(false).when(light0).isDeformable();
      doReturn(false).when(light0).isDoorOrWindow();
      doReturn(false).when(light0).isMovable();
      doReturn(false).when(light0).isResizable();
      doReturn(false).when(light0).isTexturable();
      HomeLight homeLight0 = new HomeLight(light0);
      homeLight0.setElevation((-1.0F));
      FileSystemHandling.shouldAllThrowIOExceptions();
      homeLight0.getLevel();
      homeLight0.setName((String) null);
      homeLight0.setNameYOffset(0.5F);
      BigDecimal bigDecimal0 = BigDecimal.TEN;
      HomeLight homeLight1 = homeLight0.clone();
      homeLight0.setDescription((String) null);
      homeLight1.isPointAt(765.0F, 765.0F, 765.0F);
      homeLight0.getDescription();
      homeLight1.isNameCenterPointAt(3205.479F, (-1.0F), 3205.479F);
      homeLight1.getNameStyle();
      homeLight0.isAtLevel((Level) null);
      homeLight0.getDepth();
      HomePieceOfFurniture.SortableProperty.values();
      // Undeclared exception!
      try { 
        homeLight0.setHeight(679.4F);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Piece isn't resizable
         //
         verifyException("com.eteks.sweethome3d.model.HomePieceOfFurniture", e);
      }
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      LightSource lightSource0 = new LightSource((-1.0F), (-1.0F), 381.9F, 1431655765);
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-54);
      byteArray0[1] = (byte) (-40);
      byteArray0[2] = (byte)111;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      LightSource lightSource1 = new LightSource((-1.0F), (-69.47F), 700.4569F, (-853));
      Integer integer0 = new Integer((-853));
      Light light0 = mock(Light.class, new ViolatedAssumptionAnswer());
      doReturn((LightSource[]) null).when(light0).getLightSources();
      doReturn((Integer) null).when(light0).getColor();
      doReturn((String) null).when(light0).getCurrency();
      doReturn(0.0F).when(light0).getDepth();
      doReturn((String) null).when(light0).getDescription();
      doReturn(0.0F).when(light0).getElevation();
      doReturn(0.0F).when(light0).getHeight();
      doReturn((Content) null).when(light0).getIcon();
      doReturn((Content) null).when(light0).getModel();
      doReturn((float[][]) null).when(light0).getModelRotation();
      doReturn((String) null).when(light0).getName();
      doReturn((Content) null).when(light0).getPlanIcon();
      doReturn((BigDecimal) null).when(light0).getPrice();
      doReturn((String) null).when(light0).getStaircaseCutOutShape();
      doReturn((BigDecimal) null).when(light0).getValueAddedTaxPercentage();
      doReturn(0.0F).when(light0).getWidth();
      doReturn(false).when(light0).isBackFaceShown();
      doReturn(false).when(light0).isDeformable();
      doReturn(false).when(light0).isDoorOrWindow();
      doReturn(false).when(light0).isMovable();
      doReturn(false).when(light0).isResizable();
      doReturn(false).when(light0).isTexturable();
      byte[] byteArray1 = new byte[5];
      byteArray1[1] = (byte)111;
      byteArray1[3] = (byte)0;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray1);
      HomeLight homeLight0 = new HomeLight(light0);
      homeLight0.setY((byte)0);
      homeLight0.getValueAddedTax();
      homeLight0.getValueAddedTax();
      homeLight0.getName();
      homeLight0.setName((String) null);
      homeLight0.intersectsRectangle((byte)0, 1800.2F, 700.4569F, (-73.79F));
      homeLight0.setNameYOffset((-1.0F));
      homeLight0.getPriceValueAddedTaxIncluded();
      homeLight0.setDescription((String) null);
      homeLight0.getStaircaseCutOutShape();
      homeLight0.getNameYOffset();
      homeLight0.getValueAddedTax();
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      Light light0 = mock(Light.class, new ViolatedAssumptionAnswer());
      doReturn((LightSource[]) null).when(light0).getLightSources();
      doReturn((Integer) null).when(light0).getColor();
      doReturn((String) null).when(light0).getCurrency();
      doReturn(0.0F).when(light0).getDepth();
      doReturn((String) null).when(light0).getDescription();
      doReturn(0.0F).when(light0).getElevation();
      doReturn(0.0F).when(light0).getHeight();
      doReturn((Content) null).when(light0).getIcon();
      doReturn((Content) null).when(light0).getModel();
      doReturn((float[][]) null).when(light0).getModelRotation();
      doReturn((String) null).when(light0).getName();
      doReturn((Content) null).when(light0).getPlanIcon();
      doReturn((BigDecimal) null).when(light0).getPrice();
      doReturn((String) null).when(light0).getStaircaseCutOutShape();
      doReturn((BigDecimal) null).when(light0).getValueAddedTaxPercentage();
      doReturn(0.0F).when(light0).getWidth();
      doReturn(false).when(light0).isBackFaceShown();
      doReturn(false).when(light0).isDeformable();
      doReturn(false).when(light0).isDoorOrWindow();
      doReturn(false).when(light0).isMovable();
      doReturn(false).when(light0).isResizable();
      doReturn(false).when(light0).isTexturable();
      HomeLight homeLight0 = new HomeLight(light0);
      assertNotNull(homeLight0);
      assertFalse(homeLight0.isResizable());
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertFalse(homeLight0.isMovable());
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertNull(homeLight0.getName());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertNull(homeLight0.getCatalogId());
      assertFalse(homeLight0.isNameVisible());
      assertNull(homeLight0.getColor());
      assertFalse(homeLight0.isBackFaceShown());
      assertFalse(homeLight0.isModelMirrored());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertFalse(homeLight0.isTexturable());
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertNull(homeLight0.getDescription());
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertFalse(homeLight0.isDeformable());
      assertNull(homeLight0.getCurrency());
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertTrue(homeLight0.isVisible());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertNull(homeLight0.getShininess());
      assertNull(homeLight0.getStaircaseCutOutShape());
      
      homeLight0.setElevation((-1.0F));
      assertFalse(homeLight0.isResizable());
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertFalse(homeLight0.isMovable());
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertNull(homeLight0.getName());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertNull(homeLight0.getCatalogId());
      assertFalse(homeLight0.isNameVisible());
      assertNull(homeLight0.getColor());
      assertFalse(homeLight0.isBackFaceShown());
      assertFalse(homeLight0.isModelMirrored());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertFalse(homeLight0.isTexturable());
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertEquals((-1.0F), homeLight0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      assertEquals((-1.0F), homeLight0.getElevation(), 0.01F);
      assertNull(homeLight0.getDescription());
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertFalse(homeLight0.isDeformable());
      assertNull(homeLight0.getCurrency());
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertTrue(homeLight0.isVisible());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertNull(homeLight0.getShininess());
      assertNull(homeLight0.getStaircaseCutOutShape());
      
      homeLight0.setY(2.0F);
      assertFalse(homeLight0.isResizable());
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertFalse(homeLight0.isMovable());
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertNull(homeLight0.getName());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertNull(homeLight0.getCatalogId());
      assertFalse(homeLight0.isNameVisible());
      assertNull(homeLight0.getColor());
      assertFalse(homeLight0.isBackFaceShown());
      assertFalse(homeLight0.isModelMirrored());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertFalse(homeLight0.isTexturable());
      assertEquals(2.0F, homeLight0.getY(), 0.01F);
      assertEquals((-1.0F), homeLight0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      assertEquals((-1.0F), homeLight0.getElevation(), 0.01F);
      assertNull(homeLight0.getDescription());
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertFalse(homeLight0.isDeformable());
      assertNull(homeLight0.getCurrency());
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertTrue(homeLight0.isVisible());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertNull(homeLight0.getShininess());
      assertNull(homeLight0.getStaircaseCutOutShape());
      
      boolean boolean0 = homeLight0.isBottomRightPointAt((-1.0F), (-1.0F), (-1.0F));
      assertFalse(boolean0);
      assertFalse(homeLight0.isResizable());
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertFalse(homeLight0.isMovable());
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertNull(homeLight0.getName());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertNull(homeLight0.getCatalogId());
      assertFalse(homeLight0.isNameVisible());
      assertNull(homeLight0.getColor());
      assertFalse(homeLight0.isBackFaceShown());
      assertFalse(homeLight0.isModelMirrored());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertFalse(homeLight0.isTexturable());
      assertEquals(2.0F, homeLight0.getY(), 0.01F);
      assertEquals((-1.0F), homeLight0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      assertEquals((-1.0F), homeLight0.getElevation(), 0.01F);
      assertNull(homeLight0.getDescription());
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertFalse(homeLight0.isDeformable());
      assertNull(homeLight0.getCurrency());
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertTrue(homeLight0.isVisible());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertNull(homeLight0.getShininess());
      assertNull(homeLight0.getStaircaseCutOutShape());
      
      int int0 = Float.floatToIntBits((byte) (-32));
      assertEquals((-1040187392), int0);
      
      HomeLight homeLight1 = homeLight0.clone();
      assertNotNull(homeLight1);
      assertNotSame(homeLight0, homeLight1);
      assertNotSame(homeLight1, homeLight0);
      assertFalse(homeLight1.equals((Object)homeLight0));
      assertFalse(homeLight0.isResizable());
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertFalse(homeLight0.isMovable());
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertNull(homeLight0.getName());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertNull(homeLight0.getCatalogId());
      assertFalse(homeLight0.isNameVisible());
      assertNull(homeLight0.getColor());
      assertFalse(homeLight0.isBackFaceShown());
      assertFalse(homeLight0.isModelMirrored());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertFalse(homeLight0.isTexturable());
      assertEquals(2.0F, homeLight0.getY(), 0.01F);
      assertEquals((-1.0F), homeLight0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      assertEquals((-1.0F), homeLight0.getElevation(), 0.01F);
      assertNull(homeLight0.getDescription());
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertFalse(homeLight0.isDeformable());
      assertNull(homeLight0.getCurrency());
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertTrue(homeLight0.isVisible());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertNull(homeLight0.getShininess());
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertNull(homeLight1.getCurrency());
      assertEquals(0.0F, homeLight1.getNameYOffset(), 0.01F);
      assertEquals(0.0F, homeLight1.getWidth(), 0.01F);
      assertTrue(homeLight1.isVisible());
      assertFalse(homeLight1.isNameVisible());
      assertFalse(homeLight1.isBackFaceShown());
      assertFalse(homeLight1.isModelMirrored());
      assertFalse(homeLight1.isDeformable());
      assertFalse(homeLight1.isResizable());
      assertEquals(0.0F, homeLight1.getX(), 0.01F);
      assertEquals(2.0F, homeLight1.getY(), 0.01F);
      assertNull(homeLight1.getShininess());
      assertEquals(0.0F, homeLight1.getAngle(), 0.01F);
      assertEquals((-1.0F), homeLight1.getGroundElevation(), 0.01F);
      assertEquals((-1.0F), homeLight1.getElevation(), 0.01F);
      assertFalse(homeLight1.isTexturable());
      assertFalse(homeLight1.isDoorOrWindow());
      assertEquals(0.0F, homeLight1.getNameXOffset(), 0.01F);
      assertNull(homeLight1.getDescription());
      assertEquals(0.0F, homeLight1.getDepth(), 0.01F);
      assertNull(homeLight1.getName());
      assertNull(homeLight1.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight1.getNameAngle(), 0.01F);
      assertFalse(homeLight1.isMovable());
      assertEquals(0.0F, homeLight1.getHeight(), 0.01F);
      assertNull(homeLight1.getCatalogId());
      assertNull(homeLight1.getColor());
      assertEquals(0.5F, homeLight1.getPower(), 0.01F);
      
      Level level0 = homeLight1.getLevel();
      assertNull(level0);
      assertNotSame(homeLight0, homeLight1);
      assertNotSame(homeLight1, homeLight0);
      assertFalse(homeLight0.equals((Object)homeLight1));
      assertFalse(homeLight1.equals((Object)homeLight0));
      assertFalse(homeLight0.isResizable());
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertFalse(homeLight0.isMovable());
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertNull(homeLight0.getName());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertNull(homeLight0.getCatalogId());
      assertFalse(homeLight0.isNameVisible());
      assertNull(homeLight0.getColor());
      assertFalse(homeLight0.isBackFaceShown());
      assertFalse(homeLight0.isModelMirrored());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertFalse(homeLight0.isTexturable());
      assertEquals(2.0F, homeLight0.getY(), 0.01F);
      assertEquals((-1.0F), homeLight0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      assertEquals((-1.0F), homeLight0.getElevation(), 0.01F);
      assertNull(homeLight0.getDescription());
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertFalse(homeLight0.isDeformable());
      assertNull(homeLight0.getCurrency());
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertTrue(homeLight0.isVisible());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertNull(homeLight0.getShininess());
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertNull(homeLight1.getCurrency());
      assertEquals(0.0F, homeLight1.getNameYOffset(), 0.01F);
      assertEquals(0.0F, homeLight1.getWidth(), 0.01F);
      assertTrue(homeLight1.isVisible());
      assertFalse(homeLight1.isNameVisible());
      assertFalse(homeLight1.isBackFaceShown());
      assertFalse(homeLight1.isModelMirrored());
      assertFalse(homeLight1.isDeformable());
      assertFalse(homeLight1.isResizable());
      assertEquals(0.0F, homeLight1.getX(), 0.01F);
      assertEquals(2.0F, homeLight1.getY(), 0.01F);
      assertNull(homeLight1.getShininess());
      assertEquals(0.0F, homeLight1.getAngle(), 0.01F);
      assertEquals((-1.0F), homeLight1.getGroundElevation(), 0.01F);
      assertEquals((-1.0F), homeLight1.getElevation(), 0.01F);
      assertFalse(homeLight1.isTexturable());
      assertFalse(homeLight1.isDoorOrWindow());
      assertEquals(0.0F, homeLight1.getNameXOffset(), 0.01F);
      assertNull(homeLight1.getDescription());
      assertEquals(0.0F, homeLight1.getDepth(), 0.01F);
      assertNull(homeLight1.getName());
      assertNull(homeLight1.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight1.getNameAngle(), 0.01F);
      assertFalse(homeLight1.isMovable());
      assertEquals(0.0F, homeLight1.getHeight(), 0.01F);
      assertNull(homeLight1.getCatalogId());
      assertNull(homeLight1.getColor());
      assertEquals(0.5F, homeLight1.getPower(), 0.01F);
      
      HomeLight homeLight2 = homeLight1.clone();
      assertNotNull(homeLight2);
      assertNotSame(homeLight0, homeLight1);
      assertNotSame(homeLight0, homeLight2);
      assertNotSame(homeLight1, homeLight2);
      assertNotSame(homeLight1, homeLight0);
      assertNotSame(homeLight2, homeLight0);
      assertNotSame(homeLight2, homeLight1);
      assertFalse(homeLight0.equals((Object)homeLight1));
      assertFalse(homeLight1.equals((Object)homeLight0));
      assertFalse(homeLight2.equals((Object)homeLight0));
      assertFalse(homeLight2.equals((Object)homeLight1));
      assertFalse(homeLight0.isResizable());
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertFalse(homeLight0.isMovable());
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertNull(homeLight0.getName());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertNull(homeLight0.getCatalogId());
      assertFalse(homeLight0.isNameVisible());
      assertNull(homeLight0.getColor());
      assertFalse(homeLight0.isBackFaceShown());
      assertFalse(homeLight0.isModelMirrored());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertFalse(homeLight0.isTexturable());
      assertEquals(2.0F, homeLight0.getY(), 0.01F);
      assertEquals((-1.0F), homeLight0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      assertEquals((-1.0F), homeLight0.getElevation(), 0.01F);
      assertNull(homeLight0.getDescription());
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertFalse(homeLight0.isDeformable());
      assertNull(homeLight0.getCurrency());
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertTrue(homeLight0.isVisible());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertNull(homeLight0.getShininess());
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertNull(homeLight1.getCurrency());
      assertEquals(0.0F, homeLight1.getNameYOffset(), 0.01F);
      assertEquals(0.0F, homeLight1.getWidth(), 0.01F);
      assertTrue(homeLight1.isVisible());
      assertFalse(homeLight1.isNameVisible());
      assertFalse(homeLight1.isBackFaceShown());
      assertFalse(homeLight1.isModelMirrored());
      assertFalse(homeLight1.isDeformable());
      assertFalse(homeLight1.isResizable());
      assertEquals(0.0F, homeLight1.getX(), 0.01F);
      assertEquals(2.0F, homeLight1.getY(), 0.01F);
      assertNull(homeLight1.getShininess());
      assertEquals(0.0F, homeLight1.getAngle(), 0.01F);
      assertEquals((-1.0F), homeLight1.getGroundElevation(), 0.01F);
      assertEquals((-1.0F), homeLight1.getElevation(), 0.01F);
      assertFalse(homeLight1.isTexturable());
      assertFalse(homeLight1.isDoorOrWindow());
      assertEquals(0.0F, homeLight1.getNameXOffset(), 0.01F);
      assertNull(homeLight1.getDescription());
      assertEquals(0.0F, homeLight1.getDepth(), 0.01F);
      assertNull(homeLight1.getName());
      assertNull(homeLight1.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight1.getNameAngle(), 0.01F);
      assertFalse(homeLight1.isMovable());
      assertEquals(0.0F, homeLight1.getHeight(), 0.01F);
      assertNull(homeLight1.getCatalogId());
      assertNull(homeLight1.getColor());
      assertEquals(0.5F, homeLight1.getPower(), 0.01F);
      assertEquals((-1.0F), homeLight2.getElevation(), 0.01F);
      assertNull(homeLight2.getDescription());
      assertFalse(homeLight2.isTexturable());
      assertEquals((-1.0F), homeLight2.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight2.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeLight2.getDepth(), 0.01F);
      assertEquals(0.0F, homeLight2.getX(), 0.01F);
      assertFalse(homeLight2.isModelMirrored());
      assertEquals(2.0F, homeLight2.getY(), 0.01F);
      assertFalse(homeLight2.isDoorOrWindow());
      assertFalse(homeLight2.isBackFaceShown());
      assertNull(homeLight2.getName());
      assertFalse(homeLight2.isNameVisible());
      assertEquals(0.0F, homeLight2.getAngle(), 0.01F);
      assertTrue(homeLight2.isVisible());
      assertEquals(0.0F, homeLight2.getWidth(), 0.01F);
      assertEquals(0.0F, homeLight2.getNameYOffset(), 0.01F);
      assertFalse(homeLight2.isDeformable());
      assertNull(homeLight2.getShininess());
      assertNull(homeLight2.getColor());
      assertNull(homeLight2.getCatalogId());
      assertNull(homeLight2.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight2.getNameAngle(), 0.01F);
      assertFalse(homeLight2.isResizable());
      assertEquals(0.0F, homeLight2.getHeight(), 0.01F);
      assertEquals(0.5F, homeLight2.getPower(), 0.01F);
      assertNull(homeLight2.getCurrency());
      assertFalse(homeLight2.isMovable());
      
      homeLight1.setAngle(3309.9814F);
      assertNotSame(homeLight0, homeLight1);
      assertNotSame(homeLight0, homeLight2);
      assertNotSame(homeLight1, homeLight2);
      assertNotSame(homeLight1, homeLight0);
      assertFalse(homeLight0.equals((Object)homeLight1));
      assertFalse(homeLight0.equals((Object)homeLight2));
      assertFalse(homeLight1.equals((Object)homeLight2));
      assertFalse(homeLight1.equals((Object)homeLight0));
      assertFalse(homeLight0.isResizable());
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertFalse(homeLight0.isMovable());
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertNull(homeLight0.getName());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertNull(homeLight0.getCatalogId());
      assertFalse(homeLight0.isNameVisible());
      assertNull(homeLight0.getColor());
      assertFalse(homeLight0.isBackFaceShown());
      assertFalse(homeLight0.isModelMirrored());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertFalse(homeLight0.isTexturable());
      assertEquals(2.0F, homeLight0.getY(), 0.01F);
      assertEquals((-1.0F), homeLight0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      assertEquals((-1.0F), homeLight0.getElevation(), 0.01F);
      assertNull(homeLight0.getDescription());
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertFalse(homeLight0.isDeformable());
      assertNull(homeLight0.getCurrency());
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertTrue(homeLight0.isVisible());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertNull(homeLight0.getShininess());
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertNull(homeLight1.getCurrency());
      assertEquals(0.0F, homeLight1.getNameYOffset(), 0.01F);
      assertEquals(0.0F, homeLight1.getWidth(), 0.01F);
      assertTrue(homeLight1.isVisible());
      assertFalse(homeLight1.isNameVisible());
      assertFalse(homeLight1.isBackFaceShown());
      assertFalse(homeLight1.isModelMirrored());
      assertFalse(homeLight1.isDeformable());
      assertFalse(homeLight1.isResizable());
      assertEquals(0.0F, homeLight1.getX(), 0.01F);
      assertEquals(2.0F, homeLight1.getY(), 0.01F);
      assertNull(homeLight1.getShininess());
      assertEquals((-1.0F), homeLight1.getGroundElevation(), 0.01F);
      assertEquals((-1.0F), homeLight1.getElevation(), 0.01F);
      assertFalse(homeLight1.isTexturable());
      assertFalse(homeLight1.isDoorOrWindow());
      assertEquals(0.0F, homeLight1.getNameXOffset(), 0.01F);
      assertNull(homeLight1.getDescription());
      assertEquals(0.0F, homeLight1.getDepth(), 0.01F);
      assertNull(homeLight1.getName());
      assertNull(homeLight1.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight1.getNameAngle(), 0.01F);
      assertFalse(homeLight1.isMovable());
      assertEquals(0.0F, homeLight1.getHeight(), 0.01F);
      assertEquals(5.025974F, homeLight1.getAngle(), 0.01F);
      assertNull(homeLight1.getCatalogId());
      assertNull(homeLight1.getColor());
      assertEquals(0.5F, homeLight1.getPower(), 0.01F);
      
      homeLight0.setNameVisible(false);
      assertNotSame(homeLight0, homeLight1);
      assertNotSame(homeLight0, homeLight2);
      assertFalse(homeLight0.equals((Object)homeLight1));
      assertFalse(homeLight0.equals((Object)homeLight2));
      assertFalse(homeLight0.isResizable());
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertFalse(homeLight0.isMovable());
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertNull(homeLight0.getName());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertNull(homeLight0.getCatalogId());
      assertFalse(homeLight0.isNameVisible());
      assertNull(homeLight0.getColor());
      assertFalse(homeLight0.isBackFaceShown());
      assertFalse(homeLight0.isModelMirrored());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertFalse(homeLight0.isTexturable());
      assertEquals(2.0F, homeLight0.getY(), 0.01F);
      assertEquals((-1.0F), homeLight0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      assertEquals((-1.0F), homeLight0.getElevation(), 0.01F);
      assertNull(homeLight0.getDescription());
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertFalse(homeLight0.isDeformable());
      assertNull(homeLight0.getCurrency());
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertTrue(homeLight0.isVisible());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertNull(homeLight0.getShininess());
      assertNull(homeLight0.getStaircaseCutOutShape());
      
      float float0 = homeLight2.getGroundElevation();
      assertNotSame(homeLight0, homeLight1);
      assertNotSame(homeLight0, homeLight2);
      assertNotSame(homeLight1, homeLight2);
      assertNotSame(homeLight1, homeLight0);
      assertNotSame(homeLight2, homeLight0);
      assertNotSame(homeLight2, homeLight1);
      assertFalse(homeLight0.equals((Object)homeLight1));
      assertFalse(homeLight0.equals((Object)homeLight2));
      assertFalse(homeLight1.equals((Object)homeLight2));
      assertFalse(homeLight1.equals((Object)homeLight0));
      assertFalse(homeLight2.equals((Object)homeLight0));
      assertFalse(homeLight2.equals((Object)homeLight1));
      assertEquals((-1.0F), float0, 0.01F);
      assertFalse(homeLight0.isResizable());
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertFalse(homeLight0.isMovable());
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertNull(homeLight0.getName());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertNull(homeLight0.getCatalogId());
      assertFalse(homeLight0.isNameVisible());
      assertNull(homeLight0.getColor());
      assertFalse(homeLight0.isBackFaceShown());
      assertFalse(homeLight0.isModelMirrored());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertFalse(homeLight0.isTexturable());
      assertEquals(2.0F, homeLight0.getY(), 0.01F);
      assertEquals((-1.0F), homeLight0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      assertEquals((-1.0F), homeLight0.getElevation(), 0.01F);
      assertNull(homeLight0.getDescription());
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertFalse(homeLight0.isDeformable());
      assertNull(homeLight0.getCurrency());
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertTrue(homeLight0.isVisible());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertNull(homeLight0.getShininess());
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertNull(homeLight1.getCurrency());
      assertEquals(0.0F, homeLight1.getNameYOffset(), 0.01F);
      assertEquals(0.0F, homeLight1.getWidth(), 0.01F);
      assertTrue(homeLight1.isVisible());
      assertFalse(homeLight1.isNameVisible());
      assertFalse(homeLight1.isBackFaceShown());
      assertFalse(homeLight1.isModelMirrored());
      assertFalse(homeLight1.isDeformable());
      assertFalse(homeLight1.isResizable());
      assertEquals(0.0F, homeLight1.getX(), 0.01F);
      assertEquals(2.0F, homeLight1.getY(), 0.01F);
      assertNull(homeLight1.getShininess());
      assertEquals((-1.0F), homeLight1.getGroundElevation(), 0.01F);
      assertEquals((-1.0F), homeLight1.getElevation(), 0.01F);
      assertFalse(homeLight1.isTexturable());
      assertFalse(homeLight1.isDoorOrWindow());
      assertEquals(0.0F, homeLight1.getNameXOffset(), 0.01F);
      assertNull(homeLight1.getDescription());
      assertEquals(0.0F, homeLight1.getDepth(), 0.01F);
      assertNull(homeLight1.getName());
      assertNull(homeLight1.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight1.getNameAngle(), 0.01F);
      assertFalse(homeLight1.isMovable());
      assertEquals(0.0F, homeLight1.getHeight(), 0.01F);
      assertEquals(5.025974F, homeLight1.getAngle(), 0.01F);
      assertNull(homeLight1.getCatalogId());
      assertNull(homeLight1.getColor());
      assertEquals(0.5F, homeLight1.getPower(), 0.01F);
      assertEquals((-1.0F), homeLight2.getElevation(), 0.01F);
      assertNull(homeLight2.getDescription());
      assertFalse(homeLight2.isTexturable());
      assertEquals((-1.0F), homeLight2.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight2.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeLight2.getDepth(), 0.01F);
      assertEquals(0.0F, homeLight2.getX(), 0.01F);
      assertFalse(homeLight2.isModelMirrored());
      assertEquals(2.0F, homeLight2.getY(), 0.01F);
      assertFalse(homeLight2.isDoorOrWindow());
      assertFalse(homeLight2.isBackFaceShown());
      assertNull(homeLight2.getName());
      assertFalse(homeLight2.isNameVisible());
      assertEquals(0.0F, homeLight2.getAngle(), 0.01F);
      assertTrue(homeLight2.isVisible());
      assertEquals(0.0F, homeLight2.getWidth(), 0.01F);
      assertEquals(0.0F, homeLight2.getNameYOffset(), 0.01F);
      assertFalse(homeLight2.isDeformable());
      assertNull(homeLight2.getShininess());
      assertNull(homeLight2.getColor());
      assertNull(homeLight2.getCatalogId());
      assertNull(homeLight2.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight2.getNameAngle(), 0.01F);
      assertFalse(homeLight2.isResizable());
      assertEquals(0.0F, homeLight2.getHeight(), 0.01F);
      assertEquals(0.5F, homeLight2.getPower(), 0.01F);
      assertNull(homeLight2.getCurrency());
      assertFalse(homeLight2.isMovable());
      
      float float1 = homeLight0.getY();
      assertNotSame(homeLight0, homeLight1);
      assertNotSame(homeLight0, homeLight2);
      assertFalse(homeLight0.equals((Object)homeLight1));
      assertFalse(homeLight0.equals((Object)homeLight2));
      assertNotEquals(float1, float0, 0.01F);
      assertEquals(2.0F, float1, 0.01F);
      assertFalse(homeLight0.isResizable());
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertFalse(homeLight0.isMovable());
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertNull(homeLight0.getName());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertNull(homeLight0.getCatalogId());
      assertFalse(homeLight0.isNameVisible());
      assertNull(homeLight0.getColor());
      assertFalse(homeLight0.isBackFaceShown());
      assertFalse(homeLight0.isModelMirrored());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertFalse(homeLight0.isTexturable());
      assertEquals(2.0F, homeLight0.getY(), 0.01F);
      assertEquals((-1.0F), homeLight0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      assertEquals((-1.0F), homeLight0.getElevation(), 0.01F);
      assertNull(homeLight0.getDescription());
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertFalse(homeLight0.isDeformable());
      assertNull(homeLight0.getCurrency());
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertTrue(homeLight0.isVisible());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertNull(homeLight0.getShininess());
      assertNull(homeLight0.getStaircaseCutOutShape());
      
      float float2 = homeLight1.getElevation();
      assertNotSame(homeLight0, homeLight1);
      assertNotSame(homeLight0, homeLight2);
      assertNotSame(homeLight1, homeLight2);
      assertNotSame(homeLight1, homeLight0);
      assertFalse(homeLight0.equals((Object)homeLight1));
      assertFalse(homeLight0.equals((Object)homeLight2));
      assertFalse(homeLight1.equals((Object)homeLight2));
      assertFalse(homeLight1.equals((Object)homeLight0));
      assertEquals(float2, float0, 0.01F);
      assertNotEquals(float2, float1, 0.01F);
      assertEquals((-1.0F), float2, 0.01F);
      assertFalse(homeLight0.isResizable());
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertFalse(homeLight0.isMovable());
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertNull(homeLight0.getName());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertNull(homeLight0.getCatalogId());
      assertFalse(homeLight0.isNameVisible());
      assertNull(homeLight0.getColor());
      assertFalse(homeLight0.isBackFaceShown());
      assertFalse(homeLight0.isModelMirrored());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertFalse(homeLight0.isTexturable());
      assertEquals(2.0F, homeLight0.getY(), 0.01F);
      assertEquals((-1.0F), homeLight0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      assertEquals((-1.0F), homeLight0.getElevation(), 0.01F);
      assertNull(homeLight0.getDescription());
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertFalse(homeLight0.isDeformable());
      assertNull(homeLight0.getCurrency());
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertTrue(homeLight0.isVisible());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertNull(homeLight0.getShininess());
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertNull(homeLight1.getCurrency());
      assertEquals(0.0F, homeLight1.getNameYOffset(), 0.01F);
      assertEquals(0.0F, homeLight1.getWidth(), 0.01F);
      assertTrue(homeLight1.isVisible());
      assertFalse(homeLight1.isNameVisible());
      assertFalse(homeLight1.isBackFaceShown());
      assertFalse(homeLight1.isModelMirrored());
      assertFalse(homeLight1.isDeformable());
      assertFalse(homeLight1.isResizable());
      assertEquals(0.0F, homeLight1.getX(), 0.01F);
      assertEquals(2.0F, homeLight1.getY(), 0.01F);
      assertNull(homeLight1.getShininess());
      assertEquals((-1.0F), homeLight1.getGroundElevation(), 0.01F);
      assertEquals((-1.0F), homeLight1.getElevation(), 0.01F);
      assertFalse(homeLight1.isTexturable());
      assertFalse(homeLight1.isDoorOrWindow());
      assertEquals(0.0F, homeLight1.getNameXOffset(), 0.01F);
      assertNull(homeLight1.getDescription());
      assertEquals(0.0F, homeLight1.getDepth(), 0.01F);
      assertNull(homeLight1.getName());
      assertNull(homeLight1.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight1.getNameAngle(), 0.01F);
      assertFalse(homeLight1.isMovable());
      assertEquals(0.0F, homeLight1.getHeight(), 0.01F);
      assertEquals(5.025974F, homeLight1.getAngle(), 0.01F);
      assertNull(homeLight1.getCatalogId());
      assertNull(homeLight1.getColor());
      assertEquals(0.5F, homeLight1.getPower(), 0.01F);
      
      homeLight2.setNameAngle(2.0F);
      assertNotSame(homeLight0, homeLight1);
      assertNotSame(homeLight0, homeLight2);
      assertNotSame(homeLight1, homeLight2);
      assertNotSame(homeLight1, homeLight0);
      assertNotSame(homeLight2, homeLight0);
      assertNotSame(homeLight2, homeLight1);
      assertFalse(homeLight0.equals((Object)homeLight1));
      assertFalse(homeLight0.equals((Object)homeLight2));
      assertFalse(homeLight1.equals((Object)homeLight2));
      assertFalse(homeLight1.equals((Object)homeLight0));
      assertFalse(homeLight2.equals((Object)homeLight0));
      assertFalse(homeLight2.equals((Object)homeLight1));
      assertFalse(homeLight0.isResizable());
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertFalse(homeLight0.isMovable());
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertNull(homeLight0.getName());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertNull(homeLight0.getCatalogId());
      assertFalse(homeLight0.isNameVisible());
      assertNull(homeLight0.getColor());
      assertFalse(homeLight0.isBackFaceShown());
      assertFalse(homeLight0.isModelMirrored());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertFalse(homeLight0.isTexturable());
      assertEquals(2.0F, homeLight0.getY(), 0.01F);
      assertEquals((-1.0F), homeLight0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      assertEquals((-1.0F), homeLight0.getElevation(), 0.01F);
      assertNull(homeLight0.getDescription());
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertFalse(homeLight0.isDeformable());
      assertNull(homeLight0.getCurrency());
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertTrue(homeLight0.isVisible());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertNull(homeLight0.getShininess());
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertNull(homeLight1.getCurrency());
      assertEquals(0.0F, homeLight1.getNameYOffset(), 0.01F);
      assertEquals(0.0F, homeLight1.getWidth(), 0.01F);
      assertTrue(homeLight1.isVisible());
      assertFalse(homeLight1.isNameVisible());
      assertFalse(homeLight1.isBackFaceShown());
      assertFalse(homeLight1.isModelMirrored());
      assertFalse(homeLight1.isDeformable());
      assertFalse(homeLight1.isResizable());
      assertEquals(0.0F, homeLight1.getX(), 0.01F);
      assertEquals(2.0F, homeLight1.getY(), 0.01F);
      assertNull(homeLight1.getShininess());
      assertEquals((-1.0F), homeLight1.getGroundElevation(), 0.01F);
      assertEquals((-1.0F), homeLight1.getElevation(), 0.01F);
      assertFalse(homeLight1.isTexturable());
      assertFalse(homeLight1.isDoorOrWindow());
      assertEquals(0.0F, homeLight1.getNameXOffset(), 0.01F);
      assertNull(homeLight1.getDescription());
      assertEquals(0.0F, homeLight1.getDepth(), 0.01F);
      assertNull(homeLight1.getName());
      assertNull(homeLight1.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight1.getNameAngle(), 0.01F);
      assertFalse(homeLight1.isMovable());
      assertEquals(0.0F, homeLight1.getHeight(), 0.01F);
      assertEquals(5.025974F, homeLight1.getAngle(), 0.01F);
      assertNull(homeLight1.getCatalogId());
      assertNull(homeLight1.getColor());
      assertEquals(0.5F, homeLight1.getPower(), 0.01F);
      assertEquals((-1.0F), homeLight2.getElevation(), 0.01F);
      assertNull(homeLight2.getDescription());
      assertFalse(homeLight2.isTexturable());
      assertEquals((-1.0F), homeLight2.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight2.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeLight2.getDepth(), 0.01F);
      assertEquals(0.0F, homeLight2.getX(), 0.01F);
      assertFalse(homeLight2.isModelMirrored());
      assertEquals(2.0F, homeLight2.getY(), 0.01F);
      assertFalse(homeLight2.isDoorOrWindow());
      assertFalse(homeLight2.isBackFaceShown());
      assertNull(homeLight2.getName());
      assertFalse(homeLight2.isNameVisible());
      assertEquals(0.0F, homeLight2.getAngle(), 0.01F);
      assertTrue(homeLight2.isVisible());
      assertEquals(0.0F, homeLight2.getWidth(), 0.01F);
      assertEquals(0.0F, homeLight2.getNameYOffset(), 0.01F);
      assertFalse(homeLight2.isDeformable());
      assertNull(homeLight2.getShininess());
      assertNull(homeLight2.getColor());
      assertNull(homeLight2.getCatalogId());
      assertNull(homeLight2.getStaircaseCutOutShape());
      assertEquals(2.0F, homeLight2.getNameAngle(), 0.01F);
      assertFalse(homeLight2.isResizable());
      assertEquals(0.0F, homeLight2.getHeight(), 0.01F);
      assertEquals(0.5F, homeLight2.getPower(), 0.01F);
      assertNull(homeLight2.getCurrency());
      assertFalse(homeLight2.isMovable());
      
      boolean boolean1 = homeLight1.isBottomLeftPointAt(1.0F, (-1.0F), 0.5F);
      assertNotSame(homeLight0, homeLight1);
      assertNotSame(homeLight0, homeLight2);
      assertNotSame(homeLight1, homeLight2);
      assertNotSame(homeLight1, homeLight0);
      assertFalse(homeLight0.equals((Object)homeLight1));
      assertFalse(homeLight0.equals((Object)homeLight2));
      assertFalse(homeLight1.equals((Object)homeLight2));
      assertFalse(homeLight1.equals((Object)homeLight0));
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      assertFalse(homeLight0.isResizable());
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertFalse(homeLight0.isMovable());
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertNull(homeLight0.getName());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertNull(homeLight0.getCatalogId());
      assertFalse(homeLight0.isNameVisible());
      assertNull(homeLight0.getColor());
      assertFalse(homeLight0.isBackFaceShown());
      assertFalse(homeLight0.isModelMirrored());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertFalse(homeLight0.isTexturable());
      assertEquals(2.0F, homeLight0.getY(), 0.01F);
      assertEquals((-1.0F), homeLight0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      assertEquals((-1.0F), homeLight0.getElevation(), 0.01F);
      assertNull(homeLight0.getDescription());
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertFalse(homeLight0.isDeformable());
      assertNull(homeLight0.getCurrency());
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertTrue(homeLight0.isVisible());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertNull(homeLight0.getShininess());
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertNull(homeLight1.getCurrency());
      assertEquals(0.0F, homeLight1.getNameYOffset(), 0.01F);
      assertEquals(0.0F, homeLight1.getWidth(), 0.01F);
      assertTrue(homeLight1.isVisible());
      assertFalse(homeLight1.isNameVisible());
      assertFalse(homeLight1.isBackFaceShown());
      assertFalse(homeLight1.isModelMirrored());
      assertFalse(homeLight1.isDeformable());
      assertFalse(homeLight1.isResizable());
      assertEquals(0.0F, homeLight1.getX(), 0.01F);
      assertEquals(2.0F, homeLight1.getY(), 0.01F);
      assertNull(homeLight1.getShininess());
      assertEquals((-1.0F), homeLight1.getGroundElevation(), 0.01F);
      assertEquals((-1.0F), homeLight1.getElevation(), 0.01F);
      assertFalse(homeLight1.isTexturable());
      assertFalse(homeLight1.isDoorOrWindow());
      assertEquals(0.0F, homeLight1.getNameXOffset(), 0.01F);
      assertNull(homeLight1.getDescription());
      assertEquals(0.0F, homeLight1.getDepth(), 0.01F);
      assertNull(homeLight1.getName());
      assertNull(homeLight1.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight1.getNameAngle(), 0.01F);
      assertFalse(homeLight1.isMovable());
      assertEquals(0.0F, homeLight1.getHeight(), 0.01F);
      assertEquals(5.025974F, homeLight1.getAngle(), 0.01F);
      assertNull(homeLight1.getCatalogId());
      assertNull(homeLight1.getColor());
      assertEquals(0.5F, homeLight1.getPower(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      assertFalse(boolean0);
      
      Light light0 = mock(Light.class, new ViolatedAssumptionAnswer());
      doReturn((LightSource[]) null).when(light0).getLightSources();
      doReturn((Integer) null).when(light0).getColor();
      doReturn((String) null).when(light0).getCurrency();
      doReturn(0.0F).when(light0).getDepth();
      doReturn((String) null).when(light0).getDescription();
      doReturn(0.0F).when(light0).getElevation();
      doReturn(0.0F).when(light0).getHeight();
      doReturn((Content) null).when(light0).getIcon();
      doReturn((Content) null).when(light0).getModel();
      doReturn((float[][]) null).when(light0).getModelRotation();
      doReturn((String) null).when(light0).getName();
      doReturn((Content) null).when(light0).getPlanIcon();
      doReturn((BigDecimal) null).when(light0).getPrice();
      doReturn((String) null).when(light0).getStaircaseCutOutShape();
      doReturn((BigDecimal) null).when(light0).getValueAddedTaxPercentage();
      doReturn(0.0F).when(light0).getWidth();
      doReturn(false).when(light0).isBackFaceShown();
      doReturn(false).when(light0).isDeformable();
      doReturn(false).when(light0).isDoorOrWindow();
      doReturn(false).when(light0).isMovable();
      doReturn(false).when(light0).isResizable();
      doReturn(false).when(light0).isTexturable();
      byte[] byteArray0 = new byte[5];
      byteArray0[1] = (byte)1;
      HomeLight homeLight0 = new HomeLight(light0);
      assertNotNull(homeLight0);
      assertFalse(homeLight0.isTexturable());
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      assertNull(homeLight0.getDescription());
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertFalse(homeLight0.isResizable());
      assertFalse(homeLight0.isDeformable());
      assertNull(homeLight0.getShininess());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertTrue(homeLight0.isVisible());
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertFalse(homeLight0.isMovable());
      assertNull(homeLight0.getCurrency());
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertNull(homeLight0.getColor());
      assertFalse(homeLight0.isBackFaceShown());
      assertNull(homeLight0.getName());
      assertFalse(homeLight0.isNameVisible());
      assertNull(homeLight0.getCatalogId());
      assertFalse(homeLight0.isModelMirrored());
      
      BigDecimal bigDecimal0 = homeLight0.getValueAddedTax();
      assertNull(bigDecimal0);
      assertFalse(homeLight0.isTexturable());
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      assertNull(homeLight0.getDescription());
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertFalse(homeLight0.isResizable());
      assertFalse(homeLight0.isDeformable());
      assertNull(homeLight0.getShininess());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertTrue(homeLight0.isVisible());
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertFalse(homeLight0.isMovable());
      assertNull(homeLight0.getCurrency());
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertNull(homeLight0.getColor());
      assertFalse(homeLight0.isBackFaceShown());
      assertNull(homeLight0.getName());
      assertFalse(homeLight0.isNameVisible());
      assertNull(homeLight0.getCatalogId());
      assertFalse(homeLight0.isModelMirrored());
      
      Level level0 = homeLight0.getLevel();
      assertNull(level0);
      assertFalse(homeLight0.isTexturable());
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      assertNull(homeLight0.getDescription());
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertFalse(homeLight0.isResizable());
      assertFalse(homeLight0.isDeformable());
      assertNull(homeLight0.getShininess());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertTrue(homeLight0.isVisible());
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertFalse(homeLight0.isMovable());
      assertNull(homeLight0.getCurrency());
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertNull(homeLight0.getColor());
      assertFalse(homeLight0.isBackFaceShown());
      assertNull(homeLight0.getName());
      assertFalse(homeLight0.isNameVisible());
      assertNull(homeLight0.getCatalogId());
      assertFalse(homeLight0.isModelMirrored());
      
      homeLight0.setAngle(15.392136F);
      assertFalse(homeLight0.isTexturable());
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      assertNull(homeLight0.getDescription());
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertFalse(homeLight0.isResizable());
      assertFalse(homeLight0.isDeformable());
      assertEquals(2.825765F, homeLight0.getAngle(), 0.01F);
      assertNull(homeLight0.getShininess());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertTrue(homeLight0.isVisible());
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertFalse(homeLight0.isMovable());
      assertNull(homeLight0.getCurrency());
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertNull(homeLight0.getColor());
      assertFalse(homeLight0.isBackFaceShown());
      assertNull(homeLight0.getName());
      assertFalse(homeLight0.isNameVisible());
      assertNull(homeLight0.getCatalogId());
      assertFalse(homeLight0.isModelMirrored());
      
      homeLight0.setName("LEVEL");
      assertFalse(homeLight0.isTexturable());
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      assertNull(homeLight0.getDescription());
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertFalse(homeLight0.isResizable());
      assertFalse(homeLight0.isDeformable());
      assertEquals(2.825765F, homeLight0.getAngle(), 0.01F);
      assertNull(homeLight0.getShininess());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertTrue(homeLight0.isVisible());
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertFalse(homeLight0.isMovable());
      assertNull(homeLight0.getCurrency());
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertNull(homeLight0.getColor());
      assertFalse(homeLight0.isBackFaceShown());
      assertEquals("LEVEL", homeLight0.getName());
      assertFalse(homeLight0.isNameVisible());
      assertNull(homeLight0.getCatalogId());
      assertFalse(homeLight0.isModelMirrored());
      
      Integer integer0 = Integer.valueOf((int) (byte)62);
      assertNotNull(integer0);
      assertEquals(62, (int)integer0);
      
      HomeLight homeLight1 = homeLight0.clone();
      assertNotNull(homeLight1);
      assertNotSame(homeLight0, homeLight1);
      assertNotSame(homeLight1, homeLight0);
      assertFalse(homeLight1.equals((Object)homeLight0));
      assertFalse(homeLight0.isTexturable());
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      assertNull(homeLight0.getDescription());
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertFalse(homeLight0.isResizable());
      assertFalse(homeLight0.isDeformable());
      assertEquals(2.825765F, homeLight0.getAngle(), 0.01F);
      assertNull(homeLight0.getShininess());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertTrue(homeLight0.isVisible());
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertFalse(homeLight0.isMovable());
      assertNull(homeLight0.getCurrency());
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertNull(homeLight0.getColor());
      assertFalse(homeLight0.isBackFaceShown());
      assertEquals("LEVEL", homeLight0.getName());
      assertFalse(homeLight0.isNameVisible());
      assertNull(homeLight0.getCatalogId());
      assertFalse(homeLight0.isModelMirrored());
      assertEquals(0.0F, homeLight1.getDepth(), 0.01F);
      assertEquals(0.0F, homeLight1.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeLight1.getNameAngle(), 0.01F);
      assertEquals(0.5F, homeLight1.getPower(), 0.01F);
      assertNull(homeLight1.getStaircaseCutOutShape());
      assertNull(homeLight1.getDescription());
      assertEquals(0.0F, homeLight1.getElevation(), 0.01F);
      assertNull(homeLight1.getCatalogId());
      assertEquals(0.0F, homeLight1.getGroundElevation(), 0.01F);
      assertFalse(homeLight1.isResizable());
      assertEquals(0.0F, homeLight1.getHeight(), 0.01F);
      assertFalse(homeLight1.isMovable());
      assertEquals(2.825765F, homeLight1.getAngle(), 0.01F);
      assertNull(homeLight1.getShininess());
      assertFalse(homeLight1.isDeformable());
      assertNull(homeLight1.getCurrency());
      assertEquals(0.0F, homeLight1.getWidth(), 0.01F);
      assertTrue(homeLight1.isVisible());
      assertEquals(0.0F, homeLight1.getNameYOffset(), 0.01F);
      assertEquals(0.0F, homeLight1.getY(), 0.01F);
      assertEquals(0.0F, homeLight1.getX(), 0.01F);
      assertNull(homeLight1.getColor());
      assertFalse(homeLight1.isTexturable());
      assertFalse(homeLight1.isDoorOrWindow());
      assertFalse(homeLight1.isModelMirrored());
      assertEquals("LEVEL", homeLight1.getName());
      assertFalse(homeLight1.isBackFaceShown());
      assertFalse(homeLight1.isNameVisible());
      
      homeLight0.move((byte)1, (byte)62);
      assertNotSame(homeLight0, homeLight1);
      assertFalse(homeLight0.equals((Object)homeLight1));
      assertFalse(homeLight0.isTexturable());
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      assertNull(homeLight0.getDescription());
      assertEquals(62.0F, homeLight0.getY(), 0.01F);
      assertEquals(1.0F, homeLight0.getX(), 0.01F);
      assertFalse(homeLight0.isResizable());
      assertFalse(homeLight0.isDeformable());
      assertEquals(2.825765F, homeLight0.getAngle(), 0.01F);
      assertNull(homeLight0.getShininess());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertTrue(homeLight0.isVisible());
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertFalse(homeLight0.isMovable());
      assertNull(homeLight0.getCurrency());
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertNull(homeLight0.getColor());
      assertFalse(homeLight0.isBackFaceShown());
      assertEquals("LEVEL", homeLight0.getName());
      assertFalse(homeLight0.isNameVisible());
      assertNull(homeLight0.getCatalogId());
      assertFalse(homeLight0.isModelMirrored());
      
      homeLight1.setDescription("\nko(PCp");
      assertNotSame(homeLight0, homeLight1);
      assertNotSame(homeLight1, homeLight0);
      assertFalse(homeLight0.equals((Object)homeLight1));
      assertFalse(homeLight1.equals((Object)homeLight0));
      assertFalse(homeLight0.isTexturable());
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      assertNull(homeLight0.getDescription());
      assertEquals(62.0F, homeLight0.getY(), 0.01F);
      assertEquals(1.0F, homeLight0.getX(), 0.01F);
      assertFalse(homeLight0.isResizable());
      assertFalse(homeLight0.isDeformable());
      assertEquals(2.825765F, homeLight0.getAngle(), 0.01F);
      assertNull(homeLight0.getShininess());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertTrue(homeLight0.isVisible());
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertFalse(homeLight0.isMovable());
      assertNull(homeLight0.getCurrency());
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertNull(homeLight0.getColor());
      assertFalse(homeLight0.isBackFaceShown());
      assertEquals("LEVEL", homeLight0.getName());
      assertFalse(homeLight0.isNameVisible());
      assertNull(homeLight0.getCatalogId());
      assertFalse(homeLight0.isModelMirrored());
      assertEquals(0.0F, homeLight1.getDepth(), 0.01F);
      assertEquals(0.0F, homeLight1.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeLight1.getNameAngle(), 0.01F);
      assertEquals(0.5F, homeLight1.getPower(), 0.01F);
      assertNull(homeLight1.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight1.getElevation(), 0.01F);
      assertNull(homeLight1.getCatalogId());
      assertEquals(0.0F, homeLight1.getGroundElevation(), 0.01F);
      assertFalse(homeLight1.isResizable());
      assertEquals(0.0F, homeLight1.getHeight(), 0.01F);
      assertFalse(homeLight1.isMovable());
      assertEquals(2.825765F, homeLight1.getAngle(), 0.01F);
      assertNull(homeLight1.getShininess());
      assertFalse(homeLight1.isDeformable());
      assertNull(homeLight1.getCurrency());
      assertEquals(0.0F, homeLight1.getWidth(), 0.01F);
      assertTrue(homeLight1.isVisible());
      assertEquals(0.0F, homeLight1.getNameYOffset(), 0.01F);
      assertEquals(0.0F, homeLight1.getY(), 0.01F);
      assertEquals(0.0F, homeLight1.getX(), 0.01F);
      assertNull(homeLight1.getColor());
      assertFalse(homeLight1.isTexturable());
      assertFalse(homeLight1.isDoorOrWindow());
      assertFalse(homeLight1.isModelMirrored());
      assertEquals("\nko(PCp", homeLight1.getDescription());
      assertEquals("LEVEL", homeLight1.getName());
      assertFalse(homeLight1.isBackFaceShown());
      assertFalse(homeLight1.isNameVisible());
      
      HomeLight homeLight2 = homeLight1.clone();
      assertNotNull(homeLight2);
      assertNotSame(homeLight0, homeLight1);
      assertNotSame(homeLight0, homeLight2);
      assertNotSame(homeLight1, homeLight0);
      assertNotSame(homeLight1, homeLight2);
      assertNotSame(homeLight2, homeLight0);
      assertNotSame(homeLight2, homeLight1);
      assertFalse(homeLight0.equals((Object)homeLight1));
      assertFalse(homeLight1.equals((Object)homeLight0));
      assertFalse(homeLight2.equals((Object)homeLight0));
      assertFalse(homeLight2.equals((Object)homeLight1));
      assertFalse(homeLight0.isTexturable());
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      assertNull(homeLight0.getDescription());
      assertEquals(62.0F, homeLight0.getY(), 0.01F);
      assertEquals(1.0F, homeLight0.getX(), 0.01F);
      assertFalse(homeLight0.isResizable());
      assertFalse(homeLight0.isDeformable());
      assertEquals(2.825765F, homeLight0.getAngle(), 0.01F);
      assertNull(homeLight0.getShininess());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertTrue(homeLight0.isVisible());
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertFalse(homeLight0.isMovable());
      assertNull(homeLight0.getCurrency());
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertNull(homeLight0.getColor());
      assertFalse(homeLight0.isBackFaceShown());
      assertEquals("LEVEL", homeLight0.getName());
      assertFalse(homeLight0.isNameVisible());
      assertNull(homeLight0.getCatalogId());
      assertFalse(homeLight0.isModelMirrored());
      assertEquals(0.0F, homeLight1.getDepth(), 0.01F);
      assertEquals(0.0F, homeLight1.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeLight1.getNameAngle(), 0.01F);
      assertEquals(0.5F, homeLight1.getPower(), 0.01F);
      assertNull(homeLight1.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight1.getElevation(), 0.01F);
      assertNull(homeLight1.getCatalogId());
      assertEquals(0.0F, homeLight1.getGroundElevation(), 0.01F);
      assertFalse(homeLight1.isResizable());
      assertEquals(0.0F, homeLight1.getHeight(), 0.01F);
      assertFalse(homeLight1.isMovable());
      assertEquals(2.825765F, homeLight1.getAngle(), 0.01F);
      assertNull(homeLight1.getShininess());
      assertFalse(homeLight1.isDeformable());
      assertNull(homeLight1.getCurrency());
      assertEquals(0.0F, homeLight1.getWidth(), 0.01F);
      assertTrue(homeLight1.isVisible());
      assertEquals(0.0F, homeLight1.getNameYOffset(), 0.01F);
      assertEquals(0.0F, homeLight1.getY(), 0.01F);
      assertEquals(0.0F, homeLight1.getX(), 0.01F);
      assertNull(homeLight1.getColor());
      assertFalse(homeLight1.isTexturable());
      assertFalse(homeLight1.isDoorOrWindow());
      assertFalse(homeLight1.isModelMirrored());
      assertEquals("\nko(PCp", homeLight1.getDescription());
      assertEquals("LEVEL", homeLight1.getName());
      assertFalse(homeLight1.isBackFaceShown());
      assertFalse(homeLight1.isNameVisible());
      assertEquals(0.0F, homeLight2.getHeight(), 0.01F);
      assertFalse(homeLight2.isResizable());
      assertFalse(homeLight2.isMovable());
      assertEquals(2.825765F, homeLight2.getAngle(), 0.01F);
      assertNull(homeLight2.getShininess());
      assertTrue(homeLight2.isVisible());
      assertNull(homeLight2.getCatalogId());
      assertEquals(0.0F, homeLight2.getNameYOffset(), 0.01F);
      assertEquals(0.0F, homeLight2.getDepth(), 0.01F);
      assertFalse(homeLight2.isDeformable());
      assertNull(homeLight2.getCurrency());
      assertEquals(0.0F, homeLight2.getNameAngle(), 0.01F);
      assertEquals(0.5F, homeLight2.getPower(), 0.01F);
      assertNull(homeLight2.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight2.getGroundElevation(), 0.01F);
      assertFalse(homeLight2.isTexturable());
      assertFalse(homeLight2.isDoorOrWindow());
      assertFalse(homeLight2.isModelMirrored());
      assertEquals(0.0F, homeLight2.getY(), 0.01F);
      assertEquals(0.0F, homeLight2.getNameXOffset(), 0.01F);
      assertNull(homeLight2.getColor());
      assertEquals(0.0F, homeLight2.getX(), 0.01F);
      assertEquals(0.0F, homeLight2.getElevation(), 0.01F);
      assertEquals(0.0F, homeLight2.getWidth(), 0.01F);
      assertEquals("LEVEL", homeLight2.getName());
      assertEquals("\nko(PCp", homeLight2.getDescription());
      assertFalse(homeLight2.isBackFaceShown());
      assertFalse(homeLight2.isNameVisible());
      
      String string0 = homeLight2.getDescription();
      assertNotNull(string0);
      assertNotSame(homeLight0, homeLight1);
      assertNotSame(homeLight0, homeLight2);
      assertNotSame(homeLight1, homeLight0);
      assertNotSame(homeLight1, homeLight2);
      assertNotSame(homeLight2, homeLight0);
      assertNotSame(homeLight2, homeLight1);
      assertFalse(homeLight0.equals((Object)homeLight1));
      assertFalse(homeLight0.equals((Object)homeLight2));
      assertFalse(homeLight1.equals((Object)homeLight0));
      assertFalse(homeLight1.equals((Object)homeLight2));
      assertFalse(homeLight2.equals((Object)homeLight0));
      assertFalse(homeLight2.equals((Object)homeLight1));
      assertEquals("\nko(PCp", string0);
      assertFalse(homeLight0.isTexturable());
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      assertNull(homeLight0.getDescription());
      assertEquals(62.0F, homeLight0.getY(), 0.01F);
      assertEquals(1.0F, homeLight0.getX(), 0.01F);
      assertFalse(homeLight0.isResizable());
      assertFalse(homeLight0.isDeformable());
      assertEquals(2.825765F, homeLight0.getAngle(), 0.01F);
      assertNull(homeLight0.getShininess());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertTrue(homeLight0.isVisible());
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertFalse(homeLight0.isMovable());
      assertNull(homeLight0.getCurrency());
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertNull(homeLight0.getColor());
      assertFalse(homeLight0.isBackFaceShown());
      assertEquals("LEVEL", homeLight0.getName());
      assertFalse(homeLight0.isNameVisible());
      assertNull(homeLight0.getCatalogId());
      assertFalse(homeLight0.isModelMirrored());
      assertEquals(0.0F, homeLight1.getDepth(), 0.01F);
      assertEquals(0.0F, homeLight1.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeLight1.getNameAngle(), 0.01F);
      assertEquals(0.5F, homeLight1.getPower(), 0.01F);
      assertNull(homeLight1.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight1.getElevation(), 0.01F);
      assertNull(homeLight1.getCatalogId());
      assertEquals(0.0F, homeLight1.getGroundElevation(), 0.01F);
      assertFalse(homeLight1.isResizable());
      assertEquals(0.0F, homeLight1.getHeight(), 0.01F);
      assertFalse(homeLight1.isMovable());
      assertEquals(2.825765F, homeLight1.getAngle(), 0.01F);
      assertNull(homeLight1.getShininess());
      assertFalse(homeLight1.isDeformable());
      assertNull(homeLight1.getCurrency());
      assertEquals(0.0F, homeLight1.getWidth(), 0.01F);
      assertTrue(homeLight1.isVisible());
      assertEquals(0.0F, homeLight1.getNameYOffset(), 0.01F);
      assertEquals(0.0F, homeLight1.getY(), 0.01F);
      assertEquals(0.0F, homeLight1.getX(), 0.01F);
      assertNull(homeLight1.getColor());
      assertFalse(homeLight1.isTexturable());
      assertFalse(homeLight1.isDoorOrWindow());
      assertFalse(homeLight1.isModelMirrored());
      assertEquals("\nko(PCp", homeLight1.getDescription());
      assertEquals("LEVEL", homeLight1.getName());
      assertFalse(homeLight1.isBackFaceShown());
      assertFalse(homeLight1.isNameVisible());
      assertEquals(0.0F, homeLight2.getHeight(), 0.01F);
      assertFalse(homeLight2.isResizable());
      assertFalse(homeLight2.isMovable());
      assertEquals(2.825765F, homeLight2.getAngle(), 0.01F);
      assertNull(homeLight2.getShininess());
      assertTrue(homeLight2.isVisible());
      assertNull(homeLight2.getCatalogId());
      assertEquals(0.0F, homeLight2.getNameYOffset(), 0.01F);
      assertEquals(0.0F, homeLight2.getDepth(), 0.01F);
      assertFalse(homeLight2.isDeformable());
      assertNull(homeLight2.getCurrency());
      assertEquals(0.0F, homeLight2.getNameAngle(), 0.01F);
      assertEquals(0.5F, homeLight2.getPower(), 0.01F);
      assertNull(homeLight2.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight2.getGroundElevation(), 0.01F);
      assertFalse(homeLight2.isTexturable());
      assertFalse(homeLight2.isDoorOrWindow());
      assertFalse(homeLight2.isModelMirrored());
      assertEquals(0.0F, homeLight2.getY(), 0.01F);
      assertEquals(0.0F, homeLight2.getNameXOffset(), 0.01F);
      assertNull(homeLight2.getColor());
      assertEquals(0.0F, homeLight2.getX(), 0.01F);
      assertEquals(0.0F, homeLight2.getElevation(), 0.01F);
      assertEquals(0.0F, homeLight2.getWidth(), 0.01F);
      assertEquals("LEVEL", homeLight2.getName());
      assertEquals("\nko(PCp", homeLight2.getDescription());
      assertFalse(homeLight2.isBackFaceShown());
      assertFalse(homeLight2.isNameVisible());
      
      boolean boolean1 = homeLight1.isNameCenterPointAt((-2735.53F), 10.0F, (-118.9F));
      assertNotSame(homeLight0, homeLight1);
      assertNotSame(homeLight0, homeLight2);
      assertNotSame(homeLight1, homeLight0);
      assertNotSame(homeLight1, homeLight2);
      assertFalse(homeLight0.equals((Object)homeLight1));
      assertFalse(homeLight0.equals((Object)homeLight2));
      assertFalse(homeLight1.equals((Object)homeLight0));
      assertFalse(homeLight1.equals((Object)homeLight2));
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      assertFalse(homeLight0.isTexturable());
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      assertNull(homeLight0.getDescription());
      assertEquals(62.0F, homeLight0.getY(), 0.01F);
      assertEquals(1.0F, homeLight0.getX(), 0.01F);
      assertFalse(homeLight0.isResizable());
      assertFalse(homeLight0.isDeformable());
      assertEquals(2.825765F, homeLight0.getAngle(), 0.01F);
      assertNull(homeLight0.getShininess());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertTrue(homeLight0.isVisible());
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertFalse(homeLight0.isMovable());
      assertNull(homeLight0.getCurrency());
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertNull(homeLight0.getColor());
      assertFalse(homeLight0.isBackFaceShown());
      assertEquals("LEVEL", homeLight0.getName());
      assertFalse(homeLight0.isNameVisible());
      assertNull(homeLight0.getCatalogId());
      assertFalse(homeLight0.isModelMirrored());
      assertEquals(0.0F, homeLight1.getDepth(), 0.01F);
      assertEquals(0.0F, homeLight1.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeLight1.getNameAngle(), 0.01F);
      assertEquals(0.5F, homeLight1.getPower(), 0.01F);
      assertNull(homeLight1.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight1.getElevation(), 0.01F);
      assertNull(homeLight1.getCatalogId());
      assertEquals(0.0F, homeLight1.getGroundElevation(), 0.01F);
      assertFalse(homeLight1.isResizable());
      assertEquals(0.0F, homeLight1.getHeight(), 0.01F);
      assertFalse(homeLight1.isMovable());
      assertEquals(2.825765F, homeLight1.getAngle(), 0.01F);
      assertNull(homeLight1.getShininess());
      assertFalse(homeLight1.isDeformable());
      assertNull(homeLight1.getCurrency());
      assertEquals(0.0F, homeLight1.getWidth(), 0.01F);
      assertTrue(homeLight1.isVisible());
      assertEquals(0.0F, homeLight1.getNameYOffset(), 0.01F);
      assertEquals(0.0F, homeLight1.getY(), 0.01F);
      assertEquals(0.0F, homeLight1.getX(), 0.01F);
      assertNull(homeLight1.getColor());
      assertFalse(homeLight1.isTexturable());
      assertFalse(homeLight1.isDoorOrWindow());
      assertFalse(homeLight1.isModelMirrored());
      assertEquals("\nko(PCp", homeLight1.getDescription());
      assertEquals("LEVEL", homeLight1.getName());
      assertFalse(homeLight1.isBackFaceShown());
      assertFalse(homeLight1.isNameVisible());
      
      TextStyle textStyle0 = homeLight0.getNameStyle();
      assertNull(textStyle0);
      assertNotSame(homeLight0, homeLight1);
      assertNotSame(homeLight0, homeLight2);
      assertFalse(homeLight0.equals((Object)homeLight1));
      assertFalse(homeLight0.equals((Object)homeLight2));
      assertFalse(homeLight0.isTexturable());
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      assertNull(homeLight0.getDescription());
      assertEquals(62.0F, homeLight0.getY(), 0.01F);
      assertEquals(1.0F, homeLight0.getX(), 0.01F);
      assertFalse(homeLight0.isResizable());
      assertFalse(homeLight0.isDeformable());
      assertEquals(2.825765F, homeLight0.getAngle(), 0.01F);
      assertNull(homeLight0.getShininess());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertTrue(homeLight0.isVisible());
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertFalse(homeLight0.isMovable());
      assertNull(homeLight0.getCurrency());
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertNull(homeLight0.getColor());
      assertFalse(homeLight0.isBackFaceShown());
      assertEquals("LEVEL", homeLight0.getName());
      assertFalse(homeLight0.isNameVisible());
      assertNull(homeLight0.getCatalogId());
      assertFalse(homeLight0.isModelMirrored());
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      LightSource[] lightSourceArray0 = new LightSource[2];
      LightSource lightSource0 = new LightSource((-1.0F), (-1457.99F), 381.9F, 1431655765);
      assertNotNull(lightSource0);
      assertEquals((-1457.99F), lightSource0.getY(), 0.01F);
      assertEquals((-1.0F), lightSource0.getX(), 0.01F);
      assertNull(lightSource0.getDiameter());
      assertEquals(1431655765, lightSource0.getColor());
      assertEquals(381.9F, lightSource0.getZ(), 0.01F);
      
      lightSourceArray0[0] = lightSource0;
      LightSource lightSource1 = new LightSource((-1.0F), (-69.47F), 700.4569F, (-853));
      assertNotNull(lightSource1);
      assertFalse(lightSource1.equals((Object)lightSource0));
      assertEquals((-853), lightSource1.getColor());
      assertEquals((-69.47F), lightSource1.getY(), 0.01F);
      assertNull(lightSource1.getDiameter());
      assertEquals(700.4569F, lightSource1.getZ(), 0.01F);
      assertEquals((-1.0F), lightSource1.getX(), 0.01F);
      
      lightSourceArray0[1] = lightSource1;
      Integer integer0 = new Integer((-853));
      assertNotNull(integer0);
      assertEquals((-853), (int)integer0);
      
      Light light0 = mock(Light.class, new ViolatedAssumptionAnswer());
      doReturn((LightSource[]) null).when(light0).getLightSources();
      doReturn((Integer) null).when(light0).getColor();
      doReturn((String) null).when(light0).getCurrency();
      doReturn(0.0F).when(light0).getDepth();
      doReturn((String) null).when(light0).getDescription();
      doReturn(0.0F).when(light0).getElevation();
      doReturn(0.0F).when(light0).getHeight();
      doReturn((Content) null).when(light0).getIcon();
      doReturn((Content) null).when(light0).getModel();
      doReturn((float[][]) null).when(light0).getModelRotation();
      doReturn((String) null).when(light0).getName();
      doReturn((Content) null).when(light0).getPlanIcon();
      doReturn((BigDecimal) null).when(light0).getPrice();
      doReturn((String) null).when(light0).getStaircaseCutOutShape();
      doReturn((BigDecimal) null).when(light0).getValueAddedTaxPercentage();
      doReturn(0.0F).when(light0).getWidth();
      doReturn(false).when(light0).isBackFaceShown();
      doReturn(false).when(light0).isDeformable();
      doReturn(false).when(light0).isDoorOrWindow();
      doReturn(false).when(light0).isMovable();
      doReturn(false).when(light0).isResizable();
      doReturn(false).when(light0).isTexturable();
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)13;
      byteArray0[1] = (byte)1;
      byteArray0[2] = (byte) (-113);
      byteArray0[3] = (byte) (-32);
      byteArray0[4] = (byte)62;
      boolean boolean0 = FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      assertEquals(5, byteArray0.length);
      assertFalse(boolean0);
      assertArrayEquals(new byte[] {(byte)13, (byte)1, (byte) (-113), (byte) (-32), (byte)62}, byteArray0);
      
      HomeLight homeLight0 = new HomeLight(light0);
      assertNotNull(homeLight0);
      assertFalse(homeLight0.isNameVisible());
      assertFalse(homeLight0.isDeformable());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertNull(homeLight0.getCurrency());
      assertFalse(homeLight0.isMovable());
      assertFalse(homeLight0.isResizable());
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      assertFalse(homeLight0.isTexturable());
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertNull(homeLight0.getShininess());
      assertTrue(homeLight0.isVisible());
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertNull(homeLight0.getDescription());
      assertNull(homeLight0.getName());
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertFalse(homeLight0.isBackFaceShown());
      assertNull(homeLight0.getColor());
      assertNull(homeLight0.getCatalogId());
      assertFalse(homeLight0.isModelMirrored());
      
      float float0 = (-1.0F);
      homeLight0.setY((-1.0F));
      assertFalse(homeLight0.isNameVisible());
      assertFalse(homeLight0.isDeformable());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertNull(homeLight0.getCurrency());
      assertFalse(homeLight0.isMovable());
      assertFalse(homeLight0.isResizable());
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      assertFalse(homeLight0.isTexturable());
      assertEquals((-1.0F), homeLight0.getY(), 0.01F);
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertNull(homeLight0.getShininess());
      assertTrue(homeLight0.isVisible());
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertNull(homeLight0.getDescription());
      assertNull(homeLight0.getName());
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertFalse(homeLight0.isBackFaceShown());
      assertNull(homeLight0.getColor());
      assertNull(homeLight0.getCatalogId());
      assertFalse(homeLight0.isModelMirrored());
      
      BigDecimal bigDecimal0 = homeLight0.getValueAddedTax();
      assertNull(bigDecimal0);
      assertFalse(homeLight0.isNameVisible());
      assertFalse(homeLight0.isDeformable());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertNull(homeLight0.getCurrency());
      assertFalse(homeLight0.isMovable());
      assertFalse(homeLight0.isResizable());
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      assertFalse(homeLight0.isTexturable());
      assertEquals((-1.0F), homeLight0.getY(), 0.01F);
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertNull(homeLight0.getShininess());
      assertTrue(homeLight0.isVisible());
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertNull(homeLight0.getDescription());
      assertNull(homeLight0.getName());
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertFalse(homeLight0.isBackFaceShown());
      assertNull(homeLight0.getColor());
      assertNull(homeLight0.getCatalogId());
      assertFalse(homeLight0.isModelMirrored());
      
      BigDecimal bigDecimal1 = homeLight0.getValueAddedTax();
      assertNull(bigDecimal1);
      assertFalse(homeLight0.isNameVisible());
      assertFalse(homeLight0.isDeformable());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertNull(homeLight0.getCurrency());
      assertFalse(homeLight0.isMovable());
      assertFalse(homeLight0.isResizable());
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      assertFalse(homeLight0.isTexturable());
      assertEquals((-1.0F), homeLight0.getY(), 0.01F);
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertNull(homeLight0.getShininess());
      assertTrue(homeLight0.isVisible());
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertNull(homeLight0.getDescription());
      assertNull(homeLight0.getName());
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertFalse(homeLight0.isBackFaceShown());
      assertNull(homeLight0.getColor());
      assertNull(homeLight0.getCatalogId());
      assertFalse(homeLight0.isModelMirrored());
      
      String string0 = homeLight0.getName();
      assertNull(string0);
      assertFalse(homeLight0.isNameVisible());
      assertFalse(homeLight0.isDeformable());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertNull(homeLight0.getCurrency());
      assertFalse(homeLight0.isMovable());
      assertFalse(homeLight0.isResizable());
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      assertFalse(homeLight0.isTexturable());
      assertEquals((-1.0F), homeLight0.getY(), 0.01F);
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertNull(homeLight0.getShininess());
      assertTrue(homeLight0.isVisible());
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertNull(homeLight0.getDescription());
      assertNull(homeLight0.getName());
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertFalse(homeLight0.isBackFaceShown());
      assertNull(homeLight0.getColor());
      assertNull(homeLight0.getCatalogId());
      assertFalse(homeLight0.isModelMirrored());
      
      Level level0 = homeLight0.getLevel();
      assertNull(level0);
      assertFalse(homeLight0.isNameVisible());
      assertFalse(homeLight0.isDeformable());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertNull(homeLight0.getCurrency());
      assertFalse(homeLight0.isMovable());
      assertFalse(homeLight0.isResizable());
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      assertFalse(homeLight0.isTexturable());
      assertEquals((-1.0F), homeLight0.getY(), 0.01F);
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertNull(homeLight0.getShininess());
      assertTrue(homeLight0.isVisible());
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertNull(homeLight0.getDescription());
      assertNull(homeLight0.getName());
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertFalse(homeLight0.isBackFaceShown());
      assertNull(homeLight0.getColor());
      assertNull(homeLight0.getCatalogId());
      assertFalse(homeLight0.isModelMirrored());
      
      HomeLight homeLight1 = homeLight0.clone();
      assertNotNull(homeLight1);
      assertNotSame(homeLight1, homeLight0);
      assertNotSame(homeLight0, homeLight1);
      assertFalse(homeLight1.equals((Object)homeLight0));
      assertFalse(homeLight1.isTexturable());
      assertEquals(0.0F, homeLight1.getAngle(), 0.01F);
      assertEquals(0.0F, homeLight1.getElevation(), 0.01F);
      assertNull(homeLight1.getDescription());
      assertEquals((-1.0F), homeLight1.getY(), 0.01F);
      assertFalse(homeLight1.isDoorOrWindow());
      assertEquals(0.0F, homeLight1.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight1.getNameXOffset(), 0.01F);
      assertNull(homeLight1.getColor());
      assertEquals(0.0F, homeLight1.getX(), 0.01F);
      assertEquals(0.0F, homeLight1.getNameAngle(), 0.01F);
      assertEquals(0.0F, homeLight1.getDepth(), 0.01F);
      assertFalse(homeLight1.isDeformable());
      assertNull(homeLight1.getShininess());
      assertEquals(0.5F, homeLight1.getPower(), 0.01F);
      assertNull(homeLight1.getStaircaseCutOutShape());
      assertNull(homeLight1.getCurrency());
      assertFalse(homeLight1.isMovable());
      assertEquals(0.0F, homeLight1.getHeight(), 0.01F);
      assertFalse(homeLight1.isResizable());
      assertTrue(homeLight1.isVisible());
      assertEquals(0.0F, homeLight1.getWidth(), 0.01F);
      assertNull(homeLight1.getCatalogId());
      assertEquals(0.0F, homeLight1.getNameYOffset(), 0.01F);
      assertFalse(homeLight1.isModelMirrored());
      assertFalse(homeLight1.isBackFaceShown());
      assertNull(homeLight1.getName());
      assertFalse(homeLight1.isNameVisible());
      assertFalse(homeLight0.isNameVisible());
      assertFalse(homeLight0.isDeformable());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertNull(homeLight0.getCurrency());
      assertFalse(homeLight0.isMovable());
      assertFalse(homeLight0.isResizable());
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      assertFalse(homeLight0.isTexturable());
      assertEquals((-1.0F), homeLight0.getY(), 0.01F);
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertNull(homeLight0.getShininess());
      assertTrue(homeLight0.isVisible());
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertNull(homeLight0.getDescription());
      assertNull(homeLight0.getName());
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertFalse(homeLight0.isBackFaceShown());
      assertNull(homeLight0.getColor());
      assertNull(homeLight0.getCatalogId());
      assertFalse(homeLight0.isModelMirrored());
      
      homeLight1.setName((String) null);
      assertNotSame(homeLight1, homeLight0);
      assertNotSame(homeLight0, homeLight1);
      assertFalse(homeLight1.equals((Object)homeLight0));
      assertFalse(homeLight0.equals((Object)homeLight1));
      assertFalse(homeLight1.isTexturable());
      assertEquals(0.0F, homeLight1.getAngle(), 0.01F);
      assertEquals(0.0F, homeLight1.getElevation(), 0.01F);
      assertNull(homeLight1.getDescription());
      assertEquals((-1.0F), homeLight1.getY(), 0.01F);
      assertFalse(homeLight1.isDoorOrWindow());
      assertEquals(0.0F, homeLight1.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight1.getNameXOffset(), 0.01F);
      assertNull(homeLight1.getColor());
      assertEquals(0.0F, homeLight1.getX(), 0.01F);
      assertEquals(0.0F, homeLight1.getNameAngle(), 0.01F);
      assertEquals(0.0F, homeLight1.getDepth(), 0.01F);
      assertFalse(homeLight1.isDeformable());
      assertNull(homeLight1.getShininess());
      assertEquals(0.5F, homeLight1.getPower(), 0.01F);
      assertNull(homeLight1.getStaircaseCutOutShape());
      assertNull(homeLight1.getCurrency());
      assertFalse(homeLight1.isMovable());
      assertEquals(0.0F, homeLight1.getHeight(), 0.01F);
      assertFalse(homeLight1.isResizable());
      assertTrue(homeLight1.isVisible());
      assertEquals(0.0F, homeLight1.getWidth(), 0.01F);
      assertNull(homeLight1.getCatalogId());
      assertEquals(0.0F, homeLight1.getNameYOffset(), 0.01F);
      assertFalse(homeLight1.isModelMirrored());
      assertFalse(homeLight1.isBackFaceShown());
      assertNull(homeLight1.getName());
      assertFalse(homeLight1.isNameVisible());
      assertFalse(homeLight0.isNameVisible());
      assertFalse(homeLight0.isDeformable());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertNull(homeLight0.getCurrency());
      assertFalse(homeLight0.isMovable());
      assertFalse(homeLight0.isResizable());
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      assertFalse(homeLight0.isTexturable());
      assertEquals((-1.0F), homeLight0.getY(), 0.01F);
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertNull(homeLight0.getShininess());
      assertTrue(homeLight0.isVisible());
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertNull(homeLight0.getDescription());
      assertNull(homeLight0.getName());
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertFalse(homeLight0.isBackFaceShown());
      assertNull(homeLight0.getColor());
      assertNull(homeLight0.getCatalogId());
      assertFalse(homeLight0.isModelMirrored());
      
      Integer integer1 = Integer.valueOf(21);
      assertNotNull(integer1);
      assertFalse(integer1.equals((Object)integer0));
      assertEquals(21, (int)integer1);
      
      Integer integer2 = Integer.valueOf(0);
      assertNotNull(integer2);
      assertFalse(integer2.equals((Object)integer1));
      assertFalse(integer2.equals((Object)integer0));
      assertEquals(0, (int)integer2);
      
      Integer integer3 = Integer.valueOf(0);
      assertNotNull(integer3);
      assertFalse(integer3.equals((Object)integer0));
      assertFalse(integer3.equals((Object)integer1));
      assertEquals(0, (int)integer3);
      
      // Undeclared exception!
      try { 
        homeLight1.setColor(integer3);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Piece isn't texturable
         //
         verifyException("com.eteks.sweethome3d.model.HomePieceOfFurniture", e);
      }
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      Light light0 = mock(Light.class, new ViolatedAssumptionAnswer());
      doReturn((LightSource[]) null).when(light0).getLightSources();
      doReturn((Integer) null).when(light0).getColor();
      doReturn((String) null).when(light0).getCurrency();
      doReturn(0.0F).when(light0).getDepth();
      doReturn((String) null).when(light0).getDescription();
      doReturn(0.0F).when(light0).getElevation();
      doReturn(0.0F).when(light0).getHeight();
      doReturn((Content) null).when(light0).getIcon();
      doReturn((Content) null).when(light0).getModel();
      doReturn((float[][]) null).when(light0).getModelRotation();
      doReturn((String) null).when(light0).getName();
      doReturn((Content) null).when(light0).getPlanIcon();
      doReturn((BigDecimal) null).when(light0).getPrice();
      doReturn((String) null).when(light0).getStaircaseCutOutShape();
      doReturn((BigDecimal) null).when(light0).getValueAddedTaxPercentage();
      doReturn(0.0F).when(light0).getWidth();
      doReturn(false).when(light0).isBackFaceShown();
      doReturn(false).when(light0).isDeformable();
      doReturn(false).when(light0).isDoorOrWindow();
      doReturn(false).when(light0).isMovable();
      doReturn(false).when(light0).isResizable();
      doReturn(false).when(light0).isTexturable();
      HomeLight homeLight0 = new HomeLight(light0);
      assertNotNull(homeLight0);
      assertFalse(homeLight0.isBackFaceShown());
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertNull(homeLight0.getColor());
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertFalse(homeLight0.isNameVisible());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertFalse(homeLight0.isTexturable());
      assertFalse(homeLight0.isDoorOrWindow());
      assertNull(homeLight0.getCurrency());
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertNull(homeLight0.getName());
      assertFalse(homeLight0.isModelMirrored());
      assertNull(homeLight0.getCatalogId());
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertFalse(homeLight0.isMovable());
      assertNull(homeLight0.getDescription());
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertTrue(homeLight0.isVisible());
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertFalse(homeLight0.isDeformable());
      assertFalse(homeLight0.isResizable());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertNull(homeLight0.getShininess());
      assertNull(homeLight0.getStaircaseCutOutShape());
      
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      String string0 = homeLight0.getName();
      assertNull(string0);
      assertFalse(homeLight0.isBackFaceShown());
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertNull(homeLight0.getColor());
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertFalse(homeLight0.isNameVisible());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertFalse(homeLight0.isTexturable());
      assertFalse(homeLight0.isDoorOrWindow());
      assertNull(homeLight0.getCurrency());
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertNull(homeLight0.getName());
      assertFalse(homeLight0.isModelMirrored());
      assertNull(homeLight0.getCatalogId());
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertFalse(homeLight0.isMovable());
      assertNull(homeLight0.getDescription());
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertTrue(homeLight0.isVisible());
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertFalse(homeLight0.isDeformable());
      assertFalse(homeLight0.isResizable());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertNull(homeLight0.getShininess());
      assertNull(homeLight0.getStaircaseCutOutShape());
      
      Level level0 = homeLight0.getLevel();
      assertNull(level0);
      assertFalse(homeLight0.isBackFaceShown());
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertNull(homeLight0.getColor());
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertFalse(homeLight0.isNameVisible());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertFalse(homeLight0.isTexturable());
      assertFalse(homeLight0.isDoorOrWindow());
      assertNull(homeLight0.getCurrency());
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertNull(homeLight0.getName());
      assertFalse(homeLight0.isModelMirrored());
      assertNull(homeLight0.getCatalogId());
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertFalse(homeLight0.isMovable());
      assertNull(homeLight0.getDescription());
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertTrue(homeLight0.isVisible());
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertFalse(homeLight0.isDeformable());
      assertFalse(homeLight0.isResizable());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertNull(homeLight0.getShininess());
      assertNull(homeLight0.getStaircaseCutOutShape());
      
      HomeLight homeLight1 = homeLight0.clone();
      assertNotNull(homeLight1);
      assertNotSame(homeLight0, homeLight1);
      assertNotSame(homeLight1, homeLight0);
      assertFalse(homeLight1.equals((Object)homeLight0));
      assertFalse(homeLight0.isBackFaceShown());
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertNull(homeLight0.getColor());
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertFalse(homeLight0.isNameVisible());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertFalse(homeLight0.isTexturable());
      assertFalse(homeLight0.isDoorOrWindow());
      assertNull(homeLight0.getCurrency());
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertNull(homeLight0.getName());
      assertFalse(homeLight0.isModelMirrored());
      assertNull(homeLight0.getCatalogId());
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertFalse(homeLight0.isMovable());
      assertNull(homeLight0.getDescription());
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertTrue(homeLight0.isVisible());
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertFalse(homeLight0.isDeformable());
      assertFalse(homeLight0.isResizable());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertNull(homeLight0.getShininess());
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertNull(homeLight1.getColor());
      assertFalse(homeLight1.isModelMirrored());
      assertEquals(0.0F, homeLight1.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight1.getX(), 0.01F);
      assertFalse(homeLight1.isDoorOrWindow());
      assertFalse(homeLight1.isTexturable());
      assertEquals(0.0F, homeLight1.getNameYOffset(), 0.01F);
      assertEquals(0.0F, homeLight1.getY(), 0.01F);
      assertEquals(0.0F, homeLight1.getHeight(), 0.01F);
      assertTrue(homeLight1.isVisible());
      assertNull(homeLight1.getCurrency());
      assertFalse(homeLight1.isMovable());
      assertFalse(homeLight1.isResizable());
      assertEquals(0.0F, homeLight1.getDepth(), 0.01F);
      assertFalse(homeLight1.isDeformable());
      assertNull(homeLight1.getCatalogId());
      assertNull(homeLight1.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight1.getNameAngle(), 0.01F);
      assertNull(homeLight1.getShininess());
      assertEquals(0.5F, homeLight1.getPower(), 0.01F);
      assertEquals(0.0F, homeLight1.getNameXOffset(), 0.01F);
      assertNull(homeLight1.getDescription());
      assertEquals(0.0F, homeLight1.getElevation(), 0.01F);
      assertEquals(0.0F, homeLight1.getWidth(), 0.01F);
      assertEquals(0.0F, homeLight1.getAngle(), 0.01F);
      assertFalse(homeLight1.isNameVisible());
      assertFalse(homeLight1.isBackFaceShown());
      assertNull(homeLight1.getName());
      
      homeLight1.setName("");
      assertNotSame(homeLight0, homeLight1);
      assertNotSame(homeLight1, homeLight0);
      assertFalse(homeLight0.equals((Object)homeLight1));
      assertFalse(homeLight1.equals((Object)homeLight0));
      assertFalse(homeLight0.isBackFaceShown());
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertNull(homeLight0.getColor());
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertFalse(homeLight0.isNameVisible());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertFalse(homeLight0.isTexturable());
      assertFalse(homeLight0.isDoorOrWindow());
      assertNull(homeLight0.getCurrency());
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertNull(homeLight0.getName());
      assertFalse(homeLight0.isModelMirrored());
      assertNull(homeLight0.getCatalogId());
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertFalse(homeLight0.isMovable());
      assertNull(homeLight0.getDescription());
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertTrue(homeLight0.isVisible());
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertFalse(homeLight0.isDeformable());
      assertFalse(homeLight0.isResizable());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertNull(homeLight0.getShininess());
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertNull(homeLight1.getColor());
      assertFalse(homeLight1.isModelMirrored());
      assertEquals(0.0F, homeLight1.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight1.getX(), 0.01F);
      assertFalse(homeLight1.isDoorOrWindow());
      assertFalse(homeLight1.isTexturable());
      assertEquals(0.0F, homeLight1.getNameYOffset(), 0.01F);
      assertEquals(0.0F, homeLight1.getY(), 0.01F);
      assertEquals(0.0F, homeLight1.getHeight(), 0.01F);
      assertTrue(homeLight1.isVisible());
      assertNull(homeLight1.getCurrency());
      assertFalse(homeLight1.isMovable());
      assertFalse(homeLight1.isResizable());
      assertEquals(0.0F, homeLight1.getDepth(), 0.01F);
      assertFalse(homeLight1.isDeformable());
      assertNull(homeLight1.getCatalogId());
      assertNull(homeLight1.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight1.getNameAngle(), 0.01F);
      assertNull(homeLight1.getShininess());
      assertEquals(0.5F, homeLight1.getPower(), 0.01F);
      assertEquals(0.0F, homeLight1.getNameXOffset(), 0.01F);
      assertNull(homeLight1.getDescription());
      assertEquals(0.0F, homeLight1.getElevation(), 0.01F);
      assertEquals(0.0F, homeLight1.getWidth(), 0.01F);
      assertEquals(0.0F, homeLight1.getAngle(), 0.01F);
      assertFalse(homeLight1.isNameVisible());
      assertFalse(homeLight1.isBackFaceShown());
      assertEquals("", homeLight1.getName());
      
      BigDecimal bigDecimal0 = homeLight1.getPriceValueAddedTaxIncluded();
      assertNull(bigDecimal0);
      assertNotSame(homeLight0, homeLight1);
      assertNotSame(homeLight1, homeLight0);
      assertFalse(homeLight0.equals((Object)homeLight1));
      assertFalse(homeLight1.equals((Object)homeLight0));
      assertFalse(homeLight0.isBackFaceShown());
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertNull(homeLight0.getColor());
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertFalse(homeLight0.isNameVisible());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertFalse(homeLight0.isTexturable());
      assertFalse(homeLight0.isDoorOrWindow());
      assertNull(homeLight0.getCurrency());
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertNull(homeLight0.getName());
      assertFalse(homeLight0.isModelMirrored());
      assertNull(homeLight0.getCatalogId());
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertFalse(homeLight0.isMovable());
      assertNull(homeLight0.getDescription());
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertTrue(homeLight0.isVisible());
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertFalse(homeLight0.isDeformable());
      assertFalse(homeLight0.isResizable());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertNull(homeLight0.getShininess());
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertNull(homeLight1.getColor());
      assertFalse(homeLight1.isModelMirrored());
      assertEquals(0.0F, homeLight1.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight1.getX(), 0.01F);
      assertFalse(homeLight1.isDoorOrWindow());
      assertFalse(homeLight1.isTexturable());
      assertEquals(0.0F, homeLight1.getNameYOffset(), 0.01F);
      assertEquals(0.0F, homeLight1.getY(), 0.01F);
      assertEquals(0.0F, homeLight1.getHeight(), 0.01F);
      assertTrue(homeLight1.isVisible());
      assertNull(homeLight1.getCurrency());
      assertFalse(homeLight1.isMovable());
      assertFalse(homeLight1.isResizable());
      assertEquals(0.0F, homeLight1.getDepth(), 0.01F);
      assertFalse(homeLight1.isDeformable());
      assertNull(homeLight1.getCatalogId());
      assertNull(homeLight1.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight1.getNameAngle(), 0.01F);
      assertNull(homeLight1.getShininess());
      assertEquals(0.5F, homeLight1.getPower(), 0.01F);
      assertEquals(0.0F, homeLight1.getNameXOffset(), 0.01F);
      assertNull(homeLight1.getDescription());
      assertEquals(0.0F, homeLight1.getElevation(), 0.01F);
      assertEquals(0.0F, homeLight1.getWidth(), 0.01F);
      assertEquals(0.0F, homeLight1.getAngle(), 0.01F);
      assertFalse(homeLight1.isNameVisible());
      assertFalse(homeLight1.isBackFaceShown());
      assertEquals("", homeLight1.getName());
      
      boolean boolean1 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      
      boolean boolean2 = homeLight0.isNameVisible();
      assertNotSame(homeLight0, homeLight1);
      assertFalse(homeLight0.equals((Object)homeLight1));
      assertFalse(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2);
      assertFalse(homeLight0.isBackFaceShown());
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertNull(homeLight0.getColor());
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertFalse(homeLight0.isNameVisible());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertFalse(homeLight0.isTexturable());
      assertFalse(homeLight0.isDoorOrWindow());
      assertNull(homeLight0.getCurrency());
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertNull(homeLight0.getName());
      assertFalse(homeLight0.isModelMirrored());
      assertNull(homeLight0.getCatalogId());
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertFalse(homeLight0.isMovable());
      assertNull(homeLight0.getDescription());
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertTrue(homeLight0.isVisible());
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertFalse(homeLight0.isDeformable());
      assertFalse(homeLight0.isResizable());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertNull(homeLight0.getShininess());
      assertNull(homeLight0.getStaircaseCutOutShape());
      
      // Undeclared exception!
      try { 
        homeLight1.setModelMirrored(false);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Piece isn't resizable
         //
         verifyException("com.eteks.sweethome3d.model.HomePieceOfFurniture", e);
      }
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      Light light0 = mock(Light.class, new ViolatedAssumptionAnswer());
      doReturn((LightSource[]) null).when(light0).getLightSources();
      doReturn((Integer) null).when(light0).getColor();
      doReturn((String) null).when(light0).getCurrency();
      doReturn(0.0F).when(light0).getDepth();
      doReturn((String) null).when(light0).getDescription();
      doReturn(0.0F).when(light0).getElevation();
      doReturn(0.0F).when(light0).getHeight();
      doReturn((Content) null).when(light0).getIcon();
      doReturn((Content) null).when(light0).getModel();
      doReturn((float[][]) null).when(light0).getModelRotation();
      doReturn((String) null).when(light0).getName();
      doReturn((Content) null).when(light0).getPlanIcon();
      doReturn((BigDecimal) null).when(light0).getPrice();
      doReturn((String) null).when(light0).getStaircaseCutOutShape();
      doReturn((BigDecimal) null).when(light0).getValueAddedTaxPercentage();
      doReturn(0.0F).when(light0).getWidth();
      doReturn(false).when(light0).isBackFaceShown();
      doReturn(false).when(light0).isDeformable();
      doReturn(false).when(light0).isDoorOrWindow();
      doReturn(false).when(light0).isMovable();
      doReturn(false).when(light0).isResizable();
      doReturn(false).when(light0).isTexturable();
      HomeLight homeLight0 = new HomeLight(light0);
      assertNotNull(homeLight0);
      assertTrue(homeLight0.isVisible());
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertFalse(homeLight0.isNameVisible());
      assertFalse(homeLight0.isResizable());
      assertFalse(homeLight0.isDeformable());
      assertFalse(homeLight0.isModelMirrored());
      assertNull(homeLight0.getCatalogId());
      assertNull(homeLight0.getColor());
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertFalse(homeLight0.isMovable());
      assertNull(homeLight0.getCurrency());
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertNull(homeLight0.getName());
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertFalse(homeLight0.isBackFaceShown());
      assertNull(homeLight0.getShininess());
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertFalse(homeLight0.isTexturable());
      assertFalse(homeLight0.isDoorOrWindow());
      assertNull(homeLight0.getDescription());
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      
      String string0 = homeLight0.getDescription();
      assertNull(string0);
      assertTrue(homeLight0.isVisible());
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertFalse(homeLight0.isNameVisible());
      assertFalse(homeLight0.isResizable());
      assertFalse(homeLight0.isDeformable());
      assertFalse(homeLight0.isModelMirrored());
      assertNull(homeLight0.getCatalogId());
      assertNull(homeLight0.getColor());
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertFalse(homeLight0.isMovable());
      assertNull(homeLight0.getCurrency());
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertNull(homeLight0.getName());
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertFalse(homeLight0.isBackFaceShown());
      assertNull(homeLight0.getShininess());
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertFalse(homeLight0.isTexturable());
      assertFalse(homeLight0.isDoorOrWindow());
      assertNull(homeLight0.getDescription());
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      
      Level level0 = new Level((String) null, (-119.7F), (-119.7F), 593.7749F);
      assertNotNull(level0);
      assertTrue(level0.isVisible());
      assertEquals((-119.7F), level0.getElevation(), 0.01F);
      assertEquals((-119.7F), level0.getFloorThickness(), 0.01F);
      assertNull(level0.getName());
      assertEquals(593.7749F, level0.getHeight(), 0.01F);
      
      boolean boolean0 = homeLight0.isAtLevel(level0);
      assertFalse(boolean0);
      assertTrue(homeLight0.isVisible());
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertFalse(homeLight0.isNameVisible());
      assertFalse(homeLight0.isResizable());
      assertFalse(homeLight0.isDeformable());
      assertFalse(homeLight0.isModelMirrored());
      assertNull(homeLight0.getCatalogId());
      assertNull(homeLight0.getColor());
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertFalse(homeLight0.isMovable());
      assertNull(homeLight0.getCurrency());
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertNull(homeLight0.getName());
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertFalse(homeLight0.isBackFaceShown());
      assertNull(homeLight0.getShininess());
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertFalse(homeLight0.isTexturable());
      assertFalse(homeLight0.isDoorOrWindow());
      assertNull(homeLight0.getDescription());
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertTrue(level0.isVisible());
      assertEquals((-119.7F), level0.getElevation(), 0.01F);
      assertEquals((-119.7F), level0.getFloorThickness(), 0.01F);
      assertNull(level0.getName());
      assertEquals(593.7749F, level0.getHeight(), 0.01F);
      
      boolean boolean1 = homeLight0.isBottomLeftPointAt(3.4028235E38F, (-119.7F), 593.7749F);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      assertTrue(homeLight0.isVisible());
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertFalse(homeLight0.isNameVisible());
      assertFalse(homeLight0.isResizable());
      assertFalse(homeLight0.isDeformable());
      assertFalse(homeLight0.isModelMirrored());
      assertNull(homeLight0.getCatalogId());
      assertNull(homeLight0.getColor());
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertFalse(homeLight0.isMovable());
      assertNull(homeLight0.getCurrency());
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertNull(homeLight0.getName());
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertFalse(homeLight0.isBackFaceShown());
      assertNull(homeLight0.getShininess());
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertFalse(homeLight0.isTexturable());
      assertFalse(homeLight0.isDoorOrWindow());
      assertNull(homeLight0.getDescription());
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      HomePieceOfFurniture homePieceOfFurniture0 = null;
      try {
        homePieceOfFurniture0 = new HomePieceOfFurniture((PieceOfFurniture) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.eteks.sweethome3d.model.HomePieceOfFurniture", e);
      }
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      LightSource[] lightSourceArray0 = new LightSource[2];
      LightSource lightSource0 = new LightSource((-1.0F), (-1457.99F), 381.9F, 1431655765);
      assertNotNull(lightSource0);
      assertEquals((-1457.99F), lightSource0.getY(), 0.01F);
      assertEquals(381.9F, lightSource0.getZ(), 0.01F);
      assertEquals((-1.0F), lightSource0.getX(), 0.01F);
      assertEquals(1431655765, lightSource0.getColor());
      assertNull(lightSource0.getDiameter());
      
      LightSource lightSource1 = new LightSource((-1.0F), (-69.47F), 700.4569F, (-853));
      assertNotNull(lightSource1);
      assertFalse(lightSource1.equals((Object)lightSource0));
      assertEquals((-1.0F), lightSource1.getX(), 0.01F);
      assertNull(lightSource1.getDiameter());
      assertEquals((-853), lightSource1.getColor());
      assertEquals((-69.47F), lightSource1.getY(), 0.01F);
      assertEquals(700.4569F, lightSource1.getZ(), 0.01F);
      
      lightSourceArray0[1] = lightSource1;
      Integer integer0 = new Integer((-853));
      assertNotNull(integer0);
      assertEquals((-853), (int)integer0);
      
      Light light0 = mock(Light.class, new ViolatedAssumptionAnswer());
      doReturn((LightSource[]) null).when(light0).getLightSources();
      doReturn((Integer) null).when(light0).getColor();
      doReturn((String) null).when(light0).getCurrency();
      doReturn(0.0F).when(light0).getDepth();
      doReturn((String) null).when(light0).getDescription();
      doReturn(0.0F).when(light0).getElevation();
      doReturn(0.0F).when(light0).getHeight();
      doReturn((Content) null).when(light0).getIcon();
      doReturn((Content) null).when(light0).getModel();
      doReturn((float[][]) null).when(light0).getModelRotation();
      doReturn((String) null).when(light0).getName();
      doReturn((Content) null).when(light0).getPlanIcon();
      doReturn((BigDecimal) null).when(light0).getPrice();
      doReturn((String) null).when(light0).getStaircaseCutOutShape();
      doReturn((BigDecimal) null).when(light0).getValueAddedTaxPercentage();
      doReturn(0.0F).when(light0).getWidth();
      doReturn(false).when(light0).isBackFaceShown();
      doReturn(false).when(light0).isDeformable();
      doReturn(false).when(light0).isDoorOrWindow();
      doReturn(false).when(light0).isMovable();
      doReturn(false).when(light0).isResizable();
      doReturn(false).when(light0).isTexturable();
      byte[] byteArray0 = new byte[5];
      byteArray0[1] = (byte)1;
      byteArray0[3] = (byte) (-32);
      byteArray0[4] = (byte)62;
      boolean boolean0 = FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      assertEquals(5, byteArray0.length);
      assertFalse(boolean0);
      assertArrayEquals(new byte[] {(byte)0, (byte)1, (byte)0, (byte) (-32), (byte)62}, byteArray0);
      
      HomeLight homeLight0 = new HomeLight(light0);
      assertNotNull(homeLight0);
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertNull(homeLight0.getDescription());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertNull(homeLight0.getName());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertNull(homeLight0.getShininess());
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertFalse(homeLight0.isResizable());
      assertFalse(homeLight0.isDoorOrWindow());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertFalse(homeLight0.isTexturable());
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertTrue(homeLight0.isVisible());
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertNull(homeLight0.getCurrency());
      assertFalse(homeLight0.isDeformable());
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertFalse(homeLight0.isMovable());
      assertFalse(homeLight0.isNameVisible());
      assertFalse(homeLight0.isBackFaceShown());
      assertFalse(homeLight0.isModelMirrored());
      assertNull(homeLight0.getCatalogId());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertNull(homeLight0.getColor());
      
      int int0 = new Integer((byte) (-32));
      assertEquals((-32), int0);
      
      int int1 = Float.floatToIntBits((-1710.0F));
      assertFalse(int1 == int0);
      assertEquals((-992624640), int1);
      
      int int2 = Float.floatToIntBits((-992624640));
      assertFalse(int2 == int0);
      assertFalse(int2 == int1);
      assertEquals((-831739648), int2);
      
      homeLight0.setMovable(true);
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertNull(homeLight0.getDescription());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertNull(homeLight0.getName());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertTrue(homeLight0.isMovable());
      assertNull(homeLight0.getShininess());
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertFalse(homeLight0.isResizable());
      assertFalse(homeLight0.isDoorOrWindow());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertFalse(homeLight0.isTexturable());
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertTrue(homeLight0.isVisible());
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertNull(homeLight0.getCurrency());
      assertFalse(homeLight0.isDeformable());
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertFalse(homeLight0.isNameVisible());
      assertFalse(homeLight0.isBackFaceShown());
      assertFalse(homeLight0.isModelMirrored());
      assertNull(homeLight0.getCatalogId());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertNull(homeLight0.getColor());
      
      int int3 = Float.floatToIntBits(0.0F);
      assertFalse(int3 == int1);
      assertFalse(int3 == int2);
      assertFalse(int3 == int0);
      assertEquals(0, int3);
      
      int int4 = Float.floatToIntBits(0);
      assertFalse(int4 == int0);
      assertFalse(int4 == int1);
      assertFalse(int4 == int2);
      assertTrue(int4 == int3);
      assertEquals(0, int4);
      
      // Undeclared exception!
      try { 
        homeLight0.setShininess((Float) 0.0F);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Piece isn't texturable
         //
         verifyException("com.eteks.sweethome3d.model.HomePieceOfFurniture", e);
      }
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      Light light0 = mock(Light.class, new ViolatedAssumptionAnswer());
      doReturn((LightSource[]) null).when(light0).getLightSources();
      doReturn((Integer) null).when(light0).getColor();
      doReturn((String) null).when(light0).getCurrency();
      doReturn(0.0F).when(light0).getDepth();
      doReturn((String) null).when(light0).getDescription();
      doReturn(0.0F).when(light0).getElevation();
      doReturn(0.0F).when(light0).getHeight();
      doReturn((Content) null).when(light0).getIcon();
      doReturn((Content) null).when(light0).getModel();
      doReturn((float[][]) null).when(light0).getModelRotation();
      doReturn((String) null).when(light0).getName();
      doReturn((Content) null).when(light0).getPlanIcon();
      doReturn((BigDecimal) null).when(light0).getPrice();
      doReturn((String) null).when(light0).getStaircaseCutOutShape();
      doReturn((BigDecimal) null).when(light0).getValueAddedTaxPercentage();
      doReturn(0.0F).when(light0).getWidth();
      doReturn(false).when(light0).isBackFaceShown();
      doReturn(false).when(light0).isDeformable();
      doReturn(false).when(light0).isDoorOrWindow();
      doReturn(false).when(light0).isMovable();
      doReturn(false).when(light0).isResizable();
      doReturn(false).when(light0).isTexturable();
      HomeLight homeLight0 = new HomeLight(light0);
      assertNotNull(homeLight0);
      assertFalse(homeLight0.isDeformable());
      assertFalse(homeLight0.isModelMirrored());
      assertNull(homeLight0.getCurrency());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertNull(homeLight0.getColor());
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertFalse(homeLight0.isTexturable());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertFalse(homeLight0.isBackFaceShown());
      assertFalse(homeLight0.isNameVisible());
      assertNull(homeLight0.getName());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertNull(homeLight0.getShininess());
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertNull(homeLight0.getDescription());
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertNull(homeLight0.getCatalogId());
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertFalse(homeLight0.isMovable());
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertTrue(homeLight0.isVisible());
      assertFalse(homeLight0.isResizable());
      
      String string0 = homeLight0.getDescription();
      assertNull(string0);
      assertFalse(homeLight0.isDeformable());
      assertFalse(homeLight0.isModelMirrored());
      assertNull(homeLight0.getCurrency());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertNull(homeLight0.getColor());
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertFalse(homeLight0.isTexturable());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertFalse(homeLight0.isBackFaceShown());
      assertFalse(homeLight0.isNameVisible());
      assertNull(homeLight0.getName());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertNull(homeLight0.getShininess());
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertNull(homeLight0.getDescription());
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertNull(homeLight0.getCatalogId());
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertFalse(homeLight0.isMovable());
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertTrue(homeLight0.isVisible());
      assertFalse(homeLight0.isResizable());
      
      String string1 = homeLight0.getName();
      assertNull(string1);
      assertFalse(homeLight0.isDeformable());
      assertFalse(homeLight0.isModelMirrored());
      assertNull(homeLight0.getCurrency());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertNull(homeLight0.getColor());
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertFalse(homeLight0.isTexturable());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertFalse(homeLight0.isBackFaceShown());
      assertFalse(homeLight0.isNameVisible());
      assertNull(homeLight0.getName());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertNull(homeLight0.getShininess());
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertNull(homeLight0.getDescription());
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertNull(homeLight0.getCatalogId());
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertFalse(homeLight0.isMovable());
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertTrue(homeLight0.isVisible());
      assertFalse(homeLight0.isResizable());
      
      HomeTexture homeTexture0 = homeLight0.getTexture();
      assertNull(homeTexture0);
      assertFalse(homeLight0.isDeformable());
      assertFalse(homeLight0.isModelMirrored());
      assertNull(homeLight0.getCurrency());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertNull(homeLight0.getColor());
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertFalse(homeLight0.isTexturable());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertFalse(homeLight0.isBackFaceShown());
      assertFalse(homeLight0.isNameVisible());
      assertNull(homeLight0.getName());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertNull(homeLight0.getShininess());
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertNull(homeLight0.getDescription());
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertNull(homeLight0.getCatalogId());
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertFalse(homeLight0.isMovable());
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertTrue(homeLight0.isVisible());
      assertFalse(homeLight0.isResizable());
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      LightSource lightSource0 = new LightSource((-1.0F), (-1.0F), 381.9F, 1431655765);
      assertNotNull(lightSource0);
      assertEquals(381.9F, lightSource0.getZ(), 0.01F);
      assertEquals(1431655765, lightSource0.getColor());
      assertEquals((-1.0F), lightSource0.getY(), 0.01F);
      assertEquals((-1.0F), lightSource0.getX(), 0.01F);
      assertNull(lightSource0.getDiameter());
      
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-54);
      byteArray0[1] = (byte) (-40);
      byteArray0[2] = (byte)111;
      boolean boolean0 = FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      assertEquals(3, byteArray0.length);
      assertFalse(boolean0);
      assertArrayEquals(new byte[] {(byte) (-54), (byte) (-40), (byte)111}, byteArray0);
      
      LightSource lightSource1 = new LightSource((-1.0F), (-69.47F), 700.4569F, (-853));
      assertNotNull(lightSource1);
      assertFalse(lightSource1.equals((Object)lightSource0));
      assertEquals((-1.0F), lightSource1.getX(), 0.01F);
      assertEquals(700.4569F, lightSource1.getZ(), 0.01F);
      assertEquals((-69.47F), lightSource1.getY(), 0.01F);
      assertNull(lightSource1.getDiameter());
      assertEquals((-853), lightSource1.getColor());
      
      Integer integer0 = new Integer((-853));
      assertNotNull(integer0);
      assertEquals((-853), (int)integer0);
      
      Light light0 = mock(Light.class, new ViolatedAssumptionAnswer());
      doReturn((LightSource[]) null).when(light0).getLightSources();
      doReturn((Integer) null).when(light0).getColor();
      doReturn((String) null).when(light0).getCurrency();
      doReturn(0.0F).when(light0).getDepth();
      doReturn((String) null).when(light0).getDescription();
      doReturn(0.0F).when(light0).getElevation();
      doReturn(0.0F).when(light0).getHeight();
      doReturn((Content) null).when(light0).getIcon();
      doReturn((Content) null).when(light0).getModel();
      doReturn((float[][]) null).when(light0).getModelRotation();
      doReturn((String) null).when(light0).getName();
      doReturn((Content) null).when(light0).getPlanIcon();
      doReturn((BigDecimal) null).when(light0).getPrice();
      doReturn((String) null).when(light0).getStaircaseCutOutShape();
      doReturn((BigDecimal) null).when(light0).getValueAddedTaxPercentage();
      doReturn(0.0F).when(light0).getWidth();
      doReturn(false).when(light0).isBackFaceShown();
      doReturn(false).when(light0).isDeformable();
      doReturn(false).when(light0).isDoorOrWindow();
      doReturn(false).when(light0).isMovable();
      doReturn(false).when(light0).isResizable();
      doReturn(false).when(light0).isTexturable();
      byte[] byteArray1 = new byte[5];
      assertFalse(byteArray1.equals((Object)byteArray0));
      
      byteArray1[1] = (byte)111;
      byteArray1[3] = (byte)111;
      boolean boolean1 = FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray1);
      assertEquals(5, byteArray1.length);
      assertNotSame(byteArray1, byteArray0);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      assertArrayEquals(new byte[] {(byte)0, (byte)111, (byte)0, (byte)111, (byte)0}, byteArray1);
      
      HomeLight homeLight0 = new HomeLight(light0);
      assertNotNull(homeLight0);
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertTrue(homeLight0.isVisible());
      assertNull(homeLight0.getCurrency());
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertFalse(homeLight0.isNameVisible());
      assertFalse(homeLight0.isDeformable());
      assertFalse(homeLight0.isBackFaceShown());
      assertFalse(homeLight0.isResizable());
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertNull(homeLight0.getShininess());
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertFalse(homeLight0.isTexturable());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertNull(homeLight0.getDescription());
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertNull(homeLight0.getName());
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertFalse(homeLight0.isModelMirrored());
      assertFalse(homeLight0.isMovable());
      assertNull(homeLight0.getColor());
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertNull(homeLight0.getCatalogId());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      
      homeLight0.setY((byte)0);
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertTrue(homeLight0.isVisible());
      assertNull(homeLight0.getCurrency());
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertFalse(homeLight0.isNameVisible());
      assertFalse(homeLight0.isDeformable());
      assertFalse(homeLight0.isBackFaceShown());
      assertFalse(homeLight0.isResizable());
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertNull(homeLight0.getShininess());
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertFalse(homeLight0.isTexturable());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertNull(homeLight0.getDescription());
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertNull(homeLight0.getName());
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertFalse(homeLight0.isModelMirrored());
      assertFalse(homeLight0.isMovable());
      assertNull(homeLight0.getColor());
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertNull(homeLight0.getCatalogId());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      
      BigDecimal bigDecimal0 = homeLight0.getValueAddedTax();
      assertNull(bigDecimal0);
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertTrue(homeLight0.isVisible());
      assertNull(homeLight0.getCurrency());
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertFalse(homeLight0.isNameVisible());
      assertFalse(homeLight0.isDeformable());
      assertFalse(homeLight0.isBackFaceShown());
      assertFalse(homeLight0.isResizable());
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertNull(homeLight0.getShininess());
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertFalse(homeLight0.isTexturable());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertNull(homeLight0.getDescription());
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertNull(homeLight0.getName());
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertFalse(homeLight0.isModelMirrored());
      assertFalse(homeLight0.isMovable());
      assertNull(homeLight0.getColor());
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertNull(homeLight0.getCatalogId());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      
      BigDecimal bigDecimal1 = homeLight0.getValueAddedTax();
      assertNull(bigDecimal1);
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertTrue(homeLight0.isVisible());
      assertNull(homeLight0.getCurrency());
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertFalse(homeLight0.isNameVisible());
      assertFalse(homeLight0.isDeformable());
      assertFalse(homeLight0.isBackFaceShown());
      assertFalse(homeLight0.isResizable());
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertNull(homeLight0.getShininess());
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertFalse(homeLight0.isTexturable());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertNull(homeLight0.getDescription());
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertNull(homeLight0.getName());
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertFalse(homeLight0.isModelMirrored());
      assertFalse(homeLight0.isMovable());
      assertNull(homeLight0.getColor());
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertNull(homeLight0.getCatalogId());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      
      String string0 = homeLight0.getName();
      assertNull(string0);
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertTrue(homeLight0.isVisible());
      assertNull(homeLight0.getCurrency());
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertFalse(homeLight0.isNameVisible());
      assertFalse(homeLight0.isDeformable());
      assertFalse(homeLight0.isBackFaceShown());
      assertFalse(homeLight0.isResizable());
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertNull(homeLight0.getShininess());
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertFalse(homeLight0.isTexturable());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertNull(homeLight0.getDescription());
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertNull(homeLight0.getName());
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertFalse(homeLight0.isModelMirrored());
      assertFalse(homeLight0.isMovable());
      assertNull(homeLight0.getColor());
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertNull(homeLight0.getCatalogId());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      
      homeLight0.setName((String) null);
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertTrue(homeLight0.isVisible());
      assertNull(homeLight0.getCurrency());
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertFalse(homeLight0.isNameVisible());
      assertFalse(homeLight0.isDeformable());
      assertFalse(homeLight0.isBackFaceShown());
      assertFalse(homeLight0.isResizable());
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertNull(homeLight0.getShininess());
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertFalse(homeLight0.isTexturable());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertNull(homeLight0.getDescription());
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertNull(homeLight0.getName());
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertFalse(homeLight0.isModelMirrored());
      assertFalse(homeLight0.isMovable());
      assertNull(homeLight0.getColor());
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertNull(homeLight0.getCatalogId());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      
      boolean boolean2 = homeLight0.intersectsRectangle((byte)111, 1800.2F, 700.4569F, (-73.79F));
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      assertFalse(boolean2);
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertTrue(homeLight0.isVisible());
      assertNull(homeLight0.getCurrency());
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertFalse(homeLight0.isNameVisible());
      assertFalse(homeLight0.isDeformable());
      assertFalse(homeLight0.isBackFaceShown());
      assertFalse(homeLight0.isResizable());
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertNull(homeLight0.getShininess());
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertFalse(homeLight0.isTexturable());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertNull(homeLight0.getDescription());
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertNull(homeLight0.getName());
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertFalse(homeLight0.isModelMirrored());
      assertFalse(homeLight0.isMovable());
      assertNull(homeLight0.getColor());
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertNull(homeLight0.getCatalogId());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      
      homeLight0.setNameYOffset((-1.0F));
      assertEquals((-1.0F), homeLight0.getNameYOffset(), 0.01F);
      assertTrue(homeLight0.isVisible());
      assertNull(homeLight0.getCurrency());
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertFalse(homeLight0.isNameVisible());
      assertFalse(homeLight0.isDeformable());
      assertFalse(homeLight0.isBackFaceShown());
      assertFalse(homeLight0.isResizable());
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertNull(homeLight0.getShininess());
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertFalse(homeLight0.isTexturable());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertNull(homeLight0.getDescription());
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertNull(homeLight0.getName());
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertFalse(homeLight0.isModelMirrored());
      assertFalse(homeLight0.isMovable());
      assertNull(homeLight0.getColor());
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertNull(homeLight0.getCatalogId());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      
      BigDecimal bigDecimal2 = homeLight0.getPriceValueAddedTaxIncluded();
      assertNull(bigDecimal2);
      assertEquals((-1.0F), homeLight0.getNameYOffset(), 0.01F);
      assertTrue(homeLight0.isVisible());
      assertNull(homeLight0.getCurrency());
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertFalse(homeLight0.isNameVisible());
      assertFalse(homeLight0.isDeformable());
      assertFalse(homeLight0.isBackFaceShown());
      assertFalse(homeLight0.isResizable());
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertNull(homeLight0.getShininess());
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertFalse(homeLight0.isTexturable());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertNull(homeLight0.getDescription());
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertNull(homeLight0.getName());
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertFalse(homeLight0.isModelMirrored());
      assertFalse(homeLight0.isMovable());
      assertNull(homeLight0.getColor());
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertNull(homeLight0.getCatalogId());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      
      homeLight0.setDescription((String) null);
      assertEquals((-1.0F), homeLight0.getNameYOffset(), 0.01F);
      assertTrue(homeLight0.isVisible());
      assertNull(homeLight0.getCurrency());
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertFalse(homeLight0.isNameVisible());
      assertFalse(homeLight0.isDeformable());
      assertFalse(homeLight0.isBackFaceShown());
      assertFalse(homeLight0.isResizable());
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertNull(homeLight0.getShininess());
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertFalse(homeLight0.isTexturable());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertNull(homeLight0.getDescription());
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertNull(homeLight0.getName());
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertFalse(homeLight0.isModelMirrored());
      assertFalse(homeLight0.isMovable());
      assertNull(homeLight0.getColor());
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertNull(homeLight0.getCatalogId());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      
      // Undeclared exception!
      try { 
        homeLight0.setTexture((HomeTexture) null);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Piece isn't texturable
         //
         verifyException("com.eteks.sweethome3d.model.HomePieceOfFurniture", e);
      }
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      Light light0 = mock(Light.class, new ViolatedAssumptionAnswer());
      doReturn((LightSource[]) null).when(light0).getLightSources();
      doReturn((Integer) null).when(light0).getColor();
      doReturn((String) null).when(light0).getCurrency();
      doReturn(0.0F).when(light0).getDepth();
      doReturn((String) null).when(light0).getDescription();
      doReturn(0.0F).when(light0).getElevation();
      doReturn(0.0F).when(light0).getHeight();
      doReturn((Content) null).when(light0).getIcon();
      doReturn((Content) null).when(light0).getModel();
      doReturn((float[][]) null).when(light0).getModelRotation();
      doReturn((String) null).when(light0).getName();
      doReturn((Content) null).when(light0).getPlanIcon();
      doReturn((BigDecimal) null).when(light0).getPrice();
      doReturn((String) null).when(light0).getStaircaseCutOutShape();
      doReturn((BigDecimal) null).when(light0).getValueAddedTaxPercentage();
      doReturn(0.0F).when(light0).getWidth();
      doReturn(false).when(light0).isBackFaceShown();
      doReturn(false).when(light0).isDeformable();
      doReturn(false).when(light0).isDoorOrWindow();
      doReturn(false).when(light0).isMovable();
      doReturn(false).when(light0).isResizable();
      doReturn(false).when(light0).isTexturable();
      HomeLight homeLight0 = new HomeLight(light0);
      assertNotNull(homeLight0);
      assertFalse(homeLight0.isResizable());
      assertFalse(homeLight0.isMovable());
      assertNull(homeLight0.getShininess());
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertNull(homeLight0.getName());
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertFalse(homeLight0.isDeformable());
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertTrue(homeLight0.isVisible());
      assertNull(homeLight0.getDescription());
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertFalse(homeLight0.isTexturable());
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      assertFalse(homeLight0.isModelMirrored());
      assertFalse(homeLight0.isBackFaceShown());
      assertFalse(homeLight0.isNameVisible());
      assertNull(homeLight0.getCurrency());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertNull(homeLight0.getColor());
      assertNull(homeLight0.getCatalogId());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      
      homeLight0.setElevation((-1.0F));
      assertFalse(homeLight0.isResizable());
      assertFalse(homeLight0.isMovable());
      assertNull(homeLight0.getShininess());
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertNull(homeLight0.getName());
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertFalse(homeLight0.isDeformable());
      assertEquals((-1.0F), homeLight0.getElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertTrue(homeLight0.isVisible());
      assertNull(homeLight0.getDescription());
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertFalse(homeLight0.isTexturable());
      assertEquals((-1.0F), homeLight0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      assertFalse(homeLight0.isModelMirrored());
      assertFalse(homeLight0.isBackFaceShown());
      assertFalse(homeLight0.isNameVisible());
      assertNull(homeLight0.getCurrency());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertNull(homeLight0.getColor());
      assertNull(homeLight0.getCatalogId());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      
      homeLight0.setElevation((-1.0F));
      assertFalse(homeLight0.isResizable());
      assertFalse(homeLight0.isMovable());
      assertNull(homeLight0.getShininess());
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertNull(homeLight0.getName());
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertFalse(homeLight0.isDeformable());
      assertEquals((-1.0F), homeLight0.getElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertTrue(homeLight0.isVisible());
      assertNull(homeLight0.getDescription());
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertFalse(homeLight0.isTexturable());
      assertEquals((-1.0F), homeLight0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      assertFalse(homeLight0.isModelMirrored());
      assertFalse(homeLight0.isBackFaceShown());
      assertFalse(homeLight0.isNameVisible());
      assertNull(homeLight0.getCurrency());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertNull(homeLight0.getColor());
      assertNull(homeLight0.getCatalogId());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      
      int int0 = Float.floatToIntBits((-1.0F));
      assertEquals((-1082130432), int0);
      
      boolean boolean0 = homeLight0.isPointAt(3.5643997F, 0.5311582F, (-1.0F));
      assertFalse(boolean0);
      assertFalse(homeLight0.isResizable());
      assertFalse(homeLight0.isMovable());
      assertNull(homeLight0.getShininess());
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertNull(homeLight0.getName());
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertFalse(homeLight0.isDeformable());
      assertEquals((-1.0F), homeLight0.getElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertTrue(homeLight0.isVisible());
      assertNull(homeLight0.getDescription());
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertFalse(homeLight0.isTexturable());
      assertEquals((-1.0F), homeLight0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      assertFalse(homeLight0.isModelMirrored());
      assertFalse(homeLight0.isBackFaceShown());
      assertFalse(homeLight0.isNameVisible());
      assertNull(homeLight0.getCurrency());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertNull(homeLight0.getColor());
      assertNull(homeLight0.getCatalogId());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      
      int int1 = Float.floatToIntBits((-1.0F));
      assertTrue(int1 == int0);
      assertEquals((-1082130432), int1);
      
      BigDecimal bigDecimal0 = homeLight0.getValueAddedTax();
      assertNull(bigDecimal0);
      assertFalse(homeLight0.isResizable());
      assertFalse(homeLight0.isMovable());
      assertNull(homeLight0.getShininess());
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertNull(homeLight0.getName());
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertFalse(homeLight0.isDeformable());
      assertEquals((-1.0F), homeLight0.getElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertTrue(homeLight0.isVisible());
      assertNull(homeLight0.getDescription());
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertFalse(homeLight0.isTexturable());
      assertEquals((-1.0F), homeLight0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      assertFalse(homeLight0.isModelMirrored());
      assertFalse(homeLight0.isBackFaceShown());
      assertFalse(homeLight0.isNameVisible());
      assertNull(homeLight0.getCurrency());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertNull(homeLight0.getColor());
      assertNull(homeLight0.getCatalogId());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      
      Level level0 = homeLight0.getLevel();
      assertNull(level0);
      assertFalse(homeLight0.isResizable());
      assertFalse(homeLight0.isMovable());
      assertNull(homeLight0.getShininess());
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertNull(homeLight0.getName());
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertFalse(homeLight0.isDeformable());
      assertEquals((-1.0F), homeLight0.getElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertTrue(homeLight0.isVisible());
      assertNull(homeLight0.getDescription());
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertFalse(homeLight0.isTexturable());
      assertEquals((-1.0F), homeLight0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      assertFalse(homeLight0.isModelMirrored());
      assertFalse(homeLight0.isBackFaceShown());
      assertFalse(homeLight0.isNameVisible());
      assertNull(homeLight0.getCurrency());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertNull(homeLight0.getColor());
      assertNull(homeLight0.getCatalogId());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      
      HomeLight homeLight1 = homeLight0.clone();
      assertNotNull(homeLight1);
      assertNotSame(homeLight0, homeLight1);
      assertNotSame(homeLight1, homeLight0);
      assertFalse(homeLight1.equals((Object)homeLight0));
      assertFalse(homeLight0.isResizable());
      assertFalse(homeLight0.isMovable());
      assertNull(homeLight0.getShininess());
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertNull(homeLight0.getName());
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertFalse(homeLight0.isDeformable());
      assertEquals((-1.0F), homeLight0.getElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertTrue(homeLight0.isVisible());
      assertNull(homeLight0.getDescription());
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertFalse(homeLight0.isTexturable());
      assertEquals((-1.0F), homeLight0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      assertFalse(homeLight0.isModelMirrored());
      assertFalse(homeLight0.isBackFaceShown());
      assertFalse(homeLight0.isNameVisible());
      assertNull(homeLight0.getCurrency());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertNull(homeLight0.getColor());
      assertNull(homeLight0.getCatalogId());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertFalse(homeLight1.isMovable());
      assertFalse(homeLight1.isResizable());
      assertEquals(0.0F, homeLight1.getHeight(), 0.01F);
      assertNull(homeLight1.getShininess());
      assertNull(homeLight1.getName());
      assertNull(homeLight1.getCurrency());
      assertEquals(0.5F, homeLight1.getPower(), 0.01F);
      assertNull(homeLight1.getCatalogId());
      assertEquals(0.0F, homeLight1.getNameYOffset(), 0.01F);
      assertNull(homeLight1.getColor());
      assertEquals(0.0F, homeLight1.getAngle(), 0.01F);
      assertFalse(homeLight1.isTexturable());
      assertFalse(homeLight1.isModelMirrored());
      assertFalse(homeLight1.isDoorOrWindow());
      assertFalse(homeLight1.isBackFaceShown());
      assertFalse(homeLight1.isNameVisible());
      assertEquals(0.0F, homeLight1.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeLight1.getDepth(), 0.01F);
      assertEquals(0.0F, homeLight1.getWidth(), 0.01F);
      assertNull(homeLight1.getStaircaseCutOutShape());
      assertNull(homeLight1.getDescription());
      assertEquals((-1.0F), homeLight1.getElevation(), 0.01F);
      assertEquals(0.0F, homeLight1.getNameAngle(), 0.01F);
      assertFalse(homeLight1.isDeformable());
      assertTrue(homeLight1.isVisible());
      assertEquals(0.0F, homeLight1.getY(), 0.01F);
      assertEquals(0.0F, homeLight1.getX(), 0.01F);
      assertEquals((-1.0F), homeLight1.getGroundElevation(), 0.01F);
      
      homeLight1.setAngle((byte) (-32));
      assertNotSame(homeLight0, homeLight1);
      assertNotSame(homeLight1, homeLight0);
      assertFalse(homeLight0.equals((Object)homeLight1));
      assertFalse(homeLight1.equals((Object)homeLight0));
      assertFalse(homeLight0.isResizable());
      assertFalse(homeLight0.isMovable());
      assertNull(homeLight0.getShininess());
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertNull(homeLight0.getName());
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertFalse(homeLight0.isDeformable());
      assertEquals((-1.0F), homeLight0.getElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertTrue(homeLight0.isVisible());
      assertNull(homeLight0.getDescription());
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertFalse(homeLight0.isTexturable());
      assertEquals((-1.0F), homeLight0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      assertFalse(homeLight0.isModelMirrored());
      assertFalse(homeLight0.isBackFaceShown());
      assertFalse(homeLight0.isNameVisible());
      assertNull(homeLight0.getCurrency());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertNull(homeLight0.getColor());
      assertNull(homeLight0.getCatalogId());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertFalse(homeLight1.isMovable());
      assertFalse(homeLight1.isResizable());
      assertEquals(0.0F, homeLight1.getHeight(), 0.01F);
      assertNull(homeLight1.getShininess());
      assertNull(homeLight1.getName());
      assertNull(homeLight1.getCurrency());
      assertEquals(0.5F, homeLight1.getPower(), 0.01F);
      assertNull(homeLight1.getCatalogId());
      assertEquals(0.0F, homeLight1.getNameYOffset(), 0.01F);
      assertNull(homeLight1.getColor());
      assertFalse(homeLight1.isTexturable());
      assertFalse(homeLight1.isModelMirrored());
      assertFalse(homeLight1.isDoorOrWindow());
      assertFalse(homeLight1.isBackFaceShown());
      assertFalse(homeLight1.isNameVisible());
      assertEquals(0.0F, homeLight1.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeLight1.getDepth(), 0.01F);
      assertEquals(0.0F, homeLight1.getWidth(), 0.01F);
      assertNull(homeLight1.getStaircaseCutOutShape());
      assertNull(homeLight1.getDescription());
      assertEquals((-1.0F), homeLight1.getElevation(), 0.01F);
      assertEquals(0.0F, homeLight1.getNameAngle(), 0.01F);
      assertFalse(homeLight1.isDeformable());
      assertEquals(5.699112F, homeLight1.getAngle(), 0.01F);
      assertTrue(homeLight1.isVisible());
      assertEquals(0.0F, homeLight1.getY(), 0.01F);
      assertEquals(0.0F, homeLight1.getX(), 0.01F);
      assertEquals((-1.0F), homeLight1.getGroundElevation(), 0.01F);
      
      homeLight1.setName("CATALOG_ID");
      assertNotSame(homeLight0, homeLight1);
      assertNotSame(homeLight1, homeLight0);
      assertFalse(homeLight0.equals((Object)homeLight1));
      assertFalse(homeLight1.equals((Object)homeLight0));
      assertFalse(homeLight0.isResizable());
      assertFalse(homeLight0.isMovable());
      assertNull(homeLight0.getShininess());
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertNull(homeLight0.getName());
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertFalse(homeLight0.isDeformable());
      assertEquals((-1.0F), homeLight0.getElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertTrue(homeLight0.isVisible());
      assertNull(homeLight0.getDescription());
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertFalse(homeLight0.isTexturable());
      assertEquals((-1.0F), homeLight0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      assertFalse(homeLight0.isModelMirrored());
      assertFalse(homeLight0.isBackFaceShown());
      assertFalse(homeLight0.isNameVisible());
      assertNull(homeLight0.getCurrency());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertNull(homeLight0.getColor());
      assertNull(homeLight0.getCatalogId());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertFalse(homeLight1.isMovable());
      assertFalse(homeLight1.isResizable());
      assertEquals(0.0F, homeLight1.getHeight(), 0.01F);
      assertNull(homeLight1.getShininess());
      assertNull(homeLight1.getCurrency());
      assertEquals(0.5F, homeLight1.getPower(), 0.01F);
      assertNull(homeLight1.getCatalogId());
      assertEquals(0.0F, homeLight1.getNameYOffset(), 0.01F);
      assertNull(homeLight1.getColor());
      assertFalse(homeLight1.isTexturable());
      assertFalse(homeLight1.isModelMirrored());
      assertFalse(homeLight1.isDoorOrWindow());
      assertFalse(homeLight1.isBackFaceShown());
      assertFalse(homeLight1.isNameVisible());
      assertEquals("CATALOG_ID", homeLight1.getName());
      assertEquals(0.0F, homeLight1.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeLight1.getDepth(), 0.01F);
      assertEquals(0.0F, homeLight1.getWidth(), 0.01F);
      assertNull(homeLight1.getStaircaseCutOutShape());
      assertNull(homeLight1.getDescription());
      assertEquals((-1.0F), homeLight1.getElevation(), 0.01F);
      assertEquals(0.0F, homeLight1.getNameAngle(), 0.01F);
      assertFalse(homeLight1.isDeformable());
      assertEquals(5.699112F, homeLight1.getAngle(), 0.01F);
      assertTrue(homeLight1.isVisible());
      assertEquals(0.0F, homeLight1.getY(), 0.01F);
      assertEquals(0.0F, homeLight1.getX(), 0.01F);
      assertEquals((-1.0F), homeLight1.getGroundElevation(), 0.01F);
      
      Integer integer0 = new Integer(605525547);
      assertNotNull(integer0);
      assertFalse(integer0.equals((Object)int1));
      assertFalse(integer0.equals((Object)int0));
      assertEquals(605525547, (int)integer0);
      
      System.setCurrentTimeMillis((-1082130432));
      float float0 = homeLight1.getElevation();
      assertNotSame(homeLight0, homeLight1);
      assertNotSame(homeLight1, homeLight0);
      assertFalse(homeLight0.equals((Object)homeLight1));
      assertFalse(homeLight1.equals((Object)homeLight0));
      assertEquals((-1.0F), float0, 0.01F);
      assertFalse(homeLight0.isResizable());
      assertFalse(homeLight0.isMovable());
      assertNull(homeLight0.getShininess());
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertNull(homeLight0.getName());
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertFalse(homeLight0.isDeformable());
      assertEquals((-1.0F), homeLight0.getElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertTrue(homeLight0.isVisible());
      assertNull(homeLight0.getDescription());
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertFalse(homeLight0.isTexturable());
      assertEquals((-1.0F), homeLight0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      assertFalse(homeLight0.isModelMirrored());
      assertFalse(homeLight0.isBackFaceShown());
      assertFalse(homeLight0.isNameVisible());
      assertNull(homeLight0.getCurrency());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertNull(homeLight0.getColor());
      assertNull(homeLight0.getCatalogId());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertFalse(homeLight1.isMovable());
      assertFalse(homeLight1.isResizable());
      assertEquals(0.0F, homeLight1.getHeight(), 0.01F);
      assertNull(homeLight1.getShininess());
      assertNull(homeLight1.getCurrency());
      assertEquals(0.5F, homeLight1.getPower(), 0.01F);
      assertNull(homeLight1.getCatalogId());
      assertEquals(0.0F, homeLight1.getNameYOffset(), 0.01F);
      assertNull(homeLight1.getColor());
      assertFalse(homeLight1.isTexturable());
      assertFalse(homeLight1.isModelMirrored());
      assertFalse(homeLight1.isDoorOrWindow());
      assertFalse(homeLight1.isBackFaceShown());
      assertFalse(homeLight1.isNameVisible());
      assertEquals("CATALOG_ID", homeLight1.getName());
      assertEquals(0.0F, homeLight1.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeLight1.getDepth(), 0.01F);
      assertEquals(0.0F, homeLight1.getWidth(), 0.01F);
      assertNull(homeLight1.getStaircaseCutOutShape());
      assertNull(homeLight1.getDescription());
      assertEquals((-1.0F), homeLight1.getElevation(), 0.01F);
      assertEquals(0.0F, homeLight1.getNameAngle(), 0.01F);
      assertFalse(homeLight1.isDeformable());
      assertEquals(5.699112F, homeLight1.getAngle(), 0.01F);
      assertTrue(homeLight1.isVisible());
      assertEquals(0.0F, homeLight1.getY(), 0.01F);
      assertEquals(0.0F, homeLight1.getX(), 0.01F);
      assertEquals((-1.0F), homeLight1.getGroundElevation(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      Light light0 = mock(Light.class, new ViolatedAssumptionAnswer());
      doReturn((LightSource[]) null).when(light0).getLightSources();
      doReturn((Integer) null).when(light0).getColor();
      doReturn((String) null).when(light0).getCurrency();
      doReturn(0.0F).when(light0).getDepth();
      doReturn((String) null).when(light0).getDescription();
      doReturn(0.0F).when(light0).getElevation();
      doReturn(0.0F).when(light0).getHeight();
      doReturn((Content) null).when(light0).getIcon();
      doReturn((Content) null).when(light0).getModel();
      doReturn((float[][]) null).when(light0).getModelRotation();
      doReturn((String) null).when(light0).getName();
      doReturn((Content) null).when(light0).getPlanIcon();
      doReturn((BigDecimal) null).when(light0).getPrice();
      doReturn((String) null).when(light0).getStaircaseCutOutShape();
      doReturn((BigDecimal) null).when(light0).getValueAddedTaxPercentage();
      doReturn(0.0F).when(light0).getWidth();
      doReturn(false).when(light0).isBackFaceShown();
      doReturn(false).when(light0).isDeformable();
      doReturn(false).when(light0).isDoorOrWindow();
      doReturn(false).when(light0).isMovable();
      doReturn(false).when(light0).isResizable();
      doReturn(false).when(light0).isTexturable();
      HomeLight homeLight0 = new HomeLight(light0);
      assertNotNull(homeLight0);
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertTrue(homeLight0.isVisible());
      assertFalse(homeLight0.isMovable());
      assertNull(homeLight0.getCurrency());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertNull(homeLight0.getColor());
      assertNull(homeLight0.getCatalogId());
      assertFalse(homeLight0.isNameVisible());
      assertNull(homeLight0.getName());
      assertFalse(homeLight0.isBackFaceShown());
      assertFalse(homeLight0.isModelMirrored());
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertNull(homeLight0.getDescription());
      assertFalse(homeLight0.isDoorOrWindow());
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertFalse(homeLight0.isTexturable());
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertNull(homeLight0.getShininess());
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertFalse(homeLight0.isDeformable());
      assertFalse(homeLight0.isResizable());
      
      String string0 = homeLight0.getName();
      assertNull(string0);
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertTrue(homeLight0.isVisible());
      assertFalse(homeLight0.isMovable());
      assertNull(homeLight0.getCurrency());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertNull(homeLight0.getColor());
      assertNull(homeLight0.getCatalogId());
      assertFalse(homeLight0.isNameVisible());
      assertNull(homeLight0.getName());
      assertFalse(homeLight0.isBackFaceShown());
      assertFalse(homeLight0.isModelMirrored());
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertNull(homeLight0.getDescription());
      assertFalse(homeLight0.isDoorOrWindow());
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertFalse(homeLight0.isTexturable());
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertNull(homeLight0.getShininess());
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertFalse(homeLight0.isDeformable());
      assertFalse(homeLight0.isResizable());
      
      Level level0 = homeLight0.getLevel();
      assertNull(level0);
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertTrue(homeLight0.isVisible());
      assertFalse(homeLight0.isMovable());
      assertNull(homeLight0.getCurrency());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertNull(homeLight0.getColor());
      assertNull(homeLight0.getCatalogId());
      assertFalse(homeLight0.isNameVisible());
      assertNull(homeLight0.getName());
      assertFalse(homeLight0.isBackFaceShown());
      assertFalse(homeLight0.isModelMirrored());
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertNull(homeLight0.getDescription());
      assertFalse(homeLight0.isDoorOrWindow());
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertFalse(homeLight0.isTexturable());
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertNull(homeLight0.getShininess());
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertFalse(homeLight0.isDeformable());
      assertFalse(homeLight0.isResizable());
      
      HomeLight homeLight1 = homeLight0.clone();
      assertNotNull(homeLight1);
      assertNotSame(homeLight0, homeLight1);
      assertNotSame(homeLight1, homeLight0);
      assertFalse(homeLight1.equals((Object)homeLight0));
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertTrue(homeLight0.isVisible());
      assertFalse(homeLight0.isMovable());
      assertNull(homeLight0.getCurrency());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertNull(homeLight0.getColor());
      assertNull(homeLight0.getCatalogId());
      assertFalse(homeLight0.isNameVisible());
      assertNull(homeLight0.getName());
      assertFalse(homeLight0.isBackFaceShown());
      assertFalse(homeLight0.isModelMirrored());
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertNull(homeLight0.getDescription());
      assertFalse(homeLight0.isDoorOrWindow());
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertFalse(homeLight0.isTexturable());
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertNull(homeLight0.getShininess());
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertFalse(homeLight0.isDeformable());
      assertFalse(homeLight0.isResizable());
      assertNull(homeLight1.getName());
      assertEquals(0.0F, homeLight1.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeLight1.getDepth(), 0.01F);
      assertEquals(0.5F, homeLight1.getPower(), 0.01F);
      assertEquals(0.0F, homeLight1.getElevation(), 0.01F);
      assertNull(homeLight1.getCatalogId());
      assertNull(homeLight1.getDescription());
      assertFalse(homeLight1.isTexturable());
      assertEquals(0.0F, homeLight1.getHeight(), 0.01F);
      assertEquals(0.0F, homeLight1.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight1.getX(), 0.01F);
      assertFalse(homeLight1.isMovable());
      assertTrue(homeLight1.isVisible());
      assertNull(homeLight1.getShininess());
      assertNull(homeLight1.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight1.getNameAngle(), 0.01F);
      assertFalse(homeLight1.isResizable());
      assertFalse(homeLight1.isNameVisible());
      assertFalse(homeLight1.isDeformable());
      assertNull(homeLight1.getColor());
      assertNull(homeLight1.getCurrency());
      assertEquals(0.0F, homeLight1.getNameYOffset(), 0.01F);
      assertEquals(0.0F, homeLight1.getWidth(), 0.01F);
      assertEquals(0.0F, homeLight1.getY(), 0.01F);
      assertFalse(homeLight1.isDoorOrWindow());
      assertEquals(0.0F, homeLight1.getAngle(), 0.01F);
      assertFalse(homeLight1.isBackFaceShown());
      assertFalse(homeLight1.isModelMirrored());
      
      BigDecimal bigDecimal0 = homeLight1.getPriceValueAddedTaxIncluded();
      assertNull(bigDecimal0);
      assertNotSame(homeLight0, homeLight1);
      assertNotSame(homeLight1, homeLight0);
      assertFalse(homeLight0.equals((Object)homeLight1));
      assertFalse(homeLight1.equals((Object)homeLight0));
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertTrue(homeLight0.isVisible());
      assertFalse(homeLight0.isMovable());
      assertNull(homeLight0.getCurrency());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertNull(homeLight0.getColor());
      assertNull(homeLight0.getCatalogId());
      assertFalse(homeLight0.isNameVisible());
      assertNull(homeLight0.getName());
      assertFalse(homeLight0.isBackFaceShown());
      assertFalse(homeLight0.isModelMirrored());
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertNull(homeLight0.getDescription());
      assertFalse(homeLight0.isDoorOrWindow());
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertFalse(homeLight0.isTexturable());
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertNull(homeLight0.getShininess());
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertFalse(homeLight0.isDeformable());
      assertFalse(homeLight0.isResizable());
      assertNull(homeLight1.getName());
      assertEquals(0.0F, homeLight1.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeLight1.getDepth(), 0.01F);
      assertEquals(0.5F, homeLight1.getPower(), 0.01F);
      assertEquals(0.0F, homeLight1.getElevation(), 0.01F);
      assertNull(homeLight1.getCatalogId());
      assertNull(homeLight1.getDescription());
      assertFalse(homeLight1.isTexturable());
      assertEquals(0.0F, homeLight1.getHeight(), 0.01F);
      assertEquals(0.0F, homeLight1.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight1.getX(), 0.01F);
      assertFalse(homeLight1.isMovable());
      assertTrue(homeLight1.isVisible());
      assertNull(homeLight1.getShininess());
      assertNull(homeLight1.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight1.getNameAngle(), 0.01F);
      assertFalse(homeLight1.isResizable());
      assertFalse(homeLight1.isNameVisible());
      assertFalse(homeLight1.isDeformable());
      assertNull(homeLight1.getColor());
      assertNull(homeLight1.getCurrency());
      assertEquals(0.0F, homeLight1.getNameYOffset(), 0.01F);
      assertEquals(0.0F, homeLight1.getWidth(), 0.01F);
      assertEquals(0.0F, homeLight1.getY(), 0.01F);
      assertFalse(homeLight1.isDoorOrWindow());
      assertEquals(0.0F, homeLight1.getAngle(), 0.01F);
      assertFalse(homeLight1.isBackFaceShown());
      assertFalse(homeLight1.isModelMirrored());
      
      boolean boolean0 = homeLight0.isBackFaceShown();
      assertNotSame(homeLight0, homeLight1);
      assertFalse(homeLight0.equals((Object)homeLight1));
      assertFalse(boolean0);
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertTrue(homeLight0.isVisible());
      assertFalse(homeLight0.isMovable());
      assertNull(homeLight0.getCurrency());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertNull(homeLight0.getColor());
      assertNull(homeLight0.getCatalogId());
      assertFalse(homeLight0.isNameVisible());
      assertNull(homeLight0.getName());
      assertFalse(homeLight0.isBackFaceShown());
      assertFalse(homeLight0.isModelMirrored());
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertNull(homeLight0.getDescription());
      assertFalse(homeLight0.isDoorOrWindow());
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertFalse(homeLight0.isTexturable());
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertNull(homeLight0.getShininess());
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertFalse(homeLight0.isDeformable());
      assertFalse(homeLight0.isResizable());
      
      // Undeclared exception!
      try { 
        homeLight0.setColor((Integer) null);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Piece isn't texturable
         //
         verifyException("com.eteks.sweethome3d.model.HomePieceOfFurniture", e);
      }
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      String[] stringArray0 = new String[8];
      stringArray0[0] = "";
      Float float0 = new Float((-1729.3374F));
      assertNotNull(float0);
      assertEquals((-1729.3374F), (float)float0, 0.01F);
      
      URLContent uRLContent0 = new URLContent((URL) null);
      assertNotNull(uRLContent0);
      
      Sash[] sashArray0 = new Sash[8];
      Sash sash0 = new Sash((-1.0F), (-10.917348F), (-368.692F), (-368.692F), 0.0F);
      assertNotNull(sash0);
      assertEquals((-368.692F), sash0.getStartAngle(), 0.01F);
      assertEquals((-368.692F), sash0.getWidth(), 0.01F);
      assertEquals((-10.917348F), sash0.getYAxis(), 0.01F);
      assertEquals((-1.0F), sash0.getXAxis(), 0.01F);
      assertEquals(0.0F, sash0.getEndAngle(), 0.01F);
      
      sashArray0[5] = sash0;
      Sash sash1 = new Sash((-1485.2021F), (-368.692F), (-1.0F), (-10.917348F), (-1729.3374F));
      assertNotNull(sash1);
      assertFalse(sash1.equals((Object)sash0));
      assertEquals((-368.692F), sash1.getYAxis(), 0.01F);
      assertEquals((-1729.3374F), sash1.getEndAngle(), 0.01F);
      assertEquals((-1.0F), sash1.getWidth(), 0.01F);
      assertEquals((-10.917348F), sash1.getStartAngle(), 0.01F);
      assertEquals((-1485.2021F), sash1.getXAxis(), 0.01F);
      
      sashArray0[6] = sash1;
      float[][] floatArray0 = new float[6][1];
      float[] floatArray1 = new float[3];
      floatArray0[0] = floatArray1;
      float[] floatArray2 = new float[3];
      assertFalse(floatArray2.equals((Object)floatArray1));
      
      floatArray2[2] = (-1.0F);
      floatArray2[1] = (-1.0F);
      floatArray0[1] = floatArray2;
      floatArray0[2] = floatArray1;
      CatalogDoorOrWindow catalogDoorOrWindow0 = new CatalogDoorOrWindow("", "", "", "", stringArray0, (Long) null, float0, uRLContent0, uRLContent0, uRLContent0, (-368.692F), (-368.692F), (-1.0F), (-368.692F), true, (-368.692F), 0.0F, sashArray0, floatArray0, "", true, true, true, (BigDecimal) null, (BigDecimal) null, "");
      assertEquals(8, stringArray0.length);
      assertEquals(8, sashArray0.length);
      assertEquals(6, floatArray0.length);
      assertNotNull(catalogDoorOrWindow0);
      assertEquals("", catalogDoorOrWindow0.getCurrency());
      assertTrue(catalogDoorOrWindow0.isTexturable());
      assertTrue(catalogDoorOrWindow0.isProportional());
      assertEquals((-368.692F), catalogDoorOrWindow0.getWidth(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isDoorOrWindow());
      assertNull(catalogDoorOrWindow0.getCreationDate());
      assertEquals((-368.692F), catalogDoorOrWindow0.getWallThickness(), 0.01F);
      assertEquals("", catalogDoorOrWindow0.getId());
      assertEquals(0.3926991F, catalogDoorOrWindow0.getIconYaw(), 0.01F);
      assertEquals(0.0F, catalogDoorOrWindow0.getWallDistance(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isDeformable());
      assertEquals("", catalogDoorOrWindow0.getName());
      assertFalse(catalogDoorOrWindow0.isBackFaceShown());
      assertEquals((-368.692F), catalogDoorOrWindow0.getElevation(), 0.01F);
      assertEquals("", catalogDoorOrWindow0.getCreator());
      assertEquals((-1.0F), catalogDoorOrWindow0.getHeight(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isResizable());
      assertFalse(catalogDoorOrWindow0.isModifiable());
      assertEquals("", catalogDoorOrWindow0.getDescription());
      assertEquals((-368.692F), catalogDoorOrWindow0.getDepth(), 0.01F);
      assertNull(catalogDoorOrWindow0.getStaircaseCutOutShape());
      assertEquals((-1729.3374F), catalogDoorOrWindow0.getGrade(), 0.01F);
      assertEquals("", catalogDoorOrWindow0.getInformation());
      assertNull(catalogDoorOrWindow0.getColor());
      assertTrue(catalogDoorOrWindow0.isMovable());
      
      HomeDoorOrWindow homeDoorOrWindow0 = new HomeDoorOrWindow(catalogDoorOrWindow0);
      assertEquals(8, stringArray0.length);
      assertEquals(8, sashArray0.length);
      assertEquals(6, floatArray0.length);
      assertNotNull(homeDoorOrWindow0);
      assertEquals("", catalogDoorOrWindow0.getCurrency());
      assertTrue(catalogDoorOrWindow0.isTexturable());
      assertTrue(catalogDoorOrWindow0.isProportional());
      assertEquals((-368.692F), catalogDoorOrWindow0.getWidth(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isDoorOrWindow());
      assertNull(catalogDoorOrWindow0.getCreationDate());
      assertEquals((-368.692F), catalogDoorOrWindow0.getWallThickness(), 0.01F);
      assertEquals("", catalogDoorOrWindow0.getId());
      assertEquals(0.3926991F, catalogDoorOrWindow0.getIconYaw(), 0.01F);
      assertEquals(0.0F, catalogDoorOrWindow0.getWallDistance(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isDeformable());
      assertEquals("", catalogDoorOrWindow0.getName());
      assertFalse(catalogDoorOrWindow0.isBackFaceShown());
      assertEquals((-368.692F), catalogDoorOrWindow0.getElevation(), 0.01F);
      assertEquals("", catalogDoorOrWindow0.getCreator());
      assertEquals((-1.0F), catalogDoorOrWindow0.getHeight(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isResizable());
      assertFalse(catalogDoorOrWindow0.isModifiable());
      assertEquals("", catalogDoorOrWindow0.getDescription());
      assertEquals((-368.692F), catalogDoorOrWindow0.getDepth(), 0.01F);
      assertNull(catalogDoorOrWindow0.getStaircaseCutOutShape());
      assertEquals((-1729.3374F), catalogDoorOrWindow0.getGrade(), 0.01F);
      assertEquals("", catalogDoorOrWindow0.getInformation());
      assertNull(catalogDoorOrWindow0.getColor());
      assertTrue(catalogDoorOrWindow0.isMovable());
      assertFalse(homeDoorOrWindow0.isBoundToWall());
      assertTrue(homeDoorOrWindow0.isDeformable());
      assertEquals(0.0F, homeDoorOrWindow0.getNameYOffset(), 0.01F);
      assertTrue(homeDoorOrWindow0.isVisible());
      assertNull(homeDoorOrWindow0.getShininess());
      assertTrue(homeDoorOrWindow0.isDoorOrWindow());
      assertNull(homeDoorOrWindow0.getStaircaseCutOutShape());
      assertTrue(homeDoorOrWindow0.isResizable());
      assertEquals("", homeDoorOrWindow0.getName());
      assertFalse(homeDoorOrWindow0.isNameVisible());
      assertTrue(homeDoorOrWindow0.isTexturable());
      assertEquals(0.0F, homeDoorOrWindow0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getAngle(), 0.01F);
      assertEquals("", homeDoorOrWindow0.getDescription());
      assertEquals((-368.692F), homeDoorOrWindow0.getWallThickness(), 0.01F);
      assertEquals((-184.346F), homeDoorOrWindow0.getY(), 0.01F);
      assertEquals((-368.692F), homeDoorOrWindow0.getGroundElevation(), 0.01F);
      assertEquals((-184.346F), homeDoorOrWindow0.getX(), 0.01F);
      assertFalse(homeDoorOrWindow0.isModelMirrored());
      assertFalse(homeDoorOrWindow0.isBackFaceShown());
      assertEquals(0.0F, homeDoorOrWindow0.getNameAngle(), 0.01F);
      assertEquals((-368.692F), homeDoorOrWindow0.getDepth(), 0.01F);
      assertEquals("", homeDoorOrWindow0.getCatalogId());
      assertTrue(homeDoorOrWindow0.isMovable());
      assertNull(homeDoorOrWindow0.getColor());
      assertEquals("", homeDoorOrWindow0.getCurrency());
      assertEquals(0.0F, homeDoorOrWindow0.getWallDistance(), 0.01F);
      assertEquals((-1.0F), homeDoorOrWindow0.getHeight(), 0.01F);
      assertEquals((-368.692F), homeDoorOrWindow0.getWidth(), 0.01F);
      assertEquals((-368.692F), homeDoorOrWindow0.getElevation(), 0.01F);
      
      homeDoorOrWindow0.setShininess((Float) 0.0F);
      assertEquals(8, stringArray0.length);
      assertEquals(8, sashArray0.length);
      assertEquals(6, floatArray0.length);
      assertEquals("", catalogDoorOrWindow0.getCurrency());
      assertTrue(catalogDoorOrWindow0.isTexturable());
      assertTrue(catalogDoorOrWindow0.isProportional());
      assertEquals((-368.692F), catalogDoorOrWindow0.getWidth(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isDoorOrWindow());
      assertNull(catalogDoorOrWindow0.getCreationDate());
      assertEquals((-368.692F), catalogDoorOrWindow0.getWallThickness(), 0.01F);
      assertEquals("", catalogDoorOrWindow0.getId());
      assertEquals(0.3926991F, catalogDoorOrWindow0.getIconYaw(), 0.01F);
      assertEquals(0.0F, catalogDoorOrWindow0.getWallDistance(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isDeformable());
      assertEquals("", catalogDoorOrWindow0.getName());
      assertFalse(catalogDoorOrWindow0.isBackFaceShown());
      assertEquals((-368.692F), catalogDoorOrWindow0.getElevation(), 0.01F);
      assertEquals("", catalogDoorOrWindow0.getCreator());
      assertEquals((-1.0F), catalogDoorOrWindow0.getHeight(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isResizable());
      assertFalse(catalogDoorOrWindow0.isModifiable());
      assertEquals("", catalogDoorOrWindow0.getDescription());
      assertEquals((-368.692F), catalogDoorOrWindow0.getDepth(), 0.01F);
      assertNull(catalogDoorOrWindow0.getStaircaseCutOutShape());
      assertEquals((-1729.3374F), catalogDoorOrWindow0.getGrade(), 0.01F);
      assertEquals("", catalogDoorOrWindow0.getInformation());
      assertNull(catalogDoorOrWindow0.getColor());
      assertTrue(catalogDoorOrWindow0.isMovable());
      assertFalse(homeDoorOrWindow0.isBoundToWall());
      assertTrue(homeDoorOrWindow0.isDeformable());
      assertEquals(0.0F, homeDoorOrWindow0.getNameYOffset(), 0.01F);
      assertTrue(homeDoorOrWindow0.isVisible());
      assertEquals(0.0F, homeDoorOrWindow0.getShininess(), 0.01F);
      assertTrue(homeDoorOrWindow0.isDoorOrWindow());
      assertNull(homeDoorOrWindow0.getStaircaseCutOutShape());
      assertTrue(homeDoorOrWindow0.isResizable());
      assertEquals("", homeDoorOrWindow0.getName());
      assertFalse(homeDoorOrWindow0.isNameVisible());
      assertTrue(homeDoorOrWindow0.isTexturable());
      assertEquals(0.0F, homeDoorOrWindow0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getAngle(), 0.01F);
      assertEquals("", homeDoorOrWindow0.getDescription());
      assertEquals((-368.692F), homeDoorOrWindow0.getWallThickness(), 0.01F);
      assertEquals((-184.346F), homeDoorOrWindow0.getY(), 0.01F);
      assertEquals((-368.692F), homeDoorOrWindow0.getGroundElevation(), 0.01F);
      assertEquals((-184.346F), homeDoorOrWindow0.getX(), 0.01F);
      assertFalse(homeDoorOrWindow0.isModelMirrored());
      assertFalse(homeDoorOrWindow0.isBackFaceShown());
      assertEquals(0.0F, homeDoorOrWindow0.getNameAngle(), 0.01F);
      assertEquals((-368.692F), homeDoorOrWindow0.getDepth(), 0.01F);
      assertEquals("", homeDoorOrWindow0.getCatalogId());
      assertTrue(homeDoorOrWindow0.isMovable());
      assertNull(homeDoorOrWindow0.getColor());
      assertEquals("", homeDoorOrWindow0.getCurrency());
      assertEquals(0.0F, homeDoorOrWindow0.getWallDistance(), 0.01F);
      assertEquals((-1.0F), homeDoorOrWindow0.getHeight(), 0.01F);
      assertEquals((-368.692F), homeDoorOrWindow0.getWidth(), 0.01F);
      assertEquals((-368.692F), homeDoorOrWindow0.getElevation(), 0.01F);
      
      float[][] floatArray3 = homeDoorOrWindow0.getPoints();
      assertEquals(8, stringArray0.length);
      assertEquals(4, floatArray3.length);
      assertEquals(8, sashArray0.length);
      assertEquals(6, floatArray0.length);
      assertNotNull(floatArray3);
      assertNotSame(floatArray3, floatArray0);
      assertNotSame(floatArray0, floatArray3);
      assertFalse(floatArray3.equals((Object)floatArray0));
      assertEquals("", catalogDoorOrWindow0.getCurrency());
      assertTrue(catalogDoorOrWindow0.isTexturable());
      assertTrue(catalogDoorOrWindow0.isProportional());
      assertEquals((-368.692F), catalogDoorOrWindow0.getWidth(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isDoorOrWindow());
      assertNull(catalogDoorOrWindow0.getCreationDate());
      assertEquals((-368.692F), catalogDoorOrWindow0.getWallThickness(), 0.01F);
      assertEquals("", catalogDoorOrWindow0.getId());
      assertEquals(0.3926991F, catalogDoorOrWindow0.getIconYaw(), 0.01F);
      assertEquals(0.0F, catalogDoorOrWindow0.getWallDistance(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isDeformable());
      assertEquals("", catalogDoorOrWindow0.getName());
      assertFalse(catalogDoorOrWindow0.isBackFaceShown());
      assertEquals((-368.692F), catalogDoorOrWindow0.getElevation(), 0.01F);
      assertEquals("", catalogDoorOrWindow0.getCreator());
      assertEquals((-1.0F), catalogDoorOrWindow0.getHeight(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isResizable());
      assertFalse(catalogDoorOrWindow0.isModifiable());
      assertEquals("", catalogDoorOrWindow0.getDescription());
      assertEquals((-368.692F), catalogDoorOrWindow0.getDepth(), 0.01F);
      assertNull(catalogDoorOrWindow0.getStaircaseCutOutShape());
      assertEquals((-1729.3374F), catalogDoorOrWindow0.getGrade(), 0.01F);
      assertEquals("", catalogDoorOrWindow0.getInformation());
      assertNull(catalogDoorOrWindow0.getColor());
      assertTrue(catalogDoorOrWindow0.isMovable());
      assertFalse(homeDoorOrWindow0.isBoundToWall());
      assertTrue(homeDoorOrWindow0.isDeformable());
      assertEquals(0.0F, homeDoorOrWindow0.getNameYOffset(), 0.01F);
      assertTrue(homeDoorOrWindow0.isVisible());
      assertEquals(0.0F, homeDoorOrWindow0.getShininess(), 0.01F);
      assertTrue(homeDoorOrWindow0.isDoorOrWindow());
      assertNull(homeDoorOrWindow0.getStaircaseCutOutShape());
      assertTrue(homeDoorOrWindow0.isResizable());
      assertEquals("", homeDoorOrWindow0.getName());
      assertFalse(homeDoorOrWindow0.isNameVisible());
      assertTrue(homeDoorOrWindow0.isTexturable());
      assertEquals(0.0F, homeDoorOrWindow0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getAngle(), 0.01F);
      assertEquals("", homeDoorOrWindow0.getDescription());
      assertEquals((-368.692F), homeDoorOrWindow0.getWallThickness(), 0.01F);
      assertEquals((-184.346F), homeDoorOrWindow0.getY(), 0.01F);
      assertEquals((-368.692F), homeDoorOrWindow0.getGroundElevation(), 0.01F);
      assertEquals((-184.346F), homeDoorOrWindow0.getX(), 0.01F);
      assertFalse(homeDoorOrWindow0.isModelMirrored());
      assertFalse(homeDoorOrWindow0.isBackFaceShown());
      assertEquals(0.0F, homeDoorOrWindow0.getNameAngle(), 0.01F);
      assertEquals((-368.692F), homeDoorOrWindow0.getDepth(), 0.01F);
      assertEquals("", homeDoorOrWindow0.getCatalogId());
      assertTrue(homeDoorOrWindow0.isMovable());
      assertNull(homeDoorOrWindow0.getColor());
      assertEquals("", homeDoorOrWindow0.getCurrency());
      assertEquals(0.0F, homeDoorOrWindow0.getWallDistance(), 0.01F);
      assertEquals((-1.0F), homeDoorOrWindow0.getHeight(), 0.01F);
      assertEquals((-368.692F), homeDoorOrWindow0.getWidth(), 0.01F);
      assertEquals((-368.692F), homeDoorOrWindow0.getElevation(), 0.01F);
      
      boolean boolean0 = homeDoorOrWindow0.isResizable();
      assertEquals(8, stringArray0.length);
      assertEquals(8, sashArray0.length);
      assertEquals(6, floatArray0.length);
      assertNotSame(floatArray0, floatArray3);
      assertFalse(floatArray0.equals((Object)floatArray3));
      assertTrue(boolean0);
      assertEquals("", catalogDoorOrWindow0.getCurrency());
      assertTrue(catalogDoorOrWindow0.isTexturable());
      assertTrue(catalogDoorOrWindow0.isProportional());
      assertEquals((-368.692F), catalogDoorOrWindow0.getWidth(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isDoorOrWindow());
      assertNull(catalogDoorOrWindow0.getCreationDate());
      assertEquals((-368.692F), catalogDoorOrWindow0.getWallThickness(), 0.01F);
      assertEquals("", catalogDoorOrWindow0.getId());
      assertEquals(0.3926991F, catalogDoorOrWindow0.getIconYaw(), 0.01F);
      assertEquals(0.0F, catalogDoorOrWindow0.getWallDistance(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isDeformable());
      assertEquals("", catalogDoorOrWindow0.getName());
      assertFalse(catalogDoorOrWindow0.isBackFaceShown());
      assertEquals((-368.692F), catalogDoorOrWindow0.getElevation(), 0.01F);
      assertEquals("", catalogDoorOrWindow0.getCreator());
      assertEquals((-1.0F), catalogDoorOrWindow0.getHeight(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isResizable());
      assertFalse(catalogDoorOrWindow0.isModifiable());
      assertEquals("", catalogDoorOrWindow0.getDescription());
      assertEquals((-368.692F), catalogDoorOrWindow0.getDepth(), 0.01F);
      assertNull(catalogDoorOrWindow0.getStaircaseCutOutShape());
      assertEquals((-1729.3374F), catalogDoorOrWindow0.getGrade(), 0.01F);
      assertEquals("", catalogDoorOrWindow0.getInformation());
      assertNull(catalogDoorOrWindow0.getColor());
      assertTrue(catalogDoorOrWindow0.isMovable());
      assertFalse(homeDoorOrWindow0.isBoundToWall());
      assertTrue(homeDoorOrWindow0.isDeformable());
      assertEquals(0.0F, homeDoorOrWindow0.getNameYOffset(), 0.01F);
      assertTrue(homeDoorOrWindow0.isVisible());
      assertEquals(0.0F, homeDoorOrWindow0.getShininess(), 0.01F);
      assertTrue(homeDoorOrWindow0.isDoorOrWindow());
      assertNull(homeDoorOrWindow0.getStaircaseCutOutShape());
      assertTrue(homeDoorOrWindow0.isResizable());
      assertEquals("", homeDoorOrWindow0.getName());
      assertFalse(homeDoorOrWindow0.isNameVisible());
      assertTrue(homeDoorOrWindow0.isTexturable());
      assertEquals(0.0F, homeDoorOrWindow0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getAngle(), 0.01F);
      assertEquals("", homeDoorOrWindow0.getDescription());
      assertEquals((-368.692F), homeDoorOrWindow0.getWallThickness(), 0.01F);
      assertEquals((-184.346F), homeDoorOrWindow0.getY(), 0.01F);
      assertEquals((-368.692F), homeDoorOrWindow0.getGroundElevation(), 0.01F);
      assertEquals((-184.346F), homeDoorOrWindow0.getX(), 0.01F);
      assertFalse(homeDoorOrWindow0.isModelMirrored());
      assertFalse(homeDoorOrWindow0.isBackFaceShown());
      assertEquals(0.0F, homeDoorOrWindow0.getNameAngle(), 0.01F);
      assertEquals((-368.692F), homeDoorOrWindow0.getDepth(), 0.01F);
      assertEquals("", homeDoorOrWindow0.getCatalogId());
      assertTrue(homeDoorOrWindow0.isMovable());
      assertNull(homeDoorOrWindow0.getColor());
      assertEquals("", homeDoorOrWindow0.getCurrency());
      assertEquals(0.0F, homeDoorOrWindow0.getWallDistance(), 0.01F);
      assertEquals((-1.0F), homeDoorOrWindow0.getHeight(), 0.01F);
      assertEquals((-368.692F), homeDoorOrWindow0.getWidth(), 0.01F);
      assertEquals((-368.692F), homeDoorOrWindow0.getElevation(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      LightSource[] lightSourceArray0 = new LightSource[2];
      URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      URL uRL0 = MockURL.URL("s<7]@ykxs+ 0`a ", (String) null, (-1667), "", uRLStreamHandler0);
      assertNotNull(uRL0);
      assertNull(uRL0.getRef());
      assertEquals(0, uRL0.getDefaultPort());
      assertEquals("", uRL0.getFile());
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getQuery());
      assertEquals("s<7]@ykxs+ 0`a ", uRL0.getProtocol());
      assertNull(uRL0.toExternalForm());
      assertNull(uRL0.getAuthority());
      assertNull(uRL0.getUserInfo());
      assertNull(uRL0.toString());
      assertNull(uRL0.getHost());
      assertEquals("", uRL0.getPath());
      
      TemporaryURLContent temporaryURLContent0 = new TemporaryURLContent(uRL0);
      assertNotNull(temporaryURLContent0);
      assertNull(uRL0.getRef());
      assertEquals(0, uRL0.getDefaultPort());
      assertEquals("", uRL0.getFile());
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getQuery());
      assertEquals("s<7]@ykxs+ 0`a ", uRL0.getProtocol());
      assertNull(uRL0.toExternalForm());
      assertNull(uRL0.getAuthority());
      assertNull(uRL0.getUserInfo());
      assertNull(uRL0.toString());
      assertNull(uRL0.getHost());
      assertEquals("", uRL0.getPath());
      assertFalse(temporaryURLContent0.isJAREntry());
      
      BigDecimal bigDecimal0 = BigDecimal.TEN;
      assertNotNull(bigDecimal0);
      assertEquals((short)10, bigDecimal0.shortValue());
      assertEquals((byte)10, bigDecimal0.byteValue());
      
      CatalogLight catalogLight0 = new CatalogLight("\"<xp|JAv^\"<^Qh{/~", "s<7]@ykxs+ 0`a ", "s<7]@ykxs+ 0`a ", temporaryURLContent0, temporaryURLContent0, temporaryURLContent0, (-611.6462F), 1.7441415F, 0.5F, (-897.795F), true, lightSourceArray0, "", (float[][]) null, "P'HZa~G", true, true, true, bigDecimal0, bigDecimal0, "");
      assertEquals(2, lightSourceArray0.length);
      assertNotNull(catalogLight0);
      assertNull(uRL0.getRef());
      assertEquals(0, uRL0.getDefaultPort());
      assertEquals("", uRL0.getFile());
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getQuery());
      assertEquals("s<7]@ykxs+ 0`a ", uRL0.getProtocol());
      assertNull(uRL0.toExternalForm());
      assertNull(uRL0.getAuthority());
      assertNull(uRL0.getUserInfo());
      assertNull(uRL0.toString());
      assertNull(uRL0.getHost());
      assertEquals("", uRL0.getPath());
      assertFalse(temporaryURLContent0.isJAREntry());
      assertEquals((short)10, bigDecimal0.shortValue());
      assertEquals((byte)10, bigDecimal0.byteValue());
      assertTrue(catalogLight0.isTexturable());
      assertTrue(catalogLight0.isProportional());
      assertEquals(1.7441415F, catalogLight0.getDepth(), 0.01F);
      assertFalse(catalogLight0.isDoorOrWindow());
      assertEquals(0.5F, catalogLight0.getHeight(), 0.01F);
      assertEquals("\"<xp|JAv^\"<^Qh{/~", catalogLight0.getId());
      assertEquals("", catalogLight0.getStaircaseCutOutShape());
      assertTrue(catalogLight0.isMovable());
      assertTrue(catalogLight0.isResizable());
      assertEquals((-611.6462F), catalogLight0.getWidth(), 0.01F);
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertNull(catalogLight0.getGrade());
      assertEquals("s<7]@ykxs+ 0`a ", catalogLight0.getName());
      assertEquals("s<7]@ykxs+ 0`a ", catalogLight0.getDescription());
      assertEquals("P'HZa~G", catalogLight0.getCreator());
      assertEquals((-897.795F), catalogLight0.getElevation(), 0.01F);
      assertFalse(catalogLight0.isBackFaceShown());
      assertNull(catalogLight0.getCreationDate());
      assertNull(catalogLight0.getColor());
      assertFalse(catalogLight0.isModifiable());
      assertNull(catalogLight0.getInformation());
      assertTrue(catalogLight0.isDeformable());
      assertEquals("", catalogLight0.getCurrency());
      
      HomeLight homeLight0 = new HomeLight(catalogLight0);
      assertEquals(2, lightSourceArray0.length);
      assertNotNull(homeLight0);
      assertNull(uRL0.getRef());
      assertEquals(0, uRL0.getDefaultPort());
      assertEquals("", uRL0.getFile());
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getQuery());
      assertEquals("s<7]@ykxs+ 0`a ", uRL0.getProtocol());
      assertNull(uRL0.toExternalForm());
      assertNull(uRL0.getAuthority());
      assertNull(uRL0.getUserInfo());
      assertNull(uRL0.toString());
      assertNull(uRL0.getHost());
      assertEquals("", uRL0.getPath());
      assertFalse(temporaryURLContent0.isJAREntry());
      assertEquals((short)10, bigDecimal0.shortValue());
      assertEquals((byte)10, bigDecimal0.byteValue());
      assertTrue(catalogLight0.isTexturable());
      assertTrue(catalogLight0.isProportional());
      assertEquals(1.7441415F, catalogLight0.getDepth(), 0.01F);
      assertFalse(catalogLight0.isDoorOrWindow());
      assertEquals(0.5F, catalogLight0.getHeight(), 0.01F);
      assertEquals("\"<xp|JAv^\"<^Qh{/~", catalogLight0.getId());
      assertEquals("", catalogLight0.getStaircaseCutOutShape());
      assertTrue(catalogLight0.isMovable());
      assertTrue(catalogLight0.isResizable());
      assertEquals((-611.6462F), catalogLight0.getWidth(), 0.01F);
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertNull(catalogLight0.getGrade());
      assertEquals("s<7]@ykxs+ 0`a ", catalogLight0.getName());
      assertEquals("s<7]@ykxs+ 0`a ", catalogLight0.getDescription());
      assertEquals("P'HZa~G", catalogLight0.getCreator());
      assertEquals((-897.795F), catalogLight0.getElevation(), 0.01F);
      assertFalse(catalogLight0.isBackFaceShown());
      assertNull(catalogLight0.getCreationDate());
      assertNull(catalogLight0.getColor());
      assertFalse(catalogLight0.isModifiable());
      assertNull(catalogLight0.getInformation());
      assertTrue(catalogLight0.isDeformable());
      assertEquals("", catalogLight0.getCurrency());
      assertEquals("", homeLight0.getCurrency());
      assertEquals((-897.795F), homeLight0.getGroundElevation(), 0.01F);
      assertTrue(homeLight0.isVisible());
      assertEquals((-897.795F), homeLight0.getElevation(), 0.01F);
      assertFalse(homeLight0.isBackFaceShown());
      assertEquals((-611.6462F), homeLight0.getWidth(), 0.01F);
      assertFalse(homeLight0.isNameVisible());
      assertNull(homeLight0.getShininess());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      assertTrue(homeLight0.isTexturable());
      assertEquals("s<7]@ykxs+ 0`a ", homeLight0.getName());
      assertEquals((-305.8231F), homeLight0.getX(), 0.01F);
      assertTrue(homeLight0.isResizable());
      assertTrue(homeLight0.isDeformable());
      assertEquals("s<7]@ykxs+ 0`a ", homeLight0.getDescription());
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertEquals("", homeLight0.getStaircaseCutOutShape());
      assertEquals("\"<xp|JAv^\"<^Qh{/~", homeLight0.getCatalogId());
      assertTrue(homeLight0.isMovable());
      assertEquals(1.7441415F, homeLight0.getDepth(), 0.01F);
      assertEquals(0.5F, homeLight0.getHeight(), 0.01F);
      assertFalse(homeLight0.isModelMirrored());
      assertNull(homeLight0.getColor());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertEquals(0.8720707F, homeLight0.getY(), 0.01F);
      
      HomeLight homeLight1 = homeLight0.clone();
      assertEquals(2, lightSourceArray0.length);
      assertNotNull(homeLight1);
      assertNotSame(homeLight0, homeLight1);
      assertNotSame(homeLight1, homeLight0);
      assertFalse(homeLight1.equals((Object)homeLight0));
      assertNull(uRL0.getRef());
      assertEquals(0, uRL0.getDefaultPort());
      assertEquals("", uRL0.getFile());
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getQuery());
      assertEquals("s<7]@ykxs+ 0`a ", uRL0.getProtocol());
      assertNull(uRL0.toExternalForm());
      assertNull(uRL0.getAuthority());
      assertNull(uRL0.getUserInfo());
      assertNull(uRL0.toString());
      assertNull(uRL0.getHost());
      assertEquals("", uRL0.getPath());
      assertFalse(temporaryURLContent0.isJAREntry());
      assertEquals((short)10, bigDecimal0.shortValue());
      assertEquals((byte)10, bigDecimal0.byteValue());
      assertTrue(catalogLight0.isTexturable());
      assertTrue(catalogLight0.isProportional());
      assertEquals(1.7441415F, catalogLight0.getDepth(), 0.01F);
      assertFalse(catalogLight0.isDoorOrWindow());
      assertEquals(0.5F, catalogLight0.getHeight(), 0.01F);
      assertEquals("\"<xp|JAv^\"<^Qh{/~", catalogLight0.getId());
      assertEquals("", catalogLight0.getStaircaseCutOutShape());
      assertTrue(catalogLight0.isMovable());
      assertTrue(catalogLight0.isResizable());
      assertEquals((-611.6462F), catalogLight0.getWidth(), 0.01F);
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertNull(catalogLight0.getGrade());
      assertEquals("s<7]@ykxs+ 0`a ", catalogLight0.getName());
      assertEquals("s<7]@ykxs+ 0`a ", catalogLight0.getDescription());
      assertEquals("P'HZa~G", catalogLight0.getCreator());
      assertEquals((-897.795F), catalogLight0.getElevation(), 0.01F);
      assertFalse(catalogLight0.isBackFaceShown());
      assertNull(catalogLight0.getCreationDate());
      assertNull(catalogLight0.getColor());
      assertFalse(catalogLight0.isModifiable());
      assertNull(catalogLight0.getInformation());
      assertTrue(catalogLight0.isDeformable());
      assertEquals("", catalogLight0.getCurrency());
      assertEquals("", homeLight0.getCurrency());
      assertEquals((-897.795F), homeLight0.getGroundElevation(), 0.01F);
      assertTrue(homeLight0.isVisible());
      assertEquals((-897.795F), homeLight0.getElevation(), 0.01F);
      assertFalse(homeLight0.isBackFaceShown());
      assertEquals((-611.6462F), homeLight0.getWidth(), 0.01F);
      assertFalse(homeLight0.isNameVisible());
      assertNull(homeLight0.getShininess());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      assertTrue(homeLight0.isTexturable());
      assertEquals("s<7]@ykxs+ 0`a ", homeLight0.getName());
      assertEquals((-305.8231F), homeLight0.getX(), 0.01F);
      assertTrue(homeLight0.isResizable());
      assertTrue(homeLight0.isDeformable());
      assertEquals("s<7]@ykxs+ 0`a ", homeLight0.getDescription());
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertEquals("", homeLight0.getStaircaseCutOutShape());
      assertEquals("\"<xp|JAv^\"<^Qh{/~", homeLight0.getCatalogId());
      assertTrue(homeLight0.isMovable());
      assertEquals(1.7441415F, homeLight0.getDepth(), 0.01F);
      assertEquals(0.5F, homeLight0.getHeight(), 0.01F);
      assertFalse(homeLight0.isModelMirrored());
      assertNull(homeLight0.getColor());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertEquals(0.8720707F, homeLight0.getY(), 0.01F);
      assertTrue(homeLight1.isMovable());
      assertTrue(homeLight1.isResizable());
      assertEquals("\"<xp|JAv^\"<^Qh{/~", homeLight1.getCatalogId());
      assertEquals("s<7]@ykxs+ 0`a ", homeLight1.getDescription());
      assertNull(homeLight1.getShininess());
      assertEquals("", homeLight1.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight1.getNameAngle(), 0.01F);
      assertEquals(0.0F, homeLight1.getNameYOffset(), 0.01F);
      assertEquals((-897.795F), homeLight1.getGroundElevation(), 0.01F);
      assertEquals(0.5F, homeLight1.getHeight(), 0.01F);
      assertEquals(0.8720707F, homeLight1.getY(), 0.01F);
      assertEquals("", homeLight1.getCurrency());
      assertEquals(0.5F, homeLight1.getPower(), 0.01F);
      assertEquals((-897.795F), homeLight1.getElevation(), 0.01F);
      assertFalse(homeLight1.isBackFaceShown());
      assertFalse(homeLight1.isNameVisible());
      assertNull(homeLight1.getColor());
      assertEquals(1.7441415F, homeLight1.getDepth(), 0.01F);
      assertFalse(homeLight1.isModelMirrored());
      assertTrue(homeLight1.isVisible());
      assertEquals((-611.6462F), homeLight1.getWidth(), 0.01F);
      assertTrue(homeLight1.isDeformable());
      assertEquals("s<7]@ykxs+ 0`a ", homeLight1.getName());
      assertEquals(0.0F, homeLight1.getNameXOffset(), 0.01F);
      assertTrue(homeLight1.isTexturable());
      assertEquals(0.0F, homeLight1.getAngle(), 0.01F);
      assertEquals((-305.8231F), homeLight1.getX(), 0.01F);
      assertFalse(homeLight1.isDoorOrWindow());
      
      HomeLight homeLight2 = homeLight1.clone();
      assertEquals(2, lightSourceArray0.length);
      assertNotNull(homeLight2);
      assertNotSame(homeLight0, homeLight1);
      assertNotSame(homeLight0, homeLight2);
      assertNotSame(homeLight1, homeLight2);
      assertNotSame(homeLight1, homeLight0);
      assertNotSame(homeLight2, homeLight0);
      assertNotSame(homeLight2, homeLight1);
      assertFalse(homeLight0.equals((Object)homeLight1));
      assertFalse(homeLight1.equals((Object)homeLight0));
      assertFalse(homeLight2.equals((Object)homeLight0));
      assertFalse(homeLight2.equals((Object)homeLight1));
      assertNull(uRL0.getRef());
      assertEquals(0, uRL0.getDefaultPort());
      assertEquals("", uRL0.getFile());
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getQuery());
      assertEquals("s<7]@ykxs+ 0`a ", uRL0.getProtocol());
      assertNull(uRL0.toExternalForm());
      assertNull(uRL0.getAuthority());
      assertNull(uRL0.getUserInfo());
      assertNull(uRL0.toString());
      assertNull(uRL0.getHost());
      assertEquals("", uRL0.getPath());
      assertFalse(temporaryURLContent0.isJAREntry());
      assertEquals((short)10, bigDecimal0.shortValue());
      assertEquals((byte)10, bigDecimal0.byteValue());
      assertTrue(catalogLight0.isTexturable());
      assertTrue(catalogLight0.isProportional());
      assertEquals(1.7441415F, catalogLight0.getDepth(), 0.01F);
      assertFalse(catalogLight0.isDoorOrWindow());
      assertEquals(0.5F, catalogLight0.getHeight(), 0.01F);
      assertEquals("\"<xp|JAv^\"<^Qh{/~", catalogLight0.getId());
      assertEquals("", catalogLight0.getStaircaseCutOutShape());
      assertTrue(catalogLight0.isMovable());
      assertTrue(catalogLight0.isResizable());
      assertEquals((-611.6462F), catalogLight0.getWidth(), 0.01F);
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertNull(catalogLight0.getGrade());
      assertEquals("s<7]@ykxs+ 0`a ", catalogLight0.getName());
      assertEquals("s<7]@ykxs+ 0`a ", catalogLight0.getDescription());
      assertEquals("P'HZa~G", catalogLight0.getCreator());
      assertEquals((-897.795F), catalogLight0.getElevation(), 0.01F);
      assertFalse(catalogLight0.isBackFaceShown());
      assertNull(catalogLight0.getCreationDate());
      assertNull(catalogLight0.getColor());
      assertFalse(catalogLight0.isModifiable());
      assertNull(catalogLight0.getInformation());
      assertTrue(catalogLight0.isDeformable());
      assertEquals("", catalogLight0.getCurrency());
      assertEquals("", homeLight0.getCurrency());
      assertEquals((-897.795F), homeLight0.getGroundElevation(), 0.01F);
      assertTrue(homeLight0.isVisible());
      assertEquals((-897.795F), homeLight0.getElevation(), 0.01F);
      assertFalse(homeLight0.isBackFaceShown());
      assertEquals((-611.6462F), homeLight0.getWidth(), 0.01F);
      assertFalse(homeLight0.isNameVisible());
      assertNull(homeLight0.getShininess());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      assertTrue(homeLight0.isTexturable());
      assertEquals("s<7]@ykxs+ 0`a ", homeLight0.getName());
      assertEquals((-305.8231F), homeLight0.getX(), 0.01F);
      assertTrue(homeLight0.isResizable());
      assertTrue(homeLight0.isDeformable());
      assertEquals("s<7]@ykxs+ 0`a ", homeLight0.getDescription());
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertEquals("", homeLight0.getStaircaseCutOutShape());
      assertEquals("\"<xp|JAv^\"<^Qh{/~", homeLight0.getCatalogId());
      assertTrue(homeLight0.isMovable());
      assertEquals(1.7441415F, homeLight0.getDepth(), 0.01F);
      assertEquals(0.5F, homeLight0.getHeight(), 0.01F);
      assertFalse(homeLight0.isModelMirrored());
      assertNull(homeLight0.getColor());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertEquals(0.8720707F, homeLight0.getY(), 0.01F);
      assertTrue(homeLight1.isMovable());
      assertTrue(homeLight1.isResizable());
      assertEquals("\"<xp|JAv^\"<^Qh{/~", homeLight1.getCatalogId());
      assertEquals("s<7]@ykxs+ 0`a ", homeLight1.getDescription());
      assertNull(homeLight1.getShininess());
      assertEquals("", homeLight1.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight1.getNameAngle(), 0.01F);
      assertEquals(0.0F, homeLight1.getNameYOffset(), 0.01F);
      assertEquals((-897.795F), homeLight1.getGroundElevation(), 0.01F);
      assertEquals(0.5F, homeLight1.getHeight(), 0.01F);
      assertEquals(0.8720707F, homeLight1.getY(), 0.01F);
      assertEquals("", homeLight1.getCurrency());
      assertEquals(0.5F, homeLight1.getPower(), 0.01F);
      assertEquals((-897.795F), homeLight1.getElevation(), 0.01F);
      assertFalse(homeLight1.isBackFaceShown());
      assertFalse(homeLight1.isNameVisible());
      assertNull(homeLight1.getColor());
      assertEquals(1.7441415F, homeLight1.getDepth(), 0.01F);
      assertFalse(homeLight1.isModelMirrored());
      assertTrue(homeLight1.isVisible());
      assertEquals((-611.6462F), homeLight1.getWidth(), 0.01F);
      assertTrue(homeLight1.isDeformable());
      assertEquals("s<7]@ykxs+ 0`a ", homeLight1.getName());
      assertEquals(0.0F, homeLight1.getNameXOffset(), 0.01F);
      assertTrue(homeLight1.isTexturable());
      assertEquals(0.0F, homeLight1.getAngle(), 0.01F);
      assertEquals((-305.8231F), homeLight1.getX(), 0.01F);
      assertFalse(homeLight1.isDoorOrWindow());
      assertEquals("s<7]@ykxs+ 0`a ", homeLight2.getDescription());
      assertEquals("\"<xp|JAv^\"<^Qh{/~", homeLight2.getCatalogId());
      assertTrue(homeLight2.isMovable());
      assertEquals(0.0F, homeLight2.getNameAngle(), 0.01F);
      assertTrue(homeLight2.isResizable());
      assertEquals("", homeLight2.getStaircaseCutOutShape());
      assertTrue(homeLight2.isVisible());
      assertNull(homeLight2.getShininess());
      assertEquals(0.0F, homeLight2.getNameYOffset(), 0.01F);
      assertEquals(0.8720707F, homeLight2.getY(), 0.01F);
      assertEquals((-897.795F), homeLight2.getGroundElevation(), 0.01F);
      assertEquals(0.5F, homeLight2.getHeight(), 0.01F);
      assertEquals("", homeLight2.getCurrency());
      assertEquals(0.5F, homeLight2.getPower(), 0.01F);
      assertFalse(homeLight2.isDoorOrWindow());
      assertEquals((-897.795F), homeLight2.getElevation(), 0.01F);
      assertFalse(homeLight2.isBackFaceShown());
      assertNull(homeLight2.getColor());
      assertEquals(1.7441415F, homeLight2.getDepth(), 0.01F);
      assertFalse(homeLight2.isModelMirrored());
      assertTrue(homeLight2.isDeformable());
      assertEquals((-611.6462F), homeLight2.getWidth(), 0.01F);
      assertFalse(homeLight2.isNameVisible());
      assertEquals(0.0F, homeLight2.getNameXOffset(), 0.01F);
      assertEquals("s<7]@ykxs+ 0`a ", homeLight2.getName());
      assertEquals(0.0F, homeLight2.getAngle(), 0.01F);
      assertTrue(homeLight2.isTexturable());
      assertEquals((-305.8231F), homeLight2.getX(), 0.01F);
      
      HomeLight homeLight3 = homeLight1.clone();
      assertEquals(2, lightSourceArray0.length);
      assertNotNull(homeLight3);
      assertNotSame(homeLight0, homeLight1);
      assertNotSame(homeLight0, homeLight3);
      assertNotSame(homeLight0, homeLight2);
      assertNotSame(homeLight1, homeLight2);
      assertNotSame(homeLight1, homeLight3);
      assertNotSame(homeLight1, homeLight0);
      assertNotSame(homeLight3, homeLight1);
      assertNotSame(homeLight3, homeLight0);
      assertNotSame(homeLight3, homeLight2);
      assertFalse(homeLight0.equals((Object)homeLight1));
      assertFalse(homeLight0.equals((Object)homeLight2));
      assertFalse(homeLight1.equals((Object)homeLight2));
      assertFalse(homeLight1.equals((Object)homeLight0));
      assertFalse(homeLight3.equals((Object)homeLight1));
      assertFalse(homeLight3.equals((Object)homeLight0));
      assertFalse(homeLight3.equals((Object)homeLight2));
      assertNull(uRL0.getRef());
      assertEquals(0, uRL0.getDefaultPort());
      assertEquals("", uRL0.getFile());
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getQuery());
      assertEquals("s<7]@ykxs+ 0`a ", uRL0.getProtocol());
      assertNull(uRL0.toExternalForm());
      assertNull(uRL0.getAuthority());
      assertNull(uRL0.getUserInfo());
      assertNull(uRL0.toString());
      assertNull(uRL0.getHost());
      assertEquals("", uRL0.getPath());
      assertFalse(temporaryURLContent0.isJAREntry());
      assertEquals((short)10, bigDecimal0.shortValue());
      assertEquals((byte)10, bigDecimal0.byteValue());
      assertTrue(catalogLight0.isTexturable());
      assertTrue(catalogLight0.isProportional());
      assertEquals(1.7441415F, catalogLight0.getDepth(), 0.01F);
      assertFalse(catalogLight0.isDoorOrWindow());
      assertEquals(0.5F, catalogLight0.getHeight(), 0.01F);
      assertEquals("\"<xp|JAv^\"<^Qh{/~", catalogLight0.getId());
      assertEquals("", catalogLight0.getStaircaseCutOutShape());
      assertTrue(catalogLight0.isMovable());
      assertTrue(catalogLight0.isResizable());
      assertEquals((-611.6462F), catalogLight0.getWidth(), 0.01F);
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertNull(catalogLight0.getGrade());
      assertEquals("s<7]@ykxs+ 0`a ", catalogLight0.getName());
      assertEquals("s<7]@ykxs+ 0`a ", catalogLight0.getDescription());
      assertEquals("P'HZa~G", catalogLight0.getCreator());
      assertEquals((-897.795F), catalogLight0.getElevation(), 0.01F);
      assertFalse(catalogLight0.isBackFaceShown());
      assertNull(catalogLight0.getCreationDate());
      assertNull(catalogLight0.getColor());
      assertFalse(catalogLight0.isModifiable());
      assertNull(catalogLight0.getInformation());
      assertTrue(catalogLight0.isDeformable());
      assertEquals("", catalogLight0.getCurrency());
      assertEquals("", homeLight0.getCurrency());
      assertEquals((-897.795F), homeLight0.getGroundElevation(), 0.01F);
      assertTrue(homeLight0.isVisible());
      assertEquals((-897.795F), homeLight0.getElevation(), 0.01F);
      assertFalse(homeLight0.isBackFaceShown());
      assertEquals((-611.6462F), homeLight0.getWidth(), 0.01F);
      assertFalse(homeLight0.isNameVisible());
      assertNull(homeLight0.getShininess());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      assertTrue(homeLight0.isTexturable());
      assertEquals("s<7]@ykxs+ 0`a ", homeLight0.getName());
      assertEquals((-305.8231F), homeLight0.getX(), 0.01F);
      assertTrue(homeLight0.isResizable());
      assertTrue(homeLight0.isDeformable());
      assertEquals("s<7]@ykxs+ 0`a ", homeLight0.getDescription());
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertEquals("", homeLight0.getStaircaseCutOutShape());
      assertEquals("\"<xp|JAv^\"<^Qh{/~", homeLight0.getCatalogId());
      assertTrue(homeLight0.isMovable());
      assertEquals(1.7441415F, homeLight0.getDepth(), 0.01F);
      assertEquals(0.5F, homeLight0.getHeight(), 0.01F);
      assertFalse(homeLight0.isModelMirrored());
      assertNull(homeLight0.getColor());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertEquals(0.8720707F, homeLight0.getY(), 0.01F);
      assertTrue(homeLight1.isMovable());
      assertTrue(homeLight1.isResizable());
      assertEquals("\"<xp|JAv^\"<^Qh{/~", homeLight1.getCatalogId());
      assertEquals("s<7]@ykxs+ 0`a ", homeLight1.getDescription());
      assertNull(homeLight1.getShininess());
      assertEquals("", homeLight1.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight1.getNameAngle(), 0.01F);
      assertEquals(0.0F, homeLight1.getNameYOffset(), 0.01F);
      assertEquals((-897.795F), homeLight1.getGroundElevation(), 0.01F);
      assertEquals(0.5F, homeLight1.getHeight(), 0.01F);
      assertEquals(0.8720707F, homeLight1.getY(), 0.01F);
      assertEquals("", homeLight1.getCurrency());
      assertEquals(0.5F, homeLight1.getPower(), 0.01F);
      assertEquals((-897.795F), homeLight1.getElevation(), 0.01F);
      assertFalse(homeLight1.isBackFaceShown());
      assertFalse(homeLight1.isNameVisible());
      assertNull(homeLight1.getColor());
      assertEquals(1.7441415F, homeLight1.getDepth(), 0.01F);
      assertFalse(homeLight1.isModelMirrored());
      assertTrue(homeLight1.isVisible());
      assertEquals((-611.6462F), homeLight1.getWidth(), 0.01F);
      assertTrue(homeLight1.isDeformable());
      assertEquals("s<7]@ykxs+ 0`a ", homeLight1.getName());
      assertEquals(0.0F, homeLight1.getNameXOffset(), 0.01F);
      assertTrue(homeLight1.isTexturable());
      assertEquals(0.0F, homeLight1.getAngle(), 0.01F);
      assertEquals((-305.8231F), homeLight1.getX(), 0.01F);
      assertFalse(homeLight1.isDoorOrWindow());
      assertEquals("s<7]@ykxs+ 0`a ", homeLight3.getName());
      assertEquals("s<7]@ykxs+ 0`a ", homeLight3.getDescription());
      assertNull(homeLight3.getShininess());
      assertTrue(homeLight3.isResizable());
      assertEquals(0.5F, homeLight3.getHeight(), 0.01F);
      assertEquals(0.0F, homeLight3.getNameYOffset(), 0.01F);
      assertEquals(0.8720707F, homeLight3.getY(), 0.01F);
      assertEquals(0.0F, homeLight3.getNameXOffset(), 0.01F);
      assertEquals((-897.795F), homeLight3.getGroundElevation(), 0.01F);
      assertEquals(0.5F, homeLight3.getPower(), 0.01F);
      assertTrue(homeLight3.isDeformable());
      assertTrue(homeLight3.isVisible());
      assertEquals("", homeLight3.getCurrency());
      assertEquals("", homeLight3.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight3.getNameAngle(), 0.01F);
      assertEquals((-897.795F), homeLight3.getElevation(), 0.01F);
      assertEquals("\"<xp|JAv^\"<^Qh{/~", homeLight3.getCatalogId());
      assertTrue(homeLight3.isMovable());
      assertFalse(homeLight3.isDoorOrWindow());
      assertFalse(homeLight3.isModelMirrored());
      assertEquals((-305.8231F), homeLight3.getX(), 0.01F);
      assertEquals(0.0F, homeLight3.getAngle(), 0.01F);
      assertEquals(1.7441415F, homeLight3.getDepth(), 0.01F);
      assertTrue(homeLight3.isTexturable());
      assertNull(homeLight3.getColor());
      assertFalse(homeLight3.isBackFaceShown());
      assertFalse(homeLight3.isNameVisible());
      assertEquals((-611.6462F), homeLight3.getWidth(), 0.01F);
      
      boolean boolean0 = homeLight2.isBackFaceShown();
      assertEquals(2, lightSourceArray0.length);
      assertNotSame(homeLight0, homeLight1);
      assertNotSame(homeLight0, homeLight3);
      assertNotSame(homeLight0, homeLight2);
      assertNotSame(homeLight1, homeLight2);
      assertNotSame(homeLight1, homeLight3);
      assertNotSame(homeLight1, homeLight0);
      assertNotSame(homeLight2, homeLight0);
      assertNotSame(homeLight2, homeLight1);
      assertNotSame(homeLight2, homeLight3);
      assertFalse(homeLight0.equals((Object)homeLight1));
      assertFalse(homeLight0.equals((Object)homeLight3));
      assertFalse(homeLight0.equals((Object)homeLight2));
      assertFalse(homeLight1.equals((Object)homeLight2));
      assertFalse(homeLight1.equals((Object)homeLight3));
      assertFalse(homeLight1.equals((Object)homeLight0));
      assertFalse(homeLight2.equals((Object)homeLight0));
      assertFalse(homeLight2.equals((Object)homeLight1));
      assertFalse(homeLight2.equals((Object)homeLight3));
      assertFalse(boolean0);
      assertNull(uRL0.getRef());
      assertEquals(0, uRL0.getDefaultPort());
      assertEquals("", uRL0.getFile());
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getQuery());
      assertEquals("s<7]@ykxs+ 0`a ", uRL0.getProtocol());
      assertNull(uRL0.toExternalForm());
      assertNull(uRL0.getAuthority());
      assertNull(uRL0.getUserInfo());
      assertNull(uRL0.toString());
      assertNull(uRL0.getHost());
      assertEquals("", uRL0.getPath());
      assertFalse(temporaryURLContent0.isJAREntry());
      assertEquals((short)10, bigDecimal0.shortValue());
      assertEquals((byte)10, bigDecimal0.byteValue());
      assertTrue(catalogLight0.isTexturable());
      assertTrue(catalogLight0.isProportional());
      assertEquals(1.7441415F, catalogLight0.getDepth(), 0.01F);
      assertFalse(catalogLight0.isDoorOrWindow());
      assertEquals(0.5F, catalogLight0.getHeight(), 0.01F);
      assertEquals("\"<xp|JAv^\"<^Qh{/~", catalogLight0.getId());
      assertEquals("", catalogLight0.getStaircaseCutOutShape());
      assertTrue(catalogLight0.isMovable());
      assertTrue(catalogLight0.isResizable());
      assertEquals((-611.6462F), catalogLight0.getWidth(), 0.01F);
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertNull(catalogLight0.getGrade());
      assertEquals("s<7]@ykxs+ 0`a ", catalogLight0.getName());
      assertEquals("s<7]@ykxs+ 0`a ", catalogLight0.getDescription());
      assertEquals("P'HZa~G", catalogLight0.getCreator());
      assertEquals((-897.795F), catalogLight0.getElevation(), 0.01F);
      assertFalse(catalogLight0.isBackFaceShown());
      assertNull(catalogLight0.getCreationDate());
      assertNull(catalogLight0.getColor());
      assertFalse(catalogLight0.isModifiable());
      assertNull(catalogLight0.getInformation());
      assertTrue(catalogLight0.isDeformable());
      assertEquals("", catalogLight0.getCurrency());
      assertEquals("", homeLight0.getCurrency());
      assertEquals((-897.795F), homeLight0.getGroundElevation(), 0.01F);
      assertTrue(homeLight0.isVisible());
      assertEquals((-897.795F), homeLight0.getElevation(), 0.01F);
      assertFalse(homeLight0.isBackFaceShown());
      assertEquals((-611.6462F), homeLight0.getWidth(), 0.01F);
      assertFalse(homeLight0.isNameVisible());
      assertNull(homeLight0.getShininess());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      assertTrue(homeLight0.isTexturable());
      assertEquals("s<7]@ykxs+ 0`a ", homeLight0.getName());
      assertEquals((-305.8231F), homeLight0.getX(), 0.01F);
      assertTrue(homeLight0.isResizable());
      assertTrue(homeLight0.isDeformable());
      assertEquals("s<7]@ykxs+ 0`a ", homeLight0.getDescription());
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertEquals("", homeLight0.getStaircaseCutOutShape());
      assertEquals("\"<xp|JAv^\"<^Qh{/~", homeLight0.getCatalogId());
      assertTrue(homeLight0.isMovable());
      assertEquals(1.7441415F, homeLight0.getDepth(), 0.01F);
      assertEquals(0.5F, homeLight0.getHeight(), 0.01F);
      assertFalse(homeLight0.isModelMirrored());
      assertNull(homeLight0.getColor());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertEquals(0.8720707F, homeLight0.getY(), 0.01F);
      assertTrue(homeLight1.isMovable());
      assertTrue(homeLight1.isResizable());
      assertEquals("\"<xp|JAv^\"<^Qh{/~", homeLight1.getCatalogId());
      assertEquals("s<7]@ykxs+ 0`a ", homeLight1.getDescription());
      assertNull(homeLight1.getShininess());
      assertEquals("", homeLight1.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight1.getNameAngle(), 0.01F);
      assertEquals(0.0F, homeLight1.getNameYOffset(), 0.01F);
      assertEquals((-897.795F), homeLight1.getGroundElevation(), 0.01F);
      assertEquals(0.5F, homeLight1.getHeight(), 0.01F);
      assertEquals(0.8720707F, homeLight1.getY(), 0.01F);
      assertEquals("", homeLight1.getCurrency());
      assertEquals(0.5F, homeLight1.getPower(), 0.01F);
      assertEquals((-897.795F), homeLight1.getElevation(), 0.01F);
      assertFalse(homeLight1.isBackFaceShown());
      assertFalse(homeLight1.isNameVisible());
      assertNull(homeLight1.getColor());
      assertEquals(1.7441415F, homeLight1.getDepth(), 0.01F);
      assertFalse(homeLight1.isModelMirrored());
      assertTrue(homeLight1.isVisible());
      assertEquals((-611.6462F), homeLight1.getWidth(), 0.01F);
      assertTrue(homeLight1.isDeformable());
      assertEquals("s<7]@ykxs+ 0`a ", homeLight1.getName());
      assertEquals(0.0F, homeLight1.getNameXOffset(), 0.01F);
      assertTrue(homeLight1.isTexturable());
      assertEquals(0.0F, homeLight1.getAngle(), 0.01F);
      assertEquals((-305.8231F), homeLight1.getX(), 0.01F);
      assertFalse(homeLight1.isDoorOrWindow());
      assertEquals("s<7]@ykxs+ 0`a ", homeLight2.getDescription());
      assertEquals("\"<xp|JAv^\"<^Qh{/~", homeLight2.getCatalogId());
      assertTrue(homeLight2.isMovable());
      assertEquals(0.0F, homeLight2.getNameAngle(), 0.01F);
      assertTrue(homeLight2.isResizable());
      assertEquals("", homeLight2.getStaircaseCutOutShape());
      assertTrue(homeLight2.isVisible());
      assertNull(homeLight2.getShininess());
      assertEquals(0.0F, homeLight2.getNameYOffset(), 0.01F);
      assertEquals(0.8720707F, homeLight2.getY(), 0.01F);
      assertEquals((-897.795F), homeLight2.getGroundElevation(), 0.01F);
      assertEquals(0.5F, homeLight2.getHeight(), 0.01F);
      assertEquals("", homeLight2.getCurrency());
      assertEquals(0.5F, homeLight2.getPower(), 0.01F);
      assertFalse(homeLight2.isDoorOrWindow());
      assertEquals((-897.795F), homeLight2.getElevation(), 0.01F);
      assertFalse(homeLight2.isBackFaceShown());
      assertNull(homeLight2.getColor());
      assertEquals(1.7441415F, homeLight2.getDepth(), 0.01F);
      assertFalse(homeLight2.isModelMirrored());
      assertTrue(homeLight2.isDeformable());
      assertEquals((-611.6462F), homeLight2.getWidth(), 0.01F);
      assertFalse(homeLight2.isNameVisible());
      assertEquals(0.0F, homeLight2.getNameXOffset(), 0.01F);
      assertEquals("s<7]@ykxs+ 0`a ", homeLight2.getName());
      assertEquals(0.0F, homeLight2.getAngle(), 0.01F);
      assertTrue(homeLight2.isTexturable());
      assertEquals((-305.8231F), homeLight2.getX(), 0.01F);
      
      homeLight1.setMovable(false);
      assertEquals(2, lightSourceArray0.length);
      assertNotSame(homeLight0, homeLight1);
      assertNotSame(homeLight0, homeLight3);
      assertNotSame(homeLight0, homeLight2);
      assertNotSame(homeLight1, homeLight2);
      assertNotSame(homeLight1, homeLight3);
      assertNotSame(homeLight1, homeLight0);
      assertFalse(homeLight0.equals((Object)homeLight1));
      assertFalse(homeLight0.equals((Object)homeLight3));
      assertFalse(homeLight0.equals((Object)homeLight2));
      assertFalse(homeLight1.equals((Object)homeLight2));
      assertFalse(homeLight1.equals((Object)homeLight3));
      assertFalse(homeLight1.equals((Object)homeLight0));
      assertNull(uRL0.getRef());
      assertEquals(0, uRL0.getDefaultPort());
      assertEquals("", uRL0.getFile());
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getQuery());
      assertEquals("s<7]@ykxs+ 0`a ", uRL0.getProtocol());
      assertNull(uRL0.toExternalForm());
      assertNull(uRL0.getAuthority());
      assertNull(uRL0.getUserInfo());
      assertNull(uRL0.toString());
      assertNull(uRL0.getHost());
      assertEquals("", uRL0.getPath());
      assertFalse(temporaryURLContent0.isJAREntry());
      assertEquals((short)10, bigDecimal0.shortValue());
      assertEquals((byte)10, bigDecimal0.byteValue());
      assertTrue(catalogLight0.isTexturable());
      assertTrue(catalogLight0.isProportional());
      assertEquals(1.7441415F, catalogLight0.getDepth(), 0.01F);
      assertFalse(catalogLight0.isDoorOrWindow());
      assertEquals(0.5F, catalogLight0.getHeight(), 0.01F);
      assertEquals("\"<xp|JAv^\"<^Qh{/~", catalogLight0.getId());
      assertEquals("", catalogLight0.getStaircaseCutOutShape());
      assertTrue(catalogLight0.isMovable());
      assertTrue(catalogLight0.isResizable());
      assertEquals((-611.6462F), catalogLight0.getWidth(), 0.01F);
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertNull(catalogLight0.getGrade());
      assertEquals("s<7]@ykxs+ 0`a ", catalogLight0.getName());
      assertEquals("s<7]@ykxs+ 0`a ", catalogLight0.getDescription());
      assertEquals("P'HZa~G", catalogLight0.getCreator());
      assertEquals((-897.795F), catalogLight0.getElevation(), 0.01F);
      assertFalse(catalogLight0.isBackFaceShown());
      assertNull(catalogLight0.getCreationDate());
      assertNull(catalogLight0.getColor());
      assertFalse(catalogLight0.isModifiable());
      assertNull(catalogLight0.getInformation());
      assertTrue(catalogLight0.isDeformable());
      assertEquals("", catalogLight0.getCurrency());
      assertEquals("", homeLight0.getCurrency());
      assertEquals((-897.795F), homeLight0.getGroundElevation(), 0.01F);
      assertTrue(homeLight0.isVisible());
      assertEquals((-897.795F), homeLight0.getElevation(), 0.01F);
      assertFalse(homeLight0.isBackFaceShown());
      assertEquals((-611.6462F), homeLight0.getWidth(), 0.01F);
      assertFalse(homeLight0.isNameVisible());
      assertNull(homeLight0.getShininess());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      assertTrue(homeLight0.isTexturable());
      assertEquals("s<7]@ykxs+ 0`a ", homeLight0.getName());
      assertEquals((-305.8231F), homeLight0.getX(), 0.01F);
      assertTrue(homeLight0.isResizable());
      assertTrue(homeLight0.isDeformable());
      assertEquals("s<7]@ykxs+ 0`a ", homeLight0.getDescription());
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertEquals("", homeLight0.getStaircaseCutOutShape());
      assertEquals("\"<xp|JAv^\"<^Qh{/~", homeLight0.getCatalogId());
      assertTrue(homeLight0.isMovable());
      assertEquals(1.7441415F, homeLight0.getDepth(), 0.01F);
      assertEquals(0.5F, homeLight0.getHeight(), 0.01F);
      assertFalse(homeLight0.isModelMirrored());
      assertNull(homeLight0.getColor());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertEquals(0.8720707F, homeLight0.getY(), 0.01F);
      assertTrue(homeLight1.isResizable());
      assertEquals("\"<xp|JAv^\"<^Qh{/~", homeLight1.getCatalogId());
      assertEquals("s<7]@ykxs+ 0`a ", homeLight1.getDescription());
      assertNull(homeLight1.getShininess());
      assertEquals("", homeLight1.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight1.getNameAngle(), 0.01F);
      assertEquals(0.0F, homeLight1.getNameYOffset(), 0.01F);
      assertFalse(homeLight1.isMovable());
      assertEquals((-897.795F), homeLight1.getGroundElevation(), 0.01F);
      assertEquals(0.5F, homeLight1.getHeight(), 0.01F);
      assertEquals(0.8720707F, homeLight1.getY(), 0.01F);
      assertEquals("", homeLight1.getCurrency());
      assertEquals(0.5F, homeLight1.getPower(), 0.01F);
      assertEquals((-897.795F), homeLight1.getElevation(), 0.01F);
      assertFalse(homeLight1.isBackFaceShown());
      assertFalse(homeLight1.isNameVisible());
      assertNull(homeLight1.getColor());
      assertEquals(1.7441415F, homeLight1.getDepth(), 0.01F);
      assertFalse(homeLight1.isModelMirrored());
      assertTrue(homeLight1.isVisible());
      assertEquals((-611.6462F), homeLight1.getWidth(), 0.01F);
      assertTrue(homeLight1.isDeformable());
      assertEquals("s<7]@ykxs+ 0`a ", homeLight1.getName());
      assertEquals(0.0F, homeLight1.getNameXOffset(), 0.01F);
      assertTrue(homeLight1.isTexturable());
      assertEquals(0.0F, homeLight1.getAngle(), 0.01F);
      assertEquals((-305.8231F), homeLight1.getX(), 0.01F);
      assertFalse(homeLight1.isDoorOrWindow());
      
      TemporaryURLContent temporaryURLContent1 = (TemporaryURLContent)homeLight3.getIcon();
      assertEquals(2, lightSourceArray0.length);
      assertNotNull(temporaryURLContent1);
      assertSame(temporaryURLContent0, temporaryURLContent1);
      assertNotSame(homeLight0, homeLight1);
      assertNotSame(homeLight0, homeLight3);
      assertNotSame(homeLight0, homeLight2);
      assertNotSame(homeLight1, homeLight2);
      assertNotSame(homeLight1, homeLight3);
      assertNotSame(homeLight1, homeLight0);
      assertNotSame(homeLight3, homeLight1);
      assertNotSame(homeLight3, homeLight0);
      assertNotSame(homeLight3, homeLight2);
      assertSame(temporaryURLContent1, temporaryURLContent0);
      assertFalse(homeLight0.equals((Object)homeLight1));
      assertFalse(homeLight0.equals((Object)homeLight3));
      assertFalse(homeLight0.equals((Object)homeLight2));
      assertFalse(homeLight1.equals((Object)homeLight2));
      assertFalse(homeLight1.equals((Object)homeLight3));
      assertFalse(homeLight1.equals((Object)homeLight0));
      assertFalse(homeLight3.equals((Object)homeLight1));
      assertFalse(homeLight3.equals((Object)homeLight0));
      assertFalse(homeLight3.equals((Object)homeLight2));
      assertNull(uRL0.getRef());
      assertEquals(0, uRL0.getDefaultPort());
      assertEquals("", uRL0.getFile());
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getQuery());
      assertEquals("s<7]@ykxs+ 0`a ", uRL0.getProtocol());
      assertNull(uRL0.toExternalForm());
      assertNull(uRL0.getAuthority());
      assertNull(uRL0.getUserInfo());
      assertNull(uRL0.toString());
      assertNull(uRL0.getHost());
      assertEquals("", uRL0.getPath());
      assertFalse(temporaryURLContent0.isJAREntry());
      assertEquals((short)10, bigDecimal0.shortValue());
      assertEquals((byte)10, bigDecimal0.byteValue());
      assertTrue(catalogLight0.isTexturable());
      assertTrue(catalogLight0.isProportional());
      assertEquals(1.7441415F, catalogLight0.getDepth(), 0.01F);
      assertFalse(catalogLight0.isDoorOrWindow());
      assertEquals(0.5F, catalogLight0.getHeight(), 0.01F);
      assertEquals("\"<xp|JAv^\"<^Qh{/~", catalogLight0.getId());
      assertEquals("", catalogLight0.getStaircaseCutOutShape());
      assertTrue(catalogLight0.isMovable());
      assertTrue(catalogLight0.isResizable());
      assertEquals((-611.6462F), catalogLight0.getWidth(), 0.01F);
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertNull(catalogLight0.getGrade());
      assertEquals("s<7]@ykxs+ 0`a ", catalogLight0.getName());
      assertEquals("s<7]@ykxs+ 0`a ", catalogLight0.getDescription());
      assertEquals("P'HZa~G", catalogLight0.getCreator());
      assertEquals((-897.795F), catalogLight0.getElevation(), 0.01F);
      assertFalse(catalogLight0.isBackFaceShown());
      assertNull(catalogLight0.getCreationDate());
      assertNull(catalogLight0.getColor());
      assertFalse(catalogLight0.isModifiable());
      assertNull(catalogLight0.getInformation());
      assertTrue(catalogLight0.isDeformable());
      assertEquals("", catalogLight0.getCurrency());
      assertEquals("", homeLight0.getCurrency());
      assertEquals((-897.795F), homeLight0.getGroundElevation(), 0.01F);
      assertTrue(homeLight0.isVisible());
      assertEquals((-897.795F), homeLight0.getElevation(), 0.01F);
      assertFalse(homeLight0.isBackFaceShown());
      assertEquals((-611.6462F), homeLight0.getWidth(), 0.01F);
      assertFalse(homeLight0.isNameVisible());
      assertNull(homeLight0.getShininess());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      assertTrue(homeLight0.isTexturable());
      assertEquals("s<7]@ykxs+ 0`a ", homeLight0.getName());
      assertEquals((-305.8231F), homeLight0.getX(), 0.01F);
      assertTrue(homeLight0.isResizable());
      assertTrue(homeLight0.isDeformable());
      assertEquals("s<7]@ykxs+ 0`a ", homeLight0.getDescription());
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertEquals("", homeLight0.getStaircaseCutOutShape());
      assertEquals("\"<xp|JAv^\"<^Qh{/~", homeLight0.getCatalogId());
      assertTrue(homeLight0.isMovable());
      assertEquals(1.7441415F, homeLight0.getDepth(), 0.01F);
      assertEquals(0.5F, homeLight0.getHeight(), 0.01F);
      assertFalse(homeLight0.isModelMirrored());
      assertNull(homeLight0.getColor());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertEquals(0.8720707F, homeLight0.getY(), 0.01F);
      assertTrue(homeLight1.isResizable());
      assertEquals("\"<xp|JAv^\"<^Qh{/~", homeLight1.getCatalogId());
      assertEquals("s<7]@ykxs+ 0`a ", homeLight1.getDescription());
      assertNull(homeLight1.getShininess());
      assertEquals("", homeLight1.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight1.getNameAngle(), 0.01F);
      assertEquals(0.0F, homeLight1.getNameYOffset(), 0.01F);
      assertFalse(homeLight1.isMovable());
      assertEquals((-897.795F), homeLight1.getGroundElevation(), 0.01F);
      assertEquals(0.5F, homeLight1.getHeight(), 0.01F);
      assertEquals(0.8720707F, homeLight1.getY(), 0.01F);
      assertEquals("", homeLight1.getCurrency());
      assertEquals(0.5F, homeLight1.getPower(), 0.01F);
      assertEquals((-897.795F), homeLight1.getElevation(), 0.01F);
      assertFalse(homeLight1.isBackFaceShown());
      assertFalse(homeLight1.isNameVisible());
      assertNull(homeLight1.getColor());
      assertEquals(1.7441415F, homeLight1.getDepth(), 0.01F);
      assertFalse(homeLight1.isModelMirrored());
      assertTrue(homeLight1.isVisible());
      assertEquals((-611.6462F), homeLight1.getWidth(), 0.01F);
      assertTrue(homeLight1.isDeformable());
      assertEquals("s<7]@ykxs+ 0`a ", homeLight1.getName());
      assertEquals(0.0F, homeLight1.getNameXOffset(), 0.01F);
      assertTrue(homeLight1.isTexturable());
      assertEquals(0.0F, homeLight1.getAngle(), 0.01F);
      assertEquals((-305.8231F), homeLight1.getX(), 0.01F);
      assertFalse(homeLight1.isDoorOrWindow());
      assertEquals("s<7]@ykxs+ 0`a ", homeLight3.getName());
      assertEquals("s<7]@ykxs+ 0`a ", homeLight3.getDescription());
      assertNull(homeLight3.getShininess());
      assertTrue(homeLight3.isResizable());
      assertEquals(0.5F, homeLight3.getHeight(), 0.01F);
      assertEquals(0.0F, homeLight3.getNameYOffset(), 0.01F);
      assertEquals(0.8720707F, homeLight3.getY(), 0.01F);
      assertEquals(0.0F, homeLight3.getNameXOffset(), 0.01F);
      assertEquals((-897.795F), homeLight3.getGroundElevation(), 0.01F);
      assertEquals(0.5F, homeLight3.getPower(), 0.01F);
      assertTrue(homeLight3.isDeformable());
      assertTrue(homeLight3.isVisible());
      assertEquals("", homeLight3.getCurrency());
      assertEquals("", homeLight3.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight3.getNameAngle(), 0.01F);
      assertEquals((-897.795F), homeLight3.getElevation(), 0.01F);
      assertEquals("\"<xp|JAv^\"<^Qh{/~", homeLight3.getCatalogId());
      assertTrue(homeLight3.isMovable());
      assertFalse(homeLight3.isDoorOrWindow());
      assertFalse(homeLight3.isModelMirrored());
      assertEquals((-305.8231F), homeLight3.getX(), 0.01F);
      assertEquals(0.0F, homeLight3.getAngle(), 0.01F);
      assertEquals(1.7441415F, homeLight3.getDepth(), 0.01F);
      assertTrue(homeLight3.isTexturable());
      assertNull(homeLight3.getColor());
      assertFalse(homeLight3.isBackFaceShown());
      assertFalse(homeLight3.isNameVisible());
      assertEquals((-611.6462F), homeLight3.getWidth(), 0.01F);
      assertFalse(temporaryURLContent1.isJAREntry());
      
      homeLight2.setDepth(0.5F);
      assertEquals(2, lightSourceArray0.length);
      assertSame(temporaryURLContent0, temporaryURLContent1);
      assertNotSame(homeLight0, homeLight1);
      assertNotSame(homeLight0, homeLight3);
      assertNotSame(homeLight0, homeLight2);
      assertNotSame(homeLight1, homeLight2);
      assertNotSame(homeLight1, homeLight3);
      assertNotSame(homeLight1, homeLight0);
      assertNotSame(homeLight2, homeLight0);
      assertNotSame(homeLight2, homeLight1);
      assertNotSame(homeLight2, homeLight3);
      assertFalse(homeLight0.equals((Object)homeLight1));
      assertFalse(homeLight0.equals((Object)homeLight3));
      assertFalse(homeLight0.equals((Object)homeLight2));
      assertFalse(homeLight1.equals((Object)homeLight2));
      assertFalse(homeLight1.equals((Object)homeLight3));
      assertFalse(homeLight1.equals((Object)homeLight0));
      assertFalse(homeLight2.equals((Object)homeLight0));
      assertFalse(homeLight2.equals((Object)homeLight1));
      assertFalse(homeLight2.equals((Object)homeLight3));
      assertNull(uRL0.getRef());
      assertEquals(0, uRL0.getDefaultPort());
      assertEquals("", uRL0.getFile());
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getQuery());
      assertEquals("s<7]@ykxs+ 0`a ", uRL0.getProtocol());
      assertNull(uRL0.toExternalForm());
      assertNull(uRL0.getAuthority());
      assertNull(uRL0.getUserInfo());
      assertNull(uRL0.toString());
      assertNull(uRL0.getHost());
      assertEquals("", uRL0.getPath());
      assertFalse(temporaryURLContent0.isJAREntry());
      assertEquals((short)10, bigDecimal0.shortValue());
      assertEquals((byte)10, bigDecimal0.byteValue());
      assertTrue(catalogLight0.isTexturable());
      assertTrue(catalogLight0.isProportional());
      assertEquals(1.7441415F, catalogLight0.getDepth(), 0.01F);
      assertFalse(catalogLight0.isDoorOrWindow());
      assertEquals(0.5F, catalogLight0.getHeight(), 0.01F);
      assertEquals("\"<xp|JAv^\"<^Qh{/~", catalogLight0.getId());
      assertEquals("", catalogLight0.getStaircaseCutOutShape());
      assertTrue(catalogLight0.isMovable());
      assertTrue(catalogLight0.isResizable());
      assertEquals((-611.6462F), catalogLight0.getWidth(), 0.01F);
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertNull(catalogLight0.getGrade());
      assertEquals("s<7]@ykxs+ 0`a ", catalogLight0.getName());
      assertEquals("s<7]@ykxs+ 0`a ", catalogLight0.getDescription());
      assertEquals("P'HZa~G", catalogLight0.getCreator());
      assertEquals((-897.795F), catalogLight0.getElevation(), 0.01F);
      assertFalse(catalogLight0.isBackFaceShown());
      assertNull(catalogLight0.getCreationDate());
      assertNull(catalogLight0.getColor());
      assertFalse(catalogLight0.isModifiable());
      assertNull(catalogLight0.getInformation());
      assertTrue(catalogLight0.isDeformable());
      assertEquals("", catalogLight0.getCurrency());
      assertEquals("", homeLight0.getCurrency());
      assertEquals((-897.795F), homeLight0.getGroundElevation(), 0.01F);
      assertTrue(homeLight0.isVisible());
      assertEquals((-897.795F), homeLight0.getElevation(), 0.01F);
      assertFalse(homeLight0.isBackFaceShown());
      assertEquals((-611.6462F), homeLight0.getWidth(), 0.01F);
      assertFalse(homeLight0.isNameVisible());
      assertNull(homeLight0.getShininess());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      assertTrue(homeLight0.isTexturable());
      assertEquals("s<7]@ykxs+ 0`a ", homeLight0.getName());
      assertEquals((-305.8231F), homeLight0.getX(), 0.01F);
      assertTrue(homeLight0.isResizable());
      assertTrue(homeLight0.isDeformable());
      assertEquals("s<7]@ykxs+ 0`a ", homeLight0.getDescription());
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertEquals("", homeLight0.getStaircaseCutOutShape());
      assertEquals("\"<xp|JAv^\"<^Qh{/~", homeLight0.getCatalogId());
      assertTrue(homeLight0.isMovable());
      assertEquals(1.7441415F, homeLight0.getDepth(), 0.01F);
      assertEquals(0.5F, homeLight0.getHeight(), 0.01F);
      assertFalse(homeLight0.isModelMirrored());
      assertNull(homeLight0.getColor());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertEquals(0.8720707F, homeLight0.getY(), 0.01F);
      assertTrue(homeLight1.isResizable());
      assertEquals("\"<xp|JAv^\"<^Qh{/~", homeLight1.getCatalogId());
      assertEquals("s<7]@ykxs+ 0`a ", homeLight1.getDescription());
      assertNull(homeLight1.getShininess());
      assertEquals("", homeLight1.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight1.getNameAngle(), 0.01F);
      assertEquals(0.0F, homeLight1.getNameYOffset(), 0.01F);
      assertFalse(homeLight1.isMovable());
      assertEquals((-897.795F), homeLight1.getGroundElevation(), 0.01F);
      assertEquals(0.5F, homeLight1.getHeight(), 0.01F);
      assertEquals(0.8720707F, homeLight1.getY(), 0.01F);
      assertEquals("", homeLight1.getCurrency());
      assertEquals(0.5F, homeLight1.getPower(), 0.01F);
      assertEquals((-897.795F), homeLight1.getElevation(), 0.01F);
      assertFalse(homeLight1.isBackFaceShown());
      assertFalse(homeLight1.isNameVisible());
      assertNull(homeLight1.getColor());
      assertEquals(1.7441415F, homeLight1.getDepth(), 0.01F);
      assertFalse(homeLight1.isModelMirrored());
      assertTrue(homeLight1.isVisible());
      assertEquals((-611.6462F), homeLight1.getWidth(), 0.01F);
      assertTrue(homeLight1.isDeformable());
      assertEquals("s<7]@ykxs+ 0`a ", homeLight1.getName());
      assertEquals(0.0F, homeLight1.getNameXOffset(), 0.01F);
      assertTrue(homeLight1.isTexturable());
      assertEquals(0.0F, homeLight1.getAngle(), 0.01F);
      assertEquals((-305.8231F), homeLight1.getX(), 0.01F);
      assertFalse(homeLight1.isDoorOrWindow());
      assertEquals("s<7]@ykxs+ 0`a ", homeLight2.getDescription());
      assertEquals("\"<xp|JAv^\"<^Qh{/~", homeLight2.getCatalogId());
      assertTrue(homeLight2.isMovable());
      assertEquals(0.0F, homeLight2.getNameAngle(), 0.01F);
      assertTrue(homeLight2.isResizable());
      assertEquals("", homeLight2.getStaircaseCutOutShape());
      assertTrue(homeLight2.isVisible());
      assertNull(homeLight2.getShininess());
      assertEquals(0.5F, homeLight2.getDepth(), 0.01F);
      assertEquals(0.0F, homeLight2.getNameYOffset(), 0.01F);
      assertEquals(0.8720707F, homeLight2.getY(), 0.01F);
      assertEquals((-897.795F), homeLight2.getGroundElevation(), 0.01F);
      assertEquals(0.5F, homeLight2.getHeight(), 0.01F);
      assertEquals("", homeLight2.getCurrency());
      assertEquals(0.5F, homeLight2.getPower(), 0.01F);
      assertFalse(homeLight2.isDoorOrWindow());
      assertEquals((-897.795F), homeLight2.getElevation(), 0.01F);
      assertFalse(homeLight2.isBackFaceShown());
      assertNull(homeLight2.getColor());
      assertFalse(homeLight2.isModelMirrored());
      assertTrue(homeLight2.isDeformable());
      assertEquals((-611.6462F), homeLight2.getWidth(), 0.01F);
      assertFalse(homeLight2.isNameVisible());
      assertEquals(0.0F, homeLight2.getNameXOffset(), 0.01F);
      assertEquals("s<7]@ykxs+ 0`a ", homeLight2.getName());
      assertEquals(0.0F, homeLight2.getAngle(), 0.01F);
      assertTrue(homeLight2.isTexturable());
      assertEquals((-305.8231F), homeLight2.getX(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      Integer integer0 = new Integer((-1469));
      assertNotNull(integer0);
      assertEquals((-1469), (int)integer0);
      
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      Light light0 = mock(Light.class, new ViolatedAssumptionAnswer());
      doReturn((Integer) null).when(light0).getColor();
      doReturn((String) null).when(light0).getCurrency();
      doReturn(0.0F).when(light0).getDepth();
      doReturn((String) null).when(light0).getDescription();
      doReturn(0.0F).when(light0).getElevation();
      doReturn(0.0F).when(light0).getHeight();
      doReturn((Content) null).when(light0).getIcon();
      doReturn((Content) null).when(light0).getModel();
      doReturn((float[][]) null).when(light0).getModelRotation();
      doReturn((String) null).when(light0).getName();
      doReturn((Content) null).when(light0).getPlanIcon();
      doReturn((BigDecimal) null).when(light0).getPrice();
      doReturn((String) null).when(light0).getStaircaseCutOutShape();
      doReturn((BigDecimal) null).when(light0).getValueAddedTaxPercentage();
      doReturn(0.0F).when(light0).getWidth();
      doReturn(false).when(light0).isBackFaceShown();
      doReturn(false).when(light0).isDeformable();
      doReturn(false).when(light0).isDoorOrWindow();
      doReturn(false).when(light0).isMovable();
      doReturn(false).when(light0).isResizable();
      doReturn(false).when(light0).isTexturable();
      HomePieceOfFurniture homePieceOfFurniture0 = new HomePieceOfFurniture(light0);
      assertNotNull(homePieceOfFurniture0);
      assertEquals(0.0F, homePieceOfFurniture0.getNameYOffset(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture0.getWidth(), 0.01F);
      assertNull(homePieceOfFurniture0.getCurrency());
      assertTrue(homePieceOfFurniture0.isVisible());
      assertFalse(homePieceOfFurniture0.isNameVisible());
      assertEquals(0.0F, homePieceOfFurniture0.getHeight(), 0.01F);
      assertFalse(homePieceOfFurniture0.isDoorOrWindow());
      assertEquals(0.0F, homePieceOfFurniture0.getY(), 0.01F);
      assertNull(homePieceOfFurniture0.getShininess());
      assertFalse(homePieceOfFurniture0.isMovable());
      assertEquals(0.0F, homePieceOfFurniture0.getX(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture0.getNameAngle(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture0.getDepth(), 0.01F);
      assertFalse(homePieceOfFurniture0.isDeformable());
      assertFalse(homePieceOfFurniture0.isResizable());
      assertNull(homePieceOfFurniture0.getStaircaseCutOutShape());
      assertEquals(0.0F, homePieceOfFurniture0.getNameXOffset(), 0.01F);
      assertNull(homePieceOfFurniture0.getName());
      assertFalse(homePieceOfFurniture0.isTexturable());
      assertEquals(0.0F, homePieceOfFurniture0.getAngle(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture0.getElevation(), 0.01F);
      assertNull(homePieceOfFurniture0.getDescription());
      assertFalse(homePieceOfFurniture0.isBackFaceShown());
      assertNull(homePieceOfFurniture0.getCatalogId());
      assertNull(homePieceOfFurniture0.getColor());
      assertFalse(homePieceOfFurniture0.isModelMirrored());
      
      HomePieceOfFurniture homePieceOfFurniture1 = homePieceOfFurniture0.clone();
      assertNotNull(homePieceOfFurniture1);
      assertNotSame(homePieceOfFurniture0, homePieceOfFurniture1);
      assertNotSame(homePieceOfFurniture1, homePieceOfFurniture0);
      assertFalse(homePieceOfFurniture1.equals((Object)homePieceOfFurniture0));
      assertEquals(0.0F, homePieceOfFurniture0.getNameYOffset(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture0.getWidth(), 0.01F);
      assertNull(homePieceOfFurniture0.getCurrency());
      assertTrue(homePieceOfFurniture0.isVisible());
      assertFalse(homePieceOfFurniture0.isNameVisible());
      assertEquals(0.0F, homePieceOfFurniture0.getHeight(), 0.01F);
      assertFalse(homePieceOfFurniture0.isDoorOrWindow());
      assertEquals(0.0F, homePieceOfFurniture0.getY(), 0.01F);
      assertNull(homePieceOfFurniture0.getShininess());
      assertFalse(homePieceOfFurniture0.isMovable());
      assertEquals(0.0F, homePieceOfFurniture0.getX(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture0.getNameAngle(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture0.getDepth(), 0.01F);
      assertFalse(homePieceOfFurniture0.isDeformable());
      assertFalse(homePieceOfFurniture0.isResizable());
      assertNull(homePieceOfFurniture0.getStaircaseCutOutShape());
      assertEquals(0.0F, homePieceOfFurniture0.getNameXOffset(), 0.01F);
      assertNull(homePieceOfFurniture0.getName());
      assertFalse(homePieceOfFurniture0.isTexturable());
      assertEquals(0.0F, homePieceOfFurniture0.getAngle(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture0.getElevation(), 0.01F);
      assertNull(homePieceOfFurniture0.getDescription());
      assertFalse(homePieceOfFurniture0.isBackFaceShown());
      assertNull(homePieceOfFurniture0.getCatalogId());
      assertNull(homePieceOfFurniture0.getColor());
      assertFalse(homePieceOfFurniture0.isModelMirrored());
      assertNull(homePieceOfFurniture1.getCatalogId());
      assertNull(homePieceOfFurniture1.getStaircaseCutOutShape());
      assertNull(homePieceOfFurniture1.getShininess());
      assertEquals(0.0F, homePieceOfFurniture1.getNameAngle(), 0.01F);
      assertFalse(homePieceOfFurniture1.isResizable());
      assertEquals(0.0F, homePieceOfFurniture1.getDepth(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture1.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture1.getWidth(), 0.01F);
      assertFalse(homePieceOfFurniture1.isTexturable());
      assertNull(homePieceOfFurniture1.getDescription());
      assertEquals(0.0F, homePieceOfFurniture1.getElevation(), 0.01F);
      assertFalse(homePieceOfFurniture1.isNameVisible());
      assertEquals(0.0F, homePieceOfFurniture1.getAngle(), 0.01F);
      assertNull(homePieceOfFurniture1.getName());
      assertNull(homePieceOfFurniture1.getColor());
      assertFalse(homePieceOfFurniture1.isModelMirrored());
      assertFalse(homePieceOfFurniture1.isDoorOrWindow());
      assertFalse(homePieceOfFurniture1.isBackFaceShown());
      assertFalse(homePieceOfFurniture1.isDeformable());
      assertEquals(0.0F, homePieceOfFurniture1.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture1.getY(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture1.getNameYOffset(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture1.getX(), 0.01F);
      assertTrue(homePieceOfFurniture1.isVisible());
      assertFalse(homePieceOfFurniture1.isMovable());
      assertNull(homePieceOfFurniture1.getCurrency());
      assertEquals(0.0F, homePieceOfFurniture1.getHeight(), 0.01F);
      
      homePieceOfFurniture1.setVisible(true);
      assertNotSame(homePieceOfFurniture0, homePieceOfFurniture1);
      assertNotSame(homePieceOfFurniture1, homePieceOfFurniture0);
      assertFalse(homePieceOfFurniture0.equals((Object)homePieceOfFurniture1));
      assertFalse(homePieceOfFurniture1.equals((Object)homePieceOfFurniture0));
      assertEquals(0.0F, homePieceOfFurniture0.getNameYOffset(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture0.getWidth(), 0.01F);
      assertNull(homePieceOfFurniture0.getCurrency());
      assertTrue(homePieceOfFurniture0.isVisible());
      assertFalse(homePieceOfFurniture0.isNameVisible());
      assertEquals(0.0F, homePieceOfFurniture0.getHeight(), 0.01F);
      assertFalse(homePieceOfFurniture0.isDoorOrWindow());
      assertEquals(0.0F, homePieceOfFurniture0.getY(), 0.01F);
      assertNull(homePieceOfFurniture0.getShininess());
      assertFalse(homePieceOfFurniture0.isMovable());
      assertEquals(0.0F, homePieceOfFurniture0.getX(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture0.getNameAngle(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture0.getDepth(), 0.01F);
      assertFalse(homePieceOfFurniture0.isDeformable());
      assertFalse(homePieceOfFurniture0.isResizable());
      assertNull(homePieceOfFurniture0.getStaircaseCutOutShape());
      assertEquals(0.0F, homePieceOfFurniture0.getNameXOffset(), 0.01F);
      assertNull(homePieceOfFurniture0.getName());
      assertFalse(homePieceOfFurniture0.isTexturable());
      assertEquals(0.0F, homePieceOfFurniture0.getAngle(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture0.getElevation(), 0.01F);
      assertNull(homePieceOfFurniture0.getDescription());
      assertFalse(homePieceOfFurniture0.isBackFaceShown());
      assertNull(homePieceOfFurniture0.getCatalogId());
      assertNull(homePieceOfFurniture0.getColor());
      assertFalse(homePieceOfFurniture0.isModelMirrored());
      assertNull(homePieceOfFurniture1.getCatalogId());
      assertNull(homePieceOfFurniture1.getStaircaseCutOutShape());
      assertNull(homePieceOfFurniture1.getShininess());
      assertEquals(0.0F, homePieceOfFurniture1.getNameAngle(), 0.01F);
      assertFalse(homePieceOfFurniture1.isResizable());
      assertEquals(0.0F, homePieceOfFurniture1.getDepth(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture1.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture1.getWidth(), 0.01F);
      assertFalse(homePieceOfFurniture1.isTexturable());
      assertNull(homePieceOfFurniture1.getDescription());
      assertEquals(0.0F, homePieceOfFurniture1.getElevation(), 0.01F);
      assertFalse(homePieceOfFurniture1.isNameVisible());
      assertEquals(0.0F, homePieceOfFurniture1.getAngle(), 0.01F);
      assertNull(homePieceOfFurniture1.getName());
      assertNull(homePieceOfFurniture1.getColor());
      assertFalse(homePieceOfFurniture1.isModelMirrored());
      assertFalse(homePieceOfFurniture1.isDoorOrWindow());
      assertFalse(homePieceOfFurniture1.isBackFaceShown());
      assertFalse(homePieceOfFurniture1.isDeformable());
      assertEquals(0.0F, homePieceOfFurniture1.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture1.getY(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture1.getNameYOffset(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture1.getX(), 0.01F);
      assertTrue(homePieceOfFurniture1.isVisible());
      assertFalse(homePieceOfFurniture1.isMovable());
      assertNull(homePieceOfFurniture1.getCurrency());
      assertEquals(0.0F, homePieceOfFurniture1.getHeight(), 0.01F);
      
      float float0 = homePieceOfFurniture1.getWidth();
      assertNotSame(homePieceOfFurniture0, homePieceOfFurniture1);
      assertNotSame(homePieceOfFurniture1, homePieceOfFurniture0);
      assertFalse(homePieceOfFurniture0.equals((Object)homePieceOfFurniture1));
      assertFalse(homePieceOfFurniture1.equals((Object)homePieceOfFurniture0));
      assertEquals(0.0F, float0, 0.01F);
      assertEquals(0.0F, homePieceOfFurniture0.getNameYOffset(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture0.getWidth(), 0.01F);
      assertNull(homePieceOfFurniture0.getCurrency());
      assertTrue(homePieceOfFurniture0.isVisible());
      assertFalse(homePieceOfFurniture0.isNameVisible());
      assertEquals(0.0F, homePieceOfFurniture0.getHeight(), 0.01F);
      assertFalse(homePieceOfFurniture0.isDoorOrWindow());
      assertEquals(0.0F, homePieceOfFurniture0.getY(), 0.01F);
      assertNull(homePieceOfFurniture0.getShininess());
      assertFalse(homePieceOfFurniture0.isMovable());
      assertEquals(0.0F, homePieceOfFurniture0.getX(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture0.getNameAngle(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture0.getDepth(), 0.01F);
      assertFalse(homePieceOfFurniture0.isDeformable());
      assertFalse(homePieceOfFurniture0.isResizable());
      assertNull(homePieceOfFurniture0.getStaircaseCutOutShape());
      assertEquals(0.0F, homePieceOfFurniture0.getNameXOffset(), 0.01F);
      assertNull(homePieceOfFurniture0.getName());
      assertFalse(homePieceOfFurniture0.isTexturable());
      assertEquals(0.0F, homePieceOfFurniture0.getAngle(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture0.getElevation(), 0.01F);
      assertNull(homePieceOfFurniture0.getDescription());
      assertFalse(homePieceOfFurniture0.isBackFaceShown());
      assertNull(homePieceOfFurniture0.getCatalogId());
      assertNull(homePieceOfFurniture0.getColor());
      assertFalse(homePieceOfFurniture0.isModelMirrored());
      assertNull(homePieceOfFurniture1.getCatalogId());
      assertNull(homePieceOfFurniture1.getStaircaseCutOutShape());
      assertNull(homePieceOfFurniture1.getShininess());
      assertEquals(0.0F, homePieceOfFurniture1.getNameAngle(), 0.01F);
      assertFalse(homePieceOfFurniture1.isResizable());
      assertEquals(0.0F, homePieceOfFurniture1.getDepth(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture1.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture1.getWidth(), 0.01F);
      assertFalse(homePieceOfFurniture1.isTexturable());
      assertNull(homePieceOfFurniture1.getDescription());
      assertEquals(0.0F, homePieceOfFurniture1.getElevation(), 0.01F);
      assertFalse(homePieceOfFurniture1.isNameVisible());
      assertEquals(0.0F, homePieceOfFurniture1.getAngle(), 0.01F);
      assertNull(homePieceOfFurniture1.getName());
      assertNull(homePieceOfFurniture1.getColor());
      assertFalse(homePieceOfFurniture1.isModelMirrored());
      assertFalse(homePieceOfFurniture1.isDoorOrWindow());
      assertFalse(homePieceOfFurniture1.isBackFaceShown());
      assertFalse(homePieceOfFurniture1.isDeformable());
      assertEquals(0.0F, homePieceOfFurniture1.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture1.getY(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture1.getNameYOffset(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture1.getX(), 0.01F);
      assertTrue(homePieceOfFurniture1.isVisible());
      assertFalse(homePieceOfFurniture1.isMovable());
      assertNull(homePieceOfFurniture1.getCurrency());
      assertEquals(0.0F, homePieceOfFurniture1.getHeight(), 0.01F);
      
      homePieceOfFurniture1.setNameVisible(true);
      assertNotSame(homePieceOfFurniture0, homePieceOfFurniture1);
      assertNotSame(homePieceOfFurniture1, homePieceOfFurniture0);
      assertFalse(homePieceOfFurniture0.equals((Object)homePieceOfFurniture1));
      assertFalse(homePieceOfFurniture1.equals((Object)homePieceOfFurniture0));
      assertEquals(0.0F, homePieceOfFurniture0.getNameYOffset(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture0.getWidth(), 0.01F);
      assertNull(homePieceOfFurniture0.getCurrency());
      assertTrue(homePieceOfFurniture0.isVisible());
      assertFalse(homePieceOfFurniture0.isNameVisible());
      assertEquals(0.0F, homePieceOfFurniture0.getHeight(), 0.01F);
      assertFalse(homePieceOfFurniture0.isDoorOrWindow());
      assertEquals(0.0F, homePieceOfFurniture0.getY(), 0.01F);
      assertNull(homePieceOfFurniture0.getShininess());
      assertFalse(homePieceOfFurniture0.isMovable());
      assertEquals(0.0F, homePieceOfFurniture0.getX(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture0.getNameAngle(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture0.getDepth(), 0.01F);
      assertFalse(homePieceOfFurniture0.isDeformable());
      assertFalse(homePieceOfFurniture0.isResizable());
      assertNull(homePieceOfFurniture0.getStaircaseCutOutShape());
      assertEquals(0.0F, homePieceOfFurniture0.getNameXOffset(), 0.01F);
      assertNull(homePieceOfFurniture0.getName());
      assertFalse(homePieceOfFurniture0.isTexturable());
      assertEquals(0.0F, homePieceOfFurniture0.getAngle(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture0.getElevation(), 0.01F);
      assertNull(homePieceOfFurniture0.getDescription());
      assertFalse(homePieceOfFurniture0.isBackFaceShown());
      assertNull(homePieceOfFurniture0.getCatalogId());
      assertNull(homePieceOfFurniture0.getColor());
      assertFalse(homePieceOfFurniture0.isModelMirrored());
      assertNull(homePieceOfFurniture1.getCatalogId());
      assertNull(homePieceOfFurniture1.getStaircaseCutOutShape());
      assertNull(homePieceOfFurniture1.getShininess());
      assertEquals(0.0F, homePieceOfFurniture1.getNameAngle(), 0.01F);
      assertFalse(homePieceOfFurniture1.isResizable());
      assertEquals(0.0F, homePieceOfFurniture1.getDepth(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture1.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture1.getWidth(), 0.01F);
      assertFalse(homePieceOfFurniture1.isTexturable());
      assertNull(homePieceOfFurniture1.getDescription());
      assertEquals(0.0F, homePieceOfFurniture1.getElevation(), 0.01F);
      assertTrue(homePieceOfFurniture1.isNameVisible());
      assertEquals(0.0F, homePieceOfFurniture1.getAngle(), 0.01F);
      assertNull(homePieceOfFurniture1.getName());
      assertNull(homePieceOfFurniture1.getColor());
      assertFalse(homePieceOfFurniture1.isModelMirrored());
      assertFalse(homePieceOfFurniture1.isDoorOrWindow());
      assertFalse(homePieceOfFurniture1.isBackFaceShown());
      assertFalse(homePieceOfFurniture1.isDeformable());
      assertEquals(0.0F, homePieceOfFurniture1.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture1.getY(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture1.getNameYOffset(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture1.getX(), 0.01F);
      assertTrue(homePieceOfFurniture1.isVisible());
      assertFalse(homePieceOfFurniture1.isMovable());
      assertNull(homePieceOfFurniture1.getCurrency());
      assertEquals(0.0F, homePieceOfFurniture1.getHeight(), 0.01F);
      
      float float1 = homePieceOfFurniture1.getGroundElevation();
      assertNotSame(homePieceOfFurniture0, homePieceOfFurniture1);
      assertNotSame(homePieceOfFurniture1, homePieceOfFurniture0);
      assertFalse(homePieceOfFurniture0.equals((Object)homePieceOfFurniture1));
      assertFalse(homePieceOfFurniture1.equals((Object)homePieceOfFurniture0));
      assertEquals(float1, float0, 0.01F);
      assertEquals(0.0F, float1, 0.01F);
      assertEquals(0.0F, homePieceOfFurniture0.getNameYOffset(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture0.getWidth(), 0.01F);
      assertNull(homePieceOfFurniture0.getCurrency());
      assertTrue(homePieceOfFurniture0.isVisible());
      assertFalse(homePieceOfFurniture0.isNameVisible());
      assertEquals(0.0F, homePieceOfFurniture0.getHeight(), 0.01F);
      assertFalse(homePieceOfFurniture0.isDoorOrWindow());
      assertEquals(0.0F, homePieceOfFurniture0.getY(), 0.01F);
      assertNull(homePieceOfFurniture0.getShininess());
      assertFalse(homePieceOfFurniture0.isMovable());
      assertEquals(0.0F, homePieceOfFurniture0.getX(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture0.getNameAngle(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture0.getDepth(), 0.01F);
      assertFalse(homePieceOfFurniture0.isDeformable());
      assertFalse(homePieceOfFurniture0.isResizable());
      assertNull(homePieceOfFurniture0.getStaircaseCutOutShape());
      assertEquals(0.0F, homePieceOfFurniture0.getNameXOffset(), 0.01F);
      assertNull(homePieceOfFurniture0.getName());
      assertFalse(homePieceOfFurniture0.isTexturable());
      assertEquals(0.0F, homePieceOfFurniture0.getAngle(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture0.getElevation(), 0.01F);
      assertNull(homePieceOfFurniture0.getDescription());
      assertFalse(homePieceOfFurniture0.isBackFaceShown());
      assertNull(homePieceOfFurniture0.getCatalogId());
      assertNull(homePieceOfFurniture0.getColor());
      assertFalse(homePieceOfFurniture0.isModelMirrored());
      assertNull(homePieceOfFurniture1.getCatalogId());
      assertNull(homePieceOfFurniture1.getStaircaseCutOutShape());
      assertNull(homePieceOfFurniture1.getShininess());
      assertEquals(0.0F, homePieceOfFurniture1.getNameAngle(), 0.01F);
      assertFalse(homePieceOfFurniture1.isResizable());
      assertEquals(0.0F, homePieceOfFurniture1.getDepth(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture1.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture1.getWidth(), 0.01F);
      assertFalse(homePieceOfFurniture1.isTexturable());
      assertNull(homePieceOfFurniture1.getDescription());
      assertEquals(0.0F, homePieceOfFurniture1.getElevation(), 0.01F);
      assertTrue(homePieceOfFurniture1.isNameVisible());
      assertEquals(0.0F, homePieceOfFurniture1.getAngle(), 0.01F);
      assertNull(homePieceOfFurniture1.getName());
      assertNull(homePieceOfFurniture1.getColor());
      assertFalse(homePieceOfFurniture1.isModelMirrored());
      assertFalse(homePieceOfFurniture1.isDoorOrWindow());
      assertFalse(homePieceOfFurniture1.isBackFaceShown());
      assertFalse(homePieceOfFurniture1.isDeformable());
      assertEquals(0.0F, homePieceOfFurniture1.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture1.getY(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture1.getNameYOffset(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture1.getX(), 0.01F);
      assertTrue(homePieceOfFurniture1.isVisible());
      assertFalse(homePieceOfFurniture1.isMovable());
      assertNull(homePieceOfFurniture1.getCurrency());
      assertEquals(0.0F, homePieceOfFurniture1.getHeight(), 0.01F);
      
      float float2 = homePieceOfFurniture0.getY();
      assertNotSame(homePieceOfFurniture0, homePieceOfFurniture1);
      assertFalse(homePieceOfFurniture0.equals((Object)homePieceOfFurniture1));
      assertEquals(float2, float0, 0.01F);
      assertEquals(float2, float1, 0.01F);
      assertEquals(0.0F, float2, 0.01F);
      assertEquals(0.0F, homePieceOfFurniture0.getNameYOffset(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture0.getWidth(), 0.01F);
      assertNull(homePieceOfFurniture0.getCurrency());
      assertTrue(homePieceOfFurniture0.isVisible());
      assertFalse(homePieceOfFurniture0.isNameVisible());
      assertEquals(0.0F, homePieceOfFurniture0.getHeight(), 0.01F);
      assertFalse(homePieceOfFurniture0.isDoorOrWindow());
      assertEquals(0.0F, homePieceOfFurniture0.getY(), 0.01F);
      assertNull(homePieceOfFurniture0.getShininess());
      assertFalse(homePieceOfFurniture0.isMovable());
      assertEquals(0.0F, homePieceOfFurniture0.getX(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture0.getNameAngle(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture0.getDepth(), 0.01F);
      assertFalse(homePieceOfFurniture0.isDeformable());
      assertFalse(homePieceOfFurniture0.isResizable());
      assertNull(homePieceOfFurniture0.getStaircaseCutOutShape());
      assertEquals(0.0F, homePieceOfFurniture0.getNameXOffset(), 0.01F);
      assertNull(homePieceOfFurniture0.getName());
      assertFalse(homePieceOfFurniture0.isTexturable());
      assertEquals(0.0F, homePieceOfFurniture0.getAngle(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture0.getElevation(), 0.01F);
      assertNull(homePieceOfFurniture0.getDescription());
      assertFalse(homePieceOfFurniture0.isBackFaceShown());
      assertNull(homePieceOfFurniture0.getCatalogId());
      assertNull(homePieceOfFurniture0.getColor());
      assertFalse(homePieceOfFurniture0.isModelMirrored());
      
      float float3 = homePieceOfFurniture1.getNameXOffset();
      assertNotSame(homePieceOfFurniture0, homePieceOfFurniture1);
      assertNotSame(homePieceOfFurniture1, homePieceOfFurniture0);
      assertFalse(homePieceOfFurniture0.equals((Object)homePieceOfFurniture1));
      assertFalse(homePieceOfFurniture1.equals((Object)homePieceOfFurniture0));
      assertEquals(float3, float1, 0.01F);
      assertEquals(float3, float2, 0.01F);
      assertEquals(float3, float0, 0.01F);
      assertEquals(0.0F, float3, 0.01F);
      assertEquals(0.0F, homePieceOfFurniture0.getNameYOffset(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture0.getWidth(), 0.01F);
      assertNull(homePieceOfFurniture0.getCurrency());
      assertTrue(homePieceOfFurniture0.isVisible());
      assertFalse(homePieceOfFurniture0.isNameVisible());
      assertEquals(0.0F, homePieceOfFurniture0.getHeight(), 0.01F);
      assertFalse(homePieceOfFurniture0.isDoorOrWindow());
      assertEquals(0.0F, homePieceOfFurniture0.getY(), 0.01F);
      assertNull(homePieceOfFurniture0.getShininess());
      assertFalse(homePieceOfFurniture0.isMovable());
      assertEquals(0.0F, homePieceOfFurniture0.getX(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture0.getNameAngle(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture0.getDepth(), 0.01F);
      assertFalse(homePieceOfFurniture0.isDeformable());
      assertFalse(homePieceOfFurniture0.isResizable());
      assertNull(homePieceOfFurniture0.getStaircaseCutOutShape());
      assertEquals(0.0F, homePieceOfFurniture0.getNameXOffset(), 0.01F);
      assertNull(homePieceOfFurniture0.getName());
      assertFalse(homePieceOfFurniture0.isTexturable());
      assertEquals(0.0F, homePieceOfFurniture0.getAngle(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture0.getElevation(), 0.01F);
      assertNull(homePieceOfFurniture0.getDescription());
      assertFalse(homePieceOfFurniture0.isBackFaceShown());
      assertNull(homePieceOfFurniture0.getCatalogId());
      assertNull(homePieceOfFurniture0.getColor());
      assertFalse(homePieceOfFurniture0.isModelMirrored());
      assertNull(homePieceOfFurniture1.getCatalogId());
      assertNull(homePieceOfFurniture1.getStaircaseCutOutShape());
      assertNull(homePieceOfFurniture1.getShininess());
      assertEquals(0.0F, homePieceOfFurniture1.getNameAngle(), 0.01F);
      assertFalse(homePieceOfFurniture1.isResizable());
      assertEquals(0.0F, homePieceOfFurniture1.getDepth(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture1.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture1.getWidth(), 0.01F);
      assertFalse(homePieceOfFurniture1.isTexturable());
      assertNull(homePieceOfFurniture1.getDescription());
      assertEquals(0.0F, homePieceOfFurniture1.getElevation(), 0.01F);
      assertTrue(homePieceOfFurniture1.isNameVisible());
      assertEquals(0.0F, homePieceOfFurniture1.getAngle(), 0.01F);
      assertNull(homePieceOfFurniture1.getName());
      assertNull(homePieceOfFurniture1.getColor());
      assertFalse(homePieceOfFurniture1.isModelMirrored());
      assertFalse(homePieceOfFurniture1.isDoorOrWindow());
      assertFalse(homePieceOfFurniture1.isBackFaceShown());
      assertFalse(homePieceOfFurniture1.isDeformable());
      assertEquals(0.0F, homePieceOfFurniture1.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture1.getY(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture1.getNameYOffset(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture1.getX(), 0.01F);
      assertTrue(homePieceOfFurniture1.isVisible());
      assertFalse(homePieceOfFurniture1.isMovable());
      assertNull(homePieceOfFurniture1.getCurrency());
      assertEquals(0.0F, homePieceOfFurniture1.getHeight(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      LightSource[] lightSourceArray0 = new LightSource[2];
      URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      URL uRL0 = MockURL.URL("s<7]@ykxs+ 0`a ", (String) null, (-1667), "", uRLStreamHandler0);
      assertNotNull(uRL0);
      assertNull(uRL0.getUserInfo());
      assertNull(uRL0.getAuthority());
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.toExternalForm());
      assertEquals("s<7]@ykxs+ 0`a ", uRL0.getProtocol());
      assertNull(uRL0.toString());
      assertNull(uRL0.getHost());
      assertEquals("", uRL0.getPath());
      assertEquals(0, uRL0.getDefaultPort());
      assertNull(uRL0.getRef());
      assertEquals("", uRL0.getFile());
      assertNull(uRL0.getQuery());
      
      TemporaryURLContent temporaryURLContent0 = new TemporaryURLContent(uRL0);
      assertNotNull(temporaryURLContent0);
      assertNull(uRL0.getUserInfo());
      assertNull(uRL0.getAuthority());
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.toExternalForm());
      assertEquals("s<7]@ykxs+ 0`a ", uRL0.getProtocol());
      assertNull(uRL0.toString());
      assertNull(uRL0.getHost());
      assertEquals("", uRL0.getPath());
      assertEquals(0, uRL0.getDefaultPort());
      assertNull(uRL0.getRef());
      assertEquals("", uRL0.getFile());
      assertNull(uRL0.getQuery());
      assertFalse(temporaryURLContent0.isJAREntry());
      
      BigDecimal bigDecimal0 = BigDecimal.TEN;
      assertNotNull(bigDecimal0);
      assertEquals((byte)10, bigDecimal0.byteValue());
      assertEquals((short)10, bigDecimal0.shortValue());
      
      CatalogLight catalogLight0 = new CatalogLight("\"<xp|JAv^\"<^Qh{/~", "s<7]@ykxs+ 0`a ", "s<7]@ykxs+ 0`a ", temporaryURLContent0, temporaryURLContent0, temporaryURLContent0, (-611.6462F), 1.7441415F, 0.5F, (-897.795F), true, lightSourceArray0, "", (float[][]) null, "P'HZa~G", true, true, true, bigDecimal0, bigDecimal0, "");
      assertEquals(2, lightSourceArray0.length);
      assertNotNull(catalogLight0);
      assertNull(uRL0.getUserInfo());
      assertNull(uRL0.getAuthority());
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.toExternalForm());
      assertEquals("s<7]@ykxs+ 0`a ", uRL0.getProtocol());
      assertNull(uRL0.toString());
      assertNull(uRL0.getHost());
      assertEquals("", uRL0.getPath());
      assertEquals(0, uRL0.getDefaultPort());
      assertNull(uRL0.getRef());
      assertEquals("", uRL0.getFile());
      assertNull(uRL0.getQuery());
      assertFalse(temporaryURLContent0.isJAREntry());
      assertEquals((byte)10, bigDecimal0.byteValue());
      assertEquals((short)10, bigDecimal0.shortValue());
      assertTrue(catalogLight0.isTexturable());
      assertTrue(catalogLight0.isProportional());
      assertEquals("", catalogLight0.getCurrency());
      assertEquals("\"<xp|JAv^\"<^Qh{/~", catalogLight0.getId());
      assertEquals(1.7441415F, catalogLight0.getDepth(), 0.01F);
      assertEquals(0.5F, catalogLight0.getHeight(), 0.01F);
      assertTrue(catalogLight0.isResizable());
      assertFalse(catalogLight0.isModifiable());
      assertEquals("s<7]@ykxs+ 0`a ", catalogLight0.getName());
      assertNull(catalogLight0.getCreationDate());
      assertEquals("s<7]@ykxs+ 0`a ", catalogLight0.getDescription());
      assertEquals("", catalogLight0.getStaircaseCutOutShape());
      assertTrue(catalogLight0.isMovable());
      assertNull(catalogLight0.getInformation());
      assertTrue(catalogLight0.isDeformable());
      assertNull(catalogLight0.getColor());
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertEquals((-897.795F), catalogLight0.getElevation(), 0.01F);
      assertFalse(catalogLight0.isBackFaceShown());
      assertNull(catalogLight0.getGrade());
      assertEquals("P'HZa~G", catalogLight0.getCreator());
      assertFalse(catalogLight0.isDoorOrWindow());
      assertEquals((-611.6462F), catalogLight0.getWidth(), 0.01F);
      
      HomeLight homeLight0 = new HomeLight(catalogLight0);
      assertEquals(2, lightSourceArray0.length);
      assertNotNull(homeLight0);
      assertNull(uRL0.getUserInfo());
      assertNull(uRL0.getAuthority());
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.toExternalForm());
      assertEquals("s<7]@ykxs+ 0`a ", uRL0.getProtocol());
      assertNull(uRL0.toString());
      assertNull(uRL0.getHost());
      assertEquals("", uRL0.getPath());
      assertEquals(0, uRL0.getDefaultPort());
      assertNull(uRL0.getRef());
      assertEquals("", uRL0.getFile());
      assertNull(uRL0.getQuery());
      assertFalse(temporaryURLContent0.isJAREntry());
      assertEquals((byte)10, bigDecimal0.byteValue());
      assertEquals((short)10, bigDecimal0.shortValue());
      assertTrue(catalogLight0.isTexturable());
      assertTrue(catalogLight0.isProportional());
      assertEquals("", catalogLight0.getCurrency());
      assertEquals("\"<xp|JAv^\"<^Qh{/~", catalogLight0.getId());
      assertEquals(1.7441415F, catalogLight0.getDepth(), 0.01F);
      assertEquals(0.5F, catalogLight0.getHeight(), 0.01F);
      assertTrue(catalogLight0.isResizable());
      assertFalse(catalogLight0.isModifiable());
      assertEquals("s<7]@ykxs+ 0`a ", catalogLight0.getName());
      assertNull(catalogLight0.getCreationDate());
      assertEquals("s<7]@ykxs+ 0`a ", catalogLight0.getDescription());
      assertEquals("", catalogLight0.getStaircaseCutOutShape());
      assertTrue(catalogLight0.isMovable());
      assertNull(catalogLight0.getInformation());
      assertTrue(catalogLight0.isDeformable());
      assertNull(catalogLight0.getColor());
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertEquals((-897.795F), catalogLight0.getElevation(), 0.01F);
      assertFalse(catalogLight0.isBackFaceShown());
      assertNull(catalogLight0.getGrade());
      assertEquals("P'HZa~G", catalogLight0.getCreator());
      assertFalse(catalogLight0.isDoorOrWindow());
      assertEquals((-611.6462F), catalogLight0.getWidth(), 0.01F);
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertEquals("", homeLight0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals("\"<xp|JAv^\"<^Qh{/~", homeLight0.getCatalogId());
      assertTrue(homeLight0.isMovable());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertEquals("s<7]@ykxs+ 0`a ", homeLight0.getName());
      assertTrue(homeLight0.isDeformable());
      assertNull(homeLight0.getShininess());
      assertTrue(homeLight0.isVisible());
      assertEquals("s<7]@ykxs+ 0`a ", homeLight0.getDescription());
      assertTrue(homeLight0.isResizable());
      assertFalse(homeLight0.isNameVisible());
      assertEquals(0.8720707F, homeLight0.getY(), 0.01F);
      assertEquals((-897.795F), homeLight0.getElevation(), 0.01F);
      assertFalse(homeLight0.isBackFaceShown());
      assertEquals((-611.6462F), homeLight0.getWidth(), 0.01F);
      assertEquals((-305.8231F), homeLight0.getX(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      assertEquals("", homeLight0.getCurrency());
      assertTrue(homeLight0.isTexturable());
      assertEquals((-897.795F), homeLight0.getGroundElevation(), 0.01F);
      assertEquals(0.5F, homeLight0.getHeight(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertFalse(homeLight0.isModelMirrored());
      assertNull(homeLight0.getColor());
      assertEquals(1.7441415F, homeLight0.getDepth(), 0.01F);
      
      HomeLight homeLight1 = homeLight0.clone();
      assertEquals(2, lightSourceArray0.length);
      assertNotNull(homeLight1);
      assertNotSame(homeLight0, homeLight1);
      assertNotSame(homeLight1, homeLight0);
      assertFalse(homeLight1.equals((Object)homeLight0));
      assertNull(uRL0.getUserInfo());
      assertNull(uRL0.getAuthority());
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.toExternalForm());
      assertEquals("s<7]@ykxs+ 0`a ", uRL0.getProtocol());
      assertNull(uRL0.toString());
      assertNull(uRL0.getHost());
      assertEquals("", uRL0.getPath());
      assertEquals(0, uRL0.getDefaultPort());
      assertNull(uRL0.getRef());
      assertEquals("", uRL0.getFile());
      assertNull(uRL0.getQuery());
      assertFalse(temporaryURLContent0.isJAREntry());
      assertEquals((byte)10, bigDecimal0.byteValue());
      assertEquals((short)10, bigDecimal0.shortValue());
      assertTrue(catalogLight0.isTexturable());
      assertTrue(catalogLight0.isProportional());
      assertEquals("", catalogLight0.getCurrency());
      assertEquals("\"<xp|JAv^\"<^Qh{/~", catalogLight0.getId());
      assertEquals(1.7441415F, catalogLight0.getDepth(), 0.01F);
      assertEquals(0.5F, catalogLight0.getHeight(), 0.01F);
      assertTrue(catalogLight0.isResizable());
      assertFalse(catalogLight0.isModifiable());
      assertEquals("s<7]@ykxs+ 0`a ", catalogLight0.getName());
      assertNull(catalogLight0.getCreationDate());
      assertEquals("s<7]@ykxs+ 0`a ", catalogLight0.getDescription());
      assertEquals("", catalogLight0.getStaircaseCutOutShape());
      assertTrue(catalogLight0.isMovable());
      assertNull(catalogLight0.getInformation());
      assertTrue(catalogLight0.isDeformable());
      assertNull(catalogLight0.getColor());
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertEquals((-897.795F), catalogLight0.getElevation(), 0.01F);
      assertFalse(catalogLight0.isBackFaceShown());
      assertNull(catalogLight0.getGrade());
      assertEquals("P'HZa~G", catalogLight0.getCreator());
      assertFalse(catalogLight0.isDoorOrWindow());
      assertEquals((-611.6462F), catalogLight0.getWidth(), 0.01F);
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertEquals("", homeLight0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals("\"<xp|JAv^\"<^Qh{/~", homeLight0.getCatalogId());
      assertTrue(homeLight0.isMovable());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertEquals("s<7]@ykxs+ 0`a ", homeLight0.getName());
      assertTrue(homeLight0.isDeformable());
      assertNull(homeLight0.getShininess());
      assertTrue(homeLight0.isVisible());
      assertEquals("s<7]@ykxs+ 0`a ", homeLight0.getDescription());
      assertTrue(homeLight0.isResizable());
      assertFalse(homeLight0.isNameVisible());
      assertEquals(0.8720707F, homeLight0.getY(), 0.01F);
      assertEquals((-897.795F), homeLight0.getElevation(), 0.01F);
      assertFalse(homeLight0.isBackFaceShown());
      assertEquals((-611.6462F), homeLight0.getWidth(), 0.01F);
      assertEquals((-305.8231F), homeLight0.getX(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      assertEquals("", homeLight0.getCurrency());
      assertTrue(homeLight0.isTexturable());
      assertEquals((-897.795F), homeLight0.getGroundElevation(), 0.01F);
      assertEquals(0.5F, homeLight0.getHeight(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertFalse(homeLight0.isModelMirrored());
      assertNull(homeLight0.getColor());
      assertEquals(1.7441415F, homeLight0.getDepth(), 0.01F);
      assertEquals(0.0F, homeLight1.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeLight1.getNameAngle(), 0.01F);
      assertEquals(0.5F, homeLight1.getPower(), 0.01F);
      assertEquals("", homeLight1.getStaircaseCutOutShape());
      assertTrue(homeLight1.isMovable());
      assertEquals("\"<xp|JAv^\"<^Qh{/~", homeLight1.getCatalogId());
      assertEquals("s<7]@ykxs+ 0`a ", homeLight1.getName());
      assertEquals(0.0F, homeLight1.getAngle(), 0.01F);
      assertTrue(homeLight1.isTexturable());
      assertFalse(homeLight1.isDoorOrWindow());
      assertNull(homeLight1.getShininess());
      assertEquals((-305.8231F), homeLight1.getX(), 0.01F);
      assertTrue(homeLight1.isVisible());
      assertTrue(homeLight1.isDeformable());
      assertTrue(homeLight1.isResizable());
      assertEquals("s<7]@ykxs+ 0`a ", homeLight1.getDescription());
      assertEquals((-897.795F), homeLight1.getGroundElevation(), 0.01F);
      assertEquals("", homeLight1.getCurrency());
      assertEquals((-897.795F), homeLight1.getElevation(), 0.01F);
      assertEquals((-611.6462F), homeLight1.getWidth(), 0.01F);
      assertFalse(homeLight1.isBackFaceShown());
      assertFalse(homeLight1.isNameVisible());
      assertEquals(1.7441415F, homeLight1.getDepth(), 0.01F);
      assertEquals(0.5F, homeLight1.getHeight(), 0.01F);
      assertFalse(homeLight1.isModelMirrored());
      assertEquals(0.0F, homeLight1.getNameYOffset(), 0.01F);
      assertEquals(0.8720707F, homeLight1.getY(), 0.01F);
      assertNull(homeLight1.getColor());
      
      HomeLight homeLight2 = homeLight0.clone();
      assertEquals(2, lightSourceArray0.length);
      assertNotNull(homeLight2);
      assertNotSame(homeLight0, homeLight2);
      assertNotSame(homeLight0, homeLight1);
      assertNotSame(homeLight2, homeLight0);
      assertNotSame(homeLight2, homeLight1);
      assertFalse(homeLight0.equals((Object)homeLight1));
      assertFalse(homeLight2.equals((Object)homeLight0));
      assertFalse(homeLight2.equals((Object)homeLight1));
      assertNull(uRL0.getUserInfo());
      assertNull(uRL0.getAuthority());
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.toExternalForm());
      assertEquals("s<7]@ykxs+ 0`a ", uRL0.getProtocol());
      assertNull(uRL0.toString());
      assertNull(uRL0.getHost());
      assertEquals("", uRL0.getPath());
      assertEquals(0, uRL0.getDefaultPort());
      assertNull(uRL0.getRef());
      assertEquals("", uRL0.getFile());
      assertNull(uRL0.getQuery());
      assertFalse(temporaryURLContent0.isJAREntry());
      assertEquals((byte)10, bigDecimal0.byteValue());
      assertEquals((short)10, bigDecimal0.shortValue());
      assertTrue(catalogLight0.isTexturable());
      assertTrue(catalogLight0.isProportional());
      assertEquals("", catalogLight0.getCurrency());
      assertEquals("\"<xp|JAv^\"<^Qh{/~", catalogLight0.getId());
      assertEquals(1.7441415F, catalogLight0.getDepth(), 0.01F);
      assertEquals(0.5F, catalogLight0.getHeight(), 0.01F);
      assertTrue(catalogLight0.isResizable());
      assertFalse(catalogLight0.isModifiable());
      assertEquals("s<7]@ykxs+ 0`a ", catalogLight0.getName());
      assertNull(catalogLight0.getCreationDate());
      assertEquals("s<7]@ykxs+ 0`a ", catalogLight0.getDescription());
      assertEquals("", catalogLight0.getStaircaseCutOutShape());
      assertTrue(catalogLight0.isMovable());
      assertNull(catalogLight0.getInformation());
      assertTrue(catalogLight0.isDeformable());
      assertNull(catalogLight0.getColor());
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertEquals((-897.795F), catalogLight0.getElevation(), 0.01F);
      assertFalse(catalogLight0.isBackFaceShown());
      assertNull(catalogLight0.getGrade());
      assertEquals("P'HZa~G", catalogLight0.getCreator());
      assertFalse(catalogLight0.isDoorOrWindow());
      assertEquals((-611.6462F), catalogLight0.getWidth(), 0.01F);
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertEquals("", homeLight0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals("\"<xp|JAv^\"<^Qh{/~", homeLight0.getCatalogId());
      assertTrue(homeLight0.isMovable());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertEquals("s<7]@ykxs+ 0`a ", homeLight0.getName());
      assertTrue(homeLight0.isDeformable());
      assertNull(homeLight0.getShininess());
      assertTrue(homeLight0.isVisible());
      assertEquals("s<7]@ykxs+ 0`a ", homeLight0.getDescription());
      assertTrue(homeLight0.isResizable());
      assertFalse(homeLight0.isNameVisible());
      assertEquals(0.8720707F, homeLight0.getY(), 0.01F);
      assertEquals((-897.795F), homeLight0.getElevation(), 0.01F);
      assertFalse(homeLight0.isBackFaceShown());
      assertEquals((-611.6462F), homeLight0.getWidth(), 0.01F);
      assertEquals((-305.8231F), homeLight0.getX(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      assertEquals("", homeLight0.getCurrency());
      assertTrue(homeLight0.isTexturable());
      assertEquals((-897.795F), homeLight0.getGroundElevation(), 0.01F);
      assertEquals(0.5F, homeLight0.getHeight(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertFalse(homeLight0.isModelMirrored());
      assertNull(homeLight0.getColor());
      assertEquals(1.7441415F, homeLight0.getDepth(), 0.01F);
      assertEquals(0.0F, homeLight2.getNameXOffset(), 0.01F);
      assertFalse(homeLight2.isDoorOrWindow());
      assertFalse(homeLight2.isBackFaceShown());
      assertEquals(1.7441415F, homeLight2.getDepth(), 0.01F);
      assertTrue(homeLight2.isTexturable());
      assertEquals((-305.8231F), homeLight2.getX(), 0.01F);
      assertEquals("s<7]@ykxs+ 0`a ", homeLight2.getName());
      assertFalse(homeLight2.isModelMirrored());
      assertEquals(0.0F, homeLight2.getAngle(), 0.01F);
      assertFalse(homeLight2.isNameVisible());
      assertEquals((-611.6462F), homeLight2.getWidth(), 0.01F);
      assertEquals(0.8720707F, homeLight2.getY(), 0.01F);
      assertTrue(homeLight2.isVisible());
      assertTrue(homeLight2.isDeformable());
      assertEquals("", homeLight2.getCurrency());
      assertNull(homeLight2.getColor());
      assertEquals(0.0F, homeLight2.getNameYOffset(), 0.01F);
      assertNull(homeLight2.getShininess());
      assertTrue(homeLight2.isMovable());
      assertEquals("s<7]@ykxs+ 0`a ", homeLight2.getDescription());
      assertEquals("\"<xp|JAv^\"<^Qh{/~", homeLight2.getCatalogId());
      assertEquals((-897.795F), homeLight2.getElevation(), 0.01F);
      assertTrue(homeLight2.isResizable());
      assertEquals(0.0F, homeLight2.getNameAngle(), 0.01F);
      assertEquals("", homeLight2.getStaircaseCutOutShape());
      assertEquals(0.5F, homeLight2.getPower(), 0.01F);
      assertEquals(0.5F, homeLight2.getHeight(), 0.01F);
      assertEquals((-897.795F), homeLight2.getGroundElevation(), 0.01F);
      
      homeLight2.setWidth((-1667));
      assertEquals(2, lightSourceArray0.length);
      assertNotSame(homeLight0, homeLight2);
      assertNotSame(homeLight0, homeLight1);
      assertNotSame(homeLight2, homeLight0);
      assertNotSame(homeLight2, homeLight1);
      assertFalse(homeLight0.equals((Object)homeLight2));
      assertFalse(homeLight0.equals((Object)homeLight1));
      assertFalse(homeLight2.equals((Object)homeLight0));
      assertFalse(homeLight2.equals((Object)homeLight1));
      assertNull(uRL0.getUserInfo());
      assertNull(uRL0.getAuthority());
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.toExternalForm());
      assertEquals("s<7]@ykxs+ 0`a ", uRL0.getProtocol());
      assertNull(uRL0.toString());
      assertNull(uRL0.getHost());
      assertEquals("", uRL0.getPath());
      assertEquals(0, uRL0.getDefaultPort());
      assertNull(uRL0.getRef());
      assertEquals("", uRL0.getFile());
      assertNull(uRL0.getQuery());
      assertFalse(temporaryURLContent0.isJAREntry());
      assertEquals((byte)10, bigDecimal0.byteValue());
      assertEquals((short)10, bigDecimal0.shortValue());
      assertTrue(catalogLight0.isTexturable());
      assertTrue(catalogLight0.isProportional());
      assertEquals("", catalogLight0.getCurrency());
      assertEquals("\"<xp|JAv^\"<^Qh{/~", catalogLight0.getId());
      assertEquals(1.7441415F, catalogLight0.getDepth(), 0.01F);
      assertEquals(0.5F, catalogLight0.getHeight(), 0.01F);
      assertTrue(catalogLight0.isResizable());
      assertFalse(catalogLight0.isModifiable());
      assertEquals("s<7]@ykxs+ 0`a ", catalogLight0.getName());
      assertNull(catalogLight0.getCreationDate());
      assertEquals("s<7]@ykxs+ 0`a ", catalogLight0.getDescription());
      assertEquals("", catalogLight0.getStaircaseCutOutShape());
      assertTrue(catalogLight0.isMovable());
      assertNull(catalogLight0.getInformation());
      assertTrue(catalogLight0.isDeformable());
      assertNull(catalogLight0.getColor());
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertEquals((-897.795F), catalogLight0.getElevation(), 0.01F);
      assertFalse(catalogLight0.isBackFaceShown());
      assertNull(catalogLight0.getGrade());
      assertEquals("P'HZa~G", catalogLight0.getCreator());
      assertFalse(catalogLight0.isDoorOrWindow());
      assertEquals((-611.6462F), catalogLight0.getWidth(), 0.01F);
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertEquals("", homeLight0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals("\"<xp|JAv^\"<^Qh{/~", homeLight0.getCatalogId());
      assertTrue(homeLight0.isMovable());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertEquals("s<7]@ykxs+ 0`a ", homeLight0.getName());
      assertTrue(homeLight0.isDeformable());
      assertNull(homeLight0.getShininess());
      assertTrue(homeLight0.isVisible());
      assertEquals("s<7]@ykxs+ 0`a ", homeLight0.getDescription());
      assertTrue(homeLight0.isResizable());
      assertFalse(homeLight0.isNameVisible());
      assertEquals(0.8720707F, homeLight0.getY(), 0.01F);
      assertEquals((-897.795F), homeLight0.getElevation(), 0.01F);
      assertFalse(homeLight0.isBackFaceShown());
      assertEquals((-611.6462F), homeLight0.getWidth(), 0.01F);
      assertEquals((-305.8231F), homeLight0.getX(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      assertEquals("", homeLight0.getCurrency());
      assertTrue(homeLight0.isTexturable());
      assertEquals((-897.795F), homeLight0.getGroundElevation(), 0.01F);
      assertEquals(0.5F, homeLight0.getHeight(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertFalse(homeLight0.isModelMirrored());
      assertNull(homeLight0.getColor());
      assertEquals(1.7441415F, homeLight0.getDepth(), 0.01F);
      assertEquals(0.0F, homeLight2.getNameXOffset(), 0.01F);
      assertFalse(homeLight2.isDoorOrWindow());
      assertFalse(homeLight2.isBackFaceShown());
      assertEquals(1.7441415F, homeLight2.getDepth(), 0.01F);
      assertTrue(homeLight2.isTexturable());
      assertEquals((-305.8231F), homeLight2.getX(), 0.01F);
      assertEquals("s<7]@ykxs+ 0`a ", homeLight2.getName());
      assertFalse(homeLight2.isModelMirrored());
      assertEquals(0.0F, homeLight2.getAngle(), 0.01F);
      assertFalse(homeLight2.isNameVisible());
      assertEquals(0.8720707F, homeLight2.getY(), 0.01F);
      assertTrue(homeLight2.isVisible());
      assertTrue(homeLight2.isDeformable());
      assertEquals((-1667.0F), homeLight2.getWidth(), 0.01F);
      assertEquals("", homeLight2.getCurrency());
      assertNull(homeLight2.getColor());
      assertEquals(0.0F, homeLight2.getNameYOffset(), 0.01F);
      assertNull(homeLight2.getShininess());
      assertTrue(homeLight2.isMovable());
      assertEquals("s<7]@ykxs+ 0`a ", homeLight2.getDescription());
      assertEquals("\"<xp|JAv^\"<^Qh{/~", homeLight2.getCatalogId());
      assertEquals((-897.795F), homeLight2.getElevation(), 0.01F);
      assertTrue(homeLight2.isResizable());
      assertEquals(0.0F, homeLight2.getNameAngle(), 0.01F);
      assertEquals("", homeLight2.getStaircaseCutOutShape());
      assertEquals(0.5F, homeLight2.getPower(), 0.01F);
      assertEquals(0.5F, homeLight2.getHeight(), 0.01F);
      assertEquals((-897.795F), homeLight2.getGroundElevation(), 0.01F);
      
      homeLight0.setY(0.5F);
      assertEquals(2, lightSourceArray0.length);
      assertNotSame(homeLight0, homeLight2);
      assertNotSame(homeLight0, homeLight1);
      assertFalse(homeLight0.equals((Object)homeLight2));
      assertFalse(homeLight0.equals((Object)homeLight1));
      assertNull(uRL0.getUserInfo());
      assertNull(uRL0.getAuthority());
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.toExternalForm());
      assertEquals("s<7]@ykxs+ 0`a ", uRL0.getProtocol());
      assertNull(uRL0.toString());
      assertNull(uRL0.getHost());
      assertEquals("", uRL0.getPath());
      assertEquals(0, uRL0.getDefaultPort());
      assertNull(uRL0.getRef());
      assertEquals("", uRL0.getFile());
      assertNull(uRL0.getQuery());
      assertFalse(temporaryURLContent0.isJAREntry());
      assertEquals((byte)10, bigDecimal0.byteValue());
      assertEquals((short)10, bigDecimal0.shortValue());
      assertTrue(catalogLight0.isTexturable());
      assertTrue(catalogLight0.isProportional());
      assertEquals("", catalogLight0.getCurrency());
      assertEquals("\"<xp|JAv^\"<^Qh{/~", catalogLight0.getId());
      assertEquals(1.7441415F, catalogLight0.getDepth(), 0.01F);
      assertEquals(0.5F, catalogLight0.getHeight(), 0.01F);
      assertTrue(catalogLight0.isResizable());
      assertFalse(catalogLight0.isModifiable());
      assertEquals("s<7]@ykxs+ 0`a ", catalogLight0.getName());
      assertNull(catalogLight0.getCreationDate());
      assertEquals("s<7]@ykxs+ 0`a ", catalogLight0.getDescription());
      assertEquals("", catalogLight0.getStaircaseCutOutShape());
      assertTrue(catalogLight0.isMovable());
      assertNull(catalogLight0.getInformation());
      assertTrue(catalogLight0.isDeformable());
      assertNull(catalogLight0.getColor());
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertEquals((-897.795F), catalogLight0.getElevation(), 0.01F);
      assertFalse(catalogLight0.isBackFaceShown());
      assertNull(catalogLight0.getGrade());
      assertEquals("P'HZa~G", catalogLight0.getCreator());
      assertFalse(catalogLight0.isDoorOrWindow());
      assertEquals((-611.6462F), catalogLight0.getWidth(), 0.01F);
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertEquals("", homeLight0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals("\"<xp|JAv^\"<^Qh{/~", homeLight0.getCatalogId());
      assertTrue(homeLight0.isMovable());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertEquals("s<7]@ykxs+ 0`a ", homeLight0.getName());
      assertTrue(homeLight0.isDeformable());
      assertNull(homeLight0.getShininess());
      assertTrue(homeLight0.isVisible());
      assertEquals("s<7]@ykxs+ 0`a ", homeLight0.getDescription());
      assertEquals(0.5F, homeLight0.getY(), 0.01F);
      assertTrue(homeLight0.isResizable());
      assertFalse(homeLight0.isNameVisible());
      assertEquals((-897.795F), homeLight0.getElevation(), 0.01F);
      assertFalse(homeLight0.isBackFaceShown());
      assertEquals((-611.6462F), homeLight0.getWidth(), 0.01F);
      assertEquals((-305.8231F), homeLight0.getX(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      assertEquals("", homeLight0.getCurrency());
      assertTrue(homeLight0.isTexturable());
      assertEquals((-897.795F), homeLight0.getGroundElevation(), 0.01F);
      assertEquals(0.5F, homeLight0.getHeight(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertFalse(homeLight0.isModelMirrored());
      assertNull(homeLight0.getColor());
      assertEquals(1.7441415F, homeLight0.getDepth(), 0.01F);
      
      homeLight0.setTexture((HomeTexture) null);
      assertEquals(2, lightSourceArray0.length);
      assertNotSame(homeLight0, homeLight2);
      assertNotSame(homeLight0, homeLight1);
      assertFalse(homeLight0.equals((Object)homeLight2));
      assertFalse(homeLight0.equals((Object)homeLight1));
      assertNull(uRL0.getUserInfo());
      assertNull(uRL0.getAuthority());
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.toExternalForm());
      assertEquals("s<7]@ykxs+ 0`a ", uRL0.getProtocol());
      assertNull(uRL0.toString());
      assertNull(uRL0.getHost());
      assertEquals("", uRL0.getPath());
      assertEquals(0, uRL0.getDefaultPort());
      assertNull(uRL0.getRef());
      assertEquals("", uRL0.getFile());
      assertNull(uRL0.getQuery());
      assertFalse(temporaryURLContent0.isJAREntry());
      assertEquals((byte)10, bigDecimal0.byteValue());
      assertEquals((short)10, bigDecimal0.shortValue());
      assertTrue(catalogLight0.isTexturable());
      assertTrue(catalogLight0.isProportional());
      assertEquals("", catalogLight0.getCurrency());
      assertEquals("\"<xp|JAv^\"<^Qh{/~", catalogLight0.getId());
      assertEquals(1.7441415F, catalogLight0.getDepth(), 0.01F);
      assertEquals(0.5F, catalogLight0.getHeight(), 0.01F);
      assertTrue(catalogLight0.isResizable());
      assertFalse(catalogLight0.isModifiable());
      assertEquals("s<7]@ykxs+ 0`a ", catalogLight0.getName());
      assertNull(catalogLight0.getCreationDate());
      assertEquals("s<7]@ykxs+ 0`a ", catalogLight0.getDescription());
      assertEquals("", catalogLight0.getStaircaseCutOutShape());
      assertTrue(catalogLight0.isMovable());
      assertNull(catalogLight0.getInformation());
      assertTrue(catalogLight0.isDeformable());
      assertNull(catalogLight0.getColor());
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertEquals((-897.795F), catalogLight0.getElevation(), 0.01F);
      assertFalse(catalogLight0.isBackFaceShown());
      assertNull(catalogLight0.getGrade());
      assertEquals("P'HZa~G", catalogLight0.getCreator());
      assertFalse(catalogLight0.isDoorOrWindow());
      assertEquals((-611.6462F), catalogLight0.getWidth(), 0.01F);
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertEquals("", homeLight0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals("\"<xp|JAv^\"<^Qh{/~", homeLight0.getCatalogId());
      assertTrue(homeLight0.isMovable());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertEquals("s<7]@ykxs+ 0`a ", homeLight0.getName());
      assertTrue(homeLight0.isDeformable());
      assertNull(homeLight0.getShininess());
      assertTrue(homeLight0.isVisible());
      assertEquals("s<7]@ykxs+ 0`a ", homeLight0.getDescription());
      assertEquals(0.5F, homeLight0.getY(), 0.01F);
      assertTrue(homeLight0.isResizable());
      assertFalse(homeLight0.isNameVisible());
      assertEquals((-897.795F), homeLight0.getElevation(), 0.01F);
      assertFalse(homeLight0.isBackFaceShown());
      assertEquals((-611.6462F), homeLight0.getWidth(), 0.01F);
      assertEquals((-305.8231F), homeLight0.getX(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      assertEquals("", homeLight0.getCurrency());
      assertTrue(homeLight0.isTexturable());
      assertEquals((-897.795F), homeLight0.getGroundElevation(), 0.01F);
      assertEquals(0.5F, homeLight0.getHeight(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertFalse(homeLight0.isModelMirrored());
      assertNull(homeLight0.getColor());
      assertEquals(1.7441415F, homeLight0.getDepth(), 0.01F);
      
      homeLight2.setWidth((-1.0F));
      assertEquals(2, lightSourceArray0.length);
      assertNotSame(homeLight0, homeLight2);
      assertNotSame(homeLight0, homeLight1);
      assertNotSame(homeLight2, homeLight0);
      assertNotSame(homeLight2, homeLight1);
      assertFalse(homeLight0.equals((Object)homeLight2));
      assertFalse(homeLight0.equals((Object)homeLight1));
      assertFalse(homeLight2.equals((Object)homeLight0));
      assertFalse(homeLight2.equals((Object)homeLight1));
      assertNull(uRL0.getUserInfo());
      assertNull(uRL0.getAuthority());
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.toExternalForm());
      assertEquals("s<7]@ykxs+ 0`a ", uRL0.getProtocol());
      assertNull(uRL0.toString());
      assertNull(uRL0.getHost());
      assertEquals("", uRL0.getPath());
      assertEquals(0, uRL0.getDefaultPort());
      assertNull(uRL0.getRef());
      assertEquals("", uRL0.getFile());
      assertNull(uRL0.getQuery());
      assertFalse(temporaryURLContent0.isJAREntry());
      assertEquals((byte)10, bigDecimal0.byteValue());
      assertEquals((short)10, bigDecimal0.shortValue());
      assertTrue(catalogLight0.isTexturable());
      assertTrue(catalogLight0.isProportional());
      assertEquals("", catalogLight0.getCurrency());
      assertEquals("\"<xp|JAv^\"<^Qh{/~", catalogLight0.getId());
      assertEquals(1.7441415F, catalogLight0.getDepth(), 0.01F);
      assertEquals(0.5F, catalogLight0.getHeight(), 0.01F);
      assertTrue(catalogLight0.isResizable());
      assertFalse(catalogLight0.isModifiable());
      assertEquals("s<7]@ykxs+ 0`a ", catalogLight0.getName());
      assertNull(catalogLight0.getCreationDate());
      assertEquals("s<7]@ykxs+ 0`a ", catalogLight0.getDescription());
      assertEquals("", catalogLight0.getStaircaseCutOutShape());
      assertTrue(catalogLight0.isMovable());
      assertNull(catalogLight0.getInformation());
      assertTrue(catalogLight0.isDeformable());
      assertNull(catalogLight0.getColor());
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertEquals((-897.795F), catalogLight0.getElevation(), 0.01F);
      assertFalse(catalogLight0.isBackFaceShown());
      assertNull(catalogLight0.getGrade());
      assertEquals("P'HZa~G", catalogLight0.getCreator());
      assertFalse(catalogLight0.isDoorOrWindow());
      assertEquals((-611.6462F), catalogLight0.getWidth(), 0.01F);
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertEquals("", homeLight0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals("\"<xp|JAv^\"<^Qh{/~", homeLight0.getCatalogId());
      assertTrue(homeLight0.isMovable());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertEquals("s<7]@ykxs+ 0`a ", homeLight0.getName());
      assertTrue(homeLight0.isDeformable());
      assertNull(homeLight0.getShininess());
      assertTrue(homeLight0.isVisible());
      assertEquals("s<7]@ykxs+ 0`a ", homeLight0.getDescription());
      assertEquals(0.5F, homeLight0.getY(), 0.01F);
      assertTrue(homeLight0.isResizable());
      assertFalse(homeLight0.isNameVisible());
      assertEquals((-897.795F), homeLight0.getElevation(), 0.01F);
      assertFalse(homeLight0.isBackFaceShown());
      assertEquals((-611.6462F), homeLight0.getWidth(), 0.01F);
      assertEquals((-305.8231F), homeLight0.getX(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      assertEquals("", homeLight0.getCurrency());
      assertTrue(homeLight0.isTexturable());
      assertEquals((-897.795F), homeLight0.getGroundElevation(), 0.01F);
      assertEquals(0.5F, homeLight0.getHeight(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertFalse(homeLight0.isModelMirrored());
      assertNull(homeLight0.getColor());
      assertEquals(1.7441415F, homeLight0.getDepth(), 0.01F);
      assertEquals(0.0F, homeLight2.getNameXOffset(), 0.01F);
      assertFalse(homeLight2.isDoorOrWindow());
      assertFalse(homeLight2.isBackFaceShown());
      assertEquals(1.7441415F, homeLight2.getDepth(), 0.01F);
      assertTrue(homeLight2.isTexturable());
      assertEquals((-305.8231F), homeLight2.getX(), 0.01F);
      assertEquals("s<7]@ykxs+ 0`a ", homeLight2.getName());
      assertFalse(homeLight2.isModelMirrored());
      assertEquals(0.0F, homeLight2.getAngle(), 0.01F);
      assertFalse(homeLight2.isNameVisible());
      assertEquals((-1.0F), homeLight2.getWidth(), 0.01F);
      assertEquals(0.8720707F, homeLight2.getY(), 0.01F);
      assertTrue(homeLight2.isVisible());
      assertTrue(homeLight2.isDeformable());
      assertEquals("", homeLight2.getCurrency());
      assertNull(homeLight2.getColor());
      assertEquals(0.0F, homeLight2.getNameYOffset(), 0.01F);
      assertNull(homeLight2.getShininess());
      assertTrue(homeLight2.isMovable());
      assertEquals("s<7]@ykxs+ 0`a ", homeLight2.getDescription());
      assertEquals("\"<xp|JAv^\"<^Qh{/~", homeLight2.getCatalogId());
      assertEquals((-897.795F), homeLight2.getElevation(), 0.01F);
      assertTrue(homeLight2.isResizable());
      assertEquals(0.0F, homeLight2.getNameAngle(), 0.01F);
      assertEquals("", homeLight2.getStaircaseCutOutShape());
      assertEquals(0.5F, homeLight2.getPower(), 0.01F);
      assertEquals(0.5F, homeLight2.getHeight(), 0.01F);
      assertEquals((-897.795F), homeLight2.getGroundElevation(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      LightSource[] lightSourceArray0 = new LightSource[2];
      LightSource lightSource0 = new LightSource((-1.0F), (-69.47F), 700.4569F, 1431655765);
      assertNotNull(lightSource0);
      assertEquals((-69.47F), lightSource0.getY(), 0.01F);
      assertEquals(1431655765, lightSource0.getColor());
      assertEquals((-1.0F), lightSource0.getX(), 0.01F);
      assertEquals(700.4569F, lightSource0.getZ(), 0.01F);
      assertNull(lightSource0.getDiameter());
      
      lightSourceArray0[1] = lightSource0;
      Integer integer0 = new Integer(1431655765);
      assertNotNull(integer0);
      assertEquals(1431655765, (int)integer0);
      
      Light light0 = mock(Light.class, new ViolatedAssumptionAnswer());
      doReturn((LightSource[]) null).when(light0).getLightSources();
      doReturn((Integer) null).when(light0).getColor();
      doReturn((String) null).when(light0).getCurrency();
      doReturn(0.0F).when(light0).getDepth();
      doReturn((String) null).when(light0).getDescription();
      doReturn(0.0F).when(light0).getElevation();
      doReturn(0.0F).when(light0).getHeight();
      doReturn((Content) null).when(light0).getIcon();
      doReturn((Content) null).when(light0).getModel();
      doReturn((float[][]) null).when(light0).getModelRotation();
      doReturn((String) null).when(light0).getName();
      doReturn((Content) null).when(light0).getPlanIcon();
      doReturn((BigDecimal) null).when(light0).getPrice();
      doReturn((String) null).when(light0).getStaircaseCutOutShape();
      doReturn((BigDecimal) null).when(light0).getValueAddedTaxPercentage();
      doReturn(0.0F).when(light0).getWidth();
      doReturn(false).when(light0).isBackFaceShown();
      doReturn(false).when(light0).isDeformable();
      doReturn(false).when(light0).isDoorOrWindow();
      doReturn(false).when(light0).isMovable();
      doReturn(false).when(light0).isResizable();
      doReturn(false).when(light0).isTexturable();
      HomeLight homeLight0 = new HomeLight(light0);
      assertNotNull(homeLight0);
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertTrue(homeLight0.isVisible());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertNull(homeLight0.getCurrency());
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertNull(homeLight0.getShininess());
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertFalse(homeLight0.isMovable());
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertFalse(homeLight0.isDeformable());
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertFalse(homeLight0.isResizable());
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertNull(homeLight0.getDescription());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertNull(homeLight0.getCatalogId());
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertFalse(homeLight0.isTexturable());
      assertFalse(homeLight0.isDoorOrWindow());
      assertFalse(homeLight0.isModelMirrored());
      assertNull(homeLight0.getColor());
      assertNull(homeLight0.getName());
      assertFalse(homeLight0.isNameVisible());
      assertFalse(homeLight0.isBackFaceShown());
      
      HomeLight homeLight1 = homeLight0.clone();
      assertNotNull(homeLight1);
      assertNotSame(homeLight0, homeLight1);
      assertNotSame(homeLight1, homeLight0);
      assertFalse(homeLight1.equals((Object)homeLight0));
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertTrue(homeLight0.isVisible());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertNull(homeLight0.getCurrency());
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertNull(homeLight0.getShininess());
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertFalse(homeLight0.isMovable());
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertFalse(homeLight0.isDeformable());
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertFalse(homeLight0.isResizable());
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertNull(homeLight0.getDescription());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertNull(homeLight0.getCatalogId());
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertFalse(homeLight0.isTexturable());
      assertFalse(homeLight0.isDoorOrWindow());
      assertFalse(homeLight0.isModelMirrored());
      assertNull(homeLight0.getColor());
      assertNull(homeLight0.getName());
      assertFalse(homeLight0.isNameVisible());
      assertFalse(homeLight0.isBackFaceShown());
      assertNull(homeLight1.getStaircaseCutOutShape());
      assertNull(homeLight1.getCatalogId());
      assertNull(homeLight1.getName());
      assertEquals(0.0F, homeLight1.getNameXOffset(), 0.01F);
      assertFalse(homeLight1.isMovable());
      assertEquals(0.0F, homeLight1.getHeight(), 0.01F);
      assertEquals(0.5F, homeLight1.getPower(), 0.01F);
      assertNull(homeLight1.getDescription());
      assertEquals(0.0F, homeLight1.getElevation(), 0.01F);
      assertFalse(homeLight1.isTexturable());
      assertEquals(0.0F, homeLight1.getGroundElevation(), 0.01F);
      assertNull(homeLight1.getShininess());
      assertTrue(homeLight1.isVisible());
      assertEquals(0.0F, homeLight1.getDepth(), 0.01F);
      assertFalse(homeLight1.isResizable());
      assertEquals(0.0F, homeLight1.getNameAngle(), 0.01F);
      assertFalse(homeLight1.isDeformable());
      assertFalse(homeLight1.isNameVisible());
      assertNull(homeLight1.getColor());
      assertEquals(0.0F, homeLight1.getX(), 0.01F);
      assertEquals(0.0F, homeLight1.getY(), 0.01F);
      assertNull(homeLight1.getCurrency());
      assertEquals(0.0F, homeLight1.getWidth(), 0.01F);
      assertFalse(homeLight1.isDoorOrWindow());
      assertEquals(0.0F, homeLight1.getAngle(), 0.01F);
      assertEquals(0.0F, homeLight1.getNameYOffset(), 0.01F);
      assertFalse(homeLight1.isBackFaceShown());
      assertFalse(homeLight1.isModelMirrored());
      
      String string0 = homeLight1.getName();
      assertNull(string0);
      assertNotSame(homeLight0, homeLight1);
      assertNotSame(homeLight1, homeLight0);
      assertFalse(homeLight0.equals((Object)homeLight1));
      assertFalse(homeLight1.equals((Object)homeLight0));
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertTrue(homeLight0.isVisible());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertNull(homeLight0.getCurrency());
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertNull(homeLight0.getShininess());
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertFalse(homeLight0.isMovable());
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertFalse(homeLight0.isDeformable());
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertFalse(homeLight0.isResizable());
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertNull(homeLight0.getDescription());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertNull(homeLight0.getCatalogId());
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertFalse(homeLight0.isTexturable());
      assertFalse(homeLight0.isDoorOrWindow());
      assertFalse(homeLight0.isModelMirrored());
      assertNull(homeLight0.getColor());
      assertNull(homeLight0.getName());
      assertFalse(homeLight0.isNameVisible());
      assertFalse(homeLight0.isBackFaceShown());
      assertNull(homeLight1.getStaircaseCutOutShape());
      assertNull(homeLight1.getCatalogId());
      assertNull(homeLight1.getName());
      assertEquals(0.0F, homeLight1.getNameXOffset(), 0.01F);
      assertFalse(homeLight1.isMovable());
      assertEquals(0.0F, homeLight1.getHeight(), 0.01F);
      assertEquals(0.5F, homeLight1.getPower(), 0.01F);
      assertNull(homeLight1.getDescription());
      assertEquals(0.0F, homeLight1.getElevation(), 0.01F);
      assertFalse(homeLight1.isTexturable());
      assertEquals(0.0F, homeLight1.getGroundElevation(), 0.01F);
      assertNull(homeLight1.getShininess());
      assertTrue(homeLight1.isVisible());
      assertEquals(0.0F, homeLight1.getDepth(), 0.01F);
      assertFalse(homeLight1.isResizable());
      assertEquals(0.0F, homeLight1.getNameAngle(), 0.01F);
      assertFalse(homeLight1.isDeformable());
      assertFalse(homeLight1.isNameVisible());
      assertNull(homeLight1.getColor());
      assertEquals(0.0F, homeLight1.getX(), 0.01F);
      assertEquals(0.0F, homeLight1.getY(), 0.01F);
      assertNull(homeLight1.getCurrency());
      assertEquals(0.0F, homeLight1.getWidth(), 0.01F);
      assertFalse(homeLight1.isDoorOrWindow());
      assertEquals(0.0F, homeLight1.getAngle(), 0.01F);
      assertEquals(0.0F, homeLight1.getNameYOffset(), 0.01F);
      assertFalse(homeLight1.isBackFaceShown());
      assertFalse(homeLight1.isModelMirrored());
      
      Level level0 = homeLight0.getLevel();
      assertNull(level0);
      assertNotSame(homeLight0, homeLight1);
      assertFalse(homeLight0.equals((Object)homeLight1));
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertTrue(homeLight0.isVisible());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertNull(homeLight0.getCurrency());
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertNull(homeLight0.getShininess());
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertFalse(homeLight0.isMovable());
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertFalse(homeLight0.isDeformable());
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertFalse(homeLight0.isResizable());
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertNull(homeLight0.getDescription());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertNull(homeLight0.getCatalogId());
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertFalse(homeLight0.isTexturable());
      assertFalse(homeLight0.isDoorOrWindow());
      assertFalse(homeLight0.isModelMirrored());
      assertNull(homeLight0.getColor());
      assertNull(homeLight0.getName());
      assertFalse(homeLight0.isNameVisible());
      assertFalse(homeLight0.isBackFaceShown());
      
      HomeLight homeLight2 = homeLight0.clone();
      assertNotNull(homeLight2);
      assertNotSame(homeLight0, homeLight1);
      assertNotSame(homeLight0, homeLight2);
      assertNotSame(homeLight2, homeLight0);
      assertNotSame(homeLight2, homeLight1);
      assertFalse(homeLight0.equals((Object)homeLight1));
      assertFalse(homeLight2.equals((Object)homeLight0));
      assertFalse(homeLight2.equals((Object)homeLight1));
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertTrue(homeLight0.isVisible());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertNull(homeLight0.getCurrency());
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertNull(homeLight0.getShininess());
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertFalse(homeLight0.isMovable());
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertFalse(homeLight0.isDeformable());
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertFalse(homeLight0.isResizable());
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertNull(homeLight0.getDescription());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertNull(homeLight0.getCatalogId());
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertFalse(homeLight0.isTexturable());
      assertFalse(homeLight0.isDoorOrWindow());
      assertFalse(homeLight0.isModelMirrored());
      assertNull(homeLight0.getColor());
      assertNull(homeLight0.getName());
      assertFalse(homeLight0.isNameVisible());
      assertFalse(homeLight0.isBackFaceShown());
      assertNull(homeLight2.getShininess());
      assertNull(homeLight2.getCatalogId());
      assertNull(homeLight2.getName());
      assertEquals(0.0F, homeLight2.getDepth(), 0.01F);
      assertNull(homeLight2.getStaircaseCutOutShape());
      assertFalse(homeLight2.isResizable());
      assertEquals(0.0F, homeLight2.getNameAngle(), 0.01F);
      assertEquals(0.0F, homeLight2.getNameYOffset(), 0.01F);
      assertEquals(0.0F, homeLight2.getHeight(), 0.01F);
      assertFalse(homeLight2.isMovable());
      assertEquals(0.5F, homeLight2.getPower(), 0.01F);
      assertNull(homeLight2.getCurrency());
      assertFalse(homeLight2.isBackFaceShown());
      assertFalse(homeLight2.isModelMirrored());
      assertEquals(0.0F, homeLight2.getX(), 0.01F);
      assertEquals(0.0F, homeLight2.getY(), 0.01F);
      assertNull(homeLight2.getColor());
      assertFalse(homeLight2.isNameVisible());
      assertFalse(homeLight2.isDeformable());
      assertTrue(homeLight2.isVisible());
      assertEquals(0.0F, homeLight2.getWidth(), 0.01F);
      assertEquals(0.0F, homeLight2.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeLight2.getGroundElevation(), 0.01F);
      assertFalse(homeLight2.isTexturable());
      assertEquals(0.0F, homeLight2.getAngle(), 0.01F);
      assertNull(homeLight2.getDescription());
      assertEquals(0.0F, homeLight2.getElevation(), 0.01F);
      assertFalse(homeLight2.isDoorOrWindow());
      
      homeLight1.setAngle(39.0F);
      assertNotSame(homeLight0, homeLight1);
      assertNotSame(homeLight0, homeLight2);
      assertNotSame(homeLight1, homeLight0);
      assertNotSame(homeLight1, homeLight2);
      assertFalse(homeLight0.equals((Object)homeLight1));
      assertFalse(homeLight0.equals((Object)homeLight2));
      assertFalse(homeLight1.equals((Object)homeLight0));
      assertFalse(homeLight1.equals((Object)homeLight2));
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertTrue(homeLight0.isVisible());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertNull(homeLight0.getCurrency());
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertNull(homeLight0.getShininess());
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertFalse(homeLight0.isMovable());
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertFalse(homeLight0.isDeformable());
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertFalse(homeLight0.isResizable());
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertNull(homeLight0.getDescription());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertNull(homeLight0.getCatalogId());
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertFalse(homeLight0.isTexturable());
      assertFalse(homeLight0.isDoorOrWindow());
      assertFalse(homeLight0.isModelMirrored());
      assertNull(homeLight0.getColor());
      assertNull(homeLight0.getName());
      assertFalse(homeLight0.isNameVisible());
      assertFalse(homeLight0.isBackFaceShown());
      assertNull(homeLight1.getStaircaseCutOutShape());
      assertNull(homeLight1.getCatalogId());
      assertNull(homeLight1.getName());
      assertEquals(0.0F, homeLight1.getNameXOffset(), 0.01F);
      assertFalse(homeLight1.isMovable());
      assertEquals(0.0F, homeLight1.getHeight(), 0.01F);
      assertEquals(0.5F, homeLight1.getPower(), 0.01F);
      assertNull(homeLight1.getDescription());
      assertEquals(0.0F, homeLight1.getElevation(), 0.01F);
      assertFalse(homeLight1.isTexturable());
      assertEquals(0.0F, homeLight1.getGroundElevation(), 0.01F);
      assertNull(homeLight1.getShininess());
      assertTrue(homeLight1.isVisible());
      assertEquals(0.0F, homeLight1.getDepth(), 0.01F);
      assertFalse(homeLight1.isResizable());
      assertEquals(0.0F, homeLight1.getNameAngle(), 0.01F);
      assertFalse(homeLight1.isDeformable());
      assertFalse(homeLight1.isNameVisible());
      assertNull(homeLight1.getColor());
      assertEquals(0.0F, homeLight1.getX(), 0.01F);
      assertEquals(0.0F, homeLight1.getY(), 0.01F);
      assertNull(homeLight1.getCurrency());
      assertEquals(0.0F, homeLight1.getWidth(), 0.01F);
      assertFalse(homeLight1.isDoorOrWindow());
      assertEquals(0.0F, homeLight1.getNameYOffset(), 0.01F);
      assertEquals(1.3008882F, homeLight1.getAngle(), 0.01F);
      assertFalse(homeLight1.isBackFaceShown());
      assertFalse(homeLight1.isModelMirrored());
      
      homeLight2.setName("Invalid URL base for JAR entry");
      assertNotSame(homeLight0, homeLight1);
      assertNotSame(homeLight0, homeLight2);
      assertNotSame(homeLight2, homeLight0);
      assertNotSame(homeLight2, homeLight1);
      assertFalse(homeLight0.equals((Object)homeLight1));
      assertFalse(homeLight0.equals((Object)homeLight2));
      assertFalse(homeLight2.equals((Object)homeLight0));
      assertFalse(homeLight2.equals((Object)homeLight1));
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertTrue(homeLight0.isVisible());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertNull(homeLight0.getCurrency());
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertNull(homeLight0.getShininess());
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertFalse(homeLight0.isMovable());
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertFalse(homeLight0.isDeformable());
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertFalse(homeLight0.isResizable());
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertNull(homeLight0.getDescription());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertNull(homeLight0.getCatalogId());
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertFalse(homeLight0.isTexturable());
      assertFalse(homeLight0.isDoorOrWindow());
      assertFalse(homeLight0.isModelMirrored());
      assertNull(homeLight0.getColor());
      assertNull(homeLight0.getName());
      assertFalse(homeLight0.isNameVisible());
      assertFalse(homeLight0.isBackFaceShown());
      assertNull(homeLight2.getShininess());
      assertNull(homeLight2.getCatalogId());
      assertEquals(0.0F, homeLight2.getDepth(), 0.01F);
      assertNull(homeLight2.getStaircaseCutOutShape());
      assertFalse(homeLight2.isResizable());
      assertEquals(0.0F, homeLight2.getNameAngle(), 0.01F);
      assertEquals("Invalid URL base for JAR entry", homeLight2.getName());
      assertEquals(0.0F, homeLight2.getNameYOffset(), 0.01F);
      assertEquals(0.0F, homeLight2.getHeight(), 0.01F);
      assertFalse(homeLight2.isMovable());
      assertEquals(0.5F, homeLight2.getPower(), 0.01F);
      assertNull(homeLight2.getCurrency());
      assertFalse(homeLight2.isBackFaceShown());
      assertFalse(homeLight2.isModelMirrored());
      assertEquals(0.0F, homeLight2.getX(), 0.01F);
      assertEquals(0.0F, homeLight2.getY(), 0.01F);
      assertNull(homeLight2.getColor());
      assertFalse(homeLight2.isNameVisible());
      assertFalse(homeLight2.isDeformable());
      assertTrue(homeLight2.isVisible());
      assertEquals(0.0F, homeLight2.getWidth(), 0.01F);
      assertEquals(0.0F, homeLight2.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeLight2.getGroundElevation(), 0.01F);
      assertFalse(homeLight2.isTexturable());
      assertEquals(0.0F, homeLight2.getAngle(), 0.01F);
      assertNull(homeLight2.getDescription());
      assertEquals(0.0F, homeLight2.getElevation(), 0.01F);
      assertFalse(homeLight2.isDoorOrWindow());
      
      homeLight1.setDescription((String) null);
      assertNotSame(homeLight0, homeLight1);
      assertNotSame(homeLight0, homeLight2);
      assertNotSame(homeLight1, homeLight0);
      assertNotSame(homeLight1, homeLight2);
      assertFalse(homeLight0.equals((Object)homeLight1));
      assertFalse(homeLight0.equals((Object)homeLight2));
      assertFalse(homeLight1.equals((Object)homeLight0));
      assertFalse(homeLight1.equals((Object)homeLight2));
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertTrue(homeLight0.isVisible());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertNull(homeLight0.getCurrency());
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertNull(homeLight0.getShininess());
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertFalse(homeLight0.isMovable());
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertFalse(homeLight0.isDeformable());
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertFalse(homeLight0.isResizable());
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertNull(homeLight0.getDescription());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertNull(homeLight0.getCatalogId());
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertFalse(homeLight0.isTexturable());
      assertFalse(homeLight0.isDoorOrWindow());
      assertFalse(homeLight0.isModelMirrored());
      assertNull(homeLight0.getColor());
      assertNull(homeLight0.getName());
      assertFalse(homeLight0.isNameVisible());
      assertFalse(homeLight0.isBackFaceShown());
      assertNull(homeLight1.getStaircaseCutOutShape());
      assertNull(homeLight1.getCatalogId());
      assertNull(homeLight1.getName());
      assertEquals(0.0F, homeLight1.getNameXOffset(), 0.01F);
      assertFalse(homeLight1.isMovable());
      assertEquals(0.0F, homeLight1.getHeight(), 0.01F);
      assertEquals(0.5F, homeLight1.getPower(), 0.01F);
      assertNull(homeLight1.getDescription());
      assertEquals(0.0F, homeLight1.getElevation(), 0.01F);
      assertFalse(homeLight1.isTexturable());
      assertEquals(0.0F, homeLight1.getGroundElevation(), 0.01F);
      assertNull(homeLight1.getShininess());
      assertTrue(homeLight1.isVisible());
      assertEquals(0.0F, homeLight1.getDepth(), 0.01F);
      assertFalse(homeLight1.isResizable());
      assertEquals(0.0F, homeLight1.getNameAngle(), 0.01F);
      assertFalse(homeLight1.isDeformable());
      assertFalse(homeLight1.isNameVisible());
      assertNull(homeLight1.getColor());
      assertEquals(0.0F, homeLight1.getX(), 0.01F);
      assertEquals(0.0F, homeLight1.getY(), 0.01F);
      assertNull(homeLight1.getCurrency());
      assertEquals(0.0F, homeLight1.getWidth(), 0.01F);
      assertFalse(homeLight1.isDoorOrWindow());
      assertEquals(0.0F, homeLight1.getNameYOffset(), 0.01F);
      assertEquals(1.3008882F, homeLight1.getAngle(), 0.01F);
      assertFalse(homeLight1.isBackFaceShown());
      assertFalse(homeLight1.isModelMirrored());
      
      boolean boolean0 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "");
      assertFalse(boolean0);
      
      boolean boolean1 = homeLight1.intersectsRectangle(0.39F, 0.5F, (-69.47F), 0.5F);
      assertNotSame(homeLight0, homeLight1);
      assertNotSame(homeLight0, homeLight2);
      assertNotSame(homeLight1, homeLight0);
      assertNotSame(homeLight1, homeLight2);
      assertFalse(homeLight0.equals((Object)homeLight1));
      assertFalse(homeLight0.equals((Object)homeLight2));
      assertFalse(homeLight1.equals((Object)homeLight0));
      assertFalse(homeLight1.equals((Object)homeLight2));
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertTrue(homeLight0.isVisible());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertNull(homeLight0.getCurrency());
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertNull(homeLight0.getShininess());
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertFalse(homeLight0.isMovable());
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertFalse(homeLight0.isDeformable());
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertFalse(homeLight0.isResizable());
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertNull(homeLight0.getDescription());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertNull(homeLight0.getCatalogId());
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertFalse(homeLight0.isTexturable());
      assertFalse(homeLight0.isDoorOrWindow());
      assertFalse(homeLight0.isModelMirrored());
      assertNull(homeLight0.getColor());
      assertNull(homeLight0.getName());
      assertFalse(homeLight0.isNameVisible());
      assertFalse(homeLight0.isBackFaceShown());
      assertNull(homeLight1.getStaircaseCutOutShape());
      assertNull(homeLight1.getCatalogId());
      assertNull(homeLight1.getName());
      assertEquals(0.0F, homeLight1.getNameXOffset(), 0.01F);
      assertFalse(homeLight1.isMovable());
      assertEquals(0.0F, homeLight1.getHeight(), 0.01F);
      assertEquals(0.5F, homeLight1.getPower(), 0.01F);
      assertNull(homeLight1.getDescription());
      assertEquals(0.0F, homeLight1.getElevation(), 0.01F);
      assertFalse(homeLight1.isTexturable());
      assertEquals(0.0F, homeLight1.getGroundElevation(), 0.01F);
      assertNull(homeLight1.getShininess());
      assertTrue(homeLight1.isVisible());
      assertEquals(0.0F, homeLight1.getDepth(), 0.01F);
      assertFalse(homeLight1.isResizable());
      assertEquals(0.0F, homeLight1.getNameAngle(), 0.01F);
      assertFalse(homeLight1.isDeformable());
      assertFalse(homeLight1.isNameVisible());
      assertNull(homeLight1.getColor());
      assertEquals(0.0F, homeLight1.getX(), 0.01F);
      assertEquals(0.0F, homeLight1.getY(), 0.01F);
      assertNull(homeLight1.getCurrency());
      assertEquals(0.0F, homeLight1.getWidth(), 0.01F);
      assertFalse(homeLight1.isDoorOrWindow());
      assertEquals(0.0F, homeLight1.getNameYOffset(), 0.01F);
      assertEquals(1.3008882F, homeLight1.getAngle(), 0.01F);
      assertFalse(homeLight1.isBackFaceShown());
      assertFalse(homeLight1.isModelMirrored());
      
      homeLight1.setNameYOffset(0.39F);
      assertNotSame(homeLight0, homeLight1);
      assertNotSame(homeLight0, homeLight2);
      assertNotSame(homeLight1, homeLight0);
      assertNotSame(homeLight1, homeLight2);
      assertFalse(homeLight0.equals((Object)homeLight1));
      assertFalse(homeLight0.equals((Object)homeLight2));
      assertFalse(homeLight1.equals((Object)homeLight0));
      assertFalse(homeLight1.equals((Object)homeLight2));
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertTrue(homeLight0.isVisible());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertNull(homeLight0.getCurrency());
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertNull(homeLight0.getShininess());
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertFalse(homeLight0.isMovable());
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertFalse(homeLight0.isDeformable());
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertFalse(homeLight0.isResizable());
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertNull(homeLight0.getDescription());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertNull(homeLight0.getCatalogId());
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertFalse(homeLight0.isTexturable());
      assertFalse(homeLight0.isDoorOrWindow());
      assertFalse(homeLight0.isModelMirrored());
      assertNull(homeLight0.getColor());
      assertNull(homeLight0.getName());
      assertFalse(homeLight0.isNameVisible());
      assertFalse(homeLight0.isBackFaceShown());
      assertNull(homeLight1.getStaircaseCutOutShape());
      assertNull(homeLight1.getCatalogId());
      assertNull(homeLight1.getName());
      assertEquals(0.0F, homeLight1.getNameXOffset(), 0.01F);
      assertFalse(homeLight1.isMovable());
      assertEquals(0.0F, homeLight1.getHeight(), 0.01F);
      assertEquals(0.5F, homeLight1.getPower(), 0.01F);
      assertNull(homeLight1.getDescription());
      assertEquals(0.0F, homeLight1.getElevation(), 0.01F);
      assertFalse(homeLight1.isTexturable());
      assertEquals(0.0F, homeLight1.getGroundElevation(), 0.01F);
      assertEquals(0.39F, homeLight1.getNameYOffset(), 0.01F);
      assertNull(homeLight1.getShininess());
      assertTrue(homeLight1.isVisible());
      assertEquals(0.0F, homeLight1.getDepth(), 0.01F);
      assertFalse(homeLight1.isResizable());
      assertEquals(0.0F, homeLight1.getNameAngle(), 0.01F);
      assertFalse(homeLight1.isDeformable());
      assertFalse(homeLight1.isNameVisible());
      assertNull(homeLight1.getColor());
      assertEquals(0.0F, homeLight1.getX(), 0.01F);
      assertEquals(0.0F, homeLight1.getY(), 0.01F);
      assertNull(homeLight1.getCurrency());
      assertEquals(0.0F, homeLight1.getWidth(), 0.01F);
      assertFalse(homeLight1.isDoorOrWindow());
      assertEquals(1.3008882F, homeLight1.getAngle(), 0.01F);
      assertFalse(homeLight1.isBackFaceShown());
      assertFalse(homeLight1.isModelMirrored());
      
      BigDecimal bigDecimal0 = BigDecimal.TEN;
      assertNotNull(bigDecimal0);
      assertEquals((short)10, bigDecimal0.shortValue());
      assertEquals((byte)10, bigDecimal0.byteValue());
      
      HomeLight homeLight3 = homeLight2.clone();
      assertNotNull(homeLight3);
      assertNotSame(homeLight3, homeLight0);
      assertNotSame(homeLight3, homeLight1);
      assertNotSame(homeLight3, homeLight2);
      assertNotSame(homeLight0, homeLight1);
      assertNotSame(homeLight0, homeLight3);
      assertNotSame(homeLight0, homeLight2);
      assertNotSame(homeLight2, homeLight0);
      assertNotSame(homeLight2, homeLight3);
      assertNotSame(homeLight2, homeLight1);
      assertFalse(homeLight3.equals((Object)homeLight0));
      assertFalse(homeLight3.equals((Object)homeLight1));
      assertFalse(homeLight3.equals((Object)homeLight2));
      assertFalse(homeLight0.equals((Object)homeLight1));
      assertFalse(homeLight0.equals((Object)homeLight2));
      assertFalse(homeLight2.equals((Object)homeLight0));
      assertFalse(homeLight2.equals((Object)homeLight1));
      assertFalse(homeLight3.isNameVisible());
      assertFalse(homeLight3.isDeformable());
      assertEquals(0.0F, homeLight3.getWidth(), 0.01F);
      assertEquals("Invalid URL base for JAR entry", homeLight3.getName());
      assertTrue(homeLight3.isVisible());
      assertNull(homeLight3.getCurrency());
      assertFalse(homeLight3.isModelMirrored());
      assertFalse(homeLight3.isBackFaceShown());
      assertFalse(homeLight3.isResizable());
      assertEquals(0.0F, homeLight3.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight3.getX(), 0.01F);
      assertFalse(homeLight3.isDoorOrWindow());
      assertNull(homeLight3.getShininess());
      assertEquals(0.0F, homeLight3.getAngle(), 0.01F);
      assertEquals(0.0F, homeLight3.getElevation(), 0.01F);
      assertFalse(homeLight3.isTexturable());
      assertEquals(0.0F, homeLight3.getY(), 0.01F);
      assertEquals(0.0F, homeLight3.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeLight3.getDepth(), 0.01F);
      assertNull(homeLight3.getDescription());
      assertEquals(0.5F, homeLight3.getPower(), 0.01F);
      assertNull(homeLight3.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight3.getNameAngle(), 0.01F);
      assertFalse(homeLight3.isMovable());
      assertEquals(0.0F, homeLight3.getHeight(), 0.01F);
      assertNull(homeLight3.getColor());
      assertNull(homeLight3.getCatalogId());
      assertEquals(0.0F, homeLight3.getNameYOffset(), 0.01F);
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertTrue(homeLight0.isVisible());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertNull(homeLight0.getCurrency());
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertNull(homeLight0.getShininess());
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertFalse(homeLight0.isMovable());
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertFalse(homeLight0.isDeformable());
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertFalse(homeLight0.isResizable());
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertNull(homeLight0.getDescription());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertNull(homeLight0.getCatalogId());
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertFalse(homeLight0.isTexturable());
      assertFalse(homeLight0.isDoorOrWindow());
      assertFalse(homeLight0.isModelMirrored());
      assertNull(homeLight0.getColor());
      assertNull(homeLight0.getName());
      assertFalse(homeLight0.isNameVisible());
      assertFalse(homeLight0.isBackFaceShown());
      assertNull(homeLight2.getShininess());
      assertNull(homeLight2.getCatalogId());
      assertEquals(0.0F, homeLight2.getDepth(), 0.01F);
      assertNull(homeLight2.getStaircaseCutOutShape());
      assertFalse(homeLight2.isResizable());
      assertEquals(0.0F, homeLight2.getNameAngle(), 0.01F);
      assertEquals("Invalid URL base for JAR entry", homeLight2.getName());
      assertEquals(0.0F, homeLight2.getNameYOffset(), 0.01F);
      assertEquals(0.0F, homeLight2.getHeight(), 0.01F);
      assertFalse(homeLight2.isMovable());
      assertEquals(0.5F, homeLight2.getPower(), 0.01F);
      assertNull(homeLight2.getCurrency());
      assertFalse(homeLight2.isBackFaceShown());
      assertFalse(homeLight2.isModelMirrored());
      assertEquals(0.0F, homeLight2.getX(), 0.01F);
      assertEquals(0.0F, homeLight2.getY(), 0.01F);
      assertNull(homeLight2.getColor());
      assertFalse(homeLight2.isNameVisible());
      assertFalse(homeLight2.isDeformable());
      assertTrue(homeLight2.isVisible());
      assertEquals(0.0F, homeLight2.getWidth(), 0.01F);
      assertEquals(0.0F, homeLight2.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeLight2.getGroundElevation(), 0.01F);
      assertFalse(homeLight2.isTexturable());
      assertEquals(0.0F, homeLight2.getAngle(), 0.01F);
      assertNull(homeLight2.getDescription());
      assertEquals(0.0F, homeLight2.getElevation(), 0.01F);
      assertFalse(homeLight2.isDoorOrWindow());
      
      PropertyChangeListener propertyChangeListener0 = mock(PropertyChangeListener.class, new ViolatedAssumptionAnswer());
      PropertyChangeListenerProxy propertyChangeListenerProxy0 = new PropertyChangeListenerProxy((String) null, propertyChangeListener0);
      assertNotNull(propertyChangeListenerProxy0);
      assertNull(propertyChangeListenerProxy0.getPropertyName());
      
      homeLight3.addPropertyChangeListener(propertyChangeListenerProxy0);
      assertNotSame(homeLight3, homeLight0);
      assertNotSame(homeLight3, homeLight1);
      assertNotSame(homeLight3, homeLight2);
      assertNotSame(homeLight0, homeLight1);
      assertNotSame(homeLight0, homeLight3);
      assertNotSame(homeLight0, homeLight2);
      assertNotSame(homeLight2, homeLight0);
      assertNotSame(homeLight2, homeLight3);
      assertNotSame(homeLight2, homeLight1);
      assertFalse(homeLight3.equals((Object)homeLight0));
      assertFalse(homeLight3.equals((Object)homeLight1));
      assertFalse(homeLight3.equals((Object)homeLight2));
      assertFalse(homeLight0.equals((Object)homeLight1));
      assertFalse(homeLight0.equals((Object)homeLight3));
      assertFalse(homeLight0.equals((Object)homeLight2));
      assertFalse(homeLight2.equals((Object)homeLight0));
      assertFalse(homeLight2.equals((Object)homeLight3));
      assertFalse(homeLight2.equals((Object)homeLight1));
      assertFalse(homeLight3.isNameVisible());
      assertFalse(homeLight3.isDeformable());
      assertEquals(0.0F, homeLight3.getWidth(), 0.01F);
      assertEquals("Invalid URL base for JAR entry", homeLight3.getName());
      assertTrue(homeLight3.isVisible());
      assertNull(homeLight3.getCurrency());
      assertFalse(homeLight3.isModelMirrored());
      assertFalse(homeLight3.isBackFaceShown());
      assertFalse(homeLight3.isResizable());
      assertEquals(0.0F, homeLight3.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight3.getX(), 0.01F);
      assertFalse(homeLight3.isDoorOrWindow());
      assertNull(homeLight3.getShininess());
      assertEquals(0.0F, homeLight3.getAngle(), 0.01F);
      assertEquals(0.0F, homeLight3.getElevation(), 0.01F);
      assertFalse(homeLight3.isTexturable());
      assertEquals(0.0F, homeLight3.getY(), 0.01F);
      assertEquals(0.0F, homeLight3.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeLight3.getDepth(), 0.01F);
      assertNull(homeLight3.getDescription());
      assertEquals(0.5F, homeLight3.getPower(), 0.01F);
      assertNull(homeLight3.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight3.getNameAngle(), 0.01F);
      assertFalse(homeLight3.isMovable());
      assertEquals(0.0F, homeLight3.getHeight(), 0.01F);
      assertNull(homeLight3.getColor());
      assertNull(homeLight3.getCatalogId());
      assertEquals(0.0F, homeLight3.getNameYOffset(), 0.01F);
      assertNull(propertyChangeListenerProxy0.getPropertyName());
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertTrue(homeLight0.isVisible());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertNull(homeLight0.getCurrency());
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertNull(homeLight0.getShininess());
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertFalse(homeLight0.isMovable());
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertFalse(homeLight0.isDeformable());
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertFalse(homeLight0.isResizable());
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertNull(homeLight0.getDescription());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertNull(homeLight0.getCatalogId());
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertFalse(homeLight0.isTexturable());
      assertFalse(homeLight0.isDoorOrWindow());
      assertFalse(homeLight0.isModelMirrored());
      assertNull(homeLight0.getColor());
      assertNull(homeLight0.getName());
      assertFalse(homeLight0.isNameVisible());
      assertFalse(homeLight0.isBackFaceShown());
      assertNull(homeLight2.getShininess());
      assertNull(homeLight2.getCatalogId());
      assertEquals(0.0F, homeLight2.getDepth(), 0.01F);
      assertNull(homeLight2.getStaircaseCutOutShape());
      assertFalse(homeLight2.isResizable());
      assertEquals(0.0F, homeLight2.getNameAngle(), 0.01F);
      assertEquals("Invalid URL base for JAR entry", homeLight2.getName());
      assertEquals(0.0F, homeLight2.getNameYOffset(), 0.01F);
      assertEquals(0.0F, homeLight2.getHeight(), 0.01F);
      assertFalse(homeLight2.isMovable());
      assertEquals(0.5F, homeLight2.getPower(), 0.01F);
      assertNull(homeLight2.getCurrency());
      assertFalse(homeLight2.isBackFaceShown());
      assertFalse(homeLight2.isModelMirrored());
      assertEquals(0.0F, homeLight2.getX(), 0.01F);
      assertEquals(0.0F, homeLight2.getY(), 0.01F);
      assertNull(homeLight2.getColor());
      assertFalse(homeLight2.isNameVisible());
      assertFalse(homeLight2.isDeformable());
      assertTrue(homeLight2.isVisible());
      assertEquals(0.0F, homeLight2.getWidth(), 0.01F);
      assertEquals(0.0F, homeLight2.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeLight2.getGroundElevation(), 0.01F);
      assertFalse(homeLight2.isTexturable());
      assertEquals(0.0F, homeLight2.getAngle(), 0.01F);
      assertNull(homeLight2.getDescription());
      assertEquals(0.0F, homeLight2.getElevation(), 0.01F);
      assertFalse(homeLight2.isDoorOrWindow());
      
      homeLight3.setDescription("");
      assertNotSame(homeLight3, homeLight0);
      assertNotSame(homeLight3, homeLight1);
      assertNotSame(homeLight3, homeLight2);
      assertNotSame(homeLight0, homeLight1);
      assertNotSame(homeLight0, homeLight3);
      assertNotSame(homeLight0, homeLight2);
      assertNotSame(homeLight2, homeLight0);
      assertNotSame(homeLight2, homeLight3);
      assertNotSame(homeLight2, homeLight1);
      assertFalse(homeLight3.equals((Object)homeLight0));
      assertFalse(homeLight3.equals((Object)homeLight1));
      assertFalse(homeLight3.equals((Object)homeLight2));
      assertFalse(homeLight0.equals((Object)homeLight1));
      assertFalse(homeLight0.equals((Object)homeLight3));
      assertFalse(homeLight0.equals((Object)homeLight2));
      assertFalse(homeLight2.equals((Object)homeLight0));
      assertFalse(homeLight2.equals((Object)homeLight3));
      assertFalse(homeLight2.equals((Object)homeLight1));
      assertFalse(homeLight3.isNameVisible());
      assertFalse(homeLight3.isDeformable());
      assertEquals(0.0F, homeLight3.getWidth(), 0.01F);
      assertEquals("Invalid URL base for JAR entry", homeLight3.getName());
      assertTrue(homeLight3.isVisible());
      assertNull(homeLight3.getCurrency());
      assertFalse(homeLight3.isModelMirrored());
      assertFalse(homeLight3.isBackFaceShown());
      assertFalse(homeLight3.isResizable());
      assertEquals(0.0F, homeLight3.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight3.getX(), 0.01F);
      assertFalse(homeLight3.isDoorOrWindow());
      assertNull(homeLight3.getShininess());
      assertEquals(0.0F, homeLight3.getAngle(), 0.01F);
      assertEquals(0.0F, homeLight3.getElevation(), 0.01F);
      assertFalse(homeLight3.isTexturable());
      assertEquals(0.0F, homeLight3.getY(), 0.01F);
      assertEquals(0.0F, homeLight3.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeLight3.getDepth(), 0.01F);
      assertEquals("", homeLight3.getDescription());
      assertEquals(0.5F, homeLight3.getPower(), 0.01F);
      assertNull(homeLight3.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight3.getNameAngle(), 0.01F);
      assertFalse(homeLight3.isMovable());
      assertEquals(0.0F, homeLight3.getHeight(), 0.01F);
      assertNull(homeLight3.getColor());
      assertNull(homeLight3.getCatalogId());
      assertEquals(0.0F, homeLight3.getNameYOffset(), 0.01F);
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertTrue(homeLight0.isVisible());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertNull(homeLight0.getCurrency());
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertNull(homeLight0.getShininess());
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertFalse(homeLight0.isMovable());
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertFalse(homeLight0.isDeformable());
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertFalse(homeLight0.isResizable());
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertNull(homeLight0.getDescription());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertNull(homeLight0.getCatalogId());
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertFalse(homeLight0.isTexturable());
      assertFalse(homeLight0.isDoorOrWindow());
      assertFalse(homeLight0.isModelMirrored());
      assertNull(homeLight0.getColor());
      assertNull(homeLight0.getName());
      assertFalse(homeLight0.isNameVisible());
      assertFalse(homeLight0.isBackFaceShown());
      assertNull(homeLight2.getShininess());
      assertNull(homeLight2.getCatalogId());
      assertEquals(0.0F, homeLight2.getDepth(), 0.01F);
      assertNull(homeLight2.getStaircaseCutOutShape());
      assertFalse(homeLight2.isResizable());
      assertEquals(0.0F, homeLight2.getNameAngle(), 0.01F);
      assertEquals("Invalid URL base for JAR entry", homeLight2.getName());
      assertEquals(0.0F, homeLight2.getNameYOffset(), 0.01F);
      assertEquals(0.0F, homeLight2.getHeight(), 0.01F);
      assertFalse(homeLight2.isMovable());
      assertEquals(0.5F, homeLight2.getPower(), 0.01F);
      assertNull(homeLight2.getCurrency());
      assertFalse(homeLight2.isBackFaceShown());
      assertFalse(homeLight2.isModelMirrored());
      assertEquals(0.0F, homeLight2.getX(), 0.01F);
      assertEquals(0.0F, homeLight2.getY(), 0.01F);
      assertNull(homeLight2.getColor());
      assertFalse(homeLight2.isNameVisible());
      assertFalse(homeLight2.isDeformable());
      assertTrue(homeLight2.isVisible());
      assertEquals(0.0F, homeLight2.getWidth(), 0.01F);
      assertEquals(0.0F, homeLight2.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeLight2.getGroundElevation(), 0.01F);
      assertFalse(homeLight2.isTexturable());
      assertEquals(0.0F, homeLight2.getAngle(), 0.01F);
      assertNull(homeLight2.getDescription());
      assertEquals(0.0F, homeLight2.getElevation(), 0.01F);
      assertFalse(homeLight2.isDoorOrWindow());
      
      String string1 = homeLight1.getDescription();
      assertNull(string1);
      assertNotSame(homeLight0, homeLight1);
      assertNotSame(homeLight0, homeLight3);
      assertNotSame(homeLight0, homeLight2);
      assertNotSame(homeLight1, homeLight3);
      assertNotSame(homeLight1, homeLight0);
      assertNotSame(homeLight1, homeLight2);
      assertFalse(homeLight0.equals((Object)homeLight1));
      assertFalse(homeLight0.equals((Object)homeLight3));
      assertFalse(homeLight0.equals((Object)homeLight2));
      assertFalse(homeLight1.equals((Object)homeLight3));
      assertFalse(homeLight1.equals((Object)homeLight0));
      assertFalse(homeLight1.equals((Object)homeLight2));
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertTrue(homeLight0.isVisible());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertNull(homeLight0.getCurrency());
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertNull(homeLight0.getShininess());
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertFalse(homeLight0.isMovable());
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertFalse(homeLight0.isDeformable());
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertFalse(homeLight0.isResizable());
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertNull(homeLight0.getDescription());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertNull(homeLight0.getCatalogId());
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertFalse(homeLight0.isTexturable());
      assertFalse(homeLight0.isDoorOrWindow());
      assertFalse(homeLight0.isModelMirrored());
      assertNull(homeLight0.getColor());
      assertNull(homeLight0.getName());
      assertFalse(homeLight0.isNameVisible());
      assertFalse(homeLight0.isBackFaceShown());
      assertNull(homeLight1.getStaircaseCutOutShape());
      assertNull(homeLight1.getCatalogId());
      assertNull(homeLight1.getName());
      assertEquals(0.0F, homeLight1.getNameXOffset(), 0.01F);
      assertFalse(homeLight1.isMovable());
      assertEquals(0.0F, homeLight1.getHeight(), 0.01F);
      assertEquals(0.5F, homeLight1.getPower(), 0.01F);
      assertNull(homeLight1.getDescription());
      assertEquals(0.0F, homeLight1.getElevation(), 0.01F);
      assertFalse(homeLight1.isTexturable());
      assertEquals(0.0F, homeLight1.getGroundElevation(), 0.01F);
      assertEquals(0.39F, homeLight1.getNameYOffset(), 0.01F);
      assertNull(homeLight1.getShininess());
      assertTrue(homeLight1.isVisible());
      assertEquals(0.0F, homeLight1.getDepth(), 0.01F);
      assertFalse(homeLight1.isResizable());
      assertEquals(0.0F, homeLight1.getNameAngle(), 0.01F);
      assertFalse(homeLight1.isDeformable());
      assertFalse(homeLight1.isNameVisible());
      assertNull(homeLight1.getColor());
      assertEquals(0.0F, homeLight1.getX(), 0.01F);
      assertEquals(0.0F, homeLight1.getY(), 0.01F);
      assertNull(homeLight1.getCurrency());
      assertEquals(0.0F, homeLight1.getWidth(), 0.01F);
      assertFalse(homeLight1.isDoorOrWindow());
      assertEquals(1.3008882F, homeLight1.getAngle(), 0.01F);
      assertFalse(homeLight1.isBackFaceShown());
      assertFalse(homeLight1.isModelMirrored());
      
      boolean boolean2 = homeLight3.isNameCenterPointAt(700.4569F, 0.5F, 455.247F);
      assertNotSame(homeLight3, homeLight0);
      assertNotSame(homeLight3, homeLight1);
      assertNotSame(homeLight3, homeLight2);
      assertNotSame(homeLight0, homeLight1);
      assertNotSame(homeLight0, homeLight3);
      assertNotSame(homeLight0, homeLight2);
      assertNotSame(homeLight2, homeLight0);
      assertNotSame(homeLight2, homeLight3);
      assertNotSame(homeLight2, homeLight1);
      assertFalse(homeLight3.equals((Object)homeLight0));
      assertFalse(homeLight3.equals((Object)homeLight1));
      assertFalse(homeLight3.equals((Object)homeLight2));
      assertFalse(homeLight0.equals((Object)homeLight1));
      assertFalse(homeLight0.equals((Object)homeLight3));
      assertFalse(homeLight0.equals((Object)homeLight2));
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertFalse(homeLight2.equals((Object)homeLight0));
      assertFalse(homeLight2.equals((Object)homeLight3));
      assertFalse(homeLight2.equals((Object)homeLight1));
      assertFalse(boolean2);
      assertFalse(homeLight3.isNameVisible());
      assertFalse(homeLight3.isDeformable());
      assertEquals(0.0F, homeLight3.getWidth(), 0.01F);
      assertEquals("Invalid URL base for JAR entry", homeLight3.getName());
      assertTrue(homeLight3.isVisible());
      assertNull(homeLight3.getCurrency());
      assertFalse(homeLight3.isModelMirrored());
      assertFalse(homeLight3.isBackFaceShown());
      assertFalse(homeLight3.isResizable());
      assertEquals(0.0F, homeLight3.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight3.getX(), 0.01F);
      assertFalse(homeLight3.isDoorOrWindow());
      assertNull(homeLight3.getShininess());
      assertEquals(0.0F, homeLight3.getAngle(), 0.01F);
      assertEquals(0.0F, homeLight3.getElevation(), 0.01F);
      assertFalse(homeLight3.isTexturable());
      assertEquals(0.0F, homeLight3.getY(), 0.01F);
      assertEquals(0.0F, homeLight3.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeLight3.getDepth(), 0.01F);
      assertEquals("", homeLight3.getDescription());
      assertEquals(0.5F, homeLight3.getPower(), 0.01F);
      assertNull(homeLight3.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight3.getNameAngle(), 0.01F);
      assertFalse(homeLight3.isMovable());
      assertEquals(0.0F, homeLight3.getHeight(), 0.01F);
      assertNull(homeLight3.getColor());
      assertNull(homeLight3.getCatalogId());
      assertEquals(0.0F, homeLight3.getNameYOffset(), 0.01F);
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertTrue(homeLight0.isVisible());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertNull(homeLight0.getCurrency());
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertNull(homeLight0.getShininess());
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertFalse(homeLight0.isMovable());
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertFalse(homeLight0.isDeformable());
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertFalse(homeLight0.isResizable());
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertNull(homeLight0.getDescription());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertNull(homeLight0.getCatalogId());
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertFalse(homeLight0.isTexturable());
      assertFalse(homeLight0.isDoorOrWindow());
      assertFalse(homeLight0.isModelMirrored());
      assertNull(homeLight0.getColor());
      assertNull(homeLight0.getName());
      assertFalse(homeLight0.isNameVisible());
      assertFalse(homeLight0.isBackFaceShown());
      assertNull(homeLight2.getShininess());
      assertNull(homeLight2.getCatalogId());
      assertEquals(0.0F, homeLight2.getDepth(), 0.01F);
      assertNull(homeLight2.getStaircaseCutOutShape());
      assertFalse(homeLight2.isResizable());
      assertEquals(0.0F, homeLight2.getNameAngle(), 0.01F);
      assertEquals("Invalid URL base for JAR entry", homeLight2.getName());
      assertEquals(0.0F, homeLight2.getNameYOffset(), 0.01F);
      assertEquals(0.0F, homeLight2.getHeight(), 0.01F);
      assertFalse(homeLight2.isMovable());
      assertEquals(0.5F, homeLight2.getPower(), 0.01F);
      assertNull(homeLight2.getCurrency());
      assertFalse(homeLight2.isBackFaceShown());
      assertFalse(homeLight2.isModelMirrored());
      assertEquals(0.0F, homeLight2.getX(), 0.01F);
      assertEquals(0.0F, homeLight2.getY(), 0.01F);
      assertNull(homeLight2.getColor());
      assertFalse(homeLight2.isNameVisible());
      assertFalse(homeLight2.isDeformable());
      assertTrue(homeLight2.isVisible());
      assertEquals(0.0F, homeLight2.getWidth(), 0.01F);
      assertEquals(0.0F, homeLight2.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeLight2.getGroundElevation(), 0.01F);
      assertFalse(homeLight2.isTexturable());
      assertEquals(0.0F, homeLight2.getAngle(), 0.01F);
      assertNull(homeLight2.getDescription());
      assertEquals(0.0F, homeLight2.getElevation(), 0.01F);
      assertFalse(homeLight2.isDoorOrWindow());
      
      TextStyle textStyle0 = homeLight0.getNameStyle();
      assertNull(textStyle0);
      assertNotSame(homeLight0, homeLight1);
      assertNotSame(homeLight0, homeLight3);
      assertNotSame(homeLight0, homeLight2);
      assertFalse(homeLight0.equals((Object)homeLight1));
      assertFalse(homeLight0.equals((Object)homeLight3));
      assertFalse(homeLight0.equals((Object)homeLight2));
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertTrue(homeLight0.isVisible());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertNull(homeLight0.getCurrency());
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertNull(homeLight0.getShininess());
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertFalse(homeLight0.isMovable());
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertFalse(homeLight0.isDeformable());
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertFalse(homeLight0.isResizable());
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertNull(homeLight0.getDescription());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertNull(homeLight0.getCatalogId());
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertFalse(homeLight0.isTexturable());
      assertFalse(homeLight0.isDoorOrWindow());
      assertFalse(homeLight0.isModelMirrored());
      assertNull(homeLight0.getColor());
      assertNull(homeLight0.getName());
      assertFalse(homeLight0.isNameVisible());
      assertFalse(homeLight0.isBackFaceShown());
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      Light light0 = mock(Light.class, new ViolatedAssumptionAnswer());
      doReturn((LightSource[]) null).when(light0).getLightSources();
      doReturn((Integer) null).when(light0).getColor();
      doReturn((String) null).when(light0).getCurrency();
      doReturn(0.0F).when(light0).getDepth();
      doReturn((String) null).when(light0).getDescription();
      doReturn(0.0F).when(light0).getElevation();
      doReturn(0.0F).when(light0).getHeight();
      doReturn((Content) null).when(light0).getIcon();
      doReturn((Content) null).when(light0).getModel();
      doReturn((float[][]) null).when(light0).getModelRotation();
      doReturn((String) null).when(light0).getName();
      doReturn((Content) null).when(light0).getPlanIcon();
      doReturn((BigDecimal) null).when(light0).getPrice();
      doReturn((String) null).when(light0).getStaircaseCutOutShape();
      doReturn((BigDecimal) null).when(light0).getValueAddedTaxPercentage();
      doReturn(0.0F).when(light0).getWidth();
      doReturn(false).when(light0).isBackFaceShown();
      doReturn(false).when(light0).isDeformable();
      doReturn(false).when(light0).isDoorOrWindow();
      doReturn(false).when(light0).isMovable();
      doReturn(false).when(light0).isResizable();
      doReturn(false).when(light0).isTexturable();
      HomeLight homeLight0 = new HomeLight(light0);
      assertNotNull(homeLight0);
      assertNull(homeLight0.getShininess());
      assertNull(homeLight0.getCatalogId());
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertFalse(homeLight0.isResizable());
      assertNull(homeLight0.getName());
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertFalse(homeLight0.isMovable());
      assertTrue(homeLight0.isVisible());
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertNull(homeLight0.getDescription());
      assertFalse(homeLight0.isTexturable());
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertFalse(homeLight0.isDeformable());
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertFalse(homeLight0.isModelMirrored());
      assertNull(homeLight0.getColor());
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      assertFalse(homeLight0.isBackFaceShown());
      assertFalse(homeLight0.isNameVisible());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertNull(homeLight0.getCurrency());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      
      homeLight0.setY((-1.0F));
      assertNull(homeLight0.getShininess());
      assertNull(homeLight0.getCatalogId());
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertFalse(homeLight0.isResizable());
      assertNull(homeLight0.getName());
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertFalse(homeLight0.isMovable());
      assertTrue(homeLight0.isVisible());
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertNull(homeLight0.getDescription());
      assertFalse(homeLight0.isTexturable());
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertFalse(homeLight0.isDeformable());
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertFalse(homeLight0.isModelMirrored());
      assertNull(homeLight0.getColor());
      assertEquals((-1.0F), homeLight0.getY(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      assertFalse(homeLight0.isBackFaceShown());
      assertFalse(homeLight0.isNameVisible());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertNull(homeLight0.getCurrency());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      
      int int0 = Float.compare(254.82954F, 254.82954F);
      assertEquals(0, int0);
      
      Level level0 = homeLight0.getLevel();
      assertNull(level0);
      assertNull(homeLight0.getShininess());
      assertNull(homeLight0.getCatalogId());
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertFalse(homeLight0.isResizable());
      assertNull(homeLight0.getName());
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertFalse(homeLight0.isMovable());
      assertTrue(homeLight0.isVisible());
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertNull(homeLight0.getDescription());
      assertFalse(homeLight0.isTexturable());
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertFalse(homeLight0.isDeformable());
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertFalse(homeLight0.isModelMirrored());
      assertNull(homeLight0.getColor());
      assertEquals((-1.0F), homeLight0.getY(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      assertFalse(homeLight0.isBackFaceShown());
      assertFalse(homeLight0.isNameVisible());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertNull(homeLight0.getCurrency());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      
      homeLight0.setX(0);
      assertNull(homeLight0.getShininess());
      assertNull(homeLight0.getCatalogId());
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertFalse(homeLight0.isResizable());
      assertNull(homeLight0.getName());
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertFalse(homeLight0.isMovable());
      assertTrue(homeLight0.isVisible());
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertNull(homeLight0.getDescription());
      assertFalse(homeLight0.isTexturable());
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertFalse(homeLight0.isDeformable());
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertFalse(homeLight0.isModelMirrored());
      assertNull(homeLight0.getColor());
      assertEquals((-1.0F), homeLight0.getY(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      assertFalse(homeLight0.isBackFaceShown());
      assertFalse(homeLight0.isNameVisible());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertNull(homeLight0.getCurrency());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      
      boolean boolean0 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "COLOR");
      assertFalse(boolean0);
      
      int int1 = Float.floatToIntBits((-1836.9042F));
      assertFalse(int1 == int0);
      assertEquals((-991585041), int1);
      
      Level level1 = homeLight0.getLevel();
      assertNull(level1);
      assertNull(homeLight0.getShininess());
      assertNull(homeLight0.getCatalogId());
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertFalse(homeLight0.isResizable());
      assertNull(homeLight0.getName());
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertFalse(homeLight0.isMovable());
      assertTrue(homeLight0.isVisible());
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertNull(homeLight0.getDescription());
      assertFalse(homeLight0.isTexturable());
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertFalse(homeLight0.isDeformable());
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertFalse(homeLight0.isModelMirrored());
      assertNull(homeLight0.getColor());
      assertEquals((-1.0F), homeLight0.getY(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      assertFalse(homeLight0.isBackFaceShown());
      assertFalse(homeLight0.isNameVisible());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertNull(homeLight0.getCurrency());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      
      homeLight0.setName("");
      assertNull(homeLight0.getShininess());
      assertNull(homeLight0.getCatalogId());
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertFalse(homeLight0.isResizable());
      assertEquals("", homeLight0.getName());
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertFalse(homeLight0.isMovable());
      assertTrue(homeLight0.isVisible());
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertNull(homeLight0.getDescription());
      assertFalse(homeLight0.isTexturable());
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertFalse(homeLight0.isDeformable());
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertFalse(homeLight0.isModelMirrored());
      assertNull(homeLight0.getColor());
      assertEquals((-1.0F), homeLight0.getY(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      assertFalse(homeLight0.isBackFaceShown());
      assertFalse(homeLight0.isNameVisible());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertNull(homeLight0.getCurrency());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      
      Float float0 = homeLight0.getShininess();
      assertNull(float0);
      assertNull(homeLight0.getShininess());
      assertNull(homeLight0.getCatalogId());
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertFalse(homeLight0.isResizable());
      assertEquals("", homeLight0.getName());
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertFalse(homeLight0.isMovable());
      assertTrue(homeLight0.isVisible());
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertNull(homeLight0.getDescription());
      assertFalse(homeLight0.isTexturable());
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertFalse(homeLight0.isDeformable());
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertFalse(homeLight0.isModelMirrored());
      assertNull(homeLight0.getColor());
      assertEquals((-1.0F), homeLight0.getY(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      assertFalse(homeLight0.isBackFaceShown());
      assertFalse(homeLight0.isNameVisible());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertNull(homeLight0.getCurrency());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      
      HomeLight homeLight1 = null;
      try {
        homeLight1 = new HomeLight(homeLight0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.eteks.sweethome3d.model.HomePieceOfFurniture", e);
      }
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      Light light0 = mock(Light.class, new ViolatedAssumptionAnswer());
      doReturn((LightSource[]) null).when(light0).getLightSources();
      doReturn((Integer) null).when(light0).getColor();
      doReturn((String) null).when(light0).getCurrency();
      doReturn(0.0F).when(light0).getDepth();
      doReturn((String) null).when(light0).getDescription();
      doReturn(0.0F).when(light0).getElevation();
      doReturn(0.0F).when(light0).getHeight();
      doReturn((Content) null).when(light0).getIcon();
      doReturn((Content) null).when(light0).getModel();
      doReturn((float[][]) null).when(light0).getModelRotation();
      doReturn((String) null).when(light0).getName();
      doReturn((Content) null).when(light0).getPlanIcon();
      doReturn((BigDecimal) null).when(light0).getPrice();
      doReturn((String) null).when(light0).getStaircaseCutOutShape();
      doReturn((BigDecimal) null).when(light0).getValueAddedTaxPercentage();
      doReturn(0.0F).when(light0).getWidth();
      doReturn(false).when(light0).isBackFaceShown();
      doReturn(false).when(light0).isDeformable();
      doReturn(false).when(light0).isDoorOrWindow();
      doReturn(false).when(light0).isMovable();
      doReturn(false).when(light0).isResizable();
      doReturn(false).when(light0).isTexturable();
      Integer integer0 = Integer.valueOf((-2369));
      assertNotNull(integer0);
      assertEquals((-2369), (int)integer0);
      
      System.setCurrentTimeMillis((-2369));
      HomeLight homeLight0 = new HomeLight(light0);
      assertNotNull(homeLight0);
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertNull(homeLight0.getDescription());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertNull(homeLight0.getCatalogId());
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertFalse(homeLight0.isTexturable());
      assertNull(homeLight0.getShininess());
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertFalse(homeLight0.isMovable());
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertFalse(homeLight0.isDeformable());
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertFalse(homeLight0.isResizable());
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertTrue(homeLight0.isVisible());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertNull(homeLight0.getCurrency());
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      assertFalse(homeLight0.isModelMirrored());
      assertNull(homeLight0.getColor());
      assertNull(homeLight0.getName());
      assertFalse(homeLight0.isNameVisible());
      assertFalse(homeLight0.isBackFaceShown());
      
      boolean boolean1 = homeLight0.isBackFaceShown();
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertNull(homeLight0.getDescription());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertNull(homeLight0.getCatalogId());
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertFalse(homeLight0.isTexturable());
      assertNull(homeLight0.getShininess());
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertFalse(homeLight0.isMovable());
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertFalse(homeLight0.isDeformable());
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertFalse(homeLight0.isResizable());
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertTrue(homeLight0.isVisible());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertNull(homeLight0.getCurrency());
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      assertFalse(homeLight0.isModelMirrored());
      assertNull(homeLight0.getColor());
      assertNull(homeLight0.getName());
      assertFalse(homeLight0.isNameVisible());
      assertFalse(homeLight0.isBackFaceShown());
      
      homeLight0.setMovable(true);
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertNull(homeLight0.getDescription());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertNull(homeLight0.getCatalogId());
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertFalse(homeLight0.isTexturable());
      assertTrue(homeLight0.isMovable());
      assertNull(homeLight0.getShininess());
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertFalse(homeLight0.isDeformable());
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertFalse(homeLight0.isResizable());
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertTrue(homeLight0.isVisible());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertNull(homeLight0.getCurrency());
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      assertFalse(homeLight0.isModelMirrored());
      assertNull(homeLight0.getColor());
      assertNull(homeLight0.getName());
      assertFalse(homeLight0.isNameVisible());
      assertFalse(homeLight0.isBackFaceShown());
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      Light light0 = mock(Light.class, new ViolatedAssumptionAnswer());
      doReturn((LightSource[]) null).when(light0).getLightSources();
      doReturn((Integer) null).when(light0).getColor();
      doReturn((String) null).when(light0).getCurrency();
      doReturn(0.0F).when(light0).getDepth();
      doReturn((String) null).when(light0).getDescription();
      doReturn(0.0F).when(light0).getElevation();
      doReturn(0.0F).when(light0).getHeight();
      doReturn((Content) null).when(light0).getIcon();
      doReturn((Content) null).when(light0).getModel();
      doReturn((float[][]) null).when(light0).getModelRotation();
      doReturn((String) null).when(light0).getName();
      doReturn((Content) null).when(light0).getPlanIcon();
      doReturn((BigDecimal) null).when(light0).getPrice();
      doReturn((String) null).when(light0).getStaircaseCutOutShape();
      doReturn((BigDecimal) null).when(light0).getValueAddedTaxPercentage();
      doReturn(0.0F).when(light0).getWidth();
      doReturn(false).when(light0).isBackFaceShown();
      doReturn(false).when(light0).isDeformable();
      doReturn(false).when(light0).isDoorOrWindow();
      doReturn(false).when(light0).isMovable();
      doReturn(false).when(light0).isResizable();
      doReturn(false).when(light0).isTexturable();
      HomeLight homeLight0 = new HomeLight(light0);
      assertNotNull(homeLight0);
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertFalse(homeLight0.isTexturable());
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertNull(homeLight0.getName());
      assertNull(homeLight0.getDescription());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertFalse(homeLight0.isResizable());
      assertFalse(homeLight0.isDeformable());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertNull(homeLight0.getShininess());
      assertTrue(homeLight0.isVisible());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertFalse(homeLight0.isMovable());
      assertFalse(homeLight0.isNameVisible());
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertNull(homeLight0.getCurrency());
      assertFalse(homeLight0.isBackFaceShown());
      assertFalse(homeLight0.isModelMirrored());
      assertNull(homeLight0.getColor());
      assertNull(homeLight0.getCatalogId());
      
      homeLight0.setElevation((-1.0F));
      assertEquals((-1.0F), homeLight0.getElevation(), 0.01F);
      assertFalse(homeLight0.isTexturable());
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertNull(homeLight0.getName());
      assertNull(homeLight0.getDescription());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertEquals((-1.0F), homeLight0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertFalse(homeLight0.isResizable());
      assertFalse(homeLight0.isDeformable());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertNull(homeLight0.getShininess());
      assertTrue(homeLight0.isVisible());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertFalse(homeLight0.isMovable());
      assertFalse(homeLight0.isNameVisible());
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertNull(homeLight0.getCurrency());
      assertFalse(homeLight0.isBackFaceShown());
      assertFalse(homeLight0.isModelMirrored());
      assertNull(homeLight0.getColor());
      assertNull(homeLight0.getCatalogId());
      
      boolean boolean1 = homeLight0.isBottomRightPointAt((-1.0F), (-1.0F), (-1.0F));
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      assertEquals((-1.0F), homeLight0.getElevation(), 0.01F);
      assertFalse(homeLight0.isTexturable());
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertNull(homeLight0.getName());
      assertNull(homeLight0.getDescription());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertEquals((-1.0F), homeLight0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertFalse(homeLight0.isResizable());
      assertFalse(homeLight0.isDeformable());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertNull(homeLight0.getShininess());
      assertTrue(homeLight0.isVisible());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertFalse(homeLight0.isMovable());
      assertFalse(homeLight0.isNameVisible());
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertNull(homeLight0.getCurrency());
      assertFalse(homeLight0.isBackFaceShown());
      assertFalse(homeLight0.isModelMirrored());
      assertNull(homeLight0.getColor());
      assertNull(homeLight0.getCatalogId());
      
      int int0 = Float.floatToIntBits((byte) (-32));
      assertEquals((-1040187392), int0);
      
      HomeLight homeLight1 = homeLight0.clone();
      assertNotNull(homeLight1);
      assertNotSame(homeLight0, homeLight1);
      assertNotSame(homeLight1, homeLight0);
      assertFalse(homeLight1.equals((Object)homeLight0));
      assertEquals((-1.0F), homeLight0.getElevation(), 0.01F);
      assertFalse(homeLight0.isTexturable());
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertNull(homeLight0.getName());
      assertNull(homeLight0.getDescription());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertEquals((-1.0F), homeLight0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertFalse(homeLight0.isResizable());
      assertFalse(homeLight0.isDeformable());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertNull(homeLight0.getShininess());
      assertTrue(homeLight0.isVisible());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertFalse(homeLight0.isMovable());
      assertFalse(homeLight0.isNameVisible());
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertNull(homeLight0.getCurrency());
      assertFalse(homeLight0.isBackFaceShown());
      assertFalse(homeLight0.isModelMirrored());
      assertNull(homeLight0.getColor());
      assertNull(homeLight0.getCatalogId());
      assertTrue(homeLight1.isVisible());
      assertEquals(0.0F, homeLight1.getWidth(), 0.01F);
      assertEquals(0.0F, homeLight1.getNameYOffset(), 0.01F);
      assertEquals(0.0F, homeLight1.getHeight(), 0.01F);
      assertFalse(homeLight1.isNameVisible());
      assertNull(homeLight1.getCurrency());
      assertFalse(homeLight1.isMovable());
      assertNull(homeLight1.getShininess());
      assertFalse(homeLight1.isDoorOrWindow());
      assertEquals(0.0F, homeLight1.getX(), 0.01F);
      assertEquals(0.0F, homeLight1.getY(), 0.01F);
      assertFalse(homeLight1.isResizable());
      assertEquals(0.0F, homeLight1.getDepth(), 0.01F);
      assertFalse(homeLight1.isDeformable());
      assertEquals((-1.0F), homeLight1.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight1.getNameAngle(), 0.01F);
      assertNull(homeLight1.getStaircaseCutOutShape());
      assertNull(homeLight1.getDescription());
      assertEquals((-1.0F), homeLight1.getElevation(), 0.01F);
      assertEquals(0.0F, homeLight1.getNameXOffset(), 0.01F);
      assertFalse(homeLight1.isTexturable());
      assertEquals(0.0F, homeLight1.getAngle(), 0.01F);
      assertNull(homeLight1.getName());
      assertEquals(0.5F, homeLight1.getPower(), 0.01F);
      assertFalse(homeLight1.isBackFaceShown());
      assertFalse(homeLight1.isModelMirrored());
      assertNull(homeLight1.getColor());
      assertNull(homeLight1.getCatalogId());
      
      Level level0 = homeLight1.getLevel();
      assertNull(level0);
      assertNotSame(homeLight0, homeLight1);
      assertNotSame(homeLight1, homeLight0);
      assertFalse(homeLight0.equals((Object)homeLight1));
      assertFalse(homeLight1.equals((Object)homeLight0));
      assertEquals((-1.0F), homeLight0.getElevation(), 0.01F);
      assertFalse(homeLight0.isTexturable());
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertNull(homeLight0.getName());
      assertNull(homeLight0.getDescription());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertEquals((-1.0F), homeLight0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertFalse(homeLight0.isResizable());
      assertFalse(homeLight0.isDeformable());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertNull(homeLight0.getShininess());
      assertTrue(homeLight0.isVisible());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertFalse(homeLight0.isMovable());
      assertFalse(homeLight0.isNameVisible());
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertNull(homeLight0.getCurrency());
      assertFalse(homeLight0.isBackFaceShown());
      assertFalse(homeLight0.isModelMirrored());
      assertNull(homeLight0.getColor());
      assertNull(homeLight0.getCatalogId());
      assertTrue(homeLight1.isVisible());
      assertEquals(0.0F, homeLight1.getWidth(), 0.01F);
      assertEquals(0.0F, homeLight1.getNameYOffset(), 0.01F);
      assertEquals(0.0F, homeLight1.getHeight(), 0.01F);
      assertFalse(homeLight1.isNameVisible());
      assertNull(homeLight1.getCurrency());
      assertFalse(homeLight1.isMovable());
      assertNull(homeLight1.getShininess());
      assertFalse(homeLight1.isDoorOrWindow());
      assertEquals(0.0F, homeLight1.getX(), 0.01F);
      assertEquals(0.0F, homeLight1.getY(), 0.01F);
      assertFalse(homeLight1.isResizable());
      assertEquals(0.0F, homeLight1.getDepth(), 0.01F);
      assertFalse(homeLight1.isDeformable());
      assertEquals((-1.0F), homeLight1.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight1.getNameAngle(), 0.01F);
      assertNull(homeLight1.getStaircaseCutOutShape());
      assertNull(homeLight1.getDescription());
      assertEquals((-1.0F), homeLight1.getElevation(), 0.01F);
      assertEquals(0.0F, homeLight1.getNameXOffset(), 0.01F);
      assertFalse(homeLight1.isTexturable());
      assertEquals(0.0F, homeLight1.getAngle(), 0.01F);
      assertNull(homeLight1.getName());
      assertEquals(0.5F, homeLight1.getPower(), 0.01F);
      assertFalse(homeLight1.isBackFaceShown());
      assertFalse(homeLight1.isModelMirrored());
      assertNull(homeLight1.getColor());
      assertNull(homeLight1.getCatalogId());
      
      HomeLight homeLight2 = homeLight1.clone();
      assertNotNull(homeLight2);
      assertNotSame(homeLight0, homeLight2);
      assertNotSame(homeLight0, homeLight1);
      assertNotSame(homeLight1, homeLight2);
      assertNotSame(homeLight1, homeLight0);
      assertNotSame(homeLight2, homeLight0);
      assertNotSame(homeLight2, homeLight1);
      assertFalse(homeLight0.equals((Object)homeLight1));
      assertFalse(homeLight1.equals((Object)homeLight0));
      assertFalse(homeLight2.equals((Object)homeLight0));
      assertFalse(homeLight2.equals((Object)homeLight1));
      assertEquals((-1.0F), homeLight0.getElevation(), 0.01F);
      assertFalse(homeLight0.isTexturable());
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertNull(homeLight0.getName());
      assertNull(homeLight0.getDescription());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertEquals((-1.0F), homeLight0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertFalse(homeLight0.isResizable());
      assertFalse(homeLight0.isDeformable());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertNull(homeLight0.getShininess());
      assertTrue(homeLight0.isVisible());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertFalse(homeLight0.isMovable());
      assertFalse(homeLight0.isNameVisible());
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertNull(homeLight0.getCurrency());
      assertFalse(homeLight0.isBackFaceShown());
      assertFalse(homeLight0.isModelMirrored());
      assertNull(homeLight0.getColor());
      assertNull(homeLight0.getCatalogId());
      assertTrue(homeLight1.isVisible());
      assertEquals(0.0F, homeLight1.getWidth(), 0.01F);
      assertEquals(0.0F, homeLight1.getNameYOffset(), 0.01F);
      assertEquals(0.0F, homeLight1.getHeight(), 0.01F);
      assertFalse(homeLight1.isNameVisible());
      assertNull(homeLight1.getCurrency());
      assertFalse(homeLight1.isMovable());
      assertNull(homeLight1.getShininess());
      assertFalse(homeLight1.isDoorOrWindow());
      assertEquals(0.0F, homeLight1.getX(), 0.01F);
      assertEquals(0.0F, homeLight1.getY(), 0.01F);
      assertFalse(homeLight1.isResizable());
      assertEquals(0.0F, homeLight1.getDepth(), 0.01F);
      assertFalse(homeLight1.isDeformable());
      assertEquals((-1.0F), homeLight1.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight1.getNameAngle(), 0.01F);
      assertNull(homeLight1.getStaircaseCutOutShape());
      assertNull(homeLight1.getDescription());
      assertEquals((-1.0F), homeLight1.getElevation(), 0.01F);
      assertEquals(0.0F, homeLight1.getNameXOffset(), 0.01F);
      assertFalse(homeLight1.isTexturable());
      assertEquals(0.0F, homeLight1.getAngle(), 0.01F);
      assertNull(homeLight1.getName());
      assertEquals(0.5F, homeLight1.getPower(), 0.01F);
      assertFalse(homeLight1.isBackFaceShown());
      assertFalse(homeLight1.isModelMirrored());
      assertNull(homeLight1.getColor());
      assertNull(homeLight1.getCatalogId());
      assertEquals(0.0F, homeLight2.getAngle(), 0.01F);
      assertEquals((-1.0F), homeLight2.getGroundElevation(), 0.01F);
      assertFalse(homeLight2.isTexturable());
      assertEquals((-1.0F), homeLight2.getElevation(), 0.01F);
      assertFalse(homeLight2.isDoorOrWindow());
      assertNull(homeLight2.getDescription());
      assertEquals(0.0F, homeLight2.getNameAngle(), 0.01F);
      assertNull(homeLight2.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight2.getDepth(), 0.01F);
      assertEquals(0.0F, homeLight2.getNameXOffset(), 0.01F);
      assertFalse(homeLight2.isDeformable());
      assertNull(homeLight2.getShininess());
      assertTrue(homeLight2.isVisible());
      assertEquals(0.0F, homeLight2.getX(), 0.01F);
      assertEquals(0.0F, homeLight2.getY(), 0.01F);
      assertEquals(0.0F, homeLight2.getHeight(), 0.01F);
      assertFalse(homeLight2.isResizable());
      assertEquals(0.0F, homeLight2.getWidth(), 0.01F);
      assertFalse(homeLight2.isMovable());
      assertNull(homeLight2.getCurrency());
      assertEquals(0.5F, homeLight2.getPower(), 0.01F);
      assertNull(homeLight2.getName());
      assertFalse(homeLight2.isNameVisible());
      assertNull(homeLight2.getCatalogId());
      assertFalse(homeLight2.isBackFaceShown());
      assertEquals(0.0F, homeLight2.getNameYOffset(), 0.01F);
      assertFalse(homeLight2.isModelMirrored());
      assertNull(homeLight2.getColor());
      
      homeLight1.setAngle(3309.9814F);
      assertNotSame(homeLight0, homeLight2);
      assertNotSame(homeLight0, homeLight1);
      assertNotSame(homeLight1, homeLight2);
      assertNotSame(homeLight1, homeLight0);
      assertFalse(homeLight0.equals((Object)homeLight2));
      assertFalse(homeLight0.equals((Object)homeLight1));
      assertFalse(homeLight1.equals((Object)homeLight2));
      assertFalse(homeLight1.equals((Object)homeLight0));
      assertEquals((-1.0F), homeLight0.getElevation(), 0.01F);
      assertFalse(homeLight0.isTexturable());
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertNull(homeLight0.getName());
      assertNull(homeLight0.getDescription());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertEquals((-1.0F), homeLight0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertFalse(homeLight0.isResizable());
      assertFalse(homeLight0.isDeformable());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertNull(homeLight0.getShininess());
      assertTrue(homeLight0.isVisible());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertFalse(homeLight0.isMovable());
      assertFalse(homeLight0.isNameVisible());
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertNull(homeLight0.getCurrency());
      assertFalse(homeLight0.isBackFaceShown());
      assertFalse(homeLight0.isModelMirrored());
      assertNull(homeLight0.getColor());
      assertNull(homeLight0.getCatalogId());
      assertTrue(homeLight1.isVisible());
      assertEquals(0.0F, homeLight1.getWidth(), 0.01F);
      assertEquals(0.0F, homeLight1.getNameYOffset(), 0.01F);
      assertEquals(0.0F, homeLight1.getHeight(), 0.01F);
      assertFalse(homeLight1.isNameVisible());
      assertNull(homeLight1.getCurrency());
      assertFalse(homeLight1.isMovable());
      assertNull(homeLight1.getShininess());
      assertFalse(homeLight1.isDoorOrWindow());
      assertEquals(0.0F, homeLight1.getX(), 0.01F);
      assertEquals(0.0F, homeLight1.getY(), 0.01F);
      assertFalse(homeLight1.isResizable());
      assertEquals(0.0F, homeLight1.getDepth(), 0.01F);
      assertFalse(homeLight1.isDeformable());
      assertEquals((-1.0F), homeLight1.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight1.getNameAngle(), 0.01F);
      assertNull(homeLight1.getStaircaseCutOutShape());
      assertNull(homeLight1.getDescription());
      assertEquals((-1.0F), homeLight1.getElevation(), 0.01F);
      assertEquals(0.0F, homeLight1.getNameXOffset(), 0.01F);
      assertFalse(homeLight1.isTexturable());
      assertNull(homeLight1.getName());
      assertEquals(0.5F, homeLight1.getPower(), 0.01F);
      assertFalse(homeLight1.isBackFaceShown());
      assertFalse(homeLight1.isModelMirrored());
      assertNull(homeLight1.getColor());
      assertNull(homeLight1.getCatalogId());
      assertEquals(5.025974F, homeLight1.getAngle(), 0.01F);
      
      homeLight2.setName("temporarySubFolder");
      assertNotSame(homeLight0, homeLight2);
      assertNotSame(homeLight0, homeLight1);
      assertNotSame(homeLight1, homeLight2);
      assertNotSame(homeLight1, homeLight0);
      assertNotSame(homeLight2, homeLight0);
      assertNotSame(homeLight2, homeLight1);
      assertFalse(homeLight0.equals((Object)homeLight2));
      assertFalse(homeLight0.equals((Object)homeLight1));
      assertFalse(homeLight1.equals((Object)homeLight2));
      assertFalse(homeLight1.equals((Object)homeLight0));
      assertFalse(homeLight2.equals((Object)homeLight0));
      assertFalse(homeLight2.equals((Object)homeLight1));
      assertEquals((-1.0F), homeLight0.getElevation(), 0.01F);
      assertFalse(homeLight0.isTexturable());
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertNull(homeLight0.getName());
      assertNull(homeLight0.getDescription());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertEquals((-1.0F), homeLight0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertFalse(homeLight0.isResizable());
      assertFalse(homeLight0.isDeformable());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertNull(homeLight0.getShininess());
      assertTrue(homeLight0.isVisible());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertFalse(homeLight0.isMovable());
      assertFalse(homeLight0.isNameVisible());
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertNull(homeLight0.getCurrency());
      assertFalse(homeLight0.isBackFaceShown());
      assertFalse(homeLight0.isModelMirrored());
      assertNull(homeLight0.getColor());
      assertNull(homeLight0.getCatalogId());
      assertTrue(homeLight1.isVisible());
      assertEquals(0.0F, homeLight1.getWidth(), 0.01F);
      assertEquals(0.0F, homeLight1.getNameYOffset(), 0.01F);
      assertEquals(0.0F, homeLight1.getHeight(), 0.01F);
      assertFalse(homeLight1.isNameVisible());
      assertNull(homeLight1.getCurrency());
      assertFalse(homeLight1.isMovable());
      assertNull(homeLight1.getShininess());
      assertFalse(homeLight1.isDoorOrWindow());
      assertEquals(0.0F, homeLight1.getX(), 0.01F);
      assertEquals(0.0F, homeLight1.getY(), 0.01F);
      assertFalse(homeLight1.isResizable());
      assertEquals(0.0F, homeLight1.getDepth(), 0.01F);
      assertFalse(homeLight1.isDeformable());
      assertEquals((-1.0F), homeLight1.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight1.getNameAngle(), 0.01F);
      assertNull(homeLight1.getStaircaseCutOutShape());
      assertNull(homeLight1.getDescription());
      assertEquals((-1.0F), homeLight1.getElevation(), 0.01F);
      assertEquals(0.0F, homeLight1.getNameXOffset(), 0.01F);
      assertFalse(homeLight1.isTexturable());
      assertNull(homeLight1.getName());
      assertEquals(0.5F, homeLight1.getPower(), 0.01F);
      assertFalse(homeLight1.isBackFaceShown());
      assertFalse(homeLight1.isModelMirrored());
      assertNull(homeLight1.getColor());
      assertNull(homeLight1.getCatalogId());
      assertEquals(5.025974F, homeLight1.getAngle(), 0.01F);
      assertEquals(0.0F, homeLight2.getAngle(), 0.01F);
      assertEquals((-1.0F), homeLight2.getGroundElevation(), 0.01F);
      assertFalse(homeLight2.isTexturable());
      assertEquals((-1.0F), homeLight2.getElevation(), 0.01F);
      assertFalse(homeLight2.isDoorOrWindow());
      assertNull(homeLight2.getDescription());
      assertEquals(0.0F, homeLight2.getNameAngle(), 0.01F);
      assertNull(homeLight2.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight2.getDepth(), 0.01F);
      assertEquals(0.0F, homeLight2.getNameXOffset(), 0.01F);
      assertFalse(homeLight2.isDeformable());
      assertNull(homeLight2.getShininess());
      assertTrue(homeLight2.isVisible());
      assertEquals(0.0F, homeLight2.getX(), 0.01F);
      assertEquals(0.0F, homeLight2.getY(), 0.01F);
      assertEquals(0.0F, homeLight2.getHeight(), 0.01F);
      assertFalse(homeLight2.isResizable());
      assertEquals("temporarySubFolder", homeLight2.getName());
      assertEquals(0.0F, homeLight2.getWidth(), 0.01F);
      assertFalse(homeLight2.isMovable());
      assertNull(homeLight2.getCurrency());
      assertEquals(0.5F, homeLight2.getPower(), 0.01F);
      assertFalse(homeLight2.isNameVisible());
      assertNull(homeLight2.getCatalogId());
      assertFalse(homeLight2.isBackFaceShown());
      assertEquals(0.0F, homeLight2.getNameYOffset(), 0.01F);
      assertFalse(homeLight2.isModelMirrored());
      assertNull(homeLight2.getColor());
      
      homeLight1.setDescription("temporarySubFolder");
      assertNotSame(homeLight0, homeLight2);
      assertNotSame(homeLight0, homeLight1);
      assertNotSame(homeLight1, homeLight2);
      assertNotSame(homeLight1, homeLight0);
      assertFalse(homeLight0.equals((Object)homeLight2));
      assertFalse(homeLight0.equals((Object)homeLight1));
      assertFalse(homeLight1.equals((Object)homeLight2));
      assertFalse(homeLight1.equals((Object)homeLight0));
      assertEquals((-1.0F), homeLight0.getElevation(), 0.01F);
      assertFalse(homeLight0.isTexturable());
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertNull(homeLight0.getName());
      assertNull(homeLight0.getDescription());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertEquals((-1.0F), homeLight0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertFalse(homeLight0.isResizable());
      assertFalse(homeLight0.isDeformable());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertNull(homeLight0.getShininess());
      assertTrue(homeLight0.isVisible());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertFalse(homeLight0.isMovable());
      assertFalse(homeLight0.isNameVisible());
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertNull(homeLight0.getCurrency());
      assertFalse(homeLight0.isBackFaceShown());
      assertFalse(homeLight0.isModelMirrored());
      assertNull(homeLight0.getColor());
      assertNull(homeLight0.getCatalogId());
      assertTrue(homeLight1.isVisible());
      assertEquals(0.0F, homeLight1.getWidth(), 0.01F);
      assertEquals(0.0F, homeLight1.getNameYOffset(), 0.01F);
      assertEquals(0.0F, homeLight1.getHeight(), 0.01F);
      assertFalse(homeLight1.isNameVisible());
      assertNull(homeLight1.getCurrency());
      assertFalse(homeLight1.isMovable());
      assertNull(homeLight1.getShininess());
      assertFalse(homeLight1.isDoorOrWindow());
      assertEquals(0.0F, homeLight1.getX(), 0.01F);
      assertEquals(0.0F, homeLight1.getY(), 0.01F);
      assertFalse(homeLight1.isResizable());
      assertEquals(0.0F, homeLight1.getDepth(), 0.01F);
      assertFalse(homeLight1.isDeformable());
      assertEquals((-1.0F), homeLight1.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight1.getNameAngle(), 0.01F);
      assertNull(homeLight1.getStaircaseCutOutShape());
      assertEquals((-1.0F), homeLight1.getElevation(), 0.01F);
      assertEquals(0.0F, homeLight1.getNameXOffset(), 0.01F);
      assertFalse(homeLight1.isTexturable());
      assertNull(homeLight1.getName());
      assertEquals(0.5F, homeLight1.getPower(), 0.01F);
      assertEquals("temporarySubFolder", homeLight1.getDescription());
      assertFalse(homeLight1.isBackFaceShown());
      assertFalse(homeLight1.isModelMirrored());
      assertNull(homeLight1.getColor());
      assertNull(homeLight1.getCatalogId());
      assertEquals(5.025974F, homeLight1.getAngle(), 0.01F);
      
      homeLight2.setMovable(true);
      assertNotSame(homeLight0, homeLight2);
      assertNotSame(homeLight0, homeLight1);
      assertNotSame(homeLight1, homeLight2);
      assertNotSame(homeLight1, homeLight0);
      assertNotSame(homeLight2, homeLight0);
      assertNotSame(homeLight2, homeLight1);
      assertFalse(homeLight0.equals((Object)homeLight2));
      assertFalse(homeLight0.equals((Object)homeLight1));
      assertFalse(homeLight1.equals((Object)homeLight2));
      assertFalse(homeLight1.equals((Object)homeLight0));
      assertFalse(homeLight2.equals((Object)homeLight0));
      assertFalse(homeLight2.equals((Object)homeLight1));
      assertEquals((-1.0F), homeLight0.getElevation(), 0.01F);
      assertFalse(homeLight0.isTexturable());
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertNull(homeLight0.getName());
      assertNull(homeLight0.getDescription());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertEquals((-1.0F), homeLight0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertFalse(homeLight0.isResizable());
      assertFalse(homeLight0.isDeformable());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertNull(homeLight0.getShininess());
      assertTrue(homeLight0.isVisible());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertFalse(homeLight0.isMovable());
      assertFalse(homeLight0.isNameVisible());
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertNull(homeLight0.getCurrency());
      assertFalse(homeLight0.isBackFaceShown());
      assertFalse(homeLight0.isModelMirrored());
      assertNull(homeLight0.getColor());
      assertNull(homeLight0.getCatalogId());
      assertTrue(homeLight1.isVisible());
      assertEquals(0.0F, homeLight1.getWidth(), 0.01F);
      assertEquals(0.0F, homeLight1.getNameYOffset(), 0.01F);
      assertEquals(0.0F, homeLight1.getHeight(), 0.01F);
      assertFalse(homeLight1.isNameVisible());
      assertNull(homeLight1.getCurrency());
      assertFalse(homeLight1.isMovable());
      assertNull(homeLight1.getShininess());
      assertFalse(homeLight1.isDoorOrWindow());
      assertEquals(0.0F, homeLight1.getX(), 0.01F);
      assertEquals(0.0F, homeLight1.getY(), 0.01F);
      assertFalse(homeLight1.isResizable());
      assertEquals(0.0F, homeLight1.getDepth(), 0.01F);
      assertFalse(homeLight1.isDeformable());
      assertEquals((-1.0F), homeLight1.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight1.getNameAngle(), 0.01F);
      assertNull(homeLight1.getStaircaseCutOutShape());
      assertEquals((-1.0F), homeLight1.getElevation(), 0.01F);
      assertEquals(0.0F, homeLight1.getNameXOffset(), 0.01F);
      assertFalse(homeLight1.isTexturable());
      assertNull(homeLight1.getName());
      assertEquals(0.5F, homeLight1.getPower(), 0.01F);
      assertEquals("temporarySubFolder", homeLight1.getDescription());
      assertFalse(homeLight1.isBackFaceShown());
      assertFalse(homeLight1.isModelMirrored());
      assertNull(homeLight1.getColor());
      assertNull(homeLight1.getCatalogId());
      assertEquals(5.025974F, homeLight1.getAngle(), 0.01F);
      assertEquals(0.0F, homeLight2.getAngle(), 0.01F);
      assertEquals((-1.0F), homeLight2.getGroundElevation(), 0.01F);
      assertFalse(homeLight2.isTexturable());
      assertEquals((-1.0F), homeLight2.getElevation(), 0.01F);
      assertFalse(homeLight2.isDoorOrWindow());
      assertNull(homeLight2.getDescription());
      assertEquals(0.0F, homeLight2.getNameAngle(), 0.01F);
      assertNull(homeLight2.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight2.getDepth(), 0.01F);
      assertEquals(0.0F, homeLight2.getNameXOffset(), 0.01F);
      assertFalse(homeLight2.isDeformable());
      assertNull(homeLight2.getShininess());
      assertTrue(homeLight2.isVisible());
      assertEquals(0.0F, homeLight2.getX(), 0.01F);
      assertEquals(0.0F, homeLight2.getY(), 0.01F);
      assertEquals(0.0F, homeLight2.getHeight(), 0.01F);
      assertFalse(homeLight2.isResizable());
      assertEquals("temporarySubFolder", homeLight2.getName());
      assertEquals(0.0F, homeLight2.getWidth(), 0.01F);
      assertTrue(homeLight2.isMovable());
      assertNull(homeLight2.getCurrency());
      assertEquals(0.5F, homeLight2.getPower(), 0.01F);
      assertFalse(homeLight2.isNameVisible());
      assertNull(homeLight2.getCatalogId());
      assertFalse(homeLight2.isBackFaceShown());
      assertEquals(0.0F, homeLight2.getNameYOffset(), 0.01F);
      assertFalse(homeLight2.isModelMirrored());
      assertNull(homeLight2.getColor());
      
      Integer integer0 = Integer.valueOf((-2369));
      assertNotNull(integer0);
      assertFalse(integer0.equals((Object)int0));
      assertEquals((-2369), (int)integer0);
      
      float float0 = homeLight2.getY();
      assertNotSame(homeLight0, homeLight2);
      assertNotSame(homeLight0, homeLight1);
      assertNotSame(homeLight1, homeLight2);
      assertNotSame(homeLight1, homeLight0);
      assertNotSame(homeLight2, homeLight0);
      assertNotSame(homeLight2, homeLight1);
      assertFalse(homeLight0.equals((Object)homeLight2));
      assertFalse(homeLight0.equals((Object)homeLight1));
      assertFalse(homeLight1.equals((Object)homeLight2));
      assertFalse(homeLight1.equals((Object)homeLight0));
      assertFalse(homeLight2.equals((Object)homeLight0));
      assertFalse(homeLight2.equals((Object)homeLight1));
      assertEquals(0.0F, float0, 0.01F);
      assertEquals((-1.0F), homeLight0.getElevation(), 0.01F);
      assertFalse(homeLight0.isTexturable());
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertNull(homeLight0.getName());
      assertNull(homeLight0.getDescription());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertEquals((-1.0F), homeLight0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertFalse(homeLight0.isResizable());
      assertFalse(homeLight0.isDeformable());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertNull(homeLight0.getShininess());
      assertTrue(homeLight0.isVisible());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertFalse(homeLight0.isMovable());
      assertFalse(homeLight0.isNameVisible());
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertNull(homeLight0.getCurrency());
      assertFalse(homeLight0.isBackFaceShown());
      assertFalse(homeLight0.isModelMirrored());
      assertNull(homeLight0.getColor());
      assertNull(homeLight0.getCatalogId());
      assertTrue(homeLight1.isVisible());
      assertEquals(0.0F, homeLight1.getWidth(), 0.01F);
      assertEquals(0.0F, homeLight1.getNameYOffset(), 0.01F);
      assertEquals(0.0F, homeLight1.getHeight(), 0.01F);
      assertFalse(homeLight1.isNameVisible());
      assertNull(homeLight1.getCurrency());
      assertFalse(homeLight1.isMovable());
      assertNull(homeLight1.getShininess());
      assertFalse(homeLight1.isDoorOrWindow());
      assertEquals(0.0F, homeLight1.getX(), 0.01F);
      assertEquals(0.0F, homeLight1.getY(), 0.01F);
      assertFalse(homeLight1.isResizable());
      assertEquals(0.0F, homeLight1.getDepth(), 0.01F);
      assertFalse(homeLight1.isDeformable());
      assertEquals((-1.0F), homeLight1.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight1.getNameAngle(), 0.01F);
      assertNull(homeLight1.getStaircaseCutOutShape());
      assertEquals((-1.0F), homeLight1.getElevation(), 0.01F);
      assertEquals(0.0F, homeLight1.getNameXOffset(), 0.01F);
      assertFalse(homeLight1.isTexturable());
      assertNull(homeLight1.getName());
      assertEquals(0.5F, homeLight1.getPower(), 0.01F);
      assertEquals("temporarySubFolder", homeLight1.getDescription());
      assertFalse(homeLight1.isBackFaceShown());
      assertFalse(homeLight1.isModelMirrored());
      assertNull(homeLight1.getColor());
      assertNull(homeLight1.getCatalogId());
      assertEquals(5.025974F, homeLight1.getAngle(), 0.01F);
      assertEquals(0.0F, homeLight2.getAngle(), 0.01F);
      assertEquals((-1.0F), homeLight2.getGroundElevation(), 0.01F);
      assertFalse(homeLight2.isTexturable());
      assertEquals((-1.0F), homeLight2.getElevation(), 0.01F);
      assertFalse(homeLight2.isDoorOrWindow());
      assertNull(homeLight2.getDescription());
      assertEquals(0.0F, homeLight2.getNameAngle(), 0.01F);
      assertNull(homeLight2.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight2.getDepth(), 0.01F);
      assertEquals(0.0F, homeLight2.getNameXOffset(), 0.01F);
      assertFalse(homeLight2.isDeformable());
      assertNull(homeLight2.getShininess());
      assertTrue(homeLight2.isVisible());
      assertEquals(0.0F, homeLight2.getX(), 0.01F);
      assertEquals(0.0F, homeLight2.getY(), 0.01F);
      assertEquals(0.0F, homeLight2.getHeight(), 0.01F);
      assertFalse(homeLight2.isResizable());
      assertEquals("temporarySubFolder", homeLight2.getName());
      assertEquals(0.0F, homeLight2.getWidth(), 0.01F);
      assertTrue(homeLight2.isMovable());
      assertNull(homeLight2.getCurrency());
      assertEquals(0.5F, homeLight2.getPower(), 0.01F);
      assertFalse(homeLight2.isNameVisible());
      assertNull(homeLight2.getCatalogId());
      assertFalse(homeLight2.isBackFaceShown());
      assertEquals(0.0F, homeLight2.getNameYOffset(), 0.01F);
      assertFalse(homeLight2.isModelMirrored());
      assertNull(homeLight2.getColor());
      
      float float1 = homeLight2.getElevation();
      assertNotSame(homeLight0, homeLight2);
      assertNotSame(homeLight0, homeLight1);
      assertNotSame(homeLight1, homeLight2);
      assertNotSame(homeLight1, homeLight0);
      assertNotSame(homeLight2, homeLight0);
      assertNotSame(homeLight2, homeLight1);
      assertFalse(homeLight0.equals((Object)homeLight2));
      assertFalse(homeLight0.equals((Object)homeLight1));
      assertFalse(homeLight1.equals((Object)homeLight2));
      assertFalse(homeLight1.equals((Object)homeLight0));
      assertFalse(homeLight2.equals((Object)homeLight0));
      assertFalse(homeLight2.equals((Object)homeLight1));
      assertNotEquals(float1, float0, 0.01F);
      assertEquals((-1.0F), float1, 0.01F);
      assertEquals((-1.0F), homeLight0.getElevation(), 0.01F);
      assertFalse(homeLight0.isTexturable());
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertNull(homeLight0.getName());
      assertNull(homeLight0.getDescription());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertEquals((-1.0F), homeLight0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertFalse(homeLight0.isResizable());
      assertFalse(homeLight0.isDeformable());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertNull(homeLight0.getShininess());
      assertTrue(homeLight0.isVisible());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertFalse(homeLight0.isMovable());
      assertFalse(homeLight0.isNameVisible());
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertNull(homeLight0.getCurrency());
      assertFalse(homeLight0.isBackFaceShown());
      assertFalse(homeLight0.isModelMirrored());
      assertNull(homeLight0.getColor());
      assertNull(homeLight0.getCatalogId());
      assertTrue(homeLight1.isVisible());
      assertEquals(0.0F, homeLight1.getWidth(), 0.01F);
      assertEquals(0.0F, homeLight1.getNameYOffset(), 0.01F);
      assertEquals(0.0F, homeLight1.getHeight(), 0.01F);
      assertFalse(homeLight1.isNameVisible());
      assertNull(homeLight1.getCurrency());
      assertFalse(homeLight1.isMovable());
      assertNull(homeLight1.getShininess());
      assertFalse(homeLight1.isDoorOrWindow());
      assertEquals(0.0F, homeLight1.getX(), 0.01F);
      assertEquals(0.0F, homeLight1.getY(), 0.01F);
      assertFalse(homeLight1.isResizable());
      assertEquals(0.0F, homeLight1.getDepth(), 0.01F);
      assertFalse(homeLight1.isDeformable());
      assertEquals((-1.0F), homeLight1.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight1.getNameAngle(), 0.01F);
      assertNull(homeLight1.getStaircaseCutOutShape());
      assertEquals((-1.0F), homeLight1.getElevation(), 0.01F);
      assertEquals(0.0F, homeLight1.getNameXOffset(), 0.01F);
      assertFalse(homeLight1.isTexturable());
      assertNull(homeLight1.getName());
      assertEquals(0.5F, homeLight1.getPower(), 0.01F);
      assertEquals("temporarySubFolder", homeLight1.getDescription());
      assertFalse(homeLight1.isBackFaceShown());
      assertFalse(homeLight1.isModelMirrored());
      assertNull(homeLight1.getColor());
      assertNull(homeLight1.getCatalogId());
      assertEquals(5.025974F, homeLight1.getAngle(), 0.01F);
      assertEquals(0.0F, homeLight2.getAngle(), 0.01F);
      assertEquals((-1.0F), homeLight2.getGroundElevation(), 0.01F);
      assertFalse(homeLight2.isTexturable());
      assertEquals((-1.0F), homeLight2.getElevation(), 0.01F);
      assertFalse(homeLight2.isDoorOrWindow());
      assertNull(homeLight2.getDescription());
      assertEquals(0.0F, homeLight2.getNameAngle(), 0.01F);
      assertNull(homeLight2.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight2.getDepth(), 0.01F);
      assertEquals(0.0F, homeLight2.getNameXOffset(), 0.01F);
      assertFalse(homeLight2.isDeformable());
      assertNull(homeLight2.getShininess());
      assertTrue(homeLight2.isVisible());
      assertEquals(0.0F, homeLight2.getX(), 0.01F);
      assertEquals(0.0F, homeLight2.getY(), 0.01F);
      assertEquals(0.0F, homeLight2.getHeight(), 0.01F);
      assertFalse(homeLight2.isResizable());
      assertEquals("temporarySubFolder", homeLight2.getName());
      assertEquals(0.0F, homeLight2.getWidth(), 0.01F);
      assertTrue(homeLight2.isMovable());
      assertNull(homeLight2.getCurrency());
      assertEquals(0.5F, homeLight2.getPower(), 0.01F);
      assertFalse(homeLight2.isNameVisible());
      assertNull(homeLight2.getCatalogId());
      assertFalse(homeLight2.isBackFaceShown());
      assertEquals(0.0F, homeLight2.getNameYOffset(), 0.01F);
      assertFalse(homeLight2.isModelMirrored());
      assertNull(homeLight2.getColor());
      
      System.setCurrentTimeMillis((-1040187392));
      float float2 = homeLight1.getX();
      assertNotSame(homeLight0, homeLight2);
      assertNotSame(homeLight0, homeLight1);
      assertNotSame(homeLight1, homeLight2);
      assertNotSame(homeLight1, homeLight0);
      assertEquals(float2, float0, 0.01F);
      assertNotEquals(float2, float1, 0.01F);
      assertFalse(homeLight0.equals((Object)homeLight2));
      assertFalse(homeLight0.equals((Object)homeLight1));
      assertFalse(homeLight1.equals((Object)homeLight2));
      assertFalse(homeLight1.equals((Object)homeLight0));
      assertEquals(0.0F, float2, 0.01F);
      assertEquals((-1.0F), homeLight0.getElevation(), 0.01F);
      assertFalse(homeLight0.isTexturable());
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertNull(homeLight0.getName());
      assertNull(homeLight0.getDescription());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertEquals((-1.0F), homeLight0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertFalse(homeLight0.isResizable());
      assertFalse(homeLight0.isDeformable());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertNull(homeLight0.getShininess());
      assertTrue(homeLight0.isVisible());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertFalse(homeLight0.isMovable());
      assertFalse(homeLight0.isNameVisible());
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertNull(homeLight0.getCurrency());
      assertFalse(homeLight0.isBackFaceShown());
      assertFalse(homeLight0.isModelMirrored());
      assertNull(homeLight0.getColor());
      assertNull(homeLight0.getCatalogId());
      assertTrue(homeLight1.isVisible());
      assertEquals(0.0F, homeLight1.getWidth(), 0.01F);
      assertEquals(0.0F, homeLight1.getNameYOffset(), 0.01F);
      assertEquals(0.0F, homeLight1.getHeight(), 0.01F);
      assertFalse(homeLight1.isNameVisible());
      assertNull(homeLight1.getCurrency());
      assertFalse(homeLight1.isMovable());
      assertNull(homeLight1.getShininess());
      assertFalse(homeLight1.isDoorOrWindow());
      assertEquals(0.0F, homeLight1.getX(), 0.01F);
      assertEquals(0.0F, homeLight1.getY(), 0.01F);
      assertFalse(homeLight1.isResizable());
      assertEquals(0.0F, homeLight1.getDepth(), 0.01F);
      assertFalse(homeLight1.isDeformable());
      assertEquals((-1.0F), homeLight1.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight1.getNameAngle(), 0.01F);
      assertNull(homeLight1.getStaircaseCutOutShape());
      assertEquals((-1.0F), homeLight1.getElevation(), 0.01F);
      assertEquals(0.0F, homeLight1.getNameXOffset(), 0.01F);
      assertFalse(homeLight1.isTexturable());
      assertNull(homeLight1.getName());
      assertEquals(0.5F, homeLight1.getPower(), 0.01F);
      assertEquals("temporarySubFolder", homeLight1.getDescription());
      assertFalse(homeLight1.isBackFaceShown());
      assertFalse(homeLight1.isModelMirrored());
      assertNull(homeLight1.getColor());
      assertNull(homeLight1.getCatalogId());
      assertEquals(5.025974F, homeLight1.getAngle(), 0.01F);
      
      // Undeclared exception!
      try { 
        homeLight2.setHeight((-1.0F));
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Piece isn't resizable
         //
         verifyException("com.eteks.sweethome3d.model.HomePieceOfFurniture", e);
      }
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      Integer integer0 = new Integer(1630700545);
      assertNotNull(integer0);
      assertEquals(1630700545, (int)integer0);
      
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      Light light0 = mock(Light.class, new ViolatedAssumptionAnswer());
      doReturn((LightSource[]) null).when(light0).getLightSources();
      doReturn((Integer) null).when(light0).getColor();
      doReturn((String) null).when(light0).getCurrency();
      doReturn(0.0F).when(light0).getDepth();
      doReturn((String) null).when(light0).getDescription();
      doReturn(0.0F).when(light0).getElevation();
      doReturn(0.0F).when(light0).getHeight();
      doReturn((Content) null).when(light0).getIcon();
      doReturn((Content) null).when(light0).getModel();
      doReturn((float[][]) null).when(light0).getModelRotation();
      doReturn((String) null).when(light0).getName();
      doReturn((Content) null).when(light0).getPlanIcon();
      doReturn((BigDecimal) null).when(light0).getPrice();
      doReturn((String) null).when(light0).getStaircaseCutOutShape();
      doReturn((BigDecimal) null).when(light0).getValueAddedTaxPercentage();
      doReturn(0.0F).when(light0).getWidth();
      doReturn(false).when(light0).isBackFaceShown();
      doReturn(false).when(light0).isDeformable();
      doReturn(false).when(light0).isDoorOrWindow();
      doReturn(false).when(light0).isMovable();
      doReturn(false).when(light0).isResizable();
      doReturn(false).when(light0).isTexturable();
      HomeLight homeLight0 = new HomeLight(light0);
      assertNotNull(homeLight0);
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      assertFalse(homeLight0.isTexturable());
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertFalse(homeLight0.isBackFaceShown());
      assertNull(homeLight0.getColor());
      assertFalse(homeLight0.isModelMirrored());
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertFalse(homeLight0.isDeformable());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertNull(homeLight0.getCurrency());
      assertFalse(homeLight0.isMovable());
      assertFalse(homeLight0.isResizable());
      assertNull(homeLight0.getCatalogId());
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertNull(homeLight0.getShininess());
      assertTrue(homeLight0.isVisible());
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertFalse(homeLight0.isNameVisible());
      assertNull(homeLight0.getDescription());
      assertNull(homeLight0.getName());
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      
      homeLight0.setElevation((-1.0F));
      assertEquals((-1.0F), homeLight0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      assertFalse(homeLight0.isTexturable());
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertFalse(homeLight0.isBackFaceShown());
      assertNull(homeLight0.getColor());
      assertFalse(homeLight0.isModelMirrored());
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertFalse(homeLight0.isDeformable());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertNull(homeLight0.getCurrency());
      assertFalse(homeLight0.isMovable());
      assertFalse(homeLight0.isResizable());
      assertNull(homeLight0.getCatalogId());
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertNull(homeLight0.getShininess());
      assertTrue(homeLight0.isVisible());
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertFalse(homeLight0.isNameVisible());
      assertNull(homeLight0.getDescription());
      assertNull(homeLight0.getName());
      assertEquals((-1.0F), homeLight0.getElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      
      int int0 = Float.floatToIntBits((byte) (-32));
      assertEquals((-1040187392), int0);
      
      boolean boolean1 = homeLight0.isPointAt((byte)1, (byte) (-32), (byte) (-32));
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      assertEquals((-1.0F), homeLight0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      assertFalse(homeLight0.isTexturable());
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertFalse(homeLight0.isBackFaceShown());
      assertNull(homeLight0.getColor());
      assertFalse(homeLight0.isModelMirrored());
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertFalse(homeLight0.isDeformable());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertNull(homeLight0.getCurrency());
      assertFalse(homeLight0.isMovable());
      assertFalse(homeLight0.isResizable());
      assertNull(homeLight0.getCatalogId());
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertNull(homeLight0.getShininess());
      assertTrue(homeLight0.isVisible());
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertFalse(homeLight0.isNameVisible());
      assertNull(homeLight0.getDescription());
      assertNull(homeLight0.getName());
      assertEquals((-1.0F), homeLight0.getElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      
      int int1 = Float.floatToIntBits((-741.9441F));
      assertFalse(int1 == int0);
      assertEquals((-1002865556), int1);
      
      BigDecimal bigDecimal0 = homeLight0.getValueAddedTax();
      assertNull(bigDecimal0);
      assertEquals((-1.0F), homeLight0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      assertFalse(homeLight0.isTexturable());
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertFalse(homeLight0.isBackFaceShown());
      assertNull(homeLight0.getColor());
      assertFalse(homeLight0.isModelMirrored());
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertFalse(homeLight0.isDeformable());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertNull(homeLight0.getCurrency());
      assertFalse(homeLight0.isMovable());
      assertFalse(homeLight0.isResizable());
      assertNull(homeLight0.getCatalogId());
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertNull(homeLight0.getShininess());
      assertTrue(homeLight0.isVisible());
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertFalse(homeLight0.isNameVisible());
      assertNull(homeLight0.getDescription());
      assertNull(homeLight0.getName());
      assertEquals((-1.0F), homeLight0.getElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      
      HomeLight homeLight1 = homeLight0.clone();
      assertNotNull(homeLight1);
      assertNotSame(homeLight0, homeLight1);
      assertNotSame(homeLight1, homeLight0);
      assertFalse(homeLight1.equals((Object)homeLight0));
      assertEquals((-1.0F), homeLight0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      assertFalse(homeLight0.isTexturable());
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertFalse(homeLight0.isBackFaceShown());
      assertNull(homeLight0.getColor());
      assertFalse(homeLight0.isModelMirrored());
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertFalse(homeLight0.isDeformable());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertNull(homeLight0.getCurrency());
      assertFalse(homeLight0.isMovable());
      assertFalse(homeLight0.isResizable());
      assertNull(homeLight0.getCatalogId());
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertNull(homeLight0.getShininess());
      assertTrue(homeLight0.isVisible());
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertFalse(homeLight0.isNameVisible());
      assertNull(homeLight0.getDescription());
      assertNull(homeLight0.getName());
      assertEquals((-1.0F), homeLight0.getElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertEquals(0.0F, homeLight1.getWidth(), 0.01F);
      assertTrue(homeLight1.isVisible());
      assertEquals(0.0F, homeLight1.getNameYOffset(), 0.01F);
      assertFalse(homeLight1.isDeformable());
      assertEquals(0.0F, homeLight1.getHeight(), 0.01F);
      assertFalse(homeLight1.isNameVisible());
      assertFalse(homeLight1.isMovable());
      assertNull(homeLight1.getCurrency());
      assertNull(homeLight1.getShininess());
      assertFalse(homeLight1.isDoorOrWindow());
      assertEquals(0.0F, homeLight1.getX(), 0.01F);
      assertEquals(0.0F, homeLight1.getY(), 0.01F);
      assertFalse(homeLight1.isResizable());
      assertFalse(homeLight1.isTexturable());
      assertEquals(0.0F, homeLight1.getNameAngle(), 0.01F);
      assertEquals((-1.0F), homeLight1.getGroundElevation(), 0.01F);
      assertNull(homeLight1.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight1.getDepth(), 0.01F);
      assertEquals((-1.0F), homeLight1.getElevation(), 0.01F);
      assertNull(homeLight1.getDescription());
      assertEquals(0.0F, homeLight1.getNameXOffset(), 0.01F);
      assertEquals(0.5F, homeLight1.getPower(), 0.01F);
      assertEquals(0.0F, homeLight1.getAngle(), 0.01F);
      assertNull(homeLight1.getName());
      assertFalse(homeLight1.isModelMirrored());
      assertFalse(homeLight1.isBackFaceShown());
      assertNull(homeLight1.getCatalogId());
      assertNull(homeLight1.getColor());
      
      homeLight0.setName("");
      assertNotSame(homeLight0, homeLight1);
      assertFalse(homeLight0.equals((Object)homeLight1));
      assertEquals((-1.0F), homeLight0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      assertFalse(homeLight0.isTexturable());
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertFalse(homeLight0.isBackFaceShown());
      assertNull(homeLight0.getColor());
      assertFalse(homeLight0.isModelMirrored());
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertFalse(homeLight0.isDeformable());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertNull(homeLight0.getCurrency());
      assertFalse(homeLight0.isMovable());
      assertFalse(homeLight0.isResizable());
      assertNull(homeLight0.getCatalogId());
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertNull(homeLight0.getShininess());
      assertTrue(homeLight0.isVisible());
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertFalse(homeLight0.isNameVisible());
      assertNull(homeLight0.getDescription());
      assertEquals("", homeLight0.getName());
      assertEquals((-1.0F), homeLight0.getElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      
      homeLight1.setAngle((-1.0F));
      assertNotSame(homeLight0, homeLight1);
      assertNotSame(homeLight1, homeLight0);
      assertFalse(homeLight0.equals((Object)homeLight1));
      assertFalse(homeLight1.equals((Object)homeLight0));
      assertEquals((-1.0F), homeLight0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      assertFalse(homeLight0.isTexturable());
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertFalse(homeLight0.isBackFaceShown());
      assertNull(homeLight0.getColor());
      assertFalse(homeLight0.isModelMirrored());
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertFalse(homeLight0.isDeformable());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertNull(homeLight0.getCurrency());
      assertFalse(homeLight0.isMovable());
      assertFalse(homeLight0.isResizable());
      assertNull(homeLight0.getCatalogId());
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertNull(homeLight0.getShininess());
      assertTrue(homeLight0.isVisible());
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertFalse(homeLight0.isNameVisible());
      assertNull(homeLight0.getDescription());
      assertEquals("", homeLight0.getName());
      assertEquals((-1.0F), homeLight0.getElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertEquals(0.0F, homeLight1.getWidth(), 0.01F);
      assertTrue(homeLight1.isVisible());
      assertEquals(0.0F, homeLight1.getNameYOffset(), 0.01F);
      assertFalse(homeLight1.isDeformable());
      assertEquals(0.0F, homeLight1.getHeight(), 0.01F);
      assertFalse(homeLight1.isNameVisible());
      assertEquals(5.2831855F, homeLight1.getAngle(), 0.01F);
      assertFalse(homeLight1.isMovable());
      assertNull(homeLight1.getCurrency());
      assertNull(homeLight1.getShininess());
      assertFalse(homeLight1.isDoorOrWindow());
      assertEquals(0.0F, homeLight1.getX(), 0.01F);
      assertEquals(0.0F, homeLight1.getY(), 0.01F);
      assertFalse(homeLight1.isResizable());
      assertFalse(homeLight1.isTexturable());
      assertEquals(0.0F, homeLight1.getNameAngle(), 0.01F);
      assertEquals((-1.0F), homeLight1.getGroundElevation(), 0.01F);
      assertNull(homeLight1.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight1.getDepth(), 0.01F);
      assertEquals((-1.0F), homeLight1.getElevation(), 0.01F);
      assertNull(homeLight1.getDescription());
      assertEquals(0.0F, homeLight1.getNameXOffset(), 0.01F);
      assertEquals(0.5F, homeLight1.getPower(), 0.01F);
      assertNull(homeLight1.getName());
      assertFalse(homeLight1.isModelMirrored());
      assertFalse(homeLight1.isBackFaceShown());
      assertNull(homeLight1.getCatalogId());
      assertNull(homeLight1.getColor());
      
      homeLight0.setName("");
      assertNotSame(homeLight0, homeLight1);
      assertFalse(homeLight0.equals((Object)homeLight1));
      assertEquals((-1.0F), homeLight0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      assertFalse(homeLight0.isTexturable());
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertFalse(homeLight0.isBackFaceShown());
      assertNull(homeLight0.getColor());
      assertFalse(homeLight0.isModelMirrored());
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertFalse(homeLight0.isDeformable());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertNull(homeLight0.getCurrency());
      assertFalse(homeLight0.isMovable());
      assertFalse(homeLight0.isResizable());
      assertNull(homeLight0.getCatalogId());
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertNull(homeLight0.getShininess());
      assertTrue(homeLight0.isVisible());
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertFalse(homeLight0.isNameVisible());
      assertNull(homeLight0.getDescription());
      assertEquals("", homeLight0.getName());
      assertEquals((-1.0F), homeLight0.getElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      
      Integer integer1 = new Integer(1630700545);
      assertNotNull(integer1);
      assertFalse(integer1.equals((Object)int1));
      assertTrue(integer1.equals((Object)integer0));
      assertFalse(integer1.equals((Object)int0));
      assertEquals(1630700545, (int)integer1);
      
      System.setCurrentTimeMillis((byte)1);
      float float0 = homeLight0.getElevation();
      assertNotSame(homeLight0, homeLight1);
      assertFalse(homeLight0.equals((Object)homeLight1));
      assertEquals((-1.0F), float0, 0.01F);
      assertEquals((-1.0F), homeLight0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      assertFalse(homeLight0.isTexturable());
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertFalse(homeLight0.isBackFaceShown());
      assertNull(homeLight0.getColor());
      assertFalse(homeLight0.isModelMirrored());
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertFalse(homeLight0.isDeformable());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertNull(homeLight0.getCurrency());
      assertFalse(homeLight0.isMovable());
      assertFalse(homeLight0.isResizable());
      assertNull(homeLight0.getCatalogId());
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertNull(homeLight0.getShininess());
      assertTrue(homeLight0.isVisible());
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertFalse(homeLight0.isNameVisible());
      assertNull(homeLight0.getDescription());
      assertEquals("", homeLight0.getName());
      assertEquals((-1.0F), homeLight0.getElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      
      String string0 = homeLight0.getStaircaseCutOutShape();
      assertNull(string0);
      assertNotSame(homeLight0, homeLight1);
      assertFalse(homeLight0.equals((Object)homeLight1));
      assertEquals((-1.0F), homeLight0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      assertFalse(homeLight0.isTexturable());
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertFalse(homeLight0.isBackFaceShown());
      assertNull(homeLight0.getColor());
      assertFalse(homeLight0.isModelMirrored());
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertFalse(homeLight0.isDeformable());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertNull(homeLight0.getCurrency());
      assertFalse(homeLight0.isMovable());
      assertFalse(homeLight0.isResizable());
      assertNull(homeLight0.getCatalogId());
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertNull(homeLight0.getShininess());
      assertTrue(homeLight0.isVisible());
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertFalse(homeLight0.isNameVisible());
      assertNull(homeLight0.getDescription());
      assertEquals("", homeLight0.getName());
      assertEquals((-1.0F), homeLight0.getElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      Light light0 = mock(Light.class, new ViolatedAssumptionAnswer());
      doReturn((LightSource[]) null).when(light0).getLightSources();
      doReturn((Integer) null).when(light0).getColor();
      doReturn((String) null).when(light0).getCurrency();
      doReturn(0.0F).when(light0).getDepth();
      doReturn((String) null).when(light0).getDescription();
      doReturn(0.0F).when(light0).getElevation();
      doReturn(0.0F).when(light0).getHeight();
      doReturn((Content) null).when(light0).getIcon();
      doReturn((Content) null).when(light0).getModel();
      doReturn((float[][]) null).when(light0).getModelRotation();
      doReturn((String) null).when(light0).getName();
      doReturn((Content) null).when(light0).getPlanIcon();
      doReturn((BigDecimal) null).when(light0).getPrice();
      doReturn((String) null).when(light0).getStaircaseCutOutShape();
      doReturn((BigDecimal) null).when(light0).getValueAddedTaxPercentage();
      doReturn(0.0F).when(light0).getWidth();
      doReturn(false).when(light0).isBackFaceShown();
      doReturn(false).when(light0).isDeformable();
      doReturn(false).when(light0).isDoorOrWindow();
      doReturn(false).when(light0).isMovable();
      doReturn(false).when(light0).isResizable();
      doReturn(false).when(light0).isTexturable();
      HomeLight homeLight0 = new HomeLight(light0);
      assertNotNull(homeLight0);
      assertFalse(homeLight0.isModelMirrored());
      assertFalse(homeLight0.isDeformable());
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertFalse(homeLight0.isBackFaceShown());
      assertNull(homeLight0.getCurrency());
      assertFalse(homeLight0.isNameVisible());
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertNull(homeLight0.getCatalogId());
      assertNull(homeLight0.getColor());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertNull(homeLight0.getName());
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertNull(homeLight0.getDescription());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertFalse(homeLight0.isMovable());
      assertFalse(homeLight0.isTexturable());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertFalse(homeLight0.isResizable());
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      assertNull(homeLight0.getShininess());
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertTrue(homeLight0.isVisible());
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      
      homeLight0.setElevation((-1.0F));
      assertFalse(homeLight0.isModelMirrored());
      assertFalse(homeLight0.isDeformable());
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertFalse(homeLight0.isBackFaceShown());
      assertNull(homeLight0.getCurrency());
      assertFalse(homeLight0.isNameVisible());
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertNull(homeLight0.getCatalogId());
      assertNull(homeLight0.getColor());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertNull(homeLight0.getName());
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertNull(homeLight0.getDescription());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertFalse(homeLight0.isMovable());
      assertFalse(homeLight0.isTexturable());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertFalse(homeLight0.isResizable());
      assertEquals((-1.0F), homeLight0.getElevation(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      assertNull(homeLight0.getShininess());
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertTrue(homeLight0.isVisible());
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals((-1.0F), homeLight0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      
      homeLight0.setNameAngle((-1.0F));
      assertFalse(homeLight0.isModelMirrored());
      assertFalse(homeLight0.isDeformable());
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertFalse(homeLight0.isBackFaceShown());
      assertNull(homeLight0.getCurrency());
      assertFalse(homeLight0.isNameVisible());
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertNull(homeLight0.getCatalogId());
      assertNull(homeLight0.getColor());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertNull(homeLight0.getName());
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertNull(homeLight0.getDescription());
      assertFalse(homeLight0.isMovable());
      assertFalse(homeLight0.isTexturable());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertFalse(homeLight0.isResizable());
      assertEquals(5.2831855F, homeLight0.getNameAngle(), 0.01F);
      assertEquals((-1.0F), homeLight0.getElevation(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      assertNull(homeLight0.getShininess());
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertTrue(homeLight0.isVisible());
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals((-1.0F), homeLight0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      
      homeLight0.setY((-1.0F));
      assertFalse(homeLight0.isModelMirrored());
      assertFalse(homeLight0.isDeformable());
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertFalse(homeLight0.isBackFaceShown());
      assertNull(homeLight0.getCurrency());
      assertFalse(homeLight0.isNameVisible());
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertNull(homeLight0.getCatalogId());
      assertNull(homeLight0.getColor());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertNull(homeLight0.getName());
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertNull(homeLight0.getDescription());
      assertFalse(homeLight0.isMovable());
      assertFalse(homeLight0.isTexturable());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertFalse(homeLight0.isResizable());
      assertEquals(5.2831855F, homeLight0.getNameAngle(), 0.01F);
      assertEquals((-1.0F), homeLight0.getElevation(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      assertNull(homeLight0.getShininess());
      assertEquals((-1.0F), homeLight0.getY(), 0.01F);
      assertTrue(homeLight0.isVisible());
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals((-1.0F), homeLight0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      
      homeLight0.setY((-1.0F));
      assertFalse(homeLight0.isModelMirrored());
      assertFalse(homeLight0.isDeformable());
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertFalse(homeLight0.isBackFaceShown());
      assertNull(homeLight0.getCurrency());
      assertFalse(homeLight0.isNameVisible());
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertNull(homeLight0.getCatalogId());
      assertNull(homeLight0.getColor());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertNull(homeLight0.getName());
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertNull(homeLight0.getDescription());
      assertFalse(homeLight0.isMovable());
      assertFalse(homeLight0.isTexturable());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertFalse(homeLight0.isResizable());
      assertEquals(5.2831855F, homeLight0.getNameAngle(), 0.01F);
      assertEquals((-1.0F), homeLight0.getElevation(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      assertNull(homeLight0.getShininess());
      assertEquals((-1.0F), homeLight0.getY(), 0.01F);
      assertTrue(homeLight0.isVisible());
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals((-1.0F), homeLight0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      
      boolean boolean1 = homeLight0.isBottomLeftPointAt((-32.0F), 0.0F, 1982.62F);
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      assertFalse(homeLight0.isModelMirrored());
      assertFalse(homeLight0.isDeformable());
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertFalse(homeLight0.isBackFaceShown());
      assertNull(homeLight0.getCurrency());
      assertFalse(homeLight0.isNameVisible());
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertNull(homeLight0.getCatalogId());
      assertNull(homeLight0.getColor());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertNull(homeLight0.getName());
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertNull(homeLight0.getDescription());
      assertFalse(homeLight0.isMovable());
      assertFalse(homeLight0.isTexturable());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertFalse(homeLight0.isResizable());
      assertEquals(5.2831855F, homeLight0.getNameAngle(), 0.01F);
      assertEquals((-1.0F), homeLight0.getElevation(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      assertNull(homeLight0.getShininess());
      assertEquals((-1.0F), homeLight0.getY(), 0.01F);
      assertTrue(homeLight0.isVisible());
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals((-1.0F), homeLight0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      
      homeLight0.setDescription("q]");
      assertFalse(homeLight0.isModelMirrored());
      assertFalse(homeLight0.isDeformable());
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertFalse(homeLight0.isBackFaceShown());
      assertNull(homeLight0.getCurrency());
      assertFalse(homeLight0.isNameVisible());
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertNull(homeLight0.getCatalogId());
      assertNull(homeLight0.getColor());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertNull(homeLight0.getName());
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertFalse(homeLight0.isMovable());
      assertFalse(homeLight0.isTexturable());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertFalse(homeLight0.isResizable());
      assertEquals(5.2831855F, homeLight0.getNameAngle(), 0.01F);
      assertEquals((-1.0F), homeLight0.getElevation(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      assertNull(homeLight0.getShininess());
      assertEquals("q]", homeLight0.getDescription());
      assertEquals((-1.0F), homeLight0.getY(), 0.01F);
      assertTrue(homeLight0.isVisible());
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals((-1.0F), homeLight0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      
      Content content0 = homeLight0.getModel();
      assertNull(content0);
      assertFalse(homeLight0.isModelMirrored());
      assertFalse(homeLight0.isDeformable());
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertFalse(homeLight0.isBackFaceShown());
      assertNull(homeLight0.getCurrency());
      assertFalse(homeLight0.isNameVisible());
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertNull(homeLight0.getCatalogId());
      assertNull(homeLight0.getColor());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertNull(homeLight0.getName());
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertFalse(homeLight0.isMovable());
      assertFalse(homeLight0.isTexturable());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertFalse(homeLight0.isResizable());
      assertEquals(5.2831855F, homeLight0.getNameAngle(), 0.01F);
      assertEquals((-1.0F), homeLight0.getElevation(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      assertNull(homeLight0.getShininess());
      assertEquals("q]", homeLight0.getDescription());
      assertEquals((-1.0F), homeLight0.getY(), 0.01F);
      assertTrue(homeLight0.isVisible());
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals((-1.0F), homeLight0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      Light light0 = mock(Light.class, new ViolatedAssumptionAnswer());
      doReturn((LightSource[]) null).when(light0).getLightSources();
      doReturn((Integer) null).when(light0).getColor();
      doReturn((String) null).when(light0).getCurrency();
      doReturn(0.0F).when(light0).getDepth();
      doReturn((String) null).when(light0).getDescription();
      doReturn(0.0F).when(light0).getElevation();
      doReturn(0.0F).when(light0).getHeight();
      doReturn((Content) null).when(light0).getIcon();
      doReturn((Content) null).when(light0).getModel();
      doReturn((float[][]) null).when(light0).getModelRotation();
      doReturn((String) null).when(light0).getName();
      doReturn((Content) null).when(light0).getPlanIcon();
      doReturn((BigDecimal) null).when(light0).getPrice();
      doReturn((String) null).when(light0).getStaircaseCutOutShape();
      doReturn((BigDecimal) null).when(light0).getValueAddedTaxPercentage();
      doReturn(0.0F).when(light0).getWidth();
      doReturn(false).when(light0).isBackFaceShown();
      doReturn(false).when(light0).isDeformable();
      doReturn(false).when(light0).isDoorOrWindow();
      doReturn(false).when(light0).isMovable();
      doReturn(false).when(light0).isResizable();
      doReturn(false).when(light0).isTexturable();
      HomeLight homeLight0 = new HomeLight(light0);
      assertNotNull(homeLight0);
      assertFalse(homeLight0.isDeformable());
      assertFalse(homeLight0.isNameVisible());
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertTrue(homeLight0.isVisible());
      assertNull(homeLight0.getCurrency());
      assertNull(homeLight0.getColor());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      assertFalse(homeLight0.isMovable());
      assertFalse(homeLight0.isResizable());
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertNull(homeLight0.getShininess());
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertNull(homeLight0.getName());
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertNull(homeLight0.getDescription());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertNull(homeLight0.getCatalogId());
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertFalse(homeLight0.isTexturable());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertFalse(homeLight0.isModelMirrored());
      assertFalse(homeLight0.isBackFaceShown());
      
      homeLight0.setElevation((-1.0F));
      assertFalse(homeLight0.isDeformable());
      assertFalse(homeLight0.isNameVisible());
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertTrue(homeLight0.isVisible());
      assertNull(homeLight0.getCurrency());
      assertNull(homeLight0.getColor());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      assertFalse(homeLight0.isMovable());
      assertFalse(homeLight0.isResizable());
      assertEquals((-1.0F), homeLight0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertNull(homeLight0.getShininess());
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertNull(homeLight0.getName());
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertNull(homeLight0.getDescription());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertNull(homeLight0.getCatalogId());
      assertEquals((-1.0F), homeLight0.getElevation(), 0.01F);
      assertFalse(homeLight0.isTexturable());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertFalse(homeLight0.isModelMirrored());
      assertFalse(homeLight0.isBackFaceShown());
      
      boolean boolean0 = homeLight0.isBottomRightPointAt((-1.0F), (-1.0F), (-1.0F));
      assertFalse(boolean0);
      assertFalse(homeLight0.isDeformable());
      assertFalse(homeLight0.isNameVisible());
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertTrue(homeLight0.isVisible());
      assertNull(homeLight0.getCurrency());
      assertNull(homeLight0.getColor());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      assertFalse(homeLight0.isMovable());
      assertFalse(homeLight0.isResizable());
      assertEquals((-1.0F), homeLight0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertNull(homeLight0.getShininess());
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertNull(homeLight0.getName());
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertNull(homeLight0.getDescription());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertNull(homeLight0.getCatalogId());
      assertEquals((-1.0F), homeLight0.getElevation(), 0.01F);
      assertFalse(homeLight0.isTexturable());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertFalse(homeLight0.isModelMirrored());
      assertFalse(homeLight0.isBackFaceShown());
      
      int int0 = Float.floatToIntBits((byte) (-32));
      assertEquals((-1040187392), int0);
      
      HomeLight homeLight1 = homeLight0.clone();
      assertNotNull(homeLight1);
      assertNotSame(homeLight0, homeLight1);
      assertNotSame(homeLight1, homeLight0);
      assertFalse(homeLight1.equals((Object)homeLight0));
      assertFalse(homeLight0.isDeformable());
      assertFalse(homeLight0.isNameVisible());
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertTrue(homeLight0.isVisible());
      assertNull(homeLight0.getCurrency());
      assertNull(homeLight0.getColor());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      assertFalse(homeLight0.isMovable());
      assertFalse(homeLight0.isResizable());
      assertEquals((-1.0F), homeLight0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertNull(homeLight0.getShininess());
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertNull(homeLight0.getName());
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertNull(homeLight0.getDescription());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertNull(homeLight0.getCatalogId());
      assertEquals((-1.0F), homeLight0.getElevation(), 0.01F);
      assertFalse(homeLight0.isTexturable());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertFalse(homeLight0.isModelMirrored());
      assertFalse(homeLight0.isBackFaceShown());
      assertFalse(homeLight1.isMovable());
      assertFalse(homeLight1.isResizable());
      assertEquals(0.0F, homeLight1.getHeight(), 0.01F);
      assertNull(homeLight1.getShininess());
      assertNull(homeLight1.getName());
      assertNull(homeLight1.getCurrency());
      assertEquals(0.5F, homeLight1.getPower(), 0.01F);
      assertNull(homeLight1.getColor());
      assertEquals(0.0F, homeLight1.getNameYOffset(), 0.01F);
      assertNull(homeLight1.getCatalogId());
      assertEquals((-1.0F), homeLight1.getGroundElevation(), 0.01F);
      assertFalse(homeLight1.isDoorOrWindow());
      assertEquals(0.0F, homeLight1.getAngle(), 0.01F);
      assertFalse(homeLight1.isModelMirrored());
      assertFalse(homeLight1.isBackFaceShown());
      assertFalse(homeLight1.isDeformable());
      assertFalse(homeLight1.isNameVisible());
      assertEquals(0.0F, homeLight1.getNameAngle(), 0.01F);
      assertNull(homeLight1.getDescription());
      assertEquals((-1.0F), homeLight1.getElevation(), 0.01F);
      assertNull(homeLight1.getStaircaseCutOutShape());
      assertTrue(homeLight1.isVisible());
      assertEquals(0.0F, homeLight1.getWidth(), 0.01F);
      assertEquals(0.0F, homeLight1.getDepth(), 0.01F);
      assertEquals(0.0F, homeLight1.getY(), 0.01F);
      assertFalse(homeLight1.isTexturable());
      assertEquals(0.0F, homeLight1.getX(), 0.01F);
      assertEquals(0.0F, homeLight1.getNameXOffset(), 0.01F);
      
      homeLight0.setAngle((byte) (-32));
      assertNotSame(homeLight0, homeLight1);
      assertFalse(homeLight0.equals((Object)homeLight1));
      assertFalse(homeLight0.isDeformable());
      assertFalse(homeLight0.isNameVisible());
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertTrue(homeLight0.isVisible());
      assertNull(homeLight0.getCurrency());
      assertEquals(5.699112F, homeLight0.getAngle(), 0.01F);
      assertNull(homeLight0.getColor());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      assertFalse(homeLight0.isMovable());
      assertFalse(homeLight0.isResizable());
      assertEquals((-1.0F), homeLight0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertNull(homeLight0.getShininess());
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertNull(homeLight0.getName());
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertNull(homeLight0.getDescription());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertNull(homeLight0.getCatalogId());
      assertEquals((-1.0F), homeLight0.getElevation(), 0.01F);
      assertFalse(homeLight0.isTexturable());
      assertFalse(homeLight0.isModelMirrored());
      assertFalse(homeLight0.isBackFaceShown());
      
      homeLight0.setName("@!ft>HWit7j#");
      assertNotSame(homeLight0, homeLight1);
      assertFalse(homeLight0.equals((Object)homeLight1));
      assertFalse(homeLight0.isDeformable());
      assertFalse(homeLight0.isNameVisible());
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertTrue(homeLight0.isVisible());
      assertNull(homeLight0.getCurrency());
      assertEquals(5.699112F, homeLight0.getAngle(), 0.01F);
      assertEquals("@!ft>HWit7j#", homeLight0.getName());
      assertNull(homeLight0.getColor());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      assertFalse(homeLight0.isMovable());
      assertFalse(homeLight0.isResizable());
      assertEquals((-1.0F), homeLight0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertNull(homeLight0.getShininess());
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertNull(homeLight0.getDescription());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertNull(homeLight0.getCatalogId());
      assertEquals((-1.0F), homeLight0.getElevation(), 0.01F);
      assertFalse(homeLight0.isTexturable());
      assertFalse(homeLight0.isModelMirrored());
      assertFalse(homeLight0.isBackFaceShown());
      
      Integer integer0 = Integer.valueOf(51);
      assertNotNull(integer0);
      assertFalse(integer0.equals((Object)int0));
      assertEquals(51, (int)integer0);
      
      Integer integer1 = Integer.valueOf(1731393033);
      assertNotNull(integer1);
      assertFalse(integer1.equals((Object)integer0));
      assertFalse(integer1.equals((Object)int0));
      assertEquals(1731393033, (int)integer1);
      
      BigDecimal bigDecimal0 = homeLight0.getPriceValueAddedTaxIncluded();
      assertNull(bigDecimal0);
      assertNotSame(homeLight0, homeLight1);
      assertFalse(homeLight0.equals((Object)homeLight1));
      assertFalse(homeLight0.isDeformable());
      assertFalse(homeLight0.isNameVisible());
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertTrue(homeLight0.isVisible());
      assertNull(homeLight0.getCurrency());
      assertEquals(5.699112F, homeLight0.getAngle(), 0.01F);
      assertEquals("@!ft>HWit7j#", homeLight0.getName());
      assertNull(homeLight0.getColor());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      assertFalse(homeLight0.isMovable());
      assertFalse(homeLight0.isResizable());
      assertEquals((-1.0F), homeLight0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertNull(homeLight0.getShininess());
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertNull(homeLight0.getDescription());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertNull(homeLight0.getCatalogId());
      assertEquals((-1.0F), homeLight0.getElevation(), 0.01F);
      assertFalse(homeLight0.isTexturable());
      assertFalse(homeLight0.isModelMirrored());
      assertFalse(homeLight0.isBackFaceShown());
      
      System.setCurrentTimeMillis((-1040187392));
      String string0 = homeLight0.getCatalogId();
      assertNull(string0);
      assertNotSame(homeLight0, homeLight1);
      assertFalse(homeLight0.equals((Object)homeLight1));
      assertFalse(homeLight0.isDeformable());
      assertFalse(homeLight0.isNameVisible());
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertTrue(homeLight0.isVisible());
      assertNull(homeLight0.getCurrency());
      assertEquals(5.699112F, homeLight0.getAngle(), 0.01F);
      assertEquals("@!ft>HWit7j#", homeLight0.getName());
      assertNull(homeLight0.getColor());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      assertFalse(homeLight0.isMovable());
      assertFalse(homeLight0.isResizable());
      assertEquals((-1.0F), homeLight0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertNull(homeLight0.getShininess());
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertNull(homeLight0.getDescription());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertNull(homeLight0.getCatalogId());
      assertEquals((-1.0F), homeLight0.getElevation(), 0.01F);
      assertFalse(homeLight0.isTexturable());
      assertFalse(homeLight0.isModelMirrored());
      assertFalse(homeLight0.isBackFaceShown());
      
      float float0 = homeLight1.getNameAngle();
      assertNotSame(homeLight0, homeLight1);
      assertNotSame(homeLight1, homeLight0);
      assertFalse(homeLight0.equals((Object)homeLight1));
      assertFalse(homeLight1.equals((Object)homeLight0));
      assertEquals(0.0F, float0, 0.01F);
      assertFalse(homeLight0.isDeformable());
      assertFalse(homeLight0.isNameVisible());
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertTrue(homeLight0.isVisible());
      assertNull(homeLight0.getCurrency());
      assertEquals(5.699112F, homeLight0.getAngle(), 0.01F);
      assertEquals("@!ft>HWit7j#", homeLight0.getName());
      assertNull(homeLight0.getColor());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      assertFalse(homeLight0.isMovable());
      assertFalse(homeLight0.isResizable());
      assertEquals((-1.0F), homeLight0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertNull(homeLight0.getShininess());
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertNull(homeLight0.getDescription());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertNull(homeLight0.getCatalogId());
      assertEquals((-1.0F), homeLight0.getElevation(), 0.01F);
      assertFalse(homeLight0.isTexturable());
      assertFalse(homeLight0.isModelMirrored());
      assertFalse(homeLight0.isBackFaceShown());
      assertFalse(homeLight1.isMovable());
      assertFalse(homeLight1.isResizable());
      assertEquals(0.0F, homeLight1.getHeight(), 0.01F);
      assertNull(homeLight1.getShininess());
      assertNull(homeLight1.getName());
      assertNull(homeLight1.getCurrency());
      assertEquals(0.5F, homeLight1.getPower(), 0.01F);
      assertNull(homeLight1.getColor());
      assertEquals(0.0F, homeLight1.getNameYOffset(), 0.01F);
      assertNull(homeLight1.getCatalogId());
      assertEquals((-1.0F), homeLight1.getGroundElevation(), 0.01F);
      assertFalse(homeLight1.isDoorOrWindow());
      assertEquals(0.0F, homeLight1.getAngle(), 0.01F);
      assertFalse(homeLight1.isModelMirrored());
      assertFalse(homeLight1.isBackFaceShown());
      assertFalse(homeLight1.isDeformable());
      assertFalse(homeLight1.isNameVisible());
      assertEquals(0.0F, homeLight1.getNameAngle(), 0.01F);
      assertNull(homeLight1.getDescription());
      assertEquals((-1.0F), homeLight1.getElevation(), 0.01F);
      assertNull(homeLight1.getStaircaseCutOutShape());
      assertTrue(homeLight1.isVisible());
      assertEquals(0.0F, homeLight1.getWidth(), 0.01F);
      assertEquals(0.0F, homeLight1.getDepth(), 0.01F);
      assertEquals(0.0F, homeLight1.getY(), 0.01F);
      assertFalse(homeLight1.isTexturable());
      assertEquals(0.0F, homeLight1.getX(), 0.01F);
      assertEquals(0.0F, homeLight1.getNameXOffset(), 0.01F);
      
      float float1 = homeLight0.getX();
      assertNotSame(homeLight0, homeLight1);
      assertFalse(homeLight0.equals((Object)homeLight1));
      assertEquals(float1, float0, 0.01F);
      assertEquals(0.0F, float1, 0.01F);
      assertFalse(homeLight0.isDeformable());
      assertFalse(homeLight0.isNameVisible());
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertTrue(homeLight0.isVisible());
      assertNull(homeLight0.getCurrency());
      assertEquals(5.699112F, homeLight0.getAngle(), 0.01F);
      assertEquals("@!ft>HWit7j#", homeLight0.getName());
      assertNull(homeLight0.getColor());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      assertFalse(homeLight0.isMovable());
      assertFalse(homeLight0.isResizable());
      assertEquals((-1.0F), homeLight0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertNull(homeLight0.getShininess());
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertNull(homeLight0.getDescription());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertNull(homeLight0.getCatalogId());
      assertEquals((-1.0F), homeLight0.getElevation(), 0.01F);
      assertFalse(homeLight0.isTexturable());
      assertFalse(homeLight0.isModelMirrored());
      assertFalse(homeLight0.isBackFaceShown());
      
      // Undeclared exception!
      try { 
        homeLight1.setHeight(0.0F);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Piece isn't resizable
         //
         verifyException("com.eteks.sweethome3d.model.HomePieceOfFurniture", e);
      }
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      LightSource[] lightSourceArray0 = new LightSource[2];
      LightSource lightSource0 = new LightSource((-1.0F), (-1.0F), 381.9F, 1431655765);
      assertNotNull(lightSource0);
      assertNull(lightSource0.getDiameter());
      assertEquals((-1.0F), lightSource0.getX(), 0.01F);
      assertEquals((-1.0F), lightSource0.getY(), 0.01F);
      assertEquals(1431655765, lightSource0.getColor());
      assertEquals(381.9F, lightSource0.getZ(), 0.01F);
      
      LightSource lightSource1 = new LightSource((-1.0F), (-69.47F), 700.4569F, 1431655765);
      assertNotNull(lightSource1);
      assertFalse(lightSource1.equals((Object)lightSource0));
      assertEquals((-69.47F), lightSource1.getY(), 0.01F);
      assertNull(lightSource1.getDiameter());
      assertEquals((-1.0F), lightSource1.getX(), 0.01F);
      assertEquals(700.4569F, lightSource1.getZ(), 0.01F);
      assertEquals(1431655765, lightSource1.getColor());
      
      lightSourceArray0[1] = lightSource1;
      Integer integer0 = new Integer(1431655765);
      assertNotNull(integer0);
      assertEquals(1431655765, (int)integer0);
      
      Light light0 = mock(Light.class, new ViolatedAssumptionAnswer());
      doReturn((LightSource[]) null).when(light0).getLightSources();
      doReturn((Integer) null).when(light0).getColor();
      doReturn((String) null).when(light0).getCurrency();
      doReturn(0.0F).when(light0).getDepth();
      doReturn((String) null).when(light0).getDescription();
      doReturn(0.0F).when(light0).getElevation();
      doReturn(0.0F).when(light0).getHeight();
      doReturn((Content) null).when(light0).getIcon();
      doReturn((Content) null).when(light0).getModel();
      doReturn((float[][]) null).when(light0).getModelRotation();
      doReturn((String) null).when(light0).getName();
      doReturn((Content) null).when(light0).getPlanIcon();
      doReturn((BigDecimal) null).when(light0).getPrice();
      doReturn((String) null).when(light0).getStaircaseCutOutShape();
      doReturn((BigDecimal) null).when(light0).getValueAddedTaxPercentage();
      doReturn(0.0F).when(light0).getWidth();
      doReturn(false).when(light0).isBackFaceShown();
      doReturn(false).when(light0).isDeformable();
      doReturn(false).when(light0).isDoorOrWindow();
      doReturn(false).when(light0).isMovable();
      doReturn(false).when(light0).isResizable();
      doReturn(false).when(light0).isTexturable();
      HomeLight homeLight0 = new HomeLight(light0);
      assertNotNull(homeLight0);
      assertFalse(homeLight0.isNameVisible());
      assertFalse(homeLight0.isDeformable());
      assertNull(homeLight0.getColor());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertFalse(homeLight0.isBackFaceShown());
      assertFalse(homeLight0.isModelMirrored());
      assertTrue(homeLight0.isVisible());
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertFalse(homeLight0.isMovable());
      assertFalse(homeLight0.isResizable());
      assertNull(homeLight0.getCurrency());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertNull(homeLight0.getCatalogId());
      assertNull(homeLight0.getName());
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertNull(homeLight0.getShininess());
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertFalse(homeLight0.isTexturable());
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      assertNull(homeLight0.getDescription());
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      
      HomeLight homeLight1 = homeLight0.clone();
      assertNotNull(homeLight1);
      assertNotSame(homeLight0, homeLight1);
      assertNotSame(homeLight1, homeLight0);
      assertFalse(homeLight1.equals((Object)homeLight0));
      assertFalse(homeLight0.isNameVisible());
      assertFalse(homeLight0.isDeformable());
      assertNull(homeLight0.getColor());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertFalse(homeLight0.isBackFaceShown());
      assertFalse(homeLight0.isModelMirrored());
      assertTrue(homeLight0.isVisible());
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertFalse(homeLight0.isMovable());
      assertFalse(homeLight0.isResizable());
      assertNull(homeLight0.getCurrency());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertNull(homeLight0.getCatalogId());
      assertNull(homeLight0.getName());
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertNull(homeLight0.getShininess());
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertFalse(homeLight0.isTexturable());
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      assertNull(homeLight0.getDescription());
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertEquals(0.0F, homeLight1.getNameYOffset(), 0.01F);
      assertFalse(homeLight1.isNameVisible());
      assertFalse(homeLight1.isResizable());
      assertFalse(homeLight1.isDeformable());
      assertFalse(homeLight1.isModelMirrored());
      assertTrue(homeLight1.isVisible());
      assertFalse(homeLight1.isDoorOrWindow());
      assertFalse(homeLight1.isBackFaceShown());
      assertEquals(0.0F, homeLight1.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight1.getX(), 0.01F);
      assertEquals(0.0F, homeLight1.getY(), 0.01F);
      assertFalse(homeLight1.isTexturable());
      assertEquals(0.0F, homeLight1.getAngle(), 0.01F);
      assertEquals(0.0F, homeLight1.getWidth(), 0.01F);
      assertNull(homeLight1.getDescription());
      assertEquals(0.0F, homeLight1.getElevation(), 0.01F);
      assertNull(homeLight1.getName());
      assertEquals(0.0F, homeLight1.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeLight1.getNameAngle(), 0.01F);
      assertNull(homeLight1.getStaircaseCutOutShape());
      assertNull(homeLight1.getShininess());
      assertEquals(0.0F, homeLight1.getDepth(), 0.01F);
      assertNull(homeLight1.getColor());
      assertNull(homeLight1.getCatalogId());
      assertFalse(homeLight1.isMovable());
      assertEquals(0.0F, homeLight1.getHeight(), 0.01F);
      assertNull(homeLight1.getCurrency());
      assertEquals(0.5F, homeLight1.getPower(), 0.01F);
      
      String string0 = homeLight1.getName();
      assertNull(string0);
      assertNotSame(homeLight0, homeLight1);
      assertNotSame(homeLight1, homeLight0);
      assertFalse(homeLight0.equals((Object)homeLight1));
      assertFalse(homeLight1.equals((Object)homeLight0));
      assertFalse(homeLight0.isNameVisible());
      assertFalse(homeLight0.isDeformable());
      assertNull(homeLight0.getColor());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertFalse(homeLight0.isBackFaceShown());
      assertFalse(homeLight0.isModelMirrored());
      assertTrue(homeLight0.isVisible());
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertFalse(homeLight0.isMovable());
      assertFalse(homeLight0.isResizable());
      assertNull(homeLight0.getCurrency());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertNull(homeLight0.getCatalogId());
      assertNull(homeLight0.getName());
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertNull(homeLight0.getShininess());
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertFalse(homeLight0.isTexturable());
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      assertNull(homeLight0.getDescription());
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertEquals(0.0F, homeLight1.getNameYOffset(), 0.01F);
      assertFalse(homeLight1.isNameVisible());
      assertFalse(homeLight1.isResizable());
      assertFalse(homeLight1.isDeformable());
      assertFalse(homeLight1.isModelMirrored());
      assertTrue(homeLight1.isVisible());
      assertFalse(homeLight1.isDoorOrWindow());
      assertFalse(homeLight1.isBackFaceShown());
      assertEquals(0.0F, homeLight1.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight1.getX(), 0.01F);
      assertEquals(0.0F, homeLight1.getY(), 0.01F);
      assertFalse(homeLight1.isTexturable());
      assertEquals(0.0F, homeLight1.getAngle(), 0.01F);
      assertEquals(0.0F, homeLight1.getWidth(), 0.01F);
      assertNull(homeLight1.getDescription());
      assertEquals(0.0F, homeLight1.getElevation(), 0.01F);
      assertNull(homeLight1.getName());
      assertEquals(0.0F, homeLight1.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeLight1.getNameAngle(), 0.01F);
      assertNull(homeLight1.getStaircaseCutOutShape());
      assertNull(homeLight1.getShininess());
      assertEquals(0.0F, homeLight1.getDepth(), 0.01F);
      assertNull(homeLight1.getColor());
      assertNull(homeLight1.getCatalogId());
      assertFalse(homeLight1.isMovable());
      assertEquals(0.0F, homeLight1.getHeight(), 0.01F);
      assertNull(homeLight1.getCurrency());
      assertEquals(0.5F, homeLight1.getPower(), 0.01F);
      
      int int0 = Float.floatToIntBits(3.4028235E38F);
      assertEquals(2139095039, int0);
      
      BigDecimal bigDecimal0 = homeLight0.getValueAddedTax();
      assertNull(bigDecimal0);
      assertNotSame(homeLight0, homeLight1);
      assertFalse(homeLight0.equals((Object)homeLight1));
      assertFalse(homeLight0.isNameVisible());
      assertFalse(homeLight0.isDeformable());
      assertNull(homeLight0.getColor());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertFalse(homeLight0.isBackFaceShown());
      assertFalse(homeLight0.isModelMirrored());
      assertTrue(homeLight0.isVisible());
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertFalse(homeLight0.isMovable());
      assertFalse(homeLight0.isResizable());
      assertNull(homeLight0.getCurrency());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertNull(homeLight0.getCatalogId());
      assertNull(homeLight0.getName());
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertNull(homeLight0.getShininess());
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertFalse(homeLight0.isTexturable());
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      assertNull(homeLight0.getDescription());
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      
      HomeLight homeLight2 = homeLight1.clone();
      assertNotNull(homeLight2);
      assertNotSame(homeLight0, homeLight1);
      assertNotSame(homeLight0, homeLight2);
      assertNotSame(homeLight1, homeLight0);
      assertNotSame(homeLight1, homeLight2);
      assertNotSame(homeLight2, homeLight1);
      assertNotSame(homeLight2, homeLight0);
      assertFalse(homeLight0.equals((Object)homeLight1));
      assertFalse(homeLight1.equals((Object)homeLight0));
      assertFalse(homeLight2.equals((Object)homeLight1));
      assertFalse(homeLight2.equals((Object)homeLight0));
      assertFalse(homeLight0.isNameVisible());
      assertFalse(homeLight0.isDeformable());
      assertNull(homeLight0.getColor());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertFalse(homeLight0.isBackFaceShown());
      assertFalse(homeLight0.isModelMirrored());
      assertTrue(homeLight0.isVisible());
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertFalse(homeLight0.isMovable());
      assertFalse(homeLight0.isResizable());
      assertNull(homeLight0.getCurrency());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertNull(homeLight0.getCatalogId());
      assertNull(homeLight0.getName());
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertNull(homeLight0.getShininess());
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertFalse(homeLight0.isTexturable());
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      assertNull(homeLight0.getDescription());
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertEquals(0.0F, homeLight1.getNameYOffset(), 0.01F);
      assertFalse(homeLight1.isNameVisible());
      assertFalse(homeLight1.isResizable());
      assertFalse(homeLight1.isDeformable());
      assertFalse(homeLight1.isModelMirrored());
      assertTrue(homeLight1.isVisible());
      assertFalse(homeLight1.isDoorOrWindow());
      assertFalse(homeLight1.isBackFaceShown());
      assertEquals(0.0F, homeLight1.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight1.getX(), 0.01F);
      assertEquals(0.0F, homeLight1.getY(), 0.01F);
      assertFalse(homeLight1.isTexturable());
      assertEquals(0.0F, homeLight1.getAngle(), 0.01F);
      assertEquals(0.0F, homeLight1.getWidth(), 0.01F);
      assertNull(homeLight1.getDescription());
      assertEquals(0.0F, homeLight1.getElevation(), 0.01F);
      assertNull(homeLight1.getName());
      assertEquals(0.0F, homeLight1.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeLight1.getNameAngle(), 0.01F);
      assertNull(homeLight1.getStaircaseCutOutShape());
      assertNull(homeLight1.getShininess());
      assertEquals(0.0F, homeLight1.getDepth(), 0.01F);
      assertNull(homeLight1.getColor());
      assertNull(homeLight1.getCatalogId());
      assertFalse(homeLight1.isMovable());
      assertEquals(0.0F, homeLight1.getHeight(), 0.01F);
      assertNull(homeLight1.getCurrency());
      assertEquals(0.5F, homeLight1.getPower(), 0.01F);
      assertFalse(homeLight2.isDeformable());
      assertFalse(homeLight2.isNameVisible());
      assertFalse(homeLight2.isBackFaceShown());
      assertFalse(homeLight2.isModelMirrored());
      assertTrue(homeLight2.isVisible());
      assertEquals(0.0F, homeLight2.getNameYOffset(), 0.01F);
      assertEquals(0.0F, homeLight2.getY(), 0.01F);
      assertEquals(0.0F, homeLight2.getX(), 0.01F);
      assertNull(homeLight2.getColor());
      assertEquals(0.0F, homeLight2.getAngle(), 0.01F);
      assertEquals(0.0F, homeLight2.getGroundElevation(), 0.01F);
      assertFalse(homeLight2.isTexturable());
      assertEquals(0.0F, homeLight2.getWidth(), 0.01F);
      assertFalse(homeLight2.isDoorOrWindow());
      assertNull(homeLight2.getDescription());
      assertEquals(0.0F, homeLight2.getElevation(), 0.01F);
      assertNull(homeLight2.getName());
      assertEquals(0.5F, homeLight2.getPower(), 0.01F);
      assertEquals(0.0F, homeLight2.getDepth(), 0.01F);
      assertEquals(0.0F, homeLight2.getNameAngle(), 0.01F);
      assertNull(homeLight2.getCatalogId());
      assertEquals(0.0F, homeLight2.getNameXOffset(), 0.01F);
      assertNull(homeLight2.getShininess());
      assertNull(homeLight2.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight2.getHeight(), 0.01F);
      assertFalse(homeLight2.isResizable());
      assertNull(homeLight2.getCurrency());
      assertFalse(homeLight2.isMovable());
      
      Level level0 = homeLight2.getLevel();
      assertNull(level0);
      assertNotSame(homeLight0, homeLight1);
      assertNotSame(homeLight0, homeLight2);
      assertNotSame(homeLight1, homeLight0);
      assertNotSame(homeLight1, homeLight2);
      assertNotSame(homeLight2, homeLight1);
      assertNotSame(homeLight2, homeLight0);
      assertFalse(homeLight0.equals((Object)homeLight1));
      assertFalse(homeLight0.equals((Object)homeLight2));
      assertFalse(homeLight1.equals((Object)homeLight0));
      assertFalse(homeLight1.equals((Object)homeLight2));
      assertFalse(homeLight2.equals((Object)homeLight1));
      assertFalse(homeLight2.equals((Object)homeLight0));
      assertFalse(homeLight0.isNameVisible());
      assertFalse(homeLight0.isDeformable());
      assertNull(homeLight0.getColor());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertFalse(homeLight0.isBackFaceShown());
      assertFalse(homeLight0.isModelMirrored());
      assertTrue(homeLight0.isVisible());
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertFalse(homeLight0.isMovable());
      assertFalse(homeLight0.isResizable());
      assertNull(homeLight0.getCurrency());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertNull(homeLight0.getCatalogId());
      assertNull(homeLight0.getName());
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertNull(homeLight0.getShininess());
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertFalse(homeLight0.isTexturable());
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      assertNull(homeLight0.getDescription());
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertEquals(0.0F, homeLight1.getNameYOffset(), 0.01F);
      assertFalse(homeLight1.isNameVisible());
      assertFalse(homeLight1.isResizable());
      assertFalse(homeLight1.isDeformable());
      assertFalse(homeLight1.isModelMirrored());
      assertTrue(homeLight1.isVisible());
      assertFalse(homeLight1.isDoorOrWindow());
      assertFalse(homeLight1.isBackFaceShown());
      assertEquals(0.0F, homeLight1.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight1.getX(), 0.01F);
      assertEquals(0.0F, homeLight1.getY(), 0.01F);
      assertFalse(homeLight1.isTexturable());
      assertEquals(0.0F, homeLight1.getAngle(), 0.01F);
      assertEquals(0.0F, homeLight1.getWidth(), 0.01F);
      assertNull(homeLight1.getDescription());
      assertEquals(0.0F, homeLight1.getElevation(), 0.01F);
      assertNull(homeLight1.getName());
      assertEquals(0.0F, homeLight1.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeLight1.getNameAngle(), 0.01F);
      assertNull(homeLight1.getStaircaseCutOutShape());
      assertNull(homeLight1.getShininess());
      assertEquals(0.0F, homeLight1.getDepth(), 0.01F);
      assertNull(homeLight1.getColor());
      assertNull(homeLight1.getCatalogId());
      assertFalse(homeLight1.isMovable());
      assertEquals(0.0F, homeLight1.getHeight(), 0.01F);
      assertNull(homeLight1.getCurrency());
      assertEquals(0.5F, homeLight1.getPower(), 0.01F);
      assertFalse(homeLight2.isDeformable());
      assertFalse(homeLight2.isNameVisible());
      assertFalse(homeLight2.isBackFaceShown());
      assertFalse(homeLight2.isModelMirrored());
      assertTrue(homeLight2.isVisible());
      assertEquals(0.0F, homeLight2.getNameYOffset(), 0.01F);
      assertEquals(0.0F, homeLight2.getY(), 0.01F);
      assertEquals(0.0F, homeLight2.getX(), 0.01F);
      assertNull(homeLight2.getColor());
      assertEquals(0.0F, homeLight2.getAngle(), 0.01F);
      assertEquals(0.0F, homeLight2.getGroundElevation(), 0.01F);
      assertFalse(homeLight2.isTexturable());
      assertEquals(0.0F, homeLight2.getWidth(), 0.01F);
      assertFalse(homeLight2.isDoorOrWindow());
      assertNull(homeLight2.getDescription());
      assertEquals(0.0F, homeLight2.getElevation(), 0.01F);
      assertNull(homeLight2.getName());
      assertEquals(0.5F, homeLight2.getPower(), 0.01F);
      assertEquals(0.0F, homeLight2.getDepth(), 0.01F);
      assertEquals(0.0F, homeLight2.getNameAngle(), 0.01F);
      assertNull(homeLight2.getCatalogId());
      assertEquals(0.0F, homeLight2.getNameXOffset(), 0.01F);
      assertNull(homeLight2.getShininess());
      assertNull(homeLight2.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight2.getHeight(), 0.01F);
      assertFalse(homeLight2.isResizable());
      assertNull(homeLight2.getCurrency());
      assertFalse(homeLight2.isMovable());
      
      HomeLight homeLight3 = homeLight2.clone();
      assertNotNull(homeLight3);
      assertNotSame(homeLight0, homeLight1);
      assertNotSame(homeLight0, homeLight2);
      assertNotSame(homeLight0, homeLight3);
      assertNotSame(homeLight1, homeLight0);
      assertNotSame(homeLight1, homeLight2);
      assertNotSame(homeLight1, homeLight3);
      assertNotSame(homeLight2, homeLight1);
      assertNotSame(homeLight2, homeLight0);
      assertNotSame(homeLight2, homeLight3);
      assertNotSame(homeLight3, homeLight0);
      assertNotSame(homeLight3, homeLight2);
      assertNotSame(homeLight3, homeLight1);
      assertFalse(homeLight0.equals((Object)homeLight1));
      assertFalse(homeLight0.equals((Object)homeLight2));
      assertFalse(homeLight1.equals((Object)homeLight0));
      assertFalse(homeLight1.equals((Object)homeLight2));
      assertFalse(homeLight2.equals((Object)homeLight1));
      assertFalse(homeLight2.equals((Object)homeLight0));
      assertFalse(homeLight3.equals((Object)homeLight0));
      assertFalse(homeLight3.equals((Object)homeLight2));
      assertFalse(homeLight3.equals((Object)homeLight1));
      assertFalse(homeLight0.isNameVisible());
      assertFalse(homeLight0.isDeformable());
      assertNull(homeLight0.getColor());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertFalse(homeLight0.isBackFaceShown());
      assertFalse(homeLight0.isModelMirrored());
      assertTrue(homeLight0.isVisible());
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertFalse(homeLight0.isMovable());
      assertFalse(homeLight0.isResizable());
      assertNull(homeLight0.getCurrency());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertNull(homeLight0.getCatalogId());
      assertNull(homeLight0.getName());
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertNull(homeLight0.getShininess());
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertFalse(homeLight0.isTexturable());
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      assertNull(homeLight0.getDescription());
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertEquals(0.0F, homeLight1.getNameYOffset(), 0.01F);
      assertFalse(homeLight1.isNameVisible());
      assertFalse(homeLight1.isResizable());
      assertFalse(homeLight1.isDeformable());
      assertFalse(homeLight1.isModelMirrored());
      assertTrue(homeLight1.isVisible());
      assertFalse(homeLight1.isDoorOrWindow());
      assertFalse(homeLight1.isBackFaceShown());
      assertEquals(0.0F, homeLight1.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight1.getX(), 0.01F);
      assertEquals(0.0F, homeLight1.getY(), 0.01F);
      assertFalse(homeLight1.isTexturable());
      assertEquals(0.0F, homeLight1.getAngle(), 0.01F);
      assertEquals(0.0F, homeLight1.getWidth(), 0.01F);
      assertNull(homeLight1.getDescription());
      assertEquals(0.0F, homeLight1.getElevation(), 0.01F);
      assertNull(homeLight1.getName());
      assertEquals(0.0F, homeLight1.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeLight1.getNameAngle(), 0.01F);
      assertNull(homeLight1.getStaircaseCutOutShape());
      assertNull(homeLight1.getShininess());
      assertEquals(0.0F, homeLight1.getDepth(), 0.01F);
      assertNull(homeLight1.getColor());
      assertNull(homeLight1.getCatalogId());
      assertFalse(homeLight1.isMovable());
      assertEquals(0.0F, homeLight1.getHeight(), 0.01F);
      assertNull(homeLight1.getCurrency());
      assertEquals(0.5F, homeLight1.getPower(), 0.01F);
      assertFalse(homeLight2.isDeformable());
      assertFalse(homeLight2.isNameVisible());
      assertFalse(homeLight2.isBackFaceShown());
      assertFalse(homeLight2.isModelMirrored());
      assertTrue(homeLight2.isVisible());
      assertEquals(0.0F, homeLight2.getNameYOffset(), 0.01F);
      assertEquals(0.0F, homeLight2.getY(), 0.01F);
      assertEquals(0.0F, homeLight2.getX(), 0.01F);
      assertNull(homeLight2.getColor());
      assertEquals(0.0F, homeLight2.getAngle(), 0.01F);
      assertEquals(0.0F, homeLight2.getGroundElevation(), 0.01F);
      assertFalse(homeLight2.isTexturable());
      assertEquals(0.0F, homeLight2.getWidth(), 0.01F);
      assertFalse(homeLight2.isDoorOrWindow());
      assertNull(homeLight2.getDescription());
      assertEquals(0.0F, homeLight2.getElevation(), 0.01F);
      assertNull(homeLight2.getName());
      assertEquals(0.5F, homeLight2.getPower(), 0.01F);
      assertEquals(0.0F, homeLight2.getDepth(), 0.01F);
      assertEquals(0.0F, homeLight2.getNameAngle(), 0.01F);
      assertNull(homeLight2.getCatalogId());
      assertEquals(0.0F, homeLight2.getNameXOffset(), 0.01F);
      assertNull(homeLight2.getShininess());
      assertNull(homeLight2.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight2.getHeight(), 0.01F);
      assertFalse(homeLight2.isResizable());
      assertNull(homeLight2.getCurrency());
      assertFalse(homeLight2.isMovable());
      assertFalse(homeLight3.isResizable());
      assertFalse(homeLight3.isMovable());
      assertEquals(0.0F, homeLight3.getHeight(), 0.01F);
      assertNull(homeLight3.getShininess());
      assertNull(homeLight3.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight3.getNameAngle(), 0.01F);
      assertNull(homeLight3.getName());
      assertNull(homeLight3.getCurrency());
      assertEquals(0.5F, homeLight3.getPower(), 0.01F);
      assertNull(homeLight3.getColor());
      assertNull(homeLight3.getCatalogId());
      assertEquals(0.0F, homeLight3.getNameYOffset(), 0.01F);
      assertEquals(0.0F, homeLight3.getX(), 0.01F);
      assertFalse(homeLight3.isDoorOrWindow());
      assertFalse(homeLight3.isBackFaceShown());
      assertEquals(0.0F, homeLight3.getAngle(), 0.01F);
      assertFalse(homeLight3.isModelMirrored());
      assertFalse(homeLight3.isNameVisible());
      assertNull(homeLight3.getDescription());
      assertEquals(0.0F, homeLight3.getDepth(), 0.01F);
      assertTrue(homeLight3.isVisible());
      assertFalse(homeLight3.isDeformable());
      assertEquals(0.0F, homeLight3.getElevation(), 0.01F);
      assertEquals(0.0F, homeLight3.getWidth(), 0.01F);
      assertFalse(homeLight3.isTexturable());
      assertEquals(0.0F, homeLight3.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight3.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeLight3.getY(), 0.01F);
      
      homeLight1.setAngle(2139095039);
      assertNotSame(homeLight0, homeLight1);
      assertNotSame(homeLight0, homeLight2);
      assertNotSame(homeLight0, homeLight3);
      assertNotSame(homeLight1, homeLight0);
      assertNotSame(homeLight1, homeLight2);
      assertNotSame(homeLight1, homeLight3);
      assertFalse(homeLight0.equals((Object)homeLight1));
      assertFalse(homeLight0.equals((Object)homeLight2));
      assertFalse(homeLight0.equals((Object)homeLight3));
      assertFalse(homeLight1.equals((Object)homeLight0));
      assertFalse(homeLight1.equals((Object)homeLight2));
      assertFalse(homeLight1.equals((Object)homeLight3));
      assertFalse(homeLight0.isNameVisible());
      assertFalse(homeLight0.isDeformable());
      assertNull(homeLight0.getColor());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertFalse(homeLight0.isBackFaceShown());
      assertFalse(homeLight0.isModelMirrored());
      assertTrue(homeLight0.isVisible());
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertFalse(homeLight0.isMovable());
      assertFalse(homeLight0.isResizable());
      assertNull(homeLight0.getCurrency());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertNull(homeLight0.getCatalogId());
      assertNull(homeLight0.getName());
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertNull(homeLight0.getShininess());
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertFalse(homeLight0.isTexturable());
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      assertNull(homeLight0.getDescription());
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertEquals(0.0F, homeLight1.getNameYOffset(), 0.01F);
      assertEquals(2.2578979F, homeLight1.getAngle(), 0.01F);
      assertFalse(homeLight1.isNameVisible());
      assertFalse(homeLight1.isResizable());
      assertFalse(homeLight1.isDeformable());
      assertFalse(homeLight1.isModelMirrored());
      assertTrue(homeLight1.isVisible());
      assertFalse(homeLight1.isDoorOrWindow());
      assertFalse(homeLight1.isBackFaceShown());
      assertEquals(0.0F, homeLight1.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight1.getX(), 0.01F);
      assertEquals(0.0F, homeLight1.getY(), 0.01F);
      assertFalse(homeLight1.isTexturable());
      assertEquals(0.0F, homeLight1.getWidth(), 0.01F);
      assertNull(homeLight1.getDescription());
      assertEquals(0.0F, homeLight1.getElevation(), 0.01F);
      assertNull(homeLight1.getName());
      assertEquals(0.0F, homeLight1.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeLight1.getNameAngle(), 0.01F);
      assertNull(homeLight1.getStaircaseCutOutShape());
      assertNull(homeLight1.getShininess());
      assertEquals(0.0F, homeLight1.getDepth(), 0.01F);
      assertNull(homeLight1.getColor());
      assertNull(homeLight1.getCatalogId());
      assertFalse(homeLight1.isMovable());
      assertEquals(0.0F, homeLight1.getHeight(), 0.01F);
      assertNull(homeLight1.getCurrency());
      assertEquals(0.5F, homeLight1.getPower(), 0.01F);
      
      homeLight3.setName((String) null);
      assertNotSame(homeLight0, homeLight1);
      assertNotSame(homeLight0, homeLight2);
      assertNotSame(homeLight0, homeLight3);
      assertNotSame(homeLight1, homeLight0);
      assertNotSame(homeLight1, homeLight2);
      assertNotSame(homeLight1, homeLight3);
      assertNotSame(homeLight2, homeLight1);
      assertNotSame(homeLight2, homeLight0);
      assertNotSame(homeLight2, homeLight3);
      assertNotSame(homeLight3, homeLight0);
      assertNotSame(homeLight3, homeLight2);
      assertNotSame(homeLight3, homeLight1);
      assertFalse(homeLight0.equals((Object)homeLight1));
      assertFalse(homeLight0.equals((Object)homeLight2));
      assertFalse(homeLight0.equals((Object)homeLight3));
      assertFalse(homeLight1.equals((Object)homeLight0));
      assertFalse(homeLight1.equals((Object)homeLight2));
      assertFalse(homeLight1.equals((Object)homeLight3));
      assertFalse(homeLight2.equals((Object)homeLight1));
      assertFalse(homeLight2.equals((Object)homeLight0));
      assertFalse(homeLight2.equals((Object)homeLight3));
      assertFalse(homeLight3.equals((Object)homeLight0));
      assertFalse(homeLight3.equals((Object)homeLight2));
      assertFalse(homeLight3.equals((Object)homeLight1));
      assertFalse(homeLight0.isNameVisible());
      assertFalse(homeLight0.isDeformable());
      assertNull(homeLight0.getColor());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertFalse(homeLight0.isBackFaceShown());
      assertFalse(homeLight0.isModelMirrored());
      assertTrue(homeLight0.isVisible());
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertFalse(homeLight0.isMovable());
      assertFalse(homeLight0.isResizable());
      assertNull(homeLight0.getCurrency());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertNull(homeLight0.getCatalogId());
      assertNull(homeLight0.getName());
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertNull(homeLight0.getShininess());
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertFalse(homeLight0.isTexturable());
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      assertNull(homeLight0.getDescription());
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertEquals(0.0F, homeLight1.getNameYOffset(), 0.01F);
      assertEquals(2.2578979F, homeLight1.getAngle(), 0.01F);
      assertFalse(homeLight1.isNameVisible());
      assertFalse(homeLight1.isResizable());
      assertFalse(homeLight1.isDeformable());
      assertFalse(homeLight1.isModelMirrored());
      assertTrue(homeLight1.isVisible());
      assertFalse(homeLight1.isDoorOrWindow());
      assertFalse(homeLight1.isBackFaceShown());
      assertEquals(0.0F, homeLight1.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight1.getX(), 0.01F);
      assertEquals(0.0F, homeLight1.getY(), 0.01F);
      assertFalse(homeLight1.isTexturable());
      assertEquals(0.0F, homeLight1.getWidth(), 0.01F);
      assertNull(homeLight1.getDescription());
      assertEquals(0.0F, homeLight1.getElevation(), 0.01F);
      assertNull(homeLight1.getName());
      assertEquals(0.0F, homeLight1.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeLight1.getNameAngle(), 0.01F);
      assertNull(homeLight1.getStaircaseCutOutShape());
      assertNull(homeLight1.getShininess());
      assertEquals(0.0F, homeLight1.getDepth(), 0.01F);
      assertNull(homeLight1.getColor());
      assertNull(homeLight1.getCatalogId());
      assertFalse(homeLight1.isMovable());
      assertEquals(0.0F, homeLight1.getHeight(), 0.01F);
      assertNull(homeLight1.getCurrency());
      assertEquals(0.5F, homeLight1.getPower(), 0.01F);
      assertFalse(homeLight2.isDeformable());
      assertFalse(homeLight2.isNameVisible());
      assertFalse(homeLight2.isBackFaceShown());
      assertFalse(homeLight2.isModelMirrored());
      assertTrue(homeLight2.isVisible());
      assertEquals(0.0F, homeLight2.getNameYOffset(), 0.01F);
      assertEquals(0.0F, homeLight2.getY(), 0.01F);
      assertEquals(0.0F, homeLight2.getX(), 0.01F);
      assertNull(homeLight2.getColor());
      assertEquals(0.0F, homeLight2.getAngle(), 0.01F);
      assertEquals(0.0F, homeLight2.getGroundElevation(), 0.01F);
      assertFalse(homeLight2.isTexturable());
      assertEquals(0.0F, homeLight2.getWidth(), 0.01F);
      assertFalse(homeLight2.isDoorOrWindow());
      assertNull(homeLight2.getDescription());
      assertEquals(0.0F, homeLight2.getElevation(), 0.01F);
      assertNull(homeLight2.getName());
      assertEquals(0.5F, homeLight2.getPower(), 0.01F);
      assertEquals(0.0F, homeLight2.getDepth(), 0.01F);
      assertEquals(0.0F, homeLight2.getNameAngle(), 0.01F);
      assertNull(homeLight2.getCatalogId());
      assertEquals(0.0F, homeLight2.getNameXOffset(), 0.01F);
      assertNull(homeLight2.getShininess());
      assertNull(homeLight2.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight2.getHeight(), 0.01F);
      assertFalse(homeLight2.isResizable());
      assertNull(homeLight2.getCurrency());
      assertFalse(homeLight2.isMovable());
      assertFalse(homeLight3.isResizable());
      assertFalse(homeLight3.isMovable());
      assertEquals(0.0F, homeLight3.getHeight(), 0.01F);
      assertNull(homeLight3.getShininess());
      assertNull(homeLight3.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight3.getNameAngle(), 0.01F);
      assertNull(homeLight3.getName());
      assertNull(homeLight3.getCurrency());
      assertEquals(0.5F, homeLight3.getPower(), 0.01F);
      assertNull(homeLight3.getColor());
      assertNull(homeLight3.getCatalogId());
      assertEquals(0.0F, homeLight3.getNameYOffset(), 0.01F);
      assertEquals(0.0F, homeLight3.getX(), 0.01F);
      assertFalse(homeLight3.isDoorOrWindow());
      assertFalse(homeLight3.isBackFaceShown());
      assertEquals(0.0F, homeLight3.getAngle(), 0.01F);
      assertFalse(homeLight3.isModelMirrored());
      assertFalse(homeLight3.isNameVisible());
      assertNull(homeLight3.getDescription());
      assertEquals(0.0F, homeLight3.getDepth(), 0.01F);
      assertTrue(homeLight3.isVisible());
      assertFalse(homeLight3.isDeformable());
      assertEquals(0.0F, homeLight3.getElevation(), 0.01F);
      assertEquals(0.0F, homeLight3.getWidth(), 0.01F);
      assertFalse(homeLight3.isTexturable());
      assertEquals(0.0F, homeLight3.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight3.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeLight3.getY(), 0.01F);
      
      Integer integer1 = Integer.valueOf(1);
      assertNotNull(integer1);
      assertFalse(integer1.equals((Object)int0));
      assertFalse(integer1.equals((Object)integer0));
      assertEquals(1, (int)integer1);
      
      Integer integer2 = new Integer(3763);
      assertNotNull(integer2);
      assertFalse(integer2.equals((Object)integer0));
      assertFalse(integer2.equals((Object)integer1));
      assertFalse(integer2.equals((Object)int0));
      assertEquals(3763, (int)integer2);
      
      Integer integer3 = new Integer((-947));
      assertNotNull(integer3);
      assertFalse(integer3.equals((Object)integer0));
      assertFalse(integer3.equals((Object)integer2));
      assertFalse(integer3.equals((Object)int0));
      assertFalse(integer3.equals((Object)integer1));
      assertEquals((-947), (int)integer3);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      boolean boolean0 = integer3.equals(object0);
      assertFalse(integer3.equals((Object)integer0));
      assertFalse(integer3.equals((Object)integer2));
      assertFalse(integer3.equals((Object)int0));
      assertFalse(integer3.equals((Object)integer1));
      assertFalse(boolean0);
      
      float float0 = homeLight3.getElevation();
      assertNotSame(homeLight0, homeLight1);
      assertNotSame(homeLight0, homeLight2);
      assertNotSame(homeLight0, homeLight3);
      assertNotSame(homeLight1, homeLight0);
      assertNotSame(homeLight1, homeLight2);
      assertNotSame(homeLight1, homeLight3);
      assertNotSame(homeLight2, homeLight1);
      assertNotSame(homeLight2, homeLight0);
      assertNotSame(homeLight2, homeLight3);
      assertNotSame(homeLight3, homeLight0);
      assertNotSame(homeLight3, homeLight2);
      assertNotSame(homeLight3, homeLight1);
      assertFalse(homeLight0.equals((Object)homeLight1));
      assertFalse(homeLight0.equals((Object)homeLight2));
      assertFalse(homeLight0.equals((Object)homeLight3));
      assertFalse(homeLight1.equals((Object)homeLight0));
      assertFalse(homeLight1.equals((Object)homeLight2));
      assertFalse(homeLight1.equals((Object)homeLight3));
      assertFalse(homeLight2.equals((Object)homeLight1));
      assertFalse(homeLight2.equals((Object)homeLight0));
      assertFalse(homeLight2.equals((Object)homeLight3));
      assertFalse(homeLight3.equals((Object)homeLight0));
      assertFalse(homeLight3.equals((Object)homeLight2));
      assertFalse(homeLight3.equals((Object)homeLight1));
      assertEquals(0.0F, float0, 0.01F);
      assertFalse(homeLight0.isNameVisible());
      assertFalse(homeLight0.isDeformable());
      assertNull(homeLight0.getColor());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertFalse(homeLight0.isBackFaceShown());
      assertFalse(homeLight0.isModelMirrored());
      assertTrue(homeLight0.isVisible());
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertFalse(homeLight0.isMovable());
      assertFalse(homeLight0.isResizable());
      assertNull(homeLight0.getCurrency());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertNull(homeLight0.getCatalogId());
      assertNull(homeLight0.getName());
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertNull(homeLight0.getShininess());
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertFalse(homeLight0.isTexturable());
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      assertNull(homeLight0.getDescription());
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertEquals(0.0F, homeLight1.getNameYOffset(), 0.01F);
      assertEquals(2.2578979F, homeLight1.getAngle(), 0.01F);
      assertFalse(homeLight1.isNameVisible());
      assertFalse(homeLight1.isResizable());
      assertFalse(homeLight1.isDeformable());
      assertFalse(homeLight1.isModelMirrored());
      assertTrue(homeLight1.isVisible());
      assertFalse(homeLight1.isDoorOrWindow());
      assertFalse(homeLight1.isBackFaceShown());
      assertEquals(0.0F, homeLight1.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight1.getX(), 0.01F);
      assertEquals(0.0F, homeLight1.getY(), 0.01F);
      assertFalse(homeLight1.isTexturable());
      assertEquals(0.0F, homeLight1.getWidth(), 0.01F);
      assertNull(homeLight1.getDescription());
      assertEquals(0.0F, homeLight1.getElevation(), 0.01F);
      assertNull(homeLight1.getName());
      assertEquals(0.0F, homeLight1.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeLight1.getNameAngle(), 0.01F);
      assertNull(homeLight1.getStaircaseCutOutShape());
      assertNull(homeLight1.getShininess());
      assertEquals(0.0F, homeLight1.getDepth(), 0.01F);
      assertNull(homeLight1.getColor());
      assertNull(homeLight1.getCatalogId());
      assertFalse(homeLight1.isMovable());
      assertEquals(0.0F, homeLight1.getHeight(), 0.01F);
      assertNull(homeLight1.getCurrency());
      assertEquals(0.5F, homeLight1.getPower(), 0.01F);
      assertFalse(homeLight2.isDeformable());
      assertFalse(homeLight2.isNameVisible());
      assertFalse(homeLight2.isBackFaceShown());
      assertFalse(homeLight2.isModelMirrored());
      assertTrue(homeLight2.isVisible());
      assertEquals(0.0F, homeLight2.getNameYOffset(), 0.01F);
      assertEquals(0.0F, homeLight2.getY(), 0.01F);
      assertEquals(0.0F, homeLight2.getX(), 0.01F);
      assertNull(homeLight2.getColor());
      assertEquals(0.0F, homeLight2.getAngle(), 0.01F);
      assertEquals(0.0F, homeLight2.getGroundElevation(), 0.01F);
      assertFalse(homeLight2.isTexturable());
      assertEquals(0.0F, homeLight2.getWidth(), 0.01F);
      assertFalse(homeLight2.isDoorOrWindow());
      assertNull(homeLight2.getDescription());
      assertEquals(0.0F, homeLight2.getElevation(), 0.01F);
      assertNull(homeLight2.getName());
      assertEquals(0.5F, homeLight2.getPower(), 0.01F);
      assertEquals(0.0F, homeLight2.getDepth(), 0.01F);
      assertEquals(0.0F, homeLight2.getNameAngle(), 0.01F);
      assertNull(homeLight2.getCatalogId());
      assertEquals(0.0F, homeLight2.getNameXOffset(), 0.01F);
      assertNull(homeLight2.getShininess());
      assertNull(homeLight2.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight2.getHeight(), 0.01F);
      assertFalse(homeLight2.isResizable());
      assertNull(homeLight2.getCurrency());
      assertFalse(homeLight2.isMovable());
      assertFalse(homeLight3.isResizable());
      assertFalse(homeLight3.isMovable());
      assertEquals(0.0F, homeLight3.getHeight(), 0.01F);
      assertNull(homeLight3.getShininess());
      assertNull(homeLight3.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight3.getNameAngle(), 0.01F);
      assertNull(homeLight3.getName());
      assertNull(homeLight3.getCurrency());
      assertEquals(0.5F, homeLight3.getPower(), 0.01F);
      assertNull(homeLight3.getColor());
      assertNull(homeLight3.getCatalogId());
      assertEquals(0.0F, homeLight3.getNameYOffset(), 0.01F);
      assertEquals(0.0F, homeLight3.getX(), 0.01F);
      assertFalse(homeLight3.isDoorOrWindow());
      assertFalse(homeLight3.isBackFaceShown());
      assertEquals(0.0F, homeLight3.getAngle(), 0.01F);
      assertFalse(homeLight3.isModelMirrored());
      assertFalse(homeLight3.isNameVisible());
      assertNull(homeLight3.getDescription());
      assertEquals(0.0F, homeLight3.getDepth(), 0.01F);
      assertTrue(homeLight3.isVisible());
      assertFalse(homeLight3.isDeformable());
      assertEquals(0.0F, homeLight3.getElevation(), 0.01F);
      assertEquals(0.0F, homeLight3.getWidth(), 0.01F);
      assertFalse(homeLight3.isTexturable());
      assertEquals(0.0F, homeLight3.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight3.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeLight3.getY(), 0.01F);
      
      String string1 = homeLight3.getDescription();
      assertNull(string1);
      assertNotSame(homeLight0, homeLight1);
      assertNotSame(homeLight0, homeLight2);
      assertNotSame(homeLight0, homeLight3);
      assertNotSame(homeLight1, homeLight0);
      assertNotSame(homeLight1, homeLight2);
      assertNotSame(homeLight1, homeLight3);
      assertNotSame(homeLight2, homeLight1);
      assertNotSame(homeLight2, homeLight0);
      assertNotSame(homeLight2, homeLight3);
      assertNotSame(homeLight3, homeLight0);
      assertNotSame(homeLight3, homeLight2);
      assertNotSame(homeLight3, homeLight1);
      assertFalse(homeLight0.equals((Object)homeLight1));
      assertFalse(homeLight0.equals((Object)homeLight2));
      assertFalse(homeLight0.equals((Object)homeLight3));
      assertFalse(homeLight1.equals((Object)homeLight0));
      assertFalse(homeLight1.equals((Object)homeLight2));
      assertFalse(homeLight1.equals((Object)homeLight3));
      assertFalse(homeLight2.equals((Object)homeLight1));
      assertFalse(homeLight2.equals((Object)homeLight0));
      assertFalse(homeLight2.equals((Object)homeLight3));
      assertFalse(homeLight3.equals((Object)homeLight0));
      assertFalse(homeLight3.equals((Object)homeLight2));
      assertFalse(homeLight3.equals((Object)homeLight1));
      assertFalse(homeLight0.isNameVisible());
      assertFalse(homeLight0.isDeformable());
      assertNull(homeLight0.getColor());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertFalse(homeLight0.isBackFaceShown());
      assertFalse(homeLight0.isModelMirrored());
      assertTrue(homeLight0.isVisible());
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertFalse(homeLight0.isMovable());
      assertFalse(homeLight0.isResizable());
      assertNull(homeLight0.getCurrency());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertNull(homeLight0.getCatalogId());
      assertNull(homeLight0.getName());
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertNull(homeLight0.getShininess());
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertFalse(homeLight0.isTexturable());
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      assertNull(homeLight0.getDescription());
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertEquals(0.0F, homeLight1.getNameYOffset(), 0.01F);
      assertEquals(2.2578979F, homeLight1.getAngle(), 0.01F);
      assertFalse(homeLight1.isNameVisible());
      assertFalse(homeLight1.isResizable());
      assertFalse(homeLight1.isDeformable());
      assertFalse(homeLight1.isModelMirrored());
      assertTrue(homeLight1.isVisible());
      assertFalse(homeLight1.isDoorOrWindow());
      assertFalse(homeLight1.isBackFaceShown());
      assertEquals(0.0F, homeLight1.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight1.getX(), 0.01F);
      assertEquals(0.0F, homeLight1.getY(), 0.01F);
      assertFalse(homeLight1.isTexturable());
      assertEquals(0.0F, homeLight1.getWidth(), 0.01F);
      assertNull(homeLight1.getDescription());
      assertEquals(0.0F, homeLight1.getElevation(), 0.01F);
      assertNull(homeLight1.getName());
      assertEquals(0.0F, homeLight1.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeLight1.getNameAngle(), 0.01F);
      assertNull(homeLight1.getStaircaseCutOutShape());
      assertNull(homeLight1.getShininess());
      assertEquals(0.0F, homeLight1.getDepth(), 0.01F);
      assertNull(homeLight1.getColor());
      assertNull(homeLight1.getCatalogId());
      assertFalse(homeLight1.isMovable());
      assertEquals(0.0F, homeLight1.getHeight(), 0.01F);
      assertNull(homeLight1.getCurrency());
      assertEquals(0.5F, homeLight1.getPower(), 0.01F);
      assertFalse(homeLight2.isDeformable());
      assertFalse(homeLight2.isNameVisible());
      assertFalse(homeLight2.isBackFaceShown());
      assertFalse(homeLight2.isModelMirrored());
      assertTrue(homeLight2.isVisible());
      assertEquals(0.0F, homeLight2.getNameYOffset(), 0.01F);
      assertEquals(0.0F, homeLight2.getY(), 0.01F);
      assertEquals(0.0F, homeLight2.getX(), 0.01F);
      assertNull(homeLight2.getColor());
      assertEquals(0.0F, homeLight2.getAngle(), 0.01F);
      assertEquals(0.0F, homeLight2.getGroundElevation(), 0.01F);
      assertFalse(homeLight2.isTexturable());
      assertEquals(0.0F, homeLight2.getWidth(), 0.01F);
      assertFalse(homeLight2.isDoorOrWindow());
      assertNull(homeLight2.getDescription());
      assertEquals(0.0F, homeLight2.getElevation(), 0.01F);
      assertNull(homeLight2.getName());
      assertEquals(0.5F, homeLight2.getPower(), 0.01F);
      assertEquals(0.0F, homeLight2.getDepth(), 0.01F);
      assertEquals(0.0F, homeLight2.getNameAngle(), 0.01F);
      assertNull(homeLight2.getCatalogId());
      assertEquals(0.0F, homeLight2.getNameXOffset(), 0.01F);
      assertNull(homeLight2.getShininess());
      assertNull(homeLight2.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight2.getHeight(), 0.01F);
      assertFalse(homeLight2.isResizable());
      assertNull(homeLight2.getCurrency());
      assertFalse(homeLight2.isMovable());
      assertFalse(homeLight3.isResizable());
      assertFalse(homeLight3.isMovable());
      assertEquals(0.0F, homeLight3.getHeight(), 0.01F);
      assertNull(homeLight3.getShininess());
      assertNull(homeLight3.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight3.getNameAngle(), 0.01F);
      assertNull(homeLight3.getName());
      assertNull(homeLight3.getCurrency());
      assertEquals(0.5F, homeLight3.getPower(), 0.01F);
      assertNull(homeLight3.getColor());
      assertNull(homeLight3.getCatalogId());
      assertEquals(0.0F, homeLight3.getNameYOffset(), 0.01F);
      assertEquals(0.0F, homeLight3.getX(), 0.01F);
      assertFalse(homeLight3.isDoorOrWindow());
      assertFalse(homeLight3.isBackFaceShown());
      assertEquals(0.0F, homeLight3.getAngle(), 0.01F);
      assertFalse(homeLight3.isModelMirrored());
      assertFalse(homeLight3.isNameVisible());
      assertNull(homeLight3.getDescription());
      assertEquals(0.0F, homeLight3.getDepth(), 0.01F);
      assertTrue(homeLight3.isVisible());
      assertFalse(homeLight3.isDeformable());
      assertEquals(0.0F, homeLight3.getElevation(), 0.01F);
      assertEquals(0.0F, homeLight3.getWidth(), 0.01F);
      assertFalse(homeLight3.isTexturable());
      assertEquals(0.0F, homeLight3.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight3.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeLight3.getY(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      Integer integer0 = new Integer(1431655742);
      assertNotNull(integer0);
      assertEquals(1431655742, (int)integer0);
      
      Light light0 = mock(Light.class, new ViolatedAssumptionAnswer());
      doReturn((LightSource[]) null).when(light0).getLightSources();
      doReturn((Integer) null).when(light0).getColor();
      doReturn((String) null).when(light0).getCurrency();
      doReturn(0.0F).when(light0).getDepth();
      doReturn((String) null).when(light0).getDescription();
      doReturn(0.0F).when(light0).getElevation();
      doReturn(0.0F).when(light0).getHeight();
      doReturn((Content) null).when(light0).getIcon();
      doReturn((Content) null).when(light0).getModel();
      doReturn((float[][]) null).when(light0).getModelRotation();
      doReturn((String) null).when(light0).getName();
      doReturn((Content) null).when(light0).getPlanIcon();
      doReturn((BigDecimal) null).when(light0).getPrice();
      doReturn((String) null).when(light0).getStaircaseCutOutShape();
      doReturn((BigDecimal) null).when(light0).getValueAddedTaxPercentage();
      doReturn(0.0F).when(light0).getWidth();
      doReturn(false).when(light0).isBackFaceShown();
      doReturn(false).when(light0).isDeformable();
      doReturn(false).when(light0).isDoorOrWindow();
      doReturn(false).when(light0).isMovable();
      doReturn(false).when(light0).isResizable();
      doReturn(false).when(light0).isTexturable();
      HomeLight homeLight0 = new HomeLight(light0);
      assertNotNull(homeLight0);
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertNull(homeLight0.getDescription());
      assertFalse(homeLight0.isDoorOrWindow());
      assertFalse(homeLight0.isTexturable());
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertNull(homeLight0.getCurrency());
      assertTrue(homeLight0.isVisible());
      assertNull(homeLight0.getShininess());
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertFalse(homeLight0.isDeformable());
      assertFalse(homeLight0.isResizable());
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertFalse(homeLight0.isMovable());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertFalse(homeLight0.isNameVisible());
      assertNull(homeLight0.getName());
      assertNull(homeLight0.getCatalogId());
      assertNull(homeLight0.getColor());
      assertFalse(homeLight0.isBackFaceShown());
      assertFalse(homeLight0.isModelMirrored());
      
      homeLight0.setY(1431655742);
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertNull(homeLight0.getDescription());
      assertFalse(homeLight0.isDoorOrWindow());
      assertFalse(homeLight0.isTexturable());
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals(1.43165568E9F, homeLight0.getY(), 0.01F);
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertNull(homeLight0.getCurrency());
      assertTrue(homeLight0.isVisible());
      assertNull(homeLight0.getShininess());
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertFalse(homeLight0.isDeformable());
      assertFalse(homeLight0.isResizable());
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertFalse(homeLight0.isMovable());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertFalse(homeLight0.isNameVisible());
      assertNull(homeLight0.getName());
      assertNull(homeLight0.getCatalogId());
      assertNull(homeLight0.getColor());
      assertFalse(homeLight0.isBackFaceShown());
      assertFalse(homeLight0.isModelMirrored());
      
      BigDecimal bigDecimal0 = homeLight0.getValueAddedTax();
      assertNull(bigDecimal0);
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertNull(homeLight0.getDescription());
      assertFalse(homeLight0.isDoorOrWindow());
      assertFalse(homeLight0.isTexturable());
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals(1.43165568E9F, homeLight0.getY(), 0.01F);
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertNull(homeLight0.getCurrency());
      assertTrue(homeLight0.isVisible());
      assertNull(homeLight0.getShininess());
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertFalse(homeLight0.isDeformable());
      assertFalse(homeLight0.isResizable());
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertFalse(homeLight0.isMovable());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertFalse(homeLight0.isNameVisible());
      assertNull(homeLight0.getName());
      assertNull(homeLight0.getCatalogId());
      assertNull(homeLight0.getColor());
      assertFalse(homeLight0.isBackFaceShown());
      assertFalse(homeLight0.isModelMirrored());
      
      boolean boolean0 = homeLight0.isTopRightPointAt(1431655742, 1431655742, 3.4028235E38F);
      assertFalse(boolean0);
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertNull(homeLight0.getDescription());
      assertFalse(homeLight0.isDoorOrWindow());
      assertFalse(homeLight0.isTexturable());
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals(1.43165568E9F, homeLight0.getY(), 0.01F);
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertNull(homeLight0.getCurrency());
      assertTrue(homeLight0.isVisible());
      assertNull(homeLight0.getShininess());
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertFalse(homeLight0.isDeformable());
      assertFalse(homeLight0.isResizable());
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertFalse(homeLight0.isMovable());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertFalse(homeLight0.isNameVisible());
      assertNull(homeLight0.getName());
      assertNull(homeLight0.getCatalogId());
      assertNull(homeLight0.getColor());
      assertFalse(homeLight0.isBackFaceShown());
      assertFalse(homeLight0.isModelMirrored());
      
      String string0 = homeLight0.getName();
      assertNull(string0);
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertNull(homeLight0.getDescription());
      assertFalse(homeLight0.isDoorOrWindow());
      assertFalse(homeLight0.isTexturable());
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals(1.43165568E9F, homeLight0.getY(), 0.01F);
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertNull(homeLight0.getCurrency());
      assertTrue(homeLight0.isVisible());
      assertNull(homeLight0.getShininess());
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertFalse(homeLight0.isDeformable());
      assertFalse(homeLight0.isResizable());
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertFalse(homeLight0.isMovable());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertFalse(homeLight0.isNameVisible());
      assertNull(homeLight0.getName());
      assertNull(homeLight0.getCatalogId());
      assertNull(homeLight0.getColor());
      assertFalse(homeLight0.isBackFaceShown());
      assertFalse(homeLight0.isModelMirrored());
      
      Level level0 = homeLight0.getLevel();
      assertNull(level0);
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertNull(homeLight0.getDescription());
      assertFalse(homeLight0.isDoorOrWindow());
      assertFalse(homeLight0.isTexturable());
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals(1.43165568E9F, homeLight0.getY(), 0.01F);
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertNull(homeLight0.getCurrency());
      assertTrue(homeLight0.isVisible());
      assertNull(homeLight0.getShininess());
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertFalse(homeLight0.isDeformable());
      assertFalse(homeLight0.isResizable());
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertFalse(homeLight0.isMovable());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertFalse(homeLight0.isNameVisible());
      assertNull(homeLight0.getName());
      assertNull(homeLight0.getCatalogId());
      assertNull(homeLight0.getColor());
      assertFalse(homeLight0.isBackFaceShown());
      assertFalse(homeLight0.isModelMirrored());
      
      HomeLight homeLight1 = homeLight0.clone();
      assertNotNull(homeLight1);
      assertNotSame(homeLight0, homeLight1);
      assertNotSame(homeLight1, homeLight0);
      assertFalse(homeLight1.equals((Object)homeLight0));
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertNull(homeLight0.getDescription());
      assertFalse(homeLight0.isDoorOrWindow());
      assertFalse(homeLight0.isTexturable());
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals(1.43165568E9F, homeLight0.getY(), 0.01F);
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertNull(homeLight0.getCurrency());
      assertTrue(homeLight0.isVisible());
      assertNull(homeLight0.getShininess());
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertFalse(homeLight0.isDeformable());
      assertFalse(homeLight0.isResizable());
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertFalse(homeLight0.isMovable());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertFalse(homeLight0.isNameVisible());
      assertNull(homeLight0.getName());
      assertNull(homeLight0.getCatalogId());
      assertNull(homeLight0.getColor());
      assertFalse(homeLight0.isBackFaceShown());
      assertFalse(homeLight0.isModelMirrored());
      assertEquals(0.0F, homeLight1.getElevation(), 0.01F);
      assertNull(homeLight1.getName());
      assertEquals(0.0F, homeLight1.getNameXOffset(), 0.01F);
      assertEquals(1.43165568E9F, homeLight1.getY(), 0.01F);
      assertEquals(0.0F, homeLight1.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight1.getNameAngle(), 0.01F);
      assertNull(homeLight1.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight1.getDepth(), 0.01F);
      assertFalse(homeLight1.isBackFaceShown());
      assertFalse(homeLight1.isModelMirrored());
      assertFalse(homeLight1.isDoorOrWindow());
      assertEquals(0.0F, homeLight1.getX(), 0.01F);
      assertEquals(0.0F, homeLight1.getAngle(), 0.01F);
      assertFalse(homeLight1.isNameVisible());
      assertFalse(homeLight1.isTexturable());
      assertNull(homeLight1.getDescription());
      assertEquals(0.0F, homeLight1.getWidth(), 0.01F);
      assertTrue(homeLight1.isVisible());
      assertEquals(0.0F, homeLight1.getNameYOffset(), 0.01F);
      assertFalse(homeLight1.isDeformable());
      assertFalse(homeLight1.isResizable());
      assertNull(homeLight1.getShininess());
      assertNull(homeLight1.getCatalogId());
      assertNull(homeLight1.getColor());
      assertEquals(0.0F, homeLight1.getHeight(), 0.01F);
      assertFalse(homeLight1.isMovable());
      assertNull(homeLight1.getCurrency());
      assertEquals(0.5F, homeLight1.getPower(), 0.01F);
      
      homeLight1.setAngle(39.0F);
      assertNotSame(homeLight0, homeLight1);
      assertNotSame(homeLight1, homeLight0);
      assertFalse(homeLight0.equals((Object)homeLight1));
      assertFalse(homeLight1.equals((Object)homeLight0));
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertNull(homeLight0.getDescription());
      assertFalse(homeLight0.isDoorOrWindow());
      assertFalse(homeLight0.isTexturable());
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals(1.43165568E9F, homeLight0.getY(), 0.01F);
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertNull(homeLight0.getCurrency());
      assertTrue(homeLight0.isVisible());
      assertNull(homeLight0.getShininess());
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertFalse(homeLight0.isDeformable());
      assertFalse(homeLight0.isResizable());
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertFalse(homeLight0.isMovable());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertFalse(homeLight0.isNameVisible());
      assertNull(homeLight0.getName());
      assertNull(homeLight0.getCatalogId());
      assertNull(homeLight0.getColor());
      assertFalse(homeLight0.isBackFaceShown());
      assertFalse(homeLight0.isModelMirrored());
      assertEquals(0.0F, homeLight1.getElevation(), 0.01F);
      assertEquals(1.3008882F, homeLight1.getAngle(), 0.01F);
      assertNull(homeLight1.getName());
      assertEquals(0.0F, homeLight1.getNameXOffset(), 0.01F);
      assertEquals(1.43165568E9F, homeLight1.getY(), 0.01F);
      assertEquals(0.0F, homeLight1.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight1.getNameAngle(), 0.01F);
      assertNull(homeLight1.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight1.getDepth(), 0.01F);
      assertFalse(homeLight1.isBackFaceShown());
      assertFalse(homeLight1.isModelMirrored());
      assertFalse(homeLight1.isDoorOrWindow());
      assertEquals(0.0F, homeLight1.getX(), 0.01F);
      assertFalse(homeLight1.isNameVisible());
      assertFalse(homeLight1.isTexturable());
      assertNull(homeLight1.getDescription());
      assertEquals(0.0F, homeLight1.getWidth(), 0.01F);
      assertTrue(homeLight1.isVisible());
      assertEquals(0.0F, homeLight1.getNameYOffset(), 0.01F);
      assertFalse(homeLight1.isDeformable());
      assertFalse(homeLight1.isResizable());
      assertNull(homeLight1.getShininess());
      assertNull(homeLight1.getCatalogId());
      assertNull(homeLight1.getColor());
      assertEquals(0.0F, homeLight1.getHeight(), 0.01F);
      assertFalse(homeLight1.isMovable());
      assertNull(homeLight1.getCurrency());
      assertEquals(0.5F, homeLight1.getPower(), 0.01F);
      
      homeLight0.setName("LEVEL");
      assertNotSame(homeLight0, homeLight1);
      assertFalse(homeLight0.equals((Object)homeLight1));
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertNull(homeLight0.getDescription());
      assertFalse(homeLight0.isDoorOrWindow());
      assertFalse(homeLight0.isTexturable());
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals(1.43165568E9F, homeLight0.getY(), 0.01F);
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertNull(homeLight0.getCurrency());
      assertTrue(homeLight0.isVisible());
      assertNull(homeLight0.getShininess());
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertFalse(homeLight0.isDeformable());
      assertFalse(homeLight0.isResizable());
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertFalse(homeLight0.isMovable());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertFalse(homeLight0.isNameVisible());
      assertNull(homeLight0.getCatalogId());
      assertNull(homeLight0.getColor());
      assertEquals("LEVEL", homeLight0.getName());
      assertFalse(homeLight0.isBackFaceShown());
      assertFalse(homeLight0.isModelMirrored());
      
      Integer integer1 = Integer.valueOf((int) (byte)62);
      assertNotNull(integer1);
      assertFalse(integer1.equals((Object)integer0));
      assertEquals(62, (int)integer1);
      
      // Undeclared exception!
      try { 
        homeLight1.setColor(integer1);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Piece isn't texturable
         //
         verifyException("com.eteks.sweethome3d.model.HomePieceOfFurniture", e);
      }
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      Light light0 = mock(Light.class, new ViolatedAssumptionAnswer());
      doReturn((LightSource[]) null).when(light0).getLightSources();
      doReturn((Integer) null).when(light0).getColor();
      doReturn((String) null).when(light0).getCurrency();
      doReturn(0.0F).when(light0).getDepth();
      doReturn((String) null).when(light0).getDescription();
      doReturn(0.0F).when(light0).getElevation();
      doReturn(0.0F).when(light0).getHeight();
      doReturn((Content) null).when(light0).getIcon();
      doReturn((Content) null).when(light0).getModel();
      doReturn((float[][]) null).when(light0).getModelRotation();
      doReturn((String) null).when(light0).getName();
      doReturn((Content) null).when(light0).getPlanIcon();
      doReturn((BigDecimal) null).when(light0).getPrice();
      doReturn((String) null).when(light0).getStaircaseCutOutShape();
      doReturn((BigDecimal) null).when(light0).getValueAddedTaxPercentage();
      doReturn(0.0F).when(light0).getWidth();
      doReturn(false).when(light0).isBackFaceShown();
      doReturn(false).when(light0).isDeformable();
      doReturn(false).when(light0).isDoorOrWindow();
      doReturn(false).when(light0).isMovable();
      doReturn(false).when(light0).isResizable();
      doReturn(false).when(light0).isTexturable();
      HomeLight homeLight0 = new HomeLight(light0);
      assertNotNull(homeLight0);
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertFalse(homeLight0.isTexturable());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertNull(homeLight0.getDescription());
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      assertNull(homeLight0.getShininess());
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertFalse(homeLight0.isResizable());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertFalse(homeLight0.isDeformable());
      assertTrue(homeLight0.isVisible());
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertFalse(homeLight0.isMovable());
      assertNull(homeLight0.getCurrency());
      assertFalse(homeLight0.isBackFaceShown());
      assertFalse(homeLight0.isModelMirrored());
      assertNull(homeLight0.getCatalogId());
      assertNull(homeLight0.getColor());
      assertFalse(homeLight0.isNameVisible());
      assertNull(homeLight0.getName());
      
      homeLight0.setElevation((-1.0F));
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals((-1.0F), homeLight0.getGroundElevation(), 0.01F);
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertFalse(homeLight0.isTexturable());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertNull(homeLight0.getDescription());
      assertEquals((-1.0F), homeLight0.getElevation(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      assertNull(homeLight0.getShininess());
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertFalse(homeLight0.isResizable());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertFalse(homeLight0.isDeformable());
      assertTrue(homeLight0.isVisible());
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertFalse(homeLight0.isMovable());
      assertNull(homeLight0.getCurrency());
      assertFalse(homeLight0.isBackFaceShown());
      assertFalse(homeLight0.isModelMirrored());
      assertNull(homeLight0.getCatalogId());
      assertNull(homeLight0.getColor());
      assertFalse(homeLight0.isNameVisible());
      assertNull(homeLight0.getName());
      
      homeLight0.setNameAngle((-1.0F));
      assertEquals(5.2831855F, homeLight0.getNameAngle(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals((-1.0F), homeLight0.getGroundElevation(), 0.01F);
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertFalse(homeLight0.isTexturable());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertNull(homeLight0.getDescription());
      assertEquals((-1.0F), homeLight0.getElevation(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      assertNull(homeLight0.getShininess());
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertFalse(homeLight0.isResizable());
      assertFalse(homeLight0.isDeformable());
      assertTrue(homeLight0.isVisible());
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertFalse(homeLight0.isMovable());
      assertNull(homeLight0.getCurrency());
      assertFalse(homeLight0.isBackFaceShown());
      assertFalse(homeLight0.isModelMirrored());
      assertNull(homeLight0.getCatalogId());
      assertNull(homeLight0.getColor());
      assertFalse(homeLight0.isNameVisible());
      assertNull(homeLight0.getName());
      
      homeLight0.setY((-1.0F));
      assertEquals(5.2831855F, homeLight0.getNameAngle(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals((-1.0F), homeLight0.getGroundElevation(), 0.01F);
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertFalse(homeLight0.isTexturable());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertNull(homeLight0.getDescription());
      assertEquals((-1.0F), homeLight0.getElevation(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      assertNull(homeLight0.getShininess());
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertEquals((-1.0F), homeLight0.getY(), 0.01F);
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertFalse(homeLight0.isResizable());
      assertFalse(homeLight0.isDeformable());
      assertTrue(homeLight0.isVisible());
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertFalse(homeLight0.isMovable());
      assertNull(homeLight0.getCurrency());
      assertFalse(homeLight0.isBackFaceShown());
      assertFalse(homeLight0.isModelMirrored());
      assertNull(homeLight0.getCatalogId());
      assertNull(homeLight0.getColor());
      assertFalse(homeLight0.isNameVisible());
      assertNull(homeLight0.getName());
      
      boolean boolean1 = homeLight0.isBottomLeftPointAt((-1.0F), (-1.0F), (-1.0F));
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      assertEquals(5.2831855F, homeLight0.getNameAngle(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals((-1.0F), homeLight0.getGroundElevation(), 0.01F);
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertFalse(homeLight0.isTexturable());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertNull(homeLight0.getDescription());
      assertEquals((-1.0F), homeLight0.getElevation(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      assertNull(homeLight0.getShininess());
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertEquals((-1.0F), homeLight0.getY(), 0.01F);
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertFalse(homeLight0.isResizable());
      assertFalse(homeLight0.isDeformable());
      assertTrue(homeLight0.isVisible());
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertFalse(homeLight0.isMovable());
      assertNull(homeLight0.getCurrency());
      assertFalse(homeLight0.isBackFaceShown());
      assertFalse(homeLight0.isModelMirrored());
      assertNull(homeLight0.getCatalogId());
      assertNull(homeLight0.getColor());
      assertFalse(homeLight0.isNameVisible());
      assertNull(homeLight0.getName());
      
      BigDecimal bigDecimal0 = homeLight0.getPriceValueAddedTaxIncluded();
      assertNull(bigDecimal0);
      assertEquals(5.2831855F, homeLight0.getNameAngle(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals((-1.0F), homeLight0.getGroundElevation(), 0.01F);
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertFalse(homeLight0.isTexturable());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertNull(homeLight0.getDescription());
      assertEquals((-1.0F), homeLight0.getElevation(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      assertNull(homeLight0.getShininess());
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertEquals((-1.0F), homeLight0.getY(), 0.01F);
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertFalse(homeLight0.isResizable());
      assertFalse(homeLight0.isDeformable());
      assertTrue(homeLight0.isVisible());
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertFalse(homeLight0.isMovable());
      assertNull(homeLight0.getCurrency());
      assertFalse(homeLight0.isBackFaceShown());
      assertFalse(homeLight0.isModelMirrored());
      assertNull(homeLight0.getCatalogId());
      assertNull(homeLight0.getColor());
      assertFalse(homeLight0.isNameVisible());
      assertNull(homeLight0.getName());
      
      homeLight0.setDescription("CW9$NS K:I");
      assertEquals(5.2831855F, homeLight0.getNameAngle(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals((-1.0F), homeLight0.getGroundElevation(), 0.01F);
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertFalse(homeLight0.isTexturable());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertEquals((-1.0F), homeLight0.getElevation(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      assertNull(homeLight0.getShininess());
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertEquals((-1.0F), homeLight0.getY(), 0.01F);
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertFalse(homeLight0.isResizable());
      assertFalse(homeLight0.isDeformable());
      assertTrue(homeLight0.isVisible());
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertEquals("CW9$NS K:I", homeLight0.getDescription());
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertFalse(homeLight0.isMovable());
      assertNull(homeLight0.getCurrency());
      assertFalse(homeLight0.isBackFaceShown());
      assertFalse(homeLight0.isModelMirrored());
      assertNull(homeLight0.getCatalogId());
      assertNull(homeLight0.getColor());
      assertFalse(homeLight0.isNameVisible());
      assertNull(homeLight0.getName());
      
      // Undeclared exception!
      try { 
        homeLight0.setTexture((HomeTexture) null);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Piece isn't texturable
         //
         verifyException("com.eteks.sweethome3d.model.HomePieceOfFurniture", e);
      }
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      Integer integer0 = new Integer(1431655765);
      assertNotNull(integer0);
      assertEquals(1431655765, (int)integer0);
      
      Light light0 = mock(Light.class, new ViolatedAssumptionAnswer());
      doReturn((LightSource[]) null).when(light0).getLightSources();
      doReturn((Integer) null).when(light0).getColor();
      doReturn((String) null).when(light0).getCurrency();
      doReturn(0.0F).when(light0).getDepth();
      doReturn((String) null).when(light0).getDescription();
      doReturn(0.0F).when(light0).getElevation();
      doReturn(0.0F).when(light0).getHeight();
      doReturn((Content) null).when(light0).getIcon();
      doReturn((Content) null).when(light0).getModel();
      doReturn((float[][]) null).when(light0).getModelRotation();
      doReturn((String) null).when(light0).getName();
      doReturn((Content) null).when(light0).getPlanIcon();
      doReturn((BigDecimal) null).when(light0).getPrice();
      doReturn((String) null).when(light0).getStaircaseCutOutShape();
      doReturn((BigDecimal) null).when(light0).getValueAddedTaxPercentage();
      doReturn(0.0F).when(light0).getWidth();
      doReturn(false).when(light0).isBackFaceShown();
      doReturn(false).when(light0).isDeformable();
      doReturn(false).when(light0).isDoorOrWindow();
      doReturn(false).when(light0).isMovable();
      doReturn(false).when(light0).isResizable();
      doReturn(false).when(light0).isTexturable();
      byte[] byteArray0 = new byte[5];
      byte byte0 = (byte)1;
      byteArray0[1] = (byte)1;
      HomeLight homeLight0 = new HomeLight(light0);
      assertNotNull(homeLight0);
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertFalse(homeLight0.isTexturable());
      assertFalse(homeLight0.isBackFaceShown());
      assertFalse(homeLight0.isModelMirrored());
      assertNull(homeLight0.getName());
      assertFalse(homeLight0.isNameVisible());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertFalse(homeLight0.isDeformable());
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertNull(homeLight0.getDescription());
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertTrue(homeLight0.isVisible());
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertFalse(homeLight0.isResizable());
      assertFalse(homeLight0.isMovable());
      assertNull(homeLight0.getShininess());
      assertNull(homeLight0.getCurrency());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertNull(homeLight0.getCatalogId());
      assertNull(homeLight0.getColor());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      
      homeLight0.setY(1431655765);
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertFalse(homeLight0.isTexturable());
      assertFalse(homeLight0.isBackFaceShown());
      assertFalse(homeLight0.isModelMirrored());
      assertNull(homeLight0.getName());
      assertFalse(homeLight0.isNameVisible());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertFalse(homeLight0.isDeformable());
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertNull(homeLight0.getDescription());
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertTrue(homeLight0.isVisible());
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertFalse(homeLight0.isResizable());
      assertFalse(homeLight0.isMovable());
      assertNull(homeLight0.getShininess());
      assertEquals(1.43165581E9F, homeLight0.getY(), 0.01F);
      assertNull(homeLight0.getCurrency());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertNull(homeLight0.getCatalogId());
      assertNull(homeLight0.getColor());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      
      BigDecimal bigDecimal0 = homeLight0.getValueAddedTax();
      assertNull(bigDecimal0);
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertFalse(homeLight0.isTexturable());
      assertFalse(homeLight0.isBackFaceShown());
      assertFalse(homeLight0.isModelMirrored());
      assertNull(homeLight0.getName());
      assertFalse(homeLight0.isNameVisible());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertFalse(homeLight0.isDeformable());
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertNull(homeLight0.getDescription());
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertTrue(homeLight0.isVisible());
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertFalse(homeLight0.isResizable());
      assertFalse(homeLight0.isMovable());
      assertNull(homeLight0.getShininess());
      assertEquals(1.43165581E9F, homeLight0.getY(), 0.01F);
      assertNull(homeLight0.getCurrency());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertNull(homeLight0.getCatalogId());
      assertNull(homeLight0.getColor());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      
      String string0 = homeLight0.getName();
      assertNull(string0);
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertFalse(homeLight0.isTexturable());
      assertFalse(homeLight0.isBackFaceShown());
      assertFalse(homeLight0.isModelMirrored());
      assertNull(homeLight0.getName());
      assertFalse(homeLight0.isNameVisible());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertFalse(homeLight0.isDeformable());
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertNull(homeLight0.getDescription());
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertTrue(homeLight0.isVisible());
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertFalse(homeLight0.isResizable());
      assertFalse(homeLight0.isMovable());
      assertNull(homeLight0.getShininess());
      assertEquals(1.43165581E9F, homeLight0.getY(), 0.01F);
      assertNull(homeLight0.getCurrency());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertNull(homeLight0.getCatalogId());
      assertNull(homeLight0.getColor());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      
      Level level0 = homeLight0.getLevel();
      assertNull(level0);
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertFalse(homeLight0.isTexturable());
      assertFalse(homeLight0.isBackFaceShown());
      assertFalse(homeLight0.isModelMirrored());
      assertNull(homeLight0.getName());
      assertFalse(homeLight0.isNameVisible());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertFalse(homeLight0.isDeformable());
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertNull(homeLight0.getDescription());
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertTrue(homeLight0.isVisible());
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertFalse(homeLight0.isResizable());
      assertFalse(homeLight0.isMovable());
      assertNull(homeLight0.getShininess());
      assertEquals(1.43165581E9F, homeLight0.getY(), 0.01F);
      assertNull(homeLight0.getCurrency());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertNull(homeLight0.getCatalogId());
      assertNull(homeLight0.getColor());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      
      HomeLight homeLight1 = homeLight0.clone();
      assertNotNull(homeLight1);
      assertNotSame(homeLight0, homeLight1);
      assertNotSame(homeLight1, homeLight0);
      assertFalse(homeLight1.equals((Object)homeLight0));
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertFalse(homeLight0.isTexturable());
      assertFalse(homeLight0.isBackFaceShown());
      assertFalse(homeLight0.isModelMirrored());
      assertNull(homeLight0.getName());
      assertFalse(homeLight0.isNameVisible());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertFalse(homeLight0.isDeformable());
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertNull(homeLight0.getDescription());
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertTrue(homeLight0.isVisible());
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertFalse(homeLight0.isResizable());
      assertFalse(homeLight0.isMovable());
      assertNull(homeLight0.getShininess());
      assertEquals(1.43165581E9F, homeLight0.getY(), 0.01F);
      assertNull(homeLight0.getCurrency());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertNull(homeLight0.getCatalogId());
      assertNull(homeLight0.getColor());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertNull(homeLight1.getCurrency());
      assertEquals(0.0F, homeLight1.getWidth(), 0.01F);
      assertFalse(homeLight1.isDeformable());
      assertFalse(homeLight1.isNameVisible());
      assertFalse(homeLight1.isMovable());
      assertEquals(0.0F, homeLight1.getHeight(), 0.01F);
      assertFalse(homeLight1.isBackFaceShown());
      assertFalse(homeLight1.isModelMirrored());
      assertNull(homeLight1.getColor());
      assertNull(homeLight1.getCatalogId());
      assertEquals(0.0F, homeLight1.getNameYOffset(), 0.01F);
      assertEquals(1.43165581E9F, homeLight1.getY(), 0.01F);
      assertEquals(0.0F, homeLight1.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeLight1.getDepth(), 0.01F);
      assertNull(homeLight1.getName());
      assertEquals(0.0F, homeLight1.getElevation(), 0.01F);
      assertEquals(0.5F, homeLight1.getPower(), 0.01F);
      assertNull(homeLight1.getDescription());
      assertEquals(0.0F, homeLight1.getNameAngle(), 0.01F);
      assertFalse(homeLight1.isResizable());
      assertEquals(0.0F, homeLight1.getAngle(), 0.01F);
      assertNull(homeLight1.getShininess());
      assertFalse(homeLight1.isTexturable());
      assertFalse(homeLight1.isDoorOrWindow());
      assertNull(homeLight1.getStaircaseCutOutShape());
      assertTrue(homeLight1.isVisible());
      assertEquals(0.0F, homeLight1.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight1.getX(), 0.01F);
      
      homeLight1.setAngle(39.641678F);
      assertNotSame(homeLight0, homeLight1);
      assertNotSame(homeLight1, homeLight0);
      assertFalse(homeLight0.equals((Object)homeLight1));
      assertFalse(homeLight1.equals((Object)homeLight0));
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertFalse(homeLight0.isTexturable());
      assertFalse(homeLight0.isBackFaceShown());
      assertFalse(homeLight0.isModelMirrored());
      assertNull(homeLight0.getName());
      assertFalse(homeLight0.isNameVisible());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertFalse(homeLight0.isDeformable());
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertNull(homeLight0.getDescription());
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertTrue(homeLight0.isVisible());
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertFalse(homeLight0.isResizable());
      assertFalse(homeLight0.isMovable());
      assertNull(homeLight0.getShininess());
      assertEquals(1.43165581E9F, homeLight0.getY(), 0.01F);
      assertNull(homeLight0.getCurrency());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertNull(homeLight0.getCatalogId());
      assertNull(homeLight0.getColor());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertNull(homeLight1.getCurrency());
      assertEquals(0.0F, homeLight1.getWidth(), 0.01F);
      assertFalse(homeLight1.isDeformable());
      assertFalse(homeLight1.isNameVisible());
      assertFalse(homeLight1.isMovable());
      assertEquals(0.0F, homeLight1.getHeight(), 0.01F);
      assertFalse(homeLight1.isBackFaceShown());
      assertFalse(homeLight1.isModelMirrored());
      assertNull(homeLight1.getColor());
      assertNull(homeLight1.getCatalogId());
      assertEquals(0.0F, homeLight1.getNameYOffset(), 0.01F);
      assertEquals(1.43165581E9F, homeLight1.getY(), 0.01F);
      assertEquals(0.0F, homeLight1.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeLight1.getDepth(), 0.01F);
      assertNull(homeLight1.getName());
      assertEquals(0.0F, homeLight1.getElevation(), 0.01F);
      assertEquals(0.5F, homeLight1.getPower(), 0.01F);
      assertNull(homeLight1.getDescription());
      assertEquals(0.0F, homeLight1.getNameAngle(), 0.01F);
      assertEquals(1.942566F, homeLight1.getAngle(), 0.01F);
      assertFalse(homeLight1.isResizable());
      assertNull(homeLight1.getShininess());
      assertFalse(homeLight1.isTexturable());
      assertFalse(homeLight1.isDoorOrWindow());
      assertNull(homeLight1.getStaircaseCutOutShape());
      assertTrue(homeLight1.isVisible());
      assertEquals(0.0F, homeLight1.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight1.getX(), 0.01F);
      
      float float0 = 430.6548F;
      homeLight0.setY(430.6548F);
      assertNotSame(homeLight0, homeLight1);
      assertFalse(homeLight0.equals((Object)homeLight1));
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertFalse(homeLight0.isTexturable());
      assertFalse(homeLight0.isBackFaceShown());
      assertFalse(homeLight0.isModelMirrored());
      assertNull(homeLight0.getName());
      assertFalse(homeLight0.isNameVisible());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertFalse(homeLight0.isDeformable());
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertNull(homeLight0.getDescription());
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertTrue(homeLight0.isVisible());
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertEquals(430.6548F, homeLight0.getY(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertFalse(homeLight0.isResizable());
      assertFalse(homeLight0.isMovable());
      assertNull(homeLight0.getShininess());
      assertNull(homeLight0.getCurrency());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertNull(homeLight0.getCatalogId());
      assertNull(homeLight0.getColor());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      
      BigDecimal bigDecimal1 = homeLight0.getValueAddedTax();
      assertNull(bigDecimal1);
      assertNotSame(homeLight0, homeLight1);
      assertFalse(homeLight0.equals((Object)homeLight1));
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertFalse(homeLight0.isTexturable());
      assertFalse(homeLight0.isBackFaceShown());
      assertFalse(homeLight0.isModelMirrored());
      assertNull(homeLight0.getName());
      assertFalse(homeLight0.isNameVisible());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertFalse(homeLight0.isDeformable());
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertNull(homeLight0.getDescription());
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertTrue(homeLight0.isVisible());
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertEquals(430.6548F, homeLight0.getY(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertFalse(homeLight0.isResizable());
      assertFalse(homeLight0.isMovable());
      assertNull(homeLight0.getShininess());
      assertNull(homeLight0.getCurrency());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertNull(homeLight0.getCatalogId());
      assertNull(homeLight0.getColor());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      
      Level level1 = homeLight1.getLevel();
      assertNull(level1);
      assertNotSame(homeLight0, homeLight1);
      assertNotSame(homeLight1, homeLight0);
      assertFalse(homeLight0.equals((Object)homeLight1));
      assertFalse(homeLight1.equals((Object)homeLight0));
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertFalse(homeLight0.isTexturable());
      assertFalse(homeLight0.isBackFaceShown());
      assertFalse(homeLight0.isModelMirrored());
      assertNull(homeLight0.getName());
      assertFalse(homeLight0.isNameVisible());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertFalse(homeLight0.isDeformable());
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertNull(homeLight0.getDescription());
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertTrue(homeLight0.isVisible());
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertEquals(430.6548F, homeLight0.getY(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertFalse(homeLight0.isResizable());
      assertFalse(homeLight0.isMovable());
      assertNull(homeLight0.getShininess());
      assertNull(homeLight0.getCurrency());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertNull(homeLight0.getCatalogId());
      assertNull(homeLight0.getColor());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertNull(homeLight1.getCurrency());
      assertEquals(0.0F, homeLight1.getWidth(), 0.01F);
      assertFalse(homeLight1.isDeformable());
      assertFalse(homeLight1.isNameVisible());
      assertFalse(homeLight1.isMovable());
      assertEquals(0.0F, homeLight1.getHeight(), 0.01F);
      assertFalse(homeLight1.isBackFaceShown());
      assertFalse(homeLight1.isModelMirrored());
      assertNull(homeLight1.getColor());
      assertNull(homeLight1.getCatalogId());
      assertEquals(0.0F, homeLight1.getNameYOffset(), 0.01F);
      assertEquals(1.43165581E9F, homeLight1.getY(), 0.01F);
      assertEquals(0.0F, homeLight1.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeLight1.getDepth(), 0.01F);
      assertNull(homeLight1.getName());
      assertEquals(0.0F, homeLight1.getElevation(), 0.01F);
      assertEquals(0.5F, homeLight1.getPower(), 0.01F);
      assertNull(homeLight1.getDescription());
      assertEquals(0.0F, homeLight1.getNameAngle(), 0.01F);
      assertEquals(1.942566F, homeLight1.getAngle(), 0.01F);
      assertFalse(homeLight1.isResizable());
      assertNull(homeLight1.getShininess());
      assertFalse(homeLight1.isTexturable());
      assertFalse(homeLight1.isDoorOrWindow());
      assertNull(homeLight1.getStaircaseCutOutShape());
      assertTrue(homeLight1.isVisible());
      assertEquals(0.0F, homeLight1.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight1.getX(), 0.01F);
      
      homeLight0.setX(0.3926991F);
      assertNotSame(homeLight0, homeLight1);
      assertFalse(homeLight0.equals((Object)homeLight1));
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertFalse(homeLight0.isTexturable());
      assertFalse(homeLight0.isBackFaceShown());
      assertFalse(homeLight0.isModelMirrored());
      assertNull(homeLight0.getName());
      assertFalse(homeLight0.isNameVisible());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertFalse(homeLight0.isDeformable());
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertNull(homeLight0.getDescription());
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertTrue(homeLight0.isVisible());
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      assertEquals(430.6548F, homeLight0.getY(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertFalse(homeLight0.isResizable());
      assertFalse(homeLight0.isMovable());
      assertNull(homeLight0.getShininess());
      assertEquals(0.3926991F, homeLight0.getX(), 0.01F);
      assertNull(homeLight0.getCurrency());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertNull(homeLight0.getCatalogId());
      assertNull(homeLight0.getColor());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      
      boolean boolean0 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "");
      assertFalse(boolean0);
      
      int int0 = Float.floatToIntBits(0.0F);
      assertEquals(0, int0);
      
      float[][] floatArray0 = homeLight1.getPoints();
      assertEquals(4, floatArray0.length);
      assertNotNull(floatArray0);
      assertNotSame(homeLight0, homeLight1);
      assertNotSame(homeLight1, homeLight0);
      assertFalse(homeLight0.equals((Object)homeLight1));
      assertFalse(homeLight1.equals((Object)homeLight0));
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertFalse(homeLight0.isTexturable());
      assertFalse(homeLight0.isBackFaceShown());
      assertFalse(homeLight0.isModelMirrored());
      assertNull(homeLight0.getName());
      assertFalse(homeLight0.isNameVisible());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertFalse(homeLight0.isDeformable());
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertNull(homeLight0.getDescription());
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertTrue(homeLight0.isVisible());
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      assertEquals(430.6548F, homeLight0.getY(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertFalse(homeLight0.isResizable());
      assertFalse(homeLight0.isMovable());
      assertNull(homeLight0.getShininess());
      assertEquals(0.3926991F, homeLight0.getX(), 0.01F);
      assertNull(homeLight0.getCurrency());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertNull(homeLight0.getCatalogId());
      assertNull(homeLight0.getColor());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertNull(homeLight1.getCurrency());
      assertEquals(0.0F, homeLight1.getWidth(), 0.01F);
      assertFalse(homeLight1.isDeformable());
      assertFalse(homeLight1.isNameVisible());
      assertFalse(homeLight1.isMovable());
      assertEquals(0.0F, homeLight1.getHeight(), 0.01F);
      assertFalse(homeLight1.isBackFaceShown());
      assertFalse(homeLight1.isModelMirrored());
      assertNull(homeLight1.getColor());
      assertNull(homeLight1.getCatalogId());
      assertEquals(0.0F, homeLight1.getNameYOffset(), 0.01F);
      assertEquals(1.43165581E9F, homeLight1.getY(), 0.01F);
      assertEquals(0.0F, homeLight1.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeLight1.getDepth(), 0.01F);
      assertNull(homeLight1.getName());
      assertEquals(0.0F, homeLight1.getElevation(), 0.01F);
      assertEquals(0.5F, homeLight1.getPower(), 0.01F);
      assertNull(homeLight1.getDescription());
      assertEquals(0.0F, homeLight1.getNameAngle(), 0.01F);
      assertEquals(1.942566F, homeLight1.getAngle(), 0.01F);
      assertFalse(homeLight1.isResizable());
      assertNull(homeLight1.getShininess());
      assertFalse(homeLight1.isTexturable());
      assertFalse(homeLight1.isDoorOrWindow());
      assertNull(homeLight1.getStaircaseCutOutShape());
      assertTrue(homeLight1.isVisible());
      assertEquals(0.0F, homeLight1.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight1.getX(), 0.01F);
      
      // Undeclared exception!
      try { 
        homeLight1.setDepth((-2214.72F));
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Piece isn't resizable
         //
         verifyException("com.eteks.sweethome3d.model.HomePieceOfFurniture", e);
      }
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      LightSource[] lightSourceArray0 = new LightSource[2];
      LightSource lightSource0 = new LightSource((-1.0F), (-69.47F), 700.4569F, 1431655765);
      assertNotNull(lightSource0);
      assertNull(lightSource0.getDiameter());
      assertEquals(700.4569F, lightSource0.getZ(), 0.01F);
      assertEquals((-69.47F), lightSource0.getY(), 0.01F);
      assertEquals((-1.0F), lightSource0.getX(), 0.01F);
      assertEquals(1431655765, lightSource0.getColor());
      
      lightSourceArray0[1] = lightSource0;
      Integer integer0 = new Integer(1431655765);
      assertNotNull(integer0);
      assertEquals(1431655765, (int)integer0);
      
      Light light0 = mock(Light.class, new ViolatedAssumptionAnswer());
      doReturn((LightSource[]) null).when(light0).getLightSources();
      doReturn((Integer) null).when(light0).getColor();
      doReturn((String) null).when(light0).getCurrency();
      doReturn(0.0F).when(light0).getDepth();
      doReturn((String) null).when(light0).getDescription();
      doReturn(0.0F).when(light0).getElevation();
      doReturn(0.0F).when(light0).getHeight();
      doReturn((Content) null).when(light0).getIcon();
      doReturn((Content) null).when(light0).getModel();
      doReturn((float[][]) null).when(light0).getModelRotation();
      doReturn((String) null).when(light0).getName();
      doReturn((Content) null).when(light0).getPlanIcon();
      doReturn((BigDecimal) null).when(light0).getPrice();
      doReturn((String) null).when(light0).getStaircaseCutOutShape();
      doReturn((BigDecimal) null).when(light0).getValueAddedTaxPercentage();
      doReturn(0.0F).when(light0).getWidth();
      doReturn(false).when(light0).isBackFaceShown();
      doReturn(false).when(light0).isDeformable();
      doReturn(false).when(light0).isDoorOrWindow();
      doReturn(false).when(light0).isMovable();
      doReturn(false).when(light0).isResizable();
      doReturn(false).when(light0).isTexturable();
      HomeLight homeLight0 = new HomeLight(light0);
      assertNotNull(homeLight0);
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertFalse(homeLight0.isTexturable());
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertNull(homeLight0.getDescription());
      assertFalse(homeLight0.isDoorOrWindow());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertNull(homeLight0.getCurrency());
      assertNull(homeLight0.getShininess());
      assertTrue(homeLight0.isVisible());
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertFalse(homeLight0.isDeformable());
      assertFalse(homeLight0.isResizable());
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertFalse(homeLight0.isMovable());
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertFalse(homeLight0.isNameVisible());
      assertNull(homeLight0.getName());
      assertNull(homeLight0.getCatalogId());
      assertNull(homeLight0.getColor());
      assertFalse(homeLight0.isBackFaceShown());
      assertFalse(homeLight0.isModelMirrored());
      
      HomeLight homeLight1 = homeLight0.clone();
      assertNotNull(homeLight1);
      assertNotSame(homeLight0, homeLight1);
      assertNotSame(homeLight1, homeLight0);
      assertFalse(homeLight1.equals((Object)homeLight0));
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertFalse(homeLight0.isTexturable());
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertNull(homeLight0.getDescription());
      assertFalse(homeLight0.isDoorOrWindow());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertNull(homeLight0.getCurrency());
      assertNull(homeLight0.getShininess());
      assertTrue(homeLight0.isVisible());
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertFalse(homeLight0.isDeformable());
      assertFalse(homeLight0.isResizable());
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertFalse(homeLight0.isMovable());
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertFalse(homeLight0.isNameVisible());
      assertNull(homeLight0.getName());
      assertNull(homeLight0.getCatalogId());
      assertNull(homeLight0.getColor());
      assertFalse(homeLight0.isBackFaceShown());
      assertFalse(homeLight0.isModelMirrored());
      assertFalse(homeLight1.isResizable());
      assertFalse(homeLight1.isMovable());
      assertNull(homeLight1.getShininess());
      assertEquals(0.0F, homeLight1.getNameAngle(), 0.01F);
      assertTrue(homeLight1.isVisible());
      assertEquals(0.0F, homeLight1.getDepth(), 0.01F);
      assertNull(homeLight1.getStaircaseCutOutShape());
      assertFalse(homeLight1.isDeformable());
      assertNull(homeLight1.getCurrency());
      assertNull(homeLight1.getCatalogId());
      assertEquals(0.0F, homeLight1.getNameYOffset(), 0.01F);
      assertEquals(0.5F, homeLight1.getPower(), 0.01F);
      assertEquals(0.0F, homeLight1.getHeight(), 0.01F);
      assertEquals(0.0F, homeLight1.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight1.getX(), 0.01F);
      assertEquals(0.0F, homeLight1.getY(), 0.01F);
      assertNull(homeLight1.getColor());
      assertFalse(homeLight1.isBackFaceShown());
      assertFalse(homeLight1.isModelMirrored());
      assertEquals(0.0F, homeLight1.getNameXOffset(), 0.01F);
      assertNull(homeLight1.getName());
      assertFalse(homeLight1.isNameVisible());
      assertFalse(homeLight1.isTexturable());
      assertEquals(0.0F, homeLight1.getElevation(), 0.01F);
      assertEquals(0.0F, homeLight1.getWidth(), 0.01F);
      assertEquals(0.0F, homeLight1.getAngle(), 0.01F);
      assertFalse(homeLight1.isDoorOrWindow());
      assertNull(homeLight1.getDescription());
      
      Level level0 = homeLight0.getLevel();
      assertNull(level0);
      assertNotSame(homeLight0, homeLight1);
      assertFalse(homeLight0.equals((Object)homeLight1));
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertFalse(homeLight0.isTexturable());
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertNull(homeLight0.getDescription());
      assertFalse(homeLight0.isDoorOrWindow());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertNull(homeLight0.getCurrency());
      assertNull(homeLight0.getShininess());
      assertTrue(homeLight0.isVisible());
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertFalse(homeLight0.isDeformable());
      assertFalse(homeLight0.isResizable());
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertFalse(homeLight0.isMovable());
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertFalse(homeLight0.isNameVisible());
      assertNull(homeLight0.getName());
      assertNull(homeLight0.getCatalogId());
      assertNull(homeLight0.getColor());
      assertFalse(homeLight0.isBackFaceShown());
      assertFalse(homeLight0.isModelMirrored());
      
      HomeLight homeLight2 = homeLight0.clone();
      assertNotNull(homeLight2);
      assertNotSame(homeLight0, homeLight2);
      assertNotSame(homeLight0, homeLight1);
      assertNotSame(homeLight2, homeLight1);
      assertNotSame(homeLight2, homeLight0);
      assertFalse(homeLight0.equals((Object)homeLight1));
      assertFalse(homeLight2.equals((Object)homeLight1));
      assertFalse(homeLight2.equals((Object)homeLight0));
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertFalse(homeLight0.isTexturable());
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertNull(homeLight0.getDescription());
      assertFalse(homeLight0.isDoorOrWindow());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertNull(homeLight0.getCurrency());
      assertNull(homeLight0.getShininess());
      assertTrue(homeLight0.isVisible());
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertFalse(homeLight0.isDeformable());
      assertFalse(homeLight0.isResizable());
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertFalse(homeLight0.isMovable());
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertFalse(homeLight0.isNameVisible());
      assertNull(homeLight0.getName());
      assertNull(homeLight0.getCatalogId());
      assertNull(homeLight0.getColor());
      assertFalse(homeLight0.isBackFaceShown());
      assertFalse(homeLight0.isModelMirrored());
      assertEquals(0.0F, homeLight2.getWidth(), 0.01F);
      assertEquals(0.0F, homeLight2.getNameYOffset(), 0.01F);
      assertFalse(homeLight2.isNameVisible());
      assertNull(homeLight2.getCurrency());
      assertFalse(homeLight2.isMovable());
      assertEquals(0.0F, homeLight2.getHeight(), 0.01F);
      assertFalse(homeLight2.isDoorOrWindow());
      assertEquals(0.0F, homeLight2.getX(), 0.01F);
      assertEquals(0.0F, homeLight2.getY(), 0.01F);
      assertEquals(0.0F, homeLight2.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight2.getNameAngle(), 0.01F);
      assertFalse(homeLight2.isDeformable());
      assertFalse(homeLight2.isResizable());
      assertNull(homeLight2.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight2.getDepth(), 0.01F);
      assertNull(homeLight2.getShininess());
      assertTrue(homeLight2.isVisible());
      assertEquals(0.0F, homeLight2.getElevation(), 0.01F);
      assertNull(homeLight2.getDescription());
      assertEquals(0.0F, homeLight2.getNameXOffset(), 0.01F);
      assertNull(homeLight2.getName());
      assertEquals(0.0F, homeLight2.getAngle(), 0.01F);
      assertEquals(0.5F, homeLight2.getPower(), 0.01F);
      assertFalse(homeLight2.isTexturable());
      assertFalse(homeLight2.isBackFaceShown());
      assertFalse(homeLight2.isModelMirrored());
      assertNull(homeLight2.getCatalogId());
      assertNull(homeLight2.getColor());
      
      homeLight1.setAngle(39.0F);
      assertNotSame(homeLight0, homeLight2);
      assertNotSame(homeLight0, homeLight1);
      assertNotSame(homeLight1, homeLight2);
      assertNotSame(homeLight1, homeLight0);
      assertFalse(homeLight0.equals((Object)homeLight2));
      assertFalse(homeLight0.equals((Object)homeLight1));
      assertFalse(homeLight1.equals((Object)homeLight2));
      assertFalse(homeLight1.equals((Object)homeLight0));
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertFalse(homeLight0.isTexturable());
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertNull(homeLight0.getDescription());
      assertFalse(homeLight0.isDoorOrWindow());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertNull(homeLight0.getCurrency());
      assertNull(homeLight0.getShininess());
      assertTrue(homeLight0.isVisible());
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertFalse(homeLight0.isDeformable());
      assertFalse(homeLight0.isResizable());
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertFalse(homeLight0.isMovable());
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertFalse(homeLight0.isNameVisible());
      assertNull(homeLight0.getName());
      assertNull(homeLight0.getCatalogId());
      assertNull(homeLight0.getColor());
      assertFalse(homeLight0.isBackFaceShown());
      assertFalse(homeLight0.isModelMirrored());
      assertFalse(homeLight1.isResizable());
      assertFalse(homeLight1.isMovable());
      assertNull(homeLight1.getShininess());
      assertEquals(0.0F, homeLight1.getNameAngle(), 0.01F);
      assertTrue(homeLight1.isVisible());
      assertEquals(0.0F, homeLight1.getDepth(), 0.01F);
      assertNull(homeLight1.getStaircaseCutOutShape());
      assertFalse(homeLight1.isDeformable());
      assertNull(homeLight1.getCurrency());
      assertNull(homeLight1.getCatalogId());
      assertEquals(0.0F, homeLight1.getNameYOffset(), 0.01F);
      assertEquals(0.5F, homeLight1.getPower(), 0.01F);
      assertEquals(0.0F, homeLight1.getHeight(), 0.01F);
      assertEquals(0.0F, homeLight1.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight1.getX(), 0.01F);
      assertEquals(0.0F, homeLight1.getY(), 0.01F);
      assertNull(homeLight1.getColor());
      assertFalse(homeLight1.isBackFaceShown());
      assertFalse(homeLight1.isModelMirrored());
      assertEquals(0.0F, homeLight1.getNameXOffset(), 0.01F);
      assertEquals(1.3008882F, homeLight1.getAngle(), 0.01F);
      assertNull(homeLight1.getName());
      assertFalse(homeLight1.isNameVisible());
      assertFalse(homeLight1.isTexturable());
      assertEquals(0.0F, homeLight1.getElevation(), 0.01F);
      assertEquals(0.0F, homeLight1.getWidth(), 0.01F);
      assertFalse(homeLight1.isDoorOrWindow());
      assertNull(homeLight1.getDescription());
      
      homeLight2.setName("Invalid URL base for JAR entry");
      assertNotSame(homeLight0, homeLight2);
      assertNotSame(homeLight0, homeLight1);
      assertNotSame(homeLight2, homeLight1);
      assertNotSame(homeLight2, homeLight0);
      assertFalse(homeLight0.equals((Object)homeLight2));
      assertFalse(homeLight0.equals((Object)homeLight1));
      assertFalse(homeLight2.equals((Object)homeLight1));
      assertFalse(homeLight2.equals((Object)homeLight0));
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertFalse(homeLight0.isTexturable());
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertNull(homeLight0.getDescription());
      assertFalse(homeLight0.isDoorOrWindow());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertNull(homeLight0.getCurrency());
      assertNull(homeLight0.getShininess());
      assertTrue(homeLight0.isVisible());
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertFalse(homeLight0.isDeformable());
      assertFalse(homeLight0.isResizable());
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertFalse(homeLight0.isMovable());
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertFalse(homeLight0.isNameVisible());
      assertNull(homeLight0.getName());
      assertNull(homeLight0.getCatalogId());
      assertNull(homeLight0.getColor());
      assertFalse(homeLight0.isBackFaceShown());
      assertFalse(homeLight0.isModelMirrored());
      assertEquals(0.0F, homeLight2.getWidth(), 0.01F);
      assertEquals(0.0F, homeLight2.getNameYOffset(), 0.01F);
      assertFalse(homeLight2.isNameVisible());
      assertNull(homeLight2.getCurrency());
      assertFalse(homeLight2.isMovable());
      assertEquals("Invalid URL base for JAR entry", homeLight2.getName());
      assertEquals(0.0F, homeLight2.getHeight(), 0.01F);
      assertFalse(homeLight2.isDoorOrWindow());
      assertEquals(0.0F, homeLight2.getX(), 0.01F);
      assertEquals(0.0F, homeLight2.getY(), 0.01F);
      assertEquals(0.0F, homeLight2.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight2.getNameAngle(), 0.01F);
      assertFalse(homeLight2.isDeformable());
      assertFalse(homeLight2.isResizable());
      assertNull(homeLight2.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight2.getDepth(), 0.01F);
      assertNull(homeLight2.getShininess());
      assertTrue(homeLight2.isVisible());
      assertEquals(0.0F, homeLight2.getElevation(), 0.01F);
      assertNull(homeLight2.getDescription());
      assertEquals(0.0F, homeLight2.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeLight2.getAngle(), 0.01F);
      assertEquals(0.5F, homeLight2.getPower(), 0.01F);
      assertFalse(homeLight2.isTexturable());
      assertFalse(homeLight2.isBackFaceShown());
      assertFalse(homeLight2.isModelMirrored());
      assertNull(homeLight2.getCatalogId());
      assertNull(homeLight2.getColor());
      
      boolean boolean0 = homeLight1.intersectsRectangle(0.39F, 0.5F, (-69.47F), 0.5F);
      assertNotSame(homeLight0, homeLight2);
      assertNotSame(homeLight0, homeLight1);
      assertNotSame(homeLight1, homeLight2);
      assertNotSame(homeLight1, homeLight0);
      assertFalse(homeLight0.equals((Object)homeLight2));
      assertFalse(homeLight0.equals((Object)homeLight1));
      assertFalse(homeLight1.equals((Object)homeLight2));
      assertFalse(homeLight1.equals((Object)homeLight0));
      assertFalse(boolean0);
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertFalse(homeLight0.isTexturable());
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertNull(homeLight0.getDescription());
      assertFalse(homeLight0.isDoorOrWindow());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertNull(homeLight0.getCurrency());
      assertNull(homeLight0.getShininess());
      assertTrue(homeLight0.isVisible());
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertFalse(homeLight0.isDeformable());
      assertFalse(homeLight0.isResizable());
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertFalse(homeLight0.isMovable());
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertFalse(homeLight0.isNameVisible());
      assertNull(homeLight0.getName());
      assertNull(homeLight0.getCatalogId());
      assertNull(homeLight0.getColor());
      assertFalse(homeLight0.isBackFaceShown());
      assertFalse(homeLight0.isModelMirrored());
      assertFalse(homeLight1.isResizable());
      assertFalse(homeLight1.isMovable());
      assertNull(homeLight1.getShininess());
      assertEquals(0.0F, homeLight1.getNameAngle(), 0.01F);
      assertTrue(homeLight1.isVisible());
      assertEquals(0.0F, homeLight1.getDepth(), 0.01F);
      assertNull(homeLight1.getStaircaseCutOutShape());
      assertFalse(homeLight1.isDeformable());
      assertNull(homeLight1.getCurrency());
      assertNull(homeLight1.getCatalogId());
      assertEquals(0.0F, homeLight1.getNameYOffset(), 0.01F);
      assertEquals(0.5F, homeLight1.getPower(), 0.01F);
      assertEquals(0.0F, homeLight1.getHeight(), 0.01F);
      assertEquals(0.0F, homeLight1.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight1.getX(), 0.01F);
      assertEquals(0.0F, homeLight1.getY(), 0.01F);
      assertNull(homeLight1.getColor());
      assertFalse(homeLight1.isBackFaceShown());
      assertFalse(homeLight1.isModelMirrored());
      assertEquals(0.0F, homeLight1.getNameXOffset(), 0.01F);
      assertEquals(1.3008882F, homeLight1.getAngle(), 0.01F);
      assertNull(homeLight1.getName());
      assertFalse(homeLight1.isNameVisible());
      assertFalse(homeLight1.isTexturable());
      assertEquals(0.0F, homeLight1.getElevation(), 0.01F);
      assertEquals(0.0F, homeLight1.getWidth(), 0.01F);
      assertFalse(homeLight1.isDoorOrWindow());
      assertNull(homeLight1.getDescription());
      
      homeLight1.setNameYOffset(0.39F);
      assertNotSame(homeLight0, homeLight2);
      assertNotSame(homeLight0, homeLight1);
      assertNotSame(homeLight1, homeLight2);
      assertNotSame(homeLight1, homeLight0);
      assertFalse(homeLight0.equals((Object)homeLight2));
      assertFalse(homeLight0.equals((Object)homeLight1));
      assertFalse(homeLight1.equals((Object)homeLight2));
      assertFalse(homeLight1.equals((Object)homeLight0));
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertFalse(homeLight0.isTexturable());
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertNull(homeLight0.getDescription());
      assertFalse(homeLight0.isDoorOrWindow());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertNull(homeLight0.getCurrency());
      assertNull(homeLight0.getShininess());
      assertTrue(homeLight0.isVisible());
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertFalse(homeLight0.isDeformable());
      assertFalse(homeLight0.isResizable());
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertFalse(homeLight0.isMovable());
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertFalse(homeLight0.isNameVisible());
      assertNull(homeLight0.getName());
      assertNull(homeLight0.getCatalogId());
      assertNull(homeLight0.getColor());
      assertFalse(homeLight0.isBackFaceShown());
      assertFalse(homeLight0.isModelMirrored());
      assertFalse(homeLight1.isResizable());
      assertFalse(homeLight1.isMovable());
      assertNull(homeLight1.getShininess());
      assertEquals(0.0F, homeLight1.getNameAngle(), 0.01F);
      assertTrue(homeLight1.isVisible());
      assertEquals(0.0F, homeLight1.getDepth(), 0.01F);
      assertNull(homeLight1.getStaircaseCutOutShape());
      assertFalse(homeLight1.isDeformable());
      assertNull(homeLight1.getCurrency());
      assertNull(homeLight1.getCatalogId());
      assertEquals(0.5F, homeLight1.getPower(), 0.01F);
      assertEquals(0.0F, homeLight1.getHeight(), 0.01F);
      assertEquals(0.0F, homeLight1.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight1.getX(), 0.01F);
      assertEquals(0.0F, homeLight1.getY(), 0.01F);
      assertNull(homeLight1.getColor());
      assertFalse(homeLight1.isBackFaceShown());
      assertFalse(homeLight1.isModelMirrored());
      assertEquals(0.0F, homeLight1.getNameXOffset(), 0.01F);
      assertEquals(0.39F, homeLight1.getNameYOffset(), 0.01F);
      assertEquals(1.3008882F, homeLight1.getAngle(), 0.01F);
      assertNull(homeLight1.getName());
      assertFalse(homeLight1.isNameVisible());
      assertFalse(homeLight1.isTexturable());
      assertEquals(0.0F, homeLight1.getElevation(), 0.01F);
      assertEquals(0.0F, homeLight1.getWidth(), 0.01F);
      assertFalse(homeLight1.isDoorOrWindow());
      assertNull(homeLight1.getDescription());
      
      BigDecimal bigDecimal0 = BigDecimal.TEN;
      assertNotNull(bigDecimal0);
      assertEquals((byte)10, bigDecimal0.byteValue());
      assertEquals((short)10, bigDecimal0.shortValue());
      
      HomeLight homeLight3 = homeLight2.clone();
      assertNotNull(homeLight3);
      assertNotSame(homeLight0, homeLight2);
      assertNotSame(homeLight0, homeLight3);
      assertNotSame(homeLight0, homeLight1);
      assertNotSame(homeLight2, homeLight1);
      assertNotSame(homeLight2, homeLight3);
      assertNotSame(homeLight2, homeLight0);
      assertNotSame(homeLight3, homeLight1);
      assertNotSame(homeLight3, homeLight2);
      assertNotSame(homeLight3, homeLight0);
      assertFalse(homeLight0.equals((Object)homeLight2));
      assertFalse(homeLight0.equals((Object)homeLight1));
      assertFalse(homeLight2.equals((Object)homeLight1));
      assertFalse(homeLight2.equals((Object)homeLight0));
      assertFalse(homeLight3.equals((Object)homeLight1));
      assertFalse(homeLight3.equals((Object)homeLight2));
      assertFalse(homeLight3.equals((Object)homeLight0));
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertFalse(homeLight0.isTexturable());
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertNull(homeLight0.getDescription());
      assertFalse(homeLight0.isDoorOrWindow());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertNull(homeLight0.getCurrency());
      assertNull(homeLight0.getShininess());
      assertTrue(homeLight0.isVisible());
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertFalse(homeLight0.isDeformable());
      assertFalse(homeLight0.isResizable());
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertFalse(homeLight0.isMovable());
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertFalse(homeLight0.isNameVisible());
      assertNull(homeLight0.getName());
      assertNull(homeLight0.getCatalogId());
      assertNull(homeLight0.getColor());
      assertFalse(homeLight0.isBackFaceShown());
      assertFalse(homeLight0.isModelMirrored());
      assertEquals(0.0F, homeLight2.getWidth(), 0.01F);
      assertEquals(0.0F, homeLight2.getNameYOffset(), 0.01F);
      assertFalse(homeLight2.isNameVisible());
      assertNull(homeLight2.getCurrency());
      assertFalse(homeLight2.isMovable());
      assertEquals("Invalid URL base for JAR entry", homeLight2.getName());
      assertEquals(0.0F, homeLight2.getHeight(), 0.01F);
      assertFalse(homeLight2.isDoorOrWindow());
      assertEquals(0.0F, homeLight2.getX(), 0.01F);
      assertEquals(0.0F, homeLight2.getY(), 0.01F);
      assertEquals(0.0F, homeLight2.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight2.getNameAngle(), 0.01F);
      assertFalse(homeLight2.isDeformable());
      assertFalse(homeLight2.isResizable());
      assertNull(homeLight2.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight2.getDepth(), 0.01F);
      assertNull(homeLight2.getShininess());
      assertTrue(homeLight2.isVisible());
      assertEquals(0.0F, homeLight2.getElevation(), 0.01F);
      assertNull(homeLight2.getDescription());
      assertEquals(0.0F, homeLight2.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeLight2.getAngle(), 0.01F);
      assertEquals(0.5F, homeLight2.getPower(), 0.01F);
      assertFalse(homeLight2.isTexturable());
      assertFalse(homeLight2.isBackFaceShown());
      assertFalse(homeLight2.isModelMirrored());
      assertNull(homeLight2.getCatalogId());
      assertNull(homeLight2.getColor());
      assertFalse(homeLight3.isBackFaceShown());
      assertFalse(homeLight3.isModelMirrored());
      assertEquals(0.0F, homeLight3.getX(), 0.01F);
      assertEquals(0.0F, homeLight3.getY(), 0.01F);
      assertEquals(0.0F, homeLight3.getGroundElevation(), 0.01F);
      assertNull(homeLight3.getColor());
      assertEquals(0.0F, homeLight3.getAngle(), 0.01F);
      assertFalse(homeLight3.isTexturable());
      assertNull(homeLight3.getCurrency());
      assertFalse(homeLight3.isDoorOrWindow());
      assertEquals(0.0F, homeLight3.getWidth(), 0.01F);
      assertEquals(0.0F, homeLight3.getNameYOffset(), 0.01F);
      assertFalse(homeLight3.isNameVisible());
      assertNull(homeLight3.getShininess());
      assertNull(homeLight3.getCatalogId());
      assertEquals(0.0F, homeLight3.getHeight(), 0.01F);
      assertEquals(0.5F, homeLight3.getPower(), 0.01F);
      assertFalse(homeLight3.isMovable());
      assertNull(homeLight3.getDescription());
      assertEquals(0.0F, homeLight3.getElevation(), 0.01F);
      assertTrue(homeLight3.isVisible());
      assertEquals("Invalid URL base for JAR entry", homeLight3.getName());
      assertEquals(0.0F, homeLight3.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeLight3.getDepth(), 0.01F);
      assertNull(homeLight3.getStaircaseCutOutShape());
      assertFalse(homeLight3.isResizable());
      assertFalse(homeLight3.isDeformable());
      assertEquals(0.0F, homeLight3.getNameAngle(), 0.01F);
      
      PropertyChangeListener propertyChangeListener0 = mock(PropertyChangeListener.class, new ViolatedAssumptionAnswer());
      homeLight3.setDescription("");
      assertNotSame(homeLight0, homeLight2);
      assertNotSame(homeLight0, homeLight3);
      assertNotSame(homeLight0, homeLight1);
      assertNotSame(homeLight2, homeLight1);
      assertNotSame(homeLight2, homeLight3);
      assertNotSame(homeLight2, homeLight0);
      assertNotSame(homeLight3, homeLight1);
      assertNotSame(homeLight3, homeLight2);
      assertNotSame(homeLight3, homeLight0);
      assertFalse(homeLight0.equals((Object)homeLight2));
      assertFalse(homeLight0.equals((Object)homeLight3));
      assertFalse(homeLight0.equals((Object)homeLight1));
      assertFalse(homeLight2.equals((Object)homeLight1));
      assertFalse(homeLight2.equals((Object)homeLight3));
      assertFalse(homeLight2.equals((Object)homeLight0));
      assertFalse(homeLight3.equals((Object)homeLight1));
      assertFalse(homeLight3.equals((Object)homeLight2));
      assertFalse(homeLight3.equals((Object)homeLight0));
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertFalse(homeLight0.isTexturable());
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertNull(homeLight0.getDescription());
      assertFalse(homeLight0.isDoorOrWindow());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertNull(homeLight0.getCurrency());
      assertNull(homeLight0.getShininess());
      assertTrue(homeLight0.isVisible());
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertFalse(homeLight0.isDeformable());
      assertFalse(homeLight0.isResizable());
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertFalse(homeLight0.isMovable());
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertFalse(homeLight0.isNameVisible());
      assertNull(homeLight0.getName());
      assertNull(homeLight0.getCatalogId());
      assertNull(homeLight0.getColor());
      assertFalse(homeLight0.isBackFaceShown());
      assertFalse(homeLight0.isModelMirrored());
      assertEquals(0.0F, homeLight2.getWidth(), 0.01F);
      assertEquals(0.0F, homeLight2.getNameYOffset(), 0.01F);
      assertFalse(homeLight2.isNameVisible());
      assertNull(homeLight2.getCurrency());
      assertFalse(homeLight2.isMovable());
      assertEquals("Invalid URL base for JAR entry", homeLight2.getName());
      assertEquals(0.0F, homeLight2.getHeight(), 0.01F);
      assertFalse(homeLight2.isDoorOrWindow());
      assertEquals(0.0F, homeLight2.getX(), 0.01F);
      assertEquals(0.0F, homeLight2.getY(), 0.01F);
      assertEquals(0.0F, homeLight2.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight2.getNameAngle(), 0.01F);
      assertFalse(homeLight2.isDeformable());
      assertFalse(homeLight2.isResizable());
      assertNull(homeLight2.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight2.getDepth(), 0.01F);
      assertNull(homeLight2.getShininess());
      assertTrue(homeLight2.isVisible());
      assertEquals(0.0F, homeLight2.getElevation(), 0.01F);
      assertNull(homeLight2.getDescription());
      assertEquals(0.0F, homeLight2.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeLight2.getAngle(), 0.01F);
      assertEquals(0.5F, homeLight2.getPower(), 0.01F);
      assertFalse(homeLight2.isTexturable());
      assertFalse(homeLight2.isBackFaceShown());
      assertFalse(homeLight2.isModelMirrored());
      assertNull(homeLight2.getCatalogId());
      assertNull(homeLight2.getColor());
      assertFalse(homeLight3.isBackFaceShown());
      assertFalse(homeLight3.isModelMirrored());
      assertEquals(0.0F, homeLight3.getX(), 0.01F);
      assertEquals(0.0F, homeLight3.getY(), 0.01F);
      assertEquals(0.0F, homeLight3.getGroundElevation(), 0.01F);
      assertNull(homeLight3.getColor());
      assertEquals(0.0F, homeLight3.getAngle(), 0.01F);
      assertFalse(homeLight3.isTexturable());
      assertNull(homeLight3.getCurrency());
      assertFalse(homeLight3.isDoorOrWindow());
      assertEquals(0.0F, homeLight3.getWidth(), 0.01F);
      assertEquals(0.0F, homeLight3.getNameYOffset(), 0.01F);
      assertFalse(homeLight3.isNameVisible());
      assertNull(homeLight3.getShininess());
      assertNull(homeLight3.getCatalogId());
      assertEquals(0.0F, homeLight3.getHeight(), 0.01F);
      assertEquals(0.5F, homeLight3.getPower(), 0.01F);
      assertFalse(homeLight3.isMovable());
      assertEquals("", homeLight3.getDescription());
      assertEquals(0.0F, homeLight3.getElevation(), 0.01F);
      assertTrue(homeLight3.isVisible());
      assertEquals("Invalid URL base for JAR entry", homeLight3.getName());
      assertEquals(0.0F, homeLight3.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeLight3.getDepth(), 0.01F);
      assertNull(homeLight3.getStaircaseCutOutShape());
      assertFalse(homeLight3.isResizable());
      assertFalse(homeLight3.isDeformable());
      assertEquals(0.0F, homeLight3.getNameAngle(), 0.01F);
      
      String string0 = homeLight1.getDescription();
      assertNull(string0);
      assertNotSame(homeLight0, homeLight2);
      assertNotSame(homeLight0, homeLight3);
      assertNotSame(homeLight0, homeLight1);
      assertNotSame(homeLight1, homeLight3);
      assertNotSame(homeLight1, homeLight2);
      assertNotSame(homeLight1, homeLight0);
      assertFalse(homeLight0.equals((Object)homeLight2));
      assertFalse(homeLight0.equals((Object)homeLight3));
      assertFalse(homeLight0.equals((Object)homeLight1));
      assertFalse(homeLight1.equals((Object)homeLight3));
      assertFalse(homeLight1.equals((Object)homeLight2));
      assertFalse(homeLight1.equals((Object)homeLight0));
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertFalse(homeLight0.isTexturable());
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertNull(homeLight0.getDescription());
      assertFalse(homeLight0.isDoorOrWindow());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertNull(homeLight0.getCurrency());
      assertNull(homeLight0.getShininess());
      assertTrue(homeLight0.isVisible());
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertFalse(homeLight0.isDeformable());
      assertFalse(homeLight0.isResizable());
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertFalse(homeLight0.isMovable());
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertFalse(homeLight0.isNameVisible());
      assertNull(homeLight0.getName());
      assertNull(homeLight0.getCatalogId());
      assertNull(homeLight0.getColor());
      assertFalse(homeLight0.isBackFaceShown());
      assertFalse(homeLight0.isModelMirrored());
      assertFalse(homeLight1.isResizable());
      assertFalse(homeLight1.isMovable());
      assertNull(homeLight1.getShininess());
      assertEquals(0.0F, homeLight1.getNameAngle(), 0.01F);
      assertTrue(homeLight1.isVisible());
      assertEquals(0.0F, homeLight1.getDepth(), 0.01F);
      assertNull(homeLight1.getStaircaseCutOutShape());
      assertFalse(homeLight1.isDeformable());
      assertNull(homeLight1.getCurrency());
      assertNull(homeLight1.getCatalogId());
      assertEquals(0.5F, homeLight1.getPower(), 0.01F);
      assertEquals(0.0F, homeLight1.getHeight(), 0.01F);
      assertEquals(0.0F, homeLight1.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight1.getX(), 0.01F);
      assertEquals(0.0F, homeLight1.getY(), 0.01F);
      assertNull(homeLight1.getColor());
      assertFalse(homeLight1.isBackFaceShown());
      assertFalse(homeLight1.isModelMirrored());
      assertEquals(0.0F, homeLight1.getNameXOffset(), 0.01F);
      assertEquals(0.39F, homeLight1.getNameYOffset(), 0.01F);
      assertEquals(1.3008882F, homeLight1.getAngle(), 0.01F);
      assertNull(homeLight1.getName());
      assertFalse(homeLight1.isNameVisible());
      assertFalse(homeLight1.isTexturable());
      assertEquals(0.0F, homeLight1.getElevation(), 0.01F);
      assertEquals(0.0F, homeLight1.getWidth(), 0.01F);
      assertFalse(homeLight1.isDoorOrWindow());
      assertNull(homeLight1.getDescription());
      
      boolean boolean1 = homeLight3.isNameCenterPointAt(700.4569F, 0.5F, 455.247F);
      assertNotSame(homeLight0, homeLight2);
      assertNotSame(homeLight0, homeLight3);
      assertNotSame(homeLight0, homeLight1);
      assertNotSame(homeLight2, homeLight1);
      assertNotSame(homeLight2, homeLight3);
      assertNotSame(homeLight2, homeLight0);
      assertNotSame(homeLight3, homeLight1);
      assertNotSame(homeLight3, homeLight2);
      assertNotSame(homeLight3, homeLight0);
      assertTrue(boolean1 == boolean0);
      assertFalse(homeLight0.equals((Object)homeLight2));
      assertFalse(homeLight0.equals((Object)homeLight3));
      assertFalse(homeLight0.equals((Object)homeLight1));
      assertFalse(homeLight2.equals((Object)homeLight1));
      assertFalse(homeLight2.equals((Object)homeLight3));
      assertFalse(homeLight2.equals((Object)homeLight0));
      assertFalse(homeLight3.equals((Object)homeLight1));
      assertFalse(homeLight3.equals((Object)homeLight2));
      assertFalse(homeLight3.equals((Object)homeLight0));
      assertFalse(boolean1);
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertFalse(homeLight0.isTexturable());
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertNull(homeLight0.getDescription());
      assertFalse(homeLight0.isDoorOrWindow());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertNull(homeLight0.getCurrency());
      assertNull(homeLight0.getShininess());
      assertTrue(homeLight0.isVisible());
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertFalse(homeLight0.isDeformable());
      assertFalse(homeLight0.isResizable());
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertFalse(homeLight0.isMovable());
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertFalse(homeLight0.isNameVisible());
      assertNull(homeLight0.getName());
      assertNull(homeLight0.getCatalogId());
      assertNull(homeLight0.getColor());
      assertFalse(homeLight0.isBackFaceShown());
      assertFalse(homeLight0.isModelMirrored());
      assertEquals(0.0F, homeLight2.getWidth(), 0.01F);
      assertEquals(0.0F, homeLight2.getNameYOffset(), 0.01F);
      assertFalse(homeLight2.isNameVisible());
      assertNull(homeLight2.getCurrency());
      assertFalse(homeLight2.isMovable());
      assertEquals("Invalid URL base for JAR entry", homeLight2.getName());
      assertEquals(0.0F, homeLight2.getHeight(), 0.01F);
      assertFalse(homeLight2.isDoorOrWindow());
      assertEquals(0.0F, homeLight2.getX(), 0.01F);
      assertEquals(0.0F, homeLight2.getY(), 0.01F);
      assertEquals(0.0F, homeLight2.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight2.getNameAngle(), 0.01F);
      assertFalse(homeLight2.isDeformable());
      assertFalse(homeLight2.isResizable());
      assertNull(homeLight2.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight2.getDepth(), 0.01F);
      assertNull(homeLight2.getShininess());
      assertTrue(homeLight2.isVisible());
      assertEquals(0.0F, homeLight2.getElevation(), 0.01F);
      assertNull(homeLight2.getDescription());
      assertEquals(0.0F, homeLight2.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeLight2.getAngle(), 0.01F);
      assertEquals(0.5F, homeLight2.getPower(), 0.01F);
      assertFalse(homeLight2.isTexturable());
      assertFalse(homeLight2.isBackFaceShown());
      assertFalse(homeLight2.isModelMirrored());
      assertNull(homeLight2.getCatalogId());
      assertNull(homeLight2.getColor());
      assertFalse(homeLight3.isBackFaceShown());
      assertFalse(homeLight3.isModelMirrored());
      assertEquals(0.0F, homeLight3.getX(), 0.01F);
      assertEquals(0.0F, homeLight3.getY(), 0.01F);
      assertEquals(0.0F, homeLight3.getGroundElevation(), 0.01F);
      assertNull(homeLight3.getColor());
      assertEquals(0.0F, homeLight3.getAngle(), 0.01F);
      assertFalse(homeLight3.isTexturable());
      assertNull(homeLight3.getCurrency());
      assertFalse(homeLight3.isDoorOrWindow());
      assertEquals(0.0F, homeLight3.getWidth(), 0.01F);
      assertEquals(0.0F, homeLight3.getNameYOffset(), 0.01F);
      assertFalse(homeLight3.isNameVisible());
      assertNull(homeLight3.getShininess());
      assertNull(homeLight3.getCatalogId());
      assertEquals(0.0F, homeLight3.getHeight(), 0.01F);
      assertEquals(0.5F, homeLight3.getPower(), 0.01F);
      assertFalse(homeLight3.isMovable());
      assertEquals("", homeLight3.getDescription());
      assertEquals(0.0F, homeLight3.getElevation(), 0.01F);
      assertTrue(homeLight3.isVisible());
      assertEquals("Invalid URL base for JAR entry", homeLight3.getName());
      assertEquals(0.0F, homeLight3.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeLight3.getDepth(), 0.01F);
      assertNull(homeLight3.getStaircaseCutOutShape());
      assertFalse(homeLight3.isResizable());
      assertFalse(homeLight3.isDeformable());
      assertEquals(0.0F, homeLight3.getNameAngle(), 0.01F);
      
      TextStyle textStyle0 = homeLight0.getNameStyle();
      assertNull(textStyle0);
      assertNotSame(homeLight0, homeLight2);
      assertNotSame(homeLight0, homeLight3);
      assertNotSame(homeLight0, homeLight1);
      assertFalse(homeLight0.equals((Object)homeLight2));
      assertFalse(homeLight0.equals((Object)homeLight3));
      assertFalse(homeLight0.equals((Object)homeLight1));
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertFalse(homeLight0.isTexturable());
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertNull(homeLight0.getDescription());
      assertFalse(homeLight0.isDoorOrWindow());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertNull(homeLight0.getCurrency());
      assertNull(homeLight0.getShininess());
      assertTrue(homeLight0.isVisible());
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertFalse(homeLight0.isDeformable());
      assertFalse(homeLight0.isResizable());
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertFalse(homeLight0.isMovable());
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertFalse(homeLight0.isNameVisible());
      assertNull(homeLight0.getName());
      assertNull(homeLight0.getCatalogId());
      assertNull(homeLight0.getColor());
      assertFalse(homeLight0.isBackFaceShown());
      assertFalse(homeLight0.isModelMirrored());
      
      boolean boolean2 = homeLight2.isVisible();
      assertNotSame(homeLight0, homeLight2);
      assertNotSame(homeLight0, homeLight3);
      assertNotSame(homeLight0, homeLight1);
      assertNotSame(homeLight2, homeLight1);
      assertNotSame(homeLight2, homeLight3);
      assertNotSame(homeLight2, homeLight0);
      assertFalse(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      assertFalse(homeLight0.equals((Object)homeLight2));
      assertFalse(homeLight0.equals((Object)homeLight3));
      assertFalse(homeLight0.equals((Object)homeLight1));
      assertFalse(homeLight2.equals((Object)homeLight1));
      assertFalse(homeLight2.equals((Object)homeLight3));
      assertFalse(homeLight2.equals((Object)homeLight0));
      assertTrue(boolean2);
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertFalse(homeLight0.isTexturable());
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertNull(homeLight0.getDescription());
      assertFalse(homeLight0.isDoorOrWindow());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertNull(homeLight0.getCurrency());
      assertNull(homeLight0.getShininess());
      assertTrue(homeLight0.isVisible());
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertFalse(homeLight0.isDeformable());
      assertFalse(homeLight0.isResizable());
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertFalse(homeLight0.isMovable());
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertFalse(homeLight0.isNameVisible());
      assertNull(homeLight0.getName());
      assertNull(homeLight0.getCatalogId());
      assertNull(homeLight0.getColor());
      assertFalse(homeLight0.isBackFaceShown());
      assertFalse(homeLight0.isModelMirrored());
      assertEquals(0.0F, homeLight2.getWidth(), 0.01F);
      assertEquals(0.0F, homeLight2.getNameYOffset(), 0.01F);
      assertFalse(homeLight2.isNameVisible());
      assertNull(homeLight2.getCurrency());
      assertFalse(homeLight2.isMovable());
      assertEquals("Invalid URL base for JAR entry", homeLight2.getName());
      assertEquals(0.0F, homeLight2.getHeight(), 0.01F);
      assertFalse(homeLight2.isDoorOrWindow());
      assertEquals(0.0F, homeLight2.getX(), 0.01F);
      assertEquals(0.0F, homeLight2.getY(), 0.01F);
      assertEquals(0.0F, homeLight2.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight2.getNameAngle(), 0.01F);
      assertFalse(homeLight2.isDeformable());
      assertFalse(homeLight2.isResizable());
      assertNull(homeLight2.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight2.getDepth(), 0.01F);
      assertNull(homeLight2.getShininess());
      assertTrue(homeLight2.isVisible());
      assertEquals(0.0F, homeLight2.getElevation(), 0.01F);
      assertNull(homeLight2.getDescription());
      assertEquals(0.0F, homeLight2.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeLight2.getAngle(), 0.01F);
      assertEquals(0.5F, homeLight2.getPower(), 0.01F);
      assertFalse(homeLight2.isTexturable());
      assertFalse(homeLight2.isBackFaceShown());
      assertFalse(homeLight2.isModelMirrored());
      assertNull(homeLight2.getCatalogId());
      assertNull(homeLight2.getColor());
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      LightSource[] lightSourceArray0 = new LightSource[2];
      LightSource lightSource0 = new LightSource((-30.162556F), (-1457.99F), 381.9F, 1431655765);
      assertNotNull(lightSource0);
      assertEquals(1431655765, lightSource0.getColor());
      assertNull(lightSource0.getDiameter());
      assertEquals((-1457.99F), lightSource0.getY(), 0.01F);
      assertEquals((-30.162556F), lightSource0.getX(), 0.01F);
      assertEquals(381.9F, lightSource0.getZ(), 0.01F);
      
      LightSource lightSource1 = new LightSource((-30.162556F), (-69.47F), 700.4569F, (-853));
      assertNotNull(lightSource1);
      assertFalse(lightSource1.equals((Object)lightSource0));
      assertEquals((-30.162556F), lightSource1.getX(), 0.01F);
      assertNull(lightSource1.getDiameter());
      assertEquals(700.4569F, lightSource1.getZ(), 0.01F);
      assertEquals((-853), lightSource1.getColor());
      assertEquals((-69.47F), lightSource1.getY(), 0.01F);
      
      lightSourceArray0[1] = lightSource1;
      Integer integer0 = new Integer((-853));
      assertNotNull(integer0);
      assertEquals((-853), (int)integer0);
      
      Light light0 = mock(Light.class, new ViolatedAssumptionAnswer());
      doReturn((LightSource[]) null).when(light0).getLightSources();
      doReturn((Integer) null).when(light0).getColor();
      doReturn((String) null).when(light0).getCurrency();
      doReturn(0.0F).when(light0).getDepth();
      doReturn((String) null).when(light0).getDescription();
      doReturn(0.0F).when(light0).getElevation();
      doReturn(0.0F).when(light0).getHeight();
      doReturn((Content) null).when(light0).getIcon();
      doReturn((Content) null).when(light0).getModel();
      doReturn((float[][]) null).when(light0).getModelRotation();
      doReturn((String) null).when(light0).getName();
      doReturn((Content) null).when(light0).getPlanIcon();
      doReturn((BigDecimal) null).when(light0).getPrice();
      doReturn((String) null).when(light0).getStaircaseCutOutShape();
      doReturn((BigDecimal) null).when(light0).getValueAddedTaxPercentage();
      doReturn(0.0F).when(light0).getWidth();
      doReturn(false).when(light0).isBackFaceShown();
      doReturn(false).when(light0).isDeformable();
      doReturn(false).when(light0).isDoorOrWindow();
      doReturn(false).when(light0).isMovable();
      doReturn(false).when(light0).isResizable();
      doReturn(false).when(light0).isTexturable();
      byte[] byteArray0 = new byte[5];
      byteArray0[1] = (byte)1;
      byteArray0[3] = (byte) (-32);
      boolean boolean0 = FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      assertEquals(5, byteArray0.length);
      assertFalse(boolean0);
      assertArrayEquals(new byte[] {(byte)0, (byte)1, (byte)0, (byte) (-32), (byte)0}, byteArray0);
      
      HomeLight homeLight0 = new HomeLight(light0);
      assertNotNull(homeLight0);
      assertNull(homeLight0.getShininess());
      assertNull(homeLight0.getCatalogId());
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertFalse(homeLight0.isResizable());
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertTrue(homeLight0.isVisible());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertNull(homeLight0.getCurrency());
      assertFalse(homeLight0.isMovable());
      assertNull(homeLight0.getColor());
      assertFalse(homeLight0.isModelMirrored());
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      assertFalse(homeLight0.isBackFaceShown());
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertFalse(homeLight0.isDeformable());
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertNull(homeLight0.getDescription());
      assertFalse(homeLight0.isTexturable());
      assertNull(homeLight0.getName());
      assertFalse(homeLight0.isNameVisible());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      
      Integer integer1 = new Integer((byte) (-32));
      assertNotNull(integer1);
      assertFalse(integer1.equals((Object)integer0));
      assertEquals((-32), (int)integer1);
      
      int int0 = Float.floatToIntBits((-1710.0F));
      assertEquals((-992624640), int0);
      
      boolean boolean1 = homeLight0.isPointAt(1431655765, (-2398.1F), 2632.0835F);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      assertNull(homeLight0.getShininess());
      assertNull(homeLight0.getCatalogId());
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertFalse(homeLight0.isResizable());
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertTrue(homeLight0.isVisible());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertNull(homeLight0.getCurrency());
      assertFalse(homeLight0.isMovable());
      assertNull(homeLight0.getColor());
      assertFalse(homeLight0.isModelMirrored());
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      assertFalse(homeLight0.isBackFaceShown());
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertFalse(homeLight0.isDeformable());
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertNull(homeLight0.getDescription());
      assertFalse(homeLight0.isTexturable());
      assertNull(homeLight0.getName());
      assertFalse(homeLight0.isNameVisible());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      
      int int1 = Float.floatToIntBits((-992624640));
      assertFalse(int1 == int0);
      assertEquals((-831739648), int1);
      
      homeLight0.setMovable(true);
      assertTrue(homeLight0.isMovable());
      assertNull(homeLight0.getShininess());
      assertNull(homeLight0.getCatalogId());
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertFalse(homeLight0.isResizable());
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertTrue(homeLight0.isVisible());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertNull(homeLight0.getCurrency());
      assertNull(homeLight0.getColor());
      assertFalse(homeLight0.isModelMirrored());
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      assertFalse(homeLight0.isBackFaceShown());
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertFalse(homeLight0.isDeformable());
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertNull(homeLight0.getDescription());
      assertFalse(homeLight0.isTexturable());
      assertNull(homeLight0.getName());
      assertFalse(homeLight0.isNameVisible());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      
      float float0 = 0.0F;
      boolean boolean2 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "");
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      assertFalse(boolean2);
      
      int int2 = Float.floatToIntBits(0.0F);
      assertFalse(int2 == int1);
      assertFalse(int2 == int0);
      assertEquals(0, int2);
      
      // Undeclared exception!
      try { 
        homeLight0.setDepth(5.699112F);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Piece isn't resizable
         //
         verifyException("com.eteks.sweethome3d.model.HomePieceOfFurniture", e);
      }
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      String[] stringArray0 = new String[8];
      stringArray0[0] = "";
      Float float0 = new Float((-1729.3374F));
      assertNotNull(float0);
      assertEquals((-1729.3374F), (float)float0, 0.01F);
      
      URLContent uRLContent0 = new URLContent((URL) null);
      assertNotNull(uRLContent0);
      
      Sash[] sashArray0 = new Sash[8];
      Sash sash0 = new Sash((-1.0F), 0.3926991F, (-368.692F), (-368.692F), 0.0F);
      assertNotNull(sash0);
      assertEquals(0.0F, sash0.getEndAngle(), 0.01F);
      assertEquals((-368.692F), sash0.getWidth(), 0.01F);
      assertEquals((-1.0F), sash0.getXAxis(), 0.01F);
      assertEquals((-368.692F), sash0.getStartAngle(), 0.01F);
      assertEquals(0.3926991F, sash0.getYAxis(), 0.01F);
      
      sashArray0[5] = sash0;
      Sash sash1 = new Sash((-1485.2021F), (-368.692F), (-1.0F), 0.3926991F, (-1729.3374F));
      assertNotNull(sash1);
      assertFalse(sash1.equals((Object)sash0));
      assertEquals((-1485.2021F), sash1.getXAxis(), 0.01F);
      assertEquals((-1.0F), sash1.getWidth(), 0.01F);
      assertEquals((-368.692F), sash1.getYAxis(), 0.01F);
      assertEquals((-1729.3374F), sash1.getEndAngle(), 0.01F);
      assertEquals(0.3926991F, sash1.getStartAngle(), 0.01F);
      
      sashArray0[6] = sash1;
      float[][] floatArray0 = new float[3][1];
      float[] floatArray1 = new float[3];
      floatArray1[2] = 2.0F;
      floatArray0[0] = floatArray1;
      float[] floatArray2 = new float[3];
      assertFalse(floatArray2.equals((Object)floatArray1));
      
      floatArray2[2] = (-1.0F);
      floatArray2[1] = (-1.0F);
      floatArray2[2] = (-1.0F);
      floatArray0[1] = floatArray2;
      floatArray0[2] = floatArray1;
      CatalogDoorOrWindow catalogDoorOrWindow0 = new CatalogDoorOrWindow("", "", "", "", stringArray0, (Long) null, float0, uRLContent0, uRLContent0, uRLContent0, (-368.692F), (-368.692F), (-1.0F), (-368.692F), true, (-368.692F), 0.0F, sashArray0, floatArray0, "", true, true, true, (BigDecimal) null, (BigDecimal) null, "");
      assertEquals(8, stringArray0.length);
      assertEquals(8, sashArray0.length);
      assertEquals(3, floatArray0.length);
      assertNotNull(catalogDoorOrWindow0);
      assertTrue(catalogDoorOrWindow0.isTexturable());
      assertEquals((-368.692F), catalogDoorOrWindow0.getWidth(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isProportional());
      assertEquals("", catalogDoorOrWindow0.getCurrency());
      assertTrue(catalogDoorOrWindow0.isDoorOrWindow());
      assertEquals((-368.692F), catalogDoorOrWindow0.getDepth(), 0.01F);
      assertEquals((-1729.3374F), catalogDoorOrWindow0.getGrade(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isMovable());
      assertEquals("", catalogDoorOrWindow0.getInformation());
      assertNull(catalogDoorOrWindow0.getColor());
      assertEquals((-1.0F), catalogDoorOrWindow0.getHeight(), 0.01F);
      assertEquals((-368.692F), catalogDoorOrWindow0.getElevation(), 0.01F);
      assertNull(catalogDoorOrWindow0.getStaircaseCutOutShape());
      assertEquals("", catalogDoorOrWindow0.getCreator());
      assertEquals("", catalogDoorOrWindow0.getDescription());
      assertTrue(catalogDoorOrWindow0.isResizable());
      assertNull(catalogDoorOrWindow0.getCreationDate());
      assertFalse(catalogDoorOrWindow0.isModifiable());
      assertEquals((-368.692F), catalogDoorOrWindow0.getWallThickness(), 0.01F);
      assertEquals("", catalogDoorOrWindow0.getId());
      assertEquals(0.3926991F, catalogDoorOrWindow0.getIconYaw(), 0.01F);
      assertFalse(catalogDoorOrWindow0.isBackFaceShown());
      assertEquals(0.0F, catalogDoorOrWindow0.getWallDistance(), 0.01F);
      assertEquals("", catalogDoorOrWindow0.getName());
      assertTrue(catalogDoorOrWindow0.isDeformable());
      
      HomeDoorOrWindow homeDoorOrWindow0 = new HomeDoorOrWindow(catalogDoorOrWindow0);
      assertEquals(8, stringArray0.length);
      assertEquals(8, sashArray0.length);
      assertEquals(3, floatArray0.length);
      assertNotNull(homeDoorOrWindow0);
      assertTrue(catalogDoorOrWindow0.isTexturable());
      assertEquals((-368.692F), catalogDoorOrWindow0.getWidth(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isProportional());
      assertEquals("", catalogDoorOrWindow0.getCurrency());
      assertTrue(catalogDoorOrWindow0.isDoorOrWindow());
      assertEquals((-368.692F), catalogDoorOrWindow0.getDepth(), 0.01F);
      assertEquals((-1729.3374F), catalogDoorOrWindow0.getGrade(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isMovable());
      assertEquals("", catalogDoorOrWindow0.getInformation());
      assertNull(catalogDoorOrWindow0.getColor());
      assertEquals((-1.0F), catalogDoorOrWindow0.getHeight(), 0.01F);
      assertEquals((-368.692F), catalogDoorOrWindow0.getElevation(), 0.01F);
      assertNull(catalogDoorOrWindow0.getStaircaseCutOutShape());
      assertEquals("", catalogDoorOrWindow0.getCreator());
      assertEquals("", catalogDoorOrWindow0.getDescription());
      assertTrue(catalogDoorOrWindow0.isResizable());
      assertNull(catalogDoorOrWindow0.getCreationDate());
      assertFalse(catalogDoorOrWindow0.isModifiable());
      assertEquals((-368.692F), catalogDoorOrWindow0.getWallThickness(), 0.01F);
      assertEquals("", catalogDoorOrWindow0.getId());
      assertEquals(0.3926991F, catalogDoorOrWindow0.getIconYaw(), 0.01F);
      assertFalse(catalogDoorOrWindow0.isBackFaceShown());
      assertEquals(0.0F, catalogDoorOrWindow0.getWallDistance(), 0.01F);
      assertEquals("", catalogDoorOrWindow0.getName());
      assertTrue(catalogDoorOrWindow0.isDeformable());
      assertNull(homeDoorOrWindow0.getColor());
      assertFalse(homeDoorOrWindow0.isModelMirrored());
      assertTrue(homeDoorOrWindow0.isTexturable());
      assertFalse(homeDoorOrWindow0.isNameVisible());
      assertFalse(homeDoorOrWindow0.isBackFaceShown());
      assertTrue(homeDoorOrWindow0.isVisible());
      assertTrue(homeDoorOrWindow0.isDeformable());
      assertEquals(0.0F, homeDoorOrWindow0.getAngle(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getNameXOffset(), 0.01F);
      assertEquals("", homeDoorOrWindow0.getDescription());
      assertTrue(homeDoorOrWindow0.isDoorOrWindow());
      assertTrue(homeDoorOrWindow0.isResizable());
      assertTrue(homeDoorOrWindow0.isMovable());
      assertNull(homeDoorOrWindow0.getShininess());
      assertEquals((-368.692F), homeDoorOrWindow0.getDepth(), 0.01F);
      assertNull(homeDoorOrWindow0.getStaircaseCutOutShape());
      assertEquals("", homeDoorOrWindow0.getCatalogId());
      assertEquals(0.0F, homeDoorOrWindow0.getWallDistance(), 0.01F);
      assertEquals("", homeDoorOrWindow0.getName());
      assertEquals(0.0F, homeDoorOrWindow0.getNameAngle(), 0.01F);
      assertFalse(homeDoorOrWindow0.isBoundToWall());
      assertEquals((-368.692F), homeDoorOrWindow0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getNameYOffset(), 0.01F);
      assertEquals((-368.692F), homeDoorOrWindow0.getWallThickness(), 0.01F);
      assertEquals("", homeDoorOrWindow0.getCurrency());
      assertEquals((-368.692F), homeDoorOrWindow0.getElevation(), 0.01F);
      assertEquals((-1.0F), homeDoorOrWindow0.getHeight(), 0.01F);
      assertEquals((-184.346F), homeDoorOrWindow0.getX(), 0.01F);
      assertEquals((-368.692F), homeDoorOrWindow0.getWidth(), 0.01F);
      assertEquals((-184.346F), homeDoorOrWindow0.getY(), 0.01F);
      
      int int0 = catalogDoorOrWindow0.compareTo((CatalogPieceOfFurniture) catalogDoorOrWindow0);
      assertEquals(8, stringArray0.length);
      assertEquals(8, sashArray0.length);
      assertEquals(3, floatArray0.length);
      assertEquals(0, int0);
      assertTrue(catalogDoorOrWindow0.isTexturable());
      assertEquals((-368.692F), catalogDoorOrWindow0.getWidth(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isProportional());
      assertEquals("", catalogDoorOrWindow0.getCurrency());
      assertTrue(catalogDoorOrWindow0.isDoorOrWindow());
      assertEquals((-368.692F), catalogDoorOrWindow0.getDepth(), 0.01F);
      assertEquals((-1729.3374F), catalogDoorOrWindow0.getGrade(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isMovable());
      assertEquals("", catalogDoorOrWindow0.getInformation());
      assertNull(catalogDoorOrWindow0.getColor());
      assertEquals((-1.0F), catalogDoorOrWindow0.getHeight(), 0.01F);
      assertEquals((-368.692F), catalogDoorOrWindow0.getElevation(), 0.01F);
      assertNull(catalogDoorOrWindow0.getStaircaseCutOutShape());
      assertEquals("", catalogDoorOrWindow0.getCreator());
      assertEquals("", catalogDoorOrWindow0.getDescription());
      assertTrue(catalogDoorOrWindow0.isResizable());
      assertNull(catalogDoorOrWindow0.getCreationDate());
      assertFalse(catalogDoorOrWindow0.isModifiable());
      assertEquals((-368.692F), catalogDoorOrWindow0.getWallThickness(), 0.01F);
      assertEquals("", catalogDoorOrWindow0.getId());
      assertEquals(0.3926991F, catalogDoorOrWindow0.getIconYaw(), 0.01F);
      assertFalse(catalogDoorOrWindow0.isBackFaceShown());
      assertEquals(0.0F, catalogDoorOrWindow0.getWallDistance(), 0.01F);
      assertEquals("", catalogDoorOrWindow0.getName());
      assertTrue(catalogDoorOrWindow0.isDeformable());
      
      homeDoorOrWindow0.setNameXOffset(2.0F);
      assertEquals(8, stringArray0.length);
      assertEquals(8, sashArray0.length);
      assertEquals(3, floatArray0.length);
      assertTrue(catalogDoorOrWindow0.isTexturable());
      assertEquals((-368.692F), catalogDoorOrWindow0.getWidth(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isProportional());
      assertEquals("", catalogDoorOrWindow0.getCurrency());
      assertTrue(catalogDoorOrWindow0.isDoorOrWindow());
      assertEquals((-368.692F), catalogDoorOrWindow0.getDepth(), 0.01F);
      assertEquals((-1729.3374F), catalogDoorOrWindow0.getGrade(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isMovable());
      assertEquals("", catalogDoorOrWindow0.getInformation());
      assertNull(catalogDoorOrWindow0.getColor());
      assertEquals((-1.0F), catalogDoorOrWindow0.getHeight(), 0.01F);
      assertEquals((-368.692F), catalogDoorOrWindow0.getElevation(), 0.01F);
      assertNull(catalogDoorOrWindow0.getStaircaseCutOutShape());
      assertEquals("", catalogDoorOrWindow0.getCreator());
      assertEquals("", catalogDoorOrWindow0.getDescription());
      assertTrue(catalogDoorOrWindow0.isResizable());
      assertNull(catalogDoorOrWindow0.getCreationDate());
      assertFalse(catalogDoorOrWindow0.isModifiable());
      assertEquals((-368.692F), catalogDoorOrWindow0.getWallThickness(), 0.01F);
      assertEquals("", catalogDoorOrWindow0.getId());
      assertEquals(0.3926991F, catalogDoorOrWindow0.getIconYaw(), 0.01F);
      assertFalse(catalogDoorOrWindow0.isBackFaceShown());
      assertEquals(0.0F, catalogDoorOrWindow0.getWallDistance(), 0.01F);
      assertEquals("", catalogDoorOrWindow0.getName());
      assertTrue(catalogDoorOrWindow0.isDeformable());
      assertNull(homeDoorOrWindow0.getColor());
      assertFalse(homeDoorOrWindow0.isModelMirrored());
      assertTrue(homeDoorOrWindow0.isTexturable());
      assertFalse(homeDoorOrWindow0.isNameVisible());
      assertFalse(homeDoorOrWindow0.isBackFaceShown());
      assertTrue(homeDoorOrWindow0.isVisible());
      assertTrue(homeDoorOrWindow0.isDeformable());
      assertEquals(0.0F, homeDoorOrWindow0.getAngle(), 0.01F);
      assertEquals(2.0F, homeDoorOrWindow0.getNameXOffset(), 0.01F);
      assertEquals("", homeDoorOrWindow0.getDescription());
      assertTrue(homeDoorOrWindow0.isDoorOrWindow());
      assertTrue(homeDoorOrWindow0.isResizable());
      assertTrue(homeDoorOrWindow0.isMovable());
      assertNull(homeDoorOrWindow0.getShininess());
      assertEquals((-368.692F), homeDoorOrWindow0.getDepth(), 0.01F);
      assertNull(homeDoorOrWindow0.getStaircaseCutOutShape());
      assertEquals("", homeDoorOrWindow0.getCatalogId());
      assertEquals(0.0F, homeDoorOrWindow0.getWallDistance(), 0.01F);
      assertEquals("", homeDoorOrWindow0.getName());
      assertEquals(0.0F, homeDoorOrWindow0.getNameAngle(), 0.01F);
      assertFalse(homeDoorOrWindow0.isBoundToWall());
      assertEquals((-368.692F), homeDoorOrWindow0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getNameYOffset(), 0.01F);
      assertEquals((-368.692F), homeDoorOrWindow0.getWallThickness(), 0.01F);
      assertEquals("", homeDoorOrWindow0.getCurrency());
      assertEquals((-368.692F), homeDoorOrWindow0.getElevation(), 0.01F);
      assertEquals((-1.0F), homeDoorOrWindow0.getHeight(), 0.01F);
      assertEquals((-184.346F), homeDoorOrWindow0.getX(), 0.01F);
      assertEquals((-368.692F), homeDoorOrWindow0.getWidth(), 0.01F);
      assertEquals((-184.346F), homeDoorOrWindow0.getY(), 0.01F);
      
      String string0 = homeDoorOrWindow0.getCurrency();
      assertEquals(8, stringArray0.length);
      assertEquals(8, sashArray0.length);
      assertEquals(3, floatArray0.length);
      assertNotNull(string0);
      assertEquals("", string0);
      assertTrue(catalogDoorOrWindow0.isTexturable());
      assertEquals((-368.692F), catalogDoorOrWindow0.getWidth(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isProportional());
      assertEquals("", catalogDoorOrWindow0.getCurrency());
      assertTrue(catalogDoorOrWindow0.isDoorOrWindow());
      assertEquals((-368.692F), catalogDoorOrWindow0.getDepth(), 0.01F);
      assertEquals((-1729.3374F), catalogDoorOrWindow0.getGrade(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isMovable());
      assertEquals("", catalogDoorOrWindow0.getInformation());
      assertNull(catalogDoorOrWindow0.getColor());
      assertEquals((-1.0F), catalogDoorOrWindow0.getHeight(), 0.01F);
      assertEquals((-368.692F), catalogDoorOrWindow0.getElevation(), 0.01F);
      assertNull(catalogDoorOrWindow0.getStaircaseCutOutShape());
      assertEquals("", catalogDoorOrWindow0.getCreator());
      assertEquals("", catalogDoorOrWindow0.getDescription());
      assertTrue(catalogDoorOrWindow0.isResizable());
      assertNull(catalogDoorOrWindow0.getCreationDate());
      assertFalse(catalogDoorOrWindow0.isModifiable());
      assertEquals((-368.692F), catalogDoorOrWindow0.getWallThickness(), 0.01F);
      assertEquals("", catalogDoorOrWindow0.getId());
      assertEquals(0.3926991F, catalogDoorOrWindow0.getIconYaw(), 0.01F);
      assertFalse(catalogDoorOrWindow0.isBackFaceShown());
      assertEquals(0.0F, catalogDoorOrWindow0.getWallDistance(), 0.01F);
      assertEquals("", catalogDoorOrWindow0.getName());
      assertTrue(catalogDoorOrWindow0.isDeformable());
      assertNull(homeDoorOrWindow0.getColor());
      assertFalse(homeDoorOrWindow0.isModelMirrored());
      assertTrue(homeDoorOrWindow0.isTexturable());
      assertFalse(homeDoorOrWindow0.isNameVisible());
      assertFalse(homeDoorOrWindow0.isBackFaceShown());
      assertTrue(homeDoorOrWindow0.isVisible());
      assertTrue(homeDoorOrWindow0.isDeformable());
      assertEquals(0.0F, homeDoorOrWindow0.getAngle(), 0.01F);
      assertEquals(2.0F, homeDoorOrWindow0.getNameXOffset(), 0.01F);
      assertEquals("", homeDoorOrWindow0.getDescription());
      assertTrue(homeDoorOrWindow0.isDoorOrWindow());
      assertTrue(homeDoorOrWindow0.isResizable());
      assertTrue(homeDoorOrWindow0.isMovable());
      assertNull(homeDoorOrWindow0.getShininess());
      assertEquals((-368.692F), homeDoorOrWindow0.getDepth(), 0.01F);
      assertNull(homeDoorOrWindow0.getStaircaseCutOutShape());
      assertEquals("", homeDoorOrWindow0.getCatalogId());
      assertEquals(0.0F, homeDoorOrWindow0.getWallDistance(), 0.01F);
      assertEquals("", homeDoorOrWindow0.getName());
      assertEquals(0.0F, homeDoorOrWindow0.getNameAngle(), 0.01F);
      assertFalse(homeDoorOrWindow0.isBoundToWall());
      assertEquals((-368.692F), homeDoorOrWindow0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getNameYOffset(), 0.01F);
      assertEquals((-368.692F), homeDoorOrWindow0.getWallThickness(), 0.01F);
      assertEquals("", homeDoorOrWindow0.getCurrency());
      assertEquals((-368.692F), homeDoorOrWindow0.getElevation(), 0.01F);
      assertEquals((-1.0F), homeDoorOrWindow0.getHeight(), 0.01F);
      assertEquals((-184.346F), homeDoorOrWindow0.getX(), 0.01F);
      assertEquals((-368.692F), homeDoorOrWindow0.getWidth(), 0.01F);
      assertEquals((-184.346F), homeDoorOrWindow0.getY(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      Integer integer0 = new Integer(1431655793);
      assertNotNull(integer0);
      assertEquals(1431655793, (int)integer0);
      
      Light light0 = mock(Light.class, new ViolatedAssumptionAnswer());
      doReturn((LightSource[]) null).when(light0).getLightSources();
      doReturn((Integer) null).when(light0).getColor();
      doReturn((String) null).when(light0).getCurrency();
      doReturn(0.0F).when(light0).getDepth();
      doReturn((String) null).when(light0).getDescription();
      doReturn(0.0F).when(light0).getElevation();
      doReturn(0.0F).when(light0).getHeight();
      doReturn((Content) null).when(light0).getIcon();
      doReturn((Content) null).when(light0).getModel();
      doReturn((float[][]) null).when(light0).getModelRotation();
      doReturn((String) null).when(light0).getName();
      doReturn((Content) null).when(light0).getPlanIcon();
      doReturn((BigDecimal) null).when(light0).getPrice();
      doReturn((String) null).when(light0).getStaircaseCutOutShape();
      doReturn((BigDecimal) null).when(light0).getValueAddedTaxPercentage();
      doReturn(0.0F).when(light0).getWidth();
      doReturn(false).when(light0).isBackFaceShown();
      doReturn(false).when(light0).isDeformable();
      doReturn(false).when(light0).isDoorOrWindow();
      doReturn(false).when(light0).isMovable();
      doReturn(false).when(light0).isResizable();
      doReturn(false).when(light0).isTexturable();
      byte[] byteArray0 = new byte[5];
      byteArray0[1] = (byte)1;
      HomeLight homeLight0 = new HomeLight(light0);
      assertNotNull(homeLight0);
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertNull(homeLight0.getDescription());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertNull(homeLight0.getName());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertNull(homeLight0.getShininess());
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertFalse(homeLight0.isResizable());
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertFalse(homeLight0.isDoorOrWindow());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertFalse(homeLight0.isTexturable());
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertTrue(homeLight0.isVisible());
      assertNull(homeLight0.getCurrency());
      assertFalse(homeLight0.isDeformable());
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertFalse(homeLight0.isMovable());
      assertFalse(homeLight0.isNameVisible());
      assertFalse(homeLight0.isBackFaceShown());
      assertFalse(homeLight0.isModelMirrored());
      assertNull(homeLight0.getColor());
      assertNull(homeLight0.getCatalogId());
      
      homeLight0.setY(1431655793);
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertNull(homeLight0.getDescription());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertNull(homeLight0.getName());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertNull(homeLight0.getShininess());
      assertFalse(homeLight0.isResizable());
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertFalse(homeLight0.isDoorOrWindow());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertFalse(homeLight0.isTexturable());
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertTrue(homeLight0.isVisible());
      assertNull(homeLight0.getCurrency());
      assertFalse(homeLight0.isDeformable());
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertFalse(homeLight0.isMovable());
      assertFalse(homeLight0.isNameVisible());
      assertFalse(homeLight0.isBackFaceShown());
      assertFalse(homeLight0.isModelMirrored());
      assertEquals(1.43165581E9F, homeLight0.getY(), 0.01F);
      assertNull(homeLight0.getColor());
      assertNull(homeLight0.getCatalogId());
      
      BigDecimal bigDecimal0 = homeLight0.getValueAddedTax();
      assertNull(bigDecimal0);
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertNull(homeLight0.getDescription());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertNull(homeLight0.getName());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertNull(homeLight0.getShininess());
      assertFalse(homeLight0.isResizable());
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertFalse(homeLight0.isDoorOrWindow());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertFalse(homeLight0.isTexturable());
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertTrue(homeLight0.isVisible());
      assertNull(homeLight0.getCurrency());
      assertFalse(homeLight0.isDeformable());
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertFalse(homeLight0.isMovable());
      assertFalse(homeLight0.isNameVisible());
      assertFalse(homeLight0.isBackFaceShown());
      assertFalse(homeLight0.isModelMirrored());
      assertEquals(1.43165581E9F, homeLight0.getY(), 0.01F);
      assertNull(homeLight0.getColor());
      assertNull(homeLight0.getCatalogId());
      
      String string0 = homeLight0.getName();
      assertNull(string0);
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertNull(homeLight0.getDescription());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertNull(homeLight0.getName());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertNull(homeLight0.getShininess());
      assertFalse(homeLight0.isResizable());
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertFalse(homeLight0.isDoorOrWindow());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertFalse(homeLight0.isTexturable());
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertTrue(homeLight0.isVisible());
      assertNull(homeLight0.getCurrency());
      assertFalse(homeLight0.isDeformable());
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertFalse(homeLight0.isMovable());
      assertFalse(homeLight0.isNameVisible());
      assertFalse(homeLight0.isBackFaceShown());
      assertFalse(homeLight0.isModelMirrored());
      assertEquals(1.43165581E9F, homeLight0.getY(), 0.01F);
      assertNull(homeLight0.getColor());
      assertNull(homeLight0.getCatalogId());
      
      Level level0 = homeLight0.getLevel();
      assertNull(level0);
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertNull(homeLight0.getDescription());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertNull(homeLight0.getName());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertNull(homeLight0.getShininess());
      assertFalse(homeLight0.isResizable());
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertFalse(homeLight0.isDoorOrWindow());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertFalse(homeLight0.isTexturable());
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertTrue(homeLight0.isVisible());
      assertNull(homeLight0.getCurrency());
      assertFalse(homeLight0.isDeformable());
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertFalse(homeLight0.isMovable());
      assertFalse(homeLight0.isNameVisible());
      assertFalse(homeLight0.isBackFaceShown());
      assertFalse(homeLight0.isModelMirrored());
      assertEquals(1.43165581E9F, homeLight0.getY(), 0.01F);
      assertNull(homeLight0.getColor());
      assertNull(homeLight0.getCatalogId());
      
      HomeLight homeLight1 = homeLight0.clone();
      assertNotNull(homeLight1);
      assertNotSame(homeLight0, homeLight1);
      assertNotSame(homeLight1, homeLight0);
      assertFalse(homeLight1.equals((Object)homeLight0));
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertNull(homeLight0.getDescription());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertNull(homeLight0.getName());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertNull(homeLight0.getShininess());
      assertFalse(homeLight0.isResizable());
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertFalse(homeLight0.isDoorOrWindow());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertFalse(homeLight0.isTexturable());
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertTrue(homeLight0.isVisible());
      assertNull(homeLight0.getCurrency());
      assertFalse(homeLight0.isDeformable());
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertFalse(homeLight0.isMovable());
      assertFalse(homeLight0.isNameVisible());
      assertFalse(homeLight0.isBackFaceShown());
      assertFalse(homeLight0.isModelMirrored());
      assertEquals(1.43165581E9F, homeLight0.getY(), 0.01F);
      assertNull(homeLight0.getColor());
      assertNull(homeLight0.getCatalogId());
      assertFalse(homeLight1.isMovable());
      assertFalse(homeLight1.isResizable());
      assertEquals(0.0F, homeLight1.getHeight(), 0.01F);
      assertNull(homeLight1.getShininess());
      assertEquals(0.0F, homeLight1.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeLight1.getDepth(), 0.01F);
      assertEquals(0.0F, homeLight1.getWidth(), 0.01F);
      assertNull(homeLight1.getStaircaseCutOutShape());
      assertNull(homeLight1.getDescription());
      assertEquals(0.0F, homeLight1.getElevation(), 0.01F);
      assertEquals(0.0F, homeLight1.getNameAngle(), 0.01F);
      assertFalse(homeLight1.isDeformable());
      assertTrue(homeLight1.isVisible());
      assertEquals(0.0F, homeLight1.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight1.getX(), 0.01F);
      assertEquals(0.0F, homeLight1.getAngle(), 0.01F);
      assertFalse(homeLight1.isTexturable());
      assertFalse(homeLight1.isModelMirrored());
      assertFalse(homeLight1.isDoorOrWindow());
      assertFalse(homeLight1.isBackFaceShown());
      assertFalse(homeLight1.isNameVisible());
      assertNull(homeLight1.getName());
      assertNull(homeLight1.getCurrency());
      assertEquals(0.5F, homeLight1.getPower(), 0.01F);
      assertNull(homeLight1.getCatalogId());
      assertEquals(0.0F, homeLight1.getNameYOffset(), 0.01F);
      assertEquals(1.43165581E9F, homeLight1.getY(), 0.01F);
      assertNull(homeLight1.getColor());
      
      boolean boolean0 = homeLight0.isTopRightPointAt(1873.45F, 1431655793, (-657.54F));
      assertNotSame(homeLight0, homeLight1);
      assertFalse(homeLight0.equals((Object)homeLight1));
      assertFalse(boolean0);
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertNull(homeLight0.getDescription());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertNull(homeLight0.getName());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertNull(homeLight0.getShininess());
      assertFalse(homeLight0.isResizable());
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertFalse(homeLight0.isDoorOrWindow());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertFalse(homeLight0.isTexturable());
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertTrue(homeLight0.isVisible());
      assertNull(homeLight0.getCurrency());
      assertFalse(homeLight0.isDeformable());
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertFalse(homeLight0.isMovable());
      assertFalse(homeLight0.isNameVisible());
      assertFalse(homeLight0.isBackFaceShown());
      assertFalse(homeLight0.isModelMirrored());
      assertEquals(1.43165581E9F, homeLight0.getY(), 0.01F);
      assertNull(homeLight0.getColor());
      assertNull(homeLight0.getCatalogId());
      
      String string1 = homeLight1.getName();
      assertNull(string1);
      assertNotSame(homeLight0, homeLight1);
      assertNotSame(homeLight1, homeLight0);
      assertFalse(homeLight0.equals((Object)homeLight1));
      assertFalse(homeLight1.equals((Object)homeLight0));
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertNull(homeLight0.getDescription());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertNull(homeLight0.getName());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertNull(homeLight0.getShininess());
      assertFalse(homeLight0.isResizable());
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertFalse(homeLight0.isDoorOrWindow());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertFalse(homeLight0.isTexturable());
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertTrue(homeLight0.isVisible());
      assertNull(homeLight0.getCurrency());
      assertFalse(homeLight0.isDeformable());
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertFalse(homeLight0.isMovable());
      assertFalse(homeLight0.isNameVisible());
      assertFalse(homeLight0.isBackFaceShown());
      assertFalse(homeLight0.isModelMirrored());
      assertEquals(1.43165581E9F, homeLight0.getY(), 0.01F);
      assertNull(homeLight0.getColor());
      assertNull(homeLight0.getCatalogId());
      assertFalse(homeLight1.isMovable());
      assertFalse(homeLight1.isResizable());
      assertEquals(0.0F, homeLight1.getHeight(), 0.01F);
      assertNull(homeLight1.getShininess());
      assertEquals(0.0F, homeLight1.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeLight1.getDepth(), 0.01F);
      assertEquals(0.0F, homeLight1.getWidth(), 0.01F);
      assertNull(homeLight1.getStaircaseCutOutShape());
      assertNull(homeLight1.getDescription());
      assertEquals(0.0F, homeLight1.getElevation(), 0.01F);
      assertEquals(0.0F, homeLight1.getNameAngle(), 0.01F);
      assertFalse(homeLight1.isDeformable());
      assertTrue(homeLight1.isVisible());
      assertEquals(0.0F, homeLight1.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight1.getX(), 0.01F);
      assertEquals(0.0F, homeLight1.getAngle(), 0.01F);
      assertFalse(homeLight1.isTexturable());
      assertFalse(homeLight1.isModelMirrored());
      assertFalse(homeLight1.isDoorOrWindow());
      assertFalse(homeLight1.isBackFaceShown());
      assertFalse(homeLight1.isNameVisible());
      assertNull(homeLight1.getName());
      assertNull(homeLight1.getCurrency());
      assertEquals(0.5F, homeLight1.getPower(), 0.01F);
      assertNull(homeLight1.getCatalogId());
      assertEquals(0.0F, homeLight1.getNameYOffset(), 0.01F);
      assertEquals(1.43165581E9F, homeLight1.getY(), 0.01F);
      assertNull(homeLight1.getColor());
      
      Level level1 = homeLight1.getLevel();
      assertNull(level1);
      assertNotSame(homeLight0, homeLight1);
      assertNotSame(homeLight1, homeLight0);
      assertFalse(homeLight0.equals((Object)homeLight1));
      assertFalse(homeLight1.equals((Object)homeLight0));
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertNull(homeLight0.getDescription());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertNull(homeLight0.getName());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertNull(homeLight0.getShininess());
      assertFalse(homeLight0.isResizable());
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertFalse(homeLight0.isDoorOrWindow());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertFalse(homeLight0.isTexturable());
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertTrue(homeLight0.isVisible());
      assertNull(homeLight0.getCurrency());
      assertFalse(homeLight0.isDeformable());
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertFalse(homeLight0.isMovable());
      assertFalse(homeLight0.isNameVisible());
      assertFalse(homeLight0.isBackFaceShown());
      assertFalse(homeLight0.isModelMirrored());
      assertEquals(1.43165581E9F, homeLight0.getY(), 0.01F);
      assertNull(homeLight0.getColor());
      assertNull(homeLight0.getCatalogId());
      assertFalse(homeLight1.isMovable());
      assertFalse(homeLight1.isResizable());
      assertEquals(0.0F, homeLight1.getHeight(), 0.01F);
      assertNull(homeLight1.getShininess());
      assertEquals(0.0F, homeLight1.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeLight1.getDepth(), 0.01F);
      assertEquals(0.0F, homeLight1.getWidth(), 0.01F);
      assertNull(homeLight1.getStaircaseCutOutShape());
      assertNull(homeLight1.getDescription());
      assertEquals(0.0F, homeLight1.getElevation(), 0.01F);
      assertEquals(0.0F, homeLight1.getNameAngle(), 0.01F);
      assertFalse(homeLight1.isDeformable());
      assertTrue(homeLight1.isVisible());
      assertEquals(0.0F, homeLight1.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight1.getX(), 0.01F);
      assertEquals(0.0F, homeLight1.getAngle(), 0.01F);
      assertFalse(homeLight1.isTexturable());
      assertFalse(homeLight1.isModelMirrored());
      assertFalse(homeLight1.isDoorOrWindow());
      assertFalse(homeLight1.isBackFaceShown());
      assertFalse(homeLight1.isNameVisible());
      assertNull(homeLight1.getName());
      assertNull(homeLight1.getCurrency());
      assertEquals(0.5F, homeLight1.getPower(), 0.01F);
      assertNull(homeLight1.getCatalogId());
      assertEquals(0.0F, homeLight1.getNameYOffset(), 0.01F);
      assertEquals(1.43165581E9F, homeLight1.getY(), 0.01F);
      assertNull(homeLight1.getColor());
      
      HomeLight homeLight2 = homeLight1.clone();
      assertNotNull(homeLight2);
      assertNotSame(homeLight0, homeLight1);
      assertNotSame(homeLight0, homeLight2);
      assertNotSame(homeLight1, homeLight2);
      assertNotSame(homeLight1, homeLight0);
      assertNotSame(homeLight2, homeLight1);
      assertNotSame(homeLight2, homeLight0);
      assertFalse(homeLight0.equals((Object)homeLight1));
      assertFalse(homeLight1.equals((Object)homeLight0));
      assertFalse(homeLight2.equals((Object)homeLight1));
      assertFalse(homeLight2.equals((Object)homeLight0));
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertNull(homeLight0.getDescription());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertNull(homeLight0.getName());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertNull(homeLight0.getShininess());
      assertFalse(homeLight0.isResizable());
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertFalse(homeLight0.isDoorOrWindow());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertFalse(homeLight0.isTexturable());
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertTrue(homeLight0.isVisible());
      assertNull(homeLight0.getCurrency());
      assertFalse(homeLight0.isDeformable());
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertFalse(homeLight0.isMovable());
      assertFalse(homeLight0.isNameVisible());
      assertFalse(homeLight0.isBackFaceShown());
      assertFalse(homeLight0.isModelMirrored());
      assertEquals(1.43165581E9F, homeLight0.getY(), 0.01F);
      assertNull(homeLight0.getColor());
      assertNull(homeLight0.getCatalogId());
      assertFalse(homeLight1.isMovable());
      assertFalse(homeLight1.isResizable());
      assertEquals(0.0F, homeLight1.getHeight(), 0.01F);
      assertNull(homeLight1.getShininess());
      assertEquals(0.0F, homeLight1.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeLight1.getDepth(), 0.01F);
      assertEquals(0.0F, homeLight1.getWidth(), 0.01F);
      assertNull(homeLight1.getStaircaseCutOutShape());
      assertNull(homeLight1.getDescription());
      assertEquals(0.0F, homeLight1.getElevation(), 0.01F);
      assertEquals(0.0F, homeLight1.getNameAngle(), 0.01F);
      assertFalse(homeLight1.isDeformable());
      assertTrue(homeLight1.isVisible());
      assertEquals(0.0F, homeLight1.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight1.getX(), 0.01F);
      assertEquals(0.0F, homeLight1.getAngle(), 0.01F);
      assertFalse(homeLight1.isTexturable());
      assertFalse(homeLight1.isModelMirrored());
      assertFalse(homeLight1.isDoorOrWindow());
      assertFalse(homeLight1.isBackFaceShown());
      assertFalse(homeLight1.isNameVisible());
      assertNull(homeLight1.getName());
      assertNull(homeLight1.getCurrency());
      assertEquals(0.5F, homeLight1.getPower(), 0.01F);
      assertNull(homeLight1.getCatalogId());
      assertEquals(0.0F, homeLight1.getNameYOffset(), 0.01F);
      assertEquals(1.43165581E9F, homeLight1.getY(), 0.01F);
      assertNull(homeLight1.getColor());
      assertEquals(0.0F, homeLight2.getElevation(), 0.01F);
      assertEquals(0.0F, homeLight2.getAngle(), 0.01F);
      assertEquals(0.0F, homeLight2.getNameXOffset(), 0.01F);
      assertNull(homeLight2.getDescription());
      assertEquals(0.0F, homeLight2.getX(), 0.01F);
      assertFalse(homeLight2.isDoorOrWindow());
      assertEquals(0.0F, homeLight2.getGroundElevation(), 0.01F);
      assertFalse(homeLight2.isTexturable());
      assertNull(homeLight2.getCatalogId());
      assertNull(homeLight2.getColor());
      assertFalse(homeLight2.isModelMirrored());
      assertFalse(homeLight2.isBackFaceShown());
      assertFalse(homeLight2.isNameVisible());
      assertNull(homeLight2.getName());
      assertEquals(0.0F, homeLight2.getHeight(), 0.01F);
      assertTrue(homeLight2.isVisible());
      assertEquals(0.0F, homeLight2.getWidth(), 0.01F);
      assertEquals(1.43165581E9F, homeLight2.getY(), 0.01F);
      assertEquals(0.0F, homeLight2.getNameYOffset(), 0.01F);
      assertNull(homeLight2.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight2.getNameAngle(), 0.01F);
      assertEquals(0.0F, homeLight2.getDepth(), 0.01F);
      assertNull(homeLight2.getShininess());
      assertEquals(0.5F, homeLight2.getPower(), 0.01F);
      assertNull(homeLight2.getCurrency());
      assertFalse(homeLight2.isMovable());
      assertFalse(homeLight2.isDeformable());
      assertFalse(homeLight2.isResizable());
      
      homeLight2.setAngle((-689.0F));
      assertNotSame(homeLight0, homeLight1);
      assertNotSame(homeLight0, homeLight2);
      assertNotSame(homeLight1, homeLight2);
      assertNotSame(homeLight1, homeLight0);
      assertNotSame(homeLight2, homeLight1);
      assertNotSame(homeLight2, homeLight0);
      assertFalse(homeLight0.equals((Object)homeLight1));
      assertFalse(homeLight0.equals((Object)homeLight2));
      assertFalse(homeLight1.equals((Object)homeLight2));
      assertFalse(homeLight1.equals((Object)homeLight0));
      assertFalse(homeLight2.equals((Object)homeLight1));
      assertFalse(homeLight2.equals((Object)homeLight0));
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertNull(homeLight0.getDescription());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertNull(homeLight0.getName());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertNull(homeLight0.getShininess());
      assertFalse(homeLight0.isResizable());
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertFalse(homeLight0.isDoorOrWindow());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertFalse(homeLight0.isTexturable());
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertTrue(homeLight0.isVisible());
      assertNull(homeLight0.getCurrency());
      assertFalse(homeLight0.isDeformable());
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertFalse(homeLight0.isMovable());
      assertFalse(homeLight0.isNameVisible());
      assertFalse(homeLight0.isBackFaceShown());
      assertFalse(homeLight0.isModelMirrored());
      assertEquals(1.43165581E9F, homeLight0.getY(), 0.01F);
      assertNull(homeLight0.getColor());
      assertNull(homeLight0.getCatalogId());
      assertFalse(homeLight1.isMovable());
      assertFalse(homeLight1.isResizable());
      assertEquals(0.0F, homeLight1.getHeight(), 0.01F);
      assertNull(homeLight1.getShininess());
      assertEquals(0.0F, homeLight1.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeLight1.getDepth(), 0.01F);
      assertEquals(0.0F, homeLight1.getWidth(), 0.01F);
      assertNull(homeLight1.getStaircaseCutOutShape());
      assertNull(homeLight1.getDescription());
      assertEquals(0.0F, homeLight1.getElevation(), 0.01F);
      assertEquals(0.0F, homeLight1.getNameAngle(), 0.01F);
      assertFalse(homeLight1.isDeformable());
      assertTrue(homeLight1.isVisible());
      assertEquals(0.0F, homeLight1.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight1.getX(), 0.01F);
      assertEquals(0.0F, homeLight1.getAngle(), 0.01F);
      assertFalse(homeLight1.isTexturable());
      assertFalse(homeLight1.isModelMirrored());
      assertFalse(homeLight1.isDoorOrWindow());
      assertFalse(homeLight1.isBackFaceShown());
      assertFalse(homeLight1.isNameVisible());
      assertNull(homeLight1.getName());
      assertNull(homeLight1.getCurrency());
      assertEquals(0.5F, homeLight1.getPower(), 0.01F);
      assertNull(homeLight1.getCatalogId());
      assertEquals(0.0F, homeLight1.getNameYOffset(), 0.01F);
      assertEquals(1.43165581E9F, homeLight1.getY(), 0.01F);
      assertNull(homeLight1.getColor());
      assertEquals(0.0F, homeLight2.getElevation(), 0.01F);
      assertEquals(0.0F, homeLight2.getNameXOffset(), 0.01F);
      assertNull(homeLight2.getDescription());
      assertEquals(0.0F, homeLight2.getX(), 0.01F);
      assertFalse(homeLight2.isDoorOrWindow());
      assertEquals(0.0F, homeLight2.getGroundElevation(), 0.01F);
      assertFalse(homeLight2.isTexturable());
      assertNull(homeLight2.getCatalogId());
      assertNull(homeLight2.getColor());
      assertFalse(homeLight2.isModelMirrored());
      assertFalse(homeLight2.isBackFaceShown());
      assertFalse(homeLight2.isNameVisible());
      assertNull(homeLight2.getName());
      assertEquals(0.0F, homeLight2.getHeight(), 0.01F);
      assertTrue(homeLight2.isVisible());
      assertEquals(0.0F, homeLight2.getWidth(), 0.01F);
      assertEquals(1.43165581E9F, homeLight2.getY(), 0.01F);
      assertEquals(0.0F, homeLight2.getNameYOffset(), 0.01F);
      assertNull(homeLight2.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight2.getNameAngle(), 0.01F);
      assertEquals(0.0F, homeLight2.getDepth(), 0.01F);
      assertNull(homeLight2.getShininess());
      assertEquals(0.5F, homeLight2.getPower(), 0.01F);
      assertNull(homeLight2.getCurrency());
      assertFalse(homeLight2.isMovable());
      assertFalse(homeLight2.isDeformable());
      assertFalse(homeLight2.isResizable());
      assertEquals(2.1503837F, homeLight2.getAngle(), 0.01F);
      
      homeLight2.setName("com.eteks.sweethome3d.model.HomePieceOfFurniture$5");
      assertNotSame(homeLight0, homeLight1);
      assertNotSame(homeLight0, homeLight2);
      assertNotSame(homeLight1, homeLight2);
      assertNotSame(homeLight1, homeLight0);
      assertNotSame(homeLight2, homeLight1);
      assertNotSame(homeLight2, homeLight0);
      assertFalse(homeLight0.equals((Object)homeLight1));
      assertFalse(homeLight0.equals((Object)homeLight2));
      assertFalse(homeLight1.equals((Object)homeLight2));
      assertFalse(homeLight1.equals((Object)homeLight0));
      assertFalse(homeLight2.equals((Object)homeLight1));
      assertFalse(homeLight2.equals((Object)homeLight0));
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertNull(homeLight0.getDescription());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertNull(homeLight0.getName());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertNull(homeLight0.getShininess());
      assertFalse(homeLight0.isResizable());
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertFalse(homeLight0.isDoorOrWindow());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertFalse(homeLight0.isTexturable());
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertTrue(homeLight0.isVisible());
      assertNull(homeLight0.getCurrency());
      assertFalse(homeLight0.isDeformable());
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertFalse(homeLight0.isMovable());
      assertFalse(homeLight0.isNameVisible());
      assertFalse(homeLight0.isBackFaceShown());
      assertFalse(homeLight0.isModelMirrored());
      assertEquals(1.43165581E9F, homeLight0.getY(), 0.01F);
      assertNull(homeLight0.getColor());
      assertNull(homeLight0.getCatalogId());
      assertFalse(homeLight1.isMovable());
      assertFalse(homeLight1.isResizable());
      assertEquals(0.0F, homeLight1.getHeight(), 0.01F);
      assertNull(homeLight1.getShininess());
      assertEquals(0.0F, homeLight1.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeLight1.getDepth(), 0.01F);
      assertEquals(0.0F, homeLight1.getWidth(), 0.01F);
      assertNull(homeLight1.getStaircaseCutOutShape());
      assertNull(homeLight1.getDescription());
      assertEquals(0.0F, homeLight1.getElevation(), 0.01F);
      assertEquals(0.0F, homeLight1.getNameAngle(), 0.01F);
      assertFalse(homeLight1.isDeformable());
      assertTrue(homeLight1.isVisible());
      assertEquals(0.0F, homeLight1.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight1.getX(), 0.01F);
      assertEquals(0.0F, homeLight1.getAngle(), 0.01F);
      assertFalse(homeLight1.isTexturable());
      assertFalse(homeLight1.isModelMirrored());
      assertFalse(homeLight1.isDoorOrWindow());
      assertFalse(homeLight1.isBackFaceShown());
      assertFalse(homeLight1.isNameVisible());
      assertNull(homeLight1.getName());
      assertNull(homeLight1.getCurrency());
      assertEquals(0.5F, homeLight1.getPower(), 0.01F);
      assertNull(homeLight1.getCatalogId());
      assertEquals(0.0F, homeLight1.getNameYOffset(), 0.01F);
      assertEquals(1.43165581E9F, homeLight1.getY(), 0.01F);
      assertNull(homeLight1.getColor());
      assertEquals("com.eteks.sweethome3d.model.HomePieceOfFurniture$5", homeLight2.getName());
      assertEquals(0.0F, homeLight2.getElevation(), 0.01F);
      assertEquals(0.0F, homeLight2.getNameXOffset(), 0.01F);
      assertNull(homeLight2.getDescription());
      assertEquals(0.0F, homeLight2.getX(), 0.01F);
      assertFalse(homeLight2.isDoorOrWindow());
      assertEquals(0.0F, homeLight2.getGroundElevation(), 0.01F);
      assertFalse(homeLight2.isTexturable());
      assertNull(homeLight2.getCatalogId());
      assertNull(homeLight2.getColor());
      assertFalse(homeLight2.isModelMirrored());
      assertFalse(homeLight2.isBackFaceShown());
      assertFalse(homeLight2.isNameVisible());
      assertEquals(0.0F, homeLight2.getHeight(), 0.01F);
      assertTrue(homeLight2.isVisible());
      assertEquals(0.0F, homeLight2.getWidth(), 0.01F);
      assertEquals(1.43165581E9F, homeLight2.getY(), 0.01F);
      assertEquals(0.0F, homeLight2.getNameYOffset(), 0.01F);
      assertNull(homeLight2.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight2.getNameAngle(), 0.01F);
      assertEquals(0.0F, homeLight2.getDepth(), 0.01F);
      assertNull(homeLight2.getShininess());
      assertEquals(0.5F, homeLight2.getPower(), 0.01F);
      assertNull(homeLight2.getCurrency());
      assertFalse(homeLight2.isMovable());
      assertFalse(homeLight2.isDeformable());
      assertFalse(homeLight2.isResizable());
      assertEquals(2.1503837F, homeLight2.getAngle(), 0.01F);
      
      Integer integer1 = Integer.valueOf((int) (byte)1);
      assertNotNull(integer1);
      assertFalse(integer1.equals((Object)integer0));
      assertEquals(1, (int)integer1);
      
      // Undeclared exception!
      try { 
        homeLight2.setColor(integer1);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Piece isn't texturable
         //
         verifyException("com.eteks.sweethome3d.model.HomePieceOfFurniture", e);
      }
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      Light light0 = mock(Light.class, new ViolatedAssumptionAnswer());
      doReturn((LightSource[]) null).when(light0).getLightSources();
      doReturn((Integer) null).when(light0).getColor();
      doReturn((String) null).when(light0).getCurrency();
      doReturn(0.0F).when(light0).getDepth();
      doReturn((String) null).when(light0).getDescription();
      doReturn(0.0F).when(light0).getElevation();
      doReturn(0.0F).when(light0).getHeight();
      doReturn((Content) null).when(light0).getIcon();
      doReturn((Content) null).when(light0).getModel();
      doReturn((float[][]) null).when(light0).getModelRotation();
      doReturn((String) null).when(light0).getName();
      doReturn((Content) null).when(light0).getPlanIcon();
      doReturn((BigDecimal) null).when(light0).getPrice();
      doReturn((String) null).when(light0).getStaircaseCutOutShape();
      doReturn((BigDecimal) null).when(light0).getValueAddedTaxPercentage();
      doReturn(0.0F).when(light0).getWidth();
      doReturn(false).when(light0).isBackFaceShown();
      doReturn(false).when(light0).isDeformable();
      doReturn(false).when(light0).isDoorOrWindow();
      doReturn(false).when(light0).isMovable();
      doReturn(false).when(light0).isResizable();
      doReturn(false).when(light0).isTexturable();
      HomeLight homeLight0 = new HomeLight(light0);
      assertNotNull(homeLight0);
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertTrue(homeLight0.isVisible());
      assertNull(homeLight0.getCurrency());
      assertFalse(homeLight0.isResizable());
      assertFalse(homeLight0.isMovable());
      assertFalse(homeLight0.isDeformable());
      assertFalse(homeLight0.isNameVisible());
      assertNull(homeLight0.getColor());
      assertNull(homeLight0.getCatalogId());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertFalse(homeLight0.isModelMirrored());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertFalse(homeLight0.isBackFaceShown());
      assertNull(homeLight0.getName());
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertNull(homeLight0.getShininess());
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertNull(homeLight0.getDescription());
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      assertFalse(homeLight0.isTexturable());
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      
      homeLight0.setElevation((-1.0F));
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertTrue(homeLight0.isVisible());
      assertNull(homeLight0.getCurrency());
      assertFalse(homeLight0.isResizable());
      assertFalse(homeLight0.isMovable());
      assertFalse(homeLight0.isDeformable());
      assertFalse(homeLight0.isNameVisible());
      assertNull(homeLight0.getColor());
      assertNull(homeLight0.getCatalogId());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertFalse(homeLight0.isModelMirrored());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertEquals((-1.0F), homeLight0.getElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertFalse(homeLight0.isBackFaceShown());
      assertNull(homeLight0.getName());
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertNull(homeLight0.getShininess());
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertNull(homeLight0.getDescription());
      assertEquals((-1.0F), homeLight0.getGroundElevation(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      assertFalse(homeLight0.isTexturable());
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      
      homeLight0.setNameAngle((-1.0F));
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertTrue(homeLight0.isVisible());
      assertNull(homeLight0.getCurrency());
      assertFalse(homeLight0.isResizable());
      assertFalse(homeLight0.isMovable());
      assertFalse(homeLight0.isDeformable());
      assertFalse(homeLight0.isNameVisible());
      assertNull(homeLight0.getColor());
      assertNull(homeLight0.getCatalogId());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertFalse(homeLight0.isModelMirrored());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertEquals(5.2831855F, homeLight0.getNameAngle(), 0.01F);
      assertEquals((-1.0F), homeLight0.getElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertFalse(homeLight0.isBackFaceShown());
      assertNull(homeLight0.getName());
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertNull(homeLight0.getShininess());
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertNull(homeLight0.getDescription());
      assertEquals((-1.0F), homeLight0.getGroundElevation(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      assertFalse(homeLight0.isTexturable());
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      
      homeLight0.setY((-1.0F));
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertTrue(homeLight0.isVisible());
      assertNull(homeLight0.getCurrency());
      assertFalse(homeLight0.isResizable());
      assertFalse(homeLight0.isMovable());
      assertFalse(homeLight0.isDeformable());
      assertFalse(homeLight0.isNameVisible());
      assertNull(homeLight0.getColor());
      assertNull(homeLight0.getCatalogId());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertFalse(homeLight0.isModelMirrored());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertEquals(5.2831855F, homeLight0.getNameAngle(), 0.01F);
      assertEquals((-1.0F), homeLight0.getElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertFalse(homeLight0.isBackFaceShown());
      assertNull(homeLight0.getName());
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertNull(homeLight0.getShininess());
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertNull(homeLight0.getDescription());
      assertEquals((-1.0F), homeLight0.getGroundElevation(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      assertFalse(homeLight0.isTexturable());
      assertEquals((-1.0F), homeLight0.getY(), 0.01F);
      
      boolean boolean1 = homeLight0.isBottomLeftPointAt((-1.0F), (-1.0F), (-1.0F));
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertTrue(homeLight0.isVisible());
      assertNull(homeLight0.getCurrency());
      assertFalse(homeLight0.isResizable());
      assertFalse(homeLight0.isMovable());
      assertFalse(homeLight0.isDeformable());
      assertFalse(homeLight0.isNameVisible());
      assertNull(homeLight0.getColor());
      assertNull(homeLight0.getCatalogId());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertFalse(homeLight0.isModelMirrored());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertEquals(5.2831855F, homeLight0.getNameAngle(), 0.01F);
      assertEquals((-1.0F), homeLight0.getElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertFalse(homeLight0.isBackFaceShown());
      assertNull(homeLight0.getName());
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertNull(homeLight0.getShininess());
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertNull(homeLight0.getDescription());
      assertEquals((-1.0F), homeLight0.getGroundElevation(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      assertFalse(homeLight0.isTexturable());
      assertEquals((-1.0F), homeLight0.getY(), 0.01F);
      
      BigDecimal bigDecimal0 = homeLight0.getPriceValueAddedTaxIncluded();
      assertNull(bigDecimal0);
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertTrue(homeLight0.isVisible());
      assertNull(homeLight0.getCurrency());
      assertFalse(homeLight0.isResizable());
      assertFalse(homeLight0.isMovable());
      assertFalse(homeLight0.isDeformable());
      assertFalse(homeLight0.isNameVisible());
      assertNull(homeLight0.getColor());
      assertNull(homeLight0.getCatalogId());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertFalse(homeLight0.isModelMirrored());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertEquals(5.2831855F, homeLight0.getNameAngle(), 0.01F);
      assertEquals((-1.0F), homeLight0.getElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertFalse(homeLight0.isBackFaceShown());
      assertNull(homeLight0.getName());
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertNull(homeLight0.getShininess());
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertNull(homeLight0.getDescription());
      assertEquals((-1.0F), homeLight0.getGroundElevation(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      assertFalse(homeLight0.isTexturable());
      assertEquals((-1.0F), homeLight0.getY(), 0.01F);
      
      homeLight0.setDescription("CW9$NS K:I");
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertTrue(homeLight0.isVisible());
      assertNull(homeLight0.getCurrency());
      assertFalse(homeLight0.isResizable());
      assertFalse(homeLight0.isMovable());
      assertEquals("CW9$NS K:I", homeLight0.getDescription());
      assertFalse(homeLight0.isDeformable());
      assertFalse(homeLight0.isNameVisible());
      assertNull(homeLight0.getColor());
      assertNull(homeLight0.getCatalogId());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertFalse(homeLight0.isModelMirrored());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertEquals(5.2831855F, homeLight0.getNameAngle(), 0.01F);
      assertEquals((-1.0F), homeLight0.getElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertFalse(homeLight0.isBackFaceShown());
      assertNull(homeLight0.getName());
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertNull(homeLight0.getShininess());
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertEquals((-1.0F), homeLight0.getGroundElevation(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      assertFalse(homeLight0.isTexturable());
      assertEquals((-1.0F), homeLight0.getY(), 0.01F);
      
      homeLight0.setElevation((-1.0F));
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertTrue(homeLight0.isVisible());
      assertNull(homeLight0.getCurrency());
      assertFalse(homeLight0.isResizable());
      assertFalse(homeLight0.isMovable());
      assertEquals("CW9$NS K:I", homeLight0.getDescription());
      assertFalse(homeLight0.isDeformable());
      assertFalse(homeLight0.isNameVisible());
      assertNull(homeLight0.getColor());
      assertNull(homeLight0.getCatalogId());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertFalse(homeLight0.isModelMirrored());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertEquals(5.2831855F, homeLight0.getNameAngle(), 0.01F);
      assertEquals((-1.0F), homeLight0.getElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertFalse(homeLight0.isBackFaceShown());
      assertNull(homeLight0.getName());
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertNull(homeLight0.getShininess());
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertEquals((-1.0F), homeLight0.getGroundElevation(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      assertFalse(homeLight0.isTexturable());
      assertEquals((-1.0F), homeLight0.getY(), 0.01F);
      
      // Undeclared exception!
      try { 
        homeLight0.setTexture((HomeTexture) null);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Piece isn't texturable
         //
         verifyException("com.eteks.sweethome3d.model.HomePieceOfFurniture", e);
      }
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      LightSource[] lightSourceArray0 = new LightSource[7];
      LightSource lightSource0 = new LightSource(0.5F, 0.5F, 1316.0417F, 46);
      assertNotNull(lightSource0);
      assertEquals(46, lightSource0.getColor());
      assertNull(lightSource0.getDiameter());
      assertEquals(0.5F, lightSource0.getY(), 0.01F);
      assertEquals(0.5F, lightSource0.getX(), 0.01F);
      assertEquals(1316.0417F, lightSource0.getZ(), 0.01F);
      
      lightSourceArray0[0] = lightSource0;
      LightSource lightSource1 = new LightSource((-1409.12F), 3.4028235E38F, 0.0F, 3124);
      assertNotNull(lightSource1);
      assertFalse(lightSource1.equals((Object)lightSource0));
      assertEquals(3.4028235E38F, lightSource1.getY(), 0.01F);
      assertEquals(3124, lightSource1.getColor());
      assertEquals(0.0F, lightSource1.getZ(), 0.01F);
      assertNull(lightSource1.getDiameter());
      assertEquals((-1409.12F), lightSource1.getX(), 0.01F);
      
      lightSourceArray0[1] = lightSource1;
      LightSource lightSource2 = new LightSource(1948.8243F, 0.5F, (-1409.12F), 3124);
      assertNotNull(lightSource2);
      assertFalse(lightSource2.equals((Object)lightSource1));
      assertFalse(lightSource2.equals((Object)lightSource0));
      assertEquals((-1409.12F), lightSource2.getZ(), 0.01F);
      assertNull(lightSource2.getDiameter());
      assertEquals(0.5F, lightSource2.getY(), 0.01F);
      assertEquals(1948.8243F, lightSource2.getX(), 0.01F);
      assertEquals(3124, lightSource2.getColor());
      
      lightSourceArray0[2] = lightSource2;
      LightSource lightSource3 = new LightSource((-1409.12F), 3124, 46, 46);
      assertNotNull(lightSource3);
      assertFalse(lightSource3.equals((Object)lightSource0));
      assertFalse(lightSource3.equals((Object)lightSource1));
      assertFalse(lightSource3.equals((Object)lightSource2));
      assertEquals(46.0F, lightSource3.getZ(), 0.01F);
      assertEquals((-1409.12F), lightSource3.getX(), 0.01F);
      assertEquals(46, lightSource3.getColor());
      assertEquals(3124.0F, lightSource3.getY(), 0.01F);
      assertNull(lightSource3.getDiameter());
      
      lightSourceArray0[3] = lightSource3;
      LightSource lightSource4 = new LightSource(3124, (-1409.12F), 1304.5946F, 0);
      assertNotNull(lightSource4);
      assertFalse(lightSource4.equals((Object)lightSource1));
      assertFalse(lightSource4.equals((Object)lightSource2));
      assertFalse(lightSource4.equals((Object)lightSource3));
      assertFalse(lightSource4.equals((Object)lightSource0));
      assertEquals((-1409.12F), lightSource4.getY(), 0.01F);
      assertEquals(1304.5946F, lightSource4.getZ(), 0.01F);
      assertEquals(3124.0F, lightSource4.getX(), 0.01F);
      assertEquals(0, lightSource4.getColor());
      assertNull(lightSource4.getDiameter());
      
      lightSourceArray0[4] = lightSource4;
      LightSource lightSource5 = new LightSource(3.4028235E38F, (-338.7959F), 1304.5946F, 3124);
      assertNotNull(lightSource5);
      assertFalse(lightSource5.equals((Object)lightSource1));
      assertFalse(lightSource5.equals((Object)lightSource2));
      assertFalse(lightSource5.equals((Object)lightSource4));
      assertFalse(lightSource5.equals((Object)lightSource3));
      assertFalse(lightSource5.equals((Object)lightSource0));
      assertEquals(3.4028235E38F, lightSource5.getX(), 0.01F);
      assertNull(lightSource5.getDiameter());
      assertEquals((-338.7959F), lightSource5.getY(), 0.01F);
      assertEquals(1304.5946F, lightSource5.getZ(), 0.01F);
      assertEquals(3124, lightSource5.getColor());
      
      lightSourceArray0[5] = lightSource5;
      LightSource lightSource6 = new LightSource(0.0F, 0.0F, (-338.7959F), 2147481909);
      assertNotNull(lightSource6);
      assertFalse(lightSource6.equals((Object)lightSource5));
      assertFalse(lightSource6.equals((Object)lightSource3));
      assertFalse(lightSource6.equals((Object)lightSource2));
      assertFalse(lightSource6.equals((Object)lightSource4));
      assertFalse(lightSource6.equals((Object)lightSource0));
      assertFalse(lightSource6.equals((Object)lightSource1));
      assertNull(lightSource6.getDiameter());
      assertEquals(0.0F, lightSource6.getX(), 0.01F);
      assertEquals(0.0F, lightSource6.getY(), 0.01F);
      assertEquals(2147481909, lightSource6.getColor());
      assertEquals((-338.7959F), lightSource6.getZ(), 0.01F);
      
      lightSourceArray0[6] = lightSource6;
      Integer integer0 = new Integer(0);
      assertNotNull(integer0);
      assertEquals(0, (int)integer0);
      
      Class<CatalogPieceOfFurniture> class0 = CatalogPieceOfFurniture.class;
      ResourceURLContent resourceURLContent0 = new ResourceURLContent(class0, "", true);
      assertNotNull(resourceURLContent0);
      assertTrue(resourceURLContent0.isJAREntry());
      assertTrue(resourceURLContent0.isMultiPartResource());
      
      float[][] floatArray0 = new float[4][9];
      float[] floatArray1 = new float[8];
      floatArray1[0] = 0.0F;
      floatArray1[1] = (-119.7F);
      floatArray1[2] = 0.5F;
      floatArray1[3] = 3.4028235E38F;
      floatArray1[4] = (-1.0F);
      floatArray1[5] = (-1.0F);
      floatArray1[6] = 1.0F;
      floatArray1[7] = 0.5F;
      floatArray0[0] = floatArray1;
      float[] floatArray2 = new float[6];
      assertFalse(floatArray2.equals((Object)floatArray1));
      
      floatArray2[0] = (-338.7959F);
      floatArray2[1] = 0.5F;
      floatArray2[2] = 898.7064F;
      floatArray2[3] = 3459.45F;
      floatArray2[4] = (-119.7F);
      floatArray2[5] = 898.7064F;
      floatArray0[1] = floatArray2;
      float[] floatArray3 = new float[0];
      assertFalse(floatArray3.equals((Object)floatArray2));
      assertFalse(floatArray3.equals((Object)floatArray1));
      
      floatArray0[2] = floatArray3;
      float[] floatArray4 = new float[4];
      assertFalse(floatArray4.equals((Object)floatArray1));
      assertFalse(floatArray4.equals((Object)floatArray3));
      assertFalse(floatArray4.equals((Object)floatArray2));
      
      floatArray4[0] = (float) 0;
      floatArray4[1] = 3.4028235E38F;
      floatArray4[2] = 1316.0417F;
      floatArray4[3] = 1316.0417F;
      floatArray0[3] = floatArray4;
      BigDecimal bigDecimal0 = BigDecimal.TEN;
      assertNotNull(bigDecimal0);
      assertEquals((byte)10, bigDecimal0.byteValue());
      assertEquals((short)10, bigDecimal0.shortValue());
      
      Light light0 = mock(Light.class, new ViolatedAssumptionAnswer());
      doReturn(lightSourceArray0).when(light0).getLightSources();
      doReturn(integer0).when(light0).getColor();
      doReturn("hJ%6t").when(light0).getCurrency();
      doReturn(0.0F).when(light0).getDepth();
      doReturn("hJ%6t").when(light0).getDescription();
      doReturn(898.7064F).when(light0).getElevation();
      doReturn((-119.7F)).when(light0).getHeight();
      doReturn(resourceURLContent0).when(light0).getIcon();
      doReturn(resourceURLContent0).when(light0).getModel();
      doReturn(floatArray0).when(light0).getModelRotation();
      doReturn("ANGLE").when(light0).getName();
      doReturn(resourceURLContent0).when(light0).getPlanIcon();
      doReturn(bigDecimal0).when(light0).getPrice();
      doReturn("1,6wDVB3a3E*0^,'").when(light0).getStaircaseCutOutShape();
      doReturn(bigDecimal0).when(light0).getValueAddedTaxPercentage();
      doReturn((-119.7F)).when(light0).getWidth();
      doReturn(true).when(light0).isBackFaceShown();
      doReturn(true).when(light0).isDeformable();
      doReturn(true).when(light0).isDoorOrWindow();
      doReturn(true).when(light0).isMovable();
      doReturn(true).when(light0).isResizable();
      doReturn(true).when(light0).isTexturable();
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)20;
      byteArray0[1] = (byte)1;
      byteArray0[2] = (byte) (-113);
      byteArray0[3] = (byte) (-32);
      byteArray0[4] = (byte)62;
      boolean boolean0 = FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      assertEquals(5, byteArray0.length);
      assertFalse(boolean0);
      assertArrayEquals(new byte[] {(byte)20, (byte)1, (byte) (-113), (byte) (-32), (byte)62}, byteArray0);
      
      HomeLight homeLight0 = new HomeLight(light0);
      assertEquals(7, lightSourceArray0.length);
      assertEquals(4, floatArray0.length);
      assertNotNull(homeLight0);
      assertTrue(resourceURLContent0.isJAREntry());
      assertTrue(resourceURLContent0.isMultiPartResource());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertEquals((-119.7F), homeLight0.getHeight(), 0.01F);
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertFalse(homeLight0.isModelMirrored());
      assertEquals("ANGLE", homeLight0.getName());
      assertTrue(homeLight0.isBackFaceShown());
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertEquals("1,6wDVB3a3E*0^,'", homeLight0.getStaircaseCutOutShape());
      assertEquals(0, (int)homeLight0.getColor());
      assertNull(homeLight0.getCatalogId());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertEquals((-119.7F), homeLight0.getWidth(), 0.01F);
      assertEquals("hJ%6t", homeLight0.getCurrency());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals((-59.85F), homeLight0.getX(), 0.01F);
      assertTrue(homeLight0.isMovable());
      assertTrue(homeLight0.isResizable());
      assertTrue(homeLight0.isVisible());
      assertTrue(homeLight0.isDeformable());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertNull(homeLight0.getShininess());
      assertFalse(homeLight0.isNameVisible());
      assertEquals(898.7064F, homeLight0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals("hJ%6t", homeLight0.getDescription());
      assertTrue(homeLight0.isDoorOrWindow());
      assertEquals(898.7064F, homeLight0.getElevation(), 0.01F);
      assertTrue(homeLight0.isTexturable());
      assertEquals((byte)10, bigDecimal0.byteValue());
      assertEquals((short)10, bigDecimal0.shortValue());
      
      homeLight0.setY((-1.0F));
      assertEquals(7, lightSourceArray0.length);
      assertEquals(4, floatArray0.length);
      assertTrue(resourceURLContent0.isJAREntry());
      assertTrue(resourceURLContent0.isMultiPartResource());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertEquals((-119.7F), homeLight0.getHeight(), 0.01F);
      assertEquals((-1.0F), homeLight0.getY(), 0.01F);
      assertFalse(homeLight0.isModelMirrored());
      assertEquals("ANGLE", homeLight0.getName());
      assertTrue(homeLight0.isBackFaceShown());
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertEquals("1,6wDVB3a3E*0^,'", homeLight0.getStaircaseCutOutShape());
      assertEquals(0, (int)homeLight0.getColor());
      assertNull(homeLight0.getCatalogId());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertEquals((-119.7F), homeLight0.getWidth(), 0.01F);
      assertEquals("hJ%6t", homeLight0.getCurrency());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals((-59.85F), homeLight0.getX(), 0.01F);
      assertTrue(homeLight0.isMovable());
      assertTrue(homeLight0.isResizable());
      assertTrue(homeLight0.isVisible());
      assertTrue(homeLight0.isDeformable());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertNull(homeLight0.getShininess());
      assertFalse(homeLight0.isNameVisible());
      assertEquals(898.7064F, homeLight0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals("hJ%6t", homeLight0.getDescription());
      assertTrue(homeLight0.isDoorOrWindow());
      assertEquals(898.7064F, homeLight0.getElevation(), 0.01F);
      assertTrue(homeLight0.isTexturable());
      assertEquals((byte)10, bigDecimal0.byteValue());
      assertEquals((short)10, bigDecimal0.shortValue());
      
      BigDecimal bigDecimal1 = homeLight0.getValueAddedTax();
      assertEquals(7, lightSourceArray0.length);
      assertEquals(4, floatArray0.length);
      assertNotNull(bigDecimal1);
      assertNotSame(bigDecimal1, bigDecimal0);
      assertNotSame(bigDecimal0, bigDecimal1);
      assertFalse(bigDecimal1.equals((Object)bigDecimal0));
      assertTrue(resourceURLContent0.isJAREntry());
      assertTrue(resourceURLContent0.isMultiPartResource());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertEquals((-119.7F), homeLight0.getHeight(), 0.01F);
      assertEquals((-1.0F), homeLight0.getY(), 0.01F);
      assertFalse(homeLight0.isModelMirrored());
      assertEquals("ANGLE", homeLight0.getName());
      assertTrue(homeLight0.isBackFaceShown());
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertEquals("1,6wDVB3a3E*0^,'", homeLight0.getStaircaseCutOutShape());
      assertEquals(0, (int)homeLight0.getColor());
      assertNull(homeLight0.getCatalogId());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertEquals((-119.7F), homeLight0.getWidth(), 0.01F);
      assertEquals("hJ%6t", homeLight0.getCurrency());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals((-59.85F), homeLight0.getX(), 0.01F);
      assertTrue(homeLight0.isMovable());
      assertTrue(homeLight0.isResizable());
      assertTrue(homeLight0.isVisible());
      assertTrue(homeLight0.isDeformable());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertNull(homeLight0.getShininess());
      assertFalse(homeLight0.isNameVisible());
      assertEquals(898.7064F, homeLight0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals("hJ%6t", homeLight0.getDescription());
      assertTrue(homeLight0.isDoorOrWindow());
      assertEquals(898.7064F, homeLight0.getElevation(), 0.01F);
      assertTrue(homeLight0.isTexturable());
      assertEquals((byte)100, bigDecimal1.byteValue());
      assertEquals((short)100, bigDecimal1.shortValue());
      assertEquals((byte)10, bigDecimal0.byteValue());
      assertEquals((short)10, bigDecimal0.shortValue());
      
      BigDecimal bigDecimal2 = homeLight0.getValueAddedTax();
      assertEquals(7, lightSourceArray0.length);
      assertEquals(4, floatArray0.length);
      assertNotNull(bigDecimal2);
      assertNotSame(bigDecimal2, bigDecimal1);
      assertNotSame(bigDecimal2, bigDecimal0);
      assertNotSame(bigDecimal0, bigDecimal2);
      assertNotSame(bigDecimal0, bigDecimal1);
      assertFalse(bigDecimal2.equals((Object)bigDecimal0));
      assertTrue(bigDecimal2.equals((Object)bigDecimal1));
      assertFalse(bigDecimal0.equals((Object)bigDecimal1));
      assertTrue(resourceURLContent0.isJAREntry());
      assertTrue(resourceURLContent0.isMultiPartResource());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertEquals((-119.7F), homeLight0.getHeight(), 0.01F);
      assertEquals((-1.0F), homeLight0.getY(), 0.01F);
      assertFalse(homeLight0.isModelMirrored());
      assertEquals("ANGLE", homeLight0.getName());
      assertTrue(homeLight0.isBackFaceShown());
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertEquals("1,6wDVB3a3E*0^,'", homeLight0.getStaircaseCutOutShape());
      assertEquals(0, (int)homeLight0.getColor());
      assertNull(homeLight0.getCatalogId());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertEquals((-119.7F), homeLight0.getWidth(), 0.01F);
      assertEquals("hJ%6t", homeLight0.getCurrency());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals((-59.85F), homeLight0.getX(), 0.01F);
      assertTrue(homeLight0.isMovable());
      assertTrue(homeLight0.isResizable());
      assertTrue(homeLight0.isVisible());
      assertTrue(homeLight0.isDeformable());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertNull(homeLight0.getShininess());
      assertFalse(homeLight0.isNameVisible());
      assertEquals(898.7064F, homeLight0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals("hJ%6t", homeLight0.getDescription());
      assertTrue(homeLight0.isDoorOrWindow());
      assertEquals(898.7064F, homeLight0.getElevation(), 0.01F);
      assertTrue(homeLight0.isTexturable());
      assertEquals((byte)100, bigDecimal2.byteValue());
      assertEquals((short)100, bigDecimal2.shortValue());
      assertEquals((byte)10, bigDecimal0.byteValue());
      assertEquals((short)10, bigDecimal0.shortValue());
      
      homeLight0.setVisible(false);
      assertEquals(7, lightSourceArray0.length);
      assertEquals(4, floatArray0.length);
      assertNotSame(bigDecimal0, bigDecimal2);
      assertNotSame(bigDecimal0, bigDecimal1);
      assertFalse(bigDecimal0.equals((Object)bigDecimal2));
      assertFalse(bigDecimal0.equals((Object)bigDecimal1));
      assertTrue(resourceURLContent0.isJAREntry());
      assertTrue(resourceURLContent0.isMultiPartResource());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertEquals((-119.7F), homeLight0.getHeight(), 0.01F);
      assertEquals((-1.0F), homeLight0.getY(), 0.01F);
      assertFalse(homeLight0.isModelMirrored());
      assertEquals("ANGLE", homeLight0.getName());
      assertTrue(homeLight0.isBackFaceShown());
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertEquals("1,6wDVB3a3E*0^,'", homeLight0.getStaircaseCutOutShape());
      assertFalse(homeLight0.isVisible());
      assertEquals(0, (int)homeLight0.getColor());
      assertNull(homeLight0.getCatalogId());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertEquals((-119.7F), homeLight0.getWidth(), 0.01F);
      assertEquals("hJ%6t", homeLight0.getCurrency());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals((-59.85F), homeLight0.getX(), 0.01F);
      assertTrue(homeLight0.isMovable());
      assertTrue(homeLight0.isResizable());
      assertTrue(homeLight0.isDeformable());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertNull(homeLight0.getShininess());
      assertFalse(homeLight0.isNameVisible());
      assertEquals(898.7064F, homeLight0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals("hJ%6t", homeLight0.getDescription());
      assertTrue(homeLight0.isDoorOrWindow());
      assertEquals(898.7064F, homeLight0.getElevation(), 0.01F);
      assertTrue(homeLight0.isTexturable());
      assertEquals((byte)10, bigDecimal0.byteValue());
      assertEquals((short)10, bigDecimal0.shortValue());
      
      homeLight0.setNameStyle((TextStyle) null);
      assertEquals(7, lightSourceArray0.length);
      assertEquals(4, floatArray0.length);
      assertNotSame(bigDecimal0, bigDecimal2);
      assertNotSame(bigDecimal0, bigDecimal1);
      assertFalse(bigDecimal0.equals((Object)bigDecimal2));
      assertFalse(bigDecimal0.equals((Object)bigDecimal1));
      assertTrue(resourceURLContent0.isJAREntry());
      assertTrue(resourceURLContent0.isMultiPartResource());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertEquals((-119.7F), homeLight0.getHeight(), 0.01F);
      assertEquals((-1.0F), homeLight0.getY(), 0.01F);
      assertFalse(homeLight0.isModelMirrored());
      assertEquals("ANGLE", homeLight0.getName());
      assertTrue(homeLight0.isBackFaceShown());
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertEquals("1,6wDVB3a3E*0^,'", homeLight0.getStaircaseCutOutShape());
      assertFalse(homeLight0.isVisible());
      assertEquals(0, (int)homeLight0.getColor());
      assertNull(homeLight0.getCatalogId());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertEquals((-119.7F), homeLight0.getWidth(), 0.01F);
      assertEquals("hJ%6t", homeLight0.getCurrency());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals((-59.85F), homeLight0.getX(), 0.01F);
      assertTrue(homeLight0.isMovable());
      assertTrue(homeLight0.isResizable());
      assertTrue(homeLight0.isDeformable());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertNull(homeLight0.getShininess());
      assertFalse(homeLight0.isNameVisible());
      assertEquals(898.7064F, homeLight0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals("hJ%6t", homeLight0.getDescription());
      assertTrue(homeLight0.isDoorOrWindow());
      assertEquals(898.7064F, homeLight0.getElevation(), 0.01F);
      assertTrue(homeLight0.isTexturable());
      assertEquals((byte)10, bigDecimal0.byteValue());
      assertEquals((short)10, bigDecimal0.shortValue());
      
      String string0 = homeLight0.getCurrency();
      assertEquals(7, lightSourceArray0.length);
      assertEquals(4, floatArray0.length);
      assertNotNull(string0);
      assertNotSame(bigDecimal0, bigDecimal2);
      assertNotSame(bigDecimal0, bigDecimal1);
      assertFalse(bigDecimal0.equals((Object)bigDecimal2));
      assertFalse(bigDecimal0.equals((Object)bigDecimal1));
      assertEquals("hJ%6t", string0);
      assertTrue(resourceURLContent0.isJAREntry());
      assertTrue(resourceURLContent0.isMultiPartResource());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertEquals((-119.7F), homeLight0.getHeight(), 0.01F);
      assertEquals((-1.0F), homeLight0.getY(), 0.01F);
      assertFalse(homeLight0.isModelMirrored());
      assertEquals("ANGLE", homeLight0.getName());
      assertTrue(homeLight0.isBackFaceShown());
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertEquals("1,6wDVB3a3E*0^,'", homeLight0.getStaircaseCutOutShape());
      assertFalse(homeLight0.isVisible());
      assertEquals(0, (int)homeLight0.getColor());
      assertNull(homeLight0.getCatalogId());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertEquals((-119.7F), homeLight0.getWidth(), 0.01F);
      assertEquals("hJ%6t", homeLight0.getCurrency());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals((-59.85F), homeLight0.getX(), 0.01F);
      assertTrue(homeLight0.isMovable());
      assertTrue(homeLight0.isResizable());
      assertTrue(homeLight0.isDeformable());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertNull(homeLight0.getShininess());
      assertFalse(homeLight0.isNameVisible());
      assertEquals(898.7064F, homeLight0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals("hJ%6t", homeLight0.getDescription());
      assertTrue(homeLight0.isDoorOrWindow());
      assertEquals(898.7064F, homeLight0.getElevation(), 0.01F);
      assertTrue(homeLight0.isTexturable());
      assertEquals((byte)10, bigDecimal0.byteValue());
      assertEquals((short)10, bigDecimal0.shortValue());
      
      homeLight0.setHeight((-1.0F));
      assertEquals(7, lightSourceArray0.length);
      assertEquals(4, floatArray0.length);
      assertNotSame(bigDecimal0, bigDecimal2);
      assertNotSame(bigDecimal0, bigDecimal1);
      assertFalse(bigDecimal0.equals((Object)bigDecimal2));
      assertFalse(bigDecimal0.equals((Object)bigDecimal1));
      assertTrue(resourceURLContent0.isJAREntry());
      assertTrue(resourceURLContent0.isMultiPartResource());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertEquals((-1.0F), homeLight0.getY(), 0.01F);
      assertFalse(homeLight0.isModelMirrored());
      assertEquals("ANGLE", homeLight0.getName());
      assertTrue(homeLight0.isBackFaceShown());
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertEquals("1,6wDVB3a3E*0^,'", homeLight0.getStaircaseCutOutShape());
      assertFalse(homeLight0.isVisible());
      assertEquals(0, (int)homeLight0.getColor());
      assertNull(homeLight0.getCatalogId());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertEquals((-119.7F), homeLight0.getWidth(), 0.01F);
      assertEquals("hJ%6t", homeLight0.getCurrency());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals((-1.0F), homeLight0.getHeight(), 0.01F);
      assertEquals((-59.85F), homeLight0.getX(), 0.01F);
      assertTrue(homeLight0.isMovable());
      assertTrue(homeLight0.isResizable());
      assertTrue(homeLight0.isDeformable());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertNull(homeLight0.getShininess());
      assertFalse(homeLight0.isNameVisible());
      assertEquals(898.7064F, homeLight0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals("hJ%6t", homeLight0.getDescription());
      assertTrue(homeLight0.isDoorOrWindow());
      assertEquals(898.7064F, homeLight0.getElevation(), 0.01F);
      assertTrue(homeLight0.isTexturable());
      assertEquals((byte)10, bigDecimal0.byteValue());
      assertEquals((short)10, bigDecimal0.shortValue());
      
      homeLight0.setX(1377.0F);
      assertEquals(7, lightSourceArray0.length);
      assertEquals(4, floatArray0.length);
      assertNotSame(bigDecimal0, bigDecimal2);
      assertNotSame(bigDecimal0, bigDecimal1);
      assertFalse(bigDecimal0.equals((Object)bigDecimal2));
      assertFalse(bigDecimal0.equals((Object)bigDecimal1));
      assertTrue(resourceURLContent0.isJAREntry());
      assertTrue(resourceURLContent0.isMultiPartResource());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertEquals((-1.0F), homeLight0.getY(), 0.01F);
      assertFalse(homeLight0.isModelMirrored());
      assertEquals("ANGLE", homeLight0.getName());
      assertTrue(homeLight0.isBackFaceShown());
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertEquals("1,6wDVB3a3E*0^,'", homeLight0.getStaircaseCutOutShape());
      assertFalse(homeLight0.isVisible());
      assertEquals(0, (int)homeLight0.getColor());
      assertNull(homeLight0.getCatalogId());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertEquals((-119.7F), homeLight0.getWidth(), 0.01F);
      assertEquals("hJ%6t", homeLight0.getCurrency());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals((-1.0F), homeLight0.getHeight(), 0.01F);
      assertTrue(homeLight0.isMovable());
      assertTrue(homeLight0.isResizable());
      assertTrue(homeLight0.isDeformable());
      assertEquals(1377.0F, homeLight0.getX(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertNull(homeLight0.getShininess());
      assertFalse(homeLight0.isNameVisible());
      assertEquals(898.7064F, homeLight0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals("hJ%6t", homeLight0.getDescription());
      assertTrue(homeLight0.isDoorOrWindow());
      assertEquals(898.7064F, homeLight0.getElevation(), 0.01F);
      assertTrue(homeLight0.isTexturable());
      assertEquals((byte)10, bigDecimal0.byteValue());
      assertEquals((short)10, bigDecimal0.shortValue());
      
      BigDecimal bigDecimal3 = homeLight0.getValueAddedTax();
      assertEquals(7, lightSourceArray0.length);
      assertEquals(4, floatArray0.length);
      assertNotNull(bigDecimal3);
      assertNotSame(bigDecimal0, bigDecimal3);
      assertNotSame(bigDecimal0, bigDecimal2);
      assertNotSame(bigDecimal0, bigDecimal1);
      assertNotSame(bigDecimal3, bigDecimal2);
      assertNotSame(bigDecimal3, bigDecimal0);
      assertNotSame(bigDecimal3, bigDecimal1);
      assertFalse(bigDecimal0.equals((Object)bigDecimal2));
      assertFalse(bigDecimal0.equals((Object)bigDecimal1));
      assertTrue(bigDecimal3.equals((Object)bigDecimal2));
      assertTrue(bigDecimal3.equals((Object)bigDecimal1));
      assertFalse(bigDecimal3.equals((Object)bigDecimal0));
      assertTrue(resourceURLContent0.isJAREntry());
      assertTrue(resourceURLContent0.isMultiPartResource());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertEquals((-1.0F), homeLight0.getY(), 0.01F);
      assertFalse(homeLight0.isModelMirrored());
      assertEquals("ANGLE", homeLight0.getName());
      assertTrue(homeLight0.isBackFaceShown());
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertEquals("1,6wDVB3a3E*0^,'", homeLight0.getStaircaseCutOutShape());
      assertFalse(homeLight0.isVisible());
      assertEquals(0, (int)homeLight0.getColor());
      assertNull(homeLight0.getCatalogId());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertEquals((-119.7F), homeLight0.getWidth(), 0.01F);
      assertEquals("hJ%6t", homeLight0.getCurrency());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals((-1.0F), homeLight0.getHeight(), 0.01F);
      assertTrue(homeLight0.isMovable());
      assertTrue(homeLight0.isResizable());
      assertTrue(homeLight0.isDeformable());
      assertEquals(1377.0F, homeLight0.getX(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertNull(homeLight0.getShininess());
      assertFalse(homeLight0.isNameVisible());
      assertEquals(898.7064F, homeLight0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals("hJ%6t", homeLight0.getDescription());
      assertTrue(homeLight0.isDoorOrWindow());
      assertEquals(898.7064F, homeLight0.getElevation(), 0.01F);
      assertTrue(homeLight0.isTexturable());
      assertEquals((byte)10, bigDecimal0.byteValue());
      assertEquals((short)10, bigDecimal0.shortValue());
      assertEquals((short)100, bigDecimal3.shortValue());
      assertEquals((byte)100, bigDecimal3.byteValue());
      
      String string1 = homeLight0.getName();
      assertEquals(7, lightSourceArray0.length);
      assertEquals(4, floatArray0.length);
      assertNotNull(string1);
      assertNotSame(bigDecimal0, bigDecimal3);
      assertNotSame(bigDecimal0, bigDecimal2);
      assertNotSame(bigDecimal0, bigDecimal1);
      assertFalse(string1.equals((Object)string0));
      assertFalse(bigDecimal0.equals((Object)bigDecimal3));
      assertFalse(bigDecimal0.equals((Object)bigDecimal2));
      assertFalse(bigDecimal0.equals((Object)bigDecimal1));
      assertEquals("ANGLE", string1);
      assertTrue(resourceURLContent0.isJAREntry());
      assertTrue(resourceURLContent0.isMultiPartResource());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertEquals((-1.0F), homeLight0.getY(), 0.01F);
      assertFalse(homeLight0.isModelMirrored());
      assertEquals("ANGLE", homeLight0.getName());
      assertTrue(homeLight0.isBackFaceShown());
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertEquals("1,6wDVB3a3E*0^,'", homeLight0.getStaircaseCutOutShape());
      assertFalse(homeLight0.isVisible());
      assertEquals(0, (int)homeLight0.getColor());
      assertNull(homeLight0.getCatalogId());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertEquals((-119.7F), homeLight0.getWidth(), 0.01F);
      assertEquals("hJ%6t", homeLight0.getCurrency());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals((-1.0F), homeLight0.getHeight(), 0.01F);
      assertTrue(homeLight0.isMovable());
      assertTrue(homeLight0.isResizable());
      assertTrue(homeLight0.isDeformable());
      assertEquals(1377.0F, homeLight0.getX(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertNull(homeLight0.getShininess());
      assertFalse(homeLight0.isNameVisible());
      assertEquals(898.7064F, homeLight0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals("hJ%6t", homeLight0.getDescription());
      assertTrue(homeLight0.isDoorOrWindow());
      assertEquals(898.7064F, homeLight0.getElevation(), 0.01F);
      assertTrue(homeLight0.isTexturable());
      assertEquals((byte)10, bigDecimal0.byteValue());
      assertEquals((short)10, bigDecimal0.shortValue());
      
      Level level0 = homeLight0.getLevel();
      assertEquals(7, lightSourceArray0.length);
      assertEquals(4, floatArray0.length);
      assertNull(level0);
      assertNotSame(bigDecimal0, bigDecimal3);
      assertNotSame(bigDecimal0, bigDecimal2);
      assertNotSame(bigDecimal0, bigDecimal1);
      assertFalse(bigDecimal0.equals((Object)bigDecimal3));
      assertFalse(bigDecimal0.equals((Object)bigDecimal2));
      assertFalse(bigDecimal0.equals((Object)bigDecimal1));
      assertTrue(resourceURLContent0.isJAREntry());
      assertTrue(resourceURLContent0.isMultiPartResource());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertEquals((-1.0F), homeLight0.getY(), 0.01F);
      assertFalse(homeLight0.isModelMirrored());
      assertEquals("ANGLE", homeLight0.getName());
      assertTrue(homeLight0.isBackFaceShown());
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertEquals("1,6wDVB3a3E*0^,'", homeLight0.getStaircaseCutOutShape());
      assertFalse(homeLight0.isVisible());
      assertEquals(0, (int)homeLight0.getColor());
      assertNull(homeLight0.getCatalogId());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertEquals((-119.7F), homeLight0.getWidth(), 0.01F);
      assertEquals("hJ%6t", homeLight0.getCurrency());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals((-1.0F), homeLight0.getHeight(), 0.01F);
      assertTrue(homeLight0.isMovable());
      assertTrue(homeLight0.isResizable());
      assertTrue(homeLight0.isDeformable());
      assertEquals(1377.0F, homeLight0.getX(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertNull(homeLight0.getShininess());
      assertFalse(homeLight0.isNameVisible());
      assertEquals(898.7064F, homeLight0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals("hJ%6t", homeLight0.getDescription());
      assertTrue(homeLight0.isDoorOrWindow());
      assertEquals(898.7064F, homeLight0.getElevation(), 0.01F);
      assertTrue(homeLight0.isTexturable());
      assertEquals((byte)10, bigDecimal0.byteValue());
      assertEquals((short)10, bigDecimal0.shortValue());
      
      homeLight0.setName("ANGLE");
      assertEquals(7, lightSourceArray0.length);
      assertEquals(4, floatArray0.length);
      assertNotSame(bigDecimal0, bigDecimal3);
      assertNotSame(bigDecimal0, bigDecimal2);
      assertNotSame(bigDecimal0, bigDecimal1);
      assertFalse(bigDecimal0.equals((Object)bigDecimal3));
      assertFalse(bigDecimal0.equals((Object)bigDecimal2));
      assertFalse(bigDecimal0.equals((Object)bigDecimal1));
      assertTrue(resourceURLContent0.isJAREntry());
      assertTrue(resourceURLContent0.isMultiPartResource());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertEquals((-1.0F), homeLight0.getY(), 0.01F);
      assertFalse(homeLight0.isModelMirrored());
      assertEquals("ANGLE", homeLight0.getName());
      assertTrue(homeLight0.isBackFaceShown());
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertEquals("1,6wDVB3a3E*0^,'", homeLight0.getStaircaseCutOutShape());
      assertFalse(homeLight0.isVisible());
      assertEquals(0, (int)homeLight0.getColor());
      assertNull(homeLight0.getCatalogId());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertEquals((-119.7F), homeLight0.getWidth(), 0.01F);
      assertEquals("hJ%6t", homeLight0.getCurrency());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals((-1.0F), homeLight0.getHeight(), 0.01F);
      assertTrue(homeLight0.isMovable());
      assertTrue(homeLight0.isResizable());
      assertTrue(homeLight0.isDeformable());
      assertEquals(1377.0F, homeLight0.getX(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertNull(homeLight0.getShininess());
      assertFalse(homeLight0.isNameVisible());
      assertEquals(898.7064F, homeLight0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals("hJ%6t", homeLight0.getDescription());
      assertTrue(homeLight0.isDoorOrWindow());
      assertEquals(898.7064F, homeLight0.getElevation(), 0.01F);
      assertTrue(homeLight0.isTexturable());
      assertEquals((byte)10, bigDecimal0.byteValue());
      assertEquals((short)10, bigDecimal0.shortValue());
      
      boolean boolean1 = homeLight0.isNameVisible();
      assertEquals(7, lightSourceArray0.length);
      assertEquals(4, floatArray0.length);
      assertNotSame(bigDecimal0, bigDecimal3);
      assertNotSame(bigDecimal0, bigDecimal2);
      assertNotSame(bigDecimal0, bigDecimal1);
      assertTrue(boolean1 == boolean0);
      assertFalse(bigDecimal0.equals((Object)bigDecimal3));
      assertFalse(bigDecimal0.equals((Object)bigDecimal2));
      assertFalse(bigDecimal0.equals((Object)bigDecimal1));
      assertFalse(boolean1);
      assertTrue(resourceURLContent0.isJAREntry());
      assertTrue(resourceURLContent0.isMultiPartResource());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertEquals((-1.0F), homeLight0.getY(), 0.01F);
      assertFalse(homeLight0.isModelMirrored());
      assertEquals("ANGLE", homeLight0.getName());
      assertTrue(homeLight0.isBackFaceShown());
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertEquals("1,6wDVB3a3E*0^,'", homeLight0.getStaircaseCutOutShape());
      assertFalse(homeLight0.isVisible());
      assertEquals(0, (int)homeLight0.getColor());
      assertNull(homeLight0.getCatalogId());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertEquals((-119.7F), homeLight0.getWidth(), 0.01F);
      assertEquals("hJ%6t", homeLight0.getCurrency());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals((-1.0F), homeLight0.getHeight(), 0.01F);
      assertTrue(homeLight0.isMovable());
      assertTrue(homeLight0.isResizable());
      assertTrue(homeLight0.isDeformable());
      assertEquals(1377.0F, homeLight0.getX(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertNull(homeLight0.getShininess());
      assertFalse(homeLight0.isNameVisible());
      assertEquals(898.7064F, homeLight0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals("hJ%6t", homeLight0.getDescription());
      assertTrue(homeLight0.isDoorOrWindow());
      assertEquals(898.7064F, homeLight0.getElevation(), 0.01F);
      assertTrue(homeLight0.isTexturable());
      assertEquals((byte)10, bigDecimal0.byteValue());
      assertEquals((short)10, bigDecimal0.shortValue());
      
      homeLight0.setNameYOffset(3211.5857F);
      assertEquals(7, lightSourceArray0.length);
      assertEquals(4, floatArray0.length);
      assertNotSame(bigDecimal0, bigDecimal3);
      assertNotSame(bigDecimal0, bigDecimal2);
      assertNotSame(bigDecimal0, bigDecimal1);
      assertFalse(bigDecimal0.equals((Object)bigDecimal3));
      assertFalse(bigDecimal0.equals((Object)bigDecimal2));
      assertFalse(bigDecimal0.equals((Object)bigDecimal1));
      assertTrue(resourceURLContent0.isJAREntry());
      assertTrue(resourceURLContent0.isMultiPartResource());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertEquals((-1.0F), homeLight0.getY(), 0.01F);
      assertFalse(homeLight0.isModelMirrored());
      assertEquals("ANGLE", homeLight0.getName());
      assertTrue(homeLight0.isBackFaceShown());
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertEquals("1,6wDVB3a3E*0^,'", homeLight0.getStaircaseCutOutShape());
      assertFalse(homeLight0.isVisible());
      assertEquals(0, (int)homeLight0.getColor());
      assertNull(homeLight0.getCatalogId());
      assertEquals((-119.7F), homeLight0.getWidth(), 0.01F);
      assertEquals(3211.5857F, homeLight0.getNameYOffset(), 0.01F);
      assertEquals("hJ%6t", homeLight0.getCurrency());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals((-1.0F), homeLight0.getHeight(), 0.01F);
      assertTrue(homeLight0.isMovable());
      assertTrue(homeLight0.isResizable());
      assertTrue(homeLight0.isDeformable());
      assertEquals(1377.0F, homeLight0.getX(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertNull(homeLight0.getShininess());
      assertFalse(homeLight0.isNameVisible());
      assertEquals(898.7064F, homeLight0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals("hJ%6t", homeLight0.getDescription());
      assertTrue(homeLight0.isDoorOrWindow());
      assertEquals(898.7064F, homeLight0.getElevation(), 0.01F);
      assertTrue(homeLight0.isTexturable());
      assertEquals((byte)10, bigDecimal0.byteValue());
      assertEquals((short)10, bigDecimal0.shortValue());
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      Light light0 = mock(Light.class, new ViolatedAssumptionAnswer());
      doReturn((LightSource[]) null).when(light0).getLightSources();
      doReturn((Integer) null).when(light0).getColor();
      doReturn((String) null).when(light0).getCurrency();
      doReturn(0.0F).when(light0).getDepth();
      doReturn((String) null).when(light0).getDescription();
      doReturn(0.0F).when(light0).getElevation();
      doReturn(0.0F).when(light0).getHeight();
      doReturn((Content) null).when(light0).getIcon();
      doReturn((Content) null).when(light0).getModel();
      doReturn((float[][]) null).when(light0).getModelRotation();
      doReturn((String) null).when(light0).getName();
      doReturn((Content) null).when(light0).getPlanIcon();
      doReturn((BigDecimal) null).when(light0).getPrice();
      doReturn((String) null).when(light0).getStaircaseCutOutShape();
      doReturn((BigDecimal) null).when(light0).getValueAddedTaxPercentage();
      doReturn(0.0F).when(light0).getWidth();
      doReturn(false).when(light0).isBackFaceShown();
      doReturn(false).when(light0).isDeformable();
      doReturn(false).when(light0).isDoorOrWindow();
      doReturn(false).when(light0).isMovable();
      doReturn(false).when(light0).isResizable();
      doReturn(false).when(light0).isTexturable();
      HomeLight homeLight0 = new HomeLight(light0);
      assertNotNull(homeLight0);
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertFalse(homeLight0.isResizable());
      assertFalse(homeLight0.isMovable());
      assertNull(homeLight0.getShininess());
      assertNull(homeLight0.getCurrency());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertNull(homeLight0.getCatalogId());
      assertNull(homeLight0.getColor());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertFalse(homeLight0.isTexturable());
      assertFalse(homeLight0.isBackFaceShown());
      assertFalse(homeLight0.isModelMirrored());
      assertNull(homeLight0.getName());
      assertFalse(homeLight0.isNameVisible());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertFalse(homeLight0.isDeformable());
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertNull(homeLight0.getDescription());
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertTrue(homeLight0.isVisible());
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      
      homeLight0.setElevation((-1.0F));
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertFalse(homeLight0.isResizable());
      assertFalse(homeLight0.isMovable());
      assertNull(homeLight0.getShininess());
      assertNull(homeLight0.getCurrency());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertNull(homeLight0.getCatalogId());
      assertNull(homeLight0.getColor());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertEquals((-1.0F), homeLight0.getGroundElevation(), 0.01F);
      assertFalse(homeLight0.isTexturable());
      assertFalse(homeLight0.isBackFaceShown());
      assertFalse(homeLight0.isModelMirrored());
      assertNull(homeLight0.getName());
      assertFalse(homeLight0.isNameVisible());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertFalse(homeLight0.isDeformable());
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertNull(homeLight0.getDescription());
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertTrue(homeLight0.isVisible());
      assertEquals((-1.0F), homeLight0.getElevation(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      
      homeLight0.setElevation((-1.0F));
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertFalse(homeLight0.isResizable());
      assertFalse(homeLight0.isMovable());
      assertNull(homeLight0.getShininess());
      assertNull(homeLight0.getCurrency());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertNull(homeLight0.getCatalogId());
      assertNull(homeLight0.getColor());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertEquals((-1.0F), homeLight0.getGroundElevation(), 0.01F);
      assertFalse(homeLight0.isTexturable());
      assertFalse(homeLight0.isBackFaceShown());
      assertFalse(homeLight0.isModelMirrored());
      assertNull(homeLight0.getName());
      assertFalse(homeLight0.isNameVisible());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertFalse(homeLight0.isDeformable());
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertNull(homeLight0.getDescription());
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertTrue(homeLight0.isVisible());
      assertEquals((-1.0F), homeLight0.getElevation(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      
      boolean boolean0 = homeLight0.isTopLeftPointAt((-1.0F), 0.0F, (-1.0F));
      assertFalse(boolean0);
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertFalse(homeLight0.isResizable());
      assertFalse(homeLight0.isMovable());
      assertNull(homeLight0.getShininess());
      assertNull(homeLight0.getCurrency());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertNull(homeLight0.getCatalogId());
      assertNull(homeLight0.getColor());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertEquals((-1.0F), homeLight0.getGroundElevation(), 0.01F);
      assertFalse(homeLight0.isTexturable());
      assertFalse(homeLight0.isBackFaceShown());
      assertFalse(homeLight0.isModelMirrored());
      assertNull(homeLight0.getName());
      assertFalse(homeLight0.isNameVisible());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertFalse(homeLight0.isDeformable());
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertNull(homeLight0.getDescription());
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertTrue(homeLight0.isVisible());
      assertEquals((-1.0F), homeLight0.getElevation(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      
      HomeLight homeLight1 = homeLight0.clone();
      assertNotNull(homeLight1);
      assertNotSame(homeLight0, homeLight1);
      assertNotSame(homeLight1, homeLight0);
      assertFalse(homeLight1.equals((Object)homeLight0));
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertFalse(homeLight0.isResizable());
      assertFalse(homeLight0.isMovable());
      assertNull(homeLight0.getShininess());
      assertNull(homeLight0.getCurrency());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertNull(homeLight0.getCatalogId());
      assertNull(homeLight0.getColor());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertEquals((-1.0F), homeLight0.getGroundElevation(), 0.01F);
      assertFalse(homeLight0.isTexturable());
      assertFalse(homeLight0.isBackFaceShown());
      assertFalse(homeLight0.isModelMirrored());
      assertNull(homeLight0.getName());
      assertFalse(homeLight0.isNameVisible());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertFalse(homeLight0.isDeformable());
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertNull(homeLight0.getDescription());
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertTrue(homeLight0.isVisible());
      assertEquals((-1.0F), homeLight0.getElevation(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeLight1.getNameYOffset(), 0.01F);
      assertFalse(homeLight1.isNameVisible());
      assertFalse(homeLight1.isMovable());
      assertEquals(0.0F, homeLight1.getWidth(), 0.01F);
      assertEquals(0.0F, homeLight1.getHeight(), 0.01F);
      assertNull(homeLight1.getCurrency());
      assertFalse(homeLight1.isBackFaceShown());
      assertFalse(homeLight1.isModelMirrored());
      assertNull(homeLight1.getColor());
      assertNull(homeLight1.getCatalogId());
      assertEquals((-1.0F), homeLight1.getElevation(), 0.01F);
      assertFalse(homeLight1.isTexturable());
      assertEquals(0.0F, homeLight1.getNameXOffset(), 0.01F);
      assertNull(homeLight1.getName());
      assertNull(homeLight1.getDescription());
      assertEquals(0.5F, homeLight1.getPower(), 0.01F);
      assertEquals(0.0F, homeLight1.getAngle(), 0.01F);
      assertFalse(homeLight1.isDoorOrWindow());
      assertEquals(0.0F, homeLight1.getX(), 0.01F);
      assertEquals(0.0F, homeLight1.getY(), 0.01F);
      assertEquals((-1.0F), homeLight1.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight1.getDepth(), 0.01F);
      assertFalse(homeLight1.isResizable());
      assertEquals(0.0F, homeLight1.getNameAngle(), 0.01F);
      assertFalse(homeLight1.isDeformable());
      assertNull(homeLight1.getStaircaseCutOutShape());
      assertNull(homeLight1.getShininess());
      assertTrue(homeLight1.isVisible());
      
      HomeLight homeLight2 = null;
      try {
        homeLight2 = new HomeLight(homeLight1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.eteks.sweethome3d.model.HomePieceOfFurniture", e);
      }
  }

  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      Integer integer0 = new Integer((-1469));
      assertNotNull(integer0);
      assertEquals((-1469), (int)integer0);
      
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      Light light0 = mock(Light.class, new ViolatedAssumptionAnswer());
      doReturn((LightSource[]) null).when(light0).getLightSources();
      doReturn((Integer) null).when(light0).getColor();
      doReturn((String) null).when(light0).getCurrency();
      doReturn(0.0F).when(light0).getDepth();
      doReturn((String) null).when(light0).getDescription();
      doReturn(0.0F).when(light0).getElevation();
      doReturn(0.0F).when(light0).getHeight();
      doReturn((Content) null).when(light0).getIcon();
      doReturn((Content) null).when(light0).getModel();
      doReturn((float[][]) null).when(light0).getModelRotation();
      doReturn((String) null).when(light0).getName();
      doReturn((Content) null).when(light0).getPlanIcon();
      doReturn((BigDecimal) null).when(light0).getPrice();
      doReturn((String) null).when(light0).getStaircaseCutOutShape();
      doReturn((BigDecimal) null).when(light0).getValueAddedTaxPercentage();
      doReturn(0.0F).when(light0).getWidth();
      doReturn(false).when(light0).isBackFaceShown();
      doReturn(false).when(light0).isDeformable();
      doReturn(false).when(light0).isDoorOrWindow();
      doReturn(false).when(light0).isMovable();
      doReturn(false).when(light0).isResizable();
      doReturn(false).when(light0).isTexturable();
      HomeLight homeLight0 = new HomeLight(light0);
      assertNotNull(homeLight0);
      assertNull(homeLight0.getColor());
      assertFalse(homeLight0.isBackFaceShown());
      assertFalse(homeLight0.isNameVisible());
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertFalse(homeLight0.isDeformable());
      assertFalse(homeLight0.isModelMirrored());
      assertTrue(homeLight0.isVisible());
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertFalse(homeLight0.isTexturable());
      assertNull(homeLight0.getDescription());
      assertFalse(homeLight0.isDoorOrWindow());
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertNull(homeLight0.getCatalogId());
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertNull(homeLight0.getName());
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertFalse(homeLight0.isResizable());
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertNull(homeLight0.getShininess());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertNull(homeLight0.getCurrency());
      assertFalse(homeLight0.isMovable());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      
      homeLight0.setElevation((-1.5660207F));
      assertNull(homeLight0.getColor());
      assertFalse(homeLight0.isBackFaceShown());
      assertFalse(homeLight0.isNameVisible());
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertFalse(homeLight0.isDeformable());
      assertFalse(homeLight0.isModelMirrored());
      assertTrue(homeLight0.isVisible());
      assertFalse(homeLight0.isTexturable());
      assertNull(homeLight0.getDescription());
      assertFalse(homeLight0.isDoorOrWindow());
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertNull(homeLight0.getCatalogId());
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertNull(homeLight0.getName());
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertFalse(homeLight0.isResizable());
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertNull(homeLight0.getShininess());
      assertEquals((-1.5660207F), homeLight0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertEquals((-1.5660207F), homeLight0.getElevation(), 0.01F);
      assertNull(homeLight0.getCurrency());
      assertFalse(homeLight0.isMovable());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      
      int int0 = Float.floatToIntBits((byte) (-32));
      assertEquals((-1040187392), int0);
      
      boolean boolean1 = homeLight0.isPointAt((byte)1, (-1.0F), (-1.0F));
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      assertNull(homeLight0.getColor());
      assertFalse(homeLight0.isBackFaceShown());
      assertFalse(homeLight0.isNameVisible());
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertFalse(homeLight0.isDeformable());
      assertFalse(homeLight0.isModelMirrored());
      assertTrue(homeLight0.isVisible());
      assertFalse(homeLight0.isTexturable());
      assertNull(homeLight0.getDescription());
      assertFalse(homeLight0.isDoorOrWindow());
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertNull(homeLight0.getCatalogId());
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertNull(homeLight0.getName());
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertFalse(homeLight0.isResizable());
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertNull(homeLight0.getShininess());
      assertEquals((-1.5660207F), homeLight0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertEquals((-1.5660207F), homeLight0.getElevation(), 0.01F);
      assertNull(homeLight0.getCurrency());
      assertFalse(homeLight0.isMovable());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      
      int int1 = Float.floatToIntBits((-741.9441F));
      assertFalse(int1 == int0);
      assertEquals((-1002865556), int1);
      
      BigDecimal bigDecimal0 = homeLight0.getValueAddedTax();
      assertNull(bigDecimal0);
      assertNull(homeLight0.getColor());
      assertFalse(homeLight0.isBackFaceShown());
      assertFalse(homeLight0.isNameVisible());
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertFalse(homeLight0.isDeformable());
      assertFalse(homeLight0.isModelMirrored());
      assertTrue(homeLight0.isVisible());
      assertFalse(homeLight0.isTexturable());
      assertNull(homeLight0.getDescription());
      assertFalse(homeLight0.isDoorOrWindow());
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertNull(homeLight0.getCatalogId());
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertNull(homeLight0.getName());
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertFalse(homeLight0.isResizable());
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertNull(homeLight0.getShininess());
      assertEquals((-1.5660207F), homeLight0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertEquals((-1.5660207F), homeLight0.getElevation(), 0.01F);
      assertNull(homeLight0.getCurrency());
      assertFalse(homeLight0.isMovable());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      
      Level level0 = homeLight0.getLevel();
      assertNull(level0);
      assertNull(homeLight0.getColor());
      assertFalse(homeLight0.isBackFaceShown());
      assertFalse(homeLight0.isNameVisible());
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertFalse(homeLight0.isDeformable());
      assertFalse(homeLight0.isModelMirrored());
      assertTrue(homeLight0.isVisible());
      assertFalse(homeLight0.isTexturable());
      assertNull(homeLight0.getDescription());
      assertFalse(homeLight0.isDoorOrWindow());
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertNull(homeLight0.getCatalogId());
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertNull(homeLight0.getName());
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertFalse(homeLight0.isResizable());
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertNull(homeLight0.getShininess());
      assertEquals((-1.5660207F), homeLight0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertEquals((-1.5660207F), homeLight0.getElevation(), 0.01F);
      assertNull(homeLight0.getCurrency());
      assertFalse(homeLight0.isMovable());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      
      HomeLight homeLight1 = homeLight0.clone();
      assertNotNull(homeLight1);
      assertNotSame(homeLight0, homeLight1);
      assertNotSame(homeLight1, homeLight0);
      assertFalse(homeLight1.equals((Object)homeLight0));
      assertNull(homeLight0.getColor());
      assertFalse(homeLight0.isBackFaceShown());
      assertFalse(homeLight0.isNameVisible());
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertFalse(homeLight0.isDeformable());
      assertFalse(homeLight0.isModelMirrored());
      assertTrue(homeLight0.isVisible());
      assertFalse(homeLight0.isTexturable());
      assertNull(homeLight0.getDescription());
      assertFalse(homeLight0.isDoorOrWindow());
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertNull(homeLight0.getCatalogId());
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertNull(homeLight0.getName());
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertFalse(homeLight0.isResizable());
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertNull(homeLight0.getShininess());
      assertEquals((-1.5660207F), homeLight0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertEquals((-1.5660207F), homeLight0.getElevation(), 0.01F);
      assertNull(homeLight0.getCurrency());
      assertFalse(homeLight0.isMovable());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertEquals(0.0F, homeLight1.getX(), 0.01F);
      assertEquals(0.0F, homeLight1.getY(), 0.01F);
      assertEquals(0.0F, homeLight1.getAngle(), 0.01F);
      assertFalse(homeLight1.isBackFaceShown());
      assertFalse(homeLight1.isModelMirrored());
      assertFalse(homeLight1.isTexturable());
      assertFalse(homeLight1.isDoorOrWindow());
      assertFalse(homeLight1.isNameVisible());
      assertNull(homeLight1.getName());
      assertNull(homeLight1.getCurrency());
      assertEquals(0.5F, homeLight1.getPower(), 0.01F);
      assertNull(homeLight1.getCatalogId());
      assertNull(homeLight1.getColor());
      assertEquals(0.0F, homeLight1.getNameYOffset(), 0.01F);
      assertFalse(homeLight1.isMovable());
      assertEquals(0.0F, homeLight1.getHeight(), 0.01F);
      assertNull(homeLight1.getShininess());
      assertEquals((-1.5660207F), homeLight1.getGroundElevation(), 0.01F);
      assertFalse(homeLight1.isResizable());
      assertEquals(0.0F, homeLight1.getNameXOffset(), 0.01F);
      assertEquals((-1.5660207F), homeLight1.getElevation(), 0.01F);
      assertEquals(0.0F, homeLight1.getDepth(), 0.01F);
      assertEquals(0.0F, homeLight1.getWidth(), 0.01F);
      assertNull(homeLight1.getDescription());
      assertEquals(0.0F, homeLight1.getNameAngle(), 0.01F);
      assertFalse(homeLight1.isDeformable());
      assertNull(homeLight1.getStaircaseCutOutShape());
      assertTrue(homeLight1.isVisible());
      
      homeLight1.setAngle((-1.5660207F));
      assertNotSame(homeLight0, homeLight1);
      assertNotSame(homeLight1, homeLight0);
      assertFalse(homeLight0.equals((Object)homeLight1));
      assertFalse(homeLight1.equals((Object)homeLight0));
      assertNull(homeLight0.getColor());
      assertFalse(homeLight0.isBackFaceShown());
      assertFalse(homeLight0.isNameVisible());
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertFalse(homeLight0.isDeformable());
      assertFalse(homeLight0.isModelMirrored());
      assertTrue(homeLight0.isVisible());
      assertFalse(homeLight0.isTexturable());
      assertNull(homeLight0.getDescription());
      assertFalse(homeLight0.isDoorOrWindow());
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertNull(homeLight0.getCatalogId());
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertNull(homeLight0.getName());
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertFalse(homeLight0.isResizable());
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertNull(homeLight0.getShininess());
      assertEquals((-1.5660207F), homeLight0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertEquals((-1.5660207F), homeLight0.getElevation(), 0.01F);
      assertNull(homeLight0.getCurrency());
      assertFalse(homeLight0.isMovable());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertEquals(0.0F, homeLight1.getX(), 0.01F);
      assertEquals(0.0F, homeLight1.getY(), 0.01F);
      assertFalse(homeLight1.isBackFaceShown());
      assertFalse(homeLight1.isModelMirrored());
      assertFalse(homeLight1.isTexturable());
      assertFalse(homeLight1.isDoorOrWindow());
      assertFalse(homeLight1.isNameVisible());
      assertNull(homeLight1.getName());
      assertNull(homeLight1.getCurrency());
      assertEquals(0.5F, homeLight1.getPower(), 0.01F);
      assertNull(homeLight1.getCatalogId());
      assertNull(homeLight1.getColor());
      assertEquals(0.0F, homeLight1.getNameYOffset(), 0.01F);
      assertFalse(homeLight1.isMovable());
      assertEquals(0.0F, homeLight1.getHeight(), 0.01F);
      assertNull(homeLight1.getShininess());
      assertEquals((-1.5660207F), homeLight1.getGroundElevation(), 0.01F);
      assertFalse(homeLight1.isResizable());
      assertEquals(4.7171645F, homeLight1.getAngle(), 0.01F);
      assertEquals(0.0F, homeLight1.getNameXOffset(), 0.01F);
      assertEquals((-1.5660207F), homeLight1.getElevation(), 0.01F);
      assertEquals(0.0F, homeLight1.getDepth(), 0.01F);
      assertEquals(0.0F, homeLight1.getWidth(), 0.01F);
      assertNull(homeLight1.getDescription());
      assertEquals(0.0F, homeLight1.getNameAngle(), 0.01F);
      assertFalse(homeLight1.isDeformable());
      assertNull(homeLight1.getStaircaseCutOutShape());
      assertTrue(homeLight1.isVisible());
      
      homeLight0.setName("");
      assertNotSame(homeLight0, homeLight1);
      assertFalse(homeLight0.equals((Object)homeLight1));
      assertNull(homeLight0.getColor());
      assertFalse(homeLight0.isBackFaceShown());
      assertFalse(homeLight0.isNameVisible());
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertFalse(homeLight0.isDeformable());
      assertFalse(homeLight0.isModelMirrored());
      assertTrue(homeLight0.isVisible());
      assertFalse(homeLight0.isTexturable());
      assertNull(homeLight0.getDescription());
      assertFalse(homeLight0.isDoorOrWindow());
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertNull(homeLight0.getCatalogId());
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertEquals("", homeLight0.getName());
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertFalse(homeLight0.isResizable());
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertNull(homeLight0.getShininess());
      assertEquals((-1.5660207F), homeLight0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertEquals((-1.5660207F), homeLight0.getElevation(), 0.01F);
      assertNull(homeLight0.getCurrency());
      assertFalse(homeLight0.isMovable());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      
      Integer integer1 = new Integer((-1469));
      assertNotNull(integer1);
      assertFalse(integer1.equals((Object)int0));
      assertFalse(integer1.equals((Object)int1));
      assertTrue(integer1.equals((Object)integer0));
      assertEquals((-1469), (int)integer1);
      
      System.setCurrentTimeMillis((byte)1);
      float float0 = homeLight0.getElevation();
      assertNotSame(homeLight0, homeLight1);
      assertFalse(homeLight0.equals((Object)homeLight1));
      assertEquals((-1.5660207F), float0, 0.01F);
      assertNull(homeLight0.getColor());
      assertFalse(homeLight0.isBackFaceShown());
      assertFalse(homeLight0.isNameVisible());
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertFalse(homeLight0.isDeformable());
      assertFalse(homeLight0.isModelMirrored());
      assertTrue(homeLight0.isVisible());
      assertFalse(homeLight0.isTexturable());
      assertNull(homeLight0.getDescription());
      assertFalse(homeLight0.isDoorOrWindow());
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertNull(homeLight0.getCatalogId());
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertEquals("", homeLight0.getName());
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertFalse(homeLight0.isResizable());
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertNull(homeLight0.getShininess());
      assertEquals((-1.5660207F), homeLight0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertEquals((-1.5660207F), homeLight0.getElevation(), 0.01F);
      assertNull(homeLight0.getCurrency());
      assertFalse(homeLight0.isMovable());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      
      Content content0 = homeLight1.getIcon();
      assertNull(content0);
      assertNotSame(homeLight0, homeLight1);
      assertNotSame(homeLight1, homeLight0);
      assertFalse(homeLight0.equals((Object)homeLight1));
      assertFalse(homeLight1.equals((Object)homeLight0));
      assertNull(homeLight0.getColor());
      assertFalse(homeLight0.isBackFaceShown());
      assertFalse(homeLight0.isNameVisible());
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertFalse(homeLight0.isDeformable());
      assertFalse(homeLight0.isModelMirrored());
      assertTrue(homeLight0.isVisible());
      assertFalse(homeLight0.isTexturable());
      assertNull(homeLight0.getDescription());
      assertFalse(homeLight0.isDoorOrWindow());
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertNull(homeLight0.getCatalogId());
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertEquals("", homeLight0.getName());
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertFalse(homeLight0.isResizable());
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertNull(homeLight0.getShininess());
      assertEquals((-1.5660207F), homeLight0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertEquals((-1.5660207F), homeLight0.getElevation(), 0.01F);
      assertNull(homeLight0.getCurrency());
      assertFalse(homeLight0.isMovable());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertEquals(0.0F, homeLight1.getX(), 0.01F);
      assertEquals(0.0F, homeLight1.getY(), 0.01F);
      assertFalse(homeLight1.isBackFaceShown());
      assertFalse(homeLight1.isModelMirrored());
      assertFalse(homeLight1.isTexturable());
      assertFalse(homeLight1.isDoorOrWindow());
      assertFalse(homeLight1.isNameVisible());
      assertNull(homeLight1.getName());
      assertNull(homeLight1.getCurrency());
      assertEquals(0.5F, homeLight1.getPower(), 0.01F);
      assertNull(homeLight1.getCatalogId());
      assertNull(homeLight1.getColor());
      assertEquals(0.0F, homeLight1.getNameYOffset(), 0.01F);
      assertFalse(homeLight1.isMovable());
      assertEquals(0.0F, homeLight1.getHeight(), 0.01F);
      assertNull(homeLight1.getShininess());
      assertEquals((-1.5660207F), homeLight1.getGroundElevation(), 0.01F);
      assertFalse(homeLight1.isResizable());
      assertEquals(4.7171645F, homeLight1.getAngle(), 0.01F);
      assertEquals(0.0F, homeLight1.getNameXOffset(), 0.01F);
      assertEquals((-1.5660207F), homeLight1.getElevation(), 0.01F);
      assertEquals(0.0F, homeLight1.getDepth(), 0.01F);
      assertEquals(0.0F, homeLight1.getWidth(), 0.01F);
      assertNull(homeLight1.getDescription());
      assertEquals(0.0F, homeLight1.getNameAngle(), 0.01F);
      assertFalse(homeLight1.isDeformable());
      assertNull(homeLight1.getStaircaseCutOutShape());
      assertTrue(homeLight1.isVisible());
  }

  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      Light light0 = mock(Light.class, new ViolatedAssumptionAnswer());
      doReturn((Integer) null).when(light0).getColor();
      doReturn((String) null).when(light0).getCurrency();
      doReturn(0.0F).when(light0).getDepth();
      doReturn((String) null).when(light0).getDescription();
      doReturn(0.0F).when(light0).getElevation();
      doReturn(0.0F).when(light0).getHeight();
      doReturn((Content) null).when(light0).getIcon();
      doReturn((Content) null).when(light0).getModel();
      doReturn((float[][]) null).when(light0).getModelRotation();
      doReturn((String) null).when(light0).getName();
      doReturn((Content) null).when(light0).getPlanIcon();
      doReturn((BigDecimal) null).when(light0).getPrice();
      doReturn((String) null).when(light0).getStaircaseCutOutShape();
      doReturn((BigDecimal) null).when(light0).getValueAddedTaxPercentage();
      doReturn(0.0F).when(light0).getWidth();
      doReturn(false).when(light0).isBackFaceShown();
      doReturn(false).when(light0).isDeformable();
      doReturn(false).when(light0).isDoorOrWindow();
      doReturn(false).when(light0).isMovable();
      doReturn(false).when(light0).isResizable();
      doReturn(false).when(light0).isTexturable();
      HomePieceOfFurniture homePieceOfFurniture0 = new HomePieceOfFurniture(light0);
      assertNotNull(homePieceOfFurniture0);
      assertEquals(0.0F, homePieceOfFurniture0.getHeight(), 0.01F);
      assertFalse(homePieceOfFurniture0.isResizable());
      assertTrue(homePieceOfFurniture0.isVisible());
      assertNull(homePieceOfFurniture0.getShininess());
      assertEquals(0.0F, homePieceOfFurniture0.getNameYOffset(), 0.01F);
      assertNull(homePieceOfFurniture0.getName());
      assertFalse(homePieceOfFurniture0.isNameVisible());
      assertEquals(0.0F, homePieceOfFurniture0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture0.getElevation(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture0.getWidth(), 0.01F);
      assertFalse(homePieceOfFurniture0.isDoorOrWindow());
      assertNull(homePieceOfFurniture0.getDescription());
      assertEquals(0.0F, homePieceOfFurniture0.getAngle(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture0.getGroundElevation(), 0.01F);
      assertFalse(homePieceOfFurniture0.isTexturable());
      assertFalse(homePieceOfFurniture0.isBackFaceShown());
      assertEquals(0.0F, homePieceOfFurniture0.getY(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture0.getX(), 0.01F);
      assertNull(homePieceOfFurniture0.getColor());
      assertFalse(homePieceOfFurniture0.isModelMirrored());
      assertEquals(0.0F, homePieceOfFurniture0.getNameAngle(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture0.getDepth(), 0.01F);
      assertFalse(homePieceOfFurniture0.isDeformable());
      assertNull(homePieceOfFurniture0.getStaircaseCutOutShape());
      assertNull(homePieceOfFurniture0.getCatalogId());
      assertNull(homePieceOfFurniture0.getCurrency());
      assertFalse(homePieceOfFurniture0.isMovable());
      
      HomePieceOfFurniture homePieceOfFurniture1 = homePieceOfFurniture0.clone();
      assertNotNull(homePieceOfFurniture1);
      assertNotSame(homePieceOfFurniture0, homePieceOfFurniture1);
      assertNotSame(homePieceOfFurniture1, homePieceOfFurniture0);
      assertFalse(homePieceOfFurniture1.equals((Object)homePieceOfFurniture0));
      assertEquals(0.0F, homePieceOfFurniture0.getHeight(), 0.01F);
      assertFalse(homePieceOfFurniture0.isResizable());
      assertTrue(homePieceOfFurniture0.isVisible());
      assertNull(homePieceOfFurniture0.getShininess());
      assertEquals(0.0F, homePieceOfFurniture0.getNameYOffset(), 0.01F);
      assertNull(homePieceOfFurniture0.getName());
      assertFalse(homePieceOfFurniture0.isNameVisible());
      assertEquals(0.0F, homePieceOfFurniture0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture0.getElevation(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture0.getWidth(), 0.01F);
      assertFalse(homePieceOfFurniture0.isDoorOrWindow());
      assertNull(homePieceOfFurniture0.getDescription());
      assertEquals(0.0F, homePieceOfFurniture0.getAngle(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture0.getGroundElevation(), 0.01F);
      assertFalse(homePieceOfFurniture0.isTexturable());
      assertFalse(homePieceOfFurniture0.isBackFaceShown());
      assertEquals(0.0F, homePieceOfFurniture0.getY(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture0.getX(), 0.01F);
      assertNull(homePieceOfFurniture0.getColor());
      assertFalse(homePieceOfFurniture0.isModelMirrored());
      assertEquals(0.0F, homePieceOfFurniture0.getNameAngle(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture0.getDepth(), 0.01F);
      assertFalse(homePieceOfFurniture0.isDeformable());
      assertNull(homePieceOfFurniture0.getStaircaseCutOutShape());
      assertNull(homePieceOfFurniture0.getCatalogId());
      assertNull(homePieceOfFurniture0.getCurrency());
      assertFalse(homePieceOfFurniture0.isMovable());
      assertNull(homePieceOfFurniture1.getColor());
      assertFalse(homePieceOfFurniture1.isModelMirrored());
      assertFalse(homePieceOfFurniture1.isDeformable());
      assertFalse(homePieceOfFurniture1.isNameVisible());
      assertFalse(homePieceOfFurniture1.isBackFaceShown());
      assertEquals(0.0F, homePieceOfFurniture1.getWidth(), 0.01F);
      assertTrue(homePieceOfFurniture1.isVisible());
      assertEquals(0.0F, homePieceOfFurniture1.getAngle(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture1.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture1.getY(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture1.getGroundElevation(), 0.01F);
      assertNull(homePieceOfFurniture1.getDescription());
      assertEquals(0.0F, homePieceOfFurniture1.getX(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture1.getElevation(), 0.01F);
      assertFalse(homePieceOfFurniture1.isDoorOrWindow());
      assertFalse(homePieceOfFurniture1.isTexturable());
      assertEquals(0.0F, homePieceOfFurniture1.getNameAngle(), 0.01F);
      assertNull(homePieceOfFurniture1.getCatalogId());
      assertNull(homePieceOfFurniture1.getStaircaseCutOutShape());
      assertNull(homePieceOfFurniture1.getShininess());
      assertFalse(homePieceOfFurniture1.isResizable());
      assertEquals(0.0F, homePieceOfFurniture1.getDepth(), 0.01F);
      assertNull(homePieceOfFurniture1.getName());
      assertEquals(0.0F, homePieceOfFurniture1.getHeight(), 0.01F);
      assertFalse(homePieceOfFurniture1.isMovable());
      assertNull(homePieceOfFurniture1.getCurrency());
      assertEquals(0.0F, homePieceOfFurniture1.getNameYOffset(), 0.01F);
      
      homePieceOfFurniture1.setVisible(true);
      assertNotSame(homePieceOfFurniture0, homePieceOfFurniture1);
      assertNotSame(homePieceOfFurniture1, homePieceOfFurniture0);
      assertFalse(homePieceOfFurniture0.equals((Object)homePieceOfFurniture1));
      assertFalse(homePieceOfFurniture1.equals((Object)homePieceOfFurniture0));
      assertEquals(0.0F, homePieceOfFurniture0.getHeight(), 0.01F);
      assertFalse(homePieceOfFurniture0.isResizable());
      assertTrue(homePieceOfFurniture0.isVisible());
      assertNull(homePieceOfFurniture0.getShininess());
      assertEquals(0.0F, homePieceOfFurniture0.getNameYOffset(), 0.01F);
      assertNull(homePieceOfFurniture0.getName());
      assertFalse(homePieceOfFurniture0.isNameVisible());
      assertEquals(0.0F, homePieceOfFurniture0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture0.getElevation(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture0.getWidth(), 0.01F);
      assertFalse(homePieceOfFurniture0.isDoorOrWindow());
      assertNull(homePieceOfFurniture0.getDescription());
      assertEquals(0.0F, homePieceOfFurniture0.getAngle(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture0.getGroundElevation(), 0.01F);
      assertFalse(homePieceOfFurniture0.isTexturable());
      assertFalse(homePieceOfFurniture0.isBackFaceShown());
      assertEquals(0.0F, homePieceOfFurniture0.getY(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture0.getX(), 0.01F);
      assertNull(homePieceOfFurniture0.getColor());
      assertFalse(homePieceOfFurniture0.isModelMirrored());
      assertEquals(0.0F, homePieceOfFurniture0.getNameAngle(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture0.getDepth(), 0.01F);
      assertFalse(homePieceOfFurniture0.isDeformable());
      assertNull(homePieceOfFurniture0.getStaircaseCutOutShape());
      assertNull(homePieceOfFurniture0.getCatalogId());
      assertNull(homePieceOfFurniture0.getCurrency());
      assertFalse(homePieceOfFurniture0.isMovable());
      assertNull(homePieceOfFurniture1.getColor());
      assertFalse(homePieceOfFurniture1.isModelMirrored());
      assertFalse(homePieceOfFurniture1.isDeformable());
      assertFalse(homePieceOfFurniture1.isNameVisible());
      assertFalse(homePieceOfFurniture1.isBackFaceShown());
      assertEquals(0.0F, homePieceOfFurniture1.getWidth(), 0.01F);
      assertTrue(homePieceOfFurniture1.isVisible());
      assertEquals(0.0F, homePieceOfFurniture1.getAngle(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture1.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture1.getY(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture1.getGroundElevation(), 0.01F);
      assertNull(homePieceOfFurniture1.getDescription());
      assertEquals(0.0F, homePieceOfFurniture1.getX(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture1.getElevation(), 0.01F);
      assertFalse(homePieceOfFurniture1.isDoorOrWindow());
      assertFalse(homePieceOfFurniture1.isTexturable());
      assertEquals(0.0F, homePieceOfFurniture1.getNameAngle(), 0.01F);
      assertNull(homePieceOfFurniture1.getCatalogId());
      assertNull(homePieceOfFurniture1.getStaircaseCutOutShape());
      assertNull(homePieceOfFurniture1.getShininess());
      assertFalse(homePieceOfFurniture1.isResizable());
      assertEquals(0.0F, homePieceOfFurniture1.getDepth(), 0.01F);
      assertNull(homePieceOfFurniture1.getName());
      assertEquals(0.0F, homePieceOfFurniture1.getHeight(), 0.01F);
      assertFalse(homePieceOfFurniture1.isMovable());
      assertNull(homePieceOfFurniture1.getCurrency());
      assertEquals(0.0F, homePieceOfFurniture1.getNameYOffset(), 0.01F);
      
      homePieceOfFurniture1.setNameVisible(true);
      assertNotSame(homePieceOfFurniture0, homePieceOfFurniture1);
      assertNotSame(homePieceOfFurniture1, homePieceOfFurniture0);
      assertFalse(homePieceOfFurniture0.equals((Object)homePieceOfFurniture1));
      assertFalse(homePieceOfFurniture1.equals((Object)homePieceOfFurniture0));
      assertEquals(0.0F, homePieceOfFurniture0.getHeight(), 0.01F);
      assertFalse(homePieceOfFurniture0.isResizable());
      assertTrue(homePieceOfFurniture0.isVisible());
      assertNull(homePieceOfFurniture0.getShininess());
      assertEquals(0.0F, homePieceOfFurniture0.getNameYOffset(), 0.01F);
      assertNull(homePieceOfFurniture0.getName());
      assertFalse(homePieceOfFurniture0.isNameVisible());
      assertEquals(0.0F, homePieceOfFurniture0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture0.getElevation(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture0.getWidth(), 0.01F);
      assertFalse(homePieceOfFurniture0.isDoorOrWindow());
      assertNull(homePieceOfFurniture0.getDescription());
      assertEquals(0.0F, homePieceOfFurniture0.getAngle(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture0.getGroundElevation(), 0.01F);
      assertFalse(homePieceOfFurniture0.isTexturable());
      assertFalse(homePieceOfFurniture0.isBackFaceShown());
      assertEquals(0.0F, homePieceOfFurniture0.getY(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture0.getX(), 0.01F);
      assertNull(homePieceOfFurniture0.getColor());
      assertFalse(homePieceOfFurniture0.isModelMirrored());
      assertEquals(0.0F, homePieceOfFurniture0.getNameAngle(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture0.getDepth(), 0.01F);
      assertFalse(homePieceOfFurniture0.isDeformable());
      assertNull(homePieceOfFurniture0.getStaircaseCutOutShape());
      assertNull(homePieceOfFurniture0.getCatalogId());
      assertNull(homePieceOfFurniture0.getCurrency());
      assertFalse(homePieceOfFurniture0.isMovable());
      assertNull(homePieceOfFurniture1.getColor());
      assertFalse(homePieceOfFurniture1.isModelMirrored());
      assertFalse(homePieceOfFurniture1.isDeformable());
      assertTrue(homePieceOfFurniture1.isNameVisible());
      assertFalse(homePieceOfFurniture1.isBackFaceShown());
      assertEquals(0.0F, homePieceOfFurniture1.getWidth(), 0.01F);
      assertTrue(homePieceOfFurniture1.isVisible());
      assertEquals(0.0F, homePieceOfFurniture1.getAngle(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture1.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture1.getY(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture1.getGroundElevation(), 0.01F);
      assertNull(homePieceOfFurniture1.getDescription());
      assertEquals(0.0F, homePieceOfFurniture1.getX(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture1.getElevation(), 0.01F);
      assertFalse(homePieceOfFurniture1.isDoorOrWindow());
      assertFalse(homePieceOfFurniture1.isTexturable());
      assertEquals(0.0F, homePieceOfFurniture1.getNameAngle(), 0.01F);
      assertNull(homePieceOfFurniture1.getCatalogId());
      assertNull(homePieceOfFurniture1.getStaircaseCutOutShape());
      assertNull(homePieceOfFurniture1.getShininess());
      assertFalse(homePieceOfFurniture1.isResizable());
      assertEquals(0.0F, homePieceOfFurniture1.getDepth(), 0.01F);
      assertNull(homePieceOfFurniture1.getName());
      assertEquals(0.0F, homePieceOfFurniture1.getHeight(), 0.01F);
      assertFalse(homePieceOfFurniture1.isMovable());
      assertNull(homePieceOfFurniture1.getCurrency());
      assertEquals(0.0F, homePieceOfFurniture1.getNameYOffset(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      Light light0 = mock(Light.class, new ViolatedAssumptionAnswer());
      doReturn((LightSource[]) null).when(light0).getLightSources();
      doReturn((Integer) null).when(light0).getColor();
      doReturn((String) null).when(light0).getCurrency();
      doReturn(0.0F).when(light0).getDepth();
      doReturn((String) null).when(light0).getDescription();
      doReturn(0.0F).when(light0).getElevation();
      doReturn(0.0F).when(light0).getHeight();
      doReturn((Content) null).when(light0).getIcon();
      doReturn((Content) null).when(light0).getModel();
      doReturn((float[][]) null).when(light0).getModelRotation();
      doReturn((String) null).when(light0).getName();
      doReturn((Content) null).when(light0).getPlanIcon();
      doReturn((BigDecimal) null).when(light0).getPrice();
      doReturn((String) null).when(light0).getStaircaseCutOutShape();
      doReturn((BigDecimal) null).when(light0).getValueAddedTaxPercentage();
      doReturn(0.0F).when(light0).getWidth();
      doReturn(false).when(light0).isBackFaceShown();
      doReturn(false).when(light0).isDeformable();
      doReturn(false).when(light0).isDoorOrWindow();
      doReturn(false).when(light0).isMovable();
      doReturn(false).when(light0).isResizable();
      doReturn(false).when(light0).isTexturable();
      HomeLight homeLight0 = new HomeLight(light0);
      assertNotNull(homeLight0);
      assertNull(homeLight0.getColor());
      assertFalse(homeLight0.isBackFaceShown());
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertFalse(homeLight0.isNameVisible());
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertNull(homeLight0.getCurrency());
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertFalse(homeLight0.isTexturable());
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertFalse(homeLight0.isDeformable());
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertFalse(homeLight0.isResizable());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertTrue(homeLight0.isVisible());
      assertNull(homeLight0.getShininess());
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertNull(homeLight0.getCatalogId());
      assertNull(homeLight0.getName());
      assertFalse(homeLight0.isMovable());
      assertNull(homeLight0.getDescription());
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertFalse(homeLight0.isModelMirrored());
      
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      String string0 = homeLight0.getName();
      assertNull(string0);
      assertNull(homeLight0.getColor());
      assertFalse(homeLight0.isBackFaceShown());
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertFalse(homeLight0.isNameVisible());
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertNull(homeLight0.getCurrency());
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertFalse(homeLight0.isTexturable());
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertFalse(homeLight0.isDeformable());
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertFalse(homeLight0.isResizable());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertTrue(homeLight0.isVisible());
      assertNull(homeLight0.getShininess());
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertNull(homeLight0.getCatalogId());
      assertNull(homeLight0.getName());
      assertFalse(homeLight0.isMovable());
      assertNull(homeLight0.getDescription());
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertFalse(homeLight0.isModelMirrored());
      
      Level level0 = homeLight0.getLevel();
      assertNull(level0);
      assertNull(homeLight0.getColor());
      assertFalse(homeLight0.isBackFaceShown());
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertFalse(homeLight0.isNameVisible());
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertNull(homeLight0.getCurrency());
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertFalse(homeLight0.isTexturable());
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertFalse(homeLight0.isDeformable());
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertFalse(homeLight0.isResizable());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertTrue(homeLight0.isVisible());
      assertNull(homeLight0.getShininess());
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertNull(homeLight0.getCatalogId());
      assertNull(homeLight0.getName());
      assertFalse(homeLight0.isMovable());
      assertNull(homeLight0.getDescription());
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertFalse(homeLight0.isModelMirrored());
      
      HomeLight homeLight1 = homeLight0.clone();
      assertNotNull(homeLight1);
      assertNotSame(homeLight0, homeLight1);
      assertNotSame(homeLight1, homeLight0);
      assertFalse(homeLight1.equals((Object)homeLight0));
      assertNull(homeLight0.getColor());
      assertFalse(homeLight0.isBackFaceShown());
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertFalse(homeLight0.isNameVisible());
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertNull(homeLight0.getCurrency());
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertFalse(homeLight0.isTexturable());
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertFalse(homeLight0.isDeformable());
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertFalse(homeLight0.isResizable());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertTrue(homeLight0.isVisible());
      assertNull(homeLight0.getShininess());
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertNull(homeLight0.getCatalogId());
      assertNull(homeLight0.getName());
      assertFalse(homeLight0.isMovable());
      assertNull(homeLight0.getDescription());
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertFalse(homeLight0.isModelMirrored());
      assertEquals(0.0F, homeLight1.getWidth(), 0.01F);
      assertTrue(homeLight1.isVisible());
      assertFalse(homeLight1.isDeformable());
      assertEquals(0.0F, homeLight1.getNameYOffset(), 0.01F);
      assertNull(homeLight1.getColor());
      assertNull(homeLight1.getShininess());
      assertEquals(0.0F, homeLight1.getNameAngle(), 0.01F);
      assertNull(homeLight1.getStaircaseCutOutShape());
      assertFalse(homeLight1.isResizable());
      assertFalse(homeLight1.isMovable());
      assertEquals(0.5F, homeLight1.getPower(), 0.01F);
      assertEquals(0.0F, homeLight1.getHeight(), 0.01F);
      assertNull(homeLight1.getCurrency());
      assertNull(homeLight1.getDescription());
      assertFalse(homeLight1.isTexturable());
      assertEquals(0.0F, homeLight1.getElevation(), 0.01F);
      assertEquals(0.0F, homeLight1.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight1.getDepth(), 0.01F);
      assertEquals(0.0F, homeLight1.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeLight1.getY(), 0.01F);
      assertNull(homeLight1.getCatalogId());
      assertEquals(0.0F, homeLight1.getX(), 0.01F);
      assertFalse(homeLight1.isBackFaceShown());
      assertFalse(homeLight1.isModelMirrored());
      assertFalse(homeLight1.isDoorOrWindow());
      assertNull(homeLight1.getName());
      assertFalse(homeLight1.isNameVisible());
      assertEquals(0.0F, homeLight1.getAngle(), 0.01F);
      
      boolean boolean1 = homeLight0.isNameVisible();
      assertNotSame(homeLight0, homeLight1);
      assertFalse(homeLight0.equals((Object)homeLight1));
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      assertNull(homeLight0.getColor());
      assertFalse(homeLight0.isBackFaceShown());
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertFalse(homeLight0.isNameVisible());
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertNull(homeLight0.getCurrency());
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertFalse(homeLight0.isTexturable());
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertFalse(homeLight0.isDeformable());
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertFalse(homeLight0.isResizable());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertTrue(homeLight0.isVisible());
      assertNull(homeLight0.getShininess());
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertNull(homeLight0.getCatalogId());
      assertNull(homeLight0.getName());
      assertFalse(homeLight0.isMovable());
      assertNull(homeLight0.getDescription());
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertFalse(homeLight0.isModelMirrored());
      
      // Undeclared exception!
      try { 
        homeLight1.setModelMirrored(true);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Piece isn't resizable
         //
         verifyException("com.eteks.sweethome3d.model.HomePieceOfFurniture", e);
      }
  }

  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      Light light0 = mock(Light.class, new ViolatedAssumptionAnswer());
      doReturn((LightSource[]) null).when(light0).getLightSources();
      doReturn((Integer) null).when(light0).getColor();
      doReturn((String) null).when(light0).getCurrency();
      doReturn(0.0F).when(light0).getDepth();
      doReturn((String) null).when(light0).getDescription();
      doReturn(0.0F).when(light0).getElevation();
      doReturn(0.0F).when(light0).getHeight();
      doReturn((Content) null).when(light0).getIcon();
      doReturn((Content) null).when(light0).getModel();
      doReturn((float[][]) null).when(light0).getModelRotation();
      doReturn((String) null).when(light0).getName();
      doReturn((Content) null).when(light0).getPlanIcon();
      doReturn((BigDecimal) null).when(light0).getPrice();
      doReturn((String) null).when(light0).getStaircaseCutOutShape();
      doReturn((BigDecimal) null).when(light0).getValueAddedTaxPercentage();
      doReturn(0.0F).when(light0).getWidth();
      doReturn(false).when(light0).isBackFaceShown();
      doReturn(false).when(light0).isDeformable();
      doReturn(false).when(light0).isDoorOrWindow();
      doReturn(false).when(light0).isMovable();
      doReturn(false).when(light0).isResizable();
      doReturn(false).when(light0).isTexturable();
      HomeLight homeLight0 = new HomeLight(light0);
      assertNotNull(homeLight0);
      assertNull(homeLight0.getCatalogId());
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertNull(homeLight0.getShininess());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertFalse(homeLight0.isResizable());
      assertFalse(homeLight0.isMovable());
      assertNull(homeLight0.getName());
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertTrue(homeLight0.isVisible());
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertFalse(homeLight0.isTexturable());
      assertNull(homeLight0.getDescription());
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertNull(homeLight0.getColor());
      assertFalse(homeLight0.isBackFaceShown());
      assertFalse(homeLight0.isModelMirrored());
      assertFalse(homeLight0.isDoorOrWindow());
      assertFalse(homeLight0.isDeformable());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertNull(homeLight0.getCurrency());
      assertFalse(homeLight0.isNameVisible());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      
      homeLight0.setElevation((-1.0F));
      assertNull(homeLight0.getCatalogId());
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertNull(homeLight0.getShininess());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertFalse(homeLight0.isResizable());
      assertFalse(homeLight0.isMovable());
      assertNull(homeLight0.getName());
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertTrue(homeLight0.isVisible());
      assertEquals((-1.0F), homeLight0.getElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertFalse(homeLight0.isTexturable());
      assertNull(homeLight0.getDescription());
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertEquals((-1.0F), homeLight0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertNull(homeLight0.getColor());
      assertFalse(homeLight0.isBackFaceShown());
      assertFalse(homeLight0.isModelMirrored());
      assertFalse(homeLight0.isDoorOrWindow());
      assertFalse(homeLight0.isDeformable());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertNull(homeLight0.getCurrency());
      assertFalse(homeLight0.isNameVisible());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      int int0 = Float.floatToIntBits((byte) (-32));
      assertEquals((-1040187392), int0);
      
      HomeLight homeLight1 = homeLight0.clone();
      assertNotNull(homeLight1);
      assertNotSame(homeLight0, homeLight1);
      assertNotSame(homeLight1, homeLight0);
      assertFalse(homeLight1.equals((Object)homeLight0));
      assertNull(homeLight0.getCatalogId());
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertNull(homeLight0.getShininess());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertFalse(homeLight0.isResizable());
      assertFalse(homeLight0.isMovable());
      assertNull(homeLight0.getName());
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertTrue(homeLight0.isVisible());
      assertEquals((-1.0F), homeLight0.getElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertFalse(homeLight0.isTexturable());
      assertNull(homeLight0.getDescription());
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertEquals((-1.0F), homeLight0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertNull(homeLight0.getColor());
      assertFalse(homeLight0.isBackFaceShown());
      assertFalse(homeLight0.isModelMirrored());
      assertFalse(homeLight0.isDoorOrWindow());
      assertFalse(homeLight0.isDeformable());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertNull(homeLight0.getCurrency());
      assertFalse(homeLight0.isNameVisible());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertEquals(0.0F, homeLight1.getAngle(), 0.01F);
      assertEquals((-1.0F), homeLight1.getGroundElevation(), 0.01F);
      assertEquals((-1.0F), homeLight1.getElevation(), 0.01F);
      assertEquals(0.0F, homeLight1.getY(), 0.01F);
      assertFalse(homeLight1.isDoorOrWindow());
      assertNull(homeLight1.getDescription());
      assertEquals(0.0F, homeLight1.getX(), 0.01F);
      assertNull(homeLight1.getColor());
      assertEquals(0.0F, homeLight1.getNameXOffset(), 0.01F);
      assertFalse(homeLight1.isTexturable());
      assertNull(homeLight1.getName());
      assertFalse(homeLight1.isNameVisible());
      assertFalse(homeLight1.isBackFaceShown());
      assertFalse(homeLight1.isModelMirrored());
      assertEquals(0.0F, homeLight1.getHeight(), 0.01F);
      assertFalse(homeLight1.isMovable());
      assertEquals(0.0F, homeLight1.getWidth(), 0.01F);
      assertEquals(0.0F, homeLight1.getNameYOffset(), 0.01F);
      assertNull(homeLight1.getCatalogId());
      assertEquals(0.5F, homeLight1.getPower(), 0.01F);
      assertEquals(0.0F, homeLight1.getDepth(), 0.01F);
      assertEquals(0.0F, homeLight1.getNameAngle(), 0.01F);
      assertFalse(homeLight1.isDeformable());
      assertNull(homeLight1.getStaircaseCutOutShape());
      assertNull(homeLight1.getCurrency());
      assertTrue(homeLight1.isVisible());
      assertNull(homeLight1.getShininess());
      assertFalse(homeLight1.isResizable());
      
      Level level0 = homeLight1.getLevel();
      assertNull(level0);
      assertNotSame(homeLight0, homeLight1);
      assertNotSame(homeLight1, homeLight0);
      assertFalse(homeLight0.equals((Object)homeLight1));
      assertFalse(homeLight1.equals((Object)homeLight0));
      assertNull(homeLight0.getCatalogId());
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertNull(homeLight0.getShininess());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertFalse(homeLight0.isResizable());
      assertFalse(homeLight0.isMovable());
      assertNull(homeLight0.getName());
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertTrue(homeLight0.isVisible());
      assertEquals((-1.0F), homeLight0.getElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertFalse(homeLight0.isTexturable());
      assertNull(homeLight0.getDescription());
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertEquals((-1.0F), homeLight0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertNull(homeLight0.getColor());
      assertFalse(homeLight0.isBackFaceShown());
      assertFalse(homeLight0.isModelMirrored());
      assertFalse(homeLight0.isDoorOrWindow());
      assertFalse(homeLight0.isDeformable());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertNull(homeLight0.getCurrency());
      assertFalse(homeLight0.isNameVisible());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertEquals(0.0F, homeLight1.getAngle(), 0.01F);
      assertEquals((-1.0F), homeLight1.getGroundElevation(), 0.01F);
      assertEquals((-1.0F), homeLight1.getElevation(), 0.01F);
      assertEquals(0.0F, homeLight1.getY(), 0.01F);
      assertFalse(homeLight1.isDoorOrWindow());
      assertNull(homeLight1.getDescription());
      assertEquals(0.0F, homeLight1.getX(), 0.01F);
      assertNull(homeLight1.getColor());
      assertEquals(0.0F, homeLight1.getNameXOffset(), 0.01F);
      assertFalse(homeLight1.isTexturable());
      assertNull(homeLight1.getName());
      assertFalse(homeLight1.isNameVisible());
      assertFalse(homeLight1.isBackFaceShown());
      assertFalse(homeLight1.isModelMirrored());
      assertEquals(0.0F, homeLight1.getHeight(), 0.01F);
      assertFalse(homeLight1.isMovable());
      assertEquals(0.0F, homeLight1.getWidth(), 0.01F);
      assertEquals(0.0F, homeLight1.getNameYOffset(), 0.01F);
      assertNull(homeLight1.getCatalogId());
      assertEquals(0.5F, homeLight1.getPower(), 0.01F);
      assertEquals(0.0F, homeLight1.getDepth(), 0.01F);
      assertEquals(0.0F, homeLight1.getNameAngle(), 0.01F);
      assertFalse(homeLight1.isDeformable());
      assertNull(homeLight1.getStaircaseCutOutShape());
      assertNull(homeLight1.getCurrency());
      assertTrue(homeLight1.isVisible());
      assertNull(homeLight1.getShininess());
      assertFalse(homeLight1.isResizable());
      
      homeLight1.setName((String) null);
      assertNotSame(homeLight0, homeLight1);
      assertNotSame(homeLight1, homeLight0);
      assertFalse(homeLight0.equals((Object)homeLight1));
      assertFalse(homeLight1.equals((Object)homeLight0));
      assertNull(homeLight0.getCatalogId());
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertNull(homeLight0.getShininess());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertFalse(homeLight0.isResizable());
      assertFalse(homeLight0.isMovable());
      assertNull(homeLight0.getName());
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertTrue(homeLight0.isVisible());
      assertEquals((-1.0F), homeLight0.getElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertFalse(homeLight0.isTexturable());
      assertNull(homeLight0.getDescription());
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertEquals((-1.0F), homeLight0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertNull(homeLight0.getColor());
      assertFalse(homeLight0.isBackFaceShown());
      assertFalse(homeLight0.isModelMirrored());
      assertFalse(homeLight0.isDoorOrWindow());
      assertFalse(homeLight0.isDeformable());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertNull(homeLight0.getCurrency());
      assertFalse(homeLight0.isNameVisible());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertEquals(0.0F, homeLight1.getAngle(), 0.01F);
      assertEquals((-1.0F), homeLight1.getGroundElevation(), 0.01F);
      assertEquals((-1.0F), homeLight1.getElevation(), 0.01F);
      assertEquals(0.0F, homeLight1.getY(), 0.01F);
      assertFalse(homeLight1.isDoorOrWindow());
      assertNull(homeLight1.getDescription());
      assertEquals(0.0F, homeLight1.getX(), 0.01F);
      assertNull(homeLight1.getColor());
      assertEquals(0.0F, homeLight1.getNameXOffset(), 0.01F);
      assertFalse(homeLight1.isTexturable());
      assertNull(homeLight1.getName());
      assertFalse(homeLight1.isNameVisible());
      assertFalse(homeLight1.isBackFaceShown());
      assertFalse(homeLight1.isModelMirrored());
      assertEquals(0.0F, homeLight1.getHeight(), 0.01F);
      assertFalse(homeLight1.isMovable());
      assertEquals(0.0F, homeLight1.getWidth(), 0.01F);
      assertEquals(0.0F, homeLight1.getNameYOffset(), 0.01F);
      assertNull(homeLight1.getCatalogId());
      assertEquals(0.5F, homeLight1.getPower(), 0.01F);
      assertEquals(0.0F, homeLight1.getDepth(), 0.01F);
      assertEquals(0.0F, homeLight1.getNameAngle(), 0.01F);
      assertFalse(homeLight1.isDeformable());
      assertNull(homeLight1.getStaircaseCutOutShape());
      assertNull(homeLight1.getCurrency());
      assertTrue(homeLight1.isVisible());
      assertNull(homeLight1.getShininess());
      assertFalse(homeLight1.isResizable());
      
      boolean boolean1 = homeLight0.intersectsRectangle((-1.0F), 1648.4163F, 0.5F, (-1040187392));
      assertNotSame(homeLight0, homeLight1);
      assertFalse(homeLight0.equals((Object)homeLight1));
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
      assertNull(homeLight0.getCatalogId());
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertNull(homeLight0.getShininess());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertFalse(homeLight0.isResizable());
      assertFalse(homeLight0.isMovable());
      assertNull(homeLight0.getName());
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertTrue(homeLight0.isVisible());
      assertEquals((-1.0F), homeLight0.getElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertFalse(homeLight0.isTexturable());
      assertNull(homeLight0.getDescription());
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertEquals((-1.0F), homeLight0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertNull(homeLight0.getColor());
      assertFalse(homeLight0.isBackFaceShown());
      assertFalse(homeLight0.isModelMirrored());
      assertFalse(homeLight0.isDoorOrWindow());
      assertFalse(homeLight0.isDeformable());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertNull(homeLight0.getCurrency());
      assertFalse(homeLight0.isNameVisible());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      
      homeLight0.setNameYOffset(0.5F);
      assertNotSame(homeLight0, homeLight1);
      assertFalse(homeLight0.equals((Object)homeLight1));
      assertNull(homeLight0.getCatalogId());
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertNull(homeLight0.getShininess());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertFalse(homeLight0.isResizable());
      assertFalse(homeLight0.isMovable());
      assertNull(homeLight0.getName());
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertTrue(homeLight0.isVisible());
      assertEquals((-1.0F), homeLight0.getElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertFalse(homeLight0.isTexturable());
      assertNull(homeLight0.getDescription());
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertEquals((-1.0F), homeLight0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertNull(homeLight0.getColor());
      assertFalse(homeLight0.isBackFaceShown());
      assertFalse(homeLight0.isModelMirrored());
      assertFalse(homeLight0.isDoorOrWindow());
      assertFalse(homeLight0.isDeformable());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertNull(homeLight0.getCurrency());
      assertFalse(homeLight0.isNameVisible());
      assertEquals(0.5F, homeLight0.getNameYOffset(), 0.01F);
      
      BigDecimal bigDecimal0 = BigDecimal.TEN;
      assertNotNull(bigDecimal0);
      assertEquals((byte)10, bigDecimal0.byteValue());
      assertEquals((short)10, bigDecimal0.shortValue());
      
      HomeLight homeLight2 = homeLight1.clone();
      assertNotNull(homeLight2);
      assertNotSame(homeLight0, homeLight2);
      assertNotSame(homeLight0, homeLight1);
      assertNotSame(homeLight1, homeLight2);
      assertNotSame(homeLight1, homeLight0);
      assertNotSame(homeLight2, homeLight1);
      assertNotSame(homeLight2, homeLight0);
      assertFalse(homeLight0.equals((Object)homeLight1));
      assertFalse(homeLight1.equals((Object)homeLight0));
      assertFalse(homeLight2.equals((Object)homeLight1));
      assertFalse(homeLight2.equals((Object)homeLight0));
      assertNull(homeLight0.getCatalogId());
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertNull(homeLight0.getShininess());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertFalse(homeLight0.isResizable());
      assertFalse(homeLight0.isMovable());
      assertNull(homeLight0.getName());
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertTrue(homeLight0.isVisible());
      assertEquals((-1.0F), homeLight0.getElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertFalse(homeLight0.isTexturable());
      assertNull(homeLight0.getDescription());
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertEquals((-1.0F), homeLight0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertNull(homeLight0.getColor());
      assertFalse(homeLight0.isBackFaceShown());
      assertFalse(homeLight0.isModelMirrored());
      assertFalse(homeLight0.isDoorOrWindow());
      assertFalse(homeLight0.isDeformable());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertNull(homeLight0.getCurrency());
      assertFalse(homeLight0.isNameVisible());
      assertEquals(0.5F, homeLight0.getNameYOffset(), 0.01F);
      assertEquals(0.0F, homeLight1.getAngle(), 0.01F);
      assertEquals((-1.0F), homeLight1.getGroundElevation(), 0.01F);
      assertEquals((-1.0F), homeLight1.getElevation(), 0.01F);
      assertEquals(0.0F, homeLight1.getY(), 0.01F);
      assertFalse(homeLight1.isDoorOrWindow());
      assertNull(homeLight1.getDescription());
      assertEquals(0.0F, homeLight1.getX(), 0.01F);
      assertNull(homeLight1.getColor());
      assertEquals(0.0F, homeLight1.getNameXOffset(), 0.01F);
      assertFalse(homeLight1.isTexturable());
      assertNull(homeLight1.getName());
      assertFalse(homeLight1.isNameVisible());
      assertFalse(homeLight1.isBackFaceShown());
      assertFalse(homeLight1.isModelMirrored());
      assertEquals(0.0F, homeLight1.getHeight(), 0.01F);
      assertFalse(homeLight1.isMovable());
      assertEquals(0.0F, homeLight1.getWidth(), 0.01F);
      assertEquals(0.0F, homeLight1.getNameYOffset(), 0.01F);
      assertNull(homeLight1.getCatalogId());
      assertEquals(0.5F, homeLight1.getPower(), 0.01F);
      assertEquals(0.0F, homeLight1.getDepth(), 0.01F);
      assertEquals(0.0F, homeLight1.getNameAngle(), 0.01F);
      assertFalse(homeLight1.isDeformable());
      assertNull(homeLight1.getStaircaseCutOutShape());
      assertNull(homeLight1.getCurrency());
      assertTrue(homeLight1.isVisible());
      assertNull(homeLight1.getShininess());
      assertFalse(homeLight1.isResizable());
      assertFalse(homeLight2.isResizable());
      assertEquals(0.0F, homeLight2.getHeight(), 0.01F);
      assertFalse(homeLight2.isMovable());
      assertEquals(0.0F, homeLight2.getWidth(), 0.01F);
      assertEquals(0.5F, homeLight2.getPower(), 0.01F);
      assertEquals(0.0F, homeLight2.getNameXOffset(), 0.01F);
      assertNull(homeLight2.getDescription());
      assertEquals((-1.0F), homeLight2.getElevation(), 0.01F);
      assertFalse(homeLight2.isDeformable());
      assertNull(homeLight2.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight2.getNameAngle(), 0.01F);
      assertTrue(homeLight2.isVisible());
      assertEquals(0.0F, homeLight2.getDepth(), 0.01F);
      assertNull(homeLight2.getShininess());
      assertEquals(0.0F, homeLight2.getX(), 0.01F);
      assertEquals(0.0F, homeLight2.getY(), 0.01F);
      assertFalse(homeLight2.isDoorOrWindow());
      assertFalse(homeLight2.isBackFaceShown());
      assertEquals((-1.0F), homeLight2.getGroundElevation(), 0.01F);
      assertFalse(homeLight2.isTexturable());
      assertEquals(0.0F, homeLight2.getAngle(), 0.01F);
      assertNull(homeLight2.getCurrency());
      assertEquals(0.0F, homeLight2.getNameYOffset(), 0.01F);
      assertNull(homeLight2.getName());
      assertFalse(homeLight2.isNameVisible());
      assertNull(homeLight2.getCatalogId());
      assertNull(homeLight2.getColor());
      assertFalse(homeLight2.isModelMirrored());
      
      homeLight0.setDescription((String) null);
      assertNotSame(homeLight0, homeLight2);
      assertNotSame(homeLight0, homeLight1);
      assertFalse(homeLight0.equals((Object)homeLight2));
      assertFalse(homeLight0.equals((Object)homeLight1));
      assertNull(homeLight0.getCatalogId());
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertNull(homeLight0.getShininess());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertFalse(homeLight0.isResizable());
      assertFalse(homeLight0.isMovable());
      assertNull(homeLight0.getName());
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertTrue(homeLight0.isVisible());
      assertEquals((-1.0F), homeLight0.getElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertFalse(homeLight0.isTexturable());
      assertNull(homeLight0.getDescription());
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertEquals((-1.0F), homeLight0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertNull(homeLight0.getColor());
      assertFalse(homeLight0.isBackFaceShown());
      assertFalse(homeLight0.isModelMirrored());
      assertFalse(homeLight0.isDoorOrWindow());
      assertFalse(homeLight0.isDeformable());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertNull(homeLight0.getCurrency());
      assertFalse(homeLight0.isNameVisible());
      assertEquals(0.5F, homeLight0.getNameYOffset(), 0.01F);
      
      String string0 = homeLight1.getDescription();
      assertNull(string0);
      assertNotSame(homeLight0, homeLight2);
      assertNotSame(homeLight0, homeLight1);
      assertNotSame(homeLight1, homeLight2);
      assertNotSame(homeLight1, homeLight0);
      assertFalse(homeLight0.equals((Object)homeLight2));
      assertFalse(homeLight0.equals((Object)homeLight1));
      assertFalse(homeLight1.equals((Object)homeLight2));
      assertFalse(homeLight1.equals((Object)homeLight0));
      assertNull(homeLight0.getCatalogId());
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertNull(homeLight0.getShininess());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertFalse(homeLight0.isResizable());
      assertFalse(homeLight0.isMovable());
      assertNull(homeLight0.getName());
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertTrue(homeLight0.isVisible());
      assertEquals((-1.0F), homeLight0.getElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertFalse(homeLight0.isTexturable());
      assertNull(homeLight0.getDescription());
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertEquals((-1.0F), homeLight0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertNull(homeLight0.getColor());
      assertFalse(homeLight0.isBackFaceShown());
      assertFalse(homeLight0.isModelMirrored());
      assertFalse(homeLight0.isDoorOrWindow());
      assertFalse(homeLight0.isDeformable());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertNull(homeLight0.getCurrency());
      assertFalse(homeLight0.isNameVisible());
      assertEquals(0.5F, homeLight0.getNameYOffset(), 0.01F);
      assertEquals(0.0F, homeLight1.getAngle(), 0.01F);
      assertEquals((-1.0F), homeLight1.getGroundElevation(), 0.01F);
      assertEquals((-1.0F), homeLight1.getElevation(), 0.01F);
      assertEquals(0.0F, homeLight1.getY(), 0.01F);
      assertFalse(homeLight1.isDoorOrWindow());
      assertNull(homeLight1.getDescription());
      assertEquals(0.0F, homeLight1.getX(), 0.01F);
      assertNull(homeLight1.getColor());
      assertEquals(0.0F, homeLight1.getNameXOffset(), 0.01F);
      assertFalse(homeLight1.isTexturable());
      assertNull(homeLight1.getName());
      assertFalse(homeLight1.isNameVisible());
      assertFalse(homeLight1.isBackFaceShown());
      assertFalse(homeLight1.isModelMirrored());
      assertEquals(0.0F, homeLight1.getHeight(), 0.01F);
      assertFalse(homeLight1.isMovable());
      assertEquals(0.0F, homeLight1.getWidth(), 0.01F);
      assertEquals(0.0F, homeLight1.getNameYOffset(), 0.01F);
      assertNull(homeLight1.getCatalogId());
      assertEquals(0.5F, homeLight1.getPower(), 0.01F);
      assertEquals(0.0F, homeLight1.getDepth(), 0.01F);
      assertEquals(0.0F, homeLight1.getNameAngle(), 0.01F);
      assertFalse(homeLight1.isDeformable());
      assertNull(homeLight1.getStaircaseCutOutShape());
      assertNull(homeLight1.getCurrency());
      assertTrue(homeLight1.isVisible());
      assertNull(homeLight1.getShininess());
      assertFalse(homeLight1.isResizable());
      
      boolean boolean2 = homeLight2.isNameCenterPointAt(3205.479F, (-1.0F), 3205.479F);
      assertNotSame(homeLight0, homeLight2);
      assertNotSame(homeLight0, homeLight1);
      assertNotSame(homeLight1, homeLight2);
      assertNotSame(homeLight1, homeLight0);
      assertNotSame(homeLight2, homeLight1);
      assertNotSame(homeLight2, homeLight0);
      assertFalse(homeLight0.equals((Object)homeLight2));
      assertFalse(homeLight0.equals((Object)homeLight1));
      assertFalse(homeLight1.equals((Object)homeLight2));
      assertFalse(homeLight1.equals((Object)homeLight0));
      assertFalse(homeLight2.equals((Object)homeLight1));
      assertFalse(homeLight2.equals((Object)homeLight0));
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2);
      assertNull(homeLight0.getCatalogId());
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertNull(homeLight0.getShininess());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertFalse(homeLight0.isResizable());
      assertFalse(homeLight0.isMovable());
      assertNull(homeLight0.getName());
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertTrue(homeLight0.isVisible());
      assertEquals((-1.0F), homeLight0.getElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertFalse(homeLight0.isTexturable());
      assertNull(homeLight0.getDescription());
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertEquals((-1.0F), homeLight0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertNull(homeLight0.getColor());
      assertFalse(homeLight0.isBackFaceShown());
      assertFalse(homeLight0.isModelMirrored());
      assertFalse(homeLight0.isDoorOrWindow());
      assertFalse(homeLight0.isDeformable());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertNull(homeLight0.getCurrency());
      assertFalse(homeLight0.isNameVisible());
      assertEquals(0.5F, homeLight0.getNameYOffset(), 0.01F);
      assertEquals(0.0F, homeLight1.getAngle(), 0.01F);
      assertEquals((-1.0F), homeLight1.getGroundElevation(), 0.01F);
      assertEquals((-1.0F), homeLight1.getElevation(), 0.01F);
      assertEquals(0.0F, homeLight1.getY(), 0.01F);
      assertFalse(homeLight1.isDoorOrWindow());
      assertNull(homeLight1.getDescription());
      assertEquals(0.0F, homeLight1.getX(), 0.01F);
      assertNull(homeLight1.getColor());
      assertEquals(0.0F, homeLight1.getNameXOffset(), 0.01F);
      assertFalse(homeLight1.isTexturable());
      assertNull(homeLight1.getName());
      assertFalse(homeLight1.isNameVisible());
      assertFalse(homeLight1.isBackFaceShown());
      assertFalse(homeLight1.isModelMirrored());
      assertEquals(0.0F, homeLight1.getHeight(), 0.01F);
      assertFalse(homeLight1.isMovable());
      assertEquals(0.0F, homeLight1.getWidth(), 0.01F);
      assertEquals(0.0F, homeLight1.getNameYOffset(), 0.01F);
      assertNull(homeLight1.getCatalogId());
      assertEquals(0.5F, homeLight1.getPower(), 0.01F);
      assertEquals(0.0F, homeLight1.getDepth(), 0.01F);
      assertEquals(0.0F, homeLight1.getNameAngle(), 0.01F);
      assertFalse(homeLight1.isDeformable());
      assertNull(homeLight1.getStaircaseCutOutShape());
      assertNull(homeLight1.getCurrency());
      assertTrue(homeLight1.isVisible());
      assertNull(homeLight1.getShininess());
      assertFalse(homeLight1.isResizable());
      assertFalse(homeLight2.isResizable());
      assertEquals(0.0F, homeLight2.getHeight(), 0.01F);
      assertFalse(homeLight2.isMovable());
      assertEquals(0.0F, homeLight2.getWidth(), 0.01F);
      assertEquals(0.5F, homeLight2.getPower(), 0.01F);
      assertEquals(0.0F, homeLight2.getNameXOffset(), 0.01F);
      assertNull(homeLight2.getDescription());
      assertEquals((-1.0F), homeLight2.getElevation(), 0.01F);
      assertFalse(homeLight2.isDeformable());
      assertNull(homeLight2.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight2.getNameAngle(), 0.01F);
      assertTrue(homeLight2.isVisible());
      assertEquals(0.0F, homeLight2.getDepth(), 0.01F);
      assertNull(homeLight2.getShininess());
      assertEquals(0.0F, homeLight2.getX(), 0.01F);
      assertEquals(0.0F, homeLight2.getY(), 0.01F);
      assertFalse(homeLight2.isDoorOrWindow());
      assertFalse(homeLight2.isBackFaceShown());
      assertEquals((-1.0F), homeLight2.getGroundElevation(), 0.01F);
      assertFalse(homeLight2.isTexturable());
      assertEquals(0.0F, homeLight2.getAngle(), 0.01F);
      assertNull(homeLight2.getCurrency());
      assertEquals(0.0F, homeLight2.getNameYOffset(), 0.01F);
      assertNull(homeLight2.getName());
      assertFalse(homeLight2.isNameVisible());
      assertNull(homeLight2.getCatalogId());
      assertNull(homeLight2.getColor());
      assertFalse(homeLight2.isModelMirrored());
      
      TextStyle textStyle0 = homeLight2.getNameStyle();
      assertNull(textStyle0);
      assertNotSame(homeLight0, homeLight2);
      assertNotSame(homeLight0, homeLight1);
      assertNotSame(homeLight1, homeLight2);
      assertNotSame(homeLight1, homeLight0);
      assertNotSame(homeLight2, homeLight1);
      assertNotSame(homeLight2, homeLight0);
      assertFalse(homeLight0.equals((Object)homeLight2));
      assertFalse(homeLight0.equals((Object)homeLight1));
      assertFalse(homeLight1.equals((Object)homeLight2));
      assertFalse(homeLight1.equals((Object)homeLight0));
      assertFalse(homeLight2.equals((Object)homeLight1));
      assertFalse(homeLight2.equals((Object)homeLight0));
      assertNull(homeLight0.getCatalogId());
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertNull(homeLight0.getShininess());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertFalse(homeLight0.isResizable());
      assertFalse(homeLight0.isMovable());
      assertNull(homeLight0.getName());
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertTrue(homeLight0.isVisible());
      assertEquals((-1.0F), homeLight0.getElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertFalse(homeLight0.isTexturable());
      assertNull(homeLight0.getDescription());
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertEquals((-1.0F), homeLight0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertNull(homeLight0.getColor());
      assertFalse(homeLight0.isBackFaceShown());
      assertFalse(homeLight0.isModelMirrored());
      assertFalse(homeLight0.isDoorOrWindow());
      assertFalse(homeLight0.isDeformable());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertNull(homeLight0.getCurrency());
      assertFalse(homeLight0.isNameVisible());
      assertEquals(0.5F, homeLight0.getNameYOffset(), 0.01F);
      assertEquals(0.0F, homeLight1.getAngle(), 0.01F);
      assertEquals((-1.0F), homeLight1.getGroundElevation(), 0.01F);
      assertEquals((-1.0F), homeLight1.getElevation(), 0.01F);
      assertEquals(0.0F, homeLight1.getY(), 0.01F);
      assertFalse(homeLight1.isDoorOrWindow());
      assertNull(homeLight1.getDescription());
      assertEquals(0.0F, homeLight1.getX(), 0.01F);
      assertNull(homeLight1.getColor());
      assertEquals(0.0F, homeLight1.getNameXOffset(), 0.01F);
      assertFalse(homeLight1.isTexturable());
      assertNull(homeLight1.getName());
      assertFalse(homeLight1.isNameVisible());
      assertFalse(homeLight1.isBackFaceShown());
      assertFalse(homeLight1.isModelMirrored());
      assertEquals(0.0F, homeLight1.getHeight(), 0.01F);
      assertFalse(homeLight1.isMovable());
      assertEquals(0.0F, homeLight1.getWidth(), 0.01F);
      assertEquals(0.0F, homeLight1.getNameYOffset(), 0.01F);
      assertNull(homeLight1.getCatalogId());
      assertEquals(0.5F, homeLight1.getPower(), 0.01F);
      assertEquals(0.0F, homeLight1.getDepth(), 0.01F);
      assertEquals(0.0F, homeLight1.getNameAngle(), 0.01F);
      assertFalse(homeLight1.isDeformable());
      assertNull(homeLight1.getStaircaseCutOutShape());
      assertNull(homeLight1.getCurrency());
      assertTrue(homeLight1.isVisible());
      assertNull(homeLight1.getShininess());
      assertFalse(homeLight1.isResizable());
      assertFalse(homeLight2.isResizable());
      assertEquals(0.0F, homeLight2.getHeight(), 0.01F);
      assertFalse(homeLight2.isMovable());
      assertEquals(0.0F, homeLight2.getWidth(), 0.01F);
      assertEquals(0.5F, homeLight2.getPower(), 0.01F);
      assertEquals(0.0F, homeLight2.getNameXOffset(), 0.01F);
      assertNull(homeLight2.getDescription());
      assertEquals((-1.0F), homeLight2.getElevation(), 0.01F);
      assertFalse(homeLight2.isDeformable());
      assertNull(homeLight2.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight2.getNameAngle(), 0.01F);
      assertTrue(homeLight2.isVisible());
      assertEquals(0.0F, homeLight2.getDepth(), 0.01F);
      assertNull(homeLight2.getShininess());
      assertEquals(0.0F, homeLight2.getX(), 0.01F);
      assertEquals(0.0F, homeLight2.getY(), 0.01F);
      assertFalse(homeLight2.isDoorOrWindow());
      assertFalse(homeLight2.isBackFaceShown());
      assertEquals((-1.0F), homeLight2.getGroundElevation(), 0.01F);
      assertFalse(homeLight2.isTexturable());
      assertEquals(0.0F, homeLight2.getAngle(), 0.01F);
      assertNull(homeLight2.getCurrency());
      assertEquals(0.0F, homeLight2.getNameYOffset(), 0.01F);
      assertNull(homeLight2.getName());
      assertFalse(homeLight2.isNameVisible());
      assertNull(homeLight2.getCatalogId());
      assertNull(homeLight2.getColor());
      assertFalse(homeLight2.isModelMirrored());
  }

  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      Integer integer0 = new Integer(1431655742);
      assertNotNull(integer0);
      assertEquals(1431655742, (int)integer0);
      
      Light light0 = mock(Light.class, new ViolatedAssumptionAnswer());
      doReturn((LightSource[]) null).when(light0).getLightSources();
      doReturn((Integer) null).when(light0).getColor();
      doReturn((String) null).when(light0).getCurrency();
      doReturn(0.0F).when(light0).getDepth();
      doReturn((String) null).when(light0).getDescription();
      doReturn(0.0F).when(light0).getElevation();
      doReturn(0.0F).when(light0).getHeight();
      doReturn((Content) null).when(light0).getIcon();
      doReturn((Content) null).when(light0).getModel();
      doReturn((float[][]) null).when(light0).getModelRotation();
      doReturn((String) null).when(light0).getName();
      doReturn((Content) null).when(light0).getPlanIcon();
      doReturn((BigDecimal) null).when(light0).getPrice();
      doReturn((String) null).when(light0).getStaircaseCutOutShape();
      doReturn((BigDecimal) null).when(light0).getValueAddedTaxPercentage();
      doReturn(0.0F).when(light0).getWidth();
      doReturn(false).when(light0).isBackFaceShown();
      doReturn(false).when(light0).isDeformable();
      doReturn(false).when(light0).isDoorOrWindow();
      doReturn(false).when(light0).isMovable();
      doReturn(false).when(light0).isResizable();
      doReturn(false).when(light0).isTexturable();
      HomeLight homeLight0 = new HomeLight(light0);
      assertNotNull(homeLight0);
      assertNull(homeLight0.getCurrency());
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertFalse(homeLight0.isDeformable());
      assertTrue(homeLight0.isVisible());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertNull(homeLight0.getColor());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      assertFalse(homeLight0.isTexturable());
      assertFalse(homeLight0.isModelMirrored());
      assertFalse(homeLight0.isBackFaceShown());
      assertFalse(homeLight0.isNameVisible());
      assertNull(homeLight0.getName());
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertNull(homeLight0.getDescription());
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertNull(homeLight0.getCatalogId());
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertFalse(homeLight0.isMovable());
      assertFalse(homeLight0.isResizable());
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertNull(homeLight0.getShininess());
      
      homeLight0.setY(1431655742);
      assertNull(homeLight0.getCurrency());
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertFalse(homeLight0.isDeformable());
      assertTrue(homeLight0.isVisible());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertNull(homeLight0.getColor());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      assertFalse(homeLight0.isTexturable());
      assertFalse(homeLight0.isModelMirrored());
      assertFalse(homeLight0.isBackFaceShown());
      assertFalse(homeLight0.isNameVisible());
      assertNull(homeLight0.getName());
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals(1.43165568E9F, homeLight0.getY(), 0.01F);
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertNull(homeLight0.getDescription());
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertNull(homeLight0.getCatalogId());
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertFalse(homeLight0.isMovable());
      assertFalse(homeLight0.isResizable());
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertNull(homeLight0.getShininess());
      
      boolean boolean0 = homeLight0.isTopRightPointAt(1431655742, 1431655742, 3.4028235E38F);
      assertFalse(boolean0);
      assertNull(homeLight0.getCurrency());
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertFalse(homeLight0.isDeformable());
      assertTrue(homeLight0.isVisible());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertNull(homeLight0.getColor());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      assertFalse(homeLight0.isTexturable());
      assertFalse(homeLight0.isModelMirrored());
      assertFalse(homeLight0.isBackFaceShown());
      assertFalse(homeLight0.isNameVisible());
      assertNull(homeLight0.getName());
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals(1.43165568E9F, homeLight0.getY(), 0.01F);
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertNull(homeLight0.getDescription());
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertNull(homeLight0.getCatalogId());
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertFalse(homeLight0.isMovable());
      assertFalse(homeLight0.isResizable());
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertNull(homeLight0.getShininess());
      
      Level level0 = homeLight0.getLevel();
      assertNull(level0);
      assertNull(homeLight0.getCurrency());
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertFalse(homeLight0.isDeformable());
      assertTrue(homeLight0.isVisible());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertNull(homeLight0.getColor());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      assertFalse(homeLight0.isTexturable());
      assertFalse(homeLight0.isModelMirrored());
      assertFalse(homeLight0.isBackFaceShown());
      assertFalse(homeLight0.isNameVisible());
      assertNull(homeLight0.getName());
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals(1.43165568E9F, homeLight0.getY(), 0.01F);
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertNull(homeLight0.getDescription());
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertNull(homeLight0.getCatalogId());
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertFalse(homeLight0.isMovable());
      assertFalse(homeLight0.isResizable());
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertNull(homeLight0.getShininess());
      
      HomeLight homeLight1 = homeLight0.clone();
      assertNotNull(homeLight1);
      assertNotSame(homeLight0, homeLight1);
      assertNotSame(homeLight1, homeLight0);
      assertFalse(homeLight1.equals((Object)homeLight0));
      assertNull(homeLight0.getCurrency());
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertFalse(homeLight0.isDeformable());
      assertTrue(homeLight0.isVisible());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertNull(homeLight0.getColor());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      assertFalse(homeLight0.isTexturable());
      assertFalse(homeLight0.isModelMirrored());
      assertFalse(homeLight0.isBackFaceShown());
      assertFalse(homeLight0.isNameVisible());
      assertNull(homeLight0.getName());
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals(1.43165568E9F, homeLight0.getY(), 0.01F);
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertNull(homeLight0.getDescription());
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertNull(homeLight0.getCatalogId());
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertFalse(homeLight0.isMovable());
      assertFalse(homeLight0.isResizable());
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertNull(homeLight0.getShininess());
      assertEquals(0.0F, homeLight1.getDepth(), 0.01F);
      assertNull(homeLight1.getName());
      assertEquals(1.43165568E9F, homeLight1.getY(), 0.01F);
      assertEquals(0.0F, homeLight1.getNameXOffset(), 0.01F);
      assertNull(homeLight1.getDescription());
      assertEquals(0.5F, homeLight1.getPower(), 0.01F);
      assertNull(homeLight1.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight1.getNameAngle(), 0.01F);
      assertEquals(0.0F, homeLight1.getHeight(), 0.01F);
      assertFalse(homeLight1.isMovable());
      assertNull(homeLight1.getCatalogId());
      assertNull(homeLight1.getColor());
      assertEquals(0.0F, homeLight1.getNameYOffset(), 0.01F);
      assertFalse(homeLight1.isDeformable());
      assertFalse(homeLight1.isNameVisible());
      assertEquals(0.0F, homeLight1.getWidth(), 0.01F);
      assertTrue(homeLight1.isVisible());
      assertNull(homeLight1.getCurrency());
      assertFalse(homeLight1.isModelMirrored());
      assertFalse(homeLight1.isBackFaceShown());
      assertFalse(homeLight1.isResizable());
      assertEquals(0.0F, homeLight1.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight1.getX(), 0.01F);
      assertNull(homeLight1.getShininess());
      assertEquals(0.0F, homeLight1.getAngle(), 0.01F);
      assertEquals(0.0F, homeLight1.getElevation(), 0.01F);
      assertFalse(homeLight1.isDoorOrWindow());
      assertFalse(homeLight1.isTexturable());
      
      homeLight1.setMovable(false);
      assertNotSame(homeLight0, homeLight1);
      assertNotSame(homeLight1, homeLight0);
      assertFalse(homeLight0.equals((Object)homeLight1));
      assertFalse(homeLight1.equals((Object)homeLight0));
      assertNull(homeLight0.getCurrency());
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertFalse(homeLight0.isDeformable());
      assertTrue(homeLight0.isVisible());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertNull(homeLight0.getColor());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      assertFalse(homeLight0.isTexturable());
      assertFalse(homeLight0.isModelMirrored());
      assertFalse(homeLight0.isBackFaceShown());
      assertFalse(homeLight0.isNameVisible());
      assertNull(homeLight0.getName());
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals(1.43165568E9F, homeLight0.getY(), 0.01F);
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertNull(homeLight0.getDescription());
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertNull(homeLight0.getCatalogId());
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertFalse(homeLight0.isMovable());
      assertFalse(homeLight0.isResizable());
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertNull(homeLight0.getShininess());
      assertEquals(0.0F, homeLight1.getDepth(), 0.01F);
      assertNull(homeLight1.getName());
      assertEquals(1.43165568E9F, homeLight1.getY(), 0.01F);
      assertEquals(0.0F, homeLight1.getNameXOffset(), 0.01F);
      assertNull(homeLight1.getDescription());
      assertEquals(0.5F, homeLight1.getPower(), 0.01F);
      assertNull(homeLight1.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight1.getNameAngle(), 0.01F);
      assertEquals(0.0F, homeLight1.getHeight(), 0.01F);
      assertFalse(homeLight1.isMovable());
      assertNull(homeLight1.getCatalogId());
      assertNull(homeLight1.getColor());
      assertEquals(0.0F, homeLight1.getNameYOffset(), 0.01F);
      assertFalse(homeLight1.isDeformable());
      assertFalse(homeLight1.isNameVisible());
      assertEquals(0.0F, homeLight1.getWidth(), 0.01F);
      assertTrue(homeLight1.isVisible());
      assertNull(homeLight1.getCurrency());
      assertFalse(homeLight1.isModelMirrored());
      assertFalse(homeLight1.isBackFaceShown());
      assertFalse(homeLight1.isResizable());
      assertEquals(0.0F, homeLight1.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight1.getX(), 0.01F);
      assertNull(homeLight1.getShininess());
      assertEquals(0.0F, homeLight1.getAngle(), 0.01F);
      assertEquals(0.0F, homeLight1.getElevation(), 0.01F);
      assertFalse(homeLight1.isDoorOrWindow());
      assertFalse(homeLight1.isTexturable());
  }

  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      Light light0 = mock(Light.class, new ViolatedAssumptionAnswer());
      doReturn((LightSource[]) null).when(light0).getLightSources();
      doReturn((Integer) null).when(light0).getColor();
      doReturn((String) null).when(light0).getCurrency();
      doReturn(0.0F).when(light0).getDepth();
      doReturn((String) null).when(light0).getDescription();
      doReturn(0.0F).when(light0).getElevation();
      doReturn(0.0F).when(light0).getHeight();
      doReturn((Content) null).when(light0).getIcon();
      doReturn((Content) null).when(light0).getModel();
      doReturn((float[][]) null).when(light0).getModelRotation();
      doReturn((String) null).when(light0).getName();
      doReturn((Content) null).when(light0).getPlanIcon();
      doReturn((BigDecimal) null).when(light0).getPrice();
      doReturn((String) null).when(light0).getStaircaseCutOutShape();
      doReturn((BigDecimal) null).when(light0).getValueAddedTaxPercentage();
      doReturn(0.0F).when(light0).getWidth();
      doReturn(false).when(light0).isBackFaceShown();
      doReturn(false).when(light0).isDeformable();
      doReturn(false).when(light0).isDoorOrWindow();
      doReturn(false).when(light0).isMovable();
      doReturn(false).when(light0).isResizable();
      doReturn(false).when(light0).isTexturable();
      HomeLight homeLight0 = new HomeLight(light0);
      assertNotNull(homeLight0);
      assertNull(homeLight0.getColor());
      assertFalse(homeLight0.isModelMirrored());
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertFalse(homeLight0.isTexturable());
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertTrue(homeLight0.isVisible());
      assertNull(homeLight0.getCurrency());
      assertFalse(homeLight0.isMovable());
      assertFalse(homeLight0.isDeformable());
      assertFalse(homeLight0.isResizable());
      assertNull(homeLight0.getCatalogId());
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertNull(homeLight0.getShininess());
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertNull(homeLight0.getDescription());
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertFalse(homeLight0.isBackFaceShown());
      assertFalse(homeLight0.isNameVisible());
      assertNull(homeLight0.getName());
      
      homeLight0.setElevation((-1.0F));
      assertNull(homeLight0.getColor());
      assertFalse(homeLight0.isModelMirrored());
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertEquals((-1.0F), homeLight0.getGroundElevation(), 0.01F);
      assertFalse(homeLight0.isTexturable());
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertTrue(homeLight0.isVisible());
      assertNull(homeLight0.getCurrency());
      assertFalse(homeLight0.isMovable());
      assertFalse(homeLight0.isDeformable());
      assertFalse(homeLight0.isResizable());
      assertNull(homeLight0.getCatalogId());
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertNull(homeLight0.getShininess());
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertNull(homeLight0.getDescription());
      assertEquals((-1.0F), homeLight0.getElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertFalse(homeLight0.isBackFaceShown());
      assertFalse(homeLight0.isNameVisible());
      assertNull(homeLight0.getName());
      
      homeLight0.setNameAngle((-1.0F));
      assertNull(homeLight0.getColor());
      assertFalse(homeLight0.isModelMirrored());
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertEquals((-1.0F), homeLight0.getGroundElevation(), 0.01F);
      assertFalse(homeLight0.isTexturable());
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertEquals(5.2831855F, homeLight0.getNameAngle(), 0.01F);
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertTrue(homeLight0.isVisible());
      assertNull(homeLight0.getCurrency());
      assertFalse(homeLight0.isMovable());
      assertFalse(homeLight0.isDeformable());
      assertFalse(homeLight0.isResizable());
      assertNull(homeLight0.getCatalogId());
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertNull(homeLight0.getShininess());
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertNull(homeLight0.getDescription());
      assertEquals((-1.0F), homeLight0.getElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertFalse(homeLight0.isBackFaceShown());
      assertFalse(homeLight0.isNameVisible());
      assertNull(homeLight0.getName());
  }

  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      LightSource[] lightSourceArray0 = new LightSource[2];
      URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      URL uRL0 = MockURL.URL("s<7]@ykxs+ 0`a ", (String) null, (-1667), "", uRLStreamHandler0);
      assertNotNull(uRL0);
      assertEquals("s<7]@ykxs+ 0`a ", uRL0.getProtocol());
      assertEquals(0, uRL0.getDefaultPort());
      assertNull(uRL0.toString());
      assertEquals("", uRL0.getPath());
      assertNull(uRL0.getUserInfo());
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getHost());
      assertNull(uRL0.getQuery());
      assertEquals("", uRL0.getFile());
      assertNull(uRL0.getRef());
      assertNull(uRL0.getAuthority());
      assertNull(uRL0.toExternalForm());
      
      TemporaryURLContent temporaryURLContent0 = new TemporaryURLContent(uRL0);
      assertNotNull(temporaryURLContent0);
      assertEquals("s<7]@ykxs+ 0`a ", uRL0.getProtocol());
      assertEquals(0, uRL0.getDefaultPort());
      assertNull(uRL0.toString());
      assertEquals("", uRL0.getPath());
      assertNull(uRL0.getUserInfo());
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getHost());
      assertNull(uRL0.getQuery());
      assertEquals("", uRL0.getFile());
      assertNull(uRL0.getRef());
      assertNull(uRL0.getAuthority());
      assertNull(uRL0.toExternalForm());
      assertFalse(temporaryURLContent0.isJAREntry());
      
      BigDecimal bigDecimal0 = BigDecimal.TEN;
      assertNotNull(bigDecimal0);
      assertEquals((byte)10, bigDecimal0.byteValue());
      assertEquals((short)10, bigDecimal0.shortValue());
      
      CatalogLight catalogLight0 = new CatalogLight("\"<xp|JAv^\"<^Qh{/~", "s<7]@ykxs+ 0`a ", "s<7]@ykxs+ 0`a ", temporaryURLContent0, temporaryURLContent0, temporaryURLContent0, (-611.6462F), 1.7441415F, 0.5F, (-897.795F), true, lightSourceArray0, "", (float[][]) null, "P'HZa~G", true, true, true, bigDecimal0, bigDecimal0, "");
      assertEquals(2, lightSourceArray0.length);
      assertNotNull(catalogLight0);
      assertEquals("s<7]@ykxs+ 0`a ", uRL0.getProtocol());
      assertEquals(0, uRL0.getDefaultPort());
      assertNull(uRL0.toString());
      assertEquals("", uRL0.getPath());
      assertNull(uRL0.getUserInfo());
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getHost());
      assertNull(uRL0.getQuery());
      assertEquals("", uRL0.getFile());
      assertNull(uRL0.getRef());
      assertNull(uRL0.getAuthority());
      assertNull(uRL0.toExternalForm());
      assertFalse(temporaryURLContent0.isJAREntry());
      assertEquals((byte)10, bigDecimal0.byteValue());
      assertEquals((short)10, bigDecimal0.shortValue());
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertEquals(1.7441415F, catalogLight0.getDepth(), 0.01F);
      assertEquals("\"<xp|JAv^\"<^Qh{/~", catalogLight0.getId());
      assertFalse(catalogLight0.isDoorOrWindow());
      assertEquals((-611.6462F), catalogLight0.getWidth(), 0.01F);
      assertNull(catalogLight0.getColor());
      assertFalse(catalogLight0.isModifiable());
      assertNull(catalogLight0.getGrade());
      assertEquals("", catalogLight0.getStaircaseCutOutShape());
      assertTrue(catalogLight0.isTexturable());
      assertTrue(catalogLight0.isProportional());
      assertEquals(0.5F, catalogLight0.getHeight(), 0.01F);
      assertEquals((-897.795F), catalogLight0.getElevation(), 0.01F);
      assertFalse(catalogLight0.isBackFaceShown());
      assertEquals("s<7]@ykxs+ 0`a ", catalogLight0.getDescription());
      assertNull(catalogLight0.getInformation());
      assertEquals("P'HZa~G", catalogLight0.getCreator());
      assertTrue(catalogLight0.isResizable());
      assertTrue(catalogLight0.isMovable());
      assertTrue(catalogLight0.isDeformable());
      assertNull(catalogLight0.getCreationDate());
      assertEquals("s<7]@ykxs+ 0`a ", catalogLight0.getName());
      assertEquals("", catalogLight0.getCurrency());
      
      HomeLight homeLight0 = new HomeLight(catalogLight0);
      assertEquals(2, lightSourceArray0.length);
      assertNotNull(homeLight0);
      assertEquals("s<7]@ykxs+ 0`a ", uRL0.getProtocol());
      assertEquals(0, uRL0.getDefaultPort());
      assertNull(uRL0.toString());
      assertEquals("", uRL0.getPath());
      assertNull(uRL0.getUserInfo());
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getHost());
      assertNull(uRL0.getQuery());
      assertEquals("", uRL0.getFile());
      assertNull(uRL0.getRef());
      assertNull(uRL0.getAuthority());
      assertNull(uRL0.toExternalForm());
      assertFalse(temporaryURLContent0.isJAREntry());
      assertEquals((byte)10, bigDecimal0.byteValue());
      assertEquals((short)10, bigDecimal0.shortValue());
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertEquals(1.7441415F, catalogLight0.getDepth(), 0.01F);
      assertEquals("\"<xp|JAv^\"<^Qh{/~", catalogLight0.getId());
      assertFalse(catalogLight0.isDoorOrWindow());
      assertEquals((-611.6462F), catalogLight0.getWidth(), 0.01F);
      assertNull(catalogLight0.getColor());
      assertFalse(catalogLight0.isModifiable());
      assertNull(catalogLight0.getGrade());
      assertEquals("", catalogLight0.getStaircaseCutOutShape());
      assertTrue(catalogLight0.isTexturable());
      assertTrue(catalogLight0.isProportional());
      assertEquals(0.5F, catalogLight0.getHeight(), 0.01F);
      assertEquals((-897.795F), catalogLight0.getElevation(), 0.01F);
      assertFalse(catalogLight0.isBackFaceShown());
      assertEquals("s<7]@ykxs+ 0`a ", catalogLight0.getDescription());
      assertNull(catalogLight0.getInformation());
      assertEquals("P'HZa~G", catalogLight0.getCreator());
      assertTrue(catalogLight0.isResizable());
      assertTrue(catalogLight0.isMovable());
      assertTrue(catalogLight0.isDeformable());
      assertNull(catalogLight0.getCreationDate());
      assertEquals("s<7]@ykxs+ 0`a ", catalogLight0.getName());
      assertEquals("", catalogLight0.getCurrency());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertEquals(1.7441415F, homeLight0.getDepth(), 0.01F);
      assertEquals((-305.8231F), homeLight0.getX(), 0.01F);
      assertTrue(homeLight0.isTexturable());
      assertNull(homeLight0.getColor());
      assertFalse(homeLight0.isDoorOrWindow());
      assertFalse(homeLight0.isNameVisible());
      assertEquals((-611.6462F), homeLight0.getWidth(), 0.01F);
      assertFalse(homeLight0.isModelMirrored());
      assertFalse(homeLight0.isBackFaceShown());
      assertEquals(0.5F, homeLight0.getHeight(), 0.01F);
      assertEquals("s<7]@ykxs+ 0`a ", homeLight0.getName());
      assertEquals("s<7]@ykxs+ 0`a ", homeLight0.getDescription());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertEquals(0.8720707F, homeLight0.getY(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals("", homeLight0.getCurrency());
      assertEquals((-897.795F), homeLight0.getGroundElevation(), 0.01F);
      assertTrue(homeLight0.isDeformable());
      assertEquals("\"<xp|JAv^\"<^Qh{/~", homeLight0.getCatalogId());
      assertTrue(homeLight0.isMovable());
      assertTrue(homeLight0.isResizable());
      assertTrue(homeLight0.isVisible());
      assertNull(homeLight0.getShininess());
      assertEquals("", homeLight0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertEquals((-897.795F), homeLight0.getElevation(), 0.01F);
      
      HomeLight homeLight1 = homeLight0.clone();
      assertEquals(2, lightSourceArray0.length);
      assertNotNull(homeLight1);
      assertNotSame(homeLight0, homeLight1);
      assertNotSame(homeLight1, homeLight0);
      assertFalse(homeLight1.equals((Object)homeLight0));
      assertEquals("s<7]@ykxs+ 0`a ", uRL0.getProtocol());
      assertEquals(0, uRL0.getDefaultPort());
      assertNull(uRL0.toString());
      assertEquals("", uRL0.getPath());
      assertNull(uRL0.getUserInfo());
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getHost());
      assertNull(uRL0.getQuery());
      assertEquals("", uRL0.getFile());
      assertNull(uRL0.getRef());
      assertNull(uRL0.getAuthority());
      assertNull(uRL0.toExternalForm());
      assertFalse(temporaryURLContent0.isJAREntry());
      assertEquals((byte)10, bigDecimal0.byteValue());
      assertEquals((short)10, bigDecimal0.shortValue());
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertEquals(1.7441415F, catalogLight0.getDepth(), 0.01F);
      assertEquals("\"<xp|JAv^\"<^Qh{/~", catalogLight0.getId());
      assertFalse(catalogLight0.isDoorOrWindow());
      assertEquals((-611.6462F), catalogLight0.getWidth(), 0.01F);
      assertNull(catalogLight0.getColor());
      assertFalse(catalogLight0.isModifiable());
      assertNull(catalogLight0.getGrade());
      assertEquals("", catalogLight0.getStaircaseCutOutShape());
      assertTrue(catalogLight0.isTexturable());
      assertTrue(catalogLight0.isProportional());
      assertEquals(0.5F, catalogLight0.getHeight(), 0.01F);
      assertEquals((-897.795F), catalogLight0.getElevation(), 0.01F);
      assertFalse(catalogLight0.isBackFaceShown());
      assertEquals("s<7]@ykxs+ 0`a ", catalogLight0.getDescription());
      assertNull(catalogLight0.getInformation());
      assertEquals("P'HZa~G", catalogLight0.getCreator());
      assertTrue(catalogLight0.isResizable());
      assertTrue(catalogLight0.isMovable());
      assertTrue(catalogLight0.isDeformable());
      assertNull(catalogLight0.getCreationDate());
      assertEquals("s<7]@ykxs+ 0`a ", catalogLight0.getName());
      assertEquals("", catalogLight0.getCurrency());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertEquals(1.7441415F, homeLight0.getDepth(), 0.01F);
      assertEquals((-305.8231F), homeLight0.getX(), 0.01F);
      assertTrue(homeLight0.isTexturable());
      assertNull(homeLight0.getColor());
      assertFalse(homeLight0.isDoorOrWindow());
      assertFalse(homeLight0.isNameVisible());
      assertEquals((-611.6462F), homeLight0.getWidth(), 0.01F);
      assertFalse(homeLight0.isModelMirrored());
      assertFalse(homeLight0.isBackFaceShown());
      assertEquals(0.5F, homeLight0.getHeight(), 0.01F);
      assertEquals("s<7]@ykxs+ 0`a ", homeLight0.getName());
      assertEquals("s<7]@ykxs+ 0`a ", homeLight0.getDescription());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertEquals(0.8720707F, homeLight0.getY(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals("", homeLight0.getCurrency());
      assertEquals((-897.795F), homeLight0.getGroundElevation(), 0.01F);
      assertTrue(homeLight0.isDeformable());
      assertEquals("\"<xp|JAv^\"<^Qh{/~", homeLight0.getCatalogId());
      assertTrue(homeLight0.isMovable());
      assertTrue(homeLight0.isResizable());
      assertTrue(homeLight0.isVisible());
      assertNull(homeLight0.getShininess());
      assertEquals("", homeLight0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertEquals((-897.795F), homeLight0.getElevation(), 0.01F);
      assertEquals("s<7]@ykxs+ 0`a ", homeLight1.getDescription());
      assertNull(homeLight1.getShininess());
      assertTrue(homeLight1.isMovable());
      assertEquals("\"<xp|JAv^\"<^Qh{/~", homeLight1.getCatalogId());
      assertEquals(0.5F, homeLight1.getPower(), 0.01F);
      assertEquals("s<7]@ykxs+ 0`a ", homeLight1.getName());
      assertEquals(0.5F, homeLight1.getHeight(), 0.01F);
      assertEquals(0.8720707F, homeLight1.getY(), 0.01F);
      assertEquals(0.0F, homeLight1.getNameYOffset(), 0.01F);
      assertEquals((-611.6462F), homeLight1.getWidth(), 0.01F);
      assertNull(homeLight1.getColor());
      assertEquals(1.7441415F, homeLight1.getDepth(), 0.01F);
      assertEquals((-305.8231F), homeLight1.getX(), 0.01F);
      assertFalse(homeLight1.isDoorOrWindow());
      assertTrue(homeLight1.isTexturable());
      assertFalse(homeLight1.isModelMirrored());
      assertEquals((-897.795F), homeLight1.getElevation(), 0.01F);
      assertFalse(homeLight1.isBackFaceShown());
      assertFalse(homeLight1.isNameVisible());
      assertEquals(0.0F, homeLight1.getAngle(), 0.01F);
      assertEquals("", homeLight1.getCurrency());
      assertEquals((-897.795F), homeLight1.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight1.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeLight1.getNameAngle(), 0.01F);
      assertEquals("", homeLight1.getStaircaseCutOutShape());
      assertTrue(homeLight1.isVisible());
      assertTrue(homeLight1.isDeformable());
      assertTrue(homeLight1.isResizable());
      
      HomeLight homeLight2 = homeLight0.clone();
      assertEquals(2, lightSourceArray0.length);
      assertNotNull(homeLight2);
      assertNotSame(homeLight0, homeLight1);
      assertNotSame(homeLight0, homeLight2);
      assertNotSame(homeLight2, homeLight1);
      assertNotSame(homeLight2, homeLight0);
      assertFalse(homeLight0.equals((Object)homeLight1));
      assertFalse(homeLight2.equals((Object)homeLight1));
      assertFalse(homeLight2.equals((Object)homeLight0));
      assertEquals("s<7]@ykxs+ 0`a ", uRL0.getProtocol());
      assertEquals(0, uRL0.getDefaultPort());
      assertNull(uRL0.toString());
      assertEquals("", uRL0.getPath());
      assertNull(uRL0.getUserInfo());
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getHost());
      assertNull(uRL0.getQuery());
      assertEquals("", uRL0.getFile());
      assertNull(uRL0.getRef());
      assertNull(uRL0.getAuthority());
      assertNull(uRL0.toExternalForm());
      assertFalse(temporaryURLContent0.isJAREntry());
      assertEquals((byte)10, bigDecimal0.byteValue());
      assertEquals((short)10, bigDecimal0.shortValue());
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertEquals(1.7441415F, catalogLight0.getDepth(), 0.01F);
      assertEquals("\"<xp|JAv^\"<^Qh{/~", catalogLight0.getId());
      assertFalse(catalogLight0.isDoorOrWindow());
      assertEquals((-611.6462F), catalogLight0.getWidth(), 0.01F);
      assertNull(catalogLight0.getColor());
      assertFalse(catalogLight0.isModifiable());
      assertNull(catalogLight0.getGrade());
      assertEquals("", catalogLight0.getStaircaseCutOutShape());
      assertTrue(catalogLight0.isTexturable());
      assertTrue(catalogLight0.isProportional());
      assertEquals(0.5F, catalogLight0.getHeight(), 0.01F);
      assertEquals((-897.795F), catalogLight0.getElevation(), 0.01F);
      assertFalse(catalogLight0.isBackFaceShown());
      assertEquals("s<7]@ykxs+ 0`a ", catalogLight0.getDescription());
      assertNull(catalogLight0.getInformation());
      assertEquals("P'HZa~G", catalogLight0.getCreator());
      assertTrue(catalogLight0.isResizable());
      assertTrue(catalogLight0.isMovable());
      assertTrue(catalogLight0.isDeformable());
      assertNull(catalogLight0.getCreationDate());
      assertEquals("s<7]@ykxs+ 0`a ", catalogLight0.getName());
      assertEquals("", catalogLight0.getCurrency());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertEquals(1.7441415F, homeLight0.getDepth(), 0.01F);
      assertEquals((-305.8231F), homeLight0.getX(), 0.01F);
      assertTrue(homeLight0.isTexturable());
      assertNull(homeLight0.getColor());
      assertFalse(homeLight0.isDoorOrWindow());
      assertFalse(homeLight0.isNameVisible());
      assertEquals((-611.6462F), homeLight0.getWidth(), 0.01F);
      assertFalse(homeLight0.isModelMirrored());
      assertFalse(homeLight0.isBackFaceShown());
      assertEquals(0.5F, homeLight0.getHeight(), 0.01F);
      assertEquals("s<7]@ykxs+ 0`a ", homeLight0.getName());
      assertEquals("s<7]@ykxs+ 0`a ", homeLight0.getDescription());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertEquals(0.8720707F, homeLight0.getY(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals("", homeLight0.getCurrency());
      assertEquals((-897.795F), homeLight0.getGroundElevation(), 0.01F);
      assertTrue(homeLight0.isDeformable());
      assertEquals("\"<xp|JAv^\"<^Qh{/~", homeLight0.getCatalogId());
      assertTrue(homeLight0.isMovable());
      assertTrue(homeLight0.isResizable());
      assertTrue(homeLight0.isVisible());
      assertNull(homeLight0.getShininess());
      assertEquals("", homeLight0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertEquals((-897.795F), homeLight0.getElevation(), 0.01F);
      assertNull(homeLight2.getShininess());
      assertTrue(homeLight2.isMovable());
      assertTrue(homeLight2.isResizable());
      assertEquals("\"<xp|JAv^\"<^Qh{/~", homeLight2.getCatalogId());
      assertEquals("s<7]@ykxs+ 0`a ", homeLight2.getName());
      assertEquals("", homeLight2.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight2.getNameAngle(), 0.01F);
      assertEquals(0.0F, homeLight2.getNameXOffset(), 0.01F);
      assertEquals("s<7]@ykxs+ 0`a ", homeLight2.getDescription());
      assertEquals(0.0F, homeLight2.getNameYOffset(), 0.01F);
      assertTrue(homeLight2.isDeformable());
      assertTrue(homeLight2.isVisible());
      assertEquals(0.8720707F, homeLight2.getY(), 0.01F);
      assertEquals("", homeLight2.getCurrency());
      assertEquals(0.5F, homeLight2.getPower(), 0.01F);
      assertEquals(0.5F, homeLight2.getHeight(), 0.01F);
      assertEquals((-897.795F), homeLight2.getGroundElevation(), 0.01F);
      assertEquals((-305.8231F), homeLight2.getX(), 0.01F);
      assertEquals((-897.795F), homeLight2.getElevation(), 0.01F);
      assertFalse(homeLight2.isBackFaceShown());
      assertTrue(homeLight2.isTexturable());
      assertFalse(homeLight2.isModelMirrored());
      assertFalse(homeLight2.isDoorOrWindow());
      assertEquals(1.7441415F, homeLight2.getDepth(), 0.01F);
      assertNull(homeLight2.getColor());
      assertEquals((-611.6462F), homeLight2.getWidth(), 0.01F);
      assertEquals(0.0F, homeLight2.getAngle(), 0.01F);
      assertFalse(homeLight2.isNameVisible());
      
      BigDecimal bigDecimal1 = homeLight2.getValueAddedTax();
      assertEquals(2, lightSourceArray0.length);
      assertNotNull(bigDecimal1);
      assertNotSame(bigDecimal0, bigDecimal1);
      assertNotSame(homeLight0, homeLight1);
      assertNotSame(homeLight0, homeLight2);
      assertNotSame(homeLight2, homeLight1);
      assertNotSame(homeLight2, homeLight0);
      assertNotSame(bigDecimal1, bigDecimal0);
      assertFalse(homeLight0.equals((Object)homeLight1));
      assertFalse(homeLight0.equals((Object)homeLight2));
      assertFalse(homeLight2.equals((Object)homeLight1));
      assertFalse(homeLight2.equals((Object)homeLight0));
      assertFalse(bigDecimal1.equals((Object)bigDecimal0));
      assertEquals("s<7]@ykxs+ 0`a ", uRL0.getProtocol());
      assertEquals(0, uRL0.getDefaultPort());
      assertNull(uRL0.toString());
      assertEquals("", uRL0.getPath());
      assertNull(uRL0.getUserInfo());
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getHost());
      assertNull(uRL0.getQuery());
      assertEquals("", uRL0.getFile());
      assertNull(uRL0.getRef());
      assertNull(uRL0.getAuthority());
      assertNull(uRL0.toExternalForm());
      assertFalse(temporaryURLContent0.isJAREntry());
      assertEquals((byte)10, bigDecimal0.byteValue());
      assertEquals((short)10, bigDecimal0.shortValue());
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertEquals(1.7441415F, catalogLight0.getDepth(), 0.01F);
      assertEquals("\"<xp|JAv^\"<^Qh{/~", catalogLight0.getId());
      assertFalse(catalogLight0.isDoorOrWindow());
      assertEquals((-611.6462F), catalogLight0.getWidth(), 0.01F);
      assertNull(catalogLight0.getColor());
      assertFalse(catalogLight0.isModifiable());
      assertNull(catalogLight0.getGrade());
      assertEquals("", catalogLight0.getStaircaseCutOutShape());
      assertTrue(catalogLight0.isTexturable());
      assertTrue(catalogLight0.isProportional());
      assertEquals(0.5F, catalogLight0.getHeight(), 0.01F);
      assertEquals((-897.795F), catalogLight0.getElevation(), 0.01F);
      assertFalse(catalogLight0.isBackFaceShown());
      assertEquals("s<7]@ykxs+ 0`a ", catalogLight0.getDescription());
      assertNull(catalogLight0.getInformation());
      assertEquals("P'HZa~G", catalogLight0.getCreator());
      assertTrue(catalogLight0.isResizable());
      assertTrue(catalogLight0.isMovable());
      assertTrue(catalogLight0.isDeformable());
      assertNull(catalogLight0.getCreationDate());
      assertEquals("s<7]@ykxs+ 0`a ", catalogLight0.getName());
      assertEquals("", catalogLight0.getCurrency());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertEquals(1.7441415F, homeLight0.getDepth(), 0.01F);
      assertEquals((-305.8231F), homeLight0.getX(), 0.01F);
      assertTrue(homeLight0.isTexturable());
      assertNull(homeLight0.getColor());
      assertFalse(homeLight0.isDoorOrWindow());
      assertFalse(homeLight0.isNameVisible());
      assertEquals((-611.6462F), homeLight0.getWidth(), 0.01F);
      assertFalse(homeLight0.isModelMirrored());
      assertFalse(homeLight0.isBackFaceShown());
      assertEquals(0.5F, homeLight0.getHeight(), 0.01F);
      assertEquals("s<7]@ykxs+ 0`a ", homeLight0.getName());
      assertEquals("s<7]@ykxs+ 0`a ", homeLight0.getDescription());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertEquals(0.8720707F, homeLight0.getY(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals("", homeLight0.getCurrency());
      assertEquals((-897.795F), homeLight0.getGroundElevation(), 0.01F);
      assertTrue(homeLight0.isDeformable());
      assertEquals("\"<xp|JAv^\"<^Qh{/~", homeLight0.getCatalogId());
      assertTrue(homeLight0.isMovable());
      assertTrue(homeLight0.isResizable());
      assertTrue(homeLight0.isVisible());
      assertNull(homeLight0.getShininess());
      assertEquals("", homeLight0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertEquals((-897.795F), homeLight0.getElevation(), 0.01F);
      assertNull(homeLight2.getShininess());
      assertTrue(homeLight2.isMovable());
      assertTrue(homeLight2.isResizable());
      assertEquals("\"<xp|JAv^\"<^Qh{/~", homeLight2.getCatalogId());
      assertEquals("s<7]@ykxs+ 0`a ", homeLight2.getName());
      assertEquals("", homeLight2.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight2.getNameAngle(), 0.01F);
      assertEquals(0.0F, homeLight2.getNameXOffset(), 0.01F);
      assertEquals("s<7]@ykxs+ 0`a ", homeLight2.getDescription());
      assertEquals(0.0F, homeLight2.getNameYOffset(), 0.01F);
      assertTrue(homeLight2.isDeformable());
      assertTrue(homeLight2.isVisible());
      assertEquals(0.8720707F, homeLight2.getY(), 0.01F);
      assertEquals("", homeLight2.getCurrency());
      assertEquals(0.5F, homeLight2.getPower(), 0.01F);
      assertEquals(0.5F, homeLight2.getHeight(), 0.01F);
      assertEquals((-897.795F), homeLight2.getGroundElevation(), 0.01F);
      assertEquals((-305.8231F), homeLight2.getX(), 0.01F);
      assertEquals((-897.795F), homeLight2.getElevation(), 0.01F);
      assertFalse(homeLight2.isBackFaceShown());
      assertTrue(homeLight2.isTexturable());
      assertFalse(homeLight2.isModelMirrored());
      assertFalse(homeLight2.isDoorOrWindow());
      assertEquals(1.7441415F, homeLight2.getDepth(), 0.01F);
      assertNull(homeLight2.getColor());
      assertEquals((-611.6462F), homeLight2.getWidth(), 0.01F);
      assertEquals(0.0F, homeLight2.getAngle(), 0.01F);
      assertFalse(homeLight2.isNameVisible());
      assertEquals((byte)100, bigDecimal1.byteValue());
      assertEquals((short)100, bigDecimal1.shortValue());
      
      boolean boolean0 = homeLight1.isBackFaceShown();
      assertEquals(2, lightSourceArray0.length);
      assertNotSame(bigDecimal0, bigDecimal1);
      assertNotSame(homeLight0, homeLight1);
      assertNotSame(homeLight0, homeLight2);
      assertNotSame(homeLight1, homeLight2);
      assertNotSame(homeLight1, homeLight0);
      assertFalse(bigDecimal0.equals((Object)bigDecimal1));
      assertFalse(homeLight0.equals((Object)homeLight1));
      assertFalse(homeLight0.equals((Object)homeLight2));
      assertFalse(homeLight1.equals((Object)homeLight2));
      assertFalse(homeLight1.equals((Object)homeLight0));
      assertFalse(boolean0);
      assertEquals("s<7]@ykxs+ 0`a ", uRL0.getProtocol());
      assertEquals(0, uRL0.getDefaultPort());
      assertNull(uRL0.toString());
      assertEquals("", uRL0.getPath());
      assertNull(uRL0.getUserInfo());
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getHost());
      assertNull(uRL0.getQuery());
      assertEquals("", uRL0.getFile());
      assertNull(uRL0.getRef());
      assertNull(uRL0.getAuthority());
      assertNull(uRL0.toExternalForm());
      assertFalse(temporaryURLContent0.isJAREntry());
      assertEquals((byte)10, bigDecimal0.byteValue());
      assertEquals((short)10, bigDecimal0.shortValue());
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertEquals(1.7441415F, catalogLight0.getDepth(), 0.01F);
      assertEquals("\"<xp|JAv^\"<^Qh{/~", catalogLight0.getId());
      assertFalse(catalogLight0.isDoorOrWindow());
      assertEquals((-611.6462F), catalogLight0.getWidth(), 0.01F);
      assertNull(catalogLight0.getColor());
      assertFalse(catalogLight0.isModifiable());
      assertNull(catalogLight0.getGrade());
      assertEquals("", catalogLight0.getStaircaseCutOutShape());
      assertTrue(catalogLight0.isTexturable());
      assertTrue(catalogLight0.isProportional());
      assertEquals(0.5F, catalogLight0.getHeight(), 0.01F);
      assertEquals((-897.795F), catalogLight0.getElevation(), 0.01F);
      assertFalse(catalogLight0.isBackFaceShown());
      assertEquals("s<7]@ykxs+ 0`a ", catalogLight0.getDescription());
      assertNull(catalogLight0.getInformation());
      assertEquals("P'HZa~G", catalogLight0.getCreator());
      assertTrue(catalogLight0.isResizable());
      assertTrue(catalogLight0.isMovable());
      assertTrue(catalogLight0.isDeformable());
      assertNull(catalogLight0.getCreationDate());
      assertEquals("s<7]@ykxs+ 0`a ", catalogLight0.getName());
      assertEquals("", catalogLight0.getCurrency());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertEquals(1.7441415F, homeLight0.getDepth(), 0.01F);
      assertEquals((-305.8231F), homeLight0.getX(), 0.01F);
      assertTrue(homeLight0.isTexturable());
      assertNull(homeLight0.getColor());
      assertFalse(homeLight0.isDoorOrWindow());
      assertFalse(homeLight0.isNameVisible());
      assertEquals((-611.6462F), homeLight0.getWidth(), 0.01F);
      assertFalse(homeLight0.isModelMirrored());
      assertFalse(homeLight0.isBackFaceShown());
      assertEquals(0.5F, homeLight0.getHeight(), 0.01F);
      assertEquals("s<7]@ykxs+ 0`a ", homeLight0.getName());
      assertEquals("s<7]@ykxs+ 0`a ", homeLight0.getDescription());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertEquals(0.8720707F, homeLight0.getY(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals("", homeLight0.getCurrency());
      assertEquals((-897.795F), homeLight0.getGroundElevation(), 0.01F);
      assertTrue(homeLight0.isDeformable());
      assertEquals("\"<xp|JAv^\"<^Qh{/~", homeLight0.getCatalogId());
      assertTrue(homeLight0.isMovable());
      assertTrue(homeLight0.isResizable());
      assertTrue(homeLight0.isVisible());
      assertNull(homeLight0.getShininess());
      assertEquals("", homeLight0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertEquals((-897.795F), homeLight0.getElevation(), 0.01F);
      assertEquals("s<7]@ykxs+ 0`a ", homeLight1.getDescription());
      assertNull(homeLight1.getShininess());
      assertTrue(homeLight1.isMovable());
      assertEquals("\"<xp|JAv^\"<^Qh{/~", homeLight1.getCatalogId());
      assertEquals(0.5F, homeLight1.getPower(), 0.01F);
      assertEquals("s<7]@ykxs+ 0`a ", homeLight1.getName());
      assertEquals(0.5F, homeLight1.getHeight(), 0.01F);
      assertEquals(0.8720707F, homeLight1.getY(), 0.01F);
      assertEquals(0.0F, homeLight1.getNameYOffset(), 0.01F);
      assertEquals((-611.6462F), homeLight1.getWidth(), 0.01F);
      assertNull(homeLight1.getColor());
      assertEquals(1.7441415F, homeLight1.getDepth(), 0.01F);
      assertEquals((-305.8231F), homeLight1.getX(), 0.01F);
      assertFalse(homeLight1.isDoorOrWindow());
      assertTrue(homeLight1.isTexturable());
      assertFalse(homeLight1.isModelMirrored());
      assertEquals((-897.795F), homeLight1.getElevation(), 0.01F);
      assertFalse(homeLight1.isBackFaceShown());
      assertFalse(homeLight1.isNameVisible());
      assertEquals(0.0F, homeLight1.getAngle(), 0.01F);
      assertEquals("", homeLight1.getCurrency());
      assertEquals((-897.795F), homeLight1.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight1.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeLight1.getNameAngle(), 0.01F);
      assertEquals("", homeLight1.getStaircaseCutOutShape());
      assertTrue(homeLight1.isVisible());
      assertTrue(homeLight1.isDeformable());
      assertTrue(homeLight1.isResizable());
      
      TemporaryURLContent temporaryURLContent1 = (TemporaryURLContent)homeLight2.getIcon();
      assertEquals(2, lightSourceArray0.length);
      assertNotNull(temporaryURLContent1);
      assertSame(temporaryURLContent0, temporaryURLContent1);
      assertNotSame(bigDecimal0, bigDecimal1);
      assertNotSame(homeLight0, homeLight1);
      assertNotSame(homeLight0, homeLight2);
      assertNotSame(homeLight2, homeLight1);
      assertNotSame(homeLight2, homeLight0);
      assertSame(temporaryURLContent1, temporaryURLContent0);
      assertFalse(bigDecimal0.equals((Object)bigDecimal1));
      assertFalse(homeLight0.equals((Object)homeLight1));
      assertFalse(homeLight0.equals((Object)homeLight2));
      assertFalse(homeLight2.equals((Object)homeLight1));
      assertFalse(homeLight2.equals((Object)homeLight0));
      assertEquals("s<7]@ykxs+ 0`a ", uRL0.getProtocol());
      assertEquals(0, uRL0.getDefaultPort());
      assertNull(uRL0.toString());
      assertEquals("", uRL0.getPath());
      assertNull(uRL0.getUserInfo());
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getHost());
      assertNull(uRL0.getQuery());
      assertEquals("", uRL0.getFile());
      assertNull(uRL0.getRef());
      assertNull(uRL0.getAuthority());
      assertNull(uRL0.toExternalForm());
      assertFalse(temporaryURLContent0.isJAREntry());
      assertEquals((byte)10, bigDecimal0.byteValue());
      assertEquals((short)10, bigDecimal0.shortValue());
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertEquals(1.7441415F, catalogLight0.getDepth(), 0.01F);
      assertEquals("\"<xp|JAv^\"<^Qh{/~", catalogLight0.getId());
      assertFalse(catalogLight0.isDoorOrWindow());
      assertEquals((-611.6462F), catalogLight0.getWidth(), 0.01F);
      assertNull(catalogLight0.getColor());
      assertFalse(catalogLight0.isModifiable());
      assertNull(catalogLight0.getGrade());
      assertEquals("", catalogLight0.getStaircaseCutOutShape());
      assertTrue(catalogLight0.isTexturable());
      assertTrue(catalogLight0.isProportional());
      assertEquals(0.5F, catalogLight0.getHeight(), 0.01F);
      assertEquals((-897.795F), catalogLight0.getElevation(), 0.01F);
      assertFalse(catalogLight0.isBackFaceShown());
      assertEquals("s<7]@ykxs+ 0`a ", catalogLight0.getDescription());
      assertNull(catalogLight0.getInformation());
      assertEquals("P'HZa~G", catalogLight0.getCreator());
      assertTrue(catalogLight0.isResizable());
      assertTrue(catalogLight0.isMovable());
      assertTrue(catalogLight0.isDeformable());
      assertNull(catalogLight0.getCreationDate());
      assertEquals("s<7]@ykxs+ 0`a ", catalogLight0.getName());
      assertEquals("", catalogLight0.getCurrency());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertEquals(1.7441415F, homeLight0.getDepth(), 0.01F);
      assertEquals((-305.8231F), homeLight0.getX(), 0.01F);
      assertTrue(homeLight0.isTexturable());
      assertNull(homeLight0.getColor());
      assertFalse(homeLight0.isDoorOrWindow());
      assertFalse(homeLight0.isNameVisible());
      assertEquals((-611.6462F), homeLight0.getWidth(), 0.01F);
      assertFalse(homeLight0.isModelMirrored());
      assertFalse(homeLight0.isBackFaceShown());
      assertEquals(0.5F, homeLight0.getHeight(), 0.01F);
      assertEquals("s<7]@ykxs+ 0`a ", homeLight0.getName());
      assertEquals("s<7]@ykxs+ 0`a ", homeLight0.getDescription());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertEquals(0.8720707F, homeLight0.getY(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals("", homeLight0.getCurrency());
      assertEquals((-897.795F), homeLight0.getGroundElevation(), 0.01F);
      assertTrue(homeLight0.isDeformable());
      assertEquals("\"<xp|JAv^\"<^Qh{/~", homeLight0.getCatalogId());
      assertTrue(homeLight0.isMovable());
      assertTrue(homeLight0.isResizable());
      assertTrue(homeLight0.isVisible());
      assertNull(homeLight0.getShininess());
      assertEquals("", homeLight0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertEquals((-897.795F), homeLight0.getElevation(), 0.01F);
      assertNull(homeLight2.getShininess());
      assertTrue(homeLight2.isMovable());
      assertTrue(homeLight2.isResizable());
      assertEquals("\"<xp|JAv^\"<^Qh{/~", homeLight2.getCatalogId());
      assertEquals("s<7]@ykxs+ 0`a ", homeLight2.getName());
      assertEquals("", homeLight2.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight2.getNameAngle(), 0.01F);
      assertEquals(0.0F, homeLight2.getNameXOffset(), 0.01F);
      assertEquals("s<7]@ykxs+ 0`a ", homeLight2.getDescription());
      assertEquals(0.0F, homeLight2.getNameYOffset(), 0.01F);
      assertTrue(homeLight2.isDeformable());
      assertTrue(homeLight2.isVisible());
      assertEquals(0.8720707F, homeLight2.getY(), 0.01F);
      assertEquals("", homeLight2.getCurrency());
      assertEquals(0.5F, homeLight2.getPower(), 0.01F);
      assertEquals(0.5F, homeLight2.getHeight(), 0.01F);
      assertEquals((-897.795F), homeLight2.getGroundElevation(), 0.01F);
      assertEquals((-305.8231F), homeLight2.getX(), 0.01F);
      assertEquals((-897.795F), homeLight2.getElevation(), 0.01F);
      assertFalse(homeLight2.isBackFaceShown());
      assertTrue(homeLight2.isTexturable());
      assertFalse(homeLight2.isModelMirrored());
      assertFalse(homeLight2.isDoorOrWindow());
      assertEquals(1.7441415F, homeLight2.getDepth(), 0.01F);
      assertNull(homeLight2.getColor());
      assertEquals((-611.6462F), homeLight2.getWidth(), 0.01F);
      assertEquals(0.0F, homeLight2.getAngle(), 0.01F);
      assertFalse(homeLight2.isNameVisible());
      assertFalse(temporaryURLContent1.isJAREntry());
  }

  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      Light light0 = mock(Light.class, new ViolatedAssumptionAnswer());
      doReturn((LightSource[]) null).when(light0).getLightSources();
      doReturn((Integer) null).when(light0).getColor();
      doReturn((String) null).when(light0).getCurrency();
      doReturn(0.0F).when(light0).getDepth();
      doReturn((String) null).when(light0).getDescription();
      doReturn(0.0F).when(light0).getElevation();
      doReturn(0.0F).when(light0).getHeight();
      doReturn((Content) null).when(light0).getIcon();
      doReturn((Content) null).when(light0).getModel();
      doReturn((float[][]) null).when(light0).getModelRotation();
      doReturn((String) null).when(light0).getName();
      doReturn((Content) null).when(light0).getPlanIcon();
      doReturn((BigDecimal) null).when(light0).getPrice();
      doReturn((String) null).when(light0).getStaircaseCutOutShape();
      doReturn((BigDecimal) null).when(light0).getValueAddedTaxPercentage();
      doReturn(0.0F).when(light0).getWidth();
      doReturn(false).when(light0).isBackFaceShown();
      doReturn(false).when(light0).isDeformable();
      doReturn(false).when(light0).isDoorOrWindow();
      doReturn(false).when(light0).isMovable();
      doReturn(false).when(light0).isResizable();
      doReturn(false).when(light0).isTexturable();
      Integer integer0 = Integer.valueOf((-2146099508));
      assertNotNull(integer0);
      assertEquals((-2146099508), (int)integer0);
      
      System.setCurrentTimeMillis((-2146099508));
      HomeLight homeLight0 = new HomeLight(light0);
      assertNotNull(homeLight0);
      assertNull(homeLight0.getDescription());
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertFalse(homeLight0.isTexturable());
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertNull(homeLight0.getCatalogId());
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertFalse(homeLight0.isBackFaceShown());
      assertFalse(homeLight0.isModelMirrored());
      assertFalse(homeLight0.isDoorOrWindow());
      assertFalse(homeLight0.isNameVisible());
      assertNull(homeLight0.getName());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertTrue(homeLight0.isVisible());
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertFalse(homeLight0.isDeformable());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertNull(homeLight0.getColor());
      assertNull(homeLight0.getShininess());
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertFalse(homeLight0.isResizable());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertFalse(homeLight0.isMovable());
      assertNull(homeLight0.getCurrency());
      
      HomeLight homeLight1 = homeLight0.clone();
      assertNotNull(homeLight1);
      assertNotSame(homeLight0, homeLight1);
      assertNotSame(homeLight1, homeLight0);
      assertFalse(homeLight1.equals((Object)homeLight0));
      assertNull(homeLight0.getDescription());
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertFalse(homeLight0.isTexturable());
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertNull(homeLight0.getCatalogId());
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertFalse(homeLight0.isBackFaceShown());
      assertFalse(homeLight0.isModelMirrored());
      assertFalse(homeLight0.isDoorOrWindow());
      assertFalse(homeLight0.isNameVisible());
      assertNull(homeLight0.getName());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertTrue(homeLight0.isVisible());
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertFalse(homeLight0.isDeformable());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertNull(homeLight0.getColor());
      assertNull(homeLight0.getShininess());
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertFalse(homeLight0.isResizable());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertFalse(homeLight0.isMovable());
      assertNull(homeLight0.getCurrency());
      assertTrue(homeLight1.isVisible());
      assertEquals(0.0F, homeLight1.getWidth(), 0.01F);
      assertEquals(0.0F, homeLight1.getNameYOffset(), 0.01F);
      assertFalse(homeLight1.isNameVisible());
      assertFalse(homeLight1.isResizable());
      assertFalse(homeLight1.isDeformable());
      assertFalse(homeLight1.isBackFaceShown());
      assertNull(homeLight1.getShininess());
      assertEquals(0.0F, homeLight1.getX(), 0.01F);
      assertEquals(0.0F, homeLight1.getY(), 0.01F);
      assertEquals(0.0F, homeLight1.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight1.getAngle(), 0.01F);
      assertFalse(homeLight1.isTexturable());
      assertFalse(homeLight1.isDoorOrWindow());
      assertNull(homeLight1.getDescription());
      assertEquals(0.0F, homeLight1.getElevation(), 0.01F);
      assertEquals(0.0F, homeLight1.getNameXOffset(), 0.01F);
      assertNull(homeLight1.getName());
      assertEquals(0.0F, homeLight1.getDepth(), 0.01F);
      assertNull(homeLight1.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight1.getNameAngle(), 0.01F);
      assertFalse(homeLight1.isModelMirrored());
      assertNull(homeLight1.getCatalogId());
      assertNull(homeLight1.getColor());
      assertEquals(0.0F, homeLight1.getHeight(), 0.01F);
      assertEquals(0.5F, homeLight1.getPower(), 0.01F);
      assertFalse(homeLight1.isMovable());
      assertNull(homeLight1.getCurrency());
      
      boolean boolean1 = homeLight0.isTopLeftPointAt((-2146099508), (-1024.0F), (-2146099508));
      assertNotSame(homeLight0, homeLight1);
      assertFalse(homeLight0.equals((Object)homeLight1));
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      assertNull(homeLight0.getDescription());
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertFalse(homeLight0.isTexturable());
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertNull(homeLight0.getCatalogId());
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertFalse(homeLight0.isBackFaceShown());
      assertFalse(homeLight0.isModelMirrored());
      assertFalse(homeLight0.isDoorOrWindow());
      assertFalse(homeLight0.isNameVisible());
      assertNull(homeLight0.getName());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertTrue(homeLight0.isVisible());
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertFalse(homeLight0.isDeformable());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertNull(homeLight0.getColor());
      assertNull(homeLight0.getShininess());
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertFalse(homeLight0.isResizable());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertFalse(homeLight0.isMovable());
      assertNull(homeLight0.getCurrency());
      
      homeLight1.setMovable(false);
      assertNotSame(homeLight0, homeLight1);
      assertNotSame(homeLight1, homeLight0);
      assertFalse(homeLight0.equals((Object)homeLight1));
      assertFalse(homeLight1.equals((Object)homeLight0));
      assertNull(homeLight0.getDescription());
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertFalse(homeLight0.isTexturable());
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertNull(homeLight0.getCatalogId());
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertFalse(homeLight0.isBackFaceShown());
      assertFalse(homeLight0.isModelMirrored());
      assertFalse(homeLight0.isDoorOrWindow());
      assertFalse(homeLight0.isNameVisible());
      assertNull(homeLight0.getName());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertTrue(homeLight0.isVisible());
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertFalse(homeLight0.isDeformable());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertNull(homeLight0.getColor());
      assertNull(homeLight0.getShininess());
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertFalse(homeLight0.isResizable());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertFalse(homeLight0.isMovable());
      assertNull(homeLight0.getCurrency());
      assertTrue(homeLight1.isVisible());
      assertEquals(0.0F, homeLight1.getWidth(), 0.01F);
      assertEquals(0.0F, homeLight1.getNameYOffset(), 0.01F);
      assertFalse(homeLight1.isNameVisible());
      assertFalse(homeLight1.isResizable());
      assertFalse(homeLight1.isDeformable());
      assertFalse(homeLight1.isBackFaceShown());
      assertNull(homeLight1.getShininess());
      assertEquals(0.0F, homeLight1.getX(), 0.01F);
      assertEquals(0.0F, homeLight1.getY(), 0.01F);
      assertEquals(0.0F, homeLight1.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight1.getAngle(), 0.01F);
      assertFalse(homeLight1.isTexturable());
      assertFalse(homeLight1.isDoorOrWindow());
      assertNull(homeLight1.getDescription());
      assertEquals(0.0F, homeLight1.getElevation(), 0.01F);
      assertEquals(0.0F, homeLight1.getNameXOffset(), 0.01F);
      assertNull(homeLight1.getName());
      assertEquals(0.0F, homeLight1.getDepth(), 0.01F);
      assertNull(homeLight1.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight1.getNameAngle(), 0.01F);
      assertFalse(homeLight1.isModelMirrored());
      assertNull(homeLight1.getCatalogId());
      assertNull(homeLight1.getColor());
      assertEquals(0.0F, homeLight1.getHeight(), 0.01F);
      assertEquals(0.5F, homeLight1.getPower(), 0.01F);
      assertFalse(homeLight1.isMovable());
      assertNull(homeLight1.getCurrency());
      
      float[][] floatArray0 = homeLight0.getPoints();
      assertEquals(4, floatArray0.length);
      assertNotNull(floatArray0);
      assertNotSame(homeLight0, homeLight1);
      assertFalse(homeLight0.equals((Object)homeLight1));
      assertNull(homeLight0.getDescription());
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertFalse(homeLight0.isTexturable());
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertNull(homeLight0.getCatalogId());
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertFalse(homeLight0.isBackFaceShown());
      assertFalse(homeLight0.isModelMirrored());
      assertFalse(homeLight0.isDoorOrWindow());
      assertFalse(homeLight0.isNameVisible());
      assertNull(homeLight0.getName());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertTrue(homeLight0.isVisible());
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertFalse(homeLight0.isDeformable());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertNull(homeLight0.getColor());
      assertNull(homeLight0.getShininess());
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertFalse(homeLight0.isResizable());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertFalse(homeLight0.isMovable());
      assertNull(homeLight0.getCurrency());
  }

  @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      Long long0 = new Long(0L);
      assertNotNull(long0);
      assertEquals(0L, (long)long0);
      
      Long long1 = Long.getLong("com.eteks.sweethome3d.model.HomeDoorOrWindow", long0);
      assertNotNull(long1);
      assertEquals(0L, (long)long1);
      
      Float float0 = new Float((double) 0L);
      assertNotNull(float0);
      assertEquals(0.0F, (float)float0, 0.01F);
      
      Sash[] sashArray0 = new Sash[2];
      Sash sash0 = new Sash(991.0187F, 0.0F, (-1666.0F), 0.0F, (-1666.0F));
      assertNotNull(sash0);
      assertEquals(0.0F, sash0.getStartAngle(), 0.01F);
      assertEquals(0.0F, sash0.getYAxis(), 0.01F);
      assertEquals((-1666.0F), sash0.getWidth(), 0.01F);
      assertEquals(991.0187F, sash0.getXAxis(), 0.01F);
      assertEquals((-1666.0F), sash0.getEndAngle(), 0.01F);
      
      sashArray0[0] = sash0;
      Sash sash1 = new Sash(0.0F, 0.0F, 0.0F, (-201.17F), 0.3926991F);
      assertNotNull(sash1);
      assertFalse(sash1.equals((Object)sash0));
      assertEquals(0.0F, sash1.getXAxis(), 0.01F);
      assertEquals(0.0F, sash1.getWidth(), 0.01F);
      assertEquals((-201.17F), sash1.getStartAngle(), 0.01F);
      assertEquals(0.0F, sash1.getYAxis(), 0.01F);
      assertEquals(0.3926991F, sash1.getEndAngle(), 0.01F);
      
      sashArray0[1] = sash1;
      float[][] floatArray0 = new float[4][2];
      float[] floatArray1 = new float[4];
      floatArray1[0] = 0.0F;
      floatArray1[1] = 991.0187F;
      floatArray1[2] = 991.0187F;
      floatArray1[3] = 0.0F;
      floatArray0[0] = floatArray1;
      float[] floatArray2 = new float[3];
      assertFalse(floatArray2.equals((Object)floatArray1));
      
      floatArray2[0] = 991.0187F;
      floatArray2[1] = (-201.17F);
      floatArray2[2] = 0.3926991F;
      floatArray0[1] = floatArray2;
      float[] floatArray3 = new float[9];
      assertFalse(floatArray3.equals((Object)floatArray1));
      assertFalse(floatArray3.equals((Object)floatArray2));
      
      floatArray3[0] = 991.0187F;
      floatArray3[1] = (float) 0L;
      floatArray3[2] = (-201.17F);
      floatArray3[3] = (-1.0F);
      floatArray3[4] = 0.0F;
      floatArray3[5] = 0.0F;
      floatArray3[6] = (-1666.0F);
      floatArray3[7] = (-1666.0F);
      floatArray3[8] = (-1666.0F);
      floatArray0[2] = floatArray3;
      float[] floatArray4 = new float[0];
      assertFalse(floatArray4.equals((Object)floatArray3));
      assertFalse(floatArray4.equals((Object)floatArray1));
      assertFalse(floatArray4.equals((Object)floatArray2));
      
      floatArray0[3] = floatArray4;
      BigInteger bigInteger0 = BigInteger.ZERO;
      assertNotNull(bigInteger0);
      assertEquals((byte)0, bigInteger0.byteValue());
      assertEquals((short)0, bigInteger0.shortValue());
      
      BigDecimal bigDecimal0 = new BigDecimal(bigInteger0);
      assertNotNull(bigDecimal0);
      assertEquals((byte)0, bigInteger0.byteValue());
      assertEquals((short)0, bigInteger0.shortValue());
      assertEquals((byte)0, bigDecimal0.byteValue());
      assertEquals((short)0, bigDecimal0.shortValue());
      
      CatalogDoorOrWindow catalogDoorOrWindow0 = new CatalogDoorOrWindow("com.eteks.sweethome3d.model.TextStyle", "com.eteks.sweethome3d.model.TextStyle", "com.eteks.sweethome3d.model.HomePieceOfFurniture$17", "com.eteks.sweethome3d.model.HomePieceOfFurniture$17", (String[]) null, long1, float0, (Content) null, (Content) null, (Content) null, 0L, 0L, 0.0F, 0.0F, false, (-201.17F), 0L, sashArray0, floatArray0, "2.", true, false, false, bigDecimal0, bigDecimal0, "com.eteks.sweethome3d.model.TextStyle");
      assertEquals(2, sashArray0.length);
      assertEquals(4, floatArray0.length);
      assertNotNull(catalogDoorOrWindow0);
      assertEquals((byte)0, bigInteger0.byteValue());
      assertEquals((short)0, bigInteger0.shortValue());
      assertEquals((byte)0, bigDecimal0.byteValue());
      assertEquals((short)0, bigDecimal0.shortValue());
      assertEquals("com.eteks.sweethome3d.model.TextStyle", catalogDoorOrWindow0.getName());
      assertFalse(catalogDoorOrWindow0.isMovable());
      assertTrue(catalogDoorOrWindow0.isResizable());
      assertNull(catalogDoorOrWindow0.getColor());
      assertEquals("com.eteks.sweethome3d.model.HomePieceOfFurniture$17", catalogDoorOrWindow0.getDescription());
      assertNull(catalogDoorOrWindow0.getStaircaseCutOutShape());
      assertEquals(0.0F, catalogDoorOrWindow0.getGrade(), 0.01F);
      assertEquals(0.0F, catalogDoorOrWindow0.getWidth(), 0.01F);
      assertEquals(0.0F, catalogDoorOrWindow0.getHeight(), 0.01F);
      assertFalse(catalogDoorOrWindow0.isDeformable());
      assertEquals(0.0F, catalogDoorOrWindow0.getElevation(), 0.01F);
      assertEquals(0.0F, catalogDoorOrWindow0.getWallDistance(), 0.01F);
      assertEquals(0.0F, catalogDoorOrWindow0.getDepth(), 0.01F);
      assertFalse(catalogDoorOrWindow0.isBackFaceShown());
      assertEquals("com.eteks.sweethome3d.model.TextStyle", catalogDoorOrWindow0.getCurrency());
      assertEquals("com.eteks.sweethome3d.model.TextStyle", catalogDoorOrWindow0.getId());
      assertFalse(catalogDoorOrWindow0.isTexturable());
      assertTrue(catalogDoorOrWindow0.isProportional());
      assertTrue(catalogDoorOrWindow0.isDoorOrWindow());
      assertEquals(0.3926991F, catalogDoorOrWindow0.getIconYaw(), 0.01F);
      assertEquals("com.eteks.sweethome3d.model.HomePieceOfFurniture$17", catalogDoorOrWindow0.getInformation());
      assertEquals("2.", catalogDoorOrWindow0.getCreator());
      assertFalse(catalogDoorOrWindow0.isModifiable());
      assertEquals(0L, (long)catalogDoorOrWindow0.getCreationDate());
      assertEquals((-201.17F), catalogDoorOrWindow0.getWallThickness(), 0.01F);
      
      float float1 = catalogDoorOrWindow0.getWallThickness();
      assertEquals(2, sashArray0.length);
      assertEquals(4, floatArray0.length);
      assertEquals((-201.17F), float1, 0.01F);
      assertEquals((byte)0, bigInteger0.byteValue());
      assertEquals((short)0, bigInteger0.shortValue());
      assertEquals((byte)0, bigDecimal0.byteValue());
      assertEquals((short)0, bigDecimal0.shortValue());
      assertEquals("com.eteks.sweethome3d.model.TextStyle", catalogDoorOrWindow0.getName());
      assertFalse(catalogDoorOrWindow0.isMovable());
      assertTrue(catalogDoorOrWindow0.isResizable());
      assertNull(catalogDoorOrWindow0.getColor());
      assertEquals("com.eteks.sweethome3d.model.HomePieceOfFurniture$17", catalogDoorOrWindow0.getDescription());
      assertNull(catalogDoorOrWindow0.getStaircaseCutOutShape());
      assertEquals(0.0F, catalogDoorOrWindow0.getGrade(), 0.01F);
      assertEquals(0.0F, catalogDoorOrWindow0.getWidth(), 0.01F);
      assertEquals(0.0F, catalogDoorOrWindow0.getHeight(), 0.01F);
      assertFalse(catalogDoorOrWindow0.isDeformable());
      assertEquals(0.0F, catalogDoorOrWindow0.getElevation(), 0.01F);
      assertEquals(0.0F, catalogDoorOrWindow0.getWallDistance(), 0.01F);
      assertEquals(0.0F, catalogDoorOrWindow0.getDepth(), 0.01F);
      assertFalse(catalogDoorOrWindow0.isBackFaceShown());
      assertEquals("com.eteks.sweethome3d.model.TextStyle", catalogDoorOrWindow0.getCurrency());
      assertEquals("com.eteks.sweethome3d.model.TextStyle", catalogDoorOrWindow0.getId());
      assertFalse(catalogDoorOrWindow0.isTexturable());
      assertTrue(catalogDoorOrWindow0.isProportional());
      assertTrue(catalogDoorOrWindow0.isDoorOrWindow());
      assertEquals(0.3926991F, catalogDoorOrWindow0.getIconYaw(), 0.01F);
      assertEquals("com.eteks.sweethome3d.model.HomePieceOfFurniture$17", catalogDoorOrWindow0.getInformation());
      assertEquals("2.", catalogDoorOrWindow0.getCreator());
      assertFalse(catalogDoorOrWindow0.isModifiable());
      assertEquals(0L, (long)catalogDoorOrWindow0.getCreationDate());
      assertEquals((-201.17F), catalogDoorOrWindow0.getWallThickness(), 0.01F);
      
      CatalogDoorOrWindow catalogDoorOrWindow1 = new CatalogDoorOrWindow("TEXTURE", "java.version", "", (Content) null, (Content) null, (Content) null, 1.0F, 0.5F, 0.5F, 672.42474F, true, 0.0F, (-1.0F), sashArray0, floatArray0, "CRCKF", false, true, false, bigDecimal0, bigDecimal0, "");
      assertEquals(2, sashArray0.length);
      assertEquals(4, floatArray0.length);
      assertNotNull(catalogDoorOrWindow1);
      assertFalse(catalogDoorOrWindow1.equals((Object)catalogDoorOrWindow0));
      assertEquals((byte)0, bigInteger0.byteValue());
      assertEquals((short)0, bigInteger0.shortValue());
      assertEquals((byte)0, bigDecimal0.byteValue());
      assertEquals((short)0, bigDecimal0.shortValue());
      assertEquals(0.5F, catalogDoorOrWindow1.getHeight(), 0.01F);
      assertEquals("", catalogDoorOrWindow1.getDescription());
      assertNull(catalogDoorOrWindow1.getInformation());
      assertTrue(catalogDoorOrWindow1.isDeformable());
      assertNull(catalogDoorOrWindow1.getCreationDate());
      assertEquals(0.5F, catalogDoorOrWindow1.getDepth(), 0.01F);
      assertFalse(catalogDoorOrWindow1.isModifiable());
      assertEquals("java.version", catalogDoorOrWindow1.getName());
      assertFalse(catalogDoorOrWindow1.isBackFaceShown());
      assertEquals((-1.0F), catalogDoorOrWindow1.getWallDistance(), 0.01F);
      assertEquals(672.42474F, catalogDoorOrWindow1.getElevation(), 0.01F);
      assertEquals("TEXTURE", catalogDoorOrWindow1.getId());
      assertNull(catalogDoorOrWindow1.getGrade());
      assertEquals(0.3926991F, catalogDoorOrWindow1.getIconYaw(), 0.01F);
      assertEquals("", catalogDoorOrWindow1.getCurrency());
      assertTrue(catalogDoorOrWindow1.isProportional());
      assertFalse(catalogDoorOrWindow1.isTexturable());
      assertEquals("CRCKF", catalogDoorOrWindow1.getCreator());
      assertEquals(1.0F, catalogDoorOrWindow1.getWidth(), 0.01F);
      assertTrue(catalogDoorOrWindow1.isDoorOrWindow());
      assertNull(catalogDoorOrWindow1.getColor());
      assertEquals(0.0F, catalogDoorOrWindow1.getWallThickness(), 0.01F);
      assertNull(catalogDoorOrWindow1.getStaircaseCutOutShape());
      assertTrue(catalogDoorOrWindow1.isMovable());
      assertFalse(catalogDoorOrWindow1.isResizable());
      
      float float2 = catalogDoorOrWindow1.getWallDistance();
      assertEquals(2, sashArray0.length);
      assertEquals(4, floatArray0.length);
      assertNotSame(catalogDoorOrWindow1, catalogDoorOrWindow0);
      assertFalse(catalogDoorOrWindow1.equals((Object)catalogDoorOrWindow0));
      assertNotEquals(float2, float1, 0.01F);
      assertEquals((-1.0F), float2, 0.01F);
      assertEquals((byte)0, bigInteger0.byteValue());
      assertEquals((short)0, bigInteger0.shortValue());
      assertEquals((byte)0, bigDecimal0.byteValue());
      assertEquals((short)0, bigDecimal0.shortValue());
      assertEquals(0.5F, catalogDoorOrWindow1.getHeight(), 0.01F);
      assertEquals("", catalogDoorOrWindow1.getDescription());
      assertNull(catalogDoorOrWindow1.getInformation());
      assertTrue(catalogDoorOrWindow1.isDeformable());
      assertNull(catalogDoorOrWindow1.getCreationDate());
      assertEquals(0.5F, catalogDoorOrWindow1.getDepth(), 0.01F);
      assertFalse(catalogDoorOrWindow1.isModifiable());
      assertEquals("java.version", catalogDoorOrWindow1.getName());
      assertFalse(catalogDoorOrWindow1.isBackFaceShown());
      assertEquals((-1.0F), catalogDoorOrWindow1.getWallDistance(), 0.01F);
      assertEquals(672.42474F, catalogDoorOrWindow1.getElevation(), 0.01F);
      assertEquals("TEXTURE", catalogDoorOrWindow1.getId());
      assertNull(catalogDoorOrWindow1.getGrade());
      assertEquals(0.3926991F, catalogDoorOrWindow1.getIconYaw(), 0.01F);
      assertEquals("", catalogDoorOrWindow1.getCurrency());
      assertTrue(catalogDoorOrWindow1.isProportional());
      assertFalse(catalogDoorOrWindow1.isTexturable());
      assertEquals("CRCKF", catalogDoorOrWindow1.getCreator());
      assertEquals(1.0F, catalogDoorOrWindow1.getWidth(), 0.01F);
      assertTrue(catalogDoorOrWindow1.isDoorOrWindow());
      assertNull(catalogDoorOrWindow1.getColor());
      assertEquals(0.0F, catalogDoorOrWindow1.getWallThickness(), 0.01F);
      assertNull(catalogDoorOrWindow1.getStaircaseCutOutShape());
      assertTrue(catalogDoorOrWindow1.isMovable());
      assertFalse(catalogDoorOrWindow1.isResizable());
      
      Sash[] sashArray1 = catalogDoorOrWindow0.getSashes();
      assertEquals(2, sashArray0.length);
      assertEquals(2, sashArray1.length);
      assertEquals(4, floatArray0.length);
      assertNotNull(sashArray1);
      assertNotSame(catalogDoorOrWindow0, catalogDoorOrWindow1);
      assertNotSame(sashArray0, sashArray1);
      assertNotSame(sashArray1, sashArray0);
      assertNotEquals((float)float0, (float)float2, 0.01F);
      assertNotEquals((float)float0, (float)float1, 0.01F);
      assertFalse(catalogDoorOrWindow0.equals((Object)catalogDoorOrWindow1));
      assertFalse(sashArray1.equals((Object)sashArray0));
      assertEquals((byte)0, bigInteger0.byteValue());
      assertEquals((short)0, bigInteger0.shortValue());
      assertEquals((byte)0, bigDecimal0.byteValue());
      assertEquals((short)0, bigDecimal0.shortValue());
      assertEquals("com.eteks.sweethome3d.model.TextStyle", catalogDoorOrWindow0.getName());
      assertFalse(catalogDoorOrWindow0.isMovable());
      assertTrue(catalogDoorOrWindow0.isResizable());
      assertNull(catalogDoorOrWindow0.getColor());
      assertEquals("com.eteks.sweethome3d.model.HomePieceOfFurniture$17", catalogDoorOrWindow0.getDescription());
      assertNull(catalogDoorOrWindow0.getStaircaseCutOutShape());
      assertEquals(0.0F, catalogDoorOrWindow0.getGrade(), 0.01F);
      assertEquals(0.0F, catalogDoorOrWindow0.getWidth(), 0.01F);
      assertEquals(0.0F, catalogDoorOrWindow0.getHeight(), 0.01F);
      assertFalse(catalogDoorOrWindow0.isDeformable());
      assertEquals(0.0F, catalogDoorOrWindow0.getElevation(), 0.01F);
      assertEquals(0.0F, catalogDoorOrWindow0.getWallDistance(), 0.01F);
      assertEquals(0.0F, catalogDoorOrWindow0.getDepth(), 0.01F);
      assertFalse(catalogDoorOrWindow0.isBackFaceShown());
      assertEquals("com.eteks.sweethome3d.model.TextStyle", catalogDoorOrWindow0.getCurrency());
      assertEquals("com.eteks.sweethome3d.model.TextStyle", catalogDoorOrWindow0.getId());
      assertFalse(catalogDoorOrWindow0.isTexturable());
      assertTrue(catalogDoorOrWindow0.isProportional());
      assertTrue(catalogDoorOrWindow0.isDoorOrWindow());
      assertEquals(0.3926991F, catalogDoorOrWindow0.getIconYaw(), 0.01F);
      assertEquals("com.eteks.sweethome3d.model.HomePieceOfFurniture$17", catalogDoorOrWindow0.getInformation());
      assertEquals("2.", catalogDoorOrWindow0.getCreator());
      assertFalse(catalogDoorOrWindow0.isModifiable());
      assertEquals(0L, (long)catalogDoorOrWindow0.getCreationDate());
      assertEquals((-201.17F), catalogDoorOrWindow0.getWallThickness(), 0.01F);
      
      HomeDoorOrWindow homeDoorOrWindow0 = new HomeDoorOrWindow(catalogDoorOrWindow1);
      assertEquals(2, sashArray0.length);
      assertEquals(4, floatArray0.length);
      assertNotNull(homeDoorOrWindow0);
      assertFalse(sashArray0.equals((Object)sashArray1));
      assertFalse(catalogDoorOrWindow1.equals((Object)catalogDoorOrWindow0));
      assertEquals((byte)0, bigInteger0.byteValue());
      assertEquals((short)0, bigInteger0.shortValue());
      assertEquals((byte)0, bigDecimal0.byteValue());
      assertEquals((short)0, bigDecimal0.shortValue());
      assertEquals(0.5F, catalogDoorOrWindow1.getHeight(), 0.01F);
      assertEquals("", catalogDoorOrWindow1.getDescription());
      assertNull(catalogDoorOrWindow1.getInformation());
      assertTrue(catalogDoorOrWindow1.isDeformable());
      assertNull(catalogDoorOrWindow1.getCreationDate());
      assertEquals(0.5F, catalogDoorOrWindow1.getDepth(), 0.01F);
      assertFalse(catalogDoorOrWindow1.isModifiable());
      assertEquals("java.version", catalogDoorOrWindow1.getName());
      assertFalse(catalogDoorOrWindow1.isBackFaceShown());
      assertEquals((-1.0F), catalogDoorOrWindow1.getWallDistance(), 0.01F);
      assertEquals(672.42474F, catalogDoorOrWindow1.getElevation(), 0.01F);
      assertEquals("TEXTURE", catalogDoorOrWindow1.getId());
      assertNull(catalogDoorOrWindow1.getGrade());
      assertEquals(0.3926991F, catalogDoorOrWindow1.getIconYaw(), 0.01F);
      assertEquals("", catalogDoorOrWindow1.getCurrency());
      assertTrue(catalogDoorOrWindow1.isProportional());
      assertFalse(catalogDoorOrWindow1.isTexturable());
      assertEquals("CRCKF", catalogDoorOrWindow1.getCreator());
      assertEquals(1.0F, catalogDoorOrWindow1.getWidth(), 0.01F);
      assertTrue(catalogDoorOrWindow1.isDoorOrWindow());
      assertNull(catalogDoorOrWindow1.getColor());
      assertEquals(0.0F, catalogDoorOrWindow1.getWallThickness(), 0.01F);
      assertNull(catalogDoorOrWindow1.getStaircaseCutOutShape());
      assertTrue(catalogDoorOrWindow1.isMovable());
      assertFalse(catalogDoorOrWindow1.isResizable());
      assertFalse(homeDoorOrWindow0.isTexturable());
      assertEquals(0.0F, homeDoorOrWindow0.getAngle(), 0.01F);
      assertEquals(0.5F, homeDoorOrWindow0.getX(), 0.01F);
      assertEquals(0.25F, homeDoorOrWindow0.getY(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getWallThickness(), 0.01F);
      assertFalse(homeDoorOrWindow0.isModelMirrored());
      assertFalse(homeDoorOrWindow0.isBackFaceShown());
      assertEquals(672.42474F, homeDoorOrWindow0.getElevation(), 0.01F);
      assertEquals("", homeDoorOrWindow0.getCurrency());
      assertEquals(0.0F, homeDoorOrWindow0.getNameYOffset(), 0.01F);
      assertNull(homeDoorOrWindow0.getColor());
      assertEquals("TEXTURE", homeDoorOrWindow0.getCatalogId());
      assertEquals(0.5F, homeDoorOrWindow0.getHeight(), 0.01F);
      assertEquals((-1.0F), homeDoorOrWindow0.getWallDistance(), 0.01F);
      assertEquals("java.version", homeDoorOrWindow0.getName());
      assertTrue(homeDoorOrWindow0.isMovable());
      assertTrue(homeDoorOrWindow0.isDeformable());
      assertNull(homeDoorOrWindow0.getShininess());
      assertTrue(homeDoorOrWindow0.isVisible());
      assertFalse(homeDoorOrWindow0.isBoundToWall());
      assertNull(homeDoorOrWindow0.getStaircaseCutOutShape());
      assertFalse(homeDoorOrWindow0.isResizable());
      assertEquals(0.0F, homeDoorOrWindow0.getNameAngle(), 0.01F);
      assertTrue(homeDoorOrWindow0.isDoorOrWindow());
      assertFalse(homeDoorOrWindow0.isNameVisible());
      assertEquals(0.5F, homeDoorOrWindow0.getDepth(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getNameXOffset(), 0.01F);
      assertEquals(1.0F, homeDoorOrWindow0.getWidth(), 0.01F);
      assertEquals(672.42474F, homeDoorOrWindow0.getGroundElevation(), 0.01F);
      assertEquals("", homeDoorOrWindow0.getDescription());
      
      HomeDoorOrWindow homeDoorOrWindow1 = homeDoorOrWindow0.clone();
      assertEquals(2, sashArray0.length);
      assertEquals(4, floatArray0.length);
      assertNotNull(homeDoorOrWindow1);
      assertNotSame(sashArray0, sashArray1);
      assertNotSame(catalogDoorOrWindow1, catalogDoorOrWindow0);
      assertNotSame(homeDoorOrWindow0, homeDoorOrWindow1);
      assertNotSame(homeDoorOrWindow1, homeDoorOrWindow0);
      assertFalse(sashArray0.equals((Object)sashArray1));
      assertFalse(catalogDoorOrWindow1.equals((Object)catalogDoorOrWindow0));
      assertFalse(homeDoorOrWindow1.equals((Object)homeDoorOrWindow0));
      assertEquals((byte)0, bigInteger0.byteValue());
      assertEquals((short)0, bigInteger0.shortValue());
      assertEquals((byte)0, bigDecimal0.byteValue());
      assertEquals((short)0, bigDecimal0.shortValue());
      assertEquals(0.5F, catalogDoorOrWindow1.getHeight(), 0.01F);
      assertEquals("", catalogDoorOrWindow1.getDescription());
      assertNull(catalogDoorOrWindow1.getInformation());
      assertTrue(catalogDoorOrWindow1.isDeformable());
      assertNull(catalogDoorOrWindow1.getCreationDate());
      assertEquals(0.5F, catalogDoorOrWindow1.getDepth(), 0.01F);
      assertFalse(catalogDoorOrWindow1.isModifiable());
      assertEquals("java.version", catalogDoorOrWindow1.getName());
      assertFalse(catalogDoorOrWindow1.isBackFaceShown());
      assertEquals((-1.0F), catalogDoorOrWindow1.getWallDistance(), 0.01F);
      assertEquals(672.42474F, catalogDoorOrWindow1.getElevation(), 0.01F);
      assertEquals("TEXTURE", catalogDoorOrWindow1.getId());
      assertNull(catalogDoorOrWindow1.getGrade());
      assertEquals(0.3926991F, catalogDoorOrWindow1.getIconYaw(), 0.01F);
      assertEquals("", catalogDoorOrWindow1.getCurrency());
      assertTrue(catalogDoorOrWindow1.isProportional());
      assertFalse(catalogDoorOrWindow1.isTexturable());
      assertEquals("CRCKF", catalogDoorOrWindow1.getCreator());
      assertEquals(1.0F, catalogDoorOrWindow1.getWidth(), 0.01F);
      assertTrue(catalogDoorOrWindow1.isDoorOrWindow());
      assertNull(catalogDoorOrWindow1.getColor());
      assertEquals(0.0F, catalogDoorOrWindow1.getWallThickness(), 0.01F);
      assertNull(catalogDoorOrWindow1.getStaircaseCutOutShape());
      assertTrue(catalogDoorOrWindow1.isMovable());
      assertFalse(catalogDoorOrWindow1.isResizable());
      assertFalse(homeDoorOrWindow0.isTexturable());
      assertEquals(0.0F, homeDoorOrWindow0.getAngle(), 0.01F);
      assertEquals(0.5F, homeDoorOrWindow0.getX(), 0.01F);
      assertEquals(0.25F, homeDoorOrWindow0.getY(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getWallThickness(), 0.01F);
      assertFalse(homeDoorOrWindow0.isModelMirrored());
      assertFalse(homeDoorOrWindow0.isBackFaceShown());
      assertEquals(672.42474F, homeDoorOrWindow0.getElevation(), 0.01F);
      assertEquals("", homeDoorOrWindow0.getCurrency());
      assertEquals(0.0F, homeDoorOrWindow0.getNameYOffset(), 0.01F);
      assertNull(homeDoorOrWindow0.getColor());
      assertEquals("TEXTURE", homeDoorOrWindow0.getCatalogId());
      assertEquals(0.5F, homeDoorOrWindow0.getHeight(), 0.01F);
      assertEquals((-1.0F), homeDoorOrWindow0.getWallDistance(), 0.01F);
      assertEquals("java.version", homeDoorOrWindow0.getName());
      assertTrue(homeDoorOrWindow0.isMovable());
      assertTrue(homeDoorOrWindow0.isDeformable());
      assertNull(homeDoorOrWindow0.getShininess());
      assertTrue(homeDoorOrWindow0.isVisible());
      assertFalse(homeDoorOrWindow0.isBoundToWall());
      assertNull(homeDoorOrWindow0.getStaircaseCutOutShape());
      assertFalse(homeDoorOrWindow0.isResizable());
      assertEquals(0.0F, homeDoorOrWindow0.getNameAngle(), 0.01F);
      assertTrue(homeDoorOrWindow0.isDoorOrWindow());
      assertFalse(homeDoorOrWindow0.isNameVisible());
      assertEquals(0.5F, homeDoorOrWindow0.getDepth(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getNameXOffset(), 0.01F);
      assertEquals(1.0F, homeDoorOrWindow0.getWidth(), 0.01F);
      assertEquals(672.42474F, homeDoorOrWindow0.getGroundElevation(), 0.01F);
      assertEquals("", homeDoorOrWindow0.getDescription());
      assertEquals("java.version", homeDoorOrWindow1.getName());
      assertFalse(homeDoorOrWindow1.isBoundToWall());
      assertFalse(homeDoorOrWindow1.isResizable());
      assertTrue(homeDoorOrWindow1.isVisible());
      assertEquals(0.5F, homeDoorOrWindow1.getHeight(), 0.01F);
      assertEquals(1.0F, homeDoorOrWindow1.getWidth(), 0.01F);
      assertNull(homeDoorOrWindow1.getShininess());
      assertEquals(0.0F, homeDoorOrWindow1.getNameYOffset(), 0.01F);
      assertTrue(homeDoorOrWindow1.isDeformable());
      assertEquals(672.42474F, homeDoorOrWindow1.getElevation(), 0.01F);
      assertFalse(homeDoorOrWindow1.isModelMirrored());
      assertEquals(672.42474F, homeDoorOrWindow1.getGroundElevation(), 0.01F);
      assertFalse(homeDoorOrWindow1.isBackFaceShown());
      assertEquals(0.0F, homeDoorOrWindow1.getWallThickness(), 0.01F);
      assertFalse(homeDoorOrWindow1.isNameVisible());
      assertFalse(homeDoorOrWindow1.isTexturable());
      assertEquals(0.0F, homeDoorOrWindow1.getAngle(), 0.01F);
      assertEquals("", homeDoorOrWindow1.getDescription());
      assertNull(homeDoorOrWindow1.getColor());
      assertEquals(0.5F, homeDoorOrWindow1.getX(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow1.getNameXOffset(), 0.01F);
      assertEquals(0.25F, homeDoorOrWindow1.getY(), 0.01F);
      assertEquals("TEXTURE", homeDoorOrWindow1.getCatalogId());
      assertEquals(0.0F, homeDoorOrWindow1.getNameAngle(), 0.01F);
      assertTrue(homeDoorOrWindow1.isDoorOrWindow());
      assertEquals("", homeDoorOrWindow1.getCurrency());
      assertNull(homeDoorOrWindow1.getStaircaseCutOutShape());
      assertEquals(0.5F, homeDoorOrWindow1.getDepth(), 0.01F);
      assertEquals((-1.0F), homeDoorOrWindow1.getWallDistance(), 0.01F);
      assertTrue(homeDoorOrWindow1.isMovable());
      
      Integer integer0 = homeDoorOrWindow1.getColor();
      assertEquals(2, sashArray0.length);
      assertEquals(4, floatArray0.length);
      assertNull(integer0);
      assertNotSame(sashArray0, sashArray1);
      assertNotSame(catalogDoorOrWindow1, catalogDoorOrWindow0);
      assertNotSame(homeDoorOrWindow0, homeDoorOrWindow1);
      assertNotSame(homeDoorOrWindow1, homeDoorOrWindow0);
      assertFalse(sashArray0.equals((Object)sashArray1));
      assertFalse(catalogDoorOrWindow1.equals((Object)catalogDoorOrWindow0));
      assertFalse(homeDoorOrWindow0.equals((Object)homeDoorOrWindow1));
      assertFalse(homeDoorOrWindow1.equals((Object)homeDoorOrWindow0));
      assertEquals((byte)0, bigInteger0.byteValue());
      assertEquals((short)0, bigInteger0.shortValue());
      assertEquals((byte)0, bigDecimal0.byteValue());
      assertEquals((short)0, bigDecimal0.shortValue());
      assertEquals(0.5F, catalogDoorOrWindow1.getHeight(), 0.01F);
      assertEquals("", catalogDoorOrWindow1.getDescription());
      assertNull(catalogDoorOrWindow1.getInformation());
      assertTrue(catalogDoorOrWindow1.isDeformable());
      assertNull(catalogDoorOrWindow1.getCreationDate());
      assertEquals(0.5F, catalogDoorOrWindow1.getDepth(), 0.01F);
      assertFalse(catalogDoorOrWindow1.isModifiable());
      assertEquals("java.version", catalogDoorOrWindow1.getName());
      assertFalse(catalogDoorOrWindow1.isBackFaceShown());
      assertEquals((-1.0F), catalogDoorOrWindow1.getWallDistance(), 0.01F);
      assertEquals(672.42474F, catalogDoorOrWindow1.getElevation(), 0.01F);
      assertEquals("TEXTURE", catalogDoorOrWindow1.getId());
      assertNull(catalogDoorOrWindow1.getGrade());
      assertEquals(0.3926991F, catalogDoorOrWindow1.getIconYaw(), 0.01F);
      assertEquals("", catalogDoorOrWindow1.getCurrency());
      assertTrue(catalogDoorOrWindow1.isProportional());
      assertFalse(catalogDoorOrWindow1.isTexturable());
      assertEquals("CRCKF", catalogDoorOrWindow1.getCreator());
      assertEquals(1.0F, catalogDoorOrWindow1.getWidth(), 0.01F);
      assertTrue(catalogDoorOrWindow1.isDoorOrWindow());
      assertNull(catalogDoorOrWindow1.getColor());
      assertEquals(0.0F, catalogDoorOrWindow1.getWallThickness(), 0.01F);
      assertNull(catalogDoorOrWindow1.getStaircaseCutOutShape());
      assertTrue(catalogDoorOrWindow1.isMovable());
      assertFalse(catalogDoorOrWindow1.isResizable());
      assertFalse(homeDoorOrWindow0.isTexturable());
      assertEquals(0.0F, homeDoorOrWindow0.getAngle(), 0.01F);
      assertEquals(0.5F, homeDoorOrWindow0.getX(), 0.01F);
      assertEquals(0.25F, homeDoorOrWindow0.getY(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getWallThickness(), 0.01F);
      assertFalse(homeDoorOrWindow0.isModelMirrored());
      assertFalse(homeDoorOrWindow0.isBackFaceShown());
      assertEquals(672.42474F, homeDoorOrWindow0.getElevation(), 0.01F);
      assertEquals("", homeDoorOrWindow0.getCurrency());
      assertEquals(0.0F, homeDoorOrWindow0.getNameYOffset(), 0.01F);
      assertNull(homeDoorOrWindow0.getColor());
      assertEquals("TEXTURE", homeDoorOrWindow0.getCatalogId());
      assertEquals(0.5F, homeDoorOrWindow0.getHeight(), 0.01F);
      assertEquals((-1.0F), homeDoorOrWindow0.getWallDistance(), 0.01F);
      assertEquals("java.version", homeDoorOrWindow0.getName());
      assertTrue(homeDoorOrWindow0.isMovable());
      assertTrue(homeDoorOrWindow0.isDeformable());
      assertNull(homeDoorOrWindow0.getShininess());
      assertTrue(homeDoorOrWindow0.isVisible());
      assertFalse(homeDoorOrWindow0.isBoundToWall());
      assertNull(homeDoorOrWindow0.getStaircaseCutOutShape());
      assertFalse(homeDoorOrWindow0.isResizable());
      assertEquals(0.0F, homeDoorOrWindow0.getNameAngle(), 0.01F);
      assertTrue(homeDoorOrWindow0.isDoorOrWindow());
      assertFalse(homeDoorOrWindow0.isNameVisible());
      assertEquals(0.5F, homeDoorOrWindow0.getDepth(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getNameXOffset(), 0.01F);
      assertEquals(1.0F, homeDoorOrWindow0.getWidth(), 0.01F);
      assertEquals(672.42474F, homeDoorOrWindow0.getGroundElevation(), 0.01F);
      assertEquals("", homeDoorOrWindow0.getDescription());
      assertEquals("java.version", homeDoorOrWindow1.getName());
      assertFalse(homeDoorOrWindow1.isBoundToWall());
      assertFalse(homeDoorOrWindow1.isResizable());
      assertTrue(homeDoorOrWindow1.isVisible());
      assertEquals(0.5F, homeDoorOrWindow1.getHeight(), 0.01F);
      assertEquals(1.0F, homeDoorOrWindow1.getWidth(), 0.01F);
      assertNull(homeDoorOrWindow1.getShininess());
      assertEquals(0.0F, homeDoorOrWindow1.getNameYOffset(), 0.01F);
      assertTrue(homeDoorOrWindow1.isDeformable());
      assertEquals(672.42474F, homeDoorOrWindow1.getElevation(), 0.01F);
      assertFalse(homeDoorOrWindow1.isModelMirrored());
      assertEquals(672.42474F, homeDoorOrWindow1.getGroundElevation(), 0.01F);
      assertFalse(homeDoorOrWindow1.isBackFaceShown());
      assertEquals(0.0F, homeDoorOrWindow1.getWallThickness(), 0.01F);
      assertFalse(homeDoorOrWindow1.isNameVisible());
      assertFalse(homeDoorOrWindow1.isTexturable());
      assertEquals(0.0F, homeDoorOrWindow1.getAngle(), 0.01F);
      assertEquals("", homeDoorOrWindow1.getDescription());
      assertNull(homeDoorOrWindow1.getColor());
      assertEquals(0.5F, homeDoorOrWindow1.getX(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow1.getNameXOffset(), 0.01F);
      assertEquals(0.25F, homeDoorOrWindow1.getY(), 0.01F);
      assertEquals("TEXTURE", homeDoorOrWindow1.getCatalogId());
      assertEquals(0.0F, homeDoorOrWindow1.getNameAngle(), 0.01F);
      assertTrue(homeDoorOrWindow1.isDoorOrWindow());
      assertEquals("", homeDoorOrWindow1.getCurrency());
      assertNull(homeDoorOrWindow1.getStaircaseCutOutShape());
      assertEquals(0.5F, homeDoorOrWindow1.getDepth(), 0.01F);
      assertEquals((-1.0F), homeDoorOrWindow1.getWallDistance(), 0.01F);
      assertTrue(homeDoorOrWindow1.isMovable());
  }

  @Test(timeout = 4000)
  public void test162()  throws Throwable  {
      Integer integer0 = new Integer((-1469));
      assertNotNull(integer0);
      assertEquals((-1469), (int)integer0);
      
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      Light light0 = mock(Light.class, new ViolatedAssumptionAnswer());
      doReturn((Integer) null).when(light0).getColor();
      doReturn((String) null).when(light0).getCurrency();
      doReturn(0.0F).when(light0).getDepth();
      doReturn((String) null).when(light0).getDescription();
      doReturn(0.0F).when(light0).getElevation();
      doReturn(0.0F).when(light0).getHeight();
      doReturn((Content) null).when(light0).getIcon();
      doReturn((Content) null).when(light0).getModel();
      doReturn((float[][]) null).when(light0).getModelRotation();
      doReturn((String) null).when(light0).getName();
      doReturn((Content) null).when(light0).getPlanIcon();
      doReturn((BigDecimal) null).when(light0).getPrice();
      doReturn((String) null).when(light0).getStaircaseCutOutShape();
      doReturn((BigDecimal) null).when(light0).getValueAddedTaxPercentage();
      doReturn(0.0F).when(light0).getWidth();
      doReturn(false).when(light0).isBackFaceShown();
      doReturn(false).when(light0).isDeformable();
      doReturn(false).when(light0).isDoorOrWindow();
      doReturn(false).when(light0).isMovable();
      doReturn(false).when(light0).isResizable();
      doReturn(false).when(light0).isTexturable();
      HomePieceOfFurniture homePieceOfFurniture0 = new HomePieceOfFurniture(light0);
      assertNotNull(homePieceOfFurniture0);
      assertFalse(homePieceOfFurniture0.isNameVisible());
      assertFalse(homePieceOfFurniture0.isDeformable());
      assertEquals(0.0F, homePieceOfFurniture0.getNameYOffset(), 0.01F);
      assertFalse(homePieceOfFurniture0.isBackFaceShown());
      assertFalse(homePieceOfFurniture0.isModelMirrored());
      assertNull(homePieceOfFurniture0.getColor());
      assertTrue(homePieceOfFurniture0.isVisible());
      assertFalse(homePieceOfFurniture0.isResizable());
      assertFalse(homePieceOfFurniture0.isMovable());
      assertEquals(0.0F, homePieceOfFurniture0.getHeight(), 0.01F);
      assertNull(homePieceOfFurniture0.getCurrency());
      assertNull(homePieceOfFurniture0.getName());
      assertEquals(0.0F, homePieceOfFurniture0.getDepth(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture0.getNameAngle(), 0.01F);
      assertNull(homePieceOfFurniture0.getCatalogId());
      assertEquals(0.0F, homePieceOfFurniture0.getNameXOffset(), 0.01F);
      assertNull(homePieceOfFurniture0.getStaircaseCutOutShape());
      assertNull(homePieceOfFurniture0.getShininess());
      assertEquals(0.0F, homePieceOfFurniture0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture0.getX(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture0.getY(), 0.01F);
      assertFalse(homePieceOfFurniture0.isTexturable());
      assertEquals(0.0F, homePieceOfFurniture0.getElevation(), 0.01F);
      assertFalse(homePieceOfFurniture0.isDoorOrWindow());
      assertNull(homePieceOfFurniture0.getDescription());
      assertEquals(0.0F, homePieceOfFurniture0.getWidth(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture0.getAngle(), 0.01F);
      
      homePieceOfFurniture0.setVisible(true);
      assertFalse(homePieceOfFurniture0.isNameVisible());
      assertFalse(homePieceOfFurniture0.isDeformable());
      assertEquals(0.0F, homePieceOfFurniture0.getNameYOffset(), 0.01F);
      assertFalse(homePieceOfFurniture0.isBackFaceShown());
      assertFalse(homePieceOfFurniture0.isModelMirrored());
      assertNull(homePieceOfFurniture0.getColor());
      assertTrue(homePieceOfFurniture0.isVisible());
      assertFalse(homePieceOfFurniture0.isResizable());
      assertFalse(homePieceOfFurniture0.isMovable());
      assertEquals(0.0F, homePieceOfFurniture0.getHeight(), 0.01F);
      assertNull(homePieceOfFurniture0.getCurrency());
      assertNull(homePieceOfFurniture0.getName());
      assertEquals(0.0F, homePieceOfFurniture0.getDepth(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture0.getNameAngle(), 0.01F);
      assertNull(homePieceOfFurniture0.getCatalogId());
      assertEquals(0.0F, homePieceOfFurniture0.getNameXOffset(), 0.01F);
      assertNull(homePieceOfFurniture0.getStaircaseCutOutShape());
      assertNull(homePieceOfFurniture0.getShininess());
      assertEquals(0.0F, homePieceOfFurniture0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture0.getX(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture0.getY(), 0.01F);
      assertFalse(homePieceOfFurniture0.isTexturable());
      assertEquals(0.0F, homePieceOfFurniture0.getElevation(), 0.01F);
      assertFalse(homePieceOfFurniture0.isDoorOrWindow());
      assertNull(homePieceOfFurniture0.getDescription());
      assertEquals(0.0F, homePieceOfFurniture0.getWidth(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture0.getAngle(), 0.01F);
      
      float float0 = homePieceOfFurniture0.getWidth();
      assertEquals(0.0F, float0, 0.01F);
      assertFalse(homePieceOfFurniture0.isNameVisible());
      assertFalse(homePieceOfFurniture0.isDeformable());
      assertEquals(0.0F, homePieceOfFurniture0.getNameYOffset(), 0.01F);
      assertFalse(homePieceOfFurniture0.isBackFaceShown());
      assertFalse(homePieceOfFurniture0.isModelMirrored());
      assertNull(homePieceOfFurniture0.getColor());
      assertTrue(homePieceOfFurniture0.isVisible());
      assertFalse(homePieceOfFurniture0.isResizable());
      assertFalse(homePieceOfFurniture0.isMovable());
      assertEquals(0.0F, homePieceOfFurniture0.getHeight(), 0.01F);
      assertNull(homePieceOfFurniture0.getCurrency());
      assertNull(homePieceOfFurniture0.getName());
      assertEquals(0.0F, homePieceOfFurniture0.getDepth(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture0.getNameAngle(), 0.01F);
      assertNull(homePieceOfFurniture0.getCatalogId());
      assertEquals(0.0F, homePieceOfFurniture0.getNameXOffset(), 0.01F);
      assertNull(homePieceOfFurniture0.getStaircaseCutOutShape());
      assertNull(homePieceOfFurniture0.getShininess());
      assertEquals(0.0F, homePieceOfFurniture0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture0.getX(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture0.getY(), 0.01F);
      assertFalse(homePieceOfFurniture0.isTexturable());
      assertEquals(0.0F, homePieceOfFurniture0.getElevation(), 0.01F);
      assertFalse(homePieceOfFurniture0.isDoorOrWindow());
      assertNull(homePieceOfFurniture0.getDescription());
      assertEquals(0.0F, homePieceOfFurniture0.getWidth(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture0.getAngle(), 0.01F);
      
      homePieceOfFurniture0.setNameVisible(true);
      assertFalse(homePieceOfFurniture0.isDeformable());
      assertEquals(0.0F, homePieceOfFurniture0.getNameYOffset(), 0.01F);
      assertFalse(homePieceOfFurniture0.isBackFaceShown());
      assertFalse(homePieceOfFurniture0.isModelMirrored());
      assertNull(homePieceOfFurniture0.getColor());
      assertTrue(homePieceOfFurniture0.isNameVisible());
      assertTrue(homePieceOfFurniture0.isVisible());
      assertFalse(homePieceOfFurniture0.isResizable());
      assertFalse(homePieceOfFurniture0.isMovable());
      assertEquals(0.0F, homePieceOfFurniture0.getHeight(), 0.01F);
      assertNull(homePieceOfFurniture0.getCurrency());
      assertNull(homePieceOfFurniture0.getName());
      assertEquals(0.0F, homePieceOfFurniture0.getDepth(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture0.getNameAngle(), 0.01F);
      assertNull(homePieceOfFurniture0.getCatalogId());
      assertEquals(0.0F, homePieceOfFurniture0.getNameXOffset(), 0.01F);
      assertNull(homePieceOfFurniture0.getStaircaseCutOutShape());
      assertNull(homePieceOfFurniture0.getShininess());
      assertEquals(0.0F, homePieceOfFurniture0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture0.getX(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture0.getY(), 0.01F);
      assertFalse(homePieceOfFurniture0.isTexturable());
      assertEquals(0.0F, homePieceOfFurniture0.getElevation(), 0.01F);
      assertFalse(homePieceOfFurniture0.isDoorOrWindow());
      assertNull(homePieceOfFurniture0.getDescription());
      assertEquals(0.0F, homePieceOfFurniture0.getWidth(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture0.getAngle(), 0.01F);
      
      float float1 = homePieceOfFurniture0.getGroundElevation();
      assertEquals(float1, float0, 0.01F);
      assertEquals(0.0F, float1, 0.01F);
      assertFalse(homePieceOfFurniture0.isDeformable());
      assertEquals(0.0F, homePieceOfFurniture0.getNameYOffset(), 0.01F);
      assertFalse(homePieceOfFurniture0.isBackFaceShown());
      assertFalse(homePieceOfFurniture0.isModelMirrored());
      assertNull(homePieceOfFurniture0.getColor());
      assertTrue(homePieceOfFurniture0.isNameVisible());
      assertTrue(homePieceOfFurniture0.isVisible());
      assertFalse(homePieceOfFurniture0.isResizable());
      assertFalse(homePieceOfFurniture0.isMovable());
      assertEquals(0.0F, homePieceOfFurniture0.getHeight(), 0.01F);
      assertNull(homePieceOfFurniture0.getCurrency());
      assertNull(homePieceOfFurniture0.getName());
      assertEquals(0.0F, homePieceOfFurniture0.getDepth(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture0.getNameAngle(), 0.01F);
      assertNull(homePieceOfFurniture0.getCatalogId());
      assertEquals(0.0F, homePieceOfFurniture0.getNameXOffset(), 0.01F);
      assertNull(homePieceOfFurniture0.getStaircaseCutOutShape());
      assertNull(homePieceOfFurniture0.getShininess());
      assertEquals(0.0F, homePieceOfFurniture0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture0.getX(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture0.getY(), 0.01F);
      assertFalse(homePieceOfFurniture0.isTexturable());
      assertEquals(0.0F, homePieceOfFurniture0.getElevation(), 0.01F);
      assertFalse(homePieceOfFurniture0.isDoorOrWindow());
      assertNull(homePieceOfFurniture0.getDescription());
      assertEquals(0.0F, homePieceOfFurniture0.getWidth(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture0.getAngle(), 0.01F);
      
      float float2 = homePieceOfFurniture0.getY();
      assertEquals(float2, float1, 0.01F);
      assertEquals(float2, float0, 0.01F);
      assertEquals(0.0F, float2, 0.01F);
      assertFalse(homePieceOfFurniture0.isDeformable());
      assertEquals(0.0F, homePieceOfFurniture0.getNameYOffset(), 0.01F);
      assertFalse(homePieceOfFurniture0.isBackFaceShown());
      assertFalse(homePieceOfFurniture0.isModelMirrored());
      assertNull(homePieceOfFurniture0.getColor());
      assertTrue(homePieceOfFurniture0.isNameVisible());
      assertTrue(homePieceOfFurniture0.isVisible());
      assertFalse(homePieceOfFurniture0.isResizable());
      assertFalse(homePieceOfFurniture0.isMovable());
      assertEquals(0.0F, homePieceOfFurniture0.getHeight(), 0.01F);
      assertNull(homePieceOfFurniture0.getCurrency());
      assertNull(homePieceOfFurniture0.getName());
      assertEquals(0.0F, homePieceOfFurniture0.getDepth(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture0.getNameAngle(), 0.01F);
      assertNull(homePieceOfFurniture0.getCatalogId());
      assertEquals(0.0F, homePieceOfFurniture0.getNameXOffset(), 0.01F);
      assertNull(homePieceOfFurniture0.getStaircaseCutOutShape());
      assertNull(homePieceOfFurniture0.getShininess());
      assertEquals(0.0F, homePieceOfFurniture0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture0.getX(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture0.getY(), 0.01F);
      assertFalse(homePieceOfFurniture0.isTexturable());
      assertEquals(0.0F, homePieceOfFurniture0.getElevation(), 0.01F);
      assertFalse(homePieceOfFurniture0.isDoorOrWindow());
      assertNull(homePieceOfFurniture0.getDescription());
      assertEquals(0.0F, homePieceOfFurniture0.getWidth(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture0.getAngle(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test163()  throws Throwable  {
      Integer integer0 = new Integer((-1469));
      assertNotNull(integer0);
      assertEquals((-1469), (int)integer0);
      
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      Light light0 = mock(Light.class, new ViolatedAssumptionAnswer());
      doReturn((LightSource[]) null).when(light0).getLightSources();
      doReturn((Integer) null).when(light0).getColor();
      doReturn((String) null).when(light0).getCurrency();
      doReturn(0.0F).when(light0).getDepth();
      doReturn((String) null).when(light0).getDescription();
      doReturn(0.0F).when(light0).getElevation();
      doReturn(0.0F).when(light0).getHeight();
      doReturn((Content) null).when(light0).getIcon();
      doReturn((Content) null).when(light0).getModel();
      doReturn((float[][]) null).when(light0).getModelRotation();
      doReturn((String) null).when(light0).getName();
      doReturn((Content) null).when(light0).getPlanIcon();
      doReturn((BigDecimal) null).when(light0).getPrice();
      doReturn((String) null).when(light0).getStaircaseCutOutShape();
      doReturn((BigDecimal) null).when(light0).getValueAddedTaxPercentage();
      doReturn(0.0F).when(light0).getWidth();
      doReturn(false).when(light0).isBackFaceShown();
      doReturn(false).when(light0).isDeformable();
      doReturn(false).when(light0).isDoorOrWindow();
      doReturn(false).when(light0).isMovable();
      doReturn(false).when(light0).isResizable();
      doReturn(false).when(light0).isTexturable();
      HomeLight homeLight0 = new HomeLight(light0);
      assertNotNull(homeLight0);
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertNull(homeLight0.getDescription());
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertNull(homeLight0.getName());
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertNull(homeLight0.getCatalogId());
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertFalse(homeLight0.isMovable());
      assertNull(homeLight0.getShininess());
      assertFalse(homeLight0.isResizable());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertNull(homeLight0.getCurrency());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertFalse(homeLight0.isDeformable());
      assertNull(homeLight0.getColor());
      assertTrue(homeLight0.isVisible());
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertFalse(homeLight0.isBackFaceShown());
      assertFalse(homeLight0.isModelMirrored());
      assertFalse(homeLight0.isTexturable());
      assertFalse(homeLight0.isDoorOrWindow());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertFalse(homeLight0.isNameVisible());
      
      homeLight0.setElevation((-1.0F));
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertNull(homeLight0.getDescription());
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertNull(homeLight0.getName());
      assertEquals((-1.0F), homeLight0.getElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertNull(homeLight0.getCatalogId());
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals((-1.0F), homeLight0.getGroundElevation(), 0.01F);
      assertFalse(homeLight0.isMovable());
      assertNull(homeLight0.getShininess());
      assertFalse(homeLight0.isResizable());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertNull(homeLight0.getCurrency());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertFalse(homeLight0.isDeformable());
      assertNull(homeLight0.getColor());
      assertTrue(homeLight0.isVisible());
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertFalse(homeLight0.isBackFaceShown());
      assertFalse(homeLight0.isModelMirrored());
      assertFalse(homeLight0.isTexturable());
      assertFalse(homeLight0.isDoorOrWindow());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertFalse(homeLight0.isNameVisible());
      
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)1;
      byteArray0[1] = (byte)1;
      byteArray0[2] = (byte) (-32);
      homeLight0.setVisible(true);
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertNull(homeLight0.getDescription());
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertNull(homeLight0.getName());
      assertEquals((-1.0F), homeLight0.getElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertNull(homeLight0.getCatalogId());
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals((-1.0F), homeLight0.getGroundElevation(), 0.01F);
      assertFalse(homeLight0.isMovable());
      assertNull(homeLight0.getShininess());
      assertFalse(homeLight0.isResizable());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertNull(homeLight0.getCurrency());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertFalse(homeLight0.isDeformable());
      assertNull(homeLight0.getColor());
      assertTrue(homeLight0.isVisible());
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertFalse(homeLight0.isBackFaceShown());
      assertFalse(homeLight0.isModelMirrored());
      assertFalse(homeLight0.isTexturable());
      assertFalse(homeLight0.isDoorOrWindow());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertFalse(homeLight0.isNameVisible());
      
      byteArray0[3] = (byte)62;
      boolean boolean1 = FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      assertEquals(4, byteArray0.length);
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      assertArrayEquals(new byte[] {(byte)1, (byte)1, (byte) (-32), (byte)62}, byteArray0);
      
      homeLight0.setNameAngle(0.0F);
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertNull(homeLight0.getDescription());
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertNull(homeLight0.getName());
      assertEquals((-1.0F), homeLight0.getElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertNull(homeLight0.getCatalogId());
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals((-1.0F), homeLight0.getGroundElevation(), 0.01F);
      assertFalse(homeLight0.isMovable());
      assertNull(homeLight0.getShininess());
      assertFalse(homeLight0.isResizable());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertNull(homeLight0.getCurrency());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertFalse(homeLight0.isDeformable());
      assertNull(homeLight0.getColor());
      assertTrue(homeLight0.isVisible());
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertFalse(homeLight0.isBackFaceShown());
      assertFalse(homeLight0.isModelMirrored());
      assertFalse(homeLight0.isTexturable());
      assertFalse(homeLight0.isDoorOrWindow());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertFalse(homeLight0.isNameVisible());
      
      HomeLight homeLight1 = null;
      try {
        homeLight1 = new HomeLight(homeLight0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.eteks.sweethome3d.model.HomePieceOfFurniture", e);
      }
  }

  @Test(timeout = 4000)
  public void test164()  throws Throwable  {
      Light light0 = mock(Light.class, new ViolatedAssumptionAnswer());
      doReturn((LightSource[]) null).when(light0).getLightSources();
      doReturn((Integer) null).when(light0).getColor();
      doReturn((String) null).when(light0).getCurrency();
      doReturn(0.0F).when(light0).getDepth();
      doReturn((String) null).when(light0).getDescription();
      doReturn(0.0F).when(light0).getElevation();
      doReturn(0.0F).when(light0).getHeight();
      doReturn((Content) null).when(light0).getIcon();
      doReturn((Content) null).when(light0).getModel();
      doReturn((float[][]) null).when(light0).getModelRotation();
      doReturn((String) null).when(light0).getName();
      doReturn((Content) null).when(light0).getPlanIcon();
      doReturn((BigDecimal) null).when(light0).getPrice();
      doReturn((String) null).when(light0).getStaircaseCutOutShape();
      doReturn((BigDecimal) null).when(light0).getValueAddedTaxPercentage();
      doReturn(0.0F).when(light0).getWidth();
      doReturn(false).when(light0).isBackFaceShown();
      doReturn(false).when(light0).isDeformable();
      doReturn(false).when(light0).isDoorOrWindow();
      doReturn(false).when(light0).isMovable();
      doReturn(false).when(light0).isResizable();
      doReturn(false).when(light0).isTexturable();
      HomeLight homeLight0 = new HomeLight(light0);
      assertNotNull(homeLight0);
      assertNull(homeLight0.getShininess());
      assertFalse(homeLight0.isResizable());
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertNull(homeLight0.getName());
      assertFalse(homeLight0.isMovable());
      assertNull(homeLight0.getDescription());
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertTrue(homeLight0.isVisible());
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertFalse(homeLight0.isDeformable());
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertFalse(homeLight0.isTexturable());
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertFalse(homeLight0.isBackFaceShown());
      assertFalse(homeLight0.isModelMirrored());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertFalse(homeLight0.isNameVisible());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertNull(homeLight0.getCurrency());
      assertNull(homeLight0.getCatalogId());
      assertNull(homeLight0.getColor());
      
      homeLight0.setElevation((-1.0F));
      assertNull(homeLight0.getShininess());
      assertFalse(homeLight0.isResizable());
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertNull(homeLight0.getName());
      assertFalse(homeLight0.isMovable());
      assertNull(homeLight0.getDescription());
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertTrue(homeLight0.isVisible());
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertFalse(homeLight0.isDeformable());
      assertEquals((-1.0F), homeLight0.getElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertFalse(homeLight0.isTexturable());
      assertEquals((-1.0F), homeLight0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertFalse(homeLight0.isBackFaceShown());
      assertFalse(homeLight0.isModelMirrored());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertFalse(homeLight0.isNameVisible());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertNull(homeLight0.getCurrency());
      assertNull(homeLight0.getCatalogId());
      assertNull(homeLight0.getColor());
      
      boolean boolean0 = homeLight0.isBottomRightPointAt((-1.0F), (-1.0F), (-1.0F));
      assertFalse(boolean0);
      assertNull(homeLight0.getShininess());
      assertFalse(homeLight0.isResizable());
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertNull(homeLight0.getName());
      assertFalse(homeLight0.isMovable());
      assertNull(homeLight0.getDescription());
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertTrue(homeLight0.isVisible());
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertFalse(homeLight0.isDeformable());
      assertEquals((-1.0F), homeLight0.getElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertFalse(homeLight0.isTexturable());
      assertEquals((-1.0F), homeLight0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertFalse(homeLight0.isBackFaceShown());
      assertFalse(homeLight0.isModelMirrored());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertFalse(homeLight0.isNameVisible());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertNull(homeLight0.getCurrency());
      assertNull(homeLight0.getCatalogId());
      assertNull(homeLight0.getColor());
      
      boolean boolean1 = homeLight0.containsPoint((-1.0F), (-280.0F), 0.3926991F);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      assertNull(homeLight0.getShininess());
      assertFalse(homeLight0.isResizable());
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertNull(homeLight0.getName());
      assertFalse(homeLight0.isMovable());
      assertNull(homeLight0.getDescription());
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertTrue(homeLight0.isVisible());
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertFalse(homeLight0.isDeformable());
      assertEquals((-1.0F), homeLight0.getElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertFalse(homeLight0.isTexturable());
      assertEquals((-1.0F), homeLight0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertFalse(homeLight0.isBackFaceShown());
      assertFalse(homeLight0.isModelMirrored());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertFalse(homeLight0.isNameVisible());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertNull(homeLight0.getCurrency());
      assertNull(homeLight0.getCatalogId());
      assertNull(homeLight0.getColor());
      
      homeLight0.setNameAngle((-1.0F));
      assertNull(homeLight0.getShininess());
      assertFalse(homeLight0.isResizable());
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertNull(homeLight0.getName());
      assertFalse(homeLight0.isMovable());
      assertNull(homeLight0.getDescription());
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertTrue(homeLight0.isVisible());
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertEquals(5.2831855F, homeLight0.getNameAngle(), 0.01F);
      assertFalse(homeLight0.isDeformable());
      assertEquals((-1.0F), homeLight0.getElevation(), 0.01F);
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertFalse(homeLight0.isTexturable());
      assertEquals((-1.0F), homeLight0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertFalse(homeLight0.isBackFaceShown());
      assertFalse(homeLight0.isModelMirrored());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertFalse(homeLight0.isNameVisible());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertNull(homeLight0.getCurrency());
      assertNull(homeLight0.getCatalogId());
      assertNull(homeLight0.getColor());
      
      homeLight0.setY((-1.0F));
      assertNull(homeLight0.getShininess());
      assertFalse(homeLight0.isResizable());
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertNull(homeLight0.getName());
      assertFalse(homeLight0.isMovable());
      assertNull(homeLight0.getDescription());
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertTrue(homeLight0.isVisible());
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertEquals(5.2831855F, homeLight0.getNameAngle(), 0.01F);
      assertFalse(homeLight0.isDeformable());
      assertEquals((-1.0F), homeLight0.getElevation(), 0.01F);
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertFalse(homeLight0.isTexturable());
      assertEquals((-1.0F), homeLight0.getGroundElevation(), 0.01F);
      assertEquals((-1.0F), homeLight0.getY(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertFalse(homeLight0.isBackFaceShown());
      assertFalse(homeLight0.isModelMirrored());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertFalse(homeLight0.isNameVisible());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertNull(homeLight0.getCurrency());
      assertNull(homeLight0.getCatalogId());
      assertNull(homeLight0.getColor());
      
      boolean boolean2 = homeLight0.isBottomLeftPointAt((-1.0F), 2288.0F, 2817.1807F);
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2);
      assertNull(homeLight0.getShininess());
      assertFalse(homeLight0.isResizable());
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertNull(homeLight0.getName());
      assertFalse(homeLight0.isMovable());
      assertNull(homeLight0.getDescription());
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertTrue(homeLight0.isVisible());
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertEquals(5.2831855F, homeLight0.getNameAngle(), 0.01F);
      assertFalse(homeLight0.isDeformable());
      assertEquals((-1.0F), homeLight0.getElevation(), 0.01F);
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertFalse(homeLight0.isTexturable());
      assertEquals((-1.0F), homeLight0.getGroundElevation(), 0.01F);
      assertEquals((-1.0F), homeLight0.getY(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertFalse(homeLight0.isBackFaceShown());
      assertFalse(homeLight0.isModelMirrored());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertFalse(homeLight0.isNameVisible());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertNull(homeLight0.getCurrency());
      assertNull(homeLight0.getCatalogId());
      assertNull(homeLight0.getColor());
      
      homeLight0.setDescription("J%6");
      assertNull(homeLight0.getShininess());
      assertFalse(homeLight0.isResizable());
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertNull(homeLight0.getName());
      assertFalse(homeLight0.isMovable());
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertTrue(homeLight0.isVisible());
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertEquals(5.2831855F, homeLight0.getNameAngle(), 0.01F);
      assertFalse(homeLight0.isDeformable());
      assertEquals((-1.0F), homeLight0.getElevation(), 0.01F);
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertFalse(homeLight0.isTexturable());
      assertEquals((-1.0F), homeLight0.getGroundElevation(), 0.01F);
      assertEquals((-1.0F), homeLight0.getY(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertFalse(homeLight0.isBackFaceShown());
      assertFalse(homeLight0.isModelMirrored());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertFalse(homeLight0.isNameVisible());
      assertEquals("J%6", homeLight0.getDescription());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertNull(homeLight0.getCurrency());
      assertNull(homeLight0.getCatalogId());
      assertNull(homeLight0.getColor());
  }

  @Test(timeout = 4000)
  public void test165()  throws Throwable  {
      LightSource[] lightSourceArray0 = new LightSource[2];
      LightSource lightSource0 = new LightSource((-1.0F), (-1457.99F), 381.9F, 1431655765);
      assertNotNull(lightSource0);
      assertNull(lightSource0.getDiameter());
      assertEquals((-1457.99F), lightSource0.getY(), 0.01F);
      assertEquals(1431655765, lightSource0.getColor());
      assertEquals((-1.0F), lightSource0.getX(), 0.01F);
      assertEquals(381.9F, lightSource0.getZ(), 0.01F);
      
      lightSourceArray0[0] = lightSource0;
      LightSource lightSource1 = new LightSource((-1.0F), (-69.47F), 700.4569F, (-853));
      assertNotNull(lightSource1);
      assertFalse(lightSource1.equals((Object)lightSource0));
      assertEquals(700.4569F, lightSource1.getZ(), 0.01F);
      assertNull(lightSource1.getDiameter());
      assertEquals((-853), lightSource1.getColor());
      assertEquals((-69.47F), lightSource1.getY(), 0.01F);
      assertEquals((-1.0F), lightSource1.getX(), 0.01F);
      
      lightSourceArray0[1] = lightSource1;
      Integer integer0 = new Integer((-853));
      assertNotNull(integer0);
      assertEquals((-853), (int)integer0);
      
      Light light0 = mock(Light.class, new ViolatedAssumptionAnswer());
      doReturn((LightSource[]) null).when(light0).getLightSources();
      doReturn((Integer) null).when(light0).getColor();
      doReturn((String) null).when(light0).getCurrency();
      doReturn(0.0F).when(light0).getDepth();
      doReturn((String) null).when(light0).getDescription();
      doReturn(0.0F).when(light0).getElevation();
      doReturn(0.0F).when(light0).getHeight();
      doReturn((Content) null).when(light0).getIcon();
      doReturn((Content) null).when(light0).getModel();
      doReturn((float[][]) null).when(light0).getModelRotation();
      doReturn((String) null).when(light0).getName();
      doReturn((Content) null).when(light0).getPlanIcon();
      doReturn((BigDecimal) null).when(light0).getPrice();
      doReturn((String) null).when(light0).getStaircaseCutOutShape();
      doReturn((BigDecimal) null).when(light0).getValueAddedTaxPercentage();
      doReturn(0.0F).when(light0).getWidth();
      doReturn(false).when(light0).isBackFaceShown();
      doReturn(false).when(light0).isDeformable();
      doReturn(false).when(light0).isDoorOrWindow();
      doReturn(false).when(light0).isMovable();
      doReturn(false).when(light0).isResizable();
      doReturn(false).when(light0).isTexturable();
      HomeLight homeLight0 = new HomeLight(light0);
      assertNotNull(homeLight0);
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertNull(homeLight0.getDescription());
      assertFalse(homeLight0.isTexturable());
      assertNull(homeLight0.getName());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertNull(homeLight0.getShininess());
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertFalse(homeLight0.isDeformable());
      assertFalse(homeLight0.isResizable());
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertTrue(homeLight0.isVisible());
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertFalse(homeLight0.isNameVisible());
      assertNull(homeLight0.getCurrency());
      assertFalse(homeLight0.isMovable());
      assertNull(homeLight0.getCatalogId());
      assertNull(homeLight0.getColor());
      assertFalse(homeLight0.isModelMirrored());
      assertFalse(homeLight0.isBackFaceShown());
      
      homeLight0.setY((-1.0F));
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertNull(homeLight0.getDescription());
      assertFalse(homeLight0.isTexturable());
      assertNull(homeLight0.getName());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertNull(homeLight0.getShininess());
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals((-1.0F), homeLight0.getY(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertFalse(homeLight0.isDeformable());
      assertFalse(homeLight0.isResizable());
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertTrue(homeLight0.isVisible());
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertFalse(homeLight0.isNameVisible());
      assertNull(homeLight0.getCurrency());
      assertFalse(homeLight0.isMovable());
      assertNull(homeLight0.getCatalogId());
      assertNull(homeLight0.getColor());
      assertFalse(homeLight0.isModelMirrored());
      assertFalse(homeLight0.isBackFaceShown());
      
      BigDecimal bigDecimal0 = homeLight0.getValueAddedTax();
      assertNull(bigDecimal0);
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertNull(homeLight0.getDescription());
      assertFalse(homeLight0.isTexturable());
      assertNull(homeLight0.getName());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertNull(homeLight0.getShininess());
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals((-1.0F), homeLight0.getY(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertFalse(homeLight0.isDeformable());
      assertFalse(homeLight0.isResizable());
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertTrue(homeLight0.isVisible());
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertFalse(homeLight0.isNameVisible());
      assertNull(homeLight0.getCurrency());
      assertFalse(homeLight0.isMovable());
      assertNull(homeLight0.getCatalogId());
      assertNull(homeLight0.getColor());
      assertFalse(homeLight0.isModelMirrored());
      assertFalse(homeLight0.isBackFaceShown());
      
      BigDecimal bigDecimal1 = homeLight0.getValueAddedTax();
      assertNull(bigDecimal1);
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertNull(homeLight0.getDescription());
      assertFalse(homeLight0.isTexturable());
      assertNull(homeLight0.getName());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertNull(homeLight0.getShininess());
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals((-1.0F), homeLight0.getY(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertFalse(homeLight0.isDeformable());
      assertFalse(homeLight0.isResizable());
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertTrue(homeLight0.isVisible());
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertFalse(homeLight0.isNameVisible());
      assertNull(homeLight0.getCurrency());
      assertFalse(homeLight0.isMovable());
      assertNull(homeLight0.getCatalogId());
      assertNull(homeLight0.getColor());
      assertFalse(homeLight0.isModelMirrored());
      assertFalse(homeLight0.isBackFaceShown());
      
      String string0 = homeLight0.getName();
      assertNull(string0);
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertNull(homeLight0.getDescription());
      assertFalse(homeLight0.isTexturable());
      assertNull(homeLight0.getName());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertNull(homeLight0.getShininess());
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals((-1.0F), homeLight0.getY(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertFalse(homeLight0.isDeformable());
      assertFalse(homeLight0.isResizable());
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertTrue(homeLight0.isVisible());
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertFalse(homeLight0.isNameVisible());
      assertNull(homeLight0.getCurrency());
      assertFalse(homeLight0.isMovable());
      assertNull(homeLight0.getCatalogId());
      assertNull(homeLight0.getColor());
      assertFalse(homeLight0.isModelMirrored());
      assertFalse(homeLight0.isBackFaceShown());
      
      Level level0 = homeLight0.getLevel();
      assertNull(level0);
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertNull(homeLight0.getDescription());
      assertFalse(homeLight0.isTexturable());
      assertNull(homeLight0.getName());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertNull(homeLight0.getShininess());
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals((-1.0F), homeLight0.getY(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertFalse(homeLight0.isDeformable());
      assertFalse(homeLight0.isResizable());
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertTrue(homeLight0.isVisible());
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertFalse(homeLight0.isNameVisible());
      assertNull(homeLight0.getCurrency());
      assertFalse(homeLight0.isMovable());
      assertNull(homeLight0.getCatalogId());
      assertNull(homeLight0.getColor());
      assertFalse(homeLight0.isModelMirrored());
      assertFalse(homeLight0.isBackFaceShown());
      
      HomeLight homeLight1 = homeLight0.clone();
      assertNotNull(homeLight1);
      assertNotSame(homeLight0, homeLight1);
      assertNotSame(homeLight1, homeLight0);
      assertFalse(homeLight1.equals((Object)homeLight0));
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertNull(homeLight0.getDescription());
      assertFalse(homeLight0.isTexturable());
      assertNull(homeLight0.getName());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertNull(homeLight0.getShininess());
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals((-1.0F), homeLight0.getY(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertFalse(homeLight0.isDeformable());
      assertFalse(homeLight0.isResizable());
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertTrue(homeLight0.isVisible());
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertFalse(homeLight0.isNameVisible());
      assertNull(homeLight0.getCurrency());
      assertFalse(homeLight0.isMovable());
      assertNull(homeLight0.getCatalogId());
      assertNull(homeLight0.getColor());
      assertFalse(homeLight0.isModelMirrored());
      assertFalse(homeLight0.isBackFaceShown());
      assertEquals(0.0F, homeLight1.getElevation(), 0.01F);
      assertFalse(homeLight1.isTexturable());
      assertNull(homeLight1.getName());
      assertNull(homeLight1.getDescription());
      assertFalse(homeLight1.isDoorOrWindow());
      assertEquals(0.5F, homeLight1.getPower(), 0.01F);
      assertEquals(0.0F, homeLight1.getAngle(), 0.01F);
      assertNull(homeLight1.getCatalogId());
      assertFalse(homeLight1.isModelMirrored());
      assertNull(homeLight1.getColor());
      assertFalse(homeLight1.isBackFaceShown());
      assertEquals(0.0F, homeLight1.getNameYOffset(), 0.01F);
      assertFalse(homeLight1.isMovable());
      assertFalse(homeLight1.isNameVisible());
      assertEquals(0.0F, homeLight1.getWidth(), 0.01F);
      assertEquals(0.0F, homeLight1.getHeight(), 0.01F);
      assertNull(homeLight1.getCurrency());
      assertNull(homeLight1.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight1.getNameAngle(), 0.01F);
      assertEquals((-1.0F), homeLight1.getY(), 0.01F);
      assertFalse(homeLight1.isResizable());
      assertEquals(0.0F, homeLight1.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeLight1.getDepth(), 0.01F);
      assertEquals(0.0F, homeLight1.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight1.getX(), 0.01F);
      assertFalse(homeLight1.isDeformable());
      assertNull(homeLight1.getShininess());
      assertTrue(homeLight1.isVisible());
      
      homeLight1.setName((String) null);
      assertNotSame(homeLight0, homeLight1);
      assertNotSame(homeLight1, homeLight0);
      assertFalse(homeLight0.equals((Object)homeLight1));
      assertFalse(homeLight1.equals((Object)homeLight0));
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertNull(homeLight0.getDescription());
      assertFalse(homeLight0.isTexturable());
      assertNull(homeLight0.getName());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertNull(homeLight0.getShininess());
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals((-1.0F), homeLight0.getY(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertFalse(homeLight0.isDeformable());
      assertFalse(homeLight0.isResizable());
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertTrue(homeLight0.isVisible());
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertFalse(homeLight0.isNameVisible());
      assertNull(homeLight0.getCurrency());
      assertFalse(homeLight0.isMovable());
      assertNull(homeLight0.getCatalogId());
      assertNull(homeLight0.getColor());
      assertFalse(homeLight0.isModelMirrored());
      assertFalse(homeLight0.isBackFaceShown());
      assertEquals(0.0F, homeLight1.getElevation(), 0.01F);
      assertFalse(homeLight1.isTexturable());
      assertNull(homeLight1.getName());
      assertNull(homeLight1.getDescription());
      assertFalse(homeLight1.isDoorOrWindow());
      assertEquals(0.5F, homeLight1.getPower(), 0.01F);
      assertEquals(0.0F, homeLight1.getAngle(), 0.01F);
      assertNull(homeLight1.getCatalogId());
      assertFalse(homeLight1.isModelMirrored());
      assertNull(homeLight1.getColor());
      assertFalse(homeLight1.isBackFaceShown());
      assertEquals(0.0F, homeLight1.getNameYOffset(), 0.01F);
      assertFalse(homeLight1.isMovable());
      assertFalse(homeLight1.isNameVisible());
      assertEquals(0.0F, homeLight1.getWidth(), 0.01F);
      assertEquals(0.0F, homeLight1.getHeight(), 0.01F);
      assertNull(homeLight1.getCurrency());
      assertNull(homeLight1.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight1.getNameAngle(), 0.01F);
      assertEquals((-1.0F), homeLight1.getY(), 0.01F);
      assertFalse(homeLight1.isResizable());
      assertEquals(0.0F, homeLight1.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeLight1.getDepth(), 0.01F);
      assertEquals(0.0F, homeLight1.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight1.getX(), 0.01F);
      assertFalse(homeLight1.isDeformable());
      assertNull(homeLight1.getShininess());
      assertTrue(homeLight1.isVisible());
      
      boolean boolean0 = homeLight0.isNameVisible();
      assertNotSame(homeLight0, homeLight1);
      assertFalse(homeLight0.equals((Object)homeLight1));
      assertFalse(boolean0);
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertNull(homeLight0.getDescription());
      assertFalse(homeLight0.isTexturable());
      assertNull(homeLight0.getName());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertNull(homeLight0.getShininess());
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals((-1.0F), homeLight0.getY(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertFalse(homeLight0.isDeformable());
      assertFalse(homeLight0.isResizable());
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertTrue(homeLight0.isVisible());
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertFalse(homeLight0.isNameVisible());
      assertNull(homeLight0.getCurrency());
      assertFalse(homeLight0.isMovable());
      assertNull(homeLight0.getCatalogId());
      assertNull(homeLight0.getColor());
      assertFalse(homeLight0.isModelMirrored());
      assertFalse(homeLight0.isBackFaceShown());
      
      PropertyChangeListener propertyChangeListener0 = mock(PropertyChangeListener.class, new ViolatedAssumptionAnswer());
      PropertyChangeListenerProxy propertyChangeListenerProxy0 = new PropertyChangeListenerProxy("com.eteks.sweethome3d.tools.temporarySubFolder", propertyChangeListener0);
      assertNotNull(propertyChangeListenerProxy0);
      assertEquals("com.eteks.sweethome3d.tools.temporarySubFolder", propertyChangeListenerProxy0.getPropertyName());
      
      homeLight1.removePropertyChangeListener(propertyChangeListenerProxy0);
      assertNotSame(homeLight0, homeLight1);
      assertNotSame(homeLight1, homeLight0);
      assertFalse(homeLight0.equals((Object)homeLight1));
      assertFalse(homeLight1.equals((Object)homeLight0));
      assertEquals("com.eteks.sweethome3d.tools.temporarySubFolder", propertyChangeListenerProxy0.getPropertyName());
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertNull(homeLight0.getDescription());
      assertFalse(homeLight0.isTexturable());
      assertNull(homeLight0.getName());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertNull(homeLight0.getShininess());
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals((-1.0F), homeLight0.getY(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertFalse(homeLight0.isDeformable());
      assertFalse(homeLight0.isResizable());
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertTrue(homeLight0.isVisible());
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertFalse(homeLight0.isNameVisible());
      assertNull(homeLight0.getCurrency());
      assertFalse(homeLight0.isMovable());
      assertNull(homeLight0.getCatalogId());
      assertNull(homeLight0.getColor());
      assertFalse(homeLight0.isModelMirrored());
      assertFalse(homeLight0.isBackFaceShown());
      assertEquals(0.0F, homeLight1.getElevation(), 0.01F);
      assertFalse(homeLight1.isTexturable());
      assertNull(homeLight1.getName());
      assertNull(homeLight1.getDescription());
      assertFalse(homeLight1.isDoorOrWindow());
      assertEquals(0.5F, homeLight1.getPower(), 0.01F);
      assertEquals(0.0F, homeLight1.getAngle(), 0.01F);
      assertNull(homeLight1.getCatalogId());
      assertFalse(homeLight1.isModelMirrored());
      assertNull(homeLight1.getColor());
      assertFalse(homeLight1.isBackFaceShown());
      assertEquals(0.0F, homeLight1.getNameYOffset(), 0.01F);
      assertFalse(homeLight1.isMovable());
      assertFalse(homeLight1.isNameVisible());
      assertEquals(0.0F, homeLight1.getWidth(), 0.01F);
      assertEquals(0.0F, homeLight1.getHeight(), 0.01F);
      assertNull(homeLight1.getCurrency());
      assertNull(homeLight1.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight1.getNameAngle(), 0.01F);
      assertEquals((-1.0F), homeLight1.getY(), 0.01F);
      assertFalse(homeLight1.isResizable());
      assertEquals(0.0F, homeLight1.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeLight1.getDepth(), 0.01F);
      assertEquals(0.0F, homeLight1.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight1.getX(), 0.01F);
      assertFalse(homeLight1.isDeformable());
      assertNull(homeLight1.getShininess());
      assertTrue(homeLight1.isVisible());
      
      homeLight0.setLevel((Level) null);
      assertNotSame(homeLight0, homeLight1);
      assertFalse(homeLight0.equals((Object)homeLight1));
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertNull(homeLight0.getDescription());
      assertFalse(homeLight0.isTexturable());
      assertNull(homeLight0.getName());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertNull(homeLight0.getShininess());
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals((-1.0F), homeLight0.getY(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertFalse(homeLight0.isDeformable());
      assertFalse(homeLight0.isResizable());
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertTrue(homeLight0.isVisible());
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertFalse(homeLight0.isNameVisible());
      assertNull(homeLight0.getCurrency());
      assertFalse(homeLight0.isMovable());
      assertNull(homeLight0.getCatalogId());
      assertNull(homeLight0.getColor());
      assertFalse(homeLight0.isModelMirrored());
      assertFalse(homeLight0.isBackFaceShown());
      
      String string1 = homeLight1.getName();
      assertNull(string1);
      assertNotSame(homeLight0, homeLight1);
      assertNotSame(homeLight1, homeLight0);
      assertFalse(homeLight0.equals((Object)homeLight1));
      assertFalse(homeLight1.equals((Object)homeLight0));
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertNull(homeLight0.getDescription());
      assertFalse(homeLight0.isTexturable());
      assertNull(homeLight0.getName());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertNull(homeLight0.getShininess());
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals((-1.0F), homeLight0.getY(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertFalse(homeLight0.isDeformable());
      assertFalse(homeLight0.isResizable());
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertTrue(homeLight0.isVisible());
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertFalse(homeLight0.isNameVisible());
      assertNull(homeLight0.getCurrency());
      assertFalse(homeLight0.isMovable());
      assertNull(homeLight0.getCatalogId());
      assertNull(homeLight0.getColor());
      assertFalse(homeLight0.isModelMirrored());
      assertFalse(homeLight0.isBackFaceShown());
      assertEquals(0.0F, homeLight1.getElevation(), 0.01F);
      assertFalse(homeLight1.isTexturable());
      assertNull(homeLight1.getName());
      assertNull(homeLight1.getDescription());
      assertFalse(homeLight1.isDoorOrWindow());
      assertEquals(0.5F, homeLight1.getPower(), 0.01F);
      assertEquals(0.0F, homeLight1.getAngle(), 0.01F);
      assertNull(homeLight1.getCatalogId());
      assertFalse(homeLight1.isModelMirrored());
      assertNull(homeLight1.getColor());
      assertFalse(homeLight1.isBackFaceShown());
      assertEquals(0.0F, homeLight1.getNameYOffset(), 0.01F);
      assertFalse(homeLight1.isMovable());
      assertFalse(homeLight1.isNameVisible());
      assertEquals(0.0F, homeLight1.getWidth(), 0.01F);
      assertEquals(0.0F, homeLight1.getHeight(), 0.01F);
      assertNull(homeLight1.getCurrency());
      assertNull(homeLight1.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight1.getNameAngle(), 0.01F);
      assertEquals((-1.0F), homeLight1.getY(), 0.01F);
      assertFalse(homeLight1.isResizable());
      assertEquals(0.0F, homeLight1.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeLight1.getDepth(), 0.01F);
      assertEquals(0.0F, homeLight1.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight1.getX(), 0.01F);
      assertFalse(homeLight1.isDeformable());
      assertNull(homeLight1.getShininess());
      assertTrue(homeLight1.isVisible());
  }

  @Test(timeout = 4000)
  public void test166()  throws Throwable  {
      Light light0 = mock(Light.class, new ViolatedAssumptionAnswer());
      doReturn((LightSource[]) null).when(light0).getLightSources();
      doReturn((Integer) null).when(light0).getColor();
      doReturn((String) null).when(light0).getCurrency();
      doReturn(0.0F).when(light0).getDepth();
      doReturn((String) null).when(light0).getDescription();
      doReturn(0.0F).when(light0).getElevation();
      doReturn(0.0F).when(light0).getHeight();
      doReturn((Content) null).when(light0).getIcon();
      doReturn((Content) null).when(light0).getModel();
      doReturn((float[][]) null).when(light0).getModelRotation();
      doReturn((String) null).when(light0).getName();
      doReturn((Content) null).when(light0).getPlanIcon();
      doReturn((BigDecimal) null).when(light0).getPrice();
      doReturn((String) null).when(light0).getStaircaseCutOutShape();
      doReturn((BigDecimal) null).when(light0).getValueAddedTaxPercentage();
      doReturn(0.0F).when(light0).getWidth();
      doReturn(false).when(light0).isBackFaceShown();
      doReturn(false).when(light0).isDeformable();
      doReturn(false).when(light0).isDoorOrWindow();
      doReturn(false).when(light0).isMovable();
      doReturn(false).when(light0).isResizable();
      doReturn(false).when(light0).isTexturable();
      HomeLight homeLight0 = new HomeLight(light0);
      assertNotNull(homeLight0);
      assertNull(homeLight0.getColor());
      assertFalse(homeLight0.isModelMirrored());
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertFalse(homeLight0.isTexturable());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertTrue(homeLight0.isVisible());
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertNull(homeLight0.getCurrency());
      assertFalse(homeLight0.isMovable());
      assertFalse(homeLight0.isDeformable());
      assertFalse(homeLight0.isResizable());
      assertNull(homeLight0.getCatalogId());
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertNull(homeLight0.getShininess());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertNull(homeLight0.getDescription());
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertFalse(homeLight0.isBackFaceShown());
      assertFalse(homeLight0.isNameVisible());
      assertNull(homeLight0.getName());
      
      homeLight0.setElevation((-1.0F));
      assertNull(homeLight0.getColor());
      assertFalse(homeLight0.isModelMirrored());
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      assertEquals((-1.0F), homeLight0.getGroundElevation(), 0.01F);
      assertFalse(homeLight0.isTexturable());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertTrue(homeLight0.isVisible());
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertNull(homeLight0.getCurrency());
      assertFalse(homeLight0.isMovable());
      assertFalse(homeLight0.isDeformable());
      assertFalse(homeLight0.isResizable());
      assertNull(homeLight0.getCatalogId());
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertNull(homeLight0.getShininess());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertNull(homeLight0.getDescription());
      assertEquals((-1.0F), homeLight0.getElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertFalse(homeLight0.isBackFaceShown());
      assertFalse(homeLight0.isNameVisible());
      assertNull(homeLight0.getName());
      
      homeLight0.setElevation((-1.0F));
      assertNull(homeLight0.getColor());
      assertFalse(homeLight0.isModelMirrored());
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      assertEquals((-1.0F), homeLight0.getGroundElevation(), 0.01F);
      assertFalse(homeLight0.isTexturable());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertTrue(homeLight0.isVisible());
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertNull(homeLight0.getCurrency());
      assertFalse(homeLight0.isMovable());
      assertFalse(homeLight0.isDeformable());
      assertFalse(homeLight0.isResizable());
      assertNull(homeLight0.getCatalogId());
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertNull(homeLight0.getShininess());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertNull(homeLight0.getDescription());
      assertEquals((-1.0F), homeLight0.getElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertFalse(homeLight0.isBackFaceShown());
      assertFalse(homeLight0.isNameVisible());
      assertNull(homeLight0.getName());
      
      boolean boolean0 = homeLight0.isTopLeftPointAt(0.6792272F, 0.0F, (-1.0F));
      assertFalse(boolean0);
      assertNull(homeLight0.getColor());
      assertFalse(homeLight0.isModelMirrored());
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      assertEquals((-1.0F), homeLight0.getGroundElevation(), 0.01F);
      assertFalse(homeLight0.isTexturable());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertTrue(homeLight0.isVisible());
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertNull(homeLight0.getCurrency());
      assertFalse(homeLight0.isMovable());
      assertFalse(homeLight0.isDeformable());
      assertFalse(homeLight0.isResizable());
      assertNull(homeLight0.getCatalogId());
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertNull(homeLight0.getShininess());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertNull(homeLight0.getDescription());
      assertEquals((-1.0F), homeLight0.getElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertFalse(homeLight0.isBackFaceShown());
      assertFalse(homeLight0.isNameVisible());
      assertNull(homeLight0.getName());
      
      HomeLight homeLight1 = homeLight0.clone();
      assertNotNull(homeLight1);
      assertNotSame(homeLight0, homeLight1);
      assertNotSame(homeLight1, homeLight0);
      assertFalse(homeLight1.equals((Object)homeLight0));
      assertNull(homeLight0.getColor());
      assertFalse(homeLight0.isModelMirrored());
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      assertEquals((-1.0F), homeLight0.getGroundElevation(), 0.01F);
      assertFalse(homeLight0.isTexturable());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertTrue(homeLight0.isVisible());
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertNull(homeLight0.getCurrency());
      assertFalse(homeLight0.isMovable());
      assertFalse(homeLight0.isDeformable());
      assertFalse(homeLight0.isResizable());
      assertNull(homeLight0.getCatalogId());
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertNull(homeLight0.getShininess());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertNull(homeLight0.getDescription());
      assertEquals((-1.0F), homeLight0.getElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertFalse(homeLight0.isBackFaceShown());
      assertFalse(homeLight0.isNameVisible());
      assertNull(homeLight0.getName());
      assertTrue(homeLight1.isVisible());
      assertEquals(0.0F, homeLight1.getWidth(), 0.01F);
      assertEquals(0.0F, homeLight1.getNameYOffset(), 0.01F);
      assertNull(homeLight1.getColor());
      assertNull(homeLight1.getShininess());
      assertEquals(0.5F, homeLight1.getPower(), 0.01F);
      assertNull(homeLight1.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight1.getNameAngle(), 0.01F);
      assertFalse(homeLight1.isMovable());
      assertFalse(homeLight1.isDeformable());
      assertFalse(homeLight1.isResizable());
      assertEquals(0.0F, homeLight1.getHeight(), 0.01F);
      assertNull(homeLight1.getCurrency());
      assertFalse(homeLight1.isTexturable());
      assertNull(homeLight1.getDescription());
      assertEquals((-1.0F), homeLight1.getElevation(), 0.01F);
      assertEquals(0.0F, homeLight1.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeLight1.getDepth(), 0.01F);
      assertEquals(0.0F, homeLight1.getY(), 0.01F);
      assertNull(homeLight1.getCatalogId());
      assertEquals(0.0F, homeLight1.getX(), 0.01F);
      assertEquals((-1.0F), homeLight1.getGroundElevation(), 0.01F);
      assertFalse(homeLight1.isBackFaceShown());
      assertFalse(homeLight1.isDoorOrWindow());
      assertFalse(homeLight1.isModelMirrored());
      assertNull(homeLight1.getName());
      assertEquals(0.0F, homeLight1.getAngle(), 0.01F);
      assertFalse(homeLight1.isNameVisible());
      
      HomeLight homeLight2 = null;
      try {
        homeLight2 = new HomeLight(homeLight1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.eteks.sweethome3d.model.HomePieceOfFurniture", e);
      }
  }

  @Test(timeout = 4000)
  public void test167()  throws Throwable  {
      Light light0 = mock(Light.class, new ViolatedAssumptionAnswer());
      doReturn((LightSource[]) null).when(light0).getLightSources();
      doReturn((Integer) null).when(light0).getColor();
      doReturn((String) null).when(light0).getCurrency();
      doReturn(0.0F).when(light0).getDepth();
      doReturn((String) null).when(light0).getDescription();
      doReturn(0.0F).when(light0).getElevation();
      doReturn(0.0F).when(light0).getHeight();
      doReturn((Content) null).when(light0).getIcon();
      doReturn((Content) null).when(light0).getModel();
      doReturn((float[][]) null).when(light0).getModelRotation();
      doReturn((String) null).when(light0).getName();
      doReturn((Content) null).when(light0).getPlanIcon();
      doReturn((BigDecimal) null).when(light0).getPrice();
      doReturn((String) null).when(light0).getStaircaseCutOutShape();
      doReturn((BigDecimal) null).when(light0).getValueAddedTaxPercentage();
      doReturn(0.0F).when(light0).getWidth();
      doReturn(false).when(light0).isBackFaceShown();
      doReturn(false).when(light0).isDeformable();
      doReturn(false).when(light0).isDoorOrWindow();
      doReturn(false).when(light0).isMovable();
      doReturn(false).when(light0).isResizable();
      doReturn(false).when(light0).isTexturable();
      HomeLight homeLight0 = new HomeLight(light0);
      assertNotNull(homeLight0);
      assertTrue(homeLight0.isVisible());
      assertNull(homeLight0.getCurrency());
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertFalse(homeLight0.isDeformable());
      assertFalse(homeLight0.isMovable());
      assertFalse(homeLight0.isNameVisible());
      assertFalse(homeLight0.isResizable());
      assertFalse(homeLight0.isDoorOrWindow());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertNull(homeLight0.getShininess());
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertFalse(homeLight0.isTexturable());
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertNull(homeLight0.getDescription());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertNull(homeLight0.getName());
      assertFalse(homeLight0.isModelMirrored());
      assertNull(homeLight0.getColor());
      assertFalse(homeLight0.isBackFaceShown());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertNull(homeLight0.getCatalogId());
      
      homeLight0.setNameVisible(true);
      assertTrue(homeLight0.isNameVisible());
      assertTrue(homeLight0.isVisible());
      assertNull(homeLight0.getCurrency());
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertFalse(homeLight0.isDeformable());
      assertFalse(homeLight0.isMovable());
      assertFalse(homeLight0.isResizable());
      assertFalse(homeLight0.isDoorOrWindow());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertNull(homeLight0.getShininess());
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertFalse(homeLight0.isTexturable());
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertNull(homeLight0.getDescription());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertNull(homeLight0.getName());
      assertFalse(homeLight0.isModelMirrored());
      assertNull(homeLight0.getColor());
      assertFalse(homeLight0.isBackFaceShown());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertNull(homeLight0.getCatalogId());
      
      homeLight0.setY((-1098.0F));
      assertTrue(homeLight0.isNameVisible());
      assertTrue(homeLight0.isVisible());
      assertNull(homeLight0.getCurrency());
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertFalse(homeLight0.isDeformable());
      assertFalse(homeLight0.isMovable());
      assertFalse(homeLight0.isResizable());
      assertFalse(homeLight0.isDoorOrWindow());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertNull(homeLight0.getShininess());
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertFalse(homeLight0.isTexturable());
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertNull(homeLight0.getDescription());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertNull(homeLight0.getName());
      assertFalse(homeLight0.isModelMirrored());
      assertNull(homeLight0.getColor());
      assertFalse(homeLight0.isBackFaceShown());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertEquals((-1098.0F), homeLight0.getY(), 0.01F);
      assertNull(homeLight0.getCatalogId());
      
      homeLight0.setVisible(false);
      assertTrue(homeLight0.isNameVisible());
      assertNull(homeLight0.getCurrency());
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertFalse(homeLight0.isVisible());
      assertFalse(homeLight0.isDeformable());
      assertFalse(homeLight0.isMovable());
      assertFalse(homeLight0.isResizable());
      assertFalse(homeLight0.isDoorOrWindow());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertNull(homeLight0.getShininess());
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertFalse(homeLight0.isTexturable());
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertNull(homeLight0.getDescription());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertNull(homeLight0.getName());
      assertFalse(homeLight0.isModelMirrored());
      assertNull(homeLight0.getColor());
      assertFalse(homeLight0.isBackFaceShown());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertEquals((-1098.0F), homeLight0.getY(), 0.01F);
      assertNull(homeLight0.getCatalogId());
      
      float float0 = homeLight0.getWidth();
      assertEquals(0.0F, float0, 0.01F);
      assertTrue(homeLight0.isNameVisible());
      assertNull(homeLight0.getCurrency());
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertFalse(homeLight0.isVisible());
      assertFalse(homeLight0.isDeformable());
      assertFalse(homeLight0.isMovable());
      assertFalse(homeLight0.isResizable());
      assertFalse(homeLight0.isDoorOrWindow());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertNull(homeLight0.getShininess());
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertFalse(homeLight0.isTexturable());
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertNull(homeLight0.getDescription());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertNull(homeLight0.getName());
      assertFalse(homeLight0.isModelMirrored());
      assertNull(homeLight0.getColor());
      assertFalse(homeLight0.isBackFaceShown());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertEquals((-1098.0F), homeLight0.getY(), 0.01F);
      assertNull(homeLight0.getCatalogId());
      
      homeLight0.setNameVisible(false);
      assertNull(homeLight0.getCurrency());
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertFalse(homeLight0.isVisible());
      assertFalse(homeLight0.isDeformable());
      assertFalse(homeLight0.isMovable());
      assertFalse(homeLight0.isNameVisible());
      assertFalse(homeLight0.isResizable());
      assertFalse(homeLight0.isDoorOrWindow());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertNull(homeLight0.getShininess());
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertFalse(homeLight0.isTexturable());
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertNull(homeLight0.getDescription());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertNull(homeLight0.getName());
      assertFalse(homeLight0.isModelMirrored());
      assertNull(homeLight0.getColor());
      assertFalse(homeLight0.isBackFaceShown());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertEquals((-1098.0F), homeLight0.getY(), 0.01F);
      assertNull(homeLight0.getCatalogId());
      
      // Undeclared exception!
      try { 
        homeLight0.setHeight((-1.0F));
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Piece isn't resizable
         //
         verifyException("com.eteks.sweethome3d.model.HomePieceOfFurniture", e);
      }
  }

  @Test(timeout = 4000)
  public void test168()  throws Throwable  {
      LightSource[] lightSourceArray0 = new LightSource[2];
      LightSource lightSource0 = new LightSource((-1.0F), 1431655765, 700.4569F, 1431655765);
      assertNotNull(lightSource0);
      assertEquals((-1.0F), lightSource0.getX(), 0.01F);
      assertNull(lightSource0.getDiameter());
      assertEquals(1.43165581E9F, lightSource0.getY(), 0.01F);
      assertEquals(1431655765, lightSource0.getColor());
      assertEquals(700.4569F, lightSource0.getZ(), 0.01F);
      
      lightSourceArray0[1] = lightSource0;
      Integer integer0 = new Integer(1431655765);
      assertNotNull(integer0);
      assertEquals(1431655765, (int)integer0);
      
      Light light0 = mock(Light.class, new ViolatedAssumptionAnswer());
      doReturn((LightSource[]) null).when(light0).getLightSources();
      doReturn((Integer) null).when(light0).getColor();
      doReturn((String) null).when(light0).getCurrency();
      doReturn(0.0F).when(light0).getDepth();
      doReturn((String) null).when(light0).getDescription();
      doReturn(0.0F).when(light0).getElevation();
      doReturn(0.0F).when(light0).getHeight();
      doReturn((Content) null).when(light0).getIcon();
      doReturn((Content) null).when(light0).getModel();
      doReturn((float[][]) null).when(light0).getModelRotation();
      doReturn((String) null).when(light0).getName();
      doReturn((Content) null).when(light0).getPlanIcon();
      doReturn((BigDecimal) null).when(light0).getPrice();
      doReturn((String) null).when(light0).getStaircaseCutOutShape();
      doReturn((BigDecimal) null).when(light0).getValueAddedTaxPercentage();
      doReturn(0.0F).when(light0).getWidth();
      doReturn(false).when(light0).isBackFaceShown();
      doReturn(false).when(light0).isDeformable();
      doReturn(false).when(light0).isDoorOrWindow();
      doReturn(false).when(light0).isMovable();
      doReturn(false).when(light0).isResizable();
      doReturn(false).when(light0).isTexturable();
      HomeLight homeLight0 = new HomeLight(light0);
      assertNotNull(homeLight0);
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertNull(homeLight0.getDescription());
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertNull(homeLight0.getName());
      assertFalse(homeLight0.isDoorOrWindow());
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertNull(homeLight0.getShininess());
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertFalse(homeLight0.isTexturable());
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertTrue(homeLight0.isVisible());
      assertNull(homeLight0.getCurrency());
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertFalse(homeLight0.isNameVisible());
      assertFalse(homeLight0.isDeformable());
      assertFalse(homeLight0.isMovable());
      assertFalse(homeLight0.isResizable());
      assertFalse(homeLight0.isBackFaceShown());
      assertFalse(homeLight0.isModelMirrored());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertNull(homeLight0.getColor());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertNull(homeLight0.getCatalogId());
      
      int int0 = Float.floatToIntBits(1.0F);
      assertEquals(1065353216, int0);
      
      String string0 = homeLight0.getDescription();
      assertNull(string0);
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertNull(homeLight0.getDescription());
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertNull(homeLight0.getName());
      assertFalse(homeLight0.isDoorOrWindow());
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertNull(homeLight0.getShininess());
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertFalse(homeLight0.isTexturable());
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertTrue(homeLight0.isVisible());
      assertNull(homeLight0.getCurrency());
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertFalse(homeLight0.isNameVisible());
      assertFalse(homeLight0.isDeformable());
      assertFalse(homeLight0.isMovable());
      assertFalse(homeLight0.isResizable());
      assertFalse(homeLight0.isBackFaceShown());
      assertFalse(homeLight0.isModelMirrored());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertNull(homeLight0.getColor());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertNull(homeLight0.getCatalogId());
      
      boolean boolean0 = homeLight0.isNameCenterPointAt(679.4F, 1065353216, 679.4F);
      assertFalse(boolean0);
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertNull(homeLight0.getDescription());
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertNull(homeLight0.getName());
      assertFalse(homeLight0.isDoorOrWindow());
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertNull(homeLight0.getShininess());
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertFalse(homeLight0.isTexturable());
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertTrue(homeLight0.isVisible());
      assertNull(homeLight0.getCurrency());
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertFalse(homeLight0.isNameVisible());
      assertFalse(homeLight0.isDeformable());
      assertFalse(homeLight0.isMovable());
      assertFalse(homeLight0.isResizable());
      assertFalse(homeLight0.isBackFaceShown());
      assertFalse(homeLight0.isModelMirrored());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertNull(homeLight0.getColor());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertNull(homeLight0.getCatalogId());
      
      TextStyle textStyle0 = homeLight0.getNameStyle();
      assertNull(textStyle0);
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertNull(homeLight0.getDescription());
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertNull(homeLight0.getName());
      assertFalse(homeLight0.isDoorOrWindow());
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertNull(homeLight0.getShininess());
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertFalse(homeLight0.isTexturable());
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertTrue(homeLight0.isVisible());
      assertNull(homeLight0.getCurrency());
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertFalse(homeLight0.isNameVisible());
      assertFalse(homeLight0.isDeformable());
      assertFalse(homeLight0.isMovable());
      assertFalse(homeLight0.isResizable());
      assertFalse(homeLight0.isBackFaceShown());
      assertFalse(homeLight0.isModelMirrored());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertNull(homeLight0.getColor());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertNull(homeLight0.getCatalogId());
  }

  @Test(timeout = 4000)
  public void test169()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      Light light0 = mock(Light.class, new ViolatedAssumptionAnswer());
      doReturn((LightSource[]) null).when(light0).getLightSources();
      doReturn((Integer) null).when(light0).getColor();
      doReturn((String) null).when(light0).getCurrency();
      doReturn(0.0F).when(light0).getDepth();
      doReturn((String) null).when(light0).getDescription();
      doReturn(0.0F).when(light0).getElevation();
      doReturn(0.0F).when(light0).getHeight();
      doReturn((Content) null).when(light0).getIcon();
      doReturn((Content) null).when(light0).getModel();
      doReturn((float[][]) null).when(light0).getModelRotation();
      doReturn((String) null).when(light0).getName();
      doReturn((Content) null).when(light0).getPlanIcon();
      doReturn((BigDecimal) null).when(light0).getPrice();
      doReturn((String) null).when(light0).getStaircaseCutOutShape();
      doReturn((BigDecimal) null).when(light0).getValueAddedTaxPercentage();
      doReturn(0.0F).when(light0).getWidth();
      doReturn(false).when(light0).isBackFaceShown();
      doReturn(false).when(light0).isDeformable();
      doReturn(false).when(light0).isDoorOrWindow();
      doReturn(false).when(light0).isMovable();
      doReturn(false).when(light0).isResizable();
      doReturn(false).when(light0).isTexturable();
      Integer integer0 = Integer.valueOf((-2146099508));
      assertNotNull(integer0);
      assertEquals((-2146099508), (int)integer0);
      
      System.setCurrentTimeMillis((-2146099508));
      HomeLight homeLight0 = new HomeLight(light0);
      assertNotNull(homeLight0);
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      assertFalse(homeLight0.isModelMirrored());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertFalse(homeLight0.isBackFaceShown());
      assertFalse(homeLight0.isNameVisible());
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertNull(homeLight0.getDescription());
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertFalse(homeLight0.isDeformable());
      assertTrue(homeLight0.isVisible());
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertFalse(homeLight0.isTexturable());
      assertFalse(homeLight0.isResizable());
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertFalse(homeLight0.isMovable());
      assertNull(homeLight0.getShininess());
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertNull(homeLight0.getName());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertNull(homeLight0.getCurrency());
      assertNull(homeLight0.getCatalogId());
      assertNull(homeLight0.getColor());
      
      HomeLight homeLight1 = homeLight0.clone();
      assertNotNull(homeLight1);
      assertNotSame(homeLight0, homeLight1);
      assertNotSame(homeLight1, homeLight0);
      assertFalse(homeLight1.equals((Object)homeLight0));
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      assertFalse(homeLight0.isModelMirrored());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertFalse(homeLight0.isBackFaceShown());
      assertFalse(homeLight0.isNameVisible());
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertNull(homeLight0.getDescription());
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertFalse(homeLight0.isDeformable());
      assertTrue(homeLight0.isVisible());
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertFalse(homeLight0.isTexturable());
      assertFalse(homeLight0.isResizable());
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertFalse(homeLight0.isMovable());
      assertNull(homeLight0.getShininess());
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertNull(homeLight0.getName());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertNull(homeLight0.getCurrency());
      assertNull(homeLight0.getCatalogId());
      assertNull(homeLight0.getColor());
      assertEquals(0.0F, homeLight1.getDepth(), 0.01F);
      assertEquals(0.0F, homeLight1.getNameXOffset(), 0.01F);
      assertNull(homeLight1.getName());
      assertEquals(0.5F, homeLight1.getPower(), 0.01F);
      assertNull(homeLight1.getDescription());
      assertEquals(0.0F, homeLight1.getNameAngle(), 0.01F);
      assertNull(homeLight1.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight1.getElevation(), 0.01F);
      assertNull(homeLight1.getCatalogId());
      assertNull(homeLight1.getShininess());
      assertEquals(0.0F, homeLight1.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight1.getAngle(), 0.01F);
      assertFalse(homeLight1.isDoorOrWindow());
      assertFalse(homeLight1.isTexturable());
      assertFalse(homeLight1.isBackFaceShown());
      assertEquals(0.0F, homeLight1.getWidth(), 0.01F);
      assertFalse(homeLight1.isDeformable());
      assertFalse(homeLight1.isNameVisible());
      assertNull(homeLight1.getCurrency());
      assertFalse(homeLight1.isModelMirrored());
      assertNull(homeLight1.getColor());
      assertTrue(homeLight1.isVisible());
      assertEquals(0.0F, homeLight1.getNameYOffset(), 0.01F);
      assertEquals(0.0F, homeLight1.getY(), 0.01F);
      assertEquals(0.0F, homeLight1.getX(), 0.01F);
      assertFalse(homeLight1.isMovable());
      assertEquals(0.0F, homeLight1.getHeight(), 0.01F);
      assertFalse(homeLight1.isResizable());
      
      boolean boolean1 = homeLight0.isBackFaceShown();
      assertNotSame(homeLight0, homeLight1);
      assertFalse(homeLight0.equals((Object)homeLight1));
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      assertFalse(homeLight0.isModelMirrored());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertFalse(homeLight0.isBackFaceShown());
      assertFalse(homeLight0.isNameVisible());
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertNull(homeLight0.getDescription());
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertFalse(homeLight0.isDeformable());
      assertTrue(homeLight0.isVisible());
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertFalse(homeLight0.isTexturable());
      assertFalse(homeLight0.isResizable());
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertFalse(homeLight0.isMovable());
      assertNull(homeLight0.getShininess());
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertNull(homeLight0.getName());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertNull(homeLight0.getCurrency());
      assertNull(homeLight0.getCatalogId());
      assertNull(homeLight0.getColor());
      
      boolean boolean2 = homeLight1.isTopLeftPointAt((-2146099508), (-2146099508), (-2146099508));
      assertNotSame(homeLight0, homeLight1);
      assertNotSame(homeLight1, homeLight0);
      assertFalse(homeLight0.equals((Object)homeLight1));
      assertFalse(homeLight1.equals((Object)homeLight0));
      assertFalse(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2);
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      assertFalse(homeLight0.isModelMirrored());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertFalse(homeLight0.isBackFaceShown());
      assertFalse(homeLight0.isNameVisible());
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertNull(homeLight0.getDescription());
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertFalse(homeLight0.isDeformable());
      assertTrue(homeLight0.isVisible());
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertFalse(homeLight0.isTexturable());
      assertFalse(homeLight0.isResizable());
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertFalse(homeLight0.isMovable());
      assertNull(homeLight0.getShininess());
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertNull(homeLight0.getName());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertNull(homeLight0.getCurrency());
      assertNull(homeLight0.getCatalogId());
      assertNull(homeLight0.getColor());
      assertEquals(0.0F, homeLight1.getDepth(), 0.01F);
      assertEquals(0.0F, homeLight1.getNameXOffset(), 0.01F);
      assertNull(homeLight1.getName());
      assertEquals(0.5F, homeLight1.getPower(), 0.01F);
      assertNull(homeLight1.getDescription());
      assertEquals(0.0F, homeLight1.getNameAngle(), 0.01F);
      assertNull(homeLight1.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight1.getElevation(), 0.01F);
      assertNull(homeLight1.getCatalogId());
      assertNull(homeLight1.getShininess());
      assertEquals(0.0F, homeLight1.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight1.getAngle(), 0.01F);
      assertFalse(homeLight1.isDoorOrWindow());
      assertFalse(homeLight1.isTexturable());
      assertFalse(homeLight1.isBackFaceShown());
      assertEquals(0.0F, homeLight1.getWidth(), 0.01F);
      assertFalse(homeLight1.isDeformable());
      assertFalse(homeLight1.isNameVisible());
      assertNull(homeLight1.getCurrency());
      assertFalse(homeLight1.isModelMirrored());
      assertNull(homeLight1.getColor());
      assertTrue(homeLight1.isVisible());
      assertEquals(0.0F, homeLight1.getNameYOffset(), 0.01F);
      assertEquals(0.0F, homeLight1.getY(), 0.01F);
      assertEquals(0.0F, homeLight1.getX(), 0.01F);
      assertFalse(homeLight1.isMovable());
      assertEquals(0.0F, homeLight1.getHeight(), 0.01F);
      assertFalse(homeLight1.isResizable());
      
      homeLight0.setMovable(true);
      assertNotSame(homeLight0, homeLight1);
      assertFalse(homeLight0.equals((Object)homeLight1));
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      assertFalse(homeLight0.isModelMirrored());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertFalse(homeLight0.isBackFaceShown());
      assertFalse(homeLight0.isNameVisible());
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertNull(homeLight0.getDescription());
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertFalse(homeLight0.isDeformable());
      assertTrue(homeLight0.isVisible());
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertFalse(homeLight0.isTexturable());
      assertFalse(homeLight0.isResizable());
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertNull(homeLight0.getShininess());
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertTrue(homeLight0.isMovable());
      assertNull(homeLight0.getName());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertNull(homeLight0.getCurrency());
      assertNull(homeLight0.getCatalogId());
      assertNull(homeLight0.getColor());
      
      float[][] floatArray0 = homeLight1.getPoints();
      assertEquals(4, floatArray0.length);
      assertNotNull(floatArray0);
      assertNotSame(homeLight0, homeLight1);
      assertNotSame(homeLight1, homeLight0);
      assertFalse(homeLight0.equals((Object)homeLight1));
      assertFalse(homeLight1.equals((Object)homeLight0));
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      assertFalse(homeLight0.isModelMirrored());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertFalse(homeLight0.isBackFaceShown());
      assertFalse(homeLight0.isNameVisible());
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertNull(homeLight0.getDescription());
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertFalse(homeLight0.isDeformable());
      assertTrue(homeLight0.isVisible());
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertFalse(homeLight0.isTexturable());
      assertFalse(homeLight0.isResizable());
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertNull(homeLight0.getShininess());
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertTrue(homeLight0.isMovable());
      assertNull(homeLight0.getName());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertNull(homeLight0.getCurrency());
      assertNull(homeLight0.getCatalogId());
      assertNull(homeLight0.getColor());
      assertEquals(0.0F, homeLight1.getDepth(), 0.01F);
      assertEquals(0.0F, homeLight1.getNameXOffset(), 0.01F);
      assertNull(homeLight1.getName());
      assertEquals(0.5F, homeLight1.getPower(), 0.01F);
      assertNull(homeLight1.getDescription());
      assertEquals(0.0F, homeLight1.getNameAngle(), 0.01F);
      assertNull(homeLight1.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight1.getElevation(), 0.01F);
      assertNull(homeLight1.getCatalogId());
      assertNull(homeLight1.getShininess());
      assertEquals(0.0F, homeLight1.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight1.getAngle(), 0.01F);
      assertFalse(homeLight1.isDoorOrWindow());
      assertFalse(homeLight1.isTexturable());
      assertFalse(homeLight1.isBackFaceShown());
      assertEquals(0.0F, homeLight1.getWidth(), 0.01F);
      assertFalse(homeLight1.isDeformable());
      assertFalse(homeLight1.isNameVisible());
      assertNull(homeLight1.getCurrency());
      assertFalse(homeLight1.isModelMirrored());
      assertNull(homeLight1.getColor());
      assertTrue(homeLight1.isVisible());
      assertEquals(0.0F, homeLight1.getNameYOffset(), 0.01F);
      assertEquals(0.0F, homeLight1.getY(), 0.01F);
      assertEquals(0.0F, homeLight1.getX(), 0.01F);
      assertFalse(homeLight1.isMovable());
      assertEquals(0.0F, homeLight1.getHeight(), 0.01F);
      assertFalse(homeLight1.isResizable());
  }

  @Test(timeout = 4000)
  public void test170()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      Light light0 = mock(Light.class, new ViolatedAssumptionAnswer());
      doReturn((LightSource[]) null).when(light0).getLightSources();
      doReturn((Integer) null).when(light0).getColor();
      doReturn((String) null).when(light0).getCurrency();
      doReturn(0.0F).when(light0).getDepth();
      doReturn((String) null).when(light0).getDescription();
      doReturn(0.0F).when(light0).getElevation();
      doReturn(0.0F).when(light0).getHeight();
      doReturn((Content) null).when(light0).getIcon();
      doReturn((Content) null).when(light0).getModel();
      doReturn((float[][]) null).when(light0).getModelRotation();
      doReturn((String) null).when(light0).getName();
      doReturn((Content) null).when(light0).getPlanIcon();
      doReturn((BigDecimal) null).when(light0).getPrice();
      doReturn((String) null).when(light0).getStaircaseCutOutShape();
      doReturn((BigDecimal) null).when(light0).getValueAddedTaxPercentage();
      doReturn(0.0F).when(light0).getWidth();
      doReturn(false).when(light0).isBackFaceShown();
      doReturn(false).when(light0).isDeformable();
      doReturn(false).when(light0).isDoorOrWindow();
      doReturn(false).when(light0).isMovable();
      doReturn(false).when(light0).isResizable();
      doReturn(false).when(light0).isTexturable();
      HomeLight homeLight0 = new HomeLight(light0);
      assertNotNull(homeLight0);
      assertNull(homeLight0.getName());
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertNull(homeLight0.getDescription());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertNull(homeLight0.getCatalogId());
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertNull(homeLight0.getShininess());
      assertFalse(homeLight0.isMovable());
      assertFalse(homeLight0.isResizable());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertNull(homeLight0.getCurrency());
      assertFalse(homeLight0.isDeformable());
      assertFalse(homeLight0.isNameVisible());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertFalse(homeLight0.isModelMirrored());
      assertNull(homeLight0.getColor());
      assertTrue(homeLight0.isVisible());
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      assertFalse(homeLight0.isTexturable());
      assertFalse(homeLight0.isBackFaceShown());
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      
      homeLight0.setElevation((-1.0F));
      assertNull(homeLight0.getName());
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertNull(homeLight0.getDescription());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertNull(homeLight0.getCatalogId());
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertNull(homeLight0.getShininess());
      assertFalse(homeLight0.isMovable());
      assertFalse(homeLight0.isResizable());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertNull(homeLight0.getCurrency());
      assertFalse(homeLight0.isDeformable());
      assertFalse(homeLight0.isNameVisible());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertFalse(homeLight0.isModelMirrored());
      assertNull(homeLight0.getColor());
      assertTrue(homeLight0.isVisible());
      assertEquals((-1.0F), homeLight0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      assertFalse(homeLight0.isTexturable());
      assertFalse(homeLight0.isBackFaceShown());
      assertEquals((-1.0F), homeLight0.getElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      
      homeLight0.setX((-1.0F));
      assertNull(homeLight0.getName());
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertNull(homeLight0.getDescription());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertNull(homeLight0.getCatalogId());
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertNull(homeLight0.getShininess());
      assertFalse(homeLight0.isMovable());
      assertFalse(homeLight0.isResizable());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertNull(homeLight0.getCurrency());
      assertFalse(homeLight0.isDeformable());
      assertFalse(homeLight0.isNameVisible());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertFalse(homeLight0.isModelMirrored());
      assertNull(homeLight0.getColor());
      assertTrue(homeLight0.isVisible());
      assertEquals((-1.0F), homeLight0.getGroundElevation(), 0.01F);
      assertEquals((-1.0F), homeLight0.getX(), 0.01F);
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      assertFalse(homeLight0.isTexturable());
      assertFalse(homeLight0.isBackFaceShown());
      assertEquals((-1.0F), homeLight0.getElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      
      homeLight0.setNameAngle((-1.0F));
      assertNull(homeLight0.getName());
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertNull(homeLight0.getDescription());
      assertEquals(5.2831855F, homeLight0.getNameAngle(), 0.01F);
      assertNull(homeLight0.getCatalogId());
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertNull(homeLight0.getShininess());
      assertFalse(homeLight0.isMovable());
      assertFalse(homeLight0.isResizable());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertNull(homeLight0.getCurrency());
      assertFalse(homeLight0.isDeformable());
      assertFalse(homeLight0.isNameVisible());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertFalse(homeLight0.isModelMirrored());
      assertNull(homeLight0.getColor());
      assertTrue(homeLight0.isVisible());
      assertEquals((-1.0F), homeLight0.getGroundElevation(), 0.01F);
      assertEquals((-1.0F), homeLight0.getX(), 0.01F);
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      assertFalse(homeLight0.isTexturable());
      assertFalse(homeLight0.isBackFaceShown());
      assertEquals((-1.0F), homeLight0.getElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      
      homeLight0.setY((-1.0F));
      assertNull(homeLight0.getName());
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertNull(homeLight0.getDescription());
      assertEquals(5.2831855F, homeLight0.getNameAngle(), 0.01F);
      assertNull(homeLight0.getCatalogId());
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertNull(homeLight0.getShininess());
      assertFalse(homeLight0.isMovable());
      assertFalse(homeLight0.isResizable());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertNull(homeLight0.getCurrency());
      assertFalse(homeLight0.isDeformable());
      assertFalse(homeLight0.isNameVisible());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertFalse(homeLight0.isModelMirrored());
      assertNull(homeLight0.getColor());
      assertTrue(homeLight0.isVisible());
      assertEquals((-1.0F), homeLight0.getGroundElevation(), 0.01F);
      assertEquals((-1.0F), homeLight0.getX(), 0.01F);
      assertEquals((-1.0F), homeLight0.getY(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      assertFalse(homeLight0.isTexturable());
      assertFalse(homeLight0.isBackFaceShown());
      assertEquals((-1.0F), homeLight0.getElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      
      boolean boolean1 = homeLight0.isBottomLeftPointAt((-1.0F), (-1.0F), (-1.0F));
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      assertNull(homeLight0.getName());
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertNull(homeLight0.getDescription());
      assertEquals(5.2831855F, homeLight0.getNameAngle(), 0.01F);
      assertNull(homeLight0.getCatalogId());
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertNull(homeLight0.getShininess());
      assertFalse(homeLight0.isMovable());
      assertFalse(homeLight0.isResizable());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertNull(homeLight0.getCurrency());
      assertFalse(homeLight0.isDeformable());
      assertFalse(homeLight0.isNameVisible());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertFalse(homeLight0.isModelMirrored());
      assertNull(homeLight0.getColor());
      assertTrue(homeLight0.isVisible());
      assertEquals((-1.0F), homeLight0.getGroundElevation(), 0.01F);
      assertEquals((-1.0F), homeLight0.getX(), 0.01F);
      assertEquals((-1.0F), homeLight0.getY(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      assertFalse(homeLight0.isTexturable());
      assertFalse(homeLight0.isBackFaceShown());
      assertEquals((-1.0F), homeLight0.getElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      
      BigDecimal bigDecimal0 = homeLight0.getPriceValueAddedTaxIncluded();
      assertNull(bigDecimal0);
      assertNull(homeLight0.getName());
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertNull(homeLight0.getDescription());
      assertEquals(5.2831855F, homeLight0.getNameAngle(), 0.01F);
      assertNull(homeLight0.getCatalogId());
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertNull(homeLight0.getShininess());
      assertFalse(homeLight0.isMovable());
      assertFalse(homeLight0.isResizable());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertNull(homeLight0.getCurrency());
      assertFalse(homeLight0.isDeformable());
      assertFalse(homeLight0.isNameVisible());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertFalse(homeLight0.isModelMirrored());
      assertNull(homeLight0.getColor());
      assertTrue(homeLight0.isVisible());
      assertEquals((-1.0F), homeLight0.getGroundElevation(), 0.01F);
      assertEquals((-1.0F), homeLight0.getX(), 0.01F);
      assertEquals((-1.0F), homeLight0.getY(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      assertFalse(homeLight0.isTexturable());
      assertFalse(homeLight0.isBackFaceShown());
      assertEquals((-1.0F), homeLight0.getElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      
      homeLight0.setDescription("CW9$NS K:I");
      assertNull(homeLight0.getName());
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertEquals(5.2831855F, homeLight0.getNameAngle(), 0.01F);
      assertNull(homeLight0.getCatalogId());
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertNull(homeLight0.getShininess());
      assertFalse(homeLight0.isMovable());
      assertFalse(homeLight0.isResizable());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertNull(homeLight0.getCurrency());
      assertEquals("CW9$NS K:I", homeLight0.getDescription());
      assertFalse(homeLight0.isDeformable());
      assertFalse(homeLight0.isNameVisible());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertFalse(homeLight0.isModelMirrored());
      assertNull(homeLight0.getColor());
      assertTrue(homeLight0.isVisible());
      assertEquals((-1.0F), homeLight0.getGroundElevation(), 0.01F);
      assertEquals((-1.0F), homeLight0.getX(), 0.01F);
      assertEquals((-1.0F), homeLight0.getY(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      assertFalse(homeLight0.isTexturable());
      assertFalse(homeLight0.isBackFaceShown());
      assertEquals((-1.0F), homeLight0.getElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      
      // Undeclared exception!
      try { 
        homeLight0.setTexture((HomeTexture) null);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Piece isn't texturable
         //
         verifyException("com.eteks.sweethome3d.model.HomePieceOfFurniture", e);
      }
  }

  @Test(timeout = 4000)
  public void test171()  throws Throwable  {
      String[] stringArray0 = new String[8];
      stringArray0[0] = "";
      Float float0 = new Float((-1729.3374F));
      assertNotNull(float0);
      assertEquals((-1729.3374F), (float)float0, 0.01F);
      
      URLContent uRLContent0 = new URLContent((URL) null);
      assertNotNull(uRLContent0);
      
      Sash[] sashArray0 = new Sash[8];
      Sash sash0 = new Sash((-1.0F), 0.3926991F, (-368.692F), (-368.692F), 0.0F);
      assertNotNull(sash0);
      assertEquals(0.3926991F, sash0.getYAxis(), 0.01F);
      assertEquals(0.0F, sash0.getEndAngle(), 0.01F);
      assertEquals((-368.692F), sash0.getStartAngle(), 0.01F);
      assertEquals((-368.692F), sash0.getWidth(), 0.01F);
      assertEquals((-1.0F), sash0.getXAxis(), 0.01F);
      
      sashArray0[5] = sash0;
      Sash sash1 = new Sash((-1485.2021F), (-368.692F), (-1.0F), 0.3926991F, (-1729.3374F));
      assertNotNull(sash1);
      assertFalse(sash1.equals((Object)sash0));
      assertEquals((-368.692F), sash1.getYAxis(), 0.01F);
      assertEquals((-1.0F), sash1.getWidth(), 0.01F);
      assertEquals((-1729.3374F), sash1.getEndAngle(), 0.01F);
      assertEquals(0.3926991F, sash1.getStartAngle(), 0.01F);
      assertEquals((-1485.2021F), sash1.getXAxis(), 0.01F);
      
      sashArray0[6] = sash1;
      float[][] floatArray0 = new float[3][1];
      float[] floatArray1 = new float[3];
      floatArray1[2] = 2.0F;
      floatArray0[0] = floatArray1;
      float[] floatArray2 = new float[3];
      assertFalse(floatArray2.equals((Object)floatArray1));
      
      floatArray2[2] = (-1.0F);
      floatArray2[1] = (-1.0F);
      floatArray2[2] = (-1.0F);
      floatArray0[1] = floatArray2;
      floatArray0[2] = floatArray1;
      CatalogDoorOrWindow catalogDoorOrWindow0 = new CatalogDoorOrWindow("", "", "", "", stringArray0, (Long) null, float0, uRLContent0, uRLContent0, uRLContent0, (-368.692F), (-368.692F), (-1.0F), (-368.692F), true, (-368.692F), 0.0F, sashArray0, floatArray0, "", true, true, true, (BigDecimal) null, (BigDecimal) null, "");
      assertEquals(8, stringArray0.length);
      assertEquals(8, sashArray0.length);
      assertEquals(3, floatArray0.length);
      assertNotNull(catalogDoorOrWindow0);
      assertEquals("", catalogDoorOrWindow0.getCreator());
      assertEquals("", catalogDoorOrWindow0.getName());
      assertTrue(catalogDoorOrWindow0.isMovable());
      assertEquals("", catalogDoorOrWindow0.getDescription());
      assertEquals((-368.692F), catalogDoorOrWindow0.getElevation(), 0.01F);
      assertEquals("", catalogDoorOrWindow0.getInformation());
      assertTrue(catalogDoorOrWindow0.isDeformable());
      assertEquals((-368.692F), catalogDoorOrWindow0.getDepth(), 0.01F);
      assertNull(catalogDoorOrWindow0.getCreationDate());
      assertEquals((-368.692F), catalogDoorOrWindow0.getWallThickness(), 0.01F);
      assertFalse(catalogDoorOrWindow0.isModifiable());
      assertFalse(catalogDoorOrWindow0.isBackFaceShown());
      assertEquals(0.3926991F, catalogDoorOrWindow0.getIconYaw(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isProportional());
      assertTrue(catalogDoorOrWindow0.isTexturable());
      assertEquals("", catalogDoorOrWindow0.getCurrency());
      assertTrue(catalogDoorOrWindow0.isDoorOrWindow());
      assertEquals(0.0F, catalogDoorOrWindow0.getWallDistance(), 0.01F);
      assertEquals((-368.692F), catalogDoorOrWindow0.getWidth(), 0.01F);
      assertEquals("", catalogDoorOrWindow0.getId());
      assertNull(catalogDoorOrWindow0.getColor());
      assertNull(catalogDoorOrWindow0.getStaircaseCutOutShape());
      assertTrue(catalogDoorOrWindow0.isResizable());
      assertEquals((-1729.3374F), catalogDoorOrWindow0.getGrade(), 0.01F);
      assertEquals((-1.0F), catalogDoorOrWindow0.getHeight(), 0.01F);
      
      HomeDoorOrWindow homeDoorOrWindow0 = new HomeDoorOrWindow(catalogDoorOrWindow0);
      assertEquals(8, stringArray0.length);
      assertEquals(8, sashArray0.length);
      assertEquals(3, floatArray0.length);
      assertNotNull(homeDoorOrWindow0);
      assertEquals("", catalogDoorOrWindow0.getCreator());
      assertEquals("", catalogDoorOrWindow0.getName());
      assertTrue(catalogDoorOrWindow0.isMovable());
      assertEquals("", catalogDoorOrWindow0.getDescription());
      assertEquals((-368.692F), catalogDoorOrWindow0.getElevation(), 0.01F);
      assertEquals("", catalogDoorOrWindow0.getInformation());
      assertTrue(catalogDoorOrWindow0.isDeformable());
      assertEquals((-368.692F), catalogDoorOrWindow0.getDepth(), 0.01F);
      assertNull(catalogDoorOrWindow0.getCreationDate());
      assertEquals((-368.692F), catalogDoorOrWindow0.getWallThickness(), 0.01F);
      assertFalse(catalogDoorOrWindow0.isModifiable());
      assertFalse(catalogDoorOrWindow0.isBackFaceShown());
      assertEquals(0.3926991F, catalogDoorOrWindow0.getIconYaw(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isProportional());
      assertTrue(catalogDoorOrWindow0.isTexturable());
      assertEquals("", catalogDoorOrWindow0.getCurrency());
      assertTrue(catalogDoorOrWindow0.isDoorOrWindow());
      assertEquals(0.0F, catalogDoorOrWindow0.getWallDistance(), 0.01F);
      assertEquals((-368.692F), catalogDoorOrWindow0.getWidth(), 0.01F);
      assertEquals("", catalogDoorOrWindow0.getId());
      assertNull(catalogDoorOrWindow0.getColor());
      assertNull(catalogDoorOrWindow0.getStaircaseCutOutShape());
      assertTrue(catalogDoorOrWindow0.isResizable());
      assertEquals((-1729.3374F), catalogDoorOrWindow0.getGrade(), 0.01F);
      assertEquals((-1.0F), catalogDoorOrWindow0.getHeight(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getNameXOffset(), 0.01F);
      assertEquals("", homeDoorOrWindow0.getName());
      assertEquals((-368.692F), homeDoorOrWindow0.getDepth(), 0.01F);
      assertTrue(homeDoorOrWindow0.isResizable());
      assertTrue(homeDoorOrWindow0.isMovable());
      assertNull(homeDoorOrWindow0.getShininess());
      assertNull(homeDoorOrWindow0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeDoorOrWindow0.getNameAngle(), 0.01F);
      assertTrue(homeDoorOrWindow0.isDoorOrWindow());
      assertTrue(homeDoorOrWindow0.isTexturable());
      assertEquals(0.0F, homeDoorOrWindow0.getAngle(), 0.01F);
      assertEquals("", homeDoorOrWindow0.getDescription());
      assertEquals((-368.692F), homeDoorOrWindow0.getWidth(), 0.01F);
      assertEquals("", homeDoorOrWindow0.getCurrency());
      assertEquals(0.0F, homeDoorOrWindow0.getNameYOffset(), 0.01F);
      assertTrue(homeDoorOrWindow0.isDeformable());
      assertFalse(homeDoorOrWindow0.isNameVisible());
      assertNull(homeDoorOrWindow0.getColor());
      assertFalse(homeDoorOrWindow0.isBoundToWall());
      assertTrue(homeDoorOrWindow0.isVisible());
      assertFalse(homeDoorOrWindow0.isBackFaceShown());
      assertFalse(homeDoorOrWindow0.isModelMirrored());
      assertEquals((-1.0F), homeDoorOrWindow0.getHeight(), 0.01F);
      assertEquals((-184.346F), homeDoorOrWindow0.getX(), 0.01F);
      assertEquals((-184.346F), homeDoorOrWindow0.getY(), 0.01F);
      assertEquals((-368.692F), homeDoorOrWindow0.getWallThickness(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getWallDistance(), 0.01F);
      assertEquals((-368.692F), homeDoorOrWindow0.getGroundElevation(), 0.01F);
      assertEquals("", homeDoorOrWindow0.getCatalogId());
      assertEquals((-368.692F), homeDoorOrWindow0.getElevation(), 0.01F);
      
      homeDoorOrWindow0.setNameXOffset(2.0F);
      assertEquals(8, stringArray0.length);
      assertEquals(8, sashArray0.length);
      assertEquals(3, floatArray0.length);
      assertEquals("", catalogDoorOrWindow0.getCreator());
      assertEquals("", catalogDoorOrWindow0.getName());
      assertTrue(catalogDoorOrWindow0.isMovable());
      assertEquals("", catalogDoorOrWindow0.getDescription());
      assertEquals((-368.692F), catalogDoorOrWindow0.getElevation(), 0.01F);
      assertEquals("", catalogDoorOrWindow0.getInformation());
      assertTrue(catalogDoorOrWindow0.isDeformable());
      assertEquals((-368.692F), catalogDoorOrWindow0.getDepth(), 0.01F);
      assertNull(catalogDoorOrWindow0.getCreationDate());
      assertEquals((-368.692F), catalogDoorOrWindow0.getWallThickness(), 0.01F);
      assertFalse(catalogDoorOrWindow0.isModifiable());
      assertFalse(catalogDoorOrWindow0.isBackFaceShown());
      assertEquals(0.3926991F, catalogDoorOrWindow0.getIconYaw(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isProportional());
      assertTrue(catalogDoorOrWindow0.isTexturable());
      assertEquals("", catalogDoorOrWindow0.getCurrency());
      assertTrue(catalogDoorOrWindow0.isDoorOrWindow());
      assertEquals(0.0F, catalogDoorOrWindow0.getWallDistance(), 0.01F);
      assertEquals((-368.692F), catalogDoorOrWindow0.getWidth(), 0.01F);
      assertEquals("", catalogDoorOrWindow0.getId());
      assertNull(catalogDoorOrWindow0.getColor());
      assertNull(catalogDoorOrWindow0.getStaircaseCutOutShape());
      assertTrue(catalogDoorOrWindow0.isResizable());
      assertEquals((-1729.3374F), catalogDoorOrWindow0.getGrade(), 0.01F);
      assertEquals((-1.0F), catalogDoorOrWindow0.getHeight(), 0.01F);
      assertEquals(2.0F, homeDoorOrWindow0.getNameXOffset(), 0.01F);
      assertEquals("", homeDoorOrWindow0.getName());
      assertEquals((-368.692F), homeDoorOrWindow0.getDepth(), 0.01F);
      assertTrue(homeDoorOrWindow0.isResizable());
      assertTrue(homeDoorOrWindow0.isMovable());
      assertNull(homeDoorOrWindow0.getShininess());
      assertNull(homeDoorOrWindow0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeDoorOrWindow0.getNameAngle(), 0.01F);
      assertTrue(homeDoorOrWindow0.isDoorOrWindow());
      assertTrue(homeDoorOrWindow0.isTexturable());
      assertEquals(0.0F, homeDoorOrWindow0.getAngle(), 0.01F);
      assertEquals("", homeDoorOrWindow0.getDescription());
      assertEquals((-368.692F), homeDoorOrWindow0.getWidth(), 0.01F);
      assertEquals("", homeDoorOrWindow0.getCurrency());
      assertEquals(0.0F, homeDoorOrWindow0.getNameYOffset(), 0.01F);
      assertTrue(homeDoorOrWindow0.isDeformable());
      assertFalse(homeDoorOrWindow0.isNameVisible());
      assertNull(homeDoorOrWindow0.getColor());
      assertFalse(homeDoorOrWindow0.isBoundToWall());
      assertTrue(homeDoorOrWindow0.isVisible());
      assertFalse(homeDoorOrWindow0.isBackFaceShown());
      assertFalse(homeDoorOrWindow0.isModelMirrored());
      assertEquals((-1.0F), homeDoorOrWindow0.getHeight(), 0.01F);
      assertEquals((-184.346F), homeDoorOrWindow0.getX(), 0.01F);
      assertEquals((-184.346F), homeDoorOrWindow0.getY(), 0.01F);
      assertEquals((-368.692F), homeDoorOrWindow0.getWallThickness(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getWallDistance(), 0.01F);
      assertEquals((-368.692F), homeDoorOrWindow0.getGroundElevation(), 0.01F);
      assertEquals("", homeDoorOrWindow0.getCatalogId());
      assertEquals((-368.692F), homeDoorOrWindow0.getElevation(), 0.01F);
      
      homeDoorOrWindow0.setShininess((Float) 2.0F);
      assertEquals(8, stringArray0.length);
      assertEquals(8, sashArray0.length);
      assertEquals(3, floatArray0.length);
      assertEquals("", catalogDoorOrWindow0.getCreator());
      assertEquals("", catalogDoorOrWindow0.getName());
      assertTrue(catalogDoorOrWindow0.isMovable());
      assertEquals("", catalogDoorOrWindow0.getDescription());
      assertEquals((-368.692F), catalogDoorOrWindow0.getElevation(), 0.01F);
      assertEquals("", catalogDoorOrWindow0.getInformation());
      assertTrue(catalogDoorOrWindow0.isDeformable());
      assertEquals((-368.692F), catalogDoorOrWindow0.getDepth(), 0.01F);
      assertNull(catalogDoorOrWindow0.getCreationDate());
      assertEquals((-368.692F), catalogDoorOrWindow0.getWallThickness(), 0.01F);
      assertFalse(catalogDoorOrWindow0.isModifiable());
      assertFalse(catalogDoorOrWindow0.isBackFaceShown());
      assertEquals(0.3926991F, catalogDoorOrWindow0.getIconYaw(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isProportional());
      assertTrue(catalogDoorOrWindow0.isTexturable());
      assertEquals("", catalogDoorOrWindow0.getCurrency());
      assertTrue(catalogDoorOrWindow0.isDoorOrWindow());
      assertEquals(0.0F, catalogDoorOrWindow0.getWallDistance(), 0.01F);
      assertEquals((-368.692F), catalogDoorOrWindow0.getWidth(), 0.01F);
      assertEquals("", catalogDoorOrWindow0.getId());
      assertNull(catalogDoorOrWindow0.getColor());
      assertNull(catalogDoorOrWindow0.getStaircaseCutOutShape());
      assertTrue(catalogDoorOrWindow0.isResizable());
      assertEquals((-1729.3374F), catalogDoorOrWindow0.getGrade(), 0.01F);
      assertEquals((-1.0F), catalogDoorOrWindow0.getHeight(), 0.01F);
      assertEquals(2.0F, homeDoorOrWindow0.getNameXOffset(), 0.01F);
      assertEquals("", homeDoorOrWindow0.getName());
      assertEquals((-368.692F), homeDoorOrWindow0.getDepth(), 0.01F);
      assertTrue(homeDoorOrWindow0.isResizable());
      assertTrue(homeDoorOrWindow0.isMovable());
      assertEquals(2.0F, homeDoorOrWindow0.getShininess(), 0.01F);
      assertNull(homeDoorOrWindow0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeDoorOrWindow0.getNameAngle(), 0.01F);
      assertTrue(homeDoorOrWindow0.isDoorOrWindow());
      assertTrue(homeDoorOrWindow0.isTexturable());
      assertEquals(0.0F, homeDoorOrWindow0.getAngle(), 0.01F);
      assertEquals("", homeDoorOrWindow0.getDescription());
      assertEquals((-368.692F), homeDoorOrWindow0.getWidth(), 0.01F);
      assertEquals("", homeDoorOrWindow0.getCurrency());
      assertEquals(0.0F, homeDoorOrWindow0.getNameYOffset(), 0.01F);
      assertTrue(homeDoorOrWindow0.isDeformable());
      assertFalse(homeDoorOrWindow0.isNameVisible());
      assertNull(homeDoorOrWindow0.getColor());
      assertFalse(homeDoorOrWindow0.isBoundToWall());
      assertTrue(homeDoorOrWindow0.isVisible());
      assertFalse(homeDoorOrWindow0.isBackFaceShown());
      assertFalse(homeDoorOrWindow0.isModelMirrored());
      assertEquals((-1.0F), homeDoorOrWindow0.getHeight(), 0.01F);
      assertEquals((-184.346F), homeDoorOrWindow0.getX(), 0.01F);
      assertEquals((-184.346F), homeDoorOrWindow0.getY(), 0.01F);
      assertEquals((-368.692F), homeDoorOrWindow0.getWallThickness(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getWallDistance(), 0.01F);
      assertEquals((-368.692F), homeDoorOrWindow0.getGroundElevation(), 0.01F);
      assertEquals("", homeDoorOrWindow0.getCatalogId());
      assertEquals((-368.692F), homeDoorOrWindow0.getElevation(), 0.01F);
      
      Random.setNextRandom(2);
  }

  @Test(timeout = 4000)
  public void test172()  throws Throwable  {
      LightSource[] lightSourceArray0 = new LightSource[2];
      LightSource lightSource0 = new LightSource((-1.0F), (-1457.99F), 381.9F, 1431655765);
      assertNotNull(lightSource0);
      assertEquals(1431655765, lightSource0.getColor());
      assertNull(lightSource0.getDiameter());
      assertEquals((-1457.99F), lightSource0.getY(), 0.01F);
      assertEquals(381.9F, lightSource0.getZ(), 0.01F);
      assertEquals((-1.0F), lightSource0.getX(), 0.01F);
      
      LightSource lightSource1 = new LightSource((-1.0F), (-69.47F), 700.4569F, (-853));
      assertNotNull(lightSource1);
      assertFalse(lightSource1.equals((Object)lightSource0));
      assertEquals((-853), lightSource1.getColor());
      assertNull(lightSource1.getDiameter());
      assertEquals((-1.0F), lightSource1.getX(), 0.01F);
      assertEquals((-69.47F), lightSource1.getY(), 0.01F);
      assertEquals(700.4569F, lightSource1.getZ(), 0.01F);
      
      lightSourceArray0[1] = lightSource1;
      Integer integer0 = new Integer((-853));
      assertNotNull(integer0);
      assertEquals((-853), (int)integer0);
      
      Light light0 = mock(Light.class, new ViolatedAssumptionAnswer());
      doReturn((LightSource[]) null).when(light0).getLightSources();
      doReturn((Integer) null).when(light0).getColor();
      doReturn((String) null).when(light0).getCurrency();
      doReturn(0.0F).when(light0).getDepth();
      doReturn((String) null).when(light0).getDescription();
      doReturn(0.0F).when(light0).getElevation();
      doReturn(0.0F).when(light0).getHeight();
      doReturn((Content) null).when(light0).getIcon();
      doReturn((Content) null).when(light0).getModel();
      doReturn((float[][]) null).when(light0).getModelRotation();
      doReturn((String) null).when(light0).getName();
      doReturn((Content) null).when(light0).getPlanIcon();
      doReturn((BigDecimal) null).when(light0).getPrice();
      doReturn((String) null).when(light0).getStaircaseCutOutShape();
      doReturn((BigDecimal) null).when(light0).getValueAddedTaxPercentage();
      doReturn(0.0F).when(light0).getWidth();
      doReturn(false).when(light0).isBackFaceShown();
      doReturn(false).when(light0).isDeformable();
      doReturn(false).when(light0).isDoorOrWindow();
      doReturn(false).when(light0).isMovable();
      doReturn(false).when(light0).isResizable();
      doReturn(false).when(light0).isTexturable();
      byte[] byteArray0 = new byte[5];
      byteArray0[1] = (byte)1;
      byteArray0[3] = (byte) (-32);
      byteArray0[4] = (byte)62;
      boolean boolean0 = FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      assertEquals(5, byteArray0.length);
      assertFalse(boolean0);
      assertArrayEquals(new byte[] {(byte)0, (byte)1, (byte)0, (byte) (-32), (byte)62}, byteArray0);
      
      HomeLight homeLight0 = new HomeLight(light0);
      assertNotNull(homeLight0);
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertFalse(homeLight0.isTexturable());
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertNull(homeLight0.getName());
      assertNull(homeLight0.getDescription());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertFalse(homeLight0.isResizable());
      assertFalse(homeLight0.isDeformable());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertNull(homeLight0.getShininess());
      assertTrue(homeLight0.isVisible());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertFalse(homeLight0.isMovable());
      assertFalse(homeLight0.isNameVisible());
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertNull(homeLight0.getCurrency());
      assertFalse(homeLight0.isBackFaceShown());
      assertFalse(homeLight0.isModelMirrored());
      assertNull(homeLight0.getColor());
      assertNull(homeLight0.getCatalogId());
      
      float float0 = (-1.0F);
      homeLight0.setY((-1.0F));
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertFalse(homeLight0.isTexturable());
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertNull(homeLight0.getName());
      assertNull(homeLight0.getDescription());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      assertEquals((-1.0F), homeLight0.getY(), 0.01F);
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertFalse(homeLight0.isResizable());
      assertFalse(homeLight0.isDeformable());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertNull(homeLight0.getShininess());
      assertTrue(homeLight0.isVisible());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertFalse(homeLight0.isMovable());
      assertFalse(homeLight0.isNameVisible());
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertNull(homeLight0.getCurrency());
      assertFalse(homeLight0.isBackFaceShown());
      assertFalse(homeLight0.isModelMirrored());
      assertNull(homeLight0.getColor());
      assertNull(homeLight0.getCatalogId());
      
      int int0 = Float.floatToIntBits((-1710.0F));
      assertEquals((-992624640), int0);
      
      int int1 = Float.floatToIntBits((-1710.0F));
      assertTrue(int1 == int0);
      assertEquals((-992624640), int1);
      
      int int2 = Float.floatToIntBits((-992624640));
      assertFalse(int2 == int0);
      assertFalse(int2 == int1);
      assertEquals((-831739648), int2);
      
      int int3 = Float.floatToIntBits(0.0F);
      assertFalse(int3 == int0);
      assertFalse(int3 == int2);
      assertFalse(int3 == int1);
      assertEquals(0, int3);
      
      int int4 = Float.floatToIntBits(0);
      assertFalse(int4 == int2);
      assertTrue(int4 == int3);
      assertFalse(int4 == int0);
      assertFalse(int4 == int1);
      assertEquals(0, int4);
      
      // Undeclared exception!
      try { 
        homeLight0.setShininess((Float) 0.0F);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Piece isn't texturable
         //
         verifyException("com.eteks.sweethome3d.model.HomePieceOfFurniture", e);
      }
  }

  @Test(timeout = 4000)
  public void test173()  throws Throwable  {
      Light light0 = mock(Light.class, new ViolatedAssumptionAnswer());
      doReturn((LightSource[]) null).when(light0).getLightSources();
      doReturn((Integer) null).when(light0).getColor();
      doReturn((String) null).when(light0).getCurrency();
      doReturn(0.0F).when(light0).getDepth();
      doReturn((String) null).when(light0).getDescription();
      doReturn(0.0F).when(light0).getElevation();
      doReturn(0.0F).when(light0).getHeight();
      doReturn((Content) null).when(light0).getIcon();
      doReturn((Content) null).when(light0).getModel();
      doReturn((float[][]) null).when(light0).getModelRotation();
      doReturn((String) null).when(light0).getName();
      doReturn((Content) null).when(light0).getPlanIcon();
      doReturn((BigDecimal) null).when(light0).getPrice();
      doReturn((String) null).when(light0).getStaircaseCutOutShape();
      doReturn((BigDecimal) null).when(light0).getValueAddedTaxPercentage();
      doReturn(0.0F).when(light0).getWidth();
      doReturn(false).when(light0).isBackFaceShown();
      doReturn(false).when(light0).isDeformable();
      doReturn(false).when(light0).isDoorOrWindow();
      doReturn(false).when(light0).isMovable();
      doReturn(false).when(light0).isResizable();
      doReturn(false).when(light0).isTexturable();
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)20;
      byteArray0[1] = (byte)1;
      byteArray0[2] = (byte) (-113);
      byteArray0[3] = (byte) (-32);
      byteArray0[4] = (byte)62;
      boolean boolean0 = FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      assertEquals(5, byteArray0.length);
      assertFalse(boolean0);
      assertArrayEquals(new byte[] {(byte)20, (byte)1, (byte) (-113), (byte) (-32), (byte)62}, byteArray0);
      
      HomeLight homeLight0 = new HomeLight(light0);
      assertNotNull(homeLight0);
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertNull(homeLight0.getShininess());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertFalse(homeLight0.isMovable());
      assertFalse(homeLight0.isResizable());
      assertNull(homeLight0.getName());
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertNull(homeLight0.getColor());
      assertNull(homeLight0.getCatalogId());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertFalse(homeLight0.isDeformable());
      assertFalse(homeLight0.isModelMirrored());
      assertNull(homeLight0.getCurrency());
      assertFalse(homeLight0.isBackFaceShown());
      assertFalse(homeLight0.isNameVisible());
      assertFalse(homeLight0.isTexturable());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertTrue(homeLight0.isVisible());
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertNull(homeLight0.getDescription());
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      
      PropertyChangeListener propertyChangeListener0 = mock(PropertyChangeListener.class, new ViolatedAssumptionAnswer());
      PropertyChangeListenerProxy propertyChangeListenerProxy0 = new PropertyChangeListenerProxy((String) null, propertyChangeListener0);
      assertNotNull(propertyChangeListenerProxy0);
      assertNull(propertyChangeListenerProxy0.getPropertyName());
      
      homeLight0.removePropertyChangeListener(propertyChangeListenerProxy0);
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertNull(homeLight0.getShininess());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertFalse(homeLight0.isMovable());
      assertFalse(homeLight0.isResizable());
      assertNull(homeLight0.getName());
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertNull(homeLight0.getColor());
      assertNull(homeLight0.getCatalogId());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertFalse(homeLight0.isDeformable());
      assertFalse(homeLight0.isModelMirrored());
      assertNull(homeLight0.getCurrency());
      assertFalse(homeLight0.isBackFaceShown());
      assertFalse(homeLight0.isNameVisible());
      assertFalse(homeLight0.isTexturable());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertTrue(homeLight0.isVisible());
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertNull(homeLight0.getDescription());
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertNull(propertyChangeListenerProxy0.getPropertyName());
      
      homeLight0.setY((-1.0F));
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertNull(homeLight0.getShininess());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertFalse(homeLight0.isMovable());
      assertFalse(homeLight0.isResizable());
      assertNull(homeLight0.getName());
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertNull(homeLight0.getColor());
      assertNull(homeLight0.getCatalogId());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertFalse(homeLight0.isDeformable());
      assertFalse(homeLight0.isModelMirrored());
      assertNull(homeLight0.getCurrency());
      assertFalse(homeLight0.isBackFaceShown());
      assertFalse(homeLight0.isNameVisible());
      assertFalse(homeLight0.isTexturable());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertTrue(homeLight0.isVisible());
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertNull(homeLight0.getDescription());
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals((-1.0F), homeLight0.getY(), 0.01F);
      
      BigDecimal bigDecimal0 = homeLight0.getValueAddedTax();
      assertNull(bigDecimal0);
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertNull(homeLight0.getShininess());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertFalse(homeLight0.isMovable());
      assertFalse(homeLight0.isResizable());
      assertNull(homeLight0.getName());
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertNull(homeLight0.getColor());
      assertNull(homeLight0.getCatalogId());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertFalse(homeLight0.isDeformable());
      assertFalse(homeLight0.isModelMirrored());
      assertNull(homeLight0.getCurrency());
      assertFalse(homeLight0.isBackFaceShown());
      assertFalse(homeLight0.isNameVisible());
      assertFalse(homeLight0.isTexturable());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertTrue(homeLight0.isVisible());
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertNull(homeLight0.getDescription());
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals((-1.0F), homeLight0.getY(), 0.01F);
      
      homeLight0.setVisible(false);
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertNull(homeLight0.getShininess());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertFalse(homeLight0.isMovable());
      assertFalse(homeLight0.isResizable());
      assertNull(homeLight0.getName());
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertNull(homeLight0.getColor());
      assertNull(homeLight0.getCatalogId());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertFalse(homeLight0.isDeformable());
      assertFalse(homeLight0.isModelMirrored());
      assertNull(homeLight0.getCurrency());
      assertFalse(homeLight0.isBackFaceShown());
      assertFalse(homeLight0.isVisible());
      assertFalse(homeLight0.isNameVisible());
      assertFalse(homeLight0.isTexturable());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertNull(homeLight0.getDescription());
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals((-1.0F), homeLight0.getY(), 0.01F);
      
      homeLight0.setElevation(2632.0835F);
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertNull(homeLight0.getShininess());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertFalse(homeLight0.isMovable());
      assertFalse(homeLight0.isResizable());
      assertNull(homeLight0.getName());
      assertEquals(2632.0835F, homeLight0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertEquals(2632.0835F, homeLight0.getElevation(), 0.01F);
      assertNull(homeLight0.getColor());
      assertNull(homeLight0.getCatalogId());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertFalse(homeLight0.isDeformable());
      assertFalse(homeLight0.isModelMirrored());
      assertNull(homeLight0.getCurrency());
      assertFalse(homeLight0.isBackFaceShown());
      assertFalse(homeLight0.isVisible());
      assertFalse(homeLight0.isNameVisible());
      assertFalse(homeLight0.isTexturable());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertNull(homeLight0.getDescription());
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals((-1.0F), homeLight0.getY(), 0.01F);
      
      homeLight0.setNameStyle((TextStyle) null);
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertNull(homeLight0.getShininess());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertFalse(homeLight0.isMovable());
      assertFalse(homeLight0.isResizable());
      assertNull(homeLight0.getName());
      assertEquals(2632.0835F, homeLight0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertEquals(2632.0835F, homeLight0.getElevation(), 0.01F);
      assertNull(homeLight0.getColor());
      assertNull(homeLight0.getCatalogId());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertFalse(homeLight0.isDeformable());
      assertFalse(homeLight0.isModelMirrored());
      assertNull(homeLight0.getCurrency());
      assertFalse(homeLight0.isBackFaceShown());
      assertFalse(homeLight0.isVisible());
      assertFalse(homeLight0.isNameVisible());
      assertFalse(homeLight0.isTexturable());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertNull(homeLight0.getDescription());
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals((-1.0F), homeLight0.getY(), 0.01F);
      
      String string0 = homeLight0.getCurrency();
      assertNull(string0);
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertNull(homeLight0.getShininess());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertFalse(homeLight0.isMovable());
      assertFalse(homeLight0.isResizable());
      assertNull(homeLight0.getName());
      assertEquals(2632.0835F, homeLight0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertEquals(2632.0835F, homeLight0.getElevation(), 0.01F);
      assertNull(homeLight0.getColor());
      assertNull(homeLight0.getCatalogId());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertFalse(homeLight0.isDeformable());
      assertFalse(homeLight0.isModelMirrored());
      assertNull(homeLight0.getCurrency());
      assertFalse(homeLight0.isBackFaceShown());
      assertFalse(homeLight0.isVisible());
      assertFalse(homeLight0.isNameVisible());
      assertFalse(homeLight0.isTexturable());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertNull(homeLight0.getDescription());
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals((-1.0F), homeLight0.getY(), 0.01F);
      
      float float0 = 0.0F;
      // Undeclared exception!
      try { 
        homeLight0.setHeight(0.0F);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Piece isn't resizable
         //
         verifyException("com.eteks.sweethome3d.model.HomePieceOfFurniture", e);
      }
  }

  @Test(timeout = 4000)
  public void test174()  throws Throwable  {
      Integer integer0 = new Integer((-1469));
      assertNotNull(integer0);
      assertEquals((-1469), (int)integer0);
      
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      Light light0 = mock(Light.class, new ViolatedAssumptionAnswer());
      doReturn((Integer) null).when(light0).getColor();
      doReturn((String) null).when(light0).getCurrency();
      doReturn(0.0F).when(light0).getDepth();
      doReturn((String) null).when(light0).getDescription();
      doReturn(0.0F).when(light0).getElevation();
      doReturn(0.0F).when(light0).getHeight();
      doReturn((Content) null).when(light0).getIcon();
      doReturn((Content) null).when(light0).getModel();
      doReturn((float[][]) null).when(light0).getModelRotation();
      doReturn((String) null).when(light0).getName();
      doReturn((Content) null).when(light0).getPlanIcon();
      doReturn((BigDecimal) null).when(light0).getPrice();
      doReturn((String) null).when(light0).getStaircaseCutOutShape();
      doReturn((BigDecimal) null).when(light0).getValueAddedTaxPercentage();
      doReturn(0.0F).when(light0).getWidth();
      doReturn(false).when(light0).isBackFaceShown();
      doReturn(false).when(light0).isDeformable();
      doReturn(false).when(light0).isDoorOrWindow();
      doReturn(false).when(light0).isMovable();
      doReturn(false).when(light0).isResizable();
      doReturn(false).when(light0).isTexturable();
      HomePieceOfFurniture homePieceOfFurniture0 = new HomePieceOfFurniture(light0);
      assertNotNull(homePieceOfFurniture0);
      assertEquals(0.0F, homePieceOfFurniture0.getAngle(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture0.getX(), 0.01F);
      assertNull(homePieceOfFurniture0.getDescription());
      assertEquals(0.0F, homePieceOfFurniture0.getY(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture0.getElevation(), 0.01F);
      assertFalse(homePieceOfFurniture0.isDoorOrWindow());
      assertEquals(0.0F, homePieceOfFurniture0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture0.getNameXOffset(), 0.01F);
      assertFalse(homePieceOfFurniture0.isTexturable());
      assertNull(homePieceOfFurniture0.getCatalogId());
      assertNull(homePieceOfFurniture0.getColor());
      assertFalse(homePieceOfFurniture0.isModelMirrored());
      assertFalse(homePieceOfFurniture0.isNameVisible());
      assertNull(homePieceOfFurniture0.getName());
      assertFalse(homePieceOfFurniture0.isBackFaceShown());
      assertEquals(0.0F, homePieceOfFurniture0.getWidth(), 0.01F);
      assertFalse(homePieceOfFurniture0.isMovable());
      assertEquals(0.0F, homePieceOfFurniture0.getHeight(), 0.01F);
      assertTrue(homePieceOfFurniture0.isVisible());
      assertEquals(0.0F, homePieceOfFurniture0.getNameYOffset(), 0.01F);
      assertNull(homePieceOfFurniture0.getStaircaseCutOutShape());
      assertEquals(0.0F, homePieceOfFurniture0.getNameAngle(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture0.getDepth(), 0.01F);
      assertNull(homePieceOfFurniture0.getShininess());
      assertNull(homePieceOfFurniture0.getCurrency());
      assertFalse(homePieceOfFurniture0.isResizable());
      assertFalse(homePieceOfFurniture0.isDeformable());
      
      HomePieceOfFurniture homePieceOfFurniture1 = homePieceOfFurniture0.clone();
      assertNotNull(homePieceOfFurniture1);
      assertNotSame(homePieceOfFurniture0, homePieceOfFurniture1);
      assertNotSame(homePieceOfFurniture1, homePieceOfFurniture0);
      assertFalse(homePieceOfFurniture1.equals((Object)homePieceOfFurniture0));
      assertEquals(0.0F, homePieceOfFurniture0.getAngle(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture0.getX(), 0.01F);
      assertNull(homePieceOfFurniture0.getDescription());
      assertEquals(0.0F, homePieceOfFurniture0.getY(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture0.getElevation(), 0.01F);
      assertFalse(homePieceOfFurniture0.isDoorOrWindow());
      assertEquals(0.0F, homePieceOfFurniture0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture0.getNameXOffset(), 0.01F);
      assertFalse(homePieceOfFurniture0.isTexturable());
      assertNull(homePieceOfFurniture0.getCatalogId());
      assertNull(homePieceOfFurniture0.getColor());
      assertFalse(homePieceOfFurniture0.isModelMirrored());
      assertFalse(homePieceOfFurniture0.isNameVisible());
      assertNull(homePieceOfFurniture0.getName());
      assertFalse(homePieceOfFurniture0.isBackFaceShown());
      assertEquals(0.0F, homePieceOfFurniture0.getWidth(), 0.01F);
      assertFalse(homePieceOfFurniture0.isMovable());
      assertEquals(0.0F, homePieceOfFurniture0.getHeight(), 0.01F);
      assertTrue(homePieceOfFurniture0.isVisible());
      assertEquals(0.0F, homePieceOfFurniture0.getNameYOffset(), 0.01F);
      assertNull(homePieceOfFurniture0.getStaircaseCutOutShape());
      assertEquals(0.0F, homePieceOfFurniture0.getNameAngle(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture0.getDepth(), 0.01F);
      assertNull(homePieceOfFurniture0.getShininess());
      assertNull(homePieceOfFurniture0.getCurrency());
      assertFalse(homePieceOfFurniture0.isResizable());
      assertFalse(homePieceOfFurniture0.isDeformable());
      assertFalse(homePieceOfFurniture1.isNameVisible());
      assertNull(homePieceOfFurniture1.getColor());
      assertTrue(homePieceOfFurniture1.isVisible());
      assertFalse(homePieceOfFurniture1.isBackFaceShown());
      assertFalse(homePieceOfFurniture1.isDeformable());
      assertFalse(homePieceOfFurniture1.isModelMirrored());
      assertFalse(homePieceOfFurniture1.isTexturable());
      assertEquals(0.0F, homePieceOfFurniture1.getAngle(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture1.getX(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture1.getGroundElevation(), 0.01F);
      assertFalse(homePieceOfFurniture1.isDoorOrWindow());
      assertEquals(0.0F, homePieceOfFurniture1.getY(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture1.getWidth(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture1.getElevation(), 0.01F);
      assertNull(homePieceOfFurniture1.getDescription());
      assertEquals(0.0F, homePieceOfFurniture1.getNameXOffset(), 0.01F);
      assertNull(homePieceOfFurniture1.getName());
      assertNull(homePieceOfFurniture1.getCatalogId());
      assertNull(homePieceOfFurniture1.getShininess());
      assertFalse(homePieceOfFurniture1.isResizable());
      assertEquals(0.0F, homePieceOfFurniture1.getDepth(), 0.01F);
      assertNull(homePieceOfFurniture1.getStaircaseCutOutShape());
      assertEquals(0.0F, homePieceOfFurniture1.getNameAngle(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture1.getHeight(), 0.01F);
      assertFalse(homePieceOfFurniture1.isMovable());
      assertEquals(0.0F, homePieceOfFurniture1.getNameYOffset(), 0.01F);
      assertNull(homePieceOfFurniture1.getCurrency());
      
      homePieceOfFurniture1.setVisible(true);
      assertNotSame(homePieceOfFurniture0, homePieceOfFurniture1);
      assertNotSame(homePieceOfFurniture1, homePieceOfFurniture0);
      assertFalse(homePieceOfFurniture0.equals((Object)homePieceOfFurniture1));
      assertFalse(homePieceOfFurniture1.equals((Object)homePieceOfFurniture0));
      assertEquals(0.0F, homePieceOfFurniture0.getAngle(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture0.getX(), 0.01F);
      assertNull(homePieceOfFurniture0.getDescription());
      assertEquals(0.0F, homePieceOfFurniture0.getY(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture0.getElevation(), 0.01F);
      assertFalse(homePieceOfFurniture0.isDoorOrWindow());
      assertEquals(0.0F, homePieceOfFurniture0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture0.getNameXOffset(), 0.01F);
      assertFalse(homePieceOfFurniture0.isTexturable());
      assertNull(homePieceOfFurniture0.getCatalogId());
      assertNull(homePieceOfFurniture0.getColor());
      assertFalse(homePieceOfFurniture0.isModelMirrored());
      assertFalse(homePieceOfFurniture0.isNameVisible());
      assertNull(homePieceOfFurniture0.getName());
      assertFalse(homePieceOfFurniture0.isBackFaceShown());
      assertEquals(0.0F, homePieceOfFurniture0.getWidth(), 0.01F);
      assertFalse(homePieceOfFurniture0.isMovable());
      assertEquals(0.0F, homePieceOfFurniture0.getHeight(), 0.01F);
      assertTrue(homePieceOfFurniture0.isVisible());
      assertEquals(0.0F, homePieceOfFurniture0.getNameYOffset(), 0.01F);
      assertNull(homePieceOfFurniture0.getStaircaseCutOutShape());
      assertEquals(0.0F, homePieceOfFurniture0.getNameAngle(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture0.getDepth(), 0.01F);
      assertNull(homePieceOfFurniture0.getShininess());
      assertNull(homePieceOfFurniture0.getCurrency());
      assertFalse(homePieceOfFurniture0.isResizable());
      assertFalse(homePieceOfFurniture0.isDeformable());
      assertFalse(homePieceOfFurniture1.isNameVisible());
      assertNull(homePieceOfFurniture1.getColor());
      assertTrue(homePieceOfFurniture1.isVisible());
      assertFalse(homePieceOfFurniture1.isBackFaceShown());
      assertFalse(homePieceOfFurniture1.isDeformable());
      assertFalse(homePieceOfFurniture1.isModelMirrored());
      assertFalse(homePieceOfFurniture1.isTexturable());
      assertEquals(0.0F, homePieceOfFurniture1.getAngle(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture1.getX(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture1.getGroundElevation(), 0.01F);
      assertFalse(homePieceOfFurniture1.isDoorOrWindow());
      assertEquals(0.0F, homePieceOfFurniture1.getY(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture1.getWidth(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture1.getElevation(), 0.01F);
      assertNull(homePieceOfFurniture1.getDescription());
      assertEquals(0.0F, homePieceOfFurniture1.getNameXOffset(), 0.01F);
      assertNull(homePieceOfFurniture1.getName());
      assertNull(homePieceOfFurniture1.getCatalogId());
      assertNull(homePieceOfFurniture1.getShininess());
      assertFalse(homePieceOfFurniture1.isResizable());
      assertEquals(0.0F, homePieceOfFurniture1.getDepth(), 0.01F);
      assertNull(homePieceOfFurniture1.getStaircaseCutOutShape());
      assertEquals(0.0F, homePieceOfFurniture1.getNameAngle(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture1.getHeight(), 0.01F);
      assertFalse(homePieceOfFurniture1.isMovable());
      assertEquals(0.0F, homePieceOfFurniture1.getNameYOffset(), 0.01F);
      assertNull(homePieceOfFurniture1.getCurrency());
      
      float float0 = homePieceOfFurniture1.getWidth();
      assertNotSame(homePieceOfFurniture0, homePieceOfFurniture1);
      assertNotSame(homePieceOfFurniture1, homePieceOfFurniture0);
      assertFalse(homePieceOfFurniture0.equals((Object)homePieceOfFurniture1));
      assertFalse(homePieceOfFurniture1.equals((Object)homePieceOfFurniture0));
      assertEquals(0.0F, float0, 0.01F);
      assertEquals(0.0F, homePieceOfFurniture0.getAngle(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture0.getX(), 0.01F);
      assertNull(homePieceOfFurniture0.getDescription());
      assertEquals(0.0F, homePieceOfFurniture0.getY(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture0.getElevation(), 0.01F);
      assertFalse(homePieceOfFurniture0.isDoorOrWindow());
      assertEquals(0.0F, homePieceOfFurniture0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture0.getNameXOffset(), 0.01F);
      assertFalse(homePieceOfFurniture0.isTexturable());
      assertNull(homePieceOfFurniture0.getCatalogId());
      assertNull(homePieceOfFurniture0.getColor());
      assertFalse(homePieceOfFurniture0.isModelMirrored());
      assertFalse(homePieceOfFurniture0.isNameVisible());
      assertNull(homePieceOfFurniture0.getName());
      assertFalse(homePieceOfFurniture0.isBackFaceShown());
      assertEquals(0.0F, homePieceOfFurniture0.getWidth(), 0.01F);
      assertFalse(homePieceOfFurniture0.isMovable());
      assertEquals(0.0F, homePieceOfFurniture0.getHeight(), 0.01F);
      assertTrue(homePieceOfFurniture0.isVisible());
      assertEquals(0.0F, homePieceOfFurniture0.getNameYOffset(), 0.01F);
      assertNull(homePieceOfFurniture0.getStaircaseCutOutShape());
      assertEquals(0.0F, homePieceOfFurniture0.getNameAngle(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture0.getDepth(), 0.01F);
      assertNull(homePieceOfFurniture0.getShininess());
      assertNull(homePieceOfFurniture0.getCurrency());
      assertFalse(homePieceOfFurniture0.isResizable());
      assertFalse(homePieceOfFurniture0.isDeformable());
      assertFalse(homePieceOfFurniture1.isNameVisible());
      assertNull(homePieceOfFurniture1.getColor());
      assertTrue(homePieceOfFurniture1.isVisible());
      assertFalse(homePieceOfFurniture1.isBackFaceShown());
      assertFalse(homePieceOfFurniture1.isDeformable());
      assertFalse(homePieceOfFurniture1.isModelMirrored());
      assertFalse(homePieceOfFurniture1.isTexturable());
      assertEquals(0.0F, homePieceOfFurniture1.getAngle(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture1.getX(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture1.getGroundElevation(), 0.01F);
      assertFalse(homePieceOfFurniture1.isDoorOrWindow());
      assertEquals(0.0F, homePieceOfFurniture1.getY(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture1.getWidth(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture1.getElevation(), 0.01F);
      assertNull(homePieceOfFurniture1.getDescription());
      assertEquals(0.0F, homePieceOfFurniture1.getNameXOffset(), 0.01F);
      assertNull(homePieceOfFurniture1.getName());
      assertNull(homePieceOfFurniture1.getCatalogId());
      assertNull(homePieceOfFurniture1.getShininess());
      assertFalse(homePieceOfFurniture1.isResizable());
      assertEquals(0.0F, homePieceOfFurniture1.getDepth(), 0.01F);
      assertNull(homePieceOfFurniture1.getStaircaseCutOutShape());
      assertEquals(0.0F, homePieceOfFurniture1.getNameAngle(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture1.getHeight(), 0.01F);
      assertFalse(homePieceOfFurniture1.isMovable());
      assertEquals(0.0F, homePieceOfFurniture1.getNameYOffset(), 0.01F);
      assertNull(homePieceOfFurniture1.getCurrency());
      
      float float1 = homePieceOfFurniture1.getGroundElevation();
      assertNotSame(homePieceOfFurniture0, homePieceOfFurniture1);
      assertNotSame(homePieceOfFurniture1, homePieceOfFurniture0);
      assertFalse(homePieceOfFurniture0.equals((Object)homePieceOfFurniture1));
      assertFalse(homePieceOfFurniture1.equals((Object)homePieceOfFurniture0));
      assertEquals(float1, float0, 0.01F);
      assertEquals(0.0F, float1, 0.01F);
      assertEquals(0.0F, homePieceOfFurniture0.getAngle(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture0.getX(), 0.01F);
      assertNull(homePieceOfFurniture0.getDescription());
      assertEquals(0.0F, homePieceOfFurniture0.getY(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture0.getElevation(), 0.01F);
      assertFalse(homePieceOfFurniture0.isDoorOrWindow());
      assertEquals(0.0F, homePieceOfFurniture0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture0.getNameXOffset(), 0.01F);
      assertFalse(homePieceOfFurniture0.isTexturable());
      assertNull(homePieceOfFurniture0.getCatalogId());
      assertNull(homePieceOfFurniture0.getColor());
      assertFalse(homePieceOfFurniture0.isModelMirrored());
      assertFalse(homePieceOfFurniture0.isNameVisible());
      assertNull(homePieceOfFurniture0.getName());
      assertFalse(homePieceOfFurniture0.isBackFaceShown());
      assertEquals(0.0F, homePieceOfFurniture0.getWidth(), 0.01F);
      assertFalse(homePieceOfFurniture0.isMovable());
      assertEquals(0.0F, homePieceOfFurniture0.getHeight(), 0.01F);
      assertTrue(homePieceOfFurniture0.isVisible());
      assertEquals(0.0F, homePieceOfFurniture0.getNameYOffset(), 0.01F);
      assertNull(homePieceOfFurniture0.getStaircaseCutOutShape());
      assertEquals(0.0F, homePieceOfFurniture0.getNameAngle(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture0.getDepth(), 0.01F);
      assertNull(homePieceOfFurniture0.getShininess());
      assertNull(homePieceOfFurniture0.getCurrency());
      assertFalse(homePieceOfFurniture0.isResizable());
      assertFalse(homePieceOfFurniture0.isDeformable());
      assertFalse(homePieceOfFurniture1.isNameVisible());
      assertNull(homePieceOfFurniture1.getColor());
      assertTrue(homePieceOfFurniture1.isVisible());
      assertFalse(homePieceOfFurniture1.isBackFaceShown());
      assertFalse(homePieceOfFurniture1.isDeformable());
      assertFalse(homePieceOfFurniture1.isModelMirrored());
      assertFalse(homePieceOfFurniture1.isTexturable());
      assertEquals(0.0F, homePieceOfFurniture1.getAngle(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture1.getX(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture1.getGroundElevation(), 0.01F);
      assertFalse(homePieceOfFurniture1.isDoorOrWindow());
      assertEquals(0.0F, homePieceOfFurniture1.getY(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture1.getWidth(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture1.getElevation(), 0.01F);
      assertNull(homePieceOfFurniture1.getDescription());
      assertEquals(0.0F, homePieceOfFurniture1.getNameXOffset(), 0.01F);
      assertNull(homePieceOfFurniture1.getName());
      assertNull(homePieceOfFurniture1.getCatalogId());
      assertNull(homePieceOfFurniture1.getShininess());
      assertFalse(homePieceOfFurniture1.isResizable());
      assertEquals(0.0F, homePieceOfFurniture1.getDepth(), 0.01F);
      assertNull(homePieceOfFurniture1.getStaircaseCutOutShape());
      assertEquals(0.0F, homePieceOfFurniture1.getNameAngle(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture1.getHeight(), 0.01F);
      assertFalse(homePieceOfFurniture1.isMovable());
      assertEquals(0.0F, homePieceOfFurniture1.getNameYOffset(), 0.01F);
      assertNull(homePieceOfFurniture1.getCurrency());
      
      float float2 = new Integer((-1469));
      assertNotEquals(float2, float0, 0.01F);
      assertNotEquals(float2, float1, 0.01F);
      assertEquals((-1469), float2, 0.01F);
      
      // Undeclared exception!
      try { 
        homePieceOfFurniture0.setShininess((Float) null);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Piece isn't texturable
         //
         verifyException("com.eteks.sweethome3d.model.HomePieceOfFurniture", e);
      }
  }

  @Test(timeout = 4000)
  public void test175()  throws Throwable  {
      Integer integer0 = new Integer(1431655765);
      assertNotNull(integer0);
      assertEquals(1431655765, (int)integer0);
      
      Light light0 = mock(Light.class, new ViolatedAssumptionAnswer());
      doReturn((LightSource[]) null).when(light0).getLightSources();
      doReturn((Integer) null).when(light0).getColor();
      doReturn((String) null).when(light0).getCurrency();
      doReturn(0.0F).when(light0).getDepth();
      doReturn((String) null).when(light0).getDescription();
      doReturn(0.0F).when(light0).getElevation();
      doReturn(0.0F).when(light0).getHeight();
      doReturn((Content) null).when(light0).getIcon();
      doReturn((Content) null).when(light0).getModel();
      doReturn((float[][]) null).when(light0).getModelRotation();
      doReturn((String) null).when(light0).getName();
      doReturn((Content) null).when(light0).getPlanIcon();
      doReturn((BigDecimal) null).when(light0).getPrice();
      doReturn((String) null).when(light0).getStaircaseCutOutShape();
      doReturn((BigDecimal) null).when(light0).getValueAddedTaxPercentage();
      doReturn(0.0F).when(light0).getWidth();
      doReturn(false).when(light0).isBackFaceShown();
      doReturn(false).when(light0).isDeformable();
      doReturn(false).when(light0).isDoorOrWindow();
      doReturn(false).when(light0).isMovable();
      doReturn(false).when(light0).isResizable();
      doReturn(false).when(light0).isTexturable();
      Sash sash0 = new Sash((byte)47, 0.0F, 0.0F, 1431655765, (byte)47);
      assertNotNull(sash0);
      assertEquals(1.43165581E9F, sash0.getStartAngle(), 0.01F);
      assertEquals(47.0F, sash0.getXAxis(), 0.01F);
      assertEquals(47.0F, sash0.getEndAngle(), 0.01F);
      assertEquals(0.0F, sash0.getWidth(), 0.01F);
      assertEquals(0.0F, sash0.getYAxis(), 0.01F);
      
      BigInteger bigInteger0 = BigInteger.ZERO;
      assertNotNull(bigInteger0);
      assertEquals((short)0, bigInteger0.shortValue());
      assertEquals((byte)0, bigInteger0.byteValue());
      
      HomeLight homeLight0 = new HomeLight(light0);
      assertNotNull(homeLight0);
      assertFalse(homeLight0.isBackFaceShown());
      assertFalse(homeLight0.isModelMirrored());
      assertNull(homeLight0.getColor());
      assertFalse(homeLight0.isDoorOrWindow());
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertFalse(homeLight0.isTexturable());
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertNull(homeLight0.getDescription());
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertNull(homeLight0.getName());
      assertFalse(homeLight0.isNameVisible());
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertNull(homeLight0.getShininess());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertNull(homeLight0.getCatalogId());
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertTrue(homeLight0.isVisible());
      assertNull(homeLight0.getCurrency());
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertFalse(homeLight0.isMovable());
      assertFalse(homeLight0.isResizable());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertFalse(homeLight0.isDeformable());
      
      homeLight0.setY((-1265.729F));
      assertEquals((-1265.729F), homeLight0.getY(), 0.01F);
      assertFalse(homeLight0.isBackFaceShown());
      assertFalse(homeLight0.isModelMirrored());
      assertNull(homeLight0.getColor());
      assertFalse(homeLight0.isDoorOrWindow());
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertFalse(homeLight0.isTexturable());
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertNull(homeLight0.getDescription());
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertNull(homeLight0.getName());
      assertFalse(homeLight0.isNameVisible());
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertNull(homeLight0.getShininess());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertNull(homeLight0.getCatalogId());
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertTrue(homeLight0.isVisible());
      assertNull(homeLight0.getCurrency());
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertFalse(homeLight0.isMovable());
      assertFalse(homeLight0.isResizable());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertFalse(homeLight0.isDeformable());
      
      BigDecimal bigDecimal0 = homeLight0.getValueAddedTax();
      assertNull(bigDecimal0);
      assertEquals((-1265.729F), homeLight0.getY(), 0.01F);
      assertFalse(homeLight0.isBackFaceShown());
      assertFalse(homeLight0.isModelMirrored());
      assertNull(homeLight0.getColor());
      assertFalse(homeLight0.isDoorOrWindow());
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertFalse(homeLight0.isTexturable());
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertNull(homeLight0.getDescription());
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertNull(homeLight0.getName());
      assertFalse(homeLight0.isNameVisible());
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertNull(homeLight0.getShininess());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertNull(homeLight0.getCatalogId());
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertTrue(homeLight0.isVisible());
      assertNull(homeLight0.getCurrency());
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertFalse(homeLight0.isMovable());
      assertFalse(homeLight0.isResizable());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertFalse(homeLight0.isDeformable());
      
      HomeLight homeLight1 = homeLight0.clone();
      assertNotNull(homeLight1);
      assertNotSame(homeLight0, homeLight1);
      assertNotSame(homeLight1, homeLight0);
      assertFalse(homeLight1.equals((Object)homeLight0));
      assertEquals((-1265.729F), homeLight0.getY(), 0.01F);
      assertFalse(homeLight0.isBackFaceShown());
      assertFalse(homeLight0.isModelMirrored());
      assertNull(homeLight0.getColor());
      assertFalse(homeLight0.isDoorOrWindow());
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertFalse(homeLight0.isTexturable());
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertNull(homeLight0.getDescription());
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertNull(homeLight0.getName());
      assertFalse(homeLight0.isNameVisible());
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertNull(homeLight0.getShininess());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertNull(homeLight0.getCatalogId());
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertTrue(homeLight0.isVisible());
      assertNull(homeLight0.getCurrency());
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertFalse(homeLight0.isMovable());
      assertFalse(homeLight0.isResizable());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertFalse(homeLight0.isDeformable());
      assertEquals(0.0F, homeLight1.getWidth(), 0.01F);
      assertEquals(0.0F, homeLight1.getHeight(), 0.01F);
      assertTrue(homeLight1.isVisible());
      assertNull(homeLight1.getCurrency());
      assertFalse(homeLight1.isMovable());
      assertFalse(homeLight1.isDeformable());
      assertFalse(homeLight1.isResizable());
      assertFalse(homeLight1.isNameVisible());
      assertNull(homeLight1.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight1.getNameAngle(), 0.01F);
      assertNull(homeLight1.getShininess());
      assertEquals(0.0F, homeLight1.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeLight1.getX(), 0.01F);
      assertNull(homeLight1.getDescription());
      assertEquals(0.0F, homeLight1.getGroundElevation(), 0.01F);
      assertFalse(homeLight1.isDoorOrWindow());
      assertFalse(homeLight1.isTexturable());
      assertEquals(0.0F, homeLight1.getElevation(), 0.01F);
      assertEquals(0.0F, homeLight1.getAngle(), 0.01F);
      assertNull(homeLight1.getName());
      assertEquals(0.0F, homeLight1.getDepth(), 0.01F);
      assertFalse(homeLight1.isBackFaceShown());
      assertEquals((-1265.729F), homeLight1.getY(), 0.01F);
      assertNull(homeLight1.getCatalogId());
      assertFalse(homeLight1.isModelMirrored());
      assertNull(homeLight1.getColor());
      assertEquals(0.5F, homeLight1.getPower(), 0.01F);
      assertEquals(0.0F, homeLight1.getNameYOffset(), 0.01F);
      
      HomeLight homeLight2 = homeLight0.clone();
      assertNotNull(homeLight2);
      assertNotSame(homeLight0, homeLight2);
      assertNotSame(homeLight0, homeLight1);
      assertNotSame(homeLight2, homeLight1);
      assertNotSame(homeLight2, homeLight0);
      assertFalse(homeLight0.equals((Object)homeLight1));
      assertFalse(homeLight2.equals((Object)homeLight1));
      assertFalse(homeLight2.equals((Object)homeLight0));
      assertEquals((-1265.729F), homeLight0.getY(), 0.01F);
      assertFalse(homeLight0.isBackFaceShown());
      assertFalse(homeLight0.isModelMirrored());
      assertNull(homeLight0.getColor());
      assertFalse(homeLight0.isDoorOrWindow());
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertFalse(homeLight0.isTexturable());
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertNull(homeLight0.getDescription());
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertNull(homeLight0.getName());
      assertFalse(homeLight0.isNameVisible());
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertNull(homeLight0.getShininess());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertNull(homeLight0.getCatalogId());
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertTrue(homeLight0.isVisible());
      assertNull(homeLight0.getCurrency());
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertFalse(homeLight0.isMovable());
      assertFalse(homeLight0.isResizable());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertFalse(homeLight0.isDeformable());
      assertNull(homeLight2.getName());
      assertEquals(0.5F, homeLight2.getPower(), 0.01F);
      assertEquals(0.0F, homeLight2.getDepth(), 0.01F);
      assertEquals(0.0F, homeLight2.getNameAngle(), 0.01F);
      assertNull(homeLight2.getStaircaseCutOutShape());
      assertNull(homeLight2.getCatalogId());
      assertEquals(0.0F, homeLight2.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeLight2.getElevation(), 0.01F);
      assertNull(homeLight2.getDescription());
      assertFalse(homeLight2.isMovable());
      assertEquals(0.0F, homeLight2.getAngle(), 0.01F);
      assertEquals(0.0F, homeLight2.getGroundElevation(), 0.01F);
      assertFalse(homeLight2.isResizable());
      assertFalse(homeLight2.isTexturable());
      assertTrue(homeLight2.isVisible());
      assertNull(homeLight2.getShininess());
      assertEquals(0.0F, homeLight2.getX(), 0.01F);
      assertFalse(homeLight2.isDeformable());
      assertFalse(homeLight2.isNameVisible());
      assertEquals(0.0F, homeLight2.getWidth(), 0.01F);
      assertFalse(homeLight2.isDoorOrWindow());
      assertNull(homeLight2.getCurrency());
      assertEquals(0.0F, homeLight2.getHeight(), 0.01F);
      assertFalse(homeLight2.isBackFaceShown());
      assertEquals((-1265.729F), homeLight2.getY(), 0.01F);
      assertEquals(0.0F, homeLight2.getNameYOffset(), 0.01F);
      assertFalse(homeLight2.isModelMirrored());
      assertNull(homeLight2.getColor());
      
      homeLight0.setName("zr#$Cy?Ig_QInnju>");
      assertNotSame(homeLight0, homeLight2);
      assertNotSame(homeLight0, homeLight1);
      assertFalse(homeLight0.equals((Object)homeLight2));
      assertFalse(homeLight0.equals((Object)homeLight1));
      assertEquals((-1265.729F), homeLight0.getY(), 0.01F);
      assertFalse(homeLight0.isBackFaceShown());
      assertFalse(homeLight0.isModelMirrored());
      assertNull(homeLight0.getColor());
      assertFalse(homeLight0.isDoorOrWindow());
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertFalse(homeLight0.isTexturable());
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertNull(homeLight0.getDescription());
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertFalse(homeLight0.isNameVisible());
      assertEquals("zr#$Cy?Ig_QInnju>", homeLight0.getName());
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertNull(homeLight0.getShininess());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertNull(homeLight0.getCatalogId());
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertTrue(homeLight0.isVisible());
      assertNull(homeLight0.getCurrency());
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertFalse(homeLight0.isMovable());
      assertFalse(homeLight0.isResizable());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertFalse(homeLight0.isDeformable());
      
      Integer integer1 = Integer.valueOf(1);
      assertNotNull(integer1);
      assertFalse(integer1.equals((Object)integer0));
      assertEquals(1, (int)integer1);
      
      boolean boolean0 = homeLight1.containsPoint(0.0F, 0.0F, 0.0F);
      assertNotSame(homeLight0, homeLight2);
      assertNotSame(homeLight0, homeLight1);
      assertNotSame(homeLight1, homeLight0);
      assertNotSame(homeLight1, homeLight2);
      assertFalse(homeLight0.equals((Object)homeLight2));
      assertFalse(homeLight0.equals((Object)homeLight1));
      assertFalse(homeLight1.equals((Object)homeLight0));
      assertFalse(homeLight1.equals((Object)homeLight2));
      assertFalse(boolean0);
      assertEquals((-1265.729F), homeLight0.getY(), 0.01F);
      assertFalse(homeLight0.isBackFaceShown());
      assertFalse(homeLight0.isModelMirrored());
      assertNull(homeLight0.getColor());
      assertFalse(homeLight0.isDoorOrWindow());
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertFalse(homeLight0.isTexturable());
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertNull(homeLight0.getDescription());
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertFalse(homeLight0.isNameVisible());
      assertEquals("zr#$Cy?Ig_QInnju>", homeLight0.getName());
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertNull(homeLight0.getShininess());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertNull(homeLight0.getCatalogId());
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertTrue(homeLight0.isVisible());
      assertNull(homeLight0.getCurrency());
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertFalse(homeLight0.isMovable());
      assertFalse(homeLight0.isResizable());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertFalse(homeLight0.isDeformable());
      assertEquals(0.0F, homeLight1.getWidth(), 0.01F);
      assertEquals(0.0F, homeLight1.getHeight(), 0.01F);
      assertTrue(homeLight1.isVisible());
      assertNull(homeLight1.getCurrency());
      assertFalse(homeLight1.isMovable());
      assertFalse(homeLight1.isDeformable());
      assertFalse(homeLight1.isResizable());
      assertFalse(homeLight1.isNameVisible());
      assertNull(homeLight1.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight1.getNameAngle(), 0.01F);
      assertNull(homeLight1.getShininess());
      assertEquals(0.0F, homeLight1.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeLight1.getX(), 0.01F);
      assertNull(homeLight1.getDescription());
      assertEquals(0.0F, homeLight1.getGroundElevation(), 0.01F);
      assertFalse(homeLight1.isDoorOrWindow());
      assertFalse(homeLight1.isTexturable());
      assertEquals(0.0F, homeLight1.getElevation(), 0.01F);
      assertEquals(0.0F, homeLight1.getAngle(), 0.01F);
      assertNull(homeLight1.getName());
      assertEquals(0.0F, homeLight1.getDepth(), 0.01F);
      assertFalse(homeLight1.isBackFaceShown());
      assertEquals((-1265.729F), homeLight1.getY(), 0.01F);
      assertNull(homeLight1.getCatalogId());
      assertFalse(homeLight1.isModelMirrored());
      assertNull(homeLight1.getColor());
      assertEquals(0.5F, homeLight1.getPower(), 0.01F);
      assertEquals(0.0F, homeLight1.getNameYOffset(), 0.01F);
      
      homeLight2.setNameYOffset(306.4907F);
      assertNotSame(homeLight0, homeLight2);
      assertNotSame(homeLight0, homeLight1);
      assertNotSame(homeLight2, homeLight1);
      assertNotSame(homeLight2, homeLight0);
      assertFalse(homeLight0.equals((Object)homeLight2));
      assertFalse(homeLight0.equals((Object)homeLight1));
      assertFalse(homeLight2.equals((Object)homeLight1));
      assertFalse(homeLight2.equals((Object)homeLight0));
      assertEquals((-1265.729F), homeLight0.getY(), 0.01F);
      assertFalse(homeLight0.isBackFaceShown());
      assertFalse(homeLight0.isModelMirrored());
      assertNull(homeLight0.getColor());
      assertFalse(homeLight0.isDoorOrWindow());
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertFalse(homeLight0.isTexturable());
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertNull(homeLight0.getDescription());
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertFalse(homeLight0.isNameVisible());
      assertEquals("zr#$Cy?Ig_QInnju>", homeLight0.getName());
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertNull(homeLight0.getShininess());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertNull(homeLight0.getCatalogId());
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertTrue(homeLight0.isVisible());
      assertNull(homeLight0.getCurrency());
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertFalse(homeLight0.isMovable());
      assertFalse(homeLight0.isResizable());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertFalse(homeLight0.isDeformable());
      assertNull(homeLight2.getName());
      assertEquals(0.5F, homeLight2.getPower(), 0.01F);
      assertEquals(0.0F, homeLight2.getDepth(), 0.01F);
      assertEquals(0.0F, homeLight2.getNameAngle(), 0.01F);
      assertNull(homeLight2.getStaircaseCutOutShape());
      assertNull(homeLight2.getCatalogId());
      assertEquals(0.0F, homeLight2.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeLight2.getElevation(), 0.01F);
      assertNull(homeLight2.getDescription());
      assertFalse(homeLight2.isMovable());
      assertEquals(0.0F, homeLight2.getAngle(), 0.01F);
      assertEquals(0.0F, homeLight2.getGroundElevation(), 0.01F);
      assertFalse(homeLight2.isResizable());
      assertFalse(homeLight2.isTexturable());
      assertTrue(homeLight2.isVisible());
      assertNull(homeLight2.getShininess());
      assertEquals(306.4907F, homeLight2.getNameYOffset(), 0.01F);
      assertEquals(0.0F, homeLight2.getX(), 0.01F);
      assertFalse(homeLight2.isDeformable());
      assertFalse(homeLight2.isNameVisible());
      assertEquals(0.0F, homeLight2.getWidth(), 0.01F);
      assertFalse(homeLight2.isDoorOrWindow());
      assertNull(homeLight2.getCurrency());
      assertEquals(0.0F, homeLight2.getHeight(), 0.01F);
      assertFalse(homeLight2.isBackFaceShown());
      assertEquals((-1265.729F), homeLight2.getY(), 0.01F);
      assertFalse(homeLight2.isModelMirrored());
      assertNull(homeLight2.getColor());
  }

  @Test(timeout = 4000)
  public void test176()  throws Throwable  {
      LightSource[] lightSourceArray0 = new LightSource[2];
      LightSource lightSource0 = new LightSource((-1.0F), (-69.47F), 700.4569F, (-853));
      assertNotNull(lightSource0);
      assertEquals((-853), lightSource0.getColor());
      assertNull(lightSource0.getDiameter());
      assertEquals(700.4569F, lightSource0.getZ(), 0.01F);
      assertEquals((-1.0F), lightSource0.getX(), 0.01F);
      assertEquals((-69.47F), lightSource0.getY(), 0.01F);
      
      lightSourceArray0[1] = lightSource0;
      Integer integer0 = new Integer((-853));
      assertNotNull(integer0);
      assertEquals((-853), (int)integer0);
      
      Light light0 = mock(Light.class, new ViolatedAssumptionAnswer());
      doReturn((LightSource[]) null).when(light0).getLightSources();
      doReturn((Integer) null).when(light0).getColor();
      doReturn((String) null).when(light0).getCurrency();
      doReturn(0.0F).when(light0).getDepth();
      doReturn((String) null).when(light0).getDescription();
      doReturn(0.0F).when(light0).getElevation();
      doReturn(0.0F).when(light0).getHeight();
      doReturn((Content) null).when(light0).getIcon();
      doReturn((Content) null).when(light0).getModel();
      doReturn((float[][]) null).when(light0).getModelRotation();
      doReturn((String) null).when(light0).getName();
      doReturn((Content) null).when(light0).getPlanIcon();
      doReturn((BigDecimal) null).when(light0).getPrice();
      doReturn((String) null).when(light0).getStaircaseCutOutShape();
      doReturn((BigDecimal) null).when(light0).getValueAddedTaxPercentage();
      doReturn(0.0F).when(light0).getWidth();
      doReturn(false).when(light0).isBackFaceShown();
      doReturn(false).when(light0).isDeformable();
      doReturn(false).when(light0).isDoorOrWindow();
      doReturn(false).when(light0).isMovable();
      doReturn(false).when(light0).isResizable();
      doReturn(false).when(light0).isTexturable();
      byte[] byteArray0 = new byte[5];
      byteArray0[1] = (byte)1;
      byteArray0[3] = (byte) (-32);
      byteArray0[4] = (byte)62;
      boolean boolean0 = FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      assertEquals(5, byteArray0.length);
      assertFalse(boolean0);
      assertArrayEquals(new byte[] {(byte)0, (byte)1, (byte)0, (byte) (-32), (byte)62}, byteArray0);
      
      HomeLight homeLight0 = new HomeLight(light0);
      assertNotNull(homeLight0);
      assertFalse(homeLight0.isResizable());
      assertFalse(homeLight0.isMovable());
      assertNull(homeLight0.getCatalogId());
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertNull(homeLight0.getCurrency());
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertTrue(homeLight0.isVisible());
      assertNull(homeLight0.getShininess());
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertFalse(homeLight0.isDeformable());
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertNull(homeLight0.getColor());
      assertFalse(homeLight0.isTexturable());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      assertNull(homeLight0.getDescription());
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertNull(homeLight0.getName());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertFalse(homeLight0.isNameVisible());
      assertFalse(homeLight0.isBackFaceShown());
      assertFalse(homeLight0.isModelMirrored());
      
      BigDecimal bigDecimal0 = homeLight0.getValueAddedTax();
      assertNull(bigDecimal0);
      assertFalse(homeLight0.isResizable());
      assertFalse(homeLight0.isMovable());
      assertNull(homeLight0.getCatalogId());
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertNull(homeLight0.getCurrency());
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertTrue(homeLight0.isVisible());
      assertNull(homeLight0.getShininess());
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertFalse(homeLight0.isDeformable());
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertNull(homeLight0.getColor());
      assertFalse(homeLight0.isTexturable());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      assertNull(homeLight0.getDescription());
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertNull(homeLight0.getName());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertFalse(homeLight0.isNameVisible());
      assertFalse(homeLight0.isBackFaceShown());
      assertFalse(homeLight0.isModelMirrored());
      
      String string0 = homeLight0.getName();
      assertNull(string0);
      assertFalse(homeLight0.isResizable());
      assertFalse(homeLight0.isMovable());
      assertNull(homeLight0.getCatalogId());
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertNull(homeLight0.getCurrency());
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertTrue(homeLight0.isVisible());
      assertNull(homeLight0.getShininess());
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertFalse(homeLight0.isDeformable());
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertNull(homeLight0.getColor());
      assertFalse(homeLight0.isTexturable());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      assertNull(homeLight0.getDescription());
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertNull(homeLight0.getName());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertFalse(homeLight0.isNameVisible());
      assertFalse(homeLight0.isBackFaceShown());
      assertFalse(homeLight0.isModelMirrored());
      
      Level level0 = homeLight0.getLevel();
      assertNull(level0);
      assertFalse(homeLight0.isResizable());
      assertFalse(homeLight0.isMovable());
      assertNull(homeLight0.getCatalogId());
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertNull(homeLight0.getCurrency());
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertTrue(homeLight0.isVisible());
      assertNull(homeLight0.getShininess());
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertFalse(homeLight0.isDeformable());
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertNull(homeLight0.getColor());
      assertFalse(homeLight0.isTexturable());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      assertNull(homeLight0.getDescription());
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertNull(homeLight0.getName());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertFalse(homeLight0.isNameVisible());
      assertFalse(homeLight0.isBackFaceShown());
      assertFalse(homeLight0.isModelMirrored());
      
      HomeLight homeLight1 = homeLight0.clone();
      assertNotNull(homeLight1);
      assertNotSame(homeLight0, homeLight1);
      assertNotSame(homeLight1, homeLight0);
      assertFalse(homeLight1.equals((Object)homeLight0));
      assertFalse(homeLight0.isResizable());
      assertFalse(homeLight0.isMovable());
      assertNull(homeLight0.getCatalogId());
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertNull(homeLight0.getCurrency());
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertTrue(homeLight0.isVisible());
      assertNull(homeLight0.getShininess());
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertFalse(homeLight0.isDeformable());
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertNull(homeLight0.getColor());
      assertFalse(homeLight0.isTexturable());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      assertNull(homeLight0.getDescription());
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertNull(homeLight0.getName());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertFalse(homeLight0.isNameVisible());
      assertFalse(homeLight0.isBackFaceShown());
      assertFalse(homeLight0.isModelMirrored());
      assertFalse(homeLight1.isDoorOrWindow());
      assertEquals(0.0F, homeLight1.getY(), 0.01F);
      assertFalse(homeLight1.isBackFaceShown());
      assertEquals(0.0F, homeLight1.getX(), 0.01F);
      assertEquals(0.0F, homeLight1.getGroundElevation(), 0.01F);
      assertNull(homeLight1.getColor());
      assertFalse(homeLight1.isTexturable());
      assertEquals(0.0F, homeLight1.getAngle(), 0.01F);
      assertEquals(0.0F, homeLight1.getElevation(), 0.01F);
      assertEquals(0.0F, homeLight1.getNameYOffset(), 0.01F);
      assertEquals(0.0F, homeLight1.getWidth(), 0.01F);
      assertNull(homeLight1.getName());
      assertFalse(homeLight1.isNameVisible());
      assertFalse(homeLight1.isModelMirrored());
      assertNull(homeLight1.getShininess());
      assertFalse(homeLight1.isMovable());
      assertNull(homeLight1.getCatalogId());
      assertEquals(0.5F, homeLight1.getPower(), 0.01F);
      assertEquals(0.0F, homeLight1.getHeight(), 0.01F);
      assertNull(homeLight1.getDescription());
      assertTrue(homeLight1.isVisible());
      assertNull(homeLight1.getCurrency());
      assertEquals(0.0F, homeLight1.getNameXOffset(), 0.01F);
      assertFalse(homeLight1.isResizable());
      assertEquals(0.0F, homeLight1.getDepth(), 0.01F);
      assertNull(homeLight1.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight1.getNameAngle(), 0.01F);
      assertFalse(homeLight1.isDeformable());
      
      homeLight0.setAngle((-1457.99F));
      assertNotSame(homeLight0, homeLight1);
      assertFalse(homeLight0.equals((Object)homeLight1));
      assertFalse(homeLight0.isResizable());
      assertFalse(homeLight0.isMovable());
      assertNull(homeLight0.getCatalogId());
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertNull(homeLight0.getCurrency());
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertTrue(homeLight0.isVisible());
      assertNull(homeLight0.getShininess());
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertFalse(homeLight0.isDeformable());
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertNull(homeLight0.getColor());
      assertEquals(5.9921865F, homeLight0.getAngle(), 0.01F);
      assertFalse(homeLight0.isTexturable());
      assertFalse(homeLight0.isDoorOrWindow());
      assertNull(homeLight0.getDescription());
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertNull(homeLight0.getName());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertFalse(homeLight0.isNameVisible());
      assertFalse(homeLight0.isBackFaceShown());
      assertFalse(homeLight0.isModelMirrored());
      
      HomeLight homeLight2 = homeLight0.clone();
      assertNotNull(homeLight2);
      assertNotSame(homeLight2, homeLight1);
      assertNotSame(homeLight2, homeLight0);
      assertNotSame(homeLight0, homeLight1);
      assertNotSame(homeLight0, homeLight2);
      assertFalse(homeLight2.equals((Object)homeLight1));
      assertFalse(homeLight2.equals((Object)homeLight0));
      assertFalse(homeLight0.equals((Object)homeLight1));
      assertFalse(homeLight2.isResizable());
      assertEquals(0.0F, homeLight2.getWidth(), 0.01F);
      assertEquals(0.5F, homeLight2.getPower(), 0.01F);
      assertEquals(0.0F, homeLight2.getHeight(), 0.01F);
      assertFalse(homeLight2.isMovable());
      assertEquals(0.0F, homeLight2.getNameXOffset(), 0.01F);
      assertFalse(homeLight2.isDeformable());
      assertNull(homeLight2.getDescription());
      assertEquals(0.0F, homeLight2.getDepth(), 0.01F);
      assertEquals(0.0F, homeLight2.getElevation(), 0.01F);
      assertEquals(0.0F, homeLight2.getNameAngle(), 0.01F);
      assertNull(homeLight2.getStaircaseCutOutShape());
      assertNull(homeLight2.getShininess());
      assertTrue(homeLight2.isVisible());
      assertEquals(0.0F, homeLight2.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight2.getX(), 0.01F);
      assertEquals(0.0F, homeLight2.getY(), 0.01F);
      assertFalse(homeLight2.isDoorOrWindow());
      assertFalse(homeLight2.isBackFaceShown());
      assertEquals(5.9921865F, homeLight2.getAngle(), 0.01F);
      assertFalse(homeLight2.isTexturable());
      assertNull(homeLight2.getCurrency());
      assertNull(homeLight2.getName());
      assertFalse(homeLight2.isNameVisible());
      assertEquals(0.0F, homeLight2.getNameYOffset(), 0.01F);
      assertNull(homeLight2.getColor());
      assertNull(homeLight2.getCatalogId());
      assertFalse(homeLight2.isModelMirrored());
      assertFalse(homeLight0.isResizable());
      assertFalse(homeLight0.isMovable());
      assertNull(homeLight0.getCatalogId());
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertNull(homeLight0.getCurrency());
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertTrue(homeLight0.isVisible());
      assertNull(homeLight0.getShininess());
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertFalse(homeLight0.isDeformable());
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertNull(homeLight0.getColor());
      assertEquals(5.9921865F, homeLight0.getAngle(), 0.01F);
      assertFalse(homeLight0.isTexturable());
      assertFalse(homeLight0.isDoorOrWindow());
      assertNull(homeLight0.getDescription());
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertNull(homeLight0.getName());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertFalse(homeLight0.isNameVisible());
      assertFalse(homeLight0.isBackFaceShown());
      assertFalse(homeLight0.isModelMirrored());
      
      homeLight2.setName("com.eteks.sweethome3d.model.HomeLight$Property");
      assertNotSame(homeLight2, homeLight1);
      assertNotSame(homeLight2, homeLight0);
      assertNotSame(homeLight0, homeLight1);
      assertNotSame(homeLight0, homeLight2);
      assertFalse(homeLight2.equals((Object)homeLight1));
      assertFalse(homeLight2.equals((Object)homeLight0));
      assertFalse(homeLight0.equals((Object)homeLight1));
      assertFalse(homeLight0.equals((Object)homeLight2));
      assertFalse(homeLight2.isResizable());
      assertEquals(0.0F, homeLight2.getWidth(), 0.01F);
      assertEquals(0.5F, homeLight2.getPower(), 0.01F);
      assertEquals(0.0F, homeLight2.getHeight(), 0.01F);
      assertFalse(homeLight2.isMovable());
      assertEquals(0.0F, homeLight2.getNameXOffset(), 0.01F);
      assertFalse(homeLight2.isDeformable());
      assertNull(homeLight2.getDescription());
      assertEquals(0.0F, homeLight2.getDepth(), 0.01F);
      assertEquals("com.eteks.sweethome3d.model.HomeLight$Property", homeLight2.getName());
      assertEquals(0.0F, homeLight2.getElevation(), 0.01F);
      assertEquals(0.0F, homeLight2.getNameAngle(), 0.01F);
      assertNull(homeLight2.getStaircaseCutOutShape());
      assertNull(homeLight2.getShininess());
      assertTrue(homeLight2.isVisible());
      assertEquals(0.0F, homeLight2.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight2.getX(), 0.01F);
      assertEquals(0.0F, homeLight2.getY(), 0.01F);
      assertFalse(homeLight2.isDoorOrWindow());
      assertFalse(homeLight2.isBackFaceShown());
      assertEquals(5.9921865F, homeLight2.getAngle(), 0.01F);
      assertFalse(homeLight2.isTexturable());
      assertNull(homeLight2.getCurrency());
      assertFalse(homeLight2.isNameVisible());
      assertEquals(0.0F, homeLight2.getNameYOffset(), 0.01F);
      assertNull(homeLight2.getColor());
      assertNull(homeLight2.getCatalogId());
      assertFalse(homeLight2.isModelMirrored());
      assertFalse(homeLight0.isResizable());
      assertFalse(homeLight0.isMovable());
      assertNull(homeLight0.getCatalogId());
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertNull(homeLight0.getCurrency());
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertTrue(homeLight0.isVisible());
      assertNull(homeLight0.getShininess());
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertFalse(homeLight0.isDeformable());
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertNull(homeLight0.getColor());
      assertEquals(5.9921865F, homeLight0.getAngle(), 0.01F);
      assertFalse(homeLight0.isTexturable());
      assertFalse(homeLight0.isDoorOrWindow());
      assertNull(homeLight0.getDescription());
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertNull(homeLight0.getName());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertFalse(homeLight0.isNameVisible());
      assertFalse(homeLight0.isBackFaceShown());
      assertFalse(homeLight0.isModelMirrored());
      
      Integer integer1 = Integer.valueOf((int) (byte)62);
      assertNotNull(integer1);
      assertFalse(integer1.equals((Object)integer0));
      assertEquals(62, (int)integer1);
      
      Integer integer2 = Integer.valueOf((int) (byte) (-32));
      assertNotNull(integer2);
      assertFalse(integer2.equals((Object)integer1));
      assertFalse(integer2.equals((Object)integer0));
      assertEquals((-32), (int)integer2);
      
      // Undeclared exception!
      try { 
        homeLight1.setColor(integer0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Piece isn't texturable
         //
         verifyException("com.eteks.sweethome3d.model.HomePieceOfFurniture", e);
      }
  }

  @Test(timeout = 4000)
  public void test177()  throws Throwable  {
      Integer integer0 = new Integer((-1469));
      assertNotNull(integer0);
      assertEquals((-1469), (int)integer0);
      
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      Light light0 = mock(Light.class, new ViolatedAssumptionAnswer());
      doReturn((LightSource[]) null).when(light0).getLightSources();
      doReturn((Integer) null).when(light0).getColor();
      doReturn((String) null).when(light0).getCurrency();
      doReturn(0.0F).when(light0).getDepth();
      doReturn((String) null).when(light0).getDescription();
      doReturn(0.0F).when(light0).getElevation();
      doReturn(0.0F).when(light0).getHeight();
      doReturn((Content) null).when(light0).getIcon();
      doReturn((Content) null).when(light0).getModel();
      doReturn((float[][]) null).when(light0).getModelRotation();
      doReturn((String) null).when(light0).getName();
      doReturn((Content) null).when(light0).getPlanIcon();
      doReturn((BigDecimal) null).when(light0).getPrice();
      doReturn((String) null).when(light0).getStaircaseCutOutShape();
      doReturn((BigDecimal) null).when(light0).getValueAddedTaxPercentage();
      doReturn(0.0F).when(light0).getWidth();
      doReturn(false).when(light0).isBackFaceShown();
      doReturn(false).when(light0).isDeformable();
      doReturn(false).when(light0).isDoorOrWindow();
      doReturn(false).when(light0).isMovable();
      doReturn(false).when(light0).isResizable();
      doReturn(false).when(light0).isTexturable();
      HomeLight homeLight0 = new HomeLight(light0);
      assertNotNull(homeLight0);
      assertFalse(homeLight0.isTexturable());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertFalse(homeLight0.isModelMirrored());
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertNull(homeLight0.getColor());
      assertFalse(homeLight0.isNameVisible());
      assertNull(homeLight0.getName());
      assertFalse(homeLight0.isBackFaceShown());
      assertNull(homeLight0.getDescription());
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertFalse(homeLight0.isResizable());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertNull(homeLight0.getShininess());
      assertTrue(homeLight0.isVisible());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertNull(homeLight0.getCatalogId());
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertFalse(homeLight0.isDeformable());
      assertFalse(homeLight0.isMovable());
      assertNull(homeLight0.getCurrency());
      
      homeLight0.setElevation((-1.0F));
      assertFalse(homeLight0.isTexturable());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertEquals((-1.0F), homeLight0.getGroundElevation(), 0.01F);
      assertFalse(homeLight0.isModelMirrored());
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertNull(homeLight0.getColor());
      assertFalse(homeLight0.isNameVisible());
      assertNull(homeLight0.getName());
      assertFalse(homeLight0.isBackFaceShown());
      assertNull(homeLight0.getDescription());
      assertEquals((-1.0F), homeLight0.getElevation(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertFalse(homeLight0.isResizable());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertNull(homeLight0.getShininess());
      assertTrue(homeLight0.isVisible());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertNull(homeLight0.getCatalogId());
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertFalse(homeLight0.isDeformable());
      assertFalse(homeLight0.isMovable());
      assertNull(homeLight0.getCurrency());
      
      homeLight0.setNameAngle((-1.0F));
      assertFalse(homeLight0.isTexturable());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertEquals((-1.0F), homeLight0.getGroundElevation(), 0.01F);
      assertEquals(5.2831855F, homeLight0.getNameAngle(), 0.01F);
      assertFalse(homeLight0.isModelMirrored());
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertNull(homeLight0.getColor());
      assertFalse(homeLight0.isNameVisible());
      assertNull(homeLight0.getName());
      assertFalse(homeLight0.isBackFaceShown());
      assertNull(homeLight0.getDescription());
      assertEquals((-1.0F), homeLight0.getElevation(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertFalse(homeLight0.isResizable());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertNull(homeLight0.getShininess());
      assertTrue(homeLight0.isVisible());
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertNull(homeLight0.getCatalogId());
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertFalse(homeLight0.isDeformable());
      assertFalse(homeLight0.isMovable());
      assertNull(homeLight0.getCurrency());
      
      homeLight0.setY((-1.0F));
      assertFalse(homeLight0.isTexturable());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertEquals((-1.0F), homeLight0.getGroundElevation(), 0.01F);
      assertEquals(5.2831855F, homeLight0.getNameAngle(), 0.01F);
      assertFalse(homeLight0.isModelMirrored());
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals((-1.0F), homeLight0.getY(), 0.01F);
      assertNull(homeLight0.getColor());
      assertFalse(homeLight0.isNameVisible());
      assertNull(homeLight0.getName());
      assertFalse(homeLight0.isBackFaceShown());
      assertNull(homeLight0.getDescription());
      assertEquals((-1.0F), homeLight0.getElevation(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertFalse(homeLight0.isResizable());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertNull(homeLight0.getShininess());
      assertTrue(homeLight0.isVisible());
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertNull(homeLight0.getCatalogId());
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertFalse(homeLight0.isDeformable());
      assertFalse(homeLight0.isMovable());
      assertNull(homeLight0.getCurrency());
      
      boolean boolean1 = homeLight0.isBottomLeftPointAt((-1.0F), (-1.0F), (-1.0F));
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      assertFalse(homeLight0.isTexturable());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertEquals((-1.0F), homeLight0.getGroundElevation(), 0.01F);
      assertEquals(5.2831855F, homeLight0.getNameAngle(), 0.01F);
      assertFalse(homeLight0.isModelMirrored());
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals((-1.0F), homeLight0.getY(), 0.01F);
      assertNull(homeLight0.getColor());
      assertFalse(homeLight0.isNameVisible());
      assertNull(homeLight0.getName());
      assertFalse(homeLight0.isBackFaceShown());
      assertNull(homeLight0.getDescription());
      assertEquals((-1.0F), homeLight0.getElevation(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertFalse(homeLight0.isResizable());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertNull(homeLight0.getShininess());
      assertTrue(homeLight0.isVisible());
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertNull(homeLight0.getCatalogId());
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertFalse(homeLight0.isDeformable());
      assertFalse(homeLight0.isMovable());
      assertNull(homeLight0.getCurrency());
      
      BigDecimal bigDecimal0 = homeLight0.getPriceValueAddedTaxIncluded();
      assertNull(bigDecimal0);
      assertFalse(homeLight0.isTexturable());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertEquals((-1.0F), homeLight0.getGroundElevation(), 0.01F);
      assertEquals(5.2831855F, homeLight0.getNameAngle(), 0.01F);
      assertFalse(homeLight0.isModelMirrored());
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals((-1.0F), homeLight0.getY(), 0.01F);
      assertNull(homeLight0.getColor());
      assertFalse(homeLight0.isNameVisible());
      assertNull(homeLight0.getName());
      assertFalse(homeLight0.isBackFaceShown());
      assertNull(homeLight0.getDescription());
      assertEquals((-1.0F), homeLight0.getElevation(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertFalse(homeLight0.isResizable());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertNull(homeLight0.getShininess());
      assertTrue(homeLight0.isVisible());
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertNull(homeLight0.getCatalogId());
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertFalse(homeLight0.isDeformable());
      assertFalse(homeLight0.isMovable());
      assertNull(homeLight0.getCurrency());
      
      homeLight0.setDescription("CW9$NS K:I");
      assertFalse(homeLight0.isTexturable());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertEquals((-1.0F), homeLight0.getGroundElevation(), 0.01F);
      assertEquals(5.2831855F, homeLight0.getNameAngle(), 0.01F);
      assertFalse(homeLight0.isModelMirrored());
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals((-1.0F), homeLight0.getY(), 0.01F);
      assertNull(homeLight0.getColor());
      assertFalse(homeLight0.isNameVisible());
      assertNull(homeLight0.getName());
      assertFalse(homeLight0.isBackFaceShown());
      assertEquals((-1.0F), homeLight0.getElevation(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertFalse(homeLight0.isResizable());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertNull(homeLight0.getShininess());
      assertTrue(homeLight0.isVisible());
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertNull(homeLight0.getCatalogId());
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertFalse(homeLight0.isDeformable());
      assertFalse(homeLight0.isMovable());
      assertEquals("CW9$NS K:I", homeLight0.getDescription());
      assertNull(homeLight0.getCurrency());
      
      // Undeclared exception!
      try { 
        homeLight0.setTexture((HomeTexture) null);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Piece isn't texturable
         //
         verifyException("com.eteks.sweethome3d.model.HomePieceOfFurniture", e);
      }
  }

  @Test(timeout = 4000)
  public void test178()  throws Throwable  {
      LightSource[] lightSourceArray0 = new LightSource[3];
      Float float0 = new Float(0.0F);
      assertNotNull(float0);
      assertEquals(0.0F, (float)float0, 0.01F);
      
      LightSource lightSource0 = new LightSource(0.0F, 0.0F, (-179), (-179), float0);
      assertNotNull(lightSource0);
      assertEquals(0.0F, lightSource0.getY(), 0.01F);
      assertEquals(0.0F, lightSource0.getX(), 0.01F);
      assertEquals((-179.0F), lightSource0.getZ(), 0.01F);
      assertEquals((-179), lightSource0.getColor());
      assertEquals(0.0F, lightSource0.getDiameter(), 0.01F);
      
      lightSourceArray0[0] = lightSource0;
      LightSource lightSource1 = new LightSource((-2576.1F), 2112.8293F, 2129.2F, 9);
      assertNotNull(lightSource1);
      assertFalse(lightSource1.equals((Object)lightSource0));
      assertEquals(2129.2F, lightSource1.getZ(), 0.01F);
      assertEquals(9, lightSource1.getColor());
      assertNull(lightSource1.getDiameter());
      assertEquals((-2576.1F), lightSource1.getX(), 0.01F);
      assertEquals(2112.8293F, lightSource1.getY(), 0.01F);
      
      lightSourceArray0[1] = lightSource1;
      LightSource lightSource2 = new LightSource((-179), 264.8659F, (-179), 9);
      assertNotNull(lightSource2);
      assertFalse(lightSource2.equals((Object)lightSource1));
      assertFalse(lightSource2.equals((Object)lightSource0));
      assertNull(lightSource2.getDiameter());
      assertEquals(264.8659F, lightSource2.getY(), 0.01F);
      assertEquals(9, lightSource2.getColor());
      assertEquals((-179.0F), lightSource2.getZ(), 0.01F);
      assertEquals((-179.0F), lightSource2.getX(), 0.01F);
      
      lightSourceArray0[2] = lightSource2;
      Integer integer0 = new Integer(9);
      assertNotNull(integer0);
      assertEquals(9, (int)integer0);
      
      Light light0 = mock(Light.class, new ViolatedAssumptionAnswer());
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)20;
      Long long0 = new Long(0L);
      assertNotNull(long0);
      assertEquals(0L, (long)long0);
      
      Long long1 = Long.getLong("com.eteks.sweethome3d.model.HomeDoorOrWindow", long0);
      assertNotNull(long1);
      assertEquals(0L, (long)long1);
      
      Float float1 = new Float((double) 0L);
      assertNotNull(float1);
      assertEquals((float)float1, (float)float0, 0.01F);
      assertEquals(0.0F, (float)float1, 0.01F);
      
      Sash[] sashArray0 = new Sash[2];
      Sash sash0 = new Sash(991.0187F, 0.0F, (-1666.0F), 0.0F, (-1666.0F));
      assertNotNull(sash0);
      assertEquals(0.0F, sash0.getYAxis(), 0.01F);
      assertEquals((-1666.0F), sash0.getWidth(), 0.01F);
      assertEquals(991.0187F, sash0.getXAxis(), 0.01F);
      assertEquals(0.0F, sash0.getStartAngle(), 0.01F);
      assertEquals((-1666.0F), sash0.getEndAngle(), 0.01F);
      
      sashArray0[0] = sash0;
      Sash sash1 = new Sash(0.0F, 0.0F, 0.0F, (-201.17F), 0.3926991F);
      assertNotNull(sash1);
      assertFalse(sash1.equals((Object)sash0));
      assertEquals(0.3926991F, sash1.getEndAngle(), 0.01F);
      assertEquals(0.0F, sash1.getWidth(), 0.01F);
      assertEquals(0.0F, sash1.getXAxis(), 0.01F);
      assertEquals((-201.17F), sash1.getStartAngle(), 0.01F);
      assertEquals(0.0F, sash1.getYAxis(), 0.01F);
      
      sashArray0[1] = sash1;
      float[][] floatArray0 = new float[4][2];
      float[] floatArray1 = new float[4];
      floatArray1[0] = 0.0F;
      floatArray1[1] = 991.0187F;
      floatArray1[2] = 991.0187F;
      floatArray1[3] = 0.0F;
      floatArray0[0] = floatArray1;
      float[] floatArray2 = new float[3];
      assertFalse(floatArray2.equals((Object)floatArray1));
      
      floatArray2[0] = 991.0187F;
      floatArray2[1] = (-201.17F);
      floatArray2[2] = 0.3926991F;
      floatArray0[1] = floatArray2;
      float[] floatArray3 = new float[9];
      assertFalse(floatArray3.equals((Object)floatArray2));
      assertFalse(floatArray3.equals((Object)floatArray1));
      
      floatArray3[0] = 991.0187F;
      floatArray3[1] = (float) 0L;
      floatArray3[2] = (-201.17F);
      floatArray3[3] = (-1.0F);
      floatArray3[4] = 0.0F;
      floatArray3[5] = 0.0F;
      floatArray3[6] = (-1666.0F);
      floatArray3[7] = (-1666.0F);
      floatArray3[8] = (-1666.0F);
      floatArray0[2] = floatArray3;
      float[] floatArray4 = new float[0];
      assertFalse(floatArray4.equals((Object)floatArray3));
      assertFalse(floatArray4.equals((Object)floatArray1));
      assertFalse(floatArray4.equals((Object)floatArray2));
      
      floatArray0[3] = floatArray4;
      BigInteger bigInteger0 = BigInteger.ZERO;
      assertNotNull(bigInteger0);
      assertEquals((short)0, bigInteger0.shortValue());
      assertEquals((byte)0, bigInteger0.byteValue());
      
      BigDecimal bigDecimal0 = new BigDecimal(bigInteger0);
      assertNotNull(bigDecimal0);
      assertEquals((short)0, bigInteger0.shortValue());
      assertEquals((byte)0, bigInteger0.byteValue());
      assertEquals((short)0, bigDecimal0.shortValue());
      assertEquals((byte)0, bigDecimal0.byteValue());
      
      CatalogDoorOrWindow catalogDoorOrWindow0 = new CatalogDoorOrWindow("com.eteks.sweethome3d.model.TextStyle", "com.eteks.sweethome3d.model.TextStyle", "com.eteks.sweethome3d.model.HomePieceOfFurniture$17", "com.eteks.sweethome3d.model.HomePieceOfFurniture$17", (String[]) null, long1, float1, (Content) null, (Content) null, (Content) null, 0L, 0L, 0.0F, 0.0F, false, (-201.17F), 0L, sashArray0, floatArray0, "2.", true, false, false, bigDecimal0, bigDecimal0, "com.eteks.sweethome3d.model.TextStyle");
      assertEquals(4, floatArray0.length);
      assertEquals(2, sashArray0.length);
      assertNotNull(catalogDoorOrWindow0);
      assertEquals((float)float1, (float)float0, 0.01F);
      assertEquals((short)0, bigInteger0.shortValue());
      assertEquals((byte)0, bigInteger0.byteValue());
      assertEquals((short)0, bigDecimal0.shortValue());
      assertEquals((byte)0, bigDecimal0.byteValue());
      assertEquals(0.0F, catalogDoorOrWindow0.getDepth(), 0.01F);
      assertFalse(catalogDoorOrWindow0.isModifiable());
      assertEquals("com.eteks.sweethome3d.model.TextStyle", catalogDoorOrWindow0.getCurrency());
      assertEquals(0.0F, catalogDoorOrWindow0.getWallDistance(), 0.01F);
      assertFalse(catalogDoorOrWindow0.isTexturable());
      assertFalse(catalogDoorOrWindow0.isBackFaceShown());
      assertEquals(0.3926991F, catalogDoorOrWindow0.getIconYaw(), 0.01F);
      assertEquals(0.0F, catalogDoorOrWindow0.getHeight(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isResizable());
      assertEquals(0.0F, catalogDoorOrWindow0.getWidth(), 0.01F);
      assertEquals(0.0F, catalogDoorOrWindow0.getElevation(), 0.01F);
      assertEquals("com.eteks.sweethome3d.model.HomePieceOfFurniture$17", catalogDoorOrWindow0.getDescription());
      assertFalse(catalogDoorOrWindow0.isDeformable());
      assertEquals(0L, (long)catalogDoorOrWindow0.getCreationDate());
      assertNull(catalogDoorOrWindow0.getColor());
      assertFalse(catalogDoorOrWindow0.isMovable());
      assertEquals("com.eteks.sweethome3d.model.TextStyle", catalogDoorOrWindow0.getName());
      assertEquals(0.0F, catalogDoorOrWindow0.getGrade(), 0.01F);
      assertNull(catalogDoorOrWindow0.getStaircaseCutOutShape());
      assertTrue(catalogDoorOrWindow0.isProportional());
      assertEquals("com.eteks.sweethome3d.model.TextStyle", catalogDoorOrWindow0.getId());
      assertEquals("com.eteks.sweethome3d.model.HomePieceOfFurniture$17", catalogDoorOrWindow0.getInformation());
      assertTrue(catalogDoorOrWindow0.isDoorOrWindow());
      assertEquals("2.", catalogDoorOrWindow0.getCreator());
      assertEquals((-201.17F), catalogDoorOrWindow0.getWallThickness(), 0.01F);
      
      float float2 = catalogDoorOrWindow0.getWallThickness();
      assertEquals(4, floatArray0.length);
      assertEquals(2, sashArray0.length);
      assertEquals((float)float1, (float)float0, 0.01F);
      assertEquals((-201.17F), float2, 0.01F);
      assertEquals((short)0, bigInteger0.shortValue());
      assertEquals((byte)0, bigInteger0.byteValue());
      assertEquals((short)0, bigDecimal0.shortValue());
      assertEquals((byte)0, bigDecimal0.byteValue());
      assertEquals(0.0F, catalogDoorOrWindow0.getDepth(), 0.01F);
      assertFalse(catalogDoorOrWindow0.isModifiable());
      assertEquals("com.eteks.sweethome3d.model.TextStyle", catalogDoorOrWindow0.getCurrency());
      assertEquals(0.0F, catalogDoorOrWindow0.getWallDistance(), 0.01F);
      assertFalse(catalogDoorOrWindow0.isTexturable());
      assertFalse(catalogDoorOrWindow0.isBackFaceShown());
      assertEquals(0.3926991F, catalogDoorOrWindow0.getIconYaw(), 0.01F);
      assertEquals(0.0F, catalogDoorOrWindow0.getHeight(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isResizable());
      assertEquals(0.0F, catalogDoorOrWindow0.getWidth(), 0.01F);
      assertEquals(0.0F, catalogDoorOrWindow0.getElevation(), 0.01F);
      assertEquals("com.eteks.sweethome3d.model.HomePieceOfFurniture$17", catalogDoorOrWindow0.getDescription());
      assertFalse(catalogDoorOrWindow0.isDeformable());
      assertEquals(0L, (long)catalogDoorOrWindow0.getCreationDate());
      assertNull(catalogDoorOrWindow0.getColor());
      assertFalse(catalogDoorOrWindow0.isMovable());
      assertEquals("com.eteks.sweethome3d.model.TextStyle", catalogDoorOrWindow0.getName());
      assertEquals(0.0F, catalogDoorOrWindow0.getGrade(), 0.01F);
      assertNull(catalogDoorOrWindow0.getStaircaseCutOutShape());
      assertTrue(catalogDoorOrWindow0.isProportional());
      assertEquals("com.eteks.sweethome3d.model.TextStyle", catalogDoorOrWindow0.getId());
      assertEquals("com.eteks.sweethome3d.model.HomePieceOfFurniture$17", catalogDoorOrWindow0.getInformation());
      assertTrue(catalogDoorOrWindow0.isDoorOrWindow());
      assertEquals("2.", catalogDoorOrWindow0.getCreator());
      assertEquals((-201.17F), catalogDoorOrWindow0.getWallThickness(), 0.01F);
      
      CatalogDoorOrWindow catalogDoorOrWindow1 = new CatalogDoorOrWindow("TEXTURE", "java.version", "", (Content) null, (Content) null, (Content) null, 1.0F, 0.5F, 0.5F, 672.42474F, true, 0.0F, (-1.0F), sashArray0, floatArray0, "CRCKF", false, true, false, bigDecimal0, bigDecimal0, "");
      assertEquals(4, floatArray0.length);
      assertEquals(2, sashArray0.length);
      assertNotNull(catalogDoorOrWindow1);
      assertFalse(catalogDoorOrWindow1.equals((Object)catalogDoorOrWindow0));
      assertEquals(0.0F, catalogDoorOrWindow1.getWallThickness(), 0.01F);
      assertNull(catalogDoorOrWindow1.getStaircaseCutOutShape());
      assertFalse(catalogDoorOrWindow1.isResizable());
      assertEquals("TEXTURE", catalogDoorOrWindow1.getId());
      assertNull(catalogDoorOrWindow1.getColor());
      assertTrue(catalogDoorOrWindow1.isMovable());
      assertNull(catalogDoorOrWindow1.getInformation());
      assertTrue(catalogDoorOrWindow1.isDeformable());
      assertEquals("java.version", catalogDoorOrWindow1.getName());
      assertTrue(catalogDoorOrWindow1.isDoorOrWindow());
      assertNull(catalogDoorOrWindow1.getGrade());
      assertTrue(catalogDoorOrWindow1.isProportional());
      assertEquals(0.3926991F, catalogDoorOrWindow1.getIconYaw(), 0.01F);
      assertEquals("", catalogDoorOrWindow1.getCurrency());
      assertFalse(catalogDoorOrWindow1.isModifiable());
      assertNull(catalogDoorOrWindow1.getCreationDate());
      assertEquals(0.5F, catalogDoorOrWindow1.getDepth(), 0.01F);
      assertFalse(catalogDoorOrWindow1.isBackFaceShown());
      assertFalse(catalogDoorOrWindow1.isTexturable());
      assertEquals("CRCKF", catalogDoorOrWindow1.getCreator());
      assertEquals((-1.0F), catalogDoorOrWindow1.getWallDistance(), 0.01F);
      assertEquals(672.42474F, catalogDoorOrWindow1.getElevation(), 0.01F);
      assertEquals("", catalogDoorOrWindow1.getDescription());
      assertEquals(0.5F, catalogDoorOrWindow1.getHeight(), 0.01F);
      assertEquals(1.0F, catalogDoorOrWindow1.getWidth(), 0.01F);
      assertEquals((short)0, bigInteger0.shortValue());
      assertEquals((byte)0, bigInteger0.byteValue());
      assertEquals((short)0, bigDecimal0.shortValue());
      assertEquals((byte)0, bigDecimal0.byteValue());
      
      float float3 = catalogDoorOrWindow1.getWallDistance();
      assertEquals(4, floatArray0.length);
      assertEquals(2, sashArray0.length);
      assertNotSame(catalogDoorOrWindow1, catalogDoorOrWindow0);
      assertFalse(catalogDoorOrWindow1.equals((Object)catalogDoorOrWindow0));
      assertNotEquals(float3, float2, 0.01F);
      assertEquals((-1.0F), float3, 0.01F);
      assertEquals(0.0F, catalogDoorOrWindow1.getWallThickness(), 0.01F);
      assertNull(catalogDoorOrWindow1.getStaircaseCutOutShape());
      assertFalse(catalogDoorOrWindow1.isResizable());
      assertEquals("TEXTURE", catalogDoorOrWindow1.getId());
      assertNull(catalogDoorOrWindow1.getColor());
      assertTrue(catalogDoorOrWindow1.isMovable());
      assertNull(catalogDoorOrWindow1.getInformation());
      assertTrue(catalogDoorOrWindow1.isDeformable());
      assertEquals("java.version", catalogDoorOrWindow1.getName());
      assertTrue(catalogDoorOrWindow1.isDoorOrWindow());
      assertNull(catalogDoorOrWindow1.getGrade());
      assertTrue(catalogDoorOrWindow1.isProportional());
      assertEquals(0.3926991F, catalogDoorOrWindow1.getIconYaw(), 0.01F);
      assertEquals("", catalogDoorOrWindow1.getCurrency());
      assertFalse(catalogDoorOrWindow1.isModifiable());
      assertNull(catalogDoorOrWindow1.getCreationDate());
      assertEquals(0.5F, catalogDoorOrWindow1.getDepth(), 0.01F);
      assertFalse(catalogDoorOrWindow1.isBackFaceShown());
      assertFalse(catalogDoorOrWindow1.isTexturable());
      assertEquals("CRCKF", catalogDoorOrWindow1.getCreator());
      assertEquals((-1.0F), catalogDoorOrWindow1.getWallDistance(), 0.01F);
      assertEquals(672.42474F, catalogDoorOrWindow1.getElevation(), 0.01F);
      assertEquals("", catalogDoorOrWindow1.getDescription());
      assertEquals(0.5F, catalogDoorOrWindow1.getHeight(), 0.01F);
      assertEquals(1.0F, catalogDoorOrWindow1.getWidth(), 0.01F);
      assertEquals((short)0, bigInteger0.shortValue());
      assertEquals((byte)0, bigInteger0.byteValue());
      assertEquals((short)0, bigDecimal0.shortValue());
      assertEquals((byte)0, bigDecimal0.byteValue());
      
      Sash[] sashArray1 = catalogDoorOrWindow0.getSashes();
      assertEquals(2, sashArray1.length);
      assertEquals(4, floatArray0.length);
      assertEquals(2, sashArray0.length);
      assertNotNull(sashArray1);
      assertNotSame(sashArray1, sashArray0);
      assertNotSame(catalogDoorOrWindow0, catalogDoorOrWindow1);
      assertNotSame(sashArray0, sashArray1);
      assertFalse(sashArray1.equals((Object)sashArray0));
      assertEquals((float)float1, (float)float0, 0.01F);
      assertNotEquals((float)float1, (float)float3, 0.01F);
      assertNotEquals((float)float1, (float)float2, 0.01F);
      assertFalse(catalogDoorOrWindow0.equals((Object)catalogDoorOrWindow1));
      assertEquals((short)0, bigInteger0.shortValue());
      assertEquals((byte)0, bigInteger0.byteValue());
      assertEquals((short)0, bigDecimal0.shortValue());
      assertEquals((byte)0, bigDecimal0.byteValue());
      assertEquals(0.0F, catalogDoorOrWindow0.getDepth(), 0.01F);
      assertFalse(catalogDoorOrWindow0.isModifiable());
      assertEquals("com.eteks.sweethome3d.model.TextStyle", catalogDoorOrWindow0.getCurrency());
      assertEquals(0.0F, catalogDoorOrWindow0.getWallDistance(), 0.01F);
      assertFalse(catalogDoorOrWindow0.isTexturable());
      assertFalse(catalogDoorOrWindow0.isBackFaceShown());
      assertEquals(0.3926991F, catalogDoorOrWindow0.getIconYaw(), 0.01F);
      assertEquals(0.0F, catalogDoorOrWindow0.getHeight(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isResizable());
      assertEquals(0.0F, catalogDoorOrWindow0.getWidth(), 0.01F);
      assertEquals(0.0F, catalogDoorOrWindow0.getElevation(), 0.01F);
      assertEquals("com.eteks.sweethome3d.model.HomePieceOfFurniture$17", catalogDoorOrWindow0.getDescription());
      assertFalse(catalogDoorOrWindow0.isDeformable());
      assertEquals(0L, (long)catalogDoorOrWindow0.getCreationDate());
      assertNull(catalogDoorOrWindow0.getColor());
      assertFalse(catalogDoorOrWindow0.isMovable());
      assertEquals("com.eteks.sweethome3d.model.TextStyle", catalogDoorOrWindow0.getName());
      assertEquals(0.0F, catalogDoorOrWindow0.getGrade(), 0.01F);
      assertNull(catalogDoorOrWindow0.getStaircaseCutOutShape());
      assertTrue(catalogDoorOrWindow0.isProportional());
      assertEquals("com.eteks.sweethome3d.model.TextStyle", catalogDoorOrWindow0.getId());
      assertEquals("com.eteks.sweethome3d.model.HomePieceOfFurniture$17", catalogDoorOrWindow0.getInformation());
      assertTrue(catalogDoorOrWindow0.isDoorOrWindow());
      assertEquals("2.", catalogDoorOrWindow0.getCreator());
      assertEquals((-201.17F), catalogDoorOrWindow0.getWallThickness(), 0.01F);
      
      HomeDoorOrWindow homeDoorOrWindow0 = new HomeDoorOrWindow(catalogDoorOrWindow1);
      assertEquals(4, floatArray0.length);
      assertEquals(2, sashArray0.length);
      assertNotNull(homeDoorOrWindow0);
      assertFalse(catalogDoorOrWindow1.equals((Object)catalogDoorOrWindow0));
      assertFalse(sashArray0.equals((Object)sashArray1));
      assertEquals(0.0F, catalogDoorOrWindow1.getWallThickness(), 0.01F);
      assertNull(catalogDoorOrWindow1.getStaircaseCutOutShape());
      assertFalse(catalogDoorOrWindow1.isResizable());
      assertEquals("TEXTURE", catalogDoorOrWindow1.getId());
      assertNull(catalogDoorOrWindow1.getColor());
      assertTrue(catalogDoorOrWindow1.isMovable());
      assertNull(catalogDoorOrWindow1.getInformation());
      assertTrue(catalogDoorOrWindow1.isDeformable());
      assertEquals("java.version", catalogDoorOrWindow1.getName());
      assertTrue(catalogDoorOrWindow1.isDoorOrWindow());
      assertNull(catalogDoorOrWindow1.getGrade());
      assertTrue(catalogDoorOrWindow1.isProportional());
      assertEquals(0.3926991F, catalogDoorOrWindow1.getIconYaw(), 0.01F);
      assertEquals("", catalogDoorOrWindow1.getCurrency());
      assertFalse(catalogDoorOrWindow1.isModifiable());
      assertNull(catalogDoorOrWindow1.getCreationDate());
      assertEquals(0.5F, catalogDoorOrWindow1.getDepth(), 0.01F);
      assertFalse(catalogDoorOrWindow1.isBackFaceShown());
      assertFalse(catalogDoorOrWindow1.isTexturable());
      assertEquals("CRCKF", catalogDoorOrWindow1.getCreator());
      assertEquals((-1.0F), catalogDoorOrWindow1.getWallDistance(), 0.01F);
      assertEquals(672.42474F, catalogDoorOrWindow1.getElevation(), 0.01F);
      assertEquals("", catalogDoorOrWindow1.getDescription());
      assertEquals(0.5F, catalogDoorOrWindow1.getHeight(), 0.01F);
      assertEquals(1.0F, catalogDoorOrWindow1.getWidth(), 0.01F);
      assertEquals("", homeDoorOrWindow0.getDescription());
      assertEquals(0.0F, homeDoorOrWindow0.getNameXOffset(), 0.01F);
      assertEquals(0.5F, homeDoorOrWindow0.getDepth(), 0.01F);
      assertFalse(homeDoorOrWindow0.isTexturable());
      assertEquals(0.0F, homeDoorOrWindow0.getNameAngle(), 0.01F);
      assertNull(homeDoorOrWindow0.getStaircaseCutOutShape());
      assertNull(homeDoorOrWindow0.getShininess());
      assertTrue(homeDoorOrWindow0.isMovable());
      assertTrue(homeDoorOrWindow0.isDoorOrWindow());
      assertFalse(homeDoorOrWindow0.isResizable());
      assertEquals("TEXTURE", homeDoorOrWindow0.getCatalogId());
      assertEquals(0.5F, homeDoorOrWindow0.getHeight(), 0.01F);
      assertEquals((-1.0F), homeDoorOrWindow0.getWallDistance(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getNameYOffset(), 0.01F);
      assertEquals(672.42474F, homeDoorOrWindow0.getGroundElevation(), 0.01F);
      assertTrue(homeDoorOrWindow0.isVisible());
      assertEquals("", homeDoorOrWindow0.getCurrency());
      assertEquals(1.0F, homeDoorOrWindow0.getWidth(), 0.01F);
      assertFalse(homeDoorOrWindow0.isBoundToWall());
      assertNull(homeDoorOrWindow0.getColor());
      assertTrue(homeDoorOrWindow0.isDeformable());
      assertEquals(0.25F, homeDoorOrWindow0.getY(), 0.01F);
      assertEquals(0.5F, homeDoorOrWindow0.getX(), 0.01F);
      assertFalse(homeDoorOrWindow0.isModelMirrored());
      assertFalse(homeDoorOrWindow0.isBackFaceShown());
      assertEquals(672.42474F, homeDoorOrWindow0.getElevation(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getAngle(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getWallThickness(), 0.01F);
      assertFalse(homeDoorOrWindow0.isNameVisible());
      assertEquals("java.version", homeDoorOrWindow0.getName());
      assertEquals((short)0, bigInteger0.shortValue());
      assertEquals((byte)0, bigInteger0.byteValue());
      assertEquals((short)0, bigDecimal0.shortValue());
      assertEquals((byte)0, bigDecimal0.byteValue());
      
      HomeDoorOrWindow homeDoorOrWindow1 = homeDoorOrWindow0.clone();
      assertEquals(4, floatArray0.length);
      assertEquals(2, sashArray0.length);
      assertNotNull(homeDoorOrWindow1);
      assertNotSame(catalogDoorOrWindow1, catalogDoorOrWindow0);
      assertNotSame(homeDoorOrWindow0, homeDoorOrWindow1);
      assertNotSame(homeDoorOrWindow1, homeDoorOrWindow0);
      assertNotSame(sashArray0, sashArray1);
      assertFalse(catalogDoorOrWindow1.equals((Object)catalogDoorOrWindow0));
      assertFalse(homeDoorOrWindow1.equals((Object)homeDoorOrWindow0));
      assertFalse(sashArray0.equals((Object)sashArray1));
      assertEquals(0.0F, catalogDoorOrWindow1.getWallThickness(), 0.01F);
      assertNull(catalogDoorOrWindow1.getStaircaseCutOutShape());
      assertFalse(catalogDoorOrWindow1.isResizable());
      assertEquals("TEXTURE", catalogDoorOrWindow1.getId());
      assertNull(catalogDoorOrWindow1.getColor());
      assertTrue(catalogDoorOrWindow1.isMovable());
      assertNull(catalogDoorOrWindow1.getInformation());
      assertTrue(catalogDoorOrWindow1.isDeformable());
      assertEquals("java.version", catalogDoorOrWindow1.getName());
      assertTrue(catalogDoorOrWindow1.isDoorOrWindow());
      assertNull(catalogDoorOrWindow1.getGrade());
      assertTrue(catalogDoorOrWindow1.isProportional());
      assertEquals(0.3926991F, catalogDoorOrWindow1.getIconYaw(), 0.01F);
      assertEquals("", catalogDoorOrWindow1.getCurrency());
      assertFalse(catalogDoorOrWindow1.isModifiable());
      assertNull(catalogDoorOrWindow1.getCreationDate());
      assertEquals(0.5F, catalogDoorOrWindow1.getDepth(), 0.01F);
      assertFalse(catalogDoorOrWindow1.isBackFaceShown());
      assertFalse(catalogDoorOrWindow1.isTexturable());
      assertEquals("CRCKF", catalogDoorOrWindow1.getCreator());
      assertEquals((-1.0F), catalogDoorOrWindow1.getWallDistance(), 0.01F);
      assertEquals(672.42474F, catalogDoorOrWindow1.getElevation(), 0.01F);
      assertEquals("", catalogDoorOrWindow1.getDescription());
      assertEquals(0.5F, catalogDoorOrWindow1.getHeight(), 0.01F);
      assertEquals(1.0F, catalogDoorOrWindow1.getWidth(), 0.01F);
      assertEquals("", homeDoorOrWindow0.getDescription());
      assertEquals(0.0F, homeDoorOrWindow0.getNameXOffset(), 0.01F);
      assertEquals(0.5F, homeDoorOrWindow0.getDepth(), 0.01F);
      assertFalse(homeDoorOrWindow0.isTexturable());
      assertEquals(0.0F, homeDoorOrWindow0.getNameAngle(), 0.01F);
      assertNull(homeDoorOrWindow0.getStaircaseCutOutShape());
      assertNull(homeDoorOrWindow0.getShininess());
      assertTrue(homeDoorOrWindow0.isMovable());
      assertTrue(homeDoorOrWindow0.isDoorOrWindow());
      assertFalse(homeDoorOrWindow0.isResizable());
      assertEquals("TEXTURE", homeDoorOrWindow0.getCatalogId());
      assertEquals(0.5F, homeDoorOrWindow0.getHeight(), 0.01F);
      assertEquals((-1.0F), homeDoorOrWindow0.getWallDistance(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getNameYOffset(), 0.01F);
      assertEquals(672.42474F, homeDoorOrWindow0.getGroundElevation(), 0.01F);
      assertTrue(homeDoorOrWindow0.isVisible());
      assertEquals("", homeDoorOrWindow0.getCurrency());
      assertEquals(1.0F, homeDoorOrWindow0.getWidth(), 0.01F);
      assertFalse(homeDoorOrWindow0.isBoundToWall());
      assertNull(homeDoorOrWindow0.getColor());
      assertTrue(homeDoorOrWindow0.isDeformable());
      assertEquals(0.25F, homeDoorOrWindow0.getY(), 0.01F);
      assertEquals(0.5F, homeDoorOrWindow0.getX(), 0.01F);
      assertFalse(homeDoorOrWindow0.isModelMirrored());
      assertFalse(homeDoorOrWindow0.isBackFaceShown());
      assertEquals(672.42474F, homeDoorOrWindow0.getElevation(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getAngle(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getWallThickness(), 0.01F);
      assertFalse(homeDoorOrWindow0.isNameVisible());
      assertEquals("java.version", homeDoorOrWindow0.getName());
      assertNull(homeDoorOrWindow1.getColor());
      assertFalse(homeDoorOrWindow1.isModelMirrored());
      assertEquals(0.0F, homeDoorOrWindow1.getWallThickness(), 0.01F);
      assertFalse(homeDoorOrWindow1.isNameVisible());
      assertEquals(672.42474F, homeDoorOrWindow1.getElevation(), 0.01F);
      assertFalse(homeDoorOrWindow1.isBackFaceShown());
      assertTrue(homeDoorOrWindow1.isVisible());
      assertEquals(1.0F, homeDoorOrWindow1.getWidth(), 0.01F);
      assertEquals("java.version", homeDoorOrWindow1.getName());
      assertTrue(homeDoorOrWindow1.isDeformable());
      assertEquals(672.42474F, homeDoorOrWindow1.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow1.getAngle(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow1.getNameXOffset(), 0.01F);
      assertEquals(0.5F, homeDoorOrWindow1.getX(), 0.01F);
      assertEquals("", homeDoorOrWindow1.getDescription());
      assertEquals(0.25F, homeDoorOrWindow1.getY(), 0.01F);
      assertFalse(homeDoorOrWindow1.isTexturable());
      assertTrue(homeDoorOrWindow1.isDoorOrWindow());
      assertTrue(homeDoorOrWindow1.isMovable());
      assertNull(homeDoorOrWindow1.getShininess());
      assertNull(homeDoorOrWindow1.getStaircaseCutOutShape());
      assertEquals((-1.0F), homeDoorOrWindow1.getWallDistance(), 0.01F);
      assertEquals(0.5F, homeDoorOrWindow1.getDepth(), 0.01F);
      assertFalse(homeDoorOrWindow1.isResizable());
      assertEquals(0.0F, homeDoorOrWindow1.getNameAngle(), 0.01F);
      assertFalse(homeDoorOrWindow1.isBoundToWall());
      assertEquals(0.0F, homeDoorOrWindow1.getNameYOffset(), 0.01F);
      assertEquals("", homeDoorOrWindow1.getCurrency());
      assertEquals(0.5F, homeDoorOrWindow1.getHeight(), 0.01F);
      assertEquals("TEXTURE", homeDoorOrWindow1.getCatalogId());
      assertEquals((short)0, bigInteger0.shortValue());
      assertEquals((byte)0, bigInteger0.byteValue());
      assertEquals((short)0, bigDecimal0.shortValue());
      assertEquals((byte)0, bigDecimal0.byteValue());
      
      homeDoorOrWindow1.setX(1.0F);
      assertEquals(4, floatArray0.length);
      assertEquals(2, sashArray0.length);
      assertNotSame(catalogDoorOrWindow1, catalogDoorOrWindow0);
      assertNotSame(homeDoorOrWindow0, homeDoorOrWindow1);
      assertNotSame(homeDoorOrWindow1, homeDoorOrWindow0);
      assertNotSame(sashArray0, sashArray1);
      assertFalse(catalogDoorOrWindow1.equals((Object)catalogDoorOrWindow0));
      assertFalse(homeDoorOrWindow0.equals((Object)homeDoorOrWindow1));
      assertFalse(homeDoorOrWindow1.equals((Object)homeDoorOrWindow0));
      assertFalse(sashArray0.equals((Object)sashArray1));
      assertEquals(0.0F, catalogDoorOrWindow1.getWallThickness(), 0.01F);
      assertNull(catalogDoorOrWindow1.getStaircaseCutOutShape());
      assertFalse(catalogDoorOrWindow1.isResizable());
      assertEquals("TEXTURE", catalogDoorOrWindow1.getId());
      assertNull(catalogDoorOrWindow1.getColor());
      assertTrue(catalogDoorOrWindow1.isMovable());
      assertNull(catalogDoorOrWindow1.getInformation());
      assertTrue(catalogDoorOrWindow1.isDeformable());
      assertEquals("java.version", catalogDoorOrWindow1.getName());
      assertTrue(catalogDoorOrWindow1.isDoorOrWindow());
      assertNull(catalogDoorOrWindow1.getGrade());
      assertTrue(catalogDoorOrWindow1.isProportional());
      assertEquals(0.3926991F, catalogDoorOrWindow1.getIconYaw(), 0.01F);
      assertEquals("", catalogDoorOrWindow1.getCurrency());
      assertFalse(catalogDoorOrWindow1.isModifiable());
      assertNull(catalogDoorOrWindow1.getCreationDate());
      assertEquals(0.5F, catalogDoorOrWindow1.getDepth(), 0.01F);
      assertFalse(catalogDoorOrWindow1.isBackFaceShown());
      assertFalse(catalogDoorOrWindow1.isTexturable());
      assertEquals("CRCKF", catalogDoorOrWindow1.getCreator());
      assertEquals((-1.0F), catalogDoorOrWindow1.getWallDistance(), 0.01F);
      assertEquals(672.42474F, catalogDoorOrWindow1.getElevation(), 0.01F);
      assertEquals("", catalogDoorOrWindow1.getDescription());
      assertEquals(0.5F, catalogDoorOrWindow1.getHeight(), 0.01F);
      assertEquals(1.0F, catalogDoorOrWindow1.getWidth(), 0.01F);
      assertEquals("", homeDoorOrWindow0.getDescription());
      assertEquals(0.0F, homeDoorOrWindow0.getNameXOffset(), 0.01F);
      assertEquals(0.5F, homeDoorOrWindow0.getDepth(), 0.01F);
      assertFalse(homeDoorOrWindow0.isTexturable());
      assertEquals(0.0F, homeDoorOrWindow0.getNameAngle(), 0.01F);
      assertNull(homeDoorOrWindow0.getStaircaseCutOutShape());
      assertNull(homeDoorOrWindow0.getShininess());
      assertTrue(homeDoorOrWindow0.isMovable());
      assertTrue(homeDoorOrWindow0.isDoorOrWindow());
      assertFalse(homeDoorOrWindow0.isResizable());
      assertEquals("TEXTURE", homeDoorOrWindow0.getCatalogId());
      assertEquals(0.5F, homeDoorOrWindow0.getHeight(), 0.01F);
      assertEquals((-1.0F), homeDoorOrWindow0.getWallDistance(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getNameYOffset(), 0.01F);
      assertEquals(672.42474F, homeDoorOrWindow0.getGroundElevation(), 0.01F);
      assertTrue(homeDoorOrWindow0.isVisible());
      assertEquals("", homeDoorOrWindow0.getCurrency());
      assertEquals(1.0F, homeDoorOrWindow0.getWidth(), 0.01F);
      assertFalse(homeDoorOrWindow0.isBoundToWall());
      assertNull(homeDoorOrWindow0.getColor());
      assertTrue(homeDoorOrWindow0.isDeformable());
      assertEquals(0.25F, homeDoorOrWindow0.getY(), 0.01F);
      assertEquals(0.5F, homeDoorOrWindow0.getX(), 0.01F);
      assertFalse(homeDoorOrWindow0.isModelMirrored());
      assertFalse(homeDoorOrWindow0.isBackFaceShown());
      assertEquals(672.42474F, homeDoorOrWindow0.getElevation(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getAngle(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getWallThickness(), 0.01F);
      assertFalse(homeDoorOrWindow0.isNameVisible());
      assertEquals("java.version", homeDoorOrWindow0.getName());
      assertNull(homeDoorOrWindow1.getColor());
      assertFalse(homeDoorOrWindow1.isModelMirrored());
      assertEquals(0.0F, homeDoorOrWindow1.getWallThickness(), 0.01F);
      assertFalse(homeDoorOrWindow1.isNameVisible());
      assertEquals(672.42474F, homeDoorOrWindow1.getElevation(), 0.01F);
      assertFalse(homeDoorOrWindow1.isBackFaceShown());
      assertTrue(homeDoorOrWindow1.isVisible());
      assertEquals(1.0F, homeDoorOrWindow1.getWidth(), 0.01F);
      assertEquals("java.version", homeDoorOrWindow1.getName());
      assertTrue(homeDoorOrWindow1.isDeformable());
      assertEquals(672.42474F, homeDoorOrWindow1.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow1.getAngle(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow1.getNameXOffset(), 0.01F);
      assertEquals(1.0F, homeDoorOrWindow1.getX(), 0.01F);
      assertEquals("", homeDoorOrWindow1.getDescription());
      assertEquals(0.25F, homeDoorOrWindow1.getY(), 0.01F);
      assertFalse(homeDoorOrWindow1.isTexturable());
      assertTrue(homeDoorOrWindow1.isDoorOrWindow());
      assertTrue(homeDoorOrWindow1.isMovable());
      assertNull(homeDoorOrWindow1.getShininess());
      assertNull(homeDoorOrWindow1.getStaircaseCutOutShape());
      assertEquals((-1.0F), homeDoorOrWindow1.getWallDistance(), 0.01F);
      assertEquals(0.5F, homeDoorOrWindow1.getDepth(), 0.01F);
      assertFalse(homeDoorOrWindow1.isResizable());
      assertEquals(0.0F, homeDoorOrWindow1.getNameAngle(), 0.01F);
      assertFalse(homeDoorOrWindow1.isBoundToWall());
      assertEquals(0.0F, homeDoorOrWindow1.getNameYOffset(), 0.01F);
      assertEquals("", homeDoorOrWindow1.getCurrency());
      assertEquals(0.5F, homeDoorOrWindow1.getHeight(), 0.01F);
      assertEquals("TEXTURE", homeDoorOrWindow1.getCatalogId());
      assertEquals((short)0, bigInteger0.shortValue());
      assertEquals((byte)0, bigInteger0.byteValue());
      assertEquals((short)0, bigDecimal0.shortValue());
      assertEquals((byte)0, bigDecimal0.byteValue());
  }

  @Test(timeout = 4000)
  public void test179()  throws Throwable  {
      Light light0 = mock(Light.class, new ViolatedAssumptionAnswer());
      doReturn((LightSource[]) null).when(light0).getLightSources();
      doReturn((Integer) null).when(light0).getColor();
      doReturn((String) null).when(light0).getCurrency();
      doReturn(0.0F).when(light0).getDepth();
      doReturn((String) null).when(light0).getDescription();
      doReturn(0.0F).when(light0).getElevation();
      doReturn(0.0F).when(light0).getHeight();
      doReturn((Content) null).when(light0).getIcon();
      doReturn((Content) null).when(light0).getModel();
      doReturn((float[][]) null).when(light0).getModelRotation();
      doReturn((String) null).when(light0).getName();
      doReturn((Content) null).when(light0).getPlanIcon();
      doReturn((BigDecimal) null).when(light0).getPrice();
      doReturn((String) null).when(light0).getStaircaseCutOutShape();
      doReturn((BigDecimal) null).when(light0).getValueAddedTaxPercentage();
      doReturn(0.0F).when(light0).getWidth();
      doReturn(false).when(light0).isBackFaceShown();
      doReturn(false).when(light0).isDeformable();
      doReturn(false).when(light0).isDoorOrWindow();
      doReturn(false).when(light0).isMovable();
      doReturn(false).when(light0).isResizable();
      doReturn(false).when(light0).isTexturable();
      HomeLight homeLight0 = new HomeLight(light0);
      assertNotNull(homeLight0);
      assertFalse(homeLight0.isBackFaceShown());
      assertFalse(homeLight0.isModelMirrored());
      assertFalse(homeLight0.isDoorOrWindow());
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertNull(homeLight0.getColor());
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertFalse(homeLight0.isNameVisible());
      assertFalse(homeLight0.isTexturable());
      assertNull(homeLight0.getCurrency());
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertNull(homeLight0.getName());
      assertNull(homeLight0.getCatalogId());
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertFalse(homeLight0.isMovable());
      assertNull(homeLight0.getDescription());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertTrue(homeLight0.isVisible());
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertFalse(homeLight0.isDeformable());
      assertFalse(homeLight0.isResizable());
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertNull(homeLight0.getShininess());
      
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      String string0 = homeLight0.getName();
      assertNull(string0);
      assertFalse(homeLight0.isBackFaceShown());
      assertFalse(homeLight0.isModelMirrored());
      assertFalse(homeLight0.isDoorOrWindow());
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertNull(homeLight0.getColor());
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertFalse(homeLight0.isNameVisible());
      assertFalse(homeLight0.isTexturable());
      assertNull(homeLight0.getCurrency());
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertNull(homeLight0.getName());
      assertNull(homeLight0.getCatalogId());
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertFalse(homeLight0.isMovable());
      assertNull(homeLight0.getDescription());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertTrue(homeLight0.isVisible());
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertFalse(homeLight0.isDeformable());
      assertFalse(homeLight0.isResizable());
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertNull(homeLight0.getShininess());
      
      Level level0 = homeLight0.getLevel();
      assertNull(level0);
      assertFalse(homeLight0.isBackFaceShown());
      assertFalse(homeLight0.isModelMirrored());
      assertFalse(homeLight0.isDoorOrWindow());
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertNull(homeLight0.getColor());
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertFalse(homeLight0.isNameVisible());
      assertFalse(homeLight0.isTexturable());
      assertNull(homeLight0.getCurrency());
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertNull(homeLight0.getName());
      assertNull(homeLight0.getCatalogId());
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertFalse(homeLight0.isMovable());
      assertNull(homeLight0.getDescription());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertTrue(homeLight0.isVisible());
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertFalse(homeLight0.isDeformable());
      assertFalse(homeLight0.isResizable());
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertNull(homeLight0.getShininess());
      
      HomeLight homeLight1 = homeLight0.clone();
      assertNotNull(homeLight1);
      assertNotSame(homeLight0, homeLight1);
      assertNotSame(homeLight1, homeLight0);
      assertFalse(homeLight1.equals((Object)homeLight0));
      assertFalse(homeLight0.isBackFaceShown());
      assertFalse(homeLight0.isModelMirrored());
      assertFalse(homeLight0.isDoorOrWindow());
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertNull(homeLight0.getColor());
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertFalse(homeLight0.isNameVisible());
      assertFalse(homeLight0.isTexturable());
      assertNull(homeLight0.getCurrency());
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertNull(homeLight0.getName());
      assertNull(homeLight0.getCatalogId());
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertFalse(homeLight0.isMovable());
      assertNull(homeLight0.getDescription());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertTrue(homeLight0.isVisible());
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertFalse(homeLight0.isDeformable());
      assertFalse(homeLight0.isResizable());
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertNull(homeLight0.getShininess());
      assertNull(homeLight1.getColor());
      assertFalse(homeLight1.isNameVisible());
      assertNull(homeLight1.getCurrency());
      assertEquals(0.0F, homeLight1.getY(), 0.01F);
      assertFalse(homeLight1.isDoorOrWindow());
      assertEquals(0.0F, homeLight1.getWidth(), 0.01F);
      assertEquals(0.0F, homeLight1.getNameYOffset(), 0.01F);
      assertEquals(0.0F, homeLight1.getX(), 0.01F);
      assertFalse(homeLight1.isTexturable());
      assertEquals(0.0F, homeLight1.getAngle(), 0.01F);
      assertFalse(homeLight1.isModelMirrored());
      assertNull(homeLight1.getName());
      assertFalse(homeLight1.isBackFaceShown());
      assertEquals(0.0F, homeLight1.getNameAngle(), 0.01F);
      assertEquals(0.5F, homeLight1.getPower(), 0.01F);
      assertNull(homeLight1.getCatalogId());
      assertNull(homeLight1.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight1.getDepth(), 0.01F);
      assertNull(homeLight1.getDescription());
      assertEquals(0.0F, homeLight1.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeLight1.getElevation(), 0.01F);
      assertEquals(0.0F, homeLight1.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight1.getHeight(), 0.01F);
      assertTrue(homeLight1.isVisible());
      assertFalse(homeLight1.isMovable());
      assertNull(homeLight1.getShininess());
      assertFalse(homeLight1.isDeformable());
      assertFalse(homeLight1.isResizable());
      
      BigDecimal bigDecimal0 = homeLight1.getPriceValueAddedTaxIncluded();
      assertNull(bigDecimal0);
      assertNotSame(homeLight0, homeLight1);
      assertNotSame(homeLight1, homeLight0);
      assertFalse(homeLight0.equals((Object)homeLight1));
      assertFalse(homeLight1.equals((Object)homeLight0));
      assertFalse(homeLight0.isBackFaceShown());
      assertFalse(homeLight0.isModelMirrored());
      assertFalse(homeLight0.isDoorOrWindow());
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertNull(homeLight0.getColor());
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertFalse(homeLight0.isNameVisible());
      assertFalse(homeLight0.isTexturable());
      assertNull(homeLight0.getCurrency());
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertNull(homeLight0.getName());
      assertNull(homeLight0.getCatalogId());
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertFalse(homeLight0.isMovable());
      assertNull(homeLight0.getDescription());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertTrue(homeLight0.isVisible());
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertFalse(homeLight0.isDeformable());
      assertFalse(homeLight0.isResizable());
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertNull(homeLight0.getShininess());
      assertNull(homeLight1.getColor());
      assertFalse(homeLight1.isNameVisible());
      assertNull(homeLight1.getCurrency());
      assertEquals(0.0F, homeLight1.getY(), 0.01F);
      assertFalse(homeLight1.isDoorOrWindow());
      assertEquals(0.0F, homeLight1.getWidth(), 0.01F);
      assertEquals(0.0F, homeLight1.getNameYOffset(), 0.01F);
      assertEquals(0.0F, homeLight1.getX(), 0.01F);
      assertFalse(homeLight1.isTexturable());
      assertEquals(0.0F, homeLight1.getAngle(), 0.01F);
      assertFalse(homeLight1.isModelMirrored());
      assertNull(homeLight1.getName());
      assertFalse(homeLight1.isBackFaceShown());
      assertEquals(0.0F, homeLight1.getNameAngle(), 0.01F);
      assertEquals(0.5F, homeLight1.getPower(), 0.01F);
      assertNull(homeLight1.getCatalogId());
      assertNull(homeLight1.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight1.getDepth(), 0.01F);
      assertNull(homeLight1.getDescription());
      assertEquals(0.0F, homeLight1.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeLight1.getElevation(), 0.01F);
      assertEquals(0.0F, homeLight1.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight1.getHeight(), 0.01F);
      assertTrue(homeLight1.isVisible());
      assertFalse(homeLight1.isMovable());
      assertNull(homeLight1.getShininess());
      assertFalse(homeLight1.isDeformable());
      assertFalse(homeLight1.isResizable());
      
      HomeLight homeLight2 = homeLight1.clone();
      assertNotNull(homeLight2);
      assertNotSame(homeLight0, homeLight2);
      assertNotSame(homeLight0, homeLight1);
      assertNotSame(homeLight1, homeLight2);
      assertNotSame(homeLight1, homeLight0);
      assertNotSame(homeLight2, homeLight0);
      assertNotSame(homeLight2, homeLight1);
      assertFalse(homeLight0.equals((Object)homeLight1));
      assertFalse(homeLight1.equals((Object)homeLight0));
      assertFalse(homeLight2.equals((Object)homeLight0));
      assertFalse(homeLight2.equals((Object)homeLight1));
      assertFalse(homeLight0.isBackFaceShown());
      assertFalse(homeLight0.isModelMirrored());
      assertFalse(homeLight0.isDoorOrWindow());
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertNull(homeLight0.getColor());
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertFalse(homeLight0.isNameVisible());
      assertFalse(homeLight0.isTexturable());
      assertNull(homeLight0.getCurrency());
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertNull(homeLight0.getName());
      assertNull(homeLight0.getCatalogId());
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertFalse(homeLight0.isMovable());
      assertNull(homeLight0.getDescription());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertTrue(homeLight0.isVisible());
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertFalse(homeLight0.isDeformable());
      assertFalse(homeLight0.isResizable());
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertNull(homeLight0.getShininess());
      assertNull(homeLight1.getColor());
      assertFalse(homeLight1.isNameVisible());
      assertNull(homeLight1.getCurrency());
      assertEquals(0.0F, homeLight1.getY(), 0.01F);
      assertFalse(homeLight1.isDoorOrWindow());
      assertEquals(0.0F, homeLight1.getWidth(), 0.01F);
      assertEquals(0.0F, homeLight1.getNameYOffset(), 0.01F);
      assertEquals(0.0F, homeLight1.getX(), 0.01F);
      assertFalse(homeLight1.isTexturable());
      assertEquals(0.0F, homeLight1.getAngle(), 0.01F);
      assertFalse(homeLight1.isModelMirrored());
      assertNull(homeLight1.getName());
      assertFalse(homeLight1.isBackFaceShown());
      assertEquals(0.0F, homeLight1.getNameAngle(), 0.01F);
      assertEquals(0.5F, homeLight1.getPower(), 0.01F);
      assertNull(homeLight1.getCatalogId());
      assertNull(homeLight1.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight1.getDepth(), 0.01F);
      assertNull(homeLight1.getDescription());
      assertEquals(0.0F, homeLight1.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeLight1.getElevation(), 0.01F);
      assertEquals(0.0F, homeLight1.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight1.getHeight(), 0.01F);
      assertTrue(homeLight1.isVisible());
      assertFalse(homeLight1.isMovable());
      assertNull(homeLight1.getShininess());
      assertFalse(homeLight1.isDeformable());
      assertFalse(homeLight1.isResizable());
      assertEquals(0.0F, homeLight2.getY(), 0.01F);
      assertFalse(homeLight2.isDoorOrWindow());
      assertFalse(homeLight2.isBackFaceShown());
      assertFalse(homeLight2.isModelMirrored());
      assertEquals(0.0F, homeLight2.getAngle(), 0.01F);
      assertFalse(homeLight2.isNameVisible());
      assertNull(homeLight2.getDescription());
      assertEquals(0.0F, homeLight2.getDepth(), 0.01F);
      assertFalse(homeLight2.isDeformable());
      assertTrue(homeLight2.isVisible());
      assertEquals(0.0F, homeLight2.getElevation(), 0.01F);
      assertEquals(0.0F, homeLight2.getWidth(), 0.01F);
      assertFalse(homeLight2.isTexturable());
      assertEquals(0.0F, homeLight2.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight2.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeLight2.getX(), 0.01F);
      assertNull(homeLight2.getShininess());
      assertFalse(homeLight2.isMovable());
      assertEquals(0.0F, homeLight2.getHeight(), 0.01F);
      assertFalse(homeLight2.isResizable());
      assertNull(homeLight2.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight2.getNameAngle(), 0.01F);
      assertNull(homeLight2.getName());
      assertNull(homeLight2.getCurrency());
      assertEquals(0.5F, homeLight2.getPower(), 0.01F);
      assertNull(homeLight2.getCatalogId());
      assertNull(homeLight2.getColor());
      assertEquals(0.0F, homeLight2.getNameYOffset(), 0.01F);
      
      homeLight0.setMovable(true);
      assertNotSame(homeLight0, homeLight2);
      assertNotSame(homeLight0, homeLight1);
      assertFalse(homeLight0.equals((Object)homeLight2));
      assertFalse(homeLight0.equals((Object)homeLight1));
      assertFalse(homeLight0.isBackFaceShown());
      assertFalse(homeLight0.isModelMirrored());
      assertFalse(homeLight0.isDoorOrWindow());
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertNull(homeLight0.getColor());
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertFalse(homeLight0.isNameVisible());
      assertFalse(homeLight0.isTexturable());
      assertNull(homeLight0.getCurrency());
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertNull(homeLight0.getName());
      assertNull(homeLight0.getCatalogId());
      assertTrue(homeLight0.isMovable());
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertNull(homeLight0.getDescription());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertTrue(homeLight0.isVisible());
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertFalse(homeLight0.isDeformable());
      assertFalse(homeLight0.isResizable());
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertNull(homeLight0.getShininess());
      
      homeLight1.setNameXOffset((-611.6462F));
      assertNotSame(homeLight0, homeLight2);
      assertNotSame(homeLight0, homeLight1);
      assertNotSame(homeLight1, homeLight2);
      assertNotSame(homeLight1, homeLight0);
      assertFalse(homeLight0.equals((Object)homeLight2));
      assertFalse(homeLight0.equals((Object)homeLight1));
      assertFalse(homeLight1.equals((Object)homeLight2));
      assertFalse(homeLight1.equals((Object)homeLight0));
      assertFalse(homeLight0.isBackFaceShown());
      assertFalse(homeLight0.isModelMirrored());
      assertFalse(homeLight0.isDoorOrWindow());
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertNull(homeLight0.getColor());
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertFalse(homeLight0.isNameVisible());
      assertFalse(homeLight0.isTexturable());
      assertNull(homeLight0.getCurrency());
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertNull(homeLight0.getName());
      assertNull(homeLight0.getCatalogId());
      assertTrue(homeLight0.isMovable());
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertNull(homeLight0.getDescription());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertTrue(homeLight0.isVisible());
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertFalse(homeLight0.isDeformable());
      assertFalse(homeLight0.isResizable());
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertNull(homeLight0.getShininess());
      assertNull(homeLight1.getColor());
      assertFalse(homeLight1.isNameVisible());
      assertNull(homeLight1.getCurrency());
      assertEquals(0.0F, homeLight1.getY(), 0.01F);
      assertFalse(homeLight1.isDoorOrWindow());
      assertEquals(0.0F, homeLight1.getWidth(), 0.01F);
      assertEquals(0.0F, homeLight1.getNameYOffset(), 0.01F);
      assertEquals(0.0F, homeLight1.getX(), 0.01F);
      assertFalse(homeLight1.isTexturable());
      assertEquals(0.0F, homeLight1.getAngle(), 0.01F);
      assertFalse(homeLight1.isModelMirrored());
      assertNull(homeLight1.getName());
      assertFalse(homeLight1.isBackFaceShown());
      assertEquals(0.0F, homeLight1.getNameAngle(), 0.01F);
      assertEquals(0.5F, homeLight1.getPower(), 0.01F);
      assertNull(homeLight1.getCatalogId());
      assertNull(homeLight1.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight1.getDepth(), 0.01F);
      assertNull(homeLight1.getDescription());
      assertEquals((-611.6462F), homeLight1.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeLight1.getElevation(), 0.01F);
      assertEquals(0.0F, homeLight1.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight1.getHeight(), 0.01F);
      assertTrue(homeLight1.isVisible());
      assertFalse(homeLight1.isMovable());
      assertNull(homeLight1.getShininess());
      assertFalse(homeLight1.isDeformable());
      assertFalse(homeLight1.isResizable());
      
      homeLight1.setName((String) null);
      assertNotSame(homeLight0, homeLight2);
      assertNotSame(homeLight0, homeLight1);
      assertNotSame(homeLight1, homeLight2);
      assertNotSame(homeLight1, homeLight0);
      assertFalse(homeLight0.equals((Object)homeLight2));
      assertFalse(homeLight0.equals((Object)homeLight1));
      assertFalse(homeLight1.equals((Object)homeLight2));
      assertFalse(homeLight1.equals((Object)homeLight0));
      assertFalse(homeLight0.isBackFaceShown());
      assertFalse(homeLight0.isModelMirrored());
      assertFalse(homeLight0.isDoorOrWindow());
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertNull(homeLight0.getColor());
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertFalse(homeLight0.isNameVisible());
      assertFalse(homeLight0.isTexturable());
      assertNull(homeLight0.getCurrency());
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertNull(homeLight0.getName());
      assertNull(homeLight0.getCatalogId());
      assertTrue(homeLight0.isMovable());
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertNull(homeLight0.getDescription());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertTrue(homeLight0.isVisible());
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertFalse(homeLight0.isDeformable());
      assertFalse(homeLight0.isResizable());
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertNull(homeLight0.getShininess());
      assertNull(homeLight1.getColor());
      assertFalse(homeLight1.isNameVisible());
      assertNull(homeLight1.getCurrency());
      assertEquals(0.0F, homeLight1.getY(), 0.01F);
      assertFalse(homeLight1.isDoorOrWindow());
      assertEquals(0.0F, homeLight1.getWidth(), 0.01F);
      assertEquals(0.0F, homeLight1.getNameYOffset(), 0.01F);
      assertEquals(0.0F, homeLight1.getX(), 0.01F);
      assertFalse(homeLight1.isTexturable());
      assertEquals(0.0F, homeLight1.getAngle(), 0.01F);
      assertFalse(homeLight1.isModelMirrored());
      assertNull(homeLight1.getName());
      assertFalse(homeLight1.isBackFaceShown());
      assertEquals(0.0F, homeLight1.getNameAngle(), 0.01F);
      assertEquals(0.5F, homeLight1.getPower(), 0.01F);
      assertNull(homeLight1.getCatalogId());
      assertNull(homeLight1.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight1.getDepth(), 0.01F);
      assertNull(homeLight1.getDescription());
      assertEquals((-611.6462F), homeLight1.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeLight1.getElevation(), 0.01F);
      assertEquals(0.0F, homeLight1.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight1.getHeight(), 0.01F);
      assertTrue(homeLight1.isVisible());
      assertFalse(homeLight1.isMovable());
      assertNull(homeLight1.getShininess());
      assertFalse(homeLight1.isDeformable());
      assertFalse(homeLight1.isResizable());
  }

  @Test(timeout = 4000)
  public void test180()  throws Throwable  {
      Integer integer0 = new Integer(1431655742);
      assertNotNull(integer0);
      assertEquals(1431655742, (int)integer0);
      
      Light light0 = mock(Light.class, new ViolatedAssumptionAnswer());
      doReturn((LightSource[]) null).when(light0).getLightSources();
      doReturn((Integer) null).when(light0).getColor();
      doReturn((String) null).when(light0).getCurrency();
      doReturn(0.0F).when(light0).getDepth();
      doReturn((String) null).when(light0).getDescription();
      doReturn(0.0F).when(light0).getElevation();
      doReturn(0.0F).when(light0).getHeight();
      doReturn((Content) null).when(light0).getIcon();
      doReturn((Content) null).when(light0).getModel();
      doReturn((float[][]) null).when(light0).getModelRotation();
      doReturn((String) null).when(light0).getName();
      doReturn((Content) null).when(light0).getPlanIcon();
      doReturn((BigDecimal) null).when(light0).getPrice();
      doReturn((String) null).when(light0).getStaircaseCutOutShape();
      doReturn((BigDecimal) null).when(light0).getValueAddedTaxPercentage();
      doReturn(0.0F).when(light0).getWidth();
      doReturn(false).when(light0).isBackFaceShown();
      doReturn(false).when(light0).isDeformable();
      doReturn(false).when(light0).isDoorOrWindow();
      doReturn(false).when(light0).isMovable();
      doReturn(false).when(light0).isResizable();
      doReturn(false).when(light0).isTexturable();
      HomeLight homeLight0 = new HomeLight(light0);
      assertNotNull(homeLight0);
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertFalse(homeLight0.isMovable());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertNull(homeLight0.getCurrency());
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertNull(homeLight0.getCatalogId());
      assertNull(homeLight0.getName());
      assertFalse(homeLight0.isNameVisible());
      assertNull(homeLight0.getColor());
      assertFalse(homeLight0.isModelMirrored());
      assertFalse(homeLight0.isBackFaceShown());
      assertFalse(homeLight0.isTexturable());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      assertNull(homeLight0.getDescription());
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertTrue(homeLight0.isVisible());
      assertNull(homeLight0.getShininess());
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertFalse(homeLight0.isDeformable());
      assertFalse(homeLight0.isResizable());
      
      homeLight0.setElevation(1431655742);
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertFalse(homeLight0.isMovable());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertNull(homeLight0.getCurrency());
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertEquals(1.43165568E9F, homeLight0.getElevation(), 0.01F);
      assertNull(homeLight0.getCatalogId());
      assertNull(homeLight0.getName());
      assertFalse(homeLight0.isNameVisible());
      assertNull(homeLight0.getColor());
      assertFalse(homeLight0.isModelMirrored());
      assertFalse(homeLight0.isBackFaceShown());
      assertFalse(homeLight0.isTexturable());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      assertNull(homeLight0.getDescription());
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals(1.43165568E9F, homeLight0.getGroundElevation(), 0.01F);
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertTrue(homeLight0.isVisible());
      assertNull(homeLight0.getShininess());
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertFalse(homeLight0.isDeformable());
      assertFalse(homeLight0.isResizable());
      
      HomeLight homeLight1 = homeLight0.clone();
      assertNotNull(homeLight1);
      assertNotSame(homeLight0, homeLight1);
      assertNotSame(homeLight1, homeLight0);
      assertFalse(homeLight1.equals((Object)homeLight0));
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertFalse(homeLight0.isMovable());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertNull(homeLight0.getCurrency());
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertEquals(1.43165568E9F, homeLight0.getElevation(), 0.01F);
      assertNull(homeLight0.getCatalogId());
      assertNull(homeLight0.getName());
      assertFalse(homeLight0.isNameVisible());
      assertNull(homeLight0.getColor());
      assertFalse(homeLight0.isModelMirrored());
      assertFalse(homeLight0.isBackFaceShown());
      assertFalse(homeLight0.isTexturable());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      assertNull(homeLight0.getDescription());
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals(1.43165568E9F, homeLight0.getGroundElevation(), 0.01F);
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertTrue(homeLight0.isVisible());
      assertNull(homeLight0.getShininess());
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertFalse(homeLight0.isDeformable());
      assertFalse(homeLight0.isResizable());
      assertNull(homeLight1.getDescription());
      assertNull(homeLight1.getName());
      assertEquals(0.0F, homeLight1.getNameXOffset(), 0.01F);
      assertNull(homeLight1.getCatalogId());
      assertNull(homeLight1.getStaircaseCutOutShape());
      assertEquals(1.43165568E9F, homeLight1.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight1.getNameAngle(), 0.01F);
      assertNull(homeLight1.getShininess());
      assertEquals(0.0F, homeLight1.getDepth(), 0.01F);
      assertFalse(homeLight1.isMovable());
      assertFalse(homeLight1.isResizable());
      assertEquals(0.0F, homeLight1.getHeight(), 0.01F);
      assertEquals(0.5F, homeLight1.getPower(), 0.01F);
      assertNull(homeLight1.getCurrency());
      assertFalse(homeLight1.isDeformable());
      assertFalse(homeLight1.isNameVisible());
      assertEquals(0.0F, homeLight1.getNameYOffset(), 0.01F);
      assertNull(homeLight1.getColor());
      assertFalse(homeLight1.isModelMirrored());
      assertTrue(homeLight1.isVisible());
      assertEquals(1.43165568E9F, homeLight1.getElevation(), 0.01F);
      assertEquals(0.0F, homeLight1.getX(), 0.01F);
      assertFalse(homeLight1.isDoorOrWindow());
      assertFalse(homeLight1.isBackFaceShown());
      assertEquals(0.0F, homeLight1.getY(), 0.01F);
      assertFalse(homeLight1.isTexturable());
      assertEquals(0.0F, homeLight1.getAngle(), 0.01F);
      assertEquals(0.0F, homeLight1.getWidth(), 0.01F);
      
      boolean boolean0 = homeLight1.isBottomRightPointAt(1431655742, 541.694F, 0.0F);
      assertNotSame(homeLight0, homeLight1);
      assertNotSame(homeLight1, homeLight0);
      assertFalse(homeLight0.equals((Object)homeLight1));
      assertFalse(homeLight1.equals((Object)homeLight0));
      assertFalse(boolean0);
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertFalse(homeLight0.isMovable());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertNull(homeLight0.getCurrency());
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertEquals(1.43165568E9F, homeLight0.getElevation(), 0.01F);
      assertNull(homeLight0.getCatalogId());
      assertNull(homeLight0.getName());
      assertFalse(homeLight0.isNameVisible());
      assertNull(homeLight0.getColor());
      assertFalse(homeLight0.isModelMirrored());
      assertFalse(homeLight0.isBackFaceShown());
      assertFalse(homeLight0.isTexturable());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      assertNull(homeLight0.getDescription());
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals(1.43165568E9F, homeLight0.getGroundElevation(), 0.01F);
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertTrue(homeLight0.isVisible());
      assertNull(homeLight0.getShininess());
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertFalse(homeLight0.isDeformable());
      assertFalse(homeLight0.isResizable());
      assertNull(homeLight1.getDescription());
      assertNull(homeLight1.getName());
      assertEquals(0.0F, homeLight1.getNameXOffset(), 0.01F);
      assertNull(homeLight1.getCatalogId());
      assertNull(homeLight1.getStaircaseCutOutShape());
      assertEquals(1.43165568E9F, homeLight1.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight1.getNameAngle(), 0.01F);
      assertNull(homeLight1.getShininess());
      assertEquals(0.0F, homeLight1.getDepth(), 0.01F);
      assertFalse(homeLight1.isMovable());
      assertFalse(homeLight1.isResizable());
      assertEquals(0.0F, homeLight1.getHeight(), 0.01F);
      assertEquals(0.5F, homeLight1.getPower(), 0.01F);
      assertNull(homeLight1.getCurrency());
      assertFalse(homeLight1.isDeformable());
      assertFalse(homeLight1.isNameVisible());
      assertEquals(0.0F, homeLight1.getNameYOffset(), 0.01F);
      assertNull(homeLight1.getColor());
      assertFalse(homeLight1.isModelMirrored());
      assertTrue(homeLight1.isVisible());
      assertEquals(1.43165568E9F, homeLight1.getElevation(), 0.01F);
      assertEquals(0.0F, homeLight1.getX(), 0.01F);
      assertFalse(homeLight1.isDoorOrWindow());
      assertFalse(homeLight1.isBackFaceShown());
      assertEquals(0.0F, homeLight1.getY(), 0.01F);
      assertFalse(homeLight1.isTexturable());
      assertEquals(0.0F, homeLight1.getAngle(), 0.01F);
      assertEquals(0.0F, homeLight1.getWidth(), 0.01F);
      
      homeLight0.setMovable(false);
      assertNotSame(homeLight0, homeLight1);
      assertFalse(homeLight0.equals((Object)homeLight1));
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertFalse(homeLight0.isMovable());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertNull(homeLight0.getCurrency());
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertEquals(1.43165568E9F, homeLight0.getElevation(), 0.01F);
      assertNull(homeLight0.getCatalogId());
      assertNull(homeLight0.getName());
      assertFalse(homeLight0.isNameVisible());
      assertNull(homeLight0.getColor());
      assertFalse(homeLight0.isModelMirrored());
      assertFalse(homeLight0.isBackFaceShown());
      assertFalse(homeLight0.isTexturable());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      assertNull(homeLight0.getDescription());
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals(1.43165568E9F, homeLight0.getGroundElevation(), 0.01F);
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertTrue(homeLight0.isVisible());
      assertNull(homeLight0.getShininess());
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertFalse(homeLight0.isDeformable());
      assertFalse(homeLight0.isResizable());
      
      homeLight1.setNameAngle(541.694F);
      assertNotSame(homeLight0, homeLight1);
      assertNotSame(homeLight1, homeLight0);
      assertFalse(homeLight0.equals((Object)homeLight1));
      assertFalse(homeLight1.equals((Object)homeLight0));
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertFalse(homeLight0.isMovable());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertNull(homeLight0.getCurrency());
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertEquals(1.43165568E9F, homeLight0.getElevation(), 0.01F);
      assertNull(homeLight0.getCatalogId());
      assertNull(homeLight0.getName());
      assertFalse(homeLight0.isNameVisible());
      assertNull(homeLight0.getColor());
      assertFalse(homeLight0.isModelMirrored());
      assertFalse(homeLight0.isBackFaceShown());
      assertFalse(homeLight0.isTexturable());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      assertNull(homeLight0.getDescription());
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals(1.43165568E9F, homeLight0.getGroundElevation(), 0.01F);
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertTrue(homeLight0.isVisible());
      assertNull(homeLight0.getShininess());
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertFalse(homeLight0.isDeformable());
      assertFalse(homeLight0.isResizable());
      assertNull(homeLight1.getDescription());
      assertEquals(1.3400333F, homeLight1.getNameAngle(), 0.01F);
      assertNull(homeLight1.getName());
      assertEquals(0.0F, homeLight1.getNameXOffset(), 0.01F);
      assertNull(homeLight1.getCatalogId());
      assertNull(homeLight1.getStaircaseCutOutShape());
      assertEquals(1.43165568E9F, homeLight1.getGroundElevation(), 0.01F);
      assertNull(homeLight1.getShininess());
      assertEquals(0.0F, homeLight1.getDepth(), 0.01F);
      assertFalse(homeLight1.isMovable());
      assertFalse(homeLight1.isResizable());
      assertEquals(0.0F, homeLight1.getHeight(), 0.01F);
      assertEquals(0.5F, homeLight1.getPower(), 0.01F);
      assertNull(homeLight1.getCurrency());
      assertFalse(homeLight1.isDeformable());
      assertFalse(homeLight1.isNameVisible());
      assertEquals(0.0F, homeLight1.getNameYOffset(), 0.01F);
      assertNull(homeLight1.getColor());
      assertFalse(homeLight1.isModelMirrored());
      assertTrue(homeLight1.isVisible());
      assertEquals(1.43165568E9F, homeLight1.getElevation(), 0.01F);
      assertEquals(0.0F, homeLight1.getX(), 0.01F);
      assertFalse(homeLight1.isDoorOrWindow());
      assertFalse(homeLight1.isBackFaceShown());
      assertEquals(0.0F, homeLight1.getY(), 0.01F);
      assertFalse(homeLight1.isTexturable());
      assertEquals(0.0F, homeLight1.getAngle(), 0.01F);
      assertEquals(0.0F, homeLight1.getWidth(), 0.01F);
      
      boolean boolean1 = homeLight1.isBottomLeftPointAt((-1.0F), (-1.0F), 1976.5306F);
      assertNotSame(homeLight0, homeLight1);
      assertNotSame(homeLight1, homeLight0);
      assertFalse(homeLight0.equals((Object)homeLight1));
      assertFalse(homeLight1.equals((Object)homeLight0));
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertFalse(homeLight0.isMovable());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertNull(homeLight0.getCurrency());
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertEquals(1.43165568E9F, homeLight0.getElevation(), 0.01F);
      assertNull(homeLight0.getCatalogId());
      assertNull(homeLight0.getName());
      assertFalse(homeLight0.isNameVisible());
      assertNull(homeLight0.getColor());
      assertFalse(homeLight0.isModelMirrored());
      assertFalse(homeLight0.isBackFaceShown());
      assertFalse(homeLight0.isTexturable());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      assertNull(homeLight0.getDescription());
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals(1.43165568E9F, homeLight0.getGroundElevation(), 0.01F);
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertTrue(homeLight0.isVisible());
      assertNull(homeLight0.getShininess());
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertFalse(homeLight0.isDeformable());
      assertFalse(homeLight0.isResizable());
      assertNull(homeLight1.getDescription());
      assertEquals(1.3400333F, homeLight1.getNameAngle(), 0.01F);
      assertNull(homeLight1.getName());
      assertEquals(0.0F, homeLight1.getNameXOffset(), 0.01F);
      assertNull(homeLight1.getCatalogId());
      assertNull(homeLight1.getStaircaseCutOutShape());
      assertEquals(1.43165568E9F, homeLight1.getGroundElevation(), 0.01F);
      assertNull(homeLight1.getShininess());
      assertEquals(0.0F, homeLight1.getDepth(), 0.01F);
      assertFalse(homeLight1.isMovable());
      assertFalse(homeLight1.isResizable());
      assertEquals(0.0F, homeLight1.getHeight(), 0.01F);
      assertEquals(0.5F, homeLight1.getPower(), 0.01F);
      assertNull(homeLight1.getCurrency());
      assertFalse(homeLight1.isDeformable());
      assertFalse(homeLight1.isNameVisible());
      assertEquals(0.0F, homeLight1.getNameYOffset(), 0.01F);
      assertNull(homeLight1.getColor());
      assertFalse(homeLight1.isModelMirrored());
      assertTrue(homeLight1.isVisible());
      assertEquals(1.43165568E9F, homeLight1.getElevation(), 0.01F);
      assertEquals(0.0F, homeLight1.getX(), 0.01F);
      assertFalse(homeLight1.isDoorOrWindow());
      assertFalse(homeLight1.isBackFaceShown());
      assertEquals(0.0F, homeLight1.getY(), 0.01F);
      assertFalse(homeLight1.isTexturable());
      assertEquals(0.0F, homeLight1.getAngle(), 0.01F);
      assertEquals(0.0F, homeLight1.getWidth(), 0.01F);
      
      BigDecimal bigDecimal0 = homeLight1.getPriceValueAddedTaxIncluded();
      assertNull(bigDecimal0);
      assertNotSame(homeLight0, homeLight1);
      assertNotSame(homeLight1, homeLight0);
      assertFalse(homeLight0.equals((Object)homeLight1));
      assertFalse(homeLight1.equals((Object)homeLight0));
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertFalse(homeLight0.isMovable());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertNull(homeLight0.getCurrency());
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertEquals(1.43165568E9F, homeLight0.getElevation(), 0.01F);
      assertNull(homeLight0.getCatalogId());
      assertNull(homeLight0.getName());
      assertFalse(homeLight0.isNameVisible());
      assertNull(homeLight0.getColor());
      assertFalse(homeLight0.isModelMirrored());
      assertFalse(homeLight0.isBackFaceShown());
      assertFalse(homeLight0.isTexturable());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      assertNull(homeLight0.getDescription());
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals(1.43165568E9F, homeLight0.getGroundElevation(), 0.01F);
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertTrue(homeLight0.isVisible());
      assertNull(homeLight0.getShininess());
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertFalse(homeLight0.isDeformable());
      assertFalse(homeLight0.isResizable());
      assertNull(homeLight1.getDescription());
      assertEquals(1.3400333F, homeLight1.getNameAngle(), 0.01F);
      assertNull(homeLight1.getName());
      assertEquals(0.0F, homeLight1.getNameXOffset(), 0.01F);
      assertNull(homeLight1.getCatalogId());
      assertNull(homeLight1.getStaircaseCutOutShape());
      assertEquals(1.43165568E9F, homeLight1.getGroundElevation(), 0.01F);
      assertNull(homeLight1.getShininess());
      assertEquals(0.0F, homeLight1.getDepth(), 0.01F);
      assertFalse(homeLight1.isMovable());
      assertFalse(homeLight1.isResizable());
      assertEquals(0.0F, homeLight1.getHeight(), 0.01F);
      assertEquals(0.5F, homeLight1.getPower(), 0.01F);
      assertNull(homeLight1.getCurrency());
      assertFalse(homeLight1.isDeformable());
      assertFalse(homeLight1.isNameVisible());
      assertEquals(0.0F, homeLight1.getNameYOffset(), 0.01F);
      assertNull(homeLight1.getColor());
      assertFalse(homeLight1.isModelMirrored());
      assertTrue(homeLight1.isVisible());
      assertEquals(1.43165568E9F, homeLight1.getElevation(), 0.01F);
      assertEquals(0.0F, homeLight1.getX(), 0.01F);
      assertFalse(homeLight1.isDoorOrWindow());
      assertFalse(homeLight1.isBackFaceShown());
      assertEquals(0.0F, homeLight1.getY(), 0.01F);
      assertFalse(homeLight1.isTexturable());
      assertEquals(0.0F, homeLight1.getAngle(), 0.01F);
      assertEquals(0.0F, homeLight1.getWidth(), 0.01F);
      
      homeLight0.setDescription("NAME");
      assertNotSame(homeLight0, homeLight1);
      assertFalse(homeLight0.equals((Object)homeLight1));
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertFalse(homeLight0.isMovable());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertNull(homeLight0.getCurrency());
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertEquals(1.43165568E9F, homeLight0.getElevation(), 0.01F);
      assertEquals("NAME", homeLight0.getDescription());
      assertNull(homeLight0.getCatalogId());
      assertNull(homeLight0.getName());
      assertFalse(homeLight0.isNameVisible());
      assertNull(homeLight0.getColor());
      assertFalse(homeLight0.isModelMirrored());
      assertFalse(homeLight0.isBackFaceShown());
      assertFalse(homeLight0.isTexturable());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals(1.43165568E9F, homeLight0.getGroundElevation(), 0.01F);
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertTrue(homeLight0.isVisible());
      assertNull(homeLight0.getShininess());
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertFalse(homeLight0.isDeformable());
      assertFalse(homeLight0.isResizable());
      
      boolean boolean2 = homeLight1.isMovable();
      assertNotSame(homeLight0, homeLight1);
      assertNotSame(homeLight1, homeLight0);
      assertFalse(homeLight0.equals((Object)homeLight1));
      assertFalse(homeLight1.equals((Object)homeLight0));
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      assertFalse(boolean2);
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertFalse(homeLight0.isMovable());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertNull(homeLight0.getCurrency());
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertEquals(1.43165568E9F, homeLight0.getElevation(), 0.01F);
      assertEquals("NAME", homeLight0.getDescription());
      assertNull(homeLight0.getCatalogId());
      assertNull(homeLight0.getName());
      assertFalse(homeLight0.isNameVisible());
      assertNull(homeLight0.getColor());
      assertFalse(homeLight0.isModelMirrored());
      assertFalse(homeLight0.isBackFaceShown());
      assertFalse(homeLight0.isTexturable());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals(1.43165568E9F, homeLight0.getGroundElevation(), 0.01F);
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertTrue(homeLight0.isVisible());
      assertNull(homeLight0.getShininess());
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertFalse(homeLight0.isDeformable());
      assertFalse(homeLight0.isResizable());
      assertNull(homeLight1.getDescription());
      assertEquals(1.3400333F, homeLight1.getNameAngle(), 0.01F);
      assertNull(homeLight1.getName());
      assertEquals(0.0F, homeLight1.getNameXOffset(), 0.01F);
      assertNull(homeLight1.getCatalogId());
      assertNull(homeLight1.getStaircaseCutOutShape());
      assertEquals(1.43165568E9F, homeLight1.getGroundElevation(), 0.01F);
      assertNull(homeLight1.getShininess());
      assertEquals(0.0F, homeLight1.getDepth(), 0.01F);
      assertFalse(homeLight1.isMovable());
      assertFalse(homeLight1.isResizable());
      assertEquals(0.0F, homeLight1.getHeight(), 0.01F);
      assertEquals(0.5F, homeLight1.getPower(), 0.01F);
      assertNull(homeLight1.getCurrency());
      assertFalse(homeLight1.isDeformable());
      assertFalse(homeLight1.isNameVisible());
      assertEquals(0.0F, homeLight1.getNameYOffset(), 0.01F);
      assertNull(homeLight1.getColor());
      assertFalse(homeLight1.isModelMirrored());
      assertTrue(homeLight1.isVisible());
      assertEquals(1.43165568E9F, homeLight1.getElevation(), 0.01F);
      assertEquals(0.0F, homeLight1.getX(), 0.01F);
      assertFalse(homeLight1.isDoorOrWindow());
      assertFalse(homeLight1.isBackFaceShown());
      assertEquals(0.0F, homeLight1.getY(), 0.01F);
      assertFalse(homeLight1.isTexturable());
      assertEquals(0.0F, homeLight1.getAngle(), 0.01F);
      assertEquals(0.0F, homeLight1.getWidth(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test181()  throws Throwable  {
      Light light0 = mock(Light.class, new ViolatedAssumptionAnswer());
      doReturn((LightSource[]) null).when(light0).getLightSources();
      doReturn((Integer) null).when(light0).getColor();
      doReturn((String) null).when(light0).getCurrency();
      doReturn(0.0F).when(light0).getDepth();
      doReturn((String) null).when(light0).getDescription();
      doReturn(0.0F).when(light0).getElevation();
      doReturn(0.0F).when(light0).getHeight();
      doReturn((Content) null).when(light0).getIcon();
      doReturn((Content) null).when(light0).getModel();
      doReturn((float[][]) null).when(light0).getModelRotation();
      doReturn((String) null).when(light0).getName();
      doReturn((Content) null).when(light0).getPlanIcon();
      doReturn((BigDecimal) null).when(light0).getPrice();
      doReturn((String) null).when(light0).getStaircaseCutOutShape();
      doReturn((BigDecimal) null).when(light0).getValueAddedTaxPercentage();
      doReturn(0.0F).when(light0).getWidth();
      doReturn(false).when(light0).isBackFaceShown();
      doReturn(false).when(light0).isDeformable();
      doReturn(false).when(light0).isDoorOrWindow();
      doReturn(false).when(light0).isMovable();
      doReturn(false).when(light0).isResizable();
      doReturn(false).when(light0).isTexturable();
      HomeLight homeLight0 = new HomeLight(light0);
      assertNotNull(homeLight0);
      assertFalse(homeLight0.isMovable());
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertFalse(homeLight0.isResizable());
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertFalse(homeLight0.isDeformable());
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertNull(homeLight0.getDescription());
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertTrue(homeLight0.isVisible());
      assertNull(homeLight0.getShininess());
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      assertFalse(homeLight0.isTexturable());
      assertFalse(homeLight0.isBackFaceShown());
      assertFalse(homeLight0.isNameVisible());
      assertNull(homeLight0.getCurrency());
      assertNull(homeLight0.getName());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertFalse(homeLight0.isModelMirrored());
      assertNull(homeLight0.getColor());
      assertNull(homeLight0.getCatalogId());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      String string0 = homeLight0.getName();
      assertNull(string0);
      assertFalse(homeLight0.isMovable());
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertFalse(homeLight0.isResizable());
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertFalse(homeLight0.isDeformable());
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertNull(homeLight0.getDescription());
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertTrue(homeLight0.isVisible());
      assertNull(homeLight0.getShininess());
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      assertFalse(homeLight0.isTexturable());
      assertFalse(homeLight0.isBackFaceShown());
      assertFalse(homeLight0.isNameVisible());
      assertNull(homeLight0.getCurrency());
      assertNull(homeLight0.getName());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertFalse(homeLight0.isModelMirrored());
      assertNull(homeLight0.getColor());
      assertNull(homeLight0.getCatalogId());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      
      Level level0 = homeLight0.getLevel();
      assertNull(level0);
      assertFalse(homeLight0.isMovable());
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertFalse(homeLight0.isResizable());
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertFalse(homeLight0.isDeformable());
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertNull(homeLight0.getDescription());
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertTrue(homeLight0.isVisible());
      assertNull(homeLight0.getShininess());
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      assertFalse(homeLight0.isTexturable());
      assertFalse(homeLight0.isBackFaceShown());
      assertFalse(homeLight0.isNameVisible());
      assertNull(homeLight0.getCurrency());
      assertNull(homeLight0.getName());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertFalse(homeLight0.isModelMirrored());
      assertNull(homeLight0.getColor());
      assertNull(homeLight0.getCatalogId());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      
      HomeLight homeLight1 = homeLight0.clone();
      assertNotNull(homeLight1);
      assertNotSame(homeLight0, homeLight1);
      assertNotSame(homeLight1, homeLight0);
      assertFalse(homeLight1.equals((Object)homeLight0));
      assertFalse(homeLight0.isMovable());
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertFalse(homeLight0.isResizable());
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertFalse(homeLight0.isDeformable());
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertNull(homeLight0.getDescription());
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertTrue(homeLight0.isVisible());
      assertNull(homeLight0.getShininess());
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      assertFalse(homeLight0.isTexturable());
      assertFalse(homeLight0.isBackFaceShown());
      assertFalse(homeLight0.isNameVisible());
      assertNull(homeLight0.getCurrency());
      assertNull(homeLight0.getName());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertFalse(homeLight0.isModelMirrored());
      assertNull(homeLight0.getColor());
      assertNull(homeLight0.getCatalogId());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertNull(homeLight1.getDescription());
      assertEquals(0.0F, homeLight1.getElevation(), 0.01F);
      assertNull(homeLight1.getName());
      assertEquals(0.0F, homeLight1.getDepth(), 0.01F);
      assertEquals(0.0F, homeLight1.getNameAngle(), 0.01F);
      assertFalse(homeLight1.isBackFaceShown());
      assertFalse(homeLight1.isModelMirrored());
      assertNull(homeLight1.getColor());
      assertFalse(homeLight1.isMovable());
      assertEquals(0.0F, homeLight1.getHeight(), 0.01F);
      assertEquals(0.5F, homeLight1.getPower(), 0.01F);
      assertNull(homeLight1.getCatalogId());
      assertTrue(homeLight1.isVisible());
      assertEquals(0.0F, homeLight1.getWidth(), 0.01F);
      assertEquals(0.0F, homeLight1.getNameYOffset(), 0.01F);
      assertNull(homeLight1.getCurrency());
      assertFalse(homeLight1.isDeformable());
      assertFalse(homeLight1.isNameVisible());
      assertFalse(homeLight1.isResizable());
      assertNull(homeLight1.getShininess());
      assertEquals(0.0F, homeLight1.getY(), 0.01F);
      assertFalse(homeLight1.isDoorOrWindow());
      assertEquals(0.0F, homeLight1.getX(), 0.01F);
      assertNull(homeLight1.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight1.getAngle(), 0.01F);
      assertEquals(0.0F, homeLight1.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight1.getNameXOffset(), 0.01F);
      assertFalse(homeLight1.isTexturable());
      
      homeLight0.setNameYOffset(40.88F);
      assertNotSame(homeLight0, homeLight1);
      assertFalse(homeLight0.equals((Object)homeLight1));
      assertFalse(homeLight0.isMovable());
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertFalse(homeLight0.isResizable());
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertFalse(homeLight0.isDeformable());
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertNull(homeLight0.getDescription());
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertTrue(homeLight0.isVisible());
      assertNull(homeLight0.getShininess());
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      assertFalse(homeLight0.isTexturable());
      assertFalse(homeLight0.isBackFaceShown());
      assertEquals(40.88F, homeLight0.getNameYOffset(), 0.01F);
      assertFalse(homeLight0.isNameVisible());
      assertNull(homeLight0.getCurrency());
      assertNull(homeLight0.getName());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertFalse(homeLight0.isModelMirrored());
      assertNull(homeLight0.getColor());
      assertNull(homeLight0.getCatalogId());
      
      BigDecimal bigDecimal0 = homeLight0.getPriceValueAddedTaxIncluded();
      assertNull(bigDecimal0);
      assertNotSame(homeLight0, homeLight1);
      assertFalse(homeLight0.equals((Object)homeLight1));
      assertFalse(homeLight0.isMovable());
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertFalse(homeLight0.isResizable());
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertFalse(homeLight0.isDeformable());
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertNull(homeLight0.getDescription());
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertTrue(homeLight0.isVisible());
      assertNull(homeLight0.getShininess());
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      assertFalse(homeLight0.isTexturable());
      assertFalse(homeLight0.isBackFaceShown());
      assertEquals(40.88F, homeLight0.getNameYOffset(), 0.01F);
      assertFalse(homeLight0.isNameVisible());
      assertNull(homeLight0.getCurrency());
      assertNull(homeLight0.getName());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertFalse(homeLight0.isModelMirrored());
      assertNull(homeLight0.getColor());
      assertNull(homeLight0.getCatalogId());
      
      boolean boolean1 = homeLight0.isDeformable();
      assertNotSame(homeLight0, homeLight1);
      assertFalse(homeLight0.equals((Object)homeLight1));
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      assertFalse(homeLight0.isMovable());
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertFalse(homeLight0.isResizable());
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertFalse(homeLight0.isDeformable());
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertNull(homeLight0.getDescription());
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertTrue(homeLight0.isVisible());
      assertNull(homeLight0.getShininess());
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      assertFalse(homeLight0.isTexturable());
      assertFalse(homeLight0.isBackFaceShown());
      assertEquals(40.88F, homeLight0.getNameYOffset(), 0.01F);
      assertFalse(homeLight0.isNameVisible());
      assertNull(homeLight0.getCurrency());
      assertNull(homeLight0.getName());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertFalse(homeLight0.isModelMirrored());
      assertNull(homeLight0.getColor());
      assertNull(homeLight0.getCatalogId());
      
      boolean boolean2 = homeLight0.isNameVisible();
      assertNotSame(homeLight0, homeLight1);
      assertFalse(homeLight0.equals((Object)homeLight1));
      assertFalse(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2);
      assertFalse(homeLight0.isMovable());
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertFalse(homeLight0.isResizable());
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertFalse(homeLight0.isDeformable());
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertNull(homeLight0.getDescription());
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertTrue(homeLight0.isVisible());
      assertNull(homeLight0.getShininess());
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      assertFalse(homeLight0.isTexturable());
      assertFalse(homeLight0.isBackFaceShown());
      assertEquals(40.88F, homeLight0.getNameYOffset(), 0.01F);
      assertFalse(homeLight0.isNameVisible());
      assertNull(homeLight0.getCurrency());
      assertNull(homeLight0.getName());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertFalse(homeLight0.isModelMirrored());
      assertNull(homeLight0.getColor());
      assertNull(homeLight0.getCatalogId());
      
      // Undeclared exception!
      try { 
        homeLight1.setModelMirrored(true);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Piece isn't resizable
         //
         verifyException("com.eteks.sweethome3d.model.HomePieceOfFurniture", e);
      }
  }

  @Test(timeout = 4000)
  public void test182()  throws Throwable  {
      LightSource lightSource0 = new LightSource((-1.0F), (-1.0F), 381.9F, 1431655765);
      assertNotNull(lightSource0);
      assertEquals((-1.0F), lightSource0.getX(), 0.01F);
      assertEquals(1431655765, lightSource0.getColor());
      assertEquals((-1.0F), lightSource0.getY(), 0.01F);
      assertEquals(381.9F, lightSource0.getZ(), 0.01F);
      assertNull(lightSource0.getDiameter());
      
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-54);
      byteArray0[1] = (byte) (-40);
      byteArray0[2] = (byte)111;
      boolean boolean0 = FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      assertEquals(3, byteArray0.length);
      assertFalse(boolean0);
      assertArrayEquals(new byte[] {(byte) (-54), (byte) (-40), (byte)111}, byteArray0);
      
      LightSource lightSource1 = new LightSource((-1.0F), (-69.47F), 700.4569F, (-853));
      assertNotNull(lightSource1);
      assertFalse(lightSource1.equals((Object)lightSource0));
      assertEquals((-853), lightSource1.getColor());
      assertNull(lightSource1.getDiameter());
      assertEquals((-69.47F), lightSource1.getY(), 0.01F);
      assertEquals((-1.0F), lightSource1.getX(), 0.01F);
      assertEquals(700.4569F, lightSource1.getZ(), 0.01F);
      
      Integer integer0 = new Integer((-853));
      assertNotNull(integer0);
      assertEquals((-853), (int)integer0);
      
      Light light0 = mock(Light.class, new ViolatedAssumptionAnswer());
      doReturn((LightSource[]) null).when(light0).getLightSources();
      doReturn((Integer) null).when(light0).getColor();
      doReturn((String) null).when(light0).getCurrency();
      doReturn(0.0F).when(light0).getDepth();
      doReturn((String) null).when(light0).getDescription();
      doReturn(0.0F).when(light0).getElevation();
      doReturn(0.0F).when(light0).getHeight();
      doReturn((Content) null).when(light0).getIcon();
      doReturn((Content) null).when(light0).getModel();
      doReturn((float[][]) null).when(light0).getModelRotation();
      doReturn((String) null).when(light0).getName();
      doReturn((Content) null).when(light0).getPlanIcon();
      doReturn((BigDecimal) null).when(light0).getPrice();
      doReturn((String) null).when(light0).getStaircaseCutOutShape();
      doReturn((BigDecimal) null).when(light0).getValueAddedTaxPercentage();
      doReturn(0.0F).when(light0).getWidth();
      doReturn(false).when(light0).isBackFaceShown();
      doReturn(false).when(light0).isDeformable();
      doReturn(false).when(light0).isDoorOrWindow();
      doReturn(false).when(light0).isMovable();
      doReturn(false).when(light0).isResizable();
      doReturn(false).when(light0).isTexturable();
      byte[] byteArray1 = new byte[5];
      assertFalse(byteArray1.equals((Object)byteArray0));
      
      byteArray1[1] = (byte)111;
      byteArray1[3] = (byte)0;
      boolean boolean1 = FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray1);
      assertEquals(5, byteArray1.length);
      assertNotSame(byteArray1, byteArray0);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      assertArrayEquals(new byte[] {(byte)0, (byte)111, (byte)0, (byte)0, (byte)0}, byteArray1);
      
      HomeLight homeLight0 = new HomeLight(light0);
      assertNotNull(homeLight0);
      assertNull(homeLight0.getName());
      assertNull(homeLight0.getDescription());
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertFalse(homeLight0.isResizable());
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertNull(homeLight0.getShininess());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertFalse(homeLight0.isTexturable());
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      assertFalse(homeLight0.isDeformable());
      assertNull(homeLight0.getCurrency());
      assertFalse(homeLight0.isNameVisible());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertTrue(homeLight0.isVisible());
      assertFalse(homeLight0.isModelMirrored());
      assertFalse(homeLight0.isBackFaceShown());
      assertFalse(homeLight0.isMovable());
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertNull(homeLight0.getColor());
      assertNull(homeLight0.getCatalogId());
      
      homeLight0.setY((byte)0);
      assertNull(homeLight0.getName());
      assertNull(homeLight0.getDescription());
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertFalse(homeLight0.isResizable());
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertNull(homeLight0.getShininess());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertFalse(homeLight0.isTexturable());
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      assertFalse(homeLight0.isDeformable());
      assertNull(homeLight0.getCurrency());
      assertFalse(homeLight0.isNameVisible());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertTrue(homeLight0.isVisible());
      assertFalse(homeLight0.isModelMirrored());
      assertFalse(homeLight0.isBackFaceShown());
      assertFalse(homeLight0.isMovable());
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertNull(homeLight0.getColor());
      assertNull(homeLight0.getCatalogId());
      
      BigDecimal bigDecimal0 = homeLight0.getValueAddedTax();
      assertNull(bigDecimal0);
      assertNull(homeLight0.getName());
      assertNull(homeLight0.getDescription());
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertFalse(homeLight0.isResizable());
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertNull(homeLight0.getShininess());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertFalse(homeLight0.isTexturable());
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      assertFalse(homeLight0.isDeformable());
      assertNull(homeLight0.getCurrency());
      assertFalse(homeLight0.isNameVisible());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertTrue(homeLight0.isVisible());
      assertFalse(homeLight0.isModelMirrored());
      assertFalse(homeLight0.isBackFaceShown());
      assertFalse(homeLight0.isMovable());
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertNull(homeLight0.getColor());
      assertNull(homeLight0.getCatalogId());
      
      BigDecimal bigDecimal1 = homeLight0.getValueAddedTax();
      assertNull(bigDecimal1);
      assertNull(homeLight0.getName());
      assertNull(homeLight0.getDescription());
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertFalse(homeLight0.isResizable());
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertNull(homeLight0.getShininess());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertFalse(homeLight0.isTexturable());
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      assertFalse(homeLight0.isDeformable());
      assertNull(homeLight0.getCurrency());
      assertFalse(homeLight0.isNameVisible());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertTrue(homeLight0.isVisible());
      assertFalse(homeLight0.isModelMirrored());
      assertFalse(homeLight0.isBackFaceShown());
      assertFalse(homeLight0.isMovable());
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertNull(homeLight0.getColor());
      assertNull(homeLight0.getCatalogId());
      
      String string0 = homeLight0.getName();
      assertNull(string0);
      assertNull(homeLight0.getName());
      assertNull(homeLight0.getDescription());
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertFalse(homeLight0.isResizable());
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertNull(homeLight0.getShininess());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertFalse(homeLight0.isTexturable());
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      assertFalse(homeLight0.isDeformable());
      assertNull(homeLight0.getCurrency());
      assertFalse(homeLight0.isNameVisible());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertTrue(homeLight0.isVisible());
      assertFalse(homeLight0.isModelMirrored());
      assertFalse(homeLight0.isBackFaceShown());
      assertFalse(homeLight0.isMovable());
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertNull(homeLight0.getColor());
      assertNull(homeLight0.getCatalogId());
      
      homeLight0.setName((String) null);
      assertNull(homeLight0.getName());
      assertNull(homeLight0.getDescription());
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertFalse(homeLight0.isResizable());
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertNull(homeLight0.getShininess());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertFalse(homeLight0.isTexturable());
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      assertFalse(homeLight0.isDeformable());
      assertNull(homeLight0.getCurrency());
      assertFalse(homeLight0.isNameVisible());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertTrue(homeLight0.isVisible());
      assertFalse(homeLight0.isModelMirrored());
      assertFalse(homeLight0.isBackFaceShown());
      assertFalse(homeLight0.isMovable());
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertNull(homeLight0.getColor());
      assertNull(homeLight0.getCatalogId());
      
      boolean boolean2 = homeLight0.intersectsRectangle((byte)0, 1800.2F, 700.4569F, (-73.79F));
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      assertFalse(boolean2);
      assertNull(homeLight0.getName());
      assertNull(homeLight0.getDescription());
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertFalse(homeLight0.isResizable());
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertNull(homeLight0.getShininess());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertFalse(homeLight0.isTexturable());
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      assertFalse(homeLight0.isDeformable());
      assertNull(homeLight0.getCurrency());
      assertFalse(homeLight0.isNameVisible());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertTrue(homeLight0.isVisible());
      assertFalse(homeLight0.isModelMirrored());
      assertFalse(homeLight0.isBackFaceShown());
      assertFalse(homeLight0.isMovable());
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertNull(homeLight0.getColor());
      assertNull(homeLight0.getCatalogId());
      
      homeLight0.setNameYOffset((-1.0F));
      assertNull(homeLight0.getName());
      assertNull(homeLight0.getDescription());
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertFalse(homeLight0.isResizable());
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertNull(homeLight0.getShininess());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertFalse(homeLight0.isTexturable());
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      assertFalse(homeLight0.isDeformable());
      assertNull(homeLight0.getCurrency());
      assertFalse(homeLight0.isNameVisible());
      assertEquals((-1.0F), homeLight0.getNameYOffset(), 0.01F);
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertTrue(homeLight0.isVisible());
      assertFalse(homeLight0.isModelMirrored());
      assertFalse(homeLight0.isBackFaceShown());
      assertFalse(homeLight0.isMovable());
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertNull(homeLight0.getColor());
      assertNull(homeLight0.getCatalogId());
      
      BigDecimal bigDecimal2 = homeLight0.getPriceValueAddedTaxIncluded();
      assertNull(bigDecimal2);
      assertNull(homeLight0.getName());
      assertNull(homeLight0.getDescription());
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertFalse(homeLight0.isResizable());
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertNull(homeLight0.getShininess());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertFalse(homeLight0.isTexturable());
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      assertFalse(homeLight0.isDeformable());
      assertNull(homeLight0.getCurrency());
      assertFalse(homeLight0.isNameVisible());
      assertEquals((-1.0F), homeLight0.getNameYOffset(), 0.01F);
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertTrue(homeLight0.isVisible());
      assertFalse(homeLight0.isModelMirrored());
      assertFalse(homeLight0.isBackFaceShown());
      assertFalse(homeLight0.isMovable());
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertNull(homeLight0.getColor());
      assertNull(homeLight0.getCatalogId());
      
      homeLight0.setDescription((String) null);
      assertNull(homeLight0.getName());
      assertNull(homeLight0.getDescription());
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertFalse(homeLight0.isResizable());
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertNull(homeLight0.getShininess());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertFalse(homeLight0.isTexturable());
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      assertFalse(homeLight0.isDeformable());
      assertNull(homeLight0.getCurrency());
      assertFalse(homeLight0.isNameVisible());
      assertEquals((-1.0F), homeLight0.getNameYOffset(), 0.01F);
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertTrue(homeLight0.isVisible());
      assertFalse(homeLight0.isModelMirrored());
      assertFalse(homeLight0.isBackFaceShown());
      assertFalse(homeLight0.isMovable());
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertNull(homeLight0.getColor());
      assertNull(homeLight0.getCatalogId());
      
      boolean boolean3 = homeLight0.isNameVisible();
      assertTrue(boolean3 == boolean1);
      assertTrue(boolean3 == boolean0);
      assertTrue(boolean3 == boolean2);
      assertFalse(boolean3);
      assertNull(homeLight0.getName());
      assertNull(homeLight0.getDescription());
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertFalse(homeLight0.isResizable());
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertNull(homeLight0.getShininess());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertFalse(homeLight0.isTexturable());
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      assertFalse(homeLight0.isDeformable());
      assertNull(homeLight0.getCurrency());
      assertFalse(homeLight0.isNameVisible());
      assertEquals((-1.0F), homeLight0.getNameYOffset(), 0.01F);
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertTrue(homeLight0.isVisible());
      assertFalse(homeLight0.isModelMirrored());
      assertFalse(homeLight0.isBackFaceShown());
      assertFalse(homeLight0.isMovable());
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertNull(homeLight0.getColor());
      assertNull(homeLight0.getCatalogId());
      
      BigDecimal bigDecimal3 = homeLight0.getValueAddedTaxPercentage();
      assertNull(bigDecimal3);
      assertNull(homeLight0.getName());
      assertNull(homeLight0.getDescription());
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertFalse(homeLight0.isResizable());
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertNull(homeLight0.getShininess());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertFalse(homeLight0.isTexturable());
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      assertFalse(homeLight0.isDeformable());
      assertNull(homeLight0.getCurrency());
      assertFalse(homeLight0.isNameVisible());
      assertEquals((-1.0F), homeLight0.getNameYOffset(), 0.01F);
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertTrue(homeLight0.isVisible());
      assertFalse(homeLight0.isModelMirrored());
      assertFalse(homeLight0.isBackFaceShown());
      assertFalse(homeLight0.isMovable());
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertNull(homeLight0.getColor());
      assertNull(homeLight0.getCatalogId());
  }

  @Test(timeout = 4000)
  public void test183()  throws Throwable  {
      String[] stringArray0 = new String[3];
      stringArray0[0] = "com.eteks.sweethome3d.tools.URLContent";
      stringArray0[1] = "";
      stringArray0[2] = "yi%4GpoqMD";
      Long long0 = new Long((-5175L));
      assertNotNull(long0);
      assertEquals((-5175L), (long)long0);
      
      int int0 = Float.compare((-1499.0F), (-1499.0F));
      assertEquals(0, int0);
      
      URL uRL0 = MockURL.getFtpExample();
      assertNotNull(uRL0);
      assertEquals("ftp://ftp.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals("ftp://ftp.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals((-1), uRL0.getDefaultPort());
      assertNull(uRL0.getRef());
      assertNull(uRL0.getUserInfo());
      assertEquals("ftp.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals("ftp", uRL0.getProtocol());
      assertEquals("ftp.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getQuery());
      
      URLContent uRLContent0 = new URLContent(uRL0);
      assertNotNull(uRLContent0);
      assertEquals("ftp://ftp.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals("ftp://ftp.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals((-1), uRL0.getDefaultPort());
      assertNull(uRL0.getRef());
      assertNull(uRL0.getUserInfo());
      assertEquals("ftp.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals("ftp", uRL0.getProtocol());
      assertEquals("ftp.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getQuery());
      assertFalse(uRLContent0.isJAREntry());
      
      TemporaryURLContent temporaryURLContent0 = new TemporaryURLContent(uRL0);
      assertNotNull(temporaryURLContent0);
      assertEquals("ftp://ftp.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals("ftp://ftp.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals((-1), uRL0.getDefaultPort());
      assertNull(uRL0.getRef());
      assertNull(uRL0.getUserInfo());
      assertEquals("ftp.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals("ftp", uRL0.getProtocol());
      assertEquals("ftp.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getQuery());
      assertFalse(temporaryURLContent0.isJAREntry());
      
      LightSource[] lightSourceArray0 = new LightSource[6];
      LightSource lightSource0 = new LightSource(0.0F, 0.0F, (-5175L), 3666, (Float) null);
      assertNotNull(lightSource0);
      assertEquals(3666, lightSource0.getColor());
      assertEquals(0.0F, lightSource0.getX(), 0.01F);
      assertEquals((-5175.0F), lightSource0.getZ(), 0.01F);
      assertNull(lightSource0.getDiameter());
      assertEquals(0.0F, lightSource0.getY(), 0.01F);
      
      lightSourceArray0[0] = lightSource0;
      LightSource lightSource1 = new LightSource(1.0F, 0.0F, 0, 0);
      assertNotNull(lightSource1);
      assertFalse(lightSource1.equals((Object)lightSource0));
      assertEquals(0, lightSource1.getColor());
      assertEquals(0.0F, lightSource1.getY(), 0.01F);
      assertEquals(1.0F, lightSource1.getX(), 0.01F);
      assertNull(lightSource1.getDiameter());
      assertEquals(0.0F, lightSource1.getZ(), 0.01F);
      
      lightSourceArray0[1] = lightSource1;
      LightSource lightSource2 = new LightSource(0.0F, (-1499.0F), (-1499.0F), 0, (Float) null);
      assertNotNull(lightSource2);
      assertFalse(lightSource2.equals((Object)lightSource1));
      assertFalse(lightSource2.equals((Object)lightSource0));
      assertNull(lightSource2.getDiameter());
      assertEquals((-1499.0F), lightSource2.getY(), 0.01F);
      assertEquals(0.0F, lightSource2.getX(), 0.01F);
      assertEquals((-1499.0F), lightSource2.getZ(), 0.01F);
      assertEquals(0, lightSource2.getColor());
      
      lightSourceArray0[2] = lightSource2;
      LightSource lightSource3 = new LightSource(483.31F, 3666, 0, 0, (Float) null);
      assertNotNull(lightSource3);
      assertFalse(lightSource3.equals((Object)lightSource2));
      assertFalse(lightSource3.equals((Object)lightSource1));
      assertFalse(lightSource3.equals((Object)lightSource0));
      assertNull(lightSource3.getDiameter());
      assertEquals(483.31F, lightSource3.getX(), 0.01F);
      assertEquals(0.0F, lightSource3.getZ(), 0.01F);
      assertEquals(0, lightSource3.getColor());
      assertEquals(3666.0F, lightSource3.getY(), 0.01F);
      
      lightSourceArray0[3] = lightSource3;
      LightSource lightSource4 = new LightSource((-5175L), (-1290.37F), 0.0F, 0);
      assertNotNull(lightSource4);
      assertFalse(lightSource4.equals((Object)lightSource2));
      assertFalse(lightSource4.equals((Object)lightSource1));
      assertFalse(lightSource4.equals((Object)lightSource0));
      assertFalse(lightSource4.equals((Object)lightSource3));
      assertEquals((-5175.0F), lightSource4.getX(), 0.01F);
      assertEquals((-1290.37F), lightSource4.getY(), 0.01F);
      assertNull(lightSource4.getDiameter());
      assertEquals(0.0F, lightSource4.getZ(), 0.01F);
      assertEquals(0, lightSource4.getColor());
      
      lightSourceArray0[4] = lightSource4;
      LightSource lightSource5 = new LightSource(3109.0F, (-1499.0F), 0.0F, 0);
      assertNotNull(lightSource5);
      assertFalse(lightSource5.equals((Object)lightSource3));
      assertFalse(lightSource5.equals((Object)lightSource1));
      assertFalse(lightSource5.equals((Object)lightSource2));
      assertFalse(lightSource5.equals((Object)lightSource4));
      assertFalse(lightSource5.equals((Object)lightSource0));
      assertEquals(3109.0F, lightSource5.getX(), 0.01F);
      assertEquals(0, lightSource5.getColor());
      assertEquals((-1499.0F), lightSource5.getY(), 0.01F);
      assertEquals(0.0F, lightSource5.getZ(), 0.01F);
      assertNull(lightSource5.getDiameter());
      
      lightSourceArray0[5] = lightSource5;
      float[][] floatArray0 = new float[3][5];
      float[] floatArray1 = new float[6];
      floatArray1[0] = 0.0F;
      floatArray1[1] = (-700.214F);
      floatArray1[2] = 3109.0F;
      floatArray1[3] = (float) 0;
      floatArray1[4] = 0.0F;
      floatArray1[5] = (float) 0;
      floatArray0[0] = floatArray1;
      float[] floatArray2 = new float[3];
      assertFalse(floatArray2.equals((Object)floatArray1));
      
      floatArray2[0] = 1.0F;
      floatArray2[1] = (float) 0;
      floatArray2[2] = (float) 3666;
      floatArray0[1] = floatArray2;
      float[] floatArray3 = new float[4];
      assertFalse(floatArray3.equals((Object)floatArray2));
      assertFalse(floatArray3.equals((Object)floatArray1));
      
      floatArray3[0] = (float) 0;
      floatArray3[1] = 0.0F;
      floatArray3[2] = (-1290.37F);
      floatArray3[3] = 1.0F;
      floatArray0[2] = floatArray3;
      BigDecimal bigDecimal0 = BigDecimal.ONE;
      assertNotNull(bigDecimal0);
      assertEquals((short)1, bigDecimal0.shortValue());
      assertEquals((byte)1, bigDecimal0.byteValue());
      
      CatalogLight catalogLight0 = new CatalogLight("", "com.eteks.sweethome3d.tools.URLContent", "", "", stringArray0, long0, (Float) (-1499.0F), uRLContent0, temporaryURLContent0, temporaryURLContent0, (-1499.0F), 0.0F, (-1499.0F), 0.0F, false, lightSourceArray0, "", floatArray0, (String) null, false, false, false, bigDecimal0, bigDecimal0, "com.eteks.sweethome3d.tools.URLContent");
      assertEquals(3, stringArray0.length);
      assertEquals(3, floatArray0.length);
      assertEquals(6, lightSourceArray0.length);
      assertNotNull(catalogLight0);
      assertEquals("ftp://ftp.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals("ftp://ftp.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals((-1), uRL0.getDefaultPort());
      assertNull(uRL0.getRef());
      assertNull(uRL0.getUserInfo());
      assertEquals("ftp.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals("ftp", uRL0.getProtocol());
      assertEquals("ftp.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getQuery());
      assertFalse(uRLContent0.isJAREntry());
      assertFalse(temporaryURLContent0.isJAREntry());
      assertEquals((short)1, bigDecimal0.shortValue());
      assertEquals((byte)1, bigDecimal0.byteValue());
      assertEquals(0.0F, catalogLight0.getDepth(), 0.01F);
      assertFalse(catalogLight0.isResizable());
      assertFalse(catalogLight0.isDeformable());
      assertFalse(catalogLight0.isMovable());
      assertFalse(catalogLight0.isBackFaceShown());
      assertEquals("com.eteks.sweethome3d.tools.URLContent", catalogLight0.getName());
      assertEquals("com.eteks.sweethome3d.tools.URLContent", catalogLight0.getCurrency());
      assertEquals("", catalogLight0.getStaircaseCutOutShape());
      assertEquals((-1499.0F), catalogLight0.getGrade(), 0.01F);
      assertFalse(catalogLight0.isTexturable());
      assertNull(catalogLight0.getColor());
      assertEquals("", catalogLight0.getId());
      assertEquals((-5175L), (long)catalogLight0.getCreationDate());
      assertEquals((-1499.0F), catalogLight0.getHeight(), 0.01F);
      assertEquals("", catalogLight0.getInformation());
      assertEquals("", catalogLight0.getDescription());
      assertEquals(0.0F, catalogLight0.getElevation(), 0.01F);
      assertNull(catalogLight0.getCreator());
      assertFalse(catalogLight0.isDoorOrWindow());
      assertTrue(catalogLight0.isProportional());
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertFalse(catalogLight0.isModifiable());
      assertEquals((-1499.0F), catalogLight0.getWidth(), 0.01F);
      
      HomeLight homeLight0 = new HomeLight(catalogLight0);
      assertEquals(3, stringArray0.length);
      assertEquals(3, floatArray0.length);
      assertEquals(6, lightSourceArray0.length);
      assertNotNull(homeLight0);
      assertEquals("ftp://ftp.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals("ftp://ftp.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals((-1), uRL0.getDefaultPort());
      assertNull(uRL0.getRef());
      assertNull(uRL0.getUserInfo());
      assertEquals("ftp.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals("ftp", uRL0.getProtocol());
      assertEquals("ftp.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getQuery());
      assertFalse(uRLContent0.isJAREntry());
      assertFalse(temporaryURLContent0.isJAREntry());
      assertEquals((short)1, bigDecimal0.shortValue());
      assertEquals((byte)1, bigDecimal0.byteValue());
      assertEquals(0.0F, catalogLight0.getDepth(), 0.01F);
      assertFalse(catalogLight0.isResizable());
      assertFalse(catalogLight0.isDeformable());
      assertFalse(catalogLight0.isMovable());
      assertFalse(catalogLight0.isBackFaceShown());
      assertEquals("com.eteks.sweethome3d.tools.URLContent", catalogLight0.getName());
      assertEquals("com.eteks.sweethome3d.tools.URLContent", catalogLight0.getCurrency());
      assertEquals("", catalogLight0.getStaircaseCutOutShape());
      assertEquals((-1499.0F), catalogLight0.getGrade(), 0.01F);
      assertFalse(catalogLight0.isTexturable());
      assertNull(catalogLight0.getColor());
      assertEquals("", catalogLight0.getId());
      assertEquals((-5175L), (long)catalogLight0.getCreationDate());
      assertEquals((-1499.0F), catalogLight0.getHeight(), 0.01F);
      assertEquals("", catalogLight0.getInformation());
      assertEquals("", catalogLight0.getDescription());
      assertEquals(0.0F, catalogLight0.getElevation(), 0.01F);
      assertNull(catalogLight0.getCreator());
      assertFalse(catalogLight0.isDoorOrWindow());
      assertTrue(catalogLight0.isProportional());
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertFalse(catalogLight0.isModifiable());
      assertEquals((-1499.0F), catalogLight0.getWidth(), 0.01F);
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      assertFalse(homeLight0.isBackFaceShown());
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertNull(homeLight0.getColor());
      assertFalse(homeLight0.isTexturable());
      assertEquals("com.eteks.sweethome3d.tools.URLContent", homeLight0.getCurrency());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertEquals("", homeLight0.getDescription());
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals((-749.5F), homeLight0.getX(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertFalse(homeLight0.isDeformable());
      assertEquals("", homeLight0.getStaircaseCutOutShape());
      assertTrue(homeLight0.isVisible());
      assertNull(homeLight0.getShininess());
      assertEquals((-1499.0F), homeLight0.getWidth(), 0.01F);
      assertFalse(homeLight0.isResizable());
      assertEquals("", homeLight0.getCatalogId());
      assertEquals("com.eteks.sweethome3d.tools.URLContent", homeLight0.getName());
      assertFalse(homeLight0.isMovable());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertFalse(homeLight0.isNameVisible());
      assertFalse(homeLight0.isModelMirrored());
      assertEquals((-1499.0F), homeLight0.getHeight(), 0.01F);
      
      HomeLight homeLight1 = homeLight0.clone();
      assertEquals(3, stringArray0.length);
      assertEquals(3, floatArray0.length);
      assertEquals(6, lightSourceArray0.length);
      assertNotNull(homeLight1);
      assertNotSame(homeLight0, homeLight1);
      assertNotSame(homeLight1, homeLight0);
      assertFalse(homeLight1.equals((Object)homeLight0));
      assertEquals("ftp://ftp.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals("ftp://ftp.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals((-1), uRL0.getDefaultPort());
      assertNull(uRL0.getRef());
      assertNull(uRL0.getUserInfo());
      assertEquals("ftp.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals("ftp", uRL0.getProtocol());
      assertEquals("ftp.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getQuery());
      assertFalse(uRLContent0.isJAREntry());
      assertFalse(temporaryURLContent0.isJAREntry());
      assertEquals((short)1, bigDecimal0.shortValue());
      assertEquals((byte)1, bigDecimal0.byteValue());
      assertEquals(0.0F, catalogLight0.getDepth(), 0.01F);
      assertFalse(catalogLight0.isResizable());
      assertFalse(catalogLight0.isDeformable());
      assertFalse(catalogLight0.isMovable());
      assertFalse(catalogLight0.isBackFaceShown());
      assertEquals("com.eteks.sweethome3d.tools.URLContent", catalogLight0.getName());
      assertEquals("com.eteks.sweethome3d.tools.URLContent", catalogLight0.getCurrency());
      assertEquals("", catalogLight0.getStaircaseCutOutShape());
      assertEquals((-1499.0F), catalogLight0.getGrade(), 0.01F);
      assertFalse(catalogLight0.isTexturable());
      assertNull(catalogLight0.getColor());
      assertEquals("", catalogLight0.getId());
      assertEquals((-5175L), (long)catalogLight0.getCreationDate());
      assertEquals((-1499.0F), catalogLight0.getHeight(), 0.01F);
      assertEquals("", catalogLight0.getInformation());
      assertEquals("", catalogLight0.getDescription());
      assertEquals(0.0F, catalogLight0.getElevation(), 0.01F);
      assertNull(catalogLight0.getCreator());
      assertFalse(catalogLight0.isDoorOrWindow());
      assertTrue(catalogLight0.isProportional());
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertFalse(catalogLight0.isModifiable());
      assertEquals((-1499.0F), catalogLight0.getWidth(), 0.01F);
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      assertFalse(homeLight0.isBackFaceShown());
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertNull(homeLight0.getColor());
      assertFalse(homeLight0.isTexturable());
      assertEquals("com.eteks.sweethome3d.tools.URLContent", homeLight0.getCurrency());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertEquals("", homeLight0.getDescription());
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals((-749.5F), homeLight0.getX(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertFalse(homeLight0.isDeformable());
      assertEquals("", homeLight0.getStaircaseCutOutShape());
      assertTrue(homeLight0.isVisible());
      assertNull(homeLight0.getShininess());
      assertEquals((-1499.0F), homeLight0.getWidth(), 0.01F);
      assertFalse(homeLight0.isResizable());
      assertEquals("", homeLight0.getCatalogId());
      assertEquals("com.eteks.sweethome3d.tools.URLContent", homeLight0.getName());
      assertFalse(homeLight0.isMovable());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertFalse(homeLight0.isNameVisible());
      assertFalse(homeLight0.isModelMirrored());
      assertEquals((-1499.0F), homeLight0.getHeight(), 0.01F);
      assertEquals(0.0F, homeLight1.getAngle(), 0.01F);
      assertFalse(homeLight1.isTexturable());
      assertEquals(0.0F, homeLight1.getGroundElevation(), 0.01F);
      assertEquals("", homeLight1.getDescription());
      assertEquals(0.0F, homeLight1.getY(), 0.01F);
      assertFalse(homeLight1.isDoorOrWindow());
      assertEquals("com.eteks.sweethome3d.tools.URLContent", homeLight1.getCurrency());
      assertEquals(0.0F, homeLight1.getElevation(), 0.01F);
      assertEquals(0.5F, homeLight1.getPower(), 0.01F);
      assertEquals((-1499.0F), homeLight1.getHeight(), 0.01F);
      assertEquals("", homeLight1.getCatalogId());
      assertNull(homeLight1.getColor());
      assertFalse(homeLight1.isNameVisible());
      assertFalse(homeLight1.isBackFaceShown());
      assertFalse(homeLight1.isModelMirrored());
      assertEquals("com.eteks.sweethome3d.tools.URLContent", homeLight1.getName());
      assertEquals(0.0F, homeLight1.getNameYOffset(), 0.01F);
      assertFalse(homeLight1.isMovable());
      assertEquals(0.0F, homeLight1.getNameAngle(), 0.01F);
      assertEquals(0.0F, homeLight1.getNameXOffset(), 0.01F);
      assertEquals((-749.5F), homeLight1.getX(), 0.01F);
      assertNull(homeLight1.getShininess());
      assertEquals((-1499.0F), homeLight1.getWidth(), 0.01F);
      assertEquals(0.0F, homeLight1.getDepth(), 0.01F);
      assertFalse(homeLight1.isDeformable());
      assertFalse(homeLight1.isResizable());
      assertTrue(homeLight1.isVisible());
      assertEquals("", homeLight1.getStaircaseCutOutShape());
      
      homeLight1.setNameYOffset(381.9F);
      assertEquals(3, stringArray0.length);
      assertEquals(3, floatArray0.length);
      assertEquals(6, lightSourceArray0.length);
      assertNotSame(homeLight0, homeLight1);
      assertNotSame(homeLight1, homeLight0);
      assertFalse(homeLight0.equals((Object)homeLight1));
      assertFalse(homeLight1.equals((Object)homeLight0));
      assertEquals("ftp://ftp.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals("ftp://ftp.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals((-1), uRL0.getDefaultPort());
      assertNull(uRL0.getRef());
      assertNull(uRL0.getUserInfo());
      assertEquals("ftp.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals("ftp", uRL0.getProtocol());
      assertEquals("ftp.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getQuery());
      assertFalse(uRLContent0.isJAREntry());
      assertFalse(temporaryURLContent0.isJAREntry());
      assertEquals((short)1, bigDecimal0.shortValue());
      assertEquals((byte)1, bigDecimal0.byteValue());
      assertEquals(0.0F, catalogLight0.getDepth(), 0.01F);
      assertFalse(catalogLight0.isResizable());
      assertFalse(catalogLight0.isDeformable());
      assertFalse(catalogLight0.isMovable());
      assertFalse(catalogLight0.isBackFaceShown());
      assertEquals("com.eteks.sweethome3d.tools.URLContent", catalogLight0.getName());
      assertEquals("com.eteks.sweethome3d.tools.URLContent", catalogLight0.getCurrency());
      assertEquals("", catalogLight0.getStaircaseCutOutShape());
      assertEquals((-1499.0F), catalogLight0.getGrade(), 0.01F);
      assertFalse(catalogLight0.isTexturable());
      assertNull(catalogLight0.getColor());
      assertEquals("", catalogLight0.getId());
      assertEquals((-5175L), (long)catalogLight0.getCreationDate());
      assertEquals((-1499.0F), catalogLight0.getHeight(), 0.01F);
      assertEquals("", catalogLight0.getInformation());
      assertEquals("", catalogLight0.getDescription());
      assertEquals(0.0F, catalogLight0.getElevation(), 0.01F);
      assertNull(catalogLight0.getCreator());
      assertFalse(catalogLight0.isDoorOrWindow());
      assertTrue(catalogLight0.isProportional());
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertFalse(catalogLight0.isModifiable());
      assertEquals((-1499.0F), catalogLight0.getWidth(), 0.01F);
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      assertFalse(homeLight0.isBackFaceShown());
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertNull(homeLight0.getColor());
      assertFalse(homeLight0.isTexturable());
      assertEquals("com.eteks.sweethome3d.tools.URLContent", homeLight0.getCurrency());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertEquals("", homeLight0.getDescription());
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals((-749.5F), homeLight0.getX(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertFalse(homeLight0.isDeformable());
      assertEquals("", homeLight0.getStaircaseCutOutShape());
      assertTrue(homeLight0.isVisible());
      assertNull(homeLight0.getShininess());
      assertEquals((-1499.0F), homeLight0.getWidth(), 0.01F);
      assertFalse(homeLight0.isResizable());
      assertEquals("", homeLight0.getCatalogId());
      assertEquals("com.eteks.sweethome3d.tools.URLContent", homeLight0.getName());
      assertFalse(homeLight0.isMovable());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertFalse(homeLight0.isNameVisible());
      assertFalse(homeLight0.isModelMirrored());
      assertEquals((-1499.0F), homeLight0.getHeight(), 0.01F);
      assertEquals(0.0F, homeLight1.getAngle(), 0.01F);
      assertFalse(homeLight1.isTexturable());
      assertEquals(0.0F, homeLight1.getGroundElevation(), 0.01F);
      assertEquals("", homeLight1.getDescription());
      assertEquals(0.0F, homeLight1.getY(), 0.01F);
      assertFalse(homeLight1.isDoorOrWindow());
      assertEquals("com.eteks.sweethome3d.tools.URLContent", homeLight1.getCurrency());
      assertEquals(0.0F, homeLight1.getElevation(), 0.01F);
      assertEquals(0.5F, homeLight1.getPower(), 0.01F);
      assertEquals((-1499.0F), homeLight1.getHeight(), 0.01F);
      assertEquals("", homeLight1.getCatalogId());
      assertNull(homeLight1.getColor());
      assertFalse(homeLight1.isNameVisible());
      assertFalse(homeLight1.isBackFaceShown());
      assertFalse(homeLight1.isModelMirrored());
      assertEquals("com.eteks.sweethome3d.tools.URLContent", homeLight1.getName());
      assertEquals(381.9F, homeLight1.getNameYOffset(), 0.01F);
      assertFalse(homeLight1.isMovable());
      assertEquals(0.0F, homeLight1.getNameAngle(), 0.01F);
      assertEquals(0.0F, homeLight1.getNameXOffset(), 0.01F);
      assertEquals((-749.5F), homeLight1.getX(), 0.01F);
      assertNull(homeLight1.getShininess());
      assertEquals((-1499.0F), homeLight1.getWidth(), 0.01F);
      assertEquals(0.0F, homeLight1.getDepth(), 0.01F);
      assertFalse(homeLight1.isDeformable());
      assertFalse(homeLight1.isResizable());
      assertTrue(homeLight1.isVisible());
      assertEquals("", homeLight1.getStaircaseCutOutShape());
  }

  @Test(timeout = 4000)
  public void test184()  throws Throwable  {
      LightSource[] lightSourceArray0 = new LightSource[2];
      URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      URL uRL0 = MockURL.URL("s<7]@ykxs+ 0`a ", (String) null, (-1667), "", uRLStreamHandler0);
      assertNotNull(uRL0);
      assertNull(uRL0.getUserInfo());
      assertNull(uRL0.getHost());
      assertNull(uRL0.getQuery());
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getRef());
      assertEquals("", uRL0.getFile());
      assertEquals(0, uRL0.getDefaultPort());
      assertNull(uRL0.toString());
      assertEquals("", uRL0.getPath());
      assertEquals("s<7]@ykxs+ 0`a ", uRL0.getProtocol());
      assertNull(uRL0.toExternalForm());
      assertNull(uRL0.getAuthority());
      
      TemporaryURLContent temporaryURLContent0 = new TemporaryURLContent(uRL0);
      assertNotNull(temporaryURLContent0);
      assertNull(uRL0.getUserInfo());
      assertNull(uRL0.getHost());
      assertNull(uRL0.getQuery());
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getRef());
      assertEquals("", uRL0.getFile());
      assertEquals(0, uRL0.getDefaultPort());
      assertNull(uRL0.toString());
      assertEquals("", uRL0.getPath());
      assertEquals("s<7]@ykxs+ 0`a ", uRL0.getProtocol());
      assertNull(uRL0.toExternalForm());
      assertNull(uRL0.getAuthority());
      assertFalse(temporaryURLContent0.isJAREntry());
      
      BigDecimal bigDecimal0 = BigDecimal.TEN;
      assertNotNull(bigDecimal0);
      assertEquals((byte)10, bigDecimal0.byteValue());
      assertEquals((short)10, bigDecimal0.shortValue());
      
      CatalogLight catalogLight0 = new CatalogLight("\"<xp|JAv^\"<^Qh{/~", "s<7]@ykxs+ 0`a ", "s<7]@ykxs+ 0`a ", temporaryURLContent0, temporaryURLContent0, temporaryURLContent0, (-611.6462F), 1.7441415F, 0.5F, (-897.795F), true, lightSourceArray0, "", (float[][]) null, "P'HZa~G", true, true, true, bigDecimal0, bigDecimal0, "");
      assertEquals(2, lightSourceArray0.length);
      assertNotNull(catalogLight0);
      assertNull(uRL0.getUserInfo());
      assertNull(uRL0.getHost());
      assertNull(uRL0.getQuery());
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getRef());
      assertEquals("", uRL0.getFile());
      assertEquals(0, uRL0.getDefaultPort());
      assertNull(uRL0.toString());
      assertEquals("", uRL0.getPath());
      assertEquals("s<7]@ykxs+ 0`a ", uRL0.getProtocol());
      assertNull(uRL0.toExternalForm());
      assertNull(uRL0.getAuthority());
      assertFalse(temporaryURLContent0.isJAREntry());
      assertEquals((byte)10, bigDecimal0.byteValue());
      assertEquals((short)10, bigDecimal0.shortValue());
      assertNull(catalogLight0.getGrade());
      assertEquals("", catalogLight0.getCurrency());
      assertTrue(catalogLight0.isTexturable());
      assertFalse(catalogLight0.isDoorOrWindow());
      assertTrue(catalogLight0.isMovable());
      assertEquals("", catalogLight0.getStaircaseCutOutShape());
      assertEquals("\"<xp|JAv^\"<^Qh{/~", catalogLight0.getId());
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertTrue(catalogLight0.isProportional());
      assertTrue(catalogLight0.isResizable());
      assertEquals("s<7]@ykxs+ 0`a ", catalogLight0.getDescription());
      assertEquals(0.5F, catalogLight0.getHeight(), 0.01F);
      assertNull(catalogLight0.getCreationDate());
      assertNull(catalogLight0.getColor());
      assertFalse(catalogLight0.isModifiable());
      assertEquals("P'HZa~G", catalogLight0.getCreator());
      assertEquals((-611.6462F), catalogLight0.getWidth(), 0.01F);
      assertEquals((-897.795F), catalogLight0.getElevation(), 0.01F);
      assertFalse(catalogLight0.isBackFaceShown());
      assertNull(catalogLight0.getInformation());
      assertTrue(catalogLight0.isDeformable());
      assertEquals("s<7]@ykxs+ 0`a ", catalogLight0.getName());
      assertEquals(1.7441415F, catalogLight0.getDepth(), 0.01F);
      
      HomeLight homeLight0 = new HomeLight(catalogLight0);
      assertEquals(2, lightSourceArray0.length);
      assertNotNull(homeLight0);
      assertNull(uRL0.getUserInfo());
      assertNull(uRL0.getHost());
      assertNull(uRL0.getQuery());
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getRef());
      assertEquals("", uRL0.getFile());
      assertEquals(0, uRL0.getDefaultPort());
      assertNull(uRL0.toString());
      assertEquals("", uRL0.getPath());
      assertEquals("s<7]@ykxs+ 0`a ", uRL0.getProtocol());
      assertNull(uRL0.toExternalForm());
      assertNull(uRL0.getAuthority());
      assertFalse(temporaryURLContent0.isJAREntry());
      assertEquals((byte)10, bigDecimal0.byteValue());
      assertEquals((short)10, bigDecimal0.shortValue());
      assertNull(catalogLight0.getGrade());
      assertEquals("", catalogLight0.getCurrency());
      assertTrue(catalogLight0.isTexturable());
      assertFalse(catalogLight0.isDoorOrWindow());
      assertTrue(catalogLight0.isMovable());
      assertEquals("", catalogLight0.getStaircaseCutOutShape());
      assertEquals("\"<xp|JAv^\"<^Qh{/~", catalogLight0.getId());
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertTrue(catalogLight0.isProportional());
      assertTrue(catalogLight0.isResizable());
      assertEquals("s<7]@ykxs+ 0`a ", catalogLight0.getDescription());
      assertEquals(0.5F, catalogLight0.getHeight(), 0.01F);
      assertNull(catalogLight0.getCreationDate());
      assertNull(catalogLight0.getColor());
      assertFalse(catalogLight0.isModifiable());
      assertEquals("P'HZa~G", catalogLight0.getCreator());
      assertEquals((-611.6462F), catalogLight0.getWidth(), 0.01F);
      assertEquals((-897.795F), catalogLight0.getElevation(), 0.01F);
      assertFalse(catalogLight0.isBackFaceShown());
      assertNull(catalogLight0.getInformation());
      assertTrue(catalogLight0.isDeformable());
      assertEquals("s<7]@ykxs+ 0`a ", catalogLight0.getName());
      assertEquals(1.7441415F, catalogLight0.getDepth(), 0.01F);
      assertEquals("\"<xp|JAv^\"<^Qh{/~", homeLight0.getCatalogId());
      assertTrue(homeLight0.isMovable());
      assertTrue(homeLight0.isResizable());
      assertEquals("s<7]@ykxs+ 0`a ", homeLight0.getDescription());
      assertEquals("", homeLight0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertNull(homeLight0.getShininess());
      assertTrue(homeLight0.isVisible());
      assertEquals((-611.6462F), homeLight0.getWidth(), 0.01F);
      assertTrue(homeLight0.isDeformable());
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertFalse(homeLight0.isNameVisible());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertTrue(homeLight0.isTexturable());
      assertFalse(homeLight0.isDoorOrWindow());
      assertEquals("s<7]@ykxs+ 0`a ", homeLight0.getName());
      assertEquals((-305.8231F), homeLight0.getX(), 0.01F);
      assertEquals((-897.795F), homeLight0.getElevation(), 0.01F);
      assertFalse(homeLight0.isBackFaceShown());
      assertFalse(homeLight0.isModelMirrored());
      assertNull(homeLight0.getColor());
      assertEquals(1.7441415F, homeLight0.getDepth(), 0.01F);
      assertEquals(0.8720707F, homeLight0.getY(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertEquals(0.5F, homeLight0.getHeight(), 0.01F);
      assertEquals((-897.795F), homeLight0.getGroundElevation(), 0.01F);
      assertEquals("", homeLight0.getCurrency());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      
      HomeLight homeLight1 = homeLight0.clone();
      assertEquals(2, lightSourceArray0.length);
      assertNotNull(homeLight1);
      assertNotSame(homeLight0, homeLight1);
      assertNotSame(homeLight1, homeLight0);
      assertFalse(homeLight1.equals((Object)homeLight0));
      assertNull(uRL0.getUserInfo());
      assertNull(uRL0.getHost());
      assertNull(uRL0.getQuery());
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getRef());
      assertEquals("", uRL0.getFile());
      assertEquals(0, uRL0.getDefaultPort());
      assertNull(uRL0.toString());
      assertEquals("", uRL0.getPath());
      assertEquals("s<7]@ykxs+ 0`a ", uRL0.getProtocol());
      assertNull(uRL0.toExternalForm());
      assertNull(uRL0.getAuthority());
      assertFalse(temporaryURLContent0.isJAREntry());
      assertEquals((byte)10, bigDecimal0.byteValue());
      assertEquals((short)10, bigDecimal0.shortValue());
      assertNull(catalogLight0.getGrade());
      assertEquals("", catalogLight0.getCurrency());
      assertTrue(catalogLight0.isTexturable());
      assertFalse(catalogLight0.isDoorOrWindow());
      assertTrue(catalogLight0.isMovable());
      assertEquals("", catalogLight0.getStaircaseCutOutShape());
      assertEquals("\"<xp|JAv^\"<^Qh{/~", catalogLight0.getId());
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertTrue(catalogLight0.isProportional());
      assertTrue(catalogLight0.isResizable());
      assertEquals("s<7]@ykxs+ 0`a ", catalogLight0.getDescription());
      assertEquals(0.5F, catalogLight0.getHeight(), 0.01F);
      assertNull(catalogLight0.getCreationDate());
      assertNull(catalogLight0.getColor());
      assertFalse(catalogLight0.isModifiable());
      assertEquals("P'HZa~G", catalogLight0.getCreator());
      assertEquals((-611.6462F), catalogLight0.getWidth(), 0.01F);
      assertEquals((-897.795F), catalogLight0.getElevation(), 0.01F);
      assertFalse(catalogLight0.isBackFaceShown());
      assertNull(catalogLight0.getInformation());
      assertTrue(catalogLight0.isDeformable());
      assertEquals("s<7]@ykxs+ 0`a ", catalogLight0.getName());
      assertEquals(1.7441415F, catalogLight0.getDepth(), 0.01F);
      assertEquals("\"<xp|JAv^\"<^Qh{/~", homeLight0.getCatalogId());
      assertTrue(homeLight0.isMovable());
      assertTrue(homeLight0.isResizable());
      assertEquals("s<7]@ykxs+ 0`a ", homeLight0.getDescription());
      assertEquals("", homeLight0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertNull(homeLight0.getShininess());
      assertTrue(homeLight0.isVisible());
      assertEquals((-611.6462F), homeLight0.getWidth(), 0.01F);
      assertTrue(homeLight0.isDeformable());
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertFalse(homeLight0.isNameVisible());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertTrue(homeLight0.isTexturable());
      assertFalse(homeLight0.isDoorOrWindow());
      assertEquals("s<7]@ykxs+ 0`a ", homeLight0.getName());
      assertEquals((-305.8231F), homeLight0.getX(), 0.01F);
      assertEquals((-897.795F), homeLight0.getElevation(), 0.01F);
      assertFalse(homeLight0.isBackFaceShown());
      assertFalse(homeLight0.isModelMirrored());
      assertNull(homeLight0.getColor());
      assertEquals(1.7441415F, homeLight0.getDepth(), 0.01F);
      assertEquals(0.8720707F, homeLight0.getY(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertEquals(0.5F, homeLight0.getHeight(), 0.01F);
      assertEquals((-897.795F), homeLight0.getGroundElevation(), 0.01F);
      assertEquals("", homeLight0.getCurrency());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals(0.0F, homeLight1.getNameXOffset(), 0.01F);
      assertEquals(0.5F, homeLight1.getPower(), 0.01F);
      assertEquals(0.5F, homeLight1.getHeight(), 0.01F);
      assertEquals("s<7]@ykxs+ 0`a ", homeLight1.getDescription());
      assertEquals("", homeLight1.getStaircaseCutOutShape());
      assertEquals("\"<xp|JAv^\"<^Qh{/~", homeLight1.getCatalogId());
      assertTrue(homeLight1.isMovable());
      assertEquals((-897.795F), homeLight1.getElevation(), 0.01F);
      assertTrue(homeLight1.isResizable());
      assertTrue(homeLight1.isVisible());
      assertNull(homeLight1.getShininess());
      assertEquals(0.0F, homeLight1.getNameAngle(), 0.01F);
      assertEquals((-897.795F), homeLight1.getGroundElevation(), 0.01F);
      assertEquals(0.8720707F, homeLight1.getY(), 0.01F);
      assertEquals("", homeLight1.getCurrency());
      assertEquals(0.0F, homeLight1.getNameYOffset(), 0.01F);
      assertTrue(homeLight1.isDeformable());
      assertFalse(homeLight1.isNameVisible());
      assertNull(homeLight1.getColor());
      assertFalse(homeLight1.isDoorOrWindow());
      assertEquals("s<7]@ykxs+ 0`a ", homeLight1.getName());
      assertEquals((-305.8231F), homeLight1.getX(), 0.01F);
      assertEquals(0.0F, homeLight1.getAngle(), 0.01F);
      assertEquals(1.7441415F, homeLight1.getDepth(), 0.01F);
      assertTrue(homeLight1.isTexturable());
      assertEquals((-611.6462F), homeLight1.getWidth(), 0.01F);
      assertFalse(homeLight1.isBackFaceShown());
      assertFalse(homeLight1.isModelMirrored());
      
      boolean boolean0 = homeLight1.isTopLeftPointAt(0.5F, (-1667), 951.24F);
      assertEquals(2, lightSourceArray0.length);
      assertNotSame(homeLight0, homeLight1);
      assertNotSame(homeLight1, homeLight0);
      assertFalse(homeLight0.equals((Object)homeLight1));
      assertFalse(homeLight1.equals((Object)homeLight0));
      assertFalse(boolean0);
      assertNull(uRL0.getUserInfo());
      assertNull(uRL0.getHost());
      assertNull(uRL0.getQuery());
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getRef());
      assertEquals("", uRL0.getFile());
      assertEquals(0, uRL0.getDefaultPort());
      assertNull(uRL0.toString());
      assertEquals("", uRL0.getPath());
      assertEquals("s<7]@ykxs+ 0`a ", uRL0.getProtocol());
      assertNull(uRL0.toExternalForm());
      assertNull(uRL0.getAuthority());
      assertFalse(temporaryURLContent0.isJAREntry());
      assertEquals((byte)10, bigDecimal0.byteValue());
      assertEquals((short)10, bigDecimal0.shortValue());
      assertNull(catalogLight0.getGrade());
      assertEquals("", catalogLight0.getCurrency());
      assertTrue(catalogLight0.isTexturable());
      assertFalse(catalogLight0.isDoorOrWindow());
      assertTrue(catalogLight0.isMovable());
      assertEquals("", catalogLight0.getStaircaseCutOutShape());
      assertEquals("\"<xp|JAv^\"<^Qh{/~", catalogLight0.getId());
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertTrue(catalogLight0.isProportional());
      assertTrue(catalogLight0.isResizable());
      assertEquals("s<7]@ykxs+ 0`a ", catalogLight0.getDescription());
      assertEquals(0.5F, catalogLight0.getHeight(), 0.01F);
      assertNull(catalogLight0.getCreationDate());
      assertNull(catalogLight0.getColor());
      assertFalse(catalogLight0.isModifiable());
      assertEquals("P'HZa~G", catalogLight0.getCreator());
      assertEquals((-611.6462F), catalogLight0.getWidth(), 0.01F);
      assertEquals((-897.795F), catalogLight0.getElevation(), 0.01F);
      assertFalse(catalogLight0.isBackFaceShown());
      assertNull(catalogLight0.getInformation());
      assertTrue(catalogLight0.isDeformable());
      assertEquals("s<7]@ykxs+ 0`a ", catalogLight0.getName());
      assertEquals(1.7441415F, catalogLight0.getDepth(), 0.01F);
      assertEquals("\"<xp|JAv^\"<^Qh{/~", homeLight0.getCatalogId());
      assertTrue(homeLight0.isMovable());
      assertTrue(homeLight0.isResizable());
      assertEquals("s<7]@ykxs+ 0`a ", homeLight0.getDescription());
      assertEquals("", homeLight0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertNull(homeLight0.getShininess());
      assertTrue(homeLight0.isVisible());
      assertEquals((-611.6462F), homeLight0.getWidth(), 0.01F);
      assertTrue(homeLight0.isDeformable());
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertFalse(homeLight0.isNameVisible());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertTrue(homeLight0.isTexturable());
      assertFalse(homeLight0.isDoorOrWindow());
      assertEquals("s<7]@ykxs+ 0`a ", homeLight0.getName());
      assertEquals((-305.8231F), homeLight0.getX(), 0.01F);
      assertEquals((-897.795F), homeLight0.getElevation(), 0.01F);
      assertFalse(homeLight0.isBackFaceShown());
      assertFalse(homeLight0.isModelMirrored());
      assertNull(homeLight0.getColor());
      assertEquals(1.7441415F, homeLight0.getDepth(), 0.01F);
      assertEquals(0.8720707F, homeLight0.getY(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertEquals(0.5F, homeLight0.getHeight(), 0.01F);
      assertEquals((-897.795F), homeLight0.getGroundElevation(), 0.01F);
      assertEquals("", homeLight0.getCurrency());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals(0.0F, homeLight1.getNameXOffset(), 0.01F);
      assertEquals(0.5F, homeLight1.getPower(), 0.01F);
      assertEquals(0.5F, homeLight1.getHeight(), 0.01F);
      assertEquals("s<7]@ykxs+ 0`a ", homeLight1.getDescription());
      assertEquals("", homeLight1.getStaircaseCutOutShape());
      assertEquals("\"<xp|JAv^\"<^Qh{/~", homeLight1.getCatalogId());
      assertTrue(homeLight1.isMovable());
      assertEquals((-897.795F), homeLight1.getElevation(), 0.01F);
      assertTrue(homeLight1.isResizable());
      assertTrue(homeLight1.isVisible());
      assertNull(homeLight1.getShininess());
      assertEquals(0.0F, homeLight1.getNameAngle(), 0.01F);
      assertEquals((-897.795F), homeLight1.getGroundElevation(), 0.01F);
      assertEquals(0.8720707F, homeLight1.getY(), 0.01F);
      assertEquals("", homeLight1.getCurrency());
      assertEquals(0.0F, homeLight1.getNameYOffset(), 0.01F);
      assertTrue(homeLight1.isDeformable());
      assertFalse(homeLight1.isNameVisible());
      assertNull(homeLight1.getColor());
      assertFalse(homeLight1.isDoorOrWindow());
      assertEquals("s<7]@ykxs+ 0`a ", homeLight1.getName());
      assertEquals((-305.8231F), homeLight1.getX(), 0.01F);
      assertEquals(0.0F, homeLight1.getAngle(), 0.01F);
      assertEquals(1.7441415F, homeLight1.getDepth(), 0.01F);
      assertTrue(homeLight1.isTexturable());
      assertEquals((-611.6462F), homeLight1.getWidth(), 0.01F);
      assertFalse(homeLight1.isBackFaceShown());
      assertFalse(homeLight1.isModelMirrored());
      
      homeLight0.setMovable(false);
      assertEquals(2, lightSourceArray0.length);
      assertNotSame(homeLight0, homeLight1);
      assertFalse(homeLight0.equals((Object)homeLight1));
      assertNull(uRL0.getUserInfo());
      assertNull(uRL0.getHost());
      assertNull(uRL0.getQuery());
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getRef());
      assertEquals("", uRL0.getFile());
      assertEquals(0, uRL0.getDefaultPort());
      assertNull(uRL0.toString());
      assertEquals("", uRL0.getPath());
      assertEquals("s<7]@ykxs+ 0`a ", uRL0.getProtocol());
      assertNull(uRL0.toExternalForm());
      assertNull(uRL0.getAuthority());
      assertFalse(temporaryURLContent0.isJAREntry());
      assertEquals((byte)10, bigDecimal0.byteValue());
      assertEquals((short)10, bigDecimal0.shortValue());
      assertNull(catalogLight0.getGrade());
      assertEquals("", catalogLight0.getCurrency());
      assertTrue(catalogLight0.isTexturable());
      assertFalse(catalogLight0.isDoorOrWindow());
      assertTrue(catalogLight0.isMovable());
      assertEquals("", catalogLight0.getStaircaseCutOutShape());
      assertEquals("\"<xp|JAv^\"<^Qh{/~", catalogLight0.getId());
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertTrue(catalogLight0.isProportional());
      assertTrue(catalogLight0.isResizable());
      assertEquals("s<7]@ykxs+ 0`a ", catalogLight0.getDescription());
      assertEquals(0.5F, catalogLight0.getHeight(), 0.01F);
      assertNull(catalogLight0.getCreationDate());
      assertNull(catalogLight0.getColor());
      assertFalse(catalogLight0.isModifiable());
      assertEquals("P'HZa~G", catalogLight0.getCreator());
      assertEquals((-611.6462F), catalogLight0.getWidth(), 0.01F);
      assertEquals((-897.795F), catalogLight0.getElevation(), 0.01F);
      assertFalse(catalogLight0.isBackFaceShown());
      assertNull(catalogLight0.getInformation());
      assertTrue(catalogLight0.isDeformable());
      assertEquals("s<7]@ykxs+ 0`a ", catalogLight0.getName());
      assertEquals(1.7441415F, catalogLight0.getDepth(), 0.01F);
      assertEquals("\"<xp|JAv^\"<^Qh{/~", homeLight0.getCatalogId());
      assertTrue(homeLight0.isResizable());
      assertEquals("s<7]@ykxs+ 0`a ", homeLight0.getDescription());
      assertEquals("", homeLight0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertNull(homeLight0.getShininess());
      assertTrue(homeLight0.isVisible());
      assertEquals((-611.6462F), homeLight0.getWidth(), 0.01F);
      assertTrue(homeLight0.isDeformable());
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertFalse(homeLight0.isNameVisible());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertTrue(homeLight0.isTexturable());
      assertFalse(homeLight0.isDoorOrWindow());
      assertEquals("s<7]@ykxs+ 0`a ", homeLight0.getName());
      assertEquals((-305.8231F), homeLight0.getX(), 0.01F);
      assertEquals((-897.795F), homeLight0.getElevation(), 0.01F);
      assertFalse(homeLight0.isBackFaceShown());
      assertFalse(homeLight0.isModelMirrored());
      assertNull(homeLight0.getColor());
      assertEquals(1.7441415F, homeLight0.getDepth(), 0.01F);
      assertEquals(0.8720707F, homeLight0.getY(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertEquals(0.5F, homeLight0.getHeight(), 0.01F);
      assertFalse(homeLight0.isMovable());
      assertEquals((-897.795F), homeLight0.getGroundElevation(), 0.01F);
      assertEquals("", homeLight0.getCurrency());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      
      float[][] floatArray0 = homeLight1.getPoints();
      assertEquals(2, lightSourceArray0.length);
      assertEquals(4, floatArray0.length);
      assertNotNull(floatArray0);
      assertNotSame(homeLight0, homeLight1);
      assertNotSame(homeLight1, homeLight0);
      assertFalse(homeLight0.equals((Object)homeLight1));
      assertFalse(homeLight1.equals((Object)homeLight0));
      assertNull(uRL0.getUserInfo());
      assertNull(uRL0.getHost());
      assertNull(uRL0.getQuery());
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getRef());
      assertEquals("", uRL0.getFile());
      assertEquals(0, uRL0.getDefaultPort());
      assertNull(uRL0.toString());
      assertEquals("", uRL0.getPath());
      assertEquals("s<7]@ykxs+ 0`a ", uRL0.getProtocol());
      assertNull(uRL0.toExternalForm());
      assertNull(uRL0.getAuthority());
      assertFalse(temporaryURLContent0.isJAREntry());
      assertEquals((byte)10, bigDecimal0.byteValue());
      assertEquals((short)10, bigDecimal0.shortValue());
      assertNull(catalogLight0.getGrade());
      assertEquals("", catalogLight0.getCurrency());
      assertTrue(catalogLight0.isTexturable());
      assertFalse(catalogLight0.isDoorOrWindow());
      assertTrue(catalogLight0.isMovable());
      assertEquals("", catalogLight0.getStaircaseCutOutShape());
      assertEquals("\"<xp|JAv^\"<^Qh{/~", catalogLight0.getId());
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertTrue(catalogLight0.isProportional());
      assertTrue(catalogLight0.isResizable());
      assertEquals("s<7]@ykxs+ 0`a ", catalogLight0.getDescription());
      assertEquals(0.5F, catalogLight0.getHeight(), 0.01F);
      assertNull(catalogLight0.getCreationDate());
      assertNull(catalogLight0.getColor());
      assertFalse(catalogLight0.isModifiable());
      assertEquals("P'HZa~G", catalogLight0.getCreator());
      assertEquals((-611.6462F), catalogLight0.getWidth(), 0.01F);
      assertEquals((-897.795F), catalogLight0.getElevation(), 0.01F);
      assertFalse(catalogLight0.isBackFaceShown());
      assertNull(catalogLight0.getInformation());
      assertTrue(catalogLight0.isDeformable());
      assertEquals("s<7]@ykxs+ 0`a ", catalogLight0.getName());
      assertEquals(1.7441415F, catalogLight0.getDepth(), 0.01F);
      assertEquals("\"<xp|JAv^\"<^Qh{/~", homeLight0.getCatalogId());
      assertTrue(homeLight0.isResizable());
      assertEquals("s<7]@ykxs+ 0`a ", homeLight0.getDescription());
      assertEquals("", homeLight0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertNull(homeLight0.getShininess());
      assertTrue(homeLight0.isVisible());
      assertEquals((-611.6462F), homeLight0.getWidth(), 0.01F);
      assertTrue(homeLight0.isDeformable());
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertFalse(homeLight0.isNameVisible());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertTrue(homeLight0.isTexturable());
      assertFalse(homeLight0.isDoorOrWindow());
      assertEquals("s<7]@ykxs+ 0`a ", homeLight0.getName());
      assertEquals((-305.8231F), homeLight0.getX(), 0.01F);
      assertEquals((-897.795F), homeLight0.getElevation(), 0.01F);
      assertFalse(homeLight0.isBackFaceShown());
      assertFalse(homeLight0.isModelMirrored());
      assertNull(homeLight0.getColor());
      assertEquals(1.7441415F, homeLight0.getDepth(), 0.01F);
      assertEquals(0.8720707F, homeLight0.getY(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertEquals(0.5F, homeLight0.getHeight(), 0.01F);
      assertFalse(homeLight0.isMovable());
      assertEquals((-897.795F), homeLight0.getGroundElevation(), 0.01F);
      assertEquals("", homeLight0.getCurrency());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals(0.0F, homeLight1.getNameXOffset(), 0.01F);
      assertEquals(0.5F, homeLight1.getPower(), 0.01F);
      assertEquals(0.5F, homeLight1.getHeight(), 0.01F);
      assertEquals("s<7]@ykxs+ 0`a ", homeLight1.getDescription());
      assertEquals("", homeLight1.getStaircaseCutOutShape());
      assertEquals("\"<xp|JAv^\"<^Qh{/~", homeLight1.getCatalogId());
      assertTrue(homeLight1.isMovable());
      assertEquals((-897.795F), homeLight1.getElevation(), 0.01F);
      assertTrue(homeLight1.isResizable());
      assertTrue(homeLight1.isVisible());
      assertNull(homeLight1.getShininess());
      assertEquals(0.0F, homeLight1.getNameAngle(), 0.01F);
      assertEquals((-897.795F), homeLight1.getGroundElevation(), 0.01F);
      assertEquals(0.8720707F, homeLight1.getY(), 0.01F);
      assertEquals("", homeLight1.getCurrency());
      assertEquals(0.0F, homeLight1.getNameYOffset(), 0.01F);
      assertTrue(homeLight1.isDeformable());
      assertFalse(homeLight1.isNameVisible());
      assertNull(homeLight1.getColor());
      assertFalse(homeLight1.isDoorOrWindow());
      assertEquals("s<7]@ykxs+ 0`a ", homeLight1.getName());
      assertEquals((-305.8231F), homeLight1.getX(), 0.01F);
      assertEquals(0.0F, homeLight1.getAngle(), 0.01F);
      assertEquals(1.7441415F, homeLight1.getDepth(), 0.01F);
      assertTrue(homeLight1.isTexturable());
      assertEquals((-611.6462F), homeLight1.getWidth(), 0.01F);
      assertFalse(homeLight1.isBackFaceShown());
      assertFalse(homeLight1.isModelMirrored());
  }

  @Test(timeout = 4000)
  public void test185()  throws Throwable  {
      Integer integer0 = new Integer(1431655765);
      assertNotNull(integer0);
      assertEquals(1431655765, (int)integer0);
      
      Light light0 = mock(Light.class, new ViolatedAssumptionAnswer());
      doReturn((LightSource[]) null).when(light0).getLightSources();
      doReturn((Integer) null).when(light0).getColor();
      doReturn((String) null).when(light0).getCurrency();
      doReturn(0.0F).when(light0).getDepth();
      doReturn((String) null).when(light0).getDescription();
      doReturn(0.0F).when(light0).getElevation();
      doReturn(0.0F).when(light0).getHeight();
      doReturn((Content) null).when(light0).getIcon();
      doReturn((Content) null).when(light0).getModel();
      doReturn((float[][]) null).when(light0).getModelRotation();
      doReturn((String) null).when(light0).getName();
      doReturn((Content) null).when(light0).getPlanIcon();
      doReturn((BigDecimal) null).when(light0).getPrice();
      doReturn((String) null).when(light0).getStaircaseCutOutShape();
      doReturn((BigDecimal) null).when(light0).getValueAddedTaxPercentage();
      doReturn(0.0F).when(light0).getWidth();
      doReturn(false).when(light0).isBackFaceShown();
      doReturn(false).when(light0).isDeformable();
      doReturn(false).when(light0).isDoorOrWindow();
      doReturn(false).when(light0).isMovable();
      doReturn(false).when(light0).isResizable();
      doReturn(false).when(light0).isTexturable();
      Sash sash0 = new Sash((byte)1, 0.0F, 0.0F, 1431655765, (-414.0F));
      assertNotNull(sash0);
      assertEquals(1.0F, sash0.getXAxis(), 0.01F);
      assertEquals((-414.0F), sash0.getEndAngle(), 0.01F);
      assertEquals(0.0F, sash0.getYAxis(), 0.01F);
      assertEquals(0.0F, sash0.getWidth(), 0.01F);
      assertEquals(1.43165581E9F, sash0.getStartAngle(), 0.01F);
      
      BigInteger bigInteger0 = BigInteger.ZERO;
      assertNotNull(bigInteger0);
      assertEquals((short)0, bigInteger0.shortValue());
      assertEquals((byte)0, bigInteger0.byteValue());
      
      BigDecimal bigDecimal0 = new BigDecimal(bigInteger0);
      assertNotNull(bigDecimal0);
      assertEquals((short)0, bigInteger0.shortValue());
      assertEquals((byte)0, bigInteger0.byteValue());
      assertEquals((short)0, bigDecimal0.shortValue());
      assertEquals((byte)0, bigDecimal0.byteValue());
      
      HomeLight homeLight0 = new HomeLight(light0);
      assertNotNull(homeLight0);
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertNull(homeLight0.getShininess());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertNull(homeLight0.getName());
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertFalse(homeLight0.isMovable());
      assertFalse(homeLight0.isResizable());
      assertNull(homeLight0.getCurrency());
      assertNull(homeLight0.getColor());
      assertNull(homeLight0.getCatalogId());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertFalse(homeLight0.isModelMirrored());
      assertFalse(homeLight0.isBackFaceShown());
      assertFalse(homeLight0.isDoorOrWindow());
      assertFalse(homeLight0.isNameVisible());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertFalse(homeLight0.isDeformable());
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertTrue(homeLight0.isVisible());
      assertNull(homeLight0.getDescription());
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertFalse(homeLight0.isTexturable());
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      
      homeLight0.setY((-1265.729F));
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertNull(homeLight0.getShininess());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertNull(homeLight0.getName());
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertFalse(homeLight0.isMovable());
      assertFalse(homeLight0.isResizable());
      assertNull(homeLight0.getCurrency());
      assertNull(homeLight0.getColor());
      assertNull(homeLight0.getCatalogId());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertFalse(homeLight0.isModelMirrored());
      assertEquals((-1265.729F), homeLight0.getY(), 0.01F);
      assertFalse(homeLight0.isBackFaceShown());
      assertFalse(homeLight0.isDoorOrWindow());
      assertFalse(homeLight0.isNameVisible());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertFalse(homeLight0.isDeformable());
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertTrue(homeLight0.isVisible());
      assertNull(homeLight0.getDescription());
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertFalse(homeLight0.isTexturable());
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      
      BigDecimal bigDecimal1 = homeLight0.getValueAddedTax();
      assertNull(bigDecimal1);
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertNull(homeLight0.getShininess());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertNull(homeLight0.getName());
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertFalse(homeLight0.isMovable());
      assertFalse(homeLight0.isResizable());
      assertNull(homeLight0.getCurrency());
      assertNull(homeLight0.getColor());
      assertNull(homeLight0.getCatalogId());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertFalse(homeLight0.isModelMirrored());
      assertEquals((-1265.729F), homeLight0.getY(), 0.01F);
      assertFalse(homeLight0.isBackFaceShown());
      assertFalse(homeLight0.isDoorOrWindow());
      assertFalse(homeLight0.isNameVisible());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertFalse(homeLight0.isDeformable());
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertTrue(homeLight0.isVisible());
      assertNull(homeLight0.getDescription());
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertFalse(homeLight0.isTexturable());
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      
      HomeLight homeLight1 = homeLight0.clone();
      assertNotNull(homeLight1);
      assertNotSame(homeLight0, homeLight1);
      assertNotSame(homeLight1, homeLight0);
      assertFalse(homeLight1.equals((Object)homeLight0));
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertNull(homeLight0.getShininess());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertNull(homeLight0.getName());
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertFalse(homeLight0.isMovable());
      assertFalse(homeLight0.isResizable());
      assertNull(homeLight0.getCurrency());
      assertNull(homeLight0.getColor());
      assertNull(homeLight0.getCatalogId());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertFalse(homeLight0.isModelMirrored());
      assertEquals((-1265.729F), homeLight0.getY(), 0.01F);
      assertFalse(homeLight0.isBackFaceShown());
      assertFalse(homeLight0.isDoorOrWindow());
      assertFalse(homeLight0.isNameVisible());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertFalse(homeLight0.isDeformable());
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertTrue(homeLight0.isVisible());
      assertNull(homeLight0.getDescription());
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertFalse(homeLight0.isTexturable());
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertNull(homeLight1.getColor());
      assertFalse(homeLight1.isModelMirrored());
      assertEquals((-1265.729F), homeLight1.getY(), 0.01F);
      assertEquals(0.0F, homeLight1.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight1.getX(), 0.01F);
      assertFalse(homeLight1.isDoorOrWindow());
      assertFalse(homeLight1.isTexturable());
      assertEquals(0.0F, homeLight1.getNameYOffset(), 0.01F);
      assertEquals(0.0F, homeLight1.getHeight(), 0.01F);
      assertTrue(homeLight1.isVisible());
      assertNull(homeLight1.getCurrency());
      assertFalse(homeLight1.isMovable());
      assertFalse(homeLight1.isResizable());
      assertEquals(0.0F, homeLight1.getDepth(), 0.01F);
      assertFalse(homeLight1.isDeformable());
      assertNull(homeLight1.getCatalogId());
      assertNull(homeLight1.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight1.getNameAngle(), 0.01F);
      assertNull(homeLight1.getShininess());
      assertEquals(0.5F, homeLight1.getPower(), 0.01F);
      assertEquals(0.0F, homeLight1.getNameXOffset(), 0.01F);
      assertNull(homeLight1.getDescription());
      assertEquals(0.0F, homeLight1.getElevation(), 0.01F);
      assertEquals(0.0F, homeLight1.getWidth(), 0.01F);
      assertEquals(0.0F, homeLight1.getAngle(), 0.01F);
      assertFalse(homeLight1.isNameVisible());
      assertFalse(homeLight1.isBackFaceShown());
      assertNull(homeLight1.getName());
      
      Level level0 = homeLight0.getLevel();
      assertNull(level0);
      assertNotSame(homeLight0, homeLight1);
      assertFalse(homeLight0.equals((Object)homeLight1));
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertNull(homeLight0.getShininess());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertNull(homeLight0.getName());
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertFalse(homeLight0.isMovable());
      assertFalse(homeLight0.isResizable());
      assertNull(homeLight0.getCurrency());
      assertNull(homeLight0.getColor());
      assertNull(homeLight0.getCatalogId());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertFalse(homeLight0.isModelMirrored());
      assertEquals((-1265.729F), homeLight0.getY(), 0.01F);
      assertFalse(homeLight0.isBackFaceShown());
      assertFalse(homeLight0.isDoorOrWindow());
      assertFalse(homeLight0.isNameVisible());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertFalse(homeLight0.isDeformable());
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertTrue(homeLight0.isVisible());
      assertNull(homeLight0.getDescription());
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertFalse(homeLight0.isTexturable());
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      
      HomeLight homeLight2 = homeLight0.clone();
      assertNotNull(homeLight2);
      assertNotSame(homeLight0, homeLight2);
      assertNotSame(homeLight0, homeLight1);
      assertNotSame(homeLight2, homeLight1);
      assertNotSame(homeLight2, homeLight0);
      assertFalse(homeLight0.equals((Object)homeLight1));
      assertFalse(homeLight2.equals((Object)homeLight1));
      assertFalse(homeLight2.equals((Object)homeLight0));
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertNull(homeLight0.getShininess());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertNull(homeLight0.getName());
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertFalse(homeLight0.isMovable());
      assertFalse(homeLight0.isResizable());
      assertNull(homeLight0.getCurrency());
      assertNull(homeLight0.getColor());
      assertNull(homeLight0.getCatalogId());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertFalse(homeLight0.isModelMirrored());
      assertEquals((-1265.729F), homeLight0.getY(), 0.01F);
      assertFalse(homeLight0.isBackFaceShown());
      assertFalse(homeLight0.isDoorOrWindow());
      assertFalse(homeLight0.isNameVisible());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertFalse(homeLight0.isDeformable());
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertTrue(homeLight0.isVisible());
      assertNull(homeLight0.getDescription());
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertFalse(homeLight0.isTexturable());
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertNull(homeLight2.getName());
      assertEquals(0.0F, homeLight2.getDepth(), 0.01F);
      assertEquals(0.0F, homeLight2.getNameAngle(), 0.01F);
      assertNull(homeLight2.getCatalogId());
      assertEquals(0.0F, homeLight2.getNameXOffset(), 0.01F);
      assertNull(homeLight2.getDescription());
      assertEquals(0.0F, homeLight2.getElevation(), 0.01F);
      assertFalse(homeLight2.isMovable());
      assertEquals(0.5F, homeLight2.getPower(), 0.01F);
      assertEquals(0.0F, homeLight2.getAngle(), 0.01F);
      assertEquals(0.0F, homeLight2.getHeight(), 0.01F);
      assertFalse(homeLight2.isBackFaceShown());
      assertFalse(homeLight2.isModelMirrored());
      assertEquals((-1265.729F), homeLight2.getY(), 0.01F);
      assertEquals(0.0F, homeLight2.getNameYOffset(), 0.01F);
      assertNull(homeLight2.getColor());
      assertFalse(homeLight2.isNameVisible());
      assertFalse(homeLight2.isDeformable());
      assertEquals(0.0F, homeLight2.getWidth(), 0.01F);
      assertFalse(homeLight2.isDoorOrWindow());
      assertNull(homeLight2.getCurrency());
      assertEquals(0.0F, homeLight2.getGroundElevation(), 0.01F);
      assertFalse(homeLight2.isResizable());
      assertEquals(0.0F, homeLight2.getX(), 0.01F);
      assertFalse(homeLight2.isTexturable());
      assertTrue(homeLight2.isVisible());
      assertNull(homeLight2.getStaircaseCutOutShape());
      assertNull(homeLight2.getShininess());
      
      homeLight0.setAngle(414.72678F);
      assertNotSame(homeLight0, homeLight2);
      assertNotSame(homeLight0, homeLight1);
      assertFalse(homeLight0.equals((Object)homeLight2));
      assertFalse(homeLight0.equals((Object)homeLight1));
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertNull(homeLight0.getShininess());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertNull(homeLight0.getName());
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertFalse(homeLight0.isMovable());
      assertFalse(homeLight0.isResizable());
      assertNull(homeLight0.getCurrency());
      assertNull(homeLight0.getColor());
      assertNull(homeLight0.getCatalogId());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertFalse(homeLight0.isModelMirrored());
      assertEquals((-1265.729F), homeLight0.getY(), 0.01F);
      assertFalse(homeLight0.isBackFaceShown());
      assertFalse(homeLight0.isDoorOrWindow());
      assertFalse(homeLight0.isNameVisible());
      assertFalse(homeLight0.isDeformable());
      assertEquals(0.03654585F, homeLight0.getAngle(), 0.01F);
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertTrue(homeLight0.isVisible());
      assertNull(homeLight0.getDescription());
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertFalse(homeLight0.isTexturable());
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      
      homeLight0.setName("zr#$Cy?Ig_QInnju>");
      assertNotSame(homeLight0, homeLight2);
      assertNotSame(homeLight0, homeLight1);
      assertFalse(homeLight0.equals((Object)homeLight2));
      assertFalse(homeLight0.equals((Object)homeLight1));
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertNull(homeLight0.getShininess());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertFalse(homeLight0.isMovable());
      assertFalse(homeLight0.isResizable());
      assertEquals("zr#$Cy?Ig_QInnju>", homeLight0.getName());
      assertNull(homeLight0.getCurrency());
      assertNull(homeLight0.getColor());
      assertNull(homeLight0.getCatalogId());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertFalse(homeLight0.isModelMirrored());
      assertEquals((-1265.729F), homeLight0.getY(), 0.01F);
      assertFalse(homeLight0.isBackFaceShown());
      assertFalse(homeLight0.isDoorOrWindow());
      assertFalse(homeLight0.isNameVisible());
      assertFalse(homeLight0.isDeformable());
      assertEquals(0.03654585F, homeLight0.getAngle(), 0.01F);
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertTrue(homeLight0.isVisible());
      assertNull(homeLight0.getDescription());
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertFalse(homeLight0.isTexturable());
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      
      Integer integer1 = Integer.valueOf(1);
      assertNotNull(integer1);
      assertFalse(integer1.equals((Object)integer0));
      assertEquals(1, (int)integer1);
      
      homeLight2.setX(5.309589F);
      assertNotSame(homeLight0, homeLight2);
      assertNotSame(homeLight0, homeLight1);
      assertNotSame(homeLight2, homeLight1);
      assertNotSame(homeLight2, homeLight0);
      assertFalse(homeLight0.equals((Object)homeLight2));
      assertFalse(homeLight0.equals((Object)homeLight1));
      assertFalse(homeLight2.equals((Object)homeLight1));
      assertFalse(homeLight2.equals((Object)homeLight0));
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertNull(homeLight0.getShininess());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertFalse(homeLight0.isMovable());
      assertFalse(homeLight0.isResizable());
      assertEquals("zr#$Cy?Ig_QInnju>", homeLight0.getName());
      assertNull(homeLight0.getCurrency());
      assertNull(homeLight0.getColor());
      assertNull(homeLight0.getCatalogId());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertFalse(homeLight0.isModelMirrored());
      assertEquals((-1265.729F), homeLight0.getY(), 0.01F);
      assertFalse(homeLight0.isBackFaceShown());
      assertFalse(homeLight0.isDoorOrWindow());
      assertFalse(homeLight0.isNameVisible());
      assertFalse(homeLight0.isDeformable());
      assertEquals(0.03654585F, homeLight0.getAngle(), 0.01F);
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertTrue(homeLight0.isVisible());
      assertNull(homeLight0.getDescription());
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertFalse(homeLight0.isTexturable());
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertNull(homeLight2.getName());
      assertEquals(0.0F, homeLight2.getDepth(), 0.01F);
      assertEquals(0.0F, homeLight2.getNameAngle(), 0.01F);
      assertNull(homeLight2.getCatalogId());
      assertEquals(0.0F, homeLight2.getNameXOffset(), 0.01F);
      assertNull(homeLight2.getDescription());
      assertEquals(0.0F, homeLight2.getElevation(), 0.01F);
      assertFalse(homeLight2.isMovable());
      assertEquals(5.309589F, homeLight2.getX(), 0.01F);
      assertEquals(0.5F, homeLight2.getPower(), 0.01F);
      assertEquals(0.0F, homeLight2.getAngle(), 0.01F);
      assertEquals(0.0F, homeLight2.getHeight(), 0.01F);
      assertFalse(homeLight2.isBackFaceShown());
      assertFalse(homeLight2.isModelMirrored());
      assertEquals((-1265.729F), homeLight2.getY(), 0.01F);
      assertEquals(0.0F, homeLight2.getNameYOffset(), 0.01F);
      assertNull(homeLight2.getColor());
      assertFalse(homeLight2.isNameVisible());
      assertFalse(homeLight2.isDeformable());
      assertEquals(0.0F, homeLight2.getWidth(), 0.01F);
      assertFalse(homeLight2.isDoorOrWindow());
      assertNull(homeLight2.getCurrency());
      assertEquals(0.0F, homeLight2.getGroundElevation(), 0.01F);
      assertFalse(homeLight2.isResizable());
      assertFalse(homeLight2.isTexturable());
      assertTrue(homeLight2.isVisible());
      assertNull(homeLight2.getStaircaseCutOutShape());
      assertNull(homeLight2.getShininess());
      
      boolean boolean0 = homeLight0.isBottomRightPointAt((byte)1, (-435.013F), (-1265.729F));
      assertNotSame(homeLight0, homeLight2);
      assertNotSame(homeLight0, homeLight1);
      assertFalse(homeLight0.equals((Object)homeLight2));
      assertFalse(homeLight0.equals((Object)homeLight1));
      assertFalse(boolean0);
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertNull(homeLight0.getShininess());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertFalse(homeLight0.isMovable());
      assertFalse(homeLight0.isResizable());
      assertEquals("zr#$Cy?Ig_QInnju>", homeLight0.getName());
      assertNull(homeLight0.getCurrency());
      assertNull(homeLight0.getColor());
      assertNull(homeLight0.getCatalogId());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertFalse(homeLight0.isModelMirrored());
      assertEquals((-1265.729F), homeLight0.getY(), 0.01F);
      assertFalse(homeLight0.isBackFaceShown());
      assertFalse(homeLight0.isDoorOrWindow());
      assertFalse(homeLight0.isNameVisible());
      assertFalse(homeLight0.isDeformable());
      assertEquals(0.03654585F, homeLight0.getAngle(), 0.01F);
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertTrue(homeLight0.isVisible());
      assertNull(homeLight0.getDescription());
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertFalse(homeLight0.isTexturable());
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      
      Integer integer2 = new Integer(1001);
      assertNotNull(integer2);
      assertFalse(integer2.equals((Object)integer0));
      assertFalse(integer2.equals((Object)integer1));
      assertEquals(1001, (int)integer2);
      
      // Undeclared exception!
      try { 
        homeLight2.setColor((Integer) null);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Piece isn't texturable
         //
         verifyException("com.eteks.sweethome3d.model.HomePieceOfFurniture", e);
      }
  }

  @Test(timeout = 4000)
  public void test186()  throws Throwable  {
      String[] stringArray0 = new String[8];
      stringArray0[0] = "";
      Float float0 = new Float((-1729.3374F));
      assertNotNull(float0);
      assertEquals((-1729.3374F), (float)float0, 0.01F);
      
      URLContent uRLContent0 = new URLContent((URL) null);
      assertNotNull(uRLContent0);
      
      Sash[] sashArray0 = new Sash[7];
      Sash sash0 = new Sash((-1.0F), (-10.917348F), (-368.692F), (-368.692F), 0.0F);
      assertNotNull(sash0);
      assertEquals((-368.692F), sash0.getWidth(), 0.01F);
      assertEquals(0.0F, sash0.getEndAngle(), 0.01F);
      assertEquals((-368.692F), sash0.getStartAngle(), 0.01F);
      assertEquals((-1.0F), sash0.getXAxis(), 0.01F);
      assertEquals((-10.917348F), sash0.getYAxis(), 0.01F);
      
      sashArray0[5] = sash0;
      Sash sash1 = new Sash((-1485.2021F), (-368.692F), 2.0F, (-10.917348F), (-1729.3374F));
      assertNotNull(sash1);
      assertFalse(sash1.equals((Object)sash0));
      assertEquals((-1485.2021F), sash1.getXAxis(), 0.01F);
      assertEquals(2.0F, sash1.getWidth(), 0.01F);
      assertEquals((-368.692F), sash1.getYAxis(), 0.01F);
      assertEquals((-10.917348F), sash1.getStartAngle(), 0.01F);
      assertEquals((-1729.3374F), sash1.getEndAngle(), 0.01F);
      
      sashArray0[6] = sash0;
      float[][] floatArray0 = new float[5][1];
      float[] floatArray1 = new float[3];
      floatArray0[0] = floatArray1;
      float[] floatArray2 = new float[3];
      assertFalse(floatArray2.equals((Object)floatArray1));
      
      floatArray2[2] = 2.0F;
      floatArray2[1] = (-1.0F);
      floatArray0[1] = floatArray2;
      floatArray0[2] = floatArray1;
      CatalogDoorOrWindow catalogDoorOrWindow0 = new CatalogDoorOrWindow("", "", "", "", stringArray0, (Long) null, float0, uRLContent0, uRLContent0, uRLContent0, (-368.692F), (-368.692F), (-368.692F), (-368.692F), true, (-368.692F), 0.0F, sashArray0, floatArray0, "", true, true, true, (BigDecimal) null, (BigDecimal) null, "");
      assertEquals(8, stringArray0.length);
      assertEquals(7, sashArray0.length);
      assertEquals(5, floatArray0.length);
      assertNotNull(catalogDoorOrWindow0);
      assertNull(catalogDoorOrWindow0.getStaircaseCutOutShape());
      assertTrue(catalogDoorOrWindow0.isResizable());
      assertEquals("", catalogDoorOrWindow0.getInformation());
      assertTrue(catalogDoorOrWindow0.isDeformable());
      assertTrue(catalogDoorOrWindow0.isMovable());
      assertEquals((-368.692F), catalogDoorOrWindow0.getHeight(), 0.01F);
      assertEquals("", catalogDoorOrWindow0.getName());
      assertEquals((-1729.3374F), catalogDoorOrWindow0.getGrade(), 0.01F);
      assertEquals(0.3926991F, catalogDoorOrWindow0.getIconYaw(), 0.01F);
      assertEquals("", catalogDoorOrWindow0.getId());
      assertEquals((-368.692F), catalogDoorOrWindow0.getWallThickness(), 0.01F);
      assertEquals("", catalogDoorOrWindow0.getDescription());
      assertEquals(0.0F, catalogDoorOrWindow0.getWallDistance(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isProportional());
      assertTrue(catalogDoorOrWindow0.isTexturable());
      assertFalse(catalogDoorOrWindow0.isBackFaceShown());
      assertNull(catalogDoorOrWindow0.getColor());
      assertFalse(catalogDoorOrWindow0.isModifiable());
      assertEquals((-368.692F), catalogDoorOrWindow0.getDepth(), 0.01F);
      assertEquals("", catalogDoorOrWindow0.getCurrency());
      assertNull(catalogDoorOrWindow0.getCreationDate());
      assertEquals((-368.692F), catalogDoorOrWindow0.getWidth(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isDoorOrWindow());
      assertEquals("", catalogDoorOrWindow0.getCreator());
      assertEquals((-368.692F), catalogDoorOrWindow0.getElevation(), 0.01F);
      
      HomeDoorOrWindow homeDoorOrWindow0 = new HomeDoorOrWindow(catalogDoorOrWindow0);
      assertEquals(8, stringArray0.length);
      assertEquals(7, sashArray0.length);
      assertEquals(5, floatArray0.length);
      assertNotNull(homeDoorOrWindow0);
      assertNull(catalogDoorOrWindow0.getStaircaseCutOutShape());
      assertTrue(catalogDoorOrWindow0.isResizable());
      assertEquals("", catalogDoorOrWindow0.getInformation());
      assertTrue(catalogDoorOrWindow0.isDeformable());
      assertTrue(catalogDoorOrWindow0.isMovable());
      assertEquals((-368.692F), catalogDoorOrWindow0.getHeight(), 0.01F);
      assertEquals("", catalogDoorOrWindow0.getName());
      assertEquals((-1729.3374F), catalogDoorOrWindow0.getGrade(), 0.01F);
      assertEquals(0.3926991F, catalogDoorOrWindow0.getIconYaw(), 0.01F);
      assertEquals("", catalogDoorOrWindow0.getId());
      assertEquals((-368.692F), catalogDoorOrWindow0.getWallThickness(), 0.01F);
      assertEquals("", catalogDoorOrWindow0.getDescription());
      assertEquals(0.0F, catalogDoorOrWindow0.getWallDistance(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isProportional());
      assertTrue(catalogDoorOrWindow0.isTexturable());
      assertFalse(catalogDoorOrWindow0.isBackFaceShown());
      assertNull(catalogDoorOrWindow0.getColor());
      assertFalse(catalogDoorOrWindow0.isModifiable());
      assertEquals((-368.692F), catalogDoorOrWindow0.getDepth(), 0.01F);
      assertEquals("", catalogDoorOrWindow0.getCurrency());
      assertNull(catalogDoorOrWindow0.getCreationDate());
      assertEquals((-368.692F), catalogDoorOrWindow0.getWidth(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isDoorOrWindow());
      assertEquals("", catalogDoorOrWindow0.getCreator());
      assertEquals((-368.692F), catalogDoorOrWindow0.getElevation(), 0.01F);
      assertFalse(homeDoorOrWindow0.isBackFaceShown());
      assertNull(homeDoorOrWindow0.getColor());
      assertFalse(homeDoorOrWindow0.isModelMirrored());
      assertEquals((-368.692F), homeDoorOrWindow0.getGroundElevation(), 0.01F);
      assertEquals((-368.692F), homeDoorOrWindow0.getWallThickness(), 0.01F);
      assertEquals((-184.346F), homeDoorOrWindow0.getX(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getNameYOffset(), 0.01F);
      assertEquals((-184.346F), homeDoorOrWindow0.getY(), 0.01F);
      assertEquals("", homeDoorOrWindow0.getCurrency());
      assertEquals((-368.692F), homeDoorOrWindow0.getElevation(), 0.01F);
      assertEquals((-368.692F), homeDoorOrWindow0.getWidth(), 0.01F);
      assertNull(homeDoorOrWindow0.getShininess());
      assertTrue(homeDoorOrWindow0.isMovable());
      assertTrue(homeDoorOrWindow0.isResizable());
      assertEquals("", homeDoorOrWindow0.getCatalogId());
      assertEquals(0.0F, homeDoorOrWindow0.getWallDistance(), 0.01F);
      assertFalse(homeDoorOrWindow0.isBoundToWall());
      assertEquals((-368.692F), homeDoorOrWindow0.getDepth(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getNameAngle(), 0.01F);
      assertTrue(homeDoorOrWindow0.isDoorOrWindow());
      assertNull(homeDoorOrWindow0.getStaircaseCutOutShape());
      assertTrue(homeDoorOrWindow0.isDeformable());
      assertTrue(homeDoorOrWindow0.isVisible());
      assertEquals(0.0F, homeDoorOrWindow0.getNameXOffset(), 0.01F);
      assertEquals("", homeDoorOrWindow0.getName());
      assertFalse(homeDoorOrWindow0.isNameVisible());
      assertEquals(0.0F, homeDoorOrWindow0.getAngle(), 0.01F);
      assertTrue(homeDoorOrWindow0.isTexturable());
      assertEquals((-368.692F), homeDoorOrWindow0.getHeight(), 0.01F);
      assertEquals("", homeDoorOrWindow0.getDescription());
      
      homeDoorOrWindow0.setShininess((Float) 0.0F);
      assertEquals(8, stringArray0.length);
      assertEquals(7, sashArray0.length);
      assertEquals(5, floatArray0.length);
      assertNull(catalogDoorOrWindow0.getStaircaseCutOutShape());
      assertTrue(catalogDoorOrWindow0.isResizable());
      assertEquals("", catalogDoorOrWindow0.getInformation());
      assertTrue(catalogDoorOrWindow0.isDeformable());
      assertTrue(catalogDoorOrWindow0.isMovable());
      assertEquals((-368.692F), catalogDoorOrWindow0.getHeight(), 0.01F);
      assertEquals("", catalogDoorOrWindow0.getName());
      assertEquals((-1729.3374F), catalogDoorOrWindow0.getGrade(), 0.01F);
      assertEquals(0.3926991F, catalogDoorOrWindow0.getIconYaw(), 0.01F);
      assertEquals("", catalogDoorOrWindow0.getId());
      assertEquals((-368.692F), catalogDoorOrWindow0.getWallThickness(), 0.01F);
      assertEquals("", catalogDoorOrWindow0.getDescription());
      assertEquals(0.0F, catalogDoorOrWindow0.getWallDistance(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isProportional());
      assertTrue(catalogDoorOrWindow0.isTexturable());
      assertFalse(catalogDoorOrWindow0.isBackFaceShown());
      assertNull(catalogDoorOrWindow0.getColor());
      assertFalse(catalogDoorOrWindow0.isModifiable());
      assertEquals((-368.692F), catalogDoorOrWindow0.getDepth(), 0.01F);
      assertEquals("", catalogDoorOrWindow0.getCurrency());
      assertNull(catalogDoorOrWindow0.getCreationDate());
      assertEquals((-368.692F), catalogDoorOrWindow0.getWidth(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isDoorOrWindow());
      assertEquals("", catalogDoorOrWindow0.getCreator());
      assertEquals((-368.692F), catalogDoorOrWindow0.getElevation(), 0.01F);
      assertFalse(homeDoorOrWindow0.isBackFaceShown());
      assertNull(homeDoorOrWindow0.getColor());
      assertFalse(homeDoorOrWindow0.isModelMirrored());
      assertEquals((-368.692F), homeDoorOrWindow0.getGroundElevation(), 0.01F);
      assertEquals((-368.692F), homeDoorOrWindow0.getWallThickness(), 0.01F);
      assertEquals((-184.346F), homeDoorOrWindow0.getX(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getNameYOffset(), 0.01F);
      assertEquals((-184.346F), homeDoorOrWindow0.getY(), 0.01F);
      assertEquals("", homeDoorOrWindow0.getCurrency());
      assertEquals((-368.692F), homeDoorOrWindow0.getElevation(), 0.01F);
      assertEquals((-368.692F), homeDoorOrWindow0.getWidth(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getShininess(), 0.01F);
      assertTrue(homeDoorOrWindow0.isMovable());
      assertTrue(homeDoorOrWindow0.isResizable());
      assertEquals("", homeDoorOrWindow0.getCatalogId());
      assertEquals(0.0F, homeDoorOrWindow0.getWallDistance(), 0.01F);
      assertFalse(homeDoorOrWindow0.isBoundToWall());
      assertEquals((-368.692F), homeDoorOrWindow0.getDepth(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getNameAngle(), 0.01F);
      assertTrue(homeDoorOrWindow0.isDoorOrWindow());
      assertNull(homeDoorOrWindow0.getStaircaseCutOutShape());
      assertTrue(homeDoorOrWindow0.isDeformable());
      assertTrue(homeDoorOrWindow0.isVisible());
      assertEquals(0.0F, homeDoorOrWindow0.getNameXOffset(), 0.01F);
      assertEquals("", homeDoorOrWindow0.getName());
      assertFalse(homeDoorOrWindow0.isNameVisible());
      assertEquals(0.0F, homeDoorOrWindow0.getAngle(), 0.01F);
      assertTrue(homeDoorOrWindow0.isTexturable());
      assertEquals((-368.692F), homeDoorOrWindow0.getHeight(), 0.01F);
      assertEquals("", homeDoorOrWindow0.getDescription());
      
      homeDoorOrWindow0.setHeight((-1.0F));
      assertEquals(8, stringArray0.length);
      assertEquals(7, sashArray0.length);
      assertEquals(5, floatArray0.length);
      assertNull(catalogDoorOrWindow0.getStaircaseCutOutShape());
      assertTrue(catalogDoorOrWindow0.isResizable());
      assertEquals("", catalogDoorOrWindow0.getInformation());
      assertTrue(catalogDoorOrWindow0.isDeformable());
      assertTrue(catalogDoorOrWindow0.isMovable());
      assertEquals((-368.692F), catalogDoorOrWindow0.getHeight(), 0.01F);
      assertEquals("", catalogDoorOrWindow0.getName());
      assertEquals((-1729.3374F), catalogDoorOrWindow0.getGrade(), 0.01F);
      assertEquals(0.3926991F, catalogDoorOrWindow0.getIconYaw(), 0.01F);
      assertEquals("", catalogDoorOrWindow0.getId());
      assertEquals((-368.692F), catalogDoorOrWindow0.getWallThickness(), 0.01F);
      assertEquals("", catalogDoorOrWindow0.getDescription());
      assertEquals(0.0F, catalogDoorOrWindow0.getWallDistance(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isProportional());
      assertTrue(catalogDoorOrWindow0.isTexturable());
      assertFalse(catalogDoorOrWindow0.isBackFaceShown());
      assertNull(catalogDoorOrWindow0.getColor());
      assertFalse(catalogDoorOrWindow0.isModifiable());
      assertEquals((-368.692F), catalogDoorOrWindow0.getDepth(), 0.01F);
      assertEquals("", catalogDoorOrWindow0.getCurrency());
      assertNull(catalogDoorOrWindow0.getCreationDate());
      assertEquals((-368.692F), catalogDoorOrWindow0.getWidth(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isDoorOrWindow());
      assertEquals("", catalogDoorOrWindow0.getCreator());
      assertEquals((-368.692F), catalogDoorOrWindow0.getElevation(), 0.01F);
      assertFalse(homeDoorOrWindow0.isBackFaceShown());
      assertNull(homeDoorOrWindow0.getColor());
      assertFalse(homeDoorOrWindow0.isModelMirrored());
      assertEquals((-368.692F), homeDoorOrWindow0.getGroundElevation(), 0.01F);
      assertEquals((-368.692F), homeDoorOrWindow0.getWallThickness(), 0.01F);
      assertEquals((-184.346F), homeDoorOrWindow0.getX(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getNameYOffset(), 0.01F);
      assertEquals((-184.346F), homeDoorOrWindow0.getY(), 0.01F);
      assertEquals((-1.0F), homeDoorOrWindow0.getHeight(), 0.01F);
      assertEquals("", homeDoorOrWindow0.getCurrency());
      assertEquals((-368.692F), homeDoorOrWindow0.getElevation(), 0.01F);
      assertEquals((-368.692F), homeDoorOrWindow0.getWidth(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getShininess(), 0.01F);
      assertTrue(homeDoorOrWindow0.isMovable());
      assertTrue(homeDoorOrWindow0.isResizable());
      assertEquals("", homeDoorOrWindow0.getCatalogId());
      assertEquals(0.0F, homeDoorOrWindow0.getWallDistance(), 0.01F);
      assertFalse(homeDoorOrWindow0.isBoundToWall());
      assertEquals((-368.692F), homeDoorOrWindow0.getDepth(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getNameAngle(), 0.01F);
      assertTrue(homeDoorOrWindow0.isDoorOrWindow());
      assertNull(homeDoorOrWindow0.getStaircaseCutOutShape());
      assertTrue(homeDoorOrWindow0.isDeformable());
      assertTrue(homeDoorOrWindow0.isVisible());
      assertEquals(0.0F, homeDoorOrWindow0.getNameXOffset(), 0.01F);
      assertEquals("", homeDoorOrWindow0.getName());
      assertFalse(homeDoorOrWindow0.isNameVisible());
      assertEquals(0.0F, homeDoorOrWindow0.getAngle(), 0.01F);
      assertTrue(homeDoorOrWindow0.isTexturable());
      assertEquals("", homeDoorOrWindow0.getDescription());
      
      BigDecimal bigDecimal0 = homeDoorOrWindow0.getPriceValueAddedTaxIncluded();
      assertEquals(8, stringArray0.length);
      assertEquals(7, sashArray0.length);
      assertEquals(5, floatArray0.length);
      assertNull(bigDecimal0);
      assertNull(catalogDoorOrWindow0.getStaircaseCutOutShape());
      assertTrue(catalogDoorOrWindow0.isResizable());
      assertEquals("", catalogDoorOrWindow0.getInformation());
      assertTrue(catalogDoorOrWindow0.isDeformable());
      assertTrue(catalogDoorOrWindow0.isMovable());
      assertEquals((-368.692F), catalogDoorOrWindow0.getHeight(), 0.01F);
      assertEquals("", catalogDoorOrWindow0.getName());
      assertEquals((-1729.3374F), catalogDoorOrWindow0.getGrade(), 0.01F);
      assertEquals(0.3926991F, catalogDoorOrWindow0.getIconYaw(), 0.01F);
      assertEquals("", catalogDoorOrWindow0.getId());
      assertEquals((-368.692F), catalogDoorOrWindow0.getWallThickness(), 0.01F);
      assertEquals("", catalogDoorOrWindow0.getDescription());
      assertEquals(0.0F, catalogDoorOrWindow0.getWallDistance(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isProportional());
      assertTrue(catalogDoorOrWindow0.isTexturable());
      assertFalse(catalogDoorOrWindow0.isBackFaceShown());
      assertNull(catalogDoorOrWindow0.getColor());
      assertFalse(catalogDoorOrWindow0.isModifiable());
      assertEquals((-368.692F), catalogDoorOrWindow0.getDepth(), 0.01F);
      assertEquals("", catalogDoorOrWindow0.getCurrency());
      assertNull(catalogDoorOrWindow0.getCreationDate());
      assertEquals((-368.692F), catalogDoorOrWindow0.getWidth(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isDoorOrWindow());
      assertEquals("", catalogDoorOrWindow0.getCreator());
      assertEquals((-368.692F), catalogDoorOrWindow0.getElevation(), 0.01F);
      assertFalse(homeDoorOrWindow0.isBackFaceShown());
      assertNull(homeDoorOrWindow0.getColor());
      assertFalse(homeDoorOrWindow0.isModelMirrored());
      assertEquals((-368.692F), homeDoorOrWindow0.getGroundElevation(), 0.01F);
      assertEquals((-368.692F), homeDoorOrWindow0.getWallThickness(), 0.01F);
      assertEquals((-184.346F), homeDoorOrWindow0.getX(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getNameYOffset(), 0.01F);
      assertEquals((-184.346F), homeDoorOrWindow0.getY(), 0.01F);
      assertEquals((-1.0F), homeDoorOrWindow0.getHeight(), 0.01F);
      assertEquals("", homeDoorOrWindow0.getCurrency());
      assertEquals((-368.692F), homeDoorOrWindow0.getElevation(), 0.01F);
      assertEquals((-368.692F), homeDoorOrWindow0.getWidth(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getShininess(), 0.01F);
      assertTrue(homeDoorOrWindow0.isMovable());
      assertTrue(homeDoorOrWindow0.isResizable());
      assertEquals("", homeDoorOrWindow0.getCatalogId());
      assertEquals(0.0F, homeDoorOrWindow0.getWallDistance(), 0.01F);
      assertFalse(homeDoorOrWindow0.isBoundToWall());
      assertEquals((-368.692F), homeDoorOrWindow0.getDepth(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getNameAngle(), 0.01F);
      assertTrue(homeDoorOrWindow0.isDoorOrWindow());
      assertNull(homeDoorOrWindow0.getStaircaseCutOutShape());
      assertTrue(homeDoorOrWindow0.isDeformable());
      assertTrue(homeDoorOrWindow0.isVisible());
      assertEquals(0.0F, homeDoorOrWindow0.getNameXOffset(), 0.01F);
      assertEquals("", homeDoorOrWindow0.getName());
      assertFalse(homeDoorOrWindow0.isNameVisible());
      assertEquals(0.0F, homeDoorOrWindow0.getAngle(), 0.01F);
      assertTrue(homeDoorOrWindow0.isTexturable());
      assertEquals("", homeDoorOrWindow0.getDescription());
      
      boolean boolean0 = homeDoorOrWindow0.isMovable();
      assertEquals(8, stringArray0.length);
      assertEquals(7, sashArray0.length);
      assertEquals(5, floatArray0.length);
      assertTrue(boolean0);
      assertNull(catalogDoorOrWindow0.getStaircaseCutOutShape());
      assertTrue(catalogDoorOrWindow0.isResizable());
      assertEquals("", catalogDoorOrWindow0.getInformation());
      assertTrue(catalogDoorOrWindow0.isDeformable());
      assertTrue(catalogDoorOrWindow0.isMovable());
      assertEquals((-368.692F), catalogDoorOrWindow0.getHeight(), 0.01F);
      assertEquals("", catalogDoorOrWindow0.getName());
      assertEquals((-1729.3374F), catalogDoorOrWindow0.getGrade(), 0.01F);
      assertEquals(0.3926991F, catalogDoorOrWindow0.getIconYaw(), 0.01F);
      assertEquals("", catalogDoorOrWindow0.getId());
      assertEquals((-368.692F), catalogDoorOrWindow0.getWallThickness(), 0.01F);
      assertEquals("", catalogDoorOrWindow0.getDescription());
      assertEquals(0.0F, catalogDoorOrWindow0.getWallDistance(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isProportional());
      assertTrue(catalogDoorOrWindow0.isTexturable());
      assertFalse(catalogDoorOrWindow0.isBackFaceShown());
      assertNull(catalogDoorOrWindow0.getColor());
      assertFalse(catalogDoorOrWindow0.isModifiable());
      assertEquals((-368.692F), catalogDoorOrWindow0.getDepth(), 0.01F);
      assertEquals("", catalogDoorOrWindow0.getCurrency());
      assertNull(catalogDoorOrWindow0.getCreationDate());
      assertEquals((-368.692F), catalogDoorOrWindow0.getWidth(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isDoorOrWindow());
      assertEquals("", catalogDoorOrWindow0.getCreator());
      assertEquals((-368.692F), catalogDoorOrWindow0.getElevation(), 0.01F);
      assertFalse(homeDoorOrWindow0.isBackFaceShown());
      assertNull(homeDoorOrWindow0.getColor());
      assertFalse(homeDoorOrWindow0.isModelMirrored());
      assertEquals((-368.692F), homeDoorOrWindow0.getGroundElevation(), 0.01F);
      assertEquals((-368.692F), homeDoorOrWindow0.getWallThickness(), 0.01F);
      assertEquals((-184.346F), homeDoorOrWindow0.getX(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getNameYOffset(), 0.01F);
      assertEquals((-184.346F), homeDoorOrWindow0.getY(), 0.01F);
      assertEquals((-1.0F), homeDoorOrWindow0.getHeight(), 0.01F);
      assertEquals("", homeDoorOrWindow0.getCurrency());
      assertEquals((-368.692F), homeDoorOrWindow0.getElevation(), 0.01F);
      assertEquals((-368.692F), homeDoorOrWindow0.getWidth(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getShininess(), 0.01F);
      assertTrue(homeDoorOrWindow0.isMovable());
      assertTrue(homeDoorOrWindow0.isResizable());
      assertEquals("", homeDoorOrWindow0.getCatalogId());
      assertEquals(0.0F, homeDoorOrWindow0.getWallDistance(), 0.01F);
      assertFalse(homeDoorOrWindow0.isBoundToWall());
      assertEquals((-368.692F), homeDoorOrWindow0.getDepth(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getNameAngle(), 0.01F);
      assertTrue(homeDoorOrWindow0.isDoorOrWindow());
      assertNull(homeDoorOrWindow0.getStaircaseCutOutShape());
      assertTrue(homeDoorOrWindow0.isDeformable());
      assertTrue(homeDoorOrWindow0.isVisible());
      assertEquals(0.0F, homeDoorOrWindow0.getNameXOffset(), 0.01F);
      assertEquals("", homeDoorOrWindow0.getName());
      assertFalse(homeDoorOrWindow0.isNameVisible());
      assertEquals(0.0F, homeDoorOrWindow0.getAngle(), 0.01F);
      assertTrue(homeDoorOrWindow0.isTexturable());
      assertEquals("", homeDoorOrWindow0.getDescription());
  }

  @Test(timeout = 4000)
  public void test187()  throws Throwable  {
      HomePieceOfFurniture.SortableProperty homePieceOfFurniture_SortableProperty0 = HomePieceOfFurniture.SortableProperty.Y;
      Comparator<HomePieceOfFurniture> comparator0 = HomePieceOfFurniture.getFurnitureComparator(homePieceOfFurniture_SortableProperty0);
      assertNotNull(comparator0);
      
      HomeLight homeLight0 = null;
      try {
        homeLight0 = new HomeLight((Light) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.eteks.sweethome3d.model.HomePieceOfFurniture", e);
      }
  }

  @Test(timeout = 4000)
  public void test188()  throws Throwable  {
      LightSource[] lightSourceArray0 = new LightSource[8];
      URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      URL uRL0 = MockURL.URL("s<7]@ykxs+ 0`a ", (String) null, (-1666), "", uRLStreamHandler0);
      assertNotNull(uRL0);
      assertNull(uRL0.toString());
      assertNull(uRL0.toExternalForm());
      assertEquals("s<7]@ykxs+ 0`a ", uRL0.getProtocol());
      assertEquals("", uRL0.getPath());
      assertNull(uRL0.getHost());
      assertNull(uRL0.getQuery());
      assertNull(uRL0.getUserInfo());
      assertNull(uRL0.getAuthority());
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getRef());
      assertEquals("", uRL0.getFile());
      assertEquals(0, uRL0.getDefaultPort());
      
      TemporaryURLContent temporaryURLContent0 = new TemporaryURLContent(uRL0);
      assertNotNull(temporaryURLContent0);
      assertNull(uRL0.toString());
      assertNull(uRL0.toExternalForm());
      assertEquals("s<7]@ykxs+ 0`a ", uRL0.getProtocol());
      assertEquals("", uRL0.getPath());
      assertNull(uRL0.getHost());
      assertNull(uRL0.getQuery());
      assertNull(uRL0.getUserInfo());
      assertNull(uRL0.getAuthority());
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getRef());
      assertEquals("", uRL0.getFile());
      assertEquals(0, uRL0.getDefaultPort());
      assertFalse(temporaryURLContent0.isJAREntry());
      
      BigDecimal bigDecimal0 = BigDecimal.TEN;
      assertNotNull(bigDecimal0);
      assertEquals((byte)10, bigDecimal0.byteValue());
      assertEquals((short)10, bigDecimal0.shortValue());
      
      CatalogLight catalogLight0 = new CatalogLight("\"<xp|JAv^\"<^Qh{/~", "s<7]@ykxs+ 0`a ", "s<7]@ykxs+ 0`a ", temporaryURLContent0, temporaryURLContent0, temporaryURLContent0, (-611.6462F), 1.7441415F, 0.5F, (-897.795F), false, lightSourceArray0, "", (float[][]) null, "P'HZa~G", false, false, false, bigDecimal0, bigDecimal0, "");
      assertEquals(8, lightSourceArray0.length);
      assertNotNull(catalogLight0);
      assertNull(uRL0.toString());
      assertNull(uRL0.toExternalForm());
      assertEquals("s<7]@ykxs+ 0`a ", uRL0.getProtocol());
      assertEquals("", uRL0.getPath());
      assertNull(uRL0.getHost());
      assertNull(uRL0.getQuery());
      assertNull(uRL0.getUserInfo());
      assertNull(uRL0.getAuthority());
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getRef());
      assertEquals("", uRL0.getFile());
      assertEquals(0, uRL0.getDefaultPort());
      assertFalse(temporaryURLContent0.isJAREntry());
      assertEquals((byte)10, bigDecimal0.byteValue());
      assertEquals((short)10, bigDecimal0.shortValue());
      assertFalse(catalogLight0.isMovable());
      assertEquals("s<7]@ykxs+ 0`a ", catalogLight0.getDescription());
      assertFalse(catalogLight0.isResizable());
      assertFalse(catalogLight0.isDeformable());
      assertEquals("P'HZa~G", catalogLight0.getCreator());
      assertEquals((-897.795F), catalogLight0.getElevation(), 0.01F);
      assertFalse(catalogLight0.isBackFaceShown());
      assertNull(catalogLight0.getCreationDate());
      assertFalse(catalogLight0.isTexturable());
      assertNull(catalogLight0.getColor());
      assertNull(catalogLight0.getInformation());
      assertEquals("", catalogLight0.getCurrency());
      assertEquals("s<7]@ykxs+ 0`a ", catalogLight0.getName());
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertEquals(1.7441415F, catalogLight0.getDepth(), 0.01F);
      assertFalse(catalogLight0.isDoorOrWindow());
      assertEquals("\"<xp|JAv^\"<^Qh{/~", catalogLight0.getId());
      assertEquals((-611.6462F), catalogLight0.getWidth(), 0.01F);
      assertFalse(catalogLight0.isModifiable());
      assertEquals("", catalogLight0.getStaircaseCutOutShape());
      assertNull(catalogLight0.getGrade());
      assertEquals(0.5F, catalogLight0.getHeight(), 0.01F);
      assertTrue(catalogLight0.isProportional());
      
      HomeLight homeLight0 = new HomeLight(catalogLight0);
      assertEquals(8, lightSourceArray0.length);
      assertNotNull(homeLight0);
      assertNull(uRL0.toString());
      assertNull(uRL0.toExternalForm());
      assertEquals("s<7]@ykxs+ 0`a ", uRL0.getProtocol());
      assertEquals("", uRL0.getPath());
      assertNull(uRL0.getHost());
      assertNull(uRL0.getQuery());
      assertNull(uRL0.getUserInfo());
      assertNull(uRL0.getAuthority());
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getRef());
      assertEquals("", uRL0.getFile());
      assertEquals(0, uRL0.getDefaultPort());
      assertFalse(temporaryURLContent0.isJAREntry());
      assertEquals((byte)10, bigDecimal0.byteValue());
      assertEquals((short)10, bigDecimal0.shortValue());
      assertFalse(catalogLight0.isMovable());
      assertEquals("s<7]@ykxs+ 0`a ", catalogLight0.getDescription());
      assertFalse(catalogLight0.isResizable());
      assertFalse(catalogLight0.isDeformable());
      assertEquals("P'HZa~G", catalogLight0.getCreator());
      assertEquals((-897.795F), catalogLight0.getElevation(), 0.01F);
      assertFalse(catalogLight0.isBackFaceShown());
      assertNull(catalogLight0.getCreationDate());
      assertFalse(catalogLight0.isTexturable());
      assertNull(catalogLight0.getColor());
      assertNull(catalogLight0.getInformation());
      assertEquals("", catalogLight0.getCurrency());
      assertEquals("s<7]@ykxs+ 0`a ", catalogLight0.getName());
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertEquals(1.7441415F, catalogLight0.getDepth(), 0.01F);
      assertFalse(catalogLight0.isDoorOrWindow());
      assertEquals("\"<xp|JAv^\"<^Qh{/~", catalogLight0.getId());
      assertEquals((-611.6462F), catalogLight0.getWidth(), 0.01F);
      assertFalse(catalogLight0.isModifiable());
      assertEquals("", catalogLight0.getStaircaseCutOutShape());
      assertNull(catalogLight0.getGrade());
      assertEquals(0.5F, catalogLight0.getHeight(), 0.01F);
      assertTrue(catalogLight0.isProportional());
      assertFalse(homeLight0.isBackFaceShown());
      assertEquals((-897.795F), homeLight0.getElevation(), 0.01F);
      assertFalse(homeLight0.isModelMirrored());
      assertFalse(homeLight0.isDoorOrWindow());
      assertNull(homeLight0.getColor());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertFalse(homeLight0.isNameVisible());
      assertFalse(homeLight0.isTexturable());
      assertEquals((-897.795F), homeLight0.getGroundElevation(), 0.01F);
      assertEquals("", homeLight0.getCurrency());
      assertEquals((-305.8231F), homeLight0.getX(), 0.01F);
      assertEquals((-611.6462F), homeLight0.getWidth(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertEquals(0.8720707F, homeLight0.getY(), 0.01F);
      assertEquals(1.7441415F, homeLight0.getDepth(), 0.01F);
      assertEquals("\"<xp|JAv^\"<^Qh{/~", homeLight0.getCatalogId());
      assertEquals("s<7]@ykxs+ 0`a ", homeLight0.getDescription());
      assertFalse(homeLight0.isMovable());
      assertEquals("s<7]@ykxs+ 0`a ", homeLight0.getName());
      assertEquals(0.5F, homeLight0.getHeight(), 0.01F);
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertTrue(homeLight0.isVisible());
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertFalse(homeLight0.isDeformable());
      assertFalse(homeLight0.isResizable());
      assertEquals("", homeLight0.getStaircaseCutOutShape());
      assertNull(homeLight0.getShininess());
      
      HomeLight homeLight1 = homeLight0.clone();
      assertEquals(8, lightSourceArray0.length);
      assertNotNull(homeLight1);
      assertNotSame(homeLight0, homeLight1);
      assertNotSame(homeLight1, homeLight0);
      assertFalse(homeLight1.equals((Object)homeLight0));
      assertNull(uRL0.toString());
      assertNull(uRL0.toExternalForm());
      assertEquals("s<7]@ykxs+ 0`a ", uRL0.getProtocol());
      assertEquals("", uRL0.getPath());
      assertNull(uRL0.getHost());
      assertNull(uRL0.getQuery());
      assertNull(uRL0.getUserInfo());
      assertNull(uRL0.getAuthority());
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getRef());
      assertEquals("", uRL0.getFile());
      assertEquals(0, uRL0.getDefaultPort());
      assertFalse(temporaryURLContent0.isJAREntry());
      assertEquals((byte)10, bigDecimal0.byteValue());
      assertEquals((short)10, bigDecimal0.shortValue());
      assertFalse(catalogLight0.isMovable());
      assertEquals("s<7]@ykxs+ 0`a ", catalogLight0.getDescription());
      assertFalse(catalogLight0.isResizable());
      assertFalse(catalogLight0.isDeformable());
      assertEquals("P'HZa~G", catalogLight0.getCreator());
      assertEquals((-897.795F), catalogLight0.getElevation(), 0.01F);
      assertFalse(catalogLight0.isBackFaceShown());
      assertNull(catalogLight0.getCreationDate());
      assertFalse(catalogLight0.isTexturable());
      assertNull(catalogLight0.getColor());
      assertNull(catalogLight0.getInformation());
      assertEquals("", catalogLight0.getCurrency());
      assertEquals("s<7]@ykxs+ 0`a ", catalogLight0.getName());
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertEquals(1.7441415F, catalogLight0.getDepth(), 0.01F);
      assertFalse(catalogLight0.isDoorOrWindow());
      assertEquals("\"<xp|JAv^\"<^Qh{/~", catalogLight0.getId());
      assertEquals((-611.6462F), catalogLight0.getWidth(), 0.01F);
      assertFalse(catalogLight0.isModifiable());
      assertEquals("", catalogLight0.getStaircaseCutOutShape());
      assertNull(catalogLight0.getGrade());
      assertEquals(0.5F, catalogLight0.getHeight(), 0.01F);
      assertTrue(catalogLight0.isProportional());
      assertFalse(homeLight0.isBackFaceShown());
      assertEquals((-897.795F), homeLight0.getElevation(), 0.01F);
      assertFalse(homeLight0.isModelMirrored());
      assertFalse(homeLight0.isDoorOrWindow());
      assertNull(homeLight0.getColor());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertFalse(homeLight0.isNameVisible());
      assertFalse(homeLight0.isTexturable());
      assertEquals((-897.795F), homeLight0.getGroundElevation(), 0.01F);
      assertEquals("", homeLight0.getCurrency());
      assertEquals((-305.8231F), homeLight0.getX(), 0.01F);
      assertEquals((-611.6462F), homeLight0.getWidth(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertEquals(0.8720707F, homeLight0.getY(), 0.01F);
      assertEquals(1.7441415F, homeLight0.getDepth(), 0.01F);
      assertEquals("\"<xp|JAv^\"<^Qh{/~", homeLight0.getCatalogId());
      assertEquals("s<7]@ykxs+ 0`a ", homeLight0.getDescription());
      assertFalse(homeLight0.isMovable());
      assertEquals("s<7]@ykxs+ 0`a ", homeLight0.getName());
      assertEquals(0.5F, homeLight0.getHeight(), 0.01F);
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertTrue(homeLight0.isVisible());
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertFalse(homeLight0.isDeformable());
      assertFalse(homeLight0.isResizable());
      assertEquals("", homeLight0.getStaircaseCutOutShape());
      assertNull(homeLight0.getShininess());
      assertEquals((-611.6462F), homeLight1.getWidth(), 0.01F);
      assertEquals(0.8720707F, homeLight1.getY(), 0.01F);
      assertTrue(homeLight1.isVisible());
      assertEquals("", homeLight1.getCurrency());
      assertFalse(homeLight1.isDeformable());
      assertNull(homeLight1.getColor());
      assertEquals(0.0F, homeLight1.getNameYOffset(), 0.01F);
      assertFalse(homeLight1.isDoorOrWindow());
      assertFalse(homeLight1.isBackFaceShown());
      assertEquals((-305.8231F), homeLight1.getX(), 0.01F);
      assertEquals("s<7]@ykxs+ 0`a ", homeLight1.getName());
      assertFalse(homeLight1.isModelMirrored());
      assertEquals(0.0F, homeLight1.getAngle(), 0.01F);
      assertFalse(homeLight1.isNameVisible());
      assertEquals(1.7441415F, homeLight1.getDepth(), 0.01F);
      assertFalse(homeLight1.isTexturable());
      assertEquals(0.0F, homeLight1.getNameXOffset(), 0.01F);
      assertNull(homeLight1.getShininess());
      assertEquals("s<7]@ykxs+ 0`a ", homeLight1.getDescription());
      assertEquals("\"<xp|JAv^\"<^Qh{/~", homeLight1.getCatalogId());
      assertEquals((-897.795F), homeLight1.getElevation(), 0.01F);
      assertFalse(homeLight1.isResizable());
      assertEquals(0.0F, homeLight1.getNameAngle(), 0.01F);
      assertEquals("", homeLight1.getStaircaseCutOutShape());
      assertEquals(0.5F, homeLight1.getPower(), 0.01F);
      assertEquals(0.5F, homeLight1.getHeight(), 0.01F);
      assertFalse(homeLight1.isMovable());
      assertEquals((-897.795F), homeLight1.getGroundElevation(), 0.01F);
      
      HomeLight homeLight2 = homeLight1.clone();
      assertEquals(8, lightSourceArray0.length);
      assertNotNull(homeLight2);
      assertNotSame(homeLight0, homeLight1);
      assertNotSame(homeLight0, homeLight2);
      assertNotSame(homeLight1, homeLight0);
      assertNotSame(homeLight1, homeLight2);
      assertNotSame(homeLight2, homeLight0);
      assertNotSame(homeLight2, homeLight1);
      assertFalse(homeLight0.equals((Object)homeLight1));
      assertFalse(homeLight1.equals((Object)homeLight0));
      assertFalse(homeLight2.equals((Object)homeLight0));
      assertFalse(homeLight2.equals((Object)homeLight1));
      assertNull(uRL0.toString());
      assertNull(uRL0.toExternalForm());
      assertEquals("s<7]@ykxs+ 0`a ", uRL0.getProtocol());
      assertEquals("", uRL0.getPath());
      assertNull(uRL0.getHost());
      assertNull(uRL0.getQuery());
      assertNull(uRL0.getUserInfo());
      assertNull(uRL0.getAuthority());
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getRef());
      assertEquals("", uRL0.getFile());
      assertEquals(0, uRL0.getDefaultPort());
      assertFalse(temporaryURLContent0.isJAREntry());
      assertEquals((byte)10, bigDecimal0.byteValue());
      assertEquals((short)10, bigDecimal0.shortValue());
      assertFalse(catalogLight0.isMovable());
      assertEquals("s<7]@ykxs+ 0`a ", catalogLight0.getDescription());
      assertFalse(catalogLight0.isResizable());
      assertFalse(catalogLight0.isDeformable());
      assertEquals("P'HZa~G", catalogLight0.getCreator());
      assertEquals((-897.795F), catalogLight0.getElevation(), 0.01F);
      assertFalse(catalogLight0.isBackFaceShown());
      assertNull(catalogLight0.getCreationDate());
      assertFalse(catalogLight0.isTexturable());
      assertNull(catalogLight0.getColor());
      assertNull(catalogLight0.getInformation());
      assertEquals("", catalogLight0.getCurrency());
      assertEquals("s<7]@ykxs+ 0`a ", catalogLight0.getName());
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertEquals(1.7441415F, catalogLight0.getDepth(), 0.01F);
      assertFalse(catalogLight0.isDoorOrWindow());
      assertEquals("\"<xp|JAv^\"<^Qh{/~", catalogLight0.getId());
      assertEquals((-611.6462F), catalogLight0.getWidth(), 0.01F);
      assertFalse(catalogLight0.isModifiable());
      assertEquals("", catalogLight0.getStaircaseCutOutShape());
      assertNull(catalogLight0.getGrade());
      assertEquals(0.5F, catalogLight0.getHeight(), 0.01F);
      assertTrue(catalogLight0.isProportional());
      assertFalse(homeLight0.isBackFaceShown());
      assertEquals((-897.795F), homeLight0.getElevation(), 0.01F);
      assertFalse(homeLight0.isModelMirrored());
      assertFalse(homeLight0.isDoorOrWindow());
      assertNull(homeLight0.getColor());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertFalse(homeLight0.isNameVisible());
      assertFalse(homeLight0.isTexturable());
      assertEquals((-897.795F), homeLight0.getGroundElevation(), 0.01F);
      assertEquals("", homeLight0.getCurrency());
      assertEquals((-305.8231F), homeLight0.getX(), 0.01F);
      assertEquals((-611.6462F), homeLight0.getWidth(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertEquals(0.8720707F, homeLight0.getY(), 0.01F);
      assertEquals(1.7441415F, homeLight0.getDepth(), 0.01F);
      assertEquals("\"<xp|JAv^\"<^Qh{/~", homeLight0.getCatalogId());
      assertEquals("s<7]@ykxs+ 0`a ", homeLight0.getDescription());
      assertFalse(homeLight0.isMovable());
      assertEquals("s<7]@ykxs+ 0`a ", homeLight0.getName());
      assertEquals(0.5F, homeLight0.getHeight(), 0.01F);
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertTrue(homeLight0.isVisible());
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertFalse(homeLight0.isDeformable());
      assertFalse(homeLight0.isResizable());
      assertEquals("", homeLight0.getStaircaseCutOutShape());
      assertNull(homeLight0.getShininess());
      assertEquals((-611.6462F), homeLight1.getWidth(), 0.01F);
      assertEquals(0.8720707F, homeLight1.getY(), 0.01F);
      assertTrue(homeLight1.isVisible());
      assertEquals("", homeLight1.getCurrency());
      assertFalse(homeLight1.isDeformable());
      assertNull(homeLight1.getColor());
      assertEquals(0.0F, homeLight1.getNameYOffset(), 0.01F);
      assertFalse(homeLight1.isDoorOrWindow());
      assertFalse(homeLight1.isBackFaceShown());
      assertEquals((-305.8231F), homeLight1.getX(), 0.01F);
      assertEquals("s<7]@ykxs+ 0`a ", homeLight1.getName());
      assertFalse(homeLight1.isModelMirrored());
      assertEquals(0.0F, homeLight1.getAngle(), 0.01F);
      assertFalse(homeLight1.isNameVisible());
      assertEquals(1.7441415F, homeLight1.getDepth(), 0.01F);
      assertFalse(homeLight1.isTexturable());
      assertEquals(0.0F, homeLight1.getNameXOffset(), 0.01F);
      assertNull(homeLight1.getShininess());
      assertEquals("s<7]@ykxs+ 0`a ", homeLight1.getDescription());
      assertEquals("\"<xp|JAv^\"<^Qh{/~", homeLight1.getCatalogId());
      assertEquals((-897.795F), homeLight1.getElevation(), 0.01F);
      assertFalse(homeLight1.isResizable());
      assertEquals(0.0F, homeLight1.getNameAngle(), 0.01F);
      assertEquals("", homeLight1.getStaircaseCutOutShape());
      assertEquals(0.5F, homeLight1.getPower(), 0.01F);
      assertEquals(0.5F, homeLight1.getHeight(), 0.01F);
      assertFalse(homeLight1.isMovable());
      assertEquals((-897.795F), homeLight1.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight2.getNameYOffset(), 0.01F);
      assertEquals(0.8720707F, homeLight2.getY(), 0.01F);
      assertEquals((-611.6462F), homeLight2.getWidth(), 0.01F);
      assertTrue(homeLight2.isVisible());
      assertEquals((-897.795F), homeLight2.getGroundElevation(), 0.01F);
      assertEquals("", homeLight2.getCurrency());
      assertFalse(homeLight2.isNameVisible());
      assertFalse(homeLight2.isResizable());
      assertFalse(homeLight2.isDeformable());
      assertEquals((-897.795F), homeLight2.getElevation(), 0.01F);
      assertFalse(homeLight2.isBackFaceShown());
      assertEquals("s<7]@ykxs+ 0`a ", homeLight2.getDescription());
      assertFalse(homeLight2.isDoorOrWindow());
      assertNull(homeLight2.getShininess());
      assertEquals((-305.8231F), homeLight2.getX(), 0.01F);
      assertFalse(homeLight2.isTexturable());
      assertEquals(0.0F, homeLight2.getAngle(), 0.01F);
      assertEquals("s<7]@ykxs+ 0`a ", homeLight2.getName());
      assertEquals(0.0F, homeLight2.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeLight2.getNameAngle(), 0.01F);
      assertEquals("", homeLight2.getStaircaseCutOutShape());
      assertEquals("\"<xp|JAv^\"<^Qh{/~", homeLight2.getCatalogId());
      assertFalse(homeLight2.isModelMirrored());
      assertFalse(homeLight2.isMovable());
      assertNull(homeLight2.getColor());
      assertEquals(1.7441415F, homeLight2.getDepth(), 0.01F);
      assertEquals(0.5F, homeLight2.getHeight(), 0.01F);
      assertEquals(0.5F, homeLight2.getPower(), 0.01F);
      
      boolean boolean0 = homeLight1.isBottomRightPointAt((-897.795F), 0.5F, 3.4028235E38F);
      assertEquals(8, lightSourceArray0.length);
      assertNotSame(homeLight0, homeLight1);
      assertNotSame(homeLight0, homeLight2);
      assertNotSame(homeLight1, homeLight0);
      assertNotSame(homeLight1, homeLight2);
      assertFalse(homeLight0.equals((Object)homeLight1));
      assertFalse(homeLight0.equals((Object)homeLight2));
      assertFalse(homeLight1.equals((Object)homeLight0));
      assertFalse(homeLight1.equals((Object)homeLight2));
      assertFalse(boolean0);
      assertNull(uRL0.toString());
      assertNull(uRL0.toExternalForm());
      assertEquals("s<7]@ykxs+ 0`a ", uRL0.getProtocol());
      assertEquals("", uRL0.getPath());
      assertNull(uRL0.getHost());
      assertNull(uRL0.getQuery());
      assertNull(uRL0.getUserInfo());
      assertNull(uRL0.getAuthority());
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getRef());
      assertEquals("", uRL0.getFile());
      assertEquals(0, uRL0.getDefaultPort());
      assertFalse(temporaryURLContent0.isJAREntry());
      assertEquals((byte)10, bigDecimal0.byteValue());
      assertEquals((short)10, bigDecimal0.shortValue());
      assertFalse(catalogLight0.isMovable());
      assertEquals("s<7]@ykxs+ 0`a ", catalogLight0.getDescription());
      assertFalse(catalogLight0.isResizable());
      assertFalse(catalogLight0.isDeformable());
      assertEquals("P'HZa~G", catalogLight0.getCreator());
      assertEquals((-897.795F), catalogLight0.getElevation(), 0.01F);
      assertFalse(catalogLight0.isBackFaceShown());
      assertNull(catalogLight0.getCreationDate());
      assertFalse(catalogLight0.isTexturable());
      assertNull(catalogLight0.getColor());
      assertNull(catalogLight0.getInformation());
      assertEquals("", catalogLight0.getCurrency());
      assertEquals("s<7]@ykxs+ 0`a ", catalogLight0.getName());
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertEquals(1.7441415F, catalogLight0.getDepth(), 0.01F);
      assertFalse(catalogLight0.isDoorOrWindow());
      assertEquals("\"<xp|JAv^\"<^Qh{/~", catalogLight0.getId());
      assertEquals((-611.6462F), catalogLight0.getWidth(), 0.01F);
      assertFalse(catalogLight0.isModifiable());
      assertEquals("", catalogLight0.getStaircaseCutOutShape());
      assertNull(catalogLight0.getGrade());
      assertEquals(0.5F, catalogLight0.getHeight(), 0.01F);
      assertTrue(catalogLight0.isProportional());
      assertFalse(homeLight0.isBackFaceShown());
      assertEquals((-897.795F), homeLight0.getElevation(), 0.01F);
      assertFalse(homeLight0.isModelMirrored());
      assertFalse(homeLight0.isDoorOrWindow());
      assertNull(homeLight0.getColor());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertFalse(homeLight0.isNameVisible());
      assertFalse(homeLight0.isTexturable());
      assertEquals((-897.795F), homeLight0.getGroundElevation(), 0.01F);
      assertEquals("", homeLight0.getCurrency());
      assertEquals((-305.8231F), homeLight0.getX(), 0.01F);
      assertEquals((-611.6462F), homeLight0.getWidth(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertEquals(0.8720707F, homeLight0.getY(), 0.01F);
      assertEquals(1.7441415F, homeLight0.getDepth(), 0.01F);
      assertEquals("\"<xp|JAv^\"<^Qh{/~", homeLight0.getCatalogId());
      assertEquals("s<7]@ykxs+ 0`a ", homeLight0.getDescription());
      assertFalse(homeLight0.isMovable());
      assertEquals("s<7]@ykxs+ 0`a ", homeLight0.getName());
      assertEquals(0.5F, homeLight0.getHeight(), 0.01F);
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertTrue(homeLight0.isVisible());
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertFalse(homeLight0.isDeformable());
      assertFalse(homeLight0.isResizable());
      assertEquals("", homeLight0.getStaircaseCutOutShape());
      assertNull(homeLight0.getShininess());
      assertEquals((-611.6462F), homeLight1.getWidth(), 0.01F);
      assertEquals(0.8720707F, homeLight1.getY(), 0.01F);
      assertTrue(homeLight1.isVisible());
      assertEquals("", homeLight1.getCurrency());
      assertFalse(homeLight1.isDeformable());
      assertNull(homeLight1.getColor());
      assertEquals(0.0F, homeLight1.getNameYOffset(), 0.01F);
      assertFalse(homeLight1.isDoorOrWindow());
      assertFalse(homeLight1.isBackFaceShown());
      assertEquals((-305.8231F), homeLight1.getX(), 0.01F);
      assertEquals("s<7]@ykxs+ 0`a ", homeLight1.getName());
      assertFalse(homeLight1.isModelMirrored());
      assertEquals(0.0F, homeLight1.getAngle(), 0.01F);
      assertFalse(homeLight1.isNameVisible());
      assertEquals(1.7441415F, homeLight1.getDepth(), 0.01F);
      assertFalse(homeLight1.isTexturable());
      assertEquals(0.0F, homeLight1.getNameXOffset(), 0.01F);
      assertNull(homeLight1.getShininess());
      assertEquals("s<7]@ykxs+ 0`a ", homeLight1.getDescription());
      assertEquals("\"<xp|JAv^\"<^Qh{/~", homeLight1.getCatalogId());
      assertEquals((-897.795F), homeLight1.getElevation(), 0.01F);
      assertFalse(homeLight1.isResizable());
      assertEquals(0.0F, homeLight1.getNameAngle(), 0.01F);
      assertEquals("", homeLight1.getStaircaseCutOutShape());
      assertEquals(0.5F, homeLight1.getPower(), 0.01F);
      assertEquals(0.5F, homeLight1.getHeight(), 0.01F);
      assertFalse(homeLight1.isMovable());
      assertEquals((-897.795F), homeLight1.getGroundElevation(), 0.01F);
      
      homeLight2.setMovable(true);
      assertEquals(8, lightSourceArray0.length);
      assertNotSame(homeLight0, homeLight1);
      assertNotSame(homeLight0, homeLight2);
      assertNotSame(homeLight1, homeLight0);
      assertNotSame(homeLight1, homeLight2);
      assertNotSame(homeLight2, homeLight0);
      assertNotSame(homeLight2, homeLight1);
      assertFalse(homeLight0.equals((Object)homeLight1));
      assertFalse(homeLight0.equals((Object)homeLight2));
      assertFalse(homeLight1.equals((Object)homeLight0));
      assertFalse(homeLight1.equals((Object)homeLight2));
      assertFalse(homeLight2.equals((Object)homeLight0));
      assertFalse(homeLight2.equals((Object)homeLight1));
      assertNull(uRL0.toString());
      assertNull(uRL0.toExternalForm());
      assertEquals("s<7]@ykxs+ 0`a ", uRL0.getProtocol());
      assertEquals("", uRL0.getPath());
      assertNull(uRL0.getHost());
      assertNull(uRL0.getQuery());
      assertNull(uRL0.getUserInfo());
      assertNull(uRL0.getAuthority());
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getRef());
      assertEquals("", uRL0.getFile());
      assertEquals(0, uRL0.getDefaultPort());
      assertFalse(temporaryURLContent0.isJAREntry());
      assertEquals((byte)10, bigDecimal0.byteValue());
      assertEquals((short)10, bigDecimal0.shortValue());
      assertFalse(catalogLight0.isMovable());
      assertEquals("s<7]@ykxs+ 0`a ", catalogLight0.getDescription());
      assertFalse(catalogLight0.isResizable());
      assertFalse(catalogLight0.isDeformable());
      assertEquals("P'HZa~G", catalogLight0.getCreator());
      assertEquals((-897.795F), catalogLight0.getElevation(), 0.01F);
      assertFalse(catalogLight0.isBackFaceShown());
      assertNull(catalogLight0.getCreationDate());
      assertFalse(catalogLight0.isTexturable());
      assertNull(catalogLight0.getColor());
      assertNull(catalogLight0.getInformation());
      assertEquals("", catalogLight0.getCurrency());
      assertEquals("s<7]@ykxs+ 0`a ", catalogLight0.getName());
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertEquals(1.7441415F, catalogLight0.getDepth(), 0.01F);
      assertFalse(catalogLight0.isDoorOrWindow());
      assertEquals("\"<xp|JAv^\"<^Qh{/~", catalogLight0.getId());
      assertEquals((-611.6462F), catalogLight0.getWidth(), 0.01F);
      assertFalse(catalogLight0.isModifiable());
      assertEquals("", catalogLight0.getStaircaseCutOutShape());
      assertNull(catalogLight0.getGrade());
      assertEquals(0.5F, catalogLight0.getHeight(), 0.01F);
      assertTrue(catalogLight0.isProportional());
      assertFalse(homeLight0.isBackFaceShown());
      assertEquals((-897.795F), homeLight0.getElevation(), 0.01F);
      assertFalse(homeLight0.isModelMirrored());
      assertFalse(homeLight0.isDoorOrWindow());
      assertNull(homeLight0.getColor());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertFalse(homeLight0.isNameVisible());
      assertFalse(homeLight0.isTexturable());
      assertEquals((-897.795F), homeLight0.getGroundElevation(), 0.01F);
      assertEquals("", homeLight0.getCurrency());
      assertEquals((-305.8231F), homeLight0.getX(), 0.01F);
      assertEquals((-611.6462F), homeLight0.getWidth(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertEquals(0.8720707F, homeLight0.getY(), 0.01F);
      assertEquals(1.7441415F, homeLight0.getDepth(), 0.01F);
      assertEquals("\"<xp|JAv^\"<^Qh{/~", homeLight0.getCatalogId());
      assertEquals("s<7]@ykxs+ 0`a ", homeLight0.getDescription());
      assertFalse(homeLight0.isMovable());
      assertEquals("s<7]@ykxs+ 0`a ", homeLight0.getName());
      assertEquals(0.5F, homeLight0.getHeight(), 0.01F);
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertTrue(homeLight0.isVisible());
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertFalse(homeLight0.isDeformable());
      assertFalse(homeLight0.isResizable());
      assertEquals("", homeLight0.getStaircaseCutOutShape());
      assertNull(homeLight0.getShininess());
      assertEquals((-611.6462F), homeLight1.getWidth(), 0.01F);
      assertEquals(0.8720707F, homeLight1.getY(), 0.01F);
      assertTrue(homeLight1.isVisible());
      assertEquals("", homeLight1.getCurrency());
      assertFalse(homeLight1.isDeformable());
      assertNull(homeLight1.getColor());
      assertEquals(0.0F, homeLight1.getNameYOffset(), 0.01F);
      assertFalse(homeLight1.isDoorOrWindow());
      assertFalse(homeLight1.isBackFaceShown());
      assertEquals((-305.8231F), homeLight1.getX(), 0.01F);
      assertEquals("s<7]@ykxs+ 0`a ", homeLight1.getName());
      assertFalse(homeLight1.isModelMirrored());
      assertEquals(0.0F, homeLight1.getAngle(), 0.01F);
      assertFalse(homeLight1.isNameVisible());
      assertEquals(1.7441415F, homeLight1.getDepth(), 0.01F);
      assertFalse(homeLight1.isTexturable());
      assertEquals(0.0F, homeLight1.getNameXOffset(), 0.01F);
      assertNull(homeLight1.getShininess());
      assertEquals("s<7]@ykxs+ 0`a ", homeLight1.getDescription());
      assertEquals("\"<xp|JAv^\"<^Qh{/~", homeLight1.getCatalogId());
      assertEquals((-897.795F), homeLight1.getElevation(), 0.01F);
      assertFalse(homeLight1.isResizable());
      assertEquals(0.0F, homeLight1.getNameAngle(), 0.01F);
      assertEquals("", homeLight1.getStaircaseCutOutShape());
      assertEquals(0.5F, homeLight1.getPower(), 0.01F);
      assertEquals(0.5F, homeLight1.getHeight(), 0.01F);
      assertFalse(homeLight1.isMovable());
      assertEquals((-897.795F), homeLight1.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight2.getNameYOffset(), 0.01F);
      assertEquals(0.8720707F, homeLight2.getY(), 0.01F);
      assertEquals((-611.6462F), homeLight2.getWidth(), 0.01F);
      assertTrue(homeLight2.isVisible());
      assertEquals((-897.795F), homeLight2.getGroundElevation(), 0.01F);
      assertEquals("", homeLight2.getCurrency());
      assertFalse(homeLight2.isNameVisible());
      assertFalse(homeLight2.isResizable());
      assertFalse(homeLight2.isDeformable());
      assertEquals((-897.795F), homeLight2.getElevation(), 0.01F);
      assertFalse(homeLight2.isBackFaceShown());
      assertEquals("s<7]@ykxs+ 0`a ", homeLight2.getDescription());
      assertFalse(homeLight2.isDoorOrWindow());
      assertNull(homeLight2.getShininess());
      assertEquals((-305.8231F), homeLight2.getX(), 0.01F);
      assertFalse(homeLight2.isTexturable());
      assertEquals(0.0F, homeLight2.getAngle(), 0.01F);
      assertEquals("s<7]@ykxs+ 0`a ", homeLight2.getName());
      assertEquals(0.0F, homeLight2.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeLight2.getNameAngle(), 0.01F);
      assertEquals("", homeLight2.getStaircaseCutOutShape());
      assertEquals("\"<xp|JAv^\"<^Qh{/~", homeLight2.getCatalogId());
      assertTrue(homeLight2.isMovable());
      assertFalse(homeLight2.isModelMirrored());
      assertNull(homeLight2.getColor());
      assertEquals(1.7441415F, homeLight2.getDepth(), 0.01F);
      assertEquals(0.5F, homeLight2.getHeight(), 0.01F);
      assertEquals(0.5F, homeLight2.getPower(), 0.01F);
      
      float[][] floatArray0 = homeLight2.getPoints();
      assertEquals(8, lightSourceArray0.length);
      assertEquals(4, floatArray0.length);
      assertNotNull(floatArray0);
      assertNotSame(homeLight0, homeLight1);
      assertNotSame(homeLight0, homeLight2);
      assertNotSame(homeLight1, homeLight0);
      assertNotSame(homeLight1, homeLight2);
      assertNotSame(homeLight2, homeLight0);
      assertNotSame(homeLight2, homeLight1);
      assertFalse(homeLight0.equals((Object)homeLight1));
      assertFalse(homeLight0.equals((Object)homeLight2));
      assertFalse(homeLight1.equals((Object)homeLight0));
      assertFalse(homeLight1.equals((Object)homeLight2));
      assertFalse(homeLight2.equals((Object)homeLight0));
      assertFalse(homeLight2.equals((Object)homeLight1));
      assertNull(uRL0.toString());
      assertNull(uRL0.toExternalForm());
      assertEquals("s<7]@ykxs+ 0`a ", uRL0.getProtocol());
      assertEquals("", uRL0.getPath());
      assertNull(uRL0.getHost());
      assertNull(uRL0.getQuery());
      assertNull(uRL0.getUserInfo());
      assertNull(uRL0.getAuthority());
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getRef());
      assertEquals("", uRL0.getFile());
      assertEquals(0, uRL0.getDefaultPort());
      assertFalse(temporaryURLContent0.isJAREntry());
      assertEquals((byte)10, bigDecimal0.byteValue());
      assertEquals((short)10, bigDecimal0.shortValue());
      assertFalse(catalogLight0.isMovable());
      assertEquals("s<7]@ykxs+ 0`a ", catalogLight0.getDescription());
      assertFalse(catalogLight0.isResizable());
      assertFalse(catalogLight0.isDeformable());
      assertEquals("P'HZa~G", catalogLight0.getCreator());
      assertEquals((-897.795F), catalogLight0.getElevation(), 0.01F);
      assertFalse(catalogLight0.isBackFaceShown());
      assertNull(catalogLight0.getCreationDate());
      assertFalse(catalogLight0.isTexturable());
      assertNull(catalogLight0.getColor());
      assertNull(catalogLight0.getInformation());
      assertEquals("", catalogLight0.getCurrency());
      assertEquals("s<7]@ykxs+ 0`a ", catalogLight0.getName());
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertEquals(1.7441415F, catalogLight0.getDepth(), 0.01F);
      assertFalse(catalogLight0.isDoorOrWindow());
      assertEquals("\"<xp|JAv^\"<^Qh{/~", catalogLight0.getId());
      assertEquals((-611.6462F), catalogLight0.getWidth(), 0.01F);
      assertFalse(catalogLight0.isModifiable());
      assertEquals("", catalogLight0.getStaircaseCutOutShape());
      assertNull(catalogLight0.getGrade());
      assertEquals(0.5F, catalogLight0.getHeight(), 0.01F);
      assertTrue(catalogLight0.isProportional());
      assertFalse(homeLight0.isBackFaceShown());
      assertEquals((-897.795F), homeLight0.getElevation(), 0.01F);
      assertFalse(homeLight0.isModelMirrored());
      assertFalse(homeLight0.isDoorOrWindow());
      assertNull(homeLight0.getColor());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertFalse(homeLight0.isNameVisible());
      assertFalse(homeLight0.isTexturable());
      assertEquals((-897.795F), homeLight0.getGroundElevation(), 0.01F);
      assertEquals("", homeLight0.getCurrency());
      assertEquals((-305.8231F), homeLight0.getX(), 0.01F);
      assertEquals((-611.6462F), homeLight0.getWidth(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertEquals(0.8720707F, homeLight0.getY(), 0.01F);
      assertEquals(1.7441415F, homeLight0.getDepth(), 0.01F);
      assertEquals("\"<xp|JAv^\"<^Qh{/~", homeLight0.getCatalogId());
      assertEquals("s<7]@ykxs+ 0`a ", homeLight0.getDescription());
      assertFalse(homeLight0.isMovable());
      assertEquals("s<7]@ykxs+ 0`a ", homeLight0.getName());
      assertEquals(0.5F, homeLight0.getHeight(), 0.01F);
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertTrue(homeLight0.isVisible());
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertFalse(homeLight0.isDeformable());
      assertFalse(homeLight0.isResizable());
      assertEquals("", homeLight0.getStaircaseCutOutShape());
      assertNull(homeLight0.getShininess());
      assertEquals((-611.6462F), homeLight1.getWidth(), 0.01F);
      assertEquals(0.8720707F, homeLight1.getY(), 0.01F);
      assertTrue(homeLight1.isVisible());
      assertEquals("", homeLight1.getCurrency());
      assertFalse(homeLight1.isDeformable());
      assertNull(homeLight1.getColor());
      assertEquals(0.0F, homeLight1.getNameYOffset(), 0.01F);
      assertFalse(homeLight1.isDoorOrWindow());
      assertFalse(homeLight1.isBackFaceShown());
      assertEquals((-305.8231F), homeLight1.getX(), 0.01F);
      assertEquals("s<7]@ykxs+ 0`a ", homeLight1.getName());
      assertFalse(homeLight1.isModelMirrored());
      assertEquals(0.0F, homeLight1.getAngle(), 0.01F);
      assertFalse(homeLight1.isNameVisible());
      assertEquals(1.7441415F, homeLight1.getDepth(), 0.01F);
      assertFalse(homeLight1.isTexturable());
      assertEquals(0.0F, homeLight1.getNameXOffset(), 0.01F);
      assertNull(homeLight1.getShininess());
      assertEquals("s<7]@ykxs+ 0`a ", homeLight1.getDescription());
      assertEquals("\"<xp|JAv^\"<^Qh{/~", homeLight1.getCatalogId());
      assertEquals((-897.795F), homeLight1.getElevation(), 0.01F);
      assertFalse(homeLight1.isResizable());
      assertEquals(0.0F, homeLight1.getNameAngle(), 0.01F);
      assertEquals("", homeLight1.getStaircaseCutOutShape());
      assertEquals(0.5F, homeLight1.getPower(), 0.01F);
      assertEquals(0.5F, homeLight1.getHeight(), 0.01F);
      assertFalse(homeLight1.isMovable());
      assertEquals((-897.795F), homeLight1.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight2.getNameYOffset(), 0.01F);
      assertEquals(0.8720707F, homeLight2.getY(), 0.01F);
      assertEquals((-611.6462F), homeLight2.getWidth(), 0.01F);
      assertTrue(homeLight2.isVisible());
      assertEquals((-897.795F), homeLight2.getGroundElevation(), 0.01F);
      assertEquals("", homeLight2.getCurrency());
      assertFalse(homeLight2.isNameVisible());
      assertFalse(homeLight2.isResizable());
      assertFalse(homeLight2.isDeformable());
      assertEquals((-897.795F), homeLight2.getElevation(), 0.01F);
      assertFalse(homeLight2.isBackFaceShown());
      assertEquals("s<7]@ykxs+ 0`a ", homeLight2.getDescription());
      assertFalse(homeLight2.isDoorOrWindow());
      assertNull(homeLight2.getShininess());
      assertEquals((-305.8231F), homeLight2.getX(), 0.01F);
      assertFalse(homeLight2.isTexturable());
      assertEquals(0.0F, homeLight2.getAngle(), 0.01F);
      assertEquals("s<7]@ykxs+ 0`a ", homeLight2.getName());
      assertEquals(0.0F, homeLight2.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeLight2.getNameAngle(), 0.01F);
      assertEquals("", homeLight2.getStaircaseCutOutShape());
      assertEquals("\"<xp|JAv^\"<^Qh{/~", homeLight2.getCatalogId());
      assertTrue(homeLight2.isMovable());
      assertFalse(homeLight2.isModelMirrored());
      assertNull(homeLight2.getColor());
      assertEquals(1.7441415F, homeLight2.getDepth(), 0.01F);
      assertEquals(0.5F, homeLight2.getHeight(), 0.01F);
      assertEquals(0.5F, homeLight2.getPower(), 0.01F);
      
      BigDecimal bigDecimal1 = homeLight1.getPriceValueAddedTaxIncluded();
      assertEquals(8, lightSourceArray0.length);
      assertNotNull(bigDecimal1);
      assertNotSame(bigDecimal0, bigDecimal1);
      assertNotSame(homeLight0, homeLight1);
      assertNotSame(homeLight0, homeLight2);
      assertNotSame(homeLight1, homeLight0);
      assertNotSame(homeLight1, homeLight2);
      assertNotSame(bigDecimal1, bigDecimal0);
      assertFalse(homeLight0.equals((Object)homeLight1));
      assertFalse(homeLight0.equals((Object)homeLight2));
      assertFalse(homeLight1.equals((Object)homeLight0));
      assertFalse(homeLight1.equals((Object)homeLight2));
      assertFalse(bigDecimal1.equals((Object)bigDecimal0));
      assertNull(uRL0.toString());
      assertNull(uRL0.toExternalForm());
      assertEquals("s<7]@ykxs+ 0`a ", uRL0.getProtocol());
      assertEquals("", uRL0.getPath());
      assertNull(uRL0.getHost());
      assertNull(uRL0.getQuery());
      assertNull(uRL0.getUserInfo());
      assertNull(uRL0.getAuthority());
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getRef());
      assertEquals("", uRL0.getFile());
      assertEquals(0, uRL0.getDefaultPort());
      assertFalse(temporaryURLContent0.isJAREntry());
      assertEquals((byte)10, bigDecimal0.byteValue());
      assertEquals((short)10, bigDecimal0.shortValue());
      assertFalse(catalogLight0.isMovable());
      assertEquals("s<7]@ykxs+ 0`a ", catalogLight0.getDescription());
      assertFalse(catalogLight0.isResizable());
      assertFalse(catalogLight0.isDeformable());
      assertEquals("P'HZa~G", catalogLight0.getCreator());
      assertEquals((-897.795F), catalogLight0.getElevation(), 0.01F);
      assertFalse(catalogLight0.isBackFaceShown());
      assertNull(catalogLight0.getCreationDate());
      assertFalse(catalogLight0.isTexturable());
      assertNull(catalogLight0.getColor());
      assertNull(catalogLight0.getInformation());
      assertEquals("", catalogLight0.getCurrency());
      assertEquals("s<7]@ykxs+ 0`a ", catalogLight0.getName());
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertEquals(1.7441415F, catalogLight0.getDepth(), 0.01F);
      assertFalse(catalogLight0.isDoorOrWindow());
      assertEquals("\"<xp|JAv^\"<^Qh{/~", catalogLight0.getId());
      assertEquals((-611.6462F), catalogLight0.getWidth(), 0.01F);
      assertFalse(catalogLight0.isModifiable());
      assertEquals("", catalogLight0.getStaircaseCutOutShape());
      assertNull(catalogLight0.getGrade());
      assertEquals(0.5F, catalogLight0.getHeight(), 0.01F);
      assertTrue(catalogLight0.isProportional());
      assertFalse(homeLight0.isBackFaceShown());
      assertEquals((-897.795F), homeLight0.getElevation(), 0.01F);
      assertFalse(homeLight0.isModelMirrored());
      assertFalse(homeLight0.isDoorOrWindow());
      assertNull(homeLight0.getColor());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertFalse(homeLight0.isNameVisible());
      assertFalse(homeLight0.isTexturable());
      assertEquals((-897.795F), homeLight0.getGroundElevation(), 0.01F);
      assertEquals("", homeLight0.getCurrency());
      assertEquals((-305.8231F), homeLight0.getX(), 0.01F);
      assertEquals((-611.6462F), homeLight0.getWidth(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertEquals(0.8720707F, homeLight0.getY(), 0.01F);
      assertEquals(1.7441415F, homeLight0.getDepth(), 0.01F);
      assertEquals("\"<xp|JAv^\"<^Qh{/~", homeLight0.getCatalogId());
      assertEquals("s<7]@ykxs+ 0`a ", homeLight0.getDescription());
      assertFalse(homeLight0.isMovable());
      assertEquals("s<7]@ykxs+ 0`a ", homeLight0.getName());
      assertEquals(0.5F, homeLight0.getHeight(), 0.01F);
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertTrue(homeLight0.isVisible());
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertFalse(homeLight0.isDeformable());
      assertFalse(homeLight0.isResizable());
      assertEquals("", homeLight0.getStaircaseCutOutShape());
      assertNull(homeLight0.getShininess());
      assertEquals((-611.6462F), homeLight1.getWidth(), 0.01F);
      assertEquals(0.8720707F, homeLight1.getY(), 0.01F);
      assertTrue(homeLight1.isVisible());
      assertEquals("", homeLight1.getCurrency());
      assertFalse(homeLight1.isDeformable());
      assertNull(homeLight1.getColor());
      assertEquals(0.0F, homeLight1.getNameYOffset(), 0.01F);
      assertFalse(homeLight1.isDoorOrWindow());
      assertFalse(homeLight1.isBackFaceShown());
      assertEquals((-305.8231F), homeLight1.getX(), 0.01F);
      assertEquals("s<7]@ykxs+ 0`a ", homeLight1.getName());
      assertFalse(homeLight1.isModelMirrored());
      assertEquals(0.0F, homeLight1.getAngle(), 0.01F);
      assertFalse(homeLight1.isNameVisible());
      assertEquals(1.7441415F, homeLight1.getDepth(), 0.01F);
      assertFalse(homeLight1.isTexturable());
      assertEquals(0.0F, homeLight1.getNameXOffset(), 0.01F);
      assertNull(homeLight1.getShininess());
      assertEquals("s<7]@ykxs+ 0`a ", homeLight1.getDescription());
      assertEquals("\"<xp|JAv^\"<^Qh{/~", homeLight1.getCatalogId());
      assertEquals((-897.795F), homeLight1.getElevation(), 0.01F);
      assertFalse(homeLight1.isResizable());
      assertEquals(0.0F, homeLight1.getNameAngle(), 0.01F);
      assertEquals("", homeLight1.getStaircaseCutOutShape());
      assertEquals(0.5F, homeLight1.getPower(), 0.01F);
      assertEquals(0.5F, homeLight1.getHeight(), 0.01F);
      assertFalse(homeLight1.isMovable());
      assertEquals((-897.795F), homeLight1.getGroundElevation(), 0.01F);
      assertEquals((short)110, bigDecimal1.shortValue());
      assertEquals((byte)110, bigDecimal1.byteValue());
  }

  @Test(timeout = 4000)
  public void test189()  throws Throwable  {
      Integer integer0 = new Integer((-1469));
      assertNotNull(integer0);
      assertEquals((-1469), (int)integer0);
      
      boolean boolean0 = FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      assertFalse(boolean0);
      
      boolean boolean1 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
      
      Light light0 = mock(Light.class, new ViolatedAssumptionAnswer());
      doReturn((LightSource[]) null).when(light0).getLightSources();
      doReturn((Integer) null).when(light0).getColor();
      doReturn((String) null).when(light0).getCurrency();
      doReturn(0.0F).when(light0).getDepth();
      doReturn((String) null).when(light0).getDescription();
      doReturn(0.0F).when(light0).getElevation();
      doReturn(0.0F).when(light0).getHeight();
      doReturn((Content) null).when(light0).getIcon();
      doReturn((Content) null).when(light0).getModel();
      doReturn((float[][]) null).when(light0).getModelRotation();
      doReturn((String) null).when(light0).getName();
      doReturn((Content) null).when(light0).getPlanIcon();
      doReturn((BigDecimal) null).when(light0).getPrice();
      doReturn((String) null).when(light0).getStaircaseCutOutShape();
      doReturn((BigDecimal) null).when(light0).getValueAddedTaxPercentage();
      doReturn(0.0F).when(light0).getWidth();
      doReturn(false).when(light0).isBackFaceShown();
      doReturn(false).when(light0).isDeformable();
      doReturn(false).when(light0).isDoorOrWindow();
      doReturn(false).when(light0).isMovable();
      doReturn(false).when(light0).isResizable();
      doReturn(false).when(light0).isTexturable();
      HomeLight homeLight0 = new HomeLight(light0);
      assertNotNull(homeLight0);
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertTrue(homeLight0.isVisible());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertFalse(homeLight0.isMovable());
      assertNull(homeLight0.getCurrency());
      assertNull(homeLight0.getShininess());
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertFalse(homeLight0.isResizable());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertFalse(homeLight0.isDeformable());
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertFalse(homeLight0.isTexturable());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertNull(homeLight0.getDescription());
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      assertFalse(homeLight0.isModelMirrored());
      assertFalse(homeLight0.isBackFaceShown());
      assertNull(homeLight0.getCatalogId());
      assertNull(homeLight0.getColor());
      assertNull(homeLight0.getName());
      assertFalse(homeLight0.isNameVisible());
      
      homeLight0.setNameVisible(false);
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertTrue(homeLight0.isVisible());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertFalse(homeLight0.isMovable());
      assertNull(homeLight0.getCurrency());
      assertNull(homeLight0.getShininess());
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertFalse(homeLight0.isResizable());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertFalse(homeLight0.isDeformable());
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertFalse(homeLight0.isTexturable());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertNull(homeLight0.getDescription());
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      assertFalse(homeLight0.isModelMirrored());
      assertFalse(homeLight0.isBackFaceShown());
      assertNull(homeLight0.getCatalogId());
      assertNull(homeLight0.getColor());
      assertNull(homeLight0.getName());
      assertFalse(homeLight0.isNameVisible());
      
      homeLight0.setElevation((-1.0F));
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertTrue(homeLight0.isVisible());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertFalse(homeLight0.isMovable());
      assertNull(homeLight0.getCurrency());
      assertNull(homeLight0.getShininess());
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertFalse(homeLight0.isResizable());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertFalse(homeLight0.isDeformable());
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals((-1.0F), homeLight0.getGroundElevation(), 0.01F);
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertFalse(homeLight0.isTexturable());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertNull(homeLight0.getDescription());
      assertEquals((-1.0F), homeLight0.getElevation(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      assertFalse(homeLight0.isModelMirrored());
      assertFalse(homeLight0.isBackFaceShown());
      assertNull(homeLight0.getCatalogId());
      assertNull(homeLight0.getColor());
      assertNull(homeLight0.getName());
      assertFalse(homeLight0.isNameVisible());
      
      int int0 = Float.floatToIntBits((byte) (-32));
      assertEquals((-1040187392), int0);
      
      HomeLight homeLight1 = homeLight0.clone();
      assertNotNull(homeLight1);
      assertNotSame(homeLight0, homeLight1);
      assertNotSame(homeLight1, homeLight0);
      assertFalse(homeLight1.equals((Object)homeLight0));
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertTrue(homeLight0.isVisible());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertFalse(homeLight0.isMovable());
      assertNull(homeLight0.getCurrency());
      assertNull(homeLight0.getShininess());
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertFalse(homeLight0.isResizable());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertFalse(homeLight0.isDeformable());
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals((-1.0F), homeLight0.getGroundElevation(), 0.01F);
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertFalse(homeLight0.isTexturable());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertNull(homeLight0.getDescription());
      assertEquals((-1.0F), homeLight0.getElevation(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      assertFalse(homeLight0.isModelMirrored());
      assertFalse(homeLight0.isBackFaceShown());
      assertNull(homeLight0.getCatalogId());
      assertNull(homeLight0.getColor());
      assertNull(homeLight0.getName());
      assertFalse(homeLight0.isNameVisible());
      assertEquals(0.0F, homeLight1.getWidth(), 0.01F);
      assertEquals(0.0F, homeLight1.getNameYOffset(), 0.01F);
      assertFalse(homeLight1.isDeformable());
      assertFalse(homeLight1.isResizable());
      assertNull(homeLight1.getShininess());
      assertTrue(homeLight1.isVisible());
      assertFalse(homeLight1.isBackFaceShown());
      assertFalse(homeLight1.isModelMirrored());
      assertFalse(homeLight1.isDoorOrWindow());
      assertEquals(0.0F, homeLight1.getX(), 0.01F);
      assertEquals(0.0F, homeLight1.getY(), 0.01F);
      assertEquals(0.0F, homeLight1.getAngle(), 0.01F);
      assertFalse(homeLight1.isNameVisible());
      assertFalse(homeLight1.isTexturable());
      assertEquals((-1.0F), homeLight1.getElevation(), 0.01F);
      assertNull(homeLight1.getDescription());
      assertEquals(0.0F, homeLight1.getNameXOffset(), 0.01F);
      assertNull(homeLight1.getName());
      assertEquals((-1.0F), homeLight1.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight1.getNameAngle(), 0.01F);
      assertNull(homeLight1.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight1.getDepth(), 0.01F);
      assertNull(homeLight1.getCatalogId());
      assertNull(homeLight1.getColor());
      assertEquals(0.5F, homeLight1.getPower(), 0.01F);
      assertNull(homeLight1.getCurrency());
      assertFalse(homeLight1.isMovable());
      assertEquals(0.0F, homeLight1.getHeight(), 0.01F);
      
      boolean boolean2 = homeLight1.isPointAt((byte)1, (-1.0F), (-1.0F));
      assertNotSame(homeLight0, homeLight1);
      assertNotSame(homeLight1, homeLight0);
      assertFalse(homeLight0.equals((Object)homeLight1));
      assertFalse(homeLight1.equals((Object)homeLight0));
      assertFalse(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      assertFalse(boolean2);
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertTrue(homeLight0.isVisible());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertFalse(homeLight0.isMovable());
      assertNull(homeLight0.getCurrency());
      assertNull(homeLight0.getShininess());
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertFalse(homeLight0.isResizable());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertFalse(homeLight0.isDeformable());
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals((-1.0F), homeLight0.getGroundElevation(), 0.01F);
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertFalse(homeLight0.isTexturable());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertNull(homeLight0.getDescription());
      assertEquals((-1.0F), homeLight0.getElevation(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      assertFalse(homeLight0.isModelMirrored());
      assertFalse(homeLight0.isBackFaceShown());
      assertNull(homeLight0.getCatalogId());
      assertNull(homeLight0.getColor());
      assertNull(homeLight0.getName());
      assertFalse(homeLight0.isNameVisible());
      assertEquals(0.0F, homeLight1.getWidth(), 0.01F);
      assertEquals(0.0F, homeLight1.getNameYOffset(), 0.01F);
      assertFalse(homeLight1.isDeformable());
      assertFalse(homeLight1.isResizable());
      assertNull(homeLight1.getShininess());
      assertTrue(homeLight1.isVisible());
      assertFalse(homeLight1.isBackFaceShown());
      assertFalse(homeLight1.isModelMirrored());
      assertFalse(homeLight1.isDoorOrWindow());
      assertEquals(0.0F, homeLight1.getX(), 0.01F);
      assertEquals(0.0F, homeLight1.getY(), 0.01F);
      assertEquals(0.0F, homeLight1.getAngle(), 0.01F);
      assertFalse(homeLight1.isNameVisible());
      assertFalse(homeLight1.isTexturable());
      assertEquals((-1.0F), homeLight1.getElevation(), 0.01F);
      assertNull(homeLight1.getDescription());
      assertEquals(0.0F, homeLight1.getNameXOffset(), 0.01F);
      assertNull(homeLight1.getName());
      assertEquals((-1.0F), homeLight1.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight1.getNameAngle(), 0.01F);
      assertNull(homeLight1.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight1.getDepth(), 0.01F);
      assertNull(homeLight1.getCatalogId());
      assertNull(homeLight1.getColor());
      assertEquals(0.5F, homeLight1.getPower(), 0.01F);
      assertNull(homeLight1.getCurrency());
      assertFalse(homeLight1.isMovable());
      assertEquals(0.0F, homeLight1.getHeight(), 0.01F);
      
      int int1 = Float.floatToIntBits((-741.9441F));
      assertFalse(int1 == int0);
      assertEquals((-1002865556), int1);
      
      BigDecimal bigDecimal0 = homeLight1.getValueAddedTax();
      assertNull(bigDecimal0);
      assertNotSame(homeLight0, homeLight1);
      assertNotSame(homeLight1, homeLight0);
      assertFalse(homeLight0.equals((Object)homeLight1));
      assertFalse(homeLight1.equals((Object)homeLight0));
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertTrue(homeLight0.isVisible());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertFalse(homeLight0.isMovable());
      assertNull(homeLight0.getCurrency());
      assertNull(homeLight0.getShininess());
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertFalse(homeLight0.isResizable());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertFalse(homeLight0.isDeformable());
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals((-1.0F), homeLight0.getGroundElevation(), 0.01F);
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertFalse(homeLight0.isTexturable());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertNull(homeLight0.getDescription());
      assertEquals((-1.0F), homeLight0.getElevation(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      assertFalse(homeLight0.isModelMirrored());
      assertFalse(homeLight0.isBackFaceShown());
      assertNull(homeLight0.getCatalogId());
      assertNull(homeLight0.getColor());
      assertNull(homeLight0.getName());
      assertFalse(homeLight0.isNameVisible());
      assertEquals(0.0F, homeLight1.getWidth(), 0.01F);
      assertEquals(0.0F, homeLight1.getNameYOffset(), 0.01F);
      assertFalse(homeLight1.isDeformable());
      assertFalse(homeLight1.isResizable());
      assertNull(homeLight1.getShininess());
      assertTrue(homeLight1.isVisible());
      assertFalse(homeLight1.isBackFaceShown());
      assertFalse(homeLight1.isModelMirrored());
      assertFalse(homeLight1.isDoorOrWindow());
      assertEquals(0.0F, homeLight1.getX(), 0.01F);
      assertEquals(0.0F, homeLight1.getY(), 0.01F);
      assertEquals(0.0F, homeLight1.getAngle(), 0.01F);
      assertFalse(homeLight1.isNameVisible());
      assertFalse(homeLight1.isTexturable());
      assertEquals((-1.0F), homeLight1.getElevation(), 0.01F);
      assertNull(homeLight1.getDescription());
      assertEquals(0.0F, homeLight1.getNameXOffset(), 0.01F);
      assertNull(homeLight1.getName());
      assertEquals((-1.0F), homeLight1.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight1.getNameAngle(), 0.01F);
      assertNull(homeLight1.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight1.getDepth(), 0.01F);
      assertNull(homeLight1.getCatalogId());
      assertNull(homeLight1.getColor());
      assertEquals(0.5F, homeLight1.getPower(), 0.01F);
      assertNull(homeLight1.getCurrency());
      assertFalse(homeLight1.isMovable());
      assertEquals(0.0F, homeLight1.getHeight(), 0.01F);
      
      Level level0 = homeLight1.getLevel();
      assertNull(level0);
      assertNotSame(homeLight0, homeLight1);
      assertNotSame(homeLight1, homeLight0);
      assertFalse(homeLight0.equals((Object)homeLight1));
      assertFalse(homeLight1.equals((Object)homeLight0));
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertTrue(homeLight0.isVisible());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertFalse(homeLight0.isMovable());
      assertNull(homeLight0.getCurrency());
      assertNull(homeLight0.getShininess());
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertFalse(homeLight0.isResizable());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertFalse(homeLight0.isDeformable());
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals((-1.0F), homeLight0.getGroundElevation(), 0.01F);
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertFalse(homeLight0.isTexturable());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertNull(homeLight0.getDescription());
      assertEquals((-1.0F), homeLight0.getElevation(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      assertFalse(homeLight0.isModelMirrored());
      assertFalse(homeLight0.isBackFaceShown());
      assertNull(homeLight0.getCatalogId());
      assertNull(homeLight0.getColor());
      assertNull(homeLight0.getName());
      assertFalse(homeLight0.isNameVisible());
      assertEquals(0.0F, homeLight1.getWidth(), 0.01F);
      assertEquals(0.0F, homeLight1.getNameYOffset(), 0.01F);
      assertFalse(homeLight1.isDeformable());
      assertFalse(homeLight1.isResizable());
      assertNull(homeLight1.getShininess());
      assertTrue(homeLight1.isVisible());
      assertFalse(homeLight1.isBackFaceShown());
      assertFalse(homeLight1.isModelMirrored());
      assertFalse(homeLight1.isDoorOrWindow());
      assertEquals(0.0F, homeLight1.getX(), 0.01F);
      assertEquals(0.0F, homeLight1.getY(), 0.01F);
      assertEquals(0.0F, homeLight1.getAngle(), 0.01F);
      assertFalse(homeLight1.isNameVisible());
      assertFalse(homeLight1.isTexturable());
      assertEquals((-1.0F), homeLight1.getElevation(), 0.01F);
      assertNull(homeLight1.getDescription());
      assertEquals(0.0F, homeLight1.getNameXOffset(), 0.01F);
      assertNull(homeLight1.getName());
      assertEquals((-1.0F), homeLight1.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight1.getNameAngle(), 0.01F);
      assertNull(homeLight1.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight1.getDepth(), 0.01F);
      assertNull(homeLight1.getCatalogId());
      assertNull(homeLight1.getColor());
      assertEquals(0.5F, homeLight1.getPower(), 0.01F);
      assertNull(homeLight1.getCurrency());
      assertFalse(homeLight1.isMovable());
      assertEquals(0.0F, homeLight1.getHeight(), 0.01F);
      
      HomeLight homeLight2 = homeLight1.clone();
      assertNotNull(homeLight2);
      assertNotSame(homeLight0, homeLight2);
      assertNotSame(homeLight0, homeLight1);
      assertNotSame(homeLight1, homeLight0);
      assertNotSame(homeLight1, homeLight2);
      assertNotSame(homeLight2, homeLight0);
      assertNotSame(homeLight2, homeLight1);
      assertFalse(homeLight0.equals((Object)homeLight1));
      assertFalse(homeLight1.equals((Object)homeLight0));
      assertFalse(homeLight2.equals((Object)homeLight0));
      assertFalse(homeLight2.equals((Object)homeLight1));
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertTrue(homeLight0.isVisible());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertFalse(homeLight0.isMovable());
      assertNull(homeLight0.getCurrency());
      assertNull(homeLight0.getShininess());
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertFalse(homeLight0.isResizable());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertFalse(homeLight0.isDeformable());
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals((-1.0F), homeLight0.getGroundElevation(), 0.01F);
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertFalse(homeLight0.isTexturable());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertNull(homeLight0.getDescription());
      assertEquals((-1.0F), homeLight0.getElevation(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      assertFalse(homeLight0.isModelMirrored());
      assertFalse(homeLight0.isBackFaceShown());
      assertNull(homeLight0.getCatalogId());
      assertNull(homeLight0.getColor());
      assertNull(homeLight0.getName());
      assertFalse(homeLight0.isNameVisible());
      assertEquals(0.0F, homeLight1.getWidth(), 0.01F);
      assertEquals(0.0F, homeLight1.getNameYOffset(), 0.01F);
      assertFalse(homeLight1.isDeformable());
      assertFalse(homeLight1.isResizable());
      assertNull(homeLight1.getShininess());
      assertTrue(homeLight1.isVisible());
      assertFalse(homeLight1.isBackFaceShown());
      assertFalse(homeLight1.isModelMirrored());
      assertFalse(homeLight1.isDoorOrWindow());
      assertEquals(0.0F, homeLight1.getX(), 0.01F);
      assertEquals(0.0F, homeLight1.getY(), 0.01F);
      assertEquals(0.0F, homeLight1.getAngle(), 0.01F);
      assertFalse(homeLight1.isNameVisible());
      assertFalse(homeLight1.isTexturable());
      assertEquals((-1.0F), homeLight1.getElevation(), 0.01F);
      assertNull(homeLight1.getDescription());
      assertEquals(0.0F, homeLight1.getNameXOffset(), 0.01F);
      assertNull(homeLight1.getName());
      assertEquals((-1.0F), homeLight1.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight1.getNameAngle(), 0.01F);
      assertNull(homeLight1.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight1.getDepth(), 0.01F);
      assertNull(homeLight1.getCatalogId());
      assertNull(homeLight1.getColor());
      assertEquals(0.5F, homeLight1.getPower(), 0.01F);
      assertNull(homeLight1.getCurrency());
      assertFalse(homeLight1.isMovable());
      assertEquals(0.0F, homeLight1.getHeight(), 0.01F);
      assertEquals(0.0F, homeLight2.getHeight(), 0.01F);
      assertFalse(homeLight2.isMovable());
      assertFalse(homeLight2.isResizable());
      assertTrue(homeLight2.isVisible());
      assertEquals(0.0F, homeLight2.getNameAngle(), 0.01F);
      assertNull(homeLight2.getShininess());
      assertNull(homeLight2.getStaircaseCutOutShape());
      assertFalse(homeLight2.isDeformable());
      assertNull(homeLight2.getColor());
      assertNull(homeLight2.getCatalogId());
      assertEquals(0.0F, homeLight2.getNameYOffset(), 0.01F);
      assertNull(homeLight2.getCurrency());
      assertEquals(0.5F, homeLight2.getPower(), 0.01F);
      assertEquals((-1.0F), homeLight2.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight2.getAngle(), 0.01F);
      assertFalse(homeLight2.isTexturable());
      assertEquals(0.0F, homeLight2.getX(), 0.01F);
      assertEquals(0.0F, homeLight2.getY(), 0.01F);
      assertFalse(homeLight2.isBackFaceShown());
      assertFalse(homeLight2.isModelMirrored());
      assertEquals(0.0F, homeLight2.getDepth(), 0.01F);
      assertNull(homeLight2.getName());
      assertFalse(homeLight2.isNameVisible());
      assertEquals(0.0F, homeLight2.getNameXOffset(), 0.01F);
      assertNull(homeLight2.getDescription());
      assertFalse(homeLight2.isDoorOrWindow());
      assertEquals((-1.0F), homeLight2.getElevation(), 0.01F);
      assertEquals(0.0F, homeLight2.getWidth(), 0.01F);
      
      boolean boolean3 = homeLight2.isTopRightPointAt((-741.9441F), (-1469), (-1.0F));
      assertNotSame(homeLight0, homeLight2);
      assertNotSame(homeLight0, homeLight1);
      assertNotSame(homeLight1, homeLight0);
      assertNotSame(homeLight1, homeLight2);
      assertNotSame(homeLight2, homeLight0);
      assertNotSame(homeLight2, homeLight1);
      assertFalse(homeLight0.equals((Object)homeLight2));
      assertFalse(homeLight0.equals((Object)homeLight1));
      assertFalse(homeLight1.equals((Object)homeLight0));
      assertFalse(homeLight1.equals((Object)homeLight2));
      assertFalse(homeLight2.equals((Object)homeLight0));
      assertFalse(homeLight2.equals((Object)homeLight1));
      assertFalse(boolean3 == boolean1);
      assertTrue(boolean3 == boolean2);
      assertTrue(boolean3 == boolean0);
      assertFalse(boolean3);
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertTrue(homeLight0.isVisible());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertFalse(homeLight0.isMovable());
      assertNull(homeLight0.getCurrency());
      assertNull(homeLight0.getShininess());
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertFalse(homeLight0.isResizable());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertFalse(homeLight0.isDeformable());
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals((-1.0F), homeLight0.getGroundElevation(), 0.01F);
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertFalse(homeLight0.isTexturable());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertNull(homeLight0.getDescription());
      assertEquals((-1.0F), homeLight0.getElevation(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      assertFalse(homeLight0.isModelMirrored());
      assertFalse(homeLight0.isBackFaceShown());
      assertNull(homeLight0.getCatalogId());
      assertNull(homeLight0.getColor());
      assertNull(homeLight0.getName());
      assertFalse(homeLight0.isNameVisible());
      assertEquals(0.0F, homeLight1.getWidth(), 0.01F);
      assertEquals(0.0F, homeLight1.getNameYOffset(), 0.01F);
      assertFalse(homeLight1.isDeformable());
      assertFalse(homeLight1.isResizable());
      assertNull(homeLight1.getShininess());
      assertTrue(homeLight1.isVisible());
      assertFalse(homeLight1.isBackFaceShown());
      assertFalse(homeLight1.isModelMirrored());
      assertFalse(homeLight1.isDoorOrWindow());
      assertEquals(0.0F, homeLight1.getX(), 0.01F);
      assertEquals(0.0F, homeLight1.getY(), 0.01F);
      assertEquals(0.0F, homeLight1.getAngle(), 0.01F);
      assertFalse(homeLight1.isNameVisible());
      assertFalse(homeLight1.isTexturable());
      assertEquals((-1.0F), homeLight1.getElevation(), 0.01F);
      assertNull(homeLight1.getDescription());
      assertEquals(0.0F, homeLight1.getNameXOffset(), 0.01F);
      assertNull(homeLight1.getName());
      assertEquals((-1.0F), homeLight1.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight1.getNameAngle(), 0.01F);
      assertNull(homeLight1.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight1.getDepth(), 0.01F);
      assertNull(homeLight1.getCatalogId());
      assertNull(homeLight1.getColor());
      assertEquals(0.5F, homeLight1.getPower(), 0.01F);
      assertNull(homeLight1.getCurrency());
      assertFalse(homeLight1.isMovable());
      assertEquals(0.0F, homeLight1.getHeight(), 0.01F);
      assertEquals(0.0F, homeLight2.getHeight(), 0.01F);
      assertFalse(homeLight2.isMovable());
      assertFalse(homeLight2.isResizable());
      assertTrue(homeLight2.isVisible());
      assertEquals(0.0F, homeLight2.getNameAngle(), 0.01F);
      assertNull(homeLight2.getShininess());
      assertNull(homeLight2.getStaircaseCutOutShape());
      assertFalse(homeLight2.isDeformable());
      assertNull(homeLight2.getColor());
      assertNull(homeLight2.getCatalogId());
      assertEquals(0.0F, homeLight2.getNameYOffset(), 0.01F);
      assertNull(homeLight2.getCurrency());
      assertEquals(0.5F, homeLight2.getPower(), 0.01F);
      assertEquals((-1.0F), homeLight2.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight2.getAngle(), 0.01F);
      assertFalse(homeLight2.isTexturable());
      assertEquals(0.0F, homeLight2.getX(), 0.01F);
      assertEquals(0.0F, homeLight2.getY(), 0.01F);
      assertFalse(homeLight2.isBackFaceShown());
      assertFalse(homeLight2.isModelMirrored());
      assertEquals(0.0F, homeLight2.getDepth(), 0.01F);
      assertNull(homeLight2.getName());
      assertFalse(homeLight2.isNameVisible());
      assertEquals(0.0F, homeLight2.getNameXOffset(), 0.01F);
      assertNull(homeLight2.getDescription());
      assertFalse(homeLight2.isDoorOrWindow());
      assertEquals((-1.0F), homeLight2.getElevation(), 0.01F);
      assertEquals(0.0F, homeLight2.getWidth(), 0.01F);
      
      homeLight2.setAngle((-1.0F));
      assertNotSame(homeLight0, homeLight2);
      assertNotSame(homeLight0, homeLight1);
      assertNotSame(homeLight1, homeLight0);
      assertNotSame(homeLight1, homeLight2);
      assertNotSame(homeLight2, homeLight0);
      assertNotSame(homeLight2, homeLight1);
      assertFalse(homeLight0.equals((Object)homeLight2));
      assertFalse(homeLight0.equals((Object)homeLight1));
      assertFalse(homeLight1.equals((Object)homeLight0));
      assertFalse(homeLight1.equals((Object)homeLight2));
      assertFalse(homeLight2.equals((Object)homeLight0));
      assertFalse(homeLight2.equals((Object)homeLight1));
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertTrue(homeLight0.isVisible());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertFalse(homeLight0.isMovable());
      assertNull(homeLight0.getCurrency());
      assertNull(homeLight0.getShininess());
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertFalse(homeLight0.isResizable());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertFalse(homeLight0.isDeformable());
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals((-1.0F), homeLight0.getGroundElevation(), 0.01F);
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertFalse(homeLight0.isTexturable());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertNull(homeLight0.getDescription());
      assertEquals((-1.0F), homeLight0.getElevation(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      assertFalse(homeLight0.isModelMirrored());
      assertFalse(homeLight0.isBackFaceShown());
      assertNull(homeLight0.getCatalogId());
      assertNull(homeLight0.getColor());
      assertNull(homeLight0.getName());
      assertFalse(homeLight0.isNameVisible());
      assertEquals(0.0F, homeLight1.getWidth(), 0.01F);
      assertEquals(0.0F, homeLight1.getNameYOffset(), 0.01F);
      assertFalse(homeLight1.isDeformable());
      assertFalse(homeLight1.isResizable());
      assertNull(homeLight1.getShininess());
      assertTrue(homeLight1.isVisible());
      assertFalse(homeLight1.isBackFaceShown());
      assertFalse(homeLight1.isModelMirrored());
      assertFalse(homeLight1.isDoorOrWindow());
      assertEquals(0.0F, homeLight1.getX(), 0.01F);
      assertEquals(0.0F, homeLight1.getY(), 0.01F);
      assertEquals(0.0F, homeLight1.getAngle(), 0.01F);
      assertFalse(homeLight1.isNameVisible());
      assertFalse(homeLight1.isTexturable());
      assertEquals((-1.0F), homeLight1.getElevation(), 0.01F);
      assertNull(homeLight1.getDescription());
      assertEquals(0.0F, homeLight1.getNameXOffset(), 0.01F);
      assertNull(homeLight1.getName());
      assertEquals((-1.0F), homeLight1.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight1.getNameAngle(), 0.01F);
      assertNull(homeLight1.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight1.getDepth(), 0.01F);
      assertNull(homeLight1.getCatalogId());
      assertNull(homeLight1.getColor());
      assertEquals(0.5F, homeLight1.getPower(), 0.01F);
      assertNull(homeLight1.getCurrency());
      assertFalse(homeLight1.isMovable());
      assertEquals(0.0F, homeLight1.getHeight(), 0.01F);
      assertEquals(0.0F, homeLight2.getHeight(), 0.01F);
      assertFalse(homeLight2.isMovable());
      assertFalse(homeLight2.isResizable());
      assertTrue(homeLight2.isVisible());
      assertEquals(0.0F, homeLight2.getNameAngle(), 0.01F);
      assertNull(homeLight2.getShininess());
      assertNull(homeLight2.getStaircaseCutOutShape());
      assertFalse(homeLight2.isDeformable());
      assertNull(homeLight2.getColor());
      assertNull(homeLight2.getCatalogId());
      assertEquals(0.0F, homeLight2.getNameYOffset(), 0.01F);
      assertNull(homeLight2.getCurrency());
      assertEquals(0.5F, homeLight2.getPower(), 0.01F);
      assertEquals((-1.0F), homeLight2.getGroundElevation(), 0.01F);
      assertFalse(homeLight2.isTexturable());
      assertEquals(0.0F, homeLight2.getX(), 0.01F);
      assertEquals(0.0F, homeLight2.getY(), 0.01F);
      assertFalse(homeLight2.isBackFaceShown());
      assertFalse(homeLight2.isModelMirrored());
      assertEquals(0.0F, homeLight2.getDepth(), 0.01F);
      assertNull(homeLight2.getName());
      assertFalse(homeLight2.isNameVisible());
      assertEquals(0.0F, homeLight2.getNameXOffset(), 0.01F);
      assertNull(homeLight2.getDescription());
      assertFalse(homeLight2.isDoorOrWindow());
      assertEquals((-1.0F), homeLight2.getElevation(), 0.01F);
      assertEquals(0.0F, homeLight2.getWidth(), 0.01F);
      assertEquals(5.2831855F, homeLight2.getAngle(), 0.01F);
      
      Integer integer1 = new Integer((-1469));
      assertNotNull(integer1);
      assertTrue(integer1.equals((Object)integer0));
      assertFalse(integer1.equals((Object)int0));
      assertFalse(integer1.equals((Object)int1));
      assertEquals((-1469), (int)integer1);
      
      boolean boolean4 = homeLight1.isModelMirrored();
      assertNotSame(homeLight0, homeLight2);
      assertNotSame(homeLight0, homeLight1);
      assertNotSame(homeLight1, homeLight0);
      assertNotSame(homeLight1, homeLight2);
      assertTrue(boolean4 == boolean0);
      assertTrue(boolean4 == boolean3);
      assertFalse(boolean4 == boolean1);
      assertTrue(boolean4 == boolean2);
      assertFalse(homeLight0.equals((Object)homeLight2));
      assertFalse(homeLight0.equals((Object)homeLight1));
      assertFalse(homeLight1.equals((Object)homeLight0));
      assertFalse(homeLight1.equals((Object)homeLight2));
      assertFalse(boolean4);
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertTrue(homeLight0.isVisible());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertFalse(homeLight0.isMovable());
      assertNull(homeLight0.getCurrency());
      assertNull(homeLight0.getShininess());
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertFalse(homeLight0.isResizable());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertFalse(homeLight0.isDeformable());
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals((-1.0F), homeLight0.getGroundElevation(), 0.01F);
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertFalse(homeLight0.isTexturable());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertNull(homeLight0.getDescription());
      assertEquals((-1.0F), homeLight0.getElevation(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      assertFalse(homeLight0.isModelMirrored());
      assertFalse(homeLight0.isBackFaceShown());
      assertNull(homeLight0.getCatalogId());
      assertNull(homeLight0.getColor());
      assertNull(homeLight0.getName());
      assertFalse(homeLight0.isNameVisible());
      assertEquals(0.0F, homeLight1.getWidth(), 0.01F);
      assertEquals(0.0F, homeLight1.getNameYOffset(), 0.01F);
      assertFalse(homeLight1.isDeformable());
      assertFalse(homeLight1.isResizable());
      assertNull(homeLight1.getShininess());
      assertTrue(homeLight1.isVisible());
      assertFalse(homeLight1.isBackFaceShown());
      assertFalse(homeLight1.isModelMirrored());
      assertFalse(homeLight1.isDoorOrWindow());
      assertEquals(0.0F, homeLight1.getX(), 0.01F);
      assertEquals(0.0F, homeLight1.getY(), 0.01F);
      assertEquals(0.0F, homeLight1.getAngle(), 0.01F);
      assertFalse(homeLight1.isNameVisible());
      assertFalse(homeLight1.isTexturable());
      assertEquals((-1.0F), homeLight1.getElevation(), 0.01F);
      assertNull(homeLight1.getDescription());
      assertEquals(0.0F, homeLight1.getNameXOffset(), 0.01F);
      assertNull(homeLight1.getName());
      assertEquals((-1.0F), homeLight1.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight1.getNameAngle(), 0.01F);
      assertNull(homeLight1.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight1.getDepth(), 0.01F);
      assertNull(homeLight1.getCatalogId());
      assertNull(homeLight1.getColor());
      assertEquals(0.5F, homeLight1.getPower(), 0.01F);
      assertNull(homeLight1.getCurrency());
      assertFalse(homeLight1.isMovable());
      assertEquals(0.0F, homeLight1.getHeight(), 0.01F);
      
      try { 
        Integer.valueOf((String) null, (-634));
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // null
         //
         verifyException("java.lang.Integer", e);
      }
  }

  @Test(timeout = 4000)
  public void test190()  throws Throwable  {
      Integer integer0 = new Integer((-1469));
      assertNotNull(integer0);
      assertEquals((-1469), (int)integer0);
      
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      Light light0 = mock(Light.class, new ViolatedAssumptionAnswer());
      doReturn((LightSource[]) null).when(light0).getLightSources();
      doReturn((Integer) null).when(light0).getColor();
      doReturn((String) null).when(light0).getCurrency();
      doReturn(0.0F).when(light0).getDepth();
      doReturn((String) null).when(light0).getDescription();
      doReturn(0.0F).when(light0).getElevation();
      doReturn(0.0F).when(light0).getHeight();
      doReturn((Content) null).when(light0).getIcon();
      doReturn((Content) null).when(light0).getModel();
      doReturn((float[][]) null).when(light0).getModelRotation();
      doReturn((String) null).when(light0).getName();
      doReturn((Content) null).when(light0).getPlanIcon();
      doReturn((BigDecimal) null).when(light0).getPrice();
      doReturn((String) null).when(light0).getStaircaseCutOutShape();
      doReturn((BigDecimal) null).when(light0).getValueAddedTaxPercentage();
      doReturn(0.0F).when(light0).getWidth();
      doReturn(false).when(light0).isBackFaceShown();
      doReturn(false).when(light0).isDeformable();
      doReturn(false).when(light0).isDoorOrWindow();
      doReturn(false).when(light0).isMovable();
      doReturn(false).when(light0).isResizable();
      doReturn(false).when(light0).isTexturable();
      HomeLight homeLight0 = new HomeLight(light0);
      assertNotNull(homeLight0);
      assertNull(homeLight0.getColor());
      assertFalse(homeLight0.isBackFaceShown());
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertFalse(homeLight0.isNameVisible());
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertNull(homeLight0.getCurrency());
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertFalse(homeLight0.isModelMirrored());
      assertNull(homeLight0.getCatalogId());
      assertNull(homeLight0.getName());
      assertFalse(homeLight0.isMovable());
      assertNull(homeLight0.getDescription());
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertFalse(homeLight0.isTexturable());
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertFalse(homeLight0.isResizable());
      assertFalse(homeLight0.isDeformable());
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertTrue(homeLight0.isVisible());
      assertNull(homeLight0.getShininess());
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      
      homeLight0.setElevation((-1.0F));
      assertNull(homeLight0.getColor());
      assertFalse(homeLight0.isBackFaceShown());
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertFalse(homeLight0.isNameVisible());
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertNull(homeLight0.getCurrency());
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertFalse(homeLight0.isModelMirrored());
      assertNull(homeLight0.getCatalogId());
      assertNull(homeLight0.getName());
      assertFalse(homeLight0.isMovable());
      assertNull(homeLight0.getDescription());
      assertEquals((-1.0F), homeLight0.getElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertFalse(homeLight0.isTexturable());
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertFalse(homeLight0.isResizable());
      assertFalse(homeLight0.isDeformable());
      assertEquals((-1.0F), homeLight0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertTrue(homeLight0.isVisible());
      assertNull(homeLight0.getShininess());
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      
      homeLight0.setNameAngle((-1.0F));
      assertNull(homeLight0.getColor());
      assertFalse(homeLight0.isBackFaceShown());
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertFalse(homeLight0.isNameVisible());
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertNull(homeLight0.getCurrency());
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertFalse(homeLight0.isModelMirrored());
      assertNull(homeLight0.getCatalogId());
      assertNull(homeLight0.getName());
      assertFalse(homeLight0.isMovable());
      assertNull(homeLight0.getDescription());
      assertEquals((-1.0F), homeLight0.getElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals(5.2831855F, homeLight0.getNameAngle(), 0.01F);
      assertFalse(homeLight0.isTexturable());
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertFalse(homeLight0.isResizable());
      assertFalse(homeLight0.isDeformable());
      assertEquals((-1.0F), homeLight0.getGroundElevation(), 0.01F);
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertTrue(homeLight0.isVisible());
      assertNull(homeLight0.getShininess());
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      
      homeLight0.setY((-1.0F));
      assertNull(homeLight0.getColor());
      assertFalse(homeLight0.isBackFaceShown());
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertFalse(homeLight0.isNameVisible());
      assertEquals((-1.0F), homeLight0.getY(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertNull(homeLight0.getCurrency());
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertFalse(homeLight0.isModelMirrored());
      assertNull(homeLight0.getCatalogId());
      assertNull(homeLight0.getName());
      assertFalse(homeLight0.isMovable());
      assertNull(homeLight0.getDescription());
      assertEquals((-1.0F), homeLight0.getElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals(5.2831855F, homeLight0.getNameAngle(), 0.01F);
      assertFalse(homeLight0.isTexturable());
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertFalse(homeLight0.isResizable());
      assertFalse(homeLight0.isDeformable());
      assertEquals((-1.0F), homeLight0.getGroundElevation(), 0.01F);
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertTrue(homeLight0.isVisible());
      assertNull(homeLight0.getShininess());
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      
      Level level0 = homeLight0.getLevel();
      assertNull(level0);
      assertNull(homeLight0.getColor());
      assertFalse(homeLight0.isBackFaceShown());
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertFalse(homeLight0.isNameVisible());
      assertEquals((-1.0F), homeLight0.getY(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertNull(homeLight0.getCurrency());
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertFalse(homeLight0.isModelMirrored());
      assertNull(homeLight0.getCatalogId());
      assertNull(homeLight0.getName());
      assertFalse(homeLight0.isMovable());
      assertNull(homeLight0.getDescription());
      assertEquals((-1.0F), homeLight0.getElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals(5.2831855F, homeLight0.getNameAngle(), 0.01F);
      assertFalse(homeLight0.isTexturable());
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertFalse(homeLight0.isResizable());
      assertFalse(homeLight0.isDeformable());
      assertEquals((-1.0F), homeLight0.getGroundElevation(), 0.01F);
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertTrue(homeLight0.isVisible());
      assertNull(homeLight0.getShininess());
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      
      boolean boolean1 = homeLight0.isBottomLeftPointAt((-1.0F), (-1469), (-1.0F));
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      assertNull(homeLight0.getColor());
      assertFalse(homeLight0.isBackFaceShown());
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertFalse(homeLight0.isNameVisible());
      assertEquals((-1.0F), homeLight0.getY(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertNull(homeLight0.getCurrency());
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertFalse(homeLight0.isModelMirrored());
      assertNull(homeLight0.getCatalogId());
      assertNull(homeLight0.getName());
      assertFalse(homeLight0.isMovable());
      assertNull(homeLight0.getDescription());
      assertEquals((-1.0F), homeLight0.getElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals(5.2831855F, homeLight0.getNameAngle(), 0.01F);
      assertFalse(homeLight0.isTexturable());
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertFalse(homeLight0.isResizable());
      assertFalse(homeLight0.isDeformable());
      assertEquals((-1.0F), homeLight0.getGroundElevation(), 0.01F);
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertTrue(homeLight0.isVisible());
      assertNull(homeLight0.getShininess());
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      
      homeLight0.setMovable(false);
      assertNull(homeLight0.getColor());
      assertFalse(homeLight0.isBackFaceShown());
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertFalse(homeLight0.isNameVisible());
      assertEquals((-1.0F), homeLight0.getY(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertNull(homeLight0.getCurrency());
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertFalse(homeLight0.isModelMirrored());
      assertNull(homeLight0.getCatalogId());
      assertNull(homeLight0.getName());
      assertFalse(homeLight0.isMovable());
      assertNull(homeLight0.getDescription());
      assertEquals((-1.0F), homeLight0.getElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals(5.2831855F, homeLight0.getNameAngle(), 0.01F);
      assertFalse(homeLight0.isTexturable());
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertFalse(homeLight0.isResizable());
      assertFalse(homeLight0.isDeformable());
      assertEquals((-1.0F), homeLight0.getGroundElevation(), 0.01F);
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertTrue(homeLight0.isVisible());
      assertNull(homeLight0.getShininess());
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      
      homeLight0.setNameVisible(true);
      assertNull(homeLight0.getColor());
      assertFalse(homeLight0.isBackFaceShown());
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertEquals((-1.0F), homeLight0.getY(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertNull(homeLight0.getCurrency());
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertTrue(homeLight0.isNameVisible());
      assertFalse(homeLight0.isModelMirrored());
      assertNull(homeLight0.getCatalogId());
      assertNull(homeLight0.getName());
      assertFalse(homeLight0.isMovable());
      assertNull(homeLight0.getDescription());
      assertEquals((-1.0F), homeLight0.getElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals(5.2831855F, homeLight0.getNameAngle(), 0.01F);
      assertFalse(homeLight0.isTexturable());
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertFalse(homeLight0.isResizable());
      assertFalse(homeLight0.isDeformable());
      assertEquals((-1.0F), homeLight0.getGroundElevation(), 0.01F);
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertTrue(homeLight0.isVisible());
      assertNull(homeLight0.getShininess());
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      
      homeLight0.setName("CwJqsh&ITzTV");
      assertNull(homeLight0.getColor());
      assertFalse(homeLight0.isBackFaceShown());
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertEquals((-1.0F), homeLight0.getY(), 0.01F);
      assertEquals("CwJqsh&ITzTV", homeLight0.getName());
      assertFalse(homeLight0.isDoorOrWindow());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertNull(homeLight0.getCurrency());
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertTrue(homeLight0.isNameVisible());
      assertFalse(homeLight0.isModelMirrored());
      assertNull(homeLight0.getCatalogId());
      assertFalse(homeLight0.isMovable());
      assertNull(homeLight0.getDescription());
      assertEquals((-1.0F), homeLight0.getElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals(5.2831855F, homeLight0.getNameAngle(), 0.01F);
      assertFalse(homeLight0.isTexturable());
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertFalse(homeLight0.isResizable());
      assertFalse(homeLight0.isDeformable());
      assertEquals((-1.0F), homeLight0.getGroundElevation(), 0.01F);
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertTrue(homeLight0.isVisible());
      assertNull(homeLight0.getShininess());
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      
      homeLight0.setNameYOffset(4945.0F);
      assertNull(homeLight0.getColor());
      assertFalse(homeLight0.isBackFaceShown());
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertEquals((-1.0F), homeLight0.getY(), 0.01F);
      assertEquals("CwJqsh&ITzTV", homeLight0.getName());
      assertFalse(homeLight0.isDoorOrWindow());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertNull(homeLight0.getCurrency());
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertTrue(homeLight0.isNameVisible());
      assertEquals(4945.0F, homeLight0.getNameYOffset(), 0.01F);
      assertFalse(homeLight0.isModelMirrored());
      assertNull(homeLight0.getCatalogId());
      assertFalse(homeLight0.isMovable());
      assertNull(homeLight0.getDescription());
      assertEquals((-1.0F), homeLight0.getElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals(5.2831855F, homeLight0.getNameAngle(), 0.01F);
      assertFalse(homeLight0.isTexturable());
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertFalse(homeLight0.isResizable());
      assertFalse(homeLight0.isDeformable());
      assertEquals((-1.0F), homeLight0.getGroundElevation(), 0.01F);
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertTrue(homeLight0.isVisible());
      assertNull(homeLight0.getShininess());
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      
      HomePieceOfFurniture.SortableProperty[] homePieceOfFurniture_SortablePropertyArray0 = HomePieceOfFurniture.SortableProperty.values();
      assertEquals(19, homePieceOfFurniture_SortablePropertyArray0.length);
      assertNotNull(homePieceOfFurniture_SortablePropertyArray0);
      
      homeLight0.setNameAngle((-1469));
      assertNull(homeLight0.getColor());
      assertFalse(homeLight0.isBackFaceShown());
      assertEquals(1.2653619F, homeLight0.getNameAngle(), 0.01F);
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertEquals((-1.0F), homeLight0.getY(), 0.01F);
      assertEquals("CwJqsh&ITzTV", homeLight0.getName());
      assertFalse(homeLight0.isDoorOrWindow());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertNull(homeLight0.getCurrency());
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertTrue(homeLight0.isNameVisible());
      assertEquals(4945.0F, homeLight0.getNameYOffset(), 0.01F);
      assertFalse(homeLight0.isModelMirrored());
      assertNull(homeLight0.getCatalogId());
      assertFalse(homeLight0.isMovable());
      assertNull(homeLight0.getDescription());
      assertEquals((-1.0F), homeLight0.getElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertFalse(homeLight0.isTexturable());
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertFalse(homeLight0.isResizable());
      assertFalse(homeLight0.isDeformable());
      assertEquals((-1.0F), homeLight0.getGroundElevation(), 0.01F);
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertTrue(homeLight0.isVisible());
      assertNull(homeLight0.getShininess());
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test191()  throws Throwable  {
      Light light0 = mock(Light.class, new ViolatedAssumptionAnswer());
      doReturn((LightSource[]) null).when(light0).getLightSources();
      doReturn((Integer) null).when(light0).getColor();
      doReturn((String) null).when(light0).getCurrency();
      doReturn(0.0F).when(light0).getDepth();
      doReturn((String) null).when(light0).getDescription();
      doReturn(0.0F).when(light0).getElevation();
      doReturn(0.0F).when(light0).getHeight();
      doReturn((Content) null).when(light0).getIcon();
      doReturn((Content) null).when(light0).getModel();
      doReturn((float[][]) null).when(light0).getModelRotation();
      doReturn((String) null).when(light0).getName();
      doReturn((Content) null).when(light0).getPlanIcon();
      doReturn((BigDecimal) null).when(light0).getPrice();
      doReturn((String) null).when(light0).getStaircaseCutOutShape();
      doReturn((BigDecimal) null).when(light0).getValueAddedTaxPercentage();
      doReturn(0.0F).when(light0).getWidth();
      doReturn(false).when(light0).isBackFaceShown();
      doReturn(false).when(light0).isDeformable();
      doReturn(false).when(light0).isDoorOrWindow();
      doReturn(false).when(light0).isMovable();
      doReturn(false).when(light0).isResizable();
      doReturn(false).when(light0).isTexturable();
      HomeLight homeLight0 = new HomeLight(light0);
      assertNotNull(homeLight0);
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertNull(homeLight0.getDescription());
      assertFalse(homeLight0.isDoorOrWindow());
      assertFalse(homeLight0.isTexturable());
      assertNull(homeLight0.getShininess());
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertFalse(homeLight0.isMovable());
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertFalse(homeLight0.isDeformable());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertFalse(homeLight0.isResizable());
      assertTrue(homeLight0.isVisible());
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertNull(homeLight0.getCurrency());
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertNull(homeLight0.getColor());
      assertNull(homeLight0.getCatalogId());
      assertFalse(homeLight0.isModelMirrored());
      assertNull(homeLight0.getName());
      assertFalse(homeLight0.isNameVisible());
      assertFalse(homeLight0.isBackFaceShown());
      
      homeLight0.setY((-1098.0F));
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertNull(homeLight0.getDescription());
      assertFalse(homeLight0.isDoorOrWindow());
      assertFalse(homeLight0.isTexturable());
      assertNull(homeLight0.getShininess());
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertFalse(homeLight0.isMovable());
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertFalse(homeLight0.isDeformable());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertFalse(homeLight0.isResizable());
      assertTrue(homeLight0.isVisible());
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertNull(homeLight0.getCurrency());
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertEquals((-1098.0F), homeLight0.getY(), 0.01F);
      assertNull(homeLight0.getColor());
      assertNull(homeLight0.getCatalogId());
      assertFalse(homeLight0.isModelMirrored());
      assertNull(homeLight0.getName());
      assertFalse(homeLight0.isNameVisible());
      assertFalse(homeLight0.isBackFaceShown());
      
      boolean boolean0 = homeLight0.isBottomLeftPointAt(0.0F, 0.0F, 0.0F);
      assertFalse(boolean0);
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertNull(homeLight0.getDescription());
      assertFalse(homeLight0.isDoorOrWindow());
      assertFalse(homeLight0.isTexturable());
      assertNull(homeLight0.getShininess());
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertFalse(homeLight0.isMovable());
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertFalse(homeLight0.isDeformable());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertFalse(homeLight0.isResizable());
      assertTrue(homeLight0.isVisible());
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertNull(homeLight0.getCurrency());
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertEquals((-1098.0F), homeLight0.getY(), 0.01F);
      assertNull(homeLight0.getColor());
      assertNull(homeLight0.getCatalogId());
      assertFalse(homeLight0.isModelMirrored());
      assertNull(homeLight0.getName());
      assertFalse(homeLight0.isNameVisible());
      assertFalse(homeLight0.isBackFaceShown());
      
      homeLight0.setNameYOffset(963.17914F);
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertNull(homeLight0.getDescription());
      assertFalse(homeLight0.isDoorOrWindow());
      assertFalse(homeLight0.isTexturable());
      assertNull(homeLight0.getShininess());
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertFalse(homeLight0.isMovable());
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertFalse(homeLight0.isDeformable());
      assertEquals(963.17914F, homeLight0.getNameYOffset(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertFalse(homeLight0.isResizable());
      assertTrue(homeLight0.isVisible());
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertNull(homeLight0.getCurrency());
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertEquals((-1098.0F), homeLight0.getY(), 0.01F);
      assertNull(homeLight0.getColor());
      assertNull(homeLight0.getCatalogId());
      assertFalse(homeLight0.isModelMirrored());
      assertNull(homeLight0.getName());
      assertFalse(homeLight0.isNameVisible());
      assertFalse(homeLight0.isBackFaceShown());
      
      homeLight0.setNameXOffset(5.8981633F);
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertEquals(5.8981633F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertNull(homeLight0.getDescription());
      assertFalse(homeLight0.isDoorOrWindow());
      assertFalse(homeLight0.isTexturable());
      assertNull(homeLight0.getShininess());
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertFalse(homeLight0.isMovable());
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertFalse(homeLight0.isDeformable());
      assertEquals(963.17914F, homeLight0.getNameYOffset(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertFalse(homeLight0.isResizable());
      assertTrue(homeLight0.isVisible());
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertNull(homeLight0.getCurrency());
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertEquals((-1098.0F), homeLight0.getY(), 0.01F);
      assertNull(homeLight0.getColor());
      assertNull(homeLight0.getCatalogId());
      assertFalse(homeLight0.isModelMirrored());
      assertNull(homeLight0.getName());
      assertFalse(homeLight0.isNameVisible());
      assertFalse(homeLight0.isBackFaceShown());
  }

  @Test(timeout = 4000)
  public void test192()  throws Throwable  {
      Integer integer0 = new Integer(1431655742);
      assertNotNull(integer0);
      assertEquals(1431655742, (int)integer0);
      
      Light light0 = mock(Light.class, new ViolatedAssumptionAnswer());
      doReturn((LightSource[]) null).when(light0).getLightSources();
      doReturn((Integer) null).when(light0).getColor();
      doReturn((String) null).when(light0).getCurrency();
      doReturn(0.0F).when(light0).getDepth();
      doReturn((String) null).when(light0).getDescription();
      doReturn(0.0F).when(light0).getElevation();
      doReturn(0.0F).when(light0).getHeight();
      doReturn((Content) null).when(light0).getIcon();
      doReturn((Content) null).when(light0).getModel();
      doReturn((float[][]) null).when(light0).getModelRotation();
      doReturn((String) null).when(light0).getName();
      doReturn((Content) null).when(light0).getPlanIcon();
      doReturn((BigDecimal) null).when(light0).getPrice();
      doReturn((String) null).when(light0).getStaircaseCutOutShape();
      doReturn((BigDecimal) null).when(light0).getValueAddedTaxPercentage();
      doReturn(0.0F).when(light0).getWidth();
      doReturn(false).when(light0).isBackFaceShown();
      doReturn(false).when(light0).isDeformable();
      doReturn(false).when(light0).isDoorOrWindow();
      doReturn(false).when(light0).isMovable();
      doReturn(false).when(light0).isResizable();
      doReturn(false).when(light0).isTexturable();
      HomeLight homeLight0 = new HomeLight(light0);
      assertNotNull(homeLight0);
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertFalse(homeLight0.isMovable());
      assertFalse(homeLight0.isNameVisible());
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertNull(homeLight0.getCurrency());
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertFalse(homeLight0.isDeformable());
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertFalse(homeLight0.isResizable());
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertNull(homeLight0.getShininess());
      assertTrue(homeLight0.isVisible());
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertFalse(homeLight0.isTexturable());
      assertNull(homeLight0.getName());
      assertNull(homeLight0.getDescription());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertNull(homeLight0.getCatalogId());
      assertFalse(homeLight0.isModelMirrored());
      assertNull(homeLight0.getColor());
      assertFalse(homeLight0.isBackFaceShown());
      
      homeLight0.setY(1431655742);
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertFalse(homeLight0.isMovable());
      assertFalse(homeLight0.isNameVisible());
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertNull(homeLight0.getCurrency());
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertFalse(homeLight0.isDoorOrWindow());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertFalse(homeLight0.isDeformable());
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals(1.43165568E9F, homeLight0.getY(), 0.01F);
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertFalse(homeLight0.isResizable());
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertNull(homeLight0.getShininess());
      assertTrue(homeLight0.isVisible());
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertFalse(homeLight0.isTexturable());
      assertNull(homeLight0.getName());
      assertNull(homeLight0.getDescription());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertNull(homeLight0.getCatalogId());
      assertFalse(homeLight0.isModelMirrored());
      assertNull(homeLight0.getColor());
      assertFalse(homeLight0.isBackFaceShown());
      
      BigDecimal bigDecimal0 = homeLight0.getValueAddedTax();
      assertNull(bigDecimal0);
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertFalse(homeLight0.isMovable());
      assertFalse(homeLight0.isNameVisible());
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertNull(homeLight0.getCurrency());
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertFalse(homeLight0.isDoorOrWindow());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertFalse(homeLight0.isDeformable());
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals(1.43165568E9F, homeLight0.getY(), 0.01F);
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertFalse(homeLight0.isResizable());
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertNull(homeLight0.getShininess());
      assertTrue(homeLight0.isVisible());
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertFalse(homeLight0.isTexturable());
      assertNull(homeLight0.getName());
      assertNull(homeLight0.getDescription());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertNull(homeLight0.getCatalogId());
      assertFalse(homeLight0.isModelMirrored());
      assertNull(homeLight0.getColor());
      assertFalse(homeLight0.isBackFaceShown());
      
      boolean boolean0 = homeLight0.isTopRightPointAt(1431655742, 1431655742, 3.4028235E38F);
      assertFalse(boolean0);
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertFalse(homeLight0.isMovable());
      assertFalse(homeLight0.isNameVisible());
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertNull(homeLight0.getCurrency());
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertFalse(homeLight0.isDoorOrWindow());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertFalse(homeLight0.isDeformable());
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals(1.43165568E9F, homeLight0.getY(), 0.01F);
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertFalse(homeLight0.isResizable());
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertNull(homeLight0.getShininess());
      assertTrue(homeLight0.isVisible());
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertFalse(homeLight0.isTexturable());
      assertNull(homeLight0.getName());
      assertNull(homeLight0.getDescription());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertNull(homeLight0.getCatalogId());
      assertFalse(homeLight0.isModelMirrored());
      assertNull(homeLight0.getColor());
      assertFalse(homeLight0.isBackFaceShown());
      
      Level level0 = homeLight0.getLevel();
      assertNull(level0);
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertFalse(homeLight0.isMovable());
      assertFalse(homeLight0.isNameVisible());
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertNull(homeLight0.getCurrency());
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertFalse(homeLight0.isDoorOrWindow());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertFalse(homeLight0.isDeformable());
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals(1.43165568E9F, homeLight0.getY(), 0.01F);
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertFalse(homeLight0.isResizable());
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertNull(homeLight0.getShininess());
      assertTrue(homeLight0.isVisible());
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertFalse(homeLight0.isTexturable());
      assertNull(homeLight0.getName());
      assertNull(homeLight0.getDescription());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertNull(homeLight0.getCatalogId());
      assertFalse(homeLight0.isModelMirrored());
      assertNull(homeLight0.getColor());
      assertFalse(homeLight0.isBackFaceShown());
      
      homeLight0.setX(1301.7253F);
      assertEquals(1301.7253F, homeLight0.getX(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertFalse(homeLight0.isMovable());
      assertFalse(homeLight0.isNameVisible());
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertNull(homeLight0.getCurrency());
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertFalse(homeLight0.isDoorOrWindow());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertFalse(homeLight0.isDeformable());
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals(1.43165568E9F, homeLight0.getY(), 0.01F);
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertFalse(homeLight0.isResizable());
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertNull(homeLight0.getShininess());
      assertTrue(homeLight0.isVisible());
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertFalse(homeLight0.isTexturable());
      assertNull(homeLight0.getName());
      assertNull(homeLight0.getDescription());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertNull(homeLight0.getCatalogId());
      assertFalse(homeLight0.isModelMirrored());
      assertNull(homeLight0.getColor());
      assertFalse(homeLight0.isBackFaceShown());
      
      BigDecimal bigDecimal1 = homeLight0.getValueAddedTax();
      assertNull(bigDecimal1);
      assertEquals(1301.7253F, homeLight0.getX(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertFalse(homeLight0.isMovable());
      assertFalse(homeLight0.isNameVisible());
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertNull(homeLight0.getCurrency());
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertFalse(homeLight0.isDoorOrWindow());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertFalse(homeLight0.isDeformable());
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals(1.43165568E9F, homeLight0.getY(), 0.01F);
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertFalse(homeLight0.isResizable());
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertNull(homeLight0.getShininess());
      assertTrue(homeLight0.isVisible());
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertFalse(homeLight0.isTexturable());
      assertNull(homeLight0.getName());
      assertNull(homeLight0.getDescription());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertNull(homeLight0.getCatalogId());
      assertFalse(homeLight0.isModelMirrored());
      assertNull(homeLight0.getColor());
      assertFalse(homeLight0.isBackFaceShown());
      
      Level level1 = homeLight0.getLevel();
      assertNull(level1);
      assertEquals(1301.7253F, homeLight0.getX(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertFalse(homeLight0.isMovable());
      assertFalse(homeLight0.isNameVisible());
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertNull(homeLight0.getCurrency());
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertFalse(homeLight0.isDoorOrWindow());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertFalse(homeLight0.isDeformable());
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals(1.43165568E9F, homeLight0.getY(), 0.01F);
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertFalse(homeLight0.isResizable());
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertNull(homeLight0.getShininess());
      assertTrue(homeLight0.isVisible());
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertFalse(homeLight0.isTexturable());
      assertNull(homeLight0.getName());
      assertNull(homeLight0.getDescription());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertNull(homeLight0.getCatalogId());
      assertFalse(homeLight0.isModelMirrored());
      assertNull(homeLight0.getColor());
      assertFalse(homeLight0.isBackFaceShown());
      
      homeLight0.setName("DOOR_OR_WINDOW");
      assertEquals(1301.7253F, homeLight0.getX(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertFalse(homeLight0.isMovable());
      assertFalse(homeLight0.isNameVisible());
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertNull(homeLight0.getCurrency());
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertFalse(homeLight0.isDoorOrWindow());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertEquals("DOOR_OR_WINDOW", homeLight0.getName());
      assertFalse(homeLight0.isDeformable());
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals(1.43165568E9F, homeLight0.getY(), 0.01F);
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertFalse(homeLight0.isResizable());
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertNull(homeLight0.getShininess());
      assertTrue(homeLight0.isVisible());
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertFalse(homeLight0.isTexturable());
      assertNull(homeLight0.getDescription());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertNull(homeLight0.getCatalogId());
      assertFalse(homeLight0.isModelMirrored());
      assertNull(homeLight0.getColor());
      assertFalse(homeLight0.isBackFaceShown());
      
      boolean boolean1 = homeLight0.isNameVisible();
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      assertEquals(1301.7253F, homeLight0.getX(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertFalse(homeLight0.isMovable());
      assertFalse(homeLight0.isNameVisible());
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertNull(homeLight0.getCurrency());
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertFalse(homeLight0.isDoorOrWindow());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertEquals("DOOR_OR_WINDOW", homeLight0.getName());
      assertFalse(homeLight0.isDeformable());
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals(1.43165568E9F, homeLight0.getY(), 0.01F);
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertFalse(homeLight0.isResizable());
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertNull(homeLight0.getShininess());
      assertTrue(homeLight0.isVisible());
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertFalse(homeLight0.isTexturable());
      assertNull(homeLight0.getDescription());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertNull(homeLight0.getCatalogId());
      assertFalse(homeLight0.isModelMirrored());
      assertNull(homeLight0.getColor());
      assertFalse(homeLight0.isBackFaceShown());
      
      HomeLight homeLight1 = homeLight0.clone();
      assertNotNull(homeLight1);
      assertNotSame(homeLight0, homeLight1);
      assertNotSame(homeLight1, homeLight0);
      assertFalse(homeLight1.equals((Object)homeLight0));
      assertEquals(1301.7253F, homeLight0.getX(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertFalse(homeLight0.isMovable());
      assertFalse(homeLight0.isNameVisible());
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertNull(homeLight0.getCurrency());
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertFalse(homeLight0.isDoorOrWindow());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertEquals("DOOR_OR_WINDOW", homeLight0.getName());
      assertFalse(homeLight0.isDeformable());
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals(1.43165568E9F, homeLight0.getY(), 0.01F);
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertFalse(homeLight0.isResizable());
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertNull(homeLight0.getShininess());
      assertTrue(homeLight0.isVisible());
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertFalse(homeLight0.isTexturable());
      assertNull(homeLight0.getDescription());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertNull(homeLight0.getCatalogId());
      assertFalse(homeLight0.isModelMirrored());
      assertNull(homeLight0.getColor());
      assertFalse(homeLight0.isBackFaceShown());
      assertTrue(homeLight1.isVisible());
      assertEquals(0.0F, homeLight1.getNameYOffset(), 0.01F);
      assertEquals(1301.7253F, homeLight1.getX(), 0.01F);
      assertNull(homeLight1.getShininess());
      assertFalse(homeLight1.isDeformable());
      assertFalse(homeLight1.isResizable());
      assertNull(homeLight1.getCatalogId());
      assertNull(homeLight1.getColor());
      assertNull(homeLight1.getCurrency());
      assertFalse(homeLight1.isMovable());
      assertEquals(0.0F, homeLight1.getHeight(), 0.01F);
      assertEquals(0.5F, homeLight1.getPower(), 0.01F);
      assertEquals(0.0F, homeLight1.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight1.getDepth(), 0.01F);
      assertFalse(homeLight1.isBackFaceShown());
      assertFalse(homeLight1.isModelMirrored());
      assertEquals(0.0F, homeLight1.getNameAngle(), 0.01F);
      assertNull(homeLight1.getStaircaseCutOutShape());
      assertFalse(homeLight1.isNameVisible());
      assertEquals(0.0F, homeLight1.getNameXOffset(), 0.01F);
      assertEquals(1.43165568E9F, homeLight1.getY(), 0.01F);
      assertEquals(0.0F, homeLight1.getAngle(), 0.01F);
      assertEquals(0.0F, homeLight1.getElevation(), 0.01F);
      assertEquals(0.0F, homeLight1.getWidth(), 0.01F);
      assertEquals("DOOR_OR_WINDOW", homeLight1.getName());
      assertFalse(homeLight1.isTexturable());
      assertNull(homeLight1.getDescription());
      assertFalse(homeLight1.isDoorOrWindow());
      
      boolean boolean2 = homeLight1.containsPoint(3676.623F, (-691.8207F), (-838.80707F));
      assertNotSame(homeLight0, homeLight1);
      assertNotSame(homeLight1, homeLight0);
      assertFalse(homeLight0.equals((Object)homeLight1));
      assertFalse(homeLight1.equals((Object)homeLight0));
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2);
      assertEquals(1301.7253F, homeLight0.getX(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertFalse(homeLight0.isMovable());
      assertFalse(homeLight0.isNameVisible());
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertNull(homeLight0.getCurrency());
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertFalse(homeLight0.isDoorOrWindow());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertEquals("DOOR_OR_WINDOW", homeLight0.getName());
      assertFalse(homeLight0.isDeformable());
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals(1.43165568E9F, homeLight0.getY(), 0.01F);
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertFalse(homeLight0.isResizable());
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertNull(homeLight0.getShininess());
      assertTrue(homeLight0.isVisible());
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertFalse(homeLight0.isTexturable());
      assertNull(homeLight0.getDescription());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertNull(homeLight0.getCatalogId());
      assertFalse(homeLight0.isModelMirrored());
      assertNull(homeLight0.getColor());
      assertFalse(homeLight0.isBackFaceShown());
      assertTrue(homeLight1.isVisible());
      assertEquals(0.0F, homeLight1.getNameYOffset(), 0.01F);
      assertEquals(1301.7253F, homeLight1.getX(), 0.01F);
      assertNull(homeLight1.getShininess());
      assertFalse(homeLight1.isDeformable());
      assertFalse(homeLight1.isResizable());
      assertNull(homeLight1.getCatalogId());
      assertNull(homeLight1.getColor());
      assertNull(homeLight1.getCurrency());
      assertFalse(homeLight1.isMovable());
      assertEquals(0.0F, homeLight1.getHeight(), 0.01F);
      assertEquals(0.5F, homeLight1.getPower(), 0.01F);
      assertEquals(0.0F, homeLight1.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight1.getDepth(), 0.01F);
      assertFalse(homeLight1.isBackFaceShown());
      assertFalse(homeLight1.isModelMirrored());
      assertEquals(0.0F, homeLight1.getNameAngle(), 0.01F);
      assertNull(homeLight1.getStaircaseCutOutShape());
      assertFalse(homeLight1.isNameVisible());
      assertEquals(0.0F, homeLight1.getNameXOffset(), 0.01F);
      assertEquals(1.43165568E9F, homeLight1.getY(), 0.01F);
      assertEquals(0.0F, homeLight1.getAngle(), 0.01F);
      assertEquals(0.0F, homeLight1.getElevation(), 0.01F);
      assertEquals(0.0F, homeLight1.getWidth(), 0.01F);
      assertEquals("DOOR_OR_WINDOW", homeLight1.getName());
      assertFalse(homeLight1.isTexturable());
      assertNull(homeLight1.getDescription());
      assertFalse(homeLight1.isDoorOrWindow());
      
      homeLight1.setNameYOffset((-691.8207F));
      assertNotSame(homeLight0, homeLight1);
      assertNotSame(homeLight1, homeLight0);
      assertFalse(homeLight0.equals((Object)homeLight1));
      assertFalse(homeLight1.equals((Object)homeLight0));
      assertEquals(1301.7253F, homeLight0.getX(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertFalse(homeLight0.isMovable());
      assertFalse(homeLight0.isNameVisible());
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertNull(homeLight0.getCurrency());
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertFalse(homeLight0.isDoorOrWindow());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertEquals("DOOR_OR_WINDOW", homeLight0.getName());
      assertFalse(homeLight0.isDeformable());
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals(1.43165568E9F, homeLight0.getY(), 0.01F);
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertFalse(homeLight0.isResizable());
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertNull(homeLight0.getShininess());
      assertTrue(homeLight0.isVisible());
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertFalse(homeLight0.isTexturable());
      assertNull(homeLight0.getDescription());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertNull(homeLight0.getCatalogId());
      assertFalse(homeLight0.isModelMirrored());
      assertNull(homeLight0.getColor());
      assertFalse(homeLight0.isBackFaceShown());
      assertTrue(homeLight1.isVisible());
      assertEquals((-691.8207F), homeLight1.getNameYOffset(), 0.01F);
      assertEquals(1301.7253F, homeLight1.getX(), 0.01F);
      assertNull(homeLight1.getShininess());
      assertFalse(homeLight1.isDeformable());
      assertFalse(homeLight1.isResizable());
      assertNull(homeLight1.getCatalogId());
      assertNull(homeLight1.getColor());
      assertNull(homeLight1.getCurrency());
      assertFalse(homeLight1.isMovable());
      assertEquals(0.0F, homeLight1.getHeight(), 0.01F);
      assertEquals(0.5F, homeLight1.getPower(), 0.01F);
      assertEquals(0.0F, homeLight1.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight1.getDepth(), 0.01F);
      assertFalse(homeLight1.isBackFaceShown());
      assertFalse(homeLight1.isModelMirrored());
      assertEquals(0.0F, homeLight1.getNameAngle(), 0.01F);
      assertNull(homeLight1.getStaircaseCutOutShape());
      assertFalse(homeLight1.isNameVisible());
      assertEquals(0.0F, homeLight1.getNameXOffset(), 0.01F);
      assertEquals(1.43165568E9F, homeLight1.getY(), 0.01F);
      assertEquals(0.0F, homeLight1.getAngle(), 0.01F);
      assertEquals(0.0F, homeLight1.getElevation(), 0.01F);
      assertEquals(0.0F, homeLight1.getWidth(), 0.01F);
      assertEquals("DOOR_OR_WINDOW", homeLight1.getName());
      assertFalse(homeLight1.isTexturable());
      assertNull(homeLight1.getDescription());
      assertFalse(homeLight1.isDoorOrWindow());
      
      Content content0 = homeLight0.getModel();
      assertNull(content0);
      assertNotSame(homeLight0, homeLight1);
      assertFalse(homeLight0.equals((Object)homeLight1));
      assertEquals(1301.7253F, homeLight0.getX(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertFalse(homeLight0.isMovable());
      assertFalse(homeLight0.isNameVisible());
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertNull(homeLight0.getCurrency());
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertFalse(homeLight0.isDoorOrWindow());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertEquals("DOOR_OR_WINDOW", homeLight0.getName());
      assertFalse(homeLight0.isDeformable());
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals(1.43165568E9F, homeLight0.getY(), 0.01F);
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertFalse(homeLight0.isResizable());
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertNull(homeLight0.getShininess());
      assertTrue(homeLight0.isVisible());
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertFalse(homeLight0.isTexturable());
      assertNull(homeLight0.getDescription());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertNull(homeLight0.getCatalogId());
      assertFalse(homeLight0.isModelMirrored());
      assertNull(homeLight0.getColor());
      assertFalse(homeLight0.isBackFaceShown());
  }

  @Test(timeout = 4000)
  public void test193()  throws Throwable  {
      LightSource[] lightSourceArray0 = new LightSource[2];
      LightSource lightSource0 = new LightSource((-1.0F), (-1457.99F), 375.34912F, 1431655765);
      assertNotNull(lightSource0);
      assertNull(lightSource0.getDiameter());
      assertEquals((-1457.99F), lightSource0.getY(), 0.01F);
      assertEquals((-1.0F), lightSource0.getX(), 0.01F);
      assertEquals(375.34912F, lightSource0.getZ(), 0.01F);
      assertEquals(1431655765, lightSource0.getColor());
      
      LightSource lightSource1 = new LightSource((-1.0F), (-69.47F), 1.0F, (-853));
      assertNotNull(lightSource1);
      assertFalse(lightSource1.equals((Object)lightSource0));
      assertEquals((-69.47F), lightSource1.getY(), 0.01F);
      assertEquals((-1.0F), lightSource1.getX(), 0.01F);
      assertEquals((-853), lightSource1.getColor());
      assertNull(lightSource1.getDiameter());
      assertEquals(1.0F, lightSource1.getZ(), 0.01F);
      
      lightSourceArray0[1] = lightSource1;
      Integer integer0 = new Integer((-853));
      assertNotNull(integer0);
      assertEquals((-853), (int)integer0);
      
      Light light0 = mock(Light.class, new ViolatedAssumptionAnswer());
      doReturn((LightSource[]) null).when(light0).getLightSources();
      doReturn((Integer) null).when(light0).getColor();
      doReturn((String) null).when(light0).getCurrency();
      doReturn(0.0F).when(light0).getDepth();
      doReturn((String) null).when(light0).getDescription();
      doReturn(0.0F).when(light0).getElevation();
      doReturn(0.0F).when(light0).getHeight();
      doReturn((Content) null).when(light0).getIcon();
      doReturn((Content) null).when(light0).getModel();
      doReturn((float[][]) null).when(light0).getModelRotation();
      doReturn((String) null).when(light0).getName();
      doReturn((Content) null).when(light0).getPlanIcon();
      doReturn((BigDecimal) null).when(light0).getPrice();
      doReturn((String) null).when(light0).getStaircaseCutOutShape();
      doReturn((BigDecimal) null).when(light0).getValueAddedTaxPercentage();
      doReturn(0.0F).when(light0).getWidth();
      doReturn(false).when(light0).isBackFaceShown();
      doReturn(false).when(light0).isDeformable();
      doReturn(false).when(light0).isDoorOrWindow();
      doReturn(false).when(light0).isMovable();
      doReturn(false).when(light0).isResizable();
      doReturn(false).when(light0).isTexturable();
      byte[] byteArray0 = new byte[5];
      byteArray0[1] = (byte)1;
      byteArray0[4] = (byte)62;
      boolean boolean0 = FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      assertEquals(5, byteArray0.length);
      assertFalse(boolean0);
      assertArrayEquals(new byte[] {(byte)0, (byte)1, (byte)0, (byte)0, (byte)62}, byteArray0);
      
      HomeLight homeLight0 = new HomeLight(light0);
      assertNotNull(homeLight0);
      assertFalse(homeLight0.isResizable());
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertNull(homeLight0.getCurrency());
      assertFalse(homeLight0.isMovable());
      assertNull(homeLight0.getCatalogId());
      assertNull(homeLight0.getColor());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertFalse(homeLight0.isNameVisible());
      assertNull(homeLight0.getName());
      assertFalse(homeLight0.isBackFaceShown());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertFalse(homeLight0.isModelMirrored());
      assertFalse(homeLight0.isTexturable());
      assertNull(homeLight0.getDescription());
      assertFalse(homeLight0.isDoorOrWindow());
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertFalse(homeLight0.isDeformable());
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertNull(homeLight0.getShininess());
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertTrue(homeLight0.isVisible());
      
      homeLight0.setY((-1.0F));
      assertFalse(homeLight0.isResizable());
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertNull(homeLight0.getCurrency());
      assertFalse(homeLight0.isMovable());
      assertNull(homeLight0.getCatalogId());
      assertNull(homeLight0.getColor());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertFalse(homeLight0.isNameVisible());
      assertNull(homeLight0.getName());
      assertFalse(homeLight0.isBackFaceShown());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertFalse(homeLight0.isModelMirrored());
      assertFalse(homeLight0.isTexturable());
      assertNull(homeLight0.getDescription());
      assertFalse(homeLight0.isDoorOrWindow());
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertFalse(homeLight0.isDeformable());
      assertEquals((-1.0F), homeLight0.getY(), 0.01F);
      assertNull(homeLight0.getShininess());
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertTrue(homeLight0.isVisible());
      
      int int0 = Float.floatToIntBits((-1710.0F));
      assertEquals((-992624640), int0);
      
      int int1 = Float.floatToIntBits((-1710.0F));
      assertTrue(int1 == int0);
      assertEquals((-992624640), int1);
      
      HomeLight homeLight1 = homeLight0.clone();
      assertNotNull(homeLight1);
      assertNotSame(homeLight0, homeLight1);
      assertNotSame(homeLight1, homeLight0);
      assertFalse(homeLight1.equals((Object)homeLight0));
      assertFalse(homeLight0.isResizable());
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertNull(homeLight0.getCurrency());
      assertFalse(homeLight0.isMovable());
      assertNull(homeLight0.getCatalogId());
      assertNull(homeLight0.getColor());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertFalse(homeLight0.isNameVisible());
      assertNull(homeLight0.getName());
      assertFalse(homeLight0.isBackFaceShown());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertFalse(homeLight0.isModelMirrored());
      assertFalse(homeLight0.isTexturable());
      assertNull(homeLight0.getDescription());
      assertFalse(homeLight0.isDoorOrWindow());
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertFalse(homeLight0.isDeformable());
      assertEquals((-1.0F), homeLight0.getY(), 0.01F);
      assertNull(homeLight0.getShininess());
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertTrue(homeLight0.isVisible());
      assertNull(homeLight1.getDescription());
      assertFalse(homeLight1.isTexturable());
      assertEquals(0.0F, homeLight1.getElevation(), 0.01F);
      assertNull(homeLight1.getName());
      assertEquals(0.0F, homeLight1.getAngle(), 0.01F);
      assertEquals(0.5F, homeLight1.getPower(), 0.01F);
      assertNull(homeLight1.getShininess());
      assertFalse(homeLight1.isDoorOrWindow());
      assertEquals(0.0F, homeLight1.getNameAngle(), 0.01F);
      assertNull(homeLight1.getStaircaseCutOutShape());
      assertFalse(homeLight1.isResizable());
      assertEquals(0.0F, homeLight1.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight1.getDepth(), 0.01F);
      assertFalse(homeLight1.isDeformable());
      assertEquals(0.0F, homeLight1.getNameXOffset(), 0.01F);
      assertEquals((-1.0F), homeLight1.getY(), 0.01F);
      assertEquals(0.0F, homeLight1.getX(), 0.01F);
      assertEquals(0.0F, homeLight1.getWidth(), 0.01F);
      assertTrue(homeLight1.isVisible());
      assertFalse(homeLight1.isMovable());
      assertFalse(homeLight1.isNameVisible());
      assertNull(homeLight1.getCurrency());
      assertEquals(0.0F, homeLight1.getHeight(), 0.01F);
      assertFalse(homeLight1.isBackFaceShown());
      assertFalse(homeLight1.isModelMirrored());
      assertNull(homeLight1.getCatalogId());
      assertEquals(0.0F, homeLight1.getNameYOffset(), 0.01F);
      assertNull(homeLight1.getColor());
      
      BigDecimal bigDecimal0 = homeLight1.getValueAddedTax();
      assertNull(bigDecimal0);
      assertNotSame(homeLight0, homeLight1);
      assertNotSame(homeLight1, homeLight0);
      assertFalse(homeLight0.equals((Object)homeLight1));
      assertFalse(homeLight1.equals((Object)homeLight0));
      assertFalse(homeLight0.isResizable());
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertNull(homeLight0.getCurrency());
      assertFalse(homeLight0.isMovable());
      assertNull(homeLight0.getCatalogId());
      assertNull(homeLight0.getColor());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertFalse(homeLight0.isNameVisible());
      assertNull(homeLight0.getName());
      assertFalse(homeLight0.isBackFaceShown());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertFalse(homeLight0.isModelMirrored());
      assertFalse(homeLight0.isTexturable());
      assertNull(homeLight0.getDescription());
      assertFalse(homeLight0.isDoorOrWindow());
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertFalse(homeLight0.isDeformable());
      assertEquals((-1.0F), homeLight0.getY(), 0.01F);
      assertNull(homeLight0.getShininess());
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertTrue(homeLight0.isVisible());
      assertNull(homeLight1.getDescription());
      assertFalse(homeLight1.isTexturable());
      assertEquals(0.0F, homeLight1.getElevation(), 0.01F);
      assertNull(homeLight1.getName());
      assertEquals(0.0F, homeLight1.getAngle(), 0.01F);
      assertEquals(0.5F, homeLight1.getPower(), 0.01F);
      assertNull(homeLight1.getShininess());
      assertFalse(homeLight1.isDoorOrWindow());
      assertEquals(0.0F, homeLight1.getNameAngle(), 0.01F);
      assertNull(homeLight1.getStaircaseCutOutShape());
      assertFalse(homeLight1.isResizable());
      assertEquals(0.0F, homeLight1.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight1.getDepth(), 0.01F);
      assertFalse(homeLight1.isDeformable());
      assertEquals(0.0F, homeLight1.getNameXOffset(), 0.01F);
      assertEquals((-1.0F), homeLight1.getY(), 0.01F);
      assertEquals(0.0F, homeLight1.getX(), 0.01F);
      assertEquals(0.0F, homeLight1.getWidth(), 0.01F);
      assertTrue(homeLight1.isVisible());
      assertFalse(homeLight1.isMovable());
      assertFalse(homeLight1.isNameVisible());
      assertNull(homeLight1.getCurrency());
      assertEquals(0.0F, homeLight1.getHeight(), 0.01F);
      assertFalse(homeLight1.isBackFaceShown());
      assertFalse(homeLight1.isModelMirrored());
      assertNull(homeLight1.getCatalogId());
      assertEquals(0.0F, homeLight1.getNameYOffset(), 0.01F);
      assertNull(homeLight1.getColor());
      
      BigDecimal bigDecimal1 = homeLight0.getValueAddedTax();
      assertNull(bigDecimal1);
      assertNotSame(homeLight0, homeLight1);
      assertFalse(homeLight0.equals((Object)homeLight1));
      assertFalse(homeLight0.isResizable());
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertNull(homeLight0.getCurrency());
      assertFalse(homeLight0.isMovable());
      assertNull(homeLight0.getCatalogId());
      assertNull(homeLight0.getColor());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertFalse(homeLight0.isNameVisible());
      assertNull(homeLight0.getName());
      assertFalse(homeLight0.isBackFaceShown());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertFalse(homeLight0.isModelMirrored());
      assertFalse(homeLight0.isTexturable());
      assertNull(homeLight0.getDescription());
      assertFalse(homeLight0.isDoorOrWindow());
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertFalse(homeLight0.isDeformable());
      assertEquals((-1.0F), homeLight0.getY(), 0.01F);
      assertNull(homeLight0.getShininess());
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertTrue(homeLight0.isVisible());
      
      String string0 = homeLight0.getName();
      assertNull(string0);
      assertNotSame(homeLight0, homeLight1);
      assertFalse(homeLight0.equals((Object)homeLight1));
      assertFalse(homeLight0.isResizable());
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertNull(homeLight0.getCurrency());
      assertFalse(homeLight0.isMovable());
      assertNull(homeLight0.getCatalogId());
      assertNull(homeLight0.getColor());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertFalse(homeLight0.isNameVisible());
      assertNull(homeLight0.getName());
      assertFalse(homeLight0.isBackFaceShown());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertFalse(homeLight0.isModelMirrored());
      assertFalse(homeLight0.isTexturable());
      assertNull(homeLight0.getDescription());
      assertFalse(homeLight0.isDoorOrWindow());
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertFalse(homeLight0.isDeformable());
      assertEquals((-1.0F), homeLight0.getY(), 0.01F);
      assertNull(homeLight0.getShininess());
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertTrue(homeLight0.isVisible());
      
      Level level0 = homeLight0.getLevel();
      assertNull(level0);
      assertNotSame(homeLight0, homeLight1);
      assertFalse(homeLight0.equals((Object)homeLight1));
      assertFalse(homeLight0.isResizable());
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertNull(homeLight0.getCurrency());
      assertFalse(homeLight0.isMovable());
      assertNull(homeLight0.getCatalogId());
      assertNull(homeLight0.getColor());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertFalse(homeLight0.isNameVisible());
      assertNull(homeLight0.getName());
      assertFalse(homeLight0.isBackFaceShown());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertFalse(homeLight0.isModelMirrored());
      assertFalse(homeLight0.isTexturable());
      assertNull(homeLight0.getDescription());
      assertFalse(homeLight0.isDoorOrWindow());
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertFalse(homeLight0.isDeformable());
      assertEquals((-1.0F), homeLight0.getY(), 0.01F);
      assertNull(homeLight0.getShininess());
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertTrue(homeLight0.isVisible());
      
      HomeLight homeLight2 = homeLight1.clone();
      assertNotNull(homeLight2);
      assertNotSame(homeLight2, homeLight0);
      assertNotSame(homeLight2, homeLight1);
      assertNotSame(homeLight0, homeLight2);
      assertNotSame(homeLight0, homeLight1);
      assertNotSame(homeLight1, homeLight2);
      assertNotSame(homeLight1, homeLight0);
      assertFalse(homeLight2.equals((Object)homeLight0));
      assertFalse(homeLight2.equals((Object)homeLight1));
      assertFalse(homeLight0.equals((Object)homeLight1));
      assertFalse(homeLight1.equals((Object)homeLight0));
      assertEquals(0.0F, homeLight2.getAngle(), 0.01F);
      assertFalse(homeLight2.isDoorOrWindow());
      assertFalse(homeLight2.isModelMirrored());
      assertNull(homeLight2.getColor());
      assertFalse(homeLight2.isTexturable());
      assertEquals(0.0F, homeLight2.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight2.getX(), 0.01F);
      assertEquals(0.0F, homeLight2.getNameXOffset(), 0.01F);
      assertEquals((-1.0F), homeLight2.getY(), 0.01F);
      assertFalse(homeLight2.isDeformable());
      assertNull(homeLight2.getCurrency());
      assertEquals(0.5F, homeLight2.getPower(), 0.01F);
      assertEquals(0.0F, homeLight2.getNameAngle(), 0.01F);
      assertNull(homeLight2.getStaircaseCutOutShape());
      assertTrue(homeLight2.isVisible());
      assertEquals(0.0F, homeLight2.getDepth(), 0.01F);
      assertFalse(homeLight2.isMovable());
      assertFalse(homeLight2.isResizable());
      assertNull(homeLight2.getShininess());
      assertEquals(0.0F, homeLight2.getHeight(), 0.01F);
      assertNull(homeLight2.getCatalogId());
      assertEquals(0.0F, homeLight2.getNameYOffset(), 0.01F);
      assertEquals(0.0F, homeLight2.getWidth(), 0.01F);
      assertNull(homeLight2.getDescription());
      assertEquals(0.0F, homeLight2.getElevation(), 0.01F);
      assertFalse(homeLight2.isBackFaceShown());
      assertNull(homeLight2.getName());
      assertFalse(homeLight2.isNameVisible());
      assertFalse(homeLight0.isResizable());
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertNull(homeLight0.getCurrency());
      assertFalse(homeLight0.isMovable());
      assertNull(homeLight0.getCatalogId());
      assertNull(homeLight0.getColor());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertFalse(homeLight0.isNameVisible());
      assertNull(homeLight0.getName());
      assertFalse(homeLight0.isBackFaceShown());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertFalse(homeLight0.isModelMirrored());
      assertFalse(homeLight0.isTexturable());
      assertNull(homeLight0.getDescription());
      assertFalse(homeLight0.isDoorOrWindow());
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertFalse(homeLight0.isDeformable());
      assertEquals((-1.0F), homeLight0.getY(), 0.01F);
      assertNull(homeLight0.getShininess());
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertTrue(homeLight0.isVisible());
      assertNull(homeLight1.getDescription());
      assertFalse(homeLight1.isTexturable());
      assertEquals(0.0F, homeLight1.getElevation(), 0.01F);
      assertNull(homeLight1.getName());
      assertEquals(0.0F, homeLight1.getAngle(), 0.01F);
      assertEquals(0.5F, homeLight1.getPower(), 0.01F);
      assertNull(homeLight1.getShininess());
      assertFalse(homeLight1.isDoorOrWindow());
      assertEquals(0.0F, homeLight1.getNameAngle(), 0.01F);
      assertNull(homeLight1.getStaircaseCutOutShape());
      assertFalse(homeLight1.isResizable());
      assertEquals(0.0F, homeLight1.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight1.getDepth(), 0.01F);
      assertFalse(homeLight1.isDeformable());
      assertEquals(0.0F, homeLight1.getNameXOffset(), 0.01F);
      assertEquals((-1.0F), homeLight1.getY(), 0.01F);
      assertEquals(0.0F, homeLight1.getX(), 0.01F);
      assertEquals(0.0F, homeLight1.getWidth(), 0.01F);
      assertTrue(homeLight1.isVisible());
      assertFalse(homeLight1.isMovable());
      assertFalse(homeLight1.isNameVisible());
      assertNull(homeLight1.getCurrency());
      assertEquals(0.0F, homeLight1.getHeight(), 0.01F);
      assertFalse(homeLight1.isBackFaceShown());
      assertFalse(homeLight1.isModelMirrored());
      assertNull(homeLight1.getCatalogId());
      assertEquals(0.0F, homeLight1.getNameYOffset(), 0.01F);
      assertNull(homeLight1.getColor());
      
      homeLight0.setName((String) null);
      assertNotSame(homeLight0, homeLight2);
      assertNotSame(homeLight0, homeLight1);
      assertFalse(homeLight0.equals((Object)homeLight2));
      assertFalse(homeLight0.equals((Object)homeLight1));
      assertFalse(homeLight0.isResizable());
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertNull(homeLight0.getCurrency());
      assertFalse(homeLight0.isMovable());
      assertNull(homeLight0.getCatalogId());
      assertNull(homeLight0.getColor());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertFalse(homeLight0.isNameVisible());
      assertNull(homeLight0.getName());
      assertFalse(homeLight0.isBackFaceShown());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertFalse(homeLight0.isModelMirrored());
      assertFalse(homeLight0.isTexturable());
      assertNull(homeLight0.getDescription());
      assertFalse(homeLight0.isDoorOrWindow());
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertFalse(homeLight0.isDeformable());
      assertEquals((-1.0F), homeLight0.getY(), 0.01F);
      assertNull(homeLight0.getShininess());
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertTrue(homeLight0.isVisible());
      
      homeLight1.setNameYOffset(321.7305F);
      assertNotSame(homeLight0, homeLight2);
      assertNotSame(homeLight0, homeLight1);
      assertNotSame(homeLight1, homeLight2);
      assertNotSame(homeLight1, homeLight0);
      assertFalse(homeLight0.equals((Object)homeLight2));
      assertFalse(homeLight0.equals((Object)homeLight1));
      assertFalse(homeLight1.equals((Object)homeLight2));
      assertFalse(homeLight1.equals((Object)homeLight0));
      assertFalse(homeLight0.isResizable());
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertNull(homeLight0.getCurrency());
      assertFalse(homeLight0.isMovable());
      assertNull(homeLight0.getCatalogId());
      assertNull(homeLight0.getColor());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertFalse(homeLight0.isNameVisible());
      assertNull(homeLight0.getName());
      assertFalse(homeLight0.isBackFaceShown());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertFalse(homeLight0.isModelMirrored());
      assertFalse(homeLight0.isTexturable());
      assertNull(homeLight0.getDescription());
      assertFalse(homeLight0.isDoorOrWindow());
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertFalse(homeLight0.isDeformable());
      assertEquals((-1.0F), homeLight0.getY(), 0.01F);
      assertNull(homeLight0.getShininess());
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertTrue(homeLight0.isVisible());
      assertEquals(321.7305F, homeLight1.getNameYOffset(), 0.01F);
      assertNull(homeLight1.getDescription());
      assertFalse(homeLight1.isTexturable());
      assertEquals(0.0F, homeLight1.getElevation(), 0.01F);
      assertNull(homeLight1.getName());
      assertEquals(0.0F, homeLight1.getAngle(), 0.01F);
      assertEquals(0.5F, homeLight1.getPower(), 0.01F);
      assertNull(homeLight1.getShininess());
      assertFalse(homeLight1.isDoorOrWindow());
      assertEquals(0.0F, homeLight1.getNameAngle(), 0.01F);
      assertNull(homeLight1.getStaircaseCutOutShape());
      assertFalse(homeLight1.isResizable());
      assertEquals(0.0F, homeLight1.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight1.getDepth(), 0.01F);
      assertFalse(homeLight1.isDeformable());
      assertEquals(0.0F, homeLight1.getNameXOffset(), 0.01F);
      assertEquals((-1.0F), homeLight1.getY(), 0.01F);
      assertEquals(0.0F, homeLight1.getX(), 0.01F);
      assertEquals(0.0F, homeLight1.getWidth(), 0.01F);
      assertTrue(homeLight1.isVisible());
      assertFalse(homeLight1.isMovable());
      assertFalse(homeLight1.isNameVisible());
      assertNull(homeLight1.getCurrency());
      assertEquals(0.0F, homeLight1.getHeight(), 0.01F);
      assertFalse(homeLight1.isBackFaceShown());
      assertFalse(homeLight1.isModelMirrored());
      assertNull(homeLight1.getCatalogId());
      assertNull(homeLight1.getColor());
      
      BigDecimal bigDecimal2 = homeLight2.getPriceValueAddedTaxIncluded();
      assertNull(bigDecimal2);
      assertNotSame(homeLight2, homeLight0);
      assertNotSame(homeLight2, homeLight1);
      assertNotSame(homeLight0, homeLight2);
      assertNotSame(homeLight0, homeLight1);
      assertNotSame(homeLight1, homeLight2);
      assertNotSame(homeLight1, homeLight0);
      assertFalse(homeLight2.equals((Object)homeLight0));
      assertFalse(homeLight2.equals((Object)homeLight1));
      assertFalse(homeLight0.equals((Object)homeLight2));
      assertFalse(homeLight0.equals((Object)homeLight1));
      assertFalse(homeLight1.equals((Object)homeLight2));
      assertFalse(homeLight1.equals((Object)homeLight0));
      assertEquals(0.0F, homeLight2.getAngle(), 0.01F);
      assertFalse(homeLight2.isDoorOrWindow());
      assertFalse(homeLight2.isModelMirrored());
      assertNull(homeLight2.getColor());
      assertFalse(homeLight2.isTexturable());
      assertEquals(0.0F, homeLight2.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight2.getX(), 0.01F);
      assertEquals(0.0F, homeLight2.getNameXOffset(), 0.01F);
      assertEquals((-1.0F), homeLight2.getY(), 0.01F);
      assertFalse(homeLight2.isDeformable());
      assertNull(homeLight2.getCurrency());
      assertEquals(0.5F, homeLight2.getPower(), 0.01F);
      assertEquals(0.0F, homeLight2.getNameAngle(), 0.01F);
      assertNull(homeLight2.getStaircaseCutOutShape());
      assertTrue(homeLight2.isVisible());
      assertEquals(0.0F, homeLight2.getDepth(), 0.01F);
      assertFalse(homeLight2.isMovable());
      assertFalse(homeLight2.isResizable());
      assertNull(homeLight2.getShininess());
      assertEquals(0.0F, homeLight2.getHeight(), 0.01F);
      assertNull(homeLight2.getCatalogId());
      assertEquals(0.0F, homeLight2.getNameYOffset(), 0.01F);
      assertEquals(0.0F, homeLight2.getWidth(), 0.01F);
      assertNull(homeLight2.getDescription());
      assertEquals(0.0F, homeLight2.getElevation(), 0.01F);
      assertFalse(homeLight2.isBackFaceShown());
      assertNull(homeLight2.getName());
      assertFalse(homeLight2.isNameVisible());
      assertFalse(homeLight0.isResizable());
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertNull(homeLight0.getCurrency());
      assertFalse(homeLight0.isMovable());
      assertNull(homeLight0.getCatalogId());
      assertNull(homeLight0.getColor());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertFalse(homeLight0.isNameVisible());
      assertNull(homeLight0.getName());
      assertFalse(homeLight0.isBackFaceShown());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertFalse(homeLight0.isModelMirrored());
      assertFalse(homeLight0.isTexturable());
      assertNull(homeLight0.getDescription());
      assertFalse(homeLight0.isDoorOrWindow());
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertFalse(homeLight0.isDeformable());
      assertEquals((-1.0F), homeLight0.getY(), 0.01F);
      assertNull(homeLight0.getShininess());
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertTrue(homeLight0.isVisible());
      assertEquals(321.7305F, homeLight1.getNameYOffset(), 0.01F);
      assertNull(homeLight1.getDescription());
      assertFalse(homeLight1.isTexturable());
      assertEquals(0.0F, homeLight1.getElevation(), 0.01F);
      assertNull(homeLight1.getName());
      assertEquals(0.0F, homeLight1.getAngle(), 0.01F);
      assertEquals(0.5F, homeLight1.getPower(), 0.01F);
      assertNull(homeLight1.getShininess());
      assertFalse(homeLight1.isDoorOrWindow());
      assertEquals(0.0F, homeLight1.getNameAngle(), 0.01F);
      assertNull(homeLight1.getStaircaseCutOutShape());
      assertFalse(homeLight1.isResizable());
      assertEquals(0.0F, homeLight1.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight1.getDepth(), 0.01F);
      assertFalse(homeLight1.isDeformable());
      assertEquals(0.0F, homeLight1.getNameXOffset(), 0.01F);
      assertEquals((-1.0F), homeLight1.getY(), 0.01F);
      assertEquals(0.0F, homeLight1.getX(), 0.01F);
      assertEquals(0.0F, homeLight1.getWidth(), 0.01F);
      assertTrue(homeLight1.isVisible());
      assertFalse(homeLight1.isMovable());
      assertFalse(homeLight1.isNameVisible());
      assertNull(homeLight1.getCurrency());
      assertEquals(0.0F, homeLight1.getHeight(), 0.01F);
      assertFalse(homeLight1.isBackFaceShown());
      assertFalse(homeLight1.isModelMirrored());
      assertNull(homeLight1.getCatalogId());
      assertNull(homeLight1.getColor());
      
      String string1 = homeLight1.getStaircaseCutOutShape();
      assertNull(string1);
      assertNotSame(homeLight0, homeLight2);
      assertNotSame(homeLight0, homeLight1);
      assertNotSame(homeLight1, homeLight2);
      assertNotSame(homeLight1, homeLight0);
      assertFalse(homeLight0.equals((Object)homeLight2));
      assertFalse(homeLight0.equals((Object)homeLight1));
      assertFalse(homeLight1.equals((Object)homeLight2));
      assertFalse(homeLight1.equals((Object)homeLight0));
      assertFalse(homeLight0.isResizable());
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertNull(homeLight0.getCurrency());
      assertFalse(homeLight0.isMovable());
      assertNull(homeLight0.getCatalogId());
      assertNull(homeLight0.getColor());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertFalse(homeLight0.isNameVisible());
      assertNull(homeLight0.getName());
      assertFalse(homeLight0.isBackFaceShown());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertFalse(homeLight0.isModelMirrored());
      assertFalse(homeLight0.isTexturable());
      assertNull(homeLight0.getDescription());
      assertFalse(homeLight0.isDoorOrWindow());
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertFalse(homeLight0.isDeformable());
      assertEquals((-1.0F), homeLight0.getY(), 0.01F);
      assertNull(homeLight0.getShininess());
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertTrue(homeLight0.isVisible());
      assertEquals(321.7305F, homeLight1.getNameYOffset(), 0.01F);
      assertNull(homeLight1.getDescription());
      assertFalse(homeLight1.isTexturable());
      assertEquals(0.0F, homeLight1.getElevation(), 0.01F);
      assertNull(homeLight1.getName());
      assertEquals(0.0F, homeLight1.getAngle(), 0.01F);
      assertEquals(0.5F, homeLight1.getPower(), 0.01F);
      assertNull(homeLight1.getShininess());
      assertFalse(homeLight1.isDoorOrWindow());
      assertEquals(0.0F, homeLight1.getNameAngle(), 0.01F);
      assertNull(homeLight1.getStaircaseCutOutShape());
      assertFalse(homeLight1.isResizable());
      assertEquals(0.0F, homeLight1.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight1.getDepth(), 0.01F);
      assertFalse(homeLight1.isDeformable());
      assertEquals(0.0F, homeLight1.getNameXOffset(), 0.01F);
      assertEquals((-1.0F), homeLight1.getY(), 0.01F);
      assertEquals(0.0F, homeLight1.getX(), 0.01F);
      assertEquals(0.0F, homeLight1.getWidth(), 0.01F);
      assertTrue(homeLight1.isVisible());
      assertFalse(homeLight1.isMovable());
      assertFalse(homeLight1.isNameVisible());
      assertNull(homeLight1.getCurrency());
      assertEquals(0.0F, homeLight1.getHeight(), 0.01F);
      assertFalse(homeLight1.isBackFaceShown());
      assertFalse(homeLight1.isModelMirrored());
      assertNull(homeLight1.getCatalogId());
      assertNull(homeLight1.getColor());
  }

  @Test(timeout = 4000)
  public void test194()  throws Throwable  {
      Integer integer0 = new Integer((-1469));
      assertNotNull(integer0);
      assertEquals((-1469), (int)integer0);
      
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      Light light0 = mock(Light.class, new ViolatedAssumptionAnswer());
      doReturn((LightSource[]) null).when(light0).getLightSources();
      doReturn((Integer) null).when(light0).getColor();
      doReturn((String) null).when(light0).getCurrency();
      doReturn(0.0F).when(light0).getDepth();
      doReturn((String) null).when(light0).getDescription();
      doReturn(0.0F).when(light0).getElevation();
      doReturn(0.0F).when(light0).getHeight();
      doReturn((Content) null).when(light0).getIcon();
      doReturn((Content) null).when(light0).getModel();
      doReturn((float[][]) null).when(light0).getModelRotation();
      doReturn((String) null).when(light0).getName();
      doReturn((Content) null).when(light0).getPlanIcon();
      doReturn((BigDecimal) null).when(light0).getPrice();
      doReturn((String) null).when(light0).getStaircaseCutOutShape();
      doReturn((BigDecimal) null).when(light0).getValueAddedTaxPercentage();
      doReturn(0.0F).when(light0).getWidth();
      doReturn(false).when(light0).isBackFaceShown();
      doReturn(false).when(light0).isDeformable();
      doReturn(false).when(light0).isDoorOrWindow();
      doReturn(false).when(light0).isMovable();
      doReturn(false).when(light0).isResizable();
      doReturn(false).when(light0).isTexturable();
      HomeLight homeLight0 = new HomeLight(light0);
      assertNotNull(homeLight0);
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertNull(homeLight0.getColor());
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertFalse(homeLight0.isTexturable());
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertNull(homeLight0.getDescription());
      assertFalse(homeLight0.isNameVisible());
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertFalse(homeLight0.isModelMirrored());
      assertFalse(homeLight0.isBackFaceShown());
      assertNull(homeLight0.getName());
      assertFalse(homeLight0.isMovable());
      assertFalse(homeLight0.isResizable());
      assertNull(homeLight0.getShininess());
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertNull(homeLight0.getCatalogId());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertFalse(homeLight0.isDeformable());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertTrue(homeLight0.isVisible());
      assertNull(homeLight0.getCurrency());
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      
      homeLight0.setElevation((-1.0F));
      assertEquals((-1.0F), homeLight0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertNull(homeLight0.getColor());
      assertEquals((-1.0F), homeLight0.getElevation(), 0.01F);
      assertFalse(homeLight0.isTexturable());
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertNull(homeLight0.getDescription());
      assertFalse(homeLight0.isNameVisible());
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertFalse(homeLight0.isModelMirrored());
      assertFalse(homeLight0.isBackFaceShown());
      assertNull(homeLight0.getName());
      assertFalse(homeLight0.isMovable());
      assertFalse(homeLight0.isResizable());
      assertNull(homeLight0.getShininess());
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertNull(homeLight0.getCatalogId());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertFalse(homeLight0.isDeformable());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertTrue(homeLight0.isVisible());
      assertNull(homeLight0.getCurrency());
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      
      homeLight0.setNameAngle(0.0F);
      assertEquals((-1.0F), homeLight0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertNull(homeLight0.getColor());
      assertEquals((-1.0F), homeLight0.getElevation(), 0.01F);
      assertFalse(homeLight0.isTexturable());
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertNull(homeLight0.getDescription());
      assertFalse(homeLight0.isNameVisible());
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertFalse(homeLight0.isModelMirrored());
      assertFalse(homeLight0.isBackFaceShown());
      assertNull(homeLight0.getName());
      assertFalse(homeLight0.isMovable());
      assertFalse(homeLight0.isResizable());
      assertNull(homeLight0.getShininess());
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertNull(homeLight0.getCatalogId());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertFalse(homeLight0.isDeformable());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertTrue(homeLight0.isVisible());
      assertNull(homeLight0.getCurrency());
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      
      homeLight0.setY((-1.0F));
      assertEquals((-1.0F), homeLight0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertNull(homeLight0.getColor());
      assertEquals((-1.0F), homeLight0.getElevation(), 0.01F);
      assertFalse(homeLight0.isTexturable());
      assertEquals((-1.0F), homeLight0.getY(), 0.01F);
      assertNull(homeLight0.getDescription());
      assertFalse(homeLight0.isNameVisible());
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertFalse(homeLight0.isModelMirrored());
      assertFalse(homeLight0.isBackFaceShown());
      assertNull(homeLight0.getName());
      assertFalse(homeLight0.isMovable());
      assertFalse(homeLight0.isResizable());
      assertNull(homeLight0.getShininess());
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertNull(homeLight0.getCatalogId());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertFalse(homeLight0.isDeformable());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertTrue(homeLight0.isVisible());
      assertNull(homeLight0.getCurrency());
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      
      Level level0 = homeLight0.getLevel();
      assertNull(level0);
      assertEquals((-1.0F), homeLight0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertNull(homeLight0.getColor());
      assertEquals((-1.0F), homeLight0.getElevation(), 0.01F);
      assertFalse(homeLight0.isTexturable());
      assertEquals((-1.0F), homeLight0.getY(), 0.01F);
      assertNull(homeLight0.getDescription());
      assertFalse(homeLight0.isNameVisible());
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertFalse(homeLight0.isModelMirrored());
      assertFalse(homeLight0.isBackFaceShown());
      assertNull(homeLight0.getName());
      assertFalse(homeLight0.isMovable());
      assertFalse(homeLight0.isResizable());
      assertNull(homeLight0.getShininess());
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertNull(homeLight0.getCatalogId());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertFalse(homeLight0.isDeformable());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertTrue(homeLight0.isVisible());
      assertNull(homeLight0.getCurrency());
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      
      homeLight0.setName((String) null);
      assertEquals((-1.0F), homeLight0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertNull(homeLight0.getColor());
      assertEquals((-1.0F), homeLight0.getElevation(), 0.01F);
      assertFalse(homeLight0.isTexturable());
      assertEquals((-1.0F), homeLight0.getY(), 0.01F);
      assertNull(homeLight0.getDescription());
      assertFalse(homeLight0.isNameVisible());
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertFalse(homeLight0.isModelMirrored());
      assertFalse(homeLight0.isBackFaceShown());
      assertNull(homeLight0.getName());
      assertFalse(homeLight0.isMovable());
      assertFalse(homeLight0.isResizable());
      assertNull(homeLight0.getShininess());
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertNull(homeLight0.getCatalogId());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertFalse(homeLight0.isDeformable());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertTrue(homeLight0.isVisible());
      assertNull(homeLight0.getCurrency());
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      
      homeLight0.setNameYOffset((-192.7F));
      assertEquals((-1.0F), homeLight0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertNull(homeLight0.getColor());
      assertEquals((-1.0F), homeLight0.getElevation(), 0.01F);
      assertFalse(homeLight0.isTexturable());
      assertEquals((-1.0F), homeLight0.getY(), 0.01F);
      assertNull(homeLight0.getDescription());
      assertFalse(homeLight0.isNameVisible());
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertFalse(homeLight0.isModelMirrored());
      assertFalse(homeLight0.isBackFaceShown());
      assertNull(homeLight0.getName());
      assertFalse(homeLight0.isMovable());
      assertFalse(homeLight0.isResizable());
      assertNull(homeLight0.getShininess());
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertNull(homeLight0.getCatalogId());
      assertEquals((-192.7F), homeLight0.getNameYOffset(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertFalse(homeLight0.isDeformable());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertTrue(homeLight0.isVisible());
      assertNull(homeLight0.getCurrency());
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test195()  throws Throwable  {
      LightSource[] lightSourceArray0 = new LightSource[2];
      int int0 = 1431655765;
      LightSource lightSource0 = new LightSource((-1.0F), (-1457.99F), 381.9F, 1431655765);
      assertNotNull(lightSource0);
      assertEquals(1431655765, lightSource0.getColor());
      assertEquals(381.9F, lightSource0.getZ(), 0.01F);
      assertEquals((-1.0F), lightSource0.getX(), 0.01F);
      assertEquals((-1457.99F), lightSource0.getY(), 0.01F);
      assertNull(lightSource0.getDiameter());
      
      LightSource lightSource1 = new LightSource((-1.0F), (-69.47F), 700.4569F, (-853));
      assertNotNull(lightSource1);
      assertFalse(lightSource1.equals((Object)lightSource0));
      assertEquals((-853), lightSource1.getColor());
      assertNull(lightSource1.getDiameter());
      assertEquals((-1.0F), lightSource1.getX(), 0.01F);
      assertEquals(700.4569F, lightSource1.getZ(), 0.01F);
      assertEquals((-69.47F), lightSource1.getY(), 0.01F);
      
      lightSourceArray0[1] = lightSource1;
      Integer integer0 = new Integer((-853));
      assertNotNull(integer0);
      assertFalse(integer0.equals((Object)int0));
      assertEquals((-853), (int)integer0);
      
      Light light0 = mock(Light.class, new ViolatedAssumptionAnswer());
      doReturn((LightSource[]) null).when(light0).getLightSources();
      doReturn((Integer) null).when(light0).getColor();
      doReturn((String) null).when(light0).getCurrency();
      doReturn(0.0F).when(light0).getDepth();
      doReturn((String) null).when(light0).getDescription();
      doReturn(0.0F).when(light0).getElevation();
      doReturn(0.0F).when(light0).getHeight();
      doReturn((Content) null).when(light0).getIcon();
      doReturn((Content) null).when(light0).getModel();
      doReturn((float[][]) null).when(light0).getModelRotation();
      doReturn((String) null).when(light0).getName();
      doReturn((Content) null).when(light0).getPlanIcon();
      doReturn((BigDecimal) null).when(light0).getPrice();
      doReturn((String) null).when(light0).getStaircaseCutOutShape();
      doReturn((BigDecimal) null).when(light0).getValueAddedTaxPercentage();
      doReturn(0.0F).when(light0).getWidth();
      doReturn(false).when(light0).isBackFaceShown();
      doReturn(false).when(light0).isDeformable();
      doReturn(false).when(light0).isDoorOrWindow();
      doReturn(false).when(light0).isMovable();
      doReturn(false).when(light0).isResizable();
      doReturn(false).when(light0).isTexturable();
      byte[] byteArray0 = new byte[5];
      byteArray0[1] = (byte)1;
      HomeLight homeLight0 = new HomeLight(light0);
      assertNotNull(homeLight0);
      assertFalse(homeLight0.isMovable());
      assertFalse(homeLight0.isResizable());
      assertNull(homeLight0.getCatalogId());
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertNull(homeLight0.getDescription());
      assertNull(homeLight0.getCurrency());
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertTrue(homeLight0.isVisible());
      assertFalse(homeLight0.isDeformable());
      assertNull(homeLight0.getShininess());
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      assertFalse(homeLight0.isBackFaceShown());
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertNull(homeLight0.getColor());
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertFalse(homeLight0.isTexturable());
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertNull(homeLight0.getName());
      assertFalse(homeLight0.isNameVisible());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertFalse(homeLight0.isModelMirrored());
      
      homeLight0.setY(381.9F);
      assertFalse(homeLight0.isMovable());
      assertFalse(homeLight0.isResizable());
      assertNull(homeLight0.getCatalogId());
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertNull(homeLight0.getDescription());
      assertNull(homeLight0.getCurrency());
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertTrue(homeLight0.isVisible());
      assertFalse(homeLight0.isDeformable());
      assertNull(homeLight0.getShininess());
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      assertFalse(homeLight0.isBackFaceShown());
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertNull(homeLight0.getColor());
      assertFalse(homeLight0.isTexturable());
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertEquals(381.9F, homeLight0.getY(), 0.01F);
      assertNull(homeLight0.getName());
      assertFalse(homeLight0.isNameVisible());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertFalse(homeLight0.isModelMirrored());
      
      BigDecimal bigDecimal0 = homeLight0.getValueAddedTax();
      assertNull(bigDecimal0);
      assertFalse(homeLight0.isMovable());
      assertFalse(homeLight0.isResizable());
      assertNull(homeLight0.getCatalogId());
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertNull(homeLight0.getDescription());
      assertNull(homeLight0.getCurrency());
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertTrue(homeLight0.isVisible());
      assertFalse(homeLight0.isDeformable());
      assertNull(homeLight0.getShininess());
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      assertFalse(homeLight0.isBackFaceShown());
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertNull(homeLight0.getColor());
      assertFalse(homeLight0.isTexturable());
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertEquals(381.9F, homeLight0.getY(), 0.01F);
      assertNull(homeLight0.getName());
      assertFalse(homeLight0.isNameVisible());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertFalse(homeLight0.isModelMirrored());
      
      String string0 = homeLight0.getName();
      assertNull(string0);
      assertFalse(homeLight0.isMovable());
      assertFalse(homeLight0.isResizable());
      assertNull(homeLight0.getCatalogId());
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertNull(homeLight0.getDescription());
      assertNull(homeLight0.getCurrency());
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertTrue(homeLight0.isVisible());
      assertFalse(homeLight0.isDeformable());
      assertNull(homeLight0.getShininess());
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      assertFalse(homeLight0.isBackFaceShown());
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertNull(homeLight0.getColor());
      assertFalse(homeLight0.isTexturable());
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertEquals(381.9F, homeLight0.getY(), 0.01F);
      assertNull(homeLight0.getName());
      assertFalse(homeLight0.isNameVisible());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertFalse(homeLight0.isModelMirrored());
      
      Level level0 = homeLight0.getLevel();
      assertNull(level0);
      assertFalse(homeLight0.isMovable());
      assertFalse(homeLight0.isResizable());
      assertNull(homeLight0.getCatalogId());
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertNull(homeLight0.getDescription());
      assertNull(homeLight0.getCurrency());
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertTrue(homeLight0.isVisible());
      assertFalse(homeLight0.isDeformable());
      assertNull(homeLight0.getShininess());
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      assertFalse(homeLight0.isBackFaceShown());
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertNull(homeLight0.getColor());
      assertFalse(homeLight0.isTexturable());
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertEquals(381.9F, homeLight0.getY(), 0.01F);
      assertNull(homeLight0.getName());
      assertFalse(homeLight0.isNameVisible());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertFalse(homeLight0.isModelMirrored());
      
      HomeLight homeLight1 = homeLight0.clone();
      assertNotNull(homeLight1);
      assertNotSame(homeLight0, homeLight1);
      assertNotSame(homeLight1, homeLight0);
      assertFalse(homeLight1.equals((Object)homeLight0));
      assertFalse(homeLight0.isMovable());
      assertFalse(homeLight0.isResizable());
      assertNull(homeLight0.getCatalogId());
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertNull(homeLight0.getDescription());
      assertNull(homeLight0.getCurrency());
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertTrue(homeLight0.isVisible());
      assertFalse(homeLight0.isDeformable());
      assertNull(homeLight0.getShininess());
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      assertFalse(homeLight0.isBackFaceShown());
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertNull(homeLight0.getColor());
      assertFalse(homeLight0.isTexturable());
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertEquals(381.9F, homeLight0.getY(), 0.01F);
      assertNull(homeLight0.getName());
      assertFalse(homeLight0.isNameVisible());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertFalse(homeLight0.isModelMirrored());
      assertFalse(homeLight1.isNameVisible());
      assertFalse(homeLight1.isDeformable());
      assertEquals(381.9F, homeLight1.getY(), 0.01F);
      assertNull(homeLight1.getCurrency());
      assertEquals(0.0F, homeLight1.getWidth(), 0.01F);
      assertTrue(homeLight1.isVisible());
      assertEquals(0.0F, homeLight1.getX(), 0.01F);
      assertNull(homeLight1.getColor());
      assertEquals(0.0F, homeLight1.getNameYOffset(), 0.01F);
      assertEquals(0.0F, homeLight1.getHeight(), 0.01F);
      assertEquals(0.0F, homeLight1.getGroundElevation(), 0.01F);
      assertFalse(homeLight1.isMovable());
      assertFalse(homeLight1.isResizable());
      assertNull(homeLight1.getShininess());
      assertNull(homeLight1.getName());
      assertNull(homeLight1.getStaircaseCutOutShape());
      assertNull(homeLight1.getDescription());
      assertEquals(0.0F, homeLight1.getNameAngle(), 0.01F);
      assertEquals(0.5F, homeLight1.getPower(), 0.01F);
      assertEquals(0.0F, homeLight1.getDepth(), 0.01F);
      assertEquals(0.0F, homeLight1.getElevation(), 0.01F);
      assertNull(homeLight1.getCatalogId());
      assertEquals(0.0F, homeLight1.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeLight1.getAngle(), 0.01F);
      assertFalse(homeLight1.isTexturable());
      assertFalse(homeLight1.isDoorOrWindow());
      assertFalse(homeLight1.isModelMirrored());
      assertFalse(homeLight1.isBackFaceShown());
      
      homeLight0.setName("LEVEL");
      assertNotSame(homeLight0, homeLight1);
      assertFalse(homeLight0.equals((Object)homeLight1));
      assertFalse(homeLight0.isMovable());
      assertFalse(homeLight0.isResizable());
      assertEquals("LEVEL", homeLight0.getName());
      assertNull(homeLight0.getCatalogId());
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertNull(homeLight0.getDescription());
      assertNull(homeLight0.getCurrency());
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertTrue(homeLight0.isVisible());
      assertFalse(homeLight0.isDeformable());
      assertNull(homeLight0.getShininess());
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      assertFalse(homeLight0.isBackFaceShown());
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertNull(homeLight0.getColor());
      assertFalse(homeLight0.isTexturable());
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertEquals(381.9F, homeLight0.getY(), 0.01F);
      assertFalse(homeLight0.isNameVisible());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertFalse(homeLight0.isModelMirrored());
      
      Integer integer1 = Integer.valueOf((int) (byte)0);
      assertNotNull(integer1);
      assertFalse(integer1.equals((Object)int0));
      assertFalse(integer1.equals((Object)integer0));
      assertEquals(0, (int)integer1);
      
      Integer integer2 = Integer.valueOf((int) (byte)62);
      assertNotNull(integer2);
      assertFalse(integer2.equals((Object)integer1));
      assertFalse(integer2.equals((Object)int0));
      assertFalse(integer2.equals((Object)integer0));
      assertEquals(62, (int)integer2);
      
      float float0 = 1469.2815F;
      boolean boolean0 = homeLight0.intersectsRectangle(1469.2815F, (-1457.99F), (byte)62, 1401.0651F);
      assertNotSame(homeLight0, homeLight1);
      assertFalse(homeLight0.equals((Object)homeLight1));
      assertFalse(boolean0);
      assertFalse(homeLight0.isMovable());
      assertFalse(homeLight0.isResizable());
      assertEquals("LEVEL", homeLight0.getName());
      assertNull(homeLight0.getCatalogId());
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertNull(homeLight0.getDescription());
      assertNull(homeLight0.getCurrency());
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertTrue(homeLight0.isVisible());
      assertFalse(homeLight0.isDeformable());
      assertNull(homeLight0.getShininess());
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      assertFalse(homeLight0.isBackFaceShown());
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertNull(homeLight0.getColor());
      assertFalse(homeLight0.isTexturable());
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertEquals(381.9F, homeLight0.getY(), 0.01F);
      assertFalse(homeLight0.isNameVisible());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertFalse(homeLight0.isModelMirrored());
      
      HomeLight homeLight2 = null;
      try {
        homeLight2 = new HomeLight(homeLight0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.eteks.sweethome3d.model.HomePieceOfFurniture", e);
      }
  }

  @Test(timeout = 4000)
  public void test196()  throws Throwable  {
      Integer integer0 = new Integer(1431655742);
      assertNotNull(integer0);
      assertEquals(1431655742, (int)integer0);
      
      Light light0 = mock(Light.class, new ViolatedAssumptionAnswer());
      doReturn((LightSource[]) null).when(light0).getLightSources();
      doReturn((Integer) null).when(light0).getColor();
      doReturn((String) null).when(light0).getCurrency();
      doReturn(0.0F).when(light0).getDepth();
      doReturn((String) null).when(light0).getDescription();
      doReturn(0.0F).when(light0).getElevation();
      doReturn(0.0F).when(light0).getHeight();
      doReturn((Content) null).when(light0).getIcon();
      doReturn((Content) null).when(light0).getModel();
      doReturn((float[][]) null).when(light0).getModelRotation();
      doReturn((String) null).when(light0).getName();
      doReturn((Content) null).when(light0).getPlanIcon();
      doReturn((BigDecimal) null).when(light0).getPrice();
      doReturn((String) null).when(light0).getStaircaseCutOutShape();
      doReturn((BigDecimal) null).when(light0).getValueAddedTaxPercentage();
      doReturn(0.0F).when(light0).getWidth();
      doReturn(false).when(light0).isBackFaceShown();
      doReturn(false).when(light0).isDeformable();
      doReturn(false).when(light0).isDoorOrWindow();
      doReturn(false).when(light0).isMovable();
      doReturn(false).when(light0).isResizable();
      doReturn(false).when(light0).isTexturable();
      HomeLight homeLight0 = new HomeLight(light0);
      assertNotNull(homeLight0);
      assertFalse(homeLight0.isDeformable());
      assertFalse(homeLight0.isBackFaceShown());
      assertFalse(homeLight0.isModelMirrored());
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertTrue(homeLight0.isVisible());
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertNull(homeLight0.getColor());
      assertFalse(homeLight0.isTexturable());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertNull(homeLight0.getDescription());
      assertFalse(homeLight0.isDoorOrWindow());
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertFalse(homeLight0.isNameVisible());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertNull(homeLight0.getCatalogId());
      assertNull(homeLight0.getName());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertNull(homeLight0.getShininess());
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertFalse(homeLight0.isResizable());
      assertNull(homeLight0.getCurrency());
      assertFalse(homeLight0.isMovable());
      
      homeLight0.setY(1431655742);
      assertFalse(homeLight0.isDeformable());
      assertFalse(homeLight0.isBackFaceShown());
      assertFalse(homeLight0.isModelMirrored());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertTrue(homeLight0.isVisible());
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertNull(homeLight0.getColor());
      assertFalse(homeLight0.isTexturable());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertNull(homeLight0.getDescription());
      assertFalse(homeLight0.isDoorOrWindow());
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertFalse(homeLight0.isNameVisible());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertNull(homeLight0.getCatalogId());
      assertNull(homeLight0.getName());
      assertEquals(1.43165568E9F, homeLight0.getY(), 0.01F);
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertNull(homeLight0.getShininess());
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertFalse(homeLight0.isResizable());
      assertNull(homeLight0.getCurrency());
      assertFalse(homeLight0.isMovable());
      
      boolean boolean0 = homeLight0.isTopRightPointAt(1431655742, 1431655742, 3.4028235E38F);
      assertFalse(boolean0);
      assertFalse(homeLight0.isDeformable());
      assertFalse(homeLight0.isBackFaceShown());
      assertFalse(homeLight0.isModelMirrored());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertTrue(homeLight0.isVisible());
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertNull(homeLight0.getColor());
      assertFalse(homeLight0.isTexturable());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertNull(homeLight0.getDescription());
      assertFalse(homeLight0.isDoorOrWindow());
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertFalse(homeLight0.isNameVisible());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertNull(homeLight0.getCatalogId());
      assertNull(homeLight0.getName());
      assertEquals(1.43165568E9F, homeLight0.getY(), 0.01F);
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertNull(homeLight0.getShininess());
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertFalse(homeLight0.isResizable());
      assertNull(homeLight0.getCurrency());
      assertFalse(homeLight0.isMovable());
      
      Level level0 = homeLight0.getLevel();
      assertNull(level0);
      assertFalse(homeLight0.isDeformable());
      assertFalse(homeLight0.isBackFaceShown());
      assertFalse(homeLight0.isModelMirrored());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertTrue(homeLight0.isVisible());
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertNull(homeLight0.getColor());
      assertFalse(homeLight0.isTexturable());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertNull(homeLight0.getDescription());
      assertFalse(homeLight0.isDoorOrWindow());
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertFalse(homeLight0.isNameVisible());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertNull(homeLight0.getCatalogId());
      assertNull(homeLight0.getName());
      assertEquals(1.43165568E9F, homeLight0.getY(), 0.01F);
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertNull(homeLight0.getShininess());
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertFalse(homeLight0.isResizable());
      assertNull(homeLight0.getCurrency());
      assertFalse(homeLight0.isMovable());
      
      HomeLight homeLight1 = homeLight0.clone();
      assertNotNull(homeLight1);
      assertNotSame(homeLight0, homeLight1);
      assertNotSame(homeLight1, homeLight0);
      assertFalse(homeLight1.equals((Object)homeLight0));
      assertFalse(homeLight0.isDeformable());
      assertFalse(homeLight0.isBackFaceShown());
      assertFalse(homeLight0.isModelMirrored());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertTrue(homeLight0.isVisible());
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertNull(homeLight0.getColor());
      assertFalse(homeLight0.isTexturable());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertNull(homeLight0.getDescription());
      assertFalse(homeLight0.isDoorOrWindow());
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertFalse(homeLight0.isNameVisible());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertNull(homeLight0.getCatalogId());
      assertNull(homeLight0.getName());
      assertEquals(1.43165568E9F, homeLight0.getY(), 0.01F);
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertNull(homeLight0.getShininess());
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertFalse(homeLight0.isResizable());
      assertNull(homeLight0.getCurrency());
      assertFalse(homeLight0.isMovable());
      assertFalse(homeLight1.isTexturable());
      assertEquals(0.0F, homeLight1.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight1.getX(), 0.01F);
      assertEquals(0.0F, homeLight1.getElevation(), 0.01F);
      assertEquals(0.0F, homeLight1.getAngle(), 0.01F);
      assertFalse(homeLight1.isDoorOrWindow());
      assertNull(homeLight1.getDescription());
      assertNull(homeLight1.getName());
      assertFalse(homeLight1.isNameVisible());
      assertNull(homeLight1.getCatalogId());
      assertEquals(0.0F, homeLight1.getNameYOffset(), 0.01F);
      assertNull(homeLight1.getColor());
      assertFalse(homeLight1.isBackFaceShown());
      assertFalse(homeLight1.isModelMirrored());
      assertFalse(homeLight1.isMovable());
      assertFalse(homeLight1.isResizable());
      assertEquals(0.0F, homeLight1.getWidth(), 0.01F);
      assertEquals(0.5F, homeLight1.getPower(), 0.01F);
      assertEquals(0.0F, homeLight1.getHeight(), 0.01F);
      assertFalse(homeLight1.isDeformable());
      assertNull(homeLight1.getCurrency());
      assertEquals(1.43165568E9F, homeLight1.getY(), 0.01F);
      assertEquals(0.0F, homeLight1.getNameXOffset(), 0.01F);
      assertNull(homeLight1.getShininess());
      assertEquals(0.0F, homeLight1.getNameAngle(), 0.01F);
      assertTrue(homeLight1.isVisible());
      assertNull(homeLight1.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight1.getDepth(), 0.01F);
      
      homeLight0.setNameYOffset(40.88F);
      assertNotSame(homeLight0, homeLight1);
      assertFalse(homeLight0.equals((Object)homeLight1));
      assertFalse(homeLight0.isDeformable());
      assertFalse(homeLight0.isBackFaceShown());
      assertFalse(homeLight0.isModelMirrored());
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertTrue(homeLight0.isVisible());
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertNull(homeLight0.getColor());
      assertFalse(homeLight0.isTexturable());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertNull(homeLight0.getDescription());
      assertFalse(homeLight0.isDoorOrWindow());
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertFalse(homeLight0.isNameVisible());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertNull(homeLight0.getCatalogId());
      assertNull(homeLight0.getName());
      assertEquals(1.43165568E9F, homeLight0.getY(), 0.01F);
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertNull(homeLight0.getShininess());
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertFalse(homeLight0.isResizable());
      assertNull(homeLight0.getCurrency());
      assertEquals(40.88F, homeLight0.getNameYOffset(), 0.01F);
      assertFalse(homeLight0.isMovable());
      
      BigDecimal bigDecimal0 = homeLight0.getPriceValueAddedTaxIncluded();
      assertNull(bigDecimal0);
      assertNotSame(homeLight0, homeLight1);
      assertFalse(homeLight0.equals((Object)homeLight1));
      assertFalse(homeLight0.isDeformable());
      assertFalse(homeLight0.isBackFaceShown());
      assertFalse(homeLight0.isModelMirrored());
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertTrue(homeLight0.isVisible());
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertNull(homeLight0.getColor());
      assertFalse(homeLight0.isTexturable());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertNull(homeLight0.getDescription());
      assertFalse(homeLight0.isDoorOrWindow());
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertFalse(homeLight0.isNameVisible());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertNull(homeLight0.getCatalogId());
      assertNull(homeLight0.getName());
      assertEquals(1.43165568E9F, homeLight0.getY(), 0.01F);
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertNull(homeLight0.getShininess());
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertFalse(homeLight0.isResizable());
      assertNull(homeLight0.getCurrency());
      assertEquals(40.88F, homeLight0.getNameYOffset(), 0.01F);
      assertFalse(homeLight0.isMovable());
      
      homeLight1.setMovable(false);
      assertNotSame(homeLight0, homeLight1);
      assertNotSame(homeLight1, homeLight0);
      assertFalse(homeLight0.equals((Object)homeLight1));
      assertFalse(homeLight1.equals((Object)homeLight0));
      assertFalse(homeLight0.isDeformable());
      assertFalse(homeLight0.isBackFaceShown());
      assertFalse(homeLight0.isModelMirrored());
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertTrue(homeLight0.isVisible());
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertNull(homeLight0.getColor());
      assertFalse(homeLight0.isTexturable());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertNull(homeLight0.getDescription());
      assertFalse(homeLight0.isDoorOrWindow());
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertFalse(homeLight0.isNameVisible());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertNull(homeLight0.getCatalogId());
      assertNull(homeLight0.getName());
      assertEquals(1.43165568E9F, homeLight0.getY(), 0.01F);
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertNull(homeLight0.getShininess());
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertFalse(homeLight0.isResizable());
      assertNull(homeLight0.getCurrency());
      assertEquals(40.88F, homeLight0.getNameYOffset(), 0.01F);
      assertFalse(homeLight0.isMovable());
      assertFalse(homeLight1.isTexturable());
      assertEquals(0.0F, homeLight1.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight1.getX(), 0.01F);
      assertEquals(0.0F, homeLight1.getElevation(), 0.01F);
      assertEquals(0.0F, homeLight1.getAngle(), 0.01F);
      assertFalse(homeLight1.isDoorOrWindow());
      assertNull(homeLight1.getDescription());
      assertNull(homeLight1.getName());
      assertFalse(homeLight1.isNameVisible());
      assertNull(homeLight1.getCatalogId());
      assertEquals(0.0F, homeLight1.getNameYOffset(), 0.01F);
      assertNull(homeLight1.getColor());
      assertFalse(homeLight1.isBackFaceShown());
      assertFalse(homeLight1.isModelMirrored());
      assertFalse(homeLight1.isMovable());
      assertFalse(homeLight1.isResizable());
      assertEquals(0.0F, homeLight1.getWidth(), 0.01F);
      assertEquals(0.5F, homeLight1.getPower(), 0.01F);
      assertEquals(0.0F, homeLight1.getHeight(), 0.01F);
      assertFalse(homeLight1.isDeformable());
      assertNull(homeLight1.getCurrency());
      assertEquals(1.43165568E9F, homeLight1.getY(), 0.01F);
      assertEquals(0.0F, homeLight1.getNameXOffset(), 0.01F);
      assertNull(homeLight1.getShininess());
      assertEquals(0.0F, homeLight1.getNameAngle(), 0.01F);
      assertTrue(homeLight1.isVisible());
      assertNull(homeLight1.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight1.getDepth(), 0.01F);
      
      homeLight0.setNameYOffset(772.7381F);
      assertNotSame(homeLight0, homeLight1);
      assertFalse(homeLight0.equals((Object)homeLight1));
      assertFalse(homeLight0.isDeformable());
      assertFalse(homeLight0.isBackFaceShown());
      assertFalse(homeLight0.isModelMirrored());
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertTrue(homeLight0.isVisible());
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertNull(homeLight0.getColor());
      assertFalse(homeLight0.isTexturable());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertNull(homeLight0.getDescription());
      assertFalse(homeLight0.isDoorOrWindow());
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertFalse(homeLight0.isNameVisible());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertNull(homeLight0.getCatalogId());
      assertNull(homeLight0.getName());
      assertEquals(1.43165568E9F, homeLight0.getY(), 0.01F);
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertNull(homeLight0.getShininess());
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertFalse(homeLight0.isResizable());
      assertEquals(772.7381F, homeLight0.getNameYOffset(), 0.01F);
      assertNull(homeLight0.getCurrency());
      assertFalse(homeLight0.isMovable());
      
      HomePieceOfFurniture.SortableProperty[] homePieceOfFurniture_SortablePropertyArray0 = HomePieceOfFurniture.SortableProperty.values();
      assertEquals(19, homePieceOfFurniture_SortablePropertyArray0.length);
      assertNotNull(homePieceOfFurniture_SortablePropertyArray0);
      
      String string0 = homeLight1.getCatalogId();
      assertNull(string0);
      assertNotSame(homeLight0, homeLight1);
      assertNotSame(homeLight1, homeLight0);
      assertFalse(homeLight0.equals((Object)homeLight1));
      assertFalse(homeLight1.equals((Object)homeLight0));
      assertFalse(homeLight0.isDeformable());
      assertFalse(homeLight0.isBackFaceShown());
      assertFalse(homeLight0.isModelMirrored());
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertTrue(homeLight0.isVisible());
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertNull(homeLight0.getColor());
      assertFalse(homeLight0.isTexturable());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertNull(homeLight0.getDescription());
      assertFalse(homeLight0.isDoorOrWindow());
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertFalse(homeLight0.isNameVisible());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertNull(homeLight0.getCatalogId());
      assertNull(homeLight0.getName());
      assertEquals(1.43165568E9F, homeLight0.getY(), 0.01F);
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertNull(homeLight0.getShininess());
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertFalse(homeLight0.isResizable());
      assertEquals(772.7381F, homeLight0.getNameYOffset(), 0.01F);
      assertNull(homeLight0.getCurrency());
      assertFalse(homeLight0.isMovable());
      assertFalse(homeLight1.isTexturable());
      assertEquals(0.0F, homeLight1.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight1.getX(), 0.01F);
      assertEquals(0.0F, homeLight1.getElevation(), 0.01F);
      assertEquals(0.0F, homeLight1.getAngle(), 0.01F);
      assertFalse(homeLight1.isDoorOrWindow());
      assertNull(homeLight1.getDescription());
      assertNull(homeLight1.getName());
      assertFalse(homeLight1.isNameVisible());
      assertNull(homeLight1.getCatalogId());
      assertEquals(0.0F, homeLight1.getNameYOffset(), 0.01F);
      assertNull(homeLight1.getColor());
      assertFalse(homeLight1.isBackFaceShown());
      assertFalse(homeLight1.isModelMirrored());
      assertFalse(homeLight1.isMovable());
      assertFalse(homeLight1.isResizable());
      assertEquals(0.0F, homeLight1.getWidth(), 0.01F);
      assertEquals(0.5F, homeLight1.getPower(), 0.01F);
      assertEquals(0.0F, homeLight1.getHeight(), 0.01F);
      assertFalse(homeLight1.isDeformable());
      assertNull(homeLight1.getCurrency());
      assertEquals(1.43165568E9F, homeLight1.getY(), 0.01F);
      assertEquals(0.0F, homeLight1.getNameXOffset(), 0.01F);
      assertNull(homeLight1.getShininess());
      assertEquals(0.0F, homeLight1.getNameAngle(), 0.01F);
      assertTrue(homeLight1.isVisible());
      assertNull(homeLight1.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight1.getDepth(), 0.01F);
      
      String string1 = homeLight1.getStaircaseCutOutShape();
      assertNull(string1);
      assertNotSame(homeLight0, homeLight1);
      assertNotSame(homeLight1, homeLight0);
      assertFalse(homeLight0.equals((Object)homeLight1));
      assertFalse(homeLight1.equals((Object)homeLight0));
      assertFalse(homeLight0.isDeformable());
      assertFalse(homeLight0.isBackFaceShown());
      assertFalse(homeLight0.isModelMirrored());
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertTrue(homeLight0.isVisible());
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertNull(homeLight0.getColor());
      assertFalse(homeLight0.isTexturable());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertNull(homeLight0.getDescription());
      assertFalse(homeLight0.isDoorOrWindow());
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertFalse(homeLight0.isNameVisible());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertNull(homeLight0.getCatalogId());
      assertNull(homeLight0.getName());
      assertEquals(1.43165568E9F, homeLight0.getY(), 0.01F);
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertNull(homeLight0.getShininess());
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertFalse(homeLight0.isResizable());
      assertEquals(772.7381F, homeLight0.getNameYOffset(), 0.01F);
      assertNull(homeLight0.getCurrency());
      assertFalse(homeLight0.isMovable());
      assertFalse(homeLight1.isTexturable());
      assertEquals(0.0F, homeLight1.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight1.getX(), 0.01F);
      assertEquals(0.0F, homeLight1.getElevation(), 0.01F);
      assertEquals(0.0F, homeLight1.getAngle(), 0.01F);
      assertFalse(homeLight1.isDoorOrWindow());
      assertNull(homeLight1.getDescription());
      assertNull(homeLight1.getName());
      assertFalse(homeLight1.isNameVisible());
      assertNull(homeLight1.getCatalogId());
      assertEquals(0.0F, homeLight1.getNameYOffset(), 0.01F);
      assertNull(homeLight1.getColor());
      assertFalse(homeLight1.isBackFaceShown());
      assertFalse(homeLight1.isModelMirrored());
      assertFalse(homeLight1.isMovable());
      assertFalse(homeLight1.isResizable());
      assertEquals(0.0F, homeLight1.getWidth(), 0.01F);
      assertEquals(0.5F, homeLight1.getPower(), 0.01F);
      assertEquals(0.0F, homeLight1.getHeight(), 0.01F);
      assertFalse(homeLight1.isDeformable());
      assertNull(homeLight1.getCurrency());
      assertEquals(1.43165568E9F, homeLight1.getY(), 0.01F);
      assertEquals(0.0F, homeLight1.getNameXOffset(), 0.01F);
      assertNull(homeLight1.getShininess());
      assertEquals(0.0F, homeLight1.getNameAngle(), 0.01F);
      assertTrue(homeLight1.isVisible());
      assertNull(homeLight1.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight1.getDepth(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test197()  throws Throwable  {
      Integer integer0 = new Integer((-1469));
      assertNotNull(integer0);
      assertEquals((-1469), (int)integer0);
      
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      Light light0 = mock(Light.class, new ViolatedAssumptionAnswer());
      doReturn((LightSource[]) null).when(light0).getLightSources();
      doReturn((Integer) null).when(light0).getColor();
      doReturn((String) null).when(light0).getCurrency();
      doReturn(0.0F).when(light0).getDepth();
      doReturn((String) null).when(light0).getDescription();
      doReturn(0.0F).when(light0).getElevation();
      doReturn(0.0F).when(light0).getHeight();
      doReturn((Content) null).when(light0).getIcon();
      doReturn((Content) null).when(light0).getModel();
      doReturn((float[][]) null).when(light0).getModelRotation();
      doReturn((String) null).when(light0).getName();
      doReturn((Content) null).when(light0).getPlanIcon();
      doReturn((BigDecimal) null).when(light0).getPrice();
      doReturn((String) null).when(light0).getStaircaseCutOutShape();
      doReturn((BigDecimal) null).when(light0).getValueAddedTaxPercentage();
      doReturn(0.0F).when(light0).getWidth();
      doReturn(false).when(light0).isBackFaceShown();
      doReturn(false).when(light0).isDeformable();
      doReturn(false).when(light0).isDoorOrWindow();
      doReturn(false).when(light0).isMovable();
      doReturn(false).when(light0).isResizable();
      doReturn(false).when(light0).isTexturable();
      LightSource lightSource0 = new LightSource(2.0F, 2632.0835F, (-853), (-1469));
      assertNotNull(lightSource0);
      assertEquals(2632.0835F, lightSource0.getY(), 0.01F);
      assertNull(lightSource0.getDiameter());
      assertEquals(2.0F, lightSource0.getX(), 0.01F);
      assertEquals((-853.0F), lightSource0.getZ(), 0.01F);
      assertEquals((-1469), lightSource0.getColor());
      
      Integer integer1 = new Integer(767);
      assertNotNull(integer1);
      assertFalse(integer1.equals((Object)integer0));
      assertEquals(767, (int)integer1);
      
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)13;
      byteArray0[1] = (byte)13;
      byteArray0[2] = (byte)13;
      boolean boolean1 = FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      assertEquals(3, byteArray0.length);
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      assertArrayEquals(new byte[] {(byte)13, (byte)13, (byte)13}, byteArray0);
      
      HomeLight homeLight0 = new HomeLight(light0);
      assertNotNull(homeLight0);
      assertNull(homeLight0.getDescription());
      assertNull(homeLight0.getName());
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertNull(homeLight0.getCatalogId());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertFalse(homeLight0.isTexturable());
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertNull(homeLight0.getShininess());
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertFalse(homeLight0.isMovable());
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertFalse(homeLight0.isDeformable());
      assertFalse(homeLight0.isResizable());
      assertNull(homeLight0.getCurrency());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertTrue(homeLight0.isVisible());
      assertFalse(homeLight0.isNameVisible());
      assertNull(homeLight0.getColor());
      assertFalse(homeLight0.isDoorOrWindow());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertFalse(homeLight0.isBackFaceShown());
      assertFalse(homeLight0.isModelMirrored());
      
      homeLight0.setY((byte)13);
      assertNull(homeLight0.getDescription());
      assertNull(homeLight0.getName());
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertNull(homeLight0.getCatalogId());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertFalse(homeLight0.isTexturable());
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertNull(homeLight0.getShininess());
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertFalse(homeLight0.isMovable());
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertFalse(homeLight0.isDeformable());
      assertFalse(homeLight0.isResizable());
      assertNull(homeLight0.getCurrency());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertEquals(13.0F, homeLight0.getY(), 0.01F);
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertTrue(homeLight0.isVisible());
      assertFalse(homeLight0.isNameVisible());
      assertNull(homeLight0.getColor());
      assertFalse(homeLight0.isDoorOrWindow());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertFalse(homeLight0.isBackFaceShown());
      assertFalse(homeLight0.isModelMirrored());
      
      BigDecimal bigDecimal0 = homeLight0.getValueAddedTax();
      assertNull(bigDecimal0);
      assertNull(homeLight0.getDescription());
      assertNull(homeLight0.getName());
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertNull(homeLight0.getCatalogId());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertFalse(homeLight0.isTexturable());
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertNull(homeLight0.getShininess());
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertFalse(homeLight0.isMovable());
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertFalse(homeLight0.isDeformable());
      assertFalse(homeLight0.isResizable());
      assertNull(homeLight0.getCurrency());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertEquals(13.0F, homeLight0.getY(), 0.01F);
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertTrue(homeLight0.isVisible());
      assertFalse(homeLight0.isNameVisible());
      assertNull(homeLight0.getColor());
      assertFalse(homeLight0.isDoorOrWindow());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertFalse(homeLight0.isBackFaceShown());
      assertFalse(homeLight0.isModelMirrored());
      
      BigDecimal bigDecimal1 = homeLight0.getValueAddedTax();
      assertNull(bigDecimal1);
      assertNull(homeLight0.getDescription());
      assertNull(homeLight0.getName());
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertNull(homeLight0.getCatalogId());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertFalse(homeLight0.isTexturable());
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertNull(homeLight0.getShininess());
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertFalse(homeLight0.isMovable());
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertFalse(homeLight0.isDeformable());
      assertFalse(homeLight0.isResizable());
      assertNull(homeLight0.getCurrency());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertEquals(13.0F, homeLight0.getY(), 0.01F);
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertTrue(homeLight0.isVisible());
      assertFalse(homeLight0.isNameVisible());
      assertNull(homeLight0.getColor());
      assertFalse(homeLight0.isDoorOrWindow());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertFalse(homeLight0.isBackFaceShown());
      assertFalse(homeLight0.isModelMirrored());
      
      String string0 = homeLight0.getName();
      assertNull(string0);
      assertNull(homeLight0.getDescription());
      assertNull(homeLight0.getName());
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertNull(homeLight0.getCatalogId());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertFalse(homeLight0.isTexturable());
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertNull(homeLight0.getShininess());
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertFalse(homeLight0.isMovable());
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertFalse(homeLight0.isDeformable());
      assertFalse(homeLight0.isResizable());
      assertNull(homeLight0.getCurrency());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertEquals(13.0F, homeLight0.getY(), 0.01F);
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertTrue(homeLight0.isVisible());
      assertFalse(homeLight0.isNameVisible());
      assertNull(homeLight0.getColor());
      assertFalse(homeLight0.isDoorOrWindow());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertFalse(homeLight0.isBackFaceShown());
      assertFalse(homeLight0.isModelMirrored());
      
      Level level0 = homeLight0.getLevel();
      assertNull(level0);
      assertNull(homeLight0.getDescription());
      assertNull(homeLight0.getName());
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertNull(homeLight0.getCatalogId());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertFalse(homeLight0.isTexturable());
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertNull(homeLight0.getShininess());
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertFalse(homeLight0.isMovable());
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertFalse(homeLight0.isDeformable());
      assertFalse(homeLight0.isResizable());
      assertNull(homeLight0.getCurrency());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertEquals(13.0F, homeLight0.getY(), 0.01F);
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertTrue(homeLight0.isVisible());
      assertFalse(homeLight0.isNameVisible());
      assertNull(homeLight0.getColor());
      assertFalse(homeLight0.isDoorOrWindow());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertFalse(homeLight0.isBackFaceShown());
      assertFalse(homeLight0.isModelMirrored());
      
      HomeLight homeLight1 = homeLight0.clone();
      assertNotNull(homeLight1);
      assertNotSame(homeLight1, homeLight0);
      assertNotSame(homeLight0, homeLight1);
      assertFalse(homeLight1.equals((Object)homeLight0));
      assertFalse(homeLight1.isMovable());
      assertEquals(0.0F, homeLight1.getWidth(), 0.01F);
      assertEquals(0.0F, homeLight1.getHeight(), 0.01F);
      assertTrue(homeLight1.isVisible());
      assertEquals(0.0F, homeLight1.getNameYOffset(), 0.01F);
      assertNull(homeLight1.getCatalogId());
      assertEquals(0.0F, homeLight1.getNameAngle(), 0.01F);
      assertNull(homeLight1.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight1.getDepth(), 0.01F);
      assertFalse(homeLight1.isDeformable());
      assertEquals(0.5F, homeLight1.getPower(), 0.01F);
      assertNull(homeLight1.getCurrency());
      assertNull(homeLight1.getShininess());
      assertEquals(13.0F, homeLight1.getY(), 0.01F);
      assertFalse(homeLight1.isResizable());
      assertFalse(homeLight1.isTexturable());
      assertEquals(0.0F, homeLight1.getAngle(), 0.01F);
      assertNull(homeLight1.getDescription());
      assertFalse(homeLight1.isDoorOrWindow());
      assertEquals(0.0F, homeLight1.getX(), 0.01F);
      assertEquals(0.0F, homeLight1.getElevation(), 0.01F);
      assertEquals(0.0F, homeLight1.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight1.getNameXOffset(), 0.01F);
      assertNull(homeLight1.getColor());
      assertFalse(homeLight1.isModelMirrored());
      assertNull(homeLight1.getName());
      assertFalse(homeLight1.isBackFaceShown());
      assertFalse(homeLight1.isNameVisible());
      assertNull(homeLight0.getDescription());
      assertNull(homeLight0.getName());
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertNull(homeLight0.getCatalogId());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertFalse(homeLight0.isTexturable());
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertNull(homeLight0.getShininess());
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertFalse(homeLight0.isMovable());
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertFalse(homeLight0.isDeformable());
      assertFalse(homeLight0.isResizable());
      assertNull(homeLight0.getCurrency());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertEquals(13.0F, homeLight0.getY(), 0.01F);
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertTrue(homeLight0.isVisible());
      assertFalse(homeLight0.isNameVisible());
      assertNull(homeLight0.getColor());
      assertFalse(homeLight0.isDoorOrWindow());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertFalse(homeLight0.isBackFaceShown());
      assertFalse(homeLight0.isModelMirrored());
      
      homeLight1.setName((String) null);
      assertNotSame(homeLight1, homeLight0);
      assertNotSame(homeLight0, homeLight1);
      assertFalse(homeLight1.equals((Object)homeLight0));
      assertFalse(homeLight0.equals((Object)homeLight1));
      assertFalse(homeLight1.isMovable());
      assertEquals(0.0F, homeLight1.getWidth(), 0.01F);
      assertEquals(0.0F, homeLight1.getHeight(), 0.01F);
      assertTrue(homeLight1.isVisible());
      assertEquals(0.0F, homeLight1.getNameYOffset(), 0.01F);
      assertNull(homeLight1.getCatalogId());
      assertEquals(0.0F, homeLight1.getNameAngle(), 0.01F);
      assertNull(homeLight1.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight1.getDepth(), 0.01F);
      assertFalse(homeLight1.isDeformable());
      assertEquals(0.5F, homeLight1.getPower(), 0.01F);
      assertNull(homeLight1.getCurrency());
      assertNull(homeLight1.getShininess());
      assertEquals(13.0F, homeLight1.getY(), 0.01F);
      assertFalse(homeLight1.isResizable());
      assertFalse(homeLight1.isTexturable());
      assertEquals(0.0F, homeLight1.getAngle(), 0.01F);
      assertNull(homeLight1.getDescription());
      assertFalse(homeLight1.isDoorOrWindow());
      assertEquals(0.0F, homeLight1.getX(), 0.01F);
      assertEquals(0.0F, homeLight1.getElevation(), 0.01F);
      assertEquals(0.0F, homeLight1.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight1.getNameXOffset(), 0.01F);
      assertNull(homeLight1.getColor());
      assertFalse(homeLight1.isModelMirrored());
      assertNull(homeLight1.getName());
      assertFalse(homeLight1.isBackFaceShown());
      assertFalse(homeLight1.isNameVisible());
      assertNull(homeLight0.getDescription());
      assertNull(homeLight0.getName());
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertNull(homeLight0.getCatalogId());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertFalse(homeLight0.isTexturable());
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertNull(homeLight0.getShininess());
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertFalse(homeLight0.isMovable());
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertFalse(homeLight0.isDeformable());
      assertFalse(homeLight0.isResizable());
      assertNull(homeLight0.getCurrency());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertEquals(13.0F, homeLight0.getY(), 0.01F);
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertTrue(homeLight0.isVisible());
      assertFalse(homeLight0.isNameVisible());
      assertNull(homeLight0.getColor());
      assertFalse(homeLight0.isDoorOrWindow());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertFalse(homeLight0.isBackFaceShown());
      assertFalse(homeLight0.isModelMirrored());
      
      boolean boolean2 = homeLight0.isNameVisible();
      assertNotSame(homeLight0, homeLight1);
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      assertFalse(homeLight0.equals((Object)homeLight1));
      assertFalse(boolean2);
      assertNull(homeLight0.getDescription());
      assertNull(homeLight0.getName());
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertNull(homeLight0.getCatalogId());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertFalse(homeLight0.isTexturable());
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertNull(homeLight0.getShininess());
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertFalse(homeLight0.isMovable());
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertFalse(homeLight0.isDeformable());
      assertFalse(homeLight0.isResizable());
      assertNull(homeLight0.getCurrency());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertEquals(13.0F, homeLight0.getY(), 0.01F);
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertTrue(homeLight0.isVisible());
      assertFalse(homeLight0.isNameVisible());
      assertNull(homeLight0.getColor());
      assertFalse(homeLight0.isDoorOrWindow());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertFalse(homeLight0.isBackFaceShown());
      assertFalse(homeLight0.isModelMirrored());
      
      homeLight0.setNameYOffset((-1312.9F));
      assertNotSame(homeLight0, homeLight1);
      assertFalse(homeLight0.equals((Object)homeLight1));
      assertNull(homeLight0.getDescription());
      assertNull(homeLight0.getName());
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertNull(homeLight0.getCatalogId());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertFalse(homeLight0.isTexturable());
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertNull(homeLight0.getShininess());
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertFalse(homeLight0.isMovable());
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertFalse(homeLight0.isDeformable());
      assertFalse(homeLight0.isResizable());
      assertNull(homeLight0.getCurrency());
      assertEquals(13.0F, homeLight0.getY(), 0.01F);
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertTrue(homeLight0.isVisible());
      assertFalse(homeLight0.isNameVisible());
      assertNull(homeLight0.getColor());
      assertFalse(homeLight0.isDoorOrWindow());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertEquals((-1312.9F), homeLight0.getNameYOffset(), 0.01F);
      assertFalse(homeLight0.isBackFaceShown());
      assertFalse(homeLight0.isModelMirrored());
  }

  @Test(timeout = 4000)
  public void test198()  throws Throwable  {
      LightSource lightSource0 = new LightSource((-1.0F), (-1.0F), 381.9F, 1431655765);
      assertNotNull(lightSource0);
      assertNull(lightSource0.getDiameter());
      assertEquals(1431655765, lightSource0.getColor());
      assertEquals(381.9F, lightSource0.getZ(), 0.01F);
      assertEquals((-1.0F), lightSource0.getY(), 0.01F);
      assertEquals((-1.0F), lightSource0.getX(), 0.01F);
      
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-54);
      byteArray0[1] = (byte) (-40);
      boolean boolean0 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "[tF<C;");
      assertFalse(boolean0);
      
      byteArray0[2] = (byte) (-54);
      boolean boolean1 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      LightSource lightSource1 = new LightSource((-1.0F), (-69.47F), 700.4569F, (-853));
      assertNotNull(lightSource1);
      assertFalse(lightSource1.equals((Object)lightSource0));
      assertEquals(700.4569F, lightSource1.getZ(), 0.01F);
      assertEquals((-69.47F), lightSource1.getY(), 0.01F);
      assertEquals((-1.0F), lightSource1.getX(), 0.01F);
      assertNull(lightSource1.getDiameter());
      assertEquals((-853), lightSource1.getColor());
      
      Integer integer0 = new Integer((-853));
      assertNotNull(integer0);
      assertEquals((-853), (int)integer0);
      
      Light light0 = mock(Light.class, new ViolatedAssumptionAnswer());
      doReturn((LightSource[]) null).when(light0).getLightSources();
      doReturn((Integer) null).when(light0).getColor();
      doReturn((String) null).when(light0).getCurrency();
      doReturn(0.0F).when(light0).getDepth();
      doReturn((String) null).when(light0).getDescription();
      doReturn(0.0F).when(light0).getElevation();
      doReturn(0.0F).when(light0).getHeight();
      doReturn((Content) null).when(light0).getIcon();
      doReturn((Content) null).when(light0).getModel();
      doReturn((float[][]) null).when(light0).getModelRotation();
      doReturn((String) null).when(light0).getName();
      doReturn((Content) null).when(light0).getPlanIcon();
      doReturn((BigDecimal) null).when(light0).getPrice();
      doReturn((String) null).when(light0).getStaircaseCutOutShape();
      doReturn((BigDecimal) null).when(light0).getValueAddedTaxPercentage();
      doReturn(0.0F).when(light0).getWidth();
      doReturn(false).when(light0).isBackFaceShown();
      doReturn(false).when(light0).isDeformable();
      doReturn(false).when(light0).isDoorOrWindow();
      doReturn(false).when(light0).isMovable();
      doReturn(false).when(light0).isResizable();
      doReturn(false).when(light0).isTexturable();
      byte[] byteArray1 = new byte[5];
      assertFalse(byteArray1.equals((Object)byteArray0));
      
      byteArray1[1] = (byte) (-54);
      byteArray1[3] = (byte)0;
      boolean boolean2 = FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray1);
      assertEquals(5, byteArray1.length);
      assertNotSame(byteArray1, byteArray0);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2);
      assertArrayEquals(new byte[] {(byte)0, (byte) (-54), (byte)0, (byte)0, (byte)0}, byteArray1);
      
      HomeLight homeLight0 = new HomeLight(light0);
      assertNotNull(homeLight0);
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertNull(homeLight0.getDescription());
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertFalse(homeLight0.isTexturable());
      assertNull(homeLight0.getCatalogId());
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertFalse(homeLight0.isBackFaceShown());
      assertFalse(homeLight0.isModelMirrored());
      assertFalse(homeLight0.isDoorOrWindow());
      assertNull(homeLight0.getName());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertFalse(homeLight0.isNameVisible());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertTrue(homeLight0.isVisible());
      assertNull(homeLight0.getCurrency());
      assertFalse(homeLight0.isDeformable());
      assertNull(homeLight0.getColor());
      assertNull(homeLight0.getShininess());
      assertFalse(homeLight0.isResizable());
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertFalse(homeLight0.isMovable());
      
      homeLight0.setY((byte)0);
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertNull(homeLight0.getDescription());
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertFalse(homeLight0.isTexturable());
      assertNull(homeLight0.getCatalogId());
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertFalse(homeLight0.isBackFaceShown());
      assertFalse(homeLight0.isModelMirrored());
      assertFalse(homeLight0.isDoorOrWindow());
      assertNull(homeLight0.getName());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertFalse(homeLight0.isNameVisible());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertTrue(homeLight0.isVisible());
      assertNull(homeLight0.getCurrency());
      assertFalse(homeLight0.isDeformable());
      assertNull(homeLight0.getColor());
      assertNull(homeLight0.getShininess());
      assertFalse(homeLight0.isResizable());
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertFalse(homeLight0.isMovable());
      
      BigDecimal bigDecimal0 = homeLight0.getValueAddedTax();
      assertNull(bigDecimal0);
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertNull(homeLight0.getDescription());
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertFalse(homeLight0.isTexturable());
      assertNull(homeLight0.getCatalogId());
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertFalse(homeLight0.isBackFaceShown());
      assertFalse(homeLight0.isModelMirrored());
      assertFalse(homeLight0.isDoorOrWindow());
      assertNull(homeLight0.getName());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertFalse(homeLight0.isNameVisible());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertTrue(homeLight0.isVisible());
      assertNull(homeLight0.getCurrency());
      assertFalse(homeLight0.isDeformable());
      assertNull(homeLight0.getColor());
      assertNull(homeLight0.getShininess());
      assertFalse(homeLight0.isResizable());
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertFalse(homeLight0.isMovable());
      
      BigDecimal bigDecimal1 = homeLight0.getValueAddedTax();
      assertNull(bigDecimal1);
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertNull(homeLight0.getDescription());
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertFalse(homeLight0.isTexturable());
      assertNull(homeLight0.getCatalogId());
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertFalse(homeLight0.isBackFaceShown());
      assertFalse(homeLight0.isModelMirrored());
      assertFalse(homeLight0.isDoorOrWindow());
      assertNull(homeLight0.getName());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertFalse(homeLight0.isNameVisible());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertTrue(homeLight0.isVisible());
      assertNull(homeLight0.getCurrency());
      assertFalse(homeLight0.isDeformable());
      assertNull(homeLight0.getColor());
      assertNull(homeLight0.getShininess());
      assertFalse(homeLight0.isResizable());
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertFalse(homeLight0.isMovable());
      
      String string0 = homeLight0.getName();
      assertNull(string0);
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertNull(homeLight0.getDescription());
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertFalse(homeLight0.isTexturable());
      assertNull(homeLight0.getCatalogId());
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertFalse(homeLight0.isBackFaceShown());
      assertFalse(homeLight0.isModelMirrored());
      assertFalse(homeLight0.isDoorOrWindow());
      assertNull(homeLight0.getName());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertFalse(homeLight0.isNameVisible());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertTrue(homeLight0.isVisible());
      assertNull(homeLight0.getCurrency());
      assertFalse(homeLight0.isDeformable());
      assertNull(homeLight0.getColor());
      assertNull(homeLight0.getShininess());
      assertFalse(homeLight0.isResizable());
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertFalse(homeLight0.isMovable());
      
      homeLight0.setName((String) null);
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertNull(homeLight0.getDescription());
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertFalse(homeLight0.isTexturable());
      assertNull(homeLight0.getCatalogId());
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertFalse(homeLight0.isBackFaceShown());
      assertFalse(homeLight0.isModelMirrored());
      assertFalse(homeLight0.isDoorOrWindow());
      assertNull(homeLight0.getName());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertFalse(homeLight0.isNameVisible());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertTrue(homeLight0.isVisible());
      assertNull(homeLight0.getCurrency());
      assertFalse(homeLight0.isDeformable());
      assertNull(homeLight0.getColor());
      assertNull(homeLight0.getShininess());
      assertFalse(homeLight0.isResizable());
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertFalse(homeLight0.isMovable());
      
      boolean boolean3 = homeLight0.intersectsRectangle((byte)0, 1800.2F, 700.4569F, (-73.79F));
      assertTrue(boolean3 == boolean1);
      assertTrue(boolean3 == boolean2);
      assertTrue(boolean3 == boolean0);
      assertFalse(boolean3);
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertNull(homeLight0.getDescription());
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertFalse(homeLight0.isTexturable());
      assertNull(homeLight0.getCatalogId());
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertFalse(homeLight0.isBackFaceShown());
      assertFalse(homeLight0.isModelMirrored());
      assertFalse(homeLight0.isDoorOrWindow());
      assertNull(homeLight0.getName());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertFalse(homeLight0.isNameVisible());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertTrue(homeLight0.isVisible());
      assertNull(homeLight0.getCurrency());
      assertFalse(homeLight0.isDeformable());
      assertNull(homeLight0.getColor());
      assertNull(homeLight0.getShininess());
      assertFalse(homeLight0.isResizable());
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertFalse(homeLight0.isMovable());
      
      homeLight0.setNameYOffset((-1.0F));
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertNull(homeLight0.getDescription());
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertFalse(homeLight0.isTexturable());
      assertNull(homeLight0.getCatalogId());
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertFalse(homeLight0.isBackFaceShown());
      assertFalse(homeLight0.isModelMirrored());
      assertFalse(homeLight0.isDoorOrWindow());
      assertNull(homeLight0.getName());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertFalse(homeLight0.isNameVisible());
      assertEquals((-1.0F), homeLight0.getNameYOffset(), 0.01F);
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertTrue(homeLight0.isVisible());
      assertNull(homeLight0.getCurrency());
      assertFalse(homeLight0.isDeformable());
      assertNull(homeLight0.getColor());
      assertNull(homeLight0.getShininess());
      assertFalse(homeLight0.isResizable());
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertFalse(homeLight0.isMovable());
      
      BigDecimal bigDecimal2 = homeLight0.getPriceValueAddedTaxIncluded();
      assertNull(bigDecimal2);
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertNull(homeLight0.getDescription());
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertFalse(homeLight0.isTexturable());
      assertNull(homeLight0.getCatalogId());
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertFalse(homeLight0.isBackFaceShown());
      assertFalse(homeLight0.isModelMirrored());
      assertFalse(homeLight0.isDoorOrWindow());
      assertNull(homeLight0.getName());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertFalse(homeLight0.isNameVisible());
      assertEquals((-1.0F), homeLight0.getNameYOffset(), 0.01F);
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertTrue(homeLight0.isVisible());
      assertNull(homeLight0.getCurrency());
      assertFalse(homeLight0.isDeformable());
      assertNull(homeLight0.getColor());
      assertNull(homeLight0.getShininess());
      assertFalse(homeLight0.isResizable());
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertFalse(homeLight0.isMovable());
      
      homeLight0.setDescription((String) null);
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertNull(homeLight0.getDescription());
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertFalse(homeLight0.isTexturable());
      assertNull(homeLight0.getCatalogId());
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertFalse(homeLight0.isBackFaceShown());
      assertFalse(homeLight0.isModelMirrored());
      assertFalse(homeLight0.isDoorOrWindow());
      assertNull(homeLight0.getName());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertFalse(homeLight0.isNameVisible());
      assertEquals((-1.0F), homeLight0.getNameYOffset(), 0.01F);
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertTrue(homeLight0.isVisible());
      assertNull(homeLight0.getCurrency());
      assertFalse(homeLight0.isDeformable());
      assertNull(homeLight0.getColor());
      assertNull(homeLight0.getShininess());
      assertFalse(homeLight0.isResizable());
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertFalse(homeLight0.isMovable());
      
      PropertyChangeListener propertyChangeListener0 = mock(PropertyChangeListener.class, new ViolatedAssumptionAnswer());
      PropertyChangeListenerProxy propertyChangeListenerProxy0 = new PropertyChangeListenerProxy("", propertyChangeListener0);
      assertNotNull(propertyChangeListenerProxy0);
      assertEquals("", propertyChangeListenerProxy0.getPropertyName());
      
      homeLight0.addPropertyChangeListener(propertyChangeListenerProxy0);
      assertEquals("", propertyChangeListenerProxy0.getPropertyName());
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertNull(homeLight0.getDescription());
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertFalse(homeLight0.isTexturable());
      assertNull(homeLight0.getCatalogId());
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertFalse(homeLight0.isBackFaceShown());
      assertFalse(homeLight0.isModelMirrored());
      assertFalse(homeLight0.isDoorOrWindow());
      assertNull(homeLight0.getName());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertFalse(homeLight0.isNameVisible());
      assertEquals((-1.0F), homeLight0.getNameYOffset(), 0.01F);
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertTrue(homeLight0.isVisible());
      assertNull(homeLight0.getCurrency());
      assertFalse(homeLight0.isDeformable());
      assertNull(homeLight0.getColor());
      assertNull(homeLight0.getShininess());
      assertFalse(homeLight0.isResizable());
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertFalse(homeLight0.isMovable());
  }

  @Test(timeout = 4000)
  public void test199()  throws Throwable  {
      Integer integer0 = new Integer((-1469));
      assertNotNull(integer0);
      assertEquals((-1469), (int)integer0);
      
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      Light light0 = mock(Light.class, new ViolatedAssumptionAnswer());
      doReturn((LightSource[]) null).when(light0).getLightSources();
      doReturn((Integer) null).when(light0).getColor();
      doReturn((String) null).when(light0).getCurrency();
      doReturn(0.0F).when(light0).getDepth();
      doReturn((String) null).when(light0).getDescription();
      doReturn(0.0F).when(light0).getElevation();
      doReturn(0.0F).when(light0).getHeight();
      doReturn((Content) null).when(light0).getIcon();
      doReturn((Content) null).when(light0).getModel();
      doReturn((float[][]) null).when(light0).getModelRotation();
      doReturn((String) null).when(light0).getName();
      doReturn((Content) null).when(light0).getPlanIcon();
      doReturn((BigDecimal) null).when(light0).getPrice();
      doReturn((String) null).when(light0).getStaircaseCutOutShape();
      doReturn((BigDecimal) null).when(light0).getValueAddedTaxPercentage();
      doReturn(0.0F).when(light0).getWidth();
      doReturn(false).when(light0).isBackFaceShown();
      doReturn(false).when(light0).isDeformable();
      doReturn(false).when(light0).isDoorOrWindow();
      doReturn(false).when(light0).isMovable();
      doReturn(false).when(light0).isResizable();
      doReturn(false).when(light0).isTexturable();
      HomeLight homeLight0 = new HomeLight(light0);
      assertNotNull(homeLight0);
      assertFalse(homeLight0.isTexturable());
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertFalse(homeLight0.isBackFaceShown());
      assertFalse(homeLight0.isModelMirrored());
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertNull(homeLight0.getName());
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertFalse(homeLight0.isNameVisible());
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      assertNull(homeLight0.getDescription());
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertFalse(homeLight0.isResizable());
      assertTrue(homeLight0.isVisible());
      assertNull(homeLight0.getShininess());
      assertFalse(homeLight0.isDeformable());
      assertNull(homeLight0.getCatalogId());
      assertNull(homeLight0.getColor());
      assertNull(homeLight0.getCurrency());
      assertFalse(homeLight0.isMovable());
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      
      homeLight0.setElevation((-1.0F));
      assertFalse(homeLight0.isTexturable());
      assertEquals((-1.0F), homeLight0.getGroundElevation(), 0.01F);
      assertFalse(homeLight0.isBackFaceShown());
      assertFalse(homeLight0.isModelMirrored());
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertNull(homeLight0.getName());
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertFalse(homeLight0.isNameVisible());
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      assertNull(homeLight0.getDescription());
      assertEquals((-1.0F), homeLight0.getElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertFalse(homeLight0.isResizable());
      assertTrue(homeLight0.isVisible());
      assertNull(homeLight0.getShininess());
      assertFalse(homeLight0.isDeformable());
      assertNull(homeLight0.getCatalogId());
      assertNull(homeLight0.getColor());
      assertNull(homeLight0.getCurrency());
      assertFalse(homeLight0.isMovable());
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      
      int int0 = Float.floatToIntBits((byte) (-32));
      assertEquals((-1040187392), int0);
      
      boolean boolean1 = homeLight0.isPointAt((byte)1, (-1.0F), (-1.0F));
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      assertFalse(homeLight0.isTexturable());
      assertEquals((-1.0F), homeLight0.getGroundElevation(), 0.01F);
      assertFalse(homeLight0.isBackFaceShown());
      assertFalse(homeLight0.isModelMirrored());
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertNull(homeLight0.getName());
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertFalse(homeLight0.isNameVisible());
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      assertNull(homeLight0.getDescription());
      assertEquals((-1.0F), homeLight0.getElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertFalse(homeLight0.isResizable());
      assertTrue(homeLight0.isVisible());
      assertNull(homeLight0.getShininess());
      assertFalse(homeLight0.isDeformable());
      assertNull(homeLight0.getCatalogId());
      assertNull(homeLight0.getColor());
      assertNull(homeLight0.getCurrency());
      assertFalse(homeLight0.isMovable());
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      
      int int1 = Float.floatToIntBits((-741.9441F));
      assertFalse(int1 == int0);
      assertEquals((-1002865556), int1);
      
      BigDecimal bigDecimal0 = homeLight0.getValueAddedTax();
      assertNull(bigDecimal0);
      assertFalse(homeLight0.isTexturable());
      assertEquals((-1.0F), homeLight0.getGroundElevation(), 0.01F);
      assertFalse(homeLight0.isBackFaceShown());
      assertFalse(homeLight0.isModelMirrored());
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertNull(homeLight0.getName());
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertFalse(homeLight0.isNameVisible());
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      assertNull(homeLight0.getDescription());
      assertEquals((-1.0F), homeLight0.getElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertFalse(homeLight0.isResizable());
      assertTrue(homeLight0.isVisible());
      assertNull(homeLight0.getShininess());
      assertFalse(homeLight0.isDeformable());
      assertNull(homeLight0.getCatalogId());
      assertNull(homeLight0.getColor());
      assertNull(homeLight0.getCurrency());
      assertFalse(homeLight0.isMovable());
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      
      Level level0 = new Level("com.eteks.sweethome3d.model.HomePieceOfFurniture$9", (-741.9441F), (-1.0F), (-429.46F));
      assertNotNull(level0);
      assertTrue(level0.isVisible());
      assertEquals((-429.46F), level0.getHeight(), 0.01F);
      assertEquals("com.eteks.sweethome3d.model.HomePieceOfFurniture$9", level0.getName());
      assertEquals((-741.9441F), level0.getElevation(), 0.01F);
      assertEquals((-1.0F), level0.getFloorThickness(), 0.01F);
      
      homeLight0.setLevel(level0);
      assertFalse(homeLight0.isTexturable());
      assertFalse(homeLight0.isBackFaceShown());
      assertFalse(homeLight0.isModelMirrored());
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertNull(homeLight0.getName());
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertFalse(homeLight0.isNameVisible());
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      assertNull(homeLight0.getDescription());
      assertEquals((-1.0F), homeLight0.getElevation(), 0.01F);
      assertEquals((-742.9441F), homeLight0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertFalse(homeLight0.isResizable());
      assertTrue(homeLight0.isVisible());
      assertNull(homeLight0.getShininess());
      assertFalse(homeLight0.isDeformable());
      assertNull(homeLight0.getCatalogId());
      assertNull(homeLight0.getColor());
      assertNull(homeLight0.getCurrency());
      assertFalse(homeLight0.isMovable());
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertTrue(level0.isVisible());
      assertEquals((-429.46F), level0.getHeight(), 0.01F);
      assertEquals("com.eteks.sweethome3d.model.HomePieceOfFurniture$9", level0.getName());
      assertEquals((-741.9441F), level0.getElevation(), 0.01F);
      assertEquals((-1.0F), level0.getFloorThickness(), 0.01F);
      
      Level level1 = homeLight0.getLevel();
      assertNotNull(level1);
      assertSame(level1, level0);
      assertFalse(homeLight0.isTexturable());
      assertFalse(homeLight0.isBackFaceShown());
      assertFalse(homeLight0.isModelMirrored());
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertNull(homeLight0.getName());
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertFalse(homeLight0.isNameVisible());
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      assertNull(homeLight0.getDescription());
      assertEquals((-1.0F), homeLight0.getElevation(), 0.01F);
      assertEquals((-742.9441F), homeLight0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertFalse(homeLight0.isResizable());
      assertTrue(homeLight0.isVisible());
      assertNull(homeLight0.getShininess());
      assertFalse(homeLight0.isDeformable());
      assertNull(homeLight0.getCatalogId());
      assertNull(homeLight0.getColor());
      assertNull(homeLight0.getCurrency());
      assertFalse(homeLight0.isMovable());
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals((-741.9441F), level1.getElevation(), 0.01F);
      assertEquals((-1.0F), level1.getFloorThickness(), 0.01F);
      assertTrue(level1.isVisible());
      assertEquals((-429.46F), level1.getHeight(), 0.01F);
      assertEquals("com.eteks.sweethome3d.model.HomePieceOfFurniture$9", level1.getName());
      
      HomeLight homeLight1 = homeLight0.clone();
      assertNotNull(homeLight1);
      assertNotSame(homeLight0, homeLight1);
      assertNotSame(homeLight1, homeLight0);
      assertFalse(homeLight1.equals((Object)homeLight0));
      assertFalse(homeLight0.isTexturable());
      assertFalse(homeLight0.isBackFaceShown());
      assertFalse(homeLight0.isModelMirrored());
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertNull(homeLight0.getName());
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertFalse(homeLight0.isNameVisible());
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      assertNull(homeLight0.getDescription());
      assertEquals((-1.0F), homeLight0.getElevation(), 0.01F);
      assertEquals((-742.9441F), homeLight0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertFalse(homeLight0.isResizable());
      assertTrue(homeLight0.isVisible());
      assertNull(homeLight0.getShininess());
      assertFalse(homeLight0.isDeformable());
      assertNull(homeLight0.getCatalogId());
      assertNull(homeLight0.getColor());
      assertNull(homeLight0.getCurrency());
      assertFalse(homeLight0.isMovable());
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertFalse(homeLight1.isDeformable());
      assertNull(homeLight1.getCurrency());
      assertEquals(0.0F, homeLight1.getWidth(), 0.01F);
      assertTrue(homeLight1.isVisible());
      assertEquals(0.0F, homeLight1.getY(), 0.01F);
      assertNull(homeLight1.getColor());
      assertEquals(0.0F, homeLight1.getNameYOffset(), 0.01F);
      assertEquals(0.0F, homeLight1.getX(), 0.01F);
      assertEquals(0.0F, homeLight1.getAngle(), 0.01F);
      assertFalse(homeLight1.isTexturable());
      assertFalse(homeLight1.isDoorOrWindow());
      assertFalse(homeLight1.isModelMirrored());
      assertFalse(homeLight1.isBackFaceShown());
      assertFalse(homeLight1.isNameVisible());
      assertNull(homeLight1.getName());
      assertEquals(0.0F, homeLight1.getDepth(), 0.01F);
      assertNull(homeLight1.getDescription());
      assertEquals(0.0F, homeLight1.getNameAngle(), 0.01F);
      assertEquals((-1.0F), homeLight1.getElevation(), 0.01F);
      assertEquals(0.5F, homeLight1.getPower(), 0.01F);
      assertNull(homeLight1.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight1.getNameXOffset(), 0.01F);
      assertNull(homeLight1.getCatalogId());
      assertEquals((-1.0F), homeLight1.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight1.getHeight(), 0.01F);
      assertFalse(homeLight1.isResizable());
      assertFalse(homeLight1.isMovable());
      assertNull(homeLight1.getShininess());
      
      homeLight1.setAngle((-1.0F));
      assertNotSame(homeLight0, homeLight1);
      assertNotSame(homeLight1, homeLight0);
      assertFalse(homeLight0.equals((Object)homeLight1));
      assertFalse(homeLight1.equals((Object)homeLight0));
      assertFalse(homeLight0.isTexturable());
      assertFalse(homeLight0.isBackFaceShown());
      assertFalse(homeLight0.isModelMirrored());
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertNull(homeLight0.getName());
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertFalse(homeLight0.isNameVisible());
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      assertNull(homeLight0.getDescription());
      assertEquals((-1.0F), homeLight0.getElevation(), 0.01F);
      assertEquals((-742.9441F), homeLight0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertFalse(homeLight0.isResizable());
      assertTrue(homeLight0.isVisible());
      assertNull(homeLight0.getShininess());
      assertFalse(homeLight0.isDeformable());
      assertNull(homeLight0.getCatalogId());
      assertNull(homeLight0.getColor());
      assertNull(homeLight0.getCurrency());
      assertFalse(homeLight0.isMovable());
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertFalse(homeLight1.isDeformable());
      assertNull(homeLight1.getCurrency());
      assertEquals(0.0F, homeLight1.getWidth(), 0.01F);
      assertEquals(5.2831855F, homeLight1.getAngle(), 0.01F);
      assertTrue(homeLight1.isVisible());
      assertEquals(0.0F, homeLight1.getY(), 0.01F);
      assertNull(homeLight1.getColor());
      assertEquals(0.0F, homeLight1.getNameYOffset(), 0.01F);
      assertEquals(0.0F, homeLight1.getX(), 0.01F);
      assertFalse(homeLight1.isTexturable());
      assertFalse(homeLight1.isDoorOrWindow());
      assertFalse(homeLight1.isModelMirrored());
      assertFalse(homeLight1.isBackFaceShown());
      assertFalse(homeLight1.isNameVisible());
      assertNull(homeLight1.getName());
      assertEquals(0.0F, homeLight1.getDepth(), 0.01F);
      assertNull(homeLight1.getDescription());
      assertEquals(0.0F, homeLight1.getNameAngle(), 0.01F);
      assertEquals((-1.0F), homeLight1.getElevation(), 0.01F);
      assertEquals(0.5F, homeLight1.getPower(), 0.01F);
      assertNull(homeLight1.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight1.getNameXOffset(), 0.01F);
      assertNull(homeLight1.getCatalogId());
      assertEquals((-1.0F), homeLight1.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight1.getHeight(), 0.01F);
      assertFalse(homeLight1.isResizable());
      assertFalse(homeLight1.isMovable());
      assertNull(homeLight1.getShininess());
      
      homeLight0.setName("");
      assertNotSame(homeLight0, homeLight1);
      assertFalse(homeLight0.equals((Object)homeLight1));
      assertFalse(homeLight0.isTexturable());
      assertFalse(homeLight0.isBackFaceShown());
      assertFalse(homeLight0.isModelMirrored());
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals("", homeLight0.getName());
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertFalse(homeLight0.isNameVisible());
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      assertNull(homeLight0.getDescription());
      assertEquals((-1.0F), homeLight0.getElevation(), 0.01F);
      assertEquals((-742.9441F), homeLight0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertFalse(homeLight0.isResizable());
      assertTrue(homeLight0.isVisible());
      assertNull(homeLight0.getShininess());
      assertFalse(homeLight0.isDeformable());
      assertNull(homeLight0.getCatalogId());
      assertNull(homeLight0.getColor());
      assertNull(homeLight0.getCurrency());
      assertFalse(homeLight0.isMovable());
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      
      Integer integer1 = new Integer((-1469));
      assertNotNull(integer1);
      assertFalse(integer1.equals((Object)int0));
      assertFalse(integer1.equals((Object)int1));
      assertTrue(integer1.equals((Object)integer0));
      assertEquals((-1469), (int)integer1);
      
      System.setCurrentTimeMillis((byte)1);
      float float0 = homeLight0.getElevation();
      assertNotSame(homeLight0, homeLight1);
      assertFalse(homeLight0.equals((Object)homeLight1));
      assertEquals((-1.0F), float0, 0.01F);
      assertFalse(homeLight0.isTexturable());
      assertFalse(homeLight0.isBackFaceShown());
      assertFalse(homeLight0.isModelMirrored());
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals("", homeLight0.getName());
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertFalse(homeLight0.isNameVisible());
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      assertNull(homeLight0.getDescription());
      assertEquals((-1.0F), homeLight0.getElevation(), 0.01F);
      assertEquals((-742.9441F), homeLight0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertFalse(homeLight0.isResizable());
      assertTrue(homeLight0.isVisible());
      assertNull(homeLight0.getShininess());
      assertFalse(homeLight0.isDeformable());
      assertNull(homeLight0.getCatalogId());
      assertNull(homeLight0.getColor());
      assertNull(homeLight0.getCurrency());
      assertFalse(homeLight0.isMovable());
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test200()  throws Throwable  {
      Light light0 = mock(Light.class, new ViolatedAssumptionAnswer());
      doReturn((LightSource[]) null).when(light0).getLightSources();
      doReturn((Integer) null).when(light0).getColor();
      doReturn((String) null).when(light0).getCurrency();
      doReturn(0.0F).when(light0).getDepth();
      doReturn((String) null).when(light0).getDescription();
      doReturn(0.0F).when(light0).getElevation();
      doReturn(0.0F).when(light0).getHeight();
      doReturn((Content) null).when(light0).getIcon();
      doReturn((Content) null).when(light0).getModel();
      doReturn((float[][]) null).when(light0).getModelRotation();
      doReturn((String) null).when(light0).getName();
      doReturn((Content) null).when(light0).getPlanIcon();
      doReturn((BigDecimal) null).when(light0).getPrice();
      doReturn((String) null).when(light0).getStaircaseCutOutShape();
      doReturn((BigDecimal) null).when(light0).getValueAddedTaxPercentage();
      doReturn(0.0F).when(light0).getWidth();
      doReturn(false).when(light0).isBackFaceShown();
      doReturn(false).when(light0).isDeformable();
      doReturn(false).when(light0).isDoorOrWindow();
      doReturn(false).when(light0).isMovable();
      doReturn(false).when(light0).isResizable();
      doReturn(false).when(light0).isTexturable();
      HomeLight homeLight0 = new HomeLight(light0);
      assertNotNull(homeLight0);
      assertFalse(homeLight0.isNameVisible());
      assertFalse(homeLight0.isDeformable());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertNull(homeLight0.getColor());
      assertFalse(homeLight0.isModelMirrored());
      assertTrue(homeLight0.isVisible());
      assertFalse(homeLight0.isMovable());
      assertFalse(homeLight0.isResizable());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertNull(homeLight0.getCurrency());
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertNull(homeLight0.getDescription());
      assertNull(homeLight0.getName());
      assertNull(homeLight0.getCatalogId());
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertNull(homeLight0.getShininess());
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      assertFalse(homeLight0.isTexturable());
      assertFalse(homeLight0.isBackFaceShown());
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      
      homeLight0.setY(0.5F);
      assertFalse(homeLight0.isNameVisible());
      assertFalse(homeLight0.isDeformable());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertNull(homeLight0.getColor());
      assertFalse(homeLight0.isModelMirrored());
      assertTrue(homeLight0.isVisible());
      assertFalse(homeLight0.isMovable());
      assertFalse(homeLight0.isResizable());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertNull(homeLight0.getCurrency());
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertNull(homeLight0.getDescription());
      assertNull(homeLight0.getName());
      assertNull(homeLight0.getCatalogId());
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertNull(homeLight0.getShininess());
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      assertFalse(homeLight0.isTexturable());
      assertFalse(homeLight0.isBackFaceShown());
      assertEquals(0.5F, homeLight0.getY(), 0.01F);
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      
      homeLight0.setMovable(false);
      assertFalse(homeLight0.isNameVisible());
      assertFalse(homeLight0.isDeformable());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertNull(homeLight0.getColor());
      assertFalse(homeLight0.isModelMirrored());
      assertTrue(homeLight0.isVisible());
      assertFalse(homeLight0.isMovable());
      assertFalse(homeLight0.isResizable());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertNull(homeLight0.getCurrency());
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertNull(homeLight0.getDescription());
      assertNull(homeLight0.getName());
      assertNull(homeLight0.getCatalogId());
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertNull(homeLight0.getShininess());
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      assertFalse(homeLight0.isTexturable());
      assertFalse(homeLight0.isBackFaceShown());
      assertEquals(0.5F, homeLight0.getY(), 0.01F);
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      
      HomeLight homeLight1 = homeLight0.clone();
      assertNotNull(homeLight1);
      assertNotSame(homeLight0, homeLight1);
      assertNotSame(homeLight1, homeLight0);
      assertFalse(homeLight1.equals((Object)homeLight0));
      assertFalse(homeLight0.isNameVisible());
      assertFalse(homeLight0.isDeformable());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertNull(homeLight0.getColor());
      assertFalse(homeLight0.isModelMirrored());
      assertTrue(homeLight0.isVisible());
      assertFalse(homeLight0.isMovable());
      assertFalse(homeLight0.isResizable());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertNull(homeLight0.getCurrency());
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertNull(homeLight0.getDescription());
      assertNull(homeLight0.getName());
      assertNull(homeLight0.getCatalogId());
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertNull(homeLight0.getShininess());
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      assertFalse(homeLight0.isTexturable());
      assertFalse(homeLight0.isBackFaceShown());
      assertEquals(0.5F, homeLight0.getY(), 0.01F);
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertFalse(homeLight1.isNameVisible());
      assertNull(homeLight1.getColor());
      assertEquals(0.5F, homeLight1.getY(), 0.01F);
      assertEquals(0.0F, homeLight1.getX(), 0.01F);
      assertFalse(homeLight1.isBackFaceShown());
      assertTrue(homeLight1.isVisible());
      assertFalse(homeLight1.isDeformable());
      assertFalse(homeLight1.isModelMirrored());
      assertEquals(0.0F, homeLight1.getNameYOffset(), 0.01F);
      assertNull(homeLight1.getCurrency());
      assertFalse(homeLight1.isMovable());
      assertEquals(0.0F, homeLight1.getHeight(), 0.01F);
      assertEquals(0.5F, homeLight1.getPower(), 0.01F);
      assertEquals(0.0F, homeLight1.getNameAngle(), 0.01F);
      assertNull(homeLight1.getName());
      assertEquals(0.0F, homeLight1.getNameXOffset(), 0.01F);
      assertNull(homeLight1.getCatalogId());
      assertFalse(homeLight1.isResizable());
      assertNull(homeLight1.getShininess());
      assertNull(homeLight1.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight1.getDepth(), 0.01F);
      assertFalse(homeLight1.isTexturable());
      assertEquals(0.0F, homeLight1.getGroundElevation(), 0.01F);
      assertNull(homeLight1.getDescription());
      assertFalse(homeLight1.isDoorOrWindow());
      assertEquals(0.0F, homeLight1.getAngle(), 0.01F);
      assertEquals(0.0F, homeLight1.getElevation(), 0.01F);
      assertEquals(0.0F, homeLight1.getWidth(), 0.01F);
      
      boolean boolean0 = homeLight0.isPointAt(1172.975F, 0.3926991F, 1172.975F);
      assertNotSame(homeLight0, homeLight1);
      assertFalse(homeLight0.equals((Object)homeLight1));
      assertTrue(boolean0);
      assertFalse(homeLight0.isNameVisible());
      assertFalse(homeLight0.isDeformable());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertNull(homeLight0.getColor());
      assertFalse(homeLight0.isModelMirrored());
      assertTrue(homeLight0.isVisible());
      assertFalse(homeLight0.isMovable());
      assertFalse(homeLight0.isResizable());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertNull(homeLight0.getCurrency());
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertNull(homeLight0.getDescription());
      assertNull(homeLight0.getName());
      assertNull(homeLight0.getCatalogId());
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertNull(homeLight0.getShininess());
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      assertFalse(homeLight0.isTexturable());
      assertFalse(homeLight0.isBackFaceShown());
      assertEquals(0.5F, homeLight0.getY(), 0.01F);
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      
      BigDecimal bigDecimal0 = homeLight1.getPriceValueAddedTaxIncluded();
      assertNull(bigDecimal0);
      assertNotSame(homeLight0, homeLight1);
      assertNotSame(homeLight1, homeLight0);
      assertFalse(homeLight0.equals((Object)homeLight1));
      assertFalse(homeLight1.equals((Object)homeLight0));
      assertFalse(homeLight0.isNameVisible());
      assertFalse(homeLight0.isDeformable());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertNull(homeLight0.getColor());
      assertFalse(homeLight0.isModelMirrored());
      assertTrue(homeLight0.isVisible());
      assertFalse(homeLight0.isMovable());
      assertFalse(homeLight0.isResizable());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertNull(homeLight0.getCurrency());
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertNull(homeLight0.getDescription());
      assertNull(homeLight0.getName());
      assertNull(homeLight0.getCatalogId());
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertNull(homeLight0.getShininess());
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      assertFalse(homeLight0.isTexturable());
      assertFalse(homeLight0.isBackFaceShown());
      assertEquals(0.5F, homeLight0.getY(), 0.01F);
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertFalse(homeLight1.isNameVisible());
      assertNull(homeLight1.getColor());
      assertEquals(0.5F, homeLight1.getY(), 0.01F);
      assertEquals(0.0F, homeLight1.getX(), 0.01F);
      assertFalse(homeLight1.isBackFaceShown());
      assertTrue(homeLight1.isVisible());
      assertFalse(homeLight1.isDeformable());
      assertFalse(homeLight1.isModelMirrored());
      assertEquals(0.0F, homeLight1.getNameYOffset(), 0.01F);
      assertNull(homeLight1.getCurrency());
      assertFalse(homeLight1.isMovable());
      assertEquals(0.0F, homeLight1.getHeight(), 0.01F);
      assertEquals(0.5F, homeLight1.getPower(), 0.01F);
      assertEquals(0.0F, homeLight1.getNameAngle(), 0.01F);
      assertNull(homeLight1.getName());
      assertEquals(0.0F, homeLight1.getNameXOffset(), 0.01F);
      assertNull(homeLight1.getCatalogId());
      assertFalse(homeLight1.isResizable());
      assertNull(homeLight1.getShininess());
      assertNull(homeLight1.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight1.getDepth(), 0.01F);
      assertFalse(homeLight1.isTexturable());
      assertEquals(0.0F, homeLight1.getGroundElevation(), 0.01F);
      assertNull(homeLight1.getDescription());
      assertFalse(homeLight1.isDoorOrWindow());
      assertEquals(0.0F, homeLight1.getAngle(), 0.01F);
      assertEquals(0.0F, homeLight1.getElevation(), 0.01F);
      assertEquals(0.0F, homeLight1.getWidth(), 0.01F);
      
      boolean boolean1 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
      
      boolean boolean2 = homeLight0.isNameVisible();
      assertNotSame(homeLight0, homeLight1);
      assertFalse(homeLight0.equals((Object)homeLight1));
      assertFalse(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      assertFalse(boolean2);
      assertFalse(homeLight0.isNameVisible());
      assertFalse(homeLight0.isDeformable());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertNull(homeLight0.getColor());
      assertFalse(homeLight0.isModelMirrored());
      assertTrue(homeLight0.isVisible());
      assertFalse(homeLight0.isMovable());
      assertFalse(homeLight0.isResizable());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertNull(homeLight0.getCurrency());
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertNull(homeLight0.getDescription());
      assertNull(homeLight0.getName());
      assertNull(homeLight0.getCatalogId());
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertNull(homeLight0.getShininess());
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      assertFalse(homeLight0.isTexturable());
      assertFalse(homeLight0.isBackFaceShown());
      assertEquals(0.5F, homeLight0.getY(), 0.01F);
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      
      // Undeclared exception!
      try { 
        homeLight1.setModelMirrored(true);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Piece isn't resizable
         //
         verifyException("com.eteks.sweethome3d.model.HomePieceOfFurniture", e);
      }
  }

  @Test(timeout = 4000)
  public void test201()  throws Throwable  {
      Light light0 = mock(Light.class, new ViolatedAssumptionAnswer());
      doReturn((LightSource[]) null).when(light0).getLightSources();
      doReturn((Integer) null).when(light0).getColor();
      doReturn((String) null).when(light0).getCurrency();
      doReturn(0.0F).when(light0).getDepth();
      doReturn((String) null).when(light0).getDescription();
      doReturn(0.0F).when(light0).getElevation();
      doReturn(0.0F).when(light0).getHeight();
      doReturn((Content) null).when(light0).getIcon();
      doReturn((Content) null).when(light0).getModel();
      doReturn((float[][]) null).when(light0).getModelRotation();
      doReturn((String) null).when(light0).getName();
      doReturn((Content) null).when(light0).getPlanIcon();
      doReturn((BigDecimal) null).when(light0).getPrice();
      doReturn((String) null).when(light0).getStaircaseCutOutShape();
      doReturn((BigDecimal) null).when(light0).getValueAddedTaxPercentage();
      doReturn(0.0F).when(light0).getWidth();
      doReturn(false).when(light0).isBackFaceShown();
      doReturn(false).when(light0).isDeformable();
      doReturn(false).when(light0).isDoorOrWindow();
      doReturn(false).when(light0).isMovable();
      doReturn(false).when(light0).isResizable();
      doReturn(false).when(light0).isTexturable();
      HomeLight homeLight0 = new HomeLight(light0);
      assertNotNull(homeLight0);
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertNull(homeLight0.getDescription());
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertNull(homeLight0.getName());
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertNull(homeLight0.getShininess());
      assertFalse(homeLight0.isResizable());
      assertFalse(homeLight0.isDoorOrWindow());
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertFalse(homeLight0.isTexturable());
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertNull(homeLight0.getCurrency());
      assertTrue(homeLight0.isVisible());
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertFalse(homeLight0.isDeformable());
      assertFalse(homeLight0.isNameVisible());
      assertFalse(homeLight0.isMovable());
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertFalse(homeLight0.isBackFaceShown());
      assertFalse(homeLight0.isModelMirrored());
      assertNull(homeLight0.getCatalogId());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertNull(homeLight0.getColor());
      
      String string0 = homeLight0.getDescription();
      assertNull(string0);
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertNull(homeLight0.getDescription());
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertNull(homeLight0.getName());
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertNull(homeLight0.getShininess());
      assertFalse(homeLight0.isResizable());
      assertFalse(homeLight0.isDoorOrWindow());
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertFalse(homeLight0.isTexturable());
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertNull(homeLight0.getCurrency());
      assertTrue(homeLight0.isVisible());
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertFalse(homeLight0.isDeformable());
      assertFalse(homeLight0.isNameVisible());
      assertFalse(homeLight0.isMovable());
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertFalse(homeLight0.isBackFaceShown());
      assertFalse(homeLight0.isModelMirrored());
      assertNull(homeLight0.getCatalogId());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertNull(homeLight0.getColor());
      
      HomeLight homeLight1 = homeLight0.clone();
      assertNotNull(homeLight1);
      assertNotSame(homeLight0, homeLight1);
      assertNotSame(homeLight1, homeLight0);
      assertFalse(homeLight1.equals((Object)homeLight0));
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertNull(homeLight0.getDescription());
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertNull(homeLight0.getName());
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertNull(homeLight0.getShininess());
      assertFalse(homeLight0.isResizable());
      assertFalse(homeLight0.isDoorOrWindow());
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertFalse(homeLight0.isTexturable());
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertNull(homeLight0.getCurrency());
      assertTrue(homeLight0.isVisible());
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertFalse(homeLight0.isDeformable());
      assertFalse(homeLight0.isNameVisible());
      assertFalse(homeLight0.isMovable());
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertFalse(homeLight0.isBackFaceShown());
      assertFalse(homeLight0.isModelMirrored());
      assertNull(homeLight0.getCatalogId());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertNull(homeLight0.getColor());
      assertEquals(0.0F, homeLight1.getNameYOffset(), 0.01F);
      assertFalse(homeLight1.isNameVisible());
      assertNull(homeLight1.getColor());
      assertFalse(homeLight1.isBackFaceShown());
      assertFalse(homeLight1.isModelMirrored());
      assertTrue(homeLight1.isVisible());
      assertFalse(homeLight1.isDeformable());
      assertEquals(0.0F, homeLight1.getAngle(), 0.01F);
      assertFalse(homeLight1.isTexturable());
      assertEquals(0.0F, homeLight1.getY(), 0.01F);
      assertEquals(0.0F, homeLight1.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight1.getX(), 0.01F);
      assertEquals(0.0F, homeLight1.getWidth(), 0.01F);
      assertFalse(homeLight1.isDoorOrWindow());
      assertNull(homeLight1.getDescription());
      assertEquals(0.0F, homeLight1.getElevation(), 0.01F);
      assertNull(homeLight1.getName());
      assertEquals(0.5F, homeLight1.getPower(), 0.01F);
      assertNull(homeLight1.getCatalogId());
      assertEquals(0.0F, homeLight1.getNameXOffset(), 0.01F);
      assertNull(homeLight1.getShininess());
      assertNull(homeLight1.getStaircaseCutOutShape());
      assertFalse(homeLight1.isResizable());
      assertEquals(0.0F, homeLight1.getDepth(), 0.01F);
      assertEquals(0.0F, homeLight1.getNameAngle(), 0.01F);
      assertEquals(0.0F, homeLight1.getHeight(), 0.01F);
      assertFalse(homeLight1.isMovable());
      assertNull(homeLight1.getCurrency());
      
      boolean boolean0 = homeLight1.isBottomRightPointAt((-3662.0F), (-20.46F), (-20.46F));
      assertNotSame(homeLight0, homeLight1);
      assertNotSame(homeLight1, homeLight0);
      assertFalse(homeLight0.equals((Object)homeLight1));
      assertFalse(homeLight1.equals((Object)homeLight0));
      assertFalse(boolean0);
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertNull(homeLight0.getDescription());
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertNull(homeLight0.getName());
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertNull(homeLight0.getShininess());
      assertFalse(homeLight0.isResizable());
      assertFalse(homeLight0.isDoorOrWindow());
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertFalse(homeLight0.isTexturable());
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertNull(homeLight0.getCurrency());
      assertTrue(homeLight0.isVisible());
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertFalse(homeLight0.isDeformable());
      assertFalse(homeLight0.isNameVisible());
      assertFalse(homeLight0.isMovable());
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertFalse(homeLight0.isBackFaceShown());
      assertFalse(homeLight0.isModelMirrored());
      assertNull(homeLight0.getCatalogId());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertNull(homeLight0.getColor());
      assertEquals(0.0F, homeLight1.getNameYOffset(), 0.01F);
      assertFalse(homeLight1.isNameVisible());
      assertNull(homeLight1.getColor());
      assertFalse(homeLight1.isBackFaceShown());
      assertFalse(homeLight1.isModelMirrored());
      assertTrue(homeLight1.isVisible());
      assertFalse(homeLight1.isDeformable());
      assertEquals(0.0F, homeLight1.getAngle(), 0.01F);
      assertFalse(homeLight1.isTexturable());
      assertEquals(0.0F, homeLight1.getY(), 0.01F);
      assertEquals(0.0F, homeLight1.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight1.getX(), 0.01F);
      assertEquals(0.0F, homeLight1.getWidth(), 0.01F);
      assertFalse(homeLight1.isDoorOrWindow());
      assertNull(homeLight1.getDescription());
      assertEquals(0.0F, homeLight1.getElevation(), 0.01F);
      assertNull(homeLight1.getName());
      assertEquals(0.5F, homeLight1.getPower(), 0.01F);
      assertNull(homeLight1.getCatalogId());
      assertEquals(0.0F, homeLight1.getNameXOffset(), 0.01F);
      assertNull(homeLight1.getShininess());
      assertNull(homeLight1.getStaircaseCutOutShape());
      assertFalse(homeLight1.isResizable());
      assertEquals(0.0F, homeLight1.getDepth(), 0.01F);
      assertEquals(0.0F, homeLight1.getNameAngle(), 0.01F);
      assertEquals(0.0F, homeLight1.getHeight(), 0.01F);
      assertFalse(homeLight1.isMovable());
      assertNull(homeLight1.getCurrency());
      
      homeLight1.setMovable(false);
      assertNotSame(homeLight0, homeLight1);
      assertNotSame(homeLight1, homeLight0);
      assertFalse(homeLight0.equals((Object)homeLight1));
      assertFalse(homeLight1.equals((Object)homeLight0));
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertNull(homeLight0.getDescription());
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertNull(homeLight0.getName());
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertNull(homeLight0.getShininess());
      assertFalse(homeLight0.isResizable());
      assertFalse(homeLight0.isDoorOrWindow());
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertFalse(homeLight0.isTexturable());
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertNull(homeLight0.getCurrency());
      assertTrue(homeLight0.isVisible());
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertFalse(homeLight0.isDeformable());
      assertFalse(homeLight0.isNameVisible());
      assertFalse(homeLight0.isMovable());
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertFalse(homeLight0.isBackFaceShown());
      assertFalse(homeLight0.isModelMirrored());
      assertNull(homeLight0.getCatalogId());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertNull(homeLight0.getColor());
      assertEquals(0.0F, homeLight1.getNameYOffset(), 0.01F);
      assertFalse(homeLight1.isNameVisible());
      assertNull(homeLight1.getColor());
      assertFalse(homeLight1.isBackFaceShown());
      assertFalse(homeLight1.isModelMirrored());
      assertTrue(homeLight1.isVisible());
      assertFalse(homeLight1.isDeformable());
      assertEquals(0.0F, homeLight1.getAngle(), 0.01F);
      assertFalse(homeLight1.isTexturable());
      assertEquals(0.0F, homeLight1.getY(), 0.01F);
      assertEquals(0.0F, homeLight1.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight1.getX(), 0.01F);
      assertEquals(0.0F, homeLight1.getWidth(), 0.01F);
      assertFalse(homeLight1.isDoorOrWindow());
      assertNull(homeLight1.getDescription());
      assertEquals(0.0F, homeLight1.getElevation(), 0.01F);
      assertNull(homeLight1.getName());
      assertEquals(0.5F, homeLight1.getPower(), 0.01F);
      assertNull(homeLight1.getCatalogId());
      assertEquals(0.0F, homeLight1.getNameXOffset(), 0.01F);
      assertNull(homeLight1.getShininess());
      assertNull(homeLight1.getStaircaseCutOutShape());
      assertFalse(homeLight1.isResizable());
      assertEquals(0.0F, homeLight1.getDepth(), 0.01F);
      assertEquals(0.0F, homeLight1.getNameAngle(), 0.01F);
      assertEquals(0.0F, homeLight1.getHeight(), 0.01F);
      assertFalse(homeLight1.isMovable());
      assertNull(homeLight1.getCurrency());
      
      float[][] floatArray0 = homeLight1.getPoints();
      assertEquals(4, floatArray0.length);
      assertNotNull(floatArray0);
      assertNotSame(homeLight0, homeLight1);
      assertNotSame(homeLight1, homeLight0);
      assertFalse(homeLight0.equals((Object)homeLight1));
      assertFalse(homeLight1.equals((Object)homeLight0));
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertNull(homeLight0.getDescription());
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertNull(homeLight0.getName());
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertNull(homeLight0.getShininess());
      assertFalse(homeLight0.isResizable());
      assertFalse(homeLight0.isDoorOrWindow());
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertFalse(homeLight0.isTexturable());
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertNull(homeLight0.getCurrency());
      assertTrue(homeLight0.isVisible());
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertFalse(homeLight0.isDeformable());
      assertFalse(homeLight0.isNameVisible());
      assertFalse(homeLight0.isMovable());
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertFalse(homeLight0.isBackFaceShown());
      assertFalse(homeLight0.isModelMirrored());
      assertNull(homeLight0.getCatalogId());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertNull(homeLight0.getColor());
      assertEquals(0.0F, homeLight1.getNameYOffset(), 0.01F);
      assertFalse(homeLight1.isNameVisible());
      assertNull(homeLight1.getColor());
      assertFalse(homeLight1.isBackFaceShown());
      assertFalse(homeLight1.isModelMirrored());
      assertTrue(homeLight1.isVisible());
      assertFalse(homeLight1.isDeformable());
      assertEquals(0.0F, homeLight1.getAngle(), 0.01F);
      assertFalse(homeLight1.isTexturable());
      assertEquals(0.0F, homeLight1.getY(), 0.01F);
      assertEquals(0.0F, homeLight1.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight1.getX(), 0.01F);
      assertEquals(0.0F, homeLight1.getWidth(), 0.01F);
      assertFalse(homeLight1.isDoorOrWindow());
      assertNull(homeLight1.getDescription());
      assertEquals(0.0F, homeLight1.getElevation(), 0.01F);
      assertNull(homeLight1.getName());
      assertEquals(0.5F, homeLight1.getPower(), 0.01F);
      assertNull(homeLight1.getCatalogId());
      assertEquals(0.0F, homeLight1.getNameXOffset(), 0.01F);
      assertNull(homeLight1.getShininess());
      assertNull(homeLight1.getStaircaseCutOutShape());
      assertFalse(homeLight1.isResizable());
      assertEquals(0.0F, homeLight1.getDepth(), 0.01F);
      assertEquals(0.0F, homeLight1.getNameAngle(), 0.01F);
      assertEquals(0.0F, homeLight1.getHeight(), 0.01F);
      assertFalse(homeLight1.isMovable());
      assertNull(homeLight1.getCurrency());
  }

  @Test(timeout = 4000)
  public void test202()  throws Throwable  {
      Light light0 = mock(Light.class, new ViolatedAssumptionAnswer());
      doReturn((LightSource[]) null).when(light0).getLightSources();
      doReturn((Integer) null).when(light0).getColor();
      doReturn((String) null).when(light0).getCurrency();
      doReturn(0.0F).when(light0).getDepth();
      doReturn((String) null).when(light0).getDescription();
      doReturn(0.0F).when(light0).getElevation();
      doReturn(0.0F).when(light0).getHeight();
      doReturn((Content) null).when(light0).getIcon();
      doReturn((Content) null).when(light0).getModel();
      doReturn((float[][]) null).when(light0).getModelRotation();
      doReturn((String) null).when(light0).getName();
      doReturn((Content) null).when(light0).getPlanIcon();
      doReturn((BigDecimal) null).when(light0).getPrice();
      doReturn((String) null).when(light0).getStaircaseCutOutShape();
      doReturn((BigDecimal) null).when(light0).getValueAddedTaxPercentage();
      doReturn(0.0F).when(light0).getWidth();
      doReturn(false).when(light0).isBackFaceShown();
      doReturn(false).when(light0).isDeformable();
      doReturn(false).when(light0).isDoorOrWindow();
      doReturn(false).when(light0).isMovable();
      doReturn(false).when(light0).isResizable();
      doReturn(false).when(light0).isTexturable();
      HomeLight homeLight0 = new HomeLight(light0);
      assertNotNull(homeLight0);
      assertNull(homeLight0.getCatalogId());
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertFalse(homeLight0.isMovable());
      assertNull(homeLight0.getDescription());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertNull(homeLight0.getName());
      assertFalse(homeLight0.isBackFaceShown());
      assertFalse(homeLight0.isModelMirrored());
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertNull(homeLight0.getColor());
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertFalse(homeLight0.isNameVisible());
      assertFalse(homeLight0.isTexturable());
      assertFalse(homeLight0.isDoorOrWindow());
      assertNull(homeLight0.getCurrency());
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertTrue(homeLight0.isVisible());
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertFalse(homeLight0.isDeformable());
      assertFalse(homeLight0.isResizable());
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertNull(homeLight0.getShininess());
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      
      homeLight0.setElevation((-1.0F));
      assertNull(homeLight0.getCatalogId());
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertFalse(homeLight0.isMovable());
      assertNull(homeLight0.getDescription());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertNull(homeLight0.getName());
      assertFalse(homeLight0.isBackFaceShown());
      assertFalse(homeLight0.isModelMirrored());
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertNull(homeLight0.getColor());
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertFalse(homeLight0.isNameVisible());
      assertFalse(homeLight0.isTexturable());
      assertFalse(homeLight0.isDoorOrWindow());
      assertNull(homeLight0.getCurrency());
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertTrue(homeLight0.isVisible());
      assertEquals((-1.0F), homeLight0.getElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals((-1.0F), homeLight0.getGroundElevation(), 0.01F);
      assertFalse(homeLight0.isDeformable());
      assertFalse(homeLight0.isResizable());
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertNull(homeLight0.getShininess());
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      int int0 = Float.floatToIntBits((byte) (-32));
      assertEquals((-1040187392), int0);
      
      HomeLight homeLight1 = homeLight0.clone();
      assertNotNull(homeLight1);
      assertNotSame(homeLight0, homeLight1);
      assertNotSame(homeLight1, homeLight0);
      assertFalse(homeLight1.equals((Object)homeLight0));
      assertNull(homeLight0.getCatalogId());
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertFalse(homeLight0.isMovable());
      assertNull(homeLight0.getDescription());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertNull(homeLight0.getName());
      assertFalse(homeLight0.isBackFaceShown());
      assertFalse(homeLight0.isModelMirrored());
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertNull(homeLight0.getColor());
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertFalse(homeLight0.isNameVisible());
      assertFalse(homeLight0.isTexturable());
      assertFalse(homeLight0.isDoorOrWindow());
      assertNull(homeLight0.getCurrency());
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertTrue(homeLight0.isVisible());
      assertEquals((-1.0F), homeLight0.getElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals((-1.0F), homeLight0.getGroundElevation(), 0.01F);
      assertFalse(homeLight0.isDeformable());
      assertFalse(homeLight0.isResizable());
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertNull(homeLight0.getShininess());
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertFalse(homeLight1.isTexturable());
      assertEquals(0.0F, homeLight1.getAngle(), 0.01F);
      assertEquals(0.0F, homeLight1.getY(), 0.01F);
      assertEquals(0.0F, homeLight1.getX(), 0.01F);
      assertFalse(homeLight1.isModelMirrored());
      assertEquals(0.0F, homeLight1.getNameXOffset(), 0.01F);
      assertEquals((-1.0F), homeLight1.getGroundElevation(), 0.01F);
      assertNull(homeLight1.getColor());
      assertNull(homeLight1.getName());
      assertFalse(homeLight1.isBackFaceShown());
      assertFalse(homeLight1.isDoorOrWindow());
      assertNull(homeLight1.getDescription());
      assertEquals((-1.0F), homeLight1.getElevation(), 0.01F);
      assertEquals(0.0F, homeLight1.getWidth(), 0.01F);
      assertFalse(homeLight1.isNameVisible());
      assertEquals(0.0F, homeLight1.getHeight(), 0.01F);
      assertFalse(homeLight1.isResizable());
      assertEquals(0.0F, homeLight1.getNameYOffset(), 0.01F);
      assertTrue(homeLight1.isVisible());
      assertNull(homeLight1.getShininess());
      assertEquals(0.0F, homeLight1.getNameAngle(), 0.01F);
      assertNull(homeLight1.getCatalogId());
      assertNull(homeLight1.getStaircaseCutOutShape());
      assertEquals(0.5F, homeLight1.getPower(), 0.01F);
      assertEquals(0.0F, homeLight1.getDepth(), 0.01F);
      assertFalse(homeLight1.isDeformable());
      assertNull(homeLight1.getCurrency());
      assertFalse(homeLight1.isMovable());
      
      Level level0 = homeLight1.getLevel();
      assertNull(level0);
      assertNotSame(homeLight0, homeLight1);
      assertNotSame(homeLight1, homeLight0);
      assertFalse(homeLight0.equals((Object)homeLight1));
      assertFalse(homeLight1.equals((Object)homeLight0));
      assertNull(homeLight0.getCatalogId());
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertFalse(homeLight0.isMovable());
      assertNull(homeLight0.getDescription());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertNull(homeLight0.getName());
      assertFalse(homeLight0.isBackFaceShown());
      assertFalse(homeLight0.isModelMirrored());
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertNull(homeLight0.getColor());
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertFalse(homeLight0.isNameVisible());
      assertFalse(homeLight0.isTexturable());
      assertFalse(homeLight0.isDoorOrWindow());
      assertNull(homeLight0.getCurrency());
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertTrue(homeLight0.isVisible());
      assertEquals((-1.0F), homeLight0.getElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals((-1.0F), homeLight0.getGroundElevation(), 0.01F);
      assertFalse(homeLight0.isDeformable());
      assertFalse(homeLight0.isResizable());
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertNull(homeLight0.getShininess());
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertFalse(homeLight1.isTexturable());
      assertEquals(0.0F, homeLight1.getAngle(), 0.01F);
      assertEquals(0.0F, homeLight1.getY(), 0.01F);
      assertEquals(0.0F, homeLight1.getX(), 0.01F);
      assertFalse(homeLight1.isModelMirrored());
      assertEquals(0.0F, homeLight1.getNameXOffset(), 0.01F);
      assertEquals((-1.0F), homeLight1.getGroundElevation(), 0.01F);
      assertNull(homeLight1.getColor());
      assertNull(homeLight1.getName());
      assertFalse(homeLight1.isBackFaceShown());
      assertFalse(homeLight1.isDoorOrWindow());
      assertNull(homeLight1.getDescription());
      assertEquals((-1.0F), homeLight1.getElevation(), 0.01F);
      assertEquals(0.0F, homeLight1.getWidth(), 0.01F);
      assertFalse(homeLight1.isNameVisible());
      assertEquals(0.0F, homeLight1.getHeight(), 0.01F);
      assertFalse(homeLight1.isResizable());
      assertEquals(0.0F, homeLight1.getNameYOffset(), 0.01F);
      assertTrue(homeLight1.isVisible());
      assertNull(homeLight1.getShininess());
      assertEquals(0.0F, homeLight1.getNameAngle(), 0.01F);
      assertNull(homeLight1.getCatalogId());
      assertNull(homeLight1.getStaircaseCutOutShape());
      assertEquals(0.5F, homeLight1.getPower(), 0.01F);
      assertEquals(0.0F, homeLight1.getDepth(), 0.01F);
      assertFalse(homeLight1.isDeformable());
      assertNull(homeLight1.getCurrency());
      assertFalse(homeLight1.isMovable());
      
      homeLight1.setName((String) null);
      assertNotSame(homeLight0, homeLight1);
      assertNotSame(homeLight1, homeLight0);
      assertFalse(homeLight0.equals((Object)homeLight1));
      assertFalse(homeLight1.equals((Object)homeLight0));
      assertNull(homeLight0.getCatalogId());
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertFalse(homeLight0.isMovable());
      assertNull(homeLight0.getDescription());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertNull(homeLight0.getName());
      assertFalse(homeLight0.isBackFaceShown());
      assertFalse(homeLight0.isModelMirrored());
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertNull(homeLight0.getColor());
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertFalse(homeLight0.isNameVisible());
      assertFalse(homeLight0.isTexturable());
      assertFalse(homeLight0.isDoorOrWindow());
      assertNull(homeLight0.getCurrency());
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertTrue(homeLight0.isVisible());
      assertEquals((-1.0F), homeLight0.getElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals((-1.0F), homeLight0.getGroundElevation(), 0.01F);
      assertFalse(homeLight0.isDeformable());
      assertFalse(homeLight0.isResizable());
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertNull(homeLight0.getShininess());
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertFalse(homeLight1.isTexturable());
      assertEquals(0.0F, homeLight1.getAngle(), 0.01F);
      assertEquals(0.0F, homeLight1.getY(), 0.01F);
      assertEquals(0.0F, homeLight1.getX(), 0.01F);
      assertFalse(homeLight1.isModelMirrored());
      assertEquals(0.0F, homeLight1.getNameXOffset(), 0.01F);
      assertEquals((-1.0F), homeLight1.getGroundElevation(), 0.01F);
      assertNull(homeLight1.getColor());
      assertNull(homeLight1.getName());
      assertFalse(homeLight1.isBackFaceShown());
      assertFalse(homeLight1.isDoorOrWindow());
      assertNull(homeLight1.getDescription());
      assertEquals((-1.0F), homeLight1.getElevation(), 0.01F);
      assertEquals(0.0F, homeLight1.getWidth(), 0.01F);
      assertFalse(homeLight1.isNameVisible());
      assertEquals(0.0F, homeLight1.getHeight(), 0.01F);
      assertFalse(homeLight1.isResizable());
      assertEquals(0.0F, homeLight1.getNameYOffset(), 0.01F);
      assertTrue(homeLight1.isVisible());
      assertNull(homeLight1.getShininess());
      assertEquals(0.0F, homeLight1.getNameAngle(), 0.01F);
      assertNull(homeLight1.getCatalogId());
      assertNull(homeLight1.getStaircaseCutOutShape());
      assertEquals(0.5F, homeLight1.getPower(), 0.01F);
      assertEquals(0.0F, homeLight1.getDepth(), 0.01F);
      assertFalse(homeLight1.isDeformable());
      assertNull(homeLight1.getCurrency());
      assertFalse(homeLight1.isMovable());
      
      boolean boolean1 = homeLight0.intersectsRectangle((-1.0F), 1648.4163F, 0.5F, (-1040187392));
      assertNotSame(homeLight0, homeLight1);
      assertFalse(homeLight0.equals((Object)homeLight1));
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
      assertNull(homeLight0.getCatalogId());
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertFalse(homeLight0.isMovable());
      assertNull(homeLight0.getDescription());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertNull(homeLight0.getName());
      assertFalse(homeLight0.isBackFaceShown());
      assertFalse(homeLight0.isModelMirrored());
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertNull(homeLight0.getColor());
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertFalse(homeLight0.isNameVisible());
      assertFalse(homeLight0.isTexturable());
      assertFalse(homeLight0.isDoorOrWindow());
      assertNull(homeLight0.getCurrency());
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertTrue(homeLight0.isVisible());
      assertEquals((-1.0F), homeLight0.getElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals((-1.0F), homeLight0.getGroundElevation(), 0.01F);
      assertFalse(homeLight0.isDeformable());
      assertFalse(homeLight0.isResizable());
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertNull(homeLight0.getShininess());
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      
      homeLight0.setNameYOffset(0.5F);
      assertNotSame(homeLight0, homeLight1);
      assertFalse(homeLight0.equals((Object)homeLight1));
      assertNull(homeLight0.getCatalogId());
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertFalse(homeLight0.isMovable());
      assertNull(homeLight0.getDescription());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals(0.5F, homeLight0.getNameYOffset(), 0.01F);
      assertNull(homeLight0.getName());
      assertFalse(homeLight0.isBackFaceShown());
      assertFalse(homeLight0.isModelMirrored());
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertNull(homeLight0.getColor());
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertFalse(homeLight0.isNameVisible());
      assertFalse(homeLight0.isTexturable());
      assertFalse(homeLight0.isDoorOrWindow());
      assertNull(homeLight0.getCurrency());
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertTrue(homeLight0.isVisible());
      assertEquals((-1.0F), homeLight0.getElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals((-1.0F), homeLight0.getGroundElevation(), 0.01F);
      assertFalse(homeLight0.isDeformable());
      assertFalse(homeLight0.isResizable());
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertNull(homeLight0.getShininess());
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      
      BigDecimal bigDecimal0 = BigDecimal.TEN;
      assertNotNull(bigDecimal0);
      assertEquals((short)10, bigDecimal0.shortValue());
      assertEquals((byte)10, bigDecimal0.byteValue());
      
      HomeLight homeLight2 = homeLight1.clone();
      assertNotNull(homeLight2);
      assertNotSame(homeLight0, homeLight1);
      assertNotSame(homeLight0, homeLight2);
      assertNotSame(homeLight1, homeLight2);
      assertNotSame(homeLight1, homeLight0);
      assertNotSame(homeLight2, homeLight0);
      assertNotSame(homeLight2, homeLight1);
      assertFalse(homeLight0.equals((Object)homeLight1));
      assertFalse(homeLight1.equals((Object)homeLight0));
      assertFalse(homeLight2.equals((Object)homeLight0));
      assertFalse(homeLight2.equals((Object)homeLight1));
      assertNull(homeLight0.getCatalogId());
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertFalse(homeLight0.isMovable());
      assertNull(homeLight0.getDescription());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals(0.5F, homeLight0.getNameYOffset(), 0.01F);
      assertNull(homeLight0.getName());
      assertFalse(homeLight0.isBackFaceShown());
      assertFalse(homeLight0.isModelMirrored());
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertNull(homeLight0.getColor());
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertFalse(homeLight0.isNameVisible());
      assertFalse(homeLight0.isTexturable());
      assertFalse(homeLight0.isDoorOrWindow());
      assertNull(homeLight0.getCurrency());
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertTrue(homeLight0.isVisible());
      assertEquals((-1.0F), homeLight0.getElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals((-1.0F), homeLight0.getGroundElevation(), 0.01F);
      assertFalse(homeLight0.isDeformable());
      assertFalse(homeLight0.isResizable());
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertNull(homeLight0.getShininess());
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertFalse(homeLight1.isTexturable());
      assertEquals(0.0F, homeLight1.getAngle(), 0.01F);
      assertEquals(0.0F, homeLight1.getY(), 0.01F);
      assertEquals(0.0F, homeLight1.getX(), 0.01F);
      assertFalse(homeLight1.isModelMirrored());
      assertEquals(0.0F, homeLight1.getNameXOffset(), 0.01F);
      assertEquals((-1.0F), homeLight1.getGroundElevation(), 0.01F);
      assertNull(homeLight1.getColor());
      assertNull(homeLight1.getName());
      assertFalse(homeLight1.isBackFaceShown());
      assertFalse(homeLight1.isDoorOrWindow());
      assertNull(homeLight1.getDescription());
      assertEquals((-1.0F), homeLight1.getElevation(), 0.01F);
      assertEquals(0.0F, homeLight1.getWidth(), 0.01F);
      assertFalse(homeLight1.isNameVisible());
      assertEquals(0.0F, homeLight1.getHeight(), 0.01F);
      assertFalse(homeLight1.isResizable());
      assertEquals(0.0F, homeLight1.getNameYOffset(), 0.01F);
      assertTrue(homeLight1.isVisible());
      assertNull(homeLight1.getShininess());
      assertEquals(0.0F, homeLight1.getNameAngle(), 0.01F);
      assertNull(homeLight1.getCatalogId());
      assertNull(homeLight1.getStaircaseCutOutShape());
      assertEquals(0.5F, homeLight1.getPower(), 0.01F);
      assertEquals(0.0F, homeLight1.getDepth(), 0.01F);
      assertFalse(homeLight1.isDeformable());
      assertNull(homeLight1.getCurrency());
      assertFalse(homeLight1.isMovable());
      assertEquals(0.0F, homeLight2.getHeight(), 0.01F);
      assertFalse(homeLight2.isMovable());
      assertFalse(homeLight2.isResizable());
      assertNull(homeLight2.getCurrency());
      assertEquals(0.0F, homeLight2.getWidth(), 0.01F);
      assertEquals(0.5F, homeLight2.getPower(), 0.01F);
      assertNull(homeLight2.getName());
      assertFalse(homeLight2.isNameVisible());
      assertNull(homeLight2.getColor());
      assertNull(homeLight2.getCatalogId());
      assertEquals(0.0F, homeLight2.getNameYOffset(), 0.01F);
      assertFalse(homeLight2.isBackFaceShown());
      assertFalse(homeLight2.isModelMirrored());
      assertEquals((-1.0F), homeLight2.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight2.getAngle(), 0.01F);
      assertFalse(homeLight2.isTexturable());
      assertEquals(0.0F, homeLight2.getX(), 0.01F);
      assertEquals(0.0F, homeLight2.getY(), 0.01F);
      assertNull(homeLight2.getDescription());
      assertFalse(homeLight2.isDoorOrWindow());
      assertEquals((-1.0F), homeLight2.getElevation(), 0.01F);
      assertFalse(homeLight2.isDeformable());
      assertEquals(0.0F, homeLight2.getNameXOffset(), 0.01F);
      assertTrue(homeLight2.isVisible());
      assertEquals(0.0F, homeLight2.getNameAngle(), 0.01F);
      assertNull(homeLight2.getShininess());
      assertNull(homeLight2.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight2.getDepth(), 0.01F);
      
      homeLight0.setDescription((String) null);
      assertNotSame(homeLight0, homeLight1);
      assertNotSame(homeLight0, homeLight2);
      assertFalse(homeLight0.equals((Object)homeLight1));
      assertFalse(homeLight0.equals((Object)homeLight2));
      assertNull(homeLight0.getCatalogId());
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertFalse(homeLight0.isMovable());
      assertNull(homeLight0.getDescription());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals(0.5F, homeLight0.getNameYOffset(), 0.01F);
      assertNull(homeLight0.getName());
      assertFalse(homeLight0.isBackFaceShown());
      assertFalse(homeLight0.isModelMirrored());
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertNull(homeLight0.getColor());
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertFalse(homeLight0.isNameVisible());
      assertFalse(homeLight0.isTexturable());
      assertFalse(homeLight0.isDoorOrWindow());
      assertNull(homeLight0.getCurrency());
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertTrue(homeLight0.isVisible());
      assertEquals((-1.0F), homeLight0.getElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals((-1.0F), homeLight0.getGroundElevation(), 0.01F);
      assertFalse(homeLight0.isDeformable());
      assertFalse(homeLight0.isResizable());
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertNull(homeLight0.getShininess());
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      
      String string0 = homeLight1.getDescription();
      assertNull(string0);
      assertNotSame(homeLight0, homeLight1);
      assertNotSame(homeLight0, homeLight2);
      assertNotSame(homeLight1, homeLight2);
      assertNotSame(homeLight1, homeLight0);
      assertFalse(homeLight0.equals((Object)homeLight1));
      assertFalse(homeLight0.equals((Object)homeLight2));
      assertFalse(homeLight1.equals((Object)homeLight2));
      assertFalse(homeLight1.equals((Object)homeLight0));
      assertNull(homeLight0.getCatalogId());
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertFalse(homeLight0.isMovable());
      assertNull(homeLight0.getDescription());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals(0.5F, homeLight0.getNameYOffset(), 0.01F);
      assertNull(homeLight0.getName());
      assertFalse(homeLight0.isBackFaceShown());
      assertFalse(homeLight0.isModelMirrored());
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertNull(homeLight0.getColor());
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertFalse(homeLight0.isNameVisible());
      assertFalse(homeLight0.isTexturable());
      assertFalse(homeLight0.isDoorOrWindow());
      assertNull(homeLight0.getCurrency());
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertTrue(homeLight0.isVisible());
      assertEquals((-1.0F), homeLight0.getElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals((-1.0F), homeLight0.getGroundElevation(), 0.01F);
      assertFalse(homeLight0.isDeformable());
      assertFalse(homeLight0.isResizable());
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertNull(homeLight0.getShininess());
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertFalse(homeLight1.isTexturable());
      assertEquals(0.0F, homeLight1.getAngle(), 0.01F);
      assertEquals(0.0F, homeLight1.getY(), 0.01F);
      assertEquals(0.0F, homeLight1.getX(), 0.01F);
      assertFalse(homeLight1.isModelMirrored());
      assertEquals(0.0F, homeLight1.getNameXOffset(), 0.01F);
      assertEquals((-1.0F), homeLight1.getGroundElevation(), 0.01F);
      assertNull(homeLight1.getColor());
      assertNull(homeLight1.getName());
      assertFalse(homeLight1.isBackFaceShown());
      assertFalse(homeLight1.isDoorOrWindow());
      assertNull(homeLight1.getDescription());
      assertEquals((-1.0F), homeLight1.getElevation(), 0.01F);
      assertEquals(0.0F, homeLight1.getWidth(), 0.01F);
      assertFalse(homeLight1.isNameVisible());
      assertEquals(0.0F, homeLight1.getHeight(), 0.01F);
      assertFalse(homeLight1.isResizable());
      assertEquals(0.0F, homeLight1.getNameYOffset(), 0.01F);
      assertTrue(homeLight1.isVisible());
      assertNull(homeLight1.getShininess());
      assertEquals(0.0F, homeLight1.getNameAngle(), 0.01F);
      assertNull(homeLight1.getCatalogId());
      assertNull(homeLight1.getStaircaseCutOutShape());
      assertEquals(0.5F, homeLight1.getPower(), 0.01F);
      assertEquals(0.0F, homeLight1.getDepth(), 0.01F);
      assertFalse(homeLight1.isDeformable());
      assertNull(homeLight1.getCurrency());
      assertFalse(homeLight1.isMovable());
      
      homeLight2.setX(1.0F);
      assertNotSame(homeLight0, homeLight1);
      assertNotSame(homeLight0, homeLight2);
      assertNotSame(homeLight1, homeLight2);
      assertNotSame(homeLight1, homeLight0);
      assertNotSame(homeLight2, homeLight0);
      assertNotSame(homeLight2, homeLight1);
      assertFalse(homeLight0.equals((Object)homeLight1));
      assertFalse(homeLight0.equals((Object)homeLight2));
      assertFalse(homeLight1.equals((Object)homeLight2));
      assertFalse(homeLight1.equals((Object)homeLight0));
      assertFalse(homeLight2.equals((Object)homeLight0));
      assertFalse(homeLight2.equals((Object)homeLight1));
      assertNull(homeLight0.getCatalogId());
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertFalse(homeLight0.isMovable());
      assertNull(homeLight0.getDescription());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals(0.5F, homeLight0.getNameYOffset(), 0.01F);
      assertNull(homeLight0.getName());
      assertFalse(homeLight0.isBackFaceShown());
      assertFalse(homeLight0.isModelMirrored());
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertNull(homeLight0.getColor());
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertFalse(homeLight0.isNameVisible());
      assertFalse(homeLight0.isTexturable());
      assertFalse(homeLight0.isDoorOrWindow());
      assertNull(homeLight0.getCurrency());
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertTrue(homeLight0.isVisible());
      assertEquals((-1.0F), homeLight0.getElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals((-1.0F), homeLight0.getGroundElevation(), 0.01F);
      assertFalse(homeLight0.isDeformable());
      assertFalse(homeLight0.isResizable());
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertNull(homeLight0.getShininess());
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertFalse(homeLight1.isTexturable());
      assertEquals(0.0F, homeLight1.getAngle(), 0.01F);
      assertEquals(0.0F, homeLight1.getY(), 0.01F);
      assertEquals(0.0F, homeLight1.getX(), 0.01F);
      assertFalse(homeLight1.isModelMirrored());
      assertEquals(0.0F, homeLight1.getNameXOffset(), 0.01F);
      assertEquals((-1.0F), homeLight1.getGroundElevation(), 0.01F);
      assertNull(homeLight1.getColor());
      assertNull(homeLight1.getName());
      assertFalse(homeLight1.isBackFaceShown());
      assertFalse(homeLight1.isDoorOrWindow());
      assertNull(homeLight1.getDescription());
      assertEquals((-1.0F), homeLight1.getElevation(), 0.01F);
      assertEquals(0.0F, homeLight1.getWidth(), 0.01F);
      assertFalse(homeLight1.isNameVisible());
      assertEquals(0.0F, homeLight1.getHeight(), 0.01F);
      assertFalse(homeLight1.isResizable());
      assertEquals(0.0F, homeLight1.getNameYOffset(), 0.01F);
      assertTrue(homeLight1.isVisible());
      assertNull(homeLight1.getShininess());
      assertEquals(0.0F, homeLight1.getNameAngle(), 0.01F);
      assertNull(homeLight1.getCatalogId());
      assertNull(homeLight1.getStaircaseCutOutShape());
      assertEquals(0.5F, homeLight1.getPower(), 0.01F);
      assertEquals(0.0F, homeLight1.getDepth(), 0.01F);
      assertFalse(homeLight1.isDeformable());
      assertNull(homeLight1.getCurrency());
      assertFalse(homeLight1.isMovable());
      assertEquals(0.0F, homeLight2.getHeight(), 0.01F);
      assertFalse(homeLight2.isMovable());
      assertFalse(homeLight2.isResizable());
      assertNull(homeLight2.getCurrency());
      assertEquals(0.0F, homeLight2.getWidth(), 0.01F);
      assertEquals(0.5F, homeLight2.getPower(), 0.01F);
      assertNull(homeLight2.getName());
      assertFalse(homeLight2.isNameVisible());
      assertNull(homeLight2.getColor());
      assertNull(homeLight2.getCatalogId());
      assertEquals(0.0F, homeLight2.getNameYOffset(), 0.01F);
      assertFalse(homeLight2.isBackFaceShown());
      assertFalse(homeLight2.isModelMirrored());
      assertEquals((-1.0F), homeLight2.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight2.getAngle(), 0.01F);
      assertFalse(homeLight2.isTexturable());
      assertEquals(1.0F, homeLight2.getX(), 0.01F);
      assertEquals(0.0F, homeLight2.getY(), 0.01F);
      assertNull(homeLight2.getDescription());
      assertFalse(homeLight2.isDoorOrWindow());
      assertEquals((-1.0F), homeLight2.getElevation(), 0.01F);
      assertFalse(homeLight2.isDeformable());
      assertEquals(0.0F, homeLight2.getNameXOffset(), 0.01F);
      assertTrue(homeLight2.isVisible());
      assertEquals(0.0F, homeLight2.getNameAngle(), 0.01F);
      assertNull(homeLight2.getShininess());
      assertNull(homeLight2.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight2.getDepth(), 0.01F);
      
      boolean boolean2 = homeLight2.isNameCenterPointAt(3205.479F, (-1.0F), 3205.479F);
      assertNotSame(homeLight0, homeLight1);
      assertNotSame(homeLight0, homeLight2);
      assertNotSame(homeLight1, homeLight2);
      assertNotSame(homeLight1, homeLight0);
      assertNotSame(homeLight2, homeLight0);
      assertNotSame(homeLight2, homeLight1);
      assertFalse(homeLight0.equals((Object)homeLight1));
      assertFalse(homeLight0.equals((Object)homeLight2));
      assertFalse(homeLight1.equals((Object)homeLight2));
      assertFalse(homeLight1.equals((Object)homeLight0));
      assertFalse(homeLight2.equals((Object)homeLight0));
      assertFalse(homeLight2.equals((Object)homeLight1));
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2);
      assertNull(homeLight0.getCatalogId());
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertFalse(homeLight0.isMovable());
      assertNull(homeLight0.getDescription());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals(0.5F, homeLight0.getNameYOffset(), 0.01F);
      assertNull(homeLight0.getName());
      assertFalse(homeLight0.isBackFaceShown());
      assertFalse(homeLight0.isModelMirrored());
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertNull(homeLight0.getColor());
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertFalse(homeLight0.isNameVisible());
      assertFalse(homeLight0.isTexturable());
      assertFalse(homeLight0.isDoorOrWindow());
      assertNull(homeLight0.getCurrency());
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertTrue(homeLight0.isVisible());
      assertEquals((-1.0F), homeLight0.getElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals((-1.0F), homeLight0.getGroundElevation(), 0.01F);
      assertFalse(homeLight0.isDeformable());
      assertFalse(homeLight0.isResizable());
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertNull(homeLight0.getShininess());
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertFalse(homeLight1.isTexturable());
      assertEquals(0.0F, homeLight1.getAngle(), 0.01F);
      assertEquals(0.0F, homeLight1.getY(), 0.01F);
      assertEquals(0.0F, homeLight1.getX(), 0.01F);
      assertFalse(homeLight1.isModelMirrored());
      assertEquals(0.0F, homeLight1.getNameXOffset(), 0.01F);
      assertEquals((-1.0F), homeLight1.getGroundElevation(), 0.01F);
      assertNull(homeLight1.getColor());
      assertNull(homeLight1.getName());
      assertFalse(homeLight1.isBackFaceShown());
      assertFalse(homeLight1.isDoorOrWindow());
      assertNull(homeLight1.getDescription());
      assertEquals((-1.0F), homeLight1.getElevation(), 0.01F);
      assertEquals(0.0F, homeLight1.getWidth(), 0.01F);
      assertFalse(homeLight1.isNameVisible());
      assertEquals(0.0F, homeLight1.getHeight(), 0.01F);
      assertFalse(homeLight1.isResizable());
      assertEquals(0.0F, homeLight1.getNameYOffset(), 0.01F);
      assertTrue(homeLight1.isVisible());
      assertNull(homeLight1.getShininess());
      assertEquals(0.0F, homeLight1.getNameAngle(), 0.01F);
      assertNull(homeLight1.getCatalogId());
      assertNull(homeLight1.getStaircaseCutOutShape());
      assertEquals(0.5F, homeLight1.getPower(), 0.01F);
      assertEquals(0.0F, homeLight1.getDepth(), 0.01F);
      assertFalse(homeLight1.isDeformable());
      assertNull(homeLight1.getCurrency());
      assertFalse(homeLight1.isMovable());
      assertEquals(0.0F, homeLight2.getHeight(), 0.01F);
      assertFalse(homeLight2.isMovable());
      assertFalse(homeLight2.isResizable());
      assertNull(homeLight2.getCurrency());
      assertEquals(0.0F, homeLight2.getWidth(), 0.01F);
      assertEquals(0.5F, homeLight2.getPower(), 0.01F);
      assertNull(homeLight2.getName());
      assertFalse(homeLight2.isNameVisible());
      assertNull(homeLight2.getColor());
      assertNull(homeLight2.getCatalogId());
      assertEquals(0.0F, homeLight2.getNameYOffset(), 0.01F);
      assertFalse(homeLight2.isBackFaceShown());
      assertFalse(homeLight2.isModelMirrored());
      assertEquals((-1.0F), homeLight2.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight2.getAngle(), 0.01F);
      assertFalse(homeLight2.isTexturable());
      assertEquals(1.0F, homeLight2.getX(), 0.01F);
      assertEquals(0.0F, homeLight2.getY(), 0.01F);
      assertNull(homeLight2.getDescription());
      assertFalse(homeLight2.isDoorOrWindow());
      assertEquals((-1.0F), homeLight2.getElevation(), 0.01F);
      assertFalse(homeLight2.isDeformable());
      assertEquals(0.0F, homeLight2.getNameXOffset(), 0.01F);
      assertTrue(homeLight2.isVisible());
      assertEquals(0.0F, homeLight2.getNameAngle(), 0.01F);
      assertNull(homeLight2.getShininess());
      assertNull(homeLight2.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight2.getDepth(), 0.01F);
      
      TextStyle textStyle0 = homeLight2.getNameStyle();
      assertNull(textStyle0);
      assertNotSame(homeLight0, homeLight1);
      assertNotSame(homeLight0, homeLight2);
      assertNotSame(homeLight1, homeLight2);
      assertNotSame(homeLight1, homeLight0);
      assertNotSame(homeLight2, homeLight0);
      assertNotSame(homeLight2, homeLight1);
      assertFalse(homeLight0.equals((Object)homeLight1));
      assertFalse(homeLight0.equals((Object)homeLight2));
      assertFalse(homeLight1.equals((Object)homeLight2));
      assertFalse(homeLight1.equals((Object)homeLight0));
      assertFalse(homeLight2.equals((Object)homeLight0));
      assertFalse(homeLight2.equals((Object)homeLight1));
      assertNull(homeLight0.getCatalogId());
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertFalse(homeLight0.isMovable());
      assertNull(homeLight0.getDescription());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals(0.5F, homeLight0.getNameYOffset(), 0.01F);
      assertNull(homeLight0.getName());
      assertFalse(homeLight0.isBackFaceShown());
      assertFalse(homeLight0.isModelMirrored());
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertNull(homeLight0.getColor());
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertFalse(homeLight0.isNameVisible());
      assertFalse(homeLight0.isTexturable());
      assertFalse(homeLight0.isDoorOrWindow());
      assertNull(homeLight0.getCurrency());
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertTrue(homeLight0.isVisible());
      assertEquals((-1.0F), homeLight0.getElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals((-1.0F), homeLight0.getGroundElevation(), 0.01F);
      assertFalse(homeLight0.isDeformable());
      assertFalse(homeLight0.isResizable());
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertNull(homeLight0.getShininess());
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertFalse(homeLight1.isTexturable());
      assertEquals(0.0F, homeLight1.getAngle(), 0.01F);
      assertEquals(0.0F, homeLight1.getY(), 0.01F);
      assertEquals(0.0F, homeLight1.getX(), 0.01F);
      assertFalse(homeLight1.isModelMirrored());
      assertEquals(0.0F, homeLight1.getNameXOffset(), 0.01F);
      assertEquals((-1.0F), homeLight1.getGroundElevation(), 0.01F);
      assertNull(homeLight1.getColor());
      assertNull(homeLight1.getName());
      assertFalse(homeLight1.isBackFaceShown());
      assertFalse(homeLight1.isDoorOrWindow());
      assertNull(homeLight1.getDescription());
      assertEquals((-1.0F), homeLight1.getElevation(), 0.01F);
      assertEquals(0.0F, homeLight1.getWidth(), 0.01F);
      assertFalse(homeLight1.isNameVisible());
      assertEquals(0.0F, homeLight1.getHeight(), 0.01F);
      assertFalse(homeLight1.isResizable());
      assertEquals(0.0F, homeLight1.getNameYOffset(), 0.01F);
      assertTrue(homeLight1.isVisible());
      assertNull(homeLight1.getShininess());
      assertEquals(0.0F, homeLight1.getNameAngle(), 0.01F);
      assertNull(homeLight1.getCatalogId());
      assertNull(homeLight1.getStaircaseCutOutShape());
      assertEquals(0.5F, homeLight1.getPower(), 0.01F);
      assertEquals(0.0F, homeLight1.getDepth(), 0.01F);
      assertFalse(homeLight1.isDeformable());
      assertNull(homeLight1.getCurrency());
      assertFalse(homeLight1.isMovable());
      assertEquals(0.0F, homeLight2.getHeight(), 0.01F);
      assertFalse(homeLight2.isMovable());
      assertFalse(homeLight2.isResizable());
      assertNull(homeLight2.getCurrency());
      assertEquals(0.0F, homeLight2.getWidth(), 0.01F);
      assertEquals(0.5F, homeLight2.getPower(), 0.01F);
      assertNull(homeLight2.getName());
      assertFalse(homeLight2.isNameVisible());
      assertNull(homeLight2.getColor());
      assertNull(homeLight2.getCatalogId());
      assertEquals(0.0F, homeLight2.getNameYOffset(), 0.01F);
      assertFalse(homeLight2.isBackFaceShown());
      assertFalse(homeLight2.isModelMirrored());
      assertEquals((-1.0F), homeLight2.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight2.getAngle(), 0.01F);
      assertFalse(homeLight2.isTexturable());
      assertEquals(1.0F, homeLight2.getX(), 0.01F);
      assertEquals(0.0F, homeLight2.getY(), 0.01F);
      assertNull(homeLight2.getDescription());
      assertFalse(homeLight2.isDoorOrWindow());
      assertEquals((-1.0F), homeLight2.getElevation(), 0.01F);
      assertFalse(homeLight2.isDeformable());
      assertEquals(0.0F, homeLight2.getNameXOffset(), 0.01F);
      assertTrue(homeLight2.isVisible());
      assertEquals(0.0F, homeLight2.getNameAngle(), 0.01F);
      assertNull(homeLight2.getShininess());
      assertNull(homeLight2.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight2.getDepth(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test203()  throws Throwable  {
      LightSource[] lightSourceArray0 = new LightSource[2];
      URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      URL uRL0 = MockURL.URL("s<7]@ykxs+ 0`a ", (String) null, (-1663), "", uRLStreamHandler0);
      assertNotNull(uRL0);
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getUserInfo());
      assertNull(uRL0.getRef());
      assertEquals("", uRL0.getFile());
      assertEquals("", uRL0.getPath());
      assertNull(uRL0.toString());
      assertNull(uRL0.getHost());
      assertNull(uRL0.toExternalForm());
      assertEquals("s<7]@ykxs+ 0`a ", uRL0.getProtocol());
      assertNull(uRL0.getAuthority());
      assertEquals(0, uRL0.getDefaultPort());
      assertNull(uRL0.getQuery());
      
      TemporaryURLContent temporaryURLContent0 = new TemporaryURLContent(uRL0);
      assertNotNull(temporaryURLContent0);
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getUserInfo());
      assertNull(uRL0.getRef());
      assertEquals("", uRL0.getFile());
      assertEquals("", uRL0.getPath());
      assertNull(uRL0.toString());
      assertNull(uRL0.getHost());
      assertNull(uRL0.toExternalForm());
      assertEquals("s<7]@ykxs+ 0`a ", uRL0.getProtocol());
      assertNull(uRL0.getAuthority());
      assertEquals(0, uRL0.getDefaultPort());
      assertNull(uRL0.getQuery());
      assertFalse(temporaryURLContent0.isJAREntry());
      
      BigDecimal bigDecimal0 = BigDecimal.TEN;
      assertNotNull(bigDecimal0);
      assertEquals((short)10, bigDecimal0.shortValue());
      assertEquals((byte)10, bigDecimal0.byteValue());
      
      CatalogLight catalogLight0 = new CatalogLight("\"<xp|JAv^\"<^Qh{/~", "s<7]@ykxs+ 0`a ", "s<7]@ykxs+ 0`a ", temporaryURLContent0, temporaryURLContent0, temporaryURLContent0, (-611.6462F), 1.7441415F, 0.5F, (-897.795F), true, lightSourceArray0, "", (float[][]) null, "P'HZa~G", true, true, true, bigDecimal0, bigDecimal0, "");
      assertEquals(2, lightSourceArray0.length);
      assertNotNull(catalogLight0);
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getUserInfo());
      assertNull(uRL0.getRef());
      assertEquals("", uRL0.getFile());
      assertEquals("", uRL0.getPath());
      assertNull(uRL0.toString());
      assertNull(uRL0.getHost());
      assertNull(uRL0.toExternalForm());
      assertEquals("s<7]@ykxs+ 0`a ", uRL0.getProtocol());
      assertNull(uRL0.getAuthority());
      assertEquals(0, uRL0.getDefaultPort());
      assertNull(uRL0.getQuery());
      assertFalse(temporaryURLContent0.isJAREntry());
      assertEquals((short)10, bigDecimal0.shortValue());
      assertEquals((byte)10, bigDecimal0.byteValue());
      assertTrue(catalogLight0.isTexturable());
      assertTrue(catalogLight0.isProportional());
      assertEquals("", catalogLight0.getCurrency());
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertNull(catalogLight0.getGrade());
      assertFalse(catalogLight0.isDoorOrWindow());
      assertTrue(catalogLight0.isMovable());
      assertEquals((-611.6462F), catalogLight0.getWidth(), 0.01F);
      assertNull(catalogLight0.getInformation());
      assertTrue(catalogLight0.isDeformable());
      assertNull(catalogLight0.getColor());
      assertEquals(1.7441415F, catalogLight0.getDepth(), 0.01F);
      assertEquals("s<7]@ykxs+ 0`a ", catalogLight0.getName());
      assertNull(catalogLight0.getCreationDate());
      assertEquals((-897.795F), catalogLight0.getElevation(), 0.01F);
      assertFalse(catalogLight0.isBackFaceShown());
      assertEquals("P'HZa~G", catalogLight0.getCreator());
      assertEquals("", catalogLight0.getStaircaseCutOutShape());
      assertTrue(catalogLight0.isResizable());
      assertFalse(catalogLight0.isModifiable());
      assertEquals("\"<xp|JAv^\"<^Qh{/~", catalogLight0.getId());
      assertEquals("s<7]@ykxs+ 0`a ", catalogLight0.getDescription());
      assertEquals(0.5F, catalogLight0.getHeight(), 0.01F);
      
      HomeLight homeLight0 = new HomeLight(catalogLight0);
      assertEquals(2, lightSourceArray0.length);
      assertNotNull(homeLight0);
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getUserInfo());
      assertNull(uRL0.getRef());
      assertEquals("", uRL0.getFile());
      assertEquals("", uRL0.getPath());
      assertNull(uRL0.toString());
      assertNull(uRL0.getHost());
      assertNull(uRL0.toExternalForm());
      assertEquals("s<7]@ykxs+ 0`a ", uRL0.getProtocol());
      assertNull(uRL0.getAuthority());
      assertEquals(0, uRL0.getDefaultPort());
      assertNull(uRL0.getQuery());
      assertFalse(temporaryURLContent0.isJAREntry());
      assertEquals((short)10, bigDecimal0.shortValue());
      assertEquals((byte)10, bigDecimal0.byteValue());
      assertTrue(catalogLight0.isTexturable());
      assertTrue(catalogLight0.isProportional());
      assertEquals("", catalogLight0.getCurrency());
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertNull(catalogLight0.getGrade());
      assertFalse(catalogLight0.isDoorOrWindow());
      assertTrue(catalogLight0.isMovable());
      assertEquals((-611.6462F), catalogLight0.getWidth(), 0.01F);
      assertNull(catalogLight0.getInformation());
      assertTrue(catalogLight0.isDeformable());
      assertNull(catalogLight0.getColor());
      assertEquals(1.7441415F, catalogLight0.getDepth(), 0.01F);
      assertEquals("s<7]@ykxs+ 0`a ", catalogLight0.getName());
      assertNull(catalogLight0.getCreationDate());
      assertEquals((-897.795F), catalogLight0.getElevation(), 0.01F);
      assertFalse(catalogLight0.isBackFaceShown());
      assertEquals("P'HZa~G", catalogLight0.getCreator());
      assertEquals("", catalogLight0.getStaircaseCutOutShape());
      assertTrue(catalogLight0.isResizable());
      assertFalse(catalogLight0.isModifiable());
      assertEquals("\"<xp|JAv^\"<^Qh{/~", catalogLight0.getId());
      assertEquals("s<7]@ykxs+ 0`a ", catalogLight0.getDescription());
      assertEquals(0.5F, catalogLight0.getHeight(), 0.01F);
      assertEquals("s<7]@ykxs+ 0`a ", homeLight0.getName());
      assertEquals(0.5F, homeLight0.getHeight(), 0.01F);
      assertTrue(homeLight0.isVisible());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertEquals("s<7]@ykxs+ 0`a ", homeLight0.getDescription());
      assertEquals(0.8720707F, homeLight0.getY(), 0.01F);
      assertTrue(homeLight0.isDeformable());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertEquals((-897.795F), homeLight0.getGroundElevation(), 0.01F);
      assertTrue(homeLight0.isResizable());
      assertEquals("", homeLight0.getStaircaseCutOutShape());
      assertEquals("", homeLight0.getCurrency());
      assertNull(homeLight0.getShininess());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals((-897.795F), homeLight0.getElevation(), 0.01F);
      assertEquals("\"<xp|JAv^\"<^Qh{/~", homeLight0.getCatalogId());
      assertTrue(homeLight0.isMovable());
      assertEquals(1.7441415F, homeLight0.getDepth(), 0.01F);
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertTrue(homeLight0.isTexturable());
      assertEquals((-305.8231F), homeLight0.getX(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      assertNull(homeLight0.getColor());
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertFalse(homeLight0.isModelMirrored());
      assertFalse(homeLight0.isBackFaceShown());
      assertEquals((-611.6462F), homeLight0.getWidth(), 0.01F);
      assertFalse(homeLight0.isNameVisible());
      
      HomeLight homeLight1 = homeLight0.clone();
      assertEquals(2, lightSourceArray0.length);
      assertNotNull(homeLight1);
      assertNotSame(homeLight0, homeLight1);
      assertNotSame(homeLight1, homeLight0);
      assertFalse(homeLight1.equals((Object)homeLight0));
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getUserInfo());
      assertNull(uRL0.getRef());
      assertEquals("", uRL0.getFile());
      assertEquals("", uRL0.getPath());
      assertNull(uRL0.toString());
      assertNull(uRL0.getHost());
      assertNull(uRL0.toExternalForm());
      assertEquals("s<7]@ykxs+ 0`a ", uRL0.getProtocol());
      assertNull(uRL0.getAuthority());
      assertEquals(0, uRL0.getDefaultPort());
      assertNull(uRL0.getQuery());
      assertFalse(temporaryURLContent0.isJAREntry());
      assertEquals((short)10, bigDecimal0.shortValue());
      assertEquals((byte)10, bigDecimal0.byteValue());
      assertTrue(catalogLight0.isTexturable());
      assertTrue(catalogLight0.isProportional());
      assertEquals("", catalogLight0.getCurrency());
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertNull(catalogLight0.getGrade());
      assertFalse(catalogLight0.isDoorOrWindow());
      assertTrue(catalogLight0.isMovable());
      assertEquals((-611.6462F), catalogLight0.getWidth(), 0.01F);
      assertNull(catalogLight0.getInformation());
      assertTrue(catalogLight0.isDeformable());
      assertNull(catalogLight0.getColor());
      assertEquals(1.7441415F, catalogLight0.getDepth(), 0.01F);
      assertEquals("s<7]@ykxs+ 0`a ", catalogLight0.getName());
      assertNull(catalogLight0.getCreationDate());
      assertEquals((-897.795F), catalogLight0.getElevation(), 0.01F);
      assertFalse(catalogLight0.isBackFaceShown());
      assertEquals("P'HZa~G", catalogLight0.getCreator());
      assertEquals("", catalogLight0.getStaircaseCutOutShape());
      assertTrue(catalogLight0.isResizable());
      assertFalse(catalogLight0.isModifiable());
      assertEquals("\"<xp|JAv^\"<^Qh{/~", catalogLight0.getId());
      assertEquals("s<7]@ykxs+ 0`a ", catalogLight0.getDescription());
      assertEquals(0.5F, catalogLight0.getHeight(), 0.01F);
      assertEquals("s<7]@ykxs+ 0`a ", homeLight0.getName());
      assertEquals(0.5F, homeLight0.getHeight(), 0.01F);
      assertTrue(homeLight0.isVisible());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertEquals("s<7]@ykxs+ 0`a ", homeLight0.getDescription());
      assertEquals(0.8720707F, homeLight0.getY(), 0.01F);
      assertTrue(homeLight0.isDeformable());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertEquals((-897.795F), homeLight0.getGroundElevation(), 0.01F);
      assertTrue(homeLight0.isResizable());
      assertEquals("", homeLight0.getStaircaseCutOutShape());
      assertEquals("", homeLight0.getCurrency());
      assertNull(homeLight0.getShininess());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals((-897.795F), homeLight0.getElevation(), 0.01F);
      assertEquals("\"<xp|JAv^\"<^Qh{/~", homeLight0.getCatalogId());
      assertTrue(homeLight0.isMovable());
      assertEquals(1.7441415F, homeLight0.getDepth(), 0.01F);
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertTrue(homeLight0.isTexturable());
      assertEquals((-305.8231F), homeLight0.getX(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      assertNull(homeLight0.getColor());
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertFalse(homeLight0.isModelMirrored());
      assertFalse(homeLight0.isBackFaceShown());
      assertEquals((-611.6462F), homeLight0.getWidth(), 0.01F);
      assertFalse(homeLight0.isNameVisible());
      assertEquals("s<7]@ykxs+ 0`a ", homeLight1.getName());
      assertEquals(0.5F, homeLight1.getHeight(), 0.01F);
      assertTrue(homeLight1.isVisible());
      assertEquals(0.0F, homeLight1.getNameYOffset(), 0.01F);
      assertTrue(homeLight1.isDeformable());
      assertEquals("s<7]@ykxs+ 0`a ", homeLight1.getDescription());
      assertEquals(0.8720707F, homeLight1.getY(), 0.01F);
      assertFalse(homeLight1.isNameVisible());
      assertFalse(homeLight1.isBackFaceShown());
      assertFalse(homeLight1.isModelMirrored());
      assertEquals((-611.6462F), homeLight1.getWidth(), 0.01F);
      assertEquals((-305.8231F), homeLight1.getX(), 0.01F);
      assertEquals(0.0F, homeLight1.getAngle(), 0.01F);
      assertEquals(1.7441415F, homeLight1.getDepth(), 0.01F);
      assertTrue(homeLight1.isTexturable());
      assertFalse(homeLight1.isDoorOrWindow());
      assertEquals(0.0F, homeLight1.getNameXOffset(), 0.01F);
      assertNull(homeLight1.getColor());
      assertEquals(0.5F, homeLight1.getPower(), 0.01F);
      assertEquals(0.0F, homeLight1.getNameAngle(), 0.01F);
      assertEquals("", homeLight1.getStaircaseCutOutShape());
      assertEquals((-897.795F), homeLight1.getGroundElevation(), 0.01F);
      assertTrue(homeLight1.isResizable());
      assertEquals("", homeLight1.getCurrency());
      assertNull(homeLight1.getShininess());
      assertEquals((-897.795F), homeLight1.getElevation(), 0.01F);
      assertEquals("\"<xp|JAv^\"<^Qh{/~", homeLight1.getCatalogId());
      assertTrue(homeLight1.isMovable());
      
      HomeLight homeLight2 = homeLight0.clone();
      assertEquals(2, lightSourceArray0.length);
      assertNotNull(homeLight2);
      assertNotSame(homeLight0, homeLight1);
      assertNotSame(homeLight0, homeLight2);
      assertNotSame(homeLight2, homeLight0);
      assertNotSame(homeLight2, homeLight1);
      assertFalse(homeLight0.equals((Object)homeLight1));
      assertFalse(homeLight2.equals((Object)homeLight0));
      assertFalse(homeLight2.equals((Object)homeLight1));
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getUserInfo());
      assertNull(uRL0.getRef());
      assertEquals("", uRL0.getFile());
      assertEquals("", uRL0.getPath());
      assertNull(uRL0.toString());
      assertNull(uRL0.getHost());
      assertNull(uRL0.toExternalForm());
      assertEquals("s<7]@ykxs+ 0`a ", uRL0.getProtocol());
      assertNull(uRL0.getAuthority());
      assertEquals(0, uRL0.getDefaultPort());
      assertNull(uRL0.getQuery());
      assertFalse(temporaryURLContent0.isJAREntry());
      assertEquals((short)10, bigDecimal0.shortValue());
      assertEquals((byte)10, bigDecimal0.byteValue());
      assertTrue(catalogLight0.isTexturable());
      assertTrue(catalogLight0.isProportional());
      assertEquals("", catalogLight0.getCurrency());
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertNull(catalogLight0.getGrade());
      assertFalse(catalogLight0.isDoorOrWindow());
      assertTrue(catalogLight0.isMovable());
      assertEquals((-611.6462F), catalogLight0.getWidth(), 0.01F);
      assertNull(catalogLight0.getInformation());
      assertTrue(catalogLight0.isDeformable());
      assertNull(catalogLight0.getColor());
      assertEquals(1.7441415F, catalogLight0.getDepth(), 0.01F);
      assertEquals("s<7]@ykxs+ 0`a ", catalogLight0.getName());
      assertNull(catalogLight0.getCreationDate());
      assertEquals((-897.795F), catalogLight0.getElevation(), 0.01F);
      assertFalse(catalogLight0.isBackFaceShown());
      assertEquals("P'HZa~G", catalogLight0.getCreator());
      assertEquals("", catalogLight0.getStaircaseCutOutShape());
      assertTrue(catalogLight0.isResizable());
      assertFalse(catalogLight0.isModifiable());
      assertEquals("\"<xp|JAv^\"<^Qh{/~", catalogLight0.getId());
      assertEquals("s<7]@ykxs+ 0`a ", catalogLight0.getDescription());
      assertEquals(0.5F, catalogLight0.getHeight(), 0.01F);
      assertEquals("s<7]@ykxs+ 0`a ", homeLight0.getName());
      assertEquals(0.5F, homeLight0.getHeight(), 0.01F);
      assertTrue(homeLight0.isVisible());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertEquals("s<7]@ykxs+ 0`a ", homeLight0.getDescription());
      assertEquals(0.8720707F, homeLight0.getY(), 0.01F);
      assertTrue(homeLight0.isDeformable());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertEquals((-897.795F), homeLight0.getGroundElevation(), 0.01F);
      assertTrue(homeLight0.isResizable());
      assertEquals("", homeLight0.getStaircaseCutOutShape());
      assertEquals("", homeLight0.getCurrency());
      assertNull(homeLight0.getShininess());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals((-897.795F), homeLight0.getElevation(), 0.01F);
      assertEquals("\"<xp|JAv^\"<^Qh{/~", homeLight0.getCatalogId());
      assertTrue(homeLight0.isMovable());
      assertEquals(1.7441415F, homeLight0.getDepth(), 0.01F);
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertTrue(homeLight0.isTexturable());
      assertEquals((-305.8231F), homeLight0.getX(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      assertNull(homeLight0.getColor());
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertFalse(homeLight0.isModelMirrored());
      assertFalse(homeLight0.isBackFaceShown());
      assertEquals((-611.6462F), homeLight0.getWidth(), 0.01F);
      assertFalse(homeLight0.isNameVisible());
      assertNull(homeLight2.getColor());
      assertEquals((-897.795F), homeLight2.getElevation(), 0.01F);
      assertFalse(homeLight2.isBackFaceShown());
      assertFalse(homeLight2.isNameVisible());
      assertEquals("", homeLight2.getCurrency());
      assertEquals((-897.795F), homeLight2.getGroundElevation(), 0.01F);
      assertFalse(homeLight2.isDoorOrWindow());
      assertEquals((-305.8231F), homeLight2.getX(), 0.01F);
      assertEquals(0.0F, homeLight2.getAngle(), 0.01F);
      assertTrue(homeLight2.isTexturable());
      assertEquals(0.0F, homeLight2.getNameXOffset(), 0.01F);
      assertEquals("s<7]@ykxs+ 0`a ", homeLight2.getDescription());
      assertNull(homeLight2.getShininess());
      assertTrue(homeLight2.isDeformable());
      assertTrue(homeLight2.isResizable());
      assertTrue(homeLight2.isVisible());
      assertEquals("", homeLight2.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight2.getNameAngle(), 0.01F);
      assertEquals("\"<xp|JAv^\"<^Qh{/~", homeLight2.getCatalogId());
      assertTrue(homeLight2.isMovable());
      assertEquals("s<7]@ykxs+ 0`a ", homeLight2.getName());
      assertEquals(0.5F, homeLight2.getPower(), 0.01F);
      assertEquals(0.5F, homeLight2.getHeight(), 0.01F);
      assertEquals(0.0F, homeLight2.getNameYOffset(), 0.01F);
      assertEquals((-611.6462F), homeLight2.getWidth(), 0.01F);
      assertEquals(0.8720707F, homeLight2.getY(), 0.01F);
      assertFalse(homeLight2.isModelMirrored());
      assertEquals(1.7441415F, homeLight2.getDepth(), 0.01F);
      
      homeLight0.setTexture((HomeTexture) null);
      assertEquals(2, lightSourceArray0.length);
      assertNotSame(homeLight0, homeLight1);
      assertNotSame(homeLight0, homeLight2);
      assertFalse(homeLight0.equals((Object)homeLight1));
      assertFalse(homeLight0.equals((Object)homeLight2));
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getUserInfo());
      assertNull(uRL0.getRef());
      assertEquals("", uRL0.getFile());
      assertEquals("", uRL0.getPath());
      assertNull(uRL0.toString());
      assertNull(uRL0.getHost());
      assertNull(uRL0.toExternalForm());
      assertEquals("s<7]@ykxs+ 0`a ", uRL0.getProtocol());
      assertNull(uRL0.getAuthority());
      assertEquals(0, uRL0.getDefaultPort());
      assertNull(uRL0.getQuery());
      assertFalse(temporaryURLContent0.isJAREntry());
      assertEquals((short)10, bigDecimal0.shortValue());
      assertEquals((byte)10, bigDecimal0.byteValue());
      assertTrue(catalogLight0.isTexturable());
      assertTrue(catalogLight0.isProportional());
      assertEquals("", catalogLight0.getCurrency());
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertNull(catalogLight0.getGrade());
      assertFalse(catalogLight0.isDoorOrWindow());
      assertTrue(catalogLight0.isMovable());
      assertEquals((-611.6462F), catalogLight0.getWidth(), 0.01F);
      assertNull(catalogLight0.getInformation());
      assertTrue(catalogLight0.isDeformable());
      assertNull(catalogLight0.getColor());
      assertEquals(1.7441415F, catalogLight0.getDepth(), 0.01F);
      assertEquals("s<7]@ykxs+ 0`a ", catalogLight0.getName());
      assertNull(catalogLight0.getCreationDate());
      assertEquals((-897.795F), catalogLight0.getElevation(), 0.01F);
      assertFalse(catalogLight0.isBackFaceShown());
      assertEquals("P'HZa~G", catalogLight0.getCreator());
      assertEquals("", catalogLight0.getStaircaseCutOutShape());
      assertTrue(catalogLight0.isResizable());
      assertFalse(catalogLight0.isModifiable());
      assertEquals("\"<xp|JAv^\"<^Qh{/~", catalogLight0.getId());
      assertEquals("s<7]@ykxs+ 0`a ", catalogLight0.getDescription());
      assertEquals(0.5F, catalogLight0.getHeight(), 0.01F);
      assertEquals("s<7]@ykxs+ 0`a ", homeLight0.getName());
      assertEquals(0.5F, homeLight0.getHeight(), 0.01F);
      assertTrue(homeLight0.isVisible());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertEquals("s<7]@ykxs+ 0`a ", homeLight0.getDescription());
      assertEquals(0.8720707F, homeLight0.getY(), 0.01F);
      assertTrue(homeLight0.isDeformable());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertEquals((-897.795F), homeLight0.getGroundElevation(), 0.01F);
      assertTrue(homeLight0.isResizable());
      assertEquals("", homeLight0.getStaircaseCutOutShape());
      assertEquals("", homeLight0.getCurrency());
      assertNull(homeLight0.getShininess());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals((-897.795F), homeLight0.getElevation(), 0.01F);
      assertEquals("\"<xp|JAv^\"<^Qh{/~", homeLight0.getCatalogId());
      assertTrue(homeLight0.isMovable());
      assertEquals(1.7441415F, homeLight0.getDepth(), 0.01F);
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertTrue(homeLight0.isTexturable());
      assertEquals((-305.8231F), homeLight0.getX(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      assertNull(homeLight0.getColor());
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertFalse(homeLight0.isModelMirrored());
      assertFalse(homeLight0.isBackFaceShown());
      assertEquals((-611.6462F), homeLight0.getWidth(), 0.01F);
      assertFalse(homeLight0.isNameVisible());
      
      Integer integer0 = Integer.valueOf(340);
      assertNotNull(integer0);
      assertEquals(340, (int)integer0);
      
      Integer integer1 = Integer.valueOf(340);
      assertNotNull(integer1);
      assertTrue(integer1.equals((Object)integer0));
      assertEquals(340, (int)integer1);
      
      CatalogPieceOfFurniture catalogPieceOfFurniture0 = new CatalogPieceOfFurniture("", temporaryURLContent0, temporaryURLContent0, 2.0F, 1.7441415F, 1.7441415F, 0.3926991F, true, false, integer1, (float[][]) null, false, 0.5F, false);
      assertNotNull(catalogPieceOfFurniture0);
      assertTrue(integer1.equals((Object)integer0));
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getUserInfo());
      assertNull(uRL0.getRef());
      assertEquals("", uRL0.getFile());
      assertEquals("", uRL0.getPath());
      assertNull(uRL0.toString());
      assertNull(uRL0.getHost());
      assertNull(uRL0.toExternalForm());
      assertEquals("s<7]@ykxs+ 0`a ", uRL0.getProtocol());
      assertNull(uRL0.getAuthority());
      assertEquals(0, uRL0.getDefaultPort());
      assertNull(uRL0.getQuery());
      assertFalse(temporaryURLContent0.isJAREntry());
      assertTrue(catalogPieceOfFurniture0.isTexturable());
      assertNull(catalogPieceOfFurniture0.getCreator());
      assertEquals("", catalogPieceOfFurniture0.getName());
      assertEquals(1.7441415F, catalogPieceOfFurniture0.getDepth(), 0.01F);
      assertFalse(catalogPieceOfFurniture0.isDoorOrWindow());
      assertNull(catalogPieceOfFurniture0.getCurrency());
      assertNull(catalogPieceOfFurniture0.getDescription());
      assertEquals(1392409281320L, (long)catalogPieceOfFurniture0.getCreationDate());
      assertNull(catalogPieceOfFurniture0.getGrade());
      assertTrue(catalogPieceOfFurniture0.isResizable());
      assertEquals(0.5F, catalogPieceOfFurniture0.getIconYaw(), 0.01F);
      assertEquals(340, (int)catalogPieceOfFurniture0.getColor());
      assertEquals(1.7441415F, catalogPieceOfFurniture0.getHeight(), 0.01F);
      assertEquals(0.3926991F, catalogPieceOfFurniture0.getElevation(), 0.01F);
      assertFalse(catalogPieceOfFurniture0.isBackFaceShown());
      assertTrue(catalogPieceOfFurniture0.isModifiable());
      assertNull(catalogPieceOfFurniture0.getStaircaseCutOutShape());
      assertNull(catalogPieceOfFurniture0.getId());
      assertTrue(catalogPieceOfFurniture0.isMovable());
      assertFalse(catalogPieceOfFurniture0.isProportional());
      assertEquals(2.0F, catalogPieceOfFurniture0.getWidth(), 0.01F);
      assertNull(catalogPieceOfFurniture0.getInformation());
      assertTrue(catalogPieceOfFurniture0.isDeformable());
      
      int int0 = catalogLight0.compareTo(catalogPieceOfFurniture0);
      assertEquals(2, lightSourceArray0.length);
      assertTrue(integer1.equals((Object)integer0));
      assertEquals(1, int0);
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getUserInfo());
      assertNull(uRL0.getRef());
      assertEquals("", uRL0.getFile());
      assertEquals("", uRL0.getPath());
      assertNull(uRL0.toString());
      assertNull(uRL0.getHost());
      assertNull(uRL0.toExternalForm());
      assertEquals("s<7]@ykxs+ 0`a ", uRL0.getProtocol());
      assertNull(uRL0.getAuthority());
      assertEquals(0, uRL0.getDefaultPort());
      assertNull(uRL0.getQuery());
      assertFalse(temporaryURLContent0.isJAREntry());
      assertEquals((short)10, bigDecimal0.shortValue());
      assertEquals((byte)10, bigDecimal0.byteValue());
      assertTrue(catalogLight0.isTexturable());
      assertTrue(catalogLight0.isProportional());
      assertEquals("", catalogLight0.getCurrency());
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertNull(catalogLight0.getGrade());
      assertFalse(catalogLight0.isDoorOrWindow());
      assertTrue(catalogLight0.isMovable());
      assertEquals((-611.6462F), catalogLight0.getWidth(), 0.01F);
      assertNull(catalogLight0.getInformation());
      assertTrue(catalogLight0.isDeformable());
      assertNull(catalogLight0.getColor());
      assertEquals(1.7441415F, catalogLight0.getDepth(), 0.01F);
      assertEquals("s<7]@ykxs+ 0`a ", catalogLight0.getName());
      assertNull(catalogLight0.getCreationDate());
      assertEquals((-897.795F), catalogLight0.getElevation(), 0.01F);
      assertFalse(catalogLight0.isBackFaceShown());
      assertEquals("P'HZa~G", catalogLight0.getCreator());
      assertEquals("", catalogLight0.getStaircaseCutOutShape());
      assertTrue(catalogLight0.isResizable());
      assertFalse(catalogLight0.isModifiable());
      assertEquals("\"<xp|JAv^\"<^Qh{/~", catalogLight0.getId());
      assertEquals("s<7]@ykxs+ 0`a ", catalogLight0.getDescription());
      assertEquals(0.5F, catalogLight0.getHeight(), 0.01F);
      assertTrue(catalogPieceOfFurniture0.isTexturable());
      assertNull(catalogPieceOfFurniture0.getCreator());
      assertEquals("", catalogPieceOfFurniture0.getName());
      assertEquals(1.7441415F, catalogPieceOfFurniture0.getDepth(), 0.01F);
      assertFalse(catalogPieceOfFurniture0.isDoorOrWindow());
      assertNull(catalogPieceOfFurniture0.getCurrency());
      assertNull(catalogPieceOfFurniture0.getDescription());
      assertEquals(1392409281320L, (long)catalogPieceOfFurniture0.getCreationDate());
      assertNull(catalogPieceOfFurniture0.getGrade());
      assertTrue(catalogPieceOfFurniture0.isResizable());
      assertEquals(0.5F, catalogPieceOfFurniture0.getIconYaw(), 0.01F);
      assertEquals(340, (int)catalogPieceOfFurniture0.getColor());
      assertEquals(1.7441415F, catalogPieceOfFurniture0.getHeight(), 0.01F);
      assertEquals(0.3926991F, catalogPieceOfFurniture0.getElevation(), 0.01F);
      assertFalse(catalogPieceOfFurniture0.isBackFaceShown());
      assertTrue(catalogPieceOfFurniture0.isModifiable());
      assertNull(catalogPieceOfFurniture0.getStaircaseCutOutShape());
      assertNull(catalogPieceOfFurniture0.getId());
      assertTrue(catalogPieceOfFurniture0.isMovable());
      assertFalse(catalogPieceOfFurniture0.isProportional());
      assertEquals(2.0F, catalogPieceOfFurniture0.getWidth(), 0.01F);
      assertNull(catalogPieceOfFurniture0.getInformation());
      assertTrue(catalogPieceOfFurniture0.isDeformable());
      
      homeLight2.setWidth((-1.0F));
      assertEquals(2, lightSourceArray0.length);
      assertNotSame(homeLight0, homeLight1);
      assertNotSame(homeLight0, homeLight2);
      assertNotSame(homeLight2, homeLight0);
      assertNotSame(homeLight2, homeLight1);
      assertFalse(homeLight0.equals((Object)homeLight1));
      assertFalse(homeLight0.equals((Object)homeLight2));
      assertFalse(homeLight2.equals((Object)homeLight0));
      assertFalse(homeLight2.equals((Object)homeLight1));
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getUserInfo());
      assertNull(uRL0.getRef());
      assertEquals("", uRL0.getFile());
      assertEquals("", uRL0.getPath());
      assertNull(uRL0.toString());
      assertNull(uRL0.getHost());
      assertNull(uRL0.toExternalForm());
      assertEquals("s<7]@ykxs+ 0`a ", uRL0.getProtocol());
      assertNull(uRL0.getAuthority());
      assertEquals(0, uRL0.getDefaultPort());
      assertNull(uRL0.getQuery());
      assertFalse(temporaryURLContent0.isJAREntry());
      assertEquals((short)10, bigDecimal0.shortValue());
      assertEquals((byte)10, bigDecimal0.byteValue());
      assertTrue(catalogLight0.isTexturable());
      assertTrue(catalogLight0.isProportional());
      assertEquals("", catalogLight0.getCurrency());
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertNull(catalogLight0.getGrade());
      assertFalse(catalogLight0.isDoorOrWindow());
      assertTrue(catalogLight0.isMovable());
      assertEquals((-611.6462F), catalogLight0.getWidth(), 0.01F);
      assertNull(catalogLight0.getInformation());
      assertTrue(catalogLight0.isDeformable());
      assertNull(catalogLight0.getColor());
      assertEquals(1.7441415F, catalogLight0.getDepth(), 0.01F);
      assertEquals("s<7]@ykxs+ 0`a ", catalogLight0.getName());
      assertNull(catalogLight0.getCreationDate());
      assertEquals((-897.795F), catalogLight0.getElevation(), 0.01F);
      assertFalse(catalogLight0.isBackFaceShown());
      assertEquals("P'HZa~G", catalogLight0.getCreator());
      assertEquals("", catalogLight0.getStaircaseCutOutShape());
      assertTrue(catalogLight0.isResizable());
      assertFalse(catalogLight0.isModifiable());
      assertEquals("\"<xp|JAv^\"<^Qh{/~", catalogLight0.getId());
      assertEquals("s<7]@ykxs+ 0`a ", catalogLight0.getDescription());
      assertEquals(0.5F, catalogLight0.getHeight(), 0.01F);
      assertEquals("s<7]@ykxs+ 0`a ", homeLight0.getName());
      assertEquals(0.5F, homeLight0.getHeight(), 0.01F);
      assertTrue(homeLight0.isVisible());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertEquals("s<7]@ykxs+ 0`a ", homeLight0.getDescription());
      assertEquals(0.8720707F, homeLight0.getY(), 0.01F);
      assertTrue(homeLight0.isDeformable());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertEquals((-897.795F), homeLight0.getGroundElevation(), 0.01F);
      assertTrue(homeLight0.isResizable());
      assertEquals("", homeLight0.getStaircaseCutOutShape());
      assertEquals("", homeLight0.getCurrency());
      assertNull(homeLight0.getShininess());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals((-897.795F), homeLight0.getElevation(), 0.01F);
      assertEquals("\"<xp|JAv^\"<^Qh{/~", homeLight0.getCatalogId());
      assertTrue(homeLight0.isMovable());
      assertEquals(1.7441415F, homeLight0.getDepth(), 0.01F);
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertTrue(homeLight0.isTexturable());
      assertEquals((-305.8231F), homeLight0.getX(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      assertNull(homeLight0.getColor());
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertFalse(homeLight0.isModelMirrored());
      assertFalse(homeLight0.isBackFaceShown());
      assertEquals((-611.6462F), homeLight0.getWidth(), 0.01F);
      assertFalse(homeLight0.isNameVisible());
      assertNull(homeLight2.getColor());
      assertEquals((-897.795F), homeLight2.getElevation(), 0.01F);
      assertFalse(homeLight2.isBackFaceShown());
      assertFalse(homeLight2.isNameVisible());
      assertEquals("", homeLight2.getCurrency());
      assertEquals((-897.795F), homeLight2.getGroundElevation(), 0.01F);
      assertFalse(homeLight2.isDoorOrWindow());
      assertEquals((-1.0F), homeLight2.getWidth(), 0.01F);
      assertEquals((-305.8231F), homeLight2.getX(), 0.01F);
      assertEquals(0.0F, homeLight2.getAngle(), 0.01F);
      assertTrue(homeLight2.isTexturable());
      assertEquals(0.0F, homeLight2.getNameXOffset(), 0.01F);
      assertEquals("s<7]@ykxs+ 0`a ", homeLight2.getDescription());
      assertNull(homeLight2.getShininess());
      assertTrue(homeLight2.isDeformable());
      assertTrue(homeLight2.isResizable());
      assertTrue(homeLight2.isVisible());
      assertEquals("", homeLight2.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight2.getNameAngle(), 0.01F);
      assertEquals("\"<xp|JAv^\"<^Qh{/~", homeLight2.getCatalogId());
      assertTrue(homeLight2.isMovable());
      assertEquals("s<7]@ykxs+ 0`a ", homeLight2.getName());
      assertEquals(0.5F, homeLight2.getPower(), 0.01F);
      assertEquals(0.5F, homeLight2.getHeight(), 0.01F);
      assertEquals(0.0F, homeLight2.getNameYOffset(), 0.01F);
      assertEquals(0.8720707F, homeLight2.getY(), 0.01F);
      assertFalse(homeLight2.isModelMirrored());
      assertEquals(1.7441415F, homeLight2.getDepth(), 0.01F);
      
      homeLight0.setHeight(0.0F);
      assertEquals(2, lightSourceArray0.length);
      assertNotSame(homeLight0, homeLight1);
      assertNotSame(homeLight0, homeLight2);
      assertFalse(homeLight0.equals((Object)homeLight1));
      assertFalse(homeLight0.equals((Object)homeLight2));
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getUserInfo());
      assertNull(uRL0.getRef());
      assertEquals("", uRL0.getFile());
      assertEquals("", uRL0.getPath());
      assertNull(uRL0.toString());
      assertNull(uRL0.getHost());
      assertNull(uRL0.toExternalForm());
      assertEquals("s<7]@ykxs+ 0`a ", uRL0.getProtocol());
      assertNull(uRL0.getAuthority());
      assertEquals(0, uRL0.getDefaultPort());
      assertNull(uRL0.getQuery());
      assertFalse(temporaryURLContent0.isJAREntry());
      assertEquals((short)10, bigDecimal0.shortValue());
      assertEquals((byte)10, bigDecimal0.byteValue());
      assertTrue(catalogLight0.isTexturable());
      assertTrue(catalogLight0.isProportional());
      assertEquals("", catalogLight0.getCurrency());
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertNull(catalogLight0.getGrade());
      assertFalse(catalogLight0.isDoorOrWindow());
      assertTrue(catalogLight0.isMovable());
      assertEquals((-611.6462F), catalogLight0.getWidth(), 0.01F);
      assertNull(catalogLight0.getInformation());
      assertTrue(catalogLight0.isDeformable());
      assertNull(catalogLight0.getColor());
      assertEquals(1.7441415F, catalogLight0.getDepth(), 0.01F);
      assertEquals("s<7]@ykxs+ 0`a ", catalogLight0.getName());
      assertNull(catalogLight0.getCreationDate());
      assertEquals((-897.795F), catalogLight0.getElevation(), 0.01F);
      assertFalse(catalogLight0.isBackFaceShown());
      assertEquals("P'HZa~G", catalogLight0.getCreator());
      assertEquals("", catalogLight0.getStaircaseCutOutShape());
      assertTrue(catalogLight0.isResizable());
      assertFalse(catalogLight0.isModifiable());
      assertEquals("\"<xp|JAv^\"<^Qh{/~", catalogLight0.getId());
      assertEquals("s<7]@ykxs+ 0`a ", catalogLight0.getDescription());
      assertEquals(0.5F, catalogLight0.getHeight(), 0.01F);
      assertEquals("s<7]@ykxs+ 0`a ", homeLight0.getName());
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertTrue(homeLight0.isVisible());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertEquals("s<7]@ykxs+ 0`a ", homeLight0.getDescription());
      assertEquals(0.8720707F, homeLight0.getY(), 0.01F);
      assertTrue(homeLight0.isDeformable());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertEquals((-897.795F), homeLight0.getGroundElevation(), 0.01F);
      assertTrue(homeLight0.isResizable());
      assertEquals("", homeLight0.getStaircaseCutOutShape());
      assertEquals("", homeLight0.getCurrency());
      assertNull(homeLight0.getShininess());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals((-897.795F), homeLight0.getElevation(), 0.01F);
      assertEquals("\"<xp|JAv^\"<^Qh{/~", homeLight0.getCatalogId());
      assertTrue(homeLight0.isMovable());
      assertEquals(1.7441415F, homeLight0.getDepth(), 0.01F);
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertTrue(homeLight0.isTexturable());
      assertEquals((-305.8231F), homeLight0.getX(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      assertNull(homeLight0.getColor());
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertFalse(homeLight0.isModelMirrored());
      assertFalse(homeLight0.isBackFaceShown());
      assertEquals((-611.6462F), homeLight0.getWidth(), 0.01F);
      assertFalse(homeLight0.isNameVisible());
  }

  @Test(timeout = 4000)
  public void test204()  throws Throwable  {
      Integer integer0 = new Integer((-1469));
      assertNotNull(integer0);
      assertEquals((-1469), (int)integer0);
      
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      Light light0 = mock(Light.class, new ViolatedAssumptionAnswer());
      doReturn((LightSource[]) null).when(light0).getLightSources();
      doReturn((Integer) null).when(light0).getColor();
      doReturn((String) null).when(light0).getCurrency();
      doReturn(0.0F).when(light0).getDepth();
      doReturn((String) null).when(light0).getDescription();
      doReturn(0.0F).when(light0).getElevation();
      doReturn(0.0F).when(light0).getHeight();
      doReturn((Content) null).when(light0).getIcon();
      doReturn((Content) null).when(light0).getModel();
      doReturn((float[][]) null).when(light0).getModelRotation();
      doReturn((String) null).when(light0).getName();
      doReturn((Content) null).when(light0).getPlanIcon();
      doReturn((BigDecimal) null).when(light0).getPrice();
      doReturn((String) null).when(light0).getStaircaseCutOutShape();
      doReturn((BigDecimal) null).when(light0).getValueAddedTaxPercentage();
      doReturn(0.0F).when(light0).getWidth();
      doReturn(false).when(light0).isBackFaceShown();
      doReturn(false).when(light0).isDeformable();
      doReturn(false).when(light0).isDoorOrWindow();
      doReturn(false).when(light0).isMovable();
      doReturn(false).when(light0).isResizable();
      doReturn(false).when(light0).isTexturable();
      HomeLight homeLight0 = new HomeLight(light0);
      assertNotNull(homeLight0);
      assertFalse(homeLight0.isNameVisible());
      assertNull(homeLight0.getCurrency());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertNull(homeLight0.getColor());
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertFalse(homeLight0.isBackFaceShown());
      assertFalse(homeLight0.isModelMirrored());
      assertNull(homeLight0.getName());
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertNull(homeLight0.getCatalogId());
      assertNull(homeLight0.getDescription());
      assertFalse(homeLight0.isTexturable());
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertFalse(homeLight0.isMovable());
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertNull(homeLight0.getShininess());
      assertTrue(homeLight0.isVisible());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertFalse(homeLight0.isResizable());
      assertFalse(homeLight0.isDeformable());
      
      homeLight0.setElevation((-1.0F));
      assertFalse(homeLight0.isNameVisible());
      assertNull(homeLight0.getCurrency());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertNull(homeLight0.getColor());
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertFalse(homeLight0.isBackFaceShown());
      assertFalse(homeLight0.isModelMirrored());
      assertNull(homeLight0.getName());
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertNull(homeLight0.getCatalogId());
      assertNull(homeLight0.getDescription());
      assertFalse(homeLight0.isTexturable());
      assertEquals((-1.0F), homeLight0.getElevation(), 0.01F);
      assertEquals((-1.0F), homeLight0.getGroundElevation(), 0.01F);
      assertFalse(homeLight0.isMovable());
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertNull(homeLight0.getShininess());
      assertTrue(homeLight0.isVisible());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertFalse(homeLight0.isResizable());
      assertFalse(homeLight0.isDeformable());
      
      homeLight0.setNameAngle(0.0F);
      assertFalse(homeLight0.isNameVisible());
      assertNull(homeLight0.getCurrency());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertNull(homeLight0.getColor());
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertFalse(homeLight0.isBackFaceShown());
      assertFalse(homeLight0.isModelMirrored());
      assertNull(homeLight0.getName());
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertNull(homeLight0.getCatalogId());
      assertNull(homeLight0.getDescription());
      assertFalse(homeLight0.isTexturable());
      assertEquals((-1.0F), homeLight0.getElevation(), 0.01F);
      assertEquals((-1.0F), homeLight0.getGroundElevation(), 0.01F);
      assertFalse(homeLight0.isMovable());
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertNull(homeLight0.getShininess());
      assertTrue(homeLight0.isVisible());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertFalse(homeLight0.isResizable());
      assertFalse(homeLight0.isDeformable());
      
      homeLight0.setY((-1.0F));
      assertFalse(homeLight0.isNameVisible());
      assertNull(homeLight0.getCurrency());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertNull(homeLight0.getColor());
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertFalse(homeLight0.isBackFaceShown());
      assertFalse(homeLight0.isModelMirrored());
      assertNull(homeLight0.getName());
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertNull(homeLight0.getCatalogId());
      assertNull(homeLight0.getDescription());
      assertFalse(homeLight0.isTexturable());
      assertEquals((-1.0F), homeLight0.getElevation(), 0.01F);
      assertEquals((-1.0F), homeLight0.getGroundElevation(), 0.01F);
      assertFalse(homeLight0.isMovable());
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertEquals((-1.0F), homeLight0.getY(), 0.01F);
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertNull(homeLight0.getShininess());
      assertTrue(homeLight0.isVisible());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertFalse(homeLight0.isResizable());
      assertFalse(homeLight0.isDeformable());
      
      Level level0 = homeLight0.getLevel();
      assertNull(level0);
      assertFalse(homeLight0.isNameVisible());
      assertNull(homeLight0.getCurrency());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertNull(homeLight0.getColor());
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertFalse(homeLight0.isBackFaceShown());
      assertFalse(homeLight0.isModelMirrored());
      assertNull(homeLight0.getName());
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertNull(homeLight0.getCatalogId());
      assertNull(homeLight0.getDescription());
      assertFalse(homeLight0.isTexturable());
      assertEquals((-1.0F), homeLight0.getElevation(), 0.01F);
      assertEquals((-1.0F), homeLight0.getGroundElevation(), 0.01F);
      assertFalse(homeLight0.isMovable());
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertEquals((-1.0F), homeLight0.getY(), 0.01F);
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertNull(homeLight0.getShininess());
      assertTrue(homeLight0.isVisible());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertFalse(homeLight0.isResizable());
      assertFalse(homeLight0.isDeformable());
      
      boolean boolean1 = homeLight0.isBottomLeftPointAt((-1.0F), 0.0F, (-1.0F));
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      assertFalse(homeLight0.isNameVisible());
      assertNull(homeLight0.getCurrency());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertNull(homeLight0.getColor());
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertFalse(homeLight0.isBackFaceShown());
      assertFalse(homeLight0.isModelMirrored());
      assertNull(homeLight0.getName());
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertNull(homeLight0.getCatalogId());
      assertNull(homeLight0.getDescription());
      assertFalse(homeLight0.isTexturable());
      assertEquals((-1.0F), homeLight0.getElevation(), 0.01F);
      assertEquals((-1.0F), homeLight0.getGroundElevation(), 0.01F);
      assertFalse(homeLight0.isMovable());
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertEquals((-1.0F), homeLight0.getY(), 0.01F);
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertNull(homeLight0.getShininess());
      assertTrue(homeLight0.isVisible());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertFalse(homeLight0.isResizable());
      assertFalse(homeLight0.isDeformable());
      
      homeLight0.setAngle((-1.0F));
      assertFalse(homeLight0.isNameVisible());
      assertNull(homeLight0.getCurrency());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertNull(homeLight0.getColor());
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertEquals(5.2831855F, homeLight0.getAngle(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      assertFalse(homeLight0.isBackFaceShown());
      assertFalse(homeLight0.isModelMirrored());
      assertNull(homeLight0.getName());
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertNull(homeLight0.getCatalogId());
      assertNull(homeLight0.getDescription());
      assertFalse(homeLight0.isTexturable());
      assertEquals((-1.0F), homeLight0.getElevation(), 0.01F);
      assertEquals((-1.0F), homeLight0.getGroundElevation(), 0.01F);
      assertFalse(homeLight0.isMovable());
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertEquals((-1.0F), homeLight0.getY(), 0.01F);
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertNull(homeLight0.getShininess());
      assertTrue(homeLight0.isVisible());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertFalse(homeLight0.isResizable());
      assertFalse(homeLight0.isDeformable());
      
      homeLight0.setNameVisible(true);
      assertNull(homeLight0.getCurrency());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertNull(homeLight0.getColor());
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertEquals(5.2831855F, homeLight0.getAngle(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      assertFalse(homeLight0.isBackFaceShown());
      assertFalse(homeLight0.isModelMirrored());
      assertTrue(homeLight0.isNameVisible());
      assertNull(homeLight0.getName());
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertNull(homeLight0.getCatalogId());
      assertNull(homeLight0.getDescription());
      assertFalse(homeLight0.isTexturable());
      assertEquals((-1.0F), homeLight0.getElevation(), 0.01F);
      assertEquals((-1.0F), homeLight0.getGroundElevation(), 0.01F);
      assertFalse(homeLight0.isMovable());
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertEquals((-1.0F), homeLight0.getY(), 0.01F);
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertNull(homeLight0.getShininess());
      assertTrue(homeLight0.isVisible());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertFalse(homeLight0.isResizable());
      assertFalse(homeLight0.isDeformable());
      
      homeLight0.setName("J");
      assertNull(homeLight0.getCurrency());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertNull(homeLight0.getColor());
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertEquals(5.2831855F, homeLight0.getAngle(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      assertFalse(homeLight0.isBackFaceShown());
      assertFalse(homeLight0.isModelMirrored());
      assertTrue(homeLight0.isNameVisible());
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertNull(homeLight0.getCatalogId());
      assertNull(homeLight0.getDescription());
      assertFalse(homeLight0.isTexturable());
      assertEquals("J", homeLight0.getName());
      assertEquals((-1.0F), homeLight0.getElevation(), 0.01F);
      assertEquals((-1.0F), homeLight0.getGroundElevation(), 0.01F);
      assertFalse(homeLight0.isMovable());
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertEquals((-1.0F), homeLight0.getY(), 0.01F);
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertNull(homeLight0.getShininess());
      assertTrue(homeLight0.isVisible());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertFalse(homeLight0.isResizable());
      assertFalse(homeLight0.isDeformable());
      
      boolean boolean2 = homeLight0.isNameVisible();
      assertFalse(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2);
      assertNull(homeLight0.getCurrency());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertNull(homeLight0.getColor());
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertEquals(5.2831855F, homeLight0.getAngle(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      assertFalse(homeLight0.isBackFaceShown());
      assertFalse(homeLight0.isModelMirrored());
      assertTrue(homeLight0.isNameVisible());
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertNull(homeLight0.getCatalogId());
      assertNull(homeLight0.getDescription());
      assertFalse(homeLight0.isTexturable());
      assertEquals("J", homeLight0.getName());
      assertEquals((-1.0F), homeLight0.getElevation(), 0.01F);
      assertEquals((-1.0F), homeLight0.getGroundElevation(), 0.01F);
      assertFalse(homeLight0.isMovable());
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertEquals((-1.0F), homeLight0.getY(), 0.01F);
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertNull(homeLight0.getShininess());
      assertTrue(homeLight0.isVisible());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertFalse(homeLight0.isResizable());
      assertFalse(homeLight0.isDeformable());
      
      homeLight0.setNameYOffset((-1417.9462F));
      assertNull(homeLight0.getCurrency());
      assertNull(homeLight0.getColor());
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertEquals(5.2831855F, homeLight0.getAngle(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      assertFalse(homeLight0.isBackFaceShown());
      assertFalse(homeLight0.isModelMirrored());
      assertTrue(homeLight0.isNameVisible());
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertNull(homeLight0.getCatalogId());
      assertNull(homeLight0.getDescription());
      assertFalse(homeLight0.isTexturable());
      assertEquals("J", homeLight0.getName());
      assertEquals((-1.0F), homeLight0.getElevation(), 0.01F);
      assertEquals((-1.0F), homeLight0.getGroundElevation(), 0.01F);
      assertFalse(homeLight0.isMovable());
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertEquals((-1.0F), homeLight0.getY(), 0.01F);
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertEquals((-1417.9462F), homeLight0.getNameYOffset(), 0.01F);
      assertNull(homeLight0.getShininess());
      assertTrue(homeLight0.isVisible());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertFalse(homeLight0.isResizable());
      assertFalse(homeLight0.isDeformable());
  }

  @Test(timeout = 4000)
  public void test205()  throws Throwable  {
      Integer integer0 = new Integer(1431655742);
      assertNotNull(integer0);
      assertEquals(1431655742, (int)integer0);
      
      Light light0 = mock(Light.class, new ViolatedAssumptionAnswer());
      doReturn((LightSource[]) null).when(light0).getLightSources();
      doReturn((Integer) null).when(light0).getColor();
      doReturn((String) null).when(light0).getCurrency();
      doReturn(0.0F).when(light0).getDepth();
      doReturn((String) null).when(light0).getDescription();
      doReturn(0.0F).when(light0).getElevation();
      doReturn(0.0F).when(light0).getHeight();
      doReturn((Content) null).when(light0).getIcon();
      doReturn((Content) null).when(light0).getModel();
      doReturn((float[][]) null).when(light0).getModelRotation();
      doReturn((String) null).when(light0).getName();
      doReturn((Content) null).when(light0).getPlanIcon();
      doReturn((BigDecimal) null).when(light0).getPrice();
      doReturn((String) null).when(light0).getStaircaseCutOutShape();
      doReturn((BigDecimal) null).when(light0).getValueAddedTaxPercentage();
      doReturn(0.0F).when(light0).getWidth();
      doReturn(false).when(light0).isBackFaceShown();
      doReturn(false).when(light0).isDeformable();
      doReturn(false).when(light0).isDoorOrWindow();
      doReturn(false).when(light0).isMovable();
      doReturn(false).when(light0).isResizable();
      doReturn(false).when(light0).isTexturable();
      HomeLight homeLight0 = new HomeLight(light0);
      assertNotNull(homeLight0);
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertFalse(homeLight0.isModelMirrored());
      assertNull(homeLight0.getName());
      assertFalse(homeLight0.isBackFaceShown());
      assertNull(homeLight0.getColor());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertNull(homeLight0.getCatalogId());
      assertNull(homeLight0.getCurrency());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertTrue(homeLight0.isVisible());
      assertFalse(homeLight0.isMovable());
      assertNull(homeLight0.getShininess());
      assertFalse(homeLight0.isDeformable());
      assertFalse(homeLight0.isResizable());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertFalse(homeLight0.isNameVisible());
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertNull(homeLight0.getDescription());
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertFalse(homeLight0.isTexturable());
      
      homeLight0.setY(1431655742);
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertFalse(homeLight0.isModelMirrored());
      assertNull(homeLight0.getName());
      assertFalse(homeLight0.isBackFaceShown());
      assertNull(homeLight0.getColor());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertNull(homeLight0.getCatalogId());
      assertNull(homeLight0.getCurrency());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertTrue(homeLight0.isVisible());
      assertFalse(homeLight0.isMovable());
      assertNull(homeLight0.getShininess());
      assertFalse(homeLight0.isDeformable());
      assertFalse(homeLight0.isResizable());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertFalse(homeLight0.isNameVisible());
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertNull(homeLight0.getDescription());
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertEquals(1.43165568E9F, homeLight0.getY(), 0.01F);
      assertFalse(homeLight0.isTexturable());
      
      BigDecimal bigDecimal0 = homeLight0.getValueAddedTax();
      assertNull(bigDecimal0);
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertFalse(homeLight0.isModelMirrored());
      assertNull(homeLight0.getName());
      assertFalse(homeLight0.isBackFaceShown());
      assertNull(homeLight0.getColor());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertNull(homeLight0.getCatalogId());
      assertNull(homeLight0.getCurrency());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertTrue(homeLight0.isVisible());
      assertFalse(homeLight0.isMovable());
      assertNull(homeLight0.getShininess());
      assertFalse(homeLight0.isDeformable());
      assertFalse(homeLight0.isResizable());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertFalse(homeLight0.isNameVisible());
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertNull(homeLight0.getDescription());
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertEquals(1.43165568E9F, homeLight0.getY(), 0.01F);
      assertFalse(homeLight0.isTexturable());
      
      boolean boolean0 = homeLight0.isTopRightPointAt(3.4028235E38F, 3.4028235E38F, 1431655742);
      assertFalse(boolean0);
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertFalse(homeLight0.isModelMirrored());
      assertNull(homeLight0.getName());
      assertFalse(homeLight0.isBackFaceShown());
      assertNull(homeLight0.getColor());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertNull(homeLight0.getCatalogId());
      assertNull(homeLight0.getCurrency());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertTrue(homeLight0.isVisible());
      assertFalse(homeLight0.isMovable());
      assertNull(homeLight0.getShininess());
      assertFalse(homeLight0.isDeformable());
      assertFalse(homeLight0.isResizable());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertFalse(homeLight0.isNameVisible());
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertNull(homeLight0.getDescription());
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertEquals(1.43165568E9F, homeLight0.getY(), 0.01F);
      assertFalse(homeLight0.isTexturable());
      
      String string0 = homeLight0.getName();
      assertNull(string0);
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertFalse(homeLight0.isModelMirrored());
      assertNull(homeLight0.getName());
      assertFalse(homeLight0.isBackFaceShown());
      assertNull(homeLight0.getColor());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertNull(homeLight0.getCatalogId());
      assertNull(homeLight0.getCurrency());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertTrue(homeLight0.isVisible());
      assertFalse(homeLight0.isMovable());
      assertNull(homeLight0.getShininess());
      assertFalse(homeLight0.isDeformable());
      assertFalse(homeLight0.isResizable());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertFalse(homeLight0.isNameVisible());
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertNull(homeLight0.getDescription());
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertEquals(1.43165568E9F, homeLight0.getY(), 0.01F);
      assertFalse(homeLight0.isTexturable());
      
      Level level0 = homeLight0.getLevel();
      assertNull(level0);
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertFalse(homeLight0.isModelMirrored());
      assertNull(homeLight0.getName());
      assertFalse(homeLight0.isBackFaceShown());
      assertNull(homeLight0.getColor());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertNull(homeLight0.getCatalogId());
      assertNull(homeLight0.getCurrency());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertTrue(homeLight0.isVisible());
      assertFalse(homeLight0.isMovable());
      assertNull(homeLight0.getShininess());
      assertFalse(homeLight0.isDeformable());
      assertFalse(homeLight0.isResizable());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertFalse(homeLight0.isNameVisible());
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertNull(homeLight0.getDescription());
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertEquals(1.43165568E9F, homeLight0.getY(), 0.01F);
      assertFalse(homeLight0.isTexturable());
      
      HomeLight homeLight1 = homeLight0.clone();
      assertNotNull(homeLight1);
      assertNotSame(homeLight0, homeLight1);
      assertNotSame(homeLight1, homeLight0);
      assertFalse(homeLight1.equals((Object)homeLight0));
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertFalse(homeLight0.isModelMirrored());
      assertNull(homeLight0.getName());
      assertFalse(homeLight0.isBackFaceShown());
      assertNull(homeLight0.getColor());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertNull(homeLight0.getCatalogId());
      assertNull(homeLight0.getCurrency());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertTrue(homeLight0.isVisible());
      assertFalse(homeLight0.isMovable());
      assertNull(homeLight0.getShininess());
      assertFalse(homeLight0.isDeformable());
      assertFalse(homeLight0.isResizable());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertFalse(homeLight0.isNameVisible());
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertNull(homeLight0.getDescription());
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertEquals(1.43165568E9F, homeLight0.getY(), 0.01F);
      assertFalse(homeLight0.isTexturable());
      assertNull(homeLight1.getColor());
      assertFalse(homeLight1.isBackFaceShown());
      assertFalse(homeLight1.isModelMirrored());
      assertFalse(homeLight1.isDeformable());
      assertEquals(0.0F, homeLight1.getX(), 0.01F);
      assertEquals(0.0F, homeLight1.getNameYOffset(), 0.01F);
      assertTrue(homeLight1.isVisible());
      assertEquals(0.0F, homeLight1.getGroundElevation(), 0.01F);
      assertFalse(homeLight1.isResizable());
      assertNull(homeLight1.getCurrency());
      assertEquals(0.0F, homeLight1.getHeight(), 0.01F);
      assertFalse(homeLight1.isMovable());
      assertNull(homeLight1.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight1.getNameAngle(), 0.01F);
      assertNull(homeLight1.getCatalogId());
      assertEquals(0.5F, homeLight1.getPower(), 0.01F);
      assertNull(homeLight1.getShininess());
      assertEquals(0.0F, homeLight1.getNameXOffset(), 0.01F);
      assertEquals(1.43165568E9F, homeLight1.getY(), 0.01F);
      assertEquals(0.0F, homeLight1.getDepth(), 0.01F);
      assertEquals(0.0F, homeLight1.getElevation(), 0.01F);
      assertFalse(homeLight1.isTexturable());
      assertNull(homeLight1.getDescription());
      assertFalse(homeLight1.isDoorOrWindow());
      assertNull(homeLight1.getName());
      assertEquals(0.0F, homeLight1.getWidth(), 0.01F);
      assertFalse(homeLight1.isNameVisible());
      assertEquals(0.0F, homeLight1.getAngle(), 0.01F);
      
      homeLight1.setX(1634.6F);
      assertNotSame(homeLight0, homeLight1);
      assertNotSame(homeLight1, homeLight0);
      assertFalse(homeLight0.equals((Object)homeLight1));
      assertFalse(homeLight1.equals((Object)homeLight0));
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertFalse(homeLight0.isModelMirrored());
      assertNull(homeLight0.getName());
      assertFalse(homeLight0.isBackFaceShown());
      assertNull(homeLight0.getColor());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertNull(homeLight0.getCatalogId());
      assertNull(homeLight0.getCurrency());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertTrue(homeLight0.isVisible());
      assertFalse(homeLight0.isMovable());
      assertNull(homeLight0.getShininess());
      assertFalse(homeLight0.isDeformable());
      assertFalse(homeLight0.isResizable());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertFalse(homeLight0.isNameVisible());
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertNull(homeLight0.getDescription());
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertEquals(1.43165568E9F, homeLight0.getY(), 0.01F);
      assertFalse(homeLight0.isTexturable());
      assertNull(homeLight1.getColor());
      assertFalse(homeLight1.isBackFaceShown());
      assertFalse(homeLight1.isModelMirrored());
      assertFalse(homeLight1.isDeformable());
      assertEquals(0.0F, homeLight1.getNameYOffset(), 0.01F);
      assertTrue(homeLight1.isVisible());
      assertEquals(0.0F, homeLight1.getGroundElevation(), 0.01F);
      assertFalse(homeLight1.isResizable());
      assertEquals(1634.6F, homeLight1.getX(), 0.01F);
      assertNull(homeLight1.getCurrency());
      assertEquals(0.0F, homeLight1.getHeight(), 0.01F);
      assertFalse(homeLight1.isMovable());
      assertNull(homeLight1.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight1.getNameAngle(), 0.01F);
      assertNull(homeLight1.getCatalogId());
      assertEquals(0.5F, homeLight1.getPower(), 0.01F);
      assertNull(homeLight1.getShininess());
      assertEquals(0.0F, homeLight1.getNameXOffset(), 0.01F);
      assertEquals(1.43165568E9F, homeLight1.getY(), 0.01F);
      assertEquals(0.0F, homeLight1.getDepth(), 0.01F);
      assertEquals(0.0F, homeLight1.getElevation(), 0.01F);
      assertFalse(homeLight1.isTexturable());
      assertNull(homeLight1.getDescription());
      assertFalse(homeLight1.isDoorOrWindow());
      assertNull(homeLight1.getName());
      assertEquals(0.0F, homeLight1.getWidth(), 0.01F);
      assertFalse(homeLight1.isNameVisible());
      assertEquals(0.0F, homeLight1.getAngle(), 0.01F);
      
      BigDecimal bigDecimal1 = homeLight0.getValueAddedTax();
      assertNull(bigDecimal1);
      assertNotSame(homeLight0, homeLight1);
      assertFalse(homeLight0.equals((Object)homeLight1));
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertFalse(homeLight0.isModelMirrored());
      assertNull(homeLight0.getName());
      assertFalse(homeLight0.isBackFaceShown());
      assertNull(homeLight0.getColor());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertNull(homeLight0.getCatalogId());
      assertNull(homeLight0.getCurrency());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertTrue(homeLight0.isVisible());
      assertFalse(homeLight0.isMovable());
      assertNull(homeLight0.getShininess());
      assertFalse(homeLight0.isDeformable());
      assertFalse(homeLight0.isResizable());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertFalse(homeLight0.isNameVisible());
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertNull(homeLight0.getDescription());
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertEquals(1.43165568E9F, homeLight0.getY(), 0.01F);
      assertFalse(homeLight0.isTexturable());
      
      Level level1 = homeLight0.getLevel();
      assertNull(level1);
      assertNotSame(homeLight0, homeLight1);
      assertFalse(homeLight0.equals((Object)homeLight1));
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertFalse(homeLight0.isModelMirrored());
      assertNull(homeLight0.getName());
      assertFalse(homeLight0.isBackFaceShown());
      assertNull(homeLight0.getColor());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertNull(homeLight0.getCatalogId());
      assertNull(homeLight0.getCurrency());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertTrue(homeLight0.isVisible());
      assertFalse(homeLight0.isMovable());
      assertNull(homeLight0.getShininess());
      assertFalse(homeLight0.isDeformable());
      assertFalse(homeLight0.isResizable());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertFalse(homeLight0.isNameVisible());
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertNull(homeLight0.getDescription());
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertEquals(1.43165568E9F, homeLight0.getY(), 0.01F);
      assertFalse(homeLight0.isTexturable());
      
      homeLight1.setName("k34?R<");
      assertNotSame(homeLight0, homeLight1);
      assertNotSame(homeLight1, homeLight0);
      assertFalse(homeLight0.equals((Object)homeLight1));
      assertFalse(homeLight1.equals((Object)homeLight0));
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertFalse(homeLight0.isModelMirrored());
      assertNull(homeLight0.getName());
      assertFalse(homeLight0.isBackFaceShown());
      assertNull(homeLight0.getColor());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertNull(homeLight0.getCatalogId());
      assertNull(homeLight0.getCurrency());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertTrue(homeLight0.isVisible());
      assertFalse(homeLight0.isMovable());
      assertNull(homeLight0.getShininess());
      assertFalse(homeLight0.isDeformable());
      assertFalse(homeLight0.isResizable());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertFalse(homeLight0.isNameVisible());
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertNull(homeLight0.getDescription());
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertEquals(1.43165568E9F, homeLight0.getY(), 0.01F);
      assertFalse(homeLight0.isTexturable());
      assertNull(homeLight1.getColor());
      assertFalse(homeLight1.isBackFaceShown());
      assertFalse(homeLight1.isModelMirrored());
      assertFalse(homeLight1.isDeformable());
      assertEquals(0.0F, homeLight1.getNameYOffset(), 0.01F);
      assertTrue(homeLight1.isVisible());
      assertEquals(0.0F, homeLight1.getGroundElevation(), 0.01F);
      assertFalse(homeLight1.isResizable());
      assertEquals(1634.6F, homeLight1.getX(), 0.01F);
      assertNull(homeLight1.getCurrency());
      assertEquals(0.0F, homeLight1.getHeight(), 0.01F);
      assertFalse(homeLight1.isMovable());
      assertNull(homeLight1.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight1.getNameAngle(), 0.01F);
      assertNull(homeLight1.getCatalogId());
      assertEquals(0.5F, homeLight1.getPower(), 0.01F);
      assertNull(homeLight1.getShininess());
      assertEquals(0.0F, homeLight1.getNameXOffset(), 0.01F);
      assertEquals(1.43165568E9F, homeLight1.getY(), 0.01F);
      assertEquals(0.0F, homeLight1.getDepth(), 0.01F);
      assertEquals(0.0F, homeLight1.getElevation(), 0.01F);
      assertFalse(homeLight1.isTexturable());
      assertNull(homeLight1.getDescription());
      assertFalse(homeLight1.isDoorOrWindow());
      assertEquals("k34?R<", homeLight1.getName());
      assertEquals(0.0F, homeLight1.getWidth(), 0.01F);
      assertFalse(homeLight1.isNameVisible());
      assertEquals(0.0F, homeLight1.getAngle(), 0.01F);
      
      boolean boolean1 = homeLight0.isNameVisible();
      assertNotSame(homeLight0, homeLight1);
      assertFalse(homeLight0.equals((Object)homeLight1));
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertFalse(homeLight0.isModelMirrored());
      assertNull(homeLight0.getName());
      assertFalse(homeLight0.isBackFaceShown());
      assertNull(homeLight0.getColor());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertNull(homeLight0.getCatalogId());
      assertNull(homeLight0.getCurrency());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertTrue(homeLight0.isVisible());
      assertFalse(homeLight0.isMovable());
      assertNull(homeLight0.getShininess());
      assertFalse(homeLight0.isDeformable());
      assertFalse(homeLight0.isResizable());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertFalse(homeLight0.isNameVisible());
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertNull(homeLight0.getDescription());
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertEquals(1.43165568E9F, homeLight0.getY(), 0.01F);
      assertFalse(homeLight0.isTexturable());
      
      HomeLight homeLight2 = homeLight0.clone();
      assertNotNull(homeLight2);
      assertNotSame(homeLight0, homeLight1);
      assertNotSame(homeLight0, homeLight2);
      assertNotSame(homeLight2, homeLight0);
      assertNotSame(homeLight2, homeLight1);
      assertFalse(homeLight0.equals((Object)homeLight1));
      assertFalse(homeLight2.equals((Object)homeLight0));
      assertFalse(homeLight2.equals((Object)homeLight1));
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertFalse(homeLight0.isModelMirrored());
      assertNull(homeLight0.getName());
      assertFalse(homeLight0.isBackFaceShown());
      assertNull(homeLight0.getColor());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertNull(homeLight0.getCatalogId());
      assertNull(homeLight0.getCurrency());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertTrue(homeLight0.isVisible());
      assertFalse(homeLight0.isMovable());
      assertNull(homeLight0.getShininess());
      assertFalse(homeLight0.isDeformable());
      assertFalse(homeLight0.isResizable());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertFalse(homeLight0.isNameVisible());
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertNull(homeLight0.getDescription());
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertEquals(1.43165568E9F, homeLight0.getY(), 0.01F);
      assertFalse(homeLight0.isTexturable());
      assertFalse(homeLight2.isDoorOrWindow());
      assertFalse(homeLight2.isModelMirrored());
      assertEquals(0.0F, homeLight2.getX(), 0.01F);
      assertFalse(homeLight2.isBackFaceShown());
      assertEquals(0.0F, homeLight2.getAngle(), 0.01F);
      assertFalse(homeLight2.isNameVisible());
      assertNull(homeLight2.getCurrency());
      assertEquals(0.0F, homeLight2.getNameYOffset(), 0.01F);
      assertNull(homeLight2.getColor());
      assertNull(homeLight2.getShininess());
      assertNull(homeLight2.getCatalogId());
      assertFalse(homeLight2.isResizable());
      assertEquals(0.5F, homeLight2.getPower(), 0.01F);
      assertEquals(0.0F, homeLight2.getHeight(), 0.01F);
      assertNull(homeLight2.getName());
      assertFalse(homeLight2.isMovable());
      assertEquals(0.0F, homeLight2.getElevation(), 0.01F);
      assertEquals(0.0F, homeLight2.getWidth(), 0.01F);
      assertTrue(homeLight2.isVisible());
      assertNull(homeLight2.getDescription());
      assertEquals(0.0F, homeLight2.getNameXOffset(), 0.01F);
      assertFalse(homeLight2.isTexturable());
      assertEquals(1.43165568E9F, homeLight2.getY(), 0.01F);
      assertEquals(0.0F, homeLight2.getDepth(), 0.01F);
      assertEquals(0.0F, homeLight2.getNameAngle(), 0.01F);
      assertFalse(homeLight2.isDeformable());
      assertNull(homeLight2.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight2.getGroundElevation(), 0.01F);
      
      boolean boolean2 = homeLight0.containsPoint(3.4028235E38F, (-115.56F), 1.0F);
      assertNotSame(homeLight0, homeLight1);
      assertNotSame(homeLight0, homeLight2);
      assertFalse(homeLight0.equals((Object)homeLight1));
      assertFalse(homeLight0.equals((Object)homeLight2));
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      assertFalse(boolean2);
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertFalse(homeLight0.isModelMirrored());
      assertNull(homeLight0.getName());
      assertFalse(homeLight0.isBackFaceShown());
      assertNull(homeLight0.getColor());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertNull(homeLight0.getCatalogId());
      assertNull(homeLight0.getCurrency());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertTrue(homeLight0.isVisible());
      assertFalse(homeLight0.isMovable());
      assertNull(homeLight0.getShininess());
      assertFalse(homeLight0.isDeformable());
      assertFalse(homeLight0.isResizable());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertFalse(homeLight0.isNameVisible());
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertNull(homeLight0.getDescription());
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertEquals(1.43165568E9F, homeLight0.getY(), 0.01F);
      assertFalse(homeLight0.isTexturable());
      
      homeLight2.setNameYOffset((-1.0F));
      assertNotSame(homeLight0, homeLight1);
      assertNotSame(homeLight0, homeLight2);
      assertNotSame(homeLight2, homeLight0);
      assertNotSame(homeLight2, homeLight1);
      assertFalse(homeLight0.equals((Object)homeLight1));
      assertFalse(homeLight0.equals((Object)homeLight2));
      assertFalse(homeLight2.equals((Object)homeLight0));
      assertFalse(homeLight2.equals((Object)homeLight1));
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertFalse(homeLight0.isModelMirrored());
      assertNull(homeLight0.getName());
      assertFalse(homeLight0.isBackFaceShown());
      assertNull(homeLight0.getColor());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertNull(homeLight0.getCatalogId());
      assertNull(homeLight0.getCurrency());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertTrue(homeLight0.isVisible());
      assertFalse(homeLight0.isMovable());
      assertNull(homeLight0.getShininess());
      assertFalse(homeLight0.isDeformable());
      assertFalse(homeLight0.isResizable());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertFalse(homeLight0.isNameVisible());
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertNull(homeLight0.getDescription());
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertEquals(1.43165568E9F, homeLight0.getY(), 0.01F);
      assertFalse(homeLight0.isTexturable());
      assertFalse(homeLight2.isDoorOrWindow());
      assertFalse(homeLight2.isModelMirrored());
      assertEquals(0.0F, homeLight2.getX(), 0.01F);
      assertFalse(homeLight2.isBackFaceShown());
      assertEquals(0.0F, homeLight2.getAngle(), 0.01F);
      assertFalse(homeLight2.isNameVisible());
      assertNull(homeLight2.getCurrency());
      assertEquals((-1.0F), homeLight2.getNameYOffset(), 0.01F);
      assertNull(homeLight2.getColor());
      assertNull(homeLight2.getShininess());
      assertNull(homeLight2.getCatalogId());
      assertFalse(homeLight2.isResizable());
      assertEquals(0.5F, homeLight2.getPower(), 0.01F);
      assertEquals(0.0F, homeLight2.getHeight(), 0.01F);
      assertNull(homeLight2.getName());
      assertFalse(homeLight2.isMovable());
      assertEquals(0.0F, homeLight2.getElevation(), 0.01F);
      assertEquals(0.0F, homeLight2.getWidth(), 0.01F);
      assertTrue(homeLight2.isVisible());
      assertNull(homeLight2.getDescription());
      assertEquals(0.0F, homeLight2.getNameXOffset(), 0.01F);
      assertFalse(homeLight2.isTexturable());
      assertEquals(1.43165568E9F, homeLight2.getY(), 0.01F);
      assertEquals(0.0F, homeLight2.getDepth(), 0.01F);
      assertEquals(0.0F, homeLight2.getNameAngle(), 0.01F);
      assertFalse(homeLight2.isDeformable());
      assertNull(homeLight2.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight2.getGroundElevation(), 0.01F);
      
      Content content0 = homeLight0.getModel();
      assertNull(content0);
      assertNotSame(homeLight0, homeLight1);
      assertNotSame(homeLight0, homeLight2);
      assertFalse(homeLight0.equals((Object)homeLight1));
      assertFalse(homeLight0.equals((Object)homeLight2));
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertFalse(homeLight0.isModelMirrored());
      assertNull(homeLight0.getName());
      assertFalse(homeLight0.isBackFaceShown());
      assertNull(homeLight0.getColor());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertNull(homeLight0.getCatalogId());
      assertNull(homeLight0.getCurrency());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertTrue(homeLight0.isVisible());
      assertFalse(homeLight0.isMovable());
      assertNull(homeLight0.getShininess());
      assertFalse(homeLight0.isDeformable());
      assertFalse(homeLight0.isResizable());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertFalse(homeLight0.isNameVisible());
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertNull(homeLight0.getDescription());
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertEquals(1.43165568E9F, homeLight0.getY(), 0.01F);
      assertFalse(homeLight0.isTexturable());
      
      String string1 = homeLight0.getCatalogId();
      assertNull(string1);
      assertNotSame(homeLight0, homeLight1);
      assertNotSame(homeLight0, homeLight2);
      assertFalse(homeLight0.equals((Object)homeLight1));
      assertFalse(homeLight0.equals((Object)homeLight2));
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertFalse(homeLight0.isModelMirrored());
      assertNull(homeLight0.getName());
      assertFalse(homeLight0.isBackFaceShown());
      assertNull(homeLight0.getColor());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertNull(homeLight0.getCatalogId());
      assertNull(homeLight0.getCurrency());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertTrue(homeLight0.isVisible());
      assertFalse(homeLight0.isMovable());
      assertNull(homeLight0.getShininess());
      assertFalse(homeLight0.isDeformable());
      assertFalse(homeLight0.isResizable());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertFalse(homeLight0.isNameVisible());
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertNull(homeLight0.getDescription());
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertEquals(1.43165568E9F, homeLight0.getY(), 0.01F);
      assertFalse(homeLight0.isTexturable());
  }

  @Test(timeout = 4000)
  public void test206()  throws Throwable  {
      Long long0 = new Long(0L);
      assertNotNull(long0);
      assertEquals(0L, (long)long0);
      
      Long long1 = Long.getLong("com.eteks.sweethome3d.model.HomeDoorOrWindow", long0);
      assertNotNull(long1);
      assertEquals(0L, (long)long1);
      
      Float float0 = new Float((double) 0L);
      assertNotNull(float0);
      assertEquals(0.0F, (float)float0, 0.01F);
      
      Sash[] sashArray0 = new Sash[2];
      Sash sash0 = new Sash(991.0187F, 0.0F, (-1666.0F), 0.0F, (-1666.0F));
      assertNotNull(sash0);
      assertEquals(991.0187F, sash0.getXAxis(), 0.01F);
      assertEquals((-1666.0F), sash0.getWidth(), 0.01F);
      assertEquals(0.0F, sash0.getStartAngle(), 0.01F);
      assertEquals((-1666.0F), sash0.getEndAngle(), 0.01F);
      assertEquals(0.0F, sash0.getYAxis(), 0.01F);
      
      sashArray0[0] = sash0;
      Sash sash1 = new Sash(0.0F, 0.0F, 0.0F, (-201.17F), 0.3926991F);
      assertNotNull(sash1);
      assertFalse(sash1.equals((Object)sash0));
      assertEquals(0.0F, sash1.getWidth(), 0.01F);
      assertEquals(0.0F, sash1.getXAxis(), 0.01F);
      assertEquals((-201.17F), sash1.getStartAngle(), 0.01F);
      assertEquals(0.0F, sash1.getYAxis(), 0.01F);
      assertEquals(0.3926991F, sash1.getEndAngle(), 0.01F);
      
      sashArray0[1] = sash1;
      float[][] floatArray0 = new float[4][2];
      float[] floatArray1 = new float[4];
      floatArray1[0] = 0.0F;
      floatArray1[1] = 991.0187F;
      floatArray1[2] = 991.0187F;
      floatArray1[3] = 0.0F;
      floatArray0[0] = floatArray1;
      float[] floatArray2 = new float[3];
      assertFalse(floatArray2.equals((Object)floatArray1));
      
      floatArray2[0] = 991.0187F;
      floatArray2[1] = (-201.17F);
      floatArray2[2] = 0.3926991F;
      floatArray0[1] = floatArray2;
      float[] floatArray3 = new float[9];
      assertFalse(floatArray3.equals((Object)floatArray2));
      assertFalse(floatArray3.equals((Object)floatArray1));
      
      floatArray3[0] = 991.0187F;
      floatArray3[1] = (float) 0L;
      floatArray3[2] = (-201.17F);
      floatArray3[3] = (-1.0F);
      floatArray3[4] = 0.0F;
      floatArray3[5] = 0.0F;
      floatArray3[6] = (-1666.0F);
      floatArray3[7] = (-1666.0F);
      floatArray3[8] = (-1666.0F);
      floatArray0[2] = floatArray3;
      float[] floatArray4 = new float[0];
      assertFalse(floatArray4.equals((Object)floatArray2));
      assertFalse(floatArray4.equals((Object)floatArray1));
      assertFalse(floatArray4.equals((Object)floatArray3));
      
      floatArray0[3] = floatArray4;
      BigInteger bigInteger0 = BigInteger.ZERO;
      assertNotNull(bigInteger0);
      assertEquals((byte)0, bigInteger0.byteValue());
      assertEquals((short)0, bigInteger0.shortValue());
      
      BigDecimal bigDecimal0 = new BigDecimal(bigInteger0);
      assertNotNull(bigDecimal0);
      assertEquals((byte)0, bigInteger0.byteValue());
      assertEquals((short)0, bigInteger0.shortValue());
      assertEquals((short)0, bigDecimal0.shortValue());
      assertEquals((byte)0, bigDecimal0.byteValue());
      
      CatalogDoorOrWindow catalogDoorOrWindow0 = new CatalogDoorOrWindow("com.eteks.sweethome3d.model.TextStyle", "com.eteks.sweethome3d.model.TextStyle", "com.eteks.sweethome3d.model.HomePieceOfFurniture$17", "com.eteks.sweethome3d.model.HomePieceOfFurniture$17", (String[]) null, long1, float0, (Content) null, (Content) null, (Content) null, 0L, 0L, 0.0F, 0.0F, false, (-201.17F), 0L, sashArray0, floatArray0, "2.", true, false, false, bigDecimal0, bigDecimal0, "com.eteks.sweethome3d.model.TextStyle");
      assertEquals(2, sashArray0.length);
      assertEquals(4, floatArray0.length);
      assertNotNull(catalogDoorOrWindow0);
      assertEquals((byte)0, bigInteger0.byteValue());
      assertEquals((short)0, bigInteger0.shortValue());
      assertEquals((short)0, bigDecimal0.shortValue());
      assertEquals((byte)0, bigDecimal0.byteValue());
      assertEquals(0.0F, catalogDoorOrWindow0.getWidth(), 0.01F);
      assertEquals("com.eteks.sweethome3d.model.HomePieceOfFurniture$17", catalogDoorOrWindow0.getInformation());
      assertNull(catalogDoorOrWindow0.getColor());
      assertTrue(catalogDoorOrWindow0.isDoorOrWindow());
      assertEquals((-201.17F), catalogDoorOrWindow0.getWallThickness(), 0.01F);
      assertFalse(catalogDoorOrWindow0.isDeformable());
      assertEquals("com.eteks.sweethome3d.model.TextStyle", catalogDoorOrWindow0.getId());
      assertFalse(catalogDoorOrWindow0.isMovable());
      assertEquals(0.0F, catalogDoorOrWindow0.getWallDistance(), 0.01F);
      assertFalse(catalogDoorOrWindow0.isTexturable());
      assertFalse(catalogDoorOrWindow0.isBackFaceShown());
      assertEquals(0L, (long)catalogDoorOrWindow0.getCreationDate());
      assertEquals(0.0F, catalogDoorOrWindow0.getGrade(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isProportional());
      assertEquals(0.3926991F, catalogDoorOrWindow0.getIconYaw(), 0.01F);
      assertFalse(catalogDoorOrWindow0.isModifiable());
      assertEquals(0.0F, catalogDoorOrWindow0.getElevation(), 0.01F);
      assertEquals("com.eteks.sweethome3d.model.TextStyle", catalogDoorOrWindow0.getCurrency());
      assertEquals("2.", catalogDoorOrWindow0.getCreator());
      assertEquals(0.0F, catalogDoorOrWindow0.getDepth(), 0.01F);
      assertNull(catalogDoorOrWindow0.getStaircaseCutOutShape());
      assertTrue(catalogDoorOrWindow0.isResizable());
      assertEquals("com.eteks.sweethome3d.model.TextStyle", catalogDoorOrWindow0.getName());
      assertEquals("com.eteks.sweethome3d.model.HomePieceOfFurniture$17", catalogDoorOrWindow0.getDescription());
      assertEquals(0.0F, catalogDoorOrWindow0.getHeight(), 0.01F);
      
      float float1 = catalogDoorOrWindow0.getWallThickness();
      assertEquals(2, sashArray0.length);
      assertEquals(4, floatArray0.length);
      assertEquals((-201.17F), float1, 0.01F);
      assertEquals((byte)0, bigInteger0.byteValue());
      assertEquals((short)0, bigInteger0.shortValue());
      assertEquals((short)0, bigDecimal0.shortValue());
      assertEquals((byte)0, bigDecimal0.byteValue());
      assertEquals(0.0F, catalogDoorOrWindow0.getWidth(), 0.01F);
      assertEquals("com.eteks.sweethome3d.model.HomePieceOfFurniture$17", catalogDoorOrWindow0.getInformation());
      assertNull(catalogDoorOrWindow0.getColor());
      assertTrue(catalogDoorOrWindow0.isDoorOrWindow());
      assertEquals((-201.17F), catalogDoorOrWindow0.getWallThickness(), 0.01F);
      assertFalse(catalogDoorOrWindow0.isDeformable());
      assertEquals("com.eteks.sweethome3d.model.TextStyle", catalogDoorOrWindow0.getId());
      assertFalse(catalogDoorOrWindow0.isMovable());
      assertEquals(0.0F, catalogDoorOrWindow0.getWallDistance(), 0.01F);
      assertFalse(catalogDoorOrWindow0.isTexturable());
      assertFalse(catalogDoorOrWindow0.isBackFaceShown());
      assertEquals(0L, (long)catalogDoorOrWindow0.getCreationDate());
      assertEquals(0.0F, catalogDoorOrWindow0.getGrade(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isProportional());
      assertEquals(0.3926991F, catalogDoorOrWindow0.getIconYaw(), 0.01F);
      assertFalse(catalogDoorOrWindow0.isModifiable());
      assertEquals(0.0F, catalogDoorOrWindow0.getElevation(), 0.01F);
      assertEquals("com.eteks.sweethome3d.model.TextStyle", catalogDoorOrWindow0.getCurrency());
      assertEquals("2.", catalogDoorOrWindow0.getCreator());
      assertEquals(0.0F, catalogDoorOrWindow0.getDepth(), 0.01F);
      assertNull(catalogDoorOrWindow0.getStaircaseCutOutShape());
      assertTrue(catalogDoorOrWindow0.isResizable());
      assertEquals("com.eteks.sweethome3d.model.TextStyle", catalogDoorOrWindow0.getName());
      assertEquals("com.eteks.sweethome3d.model.HomePieceOfFurniture$17", catalogDoorOrWindow0.getDescription());
      assertEquals(0.0F, catalogDoorOrWindow0.getHeight(), 0.01F);
      
      CatalogDoorOrWindow catalogDoorOrWindow1 = new CatalogDoorOrWindow("TEXTURE", "java.version", "", (Content) null, (Content) null, (Content) null, 1.0F, 0.5F, 0.5F, 672.42474F, true, 0.0F, (-1.0F), sashArray0, floatArray0, "CRCKF", false, true, false, bigDecimal0, bigDecimal0, "");
      assertEquals(2, sashArray0.length);
      assertEquals(4, floatArray0.length);
      assertNotNull(catalogDoorOrWindow1);
      assertFalse(catalogDoorOrWindow1.equals((Object)catalogDoorOrWindow0));
      assertEquals((byte)0, bigInteger0.byteValue());
      assertEquals((short)0, bigInteger0.shortValue());
      assertEquals((short)0, bigDecimal0.shortValue());
      assertEquals((byte)0, bigDecimal0.byteValue());
      assertFalse(catalogDoorOrWindow1.isResizable());
      assertEquals(0.0F, catalogDoorOrWindow1.getWallThickness(), 0.01F);
      assertTrue(catalogDoorOrWindow1.isDoorOrWindow());
      assertNull(catalogDoorOrWindow1.getCreationDate());
      assertEquals("", catalogDoorOrWindow1.getCurrency());
      assertEquals(0.5F, catalogDoorOrWindow1.getHeight(), 0.01F);
      assertEquals("CRCKF", catalogDoorOrWindow1.getCreator());
      assertNull(catalogDoorOrWindow1.getStaircaseCutOutShape());
      assertNull(catalogDoorOrWindow1.getColor());
      assertNull(catalogDoorOrWindow1.getInformation());
      assertTrue(catalogDoorOrWindow1.isMovable());
      assertEquals(0.5F, catalogDoorOrWindow1.getDepth(), 0.01F);
      assertEquals((-1.0F), catalogDoorOrWindow1.getWallDistance(), 0.01F);
      assertFalse(catalogDoorOrWindow1.isModifiable());
      assertEquals("", catalogDoorOrWindow1.getDescription());
      assertTrue(catalogDoorOrWindow1.isProportional());
      assertEquals(0.3926991F, catalogDoorOrWindow1.getIconYaw(), 0.01F);
      assertEquals(1.0F, catalogDoorOrWindow1.getWidth(), 0.01F);
      assertFalse(catalogDoorOrWindow1.isTexturable());
      assertEquals(672.42474F, catalogDoorOrWindow1.getElevation(), 0.01F);
      assertEquals("java.version", catalogDoorOrWindow1.getName());
      assertTrue(catalogDoorOrWindow1.isDeformable());
      assertNull(catalogDoorOrWindow1.getGrade());
      assertFalse(catalogDoorOrWindow1.isBackFaceShown());
      assertEquals("TEXTURE", catalogDoorOrWindow1.getId());
      
      float float2 = catalogDoorOrWindow1.getWallDistance();
      assertEquals(2, sashArray0.length);
      assertEquals(4, floatArray0.length);
      assertNotSame(catalogDoorOrWindow1, catalogDoorOrWindow0);
      assertFalse(catalogDoorOrWindow1.equals((Object)catalogDoorOrWindow0));
      assertNotEquals(float2, float1, 0.01F);
      assertEquals((-1.0F), float2, 0.01F);
      assertEquals((byte)0, bigInteger0.byteValue());
      assertEquals((short)0, bigInteger0.shortValue());
      assertEquals((short)0, bigDecimal0.shortValue());
      assertEquals((byte)0, bigDecimal0.byteValue());
      assertFalse(catalogDoorOrWindow1.isResizable());
      assertEquals(0.0F, catalogDoorOrWindow1.getWallThickness(), 0.01F);
      assertTrue(catalogDoorOrWindow1.isDoorOrWindow());
      assertNull(catalogDoorOrWindow1.getCreationDate());
      assertEquals("", catalogDoorOrWindow1.getCurrency());
      assertEquals(0.5F, catalogDoorOrWindow1.getHeight(), 0.01F);
      assertEquals("CRCKF", catalogDoorOrWindow1.getCreator());
      assertNull(catalogDoorOrWindow1.getStaircaseCutOutShape());
      assertNull(catalogDoorOrWindow1.getColor());
      assertNull(catalogDoorOrWindow1.getInformation());
      assertTrue(catalogDoorOrWindow1.isMovable());
      assertEquals(0.5F, catalogDoorOrWindow1.getDepth(), 0.01F);
      assertEquals((-1.0F), catalogDoorOrWindow1.getWallDistance(), 0.01F);
      assertFalse(catalogDoorOrWindow1.isModifiable());
      assertEquals("", catalogDoorOrWindow1.getDescription());
      assertTrue(catalogDoorOrWindow1.isProportional());
      assertEquals(0.3926991F, catalogDoorOrWindow1.getIconYaw(), 0.01F);
      assertEquals(1.0F, catalogDoorOrWindow1.getWidth(), 0.01F);
      assertFalse(catalogDoorOrWindow1.isTexturable());
      assertEquals(672.42474F, catalogDoorOrWindow1.getElevation(), 0.01F);
      assertEquals("java.version", catalogDoorOrWindow1.getName());
      assertTrue(catalogDoorOrWindow1.isDeformable());
      assertNull(catalogDoorOrWindow1.getGrade());
      assertFalse(catalogDoorOrWindow1.isBackFaceShown());
      assertEquals("TEXTURE", catalogDoorOrWindow1.getId());
      
      Sash[] sashArray1 = catalogDoorOrWindow0.getSashes();
      assertEquals(2, sashArray0.length);
      assertEquals(2, sashArray1.length);
      assertEquals(4, floatArray0.length);
      assertNotNull(sashArray1);
      assertNotSame(catalogDoorOrWindow0, catalogDoorOrWindow1);
      assertNotSame(sashArray0, sashArray1);
      assertNotSame(sashArray1, sashArray0);
      assertNotEquals((float)float0, (float)float1, 0.01F);
      assertNotEquals((float)float0, (float)float2, 0.01F);
      assertFalse(catalogDoorOrWindow0.equals((Object)catalogDoorOrWindow1));
      assertFalse(sashArray1.equals((Object)sashArray0));
      assertEquals((byte)0, bigInteger0.byteValue());
      assertEquals((short)0, bigInteger0.shortValue());
      assertEquals((short)0, bigDecimal0.shortValue());
      assertEquals((byte)0, bigDecimal0.byteValue());
      assertEquals(0.0F, catalogDoorOrWindow0.getWidth(), 0.01F);
      assertEquals("com.eteks.sweethome3d.model.HomePieceOfFurniture$17", catalogDoorOrWindow0.getInformation());
      assertNull(catalogDoorOrWindow0.getColor());
      assertTrue(catalogDoorOrWindow0.isDoorOrWindow());
      assertEquals((-201.17F), catalogDoorOrWindow0.getWallThickness(), 0.01F);
      assertFalse(catalogDoorOrWindow0.isDeformable());
      assertEquals("com.eteks.sweethome3d.model.TextStyle", catalogDoorOrWindow0.getId());
      assertFalse(catalogDoorOrWindow0.isMovable());
      assertEquals(0.0F, catalogDoorOrWindow0.getWallDistance(), 0.01F);
      assertFalse(catalogDoorOrWindow0.isTexturable());
      assertFalse(catalogDoorOrWindow0.isBackFaceShown());
      assertEquals(0L, (long)catalogDoorOrWindow0.getCreationDate());
      assertEquals(0.0F, catalogDoorOrWindow0.getGrade(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isProportional());
      assertEquals(0.3926991F, catalogDoorOrWindow0.getIconYaw(), 0.01F);
      assertFalse(catalogDoorOrWindow0.isModifiable());
      assertEquals(0.0F, catalogDoorOrWindow0.getElevation(), 0.01F);
      assertEquals("com.eteks.sweethome3d.model.TextStyle", catalogDoorOrWindow0.getCurrency());
      assertEquals("2.", catalogDoorOrWindow0.getCreator());
      assertEquals(0.0F, catalogDoorOrWindow0.getDepth(), 0.01F);
      assertNull(catalogDoorOrWindow0.getStaircaseCutOutShape());
      assertTrue(catalogDoorOrWindow0.isResizable());
      assertEquals("com.eteks.sweethome3d.model.TextStyle", catalogDoorOrWindow0.getName());
      assertEquals("com.eteks.sweethome3d.model.HomePieceOfFurniture$17", catalogDoorOrWindow0.getDescription());
      assertEquals(0.0F, catalogDoorOrWindow0.getHeight(), 0.01F);
      
      HomeDoorOrWindow homeDoorOrWindow0 = new HomeDoorOrWindow(catalogDoorOrWindow1);
      assertEquals(2, sashArray0.length);
      assertEquals(4, floatArray0.length);
      assertNotNull(homeDoorOrWindow0);
      assertFalse(sashArray0.equals((Object)sashArray1));
      assertFalse(catalogDoorOrWindow1.equals((Object)catalogDoorOrWindow0));
      assertEquals((byte)0, bigInteger0.byteValue());
      assertEquals((short)0, bigInteger0.shortValue());
      assertEquals((short)0, bigDecimal0.shortValue());
      assertEquals((byte)0, bigDecimal0.byteValue());
      assertFalse(catalogDoorOrWindow1.isResizable());
      assertEquals(0.0F, catalogDoorOrWindow1.getWallThickness(), 0.01F);
      assertTrue(catalogDoorOrWindow1.isDoorOrWindow());
      assertNull(catalogDoorOrWindow1.getCreationDate());
      assertEquals("", catalogDoorOrWindow1.getCurrency());
      assertEquals(0.5F, catalogDoorOrWindow1.getHeight(), 0.01F);
      assertEquals("CRCKF", catalogDoorOrWindow1.getCreator());
      assertNull(catalogDoorOrWindow1.getStaircaseCutOutShape());
      assertNull(catalogDoorOrWindow1.getColor());
      assertNull(catalogDoorOrWindow1.getInformation());
      assertTrue(catalogDoorOrWindow1.isMovable());
      assertEquals(0.5F, catalogDoorOrWindow1.getDepth(), 0.01F);
      assertEquals((-1.0F), catalogDoorOrWindow1.getWallDistance(), 0.01F);
      assertFalse(catalogDoorOrWindow1.isModifiable());
      assertEquals("", catalogDoorOrWindow1.getDescription());
      assertTrue(catalogDoorOrWindow1.isProportional());
      assertEquals(0.3926991F, catalogDoorOrWindow1.getIconYaw(), 0.01F);
      assertEquals(1.0F, catalogDoorOrWindow1.getWidth(), 0.01F);
      assertFalse(catalogDoorOrWindow1.isTexturable());
      assertEquals(672.42474F, catalogDoorOrWindow1.getElevation(), 0.01F);
      assertEquals("java.version", catalogDoorOrWindow1.getName());
      assertTrue(catalogDoorOrWindow1.isDeformable());
      assertNull(catalogDoorOrWindow1.getGrade());
      assertFalse(catalogDoorOrWindow1.isBackFaceShown());
      assertEquals("TEXTURE", catalogDoorOrWindow1.getId());
      assertTrue(homeDoorOrWindow0.isDoorOrWindow());
      assertTrue(homeDoorOrWindow0.isMovable());
      assertEquals((-1.0F), homeDoorOrWindow0.getWallDistance(), 0.01F);
      assertEquals(0.5F, homeDoorOrWindow0.getDepth(), 0.01F);
      assertFalse(homeDoorOrWindow0.isResizable());
      assertEquals(0.0F, homeDoorOrWindow0.getNameAngle(), 0.01F);
      assertNull(homeDoorOrWindow0.getShininess());
      assertNull(homeDoorOrWindow0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeDoorOrWindow0.getNameYOffset(), 0.01F);
      assertEquals(0.5F, homeDoorOrWindow0.getHeight(), 0.01F);
      assertEquals("", homeDoorOrWindow0.getCurrency());
      assertEquals("TEXTURE", homeDoorOrWindow0.getCatalogId());
      assertFalse(homeDoorOrWindow0.isBackFaceShown());
      assertEquals(672.42474F, homeDoorOrWindow0.getElevation(), 0.01F);
      assertEquals(0.25F, homeDoorOrWindow0.getY(), 0.01F);
      assertNull(homeDoorOrWindow0.getColor());
      assertFalse(homeDoorOrWindow0.isNameVisible());
      assertEquals(0.5F, homeDoorOrWindow0.getX(), 0.01F);
      assertFalse(homeDoorOrWindow0.isModelMirrored());
      assertTrue(homeDoorOrWindow0.isVisible());
      assertFalse(homeDoorOrWindow0.isBoundToWall());
      assertTrue(homeDoorOrWindow0.isDeformable());
      assertEquals(672.42474F, homeDoorOrWindow0.getGroundElevation(), 0.01F);
      assertEquals("java.version", homeDoorOrWindow0.getName());
      assertEquals(0.0F, homeDoorOrWindow0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getAngle(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getWallThickness(), 0.01F);
      assertFalse(homeDoorOrWindow0.isTexturable());
      assertEquals("", homeDoorOrWindow0.getDescription());
      assertEquals(1.0F, homeDoorOrWindow0.getWidth(), 0.01F);
      
      HomeDoorOrWindow homeDoorOrWindow1 = homeDoorOrWindow0.clone();
      assertEquals(2, sashArray0.length);
      assertEquals(4, floatArray0.length);
      assertNotNull(homeDoorOrWindow1);
      assertNotSame(sashArray0, sashArray1);
      assertNotSame(catalogDoorOrWindow1, catalogDoorOrWindow0);
      assertNotSame(homeDoorOrWindow0, homeDoorOrWindow1);
      assertNotSame(homeDoorOrWindow1, homeDoorOrWindow0);
      assertFalse(sashArray0.equals((Object)sashArray1));
      assertFalse(catalogDoorOrWindow1.equals((Object)catalogDoorOrWindow0));
      assertFalse(homeDoorOrWindow1.equals((Object)homeDoorOrWindow0));
      assertEquals((byte)0, bigInteger0.byteValue());
      assertEquals((short)0, bigInteger0.shortValue());
      assertEquals((short)0, bigDecimal0.shortValue());
      assertEquals((byte)0, bigDecimal0.byteValue());
      assertFalse(catalogDoorOrWindow1.isResizable());
      assertEquals(0.0F, catalogDoorOrWindow1.getWallThickness(), 0.01F);
      assertTrue(catalogDoorOrWindow1.isDoorOrWindow());
      assertNull(catalogDoorOrWindow1.getCreationDate());
      assertEquals("", catalogDoorOrWindow1.getCurrency());
      assertEquals(0.5F, catalogDoorOrWindow1.getHeight(), 0.01F);
      assertEquals("CRCKF", catalogDoorOrWindow1.getCreator());
      assertNull(catalogDoorOrWindow1.getStaircaseCutOutShape());
      assertNull(catalogDoorOrWindow1.getColor());
      assertNull(catalogDoorOrWindow1.getInformation());
      assertTrue(catalogDoorOrWindow1.isMovable());
      assertEquals(0.5F, catalogDoorOrWindow1.getDepth(), 0.01F);
      assertEquals((-1.0F), catalogDoorOrWindow1.getWallDistance(), 0.01F);
      assertFalse(catalogDoorOrWindow1.isModifiable());
      assertEquals("", catalogDoorOrWindow1.getDescription());
      assertTrue(catalogDoorOrWindow1.isProportional());
      assertEquals(0.3926991F, catalogDoorOrWindow1.getIconYaw(), 0.01F);
      assertEquals(1.0F, catalogDoorOrWindow1.getWidth(), 0.01F);
      assertFalse(catalogDoorOrWindow1.isTexturable());
      assertEquals(672.42474F, catalogDoorOrWindow1.getElevation(), 0.01F);
      assertEquals("java.version", catalogDoorOrWindow1.getName());
      assertTrue(catalogDoorOrWindow1.isDeformable());
      assertNull(catalogDoorOrWindow1.getGrade());
      assertFalse(catalogDoorOrWindow1.isBackFaceShown());
      assertEquals("TEXTURE", catalogDoorOrWindow1.getId());
      assertTrue(homeDoorOrWindow0.isDoorOrWindow());
      assertTrue(homeDoorOrWindow0.isMovable());
      assertEquals((-1.0F), homeDoorOrWindow0.getWallDistance(), 0.01F);
      assertEquals(0.5F, homeDoorOrWindow0.getDepth(), 0.01F);
      assertFalse(homeDoorOrWindow0.isResizable());
      assertEquals(0.0F, homeDoorOrWindow0.getNameAngle(), 0.01F);
      assertNull(homeDoorOrWindow0.getShininess());
      assertNull(homeDoorOrWindow0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeDoorOrWindow0.getNameYOffset(), 0.01F);
      assertEquals(0.5F, homeDoorOrWindow0.getHeight(), 0.01F);
      assertEquals("", homeDoorOrWindow0.getCurrency());
      assertEquals("TEXTURE", homeDoorOrWindow0.getCatalogId());
      assertFalse(homeDoorOrWindow0.isBackFaceShown());
      assertEquals(672.42474F, homeDoorOrWindow0.getElevation(), 0.01F);
      assertEquals(0.25F, homeDoorOrWindow0.getY(), 0.01F);
      assertNull(homeDoorOrWindow0.getColor());
      assertFalse(homeDoorOrWindow0.isNameVisible());
      assertEquals(0.5F, homeDoorOrWindow0.getX(), 0.01F);
      assertFalse(homeDoorOrWindow0.isModelMirrored());
      assertTrue(homeDoorOrWindow0.isVisible());
      assertFalse(homeDoorOrWindow0.isBoundToWall());
      assertTrue(homeDoorOrWindow0.isDeformable());
      assertEquals(672.42474F, homeDoorOrWindow0.getGroundElevation(), 0.01F);
      assertEquals("java.version", homeDoorOrWindow0.getName());
      assertEquals(0.0F, homeDoorOrWindow0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getAngle(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getWallThickness(), 0.01F);
      assertFalse(homeDoorOrWindow0.isTexturable());
      assertEquals("", homeDoorOrWindow0.getDescription());
      assertEquals(1.0F, homeDoorOrWindow0.getWidth(), 0.01F);
      assertFalse(homeDoorOrWindow1.isTexturable());
      assertEquals(0.0F, homeDoorOrWindow1.getAngle(), 0.01F);
      assertEquals(0.5F, homeDoorOrWindow1.getX(), 0.01F);
      assertEquals(0.25F, homeDoorOrWindow1.getY(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow1.getWallThickness(), 0.01F);
      assertEquals("", homeDoorOrWindow1.getDescription());
      assertEquals(0.5F, homeDoorOrWindow1.getDepth(), 0.01F);
      assertEquals("", homeDoorOrWindow1.getCurrency());
      assertEquals(0.0F, homeDoorOrWindow1.getNameXOffset(), 0.01F);
      assertTrue(homeDoorOrWindow1.isDoorOrWindow());
      assertTrue(homeDoorOrWindow1.isMovable());
      assertTrue(homeDoorOrWindow1.isDeformable());
      assertNull(homeDoorOrWindow1.getShininess());
      assertTrue(homeDoorOrWindow1.isVisible());
      assertNull(homeDoorOrWindow1.getStaircaseCutOutShape());
      assertFalse(homeDoorOrWindow1.isResizable());
      assertEquals(0.0F, homeDoorOrWindow1.getNameAngle(), 0.01F);
      assertEquals(0.5F, homeDoorOrWindow1.getHeight(), 0.01F);
      assertEquals((-1.0F), homeDoorOrWindow1.getWallDistance(), 0.01F);
      assertEquals("java.version", homeDoorOrWindow1.getName());
      assertEquals(1.0F, homeDoorOrWindow1.getWidth(), 0.01F);
      assertEquals(672.42474F, homeDoorOrWindow1.getGroundElevation(), 0.01F);
      assertEquals("TEXTURE", homeDoorOrWindow1.getCatalogId());
      assertFalse(homeDoorOrWindow1.isNameVisible());
      assertEquals(0.0F, homeDoorOrWindow1.getNameYOffset(), 0.01F);
      assertNull(homeDoorOrWindow1.getColor());
      assertFalse(homeDoorOrWindow1.isModelMirrored());
      assertFalse(homeDoorOrWindow1.isBackFaceShown());
      assertEquals(672.42474F, homeDoorOrWindow1.getElevation(), 0.01F);
      assertFalse(homeDoorOrWindow1.isBoundToWall());
      
      boolean boolean0 = homeDoorOrWindow1.isDoorOrWindow();
      assertEquals(2, sashArray0.length);
      assertEquals(4, floatArray0.length);
      assertNotSame(sashArray0, sashArray1);
      assertNotSame(catalogDoorOrWindow1, catalogDoorOrWindow0);
      assertNotSame(homeDoorOrWindow0, homeDoorOrWindow1);
      assertNotSame(homeDoorOrWindow1, homeDoorOrWindow0);
      assertFalse(sashArray0.equals((Object)sashArray1));
      assertFalse(catalogDoorOrWindow1.equals((Object)catalogDoorOrWindow0));
      assertFalse(homeDoorOrWindow0.equals((Object)homeDoorOrWindow1));
      assertFalse(homeDoorOrWindow1.equals((Object)homeDoorOrWindow0));
      assertTrue(boolean0);
      assertEquals((byte)0, bigInteger0.byteValue());
      assertEquals((short)0, bigInteger0.shortValue());
      assertEquals((short)0, bigDecimal0.shortValue());
      assertEquals((byte)0, bigDecimal0.byteValue());
      assertFalse(catalogDoorOrWindow1.isResizable());
      assertEquals(0.0F, catalogDoorOrWindow1.getWallThickness(), 0.01F);
      assertTrue(catalogDoorOrWindow1.isDoorOrWindow());
      assertNull(catalogDoorOrWindow1.getCreationDate());
      assertEquals("", catalogDoorOrWindow1.getCurrency());
      assertEquals(0.5F, catalogDoorOrWindow1.getHeight(), 0.01F);
      assertEquals("CRCKF", catalogDoorOrWindow1.getCreator());
      assertNull(catalogDoorOrWindow1.getStaircaseCutOutShape());
      assertNull(catalogDoorOrWindow1.getColor());
      assertNull(catalogDoorOrWindow1.getInformation());
      assertTrue(catalogDoorOrWindow1.isMovable());
      assertEquals(0.5F, catalogDoorOrWindow1.getDepth(), 0.01F);
      assertEquals((-1.0F), catalogDoorOrWindow1.getWallDistance(), 0.01F);
      assertFalse(catalogDoorOrWindow1.isModifiable());
      assertEquals("", catalogDoorOrWindow1.getDescription());
      assertTrue(catalogDoorOrWindow1.isProportional());
      assertEquals(0.3926991F, catalogDoorOrWindow1.getIconYaw(), 0.01F);
      assertEquals(1.0F, catalogDoorOrWindow1.getWidth(), 0.01F);
      assertFalse(catalogDoorOrWindow1.isTexturable());
      assertEquals(672.42474F, catalogDoorOrWindow1.getElevation(), 0.01F);
      assertEquals("java.version", catalogDoorOrWindow1.getName());
      assertTrue(catalogDoorOrWindow1.isDeformable());
      assertNull(catalogDoorOrWindow1.getGrade());
      assertFalse(catalogDoorOrWindow1.isBackFaceShown());
      assertEquals("TEXTURE", catalogDoorOrWindow1.getId());
      assertTrue(homeDoorOrWindow0.isDoorOrWindow());
      assertTrue(homeDoorOrWindow0.isMovable());
      assertEquals((-1.0F), homeDoorOrWindow0.getWallDistance(), 0.01F);
      assertEquals(0.5F, homeDoorOrWindow0.getDepth(), 0.01F);
      assertFalse(homeDoorOrWindow0.isResizable());
      assertEquals(0.0F, homeDoorOrWindow0.getNameAngle(), 0.01F);
      assertNull(homeDoorOrWindow0.getShininess());
      assertNull(homeDoorOrWindow0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeDoorOrWindow0.getNameYOffset(), 0.01F);
      assertEquals(0.5F, homeDoorOrWindow0.getHeight(), 0.01F);
      assertEquals("", homeDoorOrWindow0.getCurrency());
      assertEquals("TEXTURE", homeDoorOrWindow0.getCatalogId());
      assertFalse(homeDoorOrWindow0.isBackFaceShown());
      assertEquals(672.42474F, homeDoorOrWindow0.getElevation(), 0.01F);
      assertEquals(0.25F, homeDoorOrWindow0.getY(), 0.01F);
      assertNull(homeDoorOrWindow0.getColor());
      assertFalse(homeDoorOrWindow0.isNameVisible());
      assertEquals(0.5F, homeDoorOrWindow0.getX(), 0.01F);
      assertFalse(homeDoorOrWindow0.isModelMirrored());
      assertTrue(homeDoorOrWindow0.isVisible());
      assertFalse(homeDoorOrWindow0.isBoundToWall());
      assertTrue(homeDoorOrWindow0.isDeformable());
      assertEquals(672.42474F, homeDoorOrWindow0.getGroundElevation(), 0.01F);
      assertEquals("java.version", homeDoorOrWindow0.getName());
      assertEquals(0.0F, homeDoorOrWindow0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getAngle(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getWallThickness(), 0.01F);
      assertFalse(homeDoorOrWindow0.isTexturable());
      assertEquals("", homeDoorOrWindow0.getDescription());
      assertEquals(1.0F, homeDoorOrWindow0.getWidth(), 0.01F);
      assertFalse(homeDoorOrWindow1.isTexturable());
      assertEquals(0.0F, homeDoorOrWindow1.getAngle(), 0.01F);
      assertEquals(0.5F, homeDoorOrWindow1.getX(), 0.01F);
      assertEquals(0.25F, homeDoorOrWindow1.getY(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow1.getWallThickness(), 0.01F);
      assertEquals("", homeDoorOrWindow1.getDescription());
      assertEquals(0.5F, homeDoorOrWindow1.getDepth(), 0.01F);
      assertEquals("", homeDoorOrWindow1.getCurrency());
      assertEquals(0.0F, homeDoorOrWindow1.getNameXOffset(), 0.01F);
      assertTrue(homeDoorOrWindow1.isDoorOrWindow());
      assertTrue(homeDoorOrWindow1.isMovable());
      assertTrue(homeDoorOrWindow1.isDeformable());
      assertNull(homeDoorOrWindow1.getShininess());
      assertTrue(homeDoorOrWindow1.isVisible());
      assertNull(homeDoorOrWindow1.getStaircaseCutOutShape());
      assertFalse(homeDoorOrWindow1.isResizable());
      assertEquals(0.0F, homeDoorOrWindow1.getNameAngle(), 0.01F);
      assertEquals(0.5F, homeDoorOrWindow1.getHeight(), 0.01F);
      assertEquals((-1.0F), homeDoorOrWindow1.getWallDistance(), 0.01F);
      assertEquals("java.version", homeDoorOrWindow1.getName());
      assertEquals(1.0F, homeDoorOrWindow1.getWidth(), 0.01F);
      assertEquals(672.42474F, homeDoorOrWindow1.getGroundElevation(), 0.01F);
      assertEquals("TEXTURE", homeDoorOrWindow1.getCatalogId());
      assertFalse(homeDoorOrWindow1.isNameVisible());
      assertEquals(0.0F, homeDoorOrWindow1.getNameYOffset(), 0.01F);
      assertNull(homeDoorOrWindow1.getColor());
      assertFalse(homeDoorOrWindow1.isModelMirrored());
      assertFalse(homeDoorOrWindow1.isBackFaceShown());
      assertEquals(672.42474F, homeDoorOrWindow1.getElevation(), 0.01F);
      assertFalse(homeDoorOrWindow1.isBoundToWall());
  }

  @Test(timeout = 4000)
  public void test207()  throws Throwable  {
      Integer integer0 = new Integer(1431655742);
      assertNotNull(integer0);
      assertEquals(1431655742, (int)integer0);
      
      Light light0 = mock(Light.class, new ViolatedAssumptionAnswer());
      doReturn((LightSource[]) null).when(light0).getLightSources();
      doReturn((Integer) null).when(light0).getColor();
      doReturn((String) null).when(light0).getCurrency();
      doReturn(0.0F).when(light0).getDepth();
      doReturn((String) null).when(light0).getDescription();
      doReturn(0.0F).when(light0).getElevation();
      doReturn(0.0F).when(light0).getHeight();
      doReturn((Content) null).when(light0).getIcon();
      doReturn((Content) null).when(light0).getModel();
      doReturn((float[][]) null).when(light0).getModelRotation();
      doReturn((String) null).when(light0).getName();
      doReturn((Content) null).when(light0).getPlanIcon();
      doReturn((BigDecimal) null).when(light0).getPrice();
      doReturn((String) null).when(light0).getStaircaseCutOutShape();
      doReturn((BigDecimal) null).when(light0).getValueAddedTaxPercentage();
      doReturn(0.0F).when(light0).getWidth();
      doReturn(false).when(light0).isBackFaceShown();
      doReturn(false).when(light0).isDeformable();
      doReturn(false).when(light0).isDoorOrWindow();
      doReturn(false).when(light0).isMovable();
      doReturn(false).when(light0).isResizable();
      doReturn(false).when(light0).isTexturable();
      HomeLight homeLight0 = new HomeLight(light0);
      assertNotNull(homeLight0);
      assertNull(homeLight0.getShininess());
      assertNull(homeLight0.getCatalogId());
      assertFalse(homeLight0.isResizable());
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertTrue(homeLight0.isVisible());
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertNull(homeLight0.getName());
      assertFalse(homeLight0.isNameVisible());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertFalse(homeLight0.isTexturable());
      assertNull(homeLight0.getDescription());
      assertFalse(homeLight0.isDoorOrWindow());
      assertFalse(homeLight0.isBackFaceShown());
      assertNull(homeLight0.getColor());
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertFalse(homeLight0.isDeformable());
      assertFalse(homeLight0.isModelMirrored());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertFalse(homeLight0.isMovable());
      assertNull(homeLight0.getCurrency());
      
      homeLight0.setY(1431655742);
      assertNull(homeLight0.getShininess());
      assertNull(homeLight0.getCatalogId());
      assertFalse(homeLight0.isResizable());
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertTrue(homeLight0.isVisible());
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertNull(homeLight0.getName());
      assertEquals(1.43165568E9F, homeLight0.getY(), 0.01F);
      assertFalse(homeLight0.isNameVisible());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertFalse(homeLight0.isTexturable());
      assertNull(homeLight0.getDescription());
      assertFalse(homeLight0.isDoorOrWindow());
      assertFalse(homeLight0.isBackFaceShown());
      assertNull(homeLight0.getColor());
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertFalse(homeLight0.isDeformable());
      assertFalse(homeLight0.isModelMirrored());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertFalse(homeLight0.isMovable());
      assertNull(homeLight0.getCurrency());
      
      BigDecimal bigDecimal0 = homeLight0.getValueAddedTax();
      assertNull(bigDecimal0);
      assertNull(homeLight0.getShininess());
      assertNull(homeLight0.getCatalogId());
      assertFalse(homeLight0.isResizable());
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertTrue(homeLight0.isVisible());
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertNull(homeLight0.getName());
      assertEquals(1.43165568E9F, homeLight0.getY(), 0.01F);
      assertFalse(homeLight0.isNameVisible());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertFalse(homeLight0.isTexturable());
      assertNull(homeLight0.getDescription());
      assertFalse(homeLight0.isDoorOrWindow());
      assertFalse(homeLight0.isBackFaceShown());
      assertNull(homeLight0.getColor());
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertFalse(homeLight0.isDeformable());
      assertFalse(homeLight0.isModelMirrored());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertFalse(homeLight0.isMovable());
      assertNull(homeLight0.getCurrency());
      
      boolean boolean0 = homeLight0.isTopRightPointAt(1431655742, 1431655742, 3.4028235E38F);
      assertFalse(boolean0);
      assertNull(homeLight0.getShininess());
      assertNull(homeLight0.getCatalogId());
      assertFalse(homeLight0.isResizable());
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertTrue(homeLight0.isVisible());
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertNull(homeLight0.getName());
      assertEquals(1.43165568E9F, homeLight0.getY(), 0.01F);
      assertFalse(homeLight0.isNameVisible());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertFalse(homeLight0.isTexturable());
      assertNull(homeLight0.getDescription());
      assertFalse(homeLight0.isDoorOrWindow());
      assertFalse(homeLight0.isBackFaceShown());
      assertNull(homeLight0.getColor());
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertFalse(homeLight0.isDeformable());
      assertFalse(homeLight0.isModelMirrored());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertFalse(homeLight0.isMovable());
      assertNull(homeLight0.getCurrency());
      
      String string0 = homeLight0.getName();
      assertNull(string0);
      assertNull(homeLight0.getShininess());
      assertNull(homeLight0.getCatalogId());
      assertFalse(homeLight0.isResizable());
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertTrue(homeLight0.isVisible());
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertNull(homeLight0.getName());
      assertEquals(1.43165568E9F, homeLight0.getY(), 0.01F);
      assertFalse(homeLight0.isNameVisible());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertFalse(homeLight0.isTexturable());
      assertNull(homeLight0.getDescription());
      assertFalse(homeLight0.isDoorOrWindow());
      assertFalse(homeLight0.isBackFaceShown());
      assertNull(homeLight0.getColor());
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertFalse(homeLight0.isDeformable());
      assertFalse(homeLight0.isModelMirrored());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertFalse(homeLight0.isMovable());
      assertNull(homeLight0.getCurrency());
      
      Level level0 = homeLight0.getLevel();
      assertNull(level0);
      assertNull(homeLight0.getShininess());
      assertNull(homeLight0.getCatalogId());
      assertFalse(homeLight0.isResizable());
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertTrue(homeLight0.isVisible());
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertNull(homeLight0.getName());
      assertEquals(1.43165568E9F, homeLight0.getY(), 0.01F);
      assertFalse(homeLight0.isNameVisible());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertFalse(homeLight0.isTexturable());
      assertNull(homeLight0.getDescription());
      assertFalse(homeLight0.isDoorOrWindow());
      assertFalse(homeLight0.isBackFaceShown());
      assertNull(homeLight0.getColor());
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertFalse(homeLight0.isDeformable());
      assertFalse(homeLight0.isModelMirrored());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertFalse(homeLight0.isMovable());
      assertNull(homeLight0.getCurrency());
      
      homeLight0.setX(3.4028235E38F);
      assertNull(homeLight0.getShininess());
      assertNull(homeLight0.getCatalogId());
      assertEquals(3.4028235E38F, homeLight0.getX(), 0.01F);
      assertFalse(homeLight0.isResizable());
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertTrue(homeLight0.isVisible());
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertNull(homeLight0.getName());
      assertEquals(1.43165568E9F, homeLight0.getY(), 0.01F);
      assertFalse(homeLight0.isNameVisible());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertFalse(homeLight0.isTexturable());
      assertNull(homeLight0.getDescription());
      assertFalse(homeLight0.isDoorOrWindow());
      assertFalse(homeLight0.isBackFaceShown());
      assertNull(homeLight0.getColor());
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertFalse(homeLight0.isDeformable());
      assertFalse(homeLight0.isModelMirrored());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertFalse(homeLight0.isMovable());
      assertNull(homeLight0.getCurrency());
      
      BigDecimal bigDecimal1 = homeLight0.getValueAddedTax();
      assertNull(bigDecimal1);
      assertNull(homeLight0.getShininess());
      assertNull(homeLight0.getCatalogId());
      assertEquals(3.4028235E38F, homeLight0.getX(), 0.01F);
      assertFalse(homeLight0.isResizable());
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertTrue(homeLight0.isVisible());
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertNull(homeLight0.getName());
      assertEquals(1.43165568E9F, homeLight0.getY(), 0.01F);
      assertFalse(homeLight0.isNameVisible());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertFalse(homeLight0.isTexturable());
      assertNull(homeLight0.getDescription());
      assertFalse(homeLight0.isDoorOrWindow());
      assertFalse(homeLight0.isBackFaceShown());
      assertNull(homeLight0.getColor());
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertFalse(homeLight0.isDeformable());
      assertFalse(homeLight0.isModelMirrored());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertFalse(homeLight0.isMovable());
      assertNull(homeLight0.getCurrency());
      
      Level level1 = homeLight0.getLevel();
      assertNull(level1);
      assertNull(homeLight0.getShininess());
      assertNull(homeLight0.getCatalogId());
      assertEquals(3.4028235E38F, homeLight0.getX(), 0.01F);
      assertFalse(homeLight0.isResizable());
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertTrue(homeLight0.isVisible());
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertNull(homeLight0.getName());
      assertEquals(1.43165568E9F, homeLight0.getY(), 0.01F);
      assertFalse(homeLight0.isNameVisible());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertFalse(homeLight0.isTexturable());
      assertNull(homeLight0.getDescription());
      assertFalse(homeLight0.isDoorOrWindow());
      assertFalse(homeLight0.isBackFaceShown());
      assertNull(homeLight0.getColor());
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertFalse(homeLight0.isDeformable());
      assertFalse(homeLight0.isModelMirrored());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertFalse(homeLight0.isMovable());
      assertNull(homeLight0.getCurrency());
      
      homeLight0.setName("DOOR_OR_WINDOW");
      assertNull(homeLight0.getShininess());
      assertNull(homeLight0.getCatalogId());
      assertEquals(3.4028235E38F, homeLight0.getX(), 0.01F);
      assertFalse(homeLight0.isResizable());
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertTrue(homeLight0.isVisible());
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals(1.43165568E9F, homeLight0.getY(), 0.01F);
      assertFalse(homeLight0.isNameVisible());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertFalse(homeLight0.isTexturable());
      assertNull(homeLight0.getDescription());
      assertFalse(homeLight0.isDoorOrWindow());
      assertEquals("DOOR_OR_WINDOW", homeLight0.getName());
      assertFalse(homeLight0.isBackFaceShown());
      assertNull(homeLight0.getColor());
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertFalse(homeLight0.isDeformable());
      assertFalse(homeLight0.isModelMirrored());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertFalse(homeLight0.isMovable());
      assertNull(homeLight0.getCurrency());
      
      boolean boolean1 = homeLight0.isNameVisible();
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      assertNull(homeLight0.getShininess());
      assertNull(homeLight0.getCatalogId());
      assertEquals(3.4028235E38F, homeLight0.getX(), 0.01F);
      assertFalse(homeLight0.isResizable());
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertTrue(homeLight0.isVisible());
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals(1.43165568E9F, homeLight0.getY(), 0.01F);
      assertFalse(homeLight0.isNameVisible());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertFalse(homeLight0.isTexturable());
      assertNull(homeLight0.getDescription());
      assertFalse(homeLight0.isDoorOrWindow());
      assertEquals("DOOR_OR_WINDOW", homeLight0.getName());
      assertFalse(homeLight0.isBackFaceShown());
      assertNull(homeLight0.getColor());
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertFalse(homeLight0.isDeformable());
      assertFalse(homeLight0.isModelMirrored());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertFalse(homeLight0.isMovable());
      assertNull(homeLight0.getCurrency());
      
      HomeLight homeLight1 = homeLight0.clone();
      assertNotNull(homeLight1);
      assertNotSame(homeLight0, homeLight1);
      assertNotSame(homeLight1, homeLight0);
      assertFalse(homeLight1.equals((Object)homeLight0));
      assertNull(homeLight0.getShininess());
      assertNull(homeLight0.getCatalogId());
      assertEquals(3.4028235E38F, homeLight0.getX(), 0.01F);
      assertFalse(homeLight0.isResizable());
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertTrue(homeLight0.isVisible());
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals(1.43165568E9F, homeLight0.getY(), 0.01F);
      assertFalse(homeLight0.isNameVisible());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertFalse(homeLight0.isTexturable());
      assertNull(homeLight0.getDescription());
      assertFalse(homeLight0.isDoorOrWindow());
      assertEquals("DOOR_OR_WINDOW", homeLight0.getName());
      assertFalse(homeLight0.isBackFaceShown());
      assertNull(homeLight0.getColor());
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertFalse(homeLight0.isDeformable());
      assertFalse(homeLight0.isModelMirrored());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertFalse(homeLight0.isMovable());
      assertNull(homeLight0.getCurrency());
      assertEquals(0.0F, homeLight1.getElevation(), 0.01F);
      assertEquals(0.0F, homeLight1.getAngle(), 0.01F);
      assertEquals(0.0F, homeLight1.getNameXOffset(), 0.01F);
      assertEquals(1.43165568E9F, homeLight1.getY(), 0.01F);
      assertNull(homeLight1.getDescription());
      assertEquals(0.0F, homeLight1.getGroundElevation(), 0.01F);
      assertFalse(homeLight1.isDoorOrWindow());
      assertFalse(homeLight1.isTexturable());
      assertEquals("DOOR_OR_WINDOW", homeLight1.getName());
      assertNull(homeLight1.getCatalogId());
      assertFalse(homeLight1.isModelMirrored());
      assertNull(homeLight1.getColor());
      assertFalse(homeLight1.isNameVisible());
      assertFalse(homeLight1.isBackFaceShown());
      assertEquals(0.0F, homeLight1.getWidth(), 0.01F);
      assertEquals(0.0F, homeLight1.getHeight(), 0.01F);
      assertTrue(homeLight1.isVisible());
      assertNull(homeLight1.getCurrency());
      assertEquals(0.0F, homeLight1.getNameYOffset(), 0.01F);
      assertEquals(3.4028235E38F, homeLight1.getX(), 0.01F);
      assertNull(homeLight1.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight1.getNameAngle(), 0.01F);
      assertNull(homeLight1.getShininess());
      assertEquals(0.5F, homeLight1.getPower(), 0.01F);
      assertFalse(homeLight1.isMovable());
      assertFalse(homeLight1.isDeformable());
      assertEquals(0.0F, homeLight1.getDepth(), 0.01F);
      assertFalse(homeLight1.isResizable());
      
      homeLight1.setVisible(false);
      assertNotSame(homeLight0, homeLight1);
      assertNotSame(homeLight1, homeLight0);
      assertFalse(homeLight0.equals((Object)homeLight1));
      assertFalse(homeLight1.equals((Object)homeLight0));
      assertNull(homeLight0.getShininess());
      assertNull(homeLight0.getCatalogId());
      assertEquals(3.4028235E38F, homeLight0.getX(), 0.01F);
      assertFalse(homeLight0.isResizable());
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertTrue(homeLight0.isVisible());
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals(1.43165568E9F, homeLight0.getY(), 0.01F);
      assertFalse(homeLight0.isNameVisible());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertFalse(homeLight0.isTexturable());
      assertNull(homeLight0.getDescription());
      assertFalse(homeLight0.isDoorOrWindow());
      assertEquals("DOOR_OR_WINDOW", homeLight0.getName());
      assertFalse(homeLight0.isBackFaceShown());
      assertNull(homeLight0.getColor());
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertFalse(homeLight0.isDeformable());
      assertFalse(homeLight0.isModelMirrored());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertFalse(homeLight0.isMovable());
      assertNull(homeLight0.getCurrency());
      assertEquals(0.0F, homeLight1.getElevation(), 0.01F);
      assertEquals(0.0F, homeLight1.getAngle(), 0.01F);
      assertEquals(0.0F, homeLight1.getNameXOffset(), 0.01F);
      assertEquals(1.43165568E9F, homeLight1.getY(), 0.01F);
      assertNull(homeLight1.getDescription());
      assertEquals(0.0F, homeLight1.getGroundElevation(), 0.01F);
      assertFalse(homeLight1.isDoorOrWindow());
      assertFalse(homeLight1.isTexturable());
      assertEquals("DOOR_OR_WINDOW", homeLight1.getName());
      assertNull(homeLight1.getCatalogId());
      assertFalse(homeLight1.isModelMirrored());
      assertNull(homeLight1.getColor());
      assertFalse(homeLight1.isNameVisible());
      assertFalse(homeLight1.isBackFaceShown());
      assertEquals(0.0F, homeLight1.getWidth(), 0.01F);
      assertEquals(0.0F, homeLight1.getHeight(), 0.01F);
      assertNull(homeLight1.getCurrency());
      assertEquals(0.0F, homeLight1.getNameYOffset(), 0.01F);
      assertEquals(3.4028235E38F, homeLight1.getX(), 0.01F);
      assertNull(homeLight1.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight1.getNameAngle(), 0.01F);
      assertNull(homeLight1.getShininess());
      assertEquals(0.5F, homeLight1.getPower(), 0.01F);
      assertFalse(homeLight1.isMovable());
      assertFalse(homeLight1.isVisible());
      assertFalse(homeLight1.isDeformable());
      assertEquals(0.0F, homeLight1.getDepth(), 0.01F);
      assertFalse(homeLight1.isResizable());
      
      boolean boolean2 = homeLight1.containsPoint(1431655742, 3.4028235E38F, 0.5F);
      assertNotSame(homeLight0, homeLight1);
      assertNotSame(homeLight1, homeLight0);
      assertFalse(homeLight0.equals((Object)homeLight1));
      assertFalse(homeLight1.equals((Object)homeLight0));
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2);
      assertNull(homeLight0.getShininess());
      assertNull(homeLight0.getCatalogId());
      assertEquals(3.4028235E38F, homeLight0.getX(), 0.01F);
      assertFalse(homeLight0.isResizable());
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertTrue(homeLight0.isVisible());
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals(1.43165568E9F, homeLight0.getY(), 0.01F);
      assertFalse(homeLight0.isNameVisible());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertFalse(homeLight0.isTexturable());
      assertNull(homeLight0.getDescription());
      assertFalse(homeLight0.isDoorOrWindow());
      assertEquals("DOOR_OR_WINDOW", homeLight0.getName());
      assertFalse(homeLight0.isBackFaceShown());
      assertNull(homeLight0.getColor());
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertFalse(homeLight0.isDeformable());
      assertFalse(homeLight0.isModelMirrored());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertFalse(homeLight0.isMovable());
      assertNull(homeLight0.getCurrency());
      assertEquals(0.0F, homeLight1.getElevation(), 0.01F);
      assertEquals(0.0F, homeLight1.getAngle(), 0.01F);
      assertEquals(0.0F, homeLight1.getNameXOffset(), 0.01F);
      assertEquals(1.43165568E9F, homeLight1.getY(), 0.01F);
      assertNull(homeLight1.getDescription());
      assertEquals(0.0F, homeLight1.getGroundElevation(), 0.01F);
      assertFalse(homeLight1.isDoorOrWindow());
      assertFalse(homeLight1.isTexturable());
      assertEquals("DOOR_OR_WINDOW", homeLight1.getName());
      assertNull(homeLight1.getCatalogId());
      assertFalse(homeLight1.isModelMirrored());
      assertNull(homeLight1.getColor());
      assertFalse(homeLight1.isNameVisible());
      assertFalse(homeLight1.isBackFaceShown());
      assertEquals(0.0F, homeLight1.getWidth(), 0.01F);
      assertEquals(0.0F, homeLight1.getHeight(), 0.01F);
      assertNull(homeLight1.getCurrency());
      assertEquals(0.0F, homeLight1.getNameYOffset(), 0.01F);
      assertEquals(3.4028235E38F, homeLight1.getX(), 0.01F);
      assertNull(homeLight1.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight1.getNameAngle(), 0.01F);
      assertNull(homeLight1.getShininess());
      assertEquals(0.5F, homeLight1.getPower(), 0.01F);
      assertFalse(homeLight1.isMovable());
      assertFalse(homeLight1.isVisible());
      assertFalse(homeLight1.isDeformable());
      assertEquals(0.0F, homeLight1.getDepth(), 0.01F);
      assertFalse(homeLight1.isResizable());
      
      homeLight1.setNameYOffset(3.4028235E38F);
      assertNotSame(homeLight0, homeLight1);
      assertNotSame(homeLight1, homeLight0);
      assertFalse(homeLight0.equals((Object)homeLight1));
      assertFalse(homeLight1.equals((Object)homeLight0));
      assertNull(homeLight0.getShininess());
      assertNull(homeLight0.getCatalogId());
      assertEquals(3.4028235E38F, homeLight0.getX(), 0.01F);
      assertFalse(homeLight0.isResizable());
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertTrue(homeLight0.isVisible());
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals(1.43165568E9F, homeLight0.getY(), 0.01F);
      assertFalse(homeLight0.isNameVisible());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertFalse(homeLight0.isTexturable());
      assertNull(homeLight0.getDescription());
      assertFalse(homeLight0.isDoorOrWindow());
      assertEquals("DOOR_OR_WINDOW", homeLight0.getName());
      assertFalse(homeLight0.isBackFaceShown());
      assertNull(homeLight0.getColor());
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertFalse(homeLight0.isDeformable());
      assertFalse(homeLight0.isModelMirrored());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertFalse(homeLight0.isMovable());
      assertNull(homeLight0.getCurrency());
      assertEquals(0.0F, homeLight1.getElevation(), 0.01F);
      assertEquals(0.0F, homeLight1.getAngle(), 0.01F);
      assertEquals(0.0F, homeLight1.getNameXOffset(), 0.01F);
      assertEquals(1.43165568E9F, homeLight1.getY(), 0.01F);
      assertNull(homeLight1.getDescription());
      assertEquals(0.0F, homeLight1.getGroundElevation(), 0.01F);
      assertFalse(homeLight1.isDoorOrWindow());
      assertFalse(homeLight1.isTexturable());
      assertEquals(3.4028235E38F, homeLight1.getNameYOffset(), 0.01F);
      assertEquals("DOOR_OR_WINDOW", homeLight1.getName());
      assertNull(homeLight1.getCatalogId());
      assertFalse(homeLight1.isModelMirrored());
      assertNull(homeLight1.getColor());
      assertFalse(homeLight1.isNameVisible());
      assertFalse(homeLight1.isBackFaceShown());
      assertEquals(0.0F, homeLight1.getWidth(), 0.01F);
      assertEquals(0.0F, homeLight1.getHeight(), 0.01F);
      assertNull(homeLight1.getCurrency());
      assertEquals(3.4028235E38F, homeLight1.getX(), 0.01F);
      assertNull(homeLight1.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight1.getNameAngle(), 0.01F);
      assertNull(homeLight1.getShininess());
      assertEquals(0.5F, homeLight1.getPower(), 0.01F);
      assertFalse(homeLight1.isMovable());
      assertFalse(homeLight1.isVisible());
      assertFalse(homeLight1.isDeformable());
      assertEquals(0.0F, homeLight1.getDepth(), 0.01F);
      assertFalse(homeLight1.isResizable());
      
      Content content0 = homeLight1.getModel();
      assertNull(content0);
      assertNotSame(homeLight0, homeLight1);
      assertNotSame(homeLight1, homeLight0);
      assertFalse(homeLight0.equals((Object)homeLight1));
      assertFalse(homeLight1.equals((Object)homeLight0));
      assertNull(homeLight0.getShininess());
      assertNull(homeLight0.getCatalogId());
      assertEquals(3.4028235E38F, homeLight0.getX(), 0.01F);
      assertFalse(homeLight0.isResizable());
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertTrue(homeLight0.isVisible());
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals(1.43165568E9F, homeLight0.getY(), 0.01F);
      assertFalse(homeLight0.isNameVisible());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertFalse(homeLight0.isTexturable());
      assertNull(homeLight0.getDescription());
      assertFalse(homeLight0.isDoorOrWindow());
      assertEquals("DOOR_OR_WINDOW", homeLight0.getName());
      assertFalse(homeLight0.isBackFaceShown());
      assertNull(homeLight0.getColor());
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertFalse(homeLight0.isDeformable());
      assertFalse(homeLight0.isModelMirrored());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertFalse(homeLight0.isMovable());
      assertNull(homeLight0.getCurrency());
      assertEquals(0.0F, homeLight1.getElevation(), 0.01F);
      assertEquals(0.0F, homeLight1.getAngle(), 0.01F);
      assertEquals(0.0F, homeLight1.getNameXOffset(), 0.01F);
      assertEquals(1.43165568E9F, homeLight1.getY(), 0.01F);
      assertNull(homeLight1.getDescription());
      assertEquals(0.0F, homeLight1.getGroundElevation(), 0.01F);
      assertFalse(homeLight1.isDoorOrWindow());
      assertFalse(homeLight1.isTexturable());
      assertEquals(3.4028235E38F, homeLight1.getNameYOffset(), 0.01F);
      assertEquals("DOOR_OR_WINDOW", homeLight1.getName());
      assertNull(homeLight1.getCatalogId());
      assertFalse(homeLight1.isModelMirrored());
      assertNull(homeLight1.getColor());
      assertFalse(homeLight1.isNameVisible());
      assertFalse(homeLight1.isBackFaceShown());
      assertEquals(0.0F, homeLight1.getWidth(), 0.01F);
      assertEquals(0.0F, homeLight1.getHeight(), 0.01F);
      assertNull(homeLight1.getCurrency());
      assertEquals(3.4028235E38F, homeLight1.getX(), 0.01F);
      assertNull(homeLight1.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight1.getNameAngle(), 0.01F);
      assertNull(homeLight1.getShininess());
      assertEquals(0.5F, homeLight1.getPower(), 0.01F);
      assertFalse(homeLight1.isMovable());
      assertFalse(homeLight1.isVisible());
      assertFalse(homeLight1.isDeformable());
      assertEquals(0.0F, homeLight1.getDepth(), 0.01F);
      assertFalse(homeLight1.isResizable());
      
      float float0 = homeLight0.getX();
      assertNotSame(homeLight0, homeLight1);
      assertFalse(homeLight0.equals((Object)homeLight1));
      assertEquals(3.4028235E38F, float0, 0.01F);
      assertNull(homeLight0.getShininess());
      assertNull(homeLight0.getCatalogId());
      assertEquals(3.4028235E38F, homeLight0.getX(), 0.01F);
      assertFalse(homeLight0.isResizable());
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertTrue(homeLight0.isVisible());
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals(1.43165568E9F, homeLight0.getY(), 0.01F);
      assertFalse(homeLight0.isNameVisible());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertFalse(homeLight0.isTexturable());
      assertNull(homeLight0.getDescription());
      assertFalse(homeLight0.isDoorOrWindow());
      assertEquals("DOOR_OR_WINDOW", homeLight0.getName());
      assertFalse(homeLight0.isBackFaceShown());
      assertNull(homeLight0.getColor());
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertFalse(homeLight0.isDeformable());
      assertFalse(homeLight0.isModelMirrored());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertFalse(homeLight0.isMovable());
      assertNull(homeLight0.getCurrency());
      
      HomeTexture homeTexture0 = homeLight1.getTexture();
      assertNull(homeTexture0);
      assertNotSame(homeLight0, homeLight1);
      assertNotSame(homeLight1, homeLight0);
      assertFalse(homeLight0.equals((Object)homeLight1));
      assertFalse(homeLight1.equals((Object)homeLight0));
      assertNull(homeLight0.getShininess());
      assertNull(homeLight0.getCatalogId());
      assertEquals(3.4028235E38F, homeLight0.getX(), 0.01F);
      assertFalse(homeLight0.isResizable());
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertTrue(homeLight0.isVisible());
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals(1.43165568E9F, homeLight0.getY(), 0.01F);
      assertFalse(homeLight0.isNameVisible());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertFalse(homeLight0.isTexturable());
      assertNull(homeLight0.getDescription());
      assertFalse(homeLight0.isDoorOrWindow());
      assertEquals("DOOR_OR_WINDOW", homeLight0.getName());
      assertFalse(homeLight0.isBackFaceShown());
      assertNull(homeLight0.getColor());
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertFalse(homeLight0.isDeformable());
      assertFalse(homeLight0.isModelMirrored());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertFalse(homeLight0.isMovable());
      assertNull(homeLight0.getCurrency());
      assertEquals(0.0F, homeLight1.getElevation(), 0.01F);
      assertEquals(0.0F, homeLight1.getAngle(), 0.01F);
      assertEquals(0.0F, homeLight1.getNameXOffset(), 0.01F);
      assertEquals(1.43165568E9F, homeLight1.getY(), 0.01F);
      assertNull(homeLight1.getDescription());
      assertEquals(0.0F, homeLight1.getGroundElevation(), 0.01F);
      assertFalse(homeLight1.isDoorOrWindow());
      assertFalse(homeLight1.isTexturable());
      assertEquals(3.4028235E38F, homeLight1.getNameYOffset(), 0.01F);
      assertEquals("DOOR_OR_WINDOW", homeLight1.getName());
      assertNull(homeLight1.getCatalogId());
      assertFalse(homeLight1.isModelMirrored());
      assertNull(homeLight1.getColor());
      assertFalse(homeLight1.isNameVisible());
      assertFalse(homeLight1.isBackFaceShown());
      assertEquals(0.0F, homeLight1.getWidth(), 0.01F);
      assertEquals(0.0F, homeLight1.getHeight(), 0.01F);
      assertNull(homeLight1.getCurrency());
      assertEquals(3.4028235E38F, homeLight1.getX(), 0.01F);
      assertNull(homeLight1.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight1.getNameAngle(), 0.01F);
      assertNull(homeLight1.getShininess());
      assertEquals(0.5F, homeLight1.getPower(), 0.01F);
      assertFalse(homeLight1.isMovable());
      assertFalse(homeLight1.isVisible());
      assertFalse(homeLight1.isDeformable());
      assertEquals(0.0F, homeLight1.getDepth(), 0.01F);
      assertFalse(homeLight1.isResizable());
  }

  @Test(timeout = 4000)
  public void test208()  throws Throwable  {
      Integer integer0 = new Integer(1431655765);
      assertNotNull(integer0);
      assertEquals(1431655765, (int)integer0);
      
      LightSource lightSource0 = new LightSource(1431655765, (-3203), (-1695.24F), (-3203));
      assertNotNull(lightSource0);
      assertNull(lightSource0.getDiameter());
      assertEquals(1.43165581E9F, lightSource0.getX(), 0.01F);
      assertEquals((-3203), lightSource0.getColor());
      assertEquals((-3203.0F), lightSource0.getY(), 0.01F);
      assertEquals((-1695.24F), lightSource0.getZ(), 0.01F);
      
      Integer integer1 = Integer.valueOf(21);
      assertNotNull(integer1);
      assertFalse(integer1.equals((Object)integer0));
      assertEquals(21, (int)integer1);
      
      Light light0 = mock(Light.class, new ViolatedAssumptionAnswer());
      doReturn((LightSource[]) null).when(light0).getLightSources();
      doReturn((Integer) null).when(light0).getColor();
      doReturn((String) null).when(light0).getCurrency();
      doReturn(0.0F).when(light0).getDepth();
      doReturn((String) null).when(light0).getDescription();
      doReturn(0.0F).when(light0).getElevation();
      doReturn(0.0F).when(light0).getHeight();
      doReturn((Content) null).when(light0).getIcon();
      doReturn((Content) null).when(light0).getModel();
      doReturn((float[][]) null).when(light0).getModelRotation();
      doReturn((String) null).when(light0).getName();
      doReturn((Content) null).when(light0).getPlanIcon();
      doReturn((BigDecimal) null).when(light0).getPrice();
      doReturn((String) null).when(light0).getStaircaseCutOutShape();
      doReturn((BigDecimal) null).when(light0).getValueAddedTaxPercentage();
      doReturn(0.0F).when(light0).getWidth();
      doReturn(false).when(light0).isBackFaceShown();
      doReturn(false).when(light0).isDeformable();
      doReturn(false).when(light0).isDoorOrWindow();
      doReturn(false).when(light0).isMovable();
      doReturn(false).when(light0).isResizable();
      doReturn(false).when(light0).isTexturable();
      BigInteger bigInteger0 = BigInteger.ZERO;
      assertNotNull(bigInteger0);
      assertEquals((short)0, bigInteger0.shortValue());
      assertEquals((byte)0, bigInteger0.byteValue());
      
      HomeLight homeLight0 = new HomeLight(light0);
      assertNotNull(homeLight0);
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertFalse(homeLight0.isNameVisible());
      assertNull(homeLight0.getColor());
      assertFalse(homeLight0.isBackFaceShown());
      assertFalse(homeLight0.isModelMirrored());
      assertTrue(homeLight0.isVisible());
      assertFalse(homeLight0.isDeformable());
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertFalse(homeLight0.isMovable());
      assertNull(homeLight0.getCurrency());
      assertNull(homeLight0.getName());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertNull(homeLight0.getCatalogId());
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertNull(homeLight0.getShininess());
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertFalse(homeLight0.isResizable());
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertFalse(homeLight0.isTexturable());
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      assertNull(homeLight0.getDescription());
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      
      homeLight0.setNameYOffset(0);
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertFalse(homeLight0.isNameVisible());
      assertNull(homeLight0.getColor());
      assertFalse(homeLight0.isBackFaceShown());
      assertFalse(homeLight0.isModelMirrored());
      assertTrue(homeLight0.isVisible());
      assertFalse(homeLight0.isDeformable());
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertFalse(homeLight0.isMovable());
      assertNull(homeLight0.getCurrency());
      assertNull(homeLight0.getName());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertNull(homeLight0.getCatalogId());
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertNull(homeLight0.getShininess());
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertFalse(homeLight0.isResizable());
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertFalse(homeLight0.isTexturable());
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      assertNull(homeLight0.getDescription());
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      
      HomeLight homeLight1 = homeLight0.clone();
      assertNotNull(homeLight1);
      assertNotSame(homeLight0, homeLight1);
      assertNotSame(homeLight1, homeLight0);
      assertFalse(homeLight1.equals((Object)homeLight0));
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertFalse(homeLight0.isNameVisible());
      assertNull(homeLight0.getColor());
      assertFalse(homeLight0.isBackFaceShown());
      assertFalse(homeLight0.isModelMirrored());
      assertTrue(homeLight0.isVisible());
      assertFalse(homeLight0.isDeformable());
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertFalse(homeLight0.isMovable());
      assertNull(homeLight0.getCurrency());
      assertNull(homeLight0.getName());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertNull(homeLight0.getCatalogId());
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertNull(homeLight0.getShininess());
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertFalse(homeLight0.isResizable());
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertFalse(homeLight0.isTexturable());
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      assertNull(homeLight0.getDescription());
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertEquals(0.0F, homeLight1.getHeight(), 0.01F);
      assertFalse(homeLight1.isResizable());
      assertEquals(0.0F, homeLight1.getNameYOffset(), 0.01F);
      assertNull(homeLight1.getShininess());
      assertTrue(homeLight1.isVisible());
      assertNull(homeLight1.getCatalogId());
      assertFalse(homeLight1.isModelMirrored());
      assertNull(homeLight1.getDescription());
      assertEquals(0.0F, homeLight1.getWidth(), 0.01F);
      assertFalse(homeLight1.isBackFaceShown());
      assertNull(homeLight1.getName());
      assertFalse(homeLight1.isNameVisible());
      assertFalse(homeLight1.isTexturable());
      assertEquals(0.0F, homeLight1.getAngle(), 0.01F);
      assertEquals(0.0F, homeLight1.getElevation(), 0.01F);
      assertFalse(homeLight1.isDoorOrWindow());
      assertEquals(0.0F, homeLight1.getY(), 0.01F);
      assertEquals(0.0F, homeLight1.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeLight1.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight1.getX(), 0.01F);
      assertNull(homeLight1.getColor());
      assertEquals(0.5F, homeLight1.getPower(), 0.01F);
      assertEquals(0.0F, homeLight1.getDepth(), 0.01F);
      assertNull(homeLight1.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight1.getNameAngle(), 0.01F);
      assertFalse(homeLight1.isDeformable());
      assertNull(homeLight1.getCurrency());
      assertFalse(homeLight1.isMovable());
      
      homeLight0.setDescription("");
      assertNotSame(homeLight0, homeLight1);
      assertFalse(homeLight0.equals((Object)homeLight1));
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertFalse(homeLight0.isNameVisible());
      assertNull(homeLight0.getColor());
      assertFalse(homeLight0.isBackFaceShown());
      assertFalse(homeLight0.isModelMirrored());
      assertTrue(homeLight0.isVisible());
      assertFalse(homeLight0.isDeformable());
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertFalse(homeLight0.isMovable());
      assertNull(homeLight0.getCurrency());
      assertNull(homeLight0.getName());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertNull(homeLight0.getCatalogId());
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertNull(homeLight0.getShininess());
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertFalse(homeLight0.isResizable());
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertFalse(homeLight0.isTexturable());
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      assertEquals("", homeLight0.getDescription());
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      
      String string0 = homeLight0.getDescription();
      assertNotNull(string0);
      assertNotSame(homeLight0, homeLight1);
      assertFalse(homeLight0.equals((Object)homeLight1));
      assertEquals("", string0);
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertFalse(homeLight0.isNameVisible());
      assertNull(homeLight0.getColor());
      assertFalse(homeLight0.isBackFaceShown());
      assertFalse(homeLight0.isModelMirrored());
      assertTrue(homeLight0.isVisible());
      assertFalse(homeLight0.isDeformable());
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertFalse(homeLight0.isMovable());
      assertNull(homeLight0.getCurrency());
      assertNull(homeLight0.getName());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertNull(homeLight0.getCatalogId());
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertNull(homeLight0.getShininess());
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertFalse(homeLight0.isResizable());
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertFalse(homeLight0.isTexturable());
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      assertEquals("", homeLight0.getDescription());
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      
      boolean boolean0 = homeLight0.isNameCenterPointAt(21, 3205.479F, 3205.479F);
      assertNotSame(homeLight0, homeLight1);
      assertFalse(homeLight0.equals((Object)homeLight1));
      assertTrue(boolean0);
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertFalse(homeLight0.isNameVisible());
      assertNull(homeLight0.getColor());
      assertFalse(homeLight0.isBackFaceShown());
      assertFalse(homeLight0.isModelMirrored());
      assertTrue(homeLight0.isVisible());
      assertFalse(homeLight0.isDeformable());
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertFalse(homeLight0.isMovable());
      assertNull(homeLight0.getCurrency());
      assertNull(homeLight0.getName());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertNull(homeLight0.getCatalogId());
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertNull(homeLight0.getShininess());
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertFalse(homeLight0.isResizable());
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertFalse(homeLight0.isTexturable());
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      assertEquals("", homeLight0.getDescription());
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      
      TextStyle textStyle0 = homeLight0.getNameStyle();
      assertNull(textStyle0);
      assertNotSame(homeLight0, homeLight1);
      assertFalse(homeLight0.equals((Object)homeLight1));
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertFalse(homeLight0.isNameVisible());
      assertNull(homeLight0.getColor());
      assertFalse(homeLight0.isBackFaceShown());
      assertFalse(homeLight0.isModelMirrored());
      assertTrue(homeLight0.isVisible());
      assertFalse(homeLight0.isDeformable());
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertFalse(homeLight0.isMovable());
      assertNull(homeLight0.getCurrency());
      assertNull(homeLight0.getName());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertNull(homeLight0.getCatalogId());
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertNull(homeLight0.getShininess());
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertFalse(homeLight0.isResizable());
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertFalse(homeLight0.isTexturable());
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      assertEquals("", homeLight0.getDescription());
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      
      Level level0 = new Level("", 1431655765, 0.3926991F, (-40.256F));
      assertNotNull(level0);
      assertEquals((-40.256F), level0.getHeight(), 0.01F);
      assertTrue(level0.isVisible());
      assertEquals(1.43165581E9F, level0.getElevation(), 0.01F);
      assertEquals(0.3926991F, level0.getFloorThickness(), 0.01F);
      assertEquals("", level0.getName());
      
      boolean boolean1 = homeLight0.isAtLevel(level0);
      assertNotSame(homeLight0, homeLight1);
      assertFalse(homeLight0.equals((Object)homeLight1));
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertFalse(homeLight0.isNameVisible());
      assertNull(homeLight0.getColor());
      assertFalse(homeLight0.isBackFaceShown());
      assertFalse(homeLight0.isModelMirrored());
      assertTrue(homeLight0.isVisible());
      assertFalse(homeLight0.isDeformable());
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertFalse(homeLight0.isMovable());
      assertNull(homeLight0.getCurrency());
      assertNull(homeLight0.getName());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertNull(homeLight0.getCatalogId());
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertNull(homeLight0.getShininess());
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertFalse(homeLight0.isResizable());
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertFalse(homeLight0.isTexturable());
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      assertEquals("", homeLight0.getDescription());
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertEquals((-40.256F), level0.getHeight(), 0.01F);
      assertTrue(level0.isVisible());
      assertEquals(1.43165581E9F, level0.getElevation(), 0.01F);
      assertEquals(0.3926991F, level0.getFloorThickness(), 0.01F);
      assertEquals("", level0.getName());
      
      Float float0 = new Float(3844.0F);
      assertNotNull(float0);
      assertEquals(3844.0F, (float)float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test209()  throws Throwable  {
      Light light0 = mock(Light.class, new ViolatedAssumptionAnswer());
      doReturn((LightSource[]) null).when(light0).getLightSources();
      doReturn((Integer) null).when(light0).getColor();
      doReturn((String) null).when(light0).getCurrency();
      doReturn(0.0F).when(light0).getDepth();
      doReturn((String) null).when(light0).getDescription();
      doReturn(0.0F).when(light0).getElevation();
      doReturn(0.0F).when(light0).getHeight();
      doReturn((Content) null).when(light0).getIcon();
      doReturn((Content) null).when(light0).getModel();
      doReturn((float[][]) null).when(light0).getModelRotation();
      doReturn((String) null).when(light0).getName();
      doReturn((Content) null).when(light0).getPlanIcon();
      doReturn((BigDecimal) null).when(light0).getPrice();
      doReturn((String) null).when(light0).getStaircaseCutOutShape();
      doReturn((BigDecimal) null).when(light0).getValueAddedTaxPercentage();
      doReturn(0.0F).when(light0).getWidth();
      doReturn(false).when(light0).isBackFaceShown();
      doReturn(false).when(light0).isDeformable();
      doReturn(false).when(light0).isDoorOrWindow();
      doReturn(false).when(light0).isMovable();
      doReturn(false).when(light0).isResizable();
      doReturn(false).when(light0).isTexturable();
      HomeLight homeLight0 = new HomeLight(light0);
      assertNotNull(homeLight0);
      assertFalse(homeLight0.isDeformable());
      assertFalse(homeLight0.isModelMirrored());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      assertTrue(homeLight0.isVisible());
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertNull(homeLight0.getColor());
      assertFalse(homeLight0.isTexturable());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertFalse(homeLight0.isBackFaceShown());
      assertNull(homeLight0.getName());
      assertFalse(homeLight0.isNameVisible());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertNull(homeLight0.getDescription());
      assertNull(homeLight0.getShininess());
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertNull(homeLight0.getCatalogId());
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertFalse(homeLight0.isResizable());
      assertNull(homeLight0.getCurrency());
      assertFalse(homeLight0.isMovable());
      
      int int0 = Float.compare(254.82954F, 254.82954F);
      assertEquals(0, int0);
      
      int int1 = Float.floatToIntBits((byte) (-32));
      assertFalse(int1 == int0);
      assertEquals((-1040187392), int1);
      
      HomeLight homeLight1 = homeLight0.clone();
      assertNotNull(homeLight1);
      assertNotSame(homeLight0, homeLight1);
      assertNotSame(homeLight1, homeLight0);
      assertFalse(homeLight1.equals((Object)homeLight0));
      assertFalse(homeLight0.isDeformable());
      assertFalse(homeLight0.isModelMirrored());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      assertTrue(homeLight0.isVisible());
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertNull(homeLight0.getColor());
      assertFalse(homeLight0.isTexturable());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertFalse(homeLight0.isBackFaceShown());
      assertNull(homeLight0.getName());
      assertFalse(homeLight0.isNameVisible());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertNull(homeLight0.getDescription());
      assertNull(homeLight0.getShininess());
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertNull(homeLight0.getCatalogId());
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertFalse(homeLight0.isResizable());
      assertNull(homeLight0.getCurrency());
      assertFalse(homeLight0.isMovable());
      assertEquals(0.0F, homeLight1.getDepth(), 0.01F);
      assertNull(homeLight1.getName());
      assertEquals(0.0F, homeLight1.getNameAngle(), 0.01F);
      assertEquals(0.5F, homeLight1.getPower(), 0.01F);
      assertNull(homeLight1.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight1.getElevation(), 0.01F);
      assertNull(homeLight1.getDescription());
      assertEquals(0.0F, homeLight1.getHeight(), 0.01F);
      assertFalse(homeLight1.isMovable());
      assertFalse(homeLight1.isModelMirrored());
      assertEquals(0.0F, homeLight1.getNameYOffset(), 0.01F);
      assertNull(homeLight1.getCatalogId());
      assertNull(homeLight1.getColor());
      assertFalse(homeLight1.isDeformable());
      assertNull(homeLight1.getCurrency());
      assertEquals(0.0F, homeLight1.getWidth(), 0.01F);
      assertFalse(homeLight1.isBackFaceShown());
      assertFalse(homeLight1.isNameVisible());
      assertFalse(homeLight1.isResizable());
      assertEquals(0.0F, homeLight1.getAngle(), 0.01F);
      assertFalse(homeLight1.isTexturable());
      assertFalse(homeLight1.isDoorOrWindow());
      assertNull(homeLight1.getShininess());
      assertTrue(homeLight1.isVisible());
      assertEquals(0.0F, homeLight1.getY(), 0.01F);
      assertEquals(0.0F, homeLight1.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeLight1.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight1.getX(), 0.01F);
      
      boolean boolean0 = homeLight0.isPointAt((-1.0F), 450.0388F, 6.0181546F);
      assertNotSame(homeLight0, homeLight1);
      assertFalse(homeLight0.equals((Object)homeLight1));
      assertFalse(boolean0);
      assertFalse(homeLight0.isDeformable());
      assertFalse(homeLight0.isModelMirrored());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      assertTrue(homeLight0.isVisible());
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertNull(homeLight0.getColor());
      assertFalse(homeLight0.isTexturable());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertFalse(homeLight0.isBackFaceShown());
      assertNull(homeLight0.getName());
      assertFalse(homeLight0.isNameVisible());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertNull(homeLight0.getDescription());
      assertNull(homeLight0.getShininess());
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertNull(homeLight0.getCatalogId());
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertFalse(homeLight0.isResizable());
      assertNull(homeLight0.getCurrency());
      assertFalse(homeLight0.isMovable());
      
      int int2 = Float.floatToIntBits(402.91016F);
      assertFalse(int2 == int1);
      assertFalse(int2 == int0);
      assertEquals(1137276032, int2);
      
      BigDecimal bigDecimal0 = homeLight1.getValueAddedTax();
      assertNull(bigDecimal0);
      assertNotSame(homeLight0, homeLight1);
      assertNotSame(homeLight1, homeLight0);
      assertFalse(homeLight0.equals((Object)homeLight1));
      assertFalse(homeLight1.equals((Object)homeLight0));
      assertFalse(homeLight0.isDeformable());
      assertFalse(homeLight0.isModelMirrored());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      assertTrue(homeLight0.isVisible());
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertNull(homeLight0.getColor());
      assertFalse(homeLight0.isTexturable());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertFalse(homeLight0.isBackFaceShown());
      assertNull(homeLight0.getName());
      assertFalse(homeLight0.isNameVisible());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertNull(homeLight0.getDescription());
      assertNull(homeLight0.getShininess());
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertNull(homeLight0.getCatalogId());
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertFalse(homeLight0.isResizable());
      assertNull(homeLight0.getCurrency());
      assertFalse(homeLight0.isMovable());
      assertEquals(0.0F, homeLight1.getDepth(), 0.01F);
      assertNull(homeLight1.getName());
      assertEquals(0.0F, homeLight1.getNameAngle(), 0.01F);
      assertEquals(0.5F, homeLight1.getPower(), 0.01F);
      assertNull(homeLight1.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight1.getElevation(), 0.01F);
      assertNull(homeLight1.getDescription());
      assertEquals(0.0F, homeLight1.getHeight(), 0.01F);
      assertFalse(homeLight1.isMovable());
      assertFalse(homeLight1.isModelMirrored());
      assertEquals(0.0F, homeLight1.getNameYOffset(), 0.01F);
      assertNull(homeLight1.getCatalogId());
      assertNull(homeLight1.getColor());
      assertFalse(homeLight1.isDeformable());
      assertNull(homeLight1.getCurrency());
      assertEquals(0.0F, homeLight1.getWidth(), 0.01F);
      assertFalse(homeLight1.isBackFaceShown());
      assertFalse(homeLight1.isNameVisible());
      assertFalse(homeLight1.isResizable());
      assertEquals(0.0F, homeLight1.getAngle(), 0.01F);
      assertFalse(homeLight1.isTexturable());
      assertFalse(homeLight1.isDoorOrWindow());
      assertNull(homeLight1.getShininess());
      assertTrue(homeLight1.isVisible());
      assertEquals(0.0F, homeLight1.getY(), 0.01F);
      assertEquals(0.0F, homeLight1.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeLight1.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight1.getX(), 0.01F);
      
      Level level0 = homeLight0.getLevel();
      assertNull(level0);
      assertNotSame(homeLight0, homeLight1);
      assertFalse(homeLight0.equals((Object)homeLight1));
      assertFalse(homeLight0.isDeformable());
      assertFalse(homeLight0.isModelMirrored());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      assertTrue(homeLight0.isVisible());
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertNull(homeLight0.getColor());
      assertFalse(homeLight0.isTexturable());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertFalse(homeLight0.isBackFaceShown());
      assertNull(homeLight0.getName());
      assertFalse(homeLight0.isNameVisible());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertNull(homeLight0.getDescription());
      assertNull(homeLight0.getShininess());
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertNull(homeLight0.getCatalogId());
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertFalse(homeLight0.isResizable());
      assertNull(homeLight0.getCurrency());
      assertFalse(homeLight0.isMovable());
      
      HomeLight homeLight2 = homeLight1.clone();
      assertNotNull(homeLight2);
      assertNotSame(homeLight0, homeLight2);
      assertNotSame(homeLight0, homeLight1);
      assertNotSame(homeLight1, homeLight2);
      assertNotSame(homeLight1, homeLight0);
      assertNotSame(homeLight2, homeLight0);
      assertNotSame(homeLight2, homeLight1);
      assertFalse(homeLight0.equals((Object)homeLight1));
      assertFalse(homeLight1.equals((Object)homeLight0));
      assertFalse(homeLight2.equals((Object)homeLight0));
      assertFalse(homeLight2.equals((Object)homeLight1));
      assertFalse(homeLight0.isDeformable());
      assertFalse(homeLight0.isModelMirrored());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      assertTrue(homeLight0.isVisible());
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertNull(homeLight0.getColor());
      assertFalse(homeLight0.isTexturable());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertFalse(homeLight0.isBackFaceShown());
      assertNull(homeLight0.getName());
      assertFalse(homeLight0.isNameVisible());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertNull(homeLight0.getDescription());
      assertNull(homeLight0.getShininess());
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertNull(homeLight0.getCatalogId());
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertFalse(homeLight0.isResizable());
      assertNull(homeLight0.getCurrency());
      assertFalse(homeLight0.isMovable());
      assertEquals(0.0F, homeLight1.getDepth(), 0.01F);
      assertNull(homeLight1.getName());
      assertEquals(0.0F, homeLight1.getNameAngle(), 0.01F);
      assertEquals(0.5F, homeLight1.getPower(), 0.01F);
      assertNull(homeLight1.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight1.getElevation(), 0.01F);
      assertNull(homeLight1.getDescription());
      assertEquals(0.0F, homeLight1.getHeight(), 0.01F);
      assertFalse(homeLight1.isMovable());
      assertFalse(homeLight1.isModelMirrored());
      assertEquals(0.0F, homeLight1.getNameYOffset(), 0.01F);
      assertNull(homeLight1.getCatalogId());
      assertNull(homeLight1.getColor());
      assertFalse(homeLight1.isDeformable());
      assertNull(homeLight1.getCurrency());
      assertEquals(0.0F, homeLight1.getWidth(), 0.01F);
      assertFalse(homeLight1.isBackFaceShown());
      assertFalse(homeLight1.isNameVisible());
      assertFalse(homeLight1.isResizable());
      assertEquals(0.0F, homeLight1.getAngle(), 0.01F);
      assertFalse(homeLight1.isTexturable());
      assertFalse(homeLight1.isDoorOrWindow());
      assertNull(homeLight1.getShininess());
      assertTrue(homeLight1.isVisible());
      assertEquals(0.0F, homeLight1.getY(), 0.01F);
      assertEquals(0.0F, homeLight1.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeLight1.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight1.getX(), 0.01F);
      assertFalse(homeLight2.isResizable());
      assertEquals(0.0F, homeLight2.getWidth(), 0.01F);
      assertEquals(0.5F, homeLight2.getPower(), 0.01F);
      assertEquals(0.0F, homeLight2.getHeight(), 0.01F);
      assertFalse(homeLight2.isMovable());
      assertEquals(0.0F, homeLight2.getNameXOffset(), 0.01F);
      assertNull(homeLight2.getDescription());
      assertEquals(0.0F, homeLight2.getDepth(), 0.01F);
      assertFalse(homeLight2.isDeformable());
      assertEquals(0.0F, homeLight2.getElevation(), 0.01F);
      assertEquals(0.0F, homeLight2.getNameAngle(), 0.01F);
      assertNull(homeLight2.getStaircaseCutOutShape());
      assertNull(homeLight2.getShininess());
      assertTrue(homeLight2.isVisible());
      assertEquals(0.0F, homeLight2.getY(), 0.01F);
      assertFalse(homeLight2.isDoorOrWindow());
      assertEquals(0.0F, homeLight2.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight2.getX(), 0.01F);
      assertFalse(homeLight2.isBackFaceShown());
      assertFalse(homeLight2.isTexturable());
      assertEquals(0.0F, homeLight2.getAngle(), 0.01F);
      assertNull(homeLight2.getCurrency());
      assertNull(homeLight2.getName());
      assertEquals(0.0F, homeLight2.getNameYOffset(), 0.01F);
      assertFalse(homeLight2.isNameVisible());
      assertNull(homeLight2.getCatalogId());
      assertNull(homeLight2.getColor());
      assertFalse(homeLight2.isModelMirrored());
      
      HomeLight homeLight3 = null;
      try {
        homeLight3 = new HomeLight(homeLight0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.eteks.sweethome3d.model.HomePieceOfFurniture", e);
      }
  }

  @Test(timeout = 4000)
  public void test210()  throws Throwable  {
      LightSource lightSource0 = new LightSource((-1.0F), (-1457.99F), 381.9F, 1431655765);
      assertNotNull(lightSource0);
      assertEquals(1431655765, lightSource0.getColor());
      assertEquals((-1.0F), lightSource0.getX(), 0.01F);
      assertEquals(381.9F, lightSource0.getZ(), 0.01F);
      assertEquals((-1457.99F), lightSource0.getY(), 0.01F);
      assertNull(lightSource0.getDiameter());
      
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-54);
      byteArray0[1] = (byte) (-40);
      boolean boolean0 = FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      assertEquals(3, byteArray0.length);
      assertFalse(boolean0);
      assertArrayEquals(new byte[] {(byte) (-54), (byte) (-40), (byte)0}, byteArray0);
      
      LightSource lightSource1 = new LightSource((-1.0F), (-69.47F), 700.4569F, (-853));
      assertNotNull(lightSource1);
      assertFalse(lightSource1.equals((Object)lightSource0));
      assertEquals((-69.47F), lightSource1.getY(), 0.01F);
      assertEquals((-1.0F), lightSource1.getX(), 0.01F);
      assertEquals((-853), lightSource1.getColor());
      assertNull(lightSource1.getDiameter());
      assertEquals(700.4569F, lightSource1.getZ(), 0.01F);
      
      Integer integer0 = new Integer((-853));
      assertNotNull(integer0);
      assertEquals((-853), (int)integer0);
      
      Light light0 = mock(Light.class, new ViolatedAssumptionAnswer());
      doReturn((LightSource[]) null).when(light0).getLightSources();
      doReturn((Integer) null).when(light0).getColor();
      doReturn((String) null).when(light0).getCurrency();
      doReturn(0.0F).when(light0).getDepth();
      doReturn((String) null).when(light0).getDescription();
      doReturn(0.0F).when(light0).getElevation();
      doReturn(0.0F).when(light0).getHeight();
      doReturn((Content) null).when(light0).getIcon();
      doReturn((Content) null).when(light0).getModel();
      doReturn((float[][]) null).when(light0).getModelRotation();
      doReturn((String) null).when(light0).getName();
      doReturn((Content) null).when(light0).getPlanIcon();
      doReturn((BigDecimal) null).when(light0).getPrice();
      doReturn((String) null).when(light0).getStaircaseCutOutShape();
      doReturn((BigDecimal) null).when(light0).getValueAddedTaxPercentage();
      doReturn(0.0F).when(light0).getWidth();
      doReturn(false).when(light0).isBackFaceShown();
      doReturn(false).when(light0).isDeformable();
      doReturn(false).when(light0).isDoorOrWindow();
      doReturn(false).when(light0).isMovable();
      doReturn(false).when(light0).isResizable();
      doReturn(false).when(light0).isTexturable();
      byte[] byteArray1 = new byte[5];
      assertFalse(byteArray1.equals((Object)byteArray0));
      
      byteArray1[1] = (byte)0;
      byteArray1[3] = (byte)0;
      boolean boolean1 = FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray1);
      assertEquals(5, byteArray1.length);
      assertNotSame(byteArray1, byteArray0);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray1);
      
      HomeLight homeLight0 = new HomeLight(light0);
      assertNotNull(homeLight0);
      assertFalse(homeLight0.isDeformable());
      assertFalse(homeLight0.isNameVisible());
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertTrue(homeLight0.isVisible());
      assertNull(homeLight0.getCurrency());
      assertFalse(homeLight0.isModelMirrored());
      assertFalse(homeLight0.isBackFaceShown());
      assertFalse(homeLight0.isResizable());
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertNull(homeLight0.getShininess());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      assertFalse(homeLight0.isTexturable());
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertNull(homeLight0.getName());
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertNull(homeLight0.getDescription());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertFalse(homeLight0.isMovable());
      assertNull(homeLight0.getCatalogId());
      assertNull(homeLight0.getColor());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      
      homeLight0.setY((byte)0);
      assertFalse(homeLight0.isDeformable());
      assertFalse(homeLight0.isNameVisible());
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertTrue(homeLight0.isVisible());
      assertNull(homeLight0.getCurrency());
      assertFalse(homeLight0.isModelMirrored());
      assertFalse(homeLight0.isBackFaceShown());
      assertFalse(homeLight0.isResizable());
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertNull(homeLight0.getShininess());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      assertFalse(homeLight0.isTexturable());
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertNull(homeLight0.getName());
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertNull(homeLight0.getDescription());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertFalse(homeLight0.isMovable());
      assertNull(homeLight0.getCatalogId());
      assertNull(homeLight0.getColor());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      
      BigDecimal bigDecimal0 = homeLight0.getValueAddedTax();
      assertNull(bigDecimal0);
      assertFalse(homeLight0.isDeformable());
      assertFalse(homeLight0.isNameVisible());
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertTrue(homeLight0.isVisible());
      assertNull(homeLight0.getCurrency());
      assertFalse(homeLight0.isModelMirrored());
      assertFalse(homeLight0.isBackFaceShown());
      assertFalse(homeLight0.isResizable());
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertNull(homeLight0.getShininess());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      assertFalse(homeLight0.isTexturable());
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertNull(homeLight0.getName());
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertNull(homeLight0.getDescription());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertFalse(homeLight0.isMovable());
      assertNull(homeLight0.getCatalogId());
      assertNull(homeLight0.getColor());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      
      BigDecimal bigDecimal1 = homeLight0.getValueAddedTax();
      assertNull(bigDecimal1);
      assertFalse(homeLight0.isDeformable());
      assertFalse(homeLight0.isNameVisible());
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertTrue(homeLight0.isVisible());
      assertNull(homeLight0.getCurrency());
      assertFalse(homeLight0.isModelMirrored());
      assertFalse(homeLight0.isBackFaceShown());
      assertFalse(homeLight0.isResizable());
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertNull(homeLight0.getShininess());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      assertFalse(homeLight0.isTexturable());
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertNull(homeLight0.getName());
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertNull(homeLight0.getDescription());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertFalse(homeLight0.isMovable());
      assertNull(homeLight0.getCatalogId());
      assertNull(homeLight0.getColor());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      
      String string0 = homeLight0.getName();
      assertNull(string0);
      assertFalse(homeLight0.isDeformable());
      assertFalse(homeLight0.isNameVisible());
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertTrue(homeLight0.isVisible());
      assertNull(homeLight0.getCurrency());
      assertFalse(homeLight0.isModelMirrored());
      assertFalse(homeLight0.isBackFaceShown());
      assertFalse(homeLight0.isResizable());
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertNull(homeLight0.getShininess());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      assertFalse(homeLight0.isTexturable());
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertNull(homeLight0.getName());
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertNull(homeLight0.getDescription());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertFalse(homeLight0.isMovable());
      assertNull(homeLight0.getCatalogId());
      assertNull(homeLight0.getColor());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      
      Level level0 = homeLight0.getLevel();
      assertNull(level0);
      assertFalse(homeLight0.isDeformable());
      assertFalse(homeLight0.isNameVisible());
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertTrue(homeLight0.isVisible());
      assertNull(homeLight0.getCurrency());
      assertFalse(homeLight0.isModelMirrored());
      assertFalse(homeLight0.isBackFaceShown());
      assertFalse(homeLight0.isResizable());
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertNull(homeLight0.getShininess());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      assertFalse(homeLight0.isTexturable());
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertNull(homeLight0.getName());
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertNull(homeLight0.getDescription());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertFalse(homeLight0.isMovable());
      assertNull(homeLight0.getCatalogId());
      assertNull(homeLight0.getColor());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      
      homeLight0.setName((String) null);
      assertFalse(homeLight0.isDeformable());
      assertFalse(homeLight0.isNameVisible());
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertTrue(homeLight0.isVisible());
      assertNull(homeLight0.getCurrency());
      assertFalse(homeLight0.isModelMirrored());
      assertFalse(homeLight0.isBackFaceShown());
      assertFalse(homeLight0.isResizable());
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertNull(homeLight0.getShininess());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      assertFalse(homeLight0.isTexturable());
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertNull(homeLight0.getName());
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertNull(homeLight0.getDescription());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertFalse(homeLight0.isMovable());
      assertNull(homeLight0.getCatalogId());
      assertNull(homeLight0.getColor());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      
      boolean boolean2 = homeLight0.intersectsRectangle((byte)0, 1800.2F, 700.4569F, (-73.79F));
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2);
      assertFalse(homeLight0.isDeformable());
      assertFalse(homeLight0.isNameVisible());
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertTrue(homeLight0.isVisible());
      assertNull(homeLight0.getCurrency());
      assertFalse(homeLight0.isModelMirrored());
      assertFalse(homeLight0.isBackFaceShown());
      assertFalse(homeLight0.isResizable());
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertNull(homeLight0.getShininess());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      assertFalse(homeLight0.isTexturable());
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertNull(homeLight0.getName());
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertNull(homeLight0.getDescription());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertFalse(homeLight0.isMovable());
      assertNull(homeLight0.getCatalogId());
      assertNull(homeLight0.getColor());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      
      homeLight0.setNameYOffset((-1457.99F));
      assertFalse(homeLight0.isDeformable());
      assertFalse(homeLight0.isNameVisible());
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertTrue(homeLight0.isVisible());
      assertNull(homeLight0.getCurrency());
      assertFalse(homeLight0.isModelMirrored());
      assertFalse(homeLight0.isBackFaceShown());
      assertFalse(homeLight0.isResizable());
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertNull(homeLight0.getShininess());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      assertEquals((-1457.99F), homeLight0.getNameYOffset(), 0.01F);
      assertFalse(homeLight0.isTexturable());
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertNull(homeLight0.getName());
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertNull(homeLight0.getDescription());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertFalse(homeLight0.isMovable());
      assertNull(homeLight0.getCatalogId());
      assertNull(homeLight0.getColor());
      
      BigDecimal bigDecimal2 = homeLight0.getPriceValueAddedTaxIncluded();
      assertNull(bigDecimal2);
      assertFalse(homeLight0.isDeformable());
      assertFalse(homeLight0.isNameVisible());
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertTrue(homeLight0.isVisible());
      assertNull(homeLight0.getCurrency());
      assertFalse(homeLight0.isModelMirrored());
      assertFalse(homeLight0.isBackFaceShown());
      assertFalse(homeLight0.isResizable());
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertNull(homeLight0.getShininess());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      assertEquals((-1457.99F), homeLight0.getNameYOffset(), 0.01F);
      assertFalse(homeLight0.isTexturable());
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertNull(homeLight0.getName());
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertNull(homeLight0.getDescription());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertFalse(homeLight0.isMovable());
      assertNull(homeLight0.getCatalogId());
      assertNull(homeLight0.getColor());
      
      homeLight0.setDescription((String) null);
      assertFalse(homeLight0.isDeformable());
      assertFalse(homeLight0.isNameVisible());
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertTrue(homeLight0.isVisible());
      assertNull(homeLight0.getCurrency());
      assertFalse(homeLight0.isModelMirrored());
      assertFalse(homeLight0.isBackFaceShown());
      assertFalse(homeLight0.isResizable());
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertNull(homeLight0.getShininess());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      assertEquals((-1457.99F), homeLight0.getNameYOffset(), 0.01F);
      assertFalse(homeLight0.isTexturable());
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertNull(homeLight0.getName());
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertNull(homeLight0.getDescription());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertFalse(homeLight0.isMovable());
      assertNull(homeLight0.getCatalogId());
      assertNull(homeLight0.getColor());
      
      float float0 = homeLight0.getX();
      assertEquals(0.0F, float0, 0.01F);
      assertFalse(homeLight0.isDeformable());
      assertFalse(homeLight0.isNameVisible());
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertTrue(homeLight0.isVisible());
      assertNull(homeLight0.getCurrency());
      assertFalse(homeLight0.isModelMirrored());
      assertFalse(homeLight0.isBackFaceShown());
      assertFalse(homeLight0.isResizable());
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertNull(homeLight0.getShininess());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      assertEquals((-1457.99F), homeLight0.getNameYOffset(), 0.01F);
      assertFalse(homeLight0.isTexturable());
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertNull(homeLight0.getName());
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertNull(homeLight0.getDescription());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertFalse(homeLight0.isMovable());
      assertNull(homeLight0.getCatalogId());
      assertNull(homeLight0.getColor());
      
      homeLight0.move((-73.79F), 1800.2F);
      assertFalse(homeLight0.isDeformable());
      assertFalse(homeLight0.isNameVisible());
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertTrue(homeLight0.isVisible());
      assertNull(homeLight0.getCurrency());
      assertFalse(homeLight0.isModelMirrored());
      assertFalse(homeLight0.isBackFaceShown());
      assertFalse(homeLight0.isResizable());
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertNull(homeLight0.getShininess());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      assertEquals((-1457.99F), homeLight0.getNameYOffset(), 0.01F);
      assertEquals((-73.79F), homeLight0.getX(), 0.01F);
      assertFalse(homeLight0.isTexturable());
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertNull(homeLight0.getName());
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertNull(homeLight0.getDescription());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertEquals(1800.2F, homeLight0.getY(), 0.01F);
      assertFalse(homeLight0.isMovable());
      assertNull(homeLight0.getCatalogId());
      assertNull(homeLight0.getColor());
  }

  @Test(timeout = 4000)
  public void test211()  throws Throwable  {
      Integer integer0 = new Integer(1431655742);
      assertNotNull(integer0);
      assertEquals(1431655742, (int)integer0);
      
      Light light0 = mock(Light.class, new ViolatedAssumptionAnswer());
      doReturn((LightSource[]) null).when(light0).getLightSources();
      doReturn((Integer) null).when(light0).getColor();
      doReturn((String) null).when(light0).getCurrency();
      doReturn(0.0F).when(light0).getDepth();
      doReturn((String) null).when(light0).getDescription();
      doReturn(0.0F).when(light0).getElevation();
      doReturn(0.0F).when(light0).getHeight();
      doReturn((Content) null).when(light0).getIcon();
      doReturn((Content) null).when(light0).getModel();
      doReturn((float[][]) null).when(light0).getModelRotation();
      doReturn((String) null).when(light0).getName();
      doReturn((Content) null).when(light0).getPlanIcon();
      doReturn((BigDecimal) null).when(light0).getPrice();
      doReturn((String) null).when(light0).getStaircaseCutOutShape();
      doReturn((BigDecimal) null).when(light0).getValueAddedTaxPercentage();
      doReturn(0.0F).when(light0).getWidth();
      doReturn(false).when(light0).isBackFaceShown();
      doReturn(false).when(light0).isDeformable();
      doReturn(false).when(light0).isDoorOrWindow();
      doReturn(false).when(light0).isMovable();
      doReturn(false).when(light0).isResizable();
      doReturn(false).when(light0).isTexturable();
      HomeLight homeLight0 = new HomeLight(light0);
      assertNotNull(homeLight0);
      assertNull(homeLight0.getColor());
      assertFalse(homeLight0.isNameVisible());
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertNull(homeLight0.getCurrency());
      assertFalse(homeLight0.isDoorOrWindow());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertFalse(homeLight0.isBackFaceShown());
      assertFalse(homeLight0.isModelMirrored());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertNull(homeLight0.getName());
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertNull(homeLight0.getCatalogId());
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertNull(homeLight0.getDescription());
      assertFalse(homeLight0.isTexturable());
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertFalse(homeLight0.isMovable());
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertNull(homeLight0.getShininess());
      assertTrue(homeLight0.isVisible());
      assertFalse(homeLight0.isResizable());
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertFalse(homeLight0.isDeformable());
      
      homeLight0.setY(1431655742);
      assertNull(homeLight0.getColor());
      assertFalse(homeLight0.isNameVisible());
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertNull(homeLight0.getCurrency());
      assertFalse(homeLight0.isDoorOrWindow());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertFalse(homeLight0.isBackFaceShown());
      assertFalse(homeLight0.isModelMirrored());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertNull(homeLight0.getName());
      assertEquals(1.43165568E9F, homeLight0.getY(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertNull(homeLight0.getCatalogId());
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertNull(homeLight0.getDescription());
      assertFalse(homeLight0.isTexturable());
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertFalse(homeLight0.isMovable());
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertNull(homeLight0.getShininess());
      assertTrue(homeLight0.isVisible());
      assertFalse(homeLight0.isResizable());
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertFalse(homeLight0.isDeformable());
      
      boolean boolean0 = homeLight0.isTopRightPointAt(1431655742, 1431655742, 3.4028235E38F);
      assertFalse(boolean0);
      assertNull(homeLight0.getColor());
      assertFalse(homeLight0.isNameVisible());
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertNull(homeLight0.getCurrency());
      assertFalse(homeLight0.isDoorOrWindow());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertFalse(homeLight0.isBackFaceShown());
      assertFalse(homeLight0.isModelMirrored());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertNull(homeLight0.getName());
      assertEquals(1.43165568E9F, homeLight0.getY(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertNull(homeLight0.getCatalogId());
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertNull(homeLight0.getDescription());
      assertFalse(homeLight0.isTexturable());
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertFalse(homeLight0.isMovable());
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertNull(homeLight0.getShininess());
      assertTrue(homeLight0.isVisible());
      assertFalse(homeLight0.isResizable());
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertFalse(homeLight0.isDeformable());
      
      Level level0 = homeLight0.getLevel();
      assertNull(level0);
      assertNull(homeLight0.getColor());
      assertFalse(homeLight0.isNameVisible());
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertNull(homeLight0.getCurrency());
      assertFalse(homeLight0.isDoorOrWindow());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertFalse(homeLight0.isBackFaceShown());
      assertFalse(homeLight0.isModelMirrored());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertNull(homeLight0.getName());
      assertEquals(1.43165568E9F, homeLight0.getY(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertNull(homeLight0.getCatalogId());
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertNull(homeLight0.getDescription());
      assertFalse(homeLight0.isTexturable());
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertFalse(homeLight0.isMovable());
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertNull(homeLight0.getShininess());
      assertTrue(homeLight0.isVisible());
      assertFalse(homeLight0.isResizable());
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertFalse(homeLight0.isDeformable());
      
      HomeLight homeLight1 = homeLight0.clone();
      assertNotNull(homeLight1);
      assertNotSame(homeLight0, homeLight1);
      assertNotSame(homeLight1, homeLight0);
      assertFalse(homeLight1.equals((Object)homeLight0));
      assertNull(homeLight0.getColor());
      assertFalse(homeLight0.isNameVisible());
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertNull(homeLight0.getCurrency());
      assertFalse(homeLight0.isDoorOrWindow());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertFalse(homeLight0.isBackFaceShown());
      assertFalse(homeLight0.isModelMirrored());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertNull(homeLight0.getName());
      assertEquals(1.43165568E9F, homeLight0.getY(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertNull(homeLight0.getCatalogId());
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertNull(homeLight0.getDescription());
      assertFalse(homeLight0.isTexturable());
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertFalse(homeLight0.isMovable());
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertNull(homeLight0.getShininess());
      assertTrue(homeLight0.isVisible());
      assertFalse(homeLight0.isResizable());
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertFalse(homeLight0.isDeformable());
      assertEquals(1.43165568E9F, homeLight1.getY(), 0.01F);
      assertNull(homeLight1.getName());
      assertEquals(0.0F, homeLight1.getDepth(), 0.01F);
      assertEquals(0.0F, homeLight1.getNameAngle(), 0.01F);
      assertNull(homeLight1.getStaircaseCutOutShape());
      assertEquals(0.5F, homeLight1.getPower(), 0.01F);
      assertNull(homeLight1.getDescription());
      assertEquals(0.0F, homeLight1.getElevation(), 0.01F);
      assertNull(homeLight1.getCatalogId());
      assertEquals(0.0F, homeLight1.getNameXOffset(), 0.01F);
      assertFalse(homeLight1.isTexturable());
      assertEquals(0.0F, homeLight1.getHeight(), 0.01F);
      assertEquals(0.0F, homeLight1.getGroundElevation(), 0.01F);
      assertFalse(homeLight1.isResizable());
      assertFalse(homeLight1.isMovable());
      assertNull(homeLight1.getShininess());
      assertTrue(homeLight1.isVisible());
      assertFalse(homeLight1.isNameVisible());
      assertFalse(homeLight1.isDeformable());
      assertNull(homeLight1.getCurrency());
      assertEquals(0.0F, homeLight1.getWidth(), 0.01F);
      assertEquals(0.0F, homeLight1.getNameYOffset(), 0.01F);
      assertNull(homeLight1.getColor());
      assertFalse(homeLight1.isDoorOrWindow());
      assertEquals(0.0F, homeLight1.getX(), 0.01F);
      assertEquals(0.0F, homeLight1.getAngle(), 0.01F);
      assertFalse(homeLight1.isBackFaceShown());
      assertFalse(homeLight1.isModelMirrored());
      
      homeLight0.setNameYOffset(40.88F);
      assertNotSame(homeLight0, homeLight1);
      assertFalse(homeLight0.equals((Object)homeLight1));
      assertNull(homeLight0.getColor());
      assertFalse(homeLight0.isNameVisible());
      assertEquals(40.88F, homeLight0.getNameYOffset(), 0.01F);
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertNull(homeLight0.getCurrency());
      assertFalse(homeLight0.isDoorOrWindow());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertFalse(homeLight0.isBackFaceShown());
      assertFalse(homeLight0.isModelMirrored());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertNull(homeLight0.getName());
      assertEquals(1.43165568E9F, homeLight0.getY(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertNull(homeLight0.getCatalogId());
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertNull(homeLight0.getDescription());
      assertFalse(homeLight0.isTexturable());
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertFalse(homeLight0.isMovable());
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertNull(homeLight0.getShininess());
      assertTrue(homeLight0.isVisible());
      assertFalse(homeLight0.isResizable());
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertFalse(homeLight0.isDeformable());
      
      BigDecimal bigDecimal0 = homeLight0.getPriceValueAddedTaxIncluded();
      assertNull(bigDecimal0);
      assertNotSame(homeLight0, homeLight1);
      assertFalse(homeLight0.equals((Object)homeLight1));
      assertNull(homeLight0.getColor());
      assertFalse(homeLight0.isNameVisible());
      assertEquals(40.88F, homeLight0.getNameYOffset(), 0.01F);
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertNull(homeLight0.getCurrency());
      assertFalse(homeLight0.isDoorOrWindow());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertFalse(homeLight0.isBackFaceShown());
      assertFalse(homeLight0.isModelMirrored());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertNull(homeLight0.getName());
      assertEquals(1.43165568E9F, homeLight0.getY(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertNull(homeLight0.getCatalogId());
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertNull(homeLight0.getDescription());
      assertFalse(homeLight0.isTexturable());
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertFalse(homeLight0.isMovable());
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertNull(homeLight0.getShininess());
      assertTrue(homeLight0.isVisible());
      assertFalse(homeLight0.isResizable());
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertFalse(homeLight0.isDeformable());
      
      homeLight1.setMovable(false);
      assertNotSame(homeLight0, homeLight1);
      assertNotSame(homeLight1, homeLight0);
      assertFalse(homeLight0.equals((Object)homeLight1));
      assertFalse(homeLight1.equals((Object)homeLight0));
      assertNull(homeLight0.getColor());
      assertFalse(homeLight0.isNameVisible());
      assertEquals(40.88F, homeLight0.getNameYOffset(), 0.01F);
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertNull(homeLight0.getCurrency());
      assertFalse(homeLight0.isDoorOrWindow());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertFalse(homeLight0.isBackFaceShown());
      assertFalse(homeLight0.isModelMirrored());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertNull(homeLight0.getName());
      assertEquals(1.43165568E9F, homeLight0.getY(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertNull(homeLight0.getCatalogId());
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertNull(homeLight0.getDescription());
      assertFalse(homeLight0.isTexturable());
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertFalse(homeLight0.isMovable());
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertNull(homeLight0.getShininess());
      assertTrue(homeLight0.isVisible());
      assertFalse(homeLight0.isResizable());
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertFalse(homeLight0.isDeformable());
      assertEquals(1.43165568E9F, homeLight1.getY(), 0.01F);
      assertNull(homeLight1.getName());
      assertEquals(0.0F, homeLight1.getDepth(), 0.01F);
      assertEquals(0.0F, homeLight1.getNameAngle(), 0.01F);
      assertNull(homeLight1.getStaircaseCutOutShape());
      assertEquals(0.5F, homeLight1.getPower(), 0.01F);
      assertNull(homeLight1.getDescription());
      assertEquals(0.0F, homeLight1.getElevation(), 0.01F);
      assertNull(homeLight1.getCatalogId());
      assertEquals(0.0F, homeLight1.getNameXOffset(), 0.01F);
      assertFalse(homeLight1.isTexturable());
      assertEquals(0.0F, homeLight1.getHeight(), 0.01F);
      assertEquals(0.0F, homeLight1.getGroundElevation(), 0.01F);
      assertFalse(homeLight1.isResizable());
      assertFalse(homeLight1.isMovable());
      assertNull(homeLight1.getShininess());
      assertTrue(homeLight1.isVisible());
      assertFalse(homeLight1.isNameVisible());
      assertFalse(homeLight1.isDeformable());
      assertNull(homeLight1.getCurrency());
      assertEquals(0.0F, homeLight1.getWidth(), 0.01F);
      assertEquals(0.0F, homeLight1.getNameYOffset(), 0.01F);
      assertNull(homeLight1.getColor());
      assertFalse(homeLight1.isDoorOrWindow());
      assertEquals(0.0F, homeLight1.getX(), 0.01F);
      assertEquals(0.0F, homeLight1.getAngle(), 0.01F);
      assertFalse(homeLight1.isBackFaceShown());
      assertFalse(homeLight1.isModelMirrored());
      
      homeLight0.setNameYOffset(3.4028235E38F);
      assertNotSame(homeLight0, homeLight1);
      assertFalse(homeLight0.equals((Object)homeLight1));
      assertNull(homeLight0.getColor());
      assertFalse(homeLight0.isNameVisible());
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertNull(homeLight0.getCurrency());
      assertFalse(homeLight0.isDoorOrWindow());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertFalse(homeLight0.isBackFaceShown());
      assertFalse(homeLight0.isModelMirrored());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertNull(homeLight0.getName());
      assertEquals(1.43165568E9F, homeLight0.getY(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertNull(homeLight0.getCatalogId());
      assertEquals(3.4028235E38F, homeLight0.getNameYOffset(), 0.01F);
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertNull(homeLight0.getDescription());
      assertFalse(homeLight0.isTexturable());
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertFalse(homeLight0.isMovable());
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertNull(homeLight0.getShininess());
      assertTrue(homeLight0.isVisible());
      assertFalse(homeLight0.isResizable());
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertFalse(homeLight0.isDeformable());
      
      HomePieceOfFurniture.SortableProperty[] homePieceOfFurniture_SortablePropertyArray0 = HomePieceOfFurniture.SortableProperty.values();
      assertEquals(19, homePieceOfFurniture_SortablePropertyArray0.length);
      assertNotNull(homePieceOfFurniture_SortablePropertyArray0);
      
      float float0 = homeLight1.getAngle();
      assertNotSame(homeLight0, homeLight1);
      assertNotSame(homeLight1, homeLight0);
      assertFalse(homeLight0.equals((Object)homeLight1));
      assertFalse(homeLight1.equals((Object)homeLight0));
      assertEquals(0.0F, float0, 0.01F);
      assertNull(homeLight0.getColor());
      assertFalse(homeLight0.isNameVisible());
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertNull(homeLight0.getCurrency());
      assertFalse(homeLight0.isDoorOrWindow());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertFalse(homeLight0.isBackFaceShown());
      assertFalse(homeLight0.isModelMirrored());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertNull(homeLight0.getName());
      assertEquals(1.43165568E9F, homeLight0.getY(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertNull(homeLight0.getCatalogId());
      assertEquals(3.4028235E38F, homeLight0.getNameYOffset(), 0.01F);
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertNull(homeLight0.getDescription());
      assertFalse(homeLight0.isTexturable());
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertFalse(homeLight0.isMovable());
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertNull(homeLight0.getShininess());
      assertTrue(homeLight0.isVisible());
      assertFalse(homeLight0.isResizable());
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertFalse(homeLight0.isDeformable());
      assertEquals(1.43165568E9F, homeLight1.getY(), 0.01F);
      assertNull(homeLight1.getName());
      assertEquals(0.0F, homeLight1.getDepth(), 0.01F);
      assertEquals(0.0F, homeLight1.getNameAngle(), 0.01F);
      assertNull(homeLight1.getStaircaseCutOutShape());
      assertEquals(0.5F, homeLight1.getPower(), 0.01F);
      assertNull(homeLight1.getDescription());
      assertEquals(0.0F, homeLight1.getElevation(), 0.01F);
      assertNull(homeLight1.getCatalogId());
      assertEquals(0.0F, homeLight1.getNameXOffset(), 0.01F);
      assertFalse(homeLight1.isTexturable());
      assertEquals(0.0F, homeLight1.getHeight(), 0.01F);
      assertEquals(0.0F, homeLight1.getGroundElevation(), 0.01F);
      assertFalse(homeLight1.isResizable());
      assertFalse(homeLight1.isMovable());
      assertNull(homeLight1.getShininess());
      assertTrue(homeLight1.isVisible());
      assertFalse(homeLight1.isNameVisible());
      assertFalse(homeLight1.isDeformable());
      assertNull(homeLight1.getCurrency());
      assertEquals(0.0F, homeLight1.getWidth(), 0.01F);
      assertEquals(0.0F, homeLight1.getNameYOffset(), 0.01F);
      assertNull(homeLight1.getColor());
      assertFalse(homeLight1.isDoorOrWindow());
      assertEquals(0.0F, homeLight1.getX(), 0.01F);
      assertEquals(0.0F, homeLight1.getAngle(), 0.01F);
      assertFalse(homeLight1.isBackFaceShown());
      assertFalse(homeLight1.isModelMirrored());
  }

  @Test(timeout = 4000)
  public void test212()  throws Throwable  {
      String[] stringArray0 = new String[2];
      stringArray0[0] = "";
      stringArray0[1] = "";
      Float float0 = new Float((-1729.3374F));
      assertNotNull(float0);
      assertEquals((-1729.3374F), (float)float0, 0.01F);
      
      URLContent uRLContent0 = new URLContent((URL) null);
      assertNotNull(uRLContent0);
      
      Sash[] sashArray0 = new Sash[8];
      Sash sash0 = new Sash((-1.0F), 381.9F, (-1.0F), 2.0F, (-103.599365F));
      assertNotNull(sash0);
      assertEquals(2.0F, sash0.getStartAngle(), 0.01F);
      assertEquals((-1.0F), sash0.getXAxis(), 0.01F);
      assertEquals(381.9F, sash0.getYAxis(), 0.01F);
      assertEquals((-1.0F), sash0.getWidth(), 0.01F);
      assertEquals((-103.599365F), sash0.getEndAngle(), 0.01F);
      
      sashArray0[0] = sash0;
      Sash sash1 = new Sash(1.0F, (-1650.1865F), 0.0F, 2.0F, (-1729.3374F));
      assertNotNull(sash1);
      assertFalse(sash1.equals((Object)sash0));
      assertEquals((-1650.1865F), sash1.getYAxis(), 0.01F);
      assertEquals(0.0F, sash1.getWidth(), 0.01F);
      assertEquals(1.0F, sash1.getXAxis(), 0.01F);
      assertEquals((-1729.3374F), sash1.getEndAngle(), 0.01F);
      assertEquals(2.0F, sash1.getStartAngle(), 0.01F);
      
      sashArray0[1] = sash1;
      Sash sash2 = new Sash((-1.0F), (-1485.2021F), 0.0F, (-191.41281F), 1571.613F);
      assertNotNull(sash2);
      assertFalse(sash2.equals((Object)sash0));
      assertFalse(sash2.equals((Object)sash1));
      assertEquals((-191.41281F), sash2.getStartAngle(), 0.01F);
      assertEquals(1571.613F, sash2.getEndAngle(), 0.01F);
      assertEquals((-1485.2021F), sash2.getYAxis(), 0.01F);
      assertEquals(0.0F, sash2.getWidth(), 0.01F);
      assertEquals((-1.0F), sash2.getXAxis(), 0.01F);
      
      sashArray0[2] = sash2;
      Sash sash3 = new Sash(1810.0F, 381.9F, 0.0F, (-1.0F), (-1.0F));
      assertNotNull(sash3);
      assertFalse(sash3.equals((Object)sash1));
      assertFalse(sash3.equals((Object)sash2));
      assertFalse(sash3.equals((Object)sash0));
      assertEquals((-1.0F), sash3.getEndAngle(), 0.01F);
      assertEquals((-1.0F), sash3.getStartAngle(), 0.01F);
      assertEquals(1810.0F, sash3.getXAxis(), 0.01F);
      assertEquals(0.0F, sash3.getWidth(), 0.01F);
      assertEquals(381.9F, sash3.getYAxis(), 0.01F);
      
      sashArray0[3] = sash3;
      Sash sash4 = new Sash((-1.0F), 1571.613F, (-103.599365F), 1.0F, 381.9F);
      assertNotNull(sash4);
      assertFalse(sash4.equals((Object)sash3));
      assertFalse(sash4.equals((Object)sash2));
      assertFalse(sash4.equals((Object)sash0));
      assertFalse(sash4.equals((Object)sash1));
      assertEquals(1.0F, sash4.getStartAngle(), 0.01F);
      assertEquals((-1.0F), sash4.getXAxis(), 0.01F);
      assertEquals(1571.613F, sash4.getYAxis(), 0.01F);
      assertEquals((-103.599365F), sash4.getWidth(), 0.01F);
      assertEquals(381.9F, sash4.getEndAngle(), 0.01F);
      
      sashArray0[4] = sash4;
      Sash sash5 = new Sash((-1.0F), 0.3926991F, (-103.599365F), (-1650.1865F), 2.0F);
      assertNotNull(sash5);
      assertFalse(sash5.equals((Object)sash2));
      assertFalse(sash5.equals((Object)sash0));
      assertFalse(sash5.equals((Object)sash4));
      assertFalse(sash5.equals((Object)sash1));
      assertFalse(sash5.equals((Object)sash3));
      assertEquals(0.3926991F, sash5.getYAxis(), 0.01F);
      assertEquals((-1650.1865F), sash5.getStartAngle(), 0.01F);
      assertEquals((-1.0F), sash5.getXAxis(), 0.01F);
      assertEquals((-103.599365F), sash5.getWidth(), 0.01F);
      assertEquals(2.0F, sash5.getEndAngle(), 0.01F);
      
      sashArray0[5] = sash5;
      Sash sash6 = new Sash((-1485.2021F), (-368.692F), (-1.0F), (-3306.6028F), (-103.599365F));
      assertNotNull(sash6);
      assertFalse(sash6.equals((Object)sash3));
      assertFalse(sash6.equals((Object)sash2));
      assertFalse(sash6.equals((Object)sash4));
      assertFalse(sash6.equals((Object)sash1));
      assertFalse(sash6.equals((Object)sash0));
      assertFalse(sash6.equals((Object)sash5));
      assertEquals((-1485.2021F), sash6.getXAxis(), 0.01F);
      assertEquals((-103.599365F), sash6.getEndAngle(), 0.01F);
      assertEquals((-3306.6028F), sash6.getStartAngle(), 0.01F);
      assertEquals((-1.0F), sash6.getWidth(), 0.01F);
      assertEquals((-368.692F), sash6.getYAxis(), 0.01F);
      
      sashArray0[6] = sash6;
      Sash sash7 = new Sash((-368.692F), 760.2527F, 3533.4604F, (-279.02225F), 1.0F);
      assertNotNull(sash7);
      assertFalse(sash7.equals((Object)sash6));
      assertFalse(sash7.equals((Object)sash3));
      assertFalse(sash7.equals((Object)sash2));
      assertFalse(sash7.equals((Object)sash4));
      assertFalse(sash7.equals((Object)sash1));
      assertFalse(sash7.equals((Object)sash0));
      assertFalse(sash7.equals((Object)sash5));
      assertEquals(760.2527F, sash7.getYAxis(), 0.01F);
      assertEquals(1.0F, sash7.getEndAngle(), 0.01F);
      assertEquals((-279.02225F), sash7.getStartAngle(), 0.01F);
      assertEquals(3533.4604F, sash7.getWidth(), 0.01F);
      assertEquals((-368.692F), sash7.getXAxis(), 0.01F);
      
      sashArray0[7] = sash7;
      float[][] floatArray0 = new float[3][1];
      float[] floatArray1 = new float[3];
      floatArray1[0] = 1.0F;
      floatArray1[1] = (-1485.2021F);
      floatArray1[2] = (-1.0F);
      floatArray0[0] = floatArray1;
      float[] floatArray2 = new float[3];
      assertFalse(floatArray2.equals((Object)floatArray1));
      
      floatArray2[0] = 3533.4604F;
      floatArray2[1] = (-1.0F);
      floatArray2[2] = (-1.0F);
      floatArray0[1] = floatArray2;
      float[] floatArray3 = new float[9];
      assertFalse(floatArray3.equals((Object)floatArray1));
      assertFalse(floatArray3.equals((Object)floatArray2));
      
      floatArray3[0] = (-1.0F);
      floatArray3[1] = (-1729.3374F);
      floatArray3[2] = 3533.4604F;
      floatArray3[3] = (-103.599365F);
      floatArray3[4] = 3533.4604F;
      floatArray3[5] = (-1.0F);
      floatArray3[6] = 0.3926991F;
      floatArray3[7] = 0.0F;
      floatArray3[8] = (-1.0F);
      floatArray0[2] = floatArray3;
      CatalogDoorOrWindow catalogDoorOrWindow0 = new CatalogDoorOrWindow("", "", "", "", stringArray0, (Long) null, float0, uRLContent0, uRLContent0, uRLContent0, (-368.692F), (-1650.1865F), (-1.0F), (-368.692F), true, (-103.599365F), 0.0F, sashArray0, floatArray0, "", true, false, false, (BigDecimal) null, (BigDecimal) null, "");
      assertEquals(2, stringArray0.length);
      assertEquals(8, sashArray0.length);
      assertEquals(3, floatArray0.length);
      assertNotNull(catalogDoorOrWindow0);
      assertEquals("", catalogDoorOrWindow0.getCreator());
      assertEquals("", catalogDoorOrWindow0.getName());
      assertEquals("", catalogDoorOrWindow0.getDescription());
      assertEquals((-368.692F), catalogDoorOrWindow0.getElevation(), 0.01F);
      assertEquals((-1.0F), catalogDoorOrWindow0.getHeight(), 0.01F);
      assertNull(catalogDoorOrWindow0.getStaircaseCutOutShape());
      assertTrue(catalogDoorOrWindow0.isResizable());
      assertTrue(catalogDoorOrWindow0.isMovable());
      assertEquals((-1729.3374F), catalogDoorOrWindow0.getGrade(), 0.01F);
      assertEquals(0.3926991F, catalogDoorOrWindow0.getIconYaw(), 0.01F);
      assertNull(catalogDoorOrWindow0.getCreationDate());
      assertNull(catalogDoorOrWindow0.getColor());
      assertFalse(catalogDoorOrWindow0.isModifiable());
      assertEquals("", catalogDoorOrWindow0.getInformation());
      assertTrue(catalogDoorOrWindow0.isDoorOrWindow());
      assertEquals((-103.599365F), catalogDoorOrWindow0.getWallThickness(), 0.01F);
      assertEquals((-368.692F), catalogDoorOrWindow0.getWidth(), 0.01F);
      assertEquals("", catalogDoorOrWindow0.getCurrency());
      assertEquals((-1650.1865F), catalogDoorOrWindow0.getDepth(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isProportional());
      assertFalse(catalogDoorOrWindow0.isTexturable());
      assertFalse(catalogDoorOrWindow0.isBackFaceShown());
      assertEquals(0.0F, catalogDoorOrWindow0.getWallDistance(), 0.01F);
      assertEquals("", catalogDoorOrWindow0.getId());
      assertFalse(catalogDoorOrWindow0.isDeformable());
      
      HomeDoorOrWindow homeDoorOrWindow0 = new HomeDoorOrWindow(catalogDoorOrWindow0);
      assertEquals(2, stringArray0.length);
      assertEquals(8, sashArray0.length);
      assertEquals(3, floatArray0.length);
      assertNotNull(homeDoorOrWindow0);
      assertEquals("", catalogDoorOrWindow0.getCreator());
      assertEquals("", catalogDoorOrWindow0.getName());
      assertEquals("", catalogDoorOrWindow0.getDescription());
      assertEquals((-368.692F), catalogDoorOrWindow0.getElevation(), 0.01F);
      assertEquals((-1.0F), catalogDoorOrWindow0.getHeight(), 0.01F);
      assertNull(catalogDoorOrWindow0.getStaircaseCutOutShape());
      assertTrue(catalogDoorOrWindow0.isResizable());
      assertTrue(catalogDoorOrWindow0.isMovable());
      assertEquals((-1729.3374F), catalogDoorOrWindow0.getGrade(), 0.01F);
      assertEquals(0.3926991F, catalogDoorOrWindow0.getIconYaw(), 0.01F);
      assertNull(catalogDoorOrWindow0.getCreationDate());
      assertNull(catalogDoorOrWindow0.getColor());
      assertFalse(catalogDoorOrWindow0.isModifiable());
      assertEquals("", catalogDoorOrWindow0.getInformation());
      assertTrue(catalogDoorOrWindow0.isDoorOrWindow());
      assertEquals((-103.599365F), catalogDoorOrWindow0.getWallThickness(), 0.01F);
      assertEquals((-368.692F), catalogDoorOrWindow0.getWidth(), 0.01F);
      assertEquals("", catalogDoorOrWindow0.getCurrency());
      assertEquals((-1650.1865F), catalogDoorOrWindow0.getDepth(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isProportional());
      assertFalse(catalogDoorOrWindow0.isTexturable());
      assertFalse(catalogDoorOrWindow0.isBackFaceShown());
      assertEquals(0.0F, catalogDoorOrWindow0.getWallDistance(), 0.01F);
      assertEquals("", catalogDoorOrWindow0.getId());
      assertFalse(catalogDoorOrWindow0.isDeformable());
      assertFalse(homeDoorOrWindow0.isTexturable());
      assertEquals((-1650.1865F), homeDoorOrWindow0.getDepth(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getAngle(), 0.01F);
      assertEquals((-184.346F), homeDoorOrWindow0.getX(), 0.01F);
      assertEquals((-368.692F), homeDoorOrWindow0.getGroundElevation(), 0.01F);
      assertFalse(homeDoorOrWindow0.isModelMirrored());
      assertFalse(homeDoorOrWindow0.isBackFaceShown());
      assertFalse(homeDoorOrWindow0.isNameVisible());
      assertEquals("", homeDoorOrWindow0.getName());
      assertEquals((-825.09326F), homeDoorOrWindow0.getY(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getNameXOffset(), 0.01F);
      assertEquals((-103.599365F), homeDoorOrWindow0.getWallThickness(), 0.01F);
      assertEquals("", homeDoorOrWindow0.getDescription());
      assertEquals((-1.0F), homeDoorOrWindow0.getHeight(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getWallDistance(), 0.01F);
      assertTrue(homeDoorOrWindow0.isVisible());
      assertTrue(homeDoorOrWindow0.isResizable());
      assertTrue(homeDoorOrWindow0.isMovable());
      assertNull(homeDoorOrWindow0.getShininess());
      assertNull(homeDoorOrWindow0.getStaircaseCutOutShape());
      assertFalse(homeDoorOrWindow0.isBoundToWall());
      assertFalse(homeDoorOrWindow0.isDeformable());
      assertEquals(0.0F, homeDoorOrWindow0.getNameAngle(), 0.01F);
      assertTrue(homeDoorOrWindow0.isDoorOrWindow());
      assertEquals((-368.692F), homeDoorOrWindow0.getWidth(), 0.01F);
      assertEquals("", homeDoorOrWindow0.getCurrency());
      assertEquals("", homeDoorOrWindow0.getCatalogId());
      assertEquals(0.0F, homeDoorOrWindow0.getNameYOffset(), 0.01F);
      assertNull(homeDoorOrWindow0.getColor());
      assertEquals((-368.692F), homeDoorOrWindow0.getElevation(), 0.01F);
      
      HomeDoorOrWindow homeDoorOrWindow1 = homeDoorOrWindow0.clone();
      assertEquals(2, stringArray0.length);
      assertEquals(8, sashArray0.length);
      assertEquals(3, floatArray0.length);
      assertNotNull(homeDoorOrWindow1);
      assertNotSame(homeDoorOrWindow0, homeDoorOrWindow1);
      assertNotSame(homeDoorOrWindow1, homeDoorOrWindow0);
      assertFalse(homeDoorOrWindow1.equals((Object)homeDoorOrWindow0));
      assertEquals("", catalogDoorOrWindow0.getCreator());
      assertEquals("", catalogDoorOrWindow0.getName());
      assertEquals("", catalogDoorOrWindow0.getDescription());
      assertEquals((-368.692F), catalogDoorOrWindow0.getElevation(), 0.01F);
      assertEquals((-1.0F), catalogDoorOrWindow0.getHeight(), 0.01F);
      assertNull(catalogDoorOrWindow0.getStaircaseCutOutShape());
      assertTrue(catalogDoorOrWindow0.isResizable());
      assertTrue(catalogDoorOrWindow0.isMovable());
      assertEquals((-1729.3374F), catalogDoorOrWindow0.getGrade(), 0.01F);
      assertEquals(0.3926991F, catalogDoorOrWindow0.getIconYaw(), 0.01F);
      assertNull(catalogDoorOrWindow0.getCreationDate());
      assertNull(catalogDoorOrWindow0.getColor());
      assertFalse(catalogDoorOrWindow0.isModifiable());
      assertEquals("", catalogDoorOrWindow0.getInformation());
      assertTrue(catalogDoorOrWindow0.isDoorOrWindow());
      assertEquals((-103.599365F), catalogDoorOrWindow0.getWallThickness(), 0.01F);
      assertEquals((-368.692F), catalogDoorOrWindow0.getWidth(), 0.01F);
      assertEquals("", catalogDoorOrWindow0.getCurrency());
      assertEquals((-1650.1865F), catalogDoorOrWindow0.getDepth(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isProportional());
      assertFalse(catalogDoorOrWindow0.isTexturable());
      assertFalse(catalogDoorOrWindow0.isBackFaceShown());
      assertEquals(0.0F, catalogDoorOrWindow0.getWallDistance(), 0.01F);
      assertEquals("", catalogDoorOrWindow0.getId());
      assertFalse(catalogDoorOrWindow0.isDeformable());
      assertFalse(homeDoorOrWindow0.isTexturable());
      assertEquals((-1650.1865F), homeDoorOrWindow0.getDepth(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getAngle(), 0.01F);
      assertEquals((-184.346F), homeDoorOrWindow0.getX(), 0.01F);
      assertEquals((-368.692F), homeDoorOrWindow0.getGroundElevation(), 0.01F);
      assertFalse(homeDoorOrWindow0.isModelMirrored());
      assertFalse(homeDoorOrWindow0.isBackFaceShown());
      assertFalse(homeDoorOrWindow0.isNameVisible());
      assertEquals("", homeDoorOrWindow0.getName());
      assertEquals((-825.09326F), homeDoorOrWindow0.getY(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getNameXOffset(), 0.01F);
      assertEquals((-103.599365F), homeDoorOrWindow0.getWallThickness(), 0.01F);
      assertEquals("", homeDoorOrWindow0.getDescription());
      assertEquals((-1.0F), homeDoorOrWindow0.getHeight(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getWallDistance(), 0.01F);
      assertTrue(homeDoorOrWindow0.isVisible());
      assertTrue(homeDoorOrWindow0.isResizable());
      assertTrue(homeDoorOrWindow0.isMovable());
      assertNull(homeDoorOrWindow0.getShininess());
      assertNull(homeDoorOrWindow0.getStaircaseCutOutShape());
      assertFalse(homeDoorOrWindow0.isBoundToWall());
      assertFalse(homeDoorOrWindow0.isDeformable());
      assertEquals(0.0F, homeDoorOrWindow0.getNameAngle(), 0.01F);
      assertTrue(homeDoorOrWindow0.isDoorOrWindow());
      assertEquals((-368.692F), homeDoorOrWindow0.getWidth(), 0.01F);
      assertEquals("", homeDoorOrWindow0.getCurrency());
      assertEquals("", homeDoorOrWindow0.getCatalogId());
      assertEquals(0.0F, homeDoorOrWindow0.getNameYOffset(), 0.01F);
      assertNull(homeDoorOrWindow0.getColor());
      assertEquals((-368.692F), homeDoorOrWindow0.getElevation(), 0.01F);
      assertTrue(homeDoorOrWindow1.isResizable());
      assertTrue(homeDoorOrWindow1.isDoorOrWindow());
      assertEquals(0.0F, homeDoorOrWindow1.getWallDistance(), 0.01F);
      assertNull(homeDoorOrWindow1.getStaircaseCutOutShape());
      assertEquals((-1.0F), homeDoorOrWindow1.getHeight(), 0.01F);
      assertNull(homeDoorOrWindow1.getShininess());
      assertEquals(0.0F, homeDoorOrWindow1.getNameAngle(), 0.01F);
      assertFalse(homeDoorOrWindow1.isBoundToWall());
      assertEquals("", homeDoorOrWindow1.getName());
      assertTrue(homeDoorOrWindow1.isMovable());
      assertEquals(0.0F, homeDoorOrWindow1.getNameYOffset(), 0.01F);
      assertEquals("", homeDoorOrWindow1.getCurrency());
      assertEquals((-368.692F), homeDoorOrWindow1.getWidth(), 0.01F);
      assertEquals((-184.346F), homeDoorOrWindow1.getX(), 0.01F);
      assertEquals((-368.692F), homeDoorOrWindow1.getElevation(), 0.01F);
      assertEquals((-368.692F), homeDoorOrWindow1.getGroundElevation(), 0.01F);
      assertNull(homeDoorOrWindow1.getColor());
      assertEquals("", homeDoorOrWindow1.getCatalogId());
      assertFalse(homeDoorOrWindow1.isModelMirrored());
      assertFalse(homeDoorOrWindow1.isBackFaceShown());
      assertEquals((-103.599365F), homeDoorOrWindow1.getWallThickness(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow1.getAngle(), 0.01F);
      assertFalse(homeDoorOrWindow1.isNameVisible());
      assertFalse(homeDoorOrWindow1.isDeformable());
      assertEquals("", homeDoorOrWindow1.getDescription());
      assertTrue(homeDoorOrWindow1.isVisible());
      assertEquals((-1650.1865F), homeDoorOrWindow1.getDepth(), 0.01F);
      assertFalse(homeDoorOrWindow1.isTexturable());
      assertEquals(0.0F, homeDoorOrWindow1.getNameXOffset(), 0.01F);
      assertEquals((-825.09326F), homeDoorOrWindow1.getY(), 0.01F);
      
      homeDoorOrWindow1.setNameXOffset(2.0F);
      assertEquals(2, stringArray0.length);
      assertEquals(8, sashArray0.length);
      assertEquals(3, floatArray0.length);
      assertNotSame(homeDoorOrWindow0, homeDoorOrWindow1);
      assertNotSame(homeDoorOrWindow1, homeDoorOrWindow0);
      assertFalse(homeDoorOrWindow0.equals((Object)homeDoorOrWindow1));
      assertFalse(homeDoorOrWindow1.equals((Object)homeDoorOrWindow0));
      assertEquals("", catalogDoorOrWindow0.getCreator());
      assertEquals("", catalogDoorOrWindow0.getName());
      assertEquals("", catalogDoorOrWindow0.getDescription());
      assertEquals((-368.692F), catalogDoorOrWindow0.getElevation(), 0.01F);
      assertEquals((-1.0F), catalogDoorOrWindow0.getHeight(), 0.01F);
      assertNull(catalogDoorOrWindow0.getStaircaseCutOutShape());
      assertTrue(catalogDoorOrWindow0.isResizable());
      assertTrue(catalogDoorOrWindow0.isMovable());
      assertEquals((-1729.3374F), catalogDoorOrWindow0.getGrade(), 0.01F);
      assertEquals(0.3926991F, catalogDoorOrWindow0.getIconYaw(), 0.01F);
      assertNull(catalogDoorOrWindow0.getCreationDate());
      assertNull(catalogDoorOrWindow0.getColor());
      assertFalse(catalogDoorOrWindow0.isModifiable());
      assertEquals("", catalogDoorOrWindow0.getInformation());
      assertTrue(catalogDoorOrWindow0.isDoorOrWindow());
      assertEquals((-103.599365F), catalogDoorOrWindow0.getWallThickness(), 0.01F);
      assertEquals((-368.692F), catalogDoorOrWindow0.getWidth(), 0.01F);
      assertEquals("", catalogDoorOrWindow0.getCurrency());
      assertEquals((-1650.1865F), catalogDoorOrWindow0.getDepth(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isProportional());
      assertFalse(catalogDoorOrWindow0.isTexturable());
      assertFalse(catalogDoorOrWindow0.isBackFaceShown());
      assertEquals(0.0F, catalogDoorOrWindow0.getWallDistance(), 0.01F);
      assertEquals("", catalogDoorOrWindow0.getId());
      assertFalse(catalogDoorOrWindow0.isDeformable());
      assertFalse(homeDoorOrWindow0.isTexturable());
      assertEquals((-1650.1865F), homeDoorOrWindow0.getDepth(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getAngle(), 0.01F);
      assertEquals((-184.346F), homeDoorOrWindow0.getX(), 0.01F);
      assertEquals((-368.692F), homeDoorOrWindow0.getGroundElevation(), 0.01F);
      assertFalse(homeDoorOrWindow0.isModelMirrored());
      assertFalse(homeDoorOrWindow0.isBackFaceShown());
      assertFalse(homeDoorOrWindow0.isNameVisible());
      assertEquals("", homeDoorOrWindow0.getName());
      assertEquals((-825.09326F), homeDoorOrWindow0.getY(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getNameXOffset(), 0.01F);
      assertEquals((-103.599365F), homeDoorOrWindow0.getWallThickness(), 0.01F);
      assertEquals("", homeDoorOrWindow0.getDescription());
      assertEquals((-1.0F), homeDoorOrWindow0.getHeight(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getWallDistance(), 0.01F);
      assertTrue(homeDoorOrWindow0.isVisible());
      assertTrue(homeDoorOrWindow0.isResizable());
      assertTrue(homeDoorOrWindow0.isMovable());
      assertNull(homeDoorOrWindow0.getShininess());
      assertNull(homeDoorOrWindow0.getStaircaseCutOutShape());
      assertFalse(homeDoorOrWindow0.isBoundToWall());
      assertFalse(homeDoorOrWindow0.isDeformable());
      assertEquals(0.0F, homeDoorOrWindow0.getNameAngle(), 0.01F);
      assertTrue(homeDoorOrWindow0.isDoorOrWindow());
      assertEquals((-368.692F), homeDoorOrWindow0.getWidth(), 0.01F);
      assertEquals("", homeDoorOrWindow0.getCurrency());
      assertEquals("", homeDoorOrWindow0.getCatalogId());
      assertEquals(0.0F, homeDoorOrWindow0.getNameYOffset(), 0.01F);
      assertNull(homeDoorOrWindow0.getColor());
      assertEquals((-368.692F), homeDoorOrWindow0.getElevation(), 0.01F);
      assertTrue(homeDoorOrWindow1.isResizable());
      assertTrue(homeDoorOrWindow1.isDoorOrWindow());
      assertEquals(0.0F, homeDoorOrWindow1.getWallDistance(), 0.01F);
      assertNull(homeDoorOrWindow1.getStaircaseCutOutShape());
      assertEquals((-1.0F), homeDoorOrWindow1.getHeight(), 0.01F);
      assertNull(homeDoorOrWindow1.getShininess());
      assertEquals(0.0F, homeDoorOrWindow1.getNameAngle(), 0.01F);
      assertFalse(homeDoorOrWindow1.isBoundToWall());
      assertEquals("", homeDoorOrWindow1.getName());
      assertTrue(homeDoorOrWindow1.isMovable());
      assertEquals(0.0F, homeDoorOrWindow1.getNameYOffset(), 0.01F);
      assertEquals("", homeDoorOrWindow1.getCurrency());
      assertEquals((-368.692F), homeDoorOrWindow1.getWidth(), 0.01F);
      assertEquals((-184.346F), homeDoorOrWindow1.getX(), 0.01F);
      assertEquals((-368.692F), homeDoorOrWindow1.getElevation(), 0.01F);
      assertEquals((-368.692F), homeDoorOrWindow1.getGroundElevation(), 0.01F);
      assertNull(homeDoorOrWindow1.getColor());
      assertEquals("", homeDoorOrWindow1.getCatalogId());
      assertFalse(homeDoorOrWindow1.isModelMirrored());
      assertFalse(homeDoorOrWindow1.isBackFaceShown());
      assertEquals((-103.599365F), homeDoorOrWindow1.getWallThickness(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow1.getAngle(), 0.01F);
      assertFalse(homeDoorOrWindow1.isNameVisible());
      assertFalse(homeDoorOrWindow1.isDeformable());
      assertEquals("", homeDoorOrWindow1.getDescription());
      assertTrue(homeDoorOrWindow1.isVisible());
      assertEquals((-1650.1865F), homeDoorOrWindow1.getDepth(), 0.01F);
      assertFalse(homeDoorOrWindow1.isTexturable());
      assertEquals(2.0F, homeDoorOrWindow1.getNameXOffset(), 0.01F);
      assertEquals((-825.09326F), homeDoorOrWindow1.getY(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test213()  throws Throwable  {
      Integer integer0 = new Integer((-1469));
      assertNotNull(integer0);
      assertEquals((-1469), (int)integer0);
      
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      Light light0 = mock(Light.class, new ViolatedAssumptionAnswer());
      doReturn((LightSource[]) null).when(light0).getLightSources();
      doReturn((Integer) null).when(light0).getColor();
      doReturn((String) null).when(light0).getCurrency();
      doReturn(0.0F).when(light0).getDepth();
      doReturn((String) null).when(light0).getDescription();
      doReturn(0.0F).when(light0).getElevation();
      doReturn(0.0F).when(light0).getHeight();
      doReturn((Content) null).when(light0).getIcon();
      doReturn((Content) null).when(light0).getModel();
      doReturn((float[][]) null).when(light0).getModelRotation();
      doReturn((String) null).when(light0).getName();
      doReturn((Content) null).when(light0).getPlanIcon();
      doReturn((BigDecimal) null).when(light0).getPrice();
      doReturn((String) null).when(light0).getStaircaseCutOutShape();
      doReturn((BigDecimal) null).when(light0).getValueAddedTaxPercentage();
      doReturn(0.0F).when(light0).getWidth();
      doReturn(false).when(light0).isBackFaceShown();
      doReturn(false).when(light0).isDeformable();
      doReturn(false).when(light0).isDoorOrWindow();
      doReturn(false).when(light0).isMovable();
      doReturn(false).when(light0).isResizable();
      doReturn(false).when(light0).isTexturable();
      HomeLight homeLight0 = new HomeLight(light0);
      assertNotNull(homeLight0);
      assertFalse(homeLight0.isDeformable());
      assertFalse(homeLight0.isNameVisible());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertFalse(homeLight0.isBackFaceShown());
      assertFalse(homeLight0.isModelMirrored());
      assertNull(homeLight0.getColor());
      assertTrue(homeLight0.isVisible());
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertFalse(homeLight0.isTexturable());
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertNull(homeLight0.getDescription());
      assertFalse(homeLight0.isDoorOrWindow());
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertNull(homeLight0.getCatalogId());
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertNull(homeLight0.getName());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertNull(homeLight0.getShininess());
      assertFalse(homeLight0.isMovable());
      assertFalse(homeLight0.isResizable());
      assertNull(homeLight0.getCurrency());
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      
      homeLight0.setElevation((-1.0F));
      assertFalse(homeLight0.isDeformable());
      assertFalse(homeLight0.isNameVisible());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertFalse(homeLight0.isBackFaceShown());
      assertFalse(homeLight0.isModelMirrored());
      assertNull(homeLight0.getColor());
      assertTrue(homeLight0.isVisible());
      assertEquals((-1.0F), homeLight0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertFalse(homeLight0.isTexturable());
      assertEquals((-1.0F), homeLight0.getElevation(), 0.01F);
      assertNull(homeLight0.getDescription());
      assertFalse(homeLight0.isDoorOrWindow());
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertNull(homeLight0.getCatalogId());
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertNull(homeLight0.getName());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertNull(homeLight0.getShininess());
      assertFalse(homeLight0.isMovable());
      assertFalse(homeLight0.isResizable());
      assertNull(homeLight0.getCurrency());
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      
      boolean boolean1 = homeLight0.isTopLeftPointAt(0.6792272F, (-1.0F), 25.36065F);
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      assertFalse(homeLight0.isDeformable());
      assertFalse(homeLight0.isNameVisible());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertFalse(homeLight0.isBackFaceShown());
      assertFalse(homeLight0.isModelMirrored());
      assertNull(homeLight0.getColor());
      assertTrue(homeLight0.isVisible());
      assertEquals((-1.0F), homeLight0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertFalse(homeLight0.isTexturable());
      assertEquals((-1.0F), homeLight0.getElevation(), 0.01F);
      assertNull(homeLight0.getDescription());
      assertFalse(homeLight0.isDoorOrWindow());
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertNull(homeLight0.getCatalogId());
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertNull(homeLight0.getName());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertNull(homeLight0.getShininess());
      assertFalse(homeLight0.isMovable());
      assertFalse(homeLight0.isResizable());
      assertNull(homeLight0.getCurrency());
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      
      HomeLight homeLight1 = homeLight0.clone();
      assertNotNull(homeLight1);
      assertNotSame(homeLight0, homeLight1);
      assertNotSame(homeLight1, homeLight0);
      assertFalse(homeLight1.equals((Object)homeLight0));
      assertFalse(homeLight0.isDeformable());
      assertFalse(homeLight0.isNameVisible());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertFalse(homeLight0.isBackFaceShown());
      assertFalse(homeLight0.isModelMirrored());
      assertNull(homeLight0.getColor());
      assertTrue(homeLight0.isVisible());
      assertEquals((-1.0F), homeLight0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertFalse(homeLight0.isTexturable());
      assertEquals((-1.0F), homeLight0.getElevation(), 0.01F);
      assertNull(homeLight0.getDescription());
      assertFalse(homeLight0.isDoorOrWindow());
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertNull(homeLight0.getCatalogId());
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertNull(homeLight0.getName());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertNull(homeLight0.getShininess());
      assertFalse(homeLight0.isMovable());
      assertFalse(homeLight0.isResizable());
      assertNull(homeLight0.getCurrency());
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertNull(homeLight1.getName());
      assertEquals(0.5F, homeLight1.getPower(), 0.01F);
      assertEquals(0.0F, homeLight1.getDepth(), 0.01F);
      assertEquals(0.0F, homeLight1.getNameAngle(), 0.01F);
      assertNull(homeLight1.getCatalogId());
      assertEquals(0.0F, homeLight1.getNameXOffset(), 0.01F);
      assertNull(homeLight1.getDescription());
      assertEquals((-1.0F), homeLight1.getElevation(), 0.01F);
      assertFalse(homeLight1.isMovable());
      assertEquals(0.0F, homeLight1.getHeight(), 0.01F);
      assertFalse(homeLight1.isBackFaceShown());
      assertFalse(homeLight1.isModelMirrored());
      assertEquals(0.0F, homeLight1.getNameYOffset(), 0.01F);
      assertNull(homeLight1.getColor());
      assertFalse(homeLight1.isDeformable());
      assertFalse(homeLight1.isNameVisible());
      assertEquals(0.0F, homeLight1.getWidth(), 0.01F);
      assertFalse(homeLight1.isDoorOrWindow());
      assertNull(homeLight1.getCurrency());
      assertEquals(0.0F, homeLight1.getAngle(), 0.01F);
      assertEquals((-1.0F), homeLight1.getGroundElevation(), 0.01F);
      assertFalse(homeLight1.isResizable());
      assertFalse(homeLight1.isTexturable());
      assertTrue(homeLight1.isVisible());
      assertNull(homeLight1.getShininess());
      assertEquals(0.0F, homeLight1.getY(), 0.01F);
      assertEquals(0.0F, homeLight1.getX(), 0.01F);
      assertNull(homeLight1.getStaircaseCutOutShape());
      
      homeLight1.setNameXOffset(0.6792272F);
      assertNotSame(homeLight0, homeLight1);
      assertNotSame(homeLight1, homeLight0);
      assertFalse(homeLight0.equals((Object)homeLight1));
      assertFalse(homeLight1.equals((Object)homeLight0));
      assertFalse(homeLight0.isDeformable());
      assertFalse(homeLight0.isNameVisible());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertFalse(homeLight0.isBackFaceShown());
      assertFalse(homeLight0.isModelMirrored());
      assertNull(homeLight0.getColor());
      assertTrue(homeLight0.isVisible());
      assertEquals((-1.0F), homeLight0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertFalse(homeLight0.isTexturable());
      assertEquals((-1.0F), homeLight0.getElevation(), 0.01F);
      assertNull(homeLight0.getDescription());
      assertFalse(homeLight0.isDoorOrWindow());
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertNull(homeLight0.getCatalogId());
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertNull(homeLight0.getName());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertNull(homeLight0.getShininess());
      assertFalse(homeLight0.isMovable());
      assertFalse(homeLight0.isResizable());
      assertNull(homeLight0.getCurrency());
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals(0.6792272F, homeLight1.getNameXOffset(), 0.01F);
      assertNull(homeLight1.getName());
      assertEquals(0.5F, homeLight1.getPower(), 0.01F);
      assertEquals(0.0F, homeLight1.getDepth(), 0.01F);
      assertEquals(0.0F, homeLight1.getNameAngle(), 0.01F);
      assertNull(homeLight1.getCatalogId());
      assertNull(homeLight1.getDescription());
      assertEquals((-1.0F), homeLight1.getElevation(), 0.01F);
      assertFalse(homeLight1.isMovable());
      assertEquals(0.0F, homeLight1.getHeight(), 0.01F);
      assertFalse(homeLight1.isBackFaceShown());
      assertFalse(homeLight1.isModelMirrored());
      assertEquals(0.0F, homeLight1.getNameYOffset(), 0.01F);
      assertNull(homeLight1.getColor());
      assertFalse(homeLight1.isDeformable());
      assertFalse(homeLight1.isNameVisible());
      assertEquals(0.0F, homeLight1.getWidth(), 0.01F);
      assertFalse(homeLight1.isDoorOrWindow());
      assertNull(homeLight1.getCurrency());
      assertEquals(0.0F, homeLight1.getAngle(), 0.01F);
      assertEquals((-1.0F), homeLight1.getGroundElevation(), 0.01F);
      assertFalse(homeLight1.isResizable());
      assertFalse(homeLight1.isTexturable());
      assertTrue(homeLight1.isVisible());
      assertNull(homeLight1.getShininess());
      assertEquals(0.0F, homeLight1.getY(), 0.01F);
      assertEquals(0.0F, homeLight1.getX(), 0.01F);
      assertNull(homeLight1.getStaircaseCutOutShape());
      
      Level level0 = homeLight1.getLevel();
      assertNull(level0);
      assertNotSame(homeLight0, homeLight1);
      assertNotSame(homeLight1, homeLight0);
      assertFalse(homeLight0.equals((Object)homeLight1));
      assertFalse(homeLight1.equals((Object)homeLight0));
      assertFalse(homeLight0.isDeformable());
      assertFalse(homeLight0.isNameVisible());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertFalse(homeLight0.isBackFaceShown());
      assertFalse(homeLight0.isModelMirrored());
      assertNull(homeLight0.getColor());
      assertTrue(homeLight0.isVisible());
      assertEquals((-1.0F), homeLight0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertFalse(homeLight0.isTexturable());
      assertEquals((-1.0F), homeLight0.getElevation(), 0.01F);
      assertNull(homeLight0.getDescription());
      assertFalse(homeLight0.isDoorOrWindow());
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertNull(homeLight0.getCatalogId());
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertNull(homeLight0.getName());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertNull(homeLight0.getShininess());
      assertFalse(homeLight0.isMovable());
      assertFalse(homeLight0.isResizable());
      assertNull(homeLight0.getCurrency());
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals(0.6792272F, homeLight1.getNameXOffset(), 0.01F);
      assertNull(homeLight1.getName());
      assertEquals(0.5F, homeLight1.getPower(), 0.01F);
      assertEquals(0.0F, homeLight1.getDepth(), 0.01F);
      assertEquals(0.0F, homeLight1.getNameAngle(), 0.01F);
      assertNull(homeLight1.getCatalogId());
      assertNull(homeLight1.getDescription());
      assertEquals((-1.0F), homeLight1.getElevation(), 0.01F);
      assertFalse(homeLight1.isMovable());
      assertEquals(0.0F, homeLight1.getHeight(), 0.01F);
      assertFalse(homeLight1.isBackFaceShown());
      assertFalse(homeLight1.isModelMirrored());
      assertEquals(0.0F, homeLight1.getNameYOffset(), 0.01F);
      assertNull(homeLight1.getColor());
      assertFalse(homeLight1.isDeformable());
      assertFalse(homeLight1.isNameVisible());
      assertEquals(0.0F, homeLight1.getWidth(), 0.01F);
      assertFalse(homeLight1.isDoorOrWindow());
      assertNull(homeLight1.getCurrency());
      assertEquals(0.0F, homeLight1.getAngle(), 0.01F);
      assertEquals((-1.0F), homeLight1.getGroundElevation(), 0.01F);
      assertFalse(homeLight1.isResizable());
      assertFalse(homeLight1.isTexturable());
      assertTrue(homeLight1.isVisible());
      assertNull(homeLight1.getShininess());
      assertEquals(0.0F, homeLight1.getY(), 0.01F);
      assertEquals(0.0F, homeLight1.getX(), 0.01F);
      assertNull(homeLight1.getStaircaseCutOutShape());
      
      boolean boolean2 = homeLight1.isNameCenterPointAt(25.36065F, (-1238.5927F), 1870.3401F);
      assertNotSame(homeLight0, homeLight1);
      assertNotSame(homeLight1, homeLight0);
      assertFalse(homeLight0.equals((Object)homeLight1));
      assertFalse(homeLight1.equals((Object)homeLight0));
      assertTrue(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      assertTrue(boolean2);
      assertFalse(homeLight0.isDeformable());
      assertFalse(homeLight0.isNameVisible());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertFalse(homeLight0.isBackFaceShown());
      assertFalse(homeLight0.isModelMirrored());
      assertNull(homeLight0.getColor());
      assertTrue(homeLight0.isVisible());
      assertEquals((-1.0F), homeLight0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertFalse(homeLight0.isTexturable());
      assertEquals((-1.0F), homeLight0.getElevation(), 0.01F);
      assertNull(homeLight0.getDescription());
      assertFalse(homeLight0.isDoorOrWindow());
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertNull(homeLight0.getCatalogId());
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertNull(homeLight0.getName());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertNull(homeLight0.getShininess());
      assertFalse(homeLight0.isMovable());
      assertFalse(homeLight0.isResizable());
      assertNull(homeLight0.getCurrency());
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals(0.6792272F, homeLight1.getNameXOffset(), 0.01F);
      assertNull(homeLight1.getName());
      assertEquals(0.5F, homeLight1.getPower(), 0.01F);
      assertEquals(0.0F, homeLight1.getDepth(), 0.01F);
      assertEquals(0.0F, homeLight1.getNameAngle(), 0.01F);
      assertNull(homeLight1.getCatalogId());
      assertNull(homeLight1.getDescription());
      assertEquals((-1.0F), homeLight1.getElevation(), 0.01F);
      assertFalse(homeLight1.isMovable());
      assertEquals(0.0F, homeLight1.getHeight(), 0.01F);
      assertFalse(homeLight1.isBackFaceShown());
      assertFalse(homeLight1.isModelMirrored());
      assertEquals(0.0F, homeLight1.getNameYOffset(), 0.01F);
      assertNull(homeLight1.getColor());
      assertFalse(homeLight1.isDeformable());
      assertFalse(homeLight1.isNameVisible());
      assertEquals(0.0F, homeLight1.getWidth(), 0.01F);
      assertFalse(homeLight1.isDoorOrWindow());
      assertNull(homeLight1.getCurrency());
      assertEquals(0.0F, homeLight1.getAngle(), 0.01F);
      assertEquals((-1.0F), homeLight1.getGroundElevation(), 0.01F);
      assertFalse(homeLight1.isResizable());
      assertFalse(homeLight1.isTexturable());
      assertTrue(homeLight1.isVisible());
      assertNull(homeLight1.getShininess());
      assertEquals(0.0F, homeLight1.getY(), 0.01F);
      assertEquals(0.0F, homeLight1.getX(), 0.01F);
      assertNull(homeLight1.getStaircaseCutOutShape());
      
      TextStyle textStyle0 = homeLight1.getNameStyle();
      assertNull(textStyle0);
      assertNotSame(homeLight0, homeLight1);
      assertNotSame(homeLight1, homeLight0);
      assertFalse(homeLight0.equals((Object)homeLight1));
      assertFalse(homeLight1.equals((Object)homeLight0));
      assertFalse(homeLight0.isDeformable());
      assertFalse(homeLight0.isNameVisible());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertFalse(homeLight0.isBackFaceShown());
      assertFalse(homeLight0.isModelMirrored());
      assertNull(homeLight0.getColor());
      assertTrue(homeLight0.isVisible());
      assertEquals((-1.0F), homeLight0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertFalse(homeLight0.isTexturable());
      assertEquals((-1.0F), homeLight0.getElevation(), 0.01F);
      assertNull(homeLight0.getDescription());
      assertFalse(homeLight0.isDoorOrWindow());
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertNull(homeLight0.getCatalogId());
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertNull(homeLight0.getName());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertNull(homeLight0.getShininess());
      assertFalse(homeLight0.isMovable());
      assertFalse(homeLight0.isResizable());
      assertNull(homeLight0.getCurrency());
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals(0.6792272F, homeLight1.getNameXOffset(), 0.01F);
      assertNull(homeLight1.getName());
      assertEquals(0.5F, homeLight1.getPower(), 0.01F);
      assertEquals(0.0F, homeLight1.getDepth(), 0.01F);
      assertEquals(0.0F, homeLight1.getNameAngle(), 0.01F);
      assertNull(homeLight1.getCatalogId());
      assertNull(homeLight1.getDescription());
      assertEquals((-1.0F), homeLight1.getElevation(), 0.01F);
      assertFalse(homeLight1.isMovable());
      assertEquals(0.0F, homeLight1.getHeight(), 0.01F);
      assertFalse(homeLight1.isBackFaceShown());
      assertFalse(homeLight1.isModelMirrored());
      assertEquals(0.0F, homeLight1.getNameYOffset(), 0.01F);
      assertNull(homeLight1.getColor());
      assertFalse(homeLight1.isDeformable());
      assertFalse(homeLight1.isNameVisible());
      assertEquals(0.0F, homeLight1.getWidth(), 0.01F);
      assertFalse(homeLight1.isDoorOrWindow());
      assertNull(homeLight1.getCurrency());
      assertEquals(0.0F, homeLight1.getAngle(), 0.01F);
      assertEquals((-1.0F), homeLight1.getGroundElevation(), 0.01F);
      assertFalse(homeLight1.isResizable());
      assertFalse(homeLight1.isTexturable());
      assertTrue(homeLight1.isVisible());
      assertNull(homeLight1.getShininess());
      assertEquals(0.0F, homeLight1.getY(), 0.01F);
      assertEquals(0.0F, homeLight1.getX(), 0.01F);
      assertNull(homeLight1.getStaircaseCutOutShape());
      
      Level level1 = new Level("/l@F:p;2)x~_:=u#Q", 1572.943F, 277.1391F, 0.3926991F);
      assertNotNull(level1);
      assertEquals(277.1391F, level1.getFloorThickness(), 0.01F);
      assertEquals("/l@F:p;2)x~_:=u#Q", level1.getName());
      assertTrue(level1.isVisible());
      assertEquals(1572.943F, level1.getElevation(), 0.01F);
      assertEquals(0.3926991F, level1.getHeight(), 0.01F);
      
      boolean boolean3 = homeLight1.isAtLevel(level1);
      assertNotSame(homeLight0, homeLight1);
      assertNotSame(homeLight1, homeLight0);
      assertFalse(homeLight0.equals((Object)homeLight1));
      assertFalse(homeLight1.equals((Object)homeLight0));
      assertFalse(boolean3 == boolean0);
      assertTrue(boolean3 == boolean1);
      assertFalse(boolean3 == boolean2);
      assertFalse(boolean3);
      assertFalse(homeLight0.isDeformable());
      assertFalse(homeLight0.isNameVisible());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertFalse(homeLight0.isBackFaceShown());
      assertFalse(homeLight0.isModelMirrored());
      assertNull(homeLight0.getColor());
      assertTrue(homeLight0.isVisible());
      assertEquals((-1.0F), homeLight0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertFalse(homeLight0.isTexturable());
      assertEquals((-1.0F), homeLight0.getElevation(), 0.01F);
      assertNull(homeLight0.getDescription());
      assertFalse(homeLight0.isDoorOrWindow());
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertNull(homeLight0.getCatalogId());
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertNull(homeLight0.getName());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertNull(homeLight0.getShininess());
      assertFalse(homeLight0.isMovable());
      assertFalse(homeLight0.isResizable());
      assertNull(homeLight0.getCurrency());
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals(0.6792272F, homeLight1.getNameXOffset(), 0.01F);
      assertNull(homeLight1.getName());
      assertEquals(0.5F, homeLight1.getPower(), 0.01F);
      assertEquals(0.0F, homeLight1.getDepth(), 0.01F);
      assertEquals(0.0F, homeLight1.getNameAngle(), 0.01F);
      assertNull(homeLight1.getCatalogId());
      assertNull(homeLight1.getDescription());
      assertEquals((-1.0F), homeLight1.getElevation(), 0.01F);
      assertFalse(homeLight1.isMovable());
      assertEquals(0.0F, homeLight1.getHeight(), 0.01F);
      assertFalse(homeLight1.isBackFaceShown());
      assertFalse(homeLight1.isModelMirrored());
      assertEquals(0.0F, homeLight1.getNameYOffset(), 0.01F);
      assertNull(homeLight1.getColor());
      assertFalse(homeLight1.isDeformable());
      assertFalse(homeLight1.isNameVisible());
      assertEquals(0.0F, homeLight1.getWidth(), 0.01F);
      assertFalse(homeLight1.isDoorOrWindow());
      assertNull(homeLight1.getCurrency());
      assertEquals(0.0F, homeLight1.getAngle(), 0.01F);
      assertEquals((-1.0F), homeLight1.getGroundElevation(), 0.01F);
      assertFalse(homeLight1.isResizable());
      assertFalse(homeLight1.isTexturable());
      assertTrue(homeLight1.isVisible());
      assertNull(homeLight1.getShininess());
      assertEquals(0.0F, homeLight1.getY(), 0.01F);
      assertEquals(0.0F, homeLight1.getX(), 0.01F);
      assertNull(homeLight1.getStaircaseCutOutShape());
      assertEquals(277.1391F, level1.getFloorThickness(), 0.01F);
      assertEquals("/l@F:p;2)x~_:=u#Q", level1.getName());
      assertTrue(level1.isVisible());
      assertEquals(1572.943F, level1.getElevation(), 0.01F);
      assertEquals(0.3926991F, level1.getHeight(), 0.01F);
      
      Float float0 = new Float((float) (-1469));
      assertNotNull(float0);
      assertEquals((-1469.0F), (float)float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test214()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      Light light0 = mock(Light.class, new ViolatedAssumptionAnswer());
      doReturn((LightSource[]) null).when(light0).getLightSources();
      doReturn((Integer) null).when(light0).getColor();
      doReturn((String) null).when(light0).getCurrency();
      doReturn(0.0F).when(light0).getDepth();
      doReturn((String) null).when(light0).getDescription();
      doReturn(0.0F).when(light0).getElevation();
      doReturn(0.0F).when(light0).getHeight();
      doReturn((Content) null).when(light0).getIcon();
      doReturn((Content) null).when(light0).getModel();
      doReturn((float[][]) null).when(light0).getModelRotation();
      doReturn((String) null).when(light0).getName();
      doReturn((Content) null).when(light0).getPlanIcon();
      doReturn((BigDecimal) null).when(light0).getPrice();
      doReturn((String) null).when(light0).getStaircaseCutOutShape();
      doReturn((BigDecimal) null).when(light0).getValueAddedTaxPercentage();
      doReturn(0.0F).when(light0).getWidth();
      doReturn(false).when(light0).isBackFaceShown();
      doReturn(false).when(light0).isDeformable();
      doReturn(false).when(light0).isDoorOrWindow();
      doReturn(false).when(light0).isMovable();
      doReturn(false).when(light0).isResizable();
      doReturn(false).when(light0).isTexturable();
      HomeLight homeLight0 = new HomeLight(light0);
      assertNotNull(homeLight0);
      assertNull(homeLight0.getCatalogId());
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertFalse(homeLight0.isMovable());
      assertNull(homeLight0.getDescription());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertNull(homeLight0.getName());
      assertFalse(homeLight0.isModelMirrored());
      assertFalse(homeLight0.isBackFaceShown());
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertNull(homeLight0.getColor());
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertFalse(homeLight0.isNameVisible());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertNull(homeLight0.getCurrency());
      assertFalse(homeLight0.isTexturable());
      assertFalse(homeLight0.isDoorOrWindow());
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertTrue(homeLight0.isVisible());
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertFalse(homeLight0.isDeformable());
      assertFalse(homeLight0.isResizable());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertNull(homeLight0.getShininess());
      assertNull(homeLight0.getStaircaseCutOutShape());
      
      homeLight0.setElevation((-1.0F));
      assertNull(homeLight0.getCatalogId());
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertFalse(homeLight0.isMovable());
      assertNull(homeLight0.getDescription());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals((-1.0F), homeLight0.getElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertNull(homeLight0.getName());
      assertFalse(homeLight0.isModelMirrored());
      assertFalse(homeLight0.isBackFaceShown());
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertNull(homeLight0.getColor());
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertFalse(homeLight0.isNameVisible());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertNull(homeLight0.getCurrency());
      assertFalse(homeLight0.isTexturable());
      assertFalse(homeLight0.isDoorOrWindow());
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertTrue(homeLight0.isVisible());
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals((-1.0F), homeLight0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertFalse(homeLight0.isDeformable());
      assertFalse(homeLight0.isResizable());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertNull(homeLight0.getShininess());
      assertNull(homeLight0.getStaircaseCutOutShape());
      
      int int0 = Float.floatToIntBits((byte) (-32));
      assertEquals((-1040187392), int0);
      
      HomeLight homeLight1 = homeLight0.clone();
      assertNotNull(homeLight1);
      assertNotSame(homeLight0, homeLight1);
      assertNotSame(homeLight1, homeLight0);
      assertFalse(homeLight1.equals((Object)homeLight0));
      assertNull(homeLight0.getCatalogId());
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertFalse(homeLight0.isMovable());
      assertNull(homeLight0.getDescription());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals((-1.0F), homeLight0.getElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertNull(homeLight0.getName());
      assertFalse(homeLight0.isModelMirrored());
      assertFalse(homeLight0.isBackFaceShown());
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertNull(homeLight0.getColor());
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertFalse(homeLight0.isNameVisible());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertNull(homeLight0.getCurrency());
      assertFalse(homeLight0.isTexturable());
      assertFalse(homeLight0.isDoorOrWindow());
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertTrue(homeLight0.isVisible());
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals((-1.0F), homeLight0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertFalse(homeLight0.isDeformable());
      assertFalse(homeLight0.isResizable());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertNull(homeLight0.getShininess());
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertFalse(homeLight1.isNameVisible());
      assertNull(homeLight1.getColor());
      assertTrue(homeLight1.isVisible());
      assertFalse(homeLight1.isDeformable());
      assertFalse(homeLight1.isModelMirrored());
      assertFalse(homeLight1.isBackFaceShown());
      assertEquals(0.0F, homeLight1.getHeight(), 0.01F);
      assertFalse(homeLight1.isMovable());
      assertEquals(0.0F, homeLight1.getNameYOffset(), 0.01F);
      assertNull(homeLight1.getCurrency());
      assertEquals(0.0F, homeLight1.getNameAngle(), 0.01F);
      assertNull(homeLight1.getCatalogId());
      assertNull(homeLight1.getStaircaseCutOutShape());
      assertNull(homeLight1.getName());
      assertEquals(0.5F, homeLight1.getPower(), 0.01F);
      assertNull(homeLight1.getShininess());
      assertEquals(0.0F, homeLight1.getDepth(), 0.01F);
      assertFalse(homeLight1.isResizable());
      assertFalse(homeLight1.isTexturable());
      assertEquals(0.0F, homeLight1.getAngle(), 0.01F);
      assertEquals((-1.0F), homeLight1.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight1.getY(), 0.01F);
      assertFalse(homeLight1.isDoorOrWindow());
      assertNull(homeLight1.getDescription());
      assertEquals(0.0F, homeLight1.getX(), 0.01F);
      assertEquals(0.0F, homeLight1.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeLight1.getWidth(), 0.01F);
      assertEquals((-1.0F), homeLight1.getElevation(), 0.01F);
      
      Level level0 = homeLight1.getLevel();
      assertNull(level0);
      assertNotSame(homeLight0, homeLight1);
      assertNotSame(homeLight1, homeLight0);
      assertFalse(homeLight0.equals((Object)homeLight1));
      assertFalse(homeLight1.equals((Object)homeLight0));
      assertNull(homeLight0.getCatalogId());
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertFalse(homeLight0.isMovable());
      assertNull(homeLight0.getDescription());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals((-1.0F), homeLight0.getElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertNull(homeLight0.getName());
      assertFalse(homeLight0.isModelMirrored());
      assertFalse(homeLight0.isBackFaceShown());
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertNull(homeLight0.getColor());
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertFalse(homeLight0.isNameVisible());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertNull(homeLight0.getCurrency());
      assertFalse(homeLight0.isTexturable());
      assertFalse(homeLight0.isDoorOrWindow());
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertTrue(homeLight0.isVisible());
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals((-1.0F), homeLight0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertFalse(homeLight0.isDeformable());
      assertFalse(homeLight0.isResizable());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertNull(homeLight0.getShininess());
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertFalse(homeLight1.isNameVisible());
      assertNull(homeLight1.getColor());
      assertTrue(homeLight1.isVisible());
      assertFalse(homeLight1.isDeformable());
      assertFalse(homeLight1.isModelMirrored());
      assertFalse(homeLight1.isBackFaceShown());
      assertEquals(0.0F, homeLight1.getHeight(), 0.01F);
      assertFalse(homeLight1.isMovable());
      assertEquals(0.0F, homeLight1.getNameYOffset(), 0.01F);
      assertNull(homeLight1.getCurrency());
      assertEquals(0.0F, homeLight1.getNameAngle(), 0.01F);
      assertNull(homeLight1.getCatalogId());
      assertNull(homeLight1.getStaircaseCutOutShape());
      assertNull(homeLight1.getName());
      assertEquals(0.5F, homeLight1.getPower(), 0.01F);
      assertNull(homeLight1.getShininess());
      assertEquals(0.0F, homeLight1.getDepth(), 0.01F);
      assertFalse(homeLight1.isResizable());
      assertFalse(homeLight1.isTexturable());
      assertEquals(0.0F, homeLight1.getAngle(), 0.01F);
      assertEquals((-1.0F), homeLight1.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight1.getY(), 0.01F);
      assertFalse(homeLight1.isDoorOrWindow());
      assertNull(homeLight1.getDescription());
      assertEquals(0.0F, homeLight1.getX(), 0.01F);
      assertEquals(0.0F, homeLight1.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeLight1.getWidth(), 0.01F);
      assertEquals((-1.0F), homeLight1.getElevation(), 0.01F);
      
      HomeLight homeLight2 = homeLight1.clone();
      assertNotNull(homeLight2);
      assertNotSame(homeLight0, homeLight2);
      assertNotSame(homeLight0, homeLight1);
      assertNotSame(homeLight1, homeLight2);
      assertNotSame(homeLight1, homeLight0);
      assertNotSame(homeLight2, homeLight0);
      assertNotSame(homeLight2, homeLight1);
      assertFalse(homeLight0.equals((Object)homeLight1));
      assertFalse(homeLight1.equals((Object)homeLight0));
      assertFalse(homeLight2.equals((Object)homeLight0));
      assertFalse(homeLight2.equals((Object)homeLight1));
      assertNull(homeLight0.getCatalogId());
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertFalse(homeLight0.isMovable());
      assertNull(homeLight0.getDescription());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals((-1.0F), homeLight0.getElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertNull(homeLight0.getName());
      assertFalse(homeLight0.isModelMirrored());
      assertFalse(homeLight0.isBackFaceShown());
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertNull(homeLight0.getColor());
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertFalse(homeLight0.isNameVisible());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertNull(homeLight0.getCurrency());
      assertFalse(homeLight0.isTexturable());
      assertFalse(homeLight0.isDoorOrWindow());
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertTrue(homeLight0.isVisible());
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals((-1.0F), homeLight0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertFalse(homeLight0.isDeformable());
      assertFalse(homeLight0.isResizable());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertNull(homeLight0.getShininess());
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertFalse(homeLight1.isNameVisible());
      assertNull(homeLight1.getColor());
      assertTrue(homeLight1.isVisible());
      assertFalse(homeLight1.isDeformable());
      assertFalse(homeLight1.isModelMirrored());
      assertFalse(homeLight1.isBackFaceShown());
      assertEquals(0.0F, homeLight1.getHeight(), 0.01F);
      assertFalse(homeLight1.isMovable());
      assertEquals(0.0F, homeLight1.getNameYOffset(), 0.01F);
      assertNull(homeLight1.getCurrency());
      assertEquals(0.0F, homeLight1.getNameAngle(), 0.01F);
      assertNull(homeLight1.getCatalogId());
      assertNull(homeLight1.getStaircaseCutOutShape());
      assertNull(homeLight1.getName());
      assertEquals(0.5F, homeLight1.getPower(), 0.01F);
      assertNull(homeLight1.getShininess());
      assertEquals(0.0F, homeLight1.getDepth(), 0.01F);
      assertFalse(homeLight1.isResizable());
      assertFalse(homeLight1.isTexturable());
      assertEquals(0.0F, homeLight1.getAngle(), 0.01F);
      assertEquals((-1.0F), homeLight1.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight1.getY(), 0.01F);
      assertFalse(homeLight1.isDoorOrWindow());
      assertNull(homeLight1.getDescription());
      assertEquals(0.0F, homeLight1.getX(), 0.01F);
      assertEquals(0.0F, homeLight1.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeLight1.getWidth(), 0.01F);
      assertEquals((-1.0F), homeLight1.getElevation(), 0.01F);
      assertEquals(0.0F, homeLight2.getNameYOffset(), 0.01F);
      assertTrue(homeLight2.isVisible());
      assertNull(homeLight2.getCurrency());
      assertEquals(0.0F, homeLight2.getWidth(), 0.01F);
      assertFalse(homeLight2.isNameVisible());
      assertFalse(homeLight2.isDeformable());
      assertFalse(homeLight2.isModelMirrored());
      assertFalse(homeLight2.isBackFaceShown());
      assertFalse(homeLight2.isResizable());
      assertEquals(0.0F, homeLight2.getY(), 0.01F);
      assertFalse(homeLight2.isDoorOrWindow());
      assertEquals(0.0F, homeLight2.getX(), 0.01F);
      assertNull(homeLight2.getShininess());
      assertEquals((-1.0F), homeLight2.getGroundElevation(), 0.01F);
      assertFalse(homeLight2.isTexturable());
      assertEquals(0.0F, homeLight2.getAngle(), 0.01F);
      assertEquals((-1.0F), homeLight2.getElevation(), 0.01F);
      assertNull(homeLight2.getDescription());
      assertEquals(0.0F, homeLight2.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeLight2.getNameAngle(), 0.01F);
      assertNull(homeLight2.getStaircaseCutOutShape());
      assertNull(homeLight2.getName());
      assertEquals(0.0F, homeLight2.getDepth(), 0.01F);
      assertFalse(homeLight2.isMovable());
      assertNull(homeLight2.getColor());
      assertNull(homeLight2.getCatalogId());
      assertEquals(0.0F, homeLight2.getHeight(), 0.01F);
      assertEquals(0.5F, homeLight2.getPower(), 0.01F);
      
      homeLight1.setAngle(3309.9814F);
      assertNotSame(homeLight0, homeLight2);
      assertNotSame(homeLight0, homeLight1);
      assertNotSame(homeLight1, homeLight2);
      assertNotSame(homeLight1, homeLight0);
      assertFalse(homeLight0.equals((Object)homeLight2));
      assertFalse(homeLight0.equals((Object)homeLight1));
      assertFalse(homeLight1.equals((Object)homeLight2));
      assertFalse(homeLight1.equals((Object)homeLight0));
      assertNull(homeLight0.getCatalogId());
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertFalse(homeLight0.isMovable());
      assertNull(homeLight0.getDescription());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals((-1.0F), homeLight0.getElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertNull(homeLight0.getName());
      assertFalse(homeLight0.isModelMirrored());
      assertFalse(homeLight0.isBackFaceShown());
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertNull(homeLight0.getColor());
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertFalse(homeLight0.isNameVisible());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertNull(homeLight0.getCurrency());
      assertFalse(homeLight0.isTexturable());
      assertFalse(homeLight0.isDoorOrWindow());
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertTrue(homeLight0.isVisible());
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals((-1.0F), homeLight0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertFalse(homeLight0.isDeformable());
      assertFalse(homeLight0.isResizable());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertNull(homeLight0.getShininess());
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertFalse(homeLight1.isNameVisible());
      assertNull(homeLight1.getColor());
      assertTrue(homeLight1.isVisible());
      assertFalse(homeLight1.isDeformable());
      assertFalse(homeLight1.isModelMirrored());
      assertFalse(homeLight1.isBackFaceShown());
      assertEquals(0.0F, homeLight1.getHeight(), 0.01F);
      assertFalse(homeLight1.isMovable());
      assertEquals(5.025974F, homeLight1.getAngle(), 0.01F);
      assertEquals(0.0F, homeLight1.getNameYOffset(), 0.01F);
      assertNull(homeLight1.getCurrency());
      assertEquals(0.0F, homeLight1.getNameAngle(), 0.01F);
      assertNull(homeLight1.getCatalogId());
      assertNull(homeLight1.getStaircaseCutOutShape());
      assertNull(homeLight1.getName());
      assertEquals(0.5F, homeLight1.getPower(), 0.01F);
      assertNull(homeLight1.getShininess());
      assertEquals(0.0F, homeLight1.getDepth(), 0.01F);
      assertFalse(homeLight1.isResizable());
      assertFalse(homeLight1.isTexturable());
      assertEquals((-1.0F), homeLight1.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight1.getY(), 0.01F);
      assertFalse(homeLight1.isDoorOrWindow());
      assertNull(homeLight1.getDescription());
      assertEquals(0.0F, homeLight1.getX(), 0.01F);
      assertEquals(0.0F, homeLight1.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeLight1.getWidth(), 0.01F);
      assertEquals((-1.0F), homeLight1.getElevation(), 0.01F);
      
      homeLight2.setName("temporarySubFolder");
      assertNotSame(homeLight0, homeLight2);
      assertNotSame(homeLight0, homeLight1);
      assertNotSame(homeLight1, homeLight2);
      assertNotSame(homeLight1, homeLight0);
      assertNotSame(homeLight2, homeLight0);
      assertNotSame(homeLight2, homeLight1);
      assertFalse(homeLight0.equals((Object)homeLight2));
      assertFalse(homeLight0.equals((Object)homeLight1));
      assertFalse(homeLight1.equals((Object)homeLight2));
      assertFalse(homeLight1.equals((Object)homeLight0));
      assertFalse(homeLight2.equals((Object)homeLight0));
      assertFalse(homeLight2.equals((Object)homeLight1));
      assertNull(homeLight0.getCatalogId());
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertFalse(homeLight0.isMovable());
      assertNull(homeLight0.getDescription());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals((-1.0F), homeLight0.getElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertNull(homeLight0.getName());
      assertFalse(homeLight0.isModelMirrored());
      assertFalse(homeLight0.isBackFaceShown());
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertNull(homeLight0.getColor());
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertFalse(homeLight0.isNameVisible());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertNull(homeLight0.getCurrency());
      assertFalse(homeLight0.isTexturable());
      assertFalse(homeLight0.isDoorOrWindow());
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertTrue(homeLight0.isVisible());
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals((-1.0F), homeLight0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertFalse(homeLight0.isDeformable());
      assertFalse(homeLight0.isResizable());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertNull(homeLight0.getShininess());
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertFalse(homeLight1.isNameVisible());
      assertNull(homeLight1.getColor());
      assertTrue(homeLight1.isVisible());
      assertFalse(homeLight1.isDeformable());
      assertFalse(homeLight1.isModelMirrored());
      assertFalse(homeLight1.isBackFaceShown());
      assertEquals(0.0F, homeLight1.getHeight(), 0.01F);
      assertFalse(homeLight1.isMovable());
      assertEquals(5.025974F, homeLight1.getAngle(), 0.01F);
      assertEquals(0.0F, homeLight1.getNameYOffset(), 0.01F);
      assertNull(homeLight1.getCurrency());
      assertEquals(0.0F, homeLight1.getNameAngle(), 0.01F);
      assertNull(homeLight1.getCatalogId());
      assertNull(homeLight1.getStaircaseCutOutShape());
      assertNull(homeLight1.getName());
      assertEquals(0.5F, homeLight1.getPower(), 0.01F);
      assertNull(homeLight1.getShininess());
      assertEquals(0.0F, homeLight1.getDepth(), 0.01F);
      assertFalse(homeLight1.isResizable());
      assertFalse(homeLight1.isTexturable());
      assertEquals((-1.0F), homeLight1.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight1.getY(), 0.01F);
      assertFalse(homeLight1.isDoorOrWindow());
      assertNull(homeLight1.getDescription());
      assertEquals(0.0F, homeLight1.getX(), 0.01F);
      assertEquals(0.0F, homeLight1.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeLight1.getWidth(), 0.01F);
      assertEquals((-1.0F), homeLight1.getElevation(), 0.01F);
      assertEquals(0.0F, homeLight2.getNameYOffset(), 0.01F);
      assertTrue(homeLight2.isVisible());
      assertNull(homeLight2.getCurrency());
      assertEquals(0.0F, homeLight2.getWidth(), 0.01F);
      assertFalse(homeLight2.isNameVisible());
      assertFalse(homeLight2.isDeformable());
      assertFalse(homeLight2.isModelMirrored());
      assertFalse(homeLight2.isBackFaceShown());
      assertFalse(homeLight2.isResizable());
      assertEquals(0.0F, homeLight2.getY(), 0.01F);
      assertFalse(homeLight2.isDoorOrWindow());
      assertEquals(0.0F, homeLight2.getX(), 0.01F);
      assertNull(homeLight2.getShininess());
      assertEquals((-1.0F), homeLight2.getGroundElevation(), 0.01F);
      assertFalse(homeLight2.isTexturable());
      assertEquals(0.0F, homeLight2.getAngle(), 0.01F);
      assertEquals((-1.0F), homeLight2.getElevation(), 0.01F);
      assertNull(homeLight2.getDescription());
      assertEquals(0.0F, homeLight2.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeLight2.getNameAngle(), 0.01F);
      assertNull(homeLight2.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight2.getDepth(), 0.01F);
      assertFalse(homeLight2.isMovable());
      assertNull(homeLight2.getColor());
      assertNull(homeLight2.getCatalogId());
      assertEquals(0.0F, homeLight2.getHeight(), 0.01F);
      assertEquals(0.5F, homeLight2.getPower(), 0.01F);
      assertEquals("temporarySubFolder", homeLight2.getName());
      
      Level level1 = homeLight1.getLevel();
      assertNull(level1);
      assertNotSame(homeLight0, homeLight2);
      assertNotSame(homeLight0, homeLight1);
      assertNotSame(homeLight1, homeLight2);
      assertNotSame(homeLight1, homeLight0);
      assertFalse(homeLight0.equals((Object)homeLight2));
      assertFalse(homeLight0.equals((Object)homeLight1));
      assertFalse(homeLight1.equals((Object)homeLight2));
      assertFalse(homeLight1.equals((Object)homeLight0));
      assertNull(homeLight0.getCatalogId());
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertFalse(homeLight0.isMovable());
      assertNull(homeLight0.getDescription());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals((-1.0F), homeLight0.getElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertNull(homeLight0.getName());
      assertFalse(homeLight0.isModelMirrored());
      assertFalse(homeLight0.isBackFaceShown());
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertNull(homeLight0.getColor());
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertFalse(homeLight0.isNameVisible());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertNull(homeLight0.getCurrency());
      assertFalse(homeLight0.isTexturable());
      assertFalse(homeLight0.isDoorOrWindow());
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertTrue(homeLight0.isVisible());
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals((-1.0F), homeLight0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertFalse(homeLight0.isDeformable());
      assertFalse(homeLight0.isResizable());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertNull(homeLight0.getShininess());
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertFalse(homeLight1.isNameVisible());
      assertNull(homeLight1.getColor());
      assertTrue(homeLight1.isVisible());
      assertFalse(homeLight1.isDeformable());
      assertFalse(homeLight1.isModelMirrored());
      assertFalse(homeLight1.isBackFaceShown());
      assertEquals(0.0F, homeLight1.getHeight(), 0.01F);
      assertFalse(homeLight1.isMovable());
      assertEquals(5.025974F, homeLight1.getAngle(), 0.01F);
      assertEquals(0.0F, homeLight1.getNameYOffset(), 0.01F);
      assertNull(homeLight1.getCurrency());
      assertEquals(0.0F, homeLight1.getNameAngle(), 0.01F);
      assertNull(homeLight1.getCatalogId());
      assertNull(homeLight1.getStaircaseCutOutShape());
      assertNull(homeLight1.getName());
      assertEquals(0.5F, homeLight1.getPower(), 0.01F);
      assertNull(homeLight1.getShininess());
      assertEquals(0.0F, homeLight1.getDepth(), 0.01F);
      assertFalse(homeLight1.isResizable());
      assertFalse(homeLight1.isTexturable());
      assertEquals((-1.0F), homeLight1.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight1.getY(), 0.01F);
      assertFalse(homeLight1.isDoorOrWindow());
      assertNull(homeLight1.getDescription());
      assertEquals(0.0F, homeLight1.getX(), 0.01F);
      assertEquals(0.0F, homeLight1.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeLight1.getWidth(), 0.01F);
      assertEquals((-1.0F), homeLight1.getElevation(), 0.01F);
      
      HomeLight homeLight3 = homeLight1.clone();
      assertNotNull(homeLight3);
      assertNotSame(homeLight0, homeLight3);
      assertNotSame(homeLight0, homeLight2);
      assertNotSame(homeLight0, homeLight1);
      assertNotSame(homeLight1, homeLight2);
      assertNotSame(homeLight1, homeLight3);
      assertNotSame(homeLight1, homeLight0);
      assertNotSame(homeLight3, homeLight0);
      assertNotSame(homeLight3, homeLight1);
      assertNotSame(homeLight3, homeLight2);
      assertFalse(homeLight0.equals((Object)homeLight2));
      assertFalse(homeLight0.equals((Object)homeLight1));
      assertFalse(homeLight1.equals((Object)homeLight2));
      assertFalse(homeLight1.equals((Object)homeLight0));
      assertFalse(homeLight3.equals((Object)homeLight0));
      assertFalse(homeLight3.equals((Object)homeLight1));
      assertFalse(homeLight3.equals((Object)homeLight2));
      assertNull(homeLight0.getCatalogId());
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertFalse(homeLight0.isMovable());
      assertNull(homeLight0.getDescription());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals((-1.0F), homeLight0.getElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertNull(homeLight0.getName());
      assertFalse(homeLight0.isModelMirrored());
      assertFalse(homeLight0.isBackFaceShown());
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertNull(homeLight0.getColor());
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertFalse(homeLight0.isNameVisible());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertNull(homeLight0.getCurrency());
      assertFalse(homeLight0.isTexturable());
      assertFalse(homeLight0.isDoorOrWindow());
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertTrue(homeLight0.isVisible());
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals((-1.0F), homeLight0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertFalse(homeLight0.isDeformable());
      assertFalse(homeLight0.isResizable());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertNull(homeLight0.getShininess());
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertFalse(homeLight1.isNameVisible());
      assertNull(homeLight1.getColor());
      assertTrue(homeLight1.isVisible());
      assertFalse(homeLight1.isDeformable());
      assertFalse(homeLight1.isModelMirrored());
      assertFalse(homeLight1.isBackFaceShown());
      assertEquals(0.0F, homeLight1.getHeight(), 0.01F);
      assertFalse(homeLight1.isMovable());
      assertEquals(5.025974F, homeLight1.getAngle(), 0.01F);
      assertEquals(0.0F, homeLight1.getNameYOffset(), 0.01F);
      assertNull(homeLight1.getCurrency());
      assertEquals(0.0F, homeLight1.getNameAngle(), 0.01F);
      assertNull(homeLight1.getCatalogId());
      assertNull(homeLight1.getStaircaseCutOutShape());
      assertNull(homeLight1.getName());
      assertEquals(0.5F, homeLight1.getPower(), 0.01F);
      assertNull(homeLight1.getShininess());
      assertEquals(0.0F, homeLight1.getDepth(), 0.01F);
      assertFalse(homeLight1.isResizable());
      assertFalse(homeLight1.isTexturable());
      assertEquals((-1.0F), homeLight1.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight1.getY(), 0.01F);
      assertFalse(homeLight1.isDoorOrWindow());
      assertNull(homeLight1.getDescription());
      assertEquals(0.0F, homeLight1.getX(), 0.01F);
      assertEquals(0.0F, homeLight1.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeLight1.getWidth(), 0.01F);
      assertEquals((-1.0F), homeLight1.getElevation(), 0.01F);
      assertFalse(homeLight3.isModelMirrored());
      assertFalse(homeLight3.isDeformable());
      assertEquals(0.0F, homeLight3.getNameYOffset(), 0.01F);
      assertEquals(0.0F, homeLight3.getY(), 0.01F);
      assertTrue(homeLight3.isVisible());
      assertNull(homeLight3.getColor());
      assertEquals((-1.0F), homeLight3.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight3.getX(), 0.01F);
      assertEquals(0.0F, homeLight3.getHeight(), 0.01F);
      assertFalse(homeLight3.isResizable());
      assertNull(homeLight3.getCurrency());
      assertFalse(homeLight3.isMovable());
      assertEquals(0.5F, homeLight3.getPower(), 0.01F);
      assertNull(homeLight3.getName());
      assertNull(homeLight3.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight3.getDepth(), 0.01F);
      assertNull(homeLight3.getDescription());
      assertEquals(0.0F, homeLight3.getNameAngle(), 0.01F);
      assertNull(homeLight3.getShininess());
      assertNull(homeLight3.getCatalogId());
      assertEquals(0.0F, homeLight3.getNameXOffset(), 0.01F);
      assertEquals(5.025974F, homeLight3.getAngle(), 0.01F);
      assertFalse(homeLight3.isTexturable());
      assertEquals((-1.0F), homeLight3.getElevation(), 0.01F);
      assertFalse(homeLight3.isDoorOrWindow());
      assertEquals(0.0F, homeLight3.getWidth(), 0.01F);
      assertFalse(homeLight3.isBackFaceShown());
      assertFalse(homeLight3.isNameVisible());
      
      homeLight0.setName("");
      assertNotSame(homeLight0, homeLight3);
      assertNotSame(homeLight0, homeLight2);
      assertNotSame(homeLight0, homeLight1);
      assertFalse(homeLight0.equals((Object)homeLight3));
      assertFalse(homeLight0.equals((Object)homeLight2));
      assertFalse(homeLight0.equals((Object)homeLight1));
      assertNull(homeLight0.getCatalogId());
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertFalse(homeLight0.isMovable());
      assertNull(homeLight0.getDescription());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals((-1.0F), homeLight0.getElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertEquals("", homeLight0.getName());
      assertFalse(homeLight0.isModelMirrored());
      assertFalse(homeLight0.isBackFaceShown());
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertNull(homeLight0.getColor());
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertFalse(homeLight0.isNameVisible());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertNull(homeLight0.getCurrency());
      assertFalse(homeLight0.isTexturable());
      assertFalse(homeLight0.isDoorOrWindow());
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertTrue(homeLight0.isVisible());
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals((-1.0F), homeLight0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertFalse(homeLight0.isDeformable());
      assertFalse(homeLight0.isResizable());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertNull(homeLight0.getShininess());
      assertNull(homeLight0.getStaircaseCutOutShape());
      
      Integer integer0 = Integer.valueOf((-2895));
      assertNotNull(integer0);
      assertFalse(integer0.equals((Object)int0));
      assertEquals((-2895), (int)integer0);
      
      boolean boolean1 = homeLight3.containsPoint(1922.37F, 2891.889F, 0.0F);
      assertNotSame(homeLight0, homeLight3);
      assertNotSame(homeLight0, homeLight2);
      assertNotSame(homeLight0, homeLight1);
      assertNotSame(homeLight1, homeLight2);
      assertNotSame(homeLight1, homeLight3);
      assertNotSame(homeLight1, homeLight0);
      assertNotSame(homeLight3, homeLight0);
      assertNotSame(homeLight3, homeLight1);
      assertNotSame(homeLight3, homeLight2);
      assertFalse(homeLight0.equals((Object)homeLight3));
      assertFalse(homeLight0.equals((Object)homeLight2));
      assertFalse(homeLight0.equals((Object)homeLight1));
      assertFalse(homeLight1.equals((Object)homeLight2));
      assertFalse(homeLight1.equals((Object)homeLight3));
      assertFalse(homeLight1.equals((Object)homeLight0));
      assertFalse(homeLight3.equals((Object)homeLight0));
      assertFalse(homeLight3.equals((Object)homeLight1));
      assertFalse(homeLight3.equals((Object)homeLight2));
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      assertNull(homeLight0.getCatalogId());
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertFalse(homeLight0.isMovable());
      assertNull(homeLight0.getDescription());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals((-1.0F), homeLight0.getElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertEquals("", homeLight0.getName());
      assertFalse(homeLight0.isModelMirrored());
      assertFalse(homeLight0.isBackFaceShown());
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertNull(homeLight0.getColor());
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertFalse(homeLight0.isNameVisible());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertNull(homeLight0.getCurrency());
      assertFalse(homeLight0.isTexturable());
      assertFalse(homeLight0.isDoorOrWindow());
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertTrue(homeLight0.isVisible());
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals((-1.0F), homeLight0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertFalse(homeLight0.isDeformable());
      assertFalse(homeLight0.isResizable());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertNull(homeLight0.getShininess());
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertFalse(homeLight1.isNameVisible());
      assertNull(homeLight1.getColor());
      assertTrue(homeLight1.isVisible());
      assertFalse(homeLight1.isDeformable());
      assertFalse(homeLight1.isModelMirrored());
      assertFalse(homeLight1.isBackFaceShown());
      assertEquals(0.0F, homeLight1.getHeight(), 0.01F);
      assertFalse(homeLight1.isMovable());
      assertEquals(5.025974F, homeLight1.getAngle(), 0.01F);
      assertEquals(0.0F, homeLight1.getNameYOffset(), 0.01F);
      assertNull(homeLight1.getCurrency());
      assertEquals(0.0F, homeLight1.getNameAngle(), 0.01F);
      assertNull(homeLight1.getCatalogId());
      assertNull(homeLight1.getStaircaseCutOutShape());
      assertNull(homeLight1.getName());
      assertEquals(0.5F, homeLight1.getPower(), 0.01F);
      assertNull(homeLight1.getShininess());
      assertEquals(0.0F, homeLight1.getDepth(), 0.01F);
      assertFalse(homeLight1.isResizable());
      assertFalse(homeLight1.isTexturable());
      assertEquals((-1.0F), homeLight1.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight1.getY(), 0.01F);
      assertFalse(homeLight1.isDoorOrWindow());
      assertNull(homeLight1.getDescription());
      assertEquals(0.0F, homeLight1.getX(), 0.01F);
      assertEquals(0.0F, homeLight1.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeLight1.getWidth(), 0.01F);
      assertEquals((-1.0F), homeLight1.getElevation(), 0.01F);
      assertFalse(homeLight3.isModelMirrored());
      assertFalse(homeLight3.isDeformable());
      assertEquals(0.0F, homeLight3.getNameYOffset(), 0.01F);
      assertEquals(0.0F, homeLight3.getY(), 0.01F);
      assertTrue(homeLight3.isVisible());
      assertNull(homeLight3.getColor());
      assertEquals((-1.0F), homeLight3.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight3.getX(), 0.01F);
      assertEquals(0.0F, homeLight3.getHeight(), 0.01F);
      assertFalse(homeLight3.isResizable());
      assertNull(homeLight3.getCurrency());
      assertFalse(homeLight3.isMovable());
      assertEquals(0.5F, homeLight3.getPower(), 0.01F);
      assertNull(homeLight3.getName());
      assertNull(homeLight3.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight3.getDepth(), 0.01F);
      assertNull(homeLight3.getDescription());
      assertEquals(0.0F, homeLight3.getNameAngle(), 0.01F);
      assertNull(homeLight3.getShininess());
      assertNull(homeLight3.getCatalogId());
      assertEquals(0.0F, homeLight3.getNameXOffset(), 0.01F);
      assertEquals(5.025974F, homeLight3.getAngle(), 0.01F);
      assertFalse(homeLight3.isTexturable());
      assertEquals((-1.0F), homeLight3.getElevation(), 0.01F);
      assertFalse(homeLight3.isDoorOrWindow());
      assertEquals(0.0F, homeLight3.getWidth(), 0.01F);
      assertFalse(homeLight3.isBackFaceShown());
      assertFalse(homeLight3.isNameVisible());
      
      homeLight1.setNameYOffset(0.0F);
      assertNotSame(homeLight0, homeLight3);
      assertNotSame(homeLight0, homeLight2);
      assertNotSame(homeLight0, homeLight1);
      assertNotSame(homeLight1, homeLight2);
      assertNotSame(homeLight1, homeLight3);
      assertNotSame(homeLight1, homeLight0);
      assertFalse(homeLight0.equals((Object)homeLight3));
      assertFalse(homeLight0.equals((Object)homeLight2));
      assertFalse(homeLight0.equals((Object)homeLight1));
      assertFalse(homeLight1.equals((Object)homeLight2));
      assertFalse(homeLight1.equals((Object)homeLight3));
      assertFalse(homeLight1.equals((Object)homeLight0));
      assertNull(homeLight0.getCatalogId());
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertFalse(homeLight0.isMovable());
      assertNull(homeLight0.getDescription());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals((-1.0F), homeLight0.getElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertEquals("", homeLight0.getName());
      assertFalse(homeLight0.isModelMirrored());
      assertFalse(homeLight0.isBackFaceShown());
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertNull(homeLight0.getColor());
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertFalse(homeLight0.isNameVisible());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertNull(homeLight0.getCurrency());
      assertFalse(homeLight0.isTexturable());
      assertFalse(homeLight0.isDoorOrWindow());
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertTrue(homeLight0.isVisible());
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals((-1.0F), homeLight0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertFalse(homeLight0.isDeformable());
      assertFalse(homeLight0.isResizable());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertNull(homeLight0.getShininess());
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertFalse(homeLight1.isNameVisible());
      assertNull(homeLight1.getColor());
      assertTrue(homeLight1.isVisible());
      assertFalse(homeLight1.isDeformable());
      assertFalse(homeLight1.isModelMirrored());
      assertFalse(homeLight1.isBackFaceShown());
      assertEquals(0.0F, homeLight1.getHeight(), 0.01F);
      assertFalse(homeLight1.isMovable());
      assertEquals(5.025974F, homeLight1.getAngle(), 0.01F);
      assertEquals(0.0F, homeLight1.getNameYOffset(), 0.01F);
      assertNull(homeLight1.getCurrency());
      assertEquals(0.0F, homeLight1.getNameAngle(), 0.01F);
      assertNull(homeLight1.getCatalogId());
      assertNull(homeLight1.getStaircaseCutOutShape());
      assertNull(homeLight1.getName());
      assertEquals(0.5F, homeLight1.getPower(), 0.01F);
      assertNull(homeLight1.getShininess());
      assertEquals(0.0F, homeLight1.getDepth(), 0.01F);
      assertFalse(homeLight1.isResizable());
      assertFalse(homeLight1.isTexturable());
      assertEquals((-1.0F), homeLight1.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight1.getY(), 0.01F);
      assertFalse(homeLight1.isDoorOrWindow());
      assertNull(homeLight1.getDescription());
      assertEquals(0.0F, homeLight1.getX(), 0.01F);
      assertEquals(0.0F, homeLight1.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeLight1.getWidth(), 0.01F);
      assertEquals((-1.0F), homeLight1.getElevation(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test215()  throws Throwable  {
      LightSource[] lightSourceArray0 = new LightSource[7];
      LightSource lightSource0 = new LightSource(0.5F, 0.5F, 1316.0417F, (-3420));
      assertNotNull(lightSource0);
      assertEquals(0.5F, lightSource0.getY(), 0.01F);
      assertEquals(0.5F, lightSource0.getX(), 0.01F);
      assertEquals(1316.0417F, lightSource0.getZ(), 0.01F);
      assertNull(lightSource0.getDiameter());
      assertEquals((-3420), lightSource0.getColor());
      
      lightSourceArray0[0] = lightSource0;
      LightSource lightSource1 = new LightSource((-1409.12F), 3.4028235E38F, 0.0F, 3157);
      assertNotNull(lightSource1);
      assertFalse(lightSource1.equals((Object)lightSource0));
      assertNull(lightSource1.getDiameter());
      assertEquals(3.4028235E38F, lightSource1.getY(), 0.01F);
      assertEquals((-1409.12F), lightSource1.getX(), 0.01F);
      assertEquals(0.0F, lightSource1.getZ(), 0.01F);
      assertEquals(3157, lightSource1.getColor());
      
      LightSource lightSource2 = new LightSource(1948.8243F, 0.5F, (-1409.12F), 3157);
      assertNotNull(lightSource2);
      assertFalse(lightSource2.equals((Object)lightSource1));
      assertFalse(lightSource2.equals((Object)lightSource0));
      assertEquals(0.5F, lightSource2.getY(), 0.01F);
      assertEquals(1948.8243F, lightSource2.getX(), 0.01F);
      assertNull(lightSource2.getDiameter());
      assertEquals((-1409.12F), lightSource2.getZ(), 0.01F);
      assertEquals(3157, lightSource2.getColor());
      
      lightSourceArray0[2] = lightSource2;
      LightSource lightSource3 = new LightSource((-1409.12F), 3157, (-3420), (-3420));
      assertNotNull(lightSource3);
      assertFalse(lightSource3.equals((Object)lightSource0));
      assertFalse(lightSource3.equals((Object)lightSource2));
      assertFalse(lightSource3.equals((Object)lightSource1));
      assertEquals((-3420.0F), lightSource3.getZ(), 0.01F);
      assertNull(lightSource3.getDiameter());
      assertEquals((-1409.12F), lightSource3.getX(), 0.01F);
      assertEquals(3157.0F, lightSource3.getY(), 0.01F);
      assertEquals((-3420), lightSource3.getColor());
      
      LightSource lightSource4 = new LightSource(3157, (-1409.12F), 1304.5946F, 0);
      assertNotNull(lightSource4);
      assertFalse(lightSource4.equals((Object)lightSource2));
      assertFalse(lightSource4.equals((Object)lightSource0));
      assertFalse(lightSource4.equals((Object)lightSource1));
      assertFalse(lightSource4.equals((Object)lightSource3));
      assertEquals(3157.0F, lightSource4.getX(), 0.01F);
      assertNull(lightSource4.getDiameter());
      assertEquals(1304.5946F, lightSource4.getZ(), 0.01F);
      assertEquals((-1409.12F), lightSource4.getY(), 0.01F);
      assertEquals(0, lightSource4.getColor());
      
      lightSourceArray0[4] = lightSource4;
      LightSource lightSource5 = new LightSource(3.4028235E38F, (-338.7959F), 1304.5946F, 3157);
      assertNotNull(lightSource5);
      assertFalse(lightSource5.equals((Object)lightSource0));
      assertFalse(lightSource5.equals((Object)lightSource2));
      assertFalse(lightSource5.equals((Object)lightSource1));
      assertFalse(lightSource5.equals((Object)lightSource4));
      assertFalse(lightSource5.equals((Object)lightSource3));
      assertNull(lightSource5.getDiameter());
      assertEquals(3157, lightSource5.getColor());
      assertEquals((-338.7959F), lightSource5.getY(), 0.01F);
      assertEquals(1304.5946F, lightSource5.getZ(), 0.01F);
      assertEquals(3.4028235E38F, lightSource5.getX(), 0.01F);
      
      lightSourceArray0[5] = lightSource5;
      LightSource lightSource6 = new LightSource(0.0F, 0.0F, (-338.7959F), 2147481909);
      assertNotNull(lightSource6);
      assertFalse(lightSource6.equals((Object)lightSource2));
      assertFalse(lightSource6.equals((Object)lightSource0));
      assertFalse(lightSource6.equals((Object)lightSource1));
      assertFalse(lightSource6.equals((Object)lightSource4));
      assertFalse(lightSource6.equals((Object)lightSource3));
      assertFalse(lightSource6.equals((Object)lightSource5));
      assertEquals(2147481909, lightSource6.getColor());
      assertEquals((-338.7959F), lightSource6.getZ(), 0.01F);
      assertEquals(0.0F, lightSource6.getY(), 0.01F);
      assertEquals(0.0F, lightSource6.getX(), 0.01F);
      assertNull(lightSource6.getDiameter());
      
      lightSourceArray0[6] = lightSource6;
      Integer integer0 = new Integer(0);
      assertNotNull(integer0);
      assertEquals(0, (int)integer0);
      
      Class<CatalogPieceOfFurniture> class0 = CatalogPieceOfFurniture.class;
      ResourceURLContent resourceURLContent0 = new ResourceURLContent(class0, "", true);
      assertNotNull(resourceURLContent0);
      assertTrue(resourceURLContent0.isMultiPartResource());
      assertTrue(resourceURLContent0.isJAREntry());
      
      float[][] floatArray0 = new float[4][9];
      float[] floatArray1 = new float[9];
      floatArray1[0] = 0.0F;
      floatArray1[1] = (-338.7959F);
      floatArray1[2] = 0.5F;
      floatArray1[3] = 3.4028235E38F;
      floatArray1[4] = (-1.0F);
      floatArray1[5] = (-1.0F);
      floatArray0[0] = floatArray1;
      float[] floatArray2 = new float[6];
      assertFalse(floatArray2.equals((Object)floatArray1));
      
      floatArray2[0] = (-338.7959F);
      floatArray2[1] = 0.5F;
      floatArray2[2] = 898.7064F;
      floatArray2[4] = (float) 0;
      floatArray2[5] = 898.7064F;
      floatArray0[1] = floatArray2;
      float[] floatArray3 = new float[0];
      assertFalse(floatArray3.equals((Object)floatArray1));
      assertFalse(floatArray3.equals((Object)floatArray2));
      
      floatArray0[2] = floatArray3;
      floatArray0[3] = floatArray2;
      BigDecimal bigDecimal0 = BigDecimal.TEN;
      assertNotNull(bigDecimal0);
      assertEquals((short)10, bigDecimal0.shortValue());
      assertEquals((byte)10, bigDecimal0.byteValue());
      
      Light light0 = mock(Light.class, new ViolatedAssumptionAnswer());
      doReturn(lightSourceArray0).when(light0).getLightSources();
      doReturn(integer0).when(light0).getColor();
      doReturn("hJ%6t").when(light0).getCurrency();
      doReturn(0.0F).when(light0).getDepth();
      doReturn("hJ%6t").when(light0).getDescription();
      doReturn(898.7064F).when(light0).getElevation();
      doReturn((float)0).when(light0).getHeight();
      doReturn(resourceURLContent0).when(light0).getIcon();
      doReturn(resourceURLContent0).when(light0).getModel();
      doReturn(floatArray0).when(light0).getModelRotation();
      doReturn("ANGLE").when(light0).getName();
      doReturn(resourceURLContent0).when(light0).getPlanIcon();
      doReturn(bigDecimal0).when(light0).getPrice();
      doReturn("1,6wDVB3a3E*0^,'").when(light0).getStaircaseCutOutShape();
      doReturn(bigDecimal0).when(light0).getValueAddedTaxPercentage();
      doReturn((-338.7959F)).when(light0).getWidth();
      doReturn(true).when(light0).isBackFaceShown();
      doReturn(true).when(light0).isDeformable();
      doReturn(true).when(light0).isDoorOrWindow();
      doReturn(true).when(light0).isMovable();
      doReturn(true).when(light0).isResizable();
      doReturn(true).when(light0).isTexturable();
      byte[] byteArray0 = new byte[5];
      byteArray0[1] = (byte)1;
      byteArray0[2] = (byte) (-113);
      byteArray0[3] = (byte) (-32);
      byteArray0[4] = (byte)62;
      boolean boolean0 = FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      assertEquals(5, byteArray0.length);
      assertFalse(boolean0);
      assertArrayEquals(new byte[] {(byte)0, (byte)1, (byte) (-113), (byte) (-32), (byte)62}, byteArray0);
      
      HomeLight homeLight0 = new HomeLight(light0);
      assertEquals(4, floatArray0.length);
      assertEquals(7, lightSourceArray0.length);
      assertNotNull(homeLight0);
      assertEquals((short)10, bigDecimal0.shortValue());
      assertEquals((byte)10, bigDecimal0.byteValue());
      assertTrue(homeLight0.isDoorOrWindow());
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertEquals(0, (int)homeLight0.getColor());
      assertFalse(homeLight0.isNameVisible());
      assertEquals("ANGLE", homeLight0.getName());
      assertTrue(homeLight0.isBackFaceShown());
      assertFalse(homeLight0.isModelMirrored());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertEquals((-169.39795F), homeLight0.getX(), 0.01F);
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertEquals((-338.7959F), homeLight0.getWidth(), 0.01F);
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals("hJ%6t", homeLight0.getCurrency());
      assertTrue(homeLight0.isMovable());
      assertTrue(homeLight0.isResizable());
      assertNull(homeLight0.getCatalogId());
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertEquals("1,6wDVB3a3E*0^,'", homeLight0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertNull(homeLight0.getShininess());
      assertTrue(homeLight0.isVisible());
      assertEquals("hJ%6t", homeLight0.getDescription());
      assertTrue(homeLight0.isDeformable());
      assertEquals(898.7064F, homeLight0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertEquals(898.7064F, homeLight0.getElevation(), 0.01F);
      assertTrue(homeLight0.isTexturable());
      assertTrue(resourceURLContent0.isMultiPartResource());
      assertTrue(resourceURLContent0.isJAREntry());
      
      homeLight0.setY((-1.0F));
      assertEquals(4, floatArray0.length);
      assertEquals(7, lightSourceArray0.length);
      assertEquals((short)10, bigDecimal0.shortValue());
      assertEquals((byte)10, bigDecimal0.byteValue());
      assertTrue(homeLight0.isDoorOrWindow());
      assertEquals((-1.0F), homeLight0.getY(), 0.01F);
      assertEquals(0, (int)homeLight0.getColor());
      assertFalse(homeLight0.isNameVisible());
      assertEquals("ANGLE", homeLight0.getName());
      assertTrue(homeLight0.isBackFaceShown());
      assertFalse(homeLight0.isModelMirrored());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertEquals((-169.39795F), homeLight0.getX(), 0.01F);
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertEquals((-338.7959F), homeLight0.getWidth(), 0.01F);
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals("hJ%6t", homeLight0.getCurrency());
      assertTrue(homeLight0.isMovable());
      assertTrue(homeLight0.isResizable());
      assertNull(homeLight0.getCatalogId());
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertEquals("1,6wDVB3a3E*0^,'", homeLight0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertNull(homeLight0.getShininess());
      assertTrue(homeLight0.isVisible());
      assertEquals("hJ%6t", homeLight0.getDescription());
      assertTrue(homeLight0.isDeformable());
      assertEquals(898.7064F, homeLight0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertEquals(898.7064F, homeLight0.getElevation(), 0.01F);
      assertTrue(homeLight0.isTexturable());
      assertTrue(resourceURLContent0.isMultiPartResource());
      assertTrue(resourceURLContent0.isJAREntry());
      
      BigDecimal bigDecimal1 = homeLight0.getValueAddedTax();
      assertEquals(4, floatArray0.length);
      assertEquals(7, lightSourceArray0.length);
      assertNotNull(bigDecimal1);
      assertNotSame(bigDecimal0, bigDecimal1);
      assertNotSame(bigDecimal1, bigDecimal0);
      assertFalse(bigDecimal1.equals((Object)bigDecimal0));
      assertEquals((short)10, bigDecimal0.shortValue());
      assertEquals((byte)10, bigDecimal0.byteValue());
      assertTrue(homeLight0.isDoorOrWindow());
      assertEquals((-1.0F), homeLight0.getY(), 0.01F);
      assertEquals(0, (int)homeLight0.getColor());
      assertFalse(homeLight0.isNameVisible());
      assertEquals("ANGLE", homeLight0.getName());
      assertTrue(homeLight0.isBackFaceShown());
      assertFalse(homeLight0.isModelMirrored());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertEquals((-169.39795F), homeLight0.getX(), 0.01F);
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertEquals((-338.7959F), homeLight0.getWidth(), 0.01F);
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals("hJ%6t", homeLight0.getCurrency());
      assertTrue(homeLight0.isMovable());
      assertTrue(homeLight0.isResizable());
      assertNull(homeLight0.getCatalogId());
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertEquals("1,6wDVB3a3E*0^,'", homeLight0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertNull(homeLight0.getShininess());
      assertTrue(homeLight0.isVisible());
      assertEquals("hJ%6t", homeLight0.getDescription());
      assertTrue(homeLight0.isDeformable());
      assertEquals(898.7064F, homeLight0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertEquals(898.7064F, homeLight0.getElevation(), 0.01F);
      assertTrue(homeLight0.isTexturable());
      assertEquals((byte)100, bigDecimal1.byteValue());
      assertEquals((short)100, bigDecimal1.shortValue());
      assertTrue(resourceURLContent0.isMultiPartResource());
      assertTrue(resourceURLContent0.isJAREntry());
      
      BigDecimal bigDecimal2 = homeLight0.getValueAddedTax();
      assertEquals(4, floatArray0.length);
      assertEquals(7, lightSourceArray0.length);
      assertNotNull(bigDecimal2);
      assertNotSame(bigDecimal0, bigDecimal2);
      assertNotSame(bigDecimal0, bigDecimal1);
      assertNotSame(bigDecimal2, bigDecimal0);
      assertNotSame(bigDecimal2, bigDecimal1);
      assertFalse(bigDecimal0.equals((Object)bigDecimal1));
      assertFalse(bigDecimal2.equals((Object)bigDecimal0));
      assertTrue(bigDecimal2.equals((Object)bigDecimal1));
      assertEquals((short)10, bigDecimal0.shortValue());
      assertEquals((byte)10, bigDecimal0.byteValue());
      assertTrue(homeLight0.isDoorOrWindow());
      assertEquals((-1.0F), homeLight0.getY(), 0.01F);
      assertEquals(0, (int)homeLight0.getColor());
      assertFalse(homeLight0.isNameVisible());
      assertEquals("ANGLE", homeLight0.getName());
      assertTrue(homeLight0.isBackFaceShown());
      assertFalse(homeLight0.isModelMirrored());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertEquals((-169.39795F), homeLight0.getX(), 0.01F);
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertEquals((-338.7959F), homeLight0.getWidth(), 0.01F);
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals("hJ%6t", homeLight0.getCurrency());
      assertTrue(homeLight0.isMovable());
      assertTrue(homeLight0.isResizable());
      assertNull(homeLight0.getCatalogId());
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertEquals("1,6wDVB3a3E*0^,'", homeLight0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertNull(homeLight0.getShininess());
      assertTrue(homeLight0.isVisible());
      assertEquals("hJ%6t", homeLight0.getDescription());
      assertTrue(homeLight0.isDeformable());
      assertEquals(898.7064F, homeLight0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertEquals(898.7064F, homeLight0.getElevation(), 0.01F);
      assertTrue(homeLight0.isTexturable());
      assertEquals((byte)100, bigDecimal2.byteValue());
      assertEquals((short)100, bigDecimal2.shortValue());
      assertTrue(resourceURLContent0.isMultiPartResource());
      assertTrue(resourceURLContent0.isJAREntry());
      
      homeLight0.setVisible(true);
      assertEquals(4, floatArray0.length);
      assertEquals(7, lightSourceArray0.length);
      assertNotSame(bigDecimal0, bigDecimal2);
      assertNotSame(bigDecimal0, bigDecimal1);
      assertFalse(bigDecimal0.equals((Object)bigDecimal2));
      assertFalse(bigDecimal0.equals((Object)bigDecimal1));
      assertEquals((short)10, bigDecimal0.shortValue());
      assertEquals((byte)10, bigDecimal0.byteValue());
      assertTrue(homeLight0.isDoorOrWindow());
      assertEquals((-1.0F), homeLight0.getY(), 0.01F);
      assertEquals(0, (int)homeLight0.getColor());
      assertFalse(homeLight0.isNameVisible());
      assertEquals("ANGLE", homeLight0.getName());
      assertTrue(homeLight0.isBackFaceShown());
      assertFalse(homeLight0.isModelMirrored());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertEquals((-169.39795F), homeLight0.getX(), 0.01F);
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertEquals((-338.7959F), homeLight0.getWidth(), 0.01F);
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals("hJ%6t", homeLight0.getCurrency());
      assertTrue(homeLight0.isMovable());
      assertTrue(homeLight0.isResizable());
      assertNull(homeLight0.getCatalogId());
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertEquals("1,6wDVB3a3E*0^,'", homeLight0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertNull(homeLight0.getShininess());
      assertTrue(homeLight0.isVisible());
      assertEquals("hJ%6t", homeLight0.getDescription());
      assertTrue(homeLight0.isDeformable());
      assertEquals(898.7064F, homeLight0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertEquals(898.7064F, homeLight0.getElevation(), 0.01F);
      assertTrue(homeLight0.isTexturable());
      assertTrue(resourceURLContent0.isMultiPartResource());
      assertTrue(resourceURLContent0.isJAREntry());
      
      homeLight0.setNameStyle((TextStyle) null);
      assertEquals(4, floatArray0.length);
      assertEquals(7, lightSourceArray0.length);
      assertNotSame(bigDecimal0, bigDecimal2);
      assertNotSame(bigDecimal0, bigDecimal1);
      assertFalse(bigDecimal0.equals((Object)bigDecimal2));
      assertFalse(bigDecimal0.equals((Object)bigDecimal1));
      assertEquals((short)10, bigDecimal0.shortValue());
      assertEquals((byte)10, bigDecimal0.byteValue());
      assertTrue(homeLight0.isDoorOrWindow());
      assertEquals((-1.0F), homeLight0.getY(), 0.01F);
      assertEquals(0, (int)homeLight0.getColor());
      assertFalse(homeLight0.isNameVisible());
      assertEquals("ANGLE", homeLight0.getName());
      assertTrue(homeLight0.isBackFaceShown());
      assertFalse(homeLight0.isModelMirrored());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertEquals((-169.39795F), homeLight0.getX(), 0.01F);
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertEquals((-338.7959F), homeLight0.getWidth(), 0.01F);
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals("hJ%6t", homeLight0.getCurrency());
      assertTrue(homeLight0.isMovable());
      assertTrue(homeLight0.isResizable());
      assertNull(homeLight0.getCatalogId());
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertEquals("1,6wDVB3a3E*0^,'", homeLight0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertNull(homeLight0.getShininess());
      assertTrue(homeLight0.isVisible());
      assertEquals("hJ%6t", homeLight0.getDescription());
      assertTrue(homeLight0.isDeformable());
      assertEquals(898.7064F, homeLight0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertEquals(898.7064F, homeLight0.getElevation(), 0.01F);
      assertTrue(homeLight0.isTexturable());
      assertTrue(resourceURLContent0.isMultiPartResource());
      assertTrue(resourceURLContent0.isJAREntry());
      
      String string0 = homeLight0.getCurrency();
      assertEquals(4, floatArray0.length);
      assertEquals(7, lightSourceArray0.length);
      assertNotNull(string0);
      assertNotSame(bigDecimal0, bigDecimal2);
      assertNotSame(bigDecimal0, bigDecimal1);
      assertFalse(bigDecimal0.equals((Object)bigDecimal2));
      assertFalse(bigDecimal0.equals((Object)bigDecimal1));
      assertEquals("hJ%6t", string0);
      assertEquals((short)10, bigDecimal0.shortValue());
      assertEquals((byte)10, bigDecimal0.byteValue());
      assertTrue(homeLight0.isDoorOrWindow());
      assertEquals((-1.0F), homeLight0.getY(), 0.01F);
      assertEquals(0, (int)homeLight0.getColor());
      assertFalse(homeLight0.isNameVisible());
      assertEquals("ANGLE", homeLight0.getName());
      assertTrue(homeLight0.isBackFaceShown());
      assertFalse(homeLight0.isModelMirrored());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertEquals((-169.39795F), homeLight0.getX(), 0.01F);
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertEquals((-338.7959F), homeLight0.getWidth(), 0.01F);
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals("hJ%6t", homeLight0.getCurrency());
      assertTrue(homeLight0.isMovable());
      assertTrue(homeLight0.isResizable());
      assertNull(homeLight0.getCatalogId());
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertEquals("1,6wDVB3a3E*0^,'", homeLight0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertNull(homeLight0.getShininess());
      assertTrue(homeLight0.isVisible());
      assertEquals("hJ%6t", homeLight0.getDescription());
      assertTrue(homeLight0.isDeformable());
      assertEquals(898.7064F, homeLight0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertEquals(898.7064F, homeLight0.getElevation(), 0.01F);
      assertTrue(homeLight0.isTexturable());
      assertTrue(resourceURLContent0.isMultiPartResource());
      assertTrue(resourceURLContent0.isJAREntry());
      
      homeLight0.setHeight((-1.0F));
      assertEquals(4, floatArray0.length);
      assertEquals(7, lightSourceArray0.length);
      assertNotSame(bigDecimal0, bigDecimal2);
      assertNotSame(bigDecimal0, bigDecimal1);
      assertFalse(bigDecimal0.equals((Object)bigDecimal2));
      assertFalse(bigDecimal0.equals((Object)bigDecimal1));
      assertEquals((short)10, bigDecimal0.shortValue());
      assertEquals((byte)10, bigDecimal0.byteValue());
      assertTrue(homeLight0.isDoorOrWindow());
      assertEquals((-1.0F), homeLight0.getY(), 0.01F);
      assertEquals(0, (int)homeLight0.getColor());
      assertFalse(homeLight0.isNameVisible());
      assertEquals("ANGLE", homeLight0.getName());
      assertTrue(homeLight0.isBackFaceShown());
      assertFalse(homeLight0.isModelMirrored());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertEquals((-169.39795F), homeLight0.getX(), 0.01F);
      assertEquals((-1.0F), homeLight0.getHeight(), 0.01F);
      assertEquals((-338.7959F), homeLight0.getWidth(), 0.01F);
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals("hJ%6t", homeLight0.getCurrency());
      assertTrue(homeLight0.isMovable());
      assertTrue(homeLight0.isResizable());
      assertNull(homeLight0.getCatalogId());
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertEquals("1,6wDVB3a3E*0^,'", homeLight0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertNull(homeLight0.getShininess());
      assertTrue(homeLight0.isVisible());
      assertEquals("hJ%6t", homeLight0.getDescription());
      assertTrue(homeLight0.isDeformable());
      assertEquals(898.7064F, homeLight0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertEquals(898.7064F, homeLight0.getElevation(), 0.01F);
      assertTrue(homeLight0.isTexturable());
      assertTrue(resourceURLContent0.isMultiPartResource());
      assertTrue(resourceURLContent0.isJAREntry());
      
      homeLight0.setX(1377.0F);
      assertEquals(4, floatArray0.length);
      assertEquals(7, lightSourceArray0.length);
      assertNotSame(bigDecimal0, bigDecimal2);
      assertNotSame(bigDecimal0, bigDecimal1);
      assertFalse(bigDecimal0.equals((Object)bigDecimal2));
      assertFalse(bigDecimal0.equals((Object)bigDecimal1));
      assertEquals((short)10, bigDecimal0.shortValue());
      assertEquals((byte)10, bigDecimal0.byteValue());
      assertTrue(homeLight0.isDoorOrWindow());
      assertEquals((-1.0F), homeLight0.getY(), 0.01F);
      assertEquals(0, (int)homeLight0.getColor());
      assertFalse(homeLight0.isNameVisible());
      assertEquals("ANGLE", homeLight0.getName());
      assertTrue(homeLight0.isBackFaceShown());
      assertFalse(homeLight0.isModelMirrored());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertEquals((-1.0F), homeLight0.getHeight(), 0.01F);
      assertEquals((-338.7959F), homeLight0.getWidth(), 0.01F);
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals("hJ%6t", homeLight0.getCurrency());
      assertTrue(homeLight0.isMovable());
      assertTrue(homeLight0.isResizable());
      assertNull(homeLight0.getCatalogId());
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertEquals("1,6wDVB3a3E*0^,'", homeLight0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertNull(homeLight0.getShininess());
      assertEquals(1377.0F, homeLight0.getX(), 0.01F);
      assertTrue(homeLight0.isVisible());
      assertEquals("hJ%6t", homeLight0.getDescription());
      assertTrue(homeLight0.isDeformable());
      assertEquals(898.7064F, homeLight0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertEquals(898.7064F, homeLight0.getElevation(), 0.01F);
      assertTrue(homeLight0.isTexturable());
      assertTrue(resourceURLContent0.isMultiPartResource());
      assertTrue(resourceURLContent0.isJAREntry());
      
      BigDecimal bigDecimal3 = homeLight0.getValueAddedTax();
      assertEquals(4, floatArray0.length);
      assertEquals(7, lightSourceArray0.length);
      assertNotNull(bigDecimal3);
      assertNotSame(bigDecimal0, bigDecimal2);
      assertNotSame(bigDecimal0, bigDecimal1);
      assertNotSame(bigDecimal0, bigDecimal3);
      assertNotSame(bigDecimal3, bigDecimal2);
      assertNotSame(bigDecimal3, bigDecimal1);
      assertNotSame(bigDecimal3, bigDecimal0);
      assertFalse(bigDecimal0.equals((Object)bigDecimal2));
      assertFalse(bigDecimal0.equals((Object)bigDecimal1));
      assertTrue(bigDecimal3.equals((Object)bigDecimal1));
      assertTrue(bigDecimal3.equals((Object)bigDecimal2));
      assertFalse(bigDecimal3.equals((Object)bigDecimal0));
      assertEquals((short)10, bigDecimal0.shortValue());
      assertEquals((byte)10, bigDecimal0.byteValue());
      assertEquals((short)100, bigDecimal3.shortValue());
      assertEquals((byte)100, bigDecimal3.byteValue());
      assertTrue(homeLight0.isDoorOrWindow());
      assertEquals((-1.0F), homeLight0.getY(), 0.01F);
      assertEquals(0, (int)homeLight0.getColor());
      assertFalse(homeLight0.isNameVisible());
      assertEquals("ANGLE", homeLight0.getName());
      assertTrue(homeLight0.isBackFaceShown());
      assertFalse(homeLight0.isModelMirrored());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertEquals((-1.0F), homeLight0.getHeight(), 0.01F);
      assertEquals((-338.7959F), homeLight0.getWidth(), 0.01F);
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals("hJ%6t", homeLight0.getCurrency());
      assertTrue(homeLight0.isMovable());
      assertTrue(homeLight0.isResizable());
      assertNull(homeLight0.getCatalogId());
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertEquals("1,6wDVB3a3E*0^,'", homeLight0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertNull(homeLight0.getShininess());
      assertEquals(1377.0F, homeLight0.getX(), 0.01F);
      assertTrue(homeLight0.isVisible());
      assertEquals("hJ%6t", homeLight0.getDescription());
      assertTrue(homeLight0.isDeformable());
      assertEquals(898.7064F, homeLight0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertEquals(898.7064F, homeLight0.getElevation(), 0.01F);
      assertTrue(homeLight0.isTexturable());
      assertTrue(resourceURLContent0.isMultiPartResource());
      assertTrue(resourceURLContent0.isJAREntry());
      
      String string1 = homeLight0.getName();
      assertEquals(4, floatArray0.length);
      assertEquals(7, lightSourceArray0.length);
      assertNotNull(string1);
      assertNotSame(bigDecimal0, bigDecimal2);
      assertNotSame(bigDecimal0, bigDecimal1);
      assertNotSame(bigDecimal0, bigDecimal3);
      assertFalse(bigDecimal0.equals((Object)bigDecimal2));
      assertFalse(bigDecimal0.equals((Object)bigDecimal1));
      assertFalse(bigDecimal0.equals((Object)bigDecimal3));
      assertFalse(string1.equals((Object)string0));
      assertEquals("ANGLE", string1);
      assertEquals((short)10, bigDecimal0.shortValue());
      assertEquals((byte)10, bigDecimal0.byteValue());
      assertTrue(homeLight0.isDoorOrWindow());
      assertEquals((-1.0F), homeLight0.getY(), 0.01F);
      assertEquals(0, (int)homeLight0.getColor());
      assertFalse(homeLight0.isNameVisible());
      assertEquals("ANGLE", homeLight0.getName());
      assertTrue(homeLight0.isBackFaceShown());
      assertFalse(homeLight0.isModelMirrored());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertEquals((-1.0F), homeLight0.getHeight(), 0.01F);
      assertEquals((-338.7959F), homeLight0.getWidth(), 0.01F);
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals("hJ%6t", homeLight0.getCurrency());
      assertTrue(homeLight0.isMovable());
      assertTrue(homeLight0.isResizable());
      assertNull(homeLight0.getCatalogId());
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertEquals("1,6wDVB3a3E*0^,'", homeLight0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertNull(homeLight0.getShininess());
      assertEquals(1377.0F, homeLight0.getX(), 0.01F);
      assertTrue(homeLight0.isVisible());
      assertEquals("hJ%6t", homeLight0.getDescription());
      assertTrue(homeLight0.isDeformable());
      assertEquals(898.7064F, homeLight0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertEquals(898.7064F, homeLight0.getElevation(), 0.01F);
      assertTrue(homeLight0.isTexturable());
      assertTrue(resourceURLContent0.isMultiPartResource());
      assertTrue(resourceURLContent0.isJAREntry());
      
      Level level0 = homeLight0.getLevel();
      assertEquals(4, floatArray0.length);
      assertEquals(7, lightSourceArray0.length);
      assertNull(level0);
      assertNotSame(bigDecimal0, bigDecimal2);
      assertNotSame(bigDecimal0, bigDecimal1);
      assertNotSame(bigDecimal0, bigDecimal3);
      assertFalse(bigDecimal0.equals((Object)bigDecimal2));
      assertFalse(bigDecimal0.equals((Object)bigDecimal1));
      assertFalse(bigDecimal0.equals((Object)bigDecimal3));
      assertEquals((short)10, bigDecimal0.shortValue());
      assertEquals((byte)10, bigDecimal0.byteValue());
      assertTrue(homeLight0.isDoorOrWindow());
      assertEquals((-1.0F), homeLight0.getY(), 0.01F);
      assertEquals(0, (int)homeLight0.getColor());
      assertFalse(homeLight0.isNameVisible());
      assertEquals("ANGLE", homeLight0.getName());
      assertTrue(homeLight0.isBackFaceShown());
      assertFalse(homeLight0.isModelMirrored());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertEquals((-1.0F), homeLight0.getHeight(), 0.01F);
      assertEquals((-338.7959F), homeLight0.getWidth(), 0.01F);
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals("hJ%6t", homeLight0.getCurrency());
      assertTrue(homeLight0.isMovable());
      assertTrue(homeLight0.isResizable());
      assertNull(homeLight0.getCatalogId());
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertEquals("1,6wDVB3a3E*0^,'", homeLight0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertNull(homeLight0.getShininess());
      assertEquals(1377.0F, homeLight0.getX(), 0.01F);
      assertTrue(homeLight0.isVisible());
      assertEquals("hJ%6t", homeLight0.getDescription());
      assertTrue(homeLight0.isDeformable());
      assertEquals(898.7064F, homeLight0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertEquals(898.7064F, homeLight0.getElevation(), 0.01F);
      assertTrue(homeLight0.isTexturable());
      assertTrue(resourceURLContent0.isMultiPartResource());
      assertTrue(resourceURLContent0.isJAREntry());
      
      homeLight0.setName("ANGLE");
      assertEquals(4, floatArray0.length);
      assertEquals(7, lightSourceArray0.length);
      assertNotSame(bigDecimal0, bigDecimal2);
      assertNotSame(bigDecimal0, bigDecimal1);
      assertNotSame(bigDecimal0, bigDecimal3);
      assertFalse(bigDecimal0.equals((Object)bigDecimal2));
      assertFalse(bigDecimal0.equals((Object)bigDecimal1));
      assertFalse(bigDecimal0.equals((Object)bigDecimal3));
      assertEquals((short)10, bigDecimal0.shortValue());
      assertEquals((byte)10, bigDecimal0.byteValue());
      assertTrue(homeLight0.isDoorOrWindow());
      assertEquals((-1.0F), homeLight0.getY(), 0.01F);
      assertEquals(0, (int)homeLight0.getColor());
      assertFalse(homeLight0.isNameVisible());
      assertEquals("ANGLE", homeLight0.getName());
      assertTrue(homeLight0.isBackFaceShown());
      assertFalse(homeLight0.isModelMirrored());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertEquals((-1.0F), homeLight0.getHeight(), 0.01F);
      assertEquals((-338.7959F), homeLight0.getWidth(), 0.01F);
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals("hJ%6t", homeLight0.getCurrency());
      assertTrue(homeLight0.isMovable());
      assertTrue(homeLight0.isResizable());
      assertNull(homeLight0.getCatalogId());
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertEquals("1,6wDVB3a3E*0^,'", homeLight0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertNull(homeLight0.getShininess());
      assertEquals(1377.0F, homeLight0.getX(), 0.01F);
      assertTrue(homeLight0.isVisible());
      assertEquals("hJ%6t", homeLight0.getDescription());
      assertTrue(homeLight0.isDeformable());
      assertEquals(898.7064F, homeLight0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertEquals(898.7064F, homeLight0.getElevation(), 0.01F);
      assertTrue(homeLight0.isTexturable());
      assertTrue(resourceURLContent0.isMultiPartResource());
      assertTrue(resourceURLContent0.isJAREntry());
      
      boolean boolean1 = homeLight0.isNameVisible();
      assertEquals(4, floatArray0.length);
      assertEquals(7, lightSourceArray0.length);
      assertNotSame(bigDecimal0, bigDecimal2);
      assertNotSame(bigDecimal0, bigDecimal1);
      assertNotSame(bigDecimal0, bigDecimal3);
      assertFalse(bigDecimal0.equals((Object)bigDecimal2));
      assertFalse(bigDecimal0.equals((Object)bigDecimal1));
      assertFalse(bigDecimal0.equals((Object)bigDecimal3));
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      assertEquals((short)10, bigDecimal0.shortValue());
      assertEquals((byte)10, bigDecimal0.byteValue());
      assertTrue(homeLight0.isDoorOrWindow());
      assertEquals((-1.0F), homeLight0.getY(), 0.01F);
      assertEquals(0, (int)homeLight0.getColor());
      assertFalse(homeLight0.isNameVisible());
      assertEquals("ANGLE", homeLight0.getName());
      assertTrue(homeLight0.isBackFaceShown());
      assertFalse(homeLight0.isModelMirrored());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertEquals((-1.0F), homeLight0.getHeight(), 0.01F);
      assertEquals((-338.7959F), homeLight0.getWidth(), 0.01F);
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals("hJ%6t", homeLight0.getCurrency());
      assertTrue(homeLight0.isMovable());
      assertTrue(homeLight0.isResizable());
      assertNull(homeLight0.getCatalogId());
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertEquals("1,6wDVB3a3E*0^,'", homeLight0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertNull(homeLight0.getShininess());
      assertEquals(1377.0F, homeLight0.getX(), 0.01F);
      assertTrue(homeLight0.isVisible());
      assertEquals("hJ%6t", homeLight0.getDescription());
      assertTrue(homeLight0.isDeformable());
      assertEquals(898.7064F, homeLight0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertEquals(898.7064F, homeLight0.getElevation(), 0.01F);
      assertTrue(homeLight0.isTexturable());
      assertTrue(resourceURLContent0.isMultiPartResource());
      assertTrue(resourceURLContent0.isJAREntry());
      
      homeLight0.setNameYOffset(3211.5857F);
      assertEquals(4, floatArray0.length);
      assertEquals(7, lightSourceArray0.length);
      assertNotSame(bigDecimal0, bigDecimal2);
      assertNotSame(bigDecimal0, bigDecimal1);
      assertNotSame(bigDecimal0, bigDecimal3);
      assertFalse(bigDecimal0.equals((Object)bigDecimal2));
      assertFalse(bigDecimal0.equals((Object)bigDecimal1));
      assertFalse(bigDecimal0.equals((Object)bigDecimal3));
      assertEquals((short)10, bigDecimal0.shortValue());
      assertEquals((byte)10, bigDecimal0.byteValue());
      assertTrue(homeLight0.isDoorOrWindow());
      assertEquals((-1.0F), homeLight0.getY(), 0.01F);
      assertEquals(0, (int)homeLight0.getColor());
      assertEquals(3211.5857F, homeLight0.getNameYOffset(), 0.01F);
      assertFalse(homeLight0.isNameVisible());
      assertEquals("ANGLE", homeLight0.getName());
      assertTrue(homeLight0.isBackFaceShown());
      assertFalse(homeLight0.isModelMirrored());
      assertEquals((-1.0F), homeLight0.getHeight(), 0.01F);
      assertEquals((-338.7959F), homeLight0.getWidth(), 0.01F);
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals("hJ%6t", homeLight0.getCurrency());
      assertTrue(homeLight0.isMovable());
      assertTrue(homeLight0.isResizable());
      assertNull(homeLight0.getCatalogId());
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertEquals("1,6wDVB3a3E*0^,'", homeLight0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertNull(homeLight0.getShininess());
      assertEquals(1377.0F, homeLight0.getX(), 0.01F);
      assertTrue(homeLight0.isVisible());
      assertEquals("hJ%6t", homeLight0.getDescription());
      assertTrue(homeLight0.isDeformable());
      assertEquals(898.7064F, homeLight0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertEquals(898.7064F, homeLight0.getElevation(), 0.01F);
      assertTrue(homeLight0.isTexturable());
      assertTrue(resourceURLContent0.isMultiPartResource());
      assertTrue(resourceURLContent0.isJAREntry());
  }

  @Test(timeout = 4000)
  public void test216()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      Light light0 = mock(Light.class, new ViolatedAssumptionAnswer());
      doReturn((LightSource[]) null).when(light0).getLightSources();
      doReturn((Integer) null).when(light0).getColor();
      doReturn((String) null).when(light0).getCurrency();
      doReturn(0.0F).when(light0).getDepth();
      doReturn((String) null).when(light0).getDescription();
      doReturn(0.0F).when(light0).getElevation();
      doReturn(0.0F).when(light0).getHeight();
      doReturn((Content) null).when(light0).getIcon();
      doReturn((Content) null).when(light0).getModel();
      doReturn((float[][]) null).when(light0).getModelRotation();
      doReturn((String) null).when(light0).getName();
      doReturn((Content) null).when(light0).getPlanIcon();
      doReturn((BigDecimal) null).when(light0).getPrice();
      doReturn((String) null).when(light0).getStaircaseCutOutShape();
      doReturn((BigDecimal) null).when(light0).getValueAddedTaxPercentage();
      doReturn(0.0F).when(light0).getWidth();
      doReturn(false).when(light0).isBackFaceShown();
      doReturn(false).when(light0).isDeformable();
      doReturn(false).when(light0).isDoorOrWindow();
      doReturn(false).when(light0).isMovable();
      doReturn(false).when(light0).isResizable();
      doReturn(false).when(light0).isTexturable();
      HomeLight homeLight0 = new HomeLight(light0);
      Float.floatToIntBits((byte) (-32));
      HomeLight homeLight1 = homeLight0.clone();
      homeLight0.isBottomRightPointAt(1.0F, 3507.3342F, 751.5084F);
      homeLight1.clone();
      homeLight0.setAngle((-119.7F));
      homeLight0.getTexture();
      homeLight0.setAngle(3507.3342F);
      homeLight0.setName("\"4':5j?4IF5Be]");
      Integer integer0 = Integer.valueOf((-2967));
      HomeLight homeLight2 = homeLight0.clone();
      // Undeclared exception!
      try { 
        homeLight2.setColor(integer0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Piece isn't texturable
         //
         verifyException("com.eteks.sweethome3d.model.HomePieceOfFurniture", e);
      }
  }

  @Test(timeout = 4000)
  public void test217()  throws Throwable  {
      LightSource[] lightSourceArray0 = new LightSource[8];
      URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      URL uRL0 = MockURL.URL("s<7]@ykxs+ 0`a ", (String) null, (-1666), "", uRLStreamHandler0);
      TemporaryURLContent temporaryURLContent0 = new TemporaryURLContent(uRL0);
      BigDecimal bigDecimal0 = BigDecimal.TEN;
      CatalogLight catalogLight0 = new CatalogLight("\"<xp|JAv^\"<^Qh{/~", "s<7]@ykxs+ 0`a ", "s<7]@ykxs+ 0`a ", temporaryURLContent0, temporaryURLContent0, temporaryURLContent0, (-611.6462F), 1.7441415F, 0.5F, (-897.795F), false, lightSourceArray0, "", (float[][]) null, "P'HZa~G", false, false, false, bigDecimal0, bigDecimal0, "");
      HomeLight homeLight0 = new HomeLight(catalogLight0);
      HomeLight homeLight1 = homeLight0.clone();
      HomeLight homeLight2 = homeLight0.clone();
      boolean boolean0 = homeLight1.isBottomRightPointAt(4.4953394F, 4.4953394F, 1.7441415F);
      assertFalse(boolean0);
      
      homeLight2.setMovable(false);
      float[][] floatArray0 = homeLight0.getPoints();
      assertEquals(4, floatArray0.length);
      
      BigDecimal bigDecimal1 = homeLight2.getPriceValueAddedTaxIncluded();
      assertEquals((-611.6462F), homeLight2.getWidth(), 0.01F);
      assertEquals(0.8720707F, homeLight2.getY(), 0.01F);
      assertEquals((short)110, bigDecimal1.shortValue());
      assertEquals(1.7441415F, homeLight2.getDepth(), 0.01F);
      assertNotSame(homeLight2, homeLight1);
      assertEquals(0.0F, homeLight2.getAngle(), 0.01F);
      assertEquals((-305.8231F), homeLight2.getX(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test218()  throws Throwable  {
      Light light0 = mock(Light.class, new ViolatedAssumptionAnswer());
      doReturn((LightSource[]) null).when(light0).getLightSources();
      doReturn((Integer) null).when(light0).getColor();
      doReturn((String) null).when(light0).getCurrency();
      doReturn(0.0F).when(light0).getDepth();
      doReturn((String) null).when(light0).getDescription();
      doReturn(0.0F).when(light0).getElevation();
      doReturn(0.0F).when(light0).getHeight();
      doReturn((Content) null).when(light0).getIcon();
      doReturn((Content) null).when(light0).getModel();
      doReturn((float[][]) null).when(light0).getModelRotation();
      doReturn((String) null).when(light0).getName();
      doReturn((Content) null).when(light0).getPlanIcon();
      doReturn((BigDecimal) null).when(light0).getPrice();
      doReturn((String) null).when(light0).getStaircaseCutOutShape();
      doReturn((BigDecimal) null).when(light0).getValueAddedTaxPercentage();
      doReturn(0.0F).when(light0).getWidth();
      doReturn(false).when(light0).isBackFaceShown();
      doReturn(false).when(light0).isDeformable();
      doReturn(false).when(light0).isDoorOrWindow();
      doReturn(false).when(light0).isMovable();
      doReturn(false).when(light0).isResizable();
      doReturn(false).when(light0).isTexturable();
      HomeLight homeLight0 = new HomeLight(light0);
      homeLight0.getDescription();
      homeLight0.setNameXOffset((-119.7F));
      HomeLight homeLight1 = homeLight0.clone();
      homeLight0.isBackFaceShown();
      homeLight1.setMovable(false);
      homeLight1.isBackFaceShown();
      assertEquals((-119.7F), homeLight0.getNameXOffset(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test219()  throws Throwable  {
      Integer integer0 = new Integer(1431655765);
      Light light0 = mock(Light.class, new ViolatedAssumptionAnswer());
      doReturn((LightSource[]) null).when(light0).getLightSources();
      doReturn((Integer) null).when(light0).getColor();
      doReturn((String) null).when(light0).getCurrency();
      doReturn(0.0F).when(light0).getDepth();
      doReturn((String) null).when(light0).getDescription();
      doReturn(0.0F).when(light0).getElevation();
      doReturn(0.0F).when(light0).getHeight();
      doReturn((Content) null).when(light0).getIcon();
      doReturn((Content) null).when(light0).getModel();
      doReturn((float[][]) null).when(light0).getModelRotation();
      doReturn((String) null).when(light0).getName();
      doReturn((Content) null).when(light0).getPlanIcon();
      doReturn((BigDecimal) null).when(light0).getPrice();
      doReturn((String) null).when(light0).getStaircaseCutOutShape();
      doReturn((BigDecimal) null).when(light0).getValueAddedTaxPercentage();
      doReturn(0.0F).when(light0).getWidth();
      doReturn(false).when(light0).isBackFaceShown();
      doReturn(false).when(light0).isDeformable();
      doReturn(false).when(light0).isDoorOrWindow();
      doReturn(false).when(light0).isMovable();
      doReturn(false).when(light0).isResizable();
      doReturn(false).when(light0).isTexturable();
      byte[] byteArray0 = new byte[5];
      byteArray0[1] = (byte)1;
      HomeLight homeLight0 = new HomeLight(light0);
      homeLight0.setY(1431655765);
      homeLight0.getValueAddedTax();
      homeLight0.getName();
      homeLight0.getLevel();
      HomeLight homeLight1 = homeLight0.clone();
      homeLight1.setAngle(39.641678F);
      homeLight0.setY(430.6548F);
      homeLight0.getValueAddedTax();
      homeLight1.getLevel();
      homeLight0.setX(0.1F);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "");
      homeLight0.containsPoint(2422.3784F, 1816.8824F, 0.5F);
      homeLight0.setNameYOffset(430.6548F);
      homeLight0.getModel();
      assertEquals(0.1F, homeLight0.getX(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test220()  throws Throwable  {
      LightSource[] lightSourceArray0 = new LightSource[8];
      Float.valueOf(0.0F);
      Float float0 = Float.valueOf(0.0F);
      LightSource lightSource0 = new LightSource(275.0F, (-1.0F), 275.0F, 2, float0);
      lightSourceArray0[0] = lightSource0;
      LightSource lightSource1 = new LightSource((-2111.4F), 2, 3.4028235E38F, 2);
      lightSourceArray0[1] = lightSource1;
      LightSource lightSource2 = new LightSource(275.0F, 1.0F, 0.0F, 2772);
      lightSourceArray0[2] = lightSource2;
      LightSource lightSource3 = new LightSource(2, 884.9269F, 2, 2772, float0);
      lightSourceArray0[3] = lightSource3;
      LightSource lightSource4 = new LightSource(1822.711F, 3129.742F, 1.0F, 1861, float0);
      lightSourceArray0[4] = lightSource4;
      LightSource lightSource5 = new LightSource((-2111.4F), 275.0F, (-1.0F), 1861);
      lightSourceArray0[5] = lightSource5;
      LightSource lightSource6 = new LightSource(1861, 0.0F, (-830.0F), 2);
      lightSourceArray0[6] = lightSource6;
      LightSource lightSource7 = new LightSource((-2165.866F), (-776.0F), (-2733.555F), 1861);
      lightSourceArray0[7] = lightSource7;
      Integer integer0 = Integer.valueOf((-3231));
      ResourceURLContent resourceURLContent0 = new ResourceURLContent((URL) null, false);
      float[][] floatArray0 = new float[9][7];
      float[] floatArray1 = new float[3];
      floatArray1[0] = (-1.0F);
      floatArray1[1] = (-1.0F);
      floatArray1[2] = (-1.0F);
      floatArray0[0] = floatArray1;
      float[] floatArray2 = new float[0];
      floatArray0[1] = floatArray2;
      float[] floatArray3 = new float[9];
      floatArray3[0] = (-1.0F);
      floatArray3[1] = 1822.711F;
      floatArray3[2] = (-2165.866F);
      floatArray3[3] = 0.5F;
      floatArray3[4] = 884.9269F;
      floatArray3[5] = 3693.166F;
      floatArray3[6] = (float) 2772;
      floatArray3[7] = (-2733.555F);
      floatArray3[8] = 884.9269F;
      floatArray0[2] = floatArray3;
      float[] floatArray4 = new float[5];
      floatArray4[0] = 0.0F;
      floatArray4[1] = 3.4028235E38F;
      floatArray4[2] = (float) 1861;
      floatArray4[3] = (-2111.4F);
      floatArray4[4] = 0.0F;
      floatArray0[3] = floatArray4;
      float[] floatArray5 = new float[8];
      floatArray5[0] = 3.4028235E38F;
      floatArray5[1] = (-830.0F);
      floatArray5[2] = 0.5F;
      floatArray5[3] = (-1.0F);
      floatArray5[4] = 3129.742F;
      floatArray5[5] = 3.4028235E38F;
      floatArray5[6] = 3693.166F;
      floatArray5[7] = 3129.742F;
      floatArray0[4] = floatArray5;
      float[] floatArray6 = new float[8];
      floatArray6[0] = (-2165.866F);
      floatArray6[1] = (-776.0F);
      floatArray6[2] = 0.5F;
      floatArray6[3] = 0.5F;
      floatArray6[4] = 884.9269F;
      floatArray6[5] = (-994.538F);
      floatArray6[6] = 3693.166F;
      floatArray6[7] = (-2733.555F);
      floatArray0[5] = floatArray6;
      float[] floatArray7 = new float[9];
      floatArray7[0] = 0.5F;
      floatArray7[1] = (-994.538F);
      floatArray7[2] = (-994.538F);
      floatArray7[3] = (float) 2;
      floatArray7[4] = 0.5F;
      floatArray7[5] = 3129.742F;
      floatArray7[6] = (-2733.555F);
      floatArray7[7] = (float) (-3231);
      floatArray7[8] = 3.4028235E38F;
      floatArray0[6] = floatArray7;
      float[] floatArray8 = new float[6];
      floatArray8[0] = (float) 1861;
      floatArray8[1] = 0.5F;
      floatArray8[2] = 1822.711F;
      floatArray8[3] = 0.0F;
      floatArray8[4] = 0.0F;
      floatArray8[5] = (-1.0F);
      floatArray0[7] = floatArray8;
      float[] floatArray9 = new float[9];
      floatArray9[0] = (-2111.4F);
      floatArray9[1] = 884.9269F;
      floatArray9[2] = 3.4028235E38F;
      floatArray9[3] = 1.0F;
      floatArray9[4] = 0.5F;
      floatArray9[5] = (float) 2772;
      floatArray9[6] = 0.0F;
      floatArray9[7] = 2.0F;
      floatArray9[8] = (-830.0F);
      floatArray0[8] = floatArray9;
      BigDecimal bigDecimal0 = new BigDecimal(2147481970);
      Light light0 = mock(Light.class, new ViolatedAssumptionAnswer());
      doReturn(lightSourceArray0).when(light0).getLightSources();
      doReturn(integer0).when(light0).getColor();
      doReturn("(f%SVH6p8XrVNu").when(light0).getCurrency();
      doReturn((-1.0F)).when(light0).getDepth();
      doReturn("JBpYs##").when(light0).getDescription();
      doReturn(3693.166F).when(light0).getElevation();
      doReturn(0.5F).when(light0).getHeight();
      doReturn(resourceURLContent0).when(light0).getIcon();
      doReturn(resourceURLContent0).when(light0).getModel();
      doReturn(floatArray0).when(light0).getModelRotation();
      doReturn((String) null).when(light0).getName();
      doReturn(resourceURLContent0).when(light0).getPlanIcon();
      doReturn(bigDecimal0).when(light0).getPrice();
      doReturn("com.eteks.sweethome3d.model.FurnitureCategory").when(light0).getStaircaseCutOutShape();
      doReturn(bigDecimal0).when(light0).getValueAddedTaxPercentage();
      doReturn((-994.538F)).when(light0).getWidth();
      doReturn(false).when(light0).isBackFaceShown();
      doReturn(true).when(light0).isDeformable();
      doReturn(false).when(light0).isDoorOrWindow();
      doReturn(false).when(light0).isMovable();
      doReturn(false).when(light0).isResizable();
      doReturn(true).when(light0).isTexturable();
      HomeLight homeLight0 = new HomeLight(light0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      String string0 = ",}^()}_8y 9c]u\\Sls";
      HomeLight homeLight1 = null;
      try {
        homeLight1 = new HomeLight(homeLight0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("com.eteks.sweethome3d.model.HomePieceOfFurniture", e);
      }
  }

  @Test(timeout = 4000)
  public void test221()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      Light light0 = mock(Light.class, new ViolatedAssumptionAnswer());
      doReturn((LightSource[]) null).when(light0).getLightSources();
      doReturn((Integer) null).when(light0).getColor();
      doReturn((String) null).when(light0).getCurrency();
      doReturn(0.0F).when(light0).getDepth();
      doReturn((String) null).when(light0).getDescription();
      doReturn(0.0F).when(light0).getElevation();
      doReturn(0.0F).when(light0).getHeight();
      doReturn((Content) null).when(light0).getIcon();
      doReturn((Content) null).when(light0).getModel();
      doReturn((float[][]) null).when(light0).getModelRotation();
      doReturn((String) null).when(light0).getName();
      doReturn((Content) null).when(light0).getPlanIcon();
      doReturn((BigDecimal) null).when(light0).getPrice();
      doReturn((String) null).when(light0).getStaircaseCutOutShape();
      doReturn((BigDecimal) null).when(light0).getValueAddedTaxPercentage();
      doReturn(0.0F).when(light0).getWidth();
      doReturn(false).when(light0).isBackFaceShown();
      doReturn(false).when(light0).isDeformable();
      doReturn(false).when(light0).isDoorOrWindow();
      doReturn(false).when(light0).isMovable();
      doReturn(false).when(light0).isResizable();
      doReturn(false).when(light0).isTexturable();
      HomeLight homeLight0 = new HomeLight(light0);
      boolean boolean0 = homeLight0.isTopRightPointAt((-1469), (-1469), (-1469));
      homeLight0.getDescription();
      boolean boolean1 = homeLight0.isNameCenterPointAt(0.0F, 3205.479F, (-1469));
      assertFalse(boolean1);
      
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      homeLight0.setNameXOffset(0.0F);
      Level level0 = new Level("@bzc!P-", 0.0F, (-1.0F), (-1265.729F));
      boolean boolean2 = homeLight0.isAtLevel(level0);
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertTrue(boolean2 == boolean0);
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertFalse(boolean2);
  }

  @Test(timeout = 4000)
  public void test222()  throws Throwable  {
      LightSource[] lightSourceArray0 = new LightSource[0];
      byte[] byteArray0 = new byte[0];
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      Integer integer0 = new Integer((-1469));
      FileSystemHandling.shouldAllThrowIOExceptions();
      Light light0 = mock(Light.class, new ViolatedAssumptionAnswer());
      doReturn((LightSource[]) null).when(light0).getLightSources();
      doReturn((Integer) null).when(light0).getColor();
      doReturn((String) null).when(light0).getCurrency();
      doReturn(0.0F).when(light0).getDepth();
      doReturn((String) null).when(light0).getDescription();
      doReturn(0.0F).when(light0).getElevation();
      doReturn(0.0F).when(light0).getHeight();
      doReturn((Content) null).when(light0).getIcon();
      doReturn((Content) null).when(light0).getModel();
      doReturn((float[][]) null).when(light0).getModelRotation();
      doReturn((String) null).when(light0).getName();
      doReturn((Content) null).when(light0).getPlanIcon();
      doReturn((BigDecimal) null).when(light0).getPrice();
      doReturn((String) null).when(light0).getStaircaseCutOutShape();
      doReturn((BigDecimal) null).when(light0).getValueAddedTaxPercentage();
      doReturn(0.0F).when(light0).getWidth();
      doReturn(false).when(light0).isBackFaceShown();
      doReturn(false).when(light0).isDeformable();
      doReturn(false).when(light0).isDoorOrWindow();
      doReturn(false).when(light0).isMovable();
      doReturn(false).when(light0).isResizable();
      doReturn(false).when(light0).isTexturable();
      HomeLight homeLight0 = new HomeLight(light0);
      homeLight0.setElevation((-1.0F));
      homeLight0.setY((-1.0F));
      homeLight0.getValueAddedTax();
      homeLight0.setVisible(false);
      homeLight0.getCurrency();
      float float0 = 0.0F;
      // Undeclared exception!
      try { 
        homeLight0.setHeight(0.0F);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Piece isn't resizable
         //
         verifyException("com.eteks.sweethome3d.model.HomePieceOfFurniture", e);
      }
  }
}
