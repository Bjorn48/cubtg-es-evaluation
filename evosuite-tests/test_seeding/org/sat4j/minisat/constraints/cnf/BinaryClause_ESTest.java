/*
 * This file was automatically generated by EvoSuite
 * Sun Feb 17 08:07:55 GMT 2019
 */

package org.sat4j.minisat.constraints.cnf;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.NoSuchElementException;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;
import org.sat4j.core.ReadOnlyVec;
import org.sat4j.core.Vec;
import org.sat4j.core.VecInt;
import org.sat4j.minisat.constraints.MixedDataStructureDanielHT;
import org.sat4j.minisat.constraints.cnf.LearntBinaryClause;
import org.sat4j.minisat.constraints.cnf.Lits;
import org.sat4j.minisat.constraints.cnf.OriginalBinaryClause;
import org.sat4j.minisat.constraints.cnf.UnitClause;
import org.sat4j.minisat.core.ILits;
import org.sat4j.specs.Constr;
import org.sat4j.specs.IVec;
import org.sat4j.specs.IVecInt;
import org.sat4j.specs.MandatoryLiteralListener;
import org.sat4j.specs.Propagatable;
import org.sat4j.specs.UnitPropagationListener;
import org.sat4j.specs.VarMapper;
import org.sat4j.tools.DotSearchTracing;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class BinaryClause_ESTest extends BinaryClause_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      int[] intArray0 = new int[5];
      VecInt vecInt0 = new VecInt(intArray0);
      vecInt0.sortUnique();
      vecInt0.shrink((-1));
      OriginalBinaryClause originalBinaryClause0 = new OriginalBinaryClause(vecInt0, (ILits) null);
      int int0 = originalBinaryClause0.getAssertionLevel(vecInt0, (-1));
      assertEquals(1, int0);
      assertEquals(0.0, originalBinaryClause0.getActivity(), 0.01);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      int[] intArray0 = new int[5];
      VecInt vecInt0 = new VecInt(intArray0);
      vecInt0.sortUnique();
      vecInt0.unsafePush(1);
      Lits lits0 = new Lits();
      LearntBinaryClause learntBinaryClause0 = new LearntBinaryClause(vecInt0, lits0);
      boolean boolean0 = learntBinaryClause0.isSatisfied();
      assertEquals(0.0, learntBinaryClause0.getActivity(), 0.01);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      int[] intArray0 = new int[5];
      VecInt vecInt0 = new VecInt(intArray0);
      vecInt0.sortUnique();
      vecInt0.shrink((-1));
      ILits iLits0 = mock(ILits.class, new ViolatedAssumptionAnswer());
      doReturn(true, false).when(iLits0).isFalsified(anyInt());
      LearntBinaryClause learntBinaryClause0 = new LearntBinaryClause(vecInt0, iLits0);
      VecInt vecInt1 = new VecInt(intArray0);
      learntBinaryClause0.calcReasonOnTheFly((-1), vecInt0, vecInt1);
      assertEquals(2, vecInt0.size());
      assertEquals(6, vecInt1.size());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      int[] intArray0 = new int[3];
      VecInt vecInt0 = new VecInt(intArray0);
      vecInt0.sortUnique();
      vecInt0.shrink((-1));
      ILits iLits0 = mock(ILits.class, new ViolatedAssumptionAnswer());
      LearntBinaryClause learntBinaryClause0 = new LearntBinaryClause(vecInt0, iLits0);
      learntBinaryClause0.head = (-2);
      learntBinaryClause0.register();
      assertEquals(0.0, learntBinaryClause0.getActivity(), 0.01);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      int[] intArray0 = new int[5];
      VecInt vecInt0 = new VecInt(intArray0);
      vecInt0.sortUnique();
      vecInt0.unsafePush(1);
      LearntBinaryClause learntBinaryClause0 = new LearntBinaryClause(vecInt0, (ILits) null);
      LearntBinaryClause learntBinaryClause1 = new LearntBinaryClause(vecInt0, (ILits) null);
      boolean boolean0 = learntBinaryClause1.equals(learntBinaryClause0);
      assertEquals(0.0, learntBinaryClause1.getActivity(), 0.01);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      int[] intArray0 = new int[5];
      VecInt vecInt0 = new VecInt(intArray0);
      vecInt0.sortUnique();
      vecInt0.shrink((-1));
      UnitPropagationListener unitPropagationListener0 = mock(UnitPropagationListener.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(unitPropagationListener0).enqueue(anyInt() , any(org.sat4j.specs.Constr.class));
      ILits iLits0 = mock(ILits.class, new ViolatedAssumptionAnswer());
      doReturn(true).when(iLits0).isFalsified(anyInt());
      LearntBinaryClause learntBinaryClause0 = new LearntBinaryClause(vecInt0, iLits0);
      learntBinaryClause0.tail = (-2055);
      // Undeclared exception!
      try { 
        learntBinaryClause0.assertConstraintIfNeeded(unitPropagationListener0);
        fail("Expecting exception: AssertionError");
      
      } catch(AssertionError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      int[] intArray0 = new int[5];
      VecInt vecInt0 = new VecInt(intArray0);
      vecInt0.sortUnique();
      vecInt0.shrink((-1));
      OriginalBinaryClause originalBinaryClause0 = new OriginalBinaryClause(vecInt0, (ILits) null);
      originalBinaryClause0.rescaleBy(0.0);
      assertEquals(0.0, originalBinaryClause0.getActivity(), 0.01);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      int[] intArray0 = new int[5];
      VecInt vecInt0 = new VecInt(intArray0);
      vecInt0.sortUnique();
      vecInt0.shrink((-1));
      ILits iLits0 = mock(ILits.class, new ViolatedAssumptionAnswer());
      doReturn("R)}Ua~JCt]q}9", "R)}Ua~JCt]q}9").when(iLits0).valueToString(anyInt());
      LearntBinaryClause learntBinaryClause0 = new LearntBinaryClause(vecInt0, iLits0);
      learntBinaryClause0.tail = (-2055);
      String string0 = learntBinaryClause0.toString();
      assertEquals(0.0, learntBinaryClause0.getActivity(), 0.01);
      assertEquals("0[R)}Ua~JCt]q}9] --1028[R)}Ua~JCt]q}9]", string0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      int[] intArray0 = new int[3];
      VecInt vecInt0 = new VecInt(intArray0);
      vecInt0.sortUnique();
      vecInt0.shrink((-1));
      ILits iLits0 = mock(ILits.class, new ViolatedAssumptionAnswer());
      LearntBinaryClause learntBinaryClause0 = new LearntBinaryClause(vecInt0, iLits0);
      // Undeclared exception!
      try { 
        learntBinaryClause0.propagatePI((MandatoryLiteralListener) null, (-1));
        fail("Expecting exception: AssertionError");
      
      } catch(AssertionError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      int[] intArray0 = new int[5];
      VecInt vecInt0 = new VecInt(intArray0);
      vecInt0.sortUnique();
      vecInt0.shrink((-1));
      UnitPropagationListener unitPropagationListener0 = mock(UnitPropagationListener.class, new ViolatedAssumptionAnswer());
      ILits iLits0 = mock(ILits.class, new ViolatedAssumptionAnswer());
      LearntBinaryClause learntBinaryClause0 = new LearntBinaryClause(vecInt0, iLits0);
      // Undeclared exception!
      try { 
        learntBinaryClause0.propagate(unitPropagationListener0, 3105);
        fail("Expecting exception: AssertionError");
      
      } catch(AssertionError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      int[] intArray0 = new int[2];
      VecInt vecInt0 = new VecInt(intArray0);
      vecInt0.sortUnique();
      vecInt0.unsafePush(2);
      Lits lits0 = new Lits();
      LearntBinaryClause learntBinaryClause0 = new LearntBinaryClause(vecInt0, lits0);
      boolean boolean0 = learntBinaryClause0.simplify();
      assertFalse(boolean0);
      assertEquals(0.0, learntBinaryClause0.getActivity(), 0.01);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      int[] intArray0 = new int[5];
      VecInt vecInt0 = new VecInt(intArray0);
      vecInt0.sortUnique();
      vecInt0.shrink((-1));
      UnitPropagationListener unitPropagationListener0 = mock(UnitPropagationListener.class, new ViolatedAssumptionAnswer());
      Vec<Propagatable> vec0 = new Vec<Propagatable>();
      ILits iLits0 = mock(ILits.class, new ViolatedAssumptionAnswer());
      doReturn(vec0, vec0).when(iLits0).watches(anyInt());
      LearntBinaryClause learntBinaryClause0 = new LearntBinaryClause(vecInt0, iLits0);
      learntBinaryClause0.tail = (-1);
      vec0.insertFirst(learntBinaryClause0);
      // Undeclared exception!
      try { 
        learntBinaryClause0.remove(unitPropagationListener0);
        fail("Expecting exception: NoSuchElementException");
      
      } catch(NoSuchElementException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.core.Vec", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      int[] intArray0 = new int[5];
      VecInt vecInt0 = new VecInt(intArray0);
      vecInt0.sortUnique();
      vecInt0.shrink((-1));
      UnitPropagationListener unitPropagationListener0 = mock(UnitPropagationListener.class, new ViolatedAssumptionAnswer());
      Vec<Propagatable> vec0 = new Vec<Propagatable>();
      ILits iLits0 = mock(ILits.class, new ViolatedAssumptionAnswer());
      doReturn(vec0, (IVec) null).when(iLits0).watches(anyInt());
      LearntBinaryClause learntBinaryClause0 = new LearntBinaryClause(vecInt0, iLits0);
      vec0.insertFirst(learntBinaryClause0);
      // Undeclared exception!
      try { 
        learntBinaryClause0.remove(unitPropagationListener0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.minisat.constraints.cnf.BinaryClause", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      int[] intArray0 = new int[5];
      VecInt vecInt0 = new VecInt(intArray0);
      vecInt0.sortUnique();
      vecInt0.shrink((-1));
      MixedDataStructureDanielHT mixedDataStructureDanielHT0 = new MixedDataStructureDanielHT();
      VecInt vecInt1 = new VecInt(2);
      mixedDataStructureDanielHT0.createUnregisteredCardinalityConstraint(vecInt1, (-1757));
      ILits iLits0 = mock(ILits.class, new ViolatedAssumptionAnswer());
      doReturn(false, false).when(iLits0).isSatisfied(anyInt());
      doReturn("", "").when(iLits0).valueToString(anyInt());
      LearntBinaryClause learntBinaryClause0 = new LearntBinaryClause(vecInt0, iLits0);
      //  // Unstable assertion: assertFalse(learntBinaryClause0.simplify());
      
      learntBinaryClause0.simplify();
      learntBinaryClause0.toConstraint();
      //  // Unstable assertion: assertTrue(learntBinaryClause0.simplify());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      int[] intArray0 = new int[5];
      VecInt vecInt0 = new VecInt(intArray0);
      vecInt0.sortUnique();
      vecInt0.shrink((-1));
      OriginalBinaryClause originalBinaryClause0 = new OriginalBinaryClause(vecInt0, (ILits) null);
      Constr constr0 = originalBinaryClause0.toConstraint();
      assertEquals(0.0, constr0.getActivity(), 0.01);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      int[] intArray0 = new int[5];
      intArray0[0] = (-4);
      intArray0[1] = (-2208);
      intArray0[2] = (-4110);
      VecInt vecInt0 = new VecInt(intArray0);
      vecInt0.sortUnique();
      vecInt0.shrink(2);
      LearntBinaryClause learntBinaryClause0 = new LearntBinaryClause(vecInt0, (ILits) null);
      learntBinaryClause0.getVocabulary();
      assertEquals(0.0, learntBinaryClause0.getActivity(), 0.01);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      int[] intArray0 = new int[3];
      VecInt vecInt0 = new VecInt(intArray0);
      vecInt0.sortUnique();
      vecInt0.insertFirst(22);
      ILits iLits0 = mock(ILits.class, new ViolatedAssumptionAnswer());
      LearntBinaryClause learntBinaryClause0 = new LearntBinaryClause(vecInt0, iLits0);
      int int0 = learntBinaryClause0.getAssertionLevel(vecInt0, 22);
      assertEquals(0, int0);
      assertEquals(0.0, learntBinaryClause0.getActivity(), 0.01);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      int[] intArray0 = new int[10];
      VecInt vecInt0 = new VecInt(intArray0);
      vecInt0.sortUnique();
      vecInt0.unsafePush(1);
      LearntBinaryClause learntBinaryClause0 = new LearntBinaryClause(vecInt0, (ILits) null);
      assertEquals(0.0, learntBinaryClause0.getActivity(), 0.01);
      
      learntBinaryClause0.setActivity(1);
      double double0 = learntBinaryClause0.getActivity();
      assertEquals(1.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      int[] intArray0 = new int[10];
      VecInt vecInt0 = new VecInt(intArray0);
      vecInt0.sortUnique();
      vecInt0.unsafePush(1);
      LearntBinaryClause learntBinaryClause0 = new LearntBinaryClause(vecInt0, (ILits) null);
      learntBinaryClause0.setActivity((-4620.5578992856));
      double double0 = learntBinaryClause0.getActivity();
      assertEquals((-4620.5578992856), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      int[] intArray0 = new int[5];
      VecInt vecInt0 = new VecInt(intArray0);
      vecInt0.sortUnique();
      vecInt0.shrink((-1));
      LearntBinaryClause learntBinaryClause0 = new LearntBinaryClause(vecInt0, (ILits) null);
      learntBinaryClause0.head = 4664;
      int int0 = learntBinaryClause0.get(0);
      assertEquals(4664, int0);
      assertEquals(0.0, learntBinaryClause0.getActivity(), 0.01);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      int[] intArray0 = new int[5];
      VecInt vecInt0 = new VecInt(intArray0);
      vecInt0.sortUnique();
      vecInt0.unsafePush(1);
      LearntBinaryClause learntBinaryClause0 = new LearntBinaryClause(vecInt0, (ILits) null);
      // Undeclared exception!
      try { 
        learntBinaryClause0.toString((VarMapper) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.minisat.constraints.cnf.BinaryClause", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      int[] intArray0 = new int[5];
      VecInt vecInt0 = new VecInt(intArray0);
      vecInt0.sortUnique();
      vecInt0.unsafePush(1);
      Lits lits0 = new Lits();
      LearntBinaryClause learntBinaryClause0 = new LearntBinaryClause(vecInt0, lits0);
      learntBinaryClause0.tail = (-536);
      DotSearchTracing<OriginalBinaryClause> dotSearchTracing0 = new DotSearchTracing<OriginalBinaryClause>("1241");
      // Undeclared exception!
      try { 
        learntBinaryClause0.toString((VarMapper) dotSearchTracing0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -536
         //
         verifyException("org.sat4j.minisat.constraints.cnf.Lits", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      int[] intArray0 = new int[5];
      VecInt vecInt0 = new VecInt(intArray0);
      vecInt0.sortUnique();
      vecInt0.unsafePush(1);
      LearntBinaryClause learntBinaryClause0 = new LearntBinaryClause(vecInt0, (ILits) null);
      // Undeclared exception!
      try { 
        learntBinaryClause0.simplify();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.minisat.constraints.cnf.BinaryClause", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      int[] intArray0 = new int[3];
      VecInt vecInt0 = new VecInt(intArray0);
      vecInt0.sortUnique();
      vecInt0.shrink((-1));
      UnitPropagationListener unitPropagationListener0 = mock(UnitPropagationListener.class, new ViolatedAssumptionAnswer());
      ReadOnlyVec<Propagatable> readOnlyVec0 = new ReadOnlyVec<Propagatable>((IVec<Propagatable>) null);
      ILits iLits0 = mock(ILits.class, new ViolatedAssumptionAnswer());
      doReturn(readOnlyVec0).when(iLits0).watches(anyInt());
      LearntBinaryClause learntBinaryClause0 = new LearntBinaryClause(vecInt0, iLits0);
      // Undeclared exception!
      try { 
        learntBinaryClause0.remove(unitPropagationListener0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.core.ReadOnlyVec", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      int[] intArray0 = new int[6];
      VecInt vecInt0 = new VecInt(intArray0);
      vecInt0.sortUnique();
      vecInt0.shrink((-1));
      UnitPropagationListener unitPropagationListener0 = mock(UnitPropagationListener.class, new ViolatedAssumptionAnswer());
      Propagatable[] propagatableArray0 = new Propagatable[0];
      Vec<Propagatable> vec0 = new Vec<Propagatable>(propagatableArray0);
      ILits iLits0 = mock(ILits.class, new ViolatedAssumptionAnswer());
      doReturn(vec0).when(iLits0).watches(anyInt());
      LearntBinaryClause learntBinaryClause0 = new LearntBinaryClause(vecInt0, iLits0);
      // Undeclared exception!
      try { 
        learntBinaryClause0.remove(unitPropagationListener0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.sat4j.core.Vec", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      int[] intArray0 = new int[3];
      VecInt vecInt0 = new VecInt(intArray0);
      vecInt0.sortUnique();
      vecInt0.shrink((-1));
      Lits lits0 = new Lits();
      LearntBinaryClause learntBinaryClause0 = new LearntBinaryClause(vecInt0, lits0);
      // Undeclared exception!
      try { 
        learntBinaryClause0.register();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.minisat.constraints.cnf.Lits", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      int[] intArray0 = new int[3];
      VecInt vecInt0 = new VecInt(intArray0);
      vecInt0.sortUnique();
      vecInt0.shrink((-1));
      Lits lits0 = new Lits();
      LearntBinaryClause learntBinaryClause0 = new LearntBinaryClause(vecInt0, lits0);
      // Undeclared exception!
      try { 
        learntBinaryClause0.propagatePI((MandatoryLiteralListener) null, (-1));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("org.sat4j.minisat.constraints.cnf.Lits", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      int[] intArray0 = new int[1];
      VecInt vecInt0 = new VecInt(intArray0);
      vecInt0.insertFirst(1);
      Lits lits0 = new Lits();
      LearntBinaryClause learntBinaryClause0 = new LearntBinaryClause(vecInt0, lits0);
      // Undeclared exception!
      try { 
        learntBinaryClause0.propagate((UnitPropagationListener) null, (-270));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -270
         //
         verifyException("org.sat4j.minisat.constraints.cnf.Lits", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      int[] intArray0 = new int[3];
      VecInt vecInt0 = new VecInt(intArray0);
      vecInt0.sortUnique();
      vecInt0.unsafePush(1);
      LearntBinaryClause learntBinaryClause0 = new LearntBinaryClause(vecInt0, (ILits) null);
      // Undeclared exception!
      try { 
        learntBinaryClause0.locked();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.minisat.constraints.cnf.BinaryClause", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      int[] intArray0 = new int[3];
      VecInt vecInt0 = new VecInt(intArray0);
      vecInt0.sortUnique();
      Lits lits0 = new Lits();
      vecInt0.unsafePush((-20));
      LearntBinaryClause learntBinaryClause0 = new LearntBinaryClause(vecInt0, lits0);
      // Undeclared exception!
      try { 
        learntBinaryClause0.locked();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -10
         //
         verifyException("org.sat4j.minisat.constraints.cnf.Lits", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      int[] intArray0 = new int[5];
      VecInt vecInt0 = new VecInt(intArray0);
      vecInt0.sortUnique();
      vecInt0.shrink((-1));
      OriginalBinaryClause originalBinaryClause0 = new OriginalBinaryClause(vecInt0, (ILits) null);
      // Undeclared exception!
      try { 
        originalBinaryClause0.isSatisfied();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.minisat.constraints.cnf.BinaryClause", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      int[] intArray0 = new int[5];
      VecInt vecInt0 = new VecInt(intArray0);
      vecInt0.sortUnique();
      vecInt0.shrink((-1));
      Lits lits0 = new Lits();
      LearntBinaryClause learntBinaryClause0 = new LearntBinaryClause(vecInt0, lits0);
      learntBinaryClause0.head = (-1);
      // Undeclared exception!
      try { 
        learntBinaryClause0.isSatisfied();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -2
         //
         verifyException("org.sat4j.minisat.constraints.cnf.Lits", e);
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      int[] intArray0 = new int[5];
      intArray0[0] = (-4);
      intArray0[1] = (-2208);
      intArray0[2] = (-4110);
      VecInt vecInt0 = new VecInt(intArray0);
      vecInt0.sortUnique();
      vecInt0.shrink(2);
      LearntBinaryClause learntBinaryClause0 = new LearntBinaryClause(vecInt0, (ILits) null);
      // Undeclared exception!
      try { 
        learntBinaryClause0.getAssertionLevel((IVecInt) null, 195);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.minisat.constraints.cnf.BinaryClause", e);
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      int[] intArray0 = new int[2];
      VecInt vecInt0 = new VecInt(intArray0);
      vecInt0.sortUnique();
      vecInt0.unsafePush(1);
      LearntBinaryClause learntBinaryClause0 = new LearntBinaryClause(vecInt0, (ILits) null);
      // Undeclared exception!
      try { 
        learntBinaryClause0.calcReasonOnTheFly(1, vecInt0, vecInt0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.minisat.constraints.cnf.BinaryClause", e);
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      int[] intArray0 = new int[5];
      VecInt vecInt0 = new VecInt(intArray0);
      vecInt0.sortUnique();
      vecInt0.shrink((-1));
      ILits iLits0 = mock(ILits.class, new ViolatedAssumptionAnswer());
      doReturn(true).when(iLits0).isFalsified(anyInt());
      LearntBinaryClause learntBinaryClause0 = new LearntBinaryClause(vecInt0, iLits0);
      vecInt0.shrink((-2059));
      // Undeclared exception!
      try { 
        learntBinaryClause0.calcReasonOnTheFly((-1), vecInt0, vecInt0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      int[] intArray0 = new int[4];
      VecInt vecInt0 = new VecInt(intArray0);
      vecInt0.sortUnique();
      vecInt0.unsafePush(1);
      LearntBinaryClause learntBinaryClause0 = new LearntBinaryClause(vecInt0, (ILits) null);
      // Undeclared exception!
      try { 
        learntBinaryClause0.calcReason(1, vecInt0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.minisat.constraints.cnf.BinaryClause", e);
      }
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      int[] intArray0 = new int[4];
      VecInt vecInt0 = new VecInt(intArray0);
      vecInt0.sortUnique();
      vecInt0.shrink((-1));
      LearntBinaryClause learntBinaryClause0 = new LearntBinaryClause(vecInt0, (ILits) null);
      // Undeclared exception!
      try { 
        learntBinaryClause0.assertConstraintIfNeeded((UnitPropagationListener) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.minisat.constraints.cnf.BinaryClause", e);
      }
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      int[] intArray0 = new int[4];
      VecInt vecInt0 = new VecInt(intArray0);
      vecInt0.sortUnique();
      vecInt0.unsafePush(1);
      LearntBinaryClause learntBinaryClause0 = new LearntBinaryClause(vecInt0, (ILits) null);
      // Undeclared exception!
      try { 
        learntBinaryClause0.assertConstraint((UnitPropagationListener) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.minisat.constraints.cnf.BinaryClause", e);
      }
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      int[] intArray0 = new int[5];
      VecInt vecInt0 = new VecInt(intArray0);
      vecInt0.sortUnique();
      vecInt0.shrink((-1));
      ILits iLits0 = mock(ILits.class, new ViolatedAssumptionAnswer());
      doReturn(true, true).when(iLits0).isFalsified(anyInt());
      OriginalBinaryClause originalBinaryClause0 = new OriginalBinaryClause(vecInt0, iLits0);
      originalBinaryClause0.calcReason(1485, vecInt0);
      assertEquals(1, vecInt0.last());
      assertEquals(4, vecInt0.size());
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      int[] intArray0 = new int[5];
      VecInt vecInt0 = new VecInt(intArray0);
      vecInt0.sortUnique();
      vecInt0.shrink((-1));
      UnitPropagationListener unitPropagationListener0 = mock(UnitPropagationListener.class, new ViolatedAssumptionAnswer());
      ILits iLits0 = mock(ILits.class, new ViolatedAssumptionAnswer());
      doReturn(false, false).when(iLits0).isFalsified(anyInt());
      OriginalBinaryClause originalBinaryClause0 = OriginalBinaryClause.brandNewClause(unitPropagationListener0, iLits0, vecInt0);
      originalBinaryClause0.calcReason(5, vecInt0);
      assertEquals(2, vecInt0.size());
      assertEquals(0.0, originalBinaryClause0.getActivity(), 0.01);
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      int[] intArray0 = new int[6];
      VecInt vecInt0 = new VecInt(intArray0);
      vecInt0.sortUnique();
      vecInt0.shrink((-1));
      Lits lits0 = new Lits();
      LearntBinaryClause learntBinaryClause0 = new LearntBinaryClause(vecInt0, lits0);
      String string0 = learntBinaryClause0.toString((VarMapper) null);
      assertEquals("0[?] 0[?]", string0);
      assertEquals(0.0, learntBinaryClause0.getActivity(), 0.01);
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      int[] intArray0 = new int[5];
      VecInt vecInt0 = new VecInt(intArray0);
      vecInt0.sortUnique();
      vecInt0.shrink((-1));
      ILits iLits0 = mock(ILits.class, new ViolatedAssumptionAnswer());
      doReturn("a7y.I,LA?$v/n9", "a7y.I,LA?$v/n9").when(iLits0).valueToString(anyInt());
      LearntBinaryClause learntBinaryClause0 = new LearntBinaryClause(vecInt0, iLits0);
      DotSearchTracing<OriginalBinaryClause> dotSearchTracing0 = new DotSearchTracing<OriginalBinaryClause>("/");
      String string0 = learntBinaryClause0.toString((VarMapper) dotSearchTracing0);
      assertEquals(0.0, learntBinaryClause0.getActivity(), 0.01);
      assertEquals("0[a7y.I,LA?$v/n9] 0[a7y.I,LA?$v/n9]", string0);
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      int[] intArray0 = new int[3];
      VecInt vecInt0 = new VecInt(intArray0);
      vecInt0.sortUnique();
      vecInt0.shrink((-1));
      ILits iLits0 = mock(ILits.class, new ViolatedAssumptionAnswer());
      LearntBinaryClause learntBinaryClause0 = new LearntBinaryClause(vecInt0, iLits0);
      learntBinaryClause0.head = (-2);
      int int0 = learntBinaryClause0.getAssertionLevel(vecInt0, (-1));
      assertEquals(0.0, learntBinaryClause0.getActivity(), 0.01);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      int[] intArray0 = new int[5];
      VecInt vecInt0 = new VecInt(intArray0);
      vecInt0.sortUnique();
      vecInt0.shrink((-1));
      ILits iLits0 = mock(ILits.class, new ViolatedAssumptionAnswer());
      doReturn(false, true).when(iLits0).isSatisfied(anyInt());
      LearntBinaryClause learntBinaryClause0 = new LearntBinaryClause(vecInt0, iLits0);
      boolean boolean0 = learntBinaryClause0.isSatisfied();
      assertEquals(0.0, learntBinaryClause0.getActivity(), 0.01);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      int[] intArray0 = new int[5];
      VecInt vecInt0 = new VecInt(intArray0);
      vecInt0.sortUnique();
      vecInt0.shrink((-1));
      UnitPropagationListener unitPropagationListener0 = mock(UnitPropagationListener.class, new ViolatedAssumptionAnswer());
      ILits iLits0 = mock(ILits.class, new ViolatedAssumptionAnswer());
      doReturn(true).when(iLits0).isSatisfied(anyInt());
      OriginalBinaryClause originalBinaryClause0 = OriginalBinaryClause.brandNewClause(unitPropagationListener0, iLits0, vecInt0);
      boolean boolean0 = originalBinaryClause0.isSatisfied();
      assertEquals(0.0, originalBinaryClause0.getActivity(), 0.01);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      int[] intArray0 = new int[2];
      VecInt vecInt0 = new VecInt(intArray0);
      vecInt0.sortUnique();
      vecInt0.shrink((-1));
      LearntBinaryClause learntBinaryClause0 = new LearntBinaryClause(vecInt0, (ILits) null);
      learntBinaryClause0.head = (-2504);
      LearntBinaryClause learntBinaryClause1 = new LearntBinaryClause(vecInt0, (ILits) null);
      boolean boolean0 = learntBinaryClause0.equals(learntBinaryClause1);
      assertFalse(learntBinaryClause1.equals((Object)learntBinaryClause0));
      assertFalse(boolean0);
      assertEquals(0.0, learntBinaryClause1.getActivity(), 0.01);
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      int[] intArray0 = new int[5];
      VecInt vecInt0 = new VecInt(intArray0);
      vecInt0.sortUnique();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      vecInt0.unsafePush((-1155));
      LearntBinaryClause learntBinaryClause0 = new LearntBinaryClause(vecInt0, (ILits) null);
      boolean boolean0 = learntBinaryClause0.equals(fileSystemHandling0);
      assertEquals(0.0, learntBinaryClause0.getActivity(), 0.01);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      int[] intArray0 = new int[5];
      VecInt vecInt0 = new VecInt(intArray0);
      vecInt0.sortUnique();
      vecInt0.unsafePush(1);
      LearntBinaryClause learntBinaryClause0 = new LearntBinaryClause(vecInt0, (ILits) null);
      boolean boolean0 = learntBinaryClause0.equals((Object) null);
      assertEquals(0.0, learntBinaryClause0.getActivity(), 0.01);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      int[] intArray0 = new int[5];
      VecInt vecInt0 = new VecInt(intArray0);
      vecInt0.sortUnique();
      vecInt0.shrink((-1));
      UnitPropagationListener unitPropagationListener0 = mock(UnitPropagationListener.class, new ViolatedAssumptionAnswer());
      doReturn(true).when(unitPropagationListener0).enqueue(anyInt() , any(org.sat4j.specs.Constr.class));
      ILits iLits0 = mock(ILits.class, new ViolatedAssumptionAnswer());
      doReturn(true).when(iLits0).isFalsified(anyInt());
      LearntBinaryClause learntBinaryClause0 = new LearntBinaryClause(vecInt0, iLits0);
      learntBinaryClause0.assertConstraintIfNeeded(unitPropagationListener0);
      assertEquals(0.0, learntBinaryClause0.getActivity(), 0.01);
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      int[] intArray0 = new int[5];
      VecInt vecInt0 = new VecInt(intArray0);
      vecInt0.sortUnique();
      vecInt0.shrink((-1));
      UnitPropagationListener unitPropagationListener0 = mock(UnitPropagationListener.class, new ViolatedAssumptionAnswer());
      Lits lits0 = new Lits();
      LearntBinaryClause learntBinaryClause0 = new LearntBinaryClause(vecInt0, lits0);
      learntBinaryClause0.assertConstraintIfNeeded(unitPropagationListener0);
      assertEquals(0.0, learntBinaryClause0.getActivity(), 0.01);
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      int[] intArray0 = new int[5];
      VecInt vecInt0 = new VecInt(intArray0);
      vecInt0.sortUnique();
      vecInt0.shrink((-1));
      UnitPropagationListener unitPropagationListener0 = mock(UnitPropagationListener.class, new ViolatedAssumptionAnswer());
      doReturn(true).when(unitPropagationListener0).enqueue(anyInt() , any(org.sat4j.specs.Constr.class));
      Lits lits0 = new Lits();
      LearntBinaryClause learntBinaryClause0 = new LearntBinaryClause(vecInt0, lits0);
      learntBinaryClause0.assertConstraint(unitPropagationListener0);
      assertEquals(0.0, learntBinaryClause0.getActivity(), 0.01);
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      int[] intArray0 = new int[5];
      VecInt vecInt0 = new VecInt(intArray0);
      vecInt0.sortUnique();
      vecInt0.shrink((-1));
      UnitPropagationListener unitPropagationListener0 = mock(UnitPropagationListener.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(unitPropagationListener0).enqueue(anyInt() , any(org.sat4j.specs.Constr.class));
      Lits lits0 = new Lits();
      LearntBinaryClause learntBinaryClause0 = new LearntBinaryClause(vecInt0, lits0);
      // Undeclared exception!
      try { 
        learntBinaryClause0.assertConstraint(unitPropagationListener0);
        fail("Expecting exception: AssertionError");
      
      } catch(AssertionError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      int[] intArray0 = new int[3];
      VecInt vecInt0 = new VecInt(intArray0);
      vecInt0.sortUnique();
      vecInt0.shrink((-1));
      ILits iLits0 = mock(ILits.class, new ViolatedAssumptionAnswer());
      LearntBinaryClause learntBinaryClause0 = new LearntBinaryClause(vecInt0, iLits0);
      // Undeclared exception!
      try { 
        learntBinaryClause0.get((-1));
        fail("Expecting exception: AssertionError");
      
      } catch(AssertionError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      int[] intArray0 = new int[3];
      VecInt vecInt0 = new VecInt(intArray0);
      vecInt0.sortUnique();
      vecInt0.shrink((-1));
      ILits iLits0 = mock(ILits.class, new ViolatedAssumptionAnswer());
      LearntBinaryClause learntBinaryClause0 = new LearntBinaryClause(vecInt0, iLits0);
      int int0 = learntBinaryClause0.get(0);
      assertEquals(0, int0);
      assertEquals(0.0, learntBinaryClause0.getActivity(), 0.01);
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      int[] intArray0 = new int[5];
      VecInt vecInt0 = new VecInt(intArray0);
      vecInt0.sortUnique();
      vecInt0.unsafePush((-1155));
      LearntBinaryClause learntBinaryClause0 = new LearntBinaryClause(vecInt0, (ILits) null);
      int int0 = learntBinaryClause0.get(1);
      assertEquals((-1155), int0);
      assertEquals(0.0, learntBinaryClause0.getActivity(), 0.01);
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      int[] intArray0 = new int[3];
      VecInt vecInt0 = new VecInt(intArray0);
      vecInt0.sortUnique();
      vecInt0.shrink((-1));
      UnitClause unitClause0 = new UnitClause(43);
      ILits iLits0 = mock(ILits.class, new ViolatedAssumptionAnswer());
      doReturn(unitClause0, unitClause0).when(iLits0).getReason(anyInt());
      LearntBinaryClause learntBinaryClause0 = new LearntBinaryClause(vecInt0, iLits0);
      boolean boolean0 = learntBinaryClause0.locked();
      assertFalse(boolean0);
      assertEquals(0.0, learntBinaryClause0.getActivity(), 0.01);
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      int[] intArray0 = new int[3];
      VecInt vecInt0 = new VecInt(intArray0);
      vecInt0.sortUnique();
      vecInt0.insertFirst(1);
      ILits iLits0 = mock(ILits.class, new ViolatedAssumptionAnswer());
      LearntBinaryClause learntBinaryClause0 = new LearntBinaryClause(vecInt0, iLits0);
      // Undeclared exception!
      try { 
        learntBinaryClause0.propagatePI((MandatoryLiteralListener) null, 1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.minisat.constraints.cnf.BinaryClause", e);
      }
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      int[] intArray0 = new int[3];
      VecInt vecInt0 = new VecInt(intArray0);
      vecInt0.sortUnique();
      vecInt0.shrink((-1));
      ILits iLits0 = mock(ILits.class, new ViolatedAssumptionAnswer());
      LearntBinaryClause learntBinaryClause0 = new LearntBinaryClause(vecInt0, iLits0);
      learntBinaryClause0.head = (-2);
      // Undeclared exception!
      try { 
        learntBinaryClause0.propagatePI((MandatoryLiteralListener) null, (-1));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.minisat.constraints.cnf.BinaryClause", e);
      }
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      int[] intArray0 = new int[3];
      VecInt vecInt0 = new VecInt(intArray0);
      vecInt0.sortUnique();
      vecInt0.insertFirst(22);
      ILits iLits0 = mock(ILits.class, new ViolatedAssumptionAnswer());
      LearntBinaryClause learntBinaryClause0 = new LearntBinaryClause(vecInt0, iLits0);
      // Undeclared exception!
      try { 
        learntBinaryClause0.propagatePI((MandatoryLiteralListener) null, 22);
        fail("Expecting exception: AssertionError");
      
      } catch(AssertionError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      int[] intArray0 = new int[6];
      VecInt vecInt0 = new VecInt(intArray0);
      vecInt0.sortUnique();
      vecInt0.shrink((-1));
      UnitPropagationListener unitPropagationListener0 = mock(UnitPropagationListener.class, new ViolatedAssumptionAnswer());
      ILits iLits0 = mock(ILits.class, new ViolatedAssumptionAnswer());
      LearntBinaryClause learntBinaryClause0 = new LearntBinaryClause(vecInt0, iLits0);
      // Undeclared exception!
      try { 
        learntBinaryClause0.propagate(unitPropagationListener0, (-1));
        fail("Expecting exception: AssertionError");
      
      } catch(AssertionError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      int[] intArray0 = new int[3];
      VecInt vecInt0 = new VecInt(intArray0);
      vecInt0.sortUnique();
      vecInt0.shrink((-1));
      UnitPropagationListener unitPropagationListener0 = mock(UnitPropagationListener.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(unitPropagationListener0).enqueue(anyInt() , any(org.sat4j.specs.Constr.class));
      ILits iLits0 = mock(ILits.class, new ViolatedAssumptionAnswer());
      LearntBinaryClause learntBinaryClause0 = new LearntBinaryClause(vecInt0, iLits0);
      learntBinaryClause0.head = (-2);
      learntBinaryClause0.propagate(unitPropagationListener0, (-1));
      assertEquals(0.0, learntBinaryClause0.getActivity(), 0.01);
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      int[] intArray0 = new int[3];
      VecInt vecInt0 = new VecInt(intArray0);
      vecInt0.sortUnique();
      vecInt0.insertFirst(1);
      ILits iLits0 = mock(ILits.class, new ViolatedAssumptionAnswer());
      LearntBinaryClause learntBinaryClause0 = new LearntBinaryClause(vecInt0, iLits0);
      // Undeclared exception!
      try { 
        learntBinaryClause0.propagate((UnitPropagationListener) null, 1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.minisat.constraints.cnf.BinaryClause", e);
      }
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      int[] intArray0 = new int[5];
      VecInt vecInt0 = new VecInt(intArray0);
      vecInt0.sortUnique();
      vecInt0.shrink((-1));
      ILits iLits0 = mock(ILits.class, new ViolatedAssumptionAnswer());
      doReturn(false, false, false, true).when(iLits0).isSatisfied(anyInt());
      LearntBinaryClause learntBinaryClause0 = new LearntBinaryClause(vecInt0, iLits0);
      learntBinaryClause0.isSatisfied();
      boolean boolean0 = learntBinaryClause0.simplify();
      assertTrue(learntBinaryClause0.isSatisfied());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      int[] intArray0 = new int[5];
      VecInt vecInt0 = new VecInt(intArray0);
      vecInt0.sortUnique();
      vecInt0.shrink((-1));
      ILits iLits0 = mock(ILits.class, new ViolatedAssumptionAnswer());
      doReturn(true).when(iLits0).isSatisfied(anyInt());
      LearntBinaryClause learntBinaryClause0 = new LearntBinaryClause(vecInt0, iLits0);
      boolean boolean0 = learntBinaryClause0.simplify();
      assertEquals(0.0, learntBinaryClause0.getActivity(), 0.01);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      int[] intArray0 = new int[3];
      VecInt vecInt0 = new VecInt(intArray0);
      vecInt0.sortUnique();
      ILits iLits0 = mock(ILits.class, new ViolatedAssumptionAnswer());
      doReturn(true, true).when(iLits0).isFalsified(anyInt());
      vecInt0.unsafePush(57);
      LearntBinaryClause learntBinaryClause0 = new LearntBinaryClause(vecInt0, iLits0);
      learntBinaryClause0.calcReasonOnTheFly(57, vecInt0, vecInt0);
      assertEquals(56, vecInt0.last());
      assertEquals(4, vecInt0.size());
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      IVecInt iVecInt0 = VecInt.EMPTY;
      LearntBinaryClause learntBinaryClause0 = null;
      try {
        learntBinaryClause0 = new LearntBinaryClause(iVecInt0, (ILits) null);
        fail("Expecting exception: AssertionError");
      
      } catch(AssertionError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      int[] intArray0 = new int[3];
      VecInt vecInt0 = new VecInt(intArray0);
      vecInt0.sortUnique();
      vecInt0.unsafePush(1);
      LearntBinaryClause learntBinaryClause0 = new LearntBinaryClause(vecInt0, (ILits) null);
      int int0 = learntBinaryClause0.size();
      assertEquals(2, int0);
      assertEquals(0.0, learntBinaryClause0.getActivity(), 0.01);
  }

  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      int[] intArray0 = new int[5];
      VecInt vecInt0 = new VecInt(intArray0);
      vecInt0.sortUnique();
      vecInt0.unsafePush(1);
      OriginalBinaryClause originalBinaryClause0 = new OriginalBinaryClause(vecInt0, (ILits) null);
      boolean boolean0 = originalBinaryClause0.canBePropagatedMultipleTimes();
      assertEquals(0.0, originalBinaryClause0.getActivity(), 0.01);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      int[] intArray0 = new int[10];
      VecInt vecInt0 = new VecInt(intArray0);
      vecInt0.sortUnique();
      vecInt0.unsafePush(1);
      LearntBinaryClause learntBinaryClause0 = new LearntBinaryClause(vecInt0, (ILits) null);
      double double0 = learntBinaryClause0.getActivity();
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      int[] intArray0 = new int[1];
      VecInt vecInt0 = new VecInt(intArray0);
      vecInt0.insertFirst(1);
      ILits iLits0 = mock(ILits.class, new ViolatedAssumptionAnswer());
      LearntBinaryClause learntBinaryClause0 = new LearntBinaryClause(vecInt0, iLits0);
      int[] intArray1 = learntBinaryClause0.getLits();
      assertEquals(0.0, learntBinaryClause0.getActivity(), 0.01);
      assertArrayEquals(new int[] {1, 0}, intArray1);
  }

  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      int[] intArray0 = new int[6];
      VecInt vecInt0 = new VecInt(intArray0);
      vecInt0.sortUnique();
      vecInt0.shrink((-1));
      Lits lits0 = new Lits();
      LearntBinaryClause learntBinaryClause0 = new LearntBinaryClause(vecInt0, lits0);
      learntBinaryClause0.getVocabulary();
      assertEquals(0.0, learntBinaryClause0.getActivity(), 0.01);
  }

  @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      int[] intArray0 = new int[4];
      VecInt vecInt0 = new VecInt(intArray0);
      vecInt0.sortUnique();
      vecInt0.unsafePush(1);
      LearntBinaryClause learntBinaryClause0 = new LearntBinaryClause(vecInt0, (ILits) null);
      // Undeclared exception!
      try { 
        learntBinaryClause0.toString();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.minisat.constraints.cnf.BinaryClause", e);
      }
  }

  @Test(timeout = 4000)
  public void test72()  throws Throwable  {
      int[] intArray0 = new int[5];
      intArray0[0] = (-4);
      intArray0[1] = (-2208);
      intArray0[2] = (-4110);
      VecInt vecInt0 = new VecInt(intArray0);
      vecInt0.sortUnique();
      vecInt0.shrink(2);
      LearntBinaryClause learntBinaryClause0 = new LearntBinaryClause(vecInt0, (ILits) null);
      learntBinaryClause0.hashCode();
      assertEquals(0.0, learntBinaryClause0.getActivity(), 0.01);
  }

  @Test(timeout = 4000)
  public void test73()  throws Throwable  {
      int[] intArray0 = new int[10];
      VecInt vecInt0 = new VecInt(intArray0);
      vecInt0.sortUnique();
      vecInt0.unsafePush(1);
      LearntBinaryClause learntBinaryClause0 = new LearntBinaryClause(vecInt0, (ILits) null);
      boolean boolean0 = learntBinaryClause0.canBeSatisfiedByCountingLiterals();
      assertTrue(boolean0);
      assertEquals(0.0, learntBinaryClause0.getActivity(), 0.01);
  }

  @Test(timeout = 4000)
  public void test74()  throws Throwable  {
      int[] intArray0 = new int[6];
      VecInt vecInt0 = new VecInt(intArray0);
      vecInt0.sortUnique();
      vecInt0.shrink((-1));
      Lits lits0 = new Lits();
      LearntBinaryClause learntBinaryClause0 = new LearntBinaryClause(vecInt0, lits0);
      int int0 = learntBinaryClause0.requiredNumberOfSatisfiedLiterals();
      assertEquals(0.0, learntBinaryClause0.getActivity(), 0.01);
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test75()  throws Throwable  {
      int[] intArray0 = new int[4];
      VecInt vecInt0 = new VecInt(intArray0);
      vecInt0.sortUnique();
      ILits iLits0 = mock(ILits.class, new ViolatedAssumptionAnswer());
      vecInt0.unsafePush(2);
      LearntBinaryClause learntBinaryClause0 = new LearntBinaryClause(vecInt0, iLits0);
      learntBinaryClause0.rescaleBy(2);
      assertEquals(0.0, learntBinaryClause0.getActivity(), 0.01);
  }

  @Test(timeout = 4000)
  public void test76()  throws Throwable  {
      int[] intArray0 = new int[6];
      VecInt vecInt0 = new VecInt(intArray0);
      vecInt0.sortUnique();
      vecInt0.shrink((-1));
      ILits iLits0 = mock(ILits.class, new ViolatedAssumptionAnswer());
      doReturn((String) null, (String) null).when(iLits0).valueToString(anyInt());
      LearntBinaryClause learntBinaryClause0 = new LearntBinaryClause(vecInt0, iLits0);
      Constr constr0 = learntBinaryClause0.toConstraint();
      assertEquals(0.0, constr0.getActivity(), 0.01);
  }
}
