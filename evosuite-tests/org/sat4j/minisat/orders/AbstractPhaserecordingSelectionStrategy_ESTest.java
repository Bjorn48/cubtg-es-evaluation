/*
 * This file was automatically generated by EvoSuite
 * Sun Feb 17 13:04:18 GMT 2019
 */

package org.sat4j.minisat.orders;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;
import org.sat4j.minisat.orders.PhaseInLastLearnedClauseSelectionStrategy;
import org.sat4j.minisat.orders.RSATLastLearnedClausesPhaseSelectionStrategy;
import org.sat4j.minisat.orders.RSATPhaseSelectionStrategy;
import org.sat4j.minisat.orders.UserFixedPhaseSelectionStrategy;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class AbstractPhaserecordingSelectionStrategy_ESTest extends AbstractPhaserecordingSelectionStrategy_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      RSATPhaseSelectionStrategy rSATPhaseSelectionStrategy0 = new RSATPhaseSelectionStrategy();
      // Undeclared exception!
      try { 
        rSATPhaseSelectionStrategy0.init((-2143), 0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.minisat.orders.AbstractPhaserecordingSelectionStrategy", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      UserFixedPhaseSelectionStrategy userFixedPhaseSelectionStrategy0 = new UserFixedPhaseSelectionStrategy();
      int[] intArray0 = new int[5];
      userFixedPhaseSelectionStrategy0.phase = intArray0;
      int[] intArray1 = new int[4];
      userFixedPhaseSelectionStrategy0.phase = intArray1;
      userFixedPhaseSelectionStrategy0.init(4);
      assertEquals("Fixed selection strategy.", userFixedPhaseSelectionStrategy0.toString());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      RSATPhaseSelectionStrategy rSATPhaseSelectionStrategy0 = new RSATPhaseSelectionStrategy();
      int[] intArray0 = new int[4];
      rSATPhaseSelectionStrategy0.phase = intArray0;
      rSATPhaseSelectionStrategy0.init(0, 0);
      assertEquals("lightweight component caching from RSAT", rSATPhaseSelectionStrategy0.toString());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      RSATLastLearnedClausesPhaseSelectionStrategy rSATLastLearnedClausesPhaseSelectionStrategy0 = new RSATLastLearnedClausesPhaseSelectionStrategy();
      int[] intArray0 = new int[23];
      rSATLastLearnedClausesPhaseSelectionStrategy0.phase = intArray0;
      int int0 = rSATLastLearnedClausesPhaseSelectionStrategy0.select(0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      PhaseInLastLearnedClauseSelectionStrategy phaseInLastLearnedClauseSelectionStrategy0 = new PhaseInLastLearnedClauseSelectionStrategy();
      int[] intArray0 = new int[1];
      phaseInLastLearnedClauseSelectionStrategy0.phase = intArray0;
      phaseInLastLearnedClauseSelectionStrategy0.updateVar(1);
      int int0 = phaseInLastLearnedClauseSelectionStrategy0.select(0);
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      int[] intArray0 = new int[4];
      intArray0[0] = (-1226);
      PhaseInLastLearnedClauseSelectionStrategy phaseInLastLearnedClauseSelectionStrategy0 = new PhaseInLastLearnedClauseSelectionStrategy();
      phaseInLastLearnedClauseSelectionStrategy0.phase = intArray0;
      int int0 = phaseInLastLearnedClauseSelectionStrategy0.select(0);
      assertEquals((-1226), int0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      UserFixedPhaseSelectionStrategy userFixedPhaseSelectionStrategy0 = new UserFixedPhaseSelectionStrategy();
      int[] intArray0 = new int[1];
      userFixedPhaseSelectionStrategy0.phase = intArray0;
      // Undeclared exception!
      try { 
        userFixedPhaseSelectionStrategy0.select((-2674));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -2674
         //
         verifyException("org.sat4j.minisat.orders.AbstractPhaserecordingSelectionStrategy", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      RSATLastLearnedClausesPhaseSelectionStrategy rSATLastLearnedClausesPhaseSelectionStrategy0 = new RSATLastLearnedClausesPhaseSelectionStrategy();
      rSATLastLearnedClausesPhaseSelectionStrategy0.init(1);
      // Undeclared exception!
      try { 
        rSATLastLearnedClausesPhaseSelectionStrategy0.init(1, 1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1
         //
         verifyException("org.sat4j.minisat.orders.AbstractPhaserecordingSelectionStrategy", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      RSATLastLearnedClausesPhaseSelectionStrategy rSATLastLearnedClausesPhaseSelectionStrategy0 = new RSATLastLearnedClausesPhaseSelectionStrategy();
      // Undeclared exception!
      try { 
        rSATLastLearnedClausesPhaseSelectionStrategy0.init((-1));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.minisat.orders.AbstractPhaserecordingSelectionStrategy", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      RSATLastLearnedClausesPhaseSelectionStrategy rSATLastLearnedClausesPhaseSelectionStrategy0 = new RSATLastLearnedClausesPhaseSelectionStrategy();
      int[] intArray0 = new int[0];
      rSATLastLearnedClausesPhaseSelectionStrategy0.phase = intArray0;
      rSATLastLearnedClausesPhaseSelectionStrategy0.init(22);
      assertEquals("lightweight component caching from RSAT inverting phase for variables at conflict decision level", rSATLastLearnedClausesPhaseSelectionStrategy0.toString());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      RSATLastLearnedClausesPhaseSelectionStrategy rSATLastLearnedClausesPhaseSelectionStrategy0 = new RSATLastLearnedClausesPhaseSelectionStrategy();
      int[] intArray0 = new int[23];
      rSATLastLearnedClausesPhaseSelectionStrategy0.phase = intArray0;
      rSATLastLearnedClausesPhaseSelectionStrategy0.init(0);
      assertEquals("lightweight component caching from RSAT inverting phase for variables at conflict decision level", rSATLastLearnedClausesPhaseSelectionStrategy0.toString());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      RSATLastLearnedClausesPhaseSelectionStrategy rSATLastLearnedClausesPhaseSelectionStrategy0 = new RSATLastLearnedClausesPhaseSelectionStrategy();
      // Undeclared exception!
      try { 
        rSATLastLearnedClausesPhaseSelectionStrategy0.select(0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.minisat.orders.AbstractPhaserecordingSelectionStrategy", e);
      }
  }
}
