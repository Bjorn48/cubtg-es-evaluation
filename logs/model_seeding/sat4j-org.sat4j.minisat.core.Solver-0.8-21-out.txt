* EvoSuite 1.0.7-SNAPSHOT
* Going to generate test cases for class: org.sat4j.minisat.core.Solver
* Starting Client-0
* Connecting to master process on port 9084
* Analyzing classpath: 
  - bins/sat4j/org.ow2.sat4j.core-2.3.6-SNAPSHOT.jar
  - bins/sat4j/org.ow2.sat4j.core-2.3.6-SNAPSHOT-tests.jar
* Finished analyzing classpath
* Generating tests for class org.sat4j.minisat.core.Solver
* Test criteria:
  - Line Coverage
  - Branch Coverage
  - Exception
  - Mutation testing (weak)
  - Method-Output Coverage
  - Top-Level Method Coverage
  - No-Exception Top-Level Method Coverage
  - Context Branch Coverage
* Total number of test goals for DYNAMOSA: 3882
* Using seed 1550555776716
* Starting evolution
* Initialsss Number of Goals in DynMOSA = 1320 / 3882
Current fitness function value: class org.evosuite.coverage.line.LineCoverageSuiteFitness ** 0.20767888307155322
Current fitness function value: class org.evosuite.coverage.branch.BranchCoverageSuiteFitness ** 0.11186903137789904
Current fitness function value: class org.evosuite.coverage.exception.ExceptionCoverageSuiteFitness ** 1.0
Current fitness function value: class org.evosuite.coverage.mutation.WeakMutationSuiteFitness ** 0.068
Current fitness function value: class org.evosuite.coverage.io.output.OutputCoverageSuiteFitness ** 0.12406015037593984
Current fitness function value: class org.evosuite.coverage.method.MethodCoverageSuiteFitness ** 0.2047244094488189
Current fitness function value: class org.evosuite.coverage.method.MethodNoExceptionCoverageSuiteFitness ** 0.14960629921259844
Current fitness function value: class org.evosuite.coverage.cbranch.CBranchSuiteFitness ** 0.06684856753069578
* naaame: 
* naaame: org.evosuite.ga.stoppingconditions.ZeroFitnessStoppingCondition
* naaame: org.evosuite.ga.stoppingconditions.GlobalTimeStoppingCondition
* naaame: org.evosuite.ShutdownTestWriter
* naaame: org.evosuite.ga.stoppingconditions.RMIStoppingCondition
* naaame: org.evosuite.ga.stoppingconditions.MaxFitnessEvaluationsStoppingCondition
Current fitness evaluations: 200
* naaame: 
* naaame: org.evosuite.ga.stoppingconditions.ZeroFitnessStoppingCondition
* naaame: org.evosuite.ga.stoppingconditions.GlobalTimeStoppingCondition
* naaame: org.evosuite.ShutdownTestWriter
* naaame: org.evosuite.ga.stoppingconditions.RMIStoppingCondition
* naaame: org.evosuite.ga.stoppingconditions.MaxFitnessEvaluationsStoppingCondition
Current fitness evaluations: 266
Current fitness function value: class org.evosuite.coverage.line.LineCoverageSuiteFitness ** 0.2356020942408377
Current fitness function value: class org.evosuite.coverage.branch.BranchCoverageSuiteFitness ** 0.1377899045020464
Current fitness function value: class org.evosuite.coverage.exception.ExceptionCoverageSuiteFitness ** 1.0
Current fitness function value: class org.evosuite.coverage.mutation.WeakMutationSuiteFitness ** 0.13066666666666665
Current fitness function value: class org.evosuite.coverage.io.output.OutputCoverageSuiteFitness ** 0.15037593984962405
Current fitness function value: class org.evosuite.coverage.method.MethodCoverageSuiteFitness ** 0.25196850393700787
Current fitness function value: class org.evosuite.coverage.method.MethodNoExceptionCoverageSuiteFitness ** 0.1968503937007874
Current fitness function value: class org.evosuite.coverage.cbranch.CBranchSuiteFitness ** 0.0927694406548431
* naaame: 
* naaame: org.evosuite.ga.stoppingconditions.ZeroFitnessStoppingCondition
* naaame: org.evosuite.ga.stoppingconditions.GlobalTimeStoppingCondition
* naaame: org.evosuite.ShutdownTestWriter
* naaame: org.evosuite.ga.stoppingconditions.RMIStoppingCondition
* naaame: org.evosuite.ga.stoppingconditions.MaxFitnessEvaluationsStoppingCondition
Current fitness evaluations: 339
Current fitness function value: class org.evosuite.coverage.line.LineCoverageSuiteFitness ** 0.2486910994764398
Current fitness function value: class org.evosuite.coverage.branch.BranchCoverageSuiteFitness ** 0.15279672578444747
Current fitness function value: class org.evosuite.coverage.exception.ExceptionCoverageSuiteFitness ** 1.0
Current fitness function value: class org.evosuite.coverage.mutation.WeakMutationSuiteFitness ** 0.14533333333333334
Current fitness function value: class org.evosuite.coverage.io.output.OutputCoverageSuiteFitness ** 0.16165413533834586
Current fitness function value: class org.evosuite.coverage.method.MethodCoverageSuiteFitness ** 0.30708661417322836
Current fitness function value: class org.evosuite.coverage.method.MethodNoExceptionCoverageSuiteFitness ** 0.23622047244094488
Current fitness function value: class org.evosuite.coverage.cbranch.CBranchSuiteFitness ** 0.1077762619372442
* naaame: 
* naaame: org.evosuite.ga.stoppingconditions.ZeroFitnessStoppingCondition
* naaame: org.evosuite.ga.stoppingconditions.GlobalTimeStoppingCondition
* naaame: org.evosuite.ShutdownTestWriter
* naaame: org.evosuite.ga.stoppingconditions.RMIStoppingCondition
* naaame: org.evosuite.ga.stoppingconditions.MaxFitnessEvaluationsStoppingCondition
Current fitness evaluations: 417
Current fitness function value: class org.evosuite.coverage.line.LineCoverageSuiteFitness ** 0.25218150087260033
Current fitness function value: class org.evosuite.coverage.branch.BranchCoverageSuiteFitness ** 0.15688949522510232
Current fitness function value: class org.evosuite.coverage.exception.ExceptionCoverageSuiteFitness ** 1.0
Current fitness function value: class org.evosuite.coverage.mutation.WeakMutationSuiteFitness ** 0.16133333333333333
Current fitness function value: class org.evosuite.coverage.io.output.OutputCoverageSuiteFitness ** 0.18045112781954886
Current fitness function value: class org.evosuite.coverage.method.MethodCoverageSuiteFitness ** 0.33070866141732286
Current fitness function value: class org.evosuite.coverage.method.MethodNoExceptionCoverageSuiteFitness ** 0.25984251968503935
Current fitness function value: class org.evosuite.coverage.cbranch.CBranchSuiteFitness ** 0.11186903137789904
* naaame: 
* naaame: org.evosuite.ga.stoppingconditions.ZeroFitnessStoppingCondition
* naaame: org.evosuite.ga.stoppingconditions.GlobalTimeStoppingCondition
* naaame: org.evosuite.ShutdownTestWriter
* naaame: org.evosuite.ga.stoppingconditions.RMIStoppingCondition
* naaame: org.evosuite.ga.stoppingconditions.MaxFitnessEvaluationsStoppingCondition
Current fitness evaluations: 491
Current fitness function value: class org.evosuite.coverage.line.LineCoverageSuiteFitness ** 0.26090750436300175
Current fitness function value: class org.evosuite.coverage.branch.BranchCoverageSuiteFitness ** 0.16780354706684858
Current fitness function value: class org.evosuite.coverage.exception.ExceptionCoverageSuiteFitness ** 1.0
Current fitness function value: class org.evosuite.coverage.mutation.WeakMutationSuiteFitness ** 0.16933333333333334
Current fitness function value: class org.evosuite.coverage.io.output.OutputCoverageSuiteFitness ** 0.18421052631578946
Current fitness function value: class org.evosuite.coverage.method.MethodCoverageSuiteFitness ** 0.3779527559055118
Current fitness function value: class org.evosuite.coverage.method.MethodNoExceptionCoverageSuiteFitness ** 0.28346456692913385
Current fitness function value: class org.evosuite.coverage.cbranch.CBranchSuiteFitness ** 0.12414733969986358
* naaame: 
* naaame: org.evosuite.ga.stoppingconditions.ZeroFitnessStoppingCondition
* naaame: org.evosuite.ga.stoppingconditions.GlobalTimeStoppingCondition
* naaame: org.evosuite.ShutdownTestWriter
* naaame: org.evosuite.ga.stoppingconditions.RMIStoppingCondition
* naaame: org.evosuite.ga.stoppingconditions.MaxFitnessEvaluationsStoppingCondition
Current fitness evaluations: 579
Current fitness function value: class org.evosuite.coverage.line.LineCoverageSuiteFitness ** 0.2766143106457243
Current fitness function value: class org.evosuite.coverage.branch.BranchCoverageSuiteFitness ** 0.17598908594815826
Current fitness function value: class org.evosuite.coverage.exception.ExceptionCoverageSuiteFitness ** 1.0
Current fitness function value: class org.evosuite.coverage.mutation.WeakMutationSuiteFitness ** 0.17733333333333334
Current fitness function value: class org.evosuite.coverage.io.output.OutputCoverageSuiteFitness ** 0.18796992481203006
Current fitness function value: class org.evosuite.coverage.method.MethodCoverageSuiteFitness ** 0.41732283464566927
Current fitness function value: class org.evosuite.coverage.method.MethodNoExceptionCoverageSuiteFitness ** 0.31496062992125984
Current fitness function value: class org.evosuite.coverage.cbranch.CBranchSuiteFitness ** 0.1296043656207367
* naaame: 
* naaame: org.evosuite.ga.stoppingconditions.ZeroFitnessStoppingCondition
* naaame: org.evosuite.ga.stoppingconditions.GlobalTimeStoppingCondition
* naaame: org.evosuite.ShutdownTestWriter
* naaame: org.evosuite.ga.stoppingconditions.RMIStoppingCondition
* naaame: org.evosuite.ga.stoppingconditions.MaxFitnessEvaluationsStoppingCondition
Current fitness evaluations: 602
Current fitness function value: class org.evosuite.coverage.line.LineCoverageSuiteFitness ** 0.28184991273996507
Current fitness function value: class org.evosuite.coverage.branch.BranchCoverageSuiteFitness ** 0.1869031377899045
Current fitness function value: class org.evosuite.coverage.exception.ExceptionCoverageSuiteFitness ** 1.0
Current fitness function value: class org.evosuite.coverage.mutation.WeakMutationSuiteFitness ** 0.18
Current fitness function value: class org.evosuite.coverage.io.output.OutputCoverageSuiteFitness ** 0.19548872180451127
Current fitness function value: class org.evosuite.coverage.method.MethodCoverageSuiteFitness ** 0.4330708661417323
Current fitness function value: class org.evosuite.coverage.method.MethodNoExceptionCoverageSuiteFitness ** 0.3228346456692913
Current fitness function value: class org.evosuite.coverage.cbranch.CBranchSuiteFitness ** 0.13369713506139155
* Search finished after 124s and 6 generations, 10876 statements, best individual has fitness: 3041.0
Current fitness function value: class org.evosuite.coverage.line.LineCoverageSuiteFitness ** 0.28184991273996507
Current fitness function value: class org.evosuite.coverage.branch.BranchCoverageSuiteFitness ** 0.1869031377899045
Current fitness function value: class org.evosuite.coverage.exception.ExceptionCoverageSuiteFitness ** 1.0
Current fitness function value: class org.evosuite.coverage.mutation.WeakMutationSuiteFitness ** 0.18
Current fitness function value: class org.evosuite.coverage.io.output.OutputCoverageSuiteFitness ** 0.19548872180451127
Current fitness function value: class org.evosuite.coverage.method.MethodCoverageSuiteFitness ** 0.4330708661417323
Current fitness function value: class org.evosuite.coverage.method.MethodNoExceptionCoverageSuiteFitness ** 0.3228346456692913
Current fitness function value: class org.evosuite.coverage.cbranch.CBranchSuiteFitness ** 0.13369713506139155
* Minimizing test suite
* Going to analyze the coverage criteria
* Coverage analysis for criterion LINE
[MASTER] 06:59:42.416 [logback-1] WARN  TestSuiteMinimizer - Minimization timeout. Roll back to original test suite
* Coverage of criterion LINE: 30%
* Total number of goals: 1146
* Number of covered goals: 341
* Coverage analysis for criterion BRANCH
* Coverage of criterion BRANCH: 19%
* Total number of goals: 733
* Number of covered goals: 137
* Coverage analysis for criterion EXCEPTION
* Coverage of criterion EXCEPTION: 100%
* Total number of goals: 25
* Number of covered goals: 25
* Coverage analysis for criterion WEAKMUTATION
* Coverage of criterion WEAKMUTATION: 19%
* Total number of goals: 750
* Number of covered goals: 144
* Coverage analysis for criterion OUTPUT
* Coverage of criterion OUTPUT: 20%
* Total number of goals: 266
* Number of covered goals: 52
* Coverage analysis for criterion METHOD
* Coverage of criterion METHOD: 45%
* Total number of goals: 127
* Number of covered goals: 57
* Coverage analysis for criterion METHODNOEXCEPTION
* Coverage of criterion METHODNOEXCEPTION: 32%
* Total number of goals: 127
* Number of covered goals: 41
* Coverage analysis for criterion CBRANCH
* Coverage of criterion CBRANCH: 13%
* Total number of goals: 733
* Number of covered goals: 98
Current fitness function value: class org.evosuite.coverage.line.LineCoverageSuiteFitness ** 0.28184991273996507
Current fitness function value: class org.evosuite.coverage.branch.BranchCoverageSuiteFitness ** 0.1869031377899045
Current fitness function value: class org.evosuite.coverage.exception.ExceptionCoverageSuiteFitness ** 1.0
Current fitness function value: class org.evosuite.coverage.mutation.WeakMutationSuiteFitness ** 0.18
Current fitness function value: class org.evosuite.coverage.io.output.OutputCoverageSuiteFitness ** 0.19548872180451127
Current fitness function value: class org.evosuite.coverage.method.MethodCoverageSuiteFitness ** 0.4330708661417323
Current fitness function value: class org.evosuite.coverage.method.MethodNoExceptionCoverageSuiteFitness ** 0.3228346456692913
Current fitness function value: class org.evosuite.coverage.cbranch.CBranchSuiteFitness ** 0.13369713506139155
* Generated 84 tests with total length 1820
* Resulting test suite's coverage: 34% (average coverage for all fitness functions)
* Generating assertions
[MASTER] 07:00:39.785 [logback-1] WARN  SimpleMutationAssertionGenerator - Assertion minimization is taking too long (0.7556333333333334% of time used, but only 24/84 tests minimized), falling back to using all assertions
* Resulting test suite's mutation score: 3%
Current fitness function value: class org.evosuite.coverage.line.LineCoverageSuiteFitness ** 0.28184991273996507
Current fitness function value: class org.evosuite.coverage.branch.BranchCoverageSuiteFitness ** 0.1869031377899045
Current fitness function value: class org.evosuite.coverage.exception.ExceptionCoverageSuiteFitness ** 1.0
Current fitness function value: class org.evosuite.coverage.mutation.WeakMutationSuiteFitness ** 0.18
Current fitness function value: class org.evosuite.coverage.io.output.OutputCoverageSuiteFitness ** 0.19548872180451127
Current fitness function value: class org.evosuite.coverage.method.MethodCoverageSuiteFitness ** 0.4330708661417323
Current fitness function value: class org.evosuite.coverage.method.MethodNoExceptionCoverageSuiteFitness ** 0.3228346456692913
Current fitness function value: class org.evosuite.coverage.cbranch.CBranchSuiteFitness ** 0.13369713506139155
* Compiling and checking tests
[MASTER] 07:01:04.657 [logback-1] WARN  ClassResetter - class java.lang.IncompatibleClassChangeError thrown while loading method  __STATIC_RESET() for class org.sat4j.minisat.core.Solver$GlucoseLCDS
[MASTER] 07:01:04.676 [logback-1] WARN  ClassResetter - class java.lang.IncompatibleClassChangeError thrown while loading method  __STATIC_RESET() for class org.sat4j.minisat.core.Solver$Glucose2LCDS
[MASTER] 07:01:16.138 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class java.lang.AssertionError: Expecting exception: NoSuchFieldError
[MASTER] 07:01:16.139 [logback-1] WARN  JUnitAnalyzer - Failing test:
 MiniSATLearning<CardinalityDataStructureYanMax> miniSATLearning0 = new MiniSATLearning<CardinalityDataStructureYanMax>();
CardinalityDataStructureYanMax cardinalityDataStructureYanMax0 = new CardinalityDataStructureYanMax();
FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
ClauseOnlyLearning<CardinalityDataStructureYanMin> clauseOnlyLearning0 = new ClauseOnlyLearning<CardinalityDataStructureYanMin>();
CardinalityDataStructureYanMin cardinalityDataStructureYanMin0 = new CardinalityDataStructureYanMin();
NaturalStaticOrder naturalStaticOrder0 = new NaturalStaticOrder();
FixedPeriodRestarts fixedPeriodRestarts0 = new FixedPeriodRestarts();
Solver<CardinalityDataStructureYanMin> solver0 = new Solver<CardinalityDataStructureYanMin>(clauseOnlyLearning0, cardinalityDataStructureYanMin0, naturalStaticOrder0, fixedPeriodRestarts0);
SearchParams searchParams0 = solver0.getSearchParams();
searchParams0.getInitConflictBound();
MUSLauncher mUSLauncher0 = new MUSLauncher();
String[] stringArray0 = new String[3];
clauseOnlyLearning0.init();
stringArray0[0] = "c ";
stringArray0[1] = "c ";
stringArray0[2] = "c ";
MUSLauncher.main(stringArray0);
mUSLauncher0.log("");
Solver<CardinalityDataStructureYanMax> solver1 = new Solver<CardinalityDataStructureYanMax>(miniSATLearning0, cardinalityDataStructureYanMax0, searchParams0, naturalStaticOrder0, fixedPeriodRestarts0);
solver1.truthValue(100);
Solver<CardinalityDataStructureYanMax> solver2 = new Solver<CardinalityDataStructureYanMax>(miniSATLearning0, cardinalityDataStructureYanMax0, searchParams0, naturalStaticOrder0, fixedPeriodRestarts0, mUSLauncher0);
solver2.setLearnedConstraintsDeletionStrategy(solver0.size_based);

[MASTER] 07:01:19.278 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class java.lang.AssertionError: expected:<2> but was:<0>
[MASTER] 07:01:19.279 [logback-1] WARN  JUnitAnalyzer - Failing test:
 ClauseOnlyLearning<CardinalityDataStructureYanMax> clauseOnlyLearning0 = new ClauseOnlyLearning<CardinalityDataStructureYanMax>();
CardinalityDataStructureYanMax cardinalityDataStructureYanMax0 = new CardinalityDataStructureYanMax();
int[] intArray0 = new int[1];
intArray0[0] = (-1054);
SubsetVarOrder subsetVarOrder0 = new SubsetVarOrder(intArray0);
subsetVarOrder0.getVariableHeuristics();
ArminRestarts arminRestarts0 = new ArminRestarts();
Solver<CardinalityDataStructureYanMax> solver0 = new Solver<CardinalityDataStructureYanMax>(clauseOnlyLearning0, cardinalityDataStructureYanMax0, subsetVarOrder0, arminRestarts0);
solver0.isVerbose();
PercentLengthLearning<MixedDataStructureDanielHT> percentLengthLearning0 = new PercentLengthLearning<MixedDataStructureDanielHT>();
MixedDataStructureDanielHT mixedDataStructureDanielHT0 = new MixedDataStructureDanielHT();
SearchParams searchParams0 = new SearchParams((-582.74), 0);
double double0 = new Float((double) (-1054));
searchParams0.getInitConflictBound();
searchParams0.getConflictBoundIncFactor();
searchParams0.getInitConflictBound();
searchParams0.getConflictBoundIncFactor();
searchParams0.getInitConflictBound();
searchParams0.getConflictBoundIncFactor();
SearchParams searchParams1 = new SearchParams((-1.0), 0.0, (-582.74), 0);
searchParams1.getInitConflictBound();
searchParams0.getInitConflictBound();
searchParams1.getConflictBoundIncFactor();
searchParams1.getInitConflictBound();
Glucose21Restarts glucose21Restarts0 = new Glucose21Restarts();
SearchParams searchParams2 = new SearchParams(58);
glucose21Restarts0.onRestart();
BasicLauncher<Solver<MixedDataStructureDanielWLConciseBinary>> basicLauncher0 = new BasicLauncher<Solver<MixedDataStructureDanielWLConciseBinary>>((ASolverFactory<Solver<MixedDataStructureDanielWLConciseBinary>>) null);
basicLauncher0.log("");
int int0 = solver0.newVar(0);
assertEquals(2, solver0.nVars());
assertEquals(0, int0);


[MASTER] 07:01:25.824 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class java.lang.AssertionError: expected:<1> but was:<0>
[MASTER] 07:01:25.850 [logback-1] WARN  JUnitAnalyzer - Failing test:
 ActiveLearning<MixedDataStructureDanielWL> activeLearning0 = new ActiveLearning<MixedDataStructureDanielWL>();
assertEquals(0, activeLearning0.getLimit());
assertEquals(0.95, activeLearning0.getActivityPercent(), 0.01);
assertNotNull(activeLearning0);

MixedDataStructureDanielWL mixedDataStructureDanielWL0 = new MixedDataStructureDanielWL();
assertNotNull(mixedDataStructureDanielWL0);

NaturalStaticOrder naturalStaticOrder0 = new NaturalStaticOrder();
assertEquals("Natural static ordering", naturalStaticOrder0.toString());
assertNotNull(naturalStaticOrder0);

naturalStaticOrder0.varDecayActivity();
assertEquals("Natural static ordering", naturalStaticOrder0.toString());

Solver<MixedDataStructureDanielWL> solver0 = new Solver<MixedDataStructureDanielWL>(activeLearning0, mixedDataStructureDanielWL0, (SearchParams) null, naturalStaticOrder0, (RestartStrategy) null);
assertEquals(0, activeLearning0.getLimit());
assertEquals(0.95, activeLearning0.getActivityPercent(), 0.01);
assertEquals("Natural static ordering", naturalStaticOrder0.toString());
assertEquals(2147483, solver0.getTimeout());
assertEquals(0, solver0.nConstraints());
assertEquals(0, solver0.decisionLevel());
assertEquals(1, solver0.realNumberOfVariables());
assertEquals(2, solver0.newVar());
assertFalse(solver0.isSolverKeptHot());
assertEquals(1, solver0.nVars());
assertEquals("c ", solver0.getLogPrefix());
assertFalse(solver0.isDBSimplificationAllowed());
assertEquals(0, solver0.getPropagationLevel());
assertEquals(0, solver0.currentDecisionLevel());
assertFalse(solver0.isVerbose());
assertNotNull(solver0);

SolverStats solverStats0 = solver0.getStats();
assertEquals(0, activeLearning0.getLimit());
assertEquals(0.95, activeLearning0.getActivityPercent(), 0.01);
assertEquals("Natural static ordering", naturalStaticOrder0.toString());
assertEquals(2147483, solver0.getTimeout());
assertEquals(0, solver0.nConstraints());
assertEquals(0, solver0.decisionLevel());
assertEquals(4, solver0.newVar());
assertFalse(solver0.isSolverKeptHot());
assertEquals(3, solver0.nVars());
assertEquals("c ", solver0.getLogPrefix());
assertFalse(solver0.isDBSimplificationAllowed());
assertEquals(3, solver0.realNumberOfVariables());
assertEquals(0, solver0.getPropagationLevel());
assertEquals(0, solver0.currentDecisionLevel());
assertFalse(solver0.isVerbose());
assertEquals(0L, solverStats0.getInspects());
assertEquals(0L, solverStats0.getConflicts());
assertEquals(0L, solverStats0.getLearnedclauses());
assertEquals(0L, solverStats0.getChangedreason());
assertEquals(0L, solverStats0.getLearnedbinaryclauses());
assertEquals(0L, solverStats0.getLearnedliterals());
assertEquals(0L, solverStats0.getReducedliterals());
assertEquals(0L, solverStats0.getUpdateLBD());
assertEquals(0, solverStats0.getStarts());
assertEquals(0L, solverStats0.getDecisions());
assertEquals(0L, solverStats0.getLearnedternaryclauses());
assertEquals(0, solverStats0.getShortcuts());
assertEquals(0L, solverStats0.getRootSimplifications());
assertEquals(0L, solverStats0.getPropagations());
assertEquals(0L, solverStats0.getIgnoredclauses());
assertEquals(0, solverStats0.getImportedUnits());
assertEquals(0, solverStats0.getReduceddb());
assertNotNull(solverStats0);

FixedLengthLearning<CardinalityDataStructureYanMax> fixedLengthLearning0 = new FixedLengthLearning<CardinalityDataStructureYanMax>(1);
assertEquals(1, fixedLengthLearning0.getMaxLength());
assertNotNull(fixedLengthLearning0);

CardinalityDataStructureYanMax cardinalityDataStructureYanMax0 = new CardinalityDataStructureYanMax();
assertNotNull(cardinalityDataStructureYanMax0);

Solver<CardinalityDataStructureYanMax> solver1 = new Solver<CardinalityDataStructureYanMax>(fixedLengthLearning0, cardinalityDataStructureYanMax0, (SearchParams) null, naturalStaticOrder0, (RestartStrategy) null);
assertEquals("Natural static ordering", naturalStaticOrder0.toString());
assertEquals(1, fixedLengthLearning0.getMaxLength());
assertEquals(2147483, solver1.getTimeout());
assertEquals(2, solver1.newVar());
assertEquals(0, solver1.decisionLevel());
assertEquals(1, solver1.realNumberOfVariables());
assertEquals(0, solver1.nConstraints());
assertFalse(solver1.isSolverKeptHot());
assertEquals(1, solver1.nVars());
assertEquals("c ", solver1.getLogPrefix());
assertEquals(0, solver1.currentDecisionLevel());
assertFalse(solver1.isVerbose());
assertFalse(solver1.isDBSimplificationAllowed());
assertEquals(0, solver1.getPropagationLevel());
assertNotNull(solver1);

ActiveLearning<MixedDataStructureDanielHT> activeLearning1 = new ActiveLearning<MixedDataStructureDanielHT>();
assertEquals(0.95, activeLearning1.getActivityPercent(), 0.01);
assertEquals(0, activeLearning1.getLimit());
assertNotNull(activeLearning1);

MixedDataStructureDanielHT mixedDataStructureDanielHT0 = new MixedDataStructureDanielHT();
assertNotNull(mixedDataStructureDanielHT0);

SearchParams searchParams0 = new SearchParams(217);
assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
assertEquals(217, searchParams0.getInitConflictBound());
assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
assertNotNull(searchParams0);

PositiveLiteralSelectionStrategy positiveLiteralSelectionStrategy0 = new PositiveLiteralSelectionStrategy();
assertEquals("positive phase selection", positiveLiteralSelectionStrategy0.toString());
assertNotNull(positiveLiteralSelectionStrategy0);

LevelBasedVarOrderHeap levelBasedVarOrderHeap0 = new LevelBasedVarOrderHeap(positiveLiteralSelectionStrategy0);
assertEquals("positive phase selection", positiveLiteralSelectionStrategy0.toString());
assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
assertNotNull(levelBasedVarOrderHeap0);

NoRestarts noRestarts0 = new NoRestarts();
assertFalse(noRestarts0.shouldRestart());
assertEquals("NoRestarts", noRestarts0.toString());
assertEquals(9223372036854775807L, noRestarts0.nextRestartNumberOfConflict());
assertNotNull(noRestarts0);

NoLearningNoHeuristics<CardinalityDataStructure> noLearningNoHeuristics0 = new NoLearningNoHeuristics<CardinalityDataStructure>();
assertNotNull(noLearningNoHeuristics0);

CardinalityDataStructure cardinalityDataStructure0 = mock(CardinalityDataStructure.class, new ViolatedAssumptionAnswer());
doReturn((ILits) null).when(cardinalityDataStructure0).getVocabulary();
Solver<CardinalityDataStructure> solver2 = new Solver<CardinalityDataStructure>(noLearningNoHeuristics0, cardinalityDataStructure0, searchParams0, levelBasedVarOrderHeap0, noRestarts0);
assertEquals(0, solver2.currentDecisionLevel());
assertEquals(0, solver2.getPropagationLevel());
assertEquals("c ", solver2.getLogPrefix());
assertFalse(solver2.isSolverKeptHot());
assertFalse(solver2.isVerbose());
assertEquals(0, solver2.nConstraints());
assertFalse(solver2.isDBSimplificationAllowed());
assertEquals(2147483, solver2.getTimeout());
assertEquals(0, solver2.decisionLevel());
assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
assertEquals(217, searchParams0.getInitConflictBound());
assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
assertEquals("positive phase selection", positiveLiteralSelectionStrategy0.toString());
assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
assertFalse(noRestarts0.shouldRestart());
assertEquals("NoRestarts", noRestarts0.toString());
assertEquals(9223372036854775807L, noRestarts0.nextRestartNumberOfConflict());
assertNotNull(solver2);

ILogAble iLogAble0 = solver2.out;
assertNotNull(iLogAble0);

Solver<MixedDataStructureDanielHT> solver3 = new Solver<MixedDataStructureDanielHT>(activeLearning1, mixedDataStructureDanielHT0, searchParams0, levelBasedVarOrderHeap0, noRestarts0, iLogAble0);
assertEquals(0, solver2.currentDecisionLevel());
assertEquals(0, solver2.getPropagationLevel());
assertEquals("c ", solver2.getLogPrefix());
assertFalse(solver2.isSolverKeptHot());
assertFalse(solver2.isVerbose());
assertEquals(0, solver2.nConstraints());
assertFalse(solver2.isDBSimplificationAllowed());
assertEquals(2147483, solver2.getTimeout());
assertEquals(0, solver2.decisionLevel());
assertEquals(1, solver3.nVars());
assertEquals("c ", solver3.getLogPrefix());
assertFalse(solver3.isDBSimplificationAllowed());
assertFalse(solver3.isVerbose());
assertEquals(0, solver3.currentDecisionLevel());
assertEquals(0, solver3.getPropagationLevel());
assertEquals(2147483, solver3.getTimeout());
assertEquals(0, solver3.nConstraints());
assertFalse(solver3.isSolverKeptHot());
assertEquals(0, solver3.decisionLevel());
assertEquals(1, solver3.realNumberOfVariables());
assertEquals(2, solver3.newVar());
assertEquals(0.95, activeLearning1.getActivityPercent(), 0.01);
assertEquals(0, activeLearning1.getLimit());
assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
assertEquals(217, searchParams0.getInitConflictBound());
assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
assertEquals("positive phase selection", positiveLiteralSelectionStrategy0.toString());
assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
assertFalse(noRestarts0.shouldRestart());
assertEquals("NoRestarts", noRestarts0.toString());
assertEquals(9223372036854775807L, noRestarts0.nextRestartNumberOfConflict());
assertNotNull(solver3);

LBDConflictTimer lBDConflictTimer0 = new LBDConflictTimer(solver3, 500);
assertEquals(0, solver2.currentDecisionLevel());
assertEquals(0, solver2.getPropagationLevel());
assertEquals("c ", solver2.getLogPrefix());
assertFalse(solver2.isSolverKeptHot());
assertFalse(solver2.isVerbose());
assertEquals(0, solver2.nConstraints());
assertFalse(solver2.isDBSimplificationAllowed());
assertEquals(2147483, solver2.getTimeout());
assertEquals(0, solver2.decisionLevel());
assertEquals(3, solver3.realNumberOfVariables());
assertEquals("c ", solver3.getLogPrefix());
assertFalse(solver3.isDBSimplificationAllowed());
assertFalse(solver3.isVerbose());
assertEquals(0, solver3.currentDecisionLevel());
assertEquals(0, solver3.getPropagationLevel());
assertEquals(2147483, solver3.getTimeout());
assertEquals(0, solver3.nConstraints());
assertFalse(solver3.isSolverKeptHot());
assertEquals(0, solver3.decisionLevel());
assertEquals(4, solver3.newVar());
assertEquals(3, solver3.nVars());
assertEquals(500, lBDConflictTimer0.bound());
assertEquals(0.95, activeLearning1.getActivityPercent(), 0.01);
assertEquals(0, activeLearning1.getLimit());
assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
assertEquals(217, searchParams0.getInitConflictBound());
assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
assertEquals("positive phase selection", positiveLiteralSelectionStrategy0.toString());
assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
assertFalse(noRestarts0.shouldRestart());
assertEquals("NoRestarts", noRestarts0.toString());
assertEquals(9223372036854775807L, noRestarts0.nextRestartNumberOfConflict());
assertNotNull(lBDConflictTimer0);

lBDConflictTimer0.reset();
assertEquals(0, solver2.currentDecisionLevel());
assertEquals(0, solver2.getPropagationLevel());
assertEquals("c ", solver2.getLogPrefix());
assertFalse(solver2.isSolverKeptHot());
assertFalse(solver2.isVerbose());
assertEquals(0, solver2.nConstraints());
assertFalse(solver2.isDBSimplificationAllowed());
assertEquals(2147483, solver2.getTimeout());
assertEquals(0, solver2.decisionLevel());
assertEquals(5, solver3.realNumberOfVariables());
assertEquals("c ", solver3.getLogPrefix());
assertEquals(6, solver3.newVar());
assertFalse(solver3.isDBSimplificationAllowed());
assertFalse(solver3.isVerbose());
assertEquals(0, solver3.currentDecisionLevel());
assertEquals(0, solver3.getPropagationLevel());
assertEquals(2147483, solver3.getTimeout());
assertEquals(0, solver3.nConstraints());
assertFalse(solver3.isSolverKeptHot());
assertEquals(0, solver3.decisionLevel());
assertEquals(5, solver3.nVars());
assertEquals(500, lBDConflictTimer0.bound());
assertEquals(0.95, activeLearning1.getActivityPercent(), 0.01);
assertEquals(0, activeLearning1.getLimit());
assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
assertEquals(217, searchParams0.getInitConflictBound());
assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
assertEquals("positive phase selection", positiveLiteralSelectionStrategy0.toString());
assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
assertFalse(noRestarts0.shouldRestart());
assertEquals("NoRestarts", noRestarts0.toString());
assertEquals(9223372036854775807L, noRestarts0.nextRestartNumberOfConflict());

LearnedConstraintsEvaluationType learnedConstraintsEvaluationType0 = LearnedConstraintsEvaluationType.LBD2;
solver1.setLearnedConstraintsDeletionStrategy((ConflictTimer) lBDConflictTimer0, learnedConstraintsEvaluationType0);
assertEquals("Natural static ordering", naturalStaticOrder0.toString());
assertEquals(1, fixedLengthLearning0.getMaxLength());
assertEquals(2147483, solver1.getTimeout());
assertEquals(0, solver1.decisionLevel());
assertEquals(3, solver1.nVars());
assertEquals(0, solver1.nConstraints());
assertFalse(solver1.isSolverKeptHot());
assertEquals("c ", solver1.getLogPrefix());
assertEquals(0, solver1.currentDecisionLevel());
assertEquals(4, solver1.newVar());
assertEquals(3, solver1.realNumberOfVariables());
assertFalse(solver1.isVerbose());
assertFalse(solver1.isDBSimplificationAllowed());
assertEquals(0, solver1.getPropagationLevel());
assertEquals(0.95, activeLearning1.getActivityPercent(), 0.01);
assertEquals(0, activeLearning1.getLimit());
assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
assertEquals(217, searchParams0.getInitConflictBound());
assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
assertEquals("positive phase selection", positiveLiteralSelectionStrategy0.toString());
assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
assertFalse(noRestarts0.shouldRestart());
assertEquals("NoRestarts", noRestarts0.toString());
assertEquals(9223372036854775807L, noRestarts0.nextRestartNumberOfConflict());
assertEquals(0, solver2.currentDecisionLevel());
assertEquals(0, solver2.getPropagationLevel());
assertEquals("c ", solver2.getLogPrefix());
assertFalse(solver2.isSolverKeptHot());
assertFalse(solver2.isVerbose());
assertEquals(0, solver2.nConstraints());
assertFalse(solver2.isDBSimplificationAllowed());
assertEquals(2147483, solver2.getTimeout());
assertEquals(0, solver2.decisionLevel());
assertEquals(8, solver3.newVar());
assertEquals("c ", solver3.getLogPrefix());
assertFalse(solver3.isDBSimplificationAllowed());
assertFalse(solver3.isVerbose());
assertEquals(0, solver3.currentDecisionLevel());
assertEquals(7, solver3.realNumberOfVariables());
assertEquals(0, solver3.getPropagationLevel());
assertEquals(2147483, solver3.getTimeout());
assertEquals(0, solver3.nConstraints());
assertFalse(solver3.isSolverKeptHot());
assertEquals(7, solver3.nVars());
assertEquals(0, solver3.decisionLevel());
assertEquals(500, lBDConflictTimer0.bound());


[MASTER] 07:01:26.581 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class java.lang.AssertionError: expected:<1> but was:<0>
[MASTER] 07:01:26.586 [logback-1] WARN  JUnitAnalyzer - Failing test:
 MiniSATLearning<CardinalityDataStructureYanMax> miniSATLearning0 = new MiniSATLearning<CardinalityDataStructureYanMax>();
assertEquals("Learn all clauses as in MiniSAT", miniSATLearning0.toString());
assertNotNull(miniSATLearning0);

CardinalityDataStructureYanMax cardinalityDataStructureYanMax0 = new CardinalityDataStructureYanMax();
assertNotNull(cardinalityDataStructureYanMax0);

ClauseOnlyLearning<CardinalityDataStructureYanMin> clauseOnlyLearning0 = new ClauseOnlyLearning<CardinalityDataStructureYanMin>();
assertEquals("Limit learning to clauses using watched literals only", clauseOnlyLearning0.toString());
assertNotNull(clauseOnlyLearning0);

CardinalityDataStructureYanMin cardinalityDataStructureYanMin0 = new CardinalityDataStructureYanMin();
assertNotNull(cardinalityDataStructureYanMin0);

NaturalStaticOrder naturalStaticOrder0 = new NaturalStaticOrder();
assertEquals("Natural static ordering", naturalStaticOrder0.toString());
assertNotNull(naturalStaticOrder0);

FixedPeriodRestarts fixedPeriodRestarts0 = new FixedPeriodRestarts();
assertEquals(0L, fixedPeriodRestarts0.getPeriod());
assertTrue(fixedPeriodRestarts0.shouldRestart());
assertEquals(0L, fixedPeriodRestarts0.nextRestartNumberOfConflict());
assertNotNull(fixedPeriodRestarts0);

Solver<CardinalityDataStructureYanMin> solver0 = new Solver<CardinalityDataStructureYanMin>(clauseOnlyLearning0, cardinalityDataStructureYanMin0, naturalStaticOrder0, fixedPeriodRestarts0);
assertEquals("Limit learning to clauses using watched literals only", clauseOnlyLearning0.toString());
assertEquals("Natural static ordering", naturalStaticOrder0.toString());
assertEquals(0L, fixedPeriodRestarts0.getPeriod());
assertTrue(fixedPeriodRestarts0.shouldRestart());
assertEquals(0L, fixedPeriodRestarts0.nextRestartNumberOfConflict());
assertEquals(1, solver0.nVars());
assertEquals("c ", solver0.getLogPrefix());
assertEquals(0, solver0.nConstraints());
assertEquals(2, solver0.newVar());
assertEquals(0, solver0.decisionLevel());
assertFalse(solver0.isVerbose());
assertEquals(1, solver0.realNumberOfVariables());
assertEquals(0, solver0.getPropagationLevel());
assertFalse(solver0.isSolverKeptHot());
assertEquals(2147483, solver0.getTimeout());
assertEquals(0, solver0.currentDecisionLevel());
assertFalse(solver0.isDBSimplificationAllowed());
assertNotNull(solver0);

MUSLauncher mUSLauncher0 = new MUSLauncher();
assertFalse(mUSLauncher0.isSilent());
assertEquals(ExitCode.UNKNOWN, mUSLauncher0.getExitCode());
assertEquals(0L, mUSLauncher0.getBeginTime());
assertNotNull(mUSLauncher0);

String[] stringArray0 = new String[3];
clauseOnlyLearning0.init();
assertEquals("Limit learning to clauses using watched literals only", clauseOnlyLearning0.toString());

stringArray0[0] = "c ";
stringArray0[1] = "c ";
stringArray0[2] = "c ";
MUSLauncher.main(stringArray0);
assertEquals(3, stringArray0.length);

mUSLauncher0.log("");
assertFalse(mUSLauncher0.isSilent());
assertEquals(ExitCode.UNKNOWN, mUSLauncher0.getExitCode());
assertEquals(0L, mUSLauncher0.getBeginTime());

FixedLengthLearning<ClausalDataStructureWL> fixedLengthLearning0 = new FixedLengthLearning<ClausalDataStructureWL>();
assertEquals(3, fixedLengthLearning0.getMaxLength());
assertNotNull(fixedLengthLearning0);

ClausalDataStructureWL clausalDataStructureWL0 = new ClausalDataStructureWL();
assertNotNull(clausalDataStructureWL0);

ILits iLits0 = clausalDataStructureWL0.getVocabulary();
assertEquals(0, iLits0.realnVars());
assertEquals(0, iLits0.nVars());
assertNotNull(iLits0);

Solver<ClausalDataStructureWL> solver1 = new Solver<ClausalDataStructureWL>(fixedLengthLearning0, clausalDataStructureWL0, naturalStaticOrder0, fixedPeriodRestarts0);
assertEquals("c ", solver1.getLogPrefix());
assertEquals(0, solver1.currentDecisionLevel());
assertEquals(0, solver1.getPropagationLevel());
assertEquals(1, solver1.nVars());
assertEquals(1, solver1.realNumberOfVariables());
assertEquals(2, solver1.newVar());
assertFalse(solver1.isVerbose());
assertFalse(solver1.isDBSimplificationAllowed());
assertEquals(2147483, solver1.getTimeout());
assertEquals(0, solver1.decisionLevel());
assertEquals(0, solver1.nConstraints());
assertFalse(solver1.isSolverKeptHot());
assertEquals("Natural static ordering", naturalStaticOrder0.toString());
assertEquals(0L, fixedPeriodRestarts0.getPeriod());
assertTrue(fixedPeriodRestarts0.shouldRestart());
assertEquals(0L, fixedPeriodRestarts0.nextRestartNumberOfConflict());
assertEquals(3, fixedLengthLearning0.getMaxLength());
assertNotNull(solver1);

DataStructureFactory dataStructureFactory0 = solver1.getDSFactory();
assertEquals("c ", solver1.getLogPrefix());
assertEquals(0, solver1.currentDecisionLevel());
assertEquals(3, solver1.realNumberOfVariables());
assertEquals(4, solver1.newVar());
assertEquals(0, solver1.getPropagationLevel());
assertFalse(solver1.isVerbose());
assertFalse(solver1.isDBSimplificationAllowed());
assertEquals(2147483, solver1.getTimeout());
assertEquals(0, solver1.decisionLevel());
assertEquals(0, solver1.nConstraints());
assertFalse(solver1.isSolverKeptHot());
assertEquals(3, solver1.nVars());
assertEquals("Natural static ordering", naturalStaticOrder0.toString());
assertEquals(0L, fixedPeriodRestarts0.getPeriod());
assertTrue(fixedPeriodRestarts0.shouldRestart());
assertEquals(0L, fixedPeriodRestarts0.nextRestartNumberOfConflict());
assertEquals(3, fixedLengthLearning0.getMaxLength());
assertNotNull(dataStructureFactory0);
assertSame(clausalDataStructureWL0, dataStructureFactory0);
assertSame(dataStructureFactory0, clausalDataStructureWL0);

CardinalityDataStructureYanMin cardinalityDataStructureYanMin1 = new CardinalityDataStructureYanMin();
assertNotNull(cardinalityDataStructureYanMin1);
assertFalse(cardinalityDataStructureYanMin1.equals((Object)cardinalityDataStructureYanMin0));

VarOrderHeap varOrderHeap0 = new VarOrderHeap();
assertEquals(0, varOrderHeap0.numberOfInterestingVariables());
assertNotNull(varOrderHeap0);

ClauseOnlyLearning<CardinalityDataStructureYanMin> clauseOnlyLearning1 = new ClauseOnlyLearning<CardinalityDataStructureYanMin>();
assertEquals("Limit learning to clauses using watched literals only", clauseOnlyLearning1.toString());
assertNotNull(clauseOnlyLearning1);
assertFalse(clauseOnlyLearning1.equals((Object)clauseOnlyLearning0));

VecInt vecInt0 = (VecInt)solver0.decisions;
assertEquals(0, vecInt0.size());
assertTrue(vecInt0.isEmpty());
assertNotNull(vecInt0);

FixedLengthLearning<MixedDataStructureDanielWL> fixedLengthLearning1 = new FixedLengthLearning<MixedDataStructureDanielWL>();
assertEquals(3, fixedLengthLearning1.getMaxLength());
assertNotNull(fixedLengthLearning1);

MixedDataStructureDanielWL mixedDataStructureDanielWL0 = new MixedDataStructureDanielWL();
assertNotNull(mixedDataStructureDanielWL0);

Solver<MixedDataStructureDanielWL> solver2 = new Solver<MixedDataStructureDanielWL>(fixedLengthLearning1, mixedDataStructureDanielWL0, naturalStaticOrder0, fixedPeriodRestarts0);
assertEquals("Natural static ordering", naturalStaticOrder0.toString());
assertEquals(0L, fixedPeriodRestarts0.getPeriod());
assertTrue(fixedPeriodRestarts0.shouldRestart());
assertEquals(0L, fixedPeriodRestarts0.nextRestartNumberOfConflict());
assertEquals(3, fixedLengthLearning1.getMaxLength());
assertFalse(solver2.isDBSimplificationAllowed());
assertEquals(1, solver2.nVars());
assertEquals(0, solver2.currentDecisionLevel());
assertEquals("c ", solver2.getLogPrefix());
assertFalse(solver2.isSolverKeptHot());
assertEquals(1, solver2.realNumberOfVariables());
assertEquals(0, solver2.getPropagationLevel());
assertEquals(0, solver2.nConstraints());
assertFalse(solver2.isVerbose());
assertEquals(2, solver2.newVar());
assertEquals(2147483, solver2.getTimeout());
assertEquals(0, solver2.decisionLevel());
assertNotNull(solver2);

int[] intArray0 = solver2.findModel((IVecInt) vecInt0);
assertEquals(0, intArray0.length);
assertEquals("Limit learning to clauses using watched literals only", clauseOnlyLearning0.toString());
assertEquals("Natural static ordering", naturalStaticOrder0.toString());
assertEquals(0L, fixedPeriodRestarts0.getPeriod());
assertTrue(fixedPeriodRestarts0.shouldRestart());
assertEquals(0L, fixedPeriodRestarts0.nextRestartNumberOfConflict());
assertEquals(3, solver0.nVars());
assertEquals("c ", solver0.getLogPrefix());
assertEquals(0, solver0.nConstraints());
assertEquals(4, solver0.newVar());
assertEquals(3, solver0.realNumberOfVariables());
assertEquals(0, solver0.decisionLevel());
assertFalse(solver0.isVerbose());
assertEquals(0, solver0.getPropagationLevel());
assertFalse(solver0.isSolverKeptHot());
assertEquals(2147483, solver0.getTimeout());
assertEquals(0, solver0.currentDecisionLevel());
assertFalse(solver0.isDBSimplificationAllowed());
assertEquals(0, vecInt0.size());
assertTrue(vecInt0.isEmpty());
assertEquals(3, fixedLengthLearning1.getMaxLength());
assertEquals(3, solver2.nVars());
assertFalse(solver2.isDBSimplificationAllowed());
assertEquals(0, solver2.currentDecisionLevel());
assertEquals(3, solver2.realNumberOfVariables());
assertEquals(4, solver2.newVar());
assertEquals("c ", solver2.getLogPrefix());
assertFalse(solver2.isSolverKeptHot());
assertEquals(0, solver2.getPropagationLevel());
assertEquals(0, solver2.nConstraints());
assertFalse(solver2.isVerbose());
assertEquals(2147483, solver2.getTimeout());
assertEquals(0, solver2.decisionLevel());
assertNotNull(intArray0);
assertNotSame(clauseOnlyLearning0, clauseOnlyLearning1);
assertNotSame(cardinalityDataStructureYanMin0, cardinalityDataStructureYanMin1);
assertArrayEquals(new int[] {}, intArray0);
assertFalse(clauseOnlyLearning0.equals((Object)clauseOnlyLearning1));
assertFalse(cardinalityDataStructureYanMin0.equals((Object)cardinalityDataStructureYanMin1));


[MASTER] 07:01:27.510 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class java.lang.AssertionError: expected:<1> but was:<0>
[MASTER] 07:01:27.513 [logback-1] WARN  JUnitAnalyzer - Failing test:
 NoLearningNoHeuristics<CardinalityDataStructureYanMax> noLearningNoHeuristics0 = new NoLearningNoHeuristics<CardinalityDataStructureYanMax>();
assertNotNull(noLearningNoHeuristics0);

CardinalityDataStructureYanMax cardinalityDataStructureYanMax0 = new CardinalityDataStructureYanMax();
assertNotNull(cardinalityDataStructureYanMax0);

RandomLiteralSelectionStrategy randomLiteralSelectionStrategy0 = new RandomLiteralSelectionStrategy();
assertEquals("random phase selection", randomLiteralSelectionStrategy0.toString());
assertNotNull(randomLiteralSelectionStrategy0);

LevelBasedVarOrderHeap levelBasedVarOrderHeap0 = new LevelBasedVarOrderHeap(randomLiteralSelectionStrategy0);
assertEquals("random phase selection", randomLiteralSelectionStrategy0.toString());
assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
assertNotNull(levelBasedVarOrderHeap0);

RandomWalkDecorator randomWalkDecorator0 = new RandomWalkDecorator(levelBasedVarOrderHeap0, 1791.0);
assertEquals("random phase selection", randomLiteralSelectionStrategy0.toString());
assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
assertEquals(1791.0, randomWalkDecorator0.getProbability(), 0.01);
assertNotNull(randomWalkDecorator0);

randomWalkDecorator0.assignLiteral((-2835));
assertEquals("random phase selection", randomLiteralSelectionStrategy0.toString());
assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
assertEquals(1791.0, randomWalkDecorator0.getProbability(), 0.01);

LubyRestarts lubyRestarts0 = new LubyRestarts();
assertEquals(32, lubyRestarts0.getFactor());
assertEquals(0L, lubyRestarts0.nextRestartNumberOfConflict());
assertEquals(1, lubyRestarts0.luby());
assertTrue(lubyRestarts0.shouldRestart());
assertNotNull(lubyRestarts0);
assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);

boolean boolean0 = lubyRestarts0.shouldRestart();
assertEquals(32, lubyRestarts0.getFactor());
assertEquals(0L, lubyRestarts0.nextRestartNumberOfConflict());
assertEquals(1, lubyRestarts0.luby());
assertTrue(lubyRestarts0.shouldRestart());
assertTrue(boolean0);
assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);

lubyRestarts0.onBackjumpToRootLevel();
assertEquals(32, lubyRestarts0.getFactor());
assertEquals(0L, lubyRestarts0.nextRestartNumberOfConflict());
assertEquals(1, lubyRestarts0.luby());
assertTrue(lubyRestarts0.shouldRestart());
assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);

Solver<CardinalityDataStructureYanMax> solver0 = new Solver<CardinalityDataStructureYanMax>(noLearningNoHeuristics0, cardinalityDataStructureYanMax0, randomWalkDecorator0, lubyRestarts0);
assertEquals("random phase selection", randomLiteralSelectionStrategy0.toString());
assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
assertEquals(1791.0, randomWalkDecorator0.getProbability(), 0.01);
assertEquals(32, lubyRestarts0.getFactor());
assertEquals(0L, lubyRestarts0.nextRestartNumberOfConflict());
assertEquals(1, lubyRestarts0.luby());
assertTrue(lubyRestarts0.shouldRestart());
assertEquals("c ", solver0.getLogPrefix());
assertEquals(0, solver0.currentDecisionLevel());
assertEquals(0, solver0.getPropagationLevel());
assertEquals(1, solver0.nVars());
assertEquals(2, solver0.newVar());
assertEquals(1, solver0.realNumberOfVariables());
assertEquals(0, solver0.nConstraints());
assertFalse(solver0.isSolverKeptHot());
assertFalse(solver0.isVerbose());
assertFalse(solver0.isDBSimplificationAllowed());
assertEquals(2147483, solver0.getTimeout());
assertEquals(0, solver0.decisionLevel());
assertNotNull(solver0);
assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);

solver0.reset();
assertEquals("random phase selection", randomLiteralSelectionStrategy0.toString());
assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
assertEquals(1791.0, randomWalkDecorator0.getProbability(), 0.01);
assertEquals(32, lubyRestarts0.getFactor());
assertEquals(0L, lubyRestarts0.nextRestartNumberOfConflict());
assertEquals(1, lubyRestarts0.luby());
assertTrue(lubyRestarts0.shouldRestart());
assertEquals("c ", solver0.getLogPrefix());
assertEquals(0, solver0.currentDecisionLevel());
assertEquals(0, solver0.getPropagationLevel());
assertEquals(1, solver0.nVars());
assertEquals(2, solver0.newVar());
assertEquals(1, solver0.realNumberOfVariables());
assertEquals(0, solver0.nConstraints());
assertFalse(solver0.isSolverKeptHot());
assertFalse(solver0.isVerbose());
assertFalse(solver0.isDBSimplificationAllowed());
assertEquals(2147483, solver0.getTimeout());
assertEquals(0, solver0.decisionLevel());
assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);

int int0 = solver0.nVars();
assertEquals("random phase selection", randomLiteralSelectionStrategy0.toString());
assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
assertEquals(1791.0, randomWalkDecorator0.getProbability(), 0.01);
assertEquals(32, lubyRestarts0.getFactor());
assertEquals(0L, lubyRestarts0.nextRestartNumberOfConflict());
assertEquals(1, lubyRestarts0.luby());
assertTrue(lubyRestarts0.shouldRestart());
assertEquals("c ", solver0.getLogPrefix());
assertEquals(0, solver0.currentDecisionLevel());
assertEquals(0, solver0.getPropagationLevel());
assertEquals(3, solver0.nVars());
assertEquals(4, solver0.newVar());
assertEquals(3, solver0.realNumberOfVariables());
assertEquals(0, solver0.nConstraints());
assertFalse(solver0.isSolverKeptHot());
assertFalse(solver0.isVerbose());
assertFalse(solver0.isDBSimplificationAllowed());
assertEquals(2147483, solver0.getTimeout());
assertEquals(0, solver0.decisionLevel());
assertEquals(2, int0);
assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);

NoLearningButHeuristics<MixedDataStructureDanielWLConciseBinary> noLearningButHeuristics0 = new NoLearningButHeuristics<MixedDataStructureDanielWLConciseBinary>();
assertNotNull(noLearningButHeuristics0);

MixedDataStructureDanielWLConciseBinary mixedDataStructureDanielWLConciseBinary0 = new MixedDataStructureDanielWLConciseBinary();
assertNotNull(mixedDataStructureDanielWLConciseBinary0);

Glucose21Restarts glucose21Restarts0 = new Glucose21Restarts();
assertEquals(0L, glucose21Restarts0.nextRestartNumberOfConflict());
assertEquals("Glucose 2.1 dynamic restart strategy", glucose21Restarts0.toString());
assertNotNull(glucose21Restarts0);

SearchParams searchParams0 = new SearchParams(58);
assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
assertEquals(58, searchParams0.getInitConflictBound());
assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
assertNotNull(searchParams0);

glucose21Restarts0.onRestart();
assertEquals(0L, glucose21Restarts0.nextRestartNumberOfConflict());
assertEquals("Glucose 2.1 dynamic restart strategy", glucose21Restarts0.toString());

Solver<MixedDataStructureDanielWLConciseBinary> solver1 = new Solver<MixedDataStructureDanielWLConciseBinary>(noLearningButHeuristics0, mixedDataStructureDanielWLConciseBinary0, levelBasedVarOrderHeap0, glucose21Restarts0);
assertFalse(solver1.isDBSimplificationAllowed());
assertFalse(solver1.isVerbose());
assertEquals(0, solver1.getPropagationLevel());
assertEquals("c ", solver1.getLogPrefix());
assertEquals(0, solver1.decisionLevel());
assertEquals(0, solver1.currentDecisionLevel());
assertEquals(1, solver1.realNumberOfVariables());
assertEquals(2147483, solver1.getTimeout());
assertEquals(0, solver1.nConstraints());
assertEquals(2, solver1.newVar());
assertFalse(solver1.isSolverKeptHot());
assertEquals(1, solver1.nVars());
assertEquals("random phase selection", randomLiteralSelectionStrategy0.toString());
assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
assertEquals(0L, glucose21Restarts0.nextRestartNumberOfConflict());
assertEquals("Glucose 2.1 dynamic restart strategy", glucose21Restarts0.toString());
assertNotNull(solver1);

solver1.discardCurrentModel();

[MASTER] 07:01:28.081 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class java.lang.AssertionError: expected:<1> but was:<0>
[MASTER] 07:01:28.100 [logback-1] WARN  JUnitAnalyzer - Failing test:
 PercentLengthLearning<CardinalityDataStructureYanMax> percentLengthLearning0 = new PercentLengthLearning<CardinalityDataStructureYanMax>();
assertEquals(10, percentLengthLearning0.getLimit());
assertNotNull(percentLengthLearning0);

CardinalityDataStructureYanMax cardinalityDataStructureYanMax0 = new CardinalityDataStructureYanMax();
assertNotNull(cardinalityDataStructureYanMax0);

int[] intArray0 = new int[1];
intArray0[0] = (-363);
SubsetVarOrder subsetVarOrder0 = new SubsetVarOrder(intArray0);
assertEquals(1, intArray0.length);
assertEquals(0, subsetVarOrder0.numberOfInterestingVariables());
assertNotNull(subsetVarOrder0);
assertArrayEquals(new int[] {(-363)}, intArray0);

double[] doubleArray0 = subsetVarOrder0.getVariableHeuristics();
assertEquals(1, intArray0.length);
assertEquals(1, doubleArray0.length);
assertEquals(0, subsetVarOrder0.numberOfInterestingVariables());
assertNotNull(doubleArray0);
assertArrayEquals(new int[] {(-363)}, intArray0);
assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);

LubyRestarts lubyRestarts0 = new LubyRestarts();
assertEquals(1, lubyRestarts0.luby());
assertEquals(0L, lubyRestarts0.nextRestartNumberOfConflict());
assertEquals(32, lubyRestarts0.getFactor());
assertTrue(lubyRestarts0.shouldRestart());
assertNotNull(lubyRestarts0);
assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);

SearchParams searchParams0 = new SearchParams();
assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
assertEquals(100, searchParams0.getInitConflictBound());
assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
assertNotNull(searchParams0);

SubsetVarOrder subsetVarOrder1 = new SubsetVarOrder(intArray0);
assertEquals(1, intArray0.length);
assertEquals(0, subsetVarOrder1.numberOfInterestingVariables());
assertNotNull(subsetVarOrder1);
assertArrayEquals(new int[] {(-363)}, intArray0);
assertFalse(subsetVarOrder1.equals((Object)subsetVarOrder0));

PercentLengthLearning<MixedDataStructureDanielHT> percentLengthLearning1 = new PercentLengthLearning<MixedDataStructureDanielHT>();
assertEquals(10, percentLengthLearning1.getLimit());
assertNotNull(percentLengthLearning1);

MixedDataStructureDanielHT mixedDataStructureDanielHT0 = new MixedDataStructureDanielHT();
assertNotNull(mixedDataStructureDanielHT0);

FixedPeriodRestarts fixedPeriodRestarts0 = new FixedPeriodRestarts();
assertEquals(0L, fixedPeriodRestarts0.nextRestartNumberOfConflict());
assertEquals(0L, fixedPeriodRestarts0.getPeriod());
assertTrue(fixedPeriodRestarts0.shouldRestart());
assertNotNull(fixedPeriodRestarts0);

fixedPeriodRestarts0.onRestart();
assertEquals(0L, fixedPeriodRestarts0.nextRestartNumberOfConflict());
assertEquals(0L, fixedPeriodRestarts0.getPeriod());
assertTrue(fixedPeriodRestarts0.shouldRestart());

Solver<MixedDataStructureDanielHT> solver0 = new Solver<MixedDataStructureDanielHT>(percentLengthLearning1, mixedDataStructureDanielHT0, searchParams0, subsetVarOrder1, fixedPeriodRestarts0);
assertEquals(1, intArray0.length);
assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
assertEquals(100, searchParams0.getInitConflictBound());
assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
assertEquals(0, subsetVarOrder1.numberOfInterestingVariables());
assertEquals(10, percentLengthLearning1.getLimit());
assertEquals(0L, fixedPeriodRestarts0.nextRestartNumberOfConflict());
assertEquals(0L, fixedPeriodRestarts0.getPeriod());
assertTrue(fixedPeriodRestarts0.shouldRestart());
assertEquals("c ", solver0.getLogPrefix());
assertFalse(solver0.isDBSimplificationAllowed());
assertEquals(0, solver0.getPropagationLevel());
assertEquals(0, solver0.currentDecisionLevel());
assertFalse(solver0.isVerbose());
assertEquals(2147483, solver0.getTimeout());
assertEquals(0, solver0.nConstraints());
assertEquals(0, solver0.decisionLevel());
assertEquals(1, solver0.realNumberOfVariables());
assertEquals(2, solver0.newVar());
assertFalse(solver0.isSolverKeptHot());
assertEquals(1, solver0.nVars());
assertNotNull(solver0);
assertArrayEquals(new int[] {(-363)}, intArray0);
assertFalse(subsetVarOrder1.equals((Object)subsetVarOrder0));

NoLearningButHeuristics<CardinalityDataStructure> noLearningButHeuristics0 = new NoLearningButHeuristics<CardinalityDataStructure>();
assertNotNull(noLearningButHeuristics0);

CardinalityDataStructure cardinalityDataStructure0 = new CardinalityDataStructure();
assertNotNull(cardinalityDataStructure0);

Solver<CardinalityDataStructure> solver1 = new Solver<CardinalityDataStructure>(noLearningButHeuristics0, cardinalityDataStructure0, searchParams0, subsetVarOrder1, (RestartStrategy) null, (ILogAble) null);
assertEquals(1, intArray0.length);
assertEquals(2147483, solver1.getTimeout());
assertFalse(solver1.isVerbose());
assertFalse(solver1.isDBSimplificationAllowed());
assertEquals(0, solver1.getPropagationLevel());
assertEquals("c ", solver1.getLogPrefix());
assertEquals(0, solver1.currentDecisionLevel());
assertEquals(0, solver1.decisionLevel());
assertEquals(2, solver1.newVar());
assertEquals(1, solver1.realNumberOfVariables());
assertEquals(0, solver1.nConstraints());
assertFalse(solver1.isSolverKeptHot());
assertEquals(1, solver1.nVars());
assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
assertEquals(100, searchParams0.getInitConflictBound());
assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
assertEquals(0, subsetVarOrder1.numberOfInterestingVariables());
assertNotNull(solver1);
assertArrayEquals(new int[] {(-363)}, intArray0);
assertFalse(subsetVarOrder1.equals((Object)subsetVarOrder0));

solver1.model(32);

[MASTER] 07:01:28.966 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class java.lang.AssertionError: expected:<2> but was:<1>
[MASTER] 07:01:28.983 [logback-1] WARN  JUnitAnalyzer - Failing test:
 MiniSATLearning<MixedDataStructureDanielWL> miniSATLearning0 = new MiniSATLearning<MixedDataStructureDanielWL>();
assertEquals("Learn all clauses as in MiniSAT", miniSATLearning0.toString());
assertNotNull(miniSATLearning0);

MixedDataStructureDanielWL mixedDataStructureDanielWL0 = new MixedDataStructureDanielWL();
assertNotNull(mixedDataStructureDanielWL0);

ClauseOnlyLearning<CardinalityDataStructureYanMin> clauseOnlyLearning0 = new ClauseOnlyLearning<CardinalityDataStructureYanMin>();
assertEquals("Limit learning to clauses using watched literals only", clauseOnlyLearning0.toString());
assertNotNull(clauseOnlyLearning0);

CardinalityDataStructureYanMin cardinalityDataStructureYanMin0 = new CardinalityDataStructureYanMin();
assertNotNull(cardinalityDataStructureYanMin0);

NaturalStaticOrder naturalStaticOrder0 = new NaturalStaticOrder();
assertEquals("Natural static ordering", naturalStaticOrder0.toString());
assertNotNull(naturalStaticOrder0);

FixedPeriodRestarts fixedPeriodRestarts0 = new FixedPeriodRestarts();
assertEquals(0L, fixedPeriodRestarts0.nextRestartNumberOfConflict());
assertTrue(fixedPeriodRestarts0.shouldRestart());
assertEquals(0L, fixedPeriodRestarts0.getPeriod());
assertNotNull(fixedPeriodRestarts0);

Solver<CardinalityDataStructureYanMin> solver0 = new Solver<CardinalityDataStructureYanMin>(clauseOnlyLearning0, cardinalityDataStructureYanMin0, naturalStaticOrder0, fixedPeriodRestarts0);
assertEquals("Limit learning to clauses using watched literals only", clauseOnlyLearning0.toString());
assertEquals("Natural static ordering", naturalStaticOrder0.toString());
assertEquals(0L, fixedPeriodRestarts0.nextRestartNumberOfConflict());
assertTrue(fixedPeriodRestarts0.shouldRestart());
assertEquals(0L, fixedPeriodRestarts0.getPeriod());
assertFalse(solver0.isVerbose());
assertEquals(2, solver0.newVar());
assertEquals(0, solver0.decisionLevel());
assertEquals(1, solver0.realNumberOfVariables());
assertEquals(2147483, solver0.getTimeout());
assertEquals(0, solver0.nConstraints());
assertFalse(solver0.isSolverKeptHot());
assertEquals(1, solver0.nVars());
assertFalse(solver0.isDBSimplificationAllowed());
assertEquals("c ", solver0.getLogPrefix());
assertEquals(0, solver0.currentDecisionLevel());
assertEquals(0, solver0.getPropagationLevel());
assertNotNull(solver0);

SearchParams searchParams0 = solver0.getSearchParams();
assertEquals("Limit learning to clauses using watched literals only", clauseOnlyLearning0.toString());
assertEquals("Natural static ordering", naturalStaticOrder0.toString());
assertEquals(0L, fixedPeriodRestarts0.nextRestartNumberOfConflict());
assertTrue(fixedPeriodRestarts0.shouldRestart());
assertEquals(0L, fixedPeriodRestarts0.getPeriod());
assertFalse(solver0.isVerbose());
assertEquals(0, solver0.decisionLevel());
assertEquals(2147483, solver0.getTimeout());
assertEquals(4, solver0.newVar());
assertEquals(3, solver0.realNumberOfVariables());
assertEquals(0, solver0.nConstraints());
assertFalse(solver0.isSolverKeptHot());
assertFalse(solver0.isDBSimplificationAllowed());
assertEquals(3, solver0.nVars());
assertEquals("c ", solver0.getLogPrefix());
assertEquals(0, solver0.currentDecisionLevel());
assertEquals(0, solver0.getPropagationLevel());
assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
assertEquals(100, searchParams0.getInitConflictBound());
assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
assertNotNull(searchParams0);

int int0 = searchParams0.getInitConflictBound();
assertEquals("Limit learning to clauses using watched literals only", clauseOnlyLearning0.toString());
assertEquals("Natural static ordering", naturalStaticOrder0.toString());
assertEquals(0L, fixedPeriodRestarts0.nextRestartNumberOfConflict());
assertTrue(fixedPeriodRestarts0.shouldRestart());
assertEquals(0L, fixedPeriodRestarts0.getPeriod());
assertFalse(solver0.isVerbose());
assertEquals(0, solver0.decisionLevel());
assertEquals(2147483, solver0.getTimeout());
assertEquals(0, solver0.nConstraints());
assertFalse(solver0.isSolverKeptHot());
assertFalse(solver0.isDBSimplificationAllowed());
assertEquals(5, solver0.nVars());
assertEquals("c ", solver0.getLogPrefix());
assertEquals(6, solver0.newVar());
assertEquals(0, solver0.currentDecisionLevel());
assertEquals(5, solver0.realNumberOfVariables());
assertEquals(0, solver0.getPropagationLevel());
assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
assertEquals(100, searchParams0.getInitConflictBound());
assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
assertEquals(100, int0);

SearchParams searchParams1 = solver0.getSearchParams();
assertEquals("Limit learning to clauses using watched literals only", clauseOnlyLearning0.toString());
assertEquals("Natural static ordering", naturalStaticOrder0.toString());
assertEquals(0L, fixedPeriodRestarts0.nextRestartNumberOfConflict());
assertTrue(fixedPeriodRestarts0.shouldRestart());
assertEquals(0L, fixedPeriodRestarts0.getPeriod());
assertFalse(solver0.isVerbose());
assertEquals(0, solver0.decisionLevel());
assertEquals(2147483, solver0.getTimeout());
assertEquals(0, solver0.nConstraints());
assertFalse(solver0.isSolverKeptHot());
assertFalse(solver0.isDBSimplificationAllowed());
assertEquals("c ", solver0.getLogPrefix());
assertEquals(0, solver0.currentDecisionLevel());
assertEquals(7, solver0.nVars());
assertEquals(0, solver0.getPropagationLevel());
assertEquals(8, solver0.newVar());
assertEquals(7, solver0.realNumberOfVariables());
assertEquals(0.999, searchParams1.getClaDecay(), 0.01);
assertEquals(100, searchParams1.getInitConflictBound());
assertEquals(1.5, searchParams1.getConflictBoundIncFactor(), 0.01);
assertEquals(0.95, searchParams1.getVarDecay(), 0.01);
assertNotNull(searchParams1);
assertSame(searchParams1, searchParams0);

searchParams1.setVarDecay(100);
assertEquals("Limit learning to clauses using watched literals only", clauseOnlyLearning0.toString());
assertEquals("Natural static ordering", naturalStaticOrder0.toString());
assertEquals(0L, fixedPeriodRestarts0.nextRestartNumberOfConflict());
assertTrue(fixedPeriodRestarts0.shouldRestart());
assertEquals(0L, fixedPeriodRestarts0.getPeriod());
assertFalse(solver0.isVerbose());
assertEquals(0, solver0.decisionLevel());
assertEquals(2147483, solver0.getTimeout());
assertEquals(0, solver0.nConstraints());
assertFalse(solver0.isSolverKeptHot());
assertFalse(solver0.isDBSimplificationAllowed());
assertEquals(10, solver0.newVar());
assertEquals(9, solver0.realNumberOfVariables());
assertEquals("c ", solver0.getLogPrefix());
assertEquals(0, solver0.currentDecisionLevel());
assertEquals(0, solver0.getPropagationLevel());
assertEquals(9, solver0.nVars());
assertEquals(0.999, searchParams1.getClaDecay(), 0.01);
assertEquals(100, searchParams1.getInitConflictBound());
assertEquals(1.5, searchParams1.getConflictBoundIncFactor(), 0.01);
assertEquals(100.0, searchParams1.getVarDecay(), 0.01);
assertSame(searchParams1, searchParams0);

BasicLauncher<Solver<MixedDataStructureDanielWLConciseBinary>> basicLauncher0 = new BasicLauncher<Solver<MixedDataStructureDanielWLConciseBinary>>((ASolverFactory<Solver<MixedDataStructureDanielWLConciseBinary>>) null);
assertFalse(basicLauncher0.isSilent());
assertEquals(0L, basicLauncher0.getBeginTime());
assertEquals(ExitCode.UNKNOWN, basicLauncher0.getExitCode());
assertNotNull(basicLauncher0);

boolean boolean0 = solver0.isSatisfiable(false);
assertEquals("Limit learning to clauses using watched literals only", clauseOnlyLearning0.toString());
assertEquals("Natural static ordering", naturalStaticOrder0.toString());
assertEquals(0L, fixedPeriodRestarts0.nextRestartNumberOfConflict());
assertTrue(fixedPeriodRestarts0.shouldRestart());
assertEquals(0L, fixedPeriodRestarts0.getPeriod());
assertFalse(solver0.isVerbose());
assertEquals(0, solver0.decisionLevel());
assertEquals(11, solver0.nVars());
assertEquals(2147483, solver0.getTimeout());
assertEquals(0, solver0.nConstraints());
assertFalse(solver0.isSolverKeptHot());
assertFalse(solver0.isDBSimplificationAllowed());
assertEquals(12, solver0.newVar());
assertEquals(11, solver0.realNumberOfVariables());
assertEquals("c ", solver0.getLogPrefix());
assertEquals(0, solver0.currentDecisionLevel());
assertEquals(0, solver0.getPropagationLevel());
assertTrue(boolean0);

basicLauncher0.log("ALGO2");
assertFalse(basicLauncher0.isSilent());
assertEquals(0L, basicLauncher0.getBeginTime());
assertEquals(ExitCode.UNKNOWN, basicLauncher0.getExitCode());

basicLauncher0.log((String) null);
assertFalse(basicLauncher0.isSilent());
assertEquals(0L, basicLauncher0.getBeginTime());
assertEquals(ExitCode.UNKNOWN, basicLauncher0.getExitCode());

basicLauncher0.log((String) null);
assertFalse(basicLauncher0.isSilent());
assertEquals(0L, basicLauncher0.getBeginTime());
assertEquals(ExitCode.UNKNOWN, basicLauncher0.getExitCode());

Solver<MixedDataStructureDanielWL> solver1 = new Solver<MixedDataStructureDanielWL>(miniSATLearning0, mixedDataStructureDanielWL0, searchParams0, naturalStaticOrder0, fixedPeriodRestarts0);
assertEquals(0, solver1.decisionLevel());
assertEquals(1, solver1.realNumberOfVariables());
assertEquals(0, solver1.getPropagationLevel());
assertFalse(solver1.isVerbose());
assertEquals(2, solver1.newVar());
assertFalse(solver1.isSolverKeptHot());
assertEquals(1, solver1.nVars());
assertEquals("c ", solver1.getLogPrefix());
assertEquals(0, solver1.nConstraints());
assertEquals(2147483, solver1.getTimeout());
assertEquals(0, solver1.currentDecisionLevel());
assertFalse(solver1.isDBSimplificationAllowed());
assertEquals("Learn all clauses as in MiniSAT", miniSATLearning0.toString());
assertEquals("Limit learning to clauses using watched literals only", clauseOnlyLearning0.toString());
assertEquals("Natural static ordering", naturalStaticOrder0.toString());
assertEquals(0L, fixedPeriodRestarts0.nextRestartNumberOfConflict());
assertTrue(fixedPeriodRestarts0.shouldRestart());
assertEquals(0L, fixedPeriodRestarts0.getPeriod());
assertFalse(solver0.isVerbose());
assertEquals(0, solver0.decisionLevel());
assertEquals(2147483, solver0.getTimeout());
assertEquals(13, solver0.nVars());
assertEquals(14, solver0.newVar());
assertEquals(0, solver0.nConstraints());
assertEquals(13, solver0.realNumberOfVariables());
assertFalse(solver0.isSolverKeptHot());
assertFalse(solver0.isDBSimplificationAllowed());
assertEquals("c ", solver0.getLogPrefix());
assertEquals(0, solver0.currentDecisionLevel());
assertEquals(0, solver0.getPropagationLevel());
assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
assertEquals(100, searchParams0.getInitConflictBound());
assertEquals(100.0, searchParams0.getVarDecay(), 0.01);
assertNotNull(solver1);

SearchParams searchParams2 = solver1.getSearchParams();
assertEquals(0, solver1.decisionLevel());
assertEquals(0, solver1.getPropagationLevel());
assertFalse(solver1.isVerbose());
assertFalse(solver1.isSolverKeptHot());
assertEquals("c ", solver1.getLogPrefix());
assertEquals(0, solver1.nConstraints());
assertEquals(3, solver1.nVars());
assertEquals(3, solver1.realNumberOfVariables());
assertEquals(4, solver1.newVar());
assertEquals(2147483, solver1.getTimeout());
assertEquals(0, solver1.currentDecisionLevel());
assertFalse(solver1.isDBSimplificationAllowed());
assertEquals("Learn all clauses as in MiniSAT", miniSATLearning0.toString());
assertEquals(0.999, searchParams2.getClaDecay(), 0.01);
assertEquals(1.5, searchParams2.getConflictBoundIncFactor(), 0.01);
assertEquals(100, searchParams2.getInitConflictBound());
assertEquals(100.0, searchParams2.getVarDecay(), 0.01);
assertEquals("Limit learning to clauses using watched literals only", clauseOnlyLearning0.toString());
assertEquals("Natural static ordering", naturalStaticOrder0.toString());
assertEquals(0L, fixedPeriodRestarts0.nextRestartNumberOfConflict());
assertTrue(fixedPeriodRestarts0.shouldRestart());
assertEquals(0L, fixedPeriodRestarts0.getPeriod());
assertFalse(solver0.isVerbose());
assertEquals(0, solver0.decisionLevel());
assertEquals(2147483, solver0.getTimeout());
assertEquals(0, solver0.nConstraints());
assertEquals(15, solver0.nVars());
assertEquals(16, solver0.newVar());
assertFalse(solver0.isSolverKeptHot());
assertEquals(15, solver0.realNumberOfVariables());
assertFalse(solver0.isDBSimplificationAllowed());
assertEquals("c ", solver0.getLogPrefix());
assertEquals(0, solver0.currentDecisionLevel());
assertEquals(0, solver0.getPropagationLevel());
assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
assertEquals(100, searchParams0.getInitConflictBound());
assertEquals(100.0, searchParams0.getVarDecay(), 0.01);
assertNotNull(searchParams2);
assertSame(searchParams2, searchParams0);
assertSame(searchParams2, searchParams1);
assertSame(searchParams0, searchParams1);
assertSame(searchParams0, searchParams2);

PercentLengthLearning<CardinalityDataStructureYanMax> percentLengthLearning0 = new PercentLengthLearning<CardinalityDataStructureYanMax>();
assertEquals(10, percentLengthLearning0.getLimit());
assertNotNull(percentLengthLearning0);

CardinalityDataStructureYanMax cardinalityDataStructureYanMax0 = new CardinalityDataStructureYanMax();
assertNotNull(cardinalityDataStructureYanMax0);

Solver<CardinalityDataStructureYanMax> solver2 = new Solver<CardinalityDataStructureYanMax>(percentLengthLearning0, cardinalityDataStructureYanMax0, searchParams0, naturalStaticOrder0, fixedPeriodRestarts0, basicLauncher0);
assertEquals(10, percentLengthLearning0.getLimit());
assertEquals("Limit learning to clauses using watched literals only", clauseOnlyLearning0.toString());
assertFalse(solver2.isSolverKeptHot());
assertEquals(2147483, solver2.getTimeout());
assertEquals(0, solver2.decisionLevel());
assertEquals(0, solver2.getPropagationLevel());
assertFalse(solver2.isDBSimplificationAllowed());
assertFalse(solver2.isVerbose());
assertEquals(0, solver2.currentDecisionLevel());
assertEquals(1, solver2.nVars());
assertEquals("c ", solver2.getLogPrefix());
assertEquals(2, solver2.newVar());
assertEquals(0, solver2.nConstraints());
assertEquals(1, solver2.realNumberOfVariables());
assertEquals("Natural static ordering", naturalStaticOrder0.toString());
assertEquals(0L, fixedPeriodRestarts0.nextRestartNumberOfConflict());
assertTrue(fixedPeriodRestarts0.shouldRestart());
assertEquals(0L, fixedPeriodRestarts0.getPeriod());
assertFalse(solver0.isVerbose());
assertEquals(18, solver0.newVar());
assertEquals(0, solver0.decisionLevel());
assertEquals(17, solver0.realNumberOfVariables());
assertEquals(2147483, solver0.getTimeout());
assertEquals(0, solver0.nConstraints());
assertFalse(solver0.isSolverKeptHot());
assertEquals(17, solver0.nVars());
assertFalse(solver0.isDBSimplificationAllowed());
assertEquals("c ", solver0.getLogPrefix());
assertEquals(0, solver0.currentDecisionLevel());
assertEquals(0, solver0.getPropagationLevel());
assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
assertEquals(100, searchParams0.getInitConflictBound());
assertEquals(100.0, searchParams0.getVarDecay(), 0.01);
assertFalse(basicLauncher0.isSilent());
assertEquals(0L, basicLauncher0.getBeginTime());
assertEquals(ExitCode.UNKNOWN, basicLauncher0.getExitCode());
assertNotNull(solver2);

int int1 = 1054;
solver2.primeImplicant(1054);

[MASTER] 07:01:29.470 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class java.lang.AssertionError: expected:<2> but was:<1>
[MASTER] 07:01:29.471 [logback-1] WARN  JUnitAnalyzer - Failing test:
 MiniSATLearning<MixedDataStructureDanielWLConciseBinary> miniSATLearning0 = new MiniSATLearning<MixedDataStructureDanielWLConciseBinary>();
assertEquals("Learn all clauses as in MiniSAT", miniSATLearning0.toString());
assertNotNull(miniSATLearning0);

MixedDataStructureDanielWLConciseBinary mixedDataStructureDanielWLConciseBinary0 = new MixedDataStructureDanielWLConciseBinary();
assertNotNull(mixedDataStructureDanielWLConciseBinary0);

RandomLiteralSelectionStrategy randomLiteralSelectionStrategy0 = new RandomLiteralSelectionStrategy();
assertEquals("random phase selection", randomLiteralSelectionStrategy0.toString());
assertNotNull(randomLiteralSelectionStrategy0);

LevelBasedVarOrderHeap levelBasedVarOrderHeap0 = new LevelBasedVarOrderHeap(randomLiteralSelectionStrategy0);
assertEquals("random phase selection", randomLiteralSelectionStrategy0.toString());
assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
assertNotNull(levelBasedVarOrderHeap0);

boolean boolean0 = FileSystemHandling.createFolder((EvoSuiteFile) null);
assertFalse(boolean0);

RandomWalkDecorator randomWalkDecorator0 = new RandomWalkDecorator(levelBasedVarOrderHeap0, 1791.0);
assertEquals("random phase selection", randomLiteralSelectionStrategy0.toString());
assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
assertEquals(1791.0, randomWalkDecorator0.getProbability(), 0.01);
assertNotNull(randomWalkDecorator0);

int int0 = randomLiteralSelectionStrategy0.select(6);
assertEquals("random phase selection", randomLiteralSelectionStrategy0.toString());
assertEquals(13, int0);

Glucose21Restarts glucose21Restarts0 = new Glucose21Restarts();
assertEquals(0L, glucose21Restarts0.nextRestartNumberOfConflict());
assertEquals("Glucose 2.1 dynamic restart strategy", glucose21Restarts0.toString());
assertNotNull(glucose21Restarts0);

levelBasedVarOrderHeap0.assignLiteral(13);
assertEquals("random phase selection", randomLiteralSelectionStrategy0.toString());
assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());

LevelBasedVarOrderHeap levelBasedVarOrderHeap1 = new LevelBasedVarOrderHeap();
assertEquals(0, levelBasedVarOrderHeap1.numberOfInterestingVariables());
assertNotNull(levelBasedVarOrderHeap1);
assertFalse(levelBasedVarOrderHeap1.equals((Object)levelBasedVarOrderHeap0));

CardinalityDataStructureYanMin cardinalityDataStructureYanMin0 = new CardinalityDataStructureYanMin();
assertNotNull(cardinalityDataStructureYanMin0);

ActiveLearning<MixedDataStructureDanielHT> activeLearning0 = new ActiveLearning<MixedDataStructureDanielHT>();
assertEquals(0.95, activeLearning0.getActivityPercent(), 0.01);
assertEquals(0, activeLearning0.getLimit());
assertNotNull(activeLearning0);

MixedDataStructureDanielHT mixedDataStructureDanielHT0 = new MixedDataStructureDanielHT();
assertNotNull(mixedDataStructureDanielHT0);

Solver<MixedDataStructureDanielHT> solver0 = new Solver<MixedDataStructureDanielHT>(activeLearning0, mixedDataStructureDanielHT0, (SearchParams) null, randomWalkDecorator0, (RestartStrategy) null);
assertEquals("random phase selection", randomLiteralSelectionStrategy0.toString());
assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
assertEquals(1791.0, randomWalkDecorator0.getProbability(), 0.01);
assertEquals(0.95, activeLearning0.getActivityPercent(), 0.01);
assertEquals(0, activeLearning0.getLimit());
assertFalse(solver0.isVerbose());
assertEquals(2, solver0.newVar());
assertEquals(0, solver0.getPropagationLevel());
assertEquals(0, solver0.nConstraints());
assertEquals(0, solver0.currentDecisionLevel());
assertEquals(1, solver0.realNumberOfVariables());
assertFalse(solver0.isSolverKeptHot());
assertEquals(1, solver0.nVars());
assertEquals(2147483, solver0.getTimeout());
assertEquals(0, solver0.decisionLevel());
assertFalse(solver0.isDBSimplificationAllowed());
assertEquals("c ", solver0.getLogPrefix());
assertNotNull(solver0);
assertFalse(levelBasedVarOrderHeap0.equals((Object)levelBasedVarOrderHeap1));

solver0.findModel();

[MASTER] 07:01:30.870 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class java.lang.AssertionError: expected:<1> but was:<0>
[MASTER] 07:01:30.873 [logback-1] WARN  JUnitAnalyzer - Failing test:
 ClauseOnlyLearning<CardinalityDataStructureYanMin> clauseOnlyLearning0 = new ClauseOnlyLearning<CardinalityDataStructureYanMin>();
assertEquals("Limit learning to clauses using watched literals only", clauseOnlyLearning0.toString());
assertNotNull(clauseOnlyLearning0);

CardinalityDataStructureYanMin cardinalityDataStructureYanMin0 = new CardinalityDataStructureYanMin();
assertNotNull(cardinalityDataStructureYanMin0);

SearchParams searchParams0 = new SearchParams();
assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
assertEquals(100, searchParams0.getInitConflictBound());
assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
assertNotNull(searchParams0);

VarOrderHeap varOrderHeap0 = mock(VarOrderHeap.class, new ViolatedAssumptionAnswer());
doReturn((String) null).when(varOrderHeap0).toString();
TabuListDecorator tabuListDecorator0 = new TabuListDecorator(varOrderHeap0);
assertNotNull(tabuListDecorator0);

LubyRestarts lubyRestarts0 = new LubyRestarts();
assertEquals(1, lubyRestarts0.luby());
assertEquals(32, lubyRestarts0.getFactor());
assertEquals(0L, lubyRestarts0.nextRestartNumberOfConflict());
assertTrue(lubyRestarts0.shouldRestart());
assertNotNull(lubyRestarts0);
assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);

boolean boolean0 = lubyRestarts0.shouldRestart();
assertEquals(1, lubyRestarts0.luby());
assertEquals(32, lubyRestarts0.getFactor());
assertEquals(0L, lubyRestarts0.nextRestartNumberOfConflict());
assertTrue(lubyRestarts0.shouldRestart());
assertTrue(boolean0);
assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);

lubyRestarts0.onBackjumpToRootLevel();
assertEquals(1, lubyRestarts0.luby());
assertEquals(32, lubyRestarts0.getFactor());
assertEquals(0L, lubyRestarts0.nextRestartNumberOfConflict());
assertTrue(lubyRestarts0.shouldRestart());
assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);

BasicLauncher<Solver<MixedDataStructureDanielWLConciseBinary>> basicLauncher0 = new BasicLauncher<Solver<MixedDataStructureDanielWLConciseBinary>>((ASolverFactory<Solver<MixedDataStructureDanielWLConciseBinary>>) null);
assertEquals(0L, basicLauncher0.getBeginTime());
assertFalse(basicLauncher0.isSilent());
assertEquals(ExitCode.UNKNOWN, basicLauncher0.getExitCode());
assertNotNull(basicLauncher0);

basicLauncher0.log("");
assertEquals(0L, basicLauncher0.getBeginTime());
assertFalse(basicLauncher0.isSilent());
assertEquals(ExitCode.UNKNOWN, basicLauncher0.getExitCode());

basicLauncher0.log("");
assertEquals(0L, basicLauncher0.getBeginTime());
assertFalse(basicLauncher0.isSilent());
assertEquals(ExitCode.UNKNOWN, basicLauncher0.getExitCode());

basicLauncher0.log("");
assertEquals(0L, basicLauncher0.getBeginTime());
assertFalse(basicLauncher0.isSilent());
assertEquals(ExitCode.UNKNOWN, basicLauncher0.getExitCode());

Solver<CardinalityDataStructureYanMin> solver0 = new Solver<CardinalityDataStructureYanMin>(clauseOnlyLearning0, cardinalityDataStructureYanMin0, searchParams0, tabuListDecorator0, lubyRestarts0, basicLauncher0);
assertEquals("Limit learning to clauses using watched literals only", clauseOnlyLearning0.toString());
assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
assertEquals(100, searchParams0.getInitConflictBound());
assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
assertEquals(1, lubyRestarts0.luby());
assertEquals(32, lubyRestarts0.getFactor());
assertEquals(0L, lubyRestarts0.nextRestartNumberOfConflict());
assertTrue(lubyRestarts0.shouldRestart());
assertEquals(0L, basicLauncher0.getBeginTime());
assertFalse(basicLauncher0.isSilent());
assertEquals(ExitCode.UNKNOWN, basicLauncher0.getExitCode());
assertEquals(1, solver0.nVars());
assertEquals("c ", solver0.getLogPrefix());
assertEquals(0, solver0.getPropagationLevel());
assertEquals(0, solver0.decisionLevel());
assertFalse(solver0.isVerbose());
assertEquals(0, solver0.currentDecisionLevel());
assertFalse(solver0.isDBSimplificationAllowed());
assertEquals(2147483, solver0.getTimeout());
assertEquals(0, solver0.nConstraints());
assertFalse(solver0.isSolverKeptHot());
assertEquals(1, solver0.realNumberOfVariables());
assertEquals(2, solver0.newVar());
assertNotNull(solver0);
assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);

int int0 = solver0.currentDecisionLevel();
assertEquals("Limit learning to clauses using watched literals only", clauseOnlyLearning0.toString());
assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
assertEquals(100, searchParams0.getInitConflictBound());
assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
assertEquals(1, lubyRestarts0.luby());
assertEquals(32, lubyRestarts0.getFactor());
assertEquals(0L, lubyRestarts0.nextRestartNumberOfConflict());
assertTrue(lubyRestarts0.shouldRestart());
assertEquals(0L, basicLauncher0.getBeginTime());
assertFalse(basicLauncher0.isSilent());
assertEquals(ExitCode.UNKNOWN, basicLauncher0.getExitCode());
assertEquals("c ", solver0.getLogPrefix());
assertEquals(0, solver0.getPropagationLevel());
assertEquals(0, solver0.decisionLevel());
assertFalse(solver0.isVerbose());
assertEquals(0, solver0.currentDecisionLevel());
assertFalse(solver0.isDBSimplificationAllowed());
assertEquals(2147483, solver0.getTimeout());
assertEquals(0, solver0.nConstraints());
assertFalse(solver0.isSolverKeptHot());
assertEquals(3, solver0.nVars());
assertEquals(3, solver0.realNumberOfVariables());
assertEquals(4, solver0.newVar());
assertEquals(0, int0);
assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);

NoLearningButHeuristics<CardinalityDataStructureYanMax> noLearningButHeuristics0 = new NoLearningButHeuristics<CardinalityDataStructureYanMax>();
assertNotNull(noLearningButHeuristics0);

CardinalityDataStructureYanMax cardinalityDataStructureYanMax0 = new CardinalityDataStructureYanMax();
assertNotNull(cardinalityDataStructureYanMax0);

Solver<CardinalityDataStructureYanMax> solver1 = new Solver<CardinalityDataStructureYanMax>(noLearningButHeuristics0, cardinalityDataStructureYanMax0, tabuListDecorator0, lubyRestarts0);
assertEquals(2, solver1.newVar());
assertEquals(0, solver1.getPropagationLevel());
assertEquals(0, solver1.nConstraints());
assertFalse(solver1.isVerbose());
assertEquals(0, solver1.currentDecisionLevel());
assertEquals(1, solver1.realNumberOfVariables());
assertEquals("c ", solver1.getLogPrefix());
assertFalse(solver1.isDBSimplificationAllowed());
assertFalse(solver1.isSolverKeptHot());
assertEquals(1, solver1.nVars());
assertEquals(2147483, solver1.getTimeout());
assertEquals(0, solver1.decisionLevel());
assertEquals(1, lubyRestarts0.luby());
assertEquals(32, lubyRestarts0.getFactor());
assertEquals(0L, lubyRestarts0.nextRestartNumberOfConflict());
assertTrue(lubyRestarts0.shouldRestart());
assertNotNull(solver1);
assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);

IOrder iOrder0 = solver1.getOrder();
assertEquals(0, solver1.getPropagationLevel());
assertEquals(4, solver1.newVar());
assertEquals(0, solver1.nConstraints());
assertFalse(solver1.isVerbose());
assertEquals(0, solver1.currentDecisionLevel());
assertEquals(3, solver1.realNumberOfVariables());
assertEquals("c ", solver1.getLogPrefix());
assertFalse(solver1.isDBSimplificationAllowed());
assertEquals(3, solver1.nVars());
assertFalse(solver1.isSolverKeptHot());
assertEquals(2147483, solver1.getTimeout());
assertEquals(0, solver1.decisionLevel());
assertEquals(1, lubyRestarts0.luby());
assertEquals(32, lubyRestarts0.getFactor());
assertEquals(0L, lubyRestarts0.nextRestartNumberOfConflict());
assertTrue(lubyRestarts0.shouldRestart());
assertNotNull(iOrder0);
assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
assertSame(iOrder0, tabuListDecorator0);
assertSame(tabuListDecorator0, iOrder0);


[MASTER] 07:01:31.376 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class java.lang.AssertionError: expected:<1> but was:<0>
[MASTER] 07:01:31.384 [logback-1] WARN  JUnitAnalyzer - Failing test:
 ClauseOnlyLearning<CardinalityDataStructureYanMax> clauseOnlyLearning0 = new ClauseOnlyLearning<CardinalityDataStructureYanMax>();
assertEquals("Limit learning to clauses using watched literals only", clauseOnlyLearning0.toString());
assertNotNull(clauseOnlyLearning0);

CardinalityDataStructureYanMax cardinalityDataStructureYanMax0 = new CardinalityDataStructureYanMax();
assertNotNull(cardinalityDataStructureYanMax0);

int[] intArray0 = new int[1];
intArray0[0] = (-1054);
SubsetVarOrder subsetVarOrder0 = new SubsetVarOrder(intArray0);
assertEquals(1, intArray0.length);
assertEquals(0, subsetVarOrder0.numberOfInterestingVariables());
assertNotNull(subsetVarOrder0);
assertArrayEquals(new int[] {(-1054)}, intArray0);

double[] doubleArray0 = subsetVarOrder0.getVariableHeuristics();
assertEquals(1, intArray0.length);
assertEquals(1, doubleArray0.length);
assertEquals(0, subsetVarOrder0.numberOfInterestingVariables());
assertNotNull(doubleArray0);
assertArrayEquals(new int[] {(-1054)}, intArray0);
assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);

ArminRestarts arminRestarts0 = new ArminRestarts();
assertEquals("Armin Biere (Picosat) restarts strategy", arminRestarts0.toString());
assertEquals(0L, arminRestarts0.nextRestartNumberOfConflict());
assertTrue(arminRestarts0.shouldRestart());
assertNotNull(arminRestarts0);

Solver<CardinalityDataStructureYanMax> solver0 = new Solver<CardinalityDataStructureYanMax>(clauseOnlyLearning0, cardinalityDataStructureYanMax0, subsetVarOrder0, arminRestarts0);
assertEquals(1, intArray0.length);
assertEquals("Limit learning to clauses using watched literals only", clauseOnlyLearning0.toString());
assertEquals(0, subsetVarOrder0.numberOfInterestingVariables());
assertEquals("Armin Biere (Picosat) restarts strategy", arminRestarts0.toString());
assertEquals(0L, arminRestarts0.nextRestartNumberOfConflict());
assertTrue(arminRestarts0.shouldRestart());
assertEquals(0, solver0.decisionLevel());
assertEquals(1, solver0.realNumberOfVariables());
assertEquals(0, solver0.getPropagationLevel());
assertFalse(solver0.isVerbose());
assertEquals(2, solver0.newVar());
assertEquals(0, solver0.currentDecisionLevel());
assertEquals("c ", solver0.getLogPrefix());
assertFalse(solver0.isDBSimplificationAllowed());
assertFalse(solver0.isSolverKeptHot());
assertEquals(1, solver0.nVars());
assertEquals(2147483, solver0.getTimeout());
assertEquals(0, solver0.nConstraints());
assertNotNull(solver0);
assertArrayEquals(new int[] {(-1054)}, intArray0);

boolean boolean0 = solver0.isVerbose();
assertEquals(1, intArray0.length);
assertEquals("Limit learning to clauses using watched literals only", clauseOnlyLearning0.toString());
assertEquals(0, subsetVarOrder0.numberOfInterestingVariables());
assertEquals("Armin Biere (Picosat) restarts strategy", arminRestarts0.toString());
assertEquals(0L, arminRestarts0.nextRestartNumberOfConflict());
assertTrue(arminRestarts0.shouldRestart());
assertEquals(0, solver0.decisionLevel());
assertEquals(0, solver0.getPropagationLevel());
assertFalse(solver0.isVerbose());
assertEquals(0, solver0.currentDecisionLevel());
assertEquals(3, solver0.realNumberOfVariables());
assertEquals(4, solver0.newVar());
assertEquals("c ", solver0.getLogPrefix());
assertEquals(3, solver0.nVars());
assertFalse(solver0.isDBSimplificationAllowed());
assertFalse(solver0.isSolverKeptHot());
assertEquals(2147483, solver0.getTimeout());
assertEquals(0, solver0.nConstraints());
assertFalse(boolean0);
assertArrayEquals(new int[] {(-1054)}, intArray0);

ActiveLearning<CardinalityDataStructure> activeLearning0 = new ActiveLearning<CardinalityDataStructure>();
assertEquals(0, activeLearning0.getLimit());
assertEquals(0.95, activeLearning0.getActivityPercent(), 0.01);
assertNotNull(activeLearning0);

CardinalityDataStructure cardinalityDataStructure0 = new CardinalityDataStructure();
assertNotNull(cardinalityDataStructure0);

Solver<CardinalityDataStructure> solver1 = new Solver<CardinalityDataStructure>(activeLearning0, cardinalityDataStructure0, subsetVarOrder0, arminRestarts0);
assertEquals(1, intArray0.length);
assertEquals(0, subsetVarOrder0.numberOfInterestingVariables());
assertEquals("Armin Biere (Picosat) restarts strategy", arminRestarts0.toString());
assertEquals(0L, arminRestarts0.nextRestartNumberOfConflict());
assertTrue(arminRestarts0.shouldRestart());
assertEquals(0, activeLearning0.getLimit());
assertEquals(0.95, activeLearning0.getActivityPercent(), 0.01);
assertEquals(2, solver1.newVar());
assertEquals(1, solver1.realNumberOfVariables());
assertEquals(0, solver1.getPropagationLevel());
assertEquals(0, solver1.decisionLevel());
assertFalse(solver1.isVerbose());
assertEquals(2147483, solver1.getTimeout());
assertEquals(0, solver1.currentDecisionLevel());
assertFalse(solver1.isDBSimplificationAllowed());
assertFalse(solver1.isSolverKeptHot());
assertEquals(1, solver1.nVars());
assertEquals("c ", solver1.getLogPrefix());
assertEquals(0, solver1.nConstraints());
assertNotNull(solver1);
assertArrayEquals(new int[] {(-1054)}, intArray0);

boolean boolean1 = solver1.isNeedToReduceDB();
assertEquals(1, intArray0.length);
assertEquals(0, subsetVarOrder0.numberOfInterestingVariables());
assertEquals("Armin Biere (Picosat) restarts strategy", arminRestarts0.toString());
assertEquals(0L, arminRestarts0.nextRestartNumberOfConflict());
assertTrue(arminRestarts0.shouldRestart());
assertEquals(0, activeLearning0.getLimit());
assertEquals(0.95, activeLearning0.getActivityPercent(), 0.01);
assertEquals(0, solver1.getPropagationLevel());
assertEquals(0, solver1.decisionLevel());
assertFalse(solver1.isVerbose());
assertEquals(2147483, solver1.getTimeout());
assertEquals(0, solver1.currentDecisionLevel());
assertFalse(solver1.isDBSimplificationAllowed());
assertFalse(solver1.isSolverKeptHot());
assertEquals("c ", solver1.getLogPrefix());
assertEquals(0, solver1.nConstraints());
assertEquals(4, solver1.newVar());
assertEquals(3, solver1.nVars());
assertEquals(3, solver1.realNumberOfVariables());
assertFalse(boolean1);
assertArrayEquals(new int[] {(-1054)}, intArray0);
assertTrue(boolean1 == boolean0);


[MASTER] 07:01:31.906 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class java.lang.AssertionError: expected:<2> but was:<1>
[MASTER] 07:01:31.908 [logback-1] WARN  JUnitAnalyzer - Failing test:
 PercentLengthLearning<CardinalityDataStructureYanMax> percentLengthLearning0 = new PercentLengthLearning<CardinalityDataStructureYanMax>();
assertEquals(10, percentLengthLearning0.getLimit());
assertNotNull(percentLengthLearning0);

CardinalityDataStructureYanMax cardinalityDataStructureYanMax0 = new CardinalityDataStructureYanMax();
assertNotNull(cardinalityDataStructureYanMax0);

int[] intArray0 = new int[1];
SubsetVarOrder subsetVarOrder0 = new SubsetVarOrder(intArray0);
assertEquals(1, intArray0.length);
assertEquals(0, subsetVarOrder0.numberOfInterestingVariables());
assertNotNull(subsetVarOrder0);
assertArrayEquals(new int[] {0}, intArray0);

double[] doubleArray0 = subsetVarOrder0.getVariableHeuristics();
assertEquals(1, intArray0.length);
assertEquals(1, doubleArray0.length);
assertEquals(0, subsetVarOrder0.numberOfInterestingVariables());
assertNotNull(doubleArray0);
assertArrayEquals(new int[] {0}, intArray0);
assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);

LubyRestarts lubyRestarts0 = new LubyRestarts(0);
assertEquals(0, lubyRestarts0.getFactor());
assertTrue(lubyRestarts0.shouldRestart());
assertEquals(1, lubyRestarts0.luby());
assertEquals(0L, lubyRestarts0.nextRestartNumberOfConflict());
assertNotNull(lubyRestarts0);
assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);

Solver<CardinalityDataStructureYanMax> solver0 = new Solver<CardinalityDataStructureYanMax>(percentLengthLearning0, cardinalityDataStructureYanMax0, subsetVarOrder0, lubyRestarts0);
assertEquals(1, intArray0.length);
assertEquals(10, percentLengthLearning0.getLimit());
assertEquals(0, subsetVarOrder0.numberOfInterestingVariables());
assertEquals(0, lubyRestarts0.getFactor());
assertTrue(lubyRestarts0.shouldRestart());
assertEquals(1, lubyRestarts0.luby());
assertEquals(0L, lubyRestarts0.nextRestartNumberOfConflict());
assertEquals(0, solver0.getPropagationLevel());
assertEquals(0, solver0.decisionLevel());
assertEquals(2, solver0.newVar());
assertEquals("c ", solver0.getLogPrefix());
assertEquals(2147483, solver0.getTimeout());
assertFalse(solver0.isVerbose());
assertEquals(0, solver0.currentDecisionLevel());
assertFalse(solver0.isDBSimplificationAllowed());
assertEquals(0, solver0.nConstraints());
assertFalse(solver0.isSolverKeptHot());
assertEquals(1, solver0.nVars());
assertEquals(1, solver0.realNumberOfVariables());
assertNotNull(solver0);
assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
assertArrayEquals(new int[] {0}, intArray0);

NoLearningButHeuristics<MixedDataStructureDanielWLConciseBinary> noLearningButHeuristics0 = new NoLearningButHeuristics<MixedDataStructureDanielWLConciseBinary>();
assertNotNull(noLearningButHeuristics0);

MixedDataStructureDanielWLConciseBinary mixedDataStructureDanielWLConciseBinary0 = new MixedDataStructureDanielWLConciseBinary();
assertNotNull(mixedDataStructureDanielWLConciseBinary0);

Solver<MixedDataStructureDanielWLConciseBinary> solver1 = new Solver<MixedDataStructureDanielWLConciseBinary>(noLearningButHeuristics0, mixedDataStructureDanielWLConciseBinary0, subsetVarOrder0, lubyRestarts0);
assertEquals(1, intArray0.length);
assertEquals(0, subsetVarOrder0.numberOfInterestingVariables());
assertEquals(0, lubyRestarts0.getFactor());
assertTrue(lubyRestarts0.shouldRestart());
assertEquals(1, lubyRestarts0.luby());
assertEquals(0L, lubyRestarts0.nextRestartNumberOfConflict());
assertEquals(0, solver1.nConstraints());
assertFalse(solver1.isSolverKeptHot());
assertFalse(solver1.isDBSimplificationAllowed());
assertEquals(0, solver1.decisionLevel());
assertEquals(2147483, solver1.getTimeout());
assertEquals(0, solver1.currentDecisionLevel());
assertEquals(1, solver1.nVars());
assertEquals(1, solver1.realNumberOfVariables());
assertEquals(0, solver1.getPropagationLevel());
assertFalse(solver1.isVerbose());
assertEquals(2, solver1.newVar());
assertEquals("c ", solver1.getLogPrefix());
assertNotNull(solver1);
assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
assertArrayEquals(new int[] {0}, intArray0);

solver1.getLiteralsPropagatedAt(0);

[MASTER] 07:01:32.387 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class java.lang.AssertionError: expected:<1> but was:<0>
[MASTER] 07:01:32.389 [logback-1] WARN  JUnitAnalyzer - Failing test:
 MiniSATLearning<CardinalityDataStructureYanMin> miniSATLearning0 = new MiniSATLearning<CardinalityDataStructureYanMin>();
assertEquals("Learn all clauses as in MiniSAT", miniSATLearning0.toString());
assertNotNull(miniSATLearning0);

CardinalityDataStructureYanMin cardinalityDataStructureYanMin0 = new CardinalityDataStructureYanMin();
assertNotNull(cardinalityDataStructureYanMin0);

RandomLiteralSelectionStrategy randomLiteralSelectionStrategy0 = new RandomLiteralSelectionStrategy();
assertEquals("random phase selection", randomLiteralSelectionStrategy0.toString());
assertNotNull(randomLiteralSelectionStrategy0);

LevelBasedVarOrderHeap levelBasedVarOrderHeap0 = new LevelBasedVarOrderHeap(randomLiteralSelectionStrategy0);
assertEquals("random phase selection", randomLiteralSelectionStrategy0.toString());
assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
assertNotNull(levelBasedVarOrderHeap0);

RandomWalkDecorator randomWalkDecorator0 = new RandomWalkDecorator(levelBasedVarOrderHeap0, 1791.0);
assertEquals("random phase selection", randomLiteralSelectionStrategy0.toString());
assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
assertEquals(1791.0, randomWalkDecorator0.getProbability(), 0.01);
assertNotNull(randomWalkDecorator0);

int int0 = (-2835);
randomWalkDecorator0.assignLiteral((-2835));
assertEquals("random phase selection", randomLiteralSelectionStrategy0.toString());
assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
assertEquals(1791.0, randomWalkDecorator0.getProbability(), 0.01);

Glucose21Restarts glucose21Restarts0 = new Glucose21Restarts();
assertEquals("Glucose 2.1 dynamic restart strategy", glucose21Restarts0.toString());
assertEquals(0L, glucose21Restarts0.nextRestartNumberOfConflict());
assertNotNull(glucose21Restarts0);

SearchParams searchParams0 = new SearchParams((-2835));
assertEquals((-2835), searchParams0.getInitConflictBound());
assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
assertNotNull(searchParams0);

glucose21Restarts0.onRestart();
assertEquals("Glucose 2.1 dynamic restart strategy", glucose21Restarts0.toString());
assertEquals(0L, glucose21Restarts0.nextRestartNumberOfConflict());

String string0 = searchParams0.toString();
assertEquals((-2835), searchParams0.getInitConflictBound());
assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
assertNotNull(string0);

MixedDataStructureSingleWL mixedDataStructureSingleWL0 = new MixedDataStructureSingleWL();
assertNotNull(mixedDataStructureSingleWL0);

int int1 = randomLiteralSelectionStrategy0.select(0);
assertEquals("random phase selection", randomLiteralSelectionStrategy0.toString());
assertEquals(1, int1);
assertFalse(int1 == int0);

ActiveLearning<MixedDataStructureDanielHT> activeLearning0 = new ActiveLearning<MixedDataStructureDanielHT>(1288.64733689556);
assertEquals(1288.64733689556, activeLearning0.getActivityPercent(), 0.01);
assertEquals(0, activeLearning0.getLimit());
assertNotNull(activeLearning0);

FixedLengthLearning<MixedDataStructureDanielWL> fixedLengthLearning0 = new FixedLengthLearning<MixedDataStructureDanielWL>((-2835));
assertEquals((-2835), fixedLengthLearning0.getMaxLength());
assertNotNull(fixedLengthLearning0);

MixedDataStructureDanielWL mixedDataStructureDanielWL0 = new MixedDataStructureDanielWL();
assertNotNull(mixedDataStructureDanielWL0);

Solver<MixedDataStructureDanielWL> solver0 = new Solver<MixedDataStructureDanielWL>(fixedLengthLearning0, mixedDataStructureDanielWL0, randomWalkDecorator0, glucose21Restarts0);
assertEquals(1, solver0.nVars());
assertEquals(0, solver0.getPropagationLevel());
assertEquals(0, solver0.decisionLevel());
assertEquals(0, solver0.currentDecisionLevel());
assertFalse(solver0.isDBSimplificationAllowed());
assertEquals(2147483, solver0.getTimeout());
assertEquals(0, solver0.nConstraints());
assertFalse(solver0.isVerbose());
assertEquals(2, solver0.newVar());
assertFalse(solver0.isSolverKeptHot());
assertEquals(1, solver0.realNumberOfVariables());
assertEquals("c ", solver0.getLogPrefix());
assertEquals("random phase selection", randomLiteralSelectionStrategy0.toString());
assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
assertEquals(1791.0, randomWalkDecorator0.getProbability(), 0.01);
assertEquals("Glucose 2.1 dynamic restart strategy", glucose21Restarts0.toString());
assertEquals(0L, glucose21Restarts0.nextRestartNumberOfConflict());
assertEquals((-2835), fixedLengthLearning0.getMaxLength());
assertNotNull(solver0);

PercentLengthLearning<CardinalityDataStructure> percentLengthLearning0 = new PercentLengthLearning<CardinalityDataStructure>();
assertEquals(10, percentLengthLearning0.getLimit());
assertNotNull(percentLengthLearning0);

CardinalityDataStructure cardinalityDataStructure0 = new CardinalityDataStructure();
assertNotNull(cardinalityDataStructure0);

Solver<CardinalityDataStructure> solver1 = new Solver<CardinalityDataStructure>(percentLengthLearning0, cardinalityDataStructure0, searchParams0, levelBasedVarOrderHeap0, glucose21Restarts0);
assertEquals(10, percentLengthLearning0.getLimit());
assertEquals("random phase selection", randomLiteralSelectionStrategy0.toString());
assertEquals(0, solver1.getPropagationLevel());
assertEquals(0, solver1.decisionLevel());
assertEquals(1, solver1.realNumberOfVariables());
assertEquals("c ", solver1.getLogPrefix());
assertEquals(2147483, solver1.getTimeout());
assertEquals(0, solver1.nConstraints());
assertFalse(solver1.isSolverKeptHot());
assertEquals(2, solver1.newVar());
assertEquals(1, solver1.nVars());
assertFalse(solver1.isDBSimplificationAllowed());
assertFalse(solver1.isVerbose());
assertEquals(0, solver1.currentDecisionLevel());
assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
assertEquals("Glucose 2.1 dynamic restart strategy", glucose21Restarts0.toString());
assertEquals(0L, glucose21Restarts0.nextRestartNumberOfConflict());
assertEquals((-2835), searchParams0.getInitConflictBound());
assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
assertNotNull(solver1);

VecInt vecInt0 = (VecInt)solver1.trail;
assertTrue(vecInt0.isEmpty());
assertEquals(0, vecInt0.size());
assertNotNull(vecInt0);

solver0.addExactly(vecInt0, (-363));

[MASTER] 07:01:33.022 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class java.lang.AssertionError: expected:<2> but was:<1>
[MASTER] 07:01:33.047 [logback-1] WARN  JUnitAnalyzer - Failing test:
 FixedLengthLearning<ClausalDataStructureWL> fixedLengthLearning0 = new FixedLengthLearning<ClausalDataStructureWL>();
assertEquals(3, fixedLengthLearning0.getMaxLength());
assertNotNull(fixedLengthLearning0);

ClausalDataStructureWL clausalDataStructureWL0 = new ClausalDataStructureWL();
assertNotNull(clausalDataStructureWL0);

ClausalDataStructureWL clausalDataStructureWL1 = new ClausalDataStructureWL();
assertNotNull(clausalDataStructureWL1);
assertFalse(clausalDataStructureWL1.equals((Object)clausalDataStructureWL0));

ILits iLits0 = clausalDataStructureWL1.getVocabulary();
assertEquals(0, iLits0.nVars());
assertEquals(0, iLits0.realnVars());
assertNotNull(iLits0);
assertNotSame(clausalDataStructureWL1, clausalDataStructureWL0);
assertFalse(clausalDataStructureWL1.equals((Object)clausalDataStructureWL0));

ClauseOnlyLearning<CardinalityDataStructureYanMin> clauseOnlyLearning0 = new ClauseOnlyLearning<CardinalityDataStructureYanMin>();
assertEquals("Limit learning to clauses using watched literals only", clauseOnlyLearning0.toString());
assertNotNull(clauseOnlyLearning0);

CardinalityDataStructureYanMin cardinalityDataStructureYanMin0 = new CardinalityDataStructureYanMin();
assertNotNull(cardinalityDataStructureYanMin0);

NaturalStaticOrder naturalStaticOrder0 = new NaturalStaticOrder();
assertEquals("Natural static ordering", naturalStaticOrder0.toString());
assertNotNull(naturalStaticOrder0);

FixedPeriodRestarts fixedPeriodRestarts0 = new FixedPeriodRestarts();
assertTrue(fixedPeriodRestarts0.shouldRestart());
assertEquals(0L, fixedPeriodRestarts0.nextRestartNumberOfConflict());
assertEquals(0L, fixedPeriodRestarts0.getPeriod());
assertNotNull(fixedPeriodRestarts0);

Solver<CardinalityDataStructureYanMin> solver0 = new Solver<CardinalityDataStructureYanMin>(clauseOnlyLearning0, cardinalityDataStructureYanMin0, naturalStaticOrder0, fixedPeriodRestarts0);
assertEquals("Limit learning to clauses using watched literals only", clauseOnlyLearning0.toString());
assertEquals("Natural static ordering", naturalStaticOrder0.toString());
assertTrue(fixedPeriodRestarts0.shouldRestart());
assertEquals(0L, fixedPeriodRestarts0.nextRestartNumberOfConflict());
assertEquals(0L, fixedPeriodRestarts0.getPeriod());
assertEquals(0, solver0.nConstraints());
assertEquals(2147483, solver0.getTimeout());
assertFalse(solver0.isVerbose());
assertFalse(solver0.isDBSimplificationAllowed());
assertEquals(0, solver0.getPropagationLevel());
assertEquals("c ", solver0.getLogPrefix());
assertEquals(0, solver0.currentDecisionLevel());
assertEquals(2, solver0.newVar());
assertEquals(0, solver0.decisionLevel());
assertEquals(1, solver0.realNumberOfVariables());
assertFalse(solver0.isSolverKeptHot());
assertEquals(1, solver0.nVars());
assertNotNull(solver0);

SearchParams searchParams0 = solver0.getSearchParams();
assertEquals("Limit learning to clauses using watched literals only", clauseOnlyLearning0.toString());
assertEquals("Natural static ordering", naturalStaticOrder0.toString());
assertTrue(fixedPeriodRestarts0.shouldRestart());
assertEquals(0L, fixedPeriodRestarts0.nextRestartNumberOfConflict());
assertEquals(0L, fixedPeriodRestarts0.getPeriod());
assertEquals(0, solver0.nConstraints());
assertEquals(2147483, solver0.getTimeout());
assertFalse(solver0.isVerbose());
assertFalse(solver0.isDBSimplificationAllowed());
assertEquals(0, solver0.getPropagationLevel());
assertEquals("c ", solver0.getLogPrefix());
assertEquals(0, solver0.currentDecisionLevel());
assertEquals(4, solver0.newVar());
assertEquals(3, solver0.realNumberOfVariables());
assertEquals(0, solver0.decisionLevel());
assertEquals(3, solver0.nVars());
assertFalse(solver0.isSolverKeptHot());
assertEquals(100, searchParams0.getInitConflictBound());
assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
assertNotNull(searchParams0);

int int0 = searchParams0.getInitConflictBound();
assertEquals("Limit learning to clauses using watched literals only", clauseOnlyLearning0.toString());
assertEquals("Natural static ordering", naturalStaticOrder0.toString());
assertTrue(fixedPeriodRestarts0.shouldRestart());
assertEquals(0L, fixedPeriodRestarts0.nextRestartNumberOfConflict());
assertEquals(0L, fixedPeriodRestarts0.getPeriod());
assertEquals(0, solver0.nConstraints());
assertEquals(2147483, solver0.getTimeout());
assertEquals(5, solver0.nVars());
assertFalse(solver0.isVerbose());
assertFalse(solver0.isDBSimplificationAllowed());
assertEquals(0, solver0.getPropagationLevel());
assertEquals("c ", solver0.getLogPrefix());
assertEquals(6, solver0.newVar());
assertEquals(0, solver0.currentDecisionLevel());
assertEquals(5, solver0.realNumberOfVariables());
assertEquals(0, solver0.decisionLevel());
assertFalse(solver0.isSolverKeptHot());
assertEquals(100, searchParams0.getInitConflictBound());
assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
assertEquals(100, int0);

Solver<ClausalDataStructureWL> solver1 = new Solver<ClausalDataStructureWL>(fixedLengthLearning0, clausalDataStructureWL1, searchParams0, naturalStaticOrder0, fixedPeriodRestarts0);
assertEquals(3, fixedLengthLearning0.getMaxLength());
assertEquals("Limit learning to clauses using watched literals only", clauseOnlyLearning0.toString());
assertEquals("Natural static ordering", naturalStaticOrder0.toString());
assertTrue(fixedPeriodRestarts0.shouldRestart());
assertEquals(0L, fixedPeriodRestarts0.nextRestartNumberOfConflict());
assertEquals(0L, fixedPeriodRestarts0.getPeriod());
assertEquals(0, solver0.nConstraints());
assertEquals(7, solver0.nVars());
assertEquals(2147483, solver0.getTimeout());
assertFalse(solver0.isVerbose());
assertFalse(solver0.isDBSimplificationAllowed());
assertEquals(0, solver0.getPropagationLevel());
assertEquals(8, solver0.newVar());
assertEquals(7, solver0.realNumberOfVariables());
assertEquals("c ", solver0.getLogPrefix());
assertEquals(0, solver0.currentDecisionLevel());
assertEquals(0, solver0.decisionLevel());
assertFalse(solver0.isSolverKeptHot());
assertEquals(100, searchParams0.getInitConflictBound());
assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
assertEquals("c ", solver1.getLogPrefix());
assertEquals(0, solver1.currentDecisionLevel());
assertEquals(0, solver1.getPropagationLevel());
assertEquals(1, solver1.nVars());
assertFalse(solver1.isVerbose());
assertFalse(solver1.isDBSimplificationAllowed());
assertEquals(0, solver1.decisionLevel());
assertEquals(2147483, solver1.getTimeout());
assertEquals(0, solver1.nConstraints());
assertFalse(solver1.isSolverKeptHot());
assertEquals(2, solver1.newVar());
assertEquals(1, solver1.realNumberOfVariables());
assertNotNull(solver1);
assertFalse(clausalDataStructureWL1.equals((Object)clausalDataStructureWL0));

ILogAble iLogAble0 = solver1.getLogger();
assertEquals(3, fixedLengthLearning0.getMaxLength());
assertEquals("Limit learning to clauses using watched literals only", clauseOnlyLearning0.toString());
assertEquals("Natural static ordering", naturalStaticOrder0.toString());
assertTrue(fixedPeriodRestarts0.shouldRestart());
assertEquals(0L, fixedPeriodRestarts0.nextRestartNumberOfConflict());
assertEquals(0L, fixedPeriodRestarts0.getPeriod());
assertEquals(0, solver0.nConstraints());
assertEquals(2147483, solver0.getTimeout());
assertFalse(solver0.isVerbose());
assertFalse(solver0.isDBSimplificationAllowed());
assertEquals(10, solver0.newVar());
assertEquals(9, solver0.realNumberOfVariables());
assertEquals(0, solver0.getPropagationLevel());
assertEquals(9, solver0.nVars());
assertEquals("c ", solver0.getLogPrefix());
assertEquals(0, solver0.currentDecisionLevel());
assertEquals(0, solver0.decisionLevel());
assertFalse(solver0.isSolverKeptHot());
assertEquals(100, searchParams0.getInitConflictBound());
assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
assertEquals("c ", solver1.getLogPrefix());
assertEquals(0, solver1.currentDecisionLevel());
assertEquals(0, solver1.getPropagationLevel());
assertFalse(solver1.isVerbose());
assertFalse(solver1.isDBSimplificationAllowed());
assertEquals(0, solver1.decisionLevel());
assertEquals(2147483, solver1.getTimeout());
assertEquals(0, solver1.nConstraints());
assertFalse(solver1.isSolverKeptHot());
assertEquals(3, solver1.nVars());
assertEquals(4, solver1.newVar());
assertEquals(3, solver1.realNumberOfVariables());
assertNotNull(iLogAble0);
assertNotSame(clausalDataStructureWL1, clausalDataStructureWL0);
assertFalse(clausalDataStructureWL1.equals((Object)clausalDataStructureWL0));

Solver<ClausalDataStructureWL> solver2 = new Solver<ClausalDataStructureWL>(fixedLengthLearning0, clausalDataStructureWL1, searchParams0, naturalStaticOrder0, fixedPeriodRestarts0, iLogAble0);
assertEquals(3, fixedLengthLearning0.getMaxLength());
assertEquals("Limit learning to clauses using watched literals only", clauseOnlyLearning0.toString());
assertEquals("Natural static ordering", naturalStaticOrder0.toString());
assertTrue(fixedPeriodRestarts0.shouldRestart());
assertEquals(0L, fixedPeriodRestarts0.nextRestartNumberOfConflict());
assertEquals(0L, fixedPeriodRestarts0.getPeriod());
assertEquals(0, solver0.nConstraints());
assertEquals(2147483, solver0.getTimeout());
assertEquals(12, solver0.newVar());
assertEquals(11, solver0.realNumberOfVariables());
assertFalse(solver0.isVerbose());
assertFalse(solver0.isDBSimplificationAllowed());
assertEquals(11, solver0.nVars());
assertEquals(0, solver0.getPropagationLevel());
assertEquals("c ", solver0.getLogPrefix());
assertEquals(0, solver0.currentDecisionLevel());
assertEquals(0, solver0.decisionLevel());
assertFalse(solver0.isSolverKeptHot());
assertEquals(100, searchParams0.getInitConflictBound());
assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
assertEquals("c ", solver1.getLogPrefix());
assertEquals(0, solver1.currentDecisionLevel());
assertEquals(0, solver1.getPropagationLevel());
assertEquals(8, solver1.newVar());
assertEquals(7, solver1.realNumberOfVariables());
assertFalse(solver1.isVerbose());
assertFalse(solver1.isDBSimplificationAllowed());
assertEquals(0, solver1.decisionLevel());
assertEquals(2147483, solver1.getTimeout());
assertEquals(7, solver1.nVars());
assertEquals(0, solver1.nConstraints());
assertFalse(solver1.isSolverKeptHot());
assertEquals(6, solver2.realNumberOfVariables());
assertEquals(7, solver2.newVar());
assertEquals(6, solver2.nVars());
assertEquals("c ", solver2.getLogPrefix());
assertEquals(2147483, solver2.getTimeout());
assertEquals(0, solver2.nConstraints());
assertFalse(solver2.isVerbose());
assertFalse(solver2.isSolverKeptHot());
assertEquals(0, solver2.getPropagationLevel());
assertEquals(0, solver2.decisionLevel());
assertEquals(0, solver2.currentDecisionLevel());
assertFalse(solver2.isDBSimplificationAllowed());
assertNotNull(solver2);
assertFalse(clausalDataStructureWL1.equals((Object)clausalDataStructureWL0));
assertFalse(solver2.equals((Object)solver1));

ISimplifier iSimplifier0 = solver2.getSimplifier();
assertEquals(3, fixedLengthLearning0.getMaxLength());
assertEquals("Limit learning to clauses using watched literals only", clauseOnlyLearning0.toString());
assertEquals("Natural static ordering", naturalStaticOrder0.toString());
assertTrue(fixedPeriodRestarts0.shouldRestart());
assertEquals(0L, fixedPeriodRestarts0.nextRestartNumberOfConflict());
assertEquals(0L, fixedPeriodRestarts0.getPeriod());
assertEquals(14, solver0.newVar());
assertEquals(0, solver0.nConstraints());
assertEquals(13, solver0.realNumberOfVariables());
assertEquals(2147483, solver0.getTimeout());
assertFalse(solver0.isVerbose());
assertFalse(solver0.isDBSimplificationAllowed());
assertEquals(0, solver0.getPropagationLevel());
assertEquals("c ", solver0.getLogPrefix());
assertEquals(0, solver0.currentDecisionLevel());
assertEquals(13, solver0.nVars());
assertEquals(0, solver0.decisionLevel());
assertFalse(solver0.isSolverKeptHot());
assertEquals(100, searchParams0.getInitConflictBound());
assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
assertEquals("c ", solver1.getLogPrefix());
assertEquals(0, solver1.currentDecisionLevel());
assertEquals(0, solver1.getPropagationLevel());
assertFalse(solver1.isVerbose());
assertFalse(solver1.isDBSimplificationAllowed());
assertEquals(0, solver1.decisionLevel());
assertEquals(11, solver1.nVars());
assertEquals(2147483, solver1.getTimeout());
assertEquals(12, solver1.newVar());
assertEquals(11, solver1.realNumberOfVariables());
assertEquals(0, solver1.nConstraints());
assertFalse(solver1.isSolverKeptHot());
assertEquals("c ", solver2.getLogPrefix());
assertEquals(2147483, solver2.getTimeout());
assertEquals(10, solver2.nVars());
assertEquals(0, solver2.nConstraints());
assertFalse(solver2.isVerbose());
assertFalse(solver2.isSolverKeptHot());
assertEquals(0, solver2.getPropagationLevel());
assertEquals(10, solver2.realNumberOfVariables());
assertEquals(0, solver2.decisionLevel());
assertEquals(0, solver2.currentDecisionLevel());
assertEquals(11, solver2.newVar());
assertFalse(solver2.isDBSimplificationAllowed());
assertNotNull(iSimplifier0);
assertNotSame(clausalDataStructureWL1, clausalDataStructureWL0);
assertNotSame(solver1, solver2);
assertNotSame(solver2, solver1);
assertFalse(clausalDataStructureWL1.equals((Object)clausalDataStructureWL0));
assertFalse(solver1.equals((Object)solver2));
assertFalse(solver2.equals((Object)solver1));

DataStructureFactory dataStructureFactory0 = solver0.getDSFactory();
assertEquals("Limit learning to clauses using watched literals only", clauseOnlyLearning0.toString());
assertEquals("Natural static ordering", naturalStaticOrder0.toString());
assertTrue(fixedPeriodRestarts0.shouldRestart());
assertEquals(0L, fixedPeriodRestarts0.nextRestartNumberOfConflict());
assertEquals(0L, fixedPeriodRestarts0.getPeriod());
assertEquals(0, solver0.nConstraints());
assertEquals(2147483, solver0.getTimeout());
assertFalse(solver0.isVerbose());
assertFalse(solver0.isDBSimplificationAllowed());
assertEquals(0, solver0.getPropagationLevel());
assertEquals("c ", solver0.getLogPrefix());
assertEquals(0, solver0.currentDecisionLevel());
assertEquals(15, solver0.nVars());
assertEquals(0, solver0.decisionLevel());
assertEquals(16, solver0.newVar());
assertFalse(solver0.isSolverKeptHot());
assertEquals(15, solver0.realNumberOfVariables());
assertNotNull(dataStructureFactory0);
assertSame(cardinalityDataStructureYanMin0, dataStructureFactory0);
assertSame(dataStructureFactory0, cardinalityDataStructureYanMin0);

MiniSATLearning<MixedDataStructureDanielWL> miniSATLearning0 = new MiniSATLearning<MixedDataStructureDanielWL>();
assertEquals("Learn all clauses as in MiniSAT", miniSATLearning0.toString());
assertNotNull(miniSATLearning0);

MixedDataStructureDanielWL mixedDataStructureDanielWL0 = new MixedDataStructureDanielWL();
assertNotNull(mixedDataStructureDanielWL0);

LevelBasedVarOrderHeap levelBasedVarOrderHeap0 = new LevelBasedVarOrderHeap();
assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
assertNotNull(levelBasedVarOrderHeap0);

levelBasedVarOrderHeap0.undo((-668));

[MASTER] 07:01:33.686 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class java.lang.AssertionError: expected:<2> but was:<1>
[MASTER] 07:01:33.701 [logback-1] WARN  JUnitAnalyzer - Failing test:
 ClauseOnlyLearning<CardinalityDataStructureYanMax> clauseOnlyLearning0 = new ClauseOnlyLearning<CardinalityDataStructureYanMax>();
assertEquals("Limit learning to clauses using watched literals only", clauseOnlyLearning0.toString());
assertNotNull(clauseOnlyLearning0);

CardinalityDataStructureYanMax cardinalityDataStructureYanMax0 = new CardinalityDataStructureYanMax();
assertNotNull(cardinalityDataStructureYanMax0);

int[] intArray0 = new int[1];
intArray0[0] = (-1054);
SubsetVarOrder subsetVarOrder0 = new SubsetVarOrder(intArray0);
assertEquals(1, intArray0.length);
assertEquals(0, subsetVarOrder0.numberOfInterestingVariables());
assertNotNull(subsetVarOrder0);
assertArrayEquals(new int[] {(-1054)}, intArray0);

double[] doubleArray0 = subsetVarOrder0.getVariableHeuristics();
assertEquals(1, intArray0.length);
assertEquals(1, doubleArray0.length);
assertEquals(0, subsetVarOrder0.numberOfInterestingVariables());
assertNotNull(doubleArray0);
assertArrayEquals(new int[] {(-1054)}, intArray0);
assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);

ArminRestarts arminRestarts0 = new ArminRestarts();
assertTrue(arminRestarts0.shouldRestart());
assertEquals(0L, arminRestarts0.nextRestartNumberOfConflict());
assertEquals("Armin Biere (Picosat) restarts strategy", arminRestarts0.toString());
assertNotNull(arminRestarts0);

Solver<CardinalityDataStructureYanMax> solver0 = new Solver<CardinalityDataStructureYanMax>(clauseOnlyLearning0, cardinalityDataStructureYanMax0, subsetVarOrder0, arminRestarts0);
assertEquals(1, intArray0.length);
assertEquals("Limit learning to clauses using watched literals only", clauseOnlyLearning0.toString());
assertEquals(0, subsetVarOrder0.numberOfInterestingVariables());
assertTrue(arminRestarts0.shouldRestart());
assertEquals(0L, arminRestarts0.nextRestartNumberOfConflict());
assertEquals("Armin Biere (Picosat) restarts strategy", arminRestarts0.toString());
assertFalse(solver0.isVerbose());
assertEquals(2, solver0.newVar());
assertEquals(0, solver0.getPropagationLevel());
assertEquals(0, solver0.nConstraints());
assertEquals(1, solver0.realNumberOfVariables());
assertFalse(solver0.isSolverKeptHot());
assertEquals(1, solver0.nVars());
assertEquals(2147483, solver0.getTimeout());
assertEquals(0, solver0.decisionLevel());
assertFalse(solver0.isDBSimplificationAllowed());
assertEquals("c ", solver0.getLogPrefix());
assertEquals(0, solver0.currentDecisionLevel());
assertNotNull(solver0);
assertArrayEquals(new int[] {(-1054)}, intArray0);

boolean boolean0 = solver0.isVerbose();
assertEquals(1, intArray0.length);
assertEquals("Limit learning to clauses using watched literals only", clauseOnlyLearning0.toString());
assertEquals(0, subsetVarOrder0.numberOfInterestingVariables());
assertTrue(arminRestarts0.shouldRestart());
assertEquals(0L, arminRestarts0.nextRestartNumberOfConflict());
assertEquals("Armin Biere (Picosat) restarts strategy", arminRestarts0.toString());
assertFalse(solver0.isVerbose());
assertEquals(0, solver0.getPropagationLevel());
assertEquals(0, solver0.nConstraints());
assertEquals(4, solver0.newVar());
assertFalse(solver0.isSolverKeptHot());
assertEquals(2147483, solver0.getTimeout());
assertEquals(0, solver0.decisionLevel());
assertFalse(solver0.isDBSimplificationAllowed());
assertEquals(3, solver0.nVars());
assertEquals("c ", solver0.getLogPrefix());
assertEquals(0, solver0.currentDecisionLevel());
assertEquals(3, solver0.realNumberOfVariables());
assertFalse(boolean0);
assertArrayEquals(new int[] {(-1054)}, intArray0);

PercentLengthLearning<MixedDataStructureDanielHT> percentLengthLearning0 = new PercentLengthLearning<MixedDataStructureDanielHT>();
assertEquals(10, percentLengthLearning0.getLimit());
assertNotNull(percentLengthLearning0);

MixedDataStructureDanielHT mixedDataStructureDanielHT0 = new MixedDataStructureDanielHT();
assertNotNull(mixedDataStructureDanielHT0);

SearchParams searchParams0 = new SearchParams((-582.74), 0);
assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
assertEquals(0, searchParams0.getInitConflictBound());
assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
assertEquals((-582.74), searchParams0.getConflictBoundIncFactor(), 0.01);
assertNotNull(searchParams0);

double double0 = searchParams0.getConflictBoundIncFactor();
assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
assertEquals(0, searchParams0.getInitConflictBound());
assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
assertEquals((-582.74), searchParams0.getConflictBoundIncFactor(), 0.01);
assertEquals((-582.74), double0, 0.01);

int int0 = searchParams0.getInitConflictBound();
assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
assertEquals(0, searchParams0.getInitConflictBound());
assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
assertEquals((-582.74), searchParams0.getConflictBoundIncFactor(), 0.01);
assertEquals(0, int0);

double double1 = searchParams0.getConflictBoundIncFactor();
assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
assertEquals(0, searchParams0.getInitConflictBound());
assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
assertEquals((-582.74), searchParams0.getConflictBoundIncFactor(), 0.01);
assertEquals((-582.74), double1, 0.01);
assertEquals(double1, double0, 0.01);

int int1 = searchParams0.getInitConflictBound();
assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
assertEquals(0, searchParams0.getInitConflictBound());
assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
assertEquals((-582.74), searchParams0.getConflictBoundIncFactor(), 0.01);
assertEquals(0, int1);
assertTrue(int1 == int0);

double double2 = searchParams0.getConflictBoundIncFactor();
assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
assertEquals(0, searchParams0.getInitConflictBound());
assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
assertEquals((-582.74), searchParams0.getConflictBoundIncFactor(), 0.01);
assertEquals((-582.74), double2, 0.01);
assertEquals(double2, double1, 0.01);
assertEquals(double2, double0, 0.01);

int int2 = searchParams0.getInitConflictBound();
assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
assertEquals(0, searchParams0.getInitConflictBound());
assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
assertEquals((-582.74), searchParams0.getConflictBoundIncFactor(), 0.01);
assertEquals(0, int2);
assertTrue(int2 == int0);
assertTrue(int2 == int1);

double double3 = searchParams0.getConflictBoundIncFactor();
assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
assertEquals(0, searchParams0.getInitConflictBound());
assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
assertEquals((-582.74), searchParams0.getConflictBoundIncFactor(), 0.01);
assertEquals((-582.74), double3, 0.01);
assertEquals(double3, double2, 0.01);
assertEquals(double3, double1, 0.01);
assertEquals(double3, double0, 0.01);

SearchParams searchParams1 = new SearchParams((-1.0), 0.0, (-582.74), 0);
assertEquals((-582.74), searchParams1.getConflictBoundIncFactor(), 0.01);
assertEquals((-1.0), searchParams1.getVarDecay(), 0.01);
assertEquals(0, searchParams1.getInitConflictBound());
assertEquals(0.0, searchParams1.getClaDecay(), 0.01);
assertNotNull(searchParams1);
assertFalse(searchParams1.equals((Object)searchParams0));

int int3 = searchParams1.getInitConflictBound();
assertEquals((-582.74), searchParams1.getConflictBoundIncFactor(), 0.01);
assertEquals((-1.0), searchParams1.getVarDecay(), 0.01);
assertEquals(0, searchParams1.getInitConflictBound());
assertEquals(0.0, searchParams1.getClaDecay(), 0.01);
assertEquals(0, int3);
assertNotSame(searchParams1, searchParams0);
assertFalse(searchParams1.equals((Object)searchParams0));
assertTrue(int3 == int2);
assertTrue(int3 == int1);
assertTrue(int3 == int0);

int int4 = searchParams0.getInitConflictBound();
assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
assertEquals(0, searchParams0.getInitConflictBound());
assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
assertEquals((-582.74), searchParams0.getConflictBoundIncFactor(), 0.01);
assertEquals(0, int4);
assertNotSame(searchParams0, searchParams1);
assertTrue(int4 == int1);
assertTrue(int4 == int3);
assertTrue(int4 == int2);
assertTrue(int4 == int0);
assertFalse(searchParams0.equals((Object)searchParams1));

int int5 = searchParams0.getInitConflictBound();
assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
assertEquals(0, searchParams0.getInitConflictBound());
assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
assertEquals((-582.74), searchParams0.getConflictBoundIncFactor(), 0.01);
assertEquals(0, int5);
assertNotSame(searchParams0, searchParams1);
assertTrue(int5 == int3);
assertTrue(int5 == int0);
assertTrue(int5 == int1);
assertTrue(int5 == int2);
assertTrue(int5 == int4);
assertFalse(searchParams0.equals((Object)searchParams1));

double double4 = searchParams1.getConflictBoundIncFactor();
assertEquals((-582.74), searchParams1.getConflictBoundIncFactor(), 0.01);
assertEquals((-1.0), searchParams1.getVarDecay(), 0.01);
assertEquals(0, searchParams1.getInitConflictBound());
assertEquals(0.0, searchParams1.getClaDecay(), 0.01);
assertEquals((-582.74), double4, 0.01);
assertNotSame(searchParams1, searchParams0);
assertFalse(searchParams1.equals((Object)searchParams0));
assertEquals(double4, double0, 0.01);
assertEquals(double4, double2, 0.01);
assertEquals(double4, double3, 0.01);
assertEquals(double4, double1, 0.01);

int int6 = searchParams1.getInitConflictBound();
assertEquals((-582.74), searchParams1.getConflictBoundIncFactor(), 0.01);
assertEquals((-1.0), searchParams1.getVarDecay(), 0.01);
assertEquals(0, searchParams1.getInitConflictBound());
assertEquals(0.0, searchParams1.getClaDecay(), 0.01);
assertEquals(0, int6);
assertNotSame(searchParams1, searchParams0);
assertFalse(searchParams1.equals((Object)searchParams0));
assertTrue(int6 == int1);
assertTrue(int6 == int3);
assertTrue(int6 == int5);
assertTrue(int6 == int0);
assertTrue(int6 == int4);
assertTrue(int6 == int2);

Glucose21Restarts glucose21Restarts0 = new Glucose21Restarts();
assertEquals("Glucose 2.1 dynamic restart strategy", glucose21Restarts0.toString());
assertEquals(0L, glucose21Restarts0.nextRestartNumberOfConflict());
assertNotNull(glucose21Restarts0);

SearchParams searchParams2 = new SearchParams(58);
assertEquals(0.999, searchParams2.getClaDecay(), 0.01);
assertEquals(58, searchParams2.getInitConflictBound());
assertEquals(0.95, searchParams2.getVarDecay(), 0.01);
assertEquals(1.5, searchParams2.getConflictBoundIncFactor(), 0.01);
assertNotNull(searchParams2);
assertFalse(searchParams2.equals((Object)searchParams0));
assertFalse(searchParams2.equals((Object)searchParams1));

glucose21Restarts0.onRestart();
assertEquals("Glucose 2.1 dynamic restart strategy", glucose21Restarts0.toString());
assertEquals(0L, glucose21Restarts0.nextRestartNumberOfConflict());

BasicLauncher<Solver<MixedDataStructureDanielWLConciseBinary>> basicLauncher0 = new BasicLauncher<Solver<MixedDataStructureDanielWLConciseBinary>>((ASolverFactory<Solver<MixedDataStructureDanielWLConciseBinary>>) null);
assertEquals(0L, basicLauncher0.getBeginTime());
assertFalse(basicLauncher0.isSilent());
assertEquals(ExitCode.UNKNOWN, basicLauncher0.getExitCode());
assertNotNull(basicLauncher0);

basicLauncher0.log("");
assertEquals(0L, basicLauncher0.getBeginTime());
assertFalse(basicLauncher0.isSilent());
assertEquals(ExitCode.UNKNOWN, basicLauncher0.getExitCode());

basicLauncher0.log("");
assertEquals(0L, basicLauncher0.getBeginTime());
assertFalse(basicLauncher0.isSilent());
assertEquals(ExitCode.UNKNOWN, basicLauncher0.getExitCode());

basicLauncher0.log("");
assertEquals(0L, basicLauncher0.getBeginTime());
assertFalse(basicLauncher0.isSilent());
assertEquals(ExitCode.UNKNOWN, basicLauncher0.getExitCode());

Solver<MixedDataStructureDanielHT> solver1 = new Solver<MixedDataStructureDanielHT>(percentLengthLearning0, mixedDataStructureDanielHT0, searchParams1, subsetVarOrder0, glucose21Restarts0, basicLauncher0);
assertEquals(1, intArray0.length);
assertFalse(solver1.isVerbose());
assertEquals(2, solver1.newVar());
assertEquals(0, solver1.decisionLevel());
assertEquals(1, solver1.realNumberOfVariables());
assertEquals(0, solver1.getPropagationLevel());
assertEquals(0, solver1.nConstraints());
assertFalse(solver1.isSolverKeptHot());
assertEquals(0, solver1.currentDecisionLevel());
assertEquals(2147483, solver1.getTimeout());
assertFalse(solver1.isDBSimplificationAllowed());
assertEquals(1, solver1.nVars());
assertEquals("c ", solver1.getLogPrefix());
assertEquals((-582.74), searchParams1.getConflictBoundIncFactor(), 0.01);
assertEquals((-1.0), searchParams1.getVarDecay(), 0.01);
assertEquals(0, searchParams1.getInitConflictBound());
assertEquals(0.0, searchParams1.getClaDecay(), 0.01);
assertEquals(0, subsetVarOrder0.numberOfInterestingVariables());
assertEquals("Glucose 2.1 dynamic restart strategy", glucose21Restarts0.toString());
assertEquals(0L, glucose21Restarts0.nextRestartNumberOfConflict());
assertEquals(10, percentLengthLearning0.getLimit());
assertEquals(0L, basicLauncher0.getBeginTime());
assertFalse(basicLauncher0.isSilent());
assertEquals(ExitCode.UNKNOWN, basicLauncher0.getExitCode());
assertNotNull(solver1);
assertArrayEquals(new int[] {(-1054)}, intArray0);
assertFalse(searchParams1.equals((Object)searchParams0));
assertFalse(searchParams1.equals((Object)searchParams2));

solver1.toString();

[MASTER] 07:01:34.234 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class java.lang.AssertionError: expected:<1> but was:<0>
[MASTER] 07:01:34.251 [logback-1] WARN  JUnitAnalyzer - Failing test:
 MiniSATLearning<CardinalityDataStructureYanMax> miniSATLearning0 = new MiniSATLearning<CardinalityDataStructureYanMax>();
assertEquals("Learn all clauses as in MiniSAT", miniSATLearning0.toString());
assertNotNull(miniSATLearning0);

CardinalityDataStructureYanMax cardinalityDataStructureYanMax0 = new CardinalityDataStructureYanMax();
assertNotNull(cardinalityDataStructureYanMax0);

ClauseOnlyLearning<CardinalityDataStructureYanMin> clauseOnlyLearning0 = new ClauseOnlyLearning<CardinalityDataStructureYanMin>();
assertEquals("Limit learning to clauses using watched literals only", clauseOnlyLearning0.toString());
assertNotNull(clauseOnlyLearning0);

CardinalityDataStructureYanMin cardinalityDataStructureYanMin0 = new CardinalityDataStructureYanMin();
assertNotNull(cardinalityDataStructureYanMin0);

NaturalStaticOrder naturalStaticOrder0 = new NaturalStaticOrder();
assertEquals("Natural static ordering", naturalStaticOrder0.toString());
assertNotNull(naturalStaticOrder0);

FixedPeriodRestarts fixedPeriodRestarts0 = new FixedPeriodRestarts();
assertEquals(0L, fixedPeriodRestarts0.getPeriod());
assertEquals(0L, fixedPeriodRestarts0.nextRestartNumberOfConflict());
assertTrue(fixedPeriodRestarts0.shouldRestart());
assertNotNull(fixedPeriodRestarts0);

Solver<CardinalityDataStructureYanMin> solver0 = new Solver<CardinalityDataStructureYanMin>(clauseOnlyLearning0, cardinalityDataStructureYanMin0, naturalStaticOrder0, fixedPeriodRestarts0);
assertEquals("Limit learning to clauses using watched literals only", clauseOnlyLearning0.toString());
assertEquals("Natural static ordering", naturalStaticOrder0.toString());
assertEquals(0L, fixedPeriodRestarts0.getPeriod());
assertEquals(0L, fixedPeriodRestarts0.nextRestartNumberOfConflict());
assertTrue(fixedPeriodRestarts0.shouldRestart());
assertFalse(solver0.isSolverKeptHot());
assertEquals(0, solver0.nConstraints());
assertEquals(1, solver0.realNumberOfVariables());
assertEquals("c ", solver0.getLogPrefix());
assertEquals(0, solver0.getPropagationLevel());
assertEquals(0, solver0.decisionLevel());
assertEquals(0, solver0.currentDecisionLevel());
assertEquals(2, solver0.newVar());
assertEquals(1, solver0.nVars());
assertEquals(2147483, solver0.getTimeout());
assertFalse(solver0.isVerbose());
assertFalse(solver0.isDBSimplificationAllowed());
assertNotNull(solver0);

SearchParams searchParams0 = solver0.getSearchParams();
assertEquals("Limit learning to clauses using watched literals only", clauseOnlyLearning0.toString());
assertEquals("Natural static ordering", naturalStaticOrder0.toString());
assertEquals(0L, fixedPeriodRestarts0.getPeriod());
assertEquals(0L, fixedPeriodRestarts0.nextRestartNumberOfConflict());
assertTrue(fixedPeriodRestarts0.shouldRestart());
assertFalse(solver0.isSolverKeptHot());
assertEquals(3, solver0.nVars());
assertEquals(0, solver0.nConstraints());
assertEquals(4, solver0.newVar());
assertEquals(3, solver0.realNumberOfVariables());
assertEquals("c ", solver0.getLogPrefix());
assertEquals(0, solver0.getPropagationLevel());
assertEquals(0, solver0.decisionLevel());
assertEquals(0, solver0.currentDecisionLevel());
assertEquals(2147483, solver0.getTimeout());
assertFalse(solver0.isVerbose());
assertFalse(solver0.isDBSimplificationAllowed());
assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
assertEquals(100, searchParams0.getInitConflictBound());
assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
assertNotNull(searchParams0);

int int0 = searchParams0.getInitConflictBound();
assertEquals("Limit learning to clauses using watched literals only", clauseOnlyLearning0.toString());
assertEquals("Natural static ordering", naturalStaticOrder0.toString());
assertEquals(0L, fixedPeriodRestarts0.getPeriod());
assertEquals(0L, fixedPeriodRestarts0.nextRestartNumberOfConflict());
assertTrue(fixedPeriodRestarts0.shouldRestart());
assertFalse(solver0.isSolverKeptHot());
assertEquals(0, solver0.nConstraints());
assertEquals(6, solver0.newVar());
assertEquals(5, solver0.nVars());
assertEquals("c ", solver0.getLogPrefix());
assertEquals(0, solver0.getPropagationLevel());
assertEquals(0, solver0.decisionLevel());
assertEquals(0, solver0.currentDecisionLevel());
assertEquals(5, solver0.realNumberOfVariables());
assertEquals(2147483, solver0.getTimeout());
assertFalse(solver0.isVerbose());
assertFalse(solver0.isDBSimplificationAllowed());
assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
assertEquals(100, searchParams0.getInitConflictBound());
assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
assertEquals(100, int0);

MUSLauncher mUSLauncher0 = new MUSLauncher();
assertEquals(ExitCode.UNKNOWN, mUSLauncher0.getExitCode());
assertFalse(mUSLauncher0.isSilent());
assertEquals(0L, mUSLauncher0.getBeginTime());
assertNotNull(mUSLauncher0);

PositiveLiteralSelectionStrategy positiveLiteralSelectionStrategy0 = new PositiveLiteralSelectionStrategy();
assertEquals("positive phase selection", positiveLiteralSelectionStrategy0.toString());
assertNotNull(positiveLiteralSelectionStrategy0);

positiveLiteralSelectionStrategy0.updateVarAtDecisionLevel(4);
assertEquals("positive phase selection", positiveLiteralSelectionStrategy0.toString());

LevelBasedVarOrderHeap levelBasedVarOrderHeap0 = new LevelBasedVarOrderHeap(positiveLiteralSelectionStrategy0);
assertEquals("positive phase selection", positiveLiteralSelectionStrategy0.toString());
assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
assertNotNull(levelBasedVarOrderHeap0);

RandomWalkDecorator randomWalkDecorator0 = new RandomWalkDecorator(levelBasedVarOrderHeap0, (-1125.303431268));
assertEquals("positive phase selection", positiveLiteralSelectionStrategy0.toString());
assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
assertEquals((-1125.303431268), randomWalkDecorator0.getProbability(), 0.01);
assertNotNull(randomWalkDecorator0);

randomWalkDecorator0.assignLiteral(6);
assertEquals("positive phase selection", positiveLiteralSelectionStrategy0.toString());
assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
assertEquals((-1125.303431268), randomWalkDecorator0.getProbability(), 0.01);

MiniSATRestarts miniSATRestarts0 = new MiniSATRestarts();
assertTrue(miniSATRestarts0.shouldRestart());
assertEquals(0L, miniSATRestarts0.nextRestartNumberOfConflict());
assertEquals("MiniSAT restarts strategy", miniSATRestarts0.toString());
assertNotNull(miniSATRestarts0);

BasicLauncher<Solver<MixedDataStructureDanielWLConciseBinary>> basicLauncher0 = new BasicLauncher<Solver<MixedDataStructureDanielWLConciseBinary>>((ASolverFactory<Solver<MixedDataStructureDanielWLConciseBinary>>) null);
assertEquals(0L, basicLauncher0.getBeginTime());
assertEquals(ExitCode.UNKNOWN, basicLauncher0.getExitCode());
assertFalse(basicLauncher0.isSilent());
assertNotNull(basicLauncher0);

mUSLauncher0.log("org.sat4j.-inisat.core.Heap");
assertEquals(ExitCode.UNKNOWN, mUSLauncher0.getExitCode());
assertFalse(mUSLauncher0.isSilent());
assertEquals(0L, mUSLauncher0.getBeginTime());

mUSLauncher0.log("c ");
assertEquals(ExitCode.UNKNOWN, mUSLauncher0.getExitCode());
assertFalse(mUSLauncher0.isSilent());
assertEquals(0L, mUSLauncher0.getBeginTime());

basicLauncher0.log("V");
assertEquals(0L, basicLauncher0.getBeginTime());
assertEquals(ExitCode.UNKNOWN, basicLauncher0.getExitCode());
assertFalse(basicLauncher0.isSilent());

LevelBasedVarOrderHeap levelBasedVarOrderHeap1 = new LevelBasedVarOrderHeap();
assertEquals(0, levelBasedVarOrderHeap1.numberOfInterestingVariables());
assertNotNull(levelBasedVarOrderHeap1);
assertFalse(levelBasedVarOrderHeap1.equals((Object)levelBasedVarOrderHeap0));

Solver<CardinalityDataStructureYanMin> solver1 = new Solver<CardinalityDataStructureYanMin>(clauseOnlyLearning0, cardinalityDataStructureYanMin0, searchParams0, levelBasedVarOrderHeap1, miniSATRestarts0, mUSLauncher0);
assertEquals("Limit learning to clauses using watched literals only", clauseOnlyLearning0.toString());
assertEquals(0, levelBasedVarOrderHeap1.numberOfInterestingVariables());
assertEquals("Natural static ordering", naturalStaticOrder0.toString());
assertFalse(solver1.isVerbose());
assertEquals(2147483, solver1.getTimeout());
assertEquals(0, solver1.decisionLevel());
assertEquals(0, solver1.currentDecisionLevel());
assertEquals(8, solver1.nVars());
assertEquals(0, solver1.getPropagationLevel());
assertEquals(8, solver1.realNumberOfVariables());
assertFalse(solver1.isDBSimplificationAllowed());
assertEquals(9, solver1.newVar());
assertEquals("c ", solver1.getLogPrefix());
assertEquals(0, solver1.nConstraints());
assertFalse(solver1.isSolverKeptHot());
assertEquals(0L, fixedPeriodRestarts0.getPeriod());
assertEquals(0L, fixedPeriodRestarts0.nextRestartNumberOfConflict());
assertTrue(fixedPeriodRestarts0.shouldRestart());
assertFalse(solver0.isSolverKeptHot());
assertEquals(10, solver0.newVar());
assertEquals(9, solver0.nVars());
assertEquals(0, solver0.nConstraints());
assertEquals("c ", solver0.getLogPrefix());
assertEquals(0, solver0.getPropagationLevel());
assertEquals(0, solver0.decisionLevel());
assertEquals(0, solver0.currentDecisionLevel());
assertEquals(2147483, solver0.getTimeout());
assertFalse(solver0.isVerbose());
assertEquals(9, solver0.realNumberOfVariables());
assertFalse(solver0.isDBSimplificationAllowed());
assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
assertEquals(100, searchParams0.getInitConflictBound());
assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
assertEquals(ExitCode.UNKNOWN, mUSLauncher0.getExitCode());
assertFalse(mUSLauncher0.isSilent());
assertEquals(0L, mUSLauncher0.getBeginTime());
assertTrue(miniSATRestarts0.shouldRestart());
assertEquals(0L, miniSATRestarts0.nextRestartNumberOfConflict());
assertEquals("MiniSAT restarts strategy", miniSATRestarts0.toString());
assertNotNull(solver1);
assertFalse(levelBasedVarOrderHeap1.equals((Object)levelBasedVarOrderHeap0));
assertFalse(solver1.equals((Object)solver0));

Solver<CardinalityDataStructureYanMin> solver2 = new Solver<CardinalityDataStructureYanMin>(clauseOnlyLearning0, cardinalityDataStructureYanMin0, searchParams0, naturalStaticOrder0, miniSATRestarts0);
assertEquals("Limit learning to clauses using watched literals only", clauseOnlyLearning0.toString());
assertEquals("Natural static ordering", naturalStaticOrder0.toString());
assertEquals(0L, fixedPeriodRestarts0.getPeriod());
assertEquals(0L, fixedPeriodRestarts0.nextRestartNumberOfConflict());
assertTrue(fixedPeriodRestarts0.shouldRestart());
assertEquals("c ", solver2.getLogPrefix());
assertEquals(0, solver2.currentDecisionLevel());
assertFalse(solver2.isDBSimplificationAllowed());
assertEquals(0, solver2.decisionLevel());
assertFalse(solver2.isSolverKeptHot());
assertEquals(2147483, solver2.getTimeout());
assertEquals(0, solver2.nConstraints());
assertEquals(12, solver2.realNumberOfVariables());
assertEquals(13, solver2.newVar());
assertEquals(12, solver2.nVars());
assertEquals(0, solver2.getPropagationLevel());
assertFalse(solver2.isVerbose());
assertFalse(solver0.isSolverKeptHot());
assertEquals(13, solver0.realNumberOfVariables());
assertEquals(0, solver0.nConstraints());
assertEquals("c ", solver0.getLogPrefix());
assertEquals(0, solver0.getPropagationLevel());
assertEquals(0, solver0.decisionLevel());
assertEquals(0, solver0.currentDecisionLevel());
assertEquals(2147483, solver0.getTimeout());
assertFalse(solver0.isVerbose());
assertEquals(14, solver0.newVar());
assertEquals(13, solver0.nVars());
assertFalse(solver0.isDBSimplificationAllowed());
assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
assertEquals(100, searchParams0.getInitConflictBound());
assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
assertTrue(miniSATRestarts0.shouldRestart());
assertEquals(0L, miniSATRestarts0.nextRestartNumberOfConflict());
assertEquals("MiniSAT restarts strategy", miniSATRestarts0.toString());
assertNotNull(solver2);
assertFalse(solver2.equals((Object)solver0));
assertFalse(solver2.equals((Object)solver1));
assertFalse(solver0.equals((Object)solver1));

solver2.setLearner(clauseOnlyLearning0);
assertEquals("Limit learning to clauses using watched literals only", clauseOnlyLearning0.toString());
assertEquals("Natural static ordering", naturalStaticOrder0.toString());
assertEquals(0L, fixedPeriodRestarts0.getPeriod());
assertEquals(0L, fixedPeriodRestarts0.nextRestartNumberOfConflict());
assertTrue(fixedPeriodRestarts0.shouldRestart());
assertEquals("c ", solver2.getLogPrefix());
assertEquals(0, solver2.currentDecisionLevel());
assertFalse(solver2.isDBSimplificationAllowed());
assertEquals(0, solver2.decisionLevel());
assertEquals(16, solver2.realNumberOfVariables());
assertEquals(17, solver2.newVar());
assertEquals(16, solver2.nVars());
assertFalse(solver2.isSolverKeptHot());
assertEquals(2147483, solver2.getTimeout());
assertEquals(0, solver2.nConstraints());
assertEquals(0, solver2.getPropagationLevel());
assertFalse(solver2.isVerbose());
assertFalse(solver0.isSolverKeptHot());
assertEquals(0, solver0.nConstraints());
assertEquals(17, solver0.realNumberOfVariables());
assertEquals("c ", solver0.getLogPrefix());
assertEquals(0, solver0.getPropagationLevel());
assertEquals(0, solver0.decisionLevel());
assertEquals(0, solver0.currentDecisionLevel());
assertEquals(18, solver0.newVar());
assertEquals(17, solver0.nVars());
assertEquals(2147483, solver0.getTimeout());
assertFalse(solver0.isVerbose());
assertFalse(solver0.isDBSimplificationAllowed());
assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
assertEquals(100, searchParams0.getInitConflictBound());
assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
assertTrue(miniSATRestarts0.shouldRestart());
assertEquals(0L, miniSATRestarts0.nextRestartNumberOfConflict());
assertEquals("MiniSAT restarts strategy", miniSATRestarts0.toString());
assertNotSame(solver2, solver0);
assertNotSame(solver2, solver1);
assertNotSame(solver0, solver1);
assertNotSame(solver0, solver2);
assertFalse(solver2.equals((Object)solver0));
assertFalse(solver2.equals((Object)solver1));
assertFalse(solver0.equals((Object)solver1));
assertFalse(solver0.equals((Object)solver2));

ActiveLearning<MixedDataStructureDanielHT> activeLearning0 = new ActiveLearning<MixedDataStructureDanielHT>();
assertEquals(0.95, activeLearning0.getActivityPercent(), 0.01);
assertEquals(0, activeLearning0.getLimit());
assertNotNull(activeLearning0);

MixedDataStructureDanielHT mixedDataStructureDanielHT0 = new MixedDataStructureDanielHT();
assertNotNull(mixedDataStructureDanielHT0);

Solver<MixedDataStructureDanielHT> solver3 = new Solver<MixedDataStructureDanielHT>(activeLearning0, mixedDataStructureDanielHT0, searchParams0, levelBasedVarOrderHeap1, miniSATRestarts0);
assertEquals("Limit learning to clauses using watched literals only", clauseOnlyLearning0.toString());
assertEquals(0, levelBasedVarOrderHeap1.numberOfInterestingVariables());
assertEquals("Natural static ordering", naturalStaticOrder0.toString());
assertEquals(0L, fixedPeriodRestarts0.getPeriod());
assertEquals(0L, fixedPeriodRestarts0.nextRestartNumberOfConflict());
assertTrue(fixedPeriodRestarts0.shouldRestart());
assertFalse(solver0.isSolverKeptHot());
assertEquals(19, solver0.nVars());
assertEquals(0, solver0.nConstraints());
assertEquals(20, solver0.newVar());
assertEquals(19, solver0.realNumberOfVariables());
assertEquals("c ", solver0.getLogPrefix());
assertEquals(0, solver0.getPropagationLevel());
assertEquals(0, solver0.decisionLevel());
assertEquals(0, solver0.currentDecisionLevel());
assertEquals(2147483, solver0.getTimeout());
assertFalse(solver0.isVerbose());
assertFalse(solver0.isDBSimplificationAllowed());
assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
assertEquals(100, searchParams0.getInitConflictBound());
assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
assertEquals(0.95, activeLearning0.getActivityPercent(), 0.01);
assertEquals(0, activeLearning0.getLimit());
assertFalse(solver3.isDBSimplificationAllowed());
assertFalse(solver3.isSolverKeptHot());
assertEquals(1, solver3.nVars());
assertEquals(2147483, solver3.getTimeout());
assertEquals(0, solver3.decisionLevel());
assertEquals(1, solver3.realNumberOfVariables());
assertEquals(0, solver3.currentDecisionLevel());
assertEquals(0, solver3.getPropagationLevel());
assertEquals(0, solver3.nConstraints());
assertFalse(solver3.isVerbose());
assertEquals(2, solver3.newVar());
assertEquals("c ", solver3.getLogPrefix());
assertTrue(miniSATRestarts0.shouldRestart());
assertEquals(0L, miniSATRestarts0.nextRestartNumberOfConflict());
assertEquals("MiniSAT restarts strategy", miniSATRestarts0.toString());
assertNotNull(solver3);
assertFalse(levelBasedVarOrderHeap1.equals((Object)levelBasedVarOrderHeap0));
assertFalse(solver0.equals((Object)solver1));
assertFalse(solver0.equals((Object)solver2));

solver3.model();

[MASTER] 07:01:34.578 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class java.lang.AssertionError: expected:<2> but was:<1>
[MASTER] 07:01:34.579 [logback-1] WARN  JUnitAnalyzer - Failing test:
 PercentLengthLearning<CardinalityDataStructureYanMax> percentLengthLearning0 = new PercentLengthLearning<CardinalityDataStructureYanMax>();
assertEquals(10, percentLengthLearning0.getLimit());
assertNotNull(percentLengthLearning0);

CardinalityDataStructureYanMax cardinalityDataStructureYanMax0 = new CardinalityDataStructureYanMax();
assertNotNull(cardinalityDataStructureYanMax0);

int[] intArray0 = new int[1];
SubsetVarOrder subsetVarOrder0 = new SubsetVarOrder(intArray0);
assertEquals(1, intArray0.length);
assertEquals(0, subsetVarOrder0.numberOfInterestingVariables());
assertNotNull(subsetVarOrder0);
assertArrayEquals(new int[] {0}, intArray0);

double[] doubleArray0 = subsetVarOrder0.getVariableHeuristics();
assertEquals(1, intArray0.length);
assertEquals(1, doubleArray0.length);
assertEquals(0, subsetVarOrder0.numberOfInterestingVariables());
assertNotNull(doubleArray0);
assertArrayEquals(new int[] {0}, intArray0);
assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);

LubyRestarts lubyRestarts0 = new LubyRestarts((-13));
assertEquals(1, lubyRestarts0.luby());
assertEquals(0L, lubyRestarts0.nextRestartNumberOfConflict());
assertTrue(lubyRestarts0.shouldRestart());
assertEquals((-13), lubyRestarts0.getFactor());
assertNotNull(lubyRestarts0);
assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);

Solver<CardinalityDataStructureYanMax> solver0 = new Solver<CardinalityDataStructureYanMax>(percentLengthLearning0, cardinalityDataStructureYanMax0, subsetVarOrder0, lubyRestarts0);
assertEquals(1, intArray0.length);
assertEquals(10, percentLengthLearning0.getLimit());
assertEquals(0, subsetVarOrder0.numberOfInterestingVariables());
assertEquals(1, lubyRestarts0.luby());
assertEquals(0L, lubyRestarts0.nextRestartNumberOfConflict());
assertTrue(lubyRestarts0.shouldRestart());
assertEquals((-13), lubyRestarts0.getFactor());
assertEquals(2, solver0.newVar());
assertEquals(0, solver0.getPropagationLevel());
assertEquals(0, solver0.nConstraints());
assertFalse(solver0.isVerbose());
assertEquals(0, solver0.currentDecisionLevel());
assertEquals(1, solver0.realNumberOfVariables());
assertFalse(solver0.isSolverKeptHot());
assertEquals(1, solver0.nVars());
assertEquals(2147483, solver0.getTimeout());
assertEquals(0, solver0.decisionLevel());
assertFalse(solver0.isDBSimplificationAllowed());
assertEquals("c ", solver0.getLogPrefix());
assertNotNull(solver0);
assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
assertArrayEquals(new int[] {0}, intArray0);


[MASTER] 07:01:35.151 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class java.lang.AssertionError: expected:<1> but was:<0>
[MASTER] 07:01:35.152 [logback-1] WARN  JUnitAnalyzer - Failing test:
 PercentLengthLearning<CardinalityDataStructureYanMax> percentLengthLearning0 = new PercentLengthLearning<CardinalityDataStructureYanMax>();
assertEquals(10, percentLengthLearning0.getLimit());
assertNotNull(percentLengthLearning0);

CardinalityDataStructureYanMax cardinalityDataStructureYanMax0 = new CardinalityDataStructureYanMax();
assertNotNull(cardinalityDataStructureYanMax0);

int[] intArray0 = new int[1];
intArray0[0] = (-1054);
SubsetVarOrder subsetVarOrder0 = new SubsetVarOrder(intArray0);
assertEquals(1, intArray0.length);
assertEquals(0, subsetVarOrder0.numberOfInterestingVariables());
assertNotNull(subsetVarOrder0);
assertArrayEquals(new int[] {(-1054)}, intArray0);

double[] doubleArray0 = subsetVarOrder0.getVariableHeuristics();
assertEquals(1, intArray0.length);
assertEquals(1, doubleArray0.length);
assertEquals(0, subsetVarOrder0.numberOfInterestingVariables());
assertNotNull(doubleArray0);
assertArrayEquals(new int[] {(-1054)}, intArray0);
assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);

LubyRestarts lubyRestarts0 = new LubyRestarts(0);
assertTrue(lubyRestarts0.shouldRestart());
assertEquals(1, lubyRestarts0.luby());
assertEquals(0L, lubyRestarts0.nextRestartNumberOfConflict());
assertEquals(0, lubyRestarts0.getFactor());
assertNotNull(lubyRestarts0);
assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);

Solver<CardinalityDataStructureYanMax> solver0 = new Solver<CardinalityDataStructureYanMax>(percentLengthLearning0, cardinalityDataStructureYanMax0, subsetVarOrder0, lubyRestarts0);
assertEquals(1, intArray0.length);
assertEquals(10, percentLengthLearning0.getLimit());
assertEquals(0, subsetVarOrder0.numberOfInterestingVariables());
assertTrue(lubyRestarts0.shouldRestart());
assertEquals(1, lubyRestarts0.luby());
assertEquals(0L, lubyRestarts0.nextRestartNumberOfConflict());
assertEquals(0, lubyRestarts0.getFactor());
assertEquals(0, solver0.getPropagationLevel());
assertEquals("c ", solver0.getLogPrefix());
assertEquals(0, solver0.decisionLevel());
assertEquals(2147483, solver0.getTimeout());
assertFalse(solver0.isVerbose());
assertFalse(solver0.isDBSimplificationAllowed());
assertEquals(0, solver0.currentDecisionLevel());
assertEquals(0, solver0.nConstraints());
assertFalse(solver0.isSolverKeptHot());
assertEquals(1, solver0.nVars());
assertEquals(2, solver0.newVar());
assertEquals(1, solver0.realNumberOfVariables());
assertNotNull(solver0);
assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
assertArrayEquals(new int[] {(-1054)}, intArray0);

int int0 = solver0.newVar((-1054));
assertEquals(1, intArray0.length);
assertEquals(10, percentLengthLearning0.getLimit());
assertEquals(0, subsetVarOrder0.numberOfInterestingVariables());
assertTrue(lubyRestarts0.shouldRestart());
assertEquals(1, lubyRestarts0.luby());
assertEquals(0L, lubyRestarts0.nextRestartNumberOfConflict());
assertEquals(0, lubyRestarts0.getFactor());
assertEquals(0, solver0.getPropagationLevel());
assertEquals(4, solver0.newVar());
assertEquals(3, solver0.realNumberOfVariables());
assertEquals("c ", solver0.getLogPrefix());
assertEquals(0, solver0.decisionLevel());
assertEquals(2147483, solver0.getTimeout());
assertFalse(solver0.isVerbose());
assertFalse(solver0.isDBSimplificationAllowed());
assertEquals(0, solver0.currentDecisionLevel());
assertEquals(0, solver0.nConstraints());
assertEquals((-1054), solver0.nVars());
assertFalse(solver0.isSolverKeptHot());
assertEquals((-1054), int0);
assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
assertArrayEquals(new int[] {(-1054)}, intArray0);


[MASTER] 07:01:35.625 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class java.lang.AssertionError: expected:<2> but was:<1>
[MASTER] 07:01:35.627 [logback-1] WARN  JUnitAnalyzer - Failing test:
 NoLearningNoHeuristics<CardinalityDataStructureYanMin> noLearningNoHeuristics0 = new NoLearningNoHeuristics<CardinalityDataStructureYanMin>();
assertNotNull(noLearningNoHeuristics0);

CardinalityDataStructureYanMin cardinalityDataStructureYanMin0 = new CardinalityDataStructureYanMin();
assertNotNull(cardinalityDataStructureYanMin0);

SearchParams searchParams0 = new SearchParams((-819));
assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
assertEquals((-819), searchParams0.getInitConflictBound());
assertNotNull(searchParams0);

RandomLiteralSelectionStrategy randomLiteralSelectionStrategy0 = new RandomLiteralSelectionStrategy();
assertEquals("random phase selection", randomLiteralSelectionStrategy0.toString());
assertNotNull(randomLiteralSelectionStrategy0);

LevelBasedVarOrderHeap levelBasedVarOrderHeap0 = new LevelBasedVarOrderHeap(randomLiteralSelectionStrategy0);
assertEquals("random phase selection", randomLiteralSelectionStrategy0.toString());
assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
assertNotNull(levelBasedVarOrderHeap0);

RandomWalkDecorator randomWalkDecorator0 = new RandomWalkDecorator(levelBasedVarOrderHeap0, 1791.0);
assertEquals("random phase selection", randomLiteralSelectionStrategy0.toString());
assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
assertEquals(1791.0, randomWalkDecorator0.getProbability(), 0.01);
assertNotNull(randomWalkDecorator0);

randomWalkDecorator0.assignLiteral((-2835));
assertEquals("random phase selection", randomLiteralSelectionStrategy0.toString());
assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
assertEquals(1791.0, randomWalkDecorator0.getProbability(), 0.01);

Glucose21Restarts glucose21Restarts0 = new Glucose21Restarts();
assertEquals("Glucose 2.1 dynamic restart strategy", glucose21Restarts0.toString());
assertEquals(0L, glucose21Restarts0.nextRestartNumberOfConflict());
assertNotNull(glucose21Restarts0);

SearchParams searchParams1 = new SearchParams(58);
assertEquals(1.5, searchParams1.getConflictBoundIncFactor(), 0.01);
assertEquals(0.95, searchParams1.getVarDecay(), 0.01);
assertEquals(0.999, searchParams1.getClaDecay(), 0.01);
assertEquals(58, searchParams1.getInitConflictBound());
assertNotNull(searchParams1);
assertFalse(searchParams1.equals((Object)searchParams0));

glucose21Restarts0.onRestart();
assertEquals("Glucose 2.1 dynamic restart strategy", glucose21Restarts0.toString());
assertEquals(0L, glucose21Restarts0.nextRestartNumberOfConflict());

Solver<CardinalityDataStructureYanMin> solver0 = new Solver<CardinalityDataStructureYanMin>(noLearningNoHeuristics0, cardinalityDataStructureYanMin0, searchParams0, randomWalkDecorator0, glucose21Restarts0);
assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
assertEquals((-819), searchParams0.getInitConflictBound());
assertEquals("random phase selection", randomLiteralSelectionStrategy0.toString());
assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
assertEquals(1791.0, randomWalkDecorator0.getProbability(), 0.01);
assertEquals("Glucose 2.1 dynamic restart strategy", glucose21Restarts0.toString());
assertEquals(0L, glucose21Restarts0.nextRestartNumberOfConflict());
assertEquals(2, solver0.newVar());
assertEquals(1, solver0.nVars());
assertEquals(0, solver0.getPropagationLevel());
assertFalse(solver0.isVerbose());
assertEquals(0, solver0.currentDecisionLevel());
assertEquals(1, solver0.realNumberOfVariables());
assertEquals("c ", solver0.getLogPrefix());
assertFalse(solver0.isSolverKeptHot());
assertEquals(0, solver0.nConstraints());
assertFalse(solver0.isDBSimplificationAllowed());
assertEquals(2147483, solver0.getTimeout());
assertEquals(0, solver0.decisionLevel());
assertNotNull(solver0);
assertFalse(searchParams0.equals((Object)searchParams1));

int int0 = solver0.nextFreeVarId(true);
assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
assertEquals((-819), searchParams0.getInitConflictBound());
assertEquals("random phase selection", randomLiteralSelectionStrategy0.toString());
assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
assertEquals(1791.0, randomWalkDecorator0.getProbability(), 0.01);
assertEquals("Glucose 2.1 dynamic restart strategy", glucose21Restarts0.toString());
assertEquals(0L, glucose21Restarts0.nextRestartNumberOfConflict());
assertEquals(5, solver0.newVar());
assertEquals(0, solver0.getPropagationLevel());
assertFalse(solver0.isVerbose());
assertEquals(0, solver0.currentDecisionLevel());
assertEquals(4, solver0.nVars());
assertEquals(4, solver0.realNumberOfVariables());
assertEquals("c ", solver0.getLogPrefix());
assertFalse(solver0.isSolverKeptHot());
assertEquals(0, solver0.nConstraints());
assertFalse(solver0.isDBSimplificationAllowed());
assertEquals(2147483, solver0.getTimeout());
assertEquals(0, solver0.decisionLevel());
assertEquals(3, int0);
assertNotSame(searchParams0, searchParams1);
assertFalse(searchParams0.equals((Object)searchParams1));


[MASTER] 07:01:36.159 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class java.lang.AssertionError: expected:<2> but was:<1>
[MASTER] 07:01:36.169 [logback-1] WARN  JUnitAnalyzer - Failing test:
 ClauseOnlyLearning<CardinalityDataStructureYanMax> clauseOnlyLearning0 = new ClauseOnlyLearning<CardinalityDataStructureYanMax>();
assertEquals("Limit learning to clauses using watched literals only", clauseOnlyLearning0.toString());
assertNotNull(clauseOnlyLearning0);

CardinalityDataStructureYanMax cardinalityDataStructureYanMax0 = new CardinalityDataStructureYanMax();
assertNotNull(cardinalityDataStructureYanMax0);

int[] intArray0 = new int[1];
intArray0[0] = (-1054);
SubsetVarOrder subsetVarOrder0 = new SubsetVarOrder(intArray0);
assertEquals(1, intArray0.length);
assertEquals(0, subsetVarOrder0.numberOfInterestingVariables());
assertNotNull(subsetVarOrder0);
assertArrayEquals(new int[] {(-1054)}, intArray0);

double[] doubleArray0 = subsetVarOrder0.getVariableHeuristics();
assertEquals(1, intArray0.length);
assertEquals(1, doubleArray0.length);
assertEquals(0, subsetVarOrder0.numberOfInterestingVariables());
assertNotNull(doubleArray0);
assertArrayEquals(new int[] {(-1054)}, intArray0);
assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);

ArminRestarts arminRestarts0 = new ArminRestarts();
assertEquals(0L, arminRestarts0.nextRestartNumberOfConflict());
assertTrue(arminRestarts0.shouldRestart());
assertEquals("Armin Biere (Picosat) restarts strategy", arminRestarts0.toString());
assertNotNull(arminRestarts0);

Solver<CardinalityDataStructureYanMax> solver0 = new Solver<CardinalityDataStructureYanMax>(clauseOnlyLearning0, cardinalityDataStructureYanMax0, subsetVarOrder0, arminRestarts0);
assertEquals(1, intArray0.length);
assertEquals("Limit learning to clauses using watched literals only", clauseOnlyLearning0.toString());
assertEquals(0, subsetVarOrder0.numberOfInterestingVariables());
assertEquals(0L, arminRestarts0.nextRestartNumberOfConflict());
assertTrue(arminRestarts0.shouldRestart());
assertEquals("Armin Biere (Picosat) restarts strategy", arminRestarts0.toString());
assertEquals(2147483, solver0.getTimeout());
assertEquals(0, solver0.nConstraints());
assertFalse(solver0.isVerbose());
assertEquals(2, solver0.newVar());
assertFalse(solver0.isSolverKeptHot());
assertEquals(1, solver0.realNumberOfVariables());
assertEquals("c ", solver0.getLogPrefix());
assertEquals(0, solver0.currentDecisionLevel());
assertEquals(1, solver0.nVars());
assertEquals(0, solver0.getPropagationLevel());
assertEquals(0, solver0.decisionLevel());
assertFalse(solver0.isDBSimplificationAllowed());
assertNotNull(solver0);
assertArrayEquals(new int[] {(-1054)}, intArray0);

boolean boolean0 = solver0.isVerbose();
assertEquals(1, intArray0.length);
assertEquals("Limit learning to clauses using watched literals only", clauseOnlyLearning0.toString());
assertEquals(0, subsetVarOrder0.numberOfInterestingVariables());
assertEquals(0L, arminRestarts0.nextRestartNumberOfConflict());
assertTrue(arminRestarts0.shouldRestart());
assertEquals("Armin Biere (Picosat) restarts strategy", arminRestarts0.toString());
assertEquals(2147483, solver0.getTimeout());
assertEquals(0, solver0.nConstraints());
assertFalse(solver0.isVerbose());
assertFalse(solver0.isSolverKeptHot());
assertEquals(4, solver0.newVar());
assertEquals("c ", solver0.getLogPrefix());
assertEquals(3, solver0.realNumberOfVariables());
assertEquals(3, solver0.nVars());
assertEquals(0, solver0.currentDecisionLevel());
assertEquals(0, solver0.getPropagationLevel());
assertEquals(0, solver0.decisionLevel());
assertFalse(solver0.isDBSimplificationAllowed());
assertFalse(boolean0);
assertArrayEquals(new int[] {(-1054)}, intArray0);


[MASTER] 07:01:36.627 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class java.lang.AssertionError: expected:<2> but was:<1>
[MASTER] 07:01:36.632 [logback-1] WARN  JUnitAnalyzer - Failing test:
 MiniSATLearning<MixedDataStructureDanielWL> miniSATLearning0 = new MiniSATLearning<MixedDataStructureDanielWL>();
assertEquals("Learn all clauses as in MiniSAT", miniSATLearning0.toString());
assertNotNull(miniSATLearning0);

MixedDataStructureDanielWL mixedDataStructureDanielWL0 = new MixedDataStructureDanielWL();
assertNotNull(mixedDataStructureDanielWL0);

ClauseOnlyLearning<CardinalityDataStructureYanMin> clauseOnlyLearning0 = new ClauseOnlyLearning<CardinalityDataStructureYanMin>();
assertEquals("Limit learning to clauses using watched literals only", clauseOnlyLearning0.toString());
assertNotNull(clauseOnlyLearning0);

CardinalityDataStructureYanMin cardinalityDataStructureYanMin0 = new CardinalityDataStructureYanMin();
assertNotNull(cardinalityDataStructureYanMin0);

NaturalStaticOrder naturalStaticOrder0 = new NaturalStaticOrder();
assertEquals("Natural static ordering", naturalStaticOrder0.toString());
assertNotNull(naturalStaticOrder0);

FixedPeriodRestarts fixedPeriodRestarts0 = new FixedPeriodRestarts();
assertEquals(0L, fixedPeriodRestarts0.getPeriod());
assertTrue(fixedPeriodRestarts0.shouldRestart());
assertEquals(0L, fixedPeriodRestarts0.nextRestartNumberOfConflict());
assertNotNull(fixedPeriodRestarts0);

Solver<CardinalityDataStructureYanMin> solver0 = new Solver<CardinalityDataStructureYanMin>(clauseOnlyLearning0, cardinalityDataStructureYanMin0, naturalStaticOrder0, fixedPeriodRestarts0);
assertEquals("Limit learning to clauses using watched literals only", clauseOnlyLearning0.toString());
assertEquals("Natural static ordering", naturalStaticOrder0.toString());
assertEquals(0L, fixedPeriodRestarts0.getPeriod());
assertTrue(fixedPeriodRestarts0.shouldRestart());
assertEquals(0L, fixedPeriodRestarts0.nextRestartNumberOfConflict());
assertFalse(solver0.isVerbose());
assertEquals(2, solver0.newVar());
assertEquals(2147483, solver0.getTimeout());
assertEquals(0, solver0.decisionLevel());
assertFalse(solver0.isSolverKeptHot());
assertEquals("c ", solver0.getLogPrefix());
assertEquals(0, solver0.nConstraints());
assertEquals(1, solver0.realNumberOfVariables());
assertFalse(solver0.isDBSimplificationAllowed());
assertEquals(1, solver0.nVars());
assertEquals(0, solver0.currentDecisionLevel());
assertEquals(0, solver0.getPropagationLevel());
assertNotNull(solver0);

SearchParams searchParams0 = solver0.getSearchParams();
assertEquals("Limit learning to clauses using watched literals only", clauseOnlyLearning0.toString());
assertEquals("Natural static ordering", naturalStaticOrder0.toString());
assertEquals(0L, fixedPeriodRestarts0.getPeriod());
assertTrue(fixedPeriodRestarts0.shouldRestart());
assertEquals(0L, fixedPeriodRestarts0.nextRestartNumberOfConflict());
assertFalse(solver0.isVerbose());
assertEquals(2147483, solver0.getTimeout());
assertEquals(0, solver0.decisionLevel());
assertFalse(solver0.isSolverKeptHot());
assertEquals(3, solver0.realNumberOfVariables());
assertEquals("c ", solver0.getLogPrefix());
assertEquals(0, solver0.nConstraints());
assertEquals(4, solver0.newVar());
assertFalse(solver0.isDBSimplificationAllowed());
assertEquals(3, solver0.nVars());
assertEquals(0, solver0.currentDecisionLevel());
assertEquals(0, solver0.getPropagationLevel());
assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
assertEquals(100, searchParams0.getInitConflictBound());
assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
assertNotNull(searchParams0);

int int0 = searchParams0.getInitConflictBound();
assertEquals("Limit learning to clauses using watched literals only", clauseOnlyLearning0.toString());
assertEquals("Natural static ordering", naturalStaticOrder0.toString());
assertEquals(0L, fixedPeriodRestarts0.getPeriod());
assertTrue(fixedPeriodRestarts0.shouldRestart());
assertEquals(0L, fixedPeriodRestarts0.nextRestartNumberOfConflict());
assertFalse(solver0.isVerbose());
assertEquals(2147483, solver0.getTimeout());
assertEquals(0, solver0.decisionLevel());
assertFalse(solver0.isSolverKeptHot());
assertEquals("c ", solver0.getLogPrefix());
assertEquals(6, solver0.newVar());
assertEquals(0, solver0.nConstraints());
assertEquals(5, solver0.nVars());
assertFalse(solver0.isDBSimplificationAllowed());
assertEquals(5, solver0.realNumberOfVariables());
assertEquals(0, solver0.currentDecisionLevel());
assertEquals(0, solver0.getPropagationLevel());
assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
assertEquals(100, searchParams0.getInitConflictBound());
assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
assertEquals(100, int0);

FixedLengthLearning<ClausalDataStructureWL> fixedLengthLearning0 = new FixedLengthLearning<ClausalDataStructureWL>();
assertEquals(3, fixedLengthLearning0.getMaxLength());
assertNotNull(fixedLengthLearning0);

ClausalDataStructureWL clausalDataStructureWL0 = new ClausalDataStructureWL();
assertNotNull(clausalDataStructureWL0);

clausalDataStructureWL0.setUnitPropagationListener(solver0);
assertEquals("Limit learning to clauses using watched literals only", clauseOnlyLearning0.toString());
assertEquals("Natural static ordering", naturalStaticOrder0.toString());
assertEquals(0L, fixedPeriodRestarts0.getPeriod());
assertTrue(fixedPeriodRestarts0.shouldRestart());
assertEquals(0L, fixedPeriodRestarts0.nextRestartNumberOfConflict());
assertFalse(solver0.isVerbose());
assertEquals(2147483, solver0.getTimeout());
assertEquals(0, solver0.decisionLevel());
assertFalse(solver0.isSolverKeptHot());
assertEquals(7, solver0.nVars());
assertEquals("c ", solver0.getLogPrefix());
assertEquals(0, solver0.nConstraints());
assertFalse(solver0.isDBSimplificationAllowed());
assertEquals(7, solver0.realNumberOfVariables());
assertEquals(8, solver0.newVar());
assertEquals(0, solver0.currentDecisionLevel());
assertEquals(0, solver0.getPropagationLevel());

SearchParams searchParams1 = new SearchParams(100);
assertEquals(100, searchParams1.getInitConflictBound());
assertEquals(1.5, searchParams1.getConflictBoundIncFactor(), 0.01);
assertEquals(0.999, searchParams1.getClaDecay(), 0.01);
assertEquals(0.95, searchParams1.getVarDecay(), 0.01);
assertNotNull(searchParams1);
assertFalse(searchParams1.equals((Object)searchParams0));

Solver<ClausalDataStructureWL> solver1 = new Solver<ClausalDataStructureWL>(fixedLengthLearning0, clausalDataStructureWL0, searchParams1, naturalStaticOrder0, fixedPeriodRestarts0);
assertEquals("Natural static ordering", naturalStaticOrder0.toString());
assertEquals(0L, fixedPeriodRestarts0.getPeriod());
assertTrue(fixedPeriodRestarts0.shouldRestart());
assertEquals(0L, fixedPeriodRestarts0.nextRestartNumberOfConflict());
assertEquals(3, fixedLengthLearning0.getMaxLength());
assertEquals(100, searchParams1.getInitConflictBound());
assertEquals(1.5, searchParams1.getConflictBoundIncFactor(), 0.01);
assertEquals(0.999, searchParams1.getClaDecay(), 0.01);
assertEquals(0.95, searchParams1.getVarDecay(), 0.01);
assertFalse(solver1.isSolverKeptHot());
assertEquals(2147483, solver1.getTimeout());
assertFalse(solver1.isVerbose());
assertFalse(solver1.isDBSimplificationAllowed());
assertEquals(0, solver1.currentDecisionLevel());
assertEquals("c ", solver1.getLogPrefix());
assertEquals(0, solver1.getPropagationLevel());
assertEquals(0, solver1.decisionLevel());
assertEquals(1, solver1.nVars());
assertEquals(0, solver1.nConstraints());
assertEquals(2, solver1.newVar());
assertEquals(1, solver1.realNumberOfVariables());
assertNotNull(solver1);
assertFalse(searchParams1.equals((Object)searchParams0));

fixedPeriodRestarts0.reset();
assertEquals(0L, fixedPeriodRestarts0.getPeriod());
assertTrue(fixedPeriodRestarts0.shouldRestart());
assertEquals(0L, fixedPeriodRestarts0.nextRestartNumberOfConflict());

ILogAble iLogAble0 = solver1.getLogger();
assertEquals("Natural static ordering", naturalStaticOrder0.toString());
assertEquals(0L, fixedPeriodRestarts0.getPeriod());
assertTrue(fixedPeriodRestarts0.shouldRestart());
assertEquals(0L, fixedPeriodRestarts0.nextRestartNumberOfConflict());
assertEquals(3, fixedLengthLearning0.getMaxLength());
assertEquals(100, searchParams1.getInitConflictBound());
assertEquals(1.5, searchParams1.getConflictBoundIncFactor(), 0.01);
assertEquals(0.999, searchParams1.getClaDecay(), 0.01);
assertEquals(0.95, searchParams1.getVarDecay(), 0.01);
assertFalse(solver1.isSolverKeptHot());
assertEquals(2147483, solver1.getTimeout());
assertFalse(solver1.isVerbose());
assertFalse(solver1.isDBSimplificationAllowed());
assertEquals(0, solver1.currentDecisionLevel());
assertEquals(3, solver1.realNumberOfVariables());
assertEquals("c ", solver1.getLogPrefix());
assertEquals(0, solver1.getPropagationLevel());
assertEquals(0, solver1.decisionLevel());
assertEquals(3, solver1.nVars());
assertEquals(0, solver1.nConstraints());
assertEquals(4, solver1.newVar());
assertNotNull(iLogAble0);
assertNotSame(searchParams1, searchParams0);
assertFalse(searchParams1.equals((Object)searchParams0));

Solver<MixedDataStructureDanielWL> solver2 = new Solver<MixedDataStructureDanielWL>(miniSATLearning0, mixedDataStructureDanielWL0, searchParams0, naturalStaticOrder0, fixedPeriodRestarts0, iLogAble0);
assertEquals("Learn all clauses as in MiniSAT", miniSATLearning0.toString());
assertEquals("Limit learning to clauses using watched literals only", clauseOnlyLearning0.toString());
assertEquals("Natural static ordering", naturalStaticOrder0.toString());
assertEquals(0L, fixedPeriodRestarts0.getPeriod());
assertTrue(fixedPeriodRestarts0.shouldRestart());
assertEquals(0L, fixedPeriodRestarts0.nextRestartNumberOfConflict());
assertFalse(solver0.isVerbose());
assertEquals(2147483, solver0.getTimeout());
assertEquals(0, solver0.decisionLevel());
assertFalse(solver0.isSolverKeptHot());
assertEquals(9, solver0.nVars());
assertEquals("c ", solver0.getLogPrefix());
assertEquals(0, solver0.nConstraints());
assertFalse(solver0.isDBSimplificationAllowed());
assertEquals(10, solver0.newVar());
assertEquals(0, solver0.currentDecisionLevel());
assertEquals(0, solver0.getPropagationLevel());
assertEquals(9, solver0.realNumberOfVariables());
assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
assertEquals(100, searchParams0.getInitConflictBound());
assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
assertEquals(3, fixedLengthLearning0.getMaxLength());
assertEquals(100, searchParams1.getInitConflictBound());
assertEquals(1.5, searchParams1.getConflictBoundIncFactor(), 0.01);
assertEquals(0.999, searchParams1.getClaDecay(), 0.01);
assertEquals(0.95, searchParams1.getVarDecay(), 0.01);
assertFalse(solver1.isSolverKeptHot());
assertEquals(2147483, solver1.getTimeout());
assertFalse(solver1.isVerbose());
assertFalse(solver1.isDBSimplificationAllowed());
assertEquals(0, solver1.currentDecisionLevel());
assertEquals("c ", solver1.getLogPrefix());
assertEquals(0, solver1.getPropagationLevel());
assertEquals(6, solver1.newVar());
assertEquals(0, solver1.decisionLevel());
assertEquals(5, solver1.realNumberOfVariables());
assertEquals(0, solver1.nConstraints());
assertEquals(5, solver1.nVars());
assertEquals(2147483, solver2.getTimeout());
assertEquals(0, solver2.nConstraints());
assertFalse(solver2.isVerbose());
assertEquals(2, solver2.newVar());
assertFalse(solver2.isSolverKeptHot());
assertEquals("c ", solver2.getLogPrefix());
assertEquals(1, solver2.realNumberOfVariables());
assertEquals(1, solver2.nVars());
assertEquals(0, solver2.currentDecisionLevel());
assertEquals(0, solver2.getPropagationLevel());
assertEquals(0, solver2.decisionLevel());
assertFalse(solver2.isDBSimplificationAllowed());
assertNotNull(solver2);
assertFalse(searchParams0.equals((Object)searchParams1));
assertFalse(searchParams1.equals((Object)searchParams0));

solver2.reduceDB();

[MASTER] 07:01:37.115 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class java.lang.AssertionError: expected:<2> but was:<1>
[MASTER] 07:01:37.117 [logback-1] WARN  JUnitAnalyzer - Failing test:
 MiniSATLearning<MixedDataStructureDanielWLConciseBinary> miniSATLearning0 = new MiniSATLearning<MixedDataStructureDanielWLConciseBinary>();
assertEquals("Learn all clauses as in MiniSAT", miniSATLearning0.toString());
assertNotNull(miniSATLearning0);

MixedDataStructureDanielWLConciseBinary mixedDataStructureDanielWLConciseBinary0 = new MixedDataStructureDanielWLConciseBinary();
assertNotNull(mixedDataStructureDanielWLConciseBinary0);

SearchParams searchParams0 = new SearchParams((-1371.4947914), 6);
assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
assertEquals(6, searchParams0.getInitConflictBound());
assertEquals((-1371.4947914), searchParams0.getConflictBoundIncFactor(), 0.01);
assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
assertNotNull(searchParams0);

RandomLiteralSelectionStrategy randomLiteralSelectionStrategy0 = new RandomLiteralSelectionStrategy();
assertEquals("random phase selection", randomLiteralSelectionStrategy0.toString());
assertNotNull(randomLiteralSelectionStrategy0);

LevelBasedVarOrderHeap levelBasedVarOrderHeap0 = new LevelBasedVarOrderHeap(randomLiteralSelectionStrategy0);
assertEquals("random phase selection", randomLiteralSelectionStrategy0.toString());
assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
assertNotNull(levelBasedVarOrderHeap0);

boolean boolean0 = FileSystemHandling.createFolder((EvoSuiteFile) null);
assertFalse(boolean0);

RandomWalkDecorator randomWalkDecorator0 = new RandomWalkDecorator(levelBasedVarOrderHeap0, 1791.0);
assertEquals("random phase selection", randomLiteralSelectionStrategy0.toString());
assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
assertEquals(1791.0, randomWalkDecorator0.getProbability(), 0.01);
assertNotNull(randomWalkDecorator0);

int int0 = randomLiteralSelectionStrategy0.select(6);
assertEquals("random phase selection", randomLiteralSelectionStrategy0.toString());
assertEquals(13, int0);

randomWalkDecorator0.assignLiteral((-2835));
assertEquals("random phase selection", randomLiteralSelectionStrategy0.toString());
assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
assertEquals(1791.0, randomWalkDecorator0.getProbability(), 0.01);

Glucose21Restarts glucose21Restarts0 = new Glucose21Restarts();
assertEquals("Glucose 2.1 dynamic restart strategy", glucose21Restarts0.toString());
assertEquals(0L, glucose21Restarts0.nextRestartNumberOfConflict());
assertNotNull(glucose21Restarts0);

SearchParams searchParams1 = new SearchParams(58);
assertEquals(0.999, searchParams1.getClaDecay(), 0.01);
assertEquals(0.95, searchParams1.getVarDecay(), 0.01);
assertEquals(58, searchParams1.getInitConflictBound());
assertEquals(1.5, searchParams1.getConflictBoundIncFactor(), 0.01);
assertNotNull(searchParams1);
assertFalse(searchParams1.equals((Object)searchParams0));

glucose21Restarts0.onRestart();
assertEquals("Glucose 2.1 dynamic restart strategy", glucose21Restarts0.toString());
assertEquals(0L, glucose21Restarts0.nextRestartNumberOfConflict());

MUSLauncher mUSLauncher0 = new MUSLauncher();
assertEquals(0L, mUSLauncher0.getBeginTime());
assertEquals(ExitCode.UNKNOWN, mUSLauncher0.getExitCode());
assertFalse(mUSLauncher0.isSilent());
assertNotNull(mUSLauncher0);

Solver<MixedDataStructureDanielWLConciseBinary> solver0 = new Solver<MixedDataStructureDanielWLConciseBinary>(miniSATLearning0, mixedDataStructureDanielWLConciseBinary0, searchParams0, randomWalkDecorator0, glucose21Restarts0, mUSLauncher0);
assertEquals("Learn all clauses as in MiniSAT", miniSATLearning0.toString());
assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
assertEquals(6, searchParams0.getInitConflictBound());
assertEquals((-1371.4947914), searchParams0.getConflictBoundIncFactor(), 0.01);
assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
assertEquals("random phase selection", randomLiteralSelectionStrategy0.toString());
assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
assertEquals(1791.0, randomWalkDecorator0.getProbability(), 0.01);
assertEquals("Glucose 2.1 dynamic restart strategy", glucose21Restarts0.toString());
assertEquals(0L, glucose21Restarts0.nextRestartNumberOfConflict());
assertEquals(0L, mUSLauncher0.getBeginTime());
assertEquals(ExitCode.UNKNOWN, mUSLauncher0.getExitCode());
assertFalse(mUSLauncher0.isSilent());
assertEquals(0, solver0.nConstraints());
assertFalse(solver0.isDBSimplificationAllowed());
assertEquals(2147483, solver0.getTimeout());
assertEquals(2, solver0.newVar());
assertEquals(0, solver0.decisionLevel());
assertFalse(solver0.isSolverKeptHot());
assertEquals(1, solver0.nVars());
assertEquals(0, solver0.currentDecisionLevel());
assertEquals("c ", solver0.getLogPrefix());
assertEquals(0, solver0.getPropagationLevel());
assertEquals(1, solver0.realNumberOfVariables());
assertFalse(solver0.isVerbose());
assertNotNull(solver0);
assertFalse(searchParams0.equals((Object)searchParams1));

solver0.removeSubsumedConstr((IConstr) null);

[MASTER] 07:01:38.877 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class java.lang.AssertionError: expected:<2> but was:<1>
[MASTER] 07:01:38.896 [logback-1] WARN  JUnitAnalyzer - Failing test:
 PercentLengthLearning<CardinalityDataStructureYanMax> percentLengthLearning0 = new PercentLengthLearning<CardinalityDataStructureYanMax>();
assertEquals(10, percentLengthLearning0.getLimit());
assertNotNull(percentLengthLearning0);

CardinalityDataStructureYanMax cardinalityDataStructureYanMax0 = new CardinalityDataStructureYanMax();
assertNotNull(cardinalityDataStructureYanMax0);

int[] intArray0 = new int[1];
intArray0[0] = (-1054);
MixedDataStructureDanielHT mixedDataStructureDanielHT0 = new MixedDataStructureDanielHT();
assertNotNull(mixedDataStructureDanielHT0);

SearchParams searchParams0 = new SearchParams(3247);
assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
assertEquals(3247, searchParams0.getInitConflictBound());
assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
assertNotNull(searchParams0);

PositiveLiteralSelectionStrategy positiveLiteralSelectionStrategy0 = new PositiveLiteralSelectionStrategy();
assertEquals("positive phase selection", positiveLiteralSelectionStrategy0.toString());
assertNotNull(positiveLiteralSelectionStrategy0);

searchParams0.setInitConflictBound(5);
assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
assertEquals(5, searchParams0.getInitConflictBound());
assertEquals(0.999, searchParams0.getClaDecay(), 0.01);

LevelBasedVarOrderHeap levelBasedVarOrderHeap0 = new LevelBasedVarOrderHeap(positiveLiteralSelectionStrategy0);
assertEquals("positive phase selection", positiveLiteralSelectionStrategy0.toString());
assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
assertNotNull(levelBasedVarOrderHeap0);

NoRestarts noRestarts0 = new NoRestarts();
assertEquals("NoRestarts", noRestarts0.toString());
assertEquals(9223372036854775807L, noRestarts0.nextRestartNumberOfConflict());
assertFalse(noRestarts0.shouldRestart());
assertNotNull(noRestarts0);

NoLearningNoHeuristics<CardinalityDataStructure> noLearningNoHeuristics0 = new NoLearningNoHeuristics<CardinalityDataStructure>();
assertNotNull(noLearningNoHeuristics0);

CardinalityDataStructure cardinalityDataStructure0 = new CardinalityDataStructure();
assertNotNull(cardinalityDataStructure0);

Solver<CardinalityDataStructure> solver0 = new Solver<CardinalityDataStructure>(noLearningNoHeuristics0, cardinalityDataStructure0, searchParams0, levelBasedVarOrderHeap0, noRestarts0);
assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
assertEquals(5, searchParams0.getInitConflictBound());
assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
assertEquals("positive phase selection", positiveLiteralSelectionStrategy0.toString());
assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
assertEquals("NoRestarts", noRestarts0.toString());
assertEquals(9223372036854775807L, noRestarts0.nextRestartNumberOfConflict());
assertFalse(noRestarts0.shouldRestart());
assertFalse(solver0.isVerbose());
assertEquals(2, solver0.newVar());
assertEquals(2147483, solver0.getTimeout());
assertEquals(0, solver0.decisionLevel());
assertEquals("c ", solver0.getLogPrefix());
assertFalse(solver0.isSolverKeptHot());
assertEquals(1, solver0.nVars());
assertEquals(0, solver0.nConstraints());
assertEquals(1, solver0.realNumberOfVariables());
assertFalse(solver0.isDBSimplificationAllowed());
assertEquals(0, solver0.currentDecisionLevel());
assertEquals(0, solver0.getPropagationLevel());
assertNotNull(solver0);

FixedLengthLearning<CardinalityDataStructure> fixedLengthLearning0 = new FixedLengthLearning<CardinalityDataStructure>();
assertEquals(3, fixedLengthLearning0.getMaxLength());
assertNotNull(fixedLengthLearning0);

Solver<CardinalityDataStructure> solver1 = new Solver<CardinalityDataStructure>(fixedLengthLearning0, cardinalityDataStructure0, levelBasedVarOrderHeap0, noRestarts0);
assertEquals("positive phase selection", positiveLiteralSelectionStrategy0.toString());
assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
assertEquals("NoRestarts", noRestarts0.toString());
assertEquals(9223372036854775807L, noRestarts0.nextRestartNumberOfConflict());
assertFalse(noRestarts0.shouldRestart());
assertEquals(3, fixedLengthLearning0.getMaxLength());
assertFalse(solver1.isSolverKeptHot());
assertEquals(0, solver1.nConstraints());
assertFalse(solver1.isVerbose());
assertEquals(2147483, solver1.getTimeout());
assertEquals(0, solver1.decisionLevel());
assertFalse(solver1.isDBSimplificationAllowed());
assertEquals(0, solver1.currentDecisionLevel());
assertEquals(3, solver1.nVars());
assertEquals(0, solver1.getPropagationLevel());
assertEquals(4, solver1.newVar());
assertEquals(3, solver1.realNumberOfVariables());
assertEquals("c ", solver1.getLogPrefix());
assertNotNull(solver1);
assertFalse(solver1.equals((Object)solver0));

ILogAble iLogAble0 = solver1.out;
assertNotNull(iLogAble0);

PercentLengthLearning<MixedDataStructureDanielHT> percentLengthLearning1 = new PercentLengthLearning<MixedDataStructureDanielHT>(217);
assertEquals(217, percentLengthLearning1.getLimit());
assertNotNull(percentLengthLearning1);

MixedDataStructureDanielHT mixedDataStructureDanielHT1 = new MixedDataStructureDanielHT();
assertNotNull(mixedDataStructureDanielHT1);
assertFalse(mixedDataStructureDanielHT1.equals((Object)mixedDataStructureDanielHT0));

Solver<MixedDataStructureDanielHT> solver2 = new Solver<MixedDataStructureDanielHT>(percentLengthLearning1, mixedDataStructureDanielHT1, searchParams0, levelBasedVarOrderHeap0, noRestarts0, iLogAble0);
assertEquals(217, percentLengthLearning1.getLimit());
assertFalse(solver2.isDBSimplificationAllowed());
assertEquals(1, solver2.nVars());
assertEquals("c ", solver2.getLogPrefix());
assertFalse(solver2.isVerbose());
assertEquals(2, solver2.newVar());
assertEquals(1, solver2.realNumberOfVariables());
assertEquals(0, solver2.getPropagationLevel());
assertEquals(0, solver2.nConstraints());
assertFalse(solver2.isSolverKeptHot());
assertEquals(0, solver2.currentDecisionLevel());
assertEquals(2147483, solver2.getTimeout());
assertEquals(0, solver2.decisionLevel());
assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
assertEquals(5, searchParams0.getInitConflictBound());
assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
assertEquals("positive phase selection", positiveLiteralSelectionStrategy0.toString());
assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
assertEquals("NoRestarts", noRestarts0.toString());
assertEquals(9223372036854775807L, noRestarts0.nextRestartNumberOfConflict());
assertFalse(noRestarts0.shouldRestart());
assertEquals(3, fixedLengthLearning0.getMaxLength());
assertFalse(solver1.isSolverKeptHot());
assertEquals(0, solver1.nConstraints());
assertFalse(solver1.isVerbose());
assertEquals(2147483, solver1.getTimeout());
assertEquals(0, solver1.decisionLevel());
assertFalse(solver1.isDBSimplificationAllowed());
assertEquals(0, solver1.currentDecisionLevel());
assertEquals(0, solver1.getPropagationLevel());
assertEquals(5, solver1.nVars());
assertEquals(6, solver1.newVar());
assertEquals("c ", solver1.getLogPrefix());
assertEquals(5, solver1.realNumberOfVariables());
assertNotNull(solver2);
assertFalse(mixedDataStructureDanielHT1.equals((Object)mixedDataStructureDanielHT0));
assertFalse(solver1.equals((Object)solver0));

LBDConflictTimer lBDConflictTimer0 = new LBDConflictTimer(solver1, 50);
assertEquals(50, lBDConflictTimer0.bound());
assertEquals("positive phase selection", positiveLiteralSelectionStrategy0.toString());
assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
assertEquals("NoRestarts", noRestarts0.toString());
assertEquals(9223372036854775807L, noRestarts0.nextRestartNumberOfConflict());
assertFalse(noRestarts0.shouldRestart());
assertEquals(3, fixedLengthLearning0.getMaxLength());
assertFalse(solver1.isSolverKeptHot());
assertEquals(0, solver1.nConstraints());
assertFalse(solver1.isVerbose());
assertEquals(2147483, solver1.getTimeout());
assertEquals(0, solver1.decisionLevel());
assertEquals(8, solver1.newVar());
assertFalse(solver1.isDBSimplificationAllowed());
assertEquals(7, solver1.realNumberOfVariables());
assertEquals(0, solver1.currentDecisionLevel());
assertEquals(0, solver1.getPropagationLevel());
assertEquals("c ", solver1.getLogPrefix());
assertEquals(7, solver1.nVars());
assertNotNull(lBDConflictTimer0);
assertFalse(solver1.equals((Object)solver0));

lBDConflictTimer0.reset();
assertEquals(50, lBDConflictTimer0.bound());
assertEquals("positive phase selection", positiveLiteralSelectionStrategy0.toString());
assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
assertEquals("NoRestarts", noRestarts0.toString());
assertEquals(9223372036854775807L, noRestarts0.nextRestartNumberOfConflict());
assertFalse(noRestarts0.shouldRestart());
assertEquals(3, fixedLengthLearning0.getMaxLength());
assertFalse(solver1.isSolverKeptHot());
assertEquals(9, solver1.nVars());
assertEquals(0, solver1.nConstraints());
assertFalse(solver1.isVerbose());
assertEquals(2147483, solver1.getTimeout());
assertEquals(0, solver1.decisionLevel());
assertFalse(solver1.isDBSimplificationAllowed());
assertEquals(10, solver1.newVar());
assertEquals(0, solver1.currentDecisionLevel());
assertEquals(9, solver1.realNumberOfVariables());
assertEquals(0, solver1.getPropagationLevel());
assertEquals("c ", solver1.getLogPrefix());
assertNotSame(solver1, solver0);
assertFalse(solver1.equals((Object)solver0));

Solver<CardinalityDataStructureYanMax> solver3 = new Solver<CardinalityDataStructureYanMax>(percentLengthLearning0, cardinalityDataStructureYanMax0, searchParams0, levelBasedVarOrderHeap0, noRestarts0);
assertEquals(10, percentLengthLearning0.getLimit());
assertEquals(1, solver3.realNumberOfVariables());
assertEquals(2147483, solver3.getTimeout());
assertEquals("c ", solver3.getLogPrefix());
assertEquals(0, solver3.decisionLevel());
assertFalse(solver3.isSolverKeptHot());
assertEquals(1, solver3.nVars());
assertEquals(0, solver3.nConstraints());
assertEquals(2, solver3.newVar());
assertFalse(solver3.isDBSimplificationAllowed());
assertEquals(0, solver3.currentDecisionLevel());
assertEquals(0, solver3.getPropagationLevel());
assertFalse(solver3.isVerbose());
assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
assertEquals(5, searchParams0.getInitConflictBound());
assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
assertEquals("positive phase selection", positiveLiteralSelectionStrategy0.toString());
assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
assertEquals("NoRestarts", noRestarts0.toString());
assertEquals(9223372036854775807L, noRestarts0.nextRestartNumberOfConflict());
assertFalse(noRestarts0.shouldRestart());
assertNotNull(solver3);

solver3.fromLastDecisionLevel((IVecInt) null);

[MASTER] 07:01:39.366 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class java.lang.AssertionError: expected:<1> but was:<0>
[MASTER] 07:01:39.367 [logback-1] WARN  JUnitAnalyzer - Failing test:
 PercentLengthLearning<CardinalityDataStructureYanMax> percentLengthLearning0 = new PercentLengthLearning<CardinalityDataStructureYanMax>();
assertEquals(10, percentLengthLearning0.getLimit());
assertNotNull(percentLengthLearning0);

CardinalityDataStructureYanMax cardinalityDataStructureYanMax0 = new CardinalityDataStructureYanMax();
assertNotNull(cardinalityDataStructureYanMax0);

int[] intArray0 = new int[1];
intArray0[0] = (-1054);
SubsetVarOrder subsetVarOrder0 = new SubsetVarOrder(intArray0);
assertEquals(1, intArray0.length);
assertEquals(0, subsetVarOrder0.numberOfInterestingVariables());
assertNotNull(subsetVarOrder0);
assertArrayEquals(new int[] {(-1054)}, intArray0);

double[] doubleArray0 = subsetVarOrder0.getVariableHeuristics();
assertEquals(1, intArray0.length);
assertEquals(1, doubleArray0.length);
assertEquals(0, subsetVarOrder0.numberOfInterestingVariables());
assertNotNull(doubleArray0);
assertArrayEquals(new int[] {(-1054)}, intArray0);
assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);

LubyRestarts lubyRestarts0 = new LubyRestarts(0);
assertEquals(1, lubyRestarts0.luby());
assertTrue(lubyRestarts0.shouldRestart());
assertEquals(0L, lubyRestarts0.nextRestartNumberOfConflict());
assertEquals(0, lubyRestarts0.getFactor());
assertNotNull(lubyRestarts0);
assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);

Solver<CardinalityDataStructureYanMax> solver0 = new Solver<CardinalityDataStructureYanMax>(percentLengthLearning0, cardinalityDataStructureYanMax0, subsetVarOrder0, lubyRestarts0);
assertEquals(1, intArray0.length);
assertEquals(10, percentLengthLearning0.getLimit());
assertEquals(0, subsetVarOrder0.numberOfInterestingVariables());
assertEquals(1, lubyRestarts0.luby());
assertTrue(lubyRestarts0.shouldRestart());
assertEquals(0L, lubyRestarts0.nextRestartNumberOfConflict());
assertEquals(0, lubyRestarts0.getFactor());
assertEquals(1, solver0.nVars());
assertEquals(0, solver0.getPropagationLevel());
assertEquals(0, solver0.decisionLevel());
assertEquals(0, solver0.currentDecisionLevel());
assertFalse(solver0.isDBSimplificationAllowed());
assertEquals(2147483, solver0.getTimeout());
assertEquals(0, solver0.nConstraints());
assertFalse(solver0.isVerbose());
assertEquals(2, solver0.newVar());
assertFalse(solver0.isSolverKeptHot());
assertEquals(1, solver0.realNumberOfVariables());
assertEquals("c ", solver0.getLogPrefix());
assertNotNull(solver0);
assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
assertArrayEquals(new int[] {(-1054)}, intArray0);

int int0 = new Integer(0);
assertEquals(0, int0);

int int1 = solver0.getPropagationLevel();
assertEquals(1, intArray0.length);
assertEquals(10, percentLengthLearning0.getLimit());
assertEquals(0, subsetVarOrder0.numberOfInterestingVariables());
assertEquals(1, lubyRestarts0.luby());
assertTrue(lubyRestarts0.shouldRestart());
assertEquals(0L, lubyRestarts0.nextRestartNumberOfConflict());
assertEquals(0, lubyRestarts0.getFactor());
assertEquals(3, solver0.nVars());
assertEquals(0, solver0.getPropagationLevel());
assertEquals(0, solver0.decisionLevel());
assertEquals(0, solver0.currentDecisionLevel());
assertFalse(solver0.isDBSimplificationAllowed());
assertEquals(2147483, solver0.getTimeout());
assertEquals(0, solver0.nConstraints());
assertFalse(solver0.isVerbose());
assertFalse(solver0.isSolverKeptHot());
assertEquals(4, solver0.newVar());
assertEquals("c ", solver0.getLogPrefix());
assertEquals(3, solver0.realNumberOfVariables());
assertEquals(0, int1);
assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
assertArrayEquals(new int[] {(-1054)}, intArray0);
assertTrue(int1 == int0);


[MASTER] 07:01:39.793 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class java.lang.AssertionError: expected:<1> but was:<0>
[MASTER] 07:01:39.800 [logback-1] WARN  JUnitAnalyzer - Failing test:
 PercentLengthLearning<CardinalityDataStructure> percentLengthLearning0 = new PercentLengthLearning<CardinalityDataStructure>();
assertEquals(10, percentLengthLearning0.getLimit());
assertNotNull(percentLengthLearning0);

CardinalityDataStructure cardinalityDataStructure0 = new CardinalityDataStructure();
assertNotNull(cardinalityDataStructure0);

ClauseOnlyLearning<CardinalityDataStructureYanMin> clauseOnlyLearning0 = new ClauseOnlyLearning<CardinalityDataStructureYanMin>();
assertEquals("Limit learning to clauses using watched literals only", clauseOnlyLearning0.toString());
assertNotNull(clauseOnlyLearning0);

CardinalityDataStructureYanMin cardinalityDataStructureYanMin0 = new CardinalityDataStructureYanMin();
assertNotNull(cardinalityDataStructureYanMin0);

NaturalStaticOrder naturalStaticOrder0 = new NaturalStaticOrder();
assertEquals("Natural static ordering", naturalStaticOrder0.toString());
assertNotNull(naturalStaticOrder0);

FixedPeriodRestarts fixedPeriodRestarts0 = new FixedPeriodRestarts();
assertEquals(0L, fixedPeriodRestarts0.nextRestartNumberOfConflict());
assertEquals(0L, fixedPeriodRestarts0.getPeriod());
assertTrue(fixedPeriodRestarts0.shouldRestart());
assertNotNull(fixedPeriodRestarts0);

Solver<CardinalityDataStructureYanMin> solver0 = new Solver<CardinalityDataStructureYanMin>(clauseOnlyLearning0, cardinalityDataStructureYanMin0, naturalStaticOrder0, fixedPeriodRestarts0);
assertEquals("Limit learning to clauses using watched literals only", clauseOnlyLearning0.toString());
assertEquals("Natural static ordering", naturalStaticOrder0.toString());
assertEquals(0L, fixedPeriodRestarts0.nextRestartNumberOfConflict());
assertEquals(0L, fixedPeriodRestarts0.getPeriod());
assertTrue(fixedPeriodRestarts0.shouldRestart());
assertFalse(solver0.isSolverKeptHot());
assertEquals(1, solver0.realNumberOfVariables());
assertEquals(0, solver0.getPropagationLevel());
assertEquals(0, solver0.nConstraints());
assertFalse(solver0.isVerbose());
assertEquals(2, solver0.newVar());
assertEquals("c ", solver0.getLogPrefix());
assertFalse(solver0.isDBSimplificationAllowed());
assertEquals(1, solver0.nVars());
assertEquals(0, solver0.currentDecisionLevel());
assertEquals(2147483, solver0.getTimeout());
assertEquals(0, solver0.decisionLevel());
assertNotNull(solver0);

SearchParams searchParams0 = solver0.getSearchParams();
assertEquals("Limit learning to clauses using watched literals only", clauseOnlyLearning0.toString());
assertEquals("Natural static ordering", naturalStaticOrder0.toString());
assertEquals(0L, fixedPeriodRestarts0.nextRestartNumberOfConflict());
assertEquals(0L, fixedPeriodRestarts0.getPeriod());
assertTrue(fixedPeriodRestarts0.shouldRestart());
assertFalse(solver0.isSolverKeptHot());
assertEquals(0, solver0.getPropagationLevel());
assertEquals(0, solver0.nConstraints());
assertFalse(solver0.isVerbose());
assertEquals(3, solver0.realNumberOfVariables());
assertEquals(4, solver0.newVar());
assertEquals("c ", solver0.getLogPrefix());
assertEquals(3, solver0.nVars());
assertFalse(solver0.isDBSimplificationAllowed());
assertEquals(0, solver0.currentDecisionLevel());
assertEquals(2147483, solver0.getTimeout());
assertEquals(0, solver0.decisionLevel());
assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
assertEquals(100, searchParams0.getInitConflictBound());
assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
assertNotNull(searchParams0);

int int0 = searchParams0.getInitConflictBound();
assertEquals("Limit learning to clauses using watched literals only", clauseOnlyLearning0.toString());
assertEquals("Natural static ordering", naturalStaticOrder0.toString());
assertEquals(0L, fixedPeriodRestarts0.nextRestartNumberOfConflict());
assertEquals(0L, fixedPeriodRestarts0.getPeriod());
assertTrue(fixedPeriodRestarts0.shouldRestart());
assertFalse(solver0.isSolverKeptHot());
assertEquals(0, solver0.getPropagationLevel());
assertEquals(0, solver0.nConstraints());
assertFalse(solver0.isVerbose());
assertEquals(5, solver0.nVars());
assertEquals(5, solver0.realNumberOfVariables());
assertEquals("c ", solver0.getLogPrefix());
assertEquals(6, solver0.newVar());
assertFalse(solver0.isDBSimplificationAllowed());
assertEquals(0, solver0.currentDecisionLevel());
assertEquals(2147483, solver0.getTimeout());
assertEquals(0, solver0.decisionLevel());
assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
assertEquals(100, searchParams0.getInitConflictBound());
assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
assertEquals(100, int0);

Solver<CardinalityDataStructure> solver1 = new Solver<CardinalityDataStructure>(percentLengthLearning0, cardinalityDataStructure0, searchParams0, naturalStaticOrder0, fixedPeriodRestarts0);
assertEquals(10, percentLengthLearning0.getLimit());
assertEquals("Limit learning to clauses using watched literals only", clauseOnlyLearning0.toString());
assertEquals("Natural static ordering", naturalStaticOrder0.toString());
assertEquals(0L, fixedPeriodRestarts0.nextRestartNumberOfConflict());
assertEquals(0L, fixedPeriodRestarts0.getPeriod());
assertTrue(fixedPeriodRestarts0.shouldRestart());
assertFalse(solver0.isSolverKeptHot());
assertEquals(0, solver0.getPropagationLevel());
assertEquals(0, solver0.nConstraints());
assertFalse(solver0.isVerbose());
assertEquals(7, solver0.nVars());
assertEquals("c ", solver0.getLogPrefix());
assertEquals(7, solver0.realNumberOfVariables());
assertFalse(solver0.isDBSimplificationAllowed());
assertEquals(8, solver0.newVar());
assertEquals(0, solver0.currentDecisionLevel());
assertEquals(2147483, solver0.getTimeout());
assertEquals(0, solver0.decisionLevel());
assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
assertEquals(100, searchParams0.getInitConflictBound());
assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
assertEquals(2147483, solver1.getTimeout());
assertFalse(solver1.isSolverKeptHot());
assertEquals(1, solver1.nVars());
assertEquals(1, solver1.realNumberOfVariables());
assertEquals(0, solver1.nConstraints());
assertEquals(2, solver1.newVar());
assertEquals(0, solver1.currentDecisionLevel());
assertEquals("c ", solver1.getLogPrefix());
assertEquals(0, solver1.decisionLevel());
assertFalse(solver1.isDBSimplificationAllowed());
assertEquals(0, solver1.getPropagationLevel());
assertFalse(solver1.isVerbose());
assertNotNull(solver1);

solver1.clearLearntClauses();
assertEquals(10, percentLengthLearning0.getLimit());
assertEquals("Limit learning to clauses using watched literals only", clauseOnlyLearning0.toString());
assertEquals("Natural static ordering", naturalStaticOrder0.toString());
assertEquals(0L, fixedPeriodRestarts0.nextRestartNumberOfConflict());
assertEquals(0L, fixedPeriodRestarts0.getPeriod());
assertTrue(fixedPeriodRestarts0.shouldRestart());
assertFalse(solver0.isSolverKeptHot());
assertEquals(9, solver0.nVars());
assertEquals(0, solver0.getPropagationLevel());
assertEquals(0, solver0.nConstraints());
assertFalse(solver0.isVerbose());
assertEquals("c ", solver0.getLogPrefix());
assertFalse(solver0.isDBSimplificationAllowed());
assertEquals(9, solver0.realNumberOfVariables());
assertEquals(10, solver0.newVar());
assertEquals(0, solver0.currentDecisionLevel());
assertEquals(2147483, solver0.getTimeout());
assertEquals(0, solver0.decisionLevel());
assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
assertEquals(100, searchParams0.getInitConflictBound());
assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
assertEquals(2147483, solver1.getTimeout());
assertEquals(3, solver1.nVars());
assertFalse(solver1.isSolverKeptHot());
assertEquals(0, solver1.nConstraints());
assertEquals(0, solver1.currentDecisionLevel());
assertEquals(3, solver1.realNumberOfVariables());
assertEquals(4, solver1.newVar());
assertEquals("c ", solver1.getLogPrefix());
assertEquals(0, solver1.decisionLevel());
assertFalse(solver1.isDBSimplificationAllowed());
assertEquals(0, solver1.getPropagationLevel());
assertFalse(solver1.isVerbose());


[MASTER] 07:01:40.286 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class java.lang.AssertionError: expected:<1> but was:<0>
[MASTER] 07:01:40.289 [logback-1] WARN  JUnitAnalyzer - Failing test:
 PercentLengthLearning<CardinalityDataStructureYanMax> percentLengthLearning0 = new PercentLengthLearning<CardinalityDataStructureYanMax>(0);
assertEquals(0, percentLengthLearning0.getLimit());
assertNotNull(percentLengthLearning0);

CardinalityDataStructureYanMax cardinalityDataStructureYanMax0 = new CardinalityDataStructureYanMax();
assertNotNull(cardinalityDataStructureYanMax0);

SearchParams searchParams0 = new SearchParams();
assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
assertEquals(100, searchParams0.getInitConflictBound());
assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
assertNotNull(searchParams0);

int[] intArray0 = new int[1];
intArray0[0] = (-1054);
SubsetVarOrder subsetVarOrder0 = new SubsetVarOrder(intArray0);
assertEquals(1, intArray0.length);
assertEquals(0, subsetVarOrder0.numberOfInterestingVariables());
assertNotNull(subsetVarOrder0);
assertArrayEquals(new int[] {(-1054)}, intArray0);

double[] doubleArray0 = subsetVarOrder0.getVariableHeuristics();
assertEquals(1, intArray0.length);
assertEquals(1, doubleArray0.length);
assertEquals(0, subsetVarOrder0.numberOfInterestingVariables());
assertNotNull(doubleArray0);
assertArrayEquals(new int[] {(-1054)}, intArray0);
assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);

MiniSATRestarts miniSATRestarts0 = new MiniSATRestarts();
assertTrue(miniSATRestarts0.shouldRestart());
assertEquals("MiniSAT restarts strategy", miniSATRestarts0.toString());
assertEquals(0L, miniSATRestarts0.nextRestartNumberOfConflict());
assertNotNull(miniSATRestarts0);

SearchParams searchParams1 = new SearchParams(1.5, (-615));
assertEquals(0.999, searchParams1.getClaDecay(), 0.01);
assertEquals(1.5, searchParams1.getConflictBoundIncFactor(), 0.01);
assertEquals(0.95, searchParams1.getVarDecay(), 0.01);
assertEquals((-615), searchParams1.getInitConflictBound());
assertNotNull(searchParams1);
assertFalse(searchParams1.equals((Object)searchParams0));

SolverStats solverStats0 = new SolverStats();
assertEquals(0L, solverStats0.getDecisions());
assertEquals(0, solverStats0.getShortcuts());
assertEquals(0L, solverStats0.getRootSimplifications());
assertEquals(0L, solverStats0.getLearnedbinaryclauses());
assertEquals(0L, solverStats0.getIgnoredclauses());
assertEquals(0L, solverStats0.getUpdateLBD());
assertEquals(0, solverStats0.getReduceddb());
assertEquals(0L, solverStats0.getLearnedclauses());
assertEquals(0, solverStats0.getImportedUnits());
assertEquals(0L, solverStats0.getConflicts());
assertEquals(0L, solverStats0.getInspects());
assertEquals(0L, solverStats0.getLearnedternaryclauses());
assertEquals(0L, solverStats0.getReducedliterals());
assertEquals(0L, solverStats0.getLearnedliterals());
assertEquals(0L, solverStats0.getPropagations());
assertEquals(0, solverStats0.getStarts());
assertEquals(0L, solverStats0.getChangedreason());
assertNotNull(solverStats0);

miniSATRestarts0.init(searchParams1, solverStats0);
assertTrue(miniSATRestarts0.shouldRestart());
assertEquals("MiniSAT restarts strategy", miniSATRestarts0.toString());
assertEquals((-615L), miniSATRestarts0.nextRestartNumberOfConflict());
assertEquals(0.999, searchParams1.getClaDecay(), 0.01);
assertEquals(1.5, searchParams1.getConflictBoundIncFactor(), 0.01);
assertEquals(0.95, searchParams1.getVarDecay(), 0.01);
assertEquals((-615), searchParams1.getInitConflictBound());
assertEquals(0L, solverStats0.getDecisions());
assertEquals(0, solverStats0.getShortcuts());
assertEquals(0L, solverStats0.getRootSimplifications());
assertEquals(0L, solverStats0.getLearnedbinaryclauses());
assertEquals(0L, solverStats0.getIgnoredclauses());
assertEquals(0L, solverStats0.getUpdateLBD());
assertEquals(0, solverStats0.getReduceddb());
assertEquals(0L, solverStats0.getLearnedclauses());
assertEquals(0, solverStats0.getImportedUnits());
assertEquals(0L, solverStats0.getConflicts());
assertEquals(0L, solverStats0.getInspects());
assertEquals(0L, solverStats0.getLearnedternaryclauses());
assertEquals(0L, solverStats0.getReducedliterals());
assertEquals(0L, solverStats0.getLearnedliterals());
assertEquals(0L, solverStats0.getPropagations());
assertEquals(0, solverStats0.getStarts());
assertEquals(0L, solverStats0.getChangedreason());
assertNotSame(searchParams1, searchParams0);
assertFalse(searchParams1.equals((Object)searchParams0));

miniSATRestarts0.onRestart();
assertTrue(miniSATRestarts0.shouldRestart());
assertEquals("MiniSAT restarts strategy", miniSATRestarts0.toString());
assertEquals((-922L), miniSATRestarts0.nextRestartNumberOfConflict());

Solver<CardinalityDataStructureYanMax> solver0 = new Solver<CardinalityDataStructureYanMax>(percentLengthLearning0, cardinalityDataStructureYanMax0, searchParams0, subsetVarOrder0, miniSATRestarts0);
assertEquals(1, intArray0.length);
assertEquals(0, percentLengthLearning0.getLimit());
assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
assertEquals(100, searchParams0.getInitConflictBound());
assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
assertEquals(0, subsetVarOrder0.numberOfInterestingVariables());
assertTrue(miniSATRestarts0.shouldRestart());
assertEquals("MiniSAT restarts strategy", miniSATRestarts0.toString());
assertEquals((-922L), miniSATRestarts0.nextRestartNumberOfConflict());
assertFalse(solver0.isDBSimplificationAllowed());
assertEquals(0, solver0.decisionLevel());
assertFalse(solver0.isSolverKeptHot());
assertEquals(1, solver0.nVars());
assertEquals(2147483, solver0.getTimeout());
assertEquals(0, solver0.nConstraints());
assertFalse(solver0.isVerbose());
assertEquals(2, solver0.newVar());
assertEquals(1, solver0.realNumberOfVariables());
assertEquals(0, solver0.currentDecisionLevel());
assertEquals("c ", solver0.getLogPrefix());
assertEquals(0, solver0.getPropagationLevel());
assertNotNull(solver0);
assertArrayEquals(new int[] {(-1054)}, intArray0);
assertFalse(searchParams0.equals((Object)searchParams1));

int[] intArray1 = new int[8];
assertFalse(intArray1.equals((Object)intArray0));

intArray1[0] = 805;
intArray1[1] = 10;
intArray1[2] = 0;
intArray1[3] = (-844);
intArray1[4] = (-2561);
intArray1[5] = 0;
intArray1[6] = 57;
intArray1[7] = 1546;
VecInt vecInt0 = new VecInt(intArray1);
assertEquals(8, intArray1.length);
assertEquals(8, vecInt0.size());
assertEquals(1546, vecInt0.last());
assertFalse(vecInt0.isEmpty());
assertNotNull(vecInt0);
assertArrayEquals(new int[] {805, 10, 0, (-844), (-2561), 0, 57, 1546}, intArray1);
assertFalse(intArray1.equals((Object)intArray0));

IVecInt iVecInt0 = vecInt0.clone();
assertEquals(8, intArray1.length);
assertEquals(8, vecInt0.size());
assertEquals(1546, vecInt0.last());
assertFalse(vecInt0.isEmpty());
assertEquals(8, iVecInt0.size());
assertEquals(1546, iVecInt0.last());
assertFalse(iVecInt0.isEmpty());
assertNotNull(iVecInt0);
assertNotSame(vecInt0, iVecInt0);
assertNotSame(iVecInt0, vecInt0);
assertNotSame(intArray1, intArray0);
assertArrayEquals(new int[] {805, 10, 0, (-844), (-2561), 0, 57, 1546}, intArray1);
assertTrue(iVecInt0.equals((Object)vecInt0));
assertFalse(intArray1.equals((Object)intArray0));

IVecInt[] iVecIntArray0 = iVecInt0.subset((-536));
assertEquals(0, iVecIntArray0.length);
assertEquals(8, intArray1.length);
assertEquals(8, vecInt0.size());
assertEquals(1546, vecInt0.last());
assertFalse(vecInt0.isEmpty());
assertEquals(8, iVecInt0.size());
assertEquals(1546, iVecInt0.last());
assertFalse(iVecInt0.isEmpty());
assertNotNull(iVecIntArray0);
assertNotSame(vecInt0, iVecInt0);
assertNotSame(iVecInt0, vecInt0);
assertNotSame(intArray1, intArray0);
assertArrayEquals(new int[] {805, 10, 0, (-844), (-2561), 0, 57, 1546}, intArray1);
assertTrue(vecInt0.equals((Object)iVecInt0));
assertTrue(iVecInt0.equals((Object)vecInt0));
assertFalse(intArray1.equals((Object)intArray0));

solver0.fromLastDecisionLevel(iVecInt0);

[MASTER] 07:01:40.874 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class java.lang.AssertionError: expected:<1> but was:<0>
[MASTER] 07:01:40.877 [logback-1] WARN  JUnitAnalyzer - Failing test:
 ClausalDataStructureWL clausalDataStructureWL0 = new ClausalDataStructureWL();
assertNotNull(clausalDataStructureWL0);

RestartStrategy restartStrategy0 = null;
MixedDataStructureDanielWL mixedDataStructureDanielWL0 = new MixedDataStructureDanielWL();
assertNotNull(mixedDataStructureDanielWL0);

LearningStrategy<CardinalityDataStructure> learningStrategy0 = null;
CardinalityDataStructure cardinalityDataStructure0 = new CardinalityDataStructure();
assertNotNull(cardinalityDataStructure0);

NaturalStaticOrder naturalStaticOrder0 = new NaturalStaticOrder();
assertEquals("Natural static ordering", naturalStaticOrder0.toString());
assertNotNull(naturalStaticOrder0);

NegativeLiteralSelectionStrategy negativeLiteralSelectionStrategy0 = (NegativeLiteralSelectionStrategy)naturalStaticOrder0.getPhaseSelectionStrategy();
assertEquals("Natural static ordering", naturalStaticOrder0.toString());
assertEquals("negative phase selection", negativeLiteralSelectionStrategy0.toString());
assertNotNull(negativeLiteralSelectionStrategy0);

LevelBasedVarOrderHeap levelBasedVarOrderHeap0 = new LevelBasedVarOrderHeap(negativeLiteralSelectionStrategy0);
assertEquals("Natural static ordering", naturalStaticOrder0.toString());
assertEquals("negative phase selection", negativeLiteralSelectionStrategy0.toString());
assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
assertNotNull(levelBasedVarOrderHeap0);

levelBasedVarOrderHeap0.updateVarAtDecisionLevel(1686);
assertEquals("Natural static ordering", naturalStaticOrder0.toString());
assertEquals("negative phase selection", negativeLiteralSelectionStrategy0.toString());
assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());

ActiveLearning<CardinalityDataStructure> activeLearning0 = new ActiveLearning<CardinalityDataStructure>(90.62712779530594);
assertEquals(90.62712779530594, activeLearning0.getActivityPercent(), 0.01);
assertEquals(0, activeLearning0.getLimit());
assertNotNull(activeLearning0);

CardinalityDataStructure cardinalityDataStructure1 = new CardinalityDataStructure();
assertNotNull(cardinalityDataStructure1);
assertFalse(cardinalityDataStructure1.equals((Object)cardinalityDataStructure0));

SearchParams searchParams0 = new SearchParams((-2455));
assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
assertEquals((-2455), searchParams0.getInitConflictBound());
assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
assertNotNull(searchParams0);

int[] intArray0 = new int[8];
intArray0[0] = (-2455);
intArray0[1] = (-2455);
intArray0[2] = (-2455);
intArray0[3] = (-2455);
intArray0[4] = (-2455);
intArray0[5] = (-2455);
intArray0[6] = (-2455);
intArray0[7] = (-2455);
SubsetVarOrder subsetVarOrder0 = new SubsetVarOrder(intArray0);
assertEquals(8, intArray0.length);
assertEquals(0, subsetVarOrder0.numberOfInterestingVariables());
assertNotNull(subsetVarOrder0);
assertArrayEquals(new int[] {(-2455), (-2455), (-2455), (-2455), (-2455), (-2455), (-2455), (-2455)}, intArray0);

FixedPeriodRestarts fixedPeriodRestarts0 = new FixedPeriodRestarts();
assertEquals(0L, fixedPeriodRestarts0.nextRestartNumberOfConflict());
assertEquals(0L, fixedPeriodRestarts0.getPeriod());
assertTrue(fixedPeriodRestarts0.shouldRestart());
assertNotNull(fixedPeriodRestarts0);

Solver<CardinalityDataStructure> solver0 = new Solver<CardinalityDataStructure>(activeLearning0, cardinalityDataStructure1, searchParams0, subsetVarOrder0, fixedPeriodRestarts0);
assertEquals(8, intArray0.length);
assertEquals(0, subsetVarOrder0.numberOfInterestingVariables());
assertEquals(0L, fixedPeriodRestarts0.nextRestartNumberOfConflict());
assertEquals(0L, fixedPeriodRestarts0.getPeriod());
assertTrue(fixedPeriodRestarts0.shouldRestart());
assertEquals(0, solver0.getPropagationLevel());
assertEquals(0, solver0.decisionLevel());
assertEquals(0, solver0.currentDecisionLevel());
assertEquals(1, solver0.realNumberOfVariables());
assertEquals("c ", solver0.getLogPrefix());
assertFalse(solver0.isVerbose());
assertFalse(solver0.isDBSimplificationAllowed());
assertEquals(2147483, solver0.getTimeout());
assertEquals(0, solver0.nConstraints());
assertEquals(2, solver0.newVar());
assertFalse(solver0.isSolverKeptHot());
assertEquals(1, solver0.nVars());
assertEquals(90.62712779530594, activeLearning0.getActivityPercent(), 0.01);
assertEquals(0, activeLearning0.getLimit());
assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
assertEquals((-2455), searchParams0.getInitConflictBound());
assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
assertNotNull(solver0);
assertArrayEquals(new int[] {(-2455), (-2455), (-2455), (-2455), (-2455), (-2455), (-2455), (-2455)}, intArray0);
assertFalse(cardinalityDataStructure1.equals((Object)cardinalityDataStructure0));

LBDConflictTimer lBDConflictTimer0 = new LBDConflictTimer(solver0, 50);
assertEquals(8, intArray0.length);
assertEquals(0, subsetVarOrder0.numberOfInterestingVariables());
assertEquals(0L, fixedPeriodRestarts0.nextRestartNumberOfConflict());
assertEquals(0L, fixedPeriodRestarts0.getPeriod());
assertTrue(fixedPeriodRestarts0.shouldRestart());
assertEquals(0, solver0.getPropagationLevel());
assertEquals(4, solver0.newVar());
assertEquals(0, solver0.decisionLevel());
assertEquals(0, solver0.currentDecisionLevel());
assertEquals("c ", solver0.getLogPrefix());
assertEquals(3, solver0.realNumberOfVariables());
assertFalse(solver0.isVerbose());
assertFalse(solver0.isDBSimplificationAllowed());
assertEquals(2147483, solver0.getTimeout());
assertEquals(0, solver0.nConstraints());
assertEquals(3, solver0.nVars());
assertFalse(solver0.isSolverKeptHot());
assertEquals(50, lBDConflictTimer0.bound());
assertEquals(90.62712779530594, activeLearning0.getActivityPercent(), 0.01);
assertEquals(0, activeLearning0.getLimit());
assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
assertEquals((-2455), searchParams0.getInitConflictBound());
assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
assertNotNull(lBDConflictTimer0);
assertArrayEquals(new int[] {(-2455), (-2455), (-2455), (-2455), (-2455), (-2455), (-2455), (-2455)}, intArray0);
assertFalse(cardinalityDataStructure1.equals((Object)cardinalityDataStructure0));

Solver<? extends DataStructureFactory> solver1 = lBDConflictTimer0.getSolver();
assertEquals(8, intArray0.length);
assertEquals(0, subsetVarOrder0.numberOfInterestingVariables());
assertEquals(0L, fixedPeriodRestarts0.nextRestartNumberOfConflict());
assertEquals(0L, fixedPeriodRestarts0.getPeriod());
assertTrue(fixedPeriodRestarts0.shouldRestart());
assertEquals(0, solver0.getPropagationLevel());
assertEquals(0, solver0.decisionLevel());
assertEquals(0, solver0.currentDecisionLevel());
assertEquals("c ", solver0.getLogPrefix());
assertEquals(8, solver0.newVar());
assertFalse(solver0.isVerbose());
assertEquals(7, solver0.realNumberOfVariables());
assertEquals(7, solver0.nVars());
assertFalse(solver0.isDBSimplificationAllowed());
assertEquals(2147483, solver0.getTimeout());
assertEquals(0, solver0.nConstraints());
assertFalse(solver0.isSolverKeptHot());
assertEquals(50, lBDConflictTimer0.bound());
assertEquals(0, solver1.nConstraints());
assertFalse(solver1.isSolverKeptHot());
assertFalse(solver1.isVerbose());
assertFalse(solver1.isDBSimplificationAllowed());
assertEquals(2147483, solver1.getTimeout());
assertEquals(0, solver1.decisionLevel());
assertEquals("c ", solver1.getLogPrefix());
assertEquals(0, solver1.currentDecisionLevel());
assertEquals(0, solver1.getPropagationLevel());
assertEquals(6, solver1.realNumberOfVariables());
assertEquals(7, solver1.newVar());
assertEquals(6, solver1.nVars());
assertEquals(90.62712779530594, activeLearning0.getActivityPercent(), 0.01);
assertEquals(0, activeLearning0.getLimit());
assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
assertEquals((-2455), searchParams0.getInitConflictBound());
assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
assertNotNull(solver1);
assertNotSame(cardinalityDataStructure1, cardinalityDataStructure0);
assertArrayEquals(new int[] {(-2455), (-2455), (-2455), (-2455), (-2455), (-2455), (-2455), (-2455)}, intArray0);
assertFalse(cardinalityDataStructure1.equals((Object)cardinalityDataStructure0));

solver1.enqueue(0);

[MASTER] 07:01:41.426 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class java.lang.AssertionError: expected:<2> but was:<1>
[MASTER] 07:01:41.444 [logback-1] WARN  JUnitAnalyzer - Failing test:
 PercentLengthLearning<CardinalityDataStructureYanMax> percentLengthLearning0 = new PercentLengthLearning<CardinalityDataStructureYanMax>();
assertEquals(10, percentLengthLearning0.getLimit());
assertNotNull(percentLengthLearning0);

CardinalityDataStructureYanMax cardinalityDataStructureYanMax0 = new CardinalityDataStructureYanMax();
assertNotNull(cardinalityDataStructureYanMax0);

int[] intArray0 = new int[1];
intArray0[0] = (-1054);
LubyRestarts lubyRestarts0 = new LubyRestarts((-1054));
assertEquals((-1054), lubyRestarts0.getFactor());
assertTrue(lubyRestarts0.shouldRestart());
assertEquals(0L, lubyRestarts0.nextRestartNumberOfConflict());
assertEquals(1, lubyRestarts0.luby());
assertNotNull(lubyRestarts0);
assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);

Random.setNextRandom((-1054));
ClauseOnlyLearning<CardinalityDataStructureYanMin> clauseOnlyLearning0 = new ClauseOnlyLearning<CardinalityDataStructureYanMin>();
assertEquals("Limit learning to clauses using watched literals only", clauseOnlyLearning0.toString());
assertNotNull(clauseOnlyLearning0);

CardinalityDataStructureYanMin cardinalityDataStructureYanMin0 = new CardinalityDataStructureYanMin();
assertNotNull(cardinalityDataStructureYanMin0);

NaturalStaticOrder naturalStaticOrder0 = new NaturalStaticOrder();
assertEquals("Natural static ordering", naturalStaticOrder0.toString());
assertNotNull(naturalStaticOrder0);

FixedPeriodRestarts fixedPeriodRestarts0 = new FixedPeriodRestarts();
assertEquals(0L, fixedPeriodRestarts0.nextRestartNumberOfConflict());
assertEquals(0L, fixedPeriodRestarts0.getPeriod());
assertTrue(fixedPeriodRestarts0.shouldRestart());
assertNotNull(fixedPeriodRestarts0);

Solver<CardinalityDataStructureYanMin> solver0 = new Solver<CardinalityDataStructureYanMin>(clauseOnlyLearning0, cardinalityDataStructureYanMin0, naturalStaticOrder0, fixedPeriodRestarts0);
assertEquals("Limit learning to clauses using watched literals only", clauseOnlyLearning0.toString());
assertEquals("Natural static ordering", naturalStaticOrder0.toString());
assertEquals(0L, fixedPeriodRestarts0.nextRestartNumberOfConflict());
assertEquals(0L, fixedPeriodRestarts0.getPeriod());
assertTrue(fixedPeriodRestarts0.shouldRestart());
assertFalse(solver0.isVerbose());
assertEquals(2, solver0.newVar());
assertEquals(0, solver0.decisionLevel());
assertEquals(1, solver0.realNumberOfVariables());
assertEquals(2147483, solver0.getTimeout());
assertEquals("c ", solver0.getLogPrefix());
assertEquals(0, solver0.currentDecisionLevel());
assertEquals(0, solver0.getPropagationLevel());
assertFalse(solver0.isDBSimplificationAllowed());
assertEquals(0, solver0.nConstraints());
assertFalse(solver0.isSolverKeptHot());
assertEquals(1, solver0.nVars());
assertNotNull(solver0);

int[] intArray1 = solver0.findModel();
assertEquals(0, intArray1.length);
assertEquals("Limit learning to clauses using watched literals only", clauseOnlyLearning0.toString());
assertEquals("Natural static ordering", naturalStaticOrder0.toString());
assertEquals(0L, fixedPeriodRestarts0.nextRestartNumberOfConflict());
assertEquals(0L, fixedPeriodRestarts0.getPeriod());
assertTrue(fixedPeriodRestarts0.shouldRestart());
assertFalse(solver0.isVerbose());
assertEquals(0, solver0.decisionLevel());
assertEquals(2147483, solver0.getTimeout());
assertEquals(4, solver0.newVar());
assertEquals(3, solver0.realNumberOfVariables());
assertEquals("c ", solver0.getLogPrefix());
assertEquals(0, solver0.currentDecisionLevel());
assertEquals(0, solver0.getPropagationLevel());
assertFalse(solver0.isDBSimplificationAllowed());
assertEquals(3, solver0.nVars());
assertEquals(0, solver0.nConstraints());
assertFalse(solver0.isSolverKeptHot());
assertNotNull(intArray1);
assertNotSame(intArray1, intArray0);
assertArrayEquals(new int[] {}, intArray1);
assertFalse(intArray1.equals((Object)intArray0));

SearchParams searchParams0 = solver0.getSearchParams();
assertEquals("Limit learning to clauses using watched literals only", clauseOnlyLearning0.toString());
assertEquals("Natural static ordering", naturalStaticOrder0.toString());
assertEquals(0L, fixedPeriodRestarts0.nextRestartNumberOfConflict());
assertEquals(0L, fixedPeriodRestarts0.getPeriod());
assertTrue(fixedPeriodRestarts0.shouldRestart());
assertFalse(solver0.isVerbose());
assertEquals(0, solver0.decisionLevel());
assertEquals(2147483, solver0.getTimeout());
assertEquals("c ", solver0.getLogPrefix());
assertEquals(6, solver0.newVar());
assertEquals(0, solver0.currentDecisionLevel());
assertEquals(5, solver0.realNumberOfVariables());
assertEquals(0, solver0.getPropagationLevel());
assertFalse(solver0.isDBSimplificationAllowed());
assertEquals(5, solver0.nVars());
assertEquals(0, solver0.nConstraints());
assertFalse(solver0.isSolverKeptHot());
assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
assertEquals(100, searchParams0.getInitConflictBound());
assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
assertNotNull(searchParams0);

int int0 = searchParams0.getInitConflictBound();
assertEquals("Limit learning to clauses using watched literals only", clauseOnlyLearning0.toString());
assertEquals("Natural static ordering", naturalStaticOrder0.toString());
assertEquals(0L, fixedPeriodRestarts0.nextRestartNumberOfConflict());
assertEquals(0L, fixedPeriodRestarts0.getPeriod());
assertTrue(fixedPeriodRestarts0.shouldRestart());
assertFalse(solver0.isVerbose());
assertEquals(0, solver0.decisionLevel());
assertEquals(2147483, solver0.getTimeout());
assertEquals("c ", solver0.getLogPrefix());
assertEquals(0, solver0.currentDecisionLevel());
assertEquals(7, solver0.nVars());
assertEquals(0, solver0.getPropagationLevel());
assertEquals(8, solver0.newVar());
assertEquals(7, solver0.realNumberOfVariables());
assertFalse(solver0.isDBSimplificationAllowed());
assertEquals(0, solver0.nConstraints());
assertFalse(solver0.isSolverKeptHot());
assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
assertEquals(100, searchParams0.getInitConflictBound());
assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
assertEquals(100, int0);

Solver<CardinalityDataStructureYanMax> solver1 = new Solver<CardinalityDataStructureYanMax>(percentLengthLearning0, cardinalityDataStructureYanMax0, searchParams0, naturalStaticOrder0, lubyRestarts0);
assertEquals(10, percentLengthLearning0.getLimit());
assertEquals((-1054), lubyRestarts0.getFactor());
assertTrue(lubyRestarts0.shouldRestart());
assertEquals(0L, lubyRestarts0.nextRestartNumberOfConflict());
assertEquals(1, lubyRestarts0.luby());
assertEquals("Limit learning to clauses using watched literals only", clauseOnlyLearning0.toString());
assertEquals("Natural static ordering", naturalStaticOrder0.toString());
assertEquals(0L, fixedPeriodRestarts0.nextRestartNumberOfConflict());
assertEquals(0L, fixedPeriodRestarts0.getPeriod());
assertTrue(fixedPeriodRestarts0.shouldRestart());
assertFalse(solver0.isVerbose());
assertEquals(0, solver0.decisionLevel());
assertEquals(2147483, solver0.getTimeout());
assertEquals("c ", solver0.getLogPrefix());
assertEquals(0, solver0.currentDecisionLevel());
assertEquals(0, solver0.getPropagationLevel());
assertEquals(9, solver0.nVars());
assertFalse(solver0.isDBSimplificationAllowed());
assertEquals(10, solver0.newVar());
assertEquals(9, solver0.realNumberOfVariables());
assertEquals(0, solver0.nConstraints());
assertFalse(solver0.isSolverKeptHot());
assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
assertEquals(100, searchParams0.getInitConflictBound());
assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
assertEquals(1, solver1.nVars());
assertEquals("c ", solver1.getLogPrefix());
assertEquals(0, solver1.nConstraints());
assertEquals(1, solver1.realNumberOfVariables());
assertEquals(2147483, solver1.getTimeout());
assertFalse(solver1.isVerbose());
assertEquals(2, solver1.newVar());
assertEquals(0, solver1.decisionLevel());
assertFalse(solver1.isSolverKeptHot());
assertEquals(0, solver1.currentDecisionLevel());
assertEquals(0, solver1.getPropagationLevel());
assertFalse(solver1.isDBSimplificationAllowed());
assertNotNull(solver1);
assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);

VecInt vecInt0 = new VecInt(100);
assertEquals(0, vecInt0.size());
assertTrue(vecInt0.isEmpty());
assertNotNull(vecInt0);


[MASTER] 07:01:41.749 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class java.lang.AssertionError: expected:<1> but was:<0>
[MASTER] 07:01:41.752 [logback-1] WARN  JUnitAnalyzer - Failing test:
 PercentLengthLearning<MixedDataStructureDanielWL> percentLengthLearning0 = new PercentLengthLearning<MixedDataStructureDanielWL>();
assertEquals(10, percentLengthLearning0.getLimit());
assertNotNull(percentLengthLearning0);

ClauseOnlyLearning<CardinalityDataStructureYanMin> clauseOnlyLearning0 = new ClauseOnlyLearning<CardinalityDataStructureYanMin>();
assertEquals("Limit learning to clauses using watched literals only", clauseOnlyLearning0.toString());
assertNotNull(clauseOnlyLearning0);

CardinalityDataStructureYanMin cardinalityDataStructureYanMin0 = new CardinalityDataStructureYanMin();
assertNotNull(cardinalityDataStructureYanMin0);

NaturalStaticOrder naturalStaticOrder0 = new NaturalStaticOrder();
assertEquals("Natural static ordering", naturalStaticOrder0.toString());
assertNotNull(naturalStaticOrder0);

FixedPeriodRestarts fixedPeriodRestarts0 = new FixedPeriodRestarts();
assertEquals(0L, fixedPeriodRestarts0.nextRestartNumberOfConflict());
assertTrue(fixedPeriodRestarts0.shouldRestart());
assertEquals(0L, fixedPeriodRestarts0.getPeriod());
assertNotNull(fixedPeriodRestarts0);

Solver<CardinalityDataStructureYanMin> solver0 = new Solver<CardinalityDataStructureYanMin>(clauseOnlyLearning0, cardinalityDataStructureYanMin0, naturalStaticOrder0, fixedPeriodRestarts0);
assertEquals("Limit learning to clauses using watched literals only", clauseOnlyLearning0.toString());
assertEquals("Natural static ordering", naturalStaticOrder0.toString());
assertEquals(0L, fixedPeriodRestarts0.nextRestartNumberOfConflict());
assertTrue(fixedPeriodRestarts0.shouldRestart());
assertEquals(0L, fixedPeriodRestarts0.getPeriod());
assertEquals(2147483, solver0.getTimeout());
assertEquals(0, solver0.nConstraints());
assertFalse(solver0.isSolverKeptHot());
assertFalse(solver0.isVerbose());
assertEquals(0, solver0.getPropagationLevel());
assertEquals(1, solver0.nVars());
assertEquals("c ", solver0.getLogPrefix());
assertEquals(0, solver0.currentDecisionLevel());
assertFalse(solver0.isDBSimplificationAllowed());
assertEquals(0, solver0.decisionLevel());
assertEquals(1, solver0.realNumberOfVariables());
assertEquals(2, solver0.newVar());
assertNotNull(solver0);

SearchParams searchParams0 = solver0.getSearchParams();
assertEquals("Limit learning to clauses using watched literals only", clauseOnlyLearning0.toString());
assertEquals("Natural static ordering", naturalStaticOrder0.toString());
assertEquals(0L, fixedPeriodRestarts0.nextRestartNumberOfConflict());
assertTrue(fixedPeriodRestarts0.shouldRestart());
assertEquals(0L, fixedPeriodRestarts0.getPeriod());
assertEquals(2147483, solver0.getTimeout());
assertEquals(0, solver0.nConstraints());
assertFalse(solver0.isSolverKeptHot());
assertFalse(solver0.isVerbose());
assertEquals(0, solver0.getPropagationLevel());
assertEquals("c ", solver0.getLogPrefix());
assertEquals(0, solver0.currentDecisionLevel());
assertEquals(3, solver0.nVars());
assertEquals(3, solver0.realNumberOfVariables());
assertFalse(solver0.isDBSimplificationAllowed());
assertEquals(4, solver0.newVar());
assertEquals(0, solver0.decisionLevel());
assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
assertEquals(100, searchParams0.getInitConflictBound());
assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
assertNotNull(searchParams0);

int int0 = searchParams0.getInitConflictBound();
assertEquals("Limit learning to clauses using watched literals only", clauseOnlyLearning0.toString());
assertEquals("Natural static ordering", naturalStaticOrder0.toString());
assertEquals(0L, fixedPeriodRestarts0.nextRestartNumberOfConflict());
assertTrue(fixedPeriodRestarts0.shouldRestart());
assertEquals(0L, fixedPeriodRestarts0.getPeriod());
assertEquals(2147483, solver0.getTimeout());
assertEquals(0, solver0.nConstraints());
assertFalse(solver0.isSolverKeptHot());
assertFalse(solver0.isVerbose());
assertEquals(5, solver0.nVars());
assertEquals(0, solver0.getPropagationLevel());
assertEquals(5, solver0.realNumberOfVariables());
assertEquals("c ", solver0.getLogPrefix());
assertEquals(6, solver0.newVar());
assertEquals(0, solver0.currentDecisionLevel());
assertFalse(solver0.isDBSimplificationAllowed());
assertEquals(0, solver0.decisionLevel());
assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
assertEquals(100, searchParams0.getInitConflictBound());
assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
assertEquals(100, int0);

searchParams0.setVarDecay(0.0);
assertEquals("Limit learning to clauses using watched literals only", clauseOnlyLearning0.toString());
assertEquals("Natural static ordering", naturalStaticOrder0.toString());
assertEquals(0L, fixedPeriodRestarts0.nextRestartNumberOfConflict());
assertTrue(fixedPeriodRestarts0.shouldRestart());
assertEquals(0L, fixedPeriodRestarts0.getPeriod());
assertEquals(2147483, solver0.getTimeout());
assertEquals(0, solver0.nConstraints());
assertFalse(solver0.isSolverKeptHot());
assertFalse(solver0.isVerbose());
assertEquals(0, solver0.getPropagationLevel());
assertEquals(7, solver0.nVars());
assertEquals(7, solver0.realNumberOfVariables());
assertEquals(8, solver0.newVar());
assertEquals("c ", solver0.getLogPrefix());
assertEquals(0, solver0.currentDecisionLevel());
assertFalse(solver0.isDBSimplificationAllowed());
assertEquals(0, solver0.decisionLevel());
assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
assertEquals(100, searchParams0.getInitConflictBound());
assertEquals(0.0, searchParams0.getVarDecay(), 0.01);
assertEquals(0.999, searchParams0.getClaDecay(), 0.01);

BasicLauncher<Solver<MixedDataStructureDanielWLConciseBinary>> basicLauncher0 = new BasicLauncher<Solver<MixedDataStructureDanielWLConciseBinary>>((ASolverFactory<Solver<MixedDataStructureDanielWLConciseBinary>>) null);
assertFalse(basicLauncher0.isSilent());
assertEquals(ExitCode.UNKNOWN, basicLauncher0.getExitCode());
assertEquals(0L, basicLauncher0.getBeginTime());
assertNotNull(basicLauncher0);

boolean boolean0 = solver0.isSatisfiable(false);
assertEquals("Limit learning to clauses using watched literals only", clauseOnlyLearning0.toString());
assertEquals("Natural static ordering", naturalStaticOrder0.toString());
assertEquals(0L, fixedPeriodRestarts0.nextRestartNumberOfConflict());
assertTrue(fixedPeriodRestarts0.shouldRestart());
assertEquals(0L, fixedPeriodRestarts0.getPeriod());
assertEquals(2147483, solver0.getTimeout());
assertEquals(0, solver0.nConstraints());
assertFalse(solver0.isSolverKeptHot());
assertEquals(9, solver0.nVars());
assertFalse(solver0.isVerbose());
assertEquals(9, solver0.realNumberOfVariables());
assertEquals(0, solver0.getPropagationLevel());
assertEquals(10, solver0.newVar());
assertEquals("c ", solver0.getLogPrefix());
assertEquals(0, solver0.currentDecisionLevel());
assertFalse(solver0.isDBSimplificationAllowed());
assertEquals(0, solver0.decisionLevel());
assertTrue(boolean0);

basicLauncher0.log("");
assertFalse(basicLauncher0.isSilent());
assertEquals(ExitCode.UNKNOWN, basicLauncher0.getExitCode());
assertEquals(0L, basicLauncher0.getBeginTime());

basicLauncher0.log("");
assertFalse(basicLauncher0.isSilent());
assertEquals(ExitCode.UNKNOWN, basicLauncher0.getExitCode());
assertEquals(0L, basicLauncher0.getBeginTime());

basicLauncher0.log("");
assertFalse(basicLauncher0.isSilent());
assertEquals(ExitCode.UNKNOWN, basicLauncher0.getExitCode());
assertEquals(0L, basicLauncher0.getBeginTime());

Solver<MixedDataStructureDanielWL> solver1 = new Solver<MixedDataStructureDanielWL>(percentLengthLearning0, (MixedDataStructureDanielWL) null, searchParams0, naturalStaticOrder0, fixedPeriodRestarts0, basicLauncher0);

[MASTER] 07:01:42.210 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class java.lang.AssertionError: expected:<1> but was:<0>
[MASTER] 07:01:42.215 [logback-1] WARN  JUnitAnalyzer - Failing test:
 ActiveLearning<MixedDataStructureDanielWL> activeLearning0 = new ActiveLearning<MixedDataStructureDanielWL>();
assertEquals(0, activeLearning0.getLimit());
assertEquals(0.95, activeLearning0.getActivityPercent(), 0.01);
assertNotNull(activeLearning0);

MixedDataStructureDanielWL mixedDataStructureDanielWL0 = new MixedDataStructureDanielWL();
assertNotNull(mixedDataStructureDanielWL0);

NaturalStaticOrder naturalStaticOrder0 = new NaturalStaticOrder();
assertEquals("Natural static ordering", naturalStaticOrder0.toString());
assertNotNull(naturalStaticOrder0);

Solver<MixedDataStructureDanielWL> solver0 = new Solver<MixedDataStructureDanielWL>(activeLearning0, mixedDataStructureDanielWL0, (SearchParams) null, naturalStaticOrder0, (RestartStrategy) null);
assertEquals(0, activeLearning0.getLimit());
assertEquals(0.95, activeLearning0.getActivityPercent(), 0.01);
assertEquals("Natural static ordering", naturalStaticOrder0.toString());
assertEquals("c ", solver0.getLogPrefix());
assertEquals(1, solver0.nVars());
assertEquals(0, solver0.decisionLevel());
assertFalse(solver0.isVerbose());
assertFalse(solver0.isDBSimplificationAllowed());
assertEquals(0, solver0.getPropagationLevel());
assertEquals(0, solver0.currentDecisionLevel());
assertFalse(solver0.isSolverKeptHot());
assertEquals(2147483, solver0.getTimeout());
assertEquals(2, solver0.newVar());
assertEquals(0, solver0.nConstraints());
assertEquals(1, solver0.realNumberOfVariables());
assertNotNull(solver0);

SolverStats solverStats0 = solver0.getStats();
assertEquals(0, activeLearning0.getLimit());
assertEquals(0.95, activeLearning0.getActivityPercent(), 0.01);
assertEquals("Natural static ordering", naturalStaticOrder0.toString());
assertEquals("c ", solver0.getLogPrefix());
assertEquals(3, solver0.realNumberOfVariables());
assertEquals(0, solver0.decisionLevel());
assertFalse(solver0.isVerbose());
assertFalse(solver0.isDBSimplificationAllowed());
assertEquals(0, solver0.getPropagationLevel());
assertEquals(0, solver0.currentDecisionLevel());
assertFalse(solver0.isSolverKeptHot());
assertEquals(2147483, solver0.getTimeout());
assertEquals(4, solver0.newVar());
assertEquals(0, solver0.nConstraints());
assertEquals(3, solver0.nVars());
assertEquals(0, solverStats0.getReduceddb());
assertEquals(0L, solverStats0.getReducedliterals());
assertEquals(0, solverStats0.getImportedUnits());
assertEquals(0L, solverStats0.getLearnedclauses());
assertEquals(0L, solverStats0.getInspects());
assertEquals(0L, solverStats0.getConflicts());
assertEquals(0L, solverStats0.getLearnedternaryclauses());
assertEquals(0L, solverStats0.getRootSimplifications());
assertEquals(0, solverStats0.getStarts());
assertEquals(0L, solverStats0.getDecisions());
assertEquals(0L, solverStats0.getUpdateLBD());
assertEquals(0L, solverStats0.getLearnedbinaryclauses());
assertEquals(0L, solverStats0.getLearnedliterals());
assertEquals(0L, solverStats0.getChangedreason());
assertEquals(0L, solverStats0.getIgnoredclauses());
assertEquals(0, solverStats0.getShortcuts());
assertEquals(0L, solverStats0.getPropagations());
assertNotNull(solverStats0);

FixedLengthLearning<ClausalDataStructureWL> fixedLengthLearning0 = new FixedLengthLearning<ClausalDataStructureWL>((-1977));
assertEquals((-1977), fixedLengthLearning0.getMaxLength());
assertNotNull(fixedLengthLearning0);

ClausalDataStructureWL clausalDataStructureWL0 = new ClausalDataStructureWL();
assertNotNull(clausalDataStructureWL0);

clausalDataStructureWL0.setUnitPropagationListener(solver0);
assertEquals(0, activeLearning0.getLimit());
assertEquals(0.95, activeLearning0.getActivityPercent(), 0.01);
assertEquals("Natural static ordering", naturalStaticOrder0.toString());
assertEquals("c ", solver0.getLogPrefix());
assertEquals(6, solver0.newVar());
assertEquals(0, solver0.decisionLevel());
assertEquals(5, solver0.realNumberOfVariables());
assertFalse(solver0.isVerbose());
assertFalse(solver0.isDBSimplificationAllowed());
assertEquals(0, solver0.getPropagationLevel());
assertEquals(0, solver0.currentDecisionLevel());
assertFalse(solver0.isSolverKeptHot());
assertEquals(2147483, solver0.getTimeout());
assertEquals(5, solver0.nVars());
assertEquals(0, solver0.nConstraints());

ILits iLits0 = clausalDataStructureWL0.getVocabulary();
assertEquals(0, iLits0.realnVars());
assertEquals(0, iLits0.nVars());
assertNotNull(iLits0);

LubyRestarts lubyRestarts0 = new LubyRestarts(464);
assertTrue(lubyRestarts0.shouldRestart());
assertEquals(0L, lubyRestarts0.nextRestartNumberOfConflict());
assertEquals(1, lubyRestarts0.luby());
assertEquals(464, lubyRestarts0.getFactor());
assertNotNull(lubyRestarts0);
assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);

PercentLengthLearning<CardinalityDataStructureYanMax> percentLengthLearning0 = new PercentLengthLearning<CardinalityDataStructureYanMax>(0);
assertEquals(0, percentLengthLearning0.getLimit());
assertNotNull(percentLengthLearning0);

CardinalityDataStructureYanMax cardinalityDataStructureYanMax0 = new CardinalityDataStructureYanMax();
assertNotNull(cardinalityDataStructureYanMax0);

Solver<CardinalityDataStructureYanMax> solver1 = new Solver<CardinalityDataStructureYanMax>(percentLengthLearning0, cardinalityDataStructureYanMax0, naturalStaticOrder0, (RestartStrategy) null);
assertEquals("Natural static ordering", naturalStaticOrder0.toString());
assertEquals(0, percentLengthLearning0.getLimit());
assertEquals(0, solver1.currentDecisionLevel());
assertEquals("c ", solver1.getLogPrefix());
assertEquals(0, solver1.getPropagationLevel());
assertEquals(0, solver1.decisionLevel());
assertEquals(1, solver1.nVars());
assertFalse(solver1.isVerbose());
assertFalse(solver1.isDBSimplificationAllowed());
assertEquals(2147483, solver1.getTimeout());
assertFalse(solver1.isSolverKeptHot());
assertEquals(2, solver1.newVar());
assertEquals(0, solver1.nConstraints());
assertEquals(1, solver1.realNumberOfVariables());
assertNotNull(solver1);

int int0 = solver1.newVar(2);
assertEquals("Natural static ordering", naturalStaticOrder0.toString());
assertEquals(0, percentLengthLearning0.getLimit());
assertEquals(0, solver1.currentDecisionLevel());
assertEquals(3, solver1.realNumberOfVariables());
assertEquals("c ", solver1.getLogPrefix());
assertEquals(0, solver1.getPropagationLevel());
assertEquals(0, solver1.decisionLevel());
assertFalse(solver1.isVerbose());
assertFalse(solver1.isDBSimplificationAllowed());
assertEquals(2147483, solver1.getTimeout());
assertFalse(solver1.isSolverKeptHot());
assertEquals(2, solver1.nVars());
assertEquals(0, solver1.nConstraints());
assertEquals(4, solver1.newVar());
assertEquals(2, int0);

ActiveLearning<CardinalityDataStructure> activeLearning1 = new ActiveLearning<CardinalityDataStructure>();
assertEquals(0, activeLearning1.getLimit());
assertEquals(0.95, activeLearning1.getActivityPercent(), 0.01);
assertNotNull(activeLearning1);

CardinalityDataStructure cardinalityDataStructure0 = new CardinalityDataStructure();
assertNotNull(cardinalityDataStructure0);

ASolverFactory<Solver<MixedDataStructureDanielWLConciseBinary>> aSolverFactory0 = (ASolverFactory<Solver<MixedDataStructureDanielWLConciseBinary>>) mock(ASolverFactory.class, new ViolatedAssumptionAnswer());
BasicLauncher<Solver<MixedDataStructureDanielWLConciseBinary>> basicLauncher0 = new BasicLauncher<Solver<MixedDataStructureDanielWLConciseBinary>>(aSolverFactory0);
assertFalse(basicLauncher0.isSilent());
assertEquals(ExitCode.UNKNOWN, basicLauncher0.getExitCode());
assertEquals(0L, basicLauncher0.getBeginTime());
assertNotNull(basicLauncher0);

Solver<CardinalityDataStructure> solver2 = new Solver<CardinalityDataStructure>(activeLearning1, cardinalityDataStructure0, (SearchParams) null, naturalStaticOrder0, (RestartStrategy) null, basicLauncher0);
assertFalse(basicLauncher0.isSilent());
assertEquals(ExitCode.UNKNOWN, basicLauncher0.getExitCode());
assertEquals(0L, basicLauncher0.getBeginTime());
assertFalse(solver2.isSolverKeptHot());
assertEquals(0, solver2.nConstraints());
assertEquals("c ", solver2.getLogPrefix());
assertEquals(0, solver2.getPropagationLevel());
assertEquals(0, solver2.decisionLevel());
assertEquals(0, solver2.currentDecisionLevel());
assertEquals(1, solver2.realNumberOfVariables());
assertEquals(2, solver2.newVar());
assertEquals(1, solver2.nVars());
assertEquals(2147483, solver2.getTimeout());
assertFalse(solver2.isVerbose());
assertFalse(solver2.isDBSimplificationAllowed());
assertEquals("Natural static ordering", naturalStaticOrder0.toString());
assertEquals(0, activeLearning1.getLimit());
assertEquals(0.95, activeLearning1.getActivityPercent(), 0.01);
assertNotNull(solver2);

solver2.setLogPrefix("c ");
assertFalse(basicLauncher0.isSilent());
assertEquals(ExitCode.UNKNOWN, basicLauncher0.getExitCode());
assertEquals(0L, basicLauncher0.getBeginTime());
assertFalse(solver2.isSolverKeptHot());
assertEquals(0, solver2.nConstraints());
assertEquals(3, solver2.nVars());
assertEquals("c ", solver2.getLogPrefix());
assertEquals(3, solver2.realNumberOfVariables());
assertEquals(0, solver2.getPropagationLevel());
assertEquals(4, solver2.newVar());
assertEquals(0, solver2.decisionLevel());
assertEquals(0, solver2.currentDecisionLevel());
assertEquals(2147483, solver2.getTimeout());
assertFalse(solver2.isVerbose());
assertFalse(solver2.isDBSimplificationAllowed());
assertEquals("Natural static ordering", naturalStaticOrder0.toString());
assertEquals(0, activeLearning1.getLimit());
assertEquals(0.95, activeLearning1.getActivityPercent(), 0.01);

NoLearningNoHeuristics<MixedDataStructureDanielWLConciseBinary> noLearningNoHeuristics0 = new NoLearningNoHeuristics<MixedDataStructureDanielWLConciseBinary>();
assertNotNull(noLearningNoHeuristics0);

MixedDataStructureDanielWLConciseBinary mixedDataStructureDanielWLConciseBinary0 = new MixedDataStructureDanielWLConciseBinary();
assertNotNull(mixedDataStructureDanielWLConciseBinary0);

Solver<MixedDataStructureDanielWLConciseBinary> solver3 = new Solver<MixedDataStructureDanielWLConciseBinary>(noLearningNoHeuristics0, mixedDataStructureDanielWLConciseBinary0, naturalStaticOrder0, lubyRestarts0);
assertEquals("Natural static ordering", naturalStaticOrder0.toString());
assertEquals(2147483, solver3.getTimeout());
assertEquals(0, solver3.nConstraints());
assertFalse(solver3.isSolverKeptHot());
assertFalse(solver3.isVerbose());
assertEquals(0, solver3.currentDecisionLevel());
assertEquals(0, solver3.getPropagationLevel());
assertEquals(1, solver3.nVars());
assertEquals("c ", solver3.getLogPrefix());
assertFalse(solver3.isDBSimplificationAllowed());
assertEquals(0, solver3.decisionLevel());
assertEquals(1, solver3.realNumberOfVariables());
assertEquals(2, solver3.newVar());
assertTrue(lubyRestarts0.shouldRestart());
assertEquals(0L, lubyRestarts0.nextRestartNumberOfConflict());
assertEquals(1, lubyRestarts0.luby());
assertEquals(464, lubyRestarts0.getFactor());
assertNotNull(solver3);
assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);

solver3.removeSubsumedConstr((IConstr) null);

[MASTER] 07:01:42.854 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class java.lang.AssertionError: expected:<2> but was:<1>
[MASTER] 07:01:42.866 [logback-1] WARN  JUnitAnalyzer - Failing test:
 MiniSATLearning<CardinalityDataStructureYanMin> miniSATLearning0 = new MiniSATLearning<CardinalityDataStructureYanMin>();
assertEquals("Learn all clauses as in MiniSAT", miniSATLearning0.toString());
assertNotNull(miniSATLearning0);

CardinalityDataStructureYanMin cardinalityDataStructureYanMin0 = new CardinalityDataStructureYanMin();
assertNotNull(cardinalityDataStructureYanMin0);

RandomLiteralSelectionStrategy randomLiteralSelectionStrategy0 = new RandomLiteralSelectionStrategy();
assertEquals("random phase selection", randomLiteralSelectionStrategy0.toString());
assertNotNull(randomLiteralSelectionStrategy0);

LevelBasedVarOrderHeap levelBasedVarOrderHeap0 = new LevelBasedVarOrderHeap(randomLiteralSelectionStrategy0);
assertEquals("random phase selection", randomLiteralSelectionStrategy0.toString());
assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
assertNotNull(levelBasedVarOrderHeap0);

RandomWalkDecorator randomWalkDecorator0 = new RandomWalkDecorator(levelBasedVarOrderHeap0, 1791.0);
assertEquals("random phase selection", randomLiteralSelectionStrategy0.toString());
assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
assertEquals(1791.0, randomWalkDecorator0.getProbability(), 0.01);
assertNotNull(randomWalkDecorator0);

int int0 = (-2835);
randomWalkDecorator0.assignLiteral((-2835));
assertEquals("random phase selection", randomLiteralSelectionStrategy0.toString());
assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
assertEquals(1791.0, randomWalkDecorator0.getProbability(), 0.01);

Glucose21Restarts glucose21Restarts0 = new Glucose21Restarts();
assertEquals("Glucose 2.1 dynamic restart strategy", glucose21Restarts0.toString());
assertEquals(0L, glucose21Restarts0.nextRestartNumberOfConflict());
assertNotNull(glucose21Restarts0);

SearchParams searchParams0 = new SearchParams((-2835));
assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
assertEquals((-2835), searchParams0.getInitConflictBound());
assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
assertNotNull(searchParams0);

glucose21Restarts0.onRestart();
assertEquals("Glucose 2.1 dynamic restart strategy", glucose21Restarts0.toString());
assertEquals(0L, glucose21Restarts0.nextRestartNumberOfConflict());

Solver<CardinalityDataStructureYanMin> solver0 = new Solver<CardinalityDataStructureYanMin>(miniSATLearning0, cardinalityDataStructureYanMin0, randomWalkDecorator0, glucose21Restarts0);
assertEquals("Learn all clauses as in MiniSAT", miniSATLearning0.toString());
assertEquals("random phase selection", randomLiteralSelectionStrategy0.toString());
assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
assertEquals(1791.0, randomWalkDecorator0.getProbability(), 0.01);
assertEquals("Glucose 2.1 dynamic restart strategy", glucose21Restarts0.toString());
assertEquals(0L, glucose21Restarts0.nextRestartNumberOfConflict());
assertFalse(solver0.isSolverKeptHot());
assertEquals(0, solver0.nConstraints());
assertFalse(solver0.isVerbose());
assertEquals(2, solver0.newVar());
assertEquals(1, solver0.realNumberOfVariables());
assertEquals("c ", solver0.getLogPrefix());
assertEquals(1, solver0.nVars());
assertEquals(0, solver0.currentDecisionLevel());
assertEquals(0, solver0.getPropagationLevel());
assertEquals(0, solver0.decisionLevel());
assertFalse(solver0.isDBSimplificationAllowed());
assertEquals(2147483, solver0.getTimeout());
assertNotNull(solver0);

String string0 = searchParams0.toString();
assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
assertEquals((-2835), searchParams0.getInitConflictBound());
assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
assertNotNull(string0);

ClauseOnlyLearning<MixedDataStructureSingleWL> clauseOnlyLearning0 = new ClauseOnlyLearning<MixedDataStructureSingleWL>();
assertEquals("Limit learning to clauses using watched literals only", clauseOnlyLearning0.toString());
assertNotNull(clauseOnlyLearning0);

MixedDataStructureSingleWL mixedDataStructureSingleWL0 = new MixedDataStructureSingleWL();
assertNotNull(mixedDataStructureSingleWL0);

Solver<MixedDataStructureSingleWL> solver1 = new Solver<MixedDataStructureSingleWL>(clauseOnlyLearning0, mixedDataStructureSingleWL0, searchParams0, levelBasedVarOrderHeap0, glucose21Restarts0);
assertEquals("random phase selection", randomLiteralSelectionStrategy0.toString());
assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
assertEquals("Glucose 2.1 dynamic restart strategy", glucose21Restarts0.toString());
assertEquals(0L, glucose21Restarts0.nextRestartNumberOfConflict());
assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
assertEquals((-2835), searchParams0.getInitConflictBound());
assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
assertEquals("Limit learning to clauses using watched literals only", clauseOnlyLearning0.toString());
assertEquals(0, solver1.currentDecisionLevel());
assertEquals("c ", solver1.getLogPrefix());
assertEquals(0, solver1.getPropagationLevel());
assertEquals(0, solver1.decisionLevel());
assertEquals(1, solver1.nVars());
assertFalse(solver1.isVerbose());
assertFalse(solver1.isDBSimplificationAllowed());
assertEquals(2147483, solver1.getTimeout());
assertFalse(solver1.isSolverKeptHot());
assertEquals(2, solver1.newVar());
assertEquals(0, solver1.nConstraints());
assertEquals(1, solver1.realNumberOfVariables());
assertNotNull(solver1);

solver1.enqueue((-363), (Constr) null);

* Permissions denied during test execution: 
  - java.lang.RuntimePermission: 
         writeFileDescriptor: 2
* Writing tests to file
* Writing JUnit test case 'Solver_ESTest' to evosuite-tests
* Done!

* Computation finished
