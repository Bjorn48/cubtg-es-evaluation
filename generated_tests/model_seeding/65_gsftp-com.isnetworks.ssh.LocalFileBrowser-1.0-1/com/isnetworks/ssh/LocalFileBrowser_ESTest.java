/*
 * This file was automatically generated by EvoSuite
 * Fri Oct 25 11:14:39 GMT 2019
 */

package com.isnetworks.ssh;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.isnetworks.ssh.FileDisplay;
import com.isnetworks.ssh.FileListItem;
import com.isnetworks.ssh.LocalFileBrowser;
import java.io.File;
import mindbright.ssh.SSHPropertyHandler;
import mindbright.ssh.SSHSCPIndicator;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class LocalFileBrowser_ESTest extends LocalFileBrowser_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      FileDisplay fileDisplay0 = mock(FileDisplay.class, new ViolatedAssumptionAnswer());
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("South/South");
      byte[] byteArray0 = new byte[3];
      FileSystemHandling.appendDataToFile(evoSuiteFile0, byteArray0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      FileListItem fileListItem0 = new FileListItem("South", (String) null, true, 2458L, 225L);
      LocalFileBrowser localFileBrowser0 = new LocalFileBrowser(fileDisplay0, (SSHPropertyHandler) null);
      try { 
        localFileBrowser0.fileDoubleClicked(fileListItem0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Unable to refresh file list
         //
         verifyException("com.isnetworks.ssh.LocalFileBrowser", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      FileDisplay fileDisplay0 = mock(FileDisplay.class, new ViolatedAssumptionAnswer());
      FileSystemHandling.shouldAllThrowIOExceptions();
      LocalFileBrowser localFileBrowser0 = new LocalFileBrowser(fileDisplay0, (SSHPropertyHandler) null);
      localFileBrowser0.changeDirectory("");
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      FileDisplay fileDisplay0 = mock(FileDisplay.class, new ViolatedAssumptionAnswer());
      LocalFileBrowser localFileBrowser0 = new LocalFileBrowser(fileDisplay0, (SSHPropertyHandler) null);
      // Undeclared exception!
      try { 
        localFileBrowser0.rename((FileListItem) null, "..");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.isnetworks.ssh.LocalFileBrowser", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      FileDisplay fileDisplay0 = mock(FileDisplay.class, new ViolatedAssumptionAnswer());
      LocalFileBrowser localFileBrowser0 = new LocalFileBrowser(fileDisplay0, (SSHPropertyHandler) null);
      localFileBrowser0.mFileDisplay = null;
      // Undeclared exception!
      try { 
        localFileBrowser0.refresh();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.isnetworks.ssh.LocalFileBrowser", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      FileDisplay fileDisplay0 = mock(FileDisplay.class, new ViolatedAssumptionAnswer());
      LocalFileBrowser localFileBrowser0 = new LocalFileBrowser(fileDisplay0, (SSHPropertyHandler) null);
      // Undeclared exception!
      try { 
        localFileBrowser0.makeDirectory((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFile", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      FileDisplay fileDisplay0 = mock(FileDisplay.class, new ViolatedAssumptionAnswer());
      LocalFileBrowser localFileBrowser0 = new LocalFileBrowser(fileDisplay0, (SSHPropertyHandler) null);
      // Undeclared exception!
      try { 
        localFileBrowser0.fileDoubleClicked((FileListItem) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.isnetworks.ssh.LocalFileBrowser", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      FileDisplay fileDisplay0 = mock(FileDisplay.class, new ViolatedAssumptionAnswer());
      LocalFileBrowser localFileBrowser0 = new LocalFileBrowser(fileDisplay0, (SSHPropertyHandler) null);
      localFileBrowser0.mFileDisplay = null;
      // Undeclared exception!
      try { 
        localFileBrowser0.changeDirectory("");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.isnetworks.ssh.LocalFileBrowser", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      LocalFileBrowser localFileBrowser0 = null;
      try {
        localFileBrowser0 = new LocalFileBrowser((FileDisplay) null, (SSHPropertyHandler) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.isnetworks.ssh.AbstractFileBrowser", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      FileDisplay fileDisplay0 = mock(FileDisplay.class, new ViolatedAssumptionAnswer());
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("South/South");
      byte[] byteArray0 = new byte[3];
      FileSystemHandling.appendDataToFile(evoSuiteFile0, byteArray0);
      LocalFileBrowser localFileBrowser0 = new LocalFileBrowser(fileDisplay0, (SSHPropertyHandler) null);
      localFileBrowser0.changeDirectory("South");
      localFileBrowser0.refresh();
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      FileDisplay fileDisplay0 = mock(FileDisplay.class, new ViolatedAssumptionAnswer());
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile(",./,.");
      FileSystemHandling.appendLineToFile(evoSuiteFile0, ",.");
      FileListItem fileListItem0 = new FileListItem(",.", ",.", true, (-4140L), (-4140L));
      LocalFileBrowser localFileBrowser0 = new LocalFileBrowser(fileDisplay0, (SSHPropertyHandler) null);
      try { 
        localFileBrowser0.fileDoubleClicked(fileListItem0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Unable to open directory: /home/pderakhshanfar/evosuite-model-seeding-ee/evosuite-model-seeding-empirical-evaluation/,./,.
         //
         verifyException("com.isnetworks.ssh.LocalFileBrowser", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      FileDisplay fileDisplay0 = mock(FileDisplay.class, new ViolatedAssumptionAnswer());
      FileListItem fileListItem0 = new FileListItem(",.", ",.", true, (-4140L), (-4140L));
      LocalFileBrowser localFileBrowser0 = new LocalFileBrowser(fileDisplay0, (SSHPropertyHandler) null);
      try { 
        localFileBrowser0.fileDoubleClicked(fileListItem0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Unable to open directory: /home/pderakhshanfar/evosuite-model-seeding-ee/evosuite-model-seeding-empirical-evaluation/,./,.
         //
         verifyException("com.isnetworks.ssh.LocalFileBrowser", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      FileDisplay fileDisplay0 = mock(FileDisplay.class, new ViolatedAssumptionAnswer());
      FileListItem fileListItem0 = new FileListItem("", "", true, 0L, 0L);
      LocalFileBrowser localFileBrowser0 = new LocalFileBrowser(fileDisplay0, (SSHPropertyHandler) null);
      localFileBrowser0.fileDoubleClicked(fileListItem0);
      assertTrue(fileListItem0.isDirectory());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      FileDisplay fileDisplay0 = mock(FileDisplay.class, new ViolatedAssumptionAnswer());
      FileListItem fileListItem0 = new FileListItem("..", "..", true, 0L, 0L);
      LocalFileBrowser localFileBrowser0 = new LocalFileBrowser(fileDisplay0, (SSHPropertyHandler) null);
      localFileBrowser0.fileDoubleClicked(fileListItem0);
      assertEquals("..", fileListItem0.getName());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      FileDisplay fileDisplay0 = mock(FileDisplay.class, new ViolatedAssumptionAnswer());
      LocalFileBrowser localFileBrowser0 = new LocalFileBrowser(fileDisplay0, (SSHPropertyHandler) null);
      File file0 = MockFile.createTempFile("zf+.Odg=TepQ_']V/?}", "");
      FileListItem fileListItem0 = new FileListItem(file0);
      localFileBrowser0.fileDoubleClicked(fileListItem0);
      assertEquals(1392409281320L, fileListItem0.getLastModify());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      FileDisplay fileDisplay0 = mock(FileDisplay.class, new ViolatedAssumptionAnswer());
      LocalFileBrowser localFileBrowser0 = new LocalFileBrowser(fileDisplay0, (SSHPropertyHandler) null);
      File file0 = MockFile.createTempFile("zf+.Odg=TepQ_']V/?}", "");
      FileListItem fileListItem0 = new FileListItem(file0);
      try { 
        localFileBrowser0.rename(fileListItem0, "[");
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Unable to rename file /tmp/zf+.Odg=TepQ_']V?}0 to /tmp/zf+.Odg=TepQ_']V[
         //
         verifyException("com.isnetworks.ssh.LocalFileBrowser", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      FileDisplay fileDisplay0 = mock(FileDisplay.class, new ViolatedAssumptionAnswer());
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile(",./,.");
      FileSystemHandling.createFolder(evoSuiteFile0);
      MockFile mockFile0 = new MockFile(",.");
      FileListItem fileListItem0 = new FileListItem(mockFile0);
      LocalFileBrowser localFileBrowser0 = new LocalFileBrowser(fileDisplay0, (SSHPropertyHandler) null);
      localFileBrowser0.rename(fileListItem0, "MkDir");
      assertEquals(1392409281320L, fileListItem0.getLastModify());
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("Do you want to delete them?");
      FileSystemHandling.appendLineToFile(evoSuiteFile0, "com.isnetworks.ssh.FileList");
      FileDisplay fileDisplay0 = mock(FileDisplay.class, new ViolatedAssumptionAnswer());
      LocalFileBrowser localFileBrowser0 = new LocalFileBrowser(fileDisplay0, (SSHPropertyHandler) null);
      try { 
        localFileBrowser0.changeDirectory("Do you want to delete them?");
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Do you want to delete them? a file, not a directory.
         //
         verifyException("com.isnetworks.ssh.LocalFileBrowser", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      FileDisplay fileDisplay0 = mock(FileDisplay.class, new ViolatedAssumptionAnswer());
      LocalFileBrowser localFileBrowser0 = new LocalFileBrowser(fileDisplay0, (SSHPropertyHandler) null);
      try { 
        localFileBrowser0.changeDirectory("Do you want to delete them?");
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Directory Do you want to delete them? does not exist or you do not have permission to access it.
         //
         verifyException("com.isnetworks.ssh.LocalFileBrowser", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      FileDisplay fileDisplay0 = mock(FileDisplay.class, new ViolatedAssumptionAnswer());
      LocalFileBrowser localFileBrowser0 = new LocalFileBrowser(fileDisplay0, (SSHPropertyHandler) null);
      localFileBrowser0.changeDirectory((String) null);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      FileDisplay fileDisplay0 = mock(FileDisplay.class, new ViolatedAssumptionAnswer());
      LocalFileBrowser localFileBrowser0 = new LocalFileBrowser(fileDisplay0, (SSHPropertyHandler) null);
      FileListItem[] fileListItemArray0 = new FileListItem[0];
      localFileBrowser0.delete(fileListItemArray0);
      assertEquals(0, fileListItemArray0.length);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      FileDisplay fileDisplay0 = mock(FileDisplay.class, new ViolatedAssumptionAnswer());
      LocalFileBrowser localFileBrowser0 = new LocalFileBrowser(fileDisplay0, (SSHPropertyHandler) null);
      FileListItem[] fileListItemArray0 = new FileListItem[19];
      // Undeclared exception!
      try { 
        localFileBrowser0.delete(fileListItemArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.isnetworks.ssh.LocalFileBrowser", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      FileDisplay fileDisplay0 = mock(FileDisplay.class, new ViolatedAssumptionAnswer());
      LocalFileBrowser localFileBrowser0 = new LocalFileBrowser(fileDisplay0, (SSHPropertyHandler) null);
      localFileBrowser0.delete((FileListItem[]) null);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      FileDisplay fileDisplay0 = mock(FileDisplay.class, new ViolatedAssumptionAnswer());
      LocalFileBrowser localFileBrowser0 = new LocalFileBrowser(fileDisplay0, (SSHPropertyHandler) null);
      try { 
        localFileBrowser0.makeDirectory("");
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Unable to make directory: /home/pderakhshanfar/evosuite-model-seeding-ee/evosuite-model-seeding-empirical-evaluation
         //
         verifyException("com.isnetworks.ssh.LocalFileBrowser", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      FileDisplay fileDisplay0 = mock(FileDisplay.class, new ViolatedAssumptionAnswer());
      LocalFileBrowser localFileBrowser0 = new LocalFileBrowser(fileDisplay0, (SSHPropertyHandler) null);
      localFileBrowser0.makeDirectory("u+");
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      FileDisplay fileDisplay0 = mock(FileDisplay.class, new ViolatedAssumptionAnswer());
      LocalFileBrowser localFileBrowser0 = new LocalFileBrowser(fileDisplay0, (SSHPropertyHandler) null);
      SSHSCPIndicator sSHSCPIndicator0 = mock(SSHSCPIndicator.class, new ViolatedAssumptionAnswer());
      localFileBrowser0.putFiles(sSHSCPIndicator0, (FileDisplay) null, (FileDisplay) null, true);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      FileDisplay fileDisplay0 = mock(FileDisplay.class, new ViolatedAssumptionAnswer());
      LocalFileBrowser localFileBrowser0 = new LocalFileBrowser(fileDisplay0, (SSHPropertyHandler) null);
      localFileBrowser0.disconnect();
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      FileDisplay fileDisplay0 = mock(FileDisplay.class, new ViolatedAssumptionAnswer());
      LocalFileBrowser localFileBrowser0 = new LocalFileBrowser(fileDisplay0, (SSHPropertyHandler) null);
      SSHSCPIndicator sSHSCPIndicator0 = mock(SSHSCPIndicator.class, new ViolatedAssumptionAnswer());
      localFileBrowser0.getFiles(sSHSCPIndicator0, (FileDisplay) null, (FileDisplay) null, false);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      FileDisplay fileDisplay0 = mock(FileDisplay.class, new ViolatedAssumptionAnswer());
      LocalFileBrowser localFileBrowser0 = new LocalFileBrowser(fileDisplay0, (SSHPropertyHandler) null);
      localFileBrowser0.abort();
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      FileDisplay fileDisplay0 = mock(FileDisplay.class, new ViolatedAssumptionAnswer());
      LocalFileBrowser localFileBrowser0 = new LocalFileBrowser(fileDisplay0, (SSHPropertyHandler) null);
      // Undeclared exception!
      try { 
        localFileBrowser0.initialize();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.isnetworks.ssh.LocalFileBrowser", e);
      }
  }
}
