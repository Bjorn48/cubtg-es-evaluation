/*
 * This file was automatically generated by EvoSuite
 * Tue Feb 19 07:25:25 GMT 2019
 */

package org.sat4j.tools.xplain;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.HashMap;
import java.util.NoSuchElementException;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;
import org.sat4j.core.ReadOnlyVecInt;
import org.sat4j.core.VecInt;
import org.sat4j.opt.MinOneDecorator;
import org.sat4j.specs.ISolver;
import org.sat4j.specs.IVecInt;
import org.sat4j.tools.IVisualizationTool;
import org.sat4j.tools.LexicoDecorator;
import org.sat4j.tools.SingleSolutionDetector;
import org.sat4j.tools.SolutionCounter;
import org.sat4j.tools.StatisticsSolver;
import org.sat4j.tools.xplain.InsertionStrategy;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class InsertionStrategy_ESTest extends InsertionStrategy_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      InsertionStrategy insertionStrategy0 = new InsertionStrategy();
      VecInt vecInt0 = new VecInt();
      vecInt0.pop();
      StatisticsSolver statisticsSolver0 = mock(StatisticsSolver.class, new ViolatedAssumptionAnswer());
      doReturn("wq!itG.R3hn^S@FH").when(statisticsSolver0).getLogPrefix();
      doReturn(true).when(statisticsSolver0).isVerbose();
      doReturn(vecInt0).when(statisticsSolver0).unsatExplanation();
      LexicoDecorator<StatisticsSolver> lexicoDecorator0 = new LexicoDecorator<StatisticsSolver>(statisticsSolver0);
      MinOneDecorator minOneDecorator0 = new MinOneDecorator(lexicoDecorator0);
      HashMap<Integer, Object> hashMap0 = new HashMap<Integer, Object>();
      VecInt vecInt1 = new VecInt();
      // Undeclared exception!
      try { 
        insertionStrategy0.explain(minOneDecorator0, hashMap0, vecInt1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.sat4j.core.VecInt", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      InsertionStrategy insertionStrategy0 = new InsertionStrategy();
      VecInt vecInt0 = new VecInt();
      StatisticsSolver statisticsSolver0 = mock(StatisticsSolver.class, new ViolatedAssumptionAnswer());
      doReturn("wq!itG.R3hn^S@FH").when(statisticsSolver0).getLogPrefix();
      doReturn(false, true).when(statisticsSolver0).isVerbose();
      doReturn(vecInt0).when(statisticsSolver0).unsatExplanation();
      LexicoDecorator<StatisticsSolver> lexicoDecorator0 = new LexicoDecorator<StatisticsSolver>(statisticsSolver0);
      SingleSolutionDetector singleSolutionDetector0 = new SingleSolutionDetector(lexicoDecorator0);
      singleSolutionDetector0.isVerbose();
      HashMap<Integer, Object> hashMap0 = new HashMap<Integer, Object>();
      VecInt vecInt1 = new VecInt();
      // Undeclared exception!
      try { 
        insertionStrategy0.explain(lexicoDecorator0, hashMap0, vecInt1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.sat4j.core.VecInt", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      VecInt vecInt0 = new VecInt();
      StatisticsSolver statisticsSolver0 = mock(StatisticsSolver.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(statisticsSolver0).isVerbose();
      doReturn(vecInt0).when(statisticsSolver0).unsatExplanation();
      LexicoDecorator<StatisticsSolver> lexicoDecorator0 = new LexicoDecorator<StatisticsSolver>(statisticsSolver0);
      vecInt0.shrinkTo(2);
      SingleSolutionDetector singleSolutionDetector0 = new SingleSolutionDetector(lexicoDecorator0);
      InsertionStrategy insertionStrategy0 = new InsertionStrategy();
      HashMap<Integer, Object> hashMap0 = new HashMap<Integer, Object>();
      Integer integer0 = new Integer(0);
      hashMap0.put((Integer) 0, integer0);
      Integer integer1 = new Integer(664);
      hashMap0.put(integer1, (Object) null);
      VecInt vecInt1 = new VecInt();
      // Undeclared exception!
      try { 
        insertionStrategy0.explain(singleSolutionDetector0, hashMap0, vecInt1);
        fail("Expecting exception: NoSuchElementException");
      
      } catch(NoSuchElementException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.core.VecInt", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      VecInt vecInt0 = new VecInt();
      InsertionStrategy insertionStrategy0 = new InsertionStrategy();
      StatisticsSolver statisticsSolver0 = new StatisticsSolver();
      HashMap<Integer, Object> hashMap0 = new HashMap<Integer, Object>();
      // Undeclared exception!
      try { 
        insertionStrategy0.explain(statisticsSolver0, hashMap0, vecInt0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Not implemented yet!
         //
         verifyException("org.sat4j.tools.StatisticsSolver", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      InsertionStrategy insertionStrategy0 = new InsertionStrategy();
      HashMap<Integer, StatisticsSolver> hashMap0 = new HashMap<Integer, StatisticsSolver>();
      // Undeclared exception!
      try { 
        insertionStrategy0.explain((ISolver) null, hashMap0, (IVecInt) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.tools.xplain.InsertionStrategy", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      VecInt vecInt0 = new VecInt();
      StatisticsSolver statisticsSolver0 = mock(StatisticsSolver.class, new ViolatedAssumptionAnswer());
      LexicoDecorator<StatisticsSolver> lexicoDecorator0 = new LexicoDecorator<StatisticsSolver>(statisticsSolver0);
      SingleSolutionDetector singleSolutionDetector0 = new SingleSolutionDetector(lexicoDecorator0);
      vecInt0.shrinkTo((-1178));
      HashMap<Integer, Object> hashMap0 = new HashMap<Integer, Object>();
      InsertionStrategy insertionStrategy0 = new InsertionStrategy();
      // Undeclared exception!
      try { 
        insertionStrategy0.explain(singleSolutionDetector0, hashMap0, vecInt0);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.core.VecInt", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      InsertionStrategy insertionStrategy0 = new InsertionStrategy();
      VecInt vecInt0 = new VecInt();
      StatisticsSolver statisticsSolver0 = mock(StatisticsSolver.class, new ViolatedAssumptionAnswer());
      doReturn("wq!itG.R3hn^S@FH").when(statisticsSolver0).getLogPrefix();
      doReturn(true, false, false, false).when(statisticsSolver0).isSatisfiable(any(org.sat4j.specs.IVecInt.class));
      doReturn(false, true).when(statisticsSolver0).isVerbose();
      doReturn(vecInt0).when(statisticsSolver0).unsatExplanation();
      LexicoDecorator<StatisticsSolver> lexicoDecorator0 = new LexicoDecorator<StatisticsSolver>(statisticsSolver0);
      HashMap<Integer, Object> hashMap0 = new HashMap<Integer, Object>();
      Integer integer0 = new Integer(28);
      Integer integer1 = Integer.valueOf(1637);
      hashMap0.put(integer1, insertionStrategy0);
      StatisticsSolver statisticsSolver1 = new StatisticsSolver();
      hashMap0.put(integer0, statisticsSolver1);
      IVecInt iVecInt0 = insertionStrategy0.explain(lexicoDecorator0, hashMap0, vecInt0);
      assertEquals(28, iVecInt0.last());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      InsertionStrategy insertionStrategy0 = new InsertionStrategy();
      VecInt vecInt0 = new VecInt();
      StatisticsSolver statisticsSolver0 = mock(StatisticsSolver.class, new ViolatedAssumptionAnswer());
      doReturn("wq!itG.R3hn^S@FH").when(statisticsSolver0).getLogPrefix();
      doReturn(true, false, false, true, false).when(statisticsSolver0).isSatisfiable(any(org.sat4j.specs.IVecInt.class));
      doReturn(false, true, false).when(statisticsSolver0).isVerbose();
      doReturn(vecInt0).when(statisticsSolver0).unsatExplanation();
      LexicoDecorator<StatisticsSolver> lexicoDecorator0 = new LexicoDecorator<StatisticsSolver>(statisticsSolver0);
      SingleSolutionDetector singleSolutionDetector0 = new SingleSolutionDetector(lexicoDecorator0);
      singleSolutionDetector0.isVerbose();
      HashMap<Integer, Object> hashMap0 = new HashMap<Integer, Object>();
      Integer integer0 = new Integer(28);
      Integer integer1 = Integer.valueOf(1637);
      hashMap0.put(integer1, insertionStrategy0);
      StatisticsSolver statisticsSolver1 = new StatisticsSolver();
      hashMap0.put(integer0, statisticsSolver1);
      IVecInt iVecInt0 = insertionStrategy0.explain(lexicoDecorator0, hashMap0, vecInt0);
      assertEquals(1637, iVecInt0.last());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      InsertionStrategy insertionStrategy0 = new InsertionStrategy();
      VecInt vecInt0 = new VecInt();
      StatisticsSolver statisticsSolver0 = mock(StatisticsSolver.class, new ViolatedAssumptionAnswer());
      doReturn(true, false, true).when(statisticsSolver0).isSatisfiable(any(org.sat4j.specs.IVecInt.class));
      doReturn(false).when(statisticsSolver0).isVerbose();
      doReturn(vecInt0).when(statisticsSolver0).unsatExplanation();
      LexicoDecorator<StatisticsSolver> lexicoDecorator0 = new LexicoDecorator<StatisticsSolver>(statisticsSolver0);
      HashMap<Integer, Object> hashMap0 = new HashMap<Integer, Object>();
      Integer integer0 = new Integer(28);
      Integer integer1 = Integer.valueOf(1637);
      hashMap0.put(integer1, insertionStrategy0);
      StatisticsSolver statisticsSolver1 = new StatisticsSolver();
      hashMap0.put(integer0, statisticsSolver1);
      // Undeclared exception!
      try { 
        insertionStrategy0.explain(lexicoDecorator0, hashMap0, vecInt0);
        fail("Expecting exception: AssertionError");
      
      } catch(AssertionError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      InsertionStrategy insertionStrategy0 = new InsertionStrategy();
      VecInt vecInt0 = new VecInt();
      StatisticsSolver statisticsSolver0 = mock(StatisticsSolver.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(statisticsSolver0).isSatisfiable(any(org.sat4j.specs.IVecInt.class));
      doReturn(false).when(statisticsSolver0).isVerbose();
      doReturn(vecInt0).when(statisticsSolver0).unsatExplanation();
      LexicoDecorator<StatisticsSolver> lexicoDecorator0 = new LexicoDecorator<StatisticsSolver>(statisticsSolver0);
      HashMap<Integer, Object> hashMap0 = new HashMap<Integer, Object>();
      Integer integer0 = IVisualizationTool.NOTGOOD;
      StatisticsSolver statisticsSolver1 = new StatisticsSolver();
      hashMap0.put(integer0, statisticsSolver1);
      VecInt vecInt1 = new VecInt(14, 14);
      insertionStrategy0.explain(lexicoDecorator0, hashMap0, vecInt1);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      VecInt vecInt0 = new VecInt();
      StatisticsSolver statisticsSolver0 = mock(StatisticsSolver.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(statisticsSolver0).getLogPrefix();
      doReturn(false, true).when(statisticsSolver0).isVerbose();
      doReturn(vecInt0).when(statisticsSolver0).unsatExplanation();
      LexicoDecorator<StatisticsSolver> lexicoDecorator0 = new LexicoDecorator<StatisticsSolver>(statisticsSolver0);
      vecInt0.shrinkTo(2);
      SingleSolutionDetector singleSolutionDetector0 = new SingleSolutionDetector(lexicoDecorator0);
      singleSolutionDetector0.isVerbose();
      SolutionCounter solutionCounter0 = new SolutionCounter(singleSolutionDetector0);
      HashMap<Integer, Object> hashMap0 = new HashMap<Integer, Object>();
      InsertionStrategy insertionStrategy0 = new InsertionStrategy();
      // Undeclared exception!
      try { 
        insertionStrategy0.explain(solutionCounter0, hashMap0, vecInt0);
        fail("Expecting exception: AssertionError");
      
      } catch(AssertionError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      InsertionStrategy insertionStrategy0 = new InsertionStrategy();
      VecInt vecInt0 = new VecInt();
      StatisticsSolver statisticsSolver0 = mock(StatisticsSolver.class, new ViolatedAssumptionAnswer());
      doReturn(vecInt0).when(statisticsSolver0).unsatExplanation();
      LexicoDecorator<StatisticsSolver> lexicoDecorator0 = new LexicoDecorator<StatisticsSolver>(statisticsSolver0);
      SingleSolutionDetector singleSolutionDetector0 = new SingleSolutionDetector(lexicoDecorator0);
      SolutionCounter solutionCounter0 = new SolutionCounter(singleSolutionDetector0);
      vecInt0.push((-855));
      HashMap<Integer, Object> hashMap0 = new HashMap<Integer, Object>();
      ReadOnlyVecInt readOnlyVecInt0 = new ReadOnlyVecInt(vecInt0);
      IVecInt iVecInt0 = insertionStrategy0.explain(solutionCounter0, hashMap0, readOnlyVecInt0);
      assertEquals(1, vecInt0.size());
      assertNotSame(vecInt0, iVecInt0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      InsertionStrategy insertionStrategy0 = new InsertionStrategy();
      String string0 = insertionStrategy0.toString();
      assertEquals("Replay (Insertion-based) minimization strategy", string0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      InsertionStrategy insertionStrategy0 = new InsertionStrategy();
      insertionStrategy0.cancelExplanationComputation();
      assertEquals("Replay (Insertion-based) minimization strategy", insertionStrategy0.toString());
  }
}
