/*
 * This file was automatically generated by EvoSuite
 * Mon Oct 28 16:01:33 GMT 2019
 */

package org.dom4j.tree;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.List;
import org.dom4j.Comment;
import org.dom4j.Element;
import org.dom4j.Namespace;
import org.dom4j.Node;
import org.dom4j.NodeType;
import org.dom4j.ProcessingInstruction;
import org.dom4j.QName;
import org.dom4j.bean.BeanAttributeList;
import org.dom4j.bean.BeanElement;
import org.dom4j.dom.DOMComment;
import org.dom4j.dom.DOMDocument;
import org.dom4j.dom.DOMElement;
import org.dom4j.dom.DOMNamespace;
import org.dom4j.tree.AbstractBranch;
import org.dom4j.tree.BackedList;
import org.dom4j.tree.BaseElement;
import org.dom4j.tree.DefaultComment;
import org.dom4j.tree.DefaultDocument;
import org.dom4j.tree.DefaultElement;
import org.dom4j.tree.DefaultProcessingInstruction;
import org.dom4j.tree.DefaultText;
import org.dom4j.tree.NamespaceStack;
import org.dom4j.util.IndexedElement;
import org.dom4j.util.NonLazyElement;
import org.dom4j.util.UserDataElement;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class AbstractBranch_ESTest extends AbstractBranch_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      NamespaceStack namespaceStack0 = new NamespaceStack();
      Namespace namespace0 = namespaceStack0.addNamespace("XH7B<\"", "org.dom4j.tree.AbstractBranch");
      DOMElement dOMElement0 = new DOMElement("org.dom4j.tree.AbstractBranch", namespace0);
      dOMElement0.appendContent(dOMElement0);
      assertEquals(NodeType.ELEMENT_NODE, dOMElement0.getNodeTypeEnum());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      DOMDocument dOMDocument0 = new DOMDocument();
      NonLazyElement nonLazyElement0 = new NonLazyElement("");
      dOMDocument0.add((Node) nonLazyElement0);
      assertFalse(nonLazyElement0.isReadOnly());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      DOMDocument dOMDocument0 = new DOMDocument("x#+!:A/{SAiz)U");
      NonLazyElement nonLazyElement0 = new NonLazyElement("x#+!:A/{SAiz)U");
      dOMDocument0.add((Element) nonLazyElement0);
      assertFalse(nonLazyElement0.isReadOnly());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      QName qName0 = QName.get("+38^b3mV4+\"A,,>", "+38^b3mV4+\"A,,>");
      BeanElement beanElement0 = new BeanElement(qName0);
      DOMComment dOMComment0 = new DOMComment("i#9xzSlj");
      beanElement0.add((Comment) dOMComment0);
      assertEquals("#comment", dOMComment0.getNodeName());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      DefaultDocument defaultDocument0 = new DefaultDocument();
      defaultDocument0.contentRemoved();
      assertFalse(defaultDocument0.isReadOnly());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      DOMDocument dOMDocument0 = new DOMDocument("]`MhqvT/c8I");
      DefaultProcessingInstruction defaultProcessingInstruction0 = new DefaultProcessingInstruction("", "QP9R");
      dOMDocument0.add((ProcessingInstruction) defaultProcessingInstruction0);
      assertTrue(defaultProcessingInstruction0.supportsParent());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      QName qName0 = QName.get("+oJBYWRO&Y", ":l");
      BaseElement baseElement0 = new BaseElement(qName0);
      Element element0 = baseElement0.addElement(":l", "[1Fbe");
      boolean boolean0 = baseElement0.remove((Node) element0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Namespace namespace0 = Namespace.NO_NAMESPACE;
      QName qName0 = new QName("ntit", namespace0, "");
      BaseElement baseElement0 = new BaseElement("p~~~#*P2kjAHP\"nrVR");
      IndexedElement indexedElement0 = new IndexedElement(qName0, 3214);
      boolean boolean0 = baseElement0.remove((Node) indexedElement0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      IndexedElement indexedElement0 = new IndexedElement((QName) null);
      boolean boolean0 = indexedElement0.remove((Element) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      BaseElement baseElement0 = new BaseElement("orgSdom4j.tree.NamespaceCache");
      DefaultDocument defaultDocument0 = new DefaultDocument(baseElement0);
      DefaultComment defaultComment0 = new DefaultComment(baseElement0, "orgSdom4j.tree.NamespaceCache");
      defaultDocument0.add((Node) defaultComment0);
      boolean boolean0 = defaultDocument0.remove((Comment) defaultComment0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      DOMDocument dOMDocument0 = new DOMDocument();
      DefaultProcessingInstruction defaultProcessingInstruction0 = new DefaultProcessingInstruction(" ", " [Element: <");
      dOMDocument0.add((ProcessingInstruction) defaultProcessingInstruction0);
      int int0 = dOMDocument0.nodeCount();
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      UserDataElement userDataElement0 = new UserDataElement(":x=Z1lcGJEfw^]L");
      Node node0 = userDataElement0.node((-1262));
      assertNull(node0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      BaseElement baseElement0 = new BaseElement("orgSdom4j.tree.NamespaceCache");
      baseElement0.setText("orgSdom4j.tree.NamespaceCache");
      Node node0 = baseElement0.node(0);
      assertTrue(node0.supportsParent());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      UserDataElement userDataElement0 = new UserDataElement("Invalid node type. Cannot add node: ");
      boolean boolean0 = userDataElement0.isReadOnly();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      NonLazyElement nonLazyElement0 = new NonLazyElement("Y@%`+ZI");
      DefaultDocument defaultDocument0 = new DefaultDocument();
      defaultDocument0.add((Node) nonLazyElement0);
      int int0 = defaultDocument0.indexOf(nonLazyElement0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      BaseElement baseElement0 = new BaseElement("org.dom4j.tree.NamespaceCache");
      Element element0 = baseElement0.addNamespace("]mS}gchdsN]#iBj", "org.dom4j.tree.AbstractBranch");
      baseElement0.add(element0);
      int int0 = baseElement0.indexOf(element0);
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      IndexedElement indexedElement0 = new IndexedElement("");
      indexedElement0.addElement("", "");
      boolean boolean0 = indexedElement0.hasContent();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      DOMNamespace dOMNamespace0 = new DOMNamespace("T.~T&o)V[", "~");
      BeanElement beanElement0 = new BeanElement("T.~T&o)V[", dOMNamespace0, dOMNamespace0);
      boolean boolean0 = beanElement0.hasContent();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      BaseElement baseElement0 = new BaseElement("EDU.oswego.cs.dl.util.concurrent.ConcurrentReaderHashMap");
      baseElement0.setText("EDU.oswego.cs.dl.util.concurrent.ConcurrentReaderHashMap");
      String string0 = baseElement0.getText();
      assertEquals("EDU.oswego.cs.dl.util.concurrent.ConcurrentReaderHashMap", string0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      DefaultDocument defaultDocument0 = new DefaultDocument();
      DOMNamespace dOMNamespace0 = new DOMNamespace("org.dom4j.bean.BeanDocumentFactory", "3jl)");
      QName qName0 = new QName("HD;.$:TrvFmdxgnEwN", dOMNamespace0, (String) null);
      BeanElement beanElement0 = new BeanElement(qName0);
      DefaultText defaultText0 = new DefaultText(beanElement0, "3jl)");
      String string0 = defaultDocument0.getContentAsText(defaultText0);
      assertEquals("3jl)", string0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      BaseElement baseElement0 = new BaseElement("org.dom4j.tree.NamespaceCache");
      IndexedElement indexedElement0 = new IndexedElement("R~G/`9Q~N");
      DefaultDocument defaultDocument0 = new DefaultDocument(baseElement0);
      BeanElement beanElement0 = new BeanElement("R~G/`9Q~N", indexedElement0);
      String string0 = defaultDocument0.getContentAsText(beanElement0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Namespace namespace0 = Namespace.NO_NAMESPACE;
      QName qName0 = new QName("ntit", namespace0, "");
      DefaultElement defaultElement0 = new DefaultElement(qName0, 1);
      BaseElement baseElement0 = new BaseElement("p~~~#*P2kjAHP\"nrVR");
      String string0 = defaultElement0.elementID(baseElement0);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      DefaultDocument defaultDocument0 = new DefaultDocument();
      BackedList<DefaultComment> backedList0 = defaultDocument0.createResultList();
      assertEquals(0, backedList0.size());
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      DOMDocument dOMDocument0 = new DOMDocument();
      List<Node> list0 = ((AbstractBranch)dOMDocument0).createContentList();
      assertEquals(0, list0.size());
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      DefaultDocument defaultDocument0 = new DefaultDocument();
      defaultDocument0.addComment("");
      List<Node> list0 = defaultDocument0.content();
      assertEquals(1, list0.size());
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      BaseElement baseElement0 = new BaseElement("org.dom4j.tree.NamespaceCache");
      Element element0 = baseElement0.addElement("]mS}gchdsN]#iBj");
      assertEquals("Element", element0.getNodeTypeName());
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      DefaultDocument defaultDocument0 = new DefaultDocument("orgSdom4j.tree.NamespaceCache");
      // Undeclared exception!
      try { 
        defaultDocument0.setProcessingInstructions((List<ProcessingInstruction>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.dom4j.tree.AbstractBranch", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      QName qName0 = new QName((String) null);
      DefaultElement defaultElement0 = new DefaultElement(qName0);
      BeanElement beanElement0 = new BeanElement("", defaultElement0);
      BeanAttributeList beanAttributeList0 = new BeanAttributeList(beanElement0);
      // Undeclared exception!
      try { 
        beanElement0.setProcessingInstructions(beanAttributeList0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // org.dom4j.bean.BeanAttribute cannot be cast to org.dom4j.ProcessingInstruction
         //
         verifyException("org.dom4j.tree.AbstractBranch", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      DOMDocument dOMDocument0 = new DOMDocument();
      // Undeclared exception!
      try { 
        dOMDocument0.remove((Node) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.dom4j.tree.AbstractBranch", e);
      }
  }
}
