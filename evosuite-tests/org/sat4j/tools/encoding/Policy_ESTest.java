/*
 * This file was automatically generated by EvoSuite
 * Sun Feb 17 12:55:35 GMT 2019
 */

package org.sat4j.tools.encoding;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockPrintWriter;
import org.junit.runner.RunWith;
import org.sat4j.LightFactory;
import org.sat4j.core.ASolverFactory;
import org.sat4j.core.VecInt;
import org.sat4j.minisat.constraints.MixedDataStructureDanielWL;
import org.sat4j.minisat.constraints.card.AtLeast;
import org.sat4j.minisat.core.SearchParams;
import org.sat4j.minisat.core.Solver;
import org.sat4j.minisat.learning.ActiveLearning;
import org.sat4j.minisat.learning.MiniSATLearning;
import org.sat4j.minisat.learning.NoLearningButHeuristics;
import org.sat4j.minisat.orders.LevelBasedVarOrderHeap;
import org.sat4j.minisat.orders.NaturalStaticOrder;
import org.sat4j.minisat.orders.PureOrder;
import org.sat4j.minisat.orders.TabuListDecorator;
import org.sat4j.minisat.orders.VarOrderHeap;
import org.sat4j.minisat.restarts.Glucose21Restarts;
import org.sat4j.minisat.restarts.LubyRestarts;
import org.sat4j.minisat.restarts.MiniSATRestarts;
import org.sat4j.opt.MaxSatDecorator;
import org.sat4j.opt.MinOneDecorator;
import org.sat4j.specs.IConstr;
import org.sat4j.specs.ISolver;
import org.sat4j.specs.IVecInt;
import org.sat4j.tools.AbstractMinimalModel;
import org.sat4j.tools.CheckMUSSolutionListener;
import org.sat4j.tools.DimacsOutputSolver;
import org.sat4j.tools.DimacsStringSolver;
import org.sat4j.tools.LexicoDecorator;
import org.sat4j.tools.ManyCore;
import org.sat4j.tools.Minimal4CardinalityModel;
import org.sat4j.tools.ModelIteratorToSATAdapter;
import org.sat4j.tools.OptToSatAdapter;
import org.sat4j.tools.StatisticsSolver;
import org.sat4j.tools.encoding.Binary;
import org.sat4j.tools.encoding.Commander;
import org.sat4j.tools.encoding.EncodingStrategy;
import org.sat4j.tools.encoding.EncodingStrategyAdapter;
import org.sat4j.tools.encoding.Ladder;
import org.sat4j.tools.encoding.Policy;
import org.sat4j.tools.encoding.Product;
import org.sat4j.tools.encoding.Sequential;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Policy_ESTest extends Policy_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Policy policy0 = new Policy();
      EncodingStrategy encodingStrategy0 = EncodingStrategy.BINOMIAL;
      policy0.setExactlyOneEncoding(encodingStrategy0);
      EncodingStrategyAdapter encodingStrategyAdapter0 = policy0.getExactlyOneEncoding();
      assertNotNull(encodingStrategyAdapter0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Policy policy0 = new Policy();
      Product product0 = new Product();
      policy0.setExactlyKEncoding((EncodingStrategyAdapter) product0);
      EncodingStrategyAdapter encodingStrategyAdapter0 = policy0.getExactlyKEncoding();
      assertSame(encodingStrategyAdapter0, product0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Policy policy0 = new Policy();
      EncodingStrategy encodingStrategy0 = EncodingStrategy.COMMANDER;
      policy0.setAtMostOneEncoding(encodingStrategy0);
      EncodingStrategyAdapter encodingStrategyAdapter0 = policy0.getAtMostOneEncoding();
      assertNotNull(encodingStrategyAdapter0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Policy policy0 = new Policy();
      EncodingStrategy encodingStrategy0 = EncodingStrategy.LADDER;
      policy0.setAtMostKEncoding(encodingStrategy0);
      EncodingStrategyAdapter encodingStrategyAdapter0 = policy0.getAtMostKEncoding();
      assertNotNull(encodingStrategyAdapter0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Policy policy0 = new Policy();
      DimacsStringSolver dimacsStringSolver0 = new DimacsStringSolver();
      VecInt vecInt0 = new VecInt(0, 1);
      IConstr iConstr0 = policy0.addExactly(dimacsStringSolver0, vecInt0, 0);
      assertNull(iConstr0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Policy policy0 = new Policy();
      String[] stringArray0 = new String[5];
      DimacsStringSolver[] dimacsStringSolverArray0 = new DimacsStringSolver[7];
      DimacsStringSolver dimacsStringSolver0 = new DimacsStringSolver(1338);
      dimacsStringSolverArray0[0] = dimacsStringSolver0;
      dimacsStringSolverArray0[1] = dimacsStringSolverArray0[0];
      dimacsStringSolverArray0[2] = dimacsStringSolver0;
      dimacsStringSolverArray0[3] = dimacsStringSolverArray0[0];
      dimacsStringSolverArray0[4] = dimacsStringSolver0;
      dimacsStringSolverArray0[5] = dimacsStringSolverArray0[0];
      dimacsStringSolverArray0[6] = dimacsStringSolverArray0[0];
      ManyCore<DimacsStringSolver> manyCore0 = new ManyCore<DimacsStringSolver>(stringArray0, dimacsStringSolverArray0);
      MinOneDecorator minOneDecorator0 = new MinOneDecorator(manyCore0);
      ASolverFactory<DimacsStringSolver> aSolverFactory0 = (ASolverFactory<DimacsStringSolver>) mock(ASolverFactory.class, new ViolatedAssumptionAnswer());
      CheckMUSSolutionListener checkMUSSolutionListener0 = new CheckMUSSolutionListener(aSolverFactory0);
      Minimal4CardinalityModel minimal4CardinalityModel0 = new Minimal4CardinalityModel(minOneDecorator0, checkMUSSolutionListener0);
      IVecInt iVecInt0 = AbstractMinimalModel.negativeLiterals(dimacsStringSolverArray0[1]);
      IConstr iConstr0 = policy0.addExactly(minimal4CardinalityModel0, iVecInt0, (-2409));
      assertFalse(iConstr0.canBePropagatedMultipleTimes());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Policy policy0 = new Policy();
      EncodingStrategy encodingStrategy0 = EncodingStrategy.NATIVE;
      // Undeclared exception!
      try { 
        policy0.setExactlyOneEncoding(encodingStrategy0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // The switch does not cover all encodings
         //
         verifyException("org.sat4j.tools.encoding.Policy", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Policy policy0 = new Policy();
      // Undeclared exception!
      try { 
        policy0.setExactlyKEncoding((EncodingStrategy) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.tools.encoding.Policy", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Policy policy0 = new Policy();
      EncodingStrategy encodingStrategy0 = EncodingStrategy.NATIVE;
      // Undeclared exception!
      try { 
        policy0.setExactlyKEncoding(encodingStrategy0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // The switch does not cover all encodings
         //
         verifyException("org.sat4j.tools.encoding.Policy", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Policy policy0 = new Policy();
      // Undeclared exception!
      try { 
        policy0.setAtMostOneEncoding((EncodingStrategy) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.tools.encoding.Policy", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Policy policy0 = new Policy();
      // Undeclared exception!
      try { 
        policy0.setAtMostKEncoding((EncodingStrategy) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.tools.encoding.Policy", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Policy policy0 = new Policy();
      EncodingStrategy encodingStrategy0 = EncodingStrategy.NATIVE;
      // Undeclared exception!
      try { 
        policy0.setAtMostKEncoding(encodingStrategy0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // The switch does not cover all encodings
         //
         verifyException("org.sat4j.tools.encoding.Policy", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Policy policy0 = new Policy();
      // Undeclared exception!
      try { 
        policy0.setAtLeastOneEncoding((EncodingStrategy) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.tools.encoding.Policy", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Policy policy0 = new Policy();
      EncodingStrategy encodingStrategy0 = EncodingStrategy.NATIVE;
      // Undeclared exception!
      try { 
        policy0.setAtLeastOneEncoding(encodingStrategy0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // The switch does not cover all encodings
         //
         verifyException("org.sat4j.tools.encoding.Policy", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Policy policy0 = new Policy();
      // Undeclared exception!
      try { 
        policy0.setAtLeastKEncoding((EncodingStrategy) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.tools.encoding.Policy", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Policy policy0 = new Policy();
      EncodingStrategy encodingStrategy0 = EncodingStrategy.NATIVE;
      // Undeclared exception!
      try { 
        policy0.setAtLeastKEncoding(encodingStrategy0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // The switch does not cover all encodings
         //
         verifyException("org.sat4j.tools.encoding.Policy", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      // Undeclared exception!
      try { 
        Policy.getAdapterFromEncodingName((EncodingStrategy) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.tools.encoding.Policy", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Policy policy0 = new Policy();
      MiniSATLearning<MixedDataStructureDanielWL> miniSATLearning0 = new MiniSATLearning<MixedDataStructureDanielWL>();
      MixedDataStructureDanielWL mixedDataStructureDanielWL0 = new MixedDataStructureDanielWL();
      SearchParams searchParams0 = new SearchParams(3);
      LevelBasedVarOrderHeap levelBasedVarOrderHeap0 = new LevelBasedVarOrderHeap();
      Glucose21Restarts glucose21Restarts0 = new Glucose21Restarts();
      Solver<MixedDataStructureDanielWL> solver0 = new Solver<MixedDataStructureDanielWL>(miniSATLearning0, mixedDataStructureDanielWL0, searchParams0, levelBasedVarOrderHeap0, glucose21Restarts0);
      ISolver iSolver0 = solver0.getSolvingEngine();
      MinOneDecorator minOneDecorator0 = new MinOneDecorator(iSolver0);
      ASolverFactory<DimacsStringSolver> aSolverFactory0 = (ASolverFactory<DimacsStringSolver>) mock(ASolverFactory.class, new ViolatedAssumptionAnswer());
      CheckMUSSolutionListener checkMUSSolutionListener0 = new CheckMUSSolutionListener(aSolverFactory0);
      ModelIteratorToSATAdapter modelIteratorToSATAdapter0 = new ModelIteratorToSATAdapter(minOneDecorator0, checkMUSSolutionListener0);
      VecInt vecInt0 = new VecInt(4720, 4720);
      // Undeclared exception!
      policy0.addExactly(modelIteratorToSATAdapter0, vecInt0, 3);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Policy policy0 = new Policy();
      // Undeclared exception!
      try { 
        policy0.addExactly((ISolver) null, (IVecInt) null, 3191);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.tools.encoding.EncodingStrategyAdapter", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Policy policy0 = new Policy();
      NoLearningButHeuristics<MixedDataStructureDanielWL> noLearningButHeuristics0 = new NoLearningButHeuristics<MixedDataStructureDanielWL>();
      MixedDataStructureDanielWL mixedDataStructureDanielWL0 = new MixedDataStructureDanielWL();
      NaturalStaticOrder naturalStaticOrder0 = new NaturalStaticOrder();
      LubyRestarts lubyRestarts0 = new LubyRestarts();
      Solver<MixedDataStructureDanielWL> solver0 = new Solver<MixedDataStructureDanielWL>(noLearningButHeuristics0, mixedDataStructureDanielWL0, naturalStaticOrder0, lubyRestarts0);
      VecInt vecInt0 = new VecInt(32);
      IVecInt iVecInt0 = vecInt0.push(32);
      try { 
        policy0.addAtMost(solver0, iVecInt0, (-215));
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.minisat.constraints.card.AtLeast", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Policy policy0 = new Policy();
      DimacsStringSolver dimacsStringSolver0 = new DimacsStringSolver(3188);
      // Undeclared exception!
      try { 
        policy0.addAtMost(dimacsStringSolver0, (IVecInt) null, (-1180));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.tools.encoding.Policy", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Policy policy0 = new Policy();
      LightFactory lightFactory0 = new LightFactory();
      ISolver iSolver0 = lightFactory0.lightSolver();
      VecInt vecInt0 = new VecInt(2631, 1043);
      // Undeclared exception!
      policy0.addAtLeast(iSolver0, vecInt0, 18);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Policy policy0 = new Policy();
      // Undeclared exception!
      try { 
        policy0.addAtLeast((ISolver) null, (IVecInt) null, 6);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Policy policy0 = new Policy();
      int[] intArray0 = new int[1];
      VecInt vecInt0 = new VecInt(intArray0);
      MiniSATLearning<MixedDataStructureDanielWL> miniSATLearning0 = new MiniSATLearning<MixedDataStructureDanielWL>();
      MixedDataStructureDanielWL mixedDataStructureDanielWL0 = new MixedDataStructureDanielWL();
      SearchParams searchParams0 = new SearchParams(0.0, (-4639));
      LevelBasedVarOrderHeap levelBasedVarOrderHeap0 = new LevelBasedVarOrderHeap();
      LubyRestarts lubyRestarts0 = new LubyRestarts();
      Solver<MixedDataStructureDanielWL> solver0 = new Solver<MixedDataStructureDanielWL>(miniSATLearning0, mixedDataStructureDanielWL0, searchParams0, levelBasedVarOrderHeap0, lubyRestarts0);
      // Undeclared exception!
      try { 
        policy0.addAtLeast(solver0, vecInt0, 0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 0 is not a valid variable identifier
         //
         verifyException("org.sat4j.minisat.core.Solver", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      VecInt vecInt0 = new VecInt();
      vecInt0.shrink((-1876));
      Policy policy0 = new Policy();
      // Undeclared exception!
      try { 
        policy0.addAtLeast((ISolver) null, vecInt0, 1341);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Policy policy0 = new Policy();
      DimacsOutputSolver dimacsOutputSolver0 = new DimacsOutputSolver();
      VecInt vecInt0 = new VecInt(4);
      // Undeclared exception!
      try { 
        policy0.addAtMost(dimacsOutputSolver0, vecInt0, 4);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // requires at least 2 literals
         //
         verifyException("org.sat4j.tools.encoding.Policy", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Policy policy0 = new Policy();
      DimacsStringSolver dimacsStringSolver0 = new DimacsStringSolver(0);
      MaxSatDecorator maxSatDecorator0 = new MaxSatDecorator(dimacsStringSolver0);
      int[] intArray0 = new int[6];
      VecInt vecInt0 = new VecInt(intArray0);
      IConstr iConstr0 = policy0.addAtMost(maxSatDecorator0, vecInt0, 0);
      assertNull(iConstr0);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Binary binary0 = new Binary();
      EncodingStrategy encodingStrategy0 = Policy.getEncodingTypeFromAdapter(binary0);
      assertEquals(EncodingStrategy.BINARY, encodingStrategy0);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      EncodingStrategy encodingStrategy0 = EncodingStrategy.SEQUENTIAL;
      EncodingStrategyAdapter encodingStrategyAdapter0 = Policy.getAdapterFromEncodingName(encodingStrategy0);
      assertNotNull(encodingStrategyAdapter0);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      EncodingStrategy encodingStrategy0 = EncodingStrategy.PRODUCT;
      EncodingStrategyAdapter encodingStrategyAdapter0 = Policy.getAdapterFromEncodingName(encodingStrategy0);
      assertNotNull(encodingStrategyAdapter0);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      EncodingStrategy encodingStrategy0 = EncodingStrategy.BINARY;
      EncodingStrategyAdapter encodingStrategyAdapter0 = Policy.getAdapterFromEncodingName(encodingStrategy0);
      assertNotNull(encodingStrategyAdapter0);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      EncodingStrategy encodingStrategy0 = EncodingStrategy.NATIVE;
      // Undeclared exception!
      try { 
        Policy.getAdapterFromEncodingName(encodingStrategy0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // The switch does not cover all encodings
         //
         verifyException("org.sat4j.tools.encoding.Policy", e);
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      EncodingStrategy encodingStrategy0 = EncodingStrategy.BINOMIAL;
      EncodingStrategyAdapter encodingStrategyAdapter0 = Policy.getAdapterFromEncodingName(encodingStrategy0);
      assertNotNull(encodingStrategyAdapter0);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Policy policy0 = new Policy();
      EncodingStrategyAdapter encodingStrategyAdapter0 = policy0.getAtMostOneEncoding();
      assertNull(encodingStrategyAdapter0);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Policy policy0 = new Policy();
      EncodingStrategyAdapter encodingStrategyAdapter0 = policy0.getAtMostKEncoding();
      assertNull(encodingStrategyAdapter0);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Policy policy0 = new Policy();
      EncodingStrategyAdapter encodingStrategyAdapter0 = policy0.getExactlyOneEncoding();
      assertNull(encodingStrategyAdapter0);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      Policy policy0 = new Policy();
      EncodingStrategyAdapter encodingStrategyAdapter0 = policy0.getExactlyKEncoding();
      assertNull(encodingStrategyAdapter0);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      Policy policy0 = new Policy();
      LightFactory lightFactory0 = LightFactory.instance();
      ISolver iSolver0 = lightFactory0.lightSolver();
      EncodingStrategy encodingStrategy0 = EncodingStrategy.PRODUCT;
      policy0.setAtLeastKEncoding(encodingStrategy0);
      VecInt vecInt0 = new VecInt();
      try { 
        policy0.addAtLeast(iSolver0, vecInt0, 5);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.minisat.constraints.card.AtLeast", e);
      }
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      Policy policy0 = new Policy();
      Product product0 = new Product();
      policy0.setExactlyKEncoding((EncodingStrategyAdapter) product0);
      MockFile mockFile0 = new MockFile("-cAf!", "-cAf!");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      DimacsOutputSolver dimacsOutputSolver0 = new DimacsOutputSolver(mockPrintWriter0);
      // Undeclared exception!
      try { 
        policy0.addExactlyOne(dimacsOutputSolver0, (IVecInt) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.tools.DimacsOutputSolver", e);
      }
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      Policy policy0 = new Policy();
      StatisticsSolver statisticsSolver0 = new StatisticsSolver();
      IVecInt iVecInt0 = VecInt.EMPTY;
      // Undeclared exception!
      try { 
        policy0.addExactly(statisticsSolver0, iVecInt0, (-767));
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Not implemented yet!
         //
         verifyException("org.sat4j.tools.StatisticsSolver", e);
      }
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      Policy policy0 = new Policy();
      EncodingStrategy encodingStrategy0 = EncodingStrategy.LADDER;
      policy0.setAtMostKEncoding(encodingStrategy0);
      int[] intArray0 = new int[2];
      VecInt vecInt0 = new VecInt(intArray0);
      DimacsStringSolver dimacsStringSolver0 = new DimacsStringSolver(18);
      LexicoDecorator<DimacsStringSolver> lexicoDecorator0 = new LexicoDecorator<DimacsStringSolver>(dimacsStringSolver0);
      OptToSatAdapter optToSatAdapter0 = new OptToSatAdapter(lexicoDecorator0);
      policy0.addAtMost(optToSatAdapter0, vecInt0, (-1057));
      assertEquals(1, dimacsStringSolver0.nConstraints());
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      Policy policy0 = new Policy();
      EncodingStrategy encodingStrategy0 = EncodingStrategy.LADDER;
      policy0.setAtMostKEncoding(encodingStrategy0);
      int[] intArray0 = new int[2];
      VecInt vecInt0 = new VecInt(intArray0);
      DimacsStringSolver dimacsStringSolver0 = new DimacsStringSolver(18);
      LexicoDecorator<DimacsStringSolver> lexicoDecorator0 = new LexicoDecorator<DimacsStringSolver>(dimacsStringSolver0);
      OptToSatAdapter optToSatAdapter0 = new OptToSatAdapter(lexicoDecorator0);
      policy0.addAtMostOne(optToSatAdapter0, vecInt0);
      assertEquals(8, dimacsStringSolver0.nConstraints());
      assertEquals(3, dimacsStringSolver0.realNumberOfVariables());
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      Policy policy0 = new Policy();
      DimacsStringSolver dimacsStringSolver0 = new DimacsStringSolver();
      policy0.setAtMostOneEncoding((EncodingStrategyAdapter) policy0);
      int[] intArray0 = new int[8];
      VecInt vecInt0 = new VecInt(intArray0);
      // Undeclared exception!
      try { 
        policy0.addAtMostOne((ISolver) null, vecInt0);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
      }
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      Policy policy0 = new Policy();
      int[] intArray0 = new int[2];
      VecInt vecInt0 = new VecInt(intArray0);
      DimacsStringSolver dimacsStringSolver0 = new DimacsStringSolver(18);
      LexicoDecorator<DimacsStringSolver> lexicoDecorator0 = new LexicoDecorator<DimacsStringSolver>(dimacsStringSolver0);
      OptToSatAdapter optToSatAdapter0 = new OptToSatAdapter(lexicoDecorator0);
      IConstr iConstr0 = policy0.addAtMost(optToSatAdapter0, vecInt0, (-1057));
      assertNull(iConstr0);
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      Policy policy0 = new Policy();
      LightFactory lightFactory0 = LightFactory.instance();
      ISolver iSolver0 = lightFactory0.lightSolver();
      VecInt vecInt0 = new VecInt();
      // Undeclared exception!
      try { 
        policy0.addAtLeast(iSolver0, vecInt0, 5);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // requires at least 2 literals
         //
         verifyException("org.sat4j.tools.encoding.Policy", e);
      }
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      Policy policy0 = new Policy();
      ActiveLearning<MixedDataStructureDanielWL> activeLearning0 = new ActiveLearning<MixedDataStructureDanielWL>(922);
      PureOrder pureOrder0 = new PureOrder();
      MiniSATRestarts miniSATRestarts0 = new MiniSATRestarts();
      MixedDataStructureDanielWL mixedDataStructureDanielWL0 = new MixedDataStructureDanielWL();
      SearchParams searchParams0 = new SearchParams();
      Solver<MixedDataStructureDanielWL> solver0 = new Solver<MixedDataStructureDanielWL>(activeLearning0, mixedDataStructureDanielWL0, searchParams0, pureOrder0, miniSATRestarts0);
      VecInt vecInt0 = new VecInt(1, 1);
      AtLeast atLeast0 = (AtLeast)policy0.addAtMost(solver0, vecInt0, 922);
      assertEquals((-921), atLeast0.requiredNumberOfSatisfiedLiterals());
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      VarOrderHeap varOrderHeap0 = new VarOrderHeap();
      TabuListDecorator tabuListDecorator0 = new TabuListDecorator(varOrderHeap0);
      MiniSATRestarts miniSATRestarts0 = new MiniSATRestarts();
      MiniSATLearning<MixedDataStructureDanielWL> miniSATLearning0 = new MiniSATLearning<MixedDataStructureDanielWL>();
      MixedDataStructureDanielWL mixedDataStructureDanielWL0 = new MixedDataStructureDanielWL();
      SearchParams searchParams0 = new SearchParams(1);
      Solver<MixedDataStructureDanielWL> solver0 = new Solver<MixedDataStructureDanielWL>(miniSATLearning0, mixedDataStructureDanielWL0, searchParams0, tabuListDecorator0, miniSATRestarts0);
      VecInt vecInt0 = new VecInt(1, 1);
      Policy policy0 = new Policy();
      MaxSatDecorator maxSatDecorator0 = new MaxSatDecorator(solver0);
      policy0.addAtLeast(maxSatDecorator0, vecInt0, 1);
      assertEquals(1, solver0.getPropagationLevel());
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      Sequential sequential0 = new Sequential();
      EncodingStrategy encodingStrategy0 = Policy.getEncodingTypeFromAdapter(sequential0);
      assertEquals(EncodingStrategy.SEQUENTIAL, encodingStrategy0);
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      Product product0 = new Product();
      EncodingStrategy encodingStrategy0 = Policy.getEncodingTypeFromAdapter(product0);
      assertEquals(EncodingStrategy.PRODUCT, encodingStrategy0);
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      Ladder ladder0 = new Ladder();
      EncodingStrategy encodingStrategy0 = Policy.getEncodingTypeFromAdapter(ladder0);
      assertEquals(EncodingStrategy.LADDER, encodingStrategy0);
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      Commander commander0 = new Commander();
      EncodingStrategy encodingStrategy0 = Policy.getEncodingTypeFromAdapter(commander0);
      assertEquals(EncodingStrategy.COMMANDER, encodingStrategy0);
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      Policy policy0 = new Policy();
      EncodingStrategy encodingStrategy0 = EncodingStrategy.SEQUENTIAL;
      policy0.setAtLeastKEncoding(encodingStrategy0);
      VecInt vecInt0 = new VecInt(922);
      // Undeclared exception!
      try { 
        policy0.addAtLeast((ISolver) null, vecInt0, 922);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.tools.encoding.Sequential", e);
      }
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      EncodingStrategy encodingStrategy0 = EncodingStrategy.LADDER;
      EncodingStrategyAdapter encodingStrategyAdapter0 = Policy.getAdapterFromEncodingName(encodingStrategy0);
      assertNotNull(encodingStrategyAdapter0);
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      EncodingStrategy encodingStrategy0 = EncodingStrategy.COMMANDER;
      EncodingStrategyAdapter encodingStrategyAdapter0 = Policy.getAdapterFromEncodingName(encodingStrategy0);
      Policy policy0 = new Policy();
      policy0.setAtLeastKEncoding(encodingStrategyAdapter0);
      EncodingStrategyAdapter encodingStrategyAdapter1 = policy0.getAtLeastKEncoding();
      assertSame(encodingStrategyAdapter1, encodingStrategyAdapter0);
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      Policy policy0 = new Policy();
      EncodingStrategy encodingStrategy0 = EncodingStrategy.BINOMIAL;
      policy0.setExactlyOneEncoding(encodingStrategy0);
      DimacsStringSolver dimacsStringSolver0 = new DimacsStringSolver(0);
      PureOrder pureOrder0 = new PureOrder();
      TabuListDecorator tabuListDecorator0 = new TabuListDecorator(pureOrder0);
      MiniSATRestarts miniSATRestarts0 = new MiniSATRestarts();
      MiniSATLearning<MixedDataStructureDanielWL> miniSATLearning0 = new MiniSATLearning<MixedDataStructureDanielWL>();
      MixedDataStructureDanielWL mixedDataStructureDanielWL0 = new MixedDataStructureDanielWL();
      SearchParams searchParams0 = new SearchParams(0);
      Solver<MixedDataStructureDanielWL> solver0 = new Solver<MixedDataStructureDanielWL>(miniSATLearning0, mixedDataStructureDanielWL0, searchParams0, tabuListDecorator0, miniSATRestarts0);
      IVecInt iVecInt0 = solver0.createBlockingClauseForCurrentModel();
      IConstr iConstr0 = policy0.addExactlyOne(dimacsStringSolver0, iVecInt0);
      assertEquals(0.0, iConstr0.getActivity(), 0.01);
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      EncodingStrategy encodingStrategy0 = EncodingStrategy.BINARY;
      Policy policy0 = new Policy();
      policy0.setExactlyKEncoding(encodingStrategy0);
      String string0 = policy0.toString();
      assertEquals("Policy = [At most K: Native, at most 1: Native, exactly K: Binary, exactly 1: Native]", string0);
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      Policy policy0 = new Policy();
      EncodingStrategy encodingStrategy0 = Policy.getEncodingTypeFromAdapter((EncodingStrategyAdapter) null);
      // Undeclared exception!
      try { 
        policy0.setAtMostOneEncoding(encodingStrategy0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // The switch does not cover all encodings
         //
         verifyException("org.sat4j.tools.encoding.Policy", e);
      }
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      Policy policy0 = new Policy();
      Commander commander0 = new Commander();
      policy0.setExactlyOneEncoding((EncodingStrategyAdapter) commander0);
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      Policy policy0 = new Policy();
      Product product0 = new Product();
      policy0.setAtLeastOneEncoding((EncodingStrategyAdapter) product0);
      DimacsStringSolver dimacsStringSolver0 = new DimacsStringSolver(922);
      ActiveLearning<MixedDataStructureDanielWL> activeLearning0 = new ActiveLearning<MixedDataStructureDanielWL>(922);
      PureOrder pureOrder0 = new PureOrder();
      TabuListDecorator tabuListDecorator0 = new TabuListDecorator(pureOrder0);
      MiniSATRestarts miniSATRestarts0 = new MiniSATRestarts();
      MixedDataStructureDanielWL mixedDataStructureDanielWL0 = new MixedDataStructureDanielWL();
      SearchParams searchParams0 = new SearchParams(1);
      Solver<MixedDataStructureDanielWL> solver0 = new Solver<MixedDataStructureDanielWL>(activeLearning0, mixedDataStructureDanielWL0, searchParams0, tabuListDecorator0, miniSATRestarts0);
      IVecInt iVecInt0 = solver0.createBlockingClauseForCurrentModel();
      policy0.addAtLeast(dimacsStringSolver0, iVecInt0, 1);
      assertEquals(1, dimacsStringSolver0.nConstraints());
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      Policy policy0 = new Policy();
      EncodingStrategyAdapter encodingStrategyAdapter0 = policy0.getAtLeastKEncoding();
      assertNull(encodingStrategyAdapter0);
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      Policy policy0 = new Policy();
      Product product0 = new Product();
      policy0.setExactlyKEncoding((EncodingStrategyAdapter) product0);
      LightFactory lightFactory0 = LightFactory.instance();
      ISolver iSolver0 = lightFactory0.lightSolver();
      VecInt vecInt0 = new VecInt();
      try { 
        policy0.addExactly(iSolver0, vecInt0, (-2446));
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.minisat.constraints.card.AtLeast", e);
      }
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      Policy policy0 = new Policy();
      EncodingStrategy encodingStrategy0 = EncodingStrategy.BINOMIAL;
      policy0.setAtLeastOneEncoding(encodingStrategy0);
      EncodingStrategyAdapter encodingStrategyAdapter0 = policy0.getAtLeastOneEncoding();
      EncodingStrategy encodingStrategy1 = Policy.getEncodingTypeFromAdapter(encodingStrategyAdapter0);
      assertEquals(EncodingStrategy.BINOMIAL, encodingStrategy1);
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      Policy policy0 = new Policy();
      policy0.setAtMostKEncoding((EncodingStrategyAdapter) null);
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      Policy policy0 = new Policy();
      EncodingStrategyAdapter encodingStrategyAdapter0 = policy0.getAtLeastOneEncoding();
      assertNull(encodingStrategyAdapter0);
  }
}
