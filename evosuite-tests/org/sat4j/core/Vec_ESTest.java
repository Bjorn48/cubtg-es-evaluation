/*
 * This file was automatically generated by EvoSuite
 * Tue Feb 19 17:24:42 GMT 2019
 */

package org.sat4j.core;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.lang.reflect.Array;
import java.util.Comparator;
import java.util.Iterator;
import java.util.NoSuchElementException;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;
import org.sat4j.core.ReadOnlyVec;
import org.sat4j.core.Vec;
import org.sat4j.specs.IVec;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Vec_ESTest extends Vec_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      int int0 = 2781;
      String[] stringArray0 = new String[0];
      Vec<String> vec0 = new Vec<String>(stringArray0);
      assertEquals(0, stringArray0.length);
      assertTrue(vec0.isEmpty());
      assertEquals(0, vec0.size());
      assertNotNull(vec0);
      
      vec0.insertFirst("ec!#M#JNtM!c");
      assertEquals(0, stringArray0.length);
      assertFalse(vec0.isEmpty());
      assertEquals(1, vec0.size());
      
      vec0.clear();
      assertEquals(0, stringArray0.length);
      assertTrue(vec0.isEmpty());
      assertEquals(0, vec0.size());
      
      Vec<Vec<String>> vec1 = new Vec<Vec<String>>(2781, vec0);
      assertEquals(0, stringArray0.length);
      assertTrue(vec0.isEmpty());
      assertEquals(0, vec0.size());
      assertFalse(vec1.isEmpty());
      assertEquals(2781, vec1.size());
      assertNotNull(vec1);
      
      Comparator<Vec<String>> comparator0 = (Comparator<Vec<String>>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn(2781, 1140, (-2553), (-1282), 1).when(comparator0).compare(nullable(org.sat4j.core.Vec.class) , nullable(org.sat4j.core.Vec.class));
      vec1.sort(comparator0);
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      int int0 = 0;
      Vec<ReadOnlyVec<String>> vec0 = new Vec<ReadOnlyVec<String>>(0, (ReadOnlyVec<String>) null);
      assertEquals(0, vec0.size());
      assertTrue(vec0.isEmpty());
      assertNotNull(vec0);
      
      // Undeclared exception!
      try { 
        vec0.pop();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("org.sat4j.core.Vec", e);
      }
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      Vec<ReadOnlyVec<String>> vec0 = new Vec<ReadOnlyVec<String>>();
      assertEquals(0, vec0.size());
      assertTrue(vec0.isEmpty());
      assertNotNull(vec0);
      
      // Undeclared exception!
      try { 
        vec0.moveTo((IVec<ReadOnlyVec<String>>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.core.Vec", e);
      }
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      String[] stringArray0 = new String[0];
      Vec<String> vec0 = new Vec<String>(stringArray0);
      assertEquals(0, stringArray0.length);
      assertTrue(vec0.isEmpty());
      assertEquals(0, vec0.size());
      assertNotNull(vec0);
      
      vec0.insertFirst("ec!#M#JNtM!c");
      assertEquals(0, stringArray0.length);
      assertFalse(vec0.isEmpty());
      assertEquals(1, vec0.size());
      
      vec0.clear();
      assertEquals(0, stringArray0.length);
      assertTrue(vec0.isEmpty());
      assertEquals(0, vec0.size());
      
      Vec<Vec<String>> vec1 = new Vec<Vec<String>>(2781, vec0);
      assertEquals(0, stringArray0.length);
      assertTrue(vec0.isEmpty());
      assertEquals(0, vec0.size());
      assertFalse(vec1.isEmpty());
      assertEquals(2781, vec1.size());
      assertNotNull(vec1);
      
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) "ec!#M#JNtM!c";
      Vec<Object> vec2 = new Vec<Object>(objectArray0);
      assertEquals(1, objectArray0.length);
      assertFalse(vec2.isEmpty());
      assertEquals(1, vec2.size());
      assertNotNull(vec2);
      
      IVec<Object> iVec0 = vec2.push(";]_`?K5");
      assertEquals(1, objectArray0.length);
      assertFalse(vec2.isEmpty());
      assertEquals(2, vec2.size());
      assertEquals(2, iVec0.size());
      assertFalse(iVec0.isEmpty());
      assertNotNull(iVec0);
      
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn((-947), (-1997)).when(comparator0).compare(any() , any());
      vec2.sortUnique(comparator0);
      assertEquals(1, objectArray0.length);
      assertFalse(vec2.isEmpty());
      assertEquals(2, vec2.size());
      
      vec0.insertFirst("ec!#M#JNtM!c");
      assertEquals(0, stringArray0.length);
      assertFalse(vec0.isEmpty());
      assertEquals(1, vec0.size());
      
      Vec<Comparable<Object>> vec3 = null;
      try {
        vec3 = new Vec<Comparable<Object>>((-427));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.core.Vec", e);
      }
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      Vec<ReadOnlyVec<Object>> vec0 = new Vec<ReadOnlyVec<Object>>();
      assertTrue(vec0.isEmpty());
      assertEquals(0, vec0.size());
      assertNotNull(vec0);
      
      Vec<Comparable<String>> vec1 = new Vec<Comparable<String>>();
      assertTrue(vec1.isEmpty());
      assertEquals(0, vec1.size());
      assertNotNull(vec1);
      
      Vec<String> vec2 = new Vec<String>();
      assertTrue(vec2.isEmpty());
      assertEquals(0, vec2.size());
      assertNotNull(vec2);
      
      vec2.ensure((-1530));
      assertTrue(vec2.isEmpty());
      assertEquals(0, vec2.size());
      
      int int0 = 372;
      Vec<Object> vec3 = new Vec<Object>(372, (Object) null);
      assertFalse(vec3.isEmpty());
      assertEquals(372, vec3.size());
      assertNotNull(vec3);
      
      // Undeclared exception!
      try { 
        vec3.sortUnique((Comparator<Object>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.core.Vec", e);
      }
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      Vec<ReadOnlyVec<Object>> vec0 = new Vec<ReadOnlyVec<Object>>(0);
      assertEquals(0, vec0.size());
      assertTrue(vec0.isEmpty());
      assertNotNull(vec0);
      
      vec0.shrinkTo(0);
      assertEquals(0, vec0.size());
      assertTrue(vec0.isEmpty());
      
      vec0.clear();
      assertEquals(0, vec0.size());
      assertTrue(vec0.isEmpty());
      
      vec0.clear();
      assertEquals(0, vec0.size());
      assertTrue(vec0.isEmpty());
      
      Iterator<ReadOnlyVec<Object>> iterator0 = vec0.iterator();
      assertEquals(0, vec0.size());
      assertTrue(vec0.isEmpty());
      assertNotNull(iterator0);
      
      vec0.clear();
      assertEquals(0, vec0.size());
      assertTrue(vec0.isEmpty());
      
      // Undeclared exception!
      try { 
        vec0.last();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("org.sat4j.core.Vec", e);
      }
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      String[] stringArray0 = new String[0];
      Vec<String> vec0 = new Vec<String>(stringArray0);
      assertEquals(0, stringArray0.length);
      assertTrue(vec0.isEmpty());
      assertEquals(0, vec0.size());
      assertNotNull(vec0);
      
      vec0.insertFirst("ec!#M#JNtM!c");
      assertEquals(0, stringArray0.length);
      assertFalse(vec0.isEmpty());
      assertEquals(1, vec0.size());
      
      vec0.clear();
      assertEquals(0, stringArray0.length);
      assertTrue(vec0.isEmpty());
      assertEquals(0, vec0.size());
      
      Vec<Vec<String>> vec1 = new Vec<Vec<String>>(2781, vec0);
      assertEquals(0, stringArray0.length);
      assertTrue(vec0.isEmpty());
      assertEquals(0, vec0.size());
      assertFalse(vec1.isEmpty());
      assertEquals(2781, vec1.size());
      assertNotNull(vec1);
      
      Comparator<Vec<String>> comparator0 = (Comparator<Vec<String>>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn(197, (-4093), 2781, 193, (-4093)).when(comparator0).compare(nullable(org.sat4j.core.Vec.class) , nullable(org.sat4j.core.Vec.class));
      // Undeclared exception!
      try { 
        vec1.sort(comparator0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("org.sat4j.core.Vec", e);
      }
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      String[] stringArray0 = new String[4];
      stringArray0[0] = "";
      Integer integer0 = new Integer(2678);
      assertEquals(2678, (int)integer0);
      assertNotNull(integer0);
      
      Vec<Object> vec0 = new Vec<Object>();
      assertTrue(vec0.isEmpty());
      assertEquals(0, vec0.size());
      assertNotNull(vec0);
      
      Vec<Object> vec1 = new Vec<Object>(stringArray0);
      assertEquals(4, stringArray0.length);
      assertEquals(4, vec1.size());
      assertFalse(vec1.isEmpty());
      assertNotNull(vec1);
      assertFalse(vec1.equals((Object)vec0));
      
      vec0.moveTo((IVec<Object>) vec1);
      assertEquals(4, stringArray0.length);
      assertTrue(vec0.isEmpty());
      assertEquals(0, vec0.size());
      assertEquals(4, vec1.size());
      assertFalse(vec1.isEmpty());
      assertNotSame(vec0, vec1);
      assertNotSame(vec1, vec0);
      assertFalse(vec0.equals((Object)vec1));
      assertFalse(vec1.equals((Object)vec0));
      
      String string0 = vec0.toString();
      assertEquals("", string0);
      assertTrue(vec0.isEmpty());
      assertEquals(0, vec0.size());
      assertNotNull(string0);
      assertNotSame(vec0, vec1);
      assertFalse(vec0.equals((Object)vec1));
      
      Vec<Comparable<String>> vec2 = new Vec<Comparable<String>>(201, "");
      assertFalse(vec2.isEmpty());
      assertEquals(201, vec2.size());
      assertNotNull(vec2);
      
      vec2.shrink((-20));
      assertFalse(vec2.isEmpty());
      assertEquals(201, vec2.size());
      
      Vec<Integer>[] vecArray0 = (Vec<Integer>[]) Array.newInstance(Vec.class, 4);
      Vec<Integer> vec3 = new Vec<Integer>();
      assertEquals(0, vec3.size());
      assertTrue(vec3.isEmpty());
      assertNotNull(vec3);
      
      vecArray0[0] = vec3;
      Vec<Integer> vec4 = new Vec<Integer>(912, integer0);
      assertFalse(vec4.isEmpty());
      assertEquals(912, vec4.size());
      assertNotNull(vec4);
      assertFalse(vec4.equals((Object)vec3));
      
      vecArray0[1] = vec4;
      Vec<Integer> vec5 = new Vec<Integer>();
      assertEquals(0, vec5.size());
      assertTrue(vec5.isEmpty());
      assertNotNull(vec5);
      assertTrue(vec5.equals((Object)vec3));
      assertFalse(vec5.equals((Object)vec4));
      
      vecArray0[2] = vec5;
      Vec<Integer> vec6 = new Vec<Integer>(2777);
      assertTrue(vec6.isEmpty());
      assertEquals(0, vec6.size());
      assertNotNull(vec6);
      assertTrue(vec6.equals((Object)vec5));
      assertFalse(vec6.equals((Object)vec4));
      assertTrue(vec6.equals((Object)vec3));
      
      Vec<Vec<Integer>> vec7 = new Vec<Vec<Integer>>(vecArray0);
      assertEquals(4, vecArray0.length);
      assertEquals(4, vec7.size());
      assertFalse(vec7.isEmpty());
      assertNotNull(vec7);
      
      // Undeclared exception!
      try { 
        vec7.remove(vec6);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 4
         //
         verifyException("org.sat4j.core.Vec", e);
      }
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      Vec<String> vec0 = new Vec<String>(0);
      assertTrue(vec0.isEmpty());
      assertEquals(0, vec0.size());
      assertNotNull(vec0);
      
      String string0 = "7[Y qestaj";
      String string1 = "p\\cgqg<";
      boolean boolean0 = vec0.contains("pcgqg<");
      assertFalse(boolean0);
      assertTrue(vec0.isEmpty());
      assertEquals(0, vec0.size());
      
      int int0 = (-25);
      // Undeclared exception!
      try { 
        vec0.unsafePush("pcgqg<");
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.sat4j.core.Vec", e);
      }
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      Vec<String> vec0 = new Vec<String>(0, "");
      assertTrue(vec0.isEmpty());
      assertEquals(0, vec0.size());
      assertNotNull(vec0);
      
      Object[] objectArray0 = new Object[7];
      objectArray0[0] = (Object) "";
      objectArray0[1] = (Object) vec0;
      objectArray0[2] = (Object) vec0;
      objectArray0[3] = (Object) vec0;
      objectArray0[4] = (Object) vec0;
      objectArray0[5] = (Object) "";
      objectArray0[6] = (Object) vec0;
      Vec<Object> vec1 = new Vec<Object>(objectArray0);
      assertEquals(7, objectArray0.length);
      assertFalse(vec1.isEmpty());
      assertEquals(7, vec1.size());
      assertNotNull(vec1);
      
      // Undeclared exception!
      try { 
        vec1.removeFromLast("");
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("org.sat4j.core.Vec", e);
      }
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      Integer integer0 = Integer.valueOf((-2189));
      assertEquals((-2189), (int)integer0);
      assertNotNull(integer0);
      
      int int0 = 0;
      Integer integer1 = new Integer(0);
      assertEquals(0, (int)integer1);
      assertNotNull(integer1);
      assertTrue(integer1.equals((Object)int0));
      assertFalse(integer1.equals((Object)integer0));
      
      String string0 = integer1.toString();
      assertEquals("0", string0);
      assertNotNull(string0);
      assertTrue(integer1.equals((Object)int0));
      assertFalse(integer1.equals((Object)integer0));
      
      Vec<Integer> vec0 = new Vec<Integer>(0, integer1);
      assertEquals(0, vec0.size());
      assertTrue(vec0.isEmpty());
      assertNotNull(vec0);
      assertTrue(integer1.equals((Object)int0));
      assertFalse(integer1.equals((Object)integer0));
      
      // Undeclared exception!
      try { 
        vec0.delete((-2189));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -2189
         //
         verifyException("org.sat4j.core.Vec", e);
      }
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      Vec<ReadOnlyVec<Object>> vec0 = new Vec<ReadOnlyVec<Object>>();
      assertEquals(0, vec0.size());
      assertTrue(vec0.isEmpty());
      assertNotNull(vec0);
      
      Vec<ReadOnlyVec<String>> vec1 = new Vec<ReadOnlyVec<String>>();
      assertEquals(0, vec1.size());
      assertTrue(vec1.isEmpty());
      assertNotNull(vec1);
      
      Vec<String> vec2 = new Vec<String>(946, "176PRV");
      assertEquals(946, vec2.size());
      assertFalse(vec2.isEmpty());
      assertNotNull(vec2);
      
      ReadOnlyVec<String> readOnlyVec0 = new ReadOnlyVec<String>(vec2);
      assertEquals(946, vec2.size());
      assertFalse(vec2.isEmpty());
      assertFalse(readOnlyVec0.isEmpty());
      assertEquals(946, readOnlyVec0.size());
      assertNotNull(readOnlyVec0);
      
      vec1.insertFirstWithShifting(readOnlyVec0);
      assertEquals(1, vec1.size());
      assertFalse(vec1.isEmpty());
      assertEquals(946, vec2.size());
      assertFalse(vec2.isEmpty());
      assertFalse(readOnlyVec0.isEmpty());
      assertEquals(946, readOnlyVec0.size());
      
      Iterator<ReadOnlyVec<String>> iterator0 = vec1.iterator();
      assertEquals(1, vec1.size());
      assertFalse(vec1.isEmpty());
      assertNotNull(iterator0);
      
      IVec<ReadOnlyVec<String>> iVec0 = vec1.clone();
      assertEquals(1, vec1.size());
      assertFalse(vec1.isEmpty());
      assertFalse(iVec0.isEmpty());
      assertEquals(1, iVec0.size());
      assertNotNull(iVec0);
      
      boolean boolean0 = vec1.equals(vec0);
      assertFalse(boolean0);
      assertEquals(0, vec0.size());
      assertTrue(vec0.isEmpty());
      assertEquals(1, vec1.size());
      assertFalse(vec1.isEmpty());
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      Vec<Object> vec0 = new Vec<Object>();
      assertEquals(0, vec0.size());
      assertTrue(vec0.isEmpty());
      assertNotNull(vec0);
      
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      vec0.sort(comparator0);
      assertEquals(0, vec0.size());
      assertTrue(vec0.isEmpty());
      
      Vec<String> vec1 = new Vec<String>();
      assertTrue(vec1.isEmpty());
      assertEquals(0, vec1.size());
      assertNotNull(vec1);
      
      vec1.ensure(0);
      assertTrue(vec1.isEmpty());
      assertEquals(0, vec1.size());
      
      IVec<Object> iVec0 = vec0.push((Object) null);
      assertFalse(vec0.isEmpty());
      assertEquals(1, vec0.size());
      assertEquals(1, iVec0.size());
      assertFalse(iVec0.isEmpty());
      assertNotNull(iVec0);
      
      vec0.sortUnique((Comparator<Object>) null);
      assertFalse(vec0.isEmpty());
      assertEquals(1, vec0.size());
      
      vec1.insertFirst("");
      assertFalse(vec1.isEmpty());
      assertEquals(1, vec1.size());
      
      vec0.insertFirst(vec1);
      assertFalse(vec0.isEmpty());
      assertEquals(2, vec0.size());
      assertFalse(vec1.isEmpty());
      assertEquals(1, vec1.size());
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      Integer integer0 = new Integer(0);
      assertEquals(0, (int)integer0);
      assertNotNull(integer0);
      
      Vec<Object> vec0 = new Vec<Object>(0, integer0);
      assertEquals(0, vec0.size());
      assertTrue(vec0.isEmpty());
      assertNotNull(vec0);
      
      boolean boolean0 = vec0.equals(integer0);
      assertFalse(boolean0);
      assertEquals(0, vec0.size());
      assertTrue(vec0.isEmpty());
      
      ReadOnlyVec<Integer>[] readOnlyVecArray0 = (ReadOnlyVec<Integer>[]) Array.newInstance(ReadOnlyVec.class, 1);
      Vec<Integer> vec1 = new Vec<Integer>(0, integer0);
      assertEquals(0, vec1.size());
      assertTrue(vec1.isEmpty());
      assertNotNull(vec1);
      
      int int0 = 0;
      vec1.shrinkTo(0);
      assertEquals(0, vec1.size());
      assertTrue(vec1.isEmpty());
      assertTrue(integer0.equals((Object)int0));
      
      ReadOnlyVec<Integer> readOnlyVec0 = new ReadOnlyVec<Integer>(vec1);
      assertEquals(0, vec1.size());
      assertTrue(vec1.isEmpty());
      assertTrue(readOnlyVec0.isEmpty());
      assertEquals(0, readOnlyVec0.size());
      assertNotNull(readOnlyVec0);
      assertTrue(integer0.equals((Object)int0));
      
      readOnlyVecArray0[0] = readOnlyVec0;
      Vec<ReadOnlyVec<Integer>> vec2 = new Vec<ReadOnlyVec<Integer>>(readOnlyVecArray0);
      assertEquals(1, readOnlyVecArray0.length);
      assertFalse(vec2.isEmpty());
      assertEquals(1, vec2.size());
      assertNotNull(vec2);
      
      vec2.removeFromLast(readOnlyVecArray0[0]);
      assertEquals(1, readOnlyVecArray0.length);
      assertEquals(0, vec2.size());
      assertTrue(vec2.isEmpty());
      
      Vec<ReadOnlyVec<String>> vec3 = null;
      try {
        vec3 = new Vec<ReadOnlyVec<String>>((ReadOnlyVec<String>[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.core.Vec", e);
      }
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      Vec<String> vec0 = new Vec<String>(1531);
      assertTrue(vec0.isEmpty());
      assertEquals(0, vec0.size());
      assertNotNull(vec0);
      
      vec0.insertFirst("");
      assertEquals(1, vec0.size());
      assertFalse(vec0.isEmpty());
      
      int int0 = vec0.size();
      assertEquals(1, int0);
      assertEquals(1, vec0.size());
      assertFalse(vec0.isEmpty());
      
      Vec<ReadOnlyVec<String>> vec1 = new Vec<ReadOnlyVec<String>>();
      assertTrue(vec1.isEmpty());
      assertEquals(0, vec1.size());
      assertNotNull(vec1);
      
      Iterator<ReadOnlyVec<String>> iterator0 = vec1.iterator();
      assertTrue(vec1.isEmpty());
      assertEquals(0, vec1.size());
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) "";
      Object object0 = new Object();
      assertNotNull(object0);
      
      Object object1 = new Object();
      assertNotNull(object1);
      assertFalse(object1.equals((Object)object0));
      
      objectArray0[1] = object1;
      Integer integer0 = new Integer(0);
      assertEquals(0, (int)integer0);
      assertNotNull(integer0);
      
      Integer integer1 = new Integer((-3600));
      assertEquals((-3600), (int)integer1);
      assertNotNull(integer1);
      assertFalse(integer1.equals((Object)integer0));
      
      objectArray0[2] = (Object) integer1;
      Integer integer2 = new Integer((-2320));
      assertEquals((-2320), (int)integer2);
      assertNotNull(integer2);
      assertFalse(integer2.equals((Object)integer0));
      assertFalse(integer2.equals((Object)integer1));
      
      objectArray0[3] = (Object) integer2;
      Vec<Object> vec0 = new Vec<Object>(objectArray0);
      assertEquals(4, objectArray0.length);
      assertEquals(4, vec0.size());
      assertFalse(vec0.isEmpty());
      assertNotNull(vec0);
      
      IVec<Object> iVec0 = vec0.clone();
      assertEquals(4, objectArray0.length);
      assertEquals(4, vec0.size());
      assertFalse(vec0.isEmpty());
      assertEquals(4, iVec0.size());
      assertFalse(iVec0.isEmpty());
      assertNotNull(iVec0);
      
      int int0 = vec0.indexOf("");
      assertEquals(0, int0);
      assertEquals(4, objectArray0.length);
      assertEquals(4, vec0.size());
      assertFalse(vec0.isEmpty());
      
      Object[] objectArray1 = vec0.toArray();
      assertEquals(4, objectArray0.length);
      assertEquals(4, objectArray1.length);
      assertEquals(4, vec0.size());
      assertFalse(vec0.isEmpty());
      assertNotNull(objectArray1);
      assertSame(objectArray0, objectArray1);
      assertSame(objectArray1, objectArray0);
      
      Integer[] integerArray0 = new Integer[8];
      integerArray0[0] = integer1;
      integerArray0[1] = integer1;
      integerArray0[2] = integer1;
      integerArray0[3] = integer0;
      integerArray0[4] = integer2;
      integerArray0[5] = integer0;
      integerArray0[6] = integer2;
      Integer integer3 = Integer.valueOf((-2178));
      assertEquals((-2178), (int)integer3);
      assertNotNull(integer3);
      assertFalse(integer3.equals((Object)integer1));
      assertFalse(integer3.equals((Object)integer0));
      assertFalse(integer3.equals((Object)integer2));
      assertFalse(integer3.equals((Object)int0));
      
      integerArray0[7] = integer3;
      Vec<Integer> vec1 = new Vec<Integer>(integerArray0);
      assertEquals(8, integerArray0.length);
      assertEquals(8, vec1.size());
      assertFalse(vec1.isEmpty());
      assertNotNull(vec1);
      
      Integer[] integerArray1 = vec1.toArray();
      assertEquals(8, integerArray1.length);
      assertEquals(8, integerArray0.length);
      assertEquals(8, vec1.size());
      assertFalse(vec1.isEmpty());
      assertNotNull(integerArray1);
      assertSame(integerArray1, integerArray0);
      assertSame(integerArray0, integerArray1);
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      int int0 = 893;
      Vec<String> vec0 = new Vec<String>(893, "");
      assertFalse(vec0.isEmpty());
      assertEquals(893, vec0.size());
      assertNotNull(vec0);
      
      ReadOnlyVec<String> readOnlyVec0 = new ReadOnlyVec<String>(vec0);
      assertFalse(vec0.isEmpty());
      assertEquals(893, vec0.size());
      assertEquals(893, readOnlyVec0.size());
      assertFalse(readOnlyVec0.isEmpty());
      assertNotNull(readOnlyVec0);
      
      // Undeclared exception!
      try { 
        vec0.copyTo((IVec<String>) readOnlyVec0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // org.sat4j.core.ReadOnlyVec cannot be cast to org.sat4j.core.Vec
         //
         verifyException("org.sat4j.core.Vec", e);
      }
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      String[] stringArray0 = new String[4];
      stringArray0[0] = "";
      Object object0 = new Object();
      assertNotNull(object0);
      
      Integer integer0 = new Integer(2678);
      assertEquals(2678, (int)integer0);
      assertNotNull(integer0);
      
      Vec<Object> vec0 = new Vec<Object>(0, integer0);
      assertEquals(0, vec0.size());
      assertTrue(vec0.isEmpty());
      assertNotNull(vec0);
      
      Vec<Object> vec1 = new Vec<Object>(stringArray0);
      assertEquals(4, stringArray0.length);
      assertEquals(4, vec1.size());
      assertFalse(vec1.isEmpty());
      assertNotNull(vec1);
      assertFalse(vec1.equals((Object)vec0));
      
      vec0.moveTo((IVec<Object>) vec1);
      assertEquals(4, stringArray0.length);
      assertEquals(0, vec0.size());
      assertTrue(vec0.isEmpty());
      assertEquals(4, vec1.size());
      assertFalse(vec1.isEmpty());
      assertNotSame(vec0, vec1);
      assertNotSame(vec1, vec0);
      assertFalse(vec0.equals((Object)vec1));
      assertFalse(vec1.equals((Object)vec0));
      
      Vec<Object> vec2 = new Vec<Object>();
      assertEquals(0, vec2.size());
      assertTrue(vec2.isEmpty());
      assertNotNull(vec2);
      assertFalse(vec2.equals((Object)vec1));
      assertTrue(vec2.equals((Object)vec0));
      
      String string0 = vec0.toString();
      assertEquals("", string0);
      assertEquals(0, vec0.size());
      assertTrue(vec0.isEmpty());
      assertNotNull(string0);
      assertNotSame(vec0, vec1);
      assertNotSame(vec0, vec2);
      assertTrue(vec0.equals((Object)vec2));
      assertFalse(vec0.equals((Object)vec1));
      
      Vec<Comparable<String>> vec3 = new Vec<Comparable<String>>(201, "");
      assertFalse(vec3.isEmpty());
      assertEquals(201, vec3.size());
      assertNotNull(vec3);
      
      vec3.shrink((-20));
      assertFalse(vec3.isEmpty());
      assertEquals(201, vec3.size());
      
      Vec<Integer>[] vecArray0 = (Vec<Integer>[]) Array.newInstance(Vec.class, 4);
      Vec<Integer> vec4 = new Vec<Integer>(839);
      assertEquals(0, vec4.size());
      assertTrue(vec4.isEmpty());
      assertNotNull(vec4);
      
      vecArray0[0] = vec4;
      Vec<Integer> vec5 = new Vec<Integer>(912, integer0);
      assertEquals(912, vec5.size());
      assertFalse(vec5.isEmpty());
      assertNotNull(vec5);
      assertFalse(vec5.equals((Object)vec4));
      
      vecArray0[1] = vec5;
      Vec<Integer> vec6 = new Vec<Integer>();
      assertEquals(0, vec6.size());
      assertTrue(vec6.isEmpty());
      assertNotNull(vec6);
      assertFalse(vec6.equals((Object)vec5));
      assertTrue(vec6.equals((Object)vec4));
      
      vecArray0[2] = vec6;
      Vec<Integer> vec7 = new Vec<Integer>(2777);
      assertEquals(0, vec7.size());
      assertTrue(vec7.isEmpty());
      assertNotNull(vec7);
      assertFalse(vec7.equals((Object)vec5));
      assertTrue(vec7.equals((Object)vec4));
      assertTrue(vec7.equals((Object)vec6));
      
      vecArray0[3] = vec7;
      Vec<Vec<Integer>> vec8 = new Vec<Vec<Integer>>(vecArray0);
      assertEquals(4, vecArray0.length);
      assertEquals(4, vec8.size());
      assertFalse(vec8.isEmpty());
      assertNotNull(vec8);
      
      vec8.remove(vec7);
      assertEquals(4, vecArray0.length);
      assertEquals(0, vec7.size());
      assertTrue(vec7.isEmpty());
      assertEquals(3, vec8.size());
      assertFalse(vec8.isEmpty());
      assertNotSame(vec7, vec6);
      assertNotSame(vec7, vec4);
      assertNotSame(vec7, vec5);
      assertFalse(vec7.equals((Object)vec5));
      assertTrue(vec7.equals((Object)vec4));
      assertTrue(vec7.equals((Object)vec6));
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      int int0 = 2781;
      String[] stringArray0 = new String[0];
      Vec<String> vec0 = new Vec<String>(stringArray0);
      assertEquals(0, stringArray0.length);
      assertEquals(0, vec0.size());
      assertTrue(vec0.isEmpty());
      assertNotNull(vec0);
      
      vec0.insertFirst("ec!#M#JNtM!c");
      assertEquals(0, stringArray0.length);
      assertFalse(vec0.isEmpty());
      assertEquals(1, vec0.size());
      
      vec0.clear();
      assertEquals(0, stringArray0.length);
      assertEquals(0, vec0.size());
      assertTrue(vec0.isEmpty());
      
      Vec<Vec<String>> vec1 = new Vec<Vec<String>>(2781, vec0);
      assertEquals(0, stringArray0.length);
      assertEquals(0, vec0.size());
      assertTrue(vec0.isEmpty());
      assertFalse(vec1.isEmpty());
      assertEquals(2781, vec1.size());
      assertNotNull(vec1);
      
      int int1 = 158;
      int int2 = (-1);
      Vec<Object> vec2 = new Vec<Object>();
      assertEquals(0, vec2.size());
      assertTrue(vec2.isEmpty());
      assertNotNull(vec2);
      
      // Undeclared exception!
      try { 
        vec2.moveTo(1215, 5706);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 5706
         //
         verifyException("org.sat4j.core.Vec", e);
      }
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      Vec<ReadOnlyVec<Object>> vec0 = new Vec<ReadOnlyVec<Object>>();
      assertTrue(vec0.isEmpty());
      assertEquals(0, vec0.size());
      assertNotNull(vec0);
      
      Vec<ReadOnlyVec<String>> vec1 = new Vec<ReadOnlyVec<String>>();
      assertTrue(vec1.isEmpty());
      assertEquals(0, vec1.size());
      assertNotNull(vec1);
      
      Vec<Object> vec2 = new Vec<Object>();
      assertTrue(vec2.isEmpty());
      assertEquals(0, vec2.size());
      assertNotNull(vec2);
      
      String string0 = vec2.toString();
      assertEquals("", string0);
      assertTrue(vec2.isEmpty());
      assertEquals(0, vec2.size());
      assertNotNull(string0);
      
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      vec2.sortUnique(comparator0);
      assertTrue(vec2.isEmpty());
      assertEquals(0, vec2.size());
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      Object[] objectArray0 = new Object[0];
      Vec<Object> vec0 = new Vec<Object>(objectArray0);
      assertEquals(0, objectArray0.length);
      assertTrue(vec0.isEmpty());
      assertEquals(0, vec0.size());
      assertNotNull(vec0);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      Vec<Object> vec1 = new Vec<Object>(0, object0);
      assertEquals(0, vec1.size());
      assertTrue(vec1.isEmpty());
      assertNotNull(vec1);
      assertTrue(vec1.equals((Object)vec0));
      
      vec0.moveTo((IVec<Object>) vec1);
      assertEquals(0, objectArray0.length);
      assertTrue(vec0.isEmpty());
      assertEquals(0, vec0.size());
      assertEquals(0, vec1.size());
      assertTrue(vec1.isEmpty());
      assertNotSame(vec0, vec1);
      assertNotSame(vec1, vec0);
      assertTrue(vec0.equals((Object)vec1));
      assertTrue(vec1.equals((Object)vec0));
      
      Vec<Object> vec2 = new Vec<Object>();
      assertTrue(vec2.isEmpty());
      assertEquals(0, vec2.size());
      assertNotNull(vec2);
      assertTrue(vec2.equals((Object)vec1));
      assertTrue(vec2.equals((Object)vec0));
      
      String string0 = vec2.toString();
      assertEquals("", string0);
      assertTrue(vec2.isEmpty());
      assertEquals(0, vec2.size());
      assertNotNull(string0);
      assertNotSame(vec2, vec0);
      assertNotSame(vec2, vec1);
      assertTrue(vec2.equals((Object)vec1));
      assertTrue(vec2.equals((Object)vec0));
      
      Vec<Comparable<String>> vec3 = new Vec<Comparable<String>>(0, "");
      assertEquals(0, vec3.size());
      assertTrue(vec3.isEmpty());
      assertNotNull(vec3);
      
      vec3.shrink((-4071));
      assertEquals(0, vec3.size());
      assertTrue(vec3.isEmpty());
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      Vec<String> vec0 = new Vec<String>();
      assertTrue(vec0.isEmpty());
      assertEquals(0, vec0.size());
      assertNotNull(vec0);
      
      Vec<Vec<String>> vec1 = new Vec<Vec<String>>(1050, vec0);
      assertTrue(vec0.isEmpty());
      assertEquals(0, vec0.size());
      assertEquals(1050, vec1.size());
      assertFalse(vec1.isEmpty());
      assertNotNull(vec1);
      
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) vec0;
      objectArray0[1] = (Object) vec1;
      objectArray0[2] = (Object) "7[Y qestaj";
      Object object0 = new Object();
      assertNotNull(object0);
      
      objectArray0[3] = object0;
      objectArray0[4] = (Object) "7[Y qestaj";
      String[] stringArray0 = new String[0];
      Vec<String> vec2 = new Vec<String>(stringArray0);
      assertEquals(0, stringArray0.length);
      assertEquals(0, vec2.size());
      assertTrue(vec2.isEmpty());
      assertNotNull(vec2);
      assertTrue(vec2.equals((Object)vec0));
      
      objectArray0[5] = (Object) vec2;
      Vec<Object> vec3 = new Vec<Object>(objectArray0);
      assertEquals(6, objectArray0.length);
      assertEquals(6, vec3.size());
      assertFalse(vec3.isEmpty());
      assertNotNull(vec3);
      
      IVec<Object> iVec0 = vec3.push(object0);
      assertEquals(6, objectArray0.length);
      assertEquals(7, vec3.size());
      assertFalse(vec3.isEmpty());
      assertFalse(iVec0.isEmpty());
      assertEquals(7, iVec0.size());
      assertNotNull(iVec0);
      
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn(0, 0, 0, 0, 0).when(comparator0).compare(any() , any());
      vec3.sortUnique(comparator0);
      assertEquals(6, objectArray0.length);
      assertEquals(1, vec3.size());
      assertFalse(vec3.isEmpty());
      
      Vec<String> vec4 = new Vec<String>();
      assertTrue(vec4.isEmpty());
      assertEquals(0, vec4.size());
      assertNotNull(vec4);
      assertTrue(vec4.equals((Object)vec2));
      assertTrue(vec4.equals((Object)vec0));
      
      int int0 = vec4.indexOf("");
      assertEquals((-1), int0);
      assertTrue(vec4.isEmpty());
      assertEquals(0, vec4.size());
      assertNotSame(vec4, vec0);
      assertNotSame(vec4, vec2);
      assertTrue(vec4.equals((Object)vec2));
      assertTrue(vec4.equals((Object)vec0));
      
      Vec<String> vec5 = new Vec<String>(1065);
      assertTrue(vec5.isEmpty());
      assertEquals(0, vec5.size());
      assertNotNull(vec5);
      assertTrue(vec5.equals((Object)vec0));
      assertTrue(vec5.equals((Object)vec4));
      assertTrue(vec5.equals((Object)vec2));
      
      boolean boolean0 = vec5.isEmpty();
      assertTrue(boolean0);
      assertTrue(vec5.isEmpty());
      assertEquals(0, vec5.size());
      assertNotSame(vec5, vec4);
      assertNotSame(vec5, vec2);
      assertNotSame(vec5, vec0);
      assertTrue(vec5.equals((Object)vec0));
      assertTrue(vec5.equals((Object)vec4));
      assertTrue(vec5.equals((Object)vec2));
      
      Vec vec6 = (Vec)vec3.get(0);
      assertEquals(6, objectArray0.length);
      assertEquals(0, vec6.size());
      assertTrue(vec6.isEmpty());
      assertEquals(1, vec3.size());
      assertFalse(vec3.isEmpty());
      assertNotNull(vec6);
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      Vec<ReadOnlyVec<Object>> vec0 = new Vec<ReadOnlyVec<Object>>();
      assertTrue(vec0.isEmpty());
      assertEquals(0, vec0.size());
      assertNotNull(vec0);
      
      Vec<Comparable<String>> vec1 = new Vec<Comparable<String>>();
      assertEquals(0, vec1.size());
      assertTrue(vec1.isEmpty());
      assertNotNull(vec1);
      
      Vec<Object> vec2 = new Vec<Object>(965);
      assertEquals(0, vec2.size());
      assertTrue(vec2.isEmpty());
      assertNotNull(vec2);
      
      Vec<String> vec3 = new Vec<String>(965, "org.sat4j.core.ReadOnlyVec");
      assertEquals(965, vec3.size());
      assertFalse(vec3.isEmpty());
      assertNotNull(vec3);
      
      int int0 = vec3.indexOf("org.sat4j.core.ReadOnlyVec");
      assertEquals(0, int0);
      assertEquals(965, vec3.size());
      assertFalse(vec3.isEmpty());
      
      Vec<Vec<Object>> vec4 = new Vec<Vec<Object>>(1082);
      assertTrue(vec4.isEmpty());
      assertEquals(0, vec4.size());
      assertNotNull(vec4);
      
      // Undeclared exception!
      try { 
        vec4.moveTo(1, 1649);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1649
         //
         verifyException("org.sat4j.core.Vec", e);
      }
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      Object object0 = new Object();
      assertNotNull(object0);
      
      Vec<Object> vec0 = new Vec<Object>(0, object0);
      assertEquals(0, vec0.size());
      assertTrue(vec0.isEmpty());
      assertNotNull(vec0);
      
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        vec0.copyTo((IVec<Object>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.core.Vec", e);
      }
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      Integer integer0 = new Integer(1853);
      assertEquals(1853, (int)integer0);
      assertNotNull(integer0);
      
      Vec<Object> vec0 = new Vec<Object>(1853, integer0);
      assertFalse(vec0.isEmpty());
      assertEquals(1853, vec0.size());
      assertNotNull(vec0);
      
      Object[] objectArray0 = vec0.toArray();
      assertEquals(1853, objectArray0.length);
      assertFalse(vec0.isEmpty());
      assertEquals(1853, vec0.size());
      assertNotNull(objectArray0);
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      Vec<ReadOnlyVec<Object>> vec0 = new Vec<ReadOnlyVec<Object>>();
      assertEquals(0, vec0.size());
      assertTrue(vec0.isEmpty());
      assertNotNull(vec0);
      
      Vec<Integer> vec1 = new Vec<Integer>(15);
      assertEquals(0, vec1.size());
      assertTrue(vec1.isEmpty());
      assertNotNull(vec1);
      
      boolean boolean0 = vec1.isEmpty();
      assertTrue(boolean0);
      assertEquals(0, vec1.size());
      assertTrue(vec1.isEmpty());
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      String[] stringArray0 = new String[0];
      Vec<String> vec0 = new Vec<String>(stringArray0);
      assertEquals(0, stringArray0.length);
      assertEquals(0, vec0.size());
      assertTrue(vec0.isEmpty());
      assertNotNull(vec0);
      
      vec0.insertFirst("m");
      assertEquals(0, stringArray0.length);
      assertFalse(vec0.isEmpty());
      assertEquals(1, vec0.size());
      
      Vec<Object> vec1 = new Vec<Object>(stringArray0);
      assertEquals(0, stringArray0.length);
      assertTrue(vec1.isEmpty());
      assertEquals(0, vec1.size());
      assertNotNull(vec1);
      
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        vec1.selectionSort((-18), 528, comparator0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      Vec<ReadOnlyVec<Object>> vec0 = new Vec<ReadOnlyVec<Object>>();
      assertTrue(vec0.isEmpty());
      assertEquals(0, vec0.size());
      assertNotNull(vec0);
      
      Vec<Comparable<String>> vec1 = new Vec<Comparable<String>>();
      assertTrue(vec1.isEmpty());
      assertEquals(0, vec1.size());
      assertNotNull(vec1);
      
      Vec<ReadOnlyVec<String>> vec2 = new Vec<ReadOnlyVec<String>>();
      assertTrue(vec2.isEmpty());
      assertEquals(0, vec2.size());
      assertNotNull(vec2);
      
      IVec<ReadOnlyVec<String>> iVec0 = new Vec<ReadOnlyVec<String>>();
      assertEquals(0, iVec0.size());
      assertTrue(iVec0.isEmpty());
      assertNotNull(iVec0);
      
      boolean boolean0 = vec2.equals((Object) null);
      assertFalse(boolean0);
      assertTrue(vec2.isEmpty());
      assertEquals(0, vec2.size());
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      Vec<ReadOnlyVec<Object>> vec0 = new Vec<ReadOnlyVec<Object>>();
      assertTrue(vec0.isEmpty());
      assertEquals(0, vec0.size());
      assertNotNull(vec0);
      
      Vec<ReadOnlyVec<String>> vec1 = new Vec<ReadOnlyVec<String>>();
      assertTrue(vec1.isEmpty());
      assertEquals(0, vec1.size());
      assertNotNull(vec1);
      
      IVec<ReadOnlyVec<String>> iVec0 = vec1.clone();
      assertTrue(vec1.isEmpty());
      assertEquals(0, vec1.size());
      assertEquals(0, iVec0.size());
      assertTrue(iVec0.isEmpty());
      assertNotNull(iVec0);
      
      boolean boolean0 = vec1.equals(vec0);
      assertTrue(boolean0);
      assertTrue(vec0.isEmpty());
      assertEquals(0, vec0.size());
      assertTrue(vec1.isEmpty());
      assertEquals(0, vec1.size());
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      Vec<ReadOnlyVec<Object>> vec0 = new Vec<ReadOnlyVec<Object>>();
      assertEquals(0, vec0.size());
      assertTrue(vec0.isEmpty());
      assertNotNull(vec0);
      
      Vec<Object> vec1 = new Vec<Object>();
      assertEquals(0, vec1.size());
      assertTrue(vec1.isEmpty());
      assertNotNull(vec1);
      
      vec1.ensure(0);
      assertEquals(0, vec1.size());
      assertTrue(vec1.isEmpty());
      
      Vec<ReadOnlyVec<String>> vec2 = new Vec<ReadOnlyVec<String>>();
      assertEquals(0, vec2.size());
      assertTrue(vec2.isEmpty());
      assertNotNull(vec2);
      
      Iterator<ReadOnlyVec<String>> iterator0 = vec2.iterator();
      assertEquals(0, vec2.size());
      assertTrue(vec2.isEmpty());
      assertNotNull(iterator0);
      
      Vec<ReadOnlyVec<Integer>> vec3 = new Vec<ReadOnlyVec<Integer>>();
      assertTrue(vec3.isEmpty());
      assertEquals(0, vec3.size());
      assertNotNull(vec3);
      
      Vec<ReadOnlyVec<Integer>> vec4 = new Vec<ReadOnlyVec<Integer>>();
      assertEquals(0, vec4.size());
      assertTrue(vec4.isEmpty());
      assertNotNull(vec4);
      assertTrue(vec4.equals((Object)vec3));
      
      vec4.clear();
      assertEquals(0, vec4.size());
      assertTrue(vec4.isEmpty());
      assertNotSame(vec4, vec3);
      assertTrue(vec4.equals((Object)vec3));
      
      vec3.moveTo((IVec<ReadOnlyVec<Integer>>) vec4);
      assertTrue(vec3.isEmpty());
      assertEquals(0, vec3.size());
      assertEquals(0, vec4.size());
      assertTrue(vec4.isEmpty());
      assertNotSame(vec3, vec4);
      assertNotSame(vec4, vec3);
      assertTrue(vec3.equals((Object)vec4));
      assertTrue(vec4.equals((Object)vec3));
      
      vec3.shrink(0);
      assertTrue(vec3.isEmpty());
      assertEquals(0, vec3.size());
      assertNotSame(vec3, vec4);
      assertTrue(vec3.equals((Object)vec4));
      
      boolean boolean0 = vec3.equals(vec1);
      assertTrue(boolean0);
      assertEquals(0, vec1.size());
      assertTrue(vec1.isEmpty());
      assertTrue(vec3.isEmpty());
      assertEquals(0, vec3.size());
      assertNotSame(vec3, vec4);
      assertTrue(vec3.equals((Object)vec4));
      
      Vec<Vec<Integer>> vec5 = new Vec<Vec<Integer>>(0);
      assertEquals(0, vec5.size());
      assertTrue(vec5.isEmpty());
      assertNotNull(vec5);
      
      // Undeclared exception!
      try { 
        vec5.shrink(1850);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("org.sat4j.core.Vec", e);
      }
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      Vec<Object> vec0 = new Vec<Object>();
      assertTrue(vec0.isEmpty());
      assertEquals(0, vec0.size());
      assertNotNull(vec0);
      
      Object[] objectArray0 = vec0.toArray();
      assertEquals(5, objectArray0.length);
      assertTrue(vec0.isEmpty());
      assertEquals(0, vec0.size());
      assertNotNull(objectArray0);
      
      int int0 = 1;
      String string0 = "`s*#[RMk6]jLUwux";
      try { 
        Integer.parseInt("`s*#[RMk6]jLUwux");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"`s*#[RMk6]jLUwux\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      Vec<String> vec0 = new Vec<String>(2466, "&Gv#");
      assertEquals(2466, vec0.size());
      assertFalse(vec0.isEmpty());
      assertNotNull(vec0);
      
      vec0.insertFirstWithShifting("");
      assertEquals(2467, vec0.size());
      assertFalse(vec0.isEmpty());
      
      vec0.clear();
      assertEquals(0, vec0.size());
      assertTrue(vec0.isEmpty());
      
      Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      vec0.sort(comparator0);
      assertEquals(0, vec0.size());
      assertTrue(vec0.isEmpty());
      
      Comparator<String> comparator1 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      vec0.selectionSort(2466, 2, comparator1);
      assertEquals(0, vec0.size());
      assertTrue(vec0.isEmpty());
      
      Vec<Object> vec1 = new Vec<Object>();
      assertEquals(0, vec1.size());
      assertTrue(vec1.isEmpty());
      assertNotNull(vec1);
      
      vec1.ensure(1742);
      assertEquals(0, vec1.size());
      assertTrue(vec1.isEmpty());
      
      boolean boolean0 = vec0.contains("&Gv#");
      assertFalse(boolean0);
      assertEquals(0, vec0.size());
      assertTrue(vec0.isEmpty());
      
      vec1.set(233, "&Gv#");
      assertEquals(0, vec1.size());
      assertTrue(vec1.isEmpty());
      
      Vec<Integer> vec2 = new Vec<Integer>(512);
      assertEquals(0, vec2.size());
      assertTrue(vec2.isEmpty());
      assertNotNull(vec2);
      
      vec0.insertFirst("Mb]tB4L'6I");
      assertEquals(1, vec0.size());
      assertFalse(vec0.isEmpty());
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      Vec<Object> vec3 = new Vec<Object>(41, object0);
      assertEquals(41, vec3.size());
      assertFalse(vec3.isEmpty());
      assertNotNull(vec3);
      assertFalse(vec3.equals((Object)vec1));
      
      vec3.insertFirstWithShifting("&Gv#");
      assertEquals(42, vec3.size());
      assertFalse(vec3.isEmpty());
      assertNotSame(vec3, vec1);
      assertFalse(vec3.equals((Object)vec1));
      
      Comparator<Object> comparator2 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn(233, 2652, 15, 835, 2652).when(comparator2).compare(any() , any());
      vec3.sortUnique(comparator2);
      assertFalse(vec3.isEmpty());
      assertEquals(1, vec3.size());
      assertNotSame(vec3, vec1);
      assertFalse(vec3.equals((Object)vec1));
      
      vec0.hashCode();
      assertEquals(1, vec0.size());
      assertFalse(vec0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      Vec<Integer> vec0 = new Vec<Integer>();
      assertTrue(vec0.isEmpty());
      assertEquals(0, vec0.size());
      assertNotNull(vec0);
      
      Comparator<Integer> comparator0 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      vec0.selectionSort(2341, 2341, comparator0);
      assertTrue(vec0.isEmpty());
      assertEquals(0, vec0.size());
      
      // Undeclared exception!
      try { 
        vec0.pop();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("org.sat4j.core.Vec", e);
      }
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      Vec<String> vec0 = new Vec<String>();
      assertTrue(vec0.isEmpty());
      assertEquals(0, vec0.size());
      assertNotNull(vec0);
      
      vec0.insertFirst("7[Y)qestQj");
      assertEquals(1, vec0.size());
      assertFalse(vec0.isEmpty());
      
      boolean boolean0 = vec0.contains("7[Y)qestQj");
      assertTrue(boolean0);
      assertEquals(1, vec0.size());
      assertFalse(vec0.isEmpty());
      
      int int0 = vec0.indexOf("");
      assertEquals((-1), int0);
      assertEquals(1, vec0.size());
      assertFalse(vec0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      Vec<Object> vec0 = new Vec<Object>();
      assertTrue(vec0.isEmpty());
      assertEquals(0, vec0.size());
      assertNotNull(vec0);
      
      int int0 = (-1);
      IVec<Object> iVec0 = vec0.clone();
      assertTrue(vec0.isEmpty());
      assertEquals(0, vec0.size());
      assertTrue(iVec0.isEmpty());
      assertEquals(0, iVec0.size());
      assertNotNull(iVec0);
      
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      vec0.selectionSort((-1), (-1), comparator0);
      assertTrue(vec0.isEmpty());
      assertEquals(0, vec0.size());
      
      vec0.moveTo((-1), (-1));
      assertTrue(vec0.isEmpty());
      assertEquals(0, vec0.size());
      
      // Undeclared exception!
      try { 
        vec0.last();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("org.sat4j.core.Vec", e);
      }
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      int int0 = 2781;
      String[] stringArray0 = new String[0];
      Vec<String> vec0 = new Vec<String>(stringArray0);
      assertEquals(0, stringArray0.length);
      assertTrue(vec0.isEmpty());
      assertEquals(0, vec0.size());
      assertNotNull(vec0);
      
      vec0.insertFirst("ec!#M#JNtM!c");
      assertEquals(0, stringArray0.length);
      assertFalse(vec0.isEmpty());
      assertEquals(1, vec0.size());
      
      vec0.clear();
      assertEquals(0, stringArray0.length);
      assertTrue(vec0.isEmpty());
      assertEquals(0, vec0.size());
      
      Vec<Vec<String>> vec1 = new Vec<Vec<String>>(2781, vec0);
      assertEquals(0, stringArray0.length);
      assertTrue(vec0.isEmpty());
      assertEquals(0, vec0.size());
      assertFalse(vec1.isEmpty());
      assertEquals(2781, vec1.size());
      assertNotNull(vec1);
      
      Comparator<Vec<String>> comparator0 = (Comparator<Vec<String>>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn(0, 0, 0, 0, 0).when(comparator0).compare(nullable(org.sat4j.core.Vec.class) , nullable(org.sat4j.core.Vec.class));
      vec1.sort(comparator0);
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      Vec<ReadOnlyVec<Object>> vec0 = new Vec<ReadOnlyVec<Object>>();
      assertTrue(vec0.isEmpty());
      assertEquals(0, vec0.size());
      assertNotNull(vec0);
      
      Vec<ReadOnlyVec<String>> vec1 = new Vec<ReadOnlyVec<String>>();
      assertTrue(vec1.isEmpty());
      assertEquals(0, vec1.size());
      assertNotNull(vec1);
      
      Vec<String> vec2 = new Vec<String>(946, "176PRV");
      assertEquals(946, vec2.size());
      assertFalse(vec2.isEmpty());
      assertNotNull(vec2);
      
      ReadOnlyVec<String> readOnlyVec0 = new ReadOnlyVec<String>(vec2);
      assertEquals(946, vec2.size());
      assertFalse(vec2.isEmpty());
      assertEquals(946, readOnlyVec0.size());
      assertFalse(readOnlyVec0.isEmpty());
      assertNotNull(readOnlyVec0);
      
      vec1.insertFirstWithShifting(readOnlyVec0);
      assertFalse(vec1.isEmpty());
      assertEquals(1, vec1.size());
      assertEquals(946, vec2.size());
      assertFalse(vec2.isEmpty());
      assertEquals(946, readOnlyVec0.size());
      assertFalse(readOnlyVec0.isEmpty());
      
      vec2.insertFirst("");
      assertEquals(947, vec2.size());
      assertFalse(vec2.isEmpty());
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      Vec<Object> vec0 = null;
      try {
        vec0 = new Vec<Object>((Object[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.core.Vec", e);
      }
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      String[] stringArray0 = new String[0];
      Vec<String> vec0 = new Vec<String>(stringArray0);
      assertEquals(0, stringArray0.length);
      assertTrue(vec0.isEmpty());
      assertEquals(0, vec0.size());
      assertNotNull(vec0);
      
      vec0.hashCode();
      assertEquals(0, stringArray0.length);
      assertTrue(vec0.isEmpty());
      assertEquals(0, vec0.size());
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) "ec!#M#JNtM!c";
      Vec<Object> vec0 = new Vec<Object>(objectArray0);
      assertEquals(1, objectArray0.length);
      assertFalse(vec0.isEmpty());
      assertEquals(1, vec0.size());
      assertNotNull(vec0);
      
      IVec<Object> iVec0 = vec0.push(";]_`?K5");
      assertEquals(1, objectArray0.length);
      assertFalse(vec0.isEmpty());
      assertEquals(2, vec0.size());
      assertEquals(2, iVec0.size());
      assertFalse(iVec0.isEmpty());
      assertNotNull(iVec0);
      
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn(2781, 2781).when(comparator0).compare(any() , any());
      vec0.sortUnique(comparator0);
      assertEquals(1, objectArray0.length);
      assertFalse(vec0.isEmpty());
      assertEquals(1, vec0.size());
      
      vec0.insertFirst(";]_`?K5");
      assertEquals(1, objectArray0.length);
      assertFalse(vec0.isEmpty());
      assertEquals(2, vec0.size());
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      Vec<String> vec0 = new Vec<String>();
      assertEquals(0, vec0.size());
      assertTrue(vec0.isEmpty());
      assertNotNull(vec0);
      
      boolean boolean0 = vec0.contains("7[Y qestaj");
      assertFalse(boolean0);
      assertEquals(0, vec0.size());
      assertTrue(vec0.isEmpty());
      
      vec0.growTo((-25), "org.sat4j.core.Vec$1");
      assertEquals((-25), vec0.size());
      assertFalse(vec0.isEmpty());
      
      // Undeclared exception!
      try { 
        vec0.insertFirst("V7=~b#tDv");
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -25
         //
         verifyException("org.sat4j.core.Vec", e);
      }
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      Vec<Vec<Object>> vec0 = new Vec<Vec<Object>>(8);
      assertTrue(vec0.isEmpty());
      assertEquals(0, vec0.size());
      assertNotNull(vec0);
      
      Vec<Object> vec1 = new Vec<Object>(8, (Object) null);
      assertEquals(8, vec1.size());
      assertFalse(vec1.isEmpty());
      assertNotNull(vec1);
      
      // Undeclared exception!
      try { 
        vec0.removeFromLast(vec1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("org.sat4j.core.Vec", e);
      }
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      Vec<String> vec0 = new Vec<String>();
      assertEquals(0, vec0.size());
      assertTrue(vec0.isEmpty());
      assertNotNull(vec0);
      
      boolean boolean0 = vec0.contains("7[Y)qestQj");
      assertFalse(boolean0);
      assertEquals(0, vec0.size());
      assertTrue(vec0.isEmpty());
      
      int int0 = (-1);
      String string0 = "org.sat4j.core.Vec$1";
      vec0.growTo((-1), "org.sat4j.core.Vec$1");
      assertEquals((-1), vec0.size());
      assertFalse(vec0.isEmpty());
      
      // Undeclared exception!
      try { 
        vec0.insertFirst("");
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("org.sat4j.core.Vec", e);
      }
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      Vec<Vec<Object>> vec0 = new Vec<Vec<Object>>(0);
      assertTrue(vec0.isEmpty());
      assertEquals(0, vec0.size());
      assertNotNull(vec0);
      
      String[] stringArray0 = new String[4];
      stringArray0[0] = "Ax";
      stringArray0[1] = "K'4Zb:dy'#l";
      stringArray0[2] = "a8Oo\"YRlw";
      Iterator<Vec<Object>> iterator0 = vec0.iterator();
      assertTrue(vec0.isEmpty());
      assertEquals(0, vec0.size());
      assertNotNull(iterator0);
      
      stringArray0[3] = "9${a6K,E!>ldB4";
      vec0.copyTo(stringArray0);
      assertEquals(4, stringArray0.length);
      assertTrue(vec0.isEmpty());
      assertEquals(0, vec0.size());
      
      Vec<Object> vec1 = null;
      try {
        vec1 = new Vec<Object>((-2513));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.core.Vec", e);
      }
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      Vec<Object> vec0 = new Vec<Object>(0, (Object) null);
      assertTrue(vec0.isEmpty());
      assertEquals(0, vec0.size());
      assertNotNull(vec0);
      
      vec0.insertFirst((Object) null);
      assertFalse(vec0.isEmpty());
      assertEquals(1, vec0.size());
      
      vec0.hashCode();
      assertFalse(vec0.isEmpty());
      assertEquals(1, vec0.size());
      
      Vec<Integer> vec1 = new Vec<Integer>(0);
      assertEquals(0, vec1.size());
      assertTrue(vec1.isEmpty());
      assertNotNull(vec1);
      
      IVec<Integer> iVec0 = vec1.push((Integer) null);
      assertFalse(vec1.isEmpty());
      assertEquals(1, vec1.size());
      assertEquals(1, iVec0.size());
      assertFalse(iVec0.isEmpty());
      assertNotNull(iVec0);
      
      vec1.set(0, (Integer) null);
      assertFalse(vec1.isEmpty());
      assertEquals(1, vec1.size());
      
      String[] stringArray0 = new String[8];
      stringArray0[0] = "org.sat4j.core.ReadOnlyVec";
      stringArray0[1] = ",";
      stringArray0[2] = "sE*5Cabs}O6|uR";
      stringArray0[3] = "M}v7sll^";
      stringArray0[4] = "bsihXl'*QI*7+ZXPg";
      stringArray0[5] = "";
      stringArray0[6] = "";
      stringArray0[7] = "}1I,Z}l";
      Vec<String> vec2 = new Vec<String>(stringArray0);
      assertEquals(8, stringArray0.length);
      assertEquals(8, vec2.size());
      assertFalse(vec2.isEmpty());
      assertNotNull(vec2);
      
      vec2.growTo((-1389), "}1I,Z}l");
      assertEquals(8, stringArray0.length);
      assertFalse(vec2.isEmpty());
      assertEquals((-1389), vec2.size());
      
      // Undeclared exception!
      try { 
        vec2.push("b%P0");
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1389
         //
         verifyException("org.sat4j.core.Vec", e);
      }
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      Vec<String> vec0 = new Vec<String>(1531);
      assertEquals(0, vec0.size());
      assertTrue(vec0.isEmpty());
      assertNotNull(vec0);
      
      int int0 = vec0.indexOf("org.sat4j.core.Vec");
      assertEquals((-1), int0);
      assertEquals(0, vec0.size());
      assertTrue(vec0.isEmpty());
      
      Vec<Vec<Object>> vec1 = new Vec<Vec<Object>>();
      assertTrue(vec1.isEmpty());
      assertEquals(0, vec1.size());
      assertNotNull(vec1);
      
      vec1.clear();
      assertTrue(vec1.isEmpty());
      assertEquals(0, vec1.size());
      
      boolean boolean0 = vec1.isEmpty();
      assertTrue(boolean0);
      assertTrue(vec1.isEmpty());
      assertEquals(0, vec1.size());
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      Vec<String> vec0 = new Vec<String>(0);
      assertTrue(vec0.isEmpty());
      assertEquals(0, vec0.size());
      assertNotNull(vec0);
      
      Vec<ReadOnlyVec<Object>> vec1 = new Vec<ReadOnlyVec<Object>>(0);
      assertTrue(vec1.isEmpty());
      assertEquals(0, vec1.size());
      assertNotNull(vec1);
      
      vec1.clear();
      assertTrue(vec1.isEmpty());
      assertEquals(0, vec1.size());
      
      int int0 = 1784;
      Vec<Object> vec2 = new Vec<Object>();
      assertTrue(vec2.isEmpty());
      assertEquals(0, vec2.size());
      assertNotNull(vec2);
      
      ReadOnlyVec<Object> readOnlyVec0 = new ReadOnlyVec<Object>(vec2);
      assertTrue(vec2.isEmpty());
      assertEquals(0, vec2.size());
      assertEquals(0, readOnlyVec0.size());
      assertTrue(readOnlyVec0.isEmpty());
      assertNotNull(readOnlyVec0);
      
      Vec<ReadOnlyVec<Object>> vec3 = new Vec<ReadOnlyVec<Object>>(1784, readOnlyVec0);
      assertTrue(vec2.isEmpty());
      assertEquals(0, vec2.size());
      assertEquals(0, readOnlyVec0.size());
      assertTrue(readOnlyVec0.isEmpty());
      assertFalse(vec3.isEmpty());
      assertEquals(1784, vec3.size());
      assertNotNull(vec3);
      assertFalse(vec3.equals((Object)vec1));
      
      boolean boolean0 = vec3.equals(vec0);
      assertFalse(boolean0);
      assertTrue(vec0.isEmpty());
      assertEquals(0, vec0.size());
      assertTrue(vec2.isEmpty());
      assertEquals(0, vec2.size());
      assertEquals(0, readOnlyVec0.size());
      assertTrue(readOnlyVec0.isEmpty());
      assertFalse(vec3.isEmpty());
      assertEquals(1784, vec3.size());
      assertNotSame(vec3, vec1);
      assertFalse(vec3.equals((Object)vec1));
      
      Vec<Object> vec4 = new Vec<Object>(2744);
      assertEquals(0, vec4.size());
      assertTrue(vec4.isEmpty());
      assertNotNull(vec4);
      assertTrue(vec4.equals((Object)vec2));
      
      String string0 = vec2.toString();
      assertEquals("", string0);
      assertTrue(vec2.isEmpty());
      assertEquals(0, vec2.size());
      assertNotNull(string0);
      assertNotSame(vec2, vec4);
      assertTrue(vec2.equals((Object)vec4));
      
      Vec<Comparable<String>> vec5 = new Vec<Comparable<String>>(1795, "");
      assertEquals(1795, vec5.size());
      assertFalse(vec5.isEmpty());
      assertNotNull(vec5);
      
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn(0, 0, 0, 0, 0).when(comparator0).compare(any() , any());
      Comparator<Comparable<String>> comparator1 = Comparator.nullsFirst((Comparator<? super Comparable<String>>) comparator0);
      assertNotNull(comparator1);
      
      // Undeclared exception!
      vec5.sort(comparator1);
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      Vec<Object> vec0 = new Vec<Object>();
      assertEquals(0, vec0.size());
      assertTrue(vec0.isEmpty());
      assertNotNull(vec0);
      
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      vec0.sort(comparator0);
      assertEquals(0, vec0.size());
      assertTrue(vec0.isEmpty());
      
      Vec<String> vec1 = new Vec<String>();
      assertTrue(vec1.isEmpty());
      assertEquals(0, vec1.size());
      assertNotNull(vec1);
      
      vec1.ensure(0);
      assertTrue(vec1.isEmpty());
      assertEquals(0, vec1.size());
      
      vec0.sortUnique((Comparator<Object>) null);
      assertEquals(0, vec0.size());
      assertTrue(vec0.isEmpty());
      
      vec1.hashCode();
      assertTrue(vec1.isEmpty());
      assertEquals(0, vec1.size());
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      int int0 = 0;
      Vec<String> vec0 = new Vec<String>(0);
      assertEquals(0, vec0.size());
      assertTrue(vec0.isEmpty());
      assertNotNull(vec0);
      
      IVec<String> iVec0 = vec0.push(",");
      assertEquals(1, vec0.size());
      assertFalse(vec0.isEmpty());
      assertFalse(iVec0.isEmpty());
      assertEquals(1, iVec0.size());
      assertNotNull(iVec0);
      
      String string0 = vec0.toString();
      assertEquals(",", string0);
      assertEquals(1, vec0.size());
      assertFalse(vec0.isEmpty());
      assertNotNull(string0);
      
      Vec<Vec<String>> vec1 = new Vec<Vec<String>>(0, vec0);
      assertEquals(1, vec0.size());
      assertFalse(vec0.isEmpty());
      assertEquals(0, vec1.size());
      assertTrue(vec1.isEmpty());
      assertNotNull(vec1);
      
      Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      Vec<Vec<String>> vec2 = new Vec<Vec<String>>();
      assertTrue(vec2.isEmpty());
      assertEquals(0, vec2.size());
      assertNotNull(vec2);
      assertTrue(vec2.equals((Object)vec1));
      
      vec1.copyTo((IVec<Vec<String>>) vec2);
      assertEquals(1, vec0.size());
      assertFalse(vec0.isEmpty());
      assertEquals(0, vec1.size());
      assertTrue(vec1.isEmpty());
      assertTrue(vec2.isEmpty());
      assertEquals(0, vec2.size());
      assertNotSame(vec1, vec2);
      assertNotSame(vec2, vec1);
      assertTrue(vec1.equals((Object)vec2));
      assertTrue(vec2.equals((Object)vec1));
      
      vec0.selectionSort(0, 0, comparator0);
      assertEquals(1, vec0.size());
      assertFalse(vec0.isEmpty());
      
      vec1.clear();
      assertEquals(1, vec0.size());
      assertFalse(vec0.isEmpty());
      assertEquals(0, vec1.size());
      assertTrue(vec1.isEmpty());
      assertNotSame(vec1, vec2);
      assertTrue(vec1.equals((Object)vec2));
      
      Comparator<Vec<String>> comparator1 = (Comparator<Vec<String>>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      vec1.shrink(0);
      assertEquals(1, vec0.size());
      assertFalse(vec0.isEmpty());
      assertEquals(0, vec1.size());
      assertTrue(vec1.isEmpty());
      assertNotSame(vec1, vec2);
      assertTrue(vec1.equals((Object)vec2));
      
      vec1.sortUnique(comparator1);
      assertEquals(1, vec0.size());
      assertFalse(vec0.isEmpty());
      assertEquals(0, vec1.size());
      assertTrue(vec1.isEmpty());
      assertNotSame(vec1, vec2);
      assertTrue(vec1.equals((Object)vec2));
      
      // Undeclared exception!
      try { 
        vec1.removeFromLast(vec0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("org.sat4j.core.Vec", e);
      }
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      Vec<Comparable<String>> vec0 = new Vec<Comparable<String>>();
      assertEquals(0, vec0.size());
      assertTrue(vec0.isEmpty());
      assertNotNull(vec0);
      
      Vec<Object> vec1 = new Vec<Object>();
      assertTrue(vec1.isEmpty());
      assertEquals(0, vec1.size());
      assertNotNull(vec1);
      
      String string0 = vec1.toString();
      assertEquals("", string0);
      assertTrue(vec1.isEmpty());
      assertEquals(0, vec1.size());
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      Vec<String> vec0 = new Vec<String>(0);
      assertTrue(vec0.isEmpty());
      assertEquals(0, vec0.size());
      assertNotNull(vec0);
      
      Object[] objectArray0 = new Object[8];
      objectArray0[0] = (Object) vec0;
      objectArray0[1] = (Object) vec0;
      objectArray0[2] = (Object) vec0;
      objectArray0[3] = (Object) vec0;
      objectArray0[4] = (Object) vec0;
      objectArray0[5] = (Object) vec0;
      objectArray0[6] = (Object) vec0;
      objectArray0[7] = (Object) vec0;
      Vec<Object> vec1 = new Vec<Object>(objectArray0);
      assertEquals(8, objectArray0.length);
      assertEquals(8, vec1.size());
      assertFalse(vec1.isEmpty());
      assertNotNull(vec1);
      
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn(429, 0, 2761, 2755, 607).when(comparator0).compare(any() , any());
      vec1.sort(comparator0);
      assertEquals(8, objectArray0.length);
      assertEquals(8, vec1.size());
      assertFalse(vec1.isEmpty());
      
      vec1.hashCode();
      assertEquals(8, objectArray0.length);
      assertEquals(8, vec1.size());
      assertFalse(vec1.isEmpty());
      
      Comparator<Object> comparator1 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn(0, 0, 0, 0, 0).when(comparator1).compare(any() , any());
      vec1.sortUnique(comparator1);
      assertEquals(8, objectArray0.length);
      assertFalse(vec1.isEmpty());
      assertEquals(1, vec1.size());
      
      vec1.ensure(0);
      assertEquals(8, objectArray0.length);
      assertFalse(vec1.isEmpty());
      assertEquals(1, vec1.size());
      
      int int0 = vec0.indexOf("!X@/");
      assertEquals((-1), int0);
      assertTrue(vec0.isEmpty());
      assertEquals(0, vec0.size());
      
      Vec<Vec<Object>> vec2 = new Vec<Vec<Object>>(0, vec1);
      assertEquals(8, objectArray0.length);
      assertEquals(0, vec2.size());
      assertTrue(vec2.isEmpty());
      assertFalse(vec1.isEmpty());
      assertEquals(1, vec1.size());
      assertNotNull(vec2);
      
      Integer integer0 = Integer.valueOf((-2417));
      assertEquals((-2417), (int)integer0);
      assertNotNull(integer0);
      assertFalse(integer0.equals((Object)int0));
      
      Integer integer1 = Integer.valueOf((-2417));
      assertEquals((-2417), (int)integer1);
      assertNotNull(integer1);
      assertTrue(integer1.equals((Object)integer0));
      assertFalse(integer1.equals((Object)int0));
      
      Vec<Integer> vec3 = new Vec<Integer>(2, integer1);
      assertEquals(2, vec3.size());
      assertFalse(vec3.isEmpty());
      assertNotNull(vec3);
      assertTrue(integer1.equals((Object)integer0));
      assertFalse(integer1.equals((Object)int0));
      
      IVec<Integer> iVec0 = vec3.push(integer0);
      assertEquals(3, vec3.size());
      assertFalse(vec3.isEmpty());
      assertFalse(iVec0.isEmpty());
      assertEquals(3, iVec0.size());
      assertNotNull(iVec0);
      assertFalse(integer0.equals((Object)int0));
      assertTrue(integer0.equals((Object)integer1));
      assertTrue(integer1.equals((Object)integer0));
      assertFalse(integer1.equals((Object)int0));
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      Vec<Object> vec0 = new Vec<Object>();
      assertTrue(vec0.isEmpty());
      assertEquals(0, vec0.size());
      assertNotNull(vec0);
      
      boolean boolean0 = vec0.equals((Object) null);
      assertFalse(boolean0);
      assertTrue(vec0.isEmpty());
      assertEquals(0, vec0.size());
      
      Integer[] integerArray0 = new Integer[8];
      Integer integer0 = Integer.valueOf(0);
      assertEquals(0, (int)integer0);
      assertNotNull(integer0);
      
      integerArray0[0] = integer0;
      Integer integer1 = Integer.valueOf((-1));
      assertEquals((-1), (int)integer1);
      assertNotNull(integer1);
      assertFalse(integer1.equals((Object)integer0));
      
      Integer integer2 = new Integer(0);
      assertEquals(0, (int)integer2);
      assertNotNull(integer2);
      assertFalse(integer2.equals((Object)integer1));
      assertTrue(integer2.equals((Object)integer0));
      
      int int0 = integer2.intValue();
      assertEquals(0, int0);
      assertFalse(integer2.equals((Object)integer1));
      assertTrue(integer2.equals((Object)integer0));
      
      Integer integer3 = new Integer(0);
      assertEquals(0, (int)integer3);
      assertNotNull(integer3);
      assertTrue(integer3.equals((Object)integer0));
      assertFalse(integer3.equals((Object)integer1));
      assertTrue(integer3.equals((Object)int0));
      assertTrue(integer3.equals((Object)integer2));
      
      int int1 = integer3.intValue();
      assertEquals(0, int1);
      assertTrue(integer3.equals((Object)integer0));
      assertFalse(integer3.equals((Object)integer1));
      assertTrue(integer3.equals((Object)int0));
      assertTrue(integer3.equals((Object)integer2));
      assertTrue(int1 == int0);
      
      Integer integer4 = new Integer(0);
      assertEquals(0, (int)integer4);
      assertNotNull(integer4);
      assertTrue(integer4.equals((Object)int1));
      assertTrue(integer4.equals((Object)integer0));
      assertTrue(integer4.equals((Object)int0));
      assertFalse(integer4.equals((Object)integer1));
      assertTrue(integer4.equals((Object)integer2));
      assertTrue(integer4.equals((Object)integer3));
      
      int int2 = integer4.intValue();
      assertEquals(0, int2);
      assertTrue(integer4.equals((Object)int1));
      assertTrue(integer4.equals((Object)integer0));
      assertTrue(integer4.equals((Object)int0));
      assertFalse(integer4.equals((Object)integer1));
      assertTrue(integer4.equals((Object)integer2));
      assertTrue(integer4.equals((Object)integer3));
      assertTrue(int2 == int1);
      assertTrue(int2 == int0);
      
      integerArray0[1] = (Integer) 0;
      String string0 = Integer.toBinaryString(0);
      assertEquals("0", string0);
      assertNotNull(string0);
      
      integerArray0[2] = (Integer) 0;
      Integer integer5 = new Integer(282);
      assertEquals(282, (int)integer5);
      assertNotNull(integer5);
      assertFalse(integer5.equals((Object)integer4));
      assertFalse(integer5.equals((Object)integer2));
      assertFalse(integer5.equals((Object)integer0));
      assertFalse(integer5.equals((Object)int0));
      assertFalse(integer5.equals((Object)integer1));
      assertFalse(integer5.equals((Object)int1));
      assertFalse(integer5.equals((Object)integer3));
      assertFalse(integer5.equals((Object)int2));
      
      int int3 = integer5.intValue();
      assertEquals(282, int3);
      assertFalse(int3 == int0);
      assertFalse(int3 == int2);
      assertFalse(int3 == int1);
      assertFalse(integer5.equals((Object)integer4));
      assertFalse(integer5.equals((Object)integer2));
      assertFalse(integer5.equals((Object)integer0));
      assertFalse(integer5.equals((Object)int0));
      assertFalse(integer5.equals((Object)integer1));
      assertFalse(integer5.equals((Object)int1));
      assertFalse(integer5.equals((Object)integer3));
      assertFalse(integer5.equals((Object)int2));
      
      integerArray0[3] = (Integer) 282;
      String string1 = Integer.toBinaryString(5);
      assertEquals("101", string1);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      
      String string2 = Integer.toBinaryString(5);
      assertEquals("101", string2);
      assertNotNull(string2);
      assertTrue(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      
      String string3 = Integer.toBinaryString(5);
      assertEquals("101", string3);
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string0));
      assertTrue(string3.equals((Object)string2));
      assertTrue(string3.equals((Object)string1));
      
      String string4 = Integer.toBinaryString(5);
      assertEquals("101", string4);
      assertNotNull(string4);
      assertTrue(string4.equals((Object)string1));
      assertTrue(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string0));
      assertTrue(string4.equals((Object)string2));
      
      integerArray0[4] = (Integer) 5;
      Integer integer6 = Integer.valueOf(1);
      assertEquals(1, (int)integer6);
      assertNotNull(integer6);
      assertFalse(integer6.equals((Object)int3));
      assertFalse(integer6.equals((Object)integer0));
      assertFalse(integer6.equals((Object)integer4));
      assertFalse(integer6.equals((Object)int0));
      assertFalse(integer6.equals((Object)integer5));
      assertFalse(integer6.equals((Object)integer2));
      assertFalse(integer6.equals((Object)integer1));
      assertFalse(integer6.equals((Object)int2));
      assertFalse(integer6.equals((Object)integer3));
      assertFalse(integer6.equals((Object)int1));
      
      Integer integer7 = Integer.valueOf((-1));
      assertEquals((-1), (int)integer7);
      assertNotNull(integer7);
      assertFalse(integer7.equals((Object)int3));
      assertFalse(integer7.equals((Object)int0));
      assertFalse(integer7.equals((Object)int2));
      assertFalse(integer7.equals((Object)integer6));
      assertFalse(integer7.equals((Object)integer5));
      assertFalse(integer7.equals((Object)integer2));
      assertFalse(integer7.equals((Object)integer4));
      assertFalse(integer7.equals((Object)integer0));
      assertFalse(integer7.equals((Object)integer3));
      assertFalse(integer7.equals((Object)int1));
      
      integerArray0[5] = integer7;
      String string5 = Integer.toBinaryString((-2951));
      assertEquals("11111111111111111111010001111001", string5);
      assertNotNull(string5);
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string3));
      
      integerArray0[6] = (Integer) (-2951);
      String string6 = Integer.toBinaryString(4275);
      assertEquals("1000010110011", string6);
      assertNotNull(string6);
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string1));
      
      String string7 = Integer.toBinaryString(4275);
      assertEquals("1000010110011", string7);
      assertNotNull(string7);
      assertFalse(string7.equals((Object)string2));
      assertFalse(string7.equals((Object)string3));
      assertFalse(string7.equals((Object)string0));
      assertTrue(string7.equals((Object)string6));
      assertFalse(string7.equals((Object)string4));
      assertFalse(string7.equals((Object)string1));
      assertFalse(string7.equals((Object)string5));
      
      String string8 = Integer.toBinaryString(4275);
      assertEquals("1000010110011", string8);
      assertNotNull(string8);
      assertFalse(string8.equals((Object)string1));
      assertFalse(string8.equals((Object)string3));
      assertTrue(string8.equals((Object)string7));
      assertFalse(string8.equals((Object)string0));
      assertFalse(string8.equals((Object)string5));
      assertFalse(string8.equals((Object)string2));
      assertTrue(string8.equals((Object)string6));
      assertFalse(string8.equals((Object)string4));
      
      integerArray0[7] = (Integer) 4275;
      Vec<Integer> vec1 = new Vec<Integer>(integerArray0);
      assertEquals(8, integerArray0.length);
      assertFalse(vec1.isEmpty());
      assertEquals(8, vec1.size());
      assertNotNull(vec1);
      
      vec1.pop();
      assertEquals(8, integerArray0.length);
      assertFalse(vec1.isEmpty());
      assertEquals(7, vec1.size());
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      Vec<ReadOnlyVec<Object>> vec0 = new Vec<ReadOnlyVec<Object>>();
      assertEquals(0, vec0.size());
      assertTrue(vec0.isEmpty());
      assertNotNull(vec0);
      
      int int0 = (-1173);
      vec0.shrink((-1173));
      assertEquals(0, vec0.size());
      assertTrue(vec0.isEmpty());
      
      Vec<String> vec1 = new Vec<String>(2);
      assertEquals(0, vec1.size());
      assertTrue(vec1.isEmpty());
      assertNotNull(vec1);
      
      // Undeclared exception!
      try { 
        vec1.shrinkTo((-1173));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("org.sat4j.core.Vec", e);
      }
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      Vec<Comparable<String>> vec0 = new Vec<Comparable<String>>();
      assertTrue(vec0.isEmpty());
      assertEquals(0, vec0.size());
      assertNotNull(vec0);
      
      Vec<Object> vec1 = new Vec<Object>(1531);
      assertEquals(0, vec1.size());
      assertTrue(vec1.isEmpty());
      assertNotNull(vec1);
      
      String string0 = vec1.toString();
      assertEquals("", string0);
      assertEquals(0, vec1.size());
      assertTrue(vec1.isEmpty());
      assertNotNull(string0);
      
      // Undeclared exception!
      try { 
        vec1.delete((-577));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -577
         //
         verifyException("org.sat4j.core.Vec", e);
      }
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      Vec<Object> vec0 = new Vec<Object>();
      assertTrue(vec0.isEmpty());
      assertEquals(0, vec0.size());
      assertNotNull(vec0);
      
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      vec0.sort(3498, 0, comparator0);
      assertTrue(vec0.isEmpty());
      assertEquals(0, vec0.size());
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      String[] stringArray0 = new String[3];
      stringArray0[0] = "Q/o";
      stringArray0[1] = "ra`;0LW";
      stringArray0[2] = "";
      Vec<String> vec0 = new Vec<String>(stringArray0);
      assertEquals(3, stringArray0.length);
      assertEquals(3, vec0.size());
      assertFalse(vec0.isEmpty());
      assertNotNull(vec0);
      
      String string0 = "\"CwA`5urNi";
      Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      vec0.selectionSort(658, 658, comparator0);
      assertEquals(3, stringArray0.length);
      assertEquals(3, vec0.size());
      assertFalse(vec0.isEmpty());
      
      // Undeclared exception!
      try { 
        vec0.unsafePush("\"CwA`5urNi");
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 3
         //
         verifyException("org.sat4j.core.Vec", e);
      }
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      int int0 = 0;
      String string0 = ",";
      Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      Comparator<Vec<String>> comparator1 = (Comparator<Vec<String>>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      Vec<Object> vec0 = new Vec<Object>(0, "");
      assertTrue(vec0.isEmpty());
      assertEquals(0, vec0.size());
      assertNotNull(vec0);
      
      // Undeclared exception!
      try { 
        vec0.shrink(2752);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("org.sat4j.core.Vec", e);
      }
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      Vec<Vec<Object>> vec0 = new Vec<Vec<Object>>(1866);
      assertEquals(0, vec0.size());
      assertTrue(vec0.isEmpty());
      assertNotNull(vec0);
      
      Vec<Object> vec1 = new Vec<Object>(1866, vec0);
      assertEquals(0, vec0.size());
      assertTrue(vec0.isEmpty());
      assertEquals(1866, vec1.size());
      assertFalse(vec1.isEmpty());
      assertNotNull(vec1);
      
      IVec<Vec<Object>> iVec0 = vec0.push(vec1);
      assertFalse(vec0.isEmpty());
      assertEquals(1, vec0.size());
      assertEquals(1866, vec1.size());
      assertFalse(vec1.isEmpty());
      assertEquals(1, iVec0.size());
      assertFalse(iVec0.isEmpty());
      assertNotNull(iVec0);
      
      vec1.pop();
      assertFalse(vec0.isEmpty());
      assertEquals(1, vec0.size());
      assertFalse(vec1.isEmpty());
      assertEquals(1865, vec1.size());
      
      Comparable<Integer>[] comparableArray0 = (Comparable<Integer>[]) Array.newInstance(Comparable.class, 3);
      int int0 = vec1.size();
      assertEquals(1865, int0);
      assertFalse(vec0.isEmpty());
      assertEquals(1, vec0.size());
      assertFalse(vec1.isEmpty());
      assertEquals(1865, vec1.size());
      
      comparableArray0[0] = (Comparable<Integer>) 1865;
      int int1 = vec1.hashCode();
      assertFalse(vec0.isEmpty());
      assertEquals(1, vec0.size());
      assertFalse(vec1.isEmpty());
      assertEquals(1865, vec1.size());
      assertFalse(int1 == int0);
      
      comparableArray0[1] = (Comparable<Integer>) 0;
      int int2 = vec1.size();
      assertEquals(1865, int2);
      assertFalse(vec0.isEmpty());
      assertEquals(1, vec0.size());
      assertFalse(vec1.isEmpty());
      assertEquals(1865, vec1.size());
      assertTrue(int2 == int0);
      
      comparableArray0[2] = (Comparable<Integer>) 1865;
      Vec<Comparable<Integer>> vec2 = new Vec<Comparable<Integer>>(comparableArray0);
      assertEquals(3, comparableArray0.length);
      assertEquals(3, vec2.size());
      assertFalse(vec2.isEmpty());
      assertNotNull(vec2);
      
      vec2.removeFromLast(comparableArray0[2]);
      assertEquals(3, comparableArray0.length);
      assertEquals(2, vec2.size());
      assertFalse(vec2.isEmpty());
      
      Vec<Object> vec3 = new Vec<Object>();
      assertEquals(0, vec3.size());
      assertTrue(vec3.isEmpty());
      assertNotNull(vec3);
      assertFalse(vec3.equals((Object)vec1));
      
      vec0.insertFirst(vec3);
      assertFalse(vec0.isEmpty());
      assertEquals(2, vec0.size());
      assertEquals(0, vec3.size());
      assertTrue(vec3.isEmpty());
      assertNotSame(vec3, vec1);
      assertFalse(vec3.equals((Object)vec1));
      
      vec3.moveTo((IVec<Object>) vec1);
      assertFalse(vec0.isEmpty());
      assertEquals(2, vec0.size());
      assertFalse(vec1.isEmpty());
      assertEquals(1865, vec1.size());
      assertEquals(0, vec3.size());
      assertTrue(vec3.isEmpty());
      assertNotSame(vec1, vec3);
      assertNotSame(vec3, vec1);
      assertFalse(vec1.equals((Object)vec3));
      assertFalse(vec3.equals((Object)vec1));
      
      Vec<String> vec4 = new Vec<String>(1865);
      assertTrue(vec4.isEmpty());
      assertEquals(0, vec4.size());
      assertNotNull(vec4);
      
      IVec<String> iVec1 = vec4.clone();
      assertTrue(vec4.isEmpty());
      assertEquals(0, vec4.size());
      assertTrue(iVec1.isEmpty());
      assertEquals(0, iVec1.size());
      assertNotNull(iVec1);
      
      vec4.unsafePush("org.sat4j.core.ReadOnlyVec");
      assertEquals(1, vec4.size());
      assertFalse(vec4.isEmpty());
      
      Vec<Integer> vec5 = new Vec<Integer>(1865);
      assertEquals(0, vec5.size());
      assertTrue(vec5.isEmpty());
      assertNotNull(vec5);
      
      // Undeclared exception!
      try { 
        vec5.shrink(15);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("org.sat4j.core.Vec", e);
      }
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      Vec<ReadOnlyVec<Object>> vec0 = new Vec<ReadOnlyVec<Object>>();
      assertTrue(vec0.isEmpty());
      assertEquals(0, vec0.size());
      assertNotNull(vec0);
      
      int int0 = vec0.size();
      assertEquals(0, int0);
      assertTrue(vec0.isEmpty());
      assertEquals(0, vec0.size());
      
      Vec<Vec<Object>> vec1 = new Vec<Vec<Object>>(0);
      assertEquals(0, vec1.size());
      assertTrue(vec1.isEmpty());
      assertNotNull(vec1);
      
      boolean boolean0 = vec1.isEmpty();
      assertTrue(boolean0);
      assertEquals(0, vec1.size());
      assertTrue(vec1.isEmpty());
      
      Vec<Object> vec2 = new Vec<Object>();
      assertEquals(0, vec2.size());
      assertTrue(vec2.isEmpty());
      assertNotNull(vec2);
      
      vec2.ensure(0);
      assertEquals(0, vec2.size());
      assertTrue(vec2.isEmpty());
      
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) vec0;
      Vec<Object> vec3 = new Vec<Object>(objectArray0);
      assertEquals(1, objectArray0.length);
      assertEquals(1, vec3.size());
      assertFalse(vec3.isEmpty());
      assertNotNull(vec3);
      assertFalse(vec3.equals((Object)vec2));
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      // Undeclared exception!
      try { 
        vec3.removeFromLast(object0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("org.sat4j.core.Vec", e);
      }
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      String[] stringArray0 = new String[5];
      stringArray0[0] = "`1_H%;";
      stringArray0[1] = "[E#Fjqd_9NAu";
      stringArray0[2] = "";
      stringArray0[3] = "";
      stringArray0[4] = "";
      Vec<String> vec0 = new Vec<String>(stringArray0);
      assertEquals(5, stringArray0.length);
      assertEquals(5, vec0.size());
      assertFalse(vec0.isEmpty());
      assertNotNull(vec0);
      
      Vec<Object> vec1 = new Vec<Object>(0, vec0);
      assertEquals(5, stringArray0.length);
      assertEquals(5, vec0.size());
      assertFalse(vec0.isEmpty());
      assertTrue(vec1.isEmpty());
      assertEquals(0, vec1.size());
      assertNotNull(vec1);
      
      Vec<Object> vec2 = new Vec<Object>(0, "");
      assertEquals(0, vec2.size());
      assertTrue(vec2.isEmpty());
      assertNotNull(vec2);
      assertTrue(vec2.equals((Object)vec1));
      
      vec1.insertFirst(vec2);
      assertEquals(5, stringArray0.length);
      assertEquals(5, vec0.size());
      assertFalse(vec0.isEmpty());
      assertEquals(1, vec1.size());
      assertFalse(vec1.isEmpty());
      assertEquals(0, vec2.size());
      assertTrue(vec2.isEmpty());
      assertNotSame(vec1, vec2);
      assertNotSame(vec2, vec1);
      assertFalse(vec1.equals((Object)vec2));
      assertFalse(vec2.equals((Object)vec1));
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      String[] stringArray0 = new String[0];
      Vec<String> vec0 = new Vec<String>(stringArray0);
      assertEquals(0, stringArray0.length);
      assertTrue(vec0.isEmpty());
      assertEquals(0, vec0.size());
      assertNotNull(vec0);
      
      Vec<Object> vec1 = new Vec<Object>(2905, (Object) null);
      assertFalse(vec1.isEmpty());
      assertEquals(2905, vec1.size());
      assertNotNull(vec1);
      
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn(0, 0, 0, 0, 0).when(comparator0).compare(any() , any());
      // Undeclared exception!
      vec1.sort(comparator0);
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      Object[] objectArray0 = new Object[0];
      Vec<Object> vec0 = new Vec<Object>(objectArray0);
      assertEquals(0, objectArray0.length);
      assertEquals(0, vec0.size());
      assertTrue(vec0.isEmpty());
      assertNotNull(vec0);
      
      vec0.sort((Comparator<Object>) null);
      assertEquals(0, objectArray0.length);
      assertEquals(0, vec0.size());
      assertTrue(vec0.isEmpty());
      
      Vec<String> vec1 = new Vec<String>();
      assertTrue(vec1.isEmpty());
      assertEquals(0, vec1.size());
      assertNotNull(vec1);
      
      vec1.ensure(1386);
      assertTrue(vec1.isEmpty());
      assertEquals(0, vec1.size());
      
      IVec<Object> iVec0 = vec0.push((Object) null);
      assertEquals(0, objectArray0.length);
      assertEquals(1, vec0.size());
      assertFalse(vec0.isEmpty());
      assertEquals(1, iVec0.size());
      assertFalse(iVec0.isEmpty());
      assertNotNull(iVec0);
      
      vec0.sortUnique((Comparator<Object>) null);
      assertEquals(0, objectArray0.length);
      assertEquals(1, vec0.size());
      assertFalse(vec0.isEmpty());
      
      vec1.insertFirst("PB{)aQz");
      assertFalse(vec1.isEmpty());
      assertEquals(1, vec1.size());
      
      Vec<Integer> vec2 = new Vec<Integer>();
      assertTrue(vec2.isEmpty());
      assertEquals(0, vec2.size());
      assertNotNull(vec2);
      
      ReadOnlyVec<Integer> readOnlyVec0 = new ReadOnlyVec<Integer>(vec2);
      assertTrue(vec2.isEmpty());
      assertEquals(0, vec2.size());
      assertEquals(0, readOnlyVec0.size());
      assertTrue(readOnlyVec0.isEmpty());
      assertNotNull(readOnlyVec0);
      
      Vec<ReadOnlyVec<Integer>> vec3 = new Vec<ReadOnlyVec<Integer>>(1386, readOnlyVec0);
      assertTrue(vec2.isEmpty());
      assertEquals(0, vec2.size());
      assertEquals(0, readOnlyVec0.size());
      assertTrue(readOnlyVec0.isEmpty());
      assertFalse(vec3.isEmpty());
      assertEquals(1386, vec3.size());
      assertNotNull(vec3);
      
      ReadOnlyVec readOnlyVec1 = (ReadOnlyVec)vec3.last();
      assertTrue(vec2.isEmpty());
      assertEquals(0, vec2.size());
      assertEquals(0, readOnlyVec0.size());
      assertTrue(readOnlyVec0.isEmpty());
      assertFalse(vec3.isEmpty());
      assertEquals(1386, vec3.size());
      assertTrue(readOnlyVec1.isEmpty());
      assertEquals(0, readOnlyVec1.size());
      assertNotNull(readOnlyVec1);
      
      vec0.insertFirst(readOnlyVec1);
      assertEquals(0, objectArray0.length);
      assertFalse(vec0.isEmpty());
      assertEquals(2, vec0.size());
      assertTrue(vec2.isEmpty());
      assertEquals(0, vec2.size());
      assertEquals(0, readOnlyVec0.size());
      assertTrue(readOnlyVec0.isEmpty());
      assertFalse(vec3.isEmpty());
      assertEquals(1386, vec3.size());
      assertTrue(readOnlyVec1.isEmpty());
      assertEquals(0, readOnlyVec1.size());
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      Vec<ReadOnlyVec<Object>> vec0 = new Vec<ReadOnlyVec<Object>>();
      assertTrue(vec0.isEmpty());
      assertEquals(0, vec0.size());
      assertNotNull(vec0);
      
      int int0 = vec0.size();
      assertEquals(0, int0);
      assertTrue(vec0.isEmpty());
      assertEquals(0, vec0.size());
      
      Vec<Object> vec1 = new Vec<Object>();
      assertTrue(vec1.isEmpty());
      assertEquals(0, vec1.size());
      assertNotNull(vec1);
      
      vec1.ensure(0);
      assertTrue(vec1.isEmpty());
      assertEquals(0, vec1.size());
      
      Vec<ReadOnlyVec<String>> vec2 = new Vec<ReadOnlyVec<String>>();
      assertEquals(0, vec2.size());
      assertTrue(vec2.isEmpty());
      assertNotNull(vec2);
      
      Iterator<ReadOnlyVec<String>> iterator0 = vec2.iterator();
      assertEquals(0, vec2.size());
      assertTrue(vec2.isEmpty());
      assertNotNull(iterator0);
      
      Vec<Integer> vec3 = new Vec<Integer>(0);
      assertTrue(vec3.isEmpty());
      assertEquals(0, vec3.size());
      assertNotNull(vec3);
      
      int int1 = vec3.hashCode();
      assertTrue(vec3.isEmpty());
      assertEquals(0, vec3.size());
      assertTrue(int1 == int0);
      
      Vec<ReadOnlyVec<Integer>> vec4 = new Vec<ReadOnlyVec<Integer>>();
      assertEquals(0, vec4.size());
      assertTrue(vec4.isEmpty());
      assertNotNull(vec4);
      
      Vec<ReadOnlyVec<Integer>> vec5 = new Vec<ReadOnlyVec<Integer>>();
      assertTrue(vec5.isEmpty());
      assertEquals(0, vec5.size());
      assertNotNull(vec5);
      assertTrue(vec5.equals((Object)vec4));
      
      vec5.clear();
      assertTrue(vec5.isEmpty());
      assertEquals(0, vec5.size());
      assertNotSame(vec5, vec4);
      assertTrue(vec5.equals((Object)vec4));
      
      vec4.moveTo((IVec<ReadOnlyVec<Integer>>) vec5);
      assertEquals(0, vec4.size());
      assertTrue(vec4.isEmpty());
      assertTrue(vec5.isEmpty());
      assertEquals(0, vec5.size());
      assertNotSame(vec4, vec5);
      assertNotSame(vec5, vec4);
      assertTrue(vec4.equals((Object)vec5));
      assertTrue(vec5.equals((Object)vec4));
      
      String[] stringArray0 = new String[4];
      stringArray0[1] = "'7YjI_UD&)]vS uM";
      stringArray0[2] = ";r22hnEg.oW]nK";
      stringArray0[3] = "#L>XYQRLG_v:yf(";
      Vec<String> vec6 = new Vec<String>(stringArray0);
      assertEquals(4, stringArray0.length);
      assertEquals(4, vec6.size());
      assertFalse(vec6.isEmpty());
      assertNotNull(vec6);
      
      int int2 = vec6.hashCode();
      assertEquals(4, stringArray0.length);
      assertEquals(4, vec6.size());
      assertFalse(vec6.isEmpty());
      assertFalse(int2 == int0);
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      Vec<Object> vec0 = new Vec<Object>();
      assertEquals(0, vec0.size());
      assertTrue(vec0.isEmpty());
      assertNotNull(vec0);
      
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      vec0.sort(comparator0);
      assertEquals(0, vec0.size());
      assertTrue(vec0.isEmpty());
      
      Vec<String> vec1 = new Vec<String>();
      assertTrue(vec1.isEmpty());
      assertEquals(0, vec1.size());
      assertNotNull(vec1);
      
      int int0 = 5;
      Comparator<Object> comparator1 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      vec0.selectionSort(5, (-1329), comparator1);
      assertEquals(0, vec0.size());
      assertTrue(vec0.isEmpty());
      
      // Undeclared exception!
      try { 
        vec0.moveTo(5, (-1329));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1329
         //
         verifyException("org.sat4j.core.Vec", e);
      }
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      Vec<String> vec0 = new Vec<String>();
      assertEquals(0, vec0.size());
      assertTrue(vec0.isEmpty());
      assertNotNull(vec0);
      
      // Undeclared exception!
      try { 
        vec0.remove((String) null);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      Vec<String> vec0 = new Vec<String>();
      assertEquals(0, vec0.size());
      assertTrue(vec0.isEmpty());
      assertNotNull(vec0);
      
      vec0.insertFirst("KkZ6BOXn@ei/agX@");
      assertFalse(vec0.isEmpty());
      assertEquals(1, vec0.size());
      
      boolean boolean0 = vec0.contains("7[Y)qestQj");
      assertFalse(boolean0);
      assertFalse(vec0.isEmpty());
      assertEquals(1, vec0.size());
      
      vec0.growTo((-1), "org.sat4j.core.Vec$1");
      assertFalse(vec0.isEmpty());
      assertEquals((-1), vec0.size());
      
      String string0 = "G_2Qw#U5K&`*f(";
      // Undeclared exception!
      try { 
        vec0.insertFirst("G_2Qw#U5K&`*f(");
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("org.sat4j.core.Vec", e);
      }
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      String[] stringArray0 = new String[4];
      stringArray0[0] = "eS";
      stringArray0[1] = "9~swMoKi]!]b7LQe";
      stringArray0[2] = "r4~S'tSys5B]fR+";
      stringArray0[3] = "";
      Vec<String> vec0 = new Vec<String>(stringArray0);
      assertEquals(4, stringArray0.length);
      assertEquals(4, vec0.size());
      assertFalse(vec0.isEmpty());
      assertNotNull(vec0);
      
      IVec<String> iVec0 = vec0.clone();
      assertEquals(4, stringArray0.length);
      assertEquals(4, vec0.size());
      assertFalse(vec0.isEmpty());
      assertFalse(iVec0.isEmpty());
      assertEquals(4, iVec0.size());
      assertNotNull(iVec0);
      
      vec0.pop();
      assertEquals(4, stringArray0.length);
      assertEquals(3, vec0.size());
      assertFalse(vec0.isEmpty());
      
      vec0.shrinkTo(0);
      assertEquals(4, stringArray0.length);
      assertTrue(vec0.isEmpty());
      assertEquals(0, vec0.size());
      
      // Undeclared exception!
      try { 
        vec0.shrinkTo((-1595));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("org.sat4j.core.Vec", e);
      }
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      Object[] objectArray0 = new Object[0];
      Vec<Object> vec0 = new Vec<Object>(objectArray0);
      assertEquals(0, objectArray0.length);
      assertEquals(0, vec0.size());
      assertTrue(vec0.isEmpty());
      assertNotNull(vec0);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      // Undeclared exception!
      try { 
        vec0.remove(object0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.sat4j.core.Vec", e);
      }
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      Vec<Object> vec0 = new Vec<Object>(0, (Object) null);
      assertTrue(vec0.isEmpty());
      assertEquals(0, vec0.size());
      assertNotNull(vec0);
      
      // Undeclared exception!
      try { 
        vec0.get(0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.sat4j.core.Vec", e);
      }
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      Vec<String> vec0 = new Vec<String>(1531);
      assertEquals(0, vec0.size());
      assertTrue(vec0.isEmpty());
      assertNotNull(vec0);
      
      vec0.insertFirst("`eBAzy]}rgLg#");
      assertEquals(1, vec0.size());
      assertFalse(vec0.isEmpty());
      
      vec0.insertFirst("");
      assertEquals(2, vec0.size());
      assertFalse(vec0.isEmpty());
      
      int int0 = vec0.indexOf("org.sat4j.core.Vec");
      assertEquals((-1), int0);
      assertEquals(2, vec0.size());
      assertFalse(vec0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      Vec<String> vec0 = new Vec<String>(0);
      assertTrue(vec0.isEmpty());
      assertEquals(0, vec0.size());
      assertNotNull(vec0);
      
      vec0.growTo(0, "Ph)H71<");
      assertTrue(vec0.isEmpty());
      assertEquals(0, vec0.size());
      
      Comparator<String> comparator0 = null;
      // Undeclared exception!
      try { 
        vec0.sort((-225), 0, (Comparator<String>) null);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -113
         //
         verifyException("org.sat4j.core.Vec", e);
      }
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      String[] stringArray0 = new String[0];
      Vec<String> vec0 = new Vec<String>(stringArray0);
      assertEquals(0, stringArray0.length);
      assertTrue(vec0.isEmpty());
      assertEquals(0, vec0.size());
      assertNotNull(vec0);
      
      ReadOnlyVec<Object> readOnlyVec0 = new ReadOnlyVec<Object>((IVec<Object>) null);
      assertNotNull(readOnlyVec0);
      
      Vec<String> vec1 = new Vec<String>(stringArray0);
      assertEquals(0, stringArray0.length);
      assertEquals(0, vec1.size());
      assertTrue(vec1.isEmpty());
      assertNotNull(vec1);
      assertTrue(vec1.equals((Object)vec0));
      
      Vec<Vec<String>> vec2 = new Vec<Vec<String>>(962, vec1);
      assertEquals(0, stringArray0.length);
      assertEquals(0, vec1.size());
      assertTrue(vec1.isEmpty());
      assertEquals(962, vec2.size());
      assertFalse(vec2.isEmpty());
      assertNotNull(vec2);
      assertTrue(vec1.equals((Object)vec0));
      
      Comparator<Vec<String>> comparator0 = (Comparator<Vec<String>>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn(0, 0, 0, 0, 0).when(comparator0).compare(nullable(org.sat4j.core.Vec.class) , nullable(org.sat4j.core.Vec.class));
      vec2.sort(comparator0);
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      Vec<String> vec0 = new Vec<String>();
      assertTrue(vec0.isEmpty());
      assertEquals(0, vec0.size());
      assertNotNull(vec0);
      
      vec0.shrinkTo(0);
      assertTrue(vec0.isEmpty());
      assertEquals(0, vec0.size());
      
      Iterator<String> iterator0 = vec0.iterator();
      assertTrue(vec0.isEmpty());
      assertEquals(0, vec0.size());
      assertNotNull(iterator0);
      
      Vec<String>[] vecArray0 = (Vec<String>[]) Array.newInstance(Vec.class, 0);
      Vec<Vec<String>> vec1 = new Vec<Vec<String>>(vecArray0);
      assertEquals(0, vecArray0.length);
      assertEquals(0, vec1.size());
      assertTrue(vec1.isEmpty());
      assertNotNull(vec1);
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      Vec<ReadOnlyVec<Object>> vec0 = new Vec<ReadOnlyVec<Object>>();
      assertEquals(0, vec0.size());
      assertTrue(vec0.isEmpty());
      assertNotNull(vec0);
      
      int int0 = vec0.size();
      assertEquals(0, int0);
      assertEquals(0, vec0.size());
      assertTrue(vec0.isEmpty());
      
      Vec<Vec<Object>> vec1 = new Vec<Vec<Object>>(0);
      assertTrue(vec1.isEmpty());
      assertEquals(0, vec1.size());
      assertNotNull(vec1);
      
      boolean boolean0 = vec1.isEmpty();
      assertTrue(boolean0);
      assertTrue(vec1.isEmpty());
      assertEquals(0, vec1.size());
      
      Vec<Object> vec2 = new Vec<Object>();
      assertEquals(0, vec2.size());
      assertTrue(vec2.isEmpty());
      assertNotNull(vec2);
      
      vec2.ensure(0);
      assertEquals(0, vec2.size());
      assertTrue(vec2.isEmpty());
      
      ReadOnlyVec<String>[] readOnlyVecArray0 = (ReadOnlyVec<String>[]) Array.newInstance(ReadOnlyVec.class, 4);
      ReadOnlyVec<String> readOnlyVec0 = new ReadOnlyVec<String>((IVec<String>) null);
      assertNotNull(readOnlyVec0);
      
      readOnlyVecArray0[0] = readOnlyVec0;
      ReadOnlyVec<String> readOnlyVec1 = new ReadOnlyVec<String>((IVec<String>) null);
      assertNotNull(readOnlyVec1);
      
      readOnlyVecArray0[1] = readOnlyVec1;
      ReadOnlyVec<String> readOnlyVec2 = new ReadOnlyVec<String>(readOnlyVec0);
      assertNotNull(readOnlyVec2);
      
      readOnlyVecArray0[2] = readOnlyVec2;
      ReadOnlyVec<String> readOnlyVec3 = new ReadOnlyVec<String>((IVec<String>) null);
      assertNotNull(readOnlyVec3);
      
      readOnlyVecArray0[3] = readOnlyVec3;
      Vec<ReadOnlyVec<String>> vec3 = new Vec<ReadOnlyVec<String>>(readOnlyVecArray0);
      assertEquals(4, readOnlyVecArray0.length);
      assertEquals(4, vec3.size());
      assertFalse(vec3.isEmpty());
      assertNotNull(vec3);
      
      // Undeclared exception!
      try { 
        vec3.equals(readOnlyVec2);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.core.ReadOnlyVec", e);
      }
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      Vec<String> vec0 = new Vec<String>(0);
      assertTrue(vec0.isEmpty());
      assertEquals(0, vec0.size());
      assertNotNull(vec0);
      
      Object[] objectArray0 = new Object[8];
      objectArray0[0] = (Object) vec0;
      objectArray0[1] = (Object) vec0;
      objectArray0[2] = (Object) vec0;
      objectArray0[3] = (Object) vec0;
      objectArray0[4] = (Object) vec0;
      objectArray0[5] = (Object) vec0;
      objectArray0[6] = (Object) vec0;
      objectArray0[7] = (Object) vec0;
      Vec<Object> vec1 = new Vec<Object>(objectArray0);
      assertEquals(8, objectArray0.length);
      assertEquals(8, vec1.size());
      assertFalse(vec1.isEmpty());
      assertNotNull(vec1);
      
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn(0, 0, 0, 0, 0).when(comparator0).compare(any() , any());
      vec1.sort(comparator0);
      assertEquals(8, objectArray0.length);
      assertEquals(8, vec1.size());
      assertFalse(vec1.isEmpty());
      
      vec1.hashCode();
      assertEquals(8, objectArray0.length);
      assertEquals(8, vec1.size());
      assertFalse(vec1.isEmpty());
      
      vec1.ensure(0);
      assertEquals(8, objectArray0.length);
      assertEquals(8, vec1.size());
      assertFalse(vec1.isEmpty());
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      int int0 = 1;
      Integer integer0 = Integer.valueOf(1);
      assertEquals(1, (int)integer0);
      assertNotNull(integer0);
      
      Vec<Integer> vec0 = null;
      try {
        vec0 = new Vec<Integer>((-2945), integer0);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.core.Vec", e);
      }
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      Vec<String> vec0 = new Vec<String>(1531);
      assertEquals(0, vec0.size());
      assertTrue(vec0.isEmpty());
      assertNotNull(vec0);
      
      int int0 = vec0.indexOf("org.sat4j.core.Vec");
      assertEquals((-1), int0);
      assertEquals(0, vec0.size());
      assertTrue(vec0.isEmpty());
      
      vec0.shrinkTo(1531);
      assertFalse(vec0.isEmpty());
      assertEquals(1531, vec0.size());
      
      String string0 = "*)]AEZo)";
      // Undeclared exception!
      try { 
        vec0.indexOf("*)]AEZo)");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.core.Vec", e);
      }
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      Vec<ReadOnlyVec<Object>> vec0 = new Vec<ReadOnlyVec<Object>>();
      assertEquals(0, vec0.size());
      assertTrue(vec0.isEmpty());
      assertNotNull(vec0);
      
      // Undeclared exception!
      try { 
        vec0.get((-1157));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1157
         //
         verifyException("org.sat4j.core.Vec", e);
      }
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      String[] stringArray0 = new String[0];
      Vec<String> vec0 = new Vec<String>(stringArray0);
      assertEquals(0, stringArray0.length);
      assertEquals(0, vec0.size());
      assertTrue(vec0.isEmpty());
      assertNotNull(vec0);
      
      vec0.growTo(1269, "");
      assertEquals(0, stringArray0.length);
      assertFalse(vec0.isEmpty());
      assertEquals(1269, vec0.size());
      
      Vec<Object> vec1 = new Vec<Object>(stringArray0);
      assertEquals(0, stringArray0.length);
      assertTrue(vec1.isEmpty());
      assertEquals(0, vec1.size());
      assertNotNull(vec1);
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      Vec<String> vec0 = new Vec<String>(0);
      assertEquals(0, vec0.size());
      assertTrue(vec0.isEmpty());
      assertNotNull(vec0);
      
      Object[] objectArray0 = new Object[8];
      objectArray0[0] = (Object) vec0;
      objectArray0[1] = (Object) vec0;
      objectArray0[2] = (Object) vec0;
      objectArray0[3] = (Object) vec0;
      objectArray0[4] = (Object) vec0;
      objectArray0[5] = (Object) vec0;
      objectArray0[6] = (Object) vec0;
      objectArray0[7] = (Object) vec0;
      Vec<Object> vec1 = new Vec<Object>(objectArray0);
      assertEquals(8, objectArray0.length);
      assertFalse(vec1.isEmpty());
      assertEquals(8, vec1.size());
      assertNotNull(vec1);
      
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn(0, 0, (-7), (-7), (-7)).when(comparator0).compare(any() , any());
      vec1.sort(comparator0);
      assertEquals(8, objectArray0.length);
      assertFalse(vec1.isEmpty());
      assertEquals(8, vec1.size());
      
      vec1.hashCode();
      assertEquals(8, objectArray0.length);
      assertFalse(vec1.isEmpty());
      assertEquals(8, vec1.size());
      
      vec1.ensure(0);
      assertEquals(8, objectArray0.length);
      assertFalse(vec1.isEmpty());
      assertEquals(8, vec1.size());
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      String[] stringArray0 = new String[0];
      Vec<String> vec0 = new Vec<String>(stringArray0);
      assertEquals(0, stringArray0.length);
      assertTrue(vec0.isEmpty());
      assertEquals(0, vec0.size());
      assertNotNull(vec0);
      
      vec0.insertFirst("ec!#M#JNtM!c");
      assertEquals(0, stringArray0.length);
      assertEquals(1, vec0.size());
      assertFalse(vec0.isEmpty());
      
      vec0.clear();
      assertEquals(0, stringArray0.length);
      assertTrue(vec0.isEmpty());
      assertEquals(0, vec0.size());
      
      Vec<Vec<String>> vec1 = new Vec<Vec<String>>(2781, vec0);
      assertEquals(0, stringArray0.length);
      assertTrue(vec0.isEmpty());
      assertEquals(0, vec0.size());
      assertFalse(vec1.isEmpty());
      assertEquals(2781, vec1.size());
      assertNotNull(vec1);
      
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) "ec!#M#JNtM!c";
      Vec<Object> vec2 = new Vec<Object>(objectArray0);
      assertEquals(1, objectArray0.length);
      assertEquals(1, vec2.size());
      assertFalse(vec2.isEmpty());
      assertNotNull(vec2);
      
      IVec<Object> iVec0 = vec2.push(";]_`?K5");
      assertEquals(1, objectArray0.length);
      assertEquals(2, vec2.size());
      assertFalse(vec2.isEmpty());
      assertFalse(iVec0.isEmpty());
      assertEquals(2, iVec0.size());
      assertNotNull(iVec0);
      
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn((-1108), 358).when(comparator0).compare(any() , any());
      vec2.sortUnique(comparator0);
      assertEquals(1, objectArray0.length);
      assertEquals(1, vec2.size());
      assertFalse(vec2.isEmpty());
      
      vec0.insertFirst("N5MQqUF*;ys4U$JuS");
      assertEquals(0, stringArray0.length);
      assertEquals(1, vec0.size());
      assertFalse(vec0.isEmpty());
      
      vec2.insertFirst(";]_`?K5");
      assertEquals(1, objectArray0.length);
      assertEquals(2, vec2.size());
      assertFalse(vec2.isEmpty());
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      Vec<ReadOnlyVec<Object>> vec0 = new Vec<ReadOnlyVec<Object>>();
      assertTrue(vec0.isEmpty());
      assertEquals(0, vec0.size());
      assertNotNull(vec0);
      
      Vec<Comparable<String>> vec1 = new Vec<Comparable<String>>();
      assertTrue(vec1.isEmpty());
      assertEquals(0, vec1.size());
      assertNotNull(vec1);
      
      String[] stringArray0 = new String[1];
      stringArray0[0] = " q<2 OeVs;?qd%(bEgo";
      Vec<String> vec2 = new Vec<String>(stringArray0);
      assertEquals(1, stringArray0.length);
      assertEquals(1, vec2.size());
      assertFalse(vec2.isEmpty());
      assertNotNull(vec2);
      
      vec2.hashCode();
      assertEquals(1, stringArray0.length);
      assertEquals(1, vec2.size());
      assertFalse(vec2.isEmpty());
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      Vec<Object> vec0 = new Vec<Object>();
      assertEquals(0, vec0.size());
      assertTrue(vec0.isEmpty());
      assertNotNull(vec0);
      
      Vec<String> vec1 = new Vec<String>(2672, (String) null);
      assertFalse(vec1.isEmpty());
      assertEquals(2672, vec1.size());
      assertNotNull(vec1);
      
      Object object0 = vec1.get(0);
      assertFalse(vec1.isEmpty());
      assertEquals(2672, vec1.size());
      assertNull(object0);
      
      vec0.insertFirstWithShifting((Object) null);
      assertEquals(1, vec0.size());
      assertFalse(vec0.isEmpty());
      
      int int0 = (-2534);
      vec0.clear();
      assertEquals(0, vec0.size());
      assertTrue(vec0.isEmpty());
      
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      vec0.selectionSort((-860), (-2534), comparator0);
      assertEquals(0, vec0.size());
      assertTrue(vec0.isEmpty());
      
      Vec<Object> vec2 = null;
      try {
        vec2 = new Vec<Object>((-3605), vec0);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.core.Vec", e);
      }
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      Object[] objectArray0 = new Object[8];
      Vec<String> vec0 = new Vec<String>();
      assertEquals(0, vec0.size());
      assertTrue(vec0.isEmpty());
      assertNotNull(vec0);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      Object object1 = new Object();
      assertNotNull(object1);
      assertFalse(object1.equals((Object)object0));
      
      objectArray0[0] = object1;
      objectArray0[1] = (Object) "yz=#Eq9!}KcD'mqr:C";
      Integer integer0 = new Integer((-396));
      assertEquals((-396), (int)integer0);
      assertNotNull(integer0);
      
      Object object2 = new Object();
      assertNotNull(object2);
      assertFalse(object2.equals((Object)object0));
      assertFalse(object2.equals((Object)object1));
      
      Object object3 = new Object();
      assertNotNull(object3);
      assertFalse(object3.equals((Object)object1));
      assertFalse(object3.equals((Object)object0));
      assertFalse(object3.equals((Object)object2));
      
      objectArray0[2] = object3;
      Vec<String> vec1 = new Vec<String>(1, (String) null);
      assertFalse(vec1.isEmpty());
      assertEquals(1, vec1.size());
      assertNotNull(vec1);
      assertFalse(vec1.equals((Object)vec0));
      
      Object object4 = new Object();
      assertNotNull(object4);
      assertFalse(object4.equals((Object)object1));
      assertFalse(object4.equals((Object)object0));
      assertFalse(object4.equals((Object)object3));
      assertFalse(object4.equals((Object)object2));
      
      objectArray0[3] = object4;
      Object object5 = new Object();
      assertNotNull(object5);
      assertFalse(object5.equals((Object)object1));
      assertFalse(object5.equals((Object)object2));
      assertFalse(object5.equals((Object)object0));
      assertFalse(object5.equals((Object)object4));
      assertFalse(object5.equals((Object)object3));
      
      objectArray0[4] = object5;
      Object object6 = new Object();
      assertNotNull(object6);
      assertFalse(object6.equals((Object)object5));
      assertFalse(object6.equals((Object)object3));
      assertFalse(object6.equals((Object)object1));
      assertFalse(object6.equals((Object)object2));
      assertFalse(object6.equals((Object)object0));
      assertFalse(object6.equals((Object)object4));
      
      Object object7 = new Object();
      assertNotNull(object7);
      assertFalse(object7.equals((Object)object4));
      assertFalse(object7.equals((Object)object2));
      assertFalse(object7.equals((Object)object5));
      assertFalse(object7.equals((Object)object0));
      assertFalse(object7.equals((Object)object6));
      assertFalse(object7.equals((Object)object3));
      assertFalse(object7.equals((Object)object1));
      
      objectArray0[5] = object7;
      Integer integer1 = new Integer((-32));
      assertEquals((-32), (int)integer1);
      assertNotNull(integer1);
      assertFalse(integer1.equals((Object)integer0));
      
      objectArray0[6] = (Object) integer1;
      objectArray0[7] = (Object) "i9~S>UO";
      Vec<Object> vec2 = new Vec<Object>(objectArray0);
      assertEquals(8, objectArray0.length);
      assertEquals(8, vec2.size());
      assertFalse(vec2.isEmpty());
      assertNotNull(vec2);
      
      vec2.growTo(0, object1);
      assertEquals(8, objectArray0.length);
      assertEquals(0, vec2.size());
      assertTrue(vec2.isEmpty());
      assertNotSame(object1, object7);
      assertNotSame(object1, object2);
      assertNotSame(object1, object4);
      assertNotSame(object1, object0);
      assertNotSame(object1, object6);
      assertNotSame(object1, object3);
      assertNotSame(object1, object5);
      assertFalse(object1.equals((Object)object7));
      assertFalse(object1.equals((Object)object2));
      assertFalse(object1.equals((Object)object4));
      assertFalse(object1.equals((Object)object0));
      assertFalse(object1.equals((Object)object6));
      assertFalse(object1.equals((Object)object3));
      assertFalse(object1.equals((Object)object5));
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      Vec<Object> vec0 = new Vec<Object>();
      assertTrue(vec0.isEmpty());
      assertEquals(0, vec0.size());
      assertNotNull(vec0);
      
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      vec0.sort(comparator0);
      assertTrue(vec0.isEmpty());
      assertEquals(0, vec0.size());
      
      Vec<String> vec1 = new Vec<String>();
      assertTrue(vec1.isEmpty());
      assertEquals(0, vec1.size());
      assertNotNull(vec1);
      
      vec1.selectionSort(136, 136, (Comparator<String>) null);
      assertTrue(vec1.isEmpty());
      assertEquals(0, vec1.size());
      
      Comparator<Object> comparator1 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      Vec<Vec<Object>> vec2 = new Vec<Vec<Object>>(5, vec0);
      assertTrue(vec0.isEmpty());
      assertEquals(0, vec0.size());
      assertFalse(vec2.isEmpty());
      assertEquals(5, vec2.size());
      assertNotNull(vec2);
      
      boolean boolean0 = vec2.isEmpty();
      assertFalse(boolean0);
      assertTrue(vec0.isEmpty());
      assertEquals(0, vec0.size());
      assertFalse(vec2.isEmpty());
      assertEquals(5, vec2.size());
      
      Vec<Object> vec3 = new Vec<Object>();
      assertEquals(0, vec3.size());
      assertTrue(vec3.isEmpty());
      assertNotNull(vec3);
      assertTrue(vec3.equals((Object)vec0));
      
      vec3.ensure(0);
      assertEquals(0, vec3.size());
      assertTrue(vec3.isEmpty());
      assertNotSame(vec3, vec0);
      assertTrue(vec3.equals((Object)vec0));
      
      Vec<String> vec4 = new Vec<String>(5);
      assertTrue(vec4.isEmpty());
      assertEquals(0, vec4.size());
      assertNotNull(vec4);
      assertTrue(vec4.equals((Object)vec1));
      
      int int0 = vec4.indexOf(",");
      assertEquals((-1), int0);
      assertTrue(vec4.isEmpty());
      assertEquals(0, vec4.size());
      assertNotSame(vec4, vec1);
      assertTrue(vec4.equals((Object)vec1));
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      Vec<Integer> vec0 = new Vec<Integer>();
      assertEquals(0, vec0.size());
      assertTrue(vec0.isEmpty());
      assertNotNull(vec0);
      
      int int0 = 0;
      ReadOnlyVec<Integer> readOnlyVec0 = new ReadOnlyVec<Integer>(vec0);
      assertEquals(0, vec0.size());
      assertTrue(vec0.isEmpty());
      assertTrue(readOnlyVec0.isEmpty());
      assertEquals(0, readOnlyVec0.size());
      assertNotNull(readOnlyVec0);
      
      // Undeclared exception!
      try { 
        vec0.moveTo((IVec<Integer>) readOnlyVec0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // org.sat4j.core.ReadOnlyVec cannot be cast to org.sat4j.core.Vec
         //
         verifyException("org.sat4j.core.Vec", e);
      }
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      Object[] objectArray0 = new Object[3];
      Integer integer0 = new Integer(0);
      assertEquals(0, (int)integer0);
      assertNotNull(integer0);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      objectArray0[0] = object0;
      Vec<Integer> vec0 = new Vec<Integer>();
      assertTrue(vec0.isEmpty());
      assertEquals(0, vec0.size());
      assertNotNull(vec0);
      
      Object object1 = new Object();
      assertNotNull(object1);
      assertFalse(object1.equals((Object)object0));
      
      objectArray0[1] = object1;
      Integer integer1 = new Integer(1604);
      assertEquals(1604, (int)integer1);
      assertNotNull(integer1);
      assertFalse(integer1.equals((Object)integer0));
      
      Object object2 = new Object();
      assertNotNull(object2);
      assertFalse(object2.equals((Object)object1));
      assertFalse(object2.equals((Object)object0));
      
      objectArray0[2] = object2;
      Vec<Object> vec1 = new Vec<Object>(objectArray0);
      assertEquals(3, objectArray0.length);
      assertFalse(vec1.isEmpty());
      assertEquals(3, vec1.size());
      assertNotNull(vec1);
      
      String string0 = vec1.toString();
      assertEquals(3, objectArray0.length);
      assertFalse(vec1.isEmpty());
      assertEquals(3, vec1.size());
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      Vec<ReadOnlyVec<Object>> vec0 = new Vec<ReadOnlyVec<Object>>();
      assertEquals(0, vec0.size());
      assertTrue(vec0.isEmpty());
      assertNotNull(vec0);
      
      int int0 = vec0.size();
      assertEquals(0, int0);
      assertEquals(0, vec0.size());
      assertTrue(vec0.isEmpty());
      
      Vec<Vec<Object>> vec1 = new Vec<Vec<Object>>(0);
      assertTrue(vec1.isEmpty());
      assertEquals(0, vec1.size());
      assertNotNull(vec1);
      
      Vec<String> vec2 = new Vec<String>(0, "g3gs");
      assertTrue(vec2.isEmpty());
      assertEquals(0, vec2.size());
      assertNotNull(vec2);
      
      vec2.insertFirst("g3gs");
      assertFalse(vec2.isEmpty());
      assertEquals(1, vec2.size());
      
      vec2.clear();
      assertTrue(vec2.isEmpty());
      assertEquals(0, vec2.size());
      
      Vec<Vec<String>> vec3 = new Vec<Vec<String>>(363, vec2);
      assertTrue(vec2.isEmpty());
      assertEquals(0, vec2.size());
      assertEquals(363, vec3.size());
      assertFalse(vec3.isEmpty());
      assertNotNull(vec3);
      
      int int1 = (-1);
      int int2 = (-1341);
      int int3 = 1523;
      // Undeclared exception!
      try { 
        vec3.sort(0, 2915, (Comparator<Vec<String>>) null);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1457
         //
         verifyException("org.sat4j.core.Vec", e);
      }
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      Vec<String> vec0 = new Vec<String>();
      assertEquals(0, vec0.size());
      assertTrue(vec0.isEmpty());
      assertNotNull(vec0);
      
      int int0 = 1176;
      String string0 = vec0.toString();
      assertEquals("", string0);
      assertEquals(0, vec0.size());
      assertTrue(vec0.isEmpty());
      assertNotNull(string0);
      
      String string1 = "";
      // Undeclared exception!
      try { 
        vec0.set(1176, "");
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1176
         //
         verifyException("org.sat4j.core.Vec", e);
      }
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      Vec<String> vec0 = new Vec<String>(2466, "&Gv#");
      assertFalse(vec0.isEmpty());
      assertEquals(2466, vec0.size());
      assertNotNull(vec0);
      
      vec0.insertFirstWithShifting("");
      assertFalse(vec0.isEmpty());
      assertEquals(2467, vec0.size());
      
      vec0.clear();
      assertEquals(0, vec0.size());
      assertTrue(vec0.isEmpty());
      
      Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      vec0.sort(comparator0);
      assertEquals(0, vec0.size());
      assertTrue(vec0.isEmpty());
      
      Comparator<String> comparator1 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      vec0.selectionSort(2466, 2, comparator1);
      assertEquals(0, vec0.size());
      assertTrue(vec0.isEmpty());
      
      Vec<Object> vec1 = new Vec<Object>();
      assertEquals(0, vec1.size());
      assertTrue(vec1.isEmpty());
      assertNotNull(vec1);
      
      vec1.ensure(1742);
      assertEquals(0, vec1.size());
      assertTrue(vec1.isEmpty());
      
      boolean boolean0 = vec0.contains("&Gv#");
      assertFalse(boolean0);
      assertEquals(0, vec0.size());
      assertTrue(vec0.isEmpty());
      
      vec1.set(233, "&Gv#");
      assertEquals(0, vec1.size());
      assertTrue(vec1.isEmpty());
      
      Vec<Integer> vec2 = new Vec<Integer>(512);
      assertTrue(vec2.isEmpty());
      assertEquals(0, vec2.size());
      assertNotNull(vec2);
      
      Integer integer0 = Integer.valueOf(575);
      assertEquals(575, (int)integer0);
      assertNotNull(integer0);
      
      Integer integer1 = Integer.valueOf(0);
      assertEquals(0, (int)integer1);
      assertNotNull(integer1);
      assertFalse(integer1.equals((Object)integer0));
      
      String string0 = integer1.toString();
      assertEquals("0", string0);
      assertNotNull(string0);
      assertFalse(integer1.equals((Object)integer0));
      
      vec2.growTo(0, integer1);
      assertTrue(vec2.isEmpty());
      assertEquals(0, vec2.size());
      assertFalse(integer1.equals((Object)integer0));
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      Integer integer0 = Integer.valueOf((-1274));
      assertEquals((-1274), (int)integer0);
      assertNotNull(integer0);
      
      int int0 = integer0.intValue();
      assertEquals((-1274), int0);
      
      Vec<Integer> vec0 = new Vec<Integer>(539, (Integer) (-1274));
      assertEquals(539, vec0.size());
      assertFalse(vec0.isEmpty());
      assertNotNull(vec0);
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      String[] stringArray0 = new String[0];
      Vec<String> vec0 = new Vec<String>(stringArray0);
      assertEquals(0, stringArray0.length);
      assertTrue(vec0.isEmpty());
      assertEquals(0, vec0.size());
      assertNotNull(vec0);
      
      ReadOnlyVec<Object> readOnlyVec0 = new ReadOnlyVec<Object>((IVec<Object>) null);
      assertNotNull(readOnlyVec0);
      
      Vec<ReadOnlyVec<Object>> vec1 = new Vec<ReadOnlyVec<Object>>(1, readOnlyVec0);
      assertFalse(vec1.isEmpty());
      assertEquals(1, vec1.size());
      assertNotNull(vec1);
      
      vec1.insertFirstWithShifting(readOnlyVec0);
      assertFalse(vec1.isEmpty());
      assertEquals(2, vec1.size());
      
      Vec<Object> vec2 = new Vec<Object>();
      assertEquals(0, vec2.size());
      assertTrue(vec2.isEmpty());
      assertNotNull(vec2);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      // Undeclared exception!
      try { 
        vec2.removeFromLast(object0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("org.sat4j.core.Vec", e);
      }
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      String string0 = "";
      Vec<String> vec0 = new Vec<String>(1306, "");
      assertEquals(1306, vec0.size());
      assertFalse(vec0.isEmpty());
      assertNotNull(vec0);
      
      vec0.ensure(1372);
      assertEquals(1306, vec0.size());
      assertFalse(vec0.isEmpty());
      
      String string1 = "org.sat4j.core.ReadOnlyVec";
      vec0.insertFirst("org.sat4j.core.ReadOnlyVec");
      assertEquals(1307, vec0.size());
      assertFalse(vec0.isEmpty());
      
      String string2 = vec0.delete(1306);
      assertEquals("", string2);
      assertEquals(1306, vec0.size());
      assertFalse(vec0.isEmpty());
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string1));
      assertTrue(string2.equals((Object)string0));
      
      vec0.ensure(1306);
      assertEquals(1306, vec0.size());
      assertFalse(vec0.isEmpty());
      
      Vec<ReadOnlyVec<Object>> vec1 = new Vec<ReadOnlyVec<Object>>();
      assertEquals(0, vec1.size());
      assertTrue(vec1.isEmpty());
      assertNotNull(vec1);
      
      vec1.copyTo((IVec<ReadOnlyVec<Object>>) vec1);
      assertEquals(0, vec1.size());
      assertTrue(vec1.isEmpty());
      
      Vec<Integer> vec2 = new Vec<Integer>(0);
      assertEquals(0, vec2.size());
      assertTrue(vec2.isEmpty());
      assertNotNull(vec2);
      
      ReadOnlyVec<Integer> readOnlyVec0 = new ReadOnlyVec<Integer>(vec2);
      assertEquals(0, vec2.size());
      assertTrue(vec2.isEmpty());
      assertTrue(readOnlyVec0.isEmpty());
      assertEquals(0, readOnlyVec0.size());
      assertNotNull(readOnlyVec0);
      
      Vec<ReadOnlyVec<Integer>> vec3 = new Vec<ReadOnlyVec<Integer>>(0, readOnlyVec0);
      assertEquals(0, vec2.size());
      assertTrue(vec2.isEmpty());
      assertTrue(readOnlyVec0.isEmpty());
      assertEquals(0, readOnlyVec0.size());
      assertEquals(0, vec3.size());
      assertTrue(vec3.isEmpty());
      assertNotNull(vec3);
      
      int int0 = 1;
      vec3.shrinkTo(1);
      assertEquals(0, vec2.size());
      assertTrue(vec2.isEmpty());
      assertTrue(readOnlyVec0.isEmpty());
      assertEquals(0, readOnlyVec0.size());
      assertEquals(1, vec3.size());
      assertFalse(vec3.isEmpty());
      
      int int1 = 1;
      // Undeclared exception!
      try { 
        vec3.delete(1306);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1306
         //
         verifyException("org.sat4j.core.Vec", e);
      }
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      Vec<String> vec0 = new Vec<String>(1792);
      assertTrue(vec0.isEmpty());
      assertEquals(0, vec0.size());
      assertNotNull(vec0);
      
      IVec<String> iVec0 = vec0.clone();
      assertTrue(vec0.isEmpty());
      assertEquals(0, vec0.size());
      assertTrue(iVec0.isEmpty());
      assertEquals(0, iVec0.size());
      assertNotNull(iVec0);
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      Vec<Object> vec0 = new Vec<Object>(0);
      assertEquals(0, vec0.size());
      assertTrue(vec0.isEmpty());
      assertNotNull(vec0);
      
      int int0 = 0;
      Integer integer0 = new Integer((-1726));
      assertEquals((-1726), (int)integer0);
      assertNotNull(integer0);
      assertFalse(integer0.equals((Object)int0));
      
      vec0.growTo(0, integer0);
      assertEquals(0, vec0.size());
      assertTrue(vec0.isEmpty());
      assertFalse(integer0.equals((Object)int0));
      
      int int1 = (-3502);
      vec0.shrink((-3502));
      assertEquals(0, vec0.size());
      assertTrue(vec0.isEmpty());
      
      Vec<Comparable<String>> vec1 = new Vec<Comparable<String>>();
      assertEquals(0, vec1.size());
      assertTrue(vec1.isEmpty());
      assertNotNull(vec1);
      
      Vec<Comparable<String>>[] vecArray0 = (Vec<Comparable<String>>[]) Array.newInstance(Vec.class, 3);
      vecArray0[0] = vec1;
      vecArray0[1] = vec1;
      vecArray0[2] = vec1;
      vec1.copyTo(vecArray0);
      assertEquals(3, vecArray0.length);
      assertEquals(0, vec1.size());
      assertTrue(vec1.isEmpty());
      
      Vec<Integer> vec2 = null;
      try {
        vec2 = new Vec<Integer>((-1478));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.core.Vec", e);
      }
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      Vec<Integer> vec0 = new Vec<Integer>(2);
      assertTrue(vec0.isEmpty());
      assertEquals(0, vec0.size());
      assertNotNull(vec0);
      
      Object[] objectArray0 = new Object[5];
      objectArray0[0] = (Object) vec0;
      objectArray0[1] = (Object) vec0;
      objectArray0[2] = (Object) vec0;
      objectArray0[3] = (Object) vec0;
      objectArray0[4] = (Object) ":f";
      Vec<Object> vec1 = new Vec<Object>(objectArray0);
      assertEquals(5, objectArray0.length);
      assertFalse(vec1.isEmpty());
      assertEquals(5, vec1.size());
      assertNotNull(vec1);
      
      IVec<Object> iVec0 = vec1.clone();
      assertEquals(5, objectArray0.length);
      assertFalse(vec1.isEmpty());
      assertEquals(5, vec1.size());
      assertFalse(iVec0.isEmpty());
      assertEquals(5, iVec0.size());
      assertNotNull(iVec0);
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      Vec<Object> vec0 = new Vec<Object>();
      assertEquals(0, vec0.size());
      assertTrue(vec0.isEmpty());
      assertNotNull(vec0);
      
      Vec<String> vec1 = new Vec<String>();
      assertEquals(0, vec1.size());
      assertTrue(vec1.isEmpty());
      assertNotNull(vec1);
      
      vec1.ensure(0);
      assertEquals(0, vec1.size());
      assertTrue(vec1.isEmpty());
      
      IVec<Object> iVec0 = vec0.push((Object) null);
      assertEquals(1, vec0.size());
      assertFalse(vec0.isEmpty());
      assertFalse(iVec0.isEmpty());
      assertEquals(1, iVec0.size());
      assertNotNull(iVec0);
      
      vec0.sortUnique((Comparator<Object>) null);
      assertEquals(1, vec0.size());
      assertFalse(vec0.isEmpty());
      
      vec1.insertFirst("");
      assertFalse(vec1.isEmpty());
      assertEquals(1, vec1.size());
      
      vec0.insertFirst(vec1);
      assertEquals(2, vec0.size());
      assertFalse(vec0.isEmpty());
      assertFalse(vec1.isEmpty());
      assertEquals(1, vec1.size());
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      Vec<ReadOnlyVec<Object>> vec0 = new Vec<ReadOnlyVec<Object>>();
      assertEquals(0, vec0.size());
      assertTrue(vec0.isEmpty());
      assertNotNull(vec0);
      
      Vec<ReadOnlyVec<String>> vec1 = new Vec<ReadOnlyVec<String>>();
      assertTrue(vec1.isEmpty());
      assertEquals(0, vec1.size());
      assertNotNull(vec1);
      
      IVec<ReadOnlyVec<String>> iVec0 = vec1.clone();
      assertTrue(vec1.isEmpty());
      assertEquals(0, vec1.size());
      assertEquals(0, iVec0.size());
      assertTrue(iVec0.isEmpty());
      assertNotNull(iVec0);
      
      Object[] objectArray0 = new Object[3];
      objectArray0[0] = (Object) vec1;
      objectArray0[1] = (Object) vec0;
      objectArray0[2] = (Object) iVec0;
      Vec<Object> vec2 = new Vec<Object>(objectArray0);
      assertEquals(3, objectArray0.length);
      assertEquals(3, vec2.size());
      assertFalse(vec2.isEmpty());
      assertNotNull(vec2);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      vec2.removeFromLast(vec1);
      assertEquals(3, objectArray0.length);
      assertTrue(vec1.isEmpty());
      assertEquals(0, vec1.size());
      assertFalse(vec2.isEmpty());
      assertEquals(2, vec2.size());
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      Vec<Object> vec0 = new Vec<Object>();
      vec0.insertFirst((Object) null);
      Integer integer0 = new Integer(98);
      vec0.insertFirst(integer0);
      ReadOnlyVec<Object>[] readOnlyVecArray0 = (ReadOnlyVec<Object>[]) Array.newInstance(ReadOnlyVec.class, 1);
      vec0.growTo(2989, (Object) null);
      ReadOnlyVec<Object> readOnlyVec0 = new ReadOnlyVec<Object>(vec0);
      readOnlyVecArray0[0] = readOnlyVec0;
      Vec<ReadOnlyVec<Object>> vec1 = new Vec<ReadOnlyVec<Object>>(readOnlyVecArray0);
      vec1.toString();
      vec1.insertFirstWithShifting(readOnlyVec0);
      ReadOnlyVec<String>[] readOnlyVecArray1 = null;
      // Undeclared exception!
      try { 
        vec0.removeFromLast("org.sat4j.core.Vec@0000000001");
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("org.sat4j.core.Vec", e);
      }
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      Vec<String> vec0 = new Vec<String>();
      vec0.insertFirst("KkZ6BOXn@ei/agX@");
      vec0.contains("7[Y)qestQj");
      int int0 = (-1);
      String string0 = "org.sat4j.core.Vec$1";
      vec0.growTo((-1), "org.sat4j.core.Vec$1");
      // Undeclared exception!
      try { 
        vec0.insertFirst("");
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("org.sat4j.core.Vec", e);
      }
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      Vec<String> vec0 = new Vec<String>(0, "");
      vec0.shrinkTo(0);
      vec0.iterator();
      Vec<String>[] vecArray0 = (Vec<String>[]) Array.newInstance(Vec.class, 0);
      Vec<Vec<String>> vec1 = new Vec<Vec<String>>(vecArray0);
      // Undeclared exception!
      try { 
        vec1.set(0, vec0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.sat4j.core.Vec", e);
      }
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      String[] stringArray0 = new String[0];
      Vec<String> vec0 = new Vec<String>(stringArray0);
      vec0.insertFirst("ec!#M#JNtM!c");
      vec0.clear();
      Vec<Vec<String>> vec1 = new Vec<Vec<String>>(2781, vec0);
      Vec<String> vec2 = new Vec<String>();
      vec0.ensure(2781);
      Vec<Object> vec3 = new Vec<Object>();
      IVec<Object> iVec0 = vec3.push(vec2);
      vec3.sortUnique((Comparator<Object>) null);
      vec0.insertFirst("");
      vec3.insertFirst(iVec0);
      Vec<Comparable<Integer>> vec4 = new Vec<Comparable<Integer>>();
      vec3.hashCode();
      // Undeclared exception!
      try { 
        vec4.remove(3);
        fail("Expecting exception: NoSuchElementException");
      
      } catch(NoSuchElementException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.core.Vec", e);
      }
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      Vec<Object> vec0 = new Vec<Object>(965);
      vec0.toString();
      Vec<Comparable<String>> vec1 = new Vec<Comparable<String>>();
      // Undeclared exception!
      try { 
        vec1.remove("");
        fail("Expecting exception: NoSuchElementException");
      
      } catch(NoSuchElementException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.core.Vec", e);
      }
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      Vec<Vec<Object>> vec0 = new Vec<Vec<Object>>(1028);
      IVec<Vec<Object>> iVec0 = vec0.clone();
      vec0.moveTo(iVec0);
      Vec<Object> vec1 = new Vec<Object>();
      // Undeclared exception!
      try { 
        vec0.moveTo((-2373), 1028);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1028
         //
         verifyException("org.sat4j.core.Vec", e);
      }
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      Vec<String> vec0 = new Vec<String>();
      // Undeclared exception!
      try { 
        vec0.last();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("org.sat4j.core.Vec", e);
      }
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      Vec<ReadOnlyVec<Object>> vec0 = new Vec<ReadOnlyVec<Object>>();
      Vec<String> vec1 = null;
      try {
        vec1 = new Vec<String>((-1));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.core.Vec", e);
      }
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      Vec<ReadOnlyVec<Object>> vec0 = new Vec<ReadOnlyVec<Object>>();
      vec0.size();
      Vec<Vec<Object>> vec1 = new Vec<Vec<Object>>(0);
      vec1.isEmpty();
      Vec<Object> vec2 = new Vec<Object>();
      int int0 = 0;
      vec2.ensure(0);
      vec2.insertFirstWithShifting(vec1);
      Vec<ReadOnlyVec<String>> vec3 = new Vec<ReadOnlyVec<String>>();
      vec3.iterator();
      Vec<Integer> vec4 = new Vec<Integer>(0);
      vec4.hashCode();
      vec1.moveTo((IVec<Vec<Object>>) vec1);
      Vec<ReadOnlyVec<Integer>> vec5 = new Vec<ReadOnlyVec<Integer>>();
      Vec<ReadOnlyVec<Integer>> vec6 = new Vec<ReadOnlyVec<Integer>>();
      vec6.clear();
      vec5.moveTo((IVec<ReadOnlyVec<Integer>>) vec6);
      vec5.shrink(0);
      vec5.equals(vec2);
      Vec<Vec<Integer>> vec7 = new Vec<Vec<Integer>>(0);
      // Undeclared exception!
      try { 
        vec7.shrink(1850);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("org.sat4j.core.Vec", e);
      }
  }
}
