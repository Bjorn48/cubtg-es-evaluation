/*
 * This file was automatically generated by EvoSuite
 * Tue Oct 29 17:45:16 GMT 2019
 */

package umd.cs.shop;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.StreamTokenizer;
import java.io.StringReader;
import java.util.Comparator;
import java.util.Iterator;
import java.util.LinkedList;
import java.util.ListIterator;
import java.util.Spliterator;
import java.util.function.Consumer;
import java.util.function.Predicate;
import java.util.function.UnaryOperator;
import java.util.stream.Stream;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.System;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;
import umd.cs.shop.JSJshopVars;
import umd.cs.shop.JSPredicateForm;
import umd.cs.shop.JSSubstitution;
import umd.cs.shop.JSTerm;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class JSTerm_ESTest extends JSTerm_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      assertTrue(jSTerm0.isEmpty());
      assertEquals("[]", jSTerm0.toString());
      assertFalse(jSTerm0.isConstant());
      assertEquals(0, jSTerm0.size());
      assertFalse(jSTerm0.isEval());
      assertEquals(10, jSTerm0.capacity());
      assertFalse(jSTerm0.isVariable());
      assertFalse(jSTerm0.isFunction());
      assertNotNull(jSTerm0);
      
      jSTerm0.makeVariable();
      assertTrue(jSTerm0.isEmpty());
      assertEquals("[]", jSTerm0.toString());
      assertFalse(jSTerm0.isConstant());
      assertEquals(0, jSTerm0.size());
      assertFalse(jSTerm0.isEval());
      assertEquals(10, jSTerm0.capacity());
      assertFalse(jSTerm0.isFunction());
      assertTrue(jSTerm0.isVariable());
      
      int int0 = 1052;
      JSJshopVars.slash = 1052;
      // Undeclared exception!
      try { 
        jSTerm0.print();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      assertEquals("[]", jSSubstitution0.toString());
      assertTrue(jSSubstitution0.isEmpty());
      assertFalse(jSSubstitution0.fail());
      assertEquals(10, jSSubstitution0.capacity());
      assertEquals(0, jSSubstitution0.size());
      assertNotNull(jSSubstitution0);
      
      StringReader stringReader0 = new StringReader("jFxA%Rdj8% jSYG> MR");
      assertNotNull(stringReader0);
      
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      assertEquals("Token[NOTHING], line 1", streamTokenizer0.toString());
      assertEquals(1, streamTokenizer0.lineno());
      assertNotNull(streamTokenizer0);
      assertEquals((-4), streamTokenizer0.ttype);
      assertEquals(0.0, streamTokenizer0.nval, 0.01);
      
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      assertEquals("Token[' '], line 1", streamTokenizer0.toString());
      assertEquals(1, streamTokenizer0.lineno());
      assertTrue(jSTerm0.isConstant());
      assertEquals("[jFxA%Rdj8%]", jSTerm0.toString());
      assertFalse(jSTerm0.isVariable());
      assertFalse(jSTerm0.isEval());
      assertEquals(1, jSTerm0.size());
      assertFalse(jSTerm0.isEmpty());
      assertEquals(10, jSTerm0.capacity());
      assertFalse(jSTerm0.isFunction());
      assertNotNull(jSTerm0);
      assertEquals(0.0, streamTokenizer0.nval, 0.01);
      assertEquals(32, streamTokenizer0.ttype);
      
      jSTerm0.makeEval(true);
      assertEquals("Token[' '], line 1", streamTokenizer0.toString());
      assertEquals(1, streamTokenizer0.lineno());
      assertTrue(jSTerm0.isConstant());
      assertTrue(jSTerm0.isEval());
      assertEquals("[jFxA%Rdj8%]", jSTerm0.toString());
      assertFalse(jSTerm0.isVariable());
      assertEquals(1, jSTerm0.size());
      assertFalse(jSTerm0.isEmpty());
      assertEquals(10, jSTerm0.capacity());
      assertFalse(jSTerm0.isFunction());
      assertEquals(0.0, streamTokenizer0.nval, 0.01);
      assertEquals(32, streamTokenizer0.ttype);
      
      boolean boolean0 = jSTerm0.isConstant();
      assertEquals("Token[' '], line 1", streamTokenizer0.toString());
      assertEquals(1, streamTokenizer0.lineno());
      assertTrue(jSTerm0.isConstant());
      assertTrue(jSTerm0.isEval());
      assertEquals("[jFxA%Rdj8%]", jSTerm0.toString());
      assertFalse(jSTerm0.isVariable());
      assertEquals(1, jSTerm0.size());
      assertFalse(jSTerm0.isEmpty());
      assertEquals(10, jSTerm0.capacity());
      assertFalse(jSTerm0.isFunction());
      assertTrue(boolean0);
      assertEquals(0.0, streamTokenizer0.nval, 0.01);
      assertEquals(32, streamTokenizer0.ttype);
      
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      jSTerm0.sort(comparator0);
      assertEquals("Token[' '], line 1", streamTokenizer0.toString());
      assertEquals(1, streamTokenizer0.lineno());
      assertTrue(jSTerm0.isConstant());
      assertTrue(jSTerm0.isEval());
      assertEquals("[jFxA%Rdj8%]", jSTerm0.toString());
      assertFalse(jSTerm0.isVariable());
      assertEquals(1, jSTerm0.size());
      assertFalse(jSTerm0.isEmpty());
      assertEquals(10, jSTerm0.capacity());
      assertFalse(jSTerm0.isFunction());
      assertEquals(0.0, streamTokenizer0.nval, 0.01);
      assertEquals(32, streamTokenizer0.ttype);
      
      jSTerm0.makeEval(true);
      assertEquals("Token[' '], line 1", streamTokenizer0.toString());
      assertEquals(1, streamTokenizer0.lineno());
      assertTrue(jSTerm0.isConstant());
      assertTrue(jSTerm0.isEval());
      assertEquals("[jFxA%Rdj8%]", jSTerm0.toString());
      assertFalse(jSTerm0.isVariable());
      assertEquals(1, jSTerm0.size());
      assertFalse(jSTerm0.isEmpty());
      assertEquals(10, jSTerm0.capacity());
      assertFalse(jSTerm0.isFunction());
      assertEquals(0.0, streamTokenizer0.nval, 0.01);
      assertEquals(32, streamTokenizer0.ttype);
      
      jSTerm0.makeFunction();
      assertEquals("Token[' '], line 1", streamTokenizer0.toString());
      assertEquals(1, streamTokenizer0.lineno());
      assertTrue(jSTerm0.isEval());
      assertEquals("[jFxA%Rdj8%]", jSTerm0.toString());
      assertTrue(jSTerm0.isFunction());
      assertFalse(jSTerm0.isVariable());
      assertFalse(jSTerm0.isConstant());
      assertEquals(1, jSTerm0.size());
      assertFalse(jSTerm0.isEmpty());
      assertEquals(10, jSTerm0.capacity());
      assertEquals(0.0, streamTokenizer0.nval, 0.01);
      assertEquals(32, streamTokenizer0.ttype);
      
      boolean boolean1 = jSTerm0.isGround();
      assertEquals("Token[' '], line 1", streamTokenizer0.toString());
      assertEquals(1, streamTokenizer0.lineno());
      assertTrue(jSTerm0.isEval());
      assertEquals("[jFxA%Rdj8%]", jSTerm0.toString());
      assertTrue(jSTerm0.isFunction());
      assertFalse(jSTerm0.isVariable());
      assertFalse(jSTerm0.isConstant());
      assertEquals(1, jSTerm0.size());
      assertFalse(jSTerm0.isEmpty());
      assertEquals(10, jSTerm0.capacity());
      assertTrue(boolean1);
      assertTrue(boolean1 == boolean0);
      assertEquals(0.0, streamTokenizer0.nval, 0.01);
      assertEquals(32, streamTokenizer0.ttype);
      
      jSTerm0.makeVariable();
      assertEquals("Token[' '], line 1", streamTokenizer0.toString());
      assertEquals(1, streamTokenizer0.lineno());
      assertTrue(jSTerm0.isEval());
      assertEquals("[jFxA%Rdj8%]", jSTerm0.toString());
      assertFalse(jSTerm0.isConstant());
      assertEquals(1, jSTerm0.size());
      assertFalse(jSTerm0.isEmpty());
      assertTrue(jSTerm0.isVariable());
      assertEquals(10, jSTerm0.capacity());
      assertFalse(jSTerm0.isFunction());
      assertEquals(0.0, streamTokenizer0.nval, 0.01);
      assertEquals(32, streamTokenizer0.ttype);
      
      JSTerm jSTerm1 = new JSTerm(streamTokenizer0);
      assertEquals("Token[' '], line 1", streamTokenizer0.toString());
      assertEquals(1, streamTokenizer0.lineno());
      assertEquals(10, jSTerm1.capacity());
      assertFalse(jSTerm1.isFunction());
      assertEquals("[jSYG>]", jSTerm1.toString());
      assertFalse(jSTerm1.isEmpty());
      assertEquals(1, jSTerm1.size());
      assertFalse(jSTerm1.isEval());
      assertTrue(jSTerm1.isConstant());
      assertFalse(jSTerm1.isVariable());
      assertNotNull(jSTerm1);
      assertFalse(jSTerm1.equals((Object)jSTerm0));
      assertEquals(0.0, streamTokenizer0.nval, 0.01);
      assertEquals(32, streamTokenizer0.ttype);
      
      JSJshopVars.backquote = 32;
      JSTerm jSTerm2 = new JSTerm(streamTokenizer0);
      assertEquals("Token[EOF], line 1", streamTokenizer0.toString());
      assertEquals(1, streamTokenizer0.lineno());
      assertFalse(jSTerm2.isEval());
      assertEquals(1, jSTerm2.size());
      assertFalse(jSTerm2.isVariable());
      assertTrue(jSTerm2.isConstant());
      assertFalse(jSTerm2.isEmpty());
      assertEquals("[%%%]", jSTerm2.toString());
      assertFalse(jSTerm2.isFunction());
      assertEquals(10, jSTerm2.capacity());
      assertNotNull(jSTerm2);
      assertFalse(jSTerm2.equals((Object)jSTerm0));
      assertFalse(jSTerm2.equals((Object)jSTerm1));
      assertEquals(0.0, streamTokenizer0.nval, 0.01);
      assertEquals((-1), streamTokenizer0.ttype);
      
      boolean boolean2 = jSTerm2.equals(jSTerm1);
      assertEquals("Token[EOF], line 1", streamTokenizer0.toString());
      assertEquals(1, streamTokenizer0.lineno());
      assertEquals(10, jSTerm1.capacity());
      assertFalse(jSTerm1.isFunction());
      assertEquals("[jSYG>]", jSTerm1.toString());
      assertFalse(jSTerm1.isEmpty());
      assertEquals(1, jSTerm1.size());
      assertFalse(jSTerm1.isEval());
      assertTrue(jSTerm1.isConstant());
      assertFalse(jSTerm1.isVariable());
      assertFalse(jSTerm2.isEval());
      assertEquals(1, jSTerm2.size());
      assertFalse(jSTerm2.isVariable());
      assertTrue(jSTerm2.isConstant());
      assertFalse(jSTerm2.isEmpty());
      assertEquals("[%%%]", jSTerm2.toString());
      assertFalse(jSTerm2.isFunction());
      assertEquals(10, jSTerm2.capacity());
      assertFalse(boolean2);
      assertNotSame(jSTerm1, jSTerm2);
      assertNotSame(jSTerm1, jSTerm0);
      assertNotSame(jSTerm2, jSTerm0);
      assertNotSame(jSTerm2, jSTerm1);
      assertFalse(jSTerm1.equals((Object)jSTerm2));
      assertFalse(jSTerm1.equals((Object)jSTerm0));
      assertFalse(jSTerm2.equals((Object)jSTerm0));
      assertFalse(jSTerm2.equals((Object)jSTerm1));
      assertFalse(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      assertEquals(0.0, streamTokenizer0.nval, 0.01);
      assertEquals((-1), streamTokenizer0.ttype);
      
      System.setCurrentTimeMillis((-1));
      JSTerm jSTerm3 = jSTerm2.applySubstitutionT(jSSubstitution0);
      assertEquals("[]", jSSubstitution0.toString());
      assertTrue(jSSubstitution0.isEmpty());
      assertFalse(jSSubstitution0.fail());
      assertEquals(10, jSSubstitution0.capacity());
      assertEquals(0, jSSubstitution0.size());
      assertFalse(jSTerm3.isEval());
      assertEquals(10, jSTerm3.capacity());
      assertFalse(jSTerm3.isVariable());
      assertFalse(jSTerm3.isFunction());
      assertTrue(jSTerm3.isConstant());
      assertEquals("[%%%]", jSTerm3.toString());
      assertFalse(jSTerm3.isEmpty());
      assertEquals(1, jSTerm3.size());
      assertEquals("Token[EOF], line 1", streamTokenizer0.toString());
      assertEquals(1, streamTokenizer0.lineno());
      assertFalse(jSTerm2.isEval());
      assertEquals(1, jSTerm2.size());
      assertFalse(jSTerm2.isVariable());
      assertTrue(jSTerm2.isConstant());
      assertFalse(jSTerm2.isEmpty());
      assertEquals("[%%%]", jSTerm2.toString());
      assertFalse(jSTerm2.isFunction());
      assertEquals(10, jSTerm2.capacity());
      assertNotSame(jSTerm3, jSTerm0);
      assertNotSame(jSTerm3, jSTerm2);
      assertNotSame(jSTerm3, jSTerm1);
      assertNotSame(jSTerm2, jSTerm0);
      assertNotSame(jSTerm2, jSTerm3);
      assertNotSame(jSTerm2, jSTerm1);
      assertNotNull(jSTerm3);
      assertFalse(jSTerm3.equals((Object)jSTerm0));
      assertTrue(jSTerm3.equals((Object)jSTerm2));
      assertFalse(jSTerm3.equals((Object)jSTerm1));
      assertFalse(jSTerm2.equals((Object)jSTerm0));
      assertFalse(jSTerm2.equals((Object)jSTerm1));
      assertEquals(0.0, streamTokenizer0.nval, 0.01);
      assertEquals((-1), streamTokenizer0.ttype);
      
      JSTerm jSTerm4 = jSTerm3.standardizerTerm();
      assertEquals("[]", jSSubstitution0.toString());
      assertTrue(jSSubstitution0.isEmpty());
      assertFalse(jSSubstitution0.fail());
      assertEquals(10, jSSubstitution0.capacity());
      assertEquals(0, jSSubstitution0.size());
      assertFalse(jSTerm3.isEval());
      assertEquals(10, jSTerm3.capacity());
      assertFalse(jSTerm3.isVariable());
      assertFalse(jSTerm3.isFunction());
      assertTrue(jSTerm3.isConstant());
      assertEquals("[%%%]", jSTerm3.toString());
      assertFalse(jSTerm3.isEmpty());
      assertEquals(1, jSTerm3.size());
      assertEquals(1, jSTerm4.size());
      assertEquals("[%%%]", jSTerm4.toString());
      assertFalse(jSTerm4.isFunction());
      assertEquals(10, jSTerm4.capacity());
      assertFalse(jSTerm4.isEmpty());
      assertFalse(jSTerm4.isEval());
      assertFalse(jSTerm4.isVariable());
      assertTrue(jSTerm4.isConstant());
      assertEquals("Token[EOF], line 1", streamTokenizer0.toString());
      assertEquals(1, streamTokenizer0.lineno());
      assertFalse(jSTerm2.isEval());
      assertEquals(1, jSTerm2.size());
      assertFalse(jSTerm2.isVariable());
      assertTrue(jSTerm2.isConstant());
      assertFalse(jSTerm2.isEmpty());
      assertEquals("[%%%]", jSTerm2.toString());
      assertFalse(jSTerm2.isFunction());
      assertEquals(10, jSTerm2.capacity());
      assertNotSame(jSTerm3, jSTerm0);
      assertNotSame(jSTerm3, jSTerm4);
      assertNotSame(jSTerm3, jSTerm2);
      assertNotSame(jSTerm3, jSTerm1);
      assertNotSame(jSTerm4, jSTerm1);
      assertNotSame(jSTerm4, jSTerm2);
      assertNotSame(jSTerm4, jSTerm3);
      assertNotSame(jSTerm4, jSTerm0);
      assertNotSame(jSTerm2, jSTerm4);
      assertNotSame(jSTerm2, jSTerm0);
      assertNotSame(jSTerm2, jSTerm3);
      assertNotSame(jSTerm2, jSTerm1);
      assertNotNull(jSTerm4);
      assertFalse(jSTerm3.equals((Object)jSTerm0));
      assertTrue(jSTerm3.equals((Object)jSTerm2));
      assertFalse(jSTerm3.equals((Object)jSTerm1));
      assertTrue(jSTerm4.equals((Object)jSTerm3));
      assertTrue(jSTerm4.equals((Object)jSTerm2));
      assertFalse(jSTerm4.equals((Object)jSTerm1));
      assertFalse(jSTerm4.equals((Object)jSTerm0));
      assertTrue(jSTerm2.equals((Object)jSTerm3));
      assertFalse(jSTerm2.equals((Object)jSTerm0));
      assertFalse(jSTerm2.equals((Object)jSTerm1));
      assertEquals(0.0, streamTokenizer0.nval, 0.01);
      assertEquals((-1), streamTokenizer0.ttype);
      
      JSTerm jSTerm5 = jSTerm1.standardizerTerm();
      assertEquals("Token[EOF], line 1", streamTokenizer0.toString());
      assertEquals(1, streamTokenizer0.lineno());
      assertFalse(jSTerm5.isVariable());
      assertFalse(jSTerm5.isFunction());
      assertFalse(jSTerm5.isEval());
      assertTrue(jSTerm5.isConstant());
      assertEquals("[jSYG>]", jSTerm5.toString());
      assertFalse(jSTerm5.isEmpty());
      assertEquals(1, jSTerm5.size());
      assertEquals(10, jSTerm5.capacity());
      assertEquals(10, jSTerm1.capacity());
      assertFalse(jSTerm1.isFunction());
      assertEquals("[jSYG>]", jSTerm1.toString());
      assertFalse(jSTerm1.isEmpty());
      assertEquals(1, jSTerm1.size());
      assertFalse(jSTerm1.isEval());
      assertTrue(jSTerm1.isConstant());
      assertFalse(jSTerm1.isVariable());
      assertNotSame(jSTerm5, jSTerm4);
      assertNotSame(jSTerm5, jSTerm0);
      assertNotSame(jSTerm5, jSTerm2);
      assertNotSame(jSTerm5, jSTerm3);
      assertNotSame(jSTerm5, jSTerm1);
      assertNotSame(jSTerm1, jSTerm5);
      assertNotSame(jSTerm1, jSTerm4);
      assertNotSame(jSTerm1, jSTerm2);
      assertNotSame(jSTerm1, jSTerm3);
      assertNotSame(jSTerm1, jSTerm0);
      assertNotNull(jSTerm5);
      assertFalse(jSTerm5.equals((Object)jSTerm4));
      assertFalse(jSTerm5.equals((Object)jSTerm0));
      assertTrue(jSTerm5.equals((Object)jSTerm1));
      assertFalse(jSTerm5.equals((Object)jSTerm2));
      assertFalse(jSTerm5.equals((Object)jSTerm3));
      assertFalse(jSTerm1.equals((Object)jSTerm4));
      assertFalse(jSTerm1.equals((Object)jSTerm2));
      assertFalse(jSTerm1.equals((Object)jSTerm3));
      assertFalse(jSTerm1.equals((Object)jSTerm0));
      assertEquals(0.0, streamTokenizer0.nval, 0.01);
      assertEquals((-1), streamTokenizer0.ttype);
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      assertFalse(jSTerm0.isFunction());
      assertFalse(jSTerm0.isEval());
      assertEquals(0, jSTerm0.size());
      assertTrue(jSTerm0.isEmpty());
      assertFalse(jSTerm0.isVariable());
      assertEquals("[]", jSTerm0.toString());
      assertFalse(jSTerm0.isConstant());
      assertEquals(10, jSTerm0.capacity());
      assertNotNull(jSTerm0);
      
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      assertFalse(jSSubstitution0.fail());
      assertEquals("[]", jSSubstitution0.toString());
      assertEquals(10, jSSubstitution0.capacity());
      assertEquals(0, jSSubstitution0.size());
      assertTrue(jSSubstitution0.isEmpty());
      assertNotNull(jSSubstitution0);
      
      boolean boolean0 = jSTerm0.add((Object) jSSubstitution0);
      assertFalse(jSTerm0.isFunction());
      assertFalse(jSTerm0.isEval());
      assertEquals(1, jSTerm0.size());
      assertFalse(jSTerm0.isVariable());
      assertFalse(jSTerm0.isEmpty());
      assertFalse(jSTerm0.isConstant());
      assertEquals("[[]]", jSTerm0.toString());
      assertEquals(10, jSTerm0.capacity());
      assertFalse(jSSubstitution0.fail());
      assertEquals("[]", jSSubstitution0.toString());
      assertEquals(10, jSSubstitution0.capacity());
      assertEquals(0, jSSubstitution0.size());
      assertTrue(jSSubstitution0.isEmpty());
      assertTrue(boolean0);
      
      JSTerm jSTerm1 = jSTerm0.applySubstitutionT(jSSubstitution0);
      assertFalse(jSTerm0.isFunction());
      assertFalse(jSTerm0.isEval());
      assertEquals(1, jSTerm0.size());
      assertFalse(jSTerm0.isVariable());
      assertFalse(jSTerm0.isEmpty());
      assertFalse(jSTerm0.isConstant());
      assertEquals("[[]]", jSTerm0.toString());
      assertEquals(10, jSTerm0.capacity());
      assertFalse(jSSubstitution0.fail());
      assertEquals("[]", jSSubstitution0.toString());
      assertEquals(10, jSSubstitution0.capacity());
      assertEquals(0, jSSubstitution0.size());
      assertTrue(jSSubstitution0.isEmpty());
      assertTrue(jSTerm1.isFunction());
      assertFalse(jSTerm1.isConstant());
      assertFalse(jSTerm1.isEmpty());
      assertEquals(10, jSTerm1.capacity());
      assertEquals("[[]]", jSTerm1.toString());
      assertFalse(jSTerm1.isEval());
      assertEquals(1, jSTerm1.size());
      assertFalse(jSTerm1.isVariable());
      assertNotSame(jSTerm0, jSTerm1);
      assertNotSame(jSTerm1, jSTerm0);
      assertNotNull(jSTerm1);
      assertTrue(jSTerm1.equals((Object)jSTerm0));
      
      // Undeclared exception!
      try { 
        jSTerm0.equals(jSTerm1);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // umd.cs.shop.JSSubstitution cannot be cast to java.lang.String
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      assertEquals("[]", jSSubstitution0.toString());
      assertTrue(jSSubstitution0.isEmpty());
      assertEquals(0, jSSubstitution0.size());
      assertFalse(jSSubstitution0.fail());
      assertEquals(10, jSSubstitution0.capacity());
      assertNotNull(jSSubstitution0);
      
      StringReader stringReader0 = new StringReader("jFxA%Rdj8% jSYG> MR");
      assertNotNull(stringReader0);
      
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      assertEquals("Token[NOTHING], line 1", streamTokenizer0.toString());
      assertEquals(1, streamTokenizer0.lineno());
      assertNotNull(streamTokenizer0);
      assertEquals(0.0, streamTokenizer0.nval, 0.01);
      assertEquals((-4), streamTokenizer0.ttype);
      
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      assertEquals("Token[' '], line 1", streamTokenizer0.toString());
      assertEquals(1, streamTokenizer0.lineno());
      assertEquals(1, jSTerm0.size());
      assertEquals("[jFxA%Rdj8%]", jSTerm0.toString());
      assertTrue(jSTerm0.isConstant());
      assertFalse(jSTerm0.isEval());
      assertFalse(jSTerm0.isVariable());
      assertFalse(jSTerm0.isEmpty());
      assertEquals(10, jSTerm0.capacity());
      assertFalse(jSTerm0.isFunction());
      assertNotNull(jSTerm0);
      assertEquals(0.0, streamTokenizer0.nval, 0.01);
      assertEquals(32, streamTokenizer0.ttype);
      
      JSTerm jSTerm1 = jSSubstitution0.instance(jSTerm0);
      assertEquals("[]", jSSubstitution0.toString());
      assertTrue(jSSubstitution0.isEmpty());
      assertEquals(0, jSSubstitution0.size());
      assertFalse(jSSubstitution0.fail());
      assertEquals(10, jSSubstitution0.capacity());
      assertEquals("Token[' '], line 1", streamTokenizer0.toString());
      assertEquals(1, streamTokenizer0.lineno());
      assertEquals(1, jSTerm0.size());
      assertEquals("[jFxA%Rdj8%]", jSTerm0.toString());
      assertTrue(jSTerm0.isConstant());
      assertFalse(jSTerm0.isEval());
      assertFalse(jSTerm0.isVariable());
      assertFalse(jSTerm0.isEmpty());
      assertEquals(10, jSTerm0.capacity());
      assertFalse(jSTerm0.isFunction());
      assertFalse(jSTerm1.isVariable());
      assertFalse(jSTerm1.isFunction());
      assertFalse(jSTerm1.isEval());
      assertTrue(jSTerm1.isConstant());
      assertEquals("[jFxA%Rdj8%]", jSTerm1.toString());
      assertFalse(jSTerm1.isEmpty());
      assertEquals(1, jSTerm1.size());
      assertEquals(10, jSTerm1.capacity());
      assertSame(jSTerm0, jSTerm1);
      assertSame(jSTerm1, jSTerm0);
      assertNotNull(jSTerm1);
      assertEquals(0.0, streamTokenizer0.nval, 0.01);
      assertEquals(32, streamTokenizer0.ttype);
      
      jSTerm0.makeVariable();
      assertEquals("Token[' '], line 1", streamTokenizer0.toString());
      assertEquals(1, streamTokenizer0.lineno());
      assertEquals(1, jSTerm0.size());
      assertEquals("[jFxA%Rdj8%]", jSTerm0.toString());
      assertFalse(jSTerm0.isEval());
      assertTrue(jSTerm0.isVariable());
      assertFalse(jSTerm0.isConstant());
      assertFalse(jSTerm0.isEmpty());
      assertEquals(10, jSTerm0.capacity());
      assertFalse(jSTerm0.isFunction());
      assertSame(jSTerm0, jSTerm1);
      assertEquals(0.0, streamTokenizer0.nval, 0.01);
      assertEquals(32, streamTokenizer0.ttype);
      
      JSTerm jSTerm2 = jSTerm1.applySubstitutionT(jSSubstitution0);
      assertEquals("[]", jSSubstitution0.toString());
      assertTrue(jSSubstitution0.isEmpty());
      assertEquals(0, jSSubstitution0.size());
      assertFalse(jSSubstitution0.fail());
      assertEquals(10, jSSubstitution0.capacity());
      assertEquals("Token[' '], line 1", streamTokenizer0.toString());
      assertEquals(1, streamTokenizer0.lineno());
      assertEquals(1, jSTerm0.size());
      assertEquals("[jFxA%Rdj8%]", jSTerm0.toString());
      assertFalse(jSTerm0.isEval());
      assertTrue(jSTerm0.isVariable());
      assertFalse(jSTerm0.isConstant());
      assertFalse(jSTerm0.isEmpty());
      assertEquals(10, jSTerm0.capacity());
      assertFalse(jSTerm0.isFunction());
      assertFalse(jSTerm1.isFunction());
      assertFalse(jSTerm1.isEval());
      assertEquals("[jFxA%Rdj8%]", jSTerm1.toString());
      assertFalse(jSTerm1.isEmpty());
      assertTrue(jSTerm1.isVariable());
      assertEquals(1, jSTerm1.size());
      assertFalse(jSTerm1.isConstant());
      assertEquals(10, jSTerm1.capacity());
      assertEquals("[jFxA%Rdj8%]", jSTerm2.toString());
      assertFalse(jSTerm2.isFunction());
      assertEquals(10, jSTerm2.capacity());
      assertFalse(jSTerm2.isEmpty());
      assertEquals(1, jSTerm2.size());
      assertFalse(jSTerm2.isConstant());
      assertFalse(jSTerm2.isEval());
      assertTrue(jSTerm2.isVariable());
      assertNotSame(jSTerm0, jSTerm2);
      assertSame(jSTerm0, jSTerm1);
      assertSame(jSTerm1, jSTerm0);
      assertNotSame(jSTerm1, jSTerm2);
      assertNotSame(jSTerm2, jSTerm1);
      assertNotSame(jSTerm2, jSTerm0);
      assertNotNull(jSTerm2);
      assertTrue(jSTerm2.equals((Object)jSTerm1));
      assertTrue(jSTerm2.equals((Object)jSTerm0));
      assertEquals(0.0, streamTokenizer0.nval, 0.01);
      assertEquals(32, streamTokenizer0.ttype);
      
      JSSubstitution jSSubstitution1 = jSTerm1.matches(jSTerm0);
      assertEquals("[]", jSSubstitution0.toString());
      assertTrue(jSSubstitution0.isEmpty());
      assertEquals(0, jSSubstitution0.size());
      assertFalse(jSSubstitution0.fail());
      assertEquals(10, jSSubstitution0.capacity());
      assertEquals("Token[' '], line 1", streamTokenizer0.toString());
      assertEquals(1, streamTokenizer0.lineno());
      assertEquals(1, jSTerm0.size());
      assertEquals("[jFxA%Rdj8%]", jSTerm0.toString());
      assertFalse(jSTerm0.isEval());
      assertTrue(jSTerm0.isVariable());
      assertFalse(jSTerm0.isConstant());
      assertFalse(jSTerm0.isEmpty());
      assertEquals(10, jSTerm0.capacity());
      assertFalse(jSTerm0.isFunction());
      assertFalse(jSTerm1.isFunction());
      assertFalse(jSTerm1.isEval());
      assertEquals("[jFxA%Rdj8%]", jSTerm1.toString());
      assertFalse(jSTerm1.isEmpty());
      assertTrue(jSTerm1.isVariable());
      assertEquals(1, jSTerm1.size());
      assertFalse(jSTerm1.isConstant());
      assertEquals(10, jSTerm1.capacity());
      assertFalse(jSSubstitution1.isEmpty());
      assertFalse(jSSubstitution1.fail());
      assertEquals(1, jSSubstitution1.size());
      assertEquals(10, jSSubstitution1.capacity());
      assertNotSame(jSSubstitution0, jSSubstitution1);
      assertNotSame(jSTerm0, jSTerm2);
      assertSame(jSTerm0, jSTerm1);
      assertSame(jSTerm1, jSTerm0);
      assertNotSame(jSTerm1, jSTerm2);
      assertNotSame(jSSubstitution1, jSSubstitution0);
      assertNotNull(jSSubstitution1);
      assertTrue(jSTerm0.equals((Object)jSTerm2));
      assertTrue(jSTerm1.equals((Object)jSTerm2));
      assertFalse(jSSubstitution1.equals((Object)jSSubstitution0));
      assertEquals(0.0, streamTokenizer0.nval, 0.01);
      assertEquals(32, streamTokenizer0.ttype);
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      assertEquals(0, jSSubstitution0.size());
      assertEquals(10, jSSubstitution0.capacity());
      assertEquals("[]", jSSubstitution0.toString());
      assertTrue(jSSubstitution0.isEmpty());
      assertFalse(jSSubstitution0.fail());
      assertNotNull(jSSubstitution0);
      
      StringReader stringReader0 = new StringReader("jFxA%Rdj8% jSYG> MR");
      assertNotNull(stringReader0);
      
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      assertEquals(1, streamTokenizer0.lineno());
      assertEquals("Token[NOTHING], line 1", streamTokenizer0.toString());
      assertNotNull(streamTokenizer0);
      assertEquals(0.0, streamTokenizer0.nval, 0.01);
      assertEquals((-4), streamTokenizer0.ttype);
      
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      assertEquals(1, streamTokenizer0.lineno());
      assertEquals("Token[' '], line 1", streamTokenizer0.toString());
      assertEquals(1, jSTerm0.size());
      assertEquals(10, jSTerm0.capacity());
      assertFalse(jSTerm0.isEmpty());
      assertFalse(jSTerm0.isVariable());
      assertFalse(jSTerm0.isEval());
      assertTrue(jSTerm0.isConstant());
      assertEquals("[jFxA%Rdj8%]", jSTerm0.toString());
      assertFalse(jSTerm0.isFunction());
      assertNotNull(jSTerm0);
      assertEquals(0.0, streamTokenizer0.nval, 0.01);
      assertEquals(32, streamTokenizer0.ttype);
      
      JSTerm jSTerm1 = jSSubstitution0.instance(jSTerm0);
      assertEquals(0, jSSubstitution0.size());
      assertEquals(10, jSSubstitution0.capacity());
      assertEquals("[]", jSSubstitution0.toString());
      assertTrue(jSSubstitution0.isEmpty());
      assertFalse(jSSubstitution0.fail());
      assertEquals(1, streamTokenizer0.lineno());
      assertEquals("Token[' '], line 1", streamTokenizer0.toString());
      assertEquals(1, jSTerm0.size());
      assertEquals(10, jSTerm0.capacity());
      assertFalse(jSTerm0.isEmpty());
      assertFalse(jSTerm0.isVariable());
      assertFalse(jSTerm0.isEval());
      assertTrue(jSTerm0.isConstant());
      assertEquals("[jFxA%Rdj8%]", jSTerm0.toString());
      assertFalse(jSTerm0.isFunction());
      assertTrue(jSTerm1.isConstant());
      assertFalse(jSTerm1.isVariable());
      assertFalse(jSTerm1.isFunction());
      assertEquals(10, jSTerm1.capacity());
      assertFalse(jSTerm1.isEval());
      assertFalse(jSTerm1.isEmpty());
      assertEquals(1, jSTerm1.size());
      assertEquals("[jFxA%Rdj8%]", jSTerm1.toString());
      assertSame(jSTerm0, jSTerm1);
      assertSame(jSTerm1, jSTerm0);
      assertNotNull(jSTerm1);
      assertEquals(0.0, streamTokenizer0.nval, 0.01);
      assertEquals(32, streamTokenizer0.ttype);
      
      JSTerm jSTerm2 = new JSTerm(streamTokenizer0);
      assertEquals(1, streamTokenizer0.lineno());
      assertEquals("Token[' '], line 1", streamTokenizer0.toString());
      assertFalse(jSTerm2.isVariable());
      assertEquals(10, jSTerm2.capacity());
      assertFalse(jSTerm2.isFunction());
      assertTrue(jSTerm2.isConstant());
      assertEquals("[jSYG>]", jSTerm2.toString());
      assertFalse(jSTerm2.isEval());
      assertFalse(jSTerm2.isEmpty());
      assertEquals(1, jSTerm2.size());
      assertNotNull(jSTerm2);
      assertFalse(jSTerm2.equals((Object)jSTerm1));
      assertFalse(jSTerm2.equals((Object)jSTerm0));
      assertEquals(0.0, streamTokenizer0.nval, 0.01);
      assertEquals(32, streamTokenizer0.ttype);
      
      boolean boolean0 = jSTerm0.add((Object) jSTerm2);
      assertEquals(1, streamTokenizer0.lineno());
      assertEquals("Token[' '], line 1", streamTokenizer0.toString());
      assertEquals(10, jSTerm0.capacity());
      assertEquals(2, jSTerm0.size());
      assertFalse(jSTerm0.isEmpty());
      assertFalse(jSTerm0.isVariable());
      assertFalse(jSTerm0.isEval());
      assertTrue(jSTerm0.isConstant());
      assertEquals("[jFxA%Rdj8%, [jSYG>]]", jSTerm0.toString());
      assertFalse(jSTerm0.isFunction());
      assertFalse(jSTerm2.isVariable());
      assertEquals(10, jSTerm2.capacity());
      assertFalse(jSTerm2.isFunction());
      assertTrue(jSTerm2.isConstant());
      assertEquals("[jSYG>]", jSTerm2.toString());
      assertFalse(jSTerm2.isEval());
      assertFalse(jSTerm2.isEmpty());
      assertEquals(1, jSTerm2.size());
      assertTrue(boolean0);
      assertSame(jSTerm0, jSTerm1);
      assertNotSame(jSTerm0, jSTerm2);
      assertNotSame(jSTerm2, jSTerm1);
      assertNotSame(jSTerm2, jSTerm0);
      assertFalse(jSTerm0.equals((Object)jSTerm2));
      assertFalse(jSTerm2.equals((Object)jSTerm1));
      assertFalse(jSTerm2.equals((Object)jSTerm0));
      assertEquals(0.0, streamTokenizer0.nval, 0.01);
      assertEquals(32, streamTokenizer0.ttype);
      
      jSTerm0.makeEval(true);
      assertEquals(1, streamTokenizer0.lineno());
      assertEquals("Token[' '], line 1", streamTokenizer0.toString());
      assertEquals(10, jSTerm0.capacity());
      assertEquals(2, jSTerm0.size());
      assertFalse(jSTerm0.isEmpty());
      assertFalse(jSTerm0.isVariable());
      assertTrue(jSTerm0.isConstant());
      assertEquals("[jFxA%Rdj8%, [jSYG>]]", jSTerm0.toString());
      assertTrue(jSTerm0.isEval());
      assertFalse(jSTerm0.isFunction());
      assertSame(jSTerm0, jSTerm1);
      assertNotSame(jSTerm0, jSTerm2);
      assertFalse(jSTerm0.equals((Object)jSTerm2));
      assertEquals(0.0, streamTokenizer0.nval, 0.01);
      assertEquals(32, streamTokenizer0.ttype);
      
      jSTerm0.makeFunction();
      assertEquals(1, streamTokenizer0.lineno());
      assertEquals("Token[' '], line 1", streamTokenizer0.toString());
      assertFalse(jSTerm0.isConstant());
      assertEquals(10, jSTerm0.capacity());
      assertEquals(2, jSTerm0.size());
      assertFalse(jSTerm0.isEmpty());
      assertTrue(jSTerm0.isFunction());
      assertFalse(jSTerm0.isVariable());
      assertEquals("[jFxA%Rdj8%, [jSYG>]]", jSTerm0.toString());
      assertTrue(jSTerm0.isEval());
      assertSame(jSTerm0, jSTerm1);
      assertNotSame(jSTerm0, jSTerm2);
      assertFalse(jSTerm0.equals((Object)jSTerm2));
      assertEquals(0.0, streamTokenizer0.nval, 0.01);
      assertEquals(32, streamTokenizer0.ttype);
      
      boolean boolean1 = jSTerm1.equals(jSTerm1);
      assertEquals(0, jSSubstitution0.size());
      assertEquals(10, jSSubstitution0.capacity());
      assertEquals("[]", jSSubstitution0.toString());
      assertTrue(jSSubstitution0.isEmpty());
      assertFalse(jSSubstitution0.fail());
      assertEquals(1, streamTokenizer0.lineno());
      assertEquals("Token[' '], line 1", streamTokenizer0.toString());
      assertFalse(jSTerm0.isConstant());
      assertEquals(10, jSTerm0.capacity());
      assertEquals(2, jSTerm0.size());
      assertFalse(jSTerm0.isEmpty());
      assertTrue(jSTerm0.isFunction());
      assertFalse(jSTerm0.isVariable());
      assertEquals("[jFxA%Rdj8%, [jSYG>]]", jSTerm0.toString());
      assertTrue(jSTerm0.isEval());
      assertFalse(jSTerm1.isVariable());
      assertEquals(2, jSTerm1.size());
      assertEquals(10, jSTerm1.capacity());
      assertFalse(jSTerm1.isEmpty());
      assertFalse(jSTerm1.isConstant());
      assertTrue(jSTerm1.isFunction());
      assertEquals("[jFxA%Rdj8%, [jSYG>]]", jSTerm1.toString());
      assertTrue(jSTerm1.isEval());
      assertTrue(boolean1);
      assertSame(jSTerm0, jSTerm1);
      assertNotSame(jSTerm0, jSTerm2);
      assertNotSame(jSTerm1, jSTerm2);
      assertSame(jSTerm1, jSTerm0);
      assertFalse(jSTerm0.equals((Object)jSTerm2));
      assertFalse(jSTerm1.equals((Object)jSTerm2));
      assertTrue(boolean1 == boolean0);
      assertEquals(0.0, streamTokenizer0.nval, 0.01);
      assertEquals(32, streamTokenizer0.ttype);
      
      JSSubstitution jSSubstitution1 = jSTerm0.matches(jSTerm1, jSSubstitution0);
      assertEquals(0, jSSubstitution0.size());
      assertEquals(10, jSSubstitution0.capacity());
      assertEquals("[]", jSSubstitution0.toString());
      assertTrue(jSSubstitution0.isEmpty());
      assertFalse(jSSubstitution0.fail());
      assertEquals(1, streamTokenizer0.lineno());
      assertEquals("Token[' '], line 1", streamTokenizer0.toString());
      assertFalse(jSTerm0.isConstant());
      assertEquals(10, jSTerm0.capacity());
      assertEquals(2, jSTerm0.size());
      assertFalse(jSTerm0.isEmpty());
      assertTrue(jSTerm0.isFunction());
      assertFalse(jSTerm0.isVariable());
      assertEquals("[jFxA%Rdj8%, [jSYG>]]", jSTerm0.toString());
      assertTrue(jSTerm0.isEval());
      assertFalse(jSTerm1.isVariable());
      assertEquals(2, jSTerm1.size());
      assertEquals(10, jSTerm1.capacity());
      assertFalse(jSTerm1.isEmpty());
      assertFalse(jSTerm1.isConstant());
      assertTrue(jSTerm1.isFunction());
      assertEquals("[jFxA%Rdj8%, [jSYG>]]", jSTerm1.toString());
      assertTrue(jSTerm1.isEval());
      assertFalse(jSSubstitution1.fail());
      assertTrue(jSSubstitution1.isEmpty());
      assertEquals(0, jSSubstitution1.size());
      assertEquals(10, jSSubstitution1.capacity());
      assertEquals("[]", jSSubstitution1.toString());
      assertNotSame(jSSubstitution0, jSSubstitution1);
      assertSame(jSTerm0, jSTerm1);
      assertNotSame(jSTerm0, jSTerm2);
      assertNotSame(jSTerm1, jSTerm2);
      assertSame(jSTerm1, jSTerm0);
      assertNotSame(jSSubstitution1, jSSubstitution0);
      assertNotNull(jSSubstitution1);
      assertFalse(jSTerm0.equals((Object)jSTerm2));
      assertFalse(jSTerm1.equals((Object)jSTerm2));
      assertTrue(jSSubstitution1.equals((Object)jSSubstitution0));
      assertEquals(0.0, streamTokenizer0.nval, 0.01);
      assertEquals(32, streamTokenizer0.ttype);
      
      JSSubstitution jSSubstitution2 = jSTerm0.matches(jSTerm1);
      assertEquals(0, jSSubstitution0.size());
      assertEquals(10, jSSubstitution0.capacity());
      assertEquals("[]", jSSubstitution0.toString());
      assertTrue(jSSubstitution0.isEmpty());
      assertFalse(jSSubstitution0.fail());
      assertEquals(1, streamTokenizer0.lineno());
      assertEquals("Token[' '], line 1", streamTokenizer0.toString());
      assertFalse(jSTerm0.isConstant());
      assertEquals(10, jSTerm0.capacity());
      assertEquals(2, jSTerm0.size());
      assertFalse(jSTerm0.isEmpty());
      assertTrue(jSTerm0.isFunction());
      assertFalse(jSTerm0.isVariable());
      assertEquals("[jFxA%Rdj8%, [jSYG>]]", jSTerm0.toString());
      assertTrue(jSTerm0.isEval());
      assertFalse(jSTerm1.isVariable());
      assertEquals(2, jSTerm1.size());
      assertEquals(10, jSTerm1.capacity());
      assertFalse(jSTerm1.isEmpty());
      assertFalse(jSTerm1.isConstant());
      assertTrue(jSTerm1.isFunction());
      assertEquals("[jFxA%Rdj8%, [jSYG>]]", jSTerm1.toString());
      assertTrue(jSTerm1.isEval());
      assertEquals("[]", jSSubstitution2.toString());
      assertTrue(jSSubstitution2.isEmpty());
      assertEquals(10, jSSubstitution2.capacity());
      assertFalse(jSSubstitution2.fail());
      assertEquals(0, jSSubstitution2.size());
      assertNotSame(jSSubstitution0, jSSubstitution1);
      assertNotSame(jSSubstitution0, jSSubstitution2);
      assertSame(jSTerm0, jSTerm1);
      assertNotSame(jSTerm0, jSTerm2);
      assertNotSame(jSTerm1, jSTerm2);
      assertSame(jSTerm1, jSTerm0);
      assertNotSame(jSSubstitution2, jSSubstitution1);
      assertNotSame(jSSubstitution2, jSSubstitution0);
      assertNotNull(jSSubstitution2);
      assertTrue(jSSubstitution0.equals((Object)jSSubstitution1));
      assertFalse(jSTerm0.equals((Object)jSTerm2));
      assertFalse(jSTerm1.equals((Object)jSTerm2));
      assertTrue(jSSubstitution2.equals((Object)jSSubstitution0));
      assertTrue(jSSubstitution2.equals((Object)jSSubstitution1));
      assertEquals(0.0, streamTokenizer0.nval, 0.01);
      assertEquals(32, streamTokenizer0.ttype);
      
      System.setCurrentTimeMillis(1648L);
      JSTerm jSTerm3 = jSTerm1.standardizerTerm();
      assertEquals(0, jSSubstitution0.size());
      assertEquals(10, jSSubstitution0.capacity());
      assertEquals("[]", jSSubstitution0.toString());
      assertTrue(jSSubstitution0.isEmpty());
      assertFalse(jSSubstitution0.fail());
      assertEquals(1, streamTokenizer0.lineno());
      assertEquals("Token[' '], line 1", streamTokenizer0.toString());
      assertFalse(jSTerm0.isConstant());
      assertEquals(10, jSTerm0.capacity());
      assertEquals(2, jSTerm0.size());
      assertFalse(jSTerm0.isEmpty());
      assertTrue(jSTerm0.isFunction());
      assertFalse(jSTerm0.isVariable());
      assertEquals("[jFxA%Rdj8%, [jSYG>]]", jSTerm0.toString());
      assertTrue(jSTerm0.isEval());
      assertFalse(jSTerm1.isVariable());
      assertEquals(2, jSTerm1.size());
      assertEquals(10, jSTerm1.capacity());
      assertFalse(jSTerm1.isEmpty());
      assertFalse(jSTerm1.isConstant());
      assertTrue(jSTerm1.isFunction());
      assertEquals("[jFxA%Rdj8%, [jSYG>]]", jSTerm1.toString());
      assertTrue(jSTerm1.isEval());
      assertFalse(jSTerm3.isVariable());
      assertEquals(2, jSTerm3.size());
      assertEquals(10, jSTerm3.capacity());
      assertFalse(jSTerm3.isEmpty());
      assertTrue(jSTerm3.isFunction());
      assertTrue(jSTerm3.isEval());
      assertFalse(jSTerm3.isConstant());
      assertEquals("[jFxA%Rdj8%, [jSYG>]]", jSTerm3.toString());
      assertNotSame(jSSubstitution0, jSSubstitution1);
      assertNotSame(jSSubstitution0, jSSubstitution2);
      assertSame(jSTerm0, jSTerm1);
      assertNotSame(jSTerm0, jSTerm2);
      assertNotSame(jSTerm0, jSTerm3);
      assertNotSame(jSTerm1, jSTerm2);
      assertNotSame(jSTerm1, jSTerm3);
      assertSame(jSTerm1, jSTerm0);
      assertNotSame(jSTerm3, jSTerm2);
      assertNotSame(jSTerm3, jSTerm1);
      assertNotSame(jSTerm3, jSTerm0);
      assertNotNull(jSTerm3);
      assertTrue(jSSubstitution0.equals((Object)jSSubstitution2));
      assertTrue(jSSubstitution0.equals((Object)jSSubstitution1));
      assertFalse(jSTerm0.equals((Object)jSTerm2));
      assertFalse(jSTerm1.equals((Object)jSTerm2));
      assertTrue(jSTerm3.equals((Object)jSTerm1));
      assertFalse(jSTerm3.equals((Object)jSTerm2));
      assertTrue(jSTerm3.equals((Object)jSTerm0));
      assertEquals(0.0, streamTokenizer0.nval, 0.01);
      assertEquals(32, streamTokenizer0.ttype);
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      StringReader stringReader0 = new StringReader(" Expected (");
      assertNotNull(stringReader0);
      
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      assertEquals(1, streamTokenizer0.lineno());
      assertEquals("Token[NOTHING], line 1", streamTokenizer0.toString());
      assertNotNull(streamTokenizer0);
      assertEquals(0.0, streamTokenizer0.nval, 0.01);
      assertEquals((-4), streamTokenizer0.ttype);
      
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      assertEquals(1, streamTokenizer0.lineno());
      assertEquals("Token[' '], line 1", streamTokenizer0.toString());
      assertFalse(jSTerm0.isVariable());
      assertEquals("[Expected]", jSTerm0.toString());
      assertFalse(jSTerm0.isFunction());
      assertFalse(jSTerm0.isEval());
      assertEquals(1, jSTerm0.size());
      assertEquals(10, jSTerm0.capacity());
      assertFalse(jSTerm0.isEmpty());
      assertTrue(jSTerm0.isConstant());
      assertNotNull(jSTerm0);
      assertEquals(0.0, streamTokenizer0.nval, 0.01);
      assertEquals(32, streamTokenizer0.ttype);
      
      JSTerm jSTerm1 = (JSTerm)jSTerm0.clone();
      assertEquals(1, streamTokenizer0.lineno());
      assertEquals("Token[' '], line 1", streamTokenizer0.toString());
      assertFalse(jSTerm0.isVariable());
      assertEquals("[Expected]", jSTerm0.toString());
      assertFalse(jSTerm0.isFunction());
      assertFalse(jSTerm0.isEval());
      assertEquals(1, jSTerm0.size());
      assertEquals(10, jSTerm0.capacity());
      assertFalse(jSTerm0.isEmpty());
      assertTrue(jSTerm0.isConstant());
      assertEquals(1, jSTerm1.capacity());
      assertTrue(jSTerm1.isConstant());
      assertEquals("[Expected]", jSTerm1.toString());
      assertFalse(jSTerm1.isFunction());
      assertFalse(jSTerm1.isEval());
      assertEquals(1, jSTerm1.size());
      assertFalse(jSTerm1.isEmpty());
      assertFalse(jSTerm1.isVariable());
      assertNotSame(jSTerm0, jSTerm1);
      assertNotSame(jSTerm1, jSTerm0);
      assertNotNull(jSTerm1);
      assertTrue(jSTerm1.equals((Object)jSTerm0));
      assertEquals(0.0, streamTokenizer0.nval, 0.01);
      assertEquals(32, streamTokenizer0.ttype);
      
      boolean boolean0 = jSTerm0.add((Object) jSTerm1);
      assertEquals(1, streamTokenizer0.lineno());
      assertEquals("Token[' '], line 1", streamTokenizer0.toString());
      assertFalse(jSTerm0.isVariable());
      assertEquals(2, jSTerm0.size());
      assertFalse(jSTerm0.isFunction());
      assertFalse(jSTerm0.isEval());
      assertEquals(10, jSTerm0.capacity());
      assertFalse(jSTerm0.isEmpty());
      assertTrue(jSTerm0.isConstant());
      assertEquals("[Expected, [Expected]]", jSTerm0.toString());
      assertEquals(1, jSTerm1.capacity());
      assertTrue(jSTerm1.isConstant());
      assertEquals("[Expected]", jSTerm1.toString());
      assertFalse(jSTerm1.isFunction());
      assertFalse(jSTerm1.isEval());
      assertEquals(1, jSTerm1.size());
      assertFalse(jSTerm1.isEmpty());
      assertFalse(jSTerm1.isVariable());
      assertTrue(boolean0);
      assertNotSame(jSTerm0, jSTerm1);
      assertNotSame(jSTerm1, jSTerm0);
      assertFalse(jSTerm0.equals((Object)jSTerm1));
      assertFalse(jSTerm1.equals((Object)jSTerm0));
      assertEquals(0.0, streamTokenizer0.nval, 0.01);
      assertEquals(32, streamTokenizer0.ttype);
      
      jSTerm0.makeFunction();
      assertEquals(1, streamTokenizer0.lineno());
      assertEquals("Token[' '], line 1", streamTokenizer0.toString());
      assertFalse(jSTerm0.isVariable());
      assertEquals(2, jSTerm0.size());
      assertFalse(jSTerm0.isEval());
      assertFalse(jSTerm0.isConstant());
      assertEquals(10, jSTerm0.capacity());
      assertFalse(jSTerm0.isEmpty());
      assertTrue(jSTerm0.isFunction());
      assertEquals("[Expected, [Expected]]", jSTerm0.toString());
      assertNotSame(jSTerm0, jSTerm1);
      assertFalse(jSTerm0.equals((Object)jSTerm1));
      assertEquals(0.0, streamTokenizer0.nval, 0.01);
      assertEquals(32, streamTokenizer0.ttype);
      
      jSTerm0.makeEval(true);
      assertEquals(1, streamTokenizer0.lineno());
      assertEquals("Token[' '], line 1", streamTokenizer0.toString());
      assertFalse(jSTerm0.isVariable());
      assertEquals(2, jSTerm0.size());
      assertFalse(jSTerm0.isConstant());
      assertEquals(10, jSTerm0.capacity());
      assertTrue(jSTerm0.isEval());
      assertFalse(jSTerm0.isEmpty());
      assertTrue(jSTerm0.isFunction());
      assertEquals("[Expected, [Expected]]", jSTerm0.toString());
      assertNotSame(jSTerm0, jSTerm1);
      assertFalse(jSTerm0.equals((Object)jSTerm1));
      assertEquals(0.0, streamTokenizer0.nval, 0.01);
      assertEquals(32, streamTokenizer0.ttype);
      
      boolean boolean1 = jSTerm0.isGround();
      assertEquals(1, streamTokenizer0.lineno());
      assertEquals("Token[' '], line 1", streamTokenizer0.toString());
      assertFalse(jSTerm0.isVariable());
      assertEquals(2, jSTerm0.size());
      assertFalse(jSTerm0.isConstant());
      assertEquals(10, jSTerm0.capacity());
      assertTrue(jSTerm0.isEval());
      assertFalse(jSTerm0.isEmpty());
      assertTrue(jSTerm0.isFunction());
      assertEquals("[Expected, [Expected]]", jSTerm0.toString());
      assertTrue(boolean1);
      assertNotSame(jSTerm0, jSTerm1);
      assertFalse(jSTerm0.equals((Object)jSTerm1));
      assertTrue(boolean1 == boolean0);
      assertEquals(0.0, streamTokenizer0.nval, 0.01);
      assertEquals(32, streamTokenizer0.ttype);
      
      JSTerm jSTerm2 = new JSTerm();
      assertEquals(0, jSTerm2.size());
      assertFalse(jSTerm2.isConstant());
      assertEquals(10, jSTerm2.capacity());
      assertFalse(jSTerm2.isVariable());
      assertFalse(jSTerm2.isEval());
      assertTrue(jSTerm2.isEmpty());
      assertEquals("[]", jSTerm2.toString());
      assertFalse(jSTerm2.isFunction());
      assertNotNull(jSTerm2);
      assertFalse(jSTerm2.equals((Object)jSTerm0));
      assertFalse(jSTerm2.equals((Object)jSTerm1));
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      assertFalse(jSSubstitution0.fail());
      assertTrue(jSSubstitution0.isEmpty());
      assertEquals(0, jSSubstitution0.size());
      assertEquals(10, jSSubstitution0.capacity());
      assertEquals("[]", jSSubstitution0.toString());
      assertNotNull(jSSubstitution0);
      
      StringReader stringReader0 = new StringReader("jFxA%Rdj8% jSYG> MR");
      assertNotNull(stringReader0);
      
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      assertEquals("Token[NOTHING], line 1", streamTokenizer0.toString());
      assertEquals(1, streamTokenizer0.lineno());
      assertNotNull(streamTokenizer0);
      assertEquals(0.0, streamTokenizer0.nval, 0.01);
      assertEquals((-4), streamTokenizer0.ttype);
      
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      assertEquals(1, streamTokenizer0.lineno());
      assertEquals("Token[' '], line 1", streamTokenizer0.toString());
      assertFalse(jSTerm0.isEval());
      assertEquals(10, jSTerm0.capacity());
      assertFalse(jSTerm0.isFunction());
      assertEquals(1, jSTerm0.size());
      assertFalse(jSTerm0.isEmpty());
      assertEquals("[jFxA%Rdj8%]", jSTerm0.toString());
      assertFalse(jSTerm0.isVariable());
      assertTrue(jSTerm0.isConstant());
      assertNotNull(jSTerm0);
      assertEquals(0.0, streamTokenizer0.nval, 0.01);
      assertEquals(32, streamTokenizer0.ttype);
      
      JSTerm jSTerm1 = jSSubstitution0.instance(jSTerm0);
      assertFalse(jSSubstitution0.fail());
      assertTrue(jSSubstitution0.isEmpty());
      assertEquals(0, jSSubstitution0.size());
      assertEquals(10, jSSubstitution0.capacity());
      assertEquals("[]", jSSubstitution0.toString());
      assertEquals(1, streamTokenizer0.lineno());
      assertEquals("Token[' '], line 1", streamTokenizer0.toString());
      assertFalse(jSTerm0.isEval());
      assertEquals(10, jSTerm0.capacity());
      assertFalse(jSTerm0.isFunction());
      assertEquals(1, jSTerm0.size());
      assertFalse(jSTerm0.isEmpty());
      assertEquals("[jFxA%Rdj8%]", jSTerm0.toString());
      assertFalse(jSTerm0.isVariable());
      assertTrue(jSTerm0.isConstant());
      assertTrue(jSTerm1.isConstant());
      assertFalse(jSTerm1.isEmpty());
      assertFalse(jSTerm1.isEval());
      assertEquals(1, jSTerm1.size());
      assertFalse(jSTerm1.isFunction());
      assertFalse(jSTerm1.isVariable());
      assertEquals(10, jSTerm1.capacity());
      assertEquals("[jFxA%Rdj8%]", jSTerm1.toString());
      assertSame(jSTerm0, jSTerm1);
      assertSame(jSTerm1, jSTerm0);
      assertNotNull(jSTerm1);
      assertEquals(0.0, streamTokenizer0.nval, 0.01);
      assertEquals(32, streamTokenizer0.ttype);
      
      JSTerm jSTerm2 = (JSTerm)jSTerm1.clone();
      assertFalse(jSSubstitution0.fail());
      assertTrue(jSSubstitution0.isEmpty());
      assertEquals(0, jSSubstitution0.size());
      assertEquals(10, jSSubstitution0.capacity());
      assertEquals("[]", jSSubstitution0.toString());
      assertEquals(1, streamTokenizer0.lineno());
      assertEquals("Token[' '], line 1", streamTokenizer0.toString());
      assertFalse(jSTerm0.isEval());
      assertEquals(10, jSTerm0.capacity());
      assertFalse(jSTerm0.isFunction());
      assertEquals(1, jSTerm0.size());
      assertFalse(jSTerm0.isEmpty());
      assertEquals("[jFxA%Rdj8%]", jSTerm0.toString());
      assertFalse(jSTerm0.isVariable());
      assertTrue(jSTerm0.isConstant());
      assertTrue(jSTerm1.isConstant());
      assertFalse(jSTerm1.isEmpty());
      assertFalse(jSTerm1.isEval());
      assertEquals(1, jSTerm1.size());
      assertFalse(jSTerm1.isFunction());
      assertFalse(jSTerm1.isVariable());
      assertEquals(10, jSTerm1.capacity());
      assertEquals("[jFxA%Rdj8%]", jSTerm1.toString());
      assertEquals(1, jSTerm2.size());
      assertFalse(jSTerm2.isEval());
      assertFalse(jSTerm2.isEmpty());
      assertFalse(jSTerm2.isFunction());
      assertTrue(jSTerm2.isConstant());
      assertEquals("[jFxA%Rdj8%]", jSTerm2.toString());
      assertFalse(jSTerm2.isVariable());
      assertEquals(1, jSTerm2.capacity());
      assertSame(jSTerm0, jSTerm1);
      assertNotSame(jSTerm0, jSTerm2);
      assertNotSame(jSTerm1, jSTerm2);
      assertSame(jSTerm1, jSTerm0);
      assertNotSame(jSTerm2, jSTerm1);
      assertNotSame(jSTerm2, jSTerm0);
      assertNotNull(jSTerm2);
      assertTrue(jSTerm2.equals((Object)jSTerm0));
      assertTrue(jSTerm2.equals((Object)jSTerm1));
      assertEquals(0.0, streamTokenizer0.nval, 0.01);
      assertEquals(32, streamTokenizer0.ttype);
      
      boolean boolean0 = jSTerm0.add((Object) jSTerm2);
      assertFalse(jSSubstitution0.fail());
      assertTrue(jSSubstitution0.isEmpty());
      assertEquals(0, jSSubstitution0.size());
      assertEquals(10, jSSubstitution0.capacity());
      assertEquals("[]", jSSubstitution0.toString());
      assertEquals(1, streamTokenizer0.lineno());
      assertEquals("Token[' '], line 1", streamTokenizer0.toString());
      assertFalse(jSTerm0.isEval());
      assertEquals(10, jSTerm0.capacity());
      assertEquals(2, jSTerm0.size());
      assertFalse(jSTerm0.isFunction());
      assertFalse(jSTerm0.isEmpty());
      assertEquals("[jFxA%Rdj8%, [jFxA%Rdj8%]]", jSTerm0.toString());
      assertFalse(jSTerm0.isVariable());
      assertTrue(jSTerm0.isConstant());
      assertTrue(jSTerm1.isConstant());
      assertFalse(jSTerm1.isEmpty());
      assertFalse(jSTerm1.isEval());
      assertEquals(2, jSTerm1.size());
      assertFalse(jSTerm1.isFunction());
      assertFalse(jSTerm1.isVariable());
      assertEquals(10, jSTerm1.capacity());
      assertEquals("[jFxA%Rdj8%, [jFxA%Rdj8%]]", jSTerm1.toString());
      assertEquals(1, jSTerm2.size());
      assertFalse(jSTerm2.isEval());
      assertFalse(jSTerm2.isEmpty());
      assertFalse(jSTerm2.isFunction());
      assertTrue(jSTerm2.isConstant());
      assertEquals("[jFxA%Rdj8%]", jSTerm2.toString());
      assertFalse(jSTerm2.isVariable());
      assertEquals(1, jSTerm2.capacity());
      assertTrue(boolean0);
      assertSame(jSTerm0, jSTerm1);
      assertNotSame(jSTerm0, jSTerm2);
      assertNotSame(jSTerm1, jSTerm2);
      assertSame(jSTerm1, jSTerm0);
      assertNotSame(jSTerm2, jSTerm1);
      assertNotSame(jSTerm2, jSTerm0);
      assertFalse(jSTerm0.equals((Object)jSTerm2));
      assertFalse(jSTerm1.equals((Object)jSTerm2));
      assertFalse(jSTerm2.equals((Object)jSTerm1));
      assertFalse(jSTerm2.equals((Object)jSTerm0));
      assertEquals(0.0, streamTokenizer0.nval, 0.01);
      assertEquals(32, streamTokenizer0.ttype);
      
      jSTerm0.makeEval(true);
      assertEquals(1, streamTokenizer0.lineno());
      assertEquals("Token[' '], line 1", streamTokenizer0.toString());
      assertEquals(10, jSTerm0.capacity());
      assertEquals(2, jSTerm0.size());
      assertFalse(jSTerm0.isFunction());
      assertFalse(jSTerm0.isEmpty());
      assertEquals("[jFxA%Rdj8%, [jFxA%Rdj8%]]", jSTerm0.toString());
      assertTrue(jSTerm0.isEval());
      assertFalse(jSTerm0.isVariable());
      assertTrue(jSTerm0.isConstant());
      assertSame(jSTerm0, jSTerm1);
      assertNotSame(jSTerm0, jSTerm2);
      assertFalse(jSTerm0.equals((Object)jSTerm2));
      assertEquals(0.0, streamTokenizer0.nval, 0.01);
      assertEquals(32, streamTokenizer0.ttype);
      
      jSTerm0.makeFunction();
      assertEquals(1, streamTokenizer0.lineno());
      assertEquals("Token[' '], line 1", streamTokenizer0.toString());
      assertFalse(jSTerm0.isConstant());
      assertTrue(jSTerm0.isFunction());
      assertEquals(10, jSTerm0.capacity());
      assertEquals(2, jSTerm0.size());
      assertFalse(jSTerm0.isEmpty());
      assertEquals("[jFxA%Rdj8%, [jFxA%Rdj8%]]", jSTerm0.toString());
      assertTrue(jSTerm0.isEval());
      assertFalse(jSTerm0.isVariable());
      assertSame(jSTerm0, jSTerm1);
      assertNotSame(jSTerm0, jSTerm2);
      assertFalse(jSTerm0.equals((Object)jSTerm2));
      assertEquals(0.0, streamTokenizer0.nval, 0.01);
      assertEquals(32, streamTokenizer0.ttype);
      
      boolean boolean1 = jSTerm0.isGround();
      assertEquals(1, streamTokenizer0.lineno());
      assertEquals("Token[' '], line 1", streamTokenizer0.toString());
      assertFalse(jSTerm0.isConstant());
      assertTrue(jSTerm0.isFunction());
      assertEquals(10, jSTerm0.capacity());
      assertEquals(2, jSTerm0.size());
      assertFalse(jSTerm0.isEmpty());
      assertEquals("[jFxA%Rdj8%, [jFxA%Rdj8%]]", jSTerm0.toString());
      assertTrue(jSTerm0.isEval());
      assertFalse(jSTerm0.isVariable());
      assertTrue(boolean1);
      assertSame(jSTerm0, jSTerm1);
      assertNotSame(jSTerm0, jSTerm2);
      assertFalse(jSTerm0.equals((Object)jSTerm2));
      assertTrue(boolean1 == boolean0);
      assertEquals(0.0, streamTokenizer0.nval, 0.01);
      assertEquals(32, streamTokenizer0.ttype);
      
      JSSubstitution jSSubstitution1 = jSTerm0.matches(jSTerm1, jSSubstitution0);
      assertFalse(jSSubstitution0.fail());
      assertTrue(jSSubstitution0.isEmpty());
      assertEquals(0, jSSubstitution0.size());
      assertEquals(10, jSSubstitution0.capacity());
      assertEquals("[]", jSSubstitution0.toString());
      assertEquals(1, streamTokenizer0.lineno());
      assertEquals("Token[' '], line 1", streamTokenizer0.toString());
      assertFalse(jSTerm0.isConstant());
      assertTrue(jSTerm0.isFunction());
      assertEquals(10, jSTerm0.capacity());
      assertEquals(2, jSTerm0.size());
      assertFalse(jSTerm0.isEmpty());
      assertEquals("[jFxA%Rdj8%, [jFxA%Rdj8%]]", jSTerm0.toString());
      assertTrue(jSTerm0.isEval());
      assertFalse(jSTerm0.isVariable());
      assertFalse(jSTerm1.isEmpty());
      assertFalse(jSTerm1.isConstant());
      assertTrue(jSTerm1.isFunction());
      assertEquals(2, jSTerm1.size());
      assertFalse(jSTerm1.isVariable());
      assertEquals(10, jSTerm1.capacity());
      assertEquals("[jFxA%Rdj8%, [jFxA%Rdj8%]]", jSTerm1.toString());
      assertTrue(jSTerm1.isEval());
      assertEquals("[]", jSSubstitution1.toString());
      assertTrue(jSSubstitution1.isEmpty());
      assertFalse(jSSubstitution1.fail());
      assertEquals(10, jSSubstitution1.capacity());
      assertEquals(0, jSSubstitution1.size());
      assertNotSame(jSSubstitution0, jSSubstitution1);
      assertSame(jSTerm0, jSTerm1);
      assertNotSame(jSTerm0, jSTerm2);
      assertNotSame(jSTerm1, jSTerm2);
      assertSame(jSTerm1, jSTerm0);
      assertNotSame(jSSubstitution1, jSSubstitution0);
      assertNotNull(jSSubstitution1);
      assertFalse(jSTerm0.equals((Object)jSTerm2));
      assertFalse(jSTerm1.equals((Object)jSTerm2));
      assertTrue(jSSubstitution1.equals((Object)jSSubstitution0));
      assertEquals(0.0, streamTokenizer0.nval, 0.01);
      assertEquals(32, streamTokenizer0.ttype);
      
      StringBuffer stringBuffer0 = jSTerm0.toStr();
      assertEquals(1, streamTokenizer0.lineno());
      assertEquals("Token[' '], line 1", streamTokenizer0.toString());
      assertFalse(jSTerm0.isConstant());
      assertTrue(jSTerm0.isFunction());
      assertEquals(10, jSTerm0.capacity());
      assertEquals(2, jSTerm0.size());
      assertFalse(jSTerm0.isEmpty());
      assertEquals("[jFxA%Rdj8%, [jFxA%Rdj8%]]", jSTerm0.toString());
      assertTrue(jSTerm0.isEval());
      assertFalse(jSTerm0.isVariable());
      assertEquals(24, stringBuffer0.length());
      assertEquals("(jFxA%Rdj8% jFxA%Rdj8% )", stringBuffer0.toString());
      assertSame(jSTerm0, jSTerm1);
      assertNotSame(jSTerm0, jSTerm2);
      assertNotNull(stringBuffer0);
      assertFalse(jSTerm0.equals((Object)jSTerm2));
      assertEquals(0.0, streamTokenizer0.nval, 0.01);
      assertEquals(32, streamTokenizer0.ttype);
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      assertFalse(jSTerm0.isConstant());
      assertEquals(10, jSTerm0.capacity());
      assertFalse(jSTerm0.isFunction());
      assertTrue(jSTerm0.isEmpty());
      assertEquals("[]", jSTerm0.toString());
      assertFalse(jSTerm0.isVariable());
      assertFalse(jSTerm0.isEval());
      assertEquals(0, jSTerm0.size());
      assertNotNull(jSTerm0);
      
      int int0 = 1827;
      JSJshopVars.verticalL = 1827;
      JSTerm jSTerm1 = new JSTerm();
      assertTrue(jSTerm1.isEmpty());
      assertFalse(jSTerm1.isVariable());
      assertEquals(10, jSTerm1.capacity());
      assertEquals("[]", jSTerm1.toString());
      assertFalse(jSTerm1.isFunction());
      assertFalse(jSTerm1.isConstant());
      assertFalse(jSTerm1.isEval());
      assertEquals(0, jSTerm1.size());
      assertNotNull(jSTerm1);
      assertTrue(jSTerm1.equals((Object)jSTerm0));
      
      boolean boolean0 = jSTerm0.removeAll(jSTerm1);
      assertFalse(jSTerm0.isConstant());
      assertEquals(10, jSTerm0.capacity());
      assertFalse(jSTerm0.isFunction());
      assertTrue(jSTerm0.isEmpty());
      assertEquals("[]", jSTerm0.toString());
      assertFalse(jSTerm0.isVariable());
      assertFalse(jSTerm0.isEval());
      assertEquals(0, jSTerm0.size());
      assertTrue(jSTerm1.isEmpty());
      assertFalse(jSTerm1.isVariable());
      assertEquals(10, jSTerm1.capacity());
      assertEquals("[]", jSTerm1.toString());
      assertFalse(jSTerm1.isFunction());
      assertFalse(jSTerm1.isConstant());
      assertFalse(jSTerm1.isEval());
      assertEquals(0, jSTerm1.size());
      assertFalse(boolean0);
      assertNotSame(jSTerm0, jSTerm1);
      assertNotSame(jSTerm1, jSTerm0);
      assertTrue(jSTerm0.equals((Object)jSTerm1));
      assertTrue(jSTerm1.equals((Object)jSTerm0));
      
      JSJshopVars.apostrophe = 1827;
      JSJshopVars.percent = (-856);
      boolean boolean1 = jSTerm0.isVariable();
      assertFalse(jSTerm0.isConstant());
      assertEquals(10, jSTerm0.capacity());
      assertFalse(jSTerm0.isFunction());
      assertTrue(jSTerm0.isEmpty());
      assertEquals("[]", jSTerm0.toString());
      assertFalse(jSTerm0.isVariable());
      assertFalse(jSTerm0.isEval());
      assertEquals(0, jSTerm0.size());
      assertFalse(boolean1);
      assertNotSame(jSTerm0, jSTerm1);
      assertTrue(jSTerm0.equals((Object)jSTerm1));
      assertTrue(boolean1 == boolean0);
      
      // Undeclared exception!
      try { 
        jSTerm1.removeElementAt((-578));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Array index out of range: -578
         //
         verifyException("java.util.Vector", e);
      }
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      assertEquals(10, jSSubstitution0.capacity());
      assertEquals(0, jSSubstitution0.size());
      assertEquals("[]", jSSubstitution0.toString());
      assertFalse(jSSubstitution0.fail());
      assertTrue(jSSubstitution0.isEmpty());
      assertNotNull(jSSubstitution0);
      
      StringReader stringReader0 = new StringReader("jFxA%Rdj8% jSYG> MR");
      assertNotNull(stringReader0);
      
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      assertEquals(1, streamTokenizer0.lineno());
      assertEquals("Token[NOTHING], line 1", streamTokenizer0.toString());
      assertNotNull(streamTokenizer0);
      assertEquals((-4), streamTokenizer0.ttype);
      assertEquals(0.0, streamTokenizer0.nval, 0.01);
      
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      assertEquals(1, streamTokenizer0.lineno());
      assertEquals("Token[' '], line 1", streamTokenizer0.toString());
      assertTrue(jSTerm0.isConstant());
      assertFalse(jSTerm0.isEmpty());
      assertFalse(jSTerm0.isEval());
      assertEquals(1, jSTerm0.size());
      assertFalse(jSTerm0.isFunction());
      assertFalse(jSTerm0.isVariable());
      assertEquals(10, jSTerm0.capacity());
      assertEquals("[jFxA%Rdj8%]", jSTerm0.toString());
      assertNotNull(jSTerm0);
      assertEquals(32, streamTokenizer0.ttype);
      assertEquals(0.0, streamTokenizer0.nval, 0.01);
      
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      assertEquals(0, jSSubstitution1.size());
      assertTrue(jSSubstitution1.isEmpty());
      assertFalse(jSSubstitution1.fail());
      assertEquals(10, jSSubstitution1.capacity());
      assertEquals("[]", jSSubstitution1.toString());
      assertNotNull(jSSubstitution1);
      assertTrue(jSSubstitution1.equals((Object)jSSubstitution0));
      
      JSTerm jSTerm1 = jSSubstitution1.instance(jSTerm0);
      assertEquals(1, streamTokenizer0.lineno());
      assertEquals("Token[' '], line 1", streamTokenizer0.toString());
      assertTrue(jSTerm0.isConstant());
      assertFalse(jSTerm0.isEmpty());
      assertFalse(jSTerm0.isEval());
      assertEquals(1, jSTerm0.size());
      assertFalse(jSTerm0.isFunction());
      assertFalse(jSTerm0.isVariable());
      assertEquals(10, jSTerm0.capacity());
      assertEquals("[jFxA%Rdj8%]", jSTerm0.toString());
      assertEquals(0, jSSubstitution1.size());
      assertTrue(jSSubstitution1.isEmpty());
      assertFalse(jSSubstitution1.fail());
      assertEquals(10, jSSubstitution1.capacity());
      assertEquals("[]", jSSubstitution1.toString());
      assertFalse(jSTerm1.isEmpty());
      assertFalse(jSTerm1.isEval());
      assertTrue(jSTerm1.isConstant());
      assertFalse(jSTerm1.isVariable());
      assertEquals("[jFxA%Rdj8%]", jSTerm1.toString());
      assertEquals(1, jSTerm1.size());
      assertFalse(jSTerm1.isFunction());
      assertEquals(10, jSTerm1.capacity());
      assertSame(jSTerm0, jSTerm1);
      assertNotSame(jSSubstitution1, jSSubstitution0);
      assertSame(jSTerm1, jSTerm0);
      assertNotNull(jSTerm1);
      assertTrue(jSSubstitution1.equals((Object)jSSubstitution0));
      assertEquals(32, streamTokenizer0.ttype);
      assertEquals(0.0, streamTokenizer0.nval, 0.01);
      
      JSSubstitution jSSubstitution2 = (JSSubstitution)jSSubstitution1.clone();
      assertEquals(0, jSSubstitution1.size());
      assertTrue(jSSubstitution1.isEmpty());
      assertFalse(jSSubstitution1.fail());
      assertEquals(10, jSSubstitution1.capacity());
      assertEquals("[]", jSSubstitution1.toString());
      assertEquals("[]", jSSubstitution2.toString());
      assertFalse(jSSubstitution2.fail());
      assertEquals(0, jSSubstitution2.size());
      assertTrue(jSSubstitution2.isEmpty());
      assertEquals(0, jSSubstitution2.capacity());
      assertNotSame(jSSubstitution1, jSSubstitution2);
      assertNotSame(jSSubstitution1, jSSubstitution0);
      assertNotSame(jSSubstitution2, jSSubstitution0);
      assertNotSame(jSSubstitution2, jSSubstitution1);
      assertNotNull(jSSubstitution2);
      assertTrue(jSSubstitution1.equals((Object)jSSubstitution0));
      assertTrue(jSSubstitution2.equals((Object)jSSubstitution1));
      assertTrue(jSSubstitution2.equals((Object)jSSubstitution0));
      
      jSTerm0.makeEval(true);
      assertEquals(1, streamTokenizer0.lineno());
      assertEquals("Token[' '], line 1", streamTokenizer0.toString());
      assertTrue(jSTerm0.isConstant());
      assertFalse(jSTerm0.isEmpty());
      assertEquals(1, jSTerm0.size());
      assertFalse(jSTerm0.isFunction());
      assertFalse(jSTerm0.isVariable());
      assertEquals(10, jSTerm0.capacity());
      assertTrue(jSTerm0.isEval());
      assertEquals("[jFxA%Rdj8%]", jSTerm0.toString());
      assertSame(jSTerm0, jSTerm1);
      assertEquals(32, streamTokenizer0.ttype);
      assertEquals(0.0, streamTokenizer0.nval, 0.01);
      
      jSTerm1.makeFunction();
      assertEquals(1, streamTokenizer0.lineno());
      assertEquals("Token[' '], line 1", streamTokenizer0.toString());
      assertFalse(jSTerm0.isConstant());
      assertFalse(jSTerm0.isEmpty());
      assertTrue(jSTerm0.isFunction());
      assertEquals(1, jSTerm0.size());
      assertFalse(jSTerm0.isVariable());
      assertEquals(10, jSTerm0.capacity());
      assertTrue(jSTerm0.isEval());
      assertEquals("[jFxA%Rdj8%]", jSTerm0.toString());
      assertEquals(0, jSSubstitution1.size());
      assertTrue(jSSubstitution1.isEmpty());
      assertFalse(jSSubstitution1.fail());
      assertEquals(10, jSSubstitution1.capacity());
      assertEquals("[]", jSSubstitution1.toString());
      assertFalse(jSTerm1.isEmpty());
      assertTrue(jSTerm1.isFunction());
      assertFalse(jSTerm1.isConstant());
      assertTrue(jSTerm1.isEval());
      assertFalse(jSTerm1.isVariable());
      assertEquals("[jFxA%Rdj8%]", jSTerm1.toString());
      assertEquals(1, jSTerm1.size());
      assertEquals(10, jSTerm1.capacity());
      assertSame(jSTerm0, jSTerm1);
      assertNotSame(jSSubstitution1, jSSubstitution2);
      assertNotSame(jSSubstitution1, jSSubstitution0);
      assertSame(jSTerm1, jSTerm0);
      assertTrue(jSSubstitution1.equals((Object)jSSubstitution2));
      assertTrue(jSSubstitution1.equals((Object)jSSubstitution0));
      assertEquals(32, streamTokenizer0.ttype);
      assertEquals(0.0, streamTokenizer0.nval, 0.01);
      
      boolean boolean0 = jSTerm0.isGround();
      assertEquals(1, streamTokenizer0.lineno());
      assertEquals("Token[' '], line 1", streamTokenizer0.toString());
      assertFalse(jSTerm0.isConstant());
      assertFalse(jSTerm0.isEmpty());
      assertTrue(jSTerm0.isFunction());
      assertEquals(1, jSTerm0.size());
      assertFalse(jSTerm0.isVariable());
      assertEquals(10, jSTerm0.capacity());
      assertTrue(jSTerm0.isEval());
      assertEquals("[jFxA%Rdj8%]", jSTerm0.toString());
      assertTrue(boolean0);
      assertSame(jSTerm0, jSTerm1);
      assertEquals(32, streamTokenizer0.ttype);
      assertEquals(0.0, streamTokenizer0.nval, 0.01);
      
      jSTerm1.makeVariable();
      assertEquals(1, streamTokenizer0.lineno());
      assertEquals("Token[' '], line 1", streamTokenizer0.toString());
      assertFalse(jSTerm0.isConstant());
      assertFalse(jSTerm0.isEmpty());
      assertEquals(1, jSTerm0.size());
      assertFalse(jSTerm0.isFunction());
      assertEquals(10, jSTerm0.capacity());
      assertTrue(jSTerm0.isVariable());
      assertTrue(jSTerm0.isEval());
      assertEquals("[jFxA%Rdj8%]", jSTerm0.toString());
      assertEquals(0, jSSubstitution1.size());
      assertTrue(jSSubstitution1.isEmpty());
      assertFalse(jSSubstitution1.fail());
      assertEquals(10, jSSubstitution1.capacity());
      assertEquals("[]", jSSubstitution1.toString());
      assertFalse(jSTerm1.isEmpty());
      assertFalse(jSTerm1.isConstant());
      assertTrue(jSTerm1.isVariable());
      assertTrue(jSTerm1.isEval());
      assertEquals("[jFxA%Rdj8%]", jSTerm1.toString());
      assertEquals(1, jSTerm1.size());
      assertFalse(jSTerm1.isFunction());
      assertEquals(10, jSTerm1.capacity());
      assertSame(jSTerm0, jSTerm1);
      assertNotSame(jSSubstitution1, jSSubstitution2);
      assertNotSame(jSSubstitution1, jSSubstitution0);
      assertSame(jSTerm1, jSTerm0);
      assertTrue(jSSubstitution1.equals((Object)jSSubstitution2));
      assertTrue(jSSubstitution1.equals((Object)jSSubstitution0));
      assertEquals(32, streamTokenizer0.ttype);
      assertEquals(0.0, streamTokenizer0.nval, 0.01);
      
      boolean boolean1 = jSTerm1.equals(jSTerm0);
      assertEquals(1, streamTokenizer0.lineno());
      assertEquals("Token[' '], line 1", streamTokenizer0.toString());
      assertFalse(jSTerm0.isConstant());
      assertFalse(jSTerm0.isEmpty());
      assertEquals(1, jSTerm0.size());
      assertFalse(jSTerm0.isFunction());
      assertEquals(10, jSTerm0.capacity());
      assertTrue(jSTerm0.isVariable());
      assertTrue(jSTerm0.isEval());
      assertEquals("[jFxA%Rdj8%]", jSTerm0.toString());
      assertEquals(0, jSSubstitution1.size());
      assertTrue(jSSubstitution1.isEmpty());
      assertFalse(jSSubstitution1.fail());
      assertEquals(10, jSSubstitution1.capacity());
      assertEquals("[]", jSSubstitution1.toString());
      assertFalse(jSTerm1.isEmpty());
      assertFalse(jSTerm1.isConstant());
      assertTrue(jSTerm1.isVariable());
      assertTrue(jSTerm1.isEval());
      assertEquals("[jFxA%Rdj8%]", jSTerm1.toString());
      assertEquals(1, jSTerm1.size());
      assertFalse(jSTerm1.isFunction());
      assertEquals(10, jSTerm1.capacity());
      assertTrue(boolean1);
      assertSame(jSTerm0, jSTerm1);
      assertNotSame(jSSubstitution1, jSSubstitution2);
      assertNotSame(jSSubstitution1, jSSubstitution0);
      assertSame(jSTerm1, jSTerm0);
      assertTrue(jSSubstitution1.equals((Object)jSSubstitution2));
      assertTrue(jSSubstitution1.equals((Object)jSSubstitution0));
      assertTrue(boolean1 == boolean0);
      assertEquals(32, streamTokenizer0.ttype);
      assertEquals(0.0, streamTokenizer0.nval, 0.01);
      
      JSTerm jSTerm2 = jSTerm0.standardizerTerm();
      assertEquals(1, streamTokenizer0.lineno());
      assertEquals("Token[' '], line 1", streamTokenizer0.toString());
      assertFalse(jSTerm0.isConstant());
      assertFalse(jSTerm0.isEmpty());
      assertEquals(1, jSTerm0.size());
      assertFalse(jSTerm0.isFunction());
      assertEquals(10, jSTerm0.capacity());
      assertTrue(jSTerm0.isVariable());
      assertTrue(jSTerm0.isEval());
      assertEquals("[jFxA%Rdj8%]", jSTerm0.toString());
      assertFalse(jSTerm2.isEmpty());
      assertTrue(jSTerm2.isEval());
      assertFalse(jSTerm2.isConstant());
      assertEquals(1, jSTerm2.size());
      assertEquals("[jFxA%Rdj8%0]", jSTerm2.toString());
      assertFalse(jSTerm2.isFunction());
      assertEquals(10, jSTerm2.capacity());
      assertTrue(jSTerm2.isVariable());
      assertNotSame(jSTerm0, jSTerm2);
      assertSame(jSTerm0, jSTerm1);
      assertNotSame(jSTerm2, jSTerm0);
      assertNotSame(jSTerm2, jSTerm1);
      assertNotNull(jSTerm2);
      assertFalse(jSTerm2.equals((Object)jSTerm0));
      assertFalse(jSTerm2.equals((Object)jSTerm1));
      assertEquals(32, streamTokenizer0.ttype);
      assertEquals(0.0, streamTokenizer0.nval, 0.01);
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      assertTrue(jSSubstitution0.isEmpty());
      assertFalse(jSSubstitution0.fail());
      assertEquals(10, jSSubstitution0.capacity());
      assertEquals(0, jSSubstitution0.size());
      assertEquals("[]", jSSubstitution0.toString());
      assertNotNull(jSSubstitution0);
      
      StringReader stringReader0 = new StringReader("jFxA%Rdj8% jSYG> MR");
      assertNotNull(stringReader0);
      
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      assertEquals(1, streamTokenizer0.lineno());
      assertEquals("Token[NOTHING], line 1", streamTokenizer0.toString());
      assertNotNull(streamTokenizer0);
      assertEquals(0.0, streamTokenizer0.nval, 0.01);
      assertEquals((-4), streamTokenizer0.ttype);
      
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      assertEquals(1, streamTokenizer0.lineno());
      assertEquals("Token[' '], line 1", streamTokenizer0.toString());
      assertFalse(jSTerm0.isVariable());
      assertEquals(10, jSTerm0.capacity());
      assertFalse(jSTerm0.isEval());
      assertFalse(jSTerm0.isFunction());
      assertFalse(jSTerm0.isEmpty());
      assertEquals(1, jSTerm0.size());
      assertEquals("[jFxA%Rdj8%]", jSTerm0.toString());
      assertTrue(jSTerm0.isConstant());
      assertNotNull(jSTerm0);
      assertEquals(0.0, streamTokenizer0.nval, 0.01);
      assertEquals(32, streamTokenizer0.ttype);
      
      jSTerm0.makeVariable();
      assertEquals(1, streamTokenizer0.lineno());
      assertEquals("Token[' '], line 1", streamTokenizer0.toString());
      assertEquals(10, jSTerm0.capacity());
      assertFalse(jSTerm0.isEval());
      assertFalse(jSTerm0.isFunction());
      assertFalse(jSTerm0.isEmpty());
      assertEquals(1, jSTerm0.size());
      assertFalse(jSTerm0.isConstant());
      assertTrue(jSTerm0.isVariable());
      assertEquals("[jFxA%Rdj8%]", jSTerm0.toString());
      assertEquals(0.0, streamTokenizer0.nval, 0.01);
      assertEquals(32, streamTokenizer0.ttype);
      
      JSTerm jSTerm1 = new JSTerm();
      assertEquals("[]", jSTerm1.toString());
      assertFalse(jSTerm1.isConstant());
      assertFalse(jSTerm1.isEval());
      assertEquals(10, jSTerm1.capacity());
      assertEquals(0, jSTerm1.size());
      assertFalse(jSTerm1.isFunction());
      assertFalse(jSTerm1.isVariable());
      assertTrue(jSTerm1.isEmpty());
      assertNotNull(jSTerm1);
      assertFalse(jSTerm1.equals((Object)jSTerm0));
      
      JSTerm jSTerm2 = jSTerm0.applySubstitutionT(jSSubstitution0);
      assertTrue(jSSubstitution0.isEmpty());
      assertFalse(jSSubstitution0.fail());
      assertEquals(10, jSSubstitution0.capacity());
      assertEquals(0, jSSubstitution0.size());
      assertEquals("[]", jSSubstitution0.toString());
      assertEquals(1, streamTokenizer0.lineno());
      assertEquals("Token[' '], line 1", streamTokenizer0.toString());
      assertEquals(10, jSTerm0.capacity());
      assertFalse(jSTerm0.isEval());
      assertFalse(jSTerm0.isFunction());
      assertFalse(jSTerm0.isEmpty());
      assertEquals(1, jSTerm0.size());
      assertFalse(jSTerm0.isConstant());
      assertTrue(jSTerm0.isVariable());
      assertEquals("[jFxA%Rdj8%]", jSTerm0.toString());
      assertFalse(jSTerm2.isEmpty());
      assertFalse(jSTerm2.isConstant());
      assertTrue(jSTerm2.isVariable());
      assertEquals(1, jSTerm2.size());
      assertEquals(10, jSTerm2.capacity());
      assertFalse(jSTerm2.isFunction());
      assertEquals("[jFxA%Rdj8%]", jSTerm2.toString());
      assertFalse(jSTerm2.isEval());
      assertNotSame(jSTerm0, jSTerm2);
      assertNotSame(jSTerm0, jSTerm1);
      assertNotSame(jSTerm2, jSTerm0);
      assertNotSame(jSTerm2, jSTerm1);
      assertNotNull(jSTerm2);
      assertFalse(jSTerm0.equals((Object)jSTerm1));
      assertFalse(jSTerm2.equals((Object)jSTerm1));
      assertTrue(jSTerm2.equals((Object)jSTerm0));
      assertEquals(0.0, streamTokenizer0.nval, 0.01);
      assertEquals(32, streamTokenizer0.ttype);
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      assertFalse(jSTerm0.isFunction());
      assertFalse(jSTerm0.isConstant());
      assertEquals(10, jSTerm0.capacity());
      assertEquals("[]", jSTerm0.toString());
      assertEquals(0, jSTerm0.size());
      assertFalse(jSTerm0.isEval());
      assertFalse(jSTerm0.isVariable());
      assertTrue(jSTerm0.isEmpty());
      assertNotNull(jSTerm0);
      
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      assertEquals("[]", jSSubstitution0.toString());
      assertTrue(jSSubstitution0.isEmpty());
      assertFalse(jSSubstitution0.fail());
      assertEquals(0, jSSubstitution0.size());
      assertEquals(10, jSSubstitution0.capacity());
      assertNotNull(jSSubstitution0);
      
      jSTerm0.makeVariable();
      assertFalse(jSTerm0.isFunction());
      assertFalse(jSTerm0.isConstant());
      assertEquals(10, jSTerm0.capacity());
      assertEquals("[]", jSTerm0.toString());
      assertEquals(0, jSTerm0.size());
      assertTrue(jSTerm0.isVariable());
      assertFalse(jSTerm0.isEval());
      assertTrue(jSTerm0.isEmpty());
      
      JSTerm jSTerm1 = new JSTerm();
      assertFalse(jSTerm1.isConstant());
      assertEquals(0, jSTerm1.size());
      assertEquals(10, jSTerm1.capacity());
      assertFalse(jSTerm1.isFunction());
      assertTrue(jSTerm1.isEmpty());
      assertEquals("[]", jSTerm1.toString());
      assertFalse(jSTerm1.isEval());
      assertFalse(jSTerm1.isVariable());
      assertNotNull(jSTerm1);
      assertTrue(jSTerm1.equals((Object)jSTerm0));
      
      jSTerm1.makeConstant();
      assertEquals(0, jSTerm1.size());
      assertEquals(10, jSTerm1.capacity());
      assertFalse(jSTerm1.isFunction());
      assertTrue(jSTerm1.isEmpty());
      assertEquals("[]", jSTerm1.toString());
      assertFalse(jSTerm1.isEval());
      assertTrue(jSTerm1.isConstant());
      assertFalse(jSTerm1.isVariable());
      assertNotSame(jSTerm1, jSTerm0);
      assertTrue(jSTerm1.equals((Object)jSTerm0));
      
      JSTerm jSTerm2 = new JSTerm();
      assertEquals(0, jSTerm2.size());
      assertFalse(jSTerm2.isEval());
      assertEquals(10, jSTerm2.capacity());
      assertFalse(jSTerm2.isFunction());
      assertFalse(jSTerm2.isVariable());
      assertTrue(jSTerm2.isEmpty());
      assertEquals("[]", jSTerm2.toString());
      assertFalse(jSTerm2.isConstant());
      assertNotNull(jSTerm2);
      assertTrue(jSTerm2.equals((Object)jSTerm1));
      assertTrue(jSTerm2.equals((Object)jSTerm0));
      
      // Undeclared exception!
      try { 
        jSTerm1.applySubstitutionT(jSSubstitution0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      assertEquals(10, jSSubstitution0.capacity());
      assertEquals(0, jSSubstitution0.size());
      assertEquals("[]", jSSubstitution0.toString());
      assertTrue(jSSubstitution0.isEmpty());
      assertFalse(jSSubstitution0.fail());
      assertNotNull(jSSubstitution0);
      
      StringReader stringReader0 = new StringReader("jFxA%Rdj8% jSYG> MR");
      assertNotNull(stringReader0);
      
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      assertEquals("Token[NOTHING], line 1", streamTokenizer0.toString());
      assertEquals(1, streamTokenizer0.lineno());
      assertNotNull(streamTokenizer0);
      assertEquals(0.0, streamTokenizer0.nval, 0.01);
      assertEquals((-4), streamTokenizer0.ttype);
      
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      assertEquals("[]", jSSubstitution1.toString());
      assertFalse(jSSubstitution1.fail());
      assertEquals(0, jSSubstitution1.size());
      assertEquals(10, jSSubstitution1.capacity());
      assertTrue(jSSubstitution1.isEmpty());
      assertNotNull(jSSubstitution1);
      assertTrue(jSSubstitution1.equals((Object)jSSubstitution0));
      
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      assertEquals("Token[' '], line 1", streamTokenizer0.toString());
      assertEquals(1, streamTokenizer0.lineno());
      assertEquals(10, jSTerm0.capacity());
      assertFalse(jSTerm0.isFunction());
      assertFalse(jSTerm0.isVariable());
      assertEquals(1, jSTerm0.size());
      assertEquals("[jFxA%Rdj8%]", jSTerm0.toString());
      assertFalse(jSTerm0.isEmpty());
      assertTrue(jSTerm0.isConstant());
      assertFalse(jSTerm0.isEval());
      assertNotNull(jSTerm0);
      assertEquals(0.0, streamTokenizer0.nval, 0.01);
      assertEquals(32, streamTokenizer0.ttype);
      
      JSTerm jSTerm1 = new JSTerm();
      assertFalse(jSTerm1.isVariable());
      assertTrue(jSTerm1.isEmpty());
      assertFalse(jSTerm1.isConstant());
      assertEquals(0, jSTerm1.size());
      assertFalse(jSTerm1.isEval());
      assertEquals(10, jSTerm1.capacity());
      assertFalse(jSTerm1.isFunction());
      assertEquals("[]", jSTerm1.toString());
      assertNotNull(jSTerm1);
      assertFalse(jSTerm1.equals((Object)jSTerm0));
      
      JSSubstitution jSSubstitution2 = jSTerm0.matches(jSTerm1, jSSubstitution1);
      assertEquals("Token[' '], line 1", streamTokenizer0.toString());
      assertEquals(1, streamTokenizer0.lineno());
      assertEquals("[]", jSSubstitution1.toString());
      assertFalse(jSSubstitution1.fail());
      assertEquals(0, jSSubstitution1.size());
      assertEquals(10, jSSubstitution1.capacity());
      assertTrue(jSSubstitution1.isEmpty());
      assertEquals(10, jSTerm0.capacity());
      assertFalse(jSTerm0.isFunction());
      assertFalse(jSTerm0.isVariable());
      assertEquals(1, jSTerm0.size());
      assertEquals("[jFxA%Rdj8%]", jSTerm0.toString());
      assertFalse(jSTerm0.isEmpty());
      assertTrue(jSTerm0.isConstant());
      assertFalse(jSTerm0.isEval());
      assertFalse(jSTerm1.isVariable());
      assertTrue(jSTerm1.isEmpty());
      assertFalse(jSTerm1.isConstant());
      assertEquals(0, jSTerm1.size());
      assertFalse(jSTerm1.isEval());
      assertEquals(10, jSTerm1.capacity());
      assertFalse(jSTerm1.isFunction());
      assertEquals("[]", jSTerm1.toString());
      assertEquals("[]", jSSubstitution2.toString());
      assertTrue(jSSubstitution2.isEmpty());
      assertTrue(jSSubstitution2.fail());
      assertEquals(0, jSSubstitution2.size());
      assertEquals(10, jSSubstitution2.capacity());
      assertNotSame(jSSubstitution1, jSSubstitution0);
      assertNotSame(jSSubstitution1, jSSubstitution2);
      assertNotSame(jSTerm0, jSTerm1);
      assertNotSame(jSTerm1, jSTerm0);
      assertNotSame(jSSubstitution2, jSSubstitution1);
      assertNotSame(jSSubstitution2, jSSubstitution0);
      assertNotNull(jSSubstitution2);
      assertTrue(jSSubstitution1.equals((Object)jSSubstitution0));
      assertFalse(jSTerm0.equals((Object)jSTerm1));
      assertFalse(jSTerm1.equals((Object)jSTerm0));
      assertTrue(jSSubstitution2.equals((Object)jSSubstitution0));
      assertTrue(jSSubstitution2.equals((Object)jSSubstitution1));
      assertEquals(0.0, streamTokenizer0.nval, 0.01);
      assertEquals(32, streamTokenizer0.ttype);
      
      JSTerm jSTerm2 = new JSTerm();
      assertEquals(0, jSTerm2.size());
      assertFalse(jSTerm2.isConstant());
      assertFalse(jSTerm2.isVariable());
      assertFalse(jSTerm2.isEval());
      assertTrue(jSTerm2.isEmpty());
      assertEquals("[]", jSTerm2.toString());
      assertFalse(jSTerm2.isFunction());
      assertEquals(10, jSTerm2.capacity());
      assertNotNull(jSTerm2);
      assertFalse(jSTerm2.equals((Object)jSTerm0));
      assertTrue(jSTerm2.equals((Object)jSTerm1));
      
      jSTerm2.makeConstant();
      assertEquals(0, jSTerm2.size());
      assertFalse(jSTerm2.isVariable());
      assertFalse(jSTerm2.isEval());
      assertTrue(jSTerm2.isEmpty());
      assertEquals("[]", jSTerm2.toString());
      assertTrue(jSTerm2.isConstant());
      assertFalse(jSTerm2.isFunction());
      assertEquals(10, jSTerm2.capacity());
      assertNotSame(jSTerm2, jSTerm0);
      assertNotSame(jSTerm2, jSTerm1);
      assertFalse(jSTerm2.equals((Object)jSTerm0));
      assertTrue(jSTerm2.equals((Object)jSTerm1));
      
      String string0 = "|U1<NQ.K2<24h\\0B'";
      jSTerm2.addElement(string0);
      assertEquals("[|U1<NQ.K2<24h\\0B']", jSTerm2.toString());
      assertFalse(jSTerm2.isEmpty());
      assertEquals(1, jSTerm2.size());
      assertFalse(jSTerm2.isVariable());
      assertFalse(jSTerm2.isEval());
      assertTrue(jSTerm2.isConstant());
      assertFalse(jSTerm2.isFunction());
      assertEquals(10, jSTerm2.capacity());
      assertNotSame(jSTerm2, jSTerm0);
      assertNotSame(jSTerm2, jSTerm1);
      assertFalse(jSTerm2.equals((Object)jSTerm0));
      assertFalse(jSTerm2.equals((Object)jSTerm1));
      
      jSTerm2.makeVariable();
      assertEquals("[|U1<NQ.K2<24h\\0B']", jSTerm2.toString());
      assertFalse(jSTerm2.isEmpty());
      assertEquals(1, jSTerm2.size());
      assertFalse(jSTerm2.isConstant());
      assertFalse(jSTerm2.isEval());
      assertFalse(jSTerm2.isFunction());
      assertEquals(10, jSTerm2.capacity());
      assertTrue(jSTerm2.isVariable());
      assertNotSame(jSTerm2, jSTerm0);
      assertNotSame(jSTerm2, jSTerm1);
      assertFalse(jSTerm2.equals((Object)jSTerm0));
      assertFalse(jSTerm2.equals((Object)jSTerm1));
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      assertFalse(jSTerm0.isConstant());
      assertFalse(jSTerm0.isEval());
      assertEquals(0, jSTerm0.size());
      assertFalse(jSTerm0.isVariable());
      assertTrue(jSTerm0.isEmpty());
      assertEquals("[]", jSTerm0.toString());
      assertEquals(10, jSTerm0.capacity());
      assertFalse(jSTerm0.isFunction());
      assertNotNull(jSTerm0);
      
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      assertEquals(0, jSSubstitution0.size());
      assertFalse(jSSubstitution0.fail());
      assertEquals("[]", jSSubstitution0.toString());
      assertTrue(jSSubstitution0.isEmpty());
      assertEquals(10, jSSubstitution0.capacity());
      assertNotNull(jSSubstitution0);
      
      boolean boolean0 = jSTerm0.add((Object) jSSubstitution0);
      assertFalse(jSTerm0.isConstant());
      assertFalse(jSTerm0.isEmpty());
      assertEquals(1, jSTerm0.size());
      assertFalse(jSTerm0.isEval());
      assertFalse(jSTerm0.isVariable());
      assertEquals(10, jSTerm0.capacity());
      assertEquals("[[]]", jSTerm0.toString());
      assertFalse(jSTerm0.isFunction());
      assertEquals(0, jSSubstitution0.size());
      assertFalse(jSSubstitution0.fail());
      assertEquals("[]", jSSubstitution0.toString());
      assertTrue(jSSubstitution0.isEmpty());
      assertEquals(10, jSSubstitution0.capacity());
      assertTrue(boolean0);
      
      StringReader stringReader0 = new StringReader("?");
      assertNotNull(stringReader0);
      
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      assertEquals(1, streamTokenizer0.lineno());
      assertEquals("Token[NOTHING], line 1", streamTokenizer0.toString());
      assertNotNull(streamTokenizer0);
      assertEquals(0.0, streamTokenizer0.nval, 0.01);
      assertEquals((-4), streamTokenizer0.ttype);
      
      JSTerm jSTerm1 = null;
      try {
        jSTerm1 = new JSTerm(streamTokenizer0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      assertFalse(jSTerm0.isConstant());
      assertEquals(10, jSTerm0.capacity());
      assertFalse(jSTerm0.isEval());
      assertEquals(0, jSTerm0.size());
      assertTrue(jSTerm0.isEmpty());
      assertEquals("[]", jSTerm0.toString());
      assertFalse(jSTerm0.isVariable());
      assertFalse(jSTerm0.isFunction());
      assertNotNull(jSTerm0);
      
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      assertEquals(10, jSSubstitution0.capacity());
      assertFalse(jSSubstitution0.fail());
      assertEquals(0, jSSubstitution0.size());
      assertTrue(jSSubstitution0.isEmpty());
      assertEquals("[]", jSSubstitution0.toString());
      assertNotNull(jSSubstitution0);
      
      jSTerm0.makeVariable();
      assertFalse(jSTerm0.isConstant());
      assertTrue(jSTerm0.isVariable());
      assertEquals(10, jSTerm0.capacity());
      assertFalse(jSTerm0.isEval());
      assertEquals(0, jSTerm0.size());
      assertTrue(jSTerm0.isEmpty());
      assertEquals("[]", jSTerm0.toString());
      assertFalse(jSTerm0.isFunction());
      
      JSTerm jSTerm1 = new JSTerm();
      assertEquals("[]", jSTerm1.toString());
      assertFalse(jSTerm1.isConstant());
      assertFalse(jSTerm1.isEval());
      assertEquals(10, jSTerm1.capacity());
      assertEquals(0, jSTerm1.size());
      assertFalse(jSTerm1.isVariable());
      assertFalse(jSTerm1.isFunction());
      assertTrue(jSTerm1.isEmpty());
      assertNotNull(jSTerm1);
      assertTrue(jSTerm1.equals((Object)jSTerm0));
      
      jSTerm1.makeConstant();
      assertTrue(jSTerm1.isConstant());
      assertEquals("[]", jSTerm1.toString());
      assertFalse(jSTerm1.isEval());
      assertEquals(10, jSTerm1.capacity());
      assertEquals(0, jSTerm1.size());
      assertFalse(jSTerm1.isVariable());
      assertFalse(jSTerm1.isFunction());
      assertTrue(jSTerm1.isEmpty());
      assertNotSame(jSTerm1, jSTerm0);
      assertTrue(jSTerm1.equals((Object)jSTerm0));
      
      // Undeclared exception!
      try { 
        jSTerm0.matches(jSTerm1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      assertFalse(jSTerm0.isVariable());
      assertFalse(jSTerm0.isFunction());
      assertTrue(jSTerm0.isEmpty());
      assertFalse(jSTerm0.isEval());
      assertEquals(0, jSTerm0.size());
      assertEquals(10, jSTerm0.capacity());
      assertEquals("[]", jSTerm0.toString());
      assertFalse(jSTerm0.isConstant());
      assertNotNull(jSTerm0);
      
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      assertEquals("[]", jSSubstitution0.toString());
      assertTrue(jSSubstitution0.isEmpty());
      assertEquals(10, jSSubstitution0.capacity());
      assertEquals(0, jSSubstitution0.size());
      assertFalse(jSSubstitution0.fail());
      assertNotNull(jSSubstitution0);
      
      boolean boolean0 = jSTerm0.add((Object) jSSubstitution0);
      assertFalse(jSTerm0.isVariable());
      assertFalse(jSTerm0.isFunction());
      assertFalse(jSTerm0.isEmpty());
      assertFalse(jSTerm0.isEval());
      assertEquals(1, jSTerm0.size());
      assertEquals("[[]]", jSTerm0.toString());
      assertEquals(10, jSTerm0.capacity());
      assertFalse(jSTerm0.isConstant());
      assertEquals("[]", jSSubstitution0.toString());
      assertTrue(jSSubstitution0.isEmpty());
      assertEquals(10, jSSubstitution0.capacity());
      assertEquals(0, jSSubstitution0.size());
      assertFalse(jSSubstitution0.fail());
      assertTrue(boolean0);
      
      jSTerm0.makeEval(true);
      assertFalse(jSTerm0.isVariable());
      assertFalse(jSTerm0.isFunction());
      assertTrue(jSTerm0.isEval());
      assertFalse(jSTerm0.isEmpty());
      assertEquals(1, jSTerm0.size());
      assertEquals("[[]]", jSTerm0.toString());
      assertEquals(10, jSTerm0.capacity());
      assertFalse(jSTerm0.isConstant());
      
      jSTerm0.makeFunction();
      assertFalse(jSTerm0.isVariable());
      assertTrue(jSTerm0.isEval());
      assertFalse(jSTerm0.isEmpty());
      assertTrue(jSTerm0.isFunction());
      assertEquals(1, jSTerm0.size());
      assertEquals("[[]]", jSTerm0.toString());
      assertEquals(10, jSTerm0.capacity());
      assertFalse(jSTerm0.isConstant());
      
      // Undeclared exception!
      try { 
        jSTerm0.call();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // umd.cs.shop.JSSubstitution cannot be cast to java.lang.String
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      assertTrue(jSTerm0.isEmpty());
      assertEquals("[]", jSTerm0.toString());
      assertFalse(jSTerm0.isConstant());
      assertEquals(0, jSTerm0.size());
      assertFalse(jSTerm0.isEval());
      assertEquals(10, jSTerm0.capacity());
      assertFalse(jSTerm0.isFunction());
      assertFalse(jSTerm0.isVariable());
      assertNotNull(jSTerm0);
      
      JSTerm jSTerm1 = new JSTerm();
      assertFalse(jSTerm1.isVariable());
      assertFalse(jSTerm1.isFunction());
      assertEquals(10, jSTerm1.capacity());
      assertEquals("[]", jSTerm1.toString());
      assertFalse(jSTerm1.isConstant());
      assertTrue(jSTerm1.isEmpty());
      assertEquals(0, jSTerm1.size());
      assertFalse(jSTerm1.isEval());
      assertNotNull(jSTerm1);
      assertTrue(jSTerm1.equals((Object)jSTerm0));
      
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      assertEquals(10, jSSubstitution0.capacity());
      assertEquals(0, jSSubstitution0.size());
      assertFalse(jSSubstitution0.fail());
      assertEquals("[]", jSSubstitution0.toString());
      assertTrue(jSSubstitution0.isEmpty());
      assertNotNull(jSSubstitution0);
      
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      assertEquals(0, jSSubstitution1.size());
      assertEquals("[]", jSSubstitution1.toString());
      assertTrue(jSSubstitution1.isEmpty());
      assertFalse(jSSubstitution1.fail());
      assertEquals(10, jSSubstitution1.capacity());
      assertNotNull(jSSubstitution1);
      assertTrue(jSSubstitution1.equals((Object)jSSubstitution0));
      
      jSSubstitution0.addElements(jSSubstitution1);
      assertEquals(10, jSSubstitution0.capacity());
      assertEquals(0, jSSubstitution0.size());
      assertFalse(jSSubstitution0.fail());
      assertEquals("[]", jSSubstitution0.toString());
      assertTrue(jSSubstitution0.isEmpty());
      assertEquals(0, jSSubstitution1.size());
      assertEquals("[]", jSSubstitution1.toString());
      assertTrue(jSSubstitution1.isEmpty());
      assertFalse(jSSubstitution1.fail());
      assertEquals(10, jSSubstitution1.capacity());
      assertNotSame(jSSubstitution0, jSSubstitution1);
      assertNotSame(jSSubstitution1, jSSubstitution0);
      assertTrue(jSSubstitution0.equals((Object)jSSubstitution1));
      assertTrue(jSSubstitution1.equals((Object)jSSubstitution0));
      
      JSSubstitution jSSubstitution2 = jSTerm0.matches(jSTerm1, jSSubstitution1);
      assertTrue(jSTerm0.isEmpty());
      assertEquals("[]", jSTerm0.toString());
      assertFalse(jSTerm0.isConstant());
      assertEquals(0, jSTerm0.size());
      assertFalse(jSTerm0.isEval());
      assertEquals(10, jSTerm0.capacity());
      assertFalse(jSTerm0.isFunction());
      assertFalse(jSTerm0.isVariable());
      assertFalse(jSTerm1.isVariable());
      assertFalse(jSTerm1.isFunction());
      assertEquals(10, jSTerm1.capacity());
      assertEquals("[]", jSTerm1.toString());
      assertFalse(jSTerm1.isConstant());
      assertTrue(jSTerm1.isEmpty());
      assertEquals(0, jSTerm1.size());
      assertFalse(jSTerm1.isEval());
      assertEquals(0, jSSubstitution1.size());
      assertEquals("[]", jSSubstitution1.toString());
      assertTrue(jSSubstitution1.isEmpty());
      assertFalse(jSSubstitution1.fail());
      assertEquals(10, jSSubstitution1.capacity());
      assertEquals(10, jSSubstitution2.capacity());
      assertTrue(jSSubstitution2.fail());
      assertTrue(jSSubstitution2.isEmpty());
      assertEquals(0, jSSubstitution2.size());
      assertEquals("[]", jSSubstitution2.toString());
      assertNotSame(jSTerm0, jSTerm1);
      assertNotSame(jSTerm1, jSTerm0);
      assertNotSame(jSSubstitution1, jSSubstitution2);
      assertNotSame(jSSubstitution1, jSSubstitution0);
      assertNotSame(jSSubstitution2, jSSubstitution1);
      assertNotSame(jSSubstitution2, jSSubstitution0);
      assertNotNull(jSSubstitution2);
      assertTrue(jSTerm0.equals((Object)jSTerm1));
      assertTrue(jSTerm1.equals((Object)jSTerm0));
      assertTrue(jSSubstitution1.equals((Object)jSSubstitution0));
      assertTrue(jSSubstitution2.equals((Object)jSSubstitution0));
      assertTrue(jSSubstitution2.equals((Object)jSSubstitution1));
      
      jSTerm0.makeVariable();
      assertTrue(jSTerm0.isEmpty());
      assertEquals("[]", jSTerm0.toString());
      assertFalse(jSTerm0.isConstant());
      assertEquals(0, jSTerm0.size());
      assertFalse(jSTerm0.isEval());
      assertEquals(10, jSTerm0.capacity());
      assertTrue(jSTerm0.isVariable());
      assertFalse(jSTerm0.isFunction());
      assertNotSame(jSTerm0, jSTerm1);
      assertTrue(jSTerm0.equals((Object)jSTerm1));
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      assertTrue(jSTerm0.isEmpty());
      assertEquals("[]", jSTerm0.toString());
      assertEquals(10, jSTerm0.capacity());
      assertFalse(jSTerm0.isFunction());
      assertFalse(jSTerm0.isConstant());
      assertFalse(jSTerm0.isEval());
      assertEquals(0, jSTerm0.size());
      assertFalse(jSTerm0.isVariable());
      assertNotNull(jSTerm0);
      
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      assertFalse(jSSubstitution0.fail());
      assertEquals(0, jSSubstitution0.size());
      assertTrue(jSSubstitution0.isEmpty());
      assertEquals("[]", jSSubstitution0.toString());
      assertEquals(10, jSSubstitution0.capacity());
      assertNotNull(jSSubstitution0);
      
      boolean boolean0 = jSTerm0.add((Object) jSSubstitution0);
      assertEquals("[[]]", jSTerm0.toString());
      assertEquals(10, jSTerm0.capacity());
      assertFalse(jSTerm0.isFunction());
      assertFalse(jSTerm0.isEmpty());
      assertFalse(jSTerm0.isConstant());
      assertFalse(jSTerm0.isEval());
      assertEquals(1, jSTerm0.size());
      assertFalse(jSTerm0.isVariable());
      assertFalse(jSSubstitution0.fail());
      assertEquals(0, jSSubstitution0.size());
      assertTrue(jSSubstitution0.isEmpty());
      assertEquals("[]", jSSubstitution0.toString());
      assertEquals(10, jSSubstitution0.capacity());
      assertTrue(boolean0);
      
      jSTerm0.print();
      assertEquals("[[]]", jSTerm0.toString());
      assertEquals(10, jSTerm0.capacity());
      assertFalse(jSTerm0.isFunction());
      assertFalse(jSTerm0.isEmpty());
      assertFalse(jSTerm0.isConstant());
      assertFalse(jSTerm0.isEval());
      assertEquals(1, jSTerm0.size());
      assertFalse(jSTerm0.isVariable());
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      assertEquals(10, jSSubstitution0.capacity());
      assertEquals(0, jSSubstitution0.size());
      assertEquals("[]", jSSubstitution0.toString());
      assertTrue(jSSubstitution0.isEmpty());
      assertFalse(jSSubstitution0.fail());
      assertNotNull(jSSubstitution0);
      
      StringReader stringReader0 = new StringReader("jFxA%Rdj8% jSYG> MR");
      assertNotNull(stringReader0);
      
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      assertEquals(1, streamTokenizer0.lineno());
      assertEquals("Token[NOTHING], line 1", streamTokenizer0.toString());
      assertNotNull(streamTokenizer0);
      assertEquals((-4), streamTokenizer0.ttype);
      assertEquals(0.0, streamTokenizer0.nval, 0.01);
      
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      assertEquals(1, streamTokenizer0.lineno());
      assertEquals("Token[' '], line 1", streamTokenizer0.toString());
      assertFalse(jSTerm0.isVariable());
      assertFalse(jSTerm0.isFunction());
      assertFalse(jSTerm0.isEval());
      assertEquals(1, jSTerm0.size());
      assertEquals(10, jSTerm0.capacity());
      assertFalse(jSTerm0.isEmpty());
      assertEquals("[jFxA%Rdj8%]", jSTerm0.toString());
      assertTrue(jSTerm0.isConstant());
      assertNotNull(jSTerm0);
      assertEquals(32, streamTokenizer0.ttype);
      assertEquals(0.0, streamTokenizer0.nval, 0.01);
      
      JSTerm jSTerm1 = jSSubstitution0.instance(jSTerm0);
      assertEquals(10, jSSubstitution0.capacity());
      assertEquals(0, jSSubstitution0.size());
      assertEquals("[]", jSSubstitution0.toString());
      assertTrue(jSSubstitution0.isEmpty());
      assertFalse(jSSubstitution0.fail());
      assertEquals(1, streamTokenizer0.lineno());
      assertEquals("Token[' '], line 1", streamTokenizer0.toString());
      assertFalse(jSTerm0.isVariable());
      assertFalse(jSTerm0.isFunction());
      assertFalse(jSTerm0.isEval());
      assertEquals(1, jSTerm0.size());
      assertEquals(10, jSTerm0.capacity());
      assertFalse(jSTerm0.isEmpty());
      assertEquals("[jFxA%Rdj8%]", jSTerm0.toString());
      assertTrue(jSTerm0.isConstant());
      assertFalse(jSTerm1.isEmpty());
      assertFalse(jSTerm1.isEval());
      assertEquals(1, jSTerm1.size());
      assertTrue(jSTerm1.isConstant());
      assertFalse(jSTerm1.isVariable());
      assertEquals("[jFxA%Rdj8%]", jSTerm1.toString());
      assertEquals(10, jSTerm1.capacity());
      assertFalse(jSTerm1.isFunction());
      assertSame(jSTerm0, jSTerm1);
      assertSame(jSTerm1, jSTerm0);
      assertNotNull(jSTerm1);
      assertEquals(32, streamTokenizer0.ttype);
      assertEquals(0.0, streamTokenizer0.nval, 0.01);
      
      JSTerm jSTerm2 = (JSTerm)jSTerm1.clone();
      assertEquals(10, jSSubstitution0.capacity());
      assertEquals(0, jSSubstitution0.size());
      assertEquals("[]", jSSubstitution0.toString());
      assertTrue(jSSubstitution0.isEmpty());
      assertFalse(jSSubstitution0.fail());
      assertEquals(1, streamTokenizer0.lineno());
      assertEquals("Token[' '], line 1", streamTokenizer0.toString());
      assertFalse(jSTerm0.isVariable());
      assertFalse(jSTerm0.isFunction());
      assertFalse(jSTerm0.isEval());
      assertEquals(1, jSTerm0.size());
      assertEquals(10, jSTerm0.capacity());
      assertFalse(jSTerm0.isEmpty());
      assertEquals("[jFxA%Rdj8%]", jSTerm0.toString());
      assertTrue(jSTerm0.isConstant());
      assertFalse(jSTerm1.isEmpty());
      assertFalse(jSTerm1.isEval());
      assertEquals(1, jSTerm1.size());
      assertTrue(jSTerm1.isConstant());
      assertFalse(jSTerm1.isVariable());
      assertEquals("[jFxA%Rdj8%]", jSTerm1.toString());
      assertEquals(10, jSTerm1.capacity());
      assertFalse(jSTerm1.isFunction());
      assertEquals(1, jSTerm2.capacity());
      assertTrue(jSTerm2.isConstant());
      assertEquals("[jFxA%Rdj8%]", jSTerm2.toString());
      assertFalse(jSTerm2.isFunction());
      assertFalse(jSTerm2.isVariable());
      assertFalse(jSTerm2.isEmpty());
      assertFalse(jSTerm2.isEval());
      assertEquals(1, jSTerm2.size());
      assertSame(jSTerm0, jSTerm1);
      assertNotSame(jSTerm0, jSTerm2);
      assertNotSame(jSTerm1, jSTerm2);
      assertSame(jSTerm1, jSTerm0);
      assertNotSame(jSTerm2, jSTerm1);
      assertNotSame(jSTerm2, jSTerm0);
      assertNotNull(jSTerm2);
      assertTrue(jSTerm2.equals((Object)jSTerm1));
      assertTrue(jSTerm2.equals((Object)jSTerm0));
      assertEquals(32, streamTokenizer0.ttype);
      assertEquals(0.0, streamTokenizer0.nval, 0.01);
      
      boolean boolean0 = jSTerm0.add((Object) jSTerm2);
      assertEquals(10, jSSubstitution0.capacity());
      assertEquals(0, jSSubstitution0.size());
      assertEquals("[]", jSSubstitution0.toString());
      assertTrue(jSSubstitution0.isEmpty());
      assertFalse(jSSubstitution0.fail());
      assertEquals(1, streamTokenizer0.lineno());
      assertEquals("Token[' '], line 1", streamTokenizer0.toString());
      assertFalse(jSTerm0.isVariable());
      assertEquals(2, jSTerm0.size());
      assertFalse(jSTerm0.isFunction());
      assertFalse(jSTerm0.isEval());
      assertEquals(10, jSTerm0.capacity());
      assertFalse(jSTerm0.isEmpty());
      assertTrue(jSTerm0.isConstant());
      assertEquals("[jFxA%Rdj8%, [jFxA%Rdj8%]]", jSTerm0.toString());
      assertFalse(jSTerm1.isEmpty());
      assertFalse(jSTerm1.isEval());
      assertTrue(jSTerm1.isConstant());
      assertEquals("[jFxA%Rdj8%, [jFxA%Rdj8%]]", jSTerm1.toString());
      assertFalse(jSTerm1.isVariable());
      assertEquals(2, jSTerm1.size());
      assertEquals(10, jSTerm1.capacity());
      assertFalse(jSTerm1.isFunction());
      assertEquals(1, jSTerm2.capacity());
      assertTrue(jSTerm2.isConstant());
      assertEquals("[jFxA%Rdj8%]", jSTerm2.toString());
      assertFalse(jSTerm2.isFunction());
      assertFalse(jSTerm2.isVariable());
      assertFalse(jSTerm2.isEmpty());
      assertFalse(jSTerm2.isEval());
      assertEquals(1, jSTerm2.size());
      assertTrue(boolean0);
      assertSame(jSTerm0, jSTerm1);
      assertNotSame(jSTerm0, jSTerm2);
      assertNotSame(jSTerm1, jSTerm2);
      assertSame(jSTerm1, jSTerm0);
      assertNotSame(jSTerm2, jSTerm1);
      assertNotSame(jSTerm2, jSTerm0);
      assertFalse(jSTerm0.equals((Object)jSTerm2));
      assertFalse(jSTerm1.equals((Object)jSTerm2));
      assertFalse(jSTerm2.equals((Object)jSTerm1));
      assertFalse(jSTerm2.equals((Object)jSTerm0));
      assertEquals(32, streamTokenizer0.ttype);
      assertEquals(0.0, streamTokenizer0.nval, 0.01);
      
      jSTerm0.makeEval(true);
      assertEquals(1, streamTokenizer0.lineno());
      assertEquals("Token[' '], line 1", streamTokenizer0.toString());
      assertFalse(jSTerm0.isVariable());
      assertEquals(2, jSTerm0.size());
      assertFalse(jSTerm0.isFunction());
      assertEquals(10, jSTerm0.capacity());
      assertTrue(jSTerm0.isEval());
      assertFalse(jSTerm0.isEmpty());
      assertTrue(jSTerm0.isConstant());
      assertEquals("[jFxA%Rdj8%, [jFxA%Rdj8%]]", jSTerm0.toString());
      assertSame(jSTerm0, jSTerm1);
      assertNotSame(jSTerm0, jSTerm2);
      assertFalse(jSTerm0.equals((Object)jSTerm2));
      assertEquals(32, streamTokenizer0.ttype);
      assertEquals(0.0, streamTokenizer0.nval, 0.01);
      
      jSTerm0.makeFunction();
      assertEquals(1, streamTokenizer0.lineno());
      assertEquals("Token[' '], line 1", streamTokenizer0.toString());
      assertFalse(jSTerm0.isVariable());
      assertEquals(2, jSTerm0.size());
      assertFalse(jSTerm0.isConstant());
      assertEquals(10, jSTerm0.capacity());
      assertTrue(jSTerm0.isEval());
      assertFalse(jSTerm0.isEmpty());
      assertTrue(jSTerm0.isFunction());
      assertEquals("[jFxA%Rdj8%, [jFxA%Rdj8%]]", jSTerm0.toString());
      assertSame(jSTerm0, jSTerm1);
      assertNotSame(jSTerm0, jSTerm2);
      assertFalse(jSTerm0.equals((Object)jSTerm2));
      assertEquals(32, streamTokenizer0.ttype);
      assertEquals(0.0, streamTokenizer0.nval, 0.01);
      
      jSTerm2.makeFunction();
      assertEquals(10, jSSubstitution0.capacity());
      assertEquals(0, jSSubstitution0.size());
      assertEquals("[]", jSSubstitution0.toString());
      assertTrue(jSSubstitution0.isEmpty());
      assertFalse(jSSubstitution0.fail());
      assertEquals(1, streamTokenizer0.lineno());
      assertEquals("Token[' '], line 1", streamTokenizer0.toString());
      assertFalse(jSTerm0.isVariable());
      assertEquals(2, jSTerm0.size());
      assertFalse(jSTerm0.isConstant());
      assertEquals(10, jSTerm0.capacity());
      assertTrue(jSTerm0.isEval());
      assertFalse(jSTerm0.isEmpty());
      assertTrue(jSTerm0.isFunction());
      assertEquals("[jFxA%Rdj8%, [jFxA%Rdj8%]]", jSTerm0.toString());
      assertFalse(jSTerm1.isEmpty());
      assertTrue(jSTerm1.isFunction());
      assertTrue(jSTerm1.isEval());
      assertFalse(jSTerm1.isConstant());
      assertEquals("[jFxA%Rdj8%, [jFxA%Rdj8%]]", jSTerm1.toString());
      assertFalse(jSTerm1.isVariable());
      assertEquals(2, jSTerm1.size());
      assertEquals(10, jSTerm1.capacity());
      assertEquals(1, jSTerm2.capacity());
      assertEquals("[jFxA%Rdj8%]", jSTerm2.toString());
      assertFalse(jSTerm2.isVariable());
      assertFalse(jSTerm2.isConstant());
      assertFalse(jSTerm2.isEmpty());
      assertFalse(jSTerm2.isEval());
      assertEquals(1, jSTerm2.size());
      assertTrue(jSTerm2.isFunction());
      assertSame(jSTerm0, jSTerm1);
      assertNotSame(jSTerm0, jSTerm2);
      assertNotSame(jSTerm1, jSTerm2);
      assertSame(jSTerm1, jSTerm0);
      assertNotSame(jSTerm2, jSTerm1);
      assertNotSame(jSTerm2, jSTerm0);
      assertFalse(jSTerm0.equals((Object)jSTerm2));
      assertFalse(jSTerm1.equals((Object)jSTerm2));
      assertFalse(jSTerm2.equals((Object)jSTerm1));
      assertFalse(jSTerm2.equals((Object)jSTerm0));
      assertEquals(32, streamTokenizer0.ttype);
      assertEquals(0.0, streamTokenizer0.nval, 0.01);
      
      jSTerm2.makeFunction();
      assertEquals(10, jSSubstitution0.capacity());
      assertEquals(0, jSSubstitution0.size());
      assertEquals("[]", jSSubstitution0.toString());
      assertTrue(jSSubstitution0.isEmpty());
      assertFalse(jSSubstitution0.fail());
      assertEquals(1, streamTokenizer0.lineno());
      assertEquals("Token[' '], line 1", streamTokenizer0.toString());
      assertFalse(jSTerm0.isVariable());
      assertEquals(2, jSTerm0.size());
      assertFalse(jSTerm0.isConstant());
      assertEquals(10, jSTerm0.capacity());
      assertTrue(jSTerm0.isEval());
      assertFalse(jSTerm0.isEmpty());
      assertTrue(jSTerm0.isFunction());
      assertEquals("[jFxA%Rdj8%, [jFxA%Rdj8%]]", jSTerm0.toString());
      assertFalse(jSTerm1.isEmpty());
      assertTrue(jSTerm1.isFunction());
      assertTrue(jSTerm1.isEval());
      assertFalse(jSTerm1.isConstant());
      assertEquals("[jFxA%Rdj8%, [jFxA%Rdj8%]]", jSTerm1.toString());
      assertFalse(jSTerm1.isVariable());
      assertEquals(2, jSTerm1.size());
      assertEquals(10, jSTerm1.capacity());
      assertEquals(1, jSTerm2.capacity());
      assertEquals("[jFxA%Rdj8%]", jSTerm2.toString());
      assertFalse(jSTerm2.isVariable());
      assertFalse(jSTerm2.isConstant());
      assertFalse(jSTerm2.isEmpty());
      assertFalse(jSTerm2.isEval());
      assertEquals(1, jSTerm2.size());
      assertTrue(jSTerm2.isFunction());
      assertSame(jSTerm0, jSTerm1);
      assertNotSame(jSTerm0, jSTerm2);
      assertNotSame(jSTerm1, jSTerm2);
      assertSame(jSTerm1, jSTerm0);
      assertNotSame(jSTerm2, jSTerm1);
      assertNotSame(jSTerm2, jSTerm0);
      assertFalse(jSTerm0.equals((Object)jSTerm2));
      assertFalse(jSTerm1.equals((Object)jSTerm2));
      assertFalse(jSTerm2.equals((Object)jSTerm1));
      assertFalse(jSTerm2.equals((Object)jSTerm0));
      assertEquals(32, streamTokenizer0.ttype);
      assertEquals(0.0, streamTokenizer0.nval, 0.01);
      
      boolean boolean1 = jSTerm2.equals(jSTerm0);
      assertEquals(10, jSSubstitution0.capacity());
      assertEquals(0, jSSubstitution0.size());
      assertEquals("[]", jSSubstitution0.toString());
      assertTrue(jSSubstitution0.isEmpty());
      assertFalse(jSSubstitution0.fail());
      assertEquals(1, streamTokenizer0.lineno());
      assertEquals("Token[' '], line 1", streamTokenizer0.toString());
      assertFalse(jSTerm0.isVariable());
      assertEquals(2, jSTerm0.size());
      assertFalse(jSTerm0.isConstant());
      assertEquals(10, jSTerm0.capacity());
      assertTrue(jSTerm0.isEval());
      assertFalse(jSTerm0.isEmpty());
      assertTrue(jSTerm0.isFunction());
      assertEquals("[jFxA%Rdj8%, [jFxA%Rdj8%]]", jSTerm0.toString());
      assertFalse(jSTerm1.isEmpty());
      assertTrue(jSTerm1.isFunction());
      assertTrue(jSTerm1.isEval());
      assertFalse(jSTerm1.isConstant());
      assertEquals("[jFxA%Rdj8%, [jFxA%Rdj8%]]", jSTerm1.toString());
      assertFalse(jSTerm1.isVariable());
      assertEquals(2, jSTerm1.size());
      assertEquals(10, jSTerm1.capacity());
      assertEquals(1, jSTerm2.capacity());
      assertEquals("[jFxA%Rdj8%]", jSTerm2.toString());
      assertFalse(jSTerm2.isVariable());
      assertFalse(jSTerm2.isConstant());
      assertFalse(jSTerm2.isEmpty());
      assertFalse(jSTerm2.isEval());
      assertEquals(1, jSTerm2.size());
      assertTrue(jSTerm2.isFunction());
      assertFalse(boolean1);
      assertSame(jSTerm0, jSTerm1);
      assertNotSame(jSTerm0, jSTerm2);
      assertNotSame(jSTerm1, jSTerm2);
      assertSame(jSTerm1, jSTerm0);
      assertNotSame(jSTerm2, jSTerm1);
      assertNotSame(jSTerm2, jSTerm0);
      assertFalse(jSTerm0.equals((Object)jSTerm2));
      assertFalse(jSTerm1.equals((Object)jSTerm2));
      assertFalse(jSTerm2.equals((Object)jSTerm1));
      assertFalse(jSTerm2.equals((Object)jSTerm0));
      assertFalse(boolean1 == boolean0);
      assertEquals(32, streamTokenizer0.ttype);
      assertEquals(0.0, streamTokenizer0.nval, 0.01);
      
      jSTerm1.print();
      assertEquals(10, jSSubstitution0.capacity());
      assertEquals(0, jSSubstitution0.size());
      assertEquals("[]", jSSubstitution0.toString());
      assertTrue(jSSubstitution0.isEmpty());
      assertFalse(jSSubstitution0.fail());
      assertEquals(1, streamTokenizer0.lineno());
      assertEquals("Token[' '], line 1", streamTokenizer0.toString());
      assertFalse(jSTerm0.isVariable());
      assertEquals(2, jSTerm0.size());
      assertFalse(jSTerm0.isConstant());
      assertEquals(10, jSTerm0.capacity());
      assertTrue(jSTerm0.isEval());
      assertFalse(jSTerm0.isEmpty());
      assertTrue(jSTerm0.isFunction());
      assertEquals("[jFxA%Rdj8%, [jFxA%Rdj8%]]", jSTerm0.toString());
      assertFalse(jSTerm1.isEmpty());
      assertTrue(jSTerm1.isFunction());
      assertTrue(jSTerm1.isEval());
      assertFalse(jSTerm1.isConstant());
      assertEquals("[jFxA%Rdj8%, [jFxA%Rdj8%]]", jSTerm1.toString());
      assertFalse(jSTerm1.isVariable());
      assertEquals(2, jSTerm1.size());
      assertEquals(10, jSTerm1.capacity());
      assertSame(jSTerm0, jSTerm1);
      assertNotSame(jSTerm0, jSTerm2);
      assertNotSame(jSTerm1, jSTerm2);
      assertSame(jSTerm1, jSTerm0);
      assertFalse(jSTerm0.equals((Object)jSTerm2));
      assertFalse(jSTerm1.equals((Object)jSTerm2));
      assertEquals(32, streamTokenizer0.ttype);
      assertEquals(0.0, streamTokenizer0.nval, 0.01);
      
      JSSubstitution jSSubstitution1 = jSTerm0.matches(jSTerm2, jSSubstitution0);
      assertEquals(10, jSSubstitution0.capacity());
      assertEquals(0, jSSubstitution0.size());
      assertEquals("[]", jSSubstitution0.toString());
      assertTrue(jSSubstitution0.isEmpty());
      assertFalse(jSSubstitution0.fail());
      assertEquals(1, streamTokenizer0.lineno());
      assertEquals("Token[' '], line 1", streamTokenizer0.toString());
      assertFalse(jSTerm0.isVariable());
      assertEquals(2, jSTerm0.size());
      assertFalse(jSTerm0.isConstant());
      assertEquals(10, jSTerm0.capacity());
      assertTrue(jSTerm0.isEval());
      assertFalse(jSTerm0.isEmpty());
      assertTrue(jSTerm0.isFunction());
      assertEquals("[jFxA%Rdj8%, [jFxA%Rdj8%]]", jSTerm0.toString());
      assertFalse(jSTerm1.isEmpty());
      assertTrue(jSTerm1.isFunction());
      assertTrue(jSTerm1.isEval());
      assertFalse(jSTerm1.isConstant());
      assertEquals("[jFxA%Rdj8%, [jFxA%Rdj8%]]", jSTerm1.toString());
      assertFalse(jSTerm1.isVariable());
      assertEquals(2, jSTerm1.size());
      assertEquals(10, jSTerm1.capacity());
      assertEquals(1, jSTerm2.capacity());
      assertEquals("[jFxA%Rdj8%]", jSTerm2.toString());
      assertFalse(jSTerm2.isVariable());
      assertFalse(jSTerm2.isConstant());
      assertFalse(jSTerm2.isEmpty());
      assertFalse(jSTerm2.isEval());
      assertEquals(1, jSTerm2.size());
      assertTrue(jSTerm2.isFunction());
      assertTrue(jSSubstitution1.fail());
      assertEquals(10, jSSubstitution1.capacity());
      assertEquals("[]", jSSubstitution1.toString());
      assertTrue(jSSubstitution1.isEmpty());
      assertEquals(0, jSSubstitution1.size());
      assertNotSame(jSSubstitution0, jSSubstitution1);
      assertSame(jSTerm0, jSTerm1);
      assertNotSame(jSTerm0, jSTerm2);
      assertNotSame(jSTerm1, jSTerm2);
      assertSame(jSTerm1, jSTerm0);
      assertNotSame(jSTerm2, jSTerm1);
      assertNotSame(jSTerm2, jSTerm0);
      assertNotSame(jSSubstitution1, jSSubstitution0);
      assertNotNull(jSSubstitution1);
      assertFalse(jSTerm0.equals((Object)jSTerm2));
      assertFalse(jSTerm1.equals((Object)jSTerm2));
      assertFalse(jSTerm2.equals((Object)jSTerm1));
      assertFalse(jSTerm2.equals((Object)jSTerm0));
      assertTrue(jSSubstitution1.equals((Object)jSSubstitution0));
      assertEquals(32, streamTokenizer0.ttype);
      assertEquals(0.0, streamTokenizer0.nval, 0.01);
      
      boolean boolean2 = jSTerm0.equals(jSTerm2);
      assertEquals(10, jSSubstitution0.capacity());
      assertEquals(0, jSSubstitution0.size());
      assertEquals("[]", jSSubstitution0.toString());
      assertTrue(jSSubstitution0.isEmpty());
      assertFalse(jSSubstitution0.fail());
      assertEquals(1, streamTokenizer0.lineno());
      assertEquals("Token[' '], line 1", streamTokenizer0.toString());
      assertFalse(jSTerm0.isVariable());
      assertEquals(2, jSTerm0.size());
      assertFalse(jSTerm0.isConstant());
      assertEquals(10, jSTerm0.capacity());
      assertTrue(jSTerm0.isEval());
      assertFalse(jSTerm0.isEmpty());
      assertTrue(jSTerm0.isFunction());
      assertEquals("[jFxA%Rdj8%, [jFxA%Rdj8%]]", jSTerm0.toString());
      assertFalse(jSTerm1.isEmpty());
      assertTrue(jSTerm1.isFunction());
      assertTrue(jSTerm1.isEval());
      assertFalse(jSTerm1.isConstant());
      assertEquals("[jFxA%Rdj8%, [jFxA%Rdj8%]]", jSTerm1.toString());
      assertFalse(jSTerm1.isVariable());
      assertEquals(2, jSTerm1.size());
      assertEquals(10, jSTerm1.capacity());
      assertEquals(1, jSTerm2.capacity());
      assertEquals("[jFxA%Rdj8%]", jSTerm2.toString());
      assertFalse(jSTerm2.isVariable());
      assertFalse(jSTerm2.isConstant());
      assertFalse(jSTerm2.isEmpty());
      assertFalse(jSTerm2.isEval());
      assertEquals(1, jSTerm2.size());
      assertTrue(jSTerm2.isFunction());
      assertFalse(boolean2);
      assertNotSame(jSSubstitution0, jSSubstitution1);
      assertSame(jSTerm0, jSTerm1);
      assertNotSame(jSTerm0, jSTerm2);
      assertNotSame(jSTerm1, jSTerm2);
      assertSame(jSTerm1, jSTerm0);
      assertNotSame(jSTerm2, jSTerm1);
      assertNotSame(jSTerm2, jSTerm0);
      assertTrue(jSSubstitution0.equals((Object)jSSubstitution1));
      assertFalse(jSTerm0.equals((Object)jSTerm2));
      assertFalse(jSTerm1.equals((Object)jSTerm2));
      assertFalse(jSTerm2.equals((Object)jSTerm1));
      assertFalse(jSTerm2.equals((Object)jSTerm0));
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      assertEquals(32, streamTokenizer0.ttype);
      assertEquals(0.0, streamTokenizer0.nval, 0.01);
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      assertFalse(jSTerm0.isConstant());
      assertFalse(jSTerm0.isVariable());
      assertEquals(0, jSTerm0.size());
      assertFalse(jSTerm0.isEval());
      assertTrue(jSTerm0.isEmpty());
      assertEquals("[]", jSTerm0.toString());
      assertEquals(10, jSTerm0.capacity());
      assertFalse(jSTerm0.isFunction());
      assertNotNull(jSTerm0);
      
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      assertFalse(jSSubstitution0.fail());
      assertTrue(jSSubstitution0.isEmpty());
      assertEquals(0, jSSubstitution0.size());
      assertEquals(10, jSSubstitution0.capacity());
      assertEquals("[]", jSSubstitution0.toString());
      assertNotNull(jSSubstitution0);
      
      boolean boolean0 = jSSubstitution0.add((Object) jSTerm0);
      assertFalse(jSTerm0.isConstant());
      assertFalse(jSTerm0.isVariable());
      assertEquals(0, jSTerm0.size());
      assertFalse(jSTerm0.isEval());
      assertTrue(jSTerm0.isEmpty());
      assertEquals("[]", jSTerm0.toString());
      assertEquals(10, jSTerm0.capacity());
      assertFalse(jSTerm0.isFunction());
      assertFalse(jSSubstitution0.fail());
      assertEquals("[[]]", jSSubstitution0.toString());
      assertEquals(1, jSSubstitution0.size());
      assertFalse(jSSubstitution0.isEmpty());
      assertEquals(10, jSSubstitution0.capacity());
      assertTrue(boolean0);
      
      boolean boolean1 = jSTerm0.add((Object) jSSubstitution0);
      assertFalse(jSTerm0.isConstant());
      assertFalse(jSTerm0.isEmpty());
      assertFalse(jSTerm0.isVariable());
      assertEquals(1, jSTerm0.size());
      assertFalse(jSTerm0.isEval());
      assertEquals(10, jSTerm0.capacity());
      assertFalse(jSTerm0.isFunction());
      assertFalse(jSSubstitution0.fail());
      assertEquals(1, jSSubstitution0.size());
      assertFalse(jSSubstitution0.isEmpty());
      assertEquals(10, jSSubstitution0.capacity());
      assertTrue(boolean1);
      assertTrue(boolean1 == boolean0);
      
      // Undeclared exception!
      try { 
        jSTerm0.toStr();
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      assertFalse(jSTerm0.isFunction());
      assertEquals(10, jSTerm0.capacity());
      assertEquals("[]", jSTerm0.toString());
      assertFalse(jSTerm0.isConstant());
      assertEquals(0, jSTerm0.size());
      assertFalse(jSTerm0.isEval());
      assertTrue(jSTerm0.isEmpty());
      assertFalse(jSTerm0.isVariable());
      assertNotNull(jSTerm0);
      
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      assertTrue(jSSubstitution0.isEmpty());
      assertEquals("[]", jSSubstitution0.toString());
      assertFalse(jSSubstitution0.fail());
      assertEquals(0, jSSubstitution0.size());
      assertEquals(10, jSSubstitution0.capacity());
      assertNotNull(jSSubstitution0);
      
      StringReader stringReader0 = new StringReader("nUTD]/;Ku- $6F}");
      assertNotNull(stringReader0);
      
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      assertEquals("Token[NOTHING], line 1", streamTokenizer0.toString());
      assertEquals(1, streamTokenizer0.lineno());
      assertNotNull(streamTokenizer0);
      assertEquals((-4), streamTokenizer0.ttype);
      assertEquals(0.0, streamTokenizer0.nval, 0.01);
      
      JSTerm jSTerm1 = new JSTerm(streamTokenizer0);
      assertEquals(1, streamTokenizer0.lineno());
      assertEquals("Token[EOF], line 1", streamTokenizer0.toString());
      assertEquals("[%%%]", jSTerm1.toString());
      assertFalse(jSTerm1.isEmpty());
      assertEquals(10, jSTerm1.capacity());
      assertFalse(jSTerm1.isFunction());
      assertEquals(1, jSTerm1.size());
      assertTrue(jSTerm1.isConstant());
      assertFalse(jSTerm1.isEval());
      assertFalse(jSTerm1.isVariable());
      assertNotNull(jSTerm1);
      assertFalse(jSTerm1.equals((Object)jSTerm0));
      assertEquals(0.0, streamTokenizer0.nval, 0.01);
      assertEquals((-1), streamTokenizer0.ttype);
      
      JSSubstitution jSSubstitution1 = jSTerm1.matches(jSTerm0, jSSubstitution0);
      assertFalse(jSTerm0.isFunction());
      assertEquals(10, jSTerm0.capacity());
      assertEquals("[]", jSTerm0.toString());
      assertFalse(jSTerm0.isConstant());
      assertEquals(0, jSTerm0.size());
      assertFalse(jSTerm0.isEval());
      assertTrue(jSTerm0.isEmpty());
      assertFalse(jSTerm0.isVariable());
      assertTrue(jSSubstitution0.isEmpty());
      assertEquals("[]", jSSubstitution0.toString());
      assertFalse(jSSubstitution0.fail());
      assertEquals(0, jSSubstitution0.size());
      assertEquals(10, jSSubstitution0.capacity());
      assertEquals(1, streamTokenizer0.lineno());
      assertEquals("Token[EOF], line 1", streamTokenizer0.toString());
      assertEquals("[%%%]", jSTerm1.toString());
      assertFalse(jSTerm1.isEmpty());
      assertEquals(10, jSTerm1.capacity());
      assertFalse(jSTerm1.isFunction());
      assertEquals(1, jSTerm1.size());
      assertTrue(jSTerm1.isConstant());
      assertFalse(jSTerm1.isEval());
      assertFalse(jSTerm1.isVariable());
      assertTrue(jSSubstitution1.fail());
      assertEquals(10, jSSubstitution1.capacity());
      assertEquals("[]", jSSubstitution1.toString());
      assertTrue(jSSubstitution1.isEmpty());
      assertEquals(0, jSSubstitution1.size());
      assertNotSame(jSTerm0, jSTerm1);
      assertNotSame(jSSubstitution0, jSSubstitution1);
      assertNotSame(jSTerm1, jSTerm0);
      assertNotSame(jSSubstitution1, jSSubstitution0);
      assertNotNull(jSSubstitution1);
      assertFalse(jSTerm0.equals((Object)jSTerm1));
      assertFalse(jSTerm1.equals((Object)jSTerm0));
      assertTrue(jSSubstitution1.equals((Object)jSSubstitution0));
      assertEquals(0.0, streamTokenizer0.nval, 0.01);
      assertEquals((-1), streamTokenizer0.ttype);
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      assertFalse(jSSubstitution0.fail());
      assertTrue(jSSubstitution0.isEmpty());
      assertEquals(10, jSSubstitution0.capacity());
      assertEquals(0, jSSubstitution0.size());
      assertEquals("[]", jSSubstitution0.toString());
      assertNotNull(jSSubstitution0);
      
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      assertTrue(jSSubstitution1.isEmpty());
      assertEquals(10, jSSubstitution1.capacity());
      assertEquals("[]", jSSubstitution1.toString());
      assertFalse(jSSubstitution1.fail());
      assertEquals(0, jSSubstitution1.size());
      assertNotNull(jSSubstitution1);
      assertTrue(jSSubstitution1.equals((Object)jSSubstitution0));
      
      StringReader stringReader0 = new StringReader("?i{lfA");
      assertNotNull(stringReader0);
      
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      assertEquals("Token[NOTHING], line 1", streamTokenizer0.toString());
      assertEquals(1, streamTokenizer0.lineno());
      assertNotNull(streamTokenizer0);
      assertEquals(0.0, streamTokenizer0.nval, 0.01);
      assertEquals((-4), streamTokenizer0.ttype);
      
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      assertEquals(1, streamTokenizer0.lineno());
      assertEquals("Token[EOF], line 1", streamTokenizer0.toString());
      assertEquals("[?%%%]", jSTerm0.toString());
      assertFalse(jSTerm0.isFunction());
      assertFalse(jSTerm0.isEval());
      assertEquals(1, jSTerm0.size());
      assertFalse(jSTerm0.isEmpty());
      assertTrue(jSTerm0.isVariable());
      assertFalse(jSTerm0.isConstant());
      assertEquals(10, jSTerm0.capacity());
      assertNotNull(jSTerm0);
      assertEquals((-1), streamTokenizer0.ttype);
      assertEquals(0.0, streamTokenizer0.nval, 0.01);
      
      // Undeclared exception!
      try { 
        jSTerm0.remove(3398);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Array index out of range: 3398
         //
         verifyException("java.util.Vector", e);
      }
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      StringReader stringReader0 = new StringReader("B8");
      assertNotNull(stringReader0);
      
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      assertEquals("Token[NOTHING], line 1", streamTokenizer0.toString());
      assertEquals(1, streamTokenizer0.lineno());
      assertNotNull(streamTokenizer0);
      assertEquals(0.0, streamTokenizer0.nval, 0.01);
      assertEquals((-4), streamTokenizer0.ttype);
      
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      assertEquals(1, streamTokenizer0.lineno());
      assertEquals("Token[EOF], line 1", streamTokenizer0.toString());
      assertTrue(jSTerm0.isConstant());
      assertEquals("[%%%]", jSTerm0.toString());
      assertFalse(jSTerm0.isEmpty());
      assertFalse(jSTerm0.isVariable());
      assertFalse(jSTerm0.isEval());
      assertEquals(1, jSTerm0.size());
      assertEquals(10, jSTerm0.capacity());
      assertFalse(jSTerm0.isFunction());
      assertNotNull(jSTerm0);
      assertEquals(0.0, streamTokenizer0.nval, 0.01);
      assertEquals((-1), streamTokenizer0.ttype);
      
      boolean boolean0 = jSTerm0.isGround();
      assertEquals(1, streamTokenizer0.lineno());
      assertEquals("Token[EOF], line 1", streamTokenizer0.toString());
      assertTrue(jSTerm0.isConstant());
      assertEquals("[%%%]", jSTerm0.toString());
      assertFalse(jSTerm0.isEmpty());
      assertFalse(jSTerm0.isVariable());
      assertFalse(jSTerm0.isEval());
      assertEquals(1, jSTerm0.size());
      assertEquals(10, jSTerm0.capacity());
      assertFalse(jSTerm0.isFunction());
      assertTrue(boolean0);
      assertEquals(0.0, streamTokenizer0.nval, 0.01);
      assertEquals((-1), streamTokenizer0.ttype);
      
      JSTerm jSTerm1 = new JSTerm();
      assertFalse(jSTerm1.isFunction());
      assertFalse(jSTerm1.isConstant());
      assertEquals(10, jSTerm1.capacity());
      assertEquals("[]", jSTerm1.toString());
      assertEquals(0, jSTerm1.size());
      assertFalse(jSTerm1.isEval());
      assertFalse(jSTerm1.isVariable());
      assertTrue(jSTerm1.isEmpty());
      assertNotNull(jSTerm1);
      assertFalse(jSTerm1.equals((Object)jSTerm0));
      
      boolean boolean1 = jSTerm0.retainAll(jSTerm1);
      assertEquals(1, streamTokenizer0.lineno());
      assertEquals("Token[EOF], line 1", streamTokenizer0.toString());
      assertTrue(jSTerm0.isConstant());
      assertTrue(jSTerm0.isEmpty());
      assertEquals("[]", jSTerm0.toString());
      assertFalse(jSTerm0.isVariable());
      assertFalse(jSTerm0.isEval());
      assertEquals(0, jSTerm0.size());
      assertEquals(10, jSTerm0.capacity());
      assertFalse(jSTerm0.isFunction());
      assertFalse(jSTerm1.isFunction());
      assertFalse(jSTerm1.isConstant());
      assertEquals(10, jSTerm1.capacity());
      assertEquals("[]", jSTerm1.toString());
      assertEquals(0, jSTerm1.size());
      assertFalse(jSTerm1.isEval());
      assertFalse(jSTerm1.isVariable());
      assertTrue(jSTerm1.isEmpty());
      assertTrue(boolean1);
      assertNotSame(jSTerm0, jSTerm1);
      assertNotSame(jSTerm1, jSTerm0);
      assertTrue(jSTerm0.equals((Object)jSTerm1));
      assertTrue(jSTerm1.equals((Object)jSTerm0));
      assertTrue(boolean1 == boolean0);
      assertEquals(0.0, streamTokenizer0.nval, 0.01);
      assertEquals((-1), streamTokenizer0.ttype);
      
      int int0 = 42;
      JSJshopVars.leftPar = int0;
      boolean boolean2 = true;
      jSTerm1.makeEval(boolean2);
      assertFalse(jSTerm1.isFunction());
      assertFalse(jSTerm1.isConstant());
      assertEquals(10, jSTerm1.capacity());
      assertEquals("[]", jSTerm1.toString());
      assertEquals(0, jSTerm1.size());
      assertFalse(jSTerm1.isVariable());
      assertTrue(jSTerm1.isEval());
      assertTrue(jSTerm1.isEmpty());
      assertNotSame(jSTerm1, jSTerm0);
      assertTrue(jSTerm1.equals((Object)jSTerm0));
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      
      int int1 = 1800;
      // Undeclared exception!
      try { 
        jSTerm1.get(int1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Array index out of range: 1800
         //
         verifyException("java.util.Vector", e);
      }
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      assertFalse(jSTerm0.isConstant());
      assertTrue(jSTerm0.isEmpty());
      assertEquals("[]", jSTerm0.toString());
      assertFalse(jSTerm0.isFunction());
      assertEquals(10, jSTerm0.capacity());
      assertFalse(jSTerm0.isVariable());
      assertFalse(jSTerm0.isEval());
      assertEquals(0, jSTerm0.size());
      assertNotNull(jSTerm0);
      
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      assertEquals("[]", jSSubstitution0.toString());
      assertEquals(10, jSSubstitution0.capacity());
      assertTrue(jSSubstitution0.isEmpty());
      assertFalse(jSSubstitution0.fail());
      assertEquals(0, jSSubstitution0.size());
      assertNotNull(jSSubstitution0);
      
      jSTerm0.makeVariable();
      assertFalse(jSTerm0.isConstant());
      assertTrue(jSTerm0.isVariable());
      assertTrue(jSTerm0.isEmpty());
      assertEquals("[]", jSTerm0.toString());
      assertFalse(jSTerm0.isFunction());
      assertEquals(10, jSTerm0.capacity());
      assertFalse(jSTerm0.isEval());
      assertEquals(0, jSTerm0.size());
      
      JSTerm jSTerm1 = new JSTerm();
      assertTrue(jSTerm1.isEmpty());
      assertFalse(jSTerm1.isVariable());
      assertEquals(10, jSTerm1.capacity());
      assertFalse(jSTerm1.isEval());
      assertEquals(0, jSTerm1.size());
      assertFalse(jSTerm1.isConstant());
      assertEquals("[]", jSTerm1.toString());
      assertFalse(jSTerm1.isFunction());
      assertNotNull(jSTerm1);
      assertTrue(jSTerm1.equals((Object)jSTerm0));
      
      // Undeclared exception!
      try { 
        jSTerm0.matches(jSTerm1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      assertEquals("[]", jSSubstitution0.toString());
      assertTrue(jSSubstitution0.isEmpty());
      assertFalse(jSSubstitution0.fail());
      assertEquals(10, jSSubstitution0.capacity());
      assertEquals(0, jSSubstitution0.size());
      assertNotNull(jSSubstitution0);
      
      StringReader stringReader0 = new StringReader("jFxA%Jdj8% jSYy> MR");
      assertNotNull(stringReader0);
      
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      assertEquals(1, streamTokenizer0.lineno());
      assertEquals("Token[NOTHING], line 1", streamTokenizer0.toString());
      assertNotNull(streamTokenizer0);
      assertEquals(0.0, streamTokenizer0.nval, 0.01);
      assertEquals((-4), streamTokenizer0.ttype);
      
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      assertEquals(1, streamTokenizer0.lineno());
      assertEquals("Token[' '], line 1", streamTokenizer0.toString());
      assertTrue(jSTerm0.isConstant());
      assertEquals(10, jSTerm0.capacity());
      assertFalse(jSTerm0.isFunction());
      assertFalse(jSTerm0.isVariable());
      assertEquals(1, jSTerm0.size());
      assertFalse(jSTerm0.isEval());
      assertFalse(jSTerm0.isEmpty());
      assertEquals("[jFxA%Jdj8%]", jSTerm0.toString());
      assertNotNull(jSTerm0);
      assertEquals(0.0, streamTokenizer0.nval, 0.01);
      assertEquals(32, streamTokenizer0.ttype);
      
      JSTerm jSTerm1 = (JSTerm)jSTerm0.clone();
      assertEquals(1, streamTokenizer0.lineno());
      assertEquals("Token[' '], line 1", streamTokenizer0.toString());
      assertTrue(jSTerm0.isConstant());
      assertEquals(10, jSTerm0.capacity());
      assertFalse(jSTerm0.isFunction());
      assertFalse(jSTerm0.isVariable());
      assertEquals(1, jSTerm0.size());
      assertFalse(jSTerm0.isEval());
      assertFalse(jSTerm0.isEmpty());
      assertEquals("[jFxA%Jdj8%]", jSTerm0.toString());
      assertFalse(jSTerm1.isEval());
      assertEquals(1, jSTerm1.size());
      assertFalse(jSTerm1.isFunction());
      assertFalse(jSTerm1.isEmpty());
      assertEquals("[jFxA%Jdj8%]", jSTerm1.toString());
      assertEquals(1, jSTerm1.capacity());
      assertFalse(jSTerm1.isVariable());
      assertTrue(jSTerm1.isConstant());
      assertNotSame(jSTerm0, jSTerm1);
      assertNotSame(jSTerm1, jSTerm0);
      assertNotNull(jSTerm1);
      assertTrue(jSTerm1.equals((Object)jSTerm0));
      assertEquals(0.0, streamTokenizer0.nval, 0.01);
      assertEquals(32, streamTokenizer0.ttype);
      
      boolean boolean0 = jSTerm0.add((Object) null);
      assertEquals(1, streamTokenizer0.lineno());
      assertEquals("Token[' '], line 1", streamTokenizer0.toString());
      assertEquals("[jFxA%Jdj8%, null]", jSTerm0.toString());
      assertTrue(jSTerm0.isConstant());
      assertEquals(10, jSTerm0.capacity());
      assertEquals(2, jSTerm0.size());
      assertFalse(jSTerm0.isFunction());
      assertFalse(jSTerm0.isVariable());
      assertFalse(jSTerm0.isEval());
      assertFalse(jSTerm0.isEmpty());
      assertTrue(boolean0);
      assertNotSame(jSTerm0, jSTerm1);
      assertFalse(jSTerm0.equals((Object)jSTerm1));
      assertEquals(0.0, streamTokenizer0.nval, 0.01);
      assertEquals(32, streamTokenizer0.ttype);
      
      jSTerm0.makeEval(false);
      assertEquals(1, streamTokenizer0.lineno());
      assertEquals("Token[' '], line 1", streamTokenizer0.toString());
      assertEquals("[jFxA%Jdj8%, null]", jSTerm0.toString());
      assertTrue(jSTerm0.isConstant());
      assertEquals(10, jSTerm0.capacity());
      assertEquals(2, jSTerm0.size());
      assertFalse(jSTerm0.isFunction());
      assertFalse(jSTerm0.isVariable());
      assertFalse(jSTerm0.isEval());
      assertFalse(jSTerm0.isEmpty());
      assertNotSame(jSTerm0, jSTerm1);
      assertFalse(jSTerm0.equals((Object)jSTerm1));
      assertEquals(0.0, streamTokenizer0.nval, 0.01);
      assertEquals(32, streamTokenizer0.ttype);
      
      jSTerm0.makeFunction();
      assertEquals(1, streamTokenizer0.lineno());
      assertEquals("Token[' '], line 1", streamTokenizer0.toString());
      assertTrue(jSTerm0.isFunction());
      assertEquals("[jFxA%Jdj8%, null]", jSTerm0.toString());
      assertEquals(10, jSTerm0.capacity());
      assertEquals(2, jSTerm0.size());
      assertFalse(jSTerm0.isVariable());
      assertFalse(jSTerm0.isEval());
      assertFalse(jSTerm0.isConstant());
      assertFalse(jSTerm0.isEmpty());
      assertNotSame(jSTerm0, jSTerm1);
      assertFalse(jSTerm0.equals((Object)jSTerm1));
      assertEquals(0.0, streamTokenizer0.nval, 0.01);
      assertEquals(32, streamTokenizer0.ttype);
      
      // Undeclared exception!
      try { 
        jSTerm0.call();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      assertEquals(10, jSSubstitution0.capacity());
      assertEquals("[]", jSSubstitution0.toString());
      assertTrue(jSSubstitution0.isEmpty());
      assertFalse(jSSubstitution0.fail());
      assertEquals(0, jSSubstitution0.size());
      assertNotNull(jSSubstitution0);
      
      StringReader stringReader0 = new StringReader("jFxA%Rdj8% jSYG> MR");
      assertNotNull(stringReader0);
      
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      assertEquals("Token[NOTHING], line 1", streamTokenizer0.toString());
      assertEquals(1, streamTokenizer0.lineno());
      assertNotNull(streamTokenizer0);
      assertEquals(0.0, streamTokenizer0.nval, 0.01);
      assertEquals((-4), streamTokenizer0.ttype);
      
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      assertEquals(1, streamTokenizer0.lineno());
      assertEquals("Token[' '], line 1", streamTokenizer0.toString());
      assertFalse(jSTerm0.isEmpty());
      assertTrue(jSTerm0.isConstant());
      assertFalse(jSTerm0.isEval());
      assertFalse(jSTerm0.isVariable());
      assertEquals(1, jSTerm0.size());
      assertEquals("[jFxA%Rdj8%]", jSTerm0.toString());
      assertEquals(10, jSTerm0.capacity());
      assertFalse(jSTerm0.isFunction());
      assertNotNull(jSTerm0);
      assertEquals(0.0, streamTokenizer0.nval, 0.01);
      assertEquals(32, streamTokenizer0.ttype);
      
      JSTerm jSTerm1 = jSSubstitution0.instance(jSTerm0);
      assertEquals(10, jSSubstitution0.capacity());
      assertEquals("[]", jSSubstitution0.toString());
      assertTrue(jSSubstitution0.isEmpty());
      assertFalse(jSSubstitution0.fail());
      assertEquals(0, jSSubstitution0.size());
      assertEquals(1, streamTokenizer0.lineno());
      assertEquals("Token[' '], line 1", streamTokenizer0.toString());
      assertFalse(jSTerm0.isEmpty());
      assertTrue(jSTerm0.isConstant());
      assertFalse(jSTerm0.isEval());
      assertFalse(jSTerm0.isVariable());
      assertEquals(1, jSTerm0.size());
      assertEquals("[jFxA%Rdj8%]", jSTerm0.toString());
      assertEquals(10, jSTerm0.capacity());
      assertFalse(jSTerm0.isFunction());
      assertFalse(jSTerm1.isEmpty());
      assertFalse(jSTerm1.isVariable());
      assertEquals(1, jSTerm1.size());
      assertFalse(jSTerm1.isEval());
      assertEquals("[jFxA%Rdj8%]", jSTerm1.toString());
      assertTrue(jSTerm1.isConstant());
      assertEquals(10, jSTerm1.capacity());
      assertFalse(jSTerm1.isFunction());
      assertSame(jSTerm0, jSTerm1);
      assertSame(jSTerm1, jSTerm0);
      assertNotNull(jSTerm1);
      assertEquals(0.0, streamTokenizer0.nval, 0.01);
      assertEquals(32, streamTokenizer0.ttype);
      
      boolean boolean0 = jSTerm0.add((Object) jSTerm1);
      assertEquals(10, jSSubstitution0.capacity());
      assertEquals("[]", jSSubstitution0.toString());
      assertTrue(jSSubstitution0.isEmpty());
      assertFalse(jSSubstitution0.fail());
      assertEquals(0, jSSubstitution0.size());
      assertEquals(1, streamTokenizer0.lineno());
      assertEquals("Token[' '], line 1", streamTokenizer0.toString());
      assertFalse(jSTerm0.isEmpty());
      assertTrue(jSTerm0.isConstant());
      assertFalse(jSTerm0.isEval());
      assertEquals("[jFxA%Rdj8%, (this Collection)]", jSTerm0.toString());
      assertFalse(jSTerm0.isVariable());
      assertEquals(2, jSTerm0.size());
      assertEquals(10, jSTerm0.capacity());
      assertFalse(jSTerm0.isFunction());
      assertFalse(jSTerm1.isEmpty());
      assertEquals(2, jSTerm1.size());
      assertFalse(jSTerm1.isVariable());
      assertEquals("[jFxA%Rdj8%, (this Collection)]", jSTerm1.toString());
      assertFalse(jSTerm1.isEval());
      assertTrue(jSTerm1.isConstant());
      assertEquals(10, jSTerm1.capacity());
      assertFalse(jSTerm1.isFunction());
      assertTrue(boolean0);
      assertSame(jSTerm0, jSTerm1);
      assertSame(jSTerm1, jSTerm0);
      assertEquals(0.0, streamTokenizer0.nval, 0.01);
      assertEquals(32, streamTokenizer0.ttype);
      
      JSSubstitution jSSubstitution1 = jSTerm0.matches(jSTerm1, jSSubstitution0);
      assertEquals(10, jSSubstitution0.capacity());
      assertEquals("[]", jSSubstitution0.toString());
      assertTrue(jSSubstitution0.isEmpty());
      assertFalse(jSSubstitution0.fail());
      assertEquals(0, jSSubstitution0.size());
      assertEquals(1, streamTokenizer0.lineno());
      assertEquals("Token[' '], line 1", streamTokenizer0.toString());
      assertFalse(jSTerm0.isEmpty());
      assertTrue(jSTerm0.isConstant());
      assertFalse(jSTerm0.isEval());
      assertEquals("[jFxA%Rdj8%, (this Collection)]", jSTerm0.toString());
      assertFalse(jSTerm0.isVariable());
      assertEquals(2, jSTerm0.size());
      assertEquals(10, jSTerm0.capacity());
      assertFalse(jSTerm0.isFunction());
      assertFalse(jSTerm1.isEmpty());
      assertEquals(2, jSTerm1.size());
      assertFalse(jSTerm1.isVariable());
      assertEquals("[jFxA%Rdj8%, (this Collection)]", jSTerm1.toString());
      assertFalse(jSTerm1.isEval());
      assertTrue(jSTerm1.isConstant());
      assertEquals(10, jSTerm1.capacity());
      assertFalse(jSTerm1.isFunction());
      assertTrue(jSSubstitution1.isEmpty());
      assertEquals(10, jSSubstitution1.capacity());
      assertEquals("[]", jSSubstitution1.toString());
      assertFalse(jSSubstitution1.fail());
      assertEquals(0, jSSubstitution1.size());
      assertNotSame(jSSubstitution0, jSSubstitution1);
      assertSame(jSTerm0, jSTerm1);
      assertSame(jSTerm1, jSTerm0);
      assertNotSame(jSSubstitution1, jSSubstitution0);
      assertNotNull(jSSubstitution1);
      assertTrue(jSSubstitution1.equals((Object)jSSubstitution0));
      assertEquals(0.0, streamTokenizer0.nval, 0.01);
      assertEquals(32, streamTokenizer0.ttype);
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      assertEquals(10, jSSubstitution0.capacity());
      assertEquals("[]", jSSubstitution0.toString());
      assertTrue(jSSubstitution0.isEmpty());
      assertEquals(0, jSSubstitution0.size());
      assertFalse(jSSubstitution0.fail());
      assertNotNull(jSSubstitution0);
      
      JSTerm jSTerm0 = new JSTerm();
      assertEquals(10, jSTerm0.capacity());
      assertFalse(jSTerm0.isFunction());
      assertFalse(jSTerm0.isVariable());
      assertEquals("[]", jSTerm0.toString());
      assertFalse(jSTerm0.isConstant());
      assertFalse(jSTerm0.isEval());
      assertEquals(0, jSTerm0.size());
      assertTrue(jSTerm0.isEmpty());
      assertNotNull(jSTerm0);
      
      jSTerm0.addElement((Object) null);
      assertEquals(10, jSTerm0.capacity());
      assertFalse(jSTerm0.isFunction());
      assertFalse(jSTerm0.isVariable());
      assertFalse(jSTerm0.isConstant());
      assertEquals("[null]", jSTerm0.toString());
      assertFalse(jSTerm0.isEmpty());
      assertFalse(jSTerm0.isEval());
      assertEquals(1, jSTerm0.size());
      
      boolean boolean0 = jSTerm0.add((Object) jSSubstitution0);
      assertEquals(10, jSSubstitution0.capacity());
      assertEquals("[]", jSSubstitution0.toString());
      assertTrue(jSSubstitution0.isEmpty());
      assertEquals(0, jSSubstitution0.size());
      assertFalse(jSSubstitution0.fail());
      assertEquals(10, jSTerm0.capacity());
      assertEquals(2, jSTerm0.size());
      assertFalse(jSTerm0.isFunction());
      assertFalse(jSTerm0.isVariable());
      assertFalse(jSTerm0.isConstant());
      assertFalse(jSTerm0.isEmpty());
      assertFalse(jSTerm0.isEval());
      assertEquals("[null, []]", jSTerm0.toString());
      assertTrue(boolean0);
      
      // Undeclared exception!
      try { 
        jSTerm0.applySubstitutionT(jSSubstitution0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // umd.cs.shop.JSSubstitution cannot be cast to umd.cs.shop.JSTerm
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      assertTrue(jSTerm0.isEmpty());
      assertEquals("[]", jSTerm0.toString());
      assertFalse(jSTerm0.isVariable());
      assertEquals(0, jSTerm0.size());
      assertFalse(jSTerm0.isEval());
      assertFalse(jSTerm0.isConstant());
      assertEquals(10, jSTerm0.capacity());
      assertFalse(jSTerm0.isFunction());
      assertNotNull(jSTerm0);
      
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      assertEquals("[]", jSSubstitution0.toString());
      assertFalse(jSSubstitution0.fail());
      assertEquals(0, jSSubstitution0.size());
      assertEquals(10, jSSubstitution0.capacity());
      assertTrue(jSSubstitution0.isEmpty());
      assertNotNull(jSSubstitution0);
      
      boolean boolean0 = jSTerm0.add((Object) jSSubstitution0);
      assertFalse(jSTerm0.isVariable());
      assertEquals(1, jSTerm0.size());
      assertFalse(jSTerm0.isEval());
      assertFalse(jSTerm0.isConstant());
      assertFalse(jSTerm0.isEmpty());
      assertEquals(10, jSTerm0.capacity());
      assertEquals("[[]]", jSTerm0.toString());
      assertFalse(jSTerm0.isFunction());
      assertEquals("[]", jSSubstitution0.toString());
      assertFalse(jSSubstitution0.fail());
      assertEquals(0, jSSubstitution0.size());
      assertEquals(10, jSSubstitution0.capacity());
      assertTrue(jSSubstitution0.isEmpty());
      assertTrue(boolean0);
      
      JSTerm jSTerm1 = jSTerm0.applySubstitutionT(jSSubstitution0);
      assertFalse(jSTerm0.isVariable());
      assertEquals(1, jSTerm0.size());
      assertFalse(jSTerm0.isEval());
      assertFalse(jSTerm0.isConstant());
      assertFalse(jSTerm0.isEmpty());
      assertEquals(10, jSTerm0.capacity());
      assertEquals("[[]]", jSTerm0.toString());
      assertFalse(jSTerm0.isFunction());
      assertEquals("[]", jSSubstitution0.toString());
      assertFalse(jSSubstitution0.fail());
      assertEquals(0, jSSubstitution0.size());
      assertEquals(10, jSSubstitution0.capacity());
      assertTrue(jSSubstitution0.isEmpty());
      assertTrue(jSTerm1.isFunction());
      assertFalse(jSTerm1.isVariable());
      assertFalse(jSTerm1.isEval());
      assertEquals(1, jSTerm1.size());
      assertEquals("[[]]", jSTerm1.toString());
      assertFalse(jSTerm1.isEmpty());
      assertFalse(jSTerm1.isConstant());
      assertEquals(10, jSTerm1.capacity());
      assertNotSame(jSTerm0, jSTerm1);
      assertNotSame(jSTerm1, jSTerm0);
      assertNotNull(jSTerm1);
      assertTrue(jSTerm1.equals((Object)jSTerm0));
      
      // Undeclared exception!
      try { 
        jSTerm0.matches(jSTerm1, jSSubstitution0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // umd.cs.shop.JSSubstitution cannot be cast to java.lang.String
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      assertFalse(jSTerm0.isVariable());
      assertFalse(jSTerm0.isFunction());
      assertEquals(10, jSTerm0.capacity());
      assertTrue(jSTerm0.isEmpty());
      assertEquals("[]", jSTerm0.toString());
      assertFalse(jSTerm0.isConstant());
      assertFalse(jSTerm0.isEval());
      assertEquals(0, jSTerm0.size());
      assertNotNull(jSTerm0);
      
      StringReader stringReader0 = new StringReader("?");
      assertNotNull(stringReader0);
      
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      assertEquals("Token[NOTHING], line 1", streamTokenizer0.toString());
      assertEquals(1, streamTokenizer0.lineno());
      assertNotNull(streamTokenizer0);
      assertEquals((-4), streamTokenizer0.ttype);
      assertEquals(0.0, streamTokenizer0.nval, 0.01);
      
      JSTerm jSTerm1 = null;
      try {
        jSTerm1 = new JSTerm(streamTokenizer0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      StringReader stringReader0 = new StringReader("5,ZL~");
      assertNotNull(stringReader0);
      
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      assertEquals(1, streamTokenizer0.lineno());
      assertEquals("Token[NOTHING], line 1", streamTokenizer0.toString());
      assertNotNull(streamTokenizer0);
      assertEquals(0.0, streamTokenizer0.nval, 0.01);
      assertEquals((-4), streamTokenizer0.ttype);
      
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      assertEquals(1, streamTokenizer0.lineno());
      assertEquals("Token[n=5.0], line 1", streamTokenizer0.toString());
      assertEquals(1, jSTerm0.size());
      assertFalse(jSTerm0.isFunction());
      assertFalse(jSTerm0.isVariable());
      assertEquals(10, jSTerm0.capacity());
      assertFalse(jSTerm0.isEmpty());
      assertFalse(jSTerm0.isEval());
      assertTrue(jSTerm0.isConstant());
      assertEquals("[5.0]", jSTerm0.toString());
      assertNotNull(jSTerm0);
      assertEquals(5.0, streamTokenizer0.nval, 0.01);
      assertEquals((-2), streamTokenizer0.ttype);
      
      // Undeclared exception!
      try { 
        jSTerm0.parseList(streamTokenizer0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      assertEquals("[]", jSSubstitution0.toString());
      assertFalse(jSSubstitution0.fail());
      assertTrue(jSSubstitution0.isEmpty());
      assertEquals(10, jSSubstitution0.capacity());
      assertEquals(0, jSSubstitution0.size());
      assertNotNull(jSSubstitution0);
      
      StringReader stringReader0 = new StringReader("jFxA%Rdj8% jSYG> MR");
      assertNotNull(stringReader0);
      
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      assertEquals(1, streamTokenizer0.lineno());
      assertEquals("Token[NOTHING], line 1", streamTokenizer0.toString());
      assertNotNull(streamTokenizer0);
      assertEquals(0.0, streamTokenizer0.nval, 0.01);
      assertEquals((-4), streamTokenizer0.ttype);
      
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      assertEquals(1, streamTokenizer0.lineno());
      assertEquals("Token[' '], line 1", streamTokenizer0.toString());
      assertFalse(jSTerm0.isVariable());
      assertFalse(jSTerm0.isFunction());
      assertFalse(jSTerm0.isEval());
      assertEquals(1, jSTerm0.size());
      assertEquals(10, jSTerm0.capacity());
      assertFalse(jSTerm0.isEmpty());
      assertTrue(jSTerm0.isConstant());
      assertEquals("[jFxA%Rdj8%]", jSTerm0.toString());
      assertNotNull(jSTerm0);
      assertEquals(0.0, streamTokenizer0.nval, 0.01);
      assertEquals(32, streamTokenizer0.ttype);
      
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      assertEquals(10, jSSubstitution1.capacity());
      assertTrue(jSSubstitution1.isEmpty());
      assertFalse(jSSubstitution1.fail());
      assertEquals(0, jSSubstitution1.size());
      assertEquals("[]", jSSubstitution1.toString());
      assertNotNull(jSSubstitution1);
      assertTrue(jSSubstitution1.equals((Object)jSSubstitution0));
      
      JSTerm jSTerm1 = jSSubstitution1.instance(jSTerm0);
      assertEquals(1, streamTokenizer0.lineno());
      assertEquals("Token[' '], line 1", streamTokenizer0.toString());
      assertFalse(jSTerm0.isVariable());
      assertFalse(jSTerm0.isFunction());
      assertFalse(jSTerm0.isEval());
      assertEquals(1, jSTerm0.size());
      assertEquals(10, jSTerm0.capacity());
      assertFalse(jSTerm0.isEmpty());
      assertTrue(jSTerm0.isConstant());
      assertEquals("[jFxA%Rdj8%]", jSTerm0.toString());
      assertEquals(10, jSSubstitution1.capacity());
      assertTrue(jSSubstitution1.isEmpty());
      assertFalse(jSSubstitution1.fail());
      assertEquals(0, jSSubstitution1.size());
      assertEquals("[]", jSSubstitution1.toString());
      assertEquals(1, jSTerm1.size());
      assertFalse(jSTerm1.isFunction());
      assertFalse(jSTerm1.isEval());
      assertFalse(jSTerm1.isEmpty());
      assertEquals(10, jSTerm1.capacity());
      assertTrue(jSTerm1.isConstant());
      assertEquals("[jFxA%Rdj8%]", jSTerm1.toString());
      assertFalse(jSTerm1.isVariable());
      assertSame(jSTerm0, jSTerm1);
      assertNotSame(jSSubstitution1, jSSubstitution0);
      assertSame(jSTerm1, jSTerm0);
      assertNotNull(jSTerm1);
      assertTrue(jSSubstitution1.equals((Object)jSSubstitution0));
      assertEquals(0.0, streamTokenizer0.nval, 0.01);
      assertEquals(32, streamTokenizer0.ttype);
      
      boolean boolean0 = jSTerm1.add((Object) null);
      assertEquals(1, streamTokenizer0.lineno());
      assertEquals("Token[' '], line 1", streamTokenizer0.toString());
      assertFalse(jSTerm0.isVariable());
      assertFalse(jSTerm0.isFunction());
      assertFalse(jSTerm0.isEval());
      assertEquals(10, jSTerm0.capacity());
      assertEquals(2, jSTerm0.size());
      assertEquals("[jFxA%Rdj8%, null]", jSTerm0.toString());
      assertFalse(jSTerm0.isEmpty());
      assertTrue(jSTerm0.isConstant());
      assertEquals(10, jSSubstitution1.capacity());
      assertTrue(jSSubstitution1.isEmpty());
      assertFalse(jSSubstitution1.fail());
      assertEquals(0, jSSubstitution1.size());
      assertEquals("[]", jSSubstitution1.toString());
      assertFalse(jSTerm1.isFunction());
      assertFalse(jSTerm1.isEval());
      assertFalse(jSTerm1.isEmpty());
      assertEquals(10, jSTerm1.capacity());
      assertEquals(2, jSTerm1.size());
      assertTrue(jSTerm1.isConstant());
      assertEquals("[jFxA%Rdj8%, null]", jSTerm1.toString());
      assertFalse(jSTerm1.isVariable());
      assertTrue(boolean0);
      assertSame(jSTerm0, jSTerm1);
      assertNotSame(jSSubstitution1, jSSubstitution0);
      assertSame(jSTerm1, jSTerm0);
      assertTrue(jSSubstitution1.equals((Object)jSSubstitution0));
      assertEquals(0.0, streamTokenizer0.nval, 0.01);
      assertEquals(32, streamTokenizer0.ttype);
      
      JSSubstitution jSSubstitution2 = (JSSubstitution)jSSubstitution1.clone();
      assertEquals(10, jSSubstitution1.capacity());
      assertTrue(jSSubstitution1.isEmpty());
      assertFalse(jSSubstitution1.fail());
      assertEquals(0, jSSubstitution1.size());
      assertEquals("[]", jSSubstitution1.toString());
      assertEquals("[]", jSSubstitution2.toString());
      assertEquals(0, jSSubstitution2.capacity());
      assertEquals(0, jSSubstitution2.size());
      assertTrue(jSSubstitution2.isEmpty());
      assertFalse(jSSubstitution2.fail());
      assertNotSame(jSSubstitution1, jSSubstitution0);
      assertNotSame(jSSubstitution1, jSSubstitution2);
      assertNotSame(jSSubstitution2, jSSubstitution1);
      assertNotSame(jSSubstitution2, jSSubstitution0);
      assertNotNull(jSSubstitution2);
      assertTrue(jSSubstitution1.equals((Object)jSSubstitution0));
      assertTrue(jSSubstitution2.equals((Object)jSSubstitution0));
      assertTrue(jSSubstitution2.equals((Object)jSSubstitution1));
      
      jSTerm1.makeEval(true);
      assertEquals(1, streamTokenizer0.lineno());
      assertEquals("Token[' '], line 1", streamTokenizer0.toString());
      assertFalse(jSTerm0.isVariable());
      assertFalse(jSTerm0.isFunction());
      assertEquals(10, jSTerm0.capacity());
      assertEquals(2, jSTerm0.size());
      assertEquals("[jFxA%Rdj8%, null]", jSTerm0.toString());
      assertFalse(jSTerm0.isEmpty());
      assertTrue(jSTerm0.isEval());
      assertTrue(jSTerm0.isConstant());
      assertEquals(10, jSSubstitution1.capacity());
      assertTrue(jSSubstitution1.isEmpty());
      assertFalse(jSSubstitution1.fail());
      assertEquals(0, jSSubstitution1.size());
      assertEquals("[]", jSSubstitution1.toString());
      assertFalse(jSTerm1.isFunction());
      assertFalse(jSTerm1.isEmpty());
      assertEquals(10, jSTerm1.capacity());
      assertEquals(2, jSTerm1.size());
      assertTrue(jSTerm1.isConstant());
      assertEquals("[jFxA%Rdj8%, null]", jSTerm1.toString());
      assertTrue(jSTerm1.isEval());
      assertFalse(jSTerm1.isVariable());
      assertSame(jSTerm0, jSTerm1);
      assertNotSame(jSSubstitution1, jSSubstitution0);
      assertNotSame(jSSubstitution1, jSSubstitution2);
      assertSame(jSTerm1, jSTerm0);
      assertTrue(jSSubstitution1.equals((Object)jSSubstitution0));
      assertTrue(jSSubstitution1.equals((Object)jSSubstitution2));
      assertEquals(0.0, streamTokenizer0.nval, 0.01);
      assertEquals(32, streamTokenizer0.ttype);
      
      jSTerm0.makeFunction();
      assertEquals(1, streamTokenizer0.lineno());
      assertEquals("Token[' '], line 1", streamTokenizer0.toString());
      assertFalse(jSTerm0.isVariable());
      assertFalse(jSTerm0.isConstant());
      assertEquals(10, jSTerm0.capacity());
      assertEquals(2, jSTerm0.size());
      assertEquals("[jFxA%Rdj8%, null]", jSTerm0.toString());
      assertTrue(jSTerm0.isFunction());
      assertFalse(jSTerm0.isEmpty());
      assertTrue(jSTerm0.isEval());
      assertSame(jSTerm0, jSTerm1);
      assertEquals(0.0, streamTokenizer0.nval, 0.01);
      assertEquals(32, streamTokenizer0.ttype);
      
      // Undeclared exception!
      try { 
        jSTerm0.standardizerTerm();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      assertTrue(jSSubstitution0.isEmpty());
      assertFalse(jSSubstitution0.fail());
      assertEquals(0, jSSubstitution0.size());
      assertEquals(10, jSSubstitution0.capacity());
      assertEquals("[]", jSSubstitution0.toString());
      assertNotNull(jSSubstitution0);
      
      StringReader stringReader0 = new StringReader("jFxA%Rdj8% jSYG> MR");
      assertNotNull(stringReader0);
      
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      assertEquals(1, streamTokenizer0.lineno());
      assertEquals("Token[NOTHING], line 1", streamTokenizer0.toString());
      assertNotNull(streamTokenizer0);
      assertEquals(0.0, streamTokenizer0.nval, 0.01);
      assertEquals((-4), streamTokenizer0.ttype);
      
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      assertEquals(1, streamTokenizer0.lineno());
      assertEquals("Token[' '], line 1", streamTokenizer0.toString());
      assertEquals(1, jSTerm0.size());
      assertFalse(jSTerm0.isFunction());
      assertFalse(jSTerm0.isEval());
      assertFalse(jSTerm0.isVariable());
      assertTrue(jSTerm0.isConstant());
      assertEquals("[jFxA%Rdj8%]", jSTerm0.toString());
      assertFalse(jSTerm0.isEmpty());
      assertEquals(10, jSTerm0.capacity());
      assertNotNull(jSTerm0);
      assertEquals(0.0, streamTokenizer0.nval, 0.01);
      assertEquals(32, streamTokenizer0.ttype);
      
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      assertTrue(jSSubstitution1.isEmpty());
      assertEquals(10, jSSubstitution1.capacity());
      assertEquals(0, jSSubstitution1.size());
      assertEquals("[]", jSSubstitution1.toString());
      assertFalse(jSSubstitution1.fail());
      assertNotNull(jSSubstitution1);
      assertTrue(jSSubstitution1.equals((Object)jSSubstitution0));
      
      JSTerm jSTerm1 = jSSubstitution1.instance(jSTerm0);
      assertEquals(1, streamTokenizer0.lineno());
      assertEquals("Token[' '], line 1", streamTokenizer0.toString());
      assertEquals(1, jSTerm0.size());
      assertFalse(jSTerm0.isFunction());
      assertFalse(jSTerm0.isEval());
      assertFalse(jSTerm0.isVariable());
      assertTrue(jSTerm0.isConstant());
      assertEquals("[jFxA%Rdj8%]", jSTerm0.toString());
      assertFalse(jSTerm0.isEmpty());
      assertEquals(10, jSTerm0.capacity());
      assertTrue(jSSubstitution1.isEmpty());
      assertEquals(10, jSSubstitution1.capacity());
      assertEquals(0, jSSubstitution1.size());
      assertEquals("[]", jSSubstitution1.toString());
      assertFalse(jSSubstitution1.fail());
      assertFalse(jSTerm1.isEval());
      assertEquals(10, jSTerm1.capacity());
      assertFalse(jSTerm1.isFunction());
      assertFalse(jSTerm1.isVariable());
      assertEquals("[jFxA%Rdj8%]", jSTerm1.toString());
      assertTrue(jSTerm1.isConstant());
      assertFalse(jSTerm1.isEmpty());
      assertEquals(1, jSTerm1.size());
      assertSame(jSTerm0, jSTerm1);
      assertNotSame(jSSubstitution1, jSSubstitution0);
      assertSame(jSTerm1, jSTerm0);
      assertNotNull(jSTerm1);
      assertTrue(jSSubstitution1.equals((Object)jSSubstitution0));
      assertEquals(0.0, streamTokenizer0.nval, 0.01);
      assertEquals(32, streamTokenizer0.ttype);
      
      JSSubstitution jSSubstitution2 = (JSSubstitution)jSSubstitution1.clone();
      assertTrue(jSSubstitution1.isEmpty());
      assertEquals(10, jSSubstitution1.capacity());
      assertEquals(0, jSSubstitution1.size());
      assertEquals("[]", jSSubstitution1.toString());
      assertFalse(jSSubstitution1.fail());
      assertEquals("[]", jSSubstitution2.toString());
      assertTrue(jSSubstitution2.isEmpty());
      assertFalse(jSSubstitution2.fail());
      assertEquals(0, jSSubstitution2.size());
      assertEquals(0, jSSubstitution2.capacity());
      assertNotSame(jSSubstitution1, jSSubstitution2);
      assertNotSame(jSSubstitution1, jSSubstitution0);
      assertNotSame(jSSubstitution2, jSSubstitution0);
      assertNotSame(jSSubstitution2, jSSubstitution1);
      assertNotNull(jSSubstitution2);
      assertTrue(jSSubstitution1.equals((Object)jSSubstitution0));
      assertTrue(jSSubstitution2.equals((Object)jSSubstitution1));
      assertTrue(jSSubstitution2.equals((Object)jSSubstitution0));
      
      jSTerm0.makeEval(true);
      assertEquals(1, streamTokenizer0.lineno());
      assertEquals("Token[' '], line 1", streamTokenizer0.toString());
      assertEquals(1, jSTerm0.size());
      assertFalse(jSTerm0.isFunction());
      assertTrue(jSTerm0.isEval());
      assertFalse(jSTerm0.isVariable());
      assertTrue(jSTerm0.isConstant());
      assertEquals("[jFxA%Rdj8%]", jSTerm0.toString());
      assertFalse(jSTerm0.isEmpty());
      assertEquals(10, jSTerm0.capacity());
      assertSame(jSTerm0, jSTerm1);
      assertEquals(0.0, streamTokenizer0.nval, 0.01);
      assertEquals(32, streamTokenizer0.ttype);
      
      jSTerm1.makeFunction();
      assertEquals(1, streamTokenizer0.lineno());
      assertEquals("Token[' '], line 1", streamTokenizer0.toString());
      assertEquals(1, jSTerm0.size());
      assertTrue(jSTerm0.isEval());
      assertFalse(jSTerm0.isVariable());
      assertEquals("[jFxA%Rdj8%]", jSTerm0.toString());
      assertTrue(jSTerm0.isFunction());
      assertFalse(jSTerm0.isEmpty());
      assertFalse(jSTerm0.isConstant());
      assertEquals(10, jSTerm0.capacity());
      assertTrue(jSSubstitution1.isEmpty());
      assertEquals(10, jSSubstitution1.capacity());
      assertEquals(0, jSSubstitution1.size());
      assertEquals("[]", jSSubstitution1.toString());
      assertFalse(jSSubstitution1.fail());
      assertEquals(10, jSTerm1.capacity());
      assertFalse(jSTerm1.isVariable());
      assertTrue(jSTerm1.isEval());
      assertEquals("[jFxA%Rdj8%]", jSTerm1.toString());
      assertTrue(jSTerm1.isFunction());
      assertFalse(jSTerm1.isConstant());
      assertFalse(jSTerm1.isEmpty());
      assertEquals(1, jSTerm1.size());
      assertSame(jSTerm0, jSTerm1);
      assertNotSame(jSSubstitution1, jSSubstitution2);
      assertNotSame(jSSubstitution1, jSSubstitution0);
      assertSame(jSTerm1, jSTerm0);
      assertTrue(jSSubstitution1.equals((Object)jSSubstitution0));
      assertTrue(jSSubstitution1.equals((Object)jSSubstitution2));
      assertEquals(0.0, streamTokenizer0.nval, 0.01);
      assertEquals(32, streamTokenizer0.ttype);
      
      JSTerm jSTerm2 = jSTerm0.standardizerTerm();
      assertEquals(1, streamTokenizer0.lineno());
      assertEquals("Token[' '], line 1", streamTokenizer0.toString());
      assertEquals(1, jSTerm0.size());
      assertTrue(jSTerm0.isEval());
      assertFalse(jSTerm0.isVariable());
      assertEquals("[jFxA%Rdj8%]", jSTerm0.toString());
      assertTrue(jSTerm0.isFunction());
      assertFalse(jSTerm0.isEmpty());
      assertFalse(jSTerm0.isConstant());
      assertEquals(10, jSTerm0.capacity());
      assertEquals(10, jSTerm2.capacity());
      assertFalse(jSTerm2.isVariable());
      assertEquals(1, jSTerm2.size());
      assertFalse(jSTerm2.isConstant());
      assertFalse(jSTerm2.isEmpty());
      assertTrue(jSTerm2.isFunction());
      assertTrue(jSTerm2.isEval());
      assertEquals("[jFxA%Rdj8%]", jSTerm2.toString());
      assertSame(jSTerm0, jSTerm1);
      assertNotSame(jSTerm0, jSTerm2);
      assertNotSame(jSTerm2, jSTerm0);
      assertNotSame(jSTerm2, jSTerm1);
      assertNotNull(jSTerm2);
      assertTrue(jSTerm2.equals((Object)jSTerm1));
      assertTrue(jSTerm2.equals((Object)jSTerm0));
      assertEquals(0.0, streamTokenizer0.nval, 0.01);
      assertEquals(32, streamTokenizer0.ttype);
      
      // Undeclared exception!
      try { 
        jSTerm0.call();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1 >= 1
         //
         verifyException("java.util.Vector", e);
      }
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      StringReader stringReader0 = new StringReader("jFxA%Rdj8% jSYG> MR");
      assertNotNull(stringReader0);
      
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      assertEquals("Token[NOTHING], line 1", streamTokenizer0.toString());
      assertEquals(1, streamTokenizer0.lineno());
      assertNotNull(streamTokenizer0);
      assertEquals(0.0, streamTokenizer0.nval, 0.01);
      assertEquals((-4), streamTokenizer0.ttype);
      
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      assertEquals(1, streamTokenizer0.lineno());
      assertEquals("Token[' '], line 1", streamTokenizer0.toString());
      assertFalse(jSTerm0.isVariable());
      assertTrue(jSTerm0.isConstant());
      assertEquals(10, jSTerm0.capacity());
      assertFalse(jSTerm0.isEval());
      assertEquals(1, jSTerm0.size());
      assertFalse(jSTerm0.isEmpty());
      assertFalse(jSTerm0.isFunction());
      assertEquals("[jFxA%Rdj8%]", jSTerm0.toString());
      assertNotNull(jSTerm0);
      assertEquals(32, streamTokenizer0.ttype);
      assertEquals(0.0, streamTokenizer0.nval, 0.01);
      
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      assertEquals("[]", jSSubstitution0.toString());
      assertTrue(jSSubstitution0.isEmpty());
      assertEquals(0, jSSubstitution0.size());
      assertEquals(10, jSSubstitution0.capacity());
      assertFalse(jSSubstitution0.fail());
      assertNotNull(jSSubstitution0);
      
      JSTerm jSTerm1 = jSSubstitution0.instance(jSTerm0);
      assertEquals(1, streamTokenizer0.lineno());
      assertEquals("Token[' '], line 1", streamTokenizer0.toString());
      assertFalse(jSTerm0.isVariable());
      assertTrue(jSTerm0.isConstant());
      assertEquals(10, jSTerm0.capacity());
      assertFalse(jSTerm0.isEval());
      assertEquals(1, jSTerm0.size());
      assertFalse(jSTerm0.isEmpty());
      assertFalse(jSTerm0.isFunction());
      assertEquals("[jFxA%Rdj8%]", jSTerm0.toString());
      assertEquals("[]", jSSubstitution0.toString());
      assertTrue(jSSubstitution0.isEmpty());
      assertEquals(0, jSSubstitution0.size());
      assertEquals(10, jSSubstitution0.capacity());
      assertFalse(jSSubstitution0.fail());
      assertEquals(10, jSTerm1.capacity());
      assertFalse(jSTerm1.isFunction());
      assertFalse(jSTerm1.isVariable());
      assertEquals(1, jSTerm1.size());
      assertFalse(jSTerm1.isEval());
      assertFalse(jSTerm1.isEmpty());
      assertEquals("[jFxA%Rdj8%]", jSTerm1.toString());
      assertTrue(jSTerm1.isConstant());
      assertSame(jSTerm0, jSTerm1);
      assertSame(jSTerm1, jSTerm0);
      assertNotNull(jSTerm1);
      assertEquals(32, streamTokenizer0.ttype);
      assertEquals(0.0, streamTokenizer0.nval, 0.01);
      
      JSSubstitution jSSubstitution1 = (JSSubstitution)jSSubstitution0.clone();
      assertEquals("[]", jSSubstitution0.toString());
      assertTrue(jSSubstitution0.isEmpty());
      assertEquals(0, jSSubstitution0.size());
      assertEquals(10, jSSubstitution0.capacity());
      assertFalse(jSSubstitution0.fail());
      assertEquals(0, jSSubstitution1.capacity());
      assertTrue(jSSubstitution1.isEmpty());
      assertFalse(jSSubstitution1.fail());
      assertEquals(0, jSSubstitution1.size());
      assertEquals("[]", jSSubstitution1.toString());
      assertNotSame(jSSubstitution0, jSSubstitution1);
      assertNotSame(jSSubstitution1, jSSubstitution0);
      assertNotNull(jSSubstitution1);
      assertTrue(jSSubstitution1.equals((Object)jSSubstitution0));
      
      jSTerm0.makeEval(true);
      assertEquals(1, streamTokenizer0.lineno());
      assertEquals("Token[' '], line 1", streamTokenizer0.toString());
      assertFalse(jSTerm0.isVariable());
      assertTrue(jSTerm0.isConstant());
      assertEquals(10, jSTerm0.capacity());
      assertEquals(1, jSTerm0.size());
      assertFalse(jSTerm0.isEmpty());
      assertFalse(jSTerm0.isFunction());
      assertTrue(jSTerm0.isEval());
      assertEquals("[jFxA%Rdj8%]", jSTerm0.toString());
      assertSame(jSTerm0, jSTerm1);
      assertEquals(32, streamTokenizer0.ttype);
      assertEquals(0.0, streamTokenizer0.nval, 0.01);
      
      jSTerm1.makeFunction();
      assertEquals(1, streamTokenizer0.lineno());
      assertEquals("Token[' '], line 1", streamTokenizer0.toString());
      assertFalse(jSTerm0.isVariable());
      assertEquals(10, jSTerm0.capacity());
      assertEquals(1, jSTerm0.size());
      assertTrue(jSTerm0.isFunction());
      assertFalse(jSTerm0.isEmpty());
      assertFalse(jSTerm0.isConstant());
      assertTrue(jSTerm0.isEval());
      assertEquals("[jFxA%Rdj8%]", jSTerm0.toString());
      assertEquals("[]", jSSubstitution0.toString());
      assertTrue(jSSubstitution0.isEmpty());
      assertEquals(0, jSSubstitution0.size());
      assertEquals(10, jSSubstitution0.capacity());
      assertFalse(jSSubstitution0.fail());
      assertEquals(10, jSTerm1.capacity());
      assertFalse(jSTerm1.isVariable());
      assertEquals(1, jSTerm1.size());
      assertFalse(jSTerm1.isConstant());
      assertFalse(jSTerm1.isEmpty());
      assertTrue(jSTerm1.isEval());
      assertTrue(jSTerm1.isFunction());
      assertEquals("[jFxA%Rdj8%]", jSTerm1.toString());
      assertSame(jSTerm0, jSTerm1);
      assertNotSame(jSSubstitution0, jSSubstitution1);
      assertSame(jSTerm1, jSTerm0);
      assertTrue(jSSubstitution0.equals((Object)jSSubstitution1));
      assertEquals(32, streamTokenizer0.ttype);
      assertEquals(0.0, streamTokenizer0.nval, 0.01);
      
      jSTerm0.print();
      assertEquals(1, streamTokenizer0.lineno());
      assertEquals("Token[' '], line 1", streamTokenizer0.toString());
      assertFalse(jSTerm0.isVariable());
      assertEquals(10, jSTerm0.capacity());
      assertEquals(1, jSTerm0.size());
      assertTrue(jSTerm0.isFunction());
      assertFalse(jSTerm0.isEmpty());
      assertFalse(jSTerm0.isConstant());
      assertTrue(jSTerm0.isEval());
      assertEquals("[jFxA%Rdj8%]", jSTerm0.toString());
      assertSame(jSTerm0, jSTerm1);
      assertEquals(32, streamTokenizer0.ttype);
      assertEquals(0.0, streamTokenizer0.nval, 0.01);
      
      JSTerm jSTerm2 = jSTerm1.cloneT();
      assertEquals(1, streamTokenizer0.lineno());
      assertEquals("Token[' '], line 1", streamTokenizer0.toString());
      assertFalse(jSTerm0.isVariable());
      assertEquals(10, jSTerm0.capacity());
      assertEquals(1, jSTerm0.size());
      assertTrue(jSTerm0.isFunction());
      assertFalse(jSTerm0.isEmpty());
      assertFalse(jSTerm0.isConstant());
      assertTrue(jSTerm0.isEval());
      assertEquals("[jFxA%Rdj8%]", jSTerm0.toString());
      assertEquals("[]", jSSubstitution0.toString());
      assertTrue(jSSubstitution0.isEmpty());
      assertEquals(0, jSSubstitution0.size());
      assertEquals(10, jSSubstitution0.capacity());
      assertFalse(jSSubstitution0.fail());
      assertEquals(10, jSTerm1.capacity());
      assertFalse(jSTerm1.isVariable());
      assertEquals(1, jSTerm1.size());
      assertFalse(jSTerm1.isConstant());
      assertFalse(jSTerm1.isEmpty());
      assertTrue(jSTerm1.isEval());
      assertTrue(jSTerm1.isFunction());
      assertEquals("[jFxA%Rdj8%]", jSTerm1.toString());
      assertEquals("[jFxA%Rdj8%]", jSTerm2.toString());
      assertTrue(jSTerm2.isEval());
      assertFalse(jSTerm2.isVariable());
      assertFalse(jSTerm2.isConstant());
      assertFalse(jSTerm2.isEmpty());
      assertTrue(jSTerm2.isFunction());
      assertEquals(1, jSTerm2.size());
      assertEquals(10, jSTerm2.capacity());
      assertSame(jSTerm0, jSTerm1);
      assertNotSame(jSTerm0, jSTerm2);
      assertNotSame(jSSubstitution0, jSSubstitution1);
      assertNotSame(jSTerm1, jSTerm2);
      assertSame(jSTerm1, jSTerm0);
      assertNotSame(jSTerm2, jSTerm1);
      assertNotSame(jSTerm2, jSTerm0);
      assertNotNull(jSTerm2);
      assertTrue(jSSubstitution0.equals((Object)jSSubstitution1));
      assertTrue(jSTerm2.equals((Object)jSTerm1));
      assertTrue(jSTerm2.equals((Object)jSTerm0));
      assertEquals(32, streamTokenizer0.ttype);
      assertEquals(0.0, streamTokenizer0.nval, 0.01);
      
      StringBuffer stringBuffer0 = jSTerm2.toStr();
      assertEquals(1, streamTokenizer0.lineno());
      assertEquals("Token[' '], line 1", streamTokenizer0.toString());
      assertFalse(jSTerm0.isVariable());
      assertEquals(10, jSTerm0.capacity());
      assertEquals(1, jSTerm0.size());
      assertTrue(jSTerm0.isFunction());
      assertFalse(jSTerm0.isEmpty());
      assertFalse(jSTerm0.isConstant());
      assertTrue(jSTerm0.isEval());
      assertEquals("[jFxA%Rdj8%]", jSTerm0.toString());
      assertEquals("[]", jSSubstitution0.toString());
      assertTrue(jSSubstitution0.isEmpty());
      assertEquals(0, jSSubstitution0.size());
      assertEquals(10, jSSubstitution0.capacity());
      assertFalse(jSSubstitution0.fail());
      assertEquals(10, jSTerm1.capacity());
      assertFalse(jSTerm1.isVariable());
      assertEquals(1, jSTerm1.size());
      assertFalse(jSTerm1.isConstant());
      assertFalse(jSTerm1.isEmpty());
      assertTrue(jSTerm1.isEval());
      assertTrue(jSTerm1.isFunction());
      assertEquals("[jFxA%Rdj8%]", jSTerm1.toString());
      assertEquals("[jFxA%Rdj8%]", jSTerm2.toString());
      assertTrue(jSTerm2.isEval());
      assertFalse(jSTerm2.isVariable());
      assertFalse(jSTerm2.isConstant());
      assertFalse(jSTerm2.isEmpty());
      assertTrue(jSTerm2.isFunction());
      assertEquals(1, jSTerm2.size());
      assertEquals(10, jSTerm2.capacity());
      assertEquals(13, stringBuffer0.length());
      assertEquals("(jFxA%Rdj8% )", stringBuffer0.toString());
      assertSame(jSTerm0, jSTerm1);
      assertNotSame(jSTerm0, jSTerm2);
      assertNotSame(jSSubstitution0, jSSubstitution1);
      assertNotSame(jSTerm1, jSTerm2);
      assertSame(jSTerm1, jSTerm0);
      assertNotSame(jSTerm2, jSTerm1);
      assertNotSame(jSTerm2, jSTerm0);
      assertNotNull(stringBuffer0);
      assertTrue(jSTerm0.equals((Object)jSTerm2));
      assertTrue(jSSubstitution0.equals((Object)jSSubstitution1));
      assertTrue(jSTerm1.equals((Object)jSTerm2));
      assertTrue(jSTerm2.equals((Object)jSTerm1));
      assertTrue(jSTerm2.equals((Object)jSTerm0));
      assertEquals(32, streamTokenizer0.ttype);
      assertEquals(0.0, streamTokenizer0.nval, 0.01);
      
      boolean boolean0 = jSTerm2.isEval();
      assertEquals(1, streamTokenizer0.lineno());
      assertEquals("Token[' '], line 1", streamTokenizer0.toString());
      assertFalse(jSTerm0.isVariable());
      assertEquals(10, jSTerm0.capacity());
      assertEquals(1, jSTerm0.size());
      assertTrue(jSTerm0.isFunction());
      assertFalse(jSTerm0.isEmpty());
      assertFalse(jSTerm0.isConstant());
      assertTrue(jSTerm0.isEval());
      assertEquals("[jFxA%Rdj8%]", jSTerm0.toString());
      assertEquals("[]", jSSubstitution0.toString());
      assertTrue(jSSubstitution0.isEmpty());
      assertEquals(0, jSSubstitution0.size());
      assertEquals(10, jSSubstitution0.capacity());
      assertFalse(jSSubstitution0.fail());
      assertEquals(10, jSTerm1.capacity());
      assertFalse(jSTerm1.isVariable());
      assertEquals(1, jSTerm1.size());
      assertFalse(jSTerm1.isConstant());
      assertFalse(jSTerm1.isEmpty());
      assertTrue(jSTerm1.isEval());
      assertTrue(jSTerm1.isFunction());
      assertEquals("[jFxA%Rdj8%]", jSTerm1.toString());
      assertEquals("[jFxA%Rdj8%]", jSTerm2.toString());
      assertTrue(jSTerm2.isEval());
      assertFalse(jSTerm2.isVariable());
      assertFalse(jSTerm2.isConstant());
      assertFalse(jSTerm2.isEmpty());
      assertTrue(jSTerm2.isFunction());
      assertEquals(1, jSTerm2.size());
      assertEquals(10, jSTerm2.capacity());
      assertTrue(boolean0);
      assertSame(jSTerm0, jSTerm1);
      assertNotSame(jSTerm0, jSTerm2);
      assertNotSame(jSSubstitution0, jSSubstitution1);
      assertNotSame(jSTerm1, jSTerm2);
      assertSame(jSTerm1, jSTerm0);
      assertNotSame(jSTerm2, jSTerm1);
      assertNotSame(jSTerm2, jSTerm0);
      assertTrue(jSTerm0.equals((Object)jSTerm2));
      assertTrue(jSSubstitution0.equals((Object)jSSubstitution1));
      assertTrue(jSTerm1.equals((Object)jSTerm2));
      assertTrue(jSTerm2.equals((Object)jSTerm1));
      assertTrue(jSTerm2.equals((Object)jSTerm0));
      assertEquals(32, streamTokenizer0.ttype);
      assertEquals(0.0, streamTokenizer0.nval, 0.01);
      
      // Undeclared exception!
      try { 
        jSTerm2.call();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1 >= 1
         //
         verifyException("java.util.Vector", e);
      }
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      assertFalse(jSTerm0.isConstant());
      assertEquals(10, jSTerm0.capacity());
      assertFalse(jSTerm0.isFunction());
      assertTrue(jSTerm0.isEmpty());
      assertEquals("[]", jSTerm0.toString());
      assertFalse(jSTerm0.isVariable());
      assertFalse(jSTerm0.isEval());
      assertEquals(0, jSTerm0.size());
      assertNotNull(jSTerm0);
      
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      assertEquals(0, jSSubstitution0.size());
      assertEquals("[]", jSSubstitution0.toString());
      assertTrue(jSSubstitution0.isEmpty());
      assertFalse(jSSubstitution0.fail());
      assertEquals(10, jSSubstitution0.capacity());
      assertNotNull(jSSubstitution0);
      
      jSTerm0.makeVariable();
      assertFalse(jSTerm0.isConstant());
      assertEquals(10, jSTerm0.capacity());
      assertFalse(jSTerm0.isFunction());
      assertTrue(jSTerm0.isVariable());
      assertTrue(jSTerm0.isEmpty());
      assertEquals("[]", jSTerm0.toString());
      assertFalse(jSTerm0.isEval());
      assertEquals(0, jSTerm0.size());
      
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      assertEquals("[]", jSSubstitution1.toString());
      assertEquals(10, jSSubstitution1.capacity());
      assertFalse(jSSubstitution1.fail());
      assertEquals(0, jSSubstitution1.size());
      assertTrue(jSSubstitution1.isEmpty());
      assertNotNull(jSSubstitution1);
      assertTrue(jSSubstitution1.equals((Object)jSSubstitution0));
      
      boolean boolean0 = jSTerm0.isVariable();
      assertFalse(jSTerm0.isConstant());
      assertEquals(10, jSTerm0.capacity());
      assertFalse(jSTerm0.isFunction());
      assertTrue(jSTerm0.isVariable());
      assertTrue(jSTerm0.isEmpty());
      assertEquals("[]", jSTerm0.toString());
      assertFalse(jSTerm0.isEval());
      assertEquals(0, jSTerm0.size());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      assertEquals("[]", jSSubstitution0.toString());
      assertTrue(jSSubstitution0.isEmpty());
      assertEquals(10, jSSubstitution0.capacity());
      assertFalse(jSSubstitution0.fail());
      assertEquals(0, jSSubstitution0.size());
      assertNotNull(jSSubstitution0);
      
      StringReader stringReader0 = new StringReader("jFxA%Rdj8% jSYG> MR");
      assertNotNull(stringReader0);
      
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      assertEquals(1, streamTokenizer0.lineno());
      assertEquals("Token[NOTHING], line 1", streamTokenizer0.toString());
      assertNotNull(streamTokenizer0);
      assertEquals((-4), streamTokenizer0.ttype);
      assertEquals(0.0, streamTokenizer0.nval, 0.01);
      
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      assertEquals(1, streamTokenizer0.lineno());
      assertEquals("Token[' '], line 1", streamTokenizer0.toString());
      assertEquals(10, jSTerm0.capacity());
      assertFalse(jSTerm0.isEval());
      assertFalse(jSTerm0.isEmpty());
      assertEquals(1, jSTerm0.size());
      assertTrue(jSTerm0.isConstant());
      assertFalse(jSTerm0.isVariable());
      assertFalse(jSTerm0.isFunction());
      assertEquals("[jFxA%Rdj8%]", jSTerm0.toString());
      assertNotNull(jSTerm0);
      assertEquals(32, streamTokenizer0.ttype);
      assertEquals(0.0, streamTokenizer0.nval, 0.01);
      
      boolean boolean0 = jSTerm0.add((Object) null);
      assertEquals(1, streamTokenizer0.lineno());
      assertEquals("Token[' '], line 1", streamTokenizer0.toString());
      assertEquals("[jFxA%Rdj8%, null]", jSTerm0.toString());
      assertEquals(10, jSTerm0.capacity());
      assertEquals(2, jSTerm0.size());
      assertFalse(jSTerm0.isEval());
      assertFalse(jSTerm0.isEmpty());
      assertTrue(jSTerm0.isConstant());
      assertFalse(jSTerm0.isVariable());
      assertFalse(jSTerm0.isFunction());
      assertTrue(boolean0);
      assertEquals(32, streamTokenizer0.ttype);
      assertEquals(0.0, streamTokenizer0.nval, 0.01);
      
      jSTerm0.makeEval(true);
      assertEquals(1, streamTokenizer0.lineno());
      assertEquals("Token[' '], line 1", streamTokenizer0.toString());
      assertEquals("[jFxA%Rdj8%, null]", jSTerm0.toString());
      assertEquals(10, jSTerm0.capacity());
      assertEquals(2, jSTerm0.size());
      assertFalse(jSTerm0.isEmpty());
      assertTrue(jSTerm0.isConstant());
      assertFalse(jSTerm0.isVariable());
      assertFalse(jSTerm0.isFunction());
      assertTrue(jSTerm0.isEval());
      assertEquals(32, streamTokenizer0.ttype);
      assertEquals(0.0, streamTokenizer0.nval, 0.01);
      
      jSTerm0.makeFunction();
      assertEquals(1, streamTokenizer0.lineno());
      assertEquals("Token[' '], line 1", streamTokenizer0.toString());
      assertFalse(jSTerm0.isConstant());
      assertEquals("[jFxA%Rdj8%, null]", jSTerm0.toString());
      assertEquals(10, jSTerm0.capacity());
      assertEquals(2, jSTerm0.size());
      assertTrue(jSTerm0.isFunction());
      assertFalse(jSTerm0.isEmpty());
      assertFalse(jSTerm0.isVariable());
      assertTrue(jSTerm0.isEval());
      assertEquals(32, streamTokenizer0.ttype);
      assertEquals(0.0, streamTokenizer0.nval, 0.01);
      
      // Undeclared exception!
      try { 
        jSTerm0.matches(jSTerm0, jSSubstitution0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      assertEquals("[]", jSSubstitution0.toString());
      assertFalse(jSSubstitution0.fail());
      assertEquals(0, jSSubstitution0.size());
      assertEquals(10, jSSubstitution0.capacity());
      assertTrue(jSSubstitution0.isEmpty());
      assertNotNull(jSSubstitution0);
      
      StringReader stringReader0 = new StringReader("jFxA%Rdj8% jSYG> MR");
      assertNotNull(stringReader0);
      
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      assertEquals("Token[NOTHING], line 1", streamTokenizer0.toString());
      assertEquals(1, streamTokenizer0.lineno());
      assertNotNull(streamTokenizer0);
      assertEquals(0.0, streamTokenizer0.nval, 0.01);
      assertEquals((-4), streamTokenizer0.ttype);
      
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      assertEquals(1, streamTokenizer0.lineno());
      assertEquals("Token[' '], line 1", streamTokenizer0.toString());
      assertTrue(jSTerm0.isConstant());
      assertEquals("[jFxA%Rdj8%]", jSTerm0.toString());
      assertFalse(jSTerm0.isEmpty());
      assertFalse(jSTerm0.isVariable());
      assertFalse(jSTerm0.isEval());
      assertEquals(1, jSTerm0.size());
      assertEquals(10, jSTerm0.capacity());
      assertFalse(jSTerm0.isFunction());
      assertNotNull(jSTerm0);
      assertEquals(0.0, streamTokenizer0.nval, 0.01);
      assertEquals(32, streamTokenizer0.ttype);
      
      JSTerm jSTerm1 = jSSubstitution0.instance(jSTerm0);
      assertEquals("[]", jSSubstitution0.toString());
      assertFalse(jSSubstitution0.fail());
      assertEquals(0, jSSubstitution0.size());
      assertEquals(10, jSSubstitution0.capacity());
      assertTrue(jSSubstitution0.isEmpty());
      assertEquals(1, streamTokenizer0.lineno());
      assertEquals("Token[' '], line 1", streamTokenizer0.toString());
      assertTrue(jSTerm0.isConstant());
      assertEquals("[jFxA%Rdj8%]", jSTerm0.toString());
      assertFalse(jSTerm0.isEmpty());
      assertFalse(jSTerm0.isVariable());
      assertFalse(jSTerm0.isEval());
      assertEquals(1, jSTerm0.size());
      assertEquals(10, jSTerm0.capacity());
      assertFalse(jSTerm0.isFunction());
      assertFalse(jSTerm1.isEmpty());
      assertFalse(jSTerm1.isEval());
      assertEquals(1, jSTerm1.size());
      assertFalse(jSTerm1.isVariable());
      assertTrue(jSTerm1.isConstant());
      assertEquals("[jFxA%Rdj8%]", jSTerm1.toString());
      assertFalse(jSTerm1.isFunction());
      assertEquals(10, jSTerm1.capacity());
      assertSame(jSTerm0, jSTerm1);
      assertSame(jSTerm1, jSTerm0);
      assertNotNull(jSTerm1);
      assertEquals(0.0, streamTokenizer0.nval, 0.01);
      assertEquals(32, streamTokenizer0.ttype);
      
      JSSubstitution jSSubstitution1 = (JSSubstitution)jSSubstitution0.clone();
      assertEquals("[]", jSSubstitution0.toString());
      assertFalse(jSSubstitution0.fail());
      assertEquals(0, jSSubstitution0.size());
      assertEquals(10, jSSubstitution0.capacity());
      assertTrue(jSSubstitution0.isEmpty());
      assertEquals(0, jSSubstitution1.capacity());
      assertEquals("[]", jSSubstitution1.toString());
      assertTrue(jSSubstitution1.isEmpty());
      assertFalse(jSSubstitution1.fail());
      assertEquals(0, jSSubstitution1.size());
      assertNotSame(jSSubstitution0, jSSubstitution1);
      assertNotSame(jSSubstitution1, jSSubstitution0);
      assertNotNull(jSSubstitution1);
      assertTrue(jSSubstitution1.equals((Object)jSSubstitution0));
      
      boolean boolean0 = jSSubstitution0.add((Object) null);
      assertEquals("[null]", jSSubstitution0.toString());
      assertFalse(jSSubstitution0.fail());
      assertFalse(jSSubstitution0.isEmpty());
      assertEquals(1, jSSubstitution0.size());
      assertEquals(10, jSSubstitution0.capacity());
      assertTrue(boolean0);
      assertNotSame(jSSubstitution0, jSSubstitution1);
      assertFalse(jSSubstitution0.equals((Object)jSSubstitution1));
      
      boolean boolean1 = jSTerm0.isGround();
      assertEquals(1, streamTokenizer0.lineno());
      assertEquals("Token[' '], line 1", streamTokenizer0.toString());
      assertTrue(jSTerm0.isConstant());
      assertEquals("[jFxA%Rdj8%]", jSTerm0.toString());
      assertFalse(jSTerm0.isEmpty());
      assertFalse(jSTerm0.isVariable());
      assertFalse(jSTerm0.isEval());
      assertEquals(1, jSTerm0.size());
      assertEquals(10, jSTerm0.capacity());
      assertFalse(jSTerm0.isFunction());
      assertTrue(boolean1);
      assertSame(jSTerm0, jSTerm1);
      assertTrue(boolean1 == boolean0);
      assertEquals(0.0, streamTokenizer0.nval, 0.01);
      assertEquals(32, streamTokenizer0.ttype);
      
      jSTerm0.makeVariable();
      assertEquals(1, streamTokenizer0.lineno());
      assertEquals("Token[' '], line 1", streamTokenizer0.toString());
      assertEquals("[jFxA%Rdj8%]", jSTerm0.toString());
      assertFalse(jSTerm0.isEmpty());
      assertFalse(jSTerm0.isEval());
      assertEquals(1, jSTerm0.size());
      assertFalse(jSTerm0.isConstant());
      assertEquals(10, jSTerm0.capacity());
      assertFalse(jSTerm0.isFunction());
      assertTrue(jSTerm0.isVariable());
      assertSame(jSTerm0, jSTerm1);
      assertEquals(0.0, streamTokenizer0.nval, 0.01);
      assertEquals(32, streamTokenizer0.ttype);
      
      JSSubstitution jSSubstitution2 = new JSSubstitution();
      assertEquals(0, jSSubstitution2.size());
      assertEquals("[]", jSSubstitution2.toString());
      assertTrue(jSSubstitution2.isEmpty());
      assertFalse(jSSubstitution2.fail());
      assertEquals(10, jSSubstitution2.capacity());
      assertNotNull(jSSubstitution2);
      assertFalse(jSSubstitution2.equals((Object)jSSubstitution0));
      assertTrue(jSSubstitution2.equals((Object)jSSubstitution1));
      
      JSSubstitution jSSubstitution3 = jSTerm0.matches(jSTerm1, jSSubstitution2);
      assertEquals("[null]", jSSubstitution0.toString());
      assertFalse(jSSubstitution0.fail());
      assertFalse(jSSubstitution0.isEmpty());
      assertEquals(1, jSSubstitution0.size());
      assertEquals(10, jSSubstitution0.capacity());
      assertEquals(1, streamTokenizer0.lineno());
      assertEquals("Token[' '], line 1", streamTokenizer0.toString());
      assertEquals("[jFxA%Rdj8%]", jSTerm0.toString());
      assertFalse(jSTerm0.isEmpty());
      assertFalse(jSTerm0.isEval());
      assertEquals(1, jSTerm0.size());
      assertFalse(jSTerm0.isConstant());
      assertEquals(10, jSTerm0.capacity());
      assertFalse(jSTerm0.isFunction());
      assertTrue(jSTerm0.isVariable());
      assertFalse(jSTerm1.isConstant());
      assertFalse(jSTerm1.isEmpty());
      assertFalse(jSTerm1.isEval());
      assertTrue(jSTerm1.isVariable());
      assertEquals(1, jSTerm1.size());
      assertEquals("[jFxA%Rdj8%]", jSTerm1.toString());
      assertFalse(jSTerm1.isFunction());
      assertEquals(10, jSTerm1.capacity());
      assertEquals(0, jSSubstitution2.size());
      assertEquals("[]", jSSubstitution2.toString());
      assertTrue(jSSubstitution2.isEmpty());
      assertFalse(jSSubstitution2.fail());
      assertEquals(10, jSSubstitution2.capacity());
      assertEquals(10, jSSubstitution3.capacity());
      assertEquals(1, jSSubstitution3.size());
      assertFalse(jSSubstitution3.fail());
      assertFalse(jSSubstitution3.isEmpty());
      assertNotSame(jSSubstitution0, jSSubstitution2);
      assertNotSame(jSSubstitution0, jSSubstitution3);
      assertNotSame(jSSubstitution0, jSSubstitution1);
      assertSame(jSTerm0, jSTerm1);
      assertSame(jSTerm1, jSTerm0);
      assertNotSame(jSSubstitution2, jSSubstitution1);
      assertNotSame(jSSubstitution2, jSSubstitution3);
      assertNotSame(jSSubstitution2, jSSubstitution0);
      assertNotSame(jSSubstitution3, jSSubstitution0);
      assertNotSame(jSSubstitution3, jSSubstitution2);
      assertNotSame(jSSubstitution3, jSSubstitution1);
      assertNotNull(jSSubstitution3);
      assertFalse(jSSubstitution0.equals((Object)jSSubstitution2));
      assertFalse(jSSubstitution0.equals((Object)jSSubstitution1));
      assertFalse(jSSubstitution2.equals((Object)jSSubstitution0));
      assertTrue(jSSubstitution2.equals((Object)jSSubstitution1));
      assertFalse(jSSubstitution3.equals((Object)jSSubstitution0));
      assertFalse(jSSubstitution3.equals((Object)jSSubstitution2));
      assertFalse(jSSubstitution3.equals((Object)jSSubstitution1));
      assertEquals(0.0, streamTokenizer0.nval, 0.01);
      assertEquals(32, streamTokenizer0.ttype);
      
      JSTerm jSTerm2 = new JSTerm();
      assertEquals("[]", jSTerm2.toString());
      assertFalse(jSTerm2.isConstant());
      assertFalse(jSTerm2.isEval());
      assertEquals(0, jSTerm2.size());
      assertFalse(jSTerm2.isFunction());
      assertEquals(10, jSTerm2.capacity());
      assertFalse(jSTerm2.isVariable());
      assertTrue(jSTerm2.isEmpty());
      assertNotNull(jSTerm2);
      assertFalse(jSTerm2.equals((Object)jSTerm1));
      assertFalse(jSTerm2.equals((Object)jSTerm0));
      
      boolean boolean2 = true;
      jSTerm2.makeEval(boolean2);
      assertTrue(jSTerm2.isEval());
      assertEquals("[]", jSTerm2.toString());
      assertFalse(jSTerm2.isConstant());
      assertEquals(0, jSTerm2.size());
      assertFalse(jSTerm2.isFunction());
      assertEquals(10, jSTerm2.capacity());
      assertFalse(jSTerm2.isVariable());
      assertTrue(jSTerm2.isEmpty());
      assertNotSame(jSTerm2, jSTerm1);
      assertNotSame(jSTerm2, jSTerm0);
      assertFalse(jSTerm2.equals((Object)jSTerm1));
      assertFalse(jSTerm2.equals((Object)jSTerm0));
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      
      String string0 = "E+FhSa@{6FBq&I";
      boolean boolean3 = jSTerm2.equals(string0);
      assertTrue(jSTerm2.isEval());
      assertEquals("[]", jSTerm2.toString());
      assertFalse(jSTerm2.isConstant());
      assertEquals(0, jSTerm2.size());
      assertFalse(jSTerm2.isFunction());
      assertEquals(10, jSTerm2.capacity());
      assertFalse(jSTerm2.isVariable());
      assertTrue(jSTerm2.isEmpty());
      assertFalse(boolean3);
      assertNotSame(jSTerm2, jSTerm1);
      assertNotSame(jSTerm2, jSTerm0);
      assertFalse(jSTerm2.equals((Object)jSTerm1));
      assertFalse(jSTerm2.equals((Object)jSTerm0));
      assertFalse(boolean3 == boolean1);
      assertFalse(boolean3 == boolean2);
      assertFalse(boolean3 == boolean0);
      
      // Undeclared exception!
      try { 
        jSTerm2.toStr();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      assertEquals("[]", jSSubstitution0.toString());
      assertTrue(jSSubstitution0.isEmpty());
      assertFalse(jSSubstitution0.fail());
      assertEquals(0, jSSubstitution0.size());
      assertEquals(10, jSSubstitution0.capacity());
      assertNotNull(jSSubstitution0);
      
      StringReader stringReader0 = new StringReader("jFxA%Rdj8% jSYG> MR");
      assertNotNull(stringReader0);
      
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      assertEquals(1, streamTokenizer0.lineno());
      assertEquals("Token[NOTHING], line 1", streamTokenizer0.toString());
      assertNotNull(streamTokenizer0);
      assertEquals(0.0, streamTokenizer0.nval, 0.01);
      assertEquals((-4), streamTokenizer0.ttype);
      
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      assertEquals(1, streamTokenizer0.lineno());
      assertEquals("Token[' '], line 1", streamTokenizer0.toString());
      assertFalse(jSTerm0.isEmpty());
      assertTrue(jSTerm0.isConstant());
      assertEquals("[jFxA%Rdj8%]", jSTerm0.toString());
      assertFalse(jSTerm0.isVariable());
      assertFalse(jSTerm0.isFunction());
      assertFalse(jSTerm0.isEval());
      assertEquals(1, jSTerm0.size());
      assertEquals(10, jSTerm0.capacity());
      assertNotNull(jSTerm0);
      assertEquals(0.0, streamTokenizer0.nval, 0.01);
      assertEquals(32, streamTokenizer0.ttype);
      
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      assertEquals("[]", jSSubstitution1.toString());
      assertTrue(jSSubstitution1.isEmpty());
      assertEquals(10, jSSubstitution1.capacity());
      assertFalse(jSSubstitution1.fail());
      assertEquals(0, jSSubstitution1.size());
      assertNotNull(jSSubstitution1);
      assertTrue(jSSubstitution1.equals((Object)jSSubstitution0));
      
      JSTerm jSTerm1 = jSSubstitution1.instance(jSTerm0);
      assertEquals(1, streamTokenizer0.lineno());
      assertEquals("Token[' '], line 1", streamTokenizer0.toString());
      assertFalse(jSTerm0.isEmpty());
      assertTrue(jSTerm0.isConstant());
      assertEquals("[jFxA%Rdj8%]", jSTerm0.toString());
      assertFalse(jSTerm0.isVariable());
      assertFalse(jSTerm0.isFunction());
      assertFalse(jSTerm0.isEval());
      assertEquals(1, jSTerm0.size());
      assertEquals(10, jSTerm0.capacity());
      assertEquals("[]", jSSubstitution1.toString());
      assertTrue(jSSubstitution1.isEmpty());
      assertEquals(10, jSSubstitution1.capacity());
      assertFalse(jSSubstitution1.fail());
      assertEquals(0, jSSubstitution1.size());
      assertFalse(jSTerm1.isEmpty());
      assertFalse(jSTerm1.isEval());
      assertEquals(1, jSTerm1.size());
      assertTrue(jSTerm1.isConstant());
      assertFalse(jSTerm1.isVariable());
      assertEquals("[jFxA%Rdj8%]", jSTerm1.toString());
      assertFalse(jSTerm1.isFunction());
      assertEquals(10, jSTerm1.capacity());
      assertSame(jSTerm0, jSTerm1);
      assertNotSame(jSSubstitution1, jSSubstitution0);
      assertSame(jSTerm1, jSTerm0);
      assertNotNull(jSTerm1);
      assertTrue(jSSubstitution1.equals((Object)jSSubstitution0));
      assertEquals(0.0, streamTokenizer0.nval, 0.01);
      assertEquals(32, streamTokenizer0.ttype);
      
      boolean boolean0 = jSTerm1.add((Object) null);
      assertEquals(1, streamTokenizer0.lineno());
      assertEquals("Token[' '], line 1", streamTokenizer0.toString());
      assertEquals("[jFxA%Rdj8%, null]", jSTerm0.toString());
      assertFalse(jSTerm0.isEmpty());
      assertTrue(jSTerm0.isConstant());
      assertFalse(jSTerm0.isVariable());
      assertFalse(jSTerm0.isFunction());
      assertFalse(jSTerm0.isEval());
      assertEquals(2, jSTerm0.size());
      assertEquals(10, jSTerm0.capacity());
      assertEquals("[]", jSSubstitution1.toString());
      assertTrue(jSSubstitution1.isEmpty());
      assertEquals(10, jSSubstitution1.capacity());
      assertFalse(jSSubstitution1.fail());
      assertEquals(0, jSSubstitution1.size());
      assertFalse(jSTerm1.isEmpty());
      assertFalse(jSTerm1.isEval());
      assertEquals("[jFxA%Rdj8%, null]", jSTerm1.toString());
      assertTrue(jSTerm1.isConstant());
      assertFalse(jSTerm1.isVariable());
      assertFalse(jSTerm1.isFunction());
      assertEquals(2, jSTerm1.size());
      assertEquals(10, jSTerm1.capacity());
      assertTrue(boolean0);
      assertSame(jSTerm0, jSTerm1);
      assertNotSame(jSSubstitution1, jSSubstitution0);
      assertSame(jSTerm1, jSTerm0);
      assertTrue(jSSubstitution1.equals((Object)jSSubstitution0));
      assertEquals(0.0, streamTokenizer0.nval, 0.01);
      assertEquals(32, streamTokenizer0.ttype);
      
      jSTerm0.makeEval(true);
      assertEquals(1, streamTokenizer0.lineno());
      assertEquals("Token[' '], line 1", streamTokenizer0.toString());
      assertEquals("[jFxA%Rdj8%, null]", jSTerm0.toString());
      assertFalse(jSTerm0.isEmpty());
      assertTrue(jSTerm0.isEval());
      assertTrue(jSTerm0.isConstant());
      assertFalse(jSTerm0.isVariable());
      assertFalse(jSTerm0.isFunction());
      assertEquals(2, jSTerm0.size());
      assertEquals(10, jSTerm0.capacity());
      assertSame(jSTerm0, jSTerm1);
      assertEquals(0.0, streamTokenizer0.nval, 0.01);
      assertEquals(32, streamTokenizer0.ttype);
      
      streamTokenizer0.commentChar((-3));
      assertEquals(1, streamTokenizer0.lineno());
      assertEquals("Token[' '], line 1", streamTokenizer0.toString());
      assertEquals(0.0, streamTokenizer0.nval, 0.01);
      assertEquals(32, streamTokenizer0.ttype);
      
      jSTerm1.makeFunction();
      assertEquals(1, streamTokenizer0.lineno());
      assertEquals("Token[' '], line 1", streamTokenizer0.toString());
      assertEquals("[jFxA%Rdj8%, null]", jSTerm0.toString());
      assertFalse(jSTerm0.isEmpty());
      assertTrue(jSTerm0.isEval());
      assertTrue(jSTerm0.isFunction());
      assertFalse(jSTerm0.isVariable());
      assertFalse(jSTerm0.isConstant());
      assertEquals(2, jSTerm0.size());
      assertEquals(10, jSTerm0.capacity());
      assertEquals("[]", jSSubstitution1.toString());
      assertTrue(jSSubstitution1.isEmpty());
      assertEquals(10, jSSubstitution1.capacity());
      assertFalse(jSSubstitution1.fail());
      assertEquals(0, jSSubstitution1.size());
      assertFalse(jSTerm1.isConstant());
      assertFalse(jSTerm1.isEmpty());
      assertTrue(jSTerm1.isFunction());
      assertTrue(jSTerm1.isEval());
      assertEquals("[jFxA%Rdj8%, null]", jSTerm1.toString());
      assertFalse(jSTerm1.isVariable());
      assertEquals(2, jSTerm1.size());
      assertEquals(10, jSTerm1.capacity());
      assertSame(jSTerm0, jSTerm1);
      assertNotSame(jSSubstitution1, jSSubstitution0);
      assertSame(jSTerm1, jSTerm0);
      assertTrue(jSSubstitution1.equals((Object)jSSubstitution0));
      assertEquals(0.0, streamTokenizer0.nval, 0.01);
      assertEquals(32, streamTokenizer0.ttype);
      
      // Undeclared exception!
      try { 
        jSTerm1.print();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      assertTrue(jSTerm0.isEmpty());
      assertEquals("[]", jSTerm0.toString());
      assertFalse(jSTerm0.isVariable());
      assertFalse(jSTerm0.isConstant());
      assertFalse(jSTerm0.isEval());
      assertEquals(0, jSTerm0.size());
      assertFalse(jSTerm0.isFunction());
      assertEquals(10, jSTerm0.capacity());
      assertNotNull(jSTerm0);
      
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      assertEquals(10, jSSubstitution0.capacity());
      assertEquals(0, jSSubstitution0.size());
      assertEquals("[]", jSSubstitution0.toString());
      assertTrue(jSSubstitution0.isEmpty());
      assertFalse(jSSubstitution0.fail());
      assertNotNull(jSSubstitution0);
      
      boolean boolean0 = jSTerm0.add((Object) jSSubstitution0);
      assertFalse(jSTerm0.isVariable());
      assertFalse(jSTerm0.isConstant());
      assertFalse(jSTerm0.isEmpty());
      assertFalse(jSTerm0.isEval());
      assertEquals(1, jSTerm0.size());
      assertFalse(jSTerm0.isFunction());
      assertEquals("[[]]", jSTerm0.toString());
      assertEquals(10, jSTerm0.capacity());
      assertEquals(10, jSSubstitution0.capacity());
      assertEquals(0, jSSubstitution0.size());
      assertEquals("[]", jSSubstitution0.toString());
      assertTrue(jSSubstitution0.isEmpty());
      assertFalse(jSSubstitution0.fail());
      assertTrue(boolean0);
      
      JSTerm jSTerm1 = jSTerm0.standardizerTerm();
      assertFalse(jSTerm0.isVariable());
      assertFalse(jSTerm0.isConstant());
      assertFalse(jSTerm0.isEmpty());
      assertFalse(jSTerm0.isEval());
      assertEquals(1, jSTerm0.size());
      assertFalse(jSTerm0.isFunction());
      assertEquals("[[]]", jSTerm0.toString());
      assertEquals(10, jSTerm0.capacity());
      assertEquals(10, jSTerm1.capacity());
      assertFalse(jSTerm1.isEval());
      assertEquals(1, jSTerm1.size());
      assertFalse(jSTerm1.isConstant());
      assertEquals("[[]]", jSTerm1.toString());
      assertTrue(jSTerm1.isFunction());
      assertFalse(jSTerm1.isEmpty());
      assertFalse(jSTerm1.isVariable());
      assertNotSame(jSTerm0, jSTerm1);
      assertNotSame(jSTerm1, jSTerm0);
      assertNotNull(jSTerm1);
      assertTrue(jSTerm1.equals((Object)jSTerm0));
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      assertFalse(jSTerm0.isConstant());
      assertEquals("[]", jSTerm0.toString());
      assertFalse(jSTerm0.isFunction());
      assertEquals(10, jSTerm0.capacity());
      assertFalse(jSTerm0.isEval());
      assertEquals(0, jSTerm0.size());
      assertTrue(jSTerm0.isEmpty());
      assertFalse(jSTerm0.isVariable());
      assertNotNull(jSTerm0);
      
      StringReader stringReader0 = new StringReader("(#");
      assertNotNull(stringReader0);
      
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      assertEquals("Token[NOTHING], line 1", streamTokenizer0.toString());
      assertEquals(1, streamTokenizer0.lineno());
      assertNotNull(streamTokenizer0);
      assertEquals(0.0, streamTokenizer0.nval, 0.01);
      assertEquals((-4), streamTokenizer0.ttype);
      
      JSTerm jSTerm1 = null;
      try {
        jSTerm1 = new JSTerm(streamTokenizer0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      assertEquals(0, jSSubstitution0.size());
      assertEquals(10, jSSubstitution0.capacity());
      assertEquals("[]", jSSubstitution0.toString());
      assertTrue(jSSubstitution0.isEmpty());
      assertFalse(jSSubstitution0.fail());
      assertNotNull(jSSubstitution0);
      
      StringReader stringReader0 = new StringReader("jFxA%Rdj8% jSYG> MR");
      assertNotNull(stringReader0);
      
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      assertEquals(1, streamTokenizer0.lineno());
      assertEquals("Token[NOTHING], line 1", streamTokenizer0.toString());
      assertNotNull(streamTokenizer0);
      assertEquals(0.0, streamTokenizer0.nval, 0.01);
      assertEquals((-4), streamTokenizer0.ttype);
      
      Iterator iterator0 = jSSubstitution0.iterator();
      assertEquals(0, jSSubstitution0.size());
      assertEquals(10, jSSubstitution0.capacity());
      assertEquals("[]", jSSubstitution0.toString());
      assertTrue(jSSubstitution0.isEmpty());
      assertFalse(jSSubstitution0.fail());
      assertNotNull(iterator0);
      
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      assertEquals(0, jSSubstitution1.size());
      assertEquals(10, jSSubstitution1.capacity());
      assertEquals("[]", jSSubstitution1.toString());
      assertFalse(jSSubstitution1.fail());
      assertTrue(jSSubstitution1.isEmpty());
      assertNotNull(jSSubstitution1);
      assertTrue(jSSubstitution1.equals((Object)jSSubstitution0));
      
      JSSubstitution jSSubstitution2 = (JSSubstitution)jSSubstitution0.clone();
      assertEquals(0, jSSubstitution0.size());
      assertEquals(10, jSSubstitution0.capacity());
      assertEquals("[]", jSSubstitution0.toString());
      assertTrue(jSSubstitution0.isEmpty());
      assertFalse(jSSubstitution0.fail());
      assertEquals(0, jSSubstitution2.capacity());
      assertEquals("[]", jSSubstitution2.toString());
      assertTrue(jSSubstitution2.isEmpty());
      assertEquals(0, jSSubstitution2.size());
      assertFalse(jSSubstitution2.fail());
      assertNotSame(jSSubstitution0, jSSubstitution2);
      assertNotSame(jSSubstitution0, jSSubstitution1);
      assertNotSame(jSSubstitution2, jSSubstitution0);
      assertNotSame(jSSubstitution2, jSSubstitution1);
      assertNotNull(jSSubstitution2);
      assertTrue(jSSubstitution0.equals((Object)jSSubstitution1));
      assertTrue(jSSubstitution2.equals((Object)jSSubstitution1));
      assertTrue(jSSubstitution2.equals((Object)jSSubstitution0));
      
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      assertEquals(1, streamTokenizer0.lineno());
      assertEquals("Token[' '], line 1", streamTokenizer0.toString());
      assertTrue(jSTerm0.isConstant());
      assertFalse(jSTerm0.isVariable());
      assertFalse(jSTerm0.isFunction());
      assertEquals("[jFxA%Rdj8%]", jSTerm0.toString());
      assertEquals(10, jSTerm0.capacity());
      assertFalse(jSTerm0.isEval());
      assertFalse(jSTerm0.isEmpty());
      assertEquals(1, jSTerm0.size());
      assertNotNull(jSTerm0);
      assertEquals(0.0, streamTokenizer0.nval, 0.01);
      assertEquals(32, streamTokenizer0.ttype);
      
      JSTerm jSTerm1 = jSTerm0.cloneT();
      assertEquals(1, streamTokenizer0.lineno());
      assertEquals("Token[' '], line 1", streamTokenizer0.toString());
      assertTrue(jSTerm0.isConstant());
      assertFalse(jSTerm0.isVariable());
      assertFalse(jSTerm0.isFunction());
      assertEquals("[jFxA%Rdj8%]", jSTerm0.toString());
      assertEquals(10, jSTerm0.capacity());
      assertFalse(jSTerm0.isEval());
      assertFalse(jSTerm0.isEmpty());
      assertEquals(1, jSTerm0.size());
      assertTrue(jSTerm1.isConstant());
      assertFalse(jSTerm1.isVariable());
      assertFalse(jSTerm1.isFunction());
      assertEquals("[jFxA%Rdj8%]", jSTerm1.toString());
      assertEquals(10, jSTerm1.capacity());
      assertFalse(jSTerm1.isEval());
      assertFalse(jSTerm1.isEmpty());
      assertEquals(1, jSTerm1.size());
      assertNotSame(jSTerm0, jSTerm1);
      assertNotSame(jSTerm1, jSTerm0);
      assertNotNull(jSTerm1);
      assertTrue(jSTerm1.equals((Object)jSTerm0));
      assertEquals(0.0, streamTokenizer0.nval, 0.01);
      assertEquals(32, streamTokenizer0.ttype);
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      assertEquals(10, jSSubstitution0.capacity());
      assertEquals("[]", jSSubstitution0.toString());
      assertTrue(jSSubstitution0.isEmpty());
      assertFalse(jSSubstitution0.fail());
      assertEquals(0, jSSubstitution0.size());
      assertNotNull(jSSubstitution0);
      
      StringReader stringReader0 = new StringReader("jFxA%Rdj8% jSYG> MR");
      assertNotNull(stringReader0);
      
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      assertEquals("Token[NOTHING], line 1", streamTokenizer0.toString());
      assertEquals(1, streamTokenizer0.lineno());
      assertNotNull(streamTokenizer0);
      assertEquals(0.0, streamTokenizer0.nval, 0.01);
      assertEquals((-4), streamTokenizer0.ttype);
      
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      assertEquals(1, streamTokenizer0.lineno());
      assertEquals("Token[' '], line 1", streamTokenizer0.toString());
      assertTrue(jSTerm0.isConstant());
      assertEquals("[jFxA%Rdj8%]", jSTerm0.toString());
      assertEquals(10, jSTerm0.capacity());
      assertFalse(jSTerm0.isFunction());
      assertFalse(jSTerm0.isEval());
      assertFalse(jSTerm0.isEmpty());
      assertEquals(1, jSTerm0.size());
      assertFalse(jSTerm0.isVariable());
      assertNotNull(jSTerm0);
      assertEquals(0.0, streamTokenizer0.nval, 0.01);
      assertEquals(32, streamTokenizer0.ttype);
      
      JSTerm jSTerm1 = (JSTerm)jSTerm0.clone();
      assertEquals(1, streamTokenizer0.lineno());
      assertEquals("Token[' '], line 1", streamTokenizer0.toString());
      assertTrue(jSTerm0.isConstant());
      assertEquals("[jFxA%Rdj8%]", jSTerm0.toString());
      assertEquals(10, jSTerm0.capacity());
      assertFalse(jSTerm0.isFunction());
      assertFalse(jSTerm0.isEval());
      assertFalse(jSTerm0.isEmpty());
      assertEquals(1, jSTerm0.size());
      assertFalse(jSTerm0.isVariable());
      assertFalse(jSTerm1.isEval());
      assertEquals(1, jSTerm1.size());
      assertFalse(jSTerm1.isEmpty());
      assertFalse(jSTerm1.isFunction());
      assertTrue(jSTerm1.isConstant());
      assertEquals(1, jSTerm1.capacity());
      assertEquals("[jFxA%Rdj8%]", jSTerm1.toString());
      assertFalse(jSTerm1.isVariable());
      assertNotSame(jSTerm0, jSTerm1);
      assertNotSame(jSTerm1, jSTerm0);
      assertNotNull(jSTerm1);
      assertTrue(jSTerm1.equals((Object)jSTerm0));
      assertEquals(0.0, streamTokenizer0.nval, 0.01);
      assertEquals(32, streamTokenizer0.ttype);
      
      boolean boolean0 = jSTerm1.isGround();
      assertEquals(1, streamTokenizer0.lineno());
      assertEquals("Token[' '], line 1", streamTokenizer0.toString());
      assertTrue(jSTerm0.isConstant());
      assertEquals("[jFxA%Rdj8%]", jSTerm0.toString());
      assertEquals(10, jSTerm0.capacity());
      assertFalse(jSTerm0.isFunction());
      assertFalse(jSTerm0.isEval());
      assertFalse(jSTerm0.isEmpty());
      assertEquals(1, jSTerm0.size());
      assertFalse(jSTerm0.isVariable());
      assertFalse(jSTerm1.isEval());
      assertEquals(1, jSTerm1.size());
      assertFalse(jSTerm1.isEmpty());
      assertFalse(jSTerm1.isFunction());
      assertTrue(jSTerm1.isConstant());
      assertEquals(1, jSTerm1.capacity());
      assertEquals("[jFxA%Rdj8%]", jSTerm1.toString());
      assertFalse(jSTerm1.isVariable());
      assertTrue(boolean0);
      assertNotSame(jSTerm0, jSTerm1);
      assertNotSame(jSTerm1, jSTerm0);
      assertTrue(jSTerm0.equals((Object)jSTerm1));
      assertTrue(jSTerm1.equals((Object)jSTerm0));
      assertEquals(0.0, streamTokenizer0.nval, 0.01);
      assertEquals(32, streamTokenizer0.ttype);
      
      jSTerm1.makeVariable();
      assertEquals(1, streamTokenizer0.lineno());
      assertEquals("Token[' '], line 1", streamTokenizer0.toString());
      assertTrue(jSTerm0.isConstant());
      assertEquals("[jFxA%Rdj8%]", jSTerm0.toString());
      assertEquals(10, jSTerm0.capacity());
      assertFalse(jSTerm0.isFunction());
      assertFalse(jSTerm0.isEval());
      assertFalse(jSTerm0.isEmpty());
      assertEquals(1, jSTerm0.size());
      assertFalse(jSTerm0.isVariable());
      assertFalse(jSTerm1.isEval());
      assertFalse(jSTerm1.isConstant());
      assertEquals(1, jSTerm1.size());
      assertFalse(jSTerm1.isEmpty());
      assertTrue(jSTerm1.isVariable());
      assertFalse(jSTerm1.isFunction());
      assertEquals(1, jSTerm1.capacity());
      assertEquals("[jFxA%Rdj8%]", jSTerm1.toString());
      assertNotSame(jSTerm0, jSTerm1);
      assertNotSame(jSTerm1, jSTerm0);
      assertTrue(jSTerm0.equals((Object)jSTerm1));
      assertTrue(jSTerm1.equals((Object)jSTerm0));
      assertEquals(0.0, streamTokenizer0.nval, 0.01);
      assertEquals(32, streamTokenizer0.ttype);
      
      JSSubstitution jSSubstitution1 = jSTerm1.matches(jSTerm0, jSSubstitution0);
      assertEquals(10, jSSubstitution0.capacity());
      assertEquals("[]", jSSubstitution0.toString());
      assertTrue(jSSubstitution0.isEmpty());
      assertFalse(jSSubstitution0.fail());
      assertEquals(0, jSSubstitution0.size());
      assertEquals(1, streamTokenizer0.lineno());
      assertEquals("Token[' '], line 1", streamTokenizer0.toString());
      assertTrue(jSTerm0.isConstant());
      assertEquals("[jFxA%Rdj8%]", jSTerm0.toString());
      assertEquals(10, jSTerm0.capacity());
      assertFalse(jSTerm0.isFunction());
      assertFalse(jSTerm0.isEval());
      assertFalse(jSTerm0.isEmpty());
      assertEquals(1, jSTerm0.size());
      assertFalse(jSTerm0.isVariable());
      assertFalse(jSTerm1.isEval());
      assertFalse(jSTerm1.isConstant());
      assertEquals(1, jSTerm1.size());
      assertFalse(jSTerm1.isEmpty());
      assertTrue(jSTerm1.isVariable());
      assertFalse(jSTerm1.isFunction());
      assertEquals(1, jSTerm1.capacity());
      assertEquals("[jFxA%Rdj8%]", jSTerm1.toString());
      assertEquals(1, jSSubstitution1.size());
      assertFalse(jSSubstitution1.isEmpty());
      assertEquals(10, jSSubstitution1.capacity());
      assertFalse(jSSubstitution1.fail());
      assertNotSame(jSSubstitution0, jSSubstitution1);
      assertNotSame(jSTerm0, jSTerm1);
      assertNotSame(jSTerm1, jSTerm0);
      assertNotSame(jSSubstitution1, jSSubstitution0);
      assertNotNull(jSSubstitution1);
      assertTrue(jSTerm0.equals((Object)jSTerm1));
      assertTrue(jSTerm1.equals((Object)jSTerm0));
      assertFalse(jSSubstitution1.equals((Object)jSSubstitution0));
      assertEquals(0.0, streamTokenizer0.nval, 0.01);
      assertEquals(32, streamTokenizer0.ttype);
      
      JSTerm jSTerm2 = new JSTerm();
      assertEquals(10, jSTerm2.capacity());
      assertFalse(jSTerm2.isFunction());
      assertFalse(jSTerm2.isVariable());
      assertEquals(0, jSTerm2.size());
      assertFalse(jSTerm2.isEval());
      assertEquals("[]", jSTerm2.toString());
      assertFalse(jSTerm2.isConstant());
      assertTrue(jSTerm2.isEmpty());
      assertNotNull(jSTerm2);
      assertFalse(jSTerm2.equals((Object)jSTerm0));
      assertFalse(jSTerm2.equals((Object)jSTerm1));
      
      JSTerm jSTerm3 = null;
      // Undeclared exception!
      try { 
        jSTerm2.equals(jSTerm3);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      assertTrue(jSSubstitution0.isEmpty());
      assertEquals(10, jSSubstitution0.capacity());
      assertEquals("[]", jSSubstitution0.toString());
      assertFalse(jSSubstitution0.fail());
      assertEquals(0, jSSubstitution0.size());
      assertNotNull(jSSubstitution0);
      
      StringReader stringReader0 = new StringReader("jFxA%Rdj8% jSYG> MR");
      assertNotNull(stringReader0);
      
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      assertEquals("Token[NOTHING], line 1", streamTokenizer0.toString());
      assertEquals(1, streamTokenizer0.lineno());
      assertNotNull(streamTokenizer0);
      assertEquals(0.0, streamTokenizer0.nval, 0.01);
      assertEquals((-4), streamTokenizer0.ttype);
      
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      assertEquals(1, streamTokenizer0.lineno());
      assertEquals("Token[' '], line 1", streamTokenizer0.toString());
      assertFalse(jSTerm0.isEmpty());
      assertEquals("[jFxA%Rdj8%]", jSTerm0.toString());
      assertTrue(jSTerm0.isConstant());
      assertFalse(jSTerm0.isVariable());
      assertEquals(10, jSTerm0.capacity());
      assertFalse(jSTerm0.isFunction());
      assertFalse(jSTerm0.isEval());
      assertEquals(1, jSTerm0.size());
      assertNotNull(jSTerm0);
      assertEquals(0.0, streamTokenizer0.nval, 0.01);
      assertEquals(32, streamTokenizer0.ttype);
      
      JSTerm jSTerm1 = jSSubstitution0.instance(jSTerm0);
      assertTrue(jSSubstitution0.isEmpty());
      assertEquals(10, jSSubstitution0.capacity());
      assertEquals("[]", jSSubstitution0.toString());
      assertFalse(jSSubstitution0.fail());
      assertEquals(0, jSSubstitution0.size());
      assertEquals(1, streamTokenizer0.lineno());
      assertEquals("Token[' '], line 1", streamTokenizer0.toString());
      assertFalse(jSTerm0.isEmpty());
      assertEquals("[jFxA%Rdj8%]", jSTerm0.toString());
      assertTrue(jSTerm0.isConstant());
      assertFalse(jSTerm0.isVariable());
      assertEquals(10, jSTerm0.capacity());
      assertFalse(jSTerm0.isFunction());
      assertFalse(jSTerm0.isEval());
      assertEquals(1, jSTerm0.size());
      assertFalse(jSTerm1.isEval());
      assertEquals(1, jSTerm1.size());
      assertEquals(10, jSTerm1.capacity());
      assertFalse(jSTerm1.isVariable());
      assertTrue(jSTerm1.isConstant());
      assertEquals("[jFxA%Rdj8%]", jSTerm1.toString());
      assertFalse(jSTerm1.isEmpty());
      assertFalse(jSTerm1.isFunction());
      assertSame(jSTerm0, jSTerm1);
      assertSame(jSTerm1, jSTerm0);
      assertNotNull(jSTerm1);
      assertEquals(0.0, streamTokenizer0.nval, 0.01);
      assertEquals(32, streamTokenizer0.ttype);
      
      JSTerm jSTerm2 = (JSTerm)jSTerm1.clone();
      assertTrue(jSSubstitution0.isEmpty());
      assertEquals(10, jSSubstitution0.capacity());
      assertEquals("[]", jSSubstitution0.toString());
      assertFalse(jSSubstitution0.fail());
      assertEquals(0, jSSubstitution0.size());
      assertEquals(1, streamTokenizer0.lineno());
      assertEquals("Token[' '], line 1", streamTokenizer0.toString());
      assertFalse(jSTerm0.isEmpty());
      assertEquals("[jFxA%Rdj8%]", jSTerm0.toString());
      assertTrue(jSTerm0.isConstant());
      assertFalse(jSTerm0.isVariable());
      assertEquals(10, jSTerm0.capacity());
      assertFalse(jSTerm0.isFunction());
      assertFalse(jSTerm0.isEval());
      assertEquals(1, jSTerm0.size());
      assertFalse(jSTerm1.isEval());
      assertEquals(1, jSTerm1.size());
      assertEquals(10, jSTerm1.capacity());
      assertFalse(jSTerm1.isVariable());
      assertTrue(jSTerm1.isConstant());
      assertEquals("[jFxA%Rdj8%]", jSTerm1.toString());
      assertFalse(jSTerm1.isEmpty());
      assertFalse(jSTerm1.isFunction());
      assertTrue(jSTerm2.isConstant());
      assertEquals("[jFxA%Rdj8%]", jSTerm2.toString());
      assertFalse(jSTerm2.isVariable());
      assertEquals(1, jSTerm2.capacity());
      assertEquals(1, jSTerm2.size());
      assertFalse(jSTerm2.isFunction());
      assertFalse(jSTerm2.isEval());
      assertFalse(jSTerm2.isEmpty());
      assertNotSame(jSTerm0, jSTerm2);
      assertSame(jSTerm0, jSTerm1);
      assertNotSame(jSTerm1, jSTerm2);
      assertSame(jSTerm1, jSTerm0);
      assertNotSame(jSTerm2, jSTerm0);
      assertNotSame(jSTerm2, jSTerm1);
      assertNotNull(jSTerm2);
      assertTrue(jSTerm2.equals((Object)jSTerm0));
      assertTrue(jSTerm2.equals((Object)jSTerm1));
      assertEquals(0.0, streamTokenizer0.nval, 0.01);
      assertEquals(32, streamTokenizer0.ttype);
      
      boolean boolean0 = jSTerm0.add((Object) jSTerm2);
      assertTrue(jSSubstitution0.isEmpty());
      assertEquals(10, jSSubstitution0.capacity());
      assertEquals("[]", jSSubstitution0.toString());
      assertFalse(jSSubstitution0.fail());
      assertEquals(0, jSSubstitution0.size());
      assertEquals(1, streamTokenizer0.lineno());
      assertEquals("Token[' '], line 1", streamTokenizer0.toString());
      assertFalse(jSTerm0.isEmpty());
      assertTrue(jSTerm0.isConstant());
      assertFalse(jSTerm0.isVariable());
      assertEquals(10, jSTerm0.capacity());
      assertEquals(2, jSTerm0.size());
      assertEquals("[jFxA%Rdj8%, [jFxA%Rdj8%]]", jSTerm0.toString());
      assertFalse(jSTerm0.isFunction());
      assertFalse(jSTerm0.isEval());
      assertFalse(jSTerm1.isEval());
      assertEquals(10, jSTerm1.capacity());
      assertEquals("[jFxA%Rdj8%, [jFxA%Rdj8%]]", jSTerm1.toString());
      assertEquals(2, jSTerm1.size());
      assertFalse(jSTerm1.isVariable());
      assertTrue(jSTerm1.isConstant());
      assertFalse(jSTerm1.isEmpty());
      assertFalse(jSTerm1.isFunction());
      assertTrue(jSTerm2.isConstant());
      assertEquals("[jFxA%Rdj8%]", jSTerm2.toString());
      assertFalse(jSTerm2.isVariable());
      assertEquals(1, jSTerm2.capacity());
      assertEquals(1, jSTerm2.size());
      assertFalse(jSTerm2.isFunction());
      assertFalse(jSTerm2.isEval());
      assertFalse(jSTerm2.isEmpty());
      assertTrue(boolean0);
      assertNotSame(jSTerm0, jSTerm2);
      assertSame(jSTerm0, jSTerm1);
      assertNotSame(jSTerm1, jSTerm2);
      assertSame(jSTerm1, jSTerm0);
      assertNotSame(jSTerm2, jSTerm0);
      assertNotSame(jSTerm2, jSTerm1);
      assertFalse(jSTerm0.equals((Object)jSTerm2));
      assertFalse(jSTerm1.equals((Object)jSTerm2));
      assertFalse(jSTerm2.equals((Object)jSTerm0));
      assertFalse(jSTerm2.equals((Object)jSTerm1));
      assertEquals(0.0, streamTokenizer0.nval, 0.01);
      assertEquals(32, streamTokenizer0.ttype);
      
      jSTerm0.makeEval(true);
      assertEquals(1, streamTokenizer0.lineno());
      assertEquals("Token[' '], line 1", streamTokenizer0.toString());
      assertFalse(jSTerm0.isEmpty());
      assertTrue(jSTerm0.isEval());
      assertTrue(jSTerm0.isConstant());
      assertFalse(jSTerm0.isVariable());
      assertEquals(10, jSTerm0.capacity());
      assertEquals(2, jSTerm0.size());
      assertEquals("[jFxA%Rdj8%, [jFxA%Rdj8%]]", jSTerm0.toString());
      assertFalse(jSTerm0.isFunction());
      assertNotSame(jSTerm0, jSTerm2);
      assertSame(jSTerm0, jSTerm1);
      assertFalse(jSTerm0.equals((Object)jSTerm2));
      assertEquals(0.0, streamTokenizer0.nval, 0.01);
      assertEquals(32, streamTokenizer0.ttype);
      
      jSTerm0.makeFunction();
      assertEquals(1, streamTokenizer0.lineno());
      assertEquals("Token[' '], line 1", streamTokenizer0.toString());
      assertTrue(jSTerm0.isFunction());
      assertFalse(jSTerm0.isEmpty());
      assertTrue(jSTerm0.isEval());
      assertFalse(jSTerm0.isVariable());
      assertEquals(10, jSTerm0.capacity());
      assertEquals(2, jSTerm0.size());
      assertEquals("[jFxA%Rdj8%, [jFxA%Rdj8%]]", jSTerm0.toString());
      assertFalse(jSTerm0.isConstant());
      assertNotSame(jSTerm0, jSTerm2);
      assertSame(jSTerm0, jSTerm1);
      assertFalse(jSTerm0.equals((Object)jSTerm2));
      assertEquals(0.0, streamTokenizer0.nval, 0.01);
      assertEquals(32, streamTokenizer0.ttype);
      
      jSTerm2.makeFunction();
      assertTrue(jSSubstitution0.isEmpty());
      assertEquals(10, jSSubstitution0.capacity());
      assertEquals("[]", jSSubstitution0.toString());
      assertFalse(jSSubstitution0.fail());
      assertEquals(0, jSSubstitution0.size());
      assertEquals(1, streamTokenizer0.lineno());
      assertEquals("Token[' '], line 1", streamTokenizer0.toString());
      assertTrue(jSTerm0.isFunction());
      assertFalse(jSTerm0.isEmpty());
      assertTrue(jSTerm0.isEval());
      assertFalse(jSTerm0.isVariable());
      assertEquals(10, jSTerm0.capacity());
      assertEquals(2, jSTerm0.size());
      assertEquals("[jFxA%Rdj8%, [jFxA%Rdj8%]]", jSTerm0.toString());
      assertFalse(jSTerm0.isConstant());
      assertEquals(10, jSTerm1.capacity());
      assertEquals("[jFxA%Rdj8%, [jFxA%Rdj8%]]", jSTerm1.toString());
      assertFalse(jSTerm1.isConstant());
      assertEquals(2, jSTerm1.size());
      assertTrue(jSTerm1.isFunction());
      assertFalse(jSTerm1.isVariable());
      assertTrue(jSTerm1.isEval());
      assertFalse(jSTerm1.isEmpty());
      assertEquals("[jFxA%Rdj8%]", jSTerm2.toString());
      assertFalse(jSTerm2.isVariable());
      assertEquals(1, jSTerm2.capacity());
      assertEquals(1, jSTerm2.size());
      assertFalse(jSTerm2.isEval());
      assertTrue(jSTerm2.isFunction());
      assertFalse(jSTerm2.isEmpty());
      assertFalse(jSTerm2.isConstant());
      assertNotSame(jSTerm0, jSTerm2);
      assertSame(jSTerm0, jSTerm1);
      assertNotSame(jSTerm1, jSTerm2);
      assertSame(jSTerm1, jSTerm0);
      assertNotSame(jSTerm2, jSTerm0);
      assertNotSame(jSTerm2, jSTerm1);
      assertFalse(jSTerm0.equals((Object)jSTerm2));
      assertFalse(jSTerm1.equals((Object)jSTerm2));
      assertFalse(jSTerm2.equals((Object)jSTerm0));
      assertFalse(jSTerm2.equals((Object)jSTerm1));
      assertEquals(0.0, streamTokenizer0.nval, 0.01);
      assertEquals(32, streamTokenizer0.ttype);
      
      boolean boolean1 = jSTerm2.equals(jSTerm0);
      assertTrue(jSSubstitution0.isEmpty());
      assertEquals(10, jSSubstitution0.capacity());
      assertEquals("[]", jSSubstitution0.toString());
      assertFalse(jSSubstitution0.fail());
      assertEquals(0, jSSubstitution0.size());
      assertEquals(1, streamTokenizer0.lineno());
      assertEquals("Token[' '], line 1", streamTokenizer0.toString());
      assertTrue(jSTerm0.isFunction());
      assertFalse(jSTerm0.isEmpty());
      assertTrue(jSTerm0.isEval());
      assertFalse(jSTerm0.isVariable());
      assertEquals(10, jSTerm0.capacity());
      assertEquals(2, jSTerm0.size());
      assertEquals("[jFxA%Rdj8%, [jFxA%Rdj8%]]", jSTerm0.toString());
      assertFalse(jSTerm0.isConstant());
      assertEquals(10, jSTerm1.capacity());
      assertEquals("[jFxA%Rdj8%, [jFxA%Rdj8%]]", jSTerm1.toString());
      assertFalse(jSTerm1.isConstant());
      assertEquals(2, jSTerm1.size());
      assertTrue(jSTerm1.isFunction());
      assertFalse(jSTerm1.isVariable());
      assertTrue(jSTerm1.isEval());
      assertFalse(jSTerm1.isEmpty());
      assertEquals("[jFxA%Rdj8%]", jSTerm2.toString());
      assertFalse(jSTerm2.isVariable());
      assertEquals(1, jSTerm2.capacity());
      assertEquals(1, jSTerm2.size());
      assertFalse(jSTerm2.isEval());
      assertTrue(jSTerm2.isFunction());
      assertFalse(jSTerm2.isEmpty());
      assertFalse(jSTerm2.isConstant());
      assertFalse(boolean1);
      assertNotSame(jSTerm0, jSTerm2);
      assertSame(jSTerm0, jSTerm1);
      assertNotSame(jSTerm1, jSTerm2);
      assertSame(jSTerm1, jSTerm0);
      assertNotSame(jSTerm2, jSTerm0);
      assertNotSame(jSTerm2, jSTerm1);
      assertFalse(jSTerm0.equals((Object)jSTerm2));
      assertFalse(jSTerm1.equals((Object)jSTerm2));
      assertFalse(jSTerm2.equals((Object)jSTerm0));
      assertFalse(jSTerm2.equals((Object)jSTerm1));
      assertFalse(boolean1 == boolean0);
      assertEquals(0.0, streamTokenizer0.nval, 0.01);
      assertEquals(32, streamTokenizer0.ttype);
      
      jSTerm1.print();
      assertTrue(jSSubstitution0.isEmpty());
      assertEquals(10, jSSubstitution0.capacity());
      assertEquals("[]", jSSubstitution0.toString());
      assertFalse(jSSubstitution0.fail());
      assertEquals(0, jSSubstitution0.size());
      assertEquals(1, streamTokenizer0.lineno());
      assertEquals("Token[' '], line 1", streamTokenizer0.toString());
      assertTrue(jSTerm0.isFunction());
      assertFalse(jSTerm0.isEmpty());
      assertTrue(jSTerm0.isEval());
      assertFalse(jSTerm0.isVariable());
      assertEquals(10, jSTerm0.capacity());
      assertEquals(2, jSTerm0.size());
      assertEquals("[jFxA%Rdj8%, [jFxA%Rdj8%]]", jSTerm0.toString());
      assertFalse(jSTerm0.isConstant());
      assertEquals(10, jSTerm1.capacity());
      assertEquals("[jFxA%Rdj8%, [jFxA%Rdj8%]]", jSTerm1.toString());
      assertFalse(jSTerm1.isConstant());
      assertEquals(2, jSTerm1.size());
      assertTrue(jSTerm1.isFunction());
      assertFalse(jSTerm1.isVariable());
      assertTrue(jSTerm1.isEval());
      assertFalse(jSTerm1.isEmpty());
      assertNotSame(jSTerm0, jSTerm2);
      assertSame(jSTerm0, jSTerm1);
      assertNotSame(jSTerm1, jSTerm2);
      assertSame(jSTerm1, jSTerm0);
      assertFalse(jSTerm0.equals((Object)jSTerm2));
      assertFalse(jSTerm1.equals((Object)jSTerm2));
      assertEquals(0.0, streamTokenizer0.nval, 0.01);
      assertEquals(32, streamTokenizer0.ttype);
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      StringReader stringReader0 = new StringReader("jFxA%Rdj8% jSYG> MR");
      assertNotNull(stringReader0);
      
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      assertEquals(1, streamTokenizer0.lineno());
      assertEquals("Token[NOTHING], line 1", streamTokenizer0.toString());
      assertNotNull(streamTokenizer0);
      assertEquals(0.0, streamTokenizer0.nval, 0.01);
      assertEquals((-4), streamTokenizer0.ttype);
      
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      assertEquals(1, streamTokenizer0.lineno());
      assertEquals("Token[' '], line 1", streamTokenizer0.toString());
      assertFalse(jSTerm0.isEmpty());
      assertEquals("[jFxA%Rdj8%]", jSTerm0.toString());
      assertEquals(10, jSTerm0.capacity());
      assertFalse(jSTerm0.isFunction());
      assertFalse(jSTerm0.isEval());
      assertEquals(1, jSTerm0.size());
      assertTrue(jSTerm0.isConstant());
      assertFalse(jSTerm0.isVariable());
      assertNotNull(jSTerm0);
      assertEquals(32, streamTokenizer0.ttype);
      assertEquals(0.0, streamTokenizer0.nval, 0.01);
      
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      assertEquals(0, jSSubstitution0.size());
      assertEquals("[]", jSSubstitution0.toString());
      assertEquals(10, jSSubstitution0.capacity());
      assertFalse(jSSubstitution0.fail());
      assertTrue(jSSubstitution0.isEmpty());
      assertNotNull(jSSubstitution0);
      
      JSTerm jSTerm1 = jSSubstitution0.instance(jSTerm0);
      assertEquals(1, streamTokenizer0.lineno());
      assertEquals("Token[' '], line 1", streamTokenizer0.toString());
      assertFalse(jSTerm0.isEmpty());
      assertEquals("[jFxA%Rdj8%]", jSTerm0.toString());
      assertEquals(10, jSTerm0.capacity());
      assertFalse(jSTerm0.isFunction());
      assertFalse(jSTerm0.isEval());
      assertEquals(1, jSTerm0.size());
      assertTrue(jSTerm0.isConstant());
      assertFalse(jSTerm0.isVariable());
      assertEquals(0, jSSubstitution0.size());
      assertEquals("[]", jSSubstitution0.toString());
      assertEquals(10, jSSubstitution0.capacity());
      assertFalse(jSSubstitution0.fail());
      assertTrue(jSSubstitution0.isEmpty());
      assertFalse(jSTerm1.isEval());
      assertEquals(1, jSTerm1.size());
      assertFalse(jSTerm1.isFunction());
      assertFalse(jSTerm1.isVariable());
      assertTrue(jSTerm1.isConstant());
      assertEquals("[jFxA%Rdj8%]", jSTerm1.toString());
      assertFalse(jSTerm1.isEmpty());
      assertEquals(10, jSTerm1.capacity());
      assertSame(jSTerm0, jSTerm1);
      assertSame(jSTerm1, jSTerm0);
      assertNotNull(jSTerm1);
      assertEquals(32, streamTokenizer0.ttype);
      assertEquals(0.0, streamTokenizer0.nval, 0.01);
      
      JSSubstitution jSSubstitution1 = jSSubstitution0.cloneS();
      assertEquals(0, jSSubstitution0.size());
      assertEquals("[]", jSSubstitution0.toString());
      assertEquals(10, jSSubstitution0.capacity());
      assertFalse(jSSubstitution0.fail());
      assertTrue(jSSubstitution0.isEmpty());
      assertEquals(0, jSSubstitution1.size());
      assertTrue(jSSubstitution1.isEmpty());
      assertFalse(jSSubstitution1.fail());
      assertEquals(10, jSSubstitution1.capacity());
      assertEquals("[]", jSSubstitution1.toString());
      assertNotSame(jSSubstitution0, jSSubstitution1);
      assertNotSame(jSSubstitution1, jSSubstitution0);
      assertNotNull(jSSubstitution1);
      assertTrue(jSSubstitution1.equals((Object)jSSubstitution0));
      
      JSSubstitution jSSubstitution2 = (JSSubstitution)jSSubstitution0.clone();
      assertEquals(0, jSSubstitution0.size());
      assertEquals("[]", jSSubstitution0.toString());
      assertEquals(10, jSSubstitution0.capacity());
      assertFalse(jSSubstitution0.fail());
      assertTrue(jSSubstitution0.isEmpty());
      assertEquals(0, jSSubstitution2.capacity());
      assertTrue(jSSubstitution2.isEmpty());
      assertFalse(jSSubstitution2.fail());
      assertEquals(0, jSSubstitution2.size());
      assertEquals("[]", jSSubstitution2.toString());
      assertNotSame(jSSubstitution0, jSSubstitution2);
      assertNotSame(jSSubstitution0, jSSubstitution1);
      assertNotSame(jSSubstitution2, jSSubstitution0);
      assertNotSame(jSSubstitution2, jSSubstitution1);
      assertNotNull(jSSubstitution2);
      assertTrue(jSSubstitution0.equals((Object)jSSubstitution1));
      assertTrue(jSSubstitution2.equals((Object)jSSubstitution1));
      assertTrue(jSSubstitution2.equals((Object)jSSubstitution0));
      
      jSTerm0.makeEval(true);
      assertEquals(1, streamTokenizer0.lineno());
      assertEquals("Token[' '], line 1", streamTokenizer0.toString());
      assertTrue(jSTerm0.isEval());
      assertFalse(jSTerm0.isEmpty());
      assertEquals("[jFxA%Rdj8%]", jSTerm0.toString());
      assertEquals(10, jSTerm0.capacity());
      assertFalse(jSTerm0.isFunction());
      assertEquals(1, jSTerm0.size());
      assertTrue(jSTerm0.isConstant());
      assertFalse(jSTerm0.isVariable());
      assertSame(jSTerm0, jSTerm1);
      assertEquals(32, streamTokenizer0.ttype);
      assertEquals(0.0, streamTokenizer0.nval, 0.01);
      
      jSTerm1.makeFunction();
      assertEquals(1, streamTokenizer0.lineno());
      assertEquals("Token[' '], line 1", streamTokenizer0.toString());
      assertTrue(jSTerm0.isEval());
      assertFalse(jSTerm0.isEmpty());
      assertTrue(jSTerm0.isFunction());
      assertEquals("[jFxA%Rdj8%]", jSTerm0.toString());
      assertFalse(jSTerm0.isConstant());
      assertEquals(10, jSTerm0.capacity());
      assertEquals(1, jSTerm0.size());
      assertFalse(jSTerm0.isVariable());
      assertEquals(0, jSSubstitution0.size());
      assertEquals("[]", jSSubstitution0.toString());
      assertEquals(10, jSSubstitution0.capacity());
      assertFalse(jSSubstitution0.fail());
      assertTrue(jSSubstitution0.isEmpty());
      assertEquals(1, jSTerm1.size());
      assertFalse(jSTerm1.isVariable());
      assertTrue(jSTerm1.isEval());
      assertEquals("[jFxA%Rdj8%]", jSTerm1.toString());
      assertTrue(jSTerm1.isFunction());
      assertFalse(jSTerm1.isEmpty());
      assertFalse(jSTerm1.isConstant());
      assertEquals(10, jSTerm1.capacity());
      assertSame(jSTerm0, jSTerm1);
      assertNotSame(jSSubstitution0, jSSubstitution2);
      assertNotSame(jSSubstitution0, jSSubstitution1);
      assertSame(jSTerm1, jSTerm0);
      assertTrue(jSSubstitution0.equals((Object)jSSubstitution1));
      assertTrue(jSSubstitution0.equals((Object)jSSubstitution2));
      assertEquals(32, streamTokenizer0.ttype);
      assertEquals(0.0, streamTokenizer0.nval, 0.01);
      
      jSTerm0.makeVariable();
      assertEquals(1, streamTokenizer0.lineno());
      assertEquals("Token[' '], line 1", streamTokenizer0.toString());
      assertTrue(jSTerm0.isEval());
      assertFalse(jSTerm0.isEmpty());
      assertEquals("[jFxA%Rdj8%]", jSTerm0.toString());
      assertFalse(jSTerm0.isConstant());
      assertTrue(jSTerm0.isVariable());
      assertEquals(10, jSTerm0.capacity());
      assertFalse(jSTerm0.isFunction());
      assertEquals(1, jSTerm0.size());
      assertSame(jSTerm0, jSTerm1);
      assertEquals(32, streamTokenizer0.ttype);
      assertEquals(0.0, streamTokenizer0.nval, 0.01);
      
      boolean boolean0 = jSTerm1.equals(jSTerm0);
      assertEquals(1, streamTokenizer0.lineno());
      assertEquals("Token[' '], line 1", streamTokenizer0.toString());
      assertTrue(jSTerm0.isEval());
      assertFalse(jSTerm0.isEmpty());
      assertEquals("[jFxA%Rdj8%]", jSTerm0.toString());
      assertFalse(jSTerm0.isConstant());
      assertTrue(jSTerm0.isVariable());
      assertEquals(10, jSTerm0.capacity());
      assertFalse(jSTerm0.isFunction());
      assertEquals(1, jSTerm0.size());
      assertEquals(0, jSSubstitution0.size());
      assertEquals("[]", jSSubstitution0.toString());
      assertEquals(10, jSSubstitution0.capacity());
      assertFalse(jSSubstitution0.fail());
      assertTrue(jSSubstitution0.isEmpty());
      assertEquals(1, jSTerm1.size());
      assertFalse(jSTerm1.isFunction());
      assertTrue(jSTerm1.isEval());
      assertEquals("[jFxA%Rdj8%]", jSTerm1.toString());
      assertFalse(jSTerm1.isEmpty());
      assertTrue(jSTerm1.isVariable());
      assertFalse(jSTerm1.isConstant());
      assertEquals(10, jSTerm1.capacity());
      assertTrue(boolean0);
      assertSame(jSTerm0, jSTerm1);
      assertNotSame(jSSubstitution0, jSSubstitution2);
      assertNotSame(jSSubstitution0, jSSubstitution1);
      assertSame(jSTerm1, jSTerm0);
      assertTrue(jSSubstitution0.equals((Object)jSSubstitution1));
      assertTrue(jSSubstitution0.equals((Object)jSSubstitution2));
      assertEquals(32, streamTokenizer0.ttype);
      assertEquals(0.0, streamTokenizer0.nval, 0.01);
      
      JSTerm jSTerm2 = jSTerm0.cloneT();
      assertEquals(1, streamTokenizer0.lineno());
      assertEquals("Token[' '], line 1", streamTokenizer0.toString());
      assertTrue(jSTerm0.isEval());
      assertFalse(jSTerm0.isEmpty());
      assertEquals("[jFxA%Rdj8%]", jSTerm0.toString());
      assertFalse(jSTerm0.isConstant());
      assertTrue(jSTerm0.isVariable());
      assertEquals(10, jSTerm0.capacity());
      assertFalse(jSTerm0.isFunction());
      assertEquals(1, jSTerm0.size());
      assertEquals("[jFxA%Rdj8%]", jSTerm2.toString());
      assertEquals(1, jSTerm2.size());
      assertFalse(jSTerm2.isConstant());
      assertFalse(jSTerm2.isEmpty());
      assertEquals(10, jSTerm2.capacity());
      assertTrue(jSTerm2.isEval());
      assertFalse(jSTerm2.isFunction());
      assertTrue(jSTerm2.isVariable());
      assertSame(jSTerm0, jSTerm1);
      assertNotSame(jSTerm0, jSTerm2);
      assertNotSame(jSTerm2, jSTerm0);
      assertNotSame(jSTerm2, jSTerm1);
      assertNotNull(jSTerm2);
      assertTrue(jSTerm2.equals((Object)jSTerm1));
      assertTrue(jSTerm2.equals((Object)jSTerm0));
      assertEquals(32, streamTokenizer0.ttype);
      assertEquals(0.0, streamTokenizer0.nval, 0.01);
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      assertFalse(jSTerm0.isEval());
      assertEquals(10, jSTerm0.capacity());
      assertEquals(0, jSTerm0.size());
      assertFalse(jSTerm0.isVariable());
      assertFalse(jSTerm0.isFunction());
      assertEquals("[]", jSTerm0.toString());
      assertFalse(jSTerm0.isConstant());
      assertTrue(jSTerm0.isEmpty());
      assertNotNull(jSTerm0);
      
      jSTerm0.makeVariable();
      assertFalse(jSTerm0.isEval());
      assertEquals(10, jSTerm0.capacity());
      assertEquals(0, jSTerm0.size());
      assertFalse(jSTerm0.isFunction());
      assertEquals("[]", jSTerm0.toString());
      assertFalse(jSTerm0.isConstant());
      assertTrue(jSTerm0.isVariable());
      assertTrue(jSTerm0.isEmpty());
      
      JSTerm jSTerm1 = jSTerm0.call();
      assertFalse(jSTerm0.isEval());
      assertEquals(10, jSTerm0.capacity());
      assertEquals(0, jSTerm0.size());
      assertFalse(jSTerm0.isFunction());
      assertEquals("[]", jSTerm0.toString());
      assertFalse(jSTerm0.isConstant());
      assertTrue(jSTerm0.isVariable());
      assertTrue(jSTerm0.isEmpty());
      assertFalse(jSTerm1.isFunction());
      assertTrue(jSTerm1.isEmpty());
      assertEquals("[]", jSTerm1.toString());
      assertEquals(0, jSTerm1.size());
      assertFalse(jSTerm1.isEval());
      assertFalse(jSTerm1.isConstant());
      assertEquals(0, jSTerm1.capacity());
      assertTrue(jSTerm1.isVariable());
      assertNotSame(jSTerm0, jSTerm1);
      assertNotSame(jSTerm1, jSTerm0);
      assertNotNull(jSTerm1);
      assertTrue(jSTerm1.equals((Object)jSTerm0));
      
      JSJshopVars.colon = 63;
      // Undeclared exception!
      try { 
        jSTerm1.standardizerTerm();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      assertTrue(jSSubstitution0.isEmpty());
      assertEquals(10, jSSubstitution0.capacity());
      assertEquals("[]", jSSubstitution0.toString());
      assertFalse(jSSubstitution0.fail());
      assertEquals(0, jSSubstitution0.size());
      assertNotNull(jSSubstitution0);
      
      StringReader stringReader0 = new StringReader("jFxA%Rdj8% jSYG> MR");
      assertNotNull(stringReader0);
      
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      assertEquals(1, streamTokenizer0.lineno());
      assertEquals("Token[NOTHING], line 1", streamTokenizer0.toString());
      assertNotNull(streamTokenizer0);
      assertEquals((-4), streamTokenizer0.ttype);
      assertEquals(0.0, streamTokenizer0.nval, 0.01);
      
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      assertEquals(1, streamTokenizer0.lineno());
      assertEquals("Token[' '], line 1", streamTokenizer0.toString());
      assertFalse(jSTerm0.isVariable());
      assertFalse(jSTerm0.isFunction());
      assertFalse(jSTerm0.isEval());
      assertEquals(1, jSTerm0.size());
      assertEquals(10, jSTerm0.capacity());
      assertFalse(jSTerm0.isEmpty());
      assertTrue(jSTerm0.isConstant());
      assertEquals("[jFxA%Rdj8%]", jSTerm0.toString());
      assertNotNull(jSTerm0);
      assertEquals(32, streamTokenizer0.ttype);
      assertEquals(0.0, streamTokenizer0.nval, 0.01);
      
      JSTerm jSTerm1 = jSSubstitution0.instance(jSTerm0);
      assertTrue(jSSubstitution0.isEmpty());
      assertEquals(10, jSSubstitution0.capacity());
      assertEquals("[]", jSSubstitution0.toString());
      assertFalse(jSSubstitution0.fail());
      assertEquals(0, jSSubstitution0.size());
      assertEquals(1, streamTokenizer0.lineno());
      assertEquals("Token[' '], line 1", streamTokenizer0.toString());
      assertFalse(jSTerm0.isVariable());
      assertFalse(jSTerm0.isFunction());
      assertFalse(jSTerm0.isEval());
      assertEquals(1, jSTerm0.size());
      assertEquals(10, jSTerm0.capacity());
      assertFalse(jSTerm0.isEmpty());
      assertTrue(jSTerm0.isConstant());
      assertEquals("[jFxA%Rdj8%]", jSTerm0.toString());
      assertFalse(jSTerm1.isVariable());
      assertEquals(10, jSTerm1.capacity());
      assertFalse(jSTerm1.isEval());
      assertFalse(jSTerm1.isFunction());
      assertEquals(1, jSTerm1.size());
      assertFalse(jSTerm1.isEmpty());
      assertEquals("[jFxA%Rdj8%]", jSTerm1.toString());
      assertTrue(jSTerm1.isConstant());
      assertSame(jSTerm0, jSTerm1);
      assertSame(jSTerm1, jSTerm0);
      assertNotNull(jSTerm1);
      assertEquals(32, streamTokenizer0.ttype);
      assertEquals(0.0, streamTokenizer0.nval, 0.01);
      
      jSTerm0.makeFunction();
      assertEquals(1, streamTokenizer0.lineno());
      assertEquals("Token[' '], line 1", streamTokenizer0.toString());
      assertFalse(jSTerm0.isVariable());
      assertFalse(jSTerm0.isEval());
      assertEquals(1, jSTerm0.size());
      assertFalse(jSTerm0.isConstant());
      assertEquals(10, jSTerm0.capacity());
      assertFalse(jSTerm0.isEmpty());
      assertTrue(jSTerm0.isFunction());
      assertEquals("[jFxA%Rdj8%]", jSTerm0.toString());
      assertSame(jSTerm0, jSTerm1);
      assertEquals(32, streamTokenizer0.ttype);
      assertEquals(0.0, streamTokenizer0.nval, 0.01);
      
      JSTerm jSTerm2 = new JSTerm(streamTokenizer0);
      assertEquals(1, streamTokenizer0.lineno());
      assertEquals("Token[' '], line 1", streamTokenizer0.toString());
      assertFalse(jSTerm2.isEmpty());
      assertEquals("[jSYG>]", jSTerm2.toString());
      assertFalse(jSTerm2.isFunction());
      assertFalse(jSTerm2.isVariable());
      assertEquals(10, jSTerm2.capacity());
      assertTrue(jSTerm2.isConstant());
      assertEquals(1, jSTerm2.size());
      assertFalse(jSTerm2.isEval());
      assertNotNull(jSTerm2);
      assertFalse(jSTerm2.equals((Object)jSTerm0));
      assertFalse(jSTerm2.equals((Object)jSTerm1));
      assertEquals(32, streamTokenizer0.ttype);
      assertEquals(0.0, streamTokenizer0.nval, 0.01);
      
      JSSubstitution jSSubstitution1 = jSTerm1.matches(jSTerm0);
      assertTrue(jSSubstitution0.isEmpty());
      assertEquals(10, jSSubstitution0.capacity());
      assertEquals("[]", jSSubstitution0.toString());
      assertFalse(jSSubstitution0.fail());
      assertEquals(0, jSSubstitution0.size());
      assertEquals(1, streamTokenizer0.lineno());
      assertEquals("Token[' '], line 1", streamTokenizer0.toString());
      assertFalse(jSTerm0.isVariable());
      assertFalse(jSTerm0.isEval());
      assertEquals(1, jSTerm0.size());
      assertFalse(jSTerm0.isConstant());
      assertEquals(10, jSTerm0.capacity());
      assertFalse(jSTerm0.isEmpty());
      assertTrue(jSTerm0.isFunction());
      assertEquals("[jFxA%Rdj8%]", jSTerm0.toString());
      assertFalse(jSTerm1.isVariable());
      assertEquals(10, jSTerm1.capacity());
      assertFalse(jSTerm1.isEval());
      assertEquals(1, jSTerm1.size());
      assertFalse(jSTerm1.isConstant());
      assertFalse(jSTerm1.isEmpty());
      assertTrue(jSTerm1.isFunction());
      assertEquals("[jFxA%Rdj8%]", jSTerm1.toString());
      assertEquals("[]", jSSubstitution1.toString());
      assertTrue(jSSubstitution1.isEmpty());
      assertFalse(jSSubstitution1.fail());
      assertEquals(10, jSSubstitution1.capacity());
      assertEquals(0, jSSubstitution1.size());
      assertNotSame(jSSubstitution0, jSSubstitution1);
      assertNotSame(jSTerm0, jSTerm2);
      assertSame(jSTerm0, jSTerm1);
      assertSame(jSTerm1, jSTerm0);
      assertNotSame(jSTerm1, jSTerm2);
      assertNotSame(jSSubstitution1, jSSubstitution0);
      assertNotNull(jSSubstitution1);
      assertFalse(jSTerm0.equals((Object)jSTerm2));
      assertFalse(jSTerm1.equals((Object)jSTerm2));
      assertTrue(jSSubstitution1.equals((Object)jSSubstitution0));
      assertEquals(32, streamTokenizer0.ttype);
      assertEquals(0.0, streamTokenizer0.nval, 0.01);
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      StringReader stringReader0 = new StringReader(">");
      assertNotNull(stringReader0);
      
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      assertEquals("Token[NOTHING], line 1", streamTokenizer0.toString());
      assertEquals(1, streamTokenizer0.lineno());
      assertNotNull(streamTokenizer0);
      assertEquals((-4), streamTokenizer0.ttype);
      assertEquals(0.0, streamTokenizer0.nval, 0.01);
      
      JSTerm jSTerm0 = new JSTerm();
      assertEquals(0, jSTerm0.size());
      assertFalse(jSTerm0.isEval());
      assertFalse(jSTerm0.isFunction());
      assertFalse(jSTerm0.isConstant());
      assertEquals(10, jSTerm0.capacity());
      assertEquals("[]", jSTerm0.toString());
      assertFalse(jSTerm0.isVariable());
      assertTrue(jSTerm0.isEmpty());
      assertNotNull(jSTerm0);
      
      // Undeclared exception!
      try { 
        jSTerm0.parseList(streamTokenizer0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      assertFalse(jSTerm0.isConstant());
      assertFalse(jSTerm0.isEval());
      assertEquals(0, jSTerm0.size());
      assertFalse(jSTerm0.isVariable());
      assertTrue(jSTerm0.isEmpty());
      assertEquals("[]", jSTerm0.toString());
      assertFalse(jSTerm0.isFunction());
      assertEquals(10, jSTerm0.capacity());
      assertNotNull(jSTerm0);
      
      JSJshopVars.plus = 0;
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      assertEquals(0, jSSubstitution0.size());
      assertTrue(jSSubstitution0.isEmpty());
      assertFalse(jSSubstitution0.fail());
      assertEquals("[]", jSSubstitution0.toString());
      assertEquals(10, jSSubstitution0.capacity());
      assertNotNull(jSSubstitution0);
      
      jSTerm0.makeVariable();
      assertFalse(jSTerm0.isConstant());
      assertFalse(jSTerm0.isEval());
      assertTrue(jSTerm0.isVariable());
      assertEquals(0, jSTerm0.size());
      assertTrue(jSTerm0.isEmpty());
      assertEquals("[]", jSTerm0.toString());
      assertFalse(jSTerm0.isFunction());
      assertEquals(10, jSTerm0.capacity());
      
      // Undeclared exception!
      try { 
        jSTerm0.applySubstitutionT(jSSubstitution0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      StringReader stringReader0 = new StringReader("JSTerm");
      assertNotNull(stringReader0);
      
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      assertEquals(1, streamTokenizer0.lineno());
      assertEquals("Token[NOTHING], line 1", streamTokenizer0.toString());
      assertNotNull(streamTokenizer0);
      assertEquals((-4), streamTokenizer0.ttype);
      assertEquals(0.0, streamTokenizer0.nval, 0.01);
      
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      assertEquals(1, streamTokenizer0.lineno());
      assertEquals("Token[EOF], line 1", streamTokenizer0.toString());
      assertEquals("[%%%]", jSTerm0.toString());
      assertTrue(jSTerm0.isConstant());
      assertFalse(jSTerm0.isEmpty());
      assertEquals(1, jSTerm0.size());
      assertEquals(10, jSTerm0.capacity());
      assertFalse(jSTerm0.isFunction());
      assertFalse(jSTerm0.isEval());
      assertFalse(jSTerm0.isVariable());
      assertNotNull(jSTerm0);
      assertEquals((-1), streamTokenizer0.ttype);
      assertEquals(0.0, streamTokenizer0.nval, 0.01);
      
      StringBuffer stringBuffer0 = jSTerm0.toStr();
      assertEquals(1, streamTokenizer0.lineno());
      assertEquals("Token[EOF], line 1", streamTokenizer0.toString());
      assertEquals("[%%%]", jSTerm0.toString());
      assertTrue(jSTerm0.isConstant());
      assertFalse(jSTerm0.isEmpty());
      assertEquals(1, jSTerm0.size());
      assertEquals(10, jSTerm0.capacity());
      assertFalse(jSTerm0.isFunction());
      assertFalse(jSTerm0.isEval());
      assertFalse(jSTerm0.isVariable());
      assertEquals(4, stringBuffer0.length());
      assertEquals("%%% ", stringBuffer0.toString());
      assertNotNull(stringBuffer0);
      assertEquals((-1), streamTokenizer0.ttype);
      assertEquals(0.0, streamTokenizer0.nval, 0.01);
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      assertEquals("[]", jSSubstitution0.toString());
      assertTrue(jSSubstitution0.isEmpty());
      assertFalse(jSSubstitution0.fail());
      assertEquals(10, jSSubstitution0.capacity());
      assertEquals(0, jSSubstitution0.size());
      assertNotNull(jSSubstitution0);
      
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      assertEquals(0, jSSubstitution1.size());
      assertEquals("[]", jSSubstitution1.toString());
      assertFalse(jSSubstitution1.fail());
      assertEquals(10, jSSubstitution1.capacity());
      assertTrue(jSSubstitution1.isEmpty());
      assertNotNull(jSSubstitution1);
      assertTrue(jSSubstitution1.equals((Object)jSSubstitution0));
      
      StringReader stringReader0 = new StringReader("O|<");
      assertNotNull(stringReader0);
      
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      assertEquals("Token[NOTHING], line 1", streamTokenizer0.toString());
      assertEquals(1, streamTokenizer0.lineno());
      assertNotNull(streamTokenizer0);
      assertEquals((-4), streamTokenizer0.ttype);
      assertEquals(0.0, streamTokenizer0.nval, 0.01);
      
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      assertEquals("Token[EOF], line 1", streamTokenizer0.toString());
      assertEquals(1, streamTokenizer0.lineno());
      assertFalse(jSTerm0.isVariable());
      assertFalse(jSTerm0.isFunction());
      assertEquals(10, jSTerm0.capacity());
      assertFalse(jSTerm0.isEval());
      assertEquals(1, jSTerm0.size());
      assertFalse(jSTerm0.isEmpty());
      assertEquals("[%%%]", jSTerm0.toString());
      assertTrue(jSTerm0.isConstant());
      assertNotNull(jSTerm0);
      assertEquals((-1), streamTokenizer0.ttype);
      assertEquals(0.0, streamTokenizer0.nval, 0.01);
      
      jSTerm0.print();
      assertEquals("Token[EOF], line 1", streamTokenizer0.toString());
      assertEquals(1, streamTokenizer0.lineno());
      assertFalse(jSTerm0.isVariable());
      assertFalse(jSTerm0.isFunction());
      assertEquals(10, jSTerm0.capacity());
      assertFalse(jSTerm0.isEval());
      assertEquals(1, jSTerm0.size());
      assertFalse(jSTerm0.isEmpty());
      assertEquals("[%%%]", jSTerm0.toString());
      assertTrue(jSTerm0.isConstant());
      assertEquals((-1), streamTokenizer0.ttype);
      assertEquals(0.0, streamTokenizer0.nval, 0.01);
      
      JSTerm jSTerm1 = jSTerm0.standardizerTerm();
      assertEquals("Token[EOF], line 1", streamTokenizer0.toString());
      assertEquals(1, streamTokenizer0.lineno());
      assertFalse(jSTerm0.isVariable());
      assertFalse(jSTerm0.isFunction());
      assertEquals(10, jSTerm0.capacity());
      assertFalse(jSTerm0.isEval());
      assertEquals(1, jSTerm0.size());
      assertFalse(jSTerm0.isEmpty());
      assertEquals("[%%%]", jSTerm0.toString());
      assertTrue(jSTerm0.isConstant());
      assertFalse(jSTerm1.isFunction());
      assertEquals(10, jSTerm1.capacity());
      assertFalse(jSTerm1.isVariable());
      assertFalse(jSTerm1.isEval());
      assertTrue(jSTerm1.isConstant());
      assertFalse(jSTerm1.isEmpty());
      assertEquals(1, jSTerm1.size());
      assertEquals("[%%%]", jSTerm1.toString());
      assertNotSame(jSTerm0, jSTerm1);
      assertNotSame(jSTerm1, jSTerm0);
      assertNotNull(jSTerm1);
      assertTrue(jSTerm1.equals((Object)jSTerm0));
      assertEquals((-1), streamTokenizer0.ttype);
      assertEquals(0.0, streamTokenizer0.nval, 0.01);
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      assertFalse(jSTerm0.isConstant());
      assertEquals(10, jSTerm0.capacity());
      assertFalse(jSTerm0.isFunction());
      assertFalse(jSTerm0.isVariable());
      assertTrue(jSTerm0.isEmpty());
      assertEquals("[]", jSTerm0.toString());
      assertFalse(jSTerm0.isEval());
      assertEquals(0, jSTerm0.size());
      assertNotNull(jSTerm0);
      
      jSTerm0.makeFunction();
      assertTrue(jSTerm0.isFunction());
      assertFalse(jSTerm0.isConstant());
      assertEquals(10, jSTerm0.capacity());
      assertFalse(jSTerm0.isVariable());
      assertTrue(jSTerm0.isEmpty());
      assertEquals("[]", jSTerm0.toString());
      assertFalse(jSTerm0.isEval());
      assertEquals(0, jSTerm0.size());
      
      // Undeclared exception!
      try { 
        jSTerm0.equals(jSTerm0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      assertFalse(jSTerm0.isConstant());
      assertFalse(jSTerm0.isVariable());
      assertFalse(jSTerm0.isFunction());
      assertEquals(10, jSTerm0.capacity());
      assertTrue(jSTerm0.isEmpty());
      assertEquals("[]", jSTerm0.toString());
      assertEquals(0, jSTerm0.size());
      assertFalse(jSTerm0.isEval());
      assertNotNull(jSTerm0);
      
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      assertEquals("[]", jSSubstitution0.toString());
      assertFalse(jSSubstitution0.fail());
      assertEquals(0, jSSubstitution0.size());
      assertEquals(10, jSSubstitution0.capacity());
      assertTrue(jSSubstitution0.isEmpty());
      assertNotNull(jSSubstitution0);
      
      boolean boolean0 = jSTerm0.add((Object) jSSubstitution0);
      assertFalse(jSTerm0.isEmpty());
      assertFalse(jSTerm0.isConstant());
      assertEquals("[[]]", jSTerm0.toString());
      assertFalse(jSTerm0.isVariable());
      assertFalse(jSTerm0.isFunction());
      assertEquals(10, jSTerm0.capacity());
      assertEquals(1, jSTerm0.size());
      assertFalse(jSTerm0.isEval());
      assertEquals("[]", jSSubstitution0.toString());
      assertFalse(jSSubstitution0.fail());
      assertEquals(0, jSSubstitution0.size());
      assertEquals(10, jSSubstitution0.capacity());
      assertTrue(jSSubstitution0.isEmpty());
      assertTrue(boolean0);
      
      JSTerm jSTerm1 = jSTerm0.call();
      assertFalse(jSTerm0.isEmpty());
      assertFalse(jSTerm0.isConstant());
      assertEquals("[[]]", jSTerm0.toString());
      assertFalse(jSTerm0.isVariable());
      assertFalse(jSTerm0.isFunction());
      assertEquals(10, jSTerm0.capacity());
      assertEquals(1, jSTerm0.size());
      assertFalse(jSTerm0.isEval());
      assertFalse(jSTerm1.isVariable());
      assertEquals(10, jSTerm1.capacity());
      assertEquals(1, jSTerm1.size());
      assertFalse(jSTerm1.isEval());
      assertTrue(jSTerm1.isFunction());
      assertFalse(jSTerm1.isEmpty());
      assertFalse(jSTerm1.isConstant());
      assertEquals("[[]]", jSTerm1.toString());
      assertNotSame(jSTerm0, jSTerm1);
      assertNotSame(jSTerm1, jSTerm0);
      assertNotNull(jSTerm1);
      assertTrue(jSTerm1.equals((Object)jSTerm0));
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      StringReader stringReader0 = new StringReader("jFxA%Rdj8% jSYG> MR");
      assertNotNull(stringReader0);
      
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      assertEquals(1, streamTokenizer0.lineno());
      assertEquals("Token[NOTHING], line 1", streamTokenizer0.toString());
      assertNotNull(streamTokenizer0);
      assertEquals((-4), streamTokenizer0.ttype);
      assertEquals(0.0, streamTokenizer0.nval, 0.01);
      
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      assertEquals("Token[' '], line 1", streamTokenizer0.toString());
      assertEquals(1, streamTokenizer0.lineno());
      assertEquals("[jFxA%Rdj8%]", jSTerm0.toString());
      assertEquals(1, jSTerm0.size());
      assertFalse(jSTerm0.isEval());
      assertTrue(jSTerm0.isConstant());
      assertFalse(jSTerm0.isVariable());
      assertFalse(jSTerm0.isEmpty());
      assertEquals(10, jSTerm0.capacity());
      assertFalse(jSTerm0.isFunction());
      assertNotNull(jSTerm0);
      assertEquals(32, streamTokenizer0.ttype);
      assertEquals(0.0, streamTokenizer0.nval, 0.01);
      
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      assertFalse(jSSubstitution0.fail());
      assertTrue(jSSubstitution0.isEmpty());
      assertEquals(10, jSSubstitution0.capacity());
      assertEquals(0, jSSubstitution0.size());
      assertEquals("[]", jSSubstitution0.toString());
      assertNotNull(jSSubstitution0);
      
      JSTerm jSTerm1 = jSSubstitution0.instance(jSTerm0);
      assertEquals("Token[' '], line 1", streamTokenizer0.toString());
      assertEquals(1, streamTokenizer0.lineno());
      assertEquals("[jFxA%Rdj8%]", jSTerm0.toString());
      assertEquals(1, jSTerm0.size());
      assertFalse(jSTerm0.isEval());
      assertTrue(jSTerm0.isConstant());
      assertFalse(jSTerm0.isVariable());
      assertFalse(jSTerm0.isEmpty());
      assertEquals(10, jSTerm0.capacity());
      assertFalse(jSTerm0.isFunction());
      assertFalse(jSSubstitution0.fail());
      assertTrue(jSSubstitution0.isEmpty());
      assertEquals(10, jSSubstitution0.capacity());
      assertEquals(0, jSSubstitution0.size());
      assertEquals("[]", jSSubstitution0.toString());
      assertFalse(jSTerm1.isEmpty());
      assertEquals("[jFxA%Rdj8%]", jSTerm1.toString());
      assertTrue(jSTerm1.isConstant());
      assertFalse(jSTerm1.isVariable());
      assertEquals(10, jSTerm1.capacity());
      assertFalse(jSTerm1.isFunction());
      assertFalse(jSTerm1.isEval());
      assertEquals(1, jSTerm1.size());
      assertSame(jSTerm0, jSTerm1);
      assertSame(jSTerm1, jSTerm0);
      assertNotNull(jSTerm1);
      assertEquals(32, streamTokenizer0.ttype);
      assertEquals(0.0, streamTokenizer0.nval, 0.01);
      
      JSSubstitution jSSubstitution1 = (JSSubstitution)jSSubstitution0.clone();
      assertFalse(jSSubstitution0.fail());
      assertTrue(jSSubstitution0.isEmpty());
      assertEquals(10, jSSubstitution0.capacity());
      assertEquals(0, jSSubstitution0.size());
      assertEquals("[]", jSSubstitution0.toString());
      assertEquals(0, jSSubstitution1.capacity());
      assertEquals("[]", jSSubstitution1.toString());
      assertTrue(jSSubstitution1.isEmpty());
      assertEquals(0, jSSubstitution1.size());
      assertFalse(jSSubstitution1.fail());
      assertNotSame(jSSubstitution0, jSSubstitution1);
      assertNotSame(jSSubstitution1, jSSubstitution0);
      assertNotNull(jSSubstitution1);
      assertTrue(jSSubstitution1.equals((Object)jSSubstitution0));
      
      jSTerm0.makeEval(true);
      assertEquals("Token[' '], line 1", streamTokenizer0.toString());
      assertEquals(1, streamTokenizer0.lineno());
      assertEquals("[jFxA%Rdj8%]", jSTerm0.toString());
      assertEquals(1, jSTerm0.size());
      assertTrue(jSTerm0.isConstant());
      assertFalse(jSTerm0.isVariable());
      assertFalse(jSTerm0.isEmpty());
      assertTrue(jSTerm0.isEval());
      assertEquals(10, jSTerm0.capacity());
      assertFalse(jSTerm0.isFunction());
      assertSame(jSTerm0, jSTerm1);
      assertEquals(32, streamTokenizer0.ttype);
      assertEquals(0.0, streamTokenizer0.nval, 0.01);
      
      jSTerm1.makeFunction();
      assertEquals("Token[' '], line 1", streamTokenizer0.toString());
      assertEquals(1, streamTokenizer0.lineno());
      assertEquals("[jFxA%Rdj8%]", jSTerm0.toString());
      assertEquals(1, jSTerm0.size());
      assertFalse(jSTerm0.isVariable());
      assertFalse(jSTerm0.isConstant());
      assertTrue(jSTerm0.isFunction());
      assertFalse(jSTerm0.isEmpty());
      assertTrue(jSTerm0.isEval());
      assertEquals(10, jSTerm0.capacity());
      assertFalse(jSSubstitution0.fail());
      assertTrue(jSSubstitution0.isEmpty());
      assertEquals(10, jSSubstitution0.capacity());
      assertEquals(0, jSSubstitution0.size());
      assertEquals("[]", jSSubstitution0.toString());
      assertTrue(jSTerm1.isFunction());
      assertFalse(jSTerm1.isEmpty());
      assertTrue(jSTerm1.isEval());
      assertEquals("[jFxA%Rdj8%]", jSTerm1.toString());
      assertFalse(jSTerm1.isVariable());
      assertEquals(10, jSTerm1.capacity());
      assertEquals(1, jSTerm1.size());
      assertFalse(jSTerm1.isConstant());
      assertSame(jSTerm0, jSTerm1);
      assertNotSame(jSSubstitution0, jSSubstitution1);
      assertSame(jSTerm1, jSTerm0);
      assertTrue(jSSubstitution0.equals((Object)jSSubstitution1));
      assertEquals(32, streamTokenizer0.ttype);
      assertEquals(0.0, streamTokenizer0.nval, 0.01);
      
      jSTerm0.print();
      assertEquals("Token[' '], line 1", streamTokenizer0.toString());
      assertEquals(1, streamTokenizer0.lineno());
      assertEquals("[jFxA%Rdj8%]", jSTerm0.toString());
      assertEquals(1, jSTerm0.size());
      assertFalse(jSTerm0.isVariable());
      assertFalse(jSTerm0.isConstant());
      assertTrue(jSTerm0.isFunction());
      assertFalse(jSTerm0.isEmpty());
      assertTrue(jSTerm0.isEval());
      assertEquals(10, jSTerm0.capacity());
      assertSame(jSTerm0, jSTerm1);
      assertEquals(32, streamTokenizer0.ttype);
      assertEquals(0.0, streamTokenizer0.nval, 0.01);
      
      boolean boolean0 = jSTerm1.isFunction();
      assertEquals("Token[' '], line 1", streamTokenizer0.toString());
      assertEquals(1, streamTokenizer0.lineno());
      assertEquals("[jFxA%Rdj8%]", jSTerm0.toString());
      assertEquals(1, jSTerm0.size());
      assertFalse(jSTerm0.isVariable());
      assertFalse(jSTerm0.isConstant());
      assertTrue(jSTerm0.isFunction());
      assertFalse(jSTerm0.isEmpty());
      assertTrue(jSTerm0.isEval());
      assertEquals(10, jSTerm0.capacity());
      assertFalse(jSSubstitution0.fail());
      assertTrue(jSSubstitution0.isEmpty());
      assertEquals(10, jSSubstitution0.capacity());
      assertEquals(0, jSSubstitution0.size());
      assertEquals("[]", jSSubstitution0.toString());
      assertTrue(jSTerm1.isFunction());
      assertFalse(jSTerm1.isEmpty());
      assertTrue(jSTerm1.isEval());
      assertEquals("[jFxA%Rdj8%]", jSTerm1.toString());
      assertFalse(jSTerm1.isVariable());
      assertEquals(10, jSTerm1.capacity());
      assertEquals(1, jSTerm1.size());
      assertFalse(jSTerm1.isConstant());
      assertTrue(boolean0);
      assertSame(jSTerm0, jSTerm1);
      assertNotSame(jSSubstitution0, jSSubstitution1);
      assertSame(jSTerm1, jSTerm0);
      assertTrue(jSSubstitution0.equals((Object)jSSubstitution1));
      assertEquals(32, streamTokenizer0.ttype);
      assertEquals(0.0, streamTokenizer0.nval, 0.01);
      
      JSTerm jSTerm2 = jSTerm1.cloneT();
      assertEquals("Token[' '], line 1", streamTokenizer0.toString());
      assertEquals(1, streamTokenizer0.lineno());
      assertEquals("[jFxA%Rdj8%]", jSTerm0.toString());
      assertEquals(1, jSTerm0.size());
      assertFalse(jSTerm0.isVariable());
      assertFalse(jSTerm0.isConstant());
      assertTrue(jSTerm0.isFunction());
      assertFalse(jSTerm0.isEmpty());
      assertTrue(jSTerm0.isEval());
      assertEquals(10, jSTerm0.capacity());
      assertFalse(jSSubstitution0.fail());
      assertTrue(jSSubstitution0.isEmpty());
      assertEquals(10, jSSubstitution0.capacity());
      assertEquals(0, jSSubstitution0.size());
      assertEquals("[]", jSSubstitution0.toString());
      assertTrue(jSTerm1.isFunction());
      assertFalse(jSTerm1.isEmpty());
      assertTrue(jSTerm1.isEval());
      assertEquals("[jFxA%Rdj8%]", jSTerm1.toString());
      assertFalse(jSTerm1.isVariable());
      assertEquals(10, jSTerm1.capacity());
      assertEquals(1, jSTerm1.size());
      assertFalse(jSTerm1.isConstant());
      assertEquals(1, jSTerm2.size());
      assertFalse(jSTerm2.isVariable());
      assertEquals(10, jSTerm2.capacity());
      assertFalse(jSTerm2.isEmpty());
      assertFalse(jSTerm2.isConstant());
      assertTrue(jSTerm2.isFunction());
      assertTrue(jSTerm2.isEval());
      assertEquals("[jFxA%Rdj8%]", jSTerm2.toString());
      assertSame(jSTerm0, jSTerm1);
      assertNotSame(jSTerm0, jSTerm2);
      assertNotSame(jSSubstitution0, jSSubstitution1);
      assertSame(jSTerm1, jSTerm0);
      assertNotSame(jSTerm1, jSTerm2);
      assertNotSame(jSTerm2, jSTerm0);
      assertNotSame(jSTerm2, jSTerm1);
      assertNotNull(jSTerm2);
      assertTrue(jSSubstitution0.equals((Object)jSSubstitution1));
      assertTrue(jSTerm2.equals((Object)jSTerm1));
      assertTrue(jSTerm2.equals((Object)jSTerm0));
      assertEquals(32, streamTokenizer0.ttype);
      assertEquals(0.0, streamTokenizer0.nval, 0.01);
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      assertEquals(10, jSSubstitution0.capacity());
      assertEquals("[]", jSSubstitution0.toString());
      assertFalse(jSSubstitution0.fail());
      assertEquals(0, jSSubstitution0.size());
      assertTrue(jSSubstitution0.isEmpty());
      assertNotNull(jSSubstitution0);
      
      StringReader stringReader0 = new StringReader("jFxA%Rdj8% jSYG> MR");
      assertNotNull(stringReader0);
      
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      assertEquals(1, streamTokenizer0.lineno());
      assertEquals("Token[NOTHING], line 1", streamTokenizer0.toString());
      assertNotNull(streamTokenizer0);
      assertEquals(0.0, streamTokenizer0.nval, 0.01);
      assertEquals((-4), streamTokenizer0.ttype);
      
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      assertEquals(1, streamTokenizer0.lineno());
      assertEquals("Token[' '], line 1", streamTokenizer0.toString());
      assertEquals("[jFxA%Rdj8%]", jSTerm0.toString());
      assertTrue(jSTerm0.isConstant());
      assertFalse(jSTerm0.isVariable());
      assertFalse(jSTerm0.isEval());
      assertFalse(jSTerm0.isEmpty());
      assertEquals(1, jSTerm0.size());
      assertEquals(10, jSTerm0.capacity());
      assertFalse(jSTerm0.isFunction());
      assertNotNull(jSTerm0);
      assertEquals(0.0, streamTokenizer0.nval, 0.01);
      assertEquals(32, streamTokenizer0.ttype);
      
      JSTerm jSTerm1 = jSSubstitution0.instance(jSTerm0);
      assertEquals(10, jSSubstitution0.capacity());
      assertEquals("[]", jSSubstitution0.toString());
      assertFalse(jSSubstitution0.fail());
      assertEquals(0, jSSubstitution0.size());
      assertTrue(jSSubstitution0.isEmpty());
      assertEquals(1, streamTokenizer0.lineno());
      assertEquals("Token[' '], line 1", streamTokenizer0.toString());
      assertEquals("[jFxA%Rdj8%]", jSTerm0.toString());
      assertTrue(jSTerm0.isConstant());
      assertFalse(jSTerm0.isVariable());
      assertFalse(jSTerm0.isEval());
      assertFalse(jSTerm0.isEmpty());
      assertEquals(1, jSTerm0.size());
      assertEquals(10, jSTerm0.capacity());
      assertFalse(jSTerm0.isFunction());
      assertFalse(jSTerm1.isEmpty());
      assertEquals(1, jSTerm1.size());
      assertFalse(jSTerm1.isEval());
      assertTrue(jSTerm1.isConstant());
      assertFalse(jSTerm1.isVariable());
      assertEquals("[jFxA%Rdj8%]", jSTerm1.toString());
      assertEquals(10, jSTerm1.capacity());
      assertFalse(jSTerm1.isFunction());
      assertSame(jSTerm0, jSTerm1);
      assertSame(jSTerm1, jSTerm0);
      assertNotNull(jSTerm1);
      assertEquals(0.0, streamTokenizer0.nval, 0.01);
      assertEquals(32, streamTokenizer0.ttype);
      
      boolean boolean0 = jSTerm0.add((Object) jSTerm1);
      assertEquals(10, jSSubstitution0.capacity());
      assertEquals("[]", jSSubstitution0.toString());
      assertFalse(jSSubstitution0.fail());
      assertEquals(0, jSSubstitution0.size());
      assertTrue(jSSubstitution0.isEmpty());
      assertEquals(1, streamTokenizer0.lineno());
      assertEquals("Token[' '], line 1", streamTokenizer0.toString());
      assertTrue(jSTerm0.isConstant());
      assertFalse(jSTerm0.isVariable());
      assertFalse(jSTerm0.isEval());
      assertEquals("[jFxA%Rdj8%, (this Collection)]", jSTerm0.toString());
      assertFalse(jSTerm0.isEmpty());
      assertEquals(2, jSTerm0.size());
      assertEquals(10, jSTerm0.capacity());
      assertFalse(jSTerm0.isFunction());
      assertFalse(jSTerm1.isEmpty());
      assertFalse(jSTerm1.isEval());
      assertTrue(jSTerm1.isConstant());
      assertFalse(jSTerm1.isVariable());
      assertEquals("[jFxA%Rdj8%, (this Collection)]", jSTerm1.toString());
      assertEquals(2, jSTerm1.size());
      assertEquals(10, jSTerm1.capacity());
      assertFalse(jSTerm1.isFunction());
      assertTrue(boolean0);
      assertSame(jSTerm0, jSTerm1);
      assertSame(jSTerm1, jSTerm0);
      assertEquals(0.0, streamTokenizer0.nval, 0.01);
      assertEquals(32, streamTokenizer0.ttype);
      
      JSSubstitution jSSubstitution1 = (JSSubstitution)jSSubstitution0.clone();
      assertEquals(10, jSSubstitution0.capacity());
      assertEquals("[]", jSSubstitution0.toString());
      assertFalse(jSSubstitution0.fail());
      assertEquals(0, jSSubstitution0.size());
      assertTrue(jSSubstitution0.isEmpty());
      assertFalse(jSSubstitution1.fail());
      assertEquals(0, jSSubstitution1.capacity());
      assertTrue(jSSubstitution1.isEmpty());
      assertEquals(0, jSSubstitution1.size());
      assertEquals("[]", jSSubstitution1.toString());
      assertNotSame(jSSubstitution0, jSSubstitution1);
      assertNotSame(jSSubstitution1, jSSubstitution0);
      assertNotNull(jSSubstitution1);
      assertTrue(jSSubstitution1.equals((Object)jSSubstitution0));
      
      jSTerm1.makeFunction();
      assertEquals(10, jSSubstitution0.capacity());
      assertEquals("[]", jSSubstitution0.toString());
      assertFalse(jSSubstitution0.fail());
      assertEquals(0, jSSubstitution0.size());
      assertTrue(jSSubstitution0.isEmpty());
      assertEquals(1, streamTokenizer0.lineno());
      assertEquals("Token[' '], line 1", streamTokenizer0.toString());
      assertFalse(jSTerm0.isVariable());
      assertTrue(jSTerm0.isFunction());
      assertFalse(jSTerm0.isEval());
      assertEquals("[jFxA%Rdj8%, (this Collection)]", jSTerm0.toString());
      assertFalse(jSTerm0.isEmpty());
      assertFalse(jSTerm0.isConstant());
      assertEquals(2, jSTerm0.size());
      assertEquals(10, jSTerm0.capacity());
      assertFalse(jSTerm1.isConstant());
      assertTrue(jSTerm1.isFunction());
      assertFalse(jSTerm1.isEmpty());
      assertFalse(jSTerm1.isEval());
      assertFalse(jSTerm1.isVariable());
      assertEquals("[jFxA%Rdj8%, (this Collection)]", jSTerm1.toString());
      assertEquals(2, jSTerm1.size());
      assertEquals(10, jSTerm1.capacity());
      assertNotSame(jSSubstitution0, jSSubstitution1);
      assertSame(jSTerm0, jSTerm1);
      assertSame(jSTerm1, jSTerm0);
      assertTrue(jSSubstitution0.equals((Object)jSSubstitution1));
      assertEquals(0.0, streamTokenizer0.nval, 0.01);
      assertEquals(32, streamTokenizer0.ttype);
      
      JSSubstitution jSSubstitution2 = jSTerm1.matches(jSTerm0);
      assertEquals(10, jSSubstitution0.capacity());
      assertEquals("[]", jSSubstitution0.toString());
      assertFalse(jSSubstitution0.fail());
      assertEquals(0, jSSubstitution0.size());
      assertTrue(jSSubstitution0.isEmpty());
      assertEquals(1, streamTokenizer0.lineno());
      assertEquals("Token[' '], line 1", streamTokenizer0.toString());
      assertFalse(jSTerm0.isVariable());
      assertTrue(jSTerm0.isFunction());
      assertFalse(jSTerm0.isEval());
      assertEquals("[jFxA%Rdj8%, (this Collection)]", jSTerm0.toString());
      assertFalse(jSTerm0.isEmpty());
      assertFalse(jSTerm0.isConstant());
      assertEquals(2, jSTerm0.size());
      assertEquals(10, jSTerm0.capacity());
      assertFalse(jSTerm1.isConstant());
      assertTrue(jSTerm1.isFunction());
      assertFalse(jSTerm1.isEmpty());
      assertFalse(jSTerm1.isEval());
      assertFalse(jSTerm1.isVariable());
      assertEquals("[jFxA%Rdj8%, (this Collection)]", jSTerm1.toString());
      assertEquals(2, jSTerm1.size());
      assertEquals(10, jSTerm1.capacity());
      assertTrue(jSSubstitution2.isEmpty());
      assertFalse(jSSubstitution2.fail());
      assertEquals(0, jSSubstitution2.size());
      assertEquals(10, jSSubstitution2.capacity());
      assertEquals("[]", jSSubstitution2.toString());
      assertNotSame(jSSubstitution0, jSSubstitution2);
      assertNotSame(jSSubstitution0, jSSubstitution1);
      assertSame(jSTerm0, jSTerm1);
      assertSame(jSTerm1, jSTerm0);
      assertNotSame(jSSubstitution2, jSSubstitution0);
      assertNotSame(jSSubstitution2, jSSubstitution1);
      assertNotNull(jSSubstitution2);
      assertTrue(jSSubstitution0.equals((Object)jSSubstitution1));
      assertTrue(jSSubstitution2.equals((Object)jSSubstitution0));
      assertTrue(jSSubstitution2.equals((Object)jSSubstitution1));
      assertEquals(0.0, streamTokenizer0.nval, 0.01);
      assertEquals(32, streamTokenizer0.ttype);
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      assertEquals(10, jSSubstitution0.capacity());
      assertEquals("[]", jSSubstitution0.toString());
      assertFalse(jSSubstitution0.fail());
      assertEquals(0, jSSubstitution0.size());
      assertTrue(jSSubstitution0.isEmpty());
      assertNotNull(jSSubstitution0);
      
      JSTerm jSTerm0 = new JSTerm();
      assertTrue(jSTerm0.isEmpty());
      assertEquals("[]", jSTerm0.toString());
      assertFalse(jSTerm0.isEval());
      assertFalse(jSTerm0.isVariable());
      assertFalse(jSTerm0.isConstant());
      assertEquals(0, jSTerm0.size());
      assertEquals(10, jSTerm0.capacity());
      assertFalse(jSTerm0.isFunction());
      assertNotNull(jSTerm0);
      
      // Undeclared exception!
      try { 
        jSTerm0.equals((JSTerm) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      StringReader stringReader0 = new StringReader("jFxA%Rdj8% jSYG> MR");
      assertNotNull(stringReader0);
      
      StringReader stringReader1 = new StringReader("jFxA%Rdj8% jSYG> MR");
      assertNotNull(stringReader1);
      assertFalse(stringReader1.equals((Object)stringReader0));
      
      StringReader stringReader2 = new StringReader("jFxA%Rdj8% jSYG> MR");
      assertNotNull(stringReader2);
      assertFalse(stringReader2.equals((Object)stringReader1));
      assertFalse(stringReader2.equals((Object)stringReader0));
      
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      assertEquals("Token[NOTHING], line 1", streamTokenizer0.toString());
      assertEquals(1, streamTokenizer0.lineno());
      assertNotNull(streamTokenizer0);
      assertFalse(stringReader0.equals((Object)stringReader1));
      assertFalse(stringReader0.equals((Object)stringReader2));
      assertEquals((-4), streamTokenizer0.ttype);
      assertEquals(0.0, streamTokenizer0.nval, 0.01);
      
      int int0 = streamTokenizer0.nextToken();
      assertEquals("Token[jFxA], line 1", streamTokenizer0.toString());
      assertEquals(1, streamTokenizer0.lineno());
      assertEquals((-3), int0);
      assertNotSame(stringReader0, stringReader1);
      assertNotSame(stringReader0, stringReader2);
      assertFalse(stringReader0.equals((Object)stringReader1));
      assertFalse(stringReader0.equals((Object)stringReader2));
      assertEquals((-3), streamTokenizer0.ttype);
      assertEquals(0.0, streamTokenizer0.nval, 0.01);
      
      JSTerm jSTerm0 = new JSTerm();
      assertEquals(0, jSTerm0.size());
      assertTrue(jSTerm0.isEmpty());
      assertFalse(jSTerm0.isEval());
      assertFalse(jSTerm0.isVariable());
      assertFalse(jSTerm0.isConstant());
      assertEquals("[]", jSTerm0.toString());
      assertEquals(10, jSTerm0.capacity());
      assertFalse(jSTerm0.isFunction());
      assertNotNull(jSTerm0);
      
      // Undeclared exception!
      try { 
        jSTerm0.parseList(streamTokenizer0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      StringReader stringReader0 = new StringReader("jFxA%Rdj8% jSYG> MR");
      assertNotNull(stringReader0);
      
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      assertEquals(1, streamTokenizer0.lineno());
      assertEquals("Token[NOTHING], line 1", streamTokenizer0.toString());
      assertNotNull(streamTokenizer0);
      assertEquals(0.0, streamTokenizer0.nval, 0.01);
      assertEquals((-4), streamTokenizer0.ttype);
      
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      assertEquals(1, streamTokenizer0.lineno());
      assertEquals("Token[' '], line 1", streamTokenizer0.toString());
      assertFalse(jSTerm0.isVariable());
      assertTrue(jSTerm0.isConstant());
      assertEquals(10, jSTerm0.capacity());
      assertEquals(1, jSTerm0.size());
      assertFalse(jSTerm0.isEval());
      assertFalse(jSTerm0.isEmpty());
      assertFalse(jSTerm0.isFunction());
      assertEquals("[jFxA%Rdj8%]", jSTerm0.toString());
      assertNotNull(jSTerm0);
      assertEquals(32, streamTokenizer0.ttype);
      assertEquals(0.0, streamTokenizer0.nval, 0.01);
      
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      assertFalse(jSSubstitution0.fail());
      assertEquals("[]", jSSubstitution0.toString());
      assertEquals(10, jSSubstitution0.capacity());
      assertEquals(0, jSSubstitution0.size());
      assertTrue(jSSubstitution0.isEmpty());
      assertNotNull(jSSubstitution0);
      
      JSTerm jSTerm1 = jSSubstitution0.instance(jSTerm0);
      assertEquals(1, streamTokenizer0.lineno());
      assertEquals("Token[' '], line 1", streamTokenizer0.toString());
      assertFalse(jSTerm0.isVariable());
      assertTrue(jSTerm0.isConstant());
      assertEquals(10, jSTerm0.capacity());
      assertEquals(1, jSTerm0.size());
      assertFalse(jSTerm0.isEval());
      assertFalse(jSTerm0.isEmpty());
      assertFalse(jSTerm0.isFunction());
      assertEquals("[jFxA%Rdj8%]", jSTerm0.toString());
      assertFalse(jSSubstitution0.fail());
      assertEquals("[]", jSSubstitution0.toString());
      assertEquals(10, jSSubstitution0.capacity());
      assertEquals(0, jSSubstitution0.size());
      assertTrue(jSSubstitution0.isEmpty());
      assertEquals("[jFxA%Rdj8%]", jSTerm1.toString());
      assertTrue(jSTerm1.isConstant());
      assertFalse(jSTerm1.isFunction());
      assertEquals(10, jSTerm1.capacity());
      assertFalse(jSTerm1.isVariable());
      assertFalse(jSTerm1.isEval());
      assertFalse(jSTerm1.isEmpty());
      assertEquals(1, jSTerm1.size());
      assertSame(jSTerm0, jSTerm1);
      assertSame(jSTerm1, jSTerm0);
      assertNotNull(jSTerm1);
      assertEquals(32, streamTokenizer0.ttype);
      assertEquals(0.0, streamTokenizer0.nval, 0.01);
      
      JSSubstitution jSSubstitution1 = jSSubstitution0.cloneS();
      assertFalse(jSSubstitution0.fail());
      assertEquals("[]", jSSubstitution0.toString());
      assertEquals(10, jSSubstitution0.capacity());
      assertEquals(0, jSSubstitution0.size());
      assertTrue(jSSubstitution0.isEmpty());
      assertEquals("[]", jSSubstitution1.toString());
      assertEquals(10, jSSubstitution1.capacity());
      assertEquals(0, jSSubstitution1.size());
      assertTrue(jSSubstitution1.isEmpty());
      assertFalse(jSSubstitution1.fail());
      assertNotSame(jSSubstitution0, jSSubstitution1);
      assertNotSame(jSSubstitution1, jSSubstitution0);
      assertNotNull(jSSubstitution1);
      assertTrue(jSSubstitution1.equals((Object)jSSubstitution0));
      
      JSSubstitution jSSubstitution2 = (JSSubstitution)jSSubstitution0.clone();
      assertFalse(jSSubstitution0.fail());
      assertEquals("[]", jSSubstitution0.toString());
      assertEquals(10, jSSubstitution0.capacity());
      assertEquals(0, jSSubstitution0.size());
      assertTrue(jSSubstitution0.isEmpty());
      assertEquals(0, jSSubstitution2.size());
      assertFalse(jSSubstitution2.fail());
      assertEquals("[]", jSSubstitution2.toString());
      assertTrue(jSSubstitution2.isEmpty());
      assertEquals(0, jSSubstitution2.capacity());
      assertNotSame(jSSubstitution0, jSSubstitution2);
      assertNotSame(jSSubstitution0, jSSubstitution1);
      assertNotSame(jSSubstitution2, jSSubstitution0);
      assertNotSame(jSSubstitution2, jSSubstitution1);
      assertNotNull(jSSubstitution2);
      assertTrue(jSSubstitution0.equals((Object)jSSubstitution1));
      assertTrue(jSSubstitution2.equals((Object)jSSubstitution1));
      assertTrue(jSSubstitution2.equals((Object)jSSubstitution0));
      
      jSTerm0.makeEval(true);
      assertEquals(1, streamTokenizer0.lineno());
      assertEquals("Token[' '], line 1", streamTokenizer0.toString());
      assertFalse(jSTerm0.isVariable());
      assertTrue(jSTerm0.isConstant());
      assertEquals(10, jSTerm0.capacity());
      assertEquals(1, jSTerm0.size());
      assertFalse(jSTerm0.isEmpty());
      assertTrue(jSTerm0.isEval());
      assertFalse(jSTerm0.isFunction());
      assertEquals("[jFxA%Rdj8%]", jSTerm0.toString());
      assertSame(jSTerm0, jSTerm1);
      assertEquals(32, streamTokenizer0.ttype);
      assertEquals(0.0, streamTokenizer0.nval, 0.01);
      
      jSTerm1.makeFunction();
      assertEquals(1, streamTokenizer0.lineno());
      assertEquals("Token[' '], line 1", streamTokenizer0.toString());
      assertFalse(jSTerm0.isVariable());
      assertEquals(10, jSTerm0.capacity());
      assertEquals(1, jSTerm0.size());
      assertTrue(jSTerm0.isFunction());
      assertFalse(jSTerm0.isConstant());
      assertFalse(jSTerm0.isEmpty());
      assertTrue(jSTerm0.isEval());
      assertEquals("[jFxA%Rdj8%]", jSTerm0.toString());
      assertFalse(jSSubstitution0.fail());
      assertEquals("[]", jSSubstitution0.toString());
      assertEquals(10, jSSubstitution0.capacity());
      assertEquals(0, jSSubstitution0.size());
      assertTrue(jSSubstitution0.isEmpty());
      assertTrue(jSTerm1.isEval());
      assertTrue(jSTerm1.isFunction());
      assertEquals("[jFxA%Rdj8%]", jSTerm1.toString());
      assertEquals(10, jSTerm1.capacity());
      assertFalse(jSTerm1.isVariable());
      assertFalse(jSTerm1.isEmpty());
      assertEquals(1, jSTerm1.size());
      assertFalse(jSTerm1.isConstant());
      assertSame(jSTerm0, jSTerm1);
      assertNotSame(jSSubstitution0, jSSubstitution2);
      assertNotSame(jSSubstitution0, jSSubstitution1);
      assertSame(jSTerm1, jSTerm0);
      assertTrue(jSSubstitution0.equals((Object)jSSubstitution1));
      assertTrue(jSSubstitution0.equals((Object)jSSubstitution2));
      assertEquals(32, streamTokenizer0.ttype);
      assertEquals(0.0, streamTokenizer0.nval, 0.01);
      
      jSTerm0.print();
      assertEquals(1, streamTokenizer0.lineno());
      assertEquals("Token[' '], line 1", streamTokenizer0.toString());
      assertFalse(jSTerm0.isVariable());
      assertEquals(10, jSTerm0.capacity());
      assertEquals(1, jSTerm0.size());
      assertTrue(jSTerm0.isFunction());
      assertFalse(jSTerm0.isConstant());
      assertFalse(jSTerm0.isEmpty());
      assertTrue(jSTerm0.isEval());
      assertEquals("[jFxA%Rdj8%]", jSTerm0.toString());
      assertSame(jSTerm0, jSTerm1);
      assertEquals(32, streamTokenizer0.ttype);
      assertEquals(0.0, streamTokenizer0.nval, 0.01);
      
      JSTerm jSTerm2 = jSTerm1.cloneT();
      assertEquals(1, streamTokenizer0.lineno());
      assertEquals("Token[' '], line 1", streamTokenizer0.toString());
      assertFalse(jSTerm0.isVariable());
      assertEquals(10, jSTerm0.capacity());
      assertEquals(1, jSTerm0.size());
      assertTrue(jSTerm0.isFunction());
      assertFalse(jSTerm0.isConstant());
      assertFalse(jSTerm0.isEmpty());
      assertTrue(jSTerm0.isEval());
      assertEquals("[jFxA%Rdj8%]", jSTerm0.toString());
      assertFalse(jSSubstitution0.fail());
      assertEquals("[]", jSSubstitution0.toString());
      assertEquals(10, jSSubstitution0.capacity());
      assertEquals(0, jSSubstitution0.size());
      assertTrue(jSSubstitution0.isEmpty());
      assertTrue(jSTerm1.isEval());
      assertTrue(jSTerm1.isFunction());
      assertEquals("[jFxA%Rdj8%]", jSTerm1.toString());
      assertEquals(10, jSTerm1.capacity());
      assertFalse(jSTerm1.isVariable());
      assertFalse(jSTerm1.isEmpty());
      assertEquals(1, jSTerm1.size());
      assertFalse(jSTerm1.isConstant());
      assertTrue(jSTerm2.isFunction());
      assertFalse(jSTerm2.isEmpty());
      assertTrue(jSTerm2.isEval());
      assertEquals("[jFxA%Rdj8%]", jSTerm2.toString());
      assertFalse(jSTerm2.isConstant());
      assertEquals(10, jSTerm2.capacity());
      assertEquals(1, jSTerm2.size());
      assertFalse(jSTerm2.isVariable());
      assertSame(jSTerm0, jSTerm1);
      assertNotSame(jSTerm0, jSTerm2);
      assertNotSame(jSSubstitution0, jSSubstitution2);
      assertNotSame(jSSubstitution0, jSSubstitution1);
      assertNotSame(jSTerm1, jSTerm2);
      assertSame(jSTerm1, jSTerm0);
      assertNotSame(jSTerm2, jSTerm0);
      assertNotSame(jSTerm2, jSTerm1);
      assertNotNull(jSTerm2);
      assertTrue(jSSubstitution0.equals((Object)jSSubstitution1));
      assertTrue(jSSubstitution0.equals((Object)jSSubstitution2));
      assertTrue(jSTerm2.equals((Object)jSTerm1));
      assertTrue(jSTerm2.equals((Object)jSTerm0));
      assertEquals(32, streamTokenizer0.ttype);
      assertEquals(0.0, streamTokenizer0.nval, 0.01);
      
      JSTerm jSTerm3 = jSTerm1.applySubstitutionT(jSSubstitution0);
      assertEquals(1, streamTokenizer0.lineno());
      assertEquals("Token[' '], line 1", streamTokenizer0.toString());
      assertFalse(jSTerm0.isVariable());
      assertEquals(10, jSTerm0.capacity());
      assertEquals(1, jSTerm0.size());
      assertTrue(jSTerm0.isFunction());
      assertFalse(jSTerm0.isConstant());
      assertFalse(jSTerm0.isEmpty());
      assertTrue(jSTerm0.isEval());
      assertEquals("[jFxA%Rdj8%]", jSTerm0.toString());
      assertFalse(jSSubstitution0.fail());
      assertEquals("[]", jSSubstitution0.toString());
      assertEquals(10, jSSubstitution0.capacity());
      assertEquals(0, jSSubstitution0.size());
      assertTrue(jSSubstitution0.isEmpty());
      assertTrue(jSTerm1.isEval());
      assertTrue(jSTerm1.isFunction());
      assertEquals("[jFxA%Rdj8%]", jSTerm1.toString());
      assertEquals(10, jSTerm1.capacity());
      assertFalse(jSTerm1.isVariable());
      assertFalse(jSTerm1.isEmpty());
      assertEquals(1, jSTerm1.size());
      assertFalse(jSTerm1.isConstant());
      assertEquals("[jFxA%Rdj8%]", jSTerm3.toString());
      assertFalse(jSTerm3.isVariable());
      assertFalse(jSTerm3.isEmpty());
      assertEquals(1, jSTerm3.size());
      assertTrue(jSTerm3.isFunction());
      assertFalse(jSTerm3.isConstant());
      assertEquals(10, jSTerm3.capacity());
      assertTrue(jSTerm3.isEval());
      assertSame(jSTerm0, jSTerm1);
      assertNotSame(jSTerm0, jSTerm2);
      assertNotSame(jSTerm0, jSTerm3);
      assertNotSame(jSSubstitution0, jSSubstitution2);
      assertNotSame(jSSubstitution0, jSSubstitution1);
      assertNotSame(jSTerm1, jSTerm2);
      assertNotSame(jSTerm1, jSTerm3);
      assertSame(jSTerm1, jSTerm0);
      assertNotSame(jSTerm3, jSTerm0);
      assertNotSame(jSTerm3, jSTerm2);
      assertNotSame(jSTerm3, jSTerm1);
      assertNotNull(jSTerm3);
      assertTrue(jSTerm0.equals((Object)jSTerm2));
      assertTrue(jSSubstitution0.equals((Object)jSSubstitution1));
      assertTrue(jSSubstitution0.equals((Object)jSSubstitution2));
      assertTrue(jSTerm1.equals((Object)jSTerm2));
      assertTrue(jSTerm3.equals((Object)jSTerm2));
      assertTrue(jSTerm3.equals((Object)jSTerm0));
      assertTrue(jSTerm3.equals((Object)jSTerm1));
      assertEquals(32, streamTokenizer0.ttype);
      assertEquals(0.0, streamTokenizer0.nval, 0.01);
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      assertFalse(jSTerm0.isVariable());
      assertFalse(jSTerm0.isFunction());
      assertFalse(jSTerm0.isEval());
      assertEquals(0, jSTerm0.size());
      assertEquals(10, jSTerm0.capacity());
      assertEquals("[]", jSTerm0.toString());
      assertFalse(jSTerm0.isConstant());
      assertTrue(jSTerm0.isEmpty());
      assertNotNull(jSTerm0);
      
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      assertFalse(jSSubstitution0.fail());
      assertEquals("[]", jSSubstitution0.toString());
      assertTrue(jSSubstitution0.isEmpty());
      assertEquals(10, jSSubstitution0.capacity());
      assertEquals(0, jSSubstitution0.size());
      assertNotNull(jSSubstitution0);
      
      // Undeclared exception!
      try { 
        jSTerm0.matches((JSTerm) null, jSSubstitution0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      StringReader stringReader0 = new StringReader("LXqa|");
      assertNotNull(stringReader0);
      
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      assertEquals("Token[NOTHING], line 1", streamTokenizer0.toString());
      assertEquals(1, streamTokenizer0.lineno());
      assertNotNull(streamTokenizer0);
      assertEquals((-4), streamTokenizer0.ttype);
      assertEquals(0.0, streamTokenizer0.nval, 0.01);
      
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      assertEquals(1, streamTokenizer0.lineno());
      assertEquals("Token[EOF], line 1", streamTokenizer0.toString());
      assertTrue(jSTerm0.isConstant());
      assertFalse(jSTerm0.isVariable());
      assertFalse(jSTerm0.isFunction());
      assertEquals(10, jSTerm0.capacity());
      assertEquals("[%%%]", jSTerm0.toString());
      assertFalse(jSTerm0.isEval());
      assertFalse(jSTerm0.isEmpty());
      assertEquals(1, jSTerm0.size());
      assertNotNull(jSTerm0);
      assertEquals((-1), streamTokenizer0.ttype);
      assertEquals(0.0, streamTokenizer0.nval, 0.01);
      
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      assertEquals("[]", jSSubstitution0.toString());
      assertTrue(jSSubstitution0.isEmpty());
      assertFalse(jSSubstitution0.fail());
      assertEquals(0, jSSubstitution0.size());
      assertEquals(10, jSSubstitution0.capacity());
      assertNotNull(jSSubstitution0);
      
      jSTerm0.makeEval(false);
      assertEquals(1, streamTokenizer0.lineno());
      assertEquals("Token[EOF], line 1", streamTokenizer0.toString());
      assertTrue(jSTerm0.isConstant());
      assertFalse(jSTerm0.isVariable());
      assertFalse(jSTerm0.isFunction());
      assertEquals(10, jSTerm0.capacity());
      assertEquals("[%%%]", jSTerm0.toString());
      assertFalse(jSTerm0.isEval());
      assertFalse(jSTerm0.isEmpty());
      assertEquals(1, jSTerm0.size());
      assertEquals((-1), streamTokenizer0.ttype);
      assertEquals(0.0, streamTokenizer0.nval, 0.01);
      
      boolean boolean0 = jSTerm0.isGround();
      assertEquals(1, streamTokenizer0.lineno());
      assertEquals("Token[EOF], line 1", streamTokenizer0.toString());
      assertTrue(jSTerm0.isConstant());
      assertFalse(jSTerm0.isVariable());
      assertFalse(jSTerm0.isFunction());
      assertEquals(10, jSTerm0.capacity());
      assertEquals("[%%%]", jSTerm0.toString());
      assertFalse(jSTerm0.isEval());
      assertFalse(jSTerm0.isEmpty());
      assertEquals(1, jSTerm0.size());
      assertTrue(boolean0);
      assertEquals((-1), streamTokenizer0.ttype);
      assertEquals(0.0, streamTokenizer0.nval, 0.01);
      
      JSTerm jSTerm1 = new JSTerm();
      assertTrue(jSTerm1.isEmpty());
      assertEquals("[]", jSTerm1.toString());
      assertFalse(jSTerm1.isVariable());
      assertEquals(10, jSTerm1.capacity());
      assertFalse(jSTerm1.isEval());
      assertEquals(0, jSTerm1.size());
      assertFalse(jSTerm1.isConstant());
      assertFalse(jSTerm1.isFunction());
      assertNotNull(jSTerm1);
      assertFalse(jSTerm1.equals((Object)jSTerm0));
      
      boolean boolean1 = jSTerm0.equals(jSTerm1);
      assertEquals(1, streamTokenizer0.lineno());
      assertEquals("Token[EOF], line 1", streamTokenizer0.toString());
      assertTrue(jSTerm0.isConstant());
      assertFalse(jSTerm0.isVariable());
      assertFalse(jSTerm0.isFunction());
      assertEquals(10, jSTerm0.capacity());
      assertEquals("[%%%]", jSTerm0.toString());
      assertFalse(jSTerm0.isEval());
      assertFalse(jSTerm0.isEmpty());
      assertEquals(1, jSTerm0.size());
      assertTrue(jSTerm1.isEmpty());
      assertEquals("[]", jSTerm1.toString());
      assertFalse(jSTerm1.isVariable());
      assertEquals(10, jSTerm1.capacity());
      assertFalse(jSTerm1.isEval());
      assertEquals(0, jSTerm1.size());
      assertFalse(jSTerm1.isConstant());
      assertFalse(jSTerm1.isFunction());
      assertFalse(boolean1);
      assertNotSame(jSTerm0, jSTerm1);
      assertNotSame(jSTerm1, jSTerm0);
      assertFalse(jSTerm0.equals((Object)jSTerm1));
      assertFalse(jSTerm1.equals((Object)jSTerm0));
      assertFalse(boolean1 == boolean0);
      assertEquals((-1), streamTokenizer0.ttype);
      assertEquals(0.0, streamTokenizer0.nval, 0.01);
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      assertEquals(10, jSSubstitution0.capacity());
      assertEquals(0, jSSubstitution0.size());
      assertFalse(jSSubstitution0.fail());
      assertEquals("[]", jSSubstitution0.toString());
      assertTrue(jSSubstitution0.isEmpty());
      assertNotNull(jSSubstitution0);
      
      StringReader stringReader0 = new StringReader("jFxA%Rdj8% jSYG> MR");
      assertNotNull(stringReader0);
      
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      assertEquals(1, streamTokenizer0.lineno());
      assertEquals("Token[NOTHING], line 1", streamTokenizer0.toString());
      assertNotNull(streamTokenizer0);
      assertEquals((-4), streamTokenizer0.ttype);
      assertEquals(0.0, streamTokenizer0.nval, 0.01);
      
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      assertEquals("Token[' '], line 1", streamTokenizer0.toString());
      assertEquals(1, streamTokenizer0.lineno());
      assertFalse(jSTerm0.isEval());
      assertEquals(1, jSTerm0.size());
      assertFalse(jSTerm0.isFunction());
      assertFalse(jSTerm0.isVariable());
      assertEquals(10, jSTerm0.capacity());
      assertFalse(jSTerm0.isEmpty());
      assertTrue(jSTerm0.isConstant());
      assertEquals("[jFxA%Rdj8%]", jSTerm0.toString());
      assertNotNull(jSTerm0);
      assertEquals(32, streamTokenizer0.ttype);
      assertEquals(0.0, streamTokenizer0.nval, 0.01);
      
      JSTerm jSTerm1 = jSSubstitution0.instance(jSTerm0);
      assertEquals(10, jSSubstitution0.capacity());
      assertEquals(0, jSSubstitution0.size());
      assertFalse(jSSubstitution0.fail());
      assertEquals("[]", jSSubstitution0.toString());
      assertTrue(jSSubstitution0.isEmpty());
      assertEquals("Token[' '], line 1", streamTokenizer0.toString());
      assertEquals(1, streamTokenizer0.lineno());
      assertFalse(jSTerm0.isEval());
      assertEquals(1, jSTerm0.size());
      assertFalse(jSTerm0.isFunction());
      assertFalse(jSTerm0.isVariable());
      assertEquals(10, jSTerm0.capacity());
      assertFalse(jSTerm0.isEmpty());
      assertTrue(jSTerm0.isConstant());
      assertEquals("[jFxA%Rdj8%]", jSTerm0.toString());
      assertTrue(jSTerm1.isConstant());
      assertFalse(jSTerm1.isEmpty());
      assertFalse(jSTerm1.isEval());
      assertEquals(1, jSTerm1.size());
      assertFalse(jSTerm1.isFunction());
      assertEquals(10, jSTerm1.capacity());
      assertFalse(jSTerm1.isVariable());
      assertEquals("[jFxA%Rdj8%]", jSTerm1.toString());
      assertSame(jSTerm0, jSTerm1);
      assertSame(jSTerm1, jSTerm0);
      assertNotNull(jSTerm1);
      assertEquals(32, streamTokenizer0.ttype);
      assertEquals(0.0, streamTokenizer0.nval, 0.01);
      
      JSPredicateForm jSPredicateForm0 = jSTerm0.clonePF();
      assertEquals("Token[' '], line 1", streamTokenizer0.toString());
      assertEquals(1, streamTokenizer0.lineno());
      assertFalse(jSTerm0.isEval());
      assertEquals(1, jSTerm0.size());
      assertFalse(jSTerm0.isFunction());
      assertFalse(jSTerm0.isVariable());
      assertEquals(10, jSTerm0.capacity());
      assertFalse(jSTerm0.isEmpty());
      assertTrue(jSTerm0.isConstant());
      assertEquals("[jFxA%Rdj8%]", jSTerm0.toString());
      assertEquals("[jFxA%Rdj8%]", jSPredicateForm0.toString());
      assertEquals(10, jSPredicateForm0.capacity());
      assertEquals(1, jSPredicateForm0.size());
      assertFalse(jSPredicateForm0.isEmpty());
      assertSame(jSTerm0, jSTerm1);
      assertNotNull(jSPredicateForm0);
      assertEquals(32, streamTokenizer0.ttype);
      assertEquals(0.0, streamTokenizer0.nval, 0.01);
      
      boolean boolean0 = jSTerm1.add((Object) null);
      assertEquals(10, jSSubstitution0.capacity());
      assertEquals(0, jSSubstitution0.size());
      assertFalse(jSSubstitution0.fail());
      assertEquals("[]", jSSubstitution0.toString());
      assertTrue(jSSubstitution0.isEmpty());
      assertEquals("Token[' '], line 1", streamTokenizer0.toString());
      assertEquals(1, streamTokenizer0.lineno());
      assertFalse(jSTerm0.isEval());
      assertEquals(2, jSTerm0.size());
      assertFalse(jSTerm0.isFunction());
      assertFalse(jSTerm0.isVariable());
      assertEquals(10, jSTerm0.capacity());
      assertFalse(jSTerm0.isEmpty());
      assertEquals("[jFxA%Rdj8%, null]", jSTerm0.toString());
      assertTrue(jSTerm0.isConstant());
      assertTrue(jSTerm1.isConstant());
      assertFalse(jSTerm1.isEmpty());
      assertEquals("[jFxA%Rdj8%, null]", jSTerm1.toString());
      assertFalse(jSTerm1.isEval());
      assertEquals(2, jSTerm1.size());
      assertFalse(jSTerm1.isFunction());
      assertEquals(10, jSTerm1.capacity());
      assertFalse(jSTerm1.isVariable());
      assertTrue(boolean0);
      assertSame(jSTerm0, jSTerm1);
      assertSame(jSTerm1, jSTerm0);
      assertEquals(32, streamTokenizer0.ttype);
      assertEquals(0.0, streamTokenizer0.nval, 0.01);
      
      jSTerm1.makeEval(true);
      assertEquals(10, jSSubstitution0.capacity());
      assertEquals(0, jSSubstitution0.size());
      assertFalse(jSSubstitution0.fail());
      assertEquals("[]", jSSubstitution0.toString());
      assertTrue(jSSubstitution0.isEmpty());
      assertEquals("Token[' '], line 1", streamTokenizer0.toString());
      assertEquals(1, streamTokenizer0.lineno());
      assertEquals(2, jSTerm0.size());
      assertFalse(jSTerm0.isFunction());
      assertFalse(jSTerm0.isVariable());
      assertEquals(10, jSTerm0.capacity());
      assertFalse(jSTerm0.isEmpty());
      assertEquals("[jFxA%Rdj8%, null]", jSTerm0.toString());
      assertTrue(jSTerm0.isConstant());
      assertTrue(jSTerm0.isEval());
      assertTrue(jSTerm1.isConstant());
      assertFalse(jSTerm1.isEmpty());
      assertEquals("[jFxA%Rdj8%, null]", jSTerm1.toString());
      assertEquals(2, jSTerm1.size());
      assertFalse(jSTerm1.isFunction());
      assertEquals(10, jSTerm1.capacity());
      assertFalse(jSTerm1.isVariable());
      assertTrue(jSTerm1.isEval());
      assertSame(jSTerm0, jSTerm1);
      assertSame(jSTerm1, jSTerm0);
      assertEquals(32, streamTokenizer0.ttype);
      assertEquals(0.0, streamTokenizer0.nval, 0.01);
      
      jSTerm0.makeFunction();
      assertEquals("Token[' '], line 1", streamTokenizer0.toString());
      assertEquals(1, streamTokenizer0.lineno());
      assertEquals(2, jSTerm0.size());
      assertFalse(jSTerm0.isVariable());
      assertEquals(10, jSTerm0.capacity());
      assertFalse(jSTerm0.isEmpty());
      assertFalse(jSTerm0.isConstant());
      assertEquals("[jFxA%Rdj8%, null]", jSTerm0.toString());
      assertTrue(jSTerm0.isFunction());
      assertTrue(jSTerm0.isEval());
      assertSame(jSTerm0, jSTerm1);
      assertEquals(32, streamTokenizer0.ttype);
      assertEquals(0.0, streamTokenizer0.nval, 0.01);
      
      // Undeclared exception!
      try { 
        jSTerm1.call();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      assertEquals("[]", jSSubstitution0.toString());
      assertTrue(jSSubstitution0.isEmpty());
      assertFalse(jSSubstitution0.fail());
      assertEquals(0, jSSubstitution0.size());
      assertEquals(10, jSSubstitution0.capacity());
      assertNotNull(jSSubstitution0);
      
      StringReader stringReader0 = new StringReader("jFxA%Rdj8% jSYG> MR");
      assertNotNull(stringReader0);
      
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      assertEquals("Token[NOTHING], line 1", streamTokenizer0.toString());
      assertEquals(1, streamTokenizer0.lineno());
      assertNotNull(streamTokenizer0);
      assertEquals(0.0, streamTokenizer0.nval, 0.01);
      assertEquals((-4), streamTokenizer0.ttype);
      
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      assertEquals("Token[' '], line 1", streamTokenizer0.toString());
      assertEquals(1, streamTokenizer0.lineno());
      assertEquals("[jFxA%Rdj8%]", jSTerm0.toString());
      assertTrue(jSTerm0.isConstant());
      assertFalse(jSTerm0.isFunction());
      assertEquals(10, jSTerm0.capacity());
      assertFalse(jSTerm0.isVariable());
      assertFalse(jSTerm0.isEmpty());
      assertFalse(jSTerm0.isEval());
      assertEquals(1, jSTerm0.size());
      assertNotNull(jSTerm0);
      assertEquals(0.0, streamTokenizer0.nval, 0.01);
      assertEquals(32, streamTokenizer0.ttype);
      
      JSTerm jSTerm1 = (JSTerm)jSTerm0.clone();
      assertEquals("Token[' '], line 1", streamTokenizer0.toString());
      assertEquals(1, streamTokenizer0.lineno());
      assertEquals("[jFxA%Rdj8%]", jSTerm0.toString());
      assertTrue(jSTerm0.isConstant());
      assertFalse(jSTerm0.isFunction());
      assertEquals(10, jSTerm0.capacity());
      assertFalse(jSTerm0.isVariable());
      assertFalse(jSTerm0.isEmpty());
      assertFalse(jSTerm0.isEval());
      assertEquals(1, jSTerm0.size());
      assertFalse(jSTerm1.isEmpty());
      assertEquals(1, jSTerm1.size());
      assertFalse(jSTerm1.isEval());
      assertFalse(jSTerm1.isVariable());
      assertTrue(jSTerm1.isConstant());
      assertEquals(1, jSTerm1.capacity());
      assertFalse(jSTerm1.isFunction());
      assertEquals("[jFxA%Rdj8%]", jSTerm1.toString());
      assertNotSame(jSTerm0, jSTerm1);
      assertNotSame(jSTerm1, jSTerm0);
      assertNotNull(jSTerm1);
      assertTrue(jSTerm1.equals((Object)jSTerm0));
      assertEquals(0.0, streamTokenizer0.nval, 0.01);
      assertEquals(32, streamTokenizer0.ttype);
      
      boolean boolean0 = jSTerm0.add((Object) jSSubstitution0);
      assertEquals("[]", jSSubstitution0.toString());
      assertTrue(jSSubstitution0.isEmpty());
      assertFalse(jSSubstitution0.fail());
      assertEquals(0, jSSubstitution0.size());
      assertEquals(10, jSSubstitution0.capacity());
      assertEquals("Token[' '], line 1", streamTokenizer0.toString());
      assertEquals(1, streamTokenizer0.lineno());
      assertTrue(jSTerm0.isConstant());
      assertFalse(jSTerm0.isFunction());
      assertEquals("[jFxA%Rdj8%, []]", jSTerm0.toString());
      assertEquals(10, jSTerm0.capacity());
      assertFalse(jSTerm0.isVariable());
      assertEquals(2, jSTerm0.size());
      assertFalse(jSTerm0.isEmpty());
      assertFalse(jSTerm0.isEval());
      assertTrue(boolean0);
      assertNotSame(jSTerm0, jSTerm1);
      assertFalse(jSTerm0.equals((Object)jSTerm1));
      assertEquals(0.0, streamTokenizer0.nval, 0.01);
      assertEquals(32, streamTokenizer0.ttype);
      
      jSTerm0.makeFunction();
      assertEquals("Token[' '], line 1", streamTokenizer0.toString());
      assertEquals(1, streamTokenizer0.lineno());
      assertEquals("[jFxA%Rdj8%, []]", jSTerm0.toString());
      assertFalse(jSTerm0.isConstant());
      assertEquals(10, jSTerm0.capacity());
      assertFalse(jSTerm0.isVariable());
      assertEquals(2, jSTerm0.size());
      assertFalse(jSTerm0.isEmpty());
      assertFalse(jSTerm0.isEval());
      assertTrue(jSTerm0.isFunction());
      assertNotSame(jSTerm0, jSTerm1);
      assertFalse(jSTerm0.equals((Object)jSTerm1));
      assertEquals(0.0, streamTokenizer0.nval, 0.01);
      assertEquals(32, streamTokenizer0.ttype);
      
      jSTerm0.makeEval(true);
      assertEquals("Token[' '], line 1", streamTokenizer0.toString());
      assertEquals(1, streamTokenizer0.lineno());
      assertTrue(jSTerm0.isEval());
      assertEquals("[jFxA%Rdj8%, []]", jSTerm0.toString());
      assertFalse(jSTerm0.isConstant());
      assertEquals(10, jSTerm0.capacity());
      assertFalse(jSTerm0.isVariable());
      assertEquals(2, jSTerm0.size());
      assertFalse(jSTerm0.isEmpty());
      assertTrue(jSTerm0.isFunction());
      assertNotSame(jSTerm0, jSTerm1);
      assertFalse(jSTerm0.equals((Object)jSTerm1));
      assertEquals(0.0, streamTokenizer0.nval, 0.01);
      assertEquals(32, streamTokenizer0.ttype);
      
      // Undeclared exception!
      try { 
        jSTerm0.isGround();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // umd.cs.shop.JSSubstitution cannot be cast to umd.cs.shop.JSTerm
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      assertTrue(jSSubstitution0.isEmpty());
      assertEquals(10, jSSubstitution0.capacity());
      assertEquals(0, jSSubstitution0.size());
      assertEquals("[]", jSSubstitution0.toString());
      assertFalse(jSSubstitution0.fail());
      assertNotNull(jSSubstitution0);
      
      StringReader stringReader0 = new StringReader("jFxA%Rdj8% jSYG> MR");
      assertNotNull(stringReader0);
      
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      assertEquals(1, streamTokenizer0.lineno());
      assertEquals("Token[NOTHING], line 1", streamTokenizer0.toString());
      assertNotNull(streamTokenizer0);
      assertEquals(0.0, streamTokenizer0.nval, 0.01);
      assertEquals((-4), streamTokenizer0.ttype);
      
      char[] charArray0 = new char[9];
      charArray0[0] = '\"';
      charArray0[1] = 'W';
      charArray0[2] = 'i';
      charArray0[3] = 'd';
      charArray0[4] = 'Z';
      charArray0[5] = '@';
      charArray0[6] = '-';
      charArray0[7] = 'a';
      charArray0[8] = 'E';
      int int0 = stringReader0.read(charArray0);
      assertEquals(9, int0);
      assertArrayEquals(new char[] {'j', 'F', 'x', 'A', '%', 'R', 'd', 'j', '8'}, charArray0);
      assertEquals(9, charArray0.length);
      
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      assertEquals("Token[jSYG], line 1", streamTokenizer0.toString());
      assertEquals(1, streamTokenizer0.lineno());
      assertFalse(jSTerm0.isEmpty());
      assertFalse(jSTerm0.isEval());
      assertEquals(1, jSTerm0.size());
      assertEquals("[%jSYG]", jSTerm0.toString());
      assertFalse(jSTerm0.isFunction());
      assertEquals(10, jSTerm0.capacity());
      assertTrue(jSTerm0.isConstant());
      assertFalse(jSTerm0.isVariable());
      assertNotNull(jSTerm0);
      assertEquals(0.0, streamTokenizer0.nval, 0.01);
      assertEquals((-3), streamTokenizer0.ttype);
      
      JSTerm jSTerm1 = jSSubstitution0.instance(jSTerm0);
      assertTrue(jSSubstitution0.isEmpty());
      assertEquals(10, jSSubstitution0.capacity());
      assertEquals(0, jSSubstitution0.size());
      assertEquals("[]", jSSubstitution0.toString());
      assertFalse(jSSubstitution0.fail());
      assertEquals("Token[jSYG], line 1", streamTokenizer0.toString());
      assertEquals(1, streamTokenizer0.lineno());
      assertFalse(jSTerm0.isEmpty());
      assertFalse(jSTerm0.isEval());
      assertEquals(1, jSTerm0.size());
      assertEquals("[%jSYG]", jSTerm0.toString());
      assertFalse(jSTerm0.isFunction());
      assertEquals(10, jSTerm0.capacity());
      assertTrue(jSTerm0.isConstant());
      assertFalse(jSTerm0.isVariable());
      assertFalse(jSTerm1.isVariable());
      assertTrue(jSTerm1.isConstant());
      assertEquals(10, jSTerm1.capacity());
      assertFalse(jSTerm1.isFunction());
      assertEquals("[%jSYG]", jSTerm1.toString());
      assertFalse(jSTerm1.isEmpty());
      assertFalse(jSTerm1.isEval());
      assertEquals(1, jSTerm1.size());
      assertSame(jSTerm0, jSTerm1);
      assertSame(jSTerm1, jSTerm0);
      assertNotNull(jSTerm1);
      assertEquals(0.0, streamTokenizer0.nval, 0.01);
      assertEquals((-3), streamTokenizer0.ttype);
      
      boolean boolean0 = jSTerm1.add((Object) "jSYG");
      assertTrue(jSSubstitution0.isEmpty());
      assertEquals(10, jSSubstitution0.capacity());
      assertEquals(0, jSSubstitution0.size());
      assertEquals("[]", jSSubstitution0.toString());
      assertFalse(jSSubstitution0.fail());
      assertEquals("Token[jSYG], line 1", streamTokenizer0.toString());
      assertEquals(1, streamTokenizer0.lineno());
      assertFalse(jSTerm0.isEmpty());
      assertFalse(jSTerm0.isEval());
      assertFalse(jSTerm0.isFunction());
      assertEquals(2, jSTerm0.size());
      assertEquals(10, jSTerm0.capacity());
      assertEquals("[%jSYG, jSYG]", jSTerm0.toString());
      assertTrue(jSTerm0.isConstant());
      assertFalse(jSTerm0.isVariable());
      assertFalse(jSTerm1.isVariable());
      assertTrue(jSTerm1.isConstant());
      assertEquals(10, jSTerm1.capacity());
      assertFalse(jSTerm1.isFunction());
      assertFalse(jSTerm1.isEmpty());
      assertFalse(jSTerm1.isEval());
      assertEquals(2, jSTerm1.size());
      assertEquals("[%jSYG, jSYG]", jSTerm1.toString());
      assertTrue(boolean0);
      assertSame(jSTerm0, jSTerm1);
      assertSame(jSTerm1, jSTerm0);
      assertEquals(0.0, streamTokenizer0.nval, 0.01);
      assertEquals((-3), streamTokenizer0.ttype);
      
      JSSubstitution jSSubstitution1 = (JSSubstitution)jSSubstitution0.clone();
      assertTrue(jSSubstitution0.isEmpty());
      assertEquals(10, jSSubstitution0.capacity());
      assertEquals(0, jSSubstitution0.size());
      assertEquals("[]", jSSubstitution0.toString());
      assertFalse(jSSubstitution0.fail());
      assertEquals("[]", jSSubstitution1.toString());
      assertTrue(jSSubstitution1.isEmpty());
      assertFalse(jSSubstitution1.fail());
      assertEquals(0, jSSubstitution1.capacity());
      assertEquals(0, jSSubstitution1.size());
      assertNotSame(jSSubstitution0, jSSubstitution1);
      assertNotSame(jSSubstitution1, jSSubstitution0);
      assertNotNull(jSSubstitution1);
      assertTrue(jSSubstitution1.equals((Object)jSSubstitution0));
      
      boolean boolean1 = jSSubstitution0.add((Object) "jSYG");
      assertEquals("[jSYG]", jSSubstitution0.toString());
      assertEquals(10, jSSubstitution0.capacity());
      assertEquals(1, jSSubstitution0.size());
      assertFalse(jSSubstitution0.fail());
      assertFalse(jSSubstitution0.isEmpty());
      assertTrue(boolean1);
      assertNotSame(jSSubstitution0, jSSubstitution1);
      assertFalse(jSSubstitution0.equals((Object)jSSubstitution1));
      assertTrue(boolean1 == boolean0);
      
      jSTerm1.makeEval(true);
      assertEquals("[jSYG]", jSSubstitution0.toString());
      assertEquals(10, jSSubstitution0.capacity());
      assertEquals(1, jSSubstitution0.size());
      assertFalse(jSSubstitution0.fail());
      assertFalse(jSSubstitution0.isEmpty());
      assertEquals("Token[jSYG], line 1", streamTokenizer0.toString());
      assertEquals(1, streamTokenizer0.lineno());
      assertFalse(jSTerm0.isEmpty());
      assertFalse(jSTerm0.isFunction());
      assertEquals(2, jSTerm0.size());
      assertEquals(10, jSTerm0.capacity());
      assertTrue(jSTerm0.isEval());
      assertEquals("[%jSYG, jSYG]", jSTerm0.toString());
      assertTrue(jSTerm0.isConstant());
      assertFalse(jSTerm0.isVariable());
      assertFalse(jSTerm1.isVariable());
      assertTrue(jSTerm1.isConstant());
      assertEquals(10, jSTerm1.capacity());
      assertFalse(jSTerm1.isFunction());
      assertTrue(jSTerm1.isEval());
      assertFalse(jSTerm1.isEmpty());
      assertEquals(2, jSTerm1.size());
      assertEquals("[%jSYG, jSYG]", jSTerm1.toString());
      assertNotSame(jSSubstitution0, jSSubstitution1);
      assertSame(jSTerm0, jSTerm1);
      assertSame(jSTerm1, jSTerm0);
      assertFalse(jSSubstitution0.equals((Object)jSSubstitution1));
      assertEquals(0.0, streamTokenizer0.nval, 0.01);
      assertEquals((-3), streamTokenizer0.ttype);
      
      boolean boolean2 = jSTerm1.isGround();
      assertEquals("[jSYG]", jSSubstitution0.toString());
      assertEquals(10, jSSubstitution0.capacity());
      assertEquals(1, jSSubstitution0.size());
      assertFalse(jSSubstitution0.fail());
      assertFalse(jSSubstitution0.isEmpty());
      assertEquals("Token[jSYG], line 1", streamTokenizer0.toString());
      assertEquals(1, streamTokenizer0.lineno());
      assertFalse(jSTerm0.isEmpty());
      assertFalse(jSTerm0.isFunction());
      assertEquals(2, jSTerm0.size());
      assertEquals(10, jSTerm0.capacity());
      assertTrue(jSTerm0.isEval());
      assertEquals("[%jSYG, jSYG]", jSTerm0.toString());
      assertTrue(jSTerm0.isConstant());
      assertFalse(jSTerm0.isVariable());
      assertFalse(jSTerm1.isVariable());
      assertTrue(jSTerm1.isConstant());
      assertEquals(10, jSTerm1.capacity());
      assertFalse(jSTerm1.isFunction());
      assertTrue(jSTerm1.isEval());
      assertFalse(jSTerm1.isEmpty());
      assertEquals(2, jSTerm1.size());
      assertEquals("[%jSYG, jSYG]", jSTerm1.toString());
      assertTrue(boolean2);
      assertNotSame(jSSubstitution0, jSSubstitution1);
      assertSame(jSTerm0, jSTerm1);
      assertSame(jSTerm1, jSTerm0);
      assertFalse(jSSubstitution0.equals((Object)jSSubstitution1));
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      assertEquals(0.0, streamTokenizer0.nval, 0.01);
      assertEquals((-3), streamTokenizer0.ttype);
      
      jSTerm1.makeVariable();
      assertEquals("[jSYG]", jSSubstitution0.toString());
      assertEquals(10, jSSubstitution0.capacity());
      assertEquals(1, jSSubstitution0.size());
      assertFalse(jSSubstitution0.fail());
      assertFalse(jSSubstitution0.isEmpty());
      assertEquals("Token[jSYG], line 1", streamTokenizer0.toString());
      assertEquals(1, streamTokenizer0.lineno());
      assertFalse(jSTerm0.isConstant());
      assertTrue(jSTerm0.isVariable());
      assertFalse(jSTerm0.isEmpty());
      assertFalse(jSTerm0.isFunction());
      assertEquals(2, jSTerm0.size());
      assertEquals(10, jSTerm0.capacity());
      assertTrue(jSTerm0.isEval());
      assertEquals("[%jSYG, jSYG]", jSTerm0.toString());
      assertEquals(10, jSTerm1.capacity());
      assertFalse(jSTerm1.isFunction());
      assertTrue(jSTerm1.isEval());
      assertTrue(jSTerm1.isVariable());
      assertFalse(jSTerm1.isConstant());
      assertFalse(jSTerm1.isEmpty());
      assertEquals(2, jSTerm1.size());
      assertEquals("[%jSYG, jSYG]", jSTerm1.toString());
      assertNotSame(jSSubstitution0, jSSubstitution1);
      assertSame(jSTerm0, jSTerm1);
      assertSame(jSTerm1, jSTerm0);
      assertFalse(jSSubstitution0.equals((Object)jSSubstitution1));
      assertEquals(0.0, streamTokenizer0.nval, 0.01);
      assertEquals((-3), streamTokenizer0.ttype);
      
      boolean boolean3 = jSTerm1.equals(jSTerm0);
      assertEquals("[jSYG]", jSSubstitution0.toString());
      assertEquals(10, jSSubstitution0.capacity());
      assertEquals(1, jSSubstitution0.size());
      assertFalse(jSSubstitution0.fail());
      assertFalse(jSSubstitution0.isEmpty());
      assertEquals("Token[jSYG], line 1", streamTokenizer0.toString());
      assertEquals(1, streamTokenizer0.lineno());
      assertFalse(jSTerm0.isConstant());
      assertTrue(jSTerm0.isVariable());
      assertFalse(jSTerm0.isEmpty());
      assertFalse(jSTerm0.isFunction());
      assertEquals(2, jSTerm0.size());
      assertEquals(10, jSTerm0.capacity());
      assertTrue(jSTerm0.isEval());
      assertEquals("[%jSYG, jSYG]", jSTerm0.toString());
      assertEquals(10, jSTerm1.capacity());
      assertFalse(jSTerm1.isFunction());
      assertTrue(jSTerm1.isEval());
      assertTrue(jSTerm1.isVariable());
      assertFalse(jSTerm1.isConstant());
      assertFalse(jSTerm1.isEmpty());
      assertEquals(2, jSTerm1.size());
      assertEquals("[%jSYG, jSYG]", jSTerm1.toString());
      assertTrue(boolean3);
      assertNotSame(jSSubstitution0, jSSubstitution1);
      assertSame(jSTerm0, jSTerm1);
      assertSame(jSTerm1, jSTerm0);
      assertFalse(jSSubstitution0.equals((Object)jSSubstitution1));
      assertTrue(boolean3 == boolean0);
      assertTrue(boolean3 == boolean1);
      assertTrue(boolean3 == boolean2);
      assertEquals(0.0, streamTokenizer0.nval, 0.01);
      assertEquals((-3), streamTokenizer0.ttype);
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      StringReader stringReader0 = new StringReader("hH2X@J");
      assertNotNull(stringReader0);
      
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      assertEquals("Token[NOTHING], line 1", streamTokenizer0.toString());
      assertEquals(1, streamTokenizer0.lineno());
      assertNotNull(streamTokenizer0);
      assertEquals((-4), streamTokenizer0.ttype);
      assertEquals(0.0, streamTokenizer0.nval, 0.01);
      
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      assertEquals(1, streamTokenizer0.lineno());
      assertEquals("Token[EOF], line 1", streamTokenizer0.toString());
      assertFalse(jSTerm0.isEmpty());
      assertTrue(jSTerm0.isConstant());
      assertFalse(jSTerm0.isVariable());
      assertFalse(jSTerm0.isFunction());
      assertFalse(jSTerm0.isEval());
      assertEquals(1, jSTerm0.size());
      assertEquals(10, jSTerm0.capacity());
      assertEquals("[%%%]", jSTerm0.toString());
      assertNotNull(jSTerm0);
      assertEquals(0.0, streamTokenizer0.nval, 0.01);
      assertEquals((-1), streamTokenizer0.ttype);
      
      JSTerm jSTerm1 = jSTerm0.standardizerTerm();
      assertEquals(1, streamTokenizer0.lineno());
      assertEquals("Token[EOF], line 1", streamTokenizer0.toString());
      assertFalse(jSTerm0.isEmpty());
      assertTrue(jSTerm0.isConstant());
      assertFalse(jSTerm0.isVariable());
      assertFalse(jSTerm0.isFunction());
      assertFalse(jSTerm0.isEval());
      assertEquals(1, jSTerm0.size());
      assertEquals(10, jSTerm0.capacity());
      assertEquals("[%%%]", jSTerm0.toString());
      assertEquals("[%%%]", jSTerm1.toString());
      assertTrue(jSTerm1.isConstant());
      assertFalse(jSTerm1.isEmpty());
      assertFalse(jSTerm1.isEval());
      assertEquals(1, jSTerm1.size());
      assertFalse(jSTerm1.isFunction());
      assertEquals(10, jSTerm1.capacity());
      assertFalse(jSTerm1.isVariable());
      assertNotSame(jSTerm0, jSTerm1);
      assertNotSame(jSTerm1, jSTerm0);
      assertNotNull(jSTerm1);
      assertTrue(jSTerm1.equals((Object)jSTerm0));
      assertEquals(0.0, streamTokenizer0.nval, 0.01);
      assertEquals((-1), streamTokenizer0.ttype);
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      assertEquals(0, jSSubstitution0.size());
      assertFalse(jSSubstitution0.fail());
      assertEquals("[]", jSSubstitution0.toString());
      assertTrue(jSSubstitution0.isEmpty());
      assertEquals(10, jSSubstitution0.capacity());
      assertNotNull(jSSubstitution0);
      
      StringReader stringReader0 = new StringReader("jFxA%Rdj8% jSYG> MR");
      assertNotNull(stringReader0);
      
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      assertEquals(1, streamTokenizer0.lineno());
      assertEquals("Token[NOTHING], line 1", streamTokenizer0.toString());
      assertNotNull(streamTokenizer0);
      assertEquals((-4), streamTokenizer0.ttype);
      assertEquals(0.0, streamTokenizer0.nval, 0.01);
      
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      assertEquals("Token[' '], line 1", streamTokenizer0.toString());
      assertEquals(1, streamTokenizer0.lineno());
      assertFalse(jSTerm0.isVariable());
      assertFalse(jSTerm0.isFunction());
      assertEquals(10, jSTerm0.capacity());
      assertTrue(jSTerm0.isConstant());
      assertEquals(1, jSTerm0.size());
      assertFalse(jSTerm0.isEval());
      assertFalse(jSTerm0.isEmpty());
      assertEquals("[jFxA%Rdj8%]", jSTerm0.toString());
      assertNotNull(jSTerm0);
      assertEquals(32, streamTokenizer0.ttype);
      assertEquals(0.0, streamTokenizer0.nval, 0.01);
      
      JSTerm jSTerm1 = jSSubstitution0.instance(jSTerm0);
      assertEquals(0, jSSubstitution0.size());
      assertFalse(jSSubstitution0.fail());
      assertEquals("[]", jSSubstitution0.toString());
      assertTrue(jSSubstitution0.isEmpty());
      assertEquals(10, jSSubstitution0.capacity());
      assertEquals("Token[' '], line 1", streamTokenizer0.toString());
      assertEquals(1, streamTokenizer0.lineno());
      assertFalse(jSTerm0.isVariable());
      assertFalse(jSTerm0.isFunction());
      assertEquals(10, jSTerm0.capacity());
      assertTrue(jSTerm0.isConstant());
      assertEquals(1, jSTerm0.size());
      assertFalse(jSTerm0.isEval());
      assertFalse(jSTerm0.isEmpty());
      assertEquals("[jFxA%Rdj8%]", jSTerm0.toString());
      assertFalse(jSTerm1.isVariable());
      assertEquals(10, jSTerm1.capacity());
      assertEquals(1, jSTerm1.size());
      assertEquals("[jFxA%Rdj8%]", jSTerm1.toString());
      assertFalse(jSTerm1.isFunction());
      assertFalse(jSTerm1.isEmpty());
      assertTrue(jSTerm1.isConstant());
      assertFalse(jSTerm1.isEval());
      assertSame(jSTerm0, jSTerm1);
      assertSame(jSTerm1, jSTerm0);
      assertNotNull(jSTerm1);
      assertEquals(32, streamTokenizer0.ttype);
      assertEquals(0.0, streamTokenizer0.nval, 0.01);
      
      boolean boolean0 = jSTerm0.add((Object) jSTerm1);
      assertEquals(0, jSSubstitution0.size());
      assertFalse(jSSubstitution0.fail());
      assertEquals("[]", jSSubstitution0.toString());
      assertTrue(jSSubstitution0.isEmpty());
      assertEquals(10, jSSubstitution0.capacity());
      assertEquals("Token[' '], line 1", streamTokenizer0.toString());
      assertEquals(1, streamTokenizer0.lineno());
      assertFalse(jSTerm0.isVariable());
      assertFalse(jSTerm0.isFunction());
      assertEquals(10, jSTerm0.capacity());
      assertEquals(2, jSTerm0.size());
      assertTrue(jSTerm0.isConstant());
      assertEquals("[jFxA%Rdj8%, (this Collection)]", jSTerm0.toString());
      assertFalse(jSTerm0.isEval());
      assertFalse(jSTerm0.isEmpty());
      assertFalse(jSTerm1.isVariable());
      assertEquals(10, jSTerm1.capacity());
      assertEquals(2, jSTerm1.size());
      assertFalse(jSTerm1.isFunction());
      assertFalse(jSTerm1.isEmpty());
      assertTrue(jSTerm1.isConstant());
      assertFalse(jSTerm1.isEval());
      assertEquals("[jFxA%Rdj8%, (this Collection)]", jSTerm1.toString());
      assertTrue(boolean0);
      assertSame(jSTerm0, jSTerm1);
      assertSame(jSTerm1, jSTerm0);
      assertEquals(32, streamTokenizer0.ttype);
      assertEquals(0.0, streamTokenizer0.nval, 0.01);
      
      JSSubstitution jSSubstitution1 = (JSSubstitution)jSSubstitution0.clone();
      assertEquals(0, jSSubstitution0.size());
      assertFalse(jSSubstitution0.fail());
      assertEquals("[]", jSSubstitution0.toString());
      assertTrue(jSSubstitution0.isEmpty());
      assertEquals(10, jSSubstitution0.capacity());
      assertEquals(0, jSSubstitution1.capacity());
      assertFalse(jSSubstitution1.fail());
      assertEquals("[]", jSSubstitution1.toString());
      assertEquals(0, jSSubstitution1.size());
      assertTrue(jSSubstitution1.isEmpty());
      assertNotSame(jSSubstitution0, jSSubstitution1);
      assertNotSame(jSSubstitution1, jSSubstitution0);
      assertNotNull(jSSubstitution1);
      assertTrue(jSSubstitution1.equals((Object)jSSubstitution0));
      
      boolean boolean1 = jSSubstitution0.add((Object) stringReader0);
      assertFalse(jSSubstitution0.isEmpty());
      assertFalse(jSSubstitution0.fail());
      assertEquals(1, jSSubstitution0.size());
      assertEquals(10, jSSubstitution0.capacity());
      assertTrue(boolean1);
      assertNotSame(jSSubstitution0, jSSubstitution1);
      assertFalse(jSSubstitution0.equals((Object)jSSubstitution1));
      assertTrue(boolean1 == boolean0);
      
      jSTerm0.makeEval(true);
      assertEquals("Token[' '], line 1", streamTokenizer0.toString());
      assertEquals(1, streamTokenizer0.lineno());
      assertFalse(jSTerm0.isVariable());
      assertFalse(jSTerm0.isFunction());
      assertEquals(10, jSTerm0.capacity());
      assertEquals(2, jSTerm0.size());
      assertTrue(jSTerm0.isConstant());
      assertEquals("[jFxA%Rdj8%, (this Collection)]", jSTerm0.toString());
      assertFalse(jSTerm0.isEmpty());
      assertTrue(jSTerm0.isEval());
      assertSame(jSTerm0, jSTerm1);
      assertEquals(32, streamTokenizer0.ttype);
      assertEquals(0.0, streamTokenizer0.nval, 0.01);
      
      jSTerm1.makeFunction();
      assertFalse(jSSubstitution0.isEmpty());
      assertFalse(jSSubstitution0.fail());
      assertEquals(1, jSSubstitution0.size());
      assertEquals(10, jSSubstitution0.capacity());
      assertEquals("Token[' '], line 1", streamTokenizer0.toString());
      assertEquals(1, streamTokenizer0.lineno());
      assertFalse(jSTerm0.isVariable());
      assertEquals(10, jSTerm0.capacity());
      assertEquals(2, jSTerm0.size());
      assertEquals("[jFxA%Rdj8%, (this Collection)]", jSTerm0.toString());
      assertTrue(jSTerm0.isFunction());
      assertFalse(jSTerm0.isEmpty());
      assertTrue(jSTerm0.isEval());
      assertFalse(jSTerm0.isConstant());
      assertFalse(jSTerm1.isVariable());
      assertEquals(10, jSTerm1.capacity());
      assertEquals(2, jSTerm1.size());
      assertTrue(jSTerm1.isEval());
      assertTrue(jSTerm1.isFunction());
      assertFalse(jSTerm1.isEmpty());
      assertFalse(jSTerm1.isConstant());
      assertEquals("[jFxA%Rdj8%, (this Collection)]", jSTerm1.toString());
      assertNotSame(jSSubstitution0, jSSubstitution1);
      assertSame(jSTerm0, jSTerm1);
      assertSame(jSTerm1, jSTerm0);
      assertFalse(jSSubstitution0.equals((Object)jSSubstitution1));
      assertEquals(32, streamTokenizer0.ttype);
      assertEquals(0.0, streamTokenizer0.nval, 0.01);
      
      JSSubstitution jSSubstitution2 = jSTerm1.matches(jSTerm0, jSSubstitution0);
      assertFalse(jSSubstitution0.isEmpty());
      assertFalse(jSSubstitution0.fail());
      assertEquals(1, jSSubstitution0.size());
      assertEquals(10, jSSubstitution0.capacity());
      assertEquals("Token[' '], line 1", streamTokenizer0.toString());
      assertEquals(1, streamTokenizer0.lineno());
      assertFalse(jSTerm0.isVariable());
      assertEquals(10, jSTerm0.capacity());
      assertEquals(2, jSTerm0.size());
      assertEquals("[jFxA%Rdj8%, (this Collection)]", jSTerm0.toString());
      assertTrue(jSTerm0.isFunction());
      assertFalse(jSTerm0.isEmpty());
      assertTrue(jSTerm0.isEval());
      assertFalse(jSTerm0.isConstant());
      assertFalse(jSTerm1.isVariable());
      assertEquals(10, jSTerm1.capacity());
      assertEquals(2, jSTerm1.size());
      assertTrue(jSTerm1.isEval());
      assertTrue(jSTerm1.isFunction());
      assertFalse(jSTerm1.isEmpty());
      assertFalse(jSTerm1.isConstant());
      assertEquals("[jFxA%Rdj8%, (this Collection)]", jSTerm1.toString());
      assertEquals("[]", jSSubstitution2.toString());
      assertEquals(10, jSSubstitution2.capacity());
      assertTrue(jSSubstitution2.isEmpty());
      assertFalse(jSSubstitution2.fail());
      assertEquals(0, jSSubstitution2.size());
      assertNotSame(jSSubstitution0, jSSubstitution1);
      assertNotSame(jSSubstitution0, jSSubstitution2);
      assertSame(jSTerm0, jSTerm1);
      assertSame(jSTerm1, jSTerm0);
      assertNotSame(jSSubstitution2, jSSubstitution0);
      assertNotSame(jSSubstitution2, jSSubstitution1);
      assertNotNull(jSSubstitution2);
      assertFalse(jSSubstitution0.equals((Object)jSSubstitution1));
      assertTrue(jSSubstitution2.equals((Object)jSSubstitution1));
      assertFalse(jSSubstitution2.equals((Object)jSSubstitution0));
      assertEquals(32, streamTokenizer0.ttype);
      assertEquals(0.0, streamTokenizer0.nval, 0.01);
      
      boolean boolean2 = jSTerm0.isVariable();
      assertEquals("Token[' '], line 1", streamTokenizer0.toString());
      assertEquals(1, streamTokenizer0.lineno());
      assertFalse(jSTerm0.isVariable());
      assertEquals(10, jSTerm0.capacity());
      assertEquals(2, jSTerm0.size());
      assertEquals("[jFxA%Rdj8%, (this Collection)]", jSTerm0.toString());
      assertTrue(jSTerm0.isFunction());
      assertFalse(jSTerm0.isEmpty());
      assertTrue(jSTerm0.isEval());
      assertFalse(jSTerm0.isConstant());
      assertFalse(boolean2);
      assertSame(jSTerm0, jSTerm1);
      assertFalse(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      assertEquals(32, streamTokenizer0.ttype);
      assertEquals(0.0, streamTokenizer0.nval, 0.01);
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      assertFalse(jSTerm0.isConstant());
      assertFalse(jSTerm0.isEval());
      assertEquals(0, jSTerm0.size());
      assertTrue(jSTerm0.isEmpty());
      assertFalse(jSTerm0.isVariable());
      assertEquals(10, jSTerm0.capacity());
      assertEquals("[]", jSTerm0.toString());
      assertFalse(jSTerm0.isFunction());
      assertNotNull(jSTerm0);
      
      JSJshopVars.slash = 1;
      JSJshopVars.plus = 1;
      StringReader stringReader0 = new StringReader("6w8PN(8AH%gh");
      assertNotNull(stringReader0);
      
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      assertEquals(1, streamTokenizer0.lineno());
      assertEquals("Token[NOTHING], line 1", streamTokenizer0.toString());
      assertNotNull(streamTokenizer0);
      assertEquals((-4), streamTokenizer0.ttype);
      assertEquals(0.0, streamTokenizer0.nval, 0.01);
      
      JSTerm jSTerm1 = new JSTerm(streamTokenizer0);
      assertEquals("Token[n=6.0], line 1", streamTokenizer0.toString());
      assertEquals(1, streamTokenizer0.lineno());
      assertEquals("[6.0]", jSTerm1.toString());
      assertFalse(jSTerm1.isEmpty());
      assertEquals(10, jSTerm1.capacity());
      assertFalse(jSTerm1.isFunction());
      assertFalse(jSTerm1.isEval());
      assertEquals(1, jSTerm1.size());
      assertTrue(jSTerm1.isConstant());
      assertFalse(jSTerm1.isVariable());
      assertNotNull(jSTerm1);
      assertFalse(jSTerm1.equals((Object)jSTerm0));
      assertEquals(6.0, streamTokenizer0.nval, 0.01);
      assertEquals((-2), streamTokenizer0.ttype);
      
      // Undeclared exception!
      try { 
        jSTerm0.toStr();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      assertEquals("[]", jSSubstitution0.toString());
      assertEquals(10, jSSubstitution0.capacity());
      assertTrue(jSSubstitution0.isEmpty());
      assertEquals(0, jSSubstitution0.size());
      assertFalse(jSSubstitution0.fail());
      assertNotNull(jSSubstitution0);
      
      StringReader stringReader0 = new StringReader("jFxA%Rdj8% jSYG> MR");
      assertNotNull(stringReader0);
      
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      assertEquals("Token[NOTHING], line 1", streamTokenizer0.toString());
      assertEquals(1, streamTokenizer0.lineno());
      assertNotNull(streamTokenizer0);
      assertEquals((-4), streamTokenizer0.ttype);
      assertEquals(0.0, streamTokenizer0.nval, 0.01);
      
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      assertEquals("Token[' '], line 1", streamTokenizer0.toString());
      assertEquals(1, streamTokenizer0.lineno());
      assertTrue(jSTerm0.isConstant());
      assertEquals("[jFxA%Rdj8%]", jSTerm0.toString());
      assertFalse(jSTerm0.isVariable());
      assertEquals(1, jSTerm0.size());
      assertFalse(jSTerm0.isEval());
      assertFalse(jSTerm0.isEmpty());
      assertFalse(jSTerm0.isFunction());
      assertEquals(10, jSTerm0.capacity());
      assertNotNull(jSTerm0);
      assertEquals(0.0, streamTokenizer0.nval, 0.01);
      assertEquals(32, streamTokenizer0.ttype);
      
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      assertEquals(0, jSSubstitution1.size());
      assertTrue(jSSubstitution1.isEmpty());
      assertFalse(jSSubstitution1.fail());
      assertEquals("[]", jSSubstitution1.toString());
      assertEquals(10, jSSubstitution1.capacity());
      assertNotNull(jSSubstitution1);
      assertTrue(jSSubstitution1.equals((Object)jSSubstitution0));
      
      JSTerm jSTerm1 = jSSubstitution1.instance(jSTerm0);
      assertEquals("Token[' '], line 1", streamTokenizer0.toString());
      assertEquals(1, streamTokenizer0.lineno());
      assertTrue(jSTerm0.isConstant());
      assertEquals("[jFxA%Rdj8%]", jSTerm0.toString());
      assertFalse(jSTerm0.isVariable());
      assertEquals(1, jSTerm0.size());
      assertFalse(jSTerm0.isEval());
      assertFalse(jSTerm0.isEmpty());
      assertFalse(jSTerm0.isFunction());
      assertEquals(10, jSTerm0.capacity());
      assertEquals(0, jSSubstitution1.size());
      assertTrue(jSSubstitution1.isEmpty());
      assertFalse(jSSubstitution1.fail());
      assertEquals("[]", jSSubstitution1.toString());
      assertEquals(10, jSSubstitution1.capacity());
      assertFalse(jSTerm1.isEval());
      assertEquals(1, jSTerm1.size());
      assertEquals(10, jSTerm1.capacity());
      assertFalse(jSTerm1.isVariable());
      assertFalse(jSTerm1.isFunction());
      assertEquals("[jFxA%Rdj8%]", jSTerm1.toString());
      assertTrue(jSTerm1.isConstant());
      assertFalse(jSTerm1.isEmpty());
      assertSame(jSTerm0, jSTerm1);
      assertNotSame(jSSubstitution1, jSSubstitution0);
      assertSame(jSTerm1, jSTerm0);
      assertNotNull(jSTerm1);
      assertTrue(jSSubstitution1.equals((Object)jSSubstitution0));
      assertEquals(0.0, streamTokenizer0.nval, 0.01);
      assertEquals(32, streamTokenizer0.ttype);
      
      JSSubstitution jSSubstitution2 = (JSSubstitution)jSSubstitution1.clone();
      assertEquals(0, jSSubstitution1.size());
      assertTrue(jSSubstitution1.isEmpty());
      assertFalse(jSSubstitution1.fail());
      assertEquals("[]", jSSubstitution1.toString());
      assertEquals(10, jSSubstitution1.capacity());
      assertEquals("[]", jSSubstitution2.toString());
      assertFalse(jSSubstitution2.fail());
      assertEquals(0, jSSubstitution2.size());
      assertTrue(jSSubstitution2.isEmpty());
      assertEquals(0, jSSubstitution2.capacity());
      assertNotSame(jSSubstitution1, jSSubstitution2);
      assertNotSame(jSSubstitution1, jSSubstitution0);
      assertNotSame(jSSubstitution2, jSSubstitution0);
      assertNotSame(jSSubstitution2, jSSubstitution1);
      assertNotNull(jSSubstitution2);
      assertTrue(jSSubstitution1.equals((Object)jSSubstitution0));
      assertTrue(jSSubstitution2.equals((Object)jSSubstitution0));
      assertTrue(jSSubstitution2.equals((Object)jSSubstitution1));
      
      jSTerm0.makeEval(true);
      assertEquals("Token[' '], line 1", streamTokenizer0.toString());
      assertEquals(1, streamTokenizer0.lineno());
      assertTrue(jSTerm0.isConstant());
      assertEquals("[jFxA%Rdj8%]", jSTerm0.toString());
      assertFalse(jSTerm0.isVariable());
      assertTrue(jSTerm0.isEval());
      assertEquals(1, jSTerm0.size());
      assertFalse(jSTerm0.isEmpty());
      assertFalse(jSTerm0.isFunction());
      assertEquals(10, jSTerm0.capacity());
      assertSame(jSTerm0, jSTerm1);
      assertEquals(0.0, streamTokenizer0.nval, 0.01);
      assertEquals(32, streamTokenizer0.ttype);
      
      jSTerm1.makeFunction();
      assertEquals("Token[' '], line 1", streamTokenizer0.toString());
      assertEquals(1, streamTokenizer0.lineno());
      assertEquals("[jFxA%Rdj8%]", jSTerm0.toString());
      assertFalse(jSTerm0.isVariable());
      assertTrue(jSTerm0.isEval());
      assertEquals(1, jSTerm0.size());
      assertTrue(jSTerm0.isFunction());
      assertFalse(jSTerm0.isEmpty());
      assertFalse(jSTerm0.isConstant());
      assertEquals(10, jSTerm0.capacity());
      assertEquals(0, jSSubstitution1.size());
      assertTrue(jSSubstitution1.isEmpty());
      assertFalse(jSSubstitution1.fail());
      assertEquals("[]", jSSubstitution1.toString());
      assertEquals(10, jSSubstitution1.capacity());
      assertEquals(1, jSTerm1.size());
      assertEquals(10, jSTerm1.capacity());
      assertFalse(jSTerm1.isVariable());
      assertTrue(jSTerm1.isEval());
      assertEquals("[jFxA%Rdj8%]", jSTerm1.toString());
      assertTrue(jSTerm1.isFunction());
      assertFalse(jSTerm1.isConstant());
      assertFalse(jSTerm1.isEmpty());
      assertSame(jSTerm0, jSTerm1);
      assertNotSame(jSSubstitution1, jSSubstitution2);
      assertNotSame(jSSubstitution1, jSSubstitution0);
      assertSame(jSTerm1, jSTerm0);
      assertTrue(jSSubstitution1.equals((Object)jSSubstitution2));
      assertTrue(jSSubstitution1.equals((Object)jSSubstitution0));
      assertEquals(0.0, streamTokenizer0.nval, 0.01);
      assertEquals(32, streamTokenizer0.ttype);
      
      jSTerm0.print();
      assertEquals("Token[' '], line 1", streamTokenizer0.toString());
      assertEquals(1, streamTokenizer0.lineno());
      assertEquals("[jFxA%Rdj8%]", jSTerm0.toString());
      assertFalse(jSTerm0.isVariable());
      assertTrue(jSTerm0.isEval());
      assertEquals(1, jSTerm0.size());
      assertTrue(jSTerm0.isFunction());
      assertFalse(jSTerm0.isEmpty());
      assertFalse(jSTerm0.isConstant());
      assertEquals(10, jSTerm0.capacity());
      assertSame(jSTerm0, jSTerm1);
      assertEquals(0.0, streamTokenizer0.nval, 0.01);
      assertEquals(32, streamTokenizer0.ttype);
      
      JSTerm jSTerm2 = jSTerm1.cloneT();
      assertEquals("Token[' '], line 1", streamTokenizer0.toString());
      assertEquals(1, streamTokenizer0.lineno());
      assertEquals("[jFxA%Rdj8%]", jSTerm0.toString());
      assertFalse(jSTerm0.isVariable());
      assertTrue(jSTerm0.isEval());
      assertEquals(1, jSTerm0.size());
      assertTrue(jSTerm0.isFunction());
      assertFalse(jSTerm0.isEmpty());
      assertFalse(jSTerm0.isConstant());
      assertEquals(10, jSTerm0.capacity());
      assertEquals(0, jSSubstitution1.size());
      assertTrue(jSSubstitution1.isEmpty());
      assertFalse(jSSubstitution1.fail());
      assertEquals("[]", jSSubstitution1.toString());
      assertEquals(10, jSSubstitution1.capacity());
      assertEquals(1, jSTerm1.size());
      assertEquals(10, jSTerm1.capacity());
      assertFalse(jSTerm1.isVariable());
      assertTrue(jSTerm1.isEval());
      assertEquals("[jFxA%Rdj8%]", jSTerm1.toString());
      assertTrue(jSTerm1.isFunction());
      assertFalse(jSTerm1.isConstant());
      assertFalse(jSTerm1.isEmpty());
      assertEquals("[jFxA%Rdj8%]", jSTerm2.toString());
      assertEquals(10, jSTerm2.capacity());
      assertFalse(jSTerm2.isConstant());
      assertTrue(jSTerm2.isFunction());
      assertFalse(jSTerm2.isEmpty());
      assertTrue(jSTerm2.isEval());
      assertEquals(1, jSTerm2.size());
      assertFalse(jSTerm2.isVariable());
      assertNotSame(jSTerm0, jSTerm2);
      assertSame(jSTerm0, jSTerm1);
      assertNotSame(jSSubstitution1, jSSubstitution2);
      assertNotSame(jSSubstitution1, jSSubstitution0);
      assertNotSame(jSTerm1, jSTerm2);
      assertSame(jSTerm1, jSTerm0);
      assertNotSame(jSTerm2, jSTerm1);
      assertNotSame(jSTerm2, jSTerm0);
      assertNotNull(jSTerm2);
      assertTrue(jSSubstitution1.equals((Object)jSSubstitution2));
      assertTrue(jSSubstitution1.equals((Object)jSSubstitution0));
      assertTrue(jSTerm2.equals((Object)jSTerm0));
      assertTrue(jSTerm2.equals((Object)jSTerm1));
      assertEquals(0.0, streamTokenizer0.nval, 0.01);
      assertEquals(32, streamTokenizer0.ttype);
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      assertTrue(jSTerm0.isEmpty());
      assertEquals("[]", jSTerm0.toString());
      assertEquals(10, jSTerm0.capacity());
      assertFalse(jSTerm0.isFunction());
      assertEquals(0, jSTerm0.size());
      assertFalse(jSTerm0.isEval());
      assertFalse(jSTerm0.isConstant());
      assertFalse(jSTerm0.isVariable());
      assertNotNull(jSTerm0);
      
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      assertEquals("[]", jSSubstitution0.toString());
      assertEquals(10, jSSubstitution0.capacity());
      assertTrue(jSSubstitution0.isEmpty());
      assertFalse(jSSubstitution0.fail());
      assertEquals(0, jSSubstitution0.size());
      assertNotNull(jSSubstitution0);
      
      JSSubstitution jSSubstitution1 = jSTerm0.matches(jSTerm0, jSSubstitution0);
      assertTrue(jSTerm0.isEmpty());
      assertEquals("[]", jSTerm0.toString());
      assertEquals(10, jSTerm0.capacity());
      assertFalse(jSTerm0.isFunction());
      assertEquals(0, jSTerm0.size());
      assertFalse(jSTerm0.isEval());
      assertFalse(jSTerm0.isConstant());
      assertFalse(jSTerm0.isVariable());
      assertEquals("[]", jSSubstitution0.toString());
      assertEquals(10, jSSubstitution0.capacity());
      assertTrue(jSSubstitution0.isEmpty());
      assertFalse(jSSubstitution0.fail());
      assertEquals(0, jSSubstitution0.size());
      assertTrue(jSSubstitution1.fail());
      assertEquals(10, jSSubstitution1.capacity());
      assertEquals("[]", jSSubstitution1.toString());
      assertTrue(jSSubstitution1.isEmpty());
      assertEquals(0, jSSubstitution1.size());
      assertNotSame(jSSubstitution0, jSSubstitution1);
      assertNotSame(jSSubstitution1, jSSubstitution0);
      assertNotNull(jSSubstitution1);
      assertTrue(jSSubstitution1.equals((Object)jSSubstitution0));
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      assertEquals("[]", jSSubstitution0.toString());
      assertTrue(jSSubstitution0.isEmpty());
      assertEquals(10, jSSubstitution0.capacity());
      assertFalse(jSSubstitution0.fail());
      assertEquals(0, jSSubstitution0.size());
      assertNotNull(jSSubstitution0);
      
      StringReader stringReader0 = new StringReader("jFxA%Rdj8% jSYG> MR");
      assertNotNull(stringReader0);
      
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      assertEquals(1, streamTokenizer0.lineno());
      assertEquals("Token[NOTHING], line 1", streamTokenizer0.toString());
      assertNotNull(streamTokenizer0);
      assertEquals((-4), streamTokenizer0.ttype);
      assertEquals(0.0, streamTokenizer0.nval, 0.01);
      
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      assertEquals(1, streamTokenizer0.lineno());
      assertEquals("Token[' '], line 1", streamTokenizer0.toString());
      assertTrue(jSTerm0.isConstant());
      assertEquals("[jFxA%Rdj8%]", jSTerm0.toString());
      assertEquals(10, jSTerm0.capacity());
      assertFalse(jSTerm0.isFunction());
      assertFalse(jSTerm0.isVariable());
      assertFalse(jSTerm0.isEmpty());
      assertFalse(jSTerm0.isEval());
      assertEquals(1, jSTerm0.size());
      assertNotNull(jSTerm0);
      assertEquals(32, streamTokenizer0.ttype);
      assertEquals(0.0, streamTokenizer0.nval, 0.01);
      
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      assertFalse(jSSubstitution1.fail());
      assertTrue(jSSubstitution1.isEmpty());
      assertEquals(0, jSSubstitution1.size());
      assertEquals(10, jSSubstitution1.capacity());
      assertEquals("[]", jSSubstitution1.toString());
      assertNotNull(jSSubstitution1);
      assertTrue(jSSubstitution1.equals((Object)jSSubstitution0));
      
      JSTerm jSTerm1 = jSSubstitution1.instance(jSTerm0);
      assertEquals(1, streamTokenizer0.lineno());
      assertEquals("Token[' '], line 1", streamTokenizer0.toString());
      assertTrue(jSTerm0.isConstant());
      assertEquals("[jFxA%Rdj8%]", jSTerm0.toString());
      assertEquals(10, jSTerm0.capacity());
      assertFalse(jSTerm0.isFunction());
      assertFalse(jSTerm0.isVariable());
      assertFalse(jSTerm0.isEmpty());
      assertFalse(jSTerm0.isEval());
      assertEquals(1, jSTerm0.size());
      assertFalse(jSSubstitution1.fail());
      assertTrue(jSSubstitution1.isEmpty());
      assertEquals(0, jSSubstitution1.size());
      assertEquals(10, jSSubstitution1.capacity());
      assertEquals("[]", jSSubstitution1.toString());
      assertEquals(1, jSTerm1.size());
      assertFalse(jSTerm1.isFunction());
      assertFalse(jSTerm1.isEval());
      assertFalse(jSTerm1.isEmpty());
      assertEquals(10, jSTerm1.capacity());
      assertEquals("[jFxA%Rdj8%]", jSTerm1.toString());
      assertFalse(jSTerm1.isVariable());
      assertTrue(jSTerm1.isConstant());
      assertSame(jSTerm0, jSTerm1);
      assertNotSame(jSSubstitution1, jSSubstitution0);
      assertSame(jSTerm1, jSTerm0);
      assertNotNull(jSTerm1);
      assertTrue(jSSubstitution1.equals((Object)jSSubstitution0));
      assertEquals(32, streamTokenizer0.ttype);
      assertEquals(0.0, streamTokenizer0.nval, 0.01);
      
      JSSubstitution jSSubstitution2 = (JSSubstitution)jSSubstitution1.clone();
      assertFalse(jSSubstitution1.fail());
      assertTrue(jSSubstitution1.isEmpty());
      assertEquals(0, jSSubstitution1.size());
      assertEquals(10, jSSubstitution1.capacity());
      assertEquals("[]", jSSubstitution1.toString());
      assertEquals("[]", jSSubstitution2.toString());
      assertTrue(jSSubstitution2.isEmpty());
      assertFalse(jSSubstitution2.fail());
      assertEquals(0, jSSubstitution2.capacity());
      assertEquals(0, jSSubstitution2.size());
      assertNotSame(jSSubstitution1, jSSubstitution0);
      assertNotSame(jSSubstitution1, jSSubstitution2);
      assertNotSame(jSSubstitution2, jSSubstitution0);
      assertNotSame(jSSubstitution2, jSSubstitution1);
      assertNotNull(jSSubstitution2);
      assertTrue(jSSubstitution1.equals((Object)jSSubstitution0));
      assertTrue(jSSubstitution2.equals((Object)jSSubstitution1));
      assertTrue(jSSubstitution2.equals((Object)jSSubstitution0));
      
      streamTokenizer0.whitespaceChars(1049, 1049);
      assertEquals(1, streamTokenizer0.lineno());
      assertEquals("Token[' '], line 1", streamTokenizer0.toString());
      assertEquals(32, streamTokenizer0.ttype);
      assertEquals(0.0, streamTokenizer0.nval, 0.01);
      
      JSPredicateForm jSPredicateForm0 = jSTerm1.applySubstitutionPF(jSSubstitution1);
      assertEquals(1, streamTokenizer0.lineno());
      assertEquals("Token[' '], line 1", streamTokenizer0.toString());
      assertTrue(jSTerm0.isConstant());
      assertEquals("[jFxA%Rdj8%]", jSTerm0.toString());
      assertEquals(10, jSTerm0.capacity());
      assertFalse(jSTerm0.isFunction());
      assertFalse(jSTerm0.isVariable());
      assertFalse(jSTerm0.isEmpty());
      assertFalse(jSTerm0.isEval());
      assertEquals(1, jSTerm0.size());
      assertFalse(jSSubstitution1.fail());
      assertTrue(jSSubstitution1.isEmpty());
      assertEquals(0, jSSubstitution1.size());
      assertEquals(10, jSSubstitution1.capacity());
      assertEquals("[]", jSSubstitution1.toString());
      assertEquals(1, jSTerm1.size());
      assertFalse(jSTerm1.isFunction());
      assertFalse(jSTerm1.isEval());
      assertFalse(jSTerm1.isEmpty());
      assertEquals(10, jSTerm1.capacity());
      assertEquals("[jFxA%Rdj8%]", jSTerm1.toString());
      assertFalse(jSTerm1.isVariable());
      assertTrue(jSTerm1.isConstant());
      assertEquals("[jFxA%Rdj8%]", jSPredicateForm0.toString());
      assertFalse(jSPredicateForm0.isEmpty());
      assertEquals(10, jSPredicateForm0.capacity());
      assertEquals(1, jSPredicateForm0.size());
      assertSame(jSTerm0, jSTerm1);
      assertNotSame(jSSubstitution1, jSSubstitution0);
      assertNotSame(jSSubstitution1, jSSubstitution2);
      assertSame(jSTerm1, jSTerm0);
      assertNotNull(jSPredicateForm0);
      assertTrue(jSSubstitution1.equals((Object)jSSubstitution2));
      assertTrue(jSSubstitution1.equals((Object)jSSubstitution0));
      assertEquals(32, streamTokenizer0.ttype);
      assertEquals(0.0, streamTokenizer0.nval, 0.01);
      
      Stream stream0 = jSTerm1.stream();
      assertEquals(1, streamTokenizer0.lineno());
      assertEquals("Token[' '], line 1", streamTokenizer0.toString());
      assertTrue(jSTerm0.isConstant());
      assertEquals("[jFxA%Rdj8%]", jSTerm0.toString());
      assertEquals(10, jSTerm0.capacity());
      assertFalse(jSTerm0.isFunction());
      assertFalse(jSTerm0.isVariable());
      assertFalse(jSTerm0.isEmpty());
      assertFalse(jSTerm0.isEval());
      assertEquals(1, jSTerm0.size());
      assertFalse(jSSubstitution1.fail());
      assertTrue(jSSubstitution1.isEmpty());
      assertEquals(0, jSSubstitution1.size());
      assertEquals(10, jSSubstitution1.capacity());
      assertEquals("[]", jSSubstitution1.toString());
      assertEquals(1, jSTerm1.size());
      assertFalse(jSTerm1.isFunction());
      assertFalse(jSTerm1.isEval());
      assertFalse(jSTerm1.isEmpty());
      assertEquals(10, jSTerm1.capacity());
      assertEquals("[jFxA%Rdj8%]", jSTerm1.toString());
      assertFalse(jSTerm1.isVariable());
      assertTrue(jSTerm1.isConstant());
      assertSame(jSTerm0, jSTerm1);
      assertNotSame(jSSubstitution1, jSSubstitution0);
      assertNotSame(jSSubstitution1, jSSubstitution2);
      assertSame(jSTerm1, jSTerm0);
      assertNotNull(stream0);
      assertTrue(jSSubstitution1.equals((Object)jSSubstitution2));
      assertTrue(jSSubstitution1.equals((Object)jSSubstitution0));
      assertEquals(32, streamTokenizer0.ttype);
      assertEquals(0.0, streamTokenizer0.nval, 0.01);
      
      Consumer<Integer> consumer0 = (Consumer<Integer>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      jSTerm0.forEach(consumer0);
      assertEquals(1, streamTokenizer0.lineno());
      assertEquals("Token[' '], line 1", streamTokenizer0.toString());
      assertTrue(jSTerm0.isConstant());
      assertEquals("[jFxA%Rdj8%]", jSTerm0.toString());
      assertEquals(10, jSTerm0.capacity());
      assertFalse(jSTerm0.isFunction());
      assertFalse(jSTerm0.isVariable());
      assertFalse(jSTerm0.isEmpty());
      assertFalse(jSTerm0.isEval());
      assertEquals(1, jSTerm0.size());
      assertSame(jSTerm0, jSTerm1);
      assertEquals(32, streamTokenizer0.ttype);
      assertEquals(0.0, streamTokenizer0.nval, 0.01);
      
      StringReader stringReader1 = new StringReader(";UETu2I");
      assertNotNull(stringReader1);
      assertFalse(stringReader1.equals((Object)stringReader0));
      
      boolean boolean0 = stringReader1.markSupported();
      assertTrue(boolean0);
      assertNotSame(stringReader1, stringReader0);
      assertFalse(stringReader1.equals((Object)stringReader0));
      
      JSTerm jSTerm2 = new JSTerm(streamTokenizer0);
      assertEquals(1, streamTokenizer0.lineno());
      assertEquals("Token[' '], line 1", streamTokenizer0.toString());
      assertTrue(jSTerm2.isConstant());
      assertEquals("[jSYG>]", jSTerm2.toString());
      assertFalse(jSTerm2.isEval());
      assertEquals(1, jSTerm2.size());
      assertEquals(10, jSTerm2.capacity());
      assertFalse(jSTerm2.isFunction());
      assertFalse(jSTerm2.isVariable());
      assertFalse(jSTerm2.isEmpty());
      assertNotNull(jSTerm2);
      assertFalse(stringReader0.equals((Object)stringReader1));
      assertFalse(jSTerm2.equals((Object)jSTerm1));
      assertFalse(jSTerm2.equals((Object)jSTerm0));
      assertEquals(32, streamTokenizer0.ttype);
      assertEquals(0.0, streamTokenizer0.nval, 0.01);
      
      boolean boolean1 = jSTerm0.equals(jSTerm1);
      assertEquals(1, streamTokenizer0.lineno());
      assertEquals("Token[' '], line 1", streamTokenizer0.toString());
      assertTrue(jSTerm0.isConstant());
      assertEquals("[jFxA%Rdj8%]", jSTerm0.toString());
      assertEquals(10, jSTerm0.capacity());
      assertFalse(jSTerm0.isFunction());
      assertFalse(jSTerm0.isVariable());
      assertFalse(jSTerm0.isEmpty());
      assertFalse(jSTerm0.isEval());
      assertEquals(1, jSTerm0.size());
      assertFalse(jSSubstitution1.fail());
      assertTrue(jSSubstitution1.isEmpty());
      assertEquals(0, jSSubstitution1.size());
      assertEquals(10, jSSubstitution1.capacity());
      assertEquals("[]", jSSubstitution1.toString());
      assertEquals(1, jSTerm1.size());
      assertFalse(jSTerm1.isFunction());
      assertFalse(jSTerm1.isEval());
      assertFalse(jSTerm1.isEmpty());
      assertEquals(10, jSTerm1.capacity());
      assertEquals("[jFxA%Rdj8%]", jSTerm1.toString());
      assertFalse(jSTerm1.isVariable());
      assertTrue(jSTerm1.isConstant());
      assertTrue(boolean1);
      assertNotSame(stringReader0, stringReader1);
      assertSame(jSTerm0, jSTerm1);
      assertNotSame(jSTerm0, jSTerm2);
      assertNotSame(jSSubstitution1, jSSubstitution0);
      assertNotSame(jSSubstitution1, jSSubstitution2);
      assertSame(jSTerm1, jSTerm0);
      assertNotSame(jSTerm1, jSTerm2);
      assertFalse(stringReader0.equals((Object)stringReader1));
      assertFalse(jSTerm0.equals((Object)jSTerm2));
      assertTrue(jSSubstitution1.equals((Object)jSSubstitution2));
      assertTrue(jSSubstitution1.equals((Object)jSSubstitution0));
      assertFalse(jSTerm1.equals((Object)jSTerm2));
      assertTrue(boolean1 == boolean0);
      assertEquals(32, streamTokenizer0.ttype);
      assertEquals(0.0, streamTokenizer0.nval, 0.01);
      
      JSSubstitution jSSubstitution3 = jSTerm2.matches(jSTerm0, jSSubstitution0);
      assertEquals(10, jSSubstitution3.capacity());
      assertTrue(jSSubstitution3.fail());
      assertEquals(0, jSSubstitution3.size());
      assertEquals("[]", jSSubstitution3.toString());
      assertTrue(jSSubstitution3.isEmpty());
      assertEquals("[]", jSSubstitution0.toString());
      assertTrue(jSSubstitution0.isEmpty());
      assertEquals(10, jSSubstitution0.capacity());
      assertFalse(jSSubstitution0.fail());
      assertEquals(0, jSSubstitution0.size());
      assertEquals(1, streamTokenizer0.lineno());
      assertEquals("Token[' '], line 1", streamTokenizer0.toString());
      assertTrue(jSTerm0.isConstant());
      assertEquals("[jFxA%Rdj8%]", jSTerm0.toString());
      assertEquals(10, jSTerm0.capacity());
      assertFalse(jSTerm0.isFunction());
      assertFalse(jSTerm0.isVariable());
      assertFalse(jSTerm0.isEmpty());
      assertFalse(jSTerm0.isEval());
      assertEquals(1, jSTerm0.size());
      assertTrue(jSTerm2.isConstant());
      assertEquals("[jSYG>]", jSTerm2.toString());
      assertFalse(jSTerm2.isEval());
      assertEquals(1, jSTerm2.size());
      assertEquals(10, jSTerm2.capacity());
      assertFalse(jSTerm2.isFunction());
      assertFalse(jSTerm2.isVariable());
      assertFalse(jSTerm2.isEmpty());
      assertNotSame(jSSubstitution3, jSSubstitution0);
      assertNotSame(jSSubstitution3, jSSubstitution2);
      assertNotSame(jSSubstitution3, jSSubstitution1);
      assertNotSame(jSSubstitution0, jSSubstitution3);
      assertNotSame(jSSubstitution0, jSSubstitution2);
      assertNotSame(jSSubstitution0, jSSubstitution1);
      assertNotSame(stringReader0, stringReader1);
      assertSame(jSTerm0, jSTerm1);
      assertNotSame(jSTerm0, jSTerm2);
      assertNotSame(jSTerm2, jSTerm1);
      assertNotSame(jSTerm2, jSTerm0);
      assertNotNull(jSSubstitution3);
      assertTrue(jSSubstitution3.equals((Object)jSSubstitution1));
      assertTrue(jSSubstitution3.equals((Object)jSSubstitution2));
      assertTrue(jSSubstitution3.equals((Object)jSSubstitution0));
      assertTrue(jSSubstitution0.equals((Object)jSSubstitution2));
      assertTrue(jSSubstitution0.equals((Object)jSSubstitution1));
      assertFalse(stringReader0.equals((Object)stringReader1));
      assertFalse(jSTerm0.equals((Object)jSTerm2));
      assertFalse(jSTerm2.equals((Object)jSTerm1));
      assertFalse(jSTerm2.equals((Object)jSTerm0));
      assertEquals(32, streamTokenizer0.ttype);
      assertEquals(0.0, streamTokenizer0.nval, 0.01);
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      assertEquals(0, jSTerm0.size());
      assertFalse(jSTerm0.isConstant());
      assertEquals(10, jSTerm0.capacity());
      assertFalse(jSTerm0.isFunction());
      assertTrue(jSTerm0.isEmpty());
      assertEquals("[]", jSTerm0.toString());
      assertFalse(jSTerm0.isVariable());
      assertFalse(jSTerm0.isEval());
      assertNotNull(jSTerm0);
      
      // Undeclared exception!
      try { 
        jSTerm0.standardizerTerm();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      assertTrue(jSTerm0.isEmpty());
      assertEquals("[]", jSTerm0.toString());
      assertFalse(jSTerm0.isVariable());
      assertFalse(jSTerm0.isEval());
      assertEquals(0, jSTerm0.size());
      assertFalse(jSTerm0.isConstant());
      assertEquals(10, jSTerm0.capacity());
      assertFalse(jSTerm0.isFunction());
      assertNotNull(jSTerm0);
      
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      assertEquals("[]", jSSubstitution0.toString());
      assertTrue(jSSubstitution0.isEmpty());
      assertFalse(jSSubstitution0.fail());
      assertEquals(10, jSSubstitution0.capacity());
      assertEquals(0, jSSubstitution0.size());
      assertNotNull(jSSubstitution0);
      
      jSTerm0.makeVariable();
      assertTrue(jSTerm0.isEmpty());
      assertEquals("[]", jSTerm0.toString());
      assertFalse(jSTerm0.isEval());
      assertEquals(0, jSTerm0.size());
      assertFalse(jSTerm0.isConstant());
      assertEquals(10, jSTerm0.capacity());
      assertFalse(jSTerm0.isFunction());
      assertTrue(jSTerm0.isVariable());
      
      JSJshopVars.coma = 0;
      boolean boolean0 = jSTerm0.add((Object) jSSubstitution0);
      assertFalse(jSTerm0.isEmpty());
      assertFalse(jSTerm0.isEval());
      assertEquals(1, jSTerm0.size());
      assertEquals("[[]]", jSTerm0.toString());
      assertFalse(jSTerm0.isConstant());
      assertEquals(10, jSTerm0.capacity());
      assertFalse(jSTerm0.isFunction());
      assertTrue(jSTerm0.isVariable());
      assertEquals("[]", jSSubstitution0.toString());
      assertTrue(jSSubstitution0.isEmpty());
      assertFalse(jSSubstitution0.fail());
      assertEquals(10, jSSubstitution0.capacity());
      assertEquals(0, jSSubstitution0.size());
      assertTrue(boolean0);
      
      jSTerm0.makeFunction();
      assertFalse(jSTerm0.isVariable());
      assertFalse(jSTerm0.isEmpty());
      assertFalse(jSTerm0.isEval());
      assertTrue(jSTerm0.isFunction());
      assertEquals(1, jSTerm0.size());
      assertEquals("[[]]", jSTerm0.toString());
      assertFalse(jSTerm0.isConstant());
      assertEquals(10, jSTerm0.capacity());
      
      JSTerm jSTerm1 = new JSTerm();
      assertTrue(jSTerm1.isEmpty());
      assertFalse(jSTerm1.isVariable());
      assertFalse(jSTerm1.isFunction());
      assertEquals(10, jSTerm1.capacity());
      assertEquals("[]", jSTerm1.toString());
      assertFalse(jSTerm1.isConstant());
      assertFalse(jSTerm1.isEval());
      assertEquals(0, jSTerm1.size());
      assertNotNull(jSTerm1);
      assertFalse(jSTerm1.equals((Object)jSTerm0));
      
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      assertTrue(jSSubstitution1.isEmpty());
      assertFalse(jSSubstitution1.fail());
      assertEquals(0, jSSubstitution1.size());
      assertEquals(10, jSSubstitution1.capacity());
      assertEquals("[]", jSSubstitution1.toString());
      assertNotNull(jSSubstitution1);
      assertTrue(jSSubstitution1.equals((Object)jSSubstitution0));
      
      JSTerm jSTerm2 = jSTerm0.applySubstitutionT(jSSubstitution1);
      assertFalse(jSTerm0.isVariable());
      assertFalse(jSTerm0.isEmpty());
      assertFalse(jSTerm0.isEval());
      assertTrue(jSTerm0.isFunction());
      assertEquals(1, jSTerm0.size());
      assertEquals("[[]]", jSTerm0.toString());
      assertFalse(jSTerm0.isConstant());
      assertEquals(10, jSTerm0.capacity());
      assertTrue(jSSubstitution1.isEmpty());
      assertFalse(jSSubstitution1.fail());
      assertEquals(0, jSSubstitution1.size());
      assertEquals(10, jSSubstitution1.capacity());
      assertEquals("[]", jSSubstitution1.toString());
      assertEquals(1, jSTerm2.size());
      assertFalse(jSTerm2.isConstant());
      assertFalse(jSTerm2.isEmpty());
      assertFalse(jSTerm2.isVariable());
      assertTrue(jSTerm2.isFunction());
      assertFalse(jSTerm2.isEval());
      assertEquals(10, jSTerm2.capacity());
      assertEquals("[[]]", jSTerm2.toString());
      assertNotSame(jSTerm0, jSTerm1);
      assertNotSame(jSTerm0, jSTerm2);
      assertNotSame(jSSubstitution1, jSSubstitution0);
      assertNotSame(jSTerm2, jSTerm1);
      assertNotSame(jSTerm2, jSTerm0);
      assertNotNull(jSTerm2);
      assertFalse(jSTerm0.equals((Object)jSTerm1));
      assertTrue(jSSubstitution1.equals((Object)jSSubstitution0));
      assertFalse(jSTerm2.equals((Object)jSTerm1));
      assertTrue(jSTerm2.equals((Object)jSTerm0));
      
      JSSubstitution jSSubstitution2 = jSTerm1.matches(jSTerm0, jSSubstitution1);
      assertFalse(jSTerm0.isVariable());
      assertFalse(jSTerm0.isEmpty());
      assertFalse(jSTerm0.isEval());
      assertTrue(jSTerm0.isFunction());
      assertEquals(1, jSTerm0.size());
      assertEquals("[[]]", jSTerm0.toString());
      assertFalse(jSTerm0.isConstant());
      assertEquals(10, jSTerm0.capacity());
      assertTrue(jSTerm1.isEmpty());
      assertFalse(jSTerm1.isVariable());
      assertFalse(jSTerm1.isFunction());
      assertEquals(10, jSTerm1.capacity());
      assertEquals("[]", jSTerm1.toString());
      assertFalse(jSTerm1.isConstant());
      assertFalse(jSTerm1.isEval());
      assertEquals(0, jSTerm1.size());
      assertTrue(jSSubstitution1.isEmpty());
      assertFalse(jSSubstitution1.fail());
      assertEquals(0, jSSubstitution1.size());
      assertEquals(10, jSSubstitution1.capacity());
      assertEquals("[]", jSSubstitution1.toString());
      assertEquals("[]", jSSubstitution2.toString());
      assertTrue(jSSubstitution2.isEmpty());
      assertEquals(10, jSSubstitution2.capacity());
      assertEquals(0, jSSubstitution2.size());
      assertTrue(jSSubstitution2.fail());
      assertNotSame(jSTerm0, jSTerm1);
      assertNotSame(jSTerm0, jSTerm2);
      assertNotSame(jSTerm1, jSTerm2);
      assertNotSame(jSTerm1, jSTerm0);
      assertNotSame(jSSubstitution1, jSSubstitution0);
      assertNotSame(jSSubstitution1, jSSubstitution2);
      assertNotSame(jSSubstitution2, jSSubstitution1);
      assertNotSame(jSSubstitution2, jSSubstitution0);
      assertNotNull(jSSubstitution2);
      assertTrue(jSTerm0.equals((Object)jSTerm2));
      assertFalse(jSTerm0.equals((Object)jSTerm1));
      assertFalse(jSTerm1.equals((Object)jSTerm2));
      assertFalse(jSTerm1.equals((Object)jSTerm0));
      assertTrue(jSSubstitution1.equals((Object)jSSubstitution0));
      assertTrue(jSSubstitution2.equals((Object)jSSubstitution0));
      assertTrue(jSSubstitution2.equals((Object)jSSubstitution1));
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      assertFalse(jSTerm0.isConstant());
      assertFalse(jSTerm0.isFunction());
      assertTrue(jSTerm0.isEmpty());
      assertFalse(jSTerm0.isVariable());
      assertEquals("[]", jSTerm0.toString());
      assertEquals(10, jSTerm0.capacity());
      assertFalse(jSTerm0.isEval());
      assertEquals(0, jSTerm0.size());
      assertNotNull(jSTerm0);
      
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      assertTrue(jSSubstitution0.isEmpty());
      assertEquals(10, jSSubstitution0.capacity());
      assertEquals(0, jSSubstitution0.size());
      assertFalse(jSSubstitution0.fail());
      assertEquals("[]", jSSubstitution0.toString());
      assertNotNull(jSSubstitution0);
      
      boolean boolean0 = jSTerm0.add((Object) jSSubstitution0);
      assertFalse(jSTerm0.isEmpty());
      assertFalse(jSTerm0.isConstant());
      assertEquals("[[]]", jSTerm0.toString());
      assertFalse(jSTerm0.isFunction());
      assertFalse(jSTerm0.isVariable());
      assertEquals(10, jSTerm0.capacity());
      assertFalse(jSTerm0.isEval());
      assertEquals(1, jSTerm0.size());
      assertTrue(jSSubstitution0.isEmpty());
      assertEquals(10, jSSubstitution0.capacity());
      assertEquals(0, jSSubstitution0.size());
      assertFalse(jSSubstitution0.fail());
      assertEquals("[]", jSSubstitution0.toString());
      assertTrue(boolean0);
      
      JSTerm jSTerm1 = jSTerm0.cloneT();
      assertFalse(jSTerm0.isEmpty());
      assertFalse(jSTerm0.isConstant());
      assertEquals("[[]]", jSTerm0.toString());
      assertFalse(jSTerm0.isFunction());
      assertFalse(jSTerm0.isVariable());
      assertEquals(10, jSTerm0.capacity());
      assertFalse(jSTerm0.isEval());
      assertEquals(1, jSTerm0.size());
      assertFalse(jSTerm1.isEval());
      assertEquals(1, jSTerm1.size());
      assertEquals(10, jSTerm1.capacity());
      assertFalse(jSTerm1.isVariable());
      assertEquals("[[]]", jSTerm1.toString());
      assertFalse(jSTerm1.isEmpty());
      assertTrue(jSTerm1.isFunction());
      assertFalse(jSTerm1.isConstant());
      assertNotSame(jSTerm0, jSTerm1);
      assertNotSame(jSTerm1, jSTerm0);
      assertNotNull(jSTerm1);
      assertTrue(jSTerm1.equals((Object)jSTerm0));
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      assertTrue(jSTerm0.isEmpty());
      assertEquals("[]", jSTerm0.toString());
      assertFalse(jSTerm0.isVariable());
      assertFalse(jSTerm0.isEval());
      assertEquals(0, jSTerm0.size());
      assertFalse(jSTerm0.isConstant());
      assertEquals(10, jSTerm0.capacity());
      assertFalse(jSTerm0.isFunction());
      assertNotNull(jSTerm0);
      
      JSTerm jSTerm1 = null;
      try {
        jSTerm1 = new JSTerm((StreamTokenizer) null);
        fail("Expecting exception: System.SystemExitException");
      
      } catch(System.SystemExitException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.System", e);
      }
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      assertEquals(0, jSSubstitution0.size());
      assertEquals("[]", jSSubstitution0.toString());
      assertEquals(10, jSSubstitution0.capacity());
      assertFalse(jSSubstitution0.fail());
      assertTrue(jSSubstitution0.isEmpty());
      assertNotNull(jSSubstitution0);
      
      StringReader stringReader0 = new StringReader("jFxA%Rdj8% jSYG> MR");
      assertNotNull(stringReader0);
      
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      assertEquals("Token[NOTHING], line 1", streamTokenizer0.toString());
      assertEquals(1, streamTokenizer0.lineno());
      assertNotNull(streamTokenizer0);
      assertEquals(0.0, streamTokenizer0.nval, 0.01);
      assertEquals((-4), streamTokenizer0.ttype);
      
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      assertEquals("Token[' '], line 1", streamTokenizer0.toString());
      assertEquals(1, streamTokenizer0.lineno());
      assertTrue(jSTerm0.isConstant());
      assertFalse(jSTerm0.isEmpty());
      assertEquals(1, jSTerm0.size());
      assertEquals(10, jSTerm0.capacity());
      assertFalse(jSTerm0.isFunction());
      assertFalse(jSTerm0.isEval());
      assertFalse(jSTerm0.isVariable());
      assertEquals("[jFxA%Rdj8%]", jSTerm0.toString());
      assertNotNull(jSTerm0);
      assertEquals(0.0, streamTokenizer0.nval, 0.01);
      assertEquals(32, streamTokenizer0.ttype);
      
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      assertEquals(0, jSSubstitution1.size());
      assertEquals("[]", jSSubstitution1.toString());
      assertEquals(10, jSSubstitution1.capacity());
      assertFalse(jSSubstitution1.fail());
      assertTrue(jSSubstitution1.isEmpty());
      assertNotNull(jSSubstitution1);
      assertTrue(jSSubstitution1.equals((Object)jSSubstitution0));
      
      JSTerm jSTerm1 = jSSubstitution1.instance(jSTerm0);
      assertEquals("Token[' '], line 1", streamTokenizer0.toString());
      assertEquals(1, streamTokenizer0.lineno());
      assertTrue(jSTerm0.isConstant());
      assertFalse(jSTerm0.isEmpty());
      assertEquals(1, jSTerm0.size());
      assertEquals(10, jSTerm0.capacity());
      assertFalse(jSTerm0.isFunction());
      assertFalse(jSTerm0.isEval());
      assertFalse(jSTerm0.isVariable());
      assertEquals("[jFxA%Rdj8%]", jSTerm0.toString());
      assertEquals(0, jSSubstitution1.size());
      assertEquals("[]", jSSubstitution1.toString());
      assertEquals(10, jSSubstitution1.capacity());
      assertFalse(jSSubstitution1.fail());
      assertTrue(jSSubstitution1.isEmpty());
      assertFalse(jSTerm1.isVariable());
      assertEquals(10, jSTerm1.capacity());
      assertFalse(jSTerm1.isFunction());
      assertFalse(jSTerm1.isEval());
      assertEquals(1, jSTerm1.size());
      assertFalse(jSTerm1.isEmpty());
      assertEquals("[jFxA%Rdj8%]", jSTerm1.toString());
      assertTrue(jSTerm1.isConstant());
      assertSame(jSTerm0, jSTerm1);
      assertNotSame(jSSubstitution1, jSSubstitution0);
      assertSame(jSTerm1, jSTerm0);
      assertNotNull(jSTerm1);
      assertTrue(jSSubstitution1.equals((Object)jSSubstitution0));
      assertEquals(0.0, streamTokenizer0.nval, 0.01);
      assertEquals(32, streamTokenizer0.ttype);
      
      JSSubstitution jSSubstitution2 = (JSSubstitution)jSSubstitution1.clone();
      assertEquals(0, jSSubstitution1.size());
      assertEquals("[]", jSSubstitution1.toString());
      assertEquals(10, jSSubstitution1.capacity());
      assertFalse(jSSubstitution1.fail());
      assertTrue(jSSubstitution1.isEmpty());
      assertEquals(0, jSSubstitution2.capacity());
      assertFalse(jSSubstitution2.fail());
      assertEquals("[]", jSSubstitution2.toString());
      assertEquals(0, jSSubstitution2.size());
      assertTrue(jSSubstitution2.isEmpty());
      assertNotSame(jSSubstitution1, jSSubstitution2);
      assertNotSame(jSSubstitution1, jSSubstitution0);
      assertNotSame(jSSubstitution2, jSSubstitution1);
      assertNotSame(jSSubstitution2, jSSubstitution0);
      assertNotNull(jSSubstitution2);
      assertTrue(jSSubstitution1.equals((Object)jSSubstitution0));
      assertTrue(jSSubstitution2.equals((Object)jSSubstitution0));
      assertTrue(jSSubstitution2.equals((Object)jSSubstitution1));
      
      streamTokenizer0.whitespaceChars(1049, 1049);
      assertEquals("Token[' '], line 1", streamTokenizer0.toString());
      assertEquals(1, streamTokenizer0.lineno());
      assertEquals(0.0, streamTokenizer0.nval, 0.01);
      assertEquals(32, streamTokenizer0.ttype);
      
      JSPredicateForm jSPredicateForm0 = jSTerm1.applySubstitutionPF(jSSubstitution1);
      assertEquals("Token[' '], line 1", streamTokenizer0.toString());
      assertEquals(1, streamTokenizer0.lineno());
      assertTrue(jSTerm0.isConstant());
      assertFalse(jSTerm0.isEmpty());
      assertEquals(1, jSTerm0.size());
      assertEquals(10, jSTerm0.capacity());
      assertFalse(jSTerm0.isFunction());
      assertFalse(jSTerm0.isEval());
      assertFalse(jSTerm0.isVariable());
      assertEquals("[jFxA%Rdj8%]", jSTerm0.toString());
      assertEquals(0, jSSubstitution1.size());
      assertEquals("[]", jSSubstitution1.toString());
      assertEquals(10, jSSubstitution1.capacity());
      assertFalse(jSSubstitution1.fail());
      assertTrue(jSSubstitution1.isEmpty());
      assertFalse(jSTerm1.isVariable());
      assertEquals(10, jSTerm1.capacity());
      assertFalse(jSTerm1.isFunction());
      assertFalse(jSTerm1.isEval());
      assertEquals(1, jSTerm1.size());
      assertFalse(jSTerm1.isEmpty());
      assertEquals("[jFxA%Rdj8%]", jSTerm1.toString());
      assertTrue(jSTerm1.isConstant());
      assertEquals(10, jSPredicateForm0.capacity());
      assertEquals(1, jSPredicateForm0.size());
      assertEquals("[jFxA%Rdj8%]", jSPredicateForm0.toString());
      assertFalse(jSPredicateForm0.isEmpty());
      assertSame(jSTerm0, jSTerm1);
      assertNotSame(jSSubstitution1, jSSubstitution2);
      assertNotSame(jSSubstitution1, jSSubstitution0);
      assertSame(jSTerm1, jSTerm0);
      assertNotNull(jSPredicateForm0);
      assertTrue(jSSubstitution1.equals((Object)jSSubstitution0));
      assertTrue(jSSubstitution1.equals((Object)jSSubstitution2));
      assertEquals(0.0, streamTokenizer0.nval, 0.01);
      assertEquals(32, streamTokenizer0.ttype);
      
      jSSubstitution2.removeAllElements();
      assertEquals(0, jSSubstitution1.size());
      assertEquals("[]", jSSubstitution1.toString());
      assertEquals(10, jSSubstitution1.capacity());
      assertFalse(jSSubstitution1.fail());
      assertTrue(jSSubstitution1.isEmpty());
      assertEquals(0, jSSubstitution2.capacity());
      assertFalse(jSSubstitution2.fail());
      assertEquals("[]", jSSubstitution2.toString());
      assertEquals(0, jSSubstitution2.size());
      assertTrue(jSSubstitution2.isEmpty());
      assertNotSame(jSSubstitution1, jSSubstitution2);
      assertNotSame(jSSubstitution1, jSSubstitution0);
      assertNotSame(jSSubstitution2, jSSubstitution1);
      assertNotSame(jSSubstitution2, jSSubstitution0);
      assertTrue(jSSubstitution1.equals((Object)jSSubstitution0));
      assertTrue(jSSubstitution1.equals((Object)jSSubstitution2));
      assertTrue(jSSubstitution2.equals((Object)jSSubstitution0));
      assertTrue(jSSubstitution2.equals((Object)jSSubstitution1));
      
      Stream stream0 = jSTerm1.stream();
      assertEquals("Token[' '], line 1", streamTokenizer0.toString());
      assertEquals(1, streamTokenizer0.lineno());
      assertTrue(jSTerm0.isConstant());
      assertFalse(jSTerm0.isEmpty());
      assertEquals(1, jSTerm0.size());
      assertEquals(10, jSTerm0.capacity());
      assertFalse(jSTerm0.isFunction());
      assertFalse(jSTerm0.isEval());
      assertFalse(jSTerm0.isVariable());
      assertEquals("[jFxA%Rdj8%]", jSTerm0.toString());
      assertEquals(0, jSSubstitution1.size());
      assertEquals("[]", jSSubstitution1.toString());
      assertEquals(10, jSSubstitution1.capacity());
      assertFalse(jSSubstitution1.fail());
      assertTrue(jSSubstitution1.isEmpty());
      assertFalse(jSTerm1.isVariable());
      assertEquals(10, jSTerm1.capacity());
      assertFalse(jSTerm1.isFunction());
      assertFalse(jSTerm1.isEval());
      assertEquals(1, jSTerm1.size());
      assertFalse(jSTerm1.isEmpty());
      assertEquals("[jFxA%Rdj8%]", jSTerm1.toString());
      assertTrue(jSTerm1.isConstant());
      assertSame(jSTerm0, jSTerm1);
      assertNotSame(jSSubstitution1, jSSubstitution2);
      assertNotSame(jSSubstitution1, jSSubstitution0);
      assertSame(jSTerm1, jSTerm0);
      assertNotNull(stream0);
      assertTrue(jSSubstitution1.equals((Object)jSSubstitution0));
      assertTrue(jSSubstitution1.equals((Object)jSSubstitution2));
      assertEquals(0.0, streamTokenizer0.nval, 0.01);
      assertEquals(32, streamTokenizer0.ttype);
      
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      jSTerm1.forEach(consumer0);
      assertEquals("Token[' '], line 1", streamTokenizer0.toString());
      assertEquals(1, streamTokenizer0.lineno());
      assertTrue(jSTerm0.isConstant());
      assertFalse(jSTerm0.isEmpty());
      assertEquals(1, jSTerm0.size());
      assertEquals(10, jSTerm0.capacity());
      assertFalse(jSTerm0.isFunction());
      assertFalse(jSTerm0.isEval());
      assertFalse(jSTerm0.isVariable());
      assertEquals("[jFxA%Rdj8%]", jSTerm0.toString());
      assertEquals(0, jSSubstitution1.size());
      assertEquals("[]", jSSubstitution1.toString());
      assertEquals(10, jSSubstitution1.capacity());
      assertFalse(jSSubstitution1.fail());
      assertTrue(jSSubstitution1.isEmpty());
      assertFalse(jSTerm1.isVariable());
      assertEquals(10, jSTerm1.capacity());
      assertFalse(jSTerm1.isFunction());
      assertFalse(jSTerm1.isEval());
      assertEquals(1, jSTerm1.size());
      assertFalse(jSTerm1.isEmpty());
      assertEquals("[jFxA%Rdj8%]", jSTerm1.toString());
      assertTrue(jSTerm1.isConstant());
      assertSame(jSTerm0, jSTerm1);
      assertNotSame(jSSubstitution1, jSSubstitution2);
      assertNotSame(jSSubstitution1, jSSubstitution0);
      assertSame(jSTerm1, jSTerm0);
      assertTrue(jSSubstitution1.equals((Object)jSSubstitution0));
      assertTrue(jSSubstitution1.equals((Object)jSSubstitution2));
      assertEquals(0.0, streamTokenizer0.nval, 0.01);
      assertEquals(32, streamTokenizer0.ttype);
      
      StringReader stringReader1 = new StringReader(";UETu2I");
      assertNotNull(stringReader1);
      assertFalse(stringReader1.equals((Object)stringReader0));
      
      boolean boolean0 = stringReader1.markSupported();
      assertTrue(boolean0);
      assertNotSame(stringReader1, stringReader0);
      assertFalse(stringReader1.equals((Object)stringReader0));
      
      JSTerm jSTerm2 = new JSTerm(streamTokenizer0);
      assertEquals("Token[' '], line 1", streamTokenizer0.toString());
      assertEquals(1, streamTokenizer0.lineno());
      assertFalse(jSTerm2.isVariable());
      assertFalse(jSTerm2.isFunction());
      assertFalse(jSTerm2.isEval());
      assertEquals(1, jSTerm2.size());
      assertEquals(10, jSTerm2.capacity());
      assertFalse(jSTerm2.isEmpty());
      assertTrue(jSTerm2.isConstant());
      assertEquals("[jSYG>]", jSTerm2.toString());
      assertNotNull(jSTerm2);
      assertFalse(stringReader0.equals((Object)stringReader1));
      assertFalse(jSTerm2.equals((Object)jSTerm1));
      assertFalse(jSTerm2.equals((Object)jSTerm0));
      assertEquals(0.0, streamTokenizer0.nval, 0.01);
      assertEquals(32, streamTokenizer0.ttype);
      
      boolean boolean1 = jSTerm1.equals(jSTerm2);
      assertEquals("Token[' '], line 1", streamTokenizer0.toString());
      assertEquals(1, streamTokenizer0.lineno());
      assertTrue(jSTerm0.isConstant());
      assertFalse(jSTerm0.isEmpty());
      assertEquals(1, jSTerm0.size());
      assertEquals(10, jSTerm0.capacity());
      assertFalse(jSTerm0.isFunction());
      assertFalse(jSTerm0.isEval());
      assertFalse(jSTerm0.isVariable());
      assertEquals("[jFxA%Rdj8%]", jSTerm0.toString());
      assertEquals(0, jSSubstitution1.size());
      assertEquals("[]", jSSubstitution1.toString());
      assertEquals(10, jSSubstitution1.capacity());
      assertFalse(jSSubstitution1.fail());
      assertTrue(jSSubstitution1.isEmpty());
      assertFalse(jSTerm1.isVariable());
      assertEquals(10, jSTerm1.capacity());
      assertFalse(jSTerm1.isFunction());
      assertFalse(jSTerm1.isEval());
      assertEquals(1, jSTerm1.size());
      assertFalse(jSTerm1.isEmpty());
      assertEquals("[jFxA%Rdj8%]", jSTerm1.toString());
      assertTrue(jSTerm1.isConstant());
      assertFalse(jSTerm2.isVariable());
      assertFalse(jSTerm2.isFunction());
      assertFalse(jSTerm2.isEval());
      assertEquals(1, jSTerm2.size());
      assertEquals(10, jSTerm2.capacity());
      assertFalse(jSTerm2.isEmpty());
      assertTrue(jSTerm2.isConstant());
      assertEquals("[jSYG>]", jSTerm2.toString());
      assertFalse(boolean1);
      assertNotSame(stringReader0, stringReader1);
      assertNotSame(jSTerm0, jSTerm2);
      assertSame(jSTerm0, jSTerm1);
      assertNotSame(jSSubstitution1, jSSubstitution2);
      assertNotSame(jSSubstitution1, jSSubstitution0);
      assertSame(jSTerm1, jSTerm0);
      assertNotSame(jSTerm1, jSTerm2);
      assertNotSame(jSTerm2, jSTerm1);
      assertNotSame(jSTerm2, jSTerm0);
      assertFalse(boolean1 == boolean0);
      assertFalse(stringReader0.equals((Object)stringReader1));
      assertFalse(jSTerm0.equals((Object)jSTerm2));
      assertTrue(jSSubstitution1.equals((Object)jSSubstitution0));
      assertTrue(jSSubstitution1.equals((Object)jSSubstitution2));
      assertFalse(jSTerm1.equals((Object)jSTerm2));
      assertFalse(jSTerm2.equals((Object)jSTerm1));
      assertFalse(jSTerm2.equals((Object)jSTerm0));
      assertEquals(0.0, streamTokenizer0.nval, 0.01);
      assertEquals(32, streamTokenizer0.ttype);
      
      JSSubstitution jSSubstitution3 = jSTerm1.matches(jSTerm0, jSSubstitution2);
      assertEquals("[]", jSSubstitution3.toString());
      assertTrue(jSSubstitution3.isEmpty());
      assertFalse(jSSubstitution3.fail());
      assertEquals(10, jSSubstitution3.capacity());
      assertEquals(0, jSSubstitution3.size());
      assertEquals("Token[' '], line 1", streamTokenizer0.toString());
      assertEquals(1, streamTokenizer0.lineno());
      assertTrue(jSTerm0.isConstant());
      assertFalse(jSTerm0.isEmpty());
      assertEquals(1, jSTerm0.size());
      assertEquals(10, jSTerm0.capacity());
      assertFalse(jSTerm0.isFunction());
      assertFalse(jSTerm0.isEval());
      assertFalse(jSTerm0.isVariable());
      assertEquals("[jFxA%Rdj8%]", jSTerm0.toString());
      assertEquals(0, jSSubstitution1.size());
      assertEquals("[]", jSSubstitution1.toString());
      assertEquals(10, jSSubstitution1.capacity());
      assertFalse(jSSubstitution1.fail());
      assertTrue(jSSubstitution1.isEmpty());
      assertFalse(jSTerm1.isVariable());
      assertEquals(10, jSTerm1.capacity());
      assertFalse(jSTerm1.isFunction());
      assertFalse(jSTerm1.isEval());
      assertEquals(1, jSTerm1.size());
      assertFalse(jSTerm1.isEmpty());
      assertEquals("[jFxA%Rdj8%]", jSTerm1.toString());
      assertTrue(jSTerm1.isConstant());
      assertEquals(0, jSSubstitution2.capacity());
      assertFalse(jSSubstitution2.fail());
      assertEquals("[]", jSSubstitution2.toString());
      assertEquals(0, jSSubstitution2.size());
      assertTrue(jSSubstitution2.isEmpty());
      assertNotSame(jSSubstitution3, jSSubstitution0);
      assertNotSame(jSSubstitution3, jSSubstitution2);
      assertNotSame(jSSubstitution3, jSSubstitution1);
      assertNotSame(stringReader0, stringReader1);
      assertNotSame(jSTerm0, jSTerm2);
      assertSame(jSTerm0, jSTerm1);
      assertNotSame(jSSubstitution1, jSSubstitution2);
      assertNotSame(jSSubstitution1, jSSubstitution3);
      assertNotSame(jSSubstitution1, jSSubstitution0);
      assertSame(jSTerm1, jSTerm0);
      assertNotSame(jSTerm1, jSTerm2);
      assertNotSame(jSSubstitution2, jSSubstitution3);
      assertNotSame(jSSubstitution2, jSSubstitution1);
      assertNotSame(jSSubstitution2, jSSubstitution0);
      assertNotNull(jSSubstitution3);
      assertTrue(jSSubstitution3.equals((Object)jSSubstitution0));
      assertTrue(jSSubstitution3.equals((Object)jSSubstitution2));
      assertTrue(jSSubstitution3.equals((Object)jSSubstitution1));
      assertFalse(stringReader0.equals((Object)stringReader1));
      assertFalse(jSTerm0.equals((Object)jSTerm2));
      assertTrue(jSSubstitution1.equals((Object)jSSubstitution0));
      assertTrue(jSSubstitution1.equals((Object)jSSubstitution2));
      assertFalse(jSTerm1.equals((Object)jSTerm2));
      assertTrue(jSSubstitution2.equals((Object)jSSubstitution0));
      assertTrue(jSSubstitution2.equals((Object)jSSubstitution1));
      assertEquals(0.0, streamTokenizer0.nval, 0.01);
      assertEquals(32, streamTokenizer0.ttype);
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      assertEquals("[]", jSSubstitution0.toString());
      assertTrue(jSSubstitution0.isEmpty());
      assertFalse(jSSubstitution0.fail());
      assertEquals(10, jSSubstitution0.capacity());
      assertEquals(0, jSSubstitution0.size());
      assertNotNull(jSSubstitution0);
      
      StringReader stringReader0 = new StringReader("jFxA%Rdj8% jSYG> MR");
      assertNotNull(stringReader0);
      
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      assertEquals(1, streamTokenizer0.lineno());
      assertEquals("Token[NOTHING], line 1", streamTokenizer0.toString());
      assertNotNull(streamTokenizer0);
      assertEquals(0.0, streamTokenizer0.nval, 0.01);
      assertEquals((-4), streamTokenizer0.ttype);
      
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      assertEquals(1, streamTokenizer0.lineno());
      assertEquals("Token[' '], line 1", streamTokenizer0.toString());
      assertEquals(1, jSTerm0.size());
      assertFalse(jSTerm0.isFunction());
      assertFalse(jSTerm0.isVariable());
      assertEquals(10, jSTerm0.capacity());
      assertEquals("[jFxA%Rdj8%]", jSTerm0.toString());
      assertTrue(jSTerm0.isConstant());
      assertFalse(jSTerm0.isEmpty());
      assertFalse(jSTerm0.isEval());
      assertNotNull(jSTerm0);
      assertEquals(0.0, streamTokenizer0.nval, 0.01);
      assertEquals(32, streamTokenizer0.ttype);
      
      JSTerm jSTerm1 = jSSubstitution0.instance(jSTerm0);
      assertEquals("[]", jSSubstitution0.toString());
      assertTrue(jSSubstitution0.isEmpty());
      assertFalse(jSSubstitution0.fail());
      assertEquals(10, jSSubstitution0.capacity());
      assertEquals(0, jSSubstitution0.size());
      assertEquals(1, streamTokenizer0.lineno());
      assertEquals("Token[' '], line 1", streamTokenizer0.toString());
      assertEquals(1, jSTerm0.size());
      assertFalse(jSTerm0.isFunction());
      assertFalse(jSTerm0.isVariable());
      assertEquals(10, jSTerm0.capacity());
      assertEquals("[jFxA%Rdj8%]", jSTerm0.toString());
      assertTrue(jSTerm0.isConstant());
      assertFalse(jSTerm0.isEmpty());
      assertFalse(jSTerm0.isEval());
      assertFalse(jSTerm1.isFunction());
      assertEquals(10, jSTerm1.capacity());
      assertFalse(jSTerm1.isVariable());
      assertEquals("[jFxA%Rdj8%]", jSTerm1.toString());
      assertTrue(jSTerm1.isConstant());
      assertFalse(jSTerm1.isEmpty());
      assertFalse(jSTerm1.isEval());
      assertEquals(1, jSTerm1.size());
      assertSame(jSTerm0, jSTerm1);
      assertSame(jSTerm1, jSTerm0);
      assertNotNull(jSTerm1);
      assertEquals(0.0, streamTokenizer0.nval, 0.01);
      assertEquals(32, streamTokenizer0.ttype);
      
      JSTerm jSTerm2 = (JSTerm)jSTerm1.clone();
      assertEquals("[]", jSSubstitution0.toString());
      assertTrue(jSSubstitution0.isEmpty());
      assertFalse(jSSubstitution0.fail());
      assertEquals(10, jSSubstitution0.capacity());
      assertEquals(0, jSSubstitution0.size());
      assertEquals(1, streamTokenizer0.lineno());
      assertEquals("Token[' '], line 1", streamTokenizer0.toString());
      assertEquals(1, jSTerm0.size());
      assertFalse(jSTerm0.isFunction());
      assertFalse(jSTerm0.isVariable());
      assertEquals(10, jSTerm0.capacity());
      assertEquals("[jFxA%Rdj8%]", jSTerm0.toString());
      assertTrue(jSTerm0.isConstant());
      assertFalse(jSTerm0.isEmpty());
      assertFalse(jSTerm0.isEval());
      assertFalse(jSTerm1.isFunction());
      assertEquals(10, jSTerm1.capacity());
      assertFalse(jSTerm1.isVariable());
      assertEquals("[jFxA%Rdj8%]", jSTerm1.toString());
      assertTrue(jSTerm1.isConstant());
      assertFalse(jSTerm1.isEmpty());
      assertFalse(jSTerm1.isEval());
      assertEquals(1, jSTerm1.size());
      assertEquals(1, jSTerm2.capacity());
      assertTrue(jSTerm2.isConstant());
      assertEquals("[jFxA%Rdj8%]", jSTerm2.toString());
      assertFalse(jSTerm2.isVariable());
      assertFalse(jSTerm2.isFunction());
      assertFalse(jSTerm2.isEval());
      assertEquals(1, jSTerm2.size());
      assertFalse(jSTerm2.isEmpty());
      assertSame(jSTerm0, jSTerm1);
      assertNotSame(jSTerm0, jSTerm2);
      assertSame(jSTerm1, jSTerm0);
      assertNotSame(jSTerm1, jSTerm2);
      assertNotSame(jSTerm2, jSTerm1);
      assertNotSame(jSTerm2, jSTerm0);
      assertNotNull(jSTerm2);
      assertTrue(jSTerm2.equals((Object)jSTerm0));
      assertTrue(jSTerm2.equals((Object)jSTerm1));
      assertEquals(0.0, streamTokenizer0.nval, 0.01);
      assertEquals(32, streamTokenizer0.ttype);
      
      boolean boolean0 = jSTerm0.add((Object) jSTerm2);
      assertEquals("[]", jSSubstitution0.toString());
      assertTrue(jSSubstitution0.isEmpty());
      assertFalse(jSSubstitution0.fail());
      assertEquals(10, jSSubstitution0.capacity());
      assertEquals(0, jSSubstitution0.size());
      assertEquals(1, streamTokenizer0.lineno());
      assertEquals("Token[' '], line 1", streamTokenizer0.toString());
      assertEquals(2, jSTerm0.size());
      assertFalse(jSTerm0.isFunction());
      assertFalse(jSTerm0.isVariable());
      assertEquals(10, jSTerm0.capacity());
      assertEquals("[jFxA%Rdj8%, [jFxA%Rdj8%]]", jSTerm0.toString());
      assertTrue(jSTerm0.isConstant());
      assertFalse(jSTerm0.isEmpty());
      assertFalse(jSTerm0.isEval());
      assertEquals("[jFxA%Rdj8%, [jFxA%Rdj8%]]", jSTerm1.toString());
      assertFalse(jSTerm1.isFunction());
      assertEquals(2, jSTerm1.size());
      assertEquals(10, jSTerm1.capacity());
      assertFalse(jSTerm1.isVariable());
      assertTrue(jSTerm1.isConstant());
      assertFalse(jSTerm1.isEmpty());
      assertFalse(jSTerm1.isEval());
      assertEquals(1, jSTerm2.capacity());
      assertTrue(jSTerm2.isConstant());
      assertEquals("[jFxA%Rdj8%]", jSTerm2.toString());
      assertFalse(jSTerm2.isVariable());
      assertFalse(jSTerm2.isFunction());
      assertFalse(jSTerm2.isEval());
      assertEquals(1, jSTerm2.size());
      assertFalse(jSTerm2.isEmpty());
      assertTrue(boolean0);
      assertSame(jSTerm0, jSTerm1);
      assertNotSame(jSTerm0, jSTerm2);
      assertSame(jSTerm1, jSTerm0);
      assertNotSame(jSTerm1, jSTerm2);
      assertNotSame(jSTerm2, jSTerm1);
      assertNotSame(jSTerm2, jSTerm0);
      assertFalse(jSTerm0.equals((Object)jSTerm2));
      assertFalse(jSTerm1.equals((Object)jSTerm2));
      assertFalse(jSTerm2.equals((Object)jSTerm1));
      assertFalse(jSTerm2.equals((Object)jSTerm0));
      assertEquals(0.0, streamTokenizer0.nval, 0.01);
      assertEquals(32, streamTokenizer0.ttype);
      
      jSTerm0.makeEval(true);
      assertEquals(1, streamTokenizer0.lineno());
      assertEquals("Token[' '], line 1", streamTokenizer0.toString());
      assertEquals(2, jSTerm0.size());
      assertFalse(jSTerm0.isFunction());
      assertFalse(jSTerm0.isVariable());
      assertEquals(10, jSTerm0.capacity());
      assertEquals("[jFxA%Rdj8%, [jFxA%Rdj8%]]", jSTerm0.toString());
      assertTrue(jSTerm0.isEval());
      assertTrue(jSTerm0.isConstant());
      assertFalse(jSTerm0.isEmpty());
      assertSame(jSTerm0, jSTerm1);
      assertNotSame(jSTerm0, jSTerm2);
      assertFalse(jSTerm0.equals((Object)jSTerm2));
      assertEquals(0.0, streamTokenizer0.nval, 0.01);
      assertEquals(32, streamTokenizer0.ttype);
      
      jSTerm0.makeFunction();
      assertEquals(1, streamTokenizer0.lineno());
      assertEquals("Token[' '], line 1", streamTokenizer0.toString());
      assertEquals(2, jSTerm0.size());
      assertFalse(jSTerm0.isVariable());
      assertEquals(10, jSTerm0.capacity());
      assertEquals("[jFxA%Rdj8%, [jFxA%Rdj8%]]", jSTerm0.toString());
      assertTrue(jSTerm0.isEval());
      assertFalse(jSTerm0.isConstant());
      assertFalse(jSTerm0.isEmpty());
      assertTrue(jSTerm0.isFunction());
      assertSame(jSTerm0, jSTerm1);
      assertNotSame(jSTerm0, jSTerm2);
      assertFalse(jSTerm0.equals((Object)jSTerm2));
      assertEquals(0.0, streamTokenizer0.nval, 0.01);
      assertEquals(32, streamTokenizer0.ttype);
      
      // Undeclared exception!
      try { 
        jSTerm0.call();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 2 >= 2
         //
         verifyException("java.util.Vector", e);
      }
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      StringReader stringReader0 = new StringReader("jFxA%Rdj8% jSYG> MR");
      assertNotNull(stringReader0);
      
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      assertEquals("Token[NOTHING], line 1", streamTokenizer0.toString());
      assertEquals(1, streamTokenizer0.lineno());
      assertNotNull(streamTokenizer0);
      assertEquals(0.0, streamTokenizer0.nval, 0.01);
      assertEquals((-4), streamTokenizer0.ttype);
      
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      assertEquals(1, streamTokenizer0.lineno());
      assertEquals("Token[' '], line 1", streamTokenizer0.toString());
      assertEquals("[jFxA%Rdj8%]", jSTerm0.toString());
      assertEquals(10, jSTerm0.capacity());
      assertFalse(jSTerm0.isFunction());
      assertEquals(1, jSTerm0.size());
      assertFalse(jSTerm0.isEmpty());
      assertFalse(jSTerm0.isEval());
      assertFalse(jSTerm0.isVariable());
      assertTrue(jSTerm0.isConstant());
      assertNotNull(jSTerm0);
      assertEquals(0.0, streamTokenizer0.nval, 0.01);
      assertEquals(32, streamTokenizer0.ttype);
      
      jSTerm0.makeFunction();
      assertEquals(1, streamTokenizer0.lineno());
      assertEquals("Token[' '], line 1", streamTokenizer0.toString());
      assertEquals("[jFxA%Rdj8%]", jSTerm0.toString());
      assertEquals(10, jSTerm0.capacity());
      assertEquals(1, jSTerm0.size());
      assertFalse(jSTerm0.isEmpty());
      assertFalse(jSTerm0.isConstant());
      assertTrue(jSTerm0.isFunction());
      assertFalse(jSTerm0.isEval());
      assertFalse(jSTerm0.isVariable());
      assertEquals(0.0, streamTokenizer0.nval, 0.01);
      assertEquals(32, streamTokenizer0.ttype);
      
      JSTerm jSTerm1 = jSTerm0.standardizerTerm();
      assertEquals(1, streamTokenizer0.lineno());
      assertEquals("Token[' '], line 1", streamTokenizer0.toString());
      assertEquals("[jFxA%Rdj8%]", jSTerm0.toString());
      assertEquals(10, jSTerm0.capacity());
      assertEquals(1, jSTerm0.size());
      assertFalse(jSTerm0.isEmpty());
      assertFalse(jSTerm0.isConstant());
      assertTrue(jSTerm0.isFunction());
      assertFalse(jSTerm0.isEval());
      assertFalse(jSTerm0.isVariable());
      assertTrue(jSTerm1.isFunction());
      assertFalse(jSTerm1.isEmpty());
      assertFalse(jSTerm1.isConstant());
      assertEquals("[jFxA%Rdj8%]", jSTerm1.toString());
      assertFalse(jSTerm1.isVariable());
      assertEquals(10, jSTerm1.capacity());
      assertEquals(1, jSTerm1.size());
      assertFalse(jSTerm1.isEval());
      assertNotSame(jSTerm0, jSTerm1);
      assertNotSame(jSTerm1, jSTerm0);
      assertNotNull(jSTerm1);
      assertTrue(jSTerm1.equals((Object)jSTerm0));
      assertEquals(0.0, streamTokenizer0.nval, 0.01);
      assertEquals(32, streamTokenizer0.ttype);
      
      JSTerm jSTerm2 = jSTerm1.call();
      assertEquals(1, streamTokenizer0.lineno());
      assertEquals("Token[' '], line 1", streamTokenizer0.toString());
      assertEquals("[jFxA%Rdj8%]", jSTerm0.toString());
      assertEquals(10, jSTerm0.capacity());
      assertEquals(1, jSTerm0.size());
      assertFalse(jSTerm0.isEmpty());
      assertFalse(jSTerm0.isConstant());
      assertTrue(jSTerm0.isFunction());
      assertFalse(jSTerm0.isEval());
      assertFalse(jSTerm0.isVariable());
      assertTrue(jSTerm1.isFunction());
      assertFalse(jSTerm1.isEmpty());
      assertFalse(jSTerm1.isConstant());
      assertEquals("[jFxA%Rdj8%]", jSTerm1.toString());
      assertFalse(jSTerm1.isVariable());
      assertEquals(10, jSTerm1.capacity());
      assertEquals(1, jSTerm1.size());
      assertFalse(jSTerm1.isEval());
      assertFalse(jSTerm2.isEmpty());
      assertTrue(jSTerm2.isFunction());
      assertFalse(jSTerm2.isConstant());
      assertEquals(10, jSTerm2.capacity());
      assertFalse(jSTerm2.isVariable());
      assertFalse(jSTerm2.isEval());
      assertEquals(1, jSTerm2.size());
      assertEquals("[jFxA%Rdj8%]", jSTerm2.toString());
      assertNotSame(jSTerm0, jSTerm2);
      assertNotSame(jSTerm0, jSTerm1);
      assertNotSame(jSTerm1, jSTerm0);
      assertNotSame(jSTerm1, jSTerm2);
      assertNotSame(jSTerm2, jSTerm1);
      assertNotSame(jSTerm2, jSTerm0);
      assertNotNull(jSTerm2);
      assertTrue(jSTerm0.equals((Object)jSTerm1));
      assertTrue(jSTerm1.equals((Object)jSTerm0));
      assertTrue(jSTerm2.equals((Object)jSTerm0));
      assertTrue(jSTerm2.equals((Object)jSTerm1));
      assertEquals(0.0, streamTokenizer0.nval, 0.01);
      assertEquals(32, streamTokenizer0.ttype);
      
      JSTerm jSTerm3 = new JSTerm(streamTokenizer0);
      assertEquals(1, streamTokenizer0.lineno());
      assertEquals("Token[' '], line 1", streamTokenizer0.toString());
      assertEquals(1, jSTerm3.size());
      assertFalse(jSTerm3.isFunction());
      assertFalse(jSTerm3.isEval());
      assertFalse(jSTerm3.isVariable());
      assertEquals("[jSYG>]", jSTerm3.toString());
      assertTrue(jSTerm3.isConstant());
      assertFalse(jSTerm3.isEmpty());
      assertEquals(10, jSTerm3.capacity());
      assertNotNull(jSTerm3);
      assertFalse(jSTerm3.equals((Object)jSTerm0));
      assertFalse(jSTerm3.equals((Object)jSTerm2));
      assertFalse(jSTerm3.equals((Object)jSTerm1));
      assertEquals(0.0, streamTokenizer0.nval, 0.01);
      assertEquals(32, streamTokenizer0.ttype);
      
      JSTerm jSTerm4 = jSTerm2.cloneT();
      assertEquals(1, streamTokenizer0.lineno());
      assertEquals("Token[' '], line 1", streamTokenizer0.toString());
      assertEquals("[jFxA%Rdj8%]", jSTerm0.toString());
      assertEquals(10, jSTerm0.capacity());
      assertEquals(1, jSTerm0.size());
      assertFalse(jSTerm0.isEmpty());
      assertFalse(jSTerm0.isConstant());
      assertTrue(jSTerm0.isFunction());
      assertFalse(jSTerm0.isEval());
      assertFalse(jSTerm0.isVariable());
      assertTrue(jSTerm1.isFunction());
      assertFalse(jSTerm1.isEmpty());
      assertFalse(jSTerm1.isConstant());
      assertEquals("[jFxA%Rdj8%]", jSTerm1.toString());
      assertFalse(jSTerm1.isVariable());
      assertEquals(10, jSTerm1.capacity());
      assertEquals(1, jSTerm1.size());
      assertFalse(jSTerm1.isEval());
      assertFalse(jSTerm2.isEmpty());
      assertTrue(jSTerm2.isFunction());
      assertFalse(jSTerm2.isConstant());
      assertEquals(10, jSTerm2.capacity());
      assertFalse(jSTerm2.isVariable());
      assertFalse(jSTerm2.isEval());
      assertEquals(1, jSTerm2.size());
      assertEquals("[jFxA%Rdj8%]", jSTerm2.toString());
      assertFalse(jSTerm4.isEval());
      assertEquals(1, jSTerm4.size());
      assertEquals(10, jSTerm4.capacity());
      assertFalse(jSTerm4.isVariable());
      assertEquals("[jFxA%Rdj8%]", jSTerm4.toString());
      assertFalse(jSTerm4.isEmpty());
      assertTrue(jSTerm4.isFunction());
      assertFalse(jSTerm4.isConstant());
      assertNotSame(jSTerm0, jSTerm2);
      assertNotSame(jSTerm0, jSTerm3);
      assertNotSame(jSTerm0, jSTerm1);
      assertNotSame(jSTerm0, jSTerm4);
      assertNotSame(jSTerm1, jSTerm4);
      assertNotSame(jSTerm1, jSTerm0);
      assertNotSame(jSTerm1, jSTerm3);
      assertNotSame(jSTerm1, jSTerm2);
      assertNotSame(jSTerm2, jSTerm1);
      assertNotSame(jSTerm2, jSTerm4);
      assertNotSame(jSTerm2, jSTerm3);
      assertNotSame(jSTerm2, jSTerm0);
      assertNotSame(jSTerm4, jSTerm3);
      assertNotSame(jSTerm4, jSTerm2);
      assertNotSame(jSTerm4, jSTerm0);
      assertNotSame(jSTerm4, jSTerm1);
      assertNotNull(jSTerm4);
      assertTrue(jSTerm0.equals((Object)jSTerm1));
      assertFalse(jSTerm0.equals((Object)jSTerm3));
      assertTrue(jSTerm0.equals((Object)jSTerm2));
      assertTrue(jSTerm1.equals((Object)jSTerm2));
      assertTrue(jSTerm1.equals((Object)jSTerm0));
      assertFalse(jSTerm1.equals((Object)jSTerm3));
      assertTrue(jSTerm2.equals((Object)jSTerm0));
      assertFalse(jSTerm2.equals((Object)jSTerm3));
      assertTrue(jSTerm2.equals((Object)jSTerm1));
      assertFalse(jSTerm4.equals((Object)jSTerm3));
      assertTrue(jSTerm4.equals((Object)jSTerm2));
      assertTrue(jSTerm4.equals((Object)jSTerm1));
      assertTrue(jSTerm4.equals((Object)jSTerm0));
      assertEquals(0.0, streamTokenizer0.nval, 0.01);
      assertEquals(32, streamTokenizer0.ttype);
      
      streamTokenizer0.nval = 0.0;
      assertEquals(1, streamTokenizer0.lineno());
      assertEquals("Token[' '], line 1", streamTokenizer0.toString());
      
      boolean boolean0 = jSTerm4.equals(jSTerm1);
      assertEquals(1, streamTokenizer0.lineno());
      assertEquals("Token[' '], line 1", streamTokenizer0.toString());
      assertEquals("[jFxA%Rdj8%]", jSTerm0.toString());
      assertEquals(10, jSTerm0.capacity());
      assertEquals(1, jSTerm0.size());
      assertFalse(jSTerm0.isEmpty());
      assertFalse(jSTerm0.isConstant());
      assertTrue(jSTerm0.isFunction());
      assertFalse(jSTerm0.isEval());
      assertFalse(jSTerm0.isVariable());
      assertTrue(jSTerm1.isFunction());
      assertFalse(jSTerm1.isEmpty());
      assertFalse(jSTerm1.isConstant());
      assertEquals("[jFxA%Rdj8%]", jSTerm1.toString());
      assertFalse(jSTerm1.isVariable());
      assertEquals(10, jSTerm1.capacity());
      assertEquals(1, jSTerm1.size());
      assertFalse(jSTerm1.isEval());
      assertFalse(jSTerm2.isEmpty());
      assertTrue(jSTerm2.isFunction());
      assertFalse(jSTerm2.isConstant());
      assertEquals(10, jSTerm2.capacity());
      assertFalse(jSTerm2.isVariable());
      assertFalse(jSTerm2.isEval());
      assertEquals(1, jSTerm2.size());
      assertEquals("[jFxA%Rdj8%]", jSTerm2.toString());
      assertFalse(jSTerm4.isEval());
      assertEquals(1, jSTerm4.size());
      assertEquals(10, jSTerm4.capacity());
      assertFalse(jSTerm4.isVariable());
      assertEquals("[jFxA%Rdj8%]", jSTerm4.toString());
      assertFalse(jSTerm4.isEmpty());
      assertTrue(jSTerm4.isFunction());
      assertFalse(jSTerm4.isConstant());
      assertTrue(boolean0);
      assertNotSame(jSTerm0, jSTerm2);
      assertNotSame(jSTerm0, jSTerm3);
      assertNotSame(jSTerm0, jSTerm1);
      assertNotSame(jSTerm0, jSTerm4);
      assertNotSame(jSTerm1, jSTerm4);
      assertNotSame(jSTerm1, jSTerm0);
      assertNotSame(jSTerm1, jSTerm3);
      assertNotSame(jSTerm1, jSTerm2);
      assertNotSame(jSTerm2, jSTerm1);
      assertNotSame(jSTerm2, jSTerm4);
      assertNotSame(jSTerm2, jSTerm3);
      assertNotSame(jSTerm2, jSTerm0);
      assertNotSame(jSTerm4, jSTerm3);
      assertNotSame(jSTerm4, jSTerm2);
      assertNotSame(jSTerm4, jSTerm0);
      assertNotSame(jSTerm4, jSTerm1);
      assertTrue(jSTerm0.equals((Object)jSTerm1));
      assertFalse(jSTerm0.equals((Object)jSTerm3));
      assertTrue(jSTerm0.equals((Object)jSTerm4));
      assertTrue(jSTerm0.equals((Object)jSTerm2));
      assertTrue(jSTerm1.equals((Object)jSTerm2));
      assertTrue(jSTerm1.equals((Object)jSTerm0));
      assertFalse(jSTerm1.equals((Object)jSTerm3));
      assertTrue(jSTerm1.equals((Object)jSTerm4));
      assertTrue(jSTerm2.equals((Object)jSTerm4));
      assertTrue(jSTerm2.equals((Object)jSTerm0));
      assertFalse(jSTerm2.equals((Object)jSTerm3));
      assertTrue(jSTerm2.equals((Object)jSTerm1));
      assertFalse(jSTerm4.equals((Object)jSTerm3));
      assertTrue(jSTerm4.equals((Object)jSTerm2));
      assertTrue(jSTerm4.equals((Object)jSTerm1));
      assertTrue(jSTerm4.equals((Object)jSTerm0));
      assertEquals(0.0, streamTokenizer0.nval, 0.01);
      assertEquals(32, streamTokenizer0.ttype);
      
      JSSubstitution jSSubstitution0 = jSTerm2.matches(jSTerm4);
      assertEquals(1, streamTokenizer0.lineno());
      assertEquals("Token[' '], line 1", streamTokenizer0.toString());
      assertEquals("[jFxA%Rdj8%]", jSTerm0.toString());
      assertEquals(10, jSTerm0.capacity());
      assertEquals(1, jSTerm0.size());
      assertFalse(jSTerm0.isEmpty());
      assertFalse(jSTerm0.isConstant());
      assertTrue(jSTerm0.isFunction());
      assertFalse(jSTerm0.isEval());
      assertFalse(jSTerm0.isVariable());
      assertTrue(jSTerm1.isFunction());
      assertFalse(jSTerm1.isEmpty());
      assertFalse(jSTerm1.isConstant());
      assertEquals("[jFxA%Rdj8%]", jSTerm1.toString());
      assertFalse(jSTerm1.isVariable());
      assertEquals(10, jSTerm1.capacity());
      assertEquals(1, jSTerm1.size());
      assertFalse(jSTerm1.isEval());
      assertFalse(jSTerm2.isEmpty());
      assertTrue(jSTerm2.isFunction());
      assertFalse(jSTerm2.isConstant());
      assertEquals(10, jSTerm2.capacity());
      assertFalse(jSTerm2.isVariable());
      assertFalse(jSTerm2.isEval());
      assertEquals(1, jSTerm2.size());
      assertEquals("[jFxA%Rdj8%]", jSTerm2.toString());
      assertFalse(jSTerm4.isEval());
      assertEquals(1, jSTerm4.size());
      assertEquals(10, jSTerm4.capacity());
      assertFalse(jSTerm4.isVariable());
      assertEquals("[jFxA%Rdj8%]", jSTerm4.toString());
      assertFalse(jSTerm4.isEmpty());
      assertTrue(jSTerm4.isFunction());
      assertFalse(jSTerm4.isConstant());
      assertFalse(jSSubstitution0.fail());
      assertTrue(jSSubstitution0.isEmpty());
      assertEquals(0, jSSubstitution0.size());
      assertEquals("[]", jSSubstitution0.toString());
      assertEquals(10, jSSubstitution0.capacity());
      assertNotSame(jSTerm0, jSTerm2);
      assertNotSame(jSTerm0, jSTerm3);
      assertNotSame(jSTerm0, jSTerm1);
      assertNotSame(jSTerm0, jSTerm4);
      assertNotSame(jSTerm1, jSTerm4);
      assertNotSame(jSTerm1, jSTerm0);
      assertNotSame(jSTerm1, jSTerm3);
      assertNotSame(jSTerm1, jSTerm2);
      assertNotSame(jSTerm2, jSTerm1);
      assertNotSame(jSTerm2, jSTerm4);
      assertNotSame(jSTerm2, jSTerm3);
      assertNotSame(jSTerm2, jSTerm0);
      assertNotSame(jSTerm4, jSTerm3);
      assertNotSame(jSTerm4, jSTerm2);
      assertNotSame(jSTerm4, jSTerm0);
      assertNotSame(jSTerm4, jSTerm1);
      assertNotNull(jSSubstitution0);
      assertTrue(jSTerm0.equals((Object)jSTerm1));
      assertFalse(jSTerm0.equals((Object)jSTerm3));
      assertTrue(jSTerm0.equals((Object)jSTerm4));
      assertTrue(jSTerm0.equals((Object)jSTerm2));
      assertTrue(jSTerm1.equals((Object)jSTerm2));
      assertTrue(jSTerm1.equals((Object)jSTerm0));
      assertFalse(jSTerm1.equals((Object)jSTerm3));
      assertTrue(jSTerm1.equals((Object)jSTerm4));
      assertTrue(jSTerm2.equals((Object)jSTerm4));
      assertTrue(jSTerm2.equals((Object)jSTerm0));
      assertFalse(jSTerm2.equals((Object)jSTerm3));
      assertTrue(jSTerm2.equals((Object)jSTerm1));
      assertFalse(jSTerm4.equals((Object)jSTerm3));
      assertTrue(jSTerm4.equals((Object)jSTerm2));
      assertTrue(jSTerm4.equals((Object)jSTerm1));
      assertTrue(jSTerm4.equals((Object)jSTerm0));
      assertEquals(0.0, streamTokenizer0.nval, 0.01);
      assertEquals(32, streamTokenizer0.ttype);
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      assertEquals(10, jSSubstitution0.capacity());
      assertTrue(jSSubstitution0.isEmpty());
      assertEquals(0, jSSubstitution0.size());
      assertEquals("[]", jSSubstitution0.toString());
      assertFalse(jSSubstitution0.fail());
      assertNotNull(jSSubstitution0);
      
      StringReader stringReader0 = new StringReader("jFxA%Rdj8% jSYG> MR");
      assertNotNull(stringReader0);
      
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      assertEquals("Token[NOTHING], line 1", streamTokenizer0.toString());
      assertEquals(1, streamTokenizer0.lineno());
      assertNotNull(streamTokenizer0);
      assertEquals((-4), streamTokenizer0.ttype);
      assertEquals(0.0, streamTokenizer0.nval, 0.01);
      
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      assertEquals("Token[' '], line 1", streamTokenizer0.toString());
      assertEquals(1, streamTokenizer0.lineno());
      assertFalse(jSTerm0.isEval());
      assertEquals(10, jSTerm0.capacity());
      assertFalse(jSTerm0.isFunction());
      assertFalse(jSTerm0.isVariable());
      assertEquals("[jFxA%Rdj8%]", jSTerm0.toString());
      assertTrue(jSTerm0.isConstant());
      assertFalse(jSTerm0.isEmpty());
      assertEquals(1, jSTerm0.size());
      assertNotNull(jSTerm0);
      assertEquals(32, streamTokenizer0.ttype);
      assertEquals(0.0, streamTokenizer0.nval, 0.01);
      
      JSTerm jSTerm1 = jSSubstitution0.instance(jSTerm0);
      assertEquals(10, jSSubstitution0.capacity());
      assertTrue(jSSubstitution0.isEmpty());
      assertEquals(0, jSSubstitution0.size());
      assertEquals("[]", jSSubstitution0.toString());
      assertFalse(jSSubstitution0.fail());
      assertEquals("Token[' '], line 1", streamTokenizer0.toString());
      assertEquals(1, streamTokenizer0.lineno());
      assertFalse(jSTerm0.isEval());
      assertEquals(10, jSTerm0.capacity());
      assertFalse(jSTerm0.isFunction());
      assertFalse(jSTerm0.isVariable());
      assertEquals("[jFxA%Rdj8%]", jSTerm0.toString());
      assertTrue(jSTerm0.isConstant());
      assertFalse(jSTerm0.isEmpty());
      assertEquals(1, jSTerm0.size());
      assertTrue(jSTerm1.isConstant());
      assertFalse(jSTerm1.isEmpty());
      assertFalse(jSTerm1.isEval());
      assertEquals(1, jSTerm1.size());
      assertFalse(jSTerm1.isVariable());
      assertFalse(jSTerm1.isFunction());
      assertEquals(10, jSTerm1.capacity());
      assertEquals("[jFxA%Rdj8%]", jSTerm1.toString());
      assertSame(jSTerm0, jSTerm1);
      assertSame(jSTerm1, jSTerm0);
      assertNotNull(jSTerm1);
      assertEquals(32, streamTokenizer0.ttype);
      assertEquals(0.0, streamTokenizer0.nval, 0.01);
      
      jSTerm0.makeVariable();
      assertEquals("Token[' '], line 1", streamTokenizer0.toString());
      assertEquals(1, streamTokenizer0.lineno());
      assertFalse(jSTerm0.isEval());
      assertEquals(10, jSTerm0.capacity());
      assertFalse(jSTerm0.isFunction());
      assertTrue(jSTerm0.isVariable());
      assertEquals("[jFxA%Rdj8%]", jSTerm0.toString());
      assertFalse(jSTerm0.isConstant());
      assertFalse(jSTerm0.isEmpty());
      assertEquals(1, jSTerm0.size());
      assertSame(jSTerm0, jSTerm1);
      assertEquals(32, streamTokenizer0.ttype);
      assertEquals(0.0, streamTokenizer0.nval, 0.01);
      
      JSTerm jSTerm2 = jSTerm1.applySubstitutionT(jSSubstitution0);
      assertEquals(10, jSSubstitution0.capacity());
      assertTrue(jSSubstitution0.isEmpty());
      assertEquals(0, jSSubstitution0.size());
      assertEquals("[]", jSSubstitution0.toString());
      assertFalse(jSSubstitution0.fail());
      assertEquals("Token[' '], line 1", streamTokenizer0.toString());
      assertEquals(1, streamTokenizer0.lineno());
      assertFalse(jSTerm0.isEval());
      assertEquals(10, jSTerm0.capacity());
      assertFalse(jSTerm0.isFunction());
      assertTrue(jSTerm0.isVariable());
      assertEquals("[jFxA%Rdj8%]", jSTerm0.toString());
      assertFalse(jSTerm0.isConstant());
      assertFalse(jSTerm0.isEmpty());
      assertEquals(1, jSTerm0.size());
      assertFalse(jSTerm1.isConstant());
      assertFalse(jSTerm1.isEmpty());
      assertFalse(jSTerm1.isEval());
      assertEquals(1, jSTerm1.size());
      assertFalse(jSTerm1.isFunction());
      assertEquals(10, jSTerm1.capacity());
      assertEquals("[jFxA%Rdj8%]", jSTerm1.toString());
      assertTrue(jSTerm1.isVariable());
      assertFalse(jSTerm2.isEval());
      assertEquals(1, jSTerm2.size());
      assertEquals(10, jSTerm2.capacity());
      assertFalse(jSTerm2.isFunction());
      assertTrue(jSTerm2.isVariable());
      assertEquals("[jFxA%Rdj8%]", jSTerm2.toString());
      assertFalse(jSTerm2.isEmpty());
      assertFalse(jSTerm2.isConstant());
      assertSame(jSTerm0, jSTerm1);
      assertNotSame(jSTerm0, jSTerm2);
      assertNotSame(jSTerm1, jSTerm2);
      assertSame(jSTerm1, jSTerm0);
      assertNotSame(jSTerm2, jSTerm0);
      assertNotSame(jSTerm2, jSTerm1);
      assertNotNull(jSTerm2);
      assertTrue(jSTerm2.equals((Object)jSTerm0));
      assertTrue(jSTerm2.equals((Object)jSTerm1));
      assertEquals(32, streamTokenizer0.ttype);
      assertEquals(0.0, streamTokenizer0.nval, 0.01);
      
      boolean boolean0 = jSTerm0.equals(jSTerm2);
      assertEquals(10, jSSubstitution0.capacity());
      assertTrue(jSSubstitution0.isEmpty());
      assertEquals(0, jSSubstitution0.size());
      assertEquals("[]", jSSubstitution0.toString());
      assertFalse(jSSubstitution0.fail());
      assertEquals("Token[' '], line 1", streamTokenizer0.toString());
      assertEquals(1, streamTokenizer0.lineno());
      assertFalse(jSTerm0.isEval());
      assertEquals(10, jSTerm0.capacity());
      assertFalse(jSTerm0.isFunction());
      assertTrue(jSTerm0.isVariable());
      assertEquals("[jFxA%Rdj8%]", jSTerm0.toString());
      assertFalse(jSTerm0.isConstant());
      assertFalse(jSTerm0.isEmpty());
      assertEquals(1, jSTerm0.size());
      assertFalse(jSTerm1.isConstant());
      assertFalse(jSTerm1.isEmpty());
      assertFalse(jSTerm1.isEval());
      assertEquals(1, jSTerm1.size());
      assertFalse(jSTerm1.isFunction());
      assertEquals(10, jSTerm1.capacity());
      assertEquals("[jFxA%Rdj8%]", jSTerm1.toString());
      assertTrue(jSTerm1.isVariable());
      assertFalse(jSTerm2.isEval());
      assertEquals(1, jSTerm2.size());
      assertEquals(10, jSTerm2.capacity());
      assertFalse(jSTerm2.isFunction());
      assertTrue(jSTerm2.isVariable());
      assertEquals("[jFxA%Rdj8%]", jSTerm2.toString());
      assertFalse(jSTerm2.isEmpty());
      assertFalse(jSTerm2.isConstant());
      assertTrue(boolean0);
      assertSame(jSTerm0, jSTerm1);
      assertNotSame(jSTerm0, jSTerm2);
      assertNotSame(jSTerm1, jSTerm2);
      assertSame(jSTerm1, jSTerm0);
      assertNotSame(jSTerm2, jSTerm0);
      assertNotSame(jSTerm2, jSTerm1);
      assertTrue(jSTerm0.equals((Object)jSTerm2));
      assertTrue(jSTerm1.equals((Object)jSTerm2));
      assertTrue(jSTerm2.equals((Object)jSTerm0));
      assertTrue(jSTerm2.equals((Object)jSTerm1));
      assertEquals(32, streamTokenizer0.ttype);
      assertEquals(0.0, streamTokenizer0.nval, 0.01);
      
      boolean boolean1 = jSTerm2.equals(jSTerm1);
      assertEquals(10, jSSubstitution0.capacity());
      assertTrue(jSSubstitution0.isEmpty());
      assertEquals(0, jSSubstitution0.size());
      assertEquals("[]", jSSubstitution0.toString());
      assertFalse(jSSubstitution0.fail());
      assertEquals("Token[' '], line 1", streamTokenizer0.toString());
      assertEquals(1, streamTokenizer0.lineno());
      assertFalse(jSTerm0.isEval());
      assertEquals(10, jSTerm0.capacity());
      assertFalse(jSTerm0.isFunction());
      assertTrue(jSTerm0.isVariable());
      assertEquals("[jFxA%Rdj8%]", jSTerm0.toString());
      assertFalse(jSTerm0.isConstant());
      assertFalse(jSTerm0.isEmpty());
      assertEquals(1, jSTerm0.size());
      assertFalse(jSTerm1.isConstant());
      assertFalse(jSTerm1.isEmpty());
      assertFalse(jSTerm1.isEval());
      assertEquals(1, jSTerm1.size());
      assertFalse(jSTerm1.isFunction());
      assertEquals(10, jSTerm1.capacity());
      assertEquals("[jFxA%Rdj8%]", jSTerm1.toString());
      assertTrue(jSTerm1.isVariable());
      assertFalse(jSTerm2.isEval());
      assertEquals(1, jSTerm2.size());
      assertEquals(10, jSTerm2.capacity());
      assertFalse(jSTerm2.isFunction());
      assertTrue(jSTerm2.isVariable());
      assertEquals("[jFxA%Rdj8%]", jSTerm2.toString());
      assertFalse(jSTerm2.isEmpty());
      assertFalse(jSTerm2.isConstant());
      assertTrue(boolean1);
      assertSame(jSTerm0, jSTerm1);
      assertNotSame(jSTerm0, jSTerm2);
      assertNotSame(jSTerm1, jSTerm2);
      assertSame(jSTerm1, jSTerm0);
      assertNotSame(jSTerm2, jSTerm0);
      assertNotSame(jSTerm2, jSTerm1);
      assertTrue(jSTerm0.equals((Object)jSTerm2));
      assertTrue(jSTerm1.equals((Object)jSTerm2));
      assertTrue(jSTerm2.equals((Object)jSTerm0));
      assertTrue(jSTerm2.equals((Object)jSTerm1));
      assertTrue(boolean1 == boolean0);
      assertEquals(32, streamTokenizer0.ttype);
      assertEquals(0.0, streamTokenizer0.nval, 0.01);
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      assertTrue(jSTerm0.isEmpty());
      assertEquals("[]", jSTerm0.toString());
      assertFalse(jSTerm0.isVariable());
      assertFalse(jSTerm0.isEval());
      assertEquals(0, jSTerm0.size());
      assertFalse(jSTerm0.isConstant());
      assertEquals(10, jSTerm0.capacity());
      assertFalse(jSTerm0.isFunction());
      assertNotNull(jSTerm0);
      
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      assertEquals("[]", jSSubstitution0.toString());
      assertTrue(jSSubstitution0.isEmpty());
      assertFalse(jSSubstitution0.fail());
      assertEquals(10, jSSubstitution0.capacity());
      assertEquals(0, jSSubstitution0.size());
      assertNotNull(jSSubstitution0);
      
      boolean boolean0 = jSTerm0.add((Object) jSSubstitution0);
      assertFalse(jSTerm0.isEmpty());
      assertFalse(jSTerm0.isVariable());
      assertFalse(jSTerm0.isEval());
      assertEquals("[[]]", jSTerm0.toString());
      assertEquals(1, jSTerm0.size());
      assertFalse(jSTerm0.isConstant());
      assertEquals(10, jSTerm0.capacity());
      assertFalse(jSTerm0.isFunction());
      assertEquals("[]", jSSubstitution0.toString());
      assertTrue(jSSubstitution0.isEmpty());
      assertFalse(jSSubstitution0.fail());
      assertEquals(10, jSSubstitution0.capacity());
      assertEquals(0, jSSubstitution0.size());
      assertTrue(boolean0);
      
      boolean boolean1 = jSTerm0.add((Object) jSSubstitution0);
      assertFalse(jSTerm0.isEmpty());
      assertFalse(jSTerm0.isVariable());
      assertFalse(jSTerm0.isEval());
      assertFalse(jSTerm0.isConstant());
      assertEquals(10, jSTerm0.capacity());
      assertEquals(2, jSTerm0.size());
      assertEquals("[[], []]", jSTerm0.toString());
      assertFalse(jSTerm0.isFunction());
      assertEquals("[]", jSSubstitution0.toString());
      assertTrue(jSSubstitution0.isEmpty());
      assertFalse(jSSubstitution0.fail());
      assertEquals(10, jSSubstitution0.capacity());
      assertEquals(0, jSSubstitution0.size());
      assertTrue(boolean1);
      assertTrue(boolean1 == boolean0);
      
      jSTerm0.makeEval(true);
      assertFalse(jSTerm0.isEmpty());
      assertFalse(jSTerm0.isVariable());
      assertFalse(jSTerm0.isConstant());
      assertEquals(10, jSTerm0.capacity());
      assertEquals(2, jSTerm0.size());
      assertTrue(jSTerm0.isEval());
      assertEquals("[[], []]", jSTerm0.toString());
      assertFalse(jSTerm0.isFunction());
      
      jSTerm0.makeFunction();
      assertFalse(jSTerm0.isEmpty());
      assertTrue(jSTerm0.isFunction());
      assertFalse(jSTerm0.isVariable());
      assertFalse(jSTerm0.isConstant());
      assertEquals(10, jSTerm0.capacity());
      assertEquals(2, jSTerm0.size());
      assertTrue(jSTerm0.isEval());
      assertEquals("[[], []]", jSTerm0.toString());
      
      // Undeclared exception!
      try { 
        jSTerm0.call();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // umd.cs.shop.JSSubstitution cannot be cast to umd.cs.shop.JSTerm
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      assertFalse(jSSubstitution0.fail());
      assertEquals(0, jSSubstitution0.size());
      assertEquals("[]", jSSubstitution0.toString());
      assertTrue(jSSubstitution0.isEmpty());
      assertEquals(10, jSSubstitution0.capacity());
      assertNotNull(jSSubstitution0);
      
      StringReader stringReader0 = new StringReader("jFxA%Rdj8% jSYG> MR");
      assertNotNull(stringReader0);
      
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      assertEquals("Token[NOTHING], line 1", streamTokenizer0.toString());
      assertEquals(1, streamTokenizer0.lineno());
      assertNotNull(streamTokenizer0);
      assertEquals((-4), streamTokenizer0.ttype);
      assertEquals(0.0, streamTokenizer0.nval, 0.01);
      
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      assertEquals(1, streamTokenizer0.lineno());
      assertEquals("Token[' '], line 1", streamTokenizer0.toString());
      assertEquals(10, jSTerm0.capacity());
      assertFalse(jSTerm0.isFunction());
      assertTrue(jSTerm0.isConstant());
      assertFalse(jSTerm0.isVariable());
      assertFalse(jSTerm0.isEval());
      assertEquals(1, jSTerm0.size());
      assertFalse(jSTerm0.isEmpty());
      assertEquals("[jFxA%Rdj8%]", jSTerm0.toString());
      assertNotNull(jSTerm0);
      assertEquals(32, streamTokenizer0.ttype);
      assertEquals(0.0, streamTokenizer0.nval, 0.01);
      
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      assertEquals(10, jSSubstitution1.capacity());
      assertEquals("[]", jSSubstitution1.toString());
      assertTrue(jSSubstitution1.isEmpty());
      assertEquals(0, jSSubstitution1.size());
      assertFalse(jSSubstitution1.fail());
      assertNotNull(jSSubstitution1);
      assertTrue(jSSubstitution1.equals((Object)jSSubstitution0));
      
      JSTerm jSTerm1 = new JSTerm(streamTokenizer0);
      assertEquals(1, streamTokenizer0.lineno());
      assertEquals("Token[' '], line 1", streamTokenizer0.toString());
      assertTrue(jSTerm1.isConstant());
      assertFalse(jSTerm1.isVariable());
      assertEquals("[jSYG>]", jSTerm1.toString());
      assertEquals(1, jSTerm1.size());
      assertFalse(jSTerm1.isEval());
      assertFalse(jSTerm1.isEmpty());
      assertFalse(jSTerm1.isFunction());
      assertEquals(10, jSTerm1.capacity());
      assertNotNull(jSTerm1);
      assertFalse(jSTerm1.equals((Object)jSTerm0));
      assertEquals(32, streamTokenizer0.ttype);
      assertEquals(0.0, streamTokenizer0.nval, 0.01);
      
      JSSubstitution jSSubstitution2 = jSTerm0.matches(jSTerm1, jSSubstitution1);
      assertEquals(1, streamTokenizer0.lineno());
      assertEquals("Token[' '], line 1", streamTokenizer0.toString());
      assertEquals(10, jSTerm0.capacity());
      assertFalse(jSTerm0.isFunction());
      assertTrue(jSTerm0.isConstant());
      assertFalse(jSTerm0.isVariable());
      assertFalse(jSTerm0.isEval());
      assertEquals(1, jSTerm0.size());
      assertFalse(jSTerm0.isEmpty());
      assertEquals("[jFxA%Rdj8%]", jSTerm0.toString());
      assertEquals(10, jSSubstitution1.capacity());
      assertEquals("[]", jSSubstitution1.toString());
      assertTrue(jSSubstitution1.isEmpty());
      assertEquals(0, jSSubstitution1.size());
      assertFalse(jSSubstitution1.fail());
      assertTrue(jSTerm1.isConstant());
      assertFalse(jSTerm1.isVariable());
      assertEquals("[jSYG>]", jSTerm1.toString());
      assertEquals(1, jSTerm1.size());
      assertFalse(jSTerm1.isEval());
      assertFalse(jSTerm1.isEmpty());
      assertFalse(jSTerm1.isFunction());
      assertEquals(10, jSTerm1.capacity());
      assertEquals("[]", jSSubstitution2.toString());
      assertTrue(jSSubstitution2.isEmpty());
      assertTrue(jSSubstitution2.fail());
      assertEquals(10, jSSubstitution2.capacity());
      assertEquals(0, jSSubstitution2.size());
      assertNotSame(jSTerm0, jSTerm1);
      assertNotSame(jSSubstitution1, jSSubstitution0);
      assertNotSame(jSSubstitution1, jSSubstitution2);
      assertNotSame(jSTerm1, jSTerm0);
      assertNotSame(jSSubstitution2, jSSubstitution0);
      assertNotSame(jSSubstitution2, jSSubstitution1);
      assertNotNull(jSSubstitution2);
      assertFalse(jSTerm0.equals((Object)jSTerm1));
      assertTrue(jSSubstitution1.equals((Object)jSSubstitution0));
      assertFalse(jSTerm1.equals((Object)jSTerm0));
      assertTrue(jSSubstitution2.equals((Object)jSSubstitution1));
      assertTrue(jSSubstitution2.equals((Object)jSSubstitution0));
      assertEquals(32, streamTokenizer0.ttype);
      assertEquals(0.0, streamTokenizer0.nval, 0.01);
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      StringReader stringReader0 = new StringReader("%%%");
      assertNotNull(stringReader0);
      
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      assertEquals("Token[NOTHING], line 1", streamTokenizer0.toString());
      assertEquals(1, streamTokenizer0.lineno());
      assertNotNull(streamTokenizer0);
      assertEquals(0.0, streamTokenizer0.nval, 0.01);
      assertEquals((-4), streamTokenizer0.ttype);
      
      JSTerm jSTerm0 = null;
      try {
        jSTerm0 = new JSTerm(streamTokenizer0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      assertTrue(jSTerm0.isEmpty());
      assertFalse(jSTerm0.isVariable());
      assertFalse(jSTerm0.isEval());
      assertEquals(0, jSTerm0.size());
      assertFalse(jSTerm0.isConstant());
      assertEquals("[]", jSTerm0.toString());
      assertFalse(jSTerm0.isFunction());
      assertEquals(10, jSTerm0.capacity());
      assertNotNull(jSTerm0);
      
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      assertEquals("[]", jSSubstitution0.toString());
      assertEquals(10, jSSubstitution0.capacity());
      assertTrue(jSSubstitution0.isEmpty());
      assertFalse(jSSubstitution0.fail());
      assertEquals(0, jSSubstitution0.size());
      assertNotNull(jSSubstitution0);
      
      JSTerm jSTerm1 = jSSubstitution0.instance(jSTerm0);
      assertTrue(jSTerm0.isEmpty());
      assertFalse(jSTerm0.isVariable());
      assertFalse(jSTerm0.isEval());
      assertEquals(0, jSTerm0.size());
      assertFalse(jSTerm0.isConstant());
      assertEquals("[]", jSTerm0.toString());
      assertFalse(jSTerm0.isFunction());
      assertEquals(10, jSTerm0.capacity());
      assertEquals("[]", jSSubstitution0.toString());
      assertEquals(10, jSSubstitution0.capacity());
      assertTrue(jSSubstitution0.isEmpty());
      assertFalse(jSSubstitution0.fail());
      assertEquals(0, jSSubstitution0.size());
      assertFalse(jSTerm1.isConstant());
      assertTrue(jSTerm1.isEmpty());
      assertFalse(jSTerm1.isVariable());
      assertEquals("[]", jSTerm1.toString());
      assertFalse(jSTerm1.isFunction());
      assertEquals(10, jSTerm1.capacity());
      assertFalse(jSTerm1.isEval());
      assertEquals(0, jSTerm1.size());
      assertSame(jSTerm0, jSTerm1);
      assertSame(jSTerm1, jSTerm0);
      assertNotNull(jSTerm1);
      
      jSTerm1.removeAllElements();
      assertTrue(jSTerm0.isEmpty());
      assertFalse(jSTerm0.isVariable());
      assertFalse(jSTerm0.isEval());
      assertEquals(0, jSTerm0.size());
      assertFalse(jSTerm0.isConstant());
      assertEquals("[]", jSTerm0.toString());
      assertFalse(jSTerm0.isFunction());
      assertEquals(10, jSTerm0.capacity());
      assertEquals("[]", jSSubstitution0.toString());
      assertEquals(10, jSSubstitution0.capacity());
      assertTrue(jSSubstitution0.isEmpty());
      assertFalse(jSSubstitution0.fail());
      assertEquals(0, jSSubstitution0.size());
      assertFalse(jSTerm1.isConstant());
      assertTrue(jSTerm1.isEmpty());
      assertFalse(jSTerm1.isVariable());
      assertEquals("[]", jSTerm1.toString());
      assertFalse(jSTerm1.isFunction());
      assertEquals(10, jSTerm1.capacity());
      assertFalse(jSTerm1.isEval());
      assertEquals(0, jSTerm1.size());
      assertSame(jSTerm0, jSTerm1);
      assertSame(jSTerm1, jSTerm0);
      
      boolean boolean0 = jSSubstitution0.add((Object) null);
      assertFalse(jSSubstitution0.isEmpty());
      assertEquals(10, jSSubstitution0.capacity());
      assertEquals(1, jSSubstitution0.size());
      assertFalse(jSSubstitution0.fail());
      assertEquals("[null]", jSSubstitution0.toString());
      assertTrue(boolean0);
      
      jSTerm1.makeVariable();
      assertTrue(jSTerm0.isEmpty());
      assertFalse(jSTerm0.isEval());
      assertEquals(0, jSTerm0.size());
      assertTrue(jSTerm0.isVariable());
      assertFalse(jSTerm0.isConstant());
      assertEquals("[]", jSTerm0.toString());
      assertFalse(jSTerm0.isFunction());
      assertEquals(10, jSTerm0.capacity());
      assertFalse(jSSubstitution0.isEmpty());
      assertEquals(10, jSSubstitution0.capacity());
      assertEquals(1, jSSubstitution0.size());
      assertFalse(jSSubstitution0.fail());
      assertEquals("[null]", jSSubstitution0.toString());
      assertTrue(jSTerm1.isVariable());
      assertFalse(jSTerm1.isConstant());
      assertTrue(jSTerm1.isEmpty());
      assertEquals("[]", jSTerm1.toString());
      assertFalse(jSTerm1.isFunction());
      assertEquals(10, jSTerm1.capacity());
      assertFalse(jSTerm1.isEval());
      assertEquals(0, jSTerm1.size());
      assertSame(jSTerm0, jSTerm1);
      assertSame(jSTerm1, jSTerm0);
      
      // Undeclared exception!
      try { 
        jSTerm1.applySubstitutionT(jSSubstitution0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSSubstitution", e);
      }
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      assertFalse(jSSubstitution0.fail());
      assertTrue(jSSubstitution0.isEmpty());
      assertEquals(0, jSSubstitution0.size());
      assertEquals(10, jSSubstitution0.capacity());
      assertEquals("[]", jSSubstitution0.toString());
      assertNotNull(jSSubstitution0);
      
      StringReader stringReader0 = new StringReader("jFxA%Rdj8% jSYG> MR");
      assertNotNull(stringReader0);
      
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      assertEquals(1, streamTokenizer0.lineno());
      assertEquals("Token[NOTHING], line 1", streamTokenizer0.toString());
      assertNotNull(streamTokenizer0);
      assertEquals(0.0, streamTokenizer0.nval, 0.01);
      assertEquals((-4), streamTokenizer0.ttype);
      
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      assertEquals(1, streamTokenizer0.lineno());
      assertEquals("Token[' '], line 1", streamTokenizer0.toString());
      assertEquals(1, jSTerm0.size());
      assertFalse(jSTerm0.isFunction());
      assertFalse(jSTerm0.isVariable());
      assertEquals(10, jSTerm0.capacity());
      assertEquals("[jFxA%Rdj8%]", jSTerm0.toString());
      assertTrue(jSTerm0.isConstant());
      assertFalse(jSTerm0.isEmpty());
      assertFalse(jSTerm0.isEval());
      assertNotNull(jSTerm0);
      assertEquals(0.0, streamTokenizer0.nval, 0.01);
      assertEquals(32, streamTokenizer0.ttype);
      
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      assertEquals(0, jSSubstitution1.size());
      assertFalse(jSSubstitution1.fail());
      assertEquals("[]", jSSubstitution1.toString());
      assertTrue(jSSubstitution1.isEmpty());
      assertEquals(10, jSSubstitution1.capacity());
      assertNotNull(jSSubstitution1);
      assertTrue(jSSubstitution1.equals((Object)jSSubstitution0));
      
      JSTerm jSTerm1 = jSSubstitution1.instance(jSTerm0);
      assertEquals(1, streamTokenizer0.lineno());
      assertEquals("Token[' '], line 1", streamTokenizer0.toString());
      assertEquals(1, jSTerm0.size());
      assertFalse(jSTerm0.isFunction());
      assertFalse(jSTerm0.isVariable());
      assertEquals(10, jSTerm0.capacity());
      assertEquals("[jFxA%Rdj8%]", jSTerm0.toString());
      assertTrue(jSTerm0.isConstant());
      assertFalse(jSTerm0.isEmpty());
      assertFalse(jSTerm0.isEval());
      assertEquals(0, jSSubstitution1.size());
      assertFalse(jSSubstitution1.fail());
      assertEquals("[]", jSSubstitution1.toString());
      assertTrue(jSSubstitution1.isEmpty());
      assertEquals(10, jSSubstitution1.capacity());
      assertFalse(jSTerm1.isVariable());
      assertEquals(10, jSTerm1.capacity());
      assertEquals(1, jSTerm1.size());
      assertTrue(jSTerm1.isConstant());
      assertFalse(jSTerm1.isEval());
      assertFalse(jSTerm1.isEmpty());
      assertEquals("[jFxA%Rdj8%]", jSTerm1.toString());
      assertFalse(jSTerm1.isFunction());
      assertSame(jSTerm0, jSTerm1);
      assertNotSame(jSSubstitution1, jSSubstitution0);
      assertSame(jSTerm1, jSTerm0);
      assertNotNull(jSTerm1);
      assertTrue(jSSubstitution1.equals((Object)jSSubstitution0));
      assertEquals(0.0, streamTokenizer0.nval, 0.01);
      assertEquals(32, streamTokenizer0.ttype);
      
      JSSubstitution jSSubstitution2 = (JSSubstitution)jSSubstitution1.clone();
      assertEquals(0, jSSubstitution1.size());
      assertFalse(jSSubstitution1.fail());
      assertEquals("[]", jSSubstitution1.toString());
      assertTrue(jSSubstitution1.isEmpty());
      assertEquals(10, jSSubstitution1.capacity());
      assertEquals(0, jSSubstitution2.size());
      assertFalse(jSSubstitution2.fail());
      assertTrue(jSSubstitution2.isEmpty());
      assertEquals(0, jSSubstitution2.capacity());
      assertEquals("[]", jSSubstitution2.toString());
      assertNotSame(jSSubstitution1, jSSubstitution0);
      assertNotSame(jSSubstitution1, jSSubstitution2);
      assertNotSame(jSSubstitution2, jSSubstitution0);
      assertNotSame(jSSubstitution2, jSSubstitution1);
      assertNotNull(jSSubstitution2);
      assertTrue(jSSubstitution1.equals((Object)jSSubstitution0));
      assertTrue(jSSubstitution2.equals((Object)jSSubstitution1));
      assertTrue(jSSubstitution2.equals((Object)jSSubstitution0));
      
      jSTerm0.makeEval(true);
      assertEquals(1, streamTokenizer0.lineno());
      assertEquals("Token[' '], line 1", streamTokenizer0.toString());
      assertEquals(1, jSTerm0.size());
      assertFalse(jSTerm0.isFunction());
      assertFalse(jSTerm0.isVariable());
      assertEquals(10, jSTerm0.capacity());
      assertEquals("[jFxA%Rdj8%]", jSTerm0.toString());
      assertTrue(jSTerm0.isEval());
      assertTrue(jSTerm0.isConstant());
      assertFalse(jSTerm0.isEmpty());
      assertSame(jSTerm0, jSTerm1);
      assertEquals(0.0, streamTokenizer0.nval, 0.01);
      assertEquals(32, streamTokenizer0.ttype);
      
      jSTerm1.makeFunction();
      assertEquals(1, streamTokenizer0.lineno());
      assertEquals("Token[' '], line 1", streamTokenizer0.toString());
      assertEquals(1, jSTerm0.size());
      assertFalse(jSTerm0.isVariable());
      assertEquals(10, jSTerm0.capacity());
      assertEquals("[jFxA%Rdj8%]", jSTerm0.toString());
      assertTrue(jSTerm0.isEval());
      assertFalse(jSTerm0.isConstant());
      assertFalse(jSTerm0.isEmpty());
      assertTrue(jSTerm0.isFunction());
      assertEquals(0, jSSubstitution1.size());
      assertFalse(jSSubstitution1.fail());
      assertEquals("[]", jSSubstitution1.toString());
      assertTrue(jSSubstitution1.isEmpty());
      assertEquals(10, jSSubstitution1.capacity());
      assertFalse(jSTerm1.isVariable());
      assertEquals(10, jSTerm1.capacity());
      assertEquals(1, jSTerm1.size());
      assertTrue(jSTerm1.isEval());
      assertTrue(jSTerm1.isFunction());
      assertFalse(jSTerm1.isEmpty());
      assertFalse(jSTerm1.isConstant());
      assertEquals("[jFxA%Rdj8%]", jSTerm1.toString());
      assertSame(jSTerm0, jSTerm1);
      assertNotSame(jSSubstitution1, jSSubstitution0);
      assertNotSame(jSSubstitution1, jSSubstitution2);
      assertSame(jSTerm1, jSTerm0);
      assertTrue(jSSubstitution1.equals((Object)jSSubstitution2));
      assertTrue(jSSubstitution1.equals((Object)jSSubstitution0));
      assertEquals(0.0, streamTokenizer0.nval, 0.01);
      assertEquals(32, streamTokenizer0.ttype);
      
      boolean boolean0 = jSTerm0.isGround();
      assertEquals(1, streamTokenizer0.lineno());
      assertEquals("Token[' '], line 1", streamTokenizer0.toString());
      assertEquals(1, jSTerm0.size());
      assertFalse(jSTerm0.isVariable());
      assertEquals(10, jSTerm0.capacity());
      assertEquals("[jFxA%Rdj8%]", jSTerm0.toString());
      assertTrue(jSTerm0.isEval());
      assertFalse(jSTerm0.isConstant());
      assertFalse(jSTerm0.isEmpty());
      assertTrue(jSTerm0.isFunction());
      assertTrue(boolean0);
      assertSame(jSTerm0, jSTerm1);
      assertEquals(0.0, streamTokenizer0.nval, 0.01);
      assertEquals(32, streamTokenizer0.ttype);
      
      boolean boolean1 = jSTerm1.equals(jSTerm0);
      assertEquals(1, streamTokenizer0.lineno());
      assertEquals("Token[' '], line 1", streamTokenizer0.toString());
      assertEquals(1, jSTerm0.size());
      assertFalse(jSTerm0.isVariable());
      assertEquals(10, jSTerm0.capacity());
      assertEquals("[jFxA%Rdj8%]", jSTerm0.toString());
      assertTrue(jSTerm0.isEval());
      assertFalse(jSTerm0.isConstant());
      assertFalse(jSTerm0.isEmpty());
      assertTrue(jSTerm0.isFunction());
      assertEquals(0, jSSubstitution1.size());
      assertFalse(jSSubstitution1.fail());
      assertEquals("[]", jSSubstitution1.toString());
      assertTrue(jSSubstitution1.isEmpty());
      assertEquals(10, jSSubstitution1.capacity());
      assertFalse(jSTerm1.isVariable());
      assertEquals(10, jSTerm1.capacity());
      assertEquals(1, jSTerm1.size());
      assertTrue(jSTerm1.isEval());
      assertTrue(jSTerm1.isFunction());
      assertFalse(jSTerm1.isEmpty());
      assertFalse(jSTerm1.isConstant());
      assertEquals("[jFxA%Rdj8%]", jSTerm1.toString());
      assertTrue(boolean1);
      assertSame(jSTerm0, jSTerm1);
      assertNotSame(jSSubstitution1, jSSubstitution0);
      assertNotSame(jSSubstitution1, jSSubstitution2);
      assertSame(jSTerm1, jSTerm0);
      assertTrue(jSSubstitution1.equals((Object)jSSubstitution2));
      assertTrue(jSSubstitution1.equals((Object)jSSubstitution0));
      assertTrue(boolean1 == boolean0);
      assertEquals(0.0, streamTokenizer0.nval, 0.01);
      assertEquals(32, streamTokenizer0.ttype);
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      assertTrue(jSTerm0.isEmpty());
      assertFalse(jSTerm0.isVariable());
      assertEquals(10, jSTerm0.capacity());
      assertFalse(jSTerm0.isEval());
      assertEquals(0, jSTerm0.size());
      assertFalse(jSTerm0.isConstant());
      assertEquals("[]", jSTerm0.toString());
      assertFalse(jSTerm0.isFunction());
      assertNotNull(jSTerm0);
      
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      assertEquals(10, jSSubstitution0.capacity());
      assertEquals("[]", jSSubstitution0.toString());
      assertTrue(jSSubstitution0.isEmpty());
      assertEquals(0, jSSubstitution0.size());
      assertFalse(jSSubstitution0.fail());
      assertNotNull(jSSubstitution0);
      
      jSTerm0.makeVariable();
      assertTrue(jSTerm0.isEmpty());
      assertEquals(10, jSTerm0.capacity());
      assertFalse(jSTerm0.isEval());
      assertEquals(0, jSTerm0.size());
      assertFalse(jSTerm0.isConstant());
      assertTrue(jSTerm0.isVariable());
      assertEquals("[]", jSTerm0.toString());
      assertFalse(jSTerm0.isFunction());
      
      // Undeclared exception!
      try { 
        jSTerm0.toStr();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      assertEquals(10, jSTerm0.capacity());
      assertFalse(jSTerm0.isFunction());
      assertFalse(jSTerm0.isVariable());
      assertFalse(jSTerm0.isConstant());
      assertTrue(jSTerm0.isEmpty());
      assertEquals(0, jSTerm0.size());
      assertFalse(jSTerm0.isEval());
      assertEquals("[]", jSTerm0.toString());
      assertNotNull(jSTerm0);
      
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      assertEquals(0, jSSubstitution0.size());
      assertEquals("[]", jSSubstitution0.toString());
      assertTrue(jSSubstitution0.isEmpty());
      assertFalse(jSSubstitution0.fail());
      assertEquals(10, jSSubstitution0.capacity());
      assertNotNull(jSSubstitution0);
      
      boolean boolean0 = jSTerm0.add((Object) jSSubstitution0);
      assertEquals(10, jSTerm0.capacity());
      assertFalse(jSTerm0.isFunction());
      assertFalse(jSTerm0.isVariable());
      assertEquals(1, jSTerm0.size());
      assertFalse(jSTerm0.isConstant());
      assertFalse(jSTerm0.isEval());
      assertFalse(jSTerm0.isEmpty());
      assertEquals("[[]]", jSTerm0.toString());
      assertEquals(0, jSSubstitution0.size());
      assertEquals("[]", jSSubstitution0.toString());
      assertTrue(jSSubstitution0.isEmpty());
      assertFalse(jSSubstitution0.fail());
      assertEquals(10, jSSubstitution0.capacity());
      assertTrue(boolean0);
      
      JSTerm jSTerm1 = jSTerm0.applySubstitutionT(jSSubstitution0);
      assertEquals(10, jSTerm0.capacity());
      assertFalse(jSTerm0.isFunction());
      assertFalse(jSTerm0.isVariable());
      assertEquals(1, jSTerm0.size());
      assertFalse(jSTerm0.isConstant());
      assertFalse(jSTerm0.isEval());
      assertFalse(jSTerm0.isEmpty());
      assertEquals("[[]]", jSTerm0.toString());
      assertEquals(0, jSSubstitution0.size());
      assertEquals("[]", jSSubstitution0.toString());
      assertTrue(jSSubstitution0.isEmpty());
      assertFalse(jSSubstitution0.fail());
      assertEquals(10, jSSubstitution0.capacity());
      assertFalse(jSTerm1.isEmpty());
      assertEquals(1, jSTerm1.size());
      assertFalse(jSTerm1.isConstant());
      assertEquals(10, jSTerm1.capacity());
      assertEquals("[[]]", jSTerm1.toString());
      assertFalse(jSTerm1.isVariable());
      assertTrue(jSTerm1.isFunction());
      assertFalse(jSTerm1.isEval());
      assertNotSame(jSTerm0, jSTerm1);
      assertNotSame(jSTerm1, jSTerm0);
      assertNotNull(jSTerm1);
      assertTrue(jSTerm1.equals((Object)jSTerm0));
      
      // Undeclared exception!
      try { 
        jSTerm0.matches(jSTerm1);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // umd.cs.shop.JSSubstitution cannot be cast to java.lang.String
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      assertEquals("[]", jSSubstitution0.toString());
      assertFalse(jSSubstitution0.fail());
      assertEquals(0, jSSubstitution0.size());
      assertEquals(10, jSSubstitution0.capacity());
      assertTrue(jSSubstitution0.isEmpty());
      assertNotNull(jSSubstitution0);
      
      JSTerm jSTerm0 = new JSTerm();
      assertTrue(jSTerm0.isEmpty());
      assertFalse(jSTerm0.isVariable());
      assertEquals(0, jSTerm0.size());
      assertFalse(jSTerm0.isEval());
      assertFalse(jSTerm0.isConstant());
      assertEquals(10, jSTerm0.capacity());
      assertEquals("[]", jSTerm0.toString());
      assertFalse(jSTerm0.isFunction());
      assertNotNull(jSTerm0);
      
      // Undeclared exception!
      try { 
        jSTerm0.applySubstitutionT(jSSubstitution0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      StringReader stringReader0 = new StringReader("~d&oz`EVpVh#c.US&?");
      assertNotNull(stringReader0);
      
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      assertEquals(1, streamTokenizer0.lineno());
      assertEquals("Token[NOTHING], line 1", streamTokenizer0.toString());
      assertNotNull(streamTokenizer0);
      assertEquals(0.0, streamTokenizer0.nval, 0.01);
      assertEquals((-4), streamTokenizer0.ttype);
      
      JSTerm jSTerm0 = null;
      try {
        jSTerm0 = new JSTerm(streamTokenizer0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      assertTrue(jSSubstitution0.isEmpty());
      assertEquals("[]", jSSubstitution0.toString());
      assertEquals(10, jSSubstitution0.capacity());
      assertFalse(jSSubstitution0.fail());
      assertEquals(0, jSSubstitution0.size());
      assertNotNull(jSSubstitution0);
      
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      assertEquals("[]", jSSubstitution1.toString());
      assertTrue(jSSubstitution1.isEmpty());
      assertEquals(10, jSSubstitution1.capacity());
      assertEquals(0, jSSubstitution1.size());
      assertFalse(jSSubstitution1.fail());
      assertNotNull(jSSubstitution1);
      assertTrue(jSSubstitution1.equals((Object)jSSubstitution0));
      
      StringReader stringReader0 = new StringReader("jFxA%Rdj8% jSYG> MR");
      assertNotNull(stringReader0);
      
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      assertEquals("Token[NOTHING], line 1", streamTokenizer0.toString());
      assertEquals(1, streamTokenizer0.lineno());
      assertNotNull(streamTokenizer0);
      assertEquals((-4), streamTokenizer0.ttype);
      assertEquals(0.0, streamTokenizer0.nval, 0.01);
      
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      assertEquals("Token[' '], line 1", streamTokenizer0.toString());
      assertEquals(1, streamTokenizer0.lineno());
      assertEquals(10, jSTerm0.capacity());
      assertFalse(jSTerm0.isFunction());
      assertFalse(jSTerm0.isVariable());
      assertFalse(jSTerm0.isEval());
      assertFalse(jSTerm0.isEmpty());
      assertEquals(1, jSTerm0.size());
      assertTrue(jSTerm0.isConstant());
      assertEquals("[jFxA%Rdj8%]", jSTerm0.toString());
      assertNotNull(jSTerm0);
      assertEquals(32, streamTokenizer0.ttype);
      assertEquals(0.0, streamTokenizer0.nval, 0.01);
      
      boolean boolean0 = jSTerm0.add((Object) jSSubstitution1);
      assertEquals("[]", jSSubstitution1.toString());
      assertTrue(jSSubstitution1.isEmpty());
      assertEquals(10, jSSubstitution1.capacity());
      assertEquals(0, jSSubstitution1.size());
      assertFalse(jSSubstitution1.fail());
      assertEquals("Token[' '], line 1", streamTokenizer0.toString());
      assertEquals(1, streamTokenizer0.lineno());
      assertEquals(10, jSTerm0.capacity());
      assertFalse(jSTerm0.isFunction());
      assertFalse(jSTerm0.isVariable());
      assertFalse(jSTerm0.isEval());
      assertFalse(jSTerm0.isEmpty());
      assertEquals(2, jSTerm0.size());
      assertEquals("[jFxA%Rdj8%, []]", jSTerm0.toString());
      assertTrue(jSTerm0.isConstant());
      assertTrue(boolean0);
      assertNotSame(jSSubstitution1, jSSubstitution0);
      assertTrue(jSSubstitution1.equals((Object)jSSubstitution0));
      assertEquals(32, streamTokenizer0.ttype);
      assertEquals(0.0, streamTokenizer0.nval, 0.01);
      
      jSTerm0.makeFunction();
      assertEquals("Token[' '], line 1", streamTokenizer0.toString());
      assertEquals(1, streamTokenizer0.lineno());
      assertEquals(10, jSTerm0.capacity());
      assertFalse(jSTerm0.isVariable());
      assertFalse(jSTerm0.isEval());
      assertFalse(jSTerm0.isEmpty());
      assertFalse(jSTerm0.isConstant());
      assertEquals(2, jSTerm0.size());
      assertEquals("[jFxA%Rdj8%, []]", jSTerm0.toString());
      assertTrue(jSTerm0.isFunction());
      assertEquals(32, streamTokenizer0.ttype);
      assertEquals(0.0, streamTokenizer0.nval, 0.01);
      
      // Undeclared exception!
      try { 
        jSTerm0.toStr();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // umd.cs.shop.JSSubstitution cannot be cast to umd.cs.shop.JSTerm
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      assertFalse(jSSubstitution0.fail());
      assertEquals(0, jSSubstitution0.size());
      assertEquals("[]", jSSubstitution0.toString());
      assertEquals(10, jSSubstitution0.capacity());
      assertTrue(jSSubstitution0.isEmpty());
      assertNotNull(jSSubstitution0);
      
      StringReader stringReader0 = new StringReader("jFxA%Rdj8% jSYG> MR");
      assertNotNull(stringReader0);
      
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      assertEquals("Token[NOTHING], line 1", streamTokenizer0.toString());
      assertEquals(1, streamTokenizer0.lineno());
      assertNotNull(streamTokenizer0);
      assertEquals((-4), streamTokenizer0.ttype);
      assertEquals(0.0, streamTokenizer0.nval, 0.01);
      
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      assertEquals("Token[' '], line 1", streamTokenizer0.toString());
      assertEquals(1, streamTokenizer0.lineno());
      assertEquals("[jFxA%Rdj8%]", jSTerm0.toString());
      assertFalse(jSTerm0.isEval());
      assertFalse(jSTerm0.isVariable());
      assertTrue(jSTerm0.isConstant());
      assertFalse(jSTerm0.isEmpty());
      assertEquals(1, jSTerm0.size());
      assertFalse(jSTerm0.isFunction());
      assertEquals(10, jSTerm0.capacity());
      assertNotNull(jSTerm0);
      assertEquals(32, streamTokenizer0.ttype);
      assertEquals(0.0, streamTokenizer0.nval, 0.01);
      
      JSTerm jSTerm1 = jSSubstitution0.instance(jSTerm0);
      assertFalse(jSSubstitution0.fail());
      assertEquals(0, jSSubstitution0.size());
      assertEquals("[]", jSSubstitution0.toString());
      assertEquals(10, jSSubstitution0.capacity());
      assertTrue(jSSubstitution0.isEmpty());
      assertEquals("Token[' '], line 1", streamTokenizer0.toString());
      assertEquals(1, streamTokenizer0.lineno());
      assertEquals("[jFxA%Rdj8%]", jSTerm0.toString());
      assertFalse(jSTerm0.isEval());
      assertFalse(jSTerm0.isVariable());
      assertTrue(jSTerm0.isConstant());
      assertFalse(jSTerm0.isEmpty());
      assertEquals(1, jSTerm0.size());
      assertFalse(jSTerm0.isFunction());
      assertEquals(10, jSTerm0.capacity());
      assertEquals(1, jSTerm1.size());
      assertFalse(jSTerm1.isFunction());
      assertFalse(jSTerm1.isEval());
      assertFalse(jSTerm1.isEmpty());
      assertEquals(10, jSTerm1.capacity());
      assertTrue(jSTerm1.isConstant());
      assertEquals("[jFxA%Rdj8%]", jSTerm1.toString());
      assertFalse(jSTerm1.isVariable());
      assertSame(jSTerm0, jSTerm1);
      assertSame(jSTerm1, jSTerm0);
      assertNotNull(jSTerm1);
      assertEquals(32, streamTokenizer0.ttype);
      assertEquals(0.0, streamTokenizer0.nval, 0.01);
      
      boolean boolean0 = jSTerm1.add((Object) null);
      assertFalse(jSSubstitution0.fail());
      assertEquals(0, jSSubstitution0.size());
      assertEquals("[]", jSSubstitution0.toString());
      assertEquals(10, jSSubstitution0.capacity());
      assertTrue(jSSubstitution0.isEmpty());
      assertEquals("Token[' '], line 1", streamTokenizer0.toString());
      assertEquals(1, streamTokenizer0.lineno());
      assertFalse(jSTerm0.isEval());
      assertFalse(jSTerm0.isVariable());
      assertTrue(jSTerm0.isConstant());
      assertFalse(jSTerm0.isEmpty());
      assertEquals("[jFxA%Rdj8%, null]", jSTerm0.toString());
      assertEquals(2, jSTerm0.size());
      assertFalse(jSTerm0.isFunction());
      assertEquals(10, jSTerm0.capacity());
      assertFalse(jSTerm1.isFunction());
      assertFalse(jSTerm1.isEval());
      assertFalse(jSTerm1.isEmpty());
      assertEquals(10, jSTerm1.capacity());
      assertEquals(2, jSTerm1.size());
      assertTrue(jSTerm1.isConstant());
      assertEquals("[jFxA%Rdj8%, null]", jSTerm1.toString());
      assertFalse(jSTerm1.isVariable());
      assertTrue(boolean0);
      assertSame(jSTerm0, jSTerm1);
      assertSame(jSTerm1, jSTerm0);
      assertEquals(32, streamTokenizer0.ttype);
      assertEquals(0.0, streamTokenizer0.nval, 0.01);
      
      jSTerm1.makeEval(true);
      assertFalse(jSSubstitution0.fail());
      assertEquals(0, jSSubstitution0.size());
      assertEquals("[]", jSSubstitution0.toString());
      assertEquals(10, jSSubstitution0.capacity());
      assertTrue(jSSubstitution0.isEmpty());
      assertEquals("Token[' '], line 1", streamTokenizer0.toString());
      assertEquals(1, streamTokenizer0.lineno());
      assertFalse(jSTerm0.isVariable());
      assertTrue(jSTerm0.isConstant());
      assertFalse(jSTerm0.isEmpty());
      assertTrue(jSTerm0.isEval());
      assertEquals("[jFxA%Rdj8%, null]", jSTerm0.toString());
      assertEquals(2, jSTerm0.size());
      assertFalse(jSTerm0.isFunction());
      assertEquals(10, jSTerm0.capacity());
      assertFalse(jSTerm1.isFunction());
      assertFalse(jSTerm1.isEmpty());
      assertEquals(10, jSTerm1.capacity());
      assertEquals(2, jSTerm1.size());
      assertTrue(jSTerm1.isConstant());
      assertEquals("[jFxA%Rdj8%, null]", jSTerm1.toString());
      assertTrue(jSTerm1.isEval());
      assertFalse(jSTerm1.isVariable());
      assertSame(jSTerm0, jSTerm1);
      assertSame(jSTerm1, jSTerm0);
      assertEquals(32, streamTokenizer0.ttype);
      assertEquals(0.0, streamTokenizer0.nval, 0.01);
      
      jSTerm0.makeFunction();
      assertEquals("Token[' '], line 1", streamTokenizer0.toString());
      assertEquals(1, streamTokenizer0.lineno());
      assertFalse(jSTerm0.isVariable());
      assertFalse(jSTerm0.isEmpty());
      assertFalse(jSTerm0.isConstant());
      assertTrue(jSTerm0.isEval());
      assertEquals("[jFxA%Rdj8%, null]", jSTerm0.toString());
      assertTrue(jSTerm0.isFunction());
      assertEquals(2, jSTerm0.size());
      assertEquals(10, jSTerm0.capacity());
      assertSame(jSTerm0, jSTerm1);
      assertEquals(32, streamTokenizer0.ttype);
      assertEquals(0.0, streamTokenizer0.nval, 0.01);
      
      // Undeclared exception!
      try { 
        jSTerm0.isGround();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      assertEquals("[]", jSTerm0.toString());
      assertEquals(10, jSTerm0.capacity());
      assertFalse(jSTerm0.isFunction());
      assertFalse(jSTerm0.isConstant());
      assertEquals(0, jSTerm0.size());
      assertTrue(jSTerm0.isEmpty());
      assertFalse(jSTerm0.isEval());
      assertFalse(jSTerm0.isVariable());
      assertNotNull(jSTerm0);
      
      // Undeclared exception!
      try { 
        jSTerm0.call();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      assertEquals(0, jSTerm0.size());
      assertFalse(jSTerm0.isEval());
      assertTrue(jSTerm0.isEmpty());
      assertFalse(jSTerm0.isVariable());
      assertFalse(jSTerm0.isConstant());
      assertEquals(10, jSTerm0.capacity());
      assertEquals("[]", jSTerm0.toString());
      assertFalse(jSTerm0.isFunction());
      assertNotNull(jSTerm0);
      
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      assertEquals("[]", jSSubstitution0.toString());
      assertTrue(jSSubstitution0.isEmpty());
      assertFalse(jSSubstitution0.fail());
      assertEquals(0, jSSubstitution0.size());
      assertEquals(10, jSSubstitution0.capacity());
      assertNotNull(jSSubstitution0);
      
      boolean boolean0 = jSTerm0.add((Object) null);
      assertEquals(1, jSTerm0.size());
      assertFalse(jSTerm0.isEval());
      assertEquals("[null]", jSTerm0.toString());
      assertFalse(jSTerm0.isVariable());
      assertFalse(jSTerm0.isEmpty());
      assertFalse(jSTerm0.isConstant());
      assertEquals(10, jSTerm0.capacity());
      assertFalse(jSTerm0.isFunction());
      assertTrue(boolean0);
      
      // Undeclared exception!
      try { 
        jSTerm0.print();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      assertEquals("[]", jSTerm0.toString());
      assertEquals(10, jSTerm0.capacity());
      assertFalse(jSTerm0.isFunction());
      assertFalse(jSTerm0.isConstant());
      assertEquals(0, jSTerm0.size());
      assertTrue(jSTerm0.isEmpty());
      assertFalse(jSTerm0.isEval());
      assertFalse(jSTerm0.isVariable());
      assertNotNull(jSTerm0);
      
      jSTerm0.makeVariable();
      assertEquals("[]", jSTerm0.toString());
      assertEquals(10, jSTerm0.capacity());
      assertFalse(jSTerm0.isFunction());
      assertTrue(jSTerm0.isVariable());
      assertFalse(jSTerm0.isConstant());
      assertEquals(0, jSTerm0.size());
      assertTrue(jSTerm0.isEmpty());
      assertFalse(jSTerm0.isEval());
      
      // Undeclared exception!
      try { 
        jSTerm0.standardizerTerm();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      assertFalse(jSTerm0.isConstant());
      assertFalse(jSTerm0.isEval());
      assertEquals(0, jSTerm0.size());
      assertFalse(jSTerm0.isVariable());
      assertTrue(jSTerm0.isEmpty());
      assertEquals("[]", jSTerm0.toString());
      assertFalse(jSTerm0.isFunction());
      assertEquals(10, jSTerm0.capacity());
      assertNotNull(jSTerm0);
      
      JSSubstitution jSSubstitution0 = jSTerm0.matches(jSTerm0);
      assertFalse(jSTerm0.isConstant());
      assertFalse(jSTerm0.isEval());
      assertEquals(0, jSTerm0.size());
      assertFalse(jSTerm0.isVariable());
      assertTrue(jSTerm0.isEmpty());
      assertEquals("[]", jSTerm0.toString());
      assertFalse(jSTerm0.isFunction());
      assertEquals(10, jSTerm0.capacity());
      assertEquals(10, jSSubstitution0.capacity());
      assertEquals(0, jSSubstitution0.size());
      assertEquals("[]", jSSubstitution0.toString());
      assertTrue(jSSubstitution0.fail());
      assertTrue(jSSubstitution0.isEmpty());
      assertNotNull(jSSubstitution0);
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      assertTrue(jSTerm0.isEmpty());
      assertFalse(jSTerm0.isEval());
      assertEquals(10, jSTerm0.capacity());
      assertEquals(0, jSTerm0.size());
      assertFalse(jSTerm0.isVariable());
      assertFalse(jSTerm0.isFunction());
      assertEquals("[]", jSTerm0.toString());
      assertFalse(jSTerm0.isConstant());
      assertNotNull(jSTerm0);
      
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      assertFalse(jSSubstitution0.fail());
      assertEquals(0, jSSubstitution0.size());
      assertTrue(jSSubstitution0.isEmpty());
      assertEquals("[]", jSSubstitution0.toString());
      assertEquals(10, jSSubstitution0.capacity());
      assertNotNull(jSSubstitution0);
      
      boolean boolean0 = jSTerm0.add((Object) jSSubstitution0);
      assertFalse(jSTerm0.isEval());
      assertEquals(1, jSTerm0.size());
      assertEquals(10, jSTerm0.capacity());
      assertFalse(jSTerm0.isVariable());
      assertEquals("[[]]", jSTerm0.toString());
      assertFalse(jSTerm0.isFunction());
      assertFalse(jSTerm0.isConstant());
      assertFalse(jSTerm0.isEmpty());
      assertFalse(jSSubstitution0.fail());
      assertEquals(0, jSSubstitution0.size());
      assertTrue(jSSubstitution0.isEmpty());
      assertEquals("[]", jSSubstitution0.toString());
      assertEquals(10, jSSubstitution0.capacity());
      assertTrue(boolean0);
      
      JSSubstitution jSSubstitution1 = (JSSubstitution)jSTerm0.lastElement();
      assertFalse(jSTerm0.isEval());
      assertEquals(1, jSTerm0.size());
      assertEquals(10, jSTerm0.capacity());
      assertFalse(jSTerm0.isVariable());
      assertEquals("[[]]", jSTerm0.toString());
      assertFalse(jSTerm0.isFunction());
      assertFalse(jSTerm0.isConstant());
      assertFalse(jSTerm0.isEmpty());
      assertEquals(10, jSSubstitution1.capacity());
      assertFalse(jSSubstitution1.fail());
      assertEquals(0, jSSubstitution1.size());
      assertEquals("[]", jSSubstitution1.toString());
      assertTrue(jSSubstitution1.isEmpty());
      assertSame(jSSubstitution1, jSSubstitution0);
      assertNotNull(jSSubstitution1);
      
      boolean boolean1 = jSTerm0.add((Object) jSSubstitution1);
      assertFalse(jSTerm0.isEval());
      assertEquals(10, jSTerm0.capacity());
      assertEquals("[[], []]", jSTerm0.toString());
      assertFalse(jSTerm0.isVariable());
      assertFalse(jSTerm0.isFunction());
      assertFalse(jSTerm0.isConstant());
      assertFalse(jSTerm0.isEmpty());
      assertEquals(2, jSTerm0.size());
      assertEquals(10, jSSubstitution1.capacity());
      assertFalse(jSSubstitution1.fail());
      assertEquals(0, jSSubstitution1.size());
      assertEquals("[]", jSSubstitution1.toString());
      assertTrue(jSSubstitution1.isEmpty());
      assertTrue(boolean1);
      assertSame(jSSubstitution1, jSSubstitution0);
      assertTrue(boolean1 == boolean0);
      
      // Undeclared exception!
      try { 
        jSTerm0.standardizerTerm();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // umd.cs.shop.JSSubstitution cannot be cast to umd.cs.shop.JSTerm
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      assertTrue(jSTerm0.isEmpty());
      assertEquals("[]", jSTerm0.toString());
      assertFalse(jSTerm0.isVariable());
      assertFalse(jSTerm0.isConstant());
      assertFalse(jSTerm0.isEval());
      assertEquals(0, jSTerm0.size());
      assertFalse(jSTerm0.isFunction());
      assertEquals(10, jSTerm0.capacity());
      assertNotNull(jSTerm0);
      
      // Undeclared exception!
      try { 
        jSTerm0.cloneT();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      StringReader stringReader0 = new StringReader("jFxA%Rdj8% jSYG> MR");
      assertNotNull(stringReader0);
      
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      assertEquals(1, streamTokenizer0.lineno());
      assertEquals("Token[NOTHING], line 1", streamTokenizer0.toString());
      assertNotNull(streamTokenizer0);
      assertEquals((-4), streamTokenizer0.ttype);
      assertEquals(0.0, streamTokenizer0.nval, 0.01);
      
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      assertEquals(1, streamTokenizer0.lineno());
      assertEquals("Token[' '], line 1", streamTokenizer0.toString());
      assertFalse(jSTerm0.isEmpty());
      assertEquals(10, jSTerm0.capacity());
      assertFalse(jSTerm0.isFunction());
      assertFalse(jSTerm0.isVariable());
      assertEquals("[jFxA%Rdj8%]", jSTerm0.toString());
      assertFalse(jSTerm0.isEval());
      assertEquals(1, jSTerm0.size());
      assertTrue(jSTerm0.isConstant());
      assertNotNull(jSTerm0);
      assertEquals(32, streamTokenizer0.ttype);
      assertEquals(0.0, streamTokenizer0.nval, 0.01);
      
      boolean boolean0 = jSTerm0.add((Object) streamTokenizer0);
      assertEquals(1, streamTokenizer0.lineno());
      assertEquals("Token[' '], line 1", streamTokenizer0.toString());
      assertFalse(jSTerm0.isEmpty());
      assertEquals(10, jSTerm0.capacity());
      assertEquals("[jFxA%Rdj8%, Token[' '], line 1]", jSTerm0.toString());
      assertFalse(jSTerm0.isFunction());
      assertFalse(jSTerm0.isVariable());
      assertEquals(2, jSTerm0.size());
      assertFalse(jSTerm0.isEval());
      assertTrue(jSTerm0.isConstant());
      assertTrue(boolean0);
      assertEquals(32, streamTokenizer0.ttype);
      assertEquals(0.0, streamTokenizer0.nval, 0.01);
      
      jSTerm0.makeFunction();
      assertEquals(1, streamTokenizer0.lineno());
      assertEquals("Token[' '], line 1", streamTokenizer0.toString());
      assertFalse(jSTerm0.isEmpty());
      assertTrue(jSTerm0.isFunction());
      assertFalse(jSTerm0.isConstant());
      assertEquals(10, jSTerm0.capacity());
      assertEquals("[jFxA%Rdj8%, Token[' '], line 1]", jSTerm0.toString());
      assertFalse(jSTerm0.isVariable());
      assertEquals(2, jSTerm0.size());
      assertFalse(jSTerm0.isEval());
      assertEquals(32, streamTokenizer0.ttype);
      assertEquals(0.0, streamTokenizer0.nval, 0.01);
      
      // Undeclared exception!
      try { 
        jSTerm0.print();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.io.StreamTokenizer cannot be cast to umd.cs.shop.JSTerm
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      assertEquals(0, jSTerm0.size());
      assertFalse(jSTerm0.isEval());
      assertFalse(jSTerm0.isFunction());
      assertEquals(10, jSTerm0.capacity());
      assertFalse(jSTerm0.isConstant());
      assertTrue(jSTerm0.isEmpty());
      assertEquals("[]", jSTerm0.toString());
      assertFalse(jSTerm0.isVariable());
      assertNotNull(jSTerm0);
      
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      assertEquals(0, jSSubstitution0.size());
      assertTrue(jSSubstitution0.isEmpty());
      assertFalse(jSSubstitution0.fail());
      assertEquals("[]", jSSubstitution0.toString());
      assertEquals(10, jSSubstitution0.capacity());
      assertNotNull(jSSubstitution0);
      
      boolean boolean0 = jSSubstitution0.add((Object) jSTerm0);
      assertEquals(0, jSTerm0.size());
      assertFalse(jSTerm0.isEval());
      assertFalse(jSTerm0.isFunction());
      assertEquals(10, jSTerm0.capacity());
      assertFalse(jSTerm0.isConstant());
      assertTrue(jSTerm0.isEmpty());
      assertEquals("[]", jSTerm0.toString());
      assertFalse(jSTerm0.isVariable());
      assertEquals(1, jSSubstitution0.size());
      assertFalse(jSSubstitution0.fail());
      assertFalse(jSSubstitution0.isEmpty());
      assertEquals(10, jSSubstitution0.capacity());
      assertEquals("[[]]", jSSubstitution0.toString());
      assertTrue(boolean0);
      
      // Undeclared exception!
      try { 
        jSTerm0.applySubstitutionT(jSSubstitution0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      assertTrue(jSSubstitution0.isEmpty());
      assertEquals(10, jSSubstitution0.capacity());
      assertEquals("[]", jSSubstitution0.toString());
      assertFalse(jSSubstitution0.fail());
      assertEquals(0, jSSubstitution0.size());
      assertNotNull(jSSubstitution0);
      
      StringReader stringReader0 = new StringReader("jFxA%Rdj8% jSYG> MR");
      assertNotNull(stringReader0);
      
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      assertEquals("Token[NOTHING], line 1", streamTokenizer0.toString());
      assertEquals(1, streamTokenizer0.lineno());
      assertNotNull(streamTokenizer0);
      assertEquals(0.0, streamTokenizer0.nval, 0.01);
      assertEquals((-4), streamTokenizer0.ttype);
      
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      assertEquals(1, streamTokenizer0.lineno());
      assertEquals("Token[' '], line 1", streamTokenizer0.toString());
      assertFalse(jSTerm0.isVariable());
      assertEquals(10, jSTerm0.capacity());
      assertEquals("[jFxA%Rdj8%]", jSTerm0.toString());
      assertFalse(jSTerm0.isFunction());
      assertFalse(jSTerm0.isEmpty());
      assertTrue(jSTerm0.isConstant());
      assertEquals(1, jSTerm0.size());
      assertFalse(jSTerm0.isEval());
      assertNotNull(jSTerm0);
      assertEquals(32, streamTokenizer0.ttype);
      assertEquals(0.0, streamTokenizer0.nval, 0.01);
      
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      assertEquals(0, jSSubstitution1.size());
      assertEquals(10, jSSubstitution1.capacity());
      assertEquals("[]", jSSubstitution1.toString());
      assertTrue(jSSubstitution1.isEmpty());
      assertFalse(jSSubstitution1.fail());
      assertNotNull(jSSubstitution1);
      assertTrue(jSSubstitution1.equals((Object)jSSubstitution0));
      
      JSTerm jSTerm1 = jSSubstitution1.instance(jSTerm0);
      assertEquals(1, streamTokenizer0.lineno());
      assertEquals("Token[' '], line 1", streamTokenizer0.toString());
      assertFalse(jSTerm0.isVariable());
      assertEquals(10, jSTerm0.capacity());
      assertEquals("[jFxA%Rdj8%]", jSTerm0.toString());
      assertFalse(jSTerm0.isFunction());
      assertFalse(jSTerm0.isEmpty());
      assertTrue(jSTerm0.isConstant());
      assertEquals(1, jSTerm0.size());
      assertFalse(jSTerm0.isEval());
      assertEquals(0, jSSubstitution1.size());
      assertEquals(10, jSSubstitution1.capacity());
      assertEquals("[]", jSSubstitution1.toString());
      assertTrue(jSSubstitution1.isEmpty());
      assertFalse(jSSubstitution1.fail());
      assertEquals("[jFxA%Rdj8%]", jSTerm1.toString());
      assertEquals(10, jSTerm1.capacity());
      assertFalse(jSTerm1.isFunction());
      assertFalse(jSTerm1.isEmpty());
      assertFalse(jSTerm1.isEval());
      assertEquals(1, jSTerm1.size());
      assertTrue(jSTerm1.isConstant());
      assertFalse(jSTerm1.isVariable());
      assertSame(jSTerm0, jSTerm1);
      assertNotSame(jSSubstitution1, jSSubstitution0);
      assertSame(jSTerm1, jSTerm0);
      assertNotNull(jSTerm1);
      assertTrue(jSSubstitution1.equals((Object)jSSubstitution0));
      assertEquals(32, streamTokenizer0.ttype);
      assertEquals(0.0, streamTokenizer0.nval, 0.01);
      
      JSSubstitution jSSubstitution2 = (JSSubstitution)jSSubstitution1.clone();
      assertEquals(0, jSSubstitution1.size());
      assertEquals(10, jSSubstitution1.capacity());
      assertEquals("[]", jSSubstitution1.toString());
      assertTrue(jSSubstitution1.isEmpty());
      assertFalse(jSSubstitution1.fail());
      assertTrue(jSSubstitution2.isEmpty());
      assertEquals(0, jSSubstitution2.capacity());
      assertEquals("[]", jSSubstitution2.toString());
      assertFalse(jSSubstitution2.fail());
      assertEquals(0, jSSubstitution2.size());
      assertNotSame(jSSubstitution1, jSSubstitution0);
      assertNotSame(jSSubstitution1, jSSubstitution2);
      assertNotSame(jSSubstitution2, jSSubstitution1);
      assertNotSame(jSSubstitution2, jSSubstitution0);
      assertNotNull(jSSubstitution2);
      assertTrue(jSSubstitution1.equals((Object)jSSubstitution0));
      assertTrue(jSSubstitution2.equals((Object)jSSubstitution0));
      assertTrue(jSSubstitution2.equals((Object)jSSubstitution1));
      
      JSJshopVars.greaterT = 32;
      jSTerm0.makeEval(true);
      assertEquals(1, streamTokenizer0.lineno());
      assertEquals("Token[' '], line 1", streamTokenizer0.toString());
      assertFalse(jSTerm0.isVariable());
      assertEquals(10, jSTerm0.capacity());
      assertEquals("[jFxA%Rdj8%]", jSTerm0.toString());
      assertFalse(jSTerm0.isFunction());
      assertFalse(jSTerm0.isEmpty());
      assertTrue(jSTerm0.isEval());
      assertTrue(jSTerm0.isConstant());
      assertEquals(1, jSTerm0.size());
      assertSame(jSTerm0, jSTerm1);
      assertEquals(32, streamTokenizer0.ttype);
      assertEquals(0.0, streamTokenizer0.nval, 0.01);
      
      boolean boolean0 = jSTerm0.equals(jSTerm1);
      assertEquals(1, streamTokenizer0.lineno());
      assertEquals("Token[' '], line 1", streamTokenizer0.toString());
      assertFalse(jSTerm0.isVariable());
      assertEquals(10, jSTerm0.capacity());
      assertEquals("[jFxA%Rdj8%]", jSTerm0.toString());
      assertFalse(jSTerm0.isFunction());
      assertFalse(jSTerm0.isEmpty());
      assertTrue(jSTerm0.isEval());
      assertTrue(jSTerm0.isConstant());
      assertEquals(1, jSTerm0.size());
      assertEquals(0, jSSubstitution1.size());
      assertEquals(10, jSSubstitution1.capacity());
      assertEquals("[]", jSSubstitution1.toString());
      assertTrue(jSSubstitution1.isEmpty());
      assertFalse(jSSubstitution1.fail());
      assertEquals("[jFxA%Rdj8%]", jSTerm1.toString());
      assertEquals(10, jSTerm1.capacity());
      assertFalse(jSTerm1.isFunction());
      assertFalse(jSTerm1.isEmpty());
      assertEquals(1, jSTerm1.size());
      assertTrue(jSTerm1.isEval());
      assertTrue(jSTerm1.isConstant());
      assertFalse(jSTerm1.isVariable());
      assertTrue(boolean0);
      assertSame(jSTerm0, jSTerm1);
      assertNotSame(jSSubstitution1, jSSubstitution0);
      assertNotSame(jSSubstitution1, jSSubstitution2);
      assertSame(jSTerm1, jSTerm0);
      assertTrue(jSSubstitution1.equals((Object)jSSubstitution2));
      assertTrue(jSSubstitution1.equals((Object)jSSubstitution0));
      assertEquals(32, streamTokenizer0.ttype);
      assertEquals(0.0, streamTokenizer0.nval, 0.01);
      
      JSTerm jSTerm2 = jSTerm1.call();
      assertEquals(1, streamTokenizer0.lineno());
      assertEquals("Token[' '], line 1", streamTokenizer0.toString());
      assertFalse(jSTerm0.isVariable());
      assertEquals(10, jSTerm0.capacity());
      assertEquals("[jFxA%Rdj8%]", jSTerm0.toString());
      assertFalse(jSTerm0.isFunction());
      assertFalse(jSTerm0.isEmpty());
      assertTrue(jSTerm0.isEval());
      assertTrue(jSTerm0.isConstant());
      assertEquals(1, jSTerm0.size());
      assertEquals(0, jSSubstitution1.size());
      assertEquals(10, jSSubstitution1.capacity());
      assertEquals("[]", jSSubstitution1.toString());
      assertTrue(jSSubstitution1.isEmpty());
      assertFalse(jSSubstitution1.fail());
      assertEquals("[jFxA%Rdj8%]", jSTerm1.toString());
      assertEquals(10, jSTerm1.capacity());
      assertFalse(jSTerm1.isFunction());
      assertFalse(jSTerm1.isEmpty());
      assertEquals(1, jSTerm1.size());
      assertTrue(jSTerm1.isEval());
      assertTrue(jSTerm1.isConstant());
      assertFalse(jSTerm1.isVariable());
      assertTrue(jSTerm2.isEval());
      assertEquals("[jFxA%Rdj8%]", jSTerm2.toString());
      assertTrue(jSTerm2.isConstant());
      assertFalse(jSTerm2.isVariable());
      assertEquals(1, jSTerm2.capacity());
      assertEquals(1, jSTerm2.size());
      assertFalse(jSTerm2.isFunction());
      assertFalse(jSTerm2.isEmpty());
      assertSame(jSTerm0, jSTerm1);
      assertNotSame(jSTerm0, jSTerm2);
      assertNotSame(jSSubstitution1, jSSubstitution0);
      assertNotSame(jSSubstitution1, jSSubstitution2);
      assertSame(jSTerm1, jSTerm0);
      assertNotSame(jSTerm1, jSTerm2);
      assertNotSame(jSTerm2, jSTerm0);
      assertNotSame(jSTerm2, jSTerm1);
      assertNotNull(jSTerm2);
      assertTrue(jSSubstitution1.equals((Object)jSSubstitution2));
      assertTrue(jSSubstitution1.equals((Object)jSSubstitution0));
      assertTrue(jSTerm2.equals((Object)jSTerm0));
      assertTrue(jSTerm2.equals((Object)jSTerm1));
      assertEquals(32, streamTokenizer0.ttype);
      assertEquals(0.0, streamTokenizer0.nval, 0.01);
      
      System.setCurrentTimeMillis(32);
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      assertEquals(0, jSSubstitution0.size());
      assertEquals("[]", jSSubstitution0.toString());
      assertEquals(10, jSSubstitution0.capacity());
      assertFalse(jSSubstitution0.fail());
      assertTrue(jSSubstitution0.isEmpty());
      assertNotNull(jSSubstitution0);
      
      StringReader stringReader0 = new StringReader("jFxA%Rdj8% jSYG> MR");
      assertNotNull(stringReader0);
      
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      assertEquals(1, streamTokenizer0.lineno());
      assertEquals("Token[NOTHING], line 1", streamTokenizer0.toString());
      assertNotNull(streamTokenizer0);
      assertEquals(0.0, streamTokenizer0.nval, 0.01);
      assertEquals((-4), streamTokenizer0.ttype);
      
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      assertEquals(1, streamTokenizer0.lineno());
      assertEquals("Token[' '], line 1", streamTokenizer0.toString());
      assertFalse(jSTerm0.isEmpty());
      assertFalse(jSTerm0.isEval());
      assertEquals(1, jSTerm0.size());
      assertFalse(jSTerm0.isFunction());
      assertEquals(10, jSTerm0.capacity());
      assertEquals("[jFxA%Rdj8%]", jSTerm0.toString());
      assertFalse(jSTerm0.isVariable());
      assertTrue(jSTerm0.isConstant());
      assertNotNull(jSTerm0);
      assertEquals(0.0, streamTokenizer0.nval, 0.01);
      assertEquals(32, streamTokenizer0.ttype);
      
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      assertFalse(jSSubstitution1.fail());
      assertTrue(jSSubstitution1.isEmpty());
      assertEquals(0, jSSubstitution1.size());
      assertEquals(10, jSSubstitution1.capacity());
      assertEquals("[]", jSSubstitution1.toString());
      assertNotNull(jSSubstitution1);
      assertTrue(jSSubstitution1.equals((Object)jSSubstitution0));
      
      JSTerm jSTerm1 = jSSubstitution1.instance(jSTerm0);
      assertEquals(1, streamTokenizer0.lineno());
      assertEquals("Token[' '], line 1", streamTokenizer0.toString());
      assertFalse(jSTerm0.isEmpty());
      assertFalse(jSTerm0.isEval());
      assertEquals(1, jSTerm0.size());
      assertFalse(jSTerm0.isFunction());
      assertEquals(10, jSTerm0.capacity());
      assertEquals("[jFxA%Rdj8%]", jSTerm0.toString());
      assertFalse(jSTerm0.isVariable());
      assertTrue(jSTerm0.isConstant());
      assertFalse(jSSubstitution1.fail());
      assertTrue(jSSubstitution1.isEmpty());
      assertEquals(0, jSSubstitution1.size());
      assertEquals(10, jSSubstitution1.capacity());
      assertEquals("[]", jSSubstitution1.toString());
      assertFalse(jSTerm1.isEval());
      assertFalse(jSTerm1.isFunction());
      assertFalse(jSTerm1.isVariable());
      assertTrue(jSTerm1.isConstant());
      assertEquals("[jFxA%Rdj8%]", jSTerm1.toString());
      assertEquals(10, jSTerm1.capacity());
      assertFalse(jSTerm1.isEmpty());
      assertEquals(1, jSTerm1.size());
      assertSame(jSTerm0, jSTerm1);
      assertNotSame(jSSubstitution1, jSSubstitution0);
      assertSame(jSTerm1, jSTerm0);
      assertNotNull(jSTerm1);
      assertTrue(jSSubstitution1.equals((Object)jSSubstitution0));
      assertEquals(0.0, streamTokenizer0.nval, 0.01);
      assertEquals(32, streamTokenizer0.ttype);
      
      JSSubstitution jSSubstitution2 = (JSSubstitution)jSSubstitution1.clone();
      assertFalse(jSSubstitution1.fail());
      assertTrue(jSSubstitution1.isEmpty());
      assertEquals(0, jSSubstitution1.size());
      assertEquals(10, jSSubstitution1.capacity());
      assertEquals("[]", jSSubstitution1.toString());
      assertEquals("[]", jSSubstitution2.toString());
      assertTrue(jSSubstitution2.isEmpty());
      assertFalse(jSSubstitution2.fail());
      assertEquals(0, jSSubstitution2.capacity());
      assertEquals(0, jSSubstitution2.size());
      assertNotSame(jSSubstitution1, jSSubstitution2);
      assertNotSame(jSSubstitution1, jSSubstitution0);
      assertNotSame(jSSubstitution2, jSSubstitution1);
      assertNotSame(jSSubstitution2, jSSubstitution0);
      assertNotNull(jSSubstitution2);
      assertTrue(jSSubstitution1.equals((Object)jSSubstitution0));
      assertTrue(jSSubstitution2.equals((Object)jSSubstitution0));
      assertTrue(jSSubstitution2.equals((Object)jSSubstitution1));
      
      jSTerm0.makeEval(true);
      assertEquals(1, streamTokenizer0.lineno());
      assertEquals("Token[' '], line 1", streamTokenizer0.toString());
      assertFalse(jSTerm0.isEmpty());
      assertEquals(1, jSTerm0.size());
      assertFalse(jSTerm0.isFunction());
      assertEquals(10, jSTerm0.capacity());
      assertEquals("[jFxA%Rdj8%]", jSTerm0.toString());
      assertTrue(jSTerm0.isEval());
      assertFalse(jSTerm0.isVariable());
      assertTrue(jSTerm0.isConstant());
      assertSame(jSTerm0, jSTerm1);
      assertEquals(0.0, streamTokenizer0.nval, 0.01);
      assertEquals(32, streamTokenizer0.ttype);
      
      jSTerm1.makeFunction();
      assertEquals(1, streamTokenizer0.lineno());
      assertEquals("Token[' '], line 1", streamTokenizer0.toString());
      assertFalse(jSTerm0.isConstant());
      assertFalse(jSTerm0.isEmpty());
      assertEquals(1, jSTerm0.size());
      assertTrue(jSTerm0.isFunction());
      assertEquals(10, jSTerm0.capacity());
      assertEquals("[jFxA%Rdj8%]", jSTerm0.toString());
      assertTrue(jSTerm0.isEval());
      assertFalse(jSTerm0.isVariable());
      assertFalse(jSSubstitution1.fail());
      assertTrue(jSSubstitution1.isEmpty());
      assertEquals(0, jSSubstitution1.size());
      assertEquals(10, jSSubstitution1.capacity());
      assertEquals("[]", jSSubstitution1.toString());
      assertFalse(jSTerm1.isVariable());
      assertTrue(jSTerm1.isEval());
      assertEquals("[jFxA%Rdj8%]", jSTerm1.toString());
      assertEquals(10, jSTerm1.capacity());
      assertTrue(jSTerm1.isFunction());
      assertFalse(jSTerm1.isConstant());
      assertFalse(jSTerm1.isEmpty());
      assertEquals(1, jSTerm1.size());
      assertSame(jSTerm0, jSTerm1);
      assertNotSame(jSSubstitution1, jSSubstitution2);
      assertNotSame(jSSubstitution1, jSSubstitution0);
      assertSame(jSTerm1, jSTerm0);
      assertTrue(jSSubstitution1.equals((Object)jSSubstitution0));
      assertTrue(jSSubstitution1.equals((Object)jSSubstitution2));
      assertEquals(0.0, streamTokenizer0.nval, 0.01);
      assertEquals(32, streamTokenizer0.ttype);
      
      boolean boolean0 = jSTerm0.isGround();
      assertEquals(1, streamTokenizer0.lineno());
      assertEquals("Token[' '], line 1", streamTokenizer0.toString());
      assertFalse(jSTerm0.isConstant());
      assertFalse(jSTerm0.isEmpty());
      assertEquals(1, jSTerm0.size());
      assertTrue(jSTerm0.isFunction());
      assertEquals(10, jSTerm0.capacity());
      assertEquals("[jFxA%Rdj8%]", jSTerm0.toString());
      assertTrue(jSTerm0.isEval());
      assertFalse(jSTerm0.isVariable());
      assertTrue(boolean0);
      assertSame(jSTerm0, jSTerm1);
      assertEquals(0.0, streamTokenizer0.nval, 0.01);
      assertEquals(32, streamTokenizer0.ttype);
      
      jSTerm1.makeVariable();
      assertEquals(1, streamTokenizer0.lineno());
      assertEquals("Token[' '], line 1", streamTokenizer0.toString());
      assertFalse(jSTerm0.isConstant());
      assertFalse(jSTerm0.isEmpty());
      assertTrue(jSTerm0.isVariable());
      assertEquals(1, jSTerm0.size());
      assertFalse(jSTerm0.isFunction());
      assertEquals(10, jSTerm0.capacity());
      assertEquals("[jFxA%Rdj8%]", jSTerm0.toString());
      assertTrue(jSTerm0.isEval());
      assertFalse(jSSubstitution1.fail());
      assertTrue(jSSubstitution1.isEmpty());
      assertEquals(0, jSSubstitution1.size());
      assertEquals(10, jSSubstitution1.capacity());
      assertEquals("[]", jSSubstitution1.toString());
      assertTrue(jSTerm1.isVariable());
      assertFalse(jSTerm1.isFunction());
      assertTrue(jSTerm1.isEval());
      assertEquals("[jFxA%Rdj8%]", jSTerm1.toString());
      assertEquals(10, jSTerm1.capacity());
      assertFalse(jSTerm1.isConstant());
      assertFalse(jSTerm1.isEmpty());
      assertEquals(1, jSTerm1.size());
      assertSame(jSTerm0, jSTerm1);
      assertNotSame(jSSubstitution1, jSSubstitution2);
      assertNotSame(jSSubstitution1, jSSubstitution0);
      assertSame(jSTerm1, jSTerm0);
      assertTrue(jSSubstitution1.equals((Object)jSSubstitution0));
      assertTrue(jSSubstitution1.equals((Object)jSSubstitution2));
      assertEquals(0.0, streamTokenizer0.nval, 0.01);
      assertEquals(32, streamTokenizer0.ttype);
      
      boolean boolean1 = jSTerm1.equals(jSTerm0);
      assertEquals(1, streamTokenizer0.lineno());
      assertEquals("Token[' '], line 1", streamTokenizer0.toString());
      assertFalse(jSTerm0.isConstant());
      assertFalse(jSTerm0.isEmpty());
      assertTrue(jSTerm0.isVariable());
      assertEquals(1, jSTerm0.size());
      assertFalse(jSTerm0.isFunction());
      assertEquals(10, jSTerm0.capacity());
      assertEquals("[jFxA%Rdj8%]", jSTerm0.toString());
      assertTrue(jSTerm0.isEval());
      assertFalse(jSSubstitution1.fail());
      assertTrue(jSSubstitution1.isEmpty());
      assertEquals(0, jSSubstitution1.size());
      assertEquals(10, jSSubstitution1.capacity());
      assertEquals("[]", jSSubstitution1.toString());
      assertTrue(jSTerm1.isVariable());
      assertFalse(jSTerm1.isFunction());
      assertTrue(jSTerm1.isEval());
      assertEquals("[jFxA%Rdj8%]", jSTerm1.toString());
      assertEquals(10, jSTerm1.capacity());
      assertFalse(jSTerm1.isConstant());
      assertFalse(jSTerm1.isEmpty());
      assertEquals(1, jSTerm1.size());
      assertTrue(boolean1);
      assertSame(jSTerm0, jSTerm1);
      assertNotSame(jSSubstitution1, jSSubstitution2);
      assertNotSame(jSSubstitution1, jSSubstitution0);
      assertSame(jSTerm1, jSTerm0);
      assertTrue(jSSubstitution1.equals((Object)jSSubstitution0));
      assertTrue(jSSubstitution1.equals((Object)jSSubstitution2));
      assertTrue(boolean1 == boolean0);
      assertEquals(0.0, streamTokenizer0.nval, 0.01);
      assertEquals(32, streamTokenizer0.ttype);
      
      boolean boolean2 = jSTerm1.isGround();
      assertEquals(1, streamTokenizer0.lineno());
      assertEquals("Token[' '], line 1", streamTokenizer0.toString());
      assertFalse(jSTerm0.isConstant());
      assertFalse(jSTerm0.isEmpty());
      assertTrue(jSTerm0.isVariable());
      assertEquals(1, jSTerm0.size());
      assertFalse(jSTerm0.isFunction());
      assertEquals(10, jSTerm0.capacity());
      assertEquals("[jFxA%Rdj8%]", jSTerm0.toString());
      assertTrue(jSTerm0.isEval());
      assertFalse(jSSubstitution1.fail());
      assertTrue(jSSubstitution1.isEmpty());
      assertEquals(0, jSSubstitution1.size());
      assertEquals(10, jSSubstitution1.capacity());
      assertEquals("[]", jSSubstitution1.toString());
      assertTrue(jSTerm1.isVariable());
      assertFalse(jSTerm1.isFunction());
      assertTrue(jSTerm1.isEval());
      assertEquals("[jFxA%Rdj8%]", jSTerm1.toString());
      assertEquals(10, jSTerm1.capacity());
      assertFalse(jSTerm1.isConstant());
      assertFalse(jSTerm1.isEmpty());
      assertEquals(1, jSTerm1.size());
      assertFalse(boolean2);
      assertSame(jSTerm0, jSTerm1);
      assertNotSame(jSSubstitution1, jSSubstitution2);
      assertNotSame(jSSubstitution1, jSSubstitution0);
      assertSame(jSTerm1, jSTerm0);
      assertTrue(jSSubstitution1.equals((Object)jSSubstitution0));
      assertTrue(jSSubstitution1.equals((Object)jSSubstitution2));
      assertFalse(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      assertEquals(0.0, streamTokenizer0.nval, 0.01);
      assertEquals(32, streamTokenizer0.ttype);
      
      JSTerm jSTerm2 = jSTerm1.call();
      assertEquals(1, streamTokenizer0.lineno());
      assertEquals("Token[' '], line 1", streamTokenizer0.toString());
      assertFalse(jSTerm0.isConstant());
      assertFalse(jSTerm0.isEmpty());
      assertTrue(jSTerm0.isVariable());
      assertEquals(1, jSTerm0.size());
      assertFalse(jSTerm0.isFunction());
      assertEquals(10, jSTerm0.capacity());
      assertEquals("[jFxA%Rdj8%]", jSTerm0.toString());
      assertTrue(jSTerm0.isEval());
      assertFalse(jSSubstitution1.fail());
      assertTrue(jSSubstitution1.isEmpty());
      assertEquals(0, jSSubstitution1.size());
      assertEquals(10, jSSubstitution1.capacity());
      assertEquals("[]", jSSubstitution1.toString());
      assertTrue(jSTerm1.isVariable());
      assertFalse(jSTerm1.isFunction());
      assertTrue(jSTerm1.isEval());
      assertEquals("[jFxA%Rdj8%]", jSTerm1.toString());
      assertEquals(10, jSTerm1.capacity());
      assertFalse(jSTerm1.isConstant());
      assertFalse(jSTerm1.isEmpty());
      assertEquals(1, jSTerm1.size());
      assertTrue(jSTerm2.isEmpty());
      assertEquals("[]", jSTerm2.toString());
      assertFalse(jSTerm2.isVariable());
      assertEquals(0, jSTerm2.size());
      assertFalse(jSTerm2.isEval());
      assertFalse(jSTerm2.isFunction());
      assertEquals(10, jSTerm2.capacity());
      assertFalse(jSTerm2.isConstant());
      assertSame(jSTerm0, jSTerm1);
      assertNotSame(jSTerm0, jSTerm2);
      assertNotSame(jSSubstitution1, jSSubstitution2);
      assertNotSame(jSSubstitution1, jSSubstitution0);
      assertSame(jSTerm1, jSTerm0);
      assertNotSame(jSTerm1, jSTerm2);
      assertNotSame(jSTerm2, jSTerm0);
      assertNotSame(jSTerm2, jSTerm1);
      assertNotNull(jSTerm2);
      assertTrue(jSSubstitution1.equals((Object)jSSubstitution0));
      assertTrue(jSSubstitution1.equals((Object)jSSubstitution2));
      assertFalse(jSTerm2.equals((Object)jSTerm0));
      assertFalse(jSTerm2.equals((Object)jSTerm1));
      assertEquals(0.0, streamTokenizer0.nval, 0.01);
      assertEquals(32, streamTokenizer0.ttype);
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      assertTrue(jSTerm0.isEmpty());
      assertFalse(jSTerm0.isVariable());
      assertEquals(10, jSTerm0.capacity());
      assertFalse(jSTerm0.isFunction());
      assertFalse(jSTerm0.isEval());
      assertEquals(0, jSTerm0.size());
      assertFalse(jSTerm0.isConstant());
      assertEquals("[]", jSTerm0.toString());
      assertNotNull(jSTerm0);
      
      JSTerm jSTerm1 = new JSTerm();
      assertFalse(jSTerm1.isConstant());
      assertEquals(0, jSTerm1.size());
      assertFalse(jSTerm1.isEval());
      assertFalse(jSTerm1.isVariable());
      assertTrue(jSTerm1.isEmpty());
      assertEquals(10, jSTerm1.capacity());
      assertFalse(jSTerm1.isFunction());
      assertEquals("[]", jSTerm1.toString());
      assertNotNull(jSTerm1);
      assertTrue(jSTerm1.equals((Object)jSTerm0));
      
      JSTerm jSTerm2 = new JSTerm();
      assertTrue(jSTerm2.isEmpty());
      assertFalse(jSTerm2.isVariable());
      assertFalse(jSTerm2.isFunction());
      assertFalse(jSTerm2.isEval());
      assertEquals(0, jSTerm2.size());
      assertEquals(10, jSTerm2.capacity());
      assertEquals("[]", jSTerm2.toString());
      assertFalse(jSTerm2.isConstant());
      assertNotNull(jSTerm2);
      assertTrue(jSTerm2.equals((Object)jSTerm0));
      assertTrue(jSTerm2.equals((Object)jSTerm1));
      
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      assertEquals(0, jSSubstitution0.size());
      assertEquals("[]", jSSubstitution0.toString());
      assertTrue(jSSubstitution0.isEmpty());
      assertFalse(jSSubstitution0.fail());
      assertEquals(10, jSSubstitution0.capacity());
      assertNotNull(jSSubstitution0);
      
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      assertEquals("[]", jSSubstitution1.toString());
      assertTrue(jSSubstitution1.isEmpty());
      assertFalse(jSSubstitution1.fail());
      assertEquals(10, jSSubstitution1.capacity());
      assertEquals(0, jSSubstitution1.size());
      assertNotNull(jSSubstitution1);
      assertTrue(jSSubstitution1.equals((Object)jSSubstitution0));
      
      jSSubstitution0.addElements(jSSubstitution1);
      assertEquals(0, jSSubstitution0.size());
      assertEquals("[]", jSSubstitution0.toString());
      assertTrue(jSSubstitution0.isEmpty());
      assertFalse(jSSubstitution0.fail());
      assertEquals(10, jSSubstitution0.capacity());
      assertEquals("[]", jSSubstitution1.toString());
      assertTrue(jSSubstitution1.isEmpty());
      assertFalse(jSSubstitution1.fail());
      assertEquals(10, jSSubstitution1.capacity());
      assertEquals(0, jSSubstitution1.size());
      assertNotSame(jSSubstitution0, jSSubstitution1);
      assertNotSame(jSSubstitution1, jSSubstitution0);
      assertTrue(jSSubstitution0.equals((Object)jSSubstitution1));
      assertTrue(jSSubstitution1.equals((Object)jSSubstitution0));
      
      JSSubstitution jSSubstitution2 = jSTerm1.matches(jSTerm2, jSSubstitution1);
      assertFalse(jSTerm1.isConstant());
      assertEquals(0, jSTerm1.size());
      assertFalse(jSTerm1.isEval());
      assertFalse(jSTerm1.isVariable());
      assertTrue(jSTerm1.isEmpty());
      assertEquals(10, jSTerm1.capacity());
      assertFalse(jSTerm1.isFunction());
      assertEquals("[]", jSTerm1.toString());
      assertTrue(jSTerm2.isEmpty());
      assertFalse(jSTerm2.isVariable());
      assertFalse(jSTerm2.isFunction());
      assertFalse(jSTerm2.isEval());
      assertEquals(0, jSTerm2.size());
      assertEquals(10, jSTerm2.capacity());
      assertEquals("[]", jSTerm2.toString());
      assertFalse(jSTerm2.isConstant());
      assertEquals("[]", jSSubstitution1.toString());
      assertTrue(jSSubstitution1.isEmpty());
      assertFalse(jSSubstitution1.fail());
      assertEquals(10, jSSubstitution1.capacity());
      assertEquals(0, jSSubstitution1.size());
      assertEquals("[]", jSSubstitution2.toString());
      assertTrue(jSSubstitution2.isEmpty());
      assertEquals(0, jSSubstitution2.size());
      assertTrue(jSSubstitution2.fail());
      assertEquals(10, jSSubstitution2.capacity());
      assertNotSame(jSTerm1, jSTerm2);
      assertNotSame(jSTerm1, jSTerm0);
      assertNotSame(jSTerm2, jSTerm1);
      assertNotSame(jSTerm2, jSTerm0);
      assertNotSame(jSSubstitution1, jSSubstitution0);
      assertNotSame(jSSubstitution1, jSSubstitution2);
      assertNotSame(jSSubstitution2, jSSubstitution1);
      assertNotSame(jSSubstitution2, jSSubstitution0);
      assertNotNull(jSSubstitution2);
      assertTrue(jSTerm1.equals((Object)jSTerm0));
      assertTrue(jSTerm1.equals((Object)jSTerm2));
      assertTrue(jSTerm2.equals((Object)jSTerm0));
      assertTrue(jSTerm2.equals((Object)jSTerm1));
      assertTrue(jSSubstitution1.equals((Object)jSSubstitution0));
      assertTrue(jSSubstitution2.equals((Object)jSSubstitution1));
      assertTrue(jSSubstitution2.equals((Object)jSSubstitution0));
      
      JSSubstitution jSSubstitution3 = new JSSubstitution();
      assertEquals("[]", jSSubstitution3.toString());
      assertTrue(jSSubstitution3.isEmpty());
      assertEquals(10, jSSubstitution3.capacity());
      assertFalse(jSSubstitution3.fail());
      assertEquals(0, jSSubstitution3.size());
      assertNotNull(jSSubstitution3);
      assertTrue(jSSubstitution3.equals((Object)jSSubstitution0));
      assertTrue(jSSubstitution3.equals((Object)jSSubstitution2));
      assertTrue(jSSubstitution3.equals((Object)jSSubstitution1));
      
      jSTerm1.makeVariable();
      assertFalse(jSTerm1.isConstant());
      assertEquals(0, jSTerm1.size());
      assertFalse(jSTerm1.isEval());
      assertTrue(jSTerm1.isVariable());
      assertTrue(jSTerm1.isEmpty());
      assertEquals(10, jSTerm1.capacity());
      assertFalse(jSTerm1.isFunction());
      assertEquals("[]", jSTerm1.toString());
      assertNotSame(jSTerm1, jSTerm2);
      assertNotSame(jSTerm1, jSTerm0);
      assertTrue(jSTerm1.equals((Object)jSTerm0));
      assertTrue(jSTerm1.equals((Object)jSTerm2));
      
      boolean boolean0 = jSSubstitution3.fail();
      assertEquals("[]", jSSubstitution3.toString());
      assertTrue(jSSubstitution3.isEmpty());
      assertEquals(10, jSSubstitution3.capacity());
      assertFalse(jSSubstitution3.fail());
      assertEquals(0, jSSubstitution3.size());
      assertFalse(boolean0);
      assertNotSame(jSSubstitution3, jSSubstitution1);
      assertNotSame(jSSubstitution3, jSSubstitution0);
      assertNotSame(jSSubstitution3, jSSubstitution2);
      assertTrue(jSSubstitution3.equals((Object)jSSubstitution0));
      assertTrue(jSSubstitution3.equals((Object)jSSubstitution2));
      assertTrue(jSSubstitution3.equals((Object)jSSubstitution1));
      
      JSSubstitution jSSubstitution4 = (JSSubstitution)jSSubstitution3.clone();
      assertEquals("[]", jSSubstitution3.toString());
      assertTrue(jSSubstitution3.isEmpty());
      assertEquals(10, jSSubstitution3.capacity());
      assertFalse(jSSubstitution3.fail());
      assertEquals(0, jSSubstitution3.size());
      assertEquals(0, jSSubstitution4.size());
      assertEquals("[]", jSSubstitution4.toString());
      assertEquals(0, jSSubstitution4.capacity());
      assertFalse(jSSubstitution4.fail());
      assertTrue(jSSubstitution4.isEmpty());
      assertNotSame(jSSubstitution3, jSSubstitution1);
      assertNotSame(jSSubstitution3, jSSubstitution0);
      assertNotSame(jSSubstitution3, jSSubstitution2);
      assertNotSame(jSSubstitution3, jSSubstitution4);
      assertNotSame(jSSubstitution4, jSSubstitution3);
      assertNotSame(jSSubstitution4, jSSubstitution0);
      assertNotSame(jSSubstitution4, jSSubstitution2);
      assertNotSame(jSSubstitution4, jSSubstitution1);
      assertNotNull(jSSubstitution4);
      assertTrue(jSSubstitution3.equals((Object)jSSubstitution0));
      assertTrue(jSSubstitution3.equals((Object)jSSubstitution2));
      assertTrue(jSSubstitution3.equals((Object)jSSubstitution1));
      assertTrue(jSSubstitution4.equals((Object)jSSubstitution2));
      assertTrue(jSSubstitution4.equals((Object)jSSubstitution3));
      assertTrue(jSSubstitution4.equals((Object)jSSubstitution1));
      assertTrue(jSSubstitution4.equals((Object)jSSubstitution0));
      
      JSSubstitution jSSubstitution5 = new JSSubstitution();
      assertEquals(0, jSSubstitution5.size());
      assertTrue(jSSubstitution5.isEmpty());
      assertFalse(jSSubstitution5.fail());
      assertEquals("[]", jSSubstitution5.toString());
      assertEquals(10, jSSubstitution5.capacity());
      assertNotNull(jSSubstitution5);
      assertTrue(jSSubstitution5.equals((Object)jSSubstitution0));
      assertTrue(jSSubstitution5.equals((Object)jSSubstitution4));
      assertTrue(jSSubstitution5.equals((Object)jSSubstitution1));
      assertTrue(jSSubstitution5.equals((Object)jSSubstitution2));
      assertTrue(jSSubstitution5.equals((Object)jSSubstitution3));
      
      JSSubstitution jSSubstitution6 = (JSSubstitution)jSSubstitution5.clone();
      assertEquals(0, jSSubstitution5.size());
      assertTrue(jSSubstitution5.isEmpty());
      assertFalse(jSSubstitution5.fail());
      assertEquals("[]", jSSubstitution5.toString());
      assertEquals(10, jSSubstitution5.capacity());
      assertEquals(0, jSSubstitution6.size());
      assertEquals("[]", jSSubstitution6.toString());
      assertEquals(0, jSSubstitution6.capacity());
      assertTrue(jSSubstitution6.isEmpty());
      assertFalse(jSSubstitution6.fail());
      assertNotSame(jSSubstitution5, jSSubstitution1);
      assertNotSame(jSSubstitution5, jSSubstitution3);
      assertNotSame(jSSubstitution5, jSSubstitution2);
      assertNotSame(jSSubstitution5, jSSubstitution4);
      assertNotSame(jSSubstitution5, jSSubstitution0);
      assertNotSame(jSSubstitution5, jSSubstitution6);
      assertNotSame(jSSubstitution6, jSSubstitution4);
      assertNotSame(jSSubstitution6, jSSubstitution5);
      assertNotSame(jSSubstitution6, jSSubstitution3);
      assertNotSame(jSSubstitution6, jSSubstitution0);
      assertNotSame(jSSubstitution6, jSSubstitution2);
      assertNotSame(jSSubstitution6, jSSubstitution1);
      assertNotNull(jSSubstitution6);
      assertTrue(jSSubstitution5.equals((Object)jSSubstitution0));
      assertTrue(jSSubstitution5.equals((Object)jSSubstitution4));
      assertTrue(jSSubstitution5.equals((Object)jSSubstitution1));
      assertTrue(jSSubstitution5.equals((Object)jSSubstitution2));
      assertTrue(jSSubstitution5.equals((Object)jSSubstitution3));
      assertTrue(jSSubstitution6.equals((Object)jSSubstitution5));
      assertTrue(jSSubstitution6.equals((Object)jSSubstitution3));
      assertTrue(jSSubstitution6.equals((Object)jSSubstitution2));
      assertTrue(jSSubstitution6.equals((Object)jSSubstitution1));
      assertTrue(jSSubstitution6.equals((Object)jSSubstitution4));
      assertTrue(jSSubstitution6.equals((Object)jSSubstitution0));
      
      JSSubstitution jSSubstitution7 = (JSSubstitution)jSSubstitution3.clone();
      assertEquals("[]", jSSubstitution3.toString());
      assertTrue(jSSubstitution3.isEmpty());
      assertEquals(10, jSSubstitution3.capacity());
      assertFalse(jSSubstitution3.fail());
      assertEquals(0, jSSubstitution3.size());
      assertFalse(jSSubstitution7.fail());
      assertEquals("[]", jSSubstitution7.toString());
      assertEquals(0, jSSubstitution7.size());
      assertEquals(0, jSSubstitution7.capacity());
      assertTrue(jSSubstitution7.isEmpty());
      assertNotSame(jSSubstitution3, jSSubstitution5);
      assertNotSame(jSSubstitution3, jSSubstitution1);
      assertNotSame(jSSubstitution3, jSSubstitution6);
      assertNotSame(jSSubstitution3, jSSubstitution0);
      assertNotSame(jSSubstitution3, jSSubstitution2);
      assertNotSame(jSSubstitution3, jSSubstitution7);
      assertNotSame(jSSubstitution3, jSSubstitution4);
      assertNotSame(jSSubstitution7, jSSubstitution5);
      assertNotSame(jSSubstitution7, jSSubstitution4);
      assertNotSame(jSSubstitution7, jSSubstitution3);
      assertNotSame(jSSubstitution7, jSSubstitution6);
      assertNotSame(jSSubstitution7, jSSubstitution0);
      assertNotSame(jSSubstitution7, jSSubstitution1);
      assertNotSame(jSSubstitution7, jSSubstitution2);
      assertNotNull(jSSubstitution7);
      assertTrue(jSSubstitution3.equals((Object)jSSubstitution0));
      assertTrue(jSSubstitution3.equals((Object)jSSubstitution2));
      assertTrue(jSSubstitution3.equals((Object)jSSubstitution1));
      assertTrue(jSSubstitution3.equals((Object)jSSubstitution4));
      assertTrue(jSSubstitution3.equals((Object)jSSubstitution5));
      assertTrue(jSSubstitution3.equals((Object)jSSubstitution6));
      assertTrue(jSSubstitution7.equals((Object)jSSubstitution0));
      assertTrue(jSSubstitution7.equals((Object)jSSubstitution2));
      assertTrue(jSSubstitution7.equals((Object)jSSubstitution1));
      assertTrue(jSSubstitution7.equals((Object)jSSubstitution5));
      assertTrue(jSSubstitution7.equals((Object)jSSubstitution4));
      assertTrue(jSSubstitution7.equals((Object)jSSubstitution3));
      assertTrue(jSSubstitution7.equals((Object)jSSubstitution6));
      
      // Undeclared exception!
      try { 
        jSTerm0.matches(jSTerm1, jSSubstitution5);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      StringReader stringReader0 = new StringReader("FdXb@%AU#C+ @.;f4EW");
      assertNotNull(stringReader0);
      
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      assertEquals(1, streamTokenizer0.lineno());
      assertEquals("Token[NOTHING], line 1", streamTokenizer0.toString());
      assertNotNull(streamTokenizer0);
      assertEquals((-4), streamTokenizer0.ttype);
      assertEquals(0.0, streamTokenizer0.nval, 0.01);
      
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      assertEquals(1, streamTokenizer0.lineno());
      assertEquals("Token[' '], line 1", streamTokenizer0.toString());
      assertFalse(jSTerm0.isVariable());
      assertTrue(jSTerm0.isConstant());
      assertEquals("[FdXb%AUC+]", jSTerm0.toString());
      assertFalse(jSTerm0.isEval());
      assertEquals(10, jSTerm0.capacity());
      assertFalse(jSTerm0.isFunction());
      assertEquals(1, jSTerm0.size());
      assertFalse(jSTerm0.isEmpty());
      assertNotNull(jSTerm0);
      assertEquals(32, streamTokenizer0.ttype);
      assertEquals(0.0, streamTokenizer0.nval, 0.01);
      
      boolean boolean0 = jSTerm0.isGround();
      assertEquals(1, streamTokenizer0.lineno());
      assertEquals("Token[' '], line 1", streamTokenizer0.toString());
      assertFalse(jSTerm0.isVariable());
      assertTrue(jSTerm0.isConstant());
      assertEquals("[FdXb%AUC+]", jSTerm0.toString());
      assertFalse(jSTerm0.isEval());
      assertEquals(10, jSTerm0.capacity());
      assertFalse(jSTerm0.isFunction());
      assertEquals(1, jSTerm0.size());
      assertFalse(jSTerm0.isEmpty());
      assertTrue(boolean0);
      assertEquals(32, streamTokenizer0.ttype);
      assertEquals(0.0, streamTokenizer0.nval, 0.01);
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      assertFalse(jSTerm0.isConstant());
      assertFalse(jSTerm0.isEval());
      assertEquals(0, jSTerm0.size());
      assertFalse(jSTerm0.isFunction());
      assertEquals(10, jSTerm0.capacity());
      assertEquals("[]", jSTerm0.toString());
      assertTrue(jSTerm0.isEmpty());
      assertFalse(jSTerm0.isVariable());
      assertNotNull(jSTerm0);
      
      StringReader stringReader0 = new StringReader("Undefined function to be evaluated  in Call statement");
      assertNotNull(stringReader0);
      
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      assertEquals("Token[NOTHING], line 1", streamTokenizer0.toString());
      assertEquals(1, streamTokenizer0.lineno());
      assertNotNull(streamTokenizer0);
      assertEquals(0.0, streamTokenizer0.nval, 0.01);
      assertEquals((-4), streamTokenizer0.ttype);
      
      JSTerm jSTerm1 = new JSTerm(streamTokenizer0);
      assertEquals("Token[' '], line 1", streamTokenizer0.toString());
      assertEquals(1, streamTokenizer0.lineno());
      assertTrue(jSTerm1.isConstant());
      assertEquals("[Undefined]", jSTerm1.toString());
      assertFalse(jSTerm1.isEmpty());
      assertFalse(jSTerm1.isFunction());
      assertEquals(10, jSTerm1.capacity());
      assertEquals(1, jSTerm1.size());
      assertFalse(jSTerm1.isEval());
      assertFalse(jSTerm1.isVariable());
      assertNotNull(jSTerm1);
      assertFalse(jSTerm1.equals((Object)jSTerm0));
      assertEquals(0.0, streamTokenizer0.nval, 0.01);
      assertEquals(32, streamTokenizer0.ttype);
      
      JSTerm jSTerm2 = new JSTerm(streamTokenizer0);
      assertEquals("Token[' '], line 1", streamTokenizer0.toString());
      assertEquals(1, streamTokenizer0.lineno());
      assertFalse(jSTerm2.isEmpty());
      assertTrue(jSTerm2.isConstant());
      assertEquals(1, jSTerm2.size());
      assertFalse(jSTerm2.isEval());
      assertEquals("[function]", jSTerm2.toString());
      assertFalse(jSTerm2.isVariable());
      assertFalse(jSTerm2.isFunction());
      assertEquals(10, jSTerm2.capacity());
      assertNotNull(jSTerm2);
      assertFalse(jSTerm2.equals((Object)jSTerm0));
      assertFalse(jSTerm2.equals((Object)jSTerm1));
      assertEquals(0.0, streamTokenizer0.nval, 0.01);
      assertEquals(32, streamTokenizer0.ttype);
      
      StringBuffer stringBuffer0 = jSTerm2.toStr();
      assertEquals("Token[' '], line 1", streamTokenizer0.toString());
      assertEquals(1, streamTokenizer0.lineno());
      assertFalse(jSTerm2.isEmpty());
      assertTrue(jSTerm2.isConstant());
      assertEquals(1, jSTerm2.size());
      assertFalse(jSTerm2.isEval());
      assertEquals("[function]", jSTerm2.toString());
      assertFalse(jSTerm2.isVariable());
      assertFalse(jSTerm2.isFunction());
      assertEquals(10, jSTerm2.capacity());
      assertEquals(9, stringBuffer0.length());
      assertEquals("function ", stringBuffer0.toString());
      assertNotSame(jSTerm2, jSTerm0);
      assertNotSame(jSTerm2, jSTerm1);
      assertNotNull(stringBuffer0);
      assertFalse(jSTerm2.equals((Object)jSTerm0));
      assertFalse(jSTerm2.equals((Object)jSTerm1));
      assertEquals(0.0, streamTokenizer0.nval, 0.01);
      assertEquals(32, streamTokenizer0.ttype);
      
      JSTerm jSTerm3 = new JSTerm(streamTokenizer0);
      assertEquals("Token[' '], line 1", streamTokenizer0.toString());
      assertEquals(1, streamTokenizer0.lineno());
      assertTrue(jSTerm3.isConstant());
      assertEquals(10, jSTerm3.capacity());
      assertFalse(jSTerm3.isFunction());
      assertEquals("[to]", jSTerm3.toString());
      assertFalse(jSTerm3.isEmpty());
      assertEquals(1, jSTerm3.size());
      assertFalse(jSTerm3.isEval());
      assertFalse(jSTerm3.isVariable());
      assertNotNull(jSTerm3);
      assertFalse(jSTerm3.equals((Object)jSTerm1));
      assertFalse(jSTerm3.equals((Object)jSTerm0));
      assertFalse(jSTerm3.equals((Object)jSTerm2));
      assertEquals(0.0, streamTokenizer0.nval, 0.01);
      assertEquals(32, streamTokenizer0.ttype);
      
      boolean boolean0 = jSTerm0.equals(jSTerm1);
      assertFalse(jSTerm0.isConstant());
      assertFalse(jSTerm0.isEval());
      assertEquals(0, jSTerm0.size());
      assertFalse(jSTerm0.isFunction());
      assertEquals(10, jSTerm0.capacity());
      assertEquals("[]", jSTerm0.toString());
      assertTrue(jSTerm0.isEmpty());
      assertFalse(jSTerm0.isVariable());
      assertEquals("Token[' '], line 1", streamTokenizer0.toString());
      assertEquals(1, streamTokenizer0.lineno());
      assertTrue(jSTerm1.isConstant());
      assertEquals("[Undefined]", jSTerm1.toString());
      assertFalse(jSTerm1.isEmpty());
      assertFalse(jSTerm1.isFunction());
      assertEquals(10, jSTerm1.capacity());
      assertEquals(1, jSTerm1.size());
      assertFalse(jSTerm1.isEval());
      assertFalse(jSTerm1.isVariable());
      assertFalse(boolean0);
      assertNotSame(jSTerm0, jSTerm1);
      assertNotSame(jSTerm0, jSTerm3);
      assertNotSame(jSTerm0, jSTerm2);
      assertNotSame(jSTerm1, jSTerm3);
      assertNotSame(jSTerm1, jSTerm0);
      assertNotSame(jSTerm1, jSTerm2);
      assertFalse(jSTerm0.equals((Object)jSTerm1));
      assertFalse(jSTerm0.equals((Object)jSTerm3));
      assertFalse(jSTerm0.equals((Object)jSTerm2));
      assertFalse(jSTerm1.equals((Object)jSTerm3));
      assertFalse(jSTerm1.equals((Object)jSTerm0));
      assertFalse(jSTerm1.equals((Object)jSTerm2));
      assertEquals(0.0, streamTokenizer0.nval, 0.01);
      assertEquals(32, streamTokenizer0.ttype);
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      StringReader stringReader0 = new StringReader("an\b8Wnr");
      assertNotNull(stringReader0);
      
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      assertEquals(1, streamTokenizer0.lineno());
      assertEquals("Token[NOTHING], line 1", streamTokenizer0.toString());
      assertNotNull(streamTokenizer0);
      assertEquals(0.0, streamTokenizer0.nval, 0.01);
      assertEquals((-4), streamTokenizer0.ttype);
      
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      assertEquals("Token[EOF], line 1", streamTokenizer0.toString());
      assertEquals(1, streamTokenizer0.lineno());
      assertTrue(jSTerm0.isConstant());
      assertEquals(10, jSTerm0.capacity());
      assertFalse(jSTerm0.isFunction());
      assertFalse(jSTerm0.isEmpty());
      assertEquals("[%%%]", jSTerm0.toString());
      assertFalse(jSTerm0.isVariable());
      assertEquals(1, jSTerm0.size());
      assertFalse(jSTerm0.isEval());
      assertNotNull(jSTerm0);
      assertEquals(8.0, streamTokenizer0.nval, 0.01);
      assertEquals((-1), streamTokenizer0.ttype);
      
      JSTerm jSTerm1 = jSTerm0.call();
      assertEquals("Token[EOF], line 1", streamTokenizer0.toString());
      assertEquals(1, streamTokenizer0.lineno());
      assertTrue(jSTerm0.isConstant());
      assertEquals(10, jSTerm0.capacity());
      assertFalse(jSTerm0.isFunction());
      assertFalse(jSTerm0.isEmpty());
      assertEquals("[%%%]", jSTerm0.toString());
      assertFalse(jSTerm0.isVariable());
      assertEquals(1, jSTerm0.size());
      assertFalse(jSTerm0.isEval());
      assertFalse(jSTerm1.isEval());
      assertEquals(1, jSTerm1.size());
      assertFalse(jSTerm1.isFunction());
      assertEquals("[%%%]", jSTerm1.toString());
      assertEquals(1, jSTerm1.capacity());
      assertFalse(jSTerm1.isEmpty());
      assertTrue(jSTerm1.isConstant());
      assertFalse(jSTerm1.isVariable());
      assertNotSame(jSTerm0, jSTerm1);
      assertNotSame(jSTerm1, jSTerm0);
      assertNotNull(jSTerm1);
      assertTrue(jSTerm1.equals((Object)jSTerm0));
      assertEquals(8.0, streamTokenizer0.nval, 0.01);
      assertEquals((-1), streamTokenizer0.ttype);
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      assertEquals("[]", jSSubstitution0.toString());
      assertTrue(jSSubstitution0.isEmpty());
      assertEquals(10, jSSubstitution0.capacity());
      assertFalse(jSSubstitution0.fail());
      assertEquals(0, jSSubstitution0.size());
      assertNotNull(jSSubstitution0);
      
      StringReader stringReader0 = new StringReader("jFxA%Rdj8% jSYG> MR");
      assertNotNull(stringReader0);
      
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      assertEquals(1, streamTokenizer0.lineno());
      assertEquals("Token[NOTHING], line 1", streamTokenizer0.toString());
      assertNotNull(streamTokenizer0);
      assertEquals((-4), streamTokenizer0.ttype);
      assertEquals(0.0, streamTokenizer0.nval, 0.01);
      
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      assertEquals("Token[' '], line 1", streamTokenizer0.toString());
      assertEquals(1, streamTokenizer0.lineno());
      assertFalse(jSTerm0.isFunction());
      assertEquals("[jFxA%Rdj8%]", jSTerm0.toString());
      assertTrue(jSTerm0.isConstant());
      assertFalse(jSTerm0.isVariable());
      assertEquals(10, jSTerm0.capacity());
      assertFalse(jSTerm0.isEval());
      assertFalse(jSTerm0.isEmpty());
      assertEquals(1, jSTerm0.size());
      assertNotNull(jSTerm0);
      assertEquals(32, streamTokenizer0.ttype);
      assertEquals(0.0, streamTokenizer0.nval, 0.01);
      
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      assertFalse(jSSubstitution1.fail());
      assertTrue(jSSubstitution1.isEmpty());
      assertEquals(10, jSSubstitution1.capacity());
      assertEquals(0, jSSubstitution1.size());
      assertEquals("[]", jSSubstitution1.toString());
      assertNotNull(jSSubstitution1);
      assertTrue(jSSubstitution1.equals((Object)jSSubstitution0));
      
      JSTerm jSTerm1 = jSSubstitution1.instance(jSTerm0);
      assertEquals("Token[' '], line 1", streamTokenizer0.toString());
      assertEquals(1, streamTokenizer0.lineno());
      assertFalse(jSTerm0.isFunction());
      assertEquals("[jFxA%Rdj8%]", jSTerm0.toString());
      assertTrue(jSTerm0.isConstant());
      assertFalse(jSTerm0.isVariable());
      assertEquals(10, jSTerm0.capacity());
      assertFalse(jSTerm0.isEval());
      assertFalse(jSTerm0.isEmpty());
      assertEquals(1, jSTerm0.size());
      assertFalse(jSSubstitution1.fail());
      assertTrue(jSSubstitution1.isEmpty());
      assertEquals(10, jSSubstitution1.capacity());
      assertEquals(0, jSSubstitution1.size());
      assertEquals("[]", jSSubstitution1.toString());
      assertEquals(1, jSTerm1.size());
      assertFalse(jSTerm1.isEval());
      assertFalse(jSTerm1.isVariable());
      assertTrue(jSTerm1.isConstant());
      assertEquals("[jFxA%Rdj8%]", jSTerm1.toString());
      assertFalse(jSTerm1.isEmpty());
      assertFalse(jSTerm1.isFunction());
      assertEquals(10, jSTerm1.capacity());
      assertSame(jSTerm0, jSTerm1);
      assertNotSame(jSSubstitution1, jSSubstitution0);
      assertSame(jSTerm1, jSTerm0);
      assertNotNull(jSTerm1);
      assertTrue(jSSubstitution1.equals((Object)jSSubstitution0));
      assertEquals(32, streamTokenizer0.ttype);
      assertEquals(0.0, streamTokenizer0.nval, 0.01);
      
      JSSubstitution jSSubstitution2 = (JSSubstitution)jSSubstitution1.clone();
      assertFalse(jSSubstitution1.fail());
      assertTrue(jSSubstitution1.isEmpty());
      assertEquals(10, jSSubstitution1.capacity());
      assertEquals(0, jSSubstitution1.size());
      assertEquals("[]", jSSubstitution1.toString());
      assertEquals(0, jSSubstitution2.size());
      assertEquals("[]", jSSubstitution2.toString());
      assertTrue(jSSubstitution2.isEmpty());
      assertFalse(jSSubstitution2.fail());
      assertEquals(0, jSSubstitution2.capacity());
      assertNotSame(jSSubstitution1, jSSubstitution0);
      assertNotSame(jSSubstitution1, jSSubstitution2);
      assertNotSame(jSSubstitution2, jSSubstitution0);
      assertNotSame(jSSubstitution2, jSSubstitution1);
      assertNotNull(jSSubstitution2);
      assertTrue(jSSubstitution1.equals((Object)jSSubstitution0));
      assertTrue(jSSubstitution2.equals((Object)jSSubstitution1));
      assertTrue(jSSubstitution2.equals((Object)jSSubstitution0));
      
      jSTerm0.makeEval(false);
      assertEquals("Token[' '], line 1", streamTokenizer0.toString());
      assertEquals(1, streamTokenizer0.lineno());
      assertFalse(jSTerm0.isFunction());
      assertEquals("[jFxA%Rdj8%]", jSTerm0.toString());
      assertTrue(jSTerm0.isConstant());
      assertFalse(jSTerm0.isVariable());
      assertEquals(10, jSTerm0.capacity());
      assertFalse(jSTerm0.isEval());
      assertFalse(jSTerm0.isEmpty());
      assertEquals(1, jSTerm0.size());
      assertSame(jSTerm0, jSTerm1);
      assertEquals(32, streamTokenizer0.ttype);
      assertEquals(0.0, streamTokenizer0.nval, 0.01);
      
      jSTerm1.makeFunction();
      assertEquals("Token[' '], line 1", streamTokenizer0.toString());
      assertEquals(1, streamTokenizer0.lineno());
      assertFalse(jSTerm0.isConstant());
      assertEquals("[jFxA%Rdj8%]", jSTerm0.toString());
      assertFalse(jSTerm0.isVariable());
      assertEquals(10, jSTerm0.capacity());
      assertFalse(jSTerm0.isEval());
      assertFalse(jSTerm0.isEmpty());
      assertTrue(jSTerm0.isFunction());
      assertEquals(1, jSTerm0.size());
      assertFalse(jSSubstitution1.fail());
      assertTrue(jSSubstitution1.isEmpty());
      assertEquals(10, jSSubstitution1.capacity());
      assertEquals(0, jSSubstitution1.size());
      assertEquals("[]", jSSubstitution1.toString());
      assertEquals(1, jSTerm1.size());
      assertFalse(jSTerm1.isEval());
      assertTrue(jSTerm1.isFunction());
      assertFalse(jSTerm1.isVariable());
      assertEquals("[jFxA%Rdj8%]", jSTerm1.toString());
      assertFalse(jSTerm1.isEmpty());
      assertFalse(jSTerm1.isConstant());
      assertEquals(10, jSTerm1.capacity());
      assertSame(jSTerm0, jSTerm1);
      assertNotSame(jSSubstitution1, jSSubstitution0);
      assertNotSame(jSSubstitution1, jSSubstitution2);
      assertSame(jSTerm1, jSTerm0);
      assertTrue(jSSubstitution1.equals((Object)jSSubstitution2));
      assertTrue(jSSubstitution1.equals((Object)jSSubstitution0));
      assertEquals(32, streamTokenizer0.ttype);
      assertEquals(0.0, streamTokenizer0.nval, 0.01);
      
      JSTerm jSTerm2 = jSTerm0.standardizerTerm();
      assertEquals("Token[' '], line 1", streamTokenizer0.toString());
      assertEquals(1, streamTokenizer0.lineno());
      assertFalse(jSTerm0.isConstant());
      assertEquals("[jFxA%Rdj8%]", jSTerm0.toString());
      assertFalse(jSTerm0.isVariable());
      assertEquals(10, jSTerm0.capacity());
      assertFalse(jSTerm0.isEval());
      assertFalse(jSTerm0.isEmpty());
      assertTrue(jSTerm0.isFunction());
      assertEquals(1, jSTerm0.size());
      assertFalse(jSTerm2.isEmpty());
      assertEquals("[jFxA%Rdj8%]", jSTerm2.toString());
      assertTrue(jSTerm2.isFunction());
      assertFalse(jSTerm2.isVariable());
      assertEquals(10, jSTerm2.capacity());
      assertFalse(jSTerm2.isEval());
      assertEquals(1, jSTerm2.size());
      assertFalse(jSTerm2.isConstant());
      assertSame(jSTerm0, jSTerm1);
      assertNotSame(jSTerm0, jSTerm2);
      assertNotSame(jSTerm2, jSTerm1);
      assertNotSame(jSTerm2, jSTerm0);
      assertNotNull(jSTerm2);
      assertTrue(jSTerm2.equals((Object)jSTerm0));
      assertTrue(jSTerm2.equals((Object)jSTerm1));
      assertEquals(32, streamTokenizer0.ttype);
      assertEquals(0.0, streamTokenizer0.nval, 0.01);
      
      JSTerm jSTerm3 = jSTerm0.call();
      assertEquals("Token[' '], line 1", streamTokenizer0.toString());
      assertEquals(1, streamTokenizer0.lineno());
      assertFalse(jSTerm0.isConstant());
      assertEquals("[jFxA%Rdj8%]", jSTerm0.toString());
      assertFalse(jSTerm0.isVariable());
      assertEquals(10, jSTerm0.capacity());
      assertFalse(jSTerm0.isEval());
      assertFalse(jSTerm0.isEmpty());
      assertTrue(jSTerm0.isFunction());
      assertEquals(1, jSTerm0.size());
      assertFalse(jSTerm3.isConstant());
      assertFalse(jSTerm3.isEmpty());
      assertTrue(jSTerm3.isFunction());
      assertFalse(jSTerm3.isEval());
      assertEquals(10, jSTerm3.capacity());
      assertFalse(jSTerm3.isVariable());
      assertEquals(1, jSTerm3.size());
      assertEquals("[jFxA%Rdj8%]", jSTerm3.toString());
      assertSame(jSTerm0, jSTerm1);
      assertNotSame(jSTerm0, jSTerm3);
      assertNotSame(jSTerm0, jSTerm2);
      assertNotSame(jSTerm3, jSTerm1);
      assertNotSame(jSTerm3, jSTerm0);
      assertNotSame(jSTerm3, jSTerm2);
      assertNotNull(jSTerm3);
      assertTrue(jSTerm0.equals((Object)jSTerm2));
      assertTrue(jSTerm3.equals((Object)jSTerm0));
      assertTrue(jSTerm3.equals((Object)jSTerm2));
      assertTrue(jSTerm3.equals((Object)jSTerm1));
      assertEquals(32, streamTokenizer0.ttype);
      assertEquals(0.0, streamTokenizer0.nval, 0.01);
      
      JSTerm jSTerm4 = jSTerm0.cloneT();
      assertEquals("Token[' '], line 1", streamTokenizer0.toString());
      assertEquals(1, streamTokenizer0.lineno());
      assertFalse(jSTerm0.isConstant());
      assertEquals("[jFxA%Rdj8%]", jSTerm0.toString());
      assertFalse(jSTerm0.isVariable());
      assertEquals(10, jSTerm0.capacity());
      assertFalse(jSTerm0.isEval());
      assertFalse(jSTerm0.isEmpty());
      assertTrue(jSTerm0.isFunction());
      assertEquals(1, jSTerm0.size());
      assertEquals("[jFxA%Rdj8%]", jSTerm4.toString());
      assertFalse(jSTerm4.isEval());
      assertFalse(jSTerm4.isVariable());
      assertFalse(jSTerm4.isConstant());
      assertTrue(jSTerm4.isFunction());
      assertFalse(jSTerm4.isEmpty());
      assertEquals(1, jSTerm4.size());
      assertEquals(10, jSTerm4.capacity());
      assertSame(jSTerm0, jSTerm1);
      assertNotSame(jSTerm0, jSTerm3);
      assertNotSame(jSTerm0, jSTerm4);
      assertNotSame(jSTerm0, jSTerm2);
      assertNotSame(jSTerm4, jSTerm3);
      assertNotSame(jSTerm4, jSTerm0);
      assertNotSame(jSTerm4, jSTerm1);
      assertNotSame(jSTerm4, jSTerm2);
      assertNotNull(jSTerm4);
      assertTrue(jSTerm0.equals((Object)jSTerm2));
      assertTrue(jSTerm0.equals((Object)jSTerm3));
      assertTrue(jSTerm4.equals((Object)jSTerm3));
      assertTrue(jSTerm4.equals((Object)jSTerm1));
      assertTrue(jSTerm4.equals((Object)jSTerm2));
      assertTrue(jSTerm4.equals((Object)jSTerm0));
      assertEquals(32, streamTokenizer0.ttype);
      assertEquals(0.0, streamTokenizer0.nval, 0.01);
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      assertEquals(0, jSTerm0.size());
      assertEquals("[]", jSTerm0.toString());
      assertFalse(jSTerm0.isConstant());
      assertFalse(jSTerm0.isVariable());
      assertEquals(10, jSTerm0.capacity());
      assertFalse(jSTerm0.isEval());
      assertFalse(jSTerm0.isFunction());
      assertTrue(jSTerm0.isEmpty());
      assertNotNull(jSTerm0);
      
      JSJshopVars.plus = 0;
      jSTerm0.makeVariable();
      assertTrue(jSTerm0.isVariable());
      assertEquals(0, jSTerm0.size());
      assertEquals("[]", jSTerm0.toString());
      assertFalse(jSTerm0.isConstant());
      assertEquals(10, jSTerm0.capacity());
      assertFalse(jSTerm0.isEval());
      assertFalse(jSTerm0.isFunction());
      assertTrue(jSTerm0.isEmpty());
      
      JSJshopVars.leftPar = 0;
      // Undeclared exception!
      try { 
        jSTerm0.toStr();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      assertFalse(jSTerm0.isConstant());
      assertEquals("[]", jSTerm0.toString());
      assertEquals(0, jSTerm0.size());
      assertEquals(10, jSTerm0.capacity());
      assertFalse(jSTerm0.isFunction());
      assertFalse(jSTerm0.isEval());
      assertFalse(jSTerm0.isVariable());
      assertTrue(jSTerm0.isEmpty());
      assertNotNull(jSTerm0);
      
      // Undeclared exception!
      try { 
        jSTerm0.print();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      assertFalse(jSTerm0.isFunction());
      assertEquals(10, jSTerm0.capacity());
      assertFalse(jSTerm0.isVariable());
      assertTrue(jSTerm0.isEmpty());
      assertEquals("[]", jSTerm0.toString());
      assertFalse(jSTerm0.isConstant());
      assertFalse(jSTerm0.isEval());
      assertEquals(0, jSTerm0.size());
      assertNotNull(jSTerm0);
      
      JSTerm jSTerm1 = (JSTerm)jSTerm0.clone();
      assertFalse(jSTerm0.isFunction());
      assertEquals(10, jSTerm0.capacity());
      assertFalse(jSTerm0.isVariable());
      assertTrue(jSTerm0.isEmpty());
      assertEquals("[]", jSTerm0.toString());
      assertFalse(jSTerm0.isConstant());
      assertFalse(jSTerm0.isEval());
      assertEquals(0, jSTerm0.size());
      assertFalse(jSTerm1.isConstant());
      assertFalse(jSTerm1.isEval());
      assertEquals(0, jSTerm1.size());
      assertFalse(jSTerm1.isVariable());
      assertTrue(jSTerm1.isEmpty());
      assertEquals(0, jSTerm1.capacity());
      assertFalse(jSTerm1.isFunction());
      assertEquals("[]", jSTerm1.toString());
      assertNotSame(jSTerm0, jSTerm1);
      assertNotSame(jSTerm1, jSTerm0);
      assertNotNull(jSTerm1);
      assertTrue(jSTerm1.equals((Object)jSTerm0));
      
      JSJshopVars.slash = 0;
      // Undeclared exception!
      try { 
        jSTerm0.print();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      assertFalse(jSTerm0.isConstant());
      assertEquals(0, jSTerm0.size());
      assertFalse(jSTerm0.isEval());
      assertEquals(10, jSTerm0.capacity());
      assertFalse(jSTerm0.isFunction());
      assertEquals("[]", jSTerm0.toString());
      assertFalse(jSTerm0.isVariable());
      assertTrue(jSTerm0.isEmpty());
      assertNotNull(jSTerm0);
      
      boolean boolean0 = jSTerm0.isGround();
      assertFalse(jSTerm0.isConstant());
      assertEquals(0, jSTerm0.size());
      assertFalse(jSTerm0.isEval());
      assertEquals(10, jSTerm0.capacity());
      assertFalse(jSTerm0.isFunction());
      assertEquals("[]", jSTerm0.toString());
      assertFalse(jSTerm0.isVariable());
      assertTrue(jSTerm0.isEmpty());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      assertTrue(jSTerm0.isEmpty());
      assertEquals("[]", jSTerm0.toString());
      assertFalse(jSTerm0.isVariable());
      assertFalse(jSTerm0.isConstant());
      assertFalse(jSTerm0.isEval());
      assertEquals(0, jSTerm0.size());
      assertFalse(jSTerm0.isFunction());
      assertEquals(10, jSTerm0.capacity());
      assertNotNull(jSTerm0);
      
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      assertEquals(10, jSSubstitution0.capacity());
      assertEquals(0, jSSubstitution0.size());
      assertEquals("[]", jSSubstitution0.toString());
      assertTrue(jSSubstitution0.isEmpty());
      assertFalse(jSSubstitution0.fail());
      assertNotNull(jSSubstitution0);
      
      jSTerm0.makeVariable();
      assertTrue(jSTerm0.isEmpty());
      assertEquals("[]", jSTerm0.toString());
      assertFalse(jSTerm0.isConstant());
      assertFalse(jSTerm0.isEval());
      assertTrue(jSTerm0.isVariable());
      assertEquals(0, jSTerm0.size());
      assertFalse(jSTerm0.isFunction());
      assertEquals(10, jSTerm0.capacity());
      
      JSTerm jSTerm1 = new JSTerm();
      assertEquals(0, jSTerm1.size());
      assertFalse(jSTerm1.isEval());
      assertFalse(jSTerm1.isFunction());
      assertEquals(10, jSTerm1.capacity());
      assertFalse(jSTerm1.isConstant());
      assertTrue(jSTerm1.isEmpty());
      assertEquals("[]", jSTerm1.toString());
      assertFalse(jSTerm1.isVariable());
      assertNotNull(jSTerm1);
      assertTrue(jSTerm1.equals((Object)jSTerm0));
      
      boolean boolean0 = jSTerm0.isGround();
      assertTrue(jSTerm0.isEmpty());
      assertEquals("[]", jSTerm0.toString());
      assertFalse(jSTerm0.isConstant());
      assertFalse(jSTerm0.isEval());
      assertTrue(jSTerm0.isVariable());
      assertEquals(0, jSTerm0.size());
      assertFalse(jSTerm0.isFunction());
      assertEquals(10, jSTerm0.capacity());
      assertFalse(boolean0);
      assertNotSame(jSTerm0, jSTerm1);
      assertTrue(jSTerm0.equals((Object)jSTerm1));
      
      jSTerm1.makeVariable();
      assertEquals(0, jSTerm1.size());
      assertFalse(jSTerm1.isEval());
      assertTrue(jSTerm1.isVariable());
      assertFalse(jSTerm1.isFunction());
      assertEquals(10, jSTerm1.capacity());
      assertFalse(jSTerm1.isConstant());
      assertTrue(jSTerm1.isEmpty());
      assertEquals("[]", jSTerm1.toString());
      assertNotSame(jSTerm1, jSTerm0);
      assertTrue(jSTerm1.equals((Object)jSTerm0));
      
      // Undeclared exception!
      try { 
        jSTerm0.equals(jSTerm1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      StringReader stringReader0 = new StringReader(" Expected (");
      assertNotNull(stringReader0);
      
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      assertEquals(1, streamTokenizer0.lineno());
      assertEquals("Token[NOTHING], line 1", streamTokenizer0.toString());
      assertNotNull(streamTokenizer0);
      assertEquals(0.0, streamTokenizer0.nval, 0.01);
      assertEquals((-4), streamTokenizer0.ttype);
      
      JSTerm jSTerm0 = new JSTerm();
      assertEquals(0, jSTerm0.size());
      assertFalse(jSTerm0.isFunction());
      assertFalse(jSTerm0.isEval());
      assertFalse(jSTerm0.isConstant());
      assertEquals(10, jSTerm0.capacity());
      assertEquals("[]", jSTerm0.toString());
      assertFalse(jSTerm0.isVariable());
      assertTrue(jSTerm0.isEmpty());
      assertNotNull(jSTerm0);
      
      // Undeclared exception!
      try { 
        jSTerm0.parseList(streamTokenizer0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      assertEquals("[]", jSSubstitution0.toString());
      assertEquals(10, jSSubstitution0.capacity());
      assertTrue(jSSubstitution0.isEmpty());
      assertEquals(0, jSSubstitution0.size());
      assertFalse(jSSubstitution0.fail());
      assertNotNull(jSSubstitution0);
      
      StringReader stringReader0 = new StringReader("jFxA%Rdj8% jSYG> MR");
      assertNotNull(stringReader0);
      
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      assertEquals("Token[NOTHING], line 1", streamTokenizer0.toString());
      assertEquals(1, streamTokenizer0.lineno());
      assertNotNull(streamTokenizer0);
      assertEquals((-4), streamTokenizer0.ttype);
      assertEquals(0.0, streamTokenizer0.nval, 0.01);
      
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      assertEquals("Token[' '], line 1", streamTokenizer0.toString());
      assertEquals(1, streamTokenizer0.lineno());
      assertFalse(jSTerm0.isFunction());
      assertEquals("[jFxA%Rdj8%]", jSTerm0.toString());
      assertTrue(jSTerm0.isConstant());
      assertFalse(jSTerm0.isVariable());
      assertEquals(10, jSTerm0.capacity());
      assertFalse(jSTerm0.isEmpty());
      assertFalse(jSTerm0.isEval());
      assertEquals(1, jSTerm0.size());
      assertNotNull(jSTerm0);
      assertEquals(32, streamTokenizer0.ttype);
      assertEquals(0.0, streamTokenizer0.nval, 0.01);
      
      JSTerm jSTerm1 = jSSubstitution0.instance(jSTerm0);
      assertEquals("[]", jSSubstitution0.toString());
      assertEquals(10, jSSubstitution0.capacity());
      assertTrue(jSSubstitution0.isEmpty());
      assertEquals(0, jSSubstitution0.size());
      assertFalse(jSSubstitution0.fail());
      assertEquals("Token[' '], line 1", streamTokenizer0.toString());
      assertEquals(1, streamTokenizer0.lineno());
      assertFalse(jSTerm0.isFunction());
      assertEquals("[jFxA%Rdj8%]", jSTerm0.toString());
      assertTrue(jSTerm0.isConstant());
      assertFalse(jSTerm0.isVariable());
      assertEquals(10, jSTerm0.capacity());
      assertFalse(jSTerm0.isEmpty());
      assertFalse(jSTerm0.isEval());
      assertEquals(1, jSTerm0.size());
      assertTrue(jSTerm1.isConstant());
      assertEquals("[jFxA%Rdj8%]", jSTerm1.toString());
      assertFalse(jSTerm1.isVariable());
      assertFalse(jSTerm1.isEmpty());
      assertFalse(jSTerm1.isEval());
      assertEquals(1, jSTerm1.size());
      assertEquals(10, jSTerm1.capacity());
      assertFalse(jSTerm1.isFunction());
      assertSame(jSTerm0, jSTerm1);
      assertSame(jSTerm1, jSTerm0);
      assertNotNull(jSTerm1);
      assertEquals(32, streamTokenizer0.ttype);
      assertEquals(0.0, streamTokenizer0.nval, 0.01);
      
      boolean boolean0 = jSTerm1.add((Object) null);
      assertEquals("[]", jSSubstitution0.toString());
      assertEquals(10, jSSubstitution0.capacity());
      assertTrue(jSSubstitution0.isEmpty());
      assertEquals(0, jSSubstitution0.size());
      assertFalse(jSSubstitution0.fail());
      assertEquals("Token[' '], line 1", streamTokenizer0.toString());
      assertEquals(1, streamTokenizer0.lineno());
      assertFalse(jSTerm0.isFunction());
      assertTrue(jSTerm0.isConstant());
      assertFalse(jSTerm0.isVariable());
      assertEquals(10, jSTerm0.capacity());
      assertEquals(2, jSTerm0.size());
      assertEquals("[jFxA%Rdj8%, null]", jSTerm0.toString());
      assertFalse(jSTerm0.isEmpty());
      assertFalse(jSTerm0.isEval());
      assertTrue(jSTerm1.isConstant());
      assertFalse(jSTerm1.isVariable());
      assertEquals("[jFxA%Rdj8%, null]", jSTerm1.toString());
      assertFalse(jSTerm1.isEmpty());
      assertFalse(jSTerm1.isEval());
      assertEquals(10, jSTerm1.capacity());
      assertEquals(2, jSTerm1.size());
      assertFalse(jSTerm1.isFunction());
      assertTrue(boolean0);
      assertSame(jSTerm0, jSTerm1);
      assertSame(jSTerm1, jSTerm0);
      assertEquals(32, streamTokenizer0.ttype);
      assertEquals(0.0, streamTokenizer0.nval, 0.01);
      
      JSSubstitution jSSubstitution1 = (JSSubstitution)jSSubstitution0.clone();
      assertEquals("[]", jSSubstitution0.toString());
      assertEquals(10, jSSubstitution0.capacity());
      assertTrue(jSSubstitution0.isEmpty());
      assertEquals(0, jSSubstitution0.size());
      assertFalse(jSSubstitution0.fail());
      assertEquals(0, jSSubstitution1.size());
      assertTrue(jSSubstitution1.isEmpty());
      assertEquals(0, jSSubstitution1.capacity());
      assertEquals("[]", jSSubstitution1.toString());
      assertFalse(jSSubstitution1.fail());
      assertNotSame(jSSubstitution0, jSSubstitution1);
      assertNotSame(jSSubstitution1, jSSubstitution0);
      assertNotNull(jSSubstitution1);
      assertTrue(jSSubstitution1.equals((Object)jSSubstitution0));
      
      boolean boolean1 = jSSubstitution0.add((Object) null);
      assertEquals(10, jSSubstitution0.capacity());
      assertFalse(jSSubstitution0.isEmpty());
      assertEquals(1, jSSubstitution0.size());
      assertEquals("[null]", jSSubstitution0.toString());
      assertFalse(jSSubstitution0.fail());
      assertTrue(boolean1);
      assertNotSame(jSSubstitution0, jSSubstitution1);
      assertFalse(jSSubstitution0.equals((Object)jSSubstitution1));
      assertTrue(boolean1 == boolean0);
      
      jSTerm1.makeEval(true);
      assertEquals(10, jSSubstitution0.capacity());
      assertFalse(jSSubstitution0.isEmpty());
      assertEquals(1, jSSubstitution0.size());
      assertEquals("[null]", jSSubstitution0.toString());
      assertFalse(jSSubstitution0.fail());
      assertEquals("Token[' '], line 1", streamTokenizer0.toString());
      assertEquals(1, streamTokenizer0.lineno());
      assertTrue(jSTerm0.isEval());
      assertFalse(jSTerm0.isFunction());
      assertTrue(jSTerm0.isConstant());
      assertFalse(jSTerm0.isVariable());
      assertEquals(10, jSTerm0.capacity());
      assertEquals(2, jSTerm0.size());
      assertEquals("[jFxA%Rdj8%, null]", jSTerm0.toString());
      assertFalse(jSTerm0.isEmpty());
      assertTrue(jSTerm1.isConstant());
      assertFalse(jSTerm1.isVariable());
      assertEquals("[jFxA%Rdj8%, null]", jSTerm1.toString());
      assertFalse(jSTerm1.isEmpty());
      assertEquals(10, jSTerm1.capacity());
      assertEquals(2, jSTerm1.size());
      assertTrue(jSTerm1.isEval());
      assertFalse(jSTerm1.isFunction());
      assertNotSame(jSSubstitution0, jSSubstitution1);
      assertSame(jSTerm0, jSTerm1);
      assertSame(jSTerm1, jSTerm0);
      assertFalse(jSSubstitution0.equals((Object)jSSubstitution1));
      assertEquals(32, streamTokenizer0.ttype);
      assertEquals(0.0, streamTokenizer0.nval, 0.01);
      
      jSTerm1.makeFunction();
      assertEquals(10, jSSubstitution0.capacity());
      assertFalse(jSSubstitution0.isEmpty());
      assertEquals(1, jSSubstitution0.size());
      assertEquals("[null]", jSSubstitution0.toString());
      assertFalse(jSSubstitution0.fail());
      assertEquals("Token[' '], line 1", streamTokenizer0.toString());
      assertEquals(1, streamTokenizer0.lineno());
      assertFalse(jSTerm0.isConstant());
      assertTrue(jSTerm0.isEval());
      assertFalse(jSTerm0.isVariable());
      assertEquals(10, jSTerm0.capacity());
      assertEquals(2, jSTerm0.size());
      assertEquals("[jFxA%Rdj8%, null]", jSTerm0.toString());
      assertFalse(jSTerm0.isEmpty());
      assertTrue(jSTerm0.isFunction());
      assertFalse(jSTerm1.isVariable());
      assertEquals("[jFxA%Rdj8%, null]", jSTerm1.toString());
      assertFalse(jSTerm1.isEmpty());
      assertTrue(jSTerm1.isFunction());
      assertFalse(jSTerm1.isConstant());
      assertEquals(10, jSTerm1.capacity());
      assertEquals(2, jSTerm1.size());
      assertTrue(jSTerm1.isEval());
      assertNotSame(jSSubstitution0, jSSubstitution1);
      assertSame(jSTerm0, jSTerm1);
      assertSame(jSTerm1, jSTerm0);
      assertFalse(jSSubstitution0.equals((Object)jSSubstitution1));
      assertEquals(32, streamTokenizer0.ttype);
      assertEquals(0.0, streamTokenizer0.nval, 0.01);
      
      // Undeclared exception!
      try { 
        jSTerm1.matches(jSTerm0, jSSubstitution0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      assertEquals(0, jSTerm0.size());
      assertFalse(jSTerm0.isEval());
      assertFalse(jSTerm0.isConstant());
      assertEquals(10, jSTerm0.capacity());
      assertFalse(jSTerm0.isFunction());
      assertTrue(jSTerm0.isEmpty());
      assertEquals("[]", jSTerm0.toString());
      assertFalse(jSTerm0.isVariable());
      assertNotNull(jSTerm0);
      
      jSTerm0.makeVariable();
      assertEquals(0, jSTerm0.size());
      assertFalse(jSTerm0.isEval());
      assertFalse(jSTerm0.isConstant());
      assertEquals(10, jSTerm0.capacity());
      assertTrue(jSTerm0.isVariable());
      assertFalse(jSTerm0.isFunction());
      assertTrue(jSTerm0.isEmpty());
      assertEquals("[]", jSTerm0.toString());
      
      JSTerm jSTerm1 = new JSTerm();
      assertFalse(jSTerm1.isVariable());
      assertFalse(jSTerm1.isFunction());
      assertEquals(10, jSTerm1.capacity());
      assertFalse(jSTerm1.isEval());
      assertTrue(jSTerm1.isEmpty());
      assertEquals("[]", jSTerm1.toString());
      assertEquals(0, jSTerm1.size());
      assertFalse(jSTerm1.isConstant());
      assertNotNull(jSTerm1);
      assertTrue(jSTerm1.equals((Object)jSTerm0));
      
      // Undeclared exception!
      try { 
        jSTerm0.cloneT();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      assertEquals("[]", jSSubstitution0.toString());
      assertFalse(jSSubstitution0.fail());
      assertEquals(0, jSSubstitution0.size());
      assertEquals(10, jSSubstitution0.capacity());
      assertTrue(jSSubstitution0.isEmpty());
      assertNotNull(jSSubstitution0);
      
      StringReader stringReader0 = new StringReader("jFxA%Rdj8% jSYG> MR");
      assertNotNull(stringReader0);
      
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      assertEquals(1, streamTokenizer0.lineno());
      assertEquals("Token[NOTHING], line 1", streamTokenizer0.toString());
      assertNotNull(streamTokenizer0);
      assertEquals(0.0, streamTokenizer0.nval, 0.01);
      assertEquals((-4), streamTokenizer0.ttype);
      
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      assertEquals(1, streamTokenizer0.lineno());
      assertEquals("Token[' '], line 1", streamTokenizer0.toString());
      assertFalse(jSTerm0.isEmpty());
      assertFalse(jSTerm0.isEval());
      assertEquals(1, jSTerm0.size());
      assertFalse(jSTerm0.isVariable());
      assertTrue(jSTerm0.isConstant());
      assertEquals(10, jSTerm0.capacity());
      assertFalse(jSTerm0.isFunction());
      assertEquals("[jFxA%Rdj8%]", jSTerm0.toString());
      assertNotNull(jSTerm0);
      assertEquals(0.0, streamTokenizer0.nval, 0.01);
      assertEquals(32, streamTokenizer0.ttype);
      
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      assertEquals(0, jSSubstitution1.size());
      assertEquals(10, jSSubstitution1.capacity());
      assertEquals("[]", jSSubstitution1.toString());
      assertFalse(jSSubstitution1.fail());
      assertTrue(jSSubstitution1.isEmpty());
      assertNotNull(jSSubstitution1);
      assertTrue(jSSubstitution1.equals((Object)jSSubstitution0));
      
      JSTerm jSTerm1 = jSSubstitution0.instance(jSTerm0);
      assertEquals("[]", jSSubstitution0.toString());
      assertFalse(jSSubstitution0.fail());
      assertEquals(0, jSSubstitution0.size());
      assertEquals(10, jSSubstitution0.capacity());
      assertTrue(jSSubstitution0.isEmpty());
      assertEquals(1, streamTokenizer0.lineno());
      assertEquals("Token[' '], line 1", streamTokenizer0.toString());
      assertFalse(jSTerm0.isEmpty());
      assertFalse(jSTerm0.isEval());
      assertEquals(1, jSTerm0.size());
      assertFalse(jSTerm0.isVariable());
      assertTrue(jSTerm0.isConstant());
      assertEquals(10, jSTerm0.capacity());
      assertFalse(jSTerm0.isFunction());
      assertEquals("[jFxA%Rdj8%]", jSTerm0.toString());
      assertFalse(jSTerm1.isEmpty());
      assertFalse(jSTerm1.isEval());
      assertEquals(1, jSTerm1.size());
      assertFalse(jSTerm1.isVariable());
      assertTrue(jSTerm1.isConstant());
      assertEquals("[jFxA%Rdj8%]", jSTerm1.toString());
      assertFalse(jSTerm1.isFunction());
      assertEquals(10, jSTerm1.capacity());
      assertNotSame(jSSubstitution0, jSSubstitution1);
      assertSame(jSTerm0, jSTerm1);
      assertSame(jSTerm1, jSTerm0);
      assertNotNull(jSTerm1);
      assertTrue(jSSubstitution0.equals((Object)jSSubstitution1));
      assertEquals(0.0, streamTokenizer0.nval, 0.01);
      assertEquals(32, streamTokenizer0.ttype);
      
      JSSubstitution jSSubstitution2 = new JSSubstitution();
      assertEquals(10, jSSubstitution2.capacity());
      assertTrue(jSSubstitution2.isEmpty());
      assertEquals("[]", jSSubstitution2.toString());
      assertFalse(jSSubstitution2.fail());
      assertEquals(0, jSSubstitution2.size());
      assertNotNull(jSSubstitution2);
      assertTrue(jSSubstitution2.equals((Object)jSSubstitution1));
      assertTrue(jSSubstitution2.equals((Object)jSSubstitution0));
      
      JSSubstitution jSSubstitution3 = (JSSubstitution)jSSubstitution2.clone();
      assertEquals(10, jSSubstitution2.capacity());
      assertTrue(jSSubstitution2.isEmpty());
      assertEquals("[]", jSSubstitution2.toString());
      assertFalse(jSSubstitution2.fail());
      assertEquals(0, jSSubstitution2.size());
      assertEquals(0, jSSubstitution3.size());
      assertFalse(jSSubstitution3.fail());
      assertEquals("[]", jSSubstitution3.toString());
      assertTrue(jSSubstitution3.isEmpty());
      assertEquals(0, jSSubstitution3.capacity());
      assertNotSame(jSSubstitution2, jSSubstitution3);
      assertNotSame(jSSubstitution2, jSSubstitution0);
      assertNotSame(jSSubstitution2, jSSubstitution1);
      assertNotSame(jSSubstitution3, jSSubstitution1);
      assertNotSame(jSSubstitution3, jSSubstitution0);
      assertNotSame(jSSubstitution3, jSSubstitution2);
      assertNotNull(jSSubstitution3);
      assertTrue(jSSubstitution2.equals((Object)jSSubstitution1));
      assertTrue(jSSubstitution2.equals((Object)jSSubstitution0));
      assertTrue(jSSubstitution3.equals((Object)jSSubstitution2));
      assertTrue(jSSubstitution3.equals((Object)jSSubstitution0));
      assertTrue(jSSubstitution3.equals((Object)jSSubstitution1));
      
      jSTerm0.makeEval(false);
      assertEquals(1, streamTokenizer0.lineno());
      assertEquals("Token[' '], line 1", streamTokenizer0.toString());
      assertFalse(jSTerm0.isEmpty());
      assertFalse(jSTerm0.isEval());
      assertEquals(1, jSTerm0.size());
      assertFalse(jSTerm0.isVariable());
      assertTrue(jSTerm0.isConstant());
      assertEquals(10, jSTerm0.capacity());
      assertFalse(jSTerm0.isFunction());
      assertEquals("[jFxA%Rdj8%]", jSTerm0.toString());
      assertSame(jSTerm0, jSTerm1);
      assertEquals(0.0, streamTokenizer0.nval, 0.01);
      assertEquals(32, streamTokenizer0.ttype);
      
      jSTerm0.makeFunction();
      assertEquals(1, streamTokenizer0.lineno());
      assertEquals("Token[' '], line 1", streamTokenizer0.toString());
      assertFalse(jSTerm0.isEmpty());
      assertFalse(jSTerm0.isConstant());
      assertFalse(jSTerm0.isEval());
      assertEquals(1, jSTerm0.size());
      assertTrue(jSTerm0.isFunction());
      assertFalse(jSTerm0.isVariable());
      assertEquals(10, jSTerm0.capacity());
      assertEquals("[jFxA%Rdj8%]", jSTerm0.toString());
      assertSame(jSTerm0, jSTerm1);
      assertEquals(0.0, streamTokenizer0.nval, 0.01);
      assertEquals(32, streamTokenizer0.ttype);
      
      jSTerm0.print();
      assertEquals(1, streamTokenizer0.lineno());
      assertEquals("Token[' '], line 1", streamTokenizer0.toString());
      assertFalse(jSTerm0.isEmpty());
      assertFalse(jSTerm0.isConstant());
      assertFalse(jSTerm0.isEval());
      assertEquals(1, jSTerm0.size());
      assertTrue(jSTerm0.isFunction());
      assertFalse(jSTerm0.isVariable());
      assertEquals(10, jSTerm0.capacity());
      assertEquals("[jFxA%Rdj8%]", jSTerm0.toString());
      assertSame(jSTerm0, jSTerm1);
      assertEquals(0.0, streamTokenizer0.nval, 0.01);
      assertEquals(32, streamTokenizer0.ttype);
      
      JSTerm jSTerm2 = jSTerm0.cloneT();
      assertEquals(1, streamTokenizer0.lineno());
      assertEquals("Token[' '], line 1", streamTokenizer0.toString());
      assertFalse(jSTerm0.isEmpty());
      assertFalse(jSTerm0.isConstant());
      assertFalse(jSTerm0.isEval());
      assertEquals(1, jSTerm0.size());
      assertTrue(jSTerm0.isFunction());
      assertFalse(jSTerm0.isVariable());
      assertEquals(10, jSTerm0.capacity());
      assertEquals("[jFxA%Rdj8%]", jSTerm0.toString());
      assertEquals(10, jSTerm2.capacity());
      assertFalse(jSTerm2.isVariable());
      assertEquals(1, jSTerm2.size());
      assertEquals("[jFxA%Rdj8%]", jSTerm2.toString());
      assertFalse(jSTerm2.isEmpty());
      assertFalse(jSTerm2.isConstant());
      assertFalse(jSTerm2.isEval());
      assertTrue(jSTerm2.isFunction());
      assertSame(jSTerm0, jSTerm1);
      assertNotSame(jSTerm0, jSTerm2);
      assertNotSame(jSTerm2, jSTerm1);
      assertNotSame(jSTerm2, jSTerm0);
      assertNotNull(jSTerm2);
      assertTrue(jSTerm2.equals((Object)jSTerm0));
      assertTrue(jSTerm2.equals((Object)jSTerm1));
      assertEquals(0.0, streamTokenizer0.nval, 0.01);
      assertEquals(32, streamTokenizer0.ttype);
      
      JSSubstitution jSSubstitution4 = jSTerm2.matches(jSTerm1, jSSubstitution1);
      assertEquals("[]", jSSubstitution0.toString());
      assertFalse(jSSubstitution0.fail());
      assertEquals(0, jSSubstitution0.size());
      assertEquals(10, jSSubstitution0.capacity());
      assertTrue(jSSubstitution0.isEmpty());
      assertEquals(1, streamTokenizer0.lineno());
      assertEquals("Token[' '], line 1", streamTokenizer0.toString());
      assertFalse(jSTerm0.isEmpty());
      assertFalse(jSTerm0.isConstant());
      assertFalse(jSTerm0.isEval());
      assertEquals(1, jSTerm0.size());
      assertTrue(jSTerm0.isFunction());
      assertFalse(jSTerm0.isVariable());
      assertEquals(10, jSTerm0.capacity());
      assertEquals("[jFxA%Rdj8%]", jSTerm0.toString());
      assertEquals(0, jSSubstitution1.size());
      assertEquals(10, jSSubstitution1.capacity());
      assertEquals("[]", jSSubstitution1.toString());
      assertFalse(jSSubstitution1.fail());
      assertTrue(jSSubstitution1.isEmpty());
      assertFalse(jSTerm1.isConstant());
      assertFalse(jSTerm1.isEmpty());
      assertFalse(jSTerm1.isEval());
      assertEquals(1, jSTerm1.size());
      assertTrue(jSTerm1.isFunction());
      assertFalse(jSTerm1.isVariable());
      assertEquals("[jFxA%Rdj8%]", jSTerm1.toString());
      assertEquals(10, jSTerm1.capacity());
      assertEquals(10, jSTerm2.capacity());
      assertFalse(jSTerm2.isVariable());
      assertEquals(1, jSTerm2.size());
      assertEquals("[jFxA%Rdj8%]", jSTerm2.toString());
      assertFalse(jSTerm2.isEmpty());
      assertFalse(jSTerm2.isConstant());
      assertFalse(jSTerm2.isEval());
      assertTrue(jSTerm2.isFunction());
      assertEquals(0, jSSubstitution4.size());
      assertEquals(10, jSSubstitution4.capacity());
      assertEquals("[]", jSSubstitution4.toString());
      assertTrue(jSSubstitution4.isEmpty());
      assertFalse(jSSubstitution4.fail());
      assertNotSame(jSSubstitution0, jSSubstitution1);
      assertNotSame(jSSubstitution0, jSSubstitution3);
      assertNotSame(jSSubstitution0, jSSubstitution2);
      assertNotSame(jSSubstitution0, jSSubstitution4);
      assertSame(jSTerm0, jSTerm1);
      assertNotSame(jSTerm0, jSTerm2);
      assertNotSame(jSSubstitution1, jSSubstitution4);
      assertNotSame(jSSubstitution1, jSSubstitution2);
      assertNotSame(jSSubstitution1, jSSubstitution3);
      assertNotSame(jSSubstitution1, jSSubstitution0);
      assertSame(jSTerm1, jSTerm0);
      assertNotSame(jSTerm1, jSTerm2);
      assertNotSame(jSTerm2, jSTerm1);
      assertNotSame(jSTerm2, jSTerm0);
      assertNotSame(jSSubstitution4, jSSubstitution2);
      assertNotSame(jSSubstitution4, jSSubstitution1);
      assertNotSame(jSSubstitution4, jSSubstitution0);
      assertNotSame(jSSubstitution4, jSSubstitution3);
      assertNotNull(jSSubstitution4);
      assertTrue(jSSubstitution0.equals((Object)jSSubstitution3));
      assertTrue(jSSubstitution0.equals((Object)jSSubstitution2));
      assertTrue(jSSubstitution0.equals((Object)jSSubstitution1));
      assertTrue(jSTerm0.equals((Object)jSTerm2));
      assertTrue(jSSubstitution1.equals((Object)jSSubstitution2));
      assertTrue(jSSubstitution1.equals((Object)jSSubstitution3));
      assertTrue(jSSubstitution1.equals((Object)jSSubstitution0));
      assertTrue(jSTerm1.equals((Object)jSTerm2));
      assertTrue(jSTerm2.equals((Object)jSTerm0));
      assertTrue(jSTerm2.equals((Object)jSTerm1));
      assertTrue(jSSubstitution4.equals((Object)jSSubstitution3));
      assertTrue(jSSubstitution4.equals((Object)jSSubstitution0));
      assertTrue(jSSubstitution4.equals((Object)jSSubstitution2));
      assertTrue(jSSubstitution4.equals((Object)jSSubstitution1));
      assertEquals(0.0, streamTokenizer0.nval, 0.01);
      assertEquals(32, streamTokenizer0.ttype);
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      assertFalse(jSSubstitution0.fail());
      assertTrue(jSSubstitution0.isEmpty());
      assertEquals(0, jSSubstitution0.size());
      assertEquals("[]", jSSubstitution0.toString());
      assertEquals(10, jSSubstitution0.capacity());
      assertNotNull(jSSubstitution0);
      
      StringReader stringReader0 = new StringReader("jFxA%Rdj8% jSYG> MR");
      assertNotNull(stringReader0);
      
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      assertEquals(1, streamTokenizer0.lineno());
      assertEquals("Token[NOTHING], line 1", streamTokenizer0.toString());
      assertNotNull(streamTokenizer0);
      assertEquals(0.0, streamTokenizer0.nval, 0.01);
      assertEquals((-4), streamTokenizer0.ttype);
      
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      assertEquals(1, streamTokenizer0.lineno());
      assertEquals("Token[' '], line 1", streamTokenizer0.toString());
      assertFalse(jSTerm0.isEmpty());
      assertFalse(jSTerm0.isVariable());
      assertEquals(1, jSTerm0.size());
      assertFalse(jSTerm0.isEval());
      assertEquals("[jFxA%Rdj8%]", jSTerm0.toString());
      assertTrue(jSTerm0.isConstant());
      assertEquals(10, jSTerm0.capacity());
      assertFalse(jSTerm0.isFunction());
      assertNotNull(jSTerm0);
      assertEquals(0.0, streamTokenizer0.nval, 0.01);
      assertEquals(32, streamTokenizer0.ttype);
      
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      assertEquals("[]", jSSubstitution1.toString());
      assertFalse(jSSubstitution1.fail());
      assertEquals(0, jSSubstitution1.size());
      assertEquals(10, jSSubstitution1.capacity());
      assertTrue(jSSubstitution1.isEmpty());
      assertNotNull(jSSubstitution1);
      assertTrue(jSSubstitution1.equals((Object)jSSubstitution0));
      
      JSTerm jSTerm1 = jSSubstitution1.instance(jSTerm0);
      assertEquals(1, streamTokenizer0.lineno());
      assertEquals("Token[' '], line 1", streamTokenizer0.toString());
      assertFalse(jSTerm0.isEmpty());
      assertFalse(jSTerm0.isVariable());
      assertEquals(1, jSTerm0.size());
      assertFalse(jSTerm0.isEval());
      assertEquals("[jFxA%Rdj8%]", jSTerm0.toString());
      assertTrue(jSTerm0.isConstant());
      assertEquals(10, jSTerm0.capacity());
      assertFalse(jSTerm0.isFunction());
      assertEquals("[]", jSSubstitution1.toString());
      assertFalse(jSSubstitution1.fail());
      assertEquals(0, jSSubstitution1.size());
      assertEquals(10, jSSubstitution1.capacity());
      assertTrue(jSSubstitution1.isEmpty());
      assertEquals(10, jSTerm1.capacity());
      assertFalse(jSTerm1.isFunction());
      assertFalse(jSTerm1.isEval());
      assertEquals(1, jSTerm1.size());
      assertTrue(jSTerm1.isConstant());
      assertFalse(jSTerm1.isVariable());
      assertFalse(jSTerm1.isEmpty());
      assertEquals("[jFxA%Rdj8%]", jSTerm1.toString());
      assertSame(jSTerm0, jSTerm1);
      assertNotSame(jSSubstitution1, jSSubstitution0);
      assertSame(jSTerm1, jSTerm0);
      assertNotNull(jSTerm1);
      assertTrue(jSSubstitution1.equals((Object)jSSubstitution0));
      assertEquals(0.0, streamTokenizer0.nval, 0.01);
      assertEquals(32, streamTokenizer0.ttype);
      
      Spliterator spliterator0 = jSTerm1.spliterator();
      assertEquals(1, streamTokenizer0.lineno());
      assertEquals("Token[' '], line 1", streamTokenizer0.toString());
      assertFalse(jSTerm0.isEmpty());
      assertFalse(jSTerm0.isVariable());
      assertEquals(1, jSTerm0.size());
      assertFalse(jSTerm0.isEval());
      assertEquals("[jFxA%Rdj8%]", jSTerm0.toString());
      assertTrue(jSTerm0.isConstant());
      assertEquals(10, jSTerm0.capacity());
      assertFalse(jSTerm0.isFunction());
      assertEquals("[]", jSSubstitution1.toString());
      assertFalse(jSSubstitution1.fail());
      assertEquals(0, jSSubstitution1.size());
      assertEquals(10, jSSubstitution1.capacity());
      assertTrue(jSSubstitution1.isEmpty());
      assertEquals(10, jSTerm1.capacity());
      assertFalse(jSTerm1.isFunction());
      assertFalse(jSTerm1.isEval());
      assertEquals(1, jSTerm1.size());
      assertTrue(jSTerm1.isConstant());
      assertFalse(jSTerm1.isVariable());
      assertFalse(jSTerm1.isEmpty());
      assertEquals("[jFxA%Rdj8%]", jSTerm1.toString());
      assertSame(jSTerm0, jSTerm1);
      assertNotSame(jSSubstitution1, jSSubstitution0);
      assertSame(jSTerm1, jSTerm0);
      assertNotNull(spliterator0);
      assertTrue(jSSubstitution1.equals((Object)jSSubstitution0));
      assertEquals(0.0, streamTokenizer0.nval, 0.01);
      assertEquals(32, streamTokenizer0.ttype);
      
      JSSubstitution jSSubstitution2 = (JSSubstitution)jSSubstitution1.clone();
      assertEquals("[]", jSSubstitution1.toString());
      assertFalse(jSSubstitution1.fail());
      assertEquals(0, jSSubstitution1.size());
      assertEquals(10, jSSubstitution1.capacity());
      assertTrue(jSSubstitution1.isEmpty());
      assertEquals(0, jSSubstitution2.capacity());
      assertEquals("[]", jSSubstitution2.toString());
      assertTrue(jSSubstitution2.isEmpty());
      assertFalse(jSSubstitution2.fail());
      assertEquals(0, jSSubstitution2.size());
      assertNotSame(jSSubstitution1, jSSubstitution2);
      assertNotSame(jSSubstitution1, jSSubstitution0);
      assertNotSame(jSSubstitution2, jSSubstitution0);
      assertNotSame(jSSubstitution2, jSSubstitution1);
      assertNotNull(jSSubstitution2);
      assertTrue(jSSubstitution1.equals((Object)jSSubstitution0));
      assertTrue(jSSubstitution2.equals((Object)jSSubstitution0));
      assertTrue(jSSubstitution2.equals((Object)jSSubstitution1));
      
      jSTerm1.makeFunction();
      assertEquals(1, streamTokenizer0.lineno());
      assertEquals("Token[' '], line 1", streamTokenizer0.toString());
      assertFalse(jSTerm0.isConstant());
      assertFalse(jSTerm0.isEmpty());
      assertFalse(jSTerm0.isVariable());
      assertEquals(1, jSTerm0.size());
      assertTrue(jSTerm0.isFunction());
      assertFalse(jSTerm0.isEval());
      assertEquals("[jFxA%Rdj8%]", jSTerm0.toString());
      assertEquals(10, jSTerm0.capacity());
      assertEquals("[]", jSSubstitution1.toString());
      assertFalse(jSSubstitution1.fail());
      assertEquals(0, jSSubstitution1.size());
      assertEquals(10, jSSubstitution1.capacity());
      assertTrue(jSSubstitution1.isEmpty());
      assertEquals(10, jSTerm1.capacity());
      assertFalse(jSTerm1.isEval());
      assertEquals(1, jSTerm1.size());
      assertFalse(jSTerm1.isVariable());
      assertFalse(jSTerm1.isEmpty());
      assertTrue(jSTerm1.isFunction());
      assertEquals("[jFxA%Rdj8%]", jSTerm1.toString());
      assertFalse(jSTerm1.isConstant());
      assertSame(jSTerm0, jSTerm1);
      assertNotSame(jSSubstitution1, jSSubstitution2);
      assertNotSame(jSSubstitution1, jSSubstitution0);
      assertSame(jSTerm1, jSTerm0);
      assertTrue(jSSubstitution1.equals((Object)jSSubstitution2));
      assertTrue(jSSubstitution1.equals((Object)jSSubstitution0));
      assertEquals(0.0, streamTokenizer0.nval, 0.01);
      assertEquals(32, streamTokenizer0.ttype);
      
      JSTerm jSTerm2 = jSTerm0.standardizerTerm();
      assertEquals(1, streamTokenizer0.lineno());
      assertEquals("Token[' '], line 1", streamTokenizer0.toString());
      assertFalse(jSTerm0.isConstant());
      assertFalse(jSTerm0.isEmpty());
      assertFalse(jSTerm0.isVariable());
      assertEquals(1, jSTerm0.size());
      assertTrue(jSTerm0.isFunction());
      assertFalse(jSTerm0.isEval());
      assertEquals("[jFxA%Rdj8%]", jSTerm0.toString());
      assertEquals(10, jSTerm0.capacity());
      assertEquals(1, jSTerm2.size());
      assertFalse(jSTerm2.isEval());
      assertTrue(jSTerm2.isFunction());
      assertFalse(jSTerm2.isEmpty());
      assertFalse(jSTerm2.isConstant());
      assertEquals(10, jSTerm2.capacity());
      assertEquals("[jFxA%Rdj8%]", jSTerm2.toString());
      assertFalse(jSTerm2.isVariable());
      assertSame(jSTerm0, jSTerm1);
      assertNotSame(jSTerm0, jSTerm2);
      assertNotSame(jSTerm2, jSTerm1);
      assertNotSame(jSTerm2, jSTerm0);
      assertNotNull(jSTerm2);
      assertTrue(jSTerm2.equals((Object)jSTerm0));
      assertTrue(jSTerm2.equals((Object)jSTerm1));
      assertEquals(0.0, streamTokenizer0.nval, 0.01);
      assertEquals(32, streamTokenizer0.ttype);
      
      JSTerm jSTerm3 = jSTerm0.call();
      assertEquals(1, streamTokenizer0.lineno());
      assertEquals("Token[' '], line 1", streamTokenizer0.toString());
      assertFalse(jSTerm0.isConstant());
      assertFalse(jSTerm0.isEmpty());
      assertFalse(jSTerm0.isVariable());
      assertEquals(1, jSTerm0.size());
      assertTrue(jSTerm0.isFunction());
      assertFalse(jSTerm0.isEval());
      assertEquals("[jFxA%Rdj8%]", jSTerm0.toString());
      assertEquals(10, jSTerm0.capacity());
      assertEquals("[jFxA%Rdj8%]", jSTerm3.toString());
      assertFalse(jSTerm3.isEval());
      assertEquals(1, jSTerm3.size());
      assertEquals(10, jSTerm3.capacity());
      assertFalse(jSTerm3.isVariable());
      assertFalse(jSTerm3.isEmpty());
      assertTrue(jSTerm3.isFunction());
      assertFalse(jSTerm3.isConstant());
      assertNotSame(jSTerm0, jSTerm3);
      assertSame(jSTerm0, jSTerm1);
      assertNotSame(jSTerm0, jSTerm2);
      assertNotSame(jSTerm3, jSTerm2);
      assertNotSame(jSTerm3, jSTerm0);
      assertNotSame(jSTerm3, jSTerm1);
      assertNotNull(jSTerm3);
      assertTrue(jSTerm0.equals((Object)jSTerm2));
      assertTrue(jSTerm3.equals((Object)jSTerm1));
      assertTrue(jSTerm3.equals((Object)jSTerm2));
      assertTrue(jSTerm3.equals((Object)jSTerm0));
      assertEquals(0.0, streamTokenizer0.nval, 0.01);
      assertEquals(32, streamTokenizer0.ttype);
      
      JSTerm jSTerm4 = jSTerm0.cloneT();
      assertEquals(1, streamTokenizer0.lineno());
      assertEquals("Token[' '], line 1", streamTokenizer0.toString());
      assertFalse(jSTerm0.isConstant());
      assertFalse(jSTerm0.isEmpty());
      assertFalse(jSTerm0.isVariable());
      assertEquals(1, jSTerm0.size());
      assertTrue(jSTerm0.isFunction());
      assertFalse(jSTerm0.isEval());
      assertEquals("[jFxA%Rdj8%]", jSTerm0.toString());
      assertEquals(10, jSTerm0.capacity());
      assertFalse(jSTerm4.isEval());
      assertEquals(1, jSTerm4.size());
      assertFalse(jSTerm4.isVariable());
      assertEquals(10, jSTerm4.capacity());
      assertFalse(jSTerm4.isConstant());
      assertFalse(jSTerm4.isEmpty());
      assertTrue(jSTerm4.isFunction());
      assertEquals("[jFxA%Rdj8%]", jSTerm4.toString());
      assertNotSame(jSTerm0, jSTerm3);
      assertSame(jSTerm0, jSTerm1);
      assertNotSame(jSTerm0, jSTerm4);
      assertNotSame(jSTerm0, jSTerm2);
      assertNotSame(jSTerm4, jSTerm1);
      assertNotSame(jSTerm4, jSTerm3);
      assertNotSame(jSTerm4, jSTerm0);
      assertNotSame(jSTerm4, jSTerm2);
      assertNotNull(jSTerm4);
      assertTrue(jSTerm0.equals((Object)jSTerm2));
      assertTrue(jSTerm0.equals((Object)jSTerm3));
      assertTrue(jSTerm4.equals((Object)jSTerm0));
      assertTrue(jSTerm4.equals((Object)jSTerm2));
      assertTrue(jSTerm4.equals((Object)jSTerm3));
      assertTrue(jSTerm4.equals((Object)jSTerm1));
      assertEquals(0.0, streamTokenizer0.nval, 0.01);
      assertEquals(32, streamTokenizer0.ttype);
      
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      jSTerm4.sort(comparator0);
      assertEquals(1, streamTokenizer0.lineno());
      assertEquals("Token[' '], line 1", streamTokenizer0.toString());
      assertFalse(jSTerm0.isConstant());
      assertFalse(jSTerm0.isEmpty());
      assertFalse(jSTerm0.isVariable());
      assertEquals(1, jSTerm0.size());
      assertTrue(jSTerm0.isFunction());
      assertFalse(jSTerm0.isEval());
      assertEquals("[jFxA%Rdj8%]", jSTerm0.toString());
      assertEquals(10, jSTerm0.capacity());
      assertFalse(jSTerm4.isEval());
      assertEquals(1, jSTerm4.size());
      assertFalse(jSTerm4.isVariable());
      assertEquals(10, jSTerm4.capacity());
      assertFalse(jSTerm4.isConstant());
      assertFalse(jSTerm4.isEmpty());
      assertTrue(jSTerm4.isFunction());
      assertEquals("[jFxA%Rdj8%]", jSTerm4.toString());
      assertNotSame(jSTerm0, jSTerm3);
      assertSame(jSTerm0, jSTerm1);
      assertNotSame(jSTerm0, jSTerm4);
      assertNotSame(jSTerm0, jSTerm2);
      assertNotSame(jSTerm4, jSTerm1);
      assertNotSame(jSTerm4, jSTerm3);
      assertNotSame(jSTerm4, jSTerm0);
      assertNotSame(jSTerm4, jSTerm2);
      assertTrue(jSTerm0.equals((Object)jSTerm2));
      assertTrue(jSTerm0.equals((Object)jSTerm4));
      assertTrue(jSTerm0.equals((Object)jSTerm3));
      assertTrue(jSTerm4.equals((Object)jSTerm0));
      assertTrue(jSTerm4.equals((Object)jSTerm2));
      assertTrue(jSTerm4.equals((Object)jSTerm3));
      assertTrue(jSTerm4.equals((Object)jSTerm1));
      assertEquals(0.0, streamTokenizer0.nval, 0.01);
      assertEquals(32, streamTokenizer0.ttype);
      
      jSTerm3.print();
      assertEquals(1, streamTokenizer0.lineno());
      assertEquals("Token[' '], line 1", streamTokenizer0.toString());
      assertFalse(jSTerm0.isConstant());
      assertFalse(jSTerm0.isEmpty());
      assertFalse(jSTerm0.isVariable());
      assertEquals(1, jSTerm0.size());
      assertTrue(jSTerm0.isFunction());
      assertFalse(jSTerm0.isEval());
      assertEquals("[jFxA%Rdj8%]", jSTerm0.toString());
      assertEquals(10, jSTerm0.capacity());
      assertEquals("[jFxA%Rdj8%]", jSTerm3.toString());
      assertFalse(jSTerm3.isEval());
      assertEquals(1, jSTerm3.size());
      assertEquals(10, jSTerm3.capacity());
      assertFalse(jSTerm3.isVariable());
      assertFalse(jSTerm3.isEmpty());
      assertTrue(jSTerm3.isFunction());
      assertFalse(jSTerm3.isConstant());
      assertNotSame(jSTerm0, jSTerm3);
      assertSame(jSTerm0, jSTerm1);
      assertNotSame(jSTerm0, jSTerm4);
      assertNotSame(jSTerm0, jSTerm2);
      assertNotSame(jSTerm3, jSTerm2);
      assertNotSame(jSTerm3, jSTerm0);
      assertNotSame(jSTerm3, jSTerm1);
      assertNotSame(jSTerm3, jSTerm4);
      assertTrue(jSTerm0.equals((Object)jSTerm2));
      assertTrue(jSTerm0.equals((Object)jSTerm4));
      assertTrue(jSTerm0.equals((Object)jSTerm3));
      assertTrue(jSTerm3.equals((Object)jSTerm4));
      assertTrue(jSTerm3.equals((Object)jSTerm1));
      assertTrue(jSTerm3.equals((Object)jSTerm2));
      assertTrue(jSTerm3.equals((Object)jSTerm0));
      assertEquals(0.0, streamTokenizer0.nval, 0.01);
      assertEquals(32, streamTokenizer0.ttype);
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      assertFalse(jSTerm0.isConstant());
      assertEquals("[]", jSTerm0.toString());
      assertEquals(10, jSTerm0.capacity());
      assertFalse(jSTerm0.isFunction());
      assertFalse(jSTerm0.isVariable());
      assertEquals(0, jSTerm0.size());
      assertFalse(jSTerm0.isEval());
      assertTrue(jSTerm0.isEmpty());
      assertNotNull(jSTerm0);
      
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      assertTrue(jSSubstitution0.isEmpty());
      assertEquals(10, jSSubstitution0.capacity());
      assertEquals("[]", jSSubstitution0.toString());
      assertFalse(jSSubstitution0.fail());
      assertEquals(0, jSSubstitution0.size());
      assertNotNull(jSSubstitution0);
      
      jSTerm0.makeVariable();
      assertTrue(jSTerm0.isVariable());
      assertFalse(jSTerm0.isConstant());
      assertEquals("[]", jSTerm0.toString());
      assertEquals(10, jSTerm0.capacity());
      assertFalse(jSTerm0.isFunction());
      assertEquals(0, jSTerm0.size());
      assertFalse(jSTerm0.isEval());
      assertTrue(jSTerm0.isEmpty());
      
      jSTerm0.makeConstant();
      assertEquals("[]", jSTerm0.toString());
      assertEquals(10, jSTerm0.capacity());
      assertFalse(jSTerm0.isFunction());
      assertFalse(jSTerm0.isVariable());
      assertEquals(0, jSTerm0.size());
      assertFalse(jSTerm0.isEval());
      assertTrue(jSTerm0.isConstant());
      assertTrue(jSTerm0.isEmpty());
      
      jSTerm0.addElement((Object) null);
      assertFalse(jSTerm0.isEmpty());
      assertEquals(10, jSTerm0.capacity());
      assertFalse(jSTerm0.isFunction());
      assertFalse(jSTerm0.isVariable());
      assertEquals(1, jSTerm0.size());
      assertFalse(jSTerm0.isEval());
      assertEquals("[null]", jSTerm0.toString());
      assertTrue(jSTerm0.isConstant());
      
      boolean boolean0 = jSTerm0.add((Object) null);
      assertFalse(jSTerm0.isEmpty());
      assertEquals(10, jSTerm0.capacity());
      assertEquals(2, jSTerm0.size());
      assertFalse(jSTerm0.isFunction());
      assertFalse(jSTerm0.isVariable());
      assertEquals("[null, null]", jSTerm0.toString());
      assertFalse(jSTerm0.isEval());
      assertTrue(jSTerm0.isConstant());
      assertTrue(boolean0);
      
      jSTerm0.makeFunction();
      assertTrue(jSTerm0.isFunction());
      assertFalse(jSTerm0.isConstant());
      assertFalse(jSTerm0.isEmpty());
      assertEquals(10, jSTerm0.capacity());
      assertEquals(2, jSTerm0.size());
      assertFalse(jSTerm0.isVariable());
      assertEquals("[null, null]", jSTerm0.toString());
      assertFalse(jSTerm0.isEval());
      
      // Undeclared exception!
      try { 
        jSTerm0.standardizerTerm();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      assertEquals("[]", jSSubstitution0.toString());
      assertTrue(jSSubstitution0.isEmpty());
      assertFalse(jSSubstitution0.fail());
      assertEquals(10, jSSubstitution0.capacity());
      assertEquals(0, jSSubstitution0.size());
      assertNotNull(jSSubstitution0);
      
      StringReader stringReader0 = new StringReader("jFxA%Rdj8% jSYG> MR");
      assertNotNull(stringReader0);
      
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      assertEquals(1, streamTokenizer0.lineno());
      assertEquals("Token[NOTHING], line 1", streamTokenizer0.toString());
      assertNotNull(streamTokenizer0);
      assertEquals((-4), streamTokenizer0.ttype);
      assertEquals(0.0, streamTokenizer0.nval, 0.01);
      
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      assertEquals("Token[' '], line 1", streamTokenizer0.toString());
      assertEquals(1, streamTokenizer0.lineno());
      assertTrue(jSTerm0.isConstant());
      assertFalse(jSTerm0.isVariable());
      assertFalse(jSTerm0.isFunction());
      assertEquals("[jFxA%Rdj8%]", jSTerm0.toString());
      assertEquals(10, jSTerm0.capacity());
      assertFalse(jSTerm0.isEval());
      assertFalse(jSTerm0.isEmpty());
      assertEquals(1, jSTerm0.size());
      assertNotNull(jSTerm0);
      assertEquals(32, streamTokenizer0.ttype);
      assertEquals(0.0, streamTokenizer0.nval, 0.01);
      
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      assertTrue(jSSubstitution1.isEmpty());
      assertEquals(10, jSSubstitution1.capacity());
      assertEquals("[]", jSSubstitution1.toString());
      assertFalse(jSSubstitution1.fail());
      assertEquals(0, jSSubstitution1.size());
      assertNotNull(jSSubstitution1);
      assertTrue(jSSubstitution1.equals((Object)jSSubstitution0));
      
      JSTerm jSTerm1 = jSSubstitution1.instance(jSTerm0);
      assertEquals("Token[' '], line 1", streamTokenizer0.toString());
      assertEquals(1, streamTokenizer0.lineno());
      assertTrue(jSTerm0.isConstant());
      assertFalse(jSTerm0.isVariable());
      assertFalse(jSTerm0.isFunction());
      assertEquals("[jFxA%Rdj8%]", jSTerm0.toString());
      assertEquals(10, jSTerm0.capacity());
      assertFalse(jSTerm0.isEval());
      assertFalse(jSTerm0.isEmpty());
      assertEquals(1, jSTerm0.size());
      assertTrue(jSSubstitution1.isEmpty());
      assertEquals(10, jSSubstitution1.capacity());
      assertEquals("[]", jSSubstitution1.toString());
      assertFalse(jSSubstitution1.fail());
      assertEquals(0, jSSubstitution1.size());
      assertEquals(10, jSTerm1.capacity());
      assertFalse(jSTerm1.isFunction());
      assertEquals("[jFxA%Rdj8%]", jSTerm1.toString());
      assertTrue(jSTerm1.isConstant());
      assertFalse(jSTerm1.isVariable());
      assertFalse(jSTerm1.isEmpty());
      assertFalse(jSTerm1.isEval());
      assertEquals(1, jSTerm1.size());
      assertSame(jSTerm0, jSTerm1);
      assertNotSame(jSSubstitution1, jSSubstitution0);
      assertSame(jSTerm1, jSTerm0);
      assertNotNull(jSTerm1);
      assertTrue(jSSubstitution1.equals((Object)jSSubstitution0));
      assertEquals(32, streamTokenizer0.ttype);
      assertEquals(0.0, streamTokenizer0.nval, 0.01);
      
      JSSubstitution jSSubstitution2 = (JSSubstitution)jSSubstitution1.clone();
      assertTrue(jSSubstitution1.isEmpty());
      assertEquals(10, jSSubstitution1.capacity());
      assertEquals("[]", jSSubstitution1.toString());
      assertFalse(jSSubstitution1.fail());
      assertEquals(0, jSSubstitution1.size());
      assertEquals(0, jSSubstitution2.capacity());
      assertTrue(jSSubstitution2.isEmpty());
      assertFalse(jSSubstitution2.fail());
      assertEquals(0, jSSubstitution2.size());
      assertEquals("[]", jSSubstitution2.toString());
      assertNotSame(jSSubstitution1, jSSubstitution0);
      assertNotSame(jSSubstitution1, jSSubstitution2);
      assertNotSame(jSSubstitution2, jSSubstitution0);
      assertNotSame(jSSubstitution2, jSSubstitution1);
      assertNotNull(jSSubstitution2);
      assertTrue(jSSubstitution1.equals((Object)jSSubstitution0));
      assertTrue(jSSubstitution2.equals((Object)jSSubstitution0));
      assertTrue(jSSubstitution2.equals((Object)jSSubstitution1));
      
      jSTerm0.makeEval(true);
      assertEquals("Token[' '], line 1", streamTokenizer0.toString());
      assertEquals(1, streamTokenizer0.lineno());
      assertTrue(jSTerm0.isConstant());
      assertFalse(jSTerm0.isVariable());
      assertFalse(jSTerm0.isFunction());
      assertTrue(jSTerm0.isEval());
      assertEquals("[jFxA%Rdj8%]", jSTerm0.toString());
      assertEquals(10, jSTerm0.capacity());
      assertFalse(jSTerm0.isEmpty());
      assertEquals(1, jSTerm0.size());
      assertSame(jSTerm0, jSTerm1);
      assertEquals(32, streamTokenizer0.ttype);
      assertEquals(0.0, streamTokenizer0.nval, 0.01);
      
      jSTerm1.makeFunction();
      assertEquals("Token[' '], line 1", streamTokenizer0.toString());
      assertEquals(1, streamTokenizer0.lineno());
      assertFalse(jSTerm0.isVariable());
      assertTrue(jSTerm0.isEval());
      assertEquals("[jFxA%Rdj8%]", jSTerm0.toString());
      assertFalse(jSTerm0.isConstant());
      assertTrue(jSTerm0.isFunction());
      assertEquals(10, jSTerm0.capacity());
      assertFalse(jSTerm0.isEmpty());
      assertEquals(1, jSTerm0.size());
      assertTrue(jSSubstitution1.isEmpty());
      assertEquals(10, jSSubstitution1.capacity());
      assertEquals("[]", jSSubstitution1.toString());
      assertFalse(jSSubstitution1.fail());
      assertEquals(0, jSSubstitution1.size());
      assertFalse(jSTerm1.isConstant());
      assertEquals(10, jSTerm1.capacity());
      assertTrue(jSTerm1.isEval());
      assertEquals("[jFxA%Rdj8%]", jSTerm1.toString());
      assertFalse(jSTerm1.isVariable());
      assertFalse(jSTerm1.isEmpty());
      assertEquals(1, jSTerm1.size());
      assertTrue(jSTerm1.isFunction());
      assertSame(jSTerm0, jSTerm1);
      assertNotSame(jSSubstitution1, jSSubstitution0);
      assertNotSame(jSSubstitution1, jSSubstitution2);
      assertSame(jSTerm1, jSTerm0);
      assertTrue(jSSubstitution1.equals((Object)jSSubstitution2));
      assertTrue(jSSubstitution1.equals((Object)jSSubstitution0));
      assertEquals(32, streamTokenizer0.ttype);
      assertEquals(0.0, streamTokenizer0.nval, 0.01);
      
      streamTokenizer0.ordinaryChar(0);
      assertEquals("Token[' '], line 1", streamTokenizer0.toString());
      assertEquals(1, streamTokenizer0.lineno());
      assertEquals(32, streamTokenizer0.ttype);
      assertEquals(0.0, streamTokenizer0.nval, 0.01);
      
      boolean boolean0 = jSTerm0.isGround();
      assertEquals("Token[' '], line 1", streamTokenizer0.toString());
      assertEquals(1, streamTokenizer0.lineno());
      assertFalse(jSTerm0.isVariable());
      assertTrue(jSTerm0.isEval());
      assertEquals("[jFxA%Rdj8%]", jSTerm0.toString());
      assertFalse(jSTerm0.isConstant());
      assertTrue(jSTerm0.isFunction());
      assertEquals(10, jSTerm0.capacity());
      assertFalse(jSTerm0.isEmpty());
      assertEquals(1, jSTerm0.size());
      assertTrue(boolean0);
      assertSame(jSTerm0, jSTerm1);
      assertEquals(32, streamTokenizer0.ttype);
      assertEquals(0.0, streamTokenizer0.nval, 0.01);
      
      boolean boolean1 = jSTerm1.equals(jSTerm0);
      assertEquals("Token[' '], line 1", streamTokenizer0.toString());
      assertEquals(1, streamTokenizer0.lineno());
      assertFalse(jSTerm0.isVariable());
      assertTrue(jSTerm0.isEval());
      assertEquals("[jFxA%Rdj8%]", jSTerm0.toString());
      assertFalse(jSTerm0.isConstant());
      assertTrue(jSTerm0.isFunction());
      assertEquals(10, jSTerm0.capacity());
      assertFalse(jSTerm0.isEmpty());
      assertEquals(1, jSTerm0.size());
      assertTrue(jSSubstitution1.isEmpty());
      assertEquals(10, jSSubstitution1.capacity());
      assertEquals("[]", jSSubstitution1.toString());
      assertFalse(jSSubstitution1.fail());
      assertEquals(0, jSSubstitution1.size());
      assertFalse(jSTerm1.isConstant());
      assertEquals(10, jSTerm1.capacity());
      assertTrue(jSTerm1.isEval());
      assertEquals("[jFxA%Rdj8%]", jSTerm1.toString());
      assertFalse(jSTerm1.isVariable());
      assertFalse(jSTerm1.isEmpty());
      assertEquals(1, jSTerm1.size());
      assertTrue(jSTerm1.isFunction());
      assertTrue(boolean1);
      assertSame(jSTerm0, jSTerm1);
      assertNotSame(jSSubstitution1, jSSubstitution0);
      assertNotSame(jSSubstitution1, jSSubstitution2);
      assertSame(jSTerm1, jSTerm0);
      assertTrue(jSSubstitution1.equals((Object)jSSubstitution2));
      assertTrue(jSSubstitution1.equals((Object)jSSubstitution0));
      assertTrue(boolean1 == boolean0);
      assertEquals(32, streamTokenizer0.ttype);
      assertEquals(0.0, streamTokenizer0.nval, 0.01);
      
      JSSubstitution jSSubstitution3 = jSTerm1.matches(jSTerm0, jSSubstitution1);
      assertEquals("Token[' '], line 1", streamTokenizer0.toString());
      assertEquals(1, streamTokenizer0.lineno());
      assertFalse(jSTerm0.isVariable());
      assertTrue(jSTerm0.isEval());
      assertEquals("[jFxA%Rdj8%]", jSTerm0.toString());
      assertFalse(jSTerm0.isConstant());
      assertTrue(jSTerm0.isFunction());
      assertEquals(10, jSTerm0.capacity());
      assertFalse(jSTerm0.isEmpty());
      assertEquals(1, jSTerm0.size());
      assertTrue(jSSubstitution1.isEmpty());
      assertEquals(10, jSSubstitution1.capacity());
      assertEquals("[]", jSSubstitution1.toString());
      assertFalse(jSSubstitution1.fail());
      assertEquals(0, jSSubstitution1.size());
      assertFalse(jSTerm1.isConstant());
      assertEquals(10, jSTerm1.capacity());
      assertTrue(jSTerm1.isEval());
      assertEquals("[jFxA%Rdj8%]", jSTerm1.toString());
      assertFalse(jSTerm1.isVariable());
      assertFalse(jSTerm1.isEmpty());
      assertEquals(1, jSTerm1.size());
      assertTrue(jSTerm1.isFunction());
      assertEquals(0, jSSubstitution3.size());
      assertTrue(jSSubstitution3.isEmpty());
      assertFalse(jSSubstitution3.fail());
      assertEquals("[]", jSSubstitution3.toString());
      assertEquals(10, jSSubstitution3.capacity());
      assertSame(jSTerm0, jSTerm1);
      assertNotSame(jSSubstitution1, jSSubstitution3);
      assertNotSame(jSSubstitution1, jSSubstitution0);
      assertNotSame(jSSubstitution1, jSSubstitution2);
      assertSame(jSTerm1, jSTerm0);
      assertNotSame(jSSubstitution3, jSSubstitution1);
      assertNotSame(jSSubstitution3, jSSubstitution0);
      assertNotSame(jSSubstitution3, jSSubstitution2);
      assertNotNull(jSSubstitution3);
      assertTrue(jSSubstitution1.equals((Object)jSSubstitution2));
      assertTrue(jSSubstitution1.equals((Object)jSSubstitution0));
      assertTrue(jSSubstitution3.equals((Object)jSSubstitution2));
      assertTrue(jSSubstitution3.equals((Object)jSSubstitution0));
      assertTrue(jSSubstitution3.equals((Object)jSSubstitution1));
      assertEquals(32, streamTokenizer0.ttype);
      assertEquals(0.0, streamTokenizer0.nval, 0.01);
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      assertTrue(jSTerm0.isEmpty());
      assertFalse(jSTerm0.isVariable());
      assertFalse(jSTerm0.isFunction());
      assertEquals(10, jSTerm0.capacity());
      assertEquals("[]", jSTerm0.toString());
      assertFalse(jSTerm0.isConstant());
      assertFalse(jSTerm0.isEval());
      assertEquals(0, jSTerm0.size());
      assertNotNull(jSTerm0);
      
      jSTerm0.makeConstant();
      assertTrue(jSTerm0.isConstant());
      assertTrue(jSTerm0.isEmpty());
      assertFalse(jSTerm0.isVariable());
      assertFalse(jSTerm0.isFunction());
      assertEquals(10, jSTerm0.capacity());
      assertEquals("[]", jSTerm0.toString());
      assertFalse(jSTerm0.isEval());
      assertEquals(0, jSTerm0.size());
      
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      assertEquals(10, jSSubstitution0.capacity());
      assertEquals(0, jSSubstitution0.size());
      assertTrue(jSSubstitution0.isEmpty());
      assertFalse(jSSubstitution0.fail());
      assertEquals("[]", jSSubstitution0.toString());
      assertNotNull(jSSubstitution0);
      
      jSTerm0.addElement(jSSubstitution0);
      assertTrue(jSTerm0.isConstant());
      assertFalse(jSTerm0.isVariable());
      assertFalse(jSTerm0.isFunction());
      assertEquals("[[]]", jSTerm0.toString());
      assertEquals(10, jSTerm0.capacity());
      assertFalse(jSTerm0.isEmpty());
      assertFalse(jSTerm0.isEval());
      assertEquals(1, jSTerm0.size());
      assertEquals(10, jSSubstitution0.capacity());
      assertEquals(0, jSSubstitution0.size());
      assertTrue(jSSubstitution0.isEmpty());
      assertFalse(jSSubstitution0.fail());
      assertEquals("[]", jSSubstitution0.toString());
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      StringReader stringReader0 = new StringReader("");
      assertNotNull(stringReader0);
      
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      assertEquals("Token[NOTHING], line 1", streamTokenizer0.toString());
      assertEquals(1, streamTokenizer0.lineno());
      assertNotNull(streamTokenizer0);
      assertEquals((-4), streamTokenizer0.ttype);
      assertEquals(0.0, streamTokenizer0.nval, 0.01);
      
      JSTerm jSTerm0 = null;
      try {
        jSTerm0 = new JSTerm(streamTokenizer0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      StringReader stringReader0 = new StringReader(" Expected (");
      assertNotNull(stringReader0);
      
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      assertEquals("Token[NOTHING], line 1", streamTokenizer0.toString());
      assertEquals(1, streamTokenizer0.lineno());
      assertNotNull(streamTokenizer0);
      assertEquals(0.0, streamTokenizer0.nval, 0.01);
      assertEquals((-4), streamTokenizer0.ttype);
      
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      assertEquals("Token[' '], line 1", streamTokenizer0.toString());
      assertEquals(1, streamTokenizer0.lineno());
      assertFalse(jSTerm0.isEval());
      assertFalse(jSTerm0.isVariable());
      assertTrue(jSTerm0.isConstant());
      assertEquals("[Expected]", jSTerm0.toString());
      assertEquals(10, jSTerm0.capacity());
      assertFalse(jSTerm0.isFunction());
      assertEquals(1, jSTerm0.size());
      assertFalse(jSTerm0.isEmpty());
      assertNotNull(jSTerm0);
      assertEquals(0.0, streamTokenizer0.nval, 0.01);
      assertEquals(32, streamTokenizer0.ttype);
      
      jSTerm0.makeFunction();
      assertEquals("Token[' '], line 1", streamTokenizer0.toString());
      assertEquals(1, streamTokenizer0.lineno());
      assertFalse(jSTerm0.isConstant());
      assertFalse(jSTerm0.isEval());
      assertTrue(jSTerm0.isFunction());
      assertFalse(jSTerm0.isVariable());
      assertEquals("[Expected]", jSTerm0.toString());
      assertEquals(10, jSTerm0.capacity());
      assertEquals(1, jSTerm0.size());
      assertFalse(jSTerm0.isEmpty());
      assertEquals(0.0, streamTokenizer0.nval, 0.01);
      assertEquals(32, streamTokenizer0.ttype);
      
      jSTerm0.makeEval(true);
      assertEquals("Token[' '], line 1", streamTokenizer0.toString());
      assertEquals(1, streamTokenizer0.lineno());
      assertFalse(jSTerm0.isConstant());
      assertTrue(jSTerm0.isFunction());
      assertTrue(jSTerm0.isEval());
      assertFalse(jSTerm0.isVariable());
      assertEquals("[Expected]", jSTerm0.toString());
      assertEquals(10, jSTerm0.capacity());
      assertEquals(1, jSTerm0.size());
      assertFalse(jSTerm0.isEmpty());
      assertEquals(0.0, streamTokenizer0.nval, 0.01);
      assertEquals(32, streamTokenizer0.ttype);
      
      boolean boolean0 = jSTerm0.isGround();
      assertEquals("Token[' '], line 1", streamTokenizer0.toString());
      assertEquals(1, streamTokenizer0.lineno());
      assertFalse(jSTerm0.isConstant());
      assertTrue(jSTerm0.isFunction());
      assertTrue(jSTerm0.isEval());
      assertFalse(jSTerm0.isVariable());
      assertEquals("[Expected]", jSTerm0.toString());
      assertEquals(10, jSTerm0.capacity());
      assertEquals(1, jSTerm0.size());
      assertFalse(jSTerm0.isEmpty());
      assertTrue(boolean0);
      assertEquals(0.0, streamTokenizer0.nval, 0.01);
      assertEquals(32, streamTokenizer0.ttype);
      
      boolean boolean1 = jSTerm0.equals(jSTerm0);
      assertEquals("Token[' '], line 1", streamTokenizer0.toString());
      assertEquals(1, streamTokenizer0.lineno());
      assertFalse(jSTerm0.isConstant());
      assertTrue(jSTerm0.isFunction());
      assertTrue(jSTerm0.isEval());
      assertFalse(jSTerm0.isVariable());
      assertEquals("[Expected]", jSTerm0.toString());
      assertEquals(10, jSTerm0.capacity());
      assertEquals(1, jSTerm0.size());
      assertFalse(jSTerm0.isEmpty());
      assertTrue(boolean1);
      assertTrue(boolean1 == boolean0);
      assertEquals(0.0, streamTokenizer0.nval, 0.01);
      assertEquals(32, streamTokenizer0.ttype);
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      assertEquals("[]", jSSubstitution0.toString());
      assertFalse(jSSubstitution0.fail());
      assertTrue(jSSubstitution0.isEmpty());
      assertEquals(10, jSSubstitution0.capacity());
      assertEquals(0, jSSubstitution0.size());
      assertNotNull(jSSubstitution0);
      
      JSTerm jSTerm0 = new JSTerm();
      assertFalse(jSTerm0.isConstant());
      assertEquals(10, jSTerm0.capacity());
      assertEquals("[]", jSTerm0.toString());
      assertEquals(0, jSTerm0.size());
      assertFalse(jSTerm0.isFunction());
      assertFalse(jSTerm0.isEval());
      assertFalse(jSTerm0.isVariable());
      assertTrue(jSTerm0.isEmpty());
      assertNotNull(jSTerm0);
      
      // Undeclared exception!
      try { 
        jSTerm0.call();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      assertEquals(10, jSSubstitution0.capacity());
      assertEquals(0, jSSubstitution0.size());
      assertEquals("[]", jSSubstitution0.toString());
      assertTrue(jSSubstitution0.isEmpty());
      assertFalse(jSSubstitution0.fail());
      assertNotNull(jSSubstitution0);
      
      StringReader stringReader0 = new StringReader("5,ZL~");
      assertNotNull(stringReader0);
      
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      assertEquals("Token[NOTHING], line 1", streamTokenizer0.toString());
      assertEquals(1, streamTokenizer0.lineno());
      assertNotNull(streamTokenizer0);
      assertEquals((-4), streamTokenizer0.ttype);
      assertEquals(0.0, streamTokenizer0.nval, 0.01);
      
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      assertEquals("Token[n=5.0], line 1", streamTokenizer0.toString());
      assertEquals(1, streamTokenizer0.lineno());
      assertFalse(jSTerm0.isEmpty());
      assertEquals("[5.0]", jSTerm0.toString());
      assertTrue(jSTerm0.isConstant());
      assertEquals(1, jSTerm0.size());
      assertFalse(jSTerm0.isEval());
      assertFalse(jSTerm0.isVariable());
      assertEquals(10, jSTerm0.capacity());
      assertFalse(jSTerm0.isFunction());
      assertNotNull(jSTerm0);
      assertEquals((-2), streamTokenizer0.ttype);
      assertEquals(5.0, streamTokenizer0.nval, 0.01);
      
      JSTerm jSTerm1 = jSSubstitution0.instance(jSTerm0);
      assertEquals(10, jSSubstitution0.capacity());
      assertEquals(0, jSSubstitution0.size());
      assertEquals("[]", jSSubstitution0.toString());
      assertTrue(jSSubstitution0.isEmpty());
      assertFalse(jSSubstitution0.fail());
      assertEquals("Token[n=5.0], line 1", streamTokenizer0.toString());
      assertEquals(1, streamTokenizer0.lineno());
      assertFalse(jSTerm0.isEmpty());
      assertEquals("[5.0]", jSTerm0.toString());
      assertTrue(jSTerm0.isConstant());
      assertEquals(1, jSTerm0.size());
      assertFalse(jSTerm0.isEval());
      assertFalse(jSTerm0.isVariable());
      assertEquals(10, jSTerm0.capacity());
      assertFalse(jSTerm0.isFunction());
      assertTrue(jSTerm1.isConstant());
      assertEquals("[5.0]", jSTerm1.toString());
      assertFalse(jSTerm1.isEval());
      assertEquals(1, jSTerm1.size());
      assertEquals(10, jSTerm1.capacity());
      assertFalse(jSTerm1.isVariable());
      assertFalse(jSTerm1.isFunction());
      assertFalse(jSTerm1.isEmpty());
      assertSame(jSTerm0, jSTerm1);
      assertSame(jSTerm1, jSTerm0);
      assertNotNull(jSTerm1);
      assertEquals((-2), streamTokenizer0.ttype);
      assertEquals(5.0, streamTokenizer0.nval, 0.01);
      
      JSTerm jSTerm2 = (JSTerm)jSTerm1.clone();
      assertEquals(10, jSSubstitution0.capacity());
      assertEquals(0, jSSubstitution0.size());
      assertEquals("[]", jSSubstitution0.toString());
      assertTrue(jSSubstitution0.isEmpty());
      assertFalse(jSSubstitution0.fail());
      assertEquals("Token[n=5.0], line 1", streamTokenizer0.toString());
      assertEquals(1, streamTokenizer0.lineno());
      assertFalse(jSTerm0.isEmpty());
      assertEquals("[5.0]", jSTerm0.toString());
      assertTrue(jSTerm0.isConstant());
      assertEquals(1, jSTerm0.size());
      assertFalse(jSTerm0.isEval());
      assertFalse(jSTerm0.isVariable());
      assertEquals(10, jSTerm0.capacity());
      assertFalse(jSTerm0.isFunction());
      assertTrue(jSTerm1.isConstant());
      assertEquals("[5.0]", jSTerm1.toString());
      assertFalse(jSTerm1.isEval());
      assertEquals(1, jSTerm1.size());
      assertEquals(10, jSTerm1.capacity());
      assertFalse(jSTerm1.isVariable());
      assertFalse(jSTerm1.isFunction());
      assertFalse(jSTerm1.isEmpty());
      assertFalse(jSTerm2.isEval());
      assertFalse(jSTerm2.isFunction());
      assertFalse(jSTerm2.isVariable());
      assertEquals("[5.0]", jSTerm2.toString());
      assertTrue(jSTerm2.isConstant());
      assertEquals(1, jSTerm2.capacity());
      assertFalse(jSTerm2.isEmpty());
      assertEquals(1, jSTerm2.size());
      assertNotSame(jSTerm0, jSTerm2);
      assertSame(jSTerm0, jSTerm1);
      assertNotSame(jSTerm1, jSTerm2);
      assertSame(jSTerm1, jSTerm0);
      assertNotSame(jSTerm2, jSTerm1);
      assertNotSame(jSTerm2, jSTerm0);
      assertNotNull(jSTerm2);
      assertTrue(jSTerm2.equals((Object)jSTerm1));
      assertTrue(jSTerm2.equals((Object)jSTerm0));
      assertEquals((-2), streamTokenizer0.ttype);
      assertEquals(5.0, streamTokenizer0.nval, 0.01);
      
      boolean boolean0 = jSTerm2.add((Object) jSTerm1);
      assertEquals(10, jSSubstitution0.capacity());
      assertEquals(0, jSSubstitution0.size());
      assertEquals("[]", jSSubstitution0.toString());
      assertTrue(jSSubstitution0.isEmpty());
      assertFalse(jSSubstitution0.fail());
      assertEquals("Token[n=5.0], line 1", streamTokenizer0.toString());
      assertEquals(1, streamTokenizer0.lineno());
      assertFalse(jSTerm0.isEmpty());
      assertEquals("[5.0]", jSTerm0.toString());
      assertTrue(jSTerm0.isConstant());
      assertEquals(1, jSTerm0.size());
      assertFalse(jSTerm0.isEval());
      assertFalse(jSTerm0.isVariable());
      assertEquals(10, jSTerm0.capacity());
      assertFalse(jSTerm0.isFunction());
      assertTrue(jSTerm1.isConstant());
      assertEquals("[5.0]", jSTerm1.toString());
      assertFalse(jSTerm1.isEval());
      assertEquals(1, jSTerm1.size());
      assertEquals(10, jSTerm1.capacity());
      assertFalse(jSTerm1.isVariable());
      assertFalse(jSTerm1.isFunction());
      assertFalse(jSTerm1.isEmpty());
      assertFalse(jSTerm2.isEval());
      assertFalse(jSTerm2.isFunction());
      assertFalse(jSTerm2.isVariable());
      assertTrue(jSTerm2.isConstant());
      assertEquals("[5.0, [5.0]]", jSTerm2.toString());
      assertEquals(2, jSTerm2.capacity());
      assertFalse(jSTerm2.isEmpty());
      assertEquals(2, jSTerm2.size());
      assertTrue(boolean0);
      assertNotSame(jSTerm0, jSTerm2);
      assertSame(jSTerm0, jSTerm1);
      assertNotSame(jSTerm1, jSTerm2);
      assertSame(jSTerm1, jSTerm0);
      assertNotSame(jSTerm2, jSTerm1);
      assertNotSame(jSTerm2, jSTerm0);
      assertFalse(jSTerm0.equals((Object)jSTerm2));
      assertFalse(jSTerm1.equals((Object)jSTerm2));
      assertFalse(jSTerm2.equals((Object)jSTerm1));
      assertFalse(jSTerm2.equals((Object)jSTerm0));
      assertEquals((-2), streamTokenizer0.ttype);
      assertEquals(5.0, streamTokenizer0.nval, 0.01);
      
      jSTerm2.makeFunction();
      assertEquals(10, jSSubstitution0.capacity());
      assertEquals(0, jSSubstitution0.size());
      assertEquals("[]", jSSubstitution0.toString());
      assertTrue(jSSubstitution0.isEmpty());
      assertFalse(jSSubstitution0.fail());
      assertEquals("Token[n=5.0], line 1", streamTokenizer0.toString());
      assertEquals(1, streamTokenizer0.lineno());
      assertFalse(jSTerm0.isEmpty());
      assertEquals("[5.0]", jSTerm0.toString());
      assertTrue(jSTerm0.isConstant());
      assertEquals(1, jSTerm0.size());
      assertFalse(jSTerm0.isEval());
      assertFalse(jSTerm0.isVariable());
      assertEquals(10, jSTerm0.capacity());
      assertFalse(jSTerm0.isFunction());
      assertTrue(jSTerm1.isConstant());
      assertEquals("[5.0]", jSTerm1.toString());
      assertFalse(jSTerm1.isEval());
      assertEquals(1, jSTerm1.size());
      assertEquals(10, jSTerm1.capacity());
      assertFalse(jSTerm1.isVariable());
      assertFalse(jSTerm1.isFunction());
      assertFalse(jSTerm1.isEmpty());
      assertFalse(jSTerm2.isEval());
      assertFalse(jSTerm2.isVariable());
      assertEquals("[5.0, [5.0]]", jSTerm2.toString());
      assertEquals(2, jSTerm2.capacity());
      assertFalse(jSTerm2.isEmpty());
      assertTrue(jSTerm2.isFunction());
      assertFalse(jSTerm2.isConstant());
      assertEquals(2, jSTerm2.size());
      assertNotSame(jSTerm0, jSTerm2);
      assertSame(jSTerm0, jSTerm1);
      assertNotSame(jSTerm1, jSTerm2);
      assertSame(jSTerm1, jSTerm0);
      assertNotSame(jSTerm2, jSTerm1);
      assertNotSame(jSTerm2, jSTerm0);
      assertFalse(jSTerm0.equals((Object)jSTerm2));
      assertFalse(jSTerm1.equals((Object)jSTerm2));
      assertFalse(jSTerm2.equals((Object)jSTerm1));
      assertFalse(jSTerm2.equals((Object)jSTerm0));
      assertEquals((-2), streamTokenizer0.ttype);
      assertEquals(5.0, streamTokenizer0.nval, 0.01);
      
      UnaryOperator<String> unaryOperator0 = UnaryOperator.identity();
      assertNotNull(unaryOperator0);
      
      jSTerm0.replaceAll(unaryOperator0);
      assertEquals("Token[n=5.0], line 1", streamTokenizer0.toString());
      assertEquals(1, streamTokenizer0.lineno());
      assertFalse(jSTerm0.isEmpty());
      assertEquals("[5.0]", jSTerm0.toString());
      assertTrue(jSTerm0.isConstant());
      assertEquals(1, jSTerm0.size());
      assertFalse(jSTerm0.isEval());
      assertFalse(jSTerm0.isVariable());
      assertEquals(10, jSTerm0.capacity());
      assertFalse(jSTerm0.isFunction());
      assertNotSame(jSTerm0, jSTerm2);
      assertSame(jSTerm0, jSTerm1);
      assertFalse(jSTerm0.equals((Object)jSTerm2));
      assertEquals((-2), streamTokenizer0.ttype);
      assertEquals(5.0, streamTokenizer0.nval, 0.01);
      
      JSTerm jSTerm3 = jSTerm1.applySubstitutionT(jSSubstitution0);
      assertEquals(10, jSSubstitution0.capacity());
      assertEquals(0, jSSubstitution0.size());
      assertEquals("[]", jSSubstitution0.toString());
      assertTrue(jSSubstitution0.isEmpty());
      assertFalse(jSSubstitution0.fail());
      assertEquals("Token[n=5.0], line 1", streamTokenizer0.toString());
      assertEquals(1, streamTokenizer0.lineno());
      assertFalse(jSTerm0.isEmpty());
      assertEquals("[5.0]", jSTerm0.toString());
      assertTrue(jSTerm0.isConstant());
      assertEquals(1, jSTerm0.size());
      assertFalse(jSTerm0.isEval());
      assertFalse(jSTerm0.isVariable());
      assertEquals(10, jSTerm0.capacity());
      assertFalse(jSTerm0.isFunction());
      assertTrue(jSTerm1.isConstant());
      assertEquals("[5.0]", jSTerm1.toString());
      assertFalse(jSTerm1.isEval());
      assertEquals(1, jSTerm1.size());
      assertEquals(10, jSTerm1.capacity());
      assertFalse(jSTerm1.isVariable());
      assertFalse(jSTerm1.isFunction());
      assertFalse(jSTerm1.isEmpty());
      assertEquals(10, jSTerm3.capacity());
      assertFalse(jSTerm3.isFunction());
      assertFalse(jSTerm3.isVariable());
      assertEquals(1, jSTerm3.size());
      assertEquals("[5.0]", jSTerm3.toString());
      assertTrue(jSTerm3.isConstant());
      assertFalse(jSTerm3.isEmpty());
      assertFalse(jSTerm3.isEval());
      assertNotSame(jSTerm0, jSTerm2);
      assertNotSame(jSTerm0, jSTerm3);
      assertSame(jSTerm0, jSTerm1);
      assertNotSame(jSTerm1, jSTerm2);
      assertNotSame(jSTerm1, jSTerm3);
      assertSame(jSTerm1, jSTerm0);
      assertNotSame(jSTerm3, jSTerm0);
      assertNotSame(jSTerm3, jSTerm2);
      assertNotSame(jSTerm3, jSTerm1);
      assertNotNull(jSTerm3);
      assertFalse(jSTerm0.equals((Object)jSTerm2));
      assertFalse(jSTerm1.equals((Object)jSTerm2));
      assertTrue(jSTerm3.equals((Object)jSTerm0));
      assertTrue(jSTerm3.equals((Object)jSTerm1));
      assertFalse(jSTerm3.equals((Object)jSTerm2));
      assertEquals((-2), streamTokenizer0.ttype);
      assertEquals(5.0, streamTokenizer0.nval, 0.01);
      
      boolean boolean1 = jSTerm2.isGround();
      assertEquals(10, jSSubstitution0.capacity());
      assertEquals(0, jSSubstitution0.size());
      assertEquals("[]", jSSubstitution0.toString());
      assertTrue(jSSubstitution0.isEmpty());
      assertFalse(jSSubstitution0.fail());
      assertEquals("Token[n=5.0], line 1", streamTokenizer0.toString());
      assertEquals(1, streamTokenizer0.lineno());
      assertFalse(jSTerm0.isEmpty());
      assertEquals("[5.0]", jSTerm0.toString());
      assertTrue(jSTerm0.isConstant());
      assertEquals(1, jSTerm0.size());
      assertFalse(jSTerm0.isEval());
      assertFalse(jSTerm0.isVariable());
      assertEquals(10, jSTerm0.capacity());
      assertFalse(jSTerm0.isFunction());
      assertTrue(jSTerm1.isConstant());
      assertEquals("[5.0]", jSTerm1.toString());
      assertFalse(jSTerm1.isEval());
      assertEquals(1, jSTerm1.size());
      assertEquals(10, jSTerm1.capacity());
      assertFalse(jSTerm1.isVariable());
      assertFalse(jSTerm1.isFunction());
      assertFalse(jSTerm1.isEmpty());
      assertFalse(jSTerm2.isEval());
      assertFalse(jSTerm2.isVariable());
      assertEquals("[5.0, [5.0]]", jSTerm2.toString());
      assertEquals(2, jSTerm2.capacity());
      assertFalse(jSTerm2.isEmpty());
      assertTrue(jSTerm2.isFunction());
      assertFalse(jSTerm2.isConstant());
      assertEquals(2, jSTerm2.size());
      assertTrue(boolean1);
      assertNotSame(jSTerm0, jSTerm2);
      assertNotSame(jSTerm0, jSTerm3);
      assertSame(jSTerm0, jSTerm1);
      assertNotSame(jSTerm1, jSTerm2);
      assertNotSame(jSTerm1, jSTerm3);
      assertSame(jSTerm1, jSTerm0);
      assertNotSame(jSTerm2, jSTerm1);
      assertNotSame(jSTerm2, jSTerm0);
      assertNotSame(jSTerm2, jSTerm3);
      assertTrue(jSTerm0.equals((Object)jSTerm3));
      assertFalse(jSTerm0.equals((Object)jSTerm2));
      assertFalse(jSTerm1.equals((Object)jSTerm2));
      assertTrue(jSTerm1.equals((Object)jSTerm3));
      assertFalse(jSTerm2.equals((Object)jSTerm1));
      assertFalse(jSTerm2.equals((Object)jSTerm0));
      assertFalse(jSTerm2.equals((Object)jSTerm3));
      assertTrue(boolean1 == boolean0);
      assertEquals((-2), streamTokenizer0.ttype);
      assertEquals(5.0, streamTokenizer0.nval, 0.01);
      
      JSTerm jSTerm4 = jSTerm2.applySubstitutionT(jSSubstitution0);
      assertEquals(10, jSSubstitution0.capacity());
      assertEquals(0, jSSubstitution0.size());
      assertEquals("[]", jSSubstitution0.toString());
      assertTrue(jSSubstitution0.isEmpty());
      assertFalse(jSSubstitution0.fail());
      assertEquals("Token[n=5.0], line 1", streamTokenizer0.toString());
      assertEquals(1, streamTokenizer0.lineno());
      assertFalse(jSTerm0.isEmpty());
      assertEquals("[5.0]", jSTerm0.toString());
      assertTrue(jSTerm0.isConstant());
      assertEquals(1, jSTerm0.size());
      assertFalse(jSTerm0.isEval());
      assertFalse(jSTerm0.isVariable());
      assertEquals(10, jSTerm0.capacity());
      assertFalse(jSTerm0.isFunction());
      assertTrue(jSTerm1.isConstant());
      assertEquals("[5.0]", jSTerm1.toString());
      assertFalse(jSTerm1.isEval());
      assertEquals(1, jSTerm1.size());
      assertEquals(10, jSTerm1.capacity());
      assertFalse(jSTerm1.isVariable());
      assertFalse(jSTerm1.isFunction());
      assertFalse(jSTerm1.isEmpty());
      assertFalse(jSTerm2.isEval());
      assertFalse(jSTerm2.isVariable());
      assertEquals("[5.0, [5.0]]", jSTerm2.toString());
      assertEquals(2, jSTerm2.capacity());
      assertFalse(jSTerm2.isEmpty());
      assertTrue(jSTerm2.isFunction());
      assertFalse(jSTerm2.isConstant());
      assertEquals(2, jSTerm2.size());
      assertEquals(10, jSTerm4.capacity());
      assertFalse(jSTerm4.isVariable());
      assertFalse(jSTerm4.isEval());
      assertEquals(2, jSTerm4.size());
      assertFalse(jSTerm4.isEmpty());
      assertTrue(jSTerm4.isFunction());
      assertFalse(jSTerm4.isConstant());
      assertEquals("[5.0, [5.0]]", jSTerm4.toString());
      assertNotSame(jSTerm0, jSTerm2);
      assertNotSame(jSTerm0, jSTerm3);
      assertNotSame(jSTerm0, jSTerm4);
      assertSame(jSTerm0, jSTerm1);
      assertNotSame(jSTerm1, jSTerm2);
      assertNotSame(jSTerm1, jSTerm4);
      assertNotSame(jSTerm1, jSTerm3);
      assertSame(jSTerm1, jSTerm0);
      assertNotSame(jSTerm2, jSTerm1);
      assertNotSame(jSTerm2, jSTerm4);
      assertNotSame(jSTerm2, jSTerm0);
      assertNotSame(jSTerm2, jSTerm3);
      assertNotSame(jSTerm4, jSTerm3);
      assertNotSame(jSTerm4, jSTerm2);
      assertNotSame(jSTerm4, jSTerm1);
      assertNotSame(jSTerm4, jSTerm0);
      assertNotNull(jSTerm4);
      assertTrue(jSTerm0.equals((Object)jSTerm3));
      assertFalse(jSTerm0.equals((Object)jSTerm2));
      assertFalse(jSTerm1.equals((Object)jSTerm2));
      assertTrue(jSTerm1.equals((Object)jSTerm3));
      assertFalse(jSTerm2.equals((Object)jSTerm1));
      assertFalse(jSTerm2.equals((Object)jSTerm0));
      assertFalse(jSTerm2.equals((Object)jSTerm3));
      assertFalse(jSTerm4.equals((Object)jSTerm3));
      assertFalse(jSTerm4.equals((Object)jSTerm1));
      assertFalse(jSTerm4.equals((Object)jSTerm0));
      assertTrue(jSTerm4.equals((Object)jSTerm2));
      assertEquals((-2), streamTokenizer0.ttype);
      assertEquals(5.0, streamTokenizer0.nval, 0.01);
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      assertFalse(jSTerm0.isConstant());
      assertEquals(10, jSTerm0.capacity());
      assertEquals("[]", jSTerm0.toString());
      assertFalse(jSTerm0.isFunction());
      assertEquals(0, jSTerm0.size());
      assertTrue(jSTerm0.isEmpty());
      assertFalse(jSTerm0.isEval());
      assertFalse(jSTerm0.isVariable());
      assertNotNull(jSTerm0);
      
      StringReader stringReader0 = new StringReader("Undefined function to be evaluated  in Call statement");
      assertNotNull(stringReader0);
      
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      assertEquals(1, streamTokenizer0.lineno());
      assertEquals("Token[NOTHING], line 1", streamTokenizer0.toString());
      assertNotNull(streamTokenizer0);
      assertEquals(0.0, streamTokenizer0.nval, 0.01);
      assertEquals((-4), streamTokenizer0.ttype);
      
      JSTerm jSTerm1 = new JSTerm(streamTokenizer0);
      assertEquals(1, streamTokenizer0.lineno());
      assertEquals("Token[' '], line 1", streamTokenizer0.toString());
      assertFalse(jSTerm1.isEval());
      assertFalse(jSTerm1.isVariable());
      assertTrue(jSTerm1.isConstant());
      assertEquals("[Undefined]", jSTerm1.toString());
      assertEquals(10, jSTerm1.capacity());
      assertFalse(jSTerm1.isFunction());
      assertFalse(jSTerm1.isEmpty());
      assertEquals(1, jSTerm1.size());
      assertNotNull(jSTerm1);
      assertFalse(jSTerm1.equals((Object)jSTerm0));
      assertEquals(0.0, streamTokenizer0.nval, 0.01);
      assertEquals(32, streamTokenizer0.ttype);
      
      JSTerm jSTerm2 = new JSTerm(streamTokenizer0);
      assertEquals(1, streamTokenizer0.lineno());
      assertEquals("Token[' '], line 1", streamTokenizer0.toString());
      assertEquals("[function]", jSTerm2.toString());
      assertTrue(jSTerm2.isConstant());
      assertFalse(jSTerm2.isEmpty());
      assertEquals(1, jSTerm2.size());
      assertEquals(10, jSTerm2.capacity());
      assertFalse(jSTerm2.isFunction());
      assertFalse(jSTerm2.isEval());
      assertFalse(jSTerm2.isVariable());
      assertNotNull(jSTerm2);
      assertFalse(jSTerm2.equals((Object)jSTerm0));
      assertFalse(jSTerm2.equals((Object)jSTerm1));
      assertEquals(0.0, streamTokenizer0.nval, 0.01);
      assertEquals(32, streamTokenizer0.ttype);
      
      JSTerm jSTerm3 = new JSTerm(streamTokenizer0);
      assertEquals(1, streamTokenizer0.lineno());
      assertEquals("Token[' '], line 1", streamTokenizer0.toString());
      assertFalse(jSTerm3.isEmpty());
      assertTrue(jSTerm3.isConstant());
      assertFalse(jSTerm3.isVariable());
      assertEquals(10, jSTerm3.capacity());
      assertFalse(jSTerm3.isFunction());
      assertFalse(jSTerm3.isEval());
      assertEquals(1, jSTerm3.size());
      assertEquals("[to]", jSTerm3.toString());
      assertNotNull(jSTerm3);
      assertFalse(jSTerm3.equals((Object)jSTerm0));
      assertFalse(jSTerm3.equals((Object)jSTerm2));
      assertFalse(jSTerm3.equals((Object)jSTerm1));
      assertEquals(0.0, streamTokenizer0.nval, 0.01);
      assertEquals(32, streamTokenizer0.ttype);
      
      StringBuffer stringBuffer0 = jSTerm3.toStr();
      assertEquals(1, streamTokenizer0.lineno());
      assertEquals("Token[' '], line 1", streamTokenizer0.toString());
      assertFalse(jSTerm3.isEmpty());
      assertTrue(jSTerm3.isConstant());
      assertFalse(jSTerm3.isVariable());
      assertEquals(10, jSTerm3.capacity());
      assertFalse(jSTerm3.isFunction());
      assertFalse(jSTerm3.isEval());
      assertEquals(1, jSTerm3.size());
      assertEquals("[to]", jSTerm3.toString());
      assertEquals(3, stringBuffer0.length());
      assertEquals("to ", stringBuffer0.toString());
      assertNotSame(jSTerm3, jSTerm0);
      assertNotSame(jSTerm3, jSTerm2);
      assertNotSame(jSTerm3, jSTerm1);
      assertNotNull(stringBuffer0);
      assertFalse(jSTerm3.equals((Object)jSTerm0));
      assertFalse(jSTerm3.equals((Object)jSTerm2));
      assertFalse(jSTerm3.equals((Object)jSTerm1));
      assertEquals(0.0, streamTokenizer0.nval, 0.01);
      assertEquals(32, streamTokenizer0.ttype);
      
      JSTerm jSTerm4 = new JSTerm(streamTokenizer0);
      assertEquals(1, streamTokenizer0.lineno());
      assertEquals("Token[' '], line 1", streamTokenizer0.toString());
      assertTrue(jSTerm4.isConstant());
      assertFalse(jSTerm4.isEmpty());
      assertEquals(1, jSTerm4.size());
      assertEquals("[be]", jSTerm4.toString());
      assertFalse(jSTerm4.isEval());
      assertEquals(10, jSTerm4.capacity());
      assertFalse(jSTerm4.isFunction());
      assertFalse(jSTerm4.isVariable());
      assertNotNull(jSTerm4);
      assertFalse(jSTerm4.equals((Object)jSTerm0));
      assertFalse(jSTerm4.equals((Object)jSTerm1));
      assertFalse(jSTerm4.equals((Object)jSTerm3));
      assertFalse(jSTerm4.equals((Object)jSTerm2));
      assertEquals(0.0, streamTokenizer0.nval, 0.01);
      assertEquals(32, streamTokenizer0.ttype);
      
      JSTerm jSTerm5 = new JSTerm();
      assertTrue(jSTerm5.isEmpty());
      assertEquals("[]", jSTerm5.toString());
      assertEquals(10, jSTerm5.capacity());
      assertFalse(jSTerm5.isFunction());
      assertFalse(jSTerm5.isVariable());
      assertFalse(jSTerm5.isConstant());
      assertEquals(0, jSTerm5.size());
      assertFalse(jSTerm5.isEval());
      assertNotNull(jSTerm5);
      assertFalse(jSTerm5.equals((Object)jSTerm1));
      assertFalse(jSTerm5.equals((Object)jSTerm2));
      assertFalse(jSTerm5.equals((Object)jSTerm4));
      assertTrue(jSTerm5.equals((Object)jSTerm0));
      assertFalse(jSTerm5.equals((Object)jSTerm3));
      
      boolean boolean0 = jSTerm4.equals(jSTerm5);
      assertEquals(1, streamTokenizer0.lineno());
      assertEquals("Token[' '], line 1", streamTokenizer0.toString());
      assertTrue(jSTerm4.isConstant());
      assertFalse(jSTerm4.isEmpty());
      assertEquals(1, jSTerm4.size());
      assertEquals("[be]", jSTerm4.toString());
      assertFalse(jSTerm4.isEval());
      assertEquals(10, jSTerm4.capacity());
      assertFalse(jSTerm4.isFunction());
      assertFalse(jSTerm4.isVariable());
      assertTrue(jSTerm5.isEmpty());
      assertEquals("[]", jSTerm5.toString());
      assertEquals(10, jSTerm5.capacity());
      assertFalse(jSTerm5.isFunction());
      assertFalse(jSTerm5.isVariable());
      assertFalse(jSTerm5.isConstant());
      assertEquals(0, jSTerm5.size());
      assertFalse(jSTerm5.isEval());
      assertFalse(boolean0);
      assertNotSame(jSTerm4, jSTerm0);
      assertNotSame(jSTerm4, jSTerm1);
      assertNotSame(jSTerm4, jSTerm3);
      assertNotSame(jSTerm4, jSTerm2);
      assertNotSame(jSTerm4, jSTerm5);
      assertNotSame(jSTerm5, jSTerm0);
      assertNotSame(jSTerm5, jSTerm1);
      assertNotSame(jSTerm5, jSTerm2);
      assertNotSame(jSTerm5, jSTerm4);
      assertNotSame(jSTerm5, jSTerm3);
      assertFalse(jSTerm4.equals((Object)jSTerm0));
      assertFalse(jSTerm4.equals((Object)jSTerm1));
      assertFalse(jSTerm4.equals((Object)jSTerm3));
      assertFalse(jSTerm4.equals((Object)jSTerm2));
      assertFalse(jSTerm4.equals((Object)jSTerm5));
      assertFalse(jSTerm5.equals((Object)jSTerm1));
      assertFalse(jSTerm5.equals((Object)jSTerm2));
      assertFalse(jSTerm5.equals((Object)jSTerm4));
      assertTrue(jSTerm5.equals((Object)jSTerm0));
      assertFalse(jSTerm5.equals((Object)jSTerm3));
      assertEquals(0.0, streamTokenizer0.nval, 0.01);
      assertEquals(32, streamTokenizer0.ttype);
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      assertFalse(jSTerm0.isConstant());
      assertEquals(10, jSTerm0.capacity());
      assertFalse(jSTerm0.isFunction());
      assertTrue(jSTerm0.isEmpty());
      assertEquals("[]", jSTerm0.toString());
      assertFalse(jSTerm0.isEval());
      assertEquals(0, jSTerm0.size());
      assertFalse(jSTerm0.isVariable());
      assertNotNull(jSTerm0);
      
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      assertEquals(0, jSSubstitution0.size());
      assertTrue(jSSubstitution0.isEmpty());
      assertFalse(jSSubstitution0.fail());
      assertEquals(10, jSSubstitution0.capacity());
      assertEquals("[]", jSSubstitution0.toString());
      assertNotNull(jSSubstitution0);
      
      boolean boolean0 = jSTerm0.add((Object) jSSubstitution0);
      assertFalse(jSTerm0.isConstant());
      assertFalse(jSTerm0.isEmpty());
      assertEquals(10, jSTerm0.capacity());
      assertEquals("[[]]", jSTerm0.toString());
      assertFalse(jSTerm0.isFunction());
      assertEquals(1, jSTerm0.size());
      assertFalse(jSTerm0.isEval());
      assertFalse(jSTerm0.isVariable());
      assertEquals(0, jSSubstitution0.size());
      assertTrue(jSSubstitution0.isEmpty());
      assertFalse(jSSubstitution0.fail());
      assertEquals(10, jSSubstitution0.capacity());
      assertEquals("[]", jSSubstitution0.toString());
      assertTrue(boolean0);
      
      StringBuffer stringBuffer0 = jSTerm0.toStr();
      assertFalse(jSTerm0.isConstant());
      assertFalse(jSTerm0.isEmpty());
      assertEquals(10, jSTerm0.capacity());
      assertEquals("[[]]", jSTerm0.toString());
      assertFalse(jSTerm0.isFunction());
      assertEquals(1, jSTerm0.size());
      assertFalse(jSTerm0.isEval());
      assertFalse(jSTerm0.isVariable());
      assertEquals("([] )", stringBuffer0.toString());
      assertEquals(5, stringBuffer0.length());
      assertNotNull(stringBuffer0);
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      StringReader stringReader0 = new StringReader("bl|");
      assertNotNull(stringReader0);
      
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      assertEquals("Token[NOTHING], line 1", streamTokenizer0.toString());
      assertEquals(1, streamTokenizer0.lineno());
      assertNotNull(streamTokenizer0);
      assertEquals((-4), streamTokenizer0.ttype);
      assertEquals(0.0, streamTokenizer0.nval, 0.01);
      
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      assertEquals("Token[EOF], line 1", streamTokenizer0.toString());
      assertEquals(1, streamTokenizer0.lineno());
      assertEquals(10, jSTerm0.capacity());
      assertFalse(jSTerm0.isFunction());
      assertFalse(jSTerm0.isVariable());
      assertFalse(jSTerm0.isEval());
      assertFalse(jSTerm0.isEmpty());
      assertEquals(1, jSTerm0.size());
      assertEquals("[%%%]", jSTerm0.toString());
      assertTrue(jSTerm0.isConstant());
      assertNotNull(jSTerm0);
      assertEquals(0.0, streamTokenizer0.nval, 0.01);
      assertEquals((-1), streamTokenizer0.ttype);
      
      jSTerm0.print();
      assertEquals("Token[EOF], line 1", streamTokenizer0.toString());
      assertEquals(1, streamTokenizer0.lineno());
      assertEquals(10, jSTerm0.capacity());
      assertFalse(jSTerm0.isFunction());
      assertFalse(jSTerm0.isVariable());
      assertFalse(jSTerm0.isEval());
      assertFalse(jSTerm0.isEmpty());
      assertEquals(1, jSTerm0.size());
      assertEquals("[%%%]", jSTerm0.toString());
      assertTrue(jSTerm0.isConstant());
      assertEquals(0.0, streamTokenizer0.nval, 0.01);
      assertEquals((-1), streamTokenizer0.ttype);
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      assertTrue(jSTerm0.isEmpty());
      assertEquals("[]", jSTerm0.toString());
      assertFalse(jSTerm0.isVariable());
      assertFalse(jSTerm0.isEval());
      assertEquals(0, jSTerm0.size());
      assertFalse(jSTerm0.isConstant());
      assertEquals(10, jSTerm0.capacity());
      assertFalse(jSTerm0.isFunction());
      assertNotNull(jSTerm0);
      
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      assertEquals(10, jSSubstitution0.capacity());
      assertTrue(jSSubstitution0.isEmpty());
      assertFalse(jSSubstitution0.fail());
      assertEquals(0, jSSubstitution0.size());
      assertEquals("[]", jSSubstitution0.toString());
      assertNotNull(jSSubstitution0);
      
      boolean boolean0 = jSTerm0.add((Object) jSSubstitution0);
      assertFalse(jSTerm0.isEmpty());
      assertFalse(jSTerm0.isVariable());
      assertFalse(jSTerm0.isEval());
      assertEquals("[[]]", jSTerm0.toString());
      assertEquals(1, jSTerm0.size());
      assertFalse(jSTerm0.isConstant());
      assertEquals(10, jSTerm0.capacity());
      assertFalse(jSTerm0.isFunction());
      assertEquals(10, jSSubstitution0.capacity());
      assertTrue(jSSubstitution0.isEmpty());
      assertFalse(jSSubstitution0.fail());
      assertEquals(0, jSSubstitution0.size());
      assertEquals("[]", jSSubstitution0.toString());
      assertTrue(boolean0);
      
      jSTerm0.makeFunction();
      assertFalse(jSTerm0.isEmpty());
      assertTrue(jSTerm0.isFunction());
      assertFalse(jSTerm0.isVariable());
      assertFalse(jSTerm0.isEval());
      assertEquals("[[]]", jSTerm0.toString());
      assertEquals(1, jSTerm0.size());
      assertFalse(jSTerm0.isConstant());
      assertEquals(10, jSTerm0.capacity());
      
      JSTerm jSTerm1 = new JSTerm();
      assertTrue(jSTerm1.isEmpty());
      assertEquals("[]", jSTerm1.toString());
      assertFalse(jSTerm1.isVariable());
      assertFalse(jSTerm1.isEval());
      assertEquals(10, jSTerm1.capacity());
      assertEquals(0, jSTerm1.size());
      assertFalse(jSTerm1.isConstant());
      assertFalse(jSTerm1.isFunction());
      assertNotNull(jSTerm1);
      assertFalse(jSTerm1.equals((Object)jSTerm0));
      
      JSSubstitution jSSubstitution1 = jSTerm1.matches(jSTerm0, jSSubstitution0);
      assertFalse(jSTerm0.isEmpty());
      assertTrue(jSTerm0.isFunction());
      assertFalse(jSTerm0.isVariable());
      assertFalse(jSTerm0.isEval());
      assertEquals("[[]]", jSTerm0.toString());
      assertEquals(1, jSTerm0.size());
      assertFalse(jSTerm0.isConstant());
      assertEquals(10, jSTerm0.capacity());
      assertEquals(10, jSSubstitution0.capacity());
      assertTrue(jSSubstitution0.isEmpty());
      assertFalse(jSSubstitution0.fail());
      assertEquals(0, jSSubstitution0.size());
      assertEquals("[]", jSSubstitution0.toString());
      assertTrue(jSTerm1.isEmpty());
      assertEquals("[]", jSTerm1.toString());
      assertFalse(jSTerm1.isVariable());
      assertFalse(jSTerm1.isEval());
      assertEquals(10, jSTerm1.capacity());
      assertEquals(0, jSTerm1.size());
      assertFalse(jSTerm1.isConstant());
      assertFalse(jSTerm1.isFunction());
      assertEquals(0, jSSubstitution1.size());
      assertTrue(jSSubstitution1.fail());
      assertTrue(jSSubstitution1.isEmpty());
      assertEquals("[]", jSSubstitution1.toString());
      assertEquals(10, jSSubstitution1.capacity());
      assertNotSame(jSTerm0, jSTerm1);
      assertNotSame(jSSubstitution0, jSSubstitution1);
      assertNotSame(jSTerm1, jSTerm0);
      assertNotSame(jSSubstitution1, jSSubstitution0);
      assertNotNull(jSSubstitution1);
      assertFalse(jSTerm0.equals((Object)jSTerm1));
      assertFalse(jSTerm1.equals((Object)jSTerm0));
      assertTrue(jSSubstitution1.equals((Object)jSSubstitution0));
      
      boolean boolean1 = jSTerm1.isVariable();
      assertTrue(jSTerm1.isEmpty());
      assertEquals("[]", jSTerm1.toString());
      assertFalse(jSTerm1.isVariable());
      assertFalse(jSTerm1.isEval());
      assertEquals(10, jSTerm1.capacity());
      assertEquals(0, jSTerm1.size());
      assertFalse(jSTerm1.isConstant());
      assertFalse(jSTerm1.isFunction());
      assertFalse(boolean1);
      assertNotSame(jSTerm1, jSTerm0);
      assertFalse(jSTerm1.equals((Object)jSTerm0));
      assertFalse(boolean1 == boolean0);
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      assertTrue(jSTerm0.isEmpty());
      assertFalse(jSTerm0.isVariable());
      assertFalse(jSTerm0.isFunction());
      assertFalse(jSTerm0.isEval());
      assertEquals(0, jSTerm0.size());
      assertEquals(10, jSTerm0.capacity());
      assertEquals("[]", jSTerm0.toString());
      assertFalse(jSTerm0.isConstant());
      assertNotNull(jSTerm0);
      
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      assertFalse(jSSubstitution0.fail());
      assertTrue(jSSubstitution0.isEmpty());
      assertEquals(10, jSSubstitution0.capacity());
      assertEquals(0, jSSubstitution0.size());
      assertEquals("[]", jSSubstitution0.toString());
      assertNotNull(jSSubstitution0);
      
      jSTerm0.makeVariable();
      assertTrue(jSTerm0.isVariable());
      assertTrue(jSTerm0.isEmpty());
      assertFalse(jSTerm0.isFunction());
      assertFalse(jSTerm0.isEval());
      assertEquals(0, jSTerm0.size());
      assertEquals(10, jSTerm0.capacity());
      assertEquals("[]", jSTerm0.toString());
      assertFalse(jSTerm0.isConstant());
      
      JSTerm jSTerm1 = new JSTerm();
      assertFalse(jSTerm1.isConstant());
      assertFalse(jSTerm1.isEval());
      assertEquals(0, jSTerm1.size());
      assertTrue(jSTerm1.isEmpty());
      assertEquals("[]", jSTerm1.toString());
      assertFalse(jSTerm1.isFunction());
      assertEquals(10, jSTerm1.capacity());
      assertFalse(jSTerm1.isVariable());
      assertNotNull(jSTerm1);
      assertTrue(jSTerm1.equals((Object)jSTerm0));
      
      // Undeclared exception!
      try { 
        jSTerm0.matches(jSTerm1, jSSubstitution0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      assertTrue(jSTerm0.isEmpty());
      assertEquals("[]", jSTerm0.toString());
      assertFalse(jSTerm0.isConstant());
      assertEquals(0, jSTerm0.size());
      assertFalse(jSTerm0.isEval());
      assertEquals(10, jSTerm0.capacity());
      assertFalse(jSTerm0.isFunction());
      assertFalse(jSTerm0.isVariable());
      assertNotNull(jSTerm0);
      
      JSTerm jSTerm1 = (JSTerm)jSTerm0.clone();
      assertTrue(jSTerm0.isEmpty());
      assertEquals("[]", jSTerm0.toString());
      assertFalse(jSTerm0.isConstant());
      assertEquals(0, jSTerm0.size());
      assertFalse(jSTerm0.isEval());
      assertEquals(10, jSTerm0.capacity());
      assertFalse(jSTerm0.isFunction());
      assertFalse(jSTerm0.isVariable());
      assertTrue(jSTerm1.isEmpty());
      assertEquals("[]", jSTerm1.toString());
      assertEquals(0, jSTerm1.capacity());
      assertFalse(jSTerm1.isFunction());
      assertFalse(jSTerm1.isConstant());
      assertFalse(jSTerm1.isEval());
      assertEquals(0, jSTerm1.size());
      assertFalse(jSTerm1.isVariable());
      assertNotSame(jSTerm0, jSTerm1);
      assertNotSame(jSTerm1, jSTerm0);
      assertNotNull(jSTerm1);
      assertTrue(jSTerm1.equals((Object)jSTerm0));
      
      boolean boolean0 = jSTerm0.remove((Object) jSTerm1);
      assertTrue(jSTerm0.isEmpty());
      assertEquals("[]", jSTerm0.toString());
      assertFalse(jSTerm0.isConstant());
      assertEquals(0, jSTerm0.size());
      assertFalse(jSTerm0.isEval());
      assertEquals(10, jSTerm0.capacity());
      assertFalse(jSTerm0.isFunction());
      assertFalse(jSTerm0.isVariable());
      assertTrue(jSTerm1.isEmpty());
      assertEquals("[]", jSTerm1.toString());
      assertEquals(0, jSTerm1.capacity());
      assertFalse(jSTerm1.isFunction());
      assertFalse(jSTerm1.isConstant());
      assertFalse(jSTerm1.isEval());
      assertEquals(0, jSTerm1.size());
      assertFalse(jSTerm1.isVariable());
      assertFalse(boolean0);
      assertNotSame(jSTerm0, jSTerm1);
      assertNotSame(jSTerm1, jSTerm0);
      assertTrue(jSTerm0.equals((Object)jSTerm1));
      assertTrue(jSTerm1.equals((Object)jSTerm0));
      
      boolean boolean1 = jSTerm0.isGround();
      assertTrue(jSTerm0.isEmpty());
      assertEquals("[]", jSTerm0.toString());
      assertFalse(jSTerm0.isConstant());
      assertEquals(0, jSTerm0.size());
      assertFalse(jSTerm0.isEval());
      assertEquals(10, jSTerm0.capacity());
      assertFalse(jSTerm0.isFunction());
      assertFalse(jSTerm0.isVariable());
      assertTrue(boolean1);
      assertNotSame(jSTerm0, jSTerm1);
      assertTrue(jSTerm0.equals((Object)jSTerm1));
      assertFalse(boolean1 == boolean0);
      
      JSTerm jSTerm2 = new JSTerm();
      assertEquals("[]", jSTerm2.toString());
      assertFalse(jSTerm2.isConstant());
      assertFalse(jSTerm2.isEval());
      assertEquals(10, jSTerm2.capacity());
      assertEquals(0, jSTerm2.size());
      assertFalse(jSTerm2.isVariable());
      assertFalse(jSTerm2.isFunction());
      assertTrue(jSTerm2.isEmpty());
      assertNotNull(jSTerm2);
      assertTrue(jSTerm2.equals((Object)jSTerm0));
      assertTrue(jSTerm2.equals((Object)jSTerm1));
      
      boolean boolean2 = jSTerm0.equals(jSTerm2);
      assertTrue(jSTerm0.isEmpty());
      assertEquals("[]", jSTerm0.toString());
      assertFalse(jSTerm0.isConstant());
      assertEquals(0, jSTerm0.size());
      assertFalse(jSTerm0.isEval());
      assertEquals(10, jSTerm0.capacity());
      assertFalse(jSTerm0.isFunction());
      assertFalse(jSTerm0.isVariable());
      assertEquals("[]", jSTerm2.toString());
      assertFalse(jSTerm2.isConstant());
      assertFalse(jSTerm2.isEval());
      assertEquals(10, jSTerm2.capacity());
      assertEquals(0, jSTerm2.size());
      assertFalse(jSTerm2.isVariable());
      assertFalse(jSTerm2.isFunction());
      assertTrue(jSTerm2.isEmpty());
      assertFalse(boolean2);
      assertNotSame(jSTerm0, jSTerm1);
      assertNotSame(jSTerm0, jSTerm2);
      assertNotSame(jSTerm2, jSTerm0);
      assertNotSame(jSTerm2, jSTerm1);
      assertTrue(jSTerm0.equals((Object)jSTerm1));
      assertTrue(jSTerm0.equals((Object)jSTerm2));
      assertTrue(jSTerm2.equals((Object)jSTerm0));
      assertTrue(jSTerm2.equals((Object)jSTerm1));
      assertFalse(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      
      ListIterator listIterator0 = jSTerm2.listIterator();
      assertEquals("[]", jSTerm2.toString());
      assertFalse(jSTerm2.isConstant());
      assertFalse(jSTerm2.isEval());
      assertEquals(10, jSTerm2.capacity());
      assertEquals(0, jSTerm2.size());
      assertFalse(jSTerm2.isVariable());
      assertFalse(jSTerm2.isFunction());
      assertTrue(jSTerm2.isEmpty());
      assertFalse(listIterator0.hasPrevious());
      assertFalse(listIterator0.hasNext());
      assertNotSame(jSTerm2, jSTerm0);
      assertNotSame(jSTerm2, jSTerm1);
      assertNotNull(listIterator0);
      assertTrue(jSTerm2.equals((Object)jSTerm0));
      assertTrue(jSTerm2.equals((Object)jSTerm1));
      
      JSTerm jSTerm3 = new JSTerm();
      assertEquals("[]", jSTerm3.toString());
      assertFalse(jSTerm3.isConstant());
      assertFalse(jSTerm3.isEval());
      assertEquals(10, jSTerm3.capacity());
      assertEquals(0, jSTerm3.size());
      assertFalse(jSTerm3.isVariable());
      assertFalse(jSTerm3.isFunction());
      assertTrue(jSTerm3.isEmpty());
      assertNotNull(jSTerm3);
      assertTrue(jSTerm3.equals((Object)jSTerm0));
      assertTrue(jSTerm3.equals((Object)jSTerm1));
      assertTrue(jSTerm3.equals((Object)jSTerm2));
      
      jSTerm2.makeConstant();
      assertTrue(jSTerm2.isConstant());
      assertEquals("[]", jSTerm2.toString());
      assertFalse(jSTerm2.isEval());
      assertEquals(10, jSTerm2.capacity());
      assertEquals(0, jSTerm2.size());
      assertFalse(jSTerm2.isVariable());
      assertFalse(jSTerm2.isFunction());
      assertTrue(jSTerm2.isEmpty());
      assertNotSame(jSTerm2, jSTerm3);
      assertNotSame(jSTerm2, jSTerm0);
      assertNotSame(jSTerm2, jSTerm1);
      assertTrue(jSTerm2.equals((Object)jSTerm3));
      assertTrue(jSTerm2.equals((Object)jSTerm0));
      assertTrue(jSTerm2.equals((Object)jSTerm1));
      
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      assertTrue(jSSubstitution0.isEmpty());
      assertEquals("[]", jSSubstitution0.toString());
      assertFalse(jSSubstitution0.fail());
      assertEquals(0, jSSubstitution0.size());
      assertEquals(10, jSSubstitution0.capacity());
      assertNotNull(jSSubstitution0);
      
      StringReader stringReader0 = new StringReader("");
      assertNotNull(stringReader0);
      
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      assertEquals("Token[NOTHING], line 1", streamTokenizer0.toString());
      assertEquals(1, streamTokenizer0.lineno());
      assertNotNull(streamTokenizer0);
      assertEquals((-4), streamTokenizer0.ttype);
      assertEquals(0.0, streamTokenizer0.nval, 0.01);
      
      // Undeclared exception!
      try { 
        jSTerm2.parseList(streamTokenizer0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      assertTrue(jSTerm0.isEmpty());
      assertEquals("[]", jSTerm0.toString());
      assertFalse(jSTerm0.isConstant());
      assertEquals(0, jSTerm0.size());
      assertFalse(jSTerm0.isEval());
      assertFalse(jSTerm0.isFunction());
      assertFalse(jSTerm0.isVariable());
      assertEquals(10, jSTerm0.capacity());
      assertNotNull(jSTerm0);
      
      Iterator iterator0 = jSTerm0.iterator();
      assertTrue(jSTerm0.isEmpty());
      assertEquals("[]", jSTerm0.toString());
      assertFalse(jSTerm0.isConstant());
      assertEquals(0, jSTerm0.size());
      assertFalse(jSTerm0.isEval());
      assertFalse(jSTerm0.isFunction());
      assertFalse(jSTerm0.isVariable());
      assertEquals(10, jSTerm0.capacity());
      assertNotNull(iterator0);
      
      jSTerm0.trimToSize();
      assertEquals(0, jSTerm0.capacity());
      assertTrue(jSTerm0.isEmpty());
      assertEquals("[]", jSTerm0.toString());
      assertFalse(jSTerm0.isConstant());
      assertEquals(0, jSTerm0.size());
      assertFalse(jSTerm0.isEval());
      assertFalse(jSTerm0.isFunction());
      assertFalse(jSTerm0.isVariable());
      
      boolean boolean0 = jSTerm0.isConstant();
      assertEquals(0, jSTerm0.capacity());
      assertTrue(jSTerm0.isEmpty());
      assertEquals("[]", jSTerm0.toString());
      assertFalse(jSTerm0.isConstant());
      assertEquals(0, jSTerm0.size());
      assertFalse(jSTerm0.isEval());
      assertFalse(jSTerm0.isFunction());
      assertFalse(jSTerm0.isVariable());
      assertFalse(boolean0);
      
      boolean boolean1 = jSTerm0.isEval();
      assertEquals(0, jSTerm0.capacity());
      assertTrue(jSTerm0.isEmpty());
      assertEquals("[]", jSTerm0.toString());
      assertFalse(jSTerm0.isConstant());
      assertEquals(0, jSTerm0.size());
      assertFalse(jSTerm0.isEval());
      assertFalse(jSTerm0.isFunction());
      assertFalse(jSTerm0.isVariable());
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      UnaryOperator<String> unaryOperator0 = UnaryOperator.identity();
      assertNotNull(unaryOperator0);
      
      jSTerm0.replaceAll(unaryOperator0);
      assertEquals(0, jSTerm0.capacity());
      assertTrue(jSTerm0.isEmpty());
      assertEquals("[]", jSTerm0.toString());
      assertFalse(jSTerm0.isConstant());
      assertEquals(0, jSTerm0.size());
      assertFalse(jSTerm0.isEval());
      assertFalse(jSTerm0.isFunction());
      assertFalse(jSTerm0.isVariable());
      
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      assertEquals(0, jSSubstitution0.size());
      assertFalse(jSSubstitution0.fail());
      assertEquals("[]", jSSubstitution0.toString());
      assertTrue(jSSubstitution0.isEmpty());
      assertEquals(10, jSSubstitution0.capacity());
      assertNotNull(jSSubstitution0);
      
      Predicate<Object> predicate0 = Predicate.isEqual((Object) jSSubstitution0);
      assertEquals(0, jSSubstitution0.size());
      assertFalse(jSSubstitution0.fail());
      assertEquals("[]", jSSubstitution0.toString());
      assertTrue(jSSubstitution0.isEmpty());
      assertEquals(10, jSSubstitution0.capacity());
      assertNotNull(predicate0);
      
      // Undeclared exception!
      try { 
        predicate0.or((Predicate<? super Object>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      StringReader stringReader0 = new StringReader("jFxA%Rdj8% jSYG> MR");
      assertNotNull(stringReader0);
      
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      assertEquals(1, streamTokenizer0.lineno());
      assertEquals("Token[NOTHING], line 1", streamTokenizer0.toString());
      assertNotNull(streamTokenizer0);
      assertEquals((-4), streamTokenizer0.ttype);
      assertEquals(0.0, streamTokenizer0.nval, 0.01);
      
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      assertEquals(1, streamTokenizer0.lineno());
      assertEquals("Token[' '], line 1", streamTokenizer0.toString());
      assertEquals(1, jSTerm0.size());
      assertEquals("[jFxA%Rdj8%]", jSTerm0.toString());
      assertTrue(jSTerm0.isConstant());
      assertFalse(jSTerm0.isEval());
      assertFalse(jSTerm0.isVariable());
      assertFalse(jSTerm0.isEmpty());
      assertEquals(10, jSTerm0.capacity());
      assertFalse(jSTerm0.isFunction());
      assertNotNull(jSTerm0);
      assertEquals(32, streamTokenizer0.ttype);
      assertEquals(0.0, streamTokenizer0.nval, 0.01);
      
      JSTerm jSTerm1 = jSTerm0.cloneT();
      assertEquals(1, streamTokenizer0.lineno());
      assertEquals("Token[' '], line 1", streamTokenizer0.toString());
      assertEquals(1, jSTerm0.size());
      assertEquals("[jFxA%Rdj8%]", jSTerm0.toString());
      assertTrue(jSTerm0.isConstant());
      assertFalse(jSTerm0.isEval());
      assertFalse(jSTerm0.isVariable());
      assertFalse(jSTerm0.isEmpty());
      assertEquals(10, jSTerm0.capacity());
      assertFalse(jSTerm0.isFunction());
      assertEquals("[jFxA%Rdj8%]", jSTerm1.toString());
      assertEquals(10, jSTerm1.capacity());
      assertFalse(jSTerm1.isFunction());
      assertEquals(1, jSTerm1.size());
      assertFalse(jSTerm1.isEmpty());
      assertFalse(jSTerm1.isEval());
      assertFalse(jSTerm1.isVariable());
      assertTrue(jSTerm1.isConstant());
      assertNotSame(jSTerm0, jSTerm1);
      assertNotSame(jSTerm1, jSTerm0);
      assertNotNull(jSTerm1);
      assertTrue(jSTerm1.equals((Object)jSTerm0));
      assertEquals(32, streamTokenizer0.ttype);
      assertEquals(0.0, streamTokenizer0.nval, 0.01);
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      assertFalse(jSTerm0.isConstant());
      assertEquals(10, jSTerm0.capacity());
      assertFalse(jSTerm0.isFunction());
      assertTrue(jSTerm0.isEmpty());
      assertEquals("[]", jSTerm0.toString());
      assertFalse(jSTerm0.isVariable());
      assertEquals(0, jSTerm0.size());
      assertFalse(jSTerm0.isEval());
      assertNotNull(jSTerm0);
      
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      assertEquals("[]", jSSubstitution0.toString());
      assertTrue(jSSubstitution0.isEmpty());
      assertFalse(jSSubstitution0.fail());
      assertEquals(0, jSSubstitution0.size());
      assertEquals(10, jSSubstitution0.capacity());
      assertNotNull(jSSubstitution0);
      
      jSTerm0.makeVariable();
      assertFalse(jSTerm0.isConstant());
      assertEquals(10, jSTerm0.capacity());
      assertFalse(jSTerm0.isFunction());
      assertTrue(jSTerm0.isVariable());
      assertTrue(jSTerm0.isEmpty());
      assertEquals("[]", jSTerm0.toString());
      assertEquals(0, jSTerm0.size());
      assertFalse(jSTerm0.isEval());
      
      boolean boolean0 = jSTerm0.add((Object) jSSubstitution0);
      assertFalse(jSTerm0.isConstant());
      assertFalse(jSTerm0.isEmpty());
      assertEquals(10, jSTerm0.capacity());
      assertFalse(jSTerm0.isFunction());
      assertEquals("[[]]", jSTerm0.toString());
      assertTrue(jSTerm0.isVariable());
      assertEquals(1, jSTerm0.size());
      assertFalse(jSTerm0.isEval());
      assertEquals("[]", jSSubstitution0.toString());
      assertTrue(jSSubstitution0.isEmpty());
      assertFalse(jSSubstitution0.fail());
      assertEquals(0, jSSubstitution0.size());
      assertEquals(10, jSSubstitution0.capacity());
      assertTrue(boolean0);
      
      JSTerm jSTerm1 = (JSTerm)jSTerm0.clone();
      assertFalse(jSTerm0.isConstant());
      assertFalse(jSTerm0.isEmpty());
      assertEquals(10, jSTerm0.capacity());
      assertFalse(jSTerm0.isFunction());
      assertEquals("[[]]", jSTerm0.toString());
      assertTrue(jSTerm0.isVariable());
      assertEquals(1, jSTerm0.size());
      assertFalse(jSTerm0.isEval());
      assertFalse(jSTerm1.isEmpty());
      assertTrue(jSTerm1.isVariable());
      assertEquals("[[]]", jSTerm1.toString());
      assertFalse(jSTerm1.isEval());
      assertEquals(1, jSTerm1.size());
      assertFalse(jSTerm1.isConstant());
      assertFalse(jSTerm1.isFunction());
      assertEquals(1, jSTerm1.capacity());
      assertNotSame(jSTerm0, jSTerm1);
      assertNotSame(jSTerm1, jSTerm0);
      assertNotNull(jSTerm1);
      assertTrue(jSTerm1.equals((Object)jSTerm0));
      
      boolean boolean1 = jSTerm0.add((Object) jSTerm1);
      assertFalse(jSTerm0.isConstant());
      assertFalse(jSTerm0.isEmpty());
      assertEquals(10, jSTerm0.capacity());
      assertFalse(jSTerm0.isFunction());
      assertTrue(jSTerm0.isVariable());
      assertEquals("[[], [[]]]", jSTerm0.toString());
      assertEquals(2, jSTerm0.size());
      assertFalse(jSTerm0.isEval());
      assertFalse(jSTerm1.isEmpty());
      assertTrue(jSTerm1.isVariable());
      assertEquals("[[]]", jSTerm1.toString());
      assertFalse(jSTerm1.isEval());
      assertEquals(1, jSTerm1.size());
      assertFalse(jSTerm1.isConstant());
      assertFalse(jSTerm1.isFunction());
      assertEquals(1, jSTerm1.capacity());
      assertTrue(boolean1);
      assertNotSame(jSTerm0, jSTerm1);
      assertNotSame(jSTerm1, jSTerm0);
      assertFalse(jSTerm0.equals((Object)jSTerm1));
      assertFalse(jSTerm1.equals((Object)jSTerm0));
      assertTrue(boolean1 == boolean0);
      
      jSTerm0.makeFunction();
      assertFalse(jSTerm0.isConstant());
      assertFalse(jSTerm0.isEmpty());
      assertEquals(10, jSTerm0.capacity());
      assertEquals("[[], [[]]]", jSTerm0.toString());
      assertEquals(2, jSTerm0.size());
      assertFalse(jSTerm0.isVariable());
      assertTrue(jSTerm0.isFunction());
      assertFalse(jSTerm0.isEval());
      assertNotSame(jSTerm0, jSTerm1);
      assertFalse(jSTerm0.equals((Object)jSTerm1));
      
      jSTerm0.print();
      assertFalse(jSTerm0.isConstant());
      assertFalse(jSTerm0.isEmpty());
      assertEquals(10, jSTerm0.capacity());
      assertEquals("[[], [[]]]", jSTerm0.toString());
      assertEquals(2, jSTerm0.size());
      assertFalse(jSTerm0.isVariable());
      assertTrue(jSTerm0.isFunction());
      assertFalse(jSTerm0.isEval());
      assertNotSame(jSTerm0, jSTerm1);
      assertFalse(jSTerm0.equals((Object)jSTerm1));
      
      JSTerm jSTerm2 = jSTerm0.cloneT();
      assertFalse(jSTerm0.isConstant());
      assertFalse(jSTerm0.isEmpty());
      assertEquals(10, jSTerm0.capacity());
      assertEquals("[[], [[]]]", jSTerm0.toString());
      assertEquals(2, jSTerm0.size());
      assertFalse(jSTerm0.isVariable());
      assertTrue(jSTerm0.isFunction());
      assertFalse(jSTerm0.isEval());
      assertFalse(jSTerm2.isVariable());
      assertFalse(jSTerm2.isEmpty());
      assertFalse(jSTerm2.isEval());
      assertTrue(jSTerm2.isFunction());
      assertFalse(jSTerm2.isConstant());
      assertEquals(10, jSTerm2.capacity());
      assertEquals(2, jSTerm2.size());
      assertEquals("[[], [[]]]", jSTerm2.toString());
      assertNotSame(jSTerm0, jSTerm2);
      assertNotSame(jSTerm0, jSTerm1);
      assertNotSame(jSTerm2, jSTerm1);
      assertNotSame(jSTerm2, jSTerm0);
      assertNotNull(jSTerm2);
      assertFalse(jSTerm0.equals((Object)jSTerm1));
      assertFalse(jSTerm2.equals((Object)jSTerm1));
      assertTrue(jSTerm2.equals((Object)jSTerm0));
      
      // Undeclared exception!
      try { 
        jSTerm2.equals(jSTerm0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // umd.cs.shop.JSSubstitution cannot be cast to java.lang.String
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      assertTrue(jSTerm0.isEmpty());
      assertEquals("[]", jSTerm0.toString());
      assertFalse(jSTerm0.isFunction());
      assertFalse(jSTerm0.isConstant());
      assertEquals(10, jSTerm0.capacity());
      assertFalse(jSTerm0.isVariable());
      assertFalse(jSTerm0.isEval());
      assertEquals(0, jSTerm0.size());
      assertNotNull(jSTerm0);
      
      jSTerm0.makeConstant();
      assertTrue(jSTerm0.isConstant());
      assertTrue(jSTerm0.isEmpty());
      assertEquals("[]", jSTerm0.toString());
      assertFalse(jSTerm0.isFunction());
      assertEquals(10, jSTerm0.capacity());
      assertFalse(jSTerm0.isVariable());
      assertFalse(jSTerm0.isEval());
      assertEquals(0, jSTerm0.size());
      
      JSSubstitution jSSubstitution0 = null;
      // Undeclared exception!
      try { 
        jSTerm0.applySubstitutionT((JSSubstitution) null);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      StringReader stringReader0 = new StringReader("hH2X@J");
      assertNotNull(stringReader0);
      
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      assertEquals("Token[NOTHING], line 1", streamTokenizer0.toString());
      assertEquals(1, streamTokenizer0.lineno());
      assertNotNull(streamTokenizer0);
      assertEquals((-4), streamTokenizer0.ttype);
      assertEquals(0.0, streamTokenizer0.nval, 0.01);
      
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      assertEquals("Token[EOF], line 1", streamTokenizer0.toString());
      assertEquals(1, streamTokenizer0.lineno());
      assertTrue(jSTerm0.isConstant());
      assertFalse(jSTerm0.isEval());
      assertEquals(10, jSTerm0.capacity());
      assertFalse(jSTerm0.isFunction());
      assertFalse(jSTerm0.isVariable());
      assertFalse(jSTerm0.isEmpty());
      assertEquals("[%%%]", jSTerm0.toString());
      assertEquals(1, jSTerm0.size());
      assertNotNull(jSTerm0);
      assertEquals((-1), streamTokenizer0.ttype);
      assertEquals(0.0, streamTokenizer0.nval, 0.01);
      
      jSTerm0.makeEval(true);
      assertEquals("Token[EOF], line 1", streamTokenizer0.toString());
      assertEquals(1, streamTokenizer0.lineno());
      assertTrue(jSTerm0.isConstant());
      assertTrue(jSTerm0.isEval());
      assertEquals(10, jSTerm0.capacity());
      assertFalse(jSTerm0.isFunction());
      assertFalse(jSTerm0.isVariable());
      assertFalse(jSTerm0.isEmpty());
      assertEquals("[%%%]", jSTerm0.toString());
      assertEquals(1, jSTerm0.size());
      assertEquals((-1), streamTokenizer0.ttype);
      assertEquals(0.0, streamTokenizer0.nval, 0.01);
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      JSTerm jSTerm0 = null;
      try {
        jSTerm0 = new JSTerm((StreamTokenizer) null);
        fail("Expecting exception: System.SystemExitException");
      
      } catch(System.SystemExitException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.System", e);
      }
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      StringReader stringReader0 = new StringReader(">");
      assertNotNull(stringReader0);
      
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      assertEquals(1, streamTokenizer0.lineno());
      assertEquals("Token[NOTHING], line 1", streamTokenizer0.toString());
      assertNotNull(streamTokenizer0);
      assertEquals((-4), streamTokenizer0.ttype);
      assertEquals(0.0, streamTokenizer0.nval, 0.01);
      
      JSTerm jSTerm0 = null;
      try {
        jSTerm0 = new JSTerm(streamTokenizer0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      assertFalse(jSTerm0.isEval());
      assertFalse(jSTerm0.isFunction());
      assertEquals(0, jSTerm0.size());
      assertTrue(jSTerm0.isEmpty());
      assertFalse(jSTerm0.isVariable());
      assertFalse(jSTerm0.isConstant());
      assertEquals(10, jSTerm0.capacity());
      assertEquals("[]", jSTerm0.toString());
      assertNotNull(jSTerm0);
      
      jSTerm0.makeVariable();
      assertFalse(jSTerm0.isEval());
      assertFalse(jSTerm0.isFunction());
      assertEquals(0, jSTerm0.size());
      assertTrue(jSTerm0.isEmpty());
      assertTrue(jSTerm0.isVariable());
      assertFalse(jSTerm0.isConstant());
      assertEquals(10, jSTerm0.capacity());
      assertEquals("[]", jSTerm0.toString());
      
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      jSTerm0.sort(comparator0);
      assertFalse(jSTerm0.isEval());
      assertFalse(jSTerm0.isFunction());
      assertEquals(0, jSTerm0.size());
      assertTrue(jSTerm0.isEmpty());
      assertTrue(jSTerm0.isVariable());
      assertFalse(jSTerm0.isConstant());
      assertEquals(10, jSTerm0.capacity());
      assertEquals("[]", jSTerm0.toString());
      
      jSTerm0.makeEval(true);
      assertFalse(jSTerm0.isFunction());
      assertEquals(0, jSTerm0.size());
      assertTrue(jSTerm0.isEmpty());
      assertTrue(jSTerm0.isEval());
      assertTrue(jSTerm0.isVariable());
      assertFalse(jSTerm0.isConstant());
      assertEquals(10, jSTerm0.capacity());
      assertEquals("[]", jSTerm0.toString());
      
      jSTerm0.makeFunction();
      assertEquals(0, jSTerm0.size());
      assertTrue(jSTerm0.isEmpty());
      assertFalse(jSTerm0.isVariable());
      assertTrue(jSTerm0.isEval());
      assertTrue(jSTerm0.isFunction());
      assertFalse(jSTerm0.isConstant());
      assertEquals(10, jSTerm0.capacity());
      assertEquals("[]", jSTerm0.toString());
      
      boolean boolean0 = jSTerm0.isGround();
      assertEquals(0, jSTerm0.size());
      assertTrue(jSTerm0.isEmpty());
      assertFalse(jSTerm0.isVariable());
      assertTrue(jSTerm0.isEval());
      assertTrue(jSTerm0.isFunction());
      assertFalse(jSTerm0.isConstant());
      assertEquals(10, jSTerm0.capacity());
      assertEquals("[]", jSTerm0.toString());
      assertTrue(boolean0);
      
      jSTerm0.makeVariable();
      assertFalse(jSTerm0.isFunction());
      assertEquals(0, jSTerm0.size());
      assertTrue(jSTerm0.isEmpty());
      assertTrue(jSTerm0.isEval());
      assertTrue(jSTerm0.isVariable());
      assertFalse(jSTerm0.isConstant());
      assertEquals(10, jSTerm0.capacity());
      assertEquals("[]", jSTerm0.toString());
      
      // Undeclared exception!
      try { 
        jSTerm0.equals(jSTerm0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      assertTrue(jSTerm0.isEmpty());
      assertEquals("[]", jSTerm0.toString());
      assertEquals(10, jSTerm0.capacity());
      assertFalse(jSTerm0.isFunction());
      assertFalse(jSTerm0.isConstant());
      assertFalse(jSTerm0.isVariable());
      assertEquals(0, jSTerm0.size());
      assertFalse(jSTerm0.isEval());
      assertNotNull(jSTerm0);
      
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      assertEquals("[]", jSSubstitution0.toString());
      assertTrue(jSSubstitution0.isEmpty());
      assertEquals(0, jSSubstitution0.size());
      assertEquals(10, jSSubstitution0.capacity());
      assertFalse(jSSubstitution0.fail());
      assertNotNull(jSSubstitution0);
      
      jSTerm0.makeVariable();
      assertTrue(jSTerm0.isEmpty());
      assertEquals("[]", jSTerm0.toString());
      assertEquals(10, jSTerm0.capacity());
      assertFalse(jSTerm0.isFunction());
      assertTrue(jSTerm0.isVariable());
      assertFalse(jSTerm0.isConstant());
      assertEquals(0, jSTerm0.size());
      assertFalse(jSTerm0.isEval());
      
      // Undeclared exception!
      try { 
        jSTerm0.applySubstitutionT(jSSubstitution0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      assertFalse(jSTerm0.isVariable());
      assertEquals(10, jSTerm0.capacity());
      assertTrue(jSTerm0.isEmpty());
      assertEquals("[]", jSTerm0.toString());
      assertFalse(jSTerm0.isEval());
      assertEquals(0, jSTerm0.size());
      assertFalse(jSTerm0.isConstant());
      assertFalse(jSTerm0.isFunction());
      assertNotNull(jSTerm0);
      
      jSTerm0.setSize(265);
      assertFalse(jSTerm0.isVariable());
      assertEquals(265, jSTerm0.capacity());
      assertFalse(jSTerm0.isEval());
      assertFalse(jSTerm0.isEmpty());
      assertFalse(jSTerm0.isConstant());
      assertEquals(265, jSTerm0.size());
      assertFalse(jSTerm0.isFunction());
      
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      assertFalse(jSSubstitution0.fail());
      assertEquals("[]", jSSubstitution0.toString());
      assertEquals(10, jSSubstitution0.capacity());
      assertEquals(0, jSSubstitution0.size());
      assertTrue(jSSubstitution0.isEmpty());
      assertNotNull(jSSubstitution0);
      
      StringReader stringReader0 = new StringReader(",,9&v");
      assertNotNull(stringReader0);
      
      long long0 = stringReader0.skip(1092L);
      assertEquals(5L, long0);
      
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      assertEquals("Token[NOTHING], line 1", streamTokenizer0.toString());
      assertEquals(1, streamTokenizer0.lineno());
      assertNotNull(streamTokenizer0);
      assertEquals(0.0, streamTokenizer0.nval, 0.01);
      assertEquals((-4), streamTokenizer0.ttype);
      
      JSTerm jSTerm1 = null;
      try {
        jSTerm1 = new JSTerm(streamTokenizer0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      assertFalse(jSTerm0.isConstant());
      assertEquals(0, jSTerm0.size());
      assertEquals("[]", jSTerm0.toString());
      assertFalse(jSTerm0.isFunction());
      assertEquals(10, jSTerm0.capacity());
      assertFalse(jSTerm0.isEval());
      assertTrue(jSTerm0.isEmpty());
      assertFalse(jSTerm0.isVariable());
      assertNotNull(jSTerm0);
      
      JSJshopVars.slash = 1;
      JSJshopVars.plus = (-4606);
      JSJshopVars.minus = (-4606);
      JSTerm jSTerm1 = new JSTerm();
      assertTrue(jSTerm1.isEmpty());
      assertFalse(jSTerm1.isVariable());
      assertFalse(jSTerm1.isEval());
      assertEquals(10, jSTerm1.capacity());
      assertEquals(0, jSTerm1.size());
      assertFalse(jSTerm1.isConstant());
      assertEquals("[]", jSTerm1.toString());
      assertFalse(jSTerm1.isFunction());
      assertNotNull(jSTerm1);
      assertTrue(jSTerm1.equals((Object)jSTerm0));
      
      boolean boolean0 = jSTerm0.retainAll(jSTerm1);
      assertFalse(jSTerm0.isConstant());
      assertEquals(0, jSTerm0.size());
      assertEquals("[]", jSTerm0.toString());
      assertFalse(jSTerm0.isFunction());
      assertEquals(10, jSTerm0.capacity());
      assertFalse(jSTerm0.isEval());
      assertTrue(jSTerm0.isEmpty());
      assertFalse(jSTerm0.isVariable());
      assertTrue(jSTerm1.isEmpty());
      assertFalse(jSTerm1.isVariable());
      assertFalse(jSTerm1.isEval());
      assertEquals(10, jSTerm1.capacity());
      assertEquals(0, jSTerm1.size());
      assertFalse(jSTerm1.isConstant());
      assertEquals("[]", jSTerm1.toString());
      assertFalse(jSTerm1.isFunction());
      assertFalse(boolean0);
      assertNotSame(jSTerm0, jSTerm1);
      assertNotSame(jSTerm1, jSTerm0);
      assertTrue(jSTerm0.equals((Object)jSTerm1));
      assertTrue(jSTerm1.equals((Object)jSTerm0));
      
      jSTerm0.makeConstant();
      assertEquals(0, jSTerm0.size());
      assertEquals("[]", jSTerm0.toString());
      assertFalse(jSTerm0.isFunction());
      assertEquals(10, jSTerm0.capacity());
      assertFalse(jSTerm0.isEval());
      assertTrue(jSTerm0.isEmpty());
      assertFalse(jSTerm0.isVariable());
      assertTrue(jSTerm0.isConstant());
      assertNotSame(jSTerm0, jSTerm1);
      assertTrue(jSTerm0.equals((Object)jSTerm1));
      
      jSTerm0.makeEval(false);
      assertEquals(0, jSTerm0.size());
      assertEquals("[]", jSTerm0.toString());
      assertFalse(jSTerm0.isFunction());
      assertEquals(10, jSTerm0.capacity());
      assertFalse(jSTerm0.isEval());
      assertTrue(jSTerm0.isEmpty());
      assertFalse(jSTerm0.isVariable());
      assertTrue(jSTerm0.isConstant());
      assertNotSame(jSTerm0, jSTerm1);
      assertTrue(jSTerm0.equals((Object)jSTerm1));
      
      boolean boolean1 = jSTerm1.isConstant();
      assertTrue(jSTerm1.isEmpty());
      assertFalse(jSTerm1.isVariable());
      assertFalse(jSTerm1.isEval());
      assertEquals(10, jSTerm1.capacity());
      assertEquals(0, jSTerm1.size());
      assertFalse(jSTerm1.isConstant());
      assertEquals("[]", jSTerm1.toString());
      assertFalse(jSTerm1.isFunction());
      assertFalse(boolean1);
      assertNotSame(jSTerm1, jSTerm0);
      assertTrue(jSTerm1.equals((Object)jSTerm0));
      assertTrue(boolean1 == boolean0);
      
      jSTerm0.makeEval(false);
      assertEquals(0, jSTerm0.size());
      assertEquals("[]", jSTerm0.toString());
      assertFalse(jSTerm0.isFunction());
      assertEquals(10, jSTerm0.capacity());
      assertFalse(jSTerm0.isEval());
      assertTrue(jSTerm0.isEmpty());
      assertFalse(jSTerm0.isVariable());
      assertTrue(jSTerm0.isConstant());
      assertNotSame(jSTerm0, jSTerm1);
      assertTrue(jSTerm0.equals((Object)jSTerm1));
      
      jSTerm1.makeFunction();
      assertTrue(jSTerm1.isEmpty());
      assertTrue(jSTerm1.isFunction());
      assertFalse(jSTerm1.isVariable());
      assertFalse(jSTerm1.isEval());
      assertEquals(10, jSTerm1.capacity());
      assertEquals(0, jSTerm1.size());
      assertFalse(jSTerm1.isConstant());
      assertEquals("[]", jSTerm1.toString());
      assertNotSame(jSTerm1, jSTerm0);
      assertTrue(jSTerm1.equals((Object)jSTerm0));
      
      boolean boolean2 = jSTerm1.isGround();
      assertTrue(jSTerm1.isEmpty());
      assertTrue(jSTerm1.isFunction());
      assertFalse(jSTerm1.isVariable());
      assertFalse(jSTerm1.isEval());
      assertEquals(10, jSTerm1.capacity());
      assertEquals(0, jSTerm1.size());
      assertFalse(jSTerm1.isConstant());
      assertEquals("[]", jSTerm1.toString());
      assertTrue(boolean2);
      assertNotSame(jSTerm1, jSTerm0);
      assertTrue(jSTerm1.equals((Object)jSTerm0));
      assertFalse(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      
      jSTerm1.makeVariable();
      assertTrue(jSTerm1.isEmpty());
      assertFalse(jSTerm1.isEval());
      assertEquals(10, jSTerm1.capacity());
      assertEquals(0, jSTerm1.size());
      assertFalse(jSTerm1.isConstant());
      assertTrue(jSTerm1.isVariable());
      assertEquals("[]", jSTerm1.toString());
      assertFalse(jSTerm1.isFunction());
      assertNotSame(jSTerm1, jSTerm0);
      assertTrue(jSTerm1.equals((Object)jSTerm0));
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      assertEquals("[]", jSSubstitution0.toString());
      assertTrue(jSSubstitution0.isEmpty());
      assertFalse(jSSubstitution0.fail());
      assertEquals(0, jSSubstitution0.size());
      assertEquals(10, jSSubstitution0.capacity());
      assertNotNull(jSSubstitution0);
      
      StringReader stringReader0 = new StringReader("cjw#L)8E&?,");
      assertNotNull(stringReader0);
      
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      assertEquals(1, streamTokenizer0.lineno());
      assertEquals("Token[NOTHING], line 1", streamTokenizer0.toString());
      assertNotNull(streamTokenizer0);
      assertEquals((-4), streamTokenizer0.ttype);
      assertEquals(0.0, streamTokenizer0.nval, 0.01);
      
      JSTerm jSTerm0 = new JSTerm();
      assertFalse(jSTerm0.isEval());
      assertEquals(10, jSTerm0.capacity());
      assertEquals(0, jSTerm0.size());
      assertFalse(jSTerm0.isVariable());
      assertFalse(jSTerm0.isFunction());
      assertEquals("[]", jSTerm0.toString());
      assertFalse(jSTerm0.isConstant());
      assertTrue(jSTerm0.isEmpty());
      assertNotNull(jSTerm0);
      
      JSTerm jSTerm1 = jSTerm0.parseList(streamTokenizer0);
      assertEquals(1, streamTokenizer0.lineno());
      assertEquals("Token[')'], line 1", streamTokenizer0.toString());
      assertFalse(jSTerm0.isEval());
      assertEquals(10, jSTerm0.capacity());
      assertEquals(0, jSTerm0.size());
      assertFalse(jSTerm0.isVariable());
      assertFalse(jSTerm0.isFunction());
      assertEquals("[]", jSTerm0.toString());
      assertFalse(jSTerm0.isConstant());
      assertTrue(jSTerm0.isEmpty());
      assertEquals("[., [cjwL], [nil]]", jSTerm1.toString());
      assertEquals(10, jSTerm1.capacity());
      assertFalse(jSTerm1.isVariable());
      assertEquals(3, jSTerm1.size());
      assertFalse(jSTerm1.isConstant());
      assertFalse(jSTerm1.isEmpty());
      assertTrue(jSTerm1.isFunction());
      assertFalse(jSTerm1.isEval());
      assertNotSame(jSTerm0, jSTerm1);
      assertNotSame(jSTerm1, jSTerm0);
      assertNotNull(jSTerm1);
      assertFalse(jSTerm1.equals((Object)jSTerm0));
      assertEquals(0.0, streamTokenizer0.nval, 0.01);
      assertEquals(41, streamTokenizer0.ttype);
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      assertEquals(0, jSSubstitution0.size());
      assertEquals(10, jSSubstitution0.capacity());
      assertEquals("[]", jSSubstitution0.toString());
      assertTrue(jSSubstitution0.isEmpty());
      assertFalse(jSSubstitution0.fail());
      assertNotNull(jSSubstitution0);
      
      StringReader stringReader0 = new StringReader("5,ZL~");
      assertNotNull(stringReader0);
      
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      assertEquals(1, streamTokenizer0.lineno());
      assertEquals("Token[NOTHING], line 1", streamTokenizer0.toString());
      assertNotNull(streamTokenizer0);
      assertEquals(0.0, streamTokenizer0.nval, 0.01);
      assertEquals((-4), streamTokenizer0.ttype);
      
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      assertEquals(1, streamTokenizer0.lineno());
      assertEquals("Token[n=5.0], line 1", streamTokenizer0.toString());
      assertEquals(1, jSTerm0.size());
      assertTrue(jSTerm0.isConstant());
      assertFalse(jSTerm0.isEval());
      assertFalse(jSTerm0.isVariable());
      assertEquals("[5.0]", jSTerm0.toString());
      assertFalse(jSTerm0.isEmpty());
      assertEquals(10, jSTerm0.capacity());
      assertFalse(jSTerm0.isFunction());
      assertNotNull(jSTerm0);
      assertEquals((-2), streamTokenizer0.ttype);
      assertEquals(5.0, streamTokenizer0.nval, 0.01);
      
      JSTerm jSTerm1 = jSSubstitution0.instance(jSTerm0);
      assertEquals(0, jSSubstitution0.size());
      assertEquals(10, jSSubstitution0.capacity());
      assertEquals("[]", jSSubstitution0.toString());
      assertTrue(jSSubstitution0.isEmpty());
      assertFalse(jSSubstitution0.fail());
      assertEquals(1, streamTokenizer0.lineno());
      assertEquals("Token[n=5.0], line 1", streamTokenizer0.toString());
      assertEquals(1, jSTerm0.size());
      assertTrue(jSTerm0.isConstant());
      assertFalse(jSTerm0.isEval());
      assertFalse(jSTerm0.isVariable());
      assertEquals("[5.0]", jSTerm0.toString());
      assertFalse(jSTerm0.isEmpty());
      assertEquals(10, jSTerm0.capacity());
      assertFalse(jSTerm0.isFunction());
      assertEquals(1, jSTerm1.size());
      assertEquals(10, jSTerm1.capacity());
      assertEquals("[5.0]", jSTerm1.toString());
      assertFalse(jSTerm1.isEmpty());
      assertFalse(jSTerm1.isVariable());
      assertFalse(jSTerm1.isEval());
      assertTrue(jSTerm1.isConstant());
      assertFalse(jSTerm1.isFunction());
      assertSame(jSTerm0, jSTerm1);
      assertSame(jSTerm1, jSTerm0);
      assertNotNull(jSTerm1);
      assertEquals((-2), streamTokenizer0.ttype);
      assertEquals(5.0, streamTokenizer0.nval, 0.01);
      
      JSTerm jSTerm2 = (JSTerm)jSTerm1.clone();
      assertEquals(0, jSSubstitution0.size());
      assertEquals(10, jSSubstitution0.capacity());
      assertEquals("[]", jSSubstitution0.toString());
      assertTrue(jSSubstitution0.isEmpty());
      assertFalse(jSSubstitution0.fail());
      assertEquals(1, streamTokenizer0.lineno());
      assertEquals("Token[n=5.0], line 1", streamTokenizer0.toString());
      assertEquals(1, jSTerm0.size());
      assertTrue(jSTerm0.isConstant());
      assertFalse(jSTerm0.isEval());
      assertFalse(jSTerm0.isVariable());
      assertEquals("[5.0]", jSTerm0.toString());
      assertFalse(jSTerm0.isEmpty());
      assertEquals(10, jSTerm0.capacity());
      assertFalse(jSTerm0.isFunction());
      assertEquals(1, jSTerm1.size());
      assertEquals(10, jSTerm1.capacity());
      assertEquals("[5.0]", jSTerm1.toString());
      assertFalse(jSTerm1.isEmpty());
      assertFalse(jSTerm1.isVariable());
      assertFalse(jSTerm1.isEval());
      assertTrue(jSTerm1.isConstant());
      assertFalse(jSTerm1.isFunction());
      assertEquals(1, jSTerm2.capacity());
      assertTrue(jSTerm2.isConstant());
      assertFalse(jSTerm2.isEmpty());
      assertFalse(jSTerm2.isFunction());
      assertFalse(jSTerm2.isEval());
      assertEquals(1, jSTerm2.size());
      assertEquals("[5.0]", jSTerm2.toString());
      assertFalse(jSTerm2.isVariable());
      assertSame(jSTerm0, jSTerm1);
      assertNotSame(jSTerm0, jSTerm2);
      assertSame(jSTerm1, jSTerm0);
      assertNotSame(jSTerm1, jSTerm2);
      assertNotSame(jSTerm2, jSTerm0);
      assertNotSame(jSTerm2, jSTerm1);
      assertNotNull(jSTerm2);
      assertTrue(jSTerm2.equals((Object)jSTerm1));
      assertTrue(jSTerm2.equals((Object)jSTerm0));
      assertEquals((-2), streamTokenizer0.ttype);
      assertEquals(5.0, streamTokenizer0.nval, 0.01);
      
      boolean boolean0 = jSTerm2.add((Object) jSTerm1);
      assertEquals(0, jSSubstitution0.size());
      assertEquals(10, jSSubstitution0.capacity());
      assertEquals("[]", jSSubstitution0.toString());
      assertTrue(jSSubstitution0.isEmpty());
      assertFalse(jSSubstitution0.fail());
      assertEquals(1, streamTokenizer0.lineno());
      assertEquals("Token[n=5.0], line 1", streamTokenizer0.toString());
      assertEquals(1, jSTerm0.size());
      assertTrue(jSTerm0.isConstant());
      assertFalse(jSTerm0.isEval());
      assertFalse(jSTerm0.isVariable());
      assertEquals("[5.0]", jSTerm0.toString());
      assertFalse(jSTerm0.isEmpty());
      assertEquals(10, jSTerm0.capacity());
      assertFalse(jSTerm0.isFunction());
      assertEquals(1, jSTerm1.size());
      assertEquals(10, jSTerm1.capacity());
      assertEquals("[5.0]", jSTerm1.toString());
      assertFalse(jSTerm1.isEmpty());
      assertFalse(jSTerm1.isVariable());
      assertFalse(jSTerm1.isEval());
      assertTrue(jSTerm1.isConstant());
      assertFalse(jSTerm1.isFunction());
      assertTrue(jSTerm2.isConstant());
      assertEquals(2, jSTerm2.capacity());
      assertFalse(jSTerm2.isEmpty());
      assertEquals("[5.0, [5.0]]", jSTerm2.toString());
      assertFalse(jSTerm2.isFunction());
      assertFalse(jSTerm2.isEval());
      assertEquals(2, jSTerm2.size());
      assertFalse(jSTerm2.isVariable());
      assertTrue(boolean0);
      assertSame(jSTerm0, jSTerm1);
      assertNotSame(jSTerm0, jSTerm2);
      assertSame(jSTerm1, jSTerm0);
      assertNotSame(jSTerm1, jSTerm2);
      assertNotSame(jSTerm2, jSTerm0);
      assertNotSame(jSTerm2, jSTerm1);
      assertFalse(jSTerm0.equals((Object)jSTerm2));
      assertFalse(jSTerm1.equals((Object)jSTerm2));
      assertFalse(jSTerm2.equals((Object)jSTerm0));
      assertFalse(jSTerm2.equals((Object)jSTerm1));
      assertEquals((-2), streamTokenizer0.ttype);
      assertEquals(5.0, streamTokenizer0.nval, 0.01);
      
      jSTerm2.makeFunction();
      assertEquals(0, jSSubstitution0.size());
      assertEquals(10, jSSubstitution0.capacity());
      assertEquals("[]", jSSubstitution0.toString());
      assertTrue(jSSubstitution0.isEmpty());
      assertFalse(jSSubstitution0.fail());
      assertEquals(1, streamTokenizer0.lineno());
      assertEquals("Token[n=5.0], line 1", streamTokenizer0.toString());
      assertEquals(1, jSTerm0.size());
      assertTrue(jSTerm0.isConstant());
      assertFalse(jSTerm0.isEval());
      assertFalse(jSTerm0.isVariable());
      assertEquals("[5.0]", jSTerm0.toString());
      assertFalse(jSTerm0.isEmpty());
      assertEquals(10, jSTerm0.capacity());
      assertFalse(jSTerm0.isFunction());
      assertEquals(1, jSTerm1.size());
      assertEquals(10, jSTerm1.capacity());
      assertEquals("[5.0]", jSTerm1.toString());
      assertFalse(jSTerm1.isEmpty());
      assertFalse(jSTerm1.isVariable());
      assertFalse(jSTerm1.isEval());
      assertTrue(jSTerm1.isConstant());
      assertFalse(jSTerm1.isFunction());
      assertEquals(2, jSTerm2.capacity());
      assertFalse(jSTerm2.isEmpty());
      assertEquals("[5.0, [5.0]]", jSTerm2.toString());
      assertFalse(jSTerm2.isEval());
      assertFalse(jSTerm2.isConstant());
      assertEquals(2, jSTerm2.size());
      assertTrue(jSTerm2.isFunction());
      assertFalse(jSTerm2.isVariable());
      assertSame(jSTerm0, jSTerm1);
      assertNotSame(jSTerm0, jSTerm2);
      assertSame(jSTerm1, jSTerm0);
      assertNotSame(jSTerm1, jSTerm2);
      assertNotSame(jSTerm2, jSTerm0);
      assertNotSame(jSTerm2, jSTerm1);
      assertFalse(jSTerm0.equals((Object)jSTerm2));
      assertFalse(jSTerm1.equals((Object)jSTerm2));
      assertFalse(jSTerm2.equals((Object)jSTerm0));
      assertFalse(jSTerm2.equals((Object)jSTerm1));
      assertEquals((-2), streamTokenizer0.ttype);
      assertEquals(5.0, streamTokenizer0.nval, 0.01);
      
      UnaryOperator<String> unaryOperator0 = UnaryOperator.identity();
      assertNotNull(unaryOperator0);
      
      jSTerm1.makeFunction();
      assertEquals(0, jSSubstitution0.size());
      assertEquals(10, jSSubstitution0.capacity());
      assertEquals("[]", jSSubstitution0.toString());
      assertTrue(jSSubstitution0.isEmpty());
      assertFalse(jSSubstitution0.fail());
      assertEquals(1, streamTokenizer0.lineno());
      assertEquals("Token[n=5.0], line 1", streamTokenizer0.toString());
      assertEquals(1, jSTerm0.size());
      assertFalse(jSTerm0.isEval());
      assertFalse(jSTerm0.isVariable());
      assertTrue(jSTerm0.isFunction());
      assertFalse(jSTerm0.isConstant());
      assertEquals("[5.0]", jSTerm0.toString());
      assertFalse(jSTerm0.isEmpty());
      assertEquals(10, jSTerm0.capacity());
      assertEquals(1, jSTerm1.size());
      assertFalse(jSTerm1.isConstant());
      assertEquals(10, jSTerm1.capacity());
      assertEquals("[5.0]", jSTerm1.toString());
      assertTrue(jSTerm1.isFunction());
      assertFalse(jSTerm1.isEmpty());
      assertFalse(jSTerm1.isVariable());
      assertFalse(jSTerm1.isEval());
      assertSame(jSTerm0, jSTerm1);
      assertNotSame(jSTerm0, jSTerm2);
      assertSame(jSTerm1, jSTerm0);
      assertNotSame(jSTerm1, jSTerm2);
      assertFalse(jSTerm0.equals((Object)jSTerm2));
      assertFalse(jSTerm1.equals((Object)jSTerm2));
      assertEquals((-2), streamTokenizer0.ttype);
      assertEquals(5.0, streamTokenizer0.nval, 0.01);
      
      boolean boolean1 = jSTerm1.equals(jSTerm2);
      assertEquals(0, jSSubstitution0.size());
      assertEquals(10, jSSubstitution0.capacity());
      assertEquals("[]", jSSubstitution0.toString());
      assertTrue(jSSubstitution0.isEmpty());
      assertFalse(jSSubstitution0.fail());
      assertEquals(1, streamTokenizer0.lineno());
      assertEquals("Token[n=5.0], line 1", streamTokenizer0.toString());
      assertEquals(1, jSTerm0.size());
      assertFalse(jSTerm0.isEval());
      assertFalse(jSTerm0.isVariable());
      assertTrue(jSTerm0.isFunction());
      assertFalse(jSTerm0.isConstant());
      assertEquals("[5.0]", jSTerm0.toString());
      assertFalse(jSTerm0.isEmpty());
      assertEquals(10, jSTerm0.capacity());
      assertEquals(1, jSTerm1.size());
      assertFalse(jSTerm1.isConstant());
      assertEquals(10, jSTerm1.capacity());
      assertEquals("[5.0]", jSTerm1.toString());
      assertTrue(jSTerm1.isFunction());
      assertFalse(jSTerm1.isEmpty());
      assertFalse(jSTerm1.isVariable());
      assertFalse(jSTerm1.isEval());
      assertEquals(2, jSTerm2.capacity());
      assertFalse(jSTerm2.isEmpty());
      assertEquals("[5.0, [5.0]]", jSTerm2.toString());
      assertFalse(jSTerm2.isEval());
      assertFalse(jSTerm2.isConstant());
      assertEquals(2, jSTerm2.size());
      assertTrue(jSTerm2.isFunction());
      assertFalse(jSTerm2.isVariable());
      assertFalse(boolean1);
      assertSame(jSTerm0, jSTerm1);
      assertNotSame(jSTerm0, jSTerm2);
      assertSame(jSTerm1, jSTerm0);
      assertNotSame(jSTerm1, jSTerm2);
      assertNotSame(jSTerm2, jSTerm0);
      assertNotSame(jSTerm2, jSTerm1);
      assertFalse(jSTerm0.equals((Object)jSTerm2));
      assertFalse(jSTerm1.equals((Object)jSTerm2));
      assertFalse(jSTerm2.equals((Object)jSTerm0));
      assertFalse(jSTerm2.equals((Object)jSTerm1));
      assertFalse(boolean1 == boolean0);
      assertEquals((-2), streamTokenizer0.ttype);
      assertEquals(5.0, streamTokenizer0.nval, 0.01);
      
      JSSubstitution jSSubstitution1 = jSTerm0.matches(jSTerm2);
      assertEquals(0, jSSubstitution0.size());
      assertEquals(10, jSSubstitution0.capacity());
      assertEquals("[]", jSSubstitution0.toString());
      assertTrue(jSSubstitution0.isEmpty());
      assertFalse(jSSubstitution0.fail());
      assertEquals(1, streamTokenizer0.lineno());
      assertEquals("Token[n=5.0], line 1", streamTokenizer0.toString());
      assertEquals(1, jSTerm0.size());
      assertFalse(jSTerm0.isEval());
      assertFalse(jSTerm0.isVariable());
      assertTrue(jSTerm0.isFunction());
      assertFalse(jSTerm0.isConstant());
      assertEquals("[5.0]", jSTerm0.toString());
      assertFalse(jSTerm0.isEmpty());
      assertEquals(10, jSTerm0.capacity());
      assertEquals(1, jSTerm1.size());
      assertFalse(jSTerm1.isConstant());
      assertEquals(10, jSTerm1.capacity());
      assertEquals("[5.0]", jSTerm1.toString());
      assertTrue(jSTerm1.isFunction());
      assertFalse(jSTerm1.isEmpty());
      assertFalse(jSTerm1.isVariable());
      assertFalse(jSTerm1.isEval());
      assertEquals(2, jSTerm2.capacity());
      assertFalse(jSTerm2.isEmpty());
      assertEquals("[5.0, [5.0]]", jSTerm2.toString());
      assertFalse(jSTerm2.isEval());
      assertFalse(jSTerm2.isConstant());
      assertEquals(2, jSTerm2.size());
      assertTrue(jSTerm2.isFunction());
      assertFalse(jSTerm2.isVariable());
      assertEquals("[]", jSSubstitution1.toString());
      assertTrue(jSSubstitution1.isEmpty());
      assertEquals(10, jSSubstitution1.capacity());
      assertTrue(jSSubstitution1.fail());
      assertEquals(0, jSSubstitution1.size());
      assertNotSame(jSSubstitution0, jSSubstitution1);
      assertSame(jSTerm0, jSTerm1);
      assertNotSame(jSTerm0, jSTerm2);
      assertSame(jSTerm1, jSTerm0);
      assertNotSame(jSTerm1, jSTerm2);
      assertNotSame(jSTerm2, jSTerm0);
      assertNotSame(jSTerm2, jSTerm1);
      assertNotSame(jSSubstitution1, jSSubstitution0);
      assertNotNull(jSSubstitution1);
      assertFalse(jSTerm0.equals((Object)jSTerm2));
      assertFalse(jSTerm1.equals((Object)jSTerm2));
      assertFalse(jSTerm2.equals((Object)jSTerm0));
      assertFalse(jSTerm2.equals((Object)jSTerm1));
      assertTrue(jSSubstitution1.equals((Object)jSSubstitution0));
      assertEquals((-2), streamTokenizer0.ttype);
      assertEquals(5.0, streamTokenizer0.nval, 0.01);
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      assertFalse(jSTerm0.isVariable());
      assertFalse(jSTerm0.isFunction());
      assertFalse(jSTerm0.isEval());
      assertTrue(jSTerm0.isEmpty());
      assertEquals(0, jSTerm0.size());
      assertFalse(jSTerm0.isConstant());
      assertEquals(10, jSTerm0.capacity());
      assertEquals("[]", jSTerm0.toString());
      assertNotNull(jSTerm0);
      
      // Undeclared exception!
      try { 
        jSTerm0.toStr();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      assertFalse(jSTerm0.isConstant());
      assertEquals(0, jSTerm0.size());
      assertFalse(jSTerm0.isEval());
      assertFalse(jSTerm0.isVariable());
      assertTrue(jSTerm0.isEmpty());
      assertEquals("[]", jSTerm0.toString());
      assertEquals(10, jSTerm0.capacity());
      assertFalse(jSTerm0.isFunction());
      assertNotNull(jSTerm0);
      
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      assertFalse(jSSubstitution0.fail());
      assertEquals(10, jSSubstitution0.capacity());
      assertEquals("[]", jSSubstitution0.toString());
      assertEquals(0, jSSubstitution0.size());
      assertTrue(jSSubstitution0.isEmpty());
      assertNotNull(jSSubstitution0);
      
      jSTerm0.makeVariable();
      assertFalse(jSTerm0.isConstant());
      assertEquals(0, jSTerm0.size());
      assertFalse(jSTerm0.isEval());
      assertTrue(jSTerm0.isVariable());
      assertTrue(jSTerm0.isEmpty());
      assertEquals("[]", jSTerm0.toString());
      assertEquals(10, jSTerm0.capacity());
      assertFalse(jSTerm0.isFunction());
      
      JSTerm jSTerm1 = jSTerm0.call();
      assertFalse(jSTerm0.isConstant());
      assertEquals(0, jSTerm0.size());
      assertFalse(jSTerm0.isEval());
      assertTrue(jSTerm0.isVariable());
      assertTrue(jSTerm0.isEmpty());
      assertEquals("[]", jSTerm0.toString());
      assertEquals(10, jSTerm0.capacity());
      assertFalse(jSTerm0.isFunction());
      assertTrue(jSTerm1.isVariable());
      assertEquals(0, jSTerm1.capacity());
      assertTrue(jSTerm1.isEmpty());
      assertFalse(jSTerm1.isFunction());
      assertEquals(0, jSTerm1.size());
      assertFalse(jSTerm1.isEval());
      assertEquals("[]", jSTerm1.toString());
      assertFalse(jSTerm1.isConstant());
      assertNotSame(jSTerm0, jSTerm1);
      assertNotSame(jSTerm1, jSTerm0);
      assertNotNull(jSTerm1);
      assertTrue(jSTerm1.equals((Object)jSTerm0));
      
      // Undeclared exception!
      try { 
        jSTerm1.cloneT();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      assertFalse(jSTerm0.isConstant());
      assertEquals("[]", jSTerm0.toString());
      assertEquals(10, jSTerm0.capacity());
      assertFalse(jSTerm0.isFunction());
      assertFalse(jSTerm0.isEval());
      assertEquals(0, jSTerm0.size());
      assertTrue(jSTerm0.isEmpty());
      assertFalse(jSTerm0.isVariable());
      assertNotNull(jSTerm0);
      
      Comparator<Integer> comparator0 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      jSTerm0.sort(comparator0);
      assertFalse(jSTerm0.isConstant());
      assertEquals("[]", jSTerm0.toString());
      assertEquals(10, jSTerm0.capacity());
      assertFalse(jSTerm0.isFunction());
      assertFalse(jSTerm0.isEval());
      assertEquals(0, jSTerm0.size());
      assertTrue(jSTerm0.isEmpty());
      assertFalse(jSTerm0.isVariable());
      
      jSTerm0.makeFunction();
      assertTrue(jSTerm0.isFunction());
      assertFalse(jSTerm0.isConstant());
      assertEquals("[]", jSTerm0.toString());
      assertEquals(10, jSTerm0.capacity());
      assertFalse(jSTerm0.isEval());
      assertEquals(0, jSTerm0.size());
      assertTrue(jSTerm0.isEmpty());
      assertFalse(jSTerm0.isVariable());
      
      jSTerm0.makeVariable();
      assertFalse(jSTerm0.isConstant());
      assertTrue(jSTerm0.isVariable());
      assertEquals("[]", jSTerm0.toString());
      assertEquals(10, jSTerm0.capacity());
      assertFalse(jSTerm0.isFunction());
      assertFalse(jSTerm0.isEval());
      assertEquals(0, jSTerm0.size());
      assertTrue(jSTerm0.isEmpty());
      
      JSTerm jSTerm1 = new JSTerm();
      assertTrue(jSTerm1.isEmpty());
      assertEquals("[]", jSTerm1.toString());
      assertFalse(jSTerm1.isVariable());
      assertFalse(jSTerm1.isFunction());
      assertFalse(jSTerm1.isConstant());
      assertEquals(10, jSTerm1.capacity());
      assertFalse(jSTerm1.isEval());
      assertEquals(0, jSTerm1.size());
      assertNotNull(jSTerm1);
      assertTrue(jSTerm1.equals((Object)jSTerm0));
      
      boolean boolean0 = jSTerm0.equals(jSTerm1);
      assertFalse(jSTerm0.isConstant());
      assertTrue(jSTerm0.isVariable());
      assertEquals("[]", jSTerm0.toString());
      assertEquals(10, jSTerm0.capacity());
      assertFalse(jSTerm0.isFunction());
      assertFalse(jSTerm0.isEval());
      assertEquals(0, jSTerm0.size());
      assertTrue(jSTerm0.isEmpty());
      assertTrue(jSTerm1.isEmpty());
      assertEquals("[]", jSTerm1.toString());
      assertFalse(jSTerm1.isVariable());
      assertFalse(jSTerm1.isFunction());
      assertFalse(jSTerm1.isConstant());
      assertEquals(10, jSTerm1.capacity());
      assertFalse(jSTerm1.isEval());
      assertEquals(0, jSTerm1.size());
      assertFalse(boolean0);
      assertNotSame(jSTerm0, jSTerm1);
      assertNotSame(jSTerm1, jSTerm0);
      assertTrue(jSTerm0.equals((Object)jSTerm1));
      assertTrue(jSTerm1.equals((Object)jSTerm0));
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      assertEquals("[]", jSSubstitution0.toString());
      assertTrue(jSSubstitution0.isEmpty());
      assertEquals(10, jSSubstitution0.capacity());
      assertEquals(0, jSSubstitution0.size());
      assertFalse(jSSubstitution0.fail());
      assertNotNull(jSSubstitution0);
      
      JSTerm jSTerm0 = new JSTerm();
      assertTrue(jSTerm0.isEmpty());
      assertEquals("[]", jSTerm0.toString());
      assertEquals(10, jSTerm0.capacity());
      assertFalse(jSTerm0.isVariable());
      assertFalse(jSTerm0.isFunction());
      assertFalse(jSTerm0.isConstant());
      assertEquals(0, jSTerm0.size());
      assertFalse(jSTerm0.isEval());
      assertNotNull(jSTerm0);
      
      Comparator<Integer> comparator0 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      jSTerm0.sort(comparator0);
      assertTrue(jSTerm0.isEmpty());
      assertEquals("[]", jSTerm0.toString());
      assertEquals(10, jSTerm0.capacity());
      assertFalse(jSTerm0.isVariable());
      assertFalse(jSTerm0.isFunction());
      assertFalse(jSTerm0.isConstant());
      assertEquals(0, jSTerm0.size());
      assertFalse(jSTerm0.isEval());
      
      jSTerm0.makeEval(true);
      assertTrue(jSTerm0.isEval());
      assertTrue(jSTerm0.isEmpty());
      assertEquals("[]", jSTerm0.toString());
      assertEquals(10, jSTerm0.capacity());
      assertFalse(jSTerm0.isVariable());
      assertFalse(jSTerm0.isFunction());
      assertFalse(jSTerm0.isConstant());
      assertEquals(0, jSTerm0.size());
      
      jSTerm0.makeFunction();
      assertTrue(jSTerm0.isEval());
      assertTrue(jSTerm0.isEmpty());
      assertEquals("[]", jSTerm0.toString());
      assertEquals(10, jSTerm0.capacity());
      assertFalse(jSTerm0.isVariable());
      assertFalse(jSTerm0.isConstant());
      assertEquals(0, jSTerm0.size());
      assertTrue(jSTerm0.isFunction());
      
      boolean boolean0 = jSTerm0.isGround();
      assertTrue(jSTerm0.isEval());
      assertTrue(jSTerm0.isEmpty());
      assertEquals("[]", jSTerm0.toString());
      assertEquals(10, jSTerm0.capacity());
      assertFalse(jSTerm0.isVariable());
      assertFalse(jSTerm0.isConstant());
      assertEquals(0, jSTerm0.size());
      assertTrue(jSTerm0.isFunction());
      assertTrue(boolean0);
      
      jSTerm0.makeVariable();
      assertTrue(jSTerm0.isEval());
      assertTrue(jSTerm0.isEmpty());
      assertEquals("[]", jSTerm0.toString());
      assertTrue(jSTerm0.isVariable());
      assertEquals(10, jSTerm0.capacity());
      assertFalse(jSTerm0.isFunction());
      assertFalse(jSTerm0.isConstant());
      assertEquals(0, jSTerm0.size());
      
      JSTerm jSTerm1 = new JSTerm();
      assertFalse(jSTerm1.isConstant());
      assertEquals("[]", jSTerm1.toString());
      assertEquals(0, jSTerm1.size());
      assertEquals(10, jSTerm1.capacity());
      assertFalse(jSTerm1.isEval());
      assertFalse(jSTerm1.isVariable());
      assertFalse(jSTerm1.isFunction());
      assertTrue(jSTerm1.isEmpty());
      assertNotNull(jSTerm1);
      assertTrue(jSTerm1.equals((Object)jSTerm0));
      
      boolean boolean1 = jSTerm0.equals(jSTerm1);
      assertTrue(jSTerm0.isEval());
      assertTrue(jSTerm0.isEmpty());
      assertEquals("[]", jSTerm0.toString());
      assertTrue(jSTerm0.isVariable());
      assertEquals(10, jSTerm0.capacity());
      assertFalse(jSTerm0.isFunction());
      assertFalse(jSTerm0.isConstant());
      assertEquals(0, jSTerm0.size());
      assertFalse(jSTerm1.isConstant());
      assertEquals("[]", jSTerm1.toString());
      assertEquals(0, jSTerm1.size());
      assertEquals(10, jSTerm1.capacity());
      assertFalse(jSTerm1.isEval());
      assertFalse(jSTerm1.isVariable());
      assertFalse(jSTerm1.isFunction());
      assertTrue(jSTerm1.isEmpty());
      assertFalse(boolean1);
      assertNotSame(jSTerm0, jSTerm1);
      assertNotSame(jSTerm1, jSTerm0);
      assertTrue(jSTerm0.equals((Object)jSTerm1));
      assertTrue(jSTerm1.equals((Object)jSTerm0));
      assertFalse(boolean1 == boolean0);
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      assertEquals(0, jSSubstitution0.size());
      assertEquals(10, jSSubstitution0.capacity());
      assertEquals("[]", jSSubstitution0.toString());
      assertTrue(jSSubstitution0.isEmpty());
      assertFalse(jSSubstitution0.fail());
      assertNotNull(jSSubstitution0);
      
      StringReader stringReader0 = new StringReader("jFxA%Rdj8% jSYG> MR");
      assertNotNull(stringReader0);
      
      StringReader stringReader1 = new StringReader(") ");
      assertNotNull(stringReader1);
      assertFalse(stringReader1.equals((Object)stringReader0));
      
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader1);
      assertEquals("Token[NOTHING], line 1", streamTokenizer0.toString());
      assertEquals(1, streamTokenizer0.lineno());
      assertNotNull(streamTokenizer0);
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertEquals(0.0, streamTokenizer0.nval, 0.01);
      assertEquals((-4), streamTokenizer0.ttype);
      
      JSTerm jSTerm0 = new JSTerm();
      assertFalse(jSTerm0.isVariable());
      assertEquals(0, jSTerm0.size());
      assertTrue(jSTerm0.isEmpty());
      assertFalse(jSTerm0.isEval());
      assertFalse(jSTerm0.isConstant());
      assertEquals("[]", jSTerm0.toString());
      assertEquals(10, jSTerm0.capacity());
      assertFalse(jSTerm0.isFunction());
      assertNotNull(jSTerm0);
      
      JSTerm jSTerm1 = jSTerm0.parseList(streamTokenizer0);
      assertEquals(1, streamTokenizer0.lineno());
      assertEquals("Token[')'], line 1", streamTokenizer0.toString());
      assertFalse(jSTerm0.isVariable());
      assertEquals(0, jSTerm0.size());
      assertTrue(jSTerm0.isEmpty());
      assertFalse(jSTerm0.isEval());
      assertFalse(jSTerm0.isConstant());
      assertEquals("[]", jSTerm0.toString());
      assertEquals(10, jSTerm0.capacity());
      assertFalse(jSTerm0.isFunction());
      assertFalse(jSTerm1.isVariable());
      assertTrue(jSTerm1.isConstant());
      assertEquals(1, jSTerm1.size());
      assertFalse(jSTerm1.isEval());
      assertFalse(jSTerm1.isEmpty());
      assertEquals("[nil]", jSTerm1.toString());
      assertFalse(jSTerm1.isFunction());
      assertEquals(10, jSTerm1.capacity());
      assertNotSame(stringReader1, stringReader0);
      assertNotSame(jSTerm0, jSTerm1);
      assertNotSame(jSTerm1, jSTerm0);
      assertNotNull(jSTerm1);
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertFalse(jSTerm1.equals((Object)jSTerm0));
      assertEquals(0.0, streamTokenizer0.nval, 0.01);
      assertEquals(41, streamTokenizer0.ttype);
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      assertTrue(jSTerm0.isEmpty());
      assertEquals("[]", jSTerm0.toString());
      assertFalse(jSTerm0.isVariable());
      assertFalse(jSTerm0.isFunction());
      assertFalse(jSTerm0.isConstant());
      assertEquals(10, jSTerm0.capacity());
      assertFalse(jSTerm0.isEval());
      assertEquals(0, jSTerm0.size());
      assertNotNull(jSTerm0);
      
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>(jSTerm0);
      assertTrue(jSTerm0.isEmpty());
      assertEquals("[]", jSTerm0.toString());
      assertFalse(jSTerm0.isVariable());
      assertFalse(jSTerm0.isFunction());
      assertFalse(jSTerm0.isConstant());
      assertEquals(10, jSTerm0.capacity());
      assertFalse(jSTerm0.isEval());
      assertEquals(0, jSTerm0.size());
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      Integer integer0 = Integer.valueOf((-2753));
      assertEquals((-2753), (int)integer0);
      assertNotNull(integer0);
      
      boolean boolean0 = linkedList0.add(integer0);
      assertTrue(jSTerm0.isEmpty());
      assertEquals("[]", jSTerm0.toString());
      assertFalse(jSTerm0.isVariable());
      assertFalse(jSTerm0.isFunction());
      assertFalse(jSTerm0.isConstant());
      assertEquals(10, jSTerm0.capacity());
      assertFalse(jSTerm0.isEval());
      assertEquals(0, jSTerm0.size());
      assertEquals(1, linkedList0.size());
      assertTrue(boolean0);
      assertTrue(linkedList0.contains(integer0));
      
      int int0 = integer0.intValue();
      assertEquals((-2753), int0);
      
      boolean boolean1 = linkedList0.offerFirst((Integer) (-2753));
      assertTrue(jSTerm0.isEmpty());
      assertEquals("[]", jSTerm0.toString());
      assertFalse(jSTerm0.isVariable());
      assertFalse(jSTerm0.isFunction());
      assertFalse(jSTerm0.isConstant());
      assertEquals(10, jSTerm0.capacity());
      assertFalse(jSTerm0.isEval());
      assertEquals(0, jSTerm0.size());
      assertEquals(2, linkedList0.size());
      assertTrue(boolean1);
      assertTrue(linkedList0.contains(integer0));
      assertTrue(boolean1 == boolean0);
      
      boolean boolean2 = jSTerm0.containsAll(linkedList0);
      assertTrue(jSTerm0.isEmpty());
      assertEquals("[]", jSTerm0.toString());
      assertFalse(jSTerm0.isVariable());
      assertFalse(jSTerm0.isFunction());
      assertFalse(jSTerm0.isConstant());
      assertEquals(10, jSTerm0.capacity());
      assertFalse(jSTerm0.isEval());
      assertEquals(0, jSTerm0.size());
      assertEquals(2, linkedList0.size());
      assertFalse(boolean2);
      assertTrue(linkedList0.contains(integer0));
      assertFalse(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      
      // Undeclared exception!
      try { 
        jSTerm0.toStr();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      assertEquals(0, jSTerm0.size());
      assertFalse(jSTerm0.isEval());
      assertFalse(jSTerm0.isConstant());
      assertEquals(10, jSTerm0.capacity());
      assertEquals("[]", jSTerm0.toString());
      assertFalse(jSTerm0.isFunction());
      assertFalse(jSTerm0.isVariable());
      assertTrue(jSTerm0.isEmpty());
      assertNotNull(jSTerm0);
      
      jSTerm0.makeVariable();
      assertTrue(jSTerm0.isVariable());
      assertEquals(0, jSTerm0.size());
      assertFalse(jSTerm0.isEval());
      assertFalse(jSTerm0.isConstant());
      assertEquals(10, jSTerm0.capacity());
      assertEquals("[]", jSTerm0.toString());
      assertFalse(jSTerm0.isFunction());
      assertTrue(jSTerm0.isEmpty());
      
      // Undeclared exception!
      try { 
        jSTerm0.print();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      assertEquals(0, jSTerm0.size());
      assertFalse(jSTerm0.isEval());
      assertEquals(10, jSTerm0.capacity());
      assertFalse(jSTerm0.isFunction());
      assertFalse(jSTerm0.isVariable());
      assertTrue(jSTerm0.isEmpty());
      assertEquals("[]", jSTerm0.toString());
      assertFalse(jSTerm0.isConstant());
      assertNotNull(jSTerm0);
      
      JSJshopVars.exclamation = 0;
      JSJshopVars.flagLevel = 1;
      // Undeclared exception!
      try { 
        jSTerm0.standardizerTerm();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      assertFalse(jSSubstitution0.fail());
      assertTrue(jSSubstitution0.isEmpty());
      assertEquals(0, jSSubstitution0.size());
      assertEquals("[]", jSSubstitution0.toString());
      assertEquals(10, jSSubstitution0.capacity());
      assertNotNull(jSSubstitution0);
      
      StringReader stringReader0 = new StringReader("jFxA%Rdj8% jSYG> MR");
      assertNotNull(stringReader0);
      
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      assertEquals("Token[NOTHING], line 1", streamTokenizer0.toString());
      assertEquals(1, streamTokenizer0.lineno());
      assertNotNull(streamTokenizer0);
      assertEquals((-4), streamTokenizer0.ttype);
      assertEquals(0.0, streamTokenizer0.nval, 0.01);
      
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      assertEquals("Token[' '], line 1", streamTokenizer0.toString());
      assertEquals(1, streamTokenizer0.lineno());
      assertEquals("[jFxA%Rdj8%]", jSTerm0.toString());
      assertFalse(jSTerm0.isEval());
      assertEquals(1, jSTerm0.size());
      assertTrue(jSTerm0.isConstant());
      assertFalse(jSTerm0.isVariable());
      assertFalse(jSTerm0.isEmpty());
      assertEquals(10, jSTerm0.capacity());
      assertFalse(jSTerm0.isFunction());
      assertNotNull(jSTerm0);
      assertEquals(0.0, streamTokenizer0.nval, 0.01);
      assertEquals(32, streamTokenizer0.ttype);
      
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      assertTrue(jSSubstitution1.isEmpty());
      assertFalse(jSSubstitution1.fail());
      assertEquals(10, jSSubstitution1.capacity());
      assertEquals(0, jSSubstitution1.size());
      assertEquals("[]", jSSubstitution1.toString());
      assertNotNull(jSSubstitution1);
      assertTrue(jSSubstitution1.equals((Object)jSSubstitution0));
      
      JSTerm jSTerm1 = jSSubstitution1.instance(jSTerm0);
      assertEquals("Token[' '], line 1", streamTokenizer0.toString());
      assertEquals(1, streamTokenizer0.lineno());
      assertEquals("[jFxA%Rdj8%]", jSTerm0.toString());
      assertFalse(jSTerm0.isEval());
      assertEquals(1, jSTerm0.size());
      assertTrue(jSTerm0.isConstant());
      assertFalse(jSTerm0.isVariable());
      assertFalse(jSTerm0.isEmpty());
      assertEquals(10, jSTerm0.capacity());
      assertFalse(jSTerm0.isFunction());
      assertTrue(jSSubstitution1.isEmpty());
      assertFalse(jSSubstitution1.fail());
      assertEquals(10, jSSubstitution1.capacity());
      assertEquals(0, jSSubstitution1.size());
      assertEquals("[]", jSSubstitution1.toString());
      assertFalse(jSTerm1.isVariable());
      assertFalse(jSTerm1.isFunction());
      assertFalse(jSTerm1.isEval());
      assertEquals(1, jSTerm1.size());
      assertEquals(10, jSTerm1.capacity());
      assertFalse(jSTerm1.isEmpty());
      assertTrue(jSTerm1.isConstant());
      assertEquals("[jFxA%Rdj8%]", jSTerm1.toString());
      assertSame(jSTerm0, jSTerm1);
      assertNotSame(jSSubstitution1, jSSubstitution0);
      assertSame(jSTerm1, jSTerm0);
      assertNotNull(jSTerm1);
      assertTrue(jSSubstitution1.equals((Object)jSSubstitution0));
      assertEquals(0.0, streamTokenizer0.nval, 0.01);
      assertEquals(32, streamTokenizer0.ttype);
      
      JSSubstitution jSSubstitution2 = (JSSubstitution)jSSubstitution1.clone();
      assertTrue(jSSubstitution1.isEmpty());
      assertFalse(jSSubstitution1.fail());
      assertEquals(10, jSSubstitution1.capacity());
      assertEquals(0, jSSubstitution1.size());
      assertEquals("[]", jSSubstitution1.toString());
      assertEquals(0, jSSubstitution2.size());
      assertEquals("[]", jSSubstitution2.toString());
      assertTrue(jSSubstitution2.isEmpty());
      assertFalse(jSSubstitution2.fail());
      assertEquals(0, jSSubstitution2.capacity());
      assertNotSame(jSSubstitution1, jSSubstitution0);
      assertNotSame(jSSubstitution1, jSSubstitution2);
      assertNotSame(jSSubstitution2, jSSubstitution1);
      assertNotSame(jSSubstitution2, jSSubstitution0);
      assertNotNull(jSSubstitution2);
      assertTrue(jSSubstitution1.equals((Object)jSSubstitution0));
      assertTrue(jSSubstitution2.equals((Object)jSSubstitution0));
      assertTrue(jSSubstitution2.equals((Object)jSSubstitution1));
      
      jSTerm0.makeEval(false);
      assertEquals("Token[' '], line 1", streamTokenizer0.toString());
      assertEquals(1, streamTokenizer0.lineno());
      assertEquals("[jFxA%Rdj8%]", jSTerm0.toString());
      assertFalse(jSTerm0.isEval());
      assertEquals(1, jSTerm0.size());
      assertTrue(jSTerm0.isConstant());
      assertFalse(jSTerm0.isVariable());
      assertFalse(jSTerm0.isEmpty());
      assertEquals(10, jSTerm0.capacity());
      assertFalse(jSTerm0.isFunction());
      assertSame(jSTerm0, jSTerm1);
      assertEquals(0.0, streamTokenizer0.nval, 0.01);
      assertEquals(32, streamTokenizer0.ttype);
      
      jSTerm1.makeFunction();
      assertEquals("Token[' '], line 1", streamTokenizer0.toString());
      assertEquals(1, streamTokenizer0.lineno());
      assertEquals("[jFxA%Rdj8%]", jSTerm0.toString());
      assertFalse(jSTerm0.isEval());
      assertEquals(1, jSTerm0.size());
      assertFalse(jSTerm0.isVariable());
      assertFalse(jSTerm0.isEmpty());
      assertTrue(jSTerm0.isFunction());
      assertFalse(jSTerm0.isConstant());
      assertEquals(10, jSTerm0.capacity());
      assertTrue(jSSubstitution1.isEmpty());
      assertFalse(jSSubstitution1.fail());
      assertEquals(10, jSSubstitution1.capacity());
      assertEquals(0, jSSubstitution1.size());
      assertEquals("[]", jSSubstitution1.toString());
      assertFalse(jSTerm1.isVariable());
      assertFalse(jSTerm1.isEval());
      assertEquals(1, jSTerm1.size());
      assertEquals(10, jSTerm1.capacity());
      assertFalse(jSTerm1.isConstant());
      assertFalse(jSTerm1.isEmpty());
      assertTrue(jSTerm1.isFunction());
      assertEquals("[jFxA%Rdj8%]", jSTerm1.toString());
      assertSame(jSTerm0, jSTerm1);
      assertNotSame(jSSubstitution1, jSSubstitution0);
      assertNotSame(jSSubstitution1, jSSubstitution2);
      assertSame(jSTerm1, jSTerm0);
      assertTrue(jSSubstitution1.equals((Object)jSSubstitution0));
      assertTrue(jSSubstitution1.equals((Object)jSSubstitution2));
      assertEquals(0.0, streamTokenizer0.nval, 0.01);
      assertEquals(32, streamTokenizer0.ttype);
      
      boolean boolean0 = jSTerm0.isGround();
      assertEquals("Token[' '], line 1", streamTokenizer0.toString());
      assertEquals(1, streamTokenizer0.lineno());
      assertEquals("[jFxA%Rdj8%]", jSTerm0.toString());
      assertFalse(jSTerm0.isEval());
      assertEquals(1, jSTerm0.size());
      assertFalse(jSTerm0.isVariable());
      assertFalse(jSTerm0.isEmpty());
      assertTrue(jSTerm0.isFunction());
      assertFalse(jSTerm0.isConstant());
      assertEquals(10, jSTerm0.capacity());
      assertTrue(boolean0);
      assertSame(jSTerm0, jSTerm1);
      assertEquals(0.0, streamTokenizer0.nval, 0.01);
      assertEquals(32, streamTokenizer0.ttype);
      
      jSTerm1.makeVariable();
      assertEquals("Token[' '], line 1", streamTokenizer0.toString());
      assertEquals(1, streamTokenizer0.lineno());
      assertEquals("[jFxA%Rdj8%]", jSTerm0.toString());
      assertFalse(jSTerm0.isEval());
      assertEquals(1, jSTerm0.size());
      assertFalse(jSTerm0.isEmpty());
      assertTrue(jSTerm0.isVariable());
      assertFalse(jSTerm0.isConstant());
      assertEquals(10, jSTerm0.capacity());
      assertFalse(jSTerm0.isFunction());
      assertTrue(jSSubstitution1.isEmpty());
      assertFalse(jSSubstitution1.fail());
      assertEquals(10, jSSubstitution1.capacity());
      assertEquals(0, jSSubstitution1.size());
      assertEquals("[]", jSSubstitution1.toString());
      assertFalse(jSTerm1.isFunction());
      assertFalse(jSTerm1.isEval());
      assertEquals(1, jSTerm1.size());
      assertEquals(10, jSTerm1.capacity());
      assertFalse(jSTerm1.isConstant());
      assertFalse(jSTerm1.isEmpty());
      assertTrue(jSTerm1.isVariable());
      assertEquals("[jFxA%Rdj8%]", jSTerm1.toString());
      assertSame(jSTerm0, jSTerm1);
      assertNotSame(jSSubstitution1, jSSubstitution0);
      assertNotSame(jSSubstitution1, jSSubstitution2);
      assertSame(jSTerm1, jSTerm0);
      assertTrue(jSSubstitution1.equals((Object)jSSubstitution0));
      assertTrue(jSSubstitution1.equals((Object)jSSubstitution2));
      assertEquals(0.0, streamTokenizer0.nval, 0.01);
      assertEquals(32, streamTokenizer0.ttype);
      
      boolean boolean1 = jSTerm1.equals(jSTerm0);
      assertEquals("Token[' '], line 1", streamTokenizer0.toString());
      assertEquals(1, streamTokenizer0.lineno());
      assertEquals("[jFxA%Rdj8%]", jSTerm0.toString());
      assertFalse(jSTerm0.isEval());
      assertEquals(1, jSTerm0.size());
      assertFalse(jSTerm0.isEmpty());
      assertTrue(jSTerm0.isVariable());
      assertFalse(jSTerm0.isConstant());
      assertEquals(10, jSTerm0.capacity());
      assertFalse(jSTerm0.isFunction());
      assertTrue(jSSubstitution1.isEmpty());
      assertFalse(jSSubstitution1.fail());
      assertEquals(10, jSSubstitution1.capacity());
      assertEquals(0, jSSubstitution1.size());
      assertEquals("[]", jSSubstitution1.toString());
      assertFalse(jSTerm1.isFunction());
      assertFalse(jSTerm1.isEval());
      assertEquals(1, jSTerm1.size());
      assertEquals(10, jSTerm1.capacity());
      assertFalse(jSTerm1.isConstant());
      assertFalse(jSTerm1.isEmpty());
      assertTrue(jSTerm1.isVariable());
      assertEquals("[jFxA%Rdj8%]", jSTerm1.toString());
      assertTrue(boolean1);
      assertSame(jSTerm0, jSTerm1);
      assertNotSame(jSSubstitution1, jSSubstitution0);
      assertNotSame(jSSubstitution1, jSSubstitution2);
      assertSame(jSTerm1, jSTerm0);
      assertTrue(jSSubstitution1.equals((Object)jSSubstitution0));
      assertTrue(jSSubstitution1.equals((Object)jSSubstitution2));
      assertTrue(boolean1 == boolean0);
      assertEquals(0.0, streamTokenizer0.nval, 0.01);
      assertEquals(32, streamTokenizer0.ttype);
      
      jSTerm0.print();
      assertEquals("Token[' '], line 1", streamTokenizer0.toString());
      assertEquals(1, streamTokenizer0.lineno());
      assertEquals("[jFxA%Rdj8%]", jSTerm0.toString());
      assertFalse(jSTerm0.isEval());
      assertEquals(1, jSTerm0.size());
      assertFalse(jSTerm0.isEmpty());
      assertTrue(jSTerm0.isVariable());
      assertFalse(jSTerm0.isConstant());
      assertEquals(10, jSTerm0.capacity());
      assertFalse(jSTerm0.isFunction());
      assertSame(jSTerm0, jSTerm1);
      assertEquals(0.0, streamTokenizer0.nval, 0.01);
      assertEquals(32, streamTokenizer0.ttype);
      
      JSTerm jSTerm2 = jSTerm0.call();
      assertEquals("Token[' '], line 1", streamTokenizer0.toString());
      assertEquals(1, streamTokenizer0.lineno());
      assertEquals("[jFxA%Rdj8%]", jSTerm0.toString());
      assertFalse(jSTerm0.isEval());
      assertEquals(1, jSTerm0.size());
      assertFalse(jSTerm0.isEmpty());
      assertTrue(jSTerm0.isVariable());
      assertFalse(jSTerm0.isConstant());
      assertEquals(10, jSTerm0.capacity());
      assertFalse(jSTerm0.isFunction());
      assertFalse(jSTerm2.isFunction());
      assertEquals(1, jSTerm2.size());
      assertFalse(jSTerm2.isEval());
      assertFalse(jSTerm2.isConstant());
      assertFalse(jSTerm2.isEmpty());
      assertTrue(jSTerm2.isVariable());
      assertEquals("[jFxA%Rdj8%]", jSTerm2.toString());
      assertEquals(1, jSTerm2.capacity());
      assertSame(jSTerm0, jSTerm1);
      assertNotSame(jSTerm0, jSTerm2);
      assertNotSame(jSTerm2, jSTerm0);
      assertNotSame(jSTerm2, jSTerm1);
      assertNotNull(jSTerm2);
      assertTrue(jSTerm2.equals((Object)jSTerm0));
      assertTrue(jSTerm2.equals((Object)jSTerm1));
      assertEquals(0.0, streamTokenizer0.nval, 0.01);
      assertEquals(32, streamTokenizer0.ttype);
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      assertEquals("[]", jSTerm0.toString());
      assertEquals(0, jSTerm0.size());
      assertFalse(jSTerm0.isConstant());
      assertFalse(jSTerm0.isFunction());
      assertEquals(10, jSTerm0.capacity());
      assertFalse(jSTerm0.isVariable());
      assertFalse(jSTerm0.isEval());
      assertTrue(jSTerm0.isEmpty());
      assertNotNull(jSTerm0);
      
      JSTerm jSTerm1 = new JSTerm();
      assertEquals(10, jSTerm1.capacity());
      assertFalse(jSTerm1.isEval());
      assertFalse(jSTerm1.isVariable());
      assertFalse(jSTerm1.isFunction());
      assertFalse(jSTerm1.isConstant());
      assertEquals("[]", jSTerm1.toString());
      assertEquals(0, jSTerm1.size());
      assertTrue(jSTerm1.isEmpty());
      assertNotNull(jSTerm1);
      assertTrue(jSTerm1.equals((Object)jSTerm0));
      
      boolean boolean0 = jSTerm0.equals(jSTerm1);
      assertEquals("[]", jSTerm0.toString());
      assertEquals(0, jSTerm0.size());
      assertFalse(jSTerm0.isConstant());
      assertFalse(jSTerm0.isFunction());
      assertEquals(10, jSTerm0.capacity());
      assertFalse(jSTerm0.isVariable());
      assertFalse(jSTerm0.isEval());
      assertTrue(jSTerm0.isEmpty());
      assertEquals(10, jSTerm1.capacity());
      assertFalse(jSTerm1.isEval());
      assertFalse(jSTerm1.isVariable());
      assertFalse(jSTerm1.isFunction());
      assertFalse(jSTerm1.isConstant());
      assertEquals("[]", jSTerm1.toString());
      assertEquals(0, jSTerm1.size());
      assertTrue(jSTerm1.isEmpty());
      assertFalse(boolean0);
      assertNotSame(jSTerm0, jSTerm1);
      assertNotSame(jSTerm1, jSTerm0);
      assertTrue(jSTerm0.equals((Object)jSTerm1));
      assertTrue(jSTerm1.equals((Object)jSTerm0));
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      assertEquals(10, jSTerm0.capacity());
      assertFalse(jSTerm0.isFunction());
      assertEquals("[]", jSTerm0.toString());
      assertFalse(jSTerm0.isConstant());
      assertEquals(0, jSTerm0.size());
      assertFalse(jSTerm0.isEval());
      assertFalse(jSTerm0.isVariable());
      assertTrue(jSTerm0.isEmpty());
      assertNotNull(jSTerm0);
      
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      assertEquals("[]", jSSubstitution0.toString());
      assertEquals(10, jSSubstitution0.capacity());
      assertEquals(0, jSSubstitution0.size());
      assertTrue(jSSubstitution0.isEmpty());
      assertFalse(jSSubstitution0.fail());
      assertNotNull(jSSubstitution0);
      
      boolean boolean0 = jSTerm0.add((Object) jSSubstitution0);
      assertEquals(10, jSTerm0.capacity());
      assertFalse(jSTerm0.isFunction());
      assertEquals(1, jSTerm0.size());
      assertEquals("[[]]", jSTerm0.toString());
      assertFalse(jSTerm0.isConstant());
      assertFalse(jSTerm0.isEmpty());
      assertFalse(jSTerm0.isEval());
      assertFalse(jSTerm0.isVariable());
      assertEquals("[]", jSSubstitution0.toString());
      assertEquals(10, jSSubstitution0.capacity());
      assertEquals(0, jSSubstitution0.size());
      assertTrue(jSSubstitution0.isEmpty());
      assertFalse(jSSubstitution0.fail());
      assertTrue(boolean0);
      
      boolean boolean1 = jSTerm0.add((Object) jSSubstitution0);
      assertEquals(10, jSTerm0.capacity());
      assertEquals(2, jSTerm0.size());
      assertFalse(jSTerm0.isFunction());
      assertFalse(jSTerm0.isConstant());
      assertFalse(jSTerm0.isEmpty());
      assertFalse(jSTerm0.isEval());
      assertEquals("[[], []]", jSTerm0.toString());
      assertFalse(jSTerm0.isVariable());
      assertEquals("[]", jSSubstitution0.toString());
      assertEquals(10, jSSubstitution0.capacity());
      assertEquals(0, jSSubstitution0.size());
      assertTrue(jSSubstitution0.isEmpty());
      assertFalse(jSSubstitution0.fail());
      assertTrue(boolean1);
      assertTrue(boolean1 == boolean0);
      
      // Undeclared exception!
      try { 
        jSTerm0.cloneT();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // umd.cs.shop.JSSubstitution cannot be cast to umd.cs.shop.JSTerm
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      assertTrue(jSSubstitution0.isEmpty());
      assertFalse(jSSubstitution0.fail());
      assertEquals(0, jSSubstitution0.size());
      assertEquals(10, jSSubstitution0.capacity());
      assertEquals("[]", jSSubstitution0.toString());
      assertNotNull(jSSubstitution0);
      
      StringReader stringReader0 = new StringReader("jFxA%Rdj8% jSYG> MR");
      assertNotNull(stringReader0);
      
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      assertEquals(1, streamTokenizer0.lineno());
      assertEquals("Token[NOTHING], line 1", streamTokenizer0.toString());
      assertNotNull(streamTokenizer0);
      assertEquals(0.0, streamTokenizer0.nval, 0.01);
      assertEquals((-4), streamTokenizer0.ttype);
      
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      assertEquals("Token[' '], line 1", streamTokenizer0.toString());
      assertEquals(1, streamTokenizer0.lineno());
      assertFalse(jSTerm0.isEmpty());
      assertFalse(jSTerm0.isEval());
      assertEquals(1, jSTerm0.size());
      assertEquals(10, jSTerm0.capacity());
      assertFalse(jSTerm0.isVariable());
      assertFalse(jSTerm0.isFunction());
      assertTrue(jSTerm0.isConstant());
      assertEquals("[jFxA%Rdj8%]", jSTerm0.toString());
      assertNotNull(jSTerm0);
      assertEquals(32, streamTokenizer0.ttype);
      assertEquals(0.0, streamTokenizer0.nval, 0.01);
      
      JSTerm jSTerm1 = (JSTerm)jSTerm0.clone();
      assertEquals("Token[' '], line 1", streamTokenizer0.toString());
      assertEquals(1, streamTokenizer0.lineno());
      assertFalse(jSTerm0.isEmpty());
      assertFalse(jSTerm0.isEval());
      assertEquals(1, jSTerm0.size());
      assertEquals(10, jSTerm0.capacity());
      assertFalse(jSTerm0.isVariable());
      assertFalse(jSTerm0.isFunction());
      assertTrue(jSTerm0.isConstant());
      assertEquals("[jFxA%Rdj8%]", jSTerm0.toString());
      assertFalse(jSTerm1.isEmpty());
      assertTrue(jSTerm1.isConstant());
      assertEquals("[jFxA%Rdj8%]", jSTerm1.toString());
      assertEquals(1, jSTerm1.capacity());
      assertFalse(jSTerm1.isVariable());
      assertFalse(jSTerm1.isFunction());
      assertFalse(jSTerm1.isEval());
      assertEquals(1, jSTerm1.size());
      assertNotSame(jSTerm0, jSTerm1);
      assertNotSame(jSTerm1, jSTerm0);
      assertNotNull(jSTerm1);
      assertTrue(jSTerm1.equals((Object)jSTerm0));
      assertEquals(32, streamTokenizer0.ttype);
      assertEquals(0.0, streamTokenizer0.nval, 0.01);
      
      boolean boolean0 = jSTerm0.add((Object) jSTerm1);
      assertEquals("Token[' '], line 1", streamTokenizer0.toString());
      assertEquals(1, streamTokenizer0.lineno());
      assertFalse(jSTerm0.isEmpty());
      assertFalse(jSTerm0.isEval());
      assertEquals(10, jSTerm0.capacity());
      assertEquals(2, jSTerm0.size());
      assertFalse(jSTerm0.isVariable());
      assertFalse(jSTerm0.isFunction());
      assertTrue(jSTerm0.isConstant());
      assertEquals("[jFxA%Rdj8%, [jFxA%Rdj8%]]", jSTerm0.toString());
      assertFalse(jSTerm1.isEmpty());
      assertTrue(jSTerm1.isConstant());
      assertEquals("[jFxA%Rdj8%]", jSTerm1.toString());
      assertEquals(1, jSTerm1.capacity());
      assertFalse(jSTerm1.isVariable());
      assertFalse(jSTerm1.isFunction());
      assertFalse(jSTerm1.isEval());
      assertEquals(1, jSTerm1.size());
      assertTrue(boolean0);
      assertNotSame(jSTerm0, jSTerm1);
      assertNotSame(jSTerm1, jSTerm0);
      assertFalse(jSTerm0.equals((Object)jSTerm1));
      assertFalse(jSTerm1.equals((Object)jSTerm0));
      assertEquals(32, streamTokenizer0.ttype);
      assertEquals(0.0, streamTokenizer0.nval, 0.01);
      
      jSTerm0.makeEval(true);
      assertEquals("Token[' '], line 1", streamTokenizer0.toString());
      assertEquals(1, streamTokenizer0.lineno());
      assertFalse(jSTerm0.isEmpty());
      assertEquals(10, jSTerm0.capacity());
      assertEquals(2, jSTerm0.size());
      assertFalse(jSTerm0.isVariable());
      assertFalse(jSTerm0.isFunction());
      assertTrue(jSTerm0.isConstant());
      assertTrue(jSTerm0.isEval());
      assertEquals("[jFxA%Rdj8%, [jFxA%Rdj8%]]", jSTerm0.toString());
      assertNotSame(jSTerm0, jSTerm1);
      assertFalse(jSTerm0.equals((Object)jSTerm1));
      assertEquals(32, streamTokenizer0.ttype);
      assertEquals(0.0, streamTokenizer0.nval, 0.01);
      
      jSTerm0.makeFunction();
      assertEquals("Token[' '], line 1", streamTokenizer0.toString());
      assertEquals(1, streamTokenizer0.lineno());
      assertFalse(jSTerm0.isEmpty());
      assertTrue(jSTerm0.isFunction());
      assertEquals(10, jSTerm0.capacity());
      assertFalse(jSTerm0.isConstant());
      assertEquals(2, jSTerm0.size());
      assertFalse(jSTerm0.isVariable());
      assertTrue(jSTerm0.isEval());
      assertEquals("[jFxA%Rdj8%, [jFxA%Rdj8%]]", jSTerm0.toString());
      assertNotSame(jSTerm0, jSTerm1);
      assertFalse(jSTerm0.equals((Object)jSTerm1));
      assertEquals(32, streamTokenizer0.ttype);
      assertEquals(0.0, streamTokenizer0.nval, 0.01);
      
      // Undeclared exception!
      try { 
        jSTerm0.call();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 2 >= 2
         //
         verifyException("java.util.Vector", e);
      }
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      StringReader stringReader0 = new StringReader("(");
      assertNotNull(stringReader0);
      
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      assertEquals(1, streamTokenizer0.lineno());
      assertEquals("Token[NOTHING], line 1", streamTokenizer0.toString());
      assertNotNull(streamTokenizer0);
      assertEquals((-4), streamTokenizer0.ttype);
      assertEquals(0.0, streamTokenizer0.nval, 0.01);
      
      JSTerm jSTerm0 = null;
      try {
        jSTerm0 = new JSTerm(streamTokenizer0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      StringReader stringReader0 = new StringReader("PZPDDUMKG*zoI*.\"I:(");
      assertNotNull(stringReader0);
      
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      assertEquals("Token[NOTHING], line 1", streamTokenizer0.toString());
      assertEquals(1, streamTokenizer0.lineno());
      assertNotNull(streamTokenizer0);
      assertEquals(0.0, streamTokenizer0.nval, 0.01);
      assertEquals((-4), streamTokenizer0.ttype);
      
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      assertEquals("Token[EOF], line 1", streamTokenizer0.toString());
      assertEquals(1, streamTokenizer0.lineno());
      assertEquals(1, jSTerm0.size());
      assertEquals(10, jSTerm0.capacity());
      assertFalse(jSTerm0.isEmpty());
      assertFalse(jSTerm0.isVariable());
      assertFalse(jSTerm0.isEval());
      assertTrue(jSTerm0.isConstant());
      assertEquals("[%%%]", jSTerm0.toString());
      assertFalse(jSTerm0.isFunction());
      assertNotNull(jSTerm0);
      assertEquals((-1), streamTokenizer0.ttype);
      assertEquals(0.0, streamTokenizer0.nval, 0.01);
      
      int int0 = stringReader0.read();
      assertEquals((-1), int0);
      
      Iterator iterator0 = jSTerm0.iterator();
      assertEquals("Token[EOF], line 1", streamTokenizer0.toString());
      assertEquals(1, streamTokenizer0.lineno());
      assertEquals(1, jSTerm0.size());
      assertEquals(10, jSTerm0.capacity());
      assertFalse(jSTerm0.isEmpty());
      assertFalse(jSTerm0.isVariable());
      assertFalse(jSTerm0.isEval());
      assertTrue(jSTerm0.isConstant());
      assertEquals("[%%%]", jSTerm0.toString());
      assertFalse(jSTerm0.isFunction());
      assertNotNull(iterator0);
      assertEquals((-1), streamTokenizer0.ttype);
      assertEquals(0.0, streamTokenizer0.nval, 0.01);
      
      JSTerm jSTerm1 = jSTerm0.call();
      assertEquals("Token[EOF], line 1", streamTokenizer0.toString());
      assertEquals(1, streamTokenizer0.lineno());
      assertEquals(1, jSTerm0.size());
      assertEquals(10, jSTerm0.capacity());
      assertFalse(jSTerm0.isEmpty());
      assertFalse(jSTerm0.isVariable());
      assertFalse(jSTerm0.isEval());
      assertTrue(jSTerm0.isConstant());
      assertEquals("[%%%]", jSTerm0.toString());
      assertFalse(jSTerm0.isFunction());
      assertTrue(jSTerm1.isConstant());
      assertEquals(1, jSTerm1.capacity());
      assertFalse(jSTerm1.isFunction());
      assertFalse(jSTerm1.isEmpty());
      assertEquals("[%%%]", jSTerm1.toString());
      assertFalse(jSTerm1.isVariable());
      assertEquals(1, jSTerm1.size());
      assertFalse(jSTerm1.isEval());
      assertNotSame(jSTerm0, jSTerm1);
      assertNotSame(jSTerm1, jSTerm0);
      assertNotNull(jSTerm1);
      assertTrue(jSTerm1.equals((Object)jSTerm0));
      assertEquals((-1), streamTokenizer0.ttype);
      assertEquals(0.0, streamTokenizer0.nval, 0.01);
      
      JSTerm jSTerm2 = jSTerm0.applySubstitutionT((JSSubstitution) null);
      assertEquals("Token[EOF], line 1", streamTokenizer0.toString());
      assertEquals(1, streamTokenizer0.lineno());
      assertEquals(1, jSTerm0.size());
      assertEquals(10, jSTerm0.capacity());
      assertFalse(jSTerm0.isEmpty());
      assertFalse(jSTerm0.isVariable());
      assertFalse(jSTerm0.isEval());
      assertTrue(jSTerm0.isConstant());
      assertEquals("[%%%]", jSTerm0.toString());
      assertFalse(jSTerm0.isFunction());
      assertEquals(10, jSTerm2.capacity());
      assertEquals("[%%%]", jSTerm2.toString());
      assertFalse(jSTerm2.isEmpty());
      assertFalse(jSTerm2.isEval());
      assertEquals(1, jSTerm2.size());
      assertTrue(jSTerm2.isConstant());
      assertFalse(jSTerm2.isVariable());
      assertFalse(jSTerm2.isFunction());
      assertNotSame(jSTerm0, jSTerm2);
      assertNotSame(jSTerm0, jSTerm1);
      assertNotSame(jSTerm2, jSTerm1);
      assertNotSame(jSTerm2, jSTerm0);
      assertNotNull(jSTerm2);
      assertTrue(jSTerm0.equals((Object)jSTerm1));
      assertTrue(jSTerm2.equals((Object)jSTerm0));
      assertTrue(jSTerm2.equals((Object)jSTerm1));
      assertEquals((-1), streamTokenizer0.ttype);
      assertEquals(0.0, streamTokenizer0.nval, 0.01);
      
      jSTerm2.print();
      assertEquals("Token[EOF], line 1", streamTokenizer0.toString());
      assertEquals(1, streamTokenizer0.lineno());
      assertEquals(1, jSTerm0.size());
      assertEquals(10, jSTerm0.capacity());
      assertFalse(jSTerm0.isEmpty());
      assertFalse(jSTerm0.isVariable());
      assertFalse(jSTerm0.isEval());
      assertTrue(jSTerm0.isConstant());
      assertEquals("[%%%]", jSTerm0.toString());
      assertFalse(jSTerm0.isFunction());
      assertEquals(10, jSTerm2.capacity());
      assertEquals("[%%%]", jSTerm2.toString());
      assertFalse(jSTerm2.isEmpty());
      assertFalse(jSTerm2.isEval());
      assertEquals(1, jSTerm2.size());
      assertTrue(jSTerm2.isConstant());
      assertFalse(jSTerm2.isVariable());
      assertFalse(jSTerm2.isFunction());
      assertNotSame(jSTerm0, jSTerm2);
      assertNotSame(jSTerm0, jSTerm1);
      assertNotSame(jSTerm2, jSTerm1);
      assertNotSame(jSTerm2, jSTerm0);
      assertTrue(jSTerm0.equals((Object)jSTerm2));
      assertTrue(jSTerm0.equals((Object)jSTerm1));
      assertTrue(jSTerm2.equals((Object)jSTerm0));
      assertTrue(jSTerm2.equals((Object)jSTerm1));
      assertEquals((-1), streamTokenizer0.ttype);
      assertEquals(0.0, streamTokenizer0.nval, 0.01);
      
      JSTerm jSTerm3 = jSTerm2.applySubstitutionT((JSSubstitution) null);
      assertEquals("Token[EOF], line 1", streamTokenizer0.toString());
      assertEquals(1, streamTokenizer0.lineno());
      assertEquals(1, jSTerm0.size());
      assertEquals(10, jSTerm0.capacity());
      assertFalse(jSTerm0.isEmpty());
      assertFalse(jSTerm0.isVariable());
      assertFalse(jSTerm0.isEval());
      assertTrue(jSTerm0.isConstant());
      assertEquals("[%%%]", jSTerm0.toString());
      assertFalse(jSTerm0.isFunction());
      assertEquals(10, jSTerm2.capacity());
      assertEquals("[%%%]", jSTerm2.toString());
      assertFalse(jSTerm2.isEmpty());
      assertFalse(jSTerm2.isEval());
      assertEquals(1, jSTerm2.size());
      assertTrue(jSTerm2.isConstant());
      assertFalse(jSTerm2.isVariable());
      assertFalse(jSTerm2.isFunction());
      assertTrue(jSTerm3.isConstant());
      assertEquals("[%%%]", jSTerm3.toString());
      assertEquals(10, jSTerm3.capacity());
      assertFalse(jSTerm3.isFunction());
      assertFalse(jSTerm3.isEval());
      assertFalse(jSTerm3.isEmpty());
      assertEquals(1, jSTerm3.size());
      assertFalse(jSTerm3.isVariable());
      assertNotSame(jSTerm0, jSTerm3);
      assertNotSame(jSTerm0, jSTerm2);
      assertNotSame(jSTerm0, jSTerm1);
      assertNotSame(jSTerm2, jSTerm1);
      assertNotSame(jSTerm2, jSTerm3);
      assertNotSame(jSTerm2, jSTerm0);
      assertNotSame(jSTerm3, jSTerm2);
      assertNotSame(jSTerm3, jSTerm0);
      assertNotSame(jSTerm3, jSTerm1);
      assertNotNull(jSTerm3);
      assertTrue(jSTerm0.equals((Object)jSTerm2));
      assertTrue(jSTerm0.equals((Object)jSTerm1));
      assertTrue(jSTerm2.equals((Object)jSTerm0));
      assertTrue(jSTerm2.equals((Object)jSTerm1));
      assertTrue(jSTerm3.equals((Object)jSTerm1));
      assertTrue(jSTerm3.equals((Object)jSTerm0));
      assertTrue(jSTerm3.equals((Object)jSTerm2));
      assertEquals((-1), streamTokenizer0.ttype);
      assertEquals(0.0, streamTokenizer0.nval, 0.01);
      
      JSSubstitution jSSubstitution0 = jSTerm2.matches(jSTerm3);
      assertEquals("Token[EOF], line 1", streamTokenizer0.toString());
      assertEquals(1, streamTokenizer0.lineno());
      assertEquals(1, jSTerm0.size());
      assertEquals(10, jSTerm0.capacity());
      assertFalse(jSTerm0.isEmpty());
      assertFalse(jSTerm0.isVariable());
      assertFalse(jSTerm0.isEval());
      assertTrue(jSTerm0.isConstant());
      assertEquals("[%%%]", jSTerm0.toString());
      assertFalse(jSTerm0.isFunction());
      assertEquals(10, jSTerm2.capacity());
      assertEquals("[%%%]", jSTerm2.toString());
      assertFalse(jSTerm2.isEmpty());
      assertFalse(jSTerm2.isEval());
      assertEquals(1, jSTerm2.size());
      assertTrue(jSTerm2.isConstant());
      assertFalse(jSTerm2.isVariable());
      assertFalse(jSTerm2.isFunction());
      assertTrue(jSTerm3.isConstant());
      assertEquals("[%%%]", jSTerm3.toString());
      assertEquals(10, jSTerm3.capacity());
      assertFalse(jSTerm3.isFunction());
      assertFalse(jSTerm3.isEval());
      assertFalse(jSTerm3.isEmpty());
      assertEquals(1, jSTerm3.size());
      assertFalse(jSTerm3.isVariable());
      assertEquals(0, jSSubstitution0.size());
      assertEquals("[]", jSSubstitution0.toString());
      assertTrue(jSSubstitution0.isEmpty());
      assertFalse(jSSubstitution0.fail());
      assertEquals(10, jSSubstitution0.capacity());
      assertNotSame(jSTerm0, jSTerm3);
      assertNotSame(jSTerm0, jSTerm2);
      assertNotSame(jSTerm0, jSTerm1);
      assertNotSame(jSTerm2, jSTerm1);
      assertNotSame(jSTerm2, jSTerm3);
      assertNotSame(jSTerm2, jSTerm0);
      assertNotSame(jSTerm3, jSTerm2);
      assertNotSame(jSTerm3, jSTerm0);
      assertNotSame(jSTerm3, jSTerm1);
      assertNotNull(jSSubstitution0);
      assertTrue(jSTerm0.equals((Object)jSTerm2));
      assertTrue(jSTerm0.equals((Object)jSTerm1));
      assertTrue(jSTerm0.equals((Object)jSTerm3));
      assertTrue(jSTerm2.equals((Object)jSTerm0));
      assertTrue(jSTerm2.equals((Object)jSTerm1));
      assertTrue(jSTerm2.equals((Object)jSTerm3));
      assertTrue(jSTerm3.equals((Object)jSTerm1));
      assertTrue(jSTerm3.equals((Object)jSTerm0));
      assertTrue(jSTerm3.equals((Object)jSTerm2));
      assertEquals((-1), streamTokenizer0.ttype);
      assertEquals(0.0, streamTokenizer0.nval, 0.01);
      
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      assertEquals("[]", jSSubstitution1.toString());
      assertTrue(jSSubstitution1.isEmpty());
      assertFalse(jSSubstitution1.fail());
      assertEquals(10, jSSubstitution1.capacity());
      assertEquals(0, jSSubstitution1.size());
      assertNotNull(jSSubstitution1);
      assertTrue(jSSubstitution1.equals((Object)jSSubstitution0));
      
      JSSubstitution jSSubstitution2 = jSTerm3.matches(jSTerm1, jSSubstitution1);
      assertEquals("Token[EOF], line 1", streamTokenizer0.toString());
      assertEquals(1, streamTokenizer0.lineno());
      assertEquals(1, jSTerm0.size());
      assertEquals(10, jSTerm0.capacity());
      assertFalse(jSTerm0.isEmpty());
      assertFalse(jSTerm0.isVariable());
      assertFalse(jSTerm0.isEval());
      assertTrue(jSTerm0.isConstant());
      assertEquals("[%%%]", jSTerm0.toString());
      assertFalse(jSTerm0.isFunction());
      assertTrue(jSTerm1.isConstant());
      assertEquals(1, jSTerm1.capacity());
      assertFalse(jSTerm1.isFunction());
      assertFalse(jSTerm1.isEmpty());
      assertEquals("[%%%]", jSTerm1.toString());
      assertFalse(jSTerm1.isVariable());
      assertEquals(1, jSTerm1.size());
      assertFalse(jSTerm1.isEval());
      assertEquals(10, jSTerm2.capacity());
      assertEquals("[%%%]", jSTerm2.toString());
      assertFalse(jSTerm2.isEmpty());
      assertFalse(jSTerm2.isEval());
      assertEquals(1, jSTerm2.size());
      assertTrue(jSTerm2.isConstant());
      assertFalse(jSTerm2.isVariable());
      assertFalse(jSTerm2.isFunction());
      assertTrue(jSTerm3.isConstant());
      assertEquals("[%%%]", jSTerm3.toString());
      assertEquals(10, jSTerm3.capacity());
      assertFalse(jSTerm3.isFunction());
      assertFalse(jSTerm3.isEval());
      assertFalse(jSTerm3.isEmpty());
      assertEquals(1, jSTerm3.size());
      assertFalse(jSTerm3.isVariable());
      assertEquals("[]", jSSubstitution1.toString());
      assertTrue(jSSubstitution1.isEmpty());
      assertFalse(jSSubstitution1.fail());
      assertEquals(10, jSSubstitution1.capacity());
      assertEquals(0, jSSubstitution1.size());
      assertEquals("[]", jSSubstitution2.toString());
      assertEquals(10, jSSubstitution2.capacity());
      assertEquals(0, jSSubstitution2.size());
      assertTrue(jSSubstitution2.isEmpty());
      assertFalse(jSSubstitution2.fail());
      assertNotSame(jSTerm0, jSTerm3);
      assertNotSame(jSTerm0, jSTerm2);
      assertNotSame(jSTerm0, jSTerm1);
      assertNotSame(jSTerm1, jSTerm0);
      assertNotSame(jSTerm1, jSTerm2);
      assertNotSame(jSTerm1, jSTerm3);
      assertNotSame(jSTerm2, jSTerm1);
      assertNotSame(jSTerm2, jSTerm3);
      assertNotSame(jSTerm2, jSTerm0);
      assertNotSame(jSTerm3, jSTerm2);
      assertNotSame(jSTerm3, jSTerm0);
      assertNotSame(jSTerm3, jSTerm1);
      assertNotSame(jSSubstitution1, jSSubstitution0);
      assertNotSame(jSSubstitution1, jSSubstitution2);
      assertNotSame(jSSubstitution2, jSSubstitution1);
      assertNotSame(jSSubstitution2, jSSubstitution0);
      assertNotNull(jSSubstitution2);
      assertTrue(jSTerm0.equals((Object)jSTerm2));
      assertTrue(jSTerm0.equals((Object)jSTerm1));
      assertTrue(jSTerm0.equals((Object)jSTerm3));
      assertTrue(jSTerm1.equals((Object)jSTerm3));
      assertTrue(jSTerm1.equals((Object)jSTerm0));
      assertTrue(jSTerm1.equals((Object)jSTerm2));
      assertTrue(jSTerm2.equals((Object)jSTerm0));
      assertTrue(jSTerm2.equals((Object)jSTerm1));
      assertTrue(jSTerm2.equals((Object)jSTerm3));
      assertTrue(jSTerm3.equals((Object)jSTerm1));
      assertTrue(jSTerm3.equals((Object)jSTerm0));
      assertTrue(jSTerm3.equals((Object)jSTerm2));
      assertTrue(jSSubstitution1.equals((Object)jSSubstitution0));
      assertTrue(jSSubstitution2.equals((Object)jSSubstitution0));
      assertTrue(jSSubstitution2.equals((Object)jSSubstitution1));
      assertEquals((-1), streamTokenizer0.ttype);
      assertEquals(0.0, streamTokenizer0.nval, 0.01);
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      assertFalse(jSSubstitution0.fail());
      assertEquals("[]", jSSubstitution0.toString());
      assertTrue(jSSubstitution0.isEmpty());
      assertEquals(10, jSSubstitution0.capacity());
      assertEquals(0, jSSubstitution0.size());
      assertNotNull(jSSubstitution0);
      
      StringReader stringReader0 = new StringReader("jFxA%Rdj8% jSYG> MR");
      assertNotNull(stringReader0);
      
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      assertEquals(1, streamTokenizer0.lineno());
      assertEquals("Token[NOTHING], line 1", streamTokenizer0.toString());
      assertNotNull(streamTokenizer0);
      assertEquals(0.0, streamTokenizer0.nval, 0.01);
      assertEquals((-4), streamTokenizer0.ttype);
      
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      assertEquals(1, streamTokenizer0.lineno());
      assertEquals("Token[' '], line 1", streamTokenizer0.toString());
      assertFalse(jSTerm0.isEval());
      assertEquals(1, jSTerm0.size());
      assertFalse(jSTerm0.isEmpty());
      assertEquals(10, jSTerm0.capacity());
      assertFalse(jSTerm0.isFunction());
      assertEquals("[jFxA%Rdj8%]", jSTerm0.toString());
      assertTrue(jSTerm0.isConstant());
      assertFalse(jSTerm0.isVariable());
      assertNotNull(jSTerm0);
      assertEquals(0.0, streamTokenizer0.nval, 0.01);
      assertEquals(32, streamTokenizer0.ttype);
      
      JSTerm jSTerm1 = jSSubstitution0.instance(jSTerm0);
      assertFalse(jSSubstitution0.fail());
      assertEquals("[]", jSSubstitution0.toString());
      assertTrue(jSSubstitution0.isEmpty());
      assertEquals(10, jSSubstitution0.capacity());
      assertEquals(0, jSSubstitution0.size());
      assertEquals(1, streamTokenizer0.lineno());
      assertEquals("Token[' '], line 1", streamTokenizer0.toString());
      assertFalse(jSTerm0.isEval());
      assertEquals(1, jSTerm0.size());
      assertFalse(jSTerm0.isEmpty());
      assertEquals(10, jSTerm0.capacity());
      assertFalse(jSTerm0.isFunction());
      assertEquals("[jFxA%Rdj8%]", jSTerm0.toString());
      assertTrue(jSTerm0.isConstant());
      assertFalse(jSTerm0.isVariable());
      assertFalse(jSTerm1.isEmpty());
      assertEquals(10, jSTerm1.capacity());
      assertFalse(jSTerm1.isVariable());
      assertFalse(jSTerm1.isFunction());
      assertFalse(jSTerm1.isEval());
      assertEquals(1, jSTerm1.size());
      assertEquals("[jFxA%Rdj8%]", jSTerm1.toString());
      assertTrue(jSTerm1.isConstant());
      assertSame(jSTerm0, jSTerm1);
      assertSame(jSTerm1, jSTerm0);
      assertNotNull(jSTerm1);
      assertEquals(0.0, streamTokenizer0.nval, 0.01);
      assertEquals(32, streamTokenizer0.ttype);
      
      JSTerm jSTerm2 = new JSTerm();
      assertFalse(jSTerm2.isEval());
      assertFalse(jSTerm2.isFunction());
      assertFalse(jSTerm2.isVariable());
      assertEquals(10, jSTerm2.capacity());
      assertTrue(jSTerm2.isEmpty());
      assertEquals("[]", jSTerm2.toString());
      assertFalse(jSTerm2.isConstant());
      assertEquals(0, jSTerm2.size());
      assertNotNull(jSTerm2);
      assertFalse(jSTerm2.equals((Object)jSTerm1));
      assertFalse(jSTerm2.equals((Object)jSTerm0));
      
      boolean boolean0 = jSTerm0.add((Object) jSTerm2);
      assertEquals(1, streamTokenizer0.lineno());
      assertEquals("Token[' '], line 1", streamTokenizer0.toString());
      assertFalse(jSTerm0.isEval());
      assertEquals(2, jSTerm0.size());
      assertFalse(jSTerm0.isEmpty());
      assertEquals(10, jSTerm0.capacity());
      assertFalse(jSTerm0.isFunction());
      assertEquals("[jFxA%Rdj8%, []]", jSTerm0.toString());
      assertTrue(jSTerm0.isConstant());
      assertFalse(jSTerm0.isVariable());
      assertFalse(jSTerm2.isEval());
      assertFalse(jSTerm2.isFunction());
      assertFalse(jSTerm2.isVariable());
      assertEquals(10, jSTerm2.capacity());
      assertTrue(jSTerm2.isEmpty());
      assertEquals("[]", jSTerm2.toString());
      assertFalse(jSTerm2.isConstant());
      assertEquals(0, jSTerm2.size());
      assertTrue(boolean0);
      assertSame(jSTerm0, jSTerm1);
      assertNotSame(jSTerm0, jSTerm2);
      assertNotSame(jSTerm2, jSTerm1);
      assertNotSame(jSTerm2, jSTerm0);
      assertFalse(jSTerm0.equals((Object)jSTerm2));
      assertFalse(jSTerm2.equals((Object)jSTerm1));
      assertFalse(jSTerm2.equals((Object)jSTerm0));
      assertEquals(0.0, streamTokenizer0.nval, 0.01);
      assertEquals(32, streamTokenizer0.ttype);
      
      jSTerm0.makeEval(true);
      assertEquals(1, streamTokenizer0.lineno());
      assertEquals("Token[' '], line 1", streamTokenizer0.toString());
      assertEquals(2, jSTerm0.size());
      assertFalse(jSTerm0.isEmpty());
      assertEquals(10, jSTerm0.capacity());
      assertFalse(jSTerm0.isFunction());
      assertTrue(jSTerm0.isEval());
      assertEquals("[jFxA%Rdj8%, []]", jSTerm0.toString());
      assertTrue(jSTerm0.isConstant());
      assertFalse(jSTerm0.isVariable());
      assertSame(jSTerm0, jSTerm1);
      assertNotSame(jSTerm0, jSTerm2);
      assertFalse(jSTerm0.equals((Object)jSTerm2));
      assertEquals(0.0, streamTokenizer0.nval, 0.01);
      assertEquals(32, streamTokenizer0.ttype);
      
      jSTerm0.makeFunction();
      assertEquals(1, streamTokenizer0.lineno());
      assertEquals("Token[' '], line 1", streamTokenizer0.toString());
      assertEquals(2, jSTerm0.size());
      assertFalse(jSTerm0.isEmpty());
      assertFalse(jSTerm0.isConstant());
      assertEquals(10, jSTerm0.capacity());
      assertTrue(jSTerm0.isEval());
      assertEquals("[jFxA%Rdj8%, []]", jSTerm0.toString());
      assertTrue(jSTerm0.isFunction());
      assertFalse(jSTerm0.isVariable());
      assertSame(jSTerm0, jSTerm1);
      assertNotSame(jSTerm0, jSTerm2);
      assertFalse(jSTerm0.equals((Object)jSTerm2));
      assertEquals(0.0, streamTokenizer0.nval, 0.01);
      assertEquals(32, streamTokenizer0.ttype);
      
      boolean boolean1 = jSTerm1.equals(jSTerm1);
      assertFalse(jSSubstitution0.fail());
      assertEquals("[]", jSSubstitution0.toString());
      assertTrue(jSSubstitution0.isEmpty());
      assertEquals(10, jSSubstitution0.capacity());
      assertEquals(0, jSSubstitution0.size());
      assertEquals(1, streamTokenizer0.lineno());
      assertEquals("Token[' '], line 1", streamTokenizer0.toString());
      assertEquals(2, jSTerm0.size());
      assertFalse(jSTerm0.isEmpty());
      assertFalse(jSTerm0.isConstant());
      assertEquals(10, jSTerm0.capacity());
      assertTrue(jSTerm0.isEval());
      assertEquals("[jFxA%Rdj8%, []]", jSTerm0.toString());
      assertTrue(jSTerm0.isFunction());
      assertFalse(jSTerm0.isVariable());
      assertTrue(jSTerm1.isEval());
      assertFalse(jSTerm1.isEmpty());
      assertEquals("[jFxA%Rdj8%, []]", jSTerm1.toString());
      assertTrue(jSTerm1.isFunction());
      assertFalse(jSTerm1.isConstant());
      assertEquals(10, jSTerm1.capacity());
      assertFalse(jSTerm1.isVariable());
      assertEquals(2, jSTerm1.size());
      assertFalse(boolean1);
      assertSame(jSTerm0, jSTerm1);
      assertNotSame(jSTerm0, jSTerm2);
      assertSame(jSTerm1, jSTerm0);
      assertNotSame(jSTerm1, jSTerm2);
      assertFalse(jSTerm0.equals((Object)jSTerm2));
      assertFalse(jSTerm1.equals((Object)jSTerm2));
      assertFalse(boolean1 == boolean0);
      assertEquals(0.0, streamTokenizer0.nval, 0.01);
      assertEquals(32, streamTokenizer0.ttype);
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      assertEquals(0, jSSubstitution0.size());
      assertEquals("[]", jSSubstitution0.toString());
      assertTrue(jSSubstitution0.isEmpty());
      assertFalse(jSSubstitution0.fail());
      assertEquals(10, jSSubstitution0.capacity());
      assertNotNull(jSSubstitution0);
      
      StringReader stringReader0 = new StringReader("jFxA%Rdj8% jSYG> MR");
      assertNotNull(stringReader0);
      
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      assertEquals("Token[NOTHING], line 1", streamTokenizer0.toString());
      assertEquals(1, streamTokenizer0.lineno());
      assertNotNull(streamTokenizer0);
      assertEquals(0.0, streamTokenizer0.nval, 0.01);
      assertEquals((-4), streamTokenizer0.ttype);
      
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      assertEquals("Token[' '], line 1", streamTokenizer0.toString());
      assertEquals(1, streamTokenizer0.lineno());
      assertEquals("[jFxA%Rdj8%]", jSTerm0.toString());
      assertTrue(jSTerm0.isConstant());
      assertFalse(jSTerm0.isFunction());
      assertEquals(10, jSTerm0.capacity());
      assertFalse(jSTerm0.isVariable());
      assertFalse(jSTerm0.isEmpty());
      assertFalse(jSTerm0.isEval());
      assertEquals(1, jSTerm0.size());
      assertNotNull(jSTerm0);
      assertEquals(0.0, streamTokenizer0.nval, 0.01);
      assertEquals(32, streamTokenizer0.ttype);
      
      JSTerm jSTerm1 = jSSubstitution0.instance(jSTerm0);
      assertEquals(0, jSSubstitution0.size());
      assertEquals("[]", jSSubstitution0.toString());
      assertTrue(jSSubstitution0.isEmpty());
      assertFalse(jSSubstitution0.fail());
      assertEquals(10, jSSubstitution0.capacity());
      assertEquals("Token[' '], line 1", streamTokenizer0.toString());
      assertEquals(1, streamTokenizer0.lineno());
      assertEquals("[jFxA%Rdj8%]", jSTerm0.toString());
      assertTrue(jSTerm0.isConstant());
      assertFalse(jSTerm0.isFunction());
      assertEquals(10, jSTerm0.capacity());
      assertFalse(jSTerm0.isVariable());
      assertFalse(jSTerm0.isEmpty());
      assertFalse(jSTerm0.isEval());
      assertEquals(1, jSTerm0.size());
      assertEquals(10, jSTerm1.capacity());
      assertFalse(jSTerm1.isVariable());
      assertFalse(jSTerm1.isEmpty());
      assertFalse(jSTerm1.isEval());
      assertEquals(1, jSTerm1.size());
      assertEquals("[jFxA%Rdj8%]", jSTerm1.toString());
      assertTrue(jSTerm1.isConstant());
      assertFalse(jSTerm1.isFunction());
      assertSame(jSTerm0, jSTerm1);
      assertSame(jSTerm1, jSTerm0);
      assertNotNull(jSTerm1);
      assertEquals(0.0, streamTokenizer0.nval, 0.01);
      assertEquals(32, streamTokenizer0.ttype);
      
      JSTerm jSTerm2 = (JSTerm)jSTerm1.clone();
      assertEquals(0, jSSubstitution0.size());
      assertEquals("[]", jSSubstitution0.toString());
      assertTrue(jSSubstitution0.isEmpty());
      assertFalse(jSSubstitution0.fail());
      assertEquals(10, jSSubstitution0.capacity());
      assertEquals("Token[' '], line 1", streamTokenizer0.toString());
      assertEquals(1, streamTokenizer0.lineno());
      assertEquals("[jFxA%Rdj8%]", jSTerm0.toString());
      assertTrue(jSTerm0.isConstant());
      assertFalse(jSTerm0.isFunction());
      assertEquals(10, jSTerm0.capacity());
      assertFalse(jSTerm0.isVariable());
      assertFalse(jSTerm0.isEmpty());
      assertFalse(jSTerm0.isEval());
      assertEquals(1, jSTerm0.size());
      assertEquals(10, jSTerm1.capacity());
      assertFalse(jSTerm1.isVariable());
      assertFalse(jSTerm1.isEmpty());
      assertFalse(jSTerm1.isEval());
      assertEquals(1, jSTerm1.size());
      assertEquals("[jFxA%Rdj8%]", jSTerm1.toString());
      assertTrue(jSTerm1.isConstant());
      assertFalse(jSTerm1.isFunction());
      assertEquals(1, jSTerm2.capacity());
      assertFalse(jSTerm2.isEmpty());
      assertEquals("[jFxA%Rdj8%]", jSTerm2.toString());
      assertFalse(jSTerm2.isFunction());
      assertFalse(jSTerm2.isVariable());
      assertEquals(1, jSTerm2.size());
      assertTrue(jSTerm2.isConstant());
      assertFalse(jSTerm2.isEval());
      assertSame(jSTerm0, jSTerm1);
      assertNotSame(jSTerm0, jSTerm2);
      assertNotSame(jSTerm1, jSTerm2);
      assertSame(jSTerm1, jSTerm0);
      assertNotSame(jSTerm2, jSTerm0);
      assertNotSame(jSTerm2, jSTerm1);
      assertNotNull(jSTerm2);
      assertTrue(jSTerm2.equals((Object)jSTerm0));
      assertTrue(jSTerm2.equals((Object)jSTerm1));
      assertEquals(0.0, streamTokenizer0.nval, 0.01);
      assertEquals(32, streamTokenizer0.ttype);
      
      boolean boolean0 = jSTerm0.add((Object) jSTerm2);
      assertEquals(0, jSSubstitution0.size());
      assertEquals("[]", jSSubstitution0.toString());
      assertTrue(jSSubstitution0.isEmpty());
      assertFalse(jSSubstitution0.fail());
      assertEquals(10, jSSubstitution0.capacity());
      assertEquals("Token[' '], line 1", streamTokenizer0.toString());
      assertEquals(1, streamTokenizer0.lineno());
      assertTrue(jSTerm0.isConstant());
      assertFalse(jSTerm0.isFunction());
      assertEquals(10, jSTerm0.capacity());
      assertEquals("[jFxA%Rdj8%, [jFxA%Rdj8%]]", jSTerm0.toString());
      assertFalse(jSTerm0.isVariable());
      assertEquals(2, jSTerm0.size());
      assertFalse(jSTerm0.isEmpty());
      assertFalse(jSTerm0.isEval());
      assertEquals(10, jSTerm1.capacity());
      assertEquals("[jFxA%Rdj8%, [jFxA%Rdj8%]]", jSTerm1.toString());
      assertFalse(jSTerm1.isVariable());
      assertEquals(2, jSTerm1.size());
      assertFalse(jSTerm1.isEmpty());
      assertFalse(jSTerm1.isEval());
      assertTrue(jSTerm1.isConstant());
      assertFalse(jSTerm1.isFunction());
      assertEquals(1, jSTerm2.capacity());
      assertFalse(jSTerm2.isEmpty());
      assertEquals("[jFxA%Rdj8%]", jSTerm2.toString());
      assertFalse(jSTerm2.isFunction());
      assertFalse(jSTerm2.isVariable());
      assertEquals(1, jSTerm2.size());
      assertTrue(jSTerm2.isConstant());
      assertFalse(jSTerm2.isEval());
      assertTrue(boolean0);
      assertSame(jSTerm0, jSTerm1);
      assertNotSame(jSTerm0, jSTerm2);
      assertNotSame(jSTerm1, jSTerm2);
      assertSame(jSTerm1, jSTerm0);
      assertNotSame(jSTerm2, jSTerm0);
      assertNotSame(jSTerm2, jSTerm1);
      assertFalse(jSTerm0.equals((Object)jSTerm2));
      assertFalse(jSTerm1.equals((Object)jSTerm2));
      assertFalse(jSTerm2.equals((Object)jSTerm0));
      assertFalse(jSTerm2.equals((Object)jSTerm1));
      assertEquals(0.0, streamTokenizer0.nval, 0.01);
      assertEquals(32, streamTokenizer0.ttype);
      
      jSTerm0.makeEval(true);
      assertEquals("Token[' '], line 1", streamTokenizer0.toString());
      assertEquals(1, streamTokenizer0.lineno());
      assertTrue(jSTerm0.isConstant());
      assertTrue(jSTerm0.isEval());
      assertFalse(jSTerm0.isFunction());
      assertEquals(10, jSTerm0.capacity());
      assertEquals("[jFxA%Rdj8%, [jFxA%Rdj8%]]", jSTerm0.toString());
      assertFalse(jSTerm0.isVariable());
      assertEquals(2, jSTerm0.size());
      assertFalse(jSTerm0.isEmpty());
      assertSame(jSTerm0, jSTerm1);
      assertNotSame(jSTerm0, jSTerm2);
      assertFalse(jSTerm0.equals((Object)jSTerm2));
      assertEquals(0.0, streamTokenizer0.nval, 0.01);
      assertEquals(32, streamTokenizer0.ttype);
      
      jSTerm0.makeFunction();
      assertEquals("Token[' '], line 1", streamTokenizer0.toString());
      assertEquals(1, streamTokenizer0.lineno());
      assertTrue(jSTerm0.isEval());
      assertFalse(jSTerm0.isConstant());
      assertEquals(10, jSTerm0.capacity());
      assertEquals("[jFxA%Rdj8%, [jFxA%Rdj8%]]", jSTerm0.toString());
      assertFalse(jSTerm0.isVariable());
      assertEquals(2, jSTerm0.size());
      assertFalse(jSTerm0.isEmpty());
      assertTrue(jSTerm0.isFunction());
      assertSame(jSTerm0, jSTerm1);
      assertNotSame(jSTerm0, jSTerm2);
      assertFalse(jSTerm0.equals((Object)jSTerm2));
      assertEquals(0.0, streamTokenizer0.nval, 0.01);
      assertEquals(32, streamTokenizer0.ttype);
      
      boolean boolean1 = jSTerm1.equals(jSTerm1);
      assertEquals(0, jSSubstitution0.size());
      assertEquals("[]", jSSubstitution0.toString());
      assertTrue(jSSubstitution0.isEmpty());
      assertFalse(jSSubstitution0.fail());
      assertEquals(10, jSSubstitution0.capacity());
      assertEquals("Token[' '], line 1", streamTokenizer0.toString());
      assertEquals(1, streamTokenizer0.lineno());
      assertTrue(jSTerm0.isEval());
      assertFalse(jSTerm0.isConstant());
      assertEquals(10, jSTerm0.capacity());
      assertEquals("[jFxA%Rdj8%, [jFxA%Rdj8%]]", jSTerm0.toString());
      assertFalse(jSTerm0.isVariable());
      assertEquals(2, jSTerm0.size());
      assertFalse(jSTerm0.isEmpty());
      assertTrue(jSTerm0.isFunction());
      assertFalse(jSTerm1.isConstant());
      assertEquals(10, jSTerm1.capacity());
      assertEquals("[jFxA%Rdj8%, [jFxA%Rdj8%]]", jSTerm1.toString());
      assertFalse(jSTerm1.isVariable());
      assertEquals(2, jSTerm1.size());
      assertFalse(jSTerm1.isEmpty());
      assertTrue(jSTerm1.isFunction());
      assertTrue(jSTerm1.isEval());
      assertTrue(boolean1);
      assertSame(jSTerm0, jSTerm1);
      assertNotSame(jSTerm0, jSTerm2);
      assertNotSame(jSTerm1, jSTerm2);
      assertSame(jSTerm1, jSTerm0);
      assertFalse(jSTerm0.equals((Object)jSTerm2));
      assertFalse(jSTerm1.equals((Object)jSTerm2));
      assertTrue(boolean1 == boolean0);
      assertEquals(0.0, streamTokenizer0.nval, 0.01);
      assertEquals(32, streamTokenizer0.ttype);
      
      JSSubstitution jSSubstitution1 = jSTerm0.matches(jSTerm1, jSSubstitution0);
      assertEquals(0, jSSubstitution0.size());
      assertEquals("[]", jSSubstitution0.toString());
      assertTrue(jSSubstitution0.isEmpty());
      assertFalse(jSSubstitution0.fail());
      assertEquals(10, jSSubstitution0.capacity());
      assertEquals("Token[' '], line 1", streamTokenizer0.toString());
      assertEquals(1, streamTokenizer0.lineno());
      assertTrue(jSTerm0.isEval());
      assertFalse(jSTerm0.isConstant());
      assertEquals(10, jSTerm0.capacity());
      assertEquals("[jFxA%Rdj8%, [jFxA%Rdj8%]]", jSTerm0.toString());
      assertFalse(jSTerm0.isVariable());
      assertEquals(2, jSTerm0.size());
      assertFalse(jSTerm0.isEmpty());
      assertTrue(jSTerm0.isFunction());
      assertFalse(jSTerm1.isConstant());
      assertEquals(10, jSTerm1.capacity());
      assertEquals("[jFxA%Rdj8%, [jFxA%Rdj8%]]", jSTerm1.toString());
      assertFalse(jSTerm1.isVariable());
      assertEquals(2, jSTerm1.size());
      assertFalse(jSTerm1.isEmpty());
      assertTrue(jSTerm1.isFunction());
      assertTrue(jSTerm1.isEval());
      assertTrue(jSSubstitution1.isEmpty());
      assertFalse(jSSubstitution1.fail());
      assertEquals(10, jSSubstitution1.capacity());
      assertEquals(0, jSSubstitution1.size());
      assertEquals("[]", jSSubstitution1.toString());
      assertNotSame(jSSubstitution0, jSSubstitution1);
      assertSame(jSTerm0, jSTerm1);
      assertNotSame(jSTerm0, jSTerm2);
      assertNotSame(jSTerm1, jSTerm2);
      assertSame(jSTerm1, jSTerm0);
      assertNotSame(jSSubstitution1, jSSubstitution0);
      assertNotNull(jSSubstitution1);
      assertFalse(jSTerm0.equals((Object)jSTerm2));
      assertFalse(jSTerm1.equals((Object)jSTerm2));
      assertTrue(jSSubstitution1.equals((Object)jSSubstitution0));
      assertEquals(0.0, streamTokenizer0.nval, 0.01);
      assertEquals(32, streamTokenizer0.ttype);
      
      StringBuffer stringBuffer0 = jSTerm0.toStr();
      assertEquals("Token[' '], line 1", streamTokenizer0.toString());
      assertEquals(1, streamTokenizer0.lineno());
      assertTrue(jSTerm0.isEval());
      assertFalse(jSTerm0.isConstant());
      assertEquals(10, jSTerm0.capacity());
      assertEquals("[jFxA%Rdj8%, [jFxA%Rdj8%]]", jSTerm0.toString());
      assertFalse(jSTerm0.isVariable());
      assertEquals(2, jSTerm0.size());
      assertFalse(jSTerm0.isEmpty());
      assertTrue(jSTerm0.isFunction());
      assertEquals("(jFxA%Rdj8% jFxA%Rdj8% )", stringBuffer0.toString());
      assertEquals(24, stringBuffer0.length());
      assertSame(jSTerm0, jSTerm1);
      assertNotSame(jSTerm0, jSTerm2);
      assertNotNull(stringBuffer0);
      assertFalse(jSTerm0.equals((Object)jSTerm2));
      assertEquals(0.0, streamTokenizer0.nval, 0.01);
      assertEquals(32, streamTokenizer0.ttype);
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      assertFalse(jSTerm0.isConstant());
      assertEquals(0, jSTerm0.size());
      assertEquals(10, jSTerm0.capacity());
      assertEquals("[]", jSTerm0.toString());
      assertFalse(jSTerm0.isFunction());
      assertFalse(jSTerm0.isEval());
      assertTrue(jSTerm0.isEmpty());
      assertFalse(jSTerm0.isVariable());
      assertNotNull(jSTerm0);
      
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      assertEquals("[]", jSSubstitution0.toString());
      assertTrue(jSSubstitution0.isEmpty());
      assertFalse(jSSubstitution0.fail());
      assertEquals(0, jSSubstitution0.size());
      assertEquals(10, jSSubstitution0.capacity());
      assertNotNull(jSSubstitution0);
      
      jSTerm0.makeVariable();
      assertFalse(jSTerm0.isConstant());
      assertTrue(jSTerm0.isVariable());
      assertEquals(0, jSTerm0.size());
      assertEquals(10, jSTerm0.capacity());
      assertEquals("[]", jSTerm0.toString());
      assertFalse(jSTerm0.isFunction());
      assertFalse(jSTerm0.isEval());
      assertTrue(jSTerm0.isEmpty());
      
      JSTerm jSTerm1 = new JSTerm();
      assertFalse(jSTerm1.isConstant());
      assertEquals(0, jSTerm1.size());
      assertFalse(jSTerm1.isFunction());
      assertEquals("[]", jSTerm1.toString());
      assertEquals(10, jSTerm1.capacity());
      assertFalse(jSTerm1.isEval());
      assertTrue(jSTerm1.isEmpty());
      assertFalse(jSTerm1.isVariable());
      assertNotNull(jSTerm1);
      assertTrue(jSTerm1.equals((Object)jSTerm0));
      
      jSTerm1.makeConstant();
      assertEquals(0, jSTerm1.size());
      assertFalse(jSTerm1.isFunction());
      assertEquals("[]", jSTerm1.toString());
      assertEquals(10, jSTerm1.capacity());
      assertFalse(jSTerm1.isEval());
      assertTrue(jSTerm1.isEmpty());
      assertFalse(jSTerm1.isVariable());
      assertTrue(jSTerm1.isConstant());
      assertNotSame(jSTerm1, jSTerm0);
      assertTrue(jSTerm1.equals((Object)jSTerm0));
      
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      assertTrue(jSSubstitution1.isEmpty());
      assertEquals(10, jSSubstitution1.capacity());
      assertEquals(0, jSSubstitution1.size());
      assertEquals("[]", jSSubstitution1.toString());
      assertFalse(jSSubstitution1.fail());
      assertNotNull(jSSubstitution1);
      assertTrue(jSSubstitution1.equals((Object)jSSubstitution0));
      
      JSSubstitution jSSubstitution2 = new JSSubstitution();
      assertEquals(0, jSSubstitution2.size());
      assertTrue(jSSubstitution2.isEmpty());
      assertFalse(jSSubstitution2.fail());
      assertEquals("[]", jSSubstitution2.toString());
      assertEquals(10, jSSubstitution2.capacity());
      assertNotNull(jSSubstitution2);
      assertTrue(jSSubstitution2.equals((Object)jSSubstitution0));
      assertTrue(jSSubstitution2.equals((Object)jSSubstitution1));
      
      // Undeclared exception!
      try { 
        jSTerm0.matches(jSTerm1, jSSubstitution2);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      assertEquals(0, jSTerm0.size());
      assertFalse(jSTerm0.isEval());
      assertFalse(jSTerm0.isConstant());
      assertFalse(jSTerm0.isVariable());
      assertTrue(jSTerm0.isEmpty());
      assertEquals("[]", jSTerm0.toString());
      assertEquals(10, jSTerm0.capacity());
      assertFalse(jSTerm0.isFunction());
      assertNotNull(jSTerm0);
      
      jSTerm0.makeVariable();
      assertEquals(0, jSTerm0.size());
      assertFalse(jSTerm0.isEval());
      assertFalse(jSTerm0.isConstant());
      assertTrue(jSTerm0.isEmpty());
      assertEquals("[]", jSTerm0.toString());
      assertTrue(jSTerm0.isVariable());
      assertEquals(10, jSTerm0.capacity());
      assertFalse(jSTerm0.isFunction());
      
      StringReader stringReader0 = new StringReader("LR$5E)iTC!%V5}");
      assertNotNull(stringReader0);
      
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      assertEquals("Token[NOTHING], line 1", streamTokenizer0.toString());
      assertEquals(1, streamTokenizer0.lineno());
      assertNotNull(streamTokenizer0);
      assertEquals((-4), streamTokenizer0.ttype);
      assertEquals(0.0, streamTokenizer0.nval, 0.01);
      
      JSTerm jSTerm1 = new JSTerm();
      assertEquals(0, jSTerm1.size());
      assertFalse(jSTerm1.isEval());
      assertFalse(jSTerm1.isFunction());
      assertFalse(jSTerm1.isConstant());
      assertEquals(10, jSTerm1.capacity());
      assertEquals("[]", jSTerm1.toString());
      assertFalse(jSTerm1.isVariable());
      assertTrue(jSTerm1.isEmpty());
      assertNotNull(jSTerm1);
      assertTrue(jSTerm1.equals((Object)jSTerm0));
      
      JSTerm jSTerm2 = jSTerm0.parseList(streamTokenizer0);
      assertEquals(0, jSTerm0.size());
      assertFalse(jSTerm0.isEval());
      assertFalse(jSTerm0.isConstant());
      assertTrue(jSTerm0.isEmpty());
      assertEquals("[]", jSTerm0.toString());
      assertTrue(jSTerm0.isVariable());
      assertEquals(10, jSTerm0.capacity());
      assertFalse(jSTerm0.isFunction());
      assertEquals(1, streamTokenizer0.lineno());
      assertEquals("Token[')'], line 1", streamTokenizer0.toString());
      assertFalse(jSTerm2.isEval());
      assertEquals(10, jSTerm2.capacity());
      assertFalse(jSTerm2.isVariable());
      assertFalse(jSTerm2.isEmpty());
      assertEquals("[., [LR5E], [nil]]", jSTerm2.toString());
      assertTrue(jSTerm2.isFunction());
      assertEquals(3, jSTerm2.size());
      assertFalse(jSTerm2.isConstant());
      assertNotSame(jSTerm0, jSTerm2);
      assertNotSame(jSTerm0, jSTerm1);
      assertNotSame(jSTerm2, jSTerm1);
      assertNotSame(jSTerm2, jSTerm0);
      assertNotNull(jSTerm2);
      assertTrue(jSTerm0.equals((Object)jSTerm1));
      assertFalse(jSTerm2.equals((Object)jSTerm1));
      assertFalse(jSTerm2.equals((Object)jSTerm0));
      assertEquals(41, streamTokenizer0.ttype);
      assertEquals(5.0, streamTokenizer0.nval, 0.01);
  }

  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      assertEquals(0, jSSubstitution0.size());
      assertTrue(jSSubstitution0.isEmpty());
      assertFalse(jSSubstitution0.fail());
      assertEquals("[]", jSSubstitution0.toString());
      assertEquals(10, jSSubstitution0.capacity());
      assertNotNull(jSSubstitution0);
      
      StringReader stringReader0 = new StringReader("jFxA%Rdj8% jSYG> MR");
      assertNotNull(stringReader0);
      
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      assertEquals(1, streamTokenizer0.lineno());
      assertEquals("Token[NOTHING], line 1", streamTokenizer0.toString());
      assertNotNull(streamTokenizer0);
      assertEquals((-4), streamTokenizer0.ttype);
      assertEquals(0.0, streamTokenizer0.nval, 0.01);
      
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      assertEquals("Token[' '], line 1", streamTokenizer0.toString());
      assertEquals(1, streamTokenizer0.lineno());
      assertFalse(jSTerm0.isEmpty());
      assertFalse(jSTerm0.isEval());
      assertFalse(jSTerm0.isVariable());
      assertTrue(jSTerm0.isConstant());
      assertEquals("[jFxA%Rdj8%]", jSTerm0.toString());
      assertEquals(10, jSTerm0.capacity());
      assertEquals(1, jSTerm0.size());
      assertFalse(jSTerm0.isFunction());
      assertNotNull(jSTerm0);
      assertEquals(32, streamTokenizer0.ttype);
      assertEquals(0.0, streamTokenizer0.nval, 0.01);
      
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      assertEquals("[]", jSSubstitution1.toString());
      assertTrue(jSSubstitution1.isEmpty());
      assertEquals(10, jSSubstitution1.capacity());
      assertEquals(0, jSSubstitution1.size());
      assertFalse(jSSubstitution1.fail());
      assertNotNull(jSSubstitution1);
      assertTrue(jSSubstitution1.equals((Object)jSSubstitution0));
      
      JSTerm jSTerm1 = jSSubstitution1.instance(jSTerm0);
      assertEquals("Token[' '], line 1", streamTokenizer0.toString());
      assertEquals(1, streamTokenizer0.lineno());
      assertFalse(jSTerm0.isEmpty());
      assertFalse(jSTerm0.isEval());
      assertFalse(jSTerm0.isVariable());
      assertTrue(jSTerm0.isConstant());
      assertEquals("[jFxA%Rdj8%]", jSTerm0.toString());
      assertEquals(10, jSTerm0.capacity());
      assertEquals(1, jSTerm0.size());
      assertFalse(jSTerm0.isFunction());
      assertEquals("[]", jSSubstitution1.toString());
      assertTrue(jSSubstitution1.isEmpty());
      assertEquals(10, jSSubstitution1.capacity());
      assertEquals(0, jSSubstitution1.size());
      assertFalse(jSSubstitution1.fail());
      assertEquals(10, jSTerm1.capacity());
      assertFalse(jSTerm1.isFunction());
      assertTrue(jSTerm1.isConstant());
      assertFalse(jSTerm1.isVariable());
      assertEquals("[jFxA%Rdj8%]", jSTerm1.toString());
      assertFalse(jSTerm1.isEmpty());
      assertFalse(jSTerm1.isEval());
      assertEquals(1, jSTerm1.size());
      assertSame(jSTerm0, jSTerm1);
      assertNotSame(jSSubstitution1, jSSubstitution0);
      assertSame(jSTerm1, jSTerm0);
      assertNotNull(jSTerm1);
      assertTrue(jSSubstitution1.equals((Object)jSSubstitution0));
      assertEquals(32, streamTokenizer0.ttype);
      assertEquals(0.0, streamTokenizer0.nval, 0.01);
      
      JSSubstitution jSSubstitution2 = (JSSubstitution)jSSubstitution1.clone();
      assertEquals("[]", jSSubstitution1.toString());
      assertTrue(jSSubstitution1.isEmpty());
      assertEquals(10, jSSubstitution1.capacity());
      assertEquals(0, jSSubstitution1.size());
      assertFalse(jSSubstitution1.fail());
      assertEquals("[]", jSSubstitution2.toString());
      assertEquals(0, jSSubstitution2.capacity());
      assertEquals(0, jSSubstitution2.size());
      assertTrue(jSSubstitution2.isEmpty());
      assertFalse(jSSubstitution2.fail());
      assertNotSame(jSSubstitution1, jSSubstitution0);
      assertNotSame(jSSubstitution1, jSSubstitution2);
      assertNotSame(jSSubstitution2, jSSubstitution1);
      assertNotSame(jSSubstitution2, jSSubstitution0);
      assertNotNull(jSSubstitution2);
      assertTrue(jSSubstitution1.equals((Object)jSSubstitution0));
      assertTrue(jSSubstitution2.equals((Object)jSSubstitution1));
      assertTrue(jSSubstitution2.equals((Object)jSSubstitution0));
      
      streamTokenizer0.whitespaceChars(1049, 1049);
      assertEquals("Token[' '], line 1", streamTokenizer0.toString());
      assertEquals(1, streamTokenizer0.lineno());
      assertEquals(32, streamTokenizer0.ttype);
      assertEquals(0.0, streamTokenizer0.nval, 0.01);
      
      JSPredicateForm jSPredicateForm0 = jSTerm1.applySubstitutionPF(jSSubstitution1);
      assertEquals("Token[' '], line 1", streamTokenizer0.toString());
      assertEquals(1, streamTokenizer0.lineno());
      assertFalse(jSTerm0.isEmpty());
      assertFalse(jSTerm0.isEval());
      assertFalse(jSTerm0.isVariable());
      assertTrue(jSTerm0.isConstant());
      assertEquals("[jFxA%Rdj8%]", jSTerm0.toString());
      assertEquals(10, jSTerm0.capacity());
      assertEquals(1, jSTerm0.size());
      assertFalse(jSTerm0.isFunction());
      assertEquals("[]", jSSubstitution1.toString());
      assertTrue(jSSubstitution1.isEmpty());
      assertEquals(10, jSSubstitution1.capacity());
      assertEquals(0, jSSubstitution1.size());
      assertFalse(jSSubstitution1.fail());
      assertEquals(10, jSTerm1.capacity());
      assertFalse(jSTerm1.isFunction());
      assertTrue(jSTerm1.isConstant());
      assertFalse(jSTerm1.isVariable());
      assertEquals("[jFxA%Rdj8%]", jSTerm1.toString());
      assertFalse(jSTerm1.isEmpty());
      assertFalse(jSTerm1.isEval());
      assertEquals(1, jSTerm1.size());
      assertEquals(10, jSPredicateForm0.capacity());
      assertEquals("[jFxA%Rdj8%]", jSPredicateForm0.toString());
      assertEquals(1, jSPredicateForm0.size());
      assertFalse(jSPredicateForm0.isEmpty());
      assertSame(jSTerm0, jSTerm1);
      assertNotSame(jSSubstitution1, jSSubstitution0);
      assertNotSame(jSSubstitution1, jSSubstitution2);
      assertSame(jSTerm1, jSTerm0);
      assertNotNull(jSPredicateForm0);
      assertTrue(jSSubstitution1.equals((Object)jSSubstitution2));
      assertTrue(jSSubstitution1.equals((Object)jSSubstitution0));
      assertEquals(32, streamTokenizer0.ttype);
      assertEquals(0.0, streamTokenizer0.nval, 0.01);
      
      Consumer<Integer> consumer0 = (Consumer<Integer>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      jSTerm0.forEach(consumer0);
      assertEquals("Token[' '], line 1", streamTokenizer0.toString());
      assertEquals(1, streamTokenizer0.lineno());
      assertFalse(jSTerm0.isEmpty());
      assertFalse(jSTerm0.isEval());
      assertFalse(jSTerm0.isVariable());
      assertTrue(jSTerm0.isConstant());
      assertEquals("[jFxA%Rdj8%]", jSTerm0.toString());
      assertEquals(10, jSTerm0.capacity());
      assertEquals(1, jSTerm0.size());
      assertFalse(jSTerm0.isFunction());
      assertSame(jSTerm0, jSTerm1);
      assertEquals(32, streamTokenizer0.ttype);
      assertEquals(0.0, streamTokenizer0.nval, 0.01);
      
      StringReader stringReader1 = new StringReader(";UETu2I");
      assertNotNull(stringReader1);
      assertFalse(stringReader1.equals((Object)stringReader0));
      
      boolean boolean0 = stringReader1.markSupported();
      assertTrue(boolean0);
      assertNotSame(stringReader1, stringReader0);
      assertFalse(stringReader1.equals((Object)stringReader0));
      
      JSTerm jSTerm2 = new JSTerm(streamTokenizer0);
      assertEquals("Token[' '], line 1", streamTokenizer0.toString());
      assertEquals(1, streamTokenizer0.lineno());
      assertFalse(jSTerm2.isVariable());
      assertEquals(10, jSTerm2.capacity());
      assertFalse(jSTerm2.isFunction());
      assertFalse(jSTerm2.isEmpty());
      assertEquals("[jSYG>]", jSTerm2.toString());
      assertTrue(jSTerm2.isConstant());
      assertEquals(1, jSTerm2.size());
      assertFalse(jSTerm2.isEval());
      assertNotNull(jSTerm2);
      assertFalse(stringReader0.equals((Object)stringReader1));
      assertFalse(jSTerm2.equals((Object)jSTerm1));
      assertFalse(jSTerm2.equals((Object)jSTerm0));
      assertEquals(32, streamTokenizer0.ttype);
      assertEquals(0.0, streamTokenizer0.nval, 0.01);
      
      boolean boolean1 = jSTerm1.equals(jSTerm0);
      assertEquals("Token[' '], line 1", streamTokenizer0.toString());
      assertEquals(1, streamTokenizer0.lineno());
      assertFalse(jSTerm0.isEmpty());
      assertFalse(jSTerm0.isEval());
      assertFalse(jSTerm0.isVariable());
      assertTrue(jSTerm0.isConstant());
      assertEquals("[jFxA%Rdj8%]", jSTerm0.toString());
      assertEquals(10, jSTerm0.capacity());
      assertEquals(1, jSTerm0.size());
      assertFalse(jSTerm0.isFunction());
      assertEquals("[]", jSSubstitution1.toString());
      assertTrue(jSSubstitution1.isEmpty());
      assertEquals(10, jSSubstitution1.capacity());
      assertEquals(0, jSSubstitution1.size());
      assertFalse(jSSubstitution1.fail());
      assertEquals(10, jSTerm1.capacity());
      assertFalse(jSTerm1.isFunction());
      assertTrue(jSTerm1.isConstant());
      assertFalse(jSTerm1.isVariable());
      assertEquals("[jFxA%Rdj8%]", jSTerm1.toString());
      assertFalse(jSTerm1.isEmpty());
      assertFalse(jSTerm1.isEval());
      assertEquals(1, jSTerm1.size());
      assertTrue(boolean1);
      assertNotSame(stringReader0, stringReader1);
      assertNotSame(jSTerm0, jSTerm2);
      assertSame(jSTerm0, jSTerm1);
      assertNotSame(jSSubstitution1, jSSubstitution0);
      assertNotSame(jSSubstitution1, jSSubstitution2);
      assertNotSame(jSTerm1, jSTerm2);
      assertSame(jSTerm1, jSTerm0);
      assertFalse(stringReader0.equals((Object)stringReader1));
      assertFalse(jSTerm0.equals((Object)jSTerm2));
      assertTrue(jSSubstitution1.equals((Object)jSSubstitution2));
      assertTrue(jSSubstitution1.equals((Object)jSSubstitution0));
      assertFalse(jSTerm1.equals((Object)jSTerm2));
      assertTrue(boolean1 == boolean0);
      assertEquals(32, streamTokenizer0.ttype);
      assertEquals(0.0, streamTokenizer0.nval, 0.01);
  }

  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      assertTrue(jSTerm0.isEmpty());
      assertFalse(jSTerm0.isEval());
      assertEquals(10, jSTerm0.capacity());
      assertEquals(0, jSTerm0.size());
      assertFalse(jSTerm0.isVariable());
      assertFalse(jSTerm0.isFunction());
      assertEquals("[]", jSTerm0.toString());
      assertFalse(jSTerm0.isConstant());
      assertNotNull(jSTerm0);
      
      boolean boolean0 = jSTerm0.isFunction();
      assertTrue(jSTerm0.isEmpty());
      assertFalse(jSTerm0.isEval());
      assertEquals(10, jSTerm0.capacity());
      assertEquals(0, jSTerm0.size());
      assertFalse(jSTerm0.isVariable());
      assertFalse(jSTerm0.isFunction());
      assertEquals("[]", jSTerm0.toString());
      assertFalse(jSTerm0.isConstant());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      assertEquals(0, jSSubstitution0.size());
      assertEquals(10, jSSubstitution0.capacity());
      assertEquals("[]", jSSubstitution0.toString());
      assertTrue(jSSubstitution0.isEmpty());
      assertFalse(jSSubstitution0.fail());
      assertNotNull(jSSubstitution0);
      
      StringReader stringReader0 = new StringReader("jFxA%Rdj8% jSYG> MR");
      assertNotNull(stringReader0);
      
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      assertEquals(1, streamTokenizer0.lineno());
      assertEquals("Token[NOTHING], line 1", streamTokenizer0.toString());
      assertNotNull(streamTokenizer0);
      assertEquals(0.0, streamTokenizer0.nval, 0.01);
      assertEquals((-4), streamTokenizer0.ttype);
      
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      assertEquals(1, streamTokenizer0.lineno());
      assertEquals("Token[' '], line 1", streamTokenizer0.toString());
      assertFalse(jSTerm0.isEmpty());
      assertFalse(jSTerm0.isVariable());
      assertEquals(1, jSTerm0.size());
      assertFalse(jSTerm0.isEval());
      assertEquals("[jFxA%Rdj8%]", jSTerm0.toString());
      assertTrue(jSTerm0.isConstant());
      assertEquals(10, jSTerm0.capacity());
      assertFalse(jSTerm0.isFunction());
      assertNotNull(jSTerm0);
      assertEquals(32, streamTokenizer0.ttype);
      assertEquals(0.0, streamTokenizer0.nval, 0.01);
      
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      assertFalse(jSSubstitution1.fail());
      assertTrue(jSSubstitution1.isEmpty());
      assertEquals(0, jSSubstitution1.size());
      assertEquals("[]", jSSubstitution1.toString());
      assertEquals(10, jSSubstitution1.capacity());
      assertNotNull(jSSubstitution1);
      assertTrue(jSSubstitution1.equals((Object)jSSubstitution0));
      
      JSTerm jSTerm1 = jSSubstitution1.instance(jSTerm0);
      assertEquals(1, streamTokenizer0.lineno());
      assertEquals("Token[' '], line 1", streamTokenizer0.toString());
      assertFalse(jSTerm0.isEmpty());
      assertFalse(jSTerm0.isVariable());
      assertEquals(1, jSTerm0.size());
      assertFalse(jSTerm0.isEval());
      assertEquals("[jFxA%Rdj8%]", jSTerm0.toString());
      assertTrue(jSTerm0.isConstant());
      assertEquals(10, jSTerm0.capacity());
      assertFalse(jSTerm0.isFunction());
      assertFalse(jSSubstitution1.fail());
      assertTrue(jSSubstitution1.isEmpty());
      assertEquals(0, jSSubstitution1.size());
      assertEquals("[]", jSSubstitution1.toString());
      assertEquals(10, jSSubstitution1.capacity());
      assertTrue(jSTerm1.isConstant());
      assertEquals("[jFxA%Rdj8%]", jSTerm1.toString());
      assertFalse(jSTerm1.isEval());
      assertEquals(1, jSTerm1.size());
      assertEquals(10, jSTerm1.capacity());
      assertFalse(jSTerm1.isVariable());
      assertFalse(jSTerm1.isFunction());
      assertFalse(jSTerm1.isEmpty());
      assertSame(jSTerm0, jSTerm1);
      assertNotSame(jSSubstitution1, jSSubstitution0);
      assertSame(jSTerm1, jSTerm0);
      assertNotNull(jSTerm1);
      assertTrue(jSSubstitution1.equals((Object)jSSubstitution0));
      assertEquals(32, streamTokenizer0.ttype);
      assertEquals(0.0, streamTokenizer0.nval, 0.01);
      
      JSSubstitution jSSubstitution2 = (JSSubstitution)jSSubstitution1.clone();
      assertFalse(jSSubstitution1.fail());
      assertTrue(jSSubstitution1.isEmpty());
      assertEquals(0, jSSubstitution1.size());
      assertEquals("[]", jSSubstitution1.toString());
      assertEquals(10, jSSubstitution1.capacity());
      assertEquals(0, jSSubstitution2.capacity());
      assertTrue(jSSubstitution2.isEmpty());
      assertEquals(0, jSSubstitution2.size());
      assertEquals("[]", jSSubstitution2.toString());
      assertFalse(jSSubstitution2.fail());
      assertNotSame(jSSubstitution1, jSSubstitution2);
      assertNotSame(jSSubstitution1, jSSubstitution0);
      assertNotSame(jSSubstitution2, jSSubstitution1);
      assertNotSame(jSSubstitution2, jSSubstitution0);
      assertNotNull(jSSubstitution2);
      assertTrue(jSSubstitution1.equals((Object)jSSubstitution0));
      assertTrue(jSSubstitution2.equals((Object)jSSubstitution0));
      assertTrue(jSSubstitution2.equals((Object)jSSubstitution1));
      
      streamTokenizer0.whitespaceChars(1049, 1049);
      assertEquals(1, streamTokenizer0.lineno());
      assertEquals("Token[' '], line 1", streamTokenizer0.toString());
      assertEquals(32, streamTokenizer0.ttype);
      assertEquals(0.0, streamTokenizer0.nval, 0.01);
      
      JSPredicateForm jSPredicateForm0 = jSTerm1.applySubstitutionPF(jSSubstitution1);
      assertEquals(1, streamTokenizer0.lineno());
      assertEquals("Token[' '], line 1", streamTokenizer0.toString());
      assertFalse(jSTerm0.isEmpty());
      assertFalse(jSTerm0.isVariable());
      assertEquals(1, jSTerm0.size());
      assertFalse(jSTerm0.isEval());
      assertEquals("[jFxA%Rdj8%]", jSTerm0.toString());
      assertTrue(jSTerm0.isConstant());
      assertEquals(10, jSTerm0.capacity());
      assertFalse(jSTerm0.isFunction());
      assertFalse(jSSubstitution1.fail());
      assertTrue(jSSubstitution1.isEmpty());
      assertEquals(0, jSSubstitution1.size());
      assertEquals("[]", jSSubstitution1.toString());
      assertEquals(10, jSSubstitution1.capacity());
      assertTrue(jSTerm1.isConstant());
      assertEquals("[jFxA%Rdj8%]", jSTerm1.toString());
      assertFalse(jSTerm1.isEval());
      assertEquals(1, jSTerm1.size());
      assertEquals(10, jSTerm1.capacity());
      assertFalse(jSTerm1.isVariable());
      assertFalse(jSTerm1.isFunction());
      assertFalse(jSTerm1.isEmpty());
      assertEquals(1, jSPredicateForm0.size());
      assertFalse(jSPredicateForm0.isEmpty());
      assertEquals(10, jSPredicateForm0.capacity());
      assertEquals("[jFxA%Rdj8%]", jSPredicateForm0.toString());
      assertSame(jSTerm0, jSTerm1);
      assertNotSame(jSSubstitution1, jSSubstitution2);
      assertNotSame(jSSubstitution1, jSSubstitution0);
      assertSame(jSTerm1, jSTerm0);
      assertNotNull(jSPredicateForm0);
      assertTrue(jSSubstitution1.equals((Object)jSSubstitution0));
      assertTrue(jSSubstitution1.equals((Object)jSSubstitution2));
      assertEquals(32, streamTokenizer0.ttype);
      assertEquals(0.0, streamTokenizer0.nval, 0.01);
      
      Consumer<Integer> consumer0 = (Consumer<Integer>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      jSTerm0.forEach(consumer0);
      assertEquals(1, streamTokenizer0.lineno());
      assertEquals("Token[' '], line 1", streamTokenizer0.toString());
      assertFalse(jSTerm0.isEmpty());
      assertFalse(jSTerm0.isVariable());
      assertEquals(1, jSTerm0.size());
      assertFalse(jSTerm0.isEval());
      assertEquals("[jFxA%Rdj8%]", jSTerm0.toString());
      assertTrue(jSTerm0.isConstant());
      assertEquals(10, jSTerm0.capacity());
      assertFalse(jSTerm0.isFunction());
      assertSame(jSTerm0, jSTerm1);
      assertEquals(32, streamTokenizer0.ttype);
      assertEquals(0.0, streamTokenizer0.nval, 0.01);
      
      StringReader stringReader1 = new StringReader(";UETu2I");
      assertNotNull(stringReader1);
      assertFalse(stringReader1.equals((Object)stringReader0));
      
      boolean boolean0 = stringReader1.markSupported();
      assertTrue(boolean0);
      assertNotSame(stringReader1, stringReader0);
      assertFalse(stringReader1.equals((Object)stringReader0));
      
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader0);
      assertEquals(1, streamTokenizer1.lineno());
      assertEquals("Token[NOTHING], line 1", streamTokenizer1.toString());
      assertNotNull(streamTokenizer1);
      assertFalse(stringReader0.equals((Object)stringReader1));
      assertFalse(streamTokenizer1.equals((Object)streamTokenizer0));
      assertEquals(0.0, streamTokenizer1.nval, 0.01);
      assertEquals((-4), streamTokenizer1.ttype);
      
      // Undeclared exception!
      try { 
        jSTerm0.parseList(streamTokenizer1);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      StringReader stringReader0 = new StringReader("jFxA%Rdj8% jSYG> MR");
      assertNotNull(stringReader0);
      
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      assertEquals(1, streamTokenizer0.lineno());
      assertEquals("Token[NOTHING], line 1", streamTokenizer0.toString());
      assertNotNull(streamTokenizer0);
      assertEquals((-4), streamTokenizer0.ttype);
      assertEquals(0.0, streamTokenizer0.nval, 0.01);
      
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      assertEquals("Token[' '], line 1", streamTokenizer0.toString());
      assertEquals(1, streamTokenizer0.lineno());
      assertFalse(jSTerm0.isEmpty());
      assertEquals(10, jSTerm0.capacity());
      assertFalse(jSTerm0.isFunction());
      assertEquals("[jFxA%Rdj8%]", jSTerm0.toString());
      assertFalse(jSTerm0.isEval());
      assertEquals(1, jSTerm0.size());
      assertTrue(jSTerm0.isConstant());
      assertFalse(jSTerm0.isVariable());
      assertNotNull(jSTerm0);
      assertEquals(32, streamTokenizer0.ttype);
      assertEquals(0.0, streamTokenizer0.nval, 0.01);
      
      JSTerm jSTerm1 = new JSTerm(streamTokenizer0);
      assertEquals("Token[' '], line 1", streamTokenizer0.toString());
      assertEquals(1, streamTokenizer0.lineno());
      assertFalse(jSTerm1.isEmpty());
      assertEquals("[jSYG>]", jSTerm1.toString());
      assertFalse(jSTerm1.isEval());
      assertEquals(1, jSTerm1.size());
      assertFalse(jSTerm1.isFunction());
      assertTrue(jSTerm1.isConstant());
      assertEquals(10, jSTerm1.capacity());
      assertFalse(jSTerm1.isVariable());
      assertNotNull(jSTerm1);
      assertFalse(jSTerm1.equals((Object)jSTerm0));
      assertEquals(32, streamTokenizer0.ttype);
      assertEquals(0.0, streamTokenizer0.nval, 0.01);
      
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      assertEquals(10, jSSubstitution0.capacity());
      assertEquals(0, jSSubstitution0.size());
      assertTrue(jSSubstitution0.isEmpty());
      assertFalse(jSSubstitution0.fail());
      assertEquals("[]", jSSubstitution0.toString());
      assertNotNull(jSSubstitution0);
      
      JSTerm jSTerm2 = jSSubstitution0.instance(jSTerm0);
      assertEquals("Token[' '], line 1", streamTokenizer0.toString());
      assertEquals(1, streamTokenizer0.lineno());
      assertFalse(jSTerm0.isEmpty());
      assertEquals(10, jSTerm0.capacity());
      assertFalse(jSTerm0.isFunction());
      assertEquals("[jFxA%Rdj8%]", jSTerm0.toString());
      assertFalse(jSTerm0.isEval());
      assertEquals(1, jSTerm0.size());
      assertTrue(jSTerm0.isConstant());
      assertFalse(jSTerm0.isVariable());
      assertEquals(10, jSSubstitution0.capacity());
      assertEquals(0, jSSubstitution0.size());
      assertTrue(jSSubstitution0.isEmpty());
      assertFalse(jSSubstitution0.fail());
      assertEquals("[]", jSSubstitution0.toString());
      assertFalse(jSTerm2.isVariable());
      assertFalse(jSTerm2.isFunction());
      assertEquals(10, jSTerm2.capacity());
      assertFalse(jSTerm2.isEval());
      assertFalse(jSTerm2.isEmpty());
      assertEquals(1, jSTerm2.size());
      assertEquals("[jFxA%Rdj8%]", jSTerm2.toString());
      assertTrue(jSTerm2.isConstant());
      assertSame(jSTerm0, jSTerm2);
      assertNotSame(jSTerm0, jSTerm1);
      assertNotSame(jSTerm2, jSTerm1);
      assertSame(jSTerm2, jSTerm0);
      assertNotNull(jSTerm2);
      assertFalse(jSTerm0.equals((Object)jSTerm1));
      assertFalse(jSTerm2.equals((Object)jSTerm1));
      assertEquals(32, streamTokenizer0.ttype);
      assertEquals(0.0, streamTokenizer0.nval, 0.01);
      
      JSTerm jSTerm3 = (JSTerm)jSTerm1.clone();
      assertEquals("Token[' '], line 1", streamTokenizer0.toString());
      assertEquals(1, streamTokenizer0.lineno());
      assertFalse(jSTerm1.isEmpty());
      assertEquals("[jSYG>]", jSTerm1.toString());
      assertFalse(jSTerm1.isEval());
      assertEquals(1, jSTerm1.size());
      assertFalse(jSTerm1.isFunction());
      assertTrue(jSTerm1.isConstant());
      assertEquals(10, jSTerm1.capacity());
      assertFalse(jSTerm1.isVariable());
      assertFalse(jSTerm3.isVariable());
      assertFalse(jSTerm3.isFunction());
      assertFalse(jSTerm3.isEval());
      assertEquals(1, jSTerm3.size());
      assertFalse(jSTerm3.isEmpty());
      assertEquals(1, jSTerm3.capacity());
      assertEquals("[jSYG>]", jSTerm3.toString());
      assertTrue(jSTerm3.isConstant());
      assertNotSame(jSTerm1, jSTerm0);
      assertNotSame(jSTerm1, jSTerm3);
      assertNotSame(jSTerm1, jSTerm2);
      assertNotSame(jSTerm3, jSTerm2);
      assertNotSame(jSTerm3, jSTerm1);
      assertNotSame(jSTerm3, jSTerm0);
      assertNotNull(jSTerm3);
      assertFalse(jSTerm1.equals((Object)jSTerm0));
      assertFalse(jSTerm1.equals((Object)jSTerm2));
      assertFalse(jSTerm3.equals((Object)jSTerm2));
      assertTrue(jSTerm3.equals((Object)jSTerm1));
      assertFalse(jSTerm3.equals((Object)jSTerm0));
      assertEquals(32, streamTokenizer0.ttype);
      assertEquals(0.0, streamTokenizer0.nval, 0.01);
      
      Integer integer0 = new Integer((-559));
      assertEquals((-559), (int)integer0);
      assertNotNull(integer0);
      
      boolean boolean0 = jSTerm2.add((Object) integer0);
      assertEquals("Token[' '], line 1", streamTokenizer0.toString());
      assertEquals(1, streamTokenizer0.lineno());
      assertFalse(jSTerm0.isEmpty());
      assertEquals("[jFxA%Rdj8%, -559]", jSTerm0.toString());
      assertEquals(10, jSTerm0.capacity());
      assertFalse(jSTerm0.isFunction());
      assertEquals(2, jSTerm0.size());
      assertFalse(jSTerm0.isEval());
      assertTrue(jSTerm0.isConstant());
      assertFalse(jSTerm0.isVariable());
      assertEquals(10, jSSubstitution0.capacity());
      assertEquals(0, jSSubstitution0.size());
      assertTrue(jSSubstitution0.isEmpty());
      assertFalse(jSSubstitution0.fail());
      assertEquals("[]", jSSubstitution0.toString());
      assertFalse(jSTerm2.isVariable());
      assertFalse(jSTerm2.isFunction());
      assertEquals(10, jSTerm2.capacity());
      assertFalse(jSTerm2.isEval());
      assertFalse(jSTerm2.isEmpty());
      assertEquals(2, jSTerm2.size());
      assertEquals("[jFxA%Rdj8%, -559]", jSTerm2.toString());
      assertTrue(jSTerm2.isConstant());
      assertTrue(boolean0);
      assertSame(jSTerm0, jSTerm2);
      assertNotSame(jSTerm0, jSTerm1);
      assertNotSame(jSTerm0, jSTerm3);
      assertNotSame(jSTerm2, jSTerm1);
      assertNotSame(jSTerm2, jSTerm3);
      assertSame(jSTerm2, jSTerm0);
      assertFalse(jSTerm0.equals((Object)jSTerm1));
      assertFalse(jSTerm0.equals((Object)jSTerm3));
      assertFalse(jSTerm2.equals((Object)jSTerm1));
      assertFalse(jSTerm2.equals((Object)jSTerm3));
      assertEquals(32, streamTokenizer0.ttype);
      assertEquals(0.0, streamTokenizer0.nval, 0.01);
      
      jSTerm1.makeEval(true);
      assertEquals("Token[' '], line 1", streamTokenizer0.toString());
      assertEquals(1, streamTokenizer0.lineno());
      assertFalse(jSTerm1.isEmpty());
      assertEquals("[jSYG>]", jSTerm1.toString());
      assertEquals(1, jSTerm1.size());
      assertFalse(jSTerm1.isFunction());
      assertTrue(jSTerm1.isConstant());
      assertEquals(10, jSTerm1.capacity());
      assertFalse(jSTerm1.isVariable());
      assertTrue(jSTerm1.isEval());
      assertNotSame(jSTerm1, jSTerm0);
      assertNotSame(jSTerm1, jSTerm3);
      assertNotSame(jSTerm1, jSTerm2);
      assertFalse(jSTerm1.equals((Object)jSTerm0));
      assertTrue(jSTerm1.equals((Object)jSTerm3));
      assertFalse(jSTerm1.equals((Object)jSTerm2));
      assertEquals(32, streamTokenizer0.ttype);
      assertEquals(0.0, streamTokenizer0.nval, 0.01);
      
      jSTerm0.makeFunction();
      assertEquals("Token[' '], line 1", streamTokenizer0.toString());
      assertEquals(1, streamTokenizer0.lineno());
      assertFalse(jSTerm0.isEmpty());
      assertTrue(jSTerm0.isFunction());
      assertEquals("[jFxA%Rdj8%, -559]", jSTerm0.toString());
      assertFalse(jSTerm0.isConstant());
      assertEquals(10, jSTerm0.capacity());
      assertEquals(2, jSTerm0.size());
      assertFalse(jSTerm0.isEval());
      assertFalse(jSTerm0.isVariable());
      assertSame(jSTerm0, jSTerm2);
      assertNotSame(jSTerm0, jSTerm1);
      assertNotSame(jSTerm0, jSTerm3);
      assertFalse(jSTerm0.equals((Object)jSTerm1));
      assertFalse(jSTerm0.equals((Object)jSTerm3));
      assertEquals(32, streamTokenizer0.ttype);
      assertEquals(0.0, streamTokenizer0.nval, 0.01);
      
      JSTerm jSTerm4 = jSTerm1.call();
      assertEquals("Token[' '], line 1", streamTokenizer0.toString());
      assertEquals(1, streamTokenizer0.lineno());
      assertFalse(jSTerm1.isEmpty());
      assertEquals("[jSYG>]", jSTerm1.toString());
      assertEquals(1, jSTerm1.size());
      assertFalse(jSTerm1.isFunction());
      assertTrue(jSTerm1.isConstant());
      assertEquals(10, jSTerm1.capacity());
      assertFalse(jSTerm1.isVariable());
      assertTrue(jSTerm1.isEval());
      assertEquals("[jSYG>]", jSTerm4.toString());
      assertFalse(jSTerm4.isEmpty());
      assertFalse(jSTerm4.isVariable());
      assertEquals(1, jSTerm4.size());
      assertTrue(jSTerm4.isConstant());
      assertEquals(1, jSTerm4.capacity());
      assertFalse(jSTerm4.isFunction());
      assertTrue(jSTerm4.isEval());
      assertNotSame(jSTerm1, jSTerm0);
      assertNotSame(jSTerm1, jSTerm4);
      assertNotSame(jSTerm1, jSTerm3);
      assertNotSame(jSTerm1, jSTerm2);
      assertNotSame(jSTerm4, jSTerm1);
      assertNotSame(jSTerm4, jSTerm0);
      assertNotSame(jSTerm4, jSTerm3);
      assertNotSame(jSTerm4, jSTerm2);
      assertNotNull(jSTerm4);
      assertFalse(jSTerm1.equals((Object)jSTerm0));
      assertTrue(jSTerm1.equals((Object)jSTerm3));
      assertFalse(jSTerm1.equals((Object)jSTerm2));
      assertFalse(jSTerm4.equals((Object)jSTerm0));
      assertTrue(jSTerm4.equals((Object)jSTerm3));
      assertTrue(jSTerm4.equals((Object)jSTerm1));
      assertFalse(jSTerm4.equals((Object)jSTerm2));
      assertEquals(32, streamTokenizer0.ttype);
      assertEquals(0.0, streamTokenizer0.nval, 0.01);
      
      streamTokenizer0.pushBack();
      assertEquals("Token[' '], line 1", streamTokenizer0.toString());
      assertEquals(1, streamTokenizer0.lineno());
      assertEquals(32, streamTokenizer0.ttype);
      assertEquals(0.0, streamTokenizer0.nval, 0.01);
      
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      assertEquals("[]", jSSubstitution1.toString());
      assertTrue(jSSubstitution1.isEmpty());
      assertEquals(10, jSSubstitution1.capacity());
      assertFalse(jSSubstitution1.fail());
      assertEquals(0, jSSubstitution1.size());
      assertNotNull(jSSubstitution1);
      assertTrue(jSSubstitution1.equals((Object)jSSubstitution0));
      
      // Undeclared exception!
      try { 
        jSTerm0.applySubstitutionT(jSSubstitution1);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.lang.Integer cannot be cast to umd.cs.shop.JSTerm
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      assertFalse(jSTerm0.isConstant());
      assertEquals(10, jSTerm0.capacity());
      assertFalse(jSTerm0.isEval());
      assertEquals(0, jSTerm0.size());
      assertTrue(jSTerm0.isEmpty());
      assertEquals("[]", jSTerm0.toString());
      assertFalse(jSTerm0.isVariable());
      assertFalse(jSTerm0.isFunction());
      assertNotNull(jSTerm0);
      
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      assertEquals("[]", jSSubstitution0.toString());
      assertFalse(jSSubstitution0.fail());
      assertEquals(10, jSSubstitution0.capacity());
      assertEquals(0, jSSubstitution0.size());
      assertTrue(jSSubstitution0.isEmpty());
      assertNotNull(jSSubstitution0);
      
      boolean boolean0 = jSTerm0.add((Object) jSSubstitution0);
      assertFalse(jSTerm0.isConstant());
      assertEquals("[[]]", jSTerm0.toString());
      assertEquals(10, jSTerm0.capacity());
      assertFalse(jSTerm0.isEval());
      assertFalse(jSTerm0.isEmpty());
      assertEquals(1, jSTerm0.size());
      assertFalse(jSTerm0.isVariable());
      assertFalse(jSTerm0.isFunction());
      assertEquals("[]", jSSubstitution0.toString());
      assertFalse(jSSubstitution0.fail());
      assertEquals(10, jSSubstitution0.capacity());
      assertEquals(0, jSSubstitution0.size());
      assertTrue(jSSubstitution0.isEmpty());
      assertTrue(boolean0);
      
      jSTerm0.makeEval(true);
      assertFalse(jSTerm0.isConstant());
      assertEquals("[[]]", jSTerm0.toString());
      assertEquals(10, jSTerm0.capacity());
      assertFalse(jSTerm0.isEmpty());
      assertEquals(1, jSTerm0.size());
      assertFalse(jSTerm0.isVariable());
      assertFalse(jSTerm0.isFunction());
      assertTrue(jSTerm0.isEval());
      
      jSTerm0.print();
      assertFalse(jSTerm0.isConstant());
      assertEquals("[[]]", jSTerm0.toString());
      assertEquals(10, jSTerm0.capacity());
      assertFalse(jSTerm0.isEmpty());
      assertEquals(1, jSTerm0.size());
      assertFalse(jSTerm0.isVariable());
      assertFalse(jSTerm0.isFunction());
      assertTrue(jSTerm0.isEval());
      
      // Undeclared exception!
      try { 
        jSTerm0.call();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // umd.cs.shop.JSSubstitution cannot be cast to java.lang.String
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      assertEquals(0, jSSubstitution0.size());
      assertEquals(10, jSSubstitution0.capacity());
      assertEquals("[]", jSSubstitution0.toString());
      assertTrue(jSSubstitution0.isEmpty());
      assertFalse(jSSubstitution0.fail());
      assertNotNull(jSSubstitution0);
      
      StringReader stringReader0 = new StringReader("jFxA%Rdj8% jSYG> MR");
      assertNotNull(stringReader0);
      
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      assertEquals(1, streamTokenizer0.lineno());
      assertEquals("Token[NOTHING], line 1", streamTokenizer0.toString());
      assertNotNull(streamTokenizer0);
      assertEquals(0.0, streamTokenizer0.nval, 0.01);
      assertEquals((-4), streamTokenizer0.ttype);
      
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      assertEquals(1, streamTokenizer0.lineno());
      assertEquals("Token[' '], line 1", streamTokenizer0.toString());
      assertFalse(jSTerm0.isEmpty());
      assertEquals(1, jSTerm0.size());
      assertEquals(10, jSTerm0.capacity());
      assertFalse(jSTerm0.isFunction());
      assertEquals("[jFxA%Rdj8%]", jSTerm0.toString());
      assertFalse(jSTerm0.isEval());
      assertTrue(jSTerm0.isConstant());
      assertFalse(jSTerm0.isVariable());
      assertNotNull(jSTerm0);
      assertEquals(0.0, streamTokenizer0.nval, 0.01);
      assertEquals(32, streamTokenizer0.ttype);
      
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      assertEquals(10, jSSubstitution1.capacity());
      assertEquals("[]", jSSubstitution1.toString());
      assertTrue(jSSubstitution1.isEmpty());
      assertEquals(0, jSSubstitution1.size());
      assertFalse(jSSubstitution1.fail());
      assertNotNull(jSSubstitution1);
      assertTrue(jSSubstitution1.equals((Object)jSSubstitution0));
      
      JSTerm jSTerm1 = jSSubstitution1.instance(jSTerm0);
      assertEquals(1, streamTokenizer0.lineno());
      assertEquals("Token[' '], line 1", streamTokenizer0.toString());
      assertFalse(jSTerm0.isEmpty());
      assertEquals(1, jSTerm0.size());
      assertEquals(10, jSTerm0.capacity());
      assertFalse(jSTerm0.isFunction());
      assertEquals("[jFxA%Rdj8%]", jSTerm0.toString());
      assertFalse(jSTerm0.isEval());
      assertTrue(jSTerm0.isConstant());
      assertFalse(jSTerm0.isVariable());
      assertEquals(10, jSSubstitution1.capacity());
      assertEquals("[]", jSSubstitution1.toString());
      assertTrue(jSSubstitution1.isEmpty());
      assertEquals(0, jSSubstitution1.size());
      assertFalse(jSSubstitution1.fail());
      assertFalse(jSTerm1.isEmpty());
      assertTrue(jSTerm1.isConstant());
      assertEquals("[jFxA%Rdj8%]", jSTerm1.toString());
      assertFalse(jSTerm1.isVariable());
      assertFalse(jSTerm1.isFunction());
      assertFalse(jSTerm1.isEval());
      assertEquals(1, jSTerm1.size());
      assertEquals(10, jSTerm1.capacity());
      assertSame(jSTerm0, jSTerm1);
      assertNotSame(jSSubstitution1, jSSubstitution0);
      assertSame(jSTerm1, jSTerm0);
      assertNotNull(jSTerm1);
      assertTrue(jSSubstitution1.equals((Object)jSSubstitution0));
      assertEquals(0.0, streamTokenizer0.nval, 0.01);
      assertEquals(32, streamTokenizer0.ttype);
      
      boolean boolean0 = jSTerm1.add((Object) null);
      assertEquals(1, streamTokenizer0.lineno());
      assertEquals("Token[' '], line 1", streamTokenizer0.toString());
      assertFalse(jSTerm0.isEmpty());
      assertEquals(10, jSTerm0.capacity());
      assertEquals(2, jSTerm0.size());
      assertFalse(jSTerm0.isFunction());
      assertFalse(jSTerm0.isEval());
      assertEquals("[jFxA%Rdj8%, null]", jSTerm0.toString());
      assertTrue(jSTerm0.isConstant());
      assertFalse(jSTerm0.isVariable());
      assertEquals(10, jSSubstitution1.capacity());
      assertEquals("[]", jSSubstitution1.toString());
      assertTrue(jSSubstitution1.isEmpty());
      assertEquals(0, jSSubstitution1.size());
      assertFalse(jSSubstitution1.fail());
      assertEquals("[jFxA%Rdj8%, null]", jSTerm1.toString());
      assertFalse(jSTerm1.isEmpty());
      assertTrue(jSTerm1.isConstant());
      assertFalse(jSTerm1.isVariable());
      assertFalse(jSTerm1.isFunction());
      assertFalse(jSTerm1.isEval());
      assertEquals(10, jSTerm1.capacity());
      assertEquals(2, jSTerm1.size());
      assertTrue(boolean0);
      assertSame(jSTerm0, jSTerm1);
      assertNotSame(jSSubstitution1, jSSubstitution0);
      assertSame(jSTerm1, jSTerm0);
      assertTrue(jSSubstitution1.equals((Object)jSSubstitution0));
      assertEquals(0.0, streamTokenizer0.nval, 0.01);
      assertEquals(32, streamTokenizer0.ttype);
      
      JSSubstitution jSSubstitution2 = (JSSubstitution)jSSubstitution1.clone();
      assertEquals(10, jSSubstitution1.capacity());
      assertEquals("[]", jSSubstitution1.toString());
      assertTrue(jSSubstitution1.isEmpty());
      assertEquals(0, jSSubstitution1.size());
      assertFalse(jSSubstitution1.fail());
      assertEquals("[]", jSSubstitution2.toString());
      assertTrue(jSSubstitution2.isEmpty());
      assertEquals(0, jSSubstitution2.capacity());
      assertFalse(jSSubstitution2.fail());
      assertEquals(0, jSSubstitution2.size());
      assertNotSame(jSSubstitution1, jSSubstitution2);
      assertNotSame(jSSubstitution1, jSSubstitution0);
      assertNotSame(jSSubstitution2, jSSubstitution0);
      assertNotSame(jSSubstitution2, jSSubstitution1);
      assertNotNull(jSSubstitution2);
      assertTrue(jSSubstitution1.equals((Object)jSSubstitution0));
      assertTrue(jSSubstitution2.equals((Object)jSSubstitution1));
      assertTrue(jSSubstitution2.equals((Object)jSSubstitution0));
      
      jSTerm0.makeEval(true);
      assertEquals(1, streamTokenizer0.lineno());
      assertEquals("Token[' '], line 1", streamTokenizer0.toString());
      assertFalse(jSTerm0.isEmpty());
      assertTrue(jSTerm0.isEval());
      assertEquals(10, jSTerm0.capacity());
      assertEquals(2, jSTerm0.size());
      assertFalse(jSTerm0.isFunction());
      assertEquals("[jFxA%Rdj8%, null]", jSTerm0.toString());
      assertTrue(jSTerm0.isConstant());
      assertFalse(jSTerm0.isVariable());
      assertSame(jSTerm0, jSTerm1);
      assertEquals(0.0, streamTokenizer0.nval, 0.01);
      assertEquals(32, streamTokenizer0.ttype);
      
      jSTerm1.makeFunction();
      assertEquals(1, streamTokenizer0.lineno());
      assertEquals("Token[' '], line 1", streamTokenizer0.toString());
      assertFalse(jSTerm0.isConstant());
      assertTrue(jSTerm0.isFunction());
      assertFalse(jSTerm0.isEmpty());
      assertTrue(jSTerm0.isEval());
      assertEquals(10, jSTerm0.capacity());
      assertEquals(2, jSTerm0.size());
      assertEquals("[jFxA%Rdj8%, null]", jSTerm0.toString());
      assertFalse(jSTerm0.isVariable());
      assertEquals(10, jSSubstitution1.capacity());
      assertEquals("[]", jSSubstitution1.toString());
      assertTrue(jSSubstitution1.isEmpty());
      assertEquals(0, jSSubstitution1.size());
      assertFalse(jSSubstitution1.fail());
      assertEquals("[jFxA%Rdj8%, null]", jSTerm1.toString());
      assertFalse(jSTerm1.isEmpty());
      assertTrue(jSTerm1.isEval());
      assertTrue(jSTerm1.isFunction());
      assertFalse(jSTerm1.isVariable());
      assertFalse(jSTerm1.isConstant());
      assertEquals(10, jSTerm1.capacity());
      assertEquals(2, jSTerm1.size());
      assertSame(jSTerm0, jSTerm1);
      assertNotSame(jSSubstitution1, jSSubstitution2);
      assertNotSame(jSSubstitution1, jSSubstitution0);
      assertSame(jSTerm1, jSTerm0);
      assertTrue(jSSubstitution1.equals((Object)jSSubstitution2));
      assertTrue(jSSubstitution1.equals((Object)jSSubstitution0));
      assertEquals(0.0, streamTokenizer0.nval, 0.01);
      assertEquals(32, streamTokenizer0.ttype);
      
      // Undeclared exception!
      try { 
        jSTerm0.isGround();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      assertEquals(0, jSSubstitution0.size());
      assertTrue(jSSubstitution0.isEmpty());
      assertFalse(jSSubstitution0.fail());
      assertEquals("[]", jSSubstitution0.toString());
      assertEquals(10, jSSubstitution0.capacity());
      assertNotNull(jSSubstitution0);
      
      JSTerm jSTerm0 = new JSTerm();
      assertTrue(jSTerm0.isEmpty());
      assertEquals("[]", jSTerm0.toString());
      assertFalse(jSTerm0.isConstant());
      assertFalse(jSTerm0.isEval());
      assertEquals(0, jSTerm0.size());
      assertFalse(jSTerm0.isFunction());
      assertFalse(jSTerm0.isVariable());
      assertEquals(10, jSTerm0.capacity());
      assertNotNull(jSTerm0);
      
      // Undeclared exception!
      try { 
        jSTerm0.parseList((StreamTokenizer) null);
        fail("Expecting exception: System.SystemExitException");
      
      } catch(System.SystemExitException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.System", e);
      }
  }

  @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      jSSubstitution0.add((Object) jSTerm0);
      jSTerm0.makeVariable();
      jSTerm0.add((Object) jSSubstitution0);
      jSTerm0.makeFunction();
      JSTerm jSTerm1 = jSTerm0.call();
      jSTerm1.cloneT();
      // Undeclared exception!
      try { 
        jSTerm0.print();
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test162()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      StringReader stringReader0 = new StringReader("(#");
      StringReader stringReader1 = new StringReader("(#");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader1);
      JSTerm jSTerm1 = null;
      try {
        jSTerm1 = new JSTerm(streamTokenizer0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  @Test(timeout = 4000)
  public void test163()  throws Throwable  {
      StringReader stringReader0 = new StringReader(">");
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.makeConstant();
      jSTerm0.makeEval(false);
      jSTerm0.isConstant();
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      jSTerm0.sort(comparator0);
      jSTerm0.makeEval(true);
      jSTerm0.makeFunction();
      jSTerm0.isGround();
      jSTerm0.makeVariable();
      // Undeclared exception!
      try { 
        jSTerm0.equals((JSTerm) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  @Test(timeout = 4000)
  public void test164()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      jSTerm0.makeVariable();
      jSTerm0.makeVariable();
      JSTerm jSTerm1 = new JSTerm();
      // Undeclared exception!
      try { 
        jSTerm1.matches(jSTerm0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  @Test(timeout = 4000)
  public void test165()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      boolean boolean0 = jSTerm0.isEval();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test166()  throws Throwable  {
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSTerm jSTerm0 = new JSTerm();
      // Undeclared exception!
      try { 
        jSTerm0.matches((JSTerm) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  @Test(timeout = 4000)
  public void test167()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      StringReader stringReader0 = new StringReader("lBA/W3#_PNV");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      // Undeclared exception!
      try { 
        jSTerm0.parseList(streamTokenizer0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  @Test(timeout = 4000)
  public void test168()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      jSTerm0.makeVariable();
      jSTerm0.makeConstant();
      // Undeclared exception!
      try { 
        jSTerm0.toStr();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }
}
