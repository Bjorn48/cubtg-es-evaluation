/*
 * This file was automatically generated by EvoSuite
 * Mon Feb 18 19:43:32 GMT 2019
 */

package org.sat4j.core;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.Comparator;
import java.util.NoSuchElementException;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;
import org.sat4j.core.EmptyVecInt;
import org.sat4j.core.ReadOnlyVecInt;
import org.sat4j.core.VecInt;
import org.sat4j.specs.IVecInt;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class VecInt_ESTest extends VecInt_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      VecInt vecInt0 = new VecInt();
      vecInt0.sortUnique();
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      int[] intArray0 = new int[1];
      intArray0[0] = (-611);
      VecInt vecInt0 = new VecInt(intArray0);
      ReadOnlyVecInt readOnlyVecInt0 = new ReadOnlyVecInt(vecInt0);
      vecInt0.equals(readOnlyVecInt0);
      vecInt0.shrinkTo((-611));
      vecInt0.isEmpty();
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      VecInt vecInt0 = new VecInt();
      int int0 = 1727;
      int int1 = 1;
      EmptyVecInt emptyVecInt0 = (EmptyVecInt)VecInt.EMPTY;
      // Undeclared exception!
      try { 
        vecInt0.copyTo((IVecInt) emptyVecInt0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // org.sat4j.core.EmptyVecInt cannot be cast to org.sat4j.core.VecInt
         //
         verifyException("org.sat4j.core.VecInt", e);
      }
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      VecInt vecInt0 = new VecInt();
      ReadOnlyVecInt readOnlyVecInt0 = new ReadOnlyVecInt(vecInt0);
      vecInt0.clone();
      VecInt vecInt1 = new VecInt(224, 532);
      VecInt vecInt2 = new VecInt(532, 17);
      vecInt2.equals((Object) null);
      vecInt1.iterator();
      vecInt2.contains(17);
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      VecInt vecInt0 = new VecInt(0, 0);
      IVecInt iVecInt0 = vecInt0.push(0);
      vecInt0.moveTo(iVecInt0);
      vecInt0.insertFirst(0);
      vecInt0.insertFirst(0);
      Object object0 = new Object();
      iVecInt0.contains(0);
      Comparator<Integer> comparator0 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      vecInt0.isEmpty();
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      VecInt vecInt0 = new VecInt();
      VecInt vecInt1 = new VecInt(147, 147);
      IVecInt iVecInt0 = vecInt1.pop();
      vecInt0.unsafePush(147);
      iVecInt0.sort();
      vecInt1.iterator();
      vecInt1.sortUnique();
      iVecInt0.iterator();
      vecInt0.moveTo2(iVecInt0);
      vecInt1.sort();
      vecInt0.iterator();
      vecInt1.iterator();
      vecInt1.toArray();
      // Undeclared exception!
      try { 
        vecInt0.moveTo((-1), (-754));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -754
         //
         verifyException("org.sat4j.core.VecInt", e);
      }
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      int int0 = 1;
      VecInt vecInt0 = new VecInt(0, 1);
      // Undeclared exception!
      try { 
        vecInt0.moveTo2((IVecInt) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.core.VecInt", e);
      }
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      VecInt vecInt0 = new VecInt();
      vecInt0.shrinkTo(3165);
      // Undeclared exception!
      try { 
        vecInt0.toString();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 5
         //
         verifyException("org.sat4j.core.VecInt", e);
      }
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      VecInt vecInt0 = new VecInt(955, 955);
      vecInt0.sortUnique();
      vecInt0.subset(955);
      vecInt0.shrinkTo(955);
      EmptyVecInt emptyVecInt0 = new EmptyVecInt();
      vecInt0.indexOf(955);
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      VecInt vecInt0 = new VecInt();
      vecInt0.shrink(143);
      ReadOnlyVecInt readOnlyVecInt0 = new ReadOnlyVecInt(vecInt0);
      vecInt0.equals(readOnlyVecInt0);
      vecInt0.toString();
      // Undeclared exception!
      try { 
        vecInt0.subset((-5275));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      VecInt vecInt0 = new VecInt();
      vecInt0.iterator();
      vecInt0.isSubsetOf(vecInt0);
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      VecInt vecInt0 = new VecInt(2);
      VecInt vecInt1 = new VecInt();
      vecInt1.unsafePush((-1981));
      VecInt vecInt2 = new VecInt(2, 2);
      vecInt2.equals(vecInt0);
      vecInt2.iterator();
      Comparator<Integer> comparator0 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        vecInt0.selectionSort((-390), 1, comparator0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      VecInt vecInt0 = new VecInt();
      // Undeclared exception!
      try { 
        vecInt0.moveTo(1, 1727);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1727
         //
         verifyException("org.sat4j.core.VecInt", e);
      }
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      int[] intArray0 = new int[6];
      intArray0[0] = 0;
      intArray0[1] = 988;
      intArray0[2] = (-2309);
      intArray0[3] = 5;
      intArray0[4] = 5;
      intArray0[5] = 0;
      VecInt vecInt0 = new VecInt(intArray0);
      vecInt0.containsAt(988);
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      int[] intArray0 = new int[5];
      intArray0[0] = 1509;
      intArray0[1] = 3664;
      intArray0[2] = 0;
      intArray0[3] = 831;
      intArray0[4] = 1521;
      VecInt vecInt0 = new VecInt(intArray0);
      Comparator<Integer> comparator0 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      vecInt0.selectionSort(1509, (-1537), comparator0);
      vecInt0.copyTo(intArray0);
      int[] intArray1 = new int[7];
      intArray1[0] = (-378);
      intArray1[1] = 1509;
      intArray1[2] = (-1537);
      intArray1[3] = 1509;
      intArray1[4] = 831;
      intArray1[5] = 3664;
      intArray1[6] = (-378);
      // Undeclared exception!
      try { 
        vecInt0.moveTo((-378), intArray1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      VecInt vecInt0 = new VecInt();
      int[] intArray0 = new int[1];
      intArray0[0] = 5;
      VecInt vecInt1 = new VecInt(intArray0);
      VecInt vecInt2 = new VecInt(147, 147);
      VecInt vecInt3 = new VecInt();
      vecInt3.sort();
      vecInt2.iterator();
      vecInt3.iterator();
      ReadOnlyVecInt readOnlyVecInt0 = new ReadOnlyVecInt(vecInt3);
      vecInt0.equals(vecInt1);
      // Undeclared exception!
      try { 
        vecInt1.moveTo(5, 5);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 5
         //
         verifyException("org.sat4j.core.VecInt", e);
      }
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      VecInt vecInt0 = new VecInt();
      vecInt0.isEmpty();
      // Undeclared exception!
      try { 
        vecInt0.unsafeGet(25);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 25
         //
         verifyException("org.sat4j.core.VecInt", e);
      }
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      VecInt vecInt0 = new VecInt();
      Comparator<Integer> comparator0 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      vecInt0.sort(comparator0);
      vecInt0.containsAt(0, 0);
      vecInt0.insertFirst(1876);
      Comparator<Integer> comparator1 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      vecInt0.sort(0, 0, comparator1);
      VecInt vecInt1 = new VecInt();
      vecInt1.clear();
      vecInt1.push((-1512));
      vecInt1.push(0);
      vecInt1.sort();
      vecInt1.toArray();
      int int0 = 1;
      Comparator<Integer> comparator2 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn(0, 0, 0).when(comparator2).compare(anyInt() , anyInt());
      // Undeclared exception!
      try { 
        vecInt1.selectionSort(1, 131, comparator2);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      VecInt vecInt0 = new VecInt(969, 969);
      vecInt0.sortUnique();
      vecInt0.insertFirst((-5020));
      vecInt0.insertFirst(1295);
      Object object0 = new Object();
      vecInt0.equals("x");
      Comparator<Integer> comparator0 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn(969, (-1), (-673)).when(comparator0).compare(anyInt() , anyInt());
      vecInt0.sort(comparator0);
      // Undeclared exception!
      try { 
        vecInt0.set(1295, 15);
        fail("Expecting exception: AssertionError");
      
      } catch(AssertionError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      int[] intArray0 = new int[1];
      intArray0[0] = (-611);
      VecInt vecInt0 = new VecInt(intArray0);
      ReadOnlyVecInt readOnlyVecInt0 = new ReadOnlyVecInt(vecInt0);
      vecInt0.equals(readOnlyVecInt0);
      vecInt0.shrinkTo((-611));
      // Undeclared exception!
      try { 
        vecInt0.subset(949);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      VecInt vecInt0 = new VecInt();
      vecInt0.toString();
      int int0 = 0;
      vecInt0.toString();
      int int1 = (-1572);
      IVecInt iVecInt0 = vecInt0.push((-1572));
      vecInt0.shrinkTo(0);
      vecInt0.moveTo2(iVecInt0);
      vecInt0.size();
      vecInt0.sort(0, 0);
      VecInt vecInt1 = new VecInt();
      IVecInt iVecInt1 = vecInt1.clone();
      int int2 = 0;
      // Undeclared exception!
      try { 
        iVecInt1.set(0, 0);
        fail("Expecting exception: AssertionError");
      
      } catch(AssertionError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      int int0 = 1;
      VecInt vecInt0 = new VecInt(1, 1);
      int int1 = (-5247);
      vecInt0.shrinkTo((-5247));
      int int2 = 340;
      // Undeclared exception!
      try { 
        vecInt0.delete((-5247));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -5247
         //
         verifyException("org.sat4j.core.VecInt", e);
      }
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      VecInt vecInt0 = new VecInt(144, 0);
      vecInt0.insertFirst(1366);
      vecInt0.insertFirst(2);
      Object object0 = new Object();
      vecInt0.equals(object0);
      Comparator<Integer> comparator0 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn(0, 0, 0, 0, 0).when(comparator0).compare(anyInt() , anyInt());
      vecInt0.sort(comparator0);
      int int0 = 2954;
      vecInt0.set(0, (-1));
      vecInt0.clear();
      vecInt0.isEmpty();
      EmptyVecInt emptyVecInt0 = new EmptyVecInt();
      // Undeclared exception!
      try { 
        emptyVecInt0.pop();
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.core.EmptyVecInt", e);
      }
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      VecInt vecInt0 = new VecInt();
      vecInt0.clone();
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      int[] intArray0 = new int[4];
      intArray0[0] = (-627);
      int int0 = 5;
      intArray0[1] = 5;
      int int1 = 1975;
      intArray0[2] = 1975;
      intArray0[3] = (-1);
      VecInt vecInt0 = new VecInt(intArray0);
      int int2 = 1;
      // Undeclared exception!
      try { 
        vecInt0.set(5, (-627));
        fail("Expecting exception: AssertionError");
      
      } catch(AssertionError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      int[] intArray0 = new int[6];
      intArray0[0] = (-1070);
      intArray0[1] = 1;
      intArray0[2] = (-1007);
      intArray0[3] = (-4847);
      intArray0[4] = 0;
      intArray0[5] = (-1996);
      VecInt vecInt0 = new VecInt(intArray0);
      vecInt0.ensure((-1996));
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      int[] intArray0 = new int[7];
      intArray0[0] = 3890;
      intArray0[1] = 934;
      intArray0[2] = 953;
      intArray0[3] = (-1685);
      intArray0[4] = 914;
      intArray0[5] = 0;
      intArray0[6] = 923;
      VecInt vecInt0 = new VecInt(intArray0);
      vecInt0.unsafeGet(0);
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      int[] intArray0 = new int[0];
      VecInt vecInt0 = new VecInt(intArray0);
      IVecInt iVecInt0 = vecInt0.pop();
      vecInt0.moveTo2(iVecInt0);
      vecInt0.pop();
      vecInt0.sort();
      // Undeclared exception!
      try { 
        vecInt0.clone();
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.core.VecInt", e);
      }
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      VecInt vecInt0 = new VecInt();
      // Undeclared exception!
      try { 
        vecInt0.remove((-137));
        fail("Expecting exception: NoSuchElementException");
      
      } catch(NoSuchElementException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.core.VecInt", e);
      }
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      VecInt vecInt0 = new VecInt();
      VecInt vecInt1 = new VecInt(171, 0);
      vecInt0.iterator();
      VecInt vecInt2 = new VecInt();
      vecInt2.contains(0);
      vecInt0.iterator();
      vecInt0.containsAt(171);
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      VecInt vecInt0 = new VecInt(2);
      VecInt vecInt1 = new VecInt();
      vecInt1.unsafePush((-1981));
      VecInt vecInt2 = new VecInt(2, 2);
      vecInt2.equals(vecInt0);
      vecInt2.iterator();
      vecInt2.contains((-1));
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      VecInt vecInt0 = new VecInt(617);
      int[] intArray0 = new int[9];
      intArray0[0] = 617;
      intArray0[1] = 617;
      vecInt0.selectionSort(617, 240, (Comparator<Integer>) null);
      vecInt0.pop();
      vecInt0.hashCode();
      vecInt0.containsAt(617);
      vecInt0.sort(198, (-1459));
      vecInt0.selectionSort((-1), (-1));
      vecInt0.ensure((-1));
      // Undeclared exception!
      try { 
        vecInt0.delete(1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -2
         //
         verifyException("org.sat4j.core.VecInt", e);
      }
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      int int0 = 15;
      VecInt vecInt0 = new VecInt(15);
      IVecInt iVecInt0 = null;
      // Undeclared exception!
      try { 
        vecInt0.pushAll((IVecInt) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.core.VecInt", e);
      }
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      VecInt vecInt0 = new VecInt();
      vecInt0.unsafePush(1);
      VecInt vecInt1 = new VecInt();
      IVecInt iVecInt0 = vecInt1.push(0);
      Object object0 = new Object();
      vecInt0.equals(iVecInt0);
      Comparator<Integer> comparator0 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      vecInt1.sort(comparator0);
      int int0 = 958;
      // Undeclared exception!
      try { 
        iVecInt0.set(958, 294);
        fail("Expecting exception: AssertionError");
      
      } catch(AssertionError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      VecInt vecInt0 = new VecInt();
      Comparator<Integer> comparator0 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      vecInt0.sort(comparator0);
      int int0 = 0;
      vecInt0.containsAt(0, 0);
      vecInt0.insertFirst(1876);
      IVecInt iVecInt0 = null;
      vecInt0.sortUnique();
      // Undeclared exception!
      try { 
        vecInt0.moveTo2((IVecInt) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.core.VecInt", e);
      }
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      VecInt vecInt0 = new VecInt();
      int int0 = (-2692);
      vecInt0.shrinkTo((-2692));
      // Undeclared exception!
      try { 
        vecInt0.unsafePush(1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -2692
         //
         verifyException("org.sat4j.core.VecInt", e);
      }
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      VecInt vecInt0 = new VecInt();
      vecInt0.contains((-2275));
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      VecInt vecInt0 = new VecInt(0);
      vecInt0.moveTo((IVecInt) vecInt0);
      vecInt0.insertFirst(0);
      vecInt0.insertFirst(0);
      Object object0 = new Object();
      vecInt0.equals(object0);
      Comparator<Integer> comparator0 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(comparator0).compare(anyInt() , anyInt());
      vecInt0.sort(comparator0);
      vecInt0.indexOf(0);
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      VecInt vecInt0 = new VecInt();
      vecInt0.subset(1);
      vecInt0.shrinkTo(1);
      vecInt0.insertFirst(1);
      // Undeclared exception!
      try { 
        vecInt0.moveTo(1, (-158));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -158
         //
         verifyException("org.sat4j.core.VecInt", e);
      }
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      int[] intArray0 = new int[5];
      int int0 = 0;
      intArray0[0] = 0;
      int int1 = 11;
      intArray0[1] = 11;
      intArray0[2] = 0;
      intArray0[3] = (-459);
      intArray0[4] = 0;
      VecInt vecInt0 = new VecInt(intArray0);
      int int2 = 508;
      vecInt0.subset((-459));
      vecInt0.sortUnique();
      int int3 = (-2019);
      Comparator<Integer> comparator0 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        vecInt0.sort((-2019), 11, comparator0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1004
         //
         verifyException("org.sat4j.core.VecInt", e);
      }
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      VecInt vecInt0 = new VecInt(144, 2);
      vecInt0.insertFirst(1366);
      vecInt0.insertFirst(2);
      Object object0 = new Object();
      vecInt0.equals(object0);
      Comparator<Integer> comparator0 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn(1366, 144, 0, (-3228), 144).when(comparator0).compare(anyInt() , anyInt());
      vecInt0.sort(comparator0);
      int int0 = 2954;
      int int1 = (-1);
      // Undeclared exception!
      try { 
        vecInt0.set(2954, 1366);
        fail("Expecting exception: AssertionError");
      
      } catch(AssertionError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      int int0 = 2416;
      VecInt vecInt0 = new VecInt(2416, 2416);
      int[] intArray0 = new int[1];
      intArray0[0] = 2416;
      vecInt0.insertFirst(2416);
      vecInt0.set(2416, 2416);
      VecInt vecInt1 = new VecInt(intArray0);
      vecInt0.moveTo((IVecInt) vecInt1);
      int int1 = 2;
      // Undeclared exception!
      try { 
        vecInt0.set(2, 2);
        fail("Expecting exception: AssertionError");
      
      } catch(AssertionError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      VecInt vecInt0 = null;
      try {
        vecInt0 = new VecInt((int[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.core.VecInt", e);
      }
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      VecInt vecInt0 = new VecInt();
      // Undeclared exception!
      try { 
        vecInt0.delete(2386);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 2386
         //
         verifyException("org.sat4j.core.VecInt", e);
      }
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      int[] intArray0 = new int[1];
      intArray0[0] = (-2611);
      VecInt vecInt0 = new VecInt(intArray0);
      vecInt0.copyTo(intArray0);
      int int0 = (-1);
      vecInt0.contains((-1));
      EmptyVecInt emptyVecInt0 = (EmptyVecInt)VecInt.EMPTY;
      vecInt0.pop();
      IVecInt iVecInt0 = emptyVecInt0.clone();
      // Undeclared exception!
      try { 
        vecInt0.moveTo(iVecInt0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // org.sat4j.core.EmptyVecInt cannot be cast to org.sat4j.core.VecInt
         //
         verifyException("org.sat4j.core.VecInt", e);
      }
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      VecInt vecInt0 = new VecInt(2);
      vecInt0.shrink(2);
      vecInt0.sortUnique();
      vecInt0.growTo((-2174), 0);
      int[] intArray0 = new int[0];
      // Undeclared exception!
      try { 
        vecInt0.moveTo((-1646), intArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      VecInt vecInt0 = new VecInt();
      vecInt0.iterator();
      // Undeclared exception!
      try { 
        vecInt0.hashCode();
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // / by zero
         //
         verifyException("org.sat4j.core.VecInt", e);
      }
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      VecInt vecInt0 = new VecInt();
      vecInt0.unsafePush(1);
      vecInt0.contains(1727);
      vecInt0.toArray();
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      VecInt vecInt0 = new VecInt(147, 147);
      VecInt vecInt1 = new VecInt(147);
      vecInt1.sort();
      vecInt0.sortUnique();
      int int0 = 1441;
      vecInt1.shrinkTo(1441);
      // Undeclared exception!
      try { 
        vecInt1.ensure(841);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      VecInt vecInt0 = new VecInt();
      VecInt vecInt1 = new VecInt(147, 147);
      IVecInt iVecInt0 = vecInt1.pop();
      vecInt0.unsafePush(147);
      iVecInt0.sort();
      vecInt1.iterator();
      VecInt vecInt2 = new VecInt();
      vecInt2.clear();
      VecInt vecInt3 = new VecInt();
      vecInt3.size();
      vecInt2.size();
      vecInt3.iterator();
      vecInt3.pushAll(vecInt0);
      VecInt vecInt4 = new VecInt(0, 0);
      vecInt4.moveTo((IVecInt) vecInt0);
      vecInt3.selectionSort((-1), (-3908));
      vecInt1.hashCode();
      vecInt0.size();
      vecInt0.isEmpty();
      vecInt4.moveTo((IVecInt) vecInt0);
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      int[] intArray0 = new int[1];
      int int0 = (-2611);
      intArray0[0] = (-2611);
      VecInt vecInt0 = new VecInt(intArray0);
      vecInt0.copyTo(intArray0);
      vecInt0.contains((-1));
      EmptyVecInt emptyVecInt0 = (EmptyVecInt)VecInt.EMPTY;
      vecInt0.pop();
      IVecInt iVecInt0 = emptyVecInt0.clone();
      // Undeclared exception!
      try { 
        vecInt0.moveTo(iVecInt0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // org.sat4j.core.EmptyVecInt cannot be cast to org.sat4j.core.VecInt
         //
         verifyException("org.sat4j.core.VecInt", e);
      }
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      VecInt vecInt0 = new VecInt();
      int int0 = vecInt0.indexOf(2621);
      assertEquals((-1), int0);
      
      vecInt0.get(0);
      vecInt0.containsAt((-1), (-1));
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      VecInt vecInt0 = new VecInt();
      vecInt0.push(954);
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      VecInt vecInt0 = new VecInt(144, 0);
      VecInt vecInt1 = new VecInt(1);
      vecInt1.sort();
      vecInt1.iterator();
      VecInt vecInt2 = new VecInt(2, 954);
      vecInt2.sortUnique();
      vecInt0.iterator();
      vecInt1.sort();
      vecInt1.pop();
      vecInt2.iterator();
      vecInt1.toArray();
      vecInt2.toString();
      vecInt0.indexOf(1);
      vecInt2.indexOf((-1304));
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      VecInt vecInt0 = new VecInt();
      vecInt0.ensure((-346));
      Comparator<Integer> comparator0 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      vecInt0.insertFirst(1656);
      vecInt0.shrinkTo(1656);
      vecInt0.set(0, 0);
      vecInt0.isEmpty();
      // Undeclared exception!
      try { 
        vecInt0.selectionSort(589, 1733);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      VecInt vecInt0 = new VecInt();
      vecInt0.unsafePush(0);
      vecInt0.push(0);
      // Undeclared exception!
      try { 
        vecInt0.delete((-1566));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1566
         //
         verifyException("org.sat4j.core.VecInt", e);
      }
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      VecInt vecInt0 = new VecInt();
      ReadOnlyVecInt readOnlyVecInt0 = new ReadOnlyVecInt(vecInt0);
      VecInt vecInt1 = new VecInt();
      vecInt0.equals(readOnlyVecInt0);
      int int0 = (-93);
      vecInt0.shrink((-93));
      VecInt vecInt2 = new VecInt();
      vecInt2.size();
      IVecInt iVecInt0 = vecInt2.clone();
      vecInt2.copyTo(iVecInt0);
      EmptyVecInt emptyVecInt0 = (EmptyVecInt)VecInt.EMPTY;
      EmptyVecInt emptyVecInt1 = (EmptyVecInt)VecInt.EMPTY;
      emptyVecInt1.clone();
      // Undeclared exception!
      try { 
        vecInt0.moveTo((IVecInt) vecInt2);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      int[] intArray0 = new int[1];
      VecInt vecInt0 = new VecInt();
      IVecInt iVecInt0 = vecInt0.push(1141);
      VecInt vecInt1 = (VecInt)vecInt0.push(1141);
      vecInt0.copyTo(iVecInt0);
      vecInt0.clear();
      vecInt0.moveTo(iVecInt0);
      vecInt0.insertFirst(15);
      vecInt0.insertFirst(15);
      Object object0 = new Object();
      vecInt0.equals(vecInt1);
      VecInt vecInt2 = new VecInt(intArray0);
      vecInt1.isSubsetOf(vecInt2);
      vecInt0.toArray();
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      VecInt vecInt0 = new VecInt();
      // Undeclared exception!
      try { 
        vecInt0.moveTo((int[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      VecInt vecInt0 = new VecInt();
      Comparator<Integer> comparator0 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      vecInt0.sort(120, 120, comparator0);
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      VecInt vecInt0 = new VecInt();
      vecInt0.subset(1);
      vecInt0.shrinkTo(1);
      vecInt0.insertFirst(1);
      vecInt0.unsafePush(1);
      vecInt0.iterator();
      vecInt0.sort();
      vecInt0.iterator();
      vecInt0.toArray();
      vecInt0.toString();
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      VecInt vecInt0 = new VecInt();
      Comparator<Integer> comparator0 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        vecInt0.sort(0, 101, comparator0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 50
         //
         verifyException("org.sat4j.core.VecInt", e);
      }
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      VecInt vecInt0 = new VecInt();
      vecInt0.selectionSort(1727, (-2977));
      VecInt vecInt1 = new VecInt();
      int int0 = 0;
      vecInt1.push(0);
      Comparator<Integer> comparator0 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      vecInt1.sort(comparator0);
      int int1 = 0;
      vecInt1.get(0);
      vecInt1.last();
      vecInt1.set(0, 0);
      int int2 = (-2342);
      vecInt1.set(0, (-2342));
      vecInt1.pop();
      vecInt1.pop();
      int int3 = 200;
      // Undeclared exception!
      try { 
        vecInt1.push(200);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("org.sat4j.core.VecInt", e);
      }
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      VecInt vecInt0 = new VecInt();
      int[] intArray0 = new int[6];
      intArray0[0] = 0;
      intArray0[1] = 0;
      intArray0[2] = 3327;
      intArray0[3] = 3327;
      intArray0[4] = 0;
      intArray0[5] = 0;
      vecInt0.moveTo(0, intArray0);
      // Undeclared exception!
      try { 
        vecInt0.moveTo(3327, (-1));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("org.sat4j.core.VecInt", e);
      }
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      VecInt vecInt0 = new VecInt();
      Comparator<Integer> comparator0 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      vecInt0.sort(comparator0);
      int int0 = new Integer(0);
      vecInt0.insertFirst(0);
      vecInt0.sortUnique();
      vecInt0.remove(0);
      int[] intArray0 = new int[16];
      intArray0[0] = 0;
      intArray0[1] = 0;
      intArray0[2] = 0;
      vecInt0.push(2872);
      intArray0[3] = 0;
      intArray0[4] = 0;
      intArray0[5] = 0;
      vecInt0.moveTo(0, intArray0);
      vecInt0.moveTo2(vecInt0);
      vecInt0.get(0);
      vecInt0.containsAt(0, 0);
      // Undeclared exception!
      try { 
        vecInt0.remove(2872);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      int int0 = 5;
      VecInt vecInt0 = new VecInt(0, 5);
      vecInt0.toArray();
      vecInt0.growTo((-2277), 1063);
      int int1 = 1957;
      VecInt vecInt1 = new VecInt(0, 1527);
      vecInt0.pushAll(vecInt1);
      // Undeclared exception!
      try { 
        vecInt0.unsafeGet(1957);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1957
         //
         verifyException("org.sat4j.core.VecInt", e);
      }
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      int[] intArray0 = new int[1];
      intArray0[0] = (-2611);
      VecInt vecInt0 = new VecInt(intArray0);
      vecInt0.shrinkTo((-2611));
      // Undeclared exception!
      try { 
        vecInt0.insertFirst((-2611));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -2611
         //
         verifyException("org.sat4j.core.VecInt", e);
      }
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      int[] intArray0 = new int[6];
      intArray0[0] = 5780;
      int int0 = 0;
      intArray0[1] = 0;
      intArray0[2] = 0;
      intArray0[3] = (-1382);
      intArray0[4] = 149;
      intArray0[5] = 663;
      VecInt vecInt0 = new VecInt(intArray0);
      vecInt0.set(0, 1135);
      vecInt0.clone();
      vecInt0.subset(149);
      // Undeclared exception!
      try { 
        vecInt0.moveTo((IVecInt) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.core.VecInt", e);
      }
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      VecInt vecInt0 = new VecInt();
      vecInt0.subset(1);
      vecInt0.shrinkTo(1);
      vecInt0.insertFirst(1);
      vecInt0.unsafePush(1);
      VecInt vecInt1 = new VecInt();
      vecInt1.moveTo((IVecInt) vecInt0);
      vecInt1.push(0);
      vecInt1.iterator();
      vecInt1.moveTo(0, 0);
      vecInt1.toArray();
      vecInt0.selectionSort(0, 0);
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      VecInt vecInt0 = new VecInt();
      Object object0 = new Object();
      vecInt0.equals(object0);
      vecInt0.subset(1);
      EmptyVecInt emptyVecInt0 = new EmptyVecInt();
      int int0 = (-834);
      vecInt0.shrinkTo((-1));
      // Undeclared exception!
      try { 
        emptyVecInt0.push((-834));
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.core.EmptyVecInt", e);
      }
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      int int0 = 1091;
      VecInt vecInt0 = new VecInt(1091, 1091);
      vecInt0.sortUnique();
      vecInt0.iterator();
      vecInt0.ensure(1304);
      int[] intArray0 = new int[3];
      intArray0[0] = 1091;
      intArray0[1] = 1091;
      intArray0[2] = 1091;
      VecInt vecInt1 = new VecInt(intArray0);
      vecInt0.insertFirst(1304);
      vecInt1.iterator();
      vecInt1.pop();
      vecInt1.shrink(1091);
      // Undeclared exception!
      try { 
        vecInt0.pushAll(vecInt1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      VecInt vecInt0 = new VecInt();
      int int0 = 2621;
      EmptyVecInt emptyVecInt0 = (EmptyVecInt)VecInt.EMPTY;
      // Undeclared exception!
      try { 
        vecInt0.pushAll(emptyVecInt0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // org.sat4j.core.EmptyVecInt cannot be cast to org.sat4j.core.VecInt
         //
         verifyException("org.sat4j.core.VecInt", e);
      }
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      VecInt vecInt0 = new VecInt(969, 969);
      vecInt0.sortUnique();
      vecInt0.isEmpty();
      Comparator<Integer> comparator0 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      vecInt0.selectionSort(969, 969, comparator0);
      Comparator<Integer> comparator1 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      vecInt0.sort((-2069), (-2069), comparator1);
      // Undeclared exception!
      try { 
        vecInt0.delete(969);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 969
         //
         verifyException("org.sat4j.core.VecInt", e);
      }
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      VecInt vecInt0 = new VecInt();
      vecInt0.subset(103);
      int int0 = 2513;
      vecInt0.shrinkTo(2513);
      int int1 = 653;
      // Undeclared exception!
      try { 
        vecInt0.insertFirst(653);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      int[] intArray0 = new int[4];
      intArray0[0] = 0;
      intArray0[1] = 0;
      intArray0[2] = 2750;
      intArray0[3] = 0;
      VecInt vecInt0 = new VecInt(intArray0);
      vecInt0.sort();
      vecInt0.shrinkTo(0);
      VecInt vecInt1 = new VecInt(147, 147);
      IVecInt iVecInt0 = vecInt1.pop();
      iVecInt0.sort();
      vecInt1.iterator();
      iVecInt0.iterator();
      vecInt0.copyTo(iVecInt0);
      vecInt0.growTo(0, (-2297));
      vecInt1.ensure((-2297));
      vecInt0.clone();
      // Undeclared exception!
      try { 
        vecInt0.moveTo(0, 2750);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 2750
         //
         verifyException("org.sat4j.core.VecInt", e);
      }
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      VecInt vecInt0 = new VecInt();
      vecInt0.contains((-2414));
      // Undeclared exception!
      try { 
        vecInt0.containsAt((-358), (-2414));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -2413
         //
         verifyException("org.sat4j.core.VecInt", e);
      }
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      VecInt vecInt0 = new VecInt(0);
      vecInt0.insertFirst(0);
      vecInt0.insertFirst(0);
      Object object0 = new Object();
      vecInt0.equals(object0);
      vecInt0.clone();
      Comparator<Integer> comparator0 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn((-3981)).when(comparator0).compare(anyInt() , anyInt());
      vecInt0.sort(comparator0);
      int int0 = 2954;
      // Undeclared exception!
      try { 
        vecInt0.set(136, 136);
        fail("Expecting exception: AssertionError");
      
      } catch(AssertionError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      VecInt vecInt0 = new VecInt();
      vecInt0.iterator();
      // Undeclared exception!
      try { 
        vecInt0.get(852);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      VecInt vecInt0 = new VecInt();
      vecInt0.isEmpty();
      vecInt0.toArray();
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      VecInt vecInt0 = new VecInt(955, 955);
      vecInt0.sortUnique();
      vecInt0.subset(6);
      vecInt0.subset(955);
      vecInt0.shrinkTo(955);
      EmptyVecInt emptyVecInt0 = new EmptyVecInt();
      vecInt0.equals((Object) null);
      vecInt0.last();
      vecInt0.last();
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      int[] intArray0 = new int[1];
      intArray0[0] = 0;
      VecInt vecInt0 = new VecInt(intArray0);
      vecInt0.sortUnique();
      vecInt0.set(0, 0);
      vecInt0.last();
      vecInt0.sortUnique();
      vecInt0.moveTo(0, intArray0);
      int int0 = 109;
      vecInt0.iterator();
      vecInt0.moveTo(intArray0);
      vecInt0.iterator();
      int int1 = 1;
      vecInt0.growTo(1, 109);
      // Undeclared exception!
      try { 
        vecInt0.get(109);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      VecInt vecInt0 = new VecInt();
      int int0 = 0;
      IVecInt iVecInt0 = vecInt0.clone();
      Comparator<Integer> comparator0 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      vecInt0.sort(comparator0);
      vecInt0.copyTo(iVecInt0);
      // Undeclared exception!
      try { 
        vecInt0.moveTo((-439), (int[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      VecInt vecInt0 = new VecInt();
      vecInt0.unsafePush(1);
      VecInt vecInt1 = new VecInt();
      VecInt vecInt2 = (VecInt)vecInt1.push(0);
      vecInt0.insertFirst((-1136));
      vecInt1.unsafePush(1);
      vecInt0.remove(1);
      vecInt1.ensure((-1136));
      VecInt vecInt3 = new VecInt();
      vecInt3.isSubsetOf(vecInt2);
      vecInt0.subset(1);
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      VecInt vecInt0 = new VecInt();
      int int0 = (-2560);
      // Undeclared exception!
      try { 
        vecInt0.remove((-2560));
        fail("Expecting exception: NoSuchElementException");
      
      } catch(NoSuchElementException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.core.VecInt", e);
      }
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      VecInt vecInt0 = new VecInt(2498, 2498);
      vecInt0.toString();
      vecInt0.clear();
      // Undeclared exception!
      try { 
        vecInt0.moveTo((int[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      VecInt vecInt0 = new VecInt();
      VecInt vecInt1 = new VecInt(147, 147);
      IVecInt iVecInt0 = vecInt1.pop();
      vecInt0.unsafePush(147);
      iVecInt0.sort();
      vecInt1.iterator();
      vecInt1.sortUnique();
      vecInt1.shrink(570);
      // Undeclared exception!
      try { 
        vecInt1.delete(0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -570
         //
         verifyException("org.sat4j.core.VecInt", e);
      }
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      VecInt vecInt0 = new VecInt();
      Comparator<Integer> comparator0 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      vecInt0.sort(comparator0);
      vecInt0.shrinkTo(1005);
      // Undeclared exception!
      try { 
        vecInt0.clone();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      VecInt vecInt0 = new VecInt(353);
      EmptyVecInt emptyVecInt0 = new EmptyVecInt();
      int int0 = (-834);
      // Undeclared exception!
      try { 
        emptyVecInt0.push((-834));
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.core.EmptyVecInt", e);
      }
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      VecInt vecInt0 = new VecInt();
      VecInt vecInt1 = new VecInt();
      vecInt0.moveTo((IVecInt) vecInt1);
      // Undeclared exception!
      try { 
        vecInt0.remove((-975));
        fail("Expecting exception: NoSuchElementException");
      
      } catch(NoSuchElementException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.core.VecInt", e);
      }
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      int[] intArray0 = new int[1];
      intArray0[0] = (-637);
      VecInt vecInt0 = new VecInt(intArray0);
      vecInt0.ensure((-637));
      VecInt vecInt1 = new VecInt();
      vecInt1.push(0);
      vecInt1.isEmpty();
      vecInt0.isSubsetOf(vecInt1);
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      VecInt vecInt0 = null;
      try {
        vecInt0 = new VecInt((-2241));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.core.VecInt", e);
      }
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      VecInt vecInt0 = new VecInt();
      vecInt0.insertFirst(30);
      vecInt0.subset(30);
      vecInt0.indexOf(30);
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      VecInt vecInt0 = new VecInt(117);
      IVecInt iVecInt0 = vecInt0.push(117);
      vecInt0.moveTo(iVecInt0);
      vecInt0.insertFirst((-23));
      vecInt0.insertFirst(117);
      Object object0 = new Object();
      iVecInt0.contains(117);
      Comparator<Integer> comparator0 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn(117).when(comparator0).compare(anyInt() , anyInt());
      vecInt0.sort(comparator0);
      vecInt0.isEmpty();
      iVecInt0.last();
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      Object object0 = new Object();
      VecInt vecInt0 = new VecInt(121);
      VecInt vecInt1 = new VecInt();
      vecInt1.growTo(104, (-166));
      vecInt1.equals(vecInt0);
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      VecInt vecInt0 = new VecInt();
      vecInt0.unsafePush(1);
      VecInt vecInt1 = new VecInt();
      IVecInt iVecInt0 = vecInt1.push(0);
      vecInt1.copyTo(iVecInt0);
      vecInt1.clear();
      vecInt1.clear();
      vecInt1.clear();
      vecInt1.clear();
      vecInt1.push(0);
      vecInt1.clear();
      vecInt1.clear();
      EmptyVecInt emptyVecInt0 = new EmptyVecInt();
      vecInt0.isSubsetOf(vecInt1);
      // Undeclared exception!
      try { 
        vecInt0.get(959);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      VecInt vecInt0 = new VecInt();
      vecInt0.subset(1);
      vecInt0.shrinkTo(1);
      vecInt0.insertFirst(1);
      vecInt0.sortUnique();
      vecInt0.unsafePush(1);
      vecInt0.remove(1);
      vecInt0.ensure(2);
      VecInt vecInt1 = new VecInt();
      Comparator<Integer> comparator0 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        vecInt1.selectionSort((-1771), 1, comparator0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      VecInt vecInt0 = new VecInt(0);
      vecInt0.insertFirst(0);
      vecInt0.insertFirst(0);
      Object object0 = new Object();
      vecInt0.equals(object0);
      Comparator<Integer> comparator0 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(comparator0).compare(anyInt() , anyInt());
      vecInt0.sort(comparator0);
      int int0 = 2954;
      // Undeclared exception!
      try { 
        vecInt0.set(124, 124);
        fail("Expecting exception: AssertionError");
      
      } catch(AssertionError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      VecInt vecInt0 = new VecInt();
      vecInt0.subset(1);
      vecInt0.iterator();
      vecInt0.contains(1);
      vecInt0.unsafeGet(1);
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      VecInt vecInt0 = new VecInt();
      // Undeclared exception!
      try { 
        vecInt0.moveTo2((IVecInt) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.core.VecInt", e);
      }
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      int int0 = 147;
      VecInt vecInt0 = new VecInt(147, 147);
      VecInt vecInt1 = new VecInt(147);
      vecInt1.sort();
      vecInt0.containsAt(147);
      // Undeclared exception!
      try { 
        vecInt1.sort(147, 822);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 484
         //
         verifyException("org.sat4j.core.VecInt", e);
      }
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      VecInt vecInt0 = new VecInt(1, 0);
      vecInt0.iterator();
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      int[] intArray0 = new int[1];
      VecInt vecInt0 = new VecInt(intArray0);
      ReadOnlyVecInt readOnlyVecInt0 = new ReadOnlyVecInt((IVecInt) null);
      // Undeclared exception!
      try { 
        vecInt0.set((-4017), (-2048));
        fail("Expecting exception: AssertionError");
      
      } catch(AssertionError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      VecInt vecInt0 = new VecInt(5);
      vecInt0.isEmpty();
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      VecInt vecInt0 = new VecInt(955, 955);
      vecInt0.sortUnique();
      vecInt0.isEmpty();
      Comparator<Integer> comparator0 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      vecInt0.selectionSort(955, 955, comparator0);
      vecInt0.subset(0);
      vecInt0.sort(2, (-21));
      VecInt vecInt1 = (VecInt)vecInt0.push((-21));
      vecInt1.equals("");
      vecInt0.isEmpty();
      vecInt0.subset(2);
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      int[] intArray0 = new int[1];
      intArray0[0] = (-637);
      VecInt vecInt0 = new VecInt(intArray0);
      ReadOnlyVecInt readOnlyVecInt0 = new ReadOnlyVecInt(vecInt0);
      vecInt0.isSubsetOf(vecInt0);
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      int int0 = 2578;
      VecInt vecInt0 = new VecInt(2578);
      vecInt0.shrink((-68));
      int int1 = 1666;
      int int2 = 2005;
      vecInt0.shrink(2005);
      // Undeclared exception!
      try { 
        vecInt0.growTo(1666, 2005);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      int[] intArray0 = new int[1];
      intArray0[0] = (-611);
      VecInt vecInt0 = new VecInt(intArray0);
      vecInt0.toString();
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      VecInt vecInt0 = new VecInt();
      vecInt0.toString();
      vecInt0.subset(2474);
      vecInt0.growTo(1902, 0);
      vecInt0.insertFirst(1902);
      vecInt0.containsAt(807);
      vecInt0.set(807, 0);
      Comparator<Integer> comparator0 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      vecInt0.sort(807, 58, comparator0);
      int[] intArray0 = new int[1];
      intArray0[0] = 1830;
      // Undeclared exception!
      try { 
        vecInt0.moveTo(807, intArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      VecInt vecInt0 = new VecInt(122, 122);
      VecInt vecInt1 = new VecInt(122, 122);
      int[] intArray0 = new int[3];
      intArray0[0] = 122;
      intArray0[1] = 122;
      intArray0[2] = 122;
      // Undeclared exception!
      try { 
        vecInt0.moveTo(intArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      VecInt vecInt0 = new VecInt();
      VecInt vecInt1 = new VecInt();
      vecInt1.subset(30);
      vecInt1.shrinkTo(30);
      EmptyVecInt emptyVecInt0 = new EmptyVecInt();
      // Undeclared exception!
      try { 
        vecInt1.indexOf(30);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      VecInt vecInt0 = new VecInt(1178);
      int[] intArray0 = new int[7];
      intArray0[0] = 1178;
      intArray0[1] = 0;
      intArray0[2] = 1178;
      intArray0[3] = 1178;
      intArray0[4] = 1178;
      intArray0[5] = 1178;
      intArray0[6] = 1178;
      vecInt0.moveTo(intArray0);
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      VecInt vecInt0 = new VecInt();
      vecInt0.subset((-2171));
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      VecInt vecInt0 = new VecInt();
      // Undeclared exception!
      try { 
        vecInt0.set(130, 5071);
        fail("Expecting exception: AssertionError");
      
      } catch(AssertionError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      VecInt vecInt0 = new VecInt();
      vecInt0.insertFirst(1);
      vecInt0.subset(1);
      vecInt0.indexOf(1);
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      VecInt vecInt0 = new VecInt();
      vecInt0.iterator();
      vecInt0.sort();
      vecInt0.iterator();
      vecInt0.toArray();
      vecInt0.toString();
      VecInt vecInt1 = new VecInt();
      vecInt1.clear();
      EmptyVecInt emptyVecInt0 = new EmptyVecInt();
      vecInt1.push(0);
      vecInt1.sort();
      vecInt1.toArray();
      vecInt1.indexOf(0);
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      VecInt vecInt0 = new VecInt();
      VecInt vecInt1 = new VecInt();
      int int0 = (-93);
      vecInt0.shrink((-93));
      // Undeclared exception!
      try { 
        vecInt0.sort((-26), 18);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -4
         //
         verifyException("org.sat4j.core.VecInt", e);
      }
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      VecInt vecInt0 = new VecInt();
      vecInt0.subset(15);
      int[] intArray0 = new int[16];
      intArray0[0] = 15;
      vecInt0.copyTo(intArray0);
      // Undeclared exception!
      try { 
        vecInt0.moveTo(15, 15);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 15
         //
         verifyException("org.sat4j.core.VecInt", e);
      }
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      int[] intArray0 = new int[1];
      VecInt vecInt0 = new VecInt(intArray0);
      ReadOnlyVecInt readOnlyVecInt0 = new ReadOnlyVecInt(vecInt0);
      VecInt vecInt1 = new VecInt();
      VecInt vecInt2 = new VecInt();
      vecInt0.isSubsetOf(vecInt2);
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      VecInt vecInt0 = new VecInt();
      vecInt0.unsafePush(1);
      vecInt0.isEmpty();
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      VecInt vecInt0 = new VecInt(0, 0);
      vecInt0.iterator();
      vecInt0.isSubsetOf((VecInt) null);
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      int int0 = 92;
      VecInt vecInt0 = new VecInt(92);
      vecInt0.pop();
      vecInt0.sort();
      // Undeclared exception!
      try { 
        vecInt0.unsafeGet(281);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 281
         //
         verifyException("org.sat4j.core.VecInt", e);
      }
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      int[] intArray0 = new int[1];
      VecInt vecInt0 = new VecInt(intArray0);
      ReadOnlyVecInt readOnlyVecInt0 = new ReadOnlyVecInt(vecInt0);
      vecInt0.isSubsetOf(vecInt0);
      vecInt0.equals(readOnlyVecInt0);
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      int int0 = (-3072);
      VecInt vecInt0 = null;
      try {
        vecInt0 = new VecInt((-3072), (-3072));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.core.VecInt", e);
      }
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      VecInt vecInt0 = new VecInt();
      VecInt vecInt1 = new VecInt(147, 147);
      vecInt1.clone();
      int[] intArray0 = new int[9];
      intArray0[0] = 147;
      intArray0[1] = 147;
      intArray0[2] = (-1);
      intArray0[3] = 140;
      intArray0[4] = 147;
      intArray0[5] = 147;
      intArray0[6] = 147;
      intArray0[7] = 147;
      intArray0[8] = 147;
      VecInt vecInt2 = new VecInt(intArray0);
      EmptyVecInt emptyVecInt0 = (EmptyVecInt)VecInt.EMPTY;
      vecInt2.equals(emptyVecInt0);
      vecInt2.shrink(147);
      // Undeclared exception!
      try { 
        vecInt0.delete(143);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 143
         //
         verifyException("org.sat4j.core.VecInt", e);
      }
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      VecInt vecInt0 = new VecInt();
      ReadOnlyVecInt readOnlyVecInt0 = new ReadOnlyVecInt(vecInt0);
      vecInt0.clone();
      vecInt0.equals(readOnlyVecInt0);
      vecInt0.shrink((-93));
      // Undeclared exception!
      try { 
        vecInt0.delete((-1138));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1138
         //
         verifyException("org.sat4j.core.VecInt", e);
      }
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      VecInt vecInt0 = new VecInt(279);
      VecInt vecInt1 = new VecInt();
      IVecInt iVecInt0 = vecInt1.clone();
      int int0 = 0;
      // Undeclared exception!
      try { 
        iVecInt0.set(0, 0);
        fail("Expecting exception: AssertionError");
      
      } catch(AssertionError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      VecInt vecInt0 = new VecInt(2);
      VecInt vecInt1 = new VecInt();
      vecInt1.unsafePush((-1981));
      VecInt vecInt2 = new VecInt(2, 2);
      vecInt0.sortUnique();
      int[] intArray0 = new int[1];
      intArray0[0] = (-1981);
      // Undeclared exception!
      try { 
        vecInt0.moveTo(2, intArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      VecInt vecInt0 = new VecInt();
      vecInt0.clear();
      Comparator<Integer> comparator0 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      vecInt0.sort(comparator0);
      vecInt0.pop();
      // Undeclared exception!
      try { 
        vecInt0.remove(598);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 5
         //
         verifyException("org.sat4j.core.VecInt", e);
      }
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      Object object0 = new Object();
      int[] intArray0 = new int[2];
      intArray0[0] = 121;
      VecInt vecInt0 = new VecInt(intArray0);
      vecInt0.equals(object0);
      vecInt0.toString();
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      VecInt vecInt0 = new VecInt(0);
      IVecInt iVecInt0 = vecInt0.push(0);
      int[] intArray0 = new int[9];
      intArray0[0] = 0;
      intArray0[1] = 0;
      intArray0[2] = 0;
      intArray0[3] = 0;
      intArray0[4] = 0;
      intArray0[5] = 0;
      intArray0[6] = 0;
      intArray0[7] = 0;
      intArray0[8] = 0;
      VecInt vecInt1 = new VecInt(intArray0);
      ReadOnlyVecInt readOnlyVecInt0 = new ReadOnlyVecInt(vecInt1);
      vecInt0.isSubsetOf(vecInt1);
      vecInt0.delete(0);
      VecInt vecInt2 = new VecInt(0);
      iVecInt0.contains(0);
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      VecInt vecInt0 = new VecInt();
      Integer integer0 = new Integer((-1));
      vecInt0.equals(integer0);
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      VecInt vecInt0 = new VecInt();
      vecInt0.subset(1);
      int[] intArray0 = new int[1];
      intArray0[0] = 1;
      vecInt0.copyTo(intArray0);
      vecInt0.contains(0);
      EmptyVecInt emptyVecInt0 = (EmptyVecInt)VecInt.EMPTY;
      VecInt vecInt1 = (VecInt)vecInt0.pop();
      vecInt1.hashCode();
      vecInt0.size();
      vecInt1.shrink((-1));
      vecInt1.isEmpty();
      // Undeclared exception!
      try { 
        vecInt0.moveTo((IVecInt) emptyVecInt0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // org.sat4j.core.EmptyVecInt cannot be cast to org.sat4j.core.VecInt
         //
         verifyException("org.sat4j.core.VecInt", e);
      }
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      VecInt vecInt0 = new VecInt(617);
      vecInt0.shrinkTo((-3882));
      // Undeclared exception!
      try { 
        vecInt0.subset(617);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      VecInt vecInt0 = new VecInt();
      VecInt vecInt1 = new VecInt(2413, 1);
      vecInt0.equals(vecInt1);
      Comparator<Integer> comparator0 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn(2413, (-221), (-2728), 1, (-832)).when(comparator0).compare(anyInt() , anyInt());
      // Undeclared exception!
      try { 
        vecInt1.sort(comparator0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 2413
         //
         verifyException("org.sat4j.core.VecInt", e);
      }
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      VecInt vecInt0 = new VecInt(144, 0);
      vecInt0.insertFirst(384);
      vecInt0.insertFirst(1);
      Object object0 = new Object();
      vecInt0.equals(object0);
      // Undeclared exception!
      try { 
        vecInt0.sort((Comparator<Integer>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.core.VecInt", e);
      }
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      VecInt vecInt0 = new VecInt();
      vecInt0.pop();
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      VecInt vecInt0 = new VecInt(955, 955);
      vecInt0.insertFirst(0);
      vecInt0.insertFirst(3394);
      Object object0 = new Object();
      vecInt0.equals(object0);
      Comparator<Integer> comparator0 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn(0, 0, 0, 0, 0).when(comparator0).compare(anyInt() , anyInt());
      vecInt0.sort(comparator0);
      vecInt0.indexOf(15);
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      VecInt vecInt0 = new VecInt();
      vecInt0.subset(2725);
      Comparator<Integer> comparator0 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        vecInt0.sort(915, 917, comparator0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      VecInt vecInt0 = new VecInt();
      ReadOnlyVecInt readOnlyVecInt0 = new ReadOnlyVecInt(vecInt0);
      IVecInt iVecInt0 = vecInt0.clone();
      vecInt0.equals(readOnlyVecInt0);
      vecInt0.iterator();
      iVecInt0.moveTo2(vecInt0);
      vecInt0.sort();
      VecInt vecInt1 = new VecInt();
      // Undeclared exception!
      try { 
        vecInt1.copyTo((IVecInt) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.core.VecInt", e);
      }
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      VecInt vecInt0 = new VecInt();
      // Undeclared exception!
      try { 
        vecInt0.set((-349), (-836));
        fail("Expecting exception: AssertionError");
      
      } catch(AssertionError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      VecInt vecInt0 = new VecInt();
      EmptyVecInt emptyVecInt0 = new EmptyVecInt();
      vecInt0.equals(emptyVecInt0);
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      int[] intArray0 = new int[1];
      VecInt vecInt0 = new VecInt();
      IVecInt iVecInt0 = vecInt0.push(1141);
      IVecInt iVecInt1 = vecInt0.push(1141);
      vecInt0.copyTo(iVecInt0);
      vecInt0.clear();
      vecInt0.moveTo(iVecInt0);
      vecInt0.insertFirst(15);
      vecInt0.insertFirst(15);
      Object object0 = new Object();
      vecInt0.equals(iVecInt1);
      VecInt vecInt1 = new VecInt(intArray0);
      vecInt0.isSubsetOf(vecInt1);
      // Undeclared exception!
      try { 
        vecInt0.get(557);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      int[] intArray0 = new int[9];
      intArray0[0] = 253;
      intArray0[1] = 1565;
      intArray0[2] = 1353;
      intArray0[3] = 2397;
      intArray0[4] = (-323);
      intArray0[5] = (-2400);
      intArray0[6] = 1371;
      intArray0[7] = 2952;
      intArray0[8] = 0;
      VecInt vecInt0 = new VecInt(intArray0);
      vecInt0.remove((-2400));
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      VecInt vecInt0 = new VecInt();
      assertTrue(vecInt0.isEmpty());
      assertEquals(0, vecInt0.size());
      assertNotNull(vecInt0);
      
      // Undeclared exception!
      try { 
        vecInt0.last();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("org.sat4j.core.VecInt", e);
      }
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      VecInt vecInt0 = new VecInt(144, 0);
      VecInt vecInt1 = new VecInt(1);
      vecInt1.sort();
      vecInt1.pushAll(vecInt0);
      vecInt1.iterator();
      VecInt vecInt2 = new VecInt(2, 954);
      vecInt2.sortUnique();
      vecInt0.iterator();
      vecInt1.sort();
      vecInt2.iterator();
      vecInt1.toArray();
      assertEquals(144, vecInt1.size());
      
      vecInt2.toString();
      int int0 = vecInt0.indexOf(1);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      VecInt vecInt0 = new VecInt(5);
      vecInt0.shrinkTo(5);
      vecInt0.isEmpty();
      vecInt0.push(5);
      assertEquals(6, vecInt0.size());
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      int[] intArray0 = new int[6];
      intArray0[0] = 0;
      intArray0[1] = (-2790);
      intArray0[2] = (-1);
      intArray0[3] = (-2544);
      intArray0[4] = 4108;
      intArray0[5] = 0;
      VecInt vecInt0 = new VecInt(intArray0);
      int int0 = vecInt0.get(0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      int[] intArray0 = new int[7];
      intArray0[0] = 1861;
      intArray0[1] = (-814);
      intArray0[2] = 355;
      intArray0[3] = 3119;
      int int0 = 1350;
      intArray0[4] = 1350;
      intArray0[5] = 0;
      int int1 = 419;
      intArray0[6] = 419;
      VecInt vecInt0 = new VecInt(intArray0);
      IVecInt iVecInt0 = vecInt0.pop();
      vecInt0.pushAll(iVecInt0);
      int int2 = (-1);
      // Undeclared exception!
      try { 
        vecInt0.growTo(2723, 355);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      int[] intArray0 = new int[0];
      VecInt vecInt0 = new VecInt(intArray0);
      vecInt0.sortUnique();
      assertEquals(0, vecInt0.size());
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      VecInt vecInt0 = new VecInt();
      Comparator<Integer> comparator0 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      vecInt0.sort(comparator0);
      // Undeclared exception!
      try { 
        vecInt0.last();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("org.sat4j.core.VecInt", e);
      }
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      int[] intArray0 = new int[1];
      VecInt vecInt0 = new VecInt(intArray0);
      // Undeclared exception!
      try { 
        vecInt0.growTo(443, 443);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      VecInt vecInt0 = new VecInt();
      vecInt0.clear();
      vecInt0.get(1);
      assertEquals(0, vecInt0.size());
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      int[] intArray0 = new int[8];
      intArray0[0] = (-1);
      intArray0[1] = (-1116);
      intArray0[2] = 0;
      intArray0[3] = (-1103);
      intArray0[4] = 0;
      intArray0[5] = 0;
      intArray0[6] = (-1);
      intArray0[7] = 613;
      VecInt vecInt0 = new VecInt(intArray0);
      // Undeclared exception!
      try { 
        vecInt0.containsAt(3798, (-1014));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1013
         //
         verifyException("org.sat4j.core.VecInt", e);
      }
  }

  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      int int0 = 0;
      VecInt vecInt0 = new VecInt(144, 0);
      vecInt0.insertFirst(1366);
      vecInt0.insertFirst(2);
      Object object0 = new Object();
      vecInt0.equals(object0);
      Comparator<Integer> comparator0 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn(930, 2, (-1774), (-1774), (-1072)).when(comparator0).compare(anyInt() , anyInt());
      // Undeclared exception!
      try { 
        vecInt0.sort(comparator0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 288
         //
         verifyException("org.sat4j.core.VecInt", e);
      }
  }

  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      VecInt vecInt0 = new VecInt(0);
      vecInt0.insertFirst(0);
      vecInt0.insertFirst(0);
      Object object0 = new Object();
      vecInt0.equals(object0);
      Comparator<Integer> comparator0 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn(15).when(comparator0).compare(anyInt() , anyInt());
      vecInt0.sort(comparator0);
      int int0 = 2954;
      // Undeclared exception!
      try { 
        vecInt0.set(124, 124);
        fail("Expecting exception: AssertionError");
      
      } catch(AssertionError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      VecInt vecInt0 = new VecInt(515, 515);
      vecInt0.clone();
      // Undeclared exception!
      try { 
        vecInt0.isSubsetOf((VecInt) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.core.VecInt", e);
      }
  }

  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      VecInt vecInt0 = new VecInt(0, 2);
      vecInt0.shrink(2646);
      assertEquals((-2646), vecInt0.size());
  }

  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      VecInt vecInt0 = new VecInt(955, 955);
      int int0 = vecInt0.indexOf(1826);
      assertEquals(955, vecInt0.last());
      assertEquals((-1), int0);
      assertEquals(955, vecInt0.size());
  }

  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      VecInt vecInt0 = new VecInt(0, (-1852));
      assertEquals(0, vecInt0.size());
  }

  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      VecInt vecInt0 = new VecInt();
      int int0 = 0;
      vecInt0.push(0);
      int int1 = (-1249);
      int int2 = (-2686);
      int int3 = (-1);
      Comparator<Integer> comparator0 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        vecInt0.sort((-2686), (-1), comparator0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1344
         //
         verifyException("org.sat4j.core.VecInt", e);
      }
  }

  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      VecInt vecInt0 = new VecInt();
      vecInt0.toString();
      vecInt0.iterator();
      vecInt0.clone();
      vecInt0.clear();
      vecInt0.clear();
      int int0 = (-1);
      Comparator<Integer> comparator0 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      vecInt0.selectionSort((-1), (-1), comparator0);
      vecInt0.pop();
      vecInt0.hashCode();
      int int1 = 15;
      vecInt0.containsAt(15);
      int int2 = 822;
      // Undeclared exception!
      try { 
        vecInt0.sort(15, 822);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 418
         //
         verifyException("org.sat4j.core.VecInt", e);
      }
  }

  @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      VecInt vecInt0 = new VecInt(2);
      VecInt vecInt1 = new VecInt();
      vecInt0.push(2);
      vecInt0.pop();
      vecInt0.pushAll(vecInt1);
      vecInt0.moveTo((IVecInt) vecInt1);
      vecInt0.selectionSort(2, 2);
      // Undeclared exception!
      try { 
        vecInt0.hashCode();
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // / by zero
         //
         verifyException("org.sat4j.core.VecInt", e);
      }
  }

  @Test(timeout = 4000)
  public void test162()  throws Throwable  {
      int int0 = 0;
      int int1 = (-1256);
      VecInt vecInt0 = new VecInt(0, (-1256));
      int int2 = (-484);
      vecInt0.insertFirst(0);
      // Undeclared exception!
      try { 
        vecInt0.unsafePush((-484));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1
         //
         verifyException("org.sat4j.core.VecInt", e);
      }
  }

  @Test(timeout = 4000)
  public void test163()  throws Throwable  {
      int[] intArray0 = new int[1];
      intArray0[0] = (-611);
      VecInt vecInt0 = new VecInt(intArray0);
      ReadOnlyVecInt readOnlyVecInt0 = new ReadOnlyVecInt(vecInt0);
      vecInt0.set(0, 0);
      assertArrayEquals(new int[] {0}, intArray0);
      assertEquals(0, vecInt0.last());
  }

  @Test(timeout = 4000)
  public void test164()  throws Throwable  {
      VecInt vecInt0 = new VecInt();
      vecInt0.sort();
      assertEquals(0, vecInt0.size());
  }
}
