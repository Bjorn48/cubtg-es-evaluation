/*
 * This file was automatically generated by EvoSuite
 * Sun Feb 17 08:02:57 GMT 2019
 */

package org.sat4j.tools;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.PipedOutputStream;
import java.io.PrintStream;
import java.io.PrintWriter;
import java.lang.reflect.Array;
import java.util.List;
import java.util.Map;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.junit.runner.RunWith;
import org.sat4j.LightFactory;
import org.sat4j.core.ASolverFactory;
import org.sat4j.core.Vec;
import org.sat4j.core.VecInt;
import org.sat4j.minisat.constraints.CardinalityDataStructureYanMin;
import org.sat4j.minisat.constraints.cnf.LearntBinaryClause;
import org.sat4j.minisat.core.ILits;
import org.sat4j.minisat.core.Solver;
import org.sat4j.opt.MaxSatDecorator;
import org.sat4j.specs.IConstr;
import org.sat4j.specs.ISolver;
import org.sat4j.specs.IVecInt;
import org.sat4j.tools.AbstractMinimalModel;
import org.sat4j.tools.DimacsOutputSolver;
import org.sat4j.tools.DimacsStringSolver;
import org.sat4j.tools.GateTranslator;
import org.sat4j.tools.LexicoDecorator;
import org.sat4j.tools.ManyCore;
import org.sat4j.tools.Minimal4CardinalityModel;
import org.sat4j.tools.Minimal4InclusionModel;
import org.sat4j.tools.ModelIterator;
import org.sat4j.tools.ModelIteratorToSATAdapter;
import org.sat4j.tools.NegationDecorator;
import org.sat4j.tools.OptToSatAdapter;
import org.sat4j.tools.SingleSolutionDetector;
import org.sat4j.tools.SolutionCounter;
import org.sat4j.tools.SolutionFoundListener;
import org.sat4j.tools.StatisticsSolver;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class ManyCore_ESTest extends ManyCore_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      String[] stringArray0 = new String[0];
      SingleSolutionDetector[] singleSolutionDetectorArray0 = new SingleSolutionDetector[0];
      ManyCore<SingleSolutionDetector> manyCore0 = new ManyCore<SingleSolutionDetector>(true, stringArray0, singleSolutionDetectorArray0);
      assertEquals(0, stringArray0.length);
      assertEquals(0, singleSolutionDetectorArray0.length);
      assertNotNull(manyCore0);
      
      ASolverFactory<ManyCore<SingleSolutionDetector>> aSolverFactory0 = (ASolverFactory<ManyCore<SingleSolutionDetector>>) mock(ASolverFactory.class, new ViolatedAssumptionAnswer());
      doReturn(manyCore0, (ISolver) null).when(aSolverFactory0).createSolverByName(anyString());
      String[] stringArray1 = new String[3];
      assertFalse(stringArray1.equals((Object)stringArray0));
      
      stringArray1[0] = "";
      stringArray1[1] = "~94r6)$*#8pt9{&B6";
      stringArray1[2] = "s>>>>>>>>>> Solver number %d (%d answers) <<<<<<<<<<<<<<<<<<%n";
      ManyCore<ManyCore<SingleSolutionDetector>> manyCore1 = null;
      try {
        manyCore1 = new ManyCore<ManyCore<SingleSolutionDetector>>(aSolverFactory0, false, stringArray1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.tools.ManyCore", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      String[] stringArray0 = new String[1];
      ModelIterator[] modelIteratorArray0 = new ModelIterator[2];
      ISolver iSolver0 = mock(ISolver.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(iSolver0).nextFreeVarId(anyBoolean());
      ModelIterator modelIterator0 = new ModelIterator(iSolver0);
      assertNotNull(modelIterator0);
      assertEquals(0L, modelIterator0.numberOfModelsFoundSoFar());
      
      modelIteratorArray0[0] = modelIterator0;
      ISolver iSolver1 = mock(ISolver.class, new ViolatedAssumptionAnswer());
      doReturn(2).when(iSolver1).nextFreeVarId(anyBoolean());
      ModelIterator modelIterator1 = new ModelIterator(iSolver1);
      assertNotNull(modelIterator1);
      assertEquals(0L, modelIterator1.numberOfModelsFoundSoFar());
      assertFalse(modelIterator1.equals((Object)modelIterator0));
      
      modelIteratorArray0[1] = modelIterator1;
      ManyCore<ModelIterator> manyCore0 = new ManyCore<ModelIterator>(true, stringArray0, modelIteratorArray0);
      assertEquals(1, stringArray0.length);
      assertEquals(2, modelIteratorArray0.length);
      assertNotNull(manyCore0);
      
      int int0 = manyCore0.nextFreeVarId(true);
      assertEquals(1, stringArray0.length);
      assertEquals(2, modelIteratorArray0.length);
      assertEquals(2, int0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      DimacsStringSolver dimacsStringSolver0 = new DimacsStringSolver();
      assertNotNull(dimacsStringSolver0);
      assertEquals(0, dimacsStringSolver0.realNumberOfVariables());
      assertEquals(0, dimacsStringSolver0.nConstraints());
      assertEquals(0, dimacsStringSolver0.nVars());
      assertEquals(0L, dimacsStringSolver0.getTimeoutMs());
      assertFalse(dimacsStringSolver0.isDBSimplificationAllowed());
      assertFalse(dimacsStringSolver0.isVerbose());
      assertFalse(dimacsStringSolver0.isSolverKeptHot());
      assertEquals(0, dimacsStringSolver0.newVar());
      assertEquals("", dimacsStringSolver0.getLogPrefix());
      assertEquals(0, dimacsStringSolver0.getTimeout());
      
      String[] stringArray0 = new String[1];
      DimacsStringSolver[] dimacsStringSolverArray0 = new DimacsStringSolver[2];
      dimacsStringSolverArray0[0] = dimacsStringSolver0;
      dimacsStringSolverArray0[1] = dimacsStringSolver0;
      ManyCore<DimacsStringSolver> manyCore0 = new ManyCore<DimacsStringSolver>(stringArray0, dimacsStringSolverArray0);
      assertEquals(1, stringArray0.length);
      assertEquals(2, dimacsStringSolverArray0.length);
      assertNotNull(manyCore0);
      
      boolean boolean0 = manyCore0.isSolverKeptHot();
      assertEquals(1, stringArray0.length);
      assertEquals(2, dimacsStringSolverArray0.length);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      DimacsStringSolver dimacsStringSolver0 = new DimacsStringSolver();
      assertNotNull(dimacsStringSolver0);
      assertEquals(0, dimacsStringSolver0.nConstraints());
      assertEquals(0, dimacsStringSolver0.getTimeout());
      assertFalse(dimacsStringSolver0.isDBSimplificationAllowed());
      assertEquals(0, dimacsStringSolver0.nVars());
      assertEquals("", dimacsStringSolver0.getLogPrefix());
      assertEquals(0, dimacsStringSolver0.newVar());
      assertFalse(dimacsStringSolver0.isSolverKeptHot());
      assertEquals(0L, dimacsStringSolver0.getTimeoutMs());
      assertEquals(0, dimacsStringSolver0.realNumberOfVariables());
      assertFalse(dimacsStringSolver0.isVerbose());
      
      ASolverFactory<DimacsStringSolver> aSolverFactory0 = (ASolverFactory<DimacsStringSolver>) mock(ASolverFactory.class, new ViolatedAssumptionAnswer());
      doReturn(dimacsStringSolver0).when(aSolverFactory0).createSolverByName(anyString());
      String[] stringArray0 = new String[1];
      stringArray0[0] = "]  ";
      ManyCore<DimacsStringSolver> manyCore0 = new ManyCore<DimacsStringSolver>(aSolverFactory0, stringArray0);
      assertEquals(1, stringArray0.length);
      assertNotNull(manyCore0);
      assertEquals(0, dimacsStringSolver0.nConstraints());
      assertEquals(0, dimacsStringSolver0.getTimeout());
      assertFalse(dimacsStringSolver0.isDBSimplificationAllowed());
      assertEquals(0, dimacsStringSolver0.nVars());
      assertEquals("", dimacsStringSolver0.getLogPrefix());
      assertEquals(0, dimacsStringSolver0.newVar());
      assertFalse(dimacsStringSolver0.isSolverKeptHot());
      assertEquals(0L, dimacsStringSolver0.getTimeoutMs());
      assertEquals(0, dimacsStringSolver0.realNumberOfVariables());
      assertFalse(dimacsStringSolver0.isVerbose());
      
      boolean boolean0 = manyCore0.isDBSimplificationAllowed();
      assertEquals(1, stringArray0.length);
      assertEquals(0, dimacsStringSolver0.nConstraints());
      assertEquals(0, dimacsStringSolver0.getTimeout());
      assertFalse(dimacsStringSolver0.isDBSimplificationAllowed());
      assertEquals(0, dimacsStringSolver0.nVars());
      assertEquals("", dimacsStringSolver0.getLogPrefix());
      assertEquals(0, dimacsStringSolver0.newVar());
      assertFalse(dimacsStringSolver0.isSolverKeptHot());
      assertEquals(0L, dimacsStringSolver0.getTimeoutMs());
      assertEquals(0, dimacsStringSolver0.realNumberOfVariables());
      assertFalse(dimacsStringSolver0.isVerbose());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      SolutionCounter[] solutionCounterArray0 = new SolutionCounter[3];
      ISolver iSolver0 = mock(ISolver.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(iSolver0).isSatisfiable(anyBoolean());
      doReturn((IConstr) null).when(iSolver0).addClause(any(org.sat4j.specs.IVecInt.class));
      doReturn((Map) null).when(iSolver0).getStat();
      SolutionCounter solutionCounter0 = new SolutionCounter(iSolver0);
      assertNotNull(solutionCounter0);
      assertEquals(0, solutionCounter0.lowerBound());
      
      IVecInt iVecInt0 = mock(IVecInt.class, new ViolatedAssumptionAnswer());
      IConstr iConstr0 = solutionCounter0.addClause(iVecInt0);
      assertNull(iConstr0);
      assertEquals(0, solutionCounter0.lowerBound());
      
      solutionCounter0.setTimeout(0);
      assertEquals(0, solutionCounter0.lowerBound());
      
      long long0 = solutionCounter0.countSolutions();
      assertEquals(0, solutionCounter0.lowerBound());
      assertEquals(0L, long0);
      
      int int0 = solutionCounter0.lowerBound();
      assertEquals(0, solutionCounter0.lowerBound());
      assertEquals(0, int0);
      
      solutionCounterArray0[0] = solutionCounter0;
      ISolver iSolver1 = mock(ISolver.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(iSolver1).isSatisfiable(anyBoolean());
      doReturn((IConstr) null).when(iSolver1).addClause(any(org.sat4j.specs.IVecInt.class));
      SolutionCounter solutionCounter1 = new SolutionCounter(iSolver1);
      assertNotNull(solutionCounter1);
      assertEquals(0, solutionCounter1.lowerBound());
      assertFalse(solutionCounter1.equals((Object)solutionCounter0));
      
      IVecInt iVecInt1 = mock(IVecInt.class, new ViolatedAssumptionAnswer());
      IConstr iConstr1 = solutionCounter1.addClause(iVecInt1);
      assertNull(iConstr1);
      assertEquals(0, solutionCounter1.lowerBound());
      assertFalse(solutionCounter1.equals((Object)solutionCounter0));
      assertNotSame(solutionCounter1, solutionCounter0);
      
      solutionCounter1.setTimeout(521);
      assertEquals(0, solutionCounter1.lowerBound());
      assertFalse(solutionCounter1.equals((Object)solutionCounter0));
      assertNotSame(solutionCounter1, solutionCounter0);
      
      long long1 = solutionCounter1.countSolutions();
      assertEquals(0, solutionCounter1.lowerBound());
      assertFalse(solutionCounter1.equals((Object)solutionCounter0));
      assertTrue(long1 == long0);
      assertNotSame(solutionCounter1, solutionCounter0);
      assertEquals(0L, long1);
      
      solutionCounterArray0[1] = solutionCounter1;
      ISolver iSolver2 = mock(ISolver.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(iSolver2).isSatisfiable(anyBoolean());
      doReturn((IConstr) null).when(iSolver2).addClause(any(org.sat4j.specs.IVecInt.class));
      SolutionCounter solutionCounter2 = new SolutionCounter(iSolver2);
      assertNotNull(solutionCounter2);
      assertEquals(0, solutionCounter2.lowerBound());
      assertFalse(solutionCounter2.equals((Object)solutionCounter0));
      assertFalse(solutionCounter2.equals((Object)solutionCounter1));
      
      IVecInt iVecInt2 = mock(IVecInt.class, new ViolatedAssumptionAnswer());
      IConstr iConstr2 = solutionCounter2.addClause(iVecInt2);
      assertNull(iConstr2);
      assertEquals(0, solutionCounter2.lowerBound());
      assertFalse(solutionCounter2.equals((Object)solutionCounter0));
      assertFalse(solutionCounter2.equals((Object)solutionCounter1));
      assertNotSame(solutionCounter2, solutionCounter0);
      assertNotSame(solutionCounter2, solutionCounter1);
      
      solutionCounter2.setTimeout(1729);
      assertEquals(0, solutionCounter2.lowerBound());
      assertFalse(solutionCounter2.equals((Object)solutionCounter0));
      assertFalse(solutionCounter2.equals((Object)solutionCounter1));
      assertNotSame(solutionCounter2, solutionCounter0);
      assertNotSame(solutionCounter2, solutionCounter1);
      
      long long2 = solutionCounter2.countSolutions();
      assertEquals(0, solutionCounter2.lowerBound());
      assertFalse(solutionCounter2.equals((Object)solutionCounter0));
      assertFalse(solutionCounter2.equals((Object)solutionCounter1));
      assertTrue(long2 == long1);
      assertTrue(long2 == long0);
      assertNotSame(solutionCounter2, solutionCounter0);
      assertNotSame(solutionCounter2, solutionCounter1);
      assertEquals(0L, long2);
      
      solutionCounterArray0[2] = solutionCounter2;
      ManyCore<SolutionCounter> manyCore0 = new ManyCore<SolutionCounter>(solutionCounterArray0);
      assertEquals(3, solutionCounterArray0.length);
      assertNotNull(manyCore0);
      
      Map<String, Number> map0 = manyCore0.getStat();
      assertEquals(3, solutionCounterArray0.length);
      assertNull(map0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      DimacsStringSolver dimacsStringSolver0 = new DimacsStringSolver();
      assertNotNull(dimacsStringSolver0);
      assertEquals(0, dimacsStringSolver0.realNumberOfVariables());
      assertEquals(0, dimacsStringSolver0.getTimeout());
      assertEquals(0, dimacsStringSolver0.nConstraints());
      assertFalse(dimacsStringSolver0.isDBSimplificationAllowed());
      assertFalse(dimacsStringSolver0.isVerbose());
      assertFalse(dimacsStringSolver0.isSolverKeptHot());
      assertEquals(0L, dimacsStringSolver0.getTimeoutMs());
      assertEquals("", dimacsStringSolver0.getLogPrefix());
      assertEquals(0, dimacsStringSolver0.nVars());
      assertEquals(0, dimacsStringSolver0.newVar());
      
      ASolverFactory<DimacsStringSolver> aSolverFactory0 = (ASolverFactory<DimacsStringSolver>) mock(ASolverFactory.class, new ViolatedAssumptionAnswer());
      doReturn(dimacsStringSolver0).when(aSolverFactory0).createSolverByName(anyString());
      String[] stringArray0 = new String[1];
      stringArray0[0] = "]  ";
      ManyCore<DimacsStringSolver> manyCore0 = new ManyCore<DimacsStringSolver>(aSolverFactory0, stringArray0);
      assertEquals(1, stringArray0.length);
      assertNotNull(manyCore0);
      assertEquals(0, dimacsStringSolver0.realNumberOfVariables());
      assertEquals(0, dimacsStringSolver0.getTimeout());
      assertEquals(0, dimacsStringSolver0.nConstraints());
      assertFalse(dimacsStringSolver0.isDBSimplificationAllowed());
      assertFalse(dimacsStringSolver0.isVerbose());
      assertFalse(dimacsStringSolver0.isSolverKeptHot());
      assertEquals(0L, dimacsStringSolver0.getTimeoutMs());
      assertEquals("", dimacsStringSolver0.getLogPrefix());
      assertEquals(0, dimacsStringSolver0.nVars());
      assertEquals(0, dimacsStringSolver0.newVar());
      
      // Undeclared exception!
      try { 
        manyCore0.primeImplicant((-377));
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.tools.DimacsStringSolver", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      String[] stringArray0 = new String[0];
      ASolverFactory<MaxSatDecorator> aSolverFactory0 = (ASolverFactory<MaxSatDecorator>) mock(ASolverFactory.class, new ViolatedAssumptionAnswer());
      ManyCore<MaxSatDecorator> manyCore0 = new ManyCore<MaxSatDecorator>(aSolverFactory0, false, stringArray0);
      assertEquals(0, stringArray0.length);
      assertNotNull(manyCore0);
      
      // Undeclared exception!
      try { 
        manyCore0.nVars();
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      DimacsStringSolver dimacsStringSolver0 = new DimacsStringSolver();
      assertNotNull(dimacsStringSolver0);
      assertFalse(dimacsStringSolver0.isDBSimplificationAllowed());
      assertFalse(dimacsStringSolver0.isVerbose());
      assertFalse(dimacsStringSolver0.isSolverKeptHot());
      assertEquals("", dimacsStringSolver0.getLogPrefix());
      assertEquals(0, dimacsStringSolver0.newVar());
      assertEquals(0, dimacsStringSolver0.nConstraints());
      assertEquals(0, dimacsStringSolver0.getTimeout());
      assertEquals(0, dimacsStringSolver0.realNumberOfVariables());
      assertEquals(0, dimacsStringSolver0.nVars());
      assertEquals(0L, dimacsStringSolver0.getTimeoutMs());
      
      ASolverFactory<DimacsStringSolver> aSolverFactory0 = (ASolverFactory<DimacsStringSolver>) mock(ASolverFactory.class, new ViolatedAssumptionAnswer());
      doReturn(dimacsStringSolver0).when(aSolverFactory0).createSolverByName(anyString());
      String[] stringArray0 = new String[1];
      stringArray0[0] = "]  ";
      ManyCore<DimacsStringSolver> manyCore0 = new ManyCore<DimacsStringSolver>(aSolverFactory0, stringArray0);
      assertEquals(1, stringArray0.length);
      assertNotNull(manyCore0);
      assertFalse(dimacsStringSolver0.isDBSimplificationAllowed());
      assertFalse(dimacsStringSolver0.isVerbose());
      assertFalse(dimacsStringSolver0.isSolverKeptHot());
      assertEquals("", dimacsStringSolver0.getLogPrefix());
      assertEquals(0, dimacsStringSolver0.newVar());
      assertEquals(0, dimacsStringSolver0.nConstraints());
      assertEquals(0, dimacsStringSolver0.getTimeout());
      assertEquals(0, dimacsStringSolver0.realNumberOfVariables());
      assertEquals(0, dimacsStringSolver0.nVars());
      assertEquals(0L, dimacsStringSolver0.getTimeoutMs());
      
      // Undeclared exception!
      try { 
        manyCore0.modelWithInternalVariables();
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.tools.DimacsStringSolver", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      String[] stringArray0 = new String[0];
      ManyCore<OptToSatAdapter> manyCore0 = new ManyCore<OptToSatAdapter>((ASolverFactory<OptToSatAdapter>) null, stringArray0);
      assertEquals(0, stringArray0.length);
      assertNotNull(manyCore0);
      
      try { 
        manyCore0.findModel();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.tools.ManyCore", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      StatisticsSolver[] statisticsSolverArray0 = new StatisticsSolver[1];
      StatisticsSolver statisticsSolver0 = new StatisticsSolver();
      assertNotNull(statisticsSolver0);
      assertEquals(0, statisticsSolver0.nVars());
      assertEquals(0, statisticsSolver0.nConstraints());
      assertEquals(0, statisticsSolver0.realNumberOfVariables());
      
      statisticsSolverArray0[0] = statisticsSolver0;
      ManyCore<StatisticsSolver> manyCore0 = null;
      try {
        manyCore0 = new ManyCore<StatisticsSolver>(statisticsSolverArray0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Not implemented yet!
         //
         verifyException("org.sat4j.tools.StatisticsSolver", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      String[] stringArray0 = new String[1];
      StatisticsSolver[] statisticsSolverArray0 = new StatisticsSolver[5];
      StatisticsSolver statisticsSolver0 = new StatisticsSolver();
      assertNotNull(statisticsSolver0);
      assertEquals(0, statisticsSolver0.nConstraints());
      assertEquals(0, statisticsSolver0.realNumberOfVariables());
      assertEquals(0, statisticsSolver0.nVars());
      
      statisticsSolverArray0[0] = statisticsSolver0;
      ManyCore<StatisticsSolver> manyCore0 = null;
      try {
        manyCore0 = new ManyCore<StatisticsSolver>(stringArray0, statisticsSolverArray0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Not implemented yet!
         //
         verifyException("org.sat4j.tools.StatisticsSolver", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      DimacsStringSolver[] dimacsStringSolverArray0 = new DimacsStringSolver[6];
      ManyCore<DimacsStringSolver> manyCore0 = null;
      try {
        manyCore0 = new ManyCore<DimacsStringSolver>((String[]) null, dimacsStringSolverArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.tools.ManyCore", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      String[] stringArray0 = new String[1];
      ModelIterator[] modelIteratorArray0 = new ModelIterator[0];
      ManyCore<ModelIterator> manyCore0 = null;
      try {
        manyCore0 = new ManyCore<ModelIterator>(stringArray0, modelIteratorArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.sat4j.tools.ManyCore", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      ManyCore<NegationDecorator<SolutionCounter>> manyCore0 = null;
      try {
        manyCore0 = new ManyCore<NegationDecorator<SolutionCounter>>(false, (NegationDecorator<SolutionCounter>[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.tools.ManyCore", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      String[] stringArray0 = new String[0];
      ManyCore<SingleSolutionDetector> manyCore0 = null;
      try {
        manyCore0 = new ManyCore<SingleSolutionDetector>(true, stringArray0, (SingleSolutionDetector[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.tools.ManyCore", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      ASolverFactory<DimacsOutputSolver> aSolverFactory0 = (ASolverFactory<DimacsOutputSolver>) mock(ASolverFactory.class, new ViolatedAssumptionAnswer());
      ManyCore<DimacsOutputSolver> manyCore0 = null;
      try {
        manyCore0 = new ManyCore<DimacsOutputSolver>(aSolverFactory0, (String[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.tools.ManyCore", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      DimacsStringSolver dimacsStringSolver0 = new DimacsStringSolver();
      assertNotNull(dimacsStringSolver0);
      assertEquals(0, dimacsStringSolver0.nConstraints());
      assertEquals("", dimacsStringSolver0.getLogPrefix());
      assertEquals(0, dimacsStringSolver0.nVars());
      assertFalse(dimacsStringSolver0.isVerbose());
      assertEquals(0L, dimacsStringSolver0.getTimeoutMs());
      assertEquals(0, dimacsStringSolver0.newVar());
      assertEquals(0, dimacsStringSolver0.realNumberOfVariables());
      assertFalse(dimacsStringSolver0.isDBSimplificationAllowed());
      assertEquals(0, dimacsStringSolver0.getTimeout());
      assertFalse(dimacsStringSolver0.isSolverKeptHot());
      
      ModelIterator[] modelIteratorArray0 = new ModelIterator[1];
      ModelIterator modelIterator0 = new ModelIterator(dimacsStringSolver0);
      assertNotNull(modelIterator0);
      assertEquals(0, dimacsStringSolver0.nConstraints());
      assertEquals("", dimacsStringSolver0.getLogPrefix());
      assertEquals(0, dimacsStringSolver0.nVars());
      assertFalse(dimacsStringSolver0.isVerbose());
      assertEquals(0L, dimacsStringSolver0.getTimeoutMs());
      assertEquals(0, dimacsStringSolver0.newVar());
      assertEquals(0, dimacsStringSolver0.realNumberOfVariables());
      assertFalse(dimacsStringSolver0.isDBSimplificationAllowed());
      assertEquals(0, dimacsStringSolver0.getTimeout());
      assertFalse(dimacsStringSolver0.isSolverKeptHot());
      assertEquals(0L, modelIterator0.numberOfModelsFoundSoFar());
      
      modelIteratorArray0[0] = modelIterator0;
      ManyCore<ModelIterator> manyCore0 = new ManyCore<ModelIterator>(false, modelIteratorArray0);
      assertEquals(1, modelIteratorArray0.length);
      assertNotNull(manyCore0);
      
      // Undeclared exception!
      try { 
        manyCore0.addParity((IVecInt) null, false);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Not implemented yet!
         //
         verifyException("org.sat4j.tools.DimacsStringSolver", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      String[] stringArray0 = new String[0];
      ASolverFactory<ModelIterator> aSolverFactory0 = (ASolverFactory<ModelIterator>) mock(ASolverFactory.class, new ViolatedAssumptionAnswer());
      ManyCore<ModelIterator> manyCore0 = new ManyCore<ModelIterator>(aSolverFactory0, stringArray0);
      assertEquals(0, stringArray0.length);
      assertNotNull(manyCore0);
      
      VecInt vecInt0 = new VecInt(1013);
      assertNotNull(vecInt0);
      assertEquals(0, vecInt0.size());
      assertTrue(vecInt0.isEmpty());
      
      IConstr iConstr0 = manyCore0.addParity(vecInt0, false);
      assertEquals(0, stringArray0.length);
      assertNotNull(iConstr0);
      assertEquals(0, vecInt0.size());
      assertTrue(vecInt0.isEmpty());
      assertEquals(0, iConstr0.size());
      assertFalse(iConstr0.canBePropagatedMultipleTimes());
      assertEquals(0.0, iConstr0.getActivity(), 0.01);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      ASolverFactory<ModelIterator> aSolverFactory0 = (ASolverFactory<ModelIterator>) mock(ASolverFactory.class, new ViolatedAssumptionAnswer());
      String[] stringArray0 = new String[0];
      ManyCore<ModelIterator> manyCore0 = new ManyCore<ModelIterator>(aSolverFactory0, stringArray0);
      assertEquals(0, stringArray0.length);
      assertNotNull(manyCore0);
      
      manyCore0.setKeepSolverHot(false);
      assertEquals(0, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      DimacsStringSolver[] dimacsStringSolverArray0 = new DimacsStringSolver[9];
      DimacsStringSolver dimacsStringSolver0 = new DimacsStringSolver(102);
      assertNotNull(dimacsStringSolver0);
      assertEquals(0, dimacsStringSolver0.newVar());
      assertEquals(0, dimacsStringSolver0.realNumberOfVariables());
      assertFalse(dimacsStringSolver0.isDBSimplificationAllowed());
      assertFalse(dimacsStringSolver0.isVerbose());
      assertEquals(0, dimacsStringSolver0.nConstraints());
      assertFalse(dimacsStringSolver0.isSolverKeptHot());
      assertEquals(0, dimacsStringSolver0.getTimeout());
      assertEquals(0, dimacsStringSolver0.nVars());
      assertEquals("", dimacsStringSolver0.getLogPrefix());
      assertEquals(0L, dimacsStringSolver0.getTimeoutMs());
      
      dimacsStringSolverArray0[1] = dimacsStringSolver0;
      dimacsStringSolverArray0[2] = dimacsStringSolverArray0[1];
      dimacsStringSolverArray0[5] = dimacsStringSolverArray0[2];
      ModelIteratorToSATAdapter[] modelIteratorToSATAdapterArray0 = new ModelIteratorToSATAdapter[4];
      SolutionFoundListener solutionFoundListener0 = SolutionFoundListener.VOID;
      assertNotNull(solutionFoundListener0);
      
      ModelIteratorToSATAdapter modelIteratorToSATAdapter0 = new ModelIteratorToSATAdapter(dimacsStringSolverArray0[5], solutionFoundListener0);
      assertEquals(9, dimacsStringSolverArray0.length);
      assertNotNull(modelIteratorToSATAdapter0);
      assertEquals(0L, modelIteratorToSATAdapter0.numberOfModelsFoundSoFar());
      
      modelIteratorToSATAdapterArray0[0] = modelIteratorToSATAdapter0;
      modelIteratorToSATAdapterArray0[1] = modelIteratorToSATAdapter0;
      modelIteratorToSATAdapterArray0[2] = modelIteratorToSATAdapterArray0[0];
      modelIteratorToSATAdapterArray0[3] = modelIteratorToSATAdapter0;
      ManyCore<ModelIteratorToSATAdapter> manyCore0 = new ManyCore<ModelIteratorToSATAdapter>(modelIteratorToSATAdapterArray0);
      assertEquals(4, modelIteratorToSATAdapterArray0.length);
      assertNotNull(manyCore0);
      
      manyCore0.setVerbose(false);
      assertEquals(4, modelIteratorToSATAdapterArray0.length);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      ASolverFactory<DimacsStringSolver> aSolverFactory0 = (ASolverFactory<DimacsStringSolver>) mock(ASolverFactory.class, new ViolatedAssumptionAnswer());
      String[] stringArray0 = new String[0];
      ManyCore<DimacsStringSolver> manyCore0 = new ManyCore<DimacsStringSolver>(aSolverFactory0, stringArray0);
      assertEquals(0, stringArray0.length);
      assertNotNull(manyCore0);
      
      // Undeclared exception!
      try { 
        manyCore0.removeSubsumedConstr((IConstr) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Can only remove a group of constraints!
         //
         verifyException("org.sat4j.tools.ManyCore", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      LexicoDecorator<GateTranslator>[] lexicoDecoratorArray0 = (LexicoDecorator<GateTranslator>[]) Array.newInstance(LexicoDecorator.class, 0);
      ManyCore<LexicoDecorator<GateTranslator>> manyCore0 = new ManyCore<LexicoDecorator<GateTranslator>>(lexicoDecoratorArray0);
      assertEquals(0, lexicoDecoratorArray0.length);
      assertNotNull(manyCore0);
      
      VecInt vecInt0 = new VecInt(1013);
      assertNotNull(vecInt0);
      assertTrue(vecInt0.isEmpty());
      assertEquals(0, vecInt0.size());
      
      IConstr iConstr0 = manyCore0.addBlockingClause(vecInt0);
      assertEquals(0, lexicoDecoratorArray0.length);
      assertNotNull(iConstr0);
      assertTrue(vecInt0.isEmpty());
      assertEquals(0, vecInt0.size());
      assertEquals(0.0, iConstr0.getActivity(), 0.01);
      assertEquals(0, iConstr0.size());
      assertFalse(iConstr0.canBePropagatedMultipleTimes());
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      String[] stringArray0 = new String[1];
      ModelIterator[] modelIteratorArray0 = new ModelIterator[2];
      ISolver iSolver0 = mock(ISolver.class, new ViolatedAssumptionAnswer());
      doReturn(0, 0).when(iSolver0).nextFreeVarId(anyBoolean());
      ModelIterator modelIterator0 = new ModelIterator(iSolver0);
      assertNotNull(modelIterator0);
      assertEquals(0L, modelIterator0.numberOfModelsFoundSoFar());
      
      modelIteratorArray0[0] = modelIterator0;
      modelIteratorArray0[1] = modelIterator0;
      ManyCore<ModelIterator> manyCore0 = new ManyCore<ModelIterator>(true, stringArray0, modelIteratorArray0);
      assertEquals(1, stringArray0.length);
      assertEquals(2, modelIteratorArray0.length);
      assertNotNull(manyCore0);
      
      int int0 = manyCore0.nextFreeVarId(true);
      assertEquals(1, stringArray0.length);
      assertEquals(2, modelIteratorArray0.length);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      ASolverFactory<ModelIterator> aSolverFactory0 = (ASolverFactory<ModelIterator>) mock(ASolverFactory.class, new ViolatedAssumptionAnswer());
      String[] stringArray0 = new String[0];
      ManyCore<ModelIterator> manyCore0 = new ManyCore<ModelIterator>(aSolverFactory0, stringArray0);
      assertEquals(0, stringArray0.length);
      assertNotNull(manyCore0);
      
      int int0 = manyCore0.nextFreeVarId(true);
      assertEquals(0, stringArray0.length);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      String[] stringArray0 = new String[7];
      NegationDecorator<AbstractMinimalModel>[] negationDecoratorArray0 = (NegationDecorator<AbstractMinimalModel>[]) Array.newInstance(NegationDecorator.class, 6);
      ModelIteratorToSATAdapter[] modelIteratorToSATAdapterArray0 = new ModelIteratorToSATAdapter[9];
      ModelIteratorToSATAdapter modelIteratorToSATAdapter0 = mock(ModelIteratorToSATAdapter.class, new ViolatedAssumptionAnswer());
      doReturn(0, 0).when(modelIteratorToSATAdapter0).nVars();
      modelIteratorToSATAdapterArray0[0] = modelIteratorToSATAdapter0;
      modelIteratorToSATAdapterArray0[1] = modelIteratorToSATAdapter0;
      modelIteratorToSATAdapterArray0[2] = modelIteratorToSATAdapter0;
      modelIteratorToSATAdapterArray0[3] = modelIteratorToSATAdapter0;
      modelIteratorToSATAdapterArray0[4] = modelIteratorToSATAdapter0;
      modelIteratorToSATAdapterArray0[5] = modelIteratorToSATAdapter0;
      modelIteratorToSATAdapterArray0[6] = modelIteratorToSATAdapter0;
      modelIteratorToSATAdapterArray0[7] = modelIteratorToSATAdapter0;
      modelIteratorToSATAdapterArray0[8] = modelIteratorToSATAdapter0;
      ManyCore<ModelIteratorToSATAdapter> manyCore0 = new ManyCore<ModelIteratorToSATAdapter>(stringArray0, modelIteratorToSATAdapterArray0);
      assertEquals(7, stringArray0.length);
      assertEquals(9, modelIteratorToSATAdapterArray0.length);
      assertNotNull(manyCore0);
      
      IVecInt iVecInt0 = AbstractMinimalModel.positiveLiterals(modelIteratorToSATAdapter0);
      assertNotNull(iVecInt0);
      assertTrue(iVecInt0.isEmpty());
      assertEquals(0, iVecInt0.size());
      
      SolutionFoundListener solutionFoundListener0 = mock(SolutionFoundListener.class, new ViolatedAssumptionAnswer());
      Minimal4CardinalityModel minimal4CardinalityModel0 = new Minimal4CardinalityModel(manyCore0, iVecInt0, solutionFoundListener0);
      assertEquals(7, stringArray0.length);
      assertEquals(9, modelIteratorToSATAdapterArray0.length);
      assertNotNull(minimal4CardinalityModel0);
      assertTrue(iVecInt0.isEmpty());
      assertEquals(0, iVecInt0.size());
      
      SolutionFoundListener solutionFoundListener1 = mock(SolutionFoundListener.class, new ViolatedAssumptionAnswer());
      Minimal4InclusionModel minimal4InclusionModel0 = new Minimal4InclusionModel(modelIteratorToSATAdapter0, iVecInt0, solutionFoundListener1);
      assertNotNull(minimal4InclusionModel0);
      assertTrue(iVecInt0.isEmpty());
      assertEquals(0, iVecInt0.size());
      
      NegationDecorator<AbstractMinimalModel> negationDecorator0 = new NegationDecorator<AbstractMinimalModel>(minimal4InclusionModel0);
      assertNotNull(negationDecorator0);
      assertFalse(negationDecorator0.isSatisfiable());
      assertTrue(iVecInt0.isEmpty());
      assertEquals(0, iVecInt0.size());
      
      negationDecoratorArray0[0] = negationDecorator0;
      negationDecoratorArray0[1] = negationDecoratorArray0[0];
      negationDecoratorArray0[2] = negationDecoratorArray0[0];
      negationDecoratorArray0[3] = negationDecoratorArray0[2];
      NegationDecorator<AbstractMinimalModel> negationDecorator1 = new NegationDecorator<AbstractMinimalModel>(minimal4CardinalityModel0);
      assertEquals(7, stringArray0.length);
      assertEquals(9, modelIteratorToSATAdapterArray0.length);
      assertNotNull(negationDecorator1);
      assertTrue(iVecInt0.isEmpty());
      assertEquals(0, iVecInt0.size());
      assertFalse(negationDecorator1.equals((Object)negationDecorator0));
      
      negationDecoratorArray0[4] = negationDecorator1;
      ManyCore<NegationDecorator<AbstractMinimalModel>> manyCore1 = null;
      try {
        manyCore1 = new ManyCore<NegationDecorator<AbstractMinimalModel>>(true, stringArray0, negationDecoratorArray0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Does not make sense in the parallel context
         //
         verifyException("org.sat4j.tools.ManyCore", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      DimacsStringSolver dimacsStringSolver0 = new DimacsStringSolver();
      assertNotNull(dimacsStringSolver0);
      assertEquals(0, dimacsStringSolver0.nVars());
      assertFalse(dimacsStringSolver0.isDBSimplificationAllowed());
      assertFalse(dimacsStringSolver0.isVerbose());
      assertEquals("", dimacsStringSolver0.getLogPrefix());
      assertEquals(0, dimacsStringSolver0.newVar());
      assertEquals(0L, dimacsStringSolver0.getTimeoutMs());
      assertEquals(0, dimacsStringSolver0.nConstraints());
      assertFalse(dimacsStringSolver0.isSolverKeptHot());
      assertEquals(0, dimacsStringSolver0.realNumberOfVariables());
      assertEquals(0, dimacsStringSolver0.getTimeout());
      
      String[] stringArray0 = new String[1];
      DimacsStringSolver[] dimacsStringSolverArray0 = new DimacsStringSolver[2];
      dimacsStringSolverArray0[0] = dimacsStringSolver0;
      dimacsStringSolverArray0[1] = dimacsStringSolverArray0[0];
      ManyCore<DimacsStringSolver> manyCore0 = new ManyCore<DimacsStringSolver>(stringArray0, dimacsStringSolverArray0);
      assertEquals(1, stringArray0.length);
      assertEquals(2, dimacsStringSolverArray0.length);
      assertNotNull(manyCore0);
      
      manyCore0.setDBSimplificationAllowed(true);
      assertEquals(1, stringArray0.length);
      assertEquals(2, dimacsStringSolverArray0.length);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      String[] stringArray0 = new String[0];
      SingleSolutionDetector[] singleSolutionDetectorArray0 = new SingleSolutionDetector[0];
      ManyCore<SingleSolutionDetector> manyCore0 = new ManyCore<SingleSolutionDetector>(true, stringArray0, singleSolutionDetectorArray0);
      assertEquals(0, stringArray0.length);
      assertEquals(0, singleSolutionDetectorArray0.length);
      assertNotNull(manyCore0);
      
      // Undeclared exception!
      try { 
        manyCore0.onFinishWithAnswer(true, false, (-1));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("org.sat4j.core.Vec", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      String[] stringArray0 = new String[0];
      ASolverFactory<ModelIterator> aSolverFactory0 = (ASolverFactory<ModelIterator>) mock(ASolverFactory.class, new ViolatedAssumptionAnswer());
      ManyCore<ModelIterator> manyCore0 = new ManyCore<ModelIterator>(aSolverFactory0, stringArray0);
      assertEquals(0, stringArray0.length);
      assertNotNull(manyCore0);
      
      // Undeclared exception!
      try { 
        manyCore0.onFinishWithAnswer(false, true, 503);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.tools.ManyCore", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      String[] stringArray0 = new String[0];
      SingleSolutionDetector[] singleSolutionDetectorArray0 = new SingleSolutionDetector[0];
      ManyCore<SingleSolutionDetector> manyCore0 = new ManyCore<SingleSolutionDetector>(true, stringArray0, singleSolutionDetectorArray0);
      assertEquals(0, stringArray0.length);
      assertEquals(0, singleSolutionDetectorArray0.length);
      assertNotNull(manyCore0);
      
      manyCore0.printInfos((PrintWriter) null, "F");
      assertEquals(0, stringArray0.length);
      assertEquals(0, singleSolutionDetectorArray0.length);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      DimacsStringSolver dimacsStringSolver0 = new DimacsStringSolver();
      assertNotNull(dimacsStringSolver0);
      assertEquals("", dimacsStringSolver0.getLogPrefix());
      assertFalse(dimacsStringSolver0.isVerbose());
      assertEquals(0, dimacsStringSolver0.nVars());
      assertEquals(0L, dimacsStringSolver0.getTimeoutMs());
      assertEquals(0, dimacsStringSolver0.getTimeout());
      assertEquals(0, dimacsStringSolver0.realNumberOfVariables());
      assertEquals(0, dimacsStringSolver0.nConstraints());
      assertEquals(0, dimacsStringSolver0.newVar());
      assertFalse(dimacsStringSolver0.isSolverKeptHot());
      assertFalse(dimacsStringSolver0.isDBSimplificationAllowed());
      
      ASolverFactory<DimacsStringSolver> aSolverFactory0 = (ASolverFactory<DimacsStringSolver>) mock(ASolverFactory.class, new ViolatedAssumptionAnswer());
      doReturn(dimacsStringSolver0, (ISolver) null).when(aSolverFactory0).createSolverByName(anyString());
      String[] stringArray0 = new String[9];
      stringArray0[0] = "]  ";
      stringArray0[1] = "]  ";
      stringArray0[2] = "]  ";
      stringArray0[3] = "]  ";
      stringArray0[4] = "]  ";
      stringArray0[5] = "]  ";
      stringArray0[6] = "]  ";
      stringArray0[7] = "Call the compute method first!";
      stringArray0[8] = "]  ";
      ManyCore<DimacsStringSolver> manyCore0 = null;
      try {
        manyCore0 = new ManyCore<DimacsStringSolver>(aSolverFactory0, stringArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.tools.ManyCore", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      String[] stringArray0 = new String[0];
      NegationDecorator<SolutionCounter>[] negationDecoratorArray0 = (NegationDecorator<SolutionCounter>[]) Array.newInstance(NegationDecorator.class, 2);
      ISolver iSolver0 = mock(ISolver.class, new ViolatedAssumptionAnswer());
      SolutionCounter solutionCounter0 = new SolutionCounter(iSolver0);
      assertNotNull(solutionCounter0);
      assertEquals(0, solutionCounter0.lowerBound());
      
      NegationDecorator<SolutionCounter> negationDecorator0 = new NegationDecorator<SolutionCounter>(solutionCounter0);
      assertNotNull(negationDecorator0);
      assertEquals(0, solutionCounter0.lowerBound());
      assertFalse(negationDecorator0.isSatisfiable());
      
      negationDecoratorArray0[0] = negationDecorator0;
      negationDecoratorArray0[1] = negationDecoratorArray0[0];
      ManyCore<NegationDecorator<SolutionCounter>> manyCore0 = new ManyCore<NegationDecorator<SolutionCounter>>(true, stringArray0, negationDecoratorArray0);
      assertEquals(0, stringArray0.length);
      assertEquals(2, negationDecoratorArray0.length);
      assertNotNull(manyCore0);
      
      manyCore0.setTimeoutOnConflicts(0);
      assertEquals(0, stringArray0.length);
      assertEquals(2, negationDecoratorArray0.length);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      DimacsStringSolver dimacsStringSolver0 = new DimacsStringSolver();
      assertNotNull(dimacsStringSolver0);
      assertEquals(0L, dimacsStringSolver0.getTimeoutMs());
      assertEquals(0, dimacsStringSolver0.newVar());
      assertFalse(dimacsStringSolver0.isVerbose());
      assertEquals(0, dimacsStringSolver0.nVars());
      assertEquals(0, dimacsStringSolver0.nConstraints());
      assertEquals(0, dimacsStringSolver0.realNumberOfVariables());
      assertEquals(0, dimacsStringSolver0.getTimeout());
      assertEquals("", dimacsStringSolver0.getLogPrefix());
      assertFalse(dimacsStringSolver0.isSolverKeptHot());
      assertFalse(dimacsStringSolver0.isDBSimplificationAllowed());
      
      ASolverFactory<DimacsStringSolver> aSolverFactory0 = (ASolverFactory<DimacsStringSolver>) mock(ASolverFactory.class, new ViolatedAssumptionAnswer());
      doReturn(dimacsStringSolver0).when(aSolverFactory0).createSolverByName(anyString());
      String[] stringArray0 = new String[1];
      stringArray0[0] = "]  ";
      ManyCore<DimacsStringSolver> manyCore0 = new ManyCore<DimacsStringSolver>(aSolverFactory0, stringArray0);
      assertEquals(1, stringArray0.length);
      assertNotNull(manyCore0);
      assertEquals(0L, dimacsStringSolver0.getTimeoutMs());
      assertEquals(0, dimacsStringSolver0.newVar());
      assertFalse(dimacsStringSolver0.isVerbose());
      assertEquals(0, dimacsStringSolver0.nVars());
      assertEquals(0, dimacsStringSolver0.nConstraints());
      assertEquals(0, dimacsStringSolver0.realNumberOfVariables());
      assertEquals(0, dimacsStringSolver0.getTimeout());
      assertEquals("", dimacsStringSolver0.getLogPrefix());
      assertFalse(dimacsStringSolver0.isSolverKeptHot());
      assertFalse(dimacsStringSolver0.isDBSimplificationAllowed());
      
      manyCore0.setTimeoutMs(9993L);
      assertEquals(1, stringArray0.length);
      assertEquals(0L, dimacsStringSolver0.getTimeoutMs());
      assertEquals(0, dimacsStringSolver0.newVar());
      assertFalse(dimacsStringSolver0.isVerbose());
      assertEquals(0, dimacsStringSolver0.nVars());
      assertEquals(0, dimacsStringSolver0.nConstraints());
      assertEquals(0, dimacsStringSolver0.realNumberOfVariables());
      assertEquals(0, dimacsStringSolver0.getTimeout());
      assertEquals("", dimacsStringSolver0.getLogPrefix());
      assertFalse(dimacsStringSolver0.isSolverKeptHot());
      assertFalse(dimacsStringSolver0.isDBSimplificationAllowed());
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      String[] stringArray0 = new String[0];
      SingleSolutionDetector[] singleSolutionDetectorArray0 = new SingleSolutionDetector[0];
      ManyCore<SingleSolutionDetector> manyCore0 = new ManyCore<SingleSolutionDetector>(true, stringArray0, singleSolutionDetectorArray0);
      assertEquals(0, stringArray0.length);
      assertEquals(0, singleSolutionDetectorArray0.length);
      assertNotNull(manyCore0);
      
      manyCore0.setTimeout((-443));
      assertEquals(0, stringArray0.length);
      assertEquals(0, singleSolutionDetectorArray0.length);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      String[] stringArray0 = new String[0];
      ManyCore<OptToSatAdapter> manyCore0 = new ManyCore<OptToSatAdapter>((ASolverFactory<OptToSatAdapter>) null, stringArray0);
      assertEquals(0, stringArray0.length);
      assertNotNull(manyCore0);
      
      manyCore0.reset();
      assertEquals(0, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      NegationDecorator<SolutionCounter>[] negationDecoratorArray0 = (NegationDecorator<SolutionCounter>[]) Array.newInstance(NegationDecorator.class, 0);
      ManyCore<NegationDecorator<SolutionCounter>> manyCore0 = new ManyCore<NegationDecorator<SolutionCounter>>(true, negationDecoratorArray0);
      assertEquals(0, negationDecoratorArray0.length);
      assertNotNull(manyCore0);
      
      IVecInt iVecInt0 = mock(IVecInt.class, new ViolatedAssumptionAnswer());
      doReturn(0, 0).when(iVecInt0).get(anyInt());
      ILits iLits0 = mock(ILits.class, new ViolatedAssumptionAnswer());
      LearntBinaryClause learntBinaryClause0 = new LearntBinaryClause(iVecInt0, iLits0);
      assertNotNull(learntBinaryClause0);
      assertFalse(learntBinaryClause0.locked());
      assertFalse(learntBinaryClause0.canBePropagatedMultipleTimes());
      assertEquals(1, learntBinaryClause0.requiredNumberOfSatisfiedLiterals());
      assertTrue(learntBinaryClause0.canBeSatisfiedByCountingLiterals());
      assertEquals(0.0, learntBinaryClause0.getActivity(), 0.01);
      assertTrue(learntBinaryClause0.learnt());
      assertEquals(2, learntBinaryClause0.size());
      assertFalse(learntBinaryClause0.simplify());
      assertFalse(learntBinaryClause0.isSatisfied());
      
      // Undeclared exception!
      try { 
        manyCore0.removeConstr(learntBinaryClause0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Can only remove a group of constraints!
         //
         verifyException("org.sat4j.tools.ManyCore", e);
      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      String[] stringArray0 = new String[0];
      SingleSolutionDetector[] singleSolutionDetectorArray0 = new SingleSolutionDetector[0];
      ManyCore<SingleSolutionDetector> manyCore0 = new ManyCore<SingleSolutionDetector>(true, stringArray0, singleSolutionDetectorArray0);
      assertEquals(0, stringArray0.length);
      assertEquals(0, singleSolutionDetectorArray0.length);
      assertNotNull(manyCore0);
      
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      assertNotNull(pipedOutputStream0);
      
      MockPrintStream mockPrintStream0 = new MockPrintStream(pipedOutputStream0, false);
      assertNotNull(mockPrintStream0);
      
      manyCore0.printStat((PrintStream) mockPrintStream0, "");
      assertEquals(0, stringArray0.length);
      assertEquals(0, singleSolutionDetectorArray0.length);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      String[] stringArray0 = new String[0];
      SingleSolutionDetector[] singleSolutionDetectorArray0 = new SingleSolutionDetector[0];
      ManyCore<SingleSolutionDetector> manyCore0 = new ManyCore<SingleSolutionDetector>(true, stringArray0, singleSolutionDetectorArray0);
      assertEquals(0, stringArray0.length);
      assertEquals(0, singleSolutionDetectorArray0.length);
      assertNotNull(manyCore0);
      
      int int0 = manyCore0.newVar(50);
      assertEquals(0, stringArray0.length);
      assertEquals(0, singleSolutionDetectorArray0.length);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      DimacsStringSolver dimacsStringSolver0 = new DimacsStringSolver();
      assertNotNull(dimacsStringSolver0);
      assertEquals(0, dimacsStringSolver0.getTimeout());
      assertEquals(0, dimacsStringSolver0.realNumberOfVariables());
      assertEquals(0, dimacsStringSolver0.nConstraints());
      assertFalse(dimacsStringSolver0.isSolverKeptHot());
      assertEquals(0, dimacsStringSolver0.newVar());
      assertFalse(dimacsStringSolver0.isVerbose());
      assertEquals(0L, dimacsStringSolver0.getTimeoutMs());
      assertEquals(0, dimacsStringSolver0.nVars());
      assertEquals("", dimacsStringSolver0.getLogPrefix());
      assertFalse(dimacsStringSolver0.isDBSimplificationAllowed());
      
      ASolverFactory<DimacsStringSolver> aSolverFactory0 = (ASolverFactory<DimacsStringSolver>) mock(ASolverFactory.class, new ViolatedAssumptionAnswer());
      doReturn(dimacsStringSolver0).when(aSolverFactory0).createSolverByName(anyString());
      String[] stringArray0 = new String[1];
      stringArray0[0] = "]  ";
      ManyCore<DimacsStringSolver> manyCore0 = new ManyCore<DimacsStringSolver>(aSolverFactory0, stringArray0);
      assertEquals(1, stringArray0.length);
      assertNotNull(manyCore0);
      assertEquals(0, dimacsStringSolver0.getTimeout());
      assertEquals(0, dimacsStringSolver0.realNumberOfVariables());
      assertEquals(0, dimacsStringSolver0.nConstraints());
      assertFalse(dimacsStringSolver0.isSolverKeptHot());
      assertEquals(0, dimacsStringSolver0.newVar());
      assertFalse(dimacsStringSolver0.isVerbose());
      assertEquals(0L, dimacsStringSolver0.getTimeoutMs());
      assertEquals(0, dimacsStringSolver0.nVars());
      assertEquals("", dimacsStringSolver0.getLogPrefix());
      assertFalse(dimacsStringSolver0.isDBSimplificationAllowed());
      
      manyCore0.expireTimeout();
      assertEquals(1, stringArray0.length);
      assertEquals(0, dimacsStringSolver0.getTimeout());
      assertEquals(0, dimacsStringSolver0.realNumberOfVariables());
      assertEquals(0, dimacsStringSolver0.nConstraints());
      assertFalse(dimacsStringSolver0.isSolverKeptHot());
      assertEquals(0, dimacsStringSolver0.newVar());
      assertFalse(dimacsStringSolver0.isVerbose());
      assertEquals(0L, dimacsStringSolver0.getTimeoutMs());
      assertEquals(0, dimacsStringSolver0.nVars());
      assertEquals("", dimacsStringSolver0.getLogPrefix());
      assertFalse(dimacsStringSolver0.isDBSimplificationAllowed());
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      DimacsStringSolver dimacsStringSolver0 = new DimacsStringSolver();
      assertNotNull(dimacsStringSolver0);
      assertEquals(0, dimacsStringSolver0.nConstraints());
      assertEquals(0, dimacsStringSolver0.nVars());
      assertEquals("", dimacsStringSolver0.getLogPrefix());
      assertEquals(0L, dimacsStringSolver0.getTimeoutMs());
      assertEquals(0, dimacsStringSolver0.newVar());
      assertFalse(dimacsStringSolver0.isSolverKeptHot());
      assertFalse(dimacsStringSolver0.isDBSimplificationAllowed());
      assertFalse(dimacsStringSolver0.isVerbose());
      assertEquals(0, dimacsStringSolver0.realNumberOfVariables());
      assertEquals(0, dimacsStringSolver0.getTimeout());
      
      ASolverFactory<DimacsStringSolver> aSolverFactory0 = (ASolverFactory<DimacsStringSolver>) mock(ASolverFactory.class, new ViolatedAssumptionAnswer());
      doReturn(dimacsStringSolver0).when(aSolverFactory0).createSolverByName(anyString());
      String[] stringArray0 = new String[1];
      stringArray0[0] = "]  ";
      ManyCore<DimacsStringSolver> manyCore0 = new ManyCore<DimacsStringSolver>(aSolverFactory0, stringArray0);
      assertEquals(1, stringArray0.length);
      assertNotNull(manyCore0);
      assertEquals(0, dimacsStringSolver0.nConstraints());
      assertEquals(0, dimacsStringSolver0.nVars());
      assertEquals("", dimacsStringSolver0.getLogPrefix());
      assertEquals(0L, dimacsStringSolver0.getTimeoutMs());
      assertEquals(0, dimacsStringSolver0.newVar());
      assertFalse(dimacsStringSolver0.isSolverKeptHot());
      assertFalse(dimacsStringSolver0.isDBSimplificationAllowed());
      assertFalse(dimacsStringSolver0.isVerbose());
      assertEquals(0, dimacsStringSolver0.realNumberOfVariables());
      assertEquals(0, dimacsStringSolver0.getTimeout());
      
      manyCore0.clearLearntClauses();
      assertEquals(1, stringArray0.length);
      assertEquals(0, dimacsStringSolver0.nConstraints());
      assertEquals(0, dimacsStringSolver0.nVars());
      assertEquals("", dimacsStringSolver0.getLogPrefix());
      assertEquals(0L, dimacsStringSolver0.getTimeoutMs());
      assertEquals(0, dimacsStringSolver0.newVar());
      assertFalse(dimacsStringSolver0.isSolverKeptHot());
      assertFalse(dimacsStringSolver0.isDBSimplificationAllowed());
      assertFalse(dimacsStringSolver0.isVerbose());
      assertEquals(0, dimacsStringSolver0.realNumberOfVariables());
      assertEquals(0, dimacsStringSolver0.getTimeout());
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      String[] stringArray0 = new String[7];
      ModelIteratorToSATAdapter[] modelIteratorToSATAdapterArray0 = new ModelIteratorToSATAdapter[9];
      ModelIteratorToSATAdapter modelIteratorToSATAdapter0 = mock(ModelIteratorToSATAdapter.class, new ViolatedAssumptionAnswer());
      doReturn((IConstr) null, (IConstr) null, (IConstr) null, (IConstr) null, (IConstr) null).when(modelIteratorToSATAdapter0).addAtLeast(any(org.sat4j.specs.IVecInt.class) , anyInt());
      doReturn(0, 0).when(modelIteratorToSATAdapter0).nVars();
      modelIteratorToSATAdapterArray0[0] = modelIteratorToSATAdapter0;
      modelIteratorToSATAdapterArray0[1] = modelIteratorToSATAdapter0;
      modelIteratorToSATAdapterArray0[2] = modelIteratorToSATAdapter0;
      modelIteratorToSATAdapterArray0[3] = modelIteratorToSATAdapter0;
      modelIteratorToSATAdapterArray0[4] = modelIteratorToSATAdapter0;
      modelIteratorToSATAdapterArray0[5] = modelIteratorToSATAdapter0;
      modelIteratorToSATAdapterArray0[6] = modelIteratorToSATAdapter0;
      modelIteratorToSATAdapterArray0[7] = modelIteratorToSATAdapter0;
      modelIteratorToSATAdapterArray0[8] = modelIteratorToSATAdapter0;
      ManyCore<ModelIteratorToSATAdapter> manyCore0 = new ManyCore<ModelIteratorToSATAdapter>(stringArray0, modelIteratorToSATAdapterArray0);
      IVecInt iVecInt0 = AbstractMinimalModel.positiveLiterals(modelIteratorToSATAdapter0);
      SolutionFoundListener solutionFoundListener0 = mock(SolutionFoundListener.class, new ViolatedAssumptionAnswer());
      Minimal4CardinalityModel minimal4CardinalityModel0 = new Minimal4CardinalityModel(manyCore0, iVecInt0, solutionFoundListener0);
      IConstr iConstr0 = minimal4CardinalityModel0.addAtLeast(iVecInt0, 0);
      assertEquals(9, iConstr0.size());
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      String[] stringArray0 = new String[0];
      ASolverFactory<ManyCore<DimacsOutputSolver>> aSolverFactory0 = (ASolverFactory<ManyCore<DimacsOutputSolver>>) mock(ASolverFactory.class, new ViolatedAssumptionAnswer());
      ManyCore<ManyCore<DimacsOutputSolver>> manyCore0 = new ManyCore<ManyCore<DimacsOutputSolver>>(aSolverFactory0, stringArray0);
      Vec<IVecInt> vec0 = new Vec<IVecInt>(16);
      manyCore0.addAllClauses(vec0);
      assertTrue(vec0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      DimacsStringSolver[] dimacsStringSolverArray0 = new DimacsStringSolver[4];
      DimacsStringSolver dimacsStringSolver0 = new DimacsStringSolver();
      dimacsStringSolverArray0[0] = dimacsStringSolver0;
      ManyCore<DimacsStringSolver> manyCore0 = null;
      try {
        manyCore0 = new ManyCore<DimacsStringSolver>(true, dimacsStringSolverArray0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.tools.AbstractOutputSolver", e);
      }
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      String[] stringArray0 = new String[0];
      MaxSatDecorator[] maxSatDecoratorArray0 = new MaxSatDecorator[1];
      LightFactory lightFactory0 = new LightFactory();
      ISolver iSolver0 = lightFactory0.defaultSolver();
      MaxSatDecorator maxSatDecorator0 = new MaxSatDecorator(iSolver0, false);
      maxSatDecoratorArray0[0] = maxSatDecorator0;
      ManyCore<MaxSatDecorator> manyCore0 = new ManyCore<MaxSatDecorator>(stringArray0, maxSatDecoratorArray0);
      List<MaxSatDecorator> list0 = manyCore0.getSolvers();
      assertTrue(list0.contains(maxSatDecorator0));
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      String[] stringArray0 = new String[1];
      SingleSolutionDetector[] singleSolutionDetectorArray0 = new SingleSolutionDetector[0];
      ManyCore<SingleSolutionDetector> manyCore0 = null;
      try {
        manyCore0 = new ManyCore<SingleSolutionDetector>(true, stringArray0, singleSolutionDetectorArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.sat4j.tools.ManyCore", e);
      }
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      String[] stringArray0 = new String[0];
      SingleSolutionDetector[] singleSolutionDetectorArray0 = new SingleSolutionDetector[0];
      ManyCore<SingleSolutionDetector> manyCore0 = new ManyCore<SingleSolutionDetector>(true, stringArray0, singleSolutionDetectorArray0);
      ASolverFactory<ManyCore<SingleSolutionDetector>> aSolverFactory0 = (ASolverFactory<ManyCore<SingleSolutionDetector>>) mock(ASolverFactory.class, new ViolatedAssumptionAnswer());
      doReturn(manyCore0).when(aSolverFactory0).createSolverByName(anyString());
      String[] stringArray1 = new String[3];
      stringArray1[0] = "";
      ManyCore<ManyCore<SingleSolutionDetector>> manyCore1 = null;
      try {
        manyCore1 = new ManyCore<ManyCore<SingleSolutionDetector>>(aSolverFactory0, true, stringArray1);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Does not make sense in the parallel context
         //
         verifyException("org.sat4j.tools.ManyCore", e);
      }
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      DimacsStringSolver dimacsStringSolver0 = new DimacsStringSolver();
      ASolverFactory<DimacsStringSolver> aSolverFactory0 = (ASolverFactory<DimacsStringSolver>) mock(ASolverFactory.class, new ViolatedAssumptionAnswer());
      doReturn(dimacsStringSolver0).when(aSolverFactory0).createSolverByName(anyString());
      String[] stringArray0 = new String[1];
      stringArray0[0] = "]  ";
      ManyCore<DimacsStringSolver> manyCore0 = new ManyCore<DimacsStringSolver>(aSolverFactory0, stringArray0);
      Vec<IVecInt> vec0 = new Vec<IVecInt>(4);
      manyCore0.addAllClauses(vec0);
      assertEquals(0, vec0.size());
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      ASolverFactory<DimacsStringSolver> aSolverFactory0 = (ASolverFactory<DimacsStringSolver>) mock(ASolverFactory.class, new ViolatedAssumptionAnswer());
      String[] stringArray0 = new String[0];
      ManyCore<DimacsStringSolver> manyCore0 = new ManyCore<DimacsStringSolver>(aSolverFactory0, stringArray0);
      // Undeclared exception!
      try { 
        manyCore0.isDBSimplificationAllowed();
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      String[] stringArray0 = new String[0];
      ASolverFactory<ModelIterator> aSolverFactory0 = (ASolverFactory<ModelIterator>) mock(ASolverFactory.class, new ViolatedAssumptionAnswer());
      ManyCore<ModelIterator> manyCore0 = new ManyCore<ModelIterator>(aSolverFactory0, stringArray0);
      // Undeclared exception!
      try { 
        manyCore0.isSatisfiable(true);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.tools.ManyCore", e);
      }
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      String[] stringArray0 = new String[0];
      SingleSolutionDetector[] singleSolutionDetectorArray0 = new SingleSolutionDetector[0];
      ManyCore<SingleSolutionDetector> manyCore0 = new ManyCore<SingleSolutionDetector>(true, stringArray0, singleSolutionDetectorArray0);
      // Undeclared exception!
      try { 
        manyCore0.unsatExplanation();
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      SingleSolutionDetector[] singleSolutionDetectorArray0 = new SingleSolutionDetector[0];
      ManyCore<SingleSolutionDetector> manyCore0 = new ManyCore<SingleSolutionDetector>(singleSolutionDetectorArray0);
      // Undeclared exception!
      try { 
        manyCore0.primeImplicant(263);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      ASolverFactory<ModelIterator> aSolverFactory0 = (ASolverFactory<ModelIterator>) mock(ASolverFactory.class, new ViolatedAssumptionAnswer());
      String[] stringArray0 = new String[0];
      ManyCore<ModelIterator> manyCore0 = new ManyCore<ModelIterator>(aSolverFactory0, stringArray0);
      // Undeclared exception!
      try { 
        manyCore0.modelWithInternalVariables();
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      NegationDecorator<SolutionCounter>[] negationDecoratorArray0 = (NegationDecorator<SolutionCounter>[]) Array.newInstance(NegationDecorator.class, 0);
      ManyCore<NegationDecorator<SolutionCounter>> manyCore0 = new ManyCore<NegationDecorator<SolutionCounter>>(true, negationDecoratorArray0);
      // Undeclared exception!
      try { 
        manyCore0.model();
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      String[] stringArray0 = new String[0];
      ASolverFactory<ModelIterator> aSolverFactory0 = (ASolverFactory<ModelIterator>) mock(ASolverFactory.class, new ViolatedAssumptionAnswer());
      ManyCore<ModelIterator> manyCore0 = new ManyCore<ModelIterator>(aSolverFactory0, stringArray0);
      // Undeclared exception!
      try { 
        manyCore0.primeImplicant();
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      String[] stringArray0 = new String[0];
      ManyCore<OptToSatAdapter> manyCore0 = new ManyCore<OptToSatAdapter>((ASolverFactory<OptToSatAdapter>) null, stringArray0);
      // Undeclared exception!
      try { 
        manyCore0.getStat();
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      String[] stringArray0 = new String[0];
      SingleSolutionDetector[] singleSolutionDetectorArray0 = new SingleSolutionDetector[0];
      ManyCore<SingleSolutionDetector> manyCore0 = new ManyCore<SingleSolutionDetector>(true, stringArray0, singleSolutionDetectorArray0);
      // Undeclared exception!
      try { 
        manyCore0.getSearchListener();
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      ASolverFactory<LexicoDecorator<DimacsOutputSolver>> aSolverFactory0 = (ASolverFactory<LexicoDecorator<DimacsOutputSolver>>) mock(ASolverFactory.class, new ViolatedAssumptionAnswer());
      String[] stringArray0 = new String[0];
      ManyCore<LexicoDecorator<DimacsOutputSolver>> manyCore0 = new ManyCore<LexicoDecorator<DimacsOutputSolver>>(aSolverFactory0, true, stringArray0);
      // Undeclared exception!
      try { 
        manyCore0.getSolvingEngine();
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Not supported yet in ManyCore
         //
         verifyException("org.sat4j.tools.ManyCore", e);
      }
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      String[] stringArray0 = new String[0];
      SingleSolutionDetector[] singleSolutionDetectorArray0 = new SingleSolutionDetector[0];
      ManyCore<SingleSolutionDetector> manyCore0 = new ManyCore<SingleSolutionDetector>(true, stringArray0, singleSolutionDetectorArray0);
      // Undeclared exception!
      try { 
        manyCore0.isVerbose();
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      String[] stringArray0 = new String[0];
      ASolverFactory<Solver<CardinalityDataStructureYanMin>> aSolverFactory0 = (ASolverFactory<Solver<CardinalityDataStructureYanMin>>) mock(ASolverFactory.class, new ViolatedAssumptionAnswer());
      ManyCore<Solver<CardinalityDataStructureYanMin>> manyCore0 = new ManyCore<Solver<CardinalityDataStructureYanMin>>(aSolverFactory0, stringArray0);
      // Undeclared exception!
      try { 
        manyCore0.newVar();
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.tools.ManyCore", e);
      }
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      ASolverFactory<ModelIterator> aSolverFactory0 = (ASolverFactory<ModelIterator>) mock(ASolverFactory.class, new ViolatedAssumptionAnswer());
      String[] stringArray0 = new String[0];
      ManyCore<ModelIterator> manyCore0 = new ManyCore<ModelIterator>(aSolverFactory0, stringArray0);
      ASolverFactory<DimacsStringSolver> aSolverFactory1 = (ASolverFactory<DimacsStringSolver>) mock(ASolverFactory.class, new ViolatedAssumptionAnswer());
      ManyCore<DimacsStringSolver> manyCore1 = new ManyCore<DimacsStringSolver>(aSolverFactory1, false, stringArray0);
      // Undeclared exception!
      try { 
        manyCore1.setUnitClauseProvider(manyCore0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Does not make sense in the parallel context
         //
         verifyException("org.sat4j.tools.ManyCore", e);
      }
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      String[] stringArray0 = new String[0];
      ASolverFactory<ModelIterator> aSolverFactory0 = (ASolverFactory<ModelIterator>) mock(ASolverFactory.class, new ViolatedAssumptionAnswer());
      ManyCore<ModelIterator> manyCore0 = new ManyCore<ModelIterator>(aSolverFactory0, stringArray0);
      // Undeclared exception!
      try { 
        manyCore0.getTimeoutMs();
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      String[] stringArray0 = new String[0];
      ASolverFactory<ModelIterator> aSolverFactory0 = (ASolverFactory<ModelIterator>) mock(ASolverFactory.class, new ViolatedAssumptionAnswer());
      ManyCore<ModelIterator> manyCore0 = new ManyCore<ModelIterator>(aSolverFactory0, stringArray0);
      // Undeclared exception!
      try { 
        manyCore0.getTimeout();
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      ASolverFactory<LexicoDecorator<DimacsOutputSolver>> aSolverFactory0 = (ASolverFactory<LexicoDecorator<DimacsOutputSolver>>) mock(ASolverFactory.class, new ViolatedAssumptionAnswer());
      String[] stringArray0 = new String[0];
      ManyCore<LexicoDecorator<DimacsOutputSolver>> manyCore0 = new ManyCore<LexicoDecorator<DimacsOutputSolver>>(aSolverFactory0, true, stringArray0);
      // Undeclared exception!
      try { 
        manyCore0.realNumberOfVariables();
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      StatisticsSolver[] statisticsSolverArray0 = new StatisticsSolver[0];
      ManyCore<StatisticsSolver> manyCore0 = new ManyCore<StatisticsSolver>(statisticsSolverArray0);
      try { 
        manyCore0.isSatisfiable();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.tools.ManyCore", e);
      }
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      String[] stringArray0 = new String[0];
      ASolverFactory<ModelIterator> aSolverFactory0 = (ASolverFactory<ModelIterator>) mock(ASolverFactory.class, new ViolatedAssumptionAnswer());
      ManyCore<ModelIterator> manyCore0 = new ManyCore<ModelIterator>(aSolverFactory0, stringArray0);
      // Undeclared exception!
      try { 
        manyCore0.model(4);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      StatisticsSolver[] statisticsSolverArray0 = new StatisticsSolver[6];
      ManyCore<StatisticsSolver> manyCore0 = null;
      try {
        manyCore0 = new ManyCore<StatisticsSolver>(statisticsSolverArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.tools.ManyCore", e);
      }
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      String[] stringArray0 = new String[0];
      SingleSolutionDetector[] singleSolutionDetectorArray0 = new SingleSolutionDetector[0];
      ManyCore<SingleSolutionDetector> manyCore0 = new ManyCore<SingleSolutionDetector>(true, stringArray0, singleSolutionDetectorArray0);
      // Undeclared exception!
      try { 
        manyCore0.nConstraints();
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      String[] stringArray0 = new String[0];
      ASolverFactory<DimacsStringSolver> aSolverFactory0 = (ASolverFactory<DimacsStringSolver>) mock(ASolverFactory.class, new ViolatedAssumptionAnswer());
      ManyCore<DimacsStringSolver> manyCore0 = new ManyCore<DimacsStringSolver>(aSolverFactory0, true, stringArray0);
      // Undeclared exception!
      try { 
        manyCore0.isSolverKeptHot();
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      String[] stringArray0 = new String[0];
      ASolverFactory<DimacsStringSolver> aSolverFactory0 = (ASolverFactory<DimacsStringSolver>) mock(ASolverFactory.class, new ViolatedAssumptionAnswer());
      ManyCore<DimacsStringSolver> manyCore0 = new ManyCore<DimacsStringSolver>(aSolverFactory0, false, stringArray0);
      manyCore0.learnUnit(1000);
  }

  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      ASolverFactory<ManyCore<SingleSolutionDetector>> aSolverFactory0 = (ASolverFactory<ManyCore<SingleSolutionDetector>>) mock(ASolverFactory.class, new ViolatedAssumptionAnswer());
      String[] stringArray0 = new String[0];
      ManyCore<ManyCore<SingleSolutionDetector>> manyCore0 = new ManyCore<ManyCore<SingleSolutionDetector>>(aSolverFactory0, true, stringArray0);
      // Undeclared exception!
      try { 
        manyCore0.createBlockingClauseForCurrentModel();
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      String[] stringArray0 = new String[0];
      ASolverFactory<ManyCore<SingleSolutionDetector>> aSolverFactory0 = (ASolverFactory<ManyCore<SingleSolutionDetector>>) mock(ASolverFactory.class, new ViolatedAssumptionAnswer());
      ManyCore<ManyCore<SingleSolutionDetector>> manyCore0 = new ManyCore<ManyCore<SingleSolutionDetector>>(aSolverFactory0, true, stringArray0);
      VecInt vecInt0 = new VecInt(1013);
      // Undeclared exception!
      try { 
        manyCore0.isSatisfiable((IVecInt) vecInt0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.tools.ManyCore", e);
      }
  }

  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      String[] stringArray0 = new String[0];
      ASolverFactory<DimacsStringSolver> aSolverFactory0 = (ASolverFactory<DimacsStringSolver>) mock(ASolverFactory.class, new ViolatedAssumptionAnswer());
      ManyCore<DimacsStringSolver> manyCore0 = new ManyCore<DimacsStringSolver>(aSolverFactory0, stringArray0);
      List<DimacsStringSolver> list0 = manyCore0.getSolvers();
      assertTrue(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      String[] stringArray0 = new String[0];
      SingleSolutionDetector[] singleSolutionDetectorArray0 = new SingleSolutionDetector[0];
      ManyCore<SingleSolutionDetector> manyCore0 = new ManyCore<SingleSolutionDetector>(true, stringArray0, singleSolutionDetectorArray0);
      // Undeclared exception!
      try { 
        manyCore0.getLogPrefix();
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }
}
