/*
 * This file was automatically generated by EvoSuite
 * Mon Oct 28 14:30:12 GMT 2019
 */

package jahuwaldt.plot;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import jahuwaldt.plot.BoxLLSymbol;
import jahuwaldt.plot.BoxURSymbol;
import jahuwaldt.plot.DiamondSymbol;
import jahuwaldt.plot.RTriangle3Symbol;
import jahuwaldt.plot.TabUpSymbol;
import jahuwaldt.plot.Triangle2Symbol;
import java.awt.Color;
import java.awt.SystemColor;
import javax.swing.DebugGraphics;
import javax.swing.JList;
import javax.swing.text.DefaultStyledDocument;
import javax.swing.text.StringContent;
import javax.swing.text.StyleContext;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class PlotSymbol_ESTest extends PlotSymbol_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      BoxURSymbol boxURSymbol0 = new BoxURSymbol();
      assertEquals(8, boxURSymbol0.getSize());
      
      boxURSymbol0.setSize(0);
      int int0 = boxURSymbol0.getSize();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      DiamondSymbol diamondSymbol0 = new DiamondSymbol();
      int int0 = diamondSymbol0.getSize();
      assertEquals(8, int0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      DiamondSymbol diamondSymbol0 = new DiamondSymbol();
      StringContent stringContent0 = new StringContent((-1662));
      StyleContext styleContext0 = StyleContext.getDefaultStyleContext();
      DefaultStyledDocument defaultStyledDocument0 = new DefaultStyledDocument(stringContent0, styleContext0);
      StyleContext.NamedStyle styleContext_NamedStyle0 = styleContext0.new NamedStyle();
      Color color0 = defaultStyledDocument0.getBackground(styleContext_NamedStyle0);
      diamondSymbol0.setFillColor(color0);
      diamondSymbol0.getFillColor();
      assertEquals(8, diamondSymbol0.getSize());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      DiamondSymbol diamondSymbol0 = new DiamondSymbol();
      BoxLLSymbol[] boxLLSymbolArray0 = new BoxLLSymbol[0];
      JList<BoxLLSymbol> jList0 = new JList<BoxLLSymbol>(boxLLSymbolArray0);
      Color color0 = jList0.getSelectionBackground();
      diamondSymbol0.setBorderColor(color0);
      diamondSymbol0.getBorderColor();
      assertEquals(8, diamondSymbol0.getSize());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      RTriangle3Symbol rTriangle3Symbol0 = new RTriangle3Symbol();
      Color color0 = new Color(0.0F, 0.0F, 0.0F, 0.0F);
      rTriangle3Symbol0.setBorderColor(color0);
      rTriangle3Symbol0.getBorderColor();
      assertEquals(8, rTriangle3Symbol0.getSize());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Triangle2Symbol triangle2Symbol0 = new Triangle2Symbol();
      DebugGraphics debugGraphics0 = new DebugGraphics();
      // Undeclared exception!
      try { 
        triangle2Symbol0.draw(debugGraphics0, 0, 0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("javax.swing.DebugGraphics", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      TabUpSymbol tabUpSymbol0 = new TabUpSymbol();
      tabUpSymbol0.getFillColor();
      assertEquals(8, tabUpSymbol0.getSize());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      DiamondSymbol diamondSymbol0 = new DiamondSymbol();
      diamondSymbol0.setBorderColor((Color) null);
      diamondSymbol0.getBorderColor();
      assertEquals(8, diamondSymbol0.getSize());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      DiamondSymbol diamondSymbol0 = new DiamondSymbol();
      DiamondSymbol diamondSymbol1 = (DiamondSymbol)diamondSymbol0.clone();
      assertEquals(8, diamondSymbol1.getSize());
      assertNotSame(diamondSymbol1, diamondSymbol0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      TabUpSymbol tabUpSymbol0 = new TabUpSymbol();
      SystemColor systemColor0 = SystemColor.scrollbar;
      tabUpSymbol0.setFillColor(systemColor0);
      tabUpSymbol0.getFillColor();
      assertEquals(8, tabUpSymbol0.getSize());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      DiamondSymbol diamondSymbol0 = new DiamondSymbol();
      diamondSymbol0.setSize((-970));
      int int0 = diamondSymbol0.getSize();
      assertEquals((-970), int0);
  }
}
