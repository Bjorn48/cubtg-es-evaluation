/*
 * This file was automatically generated by EvoSuite
 * Mon Oct 28 14:28:05 GMT 2019
 */

package com.soops.CEN4010.JMCA.JParser;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.soops.CEN4010.JMCA.JParser.JavaCharStream;
import com.soops.CEN4010.JMCA.JParser.JavaParserConstants;
import com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager;
import com.soops.CEN4010.JMCA.JParser.Token;
import java.io.ByteArrayInputStream;
import java.io.DataInputStream;
import java.io.FileDescriptor;
import java.io.IOException;
import java.io.InputStream;
import java.io.PipedInputStream;
import java.io.PrintStream;
import java.io.SequenceInputStream;
import java.io.StringReader;
import java.nio.CharBuffer;
import java.util.Enumeration;
import java.util.Locale;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFileInputStream;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class JavaParserTokenManager_ESTest extends JavaParserTokenManager_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      StringReader stringReader0 = new StringReader("FoFqL*&l!43Zy");
      assertNotNull(stringReader0);
      
      StringReader stringReader1 = new StringReader("FoFqL*&l!43Zy");
      assertNotNull(stringReader1);
      assertFalse(stringReader1.equals((Object)stringReader0));
      
      StringReader stringReader2 = new StringReader("FoFqL*&l!43Zy");
      assertNotNull(stringReader2);
      assertFalse(stringReader2.equals((Object)stringReader1));
      assertFalse(stringReader2.equals((Object)stringReader0));
      
      StringReader stringReader3 = new StringReader("FoFqL*&l!43Zy");
      assertNotNull(stringReader3);
      assertFalse(stringReader3.equals((Object)stringReader2));
      assertFalse(stringReader3.equals((Object)stringReader0));
      assertFalse(stringReader3.equals((Object)stringReader1));
      
      StringReader stringReader4 = new StringReader("FoFqL*&l!43Zy");
      assertNotNull(stringReader4);
      assertFalse(stringReader4.equals((Object)stringReader1));
      assertFalse(stringReader4.equals((Object)stringReader3));
      assertFalse(stringReader4.equals((Object)stringReader2));
      assertFalse(stringReader4.equals((Object)stringReader0));
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader1, 1235, 524, 524);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertNotNull(javaCharStream0);
      assertFalse(stringReader1.equals((Object)stringReader2));
      assertFalse(stringReader1.equals((Object)stringReader4));
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertFalse(stringReader1.equals((Object)stringReader3));
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertNotNull(javaParserTokenManager0);
      assertFalse(stringReader1.equals((Object)stringReader2));
      assertFalse(stringReader1.equals((Object)stringReader4));
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertFalse(stringReader1.equals((Object)stringReader3));
      
      javaCharStream0.FillBuff();
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertNotSame(stringReader1, stringReader2);
      assertNotSame(stringReader1, stringReader4);
      assertNotSame(stringReader1, stringReader0);
      assertNotSame(stringReader1, stringReader3);
      assertFalse(stringReader1.equals((Object)stringReader2));
      assertFalse(stringReader1.equals((Object)stringReader4));
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertFalse(stringReader1.equals((Object)stringReader3));
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertEquals(4, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(524, token0.beginColumn);
      assertEquals(1235, token0.beginLine);
      assertEquals(528, token0.endColumn);
      assertEquals(74, token0.kind);
      assertEquals(1235, token0.endLine);
      assertEquals(1235, javaCharStream0.getLine());
      assertEquals(1235, javaCharStream0.getEndLine());
      assertEquals(528, javaCharStream0.getEndColumn());
      assertEquals(1235, javaCharStream0.getBeginLine());
      assertEquals(524, javaCharStream0.getBeginColumn());
      assertEquals(528, javaCharStream0.getColumn());
      assertEquals("FoFqL", token0.toString());
      assertNotSame(stringReader1, stringReader2);
      assertNotSame(stringReader1, stringReader4);
      assertNotSame(stringReader1, stringReader0);
      assertNotSame(stringReader1, stringReader3);
      assertNotNull(token0);
      assertFalse(stringReader1.equals((Object)stringReader2));
      assertFalse(stringReader1.equals((Object)stringReader4));
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertFalse(stringReader1.equals((Object)stringReader3));
      
      Token token1 = javaParserTokenManager0.getNextToken();
      assertEquals(5, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(103, token1.kind);
      assertEquals(529, token1.endColumn);
      assertEquals(1235, token1.endLine);
      assertEquals(529, token1.beginColumn);
      assertEquals(1235, token1.beginLine);
      assertEquals(529, javaCharStream0.getEndColumn());
      assertEquals(1235, javaCharStream0.getLine());
      assertEquals(1235, javaCharStream0.getEndLine());
      assertEquals(529, javaCharStream0.getBeginColumn());
      assertEquals(1235, javaCharStream0.getBeginLine());
      assertEquals(529, javaCharStream0.getColumn());
      assertEquals("*", token1.toString());
      assertNotSame(stringReader1, stringReader2);
      assertNotSame(stringReader1, stringReader4);
      assertNotSame(stringReader1, stringReader0);
      assertNotSame(stringReader1, stringReader3);
      assertNotSame(token1, token0);
      assertNotNull(token1);
      assertFalse(stringReader1.equals((Object)stringReader2));
      assertFalse(stringReader1.equals((Object)stringReader4));
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertFalse(stringReader1.equals((Object)stringReader3));
      assertFalse(token1.equals((Object)token0));
      
      Token token2 = javaParserTokenManager0.getNextToken();
      assertEquals(6, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(530, token2.endColumn);
      assertEquals(1235, token2.beginLine);
      assertEquals(530, token2.beginColumn);
      assertEquals(1235, token2.endLine);
      assertEquals(105, token2.kind);
      assertEquals(530, javaCharStream0.getColumn());
      assertEquals(530, javaCharStream0.getEndColumn());
      assertEquals(1235, javaCharStream0.getLine());
      assertEquals(1235, javaCharStream0.getEndLine());
      assertEquals(530, javaCharStream0.getBeginColumn());
      assertEquals(1235, javaCharStream0.getBeginLine());
      assertEquals("&", token2.toString());
      assertNotSame(stringReader1, stringReader2);
      assertNotSame(stringReader1, stringReader4);
      assertNotSame(stringReader1, stringReader0);
      assertNotSame(stringReader1, stringReader3);
      assertNotSame(token2, token0);
      assertNotSame(token2, token1);
      assertNotNull(token2);
      assertFalse(stringReader1.equals((Object)stringReader2));
      assertFalse(stringReader1.equals((Object)stringReader4));
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertFalse(stringReader1.equals((Object)stringReader3));
      assertFalse(token2.equals((Object)token0));
      assertFalse(token2.equals((Object)token1));
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "t`LYJy$=jm$_HY!");
      assertFalse(boolean0);
      
      StringReader stringReader0 = new StringReader("]OaB%.* G=}[X%Be");
      assertNotNull(stringReader0);
      
      int int0 = stringReader0.read();
      assertEquals(93, int0);
      
      int int1 = stringReader0.read();
      assertEquals(79, int1);
      assertFalse(int1 == int0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, (-2583), 11);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertNotNull(javaCharStream0);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertNotNull(javaParserTokenManager0);
      
      JavaParserTokenManager javaParserTokenManager1 = new JavaParserTokenManager(javaCharStream0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertNotNull(javaParserTokenManager1);
      assertFalse(javaParserTokenManager1.equals((Object)javaParserTokenManager0));
      
      Token token0 = javaParserTokenManager1.getNextToken();
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(1, javaCharStream0.bufpos);
      assertEquals((-2583), token0.beginLine);
      assertEquals(74, token0.kind);
      assertEquals(11, token0.beginColumn);
      assertEquals((-2583), token0.endLine);
      assertEquals(12, token0.endColumn);
      assertEquals(12, javaCharStream0.getEndColumn());
      assertEquals(11, javaCharStream0.getBeginColumn());
      assertEquals((-2583), javaCharStream0.getLine());
      assertEquals((-2583), javaCharStream0.getBeginLine());
      assertEquals((-2583), javaCharStream0.getEndLine());
      assertEquals(12, javaCharStream0.getColumn());
      assertEquals("aB", token0.toString());
      assertNotSame(javaParserTokenManager1, javaParserTokenManager0);
      assertNotNull(token0);
      assertFalse(javaParserTokenManager1.equals((Object)javaParserTokenManager0));
      
      javaParserTokenManager0.TokenLexicalActions(token0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(1, javaCharStream0.bufpos);
      assertEquals((-2583), token0.beginLine);
      assertEquals(74, token0.kind);
      assertEquals(11, token0.beginColumn);
      assertEquals((-2583), token0.endLine);
      assertEquals(12, token0.endColumn);
      assertEquals(12, javaCharStream0.getEndColumn());
      assertEquals(11, javaCharStream0.getBeginColumn());
      assertEquals((-2583), javaCharStream0.getLine());
      assertEquals((-2583), javaCharStream0.getBeginLine());
      assertEquals((-2583), javaCharStream0.getEndLine());
      assertEquals(12, javaCharStream0.getColumn());
      assertEquals("aB", token0.toString());
      assertNotSame(javaParserTokenManager0, javaParserTokenManager1);
      assertNotSame(javaParserTokenManager1, javaParserTokenManager0);
      assertFalse(javaParserTokenManager0.equals((Object)javaParserTokenManager1));
      assertFalse(javaParserTokenManager1.equals((Object)javaParserTokenManager0));
      
      JavaParserTokenManager javaParserTokenManager2 = new JavaParserTokenManager(javaCharStream0, 1);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(1, javaCharStream0.bufpos);
      assertEquals(12, javaCharStream0.getEndColumn());
      assertEquals(11, javaCharStream0.getBeginColumn());
      assertEquals((-2583), javaCharStream0.getLine());
      assertEquals((-2583), javaCharStream0.getBeginLine());
      assertEquals((-2583), javaCharStream0.getEndLine());
      assertEquals(12, javaCharStream0.getColumn());
      assertNotNull(javaParserTokenManager2);
      assertFalse(javaParserTokenManager2.equals((Object)javaParserTokenManager1));
      assertFalse(javaParserTokenManager2.equals((Object)javaParserTokenManager0));
      
      javaParserTokenManager2.SkipLexicalActions(token0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(1, javaCharStream0.bufpos);
      assertEquals((-2583), token0.beginLine);
      assertEquals(74, token0.kind);
      assertEquals(11, token0.beginColumn);
      assertEquals((-2583), token0.endLine);
      assertEquals(12, token0.endColumn);
      assertEquals(12, javaCharStream0.getEndColumn());
      assertEquals(11, javaCharStream0.getBeginColumn());
      assertEquals((-2583), javaCharStream0.getLine());
      assertEquals((-2583), javaCharStream0.getBeginLine());
      assertEquals((-2583), javaCharStream0.getEndLine());
      assertEquals(12, javaCharStream0.getColumn());
      assertEquals("aB", token0.toString());
      assertNotSame(javaParserTokenManager1, javaParserTokenManager0);
      assertNotSame(javaParserTokenManager1, javaParserTokenManager2);
      assertNotSame(javaParserTokenManager2, javaParserTokenManager1);
      assertNotSame(javaParserTokenManager2, javaParserTokenManager0);
      assertFalse(javaParserTokenManager1.equals((Object)javaParserTokenManager0));
      assertFalse(javaParserTokenManager1.equals((Object)javaParserTokenManager2));
      assertFalse(javaParserTokenManager2.equals((Object)javaParserTokenManager1));
      assertFalse(javaParserTokenManager2.equals((Object)javaParserTokenManager0));
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      Enumeration<InputStream> enumeration0 = (Enumeration<InputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      StringReader stringReader0 = new StringReader("=Qv&nCW`Vsfo[m");
      assertNotNull(stringReader0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, 27, 2024);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertNotNull(javaCharStream0);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertNotNull(javaParserTokenManager0);
      
      JavaParserTokenManager javaParserTokenManager1 = new JavaParserTokenManager(javaCharStream0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertNotNull(javaParserTokenManager1);
      assertFalse(javaParserTokenManager1.equals((Object)javaParserTokenManager0));
      
      Token token0 = javaParserTokenManager1.getNextToken();
      assertEquals(0, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(27, token0.endLine);
      assertEquals(2024, token0.beginColumn);
      assertEquals(27, token0.beginLine);
      assertEquals(2024, token0.endColumn);
      assertEquals(87, token0.kind);
      assertEquals(27, javaCharStream0.getBeginLine());
      assertEquals(27, javaCharStream0.getEndLine());
      assertEquals(2024, javaCharStream0.getColumn());
      assertEquals(2024, javaCharStream0.getEndColumn());
      assertEquals(2024, javaCharStream0.getBeginColumn());
      assertEquals(27, javaCharStream0.getLine());
      assertEquals("=", token0.toString());
      assertNotSame(javaParserTokenManager1, javaParserTokenManager0);
      assertNotNull(token0);
      assertFalse(javaParserTokenManager1.equals((Object)javaParserTokenManager0));
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      assertFalse(fileDescriptor0.valid());
      assertNotNull(fileDescriptor0);
      
      StringReader stringReader0 = new StringReader("t!hR%]{");
      assertNotNull(stringReader0);
      
      StringReader stringReader1 = new StringReader("com.soops.CEN4010.JMCA.JParser.TokenMgrError");
      assertNotNull(stringReader1);
      assertFalse(stringReader1.equals((Object)stringReader0));
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader1, 45, 50, 45);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertNotNull(javaCharStream0);
      assertFalse(stringReader1.equals((Object)stringReader0));
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertNotNull(javaParserTokenManager0);
      assertFalse(stringReader1.equals((Object)stringReader0));
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertEquals(2, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(50, token0.beginColumn);
      assertEquals(74, token0.kind);
      assertEquals(52, token0.endColumn);
      assertEquals(45, token0.beginLine);
      assertEquals(45, token0.endLine);
      assertEquals(50, javaCharStream0.getBeginColumn());
      assertEquals(45, javaCharStream0.getEndLine());
      assertEquals(45, javaCharStream0.getBeginLine());
      assertEquals(45, javaCharStream0.getLine());
      assertEquals(52, javaCharStream0.getEndColumn());
      assertEquals(52, javaCharStream0.getColumn());
      assertEquals("com", token0.toString());
      assertNotSame(stringReader1, stringReader0);
      assertNotNull(token0);
      assertFalse(stringReader1.equals((Object)stringReader0));
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      assertFalse(fileDescriptor0.valid());
      assertNotNull(fileDescriptor0);
      
      StringReader stringReader0 = new StringReader("w%DN*pejbGS{#17g'Z");
      assertNotNull(stringReader0);
      
      int int0 = JavaParserConstants.LSHIFT;
      assertEquals(109, int0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, 109, 109);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertNotNull(javaCharStream0);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertNotNull(javaParserTokenManager0);
      
      javaParserTokenManager0.MoreLexicalActions();
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.bufpos);
      assertEquals(109, token0.beginLine);
      assertEquals(109, token0.endLine);
      assertEquals(74, token0.kind);
      assertEquals(109, token0.endColumn);
      assertEquals(109, token0.beginColumn);
      assertEquals(109, javaCharStream0.getBeginColumn());
      assertEquals(109, javaCharStream0.getEndColumn());
      assertEquals(109, javaCharStream0.getColumn());
      assertEquals(109, javaCharStream0.getEndLine());
      assertEquals(109, javaCharStream0.getBeginLine());
      assertEquals(109, javaCharStream0.getLine());
      assertEquals("w", token0.toString());
      assertNotNull(token0);
      
      StringReader stringReader1 = new StringReader("\"goto\"");
      assertNotNull(stringReader1);
      assertFalse(stringReader1.equals((Object)stringReader0));
      
      JavaCharStream javaCharStream1 = new JavaCharStream(stringReader1, 109, (-2064));
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream1.bufpos);
      assertEquals(0, javaCharStream1.getBeginColumn());
      assertEquals(0, javaCharStream1.getBeginLine());
      assertNotNull(javaCharStream1);
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      PipedInputStream pipedInputStream0 = new PipedInputStream(57);
      assertEquals(0, pipedInputStream0.available());
      assertNotNull(pipedInputStream0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(pipedInputStream0, 57, 46);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertEquals(0, pipedInputStream0.available());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertNotNull(javaCharStream0);
      
      StringReader stringReader0 = new StringReader("Ld5B#%\"a4eD");
      assertNotNull(stringReader0);
      
      int int0 = stringReader0.read();
      assertEquals(76, int0);
      
      JavaCharStream javaCharStream1 = new JavaCharStream(stringReader0, 1454, 1356);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream1.bufpos);
      assertEquals(0, javaCharStream1.getBeginLine());
      assertEquals(0, javaCharStream1.getBeginColumn());
      assertNotNull(javaCharStream1);
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream1);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream1.bufpos);
      assertEquals(0, javaCharStream1.getBeginLine());
      assertEquals(0, javaCharStream1.getBeginColumn());
      assertNotNull(javaParserTokenManager0);
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      
      javaParserTokenManager0.jjround = (-1);
      assertEquals(0, javaCharStream1.getBeginLine());
      assertEquals(0, javaCharStream1.getBeginColumn());
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(1, javaCharStream1.bufpos);
      assertEquals(1454, token0.endLine);
      assertEquals(1356, token0.beginColumn);
      assertEquals(1357, token0.endColumn);
      assertEquals(1454, token0.beginLine);
      assertEquals(74, token0.kind);
      assertEquals(1357, javaCharStream1.getColumn());
      assertEquals(1454, javaCharStream1.getLine());
      assertEquals(1356, javaCharStream1.getBeginColumn());
      assertEquals(1454, javaCharStream1.getEndLine());
      assertEquals(1454, javaCharStream1.getBeginLine());
      assertEquals(1357, javaCharStream1.getEndColumn());
      assertEquals("d5", token0.toString());
      assertNotSame(javaCharStream1, javaCharStream0);
      assertNotNull(token0);
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      
      JavaParserTokenManager javaParserTokenManager1 = new JavaParserTokenManager(javaCharStream1);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(1, javaCharStream1.bufpos);
      assertEquals(1357, javaCharStream1.getColumn());
      assertEquals(1454, javaCharStream1.getLine());
      assertEquals(1356, javaCharStream1.getBeginColumn());
      assertEquals(1454, javaCharStream1.getEndLine());
      assertEquals(1454, javaCharStream1.getBeginLine());
      assertEquals(1357, javaCharStream1.getEndColumn());
      assertNotNull(javaParserTokenManager1);
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      assertFalse(javaParserTokenManager1.equals((Object)javaParserTokenManager0));
      
      Token token1 = javaParserTokenManager1.getNextToken();
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream1.bufpos);
      assertEquals(1358, token1.endColumn);
      assertEquals(1358, token1.beginColumn);
      assertEquals(1454, token1.endLine);
      assertEquals(74, token1.kind);
      assertEquals(1454, token1.beginLine);
      assertEquals(1358, javaCharStream1.getBeginColumn());
      assertEquals(1454, javaCharStream1.getLine());
      assertEquals(1454, javaCharStream1.getEndLine());
      assertEquals(1358, javaCharStream1.getColumn());
      assertEquals(1454, javaCharStream1.getBeginLine());
      assertEquals(1358, javaCharStream1.getEndColumn());
      assertEquals("B", token1.toString());
      assertNotSame(javaCharStream1, javaCharStream0);
      assertNotSame(javaParserTokenManager1, javaParserTokenManager0);
      assertNotSame(token1, token0);
      assertNotNull(token1);
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      assertFalse(javaParserTokenManager1.equals((Object)javaParserTokenManager0));
      assertFalse(token1.equals((Object)token0));
      
      // Undeclared exception!
      try { 
        javaParserTokenManager0.getNextToken();
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Lexical error at line 1454, column 1359.  Encountered: \"#\" (35), after : \"\"
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      PipedInputStream pipedInputStream0 = new PipedInputStream(28);
      assertEquals(0, pipedInputStream0.available());
      assertNotNull(pipedInputStream0);
      
      StringReader stringReader0 = new StringReader("++");
      assertNotNull(stringReader0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, 43, 28, 28);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertNotNull(javaCharStream0);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertNotNull(javaParserTokenManager0);
      
      JavaParserTokenManager javaParserTokenManager1 = new JavaParserTokenManager(javaCharStream0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertNotNull(javaParserTokenManager1);
      assertFalse(javaParserTokenManager1.equals((Object)javaParserTokenManager0));
      
      Token token0 = javaParserTokenManager1.getNextToken();
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(1, javaCharStream0.bufpos);
      assertEquals(99, token0.kind);
      assertEquals(43, token0.beginLine);
      assertEquals(29, token0.endColumn);
      assertEquals(43, token0.endLine);
      assertEquals(28, token0.beginColumn);
      assertEquals(28, javaCharStream0.getBeginColumn());
      assertEquals(29, javaCharStream0.getColumn());
      assertEquals(29, javaCharStream0.getEndColumn());
      assertEquals(43, javaCharStream0.getEndLine());
      assertEquals(43, javaCharStream0.getBeginLine());
      assertEquals(43, javaCharStream0.getLine());
      assertEquals("++", token0.toString());
      assertNotSame(javaParserTokenManager1, javaParserTokenManager0);
      assertNotNull(token0);
      assertFalse(javaParserTokenManager1.equals((Object)javaParserTokenManager0));
      
      JavaParserTokenManager javaParserTokenManager2 = null;
      try {
        javaParserTokenManager2 = new JavaParserTokenManager(javaCharStream0, 43);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Error: Ignoring invalid lexical state : 43. State unchanged.
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      PipedInputStream pipedInputStream0 = new PipedInputStream(57);
      assertEquals(0, pipedInputStream0.available());
      assertNotNull(pipedInputStream0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(pipedInputStream0, 57, 46);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, pipedInputStream0.available());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertNotNull(javaCharStream0);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, pipedInputStream0.available());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertNotNull(javaParserTokenManager0);
      
      javaParserTokenManager0.SwitchTo(3);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, pipedInputStream0.available());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      assertEquals(0, pipedInputStream0.available());
      assertNotNull(pipedInputStream0);
      
      StringReader stringReader0 = new StringReader("<Azdbx*VQOk[X_d");
      assertNotNull(stringReader0);
      
      int int0 = JavaParserConstants.INTERFACE;
      assertEquals(41, int0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, 22, 57);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertNotNull(javaCharStream0);
      
      JavaCharStream javaCharStream1 = new JavaCharStream(stringReader0);
      assertEquals((-1), javaCharStream1.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream1.getBeginColumn());
      assertEquals(0, javaCharStream1.getBeginLine());
      assertNotNull(javaCharStream1);
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      
      JavaCharStream javaCharStream2 = new JavaCharStream(pipedInputStream0, 57, 73);
      assertEquals((-1), javaCharStream2.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, pipedInputStream0.available());
      assertEquals(0, javaCharStream2.getBeginLine());
      assertEquals(0, javaCharStream2.getBeginColumn());
      assertNotNull(javaCharStream2);
      assertFalse(javaCharStream2.equals((Object)javaCharStream1));
      assertFalse(javaCharStream2.equals((Object)javaCharStream0));
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream2);
      assertEquals((-1), javaCharStream2.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, pipedInputStream0.available());
      assertEquals(0, javaCharStream2.getBeginLine());
      assertEquals(0, javaCharStream2.getBeginColumn());
      assertNotNull(javaParserTokenManager0);
      assertFalse(javaCharStream2.equals((Object)javaCharStream1));
      assertFalse(javaCharStream2.equals((Object)javaCharStream0));
      
      JavaCharStream javaCharStream3 = new JavaCharStream(stringReader0, 41, (-51));
      assertEquals((-1), javaCharStream3.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream3.getBeginColumn());
      assertEquals(0, javaCharStream3.getBeginLine());
      assertNotNull(javaCharStream3);
      assertFalse(javaCharStream3.equals((Object)javaCharStream2));
      assertFalse(javaCharStream3.equals((Object)javaCharStream1));
      assertFalse(javaCharStream3.equals((Object)javaCharStream0));
      
      JavaParserTokenManager javaParserTokenManager1 = new JavaParserTokenManager(javaCharStream3);
      assertEquals((-1), javaCharStream3.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream3.getBeginColumn());
      assertEquals(0, javaCharStream3.getBeginLine());
      assertNotNull(javaParserTokenManager1);
      assertFalse(javaCharStream3.equals((Object)javaCharStream2));
      assertFalse(javaCharStream3.equals((Object)javaCharStream1));
      assertFalse(javaCharStream3.equals((Object)javaCharStream0));
      assertFalse(javaParserTokenManager1.equals((Object)javaParserTokenManager0));
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertEquals(0, javaCharStream2.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, token0.kind);
      assertEquals(72, token0.beginColumn);
      assertEquals(57, token0.endLine);
      assertEquals(72, token0.endColumn);
      assertEquals(57, token0.beginLine);
      assertEquals(0, pipedInputStream0.available());
      assertEquals(72, javaCharStream2.getBeginColumn());
      assertEquals(72, javaCharStream2.getColumn());
      assertEquals(57, javaCharStream2.getEndLine());
      assertEquals(72, javaCharStream2.getEndColumn());
      assertEquals(57, javaCharStream2.getBeginLine());
      assertEquals(57, javaCharStream2.getLine());
      assertEquals("", token0.toString());
      assertNotSame(javaCharStream2, javaCharStream1);
      assertNotSame(javaCharStream2, javaCharStream3);
      assertNotSame(javaCharStream2, javaCharStream0);
      assertNotSame(javaParserTokenManager0, javaParserTokenManager1);
      assertNotNull(token0);
      assertFalse(javaCharStream2.equals((Object)javaCharStream1));
      assertFalse(javaCharStream2.equals((Object)javaCharStream3));
      assertFalse(javaCharStream2.equals((Object)javaCharStream0));
      assertFalse(javaParserTokenManager0.equals((Object)javaParserTokenManager1));
      
      Token token1 = javaParserTokenManager1.getNextToken();
      assertEquals(0, javaCharStream3.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-51), token1.beginColumn);
      assertEquals((-51), token1.endColumn);
      assertEquals(88, token1.kind);
      assertEquals(41, token1.endLine);
      assertEquals(41, token1.beginLine);
      assertEquals((-51), javaCharStream3.getColumn());
      assertEquals((-51), javaCharStream3.getEndColumn());
      assertEquals((-51), javaCharStream3.getBeginColumn());
      assertEquals(41, javaCharStream3.getEndLine());
      assertEquals(41, javaCharStream3.getBeginLine());
      assertEquals(41, javaCharStream3.getLine());
      assertEquals("<", token1.toString());
      assertNotSame(javaCharStream3, javaCharStream2);
      assertNotSame(javaCharStream3, javaCharStream1);
      assertNotSame(javaCharStream3, javaCharStream0);
      assertNotSame(javaParserTokenManager1, javaParserTokenManager0);
      assertNotSame(token1, token0);
      assertNotNull(token1);
      assertFalse(javaCharStream3.equals((Object)javaCharStream2));
      assertFalse(javaCharStream3.equals((Object)javaCharStream1));
      assertFalse(javaCharStream3.equals((Object)javaCharStream0));
      assertFalse(javaParserTokenManager1.equals((Object)javaParserTokenManager0));
      assertFalse(token1.equals((Object)token0));
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      assertFalse(fileDescriptor0.valid());
      assertNotNull(fileDescriptor0);
      
      StringReader stringReader0 = new StringReader("w%DN*pejbGS{#17g'Z");
      assertNotNull(stringReader0);
      
      int int0 = JavaParserConstants.LSHIFT;
      assertEquals(109, int0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, 109, 109);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertNotNull(javaCharStream0);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertNotNull(javaParserTokenManager0);
      
      javaParserTokenManager0.MoreLexicalActions();
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertEquals(0, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(109, token0.beginColumn);
      assertEquals(109, token0.beginLine);
      assertEquals(109, token0.endLine);
      assertEquals(109, token0.endColumn);
      assertEquals(74, token0.kind);
      assertEquals(109, javaCharStream0.getBeginColumn());
      assertEquals(109, javaCharStream0.getEndColumn());
      assertEquals(109, javaCharStream0.getColumn());
      assertEquals(109, javaCharStream0.getLine());
      assertEquals(109, javaCharStream0.getBeginLine());
      assertEquals(109, javaCharStream0.getEndLine());
      assertEquals("w", token0.toString());
      assertNotNull(token0);
      
      StringReader stringReader1 = new StringReader("\"goto\"");
      assertNotNull(stringReader1);
      assertFalse(stringReader1.equals((Object)stringReader0));
      
      JavaParserTokenManager javaParserTokenManager1 = new JavaParserTokenManager(javaCharStream0);
      assertEquals(0, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(109, javaCharStream0.getBeginColumn());
      assertEquals(109, javaCharStream0.getEndColumn());
      assertEquals(109, javaCharStream0.getColumn());
      assertEquals(109, javaCharStream0.getLine());
      assertEquals(109, javaCharStream0.getBeginLine());
      assertEquals(109, javaCharStream0.getEndLine());
      assertNotNull(javaParserTokenManager1);
      assertFalse(stringReader0.equals((Object)stringReader1));
      assertFalse(javaParserTokenManager1.equals((Object)javaParserTokenManager0));
      
      Token token1 = javaParserTokenManager1.getNextToken();
      assertEquals(1, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(108, token1.kind);
      assertEquals(109, token1.endLine);
      assertEquals(110, token1.endColumn);
      assertEquals(109, token1.beginLine);
      assertEquals(110, token1.beginColumn);
      assertEquals(110, javaCharStream0.getBeginColumn());
      assertEquals(110, javaCharStream0.getColumn());
      assertEquals(110, javaCharStream0.getEndColumn());
      assertEquals(109, javaCharStream0.getLine());
      assertEquals(109, javaCharStream0.getBeginLine());
      assertEquals(109, javaCharStream0.getEndLine());
      assertEquals("%", token1.toString());
      assertNotSame(stringReader0, stringReader1);
      assertNotSame(javaParserTokenManager1, javaParserTokenManager0);
      assertNotSame(token1, token0);
      assertNotNull(token1);
      assertFalse(stringReader0.equals((Object)stringReader1));
      assertFalse(javaParserTokenManager1.equals((Object)javaParserTokenManager0));
      assertFalse(token1.equals((Object)token0));
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      StringReader stringReader0 = new StringReader("FoFqL*&l!43Zy");
      assertNotNull(stringReader0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, (-797), (-797));
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertNotNull(javaCharStream0);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertNotNull(javaParserTokenManager0);
      
      // Undeclared exception!
      try { 
        javaParserTokenManager0.ReInit(javaCharStream0, (-797));
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Error: Ignoring invalid lexical state : -797. State unchanged.
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      StringReader stringReader0 = new StringReader("{Cm");
      assertNotNull(stringReader0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, 31, 31);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertNotNull(javaCharStream0);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertNotNull(javaParserTokenManager0);
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertEquals(0, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(79, token0.kind);
      assertEquals(31, token0.endLine);
      assertEquals(31, token0.beginColumn);
      assertEquals(31, token0.endColumn);
      assertEquals(31, token0.beginLine);
      assertEquals(31, javaCharStream0.getEndLine());
      assertEquals(31, javaCharStream0.getLine());
      assertEquals(31, javaCharStream0.getEndColumn());
      assertEquals(31, javaCharStream0.getBeginColumn());
      assertEquals(31, javaCharStream0.getBeginLine());
      assertEquals(31, javaCharStream0.getColumn());
      assertEquals("{", token0.toString());
      assertNotNull(token0);
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager((JavaCharStream) null);
      assertNotNull(javaParserTokenManager0);
      
      javaParserTokenManager0.MoreLexicalActions();
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      StringReader stringReader0 = new StringReader("nvull");
      assertNotNull(stringReader0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, 41, 2147418127);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertNotNull(javaCharStream0);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertNotNull(javaParserTokenManager0);
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(4, javaCharStream0.bufpos);
      assertEquals(2147418127, token0.beginColumn);
      assertEquals(2147418131, token0.endColumn);
      assertEquals(74, token0.kind);
      assertEquals(41, token0.beginLine);
      assertEquals(41, token0.endLine);
      assertEquals(41, javaCharStream0.getLine());
      assertEquals(2147418131, javaCharStream0.getEndColumn());
      assertEquals(2147418131, javaCharStream0.getColumn());
      assertEquals(41, javaCharStream0.getEndLine());
      assertEquals(2147418127, javaCharStream0.getBeginColumn());
      assertEquals(41, javaCharStream0.getBeginLine());
      assertEquals("nvull", token0.toString());
      assertNotNull(token0);
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      StringReader stringReader0 = new StringReader("\" \"");
      assertNotNull(stringReader0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, 11, 108, 45);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertNotNull(javaCharStream0);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertNotNull(javaParserTokenManager0);
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertEquals(2, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(108, token0.beginColumn);
      assertEquals(11, token0.beginLine);
      assertEquals(73, token0.kind);
      assertEquals(11, token0.endLine);
      assertEquals(110, token0.endColumn);
      assertEquals(11, javaCharStream0.getLine());
      assertEquals(110, javaCharStream0.getEndColumn());
      assertEquals(11, javaCharStream0.getBeginLine());
      assertEquals(110, javaCharStream0.getColumn());
      assertEquals(11, javaCharStream0.getEndLine());
      assertEquals(108, javaCharStream0.getBeginColumn());
      assertEquals("\" \"", token0.toString());
      assertNotNull(token0);
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      StringReader stringReader0 = new StringReader("<Azdbx*VQOk[X_d");
      assertNotNull(stringReader0);
      
      int int0 = JavaParserConstants.INTERFACE;
      assertEquals(41, int0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, 22, 57);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertNotNull(javaCharStream0);
      
      JavaCharStream javaCharStream1 = new JavaCharStream(stringReader0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream1.bufpos);
      assertEquals(0, javaCharStream1.getBeginColumn());
      assertEquals(0, javaCharStream1.getBeginLine());
      assertNotNull(javaCharStream1);
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      
      JavaCharStream javaCharStream2 = new JavaCharStream(stringReader0, 41, (-51));
      assertEquals((-1), javaCharStream2.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream2.getBeginColumn());
      assertEquals(0, javaCharStream2.getBeginLine());
      assertNotNull(javaCharStream2);
      assertFalse(javaCharStream2.equals((Object)javaCharStream1));
      assertFalse(javaCharStream2.equals((Object)javaCharStream0));
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream2);
      assertEquals((-1), javaCharStream2.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream2.getBeginColumn());
      assertEquals(0, javaCharStream2.getBeginLine());
      assertNotNull(javaParserTokenManager0);
      assertFalse(javaCharStream2.equals((Object)javaCharStream1));
      assertFalse(javaCharStream2.equals((Object)javaCharStream0));
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertEquals(0, javaCharStream2.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-51), token0.endColumn);
      assertEquals((-51), token0.beginColumn);
      assertEquals(41, token0.beginLine);
      assertEquals(88, token0.kind);
      assertEquals(41, token0.endLine);
      assertEquals(41, javaCharStream2.getBeginLine());
      assertEquals((-51), javaCharStream2.getColumn());
      assertEquals((-51), javaCharStream2.getEndColumn());
      assertEquals(41, javaCharStream2.getEndLine());
      assertEquals((-51), javaCharStream2.getBeginColumn());
      assertEquals(41, javaCharStream2.getLine());
      assertEquals("<", token0.toString());
      assertNotSame(javaCharStream2, javaCharStream1);
      assertNotSame(javaCharStream2, javaCharStream0);
      assertNotNull(token0);
      assertFalse(javaCharStream2.equals((Object)javaCharStream1));
      assertFalse(javaCharStream2.equals((Object)javaCharStream0));
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      StringReader stringReader0 = new StringReader("f%3T%gku6");
      assertNotNull(stringReader0);
      
      int int0 = stringReader0.read();
      assertEquals(102, int0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, 84, 1024);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertNotNull(javaCharStream0);
      
      boolean boolean0 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "");
      assertFalse(boolean0);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertNotNull(javaParserTokenManager0);
      
      javaParserTokenManager0.ReInit(javaCharStream0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      
      JavaParserTokenManager javaParserTokenManager1 = new JavaParserTokenManager(javaCharStream0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertNotNull(javaParserTokenManager1);
      assertFalse(javaParserTokenManager1.equals((Object)javaParserTokenManager0));
      
      Token token0 = javaParserTokenManager1.getNextToken();
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.bufpos);
      assertEquals(1024, token0.beginColumn);
      assertEquals(84, token0.endLine);
      assertEquals(84, token0.beginLine);
      assertEquals(1024, token0.endColumn);
      assertEquals(108, token0.kind);
      assertEquals(84, javaCharStream0.getEndLine());
      assertEquals(1024, javaCharStream0.getEndColumn());
      assertEquals(1024, javaCharStream0.getBeginColumn());
      assertEquals(84, javaCharStream0.getBeginLine());
      assertEquals(1024, javaCharStream0.getColumn());
      assertEquals(84, javaCharStream0.getLine());
      assertEquals("%", token0.toString());
      assertNotSame(javaParserTokenManager1, javaParserTokenManager0);
      assertNotNull(token0);
      assertFalse(javaParserTokenManager1.equals((Object)javaParserTokenManager0));
      
      char char0 = javaCharStream0.ReadByte();
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.bufpos);
      assertEquals(84, javaCharStream0.getEndLine());
      assertEquals(1024, javaCharStream0.getEndColumn());
      assertEquals(1024, javaCharStream0.getBeginColumn());
      assertEquals(84, javaCharStream0.getBeginLine());
      assertEquals(1024, javaCharStream0.getColumn());
      assertEquals(84, javaCharStream0.getLine());
      assertEquals('T', char0);
      
      Token token1 = javaParserTokenManager0.getNextToken();
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(1, javaCharStream0.bufpos);
      assertEquals(1025, token1.endColumn);
      assertEquals(84, token1.beginLine);
      assertEquals(1025, token1.beginColumn);
      assertEquals(84, token1.endLine);
      assertEquals(66, token1.kind);
      assertEquals(84, javaCharStream0.getEndLine());
      assertEquals(1025, javaCharStream0.getEndColumn());
      assertEquals(1025, javaCharStream0.getBeginColumn());
      assertEquals(84, javaCharStream0.getBeginLine());
      assertEquals(84, javaCharStream0.getLine());
      assertEquals(1025, javaCharStream0.getColumn());
      assertEquals("3", token1.toString());
      assertNotSame(javaParserTokenManager0, javaParserTokenManager1);
      assertNotSame(token1, token0);
      assertNotNull(token1);
      assertFalse(javaParserTokenManager0.equals((Object)javaParserTokenManager1));
      assertFalse(token1.equals((Object)token0));
      
      Token token2 = javaParserTokenManager1.getNextToken();
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(2, javaCharStream0.bufpos);
      assertEquals(84, token2.beginLine);
      assertEquals(1026, token2.beginColumn);
      assertEquals(1026, token2.endColumn);
      assertEquals(108, token2.kind);
      assertEquals(84, token2.endLine);
      assertEquals(84, javaCharStream0.getEndLine());
      assertEquals(1026, javaCharStream0.getEndColumn());
      assertEquals(1026, javaCharStream0.getBeginColumn());
      assertEquals(1026, javaCharStream0.getColumn());
      assertEquals(84, javaCharStream0.getBeginLine());
      assertEquals(84, javaCharStream0.getLine());
      assertEquals("%", token2.toString());
      assertNotSame(javaParserTokenManager1, javaParserTokenManager0);
      assertNotSame(token2, token0);
      assertNotSame(token2, token1);
      assertNotNull(token2);
      assertFalse(javaParserTokenManager1.equals((Object)javaParserTokenManager0));
      assertFalse(token2.equals((Object)token0));
      assertFalse(token2.equals((Object)token1));
      
      Token token3 = javaParserTokenManager1.getNextToken();
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(6, javaCharStream0.bufpos);
      assertEquals(74, token3.kind);
      assertEquals(1030, token3.endColumn);
      assertEquals(84, token3.endLine);
      assertEquals(1027, token3.beginColumn);
      assertEquals(84, token3.beginLine);
      assertEquals(1030, javaCharStream0.getColumn());
      assertEquals(84, javaCharStream0.getEndLine());
      assertEquals(1030, javaCharStream0.getEndColumn());
      assertEquals(1027, javaCharStream0.getBeginColumn());
      assertEquals(84, javaCharStream0.getBeginLine());
      assertEquals(84, javaCharStream0.getLine());
      assertEquals("gku6", token3.toString());
      assertNotSame(javaParserTokenManager1, javaParserTokenManager0);
      assertNotSame(token3, token1);
      assertNotSame(token3, token2);
      assertNotSame(token3, token0);
      assertNotNull(token3);
      assertFalse(javaParserTokenManager1.equals((Object)javaParserTokenManager0));
      assertFalse(token3.equals((Object)token1));
      assertFalse(token3.equals((Object)token2));
      assertFalse(token3.equals((Object)token0));
      
      Token token4 = javaParserTokenManager1.getNextToken();
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.bufpos);
      assertEquals(84, token4.beginLine);
      assertEquals(84, token4.endLine);
      assertEquals(1030, token4.endColumn);
      assertEquals(1030, token4.beginColumn);
      assertEquals(0, token4.kind);
      assertEquals(1030, javaCharStream0.getColumn());
      assertEquals(84, javaCharStream0.getEndLine());
      assertEquals(1030, javaCharStream0.getEndColumn());
      assertEquals(1030, javaCharStream0.getBeginColumn());
      assertEquals(84, javaCharStream0.getBeginLine());
      assertEquals(84, javaCharStream0.getLine());
      assertEquals("", token4.toString());
      assertNotSame(javaParserTokenManager1, javaParserTokenManager0);
      assertNotSame(token4, token2);
      assertNotSame(token4, token0);
      assertNotSame(token4, token1);
      assertNotSame(token4, token3);
      assertNotNull(token4);
      assertFalse(javaParserTokenManager1.equals((Object)javaParserTokenManager0));
      assertFalse(token4.equals((Object)token2));
      assertFalse(token4.equals((Object)token0));
      assertFalse(token4.equals((Object)token1));
      assertFalse(token4.equals((Object)token3));
      
      // Undeclared exception!
      try { 
        javaParserTokenManager0.SwitchTo(1025);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Error: Ignoring invalid lexical state : 1025. State unchanged.
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      JavaCharStream javaCharStream0 = null;
      int int0 = (-2732);
      JavaParserTokenManager javaParserTokenManager0 = null;
      try {
        javaParserTokenManager0 = new JavaParserTokenManager((JavaCharStream) null, (-2732));
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Error: Ignoring invalid lexical state : -2732. State unchanged.
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      PipedInputStream pipedInputStream0 = new PipedInputStream(57);
      assertEquals(0, pipedInputStream0.available());
      assertNotNull(pipedInputStream0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(pipedInputStream0, 57, 46);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, pipedInputStream0.available());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertNotNull(javaCharStream0);
      
      StringReader stringReader0 = new StringReader("]M#]");
      assertNotNull(stringReader0);
      
      JavaCharStream javaCharStream1 = new JavaCharStream(stringReader0, (-1), 57);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream1.bufpos);
      assertEquals(0, javaCharStream1.getBeginLine());
      assertEquals(0, javaCharStream1.getBeginColumn());
      assertNotNull(javaCharStream1);
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream1);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream1.bufpos);
      assertEquals(0, javaCharStream1.getBeginLine());
      assertEquals(0, javaCharStream1.getBeginColumn());
      assertNotNull(javaParserTokenManager0);
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertEquals(0, javaCharStream1.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(57, token0.beginColumn);
      assertEquals(57, token0.endColumn);
      assertEquals((-1), token0.endLine);
      assertEquals((-1), token0.beginLine);
      assertEquals(82, token0.kind);
      assertEquals(57, javaCharStream1.getColumn());
      assertEquals(57, javaCharStream1.getBeginColumn());
      assertEquals((-1), javaCharStream1.getBeginLine());
      assertEquals((-1), javaCharStream1.getLine());
      assertEquals((-1), javaCharStream1.getEndLine());
      assertEquals(57, javaCharStream1.getEndColumn());
      assertEquals("]", token0.toString());
      assertNotSame(javaCharStream1, javaCharStream0);
      assertNotNull(token0);
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "t`LYJy$=jm$_HY!");
      assertFalse(boolean0);
      
      StringReader stringReader0 = new StringReader("]OaB%.* G=}[X%Be");
      assertNotNull(stringReader0);
      
      int int0 = stringReader0.read();
      assertEquals(93, int0);
      
      int int1 = stringReader0.read();
      assertEquals(79, int1);
      assertFalse(int1 == int0);
      
      StringReader stringReader1 = new StringReader("]OaB%.* G=}[X%Be");
      assertNotNull(stringReader1);
      assertFalse(stringReader1.equals((Object)stringReader0));
      
      int int2 = stringReader0.read();
      assertEquals(97, int2);
      assertNotSame(stringReader0, stringReader1);
      assertFalse(stringReader0.equals((Object)stringReader1));
      assertFalse(int2 == int1);
      assertFalse(int2 == int0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, 972, (-638));
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertNotNull(javaCharStream0);
      assertFalse(stringReader0.equals((Object)stringReader1));
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertNotNull(javaParserTokenManager0);
      assertFalse(stringReader0.equals((Object)stringReader1));
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.bufpos);
      assertEquals(972, token0.beginLine);
      assertEquals(74, token0.kind);
      assertEquals(972, token0.endLine);
      assertEquals((-638), token0.beginColumn);
      assertEquals((-638), token0.endColumn);
      assertEquals((-638), javaCharStream0.getColumn());
      assertEquals((-638), javaCharStream0.getBeginColumn());
      assertEquals((-638), javaCharStream0.getEndColumn());
      assertEquals(972, javaCharStream0.getEndLine());
      assertEquals(972, javaCharStream0.getBeginLine());
      assertEquals(972, javaCharStream0.getLine());
      assertEquals("B", token0.toString());
      assertNotSame(stringReader0, stringReader1);
      assertNotNull(token0);
      assertFalse(stringReader0.equals((Object)stringReader1));
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)106;
      byteArray0[1] = (byte)120;
      byteArray0[2] = (byte)86;
      byteArray0[3] = (byte)123;
      byteArray0[4] = (byte) (-94);
      byteArray0[5] = (byte) (-30);
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      assertArrayEquals(new byte[] {(byte)106, (byte)120, (byte)86, (byte)123, (byte) (-94), (byte) (-30)}, byteArray0);
      assertEquals(6, byteArrayInputStream0.available());
      assertNotNull(byteArrayInputStream0);
      assertEquals(6, byteArray0.length);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(byteArrayInputStream0, (byte) (-94), 1700, (byte) (-30));
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertArrayEquals(new byte[] {(byte)106, (byte)120, (byte)86, (byte)123, (byte) (-94), (byte) (-30)}, byteArray0);
      assertEquals(6, byteArrayInputStream0.available());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertNotNull(javaCharStream0);
      assertEquals(6, byteArray0.length);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertArrayEquals(new byte[] {(byte)106, (byte)120, (byte)86, (byte)123, (byte) (-94), (byte) (-30)}, byteArray0);
      assertEquals(6, byteArrayInputStream0.available());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertNotNull(javaParserTokenManager0);
      assertEquals(6, byteArray0.length);
      
      javaCharStream0.ReInit((InputStream) byteArrayInputStream0, 44, 120, (int) (byte)123);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertArrayEquals(new byte[] {(byte)106, (byte)120, (byte)86, (byte)123, (byte) (-94), (byte) (-30)}, byteArray0);
      assertEquals(6, byteArrayInputStream0.available());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(6, byteArray0.length);
      
      javaParserTokenManager0.curChar = '}';
      assertEquals(6, byteArrayInputStream0.available());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      
      javaParserTokenManager0.ReInit(javaCharStream0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertArrayEquals(new byte[] {(byte)106, (byte)120, (byte)86, (byte)123, (byte) (-94), (byte) (-30)}, byteArray0);
      assertEquals(6, byteArrayInputStream0.available());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(6, byteArray0.length);
      
      MockPrintStream mockPrintStream0 = new MockPrintStream(javaParserTokenManager0.debugStream);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertArrayEquals(new byte[] {(byte)106, (byte)120, (byte)86, (byte)123, (byte) (-94), (byte) (-30)}, byteArray0);
      assertNotNull(mockPrintStream0);
      assertEquals(6, byteArray0.length);
      
      mockPrintStream0.println(0.0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertArrayEquals(new byte[] {(byte)106, (byte)120, (byte)86, (byte)123, (byte) (-94), (byte) (-30)}, byteArray0);
      assertEquals(6, byteArrayInputStream0.available());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(6, byteArray0.length);
      
      PrintStream printStream0 = mockPrintStream0.append((CharSequence) null);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertArrayEquals(new byte[] {(byte)106, (byte)120, (byte)86, (byte)123, (byte) (-94), (byte) (-30)}, byteArray0);
      assertEquals(6, byteArrayInputStream0.available());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertSame(mockPrintStream0, printStream0);
      assertSame(printStream0, mockPrintStream0);
      assertNotNull(printStream0);
      assertEquals(6, byteArray0.length);
      
      javaParserTokenManager0.setDebugStream(printStream0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertArrayEquals(new byte[] {(byte)106, (byte)120, (byte)86, (byte)123, (byte) (-94), (byte) (-30)}, byteArray0);
      assertEquals(6, byteArrayInputStream0.available());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertSame(mockPrintStream0, printStream0);
      assertSame(printStream0, mockPrintStream0);
      assertEquals(6, byteArray0.length);
      
      // Undeclared exception!
      try { 
        javaParserTokenManager0.ReInit(javaCharStream0, 3114);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Error: Ignoring invalid lexical state : 3114. State unchanged.
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      PipedInputStream pipedInputStream0 = new PipedInputStream(57);
      assertEquals(0, pipedInputStream0.available());
      assertNotNull(pipedInputStream0);
      
      StringReader stringReader0 = new StringReader("IN_MULTI_LINE_COMMENT");
      assertNotNull(stringReader0);
      
      StringReader stringReader1 = new StringReader("");
      assertNotNull(stringReader1);
      assertFalse(stringReader1.equals((Object)stringReader0));
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, (-772), 40);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertNotNull(javaCharStream0);
      assertFalse(stringReader0.equals((Object)stringReader1));
      
      JavaCharStream javaCharStream1 = new JavaCharStream(stringReader1, (-1), 40);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream1.bufpos);
      assertEquals(0, javaCharStream1.getBeginColumn());
      assertEquals(0, javaCharStream1.getBeginLine());
      assertNotNull(javaCharStream1);
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertNotNull(javaParserTokenManager0);
      assertFalse(stringReader0.equals((Object)stringReader1));
      assertFalse(javaCharStream0.equals((Object)javaCharStream1));
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(20, javaCharStream0.bufpos);
      assertEquals(40, token0.beginColumn);
      assertEquals((-772), token0.beginLine);
      assertEquals(74, token0.kind);
      assertEquals(60, token0.endColumn);
      assertEquals((-772), token0.endLine);
      assertEquals(40, javaCharStream0.getBeginColumn());
      assertEquals(60, javaCharStream0.getColumn());
      assertEquals((-772), javaCharStream0.getEndLine());
      assertEquals((-772), javaCharStream0.getLine());
      assertEquals((-772), javaCharStream0.getBeginLine());
      assertEquals(60, javaCharStream0.getEndColumn());
      assertEquals("IN_MULTI_LINE_COMMENT", token0.toString());
      assertNotSame(stringReader0, stringReader1);
      assertNotSame(javaCharStream0, javaCharStream1);
      assertNotNull(token0);
      assertFalse(stringReader0.equals((Object)stringReader1));
      assertFalse(javaCharStream0.equals((Object)javaCharStream1));
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      assertFalse(fileDescriptor0.valid());
      assertNotNull(fileDescriptor0);
      
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      assertEquals(0, pipedInputStream0.available());
      assertNotNull(pipedInputStream0);
      
      pipedInputStream0.close();
      assertEquals(0, pipedInputStream0.available());
      
      JavaCharStream javaCharStream0 = new JavaCharStream(pipedInputStream0, 5, (-45));
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, pipedInputStream0.available());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertNotNull(javaCharStream0);
      
      StringReader stringReader0 = new StringReader("O.XU8p@j,S");
      assertNotNull(stringReader0);
      
      JavaCharStream javaCharStream1 = new JavaCharStream(stringReader0, (-45), 1773);
      assertEquals((-1), javaCharStream1.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream1.getBeginLine());
      assertEquals(0, javaCharStream1.getBeginColumn());
      assertNotNull(javaCharStream1);
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream1);
      assertEquals((-1), javaCharStream1.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream1.getBeginLine());
      assertEquals(0, javaCharStream1.getBeginColumn());
      assertNotNull(javaParserTokenManager0);
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertEquals(0, javaCharStream1.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(74, token0.kind);
      assertEquals((-45), token0.beginLine);
      assertEquals((-45), token0.endLine);
      assertEquals(1773, token0.endColumn);
      assertEquals(1773, token0.beginColumn);
      assertEquals((-45), javaCharStream1.getBeginLine());
      assertEquals(1773, javaCharStream1.getBeginColumn());
      assertEquals((-45), javaCharStream1.getEndLine());
      assertEquals(1773, javaCharStream1.getEndColumn());
      assertEquals(1773, javaCharStream1.getColumn());
      assertEquals((-45), javaCharStream1.getLine());
      assertEquals("O", token0.toString());
      assertNotSame(javaCharStream1, javaCharStream0);
      assertNotNull(token0);
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      
      javaParserTokenManager0.TokenLexicalActions(token0);
      assertEquals(0, javaCharStream1.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(74, token0.kind);
      assertEquals((-45), token0.beginLine);
      assertEquals((-45), token0.endLine);
      assertEquals(1773, token0.endColumn);
      assertEquals(1773, token0.beginColumn);
      assertEquals((-45), javaCharStream1.getBeginLine());
      assertEquals(1773, javaCharStream1.getBeginColumn());
      assertEquals((-45), javaCharStream1.getEndLine());
      assertEquals(1773, javaCharStream1.getEndColumn());
      assertEquals(1773, javaCharStream1.getColumn());
      assertEquals((-45), javaCharStream1.getLine());
      assertEquals("O", token0.toString());
      assertNotSame(javaCharStream1, javaCharStream0);
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      assertFalse(fileDescriptor0.valid());
      assertNotNull(fileDescriptor0);
      
      PipedInputStream pipedInputStream0 = new PipedInputStream(26);
      assertEquals(0, pipedInputStream0.available());
      assertNotNull(pipedInputStream0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(pipedInputStream0, 5, (-45));
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertEquals(0, pipedInputStream0.available());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertNotNull(javaCharStream0);
      
      StringReader stringReader0 = new StringReader("t!hR%]{");
      assertNotNull(stringReader0);
      
      javaCharStream0.maxNextCharInd = 26;
      assertEquals(0, pipedInputStream0.available());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      
      StringReader stringReader1 = new StringReader("vq3?/o!T|sTtH");
      assertNotNull(stringReader1);
      assertFalse(stringReader1.equals((Object)stringReader0));
      
      JavaCharStream javaCharStream1 = new JavaCharStream(stringReader1, 26, 26);
      assertEquals((-1), javaCharStream1.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream1.getBeginColumn());
      assertEquals(0, javaCharStream1.getBeginLine());
      assertNotNull(javaCharStream1);
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertEquals(0, pipedInputStream0.available());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertNotNull(javaParserTokenManager0);
      assertFalse(javaCharStream0.equals((Object)javaCharStream1));
      
      // Undeclared exception!
      try { 
        javaParserTokenManager0.getNextToken();
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Lexical error at line 5, column -45.  Encountered: \"\" (0), after : \"\"
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      StringReader stringReader0 = new StringReader("iK");
      assertNotNull(stringReader0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, 803, 2147418127);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertNotNull(javaCharStream0);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertNotNull(javaParserTokenManager0);
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(1, javaCharStream0.bufpos);
      assertEquals(2147418127, token0.beginColumn);
      assertEquals(803, token0.endLine);
      assertEquals(2147418128, token0.endColumn);
      assertEquals(803, token0.beginLine);
      assertEquals(74, token0.kind);
      assertEquals(803, javaCharStream0.getEndLine());
      assertEquals(803, javaCharStream0.getLine());
      assertEquals(2147418127, javaCharStream0.getBeginColumn());
      assertEquals(2147418128, javaCharStream0.getColumn());
      assertEquals(2147418128, javaCharStream0.getEndColumn());
      assertEquals(803, javaCharStream0.getBeginLine());
      assertEquals("iK", token0.toString());
      assertNotNull(token0);
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      StringReader stringReader0 = new StringReader("FoFqL*&l!43Zy");
      assertNotNull(stringReader0);
      
      stringReader0.reset();
      StringReader stringReader1 = new StringReader("zM=VltY$@}GjjX");
      assertNotNull(stringReader1);
      assertFalse(stringReader1.equals((Object)stringReader0));
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader1, 1436, 5, 5);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertNotNull(javaCharStream0);
      assertFalse(stringReader1.equals((Object)stringReader0));
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertNotNull(javaParserTokenManager0);
      assertFalse(stringReader1.equals((Object)stringReader0));
      
      javaParserTokenManager0.MoreLexicalActions();
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertNotSame(stringReader1, stringReader0);
      assertFalse(stringReader1.equals((Object)stringReader0));
      
      Token token0 = new Token();
      assertEquals(0, token0.kind);
      assertEquals(0, token0.beginLine);
      assertEquals(0, token0.endLine);
      assertEquals(0, token0.endColumn);
      assertEquals(0, token0.beginColumn);
      assertNull(token0.toString());
      assertNotNull(token0);
      
      Token token1 = javaParserTokenManager0.getNextToken();
      assertEquals(1, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(1436, token1.beginLine);
      assertEquals(5, token1.beginColumn);
      assertEquals(6, token1.endColumn);
      assertEquals(74, token1.kind);
      assertEquals(1436, token1.endLine);
      assertEquals(1436, javaCharStream0.getEndLine());
      assertEquals(1436, javaCharStream0.getLine());
      assertEquals(5, javaCharStream0.getBeginColumn());
      assertEquals(6, javaCharStream0.getColumn());
      assertEquals(6, javaCharStream0.getEndColumn());
      assertEquals(1436, javaCharStream0.getBeginLine());
      assertEquals("zM", token1.toString());
      assertNotSame(stringReader1, stringReader0);
      assertNotSame(token1, token0);
      assertNotNull(token1);
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertFalse(token1.equals((Object)token0));
      
      Enumeration<PipedInputStream> enumeration0 = (Enumeration<PipedInputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(enumeration0).hasMoreElements();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      assertNotNull(sequenceInputStream0);
      
      JavaCharStream javaCharStream1 = new JavaCharStream(sequenceInputStream0, 0, 1436, (-1717));
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream1.bufpos);
      assertEquals(0, javaCharStream1.getBeginLine());
      assertEquals(0, javaCharStream1.getBeginColumn());
      assertNotNull(javaCharStream1);
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      
      // Undeclared exception!
      try { 
        javaParserTokenManager0.SwitchTo(1436);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Error: Ignoring invalid lexical state : 1436. State unchanged.
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      StringReader stringReader0 = new StringReader("nvull");
      assertNotNull(stringReader0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, 2313, 2301);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertNotNull(javaCharStream0);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertNotNull(javaParserTokenManager0);
      
      javaParserTokenManager0.curLexState = 2301;
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.bufpos);
      assertEquals(2313, token0.beginLine);
      assertEquals(0, token0.kind);
      assertEquals(2301, token0.beginColumn);
      assertEquals(2313, token0.endLine);
      assertEquals(2301, token0.endColumn);
      assertEquals(2313, javaCharStream0.getLine());
      assertEquals(2313, javaCharStream0.getEndLine());
      assertEquals(2301, javaCharStream0.getColumn());
      assertEquals(2313, javaCharStream0.getBeginLine());
      assertEquals(2301, javaCharStream0.getBeginColumn());
      assertEquals(2301, javaCharStream0.getEndColumn());
      assertEquals("", token0.toString());
      assertNotNull(token0);
      
      Token token1 = javaParserTokenManager0.getNextToken();
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.bufpos);
      assertEquals(0, token1.kind);
      assertEquals(2302, token1.endColumn);
      assertEquals(2302, token1.beginColumn);
      assertEquals(2313, token1.endLine);
      assertEquals(2313, token1.beginLine);
      assertEquals(2313, javaCharStream0.getLine());
      assertEquals(2313, javaCharStream0.getEndLine());
      assertEquals(2302, javaCharStream0.getColumn());
      assertEquals(2313, javaCharStream0.getBeginLine());
      assertEquals(2302, javaCharStream0.getBeginColumn());
      assertEquals(2302, javaCharStream0.getEndColumn());
      assertEquals("", token1.toString());
      assertNotSame(token1, token0);
      assertNotNull(token1);
      assertFalse(token1.equals((Object)token0));
      
      Token token2 = javaParserTokenManager0.jjFillToken();
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.bufpos);
      assertEquals(2313, token2.endLine);
      assertEquals(2313, token2.beginLine);
      assertEquals(0, token2.kind);
      assertEquals(2302, token2.endColumn);
      assertEquals(2302, token2.beginColumn);
      assertEquals(2313, javaCharStream0.getLine());
      assertEquals(2313, javaCharStream0.getEndLine());
      assertEquals(2302, javaCharStream0.getColumn());
      assertEquals(2313, javaCharStream0.getBeginLine());
      assertEquals(2302, javaCharStream0.getBeginColumn());
      assertEquals(2302, javaCharStream0.getEndColumn());
      assertEquals("", token2.toString());
      assertNotSame(token2, token1);
      assertNotSame(token2, token0);
      assertNotNull(token2);
      assertFalse(token2.equals((Object)token1));
      assertFalse(token2.equals((Object)token0));
      
      Token token3 = javaParserTokenManager0.jjFillToken();
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.bufpos);
      assertEquals(2313, token3.endLine);
      assertEquals(2302, token3.endColumn);
      assertEquals(2302, token3.beginColumn);
      assertEquals(0, token3.kind);
      assertEquals(2313, token3.beginLine);
      assertEquals(2313, javaCharStream0.getLine());
      assertEquals(2313, javaCharStream0.getEndLine());
      assertEquals(2302, javaCharStream0.getColumn());
      assertEquals(2313, javaCharStream0.getBeginLine());
      assertEquals(2302, javaCharStream0.getBeginColumn());
      assertEquals(2302, javaCharStream0.getEndColumn());
      assertEquals("", token3.toString());
      assertNotSame(token3, token0);
      assertNotSame(token3, token2);
      assertNotSame(token3, token1);
      assertNotNull(token3);
      assertFalse(token3.equals((Object)token0));
      assertFalse(token3.equals((Object)token2));
      assertFalse(token3.equals((Object)token1));
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      StringReader stringReader0 = new StringReader("k~~OK");
      assertNotNull(stringReader0);
      
      StringReader stringReader1 = new StringReader("y{L");
      assertNotNull(stringReader1);
      assertFalse(stringReader1.equals((Object)stringReader0));
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, 937, 40, 937);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertNotNull(javaCharStream0);
      assertFalse(stringReader0.equals((Object)stringReader1));
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertNotNull(javaParserTokenManager0);
      assertFalse(stringReader0.equals((Object)stringReader1));
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.bufpos);
      assertEquals(937, token0.endLine);
      assertEquals(74, token0.kind);
      assertEquals(937, token0.beginLine);
      assertEquals(40, token0.beginColumn);
      assertEquals(40, token0.endColumn);
      assertEquals(40, javaCharStream0.getColumn());
      assertEquals(40, javaCharStream0.getBeginColumn());
      assertEquals(937, javaCharStream0.getEndLine());
      assertEquals(40, javaCharStream0.getEndColumn());
      assertEquals(937, javaCharStream0.getBeginLine());
      assertEquals(937, javaCharStream0.getLine());
      assertEquals("k", token0.toString());
      assertNotSame(stringReader0, stringReader1);
      assertNotNull(token0);
      assertFalse(stringReader0.equals((Object)stringReader1));
      
      Token token1 = javaParserTokenManager0.getNextToken();
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(1, javaCharStream0.bufpos);
      assertEquals(41, token1.endColumn);
      assertEquals(937, token1.endLine);
      assertEquals(90, token1.kind);
      assertEquals(937, token1.beginLine);
      assertEquals(41, token1.beginColumn);
      assertEquals(41, javaCharStream0.getBeginColumn());
      assertEquals(41, javaCharStream0.getColumn());
      assertEquals(937, javaCharStream0.getEndLine());
      assertEquals(937, javaCharStream0.getBeginLine());
      assertEquals(41, javaCharStream0.getEndColumn());
      assertEquals(937, javaCharStream0.getLine());
      assertEquals("~", token1.toString());
      assertNotSame(stringReader0, stringReader1);
      assertNotSame(token1, token0);
      assertNotNull(token1);
      assertFalse(stringReader0.equals((Object)stringReader1));
      assertFalse(token1.equals((Object)token0));
      
      javaParserTokenManager0.MoreLexicalActions();
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(1, javaCharStream0.bufpos);
      assertEquals(41, javaCharStream0.getBeginColumn());
      assertEquals(41, javaCharStream0.getColumn());
      assertEquals(937, javaCharStream0.getEndLine());
      assertEquals(937, javaCharStream0.getBeginLine());
      assertEquals(41, javaCharStream0.getEndColumn());
      assertEquals(937, javaCharStream0.getLine());
      assertNotSame(stringReader0, stringReader1);
      assertFalse(stringReader0.equals((Object)stringReader1));
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      PipedInputStream pipedInputStream0 = new PipedInputStream(57);
      assertEquals(0, pipedInputStream0.available());
      assertNotNull(pipedInputStream0);
      
      boolean boolean0 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "a5@,");
      assertFalse(boolean0);
      
      StringReader stringReader0 = new StringReader("a5@,");
      assertNotNull(stringReader0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, (-1923), 18, 128);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertNotNull(javaCharStream0);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertNotNull(javaParserTokenManager0);
      
      JavaCharStream javaCharStream1 = new JavaCharStream(stringReader0);
      assertEquals((-1), javaCharStream1.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream1.getBeginColumn());
      assertEquals(0, javaCharStream1.getBeginLine());
      assertNotNull(javaCharStream1);
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      
      JavaParserTokenManager javaParserTokenManager1 = new JavaParserTokenManager(javaCharStream1);
      assertEquals((-1), javaCharStream1.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream1.getBeginColumn());
      assertEquals(0, javaCharStream1.getBeginLine());
      assertNotNull(javaParserTokenManager1);
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      assertFalse(javaParserTokenManager1.equals((Object)javaParserTokenManager0));
      
      JavaParserTokenManager javaParserTokenManager2 = new JavaParserTokenManager(javaCharStream0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertNotNull(javaParserTokenManager2);
      assertFalse(javaCharStream0.equals((Object)javaCharStream1));
      assertFalse(javaParserTokenManager2.equals((Object)javaParserTokenManager1));
      assertFalse(javaParserTokenManager2.equals((Object)javaParserTokenManager0));
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertEquals(1, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(18, token0.beginColumn);
      assertEquals(74, token0.kind);
      assertEquals((-1923), token0.endLine);
      assertEquals(19, token0.endColumn);
      assertEquals((-1923), token0.beginLine);
      assertEquals(19, javaCharStream0.getColumn());
      assertEquals(19, javaCharStream0.getEndColumn());
      assertEquals((-1923), javaCharStream0.getBeginLine());
      assertEquals(18, javaCharStream0.getBeginColumn());
      assertEquals((-1923), javaCharStream0.getEndLine());
      assertEquals((-1923), javaCharStream0.getLine());
      assertEquals("a5", token0.toString());
      assertNotSame(javaCharStream0, javaCharStream1);
      assertNotSame(javaParserTokenManager0, javaParserTokenManager1);
      assertNotSame(javaParserTokenManager0, javaParserTokenManager2);
      assertNotNull(token0);
      assertFalse(javaCharStream0.equals((Object)javaCharStream1));
      assertFalse(javaParserTokenManager0.equals((Object)javaParserTokenManager1));
      assertFalse(javaParserTokenManager0.equals((Object)javaParserTokenManager2));
      
      Token token1 = javaParserTokenManager1.getNextToken();
      assertEquals(0, javaCharStream1.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(1, token1.beginLine);
      assertEquals(0, token1.beginColumn);
      assertEquals(0, token1.kind);
      assertEquals(1, token1.endLine);
      assertEquals(0, token1.endColumn);
      assertEquals(0, javaCharStream1.getBeginColumn());
      assertEquals(0, javaCharStream1.getColumn());
      assertEquals(0, javaCharStream1.getEndColumn());
      assertEquals(1, javaCharStream1.getLine());
      assertEquals(1, javaCharStream1.getBeginLine());
      assertEquals(1, javaCharStream1.getEndLine());
      assertEquals("", token1.toString());
      assertNotSame(javaCharStream1, javaCharStream0);
      assertNotSame(javaParserTokenManager1, javaParserTokenManager0);
      assertNotSame(javaParserTokenManager1, javaParserTokenManager2);
      assertNotSame(token1, token0);
      assertNotNull(token1);
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      assertFalse(javaParserTokenManager1.equals((Object)javaParserTokenManager0));
      assertFalse(javaParserTokenManager1.equals((Object)javaParserTokenManager2));
      assertFalse(token1.equals((Object)token0));
      
      JavaParserTokenManager javaParserTokenManager3 = null;
      try {
        javaParserTokenManager3 = new JavaParserTokenManager(javaCharStream0, 788);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Error: Ignoring invalid lexical state : 788. State unchanged.
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      Enumeration<PipedInputStream> enumeration0 = (Enumeration<PipedInputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      StringReader stringReader0 = new StringReader("J_;G\"xWw+dT");
      assertNotNull(stringReader0);
      
      int int0 = stringReader0.read();
      assertEquals(74, int0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, 193, (-1942));
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertNotNull(javaCharStream0);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertNotNull(javaParserTokenManager0);
      
      JavaParserTokenManager javaParserTokenManager1 = new JavaParserTokenManager(javaCharStream0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertNotNull(javaParserTokenManager1);
      assertFalse(javaParserTokenManager1.equals((Object)javaParserTokenManager0));
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.bufpos);
      assertEquals(193, token0.beginLine);
      assertEquals((-1942), token0.endColumn);
      assertEquals((-1942), token0.beginColumn);
      assertEquals(74, token0.kind);
      assertEquals(193, token0.endLine);
      assertEquals((-1942), javaCharStream0.getEndColumn());
      assertEquals((-1942), javaCharStream0.getBeginColumn());
      assertEquals(193, javaCharStream0.getBeginLine());
      assertEquals((-1942), javaCharStream0.getColumn());
      assertEquals(193, javaCharStream0.getLine());
      assertEquals(193, javaCharStream0.getEndLine());
      assertEquals("_", token0.toString());
      assertNotSame(javaParserTokenManager0, javaParserTokenManager1);
      assertNotNull(token0);
      assertFalse(javaParserTokenManager0.equals((Object)javaParserTokenManager1));
      
      javaParserTokenManager1.TokenLexicalActions(token0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.bufpos);
      assertEquals(193, token0.beginLine);
      assertEquals((-1942), token0.endColumn);
      assertEquals((-1942), token0.beginColumn);
      assertEquals(74, token0.kind);
      assertEquals(193, token0.endLine);
      assertEquals((-1942), javaCharStream0.getEndColumn());
      assertEquals((-1942), javaCharStream0.getBeginColumn());
      assertEquals(193, javaCharStream0.getBeginLine());
      assertEquals((-1942), javaCharStream0.getColumn());
      assertEquals(193, javaCharStream0.getLine());
      assertEquals(193, javaCharStream0.getEndLine());
      assertEquals("_", token0.toString());
      assertNotSame(javaParserTokenManager0, javaParserTokenManager1);
      assertNotSame(javaParserTokenManager1, javaParserTokenManager0);
      assertFalse(javaParserTokenManager0.equals((Object)javaParserTokenManager1));
      assertFalse(javaParserTokenManager1.equals((Object)javaParserTokenManager0));
      
      javaParserTokenManager0.SkipLexicalActions(token0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.bufpos);
      assertEquals(193, token0.beginLine);
      assertEquals((-1942), token0.endColumn);
      assertEquals((-1942), token0.beginColumn);
      assertEquals(74, token0.kind);
      assertEquals(193, token0.endLine);
      assertEquals((-1942), javaCharStream0.getEndColumn());
      assertEquals((-1942), javaCharStream0.getBeginColumn());
      assertEquals(193, javaCharStream0.getBeginLine());
      assertEquals((-1942), javaCharStream0.getColumn());
      assertEquals(193, javaCharStream0.getLine());
      assertEquals(193, javaCharStream0.getEndLine());
      assertEquals("_", token0.toString());
      assertNotSame(javaParserTokenManager0, javaParserTokenManager1);
      assertFalse(javaParserTokenManager0.equals((Object)javaParserTokenManager1));
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      assertFalse(fileDescriptor0.valid());
      assertNotNull(fileDescriptor0);
      
      StringReader stringReader0 = new StringReader("-kPxJ{(]&58H");
      assertNotNull(stringReader0);
      
      int int0 = stringReader0.read();
      assertEquals(45, int0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, 4, (-3650));
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertNotNull(javaCharStream0);
      
      boolean boolean0 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "-kPxJ{(]&58H");
      assertFalse(boolean0);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertNotNull(javaParserTokenManager0);
      
      JavaParserTokenManager javaParserTokenManager1 = new JavaParserTokenManager(javaCharStream0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertNotNull(javaParserTokenManager1);
      assertFalse(javaParserTokenManager1.equals((Object)javaParserTokenManager0));
      
      JavaCharStream javaCharStream1 = new JavaCharStream(stringReader0, 84, (-2795));
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream1.bufpos);
      assertEquals(0, javaCharStream1.getBeginLine());
      assertEquals(0, javaCharStream1.getBeginColumn());
      assertNotNull(javaCharStream1);
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(3, javaCharStream0.bufpos);
      assertEquals(4, token0.beginLine);
      assertEquals((-3650), token0.beginColumn);
      assertEquals((-3647), token0.endColumn);
      assertEquals(74, token0.kind);
      assertEquals(4, token0.endLine);
      assertEquals((-3647), javaCharStream0.getColumn());
      assertEquals((-3647), javaCharStream0.getEndColumn());
      assertEquals(4, javaCharStream0.getLine());
      assertEquals(4, javaCharStream0.getBeginLine());
      assertEquals((-3650), javaCharStream0.getBeginColumn());
      assertEquals(4, javaCharStream0.getEndLine());
      assertEquals("kPxJ", token0.toString());
      assertNotSame(javaCharStream0, javaCharStream1);
      assertNotSame(javaParserTokenManager0, javaParserTokenManager1);
      assertNotNull(token0);
      assertFalse(javaCharStream0.equals((Object)javaCharStream1));
      assertFalse(javaParserTokenManager0.equals((Object)javaParserTokenManager1));
      
      Token token1 = javaParserTokenManager0.getNextToken();
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(4, javaCharStream0.bufpos);
      assertEquals(4, token1.endLine);
      assertEquals(4, token1.beginLine);
      assertEquals((-3646), token1.endColumn);
      assertEquals((-3646), token1.beginColumn);
      assertEquals(79, token1.kind);
      assertEquals((-3646), javaCharStream0.getEndColumn());
      assertEquals((-3646), javaCharStream0.getBeginColumn());
      assertEquals((-3646), javaCharStream0.getColumn());
      assertEquals(4, javaCharStream0.getLine());
      assertEquals(4, javaCharStream0.getBeginLine());
      assertEquals(4, javaCharStream0.getEndLine());
      assertEquals("{", token1.toString());
      assertNotSame(javaCharStream0, javaCharStream1);
      assertNotSame(javaParserTokenManager0, javaParserTokenManager1);
      assertNotSame(token1, token0);
      assertNotNull(token1);
      assertFalse(javaCharStream0.equals((Object)javaCharStream1));
      assertFalse(javaParserTokenManager0.equals((Object)javaParserTokenManager1));
      assertFalse(token1.equals((Object)token0));
      
      Token token2 = javaParserTokenManager1.getNextToken();
      assertEquals(0, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(77, token2.kind);
      assertEquals(4, token2.beginLine);
      assertEquals(4, token2.endLine);
      assertEquals((-3645), token2.beginColumn);
      assertEquals((-3645), token2.endColumn);
      assertEquals((-3645), javaCharStream0.getBeginColumn());
      assertEquals((-3645), javaCharStream0.getColumn());
      assertEquals((-3645), javaCharStream0.getEndColumn());
      assertEquals(4, javaCharStream0.getLine());
      assertEquals(4, javaCharStream0.getBeginLine());
      assertEquals(4, javaCharStream0.getEndLine());
      assertEquals("(", token2.toString());
      assertNotSame(javaCharStream0, javaCharStream1);
      assertNotSame(javaParserTokenManager1, javaParserTokenManager0);
      assertNotSame(token2, token1);
      assertNotSame(token2, token0);
      assertNotNull(token2);
      assertFalse(javaCharStream0.equals((Object)javaCharStream1));
      assertFalse(javaParserTokenManager1.equals((Object)javaParserTokenManager0));
      assertFalse(token2.equals((Object)token1));
      assertFalse(token2.equals((Object)token0));
      
      javaParserTokenManager1.TokenLexicalActions(token2);
      assertEquals(0, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(77, token2.kind);
      assertEquals(4, token2.beginLine);
      assertEquals(4, token2.endLine);
      assertEquals((-3645), token2.beginColumn);
      assertEquals((-3645), token2.endColumn);
      assertEquals((-3645), javaCharStream0.getBeginColumn());
      assertEquals((-3645), javaCharStream0.getColumn());
      assertEquals((-3645), javaCharStream0.getEndColumn());
      assertEquals(4, javaCharStream0.getLine());
      assertEquals(4, javaCharStream0.getBeginLine());
      assertEquals(4, javaCharStream0.getEndLine());
      assertEquals("(", token2.toString());
      assertNotSame(javaCharStream0, javaCharStream1);
      assertNotSame(javaParserTokenManager1, javaParserTokenManager0);
      assertNotSame(token2, token1);
      assertNotSame(token2, token0);
      assertFalse(javaCharStream0.equals((Object)javaCharStream1));
      assertFalse(javaParserTokenManager1.equals((Object)javaParserTokenManager0));
      assertFalse(token2.equals((Object)token1));
      assertFalse(token2.equals((Object)token0));
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      assertFalse(fileDescriptor0.valid());
      assertNotNull(fileDescriptor0);
      
      PipedInputStream pipedInputStream0 = new PipedInputStream(26);
      assertEquals(0, pipedInputStream0.available());
      assertNotNull(pipedInputStream0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(pipedInputStream0, 2497, 2147418113);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, pipedInputStream0.available());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertNotNull(javaCharStream0);
      
      StringReader stringReader0 = new StringReader("]M#]");
      assertNotNull(stringReader0);
      
      StringReader stringReader1 = new StringReader("P?x//dS]\u0007J|R>");
      assertNotNull(stringReader1);
      assertFalse(stringReader1.equals((Object)stringReader0));
      
      JavaCharStream javaCharStream1 = new JavaCharStream(stringReader1, 2497, 2497);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream1.bufpos);
      assertEquals(0, javaCharStream1.getBeginLine());
      assertEquals(0, javaCharStream1.getBeginColumn());
      assertNotNull(javaCharStream1);
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream1);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream1.bufpos);
      assertEquals(0, javaCharStream1.getBeginLine());
      assertEquals(0, javaCharStream1.getBeginColumn());
      assertNotNull(javaParserTokenManager0);
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream1.bufpos);
      assertEquals(2497, token0.beginLine);
      assertEquals(2497, token0.endLine);
      assertEquals(2497, token0.beginColumn);
      assertEquals(2497, token0.endColumn);
      assertEquals(74, token0.kind);
      assertEquals(2497, javaCharStream1.getEndLine());
      assertEquals(2497, javaCharStream1.getEndColumn());
      assertEquals(2497, javaCharStream1.getLine());
      assertEquals(2497, javaCharStream1.getColumn());
      assertEquals(2497, javaCharStream1.getBeginLine());
      assertEquals(2497, javaCharStream1.getBeginColumn());
      assertEquals("P", token0.toString());
      assertNotSame(stringReader1, stringReader0);
      assertNotSame(javaCharStream1, javaCharStream0);
      assertNotNull(token0);
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      
      Token token1 = javaParserTokenManager0.jjFillToken();
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream1.bufpos);
      assertEquals(2497, token1.beginColumn);
      assertEquals(2497, token1.endColumn);
      assertEquals(2497, token1.endLine);
      assertEquals(74, token1.kind);
      assertEquals(2497, token1.beginLine);
      assertEquals(2497, javaCharStream1.getEndLine());
      assertEquals(2497, javaCharStream1.getEndColumn());
      assertEquals(2497, javaCharStream1.getLine());
      assertEquals(2497, javaCharStream1.getColumn());
      assertEquals(2497, javaCharStream1.getBeginLine());
      assertEquals(2497, javaCharStream1.getBeginColumn());
      assertEquals("P", token1.toString());
      assertNotSame(stringReader1, stringReader0);
      assertNotSame(javaCharStream1, javaCharStream0);
      assertNotSame(token1, token0);
      assertNotNull(token1);
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      assertFalse(token1.equals((Object)token0));
      
      javaParserTokenManager0.SkipLexicalActions(token1);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream1.bufpos);
      assertEquals(2497, token1.beginColumn);
      assertEquals(2497, token1.endColumn);
      assertEquals(2497, token1.endLine);
      assertEquals(74, token1.kind);
      assertEquals(2497, token1.beginLine);
      assertEquals(2497, javaCharStream1.getEndLine());
      assertEquals(2497, javaCharStream1.getEndColumn());
      assertEquals(2497, javaCharStream1.getLine());
      assertEquals(2497, javaCharStream1.getColumn());
      assertEquals(2497, javaCharStream1.getBeginLine());
      assertEquals(2497, javaCharStream1.getBeginColumn());
      assertEquals("P", token1.toString());
      assertNotSame(stringReader1, stringReader0);
      assertNotSame(javaCharStream1, javaCharStream0);
      assertNotSame(token1, token0);
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      assertFalse(token1.equals((Object)token0));
      
      Token token2 = javaParserTokenManager0.getNextToken();
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(1, javaCharStream1.bufpos);
      assertEquals(2498, token2.beginColumn);
      assertEquals(2498, token2.endColumn);
      assertEquals(2497, token2.endLine);
      assertEquals(91, token2.kind);
      assertEquals(2497, token2.beginLine);
      assertEquals(2497, javaCharStream1.getEndLine());
      assertEquals(2498, javaCharStream1.getColumn());
      assertEquals(2497, javaCharStream1.getLine());
      assertEquals(2498, javaCharStream1.getEndColumn());
      assertEquals(2497, javaCharStream1.getBeginLine());
      assertEquals(2498, javaCharStream1.getBeginColumn());
      assertEquals("?", token2.toString());
      assertNotSame(stringReader1, stringReader0);
      assertNotSame(javaCharStream1, javaCharStream0);
      assertNotSame(token2, token0);
      assertNotSame(token2, token1);
      assertNotNull(token2);
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      assertFalse(token2.equals((Object)token0));
      assertFalse(token2.equals((Object)token1));
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      assertFalse(fileDescriptor0.valid());
      assertNotNull(fileDescriptor0);
      
      StringReader stringReader0 = new StringReader("`A0TXAHt ");
      assertNotNull(stringReader0);
      
      StringReader stringReader1 = new StringReader("4L>x'FzPYsj{]tT");
      assertNotNull(stringReader1);
      assertFalse(stringReader1.equals((Object)stringReader0));
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader1);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertNotNull(javaCharStream0);
      assertFalse(stringReader1.equals((Object)stringReader0));
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertNotNull(javaParserTokenManager0);
      assertFalse(stringReader1.equals((Object)stringReader0));
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(1, javaCharStream0.bufpos);
      assertEquals(66, token0.kind);
      assertEquals(1, token0.beginLine);
      assertEquals(1, token0.beginColumn);
      assertEquals(1, token0.endLine);
      assertEquals(2, token0.endColumn);
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(2, javaCharStream0.getEndColumn());
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(1, javaCharStream0.getBeginColumn());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(2, javaCharStream0.getColumn());
      assertEquals("4L", token0.toString());
      assertNotSame(stringReader1, stringReader0);
      assertNotNull(token0);
      assertFalse(stringReader1.equals((Object)stringReader0));
      
      Token token1 = javaParserTokenManager0.getNextToken();
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.bufpos);
      assertEquals(1, token1.endLine);
      assertEquals(1, token1.beginLine);
      assertEquals(3, token1.endColumn);
      assertEquals(3, token1.beginColumn);
      assertEquals(124, token1.kind);
      assertEquals(3, javaCharStream0.getEndColumn());
      assertEquals(3, javaCharStream0.getBeginColumn());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(3, javaCharStream0.getColumn());
      assertEquals(">", token1.toString());
      assertNotSame(stringReader1, stringReader0);
      assertNotNull(token1);
      assertFalse(stringReader1.equals((Object)stringReader0));
      
      Token token2 = javaParserTokenManager0.getNextToken();
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(1, javaCharStream0.bufpos);
      assertEquals(4, token2.beginColumn);
      assertEquals(4, token2.endColumn);
      assertEquals(1, token2.beginLine);
      assertEquals(1, token2.endLine);
      assertEquals(74, token2.kind);
      assertEquals(4, javaCharStream0.getBeginColumn());
      assertEquals(4, javaCharStream0.getEndColumn());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(4, javaCharStream0.getColumn());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals("x", token2.toString());
      assertNotSame(stringReader1, stringReader0);
      assertNotSame(token2, token0);
      assertNotNull(token2);
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertFalse(token2.equals((Object)token0));
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      StringReader stringReader0 = new StringReader("<Azdbx*VQOk[X_d");
      assertNotNull(stringReader0);
      
      int int0 = JavaParserConstants.INTERFACE;
      assertEquals(41, int0);
      
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, 22, 57);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertNotNull(javaCharStream0);
      
      JavaCharStream javaCharStream1 = new JavaCharStream(stringReader0);
      assertEquals((-1), javaCharStream1.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream1.getBeginColumn());
      assertEquals(0, javaCharStream1.getBeginLine());
      assertNotNull(javaCharStream1);
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      
      JavaCharStream javaCharStream2 = new JavaCharStream(stringReader0, 41, (-51));
      assertEquals((-1), javaCharStream2.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream2.getBeginColumn());
      assertEquals(0, javaCharStream2.getBeginLine());
      assertNotNull(javaCharStream2);
      assertFalse(javaCharStream2.equals((Object)javaCharStream0));
      assertFalse(javaCharStream2.equals((Object)javaCharStream1));
      
      boolean boolean1 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertFalse(boolean1);
      assertFalse(boolean1 == boolean0);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream2);
      assertEquals((-1), javaCharStream2.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream2.getBeginColumn());
      assertEquals(0, javaCharStream2.getBeginLine());
      assertNotNull(javaParserTokenManager0);
      assertFalse(javaCharStream2.equals((Object)javaCharStream0));
      assertFalse(javaCharStream2.equals((Object)javaCharStream1));
      
      javaParserTokenManager0.defaultLexState = 41;
      assertEquals(0, javaCharStream2.getBeginColumn());
      assertEquals(0, javaCharStream2.getBeginLine());
      
      javaParserTokenManager0.curLexState = 73;
      assertEquals(0, javaCharStream2.getBeginColumn());
      assertEquals(0, javaCharStream2.getBeginLine());
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertEquals(0, javaCharStream2.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(41, token0.endLine);
      assertEquals((-51), token0.endColumn);
      assertEquals((-51), token0.beginColumn);
      assertEquals(0, token0.kind);
      assertEquals(41, token0.beginLine);
      assertEquals(41, javaCharStream2.getBeginLine());
      assertEquals((-51), javaCharStream2.getBeginColumn());
      assertEquals((-51), javaCharStream2.getEndColumn());
      assertEquals(41, javaCharStream2.getLine());
      assertEquals((-51), javaCharStream2.getColumn());
      assertEquals(41, javaCharStream2.getEndLine());
      assertEquals("", token0.toString());
      assertNotSame(javaCharStream2, javaCharStream0);
      assertNotSame(javaCharStream2, javaCharStream1);
      assertNotNull(token0);
      assertFalse(javaCharStream2.equals((Object)javaCharStream0));
      assertFalse(javaCharStream2.equals((Object)javaCharStream1));
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      PipedInputStream pipedInputStream0 = new PipedInputStream(57);
      assertEquals(0, pipedInputStream0.available());
      assertNotNull(pipedInputStream0);
      
      StringReader stringReader0 = new StringReader("=Qv&nCW`Vsfo[m");
      assertNotNull(stringReader0);
      
      int int0 = stringReader0.read();
      assertEquals(61, int0);
      
      int int1 = stringReader0.read();
      assertEquals(81, int1);
      assertFalse(int1 == int0);
      
      StringReader stringReader1 = new StringReader("=Qv&nCW`Vsfo[m");
      assertNotNull(stringReader1);
      assertFalse(stringReader1.equals((Object)stringReader0));
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, 2592, 81);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertNotNull(javaCharStream0);
      assertFalse(stringReader0.equals((Object)stringReader1));
      
      JavaCharStream javaCharStream1 = new JavaCharStream(stringReader0, 81, 57);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream1.bufpos);
      assertEquals(0, javaCharStream1.getBeginLine());
      assertEquals(0, javaCharStream1.getBeginColumn());
      assertNotNull(javaCharStream1);
      assertFalse(stringReader0.equals((Object)stringReader1));
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertNotNull(javaParserTokenManager0);
      assertFalse(stringReader0.equals((Object)stringReader1));
      assertFalse(javaCharStream0.equals((Object)javaCharStream1));
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.bufpos);
      assertEquals(74, token0.kind);
      assertEquals(2592, token0.beginLine);
      assertEquals(81, token0.beginColumn);
      assertEquals(81, token0.endColumn);
      assertEquals(2592, token0.endLine);
      assertEquals(2592, javaCharStream0.getBeginLine());
      assertEquals(2592, javaCharStream0.getEndLine());
      assertEquals(81, javaCharStream0.getColumn());
      assertEquals(81, javaCharStream0.getEndColumn());
      assertEquals(2592, javaCharStream0.getLine());
      assertEquals(81, javaCharStream0.getBeginColumn());
      assertEquals("v", token0.toString());
      assertNotSame(stringReader0, stringReader1);
      assertNotSame(javaCharStream0, javaCharStream1);
      assertNotNull(token0);
      assertFalse(stringReader0.equals((Object)stringReader1));
      assertFalse(javaCharStream0.equals((Object)javaCharStream1));
      
      javaParserTokenManager0.TokenLexicalActions(token0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.bufpos);
      assertEquals(74, token0.kind);
      assertEquals(2592, token0.beginLine);
      assertEquals(81, token0.beginColumn);
      assertEquals(81, token0.endColumn);
      assertEquals(2592, token0.endLine);
      assertEquals(2592, javaCharStream0.getBeginLine());
      assertEquals(2592, javaCharStream0.getEndLine());
      assertEquals(81, javaCharStream0.getColumn());
      assertEquals(81, javaCharStream0.getEndColumn());
      assertEquals(2592, javaCharStream0.getLine());
      assertEquals(81, javaCharStream0.getBeginColumn());
      assertEquals("v", token0.toString());
      assertNotSame(stringReader0, stringReader1);
      assertNotSame(javaCharStream0, javaCharStream1);
      assertFalse(stringReader0.equals((Object)stringReader1));
      assertFalse(javaCharStream0.equals((Object)javaCharStream1));
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      StringReader stringReader0 = new StringReader("FoFqL*1l!43Zy");
      assertNotNull(stringReader0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, (-797), (-797));
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertNotNull(javaCharStream0);
      
      JavaCharStream javaCharStream1 = new JavaCharStream(stringReader0, (-105), (-105));
      assertEquals((-1), javaCharStream1.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream1.getBeginColumn());
      assertEquals(0, javaCharStream1.getBeginLine());
      assertNotNull(javaCharStream1);
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream1);
      assertEquals((-1), javaCharStream1.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream1.getBeginColumn());
      assertEquals(0, javaCharStream1.getBeginLine());
      assertNotNull(javaParserTokenManager0);
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertEquals(4, javaCharStream1.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-105), token0.beginLine);
      assertEquals((-105), token0.endLine);
      assertEquals((-101), token0.endColumn);
      assertEquals((-105), token0.beginColumn);
      assertEquals(74, token0.kind);
      assertEquals((-101), javaCharStream1.getColumn());
      assertEquals((-101), javaCharStream1.getEndColumn());
      assertEquals((-105), javaCharStream1.getEndLine());
      assertEquals((-105), javaCharStream1.getBeginLine());
      assertEquals((-105), javaCharStream1.getLine());
      assertEquals((-105), javaCharStream1.getBeginColumn());
      assertEquals("FoFqL", token0.toString());
      assertNotSame(javaCharStream1, javaCharStream0);
      assertNotNull(token0);
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      
      javaParserTokenManager0.MoreLexicalActions();
      assertEquals(4, javaCharStream1.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-101), javaCharStream1.getColumn());
      assertEquals((-101), javaCharStream1.getEndColumn());
      assertEquals((-105), javaCharStream1.getEndLine());
      assertEquals((-105), javaCharStream1.getBeginLine());
      assertEquals((-105), javaCharStream1.getLine());
      assertEquals((-105), javaCharStream1.getBeginColumn());
      assertNotSame(javaCharStream1, javaCharStream0);
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      
      javaParserTokenManager0.MoreLexicalActions();
      assertEquals(4, javaCharStream1.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-101), javaCharStream1.getColumn());
      assertEquals((-101), javaCharStream1.getEndColumn());
      assertEquals((-105), javaCharStream1.getEndLine());
      assertEquals((-105), javaCharStream1.getBeginLine());
      assertEquals((-105), javaCharStream1.getLine());
      assertEquals((-105), javaCharStream1.getBeginColumn());
      assertNotSame(javaCharStream1, javaCharStream0);
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      
      Token token1 = javaParserTokenManager0.jjFillToken();
      assertEquals(4, javaCharStream1.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-101), token1.endColumn);
      assertEquals(74, token1.kind);
      assertEquals((-105), token1.beginColumn);
      assertEquals((-105), token1.endLine);
      assertEquals((-105), token1.beginLine);
      assertEquals((-101), javaCharStream1.getColumn());
      assertEquals((-101), javaCharStream1.getEndColumn());
      assertEquals((-105), javaCharStream1.getEndLine());
      assertEquals((-105), javaCharStream1.getBeginLine());
      assertEquals((-105), javaCharStream1.getLine());
      assertEquals((-105), javaCharStream1.getBeginColumn());
      assertEquals("FoFqL", token1.toString());
      assertNotSame(javaCharStream1, javaCharStream0);
      assertNotSame(token1, token0);
      assertNotNull(token1);
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      assertFalse(token1.equals((Object)token0));
      
      Token token2 = javaParserTokenManager0.getNextToken();
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(5, javaCharStream1.bufpos);
      assertEquals((-100), token2.endColumn);
      assertEquals((-100), token2.beginColumn);
      assertEquals((-105), token2.beginLine);
      assertEquals(103, token2.kind);
      assertEquals((-105), token2.endLine);
      assertEquals((-100), javaCharStream1.getBeginColumn());
      assertEquals((-100), javaCharStream1.getColumn());
      assertEquals((-105), javaCharStream1.getEndLine());
      assertEquals((-105), javaCharStream1.getBeginLine());
      assertEquals((-105), javaCharStream1.getLine());
      assertEquals((-100), javaCharStream1.getEndColumn());
      assertEquals("*", token2.toString());
      assertNotSame(javaCharStream1, javaCharStream0);
      assertNotSame(token2, token0);
      assertNotSame(token2, token1);
      assertNotNull(token2);
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      assertFalse(token2.equals((Object)token0));
      assertFalse(token2.equals((Object)token1));
      
      Token token3 = javaParserTokenManager0.jjFillToken();
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(5, javaCharStream1.bufpos);
      assertEquals((-105), token3.beginLine);
      assertEquals(103, token3.kind);
      assertEquals((-100), token3.endColumn);
      assertEquals((-100), token3.beginColumn);
      assertEquals((-105), token3.endLine);
      assertEquals((-100), javaCharStream1.getBeginColumn());
      assertEquals((-100), javaCharStream1.getColumn());
      assertEquals((-105), javaCharStream1.getEndLine());
      assertEquals((-105), javaCharStream1.getBeginLine());
      assertEquals((-105), javaCharStream1.getLine());
      assertEquals((-100), javaCharStream1.getEndColumn());
      assertEquals("*", token3.toString());
      assertNotSame(javaCharStream1, javaCharStream0);
      assertNotSame(token3, token1);
      assertNotSame(token3, token0);
      assertNotSame(token3, token2);
      assertNotNull(token3);
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      assertFalse(token3.equals((Object)token1));
      assertFalse(token3.equals((Object)token0));
      assertFalse(token3.equals((Object)token2));
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      assertFalse(fileDescriptor0.valid());
      assertNotNull(fileDescriptor0);
      
      StringReader stringReader0 = new StringReader("`A0TXAHt ");
      assertNotNull(stringReader0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, 0, 0, 0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertNotNull(javaCharStream0);
      
      JavaCharStream javaCharStream1 = new JavaCharStream(stringReader0, 0, 0, 2229);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream1.bufpos);
      assertEquals(0, javaCharStream1.getBeginLine());
      assertEquals(0, javaCharStream1.getBeginColumn());
      assertNotNull(javaCharStream1);
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream1);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream1.bufpos);
      assertEquals(0, javaCharStream1.getBeginLine());
      assertEquals(0, javaCharStream1.getBeginColumn());
      assertNotNull(javaParserTokenManager0);
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      
      // Undeclared exception!
      try { 
        javaParserTokenManager0.getNextToken();
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Lexical error at line 0, column 0.  Encountered: \"`\" (96), after : \"\"
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      Enumeration<PipedInputStream> enumeration0 = (Enumeration<PipedInputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(enumeration0).hasMoreElements();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      assertNotNull(sequenceInputStream0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(sequenceInputStream0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertNotNull(javaCharStream0);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertNotNull(javaParserTokenManager0);
      
      MockPrintStream mockPrintStream0 = new MockPrintStream("ih N];yvC@F#");
      assertNotNull(mockPrintStream0);
      
      boolean boolean0 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      javaParserTokenManager0.setDebugStream(mockPrintStream0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      
      javaParserTokenManager0.ReInit(javaCharStream0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      
      Token.GTToken token_GTToken0 = new Token.GTToken();
      assertEquals(0, token_GTToken0.endColumn);
      assertEquals(0, token_GTToken0.beginColumn);
      assertEquals(0, token_GTToken0.beginLine);
      assertEquals(0, token_GTToken0.endLine);
      assertEquals(0, token_GTToken0.kind);
      assertNull(token_GTToken0.toString());
      assertNotNull(token_GTToken0);
      
      Token token0 = token_GTToken0.next;
      assertNull(token0);
      
      javaParserTokenManager0.SkipLexicalActions((Token) null);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      StringReader stringReader0 = new StringReader("\"import\"");
      assertNotNull(stringReader0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, 11, 28);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertNotNull(javaCharStream0);
      
      boolean boolean0 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "");
      assertFalse(boolean0);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertNotNull(javaParserTokenManager0);
      
      JavaCharStream javaCharStream1 = new JavaCharStream(stringReader0, 30, 90);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream1.bufpos);
      assertEquals(0, javaCharStream1.getBeginColumn());
      assertEquals(0, javaCharStream1.getBeginLine());
      assertNotNull(javaCharStream1);
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      
      JavaParserTokenManager javaParserTokenManager1 = new JavaParserTokenManager(javaCharStream1);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream1.bufpos);
      assertEquals(0, javaCharStream1.getBeginColumn());
      assertEquals(0, javaCharStream1.getBeginLine());
      assertNotNull(javaParserTokenManager1);
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      assertFalse(javaParserTokenManager1.equals((Object)javaParserTokenManager0));
      
      JavaParserTokenManager javaParserTokenManager2 = new JavaParserTokenManager(javaCharStream1);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream1.bufpos);
      assertEquals(0, javaCharStream1.getBeginColumn());
      assertEquals(0, javaCharStream1.getBeginLine());
      assertNotNull(javaParserTokenManager2);
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      assertFalse(javaParserTokenManager2.equals((Object)javaParserTokenManager1));
      assertFalse(javaParserTokenManager2.equals((Object)javaParserTokenManager0));
      
      Token token0 = javaParserTokenManager1.getNextToken();
      assertEquals(7, javaCharStream1.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(90, token0.beginColumn);
      assertEquals(30, token0.endLine);
      assertEquals(30, token0.beginLine);
      assertEquals(97, token0.endColumn);
      assertEquals(73, token0.kind);
      assertEquals(97, javaCharStream1.getColumn());
      assertEquals(30, javaCharStream1.getEndLine());
      assertEquals(30, javaCharStream1.getLine());
      assertEquals(97, javaCharStream1.getEndColumn());
      assertEquals(90, javaCharStream1.getBeginColumn());
      assertEquals(30, javaCharStream1.getBeginLine());
      assertEquals("\"import\"", token0.toString());
      assertNotSame(javaCharStream1, javaCharStream0);
      assertNotSame(javaParserTokenManager1, javaParserTokenManager0);
      assertNotSame(javaParserTokenManager1, javaParserTokenManager2);
      assertNotNull(token0);
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      assertFalse(javaParserTokenManager1.equals((Object)javaParserTokenManager0));
      assertFalse(javaParserTokenManager1.equals((Object)javaParserTokenManager2));
      
      Token token1 = javaParserTokenManager0.getNextToken();
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.bufpos);
      assertEquals(27, token1.beginColumn);
      assertEquals(11, token1.beginLine);
      assertEquals(11, token1.endLine);
      assertEquals(0, token1.kind);
      assertEquals(27, token1.endColumn);
      assertEquals(27, javaCharStream0.getEndColumn());
      assertEquals(11, javaCharStream0.getBeginLine());
      assertEquals(11, javaCharStream0.getLine());
      assertEquals(27, javaCharStream0.getColumn());
      assertEquals(27, javaCharStream0.getBeginColumn());
      assertEquals(11, javaCharStream0.getEndLine());
      assertEquals("", token1.toString());
      assertNotSame(javaCharStream0, javaCharStream1);
      assertNotSame(javaParserTokenManager0, javaParserTokenManager2);
      assertNotSame(javaParserTokenManager0, javaParserTokenManager1);
      assertNotSame(token1, token0);
      assertNotNull(token1);
      assertFalse(javaCharStream0.equals((Object)javaCharStream1));
      assertFalse(javaParserTokenManager0.equals((Object)javaParserTokenManager2));
      assertFalse(javaParserTokenManager0.equals((Object)javaParserTokenManager1));
      assertFalse(token1.equals((Object)token0));
      
      Token token2 = javaParserTokenManager0.getNextToken();
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.bufpos);
      assertEquals(11, token2.beginLine);
      assertEquals(11, token2.endLine);
      assertEquals(0, token2.kind);
      assertEquals(27, token2.endColumn);
      assertEquals(27, token2.beginColumn);
      assertEquals(27, javaCharStream0.getEndColumn());
      assertEquals(11, javaCharStream0.getBeginLine());
      assertEquals(11, javaCharStream0.getLine());
      assertEquals(27, javaCharStream0.getColumn());
      assertEquals(27, javaCharStream0.getBeginColumn());
      assertEquals(11, javaCharStream0.getEndLine());
      assertEquals("", token2.toString());
      assertNotSame(javaCharStream0, javaCharStream1);
      assertNotSame(javaParserTokenManager0, javaParserTokenManager2);
      assertNotSame(javaParserTokenManager0, javaParserTokenManager1);
      assertNotSame(token2, token1);
      assertNotSame(token2, token0);
      assertNotNull(token2);
      assertFalse(javaCharStream0.equals((Object)javaCharStream1));
      assertFalse(javaParserTokenManager0.equals((Object)javaParserTokenManager2));
      assertFalse(javaParserTokenManager0.equals((Object)javaParserTokenManager1));
      assertFalse(token2.equals((Object)token1));
      assertFalse(token2.equals((Object)token0));
      
      javaParserTokenManager1.TokenLexicalActions(token2);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.bufpos);
      assertEquals(7, javaCharStream1.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(11, token2.beginLine);
      assertEquals(11, token2.endLine);
      assertEquals(0, token2.kind);
      assertEquals(27, token2.endColumn);
      assertEquals(27, token2.beginColumn);
      assertEquals(27, javaCharStream0.getEndColumn());
      assertEquals(11, javaCharStream0.getBeginLine());
      assertEquals(11, javaCharStream0.getLine());
      assertEquals(27, javaCharStream0.getColumn());
      assertEquals(27, javaCharStream0.getBeginColumn());
      assertEquals(11, javaCharStream0.getEndLine());
      assertEquals(97, javaCharStream1.getColumn());
      assertEquals(30, javaCharStream1.getEndLine());
      assertEquals(30, javaCharStream1.getLine());
      assertEquals(97, javaCharStream1.getEndColumn());
      assertEquals(90, javaCharStream1.getBeginColumn());
      assertEquals(30, javaCharStream1.getBeginLine());
      assertEquals("", token2.toString());
      assertNotSame(javaCharStream0, javaCharStream1);
      assertNotSame(javaParserTokenManager0, javaParserTokenManager2);
      assertNotSame(javaParserTokenManager0, javaParserTokenManager1);
      assertNotSame(javaCharStream1, javaCharStream0);
      assertNotSame(javaParserTokenManager1, javaParserTokenManager0);
      assertNotSame(javaParserTokenManager1, javaParserTokenManager2);
      assertNotSame(token2, token1);
      assertNotSame(token2, token0);
      assertFalse(javaCharStream0.equals((Object)javaCharStream1));
      assertFalse(javaParserTokenManager0.equals((Object)javaParserTokenManager2));
      assertFalse(javaParserTokenManager0.equals((Object)javaParserTokenManager1));
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      assertFalse(javaParserTokenManager1.equals((Object)javaParserTokenManager0));
      assertFalse(javaParserTokenManager1.equals((Object)javaParserTokenManager2));
      assertFalse(token2.equals((Object)token1));
      assertFalse(token2.equals((Object)token0));
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      assertFalse(fileDescriptor0.valid());
      assertNotNull(fileDescriptor0);
      
      PipedInputStream pipedInputStream0 = new PipedInputStream(26);
      assertEquals(0, pipedInputStream0.available());
      assertNotNull(pipedInputStream0);
      
      pipedInputStream0.close();
      assertEquals(0, pipedInputStream0.available());
      
      JavaCharStream javaCharStream0 = new JavaCharStream(pipedInputStream0, 5, (-45));
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertEquals(0, pipedInputStream0.available());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertNotNull(javaCharStream0);
      
      StringReader stringReader0 = new StringReader("ZbHQK6!OR ");
      assertNotNull(stringReader0);
      
      StringReader stringReader1 = new StringReader("t!hR-]{");
      assertNotNull(stringReader1);
      assertFalse(stringReader1.equals((Object)stringReader0));
      
      JavaCharStream javaCharStream1 = new JavaCharStream(stringReader1, 104, 104);
      assertEquals((-1), javaCharStream1.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream1.getBeginColumn());
      assertEquals(0, javaCharStream1.getBeginLine());
      assertNotNull(javaCharStream1);
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream1);
      assertEquals((-1), javaCharStream1.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream1.getBeginColumn());
      assertEquals(0, javaCharStream1.getBeginLine());
      assertNotNull(javaParserTokenManager0);
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      
      boolean boolean0 = stringReader1.markSupported();
      assertTrue(boolean0);
      assertNotSame(stringReader1, stringReader0);
      assertFalse(stringReader1.equals((Object)stringReader0));
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertEquals(0, javaCharStream1.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(104, token0.beginColumn);
      assertEquals(104, token0.beginLine);
      assertEquals(74, token0.kind);
      assertEquals(104, token0.endLine);
      assertEquals(104, token0.endColumn);
      assertEquals(104, javaCharStream1.getEndLine());
      assertEquals(104, javaCharStream1.getBeginLine());
      assertEquals(104, javaCharStream1.getColumn());
      assertEquals(104, javaCharStream1.getEndColumn());
      assertEquals(104, javaCharStream1.getLine());
      assertEquals(104, javaCharStream1.getBeginColumn());
      assertEquals("t", token0.toString());
      assertNotSame(stringReader1, stringReader0);
      assertNotSame(javaCharStream1, javaCharStream0);
      assertNotNull(token0);
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      
      Token token1 = javaParserTokenManager0.getNextToken();
      assertEquals(1, javaCharStream1.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(104, token1.endLine);
      assertEquals(89, token1.kind);
      assertEquals(104, token1.beginLine);
      assertEquals(105, token1.endColumn);
      assertEquals(105, token1.beginColumn);
      assertEquals(104, javaCharStream1.getEndLine());
      assertEquals(104, javaCharStream1.getBeginLine());
      assertEquals(105, javaCharStream1.getColumn());
      assertEquals(105, javaCharStream1.getEndColumn());
      assertEquals(104, javaCharStream1.getLine());
      assertEquals(105, javaCharStream1.getBeginColumn());
      assertEquals("!", token1.toString());
      assertNotSame(stringReader1, stringReader0);
      assertNotSame(javaCharStream1, javaCharStream0);
      assertNotSame(token1, token0);
      assertNotNull(token1);
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      assertFalse(token1.equals((Object)token0));
      
      Token token2 = javaParserTokenManager0.getNextToken();
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(3, javaCharStream1.bufpos);
      assertEquals(106, token2.beginColumn);
      assertEquals(74, token2.kind);
      assertEquals(104, token2.beginLine);
      assertEquals(104, token2.endLine);
      assertEquals(107, token2.endColumn);
      assertEquals(107, javaCharStream1.getColumn());
      assertEquals(104, javaCharStream1.getEndLine());
      assertEquals(104, javaCharStream1.getBeginLine());
      assertEquals(107, javaCharStream1.getEndColumn());
      assertEquals(104, javaCharStream1.getLine());
      assertEquals(106, javaCharStream1.getBeginColumn());
      assertEquals("hR", token2.toString());
      assertNotSame(stringReader1, stringReader0);
      assertNotSame(javaCharStream1, javaCharStream0);
      assertNotSame(token2, token0);
      assertNotSame(token2, token1);
      assertNotNull(token2);
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      assertFalse(token2.equals((Object)token0));
      assertFalse(token2.equals((Object)token1));
      
      javaParserTokenManager0.TokenLexicalActions(token1);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(3, javaCharStream1.bufpos);
      assertEquals(104, token1.endLine);
      assertEquals(89, token1.kind);
      assertEquals(104, token1.beginLine);
      assertEquals(105, token1.endColumn);
      assertEquals(105, token1.beginColumn);
      assertEquals(107, javaCharStream1.getColumn());
      assertEquals(104, javaCharStream1.getEndLine());
      assertEquals(104, javaCharStream1.getBeginLine());
      assertEquals(107, javaCharStream1.getEndColumn());
      assertEquals(104, javaCharStream1.getLine());
      assertEquals(106, javaCharStream1.getBeginColumn());
      assertEquals("!", token1.toString());
      assertNotSame(stringReader1, stringReader0);
      assertNotSame(javaCharStream1, javaCharStream0);
      assertNotSame(token1, token0);
      assertNotSame(token1, token2);
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      assertFalse(token1.equals((Object)token0));
      assertFalse(token1.equals((Object)token2));
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      StringReader stringReader0 = new StringReader("Kf:q%yiN+,9<]Du");
      assertNotNull(stringReader0);
      
      StringReader stringReader1 = new StringReader("Kf:q%yiN+,9<]Du");
      assertNotNull(stringReader1);
      assertFalse(stringReader1.equals((Object)stringReader0));
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader1);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertNotNull(javaCharStream0);
      assertFalse(stringReader1.equals((Object)stringReader0));
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertNotNull(javaParserTokenManager0);
      assertFalse(stringReader1.equals((Object)stringReader0));
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(1, javaCharStream0.bufpos);
      assertEquals(74, token0.kind);
      assertEquals(2, token0.endColumn);
      assertEquals(1, token0.beginColumn);
      assertEquals(1, token0.beginLine);
      assertEquals(1, token0.endLine);
      assertEquals(2, javaCharStream0.getColumn());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(2, javaCharStream0.getEndColumn());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(1, javaCharStream0.getBeginColumn());
      assertEquals("Kf", token0.toString());
      assertNotSame(stringReader1, stringReader0);
      assertNotNull(token0);
      assertFalse(stringReader1.equals((Object)stringReader0));
      
      JavaParserTokenManager javaParserTokenManager1 = new JavaParserTokenManager(javaCharStream0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(1, javaCharStream0.bufpos);
      assertEquals(2, javaCharStream0.getColumn());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(2, javaCharStream0.getEndColumn());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(1, javaCharStream0.getBeginColumn());
      assertNotNull(javaParserTokenManager1);
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertFalse(javaParserTokenManager1.equals((Object)javaParserTokenManager0));
      
      stringReader1.mark(41);
      assertNotSame(stringReader1, stringReader0);
      assertFalse(stringReader1.equals((Object)stringReader0));
      
      Token token1 = javaParserTokenManager1.getNextToken();
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(2, javaCharStream0.bufpos);
      assertEquals(1, token1.endLine);
      assertEquals(1, token1.beginLine);
      assertEquals(3, token1.beginColumn);
      assertEquals(3, token1.endColumn);
      assertEquals(92, token1.kind);
      assertEquals(3, javaCharStream0.getBeginColumn());
      assertEquals(3, javaCharStream0.getColumn());
      assertEquals(3, javaCharStream0.getEndColumn());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(":", token1.toString());
      assertNotSame(stringReader1, stringReader0);
      assertNotSame(javaParserTokenManager1, javaParserTokenManager0);
      assertNotSame(token1, token0);
      assertNotNull(token1);
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertFalse(javaParserTokenManager1.equals((Object)javaParserTokenManager0));
      assertFalse(token1.equals((Object)token0));
      
      Token token2 = javaParserTokenManager1.getNextToken();
      assertEquals(0, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(1, token2.endLine);
      assertEquals(74, token2.kind);
      assertEquals(4, token2.endColumn);
      assertEquals(4, token2.beginColumn);
      assertEquals(1, token2.beginLine);
      assertEquals(4, javaCharStream0.getBeginColumn());
      assertEquals(4, javaCharStream0.getColumn());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(4, javaCharStream0.getEndColumn());
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals("q", token2.toString());
      assertNotSame(stringReader1, stringReader0);
      assertNotSame(javaParserTokenManager1, javaParserTokenManager0);
      assertNotSame(token2, token0);
      assertNotSame(token2, token1);
      assertNotNull(token2);
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertFalse(javaParserTokenManager1.equals((Object)javaParserTokenManager0));
      assertFalse(token2.equals((Object)token0));
      assertFalse(token2.equals((Object)token1));
      
      Token token3 = javaParserTokenManager0.jjFillToken();
      assertEquals(0, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(4, token3.beginColumn);
      assertEquals(1, token3.beginLine);
      assertEquals(4, token3.endColumn);
      assertEquals(1, token3.endLine);
      assertEquals(74, token3.kind);
      assertEquals(4, javaCharStream0.getBeginColumn());
      assertEquals(4, javaCharStream0.getColumn());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(4, javaCharStream0.getEndColumn());
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals("q", token3.toString());
      assertNotSame(stringReader1, stringReader0);
      assertNotSame(javaParserTokenManager0, javaParserTokenManager1);
      assertNotSame(token3, token1);
      assertNotSame(token3, token0);
      assertNotSame(token3, token2);
      assertNotNull(token3);
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertFalse(javaParserTokenManager0.equals((Object)javaParserTokenManager1));
      assertFalse(token3.equals((Object)token1));
      assertFalse(token3.equals((Object)token0));
      assertFalse(token3.equals((Object)token2));
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      assertFalse(fileDescriptor0.valid());
      assertNotNull(fileDescriptor0);
      
      StringReader stringReader0 = new StringReader("`A0TXAHt ");
      assertNotNull(stringReader0);
      
      boolean boolean0 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "`A0TXAHt ");
      assertFalse(boolean0);
      
      StringReader stringReader1 = new StringReader("4.>x'FJPYj*]tT");
      assertNotNull(stringReader1);
      assertFalse(stringReader1.equals((Object)stringReader0));
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader1, (-772), 1856);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertNotNull(javaCharStream0);
      assertFalse(stringReader1.equals((Object)stringReader0));
      
      char char0 = javaCharStream0.ReadByte();
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals('4', char0);
      assertNotSame(stringReader1, stringReader0);
      assertFalse(stringReader1.equals((Object)stringReader0));
      
      JavaCharStream javaCharStream1 = new JavaCharStream(stringReader1, 1856, (-772));
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream1.bufpos);
      assertEquals(0, javaCharStream1.getBeginLine());
      assertEquals(0, javaCharStream1.getBeginColumn());
      assertNotNull(javaCharStream1);
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertNotNull(javaParserTokenManager0);
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertFalse(javaCharStream0.equals((Object)javaCharStream1));
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.bufpos);
      assertEquals(1856, token0.endColumn);
      assertEquals(85, token0.kind);
      assertEquals(1856, token0.beginColumn);
      assertEquals((-772), token0.endLine);
      assertEquals((-772), token0.beginLine);
      assertEquals(1856, javaCharStream0.getColumn());
      assertEquals((-772), javaCharStream0.getEndLine());
      assertEquals(1856, javaCharStream0.getEndColumn());
      assertEquals(1856, javaCharStream0.getBeginColumn());
      assertEquals((-772), javaCharStream0.getBeginLine());
      assertEquals((-772), javaCharStream0.getLine());
      assertEquals(".", token0.toString());
      assertNotSame(stringReader1, stringReader0);
      assertNotSame(javaCharStream0, javaCharStream1);
      assertNotNull(token0);
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertFalse(javaCharStream0.equals((Object)javaCharStream1));
      
      Token token1 = javaParserTokenManager0.jjFillToken();
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.bufpos);
      assertEquals(1856, token1.endColumn);
      assertEquals(85, token1.kind);
      assertEquals((-772), token1.beginLine);
      assertEquals(1856, token1.beginColumn);
      assertEquals((-772), token1.endLine);
      assertEquals(1856, javaCharStream0.getColumn());
      assertEquals((-772), javaCharStream0.getEndLine());
      assertEquals(1856, javaCharStream0.getEndColumn());
      assertEquals(1856, javaCharStream0.getBeginColumn());
      assertEquals((-772), javaCharStream0.getBeginLine());
      assertEquals((-772), javaCharStream0.getLine());
      assertEquals(".", token1.toString());
      assertNotSame(stringReader1, stringReader0);
      assertNotSame(javaCharStream0, javaCharStream1);
      assertNotSame(token1, token0);
      assertNotNull(token1);
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertFalse(javaCharStream0.equals((Object)javaCharStream1));
      assertFalse(token1.equals((Object)token0));
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      assertFalse(fileDescriptor0.valid());
      assertNotNull(fileDescriptor0);
      
      StringReader stringReader0 = new StringReader("\"\n\"");
      assertNotNull(stringReader0);
      
      StringReader stringReader1 = new StringReader("\"\n\"");
      assertNotNull(stringReader1);
      assertFalse(stringReader1.equals((Object)stringReader0));
      
      StringReader stringReader2 = new StringReader("-=");
      assertNotNull(stringReader2);
      assertFalse(stringReader2.equals((Object)stringReader1));
      assertFalse(stringReader2.equals((Object)stringReader0));
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader1, 1459, 99);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertNotNull(javaCharStream0);
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertFalse(stringReader1.equals((Object)stringReader2));
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertNotNull(javaParserTokenManager0);
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertFalse(stringReader1.equals((Object)stringReader2));
      
      // Undeclared exception!
      try { 
        javaParserTokenManager0.getNextToken();
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Lexical error at line 1459, column 100.  Encountered: \"\\n\" (10), after : \"\\\"\"
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      StringReader stringReader0 = new StringReader("null");
      assertNotNull(stringReader0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, 41, 2147418113);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertNotNull(javaCharStream0);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertNotNull(javaParserTokenManager0);
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertEquals(3, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(2147418113, token0.beginColumn);
      assertEquals(41, token0.endLine);
      assertEquals(45, token0.kind);
      assertEquals(41, token0.beginLine);
      assertEquals(2147418116, token0.endColumn);
      assertEquals(41, javaCharStream0.getLine());
      assertEquals(2147418116, javaCharStream0.getEndColumn());
      assertEquals(41, javaCharStream0.getEndLine());
      assertEquals(2147418113, javaCharStream0.getBeginColumn());
      assertEquals(41, javaCharStream0.getBeginLine());
      assertEquals(2147418116, javaCharStream0.getColumn());
      assertEquals("null", token0.toString());
      assertNotNull(token0);
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      assertFalse(fileDescriptor0.valid());
      assertNotNull(fileDescriptor0);
      
      StringReader stringReader0 = new StringReader("`A0TXAHt ");
      assertNotNull(stringReader0);
      
      StringReader stringReader1 = new StringReader("4.>x'FzPYsj*]tT");
      assertNotNull(stringReader1);
      assertFalse(stringReader1.equals((Object)stringReader0));
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader1, (-772), 1856);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertNotNull(javaCharStream0);
      assertFalse(stringReader1.equals((Object)stringReader0));
      
      JavaCharStream javaCharStream1 = new JavaCharStream(stringReader1, 1856, (-772));
      assertEquals((-1), javaCharStream1.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream1.getBeginColumn());
      assertEquals(0, javaCharStream1.getBeginLine());
      assertNotNull(javaCharStream1);
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertNotNull(javaParserTokenManager0);
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertFalse(javaCharStream0.equals((Object)javaCharStream1));
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertEquals(1, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-772), token0.endLine);
      assertEquals((-772), token0.beginLine);
      assertEquals(1856, token0.beginColumn);
      assertEquals(70, token0.kind);
      assertEquals(1857, token0.endColumn);
      assertEquals((-772), javaCharStream0.getLine());
      assertEquals(1856, javaCharStream0.getBeginColumn());
      assertEquals((-772), javaCharStream0.getBeginLine());
      assertEquals(1857, javaCharStream0.getEndColumn());
      assertEquals(1857, javaCharStream0.getColumn());
      assertEquals((-772), javaCharStream0.getEndLine());
      assertEquals("4.", token0.toString());
      assertNotSame(stringReader1, stringReader0);
      assertNotSame(javaCharStream0, javaCharStream1);
      assertNotNull(token0);
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertFalse(javaCharStream0.equals((Object)javaCharStream1));
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      StringReader stringReader0 = new StringReader("~y{7yH,)By`v\"_");
      assertNotNull(stringReader0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, 57, (-797));
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertNotNull(javaCharStream0);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertNotNull(javaParserTokenManager0);
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertEquals(0, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-797), token0.beginColumn);
      assertEquals(57, token0.endLine);
      assertEquals(90, token0.kind);
      assertEquals(57, token0.beginLine);
      assertEquals((-797), token0.endColumn);
      assertEquals((-797), javaCharStream0.getColumn());
      assertEquals(57, javaCharStream0.getEndLine());
      assertEquals(57, javaCharStream0.getBeginLine());
      assertEquals((-797), javaCharStream0.getBeginColumn());
      assertEquals(57, javaCharStream0.getLine());
      assertEquals((-797), javaCharStream0.getEndColumn());
      assertEquals("~", token0.toString());
      assertNotNull(token0);
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      StringReader stringReader0 = new StringReader("protected");
      assertNotNull(stringReader0);
      
      StringReader stringReader1 = new StringReader("jA$");
      assertNotNull(stringReader1);
      assertFalse(stringReader1.equals((Object)stringReader0));
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, 1, 1, 0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertNotNull(javaCharStream0);
      assertFalse(stringReader0.equals((Object)stringReader1));
      
      JavaCharStream javaCharStream1 = new JavaCharStream(stringReader0, 3436, 1, 1);
      assertEquals((-1), javaCharStream1.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream1.getBeginColumn());
      assertEquals(0, javaCharStream1.getBeginLine());
      assertNotNull(javaCharStream1);
      assertFalse(stringReader0.equals((Object)stringReader1));
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertNotNull(javaParserTokenManager0);
      assertFalse(stringReader0.equals((Object)stringReader1));
      assertFalse(javaCharStream0.equals((Object)javaCharStream1));
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertEquals(8, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(1, token0.beginLine);
      assertEquals(1, token0.beginColumn);
      assertEquals(48, token0.kind);
      assertEquals(1, token0.endLine);
      assertEquals(9, token0.endColumn);
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(1, javaCharStream0.getBeginColumn());
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(9, javaCharStream0.getEndColumn());
      assertEquals(9, javaCharStream0.getColumn());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals("protected", token0.toString());
      assertNotSame(stringReader0, stringReader1);
      assertNotSame(javaCharStream0, javaCharStream1);
      assertNotNull(token0);
      assertFalse(stringReader0.equals((Object)stringReader1));
      assertFalse(javaCharStream0.equals((Object)javaCharStream1));
      
      JavaCharStream javaCharStream2 = new JavaCharStream(stringReader0, 434, 1);
      assertEquals((-1), javaCharStream2.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream2.getBeginColumn());
      assertEquals(0, javaCharStream2.getBeginLine());
      assertNotNull(javaCharStream2);
      assertFalse(stringReader0.equals((Object)stringReader1));
      assertFalse(javaCharStream2.equals((Object)javaCharStream1));
      assertFalse(javaCharStream2.equals((Object)javaCharStream0));
      
      JavaParserTokenManager javaParserTokenManager1 = new JavaParserTokenManager(javaCharStream2);
      assertEquals((-1), javaCharStream2.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream2.getBeginColumn());
      assertEquals(0, javaCharStream2.getBeginLine());
      assertNotNull(javaParserTokenManager1);
      assertFalse(stringReader0.equals((Object)stringReader1));
      assertFalse(javaCharStream2.equals((Object)javaCharStream1));
      assertFalse(javaCharStream2.equals((Object)javaCharStream0));
      assertFalse(javaParserTokenManager1.equals((Object)javaParserTokenManager0));
      
      Token token1 = javaParserTokenManager0.getNextToken();
      assertEquals(0, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(1, token1.beginLine);
      assertEquals(0, token1.kind);
      assertEquals(1, token1.endLine);
      assertEquals(9, token1.endColumn);
      assertEquals(9, token1.beginColumn);
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(9, javaCharStream0.getEndColumn());
      assertEquals(9, javaCharStream0.getBeginColumn());
      assertEquals(9, javaCharStream0.getColumn());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals("", token1.toString());
      assertNotSame(stringReader0, stringReader1);
      assertNotSame(javaCharStream0, javaCharStream2);
      assertNotSame(javaCharStream0, javaCharStream1);
      assertNotSame(javaParserTokenManager0, javaParserTokenManager1);
      assertNotSame(token1, token0);
      assertNotNull(token1);
      assertFalse(stringReader0.equals((Object)stringReader1));
      assertFalse(javaCharStream0.equals((Object)javaCharStream2));
      assertFalse(javaCharStream0.equals((Object)javaCharStream1));
      assertFalse(javaParserTokenManager0.equals((Object)javaParserTokenManager1));
      assertFalse(token1.equals((Object)token0));
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      PipedInputStream pipedInputStream0 = new PipedInputStream(57);
      assertEquals(0, pipedInputStream0.available());
      assertNotNull(pipedInputStream0);
      
      StringReader stringReader0 = new StringReader("IN_MULTI_LINE_COMMENT");
      assertNotNull(stringReader0);
      
      StringReader stringReader1 = new StringReader("");
      assertNotNull(stringReader1);
      assertFalse(stringReader1.equals((Object)stringReader0));
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, (-114), 2335);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertNotNull(javaCharStream0);
      assertFalse(stringReader0.equals((Object)stringReader1));
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertNotNull(javaParserTokenManager0);
      assertFalse(stringReader0.equals((Object)stringReader1));
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(20, javaCharStream0.bufpos);
      assertEquals((-114), token0.beginLine);
      assertEquals(2335, token0.beginColumn);
      assertEquals(74, token0.kind);
      assertEquals((-114), token0.endLine);
      assertEquals(2355, token0.endColumn);
      assertEquals(2355, javaCharStream0.getColumn());
      assertEquals(2355, javaCharStream0.getEndColumn());
      assertEquals((-114), javaCharStream0.getEndLine());
      assertEquals(2335, javaCharStream0.getBeginColumn());
      assertEquals((-114), javaCharStream0.getLine());
      assertEquals((-114), javaCharStream0.getBeginLine());
      assertEquals("IN_MULTI_LINE_COMMENT", token0.toString());
      assertNotSame(stringReader0, stringReader1);
      assertNotNull(token0);
      assertFalse(stringReader0.equals((Object)stringReader1));
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      StringReader stringReader0 = new StringReader("dnZoRZC.$[%%@b!UT");
      assertNotNull(stringReader0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, 41, 41);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertNotNull(javaCharStream0);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertNotNull(javaParserTokenManager0);
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(6, javaCharStream0.bufpos);
      assertEquals(47, token0.endColumn);
      assertEquals(74, token0.kind);
      assertEquals(41, token0.beginLine);
      assertEquals(41, token0.beginColumn);
      assertEquals(41, token0.endLine);
      assertEquals(41, javaCharStream0.getBeginLine());
      assertEquals(47, javaCharStream0.getColumn());
      assertEquals(47, javaCharStream0.getEndColumn());
      assertEquals(41, javaCharStream0.getLine());
      assertEquals(41, javaCharStream0.getBeginColumn());
      assertEquals(41, javaCharStream0.getEndLine());
      assertEquals("dnZoRZC", token0.toString());
      assertNotNull(token0);
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      assertFalse(fileDescriptor0.valid());
      assertNotNull(fileDescriptor0);
      
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      assertEquals(0, pipedInputStream0.available());
      assertNotNull(pipedInputStream0);
      
      StringReader stringReader0 = new StringReader("]|b");
      assertNotNull(stringReader0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, 2274, 2274);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertNotNull(javaCharStream0);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertNotNull(javaParserTokenManager0);
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertEquals(0, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(82, token0.kind);
      assertEquals(2274, token0.endLine);
      assertEquals(2274, token0.beginColumn);
      assertEquals(2274, token0.beginLine);
      assertEquals(2274, token0.endColumn);
      assertEquals(2274, javaCharStream0.getBeginLine());
      assertEquals(2274, javaCharStream0.getBeginColumn());
      assertEquals(2274, javaCharStream0.getLine());
      assertEquals(2274, javaCharStream0.getColumn());
      assertEquals(2274, javaCharStream0.getEndLine());
      assertEquals(2274, javaCharStream0.getEndColumn());
      assertEquals("]", token0.toString());
      assertNotNull(token0);
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      assertFalse(fileDescriptor0.valid());
      assertNotNull(fileDescriptor0);
      
      PipedInputStream pipedInputStream0 = new PipedInputStream(4261);
      assertEquals(0, pipedInputStream0.available());
      assertNotNull(pipedInputStream0);
      
      StringReader stringReader0 = new StringReader("");
      assertNotNull(stringReader0);
      
      StringReader stringReader1 = new StringReader("0~_lPk+0Ny&");
      assertNotNull(stringReader1);
      assertFalse(stringReader1.equals((Object)stringReader0));
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, 115, 73);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertNotNull(javaCharStream0);
      assertFalse(stringReader0.equals((Object)stringReader1));
      
      JavaCharStream javaCharStream1 = new JavaCharStream(stringReader1);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream1.bufpos);
      assertEquals(0, javaCharStream1.getBeginLine());
      assertEquals(0, javaCharStream1.getBeginColumn());
      assertNotNull(javaCharStream1);
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream1);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream1.bufpos);
      assertEquals(0, javaCharStream1.getBeginLine());
      assertEquals(0, javaCharStream1.getBeginColumn());
      assertNotNull(javaParserTokenManager0);
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream1.bufpos);
      assertEquals(1, token0.endColumn);
      assertEquals(66, token0.kind);
      assertEquals(1, token0.beginLine);
      assertEquals(1, token0.beginColumn);
      assertEquals(1, token0.endLine);
      assertEquals(1, javaCharStream1.getLine());
      assertEquals(1, javaCharStream1.getEndColumn());
      assertEquals(1, javaCharStream1.getBeginLine());
      assertEquals(1, javaCharStream1.getBeginColumn());
      assertEquals(1, javaCharStream1.getColumn());
      assertEquals(1, javaCharStream1.getEndLine());
      assertEquals("0", token0.toString());
      assertNotSame(stringReader1, stringReader0);
      assertNotSame(javaCharStream1, javaCharStream0);
      assertNotNull(token0);
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      
      javaParserTokenManager0.MoreLexicalActions();
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream1.bufpos);
      assertEquals(1, javaCharStream1.getLine());
      assertEquals(1, javaCharStream1.getEndColumn());
      assertEquals(1, javaCharStream1.getBeginLine());
      assertEquals(1, javaCharStream1.getBeginColumn());
      assertEquals(1, javaCharStream1.getColumn());
      assertEquals(1, javaCharStream1.getEndLine());
      assertNotSame(stringReader1, stringReader0);
      assertNotSame(javaCharStream1, javaCharStream0);
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "t`LYJy$=jm$_HY!");
      assertFalse(boolean0);
      
      StringReader stringReader0 = new StringReader("]OaB%.* G=}[X%Be");
      assertNotNull(stringReader0);
      
      int int0 = stringReader0.read();
      assertEquals(93, int0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, (-2583), 8);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertNotNull(javaCharStream0);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertNotNull(javaParserTokenManager0);
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(2, javaCharStream0.bufpos);
      assertEquals((-2583), token0.endLine);
      assertEquals(8, token0.beginColumn);
      assertEquals((-2583), token0.beginLine);
      assertEquals(74, token0.kind);
      assertEquals(10, token0.endColumn);
      assertEquals(10, javaCharStream0.getColumn());
      assertEquals((-2583), javaCharStream0.getLine());
      assertEquals((-2583), javaCharStream0.getBeginLine());
      assertEquals(10, javaCharStream0.getEndColumn());
      assertEquals((-2583), javaCharStream0.getEndLine());
      assertEquals(8, javaCharStream0.getBeginColumn());
      assertEquals("OaB", token0.toString());
      assertNotNull(token0);
      
      javaParserTokenManager0.SkipLexicalActions(token0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(2, javaCharStream0.bufpos);
      assertEquals((-2583), token0.endLine);
      assertEquals(8, token0.beginColumn);
      assertEquals((-2583), token0.beginLine);
      assertEquals(74, token0.kind);
      assertEquals(10, token0.endColumn);
      assertEquals(10, javaCharStream0.getColumn());
      assertEquals((-2583), javaCharStream0.getLine());
      assertEquals((-2583), javaCharStream0.getBeginLine());
      assertEquals(10, javaCharStream0.getEndColumn());
      assertEquals((-2583), javaCharStream0.getEndLine());
      assertEquals(8, javaCharStream0.getBeginColumn());
      assertEquals("OaB", token0.toString());
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      PipedInputStream pipedInputStream0 = new PipedInputStream(52);
      assertEquals(0, pipedInputStream0.available());
      assertNotNull(pipedInputStream0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(pipedInputStream0, 52, 46);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertEquals(0, pipedInputStream0.available());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertNotNull(javaCharStream0);
      
      StringReader stringReader0 = new StringReader(">3");
      assertNotNull(stringReader0);
      
      JavaCharStream javaCharStream1 = new JavaCharStream(stringReader0, 2214, 2229, 46);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream1.bufpos);
      assertEquals(0, javaCharStream1.getBeginColumn());
      assertEquals(0, javaCharStream1.getBeginLine());
      assertNotNull(javaCharStream1);
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream1);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream1.bufpos);
      assertEquals(0, javaCharStream1.getBeginColumn());
      assertEquals(0, javaCharStream1.getBeginLine());
      assertNotNull(javaParserTokenManager0);
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream1.bufpos);
      assertEquals(2229, token0.endColumn);
      assertEquals(124, token0.kind);
      assertEquals(2214, token0.beginLine);
      assertEquals(2229, token0.beginColumn);
      assertEquals(2214, token0.endLine);
      assertEquals(2229, javaCharStream1.getBeginColumn());
      assertEquals(2229, javaCharStream1.getColumn());
      assertEquals(2229, javaCharStream1.getEndColumn());
      assertEquals(2214, javaCharStream1.getLine());
      assertEquals(2214, javaCharStream1.getBeginLine());
      assertEquals(2214, javaCharStream1.getEndLine());
      assertEquals(">", token0.toString());
      assertNotSame(javaCharStream1, javaCharStream0);
      assertNotNull(token0);
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      
      Token token1 = javaParserTokenManager0.jjFillToken();
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream1.bufpos);
      assertEquals(124, token1.kind);
      assertEquals(2214, token1.endLine);
      assertEquals(2214, token1.beginLine);
      assertEquals(2229, token1.beginColumn);
      assertEquals(2229, token1.endColumn);
      assertEquals(2229, javaCharStream1.getBeginColumn());
      assertEquals(2229, javaCharStream1.getColumn());
      assertEquals(2229, javaCharStream1.getEndColumn());
      assertEquals(2214, javaCharStream1.getLine());
      assertEquals(2214, javaCharStream1.getBeginLine());
      assertEquals(2214, javaCharStream1.getEndLine());
      assertEquals(">", token1.toString());
      assertNotSame(javaCharStream1, javaCharStream0);
      assertNotSame(token1, token0);
      assertNotNull(token1);
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      assertFalse(token1.equals((Object)token0));
      
      Token token2 = javaParserTokenManager0.jjFillToken();
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream1.bufpos);
      assertEquals(2229, token2.beginColumn);
      assertEquals(2229, token2.endColumn);
      assertEquals(2214, token2.endLine);
      assertEquals(124, token2.kind);
      assertEquals(2214, token2.beginLine);
      assertEquals(2229, javaCharStream1.getBeginColumn());
      assertEquals(2229, javaCharStream1.getColumn());
      assertEquals(2229, javaCharStream1.getEndColumn());
      assertEquals(2214, javaCharStream1.getLine());
      assertEquals(2214, javaCharStream1.getBeginLine());
      assertEquals(2214, javaCharStream1.getEndLine());
      assertEquals(">", token2.toString());
      assertNotSame(javaCharStream1, javaCharStream0);
      assertNotSame(token2, token1);
      assertNotSame(token2, token0);
      assertNotNull(token2);
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      assertFalse(token2.equals((Object)token1));
      assertFalse(token2.equals((Object)token0));
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      StringReader stringReader0 = new StringReader("null");
      assertNotNull(stringReader0);
      
      StringReader stringReader1 = new StringReader("jA$");
      assertNotNull(stringReader1);
      assertFalse(stringReader1.equals((Object)stringReader0));
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, 0, 0, 0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertNotNull(javaCharStream0);
      assertFalse(stringReader0.equals((Object)stringReader1));
      
      JavaCharStream javaCharStream1 = new JavaCharStream(stringReader1, 0, (-1084), 118);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream1.bufpos);
      assertEquals(0, javaCharStream1.getBeginLine());
      assertEquals(0, javaCharStream1.getBeginColumn());
      assertNotNull(javaCharStream1);
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream1);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream1.bufpos);
      assertEquals(0, javaCharStream1.getBeginLine());
      assertEquals(0, javaCharStream1.getBeginColumn());
      assertNotNull(javaParserTokenManager0);
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(2, javaCharStream1.bufpos);
      assertEquals((-1082), token0.endColumn);
      assertEquals((-1084), token0.beginColumn);
      assertEquals(74, token0.kind);
      assertEquals(0, token0.beginLine);
      assertEquals(0, token0.endLine);
      assertEquals(0, javaCharStream1.getBeginLine());
      assertEquals((-1082), javaCharStream1.getEndColumn());
      assertEquals(0, javaCharStream1.getLine());
      assertEquals((-1084), javaCharStream1.getBeginColumn());
      assertEquals(0, javaCharStream1.getEndLine());
      assertEquals((-1082), javaCharStream1.getColumn());
      assertEquals("jA$", token0.toString());
      assertNotSame(stringReader1, stringReader0);
      assertNotSame(javaCharStream1, javaCharStream0);
      assertNotNull(token0);
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      
      javaParserTokenManager0.MoreLexicalActions();
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(2, javaCharStream1.bufpos);
      assertEquals(0, javaCharStream1.getBeginLine());
      assertEquals((-1082), javaCharStream1.getEndColumn());
      assertEquals(0, javaCharStream1.getLine());
      assertEquals((-1084), javaCharStream1.getBeginColumn());
      assertEquals(0, javaCharStream1.getEndLine());
      assertEquals((-1082), javaCharStream1.getColumn());
      assertNotSame(stringReader1, stringReader0);
      assertNotSame(javaCharStream1, javaCharStream0);
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      
      javaParserTokenManager0.MoreLexicalActions();
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(2, javaCharStream1.bufpos);
      assertEquals(0, javaCharStream1.getBeginLine());
      assertEquals((-1082), javaCharStream1.getEndColumn());
      assertEquals(0, javaCharStream1.getLine());
      assertEquals((-1084), javaCharStream1.getBeginColumn());
      assertEquals(0, javaCharStream1.getEndLine());
      assertEquals((-1082), javaCharStream1.getColumn());
      assertNotSame(stringReader1, stringReader0);
      assertNotSame(javaCharStream1, javaCharStream0);
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      
      Token token1 = javaParserTokenManager0.getNextToken();
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream1.bufpos);
      assertEquals((-1082), token1.beginColumn);
      assertEquals((-1082), token1.endColumn);
      assertEquals(0, token1.beginLine);
      assertEquals(0, token1.kind);
      assertEquals(0, token1.endLine);
      assertEquals(0, javaCharStream1.getBeginLine());
      assertEquals((-1082), javaCharStream1.getBeginColumn());
      assertEquals((-1082), javaCharStream1.getEndColumn());
      assertEquals(0, javaCharStream1.getLine());
      assertEquals(0, javaCharStream1.getEndLine());
      assertEquals((-1082), javaCharStream1.getColumn());
      assertEquals("", token1.toString());
      assertNotSame(stringReader1, stringReader0);
      assertNotSame(javaCharStream1, javaCharStream0);
      assertNotSame(token1, token0);
      assertNotNull(token1);
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      assertFalse(token1.equals((Object)token0));
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      PipedInputStream pipedInputStream0 = new PipedInputStream(57);
      assertEquals(0, pipedInputStream0.available());
      assertNotNull(pipedInputStream0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(pipedInputStream0, (-45), (-45));
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, pipedInputStream0.available());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertNotNull(javaCharStream0);
      
      StringReader stringReader0 = new StringReader("Kf:q%yiN+,9<]Du");
      assertNotNull(stringReader0);
      
      StringReader stringReader1 = new StringReader(";y*]LoGS'");
      assertNotNull(stringReader1);
      assertFalse(stringReader1.equals((Object)stringReader0));
      
      StringReader stringReader2 = new StringReader("Kf:q%yiN+,9<]Du");
      assertNotNull(stringReader2);
      assertFalse(stringReader2.equals((Object)stringReader0));
      assertFalse(stringReader2.equals((Object)stringReader1));
      
      JavaCharStream javaCharStream1 = new JavaCharStream(stringReader2, 57, 57);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream1.bufpos);
      assertEquals(0, javaCharStream1.getBeginLine());
      assertEquals(0, javaCharStream1.getBeginColumn());
      assertNotNull(javaCharStream1);
      assertFalse(stringReader2.equals((Object)stringReader0));
      assertFalse(stringReader2.equals((Object)stringReader1));
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      
      char char0 = javaCharStream1.ReadByte();
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream1.bufpos);
      assertEquals(0, javaCharStream1.getBeginLine());
      assertEquals(0, javaCharStream1.getBeginColumn());
      assertEquals('K', char0);
      assertNotSame(stringReader2, stringReader0);
      assertNotSame(stringReader2, stringReader1);
      assertNotSame(javaCharStream1, javaCharStream0);
      assertFalse(stringReader2.equals((Object)stringReader0));
      assertFalse(stringReader2.equals((Object)stringReader1));
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      
      StringReader stringReader3 = new StringReader("strictfp");
      assertNotNull(stringReader3);
      assertFalse(stringReader3.equals((Object)stringReader2));
      assertFalse(stringReader3.equals((Object)stringReader1));
      assertFalse(stringReader3.equals((Object)stringReader0));
      
      JavaCharStream javaCharStream2 = new JavaCharStream(stringReader1, (-1), 118);
      assertEquals((-1), javaCharStream2.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream2.getBeginColumn());
      assertEquals(0, javaCharStream2.getBeginLine());
      assertNotNull(javaCharStream2);
      assertFalse(stringReader1.equals((Object)stringReader3));
      assertFalse(stringReader1.equals((Object)stringReader2));
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertFalse(javaCharStream2.equals((Object)javaCharStream0));
      assertFalse(javaCharStream2.equals((Object)javaCharStream1));
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream2);
      assertEquals((-1), javaCharStream2.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream2.getBeginColumn());
      assertEquals(0, javaCharStream2.getBeginLine());
      assertNotNull(javaParserTokenManager0);
      assertFalse(stringReader1.equals((Object)stringReader3));
      assertFalse(stringReader1.equals((Object)stringReader2));
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertFalse(javaCharStream2.equals((Object)javaCharStream0));
      assertFalse(javaCharStream2.equals((Object)javaCharStream1));
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertEquals(0, javaCharStream2.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), token0.beginLine);
      assertEquals((-1), token0.endLine);
      assertEquals(118, token0.endColumn);
      assertEquals(118, token0.beginColumn);
      assertEquals(83, token0.kind);
      assertEquals(118, javaCharStream2.getColumn());
      assertEquals((-1), javaCharStream2.getEndLine());
      assertEquals(118, javaCharStream2.getEndColumn());
      assertEquals((-1), javaCharStream2.getBeginLine());
      assertEquals((-1), javaCharStream2.getLine());
      assertEquals(118, javaCharStream2.getBeginColumn());
      assertEquals(";", token0.toString());
      assertNotSame(stringReader1, stringReader3);
      assertNotSame(stringReader1, stringReader2);
      assertNotSame(stringReader1, stringReader0);
      assertNotSame(javaCharStream2, javaCharStream0);
      assertNotSame(javaCharStream2, javaCharStream1);
      assertNotNull(token0);
      assertFalse(stringReader1.equals((Object)stringReader3));
      assertFalse(stringReader1.equals((Object)stringReader2));
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertFalse(javaCharStream2.equals((Object)javaCharStream0));
      assertFalse(javaCharStream2.equals((Object)javaCharStream1));
      
      Token token1 = javaParserTokenManager0.getNextToken();
      assertEquals(0, javaCharStream2.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), token1.beginLine);
      assertEquals((-1), token1.endLine);
      assertEquals(119, token1.beginColumn);
      assertEquals(119, token1.endColumn);
      assertEquals(74, token1.kind);
      assertEquals(119, javaCharStream2.getColumn());
      assertEquals((-1), javaCharStream2.getEndLine());
      assertEquals((-1), javaCharStream2.getBeginLine());
      assertEquals(119, javaCharStream2.getEndColumn());
      assertEquals((-1), javaCharStream2.getLine());
      assertEquals(119, javaCharStream2.getBeginColumn());
      assertEquals("y", token1.toString());
      assertNotSame(stringReader1, stringReader3);
      assertNotSame(stringReader1, stringReader2);
      assertNotSame(stringReader1, stringReader0);
      assertNotSame(javaCharStream2, javaCharStream0);
      assertNotSame(javaCharStream2, javaCharStream1);
      assertNotSame(token1, token0);
      assertNotNull(token1);
      assertFalse(stringReader1.equals((Object)stringReader3));
      assertFalse(stringReader1.equals((Object)stringReader2));
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertFalse(javaCharStream2.equals((Object)javaCharStream0));
      assertFalse(javaCharStream2.equals((Object)javaCharStream1));
      assertFalse(token1.equals((Object)token0));
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      PipedInputStream pipedInputStream0 = new PipedInputStream(57);
      assertEquals(0, pipedInputStream0.available());
      assertNotNull(pipedInputStream0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(pipedInputStream0, 57, 46);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, pipedInputStream0.available());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertNotNull(javaCharStream0);
      
      StringReader stringReader0 = new StringReader("]M#]");
      assertNotNull(stringReader0);
      
      int int0 = stringReader0.read();
      assertEquals(93, int0);
      
      JavaCharStream javaCharStream1 = new JavaCharStream(stringReader0, (-1), 57);
      assertEquals((-1), javaCharStream1.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream1.getBeginColumn());
      assertEquals(0, javaCharStream1.getBeginLine());
      assertNotNull(javaCharStream1);
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream1);
      assertEquals((-1), javaCharStream1.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream1.getBeginColumn());
      assertEquals(0, javaCharStream1.getBeginLine());
      assertNotNull(javaParserTokenManager0);
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      
      Token.GTToken token_GTToken0 = new Token.GTToken();
      assertEquals(0, token_GTToken0.kind);
      assertEquals(0, token_GTToken0.beginColumn);
      assertEquals(0, token_GTToken0.beginLine);
      assertEquals(0, token_GTToken0.endColumn);
      assertEquals(0, token_GTToken0.endLine);
      assertNull(token_GTToken0.toString());
      assertNotNull(token_GTToken0);
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertEquals(0, javaCharStream1.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), token0.beginLine);
      assertEquals(74, token0.kind);
      assertEquals(57, token0.beginColumn);
      assertEquals(57, token0.endColumn);
      assertEquals((-1), token0.endLine);
      assertEquals((-1), javaCharStream1.getLine());
      assertEquals((-1), javaCharStream1.getEndLine());
      assertEquals(57, javaCharStream1.getColumn());
      assertEquals((-1), javaCharStream1.getBeginLine());
      assertEquals(57, javaCharStream1.getEndColumn());
      assertEquals(57, javaCharStream1.getBeginColumn());
      assertEquals("M", token0.toString());
      assertNotSame(javaCharStream1, javaCharStream0);
      assertNotNull(token0);
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      
      // Undeclared exception!
      try { 
        javaParserTokenManager0.getNextToken();
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Lexical error at line -1, column 58.  Encountered: \"#\" (35), after : \"\"
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      StringReader stringReader0 = new StringReader("{Cm");
      assertNotNull(stringReader0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, 60, 0, 0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertNotNull(javaCharStream0);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertNotNull(javaParserTokenManager0);
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.bufpos);
      assertEquals(60, token0.endLine);
      assertEquals(79, token0.kind);
      assertEquals(60, token0.beginLine);
      assertEquals(0, token0.beginColumn);
      assertEquals(0, token0.endColumn);
      assertEquals(60, javaCharStream0.getLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(60, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getColumn());
      assertEquals(60, javaCharStream0.getEndLine());
      assertEquals(0, javaCharStream0.getEndColumn());
      assertEquals("{", token0.toString());
      assertNotNull(token0);
      
      Token token1 = javaParserTokenManager0.getNextToken();
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(1, javaCharStream0.bufpos);
      assertEquals(60, token1.endLine);
      assertEquals(74, token1.kind);
      assertEquals(2, token1.endColumn);
      assertEquals(1, token1.beginColumn);
      assertEquals(60, token1.beginLine);
      assertEquals(60, javaCharStream0.getLine());
      assertEquals(60, javaCharStream0.getBeginLine());
      assertEquals(2, javaCharStream0.getColumn());
      assertEquals(1, javaCharStream0.getBeginColumn());
      assertEquals(60, javaCharStream0.getEndLine());
      assertEquals(2, javaCharStream0.getEndColumn());
      assertEquals("Cm", token1.toString());
      assertNotSame(token1, token0);
      assertNotNull(token1);
      assertFalse(token1.equals((Object)token0));
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      assertFalse(fileDescriptor0.valid());
      assertNotNull(fileDescriptor0);
      
      StringReader stringReader0 = new StringReader("`A0TXAHt ");
      assertNotNull(stringReader0);
      
      StringReader stringReader1 = new StringReader("4.>x'FzPYsj*]tT");
      assertNotNull(stringReader1);
      assertFalse(stringReader1.equals((Object)stringReader0));
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader1, (-772), 1856);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertNotNull(javaCharStream0);
      assertFalse(stringReader1.equals((Object)stringReader0));
      
      JavaCharStream javaCharStream1 = new JavaCharStream(stringReader1, 1856, (-772));
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream1.bufpos);
      assertEquals(0, javaCharStream1.getBeginLine());
      assertEquals(0, javaCharStream1.getBeginColumn());
      assertNotNull(javaCharStream1);
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream1);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream1.bufpos);
      assertEquals(0, javaCharStream1.getBeginLine());
      assertEquals(0, javaCharStream1.getBeginColumn());
      assertNotNull(javaParserTokenManager0);
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(1, javaCharStream1.bufpos);
      assertEquals((-772), token0.beginColumn);
      assertEquals((-771), token0.endColumn);
      assertEquals(1856, token0.beginLine);
      assertEquals(70, token0.kind);
      assertEquals(1856, token0.endLine);
      assertEquals((-771), javaCharStream1.getEndColumn());
      assertEquals(1856, javaCharStream1.getLine());
      assertEquals((-771), javaCharStream1.getColumn());
      assertEquals(1856, javaCharStream1.getEndLine());
      assertEquals(1856, javaCharStream1.getBeginLine());
      assertEquals((-772), javaCharStream1.getBeginColumn());
      assertEquals("4.", token0.toString());
      assertNotSame(stringReader1, stringReader0);
      assertNotSame(javaCharStream1, javaCharStream0);
      assertNotNull(token0);
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      
      Token token1 = javaParserTokenManager0.getNextToken();
      assertEquals(2, javaCharStream1.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(1856, token1.beginLine);
      assertEquals(124, token1.kind);
      assertEquals((-770), token1.beginColumn);
      assertEquals((-770), token1.endColumn);
      assertEquals(1856, token1.endLine);
      assertEquals((-770), javaCharStream1.getColumn());
      assertEquals((-770), javaCharStream1.getEndColumn());
      assertEquals(1856, javaCharStream1.getLine());
      assertEquals(1856, javaCharStream1.getEndLine());
      assertEquals(1856, javaCharStream1.getBeginLine());
      assertEquals((-770), javaCharStream1.getBeginColumn());
      assertEquals(">", token1.toString());
      assertNotSame(stringReader1, stringReader0);
      assertNotSame(javaCharStream1, javaCharStream0);
      assertNotNull(token1);
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      
      Token token2 = javaParserTokenManager0.jjFillToken();
      assertEquals(2, javaCharStream1.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-770), token2.endColumn);
      assertEquals(1856, token2.endLine);
      assertEquals(124, token2.kind);
      assertEquals((-770), token2.beginColumn);
      assertEquals(1856, token2.beginLine);
      assertEquals((-770), javaCharStream1.getColumn());
      assertEquals((-770), javaCharStream1.getEndColumn());
      assertEquals(1856, javaCharStream1.getLine());
      assertEquals(1856, javaCharStream1.getEndLine());
      assertEquals(1856, javaCharStream1.getBeginLine());
      assertEquals((-770), javaCharStream1.getBeginColumn());
      assertEquals(">", token2.toString());
      assertNotSame(stringReader1, stringReader0);
      assertNotSame(javaCharStream1, javaCharStream0);
      assertNotSame(token2, token1);
      assertNotNull(token2);
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      assertFalse(token2.equals((Object)token1));
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      StringReader stringReader0 = new StringReader("");
      assertNotNull(stringReader0);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager((JavaCharStream) null);
      assertNotNull(javaParserTokenManager0);
      
      // Undeclared exception!
      try { 
        javaParserTokenManager0.jjFillToken();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      assertFalse(fileDescriptor0.valid());
      assertNotNull(fileDescriptor0);
      
      StringReader stringReader0 = new StringReader("e,+>_4f1D/~a+%`$o");
      assertNotNull(stringReader0);
      
      StringReader stringReader1 = new StringReader("t!hR%]{");
      assertNotNull(stringReader1);
      assertFalse(stringReader1.equals((Object)stringReader0));
      
      StringReader stringReader2 = new StringReader("~\u0003/x6hK I#UTy$POf{");
      assertNotNull(stringReader2);
      assertFalse(stringReader2.equals((Object)stringReader1));
      assertFalse(stringReader2.equals((Object)stringReader0));
      
      StringReader stringReader3 = new StringReader("");
      assertNotNull(stringReader3);
      assertFalse(stringReader3.equals((Object)stringReader1));
      assertFalse(stringReader3.equals((Object)stringReader2));
      assertFalse(stringReader3.equals((Object)stringReader0));
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, 1235, 1743, 2614);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertNotNull(javaCharStream0);
      assertFalse(stringReader0.equals((Object)stringReader3));
      assertFalse(stringReader0.equals((Object)stringReader1));
      assertFalse(stringReader0.equals((Object)stringReader2));
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertNotNull(javaParserTokenManager0);
      assertFalse(stringReader0.equals((Object)stringReader3));
      assertFalse(stringReader0.equals((Object)stringReader1));
      assertFalse(stringReader0.equals((Object)stringReader2));
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.bufpos);
      assertEquals(1743, token0.beginColumn);
      assertEquals(1235, token0.beginLine);
      assertEquals(1743, token0.endColumn);
      assertEquals(74, token0.kind);
      assertEquals(1235, token0.endLine);
      assertEquals(1235, javaCharStream0.getEndLine());
      assertEquals(1235, javaCharStream0.getLine());
      assertEquals(1743, javaCharStream0.getEndColumn());
      assertEquals(1743, javaCharStream0.getBeginColumn());
      assertEquals(1235, javaCharStream0.getBeginLine());
      assertEquals(1743, javaCharStream0.getColumn());
      assertEquals("e", token0.toString());
      assertNotSame(stringReader0, stringReader3);
      assertNotSame(stringReader0, stringReader1);
      assertNotSame(stringReader0, stringReader2);
      assertNotNull(token0);
      assertFalse(stringReader0.equals((Object)stringReader3));
      assertFalse(stringReader0.equals((Object)stringReader1));
      assertFalse(stringReader0.equals((Object)stringReader2));
      
      Token token1 = javaParserTokenManager0.jjFillToken();
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.bufpos);
      assertEquals(1743, token1.beginColumn);
      assertEquals(1235, token1.endLine);
      assertEquals(74, token1.kind);
      assertEquals(1235, token1.beginLine);
      assertEquals(1743, token1.endColumn);
      assertEquals(1235, javaCharStream0.getEndLine());
      assertEquals(1235, javaCharStream0.getLine());
      assertEquals(1743, javaCharStream0.getEndColumn());
      assertEquals(1743, javaCharStream0.getBeginColumn());
      assertEquals(1235, javaCharStream0.getBeginLine());
      assertEquals(1743, javaCharStream0.getColumn());
      assertEquals("e", token1.toString());
      assertNotSame(stringReader0, stringReader3);
      assertNotSame(stringReader0, stringReader1);
      assertNotSame(stringReader0, stringReader2);
      assertNotSame(token1, token0);
      assertNotNull(token1);
      assertFalse(stringReader0.equals((Object)stringReader3));
      assertFalse(stringReader0.equals((Object)stringReader1));
      assertFalse(stringReader0.equals((Object)stringReader2));
      assertFalse(token1.equals((Object)token0));
      
      Token token2 = javaParserTokenManager0.getNextToken();
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(1, javaCharStream0.bufpos);
      assertEquals(1744, token2.endColumn);
      assertEquals(84, token2.kind);
      assertEquals(1235, token2.beginLine);
      assertEquals(1744, token2.beginColumn);
      assertEquals(1235, token2.endLine);
      assertEquals(1235, javaCharStream0.getEndLine());
      assertEquals(1235, javaCharStream0.getLine());
      assertEquals(1744, javaCharStream0.getEndColumn());
      assertEquals(1744, javaCharStream0.getBeginColumn());
      assertEquals(1235, javaCharStream0.getBeginLine());
      assertEquals(1744, javaCharStream0.getColumn());
      assertEquals(",", token2.toString());
      assertNotSame(stringReader0, stringReader3);
      assertNotSame(stringReader0, stringReader1);
      assertNotSame(stringReader0, stringReader2);
      assertNotSame(token2, token1);
      assertNotSame(token2, token0);
      assertNotNull(token2);
      assertFalse(stringReader0.equals((Object)stringReader3));
      assertFalse(stringReader0.equals((Object)stringReader1));
      assertFalse(stringReader0.equals((Object)stringReader2));
      assertFalse(token2.equals((Object)token1));
      assertFalse(token2.equals((Object)token0));
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      assertFalse(fileDescriptor0.valid());
      assertNotNull(fileDescriptor0);
      
      PipedInputStream pipedInputStream0 = new PipedInputStream(26);
      assertEquals(0, pipedInputStream0.available());
      assertNotNull(pipedInputStream0);
      
      pipedInputStream0.close();
      assertEquals(0, pipedInputStream0.available());
      
      JavaCharStream javaCharStream0 = new JavaCharStream(pipedInputStream0, 5, (-45));
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertEquals(0, pipedInputStream0.available());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertNotNull(javaCharStream0);
      
      StringReader stringReader0 = new StringReader("ZbHQK6!OR ");
      assertNotNull(stringReader0);
      
      StringReader stringReader1 = new StringReader("t!hR-]{");
      assertNotNull(stringReader1);
      assertFalse(stringReader1.equals((Object)stringReader0));
      
      JavaCharStream javaCharStream1 = new JavaCharStream(stringReader1, 104, 104);
      assertEquals((-1), javaCharStream1.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream1.getBeginColumn());
      assertEquals(0, javaCharStream1.getBeginLine());
      assertNotNull(javaCharStream1);
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream1);
      assertEquals((-1), javaCharStream1.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream1.getBeginColumn());
      assertEquals(0, javaCharStream1.getBeginLine());
      assertNotNull(javaParserTokenManager0);
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      
      javaParserTokenManager0.jjnewStateCnt = 85;
      assertEquals(0, javaCharStream1.getBeginColumn());
      assertEquals(0, javaCharStream1.getBeginLine());
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertEquals(0, javaCharStream1.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(104, token0.endLine);
      assertEquals(74, token0.kind);
      assertEquals(104, token0.beginLine);
      assertEquals(104, token0.beginColumn);
      assertEquals(104, token0.endColumn);
      assertEquals(104, javaCharStream1.getBeginLine());
      assertEquals(104, javaCharStream1.getLine());
      assertEquals(104, javaCharStream1.getBeginColumn());
      assertEquals(104, javaCharStream1.getEndColumn());
      assertEquals(104, javaCharStream1.getColumn());
      assertEquals(104, javaCharStream1.getEndLine());
      assertEquals("t", token0.toString());
      assertNotSame(stringReader1, stringReader0);
      assertNotSame(javaCharStream1, javaCharStream0);
      assertNotNull(token0);
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      assertFalse(fileDescriptor0.valid());
      assertNotNull(fileDescriptor0);
      
      PipedInputStream pipedInputStream0 = new PipedInputStream(26);
      assertEquals(0, pipedInputStream0.available());
      assertNotNull(pipedInputStream0);
      
      pipedInputStream0.close();
      assertEquals(0, pipedInputStream0.available());
      
      JavaCharStream javaCharStream0 = new JavaCharStream(pipedInputStream0, (-45), (-998));
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertEquals(0, pipedInputStream0.available());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertNotNull(javaCharStream0);
      
      StringReader stringReader0 = new StringReader("G<Kh]=?8'8u,G<$G");
      assertNotNull(stringReader0);
      
      int int0 = stringReader0.read();
      assertEquals(71, int0);
      
      JavaCharStream javaCharStream1 = new JavaCharStream(stringReader0, (-998), 48);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream1.bufpos);
      assertEquals(0, javaCharStream1.getBeginLine());
      assertEquals(0, javaCharStream1.getBeginColumn());
      assertNotNull(javaCharStream1);
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      
      JavaCharStream javaCharStream2 = new JavaCharStream(stringReader0, 43, 119);
      assertEquals((-1), javaCharStream2.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream2.getBeginColumn());
      assertEquals(0, javaCharStream2.getBeginLine());
      assertNotNull(javaCharStream2);
      assertFalse(javaCharStream2.equals((Object)javaCharStream1));
      assertFalse(javaCharStream2.equals((Object)javaCharStream0));
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream2);
      assertEquals((-1), javaCharStream2.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream2.getBeginColumn());
      assertEquals(0, javaCharStream2.getBeginLine());
      assertNotNull(javaParserTokenManager0);
      assertFalse(javaCharStream2.equals((Object)javaCharStream1));
      assertFalse(javaCharStream2.equals((Object)javaCharStream0));
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertEquals(0, javaCharStream2.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(119, token0.beginColumn);
      assertEquals(43, token0.endLine);
      assertEquals(88, token0.kind);
      assertEquals(119, token0.endColumn);
      assertEquals(43, token0.beginLine);
      assertEquals(43, javaCharStream2.getEndLine());
      assertEquals(43, javaCharStream2.getBeginLine());
      assertEquals(43, javaCharStream2.getLine());
      assertEquals(119, javaCharStream2.getEndColumn());
      assertEquals(119, javaCharStream2.getBeginColumn());
      assertEquals(119, javaCharStream2.getColumn());
      assertEquals("<", token0.toString());
      assertNotSame(javaCharStream2, javaCharStream1);
      assertNotSame(javaCharStream2, javaCharStream0);
      assertNotNull(token0);
      assertFalse(javaCharStream2.equals((Object)javaCharStream1));
      assertFalse(javaCharStream2.equals((Object)javaCharStream0));
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      assertFalse(fileDescriptor0.valid());
      assertNotNull(fileDescriptor0);
      
      StringReader stringReader0 = new StringReader("le{Q5w;[8IL%k2m/)-");
      assertNotNull(stringReader0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, (-250), (-250), 99);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertNotNull(javaCharStream0);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertNotNull(javaParserTokenManager0);
      
      JavaParserTokenManager javaParserTokenManager1 = new JavaParserTokenManager(javaCharStream0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertNotNull(javaParserTokenManager1);
      assertFalse(javaParserTokenManager1.equals((Object)javaParserTokenManager0));
      
      javaParserTokenManager1.MoreLexicalActions();
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertNotSame(javaParserTokenManager1, javaParserTokenManager0);
      assertFalse(javaParserTokenManager1.equals((Object)javaParserTokenManager0));
      
      StringReader stringReader1 = new StringReader("");
      assertNotNull(stringReader1);
      assertFalse(stringReader1.equals((Object)stringReader0));
      
      JavaParserTokenManager javaParserTokenManager2 = new JavaParserTokenManager(javaCharStream0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertNotNull(javaParserTokenManager2);
      assertFalse(stringReader0.equals((Object)stringReader1));
      assertFalse(javaParserTokenManager2.equals((Object)javaParserTokenManager0));
      assertFalse(javaParserTokenManager2.equals((Object)javaParserTokenManager1));
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(1, javaCharStream0.bufpos);
      assertEquals((-249), token0.endColumn);
      assertEquals((-250), token0.endLine);
      assertEquals(74, token0.kind);
      assertEquals((-250), token0.beginColumn);
      assertEquals((-250), token0.beginLine);
      assertEquals((-250), javaCharStream0.getBeginColumn());
      assertEquals((-249), javaCharStream0.getEndColumn());
      assertEquals((-250), javaCharStream0.getLine());
      assertEquals((-249), javaCharStream0.getColumn());
      assertEquals((-250), javaCharStream0.getBeginLine());
      assertEquals((-250), javaCharStream0.getEndLine());
      assertEquals("le", token0.toString());
      assertNotSame(stringReader0, stringReader1);
      assertNotSame(javaParserTokenManager0, javaParserTokenManager2);
      assertNotSame(javaParserTokenManager0, javaParserTokenManager1);
      assertNotNull(token0);
      assertFalse(stringReader0.equals((Object)stringReader1));
      assertFalse(javaParserTokenManager0.equals((Object)javaParserTokenManager2));
      assertFalse(javaParserTokenManager0.equals((Object)javaParserTokenManager1));
      
      JavaParserTokenManager javaParserTokenManager3 = new JavaParserTokenManager(javaCharStream0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(1, javaCharStream0.bufpos);
      assertEquals((-250), javaCharStream0.getBeginColumn());
      assertEquals((-249), javaCharStream0.getEndColumn());
      assertEquals((-250), javaCharStream0.getLine());
      assertEquals((-249), javaCharStream0.getColumn());
      assertEquals((-250), javaCharStream0.getBeginLine());
      assertEquals((-250), javaCharStream0.getEndLine());
      assertNotNull(javaParserTokenManager3);
      assertFalse(stringReader0.equals((Object)stringReader1));
      assertFalse(javaParserTokenManager3.equals((Object)javaParserTokenManager0));
      assertFalse(javaParserTokenManager3.equals((Object)javaParserTokenManager2));
      assertFalse(javaParserTokenManager3.equals((Object)javaParserTokenManager1));
      
      Token token1 = javaParserTokenManager3.getNextToken();
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(2, javaCharStream0.bufpos);
      assertEquals((-250), token1.endLine);
      assertEquals(79, token1.kind);
      assertEquals((-248), token1.beginColumn);
      assertEquals((-248), token1.endColumn);
      assertEquals((-250), token1.beginLine);
      assertEquals((-250), javaCharStream0.getLine());
      assertEquals((-248), javaCharStream0.getColumn());
      assertEquals((-248), javaCharStream0.getBeginColumn());
      assertEquals((-248), javaCharStream0.getEndColumn());
      assertEquals((-250), javaCharStream0.getBeginLine());
      assertEquals((-250), javaCharStream0.getEndLine());
      assertEquals("{", token1.toString());
      assertNotSame(stringReader0, stringReader1);
      assertNotSame(javaParserTokenManager3, javaParserTokenManager0);
      assertNotSame(javaParserTokenManager3, javaParserTokenManager2);
      assertNotSame(javaParserTokenManager3, javaParserTokenManager1);
      assertNotSame(token1, token0);
      assertNotNull(token1);
      assertFalse(stringReader0.equals((Object)stringReader1));
      assertFalse(javaParserTokenManager3.equals((Object)javaParserTokenManager0));
      assertFalse(javaParserTokenManager3.equals((Object)javaParserTokenManager2));
      assertFalse(javaParserTokenManager3.equals((Object)javaParserTokenManager1));
      assertFalse(token1.equals((Object)token0));
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      StringReader stringReader0 = new StringReader("f%3T%gku6");
      assertNotNull(stringReader0);
      
      int int0 = stringReader0.read();
      assertEquals(102, int0);
      
      StringReader stringReader1 = new StringReader("f%3T%gku6");
      assertNotNull(stringReader1);
      assertFalse(stringReader1.equals((Object)stringReader0));
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, 102, (-47), 102);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertNotNull(javaCharStream0);
      assertFalse(stringReader0.equals((Object)stringReader1));
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertNotNull(javaParserTokenManager0);
      assertFalse(stringReader0.equals((Object)stringReader1));
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.bufpos);
      assertEquals(102, token0.beginLine);
      assertEquals((-47), token0.endColumn);
      assertEquals((-47), token0.beginColumn);
      assertEquals(108, token0.kind);
      assertEquals(102, token0.endLine);
      assertEquals(102, javaCharStream0.getBeginLine());
      assertEquals((-47), javaCharStream0.getColumn());
      assertEquals(102, javaCharStream0.getLine());
      assertEquals((-47), javaCharStream0.getEndColumn());
      assertEquals(102, javaCharStream0.getEndLine());
      assertEquals((-47), javaCharStream0.getBeginColumn());
      assertEquals("%", token0.toString());
      assertNotSame(stringReader0, stringReader1);
      assertNotNull(token0);
      assertFalse(stringReader0.equals((Object)stringReader1));
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      Enumeration<PipedInputStream> enumeration0 = (Enumeration<PipedInputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(enumeration0).hasMoreElements();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      assertNotNull(sequenceInputStream0);
      
      StringReader stringReader0 = new StringReader("ZbHQK6!OR ");
      assertNotNull(stringReader0);
      
      StringReader stringReader1 = new StringReader("ZbHQK6!OR ");
      assertNotNull(stringReader1);
      assertFalse(stringReader1.equals((Object)stringReader0));
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader1, 2221, 2221);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertNotNull(javaCharStream0);
      assertFalse(stringReader1.equals((Object)stringReader0));
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertNotNull(javaParserTokenManager0);
      assertFalse(stringReader1.equals((Object)stringReader0));
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertEquals(5, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(2221, token0.beginColumn);
      assertEquals(2226, token0.endColumn);
      assertEquals(2221, token0.endLine);
      assertEquals(74, token0.kind);
      assertEquals(2221, token0.beginLine);
      assertEquals(2221, javaCharStream0.getLine());
      assertEquals(2226, javaCharStream0.getEndColumn());
      assertEquals(2221, javaCharStream0.getBeginLine());
      assertEquals(2221, javaCharStream0.getEndLine());
      assertEquals(2221, javaCharStream0.getBeginColumn());
      assertEquals(2226, javaCharStream0.getColumn());
      assertEquals("ZbHQK6", token0.toString());
      assertNotSame(stringReader1, stringReader0);
      assertNotNull(token0);
      assertFalse(stringReader1.equals((Object)stringReader0));
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      assertFalse(fileDescriptor0.valid());
      assertNotNull(fileDescriptor0);
      
      StringReader stringReader0 = new StringReader("l{f");
      assertNotNull(stringReader0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, (-4732), (-4732));
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertNotNull(javaCharStream0);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertNotNull(javaParserTokenManager0);
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertEquals(0, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(74, token0.kind);
      assertEquals((-4732), token0.beginColumn);
      assertEquals((-4732), token0.endColumn);
      assertEquals((-4732), token0.endLine);
      assertEquals((-4732), token0.beginLine);
      assertEquals((-4732), javaCharStream0.getBeginColumn());
      assertEquals((-4732), javaCharStream0.getColumn());
      assertEquals((-4732), javaCharStream0.getEndLine());
      assertEquals((-4732), javaCharStream0.getEndColumn());
      assertEquals((-4732), javaCharStream0.getBeginLine());
      assertEquals((-4732), javaCharStream0.getLine());
      assertEquals("l", token0.toString());
      assertNotNull(token0);
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      assertFalse(fileDescriptor0.valid());
      assertNotNull(fileDescriptor0);
      
      StringReader stringReader0 = new StringReader("aUYO[&skX?G2og");
      assertNotNull(stringReader0);
      
      StringReader stringReader1 = new StringReader("\"FUnQ$)6");
      assertNotNull(stringReader1);
      assertFalse(stringReader1.equals((Object)stringReader0));
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader1, (-744), (-202), 4);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertNotNull(javaCharStream0);
      assertFalse(stringReader1.equals((Object)stringReader0));
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertNotNull(javaParserTokenManager0);
      assertFalse(stringReader1.equals((Object)stringReader0));
      
      // Undeclared exception!
      try { 
        javaParserTokenManager0.getNextToken();
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Lexical error at line -744, column -194.  Encountered: <EOF> after : \"\\\"FUnQ$)6\"
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      PipedInputStream pipedInputStream0 = new PipedInputStream(57);
      assertEquals(0, pipedInputStream0.available());
      assertNotNull(pipedInputStream0);
      
      StringReader stringReader0 = new StringReader("K&_&QoM\")c9|b.adZ&");
      assertNotNull(stringReader0);
      
      int int0 = stringReader0.read();
      assertEquals(75, int0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, 22, 1);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertNotNull(javaCharStream0);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertNotNull(javaParserTokenManager0);
      
      JavaParserTokenManager javaParserTokenManager1 = new JavaParserTokenManager(javaCharStream0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertNotNull(javaParserTokenManager1);
      assertFalse(javaParserTokenManager1.equals((Object)javaParserTokenManager0));
      
      Token token0 = javaParserTokenManager1.getNextToken();
      assertEquals(0, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(22, token0.beginLine);
      assertEquals(1, token0.endColumn);
      assertEquals(22, token0.endLine);
      assertEquals(105, token0.kind);
      assertEquals(1, token0.beginColumn);
      assertEquals(22, javaCharStream0.getLine());
      assertEquals(22, javaCharStream0.getEndLine());
      assertEquals(1, javaCharStream0.getEndColumn());
      assertEquals(1, javaCharStream0.getBeginColumn());
      assertEquals(1, javaCharStream0.getColumn());
      assertEquals(22, javaCharStream0.getBeginLine());
      assertEquals("&", token0.toString());
      assertNotSame(javaParserTokenManager1, javaParserTokenManager0);
      assertNotNull(token0);
      assertFalse(javaParserTokenManager1.equals((Object)javaParserTokenManager0));
      
      Token token1 = Token.newToken((-493));
      assertEquals(0, token1.beginLine);
      assertEquals(0, token1.kind);
      assertEquals(0, token1.endColumn);
      assertEquals(0, token1.beginColumn);
      assertEquals(0, token1.endLine);
      assertNull(token1.toString());
      assertNotSame(token1, token0);
      assertNotNull(token1);
      assertFalse(token1.equals((Object)token0));
      
      javaParserTokenManager1.TokenLexicalActions(token0);
      assertEquals(0, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(22, token0.beginLine);
      assertEquals(1, token0.endColumn);
      assertEquals(22, token0.endLine);
      assertEquals(105, token0.kind);
      assertEquals(1, token0.beginColumn);
      assertEquals(22, javaCharStream0.getLine());
      assertEquals(22, javaCharStream0.getEndLine());
      assertEquals(1, javaCharStream0.getEndColumn());
      assertEquals(1, javaCharStream0.getBeginColumn());
      assertEquals(1, javaCharStream0.getColumn());
      assertEquals(22, javaCharStream0.getBeginLine());
      assertEquals("&", token0.toString());
      assertNotSame(javaParserTokenManager1, javaParserTokenManager0);
      assertNotSame(token0, token1);
      assertFalse(javaParserTokenManager1.equals((Object)javaParserTokenManager0));
      assertFalse(token0.equals((Object)token1));
      
      Token.GTToken token_GTToken0 = new Token.GTToken();
      assertEquals(0, token_GTToken0.endColumn);
      assertEquals(0, token_GTToken0.endLine);
      assertEquals(0, token_GTToken0.beginColumn);
      assertEquals(0, token_GTToken0.beginLine);
      assertEquals(0, token_GTToken0.kind);
      assertNull(token_GTToken0.toString());
      assertNotNull(token_GTToken0);
      
      Token token2 = token_GTToken0.next;
      assertNull(token2);
      
      javaParserTokenManager0.SkipLexicalActions((Token) null);
      assertEquals(0, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(22, javaCharStream0.getLine());
      assertEquals(22, javaCharStream0.getEndLine());
      assertEquals(1, javaCharStream0.getEndColumn());
      assertEquals(1, javaCharStream0.getBeginColumn());
      assertEquals(1, javaCharStream0.getColumn());
      assertEquals(22, javaCharStream0.getBeginLine());
      assertNotSame(javaParserTokenManager0, javaParserTokenManager1);
      assertFalse(javaParserTokenManager0.equals((Object)javaParserTokenManager1));
      
      javaParserTokenManager0.TokenLexicalActions((Token) null);
      assertEquals(0, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(22, javaCharStream0.getLine());
      assertEquals(22, javaCharStream0.getEndLine());
      assertEquals(1, javaCharStream0.getEndColumn());
      assertEquals(1, javaCharStream0.getBeginColumn());
      assertEquals(1, javaCharStream0.getColumn());
      assertEquals(22, javaCharStream0.getBeginLine());
      assertNotSame(javaParserTokenManager0, javaParserTokenManager1);
      assertFalse(javaParserTokenManager0.equals((Object)javaParserTokenManager1));
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "+=");
      assertFalse(boolean0);
      
      StringReader stringReader0 = new StringReader("BhuS");
      assertNotNull(stringReader0);
      
      int int0 = stringReader0.read();
      assertEquals(66, int0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, 66, 52);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertNotNull(javaCharStream0);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertNotNull(javaParserTokenManager0);
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(2, javaCharStream0.bufpos);
      assertEquals(66, token0.beginLine);
      assertEquals(52, token0.beginColumn);
      assertEquals(66, token0.endLine);
      assertEquals(54, token0.endColumn);
      assertEquals(74, token0.kind);
      assertEquals(66, javaCharStream0.getEndLine());
      assertEquals(54, javaCharStream0.getEndColumn());
      assertEquals(54, javaCharStream0.getColumn());
      assertEquals(66, javaCharStream0.getLine());
      assertEquals(52, javaCharStream0.getBeginColumn());
      assertEquals(66, javaCharStream0.getBeginLine());
      assertEquals("huS", token0.toString());
      assertNotNull(token0);
      
      JavaParserTokenManager javaParserTokenManager1 = new JavaParserTokenManager(javaCharStream0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(2, javaCharStream0.bufpos);
      assertEquals(66, javaCharStream0.getEndLine());
      assertEquals(54, javaCharStream0.getEndColumn());
      assertEquals(54, javaCharStream0.getColumn());
      assertEquals(66, javaCharStream0.getLine());
      assertEquals(52, javaCharStream0.getBeginColumn());
      assertEquals(66, javaCharStream0.getBeginLine());
      assertNotNull(javaParserTokenManager1);
      assertFalse(javaParserTokenManager1.equals((Object)javaParserTokenManager0));
      
      Token token1 = javaParserTokenManager1.getNextToken();
      assertEquals(0, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, token1.kind);
      assertEquals(54, token1.beginColumn);
      assertEquals(66, token1.endLine);
      assertEquals(54, token1.endColumn);
      assertEquals(66, token1.beginLine);
      assertEquals(66, javaCharStream0.getEndLine());
      assertEquals(54, javaCharStream0.getEndColumn());
      assertEquals(54, javaCharStream0.getColumn());
      assertEquals(66, javaCharStream0.getLine());
      assertEquals(54, javaCharStream0.getBeginColumn());
      assertEquals(66, javaCharStream0.getBeginLine());
      assertEquals("", token1.toString());
      assertNotSame(javaParserTokenManager1, javaParserTokenManager0);
      assertNotSame(token1, token0);
      assertNotNull(token1);
      assertFalse(javaParserTokenManager1.equals((Object)javaParserTokenManager0));
      assertFalse(token1.equals((Object)token0));
      
      Token token2 = javaParserTokenManager0.getNextToken();
      assertEquals(0, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(66, token2.endLine);
      assertEquals(0, token2.kind);
      assertEquals(54, token2.endColumn);
      assertEquals(54, token2.beginColumn);
      assertEquals(66, token2.beginLine);
      assertEquals(66, javaCharStream0.getEndLine());
      assertEquals(54, javaCharStream0.getEndColumn());
      assertEquals(54, javaCharStream0.getColumn());
      assertEquals(66, javaCharStream0.getLine());
      assertEquals(54, javaCharStream0.getBeginColumn());
      assertEquals(66, javaCharStream0.getBeginLine());
      assertEquals("", token2.toString());
      assertNotSame(javaParserTokenManager0, javaParserTokenManager1);
      assertNotSame(token2, token1);
      assertNotSame(token2, token0);
      assertNotNull(token2);
      assertFalse(javaParserTokenManager0.equals((Object)javaParserTokenManager1));
      assertFalse(token2.equals((Object)token1));
      assertFalse(token2.equals((Object)token0));
      
      javaParserTokenManager0.MoreLexicalActions();
      assertEquals(0, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(66, javaCharStream0.getEndLine());
      assertEquals(54, javaCharStream0.getEndColumn());
      assertEquals(54, javaCharStream0.getColumn());
      assertEquals(66, javaCharStream0.getLine());
      assertEquals(54, javaCharStream0.getBeginColumn());
      assertEquals(66, javaCharStream0.getBeginLine());
      assertNotSame(javaParserTokenManager0, javaParserTokenManager1);
      assertFalse(javaParserTokenManager0.equals((Object)javaParserTokenManager1));
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      StringReader stringReader0 = new StringReader("iS");
      assertNotNull(stringReader0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, 803, 2147418127);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertNotNull(javaCharStream0);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertNotNull(javaParserTokenManager0);
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(1, javaCharStream0.bufpos);
      assertEquals(803, token0.beginLine);
      assertEquals(2147418127, token0.beginColumn);
      assertEquals(2147418128, token0.endColumn);
      assertEquals(74, token0.kind);
      assertEquals(803, token0.endLine);
      assertEquals(803, javaCharStream0.getEndLine());
      assertEquals(803, javaCharStream0.getBeginLine());
      assertEquals(803, javaCharStream0.getLine());
      assertEquals(2147418127, javaCharStream0.getBeginColumn());
      assertEquals(2147418128, javaCharStream0.getColumn());
      assertEquals(2147418128, javaCharStream0.getEndColumn());
      assertEquals("iS", token0.toString());
      assertNotNull(token0);
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      StringReader stringReader0 = new StringReader("\" \"");
      assertNotNull(stringReader0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, 57, 108, 45);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertNotNull(javaCharStream0);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertNotNull(javaParserTokenManager0);
      
      JavaParserTokenManager javaParserTokenManager1 = new JavaParserTokenManager(javaCharStream0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertNotNull(javaParserTokenManager1);
      assertFalse(javaParserTokenManager1.equals((Object)javaParserTokenManager0));
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertEquals(2, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(110, token0.endColumn);
      assertEquals(73, token0.kind);
      assertEquals(57, token0.beginLine);
      assertEquals(108, token0.beginColumn);
      assertEquals(57, token0.endLine);
      assertEquals(57, javaCharStream0.getEndLine());
      assertEquals(57, javaCharStream0.getLine());
      assertEquals(110, javaCharStream0.getEndColumn());
      assertEquals(57, javaCharStream0.getBeginLine());
      assertEquals(108, javaCharStream0.getBeginColumn());
      assertEquals(110, javaCharStream0.getColumn());
      assertEquals("\" \"", token0.toString());
      assertNotSame(javaParserTokenManager0, javaParserTokenManager1);
      assertNotNull(token0);
      assertFalse(javaParserTokenManager0.equals((Object)javaParserTokenManager1));
      
      Token token1 = javaParserTokenManager1.jjFillToken();
      assertEquals(2, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(108, token1.beginColumn);
      assertEquals(57, token1.beginLine);
      assertEquals(110, token1.endColumn);
      assertEquals(0, token1.kind);
      assertEquals(57, token1.endLine);
      assertEquals(57, javaCharStream0.getEndLine());
      assertEquals(57, javaCharStream0.getLine());
      assertEquals(110, javaCharStream0.getEndColumn());
      assertEquals(57, javaCharStream0.getBeginLine());
      assertEquals(108, javaCharStream0.getBeginColumn());
      assertEquals(110, javaCharStream0.getColumn());
      assertEquals("", token1.toString());
      assertNotSame(javaParserTokenManager1, javaParserTokenManager0);
      assertNotSame(token1, token0);
      assertNotNull(token1);
      assertFalse(javaParserTokenManager1.equals((Object)javaParserTokenManager0));
      assertFalse(token1.equals((Object)token0));
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      StringReader stringReader0 = new StringReader("DnuFy!Hi!y3");
      assertNotNull(stringReader0);
      
      StringReader stringReader1 = new StringReader("`A0TXAHt ");
      assertNotNull(stringReader1);
      assertFalse(stringReader1.equals((Object)stringReader0));
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, 37, (-772));
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertNotNull(javaCharStream0);
      assertFalse(stringReader0.equals((Object)stringReader1));
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertNotNull(javaParserTokenManager0);
      assertFalse(stringReader0.equals((Object)stringReader1));
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(4, javaCharStream0.bufpos);
      assertEquals(37, token0.endLine);
      assertEquals(37, token0.beginLine);
      assertEquals((-768), token0.endColumn);
      assertEquals(74, token0.kind);
      assertEquals((-772), token0.beginColumn);
      assertEquals((-768), javaCharStream0.getEndColumn());
      assertEquals(37, javaCharStream0.getEndLine());
      assertEquals((-772), javaCharStream0.getBeginColumn());
      assertEquals(37, javaCharStream0.getBeginLine());
      assertEquals((-768), javaCharStream0.getColumn());
      assertEquals(37, javaCharStream0.getLine());
      assertEquals("DnuFy", token0.toString());
      assertNotSame(stringReader0, stringReader1);
      assertNotNull(token0);
      assertFalse(stringReader0.equals((Object)stringReader1));
      
      JavaCharStream javaCharStream1 = new JavaCharStream(stringReader0, 68, 68);
      assertEquals((-1), javaCharStream1.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream1.getBeginColumn());
      assertEquals(0, javaCharStream1.getBeginLine());
      assertNotNull(javaCharStream1);
      assertFalse(stringReader0.equals((Object)stringReader1));
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      
      JavaParserTokenManager javaParserTokenManager1 = new JavaParserTokenManager(javaCharStream0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(4, javaCharStream0.bufpos);
      assertEquals((-768), javaCharStream0.getEndColumn());
      assertEquals(37, javaCharStream0.getEndLine());
      assertEquals((-772), javaCharStream0.getBeginColumn());
      assertEquals(37, javaCharStream0.getBeginLine());
      assertEquals((-768), javaCharStream0.getColumn());
      assertEquals(37, javaCharStream0.getLine());
      assertNotNull(javaParserTokenManager1);
      assertFalse(stringReader0.equals((Object)stringReader1));
      assertFalse(javaCharStream0.equals((Object)javaCharStream1));
      assertFalse(javaParserTokenManager1.equals((Object)javaParserTokenManager0));
      
      Token token1 = javaParserTokenManager0.getNextToken();
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(5, javaCharStream0.bufpos);
      assertEquals(89, token1.kind);
      assertEquals(37, token1.endLine);
      assertEquals((-767), token1.beginColumn);
      assertEquals(37, token1.beginLine);
      assertEquals((-767), token1.endColumn);
      assertEquals((-767), javaCharStream0.getEndColumn());
      assertEquals((-767), javaCharStream0.getBeginColumn());
      assertEquals(37, javaCharStream0.getEndLine());
      assertEquals((-767), javaCharStream0.getColumn());
      assertEquals(37, javaCharStream0.getBeginLine());
      assertEquals(37, javaCharStream0.getLine());
      assertEquals("!", token1.toString());
      assertNotSame(stringReader0, stringReader1);
      assertNotSame(javaCharStream0, javaCharStream1);
      assertNotSame(javaParserTokenManager0, javaParserTokenManager1);
      assertNotSame(token1, token0);
      assertNotNull(token1);
      assertFalse(stringReader0.equals((Object)stringReader1));
      assertFalse(javaCharStream0.equals((Object)javaCharStream1));
      assertFalse(javaParserTokenManager0.equals((Object)javaParserTokenManager1));
      assertFalse(token1.equals((Object)token0));
      
      Token token2 = javaParserTokenManager0.getNextToken();
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(7, javaCharStream0.bufpos);
      assertEquals(37, token2.beginLine);
      assertEquals((-766), token2.beginColumn);
      assertEquals(37, token2.endLine);
      assertEquals(74, token2.kind);
      assertEquals((-765), token2.endColumn);
      assertEquals((-766), javaCharStream0.getBeginColumn());
      assertEquals(37, javaCharStream0.getEndLine());
      assertEquals((-765), javaCharStream0.getColumn());
      assertEquals((-765), javaCharStream0.getEndColumn());
      assertEquals(37, javaCharStream0.getBeginLine());
      assertEquals(37, javaCharStream0.getLine());
      assertEquals("Hi", token2.toString());
      assertNotSame(stringReader0, stringReader1);
      assertNotSame(javaCharStream0, javaCharStream1);
      assertNotSame(javaParserTokenManager0, javaParserTokenManager1);
      assertNotSame(token2, token1);
      assertNotSame(token2, token0);
      assertNotNull(token2);
      assertFalse(stringReader0.equals((Object)stringReader1));
      assertFalse(javaCharStream0.equals((Object)javaCharStream1));
      assertFalse(javaParserTokenManager0.equals((Object)javaParserTokenManager1));
      assertFalse(token2.equals((Object)token1));
      assertFalse(token2.equals((Object)token0));
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      Enumeration<PipedInputStream> enumeration0 = (Enumeration<PipedInputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      boolean boolean0 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "vZ<");
      assertFalse(boolean0);
      
      StringReader stringReader0 = new StringReader("f%3T%gku6");
      assertNotNull(stringReader0);
      
      StringReader stringReader1 = new StringReader("C8CGo}0P");
      assertNotNull(stringReader1);
      assertFalse(stringReader1.equals((Object)stringReader0));
      
      int int0 = stringReader0.read();
      assertEquals(102, int0);
      assertNotSame(stringReader0, stringReader1);
      assertFalse(stringReader0.equals((Object)stringReader1));
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader1, 102, 15);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertNotNull(javaCharStream0);
      assertFalse(stringReader1.equals((Object)stringReader0));
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertNotNull(javaParserTokenManager0);
      assertFalse(stringReader1.equals((Object)stringReader0));
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(4, javaCharStream0.bufpos);
      assertEquals(15, token0.beginColumn);
      assertEquals(102, token0.endLine);
      assertEquals(102, token0.beginLine);
      assertEquals(19, token0.endColumn);
      assertEquals(74, token0.kind);
      assertEquals(19, javaCharStream0.getEndColumn());
      assertEquals(15, javaCharStream0.getBeginColumn());
      assertEquals(102, javaCharStream0.getLine());
      assertEquals(19, javaCharStream0.getColumn());
      assertEquals(102, javaCharStream0.getBeginLine());
      assertEquals(102, javaCharStream0.getEndLine());
      assertEquals("C8CGo", token0.toString());
      assertNotSame(stringReader1, stringReader0);
      assertNotNull(token0);
      assertFalse(stringReader1.equals((Object)stringReader0));
      
      JavaParserTokenManager javaParserTokenManager1 = new JavaParserTokenManager(javaCharStream0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(4, javaCharStream0.bufpos);
      assertEquals(19, javaCharStream0.getEndColumn());
      assertEquals(15, javaCharStream0.getBeginColumn());
      assertEquals(102, javaCharStream0.getLine());
      assertEquals(19, javaCharStream0.getColumn());
      assertEquals(102, javaCharStream0.getBeginLine());
      assertEquals(102, javaCharStream0.getEndLine());
      assertNotNull(javaParserTokenManager1);
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertFalse(javaParserTokenManager1.equals((Object)javaParserTokenManager0));
      
      Token token1 = javaParserTokenManager0.getNextToken();
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(5, javaCharStream0.bufpos);
      assertEquals(102, token1.endLine);
      assertEquals(102, token1.beginLine);
      assertEquals(20, token1.endColumn);
      assertEquals(20, token1.beginColumn);
      assertEquals(80, token1.kind);
      assertEquals(20, javaCharStream0.getBeginColumn());
      assertEquals(20, javaCharStream0.getColumn());
      assertEquals(20, javaCharStream0.getEndColumn());
      assertEquals(102, javaCharStream0.getLine());
      assertEquals(102, javaCharStream0.getBeginLine());
      assertEquals(102, javaCharStream0.getEndLine());
      assertEquals("}", token1.toString());
      assertNotSame(stringReader1, stringReader0);
      assertNotSame(javaParserTokenManager0, javaParserTokenManager1);
      assertNotSame(token1, token0);
      assertNotNull(token1);
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertFalse(javaParserTokenManager0.equals((Object)javaParserTokenManager1));
      assertFalse(token1.equals((Object)token0));
      
      Token token2 = javaParserTokenManager1.jjFillToken();
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(5, javaCharStream0.bufpos);
      assertEquals(0, token2.kind);
      assertEquals(102, token2.endLine);
      assertEquals(20, token2.endColumn);
      assertEquals(102, token2.beginLine);
      assertEquals(20, token2.beginColumn);
      assertEquals(20, javaCharStream0.getBeginColumn());
      assertEquals(20, javaCharStream0.getColumn());
      assertEquals(20, javaCharStream0.getEndColumn());
      assertEquals(102, javaCharStream0.getLine());
      assertEquals(102, javaCharStream0.getBeginLine());
      assertEquals(102, javaCharStream0.getEndLine());
      assertEquals("", token2.toString());
      assertNotSame(stringReader1, stringReader0);
      assertNotSame(javaParserTokenManager1, javaParserTokenManager0);
      assertNotSame(token2, token1);
      assertNotSame(token2, token0);
      assertNotNull(token2);
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertFalse(javaParserTokenManager1.equals((Object)javaParserTokenManager0));
      assertFalse(token2.equals((Object)token1));
      assertFalse(token2.equals((Object)token0));
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      assertFalse(fileDescriptor0.valid());
      assertNotNull(fileDescriptor0);
      
      PipedInputStream pipedInputStream0 = new PipedInputStream(26);
      assertEquals(0, pipedInputStream0.available());
      assertNotNull(pipedInputStream0);
      
      StringReader stringReader0 = new StringReader("6(GHlw} T?7gaVOc<S-");
      assertNotNull(stringReader0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertNotNull(javaCharStream0);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertNotNull(javaParserTokenManager0);
      
      JavaParserTokenManager javaParserTokenManager1 = new JavaParserTokenManager(javaCharStream0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertNotNull(javaParserTokenManager1);
      assertFalse(javaParserTokenManager1.equals((Object)javaParserTokenManager0));
      
      Token token0 = javaParserTokenManager1.getNextToken();
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.bufpos);
      assertEquals(66, token0.kind);
      assertEquals(1, token0.beginLine);
      assertEquals(1, token0.endLine);
      assertEquals(1, token0.endColumn);
      assertEquals(1, token0.beginColumn);
      assertEquals(1, javaCharStream0.getBeginColumn());
      assertEquals(1, javaCharStream0.getColumn());
      assertEquals(1, javaCharStream0.getEndColumn());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals("6", token0.toString());
      assertNotSame(javaParserTokenManager1, javaParserTokenManager0);
      assertNotNull(token0);
      assertFalse(javaParserTokenManager1.equals((Object)javaParserTokenManager0));
      
      StringReader stringReader1 = new StringReader("RX]m$>OeW&oMX\u0003HUgH");
      assertNotNull(stringReader1);
      assertFalse(stringReader1.equals((Object)stringReader0));
      
      JavaParserTokenManager javaParserTokenManager2 = new JavaParserTokenManager(javaCharStream0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.bufpos);
      assertEquals(1, javaCharStream0.getBeginColumn());
      assertEquals(1, javaCharStream0.getColumn());
      assertEquals(1, javaCharStream0.getEndColumn());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(1, javaCharStream0.getEndLine());
      assertNotNull(javaParserTokenManager2);
      assertFalse(stringReader0.equals((Object)stringReader1));
      assertFalse(javaParserTokenManager2.equals((Object)javaParserTokenManager1));
      assertFalse(javaParserTokenManager2.equals((Object)javaParserTokenManager0));
      
      Token token1 = javaParserTokenManager2.getNextToken();
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(1, javaCharStream0.bufpos);
      assertEquals(2, token1.beginColumn);
      assertEquals(2, token1.endColumn);
      assertEquals(1, token1.endLine);
      assertEquals(1, token1.beginLine);
      assertEquals(77, token1.kind);
      assertEquals(2, javaCharStream0.getBeginColumn());
      assertEquals(2, javaCharStream0.getColumn());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(2, javaCharStream0.getEndColumn());
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals("(", token1.toString());
      assertNotSame(stringReader0, stringReader1);
      assertNotSame(javaParserTokenManager2, javaParserTokenManager1);
      assertNotSame(javaParserTokenManager2, javaParserTokenManager0);
      assertNotSame(token1, token0);
      assertNotNull(token1);
      assertFalse(stringReader0.equals((Object)stringReader1));
      assertFalse(javaParserTokenManager2.equals((Object)javaParserTokenManager1));
      assertFalse(javaParserTokenManager2.equals((Object)javaParserTokenManager0));
      assertFalse(token1.equals((Object)token0));
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      Enumeration<PipedInputStream> enumeration0 = (Enumeration<PipedInputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(enumeration0).hasMoreElements();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      assertNotNull(sequenceInputStream0);
      
      StringReader stringReader0 = new StringReader("");
      assertNotNull(stringReader0);
      
      StringReader stringReader1 = new StringReader("%'*?fqVk2o>\"Ff");
      assertNotNull(stringReader1);
      assertFalse(stringReader1.equals((Object)stringReader0));
      
      StringReader stringReader2 = new StringReader(";y*]LoGS'");
      assertNotNull(stringReader2);
      assertFalse(stringReader2.equals((Object)stringReader1));
      assertFalse(stringReader2.equals((Object)stringReader0));
      
      StringReader stringReader3 = new StringReader("g3{]D*");
      assertNotNull(stringReader3);
      assertFalse(stringReader3.equals((Object)stringReader1));
      assertFalse(stringReader3.equals((Object)stringReader0));
      assertFalse(stringReader3.equals((Object)stringReader2));
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader1, 0, 43);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertNotNull(javaCharStream0);
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertFalse(stringReader1.equals((Object)stringReader2));
      assertFalse(stringReader1.equals((Object)stringReader3));
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertNotNull(javaParserTokenManager0);
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertFalse(stringReader1.equals((Object)stringReader2));
      assertFalse(stringReader1.equals((Object)stringReader3));
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertEquals(0, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, token0.endLine);
      assertEquals(108, token0.kind);
      assertEquals(43, token0.beginColumn);
      assertEquals(43, token0.endColumn);
      assertEquals(0, token0.beginLine);
      assertEquals(43, javaCharStream0.getColumn());
      assertEquals(0, javaCharStream0.getLine());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getEndLine());
      assertEquals(43, javaCharStream0.getEndColumn());
      assertEquals(43, javaCharStream0.getBeginColumn());
      assertEquals("%", token0.toString());
      assertNotSame(stringReader1, stringReader0);
      assertNotSame(stringReader1, stringReader2);
      assertNotSame(stringReader1, stringReader3);
      assertNotNull(token0);
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertFalse(stringReader1.equals((Object)stringReader2));
      assertFalse(stringReader1.equals((Object)stringReader3));
      
      // Undeclared exception!
      try { 
        javaParserTokenManager0.getNextToken();
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Lexical error at line 0, column 46.  Encountered: \"?\" (63), after : \"\\'*\"
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      StringReader stringReader0 = new StringReader("\"e");
      assertNotNull(stringReader0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, (-2514), (-2514));
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertNotNull(javaCharStream0);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertNotNull(javaParserTokenManager0);
      
      // Undeclared exception!
      try { 
        javaParserTokenManager0.jjFillToken();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      assertFalse(fileDescriptor0.valid());
      assertNotNull(fileDescriptor0);
      
      Enumeration<PipedInputStream> enumeration0 = (Enumeration<PipedInputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(enumeration0).hasMoreElements();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      assertNotNull(sequenceInputStream0);
      
      DataInputStream dataInputStream0 = new DataInputStream(sequenceInputStream0);
      assertNotNull(dataInputStream0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(dataInputStream0, (-2271), (-2271));
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertNotNull(javaCharStream0);
      
      StringReader stringReader0 = new StringReader("/.17[:Do.XL7Df");
      assertNotNull(stringReader0);
      
      int int0 = stringReader0.read();
      assertEquals(47, int0);
      
      StringReader stringReader1 = new StringReader("/.17[:Do.XL7Df");
      assertNotNull(stringReader1);
      assertFalse(stringReader1.equals((Object)stringReader0));
      
      JavaCharStream javaCharStream1 = new JavaCharStream(stringReader1, (-604), 1194);
      assertEquals((-1), javaCharStream1.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream1.getBeginLine());
      assertEquals(0, javaCharStream1.getBeginColumn());
      assertNotNull(javaCharStream1);
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream1);
      assertEquals((-1), javaCharStream1.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream1.getBeginLine());
      assertEquals(0, javaCharStream1.getBeginColumn());
      assertNotNull(javaParserTokenManager0);
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertEquals(0, javaCharStream1.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-604), token0.endLine);
      assertEquals(1194, token0.endColumn);
      assertEquals(1194, token0.beginColumn);
      assertEquals(104, token0.kind);
      assertEquals((-604), token0.beginLine);
      assertEquals((-604), javaCharStream1.getEndLine());
      assertEquals(1194, javaCharStream1.getColumn());
      assertEquals((-604), javaCharStream1.getBeginLine());
      assertEquals(1194, javaCharStream1.getEndColumn());
      assertEquals((-604), javaCharStream1.getLine());
      assertEquals(1194, javaCharStream1.getBeginColumn());
      assertEquals("/", token0.toString());
      assertNotSame(stringReader1, stringReader0);
      assertNotSame(javaCharStream1, javaCharStream0);
      assertNotNull(token0);
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      
      Token token1 = javaParserTokenManager0.getNextToken();
      assertEquals(3, javaCharStream1.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(1197, token1.endColumn);
      assertEquals((-604), token1.endLine);
      assertEquals((-604), token1.beginLine);
      assertEquals(70, token1.kind);
      assertEquals(1195, token1.beginColumn);
      assertEquals((-604), javaCharStream1.getEndLine());
      assertEquals(1197, javaCharStream1.getColumn());
      assertEquals(1197, javaCharStream1.getEndColumn());
      assertEquals((-604), javaCharStream1.getBeginLine());
      assertEquals((-604), javaCharStream1.getLine());
      assertEquals(1195, javaCharStream1.getBeginColumn());
      assertEquals(".17", token1.toString());
      assertNotSame(stringReader1, stringReader0);
      assertNotSame(javaCharStream1, javaCharStream0);
      assertNotSame(token1, token0);
      assertNotNull(token1);
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      assertFalse(token1.equals((Object)token0));
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      StringReader stringReader0 = new StringReader("f%3T%gku6");
      assertNotNull(stringReader0);
      
      int int0 = stringReader0.read();
      assertEquals(102, int0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, 84, 1024);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertNotNull(javaCharStream0);
      
      boolean boolean0 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "");
      assertFalse(boolean0);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertNotNull(javaParserTokenManager0);
      
      javaParserTokenManager0.ReInit(javaCharStream0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      
      JavaParserTokenManager javaParserTokenManager1 = new JavaParserTokenManager(javaCharStream0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertNotNull(javaParserTokenManager1);
      assertFalse(javaParserTokenManager1.equals((Object)javaParserTokenManager0));
      
      Token token0 = javaParserTokenManager1.getNextToken();
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.bufpos);
      assertEquals(84, token0.beginLine);
      assertEquals(1024, token0.endColumn);
      assertEquals(1024, token0.beginColumn);
      assertEquals(84, token0.endLine);
      assertEquals(108, token0.kind);
      assertEquals(1024, javaCharStream0.getBeginColumn());
      assertEquals(84, javaCharStream0.getBeginLine());
      assertEquals(84, javaCharStream0.getLine());
      assertEquals(1024, javaCharStream0.getColumn());
      assertEquals(84, javaCharStream0.getEndLine());
      assertEquals(1024, javaCharStream0.getEndColumn());
      assertEquals("%", token0.toString());
      assertNotSame(javaParserTokenManager1, javaParserTokenManager0);
      assertNotNull(token0);
      assertFalse(javaParserTokenManager1.equals((Object)javaParserTokenManager0));
      
      char char0 = javaCharStream0.ReadByte();
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.bufpos);
      assertEquals(1024, javaCharStream0.getBeginColumn());
      assertEquals(84, javaCharStream0.getBeginLine());
      assertEquals(84, javaCharStream0.getLine());
      assertEquals(1024, javaCharStream0.getColumn());
      assertEquals(84, javaCharStream0.getEndLine());
      assertEquals(1024, javaCharStream0.getEndColumn());
      assertEquals('T', char0);
      
      Token token1 = javaParserTokenManager0.getNextToken();
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(1, javaCharStream0.bufpos);
      assertEquals(84, token1.beginLine);
      assertEquals(1025, token1.beginColumn);
      assertEquals(66, token1.kind);
      assertEquals(84, token1.endLine);
      assertEquals(1025, token1.endColumn);
      assertEquals(84, javaCharStream0.getBeginLine());
      assertEquals(1025, javaCharStream0.getColumn());
      assertEquals(84, javaCharStream0.getLine());
      assertEquals(84, javaCharStream0.getEndLine());
      assertEquals(1025, javaCharStream0.getEndColumn());
      assertEquals(1025, javaCharStream0.getBeginColumn());
      assertEquals("3", token1.toString());
      assertNotSame(javaParserTokenManager0, javaParserTokenManager1);
      assertNotSame(token1, token0);
      assertNotNull(token1);
      assertFalse(javaParserTokenManager0.equals((Object)javaParserTokenManager1));
      assertFalse(token1.equals((Object)token0));
      
      Token token2 = javaParserTokenManager1.getNextToken();
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(2, javaCharStream0.bufpos);
      assertEquals(108, token2.kind);
      assertEquals(84, token2.beginLine);
      assertEquals(1026, token2.endColumn);
      assertEquals(1026, token2.beginColumn);
      assertEquals(84, token2.endLine);
      assertEquals(84, javaCharStream0.getBeginLine());
      assertEquals(1026, javaCharStream0.getColumn());
      assertEquals(84, javaCharStream0.getLine());
      assertEquals(84, javaCharStream0.getEndLine());
      assertEquals(1026, javaCharStream0.getEndColumn());
      assertEquals(1026, javaCharStream0.getBeginColumn());
      assertEquals("%", token2.toString());
      assertNotSame(javaParserTokenManager1, javaParserTokenManager0);
      assertNotSame(token2, token1);
      assertNotSame(token2, token0);
      assertNotNull(token2);
      assertFalse(javaParserTokenManager1.equals((Object)javaParserTokenManager0));
      assertFalse(token2.equals((Object)token1));
      assertFalse(token2.equals((Object)token0));
      
      Token token3 = javaParserTokenManager0.jjFillToken();
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(2, javaCharStream0.bufpos);
      assertEquals(1026, token3.endColumn);
      assertEquals(66, token3.kind);
      assertEquals(1026, token3.beginColumn);
      assertEquals(84, token3.beginLine);
      assertEquals(84, token3.endLine);
      assertEquals(84, javaCharStream0.getBeginLine());
      assertEquals(1026, javaCharStream0.getColumn());
      assertEquals(84, javaCharStream0.getLine());
      assertEquals(84, javaCharStream0.getEndLine());
      assertEquals(1026, javaCharStream0.getEndColumn());
      assertEquals(1026, javaCharStream0.getBeginColumn());
      assertEquals("%", token3.toString());
      assertNotSame(javaParserTokenManager0, javaParserTokenManager1);
      assertNotSame(token3, token0);
      assertNotSame(token3, token1);
      assertNotSame(token3, token2);
      assertNotNull(token3);
      assertFalse(javaParserTokenManager0.equals((Object)javaParserTokenManager1));
      assertFalse(token3.equals((Object)token0));
      assertFalse(token3.equals((Object)token1));
      assertFalse(token3.equals((Object)token2));
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      assertFalse(fileDescriptor0.valid());
      assertNotNull(fileDescriptor0);
      
      StringReader stringReader0 = new StringReader("");
      assertNotNull(stringReader0);
      
      StringReader stringReader1 = new StringReader("\f");
      assertNotNull(stringReader1);
      assertFalse(stringReader1.equals((Object)stringReader0));
      
      StringReader stringReader2 = new StringReader("throws");
      assertNotNull(stringReader2);
      assertFalse(stringReader2.equals((Object)stringReader0));
      assertFalse(stringReader2.equals((Object)stringReader1));
      
      StringReader stringReader3 = new StringReader("int");
      assertNotNull(stringReader3);
      assertFalse(stringReader3.equals((Object)stringReader1));
      assertFalse(stringReader3.equals((Object)stringReader2));
      assertFalse(stringReader3.equals((Object)stringReader0));
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader3, 1235, 1235, 43);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertNotNull(javaCharStream0);
      assertFalse(stringReader3.equals((Object)stringReader1));
      assertFalse(stringReader3.equals((Object)stringReader2));
      assertFalse(stringReader3.equals((Object)stringReader0));
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertNotNull(javaParserTokenManager0);
      assertFalse(stringReader3.equals((Object)stringReader1));
      assertFalse(stringReader3.equals((Object)stringReader2));
      assertFalse(stringReader3.equals((Object)stringReader0));
      
      javaCharStream0.FillBuff();
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertNotSame(stringReader3, stringReader1);
      assertNotSame(stringReader3, stringReader2);
      assertNotSame(stringReader3, stringReader0);
      assertFalse(stringReader3.equals((Object)stringReader1));
      assertFalse(stringReader3.equals((Object)stringReader2));
      assertFalse(stringReader3.equals((Object)stringReader0));
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertEquals(2, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(1237, token0.endColumn);
      assertEquals(1235, token0.endLine);
      assertEquals(1235, token0.beginColumn);
      assertEquals(40, token0.kind);
      assertEquals(1235, token0.beginLine);
      assertEquals(1235, javaCharStream0.getEndLine());
      assertEquals(1237, javaCharStream0.getColumn());
      assertEquals(1237, javaCharStream0.getEndColumn());
      assertEquals(1235, javaCharStream0.getBeginColumn());
      assertEquals(1235, javaCharStream0.getBeginLine());
      assertEquals(1235, javaCharStream0.getLine());
      assertEquals("int", token0.toString());
      assertNotSame(stringReader3, stringReader1);
      assertNotSame(stringReader3, stringReader2);
      assertNotSame(stringReader3, stringReader0);
      assertNotNull(token0);
      assertFalse(stringReader3.equals((Object)stringReader1));
      assertFalse(stringReader3.equals((Object)stringReader2));
      assertFalse(stringReader3.equals((Object)stringReader0));
      
      Token token1 = javaParserTokenManager0.getNextToken();
      assertEquals(0, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, token1.kind);
      assertEquals(1237, token1.endColumn);
      assertEquals(1235, token1.endLine);
      assertEquals(1237, token1.beginColumn);
      assertEquals(1235, token1.beginLine);
      assertEquals(1235, javaCharStream0.getEndLine());
      assertEquals(1237, javaCharStream0.getColumn());
      assertEquals(1237, javaCharStream0.getEndColumn());
      assertEquals(1237, javaCharStream0.getBeginColumn());
      assertEquals(1235, javaCharStream0.getBeginLine());
      assertEquals(1235, javaCharStream0.getLine());
      assertEquals("", token1.toString());
      assertNotSame(stringReader3, stringReader1);
      assertNotSame(stringReader3, stringReader2);
      assertNotSame(stringReader3, stringReader0);
      assertNotSame(token1, token0);
      assertNotNull(token1);
      assertFalse(stringReader3.equals((Object)stringReader1));
      assertFalse(stringReader3.equals((Object)stringReader2));
      assertFalse(stringReader3.equals((Object)stringReader0));
      assertFalse(token1.equals((Object)token0));
      
      Token token2 = javaParserTokenManager0.getNextToken();
      assertEquals(0, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(1237, token2.beginColumn);
      assertEquals(1235, token2.beginLine);
      assertEquals(0, token2.kind);
      assertEquals(1237, token2.endColumn);
      assertEquals(1235, token2.endLine);
      assertEquals(1235, javaCharStream0.getEndLine());
      assertEquals(1237, javaCharStream0.getColumn());
      assertEquals(1237, javaCharStream0.getEndColumn());
      assertEquals(1237, javaCharStream0.getBeginColumn());
      assertEquals(1235, javaCharStream0.getBeginLine());
      assertEquals(1235, javaCharStream0.getLine());
      assertEquals("", token2.toString());
      assertNotSame(stringReader3, stringReader1);
      assertNotSame(stringReader3, stringReader2);
      assertNotSame(stringReader3, stringReader0);
      assertNotSame(token2, token0);
      assertNotSame(token2, token1);
      assertNotNull(token2);
      assertFalse(stringReader3.equals((Object)stringReader1));
      assertFalse(stringReader3.equals((Object)stringReader2));
      assertFalse(stringReader3.equals((Object)stringReader0));
      assertFalse(token2.equals((Object)token0));
      assertFalse(token2.equals((Object)token1));
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      assertFalse(fileDescriptor0.valid());
      assertNotNull(fileDescriptor0);
      
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      assertEquals(0, pipedInputStream0.available());
      assertNotNull(pipedInputStream0);
      
      StringReader stringReader0 = new StringReader("]|b");
      assertNotNull(stringReader0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, 2274, 2313);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertNotNull(javaCharStream0);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertNotNull(javaParserTokenManager0);
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertEquals(0, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(2313, token0.endColumn);
      assertEquals(2274, token0.beginLine);
      assertEquals(82, token0.kind);
      assertEquals(2274, token0.endLine);
      assertEquals(2313, token0.beginColumn);
      assertEquals(2313, javaCharStream0.getEndColumn());
      assertEquals(2313, javaCharStream0.getBeginColumn());
      assertEquals(2274, javaCharStream0.getEndLine());
      assertEquals(2274, javaCharStream0.getBeginLine());
      assertEquals(2274, javaCharStream0.getLine());
      assertEquals(2313, javaCharStream0.getColumn());
      assertEquals("]", token0.toString());
      assertNotNull(token0);
      
      Token token1 = javaParserTokenManager0.getNextToken();
      assertEquals(0, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(2274, token1.beginLine);
      assertEquals(2314, token1.endColumn);
      assertEquals(2314, token1.beginColumn);
      assertEquals(106, token1.kind);
      assertEquals(2274, token1.endLine);
      assertEquals(2314, javaCharStream0.getEndColumn());
      assertEquals(2314, javaCharStream0.getBeginColumn());
      assertEquals(2274, javaCharStream0.getEndLine());
      assertEquals(2274, javaCharStream0.getBeginLine());
      assertEquals(2274, javaCharStream0.getLine());
      assertEquals(2314, javaCharStream0.getColumn());
      assertEquals("|", token1.toString());
      assertNotSame(token1, token0);
      assertNotNull(token1);
      assertFalse(token1.equals((Object)token0));
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      StringReader stringReader0 = new StringReader("FoFqL*&l!43Zy");
      assertNotNull(stringReader0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, (-797), (-797));
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertNotNull(javaCharStream0);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertNotNull(javaParserTokenManager0);
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertEquals(4, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-797), token0.endLine);
      assertEquals((-797), token0.beginLine);
      assertEquals(74, token0.kind);
      assertEquals((-793), token0.endColumn);
      assertEquals((-797), token0.beginColumn);
      assertEquals((-797), javaCharStream0.getEndLine());
      assertEquals((-793), javaCharStream0.getColumn());
      assertEquals((-793), javaCharStream0.getEndColumn());
      assertEquals((-797), javaCharStream0.getBeginColumn());
      assertEquals((-797), javaCharStream0.getLine());
      assertEquals((-797), javaCharStream0.getBeginLine());
      assertEquals("FoFqL", token0.toString());
      assertNotNull(token0);
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      Enumeration<PipedInputStream> enumeration0 = (Enumeration<PipedInputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(enumeration0).hasMoreElements();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      assertNotNull(sequenceInputStream0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(sequenceInputStream0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertNotNull(javaCharStream0);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertNotNull(javaParserTokenManager0);
      
      javaParserTokenManager0.ReInit(javaCharStream0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      PipedInputStream pipedInputStream0 = new PipedInputStream(57);
      assertEquals(0, pipedInputStream0.available());
      assertNotNull(pipedInputStream0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(pipedInputStream0, (-45), (-45));
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertEquals(0, pipedInputStream0.available());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertNotNull(javaCharStream0);
      
      StringReader stringReader0 = new StringReader("Kf:q%yiN+,9<]Du");
      assertNotNull(stringReader0);
      
      int int0 = stringReader0.read();
      assertEquals(75, int0);
      
      JavaCharStream javaCharStream1 = new JavaCharStream(stringReader0, 119, 57);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream1.bufpos);
      assertEquals(0, javaCharStream1.getBeginLine());
      assertEquals(0, javaCharStream1.getBeginColumn());
      assertNotNull(javaCharStream1);
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream1);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream1.bufpos);
      assertEquals(0, javaCharStream1.getBeginLine());
      assertEquals(0, javaCharStream1.getBeginColumn());
      assertNotNull(javaParserTokenManager0);
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream1.bufpos);
      assertEquals(57, token0.endColumn);
      assertEquals(74, token0.kind);
      assertEquals(57, token0.beginColumn);
      assertEquals(119, token0.endLine);
      assertEquals(119, token0.beginLine);
      assertEquals(57, javaCharStream1.getBeginColumn());
      assertEquals(57, javaCharStream1.getColumn());
      assertEquals(119, javaCharStream1.getEndLine());
      assertEquals(57, javaCharStream1.getEndColumn());
      assertEquals(119, javaCharStream1.getLine());
      assertEquals(119, javaCharStream1.getBeginLine());
      assertEquals("f", token0.toString());
      assertNotSame(javaCharStream1, javaCharStream0);
      assertNotNull(token0);
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      
      JavaParserTokenManager javaParserTokenManager1 = null;
      try {
        javaParserTokenManager1 = new JavaParserTokenManager(javaCharStream0, 36);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Error: Ignoring invalid lexical state : 36. State unchanged.
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      StringReader stringReader0 = new StringReader("w%DN*pejbGS{#17g'Z");
      assertNotNull(stringReader0);
      
      int int0 = JavaParserConstants.LSHIFT;
      assertEquals(109, int0);
      
      StringReader stringReader1 = new StringReader("w%DN*pejbGS{#17g'Z");
      assertNotNull(stringReader1);
      assertFalse(stringReader1.equals((Object)stringReader0));
      
      StringReader stringReader2 = new StringReader("24$dhkA*");
      assertNotNull(stringReader2);
      assertFalse(stringReader2.equals((Object)stringReader0));
      assertFalse(stringReader2.equals((Object)stringReader1));
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader2, 2786, 10);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertNotNull(javaCharStream0);
      assertFalse(stringReader2.equals((Object)stringReader0));
      assertFalse(stringReader2.equals((Object)stringReader1));
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertNotNull(javaParserTokenManager0);
      assertFalse(stringReader2.equals((Object)stringReader0));
      assertFalse(stringReader2.equals((Object)stringReader1));
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertEquals(1, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(10, token0.beginColumn);
      assertEquals(2786, token0.endLine);
      assertEquals(66, token0.kind);
      assertEquals(11, token0.endColumn);
      assertEquals(2786, token0.beginLine);
      assertEquals(11, javaCharStream0.getEndColumn());
      assertEquals(2786, javaCharStream0.getEndLine());
      assertEquals(10, javaCharStream0.getBeginColumn());
      assertEquals(11, javaCharStream0.getColumn());
      assertEquals(2786, javaCharStream0.getBeginLine());
      assertEquals(2786, javaCharStream0.getLine());
      assertEquals("24", token0.toString());
      assertNotSame(stringReader2, stringReader0);
      assertNotSame(stringReader2, stringReader1);
      assertNotNull(token0);
      assertFalse(stringReader2.equals((Object)stringReader0));
      assertFalse(stringReader2.equals((Object)stringReader1));
      
      Token token1 = javaParserTokenManager0.getNextToken();
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(6, javaCharStream0.bufpos);
      assertEquals(12, token1.beginColumn);
      assertEquals(2786, token1.endLine);
      assertEquals(74, token1.kind);
      assertEquals(2786, token1.beginLine);
      assertEquals(16, token1.endColumn);
      assertEquals(16, javaCharStream0.getEndColumn());
      assertEquals(16, javaCharStream0.getColumn());
      assertEquals(12, javaCharStream0.getBeginColumn());
      assertEquals(2786, javaCharStream0.getEndLine());
      assertEquals(2786, javaCharStream0.getBeginLine());
      assertEquals(2786, javaCharStream0.getLine());
      assertEquals("$dhkA", token1.toString());
      assertNotSame(stringReader2, stringReader0);
      assertNotSame(stringReader2, stringReader1);
      assertNotSame(token1, token0);
      assertNotNull(token1);
      assertFalse(stringReader2.equals((Object)stringReader0));
      assertFalse(stringReader2.equals((Object)stringReader1));
      assertFalse(token1.equals((Object)token0));
      
      Token token2 = javaParserTokenManager0.getNextToken();
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(7, javaCharStream0.bufpos);
      assertEquals(2786, token2.beginLine);
      assertEquals(2786, token2.endLine);
      assertEquals(103, token2.kind);
      assertEquals(17, token2.beginColumn);
      assertEquals(17, token2.endColumn);
      assertEquals(17, javaCharStream0.getColumn());
      assertEquals(17, javaCharStream0.getEndColumn());
      assertEquals(17, javaCharStream0.getBeginColumn());
      assertEquals(2786, javaCharStream0.getEndLine());
      assertEquals(2786, javaCharStream0.getBeginLine());
      assertEquals(2786, javaCharStream0.getLine());
      assertEquals("*", token2.toString());
      assertNotSame(stringReader2, stringReader0);
      assertNotSame(stringReader2, stringReader1);
      assertNotSame(token2, token1);
      assertNotSame(token2, token0);
      assertNotNull(token2);
      assertFalse(stringReader2.equals((Object)stringReader0));
      assertFalse(stringReader2.equals((Object)stringReader1));
      assertFalse(token2.equals((Object)token1));
      assertFalse(token2.equals((Object)token0));
      
      JavaParserTokenManager javaParserTokenManager1 = null;
      try {
        javaParserTokenManager1 = new JavaParserTokenManager(javaCharStream0, (-86));
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Error: Ignoring invalid lexical state : -86. State unchanged.
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      PipedInputStream pipedInputStream0 = new PipedInputStream(57);
      assertEquals(0, pipedInputStream0.available());
      assertNotNull(pipedInputStream0);
      
      StringReader stringReader0 = new StringReader("K&_&QoM\")c9|b.adZ&");
      assertNotNull(stringReader0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, 57, 57);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertNotNull(javaCharStream0);
      
      JavaCharStream javaCharStream1 = new JavaCharStream(stringReader0, 51, 57);
      assertEquals((-1), javaCharStream1.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream1.getBeginColumn());
      assertEquals(0, javaCharStream1.getBeginLine());
      assertNotNull(javaCharStream1);
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      
      JavaCharStream javaCharStream2 = new JavaCharStream(stringReader0, 82, (-959));
      assertEquals((-1), javaCharStream2.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream2.getBeginColumn());
      assertEquals(0, javaCharStream2.getBeginLine());
      assertNotNull(javaCharStream2);
      assertFalse(javaCharStream2.equals((Object)javaCharStream1));
      assertFalse(javaCharStream2.equals((Object)javaCharStream0));
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertNotNull(javaParserTokenManager0);
      assertFalse(javaCharStream0.equals((Object)javaCharStream1));
      assertFalse(javaCharStream0.equals((Object)javaCharStream2));
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.bufpos);
      assertEquals(74, token0.kind);
      assertEquals(57, token0.beginLine);
      assertEquals(57, token0.endColumn);
      assertEquals(57, token0.beginColumn);
      assertEquals(57, token0.endLine);
      assertEquals(57, javaCharStream0.getColumn());
      assertEquals(57, javaCharStream0.getEndColumn());
      assertEquals(57, javaCharStream0.getEndLine());
      assertEquals(57, javaCharStream0.getLine());
      assertEquals(57, javaCharStream0.getBeginColumn());
      assertEquals(57, javaCharStream0.getBeginLine());
      assertEquals("K", token0.toString());
      assertNotSame(javaCharStream0, javaCharStream1);
      assertNotSame(javaCharStream0, javaCharStream2);
      assertNotNull(token0);
      assertFalse(javaCharStream0.equals((Object)javaCharStream1));
      assertFalse(javaCharStream0.equals((Object)javaCharStream2));
      
      JavaParserTokenManager javaParserTokenManager1 = null;
      try {
        javaParserTokenManager1 = new JavaParserTokenManager(javaCharStream2, 4);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Error: Ignoring invalid lexical state : 4. State unchanged.
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      JavaCharStream javaCharStream0 = null;
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager((JavaCharStream) null, 0);
      assertNotNull(javaParserTokenManager0);
      
      javaParserTokenManager0.jjnewStateCnt = 0;
      Token token0 = Token.newToken(1797);
      assertEquals(0, token0.endLine);
      assertEquals(0, token0.beginColumn);
      assertEquals(0, token0.endColumn);
      assertEquals(0, token0.kind);
      assertEquals(0, token0.beginLine);
      assertNull(token0.toString());
      assertNotNull(token0);
      
      Token token1 = Token.newToken(0);
      assertEquals(0, token1.beginLine);
      assertEquals(0, token1.kind);
      assertEquals(0, token1.endLine);
      assertEquals(0, token1.endColumn);
      assertEquals(0, token1.beginColumn);
      assertNull(token1.toString());
      assertNotSame(token1, token0);
      assertNotNull(token1);
      assertFalse(token1.equals((Object)token0));
      
      token0.next = token1;
      assertNull(token0.toString());
      assertNull(token1.toString());
      assertNull(token0.next.toString());
      
      Token token2 = Token.newToken(0);
      assertEquals(0, token2.endLine);
      assertEquals(0, token2.endColumn);
      assertEquals(0, token2.beginColumn);
      assertEquals(0, token2.kind);
      assertEquals(0, token2.beginLine);
      assertNull(token2.toString());
      assertNotSame(token2, token1);
      assertNotSame(token2, token0);
      assertNotNull(token2);
      assertFalse(token2.equals((Object)token1));
      assertFalse(token2.equals((Object)token0));
      
      token0.next.beginLine = 0;
      assertNull(token0.toString());
      
      token0.next = token2;
      assertNull(token0.toString());
      assertNull(token1.toString());
      assertNull(token0.next.toString());
      
      token2.kind = 1123;
      assertNull(token2.toString());
      
      token2.beginLine = 1123;
      assertNull(token2.toString());
      
      MockPrintStream mockPrintStream0 = new MockPrintStream(javaParserTokenManager0.debugStream, false);
      assertNotNull(mockPrintStream0);
      
      token2.endColumn = (-1073);
      assertNull(token2.toString());
      
      javaParserTokenManager0.debugStream = (PrintStream) mockPrintStream0;
      token0.kind = 422;
      assertNull(token0.toString());
      
      token0.kind = (-1073);
      assertNull(token0.toString());
      
      javaParserTokenManager0.SkipLexicalActions(token0);
      assertEquals(0, token0.endLine);
      assertEquals(0, token0.beginColumn);
      assertEquals(0, token0.endColumn);
      assertEquals((-1073), token0.kind);
      assertEquals(0, token0.beginLine);
      assertNull(token0.toString());
      assertNotSame(token0, token1);
      assertNotSame(token0, token2);
      assertFalse(token0.equals((Object)token1));
      assertFalse(token0.equals((Object)token2));
      
      // Undeclared exception!
      try { 
        javaParserTokenManager0.ReInit((JavaCharStream) null, (-1610));
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Error: Ignoring invalid lexical state : -1610. State unchanged.
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      assertFalse(fileDescriptor0.valid());
      assertNotNull(fileDescriptor0);
      
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(fileDescriptor0);
      assertNotNull(mockFileInputStream0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(mockFileInputStream0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertFalse(fileDescriptor0.valid());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertNotNull(javaCharStream0);
      
      JavaParserTokenManager javaParserTokenManager0 = null;
      try {
        javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0, (-1));
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Error: Ignoring invalid lexical state : -1. State unchanged.
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      assertFalse(fileDescriptor0.valid());
      assertNotNull(fileDescriptor0);
      
      StringReader stringReader0 = new StringReader("7ku#so?1Q6(1dN_");
      assertNotNull(stringReader0);
      
      int int0 = JavaParserConstants.LSHIFT;
      assertEquals(109, int0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, 109, 1880);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertNotNull(javaCharStream0);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertNotNull(javaParserTokenManager0);
      
      javaParserTokenManager0.MoreLexicalActions();
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.bufpos);
      assertEquals(66, token0.kind);
      assertEquals(109, token0.endLine);
      assertEquals(1880, token0.endColumn);
      assertEquals(109, token0.beginLine);
      assertEquals(1880, token0.beginColumn);
      assertEquals(109, javaCharStream0.getBeginLine());
      assertEquals(1880, javaCharStream0.getColumn());
      assertEquals(109, javaCharStream0.getLine());
      assertEquals(1880, javaCharStream0.getEndColumn());
      assertEquals(1880, javaCharStream0.getBeginColumn());
      assertEquals(109, javaCharStream0.getEndLine());
      assertEquals("7", token0.toString());
      assertNotNull(token0);
      
      JavaCharStream javaCharStream1 = new JavaCharStream(stringReader0, 109, 0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream1.bufpos);
      assertEquals(0, javaCharStream1.getBeginLine());
      assertEquals(0, javaCharStream1.getBeginColumn());
      assertNotNull(javaCharStream1);
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      
      javaParserTokenManager0.TokenLexicalActions(token0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.bufpos);
      assertEquals(66, token0.kind);
      assertEquals(109, token0.endLine);
      assertEquals(1880, token0.endColumn);
      assertEquals(109, token0.beginLine);
      assertEquals(1880, token0.beginColumn);
      assertEquals(109, javaCharStream0.getBeginLine());
      assertEquals(1880, javaCharStream0.getColumn());
      assertEquals(109, javaCharStream0.getLine());
      assertEquals(1880, javaCharStream0.getEndColumn());
      assertEquals(1880, javaCharStream0.getBeginColumn());
      assertEquals(109, javaCharStream0.getEndLine());
      assertEquals("7", token0.toString());
      assertNotSame(javaCharStream0, javaCharStream1);
      assertFalse(javaCharStream0.equals((Object)javaCharStream1));
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      PipedInputStream pipedInputStream0 = new PipedInputStream(57);
      assertEquals(0, pipedInputStream0.available());
      assertNotNull(pipedInputStream0);
      
      StringReader stringReader0 = new StringReader("=Qv&nCW`Vsfo[m");
      assertNotNull(stringReader0);
      
      int int0 = stringReader0.read();
      assertEquals(61, int0);
      
      int int1 = stringReader0.read();
      assertEquals(81, int1);
      assertFalse(int1 == int0);
      
      StringReader stringReader1 = new StringReader("=Qv&nCW`Vsfo[m");
      assertNotNull(stringReader1);
      assertFalse(stringReader1.equals((Object)stringReader0));
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader1, 61, 61);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertNotNull(javaCharStream0);
      assertFalse(stringReader1.equals((Object)stringReader0));
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertNotNull(javaParserTokenManager0);
      assertFalse(stringReader1.equals((Object)stringReader0));
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.bufpos);
      assertEquals(87, token0.kind);
      assertEquals(61, token0.beginLine);
      assertEquals(61, token0.endColumn);
      assertEquals(61, token0.beginColumn);
      assertEquals(61, token0.endLine);
      assertEquals(61, javaCharStream0.getBeginColumn());
      assertEquals(61, javaCharStream0.getEndLine());
      assertEquals(61, javaCharStream0.getEndColumn());
      assertEquals(61, javaCharStream0.getColumn());
      assertEquals(61, javaCharStream0.getBeginLine());
      assertEquals(61, javaCharStream0.getLine());
      assertEquals("=", token0.toString());
      assertNotSame(stringReader1, stringReader0);
      assertNotNull(token0);
      assertFalse(stringReader1.equals((Object)stringReader0));
      
      Token token1 = javaParserTokenManager0.getNextToken();
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(2, javaCharStream0.bufpos);
      assertEquals(61, token1.beginLine);
      assertEquals(61, token1.endLine);
      assertEquals(62, token1.beginColumn);
      assertEquals(63, token1.endColumn);
      assertEquals(74, token1.kind);
      assertEquals(62, javaCharStream0.getBeginColumn());
      assertEquals(61, javaCharStream0.getEndLine());
      assertEquals(63, javaCharStream0.getEndColumn());
      assertEquals(63, javaCharStream0.getColumn());
      assertEquals(61, javaCharStream0.getBeginLine());
      assertEquals(61, javaCharStream0.getLine());
      assertEquals("Qv", token1.toString());
      assertNotSame(stringReader1, stringReader0);
      assertNotSame(token1, token0);
      assertNotNull(token1);
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertFalse(token1.equals((Object)token0));
      
      Token token2 = javaParserTokenManager0.getNextToken();
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(3, javaCharStream0.bufpos);
      assertEquals(64, token2.endColumn);
      assertEquals(105, token2.kind);
      assertEquals(61, token2.beginLine);
      assertEquals(64, token2.beginColumn);
      assertEquals(61, token2.endLine);
      assertEquals(64, javaCharStream0.getEndColumn());
      assertEquals(64, javaCharStream0.getColumn());
      assertEquals(61, javaCharStream0.getEndLine());
      assertEquals(64, javaCharStream0.getBeginColumn());
      assertEquals(61, javaCharStream0.getBeginLine());
      assertEquals(61, javaCharStream0.getLine());
      assertEquals("&", token2.toString());
      assertNotSame(stringReader1, stringReader0);
      assertNotSame(token2, token0);
      assertNotSame(token2, token1);
      assertNotNull(token2);
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertFalse(token2.equals((Object)token0));
      assertFalse(token2.equals((Object)token1));
      
      Token token3 = javaParserTokenManager0.jjFillToken();
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(3, javaCharStream0.bufpos);
      assertEquals(64, token3.beginColumn);
      assertEquals(61, token3.beginLine);
      assertEquals(105, token3.kind);
      assertEquals(64, token3.endColumn);
      assertEquals(61, token3.endLine);
      assertEquals(64, javaCharStream0.getEndColumn());
      assertEquals(64, javaCharStream0.getColumn());
      assertEquals(61, javaCharStream0.getEndLine());
      assertEquals(64, javaCharStream0.getBeginColumn());
      assertEquals(61, javaCharStream0.getBeginLine());
      assertEquals(61, javaCharStream0.getLine());
      assertEquals("&", token3.toString());
      assertNotSame(stringReader1, stringReader0);
      assertNotSame(token3, token1);
      assertNotSame(token3, token0);
      assertNotSame(token3, token2);
      assertNotNull(token3);
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertFalse(token3.equals((Object)token1));
      assertFalse(token3.equals((Object)token0));
      assertFalse(token3.equals((Object)token2));
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      assertFalse(fileDescriptor0.valid());
      assertNotNull(fileDescriptor0);
      
      EvoSuiteFile evoSuiteFile0 = null;
      boolean boolean0 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "t`LYJy$=jm$_HY!");
      assertFalse(boolean0);
      
      StringReader stringReader0 = new StringReader("t`LYJy$=jm$_HY!");
      assertNotNull(stringReader0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, 1, 1);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertNotNull(javaCharStream0);
      
      boolean boolean1 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "");
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0, 2);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertNotNull(javaParserTokenManager0);
      
      JavaCharStream javaCharStream1 = null;
      JavaParserTokenManager javaParserTokenManager1 = new JavaParserTokenManager(javaCharStream0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertNotNull(javaParserTokenManager1);
      assertFalse(javaParserTokenManager1.equals((Object)javaParserTokenManager0));
      
      JavaParserTokenManager javaParserTokenManager2 = new JavaParserTokenManager(javaCharStream0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertNotNull(javaParserTokenManager2);
      assertFalse(javaParserTokenManager2.equals((Object)javaParserTokenManager0));
      assertFalse(javaParserTokenManager2.equals((Object)javaParserTokenManager1));
      
      // Undeclared exception!
      try { 
        javaParserTokenManager0.getNextToken();
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Lexical error at line 1, column 16.  Encountered: <EOF> after : \"\"
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      assertFalse(fileDescriptor0.valid());
      assertNotNull(fileDescriptor0);
      
      StringReader stringReader0 = new StringReader("");
      assertNotNull(stringReader0);
      
      StringReader stringReader1 = new StringReader("");
      assertNotNull(stringReader1);
      assertFalse(stringReader1.equals((Object)stringReader0));
      
      StringReader stringReader2 = new StringReader("");
      assertNotNull(stringReader2);
      assertFalse(stringReader2.equals((Object)stringReader1));
      assertFalse(stringReader2.equals((Object)stringReader0));
      
      StringReader stringReader3 = new StringReader("int");
      assertNotNull(stringReader3);
      assertFalse(stringReader3.equals((Object)stringReader2));
      assertFalse(stringReader3.equals((Object)stringReader1));
      assertFalse(stringReader3.equals((Object)stringReader0));
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader3, 1235, 1235, 43);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertNotNull(javaCharStream0);
      assertFalse(stringReader3.equals((Object)stringReader2));
      assertFalse(stringReader3.equals((Object)stringReader1));
      assertFalse(stringReader3.equals((Object)stringReader0));
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertNotNull(javaParserTokenManager0);
      assertFalse(stringReader3.equals((Object)stringReader2));
      assertFalse(stringReader3.equals((Object)stringReader1));
      assertFalse(stringReader3.equals((Object)stringReader0));
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(2, javaCharStream0.bufpos);
      assertEquals(1237, token0.endColumn);
      assertEquals(1235, token0.beginLine);
      assertEquals(1235, token0.endLine);
      assertEquals(40, token0.kind);
      assertEquals(1235, token0.beginColumn);
      assertEquals(1237, javaCharStream0.getColumn());
      assertEquals(1235, javaCharStream0.getEndLine());
      assertEquals(1237, javaCharStream0.getEndColumn());
      assertEquals(1235, javaCharStream0.getBeginColumn());
      assertEquals(1235, javaCharStream0.getLine());
      assertEquals(1235, javaCharStream0.getBeginLine());
      assertEquals("int", token0.toString());
      assertNotSame(stringReader3, stringReader2);
      assertNotSame(stringReader3, stringReader1);
      assertNotSame(stringReader3, stringReader0);
      assertNotNull(token0);
      assertFalse(stringReader3.equals((Object)stringReader2));
      assertFalse(stringReader3.equals((Object)stringReader1));
      assertFalse(stringReader3.equals((Object)stringReader0));
      
      Token token1 = javaParserTokenManager0.jjFillToken();
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(2, javaCharStream0.bufpos);
      assertEquals(1235, token1.beginLine);
      assertEquals(1235, token1.beginColumn);
      assertEquals(40, token1.kind);
      assertEquals(1237, token1.endColumn);
      assertEquals(1235, token1.endLine);
      assertEquals(1237, javaCharStream0.getColumn());
      assertEquals(1235, javaCharStream0.getEndLine());
      assertEquals(1237, javaCharStream0.getEndColumn());
      assertEquals(1235, javaCharStream0.getBeginColumn());
      assertEquals(1235, javaCharStream0.getLine());
      assertEquals(1235, javaCharStream0.getBeginLine());
      assertEquals("int", token1.toString());
      assertNotSame(stringReader3, stringReader2);
      assertNotSame(stringReader3, stringReader1);
      assertNotSame(stringReader3, stringReader0);
      assertNotSame(token1, token0);
      assertNotNull(token1);
      assertFalse(stringReader3.equals((Object)stringReader2));
      assertFalse(stringReader3.equals((Object)stringReader1));
      assertFalse(stringReader3.equals((Object)stringReader0));
      assertFalse(token1.equals((Object)token0));
      
      Token token2 = javaParserTokenManager0.getNextToken();
      assertEquals(0, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(1235, token2.beginLine);
      assertEquals(0, token2.kind);
      assertEquals(1237, token2.endColumn);
      assertEquals(1235, token2.endLine);
      assertEquals(1237, token2.beginColumn);
      assertEquals(1237, javaCharStream0.getColumn());
      assertEquals(1235, javaCharStream0.getEndLine());
      assertEquals(1237, javaCharStream0.getEndColumn());
      assertEquals(1237, javaCharStream0.getBeginColumn());
      assertEquals(1235, javaCharStream0.getLine());
      assertEquals(1235, javaCharStream0.getBeginLine());
      assertEquals("", token2.toString());
      assertNotSame(stringReader3, stringReader2);
      assertNotSame(stringReader3, stringReader1);
      assertNotSame(stringReader3, stringReader0);
      assertNotSame(token2, token0);
      assertNotSame(token2, token1);
      assertNotNull(token2);
      assertFalse(stringReader3.equals((Object)stringReader2));
      assertFalse(stringReader3.equals((Object)stringReader1));
      assertFalse(stringReader3.equals((Object)stringReader0));
      assertFalse(token2.equals((Object)token0));
      assertFalse(token2.equals((Object)token1));
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      assertFalse(fileDescriptor0.valid());
      assertNotNull(fileDescriptor0);
      
      boolean boolean0 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "t`LYJy$=jm$_HY!");
      assertFalse(boolean0);
      
      StringReader stringReader0 = new StringReader("4L>x'FzPYsj{]tT");
      assertNotNull(stringReader0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, 18, 5);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertNotNull(javaCharStream0);
      
      JavaCharStream javaCharStream1 = new JavaCharStream(stringReader0, 92, 18);
      assertEquals((-1), javaCharStream1.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream1.getBeginColumn());
      assertEquals(0, javaCharStream1.getBeginLine());
      assertNotNull(javaCharStream1);
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertNotNull(javaParserTokenManager0);
      assertFalse(javaCharStream0.equals((Object)javaCharStream1));
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(1, javaCharStream0.bufpos);
      assertEquals(6, token0.endColumn);
      assertEquals(18, token0.beginLine);
      assertEquals(66, token0.kind);
      assertEquals(5, token0.beginColumn);
      assertEquals(18, token0.endLine);
      assertEquals(6, javaCharStream0.getEndColumn());
      assertEquals(6, javaCharStream0.getColumn());
      assertEquals(18, javaCharStream0.getBeginLine());
      assertEquals(18, javaCharStream0.getEndLine());
      assertEquals(18, javaCharStream0.getLine());
      assertEquals(5, javaCharStream0.getBeginColumn());
      assertEquals("4L", token0.toString());
      assertNotSame(javaCharStream0, javaCharStream1);
      assertNotNull(token0);
      assertFalse(javaCharStream0.equals((Object)javaCharStream1));
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "t`LYJy$=jm$_HY!");
      assertFalse(boolean0);
      
      StringReader stringReader0 = new StringReader("]OaB%.* G=}[X%Be");
      assertNotNull(stringReader0);
      
      int int0 = stringReader0.read();
      assertEquals(93, int0);
      
      int int1 = stringReader0.read();
      assertEquals(79, int1);
      assertFalse(int1 == int0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, (-2583), 11);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertNotNull(javaCharStream0);
      
      JavaCharStream javaCharStream1 = new JavaCharStream(stringReader0, 11, (-1312));
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream1.bufpos);
      assertEquals(0, javaCharStream1.getBeginLine());
      assertEquals(0, javaCharStream1.getBeginColumn());
      assertNotNull(javaCharStream1);
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream1);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream1.bufpos);
      assertEquals(0, javaCharStream1.getBeginLine());
      assertEquals(0, javaCharStream1.getBeginColumn());
      assertNotNull(javaParserTokenManager0);
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(1, javaCharStream1.bufpos);
      assertEquals(11, token0.beginLine);
      assertEquals(74, token0.kind);
      assertEquals(11, token0.endLine);
      assertEquals((-1312), token0.beginColumn);
      assertEquals((-1311), token0.endColumn);
      assertEquals((-1311), javaCharStream1.getEndColumn());
      assertEquals((-1312), javaCharStream1.getBeginColumn());
      assertEquals(11, javaCharStream1.getEndLine());
      assertEquals(11, javaCharStream1.getLine());
      assertEquals(11, javaCharStream1.getBeginLine());
      assertEquals((-1311), javaCharStream1.getColumn());
      assertEquals("aB", token0.toString());
      assertNotSame(javaCharStream1, javaCharStream0);
      assertNotNull(token0);
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      assertFalse(fileDescriptor0.valid());
      assertNotNull(fileDescriptor0);
      
      PipedInputStream pipedInputStream0 = new PipedInputStream(26);
      assertEquals(0, pipedInputStream0.available());
      assertNotNull(pipedInputStream0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(pipedInputStream0, 5, (-45));
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertEquals(0, pipedInputStream0.available());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertNotNull(javaCharStream0);
      
      StringReader stringReader0 = new StringReader("t!hR%]{");
      assertNotNull(stringReader0);
      
      int int0 = stringReader0.read();
      assertEquals(116, int0);
      
      JavaCharStream javaCharStream1 = new JavaCharStream(stringReader0, 1356, 33);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream1.bufpos);
      assertEquals(0, javaCharStream1.getBeginLine());
      assertEquals(0, javaCharStream1.getBeginColumn());
      assertNotNull(javaCharStream1);
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream1);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream1.bufpos);
      assertEquals(0, javaCharStream1.getBeginLine());
      assertEquals(0, javaCharStream1.getBeginColumn());
      assertNotNull(javaParserTokenManager0);
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream1.bufpos);
      assertEquals(1356, token0.beginLine);
      assertEquals(33, token0.beginColumn);
      assertEquals(89, token0.kind);
      assertEquals(33, token0.endColumn);
      assertEquals(1356, token0.endLine);
      assertEquals(33, javaCharStream1.getColumn());
      assertEquals(33, javaCharStream1.getEndColumn());
      assertEquals(1356, javaCharStream1.getEndLine());
      assertEquals(33, javaCharStream1.getBeginColumn());
      assertEquals(1356, javaCharStream1.getBeginLine());
      assertEquals(1356, javaCharStream1.getLine());
      assertEquals("!", token0.toString());
      assertNotSame(javaCharStream1, javaCharStream0);
      assertNotNull(token0);
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      
      javaParserTokenManager0.TokenLexicalActions(token0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream1.bufpos);
      assertEquals(1356, token0.beginLine);
      assertEquals(33, token0.beginColumn);
      assertEquals(89, token0.kind);
      assertEquals(33, token0.endColumn);
      assertEquals(1356, token0.endLine);
      assertEquals(33, javaCharStream1.getColumn());
      assertEquals(33, javaCharStream1.getEndColumn());
      assertEquals(1356, javaCharStream1.getEndLine());
      assertEquals(33, javaCharStream1.getBeginColumn());
      assertEquals(1356, javaCharStream1.getBeginLine());
      assertEquals(1356, javaCharStream1.getLine());
      assertEquals("!", token0.toString());
      assertNotSame(javaCharStream1, javaCharStream0);
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      assertFalse(fileDescriptor0.valid());
      assertNotNull(fileDescriptor0);
      
      StringReader stringReader0 = new StringReader("null");
      assertNotNull(stringReader0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, 0, 45, 1151);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertNotNull(javaCharStream0);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertNotNull(javaParserTokenManager0);
      
      JavaParserTokenManager javaParserTokenManager1 = new JavaParserTokenManager(javaCharStream0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertNotNull(javaParserTokenManager1);
      assertFalse(javaParserTokenManager1.equals((Object)javaParserTokenManager0));
      
      Token token0 = javaParserTokenManager1.getNextToken();
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(3, javaCharStream0.bufpos);
      assertEquals(48, token0.endColumn);
      assertEquals(0, token0.beginLine);
      assertEquals(45, token0.kind);
      assertEquals(0, token0.endLine);
      assertEquals(45, token0.beginColumn);
      assertEquals(45, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getEndLine());
      assertEquals(48, javaCharStream0.getEndColumn());
      assertEquals(48, javaCharStream0.getColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getLine());
      assertEquals("null", token0.toString());
      assertNotSame(javaParserTokenManager1, javaParserTokenManager0);
      assertNotNull(token0);
      assertFalse(javaParserTokenManager1.equals((Object)javaParserTokenManager0));
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "\"]\"");
      assertFalse(boolean0);
      
      StringReader stringReader0 = new StringReader("}BNyp2BK9]6#8n[*I");
      assertNotNull(stringReader0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, 52, 52);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertNotNull(javaCharStream0);
      
      JavaCharStream javaCharStream1 = new JavaCharStream(stringReader0, 74, 74);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream1.bufpos);
      assertEquals(0, javaCharStream1.getBeginLine());
      assertEquals(0, javaCharStream1.getBeginColumn());
      assertNotNull(javaCharStream1);
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream1);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream1.bufpos);
      assertEquals(0, javaCharStream1.getBeginLine());
      assertEquals(0, javaCharStream1.getBeginColumn());
      assertNotNull(javaParserTokenManager0);
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      
      JavaParserTokenManager javaParserTokenManager1 = new JavaParserTokenManager(javaCharStream1);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream1.bufpos);
      assertEquals(0, javaCharStream1.getBeginLine());
      assertEquals(0, javaCharStream1.getBeginColumn());
      assertNotNull(javaParserTokenManager1);
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      assertFalse(javaParserTokenManager1.equals((Object)javaParserTokenManager0));
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream1.bufpos);
      assertEquals(74, token0.beginLine);
      assertEquals(74, token0.endLine);
      assertEquals(80, token0.kind);
      assertEquals(74, token0.endColumn);
      assertEquals(74, token0.beginColumn);
      assertEquals(74, javaCharStream1.getEndColumn());
      assertEquals(74, javaCharStream1.getColumn());
      assertEquals(74, javaCharStream1.getLine());
      assertEquals(74, javaCharStream1.getBeginLine());
      assertEquals(74, javaCharStream1.getEndLine());
      assertEquals(74, javaCharStream1.getBeginColumn());
      assertEquals("}", token0.toString());
      assertNotSame(javaCharStream1, javaCharStream0);
      assertNotSame(javaParserTokenManager0, javaParserTokenManager1);
      assertNotNull(token0);
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      assertFalse(javaParserTokenManager0.equals((Object)javaParserTokenManager1));
      
      javaParserTokenManager1.SkipLexicalActions(token0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream1.bufpos);
      assertEquals(74, token0.beginLine);
      assertEquals(74, token0.endLine);
      assertEquals(80, token0.kind);
      assertEquals(74, token0.endColumn);
      assertEquals(74, token0.beginColumn);
      assertEquals(74, javaCharStream1.getEndColumn());
      assertEquals(74, javaCharStream1.getColumn());
      assertEquals(74, javaCharStream1.getLine());
      assertEquals(74, javaCharStream1.getBeginLine());
      assertEquals(74, javaCharStream1.getEndLine());
      assertEquals(74, javaCharStream1.getBeginColumn());
      assertEquals("}", token0.toString());
      assertNotSame(javaCharStream1, javaCharStream0);
      assertNotSame(javaParserTokenManager0, javaParserTokenManager1);
      assertNotSame(javaParserTokenManager1, javaParserTokenManager0);
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      assertFalse(javaParserTokenManager0.equals((Object)javaParserTokenManager1));
      assertFalse(javaParserTokenManager1.equals((Object)javaParserTokenManager0));
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      StringReader stringReader0 = new StringReader("FoFqL*&l!43Zy");
      assertNotNull(stringReader0);
      
      int int0 = stringReader0.read();
      assertEquals(70, int0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, 28, 1356);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertNotNull(javaCharStream0);
      
      JavaCharStream javaCharStream1 = new JavaCharStream(stringReader0, 35, 1356);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream1.bufpos);
      assertEquals(0, javaCharStream1.getBeginColumn());
      assertEquals(0, javaCharStream1.getBeginLine());
      assertNotNull(javaCharStream1);
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertNotNull(javaParserTokenManager0);
      assertFalse(javaCharStream0.equals((Object)javaCharStream1));
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertEquals(3, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(1359, token0.endColumn);
      assertEquals(74, token0.kind);
      assertEquals(28, token0.endLine);
      assertEquals(28, token0.beginLine);
      assertEquals(1356, token0.beginColumn);
      assertEquals(1359, javaCharStream0.getEndColumn());
      assertEquals(28, javaCharStream0.getBeginLine());
      assertEquals(28, javaCharStream0.getLine());
      assertEquals(1356, javaCharStream0.getBeginColumn());
      assertEquals(28, javaCharStream0.getEndLine());
      assertEquals(1359, javaCharStream0.getColumn());
      assertEquals("oFqL", token0.toString());
      assertNotSame(javaCharStream0, javaCharStream1);
      assertNotNull(token0);
      assertFalse(javaCharStream0.equals((Object)javaCharStream1));
      
      javaParserTokenManager0.TokenLexicalActions(token0);
      assertEquals(3, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(1359, token0.endColumn);
      assertEquals(74, token0.kind);
      assertEquals(28, token0.endLine);
      assertEquals(28, token0.beginLine);
      assertEquals(1356, token0.beginColumn);
      assertEquals(1359, javaCharStream0.getEndColumn());
      assertEquals(28, javaCharStream0.getBeginLine());
      assertEquals(28, javaCharStream0.getLine());
      assertEquals(1356, javaCharStream0.getBeginColumn());
      assertEquals(28, javaCharStream0.getEndLine());
      assertEquals(1359, javaCharStream0.getColumn());
      assertEquals("oFqL", token0.toString());
      assertNotSame(javaCharStream0, javaCharStream1);
      assertFalse(javaCharStream0.equals((Object)javaCharStream1));
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      PipedInputStream pipedInputStream0 = new PipedInputStream(57);
      assertEquals(0, pipedInputStream0.available());
      assertNotNull(pipedInputStream0);
      
      StringReader stringReader0 = new StringReader("K&_&QoM\")c9|b.adZ&");
      assertNotNull(stringReader0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, 57, 57);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertNotNull(javaCharStream0);
      
      JavaCharStream javaCharStream1 = new JavaCharStream(stringReader0, 57, 1782);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream1.bufpos);
      assertEquals(0, javaCharStream1.getBeginColumn());
      assertEquals(0, javaCharStream1.getBeginLine());
      assertNotNull(javaCharStream1);
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      
      JavaCharStream javaCharStream2 = new JavaCharStream(stringReader0, (-1), (-2147483647));
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream2.bufpos);
      assertEquals(0, javaCharStream2.getBeginLine());
      assertEquals(0, javaCharStream2.getBeginColumn());
      assertNotNull(javaCharStream2);
      assertFalse(javaCharStream2.equals((Object)javaCharStream1));
      assertFalse(javaCharStream2.equals((Object)javaCharStream0));
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream1);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream1.bufpos);
      assertEquals(0, javaCharStream1.getBeginColumn());
      assertEquals(0, javaCharStream1.getBeginLine());
      assertNotNull(javaParserTokenManager0);
      assertFalse(javaCharStream1.equals((Object)javaCharStream2));
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream1.bufpos);
      assertEquals(1782, token0.endColumn);
      assertEquals(57, token0.endLine);
      assertEquals(1782, token0.beginColumn);
      assertEquals(74, token0.kind);
      assertEquals(57, token0.beginLine);
      assertEquals(57, javaCharStream1.getLine());
      assertEquals(1782, javaCharStream1.getColumn());
      assertEquals(1782, javaCharStream1.getEndColumn());
      assertEquals(57, javaCharStream1.getBeginLine());
      assertEquals(1782, javaCharStream1.getBeginColumn());
      assertEquals(57, javaCharStream1.getEndLine());
      assertEquals("K", token0.toString());
      assertNotSame(javaCharStream1, javaCharStream2);
      assertNotSame(javaCharStream1, javaCharStream0);
      assertNotNull(token0);
      assertFalse(javaCharStream1.equals((Object)javaCharStream2));
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      
      Token token1 = javaParserTokenManager0.getNextToken();
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(1, javaCharStream1.bufpos);
      assertEquals(57, token1.endLine);
      assertEquals(57, token1.beginLine);
      assertEquals(1783, token1.beginColumn);
      assertEquals(105, token1.kind);
      assertEquals(1783, token1.endColumn);
      assertEquals(1783, javaCharStream1.getEndColumn());
      assertEquals(57, javaCharStream1.getLine());
      assertEquals(1783, javaCharStream1.getBeginColumn());
      assertEquals(1783, javaCharStream1.getColumn());
      assertEquals(57, javaCharStream1.getBeginLine());
      assertEquals(57, javaCharStream1.getEndLine());
      assertEquals("&", token1.toString());
      assertNotSame(javaCharStream1, javaCharStream2);
      assertNotSame(javaCharStream1, javaCharStream0);
      assertNotSame(token1, token0);
      assertNotNull(token1);
      assertFalse(javaCharStream1.equals((Object)javaCharStream2));
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      assertFalse(token1.equals((Object)token0));
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      assertFalse(fileDescriptor0.valid());
      assertNotNull(fileDescriptor0);
      
      boolean boolean0 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "t`LYJy$=jm$_HY!");
      assertFalse(boolean0);
      
      StringReader stringReader0 = new StringReader("aUYO[&skX?G2og");
      assertNotNull(stringReader0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, 1, (-3059));
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertNotNull(javaCharStream0);
      
      boolean boolean1 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "!1");
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertNotNull(javaParserTokenManager0);
      
      JavaParserTokenManager javaParserTokenManager1 = new JavaParserTokenManager((JavaCharStream) null);
      assertNotNull(javaParserTokenManager1);
      assertFalse(javaParserTokenManager1.equals((Object)javaParserTokenManager0));
      
      JavaParserTokenManager javaParserTokenManager2 = new JavaParserTokenManager(javaCharStream0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertNotNull(javaParserTokenManager2);
      assertFalse(javaParserTokenManager2.equals((Object)javaParserTokenManager0));
      assertFalse(javaParserTokenManager2.equals((Object)javaParserTokenManager1));
      
      Token token0 = javaParserTokenManager2.getNextToken();
      assertEquals(3, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(1, token0.beginLine);
      assertEquals((-3059), token0.beginColumn);
      assertEquals((-3056), token0.endColumn);
      assertEquals(74, token0.kind);
      assertEquals(1, token0.endLine);
      assertEquals(1, javaCharStream0.getLine());
      assertEquals((-3056), javaCharStream0.getEndColumn());
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals((-3059), javaCharStream0.getBeginColumn());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals((-3056), javaCharStream0.getColumn());
      assertEquals("aUYO", token0.toString());
      assertNotSame(javaParserTokenManager2, javaParserTokenManager0);
      assertNotSame(javaParserTokenManager2, javaParserTokenManager1);
      assertNotNull(token0);
      assertFalse(javaParserTokenManager2.equals((Object)javaParserTokenManager0));
      assertFalse(javaParserTokenManager2.equals((Object)javaParserTokenManager1));
      
      JavaParserTokenManager javaParserTokenManager3 = new JavaParserTokenManager(javaCharStream0);
      assertEquals(3, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(1, javaCharStream0.getLine());
      assertEquals((-3056), javaCharStream0.getEndColumn());
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals((-3059), javaCharStream0.getBeginColumn());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals((-3056), javaCharStream0.getColumn());
      assertNotNull(javaParserTokenManager3);
      assertFalse(javaParserTokenManager3.equals((Object)javaParserTokenManager1));
      assertFalse(javaParserTokenManager3.equals((Object)javaParserTokenManager2));
      assertFalse(javaParserTokenManager3.equals((Object)javaParserTokenManager0));
      
      Token token1 = javaParserTokenManager3.getNextToken();
      assertEquals(4, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(1, token1.beginLine);
      assertEquals(81, token1.kind);
      assertEquals((-3055), token1.endColumn);
      assertEquals((-3055), token1.beginColumn);
      assertEquals(1, token1.endLine);
      assertEquals((-3055), javaCharStream0.getEndColumn());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals((-3055), javaCharStream0.getBeginColumn());
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals((-3055), javaCharStream0.getColumn());
      assertEquals("[", token1.toString());
      assertNotSame(javaParserTokenManager3, javaParserTokenManager1);
      assertNotSame(javaParserTokenManager3, javaParserTokenManager2);
      assertNotSame(javaParserTokenManager3, javaParserTokenManager0);
      assertNotSame(token1, token0);
      assertNotNull(token1);
      assertFalse(javaParserTokenManager3.equals((Object)javaParserTokenManager1));
      assertFalse(javaParserTokenManager3.equals((Object)javaParserTokenManager2));
      assertFalse(javaParserTokenManager3.equals((Object)javaParserTokenManager0));
      assertFalse(token1.equals((Object)token0));
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      assertFalse(fileDescriptor0.valid());
      assertNotNull(fileDescriptor0);
      
      StringReader stringReader0 = new StringReader("");
      assertNotNull(stringReader0);
      
      StringReader stringReader1 = new StringReader("\f");
      assertNotNull(stringReader1);
      assertFalse(stringReader1.equals((Object)stringReader0));
      
      StringReader stringReader2 = new StringReader("throws");
      assertNotNull(stringReader2);
      assertFalse(stringReader2.equals((Object)stringReader0));
      assertFalse(stringReader2.equals((Object)stringReader1));
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader2, 638, 43);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertNotNull(javaCharStream0);
      assertFalse(stringReader2.equals((Object)stringReader0));
      assertFalse(stringReader2.equals((Object)stringReader1));
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertNotNull(javaParserTokenManager0);
      assertFalse(stringReader2.equals((Object)stringReader0));
      assertFalse(stringReader2.equals((Object)stringReader1));
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(5, javaCharStream0.bufpos);
      assertEquals(48, token0.endColumn);
      assertEquals(59, token0.kind);
      assertEquals(43, token0.beginColumn);
      assertEquals(638, token0.endLine);
      assertEquals(638, token0.beginLine);
      assertEquals(638, javaCharStream0.getBeginLine());
      assertEquals(48, javaCharStream0.getEndColumn());
      assertEquals(638, javaCharStream0.getLine());
      assertEquals(638, javaCharStream0.getEndLine());
      assertEquals(43, javaCharStream0.getBeginColumn());
      assertEquals(48, javaCharStream0.getColumn());
      assertEquals("throws", token0.toString());
      assertNotSame(stringReader2, stringReader0);
      assertNotSame(stringReader2, stringReader1);
      assertNotNull(token0);
      assertFalse(stringReader2.equals((Object)stringReader0));
      assertFalse(stringReader2.equals((Object)stringReader1));
      
      Token token1 = javaParserTokenManager0.getNextToken();
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.bufpos);
      assertEquals(48, token1.endColumn);
      assertEquals(638, token1.endLine);
      assertEquals(48, token1.beginColumn);
      assertEquals(0, token1.kind);
      assertEquals(638, token1.beginLine);
      assertEquals(638, javaCharStream0.getBeginLine());
      assertEquals(48, javaCharStream0.getEndColumn());
      assertEquals(48, javaCharStream0.getBeginColumn());
      assertEquals(638, javaCharStream0.getLine());
      assertEquals(638, javaCharStream0.getEndLine());
      assertEquals(48, javaCharStream0.getColumn());
      assertEquals("", token1.toString());
      assertNotSame(stringReader2, stringReader0);
      assertNotSame(stringReader2, stringReader1);
      assertNotSame(token1, token0);
      assertNotNull(token1);
      assertFalse(stringReader2.equals((Object)stringReader0));
      assertFalse(stringReader2.equals((Object)stringReader1));
      assertFalse(token1.equals((Object)token0));
      
      Token token2 = javaParserTokenManager0.getNextToken();
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.bufpos);
      assertEquals(48, token2.beginColumn);
      assertEquals(0, token2.kind);
      assertEquals(638, token2.beginLine);
      assertEquals(48, token2.endColumn);
      assertEquals(638, token2.endLine);
      assertEquals(638, javaCharStream0.getBeginLine());
      assertEquals(48, javaCharStream0.getEndColumn());
      assertEquals(48, javaCharStream0.getBeginColumn());
      assertEquals(638, javaCharStream0.getLine());
      assertEquals(638, javaCharStream0.getEndLine());
      assertEquals(48, javaCharStream0.getColumn());
      assertEquals("", token2.toString());
      assertNotSame(stringReader2, stringReader0);
      assertNotSame(stringReader2, stringReader1);
      assertNotSame(token2, token0);
      assertNotSame(token2, token1);
      assertNotNull(token2);
      assertFalse(stringReader2.equals((Object)stringReader0));
      assertFalse(stringReader2.equals((Object)stringReader1));
      assertFalse(token2.equals((Object)token0));
      assertFalse(token2.equals((Object)token1));
      
      Token token3 = javaParserTokenManager0.jjFillToken();
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.bufpos);
      assertEquals(48, token3.endColumn);
      assertEquals(48, token3.beginColumn);
      assertEquals(638, token3.endLine);
      assertEquals(0, token3.kind);
      assertEquals(638, token3.beginLine);
      assertEquals(638, javaCharStream0.getBeginLine());
      assertEquals(48, javaCharStream0.getEndColumn());
      assertEquals(48, javaCharStream0.getBeginColumn());
      assertEquals(638, javaCharStream0.getLine());
      assertEquals(638, javaCharStream0.getEndLine());
      assertEquals(48, javaCharStream0.getColumn());
      assertEquals("", token3.toString());
      assertNotSame(stringReader2, stringReader0);
      assertNotSame(stringReader2, stringReader1);
      assertNotSame(token3, token0);
      assertNotSame(token3, token2);
      assertNotSame(token3, token1);
      assertNotNull(token3);
      assertFalse(stringReader2.equals((Object)stringReader0));
      assertFalse(stringReader2.equals((Object)stringReader1));
      assertFalse(token3.equals((Object)token0));
      assertFalse(token3.equals((Object)token2));
      assertFalse(token3.equals((Object)token1));
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      StringReader stringReader0 = new StringReader("dnZoRZC.$[%%@b!UT");
      assertNotNull(stringReader0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, 41, (-1672), 122);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertNotNull(javaCharStream0);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertNotNull(javaParserTokenManager0);
      
      JavaParserTokenManager javaParserTokenManager1 = new JavaParserTokenManager(javaCharStream0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertNotNull(javaParserTokenManager1);
      assertFalse(javaParserTokenManager1.equals((Object)javaParserTokenManager0));
      
      Token token0 = javaParserTokenManager1.getNextToken();
      assertEquals(6, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(74, token0.kind);
      assertEquals(41, token0.beginLine);
      assertEquals(41, token0.endLine);
      assertEquals((-1672), token0.beginColumn);
      assertEquals((-1666), token0.endColumn);
      assertEquals((-1672), javaCharStream0.getBeginColumn());
      assertEquals(41, javaCharStream0.getLine());
      assertEquals(41, javaCharStream0.getBeginLine());
      assertEquals((-1666), javaCharStream0.getColumn());
      assertEquals(41, javaCharStream0.getEndLine());
      assertEquals((-1666), javaCharStream0.getEndColumn());
      assertEquals("dnZoRZC", token0.toString());
      assertNotSame(javaParserTokenManager1, javaParserTokenManager0);
      assertNotNull(token0);
      assertFalse(javaParserTokenManager1.equals((Object)javaParserTokenManager0));
      
      javaParserTokenManager1.MoreLexicalActions();
      assertEquals(6, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1672), javaCharStream0.getBeginColumn());
      assertEquals(41, javaCharStream0.getLine());
      assertEquals(41, javaCharStream0.getBeginLine());
      assertEquals((-1666), javaCharStream0.getColumn());
      assertEquals(41, javaCharStream0.getEndLine());
      assertEquals((-1666), javaCharStream0.getEndColumn());
      assertNotSame(javaParserTokenManager1, javaParserTokenManager0);
      assertFalse(javaParserTokenManager1.equals((Object)javaParserTokenManager0));
      
      Token token1 = javaParserTokenManager0.getNextToken();
      assertEquals(7, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(41, token1.beginLine);
      assertEquals(41, token1.endLine);
      assertEquals((-1665), token1.beginColumn);
      assertEquals(85, token1.kind);
      assertEquals((-1665), token1.endColumn);
      assertEquals(41, javaCharStream0.getLine());
      assertEquals((-1665), javaCharStream0.getColumn());
      assertEquals(41, javaCharStream0.getBeginLine());
      assertEquals((-1665), javaCharStream0.getBeginColumn());
      assertEquals(41, javaCharStream0.getEndLine());
      assertEquals((-1665), javaCharStream0.getEndColumn());
      assertEquals(".", token1.toString());
      assertNotSame(javaParserTokenManager0, javaParserTokenManager1);
      assertNotSame(token1, token0);
      assertNotNull(token1);
      assertFalse(javaParserTokenManager0.equals((Object)javaParserTokenManager1));
      assertFalse(token1.equals((Object)token0));
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      assertFalse(fileDescriptor0.valid());
      assertNotNull(fileDescriptor0);
      
      StringReader stringReader0 = new StringReader("Pu7I'");
      assertNotNull(stringReader0);
      
      StringReader stringReader1 = new StringReader("Pu7I'");
      assertNotNull(stringReader1);
      assertFalse(stringReader1.equals((Object)stringReader0));
      
      StringReader stringReader2 = new StringReader("x6*:EAuRi33I");
      assertNotNull(stringReader2);
      assertFalse(stringReader2.equals((Object)stringReader0));
      assertFalse(stringReader2.equals((Object)stringReader1));
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader1, 1, 258);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertNotNull(javaCharStream0);
      assertFalse(stringReader1.equals((Object)stringReader2));
      assertFalse(stringReader1.equals((Object)stringReader0));
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertNotNull(javaParserTokenManager0);
      assertFalse(stringReader1.equals((Object)stringReader2));
      assertFalse(stringReader1.equals((Object)stringReader0));
      
      JavaParserTokenManager javaParserTokenManager1 = new JavaParserTokenManager(javaCharStream0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertNotNull(javaParserTokenManager1);
      assertFalse(stringReader1.equals((Object)stringReader2));
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertFalse(javaParserTokenManager1.equals((Object)javaParserTokenManager0));
      
      Token token0 = javaParserTokenManager1.getNextToken();
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(3, javaCharStream0.bufpos);
      assertEquals(74, token0.kind);
      assertEquals(261, token0.endColumn);
      assertEquals(258, token0.beginColumn);
      assertEquals(1, token0.endLine);
      assertEquals(1, token0.beginLine);
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(261, javaCharStream0.getEndColumn());
      assertEquals(261, javaCharStream0.getColumn());
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(258, javaCharStream0.getBeginColumn());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals("Pu7I", token0.toString());
      assertNotSame(stringReader1, stringReader2);
      assertNotSame(stringReader1, stringReader0);
      assertNotSame(javaParserTokenManager1, javaParserTokenManager0);
      assertNotNull(token0);
      assertFalse(stringReader1.equals((Object)stringReader2));
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertFalse(javaParserTokenManager1.equals((Object)javaParserTokenManager0));
      
      JavaCharStream javaCharStream1 = new JavaCharStream(stringReader1, 3, 1);
      assertEquals((-1), javaCharStream1.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream1.getBeginColumn());
      assertEquals(0, javaCharStream1.getBeginLine());
      assertNotNull(javaCharStream1);
      assertFalse(stringReader1.equals((Object)stringReader2));
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      
      // Undeclared exception!
      try { 
        javaParserTokenManager1.getNextToken();
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Lexical error at line 1, column 263.  Encountered: <EOF> after : \"\"
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      StringReader stringReader0 = new StringReader("T<{JwysLzRs");
      assertNotNull(stringReader0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, (-800), (-797));
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertNotNull(javaCharStream0);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertNotNull(javaParserTokenManager0);
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.bufpos);
      assertEquals(74, token0.kind);
      assertEquals((-797), token0.endColumn);
      assertEquals((-797), token0.beginColumn);
      assertEquals((-800), token0.endLine);
      assertEquals((-800), token0.beginLine);
      assertEquals((-800), javaCharStream0.getBeginLine());
      assertEquals((-800), javaCharStream0.getLine());
      assertEquals((-797), javaCharStream0.getBeginColumn());
      assertEquals((-797), javaCharStream0.getColumn());
      assertEquals((-800), javaCharStream0.getEndLine());
      assertEquals((-797), javaCharStream0.getEndColumn());
      assertEquals("T", token0.toString());
      assertNotNull(token0);
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      StringReader stringReader0 = new StringReader(", column ");
      assertNotNull(stringReader0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, 1570, Integer.MAX_VALUE, 1570);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertNotNull(javaCharStream0);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertNotNull(javaParserTokenManager0);
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertEquals(0, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(1570, token0.beginLine);
      assertEquals(1570, token0.endLine);
      assertEquals(Integer.MAX_VALUE, token0.beginColumn);
      assertEquals(84, token0.kind);
      assertEquals(Integer.MAX_VALUE, token0.endColumn);
      assertEquals(Integer.MAX_VALUE, javaCharStream0.getEndColumn());
      assertEquals(Integer.MAX_VALUE, javaCharStream0.getColumn());
      assertEquals(1570, javaCharStream0.getLine());
      assertEquals(1570, javaCharStream0.getBeginLine());
      assertEquals(Integer.MAX_VALUE, javaCharStream0.getBeginColumn());
      assertEquals(1570, javaCharStream0.getEndLine());
      assertEquals(",", token0.toString());
      assertNotNull(token0);
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "t`LYJy$=jm$_HY!");
      assertFalse(boolean0);
      
      StringReader stringReader0 = new StringReader("X)tp6RidCRZ:W");
      assertNotNull(stringReader0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, 74, 74);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertNotNull(javaCharStream0);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertNotNull(javaParserTokenManager0);
      
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)52;
      byteArray0[1] = (byte)26;
      byteArray0[2] = (byte)94;
      byteArray0[3] = (byte)98;
      byteArray0[4] = (byte) (-65);
      byteArray0[5] = (byte)47;
      byteArray0[6] = (byte) (-123);
      byteArray0[7] = (byte)26;
      byteArray0[8] = (byte)80;
      boolean boolean1 = FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      assertArrayEquals(new byte[] {(byte)52, (byte)26, (byte)94, (byte)98, (byte) (-65), (byte)47, (byte) (-123), (byte)26, (byte)80}, byteArray0);
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      assertEquals(9, byteArray0.length);
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertEquals(0, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(74, token0.endColumn);
      assertEquals(74, token0.beginColumn);
      assertEquals(74, token0.kind);
      assertEquals(74, token0.beginLine);
      assertEquals(74, token0.endLine);
      assertEquals(74, javaCharStream0.getEndLine());
      assertEquals(74, javaCharStream0.getEndColumn());
      assertEquals(74, javaCharStream0.getBeginColumn());
      assertEquals(74, javaCharStream0.getBeginLine());
      assertEquals(74, javaCharStream0.getLine());
      assertEquals(74, javaCharStream0.getColumn());
      assertEquals("X", token0.toString());
      assertNotNull(token0);
      
      JavaParserTokenManager javaParserTokenManager1 = new JavaParserTokenManager(javaCharStream0);
      assertEquals(0, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(74, javaCharStream0.getEndLine());
      assertEquals(74, javaCharStream0.getEndColumn());
      assertEquals(74, javaCharStream0.getBeginColumn());
      assertEquals(74, javaCharStream0.getBeginLine());
      assertEquals(74, javaCharStream0.getLine());
      assertEquals(74, javaCharStream0.getColumn());
      assertNotNull(javaParserTokenManager1);
      assertFalse(javaParserTokenManager1.equals((Object)javaParserTokenManager0));
      
      Token token1 = javaParserTokenManager1.getNextToken();
      assertEquals(74, token1.beginLine);
      assertEquals(78, token1.kind);
      assertEquals(75, token1.beginColumn);
      assertEquals(74, token1.endLine);
      assertEquals(75, token1.endColumn);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(1, javaCharStream0.bufpos);
      assertEquals(")", token1.toString());
      assertEquals(74, javaCharStream0.getEndLine());
      assertEquals(75, javaCharStream0.getBeginColumn());
      assertEquals(75, javaCharStream0.getEndColumn());
      assertEquals(74, javaCharStream0.getBeginLine());
      assertEquals(74, javaCharStream0.getLine());
      assertEquals(75, javaCharStream0.getColumn());
      assertNotSame(javaParserTokenManager1, javaParserTokenManager0);
      assertNotSame(token1, token0);
      assertNotNull(token1);
      assertFalse(javaParserTokenManager1.equals((Object)javaParserTokenManager0));
      assertFalse(token1.equals((Object)token0));
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      assertFalse(fileDescriptor0.valid());
      assertNotNull(fileDescriptor0);
      
      StringReader stringReader0 = new StringReader("t`LYJy$=jm$_yY!");
      assertNotNull(stringReader0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, 1, 1);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertNotNull(javaCharStream0);
      
      boolean boolean0 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "");
      assertFalse(boolean0);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0, 2);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertNotNull(javaParserTokenManager0);
      
      JavaParserTokenManager javaParserTokenManager1 = new JavaParserTokenManager(javaCharStream0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertNotNull(javaParserTokenManager1);
      assertFalse(javaParserTokenManager1.equals((Object)javaParserTokenManager0));
      
      JavaParserTokenManager javaParserTokenManager2 = new JavaParserTokenManager(javaCharStream0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertNotNull(javaParserTokenManager2);
      assertFalse(javaParserTokenManager2.equals((Object)javaParserTokenManager0));
      assertFalse(javaParserTokenManager2.equals((Object)javaParserTokenManager1));
      
      // Undeclared exception!
      try { 
        javaParserTokenManager0.getNextToken();
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Lexical error at line 1, column 16.  Encountered: <EOF> after : \"\"
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      assertFalse(fileDescriptor0.valid());
      assertNotNull(fileDescriptor0);
      
      StringReader stringReader0 = new StringReader("`A0TXAHt ");
      assertNotNull(stringReader0);
      
      StringReader stringReader1 = new StringReader("sNj)m<oe#O");
      assertNotNull(stringReader1);
      assertFalse(stringReader1.equals((Object)stringReader0));
      
      int int0 = stringReader1.read();
      assertEquals(115, int0);
      assertNotSame(stringReader1, stringReader0);
      assertFalse(stringReader1.equals((Object)stringReader0));
      
      StringReader stringReader2 = new StringReader("sNj)m<oe#O");
      assertNotNull(stringReader2);
      assertFalse(stringReader2.equals((Object)stringReader1));
      assertFalse(stringReader2.equals((Object)stringReader0));
      
      int int1 = stringReader2.read();
      assertEquals(115, int1);
      assertNotSame(stringReader2, stringReader1);
      assertNotSame(stringReader2, stringReader0);
      assertFalse(stringReader2.equals((Object)stringReader1));
      assertFalse(stringReader2.equals((Object)stringReader0));
      assertTrue(int1 == int0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader1, 115, (-4239));
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertNotNull(javaCharStream0);
      assertFalse(stringReader1.equals((Object)stringReader2));
      assertFalse(stringReader1.equals((Object)stringReader0));
      
      JavaCharStream javaCharStream1 = new JavaCharStream(stringReader2, 2592, 115);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream1.bufpos);
      assertEquals(0, javaCharStream1.getBeginColumn());
      assertEquals(0, javaCharStream1.getBeginLine());
      assertNotNull(javaCharStream1);
      assertFalse(stringReader2.equals((Object)stringReader1));
      assertFalse(stringReader2.equals((Object)stringReader0));
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream1);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream1.bufpos);
      assertEquals(0, javaCharStream1.getBeginColumn());
      assertEquals(0, javaCharStream1.getBeginLine());
      assertNotNull(javaParserTokenManager0);
      assertFalse(stringReader2.equals((Object)stringReader1));
      assertFalse(stringReader2.equals((Object)stringReader0));
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(1, javaCharStream1.bufpos);
      assertEquals(2592, token0.beginLine);
      assertEquals(74, token0.kind);
      assertEquals(116, token0.endColumn);
      assertEquals(2592, token0.endLine);
      assertEquals(115, token0.beginColumn);
      assertEquals(115, javaCharStream1.getBeginColumn());
      assertEquals(2592, javaCharStream1.getLine());
      assertEquals(116, javaCharStream1.getEndColumn());
      assertEquals(2592, javaCharStream1.getEndLine());
      assertEquals(2592, javaCharStream1.getBeginLine());
      assertEquals(116, javaCharStream1.getColumn());
      assertEquals("Nj", token0.toString());
      assertNotSame(stringReader2, stringReader1);
      assertNotSame(stringReader2, stringReader0);
      assertNotSame(javaCharStream1, javaCharStream0);
      assertNotNull(token0);
      assertFalse(stringReader2.equals((Object)stringReader1));
      assertFalse(stringReader2.equals((Object)stringReader0));
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      assertFalse(fileDescriptor0.valid());
      assertNotNull(fileDescriptor0);
      
      StringReader stringReader0 = new StringReader("`A0TXAHt ");
      assertNotNull(stringReader0);
      
      int int0 = stringReader0.read();
      assertEquals(96, int0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, 96, 96);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertNotNull(javaCharStream0);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertNotNull(javaParserTokenManager0);
      
      JavaParserTokenManager javaParserTokenManager1 = new JavaParserTokenManager(javaCharStream0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertNotNull(javaParserTokenManager1);
      assertFalse(javaParserTokenManager1.equals((Object)javaParserTokenManager0));
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertEquals(6, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(74, token0.kind);
      assertEquals(102, token0.endColumn);
      assertEquals(96, token0.endLine);
      assertEquals(96, token0.beginColumn);
      assertEquals(96, token0.beginLine);
      assertEquals(102, javaCharStream0.getEndColumn());
      assertEquals(96, javaCharStream0.getBeginLine());
      assertEquals(96, javaCharStream0.getBeginColumn());
      assertEquals(96, javaCharStream0.getLine());
      assertEquals(96, javaCharStream0.getEndLine());
      assertEquals(102, javaCharStream0.getColumn());
      assertEquals("A0TXAHt", token0.toString());
      assertNotSame(javaParserTokenManager0, javaParserTokenManager1);
      assertNotNull(token0);
      assertFalse(javaParserTokenManager0.equals((Object)javaParserTokenManager1));
      
      javaParserTokenManager1.TokenLexicalActions(token0);
      assertEquals(6, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(74, token0.kind);
      assertEquals(102, token0.endColumn);
      assertEquals(96, token0.endLine);
      assertEquals(96, token0.beginColumn);
      assertEquals(96, token0.beginLine);
      assertEquals(102, javaCharStream0.getEndColumn());
      assertEquals(96, javaCharStream0.getBeginLine());
      assertEquals(96, javaCharStream0.getBeginColumn());
      assertEquals(96, javaCharStream0.getLine());
      assertEquals(96, javaCharStream0.getEndLine());
      assertEquals(102, javaCharStream0.getColumn());
      assertEquals("A0TXAHt", token0.toString());
      assertNotSame(javaParserTokenManager0, javaParserTokenManager1);
      assertNotSame(javaParserTokenManager1, javaParserTokenManager0);
      assertFalse(javaParserTokenManager0.equals((Object)javaParserTokenManager1));
      assertFalse(javaParserTokenManager1.equals((Object)javaParserTokenManager0));
      
      javaParserTokenManager1.SkipLexicalActions(token0);
      assertEquals(6, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(74, token0.kind);
      assertEquals(102, token0.endColumn);
      assertEquals(96, token0.endLine);
      assertEquals(96, token0.beginColumn);
      assertEquals(96, token0.beginLine);
      assertEquals(102, javaCharStream0.getEndColumn());
      assertEquals(96, javaCharStream0.getBeginLine());
      assertEquals(96, javaCharStream0.getBeginColumn());
      assertEquals(96, javaCharStream0.getLine());
      assertEquals(96, javaCharStream0.getEndLine());
      assertEquals(102, javaCharStream0.getColumn());
      assertEquals("A0TXAHt", token0.toString());
      assertNotSame(javaParserTokenManager0, javaParserTokenManager1);
      assertNotSame(javaParserTokenManager1, javaParserTokenManager0);
      assertFalse(javaParserTokenManager0.equals((Object)javaParserTokenManager1));
      assertFalse(javaParserTokenManager1.equals((Object)javaParserTokenManager0));
      
      Token token1 = javaParserTokenManager0.getNextToken();
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.bufpos);
      assertEquals(96, token1.endLine);
      assertEquals(0, token1.kind);
      assertEquals(96, token1.beginLine);
      assertEquals(103, token1.endColumn);
      assertEquals(103, token1.beginColumn);
      assertEquals(103, javaCharStream0.getEndColumn());
      assertEquals(103, javaCharStream0.getColumn());
      assertEquals(96, javaCharStream0.getBeginLine());
      assertEquals(103, javaCharStream0.getBeginColumn());
      assertEquals(96, javaCharStream0.getLine());
      assertEquals(96, javaCharStream0.getEndLine());
      assertEquals("", token1.toString());
      assertNotSame(javaParserTokenManager0, javaParserTokenManager1);
      assertNotSame(token1, token0);
      assertNotNull(token1);
      assertFalse(javaParserTokenManager0.equals((Object)javaParserTokenManager1));
      assertFalse(token1.equals((Object)token0));
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      Enumeration<PipedInputStream> enumeration0 = (Enumeration<PipedInputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(enumeration0).hasMoreElements();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      assertNotNull(sequenceInputStream0);
      
      StringReader stringReader0 = new StringReader("");
      assertNotNull(stringReader0);
      
      StringReader stringReader1 = new StringReader("%'*?fqVk2o>\"Ff");
      assertNotNull(stringReader1);
      assertFalse(stringReader1.equals((Object)stringReader0));
      
      StringReader stringReader2 = new StringReader(";y*]LoGS'");
      assertNotNull(stringReader2);
      assertFalse(stringReader2.equals((Object)stringReader1));
      assertFalse(stringReader2.equals((Object)stringReader0));
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader1, 43, 17);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertNotNull(javaCharStream0);
      assertFalse(stringReader1.equals((Object)stringReader2));
      assertFalse(stringReader1.equals((Object)stringReader0));
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertNotNull(javaParserTokenManager0);
      assertFalse(stringReader1.equals((Object)stringReader2));
      assertFalse(stringReader1.equals((Object)stringReader0));
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertEquals(0, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(17, token0.beginColumn);
      assertEquals(108, token0.kind);
      assertEquals(43, token0.beginLine);
      assertEquals(43, token0.endLine);
      assertEquals(17, token0.endColumn);
      assertEquals(43, javaCharStream0.getLine());
      assertEquals(43, javaCharStream0.getEndLine());
      assertEquals(17, javaCharStream0.getBeginColumn());
      assertEquals(17, javaCharStream0.getEndColumn());
      assertEquals(43, javaCharStream0.getBeginLine());
      assertEquals(17, javaCharStream0.getColumn());
      assertEquals("%", token0.toString());
      assertNotSame(stringReader1, stringReader2);
      assertNotSame(stringReader1, stringReader0);
      assertNotNull(token0);
      assertFalse(stringReader1.equals((Object)stringReader2));
      assertFalse(stringReader1.equals((Object)stringReader0));
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      assertFalse(fileDescriptor0.valid());
      assertNotNull(fileDescriptor0);
      
      StringReader stringReader0 = new StringReader("");
      assertNotNull(stringReader0);
      
      StringReader stringReader1 = new StringReader("B*k5}-*/`");
      assertNotNull(stringReader1);
      assertFalse(stringReader1.equals((Object)stringReader0));
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader1, 45, (-2573));
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertNotNull(javaCharStream0);
      assertFalse(stringReader1.equals((Object)stringReader0));
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertNotNull(javaParserTokenManager0);
      assertFalse(stringReader1.equals((Object)stringReader0));
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.bufpos);
      assertEquals((-2573), token0.beginColumn);
      assertEquals(74, token0.kind);
      assertEquals((-2573), token0.endColumn);
      assertEquals(45, token0.beginLine);
      assertEquals(45, token0.endLine);
      assertEquals(45, javaCharStream0.getLine());
      assertEquals((-2573), javaCharStream0.getBeginColumn());
      assertEquals(45, javaCharStream0.getEndLine());
      assertEquals((-2573), javaCharStream0.getEndColumn());
      assertEquals(45, javaCharStream0.getBeginLine());
      assertEquals((-2573), javaCharStream0.getColumn());
      assertEquals("B", token0.toString());
      assertNotSame(stringReader1, stringReader0);
      assertNotNull(token0);
      assertFalse(stringReader1.equals((Object)stringReader0));
      
      Token token1 = javaParserTokenManager0.getNextToken();
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(1, javaCharStream0.bufpos);
      assertEquals(103, token1.kind);
      assertEquals((-2572), token1.endColumn);
      assertEquals((-2572), token1.beginColumn);
      assertEquals(45, token1.endLine);
      assertEquals(45, token1.beginLine);
      assertEquals(45, javaCharStream0.getLine());
      assertEquals((-2572), javaCharStream0.getBeginColumn());
      assertEquals(45, javaCharStream0.getEndLine());
      assertEquals((-2572), javaCharStream0.getEndColumn());
      assertEquals(45, javaCharStream0.getBeginLine());
      assertEquals((-2572), javaCharStream0.getColumn());
      assertEquals("*", token1.toString());
      assertNotSame(stringReader1, stringReader0);
      assertNotSame(token1, token0);
      assertNotNull(token1);
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertFalse(token1.equals((Object)token0));
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      PipedInputStream pipedInputStream0 = new PipedInputStream(57);
      assertEquals(0, pipedInputStream0.available());
      assertNotNull(pipedInputStream0);
      
      StringReader stringReader0 = new StringReader("<Azdbx*VQOk[X_d");
      assertNotNull(stringReader0);
      
      int int0 = stringReader0.read();
      assertEquals(60, int0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, 22, 57);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertNotNull(javaCharStream0);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertNotNull(javaParserTokenManager0);
      
      JavaParserTokenManager javaParserTokenManager1 = new JavaParserTokenManager(javaCharStream0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertNotNull(javaParserTokenManager1);
      assertFalse(javaParserTokenManager1.equals((Object)javaParserTokenManager0));
      
      Token token0 = javaParserTokenManager1.getNextToken();
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(4, javaCharStream0.bufpos);
      assertEquals(61, token0.endColumn);
      assertEquals(22, token0.beginLine);
      assertEquals(74, token0.kind);
      assertEquals(57, token0.beginColumn);
      assertEquals(22, token0.endLine);
      assertEquals(22, javaCharStream0.getLine());
      assertEquals(57, javaCharStream0.getBeginColumn());
      assertEquals(22, javaCharStream0.getBeginLine());
      assertEquals(61, javaCharStream0.getColumn());
      assertEquals(61, javaCharStream0.getEndColumn());
      assertEquals(22, javaCharStream0.getEndLine());
      assertEquals("Azdbx", token0.toString());
      assertNotSame(javaParserTokenManager1, javaParserTokenManager0);
      assertNotNull(token0);
      assertFalse(javaParserTokenManager1.equals((Object)javaParserTokenManager0));
      
      Token token1 = Token.newToken(74);
      assertEquals(0, token1.beginLine);
      assertEquals(0, token1.kind);
      assertEquals(0, token1.endLine);
      assertEquals(0, token1.endColumn);
      assertEquals(0, token1.beginColumn);
      assertNull(token1.toString());
      assertNotSame(token1, token0);
      assertNotNull(token1);
      assertFalse(token1.equals((Object)token0));
      
      Token token2 = Token.newToken(22);
      assertEquals(0, token2.endLine);
      assertEquals(0, token2.beginColumn);
      assertEquals(0, token2.endColumn);
      assertEquals(0, token2.beginLine);
      assertEquals(0, token2.kind);
      assertNull(token2.toString());
      assertNotSame(token2, token1);
      assertNotSame(token2, token0);
      assertNotNull(token2);
      assertFalse(token2.equals((Object)token1));
      assertFalse(token2.equals((Object)token0));
      
      javaParserTokenManager0.TokenLexicalActions(token2);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(4, javaCharStream0.bufpos);
      assertEquals(0, token2.endLine);
      assertEquals(0, token2.beginColumn);
      assertEquals(0, token2.endColumn);
      assertEquals(0, token2.beginLine);
      assertEquals(0, token2.kind);
      assertEquals(22, javaCharStream0.getLine());
      assertEquals(57, javaCharStream0.getBeginColumn());
      assertEquals(22, javaCharStream0.getBeginLine());
      assertEquals(61, javaCharStream0.getColumn());
      assertEquals(61, javaCharStream0.getEndColumn());
      assertEquals(22, javaCharStream0.getEndLine());
      assertNull(token2.toString());
      assertNotSame(javaParserTokenManager0, javaParserTokenManager1);
      assertNotSame(token2, token1);
      assertNotSame(token2, token0);
      assertFalse(javaParserTokenManager0.equals((Object)javaParserTokenManager1));
      assertFalse(token2.equals((Object)token1));
      assertFalse(token2.equals((Object)token0));
      
      Token.GTToken token_GTToken0 = new Token.GTToken();
      assertEquals(0, token_GTToken0.beginColumn);
      assertEquals(0, token_GTToken0.endColumn);
      assertEquals(0, token_GTToken0.endLine);
      assertEquals(0, token_GTToken0.kind);
      assertEquals(0, token_GTToken0.beginLine);
      assertNull(token_GTToken0.toString());
      assertNotNull(token_GTToken0);
      
      Token token3 = token_GTToken0.next;
      assertNull(token3);
      
      javaParserTokenManager0.SkipLexicalActions(token0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(4, javaCharStream0.bufpos);
      assertEquals(61, token0.endColumn);
      assertEquals(22, token0.beginLine);
      assertEquals(74, token0.kind);
      assertEquals(57, token0.beginColumn);
      assertEquals(22, token0.endLine);
      assertEquals(22, javaCharStream0.getLine());
      assertEquals(57, javaCharStream0.getBeginColumn());
      assertEquals(22, javaCharStream0.getBeginLine());
      assertEquals(61, javaCharStream0.getColumn());
      assertEquals(61, javaCharStream0.getEndColumn());
      assertEquals(22, javaCharStream0.getEndLine());
      assertEquals("Azdbx", token0.toString());
      assertNotSame(javaParserTokenManager0, javaParserTokenManager1);
      assertNotSame(javaParserTokenManager1, javaParserTokenManager0);
      assertNotSame(token0, token1);
      assertNotSame(token0, token2);
      assertFalse(javaParserTokenManager0.equals((Object)javaParserTokenManager1));
      assertFalse(javaParserTokenManager1.equals((Object)javaParserTokenManager0));
      assertFalse(token0.equals((Object)token1));
      assertFalse(token0.equals((Object)token2));
      
      Token token4 = javaParserTokenManager1.getNextToken();
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(5, javaCharStream0.bufpos);
      assertEquals(62, token4.beginColumn);
      assertEquals(62, token4.endColumn);
      assertEquals(103, token4.kind);
      assertEquals(22, token4.beginLine);
      assertEquals(22, token4.endLine);
      assertEquals(22, javaCharStream0.getLine());
      assertEquals(22, javaCharStream0.getBeginLine());
      assertEquals(62, javaCharStream0.getBeginColumn());
      assertEquals(62, javaCharStream0.getColumn());
      assertEquals(62, javaCharStream0.getEndColumn());
      assertEquals(22, javaCharStream0.getEndLine());
      assertEquals("*", token4.toString());
      assertNotSame(javaParserTokenManager1, javaParserTokenManager0);
      assertNotSame(token4, token0);
      assertNotSame(token4, token2);
      assertNotSame(token4, token1);
      assertNotNull(token4);
      assertFalse(javaParserTokenManager1.equals((Object)javaParserTokenManager0));
      assertFalse(token4.equals((Object)token0));
      assertFalse(token4.equals((Object)token2));
      assertFalse(token4.equals((Object)token1));
      
      javaParserTokenManager0.TokenLexicalActions(token4);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(5, javaCharStream0.bufpos);
      assertEquals(62, token4.beginColumn);
      assertEquals(62, token4.endColumn);
      assertEquals(103, token4.kind);
      assertEquals(22, token4.beginLine);
      assertEquals(22, token4.endLine);
      assertEquals(22, javaCharStream0.getLine());
      assertEquals(22, javaCharStream0.getBeginLine());
      assertEquals(62, javaCharStream0.getBeginColumn());
      assertEquals(62, javaCharStream0.getColumn());
      assertEquals(62, javaCharStream0.getEndColumn());
      assertEquals(22, javaCharStream0.getEndLine());
      assertEquals("*", token4.toString());
      assertNotSame(javaParserTokenManager0, javaParserTokenManager1);
      assertNotSame(javaParserTokenManager1, javaParserTokenManager0);
      assertNotSame(token4, token0);
      assertNotSame(token4, token2);
      assertNotSame(token4, token1);
      assertFalse(javaParserTokenManager0.equals((Object)javaParserTokenManager1));
      assertFalse(javaParserTokenManager1.equals((Object)javaParserTokenManager0));
      assertFalse(token4.equals((Object)token0));
      assertFalse(token4.equals((Object)token2));
      assertFalse(token4.equals((Object)token1));
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      assertFalse(fileDescriptor0.valid());
      assertNotNull(fileDescriptor0);
      
      StringReader stringReader0 = new StringReader("t`LYJy$=jm$_HY!");
      assertNotNull(stringReader0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, 794, 41);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertNotNull(javaCharStream0);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertNotNull(javaParserTokenManager0);
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertEquals(0, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(41, token0.endColumn);
      assertEquals(74, token0.kind);
      assertEquals(794, token0.beginLine);
      assertEquals(41, token0.beginColumn);
      assertEquals(794, token0.endLine);
      assertEquals(41, javaCharStream0.getColumn());
      assertEquals(794, javaCharStream0.getEndLine());
      assertEquals(794, javaCharStream0.getLine());
      assertEquals(41, javaCharStream0.getBeginColumn());
      assertEquals(794, javaCharStream0.getBeginLine());
      assertEquals(41, javaCharStream0.getEndColumn());
      assertEquals("t", token0.toString());
      assertNotNull(token0);
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      assertFalse(fileDescriptor0.valid());
      assertNotNull(fileDescriptor0);
      
      StringReader stringReader0 = new StringReader("<<");
      assertNotNull(stringReader0);
      
      int int0 = stringReader0.read();
      assertEquals(60, int0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, (-3573), (-3573));
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertNotNull(javaCharStream0);
      
      stringReader0.reset();
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertNotNull(javaParserTokenManager0);
      
      javaParserTokenManager0.MoreLexicalActions();
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      
      Token token0 = new Token();
      assertEquals(0, token0.endLine);
      assertEquals(0, token0.endColumn);
      assertEquals(0, token0.beginColumn);
      assertEquals(0, token0.beginLine);
      assertEquals(0, token0.kind);
      assertNull(token0.toString());
      assertNotNull(token0);
      
      Token token1 = javaParserTokenManager0.getNextToken();
      assertEquals(1, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-3573), token1.endLine);
      assertEquals((-3573), token1.beginLine);
      assertEquals((-3572), token1.endColumn);
      assertEquals(109, token1.kind);
      assertEquals((-3573), token1.beginColumn);
      assertEquals((-3572), javaCharStream0.getEndColumn());
      assertEquals((-3572), javaCharStream0.getColumn());
      assertEquals((-3573), javaCharStream0.getBeginColumn());
      assertEquals((-3573), javaCharStream0.getBeginLine());
      assertEquals((-3573), javaCharStream0.getLine());
      assertEquals((-3573), javaCharStream0.getEndLine());
      assertEquals("<<", token1.toString());
      assertNotSame(token1, token0);
      assertNotNull(token1);
      assertFalse(token1.equals((Object)token0));
      
      JavaParserTokenManager javaParserTokenManager1 = new JavaParserTokenManager(javaCharStream0);
      assertEquals(1, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-3572), javaCharStream0.getEndColumn());
      assertEquals((-3572), javaCharStream0.getColumn());
      assertEquals((-3573), javaCharStream0.getBeginColumn());
      assertEquals((-3573), javaCharStream0.getBeginLine());
      assertEquals((-3573), javaCharStream0.getLine());
      assertEquals((-3573), javaCharStream0.getEndLine());
      assertNotNull(javaParserTokenManager1);
      assertFalse(javaParserTokenManager1.equals((Object)javaParserTokenManager0));
      
      javaParserTokenManager1.SwitchTo(3);
      assertEquals(1, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-3572), javaCharStream0.getEndColumn());
      assertEquals((-3572), javaCharStream0.getColumn());
      assertEquals((-3573), javaCharStream0.getBeginColumn());
      assertEquals((-3573), javaCharStream0.getBeginLine());
      assertEquals((-3573), javaCharStream0.getLine());
      assertEquals((-3573), javaCharStream0.getEndLine());
      assertNotSame(javaParserTokenManager1, javaParserTokenManager0);
      assertFalse(javaParserTokenManager1.equals((Object)javaParserTokenManager0));
      
      Token token2 = javaParserTokenManager1.jjFillToken();
      assertEquals(1, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-3572), token2.endColumn);
      assertEquals(0, token2.kind);
      assertEquals((-3573), token2.beginLine);
      assertEquals((-3573), token2.beginColumn);
      assertEquals((-3573), token2.endLine);
      assertEquals((-3572), javaCharStream0.getEndColumn());
      assertEquals((-3572), javaCharStream0.getColumn());
      assertEquals((-3573), javaCharStream0.getBeginColumn());
      assertEquals((-3573), javaCharStream0.getBeginLine());
      assertEquals((-3573), javaCharStream0.getLine());
      assertEquals((-3573), javaCharStream0.getEndLine());
      assertEquals("", token2.toString());
      assertNotSame(javaParserTokenManager1, javaParserTokenManager0);
      assertNotSame(token2, token1);
      assertNotSame(token2, token0);
      assertNotNull(token2);
      assertFalse(javaParserTokenManager1.equals((Object)javaParserTokenManager0));
      assertFalse(token2.equals((Object)token1));
      assertFalse(token2.equals((Object)token0));
      
      Token token3 = new Token();
      assertEquals(0, token3.beginLine);
      assertEquals(0, token3.kind);
      assertEquals(0, token3.endColumn);
      assertEquals(0, token3.beginColumn);
      assertEquals(0, token3.endLine);
      assertNull(token3.toString());
      assertNotNull(token3);
      assertFalse(token3.equals((Object)token2));
      assertFalse(token3.equals((Object)token1));
      assertFalse(token3.equals((Object)token0));
      
      Token token4 = javaParserTokenManager1.getNextToken();
      assertEquals(0, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-3572), token4.endColumn);
      assertEquals((-3572), token4.beginColumn);
      assertEquals(0, token4.kind);
      assertEquals((-3573), token4.beginLine);
      assertEquals((-3573), token4.endLine);
      assertEquals((-3572), javaCharStream0.getEndColumn());
      assertEquals((-3572), javaCharStream0.getColumn());
      assertEquals((-3572), javaCharStream0.getBeginColumn());
      assertEquals((-3573), javaCharStream0.getBeginLine());
      assertEquals((-3573), javaCharStream0.getLine());
      assertEquals((-3573), javaCharStream0.getEndLine());
      assertEquals("", token4.toString());
      assertNotSame(javaParserTokenManager1, javaParserTokenManager0);
      assertNotSame(token4, token1);
      assertNotSame(token4, token2);
      assertNotSame(token4, token0);
      assertNotSame(token4, token3);
      assertNotNull(token4);
      assertFalse(javaParserTokenManager1.equals((Object)javaParserTokenManager0));
      assertFalse(token4.equals((Object)token1));
      assertFalse(token4.equals((Object)token2));
      assertFalse(token4.equals((Object)token0));
      assertFalse(token4.equals((Object)token3));
      
      javaParserTokenManager1.SkipLexicalActions(token4);
      assertEquals(0, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-3572), token4.endColumn);
      assertEquals((-3572), token4.beginColumn);
      assertEquals(0, token4.kind);
      assertEquals((-3573), token4.beginLine);
      assertEquals((-3573), token4.endLine);
      assertEquals((-3572), javaCharStream0.getEndColumn());
      assertEquals((-3572), javaCharStream0.getColumn());
      assertEquals((-3572), javaCharStream0.getBeginColumn());
      assertEquals((-3573), javaCharStream0.getBeginLine());
      assertEquals((-3573), javaCharStream0.getLine());
      assertEquals((-3573), javaCharStream0.getEndLine());
      assertEquals("", token4.toString());
      assertNotSame(javaParserTokenManager1, javaParserTokenManager0);
      assertNotSame(token4, token1);
      assertNotSame(token4, token2);
      assertNotSame(token4, token0);
      assertNotSame(token4, token3);
      assertFalse(javaParserTokenManager1.equals((Object)javaParserTokenManager0));
      assertFalse(token4.equals((Object)token1));
      assertFalse(token4.equals((Object)token2));
      assertFalse(token4.equals((Object)token0));
      assertFalse(token4.equals((Object)token3));
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      StringReader stringReader0 = new StringReader("dnZoRZC.$[%%@b!UT");
      assertNotNull(stringReader0);
      
      boolean boolean0 = FileSystemHandling.setPermissions((EvoSuiteFile) null, false, true, false);
      assertFalse(boolean0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, 41, (-1672), 122);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertNotNull(javaCharStream0);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertNotNull(javaParserTokenManager0);
      
      int int0 = stringReader0.read();
      assertEquals(100, int0);
      
      JavaCharStream javaCharStream1 = new JavaCharStream(stringReader0, 51, 122);
      assertEquals((-1), javaCharStream1.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream1.getBeginColumn());
      assertEquals(0, javaCharStream1.getBeginLine());
      assertNotNull(javaCharStream1);
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      
      JavaParserTokenManager javaParserTokenManager1 = new JavaParserTokenManager(javaCharStream0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertNotNull(javaParserTokenManager1);
      assertFalse(javaCharStream0.equals((Object)javaCharStream1));
      assertFalse(javaParserTokenManager1.equals((Object)javaParserTokenManager0));
      
      Token token0 = javaParserTokenManager1.getNextToken();
      assertEquals(5, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(74, token0.kind);
      assertEquals(41, token0.beginLine);
      assertEquals((-1672), token0.beginColumn);
      assertEquals(41, token0.endLine);
      assertEquals((-1667), token0.endColumn);
      assertEquals(41, javaCharStream0.getBeginLine());
      assertEquals(41, javaCharStream0.getEndLine());
      assertEquals((-1667), javaCharStream0.getEndColumn());
      assertEquals((-1672), javaCharStream0.getBeginColumn());
      assertEquals(41, javaCharStream0.getLine());
      assertEquals((-1667), javaCharStream0.getColumn());
      assertEquals("nZoRZC", token0.toString());
      assertNotSame(javaCharStream0, javaCharStream1);
      assertNotSame(javaParserTokenManager1, javaParserTokenManager0);
      assertNotNull(token0);
      assertFalse(javaCharStream0.equals((Object)javaCharStream1));
      assertFalse(javaParserTokenManager1.equals((Object)javaParserTokenManager0));
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      assertFalse(fileDescriptor0.valid());
      assertNotNull(fileDescriptor0);
      
      PipedInputStream pipedInputStream0 = new PipedInputStream(597);
      assertEquals(0, pipedInputStream0.available());
      assertNotNull(pipedInputStream0);
      
      StringReader stringReader0 = new StringReader("double");
      assertNotNull(stringReader0);
      
      StringReader stringReader1 = new StringReader("double");
      assertNotNull(stringReader1);
      assertFalse(stringReader1.equals((Object)stringReader0));
      
      int int0 = stringReader1.read();
      assertEquals(100, int0);
      assertNotSame(stringReader1, stringReader0);
      assertFalse(stringReader1.equals((Object)stringReader0));
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, 22, (-2269));
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertNotNull(javaCharStream0);
      assertFalse(stringReader0.equals((Object)stringReader1));
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertNotNull(javaParserTokenManager0);
      assertFalse(stringReader0.equals((Object)stringReader1));
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(5, javaCharStream0.bufpos);
      assertEquals(22, token0.beginLine);
      assertEquals((-2264), token0.endColumn);
      assertEquals(22, token0.endLine);
      assertEquals((-2269), token0.beginColumn);
      assertEquals(26, token0.kind);
      assertEquals(22, javaCharStream0.getBeginLine());
      assertEquals((-2264), javaCharStream0.getEndColumn());
      assertEquals(22, javaCharStream0.getLine());
      assertEquals((-2264), javaCharStream0.getColumn());
      assertEquals(22, javaCharStream0.getEndLine());
      assertEquals((-2269), javaCharStream0.getBeginColumn());
      assertEquals("double", token0.toString());
      assertNotSame(stringReader0, stringReader1);
      assertNotNull(token0);
      assertFalse(stringReader0.equals((Object)stringReader1));
      
      StringReader stringReader2 = new StringReader("<Azdbx*VQOk[X_d");
      assertNotNull(stringReader2);
      assertFalse(stringReader2.equals((Object)stringReader1));
      assertFalse(stringReader2.equals((Object)stringReader0));
      
      JavaParserTokenManager javaParserTokenManager1 = new JavaParserTokenManager(javaCharStream0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(5, javaCharStream0.bufpos);
      assertEquals(22, javaCharStream0.getBeginLine());
      assertEquals((-2264), javaCharStream0.getEndColumn());
      assertEquals(22, javaCharStream0.getLine());
      assertEquals((-2264), javaCharStream0.getColumn());
      assertEquals(22, javaCharStream0.getEndLine());
      assertEquals((-2269), javaCharStream0.getBeginColumn());
      assertNotNull(javaParserTokenManager1);
      assertFalse(stringReader0.equals((Object)stringReader1));
      assertFalse(stringReader0.equals((Object)stringReader2));
      assertFalse(javaParserTokenManager1.equals((Object)javaParserTokenManager0));
      
      Token token1 = javaParserTokenManager0.getNextToken();
      assertEquals(0, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-2264), token1.endColumn);
      assertEquals(22, token1.beginLine);
      assertEquals(0, token1.kind);
      assertEquals((-2264), token1.beginColumn);
      assertEquals(22, token1.endLine);
      assertEquals(22, javaCharStream0.getBeginLine());
      assertEquals((-2264), javaCharStream0.getEndColumn());
      assertEquals((-2264), javaCharStream0.getBeginColumn());
      assertEquals(22, javaCharStream0.getLine());
      assertEquals((-2264), javaCharStream0.getColumn());
      assertEquals(22, javaCharStream0.getEndLine());
      assertEquals("", token1.toString());
      assertNotSame(stringReader0, stringReader1);
      assertNotSame(stringReader0, stringReader2);
      assertNotSame(javaParserTokenManager0, javaParserTokenManager1);
      assertNotSame(token1, token0);
      assertNotNull(token1);
      assertFalse(stringReader0.equals((Object)stringReader1));
      assertFalse(stringReader0.equals((Object)stringReader2));
      assertFalse(javaParserTokenManager0.equals((Object)javaParserTokenManager1));
      assertFalse(token1.equals((Object)token0));
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      assertFalse(fileDescriptor0.valid());
      assertNotNull(fileDescriptor0);
      
      PipedInputStream pipedInputStream0 = new PipedInputStream(3956);
      assertEquals(0, pipedInputStream0.available());
      assertNotNull(pipedInputStream0);
      
      StringReader stringReader0 = new StringReader("%Hik*olZ}s.[8s");
      assertNotNull(stringReader0);
      
      int int0 = stringReader0.read();
      assertEquals(37, int0);
      
      boolean boolean0 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "");
      assertFalse(boolean0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, 2671, 37);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertNotNull(javaCharStream0);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertNotNull(javaParserTokenManager0);
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertEquals(2, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(74, token0.kind);
      assertEquals(37, token0.beginColumn);
      assertEquals(2671, token0.endLine);
      assertEquals(39, token0.endColumn);
      assertEquals(2671, token0.beginLine);
      assertEquals(2671, javaCharStream0.getLine());
      assertEquals(2671, javaCharStream0.getEndLine());
      assertEquals(37, javaCharStream0.getBeginColumn());
      assertEquals(39, javaCharStream0.getEndColumn());
      assertEquals(2671, javaCharStream0.getBeginLine());
      assertEquals(39, javaCharStream0.getColumn());
      assertEquals("Hik", token0.toString());
      assertNotNull(token0);
      
      JavaParserTokenManager javaParserTokenManager1 = new JavaParserTokenManager(javaCharStream0);
      assertEquals(2, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(2671, javaCharStream0.getLine());
      assertEquals(2671, javaCharStream0.getEndLine());
      assertEquals(37, javaCharStream0.getBeginColumn());
      assertEquals(39, javaCharStream0.getEndColumn());
      assertEquals(2671, javaCharStream0.getBeginLine());
      assertEquals(39, javaCharStream0.getColumn());
      assertNotNull(javaParserTokenManager1);
      assertFalse(javaParserTokenManager1.equals((Object)javaParserTokenManager0));
      
      long long0 = stringReader0.skip((-5260L));
      assertEquals(0L, long0);
      
      Token token1 = javaParserTokenManager0.getNextToken();
      assertEquals(3, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(2671, token1.beginLine);
      assertEquals(40, token1.endColumn);
      assertEquals(40, token1.beginColumn);
      assertEquals(103, token1.kind);
      assertEquals(2671, token1.endLine);
      assertEquals(2671, javaCharStream0.getLine());
      assertEquals(2671, javaCharStream0.getEndLine());
      assertEquals(40, javaCharStream0.getBeginColumn());
      assertEquals(40, javaCharStream0.getColumn());
      assertEquals(2671, javaCharStream0.getBeginLine());
      assertEquals(40, javaCharStream0.getEndColumn());
      assertEquals("*", token1.toString());
      assertNotSame(javaParserTokenManager0, javaParserTokenManager1);
      assertNotSame(token1, token0);
      assertNotNull(token1);
      assertFalse(javaParserTokenManager0.equals((Object)javaParserTokenManager1));
      assertFalse(token1.equals((Object)token0));
      
      Token token2 = javaParserTokenManager1.getNextToken();
      assertEquals(6, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(2671, token2.endLine);
      assertEquals(2671, token2.beginLine);
      assertEquals(43, token2.endColumn);
      assertEquals(41, token2.beginColumn);
      assertEquals(74, token2.kind);
      assertEquals(2671, javaCharStream0.getLine());
      assertEquals(2671, javaCharStream0.getEndLine());
      assertEquals(41, javaCharStream0.getBeginColumn());
      assertEquals(43, javaCharStream0.getColumn());
      assertEquals(2671, javaCharStream0.getBeginLine());
      assertEquals(43, javaCharStream0.getEndColumn());
      assertEquals("olZ", token2.toString());
      assertNotSame(javaParserTokenManager1, javaParserTokenManager0);
      assertNotSame(token2, token0);
      assertNotSame(token2, token1);
      assertNotNull(token2);
      assertFalse(javaParserTokenManager1.equals((Object)javaParserTokenManager0));
      assertFalse(token2.equals((Object)token0));
      assertFalse(token2.equals((Object)token1));
      
      javaParserTokenManager1.MoreLexicalActions();
      assertEquals(6, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(2671, javaCharStream0.getLine());
      assertEquals(2671, javaCharStream0.getEndLine());
      assertEquals(41, javaCharStream0.getBeginColumn());
      assertEquals(43, javaCharStream0.getColumn());
      assertEquals(2671, javaCharStream0.getBeginLine());
      assertEquals(43, javaCharStream0.getEndColumn());
      assertNotSame(javaParserTokenManager1, javaParserTokenManager0);
      assertFalse(javaParserTokenManager1.equals((Object)javaParserTokenManager0));
      
      javaParserTokenManager0.SkipLexicalActions(token0);
      assertEquals(6, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(74, token0.kind);
      assertEquals(37, token0.beginColumn);
      assertEquals(2671, token0.endLine);
      assertEquals(39, token0.endColumn);
      assertEquals(2671, token0.beginLine);
      assertEquals(2671, javaCharStream0.getLine());
      assertEquals(2671, javaCharStream0.getEndLine());
      assertEquals(41, javaCharStream0.getBeginColumn());
      assertEquals(43, javaCharStream0.getColumn());
      assertEquals(2671, javaCharStream0.getBeginLine());
      assertEquals(43, javaCharStream0.getEndColumn());
      assertEquals("Hik", token0.toString());
      assertNotSame(javaParserTokenManager0, javaParserTokenManager1);
      assertNotSame(token0, token2);
      assertNotSame(token0, token1);
      assertFalse(javaParserTokenManager0.equals((Object)javaParserTokenManager1));
      assertFalse(token0.equals((Object)token2));
      assertFalse(token0.equals((Object)token1));
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      StringReader stringReader0 = new StringReader("w%DN*pejbGS{#17g'Z");
      assertNotNull(stringReader0);
      
      int int0 = JavaParserConstants.LSHIFT;
      assertEquals(109, int0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, 109, 109);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertNotNull(javaCharStream0);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertNotNull(javaParserTokenManager0);
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.bufpos);
      assertEquals(74, token0.kind);
      assertEquals(109, token0.endLine);
      assertEquals(109, token0.beginLine);
      assertEquals(109, token0.beginColumn);
      assertEquals(109, token0.endColumn);
      assertEquals(109, javaCharStream0.getBeginLine());
      assertEquals(109, javaCharStream0.getColumn());
      assertEquals(109, javaCharStream0.getEndLine());
      assertEquals(109, javaCharStream0.getEndColumn());
      assertEquals(109, javaCharStream0.getLine());
      assertEquals(109, javaCharStream0.getBeginColumn());
      assertEquals("w", token0.toString());
      assertNotNull(token0);
      
      StringReader stringReader1 = new StringReader("\"goto\"");
      assertNotNull(stringReader1);
      assertFalse(stringReader1.equals((Object)stringReader0));
      
      JavaParserTokenManager javaParserTokenManager1 = new JavaParserTokenManager(javaCharStream0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.bufpos);
      assertEquals(109, javaCharStream0.getBeginLine());
      assertEquals(109, javaCharStream0.getColumn());
      assertEquals(109, javaCharStream0.getEndLine());
      assertEquals(109, javaCharStream0.getEndColumn());
      assertEquals(109, javaCharStream0.getLine());
      assertEquals(109, javaCharStream0.getBeginColumn());
      assertNotNull(javaParserTokenManager1);
      assertFalse(stringReader0.equals((Object)stringReader1));
      assertFalse(javaParserTokenManager1.equals((Object)javaParserTokenManager0));
      
      Token token1 = javaParserTokenManager1.getNextToken();
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(1, javaCharStream0.bufpos);
      assertEquals(108, token1.kind);
      assertEquals(110, token1.beginColumn);
      assertEquals(109, token1.beginLine);
      assertEquals(109, token1.endLine);
      assertEquals(110, token1.endColumn);
      assertEquals(109, javaCharStream0.getBeginLine());
      assertEquals(109, javaCharStream0.getEndLine());
      assertEquals(110, javaCharStream0.getColumn());
      assertEquals(109, javaCharStream0.getLine());
      assertEquals(110, javaCharStream0.getEndColumn());
      assertEquals(110, javaCharStream0.getBeginColumn());
      assertEquals("%", token1.toString());
      assertNotSame(stringReader0, stringReader1);
      assertNotSame(javaParserTokenManager1, javaParserTokenManager0);
      assertNotSame(token1, token0);
      assertNotNull(token1);
      assertFalse(stringReader0.equals((Object)stringReader1));
      assertFalse(javaParserTokenManager1.equals((Object)javaParserTokenManager0));
      assertFalse(token1.equals((Object)token0));
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      StringReader stringReader0 = new StringReader("f%3T7%gku6");
      assertNotNull(stringReader0);
      
      int int0 = stringReader0.read();
      assertEquals(102, int0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, 84, 1024);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertNotNull(javaCharStream0);
      
      boolean boolean0 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "");
      assertFalse(boolean0);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertNotNull(javaParserTokenManager0);
      
      javaParserTokenManager0.ReInit(javaCharStream0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      
      JavaParserTokenManager javaParserTokenManager1 = new JavaParserTokenManager(javaCharStream0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertNotNull(javaParserTokenManager1);
      assertFalse(javaParserTokenManager1.equals((Object)javaParserTokenManager0));
      
      Token token0 = javaParserTokenManager1.getNextToken();
      assertEquals(0, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(84, token0.beginLine);
      assertEquals(1024, token0.endColumn);
      assertEquals(1024, token0.beginColumn);
      assertEquals(108, token0.kind);
      assertEquals(84, token0.endLine);
      assertEquals(1024, javaCharStream0.getEndColumn());
      assertEquals(1024, javaCharStream0.getBeginColumn());
      assertEquals(84, javaCharStream0.getEndLine());
      assertEquals(1024, javaCharStream0.getColumn());
      assertEquals(84, javaCharStream0.getLine());
      assertEquals(84, javaCharStream0.getBeginLine());
      assertEquals("%", token0.toString());
      assertNotSame(javaParserTokenManager1, javaParserTokenManager0);
      assertNotNull(token0);
      assertFalse(javaParserTokenManager1.equals((Object)javaParserTokenManager0));
      
      char char0 = javaCharStream0.ReadByte();
      assertEquals(0, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(1024, javaCharStream0.getEndColumn());
      assertEquals(1024, javaCharStream0.getBeginColumn());
      assertEquals(84, javaCharStream0.getEndLine());
      assertEquals(1024, javaCharStream0.getColumn());
      assertEquals(84, javaCharStream0.getLine());
      assertEquals(84, javaCharStream0.getBeginLine());
      assertEquals('T', char0);
      
      Token token1 = javaParserTokenManager0.getNextToken();
      assertEquals(2, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(1026, token1.endColumn);
      assertEquals(84, token1.endLine);
      assertEquals(66, token1.kind);
      assertEquals(84, token1.beginLine);
      assertEquals(1025, token1.beginColumn);
      assertEquals(1025, javaCharStream0.getBeginColumn());
      assertEquals(84, javaCharStream0.getEndLine());
      assertEquals(1026, javaCharStream0.getEndColumn());
      assertEquals(1026, javaCharStream0.getColumn());
      assertEquals(84, javaCharStream0.getLine());
      assertEquals(84, javaCharStream0.getBeginLine());
      assertEquals("37", token1.toString());
      assertNotSame(javaParserTokenManager0, javaParserTokenManager1);
      assertNotSame(token1, token0);
      assertNotNull(token1);
      assertFalse(javaParserTokenManager0.equals((Object)javaParserTokenManager1));
      assertFalse(token1.equals((Object)token0));
      
      Token token2 = javaParserTokenManager1.getNextToken();
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(3, javaCharStream0.bufpos);
      assertEquals(84, token2.endLine);
      assertEquals(108, token2.kind);
      assertEquals(1027, token2.beginColumn);
      assertEquals(1027, token2.endColumn);
      assertEquals(84, token2.beginLine);
      assertEquals(1027, javaCharStream0.getBeginColumn());
      assertEquals(84, javaCharStream0.getEndLine());
      assertEquals(1027, javaCharStream0.getEndColumn());
      assertEquals(1027, javaCharStream0.getColumn());
      assertEquals(84, javaCharStream0.getLine());
      assertEquals(84, javaCharStream0.getBeginLine());
      assertEquals("%", token2.toString());
      assertNotSame(javaParserTokenManager1, javaParserTokenManager0);
      assertNotSame(token2, token0);
      assertNotSame(token2, token1);
      assertNotNull(token2);
      assertFalse(javaParserTokenManager1.equals((Object)javaParserTokenManager0));
      assertFalse(token2.equals((Object)token0));
      assertFalse(token2.equals((Object)token1));
      
      Token token3 = javaParserTokenManager0.jjFillToken();
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(3, javaCharStream0.bufpos);
      assertEquals(66, token3.kind);
      assertEquals(1027, token3.beginColumn);
      assertEquals(84, token3.beginLine);
      assertEquals(1027, token3.endColumn);
      assertEquals(84, token3.endLine);
      assertEquals(1027, javaCharStream0.getBeginColumn());
      assertEquals(84, javaCharStream0.getEndLine());
      assertEquals(1027, javaCharStream0.getEndColumn());
      assertEquals(1027, javaCharStream0.getColumn());
      assertEquals(84, javaCharStream0.getLine());
      assertEquals(84, javaCharStream0.getBeginLine());
      assertEquals("%", token3.toString());
      assertNotSame(javaParserTokenManager0, javaParserTokenManager1);
      assertNotSame(token3, token2);
      assertNotSame(token3, token1);
      assertNotSame(token3, token0);
      assertNotNull(token3);
      assertFalse(javaParserTokenManager0.equals((Object)javaParserTokenManager1));
      assertFalse(token3.equals((Object)token2));
      assertFalse(token3.equals((Object)token1));
      assertFalse(token3.equals((Object)token0));
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      PipedInputStream pipedInputStream0 = new PipedInputStream(57);
      assertEquals(0, pipedInputStream0.available());
      assertNotNull(pipedInputStream0);
      
      StringReader stringReader0 = new StringReader("=Qv&nCW`Vsfo[m");
      assertNotNull(stringReader0);
      
      int int0 = stringReader0.read();
      assertEquals(61, int0);
      
      int int1 = stringReader0.read();
      assertEquals(81, int1);
      assertFalse(int1 == int0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, (-3059), (-1053));
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertNotNull(javaCharStream0);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertNotNull(javaParserTokenManager0);
      
      JavaParserTokenManager javaParserTokenManager1 = new JavaParserTokenManager(javaCharStream0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertNotNull(javaParserTokenManager1);
      assertFalse(javaParserTokenManager1.equals((Object)javaParserTokenManager0));
      
      Token token0 = javaParserTokenManager1.getNextToken();
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.bufpos);
      assertEquals((-1053), token0.beginColumn);
      assertEquals((-3059), token0.endLine);
      assertEquals((-1053), token0.endColumn);
      assertEquals(74, token0.kind);
      assertEquals((-3059), token0.beginLine);
      assertEquals((-1053), javaCharStream0.getColumn());
      assertEquals((-3059), javaCharStream0.getEndLine());
      assertEquals((-3059), javaCharStream0.getLine());
      assertEquals((-1053), javaCharStream0.getEndColumn());
      assertEquals((-3059), javaCharStream0.getBeginLine());
      assertEquals((-1053), javaCharStream0.getBeginColumn());
      assertEquals("v", token0.toString());
      assertNotSame(javaParserTokenManager1, javaParserTokenManager0);
      assertNotNull(token0);
      assertFalse(javaParserTokenManager1.equals((Object)javaParserTokenManager0));
      
      javaParserTokenManager0.TokenLexicalActions(token0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.bufpos);
      assertEquals((-1053), token0.beginColumn);
      assertEquals((-3059), token0.endLine);
      assertEquals((-1053), token0.endColumn);
      assertEquals(74, token0.kind);
      assertEquals((-3059), token0.beginLine);
      assertEquals((-1053), javaCharStream0.getColumn());
      assertEquals((-3059), javaCharStream0.getEndLine());
      assertEquals((-3059), javaCharStream0.getLine());
      assertEquals((-1053), javaCharStream0.getEndColumn());
      assertEquals((-3059), javaCharStream0.getBeginLine());
      assertEquals((-1053), javaCharStream0.getBeginColumn());
      assertEquals("v", token0.toString());
      assertNotSame(javaParserTokenManager0, javaParserTokenManager1);
      assertNotSame(javaParserTokenManager1, javaParserTokenManager0);
      assertFalse(javaParserTokenManager0.equals((Object)javaParserTokenManager1));
      assertFalse(javaParserTokenManager1.equals((Object)javaParserTokenManager0));
      
      javaParserTokenManager1.SkipLexicalActions(token0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.bufpos);
      assertEquals((-1053), token0.beginColumn);
      assertEquals((-3059), token0.endLine);
      assertEquals((-1053), token0.endColumn);
      assertEquals(74, token0.kind);
      assertEquals((-3059), token0.beginLine);
      assertEquals((-1053), javaCharStream0.getColumn());
      assertEquals((-3059), javaCharStream0.getEndLine());
      assertEquals((-3059), javaCharStream0.getLine());
      assertEquals((-1053), javaCharStream0.getEndColumn());
      assertEquals((-3059), javaCharStream0.getBeginLine());
      assertEquals((-1053), javaCharStream0.getBeginColumn());
      assertEquals("v", token0.toString());
      assertNotSame(javaParserTokenManager1, javaParserTokenManager0);
      assertFalse(javaParserTokenManager1.equals((Object)javaParserTokenManager0));
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "+=");
      assertFalse(boolean0);
      
      StringReader stringReader0 = new StringReader("f%3T%gku6");
      assertNotNull(stringReader0);
      
      StringReader stringReader1 = new StringReader("+=");
      assertNotNull(stringReader1);
      assertFalse(stringReader1.equals((Object)stringReader0));
      
      int int0 = stringReader0.read();
      assertEquals(102, int0);
      assertNotSame(stringReader0, stringReader1);
      assertFalse(stringReader0.equals((Object)stringReader1));
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader1, 102, 102);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertNotNull(javaCharStream0);
      assertFalse(stringReader1.equals((Object)stringReader0));
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertNotNull(javaParserTokenManager0);
      assertFalse(stringReader1.equals((Object)stringReader0));
      
      Token.GTToken token_GTToken0 = new Token.GTToken();
      assertEquals(0, token_GTToken0.kind);
      assertEquals(0, token_GTToken0.beginLine);
      assertEquals(0, token_GTToken0.beginColumn);
      assertEquals(0, token_GTToken0.endColumn);
      assertEquals(0, token_GTToken0.endLine);
      assertNull(token_GTToken0.toString());
      assertNotNull(token_GTToken0);
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertEquals(1, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(102, token0.beginColumn);
      assertEquals(102, token0.beginLine);
      assertEquals(103, token0.endColumn);
      assertEquals(110, token0.kind);
      assertEquals(102, token0.endLine);
      assertEquals(102, javaCharStream0.getEndLine());
      assertEquals(103, javaCharStream0.getColumn());
      assertEquals(102, javaCharStream0.getBeginColumn());
      assertEquals(102, javaCharStream0.getBeginLine());
      assertEquals(102, javaCharStream0.getLine());
      assertEquals(103, javaCharStream0.getEndColumn());
      assertEquals("+=", token0.toString());
      assertNotSame(stringReader1, stringReader0);
      assertNotNull(token0);
      assertFalse(stringReader1.equals((Object)stringReader0));
      
      Token token1 = javaParserTokenManager0.getNextToken();
      assertEquals(0, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, token1.kind);
      assertEquals(103, token1.endColumn);
      assertEquals(102, token1.endLine);
      assertEquals(102, token1.beginLine);
      assertEquals(103, token1.beginColumn);
      assertEquals(102, javaCharStream0.getEndLine());
      assertEquals(103, javaCharStream0.getColumn());
      assertEquals(102, javaCharStream0.getBeginLine());
      assertEquals(103, javaCharStream0.getBeginColumn());
      assertEquals(102, javaCharStream0.getLine());
      assertEquals(103, javaCharStream0.getEndColumn());
      assertEquals("", token1.toString());
      assertNotSame(stringReader1, stringReader0);
      assertNotSame(token1, token0);
      assertNotNull(token1);
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertFalse(token1.equals((Object)token0));
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      assertFalse(fileDescriptor0.valid());
      assertNotNull(fileDescriptor0);
      
      StringReader stringReader0 = new StringReader("aUYO[&skX?G2og");
      assertNotNull(stringReader0);
      
      StringReader stringReader1 = new StringReader("\"FUnQ$)6");
      assertNotNull(stringReader1);
      assertFalse(stringReader1.equals((Object)stringReader0));
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader1, (-202), 47);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertNotNull(javaCharStream0);
      assertFalse(stringReader1.equals((Object)stringReader0));
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertNotNull(javaParserTokenManager0);
      assertFalse(stringReader1.equals((Object)stringReader0));
      
      // Undeclared exception!
      try { 
        javaParserTokenManager0.getNextToken();
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Lexical error at line -202, column 55.  Encountered: <EOF> after : \"\\\"FUnQ$)6\"
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      StringReader stringReader0 = new StringReader("null");
      assertNotNull(stringReader0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, 45, 104, 2428);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertNotNull(javaCharStream0);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertNotNull(javaParserTokenManager0);
      
      JavaParserTokenManager javaParserTokenManager1 = new JavaParserTokenManager(javaCharStream0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertNotNull(javaParserTokenManager1);
      assertFalse(javaParserTokenManager1.equals((Object)javaParserTokenManager0));
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(3, javaCharStream0.bufpos);
      assertEquals(45, token0.kind);
      assertEquals(45, token0.beginLine);
      assertEquals(104, token0.beginColumn);
      assertEquals(107, token0.endColumn);
      assertEquals(45, token0.endLine);
      assertEquals(107, javaCharStream0.getEndColumn());
      assertEquals(107, javaCharStream0.getColumn());
      assertEquals(45, javaCharStream0.getLine());
      assertEquals(45, javaCharStream0.getEndLine());
      assertEquals(104, javaCharStream0.getBeginColumn());
      assertEquals(45, javaCharStream0.getBeginLine());
      assertEquals("null", token0.toString());
      assertNotSame(javaParserTokenManager0, javaParserTokenManager1);
      assertNotNull(token0);
      assertFalse(javaParserTokenManager0.equals((Object)javaParserTokenManager1));
      
      Token token1 = javaParserTokenManager1.jjFillToken();
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(3, javaCharStream0.bufpos);
      assertEquals(45, token1.endLine);
      assertEquals(0, token1.kind);
      assertEquals(107, token1.endColumn);
      assertEquals(45, token1.beginLine);
      assertEquals(104, token1.beginColumn);
      assertEquals(107, javaCharStream0.getEndColumn());
      assertEquals(107, javaCharStream0.getColumn());
      assertEquals(45, javaCharStream0.getLine());
      assertEquals(45, javaCharStream0.getEndLine());
      assertEquals(104, javaCharStream0.getBeginColumn());
      assertEquals(45, javaCharStream0.getBeginLine());
      assertEquals("", token1.toString());
      assertNotSame(javaParserTokenManager1, javaParserTokenManager0);
      assertNotSame(token1, token0);
      assertNotNull(token1);
      assertFalse(javaParserTokenManager1.equals((Object)javaParserTokenManager0));
      assertFalse(token1.equals((Object)token0));
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      PipedInputStream pipedInputStream0 = new PipedInputStream(57);
      assertEquals(0, pipedInputStream0.available());
      assertNotNull(pipedInputStream0);
      
      StringReader stringReader0 = new StringReader("<Azdbx*VQOk[X_d");
      assertNotNull(stringReader0);
      
      int int0 = stringReader0.read();
      assertEquals(60, int0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, 22, 57);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertNotNull(javaCharStream0);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertNotNull(javaParserTokenManager0);
      
      JavaParserTokenManager javaParserTokenManager1 = new JavaParserTokenManager(javaCharStream0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertNotNull(javaParserTokenManager1);
      assertFalse(javaParserTokenManager1.equals((Object)javaParserTokenManager0));
      
      Token token0 = javaParserTokenManager1.getNextToken();
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(4, javaCharStream0.bufpos);
      assertEquals(57, token0.beginColumn);
      assertEquals(74, token0.kind);
      assertEquals(22, token0.beginLine);
      assertEquals(61, token0.endColumn);
      assertEquals(22, token0.endLine);
      assertEquals(57, javaCharStream0.getBeginColumn());
      assertEquals(22, javaCharStream0.getEndLine());
      assertEquals(22, javaCharStream0.getLine());
      assertEquals(61, javaCharStream0.getEndColumn());
      assertEquals(61, javaCharStream0.getColumn());
      assertEquals(22, javaCharStream0.getBeginLine());
      assertEquals("Azdbx", token0.toString());
      assertNotSame(javaParserTokenManager1, javaParserTokenManager0);
      assertNotNull(token0);
      assertFalse(javaParserTokenManager1.equals((Object)javaParserTokenManager0));
      
      Token token1 = Token.newToken(74);
      assertEquals(0, token1.endColumn);
      assertEquals(0, token1.beginLine);
      assertEquals(0, token1.beginColumn);
      assertEquals(0, token1.endLine);
      assertEquals(0, token1.kind);
      assertNull(token1.toString());
      assertNotSame(token1, token0);
      assertNotNull(token1);
      assertFalse(token1.equals((Object)token0));
      
      Token token2 = Token.newToken(22);
      assertEquals(0, token2.endColumn);
      assertEquals(0, token2.beginColumn);
      assertEquals(0, token2.endLine);
      assertEquals(0, token2.beginLine);
      assertEquals(0, token2.kind);
      assertNull(token2.toString());
      assertNotSame(token2, token1);
      assertNotSame(token2, token0);
      assertNotNull(token2);
      assertFalse(token2.equals((Object)token1));
      assertFalse(token2.equals((Object)token0));
      
      javaParserTokenManager0.TokenLexicalActions(token2);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(4, javaCharStream0.bufpos);
      assertEquals(0, token2.endColumn);
      assertEquals(0, token2.beginColumn);
      assertEquals(0, token2.endLine);
      assertEquals(0, token2.beginLine);
      assertEquals(0, token2.kind);
      assertEquals(57, javaCharStream0.getBeginColumn());
      assertEquals(22, javaCharStream0.getEndLine());
      assertEquals(22, javaCharStream0.getLine());
      assertEquals(61, javaCharStream0.getEndColumn());
      assertEquals(61, javaCharStream0.getColumn());
      assertEquals(22, javaCharStream0.getBeginLine());
      assertNull(token2.toString());
      assertNotSame(javaParserTokenManager0, javaParserTokenManager1);
      assertNotSame(token2, token1);
      assertNotSame(token2, token0);
      assertFalse(javaParserTokenManager0.equals((Object)javaParserTokenManager1));
      assertFalse(token2.equals((Object)token1));
      assertFalse(token2.equals((Object)token0));
      
      Token.GTToken token_GTToken0 = new Token.GTToken();
      assertEquals(0, token_GTToken0.kind);
      assertEquals(0, token_GTToken0.endLine);
      assertEquals(0, token_GTToken0.beginColumn);
      assertEquals(0, token_GTToken0.endColumn);
      assertEquals(0, token_GTToken0.beginLine);
      assertNull(token_GTToken0.toString());
      assertNotNull(token_GTToken0);
      
      Token token3 = javaParserTokenManager0.getNextToken();
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(5, javaCharStream0.bufpos);
      assertEquals(22, token3.endLine);
      assertEquals(62, token3.endColumn);
      assertEquals(62, token3.beginColumn);
      assertEquals(103, token3.kind);
      assertEquals(22, token3.beginLine);
      assertEquals(22, javaCharStream0.getEndLine());
      assertEquals(22, javaCharStream0.getLine());
      assertEquals(62, javaCharStream0.getBeginColumn());
      assertEquals(62, javaCharStream0.getEndColumn());
      assertEquals(22, javaCharStream0.getBeginLine());
      assertEquals(62, javaCharStream0.getColumn());
      assertEquals("*", token3.toString());
      assertNotSame(javaParserTokenManager0, javaParserTokenManager1);
      assertNotSame(token3, token2);
      assertNotSame(token3, token0);
      assertNotSame(token3, token1);
      assertNotNull(token3);
      assertFalse(javaParserTokenManager0.equals((Object)javaParserTokenManager1));
      assertFalse(token3.equals((Object)token2));
      assertFalse(token3.equals((Object)token0));
      assertFalse(token3.equals((Object)token1));
      
      javaParserTokenManager0.input_stream = javaCharStream0;
      assertEquals(22, javaCharStream0.getEndLine());
      assertEquals(22, javaCharStream0.getLine());
      assertEquals(62, javaCharStream0.getBeginColumn());
      assertEquals(62, javaCharStream0.getEndColumn());
      assertEquals(22, javaCharStream0.getBeginLine());
      assertEquals(62, javaCharStream0.getColumn());
      assertEquals(62, javaParserTokenManager0.input_stream.getColumn());
      assertEquals(62, javaParserTokenManager0.input_stream.getEndColumn());
      assertEquals(62, javaParserTokenManager0.input_stream.getBeginColumn());
      assertEquals(22, javaParserTokenManager0.input_stream.getBeginLine());
      assertEquals(22, javaParserTokenManager0.input_stream.getEndLine());
      assertEquals(22, javaParserTokenManager0.input_stream.getLine());
      
      javaParserTokenManager0.SkipLexicalActions(token0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(5, javaCharStream0.bufpos);
      assertEquals(57, token0.beginColumn);
      assertEquals(74, token0.kind);
      assertEquals(22, token0.beginLine);
      assertEquals(61, token0.endColumn);
      assertEquals(22, token0.endLine);
      assertEquals(22, javaCharStream0.getEndLine());
      assertEquals(22, javaCharStream0.getLine());
      assertEquals(62, javaCharStream0.getBeginColumn());
      assertEquals(62, javaCharStream0.getEndColumn());
      assertEquals(22, javaCharStream0.getBeginLine());
      assertEquals(62, javaCharStream0.getColumn());
      assertEquals("Azdbx", token0.toString());
      assertNotSame(javaParserTokenManager0, javaParserTokenManager1);
      assertNotSame(javaParserTokenManager1, javaParserTokenManager0);
      assertNotSame(token0, token1);
      assertNotSame(token0, token3);
      assertNotSame(token0, token2);
      assertFalse(javaParserTokenManager0.equals((Object)javaParserTokenManager1));
      assertFalse(javaParserTokenManager1.equals((Object)javaParserTokenManager0));
      assertFalse(token0.equals((Object)token1));
      assertFalse(token0.equals((Object)token3));
      assertFalse(token0.equals((Object)token2));
      
      Token token4 = javaParserTokenManager0.getNextToken();
      assertEquals(6, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(74, token4.kind);
      assertEquals(22, token4.beginLine);
      assertEquals(22, token4.endLine);
      assertEquals(63, token4.endColumn);
      assertEquals(63, token4.beginColumn);
      assertEquals(22, javaCharStream0.getEndLine());
      assertEquals(22, javaCharStream0.getLine());
      assertEquals(63, javaCharStream0.getBeginColumn());
      assertEquals(63, javaCharStream0.getEndColumn());
      assertEquals(22, javaCharStream0.getBeginLine());
      assertEquals(63, javaCharStream0.getColumn());
      assertEquals("V", token4.toString());
      assertNotSame(javaParserTokenManager0, javaParserTokenManager1);
      assertNotSame(token4, token0);
      assertNotSame(token4, token1);
      assertNotSame(token4, token3);
      assertNotSame(token4, token2);
      assertNotNull(token4);
      assertFalse(javaParserTokenManager0.equals((Object)javaParserTokenManager1));
      assertFalse(token4.equals((Object)token0));
      assertFalse(token4.equals((Object)token1));
      assertFalse(token4.equals((Object)token3));
      assertFalse(token4.equals((Object)token2));
      
      // Undeclared exception!
      try { 
        javaParserTokenManager0.SwitchTo(74);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Error: Ignoring invalid lexical state : 74. State unchanged.
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "+=");
      assertFalse(boolean0);
      
      StringReader stringReader0 = new StringReader("if");
      assertNotNull(stringReader0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, 2742, 2943);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertNotNull(javaCharStream0);
      
      stringReader0.reset();
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertNotNull(javaParserTokenManager0);
      
      javaParserTokenManager0.MoreLexicalActions();
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      
      Token token0 = new Token();
      assertEquals(0, token0.endColumn);
      assertEquals(0, token0.endLine);
      assertEquals(0, token0.beginColumn);
      assertEquals(0, token0.beginLine);
      assertEquals(0, token0.kind);
      assertNull(token0.toString());
      assertNotNull(token0);
      
      Token token1 = javaParserTokenManager0.getNextToken();
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(1, javaCharStream0.bufpos);
      assertEquals(2943, token1.beginColumn);
      assertEquals(2742, token1.endLine);
      assertEquals(36, token1.kind);
      assertEquals(2944, token1.endColumn);
      assertEquals(2742, token1.beginLine);
      assertEquals(2742, javaCharStream0.getLine());
      assertEquals(2742, javaCharStream0.getEndLine());
      assertEquals(2944, javaCharStream0.getEndColumn());
      assertEquals(2943, javaCharStream0.getBeginColumn());
      assertEquals(2742, javaCharStream0.getBeginLine());
      assertEquals(2944, javaCharStream0.getColumn());
      assertEquals("if", token1.toString());
      assertNotSame(token1, token0);
      assertNotNull(token1);
      assertFalse(token1.equals((Object)token0));
      
      JavaParserTokenManager javaParserTokenManager1 = new JavaParserTokenManager(javaCharStream0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(1, javaCharStream0.bufpos);
      assertEquals(2742, javaCharStream0.getLine());
      assertEquals(2742, javaCharStream0.getEndLine());
      assertEquals(2944, javaCharStream0.getEndColumn());
      assertEquals(2943, javaCharStream0.getBeginColumn());
      assertEquals(2742, javaCharStream0.getBeginLine());
      assertEquals(2944, javaCharStream0.getColumn());
      assertNotNull(javaParserTokenManager1);
      assertFalse(javaParserTokenManager1.equals((Object)javaParserTokenManager0));
      
      // Undeclared exception!
      try { 
        javaParserTokenManager1.SwitchTo(2326);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Error: Ignoring invalid lexical state : 2326. State unchanged.
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      StringReader stringReader0 = new StringReader("");
      assertNotNull(stringReader0);
      
      StringReader stringReader1 = new StringReader(">j=2>PH9yytXFz?/");
      assertNotNull(stringReader1);
      assertFalse(stringReader1.equals((Object)stringReader0));
      
      StringReader stringReader2 = new StringReader("SuFK[%.UpA)?y)LoAtU");
      assertNotNull(stringReader2);
      assertFalse(stringReader2.equals((Object)stringReader0));
      assertFalse(stringReader2.equals((Object)stringReader1));
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader2, 100, 22, 100);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertNotNull(javaCharStream0);
      assertFalse(stringReader2.equals((Object)stringReader0));
      assertFalse(stringReader2.equals((Object)stringReader1));
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertNotNull(javaParserTokenManager0);
      assertFalse(stringReader2.equals((Object)stringReader0));
      assertFalse(stringReader2.equals((Object)stringReader1));
      
      char char0 = javaCharStream0.BeginToken();
      assertEquals(0, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(22, javaCharStream0.getBeginColumn());
      assertEquals(22, javaCharStream0.getColumn());
      assertEquals(22, javaCharStream0.getEndColumn());
      assertEquals(100, javaCharStream0.getEndLine());
      assertEquals(100, javaCharStream0.getBeginLine());
      assertEquals(100, javaCharStream0.getLine());
      assertEquals('S', char0);
      assertNotSame(stringReader2, stringReader0);
      assertNotSame(stringReader2, stringReader1);
      assertFalse(stringReader2.equals((Object)stringReader0));
      assertFalse(stringReader2.equals((Object)stringReader1));
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertEquals(2, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(23, token0.beginColumn);
      assertEquals(74, token0.kind);
      assertEquals(100, token0.beginLine);
      assertEquals(100, token0.endLine);
      assertEquals(25, token0.endColumn);
      assertEquals(25, javaCharStream0.getColumn());
      assertEquals(23, javaCharStream0.getBeginColumn());
      assertEquals(100, javaCharStream0.getEndLine());
      assertEquals(100, javaCharStream0.getBeginLine());
      assertEquals(100, javaCharStream0.getLine());
      assertEquals(25, javaCharStream0.getEndColumn());
      assertEquals("uFK", token0.toString());
      assertNotSame(stringReader2, stringReader0);
      assertNotSame(stringReader2, stringReader1);
      assertNotNull(token0);
      assertFalse(stringReader2.equals((Object)stringReader0));
      assertFalse(stringReader2.equals((Object)stringReader1));
      
      javaParserTokenManager0.TokenLexicalActions(token0);
      assertEquals(2, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(23, token0.beginColumn);
      assertEquals(74, token0.kind);
      assertEquals(100, token0.beginLine);
      assertEquals(100, token0.endLine);
      assertEquals(25, token0.endColumn);
      assertEquals(25, javaCharStream0.getColumn());
      assertEquals(23, javaCharStream0.getBeginColumn());
      assertEquals(100, javaCharStream0.getEndLine());
      assertEquals(100, javaCharStream0.getBeginLine());
      assertEquals(100, javaCharStream0.getLine());
      assertEquals(25, javaCharStream0.getEndColumn());
      assertEquals("uFK", token0.toString());
      assertNotSame(stringReader2, stringReader0);
      assertNotSame(stringReader2, stringReader1);
      assertFalse(stringReader2.equals((Object)stringReader0));
      assertFalse(stringReader2.equals((Object)stringReader1));
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      PipedInputStream pipedInputStream0 = new PipedInputStream(57);
      assertEquals(0, pipedInputStream0.available());
      assertNotNull(pipedInputStream0);
      
      StringReader stringReader0 = new StringReader("=Qv&nCW`Vsfo[m");
      assertNotNull(stringReader0);
      
      int int0 = stringReader0.read();
      assertEquals(61, int0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, 1995, 2049);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertNotNull(javaCharStream0);
      
      JavaCharStream javaCharStream1 = new JavaCharStream(stringReader0, 33, 1356);
      assertEquals((-1), javaCharStream1.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream1.getBeginColumn());
      assertEquals(0, javaCharStream1.getBeginLine());
      assertNotNull(javaCharStream1);
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertNotNull(javaParserTokenManager0);
      assertFalse(javaCharStream0.equals((Object)javaCharStream1));
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertEquals(1, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(2049, token0.beginColumn);
      assertEquals(2050, token0.endColumn);
      assertEquals(74, token0.kind);
      assertEquals(1995, token0.beginLine);
      assertEquals(1995, token0.endLine);
      assertEquals(2050, javaCharStream0.getColumn());
      assertEquals(2050, javaCharStream0.getEndColumn());
      assertEquals(1995, javaCharStream0.getBeginLine());
      assertEquals(1995, javaCharStream0.getEndLine());
      assertEquals(1995, javaCharStream0.getLine());
      assertEquals(2049, javaCharStream0.getBeginColumn());
      assertEquals("Qv", token0.toString());
      assertNotSame(javaCharStream0, javaCharStream1);
      assertNotNull(token0);
      assertFalse(javaCharStream0.equals((Object)javaCharStream1));
      
      javaParserTokenManager0.TokenLexicalActions(token0);
      assertEquals(1, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(2049, token0.beginColumn);
      assertEquals(2050, token0.endColumn);
      assertEquals(74, token0.kind);
      assertEquals(1995, token0.beginLine);
      assertEquals(1995, token0.endLine);
      assertEquals(2050, javaCharStream0.getColumn());
      assertEquals(2050, javaCharStream0.getEndColumn());
      assertEquals(1995, javaCharStream0.getBeginLine());
      assertEquals(1995, javaCharStream0.getEndLine());
      assertEquals(1995, javaCharStream0.getLine());
      assertEquals(2049, javaCharStream0.getBeginColumn());
      assertEquals("Qv", token0.toString());
      assertNotSame(javaCharStream0, javaCharStream1);
      assertFalse(javaCharStream0.equals((Object)javaCharStream1));
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      PipedInputStream pipedInputStream0 = new PipedInputStream(57);
      assertEquals(0, pipedInputStream0.available());
      assertNotNull(pipedInputStream0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(pipedInputStream0, 57, 57);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, pipedInputStream0.available());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertNotNull(javaCharStream0);
      
      StringReader stringReader0 = new StringReader("Ld5B#%\"a4eD");
      assertNotNull(stringReader0);
      
      int int0 = stringReader0.read();
      assertEquals(76, int0);
      
      JavaCharStream javaCharStream1 = new JavaCharStream(stringReader0, 1454, 1356);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream1.bufpos);
      assertEquals(0, javaCharStream1.getBeginColumn());
      assertEquals(0, javaCharStream1.getBeginLine());
      assertNotNull(javaCharStream1);
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream1);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream1.bufpos);
      assertEquals(0, javaCharStream1.getBeginColumn());
      assertEquals(0, javaCharStream1.getBeginLine());
      assertNotNull(javaParserTokenManager0);
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(2, javaCharStream1.bufpos);
      assertEquals(74, token0.kind);
      assertEquals(1356, token0.beginColumn);
      assertEquals(1454, token0.endLine);
      assertEquals(1358, token0.endColumn);
      assertEquals(1454, token0.beginLine);
      assertEquals(1454, javaCharStream1.getBeginLine());
      assertEquals(1454, javaCharStream1.getEndLine());
      assertEquals(1356, javaCharStream1.getBeginColumn());
      assertEquals(1358, javaCharStream1.getColumn());
      assertEquals(1358, javaCharStream1.getEndColumn());
      assertEquals(1454, javaCharStream1.getLine());
      assertEquals("d5B", token0.toString());
      assertNotSame(javaCharStream1, javaCharStream0);
      assertNotNull(token0);
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      
      // Undeclared exception!
      try { 
        javaParserTokenManager0.getNextToken();
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Lexical error at line 1454, column 1359.  Encountered: \"#\" (35), after : \"\"
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      StringReader stringReader0 = new StringReader("Kf:q%yiN+,9<]Du");
      assertNotNull(stringReader0);
      
      StringReader stringReader1 = new StringReader("Kf:q%yiN+,9<]Du");
      assertNotNull(stringReader1);
      assertFalse(stringReader1.equals((Object)stringReader0));
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader1, 74, (-2748));
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertNotNull(javaCharStream0);
      assertFalse(stringReader1.equals((Object)stringReader0));
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertNotNull(javaParserTokenManager0);
      assertFalse(stringReader1.equals((Object)stringReader0));
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(1, javaCharStream0.bufpos);
      assertEquals((-2747), token0.endColumn);
      assertEquals(74, token0.endLine);
      assertEquals((-2748), token0.beginColumn);
      assertEquals(74, token0.kind);
      assertEquals(74, token0.beginLine);
      assertEquals((-2747), javaCharStream0.getEndColumn());
      assertEquals(74, javaCharStream0.getBeginLine());
      assertEquals((-2747), javaCharStream0.getColumn());
      assertEquals(74, javaCharStream0.getLine());
      assertEquals(74, javaCharStream0.getEndLine());
      assertEquals((-2748), javaCharStream0.getBeginColumn());
      assertEquals("Kf", token0.toString());
      assertNotSame(stringReader1, stringReader0);
      assertNotNull(token0);
      assertFalse(stringReader1.equals((Object)stringReader0));
      
      Token token1 = javaParserTokenManager0.getNextToken();
      assertEquals(2, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-2746), token1.endColumn);
      assertEquals(92, token1.kind);
      assertEquals(74, token1.endLine);
      assertEquals(74, token1.beginLine);
      assertEquals((-2746), token1.beginColumn);
      assertEquals((-2746), javaCharStream0.getEndColumn());
      assertEquals((-2746), javaCharStream0.getColumn());
      assertEquals(74, javaCharStream0.getBeginLine());
      assertEquals(74, javaCharStream0.getLine());
      assertEquals(74, javaCharStream0.getEndLine());
      assertEquals((-2746), javaCharStream0.getBeginColumn());
      assertEquals(":", token1.toString());
      assertNotSame(stringReader1, stringReader0);
      assertNotSame(token1, token0);
      assertNotNull(token1);
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertFalse(token1.equals((Object)token0));
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      StringReader stringReader0 = new StringReader("FoFqL*&l!43Zy");
      assertNotNull(stringReader0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, (-105), (-105));
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertNotNull(javaCharStream0);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertNotNull(javaParserTokenManager0);
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(4, javaCharStream0.bufpos);
      assertEquals((-101), token0.endColumn);
      assertEquals(74, token0.kind);
      assertEquals((-105), token0.beginColumn);
      assertEquals((-105), token0.beginLine);
      assertEquals((-105), token0.endLine);
      assertEquals((-105), javaCharStream0.getEndLine());
      assertEquals((-101), javaCharStream0.getEndColumn());
      assertEquals((-105), javaCharStream0.getLine());
      assertEquals((-101), javaCharStream0.getColumn());
      assertEquals((-105), javaCharStream0.getBeginColumn());
      assertEquals((-105), javaCharStream0.getBeginLine());
      assertEquals("FoFqL", token0.toString());
      assertNotNull(token0);
      
      javaParserTokenManager0.MoreLexicalActions();
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(4, javaCharStream0.bufpos);
      assertEquals((-105), javaCharStream0.getEndLine());
      assertEquals((-101), javaCharStream0.getEndColumn());
      assertEquals((-105), javaCharStream0.getLine());
      assertEquals((-101), javaCharStream0.getColumn());
      assertEquals((-105), javaCharStream0.getBeginColumn());
      assertEquals((-105), javaCharStream0.getBeginLine());
      
      Token token1 = javaParserTokenManager0.getNextToken();
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(5, javaCharStream0.bufpos);
      assertEquals((-105), token1.beginLine);
      assertEquals(103, token1.kind);
      assertEquals((-100), token1.endColumn);
      assertEquals((-100), token1.beginColumn);
      assertEquals((-105), token1.endLine);
      assertEquals((-105), javaCharStream0.getEndLine());
      assertEquals((-100), javaCharStream0.getColumn());
      assertEquals((-105), javaCharStream0.getLine());
      assertEquals((-100), javaCharStream0.getBeginColumn());
      assertEquals((-105), javaCharStream0.getBeginLine());
      assertEquals((-100), javaCharStream0.getEndColumn());
      assertEquals("*", token1.toString());
      assertNotSame(token1, token0);
      assertNotNull(token1);
      assertFalse(token1.equals((Object)token0));
      
      Token token2 = javaParserTokenManager0.getNextToken();
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(6, javaCharStream0.bufpos);
      assertEquals(105, token2.kind);
      assertEquals((-105), token2.beginLine);
      assertEquals((-99), token2.endColumn);
      assertEquals((-105), token2.endLine);
      assertEquals((-99), token2.beginColumn);
      assertEquals((-105), javaCharStream0.getEndLine());
      assertEquals((-99), javaCharStream0.getBeginColumn());
      assertEquals((-105), javaCharStream0.getLine());
      assertEquals((-105), javaCharStream0.getBeginLine());
      assertEquals((-99), javaCharStream0.getColumn());
      assertEquals((-99), javaCharStream0.getEndColumn());
      assertEquals("&", token2.toString());
      assertNotSame(token2, token1);
      assertNotSame(token2, token0);
      assertNotNull(token2);
      assertFalse(token2.equals((Object)token1));
      assertFalse(token2.equals((Object)token0));
      
      javaParserTokenManager0.MoreLexicalActions();
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(6, javaCharStream0.bufpos);
      assertEquals((-105), javaCharStream0.getEndLine());
      assertEquals((-99), javaCharStream0.getBeginColumn());
      assertEquals((-105), javaCharStream0.getLine());
      assertEquals((-105), javaCharStream0.getBeginLine());
      assertEquals((-99), javaCharStream0.getColumn());
      assertEquals((-99), javaCharStream0.getEndColumn());
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      StringReader stringReader0 = new StringReader("");
      assertNotNull(stringReader0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, 61, 0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertNotNull(javaCharStream0);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertNotNull(javaParserTokenManager0);
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertEquals(0, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(61, token0.endLine);
      assertEquals((-1), token0.beginColumn);
      assertEquals(0, token0.kind);
      assertEquals((-1), token0.endColumn);
      assertEquals(61, token0.beginLine);
      assertEquals(61, javaCharStream0.getBeginLine());
      assertEquals(61, javaCharStream0.getEndLine());
      assertEquals(61, javaCharStream0.getLine());
      assertEquals((-1), javaCharStream0.getBeginColumn());
      assertEquals((-1), javaCharStream0.getColumn());
      assertEquals((-1), javaCharStream0.getEndColumn());
      assertEquals("", token0.toString());
      assertNotNull(token0);
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      StringReader stringReader0 = new StringReader("Kf:q%yiN+,9<]Du");
      assertNotNull(stringReader0);
      
      boolean boolean0 = FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, false);
      assertFalse(boolean0);
      
      StringReader stringReader1 = new StringReader(";y*]LoGS'");
      assertNotNull(stringReader1);
      assertFalse(stringReader1.equals((Object)stringReader0));
      
      StringReader stringReader2 = new StringReader("Kf:q%yiN+,9<]Du");
      assertNotNull(stringReader2);
      assertFalse(stringReader2.equals((Object)stringReader0));
      assertFalse(stringReader2.equals((Object)stringReader1));
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader2, 57, 57);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertNotNull(javaCharStream0);
      assertFalse(stringReader2.equals((Object)stringReader0));
      assertFalse(stringReader2.equals((Object)stringReader1));
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertNotNull(javaParserTokenManager0);
      assertFalse(stringReader2.equals((Object)stringReader0));
      assertFalse(stringReader2.equals((Object)stringReader1));
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertEquals(1, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(57, token0.endLine);
      assertEquals(58, token0.endColumn);
      assertEquals(57, token0.beginLine);
      assertEquals(74, token0.kind);
      assertEquals(57, token0.beginColumn);
      assertEquals(57, javaCharStream0.getLine());
      assertEquals(58, javaCharStream0.getEndColumn());
      assertEquals(57, javaCharStream0.getBeginLine());
      assertEquals(57, javaCharStream0.getEndLine());
      assertEquals(57, javaCharStream0.getBeginColumn());
      assertEquals(58, javaCharStream0.getColumn());
      assertEquals("Kf", token0.toString());
      assertNotSame(stringReader2, stringReader0);
      assertNotSame(stringReader2, stringReader1);
      assertNotNull(token0);
      assertFalse(stringReader2.equals((Object)stringReader0));
      assertFalse(stringReader2.equals((Object)stringReader1));
      
      javaParserTokenManager0.TokenLexicalActions(token0);
      assertEquals(1, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(57, token0.endLine);
      assertEquals(58, token0.endColumn);
      assertEquals(57, token0.beginLine);
      assertEquals(74, token0.kind);
      assertEquals(57, token0.beginColumn);
      assertEquals(57, javaCharStream0.getLine());
      assertEquals(58, javaCharStream0.getEndColumn());
      assertEquals(57, javaCharStream0.getBeginLine());
      assertEquals(57, javaCharStream0.getEndLine());
      assertEquals(57, javaCharStream0.getBeginColumn());
      assertEquals(58, javaCharStream0.getColumn());
      assertEquals("Kf", token0.toString());
      assertNotSame(stringReader2, stringReader0);
      assertNotSame(stringReader2, stringReader1);
      assertFalse(stringReader2.equals((Object)stringReader0));
      assertFalse(stringReader2.equals((Object)stringReader1));
      
      Token token1 = javaParserTokenManager0.getNextToken();
      assertEquals(2, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(59, token1.beginColumn);
      assertEquals(59, token1.endColumn);
      assertEquals(57, token1.endLine);
      assertEquals(57, token1.beginLine);
      assertEquals(92, token1.kind);
      assertEquals(57, javaCharStream0.getLine());
      assertEquals(57, javaCharStream0.getBeginLine());
      assertEquals(57, javaCharStream0.getEndLine());
      assertEquals(59, javaCharStream0.getEndColumn());
      assertEquals(59, javaCharStream0.getBeginColumn());
      assertEquals(59, javaCharStream0.getColumn());
      assertEquals(":", token1.toString());
      assertNotSame(stringReader2, stringReader0);
      assertNotSame(stringReader2, stringReader1);
      assertNotSame(token1, token0);
      assertNotNull(token1);
      assertFalse(stringReader2.equals((Object)stringReader0));
      assertFalse(stringReader2.equals((Object)stringReader1));
      assertFalse(token1.equals((Object)token0));
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      assertFalse(fileDescriptor0.valid());
      assertNotNull(fileDescriptor0);
      
      StringReader stringReader0 = new StringReader("@LiTWMI8");
      assertNotNull(stringReader0);
      
      StringReader stringReader1 = new StringReader("DnuFy!Hi!y3");
      assertNotNull(stringReader1);
      assertFalse(stringReader1.equals((Object)stringReader0));
      
      int int0 = stringReader1.read();
      assertEquals(68, int0);
      assertNotSame(stringReader1, stringReader0);
      assertFalse(stringReader1.equals((Object)stringReader0));
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, 68, 68);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertNotNull(javaCharStream0);
      assertFalse(stringReader0.equals((Object)stringReader1));
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertNotNull(javaParserTokenManager0);
      assertFalse(stringReader0.equals((Object)stringReader1));
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.bufpos);
      assertEquals(86, token0.kind);
      assertEquals(68, token0.beginColumn);
      assertEquals(68, token0.beginLine);
      assertEquals(68, token0.endLine);
      assertEquals(68, token0.endColumn);
      assertEquals(68, javaCharStream0.getEndColumn());
      assertEquals(68, javaCharStream0.getLine());
      assertEquals(68, javaCharStream0.getBeginColumn());
      assertEquals(68, javaCharStream0.getEndLine());
      assertEquals(68, javaCharStream0.getColumn());
      assertEquals(68, javaCharStream0.getBeginLine());
      assertEquals("@", token0.toString());
      assertNotSame(stringReader0, stringReader1);
      assertNotNull(token0);
      assertFalse(stringReader0.equals((Object)stringReader1));
      
      JavaParserTokenManager javaParserTokenManager1 = new JavaParserTokenManager(javaCharStream0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.bufpos);
      assertEquals(68, javaCharStream0.getEndColumn());
      assertEquals(68, javaCharStream0.getLine());
      assertEquals(68, javaCharStream0.getBeginColumn());
      assertEquals(68, javaCharStream0.getEndLine());
      assertEquals(68, javaCharStream0.getColumn());
      assertEquals(68, javaCharStream0.getBeginLine());
      assertNotNull(javaParserTokenManager1);
      assertFalse(stringReader0.equals((Object)stringReader1));
      assertFalse(javaParserTokenManager1.equals((Object)javaParserTokenManager0));
      
      Token token1 = javaParserTokenManager0.getNextToken();
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(6, javaCharStream0.bufpos);
      assertEquals(74, token1.kind);
      assertEquals(75, token1.endColumn);
      assertEquals(68, token1.beginLine);
      assertEquals(68, token1.endLine);
      assertEquals(69, token1.beginColumn);
      assertEquals(69, javaCharStream0.getBeginColumn());
      assertEquals(68, javaCharStream0.getLine());
      assertEquals(68, javaCharStream0.getEndLine());
      assertEquals(75, javaCharStream0.getEndColumn());
      assertEquals(68, javaCharStream0.getBeginLine());
      assertEquals(75, javaCharStream0.getColumn());
      assertEquals("LiTWMI8", token1.toString());
      assertNotSame(stringReader0, stringReader1);
      assertNotSame(javaParserTokenManager0, javaParserTokenManager1);
      assertNotSame(token1, token0);
      assertNotNull(token1);
      assertFalse(stringReader0.equals((Object)stringReader1));
      assertFalse(javaParserTokenManager0.equals((Object)javaParserTokenManager1));
      assertFalse(token1.equals((Object)token0));
      
      Token token2 = javaParserTokenManager1.getNextToken();
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.bufpos);
      assertEquals(68, token2.beginLine);
      assertEquals(0, token2.kind);
      assertEquals(75, token2.endColumn);
      assertEquals(68, token2.endLine);
      assertEquals(75, token2.beginColumn);
      assertEquals(68, javaCharStream0.getLine());
      assertEquals(68, javaCharStream0.getEndLine());
      assertEquals(75, javaCharStream0.getEndColumn());
      assertEquals(68, javaCharStream0.getBeginLine());
      assertEquals(75, javaCharStream0.getBeginColumn());
      assertEquals(75, javaCharStream0.getColumn());
      assertEquals("", token2.toString());
      assertNotSame(stringReader0, stringReader1);
      assertNotSame(javaParserTokenManager1, javaParserTokenManager0);
      assertNotSame(token2, token1);
      assertNotSame(token2, token0);
      assertNotNull(token2);
      assertFalse(stringReader0.equals((Object)stringReader1));
      assertFalse(javaParserTokenManager1.equals((Object)javaParserTokenManager0));
      assertFalse(token2.equals((Object)token1));
      assertFalse(token2.equals((Object)token0));
      
      javaParserTokenManager1.MoreLexicalActions();
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.bufpos);
      assertEquals(68, javaCharStream0.getLine());
      assertEquals(68, javaCharStream0.getEndLine());
      assertEquals(75, javaCharStream0.getEndColumn());
      assertEquals(68, javaCharStream0.getBeginLine());
      assertEquals(75, javaCharStream0.getBeginColumn());
      assertEquals(75, javaCharStream0.getColumn());
      assertNotSame(stringReader0, stringReader1);
      assertNotSame(javaParserTokenManager1, javaParserTokenManager0);
      assertFalse(stringReader0.equals((Object)stringReader1));
      assertFalse(javaParserTokenManager1.equals((Object)javaParserTokenManager0));
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      Enumeration<InputStream> enumeration0 = (Enumeration<InputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(enumeration0).hasMoreElements();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      assertNotNull(sequenceInputStream0);
      
      StringReader stringReader0 = new StringReader("SuFK[%.UpA)?y)LoAtU");
      assertNotNull(stringReader0);
      
      StringReader stringReader1 = new StringReader("");
      assertNotNull(stringReader1);
      assertFalse(stringReader1.equals((Object)stringReader0));
      
      StringReader stringReader2 = new StringReader("SuFK[%.UpA)?y)LoAtU");
      assertNotNull(stringReader2);
      assertFalse(stringReader2.equals((Object)stringReader1));
      assertFalse(stringReader2.equals((Object)stringReader0));
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader2, 43, 18);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertNotNull(javaCharStream0);
      assertFalse(stringReader2.equals((Object)stringReader1));
      assertFalse(stringReader2.equals((Object)stringReader0));
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertNotNull(javaParserTokenManager0);
      assertFalse(stringReader2.equals((Object)stringReader1));
      assertFalse(stringReader2.equals((Object)stringReader0));
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertEquals(3, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(18, token0.beginColumn);
      assertEquals(43, token0.beginLine);
      assertEquals(74, token0.kind);
      assertEquals(21, token0.endColumn);
      assertEquals(43, token0.endLine);
      assertEquals(21, javaCharStream0.getColumn());
      assertEquals(43, javaCharStream0.getEndLine());
      assertEquals(21, javaCharStream0.getEndColumn());
      assertEquals(18, javaCharStream0.getBeginColumn());
      assertEquals(43, javaCharStream0.getBeginLine());
      assertEquals(43, javaCharStream0.getLine());
      assertEquals("SuFK", token0.toString());
      assertNotSame(stringReader2, stringReader1);
      assertNotSame(stringReader2, stringReader0);
      assertNotNull(token0);
      assertFalse(stringReader2.equals((Object)stringReader1));
      assertFalse(stringReader2.equals((Object)stringReader0));
      
      Token token1 = javaParserTokenManager0.getNextToken();
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(4, javaCharStream0.bufpos);
      assertEquals(22, token1.beginColumn);
      assertEquals(22, token1.endColumn);
      assertEquals(43, token1.beginLine);
      assertEquals(43, token1.endLine);
      assertEquals(81, token1.kind);
      assertEquals(22, javaCharStream0.getBeginColumn());
      assertEquals(22, javaCharStream0.getEndColumn());
      assertEquals(43, javaCharStream0.getEndLine());
      assertEquals(22, javaCharStream0.getColumn());
      assertEquals(43, javaCharStream0.getBeginLine());
      assertEquals(43, javaCharStream0.getLine());
      assertEquals("[", token1.toString());
      assertNotSame(stringReader2, stringReader1);
      assertNotSame(stringReader2, stringReader0);
      assertNotSame(token1, token0);
      assertNotNull(token1);
      assertFalse(stringReader2.equals((Object)stringReader1));
      assertFalse(stringReader2.equals((Object)stringReader0));
      assertFalse(token1.equals((Object)token0));
      
      Token token2 = javaParserTokenManager0.getNextToken();
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.bufpos);
      assertEquals(108, token2.kind);
      assertEquals(43, token2.beginLine);
      assertEquals(23, token2.endColumn);
      assertEquals(23, token2.beginColumn);
      assertEquals(43, token2.endLine);
      assertEquals(23, javaCharStream0.getEndColumn());
      assertEquals(23, javaCharStream0.getBeginColumn());
      assertEquals(43, javaCharStream0.getEndLine());
      assertEquals(43, javaCharStream0.getBeginLine());
      assertEquals(23, javaCharStream0.getColumn());
      assertEquals(43, javaCharStream0.getLine());
      assertEquals("%", token2.toString());
      assertNotSame(stringReader2, stringReader1);
      assertNotSame(stringReader2, stringReader0);
      assertNotSame(token2, token0);
      assertNotSame(token2, token1);
      assertNotNull(token2);
      assertFalse(stringReader2.equals((Object)stringReader1));
      assertFalse(stringReader2.equals((Object)stringReader0));
      assertFalse(token2.equals((Object)token0));
      assertFalse(token2.equals((Object)token1));
      
      Token token3 = javaParserTokenManager0.jjFillToken();
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.bufpos);
      assertEquals(108, token3.kind);
      assertEquals(43, token3.beginLine);
      assertEquals(23, token3.endColumn);
      assertEquals(23, token3.beginColumn);
      assertEquals(43, token3.endLine);
      assertEquals(23, javaCharStream0.getEndColumn());
      assertEquals(23, javaCharStream0.getBeginColumn());
      assertEquals(43, javaCharStream0.getEndLine());
      assertEquals(43, javaCharStream0.getBeginLine());
      assertEquals(23, javaCharStream0.getColumn());
      assertEquals(43, javaCharStream0.getLine());
      assertEquals("%", token3.toString());
      assertNotSame(stringReader2, stringReader1);
      assertNotSame(stringReader2, stringReader0);
      assertNotSame(token3, token0);
      assertNotSame(token3, token2);
      assertNotSame(token3, token1);
      assertNotNull(token3);
      assertFalse(stringReader2.equals((Object)stringReader1));
      assertFalse(stringReader2.equals((Object)stringReader0));
      assertFalse(token3.equals((Object)token0));
      assertFalse(token3.equals((Object)token2));
      assertFalse(token3.equals((Object)token1));
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      StringReader stringReader0 = new StringReader("FoFqL*&l!43Zy");
      assertNotNull(stringReader0);
      
      int int0 = stringReader0.read();
      assertEquals(70, int0);
      
      StringReader stringReader1 = new StringReader("FoFqL*&l!43Zy");
      assertNotNull(stringReader1);
      assertFalse(stringReader1.equals((Object)stringReader0));
      
      StringReader stringReader2 = new StringReader("FoFqL*&l!43Zy");
      assertNotNull(stringReader2);
      assertFalse(stringReader2.equals((Object)stringReader0));
      assertFalse(stringReader2.equals((Object)stringReader1));
      
      int int1 = stringReader2.read();
      assertEquals(70, int1);
      assertNotSame(stringReader2, stringReader0);
      assertNotSame(stringReader2, stringReader1);
      assertFalse(stringReader2.equals((Object)stringReader0));
      assertFalse(stringReader2.equals((Object)stringReader1));
      assertTrue(int1 == int0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader2, (-4379), (-4379));
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertNotNull(javaCharStream0);
      assertFalse(stringReader2.equals((Object)stringReader0));
      assertFalse(stringReader2.equals((Object)stringReader1));
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertNotNull(javaParserTokenManager0);
      assertFalse(stringReader2.equals((Object)stringReader0));
      assertFalse(stringReader2.equals((Object)stringReader1));
      
      boolean boolean0 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "S2dO");
      assertFalse(boolean0);
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(3, javaCharStream0.bufpos);
      assertEquals((-4379), token0.endLine);
      assertEquals((-4379), token0.beginLine);
      assertEquals((-4379), token0.beginColumn);
      assertEquals(74, token0.kind);
      assertEquals((-4376), token0.endColumn);
      assertEquals((-4376), javaCharStream0.getColumn());
      assertEquals((-4376), javaCharStream0.getEndColumn());
      assertEquals((-4379), javaCharStream0.getEndLine());
      assertEquals((-4379), javaCharStream0.getBeginColumn());
      assertEquals((-4379), javaCharStream0.getBeginLine());
      assertEquals((-4379), javaCharStream0.getLine());
      assertEquals("oFqL", token0.toString());
      assertNotSame(stringReader2, stringReader0);
      assertNotSame(stringReader2, stringReader1);
      assertNotNull(token0);
      assertFalse(stringReader2.equals((Object)stringReader0));
      assertFalse(stringReader2.equals((Object)stringReader1));
      
      javaParserTokenManager0.MoreLexicalActions();
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(3, javaCharStream0.bufpos);
      assertEquals((-4376), javaCharStream0.getColumn());
      assertEquals((-4376), javaCharStream0.getEndColumn());
      assertEquals((-4379), javaCharStream0.getEndLine());
      assertEquals((-4379), javaCharStream0.getBeginColumn());
      assertEquals((-4379), javaCharStream0.getBeginLine());
      assertEquals((-4379), javaCharStream0.getLine());
      assertNotSame(stringReader2, stringReader0);
      assertNotSame(stringReader2, stringReader1);
      assertFalse(stringReader2.equals((Object)stringReader0));
      assertFalse(stringReader2.equals((Object)stringReader1));
      
      JavaParserTokenManager javaParserTokenManager1 = new JavaParserTokenManager(javaCharStream0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(3, javaCharStream0.bufpos);
      assertEquals((-4376), javaCharStream0.getColumn());
      assertEquals((-4376), javaCharStream0.getEndColumn());
      assertEquals((-4379), javaCharStream0.getEndLine());
      assertEquals((-4379), javaCharStream0.getBeginColumn());
      assertEquals((-4379), javaCharStream0.getBeginLine());
      assertEquals((-4379), javaCharStream0.getLine());
      assertNotNull(javaParserTokenManager1);
      assertFalse(stringReader2.equals((Object)stringReader0));
      assertFalse(stringReader2.equals((Object)stringReader1));
      assertFalse(javaParserTokenManager1.equals((Object)javaParserTokenManager0));
      
      Token token1 = javaParserTokenManager0.getNextToken();
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(4, javaCharStream0.bufpos);
      assertEquals((-4379), token1.endLine);
      assertEquals((-4379), token1.beginLine);
      assertEquals((-4375), token1.endColumn);
      assertEquals(103, token1.kind);
      assertEquals((-4375), token1.beginColumn);
      assertEquals((-4375), javaCharStream0.getBeginColumn());
      assertEquals((-4375), javaCharStream0.getColumn());
      assertEquals((-4379), javaCharStream0.getEndLine());
      assertEquals((-4375), javaCharStream0.getEndColumn());
      assertEquals((-4379), javaCharStream0.getBeginLine());
      assertEquals((-4379), javaCharStream0.getLine());
      assertEquals("*", token1.toString());
      assertNotSame(stringReader2, stringReader0);
      assertNotSame(stringReader2, stringReader1);
      assertNotSame(javaParserTokenManager0, javaParserTokenManager1);
      assertNotSame(token1, token0);
      assertNotNull(token1);
      assertFalse(stringReader2.equals((Object)stringReader0));
      assertFalse(stringReader2.equals((Object)stringReader1));
      assertFalse(javaParserTokenManager0.equals((Object)javaParserTokenManager1));
      assertFalse(token1.equals((Object)token0));
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      assertFalse(fileDescriptor0.valid());
      assertNotNull(fileDescriptor0);
      
      StringReader stringReader0 = new StringReader("aUYO[&skX?G2og");
      assertNotNull(stringReader0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, 34, 34, 34);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertNotNull(javaCharStream0);
      
      JavaCharStream javaCharStream1 = new JavaCharStream(stringReader0, 0, (-1), 34);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream1.bufpos);
      assertEquals(0, javaCharStream1.getBeginLine());
      assertEquals(0, javaCharStream1.getBeginColumn());
      assertNotNull(javaCharStream1);
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream1);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream1.bufpos);
      assertEquals(0, javaCharStream1.getBeginLine());
      assertEquals(0, javaCharStream1.getBeginColumn());
      assertNotNull(javaParserTokenManager0);
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(3, javaCharStream1.bufpos);
      assertEquals(2, token0.endColumn);
      assertEquals(74, token0.kind);
      assertEquals(0, token0.beginLine);
      assertEquals(0, token0.endLine);
      assertEquals((-1), token0.beginColumn);
      assertEquals(0, javaCharStream1.getBeginLine());
      assertEquals(0, javaCharStream1.getEndLine());
      assertEquals(2, javaCharStream1.getEndColumn());
      assertEquals(2, javaCharStream1.getColumn());
      assertEquals((-1), javaCharStream1.getBeginColumn());
      assertEquals(0, javaCharStream1.getLine());
      assertEquals("aUYO", token0.toString());
      assertNotSame(javaCharStream1, javaCharStream0);
      assertNotNull(token0);
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      
      javaParserTokenManager0.TokenLexicalActions(token0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(3, javaCharStream1.bufpos);
      assertEquals(2, token0.endColumn);
      assertEquals(74, token0.kind);
      assertEquals(0, token0.beginLine);
      assertEquals(0, token0.endLine);
      assertEquals((-1), token0.beginColumn);
      assertEquals(0, javaCharStream1.getBeginLine());
      assertEquals(0, javaCharStream1.getEndLine());
      assertEquals(2, javaCharStream1.getEndColumn());
      assertEquals(2, javaCharStream1.getColumn());
      assertEquals((-1), javaCharStream1.getBeginColumn());
      assertEquals(0, javaCharStream1.getLine());
      assertEquals("aUYO", token0.toString());
      assertNotSame(javaCharStream1, javaCharStream0);
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      StringReader stringReader0 = new StringReader("dnZoRZC.$[%%@b!UT");
      assertNotNull(stringReader0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, 41, (-1672), 122);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertNotNull(javaCharStream0);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertNotNull(javaParserTokenManager0);
      
      JavaParserTokenManager javaParserTokenManager1 = new JavaParserTokenManager(javaCharStream0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertNotNull(javaParserTokenManager1);
      assertFalse(javaParserTokenManager1.equals((Object)javaParserTokenManager0));
      
      Token token0 = javaParserTokenManager1.getNextToken();
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(6, javaCharStream0.bufpos);
      assertEquals((-1666), token0.endColumn);
      assertEquals(74, token0.kind);
      assertEquals(41, token0.beginLine);
      assertEquals((-1672), token0.beginColumn);
      assertEquals(41, token0.endLine);
      assertEquals(41, javaCharStream0.getBeginLine());
      assertEquals((-1666), javaCharStream0.getColumn());
      assertEquals(41, javaCharStream0.getLine());
      assertEquals((-1672), javaCharStream0.getBeginColumn());
      assertEquals(41, javaCharStream0.getEndLine());
      assertEquals((-1666), javaCharStream0.getEndColumn());
      assertEquals("dnZoRZC", token0.toString());
      assertNotSame(javaParserTokenManager1, javaParserTokenManager0);
      assertNotNull(token0);
      assertFalse(javaParserTokenManager1.equals((Object)javaParserTokenManager0));
      
      javaParserTokenManager1.MoreLexicalActions();
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(6, javaCharStream0.bufpos);
      assertEquals(41, javaCharStream0.getBeginLine());
      assertEquals((-1666), javaCharStream0.getColumn());
      assertEquals(41, javaCharStream0.getLine());
      assertEquals((-1672), javaCharStream0.getBeginColumn());
      assertEquals(41, javaCharStream0.getEndLine());
      assertEquals((-1666), javaCharStream0.getEndColumn());
      assertNotSame(javaParserTokenManager1, javaParserTokenManager0);
      assertFalse(javaParserTokenManager1.equals((Object)javaParserTokenManager0));
      
      javaParserTokenManager1.MoreLexicalActions();
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(6, javaCharStream0.bufpos);
      assertEquals(41, javaCharStream0.getBeginLine());
      assertEquals((-1666), javaCharStream0.getColumn());
      assertEquals(41, javaCharStream0.getLine());
      assertEquals((-1672), javaCharStream0.getBeginColumn());
      assertEquals(41, javaCharStream0.getEndLine());
      assertEquals((-1666), javaCharStream0.getEndColumn());
      assertNotSame(javaParserTokenManager1, javaParserTokenManager0);
      assertFalse(javaParserTokenManager1.equals((Object)javaParserTokenManager0));
      
      Token token1 = javaParserTokenManager1.getNextToken();
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(7, javaCharStream0.bufpos);
      assertEquals((-1665), token1.beginColumn);
      assertEquals(41, token1.endLine);
      assertEquals(41, token1.beginLine);
      assertEquals(85, token1.kind);
      assertEquals((-1665), token1.endColumn);
      assertEquals(41, javaCharStream0.getBeginLine());
      assertEquals((-1665), javaCharStream0.getBeginColumn());
      assertEquals((-1665), javaCharStream0.getColumn());
      assertEquals(41, javaCharStream0.getLine());
      assertEquals(41, javaCharStream0.getEndLine());
      assertEquals((-1665), javaCharStream0.getEndColumn());
      assertEquals(".", token1.toString());
      assertNotSame(javaParserTokenManager1, javaParserTokenManager0);
      assertNotSame(token1, token0);
      assertNotNull(token1);
      assertFalse(javaParserTokenManager1.equals((Object)javaParserTokenManager0));
      assertFalse(token1.equals((Object)token0));
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      assertFalse(fileDescriptor0.valid());
      assertNotNull(fileDescriptor0);
      
      StringReader stringReader0 = new StringReader(")aM,OLx4fAX jD0.");
      assertNotNull(stringReader0);
      
      boolean boolean0 = FileSystemHandling.setPermissions((EvoSuiteFile) null, true, false, false);
      assertFalse(boolean0);
      
      StringReader stringReader1 = new StringReader(")aM,OLx4fAX jD0.");
      assertNotNull(stringReader1);
      assertFalse(stringReader1.equals((Object)stringReader0));
      
      StringReader stringReader2 = new StringReader(";y*]LoGS'");
      assertNotNull(stringReader2);
      assertFalse(stringReader2.equals((Object)stringReader0));
      assertFalse(stringReader2.equals((Object)stringReader1));
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader1, (-577), (-577));
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertNotNull(javaCharStream0);
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertFalse(stringReader1.equals((Object)stringReader2));
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertNotNull(javaParserTokenManager0);
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertFalse(stringReader1.equals((Object)stringReader2));
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.bufpos);
      assertEquals(78, token0.kind);
      assertEquals((-577), token0.endLine);
      assertEquals((-577), token0.beginColumn);
      assertEquals((-577), token0.endColumn);
      assertEquals((-577), token0.beginLine);
      assertEquals((-577), javaCharStream0.getBeginLine());
      assertEquals((-577), javaCharStream0.getEndColumn());
      assertEquals((-577), javaCharStream0.getBeginColumn());
      assertEquals((-577), javaCharStream0.getColumn());
      assertEquals((-577), javaCharStream0.getLine());
      assertEquals((-577), javaCharStream0.getEndLine());
      assertEquals(")", token0.toString());
      assertNotSame(stringReader1, stringReader0);
      assertNotSame(stringReader1, stringReader2);
      assertNotNull(token0);
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertFalse(stringReader1.equals((Object)stringReader2));
      
      Token token1 = javaParserTokenManager0.getNextToken();
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.bufpos);
      assertEquals(74, token1.kind);
      assertEquals((-577), token1.beginLine);
      assertEquals((-576), token1.beginColumn);
      assertEquals((-577), token1.endLine);
      assertEquals((-576), token1.endColumn);
      assertEquals((-577), javaCharStream0.getBeginLine());
      assertEquals((-576), javaCharStream0.getEndColumn());
      assertEquals((-576), javaCharStream0.getBeginColumn());
      assertEquals((-577), javaCharStream0.getLine());
      assertEquals((-577), javaCharStream0.getEndLine());
      assertEquals((-576), javaCharStream0.getColumn());
      assertEquals("a", token1.toString());
      assertNotSame(stringReader1, stringReader0);
      assertNotSame(stringReader1, stringReader2);
      assertNotSame(token1, token0);
      assertNotNull(token1);
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertFalse(stringReader1.equals((Object)stringReader2));
      assertFalse(token1.equals((Object)token0));
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      assertFalse(fileDescriptor0.valid());
      assertNotNull(fileDescriptor0);
      
      StringReader stringReader0 = new StringReader("");
      assertNotNull(stringReader0);
      
      StringReader stringReader1 = new StringReader("com.soops.CEN4010.JMCA.JParser.TokenMgrError");
      assertNotNull(stringReader1);
      assertFalse(stringReader1.equals((Object)stringReader0));
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader1, 2288, 80, 80);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertNotNull(javaCharStream0);
      assertFalse(stringReader1.equals((Object)stringReader0));
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertNotNull(javaParserTokenManager0);
      assertFalse(stringReader1.equals((Object)stringReader0));
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(2, javaCharStream0.bufpos);
      assertEquals(2288, token0.endLine);
      assertEquals(80, token0.beginColumn);
      assertEquals(2288, token0.beginLine);
      assertEquals(82, token0.endColumn);
      assertEquals(74, token0.kind);
      assertEquals(80, javaCharStream0.getBeginColumn());
      assertEquals(82, javaCharStream0.getColumn());
      assertEquals(2288, javaCharStream0.getEndLine());
      assertEquals(82, javaCharStream0.getEndColumn());
      assertEquals(2288, javaCharStream0.getLine());
      assertEquals(2288, javaCharStream0.getBeginLine());
      assertEquals("com", token0.toString());
      assertNotSame(stringReader1, stringReader0);
      assertNotNull(token0);
      assertFalse(stringReader1.equals((Object)stringReader0));
      
      Token token1 = javaParserTokenManager0.getNextToken();
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(3, javaCharStream0.bufpos);
      assertEquals(85, token1.kind);
      assertEquals(83, token1.beginColumn);
      assertEquals(2288, token1.endLine);
      assertEquals(83, token1.endColumn);
      assertEquals(2288, token1.beginLine);
      assertEquals(83, javaCharStream0.getColumn());
      assertEquals(2288, javaCharStream0.getEndLine());
      assertEquals(83, javaCharStream0.getEndColumn());
      assertEquals(83, javaCharStream0.getBeginColumn());
      assertEquals(2288, javaCharStream0.getLine());
      assertEquals(2288, javaCharStream0.getBeginLine());
      assertEquals(".", token1.toString());
      assertNotSame(stringReader1, stringReader0);
      assertNotSame(token1, token0);
      assertNotNull(token1);
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertFalse(token1.equals((Object)token0));
      
      Token token2 = javaParserTokenManager0.getNextToken();
      assertEquals(8, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(84, token2.beginColumn);
      assertEquals(2288, token2.beginLine);
      assertEquals(88, token2.endColumn);
      assertEquals(74, token2.kind);
      assertEquals(2288, token2.endLine);
      assertEquals(2288, javaCharStream0.getEndLine());
      assertEquals(88, javaCharStream0.getEndColumn());
      assertEquals(84, javaCharStream0.getBeginColumn());
      assertEquals(2288, javaCharStream0.getLine());
      assertEquals(2288, javaCharStream0.getBeginLine());
      assertEquals(88, javaCharStream0.getColumn());
      assertEquals("soops", token2.toString());
      assertNotSame(stringReader1, stringReader0);
      assertNotSame(token2, token1);
      assertNotSame(token2, token0);
      assertNotNull(token2);
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertFalse(token2.equals((Object)token1));
      assertFalse(token2.equals((Object)token0));
      
      Token token3 = javaParserTokenManager0.getNextToken();
      assertEquals(9, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(89, token3.beginColumn);
      assertEquals(89, token3.endColumn);
      assertEquals(2288, token3.beginLine);
      assertEquals(2288, token3.endLine);
      assertEquals(85, token3.kind);
      assertEquals(2288, javaCharStream0.getEndLine());
      assertEquals(89, javaCharStream0.getEndColumn());
      assertEquals(89, javaCharStream0.getBeginColumn());
      assertEquals(2288, javaCharStream0.getLine());
      assertEquals(89, javaCharStream0.getColumn());
      assertEquals(2288, javaCharStream0.getBeginLine());
      assertEquals(".", token3.toString());
      assertNotSame(stringReader1, stringReader0);
      assertNotSame(token3, token1);
      assertNotSame(token3, token2);
      assertNotSame(token3, token0);
      assertNotNull(token3);
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertFalse(token3.equals((Object)token1));
      assertFalse(token3.equals((Object)token2));
      assertFalse(token3.equals((Object)token0));
      
      javaParserTokenManager0.SkipLexicalActions(token2);
      assertEquals(9, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(84, token2.beginColumn);
      assertEquals(2288, token2.beginLine);
      assertEquals(88, token2.endColumn);
      assertEquals(74, token2.kind);
      assertEquals(2288, token2.endLine);
      assertEquals(2288, javaCharStream0.getEndLine());
      assertEquals(89, javaCharStream0.getEndColumn());
      assertEquals(89, javaCharStream0.getBeginColumn());
      assertEquals(2288, javaCharStream0.getLine());
      assertEquals(89, javaCharStream0.getColumn());
      assertEquals(2288, javaCharStream0.getBeginLine());
      assertEquals("soops", token2.toString());
      assertNotSame(stringReader1, stringReader0);
      assertNotSame(token2, token1);
      assertNotSame(token2, token3);
      assertNotSame(token2, token0);
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertFalse(token2.equals((Object)token1));
      assertFalse(token2.equals((Object)token3));
      assertFalse(token2.equals((Object)token0));
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      PipedInputStream pipedInputStream0 = new PipedInputStream(57);
      assertEquals(0, pipedInputStream0.available());
      assertNotNull(pipedInputStream0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(pipedInputStream0, 57, (-45));
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertEquals(0, pipedInputStream0.available());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertNotNull(javaCharStream0);
      
      StringReader stringReader0 = new StringReader("Kf:q%yiN+,9<]Du");
      assertNotNull(stringReader0);
      
      JavaCharStream javaCharStream1 = new JavaCharStream(stringReader0, 119, 57);
      assertEquals((-1), javaCharStream1.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream1.getBeginColumn());
      assertEquals(0, javaCharStream1.getBeginLine());
      assertNotNull(javaCharStream1);
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream1);
      assertEquals((-1), javaCharStream1.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream1.getBeginColumn());
      assertEquals(0, javaCharStream1.getBeginLine());
      assertNotNull(javaParserTokenManager0);
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertEquals(1, javaCharStream1.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(58, token0.endColumn);
      assertEquals(119, token0.endLine);
      assertEquals(119, token0.beginLine);
      assertEquals(74, token0.kind);
      assertEquals(57, token0.beginColumn);
      assertEquals(58, javaCharStream1.getColumn());
      assertEquals(119, javaCharStream1.getEndLine());
      assertEquals(58, javaCharStream1.getEndColumn());
      assertEquals(119, javaCharStream1.getLine());
      assertEquals(57, javaCharStream1.getBeginColumn());
      assertEquals(119, javaCharStream1.getBeginLine());
      assertEquals("Kf", token0.toString());
      assertNotSame(javaCharStream1, javaCharStream0);
      assertNotNull(token0);
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      
      JavaParserTokenManager javaParserTokenManager1 = null;
      try {
        javaParserTokenManager1 = new JavaParserTokenManager(javaCharStream0, 36);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Error: Ignoring invalid lexical state : 36. State unchanged.
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      Enumeration<PipedInputStream> enumeration0 = (Enumeration<PipedInputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(enumeration0).hasMoreElements();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      assertNotNull(sequenceInputStream0);
      
      StringReader stringReader0 = new StringReader("");
      assertNotNull(stringReader0);
      
      StringReader stringReader1 = new StringReader("SuFK[%.UpA)?y)LoAtU");
      assertNotNull(stringReader1);
      assertFalse(stringReader1.equals((Object)stringReader0));
      
      StringReader stringReader2 = new StringReader(";y*]LoGS'");
      assertNotNull(stringReader2);
      assertFalse(stringReader2.equals((Object)stringReader0));
      assertFalse(stringReader2.equals((Object)stringReader1));
      
      StringReader stringReader3 = new StringReader("g3{]D*");
      assertNotNull(stringReader3);
      assertFalse(stringReader3.equals((Object)stringReader1));
      assertFalse(stringReader3.equals((Object)stringReader0));
      assertFalse(stringReader3.equals((Object)stringReader2));
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader1, 0, 43);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertNotNull(javaCharStream0);
      assertFalse(stringReader1.equals((Object)stringReader2));
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertFalse(stringReader1.equals((Object)stringReader3));
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertNotNull(javaParserTokenManager0);
      assertFalse(stringReader1.equals((Object)stringReader2));
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertFalse(stringReader1.equals((Object)stringReader3));
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertEquals(3, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(46, token0.endColumn);
      assertEquals(43, token0.beginColumn);
      assertEquals(0, token0.beginLine);
      assertEquals(74, token0.kind);
      assertEquals(0, token0.endLine);
      assertEquals(0, javaCharStream0.getEndLine());
      assertEquals(0, javaCharStream0.getLine());
      assertEquals(46, javaCharStream0.getEndColumn());
      assertEquals(43, javaCharStream0.getBeginColumn());
      assertEquals(46, javaCharStream0.getColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals("SuFK", token0.toString());
      assertNotSame(stringReader1, stringReader2);
      assertNotSame(stringReader1, stringReader0);
      assertNotSame(stringReader1, stringReader3);
      assertNotNull(token0);
      assertFalse(stringReader1.equals((Object)stringReader2));
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertFalse(stringReader1.equals((Object)stringReader3));
      
      Token token1 = javaParserTokenManager0.getNextToken();
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(4, javaCharStream0.bufpos);
      assertEquals(0, token1.endLine);
      assertEquals(81, token1.kind);
      assertEquals(0, token1.beginLine);
      assertEquals(47, token1.beginColumn);
      assertEquals(47, token1.endColumn);
      assertEquals(0, javaCharStream0.getEndLine());
      assertEquals(0, javaCharStream0.getLine());
      assertEquals(47, javaCharStream0.getEndColumn());
      assertEquals(47, javaCharStream0.getBeginColumn());
      assertEquals(47, javaCharStream0.getColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals("[", token1.toString());
      assertNotSame(stringReader1, stringReader2);
      assertNotSame(stringReader1, stringReader0);
      assertNotSame(stringReader1, stringReader3);
      assertNotSame(token1, token0);
      assertNotNull(token1);
      assertFalse(stringReader1.equals((Object)stringReader2));
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertFalse(stringReader1.equals((Object)stringReader3));
      assertFalse(token1.equals((Object)token0));
      
      Token token2 = javaParserTokenManager0.getNextToken();
      assertEquals(0, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(48, token2.endColumn);
      assertEquals(0, token2.endLine);
      assertEquals(108, token2.kind);
      assertEquals(48, token2.beginColumn);
      assertEquals(0, token2.beginLine);
      assertEquals(0, javaCharStream0.getEndLine());
      assertEquals(0, javaCharStream0.getLine());
      assertEquals(48, javaCharStream0.getColumn());
      assertEquals(48, javaCharStream0.getEndColumn());
      assertEquals(48, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals("%", token2.toString());
      assertNotSame(stringReader1, stringReader2);
      assertNotSame(stringReader1, stringReader0);
      assertNotSame(stringReader1, stringReader3);
      assertNotSame(token2, token0);
      assertNotSame(token2, token1);
      assertNotNull(token2);
      assertFalse(stringReader1.equals((Object)stringReader2));
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertFalse(stringReader1.equals((Object)stringReader3));
      assertFalse(token2.equals((Object)token0));
      assertFalse(token2.equals((Object)token1));
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      assertFalse(fileDescriptor0.valid());
      assertNotNull(fileDescriptor0);
      
      StringReader stringReader0 = new StringReader("VeZOwOq;;'4Z^M-m.");
      assertNotNull(stringReader0);
      
      StringReader stringReader1 = new StringReader("VeZOwOq;;'4Z^M-m.");
      assertNotNull(stringReader1);
      assertFalse(stringReader1.equals((Object)stringReader0));
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, 42, (-171));
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertNotNull(javaCharStream0);
      assertFalse(stringReader0.equals((Object)stringReader1));
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertNotNull(javaParserTokenManager0);
      assertFalse(stringReader0.equals((Object)stringReader1));
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(6, javaCharStream0.bufpos);
      assertEquals((-165), token0.endColumn);
      assertEquals(74, token0.kind);
      assertEquals(42, token0.endLine);
      assertEquals(42, token0.beginLine);
      assertEquals((-171), token0.beginColumn);
      assertEquals((-171), javaCharStream0.getBeginColumn());
      assertEquals(42, javaCharStream0.getBeginLine());
      assertEquals((-165), javaCharStream0.getColumn());
      assertEquals(42, javaCharStream0.getEndLine());
      assertEquals((-165), javaCharStream0.getEndColumn());
      assertEquals(42, javaCharStream0.getLine());
      assertEquals("VeZOwOq", token0.toString());
      assertNotSame(stringReader0, stringReader1);
      assertNotNull(token0);
      assertFalse(stringReader0.equals((Object)stringReader1));
      
      Token token1 = javaParserTokenManager0.getNextToken();
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(7, javaCharStream0.bufpos);
      assertEquals((-164), token1.endColumn);
      assertEquals(83, token1.kind);
      assertEquals(42, token1.endLine);
      assertEquals(42, token1.beginLine);
      assertEquals((-164), token1.beginColumn);
      assertEquals(42, javaCharStream0.getBeginLine());
      assertEquals((-164), javaCharStream0.getBeginColumn());
      assertEquals((-164), javaCharStream0.getColumn());
      assertEquals((-164), javaCharStream0.getEndColumn());
      assertEquals(42, javaCharStream0.getEndLine());
      assertEquals(42, javaCharStream0.getLine());
      assertEquals(";", token1.toString());
      assertNotSame(stringReader0, stringReader1);
      assertNotSame(token1, token0);
      assertNotNull(token1);
      assertFalse(stringReader0.equals((Object)stringReader1));
      assertFalse(token1.equals((Object)token0));
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      assertFalse(fileDescriptor0.valid());
      assertNotNull(fileDescriptor0);
      
      StringReader stringReader0 = new StringReader("SuFK[%.UpA)?y)LoAtU");
      assertNotNull(stringReader0);
      
      StringReader stringReader1 = new StringReader("\"\n\"");
      assertNotNull(stringReader1);
      assertFalse(stringReader1.equals((Object)stringReader0));
      
      StringReader stringReader2 = new StringReader("G-*-^+jE#3,zp[");
      assertNotNull(stringReader2);
      assertFalse(stringReader2.equals((Object)stringReader1));
      assertFalse(stringReader2.equals((Object)stringReader0));
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader2, 80, 99);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertNotNull(javaCharStream0);
      assertFalse(stringReader2.equals((Object)stringReader1));
      assertFalse(stringReader2.equals((Object)stringReader0));
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertNotNull(javaParserTokenManager0);
      assertFalse(stringReader2.equals((Object)stringReader1));
      assertFalse(stringReader2.equals((Object)stringReader0));
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertEquals(0, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(99, token0.beginColumn);
      assertEquals(80, token0.beginLine);
      assertEquals(80, token0.endLine);
      assertEquals(99, token0.endColumn);
      assertEquals(74, token0.kind);
      assertEquals(80, javaCharStream0.getLine());
      assertEquals(80, javaCharStream0.getBeginLine());
      assertEquals(99, javaCharStream0.getBeginColumn());
      assertEquals(99, javaCharStream0.getEndColumn());
      assertEquals(99, javaCharStream0.getColumn());
      assertEquals(80, javaCharStream0.getEndLine());
      assertEquals("G", token0.toString());
      assertNotSame(stringReader2, stringReader1);
      assertNotSame(stringReader2, stringReader0);
      assertNotNull(token0);
      assertFalse(stringReader2.equals((Object)stringReader1));
      assertFalse(stringReader2.equals((Object)stringReader0));
      
      Token token1 = javaParserTokenManager0.getNextToken();
      assertEquals(1, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(80, token1.endLine);
      assertEquals(100, token1.endColumn);
      assertEquals(102, token1.kind);
      assertEquals(100, token1.beginColumn);
      assertEquals(80, token1.beginLine);
      assertEquals(80, javaCharStream0.getLine());
      assertEquals(100, javaCharStream0.getBeginColumn());
      assertEquals(80, javaCharStream0.getBeginLine());
      assertEquals(100, javaCharStream0.getColumn());
      assertEquals(100, javaCharStream0.getEndColumn());
      assertEquals(80, javaCharStream0.getEndLine());
      assertEquals("-", token1.toString());
      assertNotSame(stringReader2, stringReader1);
      assertNotSame(stringReader2, stringReader0);
      assertNotSame(token1, token0);
      assertNotNull(token1);
      assertFalse(stringReader2.equals((Object)stringReader1));
      assertFalse(stringReader2.equals((Object)stringReader0));
      assertFalse(token1.equals((Object)token0));
      
      Token token2 = javaParserTokenManager0.getNextToken();
      assertEquals(2, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(80, token2.beginLine);
      assertEquals(101, token2.endColumn);
      assertEquals(103, token2.kind);
      assertEquals(101, token2.beginColumn);
      assertEquals(80, token2.endLine);
      assertEquals(80, javaCharStream0.getLine());
      assertEquals(80, javaCharStream0.getBeginLine());
      assertEquals(101, javaCharStream0.getEndColumn());
      assertEquals(101, javaCharStream0.getBeginColumn());
      assertEquals(101, javaCharStream0.getColumn());
      assertEquals(80, javaCharStream0.getEndLine());
      assertEquals("*", token2.toString());
      assertNotSame(stringReader2, stringReader1);
      assertNotSame(stringReader2, stringReader0);
      assertNotSame(token2, token0);
      assertNotSame(token2, token1);
      assertNotNull(token2);
      assertFalse(stringReader2.equals((Object)stringReader1));
      assertFalse(stringReader2.equals((Object)stringReader0));
      assertFalse(token2.equals((Object)token0));
      assertFalse(token2.equals((Object)token1));
      
      Token token3 = javaParserTokenManager0.jjFillToken();
      assertEquals(2, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(103, token3.kind);
      assertEquals(80, token3.beginLine);
      assertEquals(80, token3.endLine);
      assertEquals(101, token3.beginColumn);
      assertEquals(101, token3.endColumn);
      assertEquals(80, javaCharStream0.getLine());
      assertEquals(80, javaCharStream0.getBeginLine());
      assertEquals(101, javaCharStream0.getEndColumn());
      assertEquals(101, javaCharStream0.getBeginColumn());
      assertEquals(101, javaCharStream0.getColumn());
      assertEquals(80, javaCharStream0.getEndLine());
      assertEquals("*", token3.toString());
      assertNotSame(stringReader2, stringReader1);
      assertNotSame(stringReader2, stringReader0);
      assertNotSame(token3, token1);
      assertNotSame(token3, token0);
      assertNotSame(token3, token2);
      assertNotNull(token3);
      assertFalse(stringReader2.equals((Object)stringReader1));
      assertFalse(stringReader2.equals((Object)stringReader0));
      assertFalse(token3.equals((Object)token1));
      assertFalse(token3.equals((Object)token0));
      assertFalse(token3.equals((Object)token2));
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      assertFalse(fileDescriptor0.valid());
      assertNotNull(fileDescriptor0);
      
      StringReader stringReader0 = new StringReader("zHk/f5I=pmf=!ks");
      assertNotNull(stringReader0);
      
      int int0 = JavaParserConstants.LSHIFT;
      assertEquals(109, int0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, 97, (-2383));
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertNotNull(javaCharStream0);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertNotNull(javaParserTokenManager0);
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertEquals(2, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(97, token0.beginLine);
      assertEquals((-2381), token0.endColumn);
      assertEquals(97, token0.endLine);
      assertEquals((-2383), token0.beginColumn);
      assertEquals(74, token0.kind);
      assertEquals((-2383), javaCharStream0.getBeginColumn());
      assertEquals((-2381), javaCharStream0.getColumn());
      assertEquals(97, javaCharStream0.getEndLine());
      assertEquals(97, javaCharStream0.getBeginLine());
      assertEquals(97, javaCharStream0.getLine());
      assertEquals((-2381), javaCharStream0.getEndColumn());
      assertEquals("zHk", token0.toString());
      assertNotNull(token0);
      
      StringReader stringReader1 = null;
      try {
        stringReader1 = new StringReader((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      assertFalse(fileDescriptor0.valid());
      assertNotNull(fileDescriptor0);
      
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      assertEquals(0, pipedInputStream0.available());
      assertNotNull(pipedInputStream0);
      
      boolean boolean0 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      StringReader stringReader0 = new StringReader("]|b");
      assertNotNull(stringReader0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, 2274, 2313);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertNotNull(javaCharStream0);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertNotNull(javaParserTokenManager0);
      
      javaParserTokenManager0.curChar = 'v';
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)94;
      byteArray0[1] = (byte)80;
      byteArray0[2] = (byte)24;
      byteArray0[3] = (byte)52;
      byteArray0[4] = (byte)46;
      Token token0 = javaParserTokenManager0.getNextToken();
      assertEquals(0, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(2313, token0.endColumn);
      assertEquals(82, token0.kind);
      assertEquals(2274, token0.beginLine);
      assertEquals(2313, token0.beginColumn);
      assertEquals(2274, token0.endLine);
      assertEquals(2274, javaCharStream0.getEndLine());
      assertEquals(2274, javaCharStream0.getLine());
      assertEquals(2313, javaCharStream0.getColumn());
      assertEquals(2313, javaCharStream0.getEndColumn());
      assertEquals(2274, javaCharStream0.getBeginLine());
      assertEquals(2313, javaCharStream0.getBeginColumn());
      assertEquals("]", token0.toString());
      assertNotNull(token0);
      
      Token token1 = javaParserTokenManager0.getNextToken();
      assertEquals(0, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(2274, token1.endLine);
      assertEquals(2274, token1.beginLine);
      assertEquals(106, token1.kind);
      assertEquals(2314, token1.endColumn);
      assertEquals(2314, token1.beginColumn);
      assertEquals(2274, javaCharStream0.getEndLine());
      assertEquals(2274, javaCharStream0.getLine());
      assertEquals(2314, javaCharStream0.getBeginColumn());
      assertEquals(2314, javaCharStream0.getColumn());
      assertEquals(2274, javaCharStream0.getBeginLine());
      assertEquals(2314, javaCharStream0.getEndColumn());
      assertEquals("|", token1.toString());
      assertNotSame(token1, token0);
      assertNotNull(token1);
      assertFalse(token1.equals((Object)token0));
      
      Token token2 = javaParserTokenManager0.getNextToken();
      assertEquals(1, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(2315, token2.beginColumn);
      assertEquals(74, token2.kind);
      assertEquals(2274, token2.endLine);
      assertEquals(2274, token2.beginLine);
      assertEquals(2315, token2.endColumn);
      assertEquals(2274, javaCharStream0.getEndLine());
      assertEquals(2274, javaCharStream0.getLine());
      assertEquals(2274, javaCharStream0.getBeginLine());
      assertEquals(2315, javaCharStream0.getColumn());
      assertEquals(2315, javaCharStream0.getEndColumn());
      assertEquals(2315, javaCharStream0.getBeginColumn());
      assertEquals("b", token2.toString());
      assertNotSame(token2, token0);
      assertNotSame(token2, token1);
      assertNotNull(token2);
      assertFalse(token2.equals((Object)token0));
      assertFalse(token2.equals((Object)token1));
      
      javaParserTokenManager0.TokenLexicalActions(token1);
      assertEquals(1, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(2274, token1.endLine);
      assertEquals(2274, token1.beginLine);
      assertEquals(106, token1.kind);
      assertEquals(2314, token1.endColumn);
      assertEquals(2314, token1.beginColumn);
      assertEquals(2274, javaCharStream0.getEndLine());
      assertEquals(2274, javaCharStream0.getLine());
      assertEquals(2274, javaCharStream0.getBeginLine());
      assertEquals(2315, javaCharStream0.getColumn());
      assertEquals(2315, javaCharStream0.getEndColumn());
      assertEquals(2315, javaCharStream0.getBeginColumn());
      assertEquals("|", token1.toString());
      assertNotSame(token1, token2);
      assertNotSame(token1, token0);
      assertFalse(token1.equals((Object)token2));
      assertFalse(token1.equals((Object)token0));
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      assertFalse(fileDescriptor0.valid());
      assertNotNull(fileDescriptor0);
      
      boolean boolean0 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "null");
      assertFalse(boolean0);
      
      StringReader stringReader0 = new StringReader("int");
      assertNotNull(stringReader0);
      
      StringReader stringReader1 = new StringReader("{5>G");
      assertNotNull(stringReader1);
      assertFalse(stringReader1.equals((Object)stringReader0));
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader1, 93, 3077);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertNotNull(javaCharStream0);
      assertFalse(stringReader1.equals((Object)stringReader0));
      
      JavaCharStream javaCharStream1 = new JavaCharStream(stringReader1, (-856), 93);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream1.bufpos);
      assertEquals(0, javaCharStream1.getBeginLine());
      assertEquals(0, javaCharStream1.getBeginColumn());
      assertNotNull(javaCharStream1);
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream1);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream1.bufpos);
      assertEquals(0, javaCharStream1.getBeginLine());
      assertEquals(0, javaCharStream1.getBeginColumn());
      assertNotNull(javaParserTokenManager0);
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream1.bufpos);
      assertEquals(93, token0.endColumn);
      assertEquals(93, token0.beginColumn);
      assertEquals((-856), token0.beginLine);
      assertEquals(79, token0.kind);
      assertEquals((-856), token0.endLine);
      assertEquals((-856), javaCharStream1.getLine());
      assertEquals(93, javaCharStream1.getEndColumn());
      assertEquals(93, javaCharStream1.getColumn());
      assertEquals(93, javaCharStream1.getBeginColumn());
      assertEquals((-856), javaCharStream1.getBeginLine());
      assertEquals((-856), javaCharStream1.getEndLine());
      assertEquals("{", token0.toString());
      assertNotSame(stringReader1, stringReader0);
      assertNotSame(javaCharStream1, javaCharStream0);
      assertNotNull(token0);
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      
      Token token1 = javaParserTokenManager0.getNextToken();
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream1.bufpos);
      assertEquals(66, token1.kind);
      assertEquals(94, token1.endColumn);
      assertEquals(94, token1.beginColumn);
      assertEquals((-856), token1.beginLine);
      assertEquals((-856), token1.endLine);
      assertEquals((-856), javaCharStream1.getLine());
      assertEquals(94, javaCharStream1.getColumn());
      assertEquals(94, javaCharStream1.getEndColumn());
      assertEquals(94, javaCharStream1.getBeginColumn());
      assertEquals((-856), javaCharStream1.getBeginLine());
      assertEquals((-856), javaCharStream1.getEndLine());
      assertEquals("5", token1.toString());
      assertNotSame(stringReader1, stringReader0);
      assertNotSame(javaCharStream1, javaCharStream0);
      assertNotSame(token1, token0);
      assertNotNull(token1);
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      assertFalse(token1.equals((Object)token0));
      
      // Undeclared exception!
      try { 
        javaParserTokenManager0.SwitchTo(117);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Error: Ignoring invalid lexical state : 117. State unchanged.
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      JavaCharStream javaCharStream0 = null;
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager((JavaCharStream) null);
      assertNotNull(javaParserTokenManager0);
      
      // Undeclared exception!
      try { 
        javaParserTokenManager0.SwitchTo((-3439));
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Error: Ignoring invalid lexical state : -3439. State unchanged.
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      StringReader stringReader0 = new StringReader("implements");
      assertNotNull(stringReader0);
      
      StringReader stringReader1 = new StringReader("implements");
      assertNotNull(stringReader1);
      assertFalse(stringReader1.equals((Object)stringReader0));
      
      StringReader stringReader2 = new StringReader("implements");
      assertNotNull(stringReader2);
      assertFalse(stringReader2.equals((Object)stringReader1));
      assertFalse(stringReader2.equals((Object)stringReader0));
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader2, 2147418127, 41);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertNotNull(javaCharStream0);
      assertFalse(stringReader2.equals((Object)stringReader1));
      assertFalse(stringReader2.equals((Object)stringReader0));
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertNotNull(javaParserTokenManager0);
      assertFalse(stringReader2.equals((Object)stringReader1));
      assertFalse(stringReader2.equals((Object)stringReader0));
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(9, javaCharStream0.bufpos);
      assertEquals(2147418127, token0.endLine);
      assertEquals(2147418127, token0.beginLine);
      assertEquals(41, token0.beginColumn);
      assertEquals(50, token0.endColumn);
      assertEquals(37, token0.kind);
      assertEquals(2147418127, javaCharStream0.getBeginLine());
      assertEquals(2147418127, javaCharStream0.getLine());
      assertEquals(2147418127, javaCharStream0.getEndLine());
      assertEquals(50, javaCharStream0.getColumn());
      assertEquals(50, javaCharStream0.getEndColumn());
      assertEquals(41, javaCharStream0.getBeginColumn());
      assertEquals("implements", token0.toString());
      assertNotSame(stringReader2, stringReader1);
      assertNotSame(stringReader2, stringReader0);
      assertNotNull(token0);
      assertFalse(stringReader2.equals((Object)stringReader1));
      assertFalse(stringReader2.equals((Object)stringReader0));
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      StringReader stringReader0 = new StringReader("SuFK[%.UpA)?y)LoAtU");
      assertNotNull(stringReader0);
      
      StringReader stringReader1 = new StringReader(">j=2>PH9yytXFz?/");
      assertNotNull(stringReader1);
      assertFalse(stringReader1.equals((Object)stringReader0));
      
      StringReader stringReader2 = new StringReader("SuFK[%.UpA)?y)LoAtU");
      assertNotNull(stringReader2);
      assertFalse(stringReader2.equals((Object)stringReader0));
      assertFalse(stringReader2.equals((Object)stringReader1));
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader1, 43, 43, 177);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertNotNull(javaCharStream0);
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertFalse(stringReader1.equals((Object)stringReader2));
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertNotNull(javaParserTokenManager0);
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertFalse(stringReader1.equals((Object)stringReader2));
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.bufpos);
      assertEquals(43, token0.endColumn);
      assertEquals(43, token0.beginColumn);
      assertEquals(124, token0.kind);
      assertEquals(43, token0.beginLine);
      assertEquals(43, token0.endLine);
      assertEquals(43, javaCharStream0.getBeginColumn());
      assertEquals(43, javaCharStream0.getEndColumn());
      assertEquals(43, javaCharStream0.getBeginLine());
      assertEquals(43, javaCharStream0.getLine());
      assertEquals(43, javaCharStream0.getColumn());
      assertEquals(43, javaCharStream0.getEndLine());
      assertEquals(">", token0.toString());
      assertNotSame(stringReader1, stringReader0);
      assertNotSame(stringReader1, stringReader2);
      assertNotNull(token0);
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertFalse(stringReader1.equals((Object)stringReader2));
      
      javaParserTokenManager0.TokenLexicalActions(token0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.bufpos);
      assertEquals(43, token0.endColumn);
      assertEquals(43, token0.beginColumn);
      assertEquals(124, token0.kind);
      assertEquals(43, token0.beginLine);
      assertEquals(43, token0.endLine);
      assertEquals(43, javaCharStream0.getBeginColumn());
      assertEquals(43, javaCharStream0.getEndColumn());
      assertEquals(43, javaCharStream0.getBeginLine());
      assertEquals(43, javaCharStream0.getLine());
      assertEquals(43, javaCharStream0.getColumn());
      assertEquals(43, javaCharStream0.getEndLine());
      assertEquals(">", token0.toString());
      assertNotSame(stringReader1, stringReader0);
      assertNotSame(stringReader1, stringReader2);
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertFalse(stringReader1.equals((Object)stringReader2));
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      StringReader stringReader0 = new StringReader("DnuFy!Hi!y3");
      assertNotNull(stringReader0);
      
      StringReader stringReader1 = new StringReader("`A0TXAHt ");
      assertNotNull(stringReader1);
      assertFalse(stringReader1.equals((Object)stringReader0));
      
      StringReader stringReader2 = new StringReader("");
      assertNotNull(stringReader2);
      assertFalse(stringReader2.equals((Object)stringReader0));
      assertFalse(stringReader2.equals((Object)stringReader1));
      
      StringReader stringReader3 = new StringReader("DnuFy!Hi!y3");
      assertNotNull(stringReader3);
      assertFalse(stringReader3.equals((Object)stringReader0));
      assertFalse(stringReader3.equals((Object)stringReader1));
      assertFalse(stringReader3.equals((Object)stringReader2));
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader3, (-2573), (-2573));
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertNotNull(javaCharStream0);
      assertFalse(stringReader3.equals((Object)stringReader0));
      assertFalse(stringReader3.equals((Object)stringReader1));
      assertFalse(stringReader3.equals((Object)stringReader2));
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertNotNull(javaParserTokenManager0);
      assertFalse(stringReader3.equals((Object)stringReader0));
      assertFalse(stringReader3.equals((Object)stringReader1));
      assertFalse(stringReader3.equals((Object)stringReader2));
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertEquals(4, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-2573), token0.beginLine);
      assertEquals((-2573), token0.beginColumn);
      assertEquals((-2569), token0.endColumn);
      assertEquals(74, token0.kind);
      assertEquals((-2573), token0.endLine);
      assertEquals((-2569), javaCharStream0.getColumn());
      assertEquals((-2573), javaCharStream0.getEndLine());
      assertEquals((-2573), javaCharStream0.getBeginLine());
      assertEquals((-2573), javaCharStream0.getLine());
      assertEquals((-2569), javaCharStream0.getEndColumn());
      assertEquals((-2573), javaCharStream0.getBeginColumn());
      assertEquals("DnuFy", token0.toString());
      assertNotSame(stringReader3, stringReader0);
      assertNotSame(stringReader3, stringReader1);
      assertNotSame(stringReader3, stringReader2);
      assertNotNull(token0);
      assertFalse(stringReader3.equals((Object)stringReader0));
      assertFalse(stringReader3.equals((Object)stringReader1));
      assertFalse(stringReader3.equals((Object)stringReader2));
      
      Token token1 = javaParserTokenManager0.getNextToken();
      assertEquals(5, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-2568), token1.endColumn);
      assertEquals(89, token1.kind);
      assertEquals((-2573), token1.endLine);
      assertEquals((-2568), token1.beginColumn);
      assertEquals((-2573), token1.beginLine);
      assertEquals((-2568), javaCharStream0.getBeginColumn());
      assertEquals((-2573), javaCharStream0.getEndLine());
      assertEquals((-2573), javaCharStream0.getBeginLine());
      assertEquals((-2573), javaCharStream0.getLine());
      assertEquals((-2568), javaCharStream0.getEndColumn());
      assertEquals((-2568), javaCharStream0.getColumn());
      assertEquals("!", token1.toString());
      assertNotSame(stringReader3, stringReader0);
      assertNotSame(stringReader3, stringReader1);
      assertNotSame(stringReader3, stringReader2);
      assertNotSame(token1, token0);
      assertNotNull(token1);
      assertFalse(stringReader3.equals((Object)stringReader0));
      assertFalse(stringReader3.equals((Object)stringReader1));
      assertFalse(stringReader3.equals((Object)stringReader2));
      assertFalse(token1.equals((Object)token0));
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "+=");
      assertFalse(boolean0);
      
      StringReader stringReader0 = new StringReader("f%3T%gku6");
      assertNotNull(stringReader0);
      
      StringReader stringReader1 = new StringReader("+=");
      assertNotNull(stringReader1);
      assertFalse(stringReader1.equals((Object)stringReader0));
      
      int int0 = stringReader0.read();
      assertEquals(102, int0);
      assertNotSame(stringReader0, stringReader1);
      assertFalse(stringReader0.equals((Object)stringReader1));
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader1, 102, 102);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertNotNull(javaCharStream0);
      assertFalse(stringReader1.equals((Object)stringReader0));
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertNotNull(javaParserTokenManager0);
      assertFalse(stringReader1.equals((Object)stringReader0));
      
      javaParserTokenManager0.curLexState = 80;
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertEquals(0, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(102, token0.endLine);
      assertEquals(0, token0.kind);
      assertEquals(102, token0.beginColumn);
      assertEquals(102, token0.endColumn);
      assertEquals(102, token0.beginLine);
      assertEquals(102, javaCharStream0.getEndLine());
      assertEquals(102, javaCharStream0.getBeginColumn());
      assertEquals(102, javaCharStream0.getColumn());
      assertEquals(102, javaCharStream0.getEndColumn());
      assertEquals(102, javaCharStream0.getBeginLine());
      assertEquals(102, javaCharStream0.getLine());
      assertEquals("", token0.toString());
      assertNotSame(stringReader1, stringReader0);
      assertNotNull(token0);
      assertFalse(stringReader1.equals((Object)stringReader0));
      
      JavaParserTokenManager javaParserTokenManager1 = new JavaParserTokenManager(javaCharStream0);
      assertEquals(0, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(102, javaCharStream0.getEndLine());
      assertEquals(102, javaCharStream0.getBeginColumn());
      assertEquals(102, javaCharStream0.getColumn());
      assertEquals(102, javaCharStream0.getEndColumn());
      assertEquals(102, javaCharStream0.getBeginLine());
      assertEquals(102, javaCharStream0.getLine());
      assertNotNull(javaParserTokenManager1);
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertFalse(javaParserTokenManager1.equals((Object)javaParserTokenManager0));
      
      javaParserTokenManager1.TokenLexicalActions(token0);
      assertEquals(0, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(102, token0.endLine);
      assertEquals(0, token0.kind);
      assertEquals(102, token0.beginColumn);
      assertEquals(102, token0.endColumn);
      assertEquals(102, token0.beginLine);
      assertEquals(102, javaCharStream0.getEndLine());
      assertEquals(102, javaCharStream0.getBeginColumn());
      assertEquals(102, javaCharStream0.getColumn());
      assertEquals(102, javaCharStream0.getEndColumn());
      assertEquals(102, javaCharStream0.getBeginLine());
      assertEquals(102, javaCharStream0.getLine());
      assertEquals("", token0.toString());
      assertNotSame(stringReader1, stringReader0);
      assertNotSame(javaParserTokenManager0, javaParserTokenManager1);
      assertNotSame(javaParserTokenManager1, javaParserTokenManager0);
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertFalse(javaParserTokenManager0.equals((Object)javaParserTokenManager1));
      assertFalse(javaParserTokenManager1.equals((Object)javaParserTokenManager0));
      
      Token token1 = javaParserTokenManager0.jjFillToken();
      assertEquals(0, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(102, token1.endLine);
      assertEquals(102, token1.beginColumn);
      assertEquals(102, token1.endColumn);
      assertEquals(102, token1.beginLine);
      assertEquals(0, token1.kind);
      assertEquals(102, javaCharStream0.getEndLine());
      assertEquals(102, javaCharStream0.getBeginColumn());
      assertEquals(102, javaCharStream0.getColumn());
      assertEquals(102, javaCharStream0.getEndColumn());
      assertEquals(102, javaCharStream0.getBeginLine());
      assertEquals(102, javaCharStream0.getLine());
      assertEquals("", token1.toString());
      assertNotSame(stringReader1, stringReader0);
      assertNotSame(javaParserTokenManager0, javaParserTokenManager1);
      assertNotSame(token1, token0);
      assertNotNull(token1);
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertFalse(javaParserTokenManager0.equals((Object)javaParserTokenManager1));
      assertFalse(token1.equals((Object)token0));
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      assertFalse(fileDescriptor0.valid());
      assertNotNull(fileDescriptor0);
      
      PipedInputStream pipedInputStream0 = new PipedInputStream(26);
      assertEquals(0, pipedInputStream0.available());
      assertNotNull(pipedInputStream0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(pipedInputStream0, 26, (-45));
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertEquals(0, pipedInputStream0.available());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertNotNull(javaCharStream0);
      
      StringReader stringReader0 = new StringReader("t!R%]{");
      assertNotNull(stringReader0);
      
      javaCharStream0.maxNextCharInd = 26;
      assertEquals(0, pipedInputStream0.available());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertEquals(0, pipedInputStream0.available());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertNotNull(javaParserTokenManager0);
      
      // Undeclared exception!
      try { 
        javaParserTokenManager0.getNextToken();
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Lexical error at line 26, column -45.  Encountered: \"\" (0), after : \"\"
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      JavaCharStream javaCharStream0 = null;
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager((JavaCharStream) null);
      assertNotNull(javaParserTokenManager0);
      
      // Undeclared exception!
      try { 
        javaParserTokenManager0.getNextToken();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      assertFalse(fileDescriptor0.valid());
      assertNotNull(fileDescriptor0);
      
      PipedInputStream pipedInputStream0 = new PipedInputStream(26);
      assertEquals(0, pipedInputStream0.available());
      assertNotNull(pipedInputStream0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(pipedInputStream0, 5, (-45));
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, pipedInputStream0.available());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertNotNull(javaCharStream0);
      
      StringReader stringReader0 = new StringReader("t!hR%]{");
      assertNotNull(stringReader0);
      
      StringReader stringReader1 = new StringReader("com.soops.CEN4010.JMCA.JParser.TokenMgrError");
      assertNotNull(stringReader1);
      assertFalse(stringReader1.equals((Object)stringReader0));
      
      JavaCharStream javaCharStream1 = new JavaCharStream(stringReader1, 47, 67);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream1.bufpos);
      assertEquals(0, javaCharStream1.getBeginLine());
      assertEquals(0, javaCharStream1.getBeginColumn());
      assertNotNull(javaCharStream1);
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream1);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream1.bufpos);
      assertEquals(0, javaCharStream1.getBeginLine());
      assertEquals(0, javaCharStream1.getBeginColumn());
      assertNotNull(javaParserTokenManager0);
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertEquals(2, javaCharStream1.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(74, token0.kind);
      assertEquals(69, token0.endColumn);
      assertEquals(47, token0.beginLine);
      assertEquals(47, token0.endLine);
      assertEquals(67, token0.beginColumn);
      assertEquals(47, javaCharStream1.getEndLine());
      assertEquals(67, javaCharStream1.getBeginColumn());
      assertEquals(47, javaCharStream1.getBeginLine());
      assertEquals(47, javaCharStream1.getLine());
      assertEquals(69, javaCharStream1.getEndColumn());
      assertEquals(69, javaCharStream1.getColumn());
      assertEquals("com", token0.toString());
      assertNotSame(stringReader1, stringReader0);
      assertNotSame(javaCharStream1, javaCharStream0);
      assertNotNull(token0);
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
  }

  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      PipedInputStream pipedInputStream0 = new PipedInputStream(57);
      assertEquals(0, pipedInputStream0.available());
      assertNotNull(pipedInputStream0);
      
      StringReader stringReader0 = new StringReader("=Qv&nCW`Vsfo[m");
      assertNotNull(stringReader0);
      
      int int0 = stringReader0.read();
      assertEquals(61, int0);
      
      boolean boolean0 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "=Qv&nCW`Vsfo[m");
      assertFalse(boolean0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, 40, 974, 1356);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertNotNull(javaCharStream0);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertNotNull(javaParserTokenManager0);
      
      JavaCharStream javaCharStream1 = new JavaCharStream(stringReader0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream1.bufpos);
      assertEquals(0, javaCharStream1.getBeginColumn());
      assertEquals(0, javaCharStream1.getBeginLine());
      assertNotNull(javaCharStream1);
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      
      JavaParserTokenManager javaParserTokenManager1 = new JavaParserTokenManager(javaCharStream1);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream1.bufpos);
      assertEquals(0, javaCharStream1.getBeginColumn());
      assertEquals(0, javaCharStream1.getBeginLine());
      assertNotNull(javaParserTokenManager1);
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      assertFalse(javaParserTokenManager1.equals((Object)javaParserTokenManager0));
      
      JavaParserTokenManager javaParserTokenManager2 = new JavaParserTokenManager(javaCharStream0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertNotNull(javaParserTokenManager2);
      assertFalse(javaCharStream0.equals((Object)javaCharStream1));
      assertFalse(javaParserTokenManager2.equals((Object)javaParserTokenManager1));
      assertFalse(javaParserTokenManager2.equals((Object)javaParserTokenManager0));
      
      Token token0 = javaParserTokenManager2.getNextToken();
      assertEquals(1, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(974, token0.beginColumn);
      assertEquals(40, token0.endLine);
      assertEquals(40, token0.beginLine);
      assertEquals(74, token0.kind);
      assertEquals(975, token0.endColumn);
      assertEquals(40, javaCharStream0.getEndLine());
      assertEquals(975, javaCharStream0.getColumn());
      assertEquals(975, javaCharStream0.getEndColumn());
      assertEquals(974, javaCharStream0.getBeginColumn());
      assertEquals(40, javaCharStream0.getBeginLine());
      assertEquals(40, javaCharStream0.getLine());
      assertEquals("Qv", token0.toString());
      assertNotSame(javaCharStream0, javaCharStream1);
      assertNotSame(javaParserTokenManager2, javaParserTokenManager1);
      assertNotSame(javaParserTokenManager2, javaParserTokenManager0);
      assertNotNull(token0);
      assertFalse(javaCharStream0.equals((Object)javaCharStream1));
      assertFalse(javaParserTokenManager2.equals((Object)javaParserTokenManager1));
      assertFalse(javaParserTokenManager2.equals((Object)javaParserTokenManager0));
      
      Token token1 = javaParserTokenManager0.getNextToken();
      assertEquals(2, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(40, token1.endLine);
      assertEquals(976, token1.endColumn);
      assertEquals(105, token1.kind);
      assertEquals(40, token1.beginLine);
      assertEquals(976, token1.beginColumn);
      assertEquals(40, javaCharStream0.getEndLine());
      assertEquals(976, javaCharStream0.getEndColumn());
      assertEquals(976, javaCharStream0.getBeginColumn());
      assertEquals(976, javaCharStream0.getColumn());
      assertEquals(40, javaCharStream0.getBeginLine());
      assertEquals(40, javaCharStream0.getLine());
      assertEquals("&", token1.toString());
      assertNotSame(javaCharStream0, javaCharStream1);
      assertNotSame(javaParserTokenManager0, javaParserTokenManager1);
      assertNotSame(javaParserTokenManager0, javaParserTokenManager2);
      assertNotSame(token1, token0);
      assertNotNull(token1);
      assertFalse(javaCharStream0.equals((Object)javaCharStream1));
      assertFalse(javaParserTokenManager0.equals((Object)javaParserTokenManager1));
      assertFalse(javaParserTokenManager0.equals((Object)javaParserTokenManager2));
      assertFalse(token1.equals((Object)token0));
      
      Token token2 = javaParserTokenManager0.getNextToken();
      assertEquals(5, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(40, token2.beginLine);
      assertEquals(979, token2.endColumn);
      assertEquals(74, token2.kind);
      assertEquals(40, token2.endLine);
      assertEquals(977, token2.beginColumn);
      assertEquals(979, javaCharStream0.getEndColumn());
      assertEquals(40, javaCharStream0.getEndLine());
      assertEquals(977, javaCharStream0.getBeginColumn());
      assertEquals(979, javaCharStream0.getColumn());
      assertEquals(40, javaCharStream0.getBeginLine());
      assertEquals(40, javaCharStream0.getLine());
      assertEquals("nCW", token2.toString());
      assertNotSame(javaCharStream0, javaCharStream1);
      assertNotSame(javaParserTokenManager0, javaParserTokenManager1);
      assertNotSame(javaParserTokenManager0, javaParserTokenManager2);
      assertNotSame(token2, token0);
      assertNotSame(token2, token1);
      assertNotNull(token2);
      assertFalse(javaCharStream0.equals((Object)javaCharStream1));
      assertFalse(javaParserTokenManager0.equals((Object)javaParserTokenManager1));
      assertFalse(javaParserTokenManager0.equals((Object)javaParserTokenManager2));
      assertFalse(token2.equals((Object)token0));
      assertFalse(token2.equals((Object)token1));
      
      javaParserTokenManager2.TokenLexicalActions(token0);
      assertEquals(5, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(974, token0.beginColumn);
      assertEquals(40, token0.endLine);
      assertEquals(40, token0.beginLine);
      assertEquals(74, token0.kind);
      assertEquals(975, token0.endColumn);
      assertEquals(979, javaCharStream0.getEndColumn());
      assertEquals(40, javaCharStream0.getEndLine());
      assertEquals(977, javaCharStream0.getBeginColumn());
      assertEquals(979, javaCharStream0.getColumn());
      assertEquals(40, javaCharStream0.getBeginLine());
      assertEquals(40, javaCharStream0.getLine());
      assertEquals("Qv", token0.toString());
      assertNotSame(javaCharStream0, javaCharStream1);
      assertNotSame(javaParserTokenManager2, javaParserTokenManager1);
      assertNotSame(javaParserTokenManager2, javaParserTokenManager0);
      assertNotSame(token0, token2);
      assertNotSame(token0, token1);
      assertFalse(javaCharStream0.equals((Object)javaCharStream1));
      assertFalse(javaParserTokenManager2.equals((Object)javaParserTokenManager1));
      assertFalse(javaParserTokenManager2.equals((Object)javaParserTokenManager0));
      assertFalse(token0.equals((Object)token2));
      assertFalse(token0.equals((Object)token1));
  }

  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      StringReader stringReader0 = new StringReader("");
      assertNotNull(stringReader0);
      
      char[] charArray0 = new char[2];
      charArray0[0] = 'E';
      charArray0[1] = 'O';
      int int0 = stringReader0.read(charArray0);
      assertArrayEquals(new char[] {'E', 'O'}, charArray0);
      assertEquals((-1), int0);
      assertEquals(2, charArray0.length);
      
      int int1 = 0;
      int int2 = 2510;
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, (-1068), 0, 2510);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertNotNull(javaCharStream0);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertNotNull(javaParserTokenManager0);
      
      PrintStream printStream0 = null;
      javaParserTokenManager0.debugStream = null;
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      
      int int3 = stringReader0.read(charArray0);
      assertArrayEquals(new char[] {'E', 'O'}, charArray0);
      assertEquals((-1), int3);
      assertFalse(int3 == int1);
      assertFalse(int3 == int2);
      assertTrue(int3 == int0);
      assertEquals(2, charArray0.length);
      
      javaParserTokenManager0.setDebugStream((PrintStream) null);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      
      try { 
        javaCharStream0.FillBuff();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaCharStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      assertFalse(fileDescriptor0.valid());
      assertNotNull(fileDescriptor0);
      
      boolean boolean0 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "t`LYJy$=jm$_HY!");
      assertFalse(boolean0);
      
      StringReader stringReader0 = new StringReader("aUYO[&skX?G2og");
      assertNotNull(stringReader0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, 1, 1);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertNotNull(javaCharStream0);
      
      boolean boolean1 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "");
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0, 1);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertNotNull(javaParserTokenManager0);
      
      JavaParserTokenManager javaParserTokenManager1 = new JavaParserTokenManager((JavaCharStream) null);
      assertNotNull(javaParserTokenManager1);
      assertFalse(javaParserTokenManager1.equals((Object)javaParserTokenManager0));
      
      JavaParserTokenManager javaParserTokenManager2 = new JavaParserTokenManager(javaCharStream0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertNotNull(javaParserTokenManager2);
      assertFalse(javaParserTokenManager2.equals((Object)javaParserTokenManager0));
      assertFalse(javaParserTokenManager2.equals((Object)javaParserTokenManager1));
      
      // Undeclared exception!
      try { 
        javaParserTokenManager0.getNextToken();
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Lexical error at line 1, column 15.  Encountered: <EOF> after : \"\"
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      PipedInputStream pipedInputStream0 = new PipedInputStream(4261);
      assertEquals(0, pipedInputStream0.available());
      assertNotNull(pipedInputStream0);
      
      StringReader stringReader0 = new StringReader("il*Ye=:J[oSTNnw]4I");
      assertNotNull(stringReader0);
      
      StringReader stringReader1 = new StringReader("il*Ye=:J[oSTNnw]4I");
      assertNotNull(stringReader1);
      assertFalse(stringReader1.equals((Object)stringReader0));
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader1, 101, 101);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertNotNull(javaCharStream0);
      assertFalse(stringReader1.equals((Object)stringReader0));
      
      StringReader stringReader2 = new StringReader("4.>x'FzPYsj*]tT");
      assertNotNull(stringReader2);
      assertFalse(stringReader2.equals((Object)stringReader0));
      assertFalse(stringReader2.equals((Object)stringReader1));
      
      JavaCharStream javaCharStream1 = new JavaCharStream(stringReader2, 53, 12);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream1.bufpos);
      assertEquals(0, javaCharStream1.getBeginColumn());
      assertEquals(0, javaCharStream1.getBeginLine());
      assertNotNull(javaCharStream1);
      assertFalse(stringReader2.equals((Object)stringReader0));
      assertFalse(stringReader2.equals((Object)stringReader1));
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertNotNull(javaParserTokenManager0);
      assertFalse(stringReader1.equals((Object)stringReader2));
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertFalse(javaCharStream0.equals((Object)javaCharStream1));
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertEquals(1, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(101, token0.endLine);
      assertEquals(101, token0.beginColumn);
      assertEquals(101, token0.beginLine);
      assertEquals(102, token0.endColumn);
      assertEquals(74, token0.kind);
      assertEquals(101, javaCharStream0.getBeginLine());
      assertEquals(101, javaCharStream0.getEndLine());
      assertEquals(101, javaCharStream0.getBeginColumn());
      assertEquals(102, javaCharStream0.getColumn());
      assertEquals(102, javaCharStream0.getEndColumn());
      assertEquals(101, javaCharStream0.getLine());
      assertEquals("il", token0.toString());
      assertNotSame(stringReader1, stringReader2);
      assertNotSame(stringReader1, stringReader0);
      assertNotSame(javaCharStream0, javaCharStream1);
      assertNotNull(token0);
      assertFalse(stringReader1.equals((Object)stringReader2));
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertFalse(javaCharStream0.equals((Object)javaCharStream1));
      
      Token token1 = javaParserTokenManager0.getNextToken();
      assertEquals(2, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(101, token1.endLine);
      assertEquals(103, token1.kind);
      assertEquals(101, token1.beginLine);
      assertEquals(103, token1.beginColumn);
      assertEquals(103, token1.endColumn);
      assertEquals(101, javaCharStream0.getBeginLine());
      assertEquals(101, javaCharStream0.getEndLine());
      assertEquals(103, javaCharStream0.getColumn());
      assertEquals(103, javaCharStream0.getBeginColumn());
      assertEquals(103, javaCharStream0.getEndColumn());
      assertEquals(101, javaCharStream0.getLine());
      assertEquals("*", token1.toString());
      assertNotSame(stringReader1, stringReader2);
      assertNotSame(stringReader1, stringReader0);
      assertNotSame(javaCharStream0, javaCharStream1);
      assertNotSame(token1, token0);
      assertNotNull(token1);
      assertFalse(stringReader1.equals((Object)stringReader2));
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertFalse(javaCharStream0.equals((Object)javaCharStream1));
      assertFalse(token1.equals((Object)token0));
  }

  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      assertFalse(fileDescriptor0.valid());
      assertNotNull(fileDescriptor0);
      
      StringReader stringReader0 = new StringReader("aUYO[&skX?G2og");
      assertNotNull(stringReader0);
      
      int int0 = stringReader0.read();
      assertEquals(97, int0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, 3, (-3573));
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertNotNull(javaCharStream0);
      
      stringReader0.reset();
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertNotNull(javaParserTokenManager0);
      
      javaParserTokenManager0.MoreLexicalActions();
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      
      Token token0 = new Token();
      assertEquals(0, token0.endColumn);
      assertEquals(0, token0.kind);
      assertEquals(0, token0.endLine);
      assertEquals(0, token0.beginColumn);
      assertEquals(0, token0.beginLine);
      assertNull(token0.toString());
      assertNotNull(token0);
      
      Token token1 = javaParserTokenManager0.getNextToken();
      assertEquals(3, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(74, token1.kind);
      assertEquals(3, token1.endLine);
      assertEquals((-3573), token1.beginColumn);
      assertEquals((-3570), token1.endColumn);
      assertEquals(3, token1.beginLine);
      assertEquals((-3570), javaCharStream0.getColumn());
      assertEquals(3, javaCharStream0.getLine());
      assertEquals(3, javaCharStream0.getBeginLine());
      assertEquals((-3573), javaCharStream0.getBeginColumn());
      assertEquals((-3570), javaCharStream0.getEndColumn());
      assertEquals(3, javaCharStream0.getEndLine());
      assertEquals("aUYO", token1.toString());
      assertNotSame(token1, token0);
      assertNotNull(token1);
      assertFalse(token1.equals((Object)token0));
      
      JavaParserTokenManager javaParserTokenManager1 = new JavaParserTokenManager(javaCharStream0);
      assertEquals(3, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-3570), javaCharStream0.getColumn());
      assertEquals(3, javaCharStream0.getLine());
      assertEquals(3, javaCharStream0.getBeginLine());
      assertEquals((-3573), javaCharStream0.getBeginColumn());
      assertEquals((-3570), javaCharStream0.getEndColumn());
      assertEquals(3, javaCharStream0.getEndLine());
      assertNotNull(javaParserTokenManager1);
      assertFalse(javaParserTokenManager1.equals((Object)javaParserTokenManager0));
      
      JavaParserTokenManager javaParserTokenManager2 = new JavaParserTokenManager(javaCharStream0);
      assertEquals(3, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-3570), javaCharStream0.getColumn());
      assertEquals(3, javaCharStream0.getLine());
      assertEquals(3, javaCharStream0.getBeginLine());
      assertEquals((-3573), javaCharStream0.getBeginColumn());
      assertEquals((-3570), javaCharStream0.getEndColumn());
      assertEquals(3, javaCharStream0.getEndLine());
      assertNotNull(javaParserTokenManager2);
      assertFalse(javaParserTokenManager2.equals((Object)javaParserTokenManager1));
      assertFalse(javaParserTokenManager2.equals((Object)javaParserTokenManager0));
      
      javaParserTokenManager2.curChar = 'R';
      assertEquals((-3570), javaCharStream0.getColumn());
      assertEquals(3, javaCharStream0.getLine());
      assertEquals(3, javaCharStream0.getBeginLine());
      assertEquals((-3573), javaCharStream0.getBeginColumn());
      assertEquals((-3570), javaCharStream0.getEndColumn());
      assertEquals(3, javaCharStream0.getEndLine());
      
      Token token2 = javaParserTokenManager2.getNextToken();
      assertEquals(4, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-3569), token2.beginColumn);
      assertEquals((-3569), token2.endColumn);
      assertEquals(3, token2.endLine);
      assertEquals(3, token2.beginLine);
      assertEquals(81, token2.kind);
      assertEquals((-3569), javaCharStream0.getColumn());
      assertEquals((-3569), javaCharStream0.getEndColumn());
      assertEquals(3, javaCharStream0.getLine());
      assertEquals(3, javaCharStream0.getBeginLine());
      assertEquals(3, javaCharStream0.getEndLine());
      assertEquals((-3569), javaCharStream0.getBeginColumn());
      assertEquals("[", token2.toString());
      assertNotSame(javaParserTokenManager2, javaParserTokenManager1);
      assertNotSame(javaParserTokenManager2, javaParserTokenManager0);
      assertNotSame(token2, token1);
      assertNotSame(token2, token0);
      assertNotNull(token2);
      assertFalse(javaParserTokenManager2.equals((Object)javaParserTokenManager1));
      assertFalse(javaParserTokenManager2.equals((Object)javaParserTokenManager0));
      assertFalse(token2.equals((Object)token1));
      assertFalse(token2.equals((Object)token0));
      
      Token token3 = javaParserTokenManager0.getNextToken();
      assertEquals(0, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-3568), token3.endColumn);
      assertEquals(3, token3.endLine);
      assertEquals((-3568), token3.beginColumn);
      assertEquals(3, token3.beginLine);
      assertEquals(105, token3.kind);
      assertEquals((-3568), javaCharStream0.getColumn());
      assertEquals((-3568), javaCharStream0.getEndColumn());
      assertEquals(3, javaCharStream0.getLine());
      assertEquals(3, javaCharStream0.getBeginLine());
      assertEquals((-3568), javaCharStream0.getBeginColumn());
      assertEquals(3, javaCharStream0.getEndLine());
      assertEquals("&", token3.toString());
      assertNotSame(javaParserTokenManager0, javaParserTokenManager1);
      assertNotSame(javaParserTokenManager0, javaParserTokenManager2);
      assertNotSame(token3, token2);
      assertNotSame(token3, token0);
      assertNotSame(token3, token1);
      assertNotNull(token3);
      assertFalse(javaParserTokenManager0.equals((Object)javaParserTokenManager1));
      assertFalse(javaParserTokenManager0.equals((Object)javaParserTokenManager2));
      assertFalse(token3.equals((Object)token2));
      assertFalse(token3.equals((Object)token0));
      assertFalse(token3.equals((Object)token1));
      
      Token token4 = javaParserTokenManager1.getNextToken();
      assertEquals(3, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(3, token4.beginLine);
      assertEquals((-3567), token4.beginColumn);
      assertEquals(74, token4.kind);
      assertEquals((-3565), token4.endColumn);
      assertEquals(3, token4.endLine);
      assertEquals((-3565), javaCharStream0.getColumn());
      assertEquals((-3565), javaCharStream0.getEndColumn());
      assertEquals((-3567), javaCharStream0.getBeginColumn());
      assertEquals(3, javaCharStream0.getLine());
      assertEquals(3, javaCharStream0.getBeginLine());
      assertEquals(3, javaCharStream0.getEndLine());
      assertEquals("skX", token4.toString());
      assertNotSame(javaParserTokenManager1, javaParserTokenManager0);
      assertNotSame(javaParserTokenManager1, javaParserTokenManager2);
      assertNotSame(token4, token0);
      assertNotSame(token4, token2);
      assertNotSame(token4, token3);
      assertNotSame(token4, token1);
      assertNotNull(token4);
      assertFalse(javaParserTokenManager1.equals((Object)javaParserTokenManager0));
      assertFalse(javaParserTokenManager1.equals((Object)javaParserTokenManager2));
      assertFalse(token4.equals((Object)token0));
      assertFalse(token4.equals((Object)token2));
      assertFalse(token4.equals((Object)token3));
      assertFalse(token4.equals((Object)token1));
      
      Token token5 = javaParserTokenManager2.jjFillToken();
      assertEquals(3, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(81, token5.kind);
      assertEquals((-3567), token5.beginColumn);
      assertEquals(3, token5.beginLine);
      assertEquals((-3565), token5.endColumn);
      assertEquals(3, token5.endLine);
      assertEquals((-3565), javaCharStream0.getColumn());
      assertEquals((-3565), javaCharStream0.getEndColumn());
      assertEquals((-3567), javaCharStream0.getBeginColumn());
      assertEquals(3, javaCharStream0.getLine());
      assertEquals(3, javaCharStream0.getBeginLine());
      assertEquals(3, javaCharStream0.getEndLine());
      assertEquals("[", token5.toString());
      assertNotSame(javaParserTokenManager2, javaParserTokenManager1);
      assertNotSame(javaParserTokenManager2, javaParserTokenManager0);
      assertNotSame(token5, token1);
      assertNotSame(token5, token4);
      assertNotSame(token5, token3);
      assertNotSame(token5, token0);
      assertNotSame(token5, token2);
      assertNotNull(token5);
      assertFalse(javaParserTokenManager2.equals((Object)javaParserTokenManager1));
      assertFalse(javaParserTokenManager2.equals((Object)javaParserTokenManager0));
      assertFalse(token5.equals((Object)token1));
      assertFalse(token5.equals((Object)token4));
      assertFalse(token5.equals((Object)token3));
      assertFalse(token5.equals((Object)token0));
      assertFalse(token5.equals((Object)token2));
      
      // Undeclared exception!
      try { 
        javaParserTokenManager1.SwitchTo(112);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Error: Ignoring invalid lexical state : 112. State unchanged.
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      PipedInputStream pipedInputStream0 = new PipedInputStream(4261);
      assertEquals(0, pipedInputStream0.available());
      assertNotNull(pipedInputStream0);
      
      StringReader stringReader0 = new StringReader("0~_lPk+0Ny&");
      assertNotNull(stringReader0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertNotNull(javaCharStream0);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertNotNull(javaParserTokenManager0);
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.bufpos);
      assertEquals(1, token0.endLine);
      assertEquals(1, token0.beginColumn);
      assertEquals(66, token0.kind);
      assertEquals(1, token0.beginLine);
      assertEquals(1, token0.endColumn);
      assertEquals(1, javaCharStream0.getBeginColumn());
      assertEquals(1, javaCharStream0.getColumn());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(1, javaCharStream0.getEndColumn());
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals("0", token0.toString());
      assertNotNull(token0);
      
      Token token1 = javaParserTokenManager0.getNextToken();
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(1, javaCharStream0.bufpos);
      assertEquals(90, token1.kind);
      assertEquals(2, token1.endColumn);
      assertEquals(1, token1.beginLine);
      assertEquals(2, token1.beginColumn);
      assertEquals(1, token1.endLine);
      assertEquals(2, javaCharStream0.getBeginColumn());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(2, javaCharStream0.getEndColumn());
      assertEquals(2, javaCharStream0.getColumn());
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals("~", token1.toString());
      assertNotSame(token1, token0);
      assertNotNull(token1);
      assertFalse(token1.equals((Object)token0));
      
      Token token2 = javaParserTokenManager0.jjFillToken();
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(1, javaCharStream0.bufpos);
      assertEquals(1, token2.endLine);
      assertEquals(90, token2.kind);
      assertEquals(2, token2.beginColumn);
      assertEquals(2, token2.endColumn);
      assertEquals(1, token2.beginLine);
      assertEquals(2, javaCharStream0.getBeginColumn());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(2, javaCharStream0.getEndColumn());
      assertEquals(2, javaCharStream0.getColumn());
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals("~", token2.toString());
      assertNotSame(token2, token0);
      assertNotSame(token2, token1);
      assertNotNull(token2);
      assertFalse(token2.equals((Object)token0));
      assertFalse(token2.equals((Object)token1));
      
      Token token3 = javaParserTokenManager0.jjFillToken();
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(1, javaCharStream0.bufpos);
      assertEquals(1, token3.beginLine);
      assertEquals(90, token3.kind);
      assertEquals(1, token3.endLine);
      assertEquals(2, token3.endColumn);
      assertEquals(2, token3.beginColumn);
      assertEquals(2, javaCharStream0.getBeginColumn());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(2, javaCharStream0.getEndColumn());
      assertEquals(2, javaCharStream0.getColumn());
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals("~", token3.toString());
      assertNotSame(token3, token0);
      assertNotSame(token3, token2);
      assertNotSame(token3, token1);
      assertNotNull(token3);
      assertFalse(token3.equals((Object)token0));
      assertFalse(token3.equals((Object)token2));
      assertFalse(token3.equals((Object)token1));
  }

  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      StringReader stringReader0 = new StringReader("if");
      assertNotNull(stringReader0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, 803, 2147418127);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertNotNull(javaCharStream0);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertNotNull(javaParserTokenManager0);
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(1, javaCharStream0.bufpos);
      assertEquals(36, token0.kind);
      assertEquals(803, token0.beginLine);
      assertEquals(2147418128, token0.endColumn);
      assertEquals(2147418127, token0.beginColumn);
      assertEquals(803, token0.endLine);
      assertEquals(2147418128, javaCharStream0.getColumn());
      assertEquals(803, javaCharStream0.getBeginLine());
      assertEquals(803, javaCharStream0.getLine());
      assertEquals(2147418128, javaCharStream0.getEndColumn());
      assertEquals(2147418127, javaCharStream0.getBeginColumn());
      assertEquals(803, javaCharStream0.getEndLine());
      assertEquals("if", token0.toString());
      assertNotNull(token0);
  }

  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      StringReader stringReader0 = new StringReader("protected");
      assertNotNull(stringReader0);
      
      StringReader stringReader1 = new StringReader("protected");
      assertNotNull(stringReader1);
      assertFalse(stringReader1.equals((Object)stringReader0));
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, 116, 118);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertNotNull(javaCharStream0);
      assertFalse(stringReader0.equals((Object)stringReader1));
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertNotNull(javaParserTokenManager0);
      assertFalse(stringReader0.equals((Object)stringReader1));
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertEquals(8, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(118, token0.beginColumn);
      assertEquals(126, token0.endColumn);
      assertEquals(116, token0.endLine);
      assertEquals(48, token0.kind);
      assertEquals(116, token0.beginLine);
      assertEquals(126, javaCharStream0.getColumn());
      assertEquals(126, javaCharStream0.getEndColumn());
      assertEquals(116, javaCharStream0.getBeginLine());
      assertEquals(118, javaCharStream0.getBeginColumn());
      assertEquals(116, javaCharStream0.getEndLine());
      assertEquals(116, javaCharStream0.getLine());
      assertEquals("protected", token0.toString());
      assertNotSame(stringReader0, stringReader1);
      assertNotNull(token0);
      assertFalse(stringReader0.equals((Object)stringReader1));
  }

  @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      assertFalse(fileDescriptor0.valid());
      assertNotNull(fileDescriptor0);
      
      StringReader stringReader0 = new StringReader("t!hR%]{");
      assertNotNull(stringReader0);
      
      StringReader stringReader1 = new StringReader("com.soops.CEN4010.JMCA.JParser.TokenMgrError");
      assertNotNull(stringReader1);
      assertFalse(stringReader1.equals((Object)stringReader0));
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader1, 47, 49, 2288);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertNotNull(javaCharStream0);
      assertFalse(stringReader1.equals((Object)stringReader0));
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertNotNull(javaParserTokenManager0);
      assertFalse(stringReader1.equals((Object)stringReader0));
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertEquals(2, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(74, token0.kind);
      assertEquals(51, token0.endColumn);
      assertEquals(47, token0.endLine);
      assertEquals(49, token0.beginColumn);
      assertEquals(47, token0.beginLine);
      assertEquals(51, javaCharStream0.getEndColumn());
      assertEquals(47, javaCharStream0.getEndLine());
      assertEquals(47, javaCharStream0.getBeginLine());
      assertEquals(51, javaCharStream0.getColumn());
      assertEquals(49, javaCharStream0.getBeginColumn());
      assertEquals(47, javaCharStream0.getLine());
      assertEquals("com", token0.toString());
      assertNotSame(stringReader1, stringReader0);
      assertNotNull(token0);
      assertFalse(stringReader1.equals((Object)stringReader0));
      
      Token token1 = javaParserTokenManager0.getNextToken();
      assertEquals(3, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(52, token1.beginColumn);
      assertEquals(85, token1.kind);
      assertEquals(52, token1.endColumn);
      assertEquals(47, token1.beginLine);
      assertEquals(47, token1.endLine);
      assertEquals(52, javaCharStream0.getColumn());
      assertEquals(52, javaCharStream0.getEndColumn());
      assertEquals(47, javaCharStream0.getEndLine());
      assertEquals(47, javaCharStream0.getBeginLine());
      assertEquals(52, javaCharStream0.getBeginColumn());
      assertEquals(47, javaCharStream0.getLine());
      assertEquals(".", token1.toString());
      assertNotSame(stringReader1, stringReader0);
      assertNotSame(token1, token0);
      assertNotNull(token1);
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertFalse(token1.equals((Object)token0));
      
      Token token2 = javaParserTokenManager0.getNextToken();
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(8, javaCharStream0.bufpos);
      assertEquals(74, token2.kind);
      assertEquals(53, token2.beginColumn);
      assertEquals(57, token2.endColumn);
      assertEquals(47, token2.beginLine);
      assertEquals(47, token2.endLine);
      assertEquals(53, javaCharStream0.getBeginColumn());
      assertEquals(47, javaCharStream0.getEndLine());
      assertEquals(47, javaCharStream0.getBeginLine());
      assertEquals(57, javaCharStream0.getEndColumn());
      assertEquals(47, javaCharStream0.getLine());
      assertEquals(57, javaCharStream0.getColumn());
      assertEquals("soops", token2.toString());
      assertNotSame(stringReader1, stringReader0);
      assertNotSame(token2, token0);
      assertNotSame(token2, token1);
      assertNotNull(token2);
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertFalse(token2.equals((Object)token0));
      assertFalse(token2.equals((Object)token1));
      
      JavaParserTokenManager javaParserTokenManager1 = new JavaParserTokenManager(javaCharStream0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(8, javaCharStream0.bufpos);
      assertEquals(53, javaCharStream0.getBeginColumn());
      assertEquals(47, javaCharStream0.getEndLine());
      assertEquals(47, javaCharStream0.getBeginLine());
      assertEquals(57, javaCharStream0.getEndColumn());
      assertEquals(47, javaCharStream0.getLine());
      assertEquals(57, javaCharStream0.getColumn());
      assertNotNull(javaParserTokenManager1);
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertFalse(javaParserTokenManager1.equals((Object)javaParserTokenManager0));
      
      Token token3 = javaParserTokenManager1.getNextToken();
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(9, javaCharStream0.bufpos);
      assertEquals(58, token3.beginColumn);
      assertEquals(47, token3.endLine);
      assertEquals(85, token3.kind);
      assertEquals(58, token3.endColumn);
      assertEquals(47, token3.beginLine);
      assertEquals(47, javaCharStream0.getEndLine());
      assertEquals(47, javaCharStream0.getBeginLine());
      assertEquals(58, javaCharStream0.getBeginColumn());
      assertEquals(58, javaCharStream0.getColumn());
      assertEquals(58, javaCharStream0.getEndColumn());
      assertEquals(47, javaCharStream0.getLine());
      assertEquals(".", token3.toString());
      assertNotSame(stringReader1, stringReader0);
      assertNotSame(javaParserTokenManager1, javaParserTokenManager0);
      assertNotSame(token3, token2);
      assertNotSame(token3, token1);
      assertNotSame(token3, token0);
      assertNotNull(token3);
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertFalse(javaParserTokenManager1.equals((Object)javaParserTokenManager0));
      assertFalse(token3.equals((Object)token2));
      assertFalse(token3.equals((Object)token1));
      assertFalse(token3.equals((Object)token0));
  }

  @Test(timeout = 4000)
  public void test162()  throws Throwable  {
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      assertFalse(fileDescriptor0.valid());
      assertNotNull(fileDescriptor0);
      
      PipedInputStream pipedInputStream0 = new PipedInputStream(26);
      assertEquals(0, pipedInputStream0.available());
      assertNotNull(pipedInputStream0);
      
      pipedInputStream0.close();
      assertEquals(0, pipedInputStream0.available());
      
      JavaCharStream javaCharStream0 = new JavaCharStream(pipedInputStream0, 5, (-45));
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, pipedInputStream0.available());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertNotNull(javaCharStream0);
      
      StringReader stringReader0 = new StringReader("==");
      assertNotNull(stringReader0);
      
      JavaCharStream javaCharStream1 = new JavaCharStream(stringReader0, 26, 49, 3620);
      assertEquals((-1), javaCharStream1.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream1.getBeginColumn());
      assertEquals(0, javaCharStream1.getBeginLine());
      assertNotNull(javaCharStream1);
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream1);
      assertEquals((-1), javaCharStream1.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream1.getBeginColumn());
      assertEquals(0, javaCharStream1.getBeginLine());
      assertNotNull(javaParserTokenManager0);
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertEquals(1, javaCharStream1.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(26, token0.beginLine);
      assertEquals(26, token0.endLine);
      assertEquals(93, token0.kind);
      assertEquals(50, token0.endColumn);
      assertEquals(49, token0.beginColumn);
      assertEquals(50, javaCharStream1.getColumn());
      assertEquals(50, javaCharStream1.getEndColumn());
      assertEquals(26, javaCharStream1.getBeginLine());
      assertEquals(49, javaCharStream1.getBeginColumn());
      assertEquals(26, javaCharStream1.getLine());
      assertEquals(26, javaCharStream1.getEndLine());
      assertEquals("==", token0.toString());
      assertNotSame(javaCharStream1, javaCharStream0);
      assertNotNull(token0);
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      
      javaParserTokenManager0.MoreLexicalActions();
      assertEquals(1, javaCharStream1.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(50, javaCharStream1.getColumn());
      assertEquals(50, javaCharStream1.getEndColumn());
      assertEquals(26, javaCharStream1.getBeginLine());
      assertEquals(49, javaCharStream1.getBeginColumn());
      assertEquals(26, javaCharStream1.getLine());
      assertEquals(26, javaCharStream1.getEndLine());
      assertNotSame(javaCharStream1, javaCharStream0);
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      
      javaParserTokenManager0.MoreLexicalActions();
      assertEquals(1, javaCharStream1.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(50, javaCharStream1.getColumn());
      assertEquals(50, javaCharStream1.getEndColumn());
      assertEquals(26, javaCharStream1.getBeginLine());
      assertEquals(49, javaCharStream1.getBeginColumn());
      assertEquals(26, javaCharStream1.getLine());
      assertEquals(26, javaCharStream1.getEndLine());
      assertNotSame(javaCharStream1, javaCharStream0);
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      
      Token token1 = javaParserTokenManager0.getNextToken();
      assertEquals(0, javaCharStream1.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(50, token1.beginColumn);
      assertEquals(50, token1.endColumn);
      assertEquals(26, token1.beginLine);
      assertEquals(0, token1.kind);
      assertEquals(26, token1.endLine);
      assertEquals(50, javaCharStream1.getColumn());
      assertEquals(50, javaCharStream1.getEndColumn());
      assertEquals(50, javaCharStream1.getBeginColumn());
      assertEquals(26, javaCharStream1.getBeginLine());
      assertEquals(26, javaCharStream1.getLine());
      assertEquals(26, javaCharStream1.getEndLine());
      assertEquals("", token1.toString());
      assertNotSame(javaCharStream1, javaCharStream0);
      assertNotSame(token1, token0);
      assertNotNull(token1);
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      assertFalse(token1.equals((Object)token0));
  }

  @Test(timeout = 4000)
  public void test163()  throws Throwable  {
      int int0 = JavaParserConstants.LSHIFT;
      assertEquals(109, int0);
      
      StringReader stringReader0 = new StringReader("w%DN*pejbGS{#17g'Z");
      assertNotNull(stringReader0);
      
      StringReader stringReader1 = new StringReader("24$dhkA*");
      assertNotNull(stringReader1);
      assertFalse(stringReader1.equals((Object)stringReader0));
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader1, 2786, 10);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertNotNull(javaCharStream0);
      assertFalse(stringReader1.equals((Object)stringReader0));
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertNotNull(javaParserTokenManager0);
      assertFalse(stringReader1.equals((Object)stringReader0));
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(1, javaCharStream0.bufpos);
      assertEquals(10, token0.beginColumn);
      assertEquals(2786, token0.endLine);
      assertEquals(11, token0.endColumn);
      assertEquals(66, token0.kind);
      assertEquals(2786, token0.beginLine);
      assertEquals(2786, javaCharStream0.getEndLine());
      assertEquals(2786, javaCharStream0.getLine());
      assertEquals(10, javaCharStream0.getBeginColumn());
      assertEquals(11, javaCharStream0.getColumn());
      assertEquals(11, javaCharStream0.getEndColumn());
      assertEquals(2786, javaCharStream0.getBeginLine());
      assertEquals("24", token0.toString());
      assertNotSame(stringReader1, stringReader0);
      assertNotNull(token0);
      assertFalse(stringReader1.equals((Object)stringReader0));
      
      Token token1 = javaParserTokenManager0.getNextToken();
      assertEquals(6, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(2786, token1.endLine);
      assertEquals(16, token1.endColumn);
      assertEquals(12, token1.beginColumn);
      assertEquals(2786, token1.beginLine);
      assertEquals(74, token1.kind);
      assertEquals(2786, javaCharStream0.getEndLine());
      assertEquals(2786, javaCharStream0.getLine());
      assertEquals(12, javaCharStream0.getBeginColumn());
      assertEquals(16, javaCharStream0.getColumn());
      assertEquals(16, javaCharStream0.getEndColumn());
      assertEquals(2786, javaCharStream0.getBeginLine());
      assertEquals("$dhkA", token1.toString());
      assertNotSame(stringReader1, stringReader0);
      assertNotSame(token1, token0);
      assertNotNull(token1);
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertFalse(token1.equals((Object)token0));
      
      JavaParserTokenManager javaParserTokenManager1 = new JavaParserTokenManager(javaCharStream0);
      assertEquals(6, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(2786, javaCharStream0.getEndLine());
      assertEquals(2786, javaCharStream0.getLine());
      assertEquals(12, javaCharStream0.getBeginColumn());
      assertEquals(16, javaCharStream0.getColumn());
      assertEquals(16, javaCharStream0.getEndColumn());
      assertEquals(2786, javaCharStream0.getBeginLine());
      assertNotNull(javaParserTokenManager1);
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertFalse(javaParserTokenManager1.equals((Object)javaParserTokenManager0));
      
      Token token2 = javaParserTokenManager1.getNextToken();
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(7, javaCharStream0.bufpos);
      assertEquals(17, token2.endColumn);
      assertEquals(103, token2.kind);
      assertEquals(2786, token2.endLine);
      assertEquals(2786, token2.beginLine);
      assertEquals(17, token2.beginColumn);
      assertEquals(2786, javaCharStream0.getEndLine());
      assertEquals(2786, javaCharStream0.getLine());
      assertEquals(17, javaCharStream0.getColumn());
      assertEquals(17, javaCharStream0.getEndColumn());
      assertEquals(2786, javaCharStream0.getBeginLine());
      assertEquals(17, javaCharStream0.getBeginColumn());
      assertEquals("*", token2.toString());
      assertNotSame(stringReader1, stringReader0);
      assertNotSame(javaParserTokenManager1, javaParserTokenManager0);
      assertNotSame(token2, token0);
      assertNotSame(token2, token1);
      assertNotNull(token2);
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertFalse(javaParserTokenManager1.equals((Object)javaParserTokenManager0));
      assertFalse(token2.equals((Object)token0));
      assertFalse(token2.equals((Object)token1));
  }

  @Test(timeout = 4000)
  public void test164()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      StringReader stringReader0 = new StringReader("protected");
      assertNotNull(stringReader0);
      
      StringReader stringReader1 = new StringReader("");
      assertNotNull(stringReader1);
      assertFalse(stringReader1.equals((Object)stringReader0));
      
      int int0 = stringReader1.read();
      assertEquals((-1), int0);
      assertNotSame(stringReader1, stringReader0);
      assertFalse(stringReader1.equals((Object)stringReader0));
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, 1592, 1592);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertNotNull(javaCharStream0);
      assertFalse(stringReader0.equals((Object)stringReader1));
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertNotNull(javaParserTokenManager0);
      assertFalse(stringReader0.equals((Object)stringReader1));
      
      boolean boolean1 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "protected");
      assertFalse(boolean1);
      assertFalse(boolean1 == boolean0);
      
      JavaParserTokenManager javaParserTokenManager1 = new JavaParserTokenManager(javaCharStream0, 3);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertNotNull(javaParserTokenManager1);
      assertFalse(stringReader0.equals((Object)stringReader1));
      assertFalse(javaParserTokenManager1.equals((Object)javaParserTokenManager0));
      
      // Undeclared exception!
      try { 
        javaParserTokenManager1.getNextToken();
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Lexical error at line 1592, column 1601.  Encountered: <EOF> after : \"\"
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test165()  throws Throwable  {
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      assertFalse(fileDescriptor0.valid());
      assertNotNull(fileDescriptor0);
      
      StringReader stringReader0 = new StringReader("\"\n\"");
      assertNotNull(stringReader0);
      
      StringReader stringReader1 = new StringReader("\"\n\"");
      assertNotNull(stringReader1);
      assertFalse(stringReader1.equals((Object)stringReader0));
      
      StringReader stringReader2 = new StringReader("-=");
      assertNotNull(stringReader2);
      assertFalse(stringReader2.equals((Object)stringReader0));
      assertFalse(stringReader2.equals((Object)stringReader1));
      
      StringReader stringReader3 = new StringReader("-=");
      assertNotNull(stringReader3);
      assertFalse(stringReader3.equals((Object)stringReader1));
      assertFalse(stringReader3.equals((Object)stringReader0));
      assertFalse(stringReader3.equals((Object)stringReader2));
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader3, 1459, 74);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertNotNull(javaCharStream0);
      assertFalse(stringReader3.equals((Object)stringReader1));
      assertFalse(stringReader3.equals((Object)stringReader0));
      assertFalse(stringReader3.equals((Object)stringReader2));
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertNotNull(javaParserTokenManager0);
      assertFalse(stringReader3.equals((Object)stringReader1));
      assertFalse(stringReader3.equals((Object)stringReader0));
      assertFalse(stringReader3.equals((Object)stringReader2));
      
      javaParserTokenManager0.jjmatchedPos = 1459;
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(1, javaCharStream0.bufpos);
      assertEquals(74, token0.beginColumn);
      assertEquals(75, token0.endColumn);
      assertEquals(111, token0.kind);
      assertEquals(1459, token0.beginLine);
      assertEquals(1459, token0.endLine);
      assertEquals(1459, javaCharStream0.getLine());
      assertEquals(74, javaCharStream0.getBeginColumn());
      assertEquals(75, javaCharStream0.getEndColumn());
      assertEquals(1459, javaCharStream0.getBeginLine());
      assertEquals(75, javaCharStream0.getColumn());
      assertEquals(1459, javaCharStream0.getEndLine());
      assertEquals("-=", token0.toString());
      assertNotSame(stringReader3, stringReader1);
      assertNotSame(stringReader3, stringReader0);
      assertNotSame(stringReader3, stringReader2);
      assertNotNull(token0);
      assertFalse(stringReader3.equals((Object)stringReader1));
      assertFalse(stringReader3.equals((Object)stringReader0));
      assertFalse(stringReader3.equals((Object)stringReader2));
      
      JavaParserTokenManager javaParserTokenManager1 = new JavaParserTokenManager(javaCharStream0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(1, javaCharStream0.bufpos);
      assertEquals(1459, javaCharStream0.getLine());
      assertEquals(74, javaCharStream0.getBeginColumn());
      assertEquals(75, javaCharStream0.getEndColumn());
      assertEquals(1459, javaCharStream0.getBeginLine());
      assertEquals(75, javaCharStream0.getColumn());
      assertEquals(1459, javaCharStream0.getEndLine());
      assertNotNull(javaParserTokenManager1);
      assertFalse(stringReader3.equals((Object)stringReader1));
      assertFalse(stringReader3.equals((Object)stringReader0));
      assertFalse(stringReader3.equals((Object)stringReader2));
      assertFalse(javaParserTokenManager1.equals((Object)javaParserTokenManager0));
      
      Token token1 = javaParserTokenManager1.getNextToken();
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.bufpos);
      assertEquals(75, token1.beginColumn);
      assertEquals(1459, token1.beginLine);
      assertEquals(1459, token1.endLine);
      assertEquals(0, token1.kind);
      assertEquals(75, token1.endColumn);
      assertEquals(1459, javaCharStream0.getLine());
      assertEquals(75, javaCharStream0.getEndColumn());
      assertEquals(75, javaCharStream0.getBeginColumn());
      assertEquals(1459, javaCharStream0.getBeginLine());
      assertEquals(75, javaCharStream0.getColumn());
      assertEquals(1459, javaCharStream0.getEndLine());
      assertEquals("", token1.toString());
      assertNotSame(stringReader3, stringReader1);
      assertNotSame(stringReader3, stringReader0);
      assertNotSame(stringReader3, stringReader2);
      assertNotSame(javaParserTokenManager1, javaParserTokenManager0);
      assertNotSame(token1, token0);
      assertNotNull(token1);
      assertFalse(stringReader3.equals((Object)stringReader1));
      assertFalse(stringReader3.equals((Object)stringReader0));
      assertFalse(stringReader3.equals((Object)stringReader2));
      assertFalse(javaParserTokenManager1.equals((Object)javaParserTokenManager0));
      assertFalse(token1.equals((Object)token0));
  }

  @Test(timeout = 4000)
  public void test166()  throws Throwable  {
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      assertFalse(fileDescriptor0.valid());
      assertNotNull(fileDescriptor0);
      
      StringReader stringReader0 = new StringReader("l{f");
      assertNotNull(stringReader0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, (-250), (-1004), 27);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertNotNull(javaCharStream0);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertNotNull(javaParserTokenManager0);
      
      javaCharStream0.available = 27;
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertEquals(0, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1004), token0.endColumn);
      assertEquals(74, token0.kind);
      assertEquals((-250), token0.endLine);
      assertEquals((-1004), token0.beginColumn);
      assertEquals((-250), token0.beginLine);
      assertEquals((-250), javaCharStream0.getBeginLine());
      assertEquals((-1004), javaCharStream0.getColumn());
      assertEquals((-250), javaCharStream0.getEndLine());
      assertEquals((-250), javaCharStream0.getLine());
      assertEquals((-1004), javaCharStream0.getEndColumn());
      assertEquals((-1004), javaCharStream0.getBeginColumn());
      assertEquals("l", token0.toString());
      assertNotNull(token0);
      
      Token token1 = javaParserTokenManager0.getNextToken();
      assertEquals(1, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(79, token1.kind);
      assertEquals((-250), token1.endLine);
      assertEquals((-1003), token1.endColumn);
      assertEquals((-250), token1.beginLine);
      assertEquals((-1003), token1.beginColumn);
      assertEquals((-250), javaCharStream0.getBeginLine());
      assertEquals((-1003), javaCharStream0.getColumn());
      assertEquals((-250), javaCharStream0.getEndLine());
      assertEquals((-250), javaCharStream0.getLine());
      assertEquals((-1003), javaCharStream0.getEndColumn());
      assertEquals((-1003), javaCharStream0.getBeginColumn());
      assertEquals("{", token1.toString());
      assertNotSame(token1, token0);
      assertNotNull(token1);
      assertFalse(token1.equals((Object)token0));
      
      Token token2 = javaParserTokenManager0.getNextToken();
      assertEquals(0, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-250), token2.endLine);
      assertEquals(74, token2.kind);
      assertEquals((-1002), token2.endColumn);
      assertEquals((-250), token2.beginLine);
      assertEquals((-1002), token2.beginColumn);
      assertEquals((-250), javaCharStream0.getBeginLine());
      assertEquals((-250), javaCharStream0.getEndLine());
      assertEquals((-250), javaCharStream0.getLine());
      assertEquals((-1002), javaCharStream0.getColumn());
      assertEquals((-1002), javaCharStream0.getEndColumn());
      assertEquals((-1002), javaCharStream0.getBeginColumn());
      assertEquals("f", token2.toString());
      assertNotSame(token2, token0);
      assertNotSame(token2, token1);
      assertNotNull(token2);
      assertFalse(token2.equals((Object)token0));
      assertFalse(token2.equals((Object)token1));
  }

  @Test(timeout = 4000)
  public void test167()  throws Throwable  {
      StringReader stringReader0 = new StringReader("FoFqL*&l!43Zy");
      assertNotNull(stringReader0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, (-797), (-797));
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertNotNull(javaCharStream0);
      
      JavaCharStream javaCharStream1 = new JavaCharStream(stringReader0, (-105), (-105));
      assertEquals((-1), javaCharStream1.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream1.getBeginLine());
      assertEquals(0, javaCharStream1.getBeginColumn());
      assertNotNull(javaCharStream1);
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream1);
      assertEquals((-1), javaCharStream1.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream1.getBeginLine());
      assertEquals(0, javaCharStream1.getBeginColumn());
      assertNotNull(javaParserTokenManager0);
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      
      javaParserTokenManager0.jjround = (-1);
      assertEquals(0, javaCharStream1.getBeginLine());
      assertEquals(0, javaCharStream1.getBeginColumn());
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertEquals(0, javaCharStream1.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-105), token0.endColumn);
      assertEquals((-105), token0.endLine);
      assertEquals((-105), token0.beginColumn);
      assertEquals((-105), token0.beginLine);
      assertEquals(74, token0.kind);
      assertEquals((-105), javaCharStream1.getEndLine());
      assertEquals((-105), javaCharStream1.getEndColumn());
      assertEquals((-105), javaCharStream1.getColumn());
      assertEquals((-105), javaCharStream1.getBeginColumn());
      assertEquals((-105), javaCharStream1.getBeginLine());
      assertEquals((-105), javaCharStream1.getLine());
      assertEquals("F", token0.toString());
      assertNotSame(javaCharStream1, javaCharStream0);
      assertNotNull(token0);
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      
      javaParserTokenManager0.MoreLexicalActions();
      assertEquals(0, javaCharStream1.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-105), javaCharStream1.getEndLine());
      assertEquals((-105), javaCharStream1.getEndColumn());
      assertEquals((-105), javaCharStream1.getColumn());
      assertEquals((-105), javaCharStream1.getBeginColumn());
      assertEquals((-105), javaCharStream1.getBeginLine());
      assertEquals((-105), javaCharStream1.getLine());
      assertNotSame(javaCharStream1, javaCharStream0);
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      
      javaParserTokenManager0.MoreLexicalActions();
      assertEquals(0, javaCharStream1.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-105), javaCharStream1.getEndLine());
      assertEquals((-105), javaCharStream1.getEndColumn());
      assertEquals((-105), javaCharStream1.getColumn());
      assertEquals((-105), javaCharStream1.getBeginColumn());
      assertEquals((-105), javaCharStream1.getBeginLine());
      assertEquals((-105), javaCharStream1.getLine());
      assertNotSame(javaCharStream1, javaCharStream0);
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      
      Token token1 = javaParserTokenManager0.getNextToken();
      assertEquals(3, javaCharStream1.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-105), token1.beginLine);
      assertEquals((-105), token1.endLine);
      assertEquals((-101), token1.endColumn);
      assertEquals(74, token1.kind);
      assertEquals((-104), token1.beginColumn);
      assertEquals((-105), javaCharStream1.getEndLine());
      assertEquals((-104), javaCharStream1.getBeginColumn());
      assertEquals((-101), javaCharStream1.getColumn());
      assertEquals((-105), javaCharStream1.getBeginLine());
      assertEquals((-101), javaCharStream1.getEndColumn());
      assertEquals((-105), javaCharStream1.getLine());
      assertEquals("oFqL", token1.toString());
      assertNotSame(javaCharStream1, javaCharStream0);
      assertNotSame(token1, token0);
      assertNotNull(token1);
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      assertFalse(token1.equals((Object)token0));
  }

  @Test(timeout = 4000)
  public void test168()  throws Throwable  {
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      assertFalse(fileDescriptor0.valid());
      assertNotNull(fileDescriptor0);
      
      StringReader stringReader0 = new StringReader("");
      assertNotNull(stringReader0);
      
      StringReader stringReader1 = new StringReader("B*N5}-*/`");
      assertNotNull(stringReader1);
      assertFalse(stringReader1.equals((Object)stringReader0));
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader1, 45, (-2573));
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertNotNull(javaCharStream0);
      assertFalse(stringReader1.equals((Object)stringReader0));
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertNotNull(javaParserTokenManager0);
      assertFalse(stringReader1.equals((Object)stringReader0));
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.bufpos);
      assertEquals(45, token0.beginLine);
      assertEquals(74, token0.kind);
      assertEquals(45, token0.endLine);
      assertEquals((-2573), token0.endColumn);
      assertEquals((-2573), token0.beginColumn);
      assertEquals(45, javaCharStream0.getBeginLine());
      assertEquals((-2573), javaCharStream0.getColumn());
      assertEquals(45, javaCharStream0.getLine());
      assertEquals((-2573), javaCharStream0.getBeginColumn());
      assertEquals(45, javaCharStream0.getEndLine());
      assertEquals((-2573), javaCharStream0.getEndColumn());
      assertEquals("B", token0.toString());
      assertNotSame(stringReader1, stringReader0);
      assertNotNull(token0);
      assertFalse(stringReader1.equals((Object)stringReader0));
      
      Token token1 = javaParserTokenManager0.getNextToken();
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(1, javaCharStream0.bufpos);
      assertEquals(45, token1.beginLine);
      assertEquals(45, token1.endLine);
      assertEquals((-2572), token1.beginColumn);
      assertEquals(103, token1.kind);
      assertEquals((-2572), token1.endColumn);
      assertEquals(45, javaCharStream0.getBeginLine());
      assertEquals((-2572), javaCharStream0.getColumn());
      assertEquals(45, javaCharStream0.getLine());
      assertEquals((-2572), javaCharStream0.getBeginColumn());
      assertEquals(45, javaCharStream0.getEndLine());
      assertEquals((-2572), javaCharStream0.getEndColumn());
      assertEquals("*", token1.toString());
      assertNotSame(stringReader1, stringReader0);
      assertNotSame(token1, token0);
      assertNotNull(token1);
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertFalse(token1.equals((Object)token0));
  }

  @Test(timeout = 4000)
  public void test169()  throws Throwable  {
      StringReader stringReader0 = new StringReader("SuFK[%.UpA)?y)LoAtU");
      assertNotNull(stringReader0);
      
      StringReader stringReader1 = new StringReader(">j=2>PH9yytXFz?/");
      assertNotNull(stringReader1);
      assertFalse(stringReader1.equals((Object)stringReader0));
      
      StringReader stringReader2 = new StringReader("SuFK[%.UpA)?y)LoAtU");
      assertNotNull(stringReader2);
      assertFalse(stringReader2.equals((Object)stringReader0));
      assertFalse(stringReader2.equals((Object)stringReader1));
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, (-2125), 23, 177);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertNotNull(javaCharStream0);
      assertFalse(stringReader0.equals((Object)stringReader2));
      assertFalse(stringReader0.equals((Object)stringReader1));
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertNotNull(javaParserTokenManager0);
      assertFalse(stringReader0.equals((Object)stringReader2));
      assertFalse(stringReader0.equals((Object)stringReader1));
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(3, javaCharStream0.bufpos);
      assertEquals(74, token0.kind);
      assertEquals(23, token0.beginColumn);
      assertEquals((-2125), token0.endLine);
      assertEquals(26, token0.endColumn);
      assertEquals((-2125), token0.beginLine);
      assertEquals((-2125), javaCharStream0.getLine());
      assertEquals((-2125), javaCharStream0.getEndLine());
      assertEquals(26, javaCharStream0.getEndColumn());
      assertEquals(26, javaCharStream0.getColumn());
      assertEquals((-2125), javaCharStream0.getBeginLine());
      assertEquals(23, javaCharStream0.getBeginColumn());
      assertEquals("SuFK", token0.toString());
      assertNotSame(stringReader0, stringReader2);
      assertNotSame(stringReader0, stringReader1);
      assertNotNull(token0);
      assertFalse(stringReader0.equals((Object)stringReader2));
      assertFalse(stringReader0.equals((Object)stringReader1));
      
      javaParserTokenManager0.TokenLexicalActions(token0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(3, javaCharStream0.bufpos);
      assertEquals(74, token0.kind);
      assertEquals(23, token0.beginColumn);
      assertEquals((-2125), token0.endLine);
      assertEquals(26, token0.endColumn);
      assertEquals((-2125), token0.beginLine);
      assertEquals((-2125), javaCharStream0.getLine());
      assertEquals((-2125), javaCharStream0.getEndLine());
      assertEquals(26, javaCharStream0.getEndColumn());
      assertEquals(26, javaCharStream0.getColumn());
      assertEquals((-2125), javaCharStream0.getBeginLine());
      assertEquals(23, javaCharStream0.getBeginColumn());
      assertEquals("SuFK", token0.toString());
      assertNotSame(stringReader0, stringReader2);
      assertNotSame(stringReader0, stringReader1);
      assertFalse(stringReader0.equals((Object)stringReader2));
      assertFalse(stringReader0.equals((Object)stringReader1));
  }

  @Test(timeout = 4000)
  public void test170()  throws Throwable  {
      Enumeration<PipedInputStream> enumeration0 = (Enumeration<PipedInputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(enumeration0).hasMoreElements();
      boolean boolean0 = FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      assertFalse(boolean0);
      
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      assertNotNull(sequenceInputStream0);
      
      StringReader stringReader0 = new StringReader("Yb</Pe_?m%%X1k");
      assertNotNull(stringReader0);
      
      StringReader stringReader1 = new StringReader("Yb</Pe_?m%%X1k");
      assertNotNull(stringReader1);
      assertFalse(stringReader1.equals((Object)stringReader0));
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, (-114), (-2748));
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertNotNull(javaCharStream0);
      assertFalse(stringReader0.equals((Object)stringReader1));
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertNotNull(javaParserTokenManager0);
      assertFalse(stringReader0.equals((Object)stringReader1));
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertEquals(1, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-2748), token0.beginColumn);
      assertEquals((-114), token0.endLine);
      assertEquals(74, token0.kind);
      assertEquals((-2747), token0.endColumn);
      assertEquals((-114), token0.beginLine);
      assertEquals((-114), javaCharStream0.getLine());
      assertEquals((-114), javaCharStream0.getBeginLine());
      assertEquals((-2748), javaCharStream0.getBeginColumn());
      assertEquals((-2747), javaCharStream0.getColumn());
      assertEquals((-114), javaCharStream0.getEndLine());
      assertEquals((-2747), javaCharStream0.getEndColumn());
      assertEquals("Yb", token0.toString());
      assertNotSame(stringReader0, stringReader1);
      assertNotNull(token0);
      assertFalse(stringReader0.equals((Object)stringReader1));
      
      Token token1 = javaParserTokenManager0.getNextToken();
      assertEquals(2, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-2746), token1.beginColumn);
      assertEquals(88, token1.kind);
      assertEquals((-114), token1.endLine);
      assertEquals((-2746), token1.endColumn);
      assertEquals((-114), token1.beginLine);
      assertEquals((-114), javaCharStream0.getLine());
      assertEquals((-2746), javaCharStream0.getColumn());
      assertEquals((-114), javaCharStream0.getBeginLine());
      assertEquals((-2746), javaCharStream0.getBeginColumn());
      assertEquals((-114), javaCharStream0.getEndLine());
      assertEquals((-2746), javaCharStream0.getEndColumn());
      assertEquals("<", token1.toString());
      assertNotSame(stringReader0, stringReader1);
      assertNotSame(token1, token0);
      assertNotNull(token1);
      assertFalse(stringReader0.equals((Object)stringReader1));
      assertFalse(token1.equals((Object)token0));
      
      Token token2 = javaParserTokenManager0.getNextToken();
      assertEquals(3, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-114), token2.beginLine);
      assertEquals((-2745), token2.beginColumn);
      assertEquals((-2745), token2.endColumn);
      assertEquals(104, token2.kind);
      assertEquals((-114), token2.endLine);
      assertEquals((-114), javaCharStream0.getLine());
      assertEquals((-2745), javaCharStream0.getColumn());
      assertEquals((-114), javaCharStream0.getBeginLine());
      assertEquals((-2745), javaCharStream0.getEndColumn());
      assertEquals((-2745), javaCharStream0.getBeginColumn());
      assertEquals((-114), javaCharStream0.getEndLine());
      assertEquals("/", token2.toString());
      assertNotSame(stringReader0, stringReader1);
      assertNotSame(token2, token0);
      assertNotSame(token2, token1);
      assertNotNull(token2);
      assertFalse(stringReader0.equals((Object)stringReader1));
      assertFalse(token2.equals((Object)token0));
      assertFalse(token2.equals((Object)token1));
      
      token2.endLine = (-982);
      assertEquals((-114), javaCharStream0.getLine());
      assertEquals((-2745), javaCharStream0.getColumn());
      assertEquals((-114), javaCharStream0.getBeginLine());
      assertEquals((-2745), javaCharStream0.getEndColumn());
      assertEquals((-2745), javaCharStream0.getBeginColumn());
      assertEquals((-114), javaCharStream0.getEndLine());
      assertEquals("/", token2.toString());
      
      javaParserTokenManager0.SkipLexicalActions(token2);
      assertEquals(3, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-982), token2.endLine);
      assertEquals((-114), token2.beginLine);
      assertEquals((-2745), token2.beginColumn);
      assertEquals((-2745), token2.endColumn);
      assertEquals(104, token2.kind);
      assertEquals((-114), javaCharStream0.getLine());
      assertEquals((-2745), javaCharStream0.getColumn());
      assertEquals((-114), javaCharStream0.getBeginLine());
      assertEquals((-2745), javaCharStream0.getEndColumn());
      assertEquals((-2745), javaCharStream0.getBeginColumn());
      assertEquals((-114), javaCharStream0.getEndLine());
      assertEquals("/", token2.toString());
      assertNotSame(stringReader0, stringReader1);
      assertNotSame(token2, token0);
      assertNotSame(token2, token1);
      assertFalse(stringReader0.equals((Object)stringReader1));
      assertFalse(token2.equals((Object)token0));
      assertFalse(token2.equals((Object)token1));
      
      Token token3 = javaParserTokenManager0.jjFillToken();
      assertEquals(3, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(104, token3.kind);
      assertEquals((-2745), token3.beginColumn);
      assertEquals((-2745), token3.endColumn);
      assertEquals((-114), token3.endLine);
      assertEquals((-114), token3.beginLine);
      assertEquals((-114), javaCharStream0.getLine());
      assertEquals((-2745), javaCharStream0.getColumn());
      assertEquals((-114), javaCharStream0.getBeginLine());
      assertEquals((-2745), javaCharStream0.getEndColumn());
      assertEquals((-2745), javaCharStream0.getBeginColumn());
      assertEquals((-114), javaCharStream0.getEndLine());
      assertEquals("/", token3.toString());
      assertNotSame(stringReader0, stringReader1);
      assertNotSame(token3, token1);
      assertNotSame(token3, token0);
      assertNotSame(token3, token2);
      assertNotNull(token3);
      assertFalse(stringReader0.equals((Object)stringReader1));
      assertFalse(token3.equals((Object)token1));
      assertFalse(token3.equals((Object)token0));
      assertFalse(token3.equals((Object)token2));
  }

  @Test(timeout = 4000)
  public void test171()  throws Throwable  {
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      assertFalse(fileDescriptor0.valid());
      assertNotNull(fileDescriptor0);
      
      PipedInputStream pipedInputStream0 = new PipedInputStream(26);
      assertEquals(0, pipedInputStream0.available());
      assertNotNull(pipedInputStream0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(pipedInputStream0, 26, (-45));
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, pipedInputStream0.available());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertNotNull(javaCharStream0);
      
      StringReader stringReader0 = new StringReader("t!R%]{");
      assertNotNull(stringReader0);
      
      javaCharStream0.maxNextCharInd = 26;
      assertEquals(0, pipedInputStream0.available());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      
      javaCharStream0.maxNextCharInd = (-45);
      assertEquals(0, pipedInputStream0.available());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, pipedInputStream0.available());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertNotNull(javaParserTokenManager0);
      
      // Undeclared exception!
      try { 
        javaParserTokenManager0.getNextToken();
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test172()  throws Throwable  {
      StringReader stringReader0 = new StringReader("f%3T7%gku6");
      assertNotNull(stringReader0);
      
      int int0 = stringReader0.read();
      assertEquals(102, int0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, 84, 1024);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertNotNull(javaCharStream0);
      
      boolean boolean0 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "");
      assertFalse(boolean0);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertNotNull(javaParserTokenManager0);
      
      javaParserTokenManager0.ReInit(javaCharStream0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      
      JavaParserTokenManager javaParserTokenManager1 = new JavaParserTokenManager(javaCharStream0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertNotNull(javaParserTokenManager1);
      assertFalse(javaParserTokenManager1.equals((Object)javaParserTokenManager0));
      
      Token token0 = javaParserTokenManager1.getNextToken();
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.bufpos);
      assertEquals(1024, token0.beginColumn);
      assertEquals(84, token0.endLine);
      assertEquals(84, token0.beginLine);
      assertEquals(1024, token0.endColumn);
      assertEquals(108, token0.kind);
      assertEquals(84, javaCharStream0.getBeginLine());
      assertEquals(1024, javaCharStream0.getColumn());
      assertEquals(84, javaCharStream0.getLine());
      assertEquals(1024, javaCharStream0.getBeginColumn());
      assertEquals(84, javaCharStream0.getEndLine());
      assertEquals(1024, javaCharStream0.getEndColumn());
      assertEquals("%", token0.toString());
      assertNotSame(javaParserTokenManager1, javaParserTokenManager0);
      assertNotNull(token0);
      assertFalse(javaParserTokenManager1.equals((Object)javaParserTokenManager0));
      
      char char0 = javaCharStream0.ReadByte();
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.bufpos);
      assertEquals(84, javaCharStream0.getBeginLine());
      assertEquals(1024, javaCharStream0.getColumn());
      assertEquals(84, javaCharStream0.getLine());
      assertEquals(1024, javaCharStream0.getBeginColumn());
      assertEquals(84, javaCharStream0.getEndLine());
      assertEquals(1024, javaCharStream0.getEndColumn());
      assertEquals('T', char0);
      
      Token token1 = javaParserTokenManager0.getNextToken();
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(2, javaCharStream0.bufpos);
      assertEquals(66, token1.kind);
      assertEquals(84, token1.endLine);
      assertEquals(1026, token1.endColumn);
      assertEquals(84, token1.beginLine);
      assertEquals(1025, token1.beginColumn);
      assertEquals(84, javaCharStream0.getBeginLine());
      assertEquals(1026, javaCharStream0.getColumn());
      assertEquals(1026, javaCharStream0.getEndColumn());
      assertEquals(84, javaCharStream0.getLine());
      assertEquals(1025, javaCharStream0.getBeginColumn());
      assertEquals(84, javaCharStream0.getEndLine());
      assertEquals("37", token1.toString());
      assertNotSame(javaParserTokenManager0, javaParserTokenManager1);
      assertNotSame(token1, token0);
      assertNotNull(token1);
      assertFalse(javaParserTokenManager0.equals((Object)javaParserTokenManager1));
      assertFalse(token1.equals((Object)token0));
      
      Token token2 = javaParserTokenManager1.getNextToken();
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(3, javaCharStream0.bufpos);
      assertEquals(1027, token2.endColumn);
      assertEquals(108, token2.kind);
      assertEquals(84, token2.endLine);
      assertEquals(1027, token2.beginColumn);
      assertEquals(84, token2.beginLine);
      assertEquals(84, javaCharStream0.getBeginLine());
      assertEquals(1027, javaCharStream0.getColumn());
      assertEquals(1027, javaCharStream0.getEndColumn());
      assertEquals(84, javaCharStream0.getLine());
      assertEquals(84, javaCharStream0.getEndLine());
      assertEquals(1027, javaCharStream0.getBeginColumn());
      assertEquals("%", token2.toString());
      assertNotSame(javaParserTokenManager1, javaParserTokenManager0);
      assertNotSame(token2, token1);
      assertNotSame(token2, token0);
      assertNotNull(token2);
      assertFalse(javaParserTokenManager1.equals((Object)javaParserTokenManager0));
      assertFalse(token2.equals((Object)token1));
      assertFalse(token2.equals((Object)token0));
      
      Token token3 = javaParserTokenManager0.getNextToken();
      assertEquals(7, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(84, token3.beginLine);
      assertEquals(1028, token3.beginColumn);
      assertEquals(1031, token3.endColumn);
      assertEquals(84, token3.endLine);
      assertEquals(74, token3.kind);
      assertEquals(84, javaCharStream0.getBeginLine());
      assertEquals(1031, javaCharStream0.getEndColumn());
      assertEquals(1028, javaCharStream0.getBeginColumn());
      assertEquals(84, javaCharStream0.getLine());
      assertEquals(1031, javaCharStream0.getColumn());
      assertEquals(84, javaCharStream0.getEndLine());
      assertEquals("gku6", token3.toString());
      assertNotSame(javaParserTokenManager0, javaParserTokenManager1);
      assertNotSame(token3, token1);
      assertNotSame(token3, token0);
      assertNotSame(token3, token2);
      assertNotNull(token3);
      assertFalse(javaParserTokenManager0.equals((Object)javaParserTokenManager1));
      assertFalse(token3.equals((Object)token1));
      assertFalse(token3.equals((Object)token0));
      assertFalse(token3.equals((Object)token2));
      
      javaParserTokenManager0.MoreLexicalActions();
      assertEquals(7, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(84, javaCharStream0.getBeginLine());
      assertEquals(1031, javaCharStream0.getEndColumn());
      assertEquals(1028, javaCharStream0.getBeginColumn());
      assertEquals(84, javaCharStream0.getLine());
      assertEquals(1031, javaCharStream0.getColumn());
      assertEquals(84, javaCharStream0.getEndLine());
      assertNotSame(javaParserTokenManager0, javaParserTokenManager1);
      assertFalse(javaParserTokenManager0.equals((Object)javaParserTokenManager1));
  }

  @Test(timeout = 4000)
  public void test173()  throws Throwable  {
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      assertFalse(fileDescriptor0.valid());
      assertNotNull(fileDescriptor0);
      
      boolean boolean0 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "t`LYJy$=jm$_HY!");
      assertFalse(boolean0);
      
      StringReader stringReader0 = new StringReader("t`LYJy$=jm$_HY!");
      assertNotNull(stringReader0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, 1, 1);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertNotNull(javaCharStream0);
      
      boolean boolean1 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "");
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0, 2);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertNotNull(javaParserTokenManager0);
      
      JavaParserTokenManager javaParserTokenManager1 = new JavaParserTokenManager(javaCharStream0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertNotNull(javaParserTokenManager1);
      assertFalse(javaParserTokenManager1.equals((Object)javaParserTokenManager0));
      
      JavaCharStream javaCharStream1 = new JavaCharStream(stringReader0, 125, 38);
      assertEquals((-1), javaCharStream1.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream1.getBeginColumn());
      assertEquals(0, javaCharStream1.getBeginLine());
      assertNotNull(javaCharStream1);
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      
      JavaParserTokenManager javaParserTokenManager2 = new JavaParserTokenManager((JavaCharStream) null);
      assertNotNull(javaParserTokenManager2);
      assertFalse(javaParserTokenManager2.equals((Object)javaParserTokenManager1));
      assertFalse(javaParserTokenManager2.equals((Object)javaParserTokenManager0));
      
      JavaParserTokenManager javaParserTokenManager3 = new JavaParserTokenManager(javaCharStream0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertNotNull(javaParserTokenManager3);
      assertFalse(javaCharStream0.equals((Object)javaCharStream1));
      assertFalse(javaParserTokenManager3.equals((Object)javaParserTokenManager1));
      assertFalse(javaParserTokenManager3.equals((Object)javaParserTokenManager2));
      assertFalse(javaParserTokenManager3.equals((Object)javaParserTokenManager0));
      
      Token token0 = javaParserTokenManager3.getNextToken();
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.bufpos);
      assertEquals(74, token0.kind);
      assertEquals(1, token0.endLine);
      assertEquals(1, token0.endColumn);
      assertEquals(1, token0.beginColumn);
      assertEquals(1, token0.beginLine);
      assertEquals(1, javaCharStream0.getEndColumn());
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(1, javaCharStream0.getColumn());
      assertEquals(1, javaCharStream0.getBeginColumn());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals("t", token0.toString());
      assertNotSame(javaCharStream0, javaCharStream1);
      assertNotSame(javaParserTokenManager3, javaParserTokenManager1);
      assertNotSame(javaParserTokenManager3, javaParserTokenManager2);
      assertNotSame(javaParserTokenManager3, javaParserTokenManager0);
      assertNotNull(token0);
      assertFalse(javaCharStream0.equals((Object)javaCharStream1));
      assertFalse(javaParserTokenManager3.equals((Object)javaParserTokenManager1));
      assertFalse(javaParserTokenManager3.equals((Object)javaParserTokenManager2));
      assertFalse(javaParserTokenManager3.equals((Object)javaParserTokenManager0));
      
      javaParserTokenManager3.TokenLexicalActions(token0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.bufpos);
      assertEquals(74, token0.kind);
      assertEquals(1, token0.endLine);
      assertEquals(1, token0.endColumn);
      assertEquals(1, token0.beginColumn);
      assertEquals(1, token0.beginLine);
      assertEquals(1, javaCharStream0.getEndColumn());
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(1, javaCharStream0.getColumn());
      assertEquals(1, javaCharStream0.getBeginColumn());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals("t", token0.toString());
      assertNotSame(javaCharStream0, javaCharStream1);
      assertNotSame(javaParserTokenManager3, javaParserTokenManager1);
      assertNotSame(javaParserTokenManager3, javaParserTokenManager2);
      assertNotSame(javaParserTokenManager3, javaParserTokenManager0);
      assertFalse(javaCharStream0.equals((Object)javaCharStream1));
      assertFalse(javaParserTokenManager3.equals((Object)javaParserTokenManager1));
      assertFalse(javaParserTokenManager3.equals((Object)javaParserTokenManager2));
      assertFalse(javaParserTokenManager3.equals((Object)javaParserTokenManager0));
      
      javaParserTokenManager0.SkipLexicalActions(token0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.bufpos);
      assertEquals(74, token0.kind);
      assertEquals(1, token0.endLine);
      assertEquals(1, token0.endColumn);
      assertEquals(1, token0.beginColumn);
      assertEquals(1, token0.beginLine);
      assertEquals(1, javaCharStream0.getEndColumn());
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(1, javaCharStream0.getColumn());
      assertEquals(1, javaCharStream0.getBeginColumn());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals("t", token0.toString());
      assertNotSame(javaCharStream0, javaCharStream1);
      assertNotSame(javaParserTokenManager0, javaParserTokenManager1);
      assertNotSame(javaParserTokenManager0, javaParserTokenManager2);
      assertNotSame(javaParserTokenManager0, javaParserTokenManager3);
      assertNotSame(javaParserTokenManager3, javaParserTokenManager1);
      assertNotSame(javaParserTokenManager3, javaParserTokenManager2);
      assertNotSame(javaParserTokenManager3, javaParserTokenManager0);
      assertFalse(javaCharStream0.equals((Object)javaCharStream1));
      assertFalse(javaParserTokenManager0.equals((Object)javaParserTokenManager1));
      assertFalse(javaParserTokenManager0.equals((Object)javaParserTokenManager2));
      assertFalse(javaParserTokenManager0.equals((Object)javaParserTokenManager3));
      assertFalse(javaParserTokenManager3.equals((Object)javaParserTokenManager1));
      assertFalse(javaParserTokenManager3.equals((Object)javaParserTokenManager2));
      assertFalse(javaParserTokenManager3.equals((Object)javaParserTokenManager0));
  }

  @Test(timeout = 4000)
  public void test174()  throws Throwable  {
      StringReader stringReader0 = new StringReader("implements");
      assertNotNull(stringReader0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, 41, (-1672), 122);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertNotNull(javaCharStream0);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertNotNull(javaParserTokenManager0);
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(9, javaCharStream0.bufpos);
      assertEquals(37, token0.kind);
      assertEquals(41, token0.endLine);
      assertEquals((-1663), token0.endColumn);
      assertEquals(41, token0.beginLine);
      assertEquals((-1672), token0.beginColumn);
      assertEquals((-1663), javaCharStream0.getColumn());
      assertEquals((-1672), javaCharStream0.getBeginColumn());
      assertEquals((-1663), javaCharStream0.getEndColumn());
      assertEquals(41, javaCharStream0.getEndLine());
      assertEquals(41, javaCharStream0.getBeginLine());
      assertEquals(41, javaCharStream0.getLine());
      assertEquals("implements", token0.toString());
      assertNotNull(token0);
      
      JavaParserTokenManager javaParserTokenManager1 = null;
      try {
        javaParserTokenManager1 = new JavaParserTokenManager(javaCharStream0, 41);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Error: Ignoring invalid lexical state : 41. State unchanged.
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test175()  throws Throwable  {
      StringReader stringReader0 = new StringReader("w%DN*pejbGS{#17g'Z");
      assertNotNull(stringReader0);
      
      int int0 = JavaParserConstants.LSHIFT;
      assertEquals(109, int0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, 109, 109);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertNotNull(javaCharStream0);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertNotNull(javaParserTokenManager0);
      
      javaParserTokenManager0.MoreLexicalActions();
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertEquals(0, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(109, token0.endColumn);
      assertEquals(109, token0.beginColumn);
      assertEquals(109, token0.endLine);
      assertEquals(74, token0.kind);
      assertEquals(109, token0.beginLine);
      assertEquals(109, javaCharStream0.getBeginLine());
      assertEquals(109, javaCharStream0.getEndLine());
      assertEquals(109, javaCharStream0.getEndColumn());
      assertEquals(109, javaCharStream0.getBeginColumn());
      assertEquals(109, javaCharStream0.getLine());
      assertEquals(109, javaCharStream0.getColumn());
      assertEquals("w", token0.toString());
      assertNotNull(token0);
      
      StringReader stringReader1 = new StringReader("w%DN*pejbGS{#17g'Z");
      assertNotNull(stringReader1);
      assertFalse(stringReader1.equals((Object)stringReader0));
      
      JavaParserTokenManager javaParserTokenManager1 = new JavaParserTokenManager(javaCharStream0);
      assertEquals(0, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(109, javaCharStream0.getBeginLine());
      assertEquals(109, javaCharStream0.getEndLine());
      assertEquals(109, javaCharStream0.getEndColumn());
      assertEquals(109, javaCharStream0.getBeginColumn());
      assertEquals(109, javaCharStream0.getLine());
      assertEquals(109, javaCharStream0.getColumn());
      assertNotNull(javaParserTokenManager1);
      assertFalse(stringReader0.equals((Object)stringReader1));
      assertFalse(javaParserTokenManager1.equals((Object)javaParserTokenManager0));
  }

  @Test(timeout = 4000)
  public void test176()  throws Throwable  {
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      assertFalse(fileDescriptor0.valid());
      assertNotNull(fileDescriptor0);
      
      StringReader stringReader0 = new StringReader("7ku#so?1Q6(1dN_");
      assertNotNull(stringReader0);
      
      int int0 = JavaParserConstants.LSHIFT;
      assertEquals(109, int0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, 109, 1880);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertNotNull(javaCharStream0);
      
      stringReader0.reset();
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertNotNull(javaParserTokenManager0);
      
      javaParserTokenManager0.MoreLexicalActions();
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      
      Token token0 = new Token();
      assertEquals(0, token0.kind);
      assertEquals(0, token0.beginLine);
      assertEquals(0, token0.endColumn);
      assertEquals(0, token0.beginColumn);
      assertEquals(0, token0.endLine);
      assertNull(token0.toString());
      assertNotNull(token0);
      
      javaParserTokenManager0.TokenLexicalActions(token0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertEquals(0, token0.kind);
      assertEquals(0, token0.beginLine);
      assertEquals(0, token0.endColumn);
      assertEquals(0, token0.beginColumn);
      assertEquals(0, token0.endLine);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertNull(token0.toString());
      
      Token token1 = javaParserTokenManager0.getNextToken();
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.bufpos);
      assertEquals(66, token1.kind);
      assertEquals(109, token1.beginLine);
      assertEquals(1880, token1.endColumn);
      assertEquals(109, token1.endLine);
      assertEquals(1880, token1.beginColumn);
      assertEquals(1880, javaCharStream0.getBeginColumn());
      assertEquals(109, javaCharStream0.getEndLine());
      assertEquals(1880, javaCharStream0.getEndColumn());
      assertEquals(109, javaCharStream0.getBeginLine());
      assertEquals(1880, javaCharStream0.getColumn());
      assertEquals(109, javaCharStream0.getLine());
      assertEquals("7", token1.toString());
      assertNotSame(token1, token0);
      assertNotNull(token1);
      assertFalse(token1.equals((Object)token0));
      
      JavaParserTokenManager javaParserTokenManager1 = new JavaParserTokenManager(javaCharStream0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.bufpos);
      assertEquals(1880, javaCharStream0.getBeginColumn());
      assertEquals(109, javaCharStream0.getEndLine());
      assertEquals(1880, javaCharStream0.getEndColumn());
      assertEquals(109, javaCharStream0.getBeginLine());
      assertEquals(1880, javaCharStream0.getColumn());
      assertEquals(109, javaCharStream0.getLine());
      assertNotNull(javaParserTokenManager1);
      assertFalse(javaParserTokenManager1.equals((Object)javaParserTokenManager0));
      
      JavaParserTokenManager javaParserTokenManager2 = null;
      try {
        javaParserTokenManager2 = new JavaParserTokenManager(javaCharStream0, 70);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Error: Ignoring invalid lexical state : 70. State unchanged.
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test177()  throws Throwable  {
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      assertFalse(fileDescriptor0.valid());
      assertNotNull(fileDescriptor0);
      
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(fileDescriptor0);
      assertNotNull(mockFileInputStream0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(mockFileInputStream0, (-250), (-250), (-250));
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertFalse(fileDescriptor0.valid());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertNotNull(javaCharStream0);
      
      StringReader stringReader0 = new StringReader("l{f");
      assertNotNull(stringReader0);
      
      JavaCharStream javaCharStream1 = new JavaCharStream(stringReader0, (-250), (-1004), 27);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream1.bufpos);
      assertEquals(0, javaCharStream1.getBeginColumn());
      assertEquals(0, javaCharStream1.getBeginLine());
      assertNotNull(javaCharStream1);
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream1);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream1.bufpos);
      assertEquals(0, javaCharStream1.getBeginColumn());
      assertEquals(0, javaCharStream1.getBeginLine());
      assertNotNull(javaParserTokenManager0);
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream1.bufpos);
      assertEquals(74, token0.kind);
      assertEquals((-1004), token0.endColumn);
      assertEquals((-250), token0.beginLine);
      assertEquals((-1004), token0.beginColumn);
      assertEquals((-250), token0.endLine);
      assertEquals((-250), javaCharStream1.getLine());
      assertEquals((-250), javaCharStream1.getBeginLine());
      assertEquals((-1004), javaCharStream1.getBeginColumn());
      assertEquals((-1004), javaCharStream1.getEndColumn());
      assertEquals((-1004), javaCharStream1.getColumn());
      assertEquals((-250), javaCharStream1.getEndLine());
      assertEquals("l", token0.toString());
      assertNotSame(javaCharStream1, javaCharStream0);
      assertNotNull(token0);
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      
      javaParserTokenManager0.MoreLexicalActions();
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream1.bufpos);
      assertEquals((-250), javaCharStream1.getLine());
      assertEquals((-250), javaCharStream1.getBeginLine());
      assertEquals((-1004), javaCharStream1.getBeginColumn());
      assertEquals((-1004), javaCharStream1.getEndColumn());
      assertEquals((-1004), javaCharStream1.getColumn());
      assertEquals((-250), javaCharStream1.getEndLine());
      assertNotSame(javaCharStream1, javaCharStream0);
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      
      javaParserTokenManager0.MoreLexicalActions();
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream1.bufpos);
      assertEquals((-250), javaCharStream1.getLine());
      assertEquals((-250), javaCharStream1.getBeginLine());
      assertEquals((-1004), javaCharStream1.getBeginColumn());
      assertEquals((-1004), javaCharStream1.getEndColumn());
      assertEquals((-1004), javaCharStream1.getColumn());
      assertEquals((-250), javaCharStream1.getEndLine());
      assertNotSame(javaCharStream1, javaCharStream0);
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      
      Token token1 = javaParserTokenManager0.getNextToken();
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(1, javaCharStream1.bufpos);
      assertEquals((-1003), token1.endColumn);
      assertEquals(79, token1.kind);
      assertEquals((-250), token1.endLine);
      assertEquals((-250), token1.beginLine);
      assertEquals((-1003), token1.beginColumn);
      assertEquals((-250), javaCharStream1.getLine());
      assertEquals((-1003), javaCharStream1.getEndColumn());
      assertEquals((-250), javaCharStream1.getBeginLine());
      assertEquals((-1003), javaCharStream1.getColumn());
      assertEquals((-1003), javaCharStream1.getBeginColumn());
      assertEquals((-250), javaCharStream1.getEndLine());
      assertEquals("{", token1.toString());
      assertNotSame(javaCharStream1, javaCharStream0);
      assertNotSame(token1, token0);
      assertNotNull(token1);
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      assertFalse(token1.equals((Object)token0));
  }

  @Test(timeout = 4000)
  public void test178()  throws Throwable  {
      StringReader stringReader0 = new StringReader("dnZoRZC.$[%%@b!UT");
      assertNotNull(stringReader0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, 41, (-1672), 122);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertNotNull(javaCharStream0);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertNotNull(javaParserTokenManager0);
      
      JavaParserTokenManager javaParserTokenManager1 = new JavaParserTokenManager(javaCharStream0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertNotNull(javaParserTokenManager1);
      assertFalse(javaParserTokenManager1.equals((Object)javaParserTokenManager0));
      
      Token token0 = javaParserTokenManager1.getNextToken();
      assertEquals(6, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1666), token0.endColumn);
      assertEquals((-1672), token0.beginColumn);
      assertEquals(41, token0.endLine);
      assertEquals(74, token0.kind);
      assertEquals(41, token0.beginLine);
      assertEquals(41, javaCharStream0.getLine());
      assertEquals((-1666), javaCharStream0.getEndColumn());
      assertEquals(41, javaCharStream0.getBeginLine());
      assertEquals(41, javaCharStream0.getEndLine());
      assertEquals((-1672), javaCharStream0.getBeginColumn());
      assertEquals((-1666), javaCharStream0.getColumn());
      assertEquals("dnZoRZC", token0.toString());
      assertNotSame(javaParserTokenManager1, javaParserTokenManager0);
      assertNotNull(token0);
      assertFalse(javaParserTokenManager1.equals((Object)javaParserTokenManager0));
      
      javaParserTokenManager1.MoreLexicalActions();
      assertEquals(6, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(41, javaCharStream0.getLine());
      assertEquals((-1666), javaCharStream0.getEndColumn());
      assertEquals(41, javaCharStream0.getBeginLine());
      assertEquals(41, javaCharStream0.getEndLine());
      assertEquals((-1672), javaCharStream0.getBeginColumn());
      assertEquals((-1666), javaCharStream0.getColumn());
      assertNotSame(javaParserTokenManager1, javaParserTokenManager0);
      assertFalse(javaParserTokenManager1.equals((Object)javaParserTokenManager0));
      
      StringReader stringReader1 = new StringReader("dnZoRZC");
      assertNotNull(stringReader1);
      assertFalse(stringReader1.equals((Object)stringReader0));
      
      JavaCharStream javaCharStream1 = new JavaCharStream(stringReader1);
      assertEquals((-1), javaCharStream1.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream1.getBeginColumn());
      assertEquals(0, javaCharStream1.getBeginLine());
      assertNotNull(javaCharStream1);
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      
      JavaParserTokenManager javaParserTokenManager2 = new JavaParserTokenManager(javaCharStream1);
      assertEquals((-1), javaCharStream1.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream1.getBeginColumn());
      assertEquals(0, javaCharStream1.getBeginLine());
      assertNotNull(javaParserTokenManager2);
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      assertFalse(javaParserTokenManager2.equals((Object)javaParserTokenManager1));
      assertFalse(javaParserTokenManager2.equals((Object)javaParserTokenManager0));
      
      Token token1 = javaParserTokenManager1.getNextToken();
      assertEquals(7, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(41, token1.beginLine);
      assertEquals(85, token1.kind);
      assertEquals((-1665), token1.endColumn);
      assertEquals(41, token1.endLine);
      assertEquals((-1665), token1.beginColumn);
      assertEquals(41, javaCharStream0.getLine());
      assertEquals((-1665), javaCharStream0.getBeginColumn());
      assertEquals(41, javaCharStream0.getBeginLine());
      assertEquals((-1665), javaCharStream0.getEndColumn());
      assertEquals(41, javaCharStream0.getEndLine());
      assertEquals((-1665), javaCharStream0.getColumn());
      assertEquals(".", token1.toString());
      assertNotSame(stringReader0, stringReader1);
      assertNotSame(javaCharStream0, javaCharStream1);
      assertNotSame(javaParserTokenManager1, javaParserTokenManager2);
      assertNotSame(javaParserTokenManager1, javaParserTokenManager0);
      assertNotSame(token1, token0);
      assertNotNull(token1);
      assertFalse(stringReader0.equals((Object)stringReader1));
      assertFalse(javaCharStream0.equals((Object)javaCharStream1));
      assertFalse(javaParserTokenManager1.equals((Object)javaParserTokenManager2));
      assertFalse(javaParserTokenManager1.equals((Object)javaParserTokenManager0));
      assertFalse(token1.equals((Object)token0));
      
      Token token2 = javaParserTokenManager0.getNextToken();
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(8, javaCharStream0.bufpos);
      assertEquals(74, token2.kind);
      assertEquals(41, token2.beginLine);
      assertEquals((-1664), token2.beginColumn);
      assertEquals((-1664), token2.endColumn);
      assertEquals(41, token2.endLine);
      assertEquals(41, javaCharStream0.getLine());
      assertEquals((-1664), javaCharStream0.getBeginColumn());
      assertEquals(41, javaCharStream0.getBeginLine());
      assertEquals((-1664), javaCharStream0.getColumn());
      assertEquals((-1664), javaCharStream0.getEndColumn());
      assertEquals(41, javaCharStream0.getEndLine());
      assertEquals("$", token2.toString());
      assertNotSame(stringReader0, stringReader1);
      assertNotSame(javaCharStream0, javaCharStream1);
      assertNotSame(javaParserTokenManager0, javaParserTokenManager1);
      assertNotSame(javaParserTokenManager0, javaParserTokenManager2);
      assertNotSame(token2, token0);
      assertNotSame(token2, token1);
      assertNotNull(token2);
      assertFalse(stringReader0.equals((Object)stringReader1));
      assertFalse(javaCharStream0.equals((Object)javaCharStream1));
      assertFalse(javaParserTokenManager0.equals((Object)javaParserTokenManager1));
      assertFalse(javaParserTokenManager0.equals((Object)javaParserTokenManager2));
      assertFalse(token2.equals((Object)token0));
      assertFalse(token2.equals((Object)token1));
  }

  @Test(timeout = 4000)
  public void test179()  throws Throwable  {
      PipedInputStream pipedInputStream0 = new PipedInputStream(57);
      assertEquals(0, pipedInputStream0.available());
      assertNotNull(pipedInputStream0);
      
      StringReader stringReader0 = new StringReader("=Qv&nCW`Vsfo[m");
      assertNotNull(stringReader0);
      
      int int0 = stringReader0.read();
      assertEquals(61, int0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, 57, 57);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertNotNull(javaCharStream0);
      
      stringReader0.reset();
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertNotNull(javaParserTokenManager0);
      
      javaParserTokenManager0.MoreLexicalActions();
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      
      Token token0 = new Token();
      assertEquals(0, token0.beginColumn);
      assertEquals(0, token0.endColumn);
      assertEquals(0, token0.endLine);
      assertEquals(0, token0.kind);
      assertEquals(0, token0.beginLine);
      assertNull(token0.toString());
      assertNotNull(token0);
      
      javaParserTokenManager0.TokenLexicalActions(token0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, token0.beginColumn);
      assertEquals(0, token0.endColumn);
      assertEquals(0, token0.endLine);
      assertEquals(0, token0.kind);
      assertEquals(0, token0.beginLine);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertNull(token0.toString());
      
      Token token1 = javaParserTokenManager0.getNextToken();
      assertEquals(0, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(57, token1.beginLine);
      assertEquals(57, token1.endLine);
      assertEquals(87, token1.kind);
      assertEquals(57, token1.endColumn);
      assertEquals(57, token1.beginColumn);
      assertEquals(57, javaCharStream0.getBeginLine());
      assertEquals(57, javaCharStream0.getBeginColumn());
      assertEquals(57, javaCharStream0.getEndColumn());
      assertEquals(57, javaCharStream0.getEndLine());
      assertEquals(57, javaCharStream0.getLine());
      assertEquals(57, javaCharStream0.getColumn());
      assertEquals("=", token1.toString());
      assertNotSame(token1, token0);
      assertNotNull(token1);
      assertFalse(token1.equals((Object)token0));
      
      JavaParserTokenManager javaParserTokenManager1 = new JavaParserTokenManager(javaCharStream0);
      assertEquals(0, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(57, javaCharStream0.getBeginLine());
      assertEquals(57, javaCharStream0.getBeginColumn());
      assertEquals(57, javaCharStream0.getEndColumn());
      assertEquals(57, javaCharStream0.getEndLine());
      assertEquals(57, javaCharStream0.getLine());
      assertEquals(57, javaCharStream0.getColumn());
      assertNotNull(javaParserTokenManager1);
      assertFalse(javaParserTokenManager1.equals((Object)javaParserTokenManager0));
      
      javaParserTokenManager1.jjimageLen = 4958;
      assertEquals(57, javaCharStream0.getBeginLine());
      assertEquals(57, javaCharStream0.getBeginColumn());
      assertEquals(57, javaCharStream0.getEndColumn());
      assertEquals(57, javaCharStream0.getEndLine());
      assertEquals(57, javaCharStream0.getLine());
      assertEquals(57, javaCharStream0.getColumn());
      
      // Undeclared exception!
      try { 
        javaParserTokenManager1.SwitchTo(57);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Error: Ignoring invalid lexical state : 57. State unchanged.
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test180()  throws Throwable  {
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      assertFalse(fileDescriptor0.valid());
      assertNotNull(fileDescriptor0);
      
      Enumeration<PipedInputStream> enumeration0 = (Enumeration<PipedInputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(enumeration0).hasMoreElements();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      assertNotNull(sequenceInputStream0);
      
      StringReader stringReader0 = new StringReader("s+<V?i:'(X*uHj@FF");
      assertNotNull(stringReader0);
      
      StringReader stringReader1 = new StringReader("s+<V?i:'(X*uHj@FF");
      assertNotNull(stringReader1);
      assertFalse(stringReader1.equals((Object)stringReader0));
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, (-2748), 35);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertNotNull(javaCharStream0);
      assertFalse(stringReader0.equals((Object)stringReader1));
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertNotNull(javaParserTokenManager0);
      assertFalse(stringReader0.equals((Object)stringReader1));
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.bufpos);
      assertEquals(35, token0.endColumn);
      assertEquals(74, token0.kind);
      assertEquals(35, token0.beginColumn);
      assertEquals((-2748), token0.beginLine);
      assertEquals((-2748), token0.endLine);
      assertEquals((-2748), javaCharStream0.getEndLine());
      assertEquals(35, javaCharStream0.getEndColumn());
      assertEquals((-2748), javaCharStream0.getLine());
      assertEquals(35, javaCharStream0.getBeginColumn());
      assertEquals(35, javaCharStream0.getColumn());
      assertEquals((-2748), javaCharStream0.getBeginLine());
      assertEquals("s", token0.toString());
      assertNotSame(stringReader0, stringReader1);
      assertNotNull(token0);
      assertFalse(stringReader0.equals((Object)stringReader1));
  }

  @Test(timeout = 4000)
  public void test181()  throws Throwable  {
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      assertFalse(fileDescriptor0.valid());
      assertNotNull(fileDescriptor0);
      
      PipedInputStream pipedInputStream0 = new PipedInputStream(597);
      assertEquals(0, pipedInputStream0.available());
      assertNotNull(pipedInputStream0);
      
      StringReader stringReader0 = new StringReader("double");
      assertNotNull(stringReader0);
      
      StringReader stringReader1 = new StringReader("double");
      assertNotNull(stringReader1);
      assertFalse(stringReader1.equals((Object)stringReader0));
      
      int int0 = stringReader1.read();
      assertEquals(100, int0);
      assertNotSame(stringReader1, stringReader0);
      assertFalse(stringReader1.equals((Object)stringReader0));
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, 100, (-2269));
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertNotNull(javaCharStream0);
      assertFalse(stringReader0.equals((Object)stringReader1));
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertNotNull(javaParserTokenManager0);
      assertFalse(stringReader0.equals((Object)stringReader1));
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(5, javaCharStream0.bufpos);
      assertEquals((-2269), token0.beginColumn);
      assertEquals(100, token0.endLine);
      assertEquals(26, token0.kind);
      assertEquals((-2264), token0.endColumn);
      assertEquals(100, token0.beginLine);
      assertEquals(100, javaCharStream0.getBeginLine());
      assertEquals((-2264), javaCharStream0.getColumn());
      assertEquals(100, javaCharStream0.getEndLine());
      assertEquals((-2264), javaCharStream0.getEndColumn());
      assertEquals((-2269), javaCharStream0.getBeginColumn());
      assertEquals(100, javaCharStream0.getLine());
      assertEquals("double", token0.toString());
      assertNotSame(stringReader0, stringReader1);
      assertNotNull(token0);
      assertFalse(stringReader0.equals((Object)stringReader1));
      
      Token token1 = javaParserTokenManager0.getNextToken();
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.bufpos);
      assertEquals(0, token1.kind);
      assertEquals(100, token1.endLine);
      assertEquals((-2264), token1.endColumn);
      assertEquals((-2264), token1.beginColumn);
      assertEquals(100, token1.beginLine);
      assertEquals(100, javaCharStream0.getBeginLine());
      assertEquals((-2264), javaCharStream0.getColumn());
      assertEquals(100, javaCharStream0.getEndLine());
      assertEquals((-2264), javaCharStream0.getEndColumn());
      assertEquals((-2264), javaCharStream0.getBeginColumn());
      assertEquals(100, javaCharStream0.getLine());
      assertEquals("", token1.toString());
      assertNotSame(stringReader0, stringReader1);
      assertNotSame(token1, token0);
      assertNotNull(token1);
      assertFalse(stringReader0.equals((Object)stringReader1));
      assertFalse(token1.equals((Object)token0));
      
      Token token2 = javaParserTokenManager0.jjFillToken();
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.bufpos);
      assertEquals(100, token2.beginLine);
      assertEquals((-2264), token2.beginColumn);
      assertEquals(100, token2.endLine);
      assertEquals(0, token2.kind);
      assertEquals((-2264), token2.endColumn);
      assertEquals(100, javaCharStream0.getBeginLine());
      assertEquals((-2264), javaCharStream0.getColumn());
      assertEquals(100, javaCharStream0.getEndLine());
      assertEquals((-2264), javaCharStream0.getEndColumn());
      assertEquals((-2264), javaCharStream0.getBeginColumn());
      assertEquals(100, javaCharStream0.getLine());
      assertEquals("", token2.toString());
      assertNotSame(stringReader0, stringReader1);
      assertNotSame(token2, token1);
      assertNotSame(token2, token0);
      assertNotNull(token2);
      assertFalse(stringReader0.equals((Object)stringReader1));
      assertFalse(token2.equals((Object)token1));
      assertFalse(token2.equals((Object)token0));
  }

  @Test(timeout = 4000)
  public void test182()  throws Throwable  {
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      assertFalse(fileDescriptor0.valid());
      assertNotNull(fileDescriptor0);
      
      PipedInputStream pipedInputStream0 = new PipedInputStream(2274);
      assertEquals(0, pipedInputStream0.available());
      assertNotNull(pipedInputStream0);
      
      StringReader stringReader0 = new StringReader("");
      assertNotNull(stringReader0);
      
      StringReader stringReader1 = new StringReader("]|b");
      assertNotNull(stringReader1);
      assertFalse(stringReader1.equals((Object)stringReader0));
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader1, 2274, 2335);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertNotNull(javaCharStream0);
      assertFalse(stringReader1.equals((Object)stringReader0));
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertNotNull(javaParserTokenManager0);
      assertFalse(stringReader1.equals((Object)stringReader0));
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertEquals(0, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(2274, token0.endLine);
      assertEquals(2335, token0.endColumn);
      assertEquals(82, token0.kind);
      assertEquals(2274, token0.beginLine);
      assertEquals(2335, token0.beginColumn);
      assertEquals(2335, javaCharStream0.getBeginColumn());
      assertEquals(2335, javaCharStream0.getColumn());
      assertEquals(2335, javaCharStream0.getEndColumn());
      assertEquals(2274, javaCharStream0.getEndLine());
      assertEquals(2274, javaCharStream0.getBeginLine());
      assertEquals(2274, javaCharStream0.getLine());
      assertEquals("]", token0.toString());
      assertNotSame(stringReader1, stringReader0);
      assertNotNull(token0);
      assertFalse(stringReader1.equals((Object)stringReader0));
      
      Token token1 = javaParserTokenManager0.getNextToken();
      assertEquals(0, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(106, token1.kind);
      assertEquals(2274, token1.endLine);
      assertEquals(2336, token1.beginColumn);
      assertEquals(2274, token1.beginLine);
      assertEquals(2336, token1.endColumn);
      assertEquals(2336, javaCharStream0.getBeginColumn());
      assertEquals(2336, javaCharStream0.getEndColumn());
      assertEquals(2274, javaCharStream0.getEndLine());
      assertEquals(2274, javaCharStream0.getBeginLine());
      assertEquals(2274, javaCharStream0.getLine());
      assertEquals(2336, javaCharStream0.getColumn());
      assertEquals("|", token1.toString());
      assertNotSame(stringReader1, stringReader0);
      assertNotSame(token1, token0);
      assertNotNull(token1);
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertFalse(token1.equals((Object)token0));
  }

  @Test(timeout = 4000)
  public void test183()  throws Throwable  {
      StringReader stringReader0 = new StringReader("=Qv&nCW`Vsfo[m");
      assertNotNull(stringReader0);
      
      int int0 = stringReader0.read();
      assertEquals(61, int0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, 1320, 61);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertNotNull(javaCharStream0);
      
      stringReader0.reset();
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertNotNull(javaParserTokenManager0);
      
      javaParserTokenManager0.MoreLexicalActions();
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      
      Token token0 = new Token();
      assertEquals(0, token0.endLine);
      assertEquals(0, token0.beginColumn);
      assertEquals(0, token0.kind);
      assertEquals(0, token0.beginLine);
      assertEquals(0, token0.endColumn);
      assertNull(token0.toString());
      assertNotNull(token0);
      
      javaParserTokenManager0.TokenLexicalActions(token0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, token0.endLine);
      assertEquals(0, token0.beginColumn);
      assertEquals(0, token0.kind);
      assertEquals(0, token0.beginLine);
      assertEquals(0, token0.endColumn);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertNull(token0.toString());
      
      Token token1 = javaParserTokenManager0.getNextToken();
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.bufpos);
      assertEquals(61, token1.beginColumn);
      assertEquals(61, token1.endColumn);
      assertEquals(87, token1.kind);
      assertEquals(1320, token1.endLine);
      assertEquals(1320, token1.beginLine);
      assertEquals(61, javaCharStream0.getColumn());
      assertEquals(61, javaCharStream0.getEndColumn());
      assertEquals(61, javaCharStream0.getBeginColumn());
      assertEquals(1320, javaCharStream0.getLine());
      assertEquals(1320, javaCharStream0.getBeginLine());
      assertEquals(1320, javaCharStream0.getEndLine());
      assertEquals("=", token1.toString());
      assertNotSame(token1, token0);
      assertNotNull(token1);
      assertFalse(token1.equals((Object)token0));
      
      JavaParserTokenManager javaParserTokenManager1 = new JavaParserTokenManager(javaCharStream0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.bufpos);
      assertEquals(61, javaCharStream0.getColumn());
      assertEquals(61, javaCharStream0.getEndColumn());
      assertEquals(61, javaCharStream0.getBeginColumn());
      assertEquals(1320, javaCharStream0.getLine());
      assertEquals(1320, javaCharStream0.getBeginLine());
      assertEquals(1320, javaCharStream0.getEndLine());
      assertNotNull(javaParserTokenManager1);
      assertFalse(javaParserTokenManager1.equals((Object)javaParserTokenManager0));
      
      StringReader stringReader1 = new StringReader("e|WmB0CFnn");
      assertNotNull(stringReader1);
      assertFalse(stringReader1.equals((Object)stringReader0));
      
      JavaCharStream javaCharStream1 = new JavaCharStream(stringReader1, 61, 19);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream1.bufpos);
      assertEquals(0, javaCharStream1.getBeginLine());
      assertEquals(0, javaCharStream1.getBeginColumn());
      assertNotNull(javaCharStream1);
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      
      JavaParserTokenManager javaParserTokenManager2 = new JavaParserTokenManager(javaCharStream1);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream1.bufpos);
      assertEquals(0, javaCharStream1.getBeginLine());
      assertEquals(0, javaCharStream1.getBeginColumn());
      assertNotNull(javaParserTokenManager2);
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      assertFalse(javaParserTokenManager2.equals((Object)javaParserTokenManager1));
      assertFalse(javaParserTokenManager2.equals((Object)javaParserTokenManager0));
      
      Token token2 = javaParserTokenManager2.getNextToken();
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream1.bufpos);
      assertEquals(61, token2.beginLine);
      assertEquals(61, token2.endLine);
      assertEquals(74, token2.kind);
      assertEquals(19, token2.endColumn);
      assertEquals(19, token2.beginColumn);
      assertEquals(61, javaCharStream1.getEndLine());
      assertEquals(19, javaCharStream1.getColumn());
      assertEquals(19, javaCharStream1.getEndColumn());
      assertEquals(19, javaCharStream1.getBeginColumn());
      assertEquals(61, javaCharStream1.getBeginLine());
      assertEquals(61, javaCharStream1.getLine());
      assertEquals("e", token2.toString());
      assertNotSame(stringReader1, stringReader0);
      assertNotSame(javaCharStream1, javaCharStream0);
      assertNotSame(javaParserTokenManager2, javaParserTokenManager1);
      assertNotSame(javaParserTokenManager2, javaParserTokenManager0);
      assertNotSame(token2, token1);
      assertNotSame(token2, token0);
      assertNotNull(token2);
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      assertFalse(javaParserTokenManager2.equals((Object)javaParserTokenManager1));
      assertFalse(javaParserTokenManager2.equals((Object)javaParserTokenManager0));
      assertFalse(token2.equals((Object)token1));
      assertFalse(token2.equals((Object)token0));
      
      Token token3 = Token.newToken(32);
      assertEquals(0, token3.beginColumn);
      assertEquals(0, token3.endLine);
      assertEquals(0, token3.endColumn);
      assertEquals(0, token3.beginLine);
      assertEquals(0, token3.kind);
      assertNull(token3.toString());
      assertNotSame(token3, token0);
      assertNotSame(token3, token1);
      assertNotSame(token3, token2);
      assertNotNull(token3);
      assertFalse(token3.equals((Object)token0));
      assertFalse(token3.equals((Object)token1));
      assertFalse(token3.equals((Object)token2));
      
      Token.GTToken token_GTToken0 = new Token.GTToken();
      assertEquals(0, token_GTToken0.endLine);
      assertEquals(0, token_GTToken0.beginLine);
      assertEquals(0, token_GTToken0.kind);
      assertEquals(0, token_GTToken0.beginColumn);
      assertEquals(0, token_GTToken0.endColumn);
      assertNull(token_GTToken0.toString());
      assertNotNull(token_GTToken0);
      
      Token token4 = token_GTToken0.specialToken;
      assertNull(token4);
      
      token3.next = null;
      assertNull(token3.toString());
      
      javaParserTokenManager2.TokenLexicalActions(token3);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream1.bufpos);
      assertEquals(0, token3.beginColumn);
      assertEquals(0, token3.endLine);
      assertEquals(0, token3.endColumn);
      assertEquals(0, token3.beginLine);
      assertEquals(0, token3.kind);
      assertEquals(61, javaCharStream1.getEndLine());
      assertEquals(19, javaCharStream1.getColumn());
      assertEquals(19, javaCharStream1.getEndColumn());
      assertEquals(19, javaCharStream1.getBeginColumn());
      assertEquals(61, javaCharStream1.getBeginLine());
      assertEquals(61, javaCharStream1.getLine());
      assertNull(token3.toString());
      assertNotSame(stringReader1, stringReader0);
      assertNotSame(javaCharStream1, javaCharStream0);
      assertNotSame(javaParserTokenManager2, javaParserTokenManager1);
      assertNotSame(javaParserTokenManager2, javaParserTokenManager0);
      assertNotSame(token3, token0);
      assertNotSame(token3, token1);
      assertNotSame(token3, token2);
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      assertFalse(javaParserTokenManager2.equals((Object)javaParserTokenManager1));
      assertFalse(javaParserTokenManager2.equals((Object)javaParserTokenManager0));
      assertFalse(token3.equals((Object)token0));
      assertFalse(token3.equals((Object)token1));
      assertFalse(token3.equals((Object)token2));
      
      Token token5 = javaParserTokenManager2.getNextToken();
      assertEquals(61, token5.beginLine);
      assertEquals(20, token5.endColumn);
      assertEquals(106, token5.kind);
      assertEquals(20, token5.beginColumn);
      assertEquals(61, token5.endLine);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(1, javaCharStream1.bufpos);
      assertEquals("|", token5.toString());
      assertEquals(61, javaCharStream1.getEndLine());
      assertEquals(20, javaCharStream1.getEndColumn());
      assertEquals(20, javaCharStream1.getBeginColumn());
      assertEquals(20, javaCharStream1.getColumn());
      assertEquals(61, javaCharStream1.getBeginLine());
      assertEquals(61, javaCharStream1.getLine());
      assertNotSame(token5, token2);
      assertNotSame(token5, token3);
      assertNotSame(token5, token1);
      assertNotSame(token5, token0);
      assertNotSame(stringReader1, stringReader0);
      assertNotSame(javaCharStream1, javaCharStream0);
      assertNotSame(javaParserTokenManager2, javaParserTokenManager1);
      assertNotSame(javaParserTokenManager2, javaParserTokenManager0);
      assertNotNull(token5);
      assertFalse(token5.equals((Object)token2));
      assertFalse(token5.equals((Object)token3));
      assertFalse(token5.equals((Object)token1));
      assertFalse(token5.equals((Object)token0));
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      assertFalse(javaParserTokenManager2.equals((Object)javaParserTokenManager1));
      assertFalse(javaParserTokenManager2.equals((Object)javaParserTokenManager0));
  }

  @Test(timeout = 4000)
  public void test184()  throws Throwable  {
      PipedInputStream pipedInputStream0 = new PipedInputStream(4261);
      assertEquals(0, pipedInputStream0.available());
      assertNotNull(pipedInputStream0);
      
      StringReader stringReader0 = new StringReader("il*Ye=:J[oSTNnw]4I");
      assertNotNull(stringReader0);
      
      StringReader stringReader1 = new StringReader("il*Ye=:J[oSTNnw]4I");
      assertNotNull(stringReader1);
      assertFalse(stringReader1.equals((Object)stringReader0));
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader1, 101, 101);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertNotNull(javaCharStream0);
      assertFalse(stringReader1.equals((Object)stringReader0));
      
      StringReader stringReader2 = new StringReader("4.>x'FzPYsj*]tT");
      assertNotNull(stringReader2);
      assertFalse(stringReader2.equals((Object)stringReader1));
      assertFalse(stringReader2.equals((Object)stringReader0));
      
      JavaCharStream javaCharStream1 = new JavaCharStream(stringReader2, 42, 101);
      assertEquals((-1), javaCharStream1.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream1.getBeginColumn());
      assertEquals(0, javaCharStream1.getBeginLine());
      assertNotNull(javaCharStream1);
      assertFalse(stringReader2.equals((Object)stringReader1));
      assertFalse(stringReader2.equals((Object)stringReader0));
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      
      JavaCharStream javaCharStream2 = new JavaCharStream(stringReader0);
      assertEquals((-1), javaCharStream2.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream2.getBeginLine());
      assertEquals(0, javaCharStream2.getBeginColumn());
      assertNotNull(javaCharStream2);
      assertFalse(stringReader0.equals((Object)stringReader1));
      assertFalse(stringReader0.equals((Object)stringReader2));
      assertFalse(javaCharStream2.equals((Object)javaCharStream1));
      assertFalse(javaCharStream2.equals((Object)javaCharStream0));
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream2);
      assertEquals((-1), javaCharStream2.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream2.getBeginLine());
      assertEquals(0, javaCharStream2.getBeginColumn());
      assertNotNull(javaParserTokenManager0);
      assertFalse(stringReader0.equals((Object)stringReader1));
      assertFalse(stringReader0.equals((Object)stringReader2));
      assertFalse(javaCharStream2.equals((Object)javaCharStream1));
      assertFalse(javaCharStream2.equals((Object)javaCharStream0));
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(1, javaCharStream2.bufpos);
      assertEquals(1, token0.endLine);
      assertEquals(1, token0.beginLine);
      assertEquals(1, token0.beginColumn);
      assertEquals(74, token0.kind);
      assertEquals(2, token0.endColumn);
      assertEquals(1, javaCharStream2.getBeginColumn());
      assertEquals(2, javaCharStream2.getColumn());
      assertEquals(2, javaCharStream2.getEndColumn());
      assertEquals(1, javaCharStream2.getLine());
      assertEquals(1, javaCharStream2.getBeginLine());
      assertEquals(1, javaCharStream2.getEndLine());
      assertEquals("il", token0.toString());
      assertNotSame(stringReader0, stringReader1);
      assertNotSame(stringReader0, stringReader2);
      assertNotSame(javaCharStream2, javaCharStream1);
      assertNotSame(javaCharStream2, javaCharStream0);
      assertNotNull(token0);
      assertFalse(stringReader0.equals((Object)stringReader1));
      assertFalse(stringReader0.equals((Object)stringReader2));
      assertFalse(javaCharStream2.equals((Object)javaCharStream1));
      assertFalse(javaCharStream2.equals((Object)javaCharStream0));
      
      Token token1 = javaParserTokenManager0.getNextToken();
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(2, javaCharStream2.bufpos);
      assertEquals(103, token1.kind);
      assertEquals(3, token1.beginColumn);
      assertEquals(3, token1.endColumn);
      assertEquals(1, token1.endLine);
      assertEquals(1, token1.beginLine);
      assertEquals(3, javaCharStream2.getBeginColumn());
      assertEquals(1, javaCharStream2.getLine());
      assertEquals(3, javaCharStream2.getColumn());
      assertEquals(3, javaCharStream2.getEndColumn());
      assertEquals(1, javaCharStream2.getBeginLine());
      assertEquals(1, javaCharStream2.getEndLine());
      assertEquals("*", token1.toString());
      assertNotSame(stringReader0, stringReader1);
      assertNotSame(stringReader0, stringReader2);
      assertNotSame(javaCharStream2, javaCharStream1);
      assertNotSame(javaCharStream2, javaCharStream0);
      assertNotSame(token1, token0);
      assertNotNull(token1);
      assertFalse(stringReader0.equals((Object)stringReader1));
      assertFalse(stringReader0.equals((Object)stringReader2));
      assertFalse(javaCharStream2.equals((Object)javaCharStream1));
      assertFalse(javaCharStream2.equals((Object)javaCharStream0));
      assertFalse(token1.equals((Object)token0));
      
      Token token2 = javaParserTokenManager0.jjFillToken();
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(2, javaCharStream2.bufpos);
      assertEquals(103, token2.kind);
      assertEquals(3, token2.endColumn);
      assertEquals(1, token2.endLine);
      assertEquals(3, token2.beginColumn);
      assertEquals(1, token2.beginLine);
      assertEquals(3, javaCharStream2.getBeginColumn());
      assertEquals(1, javaCharStream2.getLine());
      assertEquals(3, javaCharStream2.getColumn());
      assertEquals(3, javaCharStream2.getEndColumn());
      assertEquals(1, javaCharStream2.getBeginLine());
      assertEquals(1, javaCharStream2.getEndLine());
      assertEquals("*", token2.toString());
      assertNotSame(stringReader0, stringReader1);
      assertNotSame(stringReader0, stringReader2);
      assertNotSame(javaCharStream2, javaCharStream1);
      assertNotSame(javaCharStream2, javaCharStream0);
      assertNotSame(token2, token0);
      assertNotSame(token2, token1);
      assertNotNull(token2);
      assertFalse(stringReader0.equals((Object)stringReader1));
      assertFalse(stringReader0.equals((Object)stringReader2));
      assertFalse(javaCharStream2.equals((Object)javaCharStream1));
      assertFalse(javaCharStream2.equals((Object)javaCharStream0));
      assertFalse(token2.equals((Object)token0));
      assertFalse(token2.equals((Object)token1));
  }

  @Test(timeout = 4000)
  public void test185()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "\"if\"");
      assertFalse(boolean0);
      
      StringReader stringReader0 = new StringReader("new");
      assertNotNull(stringReader0);
      
      int int0 = 20;
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, 16, 16, 20);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertNotNull(javaCharStream0);
      
      int int1 = 8;
      stringReader0.mark(8);
      javaCharStream0.column = 16;
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertNotNull(javaParserTokenManager0);
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(2, javaCharStream0.bufpos);
      assertEquals(44, token0.kind);
      assertEquals(16, token0.endLine);
      assertEquals(16, token0.beginLine);
      assertEquals(17, token0.beginColumn);
      assertEquals(19, token0.endColumn);
      assertEquals(19, javaCharStream0.getColumn());
      assertEquals(16, javaCharStream0.getEndLine());
      assertEquals(19, javaCharStream0.getEndColumn());
      assertEquals(16, javaCharStream0.getBeginLine());
      assertEquals(16, javaCharStream0.getLine());
      assertEquals(17, javaCharStream0.getBeginColumn());
      assertEquals("new", token0.toString());
      assertNotNull(token0);
      
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      javaParserTokenManager0.curLexState = 40;
      assertEquals(19, javaCharStream0.getColumn());
      assertEquals(16, javaCharStream0.getEndLine());
      assertEquals(19, javaCharStream0.getEndColumn());
      assertEquals(16, javaCharStream0.getBeginLine());
      assertEquals(16, javaCharStream0.getLine());
      assertEquals(17, javaCharStream0.getBeginColumn());
      
      javaParserTokenManager0.jjround = Integer.MAX_VALUE;
      assertEquals(19, javaCharStream0.getColumn());
      assertEquals(16, javaCharStream0.getEndLine());
      assertEquals(19, javaCharStream0.getEndColumn());
      assertEquals(16, javaCharStream0.getBeginLine());
      assertEquals(16, javaCharStream0.getLine());
      assertEquals(17, javaCharStream0.getBeginColumn());
      
      javaParserTokenManager0.jjimageLen = Integer.MAX_VALUE;
      assertEquals(19, javaCharStream0.getColumn());
      assertEquals(16, javaCharStream0.getEndLine());
      assertEquals(19, javaCharStream0.getEndColumn());
      assertEquals(16, javaCharStream0.getBeginLine());
      assertEquals(16, javaCharStream0.getLine());
      assertEquals(17, javaCharStream0.getBeginColumn());
      
      // Undeclared exception!
      try { 
        javaParserTokenManager0.SwitchTo(16);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Error: Ignoring invalid lexical state : 16. State unchanged.
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test186()  throws Throwable  {
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager((JavaCharStream) null);
      assertNotNull(javaParserTokenManager0);
      
      // Undeclared exception!
      try { 
        javaParserTokenManager0.SwitchTo((-3439));
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Error: Ignoring invalid lexical state : -3439. State unchanged.
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test187()  throws Throwable  {
      PipedInputStream pipedInputStream0 = new PipedInputStream(43);
      assertEquals(0, pipedInputStream0.available());
      assertNotNull(pipedInputStream0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(pipedInputStream0, (-45), (-45));
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, pipedInputStream0.available());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertNotNull(javaCharStream0);
      
      StringReader stringReader0 = new StringReader("Kf:q%yiN+,9<]Du");
      assertNotNull(stringReader0);
      
      StringReader stringReader1 = new StringReader("|Z2{");
      assertNotNull(stringReader1);
      assertFalse(stringReader1.equals((Object)stringReader0));
      
      StringReader stringReader2 = new StringReader("Kf:q%yiN+,9<]Du");
      assertNotNull(stringReader2);
      assertFalse(stringReader2.equals((Object)stringReader0));
      assertFalse(stringReader2.equals((Object)stringReader1));
      
      JavaCharStream javaCharStream1 = new JavaCharStream(stringReader2, 43, 43);
      assertEquals((-1), javaCharStream1.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream1.getBeginColumn());
      assertEquals(0, javaCharStream1.getBeginLine());
      assertNotNull(javaCharStream1);
      assertFalse(stringReader2.equals((Object)stringReader0));
      assertFalse(stringReader2.equals((Object)stringReader1));
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      
      StringReader stringReader3 = new StringReader("Kf:q%yiN+,9<]Du");
      assertNotNull(stringReader3);
      assertFalse(stringReader3.equals((Object)stringReader0));
      assertFalse(stringReader3.equals((Object)stringReader1));
      assertFalse(stringReader3.equals((Object)stringReader2));
      
      JavaCharStream javaCharStream2 = new JavaCharStream(stringReader1, (-1), 118);
      assertEquals((-1), javaCharStream2.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream2.getBeginColumn());
      assertEquals(0, javaCharStream2.getBeginLine());
      assertNotNull(javaCharStream2);
      assertFalse(stringReader1.equals((Object)stringReader2));
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertFalse(stringReader1.equals((Object)stringReader3));
      assertFalse(javaCharStream2.equals((Object)javaCharStream0));
      assertFalse(javaCharStream2.equals((Object)javaCharStream1));
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream2);
      assertEquals((-1), javaCharStream2.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream2.getBeginColumn());
      assertEquals(0, javaCharStream2.getBeginLine());
      assertNotNull(javaParserTokenManager0);
      assertFalse(stringReader1.equals((Object)stringReader2));
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertFalse(stringReader1.equals((Object)stringReader3));
      assertFalse(javaCharStream2.equals((Object)javaCharStream0));
      assertFalse(javaCharStream2.equals((Object)javaCharStream1));
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertEquals(0, javaCharStream2.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), token0.beginLine);
      assertEquals(106, token0.kind);
      assertEquals(118, token0.endColumn);
      assertEquals((-1), token0.endLine);
      assertEquals(118, token0.beginColumn);
      assertEquals((-1), javaCharStream2.getLine());
      assertEquals((-1), javaCharStream2.getBeginLine());
      assertEquals(118, javaCharStream2.getBeginColumn());
      assertEquals(118, javaCharStream2.getColumn());
      assertEquals(118, javaCharStream2.getEndColumn());
      assertEquals((-1), javaCharStream2.getEndLine());
      assertEquals("|", token0.toString());
      assertNotSame(stringReader1, stringReader2);
      assertNotSame(stringReader1, stringReader0);
      assertNotSame(stringReader1, stringReader3);
      assertNotSame(javaCharStream2, javaCharStream0);
      assertNotSame(javaCharStream2, javaCharStream1);
      assertNotNull(token0);
      assertFalse(stringReader1.equals((Object)stringReader2));
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertFalse(stringReader1.equals((Object)stringReader3));
      assertFalse(javaCharStream2.equals((Object)javaCharStream0));
      assertFalse(javaCharStream2.equals((Object)javaCharStream1));
  }

  @Test(timeout = 4000)
  public void test188()  throws Throwable  {
      StringReader stringReader0 = new StringReader("<IDENTIFIER>");
      assertNotNull(stringReader0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, 23, 47, 31);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertNotNull(javaCharStream0);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertNotNull(javaParserTokenManager0);
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertEquals(0, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(23, token0.endLine);
      assertEquals(47, token0.endColumn);
      assertEquals(47, token0.beginColumn);
      assertEquals(88, token0.kind);
      assertEquals(23, token0.beginLine);
      assertEquals(23, javaCharStream0.getEndLine());
      assertEquals(47, javaCharStream0.getColumn());
      assertEquals(47, javaCharStream0.getEndColumn());
      assertEquals(47, javaCharStream0.getBeginColumn());
      assertEquals(23, javaCharStream0.getBeginLine());
      assertEquals(23, javaCharStream0.getLine());
      assertEquals("<", token0.toString());
      assertNotNull(token0);
      
      javaParserTokenManager0.TokenLexicalActions(token0);
      assertEquals(0, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(23, token0.endLine);
      assertEquals(47, token0.endColumn);
      assertEquals(47, token0.beginColumn);
      assertEquals(88, token0.kind);
      assertEquals(23, token0.beginLine);
      assertEquals(23, javaCharStream0.getEndLine());
      assertEquals(47, javaCharStream0.getColumn());
      assertEquals(47, javaCharStream0.getEndColumn());
      assertEquals(47, javaCharStream0.getBeginColumn());
      assertEquals(23, javaCharStream0.getBeginLine());
      assertEquals(23, javaCharStream0.getLine());
      assertEquals("<", token0.toString());
  }

  @Test(timeout = 4000)
  public void test189()  throws Throwable  {
      Enumeration<PipedInputStream> enumeration0 = (Enumeration<PipedInputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(enumeration0).hasMoreElements();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      assertNotNull(sequenceInputStream0);
      
      StringReader stringReader0 = new StringReader("`A0TXAHt ");
      assertNotNull(stringReader0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, 0, 0, 0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertNotNull(javaCharStream0);
      
      JavaCharStream javaCharStream1 = new JavaCharStream(stringReader0, 2229, 0, 118);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream1.bufpos);
      assertEquals(0, javaCharStream1.getBeginColumn());
      assertEquals(0, javaCharStream1.getBeginLine());
      assertNotNull(javaCharStream1);
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream1);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream1.bufpos);
      assertEquals(0, javaCharStream1.getBeginColumn());
      assertEquals(0, javaCharStream1.getBeginLine());
      assertNotNull(javaParserTokenManager0);
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      
      // Undeclared exception!
      try { 
        javaParserTokenManager0.getNextToken();
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Lexical error at line 2229, column 0.  Encountered: \"`\" (96), after : \"\"
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test190()  throws Throwable  {
      StringReader stringReader0 = new StringReader("");
      assertNotNull(stringReader0);
      
      boolean boolean0 = stringReader0.ready();
      assertTrue(boolean0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, 0, 0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertNotNull(javaCharStream0);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertNotNull(javaParserTokenManager0);
      
      javaParserTokenManager0.ReInit(javaCharStream0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      
      javaParserTokenManager0.MoreLexicalActions();
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertEquals(0, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), token0.beginColumn);
      assertEquals((-1), token0.endColumn);
      assertEquals(0, token0.endLine);
      assertEquals(0, token0.beginLine);
      assertEquals(0, token0.kind);
      assertEquals((-1), javaCharStream0.getEndColumn());
      assertEquals((-1), javaCharStream0.getColumn());
      assertEquals(0, javaCharStream0.getLine());
      assertEquals((-1), javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getEndLine());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals("", token0.toString());
      assertNotNull(token0);
      
      javaParserTokenManager0.TokenLexicalActions(token0);
      assertEquals(0, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), token0.beginColumn);
      assertEquals((-1), token0.endColumn);
      assertEquals(0, token0.endLine);
      assertEquals(0, token0.beginLine);
      assertEquals(0, token0.kind);
      assertEquals((-1), javaCharStream0.getEndColumn());
      assertEquals((-1), javaCharStream0.getColumn());
      assertEquals(0, javaCharStream0.getLine());
      assertEquals((-1), javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getEndLine());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals("", token0.toString());
      
      MockPrintStream mockPrintStream0 = new MockPrintStream("<EXPONENT>");
      assertNotNull(mockPrintStream0);
      
      Locale locale0 = Locale.TAIWAN;
      assertEquals("TW", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("TWN", locale0.getISO3Country());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("zh_TW", locale0.toString());
      assertNotNull(locale0);
      
      String[] stringArray0 = Locale.getISOLanguages();
      assertNotNull(stringArray0);
      assertEquals(188, stringArray0.length);
      
      boolean boolean1 = locale0.hasExtensions();
      assertEquals("TW", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("TWN", locale0.getISO3Country());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("zh_TW", locale0.toString());
      assertFalse(boolean1);
      assertFalse(boolean1 == boolean0);
      
      mockPrintStream0.write(0);
      PrintStream printStream0 = mockPrintStream0.printf(locale0, "", (Object[]) javaParserTokenManager0.lexStateNames);
      assertEquals(0, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.getEndColumn());
      assertEquals((-1), javaCharStream0.getColumn());
      assertEquals(0, javaCharStream0.getLine());
      assertEquals((-1), javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getEndLine());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals("TW", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("TWN", locale0.getISO3Country());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("zh_TW", locale0.toString());
      assertSame(mockPrintStream0, printStream0);
      assertSame(printStream0, mockPrintStream0);
      assertNotNull(printStream0);
      
      // Undeclared exception!
      try { 
        mockPrintStream0.println((char[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.Writer", e);
      }
  }

  @Test(timeout = 4000)
  public void test191()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "+=");
      assertFalse(boolean0);
      
      StringReader stringReader0 = new StringReader("f%3T%gku6");
      assertNotNull(stringReader0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, 63, 63);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertNotNull(javaCharStream0);
      
      boolean boolean1 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "HX[Y");
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertNotNull(javaParserTokenManager0);
      
      JavaParserTokenManager javaParserTokenManager1 = new JavaParserTokenManager(javaCharStream0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertNotNull(javaParserTokenManager1);
      assertFalse(javaParserTokenManager1.equals((Object)javaParserTokenManager0));
      
      JavaParserTokenManager javaParserTokenManager2 = new JavaParserTokenManager(javaCharStream0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertNotNull(javaParserTokenManager2);
      assertFalse(javaParserTokenManager2.equals((Object)javaParserTokenManager0));
      assertFalse(javaParserTokenManager2.equals((Object)javaParserTokenManager1));
      
      Token token0 = javaParserTokenManager2.getNextToken();
      assertEquals(0, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(63, token0.endLine);
      assertEquals(74, token0.kind);
      assertEquals(63, token0.endColumn);
      assertEquals(63, token0.beginLine);
      assertEquals(63, token0.beginColumn);
      assertEquals(63, javaCharStream0.getBeginLine());
      assertEquals(63, javaCharStream0.getEndColumn());
      assertEquals(63, javaCharStream0.getLine());
      assertEquals(63, javaCharStream0.getEndLine());
      assertEquals(63, javaCharStream0.getColumn());
      assertEquals(63, javaCharStream0.getBeginColumn());
      assertEquals("f", token0.toString());
      assertNotSame(javaParserTokenManager2, javaParserTokenManager0);
      assertNotSame(javaParserTokenManager2, javaParserTokenManager1);
      assertNotNull(token0);
      assertFalse(javaParserTokenManager2.equals((Object)javaParserTokenManager0));
      assertFalse(javaParserTokenManager2.equals((Object)javaParserTokenManager1));
      
      Token token1 = javaParserTokenManager0.getNextToken();
      assertEquals(1, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(108, token1.kind);
      assertEquals(63, token1.endLine);
      assertEquals(64, token1.endColumn);
      assertEquals(64, token1.beginColumn);
      assertEquals(63, token1.beginLine);
      assertEquals(63, javaCharStream0.getBeginLine());
      assertEquals(64, javaCharStream0.getEndColumn());
      assertEquals(63, javaCharStream0.getLine());
      assertEquals(63, javaCharStream0.getEndLine());
      assertEquals(64, javaCharStream0.getColumn());
      assertEquals(64, javaCharStream0.getBeginColumn());
      assertEquals("%", token1.toString());
      assertNotSame(javaParserTokenManager0, javaParserTokenManager2);
      assertNotSame(javaParserTokenManager0, javaParserTokenManager1);
      assertNotSame(token1, token0);
      assertNotNull(token1);
      assertFalse(javaParserTokenManager0.equals((Object)javaParserTokenManager2));
      assertFalse(javaParserTokenManager0.equals((Object)javaParserTokenManager1));
      assertFalse(token1.equals((Object)token0));
  }

  @Test(timeout = 4000)
  public void test192()  throws Throwable  {
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      assertFalse(fileDescriptor0.valid());
      assertNotNull(fileDescriptor0);
      
      PipedInputStream pipedInputStream0 = new PipedInputStream(26);
      assertEquals(0, pipedInputStream0.available());
      assertNotNull(pipedInputStream0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(pipedInputStream0, 5, 5);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, pipedInputStream0.available());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertNotNull(javaCharStream0);
      
      StringReader stringReader0 = new StringReader("t!hR%]{");
      assertNotNull(stringReader0);
      
      int int0 = stringReader0.read();
      assertEquals(116, int0);
      
      JavaCharStream javaCharStream1 = new JavaCharStream(stringReader0, (-2565), 93);
      assertEquals((-1), javaCharStream1.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream1.getBeginLine());
      assertEquals(0, javaCharStream1.getBeginColumn());
      assertNotNull(javaCharStream1);
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream1);
      assertEquals((-1), javaCharStream1.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream1.getBeginLine());
      assertEquals(0, javaCharStream1.getBeginColumn());
      assertNotNull(javaParserTokenManager0);
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertEquals(0, javaCharStream1.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(93, token0.endColumn);
      assertEquals(93, token0.beginColumn);
      assertEquals((-2565), token0.beginLine);
      assertEquals((-2565), token0.endLine);
      assertEquals(89, token0.kind);
      assertEquals(93, javaCharStream1.getEndColumn());
      assertEquals((-2565), javaCharStream1.getLine());
      assertEquals((-2565), javaCharStream1.getBeginLine());
      assertEquals(93, javaCharStream1.getColumn());
      assertEquals(93, javaCharStream1.getBeginColumn());
      assertEquals((-2565), javaCharStream1.getEndLine());
      assertEquals("!", token0.toString());
      assertNotSame(javaCharStream1, javaCharStream0);
      assertNotNull(token0);
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
  }

  @Test(timeout = 4000)
  public void test193()  throws Throwable  {
      StringReader stringReader0 = new StringReader("implments");
      assertNotNull(stringReader0);
      
      int int0 = 41;
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, 41, (-1680), 122);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertNotNull(javaCharStream0);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertNotNull(javaParserTokenManager0);
      
      javaCharStream0.line = (-775);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      
      StringReader stringReader1 = new StringReader("implments");
      assertNotNull(stringReader1);
      assertFalse(stringReader1.equals((Object)stringReader0));
      
      JavaCharStream javaCharStream1 = new JavaCharStream(stringReader1, 41, 9);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream1.bufpos);
      assertEquals(0, javaCharStream1.getBeginColumn());
      assertEquals(0, javaCharStream1.getBeginLine());
      assertNotNull(javaCharStream1);
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      
      JavaParserTokenManager javaParserTokenManager1 = new JavaParserTokenManager(javaCharStream0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertNotNull(javaParserTokenManager1);
      assertFalse(stringReader0.equals((Object)stringReader1));
      assertFalse(javaCharStream0.equals((Object)javaCharStream1));
      assertFalse(javaParserTokenManager1.equals((Object)javaParserTokenManager0));
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(8, javaCharStream0.bufpos);
      assertEquals(74, token0.kind);
      assertEquals((-1680), token0.beginColumn);
      assertEquals((-775), token0.endLine);
      assertEquals((-775), token0.beginLine);
      assertEquals((-1672), token0.endColumn);
      assertEquals((-1680), javaCharStream0.getBeginColumn());
      assertEquals((-775), javaCharStream0.getLine());
      assertEquals((-1672), javaCharStream0.getEndColumn());
      assertEquals((-775), javaCharStream0.getBeginLine());
      assertEquals((-1672), javaCharStream0.getColumn());
      assertEquals((-775), javaCharStream0.getEndLine());
      assertEquals("implments", token0.toString());
      assertNotSame(stringReader0, stringReader1);
      assertNotSame(javaCharStream0, javaCharStream1);
      assertNotSame(javaParserTokenManager0, javaParserTokenManager1);
      assertNotNull(token0);
      assertFalse(stringReader0.equals((Object)stringReader1));
      assertFalse(javaCharStream0.equals((Object)javaCharStream1));
      assertFalse(javaParserTokenManager0.equals((Object)javaParserTokenManager1));
      
      Token token1 = javaParserTokenManager1.getNextToken();
      assertEquals(0, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, token1.kind);
      assertEquals((-775), token1.endLine);
      assertEquals((-1672), token1.endColumn);
      assertEquals((-1672), token1.beginColumn);
      assertEquals((-775), token1.beginLine);
      assertEquals((-775), javaCharStream0.getLine());
      assertEquals((-1672), javaCharStream0.getEndColumn());
      assertEquals((-775), javaCharStream0.getBeginLine());
      assertEquals((-1672), javaCharStream0.getColumn());
      assertEquals((-1672), javaCharStream0.getBeginColumn());
      assertEquals((-775), javaCharStream0.getEndLine());
      assertEquals("", token1.toString());
      assertNotSame(stringReader0, stringReader1);
      assertNotSame(javaCharStream0, javaCharStream1);
      assertNotSame(javaParserTokenManager1, javaParserTokenManager0);
      assertNotSame(token1, token0);
      assertNotNull(token1);
      assertFalse(stringReader0.equals((Object)stringReader1));
      assertFalse(javaCharStream0.equals((Object)javaCharStream1));
      assertFalse(javaParserTokenManager1.equals((Object)javaParserTokenManager0));
      assertFalse(token1.equals((Object)token0));
      
      // Undeclared exception!
      try { 
        javaParserTokenManager1.SwitchTo(int0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Error: Ignoring invalid lexical state : 41. State unchanged.
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test194()  throws Throwable  {
      StringReader stringReader0 = new StringReader("enum");
      assertNotNull(stringReader0);
      
      CharBuffer charBuffer0 = CharBuffer.wrap((CharSequence) "enum", 0, 0);
      assertFalse(charBuffer0.hasArray());
      assertEquals(0, charBuffer0.position());
      assertFalse(charBuffer0.hasRemaining());
      assertFalse(charBuffer0.isDirect());
      assertEquals(0, charBuffer0.limit());
      assertEquals(0, charBuffer0.length());
      assertEquals("", charBuffer0.toString());
      assertEquals(4, charBuffer0.capacity());
      assertTrue(charBuffer0.isReadOnly());
      assertEquals(0, charBuffer0.remaining());
      assertNotNull(charBuffer0);
      
      int int0 = stringReader0.read(charBuffer0);
      assertFalse(charBuffer0.hasArray());
      assertEquals(0, charBuffer0.position());
      assertFalse(charBuffer0.hasRemaining());
      assertFalse(charBuffer0.isDirect());
      assertEquals(0, charBuffer0.limit());
      assertEquals(0, charBuffer0.length());
      assertEquals("", charBuffer0.toString());
      assertEquals(4, charBuffer0.capacity());
      assertTrue(charBuffer0.isReadOnly());
      assertEquals(0, charBuffer0.remaining());
      assertEquals(0, int0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, 707, 707);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertNotNull(javaCharStream0);
      
      char char0 = javaCharStream0.readChar();
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.bufpos);
      assertEquals(707, javaCharStream0.getEndColumn());
      assertEquals(707, javaCharStream0.getBeginLine());
      assertEquals(707, javaCharStream0.getLine());
      assertEquals(707, javaCharStream0.getColumn());
      assertEquals(707, javaCharStream0.getBeginColumn());
      assertEquals(707, javaCharStream0.getEndLine());
      assertEquals('e', char0);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0, 0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.bufpos);
      assertEquals(707, javaCharStream0.getEndColumn());
      assertEquals(707, javaCharStream0.getBeginLine());
      assertEquals(707, javaCharStream0.getLine());
      assertEquals(707, javaCharStream0.getColumn());
      assertEquals(707, javaCharStream0.getBeginColumn());
      assertEquals(707, javaCharStream0.getEndLine());
      assertNotNull(javaParserTokenManager0);
      
      javaParserTokenManager0.ReInit(javaCharStream0, 0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.bufpos);
      assertEquals(707, javaCharStream0.getEndColumn());
      assertEquals(707, javaCharStream0.getBeginLine());
      assertEquals(707, javaCharStream0.getLine());
      assertEquals(707, javaCharStream0.getColumn());
      assertEquals(707, javaCharStream0.getBeginColumn());
      assertEquals(707, javaCharStream0.getEndLine());
  }

  @Test(timeout = 4000)
  public void test195()  throws Throwable  {
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      assertFalse(fileDescriptor0.valid());
      assertNotNull(fileDescriptor0);
      
      StringReader stringReader0 = new StringReader("aUYO[skX?G2og");
      assertNotNull(stringReader0);
      
      StringReader stringReader1 = new StringReader("aUYO[skX?G2og");
      assertNotNull(stringReader1);
      assertFalse(stringReader1.equals((Object)stringReader0));
      
      StringReader stringReader2 = new StringReader(";y*]LoGS'");
      assertNotNull(stringReader2);
      assertFalse(stringReader2.equals((Object)stringReader0));
      assertFalse(stringReader2.equals((Object)stringReader1));
      
      StringReader stringReader3 = new StringReader("||");
      assertNotNull(stringReader3);
      assertFalse(stringReader3.equals((Object)stringReader2));
      assertFalse(stringReader3.equals((Object)stringReader0));
      assertFalse(stringReader3.equals((Object)stringReader1));
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader2, (-2661), (-2661));
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertNotNull(javaCharStream0);
      assertFalse(stringReader2.equals((Object)stringReader3));
      assertFalse(stringReader2.equals((Object)stringReader0));
      assertFalse(stringReader2.equals((Object)stringReader1));
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertNotNull(javaParserTokenManager0);
      assertFalse(stringReader2.equals((Object)stringReader3));
      assertFalse(stringReader2.equals((Object)stringReader0));
      assertFalse(stringReader2.equals((Object)stringReader1));
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertEquals(0, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(83, token0.kind);
      assertEquals((-2661), token0.endLine);
      assertEquals((-2661), token0.beginColumn);
      assertEquals((-2661), token0.endColumn);
      assertEquals((-2661), token0.beginLine);
      assertEquals((-2661), javaCharStream0.getBeginLine());
      assertEquals((-2661), javaCharStream0.getLine());
      assertEquals((-2661), javaCharStream0.getColumn());
      assertEquals((-2661), javaCharStream0.getEndLine());
      assertEquals((-2661), javaCharStream0.getEndColumn());
      assertEquals((-2661), javaCharStream0.getBeginColumn());
      assertEquals(";", token0.toString());
      assertNotSame(stringReader2, stringReader3);
      assertNotSame(stringReader2, stringReader0);
      assertNotSame(stringReader2, stringReader1);
      assertNotNull(token0);
      assertFalse(stringReader2.equals((Object)stringReader3));
      assertFalse(stringReader2.equals((Object)stringReader0));
      assertFalse(stringReader2.equals((Object)stringReader1));
      
      Token token1 = javaParserTokenManager0.getNextToken();
      assertEquals(0, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(74, token1.kind);
      assertEquals((-2661), token1.beginLine);
      assertEquals((-2661), token1.endLine);
      assertEquals((-2660), token1.endColumn);
      assertEquals((-2660), token1.beginColumn);
      assertEquals((-2661), javaCharStream0.getBeginLine());
      assertEquals((-2660), javaCharStream0.getColumn());
      assertEquals((-2660), javaCharStream0.getEndColumn());
      assertEquals((-2661), javaCharStream0.getLine());
      assertEquals((-2660), javaCharStream0.getBeginColumn());
      assertEquals((-2661), javaCharStream0.getEndLine());
      assertEquals("y", token1.toString());
      assertNotSame(stringReader2, stringReader3);
      assertNotSame(stringReader2, stringReader0);
      assertNotSame(stringReader2, stringReader1);
      assertNotSame(token1, token0);
      assertNotNull(token1);
      assertFalse(stringReader2.equals((Object)stringReader3));
      assertFalse(stringReader2.equals((Object)stringReader0));
      assertFalse(stringReader2.equals((Object)stringReader1));
      assertFalse(token1.equals((Object)token0));
  }

  @Test(timeout = 4000)
  public void test196()  throws Throwable  {
      PipedInputStream pipedInputStream0 = new PipedInputStream(57);
      assertEquals(0, pipedInputStream0.available());
      assertNotNull(pipedInputStream0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(pipedInputStream0, 57, 46);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, pipedInputStream0.available());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertNotNull(javaCharStream0);
      
      StringReader stringReader0 = new StringReader("]M#]");
      assertNotNull(stringReader0);
      
      int int0 = stringReader0.read();
      assertEquals(93, int0);
      
      JavaCharStream javaCharStream1 = new JavaCharStream(stringReader0, (-1), 57);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream1.bufpos);
      assertEquals(0, javaCharStream1.getBeginColumn());
      assertEquals(0, javaCharStream1.getBeginLine());
      assertNotNull(javaCharStream1);
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream1);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream1.bufpos);
      assertEquals(0, javaCharStream1.getBeginColumn());
      assertEquals(0, javaCharStream1.getBeginLine());
      assertNotNull(javaParserTokenManager0);
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertEquals(0, javaCharStream1.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(57, token0.beginColumn);
      assertEquals(57, token0.endColumn);
      assertEquals((-1), token0.beginLine);
      assertEquals((-1), token0.endLine);
      assertEquals(74, token0.kind);
      assertEquals((-1), javaCharStream1.getEndLine());
      assertEquals(57, javaCharStream1.getEndColumn());
      assertEquals(57, javaCharStream1.getBeginColumn());
      assertEquals(57, javaCharStream1.getColumn());
      assertEquals((-1), javaCharStream1.getBeginLine());
      assertEquals((-1), javaCharStream1.getLine());
      assertEquals("M", token0.toString());
      assertNotSame(javaCharStream1, javaCharStream0);
      assertNotNull(token0);
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      
      javaParserTokenManager0.TokenLexicalActions(token0);
      assertEquals(0, javaCharStream1.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(57, token0.beginColumn);
      assertEquals(57, token0.endColumn);
      assertEquals((-1), token0.beginLine);
      assertEquals((-1), token0.endLine);
      assertEquals(74, token0.kind);
      assertEquals((-1), javaCharStream1.getEndLine());
      assertEquals(57, javaCharStream1.getEndColumn());
      assertEquals(57, javaCharStream1.getBeginColumn());
      assertEquals(57, javaCharStream1.getColumn());
      assertEquals((-1), javaCharStream1.getBeginLine());
      assertEquals((-1), javaCharStream1.getLine());
      assertEquals("M", token0.toString());
      assertNotSame(javaCharStream1, javaCharStream0);
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
  }

  @Test(timeout = 4000)
  public void test197()  throws Throwable  {
      StringReader stringReader0 = new StringReader("f%3T7%gku6");
      assertNotNull(stringReader0);
      
      int int0 = stringReader0.read();
      assertEquals(102, int0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, 84, 1024);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertNotNull(javaCharStream0);
      
      boolean boolean0 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "");
      assertFalse(boolean0);
      
      JavaCharStream javaCharStream1 = new JavaCharStream(stringReader0, 1356, 36);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream1.bufpos);
      assertEquals(0, javaCharStream1.getBeginLine());
      assertEquals(0, javaCharStream1.getBeginColumn());
      assertNotNull(javaCharStream1);
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream1);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream1.bufpos);
      assertEquals(0, javaCharStream1.getBeginLine());
      assertEquals(0, javaCharStream1.getBeginColumn());
      assertNotNull(javaParserTokenManager0);
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream1.bufpos);
      assertEquals(36, token0.endColumn);
      assertEquals(1356, token0.endLine);
      assertEquals(36, token0.beginColumn);
      assertEquals(108, token0.kind);
      assertEquals(1356, token0.beginLine);
      assertEquals(36, javaCharStream1.getColumn());
      assertEquals(36, javaCharStream1.getEndColumn());
      assertEquals(1356, javaCharStream1.getBeginLine());
      assertEquals(36, javaCharStream1.getBeginColumn());
      assertEquals(1356, javaCharStream1.getEndLine());
      assertEquals(1356, javaCharStream1.getLine());
      assertEquals("%", token0.toString());
      assertNotSame(javaCharStream1, javaCharStream0);
      assertNotNull(token0);
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      
      Token token1 = javaParserTokenManager0.getNextToken();
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(1, javaCharStream1.bufpos);
      assertEquals(1356, token1.endLine);
      assertEquals(1356, token1.beginLine);
      assertEquals(37, token1.endColumn);
      assertEquals(66, token1.kind);
      assertEquals(37, token1.beginColumn);
      assertEquals(37, javaCharStream1.getBeginColumn());
      assertEquals(1356, javaCharStream1.getBeginLine());
      assertEquals(37, javaCharStream1.getEndColumn());
      assertEquals(1356, javaCharStream1.getEndLine());
      assertEquals(1356, javaCharStream1.getLine());
      assertEquals(37, javaCharStream1.getColumn());
      assertEquals("3", token1.toString());
      assertNotSame(javaCharStream1, javaCharStream0);
      assertNotSame(token1, token0);
      assertNotNull(token1);
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      assertFalse(token1.equals((Object)token0));
  }

  @Test(timeout = 4000)
  public void test198()  throws Throwable  {
      StringReader stringReader0 = new StringReader("{Cm");
      assertNotNull(stringReader0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, 60, 60, 0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertNotNull(javaCharStream0);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertNotNull(javaParserTokenManager0);
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.bufpos);
      assertEquals(60, token0.endLine);
      assertEquals(60, token0.endColumn);
      assertEquals(60, token0.beginLine);
      assertEquals(60, token0.beginColumn);
      assertEquals(79, token0.kind);
      assertEquals(60, javaCharStream0.getBeginColumn());
      assertEquals(60, javaCharStream0.getEndColumn());
      assertEquals(60, javaCharStream0.getBeginLine());
      assertEquals(60, javaCharStream0.getLine());
      assertEquals(60, javaCharStream0.getColumn());
      assertEquals(60, javaCharStream0.getEndLine());
      assertEquals("{", token0.toString());
      assertNotNull(token0);
      
      Token token1 = javaParserTokenManager0.getNextToken();
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(1, javaCharStream0.bufpos);
      assertEquals(60, token1.endLine);
      assertEquals(74, token1.kind);
      assertEquals(62, token1.endColumn);
      assertEquals(61, token1.beginColumn);
      assertEquals(60, token1.beginLine);
      assertEquals(61, javaCharStream0.getBeginColumn());
      assertEquals(62, javaCharStream0.getEndColumn());
      assertEquals(60, javaCharStream0.getBeginLine());
      assertEquals(60, javaCharStream0.getLine());
      assertEquals(62, javaCharStream0.getColumn());
      assertEquals(60, javaCharStream0.getEndLine());
      assertEquals("Cm", token1.toString());
      assertNotSame(token1, token0);
      assertNotNull(token1);
      assertFalse(token1.equals((Object)token0));
  }

  @Test(timeout = 4000)
  public void test199()  throws Throwable  {
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      assertFalse(fileDescriptor0.valid());
      assertNotNull(fileDescriptor0);
      
      PipedInputStream pipedInputStream0 = new PipedInputStream(26);
      assertEquals(0, pipedInputStream0.available());
      assertNotNull(pipedInputStream0);
      
      pipedInputStream0.close();
      assertEquals(0, pipedInputStream0.available());
      
      JavaCharStream javaCharStream0 = new JavaCharStream(pipedInputStream0, 5, (-45));
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertEquals(0, pipedInputStream0.available());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertNotNull(javaCharStream0);
      
      StringReader stringReader0 = new StringReader("ZbHQK6!OR ");
      assertNotNull(stringReader0);
      
      StringReader stringReader1 = new StringReader("t!hR-]{");
      assertNotNull(stringReader1);
      assertFalse(stringReader1.equals((Object)stringReader0));
      
      JavaCharStream javaCharStream1 = new JavaCharStream(stringReader0, 26, (-1));
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream1.bufpos);
      assertEquals(0, javaCharStream1.getBeginColumn());
      assertEquals(0, javaCharStream1.getBeginLine());
      assertNotNull(javaCharStream1);
      assertFalse(stringReader0.equals((Object)stringReader1));
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream1);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream1.bufpos);
      assertEquals(0, javaCharStream1.getBeginColumn());
      assertEquals(0, javaCharStream1.getBeginLine());
      assertNotNull(javaParserTokenManager0);
      assertFalse(stringReader0.equals((Object)stringReader1));
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertEquals(5, javaCharStream1.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(26, token0.beginLine);
      assertEquals(26, token0.endLine);
      assertEquals((-1), token0.beginColumn);
      assertEquals(4, token0.endColumn);
      assertEquals(74, token0.kind);
      assertEquals((-1), javaCharStream1.getBeginColumn());
      assertEquals(26, javaCharStream1.getEndLine());
      assertEquals(4, javaCharStream1.getEndColumn());
      assertEquals(26, javaCharStream1.getBeginLine());
      assertEquals(26, javaCharStream1.getLine());
      assertEquals(4, javaCharStream1.getColumn());
      assertEquals("ZbHQK6", token0.toString());
      assertNotSame(stringReader0, stringReader1);
      assertNotSame(javaCharStream1, javaCharStream0);
      assertNotNull(token0);
      assertFalse(stringReader0.equals((Object)stringReader1));
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
  }

  @Test(timeout = 4000)
  public void test200()  throws Throwable  {
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      assertFalse(fileDescriptor0.valid());
      assertNotNull(fileDescriptor0);
      
      boolean boolean0 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "t`LYJy$=jm$_HY!");
      assertFalse(boolean0);
      
      StringReader stringReader0 = new StringReader("aUYO[&skX?G2og");
      assertNotNull(stringReader0);
      
      int int0 = stringReader0.read();
      assertEquals(97, int0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, (-3059), 1);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertNotNull(javaCharStream0);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertNotNull(javaParserTokenManager0);
      
      JavaParserTokenManager javaParserTokenManager1 = new JavaParserTokenManager(javaCharStream0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertNotNull(javaParserTokenManager1);
      assertFalse(javaParserTokenManager1.equals((Object)javaParserTokenManager0));
      
      Token token0 = javaParserTokenManager1.getNextToken();
      assertEquals(2, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(1, token0.beginColumn);
      assertEquals(74, token0.kind);
      assertEquals((-3059), token0.endLine);
      assertEquals((-3059), token0.beginLine);
      assertEquals(3, token0.endColumn);
      assertEquals(1, javaCharStream0.getBeginColumn());
      assertEquals((-3059), javaCharStream0.getBeginLine());
      assertEquals((-3059), javaCharStream0.getLine());
      assertEquals(3, javaCharStream0.getEndColumn());
      assertEquals(3, javaCharStream0.getColumn());
      assertEquals((-3059), javaCharStream0.getEndLine());
      assertEquals("UYO", token0.toString());
      assertNotSame(javaParserTokenManager1, javaParserTokenManager0);
      assertNotNull(token0);
      assertFalse(javaParserTokenManager1.equals((Object)javaParserTokenManager0));
      
      javaParserTokenManager1.TokenLexicalActions(token0);
      assertEquals(2, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(1, token0.beginColumn);
      assertEquals(74, token0.kind);
      assertEquals((-3059), token0.endLine);
      assertEquals((-3059), token0.beginLine);
      assertEquals(3, token0.endColumn);
      assertEquals(1, javaCharStream0.getBeginColumn());
      assertEquals((-3059), javaCharStream0.getBeginLine());
      assertEquals((-3059), javaCharStream0.getLine());
      assertEquals(3, javaCharStream0.getEndColumn());
      assertEquals(3, javaCharStream0.getColumn());
      assertEquals((-3059), javaCharStream0.getEndLine());
      assertEquals("UYO", token0.toString());
      assertNotSame(javaParserTokenManager1, javaParserTokenManager0);
      assertFalse(javaParserTokenManager1.equals((Object)javaParserTokenManager0));
      
      javaParserTokenManager0.SkipLexicalActions(token0);
      assertEquals(2, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(1, token0.beginColumn);
      assertEquals(74, token0.kind);
      assertEquals((-3059), token0.endLine);
      assertEquals((-3059), token0.beginLine);
      assertEquals(3, token0.endColumn);
      assertEquals(1, javaCharStream0.getBeginColumn());
      assertEquals((-3059), javaCharStream0.getBeginLine());
      assertEquals((-3059), javaCharStream0.getLine());
      assertEquals(3, javaCharStream0.getEndColumn());
      assertEquals(3, javaCharStream0.getColumn());
      assertEquals((-3059), javaCharStream0.getEndLine());
      assertEquals("UYO", token0.toString());
      assertNotSame(javaParserTokenManager0, javaParserTokenManager1);
      assertNotSame(javaParserTokenManager1, javaParserTokenManager0);
      assertFalse(javaParserTokenManager0.equals((Object)javaParserTokenManager1));
      assertFalse(javaParserTokenManager1.equals((Object)javaParserTokenManager0));
  }

  @Test(timeout = 4000)
  public void test201()  throws Throwable  {
      PipedInputStream pipedInputStream0 = new PipedInputStream(57);
      assertEquals(0, pipedInputStream0.available());
      assertNotNull(pipedInputStream0);
      
      StringReader stringReader0 = new StringReader("<Azdbx*VQOk[X_d");
      assertNotNull(stringReader0);
      
      int int0 = stringReader0.read();
      assertEquals(60, int0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, 22, 57);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertNotNull(javaCharStream0);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertNotNull(javaParserTokenManager0);
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertEquals(4, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(61, token0.endColumn);
      assertEquals(22, token0.endLine);
      assertEquals(22, token0.beginLine);
      assertEquals(74, token0.kind);
      assertEquals(57, token0.beginColumn);
      assertEquals(61, javaCharStream0.getEndColumn());
      assertEquals(22, javaCharStream0.getBeginLine());
      assertEquals(57, javaCharStream0.getBeginColumn());
      assertEquals(61, javaCharStream0.getColumn());
      assertEquals(22, javaCharStream0.getEndLine());
      assertEquals(22, javaCharStream0.getLine());
      assertEquals("Azdbx", token0.toString());
      assertNotNull(token0);
      
      StringReader stringReader1 = new StringReader("<Azdbx*VQOk[X_d");
      assertNotNull(stringReader1);
      assertFalse(stringReader1.equals((Object)stringReader0));
      
      JavaParserTokenManager javaParserTokenManager1 = new JavaParserTokenManager(javaCharStream0);
      assertEquals(4, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(61, javaCharStream0.getEndColumn());
      assertEquals(22, javaCharStream0.getBeginLine());
      assertEquals(57, javaCharStream0.getBeginColumn());
      assertEquals(61, javaCharStream0.getColumn());
      assertEquals(22, javaCharStream0.getEndLine());
      assertEquals(22, javaCharStream0.getLine());
      assertNotNull(javaParserTokenManager1);
      assertFalse(stringReader0.equals((Object)stringReader1));
      assertFalse(javaParserTokenManager1.equals((Object)javaParserTokenManager0));
      
      Token token1 = javaParserTokenManager0.getNextToken();
      assertEquals(5, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(103, token1.kind);
      assertEquals(22, token1.beginLine);
      assertEquals(22, token1.endLine);
      assertEquals(62, token1.endColumn);
      assertEquals(62, token1.beginColumn);
      assertEquals(62, javaCharStream0.getBeginColumn());
      assertEquals(62, javaCharStream0.getColumn());
      assertEquals(22, javaCharStream0.getBeginLine());
      assertEquals(62, javaCharStream0.getEndColumn());
      assertEquals(22, javaCharStream0.getEndLine());
      assertEquals(22, javaCharStream0.getLine());
      assertEquals("*", token1.toString());
      assertNotSame(stringReader0, stringReader1);
      assertNotSame(javaParserTokenManager0, javaParserTokenManager1);
      assertNotSame(token1, token0);
      assertNotNull(token1);
      assertFalse(stringReader0.equals((Object)stringReader1));
      assertFalse(javaParserTokenManager0.equals((Object)javaParserTokenManager1));
      assertFalse(token1.equals((Object)token0));
  }

  @Test(timeout = 4000)
  public void test202()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "t`LYJy$=jm$_HY!");
      assertFalse(boolean0);
      
      StringReader stringReader0 = new StringReader("nT!tlJT6j7");
      assertNotNull(stringReader0);
      
      int int0 = stringReader0.read();
      assertEquals(110, int0);
      
      int int1 = stringReader0.read();
      assertEquals(84, int1);
      assertFalse(int1 == int0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, 3549, 40);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertNotNull(javaCharStream0);
      
      JavaCharStream javaCharStream1 = new JavaCharStream(stringReader0, 3549, 1304);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream1.bufpos);
      assertEquals(0, javaCharStream1.getBeginColumn());
      assertEquals(0, javaCharStream1.getBeginLine());
      assertNotNull(javaCharStream1);
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      
      javaCharStream1.ExpandBuff(false);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream1.bufpos);
      assertEquals(0, javaCharStream1.getBeginColumn());
      assertEquals(0, javaCharStream1.getBeginLine());
      assertNotSame(javaCharStream1, javaCharStream0);
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream1);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream1.bufpos);
      assertEquals(0, javaCharStream1.getBeginColumn());
      assertEquals(0, javaCharStream1.getBeginLine());
      assertNotNull(javaParserTokenManager0);
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream1.bufpos);
      assertEquals(3549, token0.endLine);
      assertEquals(3549, token0.beginLine);
      assertEquals(1304, token0.endColumn);
      assertEquals(1304, token0.beginColumn);
      assertEquals(89, token0.kind);
      assertEquals(1304, javaCharStream1.getColumn());
      assertEquals(1304, javaCharStream1.getBeginColumn());
      assertEquals(3549, javaCharStream1.getBeginLine());
      assertEquals(1304, javaCharStream1.getEndColumn());
      assertEquals(3549, javaCharStream1.getEndLine());
      assertEquals(3549, javaCharStream1.getLine());
      assertEquals("!", token0.toString());
      assertNotSame(javaCharStream1, javaCharStream0);
      assertNotNull(token0);
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
  }

  @Test(timeout = 4000)
  public void test203()  throws Throwable  {
      StringReader stringReader0 = new StringReader("f%3T%gku6");
      assertNotNull(stringReader0);
      
      int int0 = stringReader0.read();
      assertEquals(102, int0);
      
      StringReader stringReader1 = new StringReader("f%3T%gku6");
      assertNotNull(stringReader1);
      assertFalse(stringReader1.equals((Object)stringReader0));
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, 102, (-47), 102);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertNotNull(javaCharStream0);
      assertFalse(stringReader0.equals((Object)stringReader1));
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertNotNull(javaParserTokenManager0);
      assertFalse(stringReader0.equals((Object)stringReader1));
      
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)123;
      byteArray0[1] = (byte)123;
      byteArray0[2] = (byte)7;
      javaParserTokenManager0.curLexState = (int) (byte)123;
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      
      byteArray0[3] = (byte)14;
      byteArray0[4] = (byte)27;
      boolean boolean0 = FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      assertArrayEquals(new byte[] {(byte)123, (byte)123, (byte)7, (byte)14, (byte)27}, byteArray0);
      assertFalse(boolean0);
      assertEquals(5, byteArray0.length);
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.bufpos);
      assertEquals((-47), token0.beginColumn);
      assertEquals(102, token0.beginLine);
      assertEquals((-47), token0.endColumn);
      assertEquals(0, token0.kind);
      assertEquals(102, token0.endLine);
      assertEquals(102, javaCharStream0.getBeginLine());
      assertEquals((-47), javaCharStream0.getBeginColumn());
      assertEquals((-47), javaCharStream0.getColumn());
      assertEquals((-47), javaCharStream0.getEndColumn());
      assertEquals(102, javaCharStream0.getEndLine());
      assertEquals(102, javaCharStream0.getLine());
      assertEquals("", token0.toString());
      assertNotSame(stringReader0, stringReader1);
      assertNotNull(token0);
      assertFalse(stringReader0.equals((Object)stringReader1));
      
      Token token1 = new Token();
      assertEquals(0, token1.beginLine);
      assertEquals(0, token1.kind);
      assertEquals(0, token1.endLine);
      assertEquals(0, token1.endColumn);
      assertEquals(0, token1.beginColumn);
      assertNull(token1.toString());
      assertNotNull(token1);
      assertFalse(token1.equals((Object)token0));
  }

  @Test(timeout = 4000)
  public void test204()  throws Throwable  {
      PipedInputStream pipedInputStream0 = new PipedInputStream(57);
      assertEquals(0, pipedInputStream0.available());
      assertNotNull(pipedInputStream0);
      
      StringReader stringReader0 = new StringReader("-");
      assertNotNull(stringReader0);
      
      StringReader stringReader1 = new StringReader("-");
      assertNotNull(stringReader1);
      assertFalse(stringReader1.equals((Object)stringReader0));
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, 88, 2288, 86);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertNotNull(javaCharStream0);
      assertFalse(stringReader0.equals((Object)stringReader1));
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertNotNull(javaParserTokenManager0);
      assertFalse(stringReader0.equals((Object)stringReader1));
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.bufpos);
      assertEquals(88, token0.endLine);
      assertEquals(2288, token0.beginColumn);
      assertEquals(2288, token0.endColumn);
      assertEquals(102, token0.kind);
      assertEquals(88, token0.beginLine);
      assertEquals(2288, javaCharStream0.getEndColumn());
      assertEquals(88, javaCharStream0.getEndLine());
      assertEquals(2288, javaCharStream0.getColumn());
      assertEquals(2288, javaCharStream0.getBeginColumn());
      assertEquals(88, javaCharStream0.getBeginLine());
      assertEquals(88, javaCharStream0.getLine());
      assertEquals("-", token0.toString());
      assertNotSame(stringReader0, stringReader1);
      assertNotNull(token0);
      assertFalse(stringReader0.equals((Object)stringReader1));
      
      Token token1 = Token.newToken(2288);
      assertEquals(0, token1.endLine);
      assertEquals(0, token1.endColumn);
      assertEquals(0, token1.beginColumn);
      assertEquals(0, token1.beginLine);
      assertEquals(0, token1.kind);
      assertNull(token1.toString());
      assertNotSame(token1, token0);
      assertNotNull(token1);
      assertFalse(token1.equals((Object)token0));
      
      Token token2 = javaParserTokenManager0.getNextToken();
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.bufpos);
      assertEquals(2288, token2.beginColumn);
      assertEquals(2288, token2.endColumn);
      assertEquals(0, token2.kind);
      assertEquals(88, token2.endLine);
      assertEquals(88, token2.beginLine);
      assertEquals(2288, javaCharStream0.getEndColumn());
      assertEquals(88, javaCharStream0.getEndLine());
      assertEquals(2288, javaCharStream0.getColumn());
      assertEquals(2288, javaCharStream0.getBeginColumn());
      assertEquals(88, javaCharStream0.getBeginLine());
      assertEquals(88, javaCharStream0.getLine());
      assertEquals("", token2.toString());
      assertNotSame(stringReader0, stringReader1);
      assertNotSame(token2, token1);
      assertNotSame(token2, token0);
      assertNotNull(token2);
      assertFalse(stringReader0.equals((Object)stringReader1));
      assertFalse(token2.equals((Object)token1));
      assertFalse(token2.equals((Object)token0));
      
      javaParserTokenManager0.TokenLexicalActions(token2);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.bufpos);
      assertEquals(2288, token2.beginColumn);
      assertEquals(2288, token2.endColumn);
      assertEquals(0, token2.kind);
      assertEquals(88, token2.endLine);
      assertEquals(88, token2.beginLine);
      assertEquals(2288, javaCharStream0.getEndColumn());
      assertEquals(88, javaCharStream0.getEndLine());
      assertEquals(2288, javaCharStream0.getColumn());
      assertEquals(2288, javaCharStream0.getBeginColumn());
      assertEquals(88, javaCharStream0.getBeginLine());
      assertEquals(88, javaCharStream0.getLine());
      assertEquals("", token2.toString());
      assertNotSame(stringReader0, stringReader1);
      assertNotSame(token2, token1);
      assertNotSame(token2, token0);
      assertFalse(stringReader0.equals((Object)stringReader1));
      assertFalse(token2.equals((Object)token1));
      assertFalse(token2.equals((Object)token0));
  }

  @Test(timeout = 4000)
  public void test205()  throws Throwable  {
      Enumeration<InputStream> enumeration0 = (Enumeration<InputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(enumeration0).hasMoreElements();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      assertNotNull(sequenceInputStream0);
      
      StringReader stringReader0 = new StringReader("s+<V?i:'(X*uHj@FF");
      assertNotNull(stringReader0);
      
      StringReader stringReader1 = new StringReader("=Qv&nCW`Vsfo[m");
      assertNotNull(stringReader1);
      assertFalse(stringReader1.equals((Object)stringReader0));
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, 35, 57);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertNotNull(javaCharStream0);
      assertFalse(stringReader0.equals((Object)stringReader1));
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertNotNull(javaParserTokenManager0);
      assertFalse(stringReader0.equals((Object)stringReader1));
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertEquals(0, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(74, token0.kind);
      assertEquals(57, token0.beginColumn);
      assertEquals(35, token0.endLine);
      assertEquals(35, token0.beginLine);
      assertEquals(57, token0.endColumn);
      assertEquals(57, javaCharStream0.getColumn());
      assertEquals(57, javaCharStream0.getEndColumn());
      assertEquals(35, javaCharStream0.getBeginLine());
      assertEquals(57, javaCharStream0.getBeginColumn());
      assertEquals(35, javaCharStream0.getLine());
      assertEquals(35, javaCharStream0.getEndLine());
      assertEquals("s", token0.toString());
      assertNotSame(stringReader0, stringReader1);
      assertNotNull(token0);
      assertFalse(stringReader0.equals((Object)stringReader1));
  }

  @Test(timeout = 4000)
  public void test206()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)40;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      assertArrayEquals(new byte[] {(byte)40}, byteArray0);
      assertEquals(1, byteArrayInputStream0.available());
      assertNotNull(byteArrayInputStream0);
      assertEquals(1, byteArray0.length);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(byteArrayInputStream0, (byte)40, (byte)40, (byte)40);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertArrayEquals(new byte[] {(byte)40}, byteArray0);
      assertEquals(1, byteArrayInputStream0.available());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertNotNull(javaCharStream0);
      assertEquals(1, byteArray0.length);
      
      JavaParserTokenManager javaParserTokenManager0 = null;
      try {
        javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0, (byte)40);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Error: Ignoring invalid lexical state : 40. State unchanged.
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test207()  throws Throwable  {
      Enumeration<PipedInputStream> enumeration0 = (Enumeration<PipedInputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(enumeration0).hasMoreElements();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      assertNotNull(sequenceInputStream0);
      
      StringReader stringReader0 = new StringReader("\"");
      assertNotNull(stringReader0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, 2221, 48);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertNotNull(javaCharStream0);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertNotNull(javaParserTokenManager0);
      
      // Undeclared exception!
      try { 
        javaParserTokenManager0.getNextToken();
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Lexical error at line 2221, column 49.  Encountered: <EOF> after : \"\"
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test208()  throws Throwable  {
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      assertFalse(fileDescriptor0.valid());
      assertNotNull(fileDescriptor0);
      
      StringReader stringReader0 = new StringReader("\"\n\"");
      assertNotNull(stringReader0);
      
      StringReader stringReader1 = new StringReader("\"\n\"");
      assertNotNull(stringReader1);
      assertFalse(stringReader1.equals((Object)stringReader0));
      
      StringReader stringReader2 = new StringReader("-=");
      assertNotNull(stringReader2);
      assertFalse(stringReader2.equals((Object)stringReader1));
      assertFalse(stringReader2.equals((Object)stringReader0));
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader1, 40, 40);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertNotNull(javaCharStream0);
      assertFalse(stringReader1.equals((Object)stringReader2));
      assertFalse(stringReader1.equals((Object)stringReader0));
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertNotNull(javaParserTokenManager0);
      assertFalse(stringReader1.equals((Object)stringReader2));
      assertFalse(stringReader1.equals((Object)stringReader0));
      
      // Undeclared exception!
      try { 
        javaParserTokenManager0.getNextToken();
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Lexical error at line 40, column 41.  Encountered: \"\\n\" (10), after : \"\\\"\"
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test209()  throws Throwable  {
      PipedInputStream pipedInputStream0 = new PipedInputStream(57);
      assertEquals(0, pipedInputStream0.available());
      assertNotNull(pipedInputStream0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(pipedInputStream0, (-45), (-45));
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, pipedInputStream0.available());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertNotNull(javaCharStream0);
      
      StringReader stringReader0 = new StringReader("Kf:q%yiN+,9<]Du");
      assertNotNull(stringReader0);
      
      StringReader stringReader1 = new StringReader("");
      assertNotNull(stringReader1);
      assertFalse(stringReader1.equals((Object)stringReader0));
      
      int int0 = stringReader0.read();
      assertEquals(75, int0);
      assertNotSame(stringReader0, stringReader1);
      assertFalse(stringReader0.equals((Object)stringReader1));
      
      JavaCharStream javaCharStream1 = new JavaCharStream(stringReader0, 179, 179);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream1.bufpos);
      assertEquals(0, javaCharStream1.getBeginColumn());
      assertEquals(0, javaCharStream1.getBeginLine());
      assertNotNull(javaCharStream1);
      assertFalse(stringReader0.equals((Object)stringReader1));
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream1);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream1.bufpos);
      assertEquals(0, javaCharStream1.getBeginColumn());
      assertEquals(0, javaCharStream1.getBeginLine());
      assertNotNull(javaParserTokenManager0);
      assertFalse(stringReader0.equals((Object)stringReader1));
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream1.bufpos);
      assertEquals(179, token0.endLine);
      assertEquals(179, token0.beginColumn);
      assertEquals(179, token0.beginLine);
      assertEquals(74, token0.kind);
      assertEquals(179, token0.endColumn);
      assertEquals(179, javaCharStream1.getBeginColumn());
      assertEquals(179, javaCharStream1.getBeginLine());
      assertEquals(179, javaCharStream1.getEndColumn());
      assertEquals(179, javaCharStream1.getEndLine());
      assertEquals(179, javaCharStream1.getLine());
      assertEquals(179, javaCharStream1.getColumn());
      assertEquals("f", token0.toString());
      assertNotSame(stringReader0, stringReader1);
      assertNotSame(javaCharStream1, javaCharStream0);
      assertNotNull(token0);
      assertFalse(stringReader0.equals((Object)stringReader1));
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
  }

  @Test(timeout = 4000)
  public void test210()  throws Throwable  {
      StringReader stringReader0 = new StringReader("w%DN*pejbGS{#17g'Z");
      assertNotNull(stringReader0);
      
      int int0 = JavaParserConstants.LSHIFT;
      assertEquals(109, int0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, 109, 109);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertNotNull(javaCharStream0);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertNotNull(javaParserTokenManager0);
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertEquals(0, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(109, token0.endColumn);
      assertEquals(109, token0.beginLine);
      assertEquals(74, token0.kind);
      assertEquals(109, token0.beginColumn);
      assertEquals(109, token0.endLine);
      assertEquals(109, javaCharStream0.getEndColumn());
      assertEquals(109, javaCharStream0.getLine());
      assertEquals(109, javaCharStream0.getColumn());
      assertEquals(109, javaCharStream0.getEndLine());
      assertEquals(109, javaCharStream0.getBeginLine());
      assertEquals(109, javaCharStream0.getBeginColumn());
      assertEquals("w", token0.toString());
      assertNotNull(token0);
      
      JavaCharStream javaCharStream1 = new JavaCharStream(stringReader0);
      assertEquals((-1), javaCharStream1.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream1.getBeginColumn());
      assertEquals(0, javaCharStream1.getBeginLine());
      assertNotNull(javaCharStream1);
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      
      JavaParserTokenManager javaParserTokenManager1 = new JavaParserTokenManager(javaCharStream1);
      assertEquals((-1), javaCharStream1.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream1.getBeginColumn());
      assertEquals(0, javaCharStream1.getBeginLine());
      assertNotNull(javaParserTokenManager1);
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      assertFalse(javaParserTokenManager1.equals((Object)javaParserTokenManager0));
      
      Token token1 = javaParserTokenManager0.getNextToken();
      assertEquals(1, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(109, token1.endLine);
      assertEquals(110, token1.endColumn);
      assertEquals(110, token1.beginColumn);
      assertEquals(108, token1.kind);
      assertEquals(109, token1.beginLine);
      assertEquals(110, javaCharStream0.getColumn());
      assertEquals(110, javaCharStream0.getEndColumn());
      assertEquals(109, javaCharStream0.getLine());
      assertEquals(109, javaCharStream0.getEndLine());
      assertEquals(109, javaCharStream0.getBeginLine());
      assertEquals(110, javaCharStream0.getBeginColumn());
      assertEquals("%", token1.toString());
      assertNotSame(javaCharStream0, javaCharStream1);
      assertNotSame(javaParserTokenManager0, javaParserTokenManager1);
      assertNotSame(token1, token0);
      assertNotNull(token1);
      assertFalse(javaCharStream0.equals((Object)javaCharStream1));
      assertFalse(javaParserTokenManager0.equals((Object)javaParserTokenManager1));
      assertFalse(token1.equals((Object)token0));
      
      Token token2 = javaParserTokenManager0.getNextToken();
      assertEquals(3, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(109, token2.beginLine);
      assertEquals(109, token2.endLine);
      assertEquals(111, token2.beginColumn);
      assertEquals(112, token2.endColumn);
      assertEquals(74, token2.kind);
      assertEquals(109, javaCharStream0.getLine());
      assertEquals(112, javaCharStream0.getEndColumn());
      assertEquals(112, javaCharStream0.getColumn());
      assertEquals(109, javaCharStream0.getEndLine());
      assertEquals(109, javaCharStream0.getBeginLine());
      assertEquals(111, javaCharStream0.getBeginColumn());
      assertEquals("DN", token2.toString());
      assertNotSame(javaCharStream0, javaCharStream1);
      assertNotSame(javaParserTokenManager0, javaParserTokenManager1);
      assertNotSame(token2, token1);
      assertNotSame(token2, token0);
      assertNotNull(token2);
      assertFalse(javaCharStream0.equals((Object)javaCharStream1));
      assertFalse(javaParserTokenManager0.equals((Object)javaParserTokenManager1));
      assertFalse(token2.equals((Object)token1));
      assertFalse(token2.equals((Object)token0));
  }

  @Test(timeout = 4000)
  public void test211()  throws Throwable  {
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      assertFalse(fileDescriptor0.valid());
      assertNotNull(fileDescriptor0);
      
      PipedInputStream pipedInputStream0 = new PipedInputStream(26);
      assertEquals(0, pipedInputStream0.available());
      assertNotNull(pipedInputStream0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(pipedInputStream0, 26, (-45));
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertEquals(0, pipedInputStream0.available());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertNotNull(javaCharStream0);
      
      StringReader stringReader0 = new StringReader("l%8.G>q^");
      assertNotNull(stringReader0);
      
      int int0 = stringReader0.read();
      assertEquals(108, int0);
      
      JavaCharStream javaCharStream1 = new JavaCharStream(stringReader0, (-1), 2878);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream1.bufpos);
      assertEquals(0, javaCharStream1.getBeginLine());
      assertEquals(0, javaCharStream1.getBeginColumn());
      assertNotNull(javaCharStream1);
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream1);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream1.bufpos);
      assertEquals(0, javaCharStream1.getBeginLine());
      assertEquals(0, javaCharStream1.getBeginColumn());
      assertNotNull(javaParserTokenManager0);
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      
      JavaParserTokenManager javaParserTokenManager1 = new JavaParserTokenManager(javaCharStream1);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream1.bufpos);
      assertEquals(0, javaCharStream1.getBeginLine());
      assertEquals(0, javaCharStream1.getBeginColumn());
      assertNotNull(javaParserTokenManager1);
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      assertFalse(javaParserTokenManager1.equals((Object)javaParserTokenManager0));
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream1.bufpos);
      assertEquals(108, token0.kind);
      assertEquals(2878, token0.beginColumn);
      assertEquals((-1), token0.beginLine);
      assertEquals((-1), token0.endLine);
      assertEquals(2878, token0.endColumn);
      assertEquals((-1), javaCharStream1.getEndLine());
      assertEquals((-1), javaCharStream1.getBeginLine());
      assertEquals(2878, javaCharStream1.getColumn());
      assertEquals(2878, javaCharStream1.getBeginColumn());
      assertEquals((-1), javaCharStream1.getLine());
      assertEquals(2878, javaCharStream1.getEndColumn());
      assertEquals("%", token0.toString());
      assertNotSame(javaCharStream1, javaCharStream0);
      assertNotSame(javaParserTokenManager0, javaParserTokenManager1);
      assertNotNull(token0);
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      assertFalse(javaParserTokenManager0.equals((Object)javaParserTokenManager1));
      
      javaParserTokenManager0.SkipLexicalActions(token0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream1.bufpos);
      assertEquals(108, token0.kind);
      assertEquals(2878, token0.beginColumn);
      assertEquals((-1), token0.beginLine);
      assertEquals((-1), token0.endLine);
      assertEquals(2878, token0.endColumn);
      assertEquals((-1), javaCharStream1.getEndLine());
      assertEquals((-1), javaCharStream1.getBeginLine());
      assertEquals(2878, javaCharStream1.getColumn());
      assertEquals(2878, javaCharStream1.getBeginColumn());
      assertEquals((-1), javaCharStream1.getLine());
      assertEquals(2878, javaCharStream1.getEndColumn());
      assertEquals("%", token0.toString());
      assertNotSame(javaCharStream1, javaCharStream0);
      assertNotSame(javaParserTokenManager0, javaParserTokenManager1);
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      assertFalse(javaParserTokenManager0.equals((Object)javaParserTokenManager1));
  }

  @Test(timeout = 4000)
  public void test212()  throws Throwable  {
      StringReader stringReader0 = new StringReader("");
      assertNotNull(stringReader0);
      
      boolean boolean0 = stringReader0.ready();
      assertTrue(boolean0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, 0, 0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertNotNull(javaCharStream0);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertNotNull(javaParserTokenManager0);
      
      javaParserTokenManager0.ReInit(javaCharStream0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      
      javaParserTokenManager0.MoreLexicalActions();
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.bufpos);
      assertEquals((-1), token0.endColumn);
      assertEquals(0, token0.beginLine);
      assertEquals((-1), token0.beginColumn);
      assertEquals(0, token0.endLine);
      assertEquals(0, token0.kind);
      assertEquals((-1), javaCharStream0.getColumn());
      assertEquals((-1), javaCharStream0.getEndColumn());
      assertEquals(0, javaCharStream0.getLine());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getEndLine());
      assertEquals((-1), javaCharStream0.getBeginColumn());
      assertEquals("", token0.toString());
      assertNotNull(token0);
      
      javaParserTokenManager0.TokenLexicalActions(token0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.bufpos);
      assertEquals((-1), token0.endColumn);
      assertEquals(0, token0.beginLine);
      assertEquals((-1), token0.beginColumn);
      assertEquals(0, token0.endLine);
      assertEquals(0, token0.kind);
      assertEquals((-1), javaCharStream0.getColumn());
      assertEquals((-1), javaCharStream0.getEndColumn());
      assertEquals(0, javaCharStream0.getLine());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getEndLine());
      assertEquals((-1), javaCharStream0.getBeginColumn());
      assertEquals("", token0.toString());
      
      MockPrintStream mockPrintStream0 = new MockPrintStream("<EXPONENT>");
      assertNotNull(mockPrintStream0);
      
      Locale locale0 = Locale.TAIWAN;
      assertEquals("zh_TW", locale0.toString());
      assertEquals("TWN", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("TW", locale0.getCountry());
      assertEquals("zho", locale0.getISO3Language());
      assertNotNull(locale0);
      
      String[] stringArray0 = Locale.getISOLanguages();
      assertNotNull(stringArray0);
      assertEquals(188, stringArray0.length);
      
      boolean boolean1 = locale0.hasExtensions();
      assertEquals("zh_TW", locale0.toString());
      assertEquals("TWN", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("TW", locale0.getCountry());
      assertEquals("zho", locale0.getISO3Language());
      assertFalse(boolean1);
      assertFalse(boolean1 == boolean0);
      
      // Undeclared exception!
      try { 
        javaParserTokenManager0.SwitchTo(1415);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Error: Ignoring invalid lexical state : 1415. State unchanged.
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test213()  throws Throwable  {
      StringReader stringReader0 = new StringReader("[");
      assertNotNull(stringReader0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, 1, 1340, 1340);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertNotNull(javaCharStream0);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0, 1);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertNotNull(javaParserTokenManager0);
      
      int int0 = Integer.MIN_VALUE;
      javaCharStream0.maxNextCharInd = Integer.MIN_VALUE;
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      
      // Undeclared exception!
      try { 
        javaParserTokenManager0.jjFillToken();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test214()  throws Throwable  {
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      assertFalse(fileDescriptor0.valid());
      assertNotNull(fileDescriptor0);
      
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(fileDescriptor0);
      assertNotNull(mockFileInputStream0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(mockFileInputStream0, (-250), (-250), (-250));
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertFalse(fileDescriptor0.valid());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertNotNull(javaCharStream0);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertFalse(fileDescriptor0.valid());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertNotNull(javaParserTokenManager0);
      
      Token token0 = new Token();
      assertEquals(0, token0.endLine);
      assertEquals(0, token0.endColumn);
      assertEquals(0, token0.beginColumn);
      assertEquals(0, token0.beginLine);
      assertEquals(0, token0.kind);
      assertNull(token0.toString());
      assertNotNull(token0);
      
      javaParserTokenManager0.SkipLexicalActions(token0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, token0.endLine);
      assertEquals(0, token0.endColumn);
      assertEquals(0, token0.beginColumn);
      assertEquals(0, token0.beginLine);
      assertEquals(0, token0.kind);
      assertFalse(fileDescriptor0.valid());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertNull(token0.toString());
  }

  @Test(timeout = 4000)
  public void test215()  throws Throwable  {
      StringReader stringReader0 = new StringReader("FoFqL*&l!43Zy");
      assertNotNull(stringReader0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, (-105), (-105));
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertNotNull(javaCharStream0);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertNotNull(javaParserTokenManager0);
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertEquals(4, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-101), token0.endColumn);
      assertEquals((-105), token0.beginColumn);
      assertEquals(74, token0.kind);
      assertEquals((-105), token0.beginLine);
      assertEquals((-105), token0.endLine);
      assertEquals((-101), javaCharStream0.getEndColumn());
      assertEquals((-101), javaCharStream0.getColumn());
      assertEquals((-105), javaCharStream0.getEndLine());
      assertEquals((-105), javaCharStream0.getLine());
      assertEquals((-105), javaCharStream0.getBeginColumn());
      assertEquals((-105), javaCharStream0.getBeginLine());
      assertEquals("FoFqL", token0.toString());
      assertNotNull(token0);
      
      JavaParserTokenManager javaParserTokenManager1 = new JavaParserTokenManager(javaCharStream0);
      assertEquals(4, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-101), javaCharStream0.getEndColumn());
      assertEquals((-101), javaCharStream0.getColumn());
      assertEquals((-105), javaCharStream0.getEndLine());
      assertEquals((-105), javaCharStream0.getLine());
      assertEquals((-105), javaCharStream0.getBeginColumn());
      assertEquals((-105), javaCharStream0.getBeginLine());
      assertNotNull(javaParserTokenManager1);
      assertFalse(javaParserTokenManager1.equals((Object)javaParserTokenManager0));
      
      Token token1 = javaParserTokenManager1.getNextToken();
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(5, javaCharStream0.bufpos);
      assertEquals((-100), token1.endColumn);
      assertEquals((-100), token1.beginColumn);
      assertEquals((-105), token1.endLine);
      assertEquals((-105), token1.beginLine);
      assertEquals(103, token1.kind);
      assertEquals((-100), javaCharStream0.getColumn());
      assertEquals((-100), javaCharStream0.getBeginColumn());
      assertEquals((-105), javaCharStream0.getEndLine());
      assertEquals((-105), javaCharStream0.getLine());
      assertEquals((-100), javaCharStream0.getEndColumn());
      assertEquals((-105), javaCharStream0.getBeginLine());
      assertEquals("*", token1.toString());
      assertNotSame(javaParserTokenManager1, javaParserTokenManager0);
      assertNotSame(token1, token0);
      assertNotNull(token1);
      assertFalse(javaParserTokenManager1.equals((Object)javaParserTokenManager0));
      assertFalse(token1.equals((Object)token0));
  }

  @Test(timeout = 4000)
  public void test216()  throws Throwable  {
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      assertFalse(fileDescriptor0.valid());
      assertNotNull(fileDescriptor0);
      
      StringReader stringReader0 = new StringReader("aUYO[&skX?G2og");
      assertNotNull(stringReader0);
      
      int int0 = stringReader0.read();
      assertEquals(97, int0);
      
      StringReader stringReader1 = new StringReader("aUYO[&skX?G2og");
      assertNotNull(stringReader1);
      assertFalse(stringReader1.equals((Object)stringReader0));
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, 97, 97);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertNotNull(javaCharStream0);
      assertFalse(stringReader0.equals((Object)stringReader1));
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertNotNull(javaParserTokenManager0);
      assertFalse(stringReader0.equals((Object)stringReader1));
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertEquals(2, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(74, token0.kind);
      assertEquals(99, token0.endColumn);
      assertEquals(97, token0.beginLine);
      assertEquals(97, token0.endLine);
      assertEquals(97, token0.beginColumn);
      assertEquals(97, javaCharStream0.getBeginLine());
      assertEquals(99, javaCharStream0.getEndColumn());
      assertEquals(97, javaCharStream0.getBeginColumn());
      assertEquals(97, javaCharStream0.getLine());
      assertEquals(97, javaCharStream0.getEndLine());
      assertEquals(99, javaCharStream0.getColumn());
      assertEquals("UYO", token0.toString());
      assertNotSame(stringReader0, stringReader1);
      assertNotNull(token0);
      assertFalse(stringReader0.equals((Object)stringReader1));
      
      // Undeclared exception!
      try { 
        javaParserTokenManager0.SwitchTo(97);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Error: Ignoring invalid lexical state : 97. State unchanged.
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test217()  throws Throwable  {
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      assertFalse(fileDescriptor0.valid());
      assertNotNull(fileDescriptor0);
      
      StringReader stringReader0 = new StringReader("");
      assertNotNull(stringReader0);
      
      StringReader stringReader1 = new StringReader("\f");
      assertNotNull(stringReader1);
      assertFalse(stringReader1.equals((Object)stringReader0));
      
      StringReader stringReader2 = new StringReader("thows");
      assertNotNull(stringReader2);
      assertFalse(stringReader2.equals((Object)stringReader1));
      assertFalse(stringReader2.equals((Object)stringReader0));
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader2, 638, 43);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertNotNull(javaCharStream0);
      assertFalse(stringReader2.equals((Object)stringReader1));
      assertFalse(stringReader2.equals((Object)stringReader0));
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertNotNull(javaParserTokenManager0);
      assertFalse(stringReader2.equals((Object)stringReader1));
      assertFalse(stringReader2.equals((Object)stringReader0));
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertEquals(4, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(74, token0.kind);
      assertEquals(638, token0.endLine);
      assertEquals(47, token0.endColumn);
      assertEquals(638, token0.beginLine);
      assertEquals(43, token0.beginColumn);
      assertEquals(43, javaCharStream0.getBeginColumn());
      assertEquals(47, javaCharStream0.getColumn());
      assertEquals(638, javaCharStream0.getEndLine());
      assertEquals(638, javaCharStream0.getBeginLine());
      assertEquals(47, javaCharStream0.getEndColumn());
      assertEquals(638, javaCharStream0.getLine());
      assertEquals("thows", token0.toString());
      assertNotSame(stringReader2, stringReader1);
      assertNotSame(stringReader2, stringReader0);
      assertNotNull(token0);
      assertFalse(stringReader2.equals((Object)stringReader1));
      assertFalse(stringReader2.equals((Object)stringReader0));
      
      Token token1 = javaParserTokenManager0.getNextToken();
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.bufpos);
      assertEquals(638, token1.beginLine);
      assertEquals(0, token1.kind);
      assertEquals(47, token1.beginColumn);
      assertEquals(47, token1.endColumn);
      assertEquals(638, token1.endLine);
      assertEquals(47, javaCharStream0.getColumn());
      assertEquals(638, javaCharStream0.getEndLine());
      assertEquals(638, javaCharStream0.getBeginLine());
      assertEquals(47, javaCharStream0.getEndColumn());
      assertEquals(638, javaCharStream0.getLine());
      assertEquals(47, javaCharStream0.getBeginColumn());
      assertEquals("", token1.toString());
      assertNotSame(stringReader2, stringReader1);
      assertNotSame(stringReader2, stringReader0);
      assertNotSame(token1, token0);
      assertNotNull(token1);
      assertFalse(stringReader2.equals((Object)stringReader1));
      assertFalse(stringReader2.equals((Object)stringReader0));
      assertFalse(token1.equals((Object)token0));
      
      Token token2 = javaParserTokenManager0.getNextToken();
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.bufpos);
      assertEquals(47, token2.beginColumn);
      assertEquals(47, token2.endColumn);
      assertEquals(638, token2.endLine);
      assertEquals(0, token2.kind);
      assertEquals(638, token2.beginLine);
      assertEquals(47, javaCharStream0.getColumn());
      assertEquals(638, javaCharStream0.getEndLine());
      assertEquals(638, javaCharStream0.getBeginLine());
      assertEquals(47, javaCharStream0.getEndColumn());
      assertEquals(638, javaCharStream0.getLine());
      assertEquals(47, javaCharStream0.getBeginColumn());
      assertEquals("", token2.toString());
      assertNotSame(stringReader2, stringReader1);
      assertNotSame(stringReader2, stringReader0);
      assertNotSame(token2, token0);
      assertNotSame(token2, token1);
      assertNotNull(token2);
      assertFalse(stringReader2.equals((Object)stringReader1));
      assertFalse(stringReader2.equals((Object)stringReader0));
      assertFalse(token2.equals((Object)token0));
      assertFalse(token2.equals((Object)token1));
      
      Token token3 = javaParserTokenManager0.jjFillToken();
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.bufpos);
      assertEquals(0, token3.kind);
      assertEquals(638, token3.beginLine);
      assertEquals(47, token3.endColumn);
      assertEquals(638, token3.endLine);
      assertEquals(47, token3.beginColumn);
      assertEquals(47, javaCharStream0.getColumn());
      assertEquals(638, javaCharStream0.getEndLine());
      assertEquals(638, javaCharStream0.getBeginLine());
      assertEquals(47, javaCharStream0.getEndColumn());
      assertEquals(638, javaCharStream0.getLine());
      assertEquals(47, javaCharStream0.getBeginColumn());
      assertEquals("", token3.toString());
      assertNotSame(stringReader2, stringReader1);
      assertNotSame(stringReader2, stringReader0);
      assertNotSame(token3, token2);
      assertNotSame(token3, token0);
      assertNotSame(token3, token1);
      assertNotNull(token3);
      assertFalse(stringReader2.equals((Object)stringReader1));
      assertFalse(stringReader2.equals((Object)stringReader0));
      assertFalse(token3.equals((Object)token2));
      assertFalse(token3.equals((Object)token0));
      assertFalse(token3.equals((Object)token1));
      
      Token token4 = javaParserTokenManager0.jjFillToken();
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.bufpos);
      assertEquals(47, token4.endColumn);
      assertEquals(638, token4.endLine);
      assertEquals(0, token4.kind);
      assertEquals(638, token4.beginLine);
      assertEquals(47, token4.beginColumn);
      assertEquals(47, javaCharStream0.getColumn());
      assertEquals(638, javaCharStream0.getEndLine());
      assertEquals(638, javaCharStream0.getBeginLine());
      assertEquals(47, javaCharStream0.getEndColumn());
      assertEquals(638, javaCharStream0.getLine());
      assertEquals(47, javaCharStream0.getBeginColumn());
      assertEquals("", token4.toString());
      assertNotSame(stringReader2, stringReader1);
      assertNotSame(stringReader2, stringReader0);
      assertNotSame(token4, token1);
      assertNotSame(token4, token0);
      assertNotSame(token4, token2);
      assertNotSame(token4, token3);
      assertNotNull(token4);
      assertFalse(stringReader2.equals((Object)stringReader1));
      assertFalse(stringReader2.equals((Object)stringReader0));
      assertFalse(token4.equals((Object)token1));
      assertFalse(token4.equals((Object)token0));
      assertFalse(token4.equals((Object)token2));
      assertFalse(token4.equals((Object)token3));
      
      javaParserTokenManager0.SkipLexicalActions(token2);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.bufpos);
      assertEquals(47, token2.beginColumn);
      assertEquals(47, token2.endColumn);
      assertEquals(638, token2.endLine);
      assertEquals(0, token2.kind);
      assertEquals(638, token2.beginLine);
      assertEquals(47, javaCharStream0.getColumn());
      assertEquals(638, javaCharStream0.getEndLine());
      assertEquals(638, javaCharStream0.getBeginLine());
      assertEquals(47, javaCharStream0.getEndColumn());
      assertEquals(638, javaCharStream0.getLine());
      assertEquals(47, javaCharStream0.getBeginColumn());
      assertEquals("", token2.toString());
      assertNotSame(stringReader2, stringReader1);
      assertNotSame(stringReader2, stringReader0);
      assertNotSame(token2, token4);
      assertNotSame(token2, token3);
      assertNotSame(token2, token0);
      assertNotSame(token2, token1);
      assertFalse(stringReader2.equals((Object)stringReader1));
      assertFalse(stringReader2.equals((Object)stringReader0));
      assertFalse(token2.equals((Object)token4));
      assertFalse(token2.equals((Object)token3));
      assertFalse(token2.equals((Object)token0));
      assertFalse(token2.equals((Object)token1));
  }

  @Test(timeout = 4000)
  public void test218()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "+=");
      assertFalse(boolean0);
      
      StringReader stringReader0 = new StringReader("f%3T%gku6");
      assertNotNull(stringReader0);
      
      StringReader stringReader1 = new StringReader("+=");
      assertNotNull(stringReader1);
      assertFalse(stringReader1.equals((Object)stringReader0));
      
      int int0 = stringReader0.read();
      assertEquals(102, int0);
      assertNotSame(stringReader0, stringReader1);
      assertFalse(stringReader0.equals((Object)stringReader1));
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader1, 102, 102);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertNotNull(javaCharStream0);
      assertFalse(stringReader1.equals((Object)stringReader0));
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertNotNull(javaParserTokenManager0);
      assertFalse(stringReader1.equals((Object)stringReader0));
      
      javaParserTokenManager0.curLexState = 80;
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.bufpos);
      assertEquals(102, token0.beginColumn);
      assertEquals(102, token0.beginLine);
      assertEquals(102, token0.endLine);
      assertEquals(102, token0.endColumn);
      assertEquals(0, token0.kind);
      assertEquals(102, javaCharStream0.getEndColumn());
      assertEquals(102, javaCharStream0.getEndLine());
      assertEquals(102, javaCharStream0.getLine());
      assertEquals(102, javaCharStream0.getColumn());
      assertEquals(102, javaCharStream0.getBeginLine());
      assertEquals(102, javaCharStream0.getBeginColumn());
      assertEquals("", token0.toString());
      assertNotSame(stringReader1, stringReader0);
      assertNotNull(token0);
      assertFalse(stringReader1.equals((Object)stringReader0));
      
      JavaParserTokenManager javaParserTokenManager1 = new JavaParserTokenManager(javaCharStream0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.bufpos);
      assertEquals(102, javaCharStream0.getEndColumn());
      assertEquals(102, javaCharStream0.getEndLine());
      assertEquals(102, javaCharStream0.getLine());
      assertEquals(102, javaCharStream0.getColumn());
      assertEquals(102, javaCharStream0.getBeginLine());
      assertEquals(102, javaCharStream0.getBeginColumn());
      assertNotNull(javaParserTokenManager1);
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertFalse(javaParserTokenManager1.equals((Object)javaParserTokenManager0));
      
      Token token1 = javaParserTokenManager1.getNextToken();
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.bufpos);
      assertEquals(103, token1.beginColumn);
      assertEquals(103, token1.endColumn);
      assertEquals(102, token1.endLine);
      assertEquals(87, token1.kind);
      assertEquals(102, token1.beginLine);
      assertEquals(103, javaCharStream0.getColumn());
      assertEquals(102, javaCharStream0.getEndLine());
      assertEquals(103, javaCharStream0.getEndColumn());
      assertEquals(102, javaCharStream0.getLine());
      assertEquals(102, javaCharStream0.getBeginLine());
      assertEquals(103, javaCharStream0.getBeginColumn());
      assertEquals("=", token1.toString());
      assertNotSame(stringReader1, stringReader0);
      assertNotSame(javaParserTokenManager1, javaParserTokenManager0);
      assertNotSame(token1, token0);
      assertNotNull(token1);
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertFalse(javaParserTokenManager1.equals((Object)javaParserTokenManager0));
      assertFalse(token1.equals((Object)token0));
  }

  @Test(timeout = 4000)
  public void test219()  throws Throwable  {
      StringReader stringReader0 = new StringReader("nvull");
      assertNotNull(stringReader0);
      
      boolean boolean0 = FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      assertFalse(boolean0);
      
      StringReader stringReader1 = new StringReader("Cc^+j&o*W");
      assertNotNull(stringReader1);
      assertFalse(stringReader1.equals((Object)stringReader0));
      
      StringReader stringReader2 = new StringReader("Cc^+j&o*W");
      assertNotNull(stringReader2);
      assertFalse(stringReader2.equals((Object)stringReader0));
      assertFalse(stringReader2.equals((Object)stringReader1));
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader2, 122, 948);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertNotNull(javaCharStream0);
      assertFalse(stringReader2.equals((Object)stringReader0));
      assertFalse(stringReader2.equals((Object)stringReader1));
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertNotNull(javaParserTokenManager0);
      assertFalse(stringReader2.equals((Object)stringReader0));
      assertFalse(stringReader2.equals((Object)stringReader1));
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(1, javaCharStream0.bufpos);
      assertEquals(122, token0.beginLine);
      assertEquals(74, token0.kind);
      assertEquals(949, token0.endColumn);
      assertEquals(122, token0.endLine);
      assertEquals(948, token0.beginColumn);
      assertEquals(122, javaCharStream0.getEndLine());
      assertEquals(949, javaCharStream0.getEndColumn());
      assertEquals(949, javaCharStream0.getColumn());
      assertEquals(948, javaCharStream0.getBeginColumn());
      assertEquals(122, javaCharStream0.getLine());
      assertEquals(122, javaCharStream0.getBeginLine());
      assertEquals("Cc", token0.toString());
      assertNotSame(stringReader2, stringReader0);
      assertNotSame(stringReader2, stringReader1);
      assertNotNull(token0);
      assertFalse(stringReader2.equals((Object)stringReader0));
      assertFalse(stringReader2.equals((Object)stringReader1));
      
      Token token1 = javaParserTokenManager0.getNextToken();
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(2, javaCharStream0.bufpos);
      assertEquals(122, token1.endLine);
      assertEquals(950, token1.beginColumn);
      assertEquals(107, token1.kind);
      assertEquals(122, token1.beginLine);
      assertEquals(950, token1.endColumn);
      assertEquals(122, javaCharStream0.getEndLine());
      assertEquals(950, javaCharStream0.getColumn());
      assertEquals(950, javaCharStream0.getEndColumn());
      assertEquals(950, javaCharStream0.getBeginColumn());
      assertEquals(122, javaCharStream0.getLine());
      assertEquals(122, javaCharStream0.getBeginLine());
      assertEquals("^", token1.toString());
      assertNotSame(stringReader2, stringReader0);
      assertNotSame(stringReader2, stringReader1);
      assertNotSame(token1, token0);
      assertNotNull(token1);
      assertFalse(stringReader2.equals((Object)stringReader0));
      assertFalse(stringReader2.equals((Object)stringReader1));
      assertFalse(token1.equals((Object)token0));
  }

  @Test(timeout = 4000)
  public void test220()  throws Throwable  {
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      assertFalse(fileDescriptor0.valid());
      assertNotNull(fileDescriptor0);
      
      PipedInputStream pipedInputStream0 = new PipedInputStream(26);
      assertEquals(0, pipedInputStream0.available());
      assertNotNull(pipedInputStream0);
      
      StringReader stringReader0 = new StringReader("VeZOwOq;;'4Z^M-m.");
      assertNotNull(stringReader0);
      
      StringReader stringReader1 = new StringReader("VeZOwOq;;'4Z^M-m.");
      assertNotNull(stringReader1);
      assertFalse(stringReader1.equals((Object)stringReader0));
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, 26, (-202));
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertNotNull(javaCharStream0);
      assertFalse(stringReader0.equals((Object)stringReader1));
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertNotNull(javaParserTokenManager0);
      assertFalse(stringReader0.equals((Object)stringReader1));
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertEquals(6, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(74, token0.kind);
      assertEquals(26, token0.beginLine);
      assertEquals((-202), token0.beginColumn);
      assertEquals((-196), token0.endColumn);
      assertEquals(26, token0.endLine);
      assertEquals((-202), javaCharStream0.getBeginColumn());
      assertEquals(26, javaCharStream0.getBeginLine());
      assertEquals(26, javaCharStream0.getEndLine());
      assertEquals((-196), javaCharStream0.getColumn());
      assertEquals(26, javaCharStream0.getLine());
      assertEquals((-196), javaCharStream0.getEndColumn());
      assertEquals("VeZOwOq", token0.toString());
      assertNotSame(stringReader0, stringReader1);
      assertNotNull(token0);
      assertFalse(stringReader0.equals((Object)stringReader1));
  }

  @Test(timeout = 4000)
  public void test221()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "+=");
      assertFalse(boolean0);
      
      StringReader stringReader0 = new StringReader("+=");
      assertNotNull(stringReader0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, (-3973), (-3973));
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertNotNull(javaCharStream0);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertNotNull(javaParserTokenManager0);
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(1, javaCharStream0.bufpos);
      assertEquals((-3973), token0.beginColumn);
      assertEquals((-3973), token0.beginLine);
      assertEquals((-3973), token0.endLine);
      assertEquals((-3972), token0.endColumn);
      assertEquals(110, token0.kind);
      assertEquals((-3973), javaCharStream0.getEndLine());
      assertEquals((-3972), javaCharStream0.getEndColumn());
      assertEquals((-3973), javaCharStream0.getBeginLine());
      assertEquals((-3972), javaCharStream0.getColumn());
      assertEquals((-3973), javaCharStream0.getLine());
      assertEquals((-3973), javaCharStream0.getBeginColumn());
      assertEquals("+=", token0.toString());
      assertNotNull(token0);
  }

  @Test(timeout = 4000)
  public void test222()  throws Throwable  {
      PipedInputStream pipedInputStream0 = new PipedInputStream(57);
      assertEquals(0, pipedInputStream0.available());
      assertNotNull(pipedInputStream0);
      
      StringReader stringReader0 = new StringReader("++");
      assertNotNull(stringReader0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, 19, 70, 57);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertNotNull(javaCharStream0);
      
      JavaCharStream javaCharStream1 = new JavaCharStream(stringReader0, 118, (-1084), 57);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream1.bufpos);
      assertEquals(0, javaCharStream1.getBeginLine());
      assertEquals(0, javaCharStream1.getBeginColumn());
      assertNotNull(javaCharStream1);
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      
      JavaCharStream javaCharStream2 = new JavaCharStream(stringReader0, 49, 5272);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream2.bufpos);
      assertEquals(0, javaCharStream2.getBeginLine());
      assertEquals(0, javaCharStream2.getBeginColumn());
      assertNotNull(javaCharStream2);
      assertFalse(javaCharStream2.equals((Object)javaCharStream0));
      assertFalse(javaCharStream2.equals((Object)javaCharStream1));
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream2);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream2.bufpos);
      assertEquals(0, javaCharStream2.getBeginLine());
      assertEquals(0, javaCharStream2.getBeginColumn());
      assertNotNull(javaParserTokenManager0);
      assertFalse(javaCharStream2.equals((Object)javaCharStream0));
      assertFalse(javaCharStream2.equals((Object)javaCharStream1));
      
      stringReader0.reset();
      Token token0 = javaParserTokenManager0.getNextToken();
      assertEquals(1, javaCharStream2.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(99, token0.kind);
      assertEquals(49, token0.beginLine);
      assertEquals(49, token0.endLine);
      assertEquals(5272, token0.beginColumn);
      assertEquals(5273, token0.endColumn);
      assertEquals(5273, javaCharStream2.getColumn());
      assertEquals(5273, javaCharStream2.getEndColumn());
      assertEquals(5272, javaCharStream2.getBeginColumn());
      assertEquals(49, javaCharStream2.getBeginLine());
      assertEquals(49, javaCharStream2.getLine());
      assertEquals(49, javaCharStream2.getEndLine());
      assertEquals("++", token0.toString());
      assertNotSame(javaCharStream2, javaCharStream0);
      assertNotSame(javaCharStream2, javaCharStream1);
      assertNotNull(token0);
      assertFalse(javaCharStream2.equals((Object)javaCharStream0));
      assertFalse(javaCharStream2.equals((Object)javaCharStream1));
      
      javaParserTokenManager0.MoreLexicalActions();
      assertEquals(1, javaCharStream2.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(5273, javaCharStream2.getColumn());
      assertEquals(5273, javaCharStream2.getEndColumn());
      assertEquals(5272, javaCharStream2.getBeginColumn());
      assertEquals(49, javaCharStream2.getBeginLine());
      assertEquals(49, javaCharStream2.getLine());
      assertEquals(49, javaCharStream2.getEndLine());
      assertNotSame(javaCharStream2, javaCharStream0);
      assertNotSame(javaCharStream2, javaCharStream1);
      assertFalse(javaCharStream2.equals((Object)javaCharStream0));
      assertFalse(javaCharStream2.equals((Object)javaCharStream1));
      
      javaParserTokenManager0.MoreLexicalActions();
      assertEquals(1, javaCharStream2.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(5273, javaCharStream2.getColumn());
      assertEquals(5273, javaCharStream2.getEndColumn());
      assertEquals(5272, javaCharStream2.getBeginColumn());
      assertEquals(49, javaCharStream2.getBeginLine());
      assertEquals(49, javaCharStream2.getLine());
      assertEquals(49, javaCharStream2.getEndLine());
      assertNotSame(javaCharStream2, javaCharStream0);
      assertNotSame(javaCharStream2, javaCharStream1);
      assertFalse(javaCharStream2.equals((Object)javaCharStream0));
      assertFalse(javaCharStream2.equals((Object)javaCharStream1));
      
      Token token1 = javaParserTokenManager0.getNextToken();
      assertEquals(0, javaCharStream2.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(49, token1.beginLine);
      assertEquals(49, token1.endLine);
      assertEquals(5273, token1.beginColumn);
      assertEquals(0, token1.kind);
      assertEquals(5273, token1.endColumn);
      assertEquals(5273, javaCharStream2.getBeginColumn());
      assertEquals(5273, javaCharStream2.getColumn());
      assertEquals(5273, javaCharStream2.getEndColumn());
      assertEquals(49, javaCharStream2.getBeginLine());
      assertEquals(49, javaCharStream2.getLine());
      assertEquals(49, javaCharStream2.getEndLine());
      assertEquals("", token1.toString());
      assertNotSame(javaCharStream2, javaCharStream0);
      assertNotSame(javaCharStream2, javaCharStream1);
      assertNotSame(token1, token0);
      assertNotNull(token1);
      assertFalse(javaCharStream2.equals((Object)javaCharStream0));
      assertFalse(javaCharStream2.equals((Object)javaCharStream1));
      assertFalse(token1.equals((Object)token0));
      
      // Undeclared exception!
      try { 
        javaParserTokenManager0.SwitchTo(49);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Error: Ignoring invalid lexical state : 49. State unchanged.
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
      }
  }
}
