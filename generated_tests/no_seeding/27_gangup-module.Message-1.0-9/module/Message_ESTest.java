/*
 * This file was automatically generated by EvoSuite
 * Mon Oct 28 22:44:58 GMT 2019
 */

package module;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import module.Kernel;
import module.Message;
import module.MessageFactory;
import module.Module;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.System;
import org.junit.runner.RunWith;
import util.ObjectManager;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Message_ESTest extends Message_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Message message0 = MessageFactory.createConnectionDroppedMessage(1, "");
      assertEquals(0L, message0.getSID());
      
      message0.sessionID = (-2785L);
      String string0 = message0.toString();
      assertEquals("Message[id=0,session=-2785,head=DROPPED,recip=*,sender=null,state=1,ttl=3000,time=1392409281320,body=ID: 1 IP: ]", string0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Message message0 = new Message();
      message0.setDelivered(false);
      assertEquals(0, message0.getState());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Message message0 = new Message();
      message0.setHeader("_FATAL_ERROR_CLOSE_NOTICE");
      assertEquals("_FATAL_ERROR_CLOSE_NOTICE", message0.getHeader());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Message message0 = new Message("<TO}l2|a78", "<TO}l2|a78", "<TO}l2|a78");
      message0.set("<TO}l2|a78", "[09![0U+Pv'", "");
      message0.getRecipient();
      assertEquals(1L, message0.getID());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Message message0 = new Message((ObjectManager) null);
      System.setCurrentTimeMillis(0L);
      Message message1 = message0.reply(message0.CREATED);
      assertEquals(0L, message1.getID());
      assertEquals(3000L, message1.getTTL());
      assertEquals(1, message1.getState());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Message message0 = new Message((ObjectManager) null);
      System.setCurrentTimeMillis((-23L));
      Message message1 = message0.reply(message0.DELIVERED);
      assertEquals(1, message1.getState());
      assertEquals(3000L, message1.getTTL());
      assertEquals(0L, message1.getID());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Object[] objectArray0 = new Object[1];
      Message message0 = MessageFactory.createErrorMessage("tayBN", objectArray0);
      assertEquals(0L, message0.getSID());
      
      message0.sessionID = 3000L;
      Message message1 = message0.reply("]");
      assertEquals(1L, message1.getID());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Message message0 = new Message();
      message0.sessionID = (-1148L);
      Message message1 = message0.reply("r.8XWp+w2;-h");
      assertEquals(3000L, message1.getTTL());
      assertEquals(1, message1.getState());
      assertEquals((-1148L), message1.getSID());
      assertEquals(0L, message1.getID());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Object[] objectArray0 = new Object[3];
      Message message0 = MessageFactory.createWarningMessage("*", objectArray0);
      long long0 = message0.getTimeStamp();
      assertEquals(1392409281320L, long0);
      assertEquals("*", message0.getRecipient());
      assertEquals(0L, message0.getSID());
      assertEquals(1, message0.getState());
      assertEquals(3000L, message0.getTTL());
      assertEquals("WARNING", message0.getHeader());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      System.setCurrentTimeMillis((-1477L));
      Message message0 = MessageFactory.createConnectionDroppedMessage((-404), "mk");
      long long0 = message0.getTimeStamp();
      assertEquals(3000L, message0.getTTL());
      assertEquals((-1477L), long0);
      assertEquals(0L, message0.getSID());
      assertEquals(1, message0.getState());
      assertEquals("DROPPED", message0.getHeader());
      assertEquals("*", message0.getRecipient());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Message message0 = new Message();
      long long0 = message0.getTTL();
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Message message0 = MessageFactory.createConnectionDroppedMessage(1, "");
      message0.timetolive = (-539L);
      long long0 = message0.getTTL();
      assertEquals((-539L), long0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Message message0 = new Message();
      int int0 = message0.getState();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      MessageFactory messageFactory0 = MessageFactory.getInstance();
      Message message0 = new Message(messageFactory0);
      message0.state = (-1307);
      int int0 = message0.getState();
      assertEquals((-1307), int0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Message message0 = MessageFactory.createConnectionDroppedMessage((-594), "");
      message0.setSender("]#_pDx");
      String string0 = message0.getSender();
      assertEquals("*", message0.getRecipient());
      assertEquals("]#_pDx", string0);
      assertEquals(3000L, message0.getTTL());
      assertEquals("DROPPED", message0.getHeader());
      assertNotNull(string0);
      assertEquals(0L, message0.getSID());
      assertEquals(1, message0.getState());
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Message message0 = MessageFactory.createConnectionDroppedMessage(1, "");
      message0.setSender("");
      String string0 = message0.getSender();
      assertEquals(3000L, message0.getTTL());
      assertEquals("", string0);
      assertEquals("*", message0.getRecipient());
      assertNotNull(string0);
      assertEquals(0L, message0.getSID());
      assertEquals(1, message0.getState());
      assertEquals("DROPPED", message0.getHeader());
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Object[] objectArray0 = new Object[1];
      Message message0 = MessageFactory.createErrorMessage("tayBN", objectArray0);
      assertEquals(0L, message0.getSID());
      
      message0.sessionID = 3000L;
      long long0 = message0.getSID();
      assertEquals(3000L, long0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Message message0 = MessageFactory.createConnectionDroppedMessage(1, "");
      message0.sessionID = (-2785L);
      long long0 = message0.getSID();
      assertEquals((-2785L), long0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Message message0 = new Message();
      String string0 = message0.getRecipient();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Message message0 = MessageFactory.createUnloadMessage("");
      message0.messageID = 2795L;
      long long0 = message0.getID();
      assertEquals(2795L, long0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Message message0 = new Message();
      Message message1 = message0.clone();
      message1.messageID = (-454L);
      long long0 = message1.getID();
      assertEquals((-454L), long0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Message message0 = new Message();
      // Undeclared exception!
      try { 
        message0.sendTo((Module) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("module.Message", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Message message0 = new Message();
      Kernel kernel0 = new Kernel();
      try { 
        message0.sendFrom(kernel0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // java.lang.NullPointerException
         //
         verifyException("module.Kernel", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Message message0 = new Message();
      // Undeclared exception!
      try { 
        message0.send((Module) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("module.Message", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Message message0 = MessageFactory.createUnloadMessage("");
      message0.setBody(message0);
      assertEquals(2, message0.getRefCount());
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Message message0 = new Message("<TO}l2|a78", "<TO}l2|a78", "<TO}l2|a78");
      message0.setBody("[09![0U+Pv'");
      assertEquals(0L, message0.getSID());
      assertEquals(1, message0.getState());
      assertEquals("<TO}l2|a78", message0.getHeader());
      assertEquals(3000L, message0.getTTL());
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Message message0 = new Message();
      try { 
        message0.send();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // modnull,msg=Message[id=0,session=0,head=null,recip=null,sender=null,state=0,ttl=0,time=0,body=null]: no source module
         //
         verifyException("module.Message", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Object[] objectArray0 = new Object[1];
      Message message0 = MessageFactory.createErrorMessage("tayBN", objectArray0);
      message0.consume();
      assertEquals("*", message0.getRecipient());
      assertEquals(0L, message0.getSID());
      assertEquals(1, message0.getState());
      assertEquals(3000L, message0.getTTL());
      assertEquals("ERROR", message0.getHeader());
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Message message0 = new Message();
      assertFalse(message0.received());
      
      message0.state = 2;
      boolean boolean0 = message0.received();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Message message0 = MessageFactory.createConnectionDroppedMessage(1, "");
      boolean boolean0 = message0.received();
      assertEquals(0L, message0.getSID());
      assertEquals(1, message0.getState());
      assertFalse(boolean0);
      assertEquals(3000L, message0.getTTL());
      assertEquals("DROPPED", message0.getHeader());
      assertEquals("*", message0.getRecipient());
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Message message0 = new Message();
      message0.setDelivered(true);
      boolean boolean0 = message0.delivered();
      assertEquals(4, message0.getState());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      MessageFactory messageFactory0 = MessageFactory.getInstance();
      Message message0 = new Message(messageFactory0);
      boolean boolean0 = message0.delivered();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Message message0 = MessageFactory.createConnectionDroppedMessage(1, "");
      message0.setDelivered(true);
      message0.setDelivered(true);
      assertTrue(message0.delivered());
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Message message0 = MessageFactory.createConnectionDroppedMessage(4, "STOP");
      message0.setDelivered(false);
      assertEquals("*", message0.getRecipient());
      assertEquals("DROPPED", message0.getHeader());
      assertEquals(3000L, message0.getTTL());
      assertEquals(1, message0.getState());
      assertEquals(0L, message0.getSID());
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      MessageFactory messageFactory0 = MessageFactory.getInstance();
      Message message0 = new Message(messageFactory0);
      Object object0 = message0.getBody();
      assertEquals("", object0);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Message message0 = MessageFactory.createUnloadMessage("GameState.unpack(): *** WARNING *** data is not of proper type!");
      Object object0 = message0.getBody();
      assertEquals("KERNEL", message0.getHeader());
      assertEquals(0L, message0.getSID());
      assertEquals(1, message0.getState());
      assertEquals(3000L, message0.getTTL());
      assertEquals("*", message0.getRecipient());
      assertEquals("UNLOAD GameState.unpack(): *** WARNING *** data is not of proper type!", object0);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      Message message0 = MessageFactory.createConnectionDroppedMessage(16, "x{2a&&@uT'oc");
      Message message1 = MessageFactory.createMessage("x{2a&&@uT'oc", (Object) message0);
      assertEquals(2, message0.getRefCount());
      
      message1.unref();
      assertEquals(3000L, message0.getTTL());
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      Object[] objectArray0 = new Object[1];
      Message message0 = MessageFactory.createErrorMessage("tayBN", objectArray0);
      Message message1 = message0.clone();
      message1.getHeader();
      assertEquals(3000L, message0.getTTL());
      assertEquals("ERROR", message0.getHeader());
      assertEquals(0L, message0.getSID());
      assertEquals(1, message0.getState());
      assertEquals("*", message0.getRecipient());
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      Object[] objectArray0 = new Object[1];
      Message message0 = MessageFactory.createErrorMessage("tayBN", objectArray0);
      String string0 = message0.getHeader();
      assertEquals("ERROR", string0);
      assertNotNull(string0);
      assertEquals("*", message0.getRecipient());
      assertEquals(3000L, message0.getTTL());
      assertEquals(0L, message0.getSID());
      assertEquals(1, message0.getState());
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      Message message0 = MessageFactory.createConnectionDroppedMessage(1, "");
      long long0 = message0.getTTL();
      assertEquals(0L, message0.getSID());
      assertEquals("DROPPED", message0.getHeader());
      assertEquals(1, message0.getState());
      assertEquals("*", message0.getRecipient());
      assertEquals(3000L, long0);
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      Object[] objectArray0 = new Object[1];
      Message message0 = MessageFactory.createErrorMessage("tayBN", objectArray0);
      assertEquals("*", message0.getRecipient());
      
      message0.setRecipient("");
      assertEquals("", message0.getRecipient());
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      Message message0 = new Message((String) null, (Object) null);
      assertEquals(0L, message0.getSID());
      assertEquals(1, message0.getState());
      assertEquals(3000L, message0.getTTL());
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      Message message0 = new Message("", "", "");
      String string0 = message0.getRecipient();
      assertEquals(0L, message0.getSID());
      assertEquals(1, message0.getState());
      assertNotNull(string0);
      assertEquals(3000L, message0.getTTL());
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      Message message0 = new Message();
      Kernel kernel0 = new Kernel();
      try { 
        message0.send((Module) kernel0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // java.lang.NullPointerException
         //
         verifyException("module.Kernel", e);
      }
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      Message message0 = new Message();
      long long0 = message0.getID();
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      Message message0 = new Message();
      Kernel kernel0 = new Kernel();
      message0.sendTo(kernel0);
      assertEquals(1, Message.CREATED);
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      Object[] objectArray0 = new Object[1];
      Message message0 = MessageFactory.createErrorMessage("tayBN", objectArray0);
      long long0 = message0.getSID();
      assertEquals(3000L, message0.getTTL());
      assertEquals(0L, long0);
      assertEquals("ERROR", message0.getHeader());
      assertEquals(1, message0.getState());
      assertEquals("*", message0.getRecipient());
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      Object[] objectArray0 = new Object[1];
      Message message0 = MessageFactory.createErrorMessage("tayBN", objectArray0);
      int int0 = message0.getState();
      assertEquals(1, int0);
      assertEquals(0L, message0.getSID());
      assertEquals("ERROR", message0.getHeader());
      assertEquals(3000L, message0.getTTL());
      assertEquals("*", message0.getRecipient());
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      Message message0 = MessageFactory.createConnectionDroppedMessage(1, "");
      String string0 = message0.getSender();
      assertNull(string0);
      assertEquals(3000L, message0.getTTL());
      assertEquals(0L, message0.getSID());
      assertEquals(1, message0.getState());
      assertEquals("*", message0.getRecipient());
      assertEquals("DROPPED", message0.getHeader());
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      Message message0 = new Message();
      long long0 = message0.getTimeStamp();
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      Message message0 = new Message();
      // Undeclared exception!
      try { 
        message0.sendFrom((Module) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("module.Message", e);
      }
  }
}
