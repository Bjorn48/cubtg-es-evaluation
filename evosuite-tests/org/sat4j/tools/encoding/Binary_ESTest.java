/*
 * This file was automatically generated by EvoSuite
 * Mon Feb 18 22:08:20 GMT 2019
 */

package org.sat4j.tools.encoding;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;
import org.sat4j.core.VecInt;
import org.sat4j.minisat.constraints.ClausalDataStructureWL;
import org.sat4j.minisat.core.Solver;
import org.sat4j.minisat.learning.PercentLengthLearning;
import org.sat4j.minisat.orders.LevelBasedVarOrderHeap;
import org.sat4j.minisat.orders.RSATLastLearnedClausesPhaseSelectionStrategy;
import org.sat4j.minisat.restarts.Glucose21Restarts;
import org.sat4j.opt.MaxSatDecorator;
import org.sat4j.specs.IConstr;
import org.sat4j.specs.ISolver;
import org.sat4j.specs.IVecInt;
import org.sat4j.tools.AbstractMinimalModel;
import org.sat4j.tools.ClausalCardinalitiesDecorator;
import org.sat4j.tools.DimacsOutputSolver;
import org.sat4j.tools.GateTranslator;
import org.sat4j.tools.SolutionCounter;
import org.sat4j.tools.StatisticsSolver;
import org.sat4j.tools.SubModelIterator;
import org.sat4j.tools.encoding.Binary;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Binary_ESTest extends Binary_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Binary binary0 = new Binary();
      assertNotNull(binary0);
      
      VecInt vecInt0 = new VecInt(3, 3);
      assertFalse(vecInt0.isEmpty());
      assertEquals(3, vecInt0.size());
      assertEquals(3, vecInt0.last());
      assertNotNull(vecInt0);
      
      IVecInt iVecInt0 = vecInt0.push(3);
      assertSame(vecInt0, iVecInt0);
      assertSame(iVecInt0, vecInt0);
      assertFalse(vecInt0.isEmpty());
      assertEquals(4, vecInt0.size());
      assertEquals(3, vecInt0.last());
      assertEquals(3, iVecInt0.last());
      assertEquals(4, iVecInt0.size());
      assertFalse(iVecInt0.isEmpty());
      assertNotNull(iVecInt0);
      
      DimacsOutputSolver dimacsOutputSolver0 = new DimacsOutputSolver();
      assertEquals(0, dimacsOutputSolver0.newVar());
      assertEquals(0L, dimacsOutputSolver0.getTimeoutMs());
      assertFalse(dimacsOutputSolver0.isDBSimplificationAllowed());
      assertEquals(0, dimacsOutputSolver0.nVars());
      assertFalse(dimacsOutputSolver0.isSolverKeptHot());
      assertEquals("", dimacsOutputSolver0.getLogPrefix());
      assertEquals(0, dimacsOutputSolver0.nConstraints());
      assertEquals(0, dimacsOutputSolver0.getTimeout());
      assertFalse(dimacsOutputSolver0.isVerbose());
      assertEquals(0, dimacsOutputSolver0.realNumberOfVariables());
      assertNotNull(dimacsOutputSolver0);
      
      IConstr iConstr0 = binary0.addExactly(dimacsOutputSolver0, vecInt0, 3);
      assertSame(vecInt0, iVecInt0);
      assertFalse(vecInt0.isEmpty());
      assertEquals(4, vecInt0.size());
      assertEquals(3, vecInt0.last());
      assertEquals(0, dimacsOutputSolver0.newVar());
      assertEquals(0L, dimacsOutputSolver0.getTimeoutMs());
      assertFalse(dimacsOutputSolver0.isDBSimplificationAllowed());
      assertFalse(dimacsOutputSolver0.isSolverKeptHot());
      assertEquals("", dimacsOutputSolver0.getLogPrefix());
      assertEquals(24, dimacsOutputSolver0.realNumberOfVariables());
      assertEquals(24, dimacsOutputSolver0.nVars());
      assertEquals(0, dimacsOutputSolver0.nConstraints());
      assertEquals(0, dimacsOutputSolver0.getTimeout());
      assertFalse(dimacsOutputSolver0.isVerbose());
      assertEquals(0.0, iConstr0.getActivity(), 0.01);
      assertEquals(2, iConstr0.size());
      assertFalse(iConstr0.canBePropagatedMultipleTimes());
      assertNotNull(iConstr0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Binary binary0 = new Binary();
      assertNotNull(binary0);
      
      PercentLengthLearning<ClausalDataStructureWL> percentLengthLearning0 = new PercentLengthLearning<ClausalDataStructureWL>();
      assertEquals(10, percentLengthLearning0.getLimit());
      assertNotNull(percentLengthLearning0);
      
      ClausalDataStructureWL clausalDataStructureWL0 = new ClausalDataStructureWL();
      assertNotNull(clausalDataStructureWL0);
      
      RSATLastLearnedClausesPhaseSelectionStrategy rSATLastLearnedClausesPhaseSelectionStrategy0 = new RSATLastLearnedClausesPhaseSelectionStrategy();
      assertEquals("lightweight component caching from RSAT inverting phase for variables at conflict decision level", rSATLastLearnedClausesPhaseSelectionStrategy0.toString());
      assertNotNull(rSATLastLearnedClausesPhaseSelectionStrategy0);
      
      LevelBasedVarOrderHeap levelBasedVarOrderHeap0 = new LevelBasedVarOrderHeap(rSATLastLearnedClausesPhaseSelectionStrategy0);
      assertEquals("lightweight component caching from RSAT inverting phase for variables at conflict decision level", rSATLastLearnedClausesPhaseSelectionStrategy0.toString());
      assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
      assertNotNull(levelBasedVarOrderHeap0);
      
      Glucose21Restarts glucose21Restarts0 = new Glucose21Restarts();
      assertEquals("Glucose 2.1 dynamic restart strategy", glucose21Restarts0.toString());
      assertEquals(0L, glucose21Restarts0.nextRestartNumberOfConflict());
      assertNotNull(glucose21Restarts0);
      
      Solver<ClausalDataStructureWL> solver0 = new Solver<ClausalDataStructureWL>(percentLengthLearning0, clausalDataStructureWL0, levelBasedVarOrderHeap0, glucose21Restarts0);
      assertEquals(10, percentLengthLearning0.getLimit());
      assertEquals("lightweight component caching from RSAT inverting phase for variables at conflict decision level", rSATLastLearnedClausesPhaseSelectionStrategy0.toString());
      assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
      assertEquals("Glucose 2.1 dynamic restart strategy", glucose21Restarts0.toString());
      assertEquals(0L, glucose21Restarts0.nextRestartNumberOfConflict());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertEquals("c ", solver0.getLogPrefix());
      assertEquals(0, solver0.currentDecisionLevel());
      assertFalse(solver0.isVerbose());
      assertEquals(0, solver0.getPropagationLevel());
      assertEquals(0, solver0.decisionLevel());
      assertEquals(2147483, solver0.getTimeout());
      assertEquals(0, solver0.nVars());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(0, solver0.nConstraints());
      assertEquals(0, solver0.realNumberOfVariables());
      assertNotNull(solver0);
      
      VecInt vecInt0 = new VecInt(404, 404);
      assertEquals(404, vecInt0.last());
      assertFalse(vecInt0.isEmpty());
      assertEquals(404, vecInt0.size());
      assertNotNull(vecInt0);
      
      try { 
        binary0.addExactlyOne(solver0, vecInt0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Creating Empty clause ?
         //
         verifyException("org.sat4j.minisat.constraints.cnf.Clauses", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Binary binary0 = new Binary();
      assertNotNull(binary0);
      
      DimacsOutputSolver dimacsOutputSolver0 = new DimacsOutputSolver();
      assertEquals(0, dimacsOutputSolver0.realNumberOfVariables());
      assertEquals(0, dimacsOutputSolver0.nConstraints());
      assertEquals(0, dimacsOutputSolver0.newVar());
      assertEquals(0, dimacsOutputSolver0.nVars());
      assertEquals(0L, dimacsOutputSolver0.getTimeoutMs());
      assertEquals("", dimacsOutputSolver0.getLogPrefix());
      assertFalse(dimacsOutputSolver0.isDBSimplificationAllowed());
      assertFalse(dimacsOutputSolver0.isSolverKeptHot());
      assertFalse(dimacsOutputSolver0.isVerbose());
      assertEquals(0, dimacsOutputSolver0.getTimeout());
      assertNotNull(dimacsOutputSolver0);
      
      // Undeclared exception!
      try { 
        binary0.addExactlyOne(dimacsOutputSolver0, (IVecInt) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.tools.DimacsOutputSolver", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Binary binary0 = new Binary();
      assertNotNull(binary0);
      
      DimacsOutputSolver dimacsOutputSolver0 = new DimacsOutputSolver();
      assertEquals("", dimacsOutputSolver0.getLogPrefix());
      assertFalse(dimacsOutputSolver0.isDBSimplificationAllowed());
      assertEquals(0, dimacsOutputSolver0.newVar());
      assertFalse(dimacsOutputSolver0.isSolverKeptHot());
      assertFalse(dimacsOutputSolver0.isVerbose());
      assertEquals(0, dimacsOutputSolver0.getTimeout());
      assertEquals(0, dimacsOutputSolver0.realNumberOfVariables());
      assertEquals(0, dimacsOutputSolver0.nConstraints());
      assertEquals(0, dimacsOutputSolver0.nVars());
      assertEquals(0L, dimacsOutputSolver0.getTimeoutMs());
      assertNotNull(dimacsOutputSolver0);
      
      IVecInt iVecInt0 = VecInt.EMPTY;
      assertEquals(0, iVecInt0.size());
      assertTrue(iVecInt0.isEmpty());
      assertNotNull(iVecInt0);
      
      // Undeclared exception!
      try { 
        binary0.addExactlyOne(dimacsOutputSolver0, iVecInt0);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.tools.encoding.Binary", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Binary binary0 = new Binary();
      assertNotNull(binary0);
      
      PercentLengthLearning<ClausalDataStructureWL> percentLengthLearning0 = new PercentLengthLearning<ClausalDataStructureWL>();
      assertEquals(10, percentLengthLearning0.getLimit());
      assertNotNull(percentLengthLearning0);
      
      ClausalDataStructureWL clausalDataStructureWL0 = new ClausalDataStructureWL();
      assertNotNull(clausalDataStructureWL0);
      
      RSATLastLearnedClausesPhaseSelectionStrategy rSATLastLearnedClausesPhaseSelectionStrategy0 = new RSATLastLearnedClausesPhaseSelectionStrategy();
      assertEquals("lightweight component caching from RSAT inverting phase for variables at conflict decision level", rSATLastLearnedClausesPhaseSelectionStrategy0.toString());
      assertNotNull(rSATLastLearnedClausesPhaseSelectionStrategy0);
      
      LevelBasedVarOrderHeap levelBasedVarOrderHeap0 = new LevelBasedVarOrderHeap(rSATLastLearnedClausesPhaseSelectionStrategy0);
      assertEquals("lightweight component caching from RSAT inverting phase for variables at conflict decision level", rSATLastLearnedClausesPhaseSelectionStrategy0.toString());
      assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
      assertNotNull(levelBasedVarOrderHeap0);
      
      Glucose21Restarts glucose21Restarts0 = new Glucose21Restarts();
      assertEquals(0L, glucose21Restarts0.nextRestartNumberOfConflict());
      assertEquals("Glucose 2.1 dynamic restart strategy", glucose21Restarts0.toString());
      assertNotNull(glucose21Restarts0);
      
      Solver<ClausalDataStructureWL> solver0 = new Solver<ClausalDataStructureWL>(percentLengthLearning0, clausalDataStructureWL0, levelBasedVarOrderHeap0, glucose21Restarts0);
      assertEquals(10, percentLengthLearning0.getLimit());
      assertEquals("lightweight component caching from RSAT inverting phase for variables at conflict decision level", rSATLastLearnedClausesPhaseSelectionStrategy0.toString());
      assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
      assertEquals(0L, glucose21Restarts0.nextRestartNumberOfConflict());
      assertEquals("Glucose 2.1 dynamic restart strategy", glucose21Restarts0.toString());
      assertEquals(0, solver0.decisionLevel());
      assertEquals("c ", solver0.getLogPrefix());
      assertEquals(2147483, solver0.getTimeout());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(0, solver0.nVars());
      assertEquals(0, solver0.nConstraints());
      assertEquals(0, solver0.realNumberOfVariables());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertFalse(solver0.isVerbose());
      assertEquals(0, solver0.getPropagationLevel());
      assertEquals(0, solver0.currentDecisionLevel());
      assertNotNull(solver0);
      
      int[] intArray0 = new int[9];
      VecInt vecInt0 = new VecInt(intArray0);
      assertFalse(vecInt0.isEmpty());
      assertEquals(9, vecInt0.size());
      assertEquals(0, vecInt0.last());
      assertArrayEquals(new int[] {0, 0, 0, 0, 0, 0, 0, 0, 0}, intArray0);
      assertEquals(9, intArray0.length);
      assertNotNull(vecInt0);
      
      AbstractMinimalModel abstractMinimalModel0 = new AbstractMinimalModel(solver0, vecInt0);
      assertEquals(10, percentLengthLearning0.getLimit());
      assertEquals("lightweight component caching from RSAT inverting phase for variables at conflict decision level", rSATLastLearnedClausesPhaseSelectionStrategy0.toString());
      assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
      assertEquals(0L, glucose21Restarts0.nextRestartNumberOfConflict());
      assertEquals("Glucose 2.1 dynamic restart strategy", glucose21Restarts0.toString());
      assertEquals(0, solver0.decisionLevel());
      assertEquals("c ", solver0.getLogPrefix());
      assertEquals(2147483, solver0.getTimeout());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(0, solver0.nVars());
      assertEquals(0, solver0.nConstraints());
      assertEquals(0, solver0.realNumberOfVariables());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertFalse(solver0.isVerbose());
      assertEquals(0, solver0.getPropagationLevel());
      assertEquals(0, solver0.currentDecisionLevel());
      assertFalse(vecInt0.isEmpty());
      assertEquals(9, vecInt0.size());
      assertEquals(0, vecInt0.last());
      assertArrayEquals(new int[] {0, 0, 0, 0, 0, 0, 0, 0, 0}, intArray0);
      assertEquals(9, intArray0.length);
      assertNotNull(abstractMinimalModel0);
      
      // Undeclared exception!
      try { 
        binary0.addExactlyOne(abstractMinimalModel0, vecInt0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 0 is not a valid variable identifier
         //
         verifyException("org.sat4j.minisat.core.Solver", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Binary binary0 = new Binary();
      assertNotNull(binary0);
      
      DimacsOutputSolver dimacsOutputSolver0 = new DimacsOutputSolver();
      assertEquals(0, dimacsOutputSolver0.realNumberOfVariables());
      assertEquals(0, dimacsOutputSolver0.nConstraints());
      assertEquals(0, dimacsOutputSolver0.getTimeout());
      assertFalse(dimacsOutputSolver0.isSolverKeptHot());
      assertEquals(0, dimacsOutputSolver0.newVar());
      assertFalse(dimacsOutputSolver0.isDBSimplificationAllowed());
      assertFalse(dimacsOutputSolver0.isVerbose());
      assertEquals("", dimacsOutputSolver0.getLogPrefix());
      assertEquals(0L, dimacsOutputSolver0.getTimeoutMs());
      assertEquals(0, dimacsOutputSolver0.nVars());
      assertNotNull(dimacsOutputSolver0);
      
      // Undeclared exception!
      try { 
        binary0.addExactly(dimacsOutputSolver0, (IVecInt) null, 6);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.tools.encoding.EncodingStrategyAdapter", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Binary binary0 = new Binary();
      assertNotNull(binary0);
      
      PercentLengthLearning<ClausalDataStructureWL> percentLengthLearning0 = new PercentLengthLearning<ClausalDataStructureWL>();
      assertEquals(10, percentLengthLearning0.getLimit());
      assertNotNull(percentLengthLearning0);
      
      ClausalDataStructureWL clausalDataStructureWL0 = new ClausalDataStructureWL();
      assertNotNull(clausalDataStructureWL0);
      
      RSATLastLearnedClausesPhaseSelectionStrategy rSATLastLearnedClausesPhaseSelectionStrategy0 = new RSATLastLearnedClausesPhaseSelectionStrategy();
      assertEquals("lightweight component caching from RSAT inverting phase for variables at conflict decision level", rSATLastLearnedClausesPhaseSelectionStrategy0.toString());
      assertNotNull(rSATLastLearnedClausesPhaseSelectionStrategy0);
      
      LevelBasedVarOrderHeap levelBasedVarOrderHeap0 = new LevelBasedVarOrderHeap(rSATLastLearnedClausesPhaseSelectionStrategy0);
      assertEquals("lightweight component caching from RSAT inverting phase for variables at conflict decision level", rSATLastLearnedClausesPhaseSelectionStrategy0.toString());
      assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
      assertNotNull(levelBasedVarOrderHeap0);
      
      Glucose21Restarts glucose21Restarts0 = new Glucose21Restarts();
      assertEquals(0L, glucose21Restarts0.nextRestartNumberOfConflict());
      assertEquals("Glucose 2.1 dynamic restart strategy", glucose21Restarts0.toString());
      assertNotNull(glucose21Restarts0);
      
      Solver<ClausalDataStructureWL> solver0 = new Solver<ClausalDataStructureWL>(percentLengthLearning0, clausalDataStructureWL0, levelBasedVarOrderHeap0, glucose21Restarts0);
      assertEquals(10, percentLengthLearning0.getLimit());
      assertEquals("lightweight component caching from RSAT inverting phase for variables at conflict decision level", rSATLastLearnedClausesPhaseSelectionStrategy0.toString());
      assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
      assertEquals(0L, glucose21Restarts0.nextRestartNumberOfConflict());
      assertEquals("Glucose 2.1 dynamic restart strategy", glucose21Restarts0.toString());
      assertEquals(0, solver0.nVars());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertEquals("c ", solver0.getLogPrefix());
      assertEquals(0, solver0.decisionLevel());
      assertEquals(0, solver0.realNumberOfVariables());
      assertEquals(0, solver0.nConstraints());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(2147483, solver0.getTimeout());
      assertFalse(solver0.isVerbose());
      assertEquals(0, solver0.currentDecisionLevel());
      assertEquals(0, solver0.getPropagationLevel());
      assertNotNull(solver0);
      
      int[] intArray0 = new int[9];
      VecInt vecInt0 = new VecInt(intArray0);
      assertFalse(vecInt0.isEmpty());
      assertEquals(0, vecInt0.last());
      assertEquals(9, vecInt0.size());
      assertArrayEquals(new int[] {0, 0, 0, 0, 0, 0, 0, 0, 0}, intArray0);
      assertEquals(9, intArray0.length);
      assertNotNull(vecInt0);
      
      AbstractMinimalModel abstractMinimalModel0 = new AbstractMinimalModel(solver0, vecInt0);
      assertEquals(10, percentLengthLearning0.getLimit());
      assertEquals("lightweight component caching from RSAT inverting phase for variables at conflict decision level", rSATLastLearnedClausesPhaseSelectionStrategy0.toString());
      assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
      assertEquals(0L, glucose21Restarts0.nextRestartNumberOfConflict());
      assertEquals("Glucose 2.1 dynamic restart strategy", glucose21Restarts0.toString());
      assertEquals(0, solver0.nVars());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertEquals("c ", solver0.getLogPrefix());
      assertEquals(0, solver0.decisionLevel());
      assertEquals(0, solver0.realNumberOfVariables());
      assertEquals(0, solver0.nConstraints());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(2147483, solver0.getTimeout());
      assertFalse(solver0.isVerbose());
      assertEquals(0, solver0.currentDecisionLevel());
      assertEquals(0, solver0.getPropagationLevel());
      assertFalse(vecInt0.isEmpty());
      assertEquals(0, vecInt0.last());
      assertEquals(9, vecInt0.size());
      assertArrayEquals(new int[] {0, 0, 0, 0, 0, 0, 0, 0, 0}, intArray0);
      assertEquals(9, intArray0.length);
      assertNotNull(abstractMinimalModel0);
      
      // Undeclared exception!
      try { 
        binary0.addExactly(abstractMinimalModel0, vecInt0, 0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 0 is not a valid variable identifier
         //
         verifyException("org.sat4j.minisat.core.Solver", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Binary binary0 = new Binary();
      assertNotNull(binary0);
      
      StatisticsSolver statisticsSolver0 = new StatisticsSolver();
      assertEquals(0, statisticsSolver0.realNumberOfVariables());
      assertEquals(0, statisticsSolver0.nConstraints());
      assertEquals(0, statisticsSolver0.nVars());
      assertNotNull(statisticsSolver0);
      
      SolutionCounter solutionCounter0 = new SolutionCounter(statisticsSolver0);
      assertEquals(0, statisticsSolver0.realNumberOfVariables());
      assertEquals(0, statisticsSolver0.nConstraints());
      assertEquals(0, statisticsSolver0.nVars());
      assertEquals(0, solutionCounter0.lowerBound());
      assertNotNull(solutionCounter0);
      
      VecInt vecInt0 = new VecInt(0, 0);
      assertEquals(0, vecInt0.size());
      assertTrue(vecInt0.isEmpty());
      assertNotNull(vecInt0);
      
      IVecInt iVecInt0 = vecInt0.push(0);
      assertSame(vecInt0, iVecInt0);
      assertSame(iVecInt0, vecInt0);
      assertEquals(0, vecInt0.last());
      assertEquals(1, vecInt0.size());
      assertFalse(vecInt0.isEmpty());
      assertEquals(0, iVecInt0.last());
      assertEquals(1, iVecInt0.size());
      assertFalse(iVecInt0.isEmpty());
      assertNotNull(iVecInt0);
      
      iVecInt0.copyTo((IVecInt) vecInt0);
      assertSame(vecInt0, iVecInt0);
      assertSame(iVecInt0, vecInt0);
      assertEquals(0, vecInt0.last());
      assertEquals(2, vecInt0.size());
      assertFalse(vecInt0.isEmpty());
      assertEquals(2, iVecInt0.size());
      assertEquals(0, iVecInt0.last());
      assertFalse(iVecInt0.isEmpty());
      
      // Undeclared exception!
      try { 
        binary0.addAtMostOne(solutionCounter0, iVecInt0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Not implemented yet!
         //
         verifyException("org.sat4j.tools.StatisticsSolver", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Binary binary0 = new Binary();
      assertNotNull(binary0);
      
      // Undeclared exception!
      try { 
        binary0.addAtMostOne((ISolver) null, (IVecInt) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.tools.encoding.Binary", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Binary binary0 = new Binary();
      assertNotNull(binary0);
      
      MaxSatDecorator maxSatDecorator0 = new MaxSatDecorator((ISolver) null);
      assertEquals(0, maxSatDecorator0.getExpectedNumberOfClauses());
      assertFalse(maxSatDecorator0.isSolutionOptimal());
      assertFalse(maxSatDecorator0.nonOptimalMeansSatisfiable());
      assertFalse(maxSatDecorator0.isOptimal());
      assertEquals(0, maxSatDecorator0.getNbexpectedclauses());
      assertFalse(maxSatDecorator0.hasNoObjectiveFunction());
      assertNotNull(maxSatDecorator0);
      
      VecInt vecInt0 = new VecInt();
      assertTrue(vecInt0.isEmpty());
      assertEquals(0, vecInt0.size());
      assertNotNull(vecInt0);
      
      // Undeclared exception!
      try { 
        binary0.addAtMostOne(maxSatDecorator0, vecInt0);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.tools.encoding.Binary", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Binary binary0 = new Binary();
      assertNotNull(binary0);
      
      PercentLengthLearning<ClausalDataStructureWL> percentLengthLearning0 = new PercentLengthLearning<ClausalDataStructureWL>();
      assertEquals(10, percentLengthLearning0.getLimit());
      assertNotNull(percentLengthLearning0);
      
      ClausalDataStructureWL clausalDataStructureWL0 = new ClausalDataStructureWL();
      assertNotNull(clausalDataStructureWL0);
      
      RSATLastLearnedClausesPhaseSelectionStrategy rSATLastLearnedClausesPhaseSelectionStrategy0 = new RSATLastLearnedClausesPhaseSelectionStrategy();
      assertEquals("lightweight component caching from RSAT inverting phase for variables at conflict decision level", rSATLastLearnedClausesPhaseSelectionStrategy0.toString());
      assertNotNull(rSATLastLearnedClausesPhaseSelectionStrategy0);
      
      LevelBasedVarOrderHeap levelBasedVarOrderHeap0 = new LevelBasedVarOrderHeap(rSATLastLearnedClausesPhaseSelectionStrategy0);
      assertEquals("lightweight component caching from RSAT inverting phase for variables at conflict decision level", rSATLastLearnedClausesPhaseSelectionStrategy0.toString());
      assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
      assertNotNull(levelBasedVarOrderHeap0);
      
      Glucose21Restarts glucose21Restarts0 = new Glucose21Restarts();
      assertEquals("Glucose 2.1 dynamic restart strategy", glucose21Restarts0.toString());
      assertEquals(0L, glucose21Restarts0.nextRestartNumberOfConflict());
      assertNotNull(glucose21Restarts0);
      
      Solver<ClausalDataStructureWL> solver0 = new Solver<ClausalDataStructureWL>(percentLengthLearning0, clausalDataStructureWL0, levelBasedVarOrderHeap0, glucose21Restarts0);
      assertEquals(10, percentLengthLearning0.getLimit());
      assertEquals("lightweight component caching from RSAT inverting phase for variables at conflict decision level", rSATLastLearnedClausesPhaseSelectionStrategy0.toString());
      assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
      assertEquals("Glucose 2.1 dynamic restart strategy", glucose21Restarts0.toString());
      assertEquals(0L, glucose21Restarts0.nextRestartNumberOfConflict());
      assertEquals(2147483, solver0.getTimeout());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertFalse(solver0.isVerbose());
      assertEquals(0, solver0.getPropagationLevel());
      assertEquals(0, solver0.currentDecisionLevel());
      assertEquals(0, solver0.nVars());
      assertEquals(0, solver0.decisionLevel());
      assertEquals("c ", solver0.getLogPrefix());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(0, solver0.nConstraints());
      assertEquals(0, solver0.realNumberOfVariables());
      assertNotNull(solver0);
      
      int[] intArray0 = new int[9];
      VecInt vecInt0 = new VecInt(intArray0);
      assertFalse(vecInt0.isEmpty());
      assertEquals(9, vecInt0.size());
      assertEquals(0, vecInt0.last());
      assertArrayEquals(new int[] {0, 0, 0, 0, 0, 0, 0, 0, 0}, intArray0);
      assertEquals(9, intArray0.length);
      assertNotNull(vecInt0);
      
      // Undeclared exception!
      try { 
        binary0.addAtMostOne(solver0, vecInt0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 0 is not a valid variable identifier
         //
         verifyException("org.sat4j.minisat.core.Solver", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      DimacsOutputSolver dimacsOutputSolver0 = new DimacsOutputSolver();
      assertEquals(0, dimacsOutputSolver0.newVar());
      assertEquals(0, dimacsOutputSolver0.nConstraints());
      assertEquals(0, dimacsOutputSolver0.nVars());
      assertEquals(0L, dimacsOutputSolver0.getTimeoutMs());
      assertEquals("", dimacsOutputSolver0.getLogPrefix());
      assertFalse(dimacsOutputSolver0.isDBSimplificationAllowed());
      assertFalse(dimacsOutputSolver0.isVerbose());
      assertFalse(dimacsOutputSolver0.isSolverKeptHot());
      assertEquals(0, dimacsOutputSolver0.realNumberOfVariables());
      assertEquals(0, dimacsOutputSolver0.getTimeout());
      assertNotNull(dimacsOutputSolver0);
      
      Binary binary0 = new Binary();
      assertNotNull(binary0);
      
      // Undeclared exception!
      try { 
        binary0.addAtMost(dimacsOutputSolver0, (IVecInt) null, 65535);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.tools.encoding.Binary", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Binary binary0 = new Binary();
      assertNotNull(binary0);
      
      VecInt vecInt0 = new VecInt(0);
      assertEquals(0, vecInt0.size());
      assertTrue(vecInt0.isEmpty());
      assertNotNull(vecInt0);
      
      DimacsOutputSolver dimacsOutputSolver0 = new DimacsOutputSolver();
      assertEquals("", dimacsOutputSolver0.getLogPrefix());
      assertFalse(dimacsOutputSolver0.isDBSimplificationAllowed());
      assertEquals(0, dimacsOutputSolver0.nConstraints());
      assertEquals(0, dimacsOutputSolver0.getTimeout());
      assertFalse(dimacsOutputSolver0.isVerbose());
      assertEquals(0, dimacsOutputSolver0.realNumberOfVariables());
      assertEquals(0L, dimacsOutputSolver0.getTimeoutMs());
      assertFalse(dimacsOutputSolver0.isSolverKeptHot());
      assertEquals(0, dimacsOutputSolver0.newVar());
      assertEquals(0, dimacsOutputSolver0.nVars());
      assertNotNull(dimacsOutputSolver0);
      
      // Undeclared exception!
      try { 
        binary0.addAtMost(dimacsOutputSolver0, vecInt0, (-1));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.tools.encoding.Binary", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Binary binary0 = new Binary();
      assertNotNull(binary0);
      
      PercentLengthLearning<ClausalDataStructureWL> percentLengthLearning0 = new PercentLengthLearning<ClausalDataStructureWL>();
      assertEquals(10, percentLengthLearning0.getLimit());
      assertNotNull(percentLengthLearning0);
      
      ClausalDataStructureWL clausalDataStructureWL0 = new ClausalDataStructureWL();
      assertNotNull(clausalDataStructureWL0);
      
      RSATLastLearnedClausesPhaseSelectionStrategy rSATLastLearnedClausesPhaseSelectionStrategy0 = new RSATLastLearnedClausesPhaseSelectionStrategy();
      assertEquals("lightweight component caching from RSAT inverting phase for variables at conflict decision level", rSATLastLearnedClausesPhaseSelectionStrategy0.toString());
      assertNotNull(rSATLastLearnedClausesPhaseSelectionStrategy0);
      
      LevelBasedVarOrderHeap levelBasedVarOrderHeap0 = new LevelBasedVarOrderHeap(rSATLastLearnedClausesPhaseSelectionStrategy0);
      assertEquals("lightweight component caching from RSAT inverting phase for variables at conflict decision level", rSATLastLearnedClausesPhaseSelectionStrategy0.toString());
      assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
      assertNotNull(levelBasedVarOrderHeap0);
      
      Glucose21Restarts glucose21Restarts0 = new Glucose21Restarts();
      assertEquals("Glucose 2.1 dynamic restart strategy", glucose21Restarts0.toString());
      assertEquals(0L, glucose21Restarts0.nextRestartNumberOfConflict());
      assertNotNull(glucose21Restarts0);
      
      Solver<ClausalDataStructureWL> solver0 = new Solver<ClausalDataStructureWL>(percentLengthLearning0, clausalDataStructureWL0, levelBasedVarOrderHeap0, glucose21Restarts0);
      assertEquals(10, percentLengthLearning0.getLimit());
      assertEquals("lightweight component caching from RSAT inverting phase for variables at conflict decision level", rSATLastLearnedClausesPhaseSelectionStrategy0.toString());
      assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
      assertEquals("Glucose 2.1 dynamic restart strategy", glucose21Restarts0.toString());
      assertEquals(0L, glucose21Restarts0.nextRestartNumberOfConflict());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(0, solver0.nConstraints());
      assertEquals(2147483, solver0.getTimeout());
      assertEquals(0, solver0.realNumberOfVariables());
      assertEquals(0, solver0.decisionLevel());
      assertEquals(0, solver0.nVars());
      assertEquals("c ", solver0.getLogPrefix());
      assertEquals(0, solver0.currentDecisionLevel());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertFalse(solver0.isVerbose());
      assertEquals(0, solver0.getPropagationLevel());
      assertNotNull(solver0);
      
      int[] intArray0 = new int[9];
      VecInt vecInt0 = new VecInt(intArray0);
      assertEquals(0, vecInt0.last());
      assertEquals(9, vecInt0.size());
      assertFalse(vecInt0.isEmpty());
      assertArrayEquals(new int[] {0, 0, 0, 0, 0, 0, 0, 0, 0}, intArray0);
      assertEquals(9, intArray0.length);
      assertNotNull(vecInt0);
      
      AbstractMinimalModel abstractMinimalModel0 = new AbstractMinimalModel(solver0, vecInt0);
      assertEquals(10, percentLengthLearning0.getLimit());
      assertEquals("lightweight component caching from RSAT inverting phase for variables at conflict decision level", rSATLastLearnedClausesPhaseSelectionStrategy0.toString());
      assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
      assertEquals("Glucose 2.1 dynamic restart strategy", glucose21Restarts0.toString());
      assertEquals(0L, glucose21Restarts0.nextRestartNumberOfConflict());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(0, solver0.nConstraints());
      assertEquals(2147483, solver0.getTimeout());
      assertEquals(0, solver0.realNumberOfVariables());
      assertEquals(0, solver0.decisionLevel());
      assertEquals(0, solver0.nVars());
      assertEquals("c ", solver0.getLogPrefix());
      assertEquals(0, solver0.currentDecisionLevel());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertFalse(solver0.isVerbose());
      assertEquals(0, solver0.getPropagationLevel());
      assertEquals(0, vecInt0.last());
      assertEquals(9, vecInt0.size());
      assertFalse(vecInt0.isEmpty());
      assertArrayEquals(new int[] {0, 0, 0, 0, 0, 0, 0, 0, 0}, intArray0);
      assertEquals(9, intArray0.length);
      assertNotNull(abstractMinimalModel0);
      
      // Undeclared exception!
      try { 
        binary0.addAtMost(abstractMinimalModel0, vecInt0, 0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 0 is not a valid variable identifier
         //
         verifyException("org.sat4j.minisat.core.Solver", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Binary binary0 = new Binary();
      assertNotNull(binary0);
      
      DimacsOutputSolver dimacsOutputSolver0 = new DimacsOutputSolver();
      assertEquals(0, dimacsOutputSolver0.realNumberOfVariables());
      assertEquals(0, dimacsOutputSolver0.getTimeout());
      assertFalse(dimacsOutputSolver0.isVerbose());
      assertEquals(0, dimacsOutputSolver0.nConstraints());
      assertFalse(dimacsOutputSolver0.isSolverKeptHot());
      assertEquals(0, dimacsOutputSolver0.nVars());
      assertEquals(0L, dimacsOutputSolver0.getTimeoutMs());
      assertFalse(dimacsOutputSolver0.isDBSimplificationAllowed());
      assertEquals(0, dimacsOutputSolver0.newVar());
      assertEquals("", dimacsOutputSolver0.getLogPrefix());
      assertNotNull(dimacsOutputSolver0);
      
      VecInt vecInt0 = new VecInt(10, 10);
      assertFalse(vecInt0.isEmpty());
      assertEquals(10, vecInt0.last());
      assertEquals(10, vecInt0.size());
      assertNotNull(vecInt0);
      
      IConstr iConstr0 = binary0.addAtMost(dimacsOutputSolver0, vecInt0, 10);
      assertEquals(0, dimacsOutputSolver0.getTimeout());
      assertEquals(140, dimacsOutputSolver0.nVars());
      assertFalse(dimacsOutputSolver0.isVerbose());
      assertEquals(0, dimacsOutputSolver0.nConstraints());
      assertEquals(140, dimacsOutputSolver0.realNumberOfVariables());
      assertFalse(dimacsOutputSolver0.isSolverKeptHot());
      assertEquals(0L, dimacsOutputSolver0.getTimeoutMs());
      assertFalse(dimacsOutputSolver0.isDBSimplificationAllowed());
      assertEquals(0, dimacsOutputSolver0.newVar());
      assertEquals("", dimacsOutputSolver0.getLogPrefix());
      assertFalse(vecInt0.isEmpty());
      assertEquals(10, vecInt0.last());
      assertEquals(10, vecInt0.size());
      assertFalse(iConstr0.canBePropagatedMultipleTimes());
      assertEquals(0.0, iConstr0.getActivity(), 0.01);
      assertEquals(50, iConstr0.size());
      assertNotNull(iConstr0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Binary binary0 = new Binary();
      assertNotNull(binary0);
      
      VecInt vecInt0 = new VecInt(0, (-220));
      assertTrue(vecInt0.isEmpty());
      assertEquals(0, vecInt0.size());
      assertNotNull(vecInt0);
      
      IVecInt iVecInt0 = vecInt0.push((-220));
      assertSame(vecInt0, iVecInt0);
      assertSame(iVecInt0, vecInt0);
      assertFalse(vecInt0.isEmpty());
      assertEquals((-220), vecInt0.last());
      assertEquals(1, vecInt0.size());
      assertEquals(1, iVecInt0.size());
      assertFalse(iVecInt0.isEmpty());
      assertEquals((-220), iVecInt0.last());
      assertNotNull(iVecInt0);
      
      // Undeclared exception!
      binary0.addAtMost((ISolver) null, iVecInt0, 0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Binary binary0 = new Binary();
      assertNotNull(binary0);
      
      PercentLengthLearning<ClausalDataStructureWL> percentLengthLearning0 = new PercentLengthLearning<ClausalDataStructureWL>();
      assertEquals(10, percentLengthLearning0.getLimit());
      assertNotNull(percentLengthLearning0);
      
      ClausalDataStructureWL clausalDataStructureWL0 = new ClausalDataStructureWL();
      assertNotNull(clausalDataStructureWL0);
      
      LevelBasedVarOrderHeap levelBasedVarOrderHeap0 = new LevelBasedVarOrderHeap();
      assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
      assertNotNull(levelBasedVarOrderHeap0);
      
      Glucose21Restarts glucose21Restarts0 = new Glucose21Restarts();
      assertEquals("Glucose 2.1 dynamic restart strategy", glucose21Restarts0.toString());
      assertEquals(0L, glucose21Restarts0.nextRestartNumberOfConflict());
      assertNotNull(glucose21Restarts0);
      
      Solver<ClausalDataStructureWL> solver0 = new Solver<ClausalDataStructureWL>(percentLengthLearning0, clausalDataStructureWL0, levelBasedVarOrderHeap0, glucose21Restarts0);
      assertEquals(10, percentLengthLearning0.getLimit());
      assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
      assertEquals("Glucose 2.1 dynamic restart strategy", glucose21Restarts0.toString());
      assertEquals(0L, glucose21Restarts0.nextRestartNumberOfConflict());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(0, solver0.nConstraints());
      assertEquals(0, solver0.realNumberOfVariables());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertEquals(2147483, solver0.getTimeout());
      assertEquals(0, solver0.decisionLevel());
      assertEquals(0, solver0.nVars());
      assertEquals("c ", solver0.getLogPrefix());
      assertEquals(0, solver0.getPropagationLevel());
      assertEquals(0, solver0.currentDecisionLevel());
      assertFalse(solver0.isVerbose());
      assertNotNull(solver0);
      
      VecInt vecInt0 = new VecInt(8, 759);
      assertEquals(8, vecInt0.size());
      assertEquals(759, vecInt0.last());
      assertFalse(vecInt0.isEmpty());
      assertNotNull(vecInt0);
      
      IConstr iConstr0 = binary0.addAtMostOne(solver0, vecInt0);
      assertEquals(10, percentLengthLearning0.getLimit());
      assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
      assertEquals("Glucose 2.1 dynamic restart strategy", glucose21Restarts0.toString());
      assertEquals(0L, glucose21Restarts0.nextRestartNumberOfConflict());
      assertFalse(solver0.isSolverKeptHot());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertEquals(2147483, solver0.getTimeout());
      assertEquals(0, solver0.decisionLevel());
      assertEquals("c ", solver0.getLogPrefix());
      assertEquals(0, solver0.getPropagationLevel());
      assertEquals(24, solver0.nConstraints());
      assertEquals(0, solver0.currentDecisionLevel());
      assertFalse(solver0.isVerbose());
      assertEquals(759, solver0.realNumberOfVariables());
      assertEquals(759, solver0.nVars());
      assertEquals(8, vecInt0.size());
      assertEquals(759, vecInt0.last());
      assertFalse(vecInt0.isEmpty());
      assertEquals(0.0, iConstr0.getActivity(), 0.01);
      assertEquals(24, iConstr0.size());
      assertFalse(iConstr0.canBePropagatedMultipleTimes());
      assertNotNull(iConstr0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Binary binary0 = new Binary();
      assertNotNull(binary0);
      
      PercentLengthLearning<ClausalDataStructureWL> percentLengthLearning0 = new PercentLengthLearning<ClausalDataStructureWL>();
      assertEquals(10, percentLengthLearning0.getLimit());
      assertNotNull(percentLengthLearning0);
      
      ClausalDataStructureWL clausalDataStructureWL0 = new ClausalDataStructureWL();
      assertNotNull(clausalDataStructureWL0);
      
      RSATLastLearnedClausesPhaseSelectionStrategy rSATLastLearnedClausesPhaseSelectionStrategy0 = new RSATLastLearnedClausesPhaseSelectionStrategy();
      assertEquals("lightweight component caching from RSAT inverting phase for variables at conflict decision level", rSATLastLearnedClausesPhaseSelectionStrategy0.toString());
      assertNotNull(rSATLastLearnedClausesPhaseSelectionStrategy0);
      
      LevelBasedVarOrderHeap levelBasedVarOrderHeap0 = new LevelBasedVarOrderHeap(rSATLastLearnedClausesPhaseSelectionStrategy0);
      assertEquals("lightweight component caching from RSAT inverting phase for variables at conflict decision level", rSATLastLearnedClausesPhaseSelectionStrategy0.toString());
      assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
      assertNotNull(levelBasedVarOrderHeap0);
      
      Glucose21Restarts glucose21Restarts0 = new Glucose21Restarts();
      assertEquals(0L, glucose21Restarts0.nextRestartNumberOfConflict());
      assertEquals("Glucose 2.1 dynamic restart strategy", glucose21Restarts0.toString());
      assertNotNull(glucose21Restarts0);
      
      Solver<ClausalDataStructureWL> solver0 = new Solver<ClausalDataStructureWL>(percentLengthLearning0, clausalDataStructureWL0, levelBasedVarOrderHeap0, glucose21Restarts0);
      assertEquals(10, percentLengthLearning0.getLimit());
      assertEquals("lightweight component caching from RSAT inverting phase for variables at conflict decision level", rSATLastLearnedClausesPhaseSelectionStrategy0.toString());
      assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
      assertEquals(0L, glucose21Restarts0.nextRestartNumberOfConflict());
      assertEquals("Glucose 2.1 dynamic restart strategy", glucose21Restarts0.toString());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertEquals("c ", solver0.getLogPrefix());
      assertEquals(0, solver0.nConstraints());
      assertFalse(solver0.isVerbose());
      assertEquals(0, solver0.realNumberOfVariables());
      assertEquals(0, solver0.decisionLevel());
      assertEquals(0, solver0.getPropagationLevel());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(0, solver0.nVars());
      assertEquals(0, solver0.currentDecisionLevel());
      assertEquals(2147483, solver0.getTimeout());
      assertNotNull(solver0);
      
      int[] intArray0 = new int[9];
      VecInt vecInt0 = new VecInt(intArray0);
      assertFalse(vecInt0.isEmpty());
      assertEquals(0, vecInt0.last());
      assertEquals(9, vecInt0.size());
      assertArrayEquals(new int[] {0, 0, 0, 0, 0, 0, 0, 0, 0}, intArray0);
      assertEquals(9, intArray0.length);
      assertNotNull(vecInt0);
      
      VecInt vecInt1 = new VecInt(1, 717);
      assertEquals(717, vecInt1.last());
      assertEquals(1, vecInt1.size());
      assertFalse(vecInt1.isEmpty());
      assertNotNull(vecInt1);
      assertFalse(vecInt1.equals((Object)vecInt0));
      
      SubModelIterator subModelIterator0 = new SubModelIterator(solver0, vecInt0, (-2972));
      assertEquals(10, percentLengthLearning0.getLimit());
      assertEquals("lightweight component caching from RSAT inverting phase for variables at conflict decision level", rSATLastLearnedClausesPhaseSelectionStrategy0.toString());
      assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
      assertEquals(0L, glucose21Restarts0.nextRestartNumberOfConflict());
      assertEquals("Glucose 2.1 dynamic restart strategy", glucose21Restarts0.toString());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertEquals("c ", solver0.getLogPrefix());
      assertEquals(0, solver0.nConstraints());
      assertFalse(solver0.isVerbose());
      assertEquals(0, solver0.realNumberOfVariables());
      assertEquals(0, solver0.decisionLevel());
      assertEquals(0, solver0.getPropagationLevel());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(0, solver0.nVars());
      assertEquals(0, solver0.currentDecisionLevel());
      assertEquals(2147483, solver0.getTimeout());
      assertFalse(vecInt0.isEmpty());
      assertEquals(0, vecInt0.last());
      assertEquals(9, vecInt0.size());
      assertEquals(0L, subModelIterator0.numberOfModelsFoundSoFar());
      assertArrayEquals(new int[] {0, 0, 0, 0, 0, 0, 0, 0, 0}, intArray0);
      assertEquals(9, intArray0.length);
      assertNotNull(subModelIterator0);
      assertFalse(vecInt0.equals((Object)vecInt1));
      
      IConstr iConstr0 = binary0.addAtMostOne(subModelIterator0, vecInt1);
      assertNotSame(vecInt0, vecInt1);
      assertNotSame(vecInt1, vecInt0);
      assertEquals(10, percentLengthLearning0.getLimit());
      assertEquals("lightweight component caching from RSAT inverting phase for variables at conflict decision level", rSATLastLearnedClausesPhaseSelectionStrategy0.toString());
      assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
      assertEquals(0L, glucose21Restarts0.nextRestartNumberOfConflict());
      assertEquals("Glucose 2.1 dynamic restart strategy", glucose21Restarts0.toString());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertEquals("c ", solver0.getLogPrefix());
      assertEquals(0, solver0.nConstraints());
      assertFalse(solver0.isVerbose());
      assertEquals(0, solver0.realNumberOfVariables());
      assertEquals(0, solver0.decisionLevel());
      assertEquals(0, solver0.getPropagationLevel());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(0, solver0.nVars());
      assertEquals(0, solver0.currentDecisionLevel());
      assertEquals(2147483, solver0.getTimeout());
      assertFalse(vecInt0.isEmpty());
      assertEquals(0, vecInt0.last());
      assertEquals(9, vecInt0.size());
      assertEquals(717, vecInt1.last());
      assertEquals(1, vecInt1.size());
      assertFalse(vecInt1.isEmpty());
      assertEquals(0L, subModelIterator0.numberOfModelsFoundSoFar());
      assertFalse(iConstr0.canBePropagatedMultipleTimes());
      assertEquals(0.0, iConstr0.getActivity(), 0.01);
      assertEquals(0, iConstr0.size());
      assertArrayEquals(new int[] {0, 0, 0, 0, 0, 0, 0, 0, 0}, intArray0);
      assertEquals(9, intArray0.length);
      assertNotNull(iConstr0);
      assertFalse(vecInt0.equals((Object)vecInt1));
      assertFalse(vecInt1.equals((Object)vecInt0));
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Binary binary0 = new Binary();
      assertNotNull(binary0);
      
      VecInt vecInt0 = new VecInt(0, 0);
      assertTrue(vecInt0.isEmpty());
      assertEquals(0, vecInt0.size());
      assertNotNull(vecInt0);
      
      IVecInt iVecInt0 = vecInt0.push(0);
      assertSame(vecInt0, iVecInt0);
      assertSame(iVecInt0, vecInt0);
      assertEquals(0, vecInt0.last());
      assertEquals(1, vecInt0.size());
      assertFalse(vecInt0.isEmpty());
      assertEquals(0, iVecInt0.last());
      assertEquals(1, iVecInt0.size());
      assertFalse(iVecInt0.isEmpty());
      assertNotNull(iVecInt0);
      
      DimacsOutputSolver dimacsOutputSolver0 = new DimacsOutputSolver();
      assertFalse(dimacsOutputSolver0.isSolverKeptHot());
      assertEquals(0, dimacsOutputSolver0.newVar());
      assertEquals(0, dimacsOutputSolver0.nVars());
      assertFalse(dimacsOutputSolver0.isVerbose());
      assertFalse(dimacsOutputSolver0.isDBSimplificationAllowed());
      assertEquals("", dimacsOutputSolver0.getLogPrefix());
      assertEquals(0L, dimacsOutputSolver0.getTimeoutMs());
      assertEquals(0, dimacsOutputSolver0.nConstraints());
      assertEquals(0, dimacsOutputSolver0.realNumberOfVariables());
      assertEquals(0, dimacsOutputSolver0.getTimeout());
      assertNotNull(dimacsOutputSolver0);
      
      // Undeclared exception!
      binary0.addExactly(dimacsOutputSolver0, iVecInt0, 0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Binary binary0 = new Binary();
      GateTranslator gateTranslator0 = mock(GateTranslator.class, new ViolatedAssumptionAnswer());
      doReturn((IConstr) null, (IConstr) null, (IConstr) null, (IConstr) null, (IConstr) null).when(gateTranslator0).addClause(any(org.sat4j.specs.IVecInt.class));
      doReturn(0, 0, 0, 0, 0).when(gateTranslator0).nextFreeVarId(anyBoolean());
      ClausalCardinalitiesDecorator<GateTranslator> clausalCardinalitiesDecorator0 = new ClausalCardinalitiesDecorator<GateTranslator>(gateTranslator0);
      VecInt vecInt0 = new VecInt(3961, 0);
      SubModelIterator subModelIterator0 = new SubModelIterator(clausalCardinalitiesDecorator0, vecInt0, 0);
      // Undeclared exception!
      binary0.addAtMostOne(subModelIterator0, vecInt0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Binary binary0 = new Binary();
      DimacsOutputSolver dimacsOutputSolver0 = new DimacsOutputSolver();
      VecInt vecInt0 = new VecInt(10, 10);
      binary0.addExactlyOne(dimacsOutputSolver0, vecInt0);
      assertEquals(4, dimacsOutputSolver0.nVars());
      assertEquals(4, dimacsOutputSolver0.realNumberOfVariables());
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Binary binary0 = new Binary();
      DimacsOutputSolver dimacsOutputSolver0 = new DimacsOutputSolver();
      VecInt vecInt0 = new VecInt(1528, 10);
      // Undeclared exception!
      binary0.addExactlyOne(dimacsOutputSolver0, vecInt0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Binary binary0 = new Binary();
      VecInt vecInt0 = new VecInt(0, 0);
      DimacsOutputSolver dimacsOutputSolver0 = new DimacsOutputSolver();
      // Undeclared exception!
      try { 
        binary0.addExactly(dimacsOutputSolver0, vecInt0, 0);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.tools.encoding.Binary", e);
      }
  }
}
