/*
 * This file was automatically generated by EvoSuite
 * Tue Feb 19 15:53:49 GMT 2019
 */

package org.sat4j.minisat.constraints.cnf;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.NoSuchElementException;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;
import org.sat4j.core.ReadOnlyVec;
import org.sat4j.core.Vec;
import org.sat4j.core.VecInt;
import org.sat4j.minisat.constraints.CardinalityDataStructure;
import org.sat4j.minisat.constraints.ClausalDataStructureWL;
import org.sat4j.minisat.constraints.cnf.LearntWLClause;
import org.sat4j.minisat.constraints.cnf.Lits;
import org.sat4j.minisat.constraints.cnf.OriginalWLClause;
import org.sat4j.minisat.core.ILits;
import org.sat4j.minisat.core.SearchParams;
import org.sat4j.minisat.core.Solver;
import org.sat4j.minisat.learning.ClauseOnlyLearning;
import org.sat4j.minisat.learning.PercentLengthLearning;
import org.sat4j.minisat.orders.NaturalStaticOrder;
import org.sat4j.minisat.orders.PureOrder;
import org.sat4j.minisat.restarts.ArminRestarts;
import org.sat4j.minisat.restarts.MiniSATRestarts;
import org.sat4j.specs.Constr;
import org.sat4j.specs.ILogAble;
import org.sat4j.specs.IVec;
import org.sat4j.specs.IVecInt;
import org.sat4j.specs.Propagatable;
import org.sat4j.specs.UnitPropagationListener;
import org.sat4j.specs.VarMapper;
import org.sat4j.tools.DotSearchTracing;
import org.sat4j.tools.FullClauseSelectorSolver;
import org.sat4j.tools.GroupClauseSelectorSolver;
import org.sat4j.tools.OptToSatAdapter;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class WLClause_ESTest extends WLClause_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      IVecInt iVecInt0 = VecInt.EMPTY;
      CardinalityDataStructure cardinalityDataStructure0 = new CardinalityDataStructure();
      ILits iLits0 = cardinalityDataStructure0.getVocabulary();
      LearntWLClause learntWLClause0 = new LearntWLClause(iVecInt0, iLits0);
      learntWLClause0.calcReasonOnTheFly((-4295), iVecInt0, (IVecInt) null);
      assertEquals(0.0, learntWLClause0.getActivity(), 0.01);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      IVecInt iVecInt0 = VecInt.EMPTY;
      CardinalityDataStructure cardinalityDataStructure0 = new CardinalityDataStructure();
      ILits iLits0 = cardinalityDataStructure0.getVocabulary();
      LearntWLClause learntWLClause0 = new LearntWLClause(iVecInt0, iLits0);
      learntWLClause0.rescaleBy(0.0);
      assertEquals(0.0, learntWLClause0.getActivity(), 0.01);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      ClausalDataStructureWL clausalDataStructureWL0 = new ClausalDataStructureWL();
      ILits iLits0 = clausalDataStructureWL0.getVocabulary();
      UnitPropagationListener unitPropagationListener0 = mock(UnitPropagationListener.class, new ViolatedAssumptionAnswer());
      VecInt vecInt0 = new VecInt(1, 1);
      LearntWLClause learntWLClause0 = new LearntWLClause(vecInt0, iLits0);
      // Undeclared exception!
      try { 
        learntWLClause0.propagate(unitPropagationListener0, (-641));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      PercentLengthLearning<ClausalDataStructureWL> percentLengthLearning0 = new PercentLengthLearning<ClausalDataStructureWL>(0);
      ClausalDataStructureWL clausalDataStructureWL0 = new ClausalDataStructureWL();
      NaturalStaticOrder naturalStaticOrder0 = new NaturalStaticOrder();
      ArminRestarts arminRestarts0 = new ArminRestarts();
      Solver<ClausalDataStructureWL> solver0 = new Solver<ClausalDataStructureWL>(percentLengthLearning0, clausalDataStructureWL0, naturalStaticOrder0, arminRestarts0);
      Vec<Propagatable> vec0 = new Vec<Propagatable>(0);
      ILits iLits0 = mock(ILits.class, new ViolatedAssumptionAnswer());
      doReturn(vec0).when(iLits0).watches(anyInt());
      VecInt vecInt0 = new VecInt(81, 81);
      OriginalWLClause originalWLClause0 = OriginalWLClause.brandNewClause(solver0, iLits0, vecInt0);
      // Undeclared exception!
      try { 
        originalWLClause0.remove(solver0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.sat4j.core.Vec", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      PercentLengthLearning<ClausalDataStructureWL> percentLengthLearning0 = new PercentLengthLearning<ClausalDataStructureWL>(0);
      ClausalDataStructureWL clausalDataStructureWL0 = new ClausalDataStructureWL();
      NaturalStaticOrder naturalStaticOrder0 = new NaturalStaticOrder();
      ArminRestarts arminRestarts0 = new ArminRestarts();
      Solver<ClausalDataStructureWL> solver0 = new Solver<ClausalDataStructureWL>(percentLengthLearning0, clausalDataStructureWL0, naturalStaticOrder0, arminRestarts0);
      ILits iLits0 = mock(ILits.class, new ViolatedAssumptionAnswer());
      doReturn(true, false).when(iLits0).isFalsified(anyInt());
      VecInt vecInt0 = new VecInt(81, 81);
      OriginalWLClause originalWLClause0 = OriginalWLClause.brandNewClause(solver0, iLits0, vecInt0);
      // Undeclared exception!
      try { 
        originalWLClause0.calcReason((-1253), vecInt0);
        fail("Expecting exception: AssertionError");
      
      } catch(AssertionError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      VecInt vecInt0 = new VecInt();
      vecInt0.insertFirst(21);
      Lits lits0 = new Lits();
      LearntWLClause learntWLClause0 = new LearntWLClause(vecInt0, lits0);
      DotSearchTracing<OriginalWLClause> dotSearchTracing0 = new DotSearchTracing<OriginalWLClause>("S^nZ97");
      String string0 = learntWLClause0.toString((VarMapper) dotSearchTracing0);
      assertEquals(0.0, learntWLClause0.getActivity(), 0.01);
      assertEquals("-10[?] ", string0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      VecInt vecInt0 = new VecInt();
      Lits lits0 = new Lits();
      LearntWLClause learntWLClause0 = new LearntWLClause(vecInt0, lits0);
      learntWLClause0.toString();
      assertEquals(0.0, learntWLClause0.getActivity(), 0.01);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      IVecInt iVecInt0 = VecInt.EMPTY;
      CardinalityDataStructure cardinalityDataStructure0 = new CardinalityDataStructure();
      ILits iLits0 = cardinalityDataStructure0.getVocabulary();
      OriginalWLClause originalWLClause0 = new OriginalWLClause(iVecInt0, iLits0);
      Constr constr0 = originalWLClause0.toConstraint();
      assertEquals(0.0, constr0.getActivity(), 0.01);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      UnitPropagationListener unitPropagationListener0 = mock(UnitPropagationListener.class, new ViolatedAssumptionAnswer());
      ILits iLits0 = mock(ILits.class, new ViolatedAssumptionAnswer());
      VecInt vecInt0 = new VecInt(2, 2);
      OriginalWLClause originalWLClause0 = OriginalWLClause.brandNewClause(unitPropagationListener0, iLits0, vecInt0);
      originalWLClause0.size();
      assertEquals(0.0, originalWLClause0.getActivity(), 0.01);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      VecInt vecInt0 = new VecInt();
      Lits lits0 = new Lits();
      LearntWLClause learntWLClause0 = new LearntWLClause(vecInt0, lits0);
      learntWLClause0.getLits();
      assertEquals(0.0, learntWLClause0.getActivity(), 0.01);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      ClausalDataStructureWL clausalDataStructureWL0 = new ClausalDataStructureWL();
      ILits iLits0 = clausalDataStructureWL0.getVocabulary();
      IVecInt iVecInt0 = mock(IVecInt.class, new ViolatedAssumptionAnswer());
      doReturn(1912, 0).when(iVecInt0).size();
      LearntWLClause learntWLClause0 = new LearntWLClause(iVecInt0, iLits0);
      learntWLClause0.get(0);
      assertEquals(0.0, learntWLClause0.getActivity(), 0.01);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      PercentLengthLearning<ClausalDataStructureWL> percentLengthLearning0 = new PercentLengthLearning<ClausalDataStructureWL>(0);
      ClausalDataStructureWL clausalDataStructureWL0 = new ClausalDataStructureWL();
      NaturalStaticOrder naturalStaticOrder0 = new NaturalStaticOrder();
      ArminRestarts arminRestarts0 = new ArminRestarts();
      Solver<ClausalDataStructureWL> solver0 = new Solver<ClausalDataStructureWL>(percentLengthLearning0, clausalDataStructureWL0, naturalStaticOrder0, arminRestarts0);
      ILits iLits0 = mock(ILits.class, new ViolatedAssumptionAnswer());
      VecInt vecInt0 = new VecInt(2, 2);
      OriginalWLClause originalWLClause0 = OriginalWLClause.brandNewClause(solver0, iLits0, vecInt0);
      originalWLClause0.get(0);
      assertEquals(0.0, originalWLClause0.getActivity(), 0.01);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      ClausalDataStructureWL clausalDataStructureWL0 = new ClausalDataStructureWL();
      ILits iLits0 = clausalDataStructureWL0.getVocabulary();
      VecInt vecInt0 = new VecInt(1912, 1912);
      LearntWLClause learntWLClause0 = new LearntWLClause(vecInt0, iLits0);
      // Undeclared exception!
      try { 
        learntWLClause0.toString();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1912
         //
         verifyException("org.sat4j.minisat.constraints.cnf.Lits", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Lits lits0 = new Lits();
      VecInt vecInt0 = new VecInt(1499, 1499);
      OriginalWLClause originalWLClause0 = new OriginalWLClause(vecInt0, lits0);
      // Undeclared exception!
      try { 
        originalWLClause0.simplify();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      PercentLengthLearning<ClausalDataStructureWL> percentLengthLearning0 = new PercentLengthLearning<ClausalDataStructureWL>(0);
      ClausalDataStructureWL clausalDataStructureWL0 = new ClausalDataStructureWL();
      NaturalStaticOrder naturalStaticOrder0 = new NaturalStaticOrder();
      ArminRestarts arminRestarts0 = new ArminRestarts();
      Solver<ClausalDataStructureWL> solver0 = new Solver<ClausalDataStructureWL>(percentLengthLearning0, clausalDataStructureWL0, naturalStaticOrder0, arminRestarts0);
      Vec<Propagatable> vec0 = new Vec<Propagatable>();
      ILits iLits0 = mock(ILits.class, new ViolatedAssumptionAnswer());
      doReturn(vec0).when(iLits0).watches(anyInt());
      VecInt vecInt0 = new VecInt(2, 2);
      OriginalWLClause originalWLClause0 = OriginalWLClause.brandNewClause(solver0, iLits0, vecInt0);
      // Undeclared exception!
      try { 
        originalWLClause0.remove(solver0);
        fail("Expecting exception: NoSuchElementException");
      
      } catch(NoSuchElementException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.core.Vec", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      PercentLengthLearning<ClausalDataStructureWL> percentLengthLearning0 = new PercentLengthLearning<ClausalDataStructureWL>(0);
      ClausalDataStructureWL clausalDataStructureWL0 = new ClausalDataStructureWL();
      NaturalStaticOrder naturalStaticOrder0 = new NaturalStaticOrder();
      ArminRestarts arminRestarts0 = new ArminRestarts();
      Solver<ClausalDataStructureWL> solver0 = new Solver<ClausalDataStructureWL>(percentLengthLearning0, clausalDataStructureWL0, naturalStaticOrder0, arminRestarts0);
      Vec<Propagatable> vec0 = new Vec<Propagatable>(1912);
      ReadOnlyVec<Propagatable> readOnlyVec0 = new ReadOnlyVec<Propagatable>(vec0);
      ILits iLits0 = mock(ILits.class, new ViolatedAssumptionAnswer());
      doReturn(readOnlyVec0).when(iLits0).watches(anyInt());
      VecInt vecInt0 = new VecInt(2, 2);
      OriginalWLClause originalWLClause0 = OriginalWLClause.brandNewClause(solver0, iLits0, vecInt0);
      // Undeclared exception!
      try { 
        originalWLClause0.remove(solver0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.core.ReadOnlyVec", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      UnitPropagationListener unitPropagationListener0 = mock(UnitPropagationListener.class, new ViolatedAssumptionAnswer());
      ILits iLits0 = mock(ILits.class, new ViolatedAssumptionAnswer());
      doReturn((IVec) null).when(iLits0).watches(anyInt());
      VecInt vecInt0 = new VecInt(2, 2);
      OriginalWLClause originalWLClause0 = OriginalWLClause.brandNewClause(unitPropagationListener0, iLits0, vecInt0);
      ClauseOnlyLearning<ClausalDataStructureWL> clauseOnlyLearning0 = new ClauseOnlyLearning<ClausalDataStructureWL>();
      ClausalDataStructureWL clausalDataStructureWL0 = new ClausalDataStructureWL();
      SearchParams searchParams0 = new SearchParams((-2865));
      PureOrder pureOrder0 = new PureOrder((-4218));
      MiniSATRestarts miniSATRestarts0 = new MiniSATRestarts();
      ILogAble iLogAble0 = ILogAble.CONSOLE;
      Solver<ClausalDataStructureWL> solver0 = new Solver<ClausalDataStructureWL>(clauseOnlyLearning0, clausalDataStructureWL0, searchParams0, pureOrder0, miniSATRestarts0, iLogAble0);
      // Undeclared exception!
      try { 
        originalWLClause0.remove(solver0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.minisat.constraints.cnf.WLClause", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      VecInt vecInt0 = new VecInt(2, 2);
      OriginalWLClause originalWLClause0 = new OriginalWLClause(vecInt0, (ILits) null);
      // Undeclared exception!
      try { 
        originalWLClause0.locked();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.minisat.constraints.cnf.WLClause", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      VecInt vecInt0 = new VecInt();
      CardinalityDataStructure cardinalityDataStructure0 = new CardinalityDataStructure();
      ILits iLits0 = cardinalityDataStructure0.getVocabulary();
      LearntWLClause learntWLClause0 = new LearntWLClause(vecInt0, iLits0);
      // Undeclared exception!
      try { 
        learntWLClause0.locked();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.sat4j.minisat.constraints.cnf.WLClause", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      VecInt vecInt0 = new VecInt();
      Lits lits0 = new Lits();
      LearntWLClause learntWLClause0 = new LearntWLClause(vecInt0, lits0);
      // Undeclared exception!
      try { 
        learntWLClause0.hashCode();
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // / by zero
         //
         verifyException("org.sat4j.minisat.constraints.cnf.WLClause", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      IVecInt iVecInt0 = VecInt.EMPTY;
      Lits lits0 = new Lits();
      LearntWLClause learntWLClause0 = new LearntWLClause(iVecInt0, lits0);
      // Undeclared exception!
      try { 
        learntWLClause0.getAssertionLevel((IVecInt) null, 0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.minisat.constraints.cnf.WLClause", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      UnitPropagationListener unitPropagationListener0 = mock(UnitPropagationListener.class, new ViolatedAssumptionAnswer());
      ILits iLits0 = mock(ILits.class, new ViolatedAssumptionAnswer());
      VecInt vecInt0 = new VecInt(1912, 1912);
      OriginalWLClause originalWLClause0 = OriginalWLClause.brandNewClause(unitPropagationListener0, iLits0, vecInt0);
      vecInt0.shrinkTo(2121);
      // Undeclared exception!
      try { 
        originalWLClause0.getAssertionLevel(vecInt0, 1912);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      PercentLengthLearning<ClausalDataStructureWL> percentLengthLearning0 = new PercentLengthLearning<ClausalDataStructureWL>(0);
      ClausalDataStructureWL clausalDataStructureWL0 = new ClausalDataStructureWL();
      NaturalStaticOrder naturalStaticOrder0 = new NaturalStaticOrder();
      ArminRestarts arminRestarts0 = new ArminRestarts();
      Solver<ClausalDataStructureWL> solver0 = new Solver<ClausalDataStructureWL>(percentLengthLearning0, clausalDataStructureWL0, naturalStaticOrder0, arminRestarts0);
      IVecInt iVecInt0 = solver0.getOutLearnt();
      IVecInt iVecInt1 = mock(IVecInt.class, new ViolatedAssumptionAnswer());
      doReturn(1912, 0).when(iVecInt1).size();
      OriginalWLClause originalWLClause0 = new OriginalWLClause(iVecInt1, (ILits) null);
      // Undeclared exception!
      try { 
        originalWLClause0.calcReason((-2916), iVecInt0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      UnitPropagationListener unitPropagationListener0 = mock(UnitPropagationListener.class, new ViolatedAssumptionAnswer());
      ILits iLits0 = mock(ILits.class, new ViolatedAssumptionAnswer());
      doReturn(true).when(iLits0).isFalsified(anyInt());
      VecInt vecInt0 = new VecInt(2, 2);
      OriginalWLClause originalWLClause0 = OriginalWLClause.brandNewClause(unitPropagationListener0, iLits0, vecInt0);
      vecInt0.pop();
      // Undeclared exception!
      try { 
        originalWLClause0.calcReason((-4398), vecInt0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      VecInt vecInt0 = new VecInt();
      Lits lits0 = new Lits();
      LearntWLClause learntWLClause0 = new LearntWLClause(vecInt0, lits0);
      // Undeclared exception!
      try { 
        learntWLClause0.assertConstraintIfNeeded((UnitPropagationListener) null);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1
         //
         verifyException("org.sat4j.minisat.constraints.cnf.WLClause", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      VecInt vecInt0 = new VecInt();
      CardinalityDataStructure cardinalityDataStructure0 = new CardinalityDataStructure();
      ILits iLits0 = cardinalityDataStructure0.getVocabulary();
      LearntWLClause learntWLClause0 = new LearntWLClause(vecInt0, iLits0);
      // Undeclared exception!
      try { 
        learntWLClause0.assertConstraint((UnitPropagationListener) null);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.sat4j.minisat.constraints.cnf.WLClause", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      IVecInt iVecInt0 = VecInt.EMPTY;
      CardinalityDataStructure cardinalityDataStructure0 = new CardinalityDataStructure();
      ILits iLits0 = cardinalityDataStructure0.getVocabulary();
      LearntWLClause learntWLClause0 = new LearntWLClause(iVecInt0, iLits0);
      learntWLClause0.size();
      assertEquals(0.0, learntWLClause0.getActivity(), 0.01);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      VecInt vecInt0 = new VecInt();
      Lits lits0 = new Lits();
      LearntWLClause learntWLClause0 = new LearntWLClause(vecInt0, lits0);
      double double0 = learntWLClause0.getActivity();
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      UnitPropagationListener unitPropagationListener0 = mock(UnitPropagationListener.class, new ViolatedAssumptionAnswer());
      ILits iLits0 = mock(ILits.class, new ViolatedAssumptionAnswer());
      doReturn(true, true, true, true, true).when(iLits0).isFalsified(anyInt());
      VecInt vecInt0 = new VecInt(1912, 1912);
      vecInt0.push(308);
      OriginalWLClause originalWLClause0 = OriginalWLClause.brandNewClause(unitPropagationListener0, iLits0, vecInt0);
      originalWLClause0.calcReason((-4398), vecInt0);
      int int0 = originalWLClause0.getAssertionLevel(vecInt0, 1912);
      assertFalse(vecInt0.isEmpty());
      assertEquals(1910, int0);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      VecInt vecInt0 = new VecInt();
      Lits lits0 = new Lits();
      LearntWLClause learntWLClause0 = new LearntWLClause(vecInt0, lits0);
      int int0 = learntWLClause0.getAssertionLevel(vecInt0, (-227));
      assertEquals(0.0, learntWLClause0.getActivity(), 0.01);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      UnitPropagationListener unitPropagationListener0 = mock(UnitPropagationListener.class, new ViolatedAssumptionAnswer());
      ILits iLits0 = mock(ILits.class, new ViolatedAssumptionAnswer());
      doReturn(true).when(iLits0).isSatisfied(anyInt());
      VecInt vecInt0 = new VecInt(2, 2);
      OriginalWLClause originalWLClause0 = OriginalWLClause.brandNewClause(unitPropagationListener0, iLits0, vecInt0);
      boolean boolean0 = originalWLClause0.isSatisfied();
      assertTrue(boolean0);
      assertEquals(0.0, originalWLClause0.getActivity(), 0.01);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      PercentLengthLearning<ClausalDataStructureWL> percentLengthLearning0 = new PercentLengthLearning<ClausalDataStructureWL>(0);
      ClausalDataStructureWL clausalDataStructureWL0 = new ClausalDataStructureWL();
      NaturalStaticOrder naturalStaticOrder0 = new NaturalStaticOrder();
      ArminRestarts arminRestarts0 = new ArminRestarts();
      Solver<ClausalDataStructureWL> solver0 = new Solver<ClausalDataStructureWL>(percentLengthLearning0, clausalDataStructureWL0, naturalStaticOrder0, arminRestarts0);
      ILits iLits0 = mock(ILits.class, new ViolatedAssumptionAnswer());
      doReturn(false, false).when(iLits0).isSatisfied(anyInt());
      VecInt vecInt0 = new VecInt(2, 2);
      OriginalWLClause originalWLClause0 = OriginalWLClause.brandNewClause(solver0, iLits0, vecInt0);
      boolean boolean0 = originalWLClause0.isSatisfied();
      assertFalse(boolean0);
      assertEquals(0.0, originalWLClause0.getActivity(), 0.01);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      ClausalDataStructureWL clausalDataStructureWL0 = new ClausalDataStructureWL();
      ILits iLits0 = clausalDataStructureWL0.getVocabulary();
      VecInt vecInt0 = new VecInt(2, 2);
      LearntWLClause learntWLClause0 = new LearntWLClause(vecInt0, iLits0);
      learntWLClause0.hashCode();
      assertEquals(0.0, learntWLClause0.getActivity(), 0.01);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Lits lits0 = new Lits();
      VecInt vecInt0 = new VecInt(17, 17);
      LearntWLClause learntWLClause0 = new LearntWLClause(vecInt0, lits0);
      LearntWLClause learntWLClause1 = new LearntWLClause(vecInt0, lits0);
      boolean boolean0 = learntWLClause0.equals(learntWLClause1);
      assertFalse(learntWLClause1.equals((Object)learntWLClause0));
      assertEquals(0.0, learntWLClause1.getActivity(), 0.01);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      ClausalDataStructureWL clausalDataStructureWL0 = new ClausalDataStructureWL();
      ILits iLits0 = clausalDataStructureWL0.getVocabulary();
      VecInt vecInt0 = new VecInt(1, 1);
      LearntWLClause learntWLClause0 = new LearntWLClause(vecInt0, iLits0);
      Object object0 = new Object();
      boolean boolean0 = learntWLClause0.equals(object0);
      assertEquals(0.0, learntWLClause0.getActivity(), 0.01);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      VecInt vecInt0 = new VecInt();
      Lits lits0 = new Lits();
      LearntWLClause learntWLClause0 = new LearntWLClause(vecInt0, lits0);
      boolean boolean0 = learntWLClause0.equals((Object) null);
      assertFalse(boolean0);
      assertEquals(0.0, learntWLClause0.getActivity(), 0.01);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      VecInt vecInt0 = new VecInt();
      Lits lits0 = new Lits();
      LearntWLClause learntWLClause0 = new LearntWLClause(vecInt0, lits0);
      boolean boolean0 = learntWLClause0.equals(learntWLClause0);
      assertTrue(boolean0);
      assertEquals(0.0, learntWLClause0.getActivity(), 0.01);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      UnitPropagationListener unitPropagationListener0 = mock(UnitPropagationListener.class, new ViolatedAssumptionAnswer());
      ILits iLits0 = mock(ILits.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(iLits0).isFalsified(anyInt());
      VecInt vecInt0 = new VecInt(2, (-3760));
      LearntWLClause learntWLClause0 = new LearntWLClause(vecInt0, iLits0);
      learntWLClause0.assertConstraintIfNeeded(unitPropagationListener0);
      assertEquals(0.0, learntWLClause0.getActivity(), 0.01);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      ClausalDataStructureWL clausalDataStructureWL0 = new ClausalDataStructureWL();
      ILits iLits0 = clausalDataStructureWL0.getVocabulary();
      UnitPropagationListener unitPropagationListener0 = mock(UnitPropagationListener.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(unitPropagationListener0).enqueue(anyInt() , any(org.sat4j.specs.Constr.class));
      VecInt vecInt0 = new VecInt(1, 1);
      LearntWLClause learntWLClause0 = new LearntWLClause(vecInt0, iLits0);
      // Undeclared exception!
      try { 
        learntWLClause0.assertConstraint(unitPropagationListener0);
        fail("Expecting exception: AssertionError");
      
      } catch(AssertionError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      PercentLengthLearning<ClausalDataStructureWL> percentLengthLearning0 = new PercentLengthLearning<ClausalDataStructureWL>(0);
      ClausalDataStructureWL clausalDataStructureWL0 = new ClausalDataStructureWL();
      NaturalStaticOrder naturalStaticOrder0 = new NaturalStaticOrder();
      ArminRestarts arminRestarts0 = new ArminRestarts();
      Solver<ClausalDataStructureWL> solver0 = new Solver<ClausalDataStructureWL>(percentLengthLearning0, clausalDataStructureWL0, naturalStaticOrder0, arminRestarts0);
      ILits iLits0 = mock(ILits.class, new ViolatedAssumptionAnswer());
      VecInt vecInt0 = new VecInt(81, 81);
      OriginalWLClause originalWLClause0 = OriginalWLClause.brandNewClause(solver0, iLits0, vecInt0);
      originalWLClause0.assertConstraint(solver0);
      assertEquals(0.0, originalWLClause0.getActivity(), 0.01);
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      ClausalDataStructureWL clausalDataStructureWL0 = new ClausalDataStructureWL();
      ILits iLits0 = clausalDataStructureWL0.getVocabulary();
      VecInt vecInt0 = new VecInt(1912, 1912);
      LearntWLClause learntWLClause0 = new LearntWLClause(vecInt0, iLits0);
      DotSearchTracing<OriginalWLClause> dotSearchTracing0 = new DotSearchTracing<OriginalWLClause>("qGo");
      // Undeclared exception!
      try { 
        learntWLClause0.toString((VarMapper) dotSearchTracing0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1912
         //
         verifyException("org.sat4j.minisat.constraints.cnf.Lits", e);
      }
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      VecInt vecInt0 = new VecInt();
      Lits lits0 = new Lits();
      DotSearchTracing<OriginalWLClause> dotSearchTracing0 = new DotSearchTracing<OriginalWLClause>(";RtriEc'#SzKO*3}");
      LearntWLClause learntWLClause0 = new LearntWLClause(vecInt0, lits0);
      learntWLClause0.toString((VarMapper) dotSearchTracing0);
      assertEquals(0.0, learntWLClause0.getActivity(), 0.01);
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      ClausalDataStructureWL clausalDataStructureWL0 = new ClausalDataStructureWL();
      ILits iLits0 = clausalDataStructureWL0.getVocabulary();
      VecInt vecInt0 = new VecInt(1, 1);
      LearntWLClause learntWLClause0 = new LearntWLClause(vecInt0, iLits0);
      String string0 = learntWLClause0.toString();
      assertEquals(0.0, learntWLClause0.getActivity(), 0.01);
      assertEquals("-0[?] ", string0);
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      VecInt vecInt0 = new VecInt();
      Lits lits0 = new Lits();
      LearntWLClause learntWLClause0 = new LearntWLClause(vecInt0, lits0);
      learntWLClause0.toString((VarMapper) null);
      assertEquals(0.0, learntWLClause0.getActivity(), 0.01);
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      UnitPropagationListener unitPropagationListener0 = mock(UnitPropagationListener.class, new ViolatedAssumptionAnswer());
      ILits iLits0 = mock(ILits.class, new ViolatedAssumptionAnswer());
      doReturn((Constr) null).when(iLits0).getReason(anyInt());
      VecInt vecInt0 = new VecInt(1912, 1912);
      OriginalWLClause originalWLClause0 = OriginalWLClause.brandNewClause(unitPropagationListener0, iLits0, vecInt0);
      boolean boolean0 = originalWLClause0.locked();
      assertFalse(boolean0);
      assertEquals(0.0, originalWLClause0.getActivity(), 0.01);
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      ClausalDataStructureWL clausalDataStructureWL0 = new ClausalDataStructureWL();
      ILits iLits0 = clausalDataStructureWL0.getVocabulary();
      UnitPropagationListener unitPropagationListener0 = mock(UnitPropagationListener.class, new ViolatedAssumptionAnswer());
      VecInt vecInt0 = new VecInt(13, 13);
      LearntWLClause learntWLClause0 = new LearntWLClause(vecInt0, iLits0);
      // Undeclared exception!
      try { 
        learntWLClause0.propagate(unitPropagationListener0, 13);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.minisat.constraints.cnf.Lits", e);
      }
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      ClausalDataStructureWL clausalDataStructureWL0 = new ClausalDataStructureWL();
      SearchParams searchParams0 = new SearchParams();
      UnitPropagationListener unitPropagationListener0 = mock(UnitPropagationListener.class, new ViolatedAssumptionAnswer());
      ILits iLits0 = mock(ILits.class, new ViolatedAssumptionAnswer());
      doReturn(true, false).when(iLits0).isFalsified(anyInt());
      doReturn(false).when(iLits0).isSatisfied(anyInt());
      VecInt vecInt0 = new VecInt(1912, 1912);
      OriginalWLClause originalWLClause0 = OriginalWLClause.brandNewClause(unitPropagationListener0, iLits0, vecInt0);
      ClauseOnlyLearning<ClausalDataStructureWL> clauseOnlyLearning0 = new ClauseOnlyLearning<ClausalDataStructureWL>();
      PureOrder pureOrder0 = new PureOrder((-2865));
      MiniSATRestarts miniSATRestarts0 = new MiniSATRestarts();
      ILogAble iLogAble0 = ILogAble.CONSOLE;
      Solver<ClausalDataStructureWL> solver0 = new Solver<ClausalDataStructureWL>(clauseOnlyLearning0, clausalDataStructureWL0, searchParams0, pureOrder0, miniSATRestarts0, iLogAble0);
      originalWLClause0.propagate(solver0, 1912);
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      PercentLengthLearning<ClausalDataStructureWL> percentLengthLearning0 = new PercentLengthLearning<ClausalDataStructureWL>(0);
      ClausalDataStructureWL clausalDataStructureWL0 = new ClausalDataStructureWL();
      NaturalStaticOrder naturalStaticOrder0 = new NaturalStaticOrder();
      ArminRestarts arminRestarts0 = new ArminRestarts();
      Solver<ClausalDataStructureWL> solver0 = new Solver<ClausalDataStructureWL>(percentLengthLearning0, clausalDataStructureWL0, naturalStaticOrder0, arminRestarts0);
      ILits iLits0 = mock(ILits.class, new ViolatedAssumptionAnswer());
      doReturn(true).when(iLits0).isSatisfied(anyInt());
      VecInt vecInt0 = new VecInt(2, 2);
      OriginalWLClause originalWLClause0 = OriginalWLClause.brandNewClause(solver0, iLits0, vecInt0);
      boolean boolean0 = originalWLClause0.propagate(solver0, (-1754));
      assertTrue(boolean0);
      assertEquals(0, solver0.getPropagationLevel());
      assertEquals(0.0, originalWLClause0.getActivity(), 0.01);
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      Lits lits0 = new Lits();
      VecInt vecInt0 = new VecInt(17, 17);
      LearntWLClause learntWLClause0 = new LearntWLClause(vecInt0, lits0);
      boolean boolean0 = learntWLClause0.simplify();
      assertFalse(boolean0);
      assertEquals(0.0, learntWLClause0.getActivity(), 0.01);
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      Lits lits0 = new Lits();
      VecInt vecInt0 = new VecInt(17, 17);
      LearntWLClause learntWLClause0 = new LearntWLClause(vecInt0, lits0);
      // Undeclared exception!
      try { 
        learntWLClause0.calcReason(8, vecInt0);
        fail("Expecting exception: AssertionError");
      
      } catch(AssertionError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      PercentLengthLearning<ClausalDataStructureWL> percentLengthLearning0 = new PercentLengthLearning<ClausalDataStructureWL>(0);
      ClausalDataStructureWL clausalDataStructureWL0 = new ClausalDataStructureWL();
      NaturalStaticOrder naturalStaticOrder0 = new NaturalStaticOrder();
      ArminRestarts arminRestarts0 = new ArminRestarts();
      Solver<ClausalDataStructureWL> solver0 = new Solver<ClausalDataStructureWL>(percentLengthLearning0, clausalDataStructureWL0, naturalStaticOrder0, arminRestarts0);
      ILits iLits0 = mock(ILits.class, new ViolatedAssumptionAnswer());
      doReturn(true).when(iLits0).isFalsified(anyInt());
      VecInt vecInt0 = new VecInt(2, 2);
      OriginalWLClause originalWLClause0 = OriginalWLClause.brandNewClause(solver0, iLits0, vecInt0);
      originalWLClause0.calcReason((-4398), vecInt0);
      int int0 = originalWLClause0.getAssertionLevel(vecInt0, 1912);
      assertFalse(vecInt0.isEmpty());
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      VecInt vecInt0 = new VecInt();
      CardinalityDataStructure cardinalityDataStructure0 = new CardinalityDataStructure();
      ILits iLits0 = cardinalityDataStructure0.getVocabulary();
      LearntWLClause learntWLClause0 = new LearntWLClause(vecInt0, iLits0);
      learntWLClause0.calcReason((-1), vecInt0);
      assertEquals(0.0, learntWLClause0.getActivity(), 0.01);
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      ClausalDataStructureWL clausalDataStructureWL0 = new ClausalDataStructureWL();
      ILits iLits0 = clausalDataStructureWL0.getVocabulary();
      IVecInt iVecInt0 = mock(IVecInt.class, new ViolatedAssumptionAnswer());
      doReturn(1912, 33).when(iVecInt0).size();
      LearntWLClause learntWLClause0 = null;
      try {
        learntWLClause0 = new LearntWLClause(iVecInt0, iLits0);
        fail("Expecting exception: AssertionError");
      
      } catch(AssertionError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      IVecInt iVecInt0 = VecInt.EMPTY;
      CardinalityDataStructure cardinalityDataStructure0 = new CardinalityDataStructure();
      ILits iLits0 = cardinalityDataStructure0.getVocabulary();
      LearntWLClause learntWLClause0 = new LearntWLClause(iVecInt0, iLits0);
      Constr constr0 = learntWLClause0.toConstraint();
      assertEquals(0.0, constr0.getActivity(), 0.01);
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      IVecInt iVecInt0 = VecInt.EMPTY;
      CardinalityDataStructure cardinalityDataStructure0 = new CardinalityDataStructure();
      ILits iLits0 = cardinalityDataStructure0.getVocabulary();
      LearntWLClause learntWLClause0 = new LearntWLClause(iVecInt0, iLits0);
      learntWLClause0.getVocabulary();
      assertEquals(0.0, learntWLClause0.getActivity(), 0.01);
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      IVecInt iVecInt0 = VecInt.EMPTY;
      Lits lits0 = new Lits();
      LearntWLClause learntWLClause0 = new LearntWLClause(iVecInt0, lits0);
      boolean boolean0 = learntWLClause0.canBeSatisfiedByCountingLiterals();
      assertEquals(0.0, learntWLClause0.getActivity(), 0.01);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      IVecInt iVecInt0 = VecInt.EMPTY;
      CardinalityDataStructure cardinalityDataStructure0 = new CardinalityDataStructure();
      ILits iLits0 = cardinalityDataStructure0.getVocabulary();
      LearntWLClause learntWLClause0 = new LearntWLClause(iVecInt0, iLits0);
      int int0 = learntWLClause0.requiredNumberOfSatisfiedLiterals();
      assertEquals(0.0, learntWLClause0.getActivity(), 0.01);
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      PercentLengthLearning<ClausalDataStructureWL> percentLengthLearning0 = new PercentLengthLearning<ClausalDataStructureWL>(0);
      ClausalDataStructureWL clausalDataStructureWL0 = new ClausalDataStructureWL();
      NaturalStaticOrder naturalStaticOrder0 = new NaturalStaticOrder();
      ArminRestarts arminRestarts0 = new ArminRestarts();
      Solver<ClausalDataStructureWL> solver0 = new Solver<ClausalDataStructureWL>(percentLengthLearning0, clausalDataStructureWL0, naturalStaticOrder0, arminRestarts0);
      ILits iLits0 = mock(ILits.class, new ViolatedAssumptionAnswer());
      VecInt vecInt0 = new VecInt(2, 2);
      OriginalWLClause originalWLClause0 = OriginalWLClause.brandNewClause(solver0, iLits0, vecInt0);
      boolean boolean0 = originalWLClause0.canBePropagatedMultipleTimes();
      assertFalse(boolean0);
      assertEquals(0.0, originalWLClause0.getActivity(), 0.01);
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      GroupClauseSelectorSolver<OptToSatAdapter> groupClauseSelectorSolver0 = (GroupClauseSelectorSolver<OptToSatAdapter>) mock(GroupClauseSelectorSolver.class, new ViolatedAssumptionAnswer());
      FullClauseSelectorSolver<GroupClauseSelectorSolver<OptToSatAdapter>> fullClauseSelectorSolver0 = new FullClauseSelectorSolver<GroupClauseSelectorSolver<OptToSatAdapter>>(groupClauseSelectorSolver0, true);
      IVecInt iVecInt0 = fullClauseSelectorSolver0.getLastClause();
      LearntWLClause learntWLClause0 = new LearntWLClause(iVecInt0, (ILits) null);
      learntWLClause0.setActivity((-1.3954496223336332));
      assertEquals((-1.3954496223336332), learntWLClause0.getActivity(), 0.01);
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      PercentLengthLearning<ClausalDataStructureWL> percentLengthLearning0 = new PercentLengthLearning<ClausalDataStructureWL>(Integer.MIN_VALUE);
      ClausalDataStructureWL clausalDataStructureWL0 = new ClausalDataStructureWL();
      NaturalStaticOrder naturalStaticOrder0 = new NaturalStaticOrder();
      ArminRestarts arminRestarts0 = new ArminRestarts();
      Solver<ClausalDataStructureWL> solver0 = new Solver<ClausalDataStructureWL>(percentLengthLearning0, clausalDataStructureWL0, naturalStaticOrder0, arminRestarts0);
      ILits iLits0 = mock(ILits.class, new ViolatedAssumptionAnswer());
      doReturn(true).when(iLits0).isFalsified(anyInt());
      VecInt vecInt0 = new VecInt(2, 2);
      LearntWLClause learntWLClause0 = new LearntWLClause(vecInt0, iLits0);
      learntWLClause0.assertConstraintIfNeeded(solver0);
      assertEquals(1, solver0.getPropagationLevel());
      assertEquals(0.0, learntWLClause0.getActivity(), 0.01);
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      UnitPropagationListener unitPropagationListener0 = mock(UnitPropagationListener.class, new ViolatedAssumptionAnswer());
      ILits iLits0 = mock(ILits.class, new ViolatedAssumptionAnswer());
      VecInt vecInt0 = new VecInt(2, 2);
      OriginalWLClause originalWLClause0 = OriginalWLClause.brandNewClause(unitPropagationListener0, iLits0, vecInt0);
      originalWLClause0.rescaleBy((-1.0));
      assertEquals(-0.0, originalWLClause0.getActivity(), 0.01);
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      VecInt vecInt0 = new VecInt();
      Lits lits0 = new Lits();
      LearntWLClause learntWLClause0 = new LearntWLClause(vecInt0, lits0);
      // Undeclared exception!
      try { 
        learntWLClause0.get((-2545));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -2545
         //
         verifyException("org.sat4j.minisat.constraints.cnf.WLClause", e);
      }
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      PercentLengthLearning<ClausalDataStructureWL> percentLengthLearning0 = new PercentLengthLearning<ClausalDataStructureWL>(0);
      ClausalDataStructureWL clausalDataStructureWL0 = new ClausalDataStructureWL();
      NaturalStaticOrder naturalStaticOrder0 = new NaturalStaticOrder();
      ArminRestarts arminRestarts0 = new ArminRestarts();
      Solver<ClausalDataStructureWL> solver0 = new Solver<ClausalDataStructureWL>(percentLengthLearning0, clausalDataStructureWL0, naturalStaticOrder0, arminRestarts0);
      ILits iLits0 = mock(ILits.class, new ViolatedAssumptionAnswer());
      VecInt vecInt0 = new VecInt(2, 2);
      OriginalWLClause originalWLClause0 = OriginalWLClause.brandNewClause(solver0, iLits0, vecInt0);
      int[] intArray0 = originalWLClause0.getLits();
      assertArrayEquals(new int[] {2, 2}, intArray0);
      assertEquals(0.0, originalWLClause0.getActivity(), 0.01);
  }
}
