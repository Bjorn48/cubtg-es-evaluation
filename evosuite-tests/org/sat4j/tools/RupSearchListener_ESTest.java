/*
 * This file was automatically generated by EvoSuite
 * Tue Feb 19 07:23:04 GMT 2019
 */

package org.sat4j.tools;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;
import org.sat4j.minisat.constraints.ClausalDataStructureWL;
import org.sat4j.minisat.constraints.card.MaxWatchCard;
import org.sat4j.minisat.constraints.cnf.UnitClauses;
import org.sat4j.minisat.core.ILits;
import org.sat4j.minisat.core.RestartStrategy;
import org.sat4j.minisat.core.SearchParams;
import org.sat4j.minisat.core.Solver;
import org.sat4j.minisat.learning.FixedLengthLearning;
import org.sat4j.minisat.learning.MiniSATLearning;
import org.sat4j.minisat.orders.LevelBasedVarOrderHeap;
import org.sat4j.minisat.orders.VarOrderHeap;
import org.sat4j.minisat.restarts.MiniSATRestarts;
import org.sat4j.specs.Constr;
import org.sat4j.specs.IVecInt;
import org.sat4j.specs.Lbool;
import org.sat4j.specs.UnitPropagationListener;
import org.sat4j.tools.RupSearchListener;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class RupSearchListener_ESTest extends RupSearchListener_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      RupSearchListener<Solver<ClausalDataStructureWL>> rupSearchListener0 = new RupSearchListener<Solver<ClausalDataStructureWL>>("UsqqXY_R-mPitMT@");
      rupSearchListener0.init((Solver<ClausalDataStructureWL>) null);
      rupSearchListener0.learnUnit(129);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Constr constr0 = Constr.TAUTOLOGY;
      RupSearchListener<Solver<ClausalDataStructureWL>> rupSearchListener0 = new RupSearchListener<Solver<ClausalDataStructureWL>>("0");
      MiniSATLearning<ClausalDataStructureWL> miniSATLearning0 = new MiniSATLearning<ClausalDataStructureWL>();
      ClausalDataStructureWL clausalDataStructureWL0 = new ClausalDataStructureWL();
      SearchParams searchParams0 = mock(SearchParams.class, new ViolatedAssumptionAnswer());
      LevelBasedVarOrderHeap levelBasedVarOrderHeap0 = new LevelBasedVarOrderHeap();
      Solver<ClausalDataStructureWL> solver0 = new Solver<ClausalDataStructureWL>(miniSATLearning0, clausalDataStructureWL0, searchParams0, levelBasedVarOrderHeap0, (RestartStrategy) null);
      rupSearchListener0.init(solver0);
      rupSearchListener0.learn(constr0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      RupSearchListener<Solver<ClausalDataStructureWL>> rupSearchListener0 = new RupSearchListener<Solver<ClausalDataStructureWL>>("");
      rupSearchListener0.init((Solver<ClausalDataStructureWL>) null);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      FixedLengthLearning<ClausalDataStructureWL> fixedLengthLearning0 = new FixedLengthLearning<ClausalDataStructureWL>();
      ClausalDataStructureWL clausalDataStructureWL0 = new ClausalDataStructureWL();
      VarOrderHeap varOrderHeap0 = new VarOrderHeap();
      MiniSATRestarts miniSATRestarts0 = new MiniSATRestarts();
      Solver<ClausalDataStructureWL> solver0 = new Solver<ClausalDataStructureWL>(fixedLengthLearning0, clausalDataStructureWL0, varOrderHeap0, miniSATRestarts0);
      RupSearchListener<Solver<ClausalDataStructureWL>> rupSearchListener0 = new RupSearchListener<Solver<ClausalDataStructureWL>>("--- Begin Solver configuration ---\norg.sat4j.minisat.constraints.ClausalDataStructureWL@0000000006\norg.sat4j.minisat.learning.FixedLengthLearning@0000000003\norg.sat4j.minisat.core.SearchParams@0000000015\norg.sat4j.minisat.orders.VarOrderHeap@0000000008\norg.sat4j.minisat.core.Solver$1@0000000045\norg.sat4j.minisat.restarts.MiniSATRestarts@0000000011\norg.sat4j.minisat.core.Glucose2LCDS@0000000039\ntimeout=2147483s\nDB Simplification allowed=false\nListener: org.sat4j.minisat.core.VoidTracing@17\n--- End Solver configuration ---");
      rupSearchListener0.init(solver0);
      Lbool lbool0 = Lbool.FALSE;
      rupSearchListener0.end(lbool0);
      assertEquals("F", lbool0.toString());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      RupSearchListener<Solver<ClausalDataStructureWL>> rupSearchListener0 = new RupSearchListener<Solver<ClausalDataStructureWL>>("8>4=");
      IVecInt iVecInt0 = mock(IVecInt.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(iVecInt0).size();
      UnitClauses unitClauses0 = new UnitClauses(iVecInt0);
      // Undeclared exception!
      try { 
        rupSearchListener0.learn(unitClauses0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.minisat.constraints.cnf.UnitClauses", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      RupSearchListener<Solver<ClausalDataStructureWL>> rupSearchListener0 = null;
      try {
        rupSearchListener0 = new RupSearchListener<Solver<ClausalDataStructureWL>>((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.File", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      RupSearchListener<Solver<ClausalDataStructureWL>> rupSearchListener0 = new RupSearchListener<Solver<ClausalDataStructureWL>>("UsqqXY_R-mPitMT@");
      UnitPropagationListener unitPropagationListener0 = mock(UnitPropagationListener.class, new ViolatedAssumptionAnswer());
      ILits iLits0 = mock(ILits.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(iLits0).nVars();
      IVecInt iVecInt0 = mock(IVecInt.class, new ViolatedAssumptionAnswer());
      doReturn(1658, 0, 0, 0, 0).when(iVecInt0).size();
      rupSearchListener0.init((Solver<ClausalDataStructureWL>) null);
      try { 
        MaxWatchCard.maxWatchCardNew(unitPropagationListener0, iLits0, iVecInt0, true, 129);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.minisat.constraints.card.MaxWatchCard", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      RupSearchListener<Solver<ClausalDataStructureWL>> rupSearchListener0 = new RupSearchListener<Solver<ClausalDataStructureWL>>("0");
      ClausalDataStructureWL clausalDataStructureWL0 = new ClausalDataStructureWL();
      MiniSATLearning<ClausalDataStructureWL> miniSATLearning0 = new MiniSATLearning<ClausalDataStructureWL>();
      SearchParams searchParams0 = mock(SearchParams.class, new ViolatedAssumptionAnswer());
      LevelBasedVarOrderHeap levelBasedVarOrderHeap0 = new LevelBasedVarOrderHeap();
      Solver<ClausalDataStructureWL> solver0 = new Solver<ClausalDataStructureWL>(miniSATLearning0, clausalDataStructureWL0, searchParams0, levelBasedVarOrderHeap0, (RestartStrategy) null);
      rupSearchListener0.init(solver0);
      rupSearchListener0.end((Lbool) null);
      rupSearchListener0.end((Lbool) null);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Lbool lbool0 = Lbool.TRUE;
      Lbool lbool1 = lbool0.not();
      RupSearchListener<Solver<ClausalDataStructureWL>> rupSearchListener0 = new RupSearchListener<Solver<ClausalDataStructureWL>>("org.sat4j.minisat.constraints.MixedDataStructureDanielWLConciseBinary");
      // Undeclared exception!
      try { 
        rupSearchListener0.end(lbool1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.tools.RupSearchListener", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      RupSearchListener<Solver<ClausalDataStructureWL>> rupSearchListener0 = new RupSearchListener<Solver<ClausalDataStructureWL>>("UsqqXY_R-mPitMT@");
      // Undeclared exception!
      try { 
        rupSearchListener0.learnUnit(129);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.tools.RupSearchListener", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      RupSearchListener<Solver<ClausalDataStructureWL>> rupSearchListener0 = new RupSearchListener<Solver<ClausalDataStructureWL>>("UsqqXY_R-mPitMT@");
      UnitPropagationListener unitPropagationListener0 = mock(UnitPropagationListener.class, new ViolatedAssumptionAnswer());
      ILits iLits0 = mock(ILits.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(iLits0).nVars();
      IVecInt iVecInt0 = mock(IVecInt.class, new ViolatedAssumptionAnswer());
      doReturn(1658, 0, 0, 0, 0).when(iVecInt0).size();
      try { 
        MaxWatchCard.maxWatchCardNew(unitPropagationListener0, iLits0, iVecInt0, true, 129);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.minisat.constraints.card.MaxWatchCard", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Constr constr0 = Constr.TAUTOLOGY;
      RupSearchListener<Solver<ClausalDataStructureWL>> rupSearchListener0 = new RupSearchListener<Solver<ClausalDataStructureWL>>("0");
      // Undeclared exception!
      try { 
        rupSearchListener0.learn(constr0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.tools.RupSearchListener", e);
      }
  }
}
