/*
 * This file was automatically generated by EvoSuite
 * Wed Oct 23 12:57:05 GMT 2019
 */

package fr.unice.gfarce.interGraph;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import fr.unice.gfarce.interGraph.TableStockage;
import java.awt.Image;
import java.awt.SystemColor;
import java.awt.image.IndexColorModel;
import javax.swing.JLayeredPane;
import javax.swing.JOptionPane;
import javax.swing.JTable;
import javax.swing.event.TableModelEvent;
import javax.swing.event.TableModelListener;
import javax.swing.table.DefaultTableColumnModel;
import javax.swing.text.StyledEditorKit;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class TableStockage_ESTest extends TableStockage_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      String[] stringArray0 = new String[3];
      stringArray0[0] = "";
      String string0 = "1l@o]+";
      stringArray0[1] = "1l@o]+";
      String string1 = "";
      stringArray0[2] = "";
      Object[][] objectArray0 = new Object[1][8];
      objectArray0[0] = (Object[]) stringArray0;
      TableStockage tableStockage0 = new TableStockage(stringArray0, objectArray0);
      assertEquals(1, tableStockage0.getRowCount());
      assertEquals(3, tableStockage0.getColumnCount());
      assertEquals(3, stringArray0.length);
      assertEquals(1, objectArray0.length);
      assertNotNull(tableStockage0);
      
      int int0 = 0;
      Class<StyledEditorKit.AlignmentAction> class0 = StyledEditorKit.AlignmentAction.class;
      tableStockage0.fireTableRowsInserted(0, 0);
      assertEquals(1, tableStockage0.getRowCount());
      assertEquals(3, tableStockage0.getColumnCount());
      assertEquals(3, stringArray0.length);
      assertEquals(1, objectArray0.length);
      
      tableStockage0.setColumnClass(0, class0);
      assertEquals(1, tableStockage0.getRowCount());
      assertEquals(3, tableStockage0.getColumnCount());
      assertEquals(3, stringArray0.length);
      assertEquals(1, objectArray0.length);
      
      StyledEditorKit.AlignmentAction[] styledEditorKit_AlignmentActionArray0 = tableStockage0.getListeners(class0);
      assertEquals(1, tableStockage0.getRowCount());
      assertEquals(3, tableStockage0.getColumnCount());
      assertEquals(3, stringArray0.length);
      assertEquals(1, objectArray0.length);
      assertEquals(0, styledEditorKit_AlignmentActionArray0.length);
      assertNotNull(styledEditorKit_AlignmentActionArray0);
      
      Class<JOptionPane> class1 = JOptionPane.class;
      tableStockage0.setColumnClass(0, class1);
      assertEquals(1, tableStockage0.getRowCount());
      assertEquals(3, tableStockage0.getColumnCount());
      assertEquals(3, stringArray0.length);
      assertEquals(1, objectArray0.length);
      
      int int1 = 1974;
      // Undeclared exception!
      try { 
        tableStockage0.remplirMatrice("", 0, 1974);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1974
         //
         verifyException("fr.unice.gfarce.interGraph.TableStockage", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      TableStockage tableStockage0 = new TableStockage(3787, 3787);
      assertEquals(3787, tableStockage0.getColumnCount());
      assertEquals(3786, tableStockage0.getRowCount());
      assertNotNull(tableStockage0);
      
      tableStockage0.fireTableRowsDeleted(0, 0);
      assertEquals(3787, tableStockage0.getColumnCount());
      assertEquals(3786, tableStockage0.getRowCount());
      
      Class<Object> class0 = Object.class;
      // Undeclared exception!
      try { 
        tableStockage0.setColumnClass(3787, class0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      int int0 = 2873;
      TableStockage tableStockage0 = new TableStockage(2873, 2873);
      assertEquals(2872, tableStockage0.getRowCount());
      assertEquals(2873, tableStockage0.getColumnCount());
      assertNotNull(tableStockage0);
      
      Boolean boolean0 = Boolean.FALSE;
      assertNotNull(boolean0);
      assertFalse(boolean0);
      
      int int1 = 0;
      byte[] byteArray0 = new byte[2];
      byte byte0 = (byte) (-1);
      byteArray0[0] = (byte) (-1);
      byte byte1 = (byte)113;
      byteArray0[1] = (byte)113;
      IndexColorModel indexColorModel0 = null;
      try {
        indexColorModel0 = new IndexColorModel(0, 0, byteArray0, byteArray0, byteArray0, byteArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Number of pixel bits must be > 0
         //
         verifyException("java.awt.image.ColorModel", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      TableStockage tableStockage0 = new TableStockage(2523, 2523);
      assertEquals(2523, tableStockage0.getColumnCount());
      assertEquals(2522, tableStockage0.getRowCount());
      assertNotNull(tableStockage0);
      
      Class<Boolean> class0 = Boolean.class;
      tableStockage0.fireTableStructureChanged();
      assertEquals(2523, tableStockage0.getColumnCount());
      assertEquals(2522, tableStockage0.getRowCount());
      
      tableStockage0.setColumnClass(1, class0);
      assertEquals(2523, tableStockage0.getColumnCount());
      assertEquals(2522, tableStockage0.getRowCount());
      
      StyledEditorKit.AlignmentAction styledEditorKit_AlignmentAction0 = new StyledEditorKit.AlignmentAction("dBM!*x;+~!lH3Q", (-1970));
      assertNotNull(styledEditorKit_AlignmentAction0);
      
      Class<?> class1 = tableStockage0.getColumnClass(2499);
      assertEquals(2523, tableStockage0.getColumnCount());
      assertEquals(2522, tableStockage0.getRowCount());
      assertEquals(1, class1.getModifiers());
      assertFalse(class1.isSynthetic());
      assertFalse(class1.isAnnotation());
      assertFalse(class1.isEnum());
      assertEquals("class java.lang.Object", class1.toString());
      assertFalse(class1.isPrimitive());
      assertFalse(class1.isInterface());
      assertFalse(class1.isArray());
      assertNotNull(class1);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      String[] stringArray0 = new String[1];
      stringArray0[0] = "";
      Object[][] objectArray0 = new Object[9][7];
      objectArray0[0] = (Object[]) stringArray0;
      objectArray0[1] = (Object[]) stringArray0;
      objectArray0[2] = (Object[]) stringArray0;
      objectArray0[3] = (Object[]) stringArray0;
      objectArray0[4] = (Object[]) stringArray0;
      objectArray0[5] = (Object[]) stringArray0;
      objectArray0[6] = (Object[]) stringArray0;
      objectArray0[7] = (Object[]) stringArray0;
      Object[] objectArray1 = new Object[2];
      objectArray1[0] = (Object) "";
      objectArray1[1] = (Object) "";
      objectArray0[8] = objectArray1;
      TableStockage tableStockage0 = new TableStockage(stringArray0, objectArray0);
      assertEquals(1, tableStockage0.getColumnCount());
      assertEquals(9, tableStockage0.getRowCount());
      assertEquals(1, stringArray0.length);
      assertEquals(9, objectArray0.length);
      assertNotNull(tableStockage0);
      
      JTable jTable0 = new JTable();
      assertFalse(jTable0.isFocusTraversalPolicySet());
      assertFalse(jTable0.isFocusCycleRoot());
      assertFalse(jTable0.isFocusTraversalPolicyProvider());
      assertFalse(jTable0.getIgnoreRepaint());
      assertTrue(jTable0.getFocusTraversalKeysEnabled());
      assertNotNull(jTable0);
      
      SystemColor systemColor0 = SystemColor.info;
      assertEquals(255, systemColor0.getAlpha());
      assertEquals(224, systemColor0.getGreen());
      assertEquals(0, systemColor0.getBlue());
      assertEquals(224, systemColor0.getRed());
      assertEquals(1, systemColor0.getTransparency());
      assertEquals((-2039808), systemColor0.getRGB());
      assertNotNull(systemColor0);
      
      jTable0.setSelectionBackground(systemColor0);
      assertFalse(jTable0.isFocusTraversalPolicySet());
      assertFalse(jTable0.isFocusCycleRoot());
      assertFalse(jTable0.isFocusTraversalPolicyProvider());
      assertFalse(jTable0.getIgnoreRepaint());
      assertTrue(jTable0.getFocusTraversalKeysEnabled());
      assertEquals(255, systemColor0.getAlpha());
      assertEquals(224, systemColor0.getGreen());
      assertEquals(0, systemColor0.getBlue());
      assertEquals(224, systemColor0.getRed());
      assertEquals(1, systemColor0.getTransparency());
      assertEquals((-2039808), systemColor0.getRGB());
      
      tableStockage0.fireTableRowsUpdated(1, 1);
      assertEquals(1, tableStockage0.getColumnCount());
      assertEquals(9, tableStockage0.getRowCount());
      assertEquals(1, stringArray0.length);
      assertEquals(9, objectArray0.length);
      
      Image image0 = jTable0.createImage((-517), 1);
      assertFalse(jTable0.isFocusTraversalPolicySet());
      assertFalse(jTable0.isFocusCycleRoot());
      assertFalse(jTable0.isFocusTraversalPolicyProvider());
      assertFalse(jTable0.getIgnoreRepaint());
      assertTrue(jTable0.getFocusTraversalKeysEnabled());
      assertNull(image0);
      
      tableStockage0.addTableModelListener(jTable0);
      assertFalse(jTable0.isFocusTraversalPolicySet());
      assertFalse(jTable0.isFocusCycleRoot());
      assertFalse(jTable0.isFocusTraversalPolicyProvider());
      assertFalse(jTable0.getIgnoreRepaint());
      assertTrue(jTable0.getFocusTraversalKeysEnabled());
      assertEquals(1, tableStockage0.getColumnCount());
      assertEquals(9, tableStockage0.getRowCount());
      assertEquals(1, stringArray0.length);
      assertEquals(9, objectArray0.length);
      
      int int0 = 1713;
      // Undeclared exception!
      try { 
        tableStockage0.getValueAt(1713, 1713);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1713
         //
         verifyException("fr.unice.gfarce.interGraph.TableStockage", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      TableStockage tableStockage0 = new TableStockage();
      assertEquals(0, tableStockage0.getRowCount());
      assertEquals(0, tableStockage0.getColumnCount());
      assertNotNull(tableStockage0);
      
      Class<Integer> class0 = Integer.class;
      tableStockage0.setColumnClass(0, class0);
      assertEquals(0, tableStockage0.getRowCount());
      assertEquals(0, tableStockage0.getColumnCount());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      TableStockage tableStockage0 = new TableStockage();
      assertEquals(0, tableStockage0.getRowCount());
      assertEquals(0, tableStockage0.getColumnCount());
      assertNotNull(tableStockage0);
      
      Class<String> class0 = String.class;
      tableStockage0.setColumnClass(2450, class0);
      assertEquals(0, tableStockage0.getRowCount());
      assertEquals(0, tableStockage0.getColumnCount());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      TableStockage tableStockage0 = new TableStockage();
      assertEquals(0, tableStockage0.getRowCount());
      assertEquals(0, tableStockage0.getColumnCount());
      assertNotNull(tableStockage0);
      
      tableStockage0.fireTableDataChanged();
      assertEquals(0, tableStockage0.getRowCount());
      assertEquals(0, tableStockage0.getColumnCount());
      
      Class<Boolean> class0 = Boolean.class;
      tableStockage0.setColumnClass(0, class0);
      assertEquals(0, tableStockage0.getRowCount());
      assertEquals(0, tableStockage0.getColumnCount());
      
      TableModelListener[] tableModelListenerArray0 = tableStockage0.getTableModelListeners();
      assertEquals(0, tableStockage0.getRowCount());
      assertEquals(0, tableStockage0.getColumnCount());
      assertEquals(0, tableModelListenerArray0.length);
      assertNotNull(tableModelListenerArray0);
      
      // Undeclared exception!
      try { 
        tableStockage0.getColumnClass((-737));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("fr.unice.gfarce.interGraph.TableStockage", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      TableStockage tableStockage0 = new TableStockage();
      assertEquals(0, tableStockage0.getColumnCount());
      assertEquals(0, tableStockage0.getRowCount());
      assertNotNull(tableStockage0);
      
      Class<Boolean> class0 = Boolean.class;
      tableStockage0.setColumnClass((-524), class0);
      assertEquals(0, tableStockage0.getColumnCount());
      assertEquals(0, tableStockage0.getRowCount());
      
      // Undeclared exception!
      try { 
        tableStockage0.setColumnName(0, "* eD");
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("fr.unice.gfarce.interGraph.TableStockage", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      TableStockage tableStockage0 = new TableStockage();
      assertEquals(0, tableStockage0.getColumnCount());
      assertEquals(0, tableStockage0.getRowCount());
      assertNotNull(tableStockage0);
      
      // Undeclared exception!
      try { 
        tableStockage0.getColumnClass((-1875));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("fr.unice.gfarce.interGraph.TableStockage", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Object[][] objectArray0 = new Object[1][9];
      objectArray0[0] = (Object[]) null;
      TableStockage tableStockage0 = null;
      try {
        tableStockage0 = new TableStockage((String[]) null, objectArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("fr.unice.gfarce.interGraph.TableStockage", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      String[] stringArray0 = new String[2];
      stringArray0[0] = "yU>N{fA:S";
      stringArray0[1] = "";
      Object[][] objectArray0 = new Object[3][3];
      objectArray0[0] = (Object[]) stringArray0;
      objectArray0[1] = (Object[]) stringArray0;
      objectArray0[2] = (Object[]) stringArray0;
      TableStockage tableStockage0 = new TableStockage(stringArray0, objectArray0);
      assertEquals(2, tableStockage0.getColumnCount());
      assertEquals(3, tableStockage0.getRowCount());
      assertEquals(2, stringArray0.length);
      assertEquals(3, objectArray0.length);
      assertNotNull(tableStockage0);
      
      Class<Boolean> class0 = Boolean.class;
      TableModelEvent tableModelEvent0 = new TableModelEvent(tableStockage0, 0, 0);
      assertEquals(2, tableStockage0.getColumnCount());
      assertEquals(3, tableStockage0.getRowCount());
      assertEquals(2, stringArray0.length);
      assertEquals(3, objectArray0.length);
      assertNotNull(tableModelEvent0);
      
      tableStockage0.fireTableChanged(tableModelEvent0);
      assertEquals(2, tableStockage0.getColumnCount());
      assertEquals(3, tableStockage0.getRowCount());
      assertEquals(2, stringArray0.length);
      assertEquals(3, objectArray0.length);
      
      tableStockage0.setColumnClass(0, class0);
      assertEquals(2, tableStockage0.getColumnCount());
      assertEquals(3, tableStockage0.getRowCount());
      assertEquals(2, stringArray0.length);
      assertEquals(3, objectArray0.length);
      
      Class<Boolean> class1 = Boolean.class;
      tableStockage0.fireTableStructureChanged();
      assertEquals(2, tableStockage0.getColumnCount());
      assertEquals(3, tableStockage0.getRowCount());
      assertEquals(2, stringArray0.length);
      assertEquals(3, objectArray0.length);
      
      TableModelListener[] tableModelListenerArray0 = tableStockage0.getTableModelListeners();
      assertEquals(2, tableStockage0.getColumnCount());
      assertEquals(3, tableStockage0.getRowCount());
      assertEquals(2, stringArray0.length);
      assertEquals(3, objectArray0.length);
      assertEquals(0, tableModelListenerArray0.length);
      assertNotNull(tableModelListenerArray0);
      
      tableStockage0.setColumnClass(1, class1);
      assertEquals(2, tableStockage0.getColumnCount());
      assertEquals(3, tableStockage0.getRowCount());
      assertSame(class1, class0);
      assertEquals(2, stringArray0.length);
      assertEquals(3, objectArray0.length);
      
      tableStockage0.remplirMatrice((Object) null, 1, 1);
      assertEquals(2, tableStockage0.getColumnCount());
      assertEquals(3, tableStockage0.getRowCount());
      assertEquals(2, stringArray0.length);
      assertEquals(3, objectArray0.length);
      
      int int0 = tableStockage0.getColumnCount();
      assertEquals(2, tableStockage0.getColumnCount());
      assertEquals(3, tableStockage0.getRowCount());
      assertEquals(2, stringArray0.length);
      assertEquals(3, objectArray0.length);
      assertEquals(2, int0);
      
      Object object0 = tableStockage0.getValueAt(1, 1);
      assertEquals(2, tableStockage0.getColumnCount());
      assertEquals(3, tableStockage0.getRowCount());
      assertEquals(2, stringArray0.length);
      assertEquals(3, objectArray0.length);
      assertNotNull(object0);
      assertEquals(false, object0);
      
      Object object1 = new Object();
      assertNotNull(object1);
      
      tableStockage0.setValueAt(object1, 0, 1);
      assertEquals(2, tableStockage0.getColumnCount());
      assertEquals(3, tableStockage0.getRowCount());
      assertEquals(2, stringArray0.length);
      assertEquals(3, objectArray0.length);
      
      tableStockage0.setColumnClass(1, class1);
      assertEquals(2, tableStockage0.getColumnCount());
      assertEquals(3, tableStockage0.getRowCount());
      assertSame(class1, class0);
      assertEquals(2, stringArray0.length);
      assertEquals(3, objectArray0.length);
      
      tableStockage0.remplirMatrice("yU>N{fA:S", 0, 0);
      assertEquals(2, tableStockage0.getColumnCount());
      assertEquals(3, tableStockage0.getRowCount());
      assertEquals(2, stringArray0.length);
      assertEquals(3, objectArray0.length);
      
      // Undeclared exception!
      try { 
        tableStockage0.remplirMatrice("(U2\";,U_B+s", 1148, 0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1147
         //
         verifyException("fr.unice.gfarce.interGraph.TableStockage", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      String[] stringArray0 = new String[7];
      stringArray0[0] = "g2TWA}";
      stringArray0[1] = "fr.unice.gfarce.interGraph.TableStockage";
      stringArray0[2] = "";
      stringArray0[4] = "qK@~G,[?q1vMcu3";
      stringArray0[6] = "";
      Object[][] objectArray0 = new Object[8][1];
      objectArray0[0] = (Object[]) stringArray0;
      objectArray0[1] = (Object[]) stringArray0;
      objectArray0[2] = (Object[]) stringArray0;
      objectArray0[3] = (Object[]) stringArray0;
      objectArray0[4] = (Object[]) stringArray0;
      objectArray0[5] = (Object[]) stringArray0;
      objectArray0[7] = (Object[]) stringArray0;
      TableStockage tableStockage0 = null;
      try {
        tableStockage0 = new TableStockage(stringArray0, objectArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1
         //
         verifyException("fr.unice.gfarce.interGraph.TableStockage", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      TableStockage tableStockage0 = new TableStockage();
      assertEquals(0, tableStockage0.getColumnCount());
      assertEquals(0, tableStockage0.getRowCount());
      assertNotNull(tableStockage0);
      
      tableStockage0.fireTableStructureChanged();
      assertEquals(0, tableStockage0.getColumnCount());
      assertEquals(0, tableStockage0.getRowCount());
      
      tableStockage0.fireTableDataChanged();
      assertEquals(0, tableStockage0.getColumnCount());
      assertEquals(0, tableStockage0.getRowCount());
      
      tableStockage0.fireTableStructureChanged();
      assertEquals(0, tableStockage0.getColumnCount());
      assertEquals(0, tableStockage0.getRowCount());
      
      Class<Integer> class0 = Integer.class;
      tableStockage0.setColumnClass(1, class0);
      assertEquals(0, tableStockage0.getColumnCount());
      assertEquals(0, tableStockage0.getRowCount());
      
      String[] stringArray0 = tableStockage0.getNomColonnes();
      assertEquals(0, tableStockage0.getColumnCount());
      assertEquals(0, tableStockage0.getRowCount());
      assertEquals(0, stringArray0.length);
      assertNotNull(stringArray0);
      
      int int0 = tableStockage0.getRowCount();
      assertEquals(0, tableStockage0.getColumnCount());
      assertEquals(0, tableStockage0.getRowCount());
      assertEquals(0, int0);
      
      Boolean boolean0 = new Boolean(false);
      assertNotNull(boolean0);
      assertFalse(boolean0);
      
      boolean boolean1 = Boolean.logicalAnd(false, false);
      assertFalse(boolean1);
      
      // Undeclared exception!
      try { 
        tableStockage0.remplirMatrice(boolean0, 0, 1438);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.lang.Boolean cannot be cast to java.lang.String
         //
         verifyException("fr.unice.gfarce.interGraph.TableStockage", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      TableStockage tableStockage0 = new TableStockage(2523, 2523);
      assertEquals(2523, tableStockage0.getColumnCount());
      assertEquals(2522, tableStockage0.getRowCount());
      assertNotNull(tableStockage0);
      
      Class<String> class0 = String.class;
      tableStockage0.setColumnClass(0, class0);
      assertEquals(2523, tableStockage0.getColumnCount());
      assertEquals(2522, tableStockage0.getRowCount());
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      TableStockage tableStockage0 = new TableStockage(2519, 2519);
      assertEquals(2519, tableStockage0.getColumnCount());
      assertEquals(2518, tableStockage0.getRowCount());
      assertNotNull(tableStockage0);
      
      Integer integer0 = JLayeredPane.DEFAULT_LAYER;
      assertNotNull(integer0);
      assertEquals(0, (int)integer0);
      
      // Undeclared exception!
      try { 
        tableStockage0.setValueAt(integer0, 2519, 2519);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      int int0 = (-1875);
      TableStockage tableStockage0 = null;
      try {
        tableStockage0 = new TableStockage((-1875), (-1875));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("fr.unice.gfarce.interGraph.TableStockage", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      int int0 = 0;
      TableStockage tableStockage0 = null;
      try {
        tableStockage0 = new TableStockage(0, 0);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("fr.unice.gfarce.interGraph.TableStockage", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Object[][] objectArray0 = new Object[0][6];
      TableStockage tableStockage0 = null;
      try {
        tableStockage0 = new TableStockage((String[]) null, objectArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("fr.unice.gfarce.interGraph.TableStockage", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      TableStockage tableStockage0 = new TableStockage();
      assertEquals(0, tableStockage0.getColumnCount());
      assertEquals(0, tableStockage0.getRowCount());
      assertNotNull(tableStockage0);
      
      String[] stringArray0 = tableStockage0.getNomColonnes();
      assertEquals(0, tableStockage0.getColumnCount());
      assertEquals(0, tableStockage0.getRowCount());
      assertEquals(0, stringArray0.length);
      assertNotNull(stringArray0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      TableStockage tableStockage0 = new TableStockage();
      assertEquals(0, tableStockage0.getColumnCount());
      assertEquals(0, tableStockage0.getRowCount());
      assertNotNull(tableStockage0);
      
      // Undeclared exception!
      try { 
        tableStockage0.getColumnName((-1831));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      String[] stringArray0 = new String[0];
      Object[][] objectArray0 = new Object[6][3];
      objectArray0[0] = (Object[]) stringArray0;
      objectArray0[1] = (Object[]) stringArray0;
      objectArray0[2] = (Object[]) stringArray0;
      objectArray0[3] = (Object[]) stringArray0;
      objectArray0[4] = (Object[]) stringArray0;
      Object[] objectArray1 = new Object[4];
      StyledEditorKit.AlignmentAction styledEditorKit_AlignmentAction0 = new StyledEditorKit.AlignmentAction("b'VESG*", 3008);
      assertNotNull(styledEditorKit_AlignmentAction0);
      
      objectArray1[0] = (Object) styledEditorKit_AlignmentAction0;
      Object object0 = new Object();
      assertNotNull(object0);
      
      Integer integer0 = JLayeredPane.DRAG_LAYER;
      assertNotNull(integer0);
      assertEquals(400, (int)integer0);
      
      Integer integer1 = new Integer(0);
      assertFalse(integer1.equals((Object)integer0));
      assertNotNull(integer1);
      assertEquals(0, (int)integer1);
      
      objectArray1[1] = (Object) integer1;
      StyledEditorKit.AlignmentAction styledEditorKit_AlignmentAction1 = new StyledEditorKit.AlignmentAction("C=oCpB", 0);
      assertFalse(styledEditorKit_AlignmentAction1.equals((Object)styledEditorKit_AlignmentAction0));
      assertNotNull(styledEditorKit_AlignmentAction1);
      
      objectArray1[2] = (Object) styledEditorKit_AlignmentAction1;
      Boolean boolean0 = Boolean.valueOf(false);
      assertNotNull(boolean0);
      assertFalse(boolean0);
      
      objectArray1[3] = (Object) boolean0;
      objectArray0[5] = objectArray1;
      TableStockage tableStockage0 = new TableStockage(stringArray0, objectArray0);
      assertEquals(6, tableStockage0.getRowCount());
      assertEquals(0, tableStockage0.getColumnCount());
      assertEquals(0, stringArray0.length);
      assertEquals(6, objectArray0.length);
      assertNotNull(tableStockage0);
      
      // Undeclared exception!
      try { 
        tableStockage0.getValueAt(0, 3008);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 3008
         //
         verifyException("fr.unice.gfarce.interGraph.TableStockage", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      TableStockage tableStockage0 = new TableStockage();
      assertEquals(0, tableStockage0.getRowCount());
      assertEquals(0, tableStockage0.getColumnCount());
      assertNotNull(tableStockage0);
      
      TableModelEvent tableModelEvent0 = new TableModelEvent(tableStockage0, 0, (-2391));
      assertEquals(0, tableStockage0.getRowCount());
      assertEquals(0, tableStockage0.getColumnCount());
      assertNotNull(tableModelEvent0);
      
      tableStockage0.fireTableChanged(tableModelEvent0);
      assertEquals(0, tableStockage0.getRowCount());
      assertEquals(0, tableStockage0.getColumnCount());
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      // Undeclared exception!
      try { 
        tableStockage0.remplirMatrice(object0, 2771, 2771);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 2770
         //
         verifyException("fr.unice.gfarce.interGraph.TableStockage", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      String[] stringArray0 = new String[4];
      stringArray0[0] = "fr.unice.gfarce.interGraph.TableStockage";
      stringArray0[1] = "z~u37.gxV `I]9=ZA-d";
      stringArray0[2] = "KDa.R\" }'";
      stringArray0[3] = "MU9,`GuIbmJ-G>Up";
      Object[][] objectArray0 = new Object[3][8];
      objectArray0[0] = (Object[]) stringArray0;
      objectArray0[1] = (Object[]) stringArray0;
      objectArray0[2] = (Object[]) stringArray0;
      TableStockage tableStockage0 = new TableStockage(stringArray0, objectArray0);
      assertEquals(3, tableStockage0.getRowCount());
      assertEquals(4, tableStockage0.getColumnCount());
      assertEquals(4, stringArray0.length);
      assertEquals(3, objectArray0.length);
      assertNotNull(tableStockage0);
      
      Class<?> class0 = tableStockage0.getColumnClass(0);
      assertEquals(3, tableStockage0.getRowCount());
      assertEquals(4, tableStockage0.getColumnCount());
      assertFalse(class0.isAnnotation());
      assertEquals("class java.lang.String", class0.toString());
      assertFalse(class0.isPrimitive());
      assertEquals(17, class0.getModifiers());
      assertFalse(class0.isEnum());
      assertFalse(class0.isSynthetic());
      assertFalse(class0.isInterface());
      assertFalse(class0.isArray());
      assertEquals(4, stringArray0.length);
      assertEquals(3, objectArray0.length);
      assertNotNull(class0);
      
      JOptionPane jOptionPane0 = new JOptionPane();
      assertTrue(jOptionPane0.getFocusTraversalKeysEnabled());
      assertFalse(jOptionPane0.isFocusCycleRoot());
      assertFalse(jOptionPane0.isFocusTraversalPolicyProvider());
      assertFalse(jOptionPane0.isFocusTraversalPolicySet());
      assertFalse(jOptionPane0.getIgnoreRepaint());
      assertNotNull(jOptionPane0);
      
      tableStockage0.setValueAt(jOptionPane0, 0, 1);
      assertEquals(3, tableStockage0.getRowCount());
      assertEquals(4, tableStockage0.getColumnCount());
      assertTrue(jOptionPane0.getFocusTraversalKeysEnabled());
      assertFalse(jOptionPane0.isFocusCycleRoot());
      assertFalse(jOptionPane0.isFocusTraversalPolicyProvider());
      assertFalse(jOptionPane0.isFocusTraversalPolicySet());
      assertFalse(jOptionPane0.getIgnoreRepaint());
      assertEquals(4, stringArray0.length);
      assertEquals(3, objectArray0.length);
      
      DefaultTableColumnModel defaultTableColumnModel0 = new DefaultTableColumnModel();
      assertNotNull(defaultTableColumnModel0);
      
      JTable jTable0 = new JTable(tableStockage0, defaultTableColumnModel0);
      assertEquals(3, tableStockage0.getRowCount());
      assertEquals(4, tableStockage0.getColumnCount());
      assertFalse(jTable0.getIgnoreRepaint());
      assertFalse(jTable0.isFocusTraversalPolicyProvider());
      assertFalse(jTable0.isFocusCycleRoot());
      assertFalse(jTable0.isFocusTraversalPolicySet());
      assertTrue(jTable0.getFocusTraversalKeysEnabled());
      assertEquals(4, stringArray0.length);
      assertEquals(3, objectArray0.length);
      assertNotNull(jTable0);
      
      tableStockage0.addTableModelListener(jTable0);
      assertEquals(3, tableStockage0.getRowCount());
      assertEquals(4, tableStockage0.getColumnCount());
      assertFalse(jTable0.getIgnoreRepaint());
      assertFalse(jTable0.isFocusTraversalPolicyProvider());
      assertFalse(jTable0.isFocusCycleRoot());
      assertFalse(jTable0.isFocusTraversalPolicySet());
      assertTrue(jTable0.getFocusTraversalKeysEnabled());
      assertEquals(4, stringArray0.length);
      assertEquals(3, objectArray0.length);
      
      int int0 = tableStockage0.getColumnCount();
      assertEquals(3, tableStockage0.getRowCount());
      assertEquals(4, tableStockage0.getColumnCount());
      assertEquals(4, stringArray0.length);
      assertEquals(3, objectArray0.length);
      assertEquals(4, int0);
      
      // Undeclared exception!
      try { 
        tableStockage0.setValueAt(class0, 464, 4);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      String[] stringArray0 = new String[4];
      stringArray0[0] = "fr.unice.gfarce.interGraph.TableStockage";
      stringArray0[1] = "z~u37.gxV `I]9=ZA-d";
      stringArray0[2] = "KDa.R\" }'";
      stringArray0[3] = "MU9,`GuIbmJ-G>Up";
      Object[][] objectArray0 = new Object[3][8];
      objectArray0[0] = (Object[]) stringArray0;
      objectArray0[1] = (Object[]) stringArray0;
      objectArray0[2] = (Object[]) stringArray0;
      TableStockage tableStockage0 = new TableStockage(stringArray0, objectArray0);
      assertEquals(4, tableStockage0.getColumnCount());
      assertEquals(3, tableStockage0.getRowCount());
      assertEquals(4, stringArray0.length);
      assertEquals(3, objectArray0.length);
      assertNotNull(tableStockage0);
      
      String string0 = tableStockage0.getColumnName(0);
      assertEquals(4, tableStockage0.getColumnCount());
      assertEquals(3, tableStockage0.getRowCount());
      assertEquals(4, stringArray0.length);
      assertEquals(3, objectArray0.length);
      assertNotNull(string0);
      assertEquals("fr.unice.gfarce.interGraph.TableStockage", string0);
      
      tableStockage0.addTableModelListener((TableModelListener) null);
      assertEquals(4, tableStockage0.getColumnCount());
      assertEquals(3, tableStockage0.getRowCount());
      assertEquals(4, stringArray0.length);
      assertEquals(3, objectArray0.length);
      
      // Undeclared exception!
      try { 
        tableStockage0.getColumnName(292);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      TableStockage tableStockage0 = new TableStockage(2523, 2523);
      assertEquals(2522, tableStockage0.getRowCount());
      assertEquals(2523, tableStockage0.getColumnCount());
      assertNotNull(tableStockage0);
      
      Class<Boolean> class0 = Boolean.class;
      tableStockage0.fireTableStructureChanged();
      assertEquals(2522, tableStockage0.getRowCount());
      assertEquals(2523, tableStockage0.getColumnCount());
      
      // Undeclared exception!
      try { 
        tableStockage0.setColumnClass(2523, class0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      TableStockage tableStockage0 = new TableStockage(2523, 2523);
      assertEquals(2522, tableStockage0.getRowCount());
      assertEquals(2523, tableStockage0.getColumnCount());
      assertNotNull(tableStockage0);
      
      Class<Boolean> class0 = Boolean.class;
      tableStockage0.fireTableStructureChanged();
      assertEquals(2522, tableStockage0.getRowCount());
      assertEquals(2523, tableStockage0.getColumnCount());
      
      tableStockage0.setColumnClass(1, class0);
      assertEquals(2522, tableStockage0.getRowCount());
      assertEquals(2523, tableStockage0.getColumnCount());
      
      TableStockage tableStockage1 = new TableStockage();
      assertEquals(0, tableStockage1.getRowCount());
      assertEquals(0, tableStockage1.getColumnCount());
      assertFalse(tableStockage1.equals((Object)tableStockage0));
      assertNotNull(tableStockage1);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      tableStockage1.fireTableStructureChanged();
      assertEquals(0, tableStockage1.getRowCount());
      assertEquals(0, tableStockage1.getColumnCount());
      assertNotSame(tableStockage1, tableStockage0);
      assertFalse(tableStockage1.equals((Object)tableStockage0));
      
      tableStockage0.fireTableRowsInserted(2127, 2127);
      assertEquals(2522, tableStockage0.getRowCount());
      assertEquals(2523, tableStockage0.getColumnCount());
      assertNotSame(tableStockage0, tableStockage1);
      assertFalse(tableStockage0.equals((Object)tableStockage1));
      
      TableModelListener[] tableModelListenerArray0 = tableStockage0.getTableModelListeners();
      assertEquals(2522, tableStockage0.getRowCount());
      assertEquals(2523, tableStockage0.getColumnCount());
      assertNotSame(tableStockage0, tableStockage1);
      assertFalse(tableStockage0.equals((Object)tableStockage1));
      assertEquals(0, tableModelListenerArray0.length);
      assertNotNull(tableModelListenerArray0);
      
      Class<String> class1 = String.class;
      tableStockage1.setColumnClass(2523, class1);
      assertEquals(0, tableStockage1.getRowCount());
      assertEquals(0, tableStockage1.getColumnCount());
      assertNotSame(tableStockage1, tableStockage0);
      assertFalse(tableStockage1.equals((Object)tableStockage0));
      
      tableStockage0.fireTableStructureChanged();
      assertEquals(2522, tableStockage0.getRowCount());
      assertEquals(2523, tableStockage0.getColumnCount());
      assertNotSame(tableStockage0, tableStockage1);
      assertFalse(tableStockage0.equals((Object)tableStockage1));
      
      Class<Integer> class2 = Integer.class;
      tableStockage1.setColumnClass(1438, class2);
      assertEquals(0, tableStockage1.getRowCount());
      assertEquals(0, tableStockage1.getColumnCount());
      assertNotSame(tableStockage1, tableStockage0);
      assertFalse(tableStockage1.equals((Object)tableStockage0));
      
      int int0 = tableStockage0.getRowCount();
      assertEquals(2522, tableStockage0.getRowCount());
      assertEquals(2523, tableStockage0.getColumnCount());
      assertNotSame(tableStockage0, tableStockage1);
      assertFalse(tableStockage0.equals((Object)tableStockage1));
      assertEquals(2522, int0);
      
      int int1 = tableStockage0.getRowCount();
      assertEquals(2522, tableStockage0.getRowCount());
      assertEquals(2523, tableStockage0.getColumnCount());
      assertNotSame(tableStockage0, tableStockage1);
      assertFalse(tableStockage0.equals((Object)tableStockage1));
      assertTrue(int1 == int0);
      assertEquals(2522, int1);
      
      int int2 = tableStockage0.getRowCount();
      assertEquals(2522, tableStockage0.getRowCount());
      assertEquals(2523, tableStockage0.getColumnCount());
      assertNotSame(tableStockage0, tableStockage1);
      assertTrue(int2 == int0);
      assertTrue(int2 == int1);
      assertFalse(tableStockage0.equals((Object)tableStockage1));
      assertEquals(2522, int2);
      
      // Undeclared exception!
      try { 
        tableStockage0.remplirMatrice(tableStockage1, 2127, (-1));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("fr.unice.gfarce.interGraph.TableStockage", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      TableStockage tableStockage0 = new TableStockage();
      assertEquals(0, tableStockage0.getRowCount());
      assertEquals(0, tableStockage0.getColumnCount());
      assertNotNull(tableStockage0);
      
      int int0 = tableStockage0.getColumnCount();
      assertEquals(0, tableStockage0.getRowCount());
      assertEquals(0, tableStockage0.getColumnCount());
      assertEquals(0, int0);
      
      tableStockage0.fireTableDataChanged();
      assertEquals(0, tableStockage0.getRowCount());
      assertEquals(0, tableStockage0.getColumnCount());
      
      int int1 = tableStockage0.getRowCount();
      assertEquals(0, tableStockage0.getRowCount());
      assertEquals(0, tableStockage0.getColumnCount());
      assertTrue(int1 == int0);
      assertEquals(0, int1);
      
      int int2 = tableStockage0.getRowCount();
      assertEquals(0, tableStockage0.getRowCount());
      assertEquals(0, tableStockage0.getColumnCount());
      assertTrue(int2 == int0);
      assertTrue(int2 == int1);
      assertEquals(0, int2);
      
      int int3 = (-316);
      int int4 = 144;
      tableStockage0.fireTableCellUpdated((-316), 144);
      assertEquals(0, tableStockage0.getRowCount());
      assertEquals(0, tableStockage0.getColumnCount());
      
      Class<String> class0 = String.class;
      tableStockage0.setColumnClass(0, class0);
      assertEquals(0, tableStockage0.getRowCount());
      assertEquals(0, tableStockage0.getColumnCount());
      
      Integer integer0 = new Integer(0);
      assertFalse(integer0.equals((Object)int3));
      assertTrue(integer0.equals((Object)int0));
      assertTrue(integer0.equals((Object)int2));
      assertTrue(integer0.equals((Object)int1));
      assertFalse(integer0.equals((Object)int4));
      assertNotNull(integer0);
      assertEquals(0, (int)integer0);
      
      long long0 = Integer.toUnsignedLong(0);
      assertEquals(0L, long0);
      
      int int5 = 0;
      int int6 = 1;
      tableStockage0.fireTableCellUpdated(1, 1);
      assertEquals(0, tableStockage0.getRowCount());
      assertEquals(0, tableStockage0.getColumnCount());
      
      // Undeclared exception!
      try { 
        tableStockage0.setValueAt(integer0, 0, 0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      TableStockage tableStockage0 = new TableStockage(1, 1);
      assertEquals(0, tableStockage0.getRowCount());
      assertEquals(1, tableStockage0.getColumnCount());
      assertNotNull(tableStockage0);
      
      int int0 = tableStockage0.findColumn("@DmYT\"#P/Kx(SP");
      assertEquals(0, tableStockage0.getRowCount());
      assertEquals(1, tableStockage0.getColumnCount());
      assertEquals((-1), int0);
      
      tableStockage0.fireTableStructureChanged();
      assertEquals(0, tableStockage0.getRowCount());
      assertEquals(1, tableStockage0.getColumnCount());
      
      Class<String> class0 = String.class;
      tableStockage0.setColumnClass(1, class0);
      assertEquals(0, tableStockage0.getRowCount());
      assertEquals(1, tableStockage0.getColumnCount());
      
      String[] stringArray0 = tableStockage0.getNomColonnes();
      assertEquals(0, tableStockage0.getRowCount());
      assertEquals(1, tableStockage0.getColumnCount());
      assertEquals(1, stringArray0.length);
      assertNotNull(stringArray0);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      TableStockage tableStockage0 = new TableStockage(2511, 2511);
      assertEquals(2510, tableStockage0.getRowCount());
      assertEquals(2511, tableStockage0.getColumnCount());
      assertNotNull(tableStockage0);
      
      int int0 = tableStockage0.findColumn("@DmYT\"#P/Kx(SP");
      assertEquals(2510, tableStockage0.getRowCount());
      assertEquals(2511, tableStockage0.getColumnCount());
      assertEquals((-1), int0);
      
      tableStockage0.fireTableStructureChanged();
      assertEquals(2510, tableStockage0.getRowCount());
      assertEquals(2511, tableStockage0.getColumnCount());
      
      Class<String> class0 = String.class;
      tableStockage0.setColumnClass(1, class0);
      assertEquals(2510, tableStockage0.getRowCount());
      assertEquals(2511, tableStockage0.getColumnCount());
      
      String[] stringArray0 = tableStockage0.getNomColonnes();
      assertEquals(2510, tableStockage0.getRowCount());
      assertEquals(2511, tableStockage0.getColumnCount());
      assertEquals(2511, stringArray0.length);
      assertNotNull(stringArray0);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      TableStockage tableStockage0 = new TableStockage();
      assertEquals(0, tableStockage0.getColumnCount());
      assertEquals(0, tableStockage0.getRowCount());
      assertNotNull(tableStockage0);
      
      int int0 = 1433;
      // Undeclared exception!
      try { 
        tableStockage0.setColumnClass((-871), (Class<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      TableStockage tableStockage0 = new TableStockage();
      assertEquals(0, tableStockage0.getRowCount());
      assertEquals(0, tableStockage0.getColumnCount());
      assertNotNull(tableStockage0);
      
      tableStockage0.fireTableChanged((TableModelEvent) null);
      assertEquals(0, tableStockage0.getRowCount());
      assertEquals(0, tableStockage0.getColumnCount());
      
      tableStockage0.fireTableRowsDeleted(1, 0);
      assertEquals(0, tableStockage0.getRowCount());
      assertEquals(0, tableStockage0.getColumnCount());
      
      tableStockage0.fireTableDataChanged();
      assertEquals(0, tableStockage0.getRowCount());
      assertEquals(0, tableStockage0.getColumnCount());
      
      Class<Boolean> class0 = Boolean.class;
      tableStockage0.setColumnClass((-1983), class0);
      assertEquals(0, tableStockage0.getRowCount());
      assertEquals(0, tableStockage0.getColumnCount());
      
      tableStockage0.fireTableRowsDeleted((-1983), (-1983));
      assertEquals(0, tableStockage0.getRowCount());
      assertEquals(0, tableStockage0.getColumnCount());
      
      int int0 = tableStockage0.findColumn("");
      assertEquals(0, tableStockage0.getRowCount());
      assertEquals(0, tableStockage0.getColumnCount());
      assertEquals((-1), int0);
      
      tableStockage0.fireTableDataChanged();
      assertEquals(0, tableStockage0.getRowCount());
      assertEquals(0, tableStockage0.getColumnCount());
      
      String[] stringArray0 = tableStockage0.getNomColonnes();
      assertEquals(0, tableStockage0.getRowCount());
      assertEquals(0, tableStockage0.getColumnCount());
      assertEquals(0, stringArray0.length);
      assertNotNull(stringArray0);
      
      int int1 = 0;
      // Undeclared exception!
      try { 
        tableStockage0.getColumnName(0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      String[] stringArray0 = new String[7];
      stringArray0[0] = "g2TWA}";
      stringArray0[1] = "fr.unice.gfarce.interGraph.TableStockage";
      stringArray0[2] = "";
      stringArray0[3] = "lG677wa!x";
      stringArray0[4] = "qK@~G,[?q1vMcu3";
      stringArray0[5] = "";
      stringArray0[6] = "";
      Object[][] objectArray0 = new Object[8][1];
      objectArray0[0] = (Object[]) stringArray0;
      objectArray0[1] = (Object[]) stringArray0;
      objectArray0[2] = (Object[]) stringArray0;
      objectArray0[3] = (Object[]) stringArray0;
      objectArray0[4] = (Object[]) stringArray0;
      objectArray0[5] = (Object[]) stringArray0;
      objectArray0[6] = (Object[]) stringArray0;
      objectArray0[7] = (Object[]) stringArray0;
      TableStockage tableStockage0 = new TableStockage(stringArray0, objectArray0);
      assertEquals(8, tableStockage0.getRowCount());
      assertEquals(7, tableStockage0.getColumnCount());
      assertEquals(7, stringArray0.length);
      assertEquals(8, objectArray0.length);
      assertNotNull(tableStockage0);
      
      String[] stringArray1 = tableStockage0.getNomColonnes();
      assertEquals(8, tableStockage0.getRowCount());
      assertEquals(7, tableStockage0.getColumnCount());
      assertSame(stringArray0, stringArray1);
      assertSame(stringArray1, stringArray0);
      assertEquals(7, stringArray0.length);
      assertEquals(7, stringArray1.length);
      assertEquals(8, objectArray0.length);
      assertNotNull(stringArray1);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      TableStockage tableStockage0 = new TableStockage();
      assertEquals(0, tableStockage0.getRowCount());
      assertEquals(0, tableStockage0.getColumnCount());
      assertNotNull(tableStockage0);
      
      StyledEditorKit.AlignmentAction styledEditorKit_AlignmentAction0 = new StyledEditorKit.AlignmentAction("H|&1[\"%s#*;", (-2183));
      assertNotNull(styledEditorKit_AlignmentAction0);
      
      // Undeclared exception!
      try { 
        tableStockage0.remplirMatrice(styledEditorKit_AlignmentAction0, (-2183), 2576);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -2184
         //
         verifyException("fr.unice.gfarce.interGraph.TableStockage", e);
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      int int0 = 2511;
      TableStockage tableStockage0 = new TableStockage(2511, 2511);
      assertEquals(2510, tableStockage0.getRowCount());
      assertEquals(2511, tableStockage0.getColumnCount());
      assertNotNull(tableStockage0);
      
      Object object0 = tableStockage0.getValueAt(0, 0);
      assertEquals(2510, tableStockage0.getRowCount());
      assertEquals(2511, tableStockage0.getColumnCount());
      assertNull(object0);
      
      int int1 = tableStockage0.findColumn("cQYod@'e~O6");
      assertEquals(2510, tableStockage0.getRowCount());
      assertEquals(2511, tableStockage0.getColumnCount());
      assertFalse(int1 == int0);
      assertEquals((-1), int1);
      
      // Undeclared exception!
      try { 
        tableStockage0.getColumnClass(2511);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 2511
         //
         verifyException("fr.unice.gfarce.interGraph.TableStockage", e);
      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      TableStockage tableStockage0 = new TableStockage();
      assertEquals(0, tableStockage0.getRowCount());
      assertEquals(0, tableStockage0.getColumnCount());
      assertNotNull(tableStockage0);
      
      Class<StyledEditorKit.AlignmentAction> class0 = StyledEditorKit.AlignmentAction.class;
      StyledEditorKit.AlignmentAction[] styledEditorKit_AlignmentActionArray0 = tableStockage0.getListeners(class0);
      assertEquals(0, tableStockage0.getRowCount());
      assertEquals(0, tableStockage0.getColumnCount());
      assertEquals(0, styledEditorKit_AlignmentActionArray0.length);
      assertNotNull(styledEditorKit_AlignmentActionArray0);
      
      Class<StyledEditorKit.AlignmentAction> class1 = StyledEditorKit.AlignmentAction.class;
      StyledEditorKit.AlignmentAction[] styledEditorKit_AlignmentActionArray1 = tableStockage0.getListeners(class1);
      assertEquals(0, tableStockage0.getRowCount());
      assertEquals(0, tableStockage0.getColumnCount());
      assertSame(class1, class0);
      assertNotSame(styledEditorKit_AlignmentActionArray1, styledEditorKit_AlignmentActionArray0);
      assertFalse(styledEditorKit_AlignmentActionArray1.equals((Object)styledEditorKit_AlignmentActionArray0));
      assertEquals(0, styledEditorKit_AlignmentActionArray1.length);
      assertNotNull(styledEditorKit_AlignmentActionArray1);
      
      int int0 = 1;
      Class<Object> class2 = Object.class;
      tableStockage0.setColumnClass(578, class2);
      assertEquals(0, tableStockage0.getRowCount());
      assertEquals(0, tableStockage0.getColumnCount());
      
      int int1 = 2085;
      tableStockage0.setColumnClass(2085, class2);
      assertEquals(0, tableStockage0.getRowCount());
      assertEquals(0, tableStockage0.getColumnCount());
      
      boolean boolean0 = tableStockage0.isCellEditable(1, (-2263));
      assertEquals(0, tableStockage0.getRowCount());
      assertEquals(0, tableStockage0.getColumnCount());
      assertTrue(boolean0);
      
      String string0 = "";
      // Undeclared exception!
      try { 
        tableStockage0.setColumnName((-2263), "");
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -2263
         //
         verifyException("fr.unice.gfarce.interGraph.TableStockage", e);
      }
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      TableStockage tableStockage0 = new TableStockage();
      assertEquals(0, tableStockage0.getColumnCount());
      assertEquals(0, tableStockage0.getRowCount());
      assertNotNull(tableStockage0);
      
      // Undeclared exception!
      try { 
        tableStockage0.getValueAt(395, (-1634));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 395
         //
         verifyException("fr.unice.gfarce.interGraph.TableStockage", e);
      }
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      TableStockage tableStockage0 = new TableStockage();
      assertEquals(0, tableStockage0.getRowCount());
      assertEquals(0, tableStockage0.getColumnCount());
      assertNotNull(tableStockage0);
      
      TableModelEvent tableModelEvent0 = new TableModelEvent(tableStockage0);
      assertEquals(0, tableStockage0.getRowCount());
      assertEquals(0, tableStockage0.getColumnCount());
      assertNotNull(tableModelEvent0);
      
      tableStockage0.fireTableChanged(tableModelEvent0);
      assertEquals(0, tableStockage0.getRowCount());
      assertEquals(0, tableStockage0.getColumnCount());
      
      Class<Boolean> class0 = Boolean.class;
      tableStockage0.setColumnClass((-524), class0);
      assertEquals(0, tableStockage0.getRowCount());
      assertEquals(0, tableStockage0.getColumnCount());
      
      String[] stringArray0 = new String[8];
      stringArray0[0] = "L49u?ciS9oV)!5}";
      stringArray0[1] = "fr.unice.gfarce.interGraph.TableStockage";
      stringArray0[2] = "";
      stringArray0[3] = "";
      stringArray0[4] = "c 4~e<";
      stringArray0[5] = "zWCd";
      stringArray0[6] = "IL})jQ%U`";
      stringArray0[7] = "c";
      Object[][] objectArray0 = new Object[5][4];
      objectArray0[0] = (Object[]) stringArray0;
      objectArray0[1] = (Object[]) stringArray0;
      objectArray0[2] = (Object[]) stringArray0;
      objectArray0[3] = (Object[]) stringArray0;
      objectArray0[4] = (Object[]) stringArray0;
      TableStockage tableStockage1 = new TableStockage(stringArray0, objectArray0);
      assertEquals(5, tableStockage1.getRowCount());
      assertEquals(8, tableStockage1.getColumnCount());
      assertFalse(tableStockage1.equals((Object)tableStockage0));
      assertEquals(8, stringArray0.length);
      assertEquals(5, objectArray0.length);
      assertNotNull(tableStockage1);
      
      int int0 = tableStockage1.getRowCount();
      assertEquals(5, tableStockage1.getRowCount());
      assertEquals(8, tableStockage1.getColumnCount());
      assertNotSame(tableStockage1, tableStockage0);
      assertFalse(tableStockage1.equals((Object)tableStockage0));
      assertEquals(8, stringArray0.length);
      assertEquals(5, objectArray0.length);
      assertEquals(5, int0);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      TableStockage tableStockage0 = new TableStockage(2523, 2523);
      assertEquals(2522, tableStockage0.getRowCount());
      assertEquals(2523, tableStockage0.getColumnCount());
      assertNotNull(tableStockage0);
      
      Class<Boolean> class0 = Boolean.class;
      tableStockage0.setColumnClass(1, class0);
      assertEquals(2522, tableStockage0.getRowCount());
      assertEquals(2523, tableStockage0.getColumnCount());
      
      TableStockage tableStockage1 = new TableStockage();
      assertEquals(0, tableStockage1.getColumnCount());
      assertEquals(0, tableStockage1.getRowCount());
      assertFalse(tableStockage1.equals((Object)tableStockage0));
      assertNotNull(tableStockage1);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      tableStockage1.fireTableStructureChanged();
      assertEquals(0, tableStockage1.getColumnCount());
      assertEquals(0, tableStockage1.getRowCount());
      assertNotSame(tableStockage1, tableStockage0);
      assertFalse(tableStockage1.equals((Object)tableStockage0));
      
      tableStockage0.fireTableRowsInserted(2127, 2127);
      assertEquals(2522, tableStockage0.getRowCount());
      assertEquals(2523, tableStockage0.getColumnCount());
      assertNotSame(tableStockage0, tableStockage1);
      assertFalse(tableStockage0.equals((Object)tableStockage1));
      
      TableModelListener[] tableModelListenerArray0 = tableStockage0.getTableModelListeners();
      assertEquals(2522, tableStockage0.getRowCount());
      assertEquals(2523, tableStockage0.getColumnCount());
      assertNotSame(tableStockage0, tableStockage1);
      assertFalse(tableStockage0.equals((Object)tableStockage1));
      assertEquals(0, tableModelListenerArray0.length);
      assertNotNull(tableModelListenerArray0);
      
      Class<String> class1 = String.class;
      tableStockage1.fireTableRowsInserted(2127, 2517);
      assertEquals(0, tableStockage1.getColumnCount());
      assertEquals(0, tableStockage1.getRowCount());
      assertNotSame(tableStockage1, tableStockage0);
      assertFalse(tableStockage1.equals((Object)tableStockage0));
      
      tableStockage1.setColumnClass(2523, class1);
      assertEquals(0, tableStockage1.getColumnCount());
      assertEquals(0, tableStockage1.getRowCount());
      assertNotSame(tableStockage1, tableStockage0);
      assertFalse(tableStockage1.equals((Object)tableStockage0));
      
      int int0 = tableStockage0.findColumn("");
      assertEquals(2522, tableStockage0.getRowCount());
      assertEquals(2523, tableStockage0.getColumnCount());
      assertNotSame(tableStockage0, tableStockage1);
      assertFalse(tableStockage0.equals((Object)tableStockage1));
      assertEquals((-1), int0);
      
      tableStockage0.fireTableStructureChanged();
      assertEquals(2522, tableStockage0.getRowCount());
      assertEquals(2523, tableStockage0.getColumnCount());
      assertNotSame(tableStockage0, tableStockage1);
      assertFalse(tableStockage0.equals((Object)tableStockage1));
      
      Class<Integer> class2 = Integer.class;
      tableStockage1.setColumnClass(1433, class2);
      assertEquals(0, tableStockage1.getColumnCount());
      assertEquals(0, tableStockage1.getRowCount());
      assertNotSame(tableStockage1, tableStockage0);
      assertFalse(tableStockage1.equals((Object)tableStockage0));
      
      String[] stringArray0 = tableStockage0.getNomColonnes();
      assertEquals(2522, tableStockage0.getRowCount());
      assertEquals(2523, tableStockage0.getColumnCount());
      assertNotSame(tableStockage0, tableStockage1);
      assertFalse(tableStockage0.equals((Object)tableStockage1));
      assertEquals(2523, stringArray0.length);
      assertNotNull(stringArray0);
      
      int int1 = tableStockage0.getRowCount();
      assertEquals(2522, tableStockage0.getRowCount());
      assertEquals(2523, tableStockage0.getColumnCount());
      assertNotSame(tableStockage0, tableStockage1);
      assertFalse(int1 == int0);
      assertFalse(tableStockage0.equals((Object)tableStockage1));
      assertEquals(2522, int1);
      
      int int2 = tableStockage0.getRowCount();
      assertEquals(2522, tableStockage0.getRowCount());
      assertEquals(2523, tableStockage0.getColumnCount());
      assertNotSame(tableStockage0, tableStockage1);
      assertFalse(tableStockage0.equals((Object)tableStockage1));
      assertFalse(int2 == int0);
      assertTrue(int2 == int1);
      assertEquals(2522, int2);
      
      boolean boolean0 = tableStockage0.isCellEditable(2487, 1);
      assertEquals(2522, tableStockage0.getRowCount());
      assertEquals(2523, tableStockage0.getColumnCount());
      assertNotSame(tableStockage0, tableStockage1);
      assertFalse(tableStockage0.equals((Object)tableStockage1));
      assertTrue(boolean0);
      
      String string0 = tableStockage0.getColumnName(1433);
      assertEquals(2522, tableStockage0.getRowCount());
      assertEquals(2523, tableStockage0.getColumnCount());
      assertNotSame(tableStockage0, tableStockage1);
      assertFalse(tableStockage0.equals((Object)tableStockage1));
      assertNull(string0);
      
      // Undeclared exception!
      try { 
        tableStockage1.getColumnClass((-1131));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("fr.unice.gfarce.interGraph.TableStockage", e);
      }
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      String[] stringArray0 = new String[2];
      stringArray0[0] = "yU>N{fA:S";
      stringArray0[1] = "";
      Object[][] objectArray0 = new Object[3][3];
      objectArray0[0] = (Object[]) stringArray0;
      objectArray0[1] = (Object[]) stringArray0;
      objectArray0[2] = (Object[]) stringArray0;
      TableStockage tableStockage0 = new TableStockage(stringArray0, objectArray0);
      assertEquals(3, tableStockage0.getRowCount());
      assertEquals(2, tableStockage0.getColumnCount());
      assertEquals(2, stringArray0.length);
      assertEquals(3, objectArray0.length);
      assertNotNull(tableStockage0);
      
      TableStockage tableStockage1 = new TableStockage(stringArray0, objectArray0);
      assertEquals(2, tableStockage1.getColumnCount());
      assertEquals(3, tableStockage1.getRowCount());
      assertFalse(tableStockage1.equals((Object)tableStockage0));
      assertEquals(2, stringArray0.length);
      assertEquals(3, objectArray0.length);
      assertNotNull(tableStockage1);
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      TableStockage tableStockage0 = new TableStockage(2523, 2523);
      assertEquals(2522, tableStockage0.getRowCount());
      assertEquals(2523, tableStockage0.getColumnCount());
      assertNotNull(tableStockage0);
      
      tableStockage0.fireTableStructureChanged();
      assertEquals(2522, tableStockage0.getRowCount());
      assertEquals(2523, tableStockage0.getColumnCount());
      
      Class<Object> class0 = Object.class;
      tableStockage0.setColumnClass(0, class0);
      assertEquals(2522, tableStockage0.getRowCount());
      assertEquals(2523, tableStockage0.getColumnCount());
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      TableStockage tableStockage0 = new TableStockage();
      assertEquals(0, tableStockage0.getRowCount());
      assertEquals(0, tableStockage0.getColumnCount());
      assertNotNull(tableStockage0);
      
      boolean boolean0 = tableStockage0.isCellEditable(2491, 2491);
      assertEquals(0, tableStockage0.getRowCount());
      assertEquals(0, tableStockage0.getColumnCount());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      String[] stringArray0 = new String[5];
      String string0 = "";
      stringArray0[0] = "";
      stringArray0[1] = "`}8E#h-&!h0P";
      stringArray0[2] = "K0";
      stringArray0[3] = "";
      stringArray0[4] = "L821L&<*~E";
      Object[][] objectArray0 = new Object[0][3];
      TableStockage tableStockage0 = new TableStockage(stringArray0, objectArray0);
      assertEquals(5, tableStockage0.getColumnCount());
      assertEquals(0, tableStockage0.getRowCount());
      assertEquals(5, stringArray0.length);
      assertEquals(0, objectArray0.length);
      assertNotNull(tableStockage0);
      
      int int0 = 1110;
      tableStockage0.fireTableCellUpdated(0, (-1));
      assertEquals(5, tableStockage0.getColumnCount());
      assertEquals(0, tableStockage0.getRowCount());
      assertEquals(5, stringArray0.length);
      assertEquals(0, objectArray0.length);
      
      tableStockage0.fireTableCellUpdated(1, 1110);
      assertEquals(5, tableStockage0.getColumnCount());
      assertEquals(0, tableStockage0.getRowCount());
      assertEquals(5, stringArray0.length);
      assertEquals(0, objectArray0.length);
      
      TableModelEvent tableModelEvent0 = new TableModelEvent(tableStockage0);
      assertEquals(5, tableStockage0.getColumnCount());
      assertEquals(0, tableStockage0.getRowCount());
      assertEquals(5, stringArray0.length);
      assertEquals(0, objectArray0.length);
      assertNotNull(tableModelEvent0);
      
      int int1 = tableModelEvent0.getFirstRow();
      assertEquals(5, tableStockage0.getColumnCount());
      assertEquals(0, tableStockage0.getRowCount());
      assertFalse(int1 == int0);
      assertEquals(5, stringArray0.length);
      assertEquals(0, objectArray0.length);
      assertEquals(0, int1);
      
      tableStockage0.fireTableChanged(tableModelEvent0);
      assertEquals(5, tableStockage0.getColumnCount());
      assertEquals(0, tableStockage0.getRowCount());
      assertEquals(5, stringArray0.length);
      assertEquals(0, objectArray0.length);
      
      int int2 = tableModelEvent0.getColumn();
      assertEquals(5, tableStockage0.getColumnCount());
      assertEquals(0, tableStockage0.getRowCount());
      assertFalse(int2 == int1);
      assertFalse(int2 == int0);
      assertEquals(5, stringArray0.length);
      assertEquals(0, objectArray0.length);
      assertEquals((-1), int2);
      
      int int3 = tableModelEvent0.getFirstRow();
      assertEquals(5, tableStockage0.getColumnCount());
      assertEquals(0, tableStockage0.getRowCount());
      assertFalse(int3 == int0);
      assertFalse(int3 == int2);
      assertTrue(int3 == int1);
      assertEquals(5, stringArray0.length);
      assertEquals(0, objectArray0.length);
      assertEquals(0, int3);
      
      tableStockage0.fireTableStructureChanged();
      assertEquals(5, tableStockage0.getColumnCount());
      assertEquals(0, tableStockage0.getRowCount());
      assertEquals(5, stringArray0.length);
      assertEquals(0, objectArray0.length);
      
      tableStockage0.setColumnName(1, "");
      assertEquals(5, tableStockage0.getColumnCount());
      assertEquals(0, tableStockage0.getRowCount());
      assertEquals(5, stringArray0.length);
      assertEquals(0, objectArray0.length);
      
      TableModelListener[] tableModelListenerArray0 = tableStockage0.getTableModelListeners();
      assertEquals(5, tableStockage0.getColumnCount());
      assertEquals(0, tableStockage0.getRowCount());
      assertEquals(5, stringArray0.length);
      assertEquals(0, tableModelListenerArray0.length);
      assertEquals(0, objectArray0.length);
      assertNotNull(tableModelListenerArray0);
      
      int int4 = (-2589);
      String string1 = "";
      // Undeclared exception!
      try { 
        tableStockage0.setColumnName((-2589), "");
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -2589
         //
         verifyException("fr.unice.gfarce.interGraph.TableStockage", e);
      }
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      String[] stringArray0 = new String[8];
      stringArray0[0] = "";
      stringArray0[1] = "";
      stringArray0[2] = "";
      stringArray0[3] = "";
      stringArray0[4] = "{$L";
      stringArray0[5] = "";
      stringArray0[6] = "";
      stringArray0[7] = "";
      Object[][] objectArray0 = new Object[5][5];
      objectArray0[0] = (Object[]) stringArray0;
      objectArray0[1] = (Object[]) stringArray0;
      objectArray0[2] = (Object[]) stringArray0;
      objectArray0[3] = (Object[]) stringArray0;
      objectArray0[4] = (Object[]) stringArray0;
      TableStockage tableStockage0 = new TableStockage(stringArray0, objectArray0);
      assertEquals(8, tableStockage0.getColumnCount());
      assertEquals(5, tableStockage0.getRowCount());
      assertEquals(8, stringArray0.length);
      assertEquals(5, objectArray0.length);
      assertNotNull(tableStockage0);
      
      Object object0 = tableStockage0.getValueAt(0, 0);
      assertEquals(8, tableStockage0.getColumnCount());
      assertEquals(5, tableStockage0.getRowCount());
      assertEquals(8, stringArray0.length);
      assertEquals(5, objectArray0.length);
      assertNotNull(object0);
      assertEquals("", object0);
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      TableStockage tableStockage0 = new TableStockage(2523, 2523);
      Class<Boolean> class0 = Boolean.class;
      tableStockage0.fireTableStructureChanged();
      tableStockage0.fireTableRowsUpdated(2523, 0);
      tableStockage0.setColumnClass(1, class0);
      TableStockage tableStockage1 = new TableStockage();
      Object object0 = new Object();
      tableStockage0.fireTableRowsInserted(2127, 1);
      Class<String> class1 = String.class;
      tableStockage0.setColumnClass(2127, class0);
      tableStockage1.fireTableRowsInserted(959, 2512);
      tableStockage1.findColumn(":y:C&Ihz>G_wNx$=");
      tableStockage0.fireTableStructureChanged();
      Class<Object> class2 = Object.class;
      tableStockage0.setColumnClass(1, class2);
      tableStockage0.getColumnCount();
      tableStockage0.getNomColonnes();
      // Undeclared exception!
      tableStockage0.setColumnClass(1, class1);
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      TableStockage tableStockage0 = new TableStockage(2510, 331);
      int int0 = tableStockage0.getColumnCount();
      assertEquals(2509, tableStockage0.getRowCount());
      assertEquals(331, int0);
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      int int0 = 2336;
      int int1 = 0;
      TableStockage tableStockage0 = new TableStockage(2336, 0);
      tableStockage0.getTableModelListeners();
      tableStockage0.fireTableRowsInserted(2336, 0);
      int int2 = 1;
      tableStockage0.findColumn("");
      tableStockage0.fireTableRowsUpdated(999, 1);
      String string0 = null;
      tableStockage0.fireTableStructureChanged();
      // Undeclared exception!
      try { 
        tableStockage0.remplirMatrice((Object) null, 0, 0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("fr.unice.gfarce.interGraph.TableStockage", e);
      }
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      TableStockage tableStockage0 = new TableStockage();
      assertEquals(0, tableStockage0.getRowCount());
      
      Class<Boolean> class0 = Boolean.class;
      tableStockage0.setColumnClass(0, class0);
      assertEquals(0, tableStockage0.getColumnCount());
  }
}
