[MASTER] 21:54:51.006 [logback-2] ERROR TestCluster - Failed to check cache for java.util.Comparator<T> : Type points to itself
[MASTER] 21:59:34.802 [logback-2] ERROR JUnitAnalyzer - Compilation failed on compilation units: [RegularFileObject[/tmp/EvoSuite_51_1550523574574/org/sat4j/core/VecInt_51_tmp__ESTest.java], RegularFileObject[/tmp/EvoSuite_51_1550523574574/org/sat4j/core/VecInt_51_tmp__ESTest_scaffolding.java]]
[MASTER] 21:59:34.802 [logback-2] ERROR JUnitAnalyzer - Classpath: bins/sat4j/org.ow2.sat4j.core-2.3.6-SNAPSHOT.jar:bins/sat4j/org.ow2.sat4j.core-2.3.6-SNAPSHOT-tests.jar:/home/pderakhshanfar/common-uncommon-behaviour-testing-experiment/evosuite-master-1.0.7-SNAPSHOT.jar:/home/pderakhshanfar/common-uncommon-behaviour-testing-experiment/bins/sat4j/org.ow2.sat4j.core-2.3.6-SNAPSHOT.jar:/home/pderakhshanfar/common-uncommon-behaviour-testing-experiment/bins/sat4j/org.ow2.sat4j.core-2.3.6-SNAPSHOT-tests.jar
[MASTER] 21:59:34.802 [logback-2] ERROR JUnitAnalyzer - evosuiteCP: /home/pderakhshanfar/common-uncommon-behaviour-testing-experiment/evosuite-master-1.0.7-SNAPSHOT.jar:/home/pderakhshanfar/common-uncommon-behaviour-testing-experiment/bins/sat4j/org.ow2.sat4j.core-2.3.6-SNAPSHOT.jar:/home/pderakhshanfar/common-uncommon-behaviour-testing-experiment/bins/sat4j/org.ow2.sat4j.core-2.3.6-SNAPSHOT-tests.jar
[MASTER] 21:59:34.826 [logback-2] ERROR JUnitAnalyzer - Diagnostic: cannot find symbol
  symbol:   method access$100(org.sat4j.core.VecInt)
  location: class org.sat4j.core.VecInt: 212
[MASTER] 21:59:34.828 [logback-2] ERROR JUnitAnalyzer - RegularFileObject[/tmp/EvoSuite_51_1550523574574/org/sat4j/core/VecInt_51_tmp__ESTest.java]
1: /*
2:  * This file was automatically generated by EvoSuite
3:  * Mon Feb 18 20:59:34 GMT 2019
4:  */
5: 
6: package org.sat4j.core;
7: 
8: import org.junit.Test;
9: import static org.junit.Assert.*;
10: import static org.evosuite.runtime.EvoAssertions.*;
11: import org.evosuite.runtime.EvoRunner;
12: import org.evosuite.runtime.EvoRunnerParameters;
13: import org.junit.runner.RunWith;
14: import org.sat4j.core.VecInt;
15: import org.sat4j.specs.IVecInt;
16: import org.sat4j.specs.IteratorInt;
17: 
18: @RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, useJEE = true) 
19: public class VecInt_51_tmp__ESTest extends VecInt_51_tmp__ESTest_scaffolding {
20: 
21:   @Test(timeout = 4000)
22:   public void test0()  throws Throwable  {
23:       VecInt vecInt0 = new VecInt();
24:       assertNotNull(vecInt0);
25:       assertEquals(0, vecInt0.size());
26:       assertTrue(vecInt0.isEmpty());
27:       
28:       int[] intArray0 = new int[8];
29:       intArray0[0] = 1;
30:       intArray0[1] = 1;
31:       intArray0[2] = 1;
32:       intArray0[3] = (-1056);
33:       intArray0[4] = 1;
34:       intArray0[5] = (-325);
35:       intArray0[6] = 1;
36:       intArray0[7] = 5;
37:       VecInt vecInt1 = new VecInt(intArray0);
38:       assertNotNull(vecInt1);
39:       assertEquals(5, vecInt1.last());
40:       assertFalse(vecInt1.isEmpty());
41:       assertEquals(8, vecInt1.size());
42:       assertFalse(vecInt1.equals((Object)vecInt0));
43:       assertArrayEquals(new int[] {1, 1, 1, (-1056), 1, (-325), 1, 5}, intArray0);
44:       assertEquals(8, intArray0.length);
45:       
46:       IVecInt iVecInt0 = vecInt1.push(1);
47:       assertNotNull(iVecInt0);
48:       assertFalse(vecInt1.isEmpty());
49:       assertEquals(1, vecInt1.last());
50:       assertEquals(9, vecInt1.size());
51:       assertEquals(9, iVecInt0.size());
52:       assertEquals(1, iVecInt0.last());
53:       assertFalse(iVecInt0.isEmpty());
54:       assertFalse(vecInt1.equals((Object)vecInt0));
55:       assertFalse(iVecInt0.equals((Object)vecInt0));
56:       assertNotSame(vecInt1, vecInt0);
57:       assertSame(vecInt1, iVecInt0);
58:       assertSame(iVecInt0, vecInt1);
59:       assertNotSame(iVecInt0, vecInt0);
60:       assertArrayEquals(new int[] {1, 1, 1, (-1056), 1, (-325), 1, 5}, intArray0);
61:       assertEquals(8, intArray0.length);
62:       
63:       vecInt1.copyTo((IVecInt) vecInt0);
64:       assertFalse(vecInt0.isEmpty());
65:       assertEquals(9, vecInt0.size());
66:       assertEquals(1, vecInt0.last());
67:       assertFalse(vecInt1.isEmpty());
68:       assertEquals(1, vecInt1.last());
69:       assertEquals(9, vecInt1.size());
70:       assertTrue(vecInt0.equals((Object)vecInt1));
71:       assertTrue(vecInt0.equals((Object)iVecInt0));
72:       assertTrue(vecInt1.equals((Object)vecInt0));
73:       assertNotSame(vecInt0, vecInt1);
74:       assertNotSame(vecInt0, iVecInt0);
75:       assertNotSame(vecInt1, vecInt0);
76:       assertSame(vecInt1, iVecInt0);
77:       assertArrayEquals(new int[] {1, 1, 1, (-1056), 1, (-325), 1, 5}, intArray0);
78:       assertEquals(8, intArray0.length);
79:       
80:       IVecInt iVecInt1 = vecInt0.push(1111);
81:       assertNotNull(iVecInt1);
82:       assertFalse(vecInt0.isEmpty());
83:       assertEquals(1111, vecInt0.last());
84:       assertEquals(10, vecInt0.size());
85:       assertEquals(1111, iVecInt1.last());
86:       assertFalse(iVecInt1.isEmpty());
87:       assertEquals(10, iVecInt1.size());
88:       assertFalse(vecInt0.equals((Object)vecInt1));
89:       assertFalse(vecInt0.equals((Object)iVecInt0));
90:       assertFalse(iVecInt1.equals((Object)vecInt1));
91:       assertFalse(iVecInt1.equals((Object)iVecInt0));
92:       assertSame(vecInt0, iVecInt1);
93:       assertNotSame(vecInt0, vecInt1);
94:       assertNotSame(vecInt0, iVecInt0);
95:       assertNotSame(iVecInt1, vecInt1);
96:       assertNotSame(iVecInt1, iVecInt0);
97:       assertSame(iVecInt1, vecInt0);
98:       
99:       VecInt vecInt2 = new VecInt();
100:       assertNotNull(vecInt2);
101:       assertTrue(vecInt2.isEmpty());
102:       assertEquals(0, vecInt2.size());
103:       assertFalse(vecInt2.equals((Object)vecInt1));
104:       assertFalse(vecInt2.equals((Object)iVecInt0));
105:       assertFalse(vecInt2.equals((Object)vecInt0));
106:       assertFalse(vecInt2.equals((Object)iVecInt1));
107:       
108:       int int0 = vecInt2.size();
109:       assertTrue(vecInt2.isEmpty());
110:       assertEquals(0, vecInt2.size());
111:       assertFalse(vecInt2.equals((Object)vecInt1));
112:       assertFalse(vecInt2.equals((Object)iVecInt0));
113:       assertFalse(vecInt2.equals((Object)vecInt0));
114:       assertFalse(vecInt2.equals((Object)iVecInt1));
115:       assertNotSame(vecInt2, vecInt1);
116:       assertNotSame(vecInt2, iVecInt0);
117:       assertNotSame(vecInt2, vecInt0);
118:       assertNotSame(vecInt2, iVecInt1);
119:       assertEquals(0, int0);
120:       
121:       IteratorInt iteratorInt0 = vecInt2.iterator();
122:       assertNotNull(iteratorInt0);
123:       assertTrue(vecInt2.isEmpty());
124:       assertEquals(0, vecInt2.size());
125:       assertFalse(vecInt2.equals((Object)vecInt1));
126:       assertFalse(vecInt2.equals((Object)iVecInt0));
127:       assertFalse(vecInt2.equals((Object)vecInt0));
128:       assertFalse(vecInt2.equals((Object)iVecInt1));
129:       assertNotSame(vecInt2, vecInt1);
130:       assertNotSame(vecInt2, iVecInt0);
131:       assertNotSame(vecInt2, vecInt0);
132:       assertNotSame(vecInt2, iVecInt1);
133:       
134:       vecInt2.pushAll(vecInt0);
135:       assertFalse(vecInt0.isEmpty());
136:       assertEquals(1111, vecInt0.last());
137:       assertEquals(10, vecInt0.size());
138:       assertFalse(vecInt2.isEmpty());
139:       assertEquals(1111, vecInt2.last());
140:       assertEquals(10, vecInt2.size());
141:       assertFalse(vecInt0.equals((Object)vecInt1));
142:       assertFalse(vecInt0.equals((Object)iVecInt0));
143:       assertTrue(vecInt0.equals((Object)vecInt2));
144:       assertFalse(vecInt2.equals((Object)vecInt1));
145:       assertTrue(vecInt2.equals((Object)iVecInt1));
146:       assertTrue(vecInt2.equals((Object)vecInt0));
147:       assertFalse(vecInt2.equals((Object)iVecInt0));
148:       assertSame(vecInt0, iVecInt1);
149:       assertNotSame(vecInt0, vecInt1);
150:       assertNotSame(vecInt0, vecInt2);
151:       assertNotSame(vecInt0, iVecInt0);
152:       assertNotSame(vecInt2, vecInt1);
153:       assertNotSame(vecInt2, iVecInt0);
154:       assertNotSame(vecInt2, vecInt0);
155:       assertNotSame(vecInt2, iVecInt1);
156:       
157:       vecInt1.sortUnique();
158:       assertEquals(4, vecInt1.size());
159:       assertEquals(5, vecInt1.last());
160:       assertFalse(vecInt1.isEmpty());
161:       assertFalse(vecInt1.equals((Object)vecInt0));
162:       assertFalse(vecInt1.equals((Object)iVecInt1));
163:       assertFalse(vecInt1.equals((Object)vecInt2));
164:       assertNotSame(vecInt1, vecInt0);
165:       assertNotSame(vecInt1, iVecInt1);
166:       assertNotSame(vecInt1, vecInt2);
167:       assertSame(vecInt1, iVecInt0);
168:       assertArrayEquals(new int[] {1, 1, 1, (-1056), 1, (-325), 1, 5}, intArray0);
169:       assertEquals(8, intArray0.length);
170:       
171:       boolean boolean0 = vecInt1.contains(5);
172:       assertEquals(4, vecInt1.size());
173:       assertEquals(5, vecInt1.last());
174:       assertFalse(vecInt1.isEmpty());
175:       assertFalse(vecInt1.equals((Object)vecInt0));
176:       assertFalse(vecInt1.equals((Object)iVecInt1));
177:       assertFalse(vecInt1.equals((Object)vecInt2));
178:       assertNotSame(vecInt1, vecInt0);
179:       assertNotSame(vecInt1, iVecInt1);
180:       assertNotSame(vecInt1, vecInt2);
181:       assertSame(vecInt1, iVecInt0);
182:       assertArrayEquals(new int[] {1, 1, 1, (-1056), 1, (-325), 1, 5}, intArray0);
183:       assertTrue(boolean0);
184:       assertEquals(8, intArray0.length);
185:       
186:       int int1 = 0;
187:       IVecInt iVecInt2 = vecInt0.push(1160);
188:       assertNotNull(iVecInt2);
189:       assertFalse(vecInt0.isEmpty());
190:       assertEquals(1160, vecInt0.last());
191:       assertEquals(11, vecInt0.size());
192:       assertEquals(1160, iVecInt2.last());
193:       assertEquals(11, iVecInt2.size());
194:       assertFalse(iVecInt2.isEmpty());
195:       assertFalse(vecInt0.equals((Object)vecInt1));
196:       assertFalse(vecInt0.equals((Object)vecInt2));
197:       assertFalse(vecInt0.equals((Object)iVecInt0));
198:       assertFalse(iVecInt2.equals((Object)iVecInt0));
199:       assertFalse(iVecInt2.equals((Object)vecInt1));
200:       assertFalse(iVecInt2.equals((Object)vecInt2));
201:       assertSame(vecInt0, iVecInt1);
202:       assertSame(vecInt0, iVecInt2);
203:       assertNotSame(vecInt0, vecInt1);
204:       assertNotSame(vecInt0, vecInt2);
205:       assertNotSame(vecInt0, iVecInt0);
206:       assertNotSame(iVecInt2, iVecInt0);
207:       assertNotSame(iVecInt2, vecInt1);
208:       assertSame(iVecInt2, iVecInt1);
209:       assertSame(iVecInt2, vecInt0);
210:       assertNotSame(iVecInt2, vecInt2);
211:       
212:       int[] intArray1 = VecInt.access$100(vecInt1);
213:       assertNotNull(intArray1);
214:       assertEquals(4, vecInt1.size());
215:       assertEquals(5, vecInt1.last());
216:       assertFalse(vecInt1.isEmpty());
217:       assertFalse(intArray1.equals((Object)intArray0));
218:       assertFalse(vecInt1.equals((Object)vecInt0));
219:       assertFalse(vecInt1.equals((Object)iVecInt1));
220:       assertFalse(vecInt1.equals((Object)vecInt2));
221:       assertFalse(vecInt1.equals((Object)iVecInt2));
222:       assertNotSame(intArray0, intArray1);
223:       assertNotSame(intArray1, intArray0);
224:       assertNotSame(vecInt1, vecInt0);
225:       assertNotSame(vecInt1, iVecInt1);
226:       assertNotSame(vecInt1, vecInt2);
227:       assertNotSame(vecInt1, iVecInt2);
228:       assertSame(vecInt1, iVecInt0);
229:       assertArrayEquals(new int[] {1, 1, 1, (-1056), 1, (-325), 1, 5}, intArray0);
230:       assertEquals(8, intArray0.length);
231:       assertEquals(16, intArray1.length);
232:       
233:       vecInt1.moveTo(intArray0);
234:       assertEquals(0, vecInt1.size());
235:       assertTrue(vecInt1.isEmpty());
236:       assertFalse(intArray0.equals((Object)intArray1));
237:       assertFalse(vecInt1.equals((Object)vecInt0));
238:       assertFalse(vecInt1.equals((Object)iVecInt1));
239:       assertFalse(vecInt1.equals((Object)vecInt2));
240:       assertFalse(vecInt1.equals((Object)iVecInt2));
241:       assertNotSame(intArray0, intArray1);
242:       assertNotSame(vecInt1, vecInt0);
243:       assertNotSame(vecInt1, iVecInt1);
244:       assertNotSame(vecInt1, vecInt2);
245:       assertNotSame(vecInt1, iVecInt2);
246:       assertSame(vecInt1, iVecInt0);
247:       assertArrayEquals(new int[] {(-1056), (-325), 1, 5, 1, (-325), 1, 5}, intArray0);
248:       assertEquals(8, intArray0.length);
249:       
250:       IVecInt iVecInt3 = vecInt1.pop();
251:       assertNotNull(iVecInt3);
252:       assertFalse(iVecInt3.isEmpty());
253:       assertEquals((-1), iVecInt3.size());
254:       assertEquals((-1), vecInt1.size());
255:       assertFalse(vecInt1.isEmpty());
256:       assertFalse(intArray0.equals((Object)intArray1));
257:       assertFalse(iVecInt3.equals((Object)iVecInt1));
258:       assertFalse(iVecInt3.equals((Object)iVecInt2));
259:       assertFalse(iVecInt3.equals((Object)vecInt0));
260:       assertFalse(iVecInt3.equals((Object)vecInt2));
261:       assertFalse(vecInt1.equals((Object)vecInt0));
262:       assertFalse(vecInt1.equals((Object)iVecInt1));
263:       assertFalse(vecInt1.equals((Object)vecInt2));
264:       assertFalse(vecInt1.equals((Object)iVecInt2));
265:       assertNotSame(intArray0, intArray1);
266:       assertNotSame(iVecInt3, iVecInt1);
267:       assertNotSame(iVecInt3, iVecInt2);
268:       assertSame(iVecInt3, iVecInt0);
269:       assertSame(iVecInt3, vecInt1);
270:       assertNotSame(iVecInt3, vecInt0);
271:       assertNotSame(iVecInt3, vecInt2);
272:       assertSame(vecInt1, iVecInt3);
273:       assertNotSame(vecInt1, vecInt0);
274:       assertNotSame(vecInt1, iVecInt1);
275:       assertNotSame(vecInt1, vecInt2);
276:       assertNotSame(vecInt1, iVecInt2);
277:       assertSame(vecInt1, iVecInt0);
278:       assertArrayEquals(new int[] {(-1056), (-325), 1, 5, 1, (-325), 1, 5}, intArray0);
279:       assertEquals(8, intArray0.length);
280:       
281:       int int2 = 1733;
282:       int int3 = vecInt1.containsAt(int2);
283:       assertEquals((-1), vecInt1.size());
284:       assertFalse(vecInt1.isEmpty());
285:       assertFalse(intArray0.equals((Object)intArray1));
286:       assertFalse(int2 == int1);
287:       assertFalse(int2 == int0);
288:       assertFalse(int3 == int1);
289:       assertFalse(int3 == int0);
290:       assertFalse(int3 == int2);
291:       assertFalse(vecInt1.equals((Object)vecInt0));
292:       assertFalse(vecInt1.equals((Object)iVecInt1));
293:       assertFalse(vecInt1.equals((Object)vecInt2));
294:       assertFalse(vecInt1.equals((Object)iVecInt2));
295:       assertNotSame(intArray0, intArray1);
296:       assertSame(vecInt1, iVecInt3);
297:       assertNotSame(vecInt1, vecInt0);
298:       assertNotSame(vecInt1, iVecInt1);
299:       assertNotSame(vecInt1, vecInt2);
300:       assertNotSame(vecInt1, iVecInt2);
301:       assertSame(vecInt1, iVecInt0);
302:       assertArrayEquals(new int[] {(-1056), (-325), 1, 5, 1, (-325), 1, 5}, intArray0);
303:       assertEquals((-1), int3);
304:       assertEquals(8, intArray0.length);
305:       
306:       // Undeclared exception!
307:       try { 
308:         vecInt1.set(int0, intArray0[4]);
309:         fail("Expecting exception: AssertionError");
310:       
311:       } catch(AssertionError e) {
312:          //
313:          // no message in exception (getMessage() returned null)
314:          //
315:       }
316:   }
317: }
RegularFileObject[/tmp/EvoSuite_51_1550523574574/org/sat4j/core/VecInt_51_tmp__ESTest.java]
1: /**
2:  * Scaffolding file used to store all the setups needed to run 
3:  * tests automatically generated by EvoSuite
4:  * Mon Feb 18 20:59:34 GMT 2019
5:  */
6: 
7: package org.sat4j.core;
8: 
9: import org.evosuite.runtime.annotation.EvoSuiteClassExclude;
10: import org.junit.BeforeClass;
11: import org.junit.Before;
12: import org.junit.After;
13: import org.junit.AfterClass;
14: import org.evosuite.runtime.sandbox.Sandbox;
15: import org.evosuite.runtime.sandbox.Sandbox.SandboxMode;
16: 
17: @EvoSuiteClassExclude
18: public class VecInt_51_tmp__ESTest_scaffolding {
19: 
20:   @org.junit.Rule 
21:   public org.evosuite.runtime.vnet.NonFunctionalRequirementRule nfr = new org.evosuite.runtime.vnet.NonFunctionalRequirementRule();
22: 
23:   private static final java.util.Properties defaultProperties = (java.util.Properties) java.lang.System.getProperties().clone(); 
24: 
25:   private org.evosuite.runtime.thread.ThreadStopper threadStopper =  new org.evosuite.runtime.thread.ThreadStopper (org.evosuite.runtime.thread.KillSwitchHandler.getInstance(), 3000);
26: 
27: 
28:   @BeforeClass 
29:   public static void initEvoSuiteFramework() { 
30:     org.evosuite.runtime.RuntimeSettings.className = "org.sat4j.core.VecInt"; 
31:     org.evosuite.runtime.GuiSupport.initialize(); 
32:     org.evosuite.runtime.RuntimeSettings.maxNumberOfThreads = 100; 
33:     org.evosuite.runtime.RuntimeSettings.maxNumberOfIterationsPerLoop = 10000; 
34:     org.evosuite.runtime.RuntimeSettings.mockSystemIn = true; 
35:     org.evosuite.runtime.RuntimeSettings.sandboxMode = org.evosuite.runtime.sandbox.Sandbox.SandboxMode.RECOMMENDED; 
36:     org.evosuite.runtime.sandbox.Sandbox.initializeSecurityManagerForSUT(); 
37:     org.evosuite.runtime.classhandling.JDKClassResetter.init();
38:     setSystemProperties();
39:     initializeClasses();
40:     org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
41:   } 
42: 
43:   @AfterClass 
44:   public static void clearEvoSuiteFramework(){ 
45:     Sandbox.resetDefaultSecurityManager(); 
46:     java.lang.System.setProperties((java.util.Properties) defaultProperties.clone()); 
47:   } 
48: 
49:   @Before 
50:   public void initTestCase(){ 
51:     threadStopper.storeCurrentThreads();
52:     threadStopper.startRecordingTime();
53:     org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().initHandler(); 
54:     org.evosuite.runtime.sandbox.Sandbox.goingToExecuteSUTCode(); 
55:     setSystemProperties(); 
56:     org.evosuite.runtime.GuiSupport.setHeadless(); 
57:     org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
58:     org.evosuite.runtime.agent.InstrumentingAgent.activate(); 
59:   } 
60: 
61:   @After 
62:   public void doneWithTestCase(){ 
63:     threadStopper.killAndJoinClientThreads();
64:     org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().safeExecuteAddedHooks(); 
65:     org.evosuite.runtime.classhandling.JDKClassResetter.reset(); 
66:     resetClasses(); 
67:     org.evosuite.runtime.sandbox.Sandbox.doneWithExecutingSUTCode(); 
68:     org.evosuite.runtime.agent.InstrumentingAgent.deactivate(); 
69:     org.evosuite.runtime.GuiSupport.restoreHeadlessMode(); 
70:   } 
71: 
72:   public static void setSystemProperties() {
73:  
74:     java.lang.System.setProperties((java.util.Properties) defaultProperties.clone()); 
75:     java.lang.System.setProperty("user.dir", "/home/pderakhshanfar/common-uncommon-behaviour-testing-experiment"); 
76:     java.lang.System.setProperty("java.io.tmpdir", "/tmp"); 
77:   }
78: 
79:   private static void initializeClasses() {
80:     org.evosuite.runtime.classhandling.ClassStateSupport.initializeClasses(VecInt_51_tmp__ESTest_scaffolding.class.getClassLoader() ,
81:       "org.sat4j.core.ReadOnlyVecInt",
82:       "org.sat4j.specs.IteratorInt",
83:       "org.sat4j.core.VecInt$1",
84:       "org.sat4j.specs.IVecInt",
85:       "org.sat4j.core.EmptyVecInt",
86:       "org.sat4j.core.VecInt"
87:     );
88:   } 
89: 
90:   private static void resetClasses() {
91:     org.evosuite.runtime.classhandling.ClassResetter.getInstance().setClassLoader(VecInt_51_tmp__ESTest_scaffolding.class.getClassLoader()); 
92: 
93:     org.evosuite.runtime.classhandling.ClassStateSupport.resetClasses(
94:       "org.sat4j.core.EmptyVecInt",
95:       "org.sat4j.core.VecInt",
96:       "org.sat4j.core.VecInt$1",
97:       "org.sat4j.core.ReadOnlyVecInt"
98:     );
99:   }
100: }

[MASTER] 21:59:34.843 [logback-2] ERROR JUnitAnalyzer - Failed to compile test case:
VecInt vecInt0 = new VecInt();
assertNotNull(vecInt0);
assertEquals(0, vecInt0.size());
assertTrue(vecInt0.isEmpty());

int[] intArray0 = new int[8];
intArray0[0] = 1;
intArray0[1] = 1;
intArray0[2] = 1;
intArray0[3] = (-1056);
intArray0[4] = 1;
intArray0[5] = (-325);
intArray0[6] = 1;
intArray0[7] = 5;
VecInt vecInt1 = new VecInt(intArray0);
assertNotNull(vecInt1);
assertEquals(5, vecInt1.last());
assertFalse(vecInt1.isEmpty());
assertEquals(8, vecInt1.size());
assertFalse(vecInt1.equals((Object)vecInt0));
assertArrayEquals(new int[] {1, 1, 1, (-1056), 1, (-325), 1, 5}, intArray0);
assertEquals(8, intArray0.length);

IVecInt iVecInt0 = vecInt1.push(1);
assertNotNull(iVecInt0);
assertFalse(vecInt1.isEmpty());
assertEquals(1, vecInt1.last());
assertEquals(9, vecInt1.size());
assertEquals(9, iVecInt0.size());
assertEquals(1, iVecInt0.last());
assertFalse(iVecInt0.isEmpty());
assertFalse(vecInt1.equals((Object)vecInt0));
assertFalse(iVecInt0.equals((Object)vecInt0));
assertNotSame(vecInt1, vecInt0);
assertSame(vecInt1, iVecInt0);
assertSame(iVecInt0, vecInt1);
assertNotSame(iVecInt0, vecInt0);
assertArrayEquals(new int[] {1, 1, 1, (-1056), 1, (-325), 1, 5}, intArray0);
assertEquals(8, intArray0.length);

vecInt1.copyTo((IVecInt) vecInt0);
assertFalse(vecInt0.isEmpty());
assertEquals(9, vecInt0.size());
assertEquals(1, vecInt0.last());
assertFalse(vecInt1.isEmpty());
assertEquals(1, vecInt1.last());
assertEquals(9, vecInt1.size());
assertTrue(vecInt0.equals((Object)vecInt1));
assertTrue(vecInt0.equals((Object)iVecInt0));
assertTrue(vecInt1.equals((Object)vecInt0));
assertNotSame(vecInt0, vecInt1);
assertNotSame(vecInt0, iVecInt0);
assertNotSame(vecInt1, vecInt0);
assertSame(vecInt1, iVecInt0);
assertArrayEquals(new int[] {1, 1, 1, (-1056), 1, (-325), 1, 5}, intArray0);
assertEquals(8, intArray0.length);

IVecInt iVecInt1 = vecInt0.push(1111);
assertNotNull(iVecInt1);
assertFalse(vecInt0.isEmpty());
assertEquals(1111, vecInt0.last());
assertEquals(10, vecInt0.size());
assertEquals(1111, iVecInt1.last());
assertFalse(iVecInt1.isEmpty());
assertEquals(10, iVecInt1.size());
assertFalse(vecInt0.equals((Object)vecInt1));
assertFalse(vecInt0.equals((Object)iVecInt0));
assertFalse(iVecInt1.equals((Object)vecInt1));
assertFalse(iVecInt1.equals((Object)iVecInt0));
assertSame(vecInt0, iVecInt1);
assertNotSame(vecInt0, vecInt1);
assertNotSame(vecInt0, iVecInt0);
assertNotSame(iVecInt1, vecInt1);
assertNotSame(iVecInt1, iVecInt0);
assertSame(iVecInt1, vecInt0);

VecInt vecInt2 = new VecInt();
assertNotNull(vecInt2);
assertTrue(vecInt2.isEmpty());
assertEquals(0, vecInt2.size());
assertFalse(vecInt2.equals((Object)vecInt1));
assertFalse(vecInt2.equals((Object)iVecInt0));
assertFalse(vecInt2.equals((Object)vecInt0));
assertFalse(vecInt2.equals((Object)iVecInt1));

int int0 = vecInt2.size();
assertTrue(vecInt2.isEmpty());
assertEquals(0, vecInt2.size());
assertFalse(vecInt2.equals((Object)vecInt1));
assertFalse(vecInt2.equals((Object)iVecInt0));
assertFalse(vecInt2.equals((Object)vecInt0));
assertFalse(vecInt2.equals((Object)iVecInt1));
assertNotSame(vecInt2, vecInt1);
assertNotSame(vecInt2, iVecInt0);
assertNotSame(vecInt2, vecInt0);
assertNotSame(vecInt2, iVecInt1);
assertEquals(0, int0);

IteratorInt iteratorInt0 = vecInt2.iterator();
assertNotNull(iteratorInt0);
assertTrue(vecInt2.isEmpty());
assertEquals(0, vecInt2.size());
assertFalse(vecInt2.equals((Object)vecInt1));
assertFalse(vecInt2.equals((Object)iVecInt0));
assertFalse(vecInt2.equals((Object)vecInt0));
assertFalse(vecInt2.equals((Object)iVecInt1));
assertNotSame(vecInt2, vecInt1);
assertNotSame(vecInt2, iVecInt0);
assertNotSame(vecInt2, vecInt0);
assertNotSame(vecInt2, iVecInt1);

vecInt2.pushAll(vecInt0);
assertFalse(vecInt0.isEmpty());
assertEquals(1111, vecInt0.last());
assertEquals(10, vecInt0.size());
assertFalse(vecInt2.isEmpty());
assertEquals(1111, vecInt2.last());
assertEquals(10, vecInt2.size());
assertFalse(vecInt0.equals((Object)vecInt1));
assertFalse(vecInt0.equals((Object)iVecInt0));
assertTrue(vecInt0.equals((Object)vecInt2));
assertFalse(vecInt2.equals((Object)vecInt1));
assertTrue(vecInt2.equals((Object)iVecInt1));
assertTrue(vecInt2.equals((Object)vecInt0));
assertFalse(vecInt2.equals((Object)iVecInt0));
assertSame(vecInt0, iVecInt1);
assertNotSame(vecInt0, vecInt1);
assertNotSame(vecInt0, vecInt2);
assertNotSame(vecInt0, iVecInt0);
assertNotSame(vecInt2, vecInt1);
assertNotSame(vecInt2, iVecInt0);
assertNotSame(vecInt2, vecInt0);
assertNotSame(vecInt2, iVecInt1);

vecInt1.sortUnique();
assertEquals(4, vecInt1.size());
assertEquals(5, vecInt1.last());
assertFalse(vecInt1.isEmpty());
assertFalse(vecInt1.equals((Object)vecInt0));
assertFalse(vecInt1.equals((Object)iVecInt1));
assertFalse(vecInt1.equals((Object)vecInt2));
assertNotSame(vecInt1, vecInt0);
assertNotSame(vecInt1, iVecInt1);
assertNotSame(vecInt1, vecInt2);
assertSame(vecInt1, iVecInt0);
assertArrayEquals(new int[] {1, 1, 1, (-1056), 1, (-325), 1, 5}, intArray0);
assertEquals(8, intArray0.length);

boolean boolean0 = vecInt1.contains(5);
assertEquals(4, vecInt1.size());
assertEquals(5, vecInt1.last());
assertFalse(vecInt1.isEmpty());
assertFalse(vecInt1.equals((Object)vecInt0));
assertFalse(vecInt1.equals((Object)iVecInt1));
assertFalse(vecInt1.equals((Object)vecInt2));
assertNotSame(vecInt1, vecInt0);
assertNotSame(vecInt1, iVecInt1);
assertNotSame(vecInt1, vecInt2);
assertSame(vecInt1, iVecInt0);
assertArrayEquals(new int[] {1, 1, 1, (-1056), 1, (-325), 1, 5}, intArray0);
assertTrue(boolean0);
assertEquals(8, intArray0.length);

int int1 = 0;
IVecInt iVecInt2 = vecInt0.push(1160);
assertNotNull(iVecInt2);
assertFalse(vecInt0.isEmpty());
assertEquals(1160, vecInt0.last());
assertEquals(11, vecInt0.size());
assertEquals(1160, iVecInt2.last());
assertEquals(11, iVecInt2.size());
assertFalse(iVecInt2.isEmpty());
assertFalse(vecInt0.equals((Object)vecInt1));
assertFalse(vecInt0.equals((Object)vecInt2));
assertFalse(vecInt0.equals((Object)iVecInt0));
assertFalse(iVecInt2.equals((Object)iVecInt0));
assertFalse(iVecInt2.equals((Object)vecInt1));
assertFalse(iVecInt2.equals((Object)vecInt2));
assertSame(vecInt0, iVecInt1);
assertSame(vecInt0, iVecInt2);
assertNotSame(vecInt0, vecInt1);
assertNotSame(vecInt0, vecInt2);
assertNotSame(vecInt0, iVecInt0);
assertNotSame(iVecInt2, iVecInt0);
assertNotSame(iVecInt2, vecInt1);
assertSame(iVecInt2, iVecInt1);
assertSame(iVecInt2, vecInt0);
assertNotSame(iVecInt2, vecInt2);

int[] intArray1 = VecInt.access$100(vecInt1);
assertNotNull(intArray1);
assertEquals(4, vecInt1.size());
assertEquals(5, vecInt1.last());
assertFalse(vecInt1.isEmpty());
assertFalse(intArray1.equals((Object)intArray0));
assertFalse(vecInt1.equals((Object)vecInt0));
assertFalse(vecInt1.equals((Object)iVecInt1));
assertFalse(vecInt1.equals((Object)vecInt2));
assertFalse(vecInt1.equals((Object)iVecInt2));
assertNotSame(intArray0, intArray1);
assertNotSame(intArray1, intArray0);
assertNotSame(vecInt1, vecInt0);
assertNotSame(vecInt1, iVecInt1);
assertNotSame(vecInt1, vecInt2);
assertNotSame(vecInt1, iVecInt2);
assertSame(vecInt1, iVecInt0);
assertArrayEquals(new int[] {1, 1, 1, (-1056), 1, (-325), 1, 5}, intArray0);
assertEquals(8, intArray0.length);
assertEquals(16, intArray1.length);

vecInt1.moveTo(intArray0);
assertEquals(0, vecInt1.size());
assertTrue(vecInt1.isEmpty());
assertFalse(intArray0.equals((Object)intArray1));
assertFalse(vecInt1.equals((Object)vecInt0));
assertFalse(vecInt1.equals((Object)iVecInt1));
assertFalse(vecInt1.equals((Object)vecInt2));
assertFalse(vecInt1.equals((Object)iVecInt2));
assertNotSame(intArray0, intArray1);
assertNotSame(vecInt1, vecInt0);
assertNotSame(vecInt1, iVecInt1);
assertNotSame(vecInt1, vecInt2);
assertNotSame(vecInt1, iVecInt2);
assertSame(vecInt1, iVecInt0);
assertArrayEquals(new int[] {(-1056), (-325), 1, 5, 1, (-325), 1, 5}, intArray0);
assertEquals(8, intArray0.length);

IVecInt iVecInt3 = vecInt1.pop();
assertNotNull(iVecInt3);
assertFalse(iVecInt3.isEmpty());
assertEquals((-1), iVecInt3.size());
assertEquals((-1), vecInt1.size());
assertFalse(vecInt1.isEmpty());
assertFalse(intArray0.equals((Object)intArray1));
assertFalse(iVecInt3.equals((Object)iVecInt1));
assertFalse(iVecInt3.equals((Object)iVecInt2));
assertFalse(iVecInt3.equals((Object)vecInt0));
assertFalse(iVecInt3.equals((Object)vecInt2));
assertFalse(vecInt1.equals((Object)vecInt0));
assertFalse(vecInt1.equals((Object)iVecInt1));
assertFalse(vecInt1.equals((Object)vecInt2));
assertFalse(vecInt1.equals((Object)iVecInt2));
assertNotSame(intArray0, intArray1);
assertNotSame(iVecInt3, iVecInt1);
assertNotSame(iVecInt3, iVecInt2);
assertSame(iVecInt3, iVecInt0);
assertSame(iVecInt3, vecInt1);
assertNotSame(iVecInt3, vecInt0);
assertNotSame(iVecInt3, vecInt2);
assertSame(vecInt1, iVecInt3);
assertNotSame(vecInt1, vecInt0);
assertNotSame(vecInt1, iVecInt1);
assertNotSame(vecInt1, vecInt2);
assertNotSame(vecInt1, iVecInt2);
assertSame(vecInt1, iVecInt0);
assertArrayEquals(new int[] {(-1056), (-325), 1, 5, 1, (-325), 1, 5}, intArray0);
assertEquals(8, intArray0.length);

int int2 = 1733;
int int3 = vecInt1.containsAt(int2);
assertEquals((-1), vecInt1.size());
assertFalse(vecInt1.isEmpty());
assertFalse(intArray0.equals((Object)intArray1));
assertFalse(int2 == int1);
assertFalse(int2 == int0);
assertFalse(int3 == int1);
assertFalse(int3 == int0);
assertFalse(int3 == int2);
assertFalse(vecInt1.equals((Object)vecInt0));
assertFalse(vecInt1.equals((Object)iVecInt1));
assertFalse(vecInt1.equals((Object)vecInt2));
assertFalse(vecInt1.equals((Object)iVecInt2));
assertNotSame(intArray0, intArray1);
assertSame(vecInt1, iVecInt3);
assertNotSame(vecInt1, vecInt0);
assertNotSame(vecInt1, iVecInt1);
assertNotSame(vecInt1, vecInt2);
assertNotSame(vecInt1, iVecInt2);
assertSame(vecInt1, iVecInt0);
assertArrayEquals(new int[] {(-1056), (-325), 1, 5, 1, (-325), 1, 5}, intArray0);
assertEquals((-1), int3);
assertEquals(8, intArray0.length);

vecInt1.set(int0, intArray0[4]);

[MASTER] 21:59:39.510 [logback-2] ERROR JUnitAnalyzer - Compilation failed on compilation units: [RegularFileObject[/tmp/EvoSuite_67_1550523579466/org/sat4j/core/VecInt_67_tmp__ESTest.java], RegularFileObject[/tmp/EvoSuite_67_1550523579466/org/sat4j/core/VecInt_67_tmp__ESTest_scaffolding.java]]
[MASTER] 21:59:39.510 [logback-2] ERROR JUnitAnalyzer - Classpath: bins/sat4j/org.ow2.sat4j.core-2.3.6-SNAPSHOT.jar:bins/sat4j/org.ow2.sat4j.core-2.3.6-SNAPSHOT-tests.jar:/home/pderakhshanfar/common-uncommon-behaviour-testing-experiment/evosuite-master-1.0.7-SNAPSHOT.jar:/home/pderakhshanfar/common-uncommon-behaviour-testing-experiment/bins/sat4j/org.ow2.sat4j.core-2.3.6-SNAPSHOT.jar:/home/pderakhshanfar/common-uncommon-behaviour-testing-experiment/bins/sat4j/org.ow2.sat4j.core-2.3.6-SNAPSHOT-tests.jar
[MASTER] 21:59:39.510 [logback-2] ERROR JUnitAnalyzer - evosuiteCP: /home/pderakhshanfar/common-uncommon-behaviour-testing-experiment/evosuite-master-1.0.7-SNAPSHOT.jar:/home/pderakhshanfar/common-uncommon-behaviour-testing-experiment/bins/sat4j/org.ow2.sat4j.core-2.3.6-SNAPSHOT.jar:/home/pderakhshanfar/common-uncommon-behaviour-testing-experiment/bins/sat4j/org.ow2.sat4j.core-2.3.6-SNAPSHOT-tests.jar
[MASTER] 21:59:39.518 [logback-2] ERROR JUnitAnalyzer - Diagnostic: cannot find symbol
  symbol:   method access$000(org.sat4j.core.VecInt)
  location: class org.sat4j.core.VecInt: 24
[MASTER] 21:59:39.519 [logback-2] ERROR JUnitAnalyzer - RegularFileObject[/tmp/EvoSuite_67_1550523579466/org/sat4j/core/VecInt_67_tmp__ESTest.java]
1: /*
2:  * This file was automatically generated by EvoSuite
3:  * Mon Feb 18 20:59:39 GMT 2019
4:  */
5: 
6: package org.sat4j.core;
7: 
8: import org.junit.Test;
9: import static org.junit.Assert.*;
10: import static org.evosuite.runtime.EvoAssertions.*;
11: import org.evosuite.runtime.EvoRunner;
12: import org.evosuite.runtime.EvoRunnerParameters;
13: import org.junit.runner.RunWith;
14: import org.sat4j.core.VecInt;
15: 
16: @RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, useJEE = true) 
17: public class VecInt_67_tmp__ESTest extends VecInt_67_tmp__ESTest_scaffolding {
18: 
19:   @Test(timeout = 4000)
20:   public void test0()  throws Throwable  {
21:       VecInt vecInt0 = null;
22:       // Undeclared exception!
23:       try { 
24:         VecInt.access$000((VecInt) null);
25:         fail("Expecting exception: NullPointerException");
26:       
27:       } catch(NullPointerException e) {
28:          //
29:          // no message in exception (getMessage() returned null)
30:          //
31:          verifyException("org.sat4j.core.VecInt", e);
32:       }
33:   }
34: }
RegularFileObject[/tmp/EvoSuite_67_1550523579466/org/sat4j/core/VecInt_67_tmp__ESTest.java]
1: /**
2:  * Scaffolding file used to store all the setups needed to run 
3:  * tests automatically generated by EvoSuite
4:  * Mon Feb 18 20:59:39 GMT 2019
5:  */
6: 
7: package org.sat4j.core;
8: 
9: import org.evosuite.runtime.annotation.EvoSuiteClassExclude;
10: import org.junit.BeforeClass;
11: import org.junit.Before;
12: import org.junit.After;
13: import org.junit.AfterClass;
14: import org.evosuite.runtime.sandbox.Sandbox;
15: import org.evosuite.runtime.sandbox.Sandbox.SandboxMode;
16: 
17: @EvoSuiteClassExclude
18: public class VecInt_67_tmp__ESTest_scaffolding {
19: 
20:   @org.junit.Rule 
21:   public org.evosuite.runtime.vnet.NonFunctionalRequirementRule nfr = new org.evosuite.runtime.vnet.NonFunctionalRequirementRule();
22: 
23:   private static final java.util.Properties defaultProperties = (java.util.Properties) java.lang.System.getProperties().clone(); 
24: 
25:   private org.evosuite.runtime.thread.ThreadStopper threadStopper =  new org.evosuite.runtime.thread.ThreadStopper (org.evosuite.runtime.thread.KillSwitchHandler.getInstance(), 3000);
26: 
27: 
28:   @BeforeClass 
29:   public static void initEvoSuiteFramework() { 
30:     org.evosuite.runtime.RuntimeSettings.className = "org.sat4j.core.VecInt"; 
31:     org.evosuite.runtime.GuiSupport.initialize(); 
32:     org.evosuite.runtime.RuntimeSettings.maxNumberOfThreads = 100; 
33:     org.evosuite.runtime.RuntimeSettings.maxNumberOfIterationsPerLoop = 10000; 
34:     org.evosuite.runtime.RuntimeSettings.mockSystemIn = true; 
35:     org.evosuite.runtime.RuntimeSettings.sandboxMode = org.evosuite.runtime.sandbox.Sandbox.SandboxMode.RECOMMENDED; 
36:     org.evosuite.runtime.sandbox.Sandbox.initializeSecurityManagerForSUT(); 
37:     org.evosuite.runtime.classhandling.JDKClassResetter.init();
38:     setSystemProperties();
39:     initializeClasses();
40:     org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
41:   } 
42: 
43:   @AfterClass 
44:   public static void clearEvoSuiteFramework(){ 
45:     Sandbox.resetDefaultSecurityManager(); 
46:     java.lang.System.setProperties((java.util.Properties) defaultProperties.clone()); 
47:   } 
48: 
49:   @Before 
50:   public void initTestCase(){ 
51:     threadStopper.storeCurrentThreads();
52:     threadStopper.startRecordingTime();
53:     org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().initHandler(); 
54:     org.evosuite.runtime.sandbox.Sandbox.goingToExecuteSUTCode(); 
55:     setSystemProperties(); 
56:     org.evosuite.runtime.GuiSupport.setHeadless(); 
57:     org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
58:     org.evosuite.runtime.agent.InstrumentingAgent.activate(); 
59:   } 
60: 
61:   @After 
62:   public void doneWithTestCase(){ 
63:     threadStopper.killAndJoinClientThreads();
64:     org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().safeExecuteAddedHooks(); 
65:     org.evosuite.runtime.classhandling.JDKClassResetter.reset(); 
66:     resetClasses(); 
67:     org.evosuite.runtime.sandbox.Sandbox.doneWithExecutingSUTCode(); 
68:     org.evosuite.runtime.agent.InstrumentingAgent.deactivate(); 
69:     org.evosuite.runtime.GuiSupport.restoreHeadlessMode(); 
70:   } 
71: 
72:   public static void setSystemProperties() {
73:  
74:     java.lang.System.setProperties((java.util.Properties) defaultProperties.clone()); 
75:     java.lang.System.setProperty("user.dir", "/home/pderakhshanfar/common-uncommon-behaviour-testing-experiment"); 
76:     java.lang.System.setProperty("java.io.tmpdir", "/tmp"); 
77:   }
78: 
79:   private static void initializeClasses() {
80:     org.evosuite.runtime.classhandling.ClassStateSupport.initializeClasses(VecInt_67_tmp__ESTest_scaffolding.class.getClassLoader() ,
81:       "org.sat4j.core.ReadOnlyVecInt",
82:       "org.sat4j.specs.IteratorInt",
83:       "org.sat4j.core.VecInt$1",
84:       "org.sat4j.specs.IVecInt",
85:       "org.sat4j.core.EmptyVecInt",
86:       "org.sat4j.core.VecInt"
87:     );
88:   } 
89: 
90:   private static void resetClasses() {
91:     org.evosuite.runtime.classhandling.ClassResetter.getInstance().setClassLoader(VecInt_67_tmp__ESTest_scaffolding.class.getClassLoader()); 
92: 
93:     org.evosuite.runtime.classhandling.ClassStateSupport.resetClasses(
94:       "org.sat4j.core.EmptyVecInt",
95:       "org.sat4j.core.VecInt",
96:       "org.sat4j.core.VecInt$1",
97:       "org.sat4j.core.ReadOnlyVecInt"
98:     );
99:   }
100: }

[MASTER] 21:59:39.519 [logback-2] ERROR JUnitAnalyzer - Failed to compile test case:
VecInt vecInt0 = null;
VecInt.access$000((VecInt) null);

[MASTER] 21:59:46.892 [logback-2] ERROR JUnitAnalyzer - Compilation failed on compilation units: [RegularFileObject[/tmp/EvoSuite_110_1550523586823/org/sat4j/core/VecInt_110_tmp__ESTest.java], RegularFileObject[/tmp/EvoSuite_110_1550523586823/org/sat4j/core/VecInt_110_tmp__ESTest_scaffolding.java]]
[MASTER] 21:59:46.892 [logback-2] ERROR JUnitAnalyzer - Classpath: bins/sat4j/org.ow2.sat4j.core-2.3.6-SNAPSHOT.jar:bins/sat4j/org.ow2.sat4j.core-2.3.6-SNAPSHOT-tests.jar:/home/pderakhshanfar/common-uncommon-behaviour-testing-experiment/evosuite-master-1.0.7-SNAPSHOT.jar:/home/pderakhshanfar/common-uncommon-behaviour-testing-experiment/bins/sat4j/org.ow2.sat4j.core-2.3.6-SNAPSHOT.jar:/home/pderakhshanfar/common-uncommon-behaviour-testing-experiment/bins/sat4j/org.ow2.sat4j.core-2.3.6-SNAPSHOT-tests.jar
[MASTER] 21:59:46.892 [logback-2] ERROR JUnitAnalyzer - evosuiteCP: /home/pderakhshanfar/common-uncommon-behaviour-testing-experiment/evosuite-master-1.0.7-SNAPSHOT.jar:/home/pderakhshanfar/common-uncommon-behaviour-testing-experiment/bins/sat4j/org.ow2.sat4j.core-2.3.6-SNAPSHOT.jar:/home/pderakhshanfar/common-uncommon-behaviour-testing-experiment/bins/sat4j/org.ow2.sat4j.core-2.3.6-SNAPSHOT-tests.jar
[MASTER] 21:59:46.905 [logback-2] ERROR JUnitAnalyzer - Diagnostic: cannot find symbol
  symbol:   method access$100(org.sat4j.core.VecInt)
  location: class org.sat4j.core.VecInt: 44
[MASTER] 21:59:46.906 [logback-2] ERROR JUnitAnalyzer - RegularFileObject[/tmp/EvoSuite_110_1550523586823/org/sat4j/core/VecInt_110_tmp__ESTest.java]
1: /*
2:  * This file was automatically generated by EvoSuite
3:  * Mon Feb 18 20:59:46 GMT 2019
4:  */
5: 
6: package org.sat4j.core;
7: 
8: import org.junit.Test;
9: import static org.junit.Assert.*;
10: import static org.evosuite.runtime.EvoAssertions.*;
11: import org.evosuite.runtime.EvoRunner;
12: import org.evosuite.runtime.EvoRunnerParameters;
13: import org.junit.runner.RunWith;
14: import org.sat4j.core.VecInt;
15: 
16: @RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, useJEE = true) 
17: public class VecInt_110_tmp__ESTest extends VecInt_110_tmp__ESTest_scaffolding {
18: 
19:   @Test(timeout = 4000)
20:   public void test0()  throws Throwable  {
21:       VecInt vecInt0 = new VecInt();
22:       assertNotNull(vecInt0);
23:       assertEquals(0, vecInt0.size());
24:       assertTrue(vecInt0.isEmpty());
25:       
26:       int int0 = (-4145);
27:       VecInt vecInt1 = new VecInt();
28:       assertNotNull(vecInt1);
29:       assertTrue(vecInt1.isEmpty());
30:       assertEquals(0, vecInt1.size());
31:       assertTrue(vecInt1.equals((Object)vecInt0));
32:       
33:       String string0 = vecInt0.toString();
34:       assertNotNull(string0);
35:       assertEquals(0, vecInt0.size());
36:       assertTrue(vecInt0.isEmpty());
37:       assertTrue(vecInt0.equals((Object)vecInt1));
38:       assertNotSame(vecInt0, vecInt1);
39:       assertEquals("", string0);
40:       
41:       VecInt vecInt2 = null;
42:       // Undeclared exception!
43:       try { 
44:         VecInt.access$100((VecInt) null);
45:         fail("Expecting exception: NullPointerException");
46:       
47:       } catch(NullPointerException e) {
48:          //
49:          // no message in exception (getMessage() returned null)
50:          //
51:          verifyException("org.sat4j.core.VecInt", e);
52:       }
53:   }
54: }
RegularFileObject[/tmp/EvoSuite_110_1550523586823/org/sat4j/core/VecInt_110_tmp__ESTest.java]
1: /**
2:  * Scaffolding file used to store all the setups needed to run 
3:  * tests automatically generated by EvoSuite
4:  * Mon Feb 18 20:59:46 GMT 2019
5:  */
6: 
7: package org.sat4j.core;
8: 
9: import org.evosuite.runtime.annotation.EvoSuiteClassExclude;
10: import org.junit.BeforeClass;
11: import org.junit.Before;
12: import org.junit.After;
13: import org.junit.AfterClass;
14: import org.evosuite.runtime.sandbox.Sandbox;
15: import org.evosuite.runtime.sandbox.Sandbox.SandboxMode;
16: 
17: @EvoSuiteClassExclude
18: public class VecInt_110_tmp__ESTest_scaffolding {
19: 
20:   @org.junit.Rule 
21:   public org.evosuite.runtime.vnet.NonFunctionalRequirementRule nfr = new org.evosuite.runtime.vnet.NonFunctionalRequirementRule();
22: 
23:   private static final java.util.Properties defaultProperties = (java.util.Properties) java.lang.System.getProperties().clone(); 
24: 
25:   private org.evosuite.runtime.thread.ThreadStopper threadStopper =  new org.evosuite.runtime.thread.ThreadStopper (org.evosuite.runtime.thread.KillSwitchHandler.getInstance(), 3000);
26: 
27: 
28:   @BeforeClass 
29:   public static void initEvoSuiteFramework() { 
30:     org.evosuite.runtime.RuntimeSettings.className = "org.sat4j.core.VecInt"; 
31:     org.evosuite.runtime.GuiSupport.initialize(); 
32:     org.evosuite.runtime.RuntimeSettings.maxNumberOfThreads = 100; 
33:     org.evosuite.runtime.RuntimeSettings.maxNumberOfIterationsPerLoop = 10000; 
34:     org.evosuite.runtime.RuntimeSettings.mockSystemIn = true; 
35:     org.evosuite.runtime.RuntimeSettings.sandboxMode = org.evosuite.runtime.sandbox.Sandbox.SandboxMode.RECOMMENDED; 
36:     org.evosuite.runtime.sandbox.Sandbox.initializeSecurityManagerForSUT(); 
37:     org.evosuite.runtime.classhandling.JDKClassResetter.init();
38:     setSystemProperties();
39:     initializeClasses();
40:     org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
41:   } 
42: 
43:   @AfterClass 
44:   public static void clearEvoSuiteFramework(){ 
45:     Sandbox.resetDefaultSecurityManager(); 
46:     java.lang.System.setProperties((java.util.Properties) defaultProperties.clone()); 
47:   } 
48: 
49:   @Before 
50:   public void initTestCase(){ 
51:     threadStopper.storeCurrentThreads();
52:     threadStopper.startRecordingTime();
53:     org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().initHandler(); 
54:     org.evosuite.runtime.sandbox.Sandbox.goingToExecuteSUTCode(); 
55:     setSystemProperties(); 
56:     org.evosuite.runtime.GuiSupport.setHeadless(); 
57:     org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
58:     org.evosuite.runtime.agent.InstrumentingAgent.activate(); 
59:   } 
60: 
61:   @After 
62:   public void doneWithTestCase(){ 
63:     threadStopper.killAndJoinClientThreads();
64:     org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().safeExecuteAddedHooks(); 
65:     org.evosuite.runtime.classhandling.JDKClassResetter.reset(); 
66:     resetClasses(); 
67:     org.evosuite.runtime.sandbox.Sandbox.doneWithExecutingSUTCode(); 
68:     org.evosuite.runtime.agent.InstrumentingAgent.deactivate(); 
69:     org.evosuite.runtime.GuiSupport.restoreHeadlessMode(); 
70:   } 
71: 
72:   public static void setSystemProperties() {
73:  
74:     java.lang.System.setProperties((java.util.Properties) defaultProperties.clone()); 
75:     java.lang.System.setProperty("user.dir", "/home/pderakhshanfar/common-uncommon-behaviour-testing-experiment"); 
76:     java.lang.System.setProperty("java.io.tmpdir", "/tmp"); 
77:   }
78: 
79:   private static void initializeClasses() {
80:     org.evosuite.runtime.classhandling.ClassStateSupport.initializeClasses(VecInt_110_tmp__ESTest_scaffolding.class.getClassLoader() ,
81:       "org.sat4j.core.ReadOnlyVecInt",
82:       "org.sat4j.specs.IteratorInt",
83:       "org.sat4j.core.VecInt$1",
84:       "org.sat4j.specs.IVecInt",
85:       "org.sat4j.core.EmptyVecInt",
86:       "org.sat4j.core.VecInt"
87:     );
88:   } 
89: 
90:   private static void resetClasses() {
91:     org.evosuite.runtime.classhandling.ClassResetter.getInstance().setClassLoader(VecInt_110_tmp__ESTest_scaffolding.class.getClassLoader()); 
92: 
93:     org.evosuite.runtime.classhandling.ClassStateSupport.resetClasses(
94:       "org.sat4j.core.EmptyVecInt",
95:       "org.sat4j.core.VecInt",
96:       "org.sat4j.core.VecInt$1",
97:       "org.sat4j.core.ReadOnlyVecInt"
98:     );
99:   }
100: }

[MASTER] 21:59:46.906 [logback-2] ERROR JUnitAnalyzer - Failed to compile test case:
VecInt vecInt0 = new VecInt();
assertNotNull(vecInt0);
assertEquals(0, vecInt0.size());
assertTrue(vecInt0.isEmpty());

int int0 = (-4145);
VecInt vecInt1 = new VecInt();
assertNotNull(vecInt1);
assertTrue(vecInt1.isEmpty());
assertEquals(0, vecInt1.size());
assertTrue(vecInt1.equals((Object)vecInt0));

String string0 = vecInt0.toString();
assertNotNull(string0);
assertEquals(0, vecInt0.size());
assertTrue(vecInt0.isEmpty());
assertTrue(vecInt0.equals((Object)vecInt1));
assertNotSame(vecInt0, vecInt1);
assertEquals("", string0);

VecInt vecInt2 = null;
VecInt.access$100((VecInt) null);

[MASTER] 22:00:12.181 [logback-2] ERROR JUnitAnalyzer - Ran out of time while checking tests
