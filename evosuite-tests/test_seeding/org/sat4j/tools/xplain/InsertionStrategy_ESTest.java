/*
 * This file was automatically generated by EvoSuite
 * Sun Feb 17 07:44:18 GMT 2019
 */

package org.sat4j.tools.xplain;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.HashMap;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;
import org.sat4j.LightFactory;
import org.sat4j.core.VecInt;
import org.sat4j.minisat.constraints.CardinalityDataStructure;
import org.sat4j.specs.ISolver;
import org.sat4j.specs.IVecInt;
import org.sat4j.tools.FullClauseSelectorSolver;
import org.sat4j.tools.IVisualizationTool;
import org.sat4j.tools.StatisticsSolver;
import org.sat4j.tools.xplain.InsertionStrategy;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class InsertionStrategy_ESTest extends InsertionStrategy_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      InsertionStrategy insertionStrategy0 = new InsertionStrategy();
      VecInt vecInt0 = new VecInt(1, 2416);
      StatisticsSolver statisticsSolver0 = mock(StatisticsSolver.class, new ViolatedAssumptionAnswer());
      doReturn(vecInt0).when(statisticsSolver0).unsatExplanation();
      FullClauseSelectorSolver<StatisticsSolver> fullClauseSelectorSolver0 = new FullClauseSelectorSolver<StatisticsSolver>(statisticsSolver0, true);
      IVecInt iVecInt0 = fullClauseSelectorSolver0.getLastClause();
      HashMap<Integer, CardinalityDataStructure> hashMap0 = new HashMap<Integer, CardinalityDataStructure>();
      IVecInt iVecInt1 = insertionStrategy0.explain(fullClauseSelectorSolver0, hashMap0, iVecInt0);
      assertEquals((-2416), iVecInt1.last());
      assertEquals(1, iVecInt1.size());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      InsertionStrategy insertionStrategy0 = new InsertionStrategy();
      VecInt vecInt0 = new VecInt(2416, 2416);
      StatisticsSolver statisticsSolver0 = mock(StatisticsSolver.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(statisticsSolver0).isSatisfiable(any(org.sat4j.specs.IVecInt.class));
      doReturn(false).when(statisticsSolver0).isVerbose();
      doReturn(vecInt0).when(statisticsSolver0).unsatExplanation();
      FullClauseSelectorSolver<StatisticsSolver> fullClauseSelectorSolver0 = new FullClauseSelectorSolver<StatisticsSolver>(statisticsSolver0, true);
      HashMap<Integer, CardinalityDataStructure> hashMap0 = new HashMap<Integer, CardinalityDataStructure>();
      insertionStrategy0.explain(fullClauseSelectorSolver0, hashMap0, vecInt0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      InsertionStrategy insertionStrategy0 = new InsertionStrategy();
      VecInt vecInt0 = new VecInt(4764, 8);
      StatisticsSolver statisticsSolver0 = new StatisticsSolver();
      HashMap<Integer, CardinalityDataStructure> hashMap0 = new HashMap<Integer, CardinalityDataStructure>();
      // Undeclared exception!
      try { 
        insertionStrategy0.explain(statisticsSolver0, hashMap0, vecInt0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Not implemented yet!
         //
         verifyException("org.sat4j.tools.StatisticsSolver", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      InsertionStrategy insertionStrategy0 = new InsertionStrategy();
      LightFactory lightFactory0 = LightFactory.instance();
      ISolver iSolver0 = lightFactory0.lightSolver();
      HashMap<Integer, Object> hashMap0 = new HashMap<Integer, Object>();
      // Undeclared exception!
      try { 
        insertionStrategy0.explain(iSolver0, hashMap0, (IVecInt) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.tools.xplain.InsertionStrategy", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      InsertionStrategy insertionStrategy0 = new InsertionStrategy();
      StatisticsSolver statisticsSolver0 = new StatisticsSolver();
      VecInt vecInt0 = new VecInt();
      IVecInt iVecInt0 = vecInt0.pop();
      HashMap<Integer, CardinalityDataStructure> hashMap0 = new HashMap<Integer, CardinalityDataStructure>();
      // Undeclared exception!
      try { 
        insertionStrategy0.explain(statisticsSolver0, hashMap0, iVecInt0);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.core.VecInt", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      InsertionStrategy insertionStrategy0 = new InsertionStrategy();
      VecInt vecInt0 = new VecInt(19, 2416);
      StatisticsSolver statisticsSolver0 = mock(StatisticsSolver.class, new ViolatedAssumptionAnswer());
      doReturn("").when(statisticsSolver0).getLogPrefix();
      doReturn(true, true, false, true).when(statisticsSolver0).isSatisfiable(any(org.sat4j.specs.IVecInt.class));
      doReturn(true).when(statisticsSolver0).isVerbose();
      doReturn(vecInt0).when(statisticsSolver0).unsatExplanation();
      FullClauseSelectorSolver<StatisticsSolver> fullClauseSelectorSolver0 = new FullClauseSelectorSolver<StatisticsSolver>(statisticsSolver0, true);
      HashMap<Integer, CardinalityDataStructure> hashMap0 = new HashMap<Integer, CardinalityDataStructure>();
      // Undeclared exception!
      try { 
        insertionStrategy0.explain(fullClauseSelectorSolver0, hashMap0, vecInt0);
        fail("Expecting exception: AssertionError");
      
      } catch(AssertionError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      InsertionStrategy insertionStrategy0 = new InsertionStrategy();
      VecInt vecInt0 = new VecInt(19, 2416);
      StatisticsSolver statisticsSolver0 = mock(StatisticsSolver.class, new ViolatedAssumptionAnswer());
      doReturn("$S!1'Z").when(statisticsSolver0).getLogPrefix();
      doReturn(true, false, false, false).when(statisticsSolver0).isSatisfiable(any(org.sat4j.specs.IVecInt.class));
      doReturn(true, false).when(statisticsSolver0).isVerbose();
      doReturn(vecInt0).when(statisticsSolver0).unsatExplanation();
      FullClauseSelectorSolver<StatisticsSolver> fullClauseSelectorSolver0 = new FullClauseSelectorSolver<StatisticsSolver>(statisticsSolver0, true);
      HashMap<Integer, CardinalityDataStructure> hashMap0 = new HashMap<Integer, CardinalityDataStructure>();
      insertionStrategy0.explain(fullClauseSelectorSolver0, hashMap0, vecInt0);
      assertTrue(vecInt0.isEmpty());
      assertEquals(0, vecInt0.size());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      InsertionStrategy insertionStrategy0 = new InsertionStrategy();
      VecInt vecInt0 = new VecInt(19, 2416);
      StatisticsSolver statisticsSolver0 = mock(StatisticsSolver.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(statisticsSolver0).getLogPrefix();
      doReturn(false).when(statisticsSolver0).isSatisfiable(any(org.sat4j.specs.IVecInt.class));
      doReturn(true).when(statisticsSolver0).isVerbose();
      doReturn(vecInt0, (IVecInt) null).when(statisticsSolver0).unsatExplanation();
      FullClauseSelectorSolver<StatisticsSolver> fullClauseSelectorSolver0 = new FullClauseSelectorSolver<StatisticsSolver>(statisticsSolver0, true);
      HashMap<Integer, CardinalityDataStructure> hashMap0 = new HashMap<Integer, CardinalityDataStructure>();
      IVecInt iVecInt0 = insertionStrategy0.explain(fullClauseSelectorSolver0, hashMap0, vecInt0);
      // Undeclared exception!
      try { 
        insertionStrategy0.explain(fullClauseSelectorSolver0, hashMap0, iVecInt0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.tools.xplain.InsertionStrategy", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      InsertionStrategy insertionStrategy0 = new InsertionStrategy();
      VecInt vecInt0 = new VecInt(19, 2416);
      StatisticsSolver statisticsSolver0 = mock(StatisticsSolver.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(statisticsSolver0).getLogPrefix();
      doReturn(true).when(statisticsSolver0).isVerbose();
      doReturn(vecInt0).when(statisticsSolver0).unsatExplanation();
      FullClauseSelectorSolver<StatisticsSolver> fullClauseSelectorSolver0 = new FullClauseSelectorSolver<StatisticsSolver>(statisticsSolver0, true);
      IVecInt iVecInt0 = fullClauseSelectorSolver0.getLastClause();
      HashMap<Integer, CardinalityDataStructure> hashMap0 = new HashMap<Integer, CardinalityDataStructure>();
      // Undeclared exception!
      try { 
        insertionStrategy0.explain(fullClauseSelectorSolver0, hashMap0, iVecInt0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.sat4j.core.VecInt", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      InsertionStrategy insertionStrategy0 = new InsertionStrategy();
      VecInt vecInt0 = new VecInt(19, 2416);
      StatisticsSolver statisticsSolver0 = mock(StatisticsSolver.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(statisticsSolver0).getLogPrefix();
      doReturn(true, false, false, false).when(statisticsSolver0).isSatisfiable(any(org.sat4j.specs.IVecInt.class));
      doReturn(true, false).when(statisticsSolver0).isVerbose();
      doReturn(vecInt0).when(statisticsSolver0).unsatExplanation();
      HashMap<Integer, String> hashMap0 = new HashMap<Integer, String>();
      Integer integer0 = IVisualizationTool.NOTGOOD;
      hashMap0.put(integer0, "FNx ");
      insertionStrategy0.explain(statisticsSolver0, hashMap0, vecInt0);
      assertTrue(vecInt0.isEmpty());
      assertEquals(0, vecInt0.size());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      InsertionStrategy insertionStrategy0 = new InsertionStrategy();
      VecInt vecInt0 = new VecInt(19, (-977));
      StatisticsSolver statisticsSolver0 = mock(StatisticsSolver.class, new ViolatedAssumptionAnswer());
      doReturn((IVecInt) null).when(statisticsSolver0).unsatExplanation();
      FullClauseSelectorSolver<StatisticsSolver> fullClauseSelectorSolver0 = new FullClauseSelectorSolver<StatisticsSolver>(statisticsSolver0, true);
      IVecInt iVecInt0 = fullClauseSelectorSolver0.getLastClause();
      HashMap<Integer, CardinalityDataStructure> hashMap0 = new HashMap<Integer, CardinalityDataStructure>();
      // Undeclared exception!
      try { 
        insertionStrategy0.explain(fullClauseSelectorSolver0, hashMap0, iVecInt0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.tools.xplain.InsertionStrategy", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      InsertionStrategy insertionStrategy0 = new InsertionStrategy();
      VecInt vecInt0 = new VecInt(19, 2416);
      StatisticsSolver statisticsSolver0 = mock(StatisticsSolver.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(statisticsSolver0).isSatisfiable(any(org.sat4j.specs.IVecInt.class));
      doReturn(false).when(statisticsSolver0).isVerbose();
      doReturn(vecInt0).when(statisticsSolver0).unsatExplanation();
      FullClauseSelectorSolver<StatisticsSolver> fullClauseSelectorSolver0 = new FullClauseSelectorSolver<StatisticsSolver>(statisticsSolver0, false);
      HashMap<Integer, CardinalityDataStructure> hashMap0 = new HashMap<Integer, CardinalityDataStructure>();
      insertionStrategy0.explain(fullClauseSelectorSolver0, hashMap0, vecInt0);
      assertEquals(0, vecInt0.size());
      assertTrue(vecInt0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      InsertionStrategy insertionStrategy0 = new InsertionStrategy();
      String string0 = insertionStrategy0.toString();
      assertEquals("Replay (Insertion-based) minimization strategy", string0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      InsertionStrategy insertionStrategy0 = new InsertionStrategy();
      insertionStrategy0.cancelExplanationComputation();
      assertEquals("Replay (Insertion-based) minimization strategy", insertionStrategy0.toString());
  }
}
