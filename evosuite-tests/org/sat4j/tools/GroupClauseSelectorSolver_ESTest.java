/*
 * This file was automatically generated by EvoSuite
 * Mon Feb 18 22:30:39 GMT 2019
 */

package org.sat4j.tools;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.Collection;
import java.util.Map;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;
import org.sat4j.core.VecInt;
import org.sat4j.minisat.constraints.MixedDataStructureDanielHT;
import org.sat4j.opt.MaxSatDecorator;
import org.sat4j.specs.Constr;
import org.sat4j.specs.FakeConstr;
import org.sat4j.specs.IConstr;
import org.sat4j.specs.ISolver;
import org.sat4j.specs.IVecInt;
import org.sat4j.tools.AbstractMinimalModel;
import org.sat4j.tools.DimacsOutputSolver;
import org.sat4j.tools.DimacsStringSolver;
import org.sat4j.tools.FullClauseSelectorSolver;
import org.sat4j.tools.GroupClauseSelectorSolver;
import org.sat4j.tools.LexicoDecorator;
import org.sat4j.tools.ManyCore;
import org.sat4j.tools.Minimal4CardinalityModel;
import org.sat4j.tools.Minimal4InclusionModel;
import org.sat4j.tools.ModelIterator;
import org.sat4j.tools.ModelIteratorToSATAdapter;
import org.sat4j.tools.NegationDecorator;
import org.sat4j.tools.SolutionCounter;
import org.sat4j.tools.SolutionFoundListener;
import org.sat4j.tools.StatisticsSolver;
import org.sat4j.tools.SubModelIterator;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class GroupClauseSelectorSolver_ESTest extends GroupClauseSelectorSolver_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      ISolver iSolver0 = mock(ISolver.class, new ViolatedAssumptionAnswer());
      doReturn((int[]) null).when(iSolver0).modelWithInternalVariables();
      SolutionCounter solutionCounter0 = new SolutionCounter(iSolver0);
      GroupClauseSelectorSolver<SolutionCounter> groupClauseSelectorSolver0 = new GroupClauseSelectorSolver<SolutionCounter>(solutionCounter0);
      int[] intArray0 = groupClauseSelectorSolver0.model();
      assertNull(intArray0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      MixedDataStructureDanielHT mixedDataStructureDanielHT0 = new MixedDataStructureDanielHT();
      FullClauseSelectorSolver<Minimal4CardinalityModel> fullClauseSelectorSolver0 = new FullClauseSelectorSolver<Minimal4CardinalityModel>((Minimal4CardinalityModel) null, true);
      IVecInt iVecInt0 = fullClauseSelectorSolver0.getLastClause();
      Constr constr0 = mixedDataStructureDanielHT0.createUnregisteredCardinalityConstraint(iVecInt0, 639);
      int[] intArray0 = new int[6];
      FullClauseSelectorSolver<SubModelIterator> fullClauseSelectorSolver1 = (FullClauseSelectorSolver<SubModelIterator>) mock(FullClauseSelectorSolver.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(fullClauseSelectorSolver1).isSatisfiable(any(org.sat4j.specs.IVecInt.class));
      doReturn(constr0).when(fullClauseSelectorSolver1).addAtMost(any(org.sat4j.specs.IVecInt.class) , anyInt());
      doReturn((Object) intArray0, (Object) intArray0).when(fullClauseSelectorSolver1).modelWithInternalVariables();
      doReturn(2151, 0).when(fullClauseSelectorSolver1).nVars();
      doReturn(false).when(fullClauseSelectorSolver1).removeConstr(any(org.sat4j.specs.IConstr.class));
      GroupClauseSelectorSolver<FullClauseSelectorSolver<SubModelIterator>> groupClauseSelectorSolver0 = new GroupClauseSelectorSolver<FullClauseSelectorSolver<SubModelIterator>>(fullClauseSelectorSolver1);
      Minimal4CardinalityModel minimal4CardinalityModel0 = new Minimal4CardinalityModel(groupClauseSelectorSolver0);
      MaxSatDecorator maxSatDecorator0 = new MaxSatDecorator(minimal4CardinalityModel0, true);
      GroupClauseSelectorSolver<MaxSatDecorator> groupClauseSelectorSolver1 = new GroupClauseSelectorSolver<MaxSatDecorator>(maxSatDecorator0);
      int[] intArray1 = groupClauseSelectorSolver1.model();
      assertNotSame(intArray1, intArray0);
      assertArrayEquals(new int[] {0, 0, 0, 0, 0, 0}, intArray1);
      assertNotNull(intArray1);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      VecInt vecInt0 = new VecInt();
      ISolver iSolver0 = mock(ISolver.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(iSolver0).nextFreeVarId(anyBoolean());
      SolutionCounter solutionCounter0 = new SolutionCounter(iSolver0);
      GroupClauseSelectorSolver<SolutionCounter> groupClauseSelectorSolver0 = new GroupClauseSelectorSolver<SolutionCounter>(solutionCounter0);
      Integer integer0 = groupClauseSelectorSolver0.getGroupVar(vecInt0, 561);
      assertEquals(0, (int)integer0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      DimacsStringSolver dimacsStringSolver0 = new DimacsStringSolver();
      IVecInt iVecInt0 = AbstractMinimalModel.positiveLiterals(dimacsStringSolver0);
      GroupClauseSelectorSolver<DimacsStringSolver> groupClauseSelectorSolver0 = new GroupClauseSelectorSolver<DimacsStringSolver>(dimacsStringSolver0);
      Minimal4InclusionModel minimal4InclusionModel0 = new Minimal4InclusionModel(groupClauseSelectorSolver0, iVecInt0);
      GroupClauseSelectorSolver<AbstractMinimalModel> groupClauseSelectorSolver1 = new GroupClauseSelectorSolver<AbstractMinimalModel>(minimal4InclusionModel0);
      Integer integer0 = groupClauseSelectorSolver1.getGroupVar(iVecInt0, (-846));
      assertEquals(1, (int)integer0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      FullClauseSelectorSolver<Minimal4CardinalityModel> fullClauseSelectorSolver0 = new FullClauseSelectorSolver<Minimal4CardinalityModel>((Minimal4CardinalityModel) null, true);
      IVecInt iVecInt0 = fullClauseSelectorSolver0.getLastClause();
      FullClauseSelectorSolver<SubModelIterator> fullClauseSelectorSolver1 = (FullClauseSelectorSolver<SubModelIterator>) mock(FullClauseSelectorSolver.class, new ViolatedAssumptionAnswer());
      doReturn(2151, 0).when(fullClauseSelectorSolver1).nVars();
      doReturn((-1889)).when(fullClauseSelectorSolver1).nextFreeVarId(anyBoolean());
      GroupClauseSelectorSolver<FullClauseSelectorSolver<SubModelIterator>> groupClauseSelectorSolver0 = new GroupClauseSelectorSolver<FullClauseSelectorSolver<SubModelIterator>>(fullClauseSelectorSolver1);
      Minimal4CardinalityModel minimal4CardinalityModel0 = new Minimal4CardinalityModel(groupClauseSelectorSolver0);
      SolutionFoundListener solutionFoundListener0 = SolutionFoundListener.VOID;
      ModelIteratorToSATAdapter modelIteratorToSATAdapter0 = new ModelIteratorToSATAdapter(minimal4CardinalityModel0, 0, solutionFoundListener0);
      GroupClauseSelectorSolver<ModelIteratorToSATAdapter> groupClauseSelectorSolver1 = new GroupClauseSelectorSolver<ModelIteratorToSATAdapter>(modelIteratorToSATAdapter0);
      Integer integer0 = groupClauseSelectorSolver1.getGroupVar(iVecInt0, 639);
      assertEquals((-1889), (int)integer0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      GroupClauseSelectorSolver<FullClauseSelectorSolver<DimacsStringSolver>> groupClauseSelectorSolver0 = new GroupClauseSelectorSolver<FullClauseSelectorSolver<DimacsStringSolver>>((FullClauseSelectorSolver<DimacsStringSolver>) null);
      Collection<Integer> collection0 = groupClauseSelectorSolver0.getAddedVars();
      assertNotNull(collection0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      VecInt vecInt0 = new VecInt();
      FullClauseSelectorSolver<Minimal4CardinalityModel> fullClauseSelectorSolver0 = (FullClauseSelectorSolver<Minimal4CardinalityModel>) mock(FullClauseSelectorSolver.class, new ViolatedAssumptionAnswer());
      doReturn((IConstr) null).when(fullClauseSelectorSolver0).addClause(any(org.sat4j.specs.IVecInt.class));
      GroupClauseSelectorSolver<FullClauseSelectorSolver<Minimal4CardinalityModel>> groupClauseSelectorSolver0 = new GroupClauseSelectorSolver<FullClauseSelectorSolver<Minimal4CardinalityModel>>(fullClauseSelectorSolver0);
      SubModelIterator subModelIterator0 = new SubModelIterator(groupClauseSelectorSolver0, vecInt0);
      GroupClauseSelectorSolver<SubModelIterator> groupClauseSelectorSolver1 = new GroupClauseSelectorSolver<SubModelIterator>(subModelIterator0);
      groupClauseSelectorSolver1.addControlableClause(vecInt0, 0);
      assertTrue(vecInt0.isEmpty());
      assertEquals(0, vecInt0.size());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      MixedDataStructureDanielHT mixedDataStructureDanielHT0 = new MixedDataStructureDanielHT();
      FullClauseSelectorSolver<Minimal4CardinalityModel> fullClauseSelectorSolver0 = new FullClauseSelectorSolver<Minimal4CardinalityModel>((Minimal4CardinalityModel) null, true);
      IVecInt iVecInt0 = fullClauseSelectorSolver0.getLastClause();
      Constr constr0 = mixedDataStructureDanielHT0.createUnregisteredCardinalityConstraint(iVecInt0, 639);
      LexicoDecorator<ModelIteratorToSATAdapter> lexicoDecorator0 = (LexicoDecorator<ModelIteratorToSATAdapter>) mock(LexicoDecorator.class, new ViolatedAssumptionAnswer());
      doReturn(constr0).when(lexicoDecorator0).addClause(any(org.sat4j.specs.IVecInt.class));
      doReturn(561).when(lexicoDecorator0).nextFreeVarId(anyBoolean());
      GroupClauseSelectorSolver<LexicoDecorator<ModelIteratorToSATAdapter>> groupClauseSelectorSolver0 = new GroupClauseSelectorSolver<LexicoDecorator<ModelIteratorToSATAdapter>>(lexicoDecorator0);
      groupClauseSelectorSolver0.addClause(iVecInt0, 561);
      assertEquals(1, iVecInt0.size());
      assertFalse(iVecInt0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      DimacsStringSolver dimacsStringSolver0 = new DimacsStringSolver(0);
      GroupClauseSelectorSolver<DimacsStringSolver> groupClauseSelectorSolver0 = new GroupClauseSelectorSolver<DimacsStringSolver>(dimacsStringSolver0);
      // Undeclared exception!
      try { 
        groupClauseSelectorSolver0.unsatExplanation();
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.tools.AbstractOutputSolver", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      GroupClauseSelectorSolver<Minimal4InclusionModel> groupClauseSelectorSolver0 = new GroupClauseSelectorSolver<Minimal4InclusionModel>((Minimal4InclusionModel) null);
      // Undeclared exception!
      try { 
        groupClauseSelectorSolver0.unsatExplanation();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.tools.SolverDecorator", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      DimacsOutputSolver dimacsOutputSolver0 = new DimacsOutputSolver();
      GroupClauseSelectorSolver<DimacsOutputSolver> groupClauseSelectorSolver0 = new GroupClauseSelectorSolver<DimacsOutputSolver>(dimacsOutputSolver0);
      // Undeclared exception!
      try { 
        groupClauseSelectorSolver0.model();
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.tools.DimacsOutputSolver", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      GroupClauseSelectorSolver<DimacsStringSolver> groupClauseSelectorSolver0 = new GroupClauseSelectorSolver<DimacsStringSolver>((DimacsStringSolver) null);
      // Undeclared exception!
      try { 
        groupClauseSelectorSolver0.model();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.tools.SolverDecorator", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      FullClauseSelectorSolver<Minimal4CardinalityModel> fullClauseSelectorSolver0 = new FullClauseSelectorSolver<Minimal4CardinalityModel>((Minimal4CardinalityModel) null, true);
      IVecInt iVecInt0 = fullClauseSelectorSolver0.getLastClause();
      StatisticsSolver statisticsSolver0 = new StatisticsSolver();
      GroupClauseSelectorSolver<StatisticsSolver> groupClauseSelectorSolver0 = new GroupClauseSelectorSolver<StatisticsSolver>(statisticsSolver0);
      // Undeclared exception!
      try { 
        groupClauseSelectorSolver0.getGroupVar(iVecInt0, (-1889));
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Not implemented yet!
         //
         verifyException("org.sat4j.tools.StatisticsSolver", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      GroupClauseSelectorSolver<SolutionCounter> groupClauseSelectorSolver0 = new GroupClauseSelectorSolver<SolutionCounter>((SolutionCounter) null);
      VecInt vecInt0 = new VecInt();
      // Undeclared exception!
      try { 
        groupClauseSelectorSolver0.getGroupVar(vecInt0, 0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.tools.SolverDecorator", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      DimacsStringSolver dimacsStringSolver0 = new DimacsStringSolver();
      AbstractMinimalModel abstractMinimalModel0 = new AbstractMinimalModel(dimacsStringSolver0);
      IVecInt iVecInt0 = AbstractMinimalModel.negativeLiterals(abstractMinimalModel0);
      ModelIteratorToSATAdapter modelIteratorToSATAdapter0 = new ModelIteratorToSATAdapter(abstractMinimalModel0, (SolutionFoundListener) null);
      MaxSatDecorator maxSatDecorator0 = new MaxSatDecorator(modelIteratorToSATAdapter0, true);
      GroupClauseSelectorSolver<MaxSatDecorator> groupClauseSelectorSolver0 = new GroupClauseSelectorSolver<MaxSatDecorator>(maxSatDecorator0);
      // Undeclared exception!
      try { 
        groupClauseSelectorSolver0.addControlableClause(iVecInt0, (-1));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The constraint you entered cannot be removed from the solver.
         //
         verifyException("org.sat4j.core.ConstrGroup", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      DimacsStringSolver dimacsStringSolver0 = new DimacsStringSolver();
      GroupClauseSelectorSolver<DimacsStringSolver> groupClauseSelectorSolver0 = new GroupClauseSelectorSolver<DimacsStringSolver>(dimacsStringSolver0);
      VecInt vecInt0 = new VecInt();
      IVecInt iVecInt0 = vecInt0.pop();
      // Undeclared exception!
      try { 
        groupClauseSelectorSolver0.addControlableClause(iVecInt0, (-1));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("org.sat4j.core.VecInt", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      AbstractMinimalModel[] abstractMinimalModelArray0 = new AbstractMinimalModel[9];
      SolutionCounter[] solutionCounterArray0 = new SolutionCounter[4];
      SolutionCounter solutionCounter0 = mock(SolutionCounter.class, new ViolatedAssumptionAnswer());
      doReturn(0, 0, 0, 0, 0).when(solutionCounter0).nextFreeVarId(anyBoolean());
      solutionCounterArray0[0] = solutionCounter0;
      solutionCounterArray0[1] = solutionCounter0;
      solutionCounterArray0[2] = solutionCounter0;
      solutionCounterArray0[3] = solutionCounter0;
      ManyCore<SolutionCounter> manyCore0 = new ManyCore<SolutionCounter>(solutionCounterArray0);
      SolutionFoundListener solutionFoundListener0 = mock(SolutionFoundListener.class, new ViolatedAssumptionAnswer());
      ModelIteratorToSATAdapter modelIteratorToSATAdapter0 = new ModelIteratorToSATAdapter(solutionCounterArray0[3], (-1743L), solutionFoundListener0);
      IVecInt iVecInt0 = VecInt.EMPTY;
      SolutionFoundListener solutionFoundListener1 = SolutionFoundListener.VOID;
      Minimal4InclusionModel minimal4InclusionModel0 = new Minimal4InclusionModel(modelIteratorToSATAdapter0, iVecInt0, solutionFoundListener1);
      abstractMinimalModelArray0[0] = (AbstractMinimalModel) minimal4InclusionModel0;
      abstractMinimalModelArray0[1] = (AbstractMinimalModel) minimal4InclusionModel0;
      Minimal4CardinalityModel minimal4CardinalityModel0 = new Minimal4CardinalityModel(manyCore0, iVecInt0, solutionFoundListener1);
      abstractMinimalModelArray0[2] = (AbstractMinimalModel) minimal4CardinalityModel0;
      abstractMinimalModelArray0[3] = (AbstractMinimalModel) minimal4InclusionModel0;
      abstractMinimalModelArray0[4] = (AbstractMinimalModel) minimal4InclusionModel0;
      abstractMinimalModelArray0[5] = (AbstractMinimalModel) minimal4InclusionModel0;
      abstractMinimalModelArray0[6] = (AbstractMinimalModel) minimal4CardinalityModel0;
      abstractMinimalModelArray0[7] = (AbstractMinimalModel) minimal4CardinalityModel0;
      abstractMinimalModelArray0[8] = (AbstractMinimalModel) minimal4CardinalityModel0;
      ManyCore<AbstractMinimalModel> manyCore1 = new ManyCore<AbstractMinimalModel>(abstractMinimalModelArray0);
      GroupClauseSelectorSolver<ManyCore<AbstractMinimalModel>> groupClauseSelectorSolver0 = new GroupClauseSelectorSolver<ManyCore<AbstractMinimalModel>>(manyCore1);
      // Undeclared exception!
      try { 
        groupClauseSelectorSolver0.addClause(iVecInt0, 43);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.core.EmptyVecInt", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      DimacsOutputSolver dimacsOutputSolver0 = new DimacsOutputSolver();
      GroupClauseSelectorSolver<DimacsOutputSolver> groupClauseSelectorSolver0 = new GroupClauseSelectorSolver<DimacsOutputSolver>(dimacsOutputSolver0);
      // Undeclared exception!
      try { 
        groupClauseSelectorSolver0.addClause((IVecInt) null, (-9));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.tools.AbstractClauseSelectorSolver", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      LexicoDecorator<ModelIteratorToSATAdapter> lexicoDecorator0 = (LexicoDecorator<ModelIteratorToSATAdapter>) mock(LexicoDecorator.class, new ViolatedAssumptionAnswer());
      doReturn(1000).when(lexicoDecorator0).nextFreeVarId(anyBoolean());
      GroupClauseSelectorSolver<LexicoDecorator<ModelIteratorToSATAdapter>> groupClauseSelectorSolver0 = new GroupClauseSelectorSolver<LexicoDecorator<ModelIteratorToSATAdapter>>(lexicoDecorator0);
      VecInt vecInt0 = new VecInt();
      vecInt0.pop();
      // Undeclared exception!
      try { 
        groupClauseSelectorSolver0.addClause((IVecInt) vecInt0, 374);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("org.sat4j.core.VecInt", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      ManyCore<ModelIteratorToSATAdapter> manyCore0 = (ManyCore<ModelIteratorToSATAdapter>) mock(ManyCore.class, new ViolatedAssumptionAnswer());
      GroupClauseSelectorSolver<ManyCore<ModelIteratorToSATAdapter>> groupClauseSelectorSolver0 = new GroupClauseSelectorSolver<ManyCore<ModelIteratorToSATAdapter>>(manyCore0);
      // Undeclared exception!
      try { 
        groupClauseSelectorSolver0.addControlableClause((IVecInt) null, (-13));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.tools.AbstractClauseSelectorSolver", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      VecInt vecInt0 = new VecInt();
      FullClauseSelectorSolver<Minimal4CardinalityModel> fullClauseSelectorSolver0 = (FullClauseSelectorSolver<Minimal4CardinalityModel>) mock(FullClauseSelectorSolver.class, new ViolatedAssumptionAnswer());
      doReturn(vecInt0).when(fullClauseSelectorSolver0).unsatExplanation();
      GroupClauseSelectorSolver<FullClauseSelectorSolver<Minimal4CardinalityModel>> groupClauseSelectorSolver0 = new GroupClauseSelectorSolver<FullClauseSelectorSolver<Minimal4CardinalityModel>>(fullClauseSelectorSolver0);
      IVecInt iVecInt0 = groupClauseSelectorSolver0.unsatExplanation();
      assertNotSame(iVecInt0, vecInt0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      int[] intArray0 = new int[0];
      ISolver iSolver0 = mock(ISolver.class, new ViolatedAssumptionAnswer());
      doReturn(intArray0).when(iSolver0).modelWithInternalVariables();
      ModelIterator modelIterator0 = new ModelIterator(iSolver0);
      GroupClauseSelectorSolver<ModelIterator> groupClauseSelectorSolver0 = new GroupClauseSelectorSolver<ModelIterator>(modelIterator0);
      int[] intArray1 = groupClauseSelectorSolver0.model();
      assertNotNull(intArray1);
      assertNotSame(intArray1, intArray0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      VecInt vecInt0 = new VecInt();
      IConstr iConstr0 = FakeConstr.instance();
      FullClauseSelectorSolver<Minimal4CardinalityModel> fullClauseSelectorSolver0 = (FullClauseSelectorSolver<Minimal4CardinalityModel>) mock(FullClauseSelectorSolver.class, new ViolatedAssumptionAnswer());
      doReturn(iConstr0).when(fullClauseSelectorSolver0).addClause(any(org.sat4j.specs.IVecInt.class));
      GroupClauseSelectorSolver<FullClauseSelectorSolver<Minimal4CardinalityModel>> groupClauseSelectorSolver0 = new GroupClauseSelectorSolver<FullClauseSelectorSolver<Minimal4CardinalityModel>>(fullClauseSelectorSolver0);
      SubModelIterator subModelIterator0 = new SubModelIterator(groupClauseSelectorSolver0, vecInt0);
      GroupClauseSelectorSolver<SubModelIterator> groupClauseSelectorSolver1 = new GroupClauseSelectorSolver<SubModelIterator>(subModelIterator0);
      groupClauseSelectorSolver1.addControlableClause(vecInt0, 0);
      assertTrue(vecInt0.isEmpty());
      assertEquals(0, vecInt0.size());
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      GroupClauseSelectorSolver<SolutionCounter> groupClauseSelectorSolver0 = new GroupClauseSelectorSolver<SolutionCounter>((SolutionCounter) null);
      Map<Integer, Integer> map0 = groupClauseSelectorSolver0.getVarToHighLevel();
      assertEquals(0, map0.size());
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      FullClauseSelectorSolver<Minimal4CardinalityModel> fullClauseSelectorSolver0 = new FullClauseSelectorSolver<Minimal4CardinalityModel>((Minimal4CardinalityModel) null, true);
      IVecInt iVecInt0 = fullClauseSelectorSolver0.getLastClause();
      DimacsStringSolver dimacsStringSolver0 = new DimacsStringSolver();
      GroupClauseSelectorSolver<DimacsStringSolver> groupClauseSelectorSolver0 = new GroupClauseSelectorSolver<DimacsStringSolver>(dimacsStringSolver0);
      IConstr iConstr0 = groupClauseSelectorSolver0.addNonControlableClause(iVecInt0);
      assertNull(iConstr0);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      LexicoDecorator<ModelIteratorToSATAdapter> lexicoDecorator0 = (LexicoDecorator<ModelIteratorToSATAdapter>) mock(LexicoDecorator.class, new ViolatedAssumptionAnswer());
      doReturn((IConstr) null).when(lexicoDecorator0).addClause(any(org.sat4j.specs.IVecInt.class));
      doReturn(1000).when(lexicoDecorator0).nextFreeVarId(anyBoolean());
      GroupClauseSelectorSolver<LexicoDecorator<ModelIteratorToSATAdapter>> groupClauseSelectorSolver0 = new GroupClauseSelectorSolver<LexicoDecorator<ModelIteratorToSATAdapter>>(lexicoDecorator0);
      VecInt vecInt0 = new VecInt();
      groupClauseSelectorSolver0.addClause((IVecInt) vecInt0, 374);
      DimacsStringSolver dimacsStringSolver0 = new DimacsStringSolver();
      GroupClauseSelectorSolver<DimacsStringSolver> groupClauseSelectorSolver1 = new GroupClauseSelectorSolver<DimacsStringSolver>(dimacsStringSolver0);
      SolutionCounter solutionCounter0 = new SolutionCounter(groupClauseSelectorSolver1);
      NegationDecorator<SolutionCounter> negationDecorator0 = new NegationDecorator<SolutionCounter>(solutionCounter0);
      GroupClauseSelectorSolver<NegationDecorator<SolutionCounter>> groupClauseSelectorSolver2 = new GroupClauseSelectorSolver<NegationDecorator<SolutionCounter>>(negationDecorator0);
      // Undeclared exception!
      try { 
        groupClauseSelectorSolver2.getGroupVar(vecInt0, 512);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Please call newVar(int) before adding constraints!!!
         //
         verifyException("org.sat4j.tools.AbstractClauseSelectorSolver", e);
      }
  }
}
