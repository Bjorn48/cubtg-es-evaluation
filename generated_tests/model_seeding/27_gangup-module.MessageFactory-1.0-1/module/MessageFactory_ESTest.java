/*
 * This file was automatically generated by EvoSuite
 * Wed Oct 23 13:03:09 GMT 2019
 */

package module;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.NoSuchElementException;
import javax.swing.table.DefaultTableModel;
import module.Message;
import module.MessageFactory;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.System;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class MessageFactory_ESTest extends MessageFactory_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      MessageFactory.createWarningMessage("&W*6;T^c>#p_t*F", (Object[]) null);
      MessageFactory messageFactory0 = MessageFactory.getInstance();
      assertEquals(1, messageFactory0.getTotalProduced());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      System.setCurrentTimeMillis(0L);
      Object[] objectArray0 = new Object[1];
      Message message0 = MessageFactory.createWarningMessage("", objectArray0);
      assertEquals("WARNING", message0.getHeader());
      assertEquals("*", message0.getRecipient());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      System.setCurrentTimeMillis((-939L));
      Object[] objectArray0 = new Object[7];
      Message message0 = MessageFactory.createWarningMessage("/ !vjIDK", objectArray0);
      assertEquals("WARNING", message0.getHeader());
      assertEquals("*", message0.getRecipient());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      MessageFactory messageFactory0 = MessageFactory.getInstance();
      Message message0 = new Message();
      messageFactory0.unrefObject(message0);
      Message message1 = MessageFactory.createWarningMessage("GameState.unpack(): *** ERROR *** [IO] unpack data failed! current state is inconsistent: ", (Object[]) null);
      assertEquals("WARNING", message1.getHeader());
      assertEquals("*", message1.getRecipient());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Message message0 = MessageFactory.createMessage("ID", (String) null, (Object) null);
      assertEquals("ID", message0.getHeader());
      
      Object[] objectArray0 = new Object[1];
      Message message1 = MessageFactory.createWarningMessage("", objectArray0);
      assertEquals("WARNING", message1.getHeader());
      assertEquals("*", message1.getRecipient());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Message message0 = MessageFactory.createConnectionDroppedMessage(635, "MapCell[x=%f,y=%f,tile=%d,layer=%d]");
      assertEquals("DROPPED", message0.getHeader());
      assertEquals("*", message0.getRecipient());
      
      System.setCurrentTimeMillis(0);
      Message message1 = MessageFactory.createUnloadMessage((String) null);
      assertEquals("KERNEL", message1.getHeader());
      assertEquals("*", message1.getRecipient());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      System.setCurrentTimeMillis((-1L));
      MessageFactory.createMessage("-s'", "-s'", (Object) "-s'");
      Message message0 = MessageFactory.createUnloadMessage("");
      assertEquals("KERNEL", message0.getHeader());
      assertEquals("*", message0.getRecipient());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      MessageFactory messageFactory0 = MessageFactory.getInstance();
      Object object0 = new Object();
      Message message0 = new Message(">BVr?j#QdGO]|e", object0);
      messageFactory0.unrefObject(message0);
      Message message1 = MessageFactory.createUnloadMessage("*");
      assertEquals("KERNEL", message1.getHeader());
      assertEquals("*", message1.getRecipient());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      MessageFactory.getInstance();
      Message message0 = MessageFactory.createUnloadMessage("");
      assertEquals("*", message0.getRecipient());
      assertEquals("KERNEL", message0.getHeader());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      System.setCurrentTimeMillis(0);
      Message message0 = MessageFactory.createMessage((String) null, "ERROR", (Object) "*");
      assertEquals("", message0.getHeader());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      System.setCurrentTimeMillis((-939L));
      Message message0 = MessageFactory.createConnectionDroppedMessage((-235), "");
      Message message1 = MessageFactory.createMessage("/ !vjIDK", "", (Object) message0);
      assertEquals("", message1.getRecipient());
      assertEquals("DROPPED", message0.getHeader());
      assertEquals("*", message0.getRecipient());
      assertEquals("/ !vjIDK", message1.getHeader());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      MessageFactory messageFactory0 = MessageFactory.getInstance();
      Message message0 = new Message();
      messageFactory0.unrefObject(message0);
      DefaultTableModel defaultTableModel0 = new DefaultTableModel(2782, 0);
      Message message1 = MessageFactory.createMessage("S<ajwZ_:?lVr>]", "S<ajwZ_:?lVr>]", (Object) defaultTableModel0);
      assertEquals("S<ajwZ_:?lVr>]", message1.getHeader());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      MessageFactory messageFactory0 = MessageFactory.getInstance();
      System.setCurrentTimeMillis(0L);
      Message message0 = MessageFactory.createMessage("KERNEL", (Object) messageFactory0);
      assertEquals("*", message0.getRecipient());
      assertEquals("KERNEL", message0.getHeader());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Object[] objectArray0 = new Object[0];
      Message message0 = MessageFactory.createWarningMessage("KERNEL", objectArray0);
      assertEquals("*", message0.getRecipient());
      assertEquals("WARNING", message0.getHeader());
      
      System.setCurrentTimeMillis((-2981L));
      Message message1 = MessageFactory.createMessage((String) null, (Object) "gangup");
      assertEquals("", message1.getHeader());
      assertEquals("*", message1.getRecipient());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      MessageFactory messageFactory0 = MessageFactory.getInstance();
      Message message0 = new Message();
      messageFactory0.unrefObject(message0);
      Message message1 = MessageFactory.createMessage("98=P", (Object) "98=P");
      assertEquals("98=P", message1.getHeader());
      assertEquals("*", message1.getRecipient());
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      MessageFactory messageFactory0 = MessageFactory.getInstance();
      System.setCurrentTimeMillis(0L);
      Message message0 = messageFactory0.createMessage();
      assertEquals("*", message0.getRecipient());
      assertEquals("", message0.getHeader());
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Message message0 = MessageFactory.createConnectionDroppedMessage(672, "");
      assertEquals("DROPPED", message0.getHeader());
      assertEquals("*", message0.getRecipient());
      
      System.setCurrentTimeMillis((-567L));
      MessageFactory messageFactory0 = MessageFactory.instance;
      Message message1 = messageFactory0.createMessage();
      assertEquals("*", message1.getRecipient());
      assertEquals("", message1.getHeader());
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      MessageFactory messageFactory0 = MessageFactory.getInstance();
      Object object0 = new Object();
      Message message0 = new Message(">BVr?j#QdGO]|e", object0);
      messageFactory0.unrefObject(message0);
      Message message1 = messageFactory0.createMessage();
      assertEquals("*", message1.getRecipient());
      assertEquals("", message1.getHeader());
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      MessageFactory.getInstance();
      System.setCurrentTimeMillis(0L);
      Object[] objectArray0 = new Object[1];
      Message message0 = MessageFactory.createErrorMessage("IKh~B*X8[", objectArray0);
      assertEquals("*", message0.getRecipient());
      assertEquals("ERROR", message0.getHeader());
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Object[] objectArray0 = new Object[8];
      Message message0 = new Message("i]eMgJ", "i]eMgJ");
      MessageFactory messageFactory0 = MessageFactory.getInstance();
      messageFactory0.unrefObject(message0);
      Message message1 = MessageFactory.createErrorMessage("pIKtRMf8P(>_hNz", objectArray0);
      assertEquals("ERROR", message1.getHeader());
      assertEquals("*", message1.getRecipient());
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      System.setCurrentTimeMillis(0L);
      Message message0 = MessageFactory.createConnectionDroppedMessage(0, "9");
      assertEquals("*", message0.getRecipient());
      assertEquals("DROPPED", message0.getHeader());
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      System.setCurrentTimeMillis((-939L));
      Message message0 = MessageFactory.createConnectionDroppedMessage((-235), "");
      assertEquals("DROPPED", message0.getHeader());
      assertEquals("*", message0.getRecipient());
      
      Object[] objectArray0 = new Object[7];
      Message message1 = MessageFactory.createErrorMessage("", objectArray0);
      assertEquals("*", message1.getRecipient());
      assertEquals("ERROR", message1.getHeader());
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      MessageFactory messageFactory0 = MessageFactory.getInstance();
      messageFactory0.unrefObject((Message) null);
      // Undeclared exception!
      try { 
        messageFactory0.createMessage();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("util.AbstractFactory", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Message message0 = MessageFactory.createMessage("ID", (String) null, (Object) null);
      assertEquals("ID", message0.getHeader());
      
      Message message1 = MessageFactory.createConnectionDroppedMessage(0, "9");
      assertEquals("DROPPED", message1.getHeader());
      assertEquals("*", message1.getRecipient());
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      // Undeclared exception!
      try { 
        MessageFactory.createUnloadMessage((String) null);
       //  fail("Expecting exception: NoSuchElementException");
       // Unstable assertion
      } catch(NoSuchElementException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.LinkedList", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      // Undeclared exception!
      try { 
        MessageFactory.createMessage(".2zcI", (Object) ".2zcI");
       //  fail("Expecting exception: NoSuchElementException");
       // Unstable assertion
      } catch(NoSuchElementException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.LinkedList", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Object[] objectArray0 = new Object[1];
      // Undeclared exception!
      try { 
        MessageFactory.createErrorMessage("j.}eF:b=ojx", objectArray0);
       //  fail("Expecting exception: NoSuchElementException");
       // Unstable assertion
      } catch(NoSuchElementException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.LinkedList", e);
      }
  }
}
