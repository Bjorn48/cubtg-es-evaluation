[MASTER] 21:15:36.226 [logback-2] ERROR TestCluster - Failed to check cache for java.util.Comparator<T> : Type points to itself
[MASTER] 21:20:22.164 [logback-2] ERROR JUnitAnalyzer - Compilation failed on compilation units: [RegularFileObject[/tmp/EvoSuite_57_1550521222004/org/sat4j/core/VecInt_57_tmp__ESTest.java], RegularFileObject[/tmp/EvoSuite_57_1550521222004/org/sat4j/core/VecInt_57_tmp__ESTest_scaffolding.java]]
[MASTER] 21:20:22.164 [logback-2] ERROR JUnitAnalyzer - Classpath: bins/sat4j/org.ow2.sat4j.core-2.3.6-SNAPSHOT.jar:bins/sat4j/org.ow2.sat4j.core-2.3.6-SNAPSHOT-tests.jar:/home/pderakhshanfar/common-uncommon-behaviour-testing-experiment/evosuite-master-1.0.7-SNAPSHOT.jar:/home/pderakhshanfar/common-uncommon-behaviour-testing-experiment/bins/sat4j/org.ow2.sat4j.core-2.3.6-SNAPSHOT.jar:/home/pderakhshanfar/common-uncommon-behaviour-testing-experiment/bins/sat4j/org.ow2.sat4j.core-2.3.6-SNAPSHOT-tests.jar
[MASTER] 21:20:22.164 [logback-2] ERROR JUnitAnalyzer - evosuiteCP: /home/pderakhshanfar/common-uncommon-behaviour-testing-experiment/evosuite-master-1.0.7-SNAPSHOT.jar:/home/pderakhshanfar/common-uncommon-behaviour-testing-experiment/bins/sat4j/org.ow2.sat4j.core-2.3.6-SNAPSHOT.jar:/home/pderakhshanfar/common-uncommon-behaviour-testing-experiment/bins/sat4j/org.ow2.sat4j.core-2.3.6-SNAPSHOT-tests.jar
[MASTER] 21:20:22.168 [logback-2] ERROR JUnitAnalyzer - Diagnostic: cannot find symbol
  symbol:   method access$000(org.sat4j.core.VecInt)
  location: class org.sat4j.core.VecInt: 109
[MASTER] 21:20:22.203 [logback-2] ERROR JUnitAnalyzer - RegularFileObject[/tmp/EvoSuite_57_1550521222004/org/sat4j/core/VecInt_57_tmp__ESTest.java]
1: /*
2:  * This file was automatically generated by EvoSuite
3:  * Mon Feb 18 20:20:22 GMT 2019
4:  */
5: 
6: package org.sat4j.core;
7: 
8: import org.junit.Test;
9: import static org.junit.Assert.*;
10: import static org.evosuite.shaded.org.mockito.Mockito.*;
11: import static org.evosuite.runtime.EvoAssertions.*;
12: import java.util.Comparator;
13: import org.evosuite.runtime.EvoRunner;
14: import org.evosuite.runtime.EvoRunnerParameters;
15: import org.evosuite.runtime.ViolatedAssumptionAnswer;
16: import org.junit.runner.RunWith;
17: import org.sat4j.core.VecInt;
18: import org.sat4j.specs.IVecInt;
19: 
20: @RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, useJEE = true) 
21: public class VecInt_57_tmp__ESTest extends VecInt_57_tmp__ESTest_scaffolding {
22: 
23:   @Test(timeout = 4000)
24:   public void test0()  throws Throwable  {
25:       VecInt vecInt0 = new VecInt();
26:       assertNotNull(vecInt0);
27:       assertEquals(0, vecInt0.size());
28:       assertTrue(vecInt0.isEmpty());
29:       
30:       String string0 = vecInt0.toString();
31:       assertNotNull(string0);
32:       assertEquals(0, vecInt0.size());
33:       assertTrue(vecInt0.isEmpty());
34:       assertEquals("", string0);
35:       
36:       String string1 = vecInt0.toString();
37:       assertNotNull(string1);
38:       assertEquals(0, vecInt0.size());
39:       assertTrue(vecInt0.isEmpty());
40:       assertEquals("", string1);
41:       assertTrue(string1.equals((Object)string0));
42:       
43:       VecInt vecInt1 = new VecInt();
44:       assertNotNull(vecInt1);
45:       assertTrue(vecInt1.isEmpty());
46:       assertEquals(0, vecInt1.size());
47:       assertTrue(vecInt1.equals((Object)vecInt0));
48:       
49:       IVecInt iVecInt0 = vecInt1.push(0);
50:       assertNotNull(iVecInt0);
51:       assertFalse(vecInt1.isEmpty());
52:       assertEquals(1, vecInt1.size());
53:       assertEquals(0, vecInt1.last());
54:       assertEquals(0, iVecInt0.last());
55:       assertEquals(1, iVecInt0.size());
56:       assertFalse(iVecInt0.isEmpty());
57:       assertNotSame(vecInt1, vecInt0);
58:       assertSame(vecInt1, iVecInt0);
59:       assertNotSame(iVecInt0, vecInt0);
60:       assertSame(iVecInt0, vecInt1);
61:       assertFalse(vecInt1.equals((Object)vecInt0));
62:       assertFalse(iVecInt0.equals((Object)vecInt0));
63:       
64:       vecInt1.copyTo(iVecInt0);
65:       assertFalse(vecInt1.isEmpty());
66:       assertEquals(2, vecInt1.size());
67:       assertEquals(0, vecInt1.last());
68:       assertEquals(0, iVecInt0.last());
69:       assertEquals(2, iVecInt0.size());
70:       assertFalse(iVecInt0.isEmpty());
71:       assertNotSame(vecInt1, vecInt0);
72:       assertSame(vecInt1, iVecInt0);
73:       assertNotSame(iVecInt0, vecInt0);
74:       assertSame(iVecInt0, vecInt1);
75:       assertFalse(vecInt1.equals((Object)vecInt0));
76:       assertFalse(iVecInt0.equals((Object)vecInt0));
77:       
78:       IVecInt iVecInt1 = vecInt1.push(0);
79:       assertNotNull(iVecInt1);
80:       assertFalse(vecInt1.isEmpty());
81:       assertEquals(3, vecInt1.size());
82:       assertEquals(0, vecInt1.last());
83:       assertEquals(3, iVecInt1.size());
84:       assertEquals(0, iVecInt1.last());
85:       assertFalse(iVecInt1.isEmpty());
86:       assertNotSame(vecInt1, vecInt0);
87:       assertSame(vecInt1, iVecInt1);
88:       assertSame(vecInt1, iVecInt0);
89:       assertSame(iVecInt1, iVecInt0);
90:       assertSame(iVecInt1, vecInt1);
91:       assertNotSame(iVecInt1, vecInt0);
92:       assertFalse(vecInt1.equals((Object)vecInt0));
93:       assertFalse(iVecInt1.equals((Object)vecInt0));
94:       
95:       boolean boolean0 = vecInt0.contains(268);
96:       assertEquals(0, vecInt0.size());
97:       assertTrue(vecInt0.isEmpty());
98:       assertFalse(boolean0);
99:       assertNotSame(vecInt0, iVecInt1);
100:       assertNotSame(vecInt0, iVecInt0);
101:       assertNotSame(vecInt0, vecInt1);
102:       assertFalse(vecInt0.equals((Object)iVecInt1));
103:       assertFalse(vecInt0.equals((Object)iVecInt0));
104:       assertFalse(vecInt0.equals((Object)vecInt1));
105:       
106:       VecInt vecInt2 = null;
107:       // Undeclared exception!
108:       try { 
109:         VecInt.access$000((VecInt) null);
110:         fail("Expecting exception: NullPointerException");
111:       
112:       } catch(NullPointerException e) {
113:          //
114:          // no message in exception (getMessage() returned null)
115:          //
116:          verifyException("org.sat4j.core.VecInt", e);
117:       }
118:   }
119: }
RegularFileObject[/tmp/EvoSuite_57_1550521222004/org/sat4j/core/VecInt_57_tmp__ESTest.java]
1: /**
2:  * Scaffolding file used to store all the setups needed to run 
3:  * tests automatically generated by EvoSuite
4:  * Mon Feb 18 20:20:22 GMT 2019
5:  */
6: 
7: package org.sat4j.core;
8: 
9: import org.evosuite.runtime.annotation.EvoSuiteClassExclude;
10: import org.junit.BeforeClass;
11: import org.junit.Before;
12: import org.junit.After;
13: import org.junit.AfterClass;
14: import org.evosuite.runtime.sandbox.Sandbox;
15: import org.evosuite.runtime.sandbox.Sandbox.SandboxMode;
16: 
17: @EvoSuiteClassExclude
18: public class VecInt_57_tmp__ESTest_scaffolding {
19: 
20:   @org.junit.Rule 
21:   public org.evosuite.runtime.vnet.NonFunctionalRequirementRule nfr = new org.evosuite.runtime.vnet.NonFunctionalRequirementRule();
22: 
23:   private static final java.util.Properties defaultProperties = (java.util.Properties) java.lang.System.getProperties().clone(); 
24: 
25:   private org.evosuite.runtime.thread.ThreadStopper threadStopper =  new org.evosuite.runtime.thread.ThreadStopper (org.evosuite.runtime.thread.KillSwitchHandler.getInstance(), 3000);
26: 
27: 
28:   @BeforeClass 
29:   public static void initEvoSuiteFramework() { 
30:     org.evosuite.runtime.RuntimeSettings.className = "org.sat4j.core.VecInt"; 
31:     org.evosuite.runtime.GuiSupport.initialize(); 
32:     org.evosuite.runtime.RuntimeSettings.maxNumberOfThreads = 100; 
33:     org.evosuite.runtime.RuntimeSettings.maxNumberOfIterationsPerLoop = 10000; 
34:     org.evosuite.runtime.RuntimeSettings.mockSystemIn = true; 
35:     org.evosuite.runtime.RuntimeSettings.sandboxMode = org.evosuite.runtime.sandbox.Sandbox.SandboxMode.RECOMMENDED; 
36:     org.evosuite.runtime.sandbox.Sandbox.initializeSecurityManagerForSUT(); 
37:     org.evosuite.runtime.classhandling.JDKClassResetter.init();
38:     setSystemProperties();
39:     initializeClasses();
40:     org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
41:   } 
42: 
43:   @AfterClass 
44:   public static void clearEvoSuiteFramework(){ 
45:     Sandbox.resetDefaultSecurityManager(); 
46:     java.lang.System.setProperties((java.util.Properties) defaultProperties.clone()); 
47:   } 
48: 
49:   @Before 
50:   public void initTestCase(){ 
51:     threadStopper.storeCurrentThreads();
52:     threadStopper.startRecordingTime();
53:     org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().initHandler(); 
54:     org.evosuite.runtime.sandbox.Sandbox.goingToExecuteSUTCode(); 
55:     setSystemProperties(); 
56:     org.evosuite.runtime.GuiSupport.setHeadless(); 
57:     org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
58:     org.evosuite.runtime.agent.InstrumentingAgent.activate(); 
59:   } 
60: 
61:   @After 
62:   public void doneWithTestCase(){ 
63:     threadStopper.killAndJoinClientThreads();
64:     org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().safeExecuteAddedHooks(); 
65:     org.evosuite.runtime.classhandling.JDKClassResetter.reset(); 
66:     resetClasses(); 
67:     org.evosuite.runtime.sandbox.Sandbox.doneWithExecutingSUTCode(); 
68:     org.evosuite.runtime.agent.InstrumentingAgent.deactivate(); 
69:     org.evosuite.runtime.GuiSupport.restoreHeadlessMode(); 
70:   } 
71: 
72:   public static void setSystemProperties() {
73:  
74:     java.lang.System.setProperties((java.util.Properties) defaultProperties.clone()); 
75:     java.lang.System.setProperty("user.dir", "/home/pderakhshanfar/common-uncommon-behaviour-testing-experiment"); 
76:     java.lang.System.setProperty("java.io.tmpdir", "/tmp"); 
77:   }
78: 
79:   private static void initializeClasses() {
80:     org.evosuite.runtime.classhandling.ClassStateSupport.initializeClasses(VecInt_57_tmp__ESTest_scaffolding.class.getClassLoader() ,
81:       "org.sat4j.core.ReadOnlyVecInt",
82:       "org.sat4j.specs.IteratorInt",
83:       "org.sat4j.core.VecInt$1",
84:       "org.sat4j.specs.IVecInt",
85:       "org.sat4j.core.EmptyVecInt",
86:       "org.sat4j.core.VecInt"
87:     );
88:   } 
89: 
90:   private static void resetClasses() {
91:     org.evosuite.runtime.classhandling.ClassResetter.getInstance().setClassLoader(VecInt_57_tmp__ESTest_scaffolding.class.getClassLoader()); 
92: 
93:     org.evosuite.runtime.classhandling.ClassStateSupport.resetClasses(
94:       "org.sat4j.core.EmptyVecInt",
95:       "org.sat4j.core.VecInt",
96:       "org.sat4j.core.VecInt$1",
97:       "org.sat4j.core.ReadOnlyVecInt"
98:     );
99:   }
100: }

[MASTER] 21:20:22.204 [logback-2] ERROR JUnitAnalyzer - Failed to compile test case:
VecInt vecInt0 = new VecInt();
assertNotNull(vecInt0);
assertEquals(0, vecInt0.size());
assertTrue(vecInt0.isEmpty());

String string0 = vecInt0.toString();
assertNotNull(string0);
assertEquals(0, vecInt0.size());
assertTrue(vecInt0.isEmpty());
assertEquals("", string0);

String string1 = vecInt0.toString();
assertNotNull(string1);
assertEquals(0, vecInt0.size());
assertTrue(vecInt0.isEmpty());
assertEquals("", string1);
assertTrue(string1.equals((Object)string0));

VecInt vecInt1 = new VecInt();
assertNotNull(vecInt1);
assertTrue(vecInt1.isEmpty());
assertEquals(0, vecInt1.size());
assertTrue(vecInt1.equals((Object)vecInt0));

IVecInt iVecInt0 = vecInt1.push(0);
assertNotNull(iVecInt0);
assertFalse(vecInt1.isEmpty());
assertEquals(1, vecInt1.size());
assertEquals(0, vecInt1.last());
assertEquals(0, iVecInt0.last());
assertEquals(1, iVecInt0.size());
assertFalse(iVecInt0.isEmpty());
assertNotSame(vecInt1, vecInt0);
assertSame(vecInt1, iVecInt0);
assertNotSame(iVecInt0, vecInt0);
assertSame(iVecInt0, vecInt1);
assertFalse(vecInt1.equals((Object)vecInt0));
assertFalse(iVecInt0.equals((Object)vecInt0));

vecInt1.copyTo(iVecInt0);
assertFalse(vecInt1.isEmpty());
assertEquals(2, vecInt1.size());
assertEquals(0, vecInt1.last());
assertEquals(0, iVecInt0.last());
assertEquals(2, iVecInt0.size());
assertFalse(iVecInt0.isEmpty());
assertNotSame(vecInt1, vecInt0);
assertSame(vecInt1, iVecInt0);
assertNotSame(iVecInt0, vecInt0);
assertSame(iVecInt0, vecInt1);
assertFalse(vecInt1.equals((Object)vecInt0));
assertFalse(iVecInt0.equals((Object)vecInt0));

IVecInt iVecInt1 = vecInt1.push(0);
assertNotNull(iVecInt1);
assertFalse(vecInt1.isEmpty());
assertEquals(3, vecInt1.size());
assertEquals(0, vecInt1.last());
assertEquals(3, iVecInt1.size());
assertEquals(0, iVecInt1.last());
assertFalse(iVecInt1.isEmpty());
assertNotSame(vecInt1, vecInt0);
assertSame(vecInt1, iVecInt1);
assertSame(vecInt1, iVecInt0);
assertSame(iVecInt1, iVecInt0);
assertSame(iVecInt1, vecInt1);
assertNotSame(iVecInt1, vecInt0);
assertFalse(vecInt1.equals((Object)vecInt0));
assertFalse(iVecInt1.equals((Object)vecInt0));

boolean boolean0 = vecInt0.contains(268);
assertEquals(0, vecInt0.size());
assertTrue(vecInt0.isEmpty());
assertFalse(boolean0);
assertNotSame(vecInt0, iVecInt1);
assertNotSame(vecInt0, iVecInt0);
assertNotSame(vecInt0, vecInt1);
assertFalse(vecInt0.equals((Object)iVecInt1));
assertFalse(vecInt0.equals((Object)iVecInt0));
assertFalse(vecInt0.equals((Object)vecInt1));

VecInt vecInt2 = null;
VecInt.access$000((VecInt) null);

[MASTER] 21:21:02.316 [logback-2] ERROR JUnitAnalyzer - Ran out of time while checking tests
