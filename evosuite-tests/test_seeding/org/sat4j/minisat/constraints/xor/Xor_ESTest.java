/*
 * This file was automatically generated by EvoSuite
 * Sun Feb 17 08:05:29 GMT 2019
 */

package org.sat4j.minisat.constraints.xor;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.NoSuchElementException;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;
import org.sat4j.core.ReadOnlyVec;
import org.sat4j.core.Vec;
import org.sat4j.core.VecInt;
import org.sat4j.minisat.constraints.ClausalDataStructureWL;
import org.sat4j.minisat.constraints.xor.Xor;
import org.sat4j.minisat.core.ILits;
import org.sat4j.minisat.core.Solver;
import org.sat4j.minisat.learning.NoLearningButHeuristics;
import org.sat4j.minisat.orders.LevelBasedVarOrderHeap;
import org.sat4j.minisat.orders.UserFixedPhaseSelectionStrategy;
import org.sat4j.minisat.restarts.LubyRestarts;
import org.sat4j.specs.Constr;
import org.sat4j.specs.IVec;
import org.sat4j.specs.IVecInt;
import org.sat4j.specs.MandatoryLiteralListener;
import org.sat4j.specs.Propagatable;
import org.sat4j.specs.UnitPropagationListener;
import org.sat4j.specs.VarMapper;
import org.sat4j.tools.DimacsOutputSolver;
import org.sat4j.tools.DotSearchTracing;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Xor_ESTest extends Xor_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      int[] intArray0 = new int[6];
      intArray0[2] = 685;
      VecInt vecInt0 = new VecInt(intArray0);
      ILits iLits0 = mock(ILits.class, new ViolatedAssumptionAnswer());
      doReturn(true, true, false).when(iLits0).isFalsified(anyInt());
      doReturn(false).when(iLits0).isSatisfied(anyInt());
      Xor xor0 = Xor.createParityConstraint(vecInt0, false, iLits0);
      // Undeclared exception!
      try { 
        xor0.calcReason((-1473), vecInt0);
        fail("Expecting exception: AssertionError");
      
      } catch(AssertionError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      VecInt vecInt0 = new VecInt();
      Xor xor0 = new Xor(vecInt0, false, (ILits) null);
      xor0.calcReason(1525, vecInt0);
      assertFalse(xor0.canBePropagatedMultipleTimes());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      IVecInt iVecInt0 = mock(IVecInt.class, new ViolatedAssumptionAnswer());
      doReturn(64).when(iVecInt0).size();
      Vec<Propagatable> vec0 = new Vec<Propagatable>();
      ILits iLits0 = mock(ILits.class, new ViolatedAssumptionAnswer());
      doReturn(vec0, vec0, (IVec) null).when(iLits0).watches(anyInt());
      Xor xor0 = Xor.createParityConstraint(iVecInt0, true, iLits0);
      NoLearningButHeuristics<ClausalDataStructureWL> noLearningButHeuristics0 = new NoLearningButHeuristics<ClausalDataStructureWL>();
      vec0.unsafePush(xor0);
      ClausalDataStructureWL clausalDataStructureWL0 = new ClausalDataStructureWL();
      LevelBasedVarOrderHeap levelBasedVarOrderHeap0 = new LevelBasedVarOrderHeap();
      LubyRestarts lubyRestarts0 = new LubyRestarts(1);
      Solver<ClausalDataStructureWL> solver0 = new Solver<ClausalDataStructureWL>(noLearningButHeuristics0, clausalDataStructureWL0, levelBasedVarOrderHeap0, lubyRestarts0);
      vec0.insertFirstWithShifting(xor0);
      // Undeclared exception!
      try { 
        xor0.remove(solver0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.minisat.constraints.xor.Xor", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      IVecInt iVecInt0 = mock(IVecInt.class, new ViolatedAssumptionAnswer());
      doReturn(3813).when(iVecInt0).size();
      Vec<Propagatable> vec0 = new Vec<Propagatable>(3813);
      ILits iLits0 = mock(ILits.class, new ViolatedAssumptionAnswer());
      doReturn(false, false).when(iLits0).isSatisfied(anyInt());
      doReturn(true).when(iLits0).isUnassigned(anyInt());
      doReturn(vec0).when(iLits0).watches(anyInt());
      Xor xor0 = Xor.createParityConstraint(iVecInt0, false, iLits0);
      vec0.push(xor0);
      boolean boolean0 = xor0.propagate((UnitPropagationListener) null, (-1));
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      int[] intArray0 = new int[15];
      VecInt vecInt0 = new VecInt(intArray0);
      ILits iLits0 = mock(ILits.class, new ViolatedAssumptionAnswer());
      Xor xor0 = Xor.createParityConstraint(vecInt0, false, iLits0);
      int int0 = xor0.get(2);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      int[] intArray0 = new int[6];
      intArray0[2] = 685;
      VecInt vecInt0 = new VecInt(intArray0);
      ILits iLits0 = mock(ILits.class, new ViolatedAssumptionAnswer());
      Xor xor0 = Xor.createParityConstraint(vecInt0, false, iLits0);
      int int0 = xor0.get(2);
      assertEquals(685, int0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      IVecInt iVecInt0 = mock(IVecInt.class, new ViolatedAssumptionAnswer());
      doReturn(3813).when(iVecInt0).size();
      Vec<Propagatable> vec0 = new Vec<Propagatable>();
      ReadOnlyVec<Propagatable> readOnlyVec0 = new ReadOnlyVec<Propagatable>(vec0);
      ILits iLits0 = mock(ILits.class, new ViolatedAssumptionAnswer());
      doReturn(readOnlyVec0).when(iLits0).watches(anyInt());
      Xor xor0 = Xor.createParityConstraint(iVecInt0, true, iLits0);
      // Undeclared exception!
      try { 
        xor0.remove((UnitPropagationListener) null);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.core.ReadOnlyVec", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      VecInt vecInt0 = new VecInt(43, 43);
      Propagatable[] propagatableArray0 = new Propagatable[0];
      Vec<Propagatable> vec0 = new Vec<Propagatable>(propagatableArray0);
      ILits iLits0 = mock(ILits.class, new ViolatedAssumptionAnswer());
      doReturn(vec0).when(iLits0).watches(anyInt());
      Xor xor0 = Xor.createParityConstraint(vecInt0, false, iLits0);
      NoLearningButHeuristics<ClausalDataStructureWL> noLearningButHeuristics0 = new NoLearningButHeuristics<ClausalDataStructureWL>();
      ClausalDataStructureWL clausalDataStructureWL0 = new ClausalDataStructureWL();
      UserFixedPhaseSelectionStrategy userFixedPhaseSelectionStrategy0 = new UserFixedPhaseSelectionStrategy();
      LevelBasedVarOrderHeap levelBasedVarOrderHeap0 = new LevelBasedVarOrderHeap(userFixedPhaseSelectionStrategy0);
      LubyRestarts lubyRestarts0 = new LubyRestarts(1);
      Solver<ClausalDataStructureWL> solver0 = new Solver<ClausalDataStructureWL>(noLearningButHeuristics0, clausalDataStructureWL0, levelBasedVarOrderHeap0, lubyRestarts0);
      // Undeclared exception!
      try { 
        xor0.remove(solver0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.sat4j.core.Vec", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      IVecInt iVecInt0 = mock(IVecInt.class, new ViolatedAssumptionAnswer());
      doReturn(3813).when(iVecInt0).size();
      ILits iLits0 = mock(ILits.class, new ViolatedAssumptionAnswer());
      doReturn(true, false, true, true, true).when(iLits0).isSatisfied(anyInt());
      doReturn(false).when(iLits0).isUnassigned(anyInt());
      Xor xor0 = Xor.createParityConstraint(iVecInt0, false, iLits0);
      NoLearningButHeuristics<ClausalDataStructureWL> noLearningButHeuristics0 = new NoLearningButHeuristics<ClausalDataStructureWL>();
      ClausalDataStructureWL clausalDataStructureWL0 = new ClausalDataStructureWL();
      UserFixedPhaseSelectionStrategy userFixedPhaseSelectionStrategy0 = new UserFixedPhaseSelectionStrategy();
      LevelBasedVarOrderHeap levelBasedVarOrderHeap0 = new LevelBasedVarOrderHeap(userFixedPhaseSelectionStrategy0);
      LubyRestarts lubyRestarts0 = new LubyRestarts(1);
      Solver<ClausalDataStructureWL> solver0 = new Solver<ClausalDataStructureWL>(noLearningButHeuristics0, clausalDataStructureWL0, levelBasedVarOrderHeap0, lubyRestarts0);
      xor0.propagate(solver0, 1159);
      xor0.propagate(solver0, 1812);
      // Undeclared exception!
      xor0.propagate(solver0, 2);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      IVecInt iVecInt0 = mock(IVecInt.class, new ViolatedAssumptionAnswer());
      doReturn(3813).when(iVecInt0).size();
      Vec<Propagatable> vec0 = new Vec<Propagatable>();
      ILits iLits0 = mock(ILits.class, new ViolatedAssumptionAnswer());
      doReturn(false, false).when(iLits0).isSatisfied(anyInt());
      doReturn(true).when(iLits0).isUnassigned(anyInt());
      doReturn(vec0).when(iLits0).watches(anyInt());
      Xor xor0 = Xor.createParityConstraint(iVecInt0, false, iLits0);
      // Undeclared exception!
      try { 
        xor0.propagate((UnitPropagationListener) null, 8);
        fail("Expecting exception: NoSuchElementException");
      
      } catch(NoSuchElementException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.core.Vec", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      IVecInt iVecInt0 = mock(IVecInt.class, new ViolatedAssumptionAnswer());
      doReturn(3813).when(iVecInt0).size();
      Vec<Propagatable> vec0 = new Vec<Propagatable>();
      ReadOnlyVec<Propagatable> readOnlyVec0 = new ReadOnlyVec<Propagatable>(vec0);
      ILits iLits0 = mock(ILits.class, new ViolatedAssumptionAnswer());
      doReturn(false, false, true, false).when(iLits0).isSatisfied(anyInt());
      doReturn(false, true).when(iLits0).isUnassigned(anyInt());
      doReturn((IVec) null).when(iLits0).watches(anyInt());
      Xor xor0 = Xor.createParityConstraint(iVecInt0, false, iLits0);
      // Undeclared exception!
      try { 
        xor0.propagate((UnitPropagationListener) null, (-1));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      // Undeclared exception!
      try { 
        Xor.createParityConstraint((IVecInt) null, true, (ILits) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.minisat.constraints.xor.Xor", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      VecInt vecInt0 = new VecInt(1);
      IVecInt iVecInt0 = vecInt0.pop();
      // Undeclared exception!
      try { 
        Xor.createParityConstraint(iVecInt0, false, (ILits) null);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.minisat.constraints.xor.Xor", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      VecInt vecInt0 = new VecInt();
      // Undeclared exception!
      try { 
        Xor.createParityConstraint(vecInt0, true, (ILits) null);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.sat4j.minisat.constraints.xor.Xor", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      IVecInt iVecInt0 = mock(IVecInt.class, new ViolatedAssumptionAnswer());
      doReturn(3813).when(iVecInt0).size();
      ILits iLits0 = mock(ILits.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(iLits0).isFalsified(anyInt());
      doReturn(true).when(iLits0).isSatisfied(anyInt());
      Xor xor0 = Xor.createParityConstraint(iVecInt0, true, iLits0);
      // Undeclared exception!
      try { 
        xor0.calcReason(3813, (IVecInt) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.minisat.constraints.xor.Xor", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      IVecInt iVecInt0 = mock(IVecInt.class, new ViolatedAssumptionAnswer());
      doReturn(43).when(iVecInt0).size();
      ILits iLits0 = mock(ILits.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(iLits0).isFalsified(anyInt());
      doReturn(false, false, true, true, true).when(iLits0).isSatisfied(anyInt());
      doReturn(false).when(iLits0).isUnassigned(anyInt());
      Xor xor0 = Xor.createParityConstraint(iVecInt0, false, iLits0);
      NoLearningButHeuristics<ClausalDataStructureWL> noLearningButHeuristics0 = new NoLearningButHeuristics<ClausalDataStructureWL>();
      ClausalDataStructureWL clausalDataStructureWL0 = new ClausalDataStructureWL();
      UserFixedPhaseSelectionStrategy userFixedPhaseSelectionStrategy0 = new UserFixedPhaseSelectionStrategy();
      LevelBasedVarOrderHeap levelBasedVarOrderHeap0 = new LevelBasedVarOrderHeap(userFixedPhaseSelectionStrategy0);
      LubyRestarts lubyRestarts0 = new LubyRestarts(1);
      Solver<ClausalDataStructureWL> solver0 = new Solver<ClausalDataStructureWL>(noLearningButHeuristics0, clausalDataStructureWL0, levelBasedVarOrderHeap0, lubyRestarts0);
      xor0.propagate(solver0, 0);
      VecInt vecInt0 = new VecInt(1);
      IVecInt iVecInt1 = vecInt0.pop();
      // Undeclared exception!
      try { 
        xor0.calcReason(2, iVecInt1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Xor xor0 = null;
      try {
        xor0 = new Xor((IVecInt) null, false, (ILits) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.minisat.constraints.xor.Xor", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      VecInt vecInt0 = new VecInt(1);
      vecInt0.pop();
      Xor xor0 = null;
      try {
        xor0 = new Xor(vecInt0, true, (ILits) null);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.minisat.constraints.xor.Xor", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      VecInt vecInt0 = new VecInt(1);
      vecInt0.shrink((-2835));
      Xor xor0 = null;
      try {
        xor0 = new Xor(vecInt0, true, (ILits) null);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      IVecInt iVecInt0 = mock(IVecInt.class, new ViolatedAssumptionAnswer());
      doReturn(3813).when(iVecInt0).size();
      ILits iLits0 = mock(ILits.class, new ViolatedAssumptionAnswer());
      Xor xor0 = Xor.createParityConstraint(iVecInt0, true, iLits0);
      boolean boolean0 = xor0.learnt();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      IVecInt iVecInt0 = mock(IVecInt.class, new ViolatedAssumptionAnswer());
      doReturn(3813).when(iVecInt0).size();
      ILits iLits0 = mock(ILits.class, new ViolatedAssumptionAnswer());
      Xor xor0 = Xor.createParityConstraint(iVecInt0, false, iLits0);
      xor0.register();
      assertTrue(xor0.canBeSatisfiedByCountingLiterals());
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      int[] intArray0 = new int[10];
      VecInt vecInt0 = new VecInt(intArray0);
      ILits iLits0 = mock(ILits.class, new ViolatedAssumptionAnswer());
      doReturn(true, true, true, true, true).when(iLits0).isFalsified(anyInt());
      Xor xor0 = Xor.createParityConstraint(vecInt0, false, iLits0);
      xor0.calcReason((-1), vecInt0);
      assertEquals(1, vecInt0.last());
      assertEquals(20, vecInt0.size());
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      IVecInt iVecInt0 = mock(IVecInt.class, new ViolatedAssumptionAnswer());
      doReturn(43).when(iVecInt0).size();
      ILits iLits0 = mock(ILits.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(iLits0).isFalsified(anyInt());
      doReturn(false).when(iLits0).isSatisfied(anyInt());
      Xor xor0 = Xor.createParityConstraint(iVecInt0, false, iLits0);
      VecInt vecInt0 = new VecInt(1);
      // Undeclared exception!
      try { 
        xor0.calcReason(2, vecInt0);
        fail("Expecting exception: AssertionError");
      
      } catch(AssertionError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      IVecInt iVecInt0 = mock(IVecInt.class, new ViolatedAssumptionAnswer());
      doReturn(3813).when(iVecInt0).size();
      ILits iLits0 = mock(ILits.class, new ViolatedAssumptionAnswer());
      doReturn(false, false, false).when(iLits0).isSatisfied(anyInt());
      doReturn(false, true).when(iLits0).isUnassigned(anyInt());
      doReturn((IVec) null).when(iLits0).watches(anyInt());
      Xor xor0 = Xor.createParityConstraint(iVecInt0, false, iLits0);
      // Undeclared exception!
      try { 
        xor0.propagate((UnitPropagationListener) null, 1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      IVecInt iVecInt0 = mock(IVecInt.class, new ViolatedAssumptionAnswer());
      doReturn(3795).when(iVecInt0).size();
      ILits iLits0 = mock(ILits.class, new ViolatedAssumptionAnswer());
      Xor xor0 = Xor.createParityConstraint(iVecInt0, false, iLits0);
      // Undeclared exception!
      try { 
        xor0.assertConstraintIfNeeded((UnitPropagationListener) null);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Not implemented yet!
         //
         verifyException("org.sat4j.minisat.constraints.xor.Xor", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      VecInt vecInt0 = new VecInt();
      Xor xor0 = new Xor(vecInt0, false, (ILits) null);
      // Undeclared exception!
      try { 
        xor0.getActivity();
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Not implemented yet!
         //
         verifyException("org.sat4j.minisat.constraints.xor.Xor", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      IVecInt iVecInt0 = mock(IVecInt.class, new ViolatedAssumptionAnswer());
      doReturn(3822).when(iVecInt0).size();
      ILits iLits0 = mock(ILits.class, new ViolatedAssumptionAnswer());
      Xor xor0 = Xor.createParityConstraint(iVecInt0, true, iLits0);
      int int0 = xor0.size();
      assertEquals(3822, int0);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      IVecInt iVecInt0 = mock(IVecInt.class, new ViolatedAssumptionAnswer());
      doReturn(3813).when(iVecInt0).size();
      ILits iLits0 = mock(ILits.class, new ViolatedAssumptionAnswer());
      Xor xor0 = Xor.createParityConstraint(iVecInt0, true, iLits0);
      // Undeclared exception!
      try { 
        xor0.locked();
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Not implemented yet!
         //
         verifyException("org.sat4j.minisat.constraints.xor.Xor", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      IVecInt iVecInt0 = mock(IVecInt.class, new ViolatedAssumptionAnswer());
      doReturn(3771).when(iVecInt0).size();
      ILits iLits0 = mock(ILits.class, new ViolatedAssumptionAnswer());
      Xor xor0 = Xor.createParityConstraint(iVecInt0, true, iLits0);
      VecInt vecInt0 = new VecInt();
      // Undeclared exception!
      try { 
        xor0.calcReasonOnTheFly(3771, vecInt0, vecInt0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Not implemented yet!
         //
         verifyException("org.sat4j.minisat.constraints.xor.Xor", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      IVecInt iVecInt0 = mock(IVecInt.class, new ViolatedAssumptionAnswer());
      doReturn(3813).when(iVecInt0).size();
      ILits iLits0 = mock(ILits.class, new ViolatedAssumptionAnswer());
      Xor xor0 = Xor.createParityConstraint(iVecInt0, false, iLits0);
      boolean boolean0 = xor0.canBeSatisfiedByCountingLiterals();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      IVecInt iVecInt0 = mock(IVecInt.class, new ViolatedAssumptionAnswer());
      doReturn(3813).when(iVecInt0).size();
      ILits iLits0 = mock(ILits.class, new ViolatedAssumptionAnswer());
      Xor xor0 = Xor.createParityConstraint(iVecInt0, true, iLits0);
      DotSearchTracing<DimacsOutputSolver> dotSearchTracing0 = new DotSearchTracing<DimacsOutputSolver>("");
      // Undeclared exception!
      try { 
        xor0.toString((VarMapper) dotSearchTracing0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Not implemented yet!
         //
         verifyException("org.sat4j.minisat.constraints.xor.Xor", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      IVecInt iVecInt0 = mock(IVecInt.class, new ViolatedAssumptionAnswer());
      doReturn(3813).when(iVecInt0).size();
      ILits iLits0 = mock(ILits.class, new ViolatedAssumptionAnswer());
      Xor xor0 = Xor.createParityConstraint(iVecInt0, true, iLits0);
      // Undeclared exception!
      try { 
        xor0.requiredNumberOfSatisfiedLiterals();
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Not implemented yet!
         //
         verifyException("org.sat4j.minisat.constraints.xor.Xor", e);
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      IVecInt iVecInt0 = mock(IVecInt.class, new ViolatedAssumptionAnswer());
      doReturn(28).when(iVecInt0).size();
      ILits iLits0 = mock(ILits.class, new ViolatedAssumptionAnswer());
      Xor xor0 = Xor.createParityConstraint(iVecInt0, false, iLits0);
      // Undeclared exception!
      try { 
        xor0.forwardActivity(28);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Not implemented yet!
         //
         verifyException("org.sat4j.minisat.constraints.xor.Xor", e);
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      VecInt vecInt0 = new VecInt();
      Xor xor0 = new Xor(vecInt0, true, (ILits) null);
      // Undeclared exception!
      try { 
        xor0.setLearnt();
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Not implemented yet!
         //
         verifyException("org.sat4j.minisat.constraints.xor.Xor", e);
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      IVecInt iVecInt0 = mock(IVecInt.class, new ViolatedAssumptionAnswer());
      doReturn(3813).when(iVecInt0).size();
      ILits iLits0 = mock(ILits.class, new ViolatedAssumptionAnswer());
      Xor xor0 = Xor.createParityConstraint(iVecInt0, true, iLits0);
      // Undeclared exception!
      try { 
        xor0.incActivity(1010.6201);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Not implemented yet!
         //
         verifyException("org.sat4j.minisat.constraints.xor.Xor", e);
      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      IVecInt iVecInt0 = mock(IVecInt.class, new ViolatedAssumptionAnswer());
      doReturn(3795).when(iVecInt0).size();
      ILits iLits0 = mock(ILits.class, new ViolatedAssumptionAnswer());
      Xor xor0 = Xor.createParityConstraint(iVecInt0, true, iLits0);
      Constr constr0 = xor0.toConstraint();
      assertFalse(constr0.canBePropagatedMultipleTimes());
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      int[] intArray0 = new int[10];
      VecInt vecInt0 = new VecInt(intArray0);
      ILits iLits0 = mock(ILits.class, new ViolatedAssumptionAnswer());
      Xor xor0 = Xor.createParityConstraint(vecInt0, false, iLits0);
      // Undeclared exception!
      try { 
        xor0.get(58);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 58
         //
         verifyException("org.sat4j.minisat.constraints.xor.Xor", e);
      }
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      IVecInt iVecInt0 = mock(IVecInt.class, new ViolatedAssumptionAnswer());
      doReturn(3813).when(iVecInt0).size();
      ILits iLits0 = mock(ILits.class, new ViolatedAssumptionAnswer());
      Xor xor0 = Xor.createParityConstraint(iVecInt0, true, iLits0);
      // Undeclared exception!
      try { 
        xor0.setActivity(3813);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Not implemented yet!
         //
         verifyException("org.sat4j.minisat.constraints.xor.Xor", e);
      }
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      IVecInt iVecInt0 = mock(IVecInt.class, new ViolatedAssumptionAnswer());
      doReturn(3813).when(iVecInt0).size();
      ILits iLits0 = mock(ILits.class, new ViolatedAssumptionAnswer());
      Xor xor0 = Xor.createParityConstraint(iVecInt0, true, iLits0);
      // Undeclared exception!
      try { 
        xor0.assertConstraint((UnitPropagationListener) null);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Not implemented yet!
         //
         verifyException("org.sat4j.minisat.constraints.xor.Xor", e);
      }
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      int[] intArray0 = new int[6];
      VecInt vecInt0 = new VecInt(intArray0);
      ILits iLits0 = mock(ILits.class, new ViolatedAssumptionAnswer());
      Xor xor0 = Xor.createParityConstraint(vecInt0, false, iLits0);
      boolean boolean0 = xor0.canBePropagatedMultipleTimes();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      int[] intArray0 = new int[10];
      VecInt vecInt0 = new VecInt(intArray0);
      ILits iLits0 = mock(ILits.class, new ViolatedAssumptionAnswer());
      Xor xor0 = Xor.createParityConstraint(vecInt0, false, iLits0);
      boolean boolean0 = xor0.simplify();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      int[] intArray0 = new int[9];
      VecInt vecInt0 = new VecInt(intArray0);
      ILits iLits0 = mock(ILits.class, new ViolatedAssumptionAnswer());
      Xor xor0 = Xor.createParityConstraint(vecInt0, false, iLits0);
      // Undeclared exception!
      try { 
        xor0.isSatisfied();
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Not implemented yet!
         //
         verifyException("org.sat4j.minisat.constraints.xor.Xor", e);
      }
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      IVecInt iVecInt0 = mock(IVecInt.class, new ViolatedAssumptionAnswer());
      doReturn(28).when(iVecInt0).size();
      ILits iLits0 = mock(ILits.class, new ViolatedAssumptionAnswer());
      Xor xor0 = Xor.createParityConstraint(iVecInt0, false, iLits0);
      // Undeclared exception!
      try { 
        xor0.rescaleBy(28);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Not implemented yet!
         //
         verifyException("org.sat4j.minisat.constraints.xor.Xor", e);
      }
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      int[] intArray0 = new int[9];
      VecInt vecInt0 = new VecInt(intArray0);
      ILits iLits0 = mock(ILits.class, new ViolatedAssumptionAnswer());
      Xor xor0 = Xor.createParityConstraint(vecInt0, false, iLits0);
      // Undeclared exception!
      try { 
        xor0.getAssertionLevel(vecInt0, 1965);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Not implemented yet!
         //
         verifyException("org.sat4j.minisat.constraints.xor.Xor", e);
      }
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      IVecInt iVecInt0 = mock(IVecInt.class, new ViolatedAssumptionAnswer());
      doReturn(3795).when(iVecInt0).size();
      ILits iLits0 = mock(ILits.class, new ViolatedAssumptionAnswer());
      Xor xor0 = Xor.createParityConstraint(iVecInt0, true, iLits0);
      // Undeclared exception!
      try { 
        xor0.propagatePI((MandatoryLiteralListener) null, 3795);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Not implemented yet!
         //
         verifyException("org.sat4j.minisat.constraints.xor.Xor", e);
      }
  }
}
