/*
 * This file was automatically generated by EvoSuite
 * Tue Oct 29 12:44:03 GMT 2019
 */

package com.eteks.sweethome3d.model;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.eteks.sweethome3d.model.BackgroundImage;
import com.eteks.sweethome3d.model.CatalogTexture;
import com.eteks.sweethome3d.model.Content;
import com.eteks.sweethome3d.model.HomeTexture;
import com.eteks.sweethome3d.model.Level;
import com.eteks.sweethome3d.model.TextureImage;
import com.eteks.sweethome3d.model.Wall;
import com.eteks.sweethome3d.tools.ResourceURLContent;
import com.eteks.sweethome3d.tools.URLContent;
import java.beans.PropertyChangeEvent;
import java.beans.PropertyChangeListener;
import java.beans.PropertyChangeListenerProxy;
import java.net.MalformedURLException;
import java.net.URL;
import java.util.LinkedList;
import java.util.List;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.net.MockURL;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Wall_ESTest extends Wall_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      Wall wall0 = new Wall(0.0F, 0.0F, 0.0F, 0.0F, 0.0F);
      wall0.setWallAtStart(wall0);
      wall0.containsWallEndAt(0.0F, 0.0F, 0.0F);
      wall0.setWallAtEnd(wall0);
      wall0.setYEnd(75.8551F);
      wall0.setRightSideColor((Integer) null);
      wall0.intersectsRectangle(0.0F, 0.0F, 0.0F, 0.01F);
      Integer integer0 = new Integer((-757));
      Integer integer1 = new Integer(46);
      wall0.setLeftSideColor(integer1);
      Float float0 = new Float((double) 461);
      wall0.setHeightAtEnd(float0);
      wall0.getLength();
      wall0.getLeftSideTexture();
      wall0.getRightSideColor();
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      Float.min((-2002.3F), (-2078.415F));
      Wall wall0 = new Wall((-3839.8455F), (-2078.415F), (-2078.415F), (-2479.613F), (-2002.3F));
      wall0.getPoints();
      wall0.getRightSideTexture();
      wall0.getXArcCircleCenter();
      wall0.clone();
      wall0.getStartPointToEndPointDistance();
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      Wall wall0 = new Wall(0.01F, 0.01F, 0.01F, 0.01F, 0.01F);
      PropertyChangeListener propertyChangeListener0 = mock(PropertyChangeListener.class, new ViolatedAssumptionAnswer());
      PropertyChangeListenerProxy propertyChangeListenerProxy0 = new PropertyChangeListenerProxy("x&sbu6", propertyChangeListener0);
      wall0.addPropertyChangeListener(propertyChangeListenerProxy0);
      wall0.containsWallStartAt((-933.8667F), (-2701.4355F), (-2701.4355F));
      wall0.getYArcCircleCenter();
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      Wall wall0 = new Wall(0.0F, 0.0F, 0.0F, 0.0F, 0.0F);
      wall0.containsWallStartAt(0.0F, 0.0F, 0.0F);
      wall0.setWallAtStart(wall0);
      wall0.containsPoint(0.0F, 0.0F, 0.0F);
      Wall wall1 = new Wall(0.0F, 4043.4763F, 0.0F, 3943.0F, 155.2F, 4043.4763F);
      wall1.containsWallEndAt(2213.745F, 155.2F, 1.0F);
      wall0.setWallAtStart(wall1);
      wall1.containsWallStartAt(4043.4763F, 0.0F, 4043.4763F);
      wall1.intersectsRectangle(1.0F, 2213.745F, 0.6593183F, (-1228.8142F));
      wall1.setXStart(0.0F);
      wall0.getYEnd();
      Wall wall2 = wall0.clone();
      wall1.setRightSideShininess(0.0F);
      Level level0 = new Level("", (-1.0F), 2683.0F, 0.0F);
      level0.getElevation();
      level0.getHeight();
      wall1.isAtLevel(level0);
      wall2.getRightSideColor();
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      Wall wall0 = new Wall((-1.0F), (-1.0F), 0.0F, 0.0F, 1557.0F);
      Integer.valueOf((-1320));
      Integer integer0 = Integer.valueOf(2517);
      Integer.compareUnsigned(0, (-1659));
      wall0.containsWallEndAt(1.0F, (-1.0F), 1.0F);
      wall0.setLeftSideColor(integer0);
      wall0.clone();
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      Wall wall0 = new Wall(0.0F, 0.0F, 0.0F, 0.0F, 0.0F);
      wall0.containsWallStartAt(0.0F, 0.0F, 0.0F);
      wall0.setWallAtStart(wall0);
      wall0.containsPoint(0.0F, 0.0F, 0.0F);
      Wall wall1 = new Wall(0.0F, 4043.4763F, 0.0F, 0.0F, 155.2F, 155.2F);
      wall1.containsWallEndAt(0.0F, 155.2F, 155.2F);
      wall0.setWallAtStart(wall1);
      wall1.getHeightAtEnd();
      wall1.setWallAtEnd(wall0);
      wall1.getArcExtent();
      Float float0 = new Float(0.0F);
      wall1.setHeightAtEnd((Float) null);
      wall0.getRightSideTexture();
      Float float1 = new Float(0.0F);
      wall1.setArcExtent(float1);
      Float float2 = new Float(0.0F);
      wall1.getLength();
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      Wall wall0 = new Wall(0.0F, 0.0F, 0.0F, 0.0F, 0.0F);
      wall0.setWallAtStart(wall0);
      wall0.containsWallEndAt(0.0F, 0.0F, 0.0F);
      wall0.setWallAtEnd(wall0);
      Wall wall1 = new Wall(0.0F, 0.0F, 0.0F, (-4465.5F), 1668.4F);
      wall0.setWallAtEnd(wall1);
      Float float0 = new Float(0.0);
      float0.floatValue();
      Float float1 = new Float(12111.837763271818);
      wall0.setArcExtent(float1);
      Float float2 = new Float(0.0F);
      wall0.setArcExtent(float2);
      wall0.getPoints();
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      Wall wall0 = new Wall(1.0F, 0.01F, 1.0F, 1.0F, 0.01F);
      wall0.move((-1.0F), 1.0F);
      wall0.setArcExtent((Float) (-1.0F));
      wall0.containsWallEndAt(764.0F, (-1.0F), 1.0F);
      wall0.setXEnd((-1998.2078F));
      Wall wall1 = wall0.clone();
      wall0.setWallAtEnd(wall1);
      wall1.containsWallStartAt(1583.39F, (-1.0F), (-212.0F));
      wall0.getXArcCircleCenter();
      wall0.setYStart(764.0F);
      Wall wall2 = wall0.getWallAtEnd();
      wall2.getRightSideTexture();
      Integer integer0 = new Integer((-595));
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      Wall wall0 = new Wall(0.0F, 0.0F, 0.0F, 0.0F, 0.0F);
      wall0.containsWallStartAt(0.0F, 0.0F, 0.0F);
      wall0.setWallAtStart(wall0);
      wall0.containsPoint(0.0F, 0.0F, 0.0F);
      Wall wall1 = new Wall(0.0F, 4043.4763F, 0.0F, 3943.0F, 155.2F, (-1228.8142F));
      wall1.containsWallEndAt(2213.745F, 155.2F, 1.0F);
      wall0.setWallAtStart(wall1);
      wall1.getHeightAtEnd();
      wall1.setWallAtEnd(wall0);
      wall1.getArcExtent();
      wall0.getStartPointToEndPointDistance();
      wall0.setHeightAtEnd((Float) null);
      wall1.getRightSideTexture();
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      Wall wall0 = new Wall(1.0F, 0.01F, 1.0F, 1.0F, 0.01F);
      Float.floatToIntBits((-1.0F));
      wall0.setArcExtent((Float) (-1.0F));
      wall0.containsWallEndAt(764.0F, (-1.0F), 0.0F);
      wall0.setXEnd((-1998.2078F));
      Wall wall1 = wall0.clone();
      wall0.setWallAtEnd(wall1);
      wall0.getYArcCircleCenter();
      Float float0 = new Float(647.44574F);
      wall1.getXEnd();
      wall1.getHeight();
      wall0.setWallAtStart(wall1);
      wall1.setHeight((Float) null);
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      Wall wall0 = new Wall(0.01F, 2834.9739F, 2834.9739F, 1.0F, 2834.9739F, 2834.9739F);
      wall0.move(2834.9739F, 1.01F);
      Float float0 = new Float(0.0F);
      Float float1 = new Float((-2.2034645F));
      Float float2 = new Float(1.0F);
      wall0.setArcExtent(float0);
      Float float3 = new Float(13.809036F);
      wall0.getLength();
      wall0.getLevel();
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      Wall wall0 = new Wall(0.0F, 0.0F, 0.0F, 0.0F, 0.0F);
      wall0.containsWallStartAt(0.0F, 0.0F, 0.0F);
      wall0.setWallAtStart(wall0);
      wall0.containsWallEndAt(0.0F, 0.0F, 0.0F);
      Wall wall1 = new Wall(0.0F, 0.0F, 0.0F, 3943.0F, 0.0F, (-1228.8142F));
      wall0.setWallAtEnd(wall1);
      Wall wall2 = wall0.getWallAtStart();
      wall2.setLeftSideShininess(0.0F);
      wall1.setWallAtStart(wall2);
      wall1.containsPoint(1544.4587F, (-1.0F), 3943.0F);
      wall2.getPoints();
      wall0.getLeftSideTexture();
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      Wall wall0 = new Wall(20.639364F, 20.639364F, 20.639364F, 20.639364F, 20.639364F, 20.639364F);
      wall0.getWallAtEnd();
      wall0.setWallAtStart((Wall) null);
      wall0.clone();
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      Float.min((-2002.3F), (-2479.613F));
      Wall wall0 = new Wall((-3839.8455F), (-2479.613F), (-2479.613F), (-2479.613F), (-2002.3F));
      Float float0 = new Float((double) (-2479.613F));
      wall0.setLeftSideShininess((-1972.0F));
      wall0.setArcExtent(float0);
      wall0.getPoints();
      wall0.getRightSideColor();
      wall0.clone();
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      Wall wall0 = new Wall((-4215.8525F), (-4215.8525F), (-4215.8525F), (-4215.8525F), (-4215.8525F));
      Float float0 = new Float((double) (-4215.8525F));
      wall0.setArcExtent(float0);
      PropertyChangeListener propertyChangeListener0 = mock(PropertyChangeListener.class, new ViolatedAssumptionAnswer());
      wall0.setXEnd((-1.0F));
      wall0.setWallAtEnd(wall0);
      wall0.setHeight(float0);
      wall0.getYArcCircleCenter();
      wall0.getHeightAtEnd();
      wall0.setWallAtEnd(wall0);
      wall0.getArcExtent();
      wall0.getStartPointToEndPointDistance();
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      Wall wall0 = new Wall((-2290.88F), (-2290.88F), (-2290.88F), (-2290.88F), (-2290.88F), (-2290.88F));
      wall0.containsPoint((-2290.88F), (-2290.88F), 0.0F);
      wall0.setThickness((-2290.88F));
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      Wall wall0 = new Wall((-2034.0F), (-1041.2F), (-2034.0F), (-2034.0F), (-1.0F));
      Wall wall1 = wall0.clone();
      Float.floatToIntBits(0.1F);
      wall0.setThickness(0.1F);
      wall0.containsWallEndAt(3494.5828F, 0.1F, (-2034.0F));
      wall0.setLeftSideShininess(1.0F);
      Float.floatToIntBits((-2208.2087F));
      wall0.setRightSideShininess(0.1F);
      wall1.setHeightAtEnd((Float) (-2208.2087F));
      wall1.getLeftSideShininess();
      wall0.setWallAtStart(wall1);
      wall0.setYEnd(3494.5828F);
      wall1.containsWallEndAt(3494.5828F, 2344.265F, 2344.265F);
      Float float0 = new Float(382.47385F);
      Float.isFinite((-1.0F));
      Float.max((-989199529), (-2130.0F));
      wall1.containsPoint(2247.54F, (-1246.0F), (-1041.2F));
      Float.max(1747.3014F, (-2208.2087F));
      wall1.setHeightAtEnd(float0);
      wall0.getLeftSideShininess();
      wall0.getRightSideColor();
      wall1.getXStart();
      // Undeclared exception!
      try { 
        Wall.Property.valueOf("~");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant com.eteks.sweethome3d.model.Wall.Property.~
         //
         verifyException("java.lang.Enum", e);
      }
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      Wall wall0 = new Wall(13.809F, 13.809F, 13.809F, 13.809F, 13.809F, 13.809F);
      Wall wall1 = new Wall(13.809F, 13.809F, 13.809F, 13.809F, 13.809F);
      wall0.setWallAtStart(wall1);
      wall1.getRightSideColor();
      wall0.getPoints();
      wall1.getPoints();
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      Wall wall0 = new Wall((-1.0F), (-1.0F), (-1.0F), (-1053.549F), (-1053.549F));
      Float.floatToIntBits((-4841.38F));
      Float.floatToIntBits(0.0F);
      wall0.setArcExtent((Float) 0.0F);
      wall0.containsWallStartAt((-1053.549F), 1.01F, (-1.0F));
      wall0.getXArcCircleCenter();
      wall0.setRightSideShininess(2897.6F);
      wall0.setYStart(1.01F);
      wall0.getRightSideTexture();
      Integer integer0 = new Integer(0);
      wall0.getHeightAtEnd();
      wall0.getPoints();
      LinkedList<Wall> linkedList0 = new LinkedList<Wall>();
      Wall.clone((List<Wall>) linkedList0);
      wall0.getArcExtent();
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      Wall wall0 = new Wall(0.0F, 0.0F, 0.0F, 0.1F, 0.0F);
      wall0.containsWallStartAt(0.1F, 0.0F, 0.1F);
      wall0.setWallAtStart(wall0);
      wall0.containsPoint(0.0F, 0.0F, 0.0F);
      Integer integer0 = new Integer(5353);
      wall0.setLeftSideColor(integer0);
      Wall wall1 = wall0.clone();
      wall1.setYStart((-328.9935F));
      wall1.setLeftSideShininess(0.0F);
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      Wall wall0 = new Wall(0.01F, 1747.2914F, 1747.2914F, 1.0F, 1747.2914F, 1747.2914F);
      wall0.move(1747.2914F, 1.0F);
      wall0.containsPoint(1.0F, 445.4F, 1.0F);
      Float.sum(0.01F, 445.4F);
      Float float0 = new Float(0.01F);
      wall0.setArcExtent(float0);
      wall0.containsWallStartAt((-534.42F), 613.716F, 1.0F);
      wall0.getXArcCircleCenter();
      wall0.setYStart(613.716F);
      wall0.intersectsRectangle(445.4F, 445.41F, 0.01F, 1747.2914F);
      wall0.setArcExtent(float0);
      wall0.getStartPointToEndPointDistance();
      wall0.getStartPointToEndPointDistance();
      wall0.setHeightAtEnd(float0);
      wall0.getRightSideTexture();
      wall0.getPattern();
      wall0.getPoints();
      wall0.getHeightAtEnd();
      wall0.getPattern();
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      Wall wall0 = new Wall(0.1F, 0.1F, 0.1F, 0.1F, 0.1F, 0.1F);
      wall0.intersectsRectangle(0.1F, 0.1F, 0.1F, 0.1F);
      Float float0 = new Float(0.1F);
      wall0.getPoints();
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      Wall wall0 = new Wall(0.01F, 0.01F, 0.01F, 1.0F, 0.01F, 0.01F);
      Wall wall1 = new Wall(0.01F, 1.0F, 0.01F, 0.01F, 0.01F, 0.01F);
      wall1.setWallAtEnd(wall0);
      wall0.setWallAtEnd(wall1);
      wall0.setWallAtEnd(wall1);
      Float float0 = new Float(1.0F);
      Float.min(0.0F, 1.0F);
      Float float1 = new Float(1.0F);
      float1.floatValue();
      wall1.setHeight((Float) 1.0F);
      wall1.getPoints();
      wall0.getPoints();
      wall1.getPoints();
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      Wall wall0 = new Wall((-4215.8525F), (-4215.8525F), (-4215.8525F), (-4215.8525F), (-4215.8525F));
      wall0.getPoints();
      Float float0 = new Float((double) (-4215.8525F));
      wall0.setArcExtent(float0);
      PropertyChangeListener propertyChangeListener0 = mock(PropertyChangeListener.class, new ViolatedAssumptionAnswer());
      wall0.setXEnd((-1.0F));
      wall0.setWallAtEnd(wall0);
      wall0.getYArcCircleCenter();
      wall0.getHeightAtEnd();
      wall0.setWallAtEnd(wall0);
      wall0.getStartPointToEndPointDistance();
      wall0.getPattern();
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      Wall wall0 = new Wall(0.01F, 0.01F, 0.01F, 1.0F, 0.01F, 0.01F);
      Float.sum(0.01F, 0.0F);
      Wall wall1 = new Wall(1.0F, 1306.6985F, (-480.33368F), 0.01F, (-480.33368F), 155.2F);
      wall0.setWallAtEnd(wall1);
      wall1.setWallAtEnd(wall0);
      wall1.getPoints();
      Float float0 = new Float((-480.33368F));
      wall1.setWallAtStart(wall0);
      wall1.containsPoint(1.0F, 0.1F, 3458.995F);
      wall0.getPoints();
      wall1.getRightSideTexture();
      wall0.getLeftSideTexture();
      wall0.clone();
      wall1.getWallAtEnd();
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      Wall wall0 = new Wall(0.0F, 0.0F, 0.0F, 0.0F, 0.0F);
      wall0.containsWallStartAt(0.0F, 0.0F, 0.0F);
      wall0.setWallAtStart(wall0);
      wall0.containsPoint(0.0F, 0.0F, 0.0F);
      Wall wall1 = new Wall(4305.4F, 1973.765F, 4043.4763F, (-1911.0016F), 0.01F, 0.0F);
      wall0.containsWallEndAt(1973.765F, 0.0F, 0.0F);
      wall1.setWallAtStart(wall0);
      wall0.getHeightAtEnd();
      wall1.setWallAtEnd(wall0);
      wall0.getArcExtent();
      Float.floatToIntBits(0.0F);
      Float.floatToIntBits(0);
      wall1.setHeightAtEnd((Float) 0.0F);
      wall0.getRightSideTexture();
      Wall wall2 = new Wall(0.0F, 2059.0F, 4305.4F, (-1146.0385F), 155.2F);
      wall2.getRightSideColor();
      wall1.getLevel();
      wall0.isAtLevel((Level) null);
      wall1.getWallAtEnd();
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      float float0 = 1892.5264F;
      Wall wall0 = new Wall(1571.397F, 0.0F, (-2116.07F), 1892.5264F, (-2116.07F), (-2116.07F));
      wall0.setLeftSideShininess((-1.0F));
      PropertyChangeListener propertyChangeListener0 = mock(PropertyChangeListener.class, new ViolatedAssumptionAnswer());
      PropertyChangeListenerProxy propertyChangeListenerProxy0 = new PropertyChangeListenerProxy("temp", propertyChangeListener0);
      wall0.removePropertyChangeListener(propertyChangeListenerProxy0);
      wall0.containsPoint((-2116.07F), (-1.0F), 0.0F);
      Wall wall1 = new Wall(0.0F, 0.0F, (-919), (-3781.0F), 0.0F, 0.0F);
      wall0.setWallAtEnd(wall1);
      Integer.valueOf((-919));
      try { 
        Integer.parseUnsignedInt("");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      Wall wall0 = new Wall(0.0F, 0.0F, 0.0F, 0.0F, 0.0F);
      wall0.containsWallStartAt(0.0F, 0.0F, 0.0F);
      wall0.setWallAtStart(wall0);
      wall0.containsWallEndAt(0.0F, 0.0F, 0.0F);
      Wall wall1 = new Wall(0.0F, 4043.4763F, 0.0F, 3943.0F, 0.0F, (-1228.8142F));
      wall0.setWallAtEnd(wall1);
      Wall wall2 = wall0.getWallAtStart();
      wall1.setWallAtStart(wall2);
      wall0.containsPoint((-1.0F), 3943.0F, (-193.5527F));
      wall1.getPoints();
      wall2.getLeftSideTexture();
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      Wall wall0 = new Wall(0.1F, 0.1F, 0.1F, 0.1F, 0.1F);
      Float float0 = new Float((double) 0.1F);
      Float float1 = new Float(0.1F);
      Float.compare(0.0F, (-3729.8564F));
      Float.compare(1, 1);
      Float.compare(0, (-1776.0F));
      Float.compare(0.0F, 1585.0F);
      Float.compare((-3729.8564F), 0.0F);
      Float.compare((-1.0F), 1155.5919F);
      wall0.setHeightAtEnd((Float) 1155.5919F);
      Float.floatToIntBits((-1806.5471F));
      Float.floatToIntBits(0.0F);
      wall0.setHeightAtEnd((Float) 0.0F);
      wall0.getHeightAtEnd();
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      Wall wall0 = new Wall(1.0F, 1.0F, 0.0F, 1.0F, 1.0F);
      wall0.containsWallStartAt(0.0F, 1.0F, 0.0F);
      wall0.setWallAtStart(wall0);
      wall0.containsWallEndAt(0.0F, 0.0F, 0.0F);
      Wall wall1 = new Wall(0.0F, 4043.4763F, 0.0F, 3943.0F, 155.2F, (-1228.8142F));
      wall0.setWallAtEnd(wall1);
      wall1.setWallAtEnd(wall0);
      Float float0 = new Float((-1.0F));
      wall0.setHeight(float0);
      wall0.getYArcCircleCenter();
      wall1.getPoints();
      wall1.getRightSideTexture();
      Integer integer0 = new Integer(3157);
      wall1.setRightSideColor(integer0);
      Integer integer1 = new Integer(3157);
      wall1.clone();
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      Wall wall0 = new Wall(0.0F, 0.0F, 0.0F, 0.0F, 0.0F);
      wall0.containsWallStartAt(0.0F, 0.0F, 0.0F);
      wall0.setWallAtStart(wall0);
      wall0.containsWallEndAt(0.0F, 0.0F, 0.0F);
      Wall wall1 = new Wall(0.0F, 4043.4763F, 0.0F, 3943.0F, 0.0F, (-1228.8142F));
      wall0.setWallAtEnd(wall1);
      Wall wall2 = wall0.getWallAtStart();
      wall1.setWallAtStart(wall2);
      wall0.containsPoint((-1.0F), 3943.0F, (-1185.5051F));
      wall1.getPoints();
      wall0.getRightSideTexture();
      wall2.getLeftSideTexture();
      wall2.getPoints();
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      Wall wall0 = new Wall(13.809036F, 13.809036F, 13.809036F, 13.809036F, 0.0F);
      wall0.containsWallStartAt(13.809036F, 0.0F, 13.809036F);
      wall0.setWallAtStart(wall0);
      wall0.containsPoint(13.809036F, 13.809036F, 13.809036F);
      LinkedList<Wall> linkedList0 = new LinkedList<Wall>();
      LinkedList<Wall> linkedList1 = new LinkedList<Wall>();
      linkedList1.offerLast(wall0);
      Wall.clone((List<Wall>) linkedList1);
      wall0.getWallAtEnd();
      Integer integer0 = new Integer((-3125));
      wall0.setLeftSideColor(integer0);
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      Wall wall0 = new Wall((-1093.932F), (-3927.73F), (-1093.932F), (-1093.932F), 1.0F);
      wall0.getPattern();
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      Wall wall0 = new Wall(2.0F, 2.0F, 2.0F, 0.0F, 1767.5094F);
      assertNotNull(wall0);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals(2.0F, wall0.getXEnd(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(2.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(2.0F, wall0.getLength(), 0.01F);
      assertEquals(1767.5094F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals(2.0F, wall0.getXStart(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(1.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(2.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(2.0F, wall0.getYStart(), 0.01F);
      
      Integer integer0 = Integer.valueOf((-991));
      assertNotNull(integer0);
      assertEquals((-991), (int)integer0);
      
      wall0.setLeftSideColor(integer0);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals(2.0F, wall0.getXEnd(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(2.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(2.0F, wall0.getLength(), 0.01F);
      assertEquals(1767.5094F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals((-991), (int)wall0.getLeftSideColor());
      assertEquals(2.0F, wall0.getXStart(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(1.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(2.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(2.0F, wall0.getYStart(), 0.01F);
      
      Wall wall1 = wall0.clone();
      assertFalse(wall1.equals((Object)wall0));
      assertNotNull(wall1);
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals(2.0F, wall0.getXEnd(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(2.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(2.0F, wall0.getLength(), 0.01F);
      assertEquals(1767.5094F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals((-991), (int)wall0.getLeftSideColor());
      assertEquals(2.0F, wall0.getXStart(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(1.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(2.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(2.0F, wall0.getYStart(), 0.01F);
      assertEquals(2.0F, wall1.getXStart(), 0.01F);
      assertEquals(2.0F, wall1.getLength(), 0.01F);
      assertEquals(1.0F, wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(2.0F, wall1.getXEnd(), 0.01F);
      assertEquals((-991), (int)wall1.getLeftSideColor());
      assertEquals(0.0F, wall1.getYEnd(), 0.01F);
      assertEquals(1767.5094F, wall1.getThickness(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertNull(wall1.getHeight());
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertFalse(wall1.isTrapezoidal());
      assertEquals(2.0F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(2.0F, wall1.getYStart(), 0.01F);
      assertEquals(2.0F, wall1.getXArcCircleCenter(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      
      wall0.setYStart(0.0F);
      assertFalse(wall0.equals((Object)wall1));
      assertNotSame(wall0, wall1);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals(2.0F, wall0.getXEnd(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(2.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(1767.5094F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals((-991), (int)wall0.getLeftSideColor());
      assertEquals(2.0F, wall0.getXStart(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      
      wall0.setLeftSideShininess(0.0F);
      assertFalse(wall0.equals((Object)wall1));
      assertNotSame(wall0, wall1);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals(2.0F, wall0.getXEnd(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(2.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(1767.5094F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals((-991), (int)wall0.getLeftSideColor());
      assertEquals(2.0F, wall0.getXStart(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      Wall wall0 = new Wall(0.0F, 0.0F, 0.0F, 0.0F, 0.0F);
      wall0.containsWallStartAt(0.0F, 0.0F, 0.0F);
      wall0.setWallAtStart(wall0);
      wall0.containsWallStartAt(0.0F, 0.0F, 0.0F);
      Float float0 = new Float(0.0F);
      Integer integer0 = new Integer(19);
      wall0.setRightSideColor(integer0);
      wall0.setArcExtent(float0);
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      Wall wall0 = new Wall(13.809036F, 13.809036F, 13.809036F, 13.809036F, 0.0F);
      wall0.containsWallStartAt(13.809036F, 0.0F, 13.809036F);
      wall0.setWallAtStart(wall0);
      wall0.containsPoint(13.809036F, 13.809036F, 13.809036F);
      Wall wall1 = new Wall(13.809036F, 4044.5522F, 13.809036F, 13.809036F, 155.2F, 155.2F);
      wall1.containsWallEndAt(0.0F, 155.2F, 155.2F);
      wall0.setWallAtStart(wall1);
      wall1.getHeightAtEnd();
      wall1.setWallAtEnd(wall0);
      wall1.setHeightAtEnd((Float) null);
      wall0.getRightSideTexture();
      Integer integer0 = new Integer(483);
      wall0.setRightSideColor(integer0);
      wall0.intersectsRectangle(309.7924F, 1.0F, 0.0F, 4044.5522F);
      wall1.getRightSideColor();
      wall0.getLevel();
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      Wall wall0 = new Wall(0.0F, 0.0F, 0.0F, 0.0F, 0.0F);
      wall0.containsWallStartAt(0.0F, 0.0F, 0.0F);
      wall0.setWallAtStart(wall0);
      wall0.isTrapezoidal();
      Float float0 = new Float((double) 0.0F);
      wall0.setArcExtent(float0);
      wall0.getPoints();
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      Wall wall0 = new Wall(0.01F, 0.01F, 0.01F, 1.0F, 0.01F, 0.01F);
      Float.sum(0.01F, 0.0F);
      Float float0 = new Float((-1.0F));
      wall0.setHeightAtEnd(float0);
      Float float1 = new Float(0.01F);
      wall0.setYEnd(0.01F);
      wall0.setRightSideColor((Integer) null);
      wall0.intersectsRectangle(1.0F, 1.0F, 0.01F, 0.01F);
      Integer integer0 = new Integer(46);
      Integer integer1 = new Integer(461);
      wall0.setLeftSideColor(integer1);
      wall0.setHeightAtEnd(float0);
      Integer integer2 = wall0.getLeftSideColor();
      wall0.setRightSideColor(integer2);
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      Wall wall0 = new Wall(0.0F, 0.0F, 0.0F, 0.0F, 0.0F);
      wall0.setWallAtStart(wall0);
      wall0.containsWallEndAt(0.0F, 0.0F, 0.0F);
      wall0.setWallAtEnd(wall0);
      wall0.getPoints();
      wall0.getLeftSideTexture();
      Float float0 = new Float(0.0F);
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      Wall wall0 = new Wall(2589.8674F, 0.0F, 0.0F, 0.0F, 0.0F);
      Wall wall1 = wall0.clone();
      Wall wall2 = wall0.clone();
      wall2.containsWallEndAt(2589.8674F, 0.0F, 0.0F);
      wall0.getRightSideTexture();
      PropertyChangeListener propertyChangeListener0 = mock(PropertyChangeListener.class, new ViolatedAssumptionAnswer());
      PropertyChangeListenerProxy propertyChangeListenerProxy0 = new PropertyChangeListenerProxy("MHT:~~t+i8$W.8d)0X", propertyChangeListener0);
      wall1.addPropertyChangeListener(propertyChangeListenerProxy0);
      wall1.getXArcCircleCenter();
      wall0.getHeightAtEnd();
      wall1.getLeftSideShininess();
      wall1.setRightSideShininess((-1.0F));
      wall0.containsPoint((-913.727F), 0.0F, 1014.9F);
      wall1.setPattern((TextureImage) null);
      wall0.getHeight();
      Wall wall3 = new Wall((-1476.5521F), 0.1F, 0.0F, 0.0F, 0.0F);
      wall0.getWallAtEnd();
      wall3.setArcExtent((Float) null);
      // Undeclared exception!
      try { 
        Wall.clone((List<Wall>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.eteks.sweethome3d.model.Wall", e);
      }
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      Wall wall0 = new Wall(0.0F, 0.0F, 0.0F, 0.0F, 0.0F);
      wall0.containsWallStartAt(0.0F, 0.0F, 0.0F);
      wall0.setWallAtStart(wall0);
      Wall wall1 = new Wall(0.0F, 0.0F, 0.0F, 3943.0F, 0.0F, 0.0F);
      wall0.move(0.0F, (-456.7F));
      wall0.setWallAtEnd(wall1);
      Wall wall2 = wall0.getWallAtStart();
      wall2.setLeftSideShininess(0.0F);
      wall1.setWallAtStart(wall2);
      wall1.containsPoint(1544.4587F, (-1.0F), 3943.0F);
      wall2.getPoints();
      Wall wall3 = wall2.getWallAtStart();
      wall3.getLeftSideTexture();
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      Wall wall0 = new Wall((-13.933775F), 1.2353885F, 1.2353885F, (-13.933775F), (-13.933775F));
      Float float0 = new Float((-13.933775F));
      Float float1 = new Float(3.271868944168);
      wall0.setArcExtent(float1);
      wall0.getPoints();
      wall0.clone();
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      Wall wall0 = new Wall(0.0F, 0.0F, 0.0F, 0.0F, 0.0F);
      wall0.containsWallStartAt(0.0F, 0.0F, 0.0F);
      wall0.setWallAtStart(wall0);
      wall0.containsPoint(0.0F, 0.0F, 0.0F);
      wall0.containsWallStartAt(2157.0F, 2157.0F, 1747.2914F);
      Wall wall1 = new Wall(2047.2628F, 2157.0F, 0.0F, 0.0F, 3831.811F, (-3166.5F));
      wall0.setWallAtStart(wall1);
      wall1.containsPoint(0.1F, 0.0F, 1747.2914F);
      wall0.intersectsRectangle(2047.2628F, 0.0F, (-678.548F), (-678.548F));
      wall1.containsWallEndAt(1294.9337F, (-3166.5F), 1134.5881F);
      wall0.isTrapezoidal();
      wall0.getLevel();
      wall1.setYStart(0.1F);
      wall1.containsWallEndAt(3109.7F, 2157.0F, 1.0F);
      wall0.getWallAtStart();
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      Wall wall0 = new Wall(2766.8726F, (-1476.5521F), 2766.8726F, 2766.8726F, 2766.8726F);
      wall0.setXEnd(0.0F);
      wall0.getArcExtent();
      Float.isFinite(0.0F);
      Float.sum(2040.5863F, (-4275.436F));
      wall0.setHeightAtEnd((Float) null);
      wall0.setXEnd((-12.148527F));
      wall0.getThickness();
      wall0.setYEnd((-1476.5521F));
      wall0.setRightSideColor((Integer) null);
      wall0.containsWallEndAt(2.0F, (-5360.0F), 993.07F);
      wall0.containsWallEndAt(0.0F, 2311.6636F, 0.1F);
      wall0.isTrapezoidal();
      wall0.getLevel();
      wall0.setRightSideColor((Integer) null);
      wall0.clone();
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      Wall wall0 = new Wall(0.1F, 0.1F, 0.1F, 0.1F, 0.1F);
      wall0.getLeftSideTexture();
      wall0.setPattern((TextureImage) null);
      wall0.intersectsRectangle(646.18F, 646.18F, 0.1F, 646.18F);
      PropertyChangeListener propertyChangeListener0 = mock(PropertyChangeListener.class, new ViolatedAssumptionAnswer());
      PropertyChangeListenerProxy propertyChangeListenerProxy0 = new PropertyChangeListenerProxy("i", propertyChangeListener0);
      wall0.removePropertyChangeListener(propertyChangeListenerProxy0);
      wall0.removePropertyChangeListener(propertyChangeListenerProxy0);
      wall0.getRightSideTexture();
      wall0.containsWallEndAt(646.18F, 0.0F, 0.0F);
      wall0.isTrapezoidal();
      wall0.getLevel();
      wall0.setLevel((Level) null);
      wall0.containsWallStartAt(646.18F, 0.0F, 0.0F);
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      Wall wall0 = new Wall(0.0F, 0.0F, 1.0F, 0.0F, 1.0F, 0.0F);
      wall0.containsWallStartAt(0.0F, 1.0F, 0.0F);
      wall0.setWallAtStart(wall0);
      wall0.containsWallEndAt(0.0F, 0.0F, 0.0F);
      Wall wall1 = new Wall(0.0F, 4043.4763F, 0.0F, 3943.0F, 155.2F, (-1228.8142F));
      wall0.setWallAtEnd(wall1);
      wall1.setWallAtEnd(wall0);
      Float float0 = new Float((-1.0F));
      wall0.setHeight(float0);
      wall0.getYArcCircleCenter();
      wall1.getPoints();
      wall1.getRightSideTexture();
      Wall wall2 = new Wall((-562.3F), (-1.0F), (-562.3F), (-2451.963F), (-1.0F));
      wall2.clone();
      wall1.getPattern();
      wall0.clone();
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      Wall wall0 = new Wall(0.1F, 0.1F, 0.1F, 0.1F, 0.1F);
      wall0.getPoints();
      wall0.getLeftSideTexture();
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      Wall wall0 = new Wall(13.809F, 13.809F, 13.809F, 13.809F, 13.809F, 13.809F);
      wall0.setWallAtStart(wall0);
      Wall wall1 = new Wall(13.809F, 13.809F, 13.809F, 13.809F, 13.809F);
      wall0.setWallAtStart(wall1);
      wall1.setWallAtEnd(wall0);
      wall1.clone();
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      Wall wall0 = new Wall(0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F);
      wall0.containsWallStartAt(0.0F, 0.0F, 0.0F);
      wall0.setWallAtStart(wall0);
      wall0.containsWallEndAt(0.0F, 0.0F, 0.0F);
      Wall wall1 = new Wall(0.0F, 4043.4763F, 0.0F, 3943.0F, 155.0F, 0.0F);
      wall0.setWallAtEnd(wall1);
      Wall wall2 = wall0.getWallAtStart();
      wall1.setWallAtStart(wall2);
      wall1.containsPoint(3943.0F, 629.18713F, (-1185.5051F));
      wall0.getPoints();
      wall2.getRightSideTexture();
      wall1.getLeftSideTexture();
      wall1.getLeftSideTexture();
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      Wall wall0 = new Wall(1156.155F, 1156.155F, 664.4F, 0.01F, 0.0F);
      wall0.isTrapezoidal();
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      Wall wall0 = new Wall(4250.398F, 4250.398F, (-779.0F), (-779.0F), 799.75F);
      wall0.getYArcCircleCenter();
      Float float0 = new Float((-2134.0F));
      wall0.getPattern();
      Integer integer0 = new Integer(2146247116);
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      Wall wall0 = new Wall(0.01F, 2557.0725F, 2557.0725F, 0.01F, 0.01F);
      Wall wall1 = wall0.clone();
      Float.valueOf(1505.73F);
      Float.valueOf((-3379.2405F));
      Float float0 = Float.valueOf(1505.73F);
      wall1.setHeightAtEnd(float0);
      PropertyChangeListener propertyChangeListener0 = mock(PropertyChangeListener.class, new ViolatedAssumptionAnswer());
      wall0.setRightSideShininess(1401.0F);
      wall1.getRightSideShininess();
      wall0.setWallAtStart((Wall) null);
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      Wall wall0 = new Wall(0.1F, 0.1F, 0.1F, 0.1F, 0.1F, 0.1F);
      wall0.getArcExtent();
      wall0.setArcExtent((Float) null);
      wall0.setArcExtent((Float) null);
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      Wall wall0 = new Wall(0.01F, 1747.2914F, 1747.2914F, 1.0F, 1747.2914F, 1747.2914F);
      wall0.containsPoint(1.0F, 445.4F, 2213.745F);
      wall0.setYStart(2213.745F);
      wall0.intersectsRectangle(0.01F, (-3393.8887F), 1747.2914F, (-3393.8887F));
      wall0.setWallAtStart(wall0);
      wall0.containsWallStartAt((-3393.8887F), 2.0F, 1051.9F);
      wall0.setXStart(2.0F);
      wall0.getYEnd();
      wall0.setRightSideShininess((-3331.683F));
      Wall wall1 = wall0.clone();
      wall1.setThickness((-3997.2437F));
      wall1.getPattern();
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      Wall wall0 = new Wall(0.0F, 0.0F, 0.0F, 0.0F, 0.0F);
      wall0.containsWallStartAt(0.0F, 0.0F, 0.0F);
      wall0.setWallAtStart(wall0);
      wall0.containsPoint(0.0F, 0.0F, 0.0F);
      CatalogTexture catalogTexture0 = new CatalogTexture("%>QrU/1FJ~dm=Z", (Content) null, 0.0F, (-1928.35F), false);
      wall0.setPattern(catalogTexture0);
      Level level0 = new Level((String) null, 0.0F, (-2479.613F), (-2479.613F));
      level0.getElevation();
      level0.getHeight();
      Float.compare((-1.0F), 1.01F);
      Float.compare(0.0F, (-2760.983F));
      wall0.getRightSideTexture();
      wall0.setLeftSideTexture((HomeTexture) null);
      Float.compare(3551.369F, 3551.369F);
      wall0.setHeight((Float) 3551.369F);
      wall0.getLevel();
      wall0.getPattern();
      wall0.clone();
      wall0.isAtLevel((Level) null);
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      Wall wall0 = new Wall(0.1F, 0.1F, 0.1F, 0.1F, 0.1F, 0.1F);
      wall0.getLeftSideColor();
      Float float0 = new Float((double) 0.1F);
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      Wall wall0 = new Wall(0.1F, 0.1F, 0.1F, 0.1F, 0.1F);
      wall0.getLeftSideTexture();
      wall0.setPattern((TextureImage) null);
      wall0.intersectsRectangle(646.18F, 646.18F, 0.1F, 646.18F);
      Float float0 = new Float(846.9395866122909);
      Float.sum(3368.588F, 0.0F);
      wall0.setArcExtent(float0);
      wall0.containsWallStartAt(1032.6771F, 3368.588F, 3533.3333F);
      wall0.getXArcCircleCenter();
      wall0.setYStart(1051.9F);
      wall0.intersectsRectangle(3368.588F, (-0.42357606F), 0.0F, 2426.546F);
      // Undeclared exception!
      try { 
        Wall.Property.valueOf("#dK");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant com.eteks.sweethome3d.model.Wall.Property.#dK
         //
         verifyException("java.lang.Enum", e);
      }
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      Wall wall0 = new Wall(0.01F, 1747.2914F, 1747.2914F, 1.0F, 1747.2914F, 1747.2914F);
      wall0.move(1747.2914F, 1.0F);
      wall0.containsPoint(1.0F, 445.4F, 1.0F);
      Float.sum(0.01F, 445.4F);
      Float float0 = new Float(0.01F);
      wall0.setArcExtent(float0);
      wall0.containsWallStartAt((-534.42F), 613.716F, 1.0F);
      wall0.getXArcCircleCenter();
      wall0.setYStart(613.716F);
      wall0.intersectsRectangle(445.4F, 445.41F, 0.01F, 1747.2914F);
      wall0.getStartPointToEndPointDistance();
      wall0.getStartPointToEndPointDistance();
      wall0.setHeightAtEnd(float0);
      wall0.getRightSideTexture();
      wall0.getPattern();
      wall0.setArcExtent(float0);
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      Wall wall0 = new Wall(0.1F, 0.1F, 0.1F, 0.1F, 0.1F, 0.1F);
      LinkedList<Wall> linkedList0 = new LinkedList<Wall>();
      Level level0 = new Level("p;`)Y", 0.1F, 0.1F, 0.1F);
      wall0.isAtLevel(level0);
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      Float.min((-2002.3F), (-2002.3F));
      Wall wall0 = new Wall((-2002.3F), (-2002.3F), (-2002.3F), (-2479.613F), (-2002.3F));
      wall0.getPoints();
      Float float0 = new Float((double) (-2479.613F));
      wall0.setHeight(float0);
      wall0.setHeight(float0);
      wall0.setLevel((Level) null);
      Level level0 = new Level("com.eteks.sweethome3d.model.Level$Property", (-2002.3F), (-2002.3F), (-2479.613F));
      level0.getHeight();
      wall0.isAtLevel(level0);
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      Wall wall0 = new Wall(0.0F, 0.0F, 0.0F, 0.0F, 0.0F);
      wall0.containsWallStartAt(0.0F, 0.0F, 0.0F);
      wall0.setWallAtStart(wall0);
      wall0.containsWallEndAt(0.0F, 0.0F, 0.0F);
      wall0.setWallAtEnd(wall0);
      wall0.setYEnd(75.8551F);
      wall0.setRightSideColor((Integer) null);
      wall0.intersectsRectangle(0.0F, 0.0F, 4043.4763F, 0.01F);
      Integer integer0 = new Integer(459);
      Integer integer1 = new Integer((-757));
      Integer integer2 = new Integer(46);
      wall0.setLeftSideColor(integer2);
      Float float0 = new Float((double) 461);
      wall0.setHeightAtEnd(float0);
      wall0.getLength();
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      Wall wall0 = new Wall(0.01F, 0.01F, 0.01F, 1.0F, 0.01F, 0.01F);
      Wall wall1 = new Wall(0.01F, 1.0F, 0.01F, 0.01F, 0.01F, 0.01F);
      wall1.setWallAtEnd(wall0);
      wall0.setWallAtEnd(wall1);
      wall0.setWallAtEnd(wall1);
      Float float0 = new Float(1.0F);
      Float.min(0.0F, 1.0F);
      Float float1 = new Float(1.0F);
      float1.floatValue();
      wall1.setHeight((Float) 1.0F);
      wall0.getPoints();
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      Wall wall0 = new Wall(0.0F, 0.0F, 0.0F, 1.0F, 0.0F, 0.0F);
      Float.sum(0.0F, (-4.2223434F));
      Float float0 = new Float((-1.0F));
      wall0.setHeightAtEnd(float0);
      Float float1 = new Float((-4.2223434F));
      wall0.setRightSideColor((Integer) null);
      Integer integer0 = new Integer(46);
      wall0.getLeftSideColor();
      wall0.setLeftSideColor((Integer) null);
      wall0.setHeightAtEnd(float0);
      wall0.getHeight();
      Integer integer1 = new Integer(46);
      Object object0 = new Object();
      wall0.getRightSideColor();
      Integer.getInteger(",2JK\"iUvoZVt", (Integer) null);
      integer1.equals(object0);
      wall0.setRightSideColor(integer1);
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      float float0 = (-2078.415F);
      Float.min((-2078.415F), (-3975.33F));
      LinkedList<Wall> linkedList0 = new LinkedList<Wall>();
      List<Wall> list0 = Wall.clone((List<Wall>) linkedList0);
      Wall.clone(list0);
      Wall wall0 = new Wall((-217.31F), (-3975.33F), 0.01F, (-217.31F), Float.POSITIVE_INFINITY);
      float float1 = 1230.2F;
      float float2 = (-145.51447F);
      Float.sum((-2711.1907F), (-145.51447F));
      Float float3 = new Float((-1.0));
      Float float4 = new Float((double) 1230.2F);
      wall0.setArcExtent(float4);
      // Undeclared exception!
      try { 
        wall0.containsWallStartAt((-2712.706F), 1747.2914F, 0.0F);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("com.eteks.sweethome3d.model.Wall", e);
      }
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      Float.min((-2001.9872F), (-2001.9872F));
      Wall wall0 = new Wall((-2001.9872F), (-2001.9872F), (-2001.9872F), (-2001.9872F), (-2001.9872F), (-2001.9872F));
      wall0.move((-0.53222734F), 1.0F);
      wall0.getLeftSideTexture();
      wall0.setRightSideTexture((HomeTexture) null);
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      Wall wall0 = new Wall(0.01F, 0.01F, 0.01F, 1.0F, 0.01F, 0.01F);
      Float.sum(0.01F, 0.0F);
      Wall wall1 = new Wall(1.0F, 1306.6985F, (-468.387F), 0.01F, (-468.387F), 155.2F);
      wall0.setWallAtEnd(wall1);
      wall1.setWallAtEnd(wall0);
      Float float0 = new Float((-468.387F));
      Float float1 = new Float((double) (-1.0F));
      Float.min(0.01F, 0.01F);
      wall0.setHeight(float1);
      wall0.getYArcCircleCenter();
      wall0.getPoints();
      wall1.getPoints();
      wall1.getRightSideColor();
      wall1.isAtLevel((Level) null);
      wall0.setHeightAtEnd(float1);
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      Wall wall0 = new Wall(0.0F, 0.0F, 0.0F, 0.1F, 0.0F);
      wall0.containsWallStartAt(0.1F, 0.0F, 0.1F);
      wall0.setWallAtStart(wall0);
      wall0.containsPoint(0.0F, 0.0F, 0.0F);
      Integer integer0 = new Integer(5353);
      wall0.setLeftSideColor(integer0);
      wall0.clone();
      wall0.getXArcCircleCenter();
      wall0.setYStart((-2078.415F));
      LinkedList<Wall> linkedList0 = new LinkedList<Wall>();
      Wall.clone((List<Wall>) linkedList0);
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      Wall wall0 = new Wall(0.01F, 0.01F, 0.01F, 1.0F, 0.01F, 0.01F);
      Float.floatToIntBits((-1.0F));
      wall0.setArcExtent((Float) (-1.0F));
      wall0.containsWallEndAt(764.0F, (-1.0F), 0.0F);
      wall0.setXEnd((-1998.2078F));
      Wall wall1 = wall0.clone();
      wall0.setWallAtEnd(wall1);
      wall0.getYArcCircleCenter();
      Float float0 = new Float(647.44574F);
      wall1.setWallAtEnd(wall0);
      wall1.getStartPointToEndPointDistance();
      wall0.getPattern();
      wall1.clone();
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      Wall wall0 = new Wall(0.0F, 0.0F, 0.0F, 0.0F, 0.0F);
      wall0.containsWallStartAt(0.0F, 0.0F, 0.0F);
      wall0.setWallAtStart(wall0);
      wall0.containsWallEndAt(0.0F, 0.0F, 0.0F);
      Wall wall1 = new Wall(0.0F, 4043.4763F, 0.0F, 3943.0F, 155.2F, (-1228.8142F));
      wall0.setWallAtEnd(wall1);
      Wall wall2 = wall0.getWallAtStart();
      wall1.setWallAtStart(wall2);
      wall1.containsPoint(0.0F, 629.18713F, (-1185.5051F));
      wall0.getPoints();
      wall2.getRightSideTexture();
      wall2.clone();
      wall0.getPattern();
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      Wall wall0 = new Wall(2766.8726F, (-1476.5521F), 2766.8726F, 2766.8726F, 2766.8726F);
      wall0.setXEnd(0.0F);
      wall0.getArcExtent();
      wall0.containsPoint((-808.0F), 2213.745F, 445.4F);
      wall0.setYStart((-808.0F));
      wall0.intersectsRectangle(Float.POSITIVE_INFINITY, 0.0F, 0.0F, 445.4F);
      Wall wall1 = new Wall(2.0F, 2.0F, (-2809.76F), 2213.745F, (-210.391F), (-1373.0F));
      wall1.setWallAtStart(wall0);
      wall0.containsWallStartAt(2.0F, 2766.8726F, 2.0F);
      wall1.setXStart(1.0F);
      wall1.getYEnd();
      wall0.setRightSideShininess(368.2838F);
      wall0.clone();
      wall0.getRightSideColor();
      Integer integer0 = new Integer((-2091));
      Integer integer1 = Integer.getInteger("X_END", integer0);
      wall0.setRightSideColor(integer1);
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      Wall wall0 = new Wall(0.0F, 0.0F, 0.0F, 0.1F, 0.1F);
      wall0.containsWallStartAt(0.1F, 0.0F, 0.1F);
      wall0.containsPoint(0.0F, 0.0F, 0.0F);
      Wall wall1 = new Wall(952.626F, (-2574.4146F), (-1.0F), (-1.0F), 0.1F, 0.0F);
      wall0.setWallAtStart(wall1);
      wall1.containsPoint((-1185.5051F), 952.626F, 1078.5577F);
      wall1.containsWallEndAt((-662.45764F), 0.0F, 0.1F);
      wall0.setWallAtStart(wall1);
      wall0.getHeightAtEnd();
      wall1.setWallAtEnd(wall0);
      Float float0 = new Float(0.0F);
      wall1.setHeightAtEnd(float0);
      wall1.getRightSideTexture();
      Integer integer0 = new Integer(75);
      Integer integer1 = new Integer(1137);
      Integer.divideUnsigned(62, 92);
      Object object0 = new Object();
      integer1.equals(object0);
      wall1.setRightSideColor(integer1);
      wall1.intersectsRectangle(483, (-1.0F), 1.0F, 1570.19F);
      wall1.getRightSideColor();
      wall0.getLevel();
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      Wall wall0 = new Wall((-4.3604F), (-4.3604F), (-4.3604F), (-4.3604F), 0.0F);
      wall0.containsWallStartAt((-4.3604F), 0.0F, (-4.3604F));
      wall0.setWallAtStart(wall0);
      wall0.containsWallEndAt((-4.3604F), (-4.3604F), (-4.3604F));
      wall0.setWallAtEnd(wall0);
      Wall wall1 = wall0.getWallAtStart();
      wall0.setWallAtStart(wall1);
      wall0.containsWallStartAt(1227.926F, 1227.926F, 0.0F);
      Integer integer0 = new Integer(4);
      wall1.setLeftSideColor(integer0);
      wall0.setLeftSideColor(integer0);
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      Wall wall0 = new Wall(1.0F, 1.0F, 0.0F, 1.0F, 1.0F);
      wall0.containsWallStartAt(0.0F, 1.0F, 0.0F);
      wall0.setWallAtStart(wall0);
      Float.sum((-1.0F), (-1.0F));
      Float float0 = new Float((-1.0F));
      Float float1 = new Float((-2064.9932F));
      wall0.containsWallStartAt((-0.121303275F), 3709.8882F, (-519.55F));
      wall0.setLeftSideShininess((-2007.9861F));
      Wall wall1 = wall0.getWallAtStart();
      wall0.setWallAtStart(wall1);
      wall0.containsPoint((-2007.9861F), (-3209.0005F), 1064.125F);
      wall1.getPoints();
      wall1.getRightSideTexture();
      wall0.getLeftSideTexture();
      Wall wall2 = wall1.getWallAtStart();
      wall2.clone();
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      Wall wall0 = new Wall(0.01F, 0.01F, 0.01F, 1.0F, 0.01F, 0.01F);
      Float float0 = new Float(0.0F);
      Float float1 = new Float((-1.0F));
      wall0.setHeightAtEnd(float1);
      wall0.getThickness();
      wall0.intersectsRectangle(1.0F, 1.0F, (float) float0, 0.01F);
      wall0.containsWallEndAt(764.0F, 764.0F, 1294.9337F);
      wall0.isTrapezoidal();
      wall0.getLevel();
      Wall wall1 = wall0.clone();
      wall1.getPoints();
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      Wall wall0 = new Wall((-0.22006118F), (-0.22006118F), (-0.22006118F), (-0.22006118F), (-0.22006118F));
      wall0.containsWallStartAt((-0.22006118F), (-0.22006118F), (-0.22006118F));
      wall0.setWallAtStart(wall0);
      wall0.isTrapezoidal();
      Wall wall1 = new Wall((-0.22006118F), 4043.4763F, (-0.22006118F), 3943.0F, (-0.22006118F), (-1229.7325F));
      wall0.setWallAtEnd(wall1);
      Wall wall2 = wall0.getWallAtStart();
      wall1.setWallAtStart(wall2);
      wall0.containsPoint((-1.0F), 3943.0F, (-193.5527F));
      wall1.getPoints();
      wall2.getLeftSideTexture();
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      Float.min((-2002.3F), (-2479.613F));
      Wall wall0 = new Wall((-3839.8455F), (-2479.613F), (-2479.613F), (-2479.613F), (-2002.3F));
      Float float0 = new Float((double) (-2479.613F));
      wall0.setArcExtent(float0);
      Integer integer0 = new Integer((-863));
      wall0.setRightSideColor(integer0);
      wall0.getPoints();
      wall0.getRightSideColor();
      Wall wall1 = wall0.clone();
      wall1.getLevel();
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      Wall wall0 = new Wall(1.1288065F, 1.1288065F, (-1.1288066F), 0.01F, (-577.6806F), 4700.328F);
      wall0.getStartPointToEndPointDistance();
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      Wall wall0 = new Wall(0.1F, 0.1F, 0.1F, 0.1F, 0.1F, 0.1F);
      assertNotNull(wall0);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(0.1F, wall0.getThickness(), 0.01F);
      assertEquals(0.1F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.1F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.1F, wall0.getXEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.1F, wall0.getYEnd(), 0.01F);
      assertEquals(0.1F, wall0.getHeight(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.1F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.1F, wall0.getXArcCircleCenter(), 0.01F);
      
      Float float0 = new Float((double) 0.1F);
      assertNotNull(float0);
      assertEquals(0.1F, (float)float0, 0.01F);
      
      wall0.setArcExtent(float0);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(0.1F, wall0.getThickness(), 0.01F);
      assertEquals(0.1F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals(0.1F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.1F, wall0.getXEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.1F, wall0.getYEnd(), 0.01F);
      assertEquals(0.1F, wall0.getHeight(), 0.01F);
      assertEquals(0.1F, wall0.getArcExtent(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.1F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.1F, wall0.getXArcCircleCenter(), 0.01F);
      
      wall0.setArcExtent(float0);
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      Wall wall0 = new Wall(2.0F, 2.0F, 0.0F, 0.6593183F, 2.0F, 1162.2F);
      wall0.clone();
      Wall wall1 = wall0.clone();
      Level level0 = new Level("", (-1.0F), 2683.0F, 1162.2F);
      level0.getElevation();
      level0.getHeight();
      wall1.setLevel(level0);
      wall0.setYStart(0.6593183F);
      Wall wall2 = wall1.clone();
      wall2.setThickness(1162.2F);
      Wall wall3 = new Wall((-1208.6906F), 1162.2F, 0.0F, (-1716.9F), 764.0F, 764.0F);
      wall0.getYStart();
      wall2.setWallAtStart(wall0);
      wall3.setYStart(2683.0F);
      Float float0 = new Float(0.0);
      wall1.setHeight(float0);
      wall1.getLevel();
      wall3.getLeftSideColor();
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      Wall wall0 = new Wall((-2002.3F), (-2002.3F), (-2002.3F), (-2002.3F), (-2002.3F));
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      Float.min((-2002.3F), (-2002.3F));
      Wall wall0 = new Wall((-2002.3F), (-2002.3F), (-2002.3F), (-2479.613F), (-2002.3F));
      Wall wall1 = new Wall((-1998.2078F), (-1998.2078F), (-2002.3F), 4705.4F, 0.255342F);
      wall0.setWallAtEnd(wall1);
      wall0.setRightSideShininess((-274.52682F));
      wall0.getPoints();
      wall0.getPoints();
      Float.valueOf((-5163.0F));
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      Wall wall0 = new Wall(1.0F, 1.0F, 0.0F, 1.0F, 1.0F);
      wall0.containsWallStartAt(0.0F, 1.0F, 0.0F);
      wall0.setWallAtStart(wall0);
      wall0.containsWallEndAt(0.0F, 0.0F, 0.0F);
      Float.sum(0.0F, 1.0F);
      Float float0 = new Float(0.0F);
      Float float1 = new Float(1.3032145500183105);
      Float.isFinite(1400.4F);
      Float.min((-1568.0498F), 0.0F);
      wall0.setArcExtent(float1);
      wall0.containsWallStartAt((-70.80039F), 1.0F, 1.0F);
      Float float2 = new Float((-197.8F));
      wall0.setArcExtent((Float) null);
      Float float3 = new Float((-70.80039F));
      wall0.getLength();
      wall0.getRightSideColor();
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      Wall wall0 = new Wall((-2290.88F), (-2290.88F), (-2290.88F), (-2359.86F), (-2290.88F), (-2290.88F));
      wall0.containsPoint((-2741.3464F), (-2359.86F), 0.0F);
      wall0.setThickness(1401.0F);
      wall0.getXArcCircleCenter();
      LinkedList<Wall> linkedList0 = new LinkedList<Wall>();
      List<Wall> list0 = Wall.clone((List<Wall>) linkedList0);
      Wall.clone(list0);
      Integer integer0 = new Integer((-943));
      wall0.setRightSideColor(integer0);
      PropertyChangeListener propertyChangeListener0 = mock(PropertyChangeListener.class, new ViolatedAssumptionAnswer());
      PropertyChangeListenerProxy propertyChangeListenerProxy0 = new PropertyChangeListenerProxy("'dbCc!*}/|gpnvI}H", propertyChangeListener0);
      wall0.removePropertyChangeListener(propertyChangeListenerProxy0);
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      Wall wall0 = new Wall(0.01F, 0.01F, 0.01F, 1.0F, 0.01F, 0.01F);
      Wall wall1 = new Wall(0.01F, 1.0F, 155.2F, 155.2F, 155.2F, 649.4266F);
      wall1.setWallAtEnd(wall0);
      wall0.setWallAtEnd(wall1);
      wall0.setWallAtEnd(wall1);
      Float float0 = new Float((-827.35197));
      Float.sum(-0.0F, (-809.059F));
      wall0.setArcExtent(float0);
      wall0.getRightSideColor();
      wall0.getPoints();
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      Float.min((-2078.415F), (-2479.613F));
      Wall wall0 = new Wall(769.9083F, 1.0F, (-2078.415F), (-668.76F), (-2479.613F), (-0.90687686F));
      Wall wall1 = wall0.clone();
      wall1.setWallAtEnd(wall0);
      wall1.getWallAtStart();
      wall1.setWallAtStart(wall0);
      wall1.containsWallStartAt((-2002.3F), (-2002.3F), 1.0F);
      wall1.getXArcCircleCenter();
      wall0.setWallAtEnd(wall1);
      Float float0 = Float.valueOf((-2002.3F));
      wall0.setArcExtent(float0);
      wall1.getPoints();
      wall1.getRightSideColor();
      wall1.isAtLevel((Level) null);
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      Wall wall0 = new Wall((-1.0F), (-1.0F), (-1.0F), (-1053.549F), (-1053.549F));
      wall0.getStartPointToEndPointDistance();
      Float float0 = new Float((-1.0F));
      wall0.setPattern((TextureImage) null);
      Float float1 = new Float((double) (-1.0F));
      wall0.getRightSideTexture();
      wall0.setHeight((Float) null);
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      Wall wall0 = new Wall(0.0F, 0.0F, 0.0F, 0.0F, 0.0F);
      wall0.containsWallStartAt(0.0F, 0.0F, 0.0F);
      wall0.setWallAtStart(wall0);
      wall0.containsWallEndAt(0.0F, 0.0F, 0.0F);
      wall0.setWallAtEnd(wall0);
      Wall wall1 = wall0.getWallAtStart();
      wall0.setWallAtStart(wall1);
      wall0.containsWallStartAt(1227.926F, 1227.926F, 4043.4763F);
      wall0.getXArcCircleCenter();
      wall1.setWallAtEnd(wall0);
      Float float0 = Float.valueOf(0.1F);
      wall1.setArcExtent(float0);
      wall1.getPoints();
      wall0.getRightSideColor();
      Float.compare(0.0F, 658.2075F);
      wall0.setHeight((Float) 658.2075F);
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      Wall wall0 = new Wall(13.809F, 13.809F, 13.809F, 13.809F, 13.809F, 13.809F);
      Wall wall1 = new Wall(13.809F, 13.809F, 13.809F, 13.809F, 13.809F);
      wall0.setWallAtStart(wall1);
      wall1.setWallAtEnd(wall0);
      wall0.getRightSideColor();
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      Wall wall0 = new Wall(0.1F, 0.1F, 0.1F, 0.1F, 0.1F, 0.1F);
      wall0.getPoints();
      wall0.getRightSideTexture();
      wall0.setLeftSideTexture((HomeTexture) null);
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      Wall wall0 = new Wall(4250.398F, 4250.398F, (-779.0F), (-779.0F), 799.75F);
      Float float0 = new Float(0.0F);
      wall0.setHeightAtEnd(float0);
      wall0.getLength();
      LinkedList<Wall> linkedList0 = new LinkedList<Wall>();
      Wall.clone((List<Wall>) linkedList0);
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      Wall wall0 = new Wall(13.809036F, 13.809036F, 13.809036F, 13.809036F, 0.0F);
      wall0.containsWallStartAt(13.809036F, 0.0F, 13.809036F);
      wall0.setWallAtStart(wall0);
      wall0.containsPoint(13.809036F, 13.809036F, 13.809036F);
      Wall wall1 = new Wall(13.809036F, 13.809036F, 13.809036F, 13.809036F, 155.2F, 155.2F);
      wall1.containsWallEndAt(0.0F, 155.2F, 155.2F);
      wall1.setWallAtEnd(wall0);
      Float float0 = Float.valueOf((-2354.9F));
      wall0.move(758.09F, 155.2F);
      wall0.setArcExtent(float0);
      wall1.getPoints();
      Float.compare(681.0F, 155.2F);
      wall0.setHeight(float0);
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      Wall wall0 = new Wall(2.0F, 2.0F, 9.298907F, (-1.0F), 2.0F, 1162.2F);
      Wall wall1 = wall0.clone();
      Wall wall2 = wall0.clone();
      Level level0 = new Level("", (-1.0F), 2683.0F, 0.0F);
      level0.getElevation();
      level0.getHeight();
      Level level1 = level0.clone();
      wall2.setLevel(level1);
      wall0.setYStart(1.0F);
      Float.compare(1.0F, 1.0F);
      Float.compare(1.0F, 0);
      wall1.getRightSideTexture();
      wall2.setLeftSideTexture((HomeTexture) null);
      wall0.setHeight((Float) 1.0F);
      wall2.getPattern();
      wall0.getLevel();
      wall0.getXEnd();
      wall2.getHeight();
      wall0.setWallAtStart(wall2);
      wall1.setHeight((Float) null);
      wall0.getWallAtEnd();
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      Wall wall0 = new Wall(0.0F, 0.0F, 0.0F, 0.1F, 0.0F);
      wall0.containsWallStartAt(0.1F, 0.0F, 0.1F);
      wall0.setWallAtStart(wall0);
      wall0.containsPoint(0.0F, 0.0F, 0.0F);
      Float float0 = new Float((-4215.8525F));
      Float float1 = new Float((-4680.088F));
      Float.sum(493.19516F, (-4680.088F));
      wall0.setArcExtent(float1);
      wall0.containsWallStartAt((-4680.088F), (-534.42F), 0.0F);
      wall0.containsWallEndAt(613.716F, 0.1F, 0.1F);
      wall0.getYEnd();
      wall0.clone();
      wall0.getPattern();
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      Wall wall0 = new Wall(155.2F, 155.2F, (-3061.8167F), 2.0F, (-2756.0F), (-3061.8167F));
      Integer integer0 = new Integer(33);
      wall0.setRightSideColor(integer0);
      wall0.getPoints();
      wall0.getRightSideColor();
      Wall wall1 = wall0.clone();
      wall1.getLeftSideTexture();
      wall0.setRightSideTexture((HomeTexture) null);
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      // Undeclared exception!
      try { 
        Wall.clone((List<Wall>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.eteks.sweethome3d.model.Wall", e);
      }
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      Wall wall0 = new Wall((-1.0F), (-1.0F), (-1.0F), (-1053.549F), (-1053.549F));
      wall0.setLeftSideColor((Integer) null);
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      Wall wall0 = new Wall((-1.0F), 1.0F, 1.0F, 0.0F, 0.0F, (-1.0F));
      PropertyChangeListener propertyChangeListener0 = mock(PropertyChangeListener.class, new ViolatedAssumptionAnswer());
      PropertyChangeListenerProxy propertyChangeListenerProxy0 = new PropertyChangeListenerProxy("1.5.0_16", propertyChangeListener0);
      wall0.addPropertyChangeListener(propertyChangeListenerProxy0);
      wall0.containsPoint(1019.497F, 0.0F, 0.1F);
      Float float0 = new Float((double) 2315.428F);
      Float.sum(2315.428F, (-1507.9714F));
      wall0.setArcExtent(float0);
      wall0.containsWallStartAt(0.0F, 2315.428F, 0.0F);
      wall0.getXArcCircleCenter();
      wall0.setYStart((-1.0F));
      wall0.containsPoint(2.0F, 0.0F, 0.0F);
      wall0.getYEnd();
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      Wall wall0 = new Wall(0.0F, 0.0F, 0.0F, 0.1F, 0.0F);
      wall0.containsWallStartAt(0.1F, 0.0F, 0.1F);
      wall0.setWallAtStart(wall0);
      wall0.containsPoint(0.0F, 0.0F, 0.0F);
      Integer integer0 = new Integer(5353);
      wall0.setLeftSideColor(integer0);
      wall0.clone();
      Level level0 = new Level("", (-1.0F), 2683.0F, 0.0F);
      level0.getElevation();
      level0.getHeight();
      wall0.setLevel(level0);
      wall0.containsWallStartAt(5353, 1401.0F, (-328.9935F));
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      Wall wall0 = new Wall(0.1F, 0.1F, 0.1F, 0.1F, 0.1F, 0.1F);
      wall0.getPoints();
      wall0.getRightSideTexture();
      wall0.getLevel();
      wall0.isAtLevel((Level) null);
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      LinkedList<Wall> linkedList0 = new LinkedList<Wall>();
      Float.min((-2078.415F), (-2479.613F));
      Wall.clone((List<Wall>) linkedList0);
      Wall wall0 = new Wall((-3839.8455F), (-2078.415F), 0.0F, (-2479.613F), (-3839.8455F), (-2479.613F));
      Wall wall1 = wall0.clone();
      wall0.getLeftSideTexture();
      wall1.setRightSideTexture((HomeTexture) null);
      Wall.Property.values();
      Float float0 = new Float((double) (-2078.415F));
      wall0.setArcExtent(float0);
      wall1.getYStart();
      Wall wall2 = wall1.clone();
      Wall wall3 = new Wall(0.1F, 1999.396F, (-2002.3F), (-2078.415F), 1.8518518E-4F, (-1.0F));
      wall3.getYStart();
      wall2.setWallAtStart(wall3);
      wall0.setYStart((-2479.613F));
      wall3.setHeight(float0);
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      Wall wall0 = new Wall(0.01F, 0.01F, 0.01F, 1.0F, 0.01F, 0.01F);
      Float.sum(0.01F, 0.0F);
      PropertyChangeListener propertyChangeListener0 = mock(PropertyChangeListener.class, new ViolatedAssumptionAnswer());
      PropertyChangeListenerProxy propertyChangeListenerProxy0 = new PropertyChangeListenerProxy("THICKNESS", propertyChangeListener0);
      wall0.removePropertyChangeListener(propertyChangeListenerProxy0);
      Wall wall1 = new Wall(1.0F, 1306.6985F, (-480.33368F), 0.01F, (-480.33368F), 155.2F);
      wall0.setWallAtEnd(wall1);
      wall1.setWallAtEnd(wall0);
      Float float0 = new Float((-480.33368F));
      Float float1 = new Float((double) (-1.0F));
      wall0.setXEnd(1408.3501F);
      Float.min(0.01F, 0.01F);
      wall0.setHeight(float1);
      wall0.getYArcCircleCenter();
      wall1.getPoints();
      wall0.clone();
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      Wall wall0 = new Wall(16.918272F, 16.918272F, 16.918272F, 16.918272F, 16.918272F);
      wall0.setLeftSideShininess((-779.4F));
      Float float0 = new Float(0.0F);
      wall0.setHeightAtEnd(float0);
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      Wall wall0 = new Wall(1.8137146F, 1.8137146F, 1.8137146F, 1.8137146F, 1.8137146F, 1.8137146F);
      Float float0 = new Float(14.452316F);
      wall0.setHeightAtEnd(float0);
      wall0.setXStart(1.8137146F);
      wall0.setHeightAtEnd(float0);
      wall0.getRightSideColor();
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      Float float0 = new Float((double) (-2479.3264F));
      Wall wall0 = new Wall((-2479.3264F), (-2479.3264F), (-2479.3264F), 159.8F, (-1951.5F));
      wall0.getHeight();
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      Wall wall0 = new Wall(0.1F, 0.1F, 0.1F, 0.1F, 0.1F, 0.1F);
      Float float0 = new Float(0.1F);
      wall0.setArcExtent(float0);
      wall0.setYEnd(1540.2349F);
      wall0.getRightSideTexture();
      wall0.setRightSideTexture((HomeTexture) null);
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      Wall wall0 = new Wall((-0.36032516F), (-0.36032516F), (-0.36032516F), (-0.36032516F), 0.01F, 0.01F);
      LinkedList<Wall> linkedList0 = new LinkedList<Wall>();
      LinkedList<Wall> linkedList1 = new LinkedList<Wall>();
      wall0.setYEnd((-0.36032516F));
      wall0.setYStart((-0.36032516F));
      wall0.getRightSideTexture();
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      Wall wall0 = new Wall(0.01F, 0.01F, 0.01F, 0.01F, 0.01F, 0.01F);
      Float.sum(0.01F, 0.0F);
      Wall wall1 = new Wall(0.01F, 1306.6985F, (-468.387F), 0.01F, (-468.387F), 155.2F);
      wall0.setWallAtEnd(wall1);
      wall1.setWallAtEnd(wall0);
      Float float0 = new Float((-468.387F));
      Float float1 = new Float((double) (-1.0F));
      Float.min(0.01F, 0.01F);
      wall0.setHeight(float1);
      wall0.getYArcCircleCenter();
      wall0.getPoints();
      wall1.getPoints();
      wall1.getRightSideColor();
      wall1.isAtLevel((Level) null);
      wall0.setHeightAtEnd(float1);
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      Wall wall0 = new Wall(370.0F, 9.28251F, (-3538.7485F), 370.0F, (-3538.7485F));
      wall0.getLength();
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      Wall wall0 = new Wall((-1.0F), (-1.0F), (-1.0F), (-1.0F), (-1.0F), (-1.0F));
      wall0.getPoints();
      Float float0 = new Float((-1.0F));
      wall0.setHeight(float0);
      wall0.setHeight(float0);
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      Wall wall0 = new Wall((-4215.8525F), (-4215.8525F), (-4215.8525F), (-4215.8525F), (-4215.8525F));
      wall0.getPoints();
      Float float0 = new Float((double) (-4215.8525F));
      wall0.setArcExtent(float0);
      wall0.containsWallEndAt((-4215.8525F), (-4215.8525F), 2315.428F);
      PropertyChangeListener propertyChangeListener0 = mock(PropertyChangeListener.class, new ViolatedAssumptionAnswer());
      wall0.setXEnd((-1.0F));
      wall0.setWallAtEnd(wall0);
      wall0.getYArcCircleCenter();
      Float float1 = new Float(21301.48F);
      wall0.setWallAtEnd(wall0);
      wall0.getStartPointToEndPointDistance();
      wall0.getPattern();
      wall0.clone();
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      float float0 = (-4215.8525F);
      Wall wall0 = new Wall((-4215.8525F), (-4215.8525F), (-4215.8525F), (-4215.8525F), (-4215.8525F));
      wall0.getPoints();
      Float float1 = new Float((double) (-4215.8525F));
      wall0.setArcExtent(float1);
      float float2 = (-1.0F);
      PropertyChangeListener propertyChangeListener0 = mock(PropertyChangeListener.class, new ViolatedAssumptionAnswer());
      wall0.setXEnd((-1.0F));
      float float3 = (-2738.4F);
      float float4 = (-491.68F);
      wall0.intersectsRectangle(float0, float3, float4, float4);
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      Wall wall0 = new Wall(0.1F, 0.1F, 0.1F, 0.1F, 0.1F);
      wall0.getLeftSideTexture();
      wall0.setPattern((TextureImage) null);
      wall0.intersectsRectangle(646.18F, 646.18F, 0.1F, 646.18F);
      Float float0 = new Float(846.9395866122909);
      Float.sum(3368.588F, 0.0F);
      wall0.setArcExtent(float0);
      wall0.containsWallStartAt(1032.6771F, 3368.588F, 3533.3333F);
      wall0.getXArcCircleCenter();
      wall0.setYStart(1051.9F);
      wall0.containsWallEndAt(3368.588F, 3368.588F, 0.0F);
      // Undeclared exception!
      try { 
        Wall.Property.valueOf("#dK");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant com.eteks.sweethome3d.model.Wall.Property.#dK
         //
         verifyException("java.lang.Enum", e);
      }
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      Wall wall0 = new Wall((-1.0F), 0.0F, (-1.0F), (-1053.549F), 0.0F);
      wall0.setLeftSideColor((Integer) null);
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      Wall wall0 = new Wall(0.01F, 1747.2914F, 1747.2914F, 1.0F, 1747.2914F, 1747.2914F);
      Float.isFinite(764.0F);
      Float.sum(0.01F, 0.0F);
      Float float0 = new Float((-1.0F));
      wall0.setHeightAtEnd(float0);
      wall0.setXEnd(0.0F);
      wall0.getThickness();
      wall0.setYEnd(0.01F);
      wall0.setRightSideColor((Integer) null);
      wall0.containsWallEndAt(0.01F, 1747.2914F, 1747.2914F);
      wall0.containsWallEndAt(0.1F, 764.0F, 1294.9337F);
      wall0.isTrapezoidal();
      wall0.getLevel();
      wall0.setLevel((Level) null);
      wall0.containsWallStartAt(764.0F, 1747.2914F, 780.3137F);
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      Wall wall0 = new Wall(0.01F, 1747.2914F, 1747.2914F, 1.0F, 1747.2914F, 1747.2914F);
      wall0.containsPoint(1.0F, 445.4F, 2213.745F);
      wall0.setYStart(2213.745F);
      wall0.containsWallStartAt((-3393.8887F), 1.0F, 2213.745F);
      Wall wall1 = new Wall(2213.745F, (-3393.8887F), 0.01F, 0.01F, (-3393.8887F), 1051.9F);
      wall0.setWallAtStart(wall1);
      wall0.containsWallStartAt((-3393.8887F), 2.0F, 1051.9F);
      wall1.setXStart(0.0F);
      wall0.getYEnd();
      wall0.setRightSideShininess((-3331.683F));
      wall0.clone();
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      Wall wall0 = new Wall(0.0F, 0.0F, 0.0F, 0.0F, 0.0F);
      wall0.containsWallStartAt(0.0F, 0.0F, 0.0F);
      wall0.setWallAtStart(wall0);
      wall0.containsPoint(0.0F, 0.0F, 0.0F);
      Float.sum(0.0F, 0.0F);
      Float float0 = new Float(4043.4763F);
      wall0.setArcExtent((Float) null);
      wall0.containsWallStartAt((-2.2034645F), 4043.4763F, 0.0F);
      Float float1 = new Float((-562.3F));
      wall0.setArcExtent(float0);
      Float float2 = new Float(2.0F);
      wall0.getLength();
      wall0.getRightSideColor();
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      Wall wall0 = new Wall(0.0F, 0.0F, (-3254.5693F), 1.0F, 0.0F);
      wall0.setRightSideShininess((-4283.846F));
      wall0.getRightSideShininess();
      wall0.setWallAtStart((Wall) null);
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      Wall wall0 = new Wall(2.0F, 2.0F, 9.298907F, (-1.0F), 2.0F, 1162.2F);
      Wall wall1 = wall0.clone();
      Wall wall2 = wall0.clone();
      Level level0 = new Level("", (-1.0F), 2683.0F, 0.0F);
      level0.getElevation();
      level0.getHeight();
      Level level1 = level0.clone();
      wall2.setLevel(level1);
      wall0.setYStart(1.0F);
      Float.compare(1.0F, 1.0F);
      Float.compare(1.0F, 0);
      wall1.getRightSideTexture();
      wall2.setLeftSideTexture((HomeTexture) null);
      wall0.setHeight((Float) 1.0F);
      wall2.getPattern();
      wall2.getLevel();
      wall2.getXEnd();
      wall1.getHeight();
      wall2.setWallAtStart(wall0);
      Float.compare((-1493.0F), (-1.0F));
      Float.compare((-1.0F), 0.0F);
      Float.compare(0.0F, (-1));
      wall0.setHeight((Float) 0.0F);
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      Wall wall0 = new Wall((-1.0F), 1.0F, 1.0F, 0.0F, 0.0F, (-1.0F));
      wall0.containsPoint(1019.497F, 0.0F, 0.1F);
      Float float0 = new Float((double) 2311.6636F);
      Float.sum(0.0F, (-1507.9714F));
      PropertyChangeListener propertyChangeListener0 = mock(PropertyChangeListener.class, new ViolatedAssumptionAnswer());
      PropertyChangeListenerProxy propertyChangeListenerProxy0 = new PropertyChangeListenerProxy("F![h", propertyChangeListener0);
      wall0.removePropertyChangeListener(propertyChangeListenerProxy0);
      wall0.setArcExtent(float0);
      wall0.containsPoint((-1507.9714F), 2311.6636F, (-1507.9714F));
      wall0.getXArcCircleCenter();
      wall0.setYStart((-1.0F));
      wall0.setLeftSideShininess(2311.6636F);
      wall0.getXArcCircleCenter();
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      Wall wall0 = new Wall(1.0F, 1.0F, 0.0F, 1.0F, 1.0F);
      wall0.setWallAtStart(wall0);
      Float float0 = new Float(1.0F);
      Float.isFinite((-1.0F));
      wall0.getPoints();
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      Wall wall0 = new Wall(0.0F, 0.0F, 0.0F, 0.0F, 0.0F);
      wall0.containsWallStartAt(0.0F, 0.0F, 0.0F);
      wall0.setWallAtStart(wall0);
      wall0.containsWallEndAt(0.0F, 0.0F, 0.0F);
      Wall wall1 = new Wall(0.0F, 4043.4763F, 0.0F, 3943.0F, 155.2F, (-1228.8142F));
      wall0.setWallAtEnd(wall1);
      Wall wall2 = wall0.getWallAtStart();
      wall1.setWallAtStart(wall2);
      wall0.containsPoint((-1.0F), 3943.0F, (-1185.5051F));
      wall1.getPoints();
      wall0.getRightSideTexture();
      wall2.getLeftSideTexture();
      wall2.getLeftSideTexture();
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      Wall wall0 = new Wall((-1.0F), (-1.0F), (-1.0F), (-1.0F), 240.48656F, 240.48656F);
      wall0.getRightSideShininess();
      wall0.isTrapezoidal();
      String string0 = null;
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ResourceURLContent resourceURLContent0 = null;
      try {
        resourceURLContent0 = new ResourceURLContent(classLoader0, "");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Unknown resource 
         //
         verifyException("com.eteks.sweethome3d.tools.ResourceURLContent", e);
      }
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      Wall wall0 = new Wall(13.809F, 13.809F, 13.809F, 13.809F, 13.809F);
      wall0.containsWallStartAt(13.809F, 13.809F, 13.809F);
      wall0.setWallAtStart(wall0);
      wall0.containsWallStartAt(13.809F, 13.809F, 13.809F);
      wall0.clone();
      LinkedList<Wall> linkedList0 = new LinkedList<Wall>();
      linkedList0.add(wall0);
      Wall.clone((List<Wall>) linkedList0);
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      Wall wall0 = new Wall((-1928.35F), 51.377F, 51.377F, 51.377F, (-1928.35F));
      Integer integer0 = new Integer(6237);
      wall0.setLeftSideColor(integer0);
      wall0.setLeftSideShininess(1.0F);
      wall0.getHeight();
      Level level0 = new Level("ARC_EXTENT", (-1539.6261F), (-2787.8972F), (-1928.35F));
      PropertyChangeListener propertyChangeListener0 = mock(PropertyChangeListener.class, new ViolatedAssumptionAnswer());
      PropertyChangeListenerProxy propertyChangeListenerProxy0 = new PropertyChangeListenerProxy("ARC_EXTENT", propertyChangeListener0);
      BackgroundImage backgroundImage0 = new BackgroundImage((Content) null, 6237, (-3683.1304F), 2892.5F, (-2150.5813F), 919.4049F, 51.377F, (-2150.5813F));
      level0.setBackgroundImage(backgroundImage0);
      level0.removePropertyChangeListener(propertyChangeListenerProxy0);
      PropertyChangeListenerProxy propertyChangeListenerProxy1 = new PropertyChangeListenerProxy("ARC_EXTENT", (PropertyChangeListener) null);
      level0.removePropertyChangeListener(propertyChangeListenerProxy1);
      wall0.setLevel(level0);
      wall0.getRightSideColor();
      wall0.getLevel();
      Float.floatToIntBits((-4841.38F));
      Float.floatToIntBits(0.0F);
      wall0.setHeightAtEnd((Float) 0.0F);
      LinkedList<Wall> linkedList0 = new LinkedList<Wall>();
      Wall.clone((List<Wall>) linkedList0);
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      Wall wall0 = new Wall(0.01F, 2557.0725F, 2557.0725F, 0.01F, 0.01F);
      Wall wall1 = wall0.clone();
      PropertyChangeListener propertyChangeListener0 = mock(PropertyChangeListener.class, new ViolatedAssumptionAnswer());
      PropertyChangeListenerProxy propertyChangeListenerProxy0 = new PropertyChangeListenerProxy("x&sbu6", propertyChangeListener0);
      wall1.addPropertyChangeListener(propertyChangeListenerProxy0);
      wall0.containsWallStartAt((-933.8667F), 0.0F, 0.0F);
      wall1.getYArcCircleCenter();
      wall0.getYEnd();
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      Wall wall0 = new Wall(9.298907F, (-1.0F), 613.716F, 1.0F, (-4680.088F), 3494.5828F);
      wall0.move(1.0F, 9.298907F);
      wall0.containsPoint((-1.0F), (-1.0F), 445.4F);
      Float.sum(1.0F, (-62.118713F));
      Float float0 = new Float(2.0F);
      Float float1 = Float.valueOf(613.716F);
      wall0.setArcExtent(float1);
      wall0.containsWallStartAt((-61.118713F), (-1645.71F), (-1.0F));
      wall0.getXArcCircleCenter();
      wall0.setYStart((-1.0F));
      wall0.intersectsRectangle((-61.118713F), 1844.994F, (-0.02173913F), 1004.707F);
      wall0.getStartPointToEndPointDistance();
      wall0.getStartPointToEndPointDistance();
      wall0.setHeightAtEnd(float0);
      wall0.getRightSideTexture();
      Wall wall1 = wall0.clone();
      wall1.getPattern();
      Float float2 = new Float(229.55);
      Float.sum(0.0F, 0.0F);
      Float.max(445.4F, (-1645.71F));
      wall0.setArcExtent(float2);
      Wall.Property.values();
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      Wall wall0 = new Wall(0.1F, 0.1F, 0.1F, 0.1F, 0.1F);
      wall0.getLeftSideTexture();
      wall0.setPattern((TextureImage) null);
      wall0.intersectsRectangle(646.18F, 646.18F, 0.1F, 646.18F);
      Float float0 = new Float((double) 3368.588F);
      Float.sum(3368.588F, 0.0F);
      wall0.setArcExtent(float0);
      wall0.containsWallStartAt(1032.6771F, 3368.588F, 3533.3333F);
      wall0.getXArcCircleCenter();
      wall0.getYEnd();
      Wall wall1 = wall0.clone();
      wall1.setRightSideShininess(113.27211F);
      Wall wall2 = wall1.clone();
      wall0.getRightSideColor();
      Integer integer0 = new Integer((-2091));
      Integer integer1 = new Integer(1033);
      Integer.getInteger("X_END", integer1);
      Integer integer2 = new Integer((-1143));
      wall2.setRightSideColor(integer2);
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      Wall wall0 = new Wall(0.0F, 0.0F, (-10158.832F), (-10158.832F), 4599.6F, 0.0F);
      Float float0 = new Float((-1131.5359278));
      wall0.setArcExtent(float0);
      // Undeclared exception!
      wall0.getPoints();
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      Wall wall0 = new Wall(16.918272F, 16.918272F, 16.918272F, 16.918272F, 16.918272F);
      Float float0 = new Float(16.918272F);
      Integer integer0 = new Integer(588);
      wall0.setLeftSideColor(integer0);
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      LinkedList<Wall> linkedList0 = new LinkedList<Wall>();
      Wall.clone((List<Wall>) linkedList0);
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      Wall wall0 = new Wall(0.1F, 0.1F, 0.1F, 0.1F, 0.1F);
      wall0.intersectsRectangle(0.1F, 0.1F, 0.1F, 0.1F);
      Float float0 = new Float(0.1F);
      Float.sum(0.1F, 0.1F);
      wall0.setArcExtent(float0);
      wall0.containsWallStartAt(0.1F, 0.1F, 0.1F);
      wall0.getXArcCircleCenter();
      wall0.clone();
      wall0.getStartPointToEndPointDistance();
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      Wall wall0 = new Wall((-13.933775F), (-5.156392F), (-5.156392F), (-13.933775F), (-13.933775F));
      Float float0 = new Float((-13.933775F));
      wall0.setLeftSideShininess((-1.0F));
      wall0.getWallAtEnd();
      wall0.setWallAtStart((Wall) null);
      wall0.containsPoint((-13.933775F), (-1.0F), 0.1F);
      wall0.getPoints();
      wall0.getLeftSideTexture();
      wall0.getLeftSideShininess();
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      Wall wall0 = new Wall(0.0F, 0.0F, 1.0F, 0.0F, 1.0F, 0.0F);
      wall0.containsWallStartAt(0.0F, 1.0F, 0.0F);
      wall0.setWallAtStart(wall0);
      wall0.containsWallEndAt(0.0F, 0.0F, 0.0F);
      Wall wall1 = new Wall(3943.0F, (-1228.8142F), 2881.0F, 155.2F, (-1140.786F), 0.0F);
      wall0.setWallAtEnd(wall1);
      wall1.setWallAtEnd(wall0);
      Float float0 = new Float(4043.4763F);
      Float.floatToIntBits(0.0F);
      Float.floatToIntBits(0.0F);
      wall0.setHeight((Float) 0.0F);
      wall0.getYArcCircleCenter();
      wall0.getPoints();
      wall0.getRightSideTexture();
      Wall wall2 = new Wall(421.0F, (-1228.8142F), 421.0F, 421.0F, 1.0F);
      wall2.clone();
      PropertyChangeListener propertyChangeListener0 = mock(PropertyChangeListener.class, new ViolatedAssumptionAnswer());
      PropertyChangeListenerProxy propertyChangeListenerProxy0 = new PropertyChangeListenerProxy("", propertyChangeListener0);
      wall2.removePropertyChangeListener(propertyChangeListenerProxy0);
      wall2.getPattern();
      wall2.clone();
      // Undeclared exception!
      try { 
        Wall.Property.valueOf("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant com.eteks.sweethome3d.model.Wall.Property.
         //
         verifyException("java.lang.Enum", e);
      }
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      Wall wall0 = new Wall(0.1F, (-653.03015F), 0.1F, (-1.0F), (-653.03015F), (-653.03015F));
      Float float0 = new Float((-487.0));
      wall0.setArcExtent(float0);
      wall0.getPoints();
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      Wall wall0 = new Wall(0.1F, 0.1F, 0.1F, 0.1F, 0.1F, 0.1F);
      Float float0 = new Float((double) 0.1F);
      wall0.setArcExtent(float0);
      wall0.getRightSideTexture();
      wall0.setRightSideTexture((HomeTexture) null);
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      float float0 = (-1476.5521F);
      Wall wall0 = new Wall(2766.8726F, (-1476.5521F), 2766.8726F, 2766.8726F, 2766.8726F);
      wall0.setXEnd(0.0F);
      wall0.getArcExtent();
      Float.isFinite(0.0F);
      Float.sum(2040.5863F, (-4275.436F));
      wall0.setHeightAtEnd((Float) null);
      wall0.setXEnd(1.0F);
      wall0.getThickness();
      wall0.setYEnd((-1476.5521F));
      wall0.setRightSideColor((Integer) null);
      float float1 = (-5360.0F);
      wall0.containsWallEndAt(2.0F, (-5360.0F), 993.07F);
      PropertyChangeListenerProxy propertyChangeListenerProxy0 = new PropertyChangeListenerProxy("IIPs2d<={Y", (PropertyChangeListener) null);
      PropertyChangeEvent propertyChangeEvent0 = null;
      // Undeclared exception!
      try { 
        propertyChangeListenerProxy0.propertyChange((PropertyChangeEvent) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.beans.PropertyChangeListenerProxy", e);
      }
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      Wall wall0 = new Wall(0.0F, 0.0F, 0.0F, 0.0F, 0.0F);
      wall0.containsWallStartAt(0.0F, 0.0F, 0.0F);
      wall0.setWallAtStart(wall0);
      wall0.containsWallEndAt(0.0F, 0.0F, 0.0F);
      Wall wall1 = new Wall(0.0F, 4043.4763F, 0.0F, 3943.0F, 0.0F, (-1228.8142F));
      wall0.setWallAtEnd(wall1);
      Wall wall2 = wall0.getWallAtStart();
      wall2.setWallAtEnd(wall0);
      wall2.setRightSideColor((Integer) null);
      wall2.setLeftSideShininess(4043.4763F);
      wall1.setWallAtStart(wall2);
      wall1.containsPoint(1544.4587F, (-1.0F), 3943.0F);
      wall0.getPoints();
      wall1.getRightSideTexture();
      wall1.getLeftSideTexture();
      wall0.clone();
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      Wall wall0 = new Wall((-2290.88F), (-2290.88F), (-2290.88F), (-2290.88F), (-2290.88F), (-2290.88F));
      wall0.containsPoint((-2290.88F), (-2290.88F), 0.0F);
      wall0.setThickness(1401.0F);
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      Wall wall0 = new Wall(0.01F, 0.01F, 0.01F, 1.0F, 0.01F, 0.01F);
      Float.sum(0.01F, 0.0F);
      Float float0 = new Float((-1.0F));
      wall0.setHeightAtEnd(float0);
      wall0.getThickness();
      wall0.setYEnd(0.01F);
      wall0.setRightSideColor((Integer) null);
      wall0.containsWallEndAt(0.01F, 0.01F, 0.01F);
      wall0.setLeftSideColor((Integer) null);
      wall0.containsWallEndAt((-18.14413F), 764.0F, 1294.9337F);
      wall0.isTrapezoidal();
      wall0.getLevel();
      wall0.setLevel((Level) null);
      wall0.containsWallStartAt((-1078.8315F), 0.0F, 764.0F);
      wall0.isAtLevel((Level) null);
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      Wall wall0 = new Wall(0.1F, 0.1F, 0.1F, 0.1F, 0.1F, 0.1F);
      wall0.containsPoint(0.1F, 0.1F, 0.1F);
      Float float0 = new Float((double) 0.1F);
      wall0.setArcExtent((Float) null);
      wall0.getPoints();
      Float float1 = new Float(0.1F);
      wall0.setHeight(float1);
      wall0.setHeight(float1);
      URL uRL0 = MockURL.getHttpExample();
      ResourceURLContent resourceURLContent0 = new ResourceURLContent(uRL0, true);
      CatalogTexture catalogTexture0 = new CatalogTexture("", resourceURLContent0, 2.0F, 664.0549F);
      HomeTexture homeTexture0 = new HomeTexture(catalogTexture0);
      wall0.setRightSideTexture(homeTexture0);
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      Wall wall0 = new Wall((-2290.88F), (-2290.88F), (-2290.88F), (-2359.86F), (-2290.88F), (-2290.88F));
      wall0.containsPoint((-2741.3464F), (-2359.86F), 0.0F);
      wall0.setThickness(1401.0F);
      wall0.getXArcCircleCenter();
      LinkedList<Wall> linkedList0 = new LinkedList<Wall>();
      List<Wall> list0 = Wall.clone((List<Wall>) linkedList0);
      Wall.clone(list0);
      Integer integer0 = new Integer((-943));
      wall0.setRightSideColor(integer0);
      Float float0 = new Float((-1999.432F));
      float0.floatValue();
      Float float1 = new Float((-137.74816567145));
      float1.floatValue();
      Float float2 = new Float((double) (-1999.432F));
      float2.floatValue();
      float1.floatValue();
      wall0.setHeightAtEnd((Float) (-137.74817F));
      wall0.getYEnd();
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      Wall wall0 = new Wall(0.01F, 0.01F, 0.01F, 1.0F, 0.01F, 0.01F);
      Wall wall1 = new Wall(622.811F, 0.01F, (-3734.0F), (-3734.0F), (-3734.0F), (-3734.0F));
      wall0.setWallAtEnd(wall1);
      wall1.setWallAtEnd(wall0);
      Wall wall2 = wall0.getWallAtEnd();
      wall2.setWallAtEnd(wall1);
      Float float0 = new Float((-236.11284F));
      Float float1 = new Float((double) 3649.9158F);
      Float.min((-1654.1381F), 2995.6475F);
      Float float2 = new Float((-1654.1381F));
      float1.floatValue();
      wall1.setHeight(float1);
      wall0.getPoints();
      wall0.getPoints();
      wall1.getRightSideColor();
      wall0.getRightSideTexture();
      wall0.getLeftSideShininess();
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      Wall wall0 = new Wall(1.8137146F, 1.8137146F, 1.8137146F, 1.8137146F, 1.8137146F, 1.8137146F);
      Float float0 = new Float(1.8137146F);
      Float float1 = new Float(1.8137146F);
      wall0.setRightSideColor((Integer) null);
      wall0.setLeftSideColor((Integer) null);
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      LinkedList<Wall> linkedList0 = new LinkedList<Wall>();
      Float.min((-2078.415F), (-2479.613F));
      Wall.clone((List<Wall>) linkedList0);
      Wall wall0 = new Wall((-3839.8455F), (-2078.415F), (-2002.3F), (-2479.613F), (-3839.8455F), (-2479.613F));
      Wall wall1 = wall0.clone();
      wall0.getLeftSideTexture();
      wall1.setRightSideTexture((HomeTexture) null);
      Float float0 = new Float((double) (-2078.415F));
      wall0.setArcExtent(float0);
      wall1.getYStart();
      Wall wall2 = wall1.clone();
      Wall wall3 = new Wall(0.1F, 1999.396F, (-2002.3F), (-2078.415F), 1.8518518E-4F, (-1.0F));
      wall3.getYStart();
      wall2.setWallAtStart(wall3);
      wall0.setYStart((-2479.613F));
      wall3.setHeight(float0);
      wall0.move((-2479.613F), (-2078.415F));
      wall2.getRightSideTexture();
      wall3.getArcExtent();
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      Wall wall0 = new Wall((-0.54551935F), (-0.54551935F), (-0.54551935F), (-0.54551935F), (-0.54551935F), (-0.54551935F));
      wall0.containsPoint((-0.54551935F), (-0.54551935F), (-0.54551935F));
      Float float0 = new Float((-0.54551935F));
      wall0.getWallAtStart();
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      Wall wall0 = new Wall(0.01F, 0.01F, 0.01F, 1.0F, 0.01F, 0.01F);
      Wall wall1 = new Wall(0.01F, 1.0F, 155.2F, 155.2F, 155.2F, 649.4266F);
      Float float0 = Float.valueOf(0.0F);
      wall1.setHeight(float0);
      wall1.setWallAtEnd(wall0);
      wall0.setWallAtEnd(wall1);
      wall0.getPoints();
      wall0.getRightSideTexture();
      LinkedList<Wall> linkedList0 = new LinkedList<Wall>();
      linkedList0.add(wall0);
      Wall.clone((List<Wall>) linkedList0);
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      Wall wall0 = new Wall(0.0F, 0.0F, 0.0F, 0.0F, 0.0F);
      wall0.containsWallStartAt(0.0F, 0.0F, 0.0F);
      wall0.setWallAtStart(wall0);
      wall0.containsPoint(0.0F, 0.0F, 0.0F);
      Wall wall1 = new Wall(0.0F, 4043.4763F, 0.0F, 3943.0F, 155.2F, (-1228.8142F));
      wall1.containsWallEndAt(2213.745F, 155.2F, 1.0F);
      wall0.setWallAtStart(wall1);
      wall1.containsWallStartAt(4043.4763F, 0.0F, (-1228.8142F));
      wall1.setXStart(0.0F);
      wall0.getYEnd();
      wall0.clone();
      wall1.setRightSideShininess(0.0F);
      wall0.clone();
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      Wall wall0 = new Wall(13.809F, 13.809F, 13.809F, 13.809F, 13.809F);
      PropertyChangeListener propertyChangeListener0 = mock(PropertyChangeListener.class, new ViolatedAssumptionAnswer());
      PropertyChangeListenerProxy propertyChangeListenerProxy0 = new PropertyChangeListenerProxy("", propertyChangeListener0);
      wall0.removePropertyChangeListener(propertyChangeListenerProxy0);
      Float float0 = new Float(13.809F);
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      Wall wall0 = new Wall((-4215.8525F), (-4215.8525F), (-4215.8525F), (-4215.8525F), (-4215.8525F));
      assertNotNull(wall0);
      assertNull(wall0.getLeftSideColor());
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertNull(wall0.getHeight());
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-4215.8525F), wall0.getXStart(), 0.01F);
      assertEquals((-4215.8525F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-4215.8525F), wall0.getYEnd(), 0.01F);
      assertEquals((-4215.8525F), wall0.getYStart(), 0.01F);
      assertEquals((-4215.8525F), wall0.getThickness(), 0.01F);
      assertEquals((-4215.8525F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-4215.8525F), wall0.getXEnd(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      
      Float float0 = new Float((double) (-4215.8525F));
      assertNotNull(float0);
      assertEquals((-4215.8525F), (float)float0, 0.01F);
      
      wall0.setArcExtent(float0);
      assertEquals((-4215.8525F), wall0.getArcExtent(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertNull(wall0.getHeight());
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-4215.8525F), wall0.getXStart(), 0.01F);
      assertEquals((-4215.8525F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-4215.8525F), wall0.getYEnd(), 0.01F);
      assertEquals((-4215.8525F), wall0.getYStart(), 0.01F);
      assertEquals((-4215.8525F), wall0.getThickness(), 0.01F);
      assertEquals((-4215.8525F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-4215.8525F), wall0.getXEnd(), 0.01F);
      assertNull(wall0.getRightSideColor());
      
      PropertyChangeListener propertyChangeListener0 = mock(PropertyChangeListener.class, new ViolatedAssumptionAnswer());
      wall0.setXEnd((-1.0F));
      assertEquals((-4215.8525F), wall0.getArcExtent(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertFalse(wall0.isTrapezoidal());
      assertEquals(1.07943568E8F, wall0.getLength(), 0.01F);
      assertNull(wall0.getHeight());
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-4215.8525F), wall0.getXStart(), 0.01F);
      assertEquals((-2108.4263F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(4214.8525F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(21301.48F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-4215.8525F), wall0.getYEnd(), 0.01F);
      assertEquals((-4215.8525F), wall0.getYStart(), 0.01F);
      assertEquals((-4215.8525F), wall0.getThickness(), 0.01F);
      assertEquals((-1.0F), wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getRightSideColor());
      
      wall0.setWallAtEnd(wall0);
      assertEquals((-4215.8525F), wall0.getArcExtent(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertFalse(wall0.isTrapezoidal());
      assertEquals(1.07943568E8F, wall0.getLength(), 0.01F);
      assertNull(wall0.getHeight());
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-4215.8525F), wall0.getXStart(), 0.01F);
      assertEquals((-2108.4263F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(4214.8525F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(21301.48F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-4215.8525F), wall0.getYEnd(), 0.01F);
      assertEquals((-4215.8525F), wall0.getYStart(), 0.01F);
      assertEquals((-4215.8525F), wall0.getThickness(), 0.01F);
      assertEquals((-1.0F), wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getRightSideColor());
      
      float float1 = wall0.getYArcCircleCenter();
      assertEquals(21301.48F, float1, 0.01F);
      assertEquals((-4215.8525F), wall0.getArcExtent(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertFalse(wall0.isTrapezoidal());
      assertEquals(1.07943568E8F, wall0.getLength(), 0.01F);
      assertNull(wall0.getHeight());
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-4215.8525F), wall0.getXStart(), 0.01F);
      assertEquals((-2108.4263F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(4214.8525F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(21301.48F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-4215.8525F), wall0.getYEnd(), 0.01F);
      assertEquals((-4215.8525F), wall0.getYStart(), 0.01F);
      assertEquals((-4215.8525F), wall0.getThickness(), 0.01F);
      assertEquals((-1.0F), wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getRightSideColor());
      
      Float float2 = wall0.getHeightAtEnd();
      assertNull(float2);
      assertEquals((-4215.8525F), wall0.getArcExtent(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertFalse(wall0.isTrapezoidal());
      assertEquals(1.07943568E8F, wall0.getLength(), 0.01F);
      assertNull(wall0.getHeight());
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-4215.8525F), wall0.getXStart(), 0.01F);
      assertEquals((-2108.4263F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(4214.8525F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(21301.48F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-4215.8525F), wall0.getYEnd(), 0.01F);
      assertEquals((-4215.8525F), wall0.getYStart(), 0.01F);
      assertEquals((-4215.8525F), wall0.getThickness(), 0.01F);
      assertEquals((-1.0F), wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getRightSideColor());
      
      wall0.setWallAtEnd(wall0);
      assertEquals((-4215.8525F), wall0.getArcExtent(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertFalse(wall0.isTrapezoidal());
      assertEquals(1.07943568E8F, wall0.getLength(), 0.01F);
      assertNull(wall0.getHeight());
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-4215.8525F), wall0.getXStart(), 0.01F);
      assertEquals((-2108.4263F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(4214.8525F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(21301.48F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-4215.8525F), wall0.getYEnd(), 0.01F);
      assertEquals((-4215.8525F), wall0.getYStart(), 0.01F);
      assertEquals((-4215.8525F), wall0.getThickness(), 0.01F);
      assertEquals((-1.0F), wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getRightSideColor());
      
      float float3 = wall0.getStartPointToEndPointDistance();
      assertNotEquals(float3, float1, 0.01F);
      assertEquals(4214.8525F, float3, 0.01F);
      assertEquals((-4215.8525F), wall0.getArcExtent(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertFalse(wall0.isTrapezoidal());
      assertEquals(1.07943568E8F, wall0.getLength(), 0.01F);
      assertNull(wall0.getHeight());
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-4215.8525F), wall0.getXStart(), 0.01F);
      assertEquals((-2108.4263F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(4214.8525F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(21301.48F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-4215.8525F), wall0.getYEnd(), 0.01F);
      assertEquals((-4215.8525F), wall0.getYStart(), 0.01F);
      assertEquals((-4215.8525F), wall0.getThickness(), 0.01F);
      assertEquals((-1.0F), wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getRightSideColor());
      
      TextureImage textureImage0 = wall0.getPattern();
      assertNull(textureImage0);
      assertEquals((-4215.8525F), wall0.getArcExtent(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertFalse(wall0.isTrapezoidal());
      assertEquals(1.07943568E8F, wall0.getLength(), 0.01F);
      assertNull(wall0.getHeight());
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-4215.8525F), wall0.getXStart(), 0.01F);
      assertEquals((-2108.4263F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(4214.8525F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(21301.48F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-4215.8525F), wall0.getYEnd(), 0.01F);
      assertEquals((-4215.8525F), wall0.getYStart(), 0.01F);
      assertEquals((-4215.8525F), wall0.getThickness(), 0.01F);
      assertEquals((-1.0F), wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getRightSideColor());
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      Wall wall0 = new Wall(16.918272F, 16.918272F, 16.918272F, 16.918272F, 16.918272F);
      assertNotNull(wall0);
      assertEquals(16.918272F, wall0.getXArcCircleCenter(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertNull(wall0.getHeight());
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getLeftSideColor());
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(16.918272F, wall0.getYEnd(), 0.01F);
      assertEquals(16.918272F, wall0.getXEnd(), 0.01F);
      assertEquals(16.918272F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(16.918272F, wall0.getXStart(), 0.01F);
      assertEquals(16.918272F, wall0.getYStart(), 0.01F);
      assertEquals(16.918272F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      
      Float float0 = new Float(16.918272F);
      assertNotNull(float0);
      assertEquals(16.918272F, (float)float0, 0.01F);
      
      wall0.setHeightAtEnd(float0);
      assertEquals(16.918272F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(16.918272F, wall0.getHeightAtEnd(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertNull(wall0.getHeight());
      assertNull(wall0.getLeftSideColor());
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(16.918272F, wall0.getYEnd(), 0.01F);
      assertEquals(16.918272F, wall0.getXEnd(), 0.01F);
      assertEquals(16.918272F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(16.918272F, wall0.getXStart(), 0.01F);
      assertEquals(16.918272F, wall0.getYStart(), 0.01F);
      assertEquals(16.918272F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      
      wall0.setHeightAtEnd(float0);
      assertEquals(16.918272F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(16.918272F, wall0.getHeightAtEnd(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertNull(wall0.getHeight());
      assertNull(wall0.getLeftSideColor());
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(16.918272F, wall0.getYEnd(), 0.01F);
      assertEquals(16.918272F, wall0.getXEnd(), 0.01F);
      assertEquals(16.918272F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(16.918272F, wall0.getXStart(), 0.01F);
      assertEquals(16.918272F, wall0.getYStart(), 0.01F);
      assertEquals(16.918272F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      Wall wall0 = new Wall(0.0F, 0.0F, 0.0F, 0.0F, 0.0F);
      assertNotNull(wall0);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      
      boolean boolean0 = wall0.containsWallStartAt(0.0F, 0.0F, 0.0F);
      assertFalse(boolean0);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      
      wall0.setWallAtStart(wall0);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      
      boolean boolean1 = wall0.containsWallEndAt(0.0F, 0.0F, 0.0F);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      
      Wall wall1 = new Wall(0.0F, 4043.4763F, 0.0F, 3943.0F, 155.2F, (-1228.8142F));
      assertFalse(wall1.equals((Object)wall0));
      assertNotNull(wall1);
      assertEquals(100.47632F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall1.getXStart(), 0.01F);
      assertEquals(0.0F, wall1.getXEnd(), 0.01F);
      assertEquals(4043.4763F, wall1.getYStart(), 0.01F);
      assertEquals(155.2F, wall1.getThickness(), 0.01F);
      assertEquals(0.0F, wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(3943.0F, wall1.getYEnd(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertEquals((-1228.8142F), wall1.getHeight(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals(3993.2383F, wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(100.47632F, wall1.getLength(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertFalse(wall1.isTrapezoidal());
      
      wall0.setWallAtEnd(wall1);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall1.equals((Object)wall0));
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(100.47632F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall1.getXStart(), 0.01F);
      assertEquals(0.0F, wall1.getXEnd(), 0.01F);
      assertEquals(4043.4763F, wall1.getYStart(), 0.01F);
      assertEquals(155.2F, wall1.getThickness(), 0.01F);
      assertEquals(0.0F, wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(3943.0F, wall1.getYEnd(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertEquals((-1228.8142F), wall1.getHeight(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals(3993.2383F, wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(100.47632F, wall1.getLength(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertFalse(wall1.isTrapezoidal());
      
      wall1.setWallAtEnd(wall0);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall1.equals((Object)wall0));
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(100.47632F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall1.getXStart(), 0.01F);
      assertEquals(0.0F, wall1.getXEnd(), 0.01F);
      assertEquals(4043.4763F, wall1.getYStart(), 0.01F);
      assertEquals(155.2F, wall1.getThickness(), 0.01F);
      assertEquals(0.0F, wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(3943.0F, wall1.getYEnd(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertEquals((-1228.8142F), wall1.getHeight(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals(3993.2383F, wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(100.47632F, wall1.getLength(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertFalse(wall1.isTrapezoidal());
      
      Float float0 = new Float((-1.0F));
      assertNotNull(float0);
      assertEquals((-1.0F), (float)float0, 0.01F);
      
      wall0.setHeight(float0);
      assertFalse(wall0.equals((Object)wall1));
      assertNotSame(wall0, wall1);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-1.0F), wall0.getHeight(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      
      float float1 = wall0.getYArcCircleCenter();
      assertFalse(wall0.equals((Object)wall1));
      assertNotSame(wall0, wall1);
      assertEquals(0.0F, float1, 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-1.0F), wall0.getHeight(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      
      float[][] floatArray0 = wall1.getPoints();
      assertFalse(wall1.equals((Object)wall0));
      assertNotNull(floatArray0);
      assertEquals(4, floatArray0.length);
      assertNotSame(wall1, wall0);
      assertEquals(100.47632F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall1.getXStart(), 0.01F);
      assertEquals(0.0F, wall1.getXEnd(), 0.01F);
      assertEquals(4043.4763F, wall1.getYStart(), 0.01F);
      assertEquals(155.2F, wall1.getThickness(), 0.01F);
      assertEquals(0.0F, wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(3943.0F, wall1.getYEnd(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertEquals((-1228.8142F), wall1.getHeight(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals(3993.2383F, wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(100.47632F, wall1.getLength(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertFalse(wall1.isTrapezoidal());
      
      HomeTexture homeTexture0 = wall1.getRightSideTexture();
      assertFalse(wall1.equals((Object)wall0));
      assertNull(homeTexture0);
      assertNotSame(wall1, wall0);
      assertEquals(100.47632F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall1.getXStart(), 0.01F);
      assertEquals(0.0F, wall1.getXEnd(), 0.01F);
      assertEquals(4043.4763F, wall1.getYStart(), 0.01F);
      assertEquals(155.2F, wall1.getThickness(), 0.01F);
      assertEquals(0.0F, wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(3943.0F, wall1.getYEnd(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertEquals((-1228.8142F), wall1.getHeight(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals(3993.2383F, wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(100.47632F, wall1.getLength(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertFalse(wall1.isTrapezoidal());
      
      Wall wall2 = new Wall((-562.3F), (-1.0F), (-562.3F), (-2451.963F), (-1.0F));
      assertFalse(wall2.equals((Object)wall0));
      assertFalse(wall2.equals((Object)wall1));
      assertNotNull(wall2);
      assertEquals(0.0F, wall2.getLeftSideShininess(), 0.01F);
      assertFalse(wall2.isTrapezoidal());
      assertEquals((-562.3F), wall2.getXEnd(), 0.01F);
      assertEquals((-1.0F), wall2.getThickness(), 0.01F);
      assertNull(wall2.getArcExtent());
      assertEquals((-2451.963F), wall2.getYEnd(), 0.01F);
      assertNull(wall2.getRightSideColor());
      assertNull(wall2.getHeightAtEnd());
      assertEquals((-562.3F), wall2.getXStart(), 0.01F);
      assertEquals((-1226.4814F), wall2.getYArcCircleCenter(), 0.01F);
      assertEquals((-1.0F), wall2.getYStart(), 0.01F);
      assertEquals(2450.963F, wall2.getLength(), 0.01F);
      assertEquals((-562.3F), wall2.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall2.getRightSideShininess(), 0.01F);
      assertNull(wall2.getHeight());
      assertEquals(2450.963F, wall2.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall2.getLeftSideColor());
      
      Wall wall3 = wall2.clone();
      assertFalse(wall2.equals((Object)wall0));
      assertFalse(wall2.equals((Object)wall1));
      assertFalse(wall3.equals((Object)wall2));
      assertFalse(wall3.equals((Object)wall1));
      assertFalse(wall3.equals((Object)wall0));
      assertNotNull(wall3);
      assertNotSame(wall2, wall0);
      assertNotSame(wall2, wall3);
      assertNotSame(wall2, wall1);
      assertNotSame(wall3, wall2);
      assertNotSame(wall3, wall1);
      assertNotSame(wall3, wall0);
      assertEquals(0.0F, wall2.getLeftSideShininess(), 0.01F);
      assertFalse(wall2.isTrapezoidal());
      assertEquals((-562.3F), wall2.getXEnd(), 0.01F);
      assertEquals((-1.0F), wall2.getThickness(), 0.01F);
      assertNull(wall2.getArcExtent());
      assertEquals((-2451.963F), wall2.getYEnd(), 0.01F);
      assertNull(wall2.getRightSideColor());
      assertNull(wall2.getHeightAtEnd());
      assertEquals((-562.3F), wall2.getXStart(), 0.01F);
      assertEquals((-1226.4814F), wall2.getYArcCircleCenter(), 0.01F);
      assertEquals((-1.0F), wall2.getYStart(), 0.01F);
      assertEquals(2450.963F, wall2.getLength(), 0.01F);
      assertEquals((-562.3F), wall2.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall2.getRightSideShininess(), 0.01F);
      assertNull(wall2.getHeight());
      assertEquals(2450.963F, wall2.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall2.getLeftSideColor());
      assertEquals((-562.3F), wall3.getXArcCircleCenter(), 0.01F);
      assertEquals(2450.963F, wall3.getLength(), 0.01F);
      assertNull(wall3.getArcExtent());
      assertNull(wall3.getRightSideColor());
      assertEquals((-2451.963F), wall3.getYEnd(), 0.01F);
      assertNull(wall3.getHeight());
      assertNull(wall3.getLeftSideColor());
      assertFalse(wall3.isTrapezoidal());
      assertEquals((-562.3F), wall3.getXStart(), 0.01F);
      assertEquals((-1226.4814F), wall3.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall3.getLeftSideShininess(), 0.01F);
      assertEquals(2450.963F, wall3.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-1.0F), wall3.getThickness(), 0.01F);
      assertEquals(0.0F, wall3.getRightSideShininess(), 0.01F);
      assertEquals((-1.0F), wall3.getYStart(), 0.01F);
      assertEquals((-562.3F), wall3.getXEnd(), 0.01F);
      assertNull(wall3.getHeightAtEnd());
      
      TextureImage textureImage0 = wall3.getPattern();
      assertFalse(wall2.equals((Object)wall0));
      assertFalse(wall2.equals((Object)wall3));
      assertFalse(wall2.equals((Object)wall1));
      assertFalse(wall3.equals((Object)wall2));
      assertFalse(wall3.equals((Object)wall1));
      assertFalse(wall3.equals((Object)wall0));
      assertNull(textureImage0);
      assertNotSame(wall2, wall0);
      assertNotSame(wall2, wall3);
      assertNotSame(wall2, wall1);
      assertNotSame(wall3, wall2);
      assertNotSame(wall3, wall1);
      assertNotSame(wall3, wall0);
      assertEquals(0.0F, wall2.getLeftSideShininess(), 0.01F);
      assertFalse(wall2.isTrapezoidal());
      assertEquals((-562.3F), wall2.getXEnd(), 0.01F);
      assertEquals((-1.0F), wall2.getThickness(), 0.01F);
      assertNull(wall2.getArcExtent());
      assertEquals((-2451.963F), wall2.getYEnd(), 0.01F);
      assertNull(wall2.getRightSideColor());
      assertNull(wall2.getHeightAtEnd());
      assertEquals((-562.3F), wall2.getXStart(), 0.01F);
      assertEquals((-1226.4814F), wall2.getYArcCircleCenter(), 0.01F);
      assertEquals((-1.0F), wall2.getYStart(), 0.01F);
      assertEquals(2450.963F, wall2.getLength(), 0.01F);
      assertEquals((-562.3F), wall2.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall2.getRightSideShininess(), 0.01F);
      assertNull(wall2.getHeight());
      assertEquals(2450.963F, wall2.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall2.getLeftSideColor());
      assertEquals((-562.3F), wall3.getXArcCircleCenter(), 0.01F);
      assertEquals(2450.963F, wall3.getLength(), 0.01F);
      assertNull(wall3.getArcExtent());
      assertNull(wall3.getRightSideColor());
      assertEquals((-2451.963F), wall3.getYEnd(), 0.01F);
      assertNull(wall3.getHeight());
      assertNull(wall3.getLeftSideColor());
      assertFalse(wall3.isTrapezoidal());
      assertEquals((-562.3F), wall3.getXStart(), 0.01F);
      assertEquals((-1226.4814F), wall3.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall3.getLeftSideShininess(), 0.01F);
      assertEquals(2450.963F, wall3.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-1.0F), wall3.getThickness(), 0.01F);
      assertEquals(0.0F, wall3.getRightSideShininess(), 0.01F);
      assertEquals((-1.0F), wall3.getYStart(), 0.01F);
      assertEquals((-562.3F), wall3.getXEnd(), 0.01F);
      assertNull(wall3.getHeightAtEnd());
      
      Wall wall4 = wall0.clone();
      assertFalse(wall0.equals((Object)wall2));
      assertFalse(wall0.equals((Object)wall3));
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall4.equals((Object)wall0));
      assertFalse(wall4.equals((Object)wall3));
      assertFalse(wall4.equals((Object)wall2));
      assertFalse(wall4.equals((Object)wall1));
      assertNotNull(wall4);
      assertNotSame(wall0, wall4);
      assertNotSame(wall0, wall2);
      assertNotSame(wall0, wall3);
      assertNotSame(wall0, wall1);
      assertNotSame(wall4, wall0);
      assertNotSame(wall4, wall3);
      assertNotSame(wall4, wall2);
      assertNotSame(wall4, wall1);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-1.0F), wall0.getHeight(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall4.getThickness(), 0.01F);
      assertEquals(0.0F, wall4.getYStart(), 0.01F);
      assertEquals(0.0F, wall4.getXEnd(), 0.01F);
      assertEquals(0.0F, wall4.getYEnd(), 0.01F);
      assertEquals(0.0F, wall4.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall4.getLeftSideShininess(), 0.01F);
      assertNull(wall4.getArcExtent());
      assertNull(wall4.getRightSideColor());
      assertEquals(0.0F, wall4.getRightSideShininess(), 0.01F);
      assertEquals((-1.0F), wall4.getHeight(), 0.01F);
      assertNull(wall4.getHeightAtEnd());
      assertEquals(0.0F, wall4.getLength(), 0.01F);
      assertEquals(0.0F, wall4.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall4.getLeftSideColor());
      assertEquals(0.0F, wall4.getXArcCircleCenter(), 0.01F);
      assertFalse(wall4.isTrapezoidal());
      assertEquals(0.0F, wall4.getXStart(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      Wall wall0 = new Wall(2766.8726F, (-1476.5521F), 2766.8726F, 2766.8726F, 2766.8726F);
      assertNotNull(wall0);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(2766.8726F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(4243.425F, wall0.getLength(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(645.1602F, wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals(2766.8726F, wall0.getThickness(), 0.01F);
      assertEquals(2766.8726F, wall0.getXStart(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(2766.8726F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-1476.5521F), wall0.getYStart(), 0.01F);
      assertEquals(4243.425F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(2766.8726F, wall0.getYEnd(), 0.01F);
      
      wall0.setXEnd(0.0F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(1383.4363F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(5065.791F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(645.1602F, wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals(2766.8726F, wall0.getThickness(), 0.01F);
      assertEquals(2766.8726F, wall0.getXStart(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-1476.5521F), wall0.getYStart(), 0.01F);
      assertEquals(2766.8726F, wall0.getYEnd(), 0.01F);
      assertEquals(5065.791F, wall0.getLength(), 0.01F);
      
      Float float0 = wall0.getArcExtent();
      assertNull(float0);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(1383.4363F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(5065.791F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(645.1602F, wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals(2766.8726F, wall0.getThickness(), 0.01F);
      assertEquals(2766.8726F, wall0.getXStart(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-1476.5521F), wall0.getYStart(), 0.01F);
      assertEquals(2766.8726F, wall0.getYEnd(), 0.01F);
      assertEquals(5065.791F, wall0.getLength(), 0.01F);
      
      boolean boolean0 = Float.isFinite(0.0F);
      assertTrue(boolean0);
      
      float float1 = Float.sum(2040.5863F, (-4275.436F));
      assertEquals((-2234.8496F), float1, 0.01F);
      
      wall0.setHeightAtEnd((Float) null);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(1383.4363F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(5065.791F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(645.1602F, wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals(2766.8726F, wall0.getThickness(), 0.01F);
      assertEquals(2766.8726F, wall0.getXStart(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-1476.5521F), wall0.getYStart(), 0.01F);
      assertEquals(2766.8726F, wall0.getYEnd(), 0.01F);
      assertEquals(5065.791F, wall0.getLength(), 0.01F);
      
      wall0.setXEnd(1.0F);
      assertEquals(1383.9363F, wall0.getXArcCircleCenter(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(1.0F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(5065.2446F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(645.1602F, wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals(2766.8726F, wall0.getThickness(), 0.01F);
      assertEquals(2766.8726F, wall0.getXStart(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(5065.2446F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-1476.5521F), wall0.getYStart(), 0.01F);
      assertEquals(2766.8726F, wall0.getYEnd(), 0.01F);
      
      Float float2 = new Float((-1476.5521F));
      assertNotEquals((float)float2, (float)float1, 0.01F);
      assertNotNull(float2);
      assertEquals((-1476.5521F), (float)float2, 0.01F);
      
      wall0.setYEnd((-1476.5521F));
      assertEquals(1383.9363F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals((-1476.5521F), wall0.getYEnd(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(1.0F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(2765.8726F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getHeight());
      assertEquals(2766.8726F, wall0.getThickness(), 0.01F);
      assertEquals((-1476.5521F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(2766.8726F, wall0.getXStart(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-1476.5521F), wall0.getYStart(), 0.01F);
      assertEquals(2765.8726F, wall0.getLength(), 0.01F);
      
      wall0.setRightSideColor((Integer) null);
      assertEquals(1383.9363F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals((-1476.5521F), wall0.getYEnd(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(1.0F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(2765.8726F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getHeight());
      assertEquals(2766.8726F, wall0.getThickness(), 0.01F);
      assertEquals((-1476.5521F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(2766.8726F, wall0.getXStart(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-1476.5521F), wall0.getYStart(), 0.01F);
      assertEquals(2765.8726F, wall0.getLength(), 0.01F);
      
      boolean boolean1 = wall0.containsWallStartAt(2.0F, 0.0F, 0.0F);
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      assertEquals(1383.9363F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals((-1476.5521F), wall0.getYEnd(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(1.0F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(2765.8726F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getHeight());
      assertEquals(2766.8726F, wall0.getThickness(), 0.01F);
      assertEquals((-1476.5521F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(2766.8726F, wall0.getXStart(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-1476.5521F), wall0.getYStart(), 0.01F);
      assertEquals(2765.8726F, wall0.getLength(), 0.01F);
      
      float float3 = wall0.getXArcCircleCenter();
      assertNotEquals(float3, float1, 0.01F);
      assertEquals(1383.9363F, float3, 0.01F);
      assertEquals(1383.9363F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals((-1476.5521F), wall0.getYEnd(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(1.0F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(2765.8726F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getHeight());
      assertEquals(2766.8726F, wall0.getThickness(), 0.01F);
      assertEquals((-1476.5521F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(2766.8726F, wall0.getXStart(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-1476.5521F), wall0.getYStart(), 0.01F);
      assertEquals(2765.8726F, wall0.getLength(), 0.01F);
      
      wall0.setYStart((-2234.8496F));
      assertEquals(1383.9363F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals((-1476.5521F), wall0.getYEnd(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(1.0F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(2867.9375F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-1855.7009F), wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(2867.9375F, wall0.getLength(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals(2766.8726F, wall0.getThickness(), 0.01F);
      assertEquals(2766.8726F, wall0.getXStart(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals((-2234.8496F), wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      
      boolean boolean2 = wall0.intersectsRectangle(1294.9337F, 2040.5863F, 1054.14F, 1383.9363F);
      assertFalse(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2);
      assertEquals(1383.9363F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals((-1476.5521F), wall0.getYEnd(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(1.0F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(2867.9375F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-1855.7009F), wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(2867.9375F, wall0.getLength(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals(2766.8726F, wall0.getThickness(), 0.01F);
      assertEquals(2766.8726F, wall0.getXStart(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals((-2234.8496F), wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      
      Wall.Property wall_Property0 = Wall.Property.valueOf("HEIGHT_AT_END");
      assertEquals(Wall.Property.HEIGHT_AT_END, wall_Property0);
      
      Integer integer0 = Integer.getInteger("X_START");
      assertNull(integer0);
      
      wall0.setRightSideColor((Integer) null);
      assertEquals(1383.9363F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals((-1476.5521F), wall0.getYEnd(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(1.0F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(2867.9375F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-1855.7009F), wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(2867.9375F, wall0.getLength(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals(2766.8726F, wall0.getThickness(), 0.01F);
      assertEquals(2766.8726F, wall0.getXStart(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals((-2234.8496F), wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      
      float float4 = wall0.getXStart();
      assertNotEquals(float4, float1, 0.01F);
      assertNotEquals(float4, float3, 0.01F);
      assertEquals(2766.8726F, float4, 0.01F);
      assertEquals(1383.9363F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals((-1476.5521F), wall0.getYEnd(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(1.0F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(2867.9375F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-1855.7009F), wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(2867.9375F, wall0.getLength(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals(2766.8726F, wall0.getThickness(), 0.01F);
      assertEquals(2766.8726F, wall0.getXStart(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals((-2234.8496F), wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      float float0 = 1.0F;
      float float1 = 3360.149F;
      float float2 = (-703.7F);
      float float3 = (-1.0F);
      Wall wall0 = new Wall(1.0F, 3360.149F, 1.0F, 1.0F, (-703.7F), (-1.0F));
      assertNotNull(wall0);
      assertEquals(3359.149F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-703.7F), wall0.getThickness(), 0.01F);
      assertEquals(3360.149F, wall0.getYStart(), 0.01F);
      assertEquals((-1.0F), wall0.getHeight(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(1.0F, wall0.getYEnd(), 0.01F);
      assertEquals(1.0F, wall0.getXEnd(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(1.0F, wall0.getXStart(), 0.01F);
      assertEquals(3359.149F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertNull(wall0.getHeightAtEnd());
      assertEquals(1680.5745F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(1.0F, wall0.getXArcCircleCenter(), 0.01F);
      
      // Undeclared exception!
      try { 
        Wall.clone((List<Wall>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.eteks.sweethome3d.model.Wall", e);
      }
  }

  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      Wall wall0 = new Wall((-1.0F), (-0.6209093F), (-1.0F), (-2111.0F), (-10.471956F));
      assertNotNull(wall0);
      assertEquals(2110.3792F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals((-2111.0F), wall0.getYEnd(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-10.471956F), wall0.getThickness(), 0.01F);
      assertEquals((-1055.8104F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-1.0F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(2110.3792F, wall0.getLength(), 0.01F);
      assertEquals((-1.0F), wall0.getXStart(), 0.01F);
      assertEquals((-0.6209093F), wall0.getYStart(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals((-1.0F), wall0.getXEnd(), 0.01F);
      
      wall0.setRightSideShininess((-0.6209093F));
      assertEquals(2110.3792F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals((-2111.0F), wall0.getYEnd(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals((-0.6209093F), wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-10.471956F), wall0.getThickness(), 0.01F);
      assertEquals((-1055.8104F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-1.0F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(2110.3792F, wall0.getLength(), 0.01F);
      assertEquals((-1.0F), wall0.getXStart(), 0.01F);
      assertEquals((-0.6209093F), wall0.getYStart(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals((-1.0F), wall0.getXEnd(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      Wall wall0 = new Wall((-13.933775F), 1.2353885F, 1.2353885F, (-13.933775F), (-13.933775F));
      assertNotNull(wall0);
      assertEquals((-13.933775F), wall0.getThickness(), 0.01F);
      assertEquals(1.2353885F, wall0.getYStart(), 0.01F);
      assertEquals((-13.933775F), wall0.getXStart(), 0.01F);
      assertEquals((-6.349193F), wall0.getXArcCircleCenter(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(21.452436F, wall0.getLength(), 0.01F);
      assertEquals(1.2353885F, wall0.getXEnd(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(21.452436F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-6.349193F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-13.933775F), wall0.getYEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertNull(wall0.getHeight());
      
      Float float0 = new Float((-13.933775F));
      assertNotNull(float0);
      assertEquals((-13.933775F), (float)float0, 0.01F);
      
      Float float1 = new Float((double) (-13.933775F));
      assertEquals((float)float1, (float)float0, 0.01F);
      assertNotNull(float1);
      assertEquals((-13.933775F), (float)float1, 0.01F);
      
      wall0.setArcExtent(float1);
      assertEquals((float)float1, (float)float0, 0.01F);
      assertEquals((-13.933775F), wall0.getThickness(), 0.01F);
      assertEquals(1.2353885F, wall0.getYStart(), 0.01F);
      assertEquals((-13.933775F), wall0.getXStart(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(1.2353885F, wall0.getXEnd(), 0.01F);
      assertEquals((-15.65768F), wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getRightSideColor());
      assertEquals((-13.933775F), wall0.getArcExtent(), 0.01F);
      assertEquals(21.452436F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-15.65768F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-13.933775F), wall0.getYEnd(), 0.01F);
      assertEquals(236.60666F, wall0.getLength(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertNull(wall0.getHeight());
      
      float[][] floatArray0 = wall0.getPoints();
      assertNotNull(floatArray0);
      assertEquals(26, floatArray0.length);
      assertEquals((-13.933775F), wall0.getThickness(), 0.01F);
      assertEquals(1.2353885F, wall0.getYStart(), 0.01F);
      assertEquals((-13.933775F), wall0.getXStart(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(1.2353885F, wall0.getXEnd(), 0.01F);
      assertEquals((-15.65768F), wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getRightSideColor());
      assertEquals((-13.933775F), wall0.getArcExtent(), 0.01F);
      assertEquals(21.452436F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-15.65768F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-13.933775F), wall0.getYEnd(), 0.01F);
      assertEquals(236.60666F, wall0.getLength(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertNull(wall0.getHeight());
      
      HomeTexture homeTexture0 = wall0.getLeftSideTexture();
      assertNull(homeTexture0);
      assertEquals((-13.933775F), wall0.getThickness(), 0.01F);
      assertEquals(1.2353885F, wall0.getYStart(), 0.01F);
      assertEquals((-13.933775F), wall0.getXStart(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(1.2353885F, wall0.getXEnd(), 0.01F);
      assertEquals((-15.65768F), wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getRightSideColor());
      assertEquals((-13.933775F), wall0.getArcExtent(), 0.01F);
      assertEquals(21.452436F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-15.65768F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-13.933775F), wall0.getYEnd(), 0.01F);
      assertEquals(236.60666F, wall0.getLength(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertNull(wall0.getHeight());
  }

  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      Wall wall0 = new Wall(0.0F, 0.0F, 0.0F, 0.0F, 0.0F);
      assertNotNull(wall0);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      
      boolean boolean0 = wall0.containsWallStartAt(0.0F, 0.0F, 0.0F);
      assertFalse(boolean0);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      
      wall0.setWallAtStart(wall0);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      
      boolean boolean1 = wall0.containsPoint(0.0F, 0.0F, 0.0F);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      
      boolean boolean2 = wall0.containsWallStartAt(2157.0F, 2157.0F, 1747.2914F);
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      assertFalse(boolean2);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      
      Wall wall1 = new Wall((-1.0F), 2157.0F, 0.0F, 0.0F, 3831.811F, (-3166.5F));
      assertFalse(wall1.equals((Object)wall0));
      assertNotNull(wall1);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertEquals((-0.5F), wall1.getXArcCircleCenter(), 0.01F);
      assertNull(wall1.getRightSideColor());
      assertFalse(wall1.isTrapezoidal());
      assertEquals(2157.0002F, wall1.getLength(), 0.01F);
      assertEquals(1078.5F, wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall1.getXEnd(), 0.01F);
      assertEquals(2157.0F, wall1.getYStart(), 0.01F);
      assertEquals(0.0F, wall1.getYEnd(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals(2157.0002F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-1.0F), wall1.getXStart(), 0.01F);
      assertEquals((-3166.5F), wall1.getHeight(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals(3831.811F, wall1.getThickness(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      
      wall0.setWallAtStart(wall1);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall1.equals((Object)wall0));
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertEquals((-0.5F), wall1.getXArcCircleCenter(), 0.01F);
      assertNull(wall1.getRightSideColor());
      assertFalse(wall1.isTrapezoidal());
      assertEquals(2157.0002F, wall1.getLength(), 0.01F);
      assertEquals(1078.5F, wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall1.getXEnd(), 0.01F);
      assertEquals(2157.0F, wall1.getYStart(), 0.01F);
      assertEquals(0.0F, wall1.getYEnd(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals(2157.0002F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-1.0F), wall1.getXStart(), 0.01F);
      assertEquals((-3166.5F), wall1.getHeight(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals(3831.811F, wall1.getThickness(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      
      boolean boolean3 = wall1.containsPoint(0.1F, 0.0F, 1747.2914F);
      assertFalse(wall1.equals((Object)wall0));
      assertFalse(boolean3 == boolean0);
      assertFalse(boolean3 == boolean2);
      assertFalse(boolean3 == boolean1);
      assertNotSame(wall1, wall0);
      assertTrue(boolean3);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertEquals((-0.5F), wall1.getXArcCircleCenter(), 0.01F);
      assertNull(wall1.getRightSideColor());
      assertFalse(wall1.isTrapezoidal());
      assertEquals(2157.0002F, wall1.getLength(), 0.01F);
      assertEquals(1078.5F, wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall1.getXEnd(), 0.01F);
      assertEquals(2157.0F, wall1.getYStart(), 0.01F);
      assertEquals(0.0F, wall1.getYEnd(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals(2157.0002F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-1.0F), wall1.getXStart(), 0.01F);
      assertEquals((-3166.5F), wall1.getHeight(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals(3831.811F, wall1.getThickness(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      
      boolean boolean4 = wall1.containsWallEndAt(1.0F, (-1232.48F), 3831.811F);
      assertFalse(wall1.equals((Object)wall0));
      assertTrue(boolean4 == boolean3);
      assertFalse(boolean4 == boolean1);
      assertFalse(boolean4 == boolean0);
      assertFalse(boolean4 == boolean2);
      assertNotSame(wall1, wall0);
      assertTrue(boolean4);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertEquals((-0.5F), wall1.getXArcCircleCenter(), 0.01F);
      assertNull(wall1.getRightSideColor());
      assertFalse(wall1.isTrapezoidal());
      assertEquals(2157.0002F, wall1.getLength(), 0.01F);
      assertEquals(1078.5F, wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall1.getXEnd(), 0.01F);
      assertEquals(2157.0F, wall1.getYStart(), 0.01F);
      assertEquals(0.0F, wall1.getYEnd(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals(2157.0002F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-1.0F), wall1.getXStart(), 0.01F);
      assertEquals((-3166.5F), wall1.getHeight(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals(3831.811F, wall1.getThickness(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      
      float[][] floatArray0 = wall0.getPoints();
      assertFalse(wall0.equals((Object)wall1));
      assertNotNull(floatArray0);
      assertEquals(4, floatArray0.length);
      assertNotSame(wall0, wall1);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      
      HomeTexture homeTexture0 = wall0.getRightSideTexture();
      assertFalse(wall0.equals((Object)wall1));
      assertNull(homeTexture0);
      assertNotSame(wall0, wall1);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      
      Integer integer0 = new Integer((-445));
      assertNotNull(integer0);
      assertEquals((-445), (int)integer0);
      
      Integer integer1 = new Integer(282);
      assertFalse(integer1.equals((Object)integer0));
      assertNotNull(integer1);
      assertEquals(282, (int)integer1);
      
      boolean boolean5 = integer1.equals("IDJk}o GB3/@0mjd");
      assertFalse(integer1.equals((Object)integer0));
      assertFalse(boolean5 == boolean4);
      assertTrue(boolean5 == boolean2);
      assertTrue(boolean5 == boolean0);
      assertFalse(boolean5 == boolean3);
      assertTrue(boolean5 == boolean1);
      assertFalse(boolean5);
      
      wall0.setLeftSideColor(integer1);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(integer1.equals((Object)integer0));
      assertNotSame(wall0, wall1);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(282, (int)wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      Wall wall0 = new Wall(0.0F, 0.0F, 0.0F, 0.1F, 0.1F);
      assertNotNull(wall0);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.1F, wall0.getYEnd(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.05F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(0.1F, wall0.getLength(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(0.1F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.1F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      
      boolean boolean0 = wall0.containsWallStartAt(0.1F, 0.0F, 0.1F);
      assertTrue(boolean0);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.1F, wall0.getYEnd(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.05F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(0.1F, wall0.getLength(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(0.1F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.1F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      
      boolean boolean1 = wall0.containsPoint(0.0F, 0.0F, 0.0F);
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.1F, wall0.getYEnd(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.05F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(0.1F, wall0.getLength(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(0.1F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.1F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      
      float[][] floatArray0 = wall0.getPoints();
      assertNotNull(floatArray0);
      assertEquals(4, floatArray0.length);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.1F, wall0.getYEnd(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.05F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(0.1F, wall0.getLength(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(0.1F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.1F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      
      HomeTexture homeTexture0 = wall0.getRightSideTexture();
      assertNull(homeTexture0);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.1F, wall0.getYEnd(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.05F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(0.1F, wall0.getLength(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(0.1F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.1F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      
      Integer integer0 = new Integer((-445));
      assertNotNull(integer0);
      assertEquals((-445), (int)integer0);
      
      wall0.setLeftSideColor(integer0);
      assertEquals(0.1F, wall0.getYEnd(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals((-445), (int)wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.05F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(0.1F, wall0.getLength(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(0.1F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.1F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      
      wall0.setLeftSideColor(integer0);
      assertEquals(0.1F, wall0.getYEnd(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals((-445), (int)wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.05F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(0.1F, wall0.getLength(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(0.1F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.1F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      Wall wall0 = new Wall(0.0F, 0.0F, 0.0F, 0.0F, 0.0F);
      assertNotNull(wall0);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getHeight());
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      
      boolean boolean0 = wall0.containsWallStartAt(0.0F, 0.0F, 0.0F);
      assertFalse(boolean0);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getHeight());
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      
      wall0.setWallAtStart(wall0);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getHeight());
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      
      boolean boolean1 = wall0.containsWallEndAt(0.0F, 0.0F, 0.0F);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getHeight());
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      
      Wall wall1 = new Wall(0.0F, 4043.4763F, 0.0F, 3943.0F, 0.0F, (-1228.8142F));
      assertFalse(wall1.equals((Object)wall0));
      assertNotNull(wall1);
      assertFalse(wall1.isTrapezoidal());
      assertNull(wall1.getLeftSideColor());
      assertEquals(0.0F, wall1.getXEnd(), 0.01F);
      assertEquals(0.0F, wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals(3943.0F, wall1.getYEnd(), 0.01F);
      assertEquals(100.47632F, wall1.getLength(), 0.01F);
      assertEquals(0.0F, wall1.getXStart(), 0.01F);
      assertEquals(3993.2383F, wall1.getYArcCircleCenter(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertNull(wall1.getHeightAtEnd());
      assertEquals(0.0F, wall1.getThickness(), 0.01F);
      assertEquals(100.47632F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals(4043.4763F, wall1.getYStart(), 0.01F);
      assertEquals((-1228.8142F), wall1.getHeight(), 0.01F);
      
      wall0.setWallAtEnd(wall1);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall1.equals((Object)wall0));
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getHeight());
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertNull(wall1.getLeftSideColor());
      assertEquals(0.0F, wall1.getXEnd(), 0.01F);
      assertEquals(0.0F, wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals(3943.0F, wall1.getYEnd(), 0.01F);
      assertEquals(100.47632F, wall1.getLength(), 0.01F);
      assertEquals(0.0F, wall1.getXStart(), 0.01F);
      assertEquals(3993.2383F, wall1.getYArcCircleCenter(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertNull(wall1.getHeightAtEnd());
      assertEquals(0.0F, wall1.getThickness(), 0.01F);
      assertEquals(100.47632F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals(4043.4763F, wall1.getYStart(), 0.01F);
      assertEquals((-1228.8142F), wall1.getHeight(), 0.01F);
      
      Wall wall2 = wall0.getWallAtStart();
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall2.equals((Object)wall1));
      assertNotNull(wall2);
      assertSame(wall0, wall2);
      assertNotSame(wall0, wall1);
      assertSame(wall2, wall0);
      assertNotSame(wall2, wall1);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getHeight());
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall2.getThickness(), 0.01F);
      assertEquals(0.0F, wall2.getYStart(), 0.01F);
      assertEquals(0.0F, wall2.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall2.getXEnd(), 0.01F);
      assertEquals(0.0F, wall2.getYEnd(), 0.01F);
      assertEquals(0.0F, wall2.getLeftSideShininess(), 0.01F);
      assertNull(wall2.getArcExtent());
      assertNull(wall2.getRightSideColor());
      assertEquals(0.0F, wall2.getRightSideShininess(), 0.01F);
      assertNull(wall2.getHeight());
      assertNull(wall2.getHeightAtEnd());
      assertNull(wall2.getLeftSideColor());
      assertEquals(0.0F, wall2.getLength(), 0.01F);
      assertEquals(0.0F, wall2.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall2.getXArcCircleCenter(), 0.01F);
      assertFalse(wall2.isTrapezoidal());
      assertEquals(0.0F, wall2.getXStart(), 0.01F);
      
      wall2.setWallAtEnd(wall0);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall2.equals((Object)wall1));
      assertSame(wall0, wall2);
      assertNotSame(wall0, wall1);
      assertSame(wall2, wall0);
      assertNotSame(wall2, wall1);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getHeight());
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall2.getThickness(), 0.01F);
      assertEquals(0.0F, wall2.getYStart(), 0.01F);
      assertEquals(0.0F, wall2.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall2.getXEnd(), 0.01F);
      assertEquals(0.0F, wall2.getYEnd(), 0.01F);
      assertEquals(0.0F, wall2.getLeftSideShininess(), 0.01F);
      assertNull(wall2.getArcExtent());
      assertNull(wall2.getRightSideColor());
      assertEquals(0.0F, wall2.getRightSideShininess(), 0.01F);
      assertNull(wall2.getHeight());
      assertNull(wall2.getHeightAtEnd());
      assertNull(wall2.getLeftSideColor());
      assertEquals(0.0F, wall2.getLength(), 0.01F);
      assertEquals(0.0F, wall2.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall2.getXArcCircleCenter(), 0.01F);
      assertFalse(wall2.isTrapezoidal());
      assertEquals(0.0F, wall2.getXStart(), 0.01F);
      
      wall2.setXStart(1237.4697F);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall2.equals((Object)wall1));
      assertSame(wall0, wall2);
      assertNotSame(wall0, wall1);
      assertSame(wall2, wall0);
      assertNotSame(wall2, wall1);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals(1237.4697F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(618.73486F, wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals(1237.4697F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getHeight());
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getHeightAtEnd());
      assertEquals(1237.4697F, wall0.getLength(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall2.getThickness(), 0.01F);
      assertEquals(0.0F, wall2.getYStart(), 0.01F);
      assertEquals(0.0F, wall2.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall2.getXEnd(), 0.01F);
      assertEquals(0.0F, wall2.getYEnd(), 0.01F);
      assertEquals(1237.4697F, wall2.getXStart(), 0.01F);
      assertEquals(618.73486F, wall2.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall2.getLeftSideShininess(), 0.01F);
      assertNull(wall2.getArcExtent());
      assertNull(wall2.getRightSideColor());
      assertEquals(1237.4697F, wall2.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall2.getRightSideShininess(), 0.01F);
      assertNull(wall2.getHeight());
      assertNull(wall2.getHeightAtEnd());
      assertNull(wall2.getLeftSideColor());
      assertEquals(1237.4697F, wall2.getLength(), 0.01F);
      assertFalse(wall2.isTrapezoidal());
      
      wall2.setRightSideColor((Integer) null);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall2.equals((Object)wall1));
      assertSame(wall0, wall2);
      assertNotSame(wall0, wall1);
      assertSame(wall2, wall0);
      assertNotSame(wall2, wall1);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals(1237.4697F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(618.73486F, wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals(1237.4697F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getHeight());
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getHeightAtEnd());
      assertEquals(1237.4697F, wall0.getLength(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall2.getThickness(), 0.01F);
      assertEquals(0.0F, wall2.getYStart(), 0.01F);
      assertEquals(0.0F, wall2.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall2.getXEnd(), 0.01F);
      assertEquals(0.0F, wall2.getYEnd(), 0.01F);
      assertEquals(1237.4697F, wall2.getXStart(), 0.01F);
      assertEquals(618.73486F, wall2.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall2.getLeftSideShininess(), 0.01F);
      assertNull(wall2.getArcExtent());
      assertNull(wall2.getRightSideColor());
      assertEquals(1237.4697F, wall2.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall2.getRightSideShininess(), 0.01F);
      assertNull(wall2.getHeight());
      assertNull(wall2.getHeightAtEnd());
      assertNull(wall2.getLeftSideColor());
      assertEquals(1237.4697F, wall2.getLength(), 0.01F);
      assertFalse(wall2.isTrapezoidal());
      
      wall2.setLeftSideShininess(4043.4763F);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall2.equals((Object)wall1));
      assertSame(wall0, wall2);
      assertNotSame(wall0, wall1);
      assertSame(wall2, wall0);
      assertNotSame(wall2, wall1);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals(1237.4697F, wall0.getXStart(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(618.73486F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(4043.4763F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals(1237.4697F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getHeight());
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getHeightAtEnd());
      assertEquals(1237.4697F, wall0.getLength(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall2.getThickness(), 0.01F);
      assertEquals(0.0F, wall2.getYStart(), 0.01F);
      assertEquals(0.0F, wall2.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall2.getXEnd(), 0.01F);
      assertEquals(0.0F, wall2.getYEnd(), 0.01F);
      assertEquals(1237.4697F, wall2.getXStart(), 0.01F);
      assertEquals(618.73486F, wall2.getXArcCircleCenter(), 0.01F);
      assertNull(wall2.getArcExtent());
      assertNull(wall2.getRightSideColor());
      assertEquals(4043.4763F, wall2.getLeftSideShininess(), 0.01F);
      assertEquals(1237.4697F, wall2.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall2.getRightSideShininess(), 0.01F);
      assertNull(wall2.getHeight());
      assertNull(wall2.getHeightAtEnd());
      assertNull(wall2.getLeftSideColor());
      assertEquals(1237.4697F, wall2.getLength(), 0.01F);
      assertFalse(wall2.isTrapezoidal());
      
      wall1.setWallAtStart(wall2);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall1.equals((Object)wall2));
      assertFalse(wall1.equals((Object)wall0));
      assertFalse(wall2.equals((Object)wall1));
      assertSame(wall0, wall2);
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall2);
      assertNotSame(wall1, wall0);
      assertSame(wall2, wall0);
      assertNotSame(wall2, wall1);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals(1237.4697F, wall0.getXStart(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(618.73486F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(4043.4763F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals(1237.4697F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getHeight());
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getHeightAtEnd());
      assertEquals(1237.4697F, wall0.getLength(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertFalse(wall1.isTrapezoidal());
      assertNull(wall1.getLeftSideColor());
      assertEquals(0.0F, wall1.getXEnd(), 0.01F);
      assertEquals(0.0F, wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals(3943.0F, wall1.getYEnd(), 0.01F);
      assertEquals(100.47632F, wall1.getLength(), 0.01F);
      assertEquals(0.0F, wall1.getXStart(), 0.01F);
      assertEquals(3993.2383F, wall1.getYArcCircleCenter(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertNull(wall1.getHeightAtEnd());
      assertEquals(0.0F, wall1.getThickness(), 0.01F);
      assertEquals(100.47632F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals(4043.4763F, wall1.getYStart(), 0.01F);
      assertEquals((-1228.8142F), wall1.getHeight(), 0.01F);
      assertEquals(0.0F, wall2.getThickness(), 0.01F);
      assertEquals(0.0F, wall2.getYStart(), 0.01F);
      assertEquals(0.0F, wall2.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall2.getXEnd(), 0.01F);
      assertEquals(0.0F, wall2.getYEnd(), 0.01F);
      assertEquals(1237.4697F, wall2.getXStart(), 0.01F);
      assertEquals(618.73486F, wall2.getXArcCircleCenter(), 0.01F);
      assertNull(wall2.getArcExtent());
      assertNull(wall2.getRightSideColor());
      assertEquals(4043.4763F, wall2.getLeftSideShininess(), 0.01F);
      assertEquals(1237.4697F, wall2.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall2.getRightSideShininess(), 0.01F);
      assertNull(wall2.getHeight());
      assertNull(wall2.getHeightAtEnd());
      assertNull(wall2.getLeftSideColor());
      assertEquals(1237.4697F, wall2.getLength(), 0.01F);
      assertFalse(wall2.isTrapezoidal());
      
      HomeTexture homeTexture0 = wall0.getRightSideTexture();
      assertFalse(wall0.equals((Object)wall1));
      assertNull(homeTexture0);
      assertSame(wall0, wall2);
      assertNotSame(wall0, wall1);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals(1237.4697F, wall0.getXStart(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(618.73486F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(4043.4763F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals(1237.4697F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getHeight());
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getHeightAtEnd());
      assertEquals(1237.4697F, wall0.getLength(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      
      wall1.setPattern((TextureImage) null);
      assertFalse(wall1.equals((Object)wall2));
      assertFalse(wall1.equals((Object)wall0));
      assertNotSame(wall1, wall2);
      assertNotSame(wall1, wall0);
      assertFalse(wall1.isTrapezoidal());
      assertNull(wall1.getLeftSideColor());
      assertEquals(0.0F, wall1.getXEnd(), 0.01F);
      assertEquals(0.0F, wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals(3943.0F, wall1.getYEnd(), 0.01F);
      assertEquals(100.47632F, wall1.getLength(), 0.01F);
      assertEquals(0.0F, wall1.getXStart(), 0.01F);
      assertEquals(3993.2383F, wall1.getYArcCircleCenter(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertNull(wall1.getHeightAtEnd());
      assertEquals(0.0F, wall1.getThickness(), 0.01F);
      assertEquals(100.47632F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals(4043.4763F, wall1.getYStart(), 0.01F);
      assertEquals((-1228.8142F), wall1.getHeight(), 0.01F);
      
      boolean boolean2 = wall1.containsPoint(1544.4587F, (-1.0F), 3943.0F);
      assertFalse(wall1.equals((Object)wall2));
      assertFalse(wall1.equals((Object)wall0));
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      assertNotSame(wall1, wall2);
      assertNotSame(wall1, wall0);
      assertFalse(boolean2);
      assertFalse(wall1.isTrapezoidal());
      assertNull(wall1.getLeftSideColor());
      assertEquals(0.0F, wall1.getXEnd(), 0.01F);
      assertEquals(0.0F, wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals(3943.0F, wall1.getYEnd(), 0.01F);
      assertEquals(100.47632F, wall1.getLength(), 0.01F);
      assertEquals(0.0F, wall1.getXStart(), 0.01F);
      assertEquals(3993.2383F, wall1.getYArcCircleCenter(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertNull(wall1.getHeightAtEnd());
      assertEquals(0.0F, wall1.getThickness(), 0.01F);
      assertEquals(100.47632F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals(4043.4763F, wall1.getYStart(), 0.01F);
      assertEquals((-1228.8142F), wall1.getHeight(), 0.01F);
      
      float[][] floatArray0 = wall0.getPoints();
      assertFalse(wall0.equals((Object)wall1));
      assertNotNull(floatArray0);
      assertEquals(4, floatArray0.length);
      assertSame(wall0, wall2);
      assertNotSame(wall0, wall1);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals(1237.4697F, wall0.getXStart(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(618.73486F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(4043.4763F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals(1237.4697F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getHeight());
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getHeightAtEnd());
      assertEquals(1237.4697F, wall0.getLength(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      
      HomeTexture homeTexture1 = wall1.getRightSideTexture();
      assertFalse(wall1.equals((Object)wall2));
      assertFalse(wall1.equals((Object)wall0));
      assertNull(homeTexture1);
      assertNotSame(wall1, wall2);
      assertNotSame(wall1, wall0);
      assertFalse(wall1.isTrapezoidal());
      assertNull(wall1.getLeftSideColor());
      assertEquals(0.0F, wall1.getXEnd(), 0.01F);
      assertEquals(0.0F, wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals(3943.0F, wall1.getYEnd(), 0.01F);
      assertEquals(100.47632F, wall1.getLength(), 0.01F);
      assertEquals(0.0F, wall1.getXStart(), 0.01F);
      assertEquals(3993.2383F, wall1.getYArcCircleCenter(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertNull(wall1.getHeightAtEnd());
      assertEquals(0.0F, wall1.getThickness(), 0.01F);
      assertEquals(100.47632F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals(4043.4763F, wall1.getYStart(), 0.01F);
      assertEquals((-1228.8142F), wall1.getHeight(), 0.01F);
      
      HomeTexture homeTexture2 = wall1.getLeftSideTexture();
      assertFalse(wall1.equals((Object)wall2));
      assertFalse(wall1.equals((Object)wall0));
      assertNull(homeTexture2);
      assertNotSame(wall1, wall2);
      assertNotSame(wall1, wall0);
      assertFalse(wall1.isTrapezoidal());
      assertNull(wall1.getLeftSideColor());
      assertEquals(0.0F, wall1.getXEnd(), 0.01F);
      assertEquals(0.0F, wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals(3943.0F, wall1.getYEnd(), 0.01F);
      assertEquals(100.47632F, wall1.getLength(), 0.01F);
      assertEquals(0.0F, wall1.getXStart(), 0.01F);
      assertEquals(3993.2383F, wall1.getYArcCircleCenter(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertNull(wall1.getHeightAtEnd());
      assertEquals(0.0F, wall1.getThickness(), 0.01F);
      assertEquals(100.47632F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals(4043.4763F, wall1.getYStart(), 0.01F);
      assertEquals((-1228.8142F), wall1.getHeight(), 0.01F);
      
      Wall wall3 = wall0.clone();
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall3.equals((Object)wall0));
      assertFalse(wall3.equals((Object)wall1));
      assertFalse(wall3.equals((Object)wall2));
      assertNotNull(wall3);
      assertSame(wall0, wall2);
      assertNotSame(wall0, wall1);
      assertNotSame(wall0, wall3);
      assertNotSame(wall3, wall0);
      assertNotSame(wall3, wall1);
      assertNotSame(wall3, wall2);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals(1237.4697F, wall0.getXStart(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(618.73486F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(4043.4763F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals(1237.4697F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getHeight());
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getHeightAtEnd());
      assertEquals(1237.4697F, wall0.getLength(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertNull(wall3.getHeightAtEnd());
      assertEquals(1237.4697F, wall3.getXStart(), 0.01F);
      assertNull(wall3.getHeight());
      assertEquals(0.0F, wall3.getThickness(), 0.01F);
      assertEquals(0.0F, wall3.getYArcCircleCenter(), 0.01F);
      assertNull(wall3.getLeftSideColor());
      assertNull(wall3.getArcExtent());
      assertNull(wall3.getRightSideColor());
      assertEquals(1237.4697F, wall3.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(4043.4763F, wall3.getLeftSideShininess(), 0.01F);
      assertEquals(618.73486F, wall3.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall3.getXEnd(), 0.01F);
      assertEquals(1237.4697F, wall3.getLength(), 0.01F);
      assertEquals(0.0F, wall3.getYEnd(), 0.01F);
      assertEquals(0.0F, wall3.getYStart(), 0.01F);
      assertEquals(0.0F, wall3.getRightSideShininess(), 0.01F);
      assertFalse(wall3.isTrapezoidal());
  }

  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      LinkedList<Wall> linkedList0 = new LinkedList<Wall>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      float float0 = Float.min((-2078.415F), (-2479.613F));
      assertEquals((-2479.613F), float0, 0.01F);
      
      List<Wall> list0 = Wall.clone((List<Wall>) linkedList0);
      assertNotNull(list0);
      assertEquals(0, linkedList0.size());
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      
      Wall wall0 = new Wall((-3839.8455F), (-2479.613F), (-2479.613F), (-2479.613F), (-2002.3F));
      assertNotNull(wall0);
      assertEquals((-3839.8455F), wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-2479.613F), wall0.getYArcCircleCenter(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals((-2479.613F), wall0.getYStart(), 0.01F);
      assertEquals((-2479.613F), wall0.getYEnd(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals((-2479.613F), wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(1360.2324F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-3159.7292F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals((-2002.3F), wall0.getThickness(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(1360.2324F, wall0.getLength(), 0.01F);
      
      float float1 = Float.sum((-2078.415F), (-2711.1907F));
      assertNotEquals(float1, float0, 0.01F);
      assertEquals((-4789.6055F), float1, 0.01F);
      
      Float float2 = new Float((double) (-2479.613F));
      assertNotEquals((float)float2, (float)float1, 0.01F);
      assertEquals((float)float2, (float)float0, 0.01F);
      assertNotNull(float2);
      assertEquals((-2479.613F), (float)float2, 0.01F);
      
      wall0.setArcExtent(float2);
      assertNotEquals((float)float2, (float)float1, 0.01F);
      assertEquals((float)float2, (float)float0, 0.01F);
      assertEquals((-3839.8455F), wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals((-2479.613F), wall0.getYStart(), 0.01F);
      assertEquals(1871266.2F, wall0.getLength(), 0.01F);
      assertEquals((-2479.613F), wall0.getArcExtent(), 0.01F);
      assertEquals((-2479.613F), wall0.getYEnd(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals((-2479.613F), wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals((-2152.574F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(1360.2324F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-3159.7292F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals((-2002.3F), wall0.getThickness(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getRightSideColor());
      
      Float float3 = new Float(1045.403F);
      assertNotEquals((float)float3, (float)float2, 0.01F);
      assertNotEquals((float)float3, (float)float0, 0.01F);
      assertNotEquals((float)float3, (float)float1, 0.01F);
      assertNotNull(float3);
      assertEquals(1045.403F, (float)float3, 0.01F);
      
      float float4 = wall0.getLength();
      assertNotEquals(float4, float0, 0.01F);
      assertNotEquals(float4, float1, 0.01F);
      assertEquals(1871266.2F, float4, 0.01F);
      assertEquals((-3839.8455F), wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals((-2479.613F), wall0.getYStart(), 0.01F);
      assertEquals(1871266.2F, wall0.getLength(), 0.01F);
      assertEquals((-2479.613F), wall0.getArcExtent(), 0.01F);
      assertEquals((-2479.613F), wall0.getYEnd(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals((-2479.613F), wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals((-2152.574F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(1360.2324F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-3159.7292F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals((-2002.3F), wall0.getThickness(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getRightSideColor());
  }

  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      Integer integer0 = new Integer(8192);
      assertNotNull(integer0);
      assertEquals(8192, (int)integer0);
      
      Wall wall0 = new Wall(8192, 8192, 8192, (-1.0F), (-2211.0F));
      assertNotNull(wall0);
      assertEquals(8192.0F, wall0.getXStart(), 0.01F);
      assertEquals(4095.5F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(8192.0F, wall0.getYStart(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals((-2211.0F), wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(8192.0F, wall0.getXEnd(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(8192.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(8193.0F, wall0.getLength(), 0.01F);
      assertEquals(8193.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-1.0F), wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getHeight());
      
      Level level0 = new Level("com.eteks.sweethome3d.io.HomeURLContent", 2372015.5F, 1.0F, 768.62F);
      assertNotNull(level0);
      assertEquals(768.62F, level0.getHeight(), 0.01F);
      assertTrue(level0.isVisible());
      assertEquals(1.0F, level0.getFloorThickness(), 0.01F);
      assertEquals("com.eteks.sweethome3d.io.HomeURLContent", level0.getName());
      assertEquals(2372015.5F, level0.getElevation(), 0.01F);
      
      Level level1 = level0.clone();
      assertFalse(level1.equals((Object)level0));
      assertNotNull(level1);
      assertNotSame(level0, level1);
      assertNotSame(level1, level0);
      assertEquals(768.62F, level0.getHeight(), 0.01F);
      assertTrue(level0.isVisible());
      assertEquals(1.0F, level0.getFloorThickness(), 0.01F);
      assertEquals("com.eteks.sweethome3d.io.HomeURLContent", level0.getName());
      assertEquals(2372015.5F, level0.getElevation(), 0.01F);
      assertEquals("com.eteks.sweethome3d.io.HomeURLContent", level1.getName());
      assertEquals(2372015.5F, level1.getElevation(), 0.01F);
      assertEquals(768.62F, level1.getHeight(), 0.01F);
      assertEquals(1.0F, level1.getFloorThickness(), 0.01F);
      assertTrue(level1.isVisible());
      
      wall0.setLevel(level1);
      assertFalse(level0.equals((Object)level1));
      assertFalse(level1.equals((Object)level0));
      assertNotSame(level0, level1);
      assertNotSame(level1, level0);
      assertEquals(8192.0F, wall0.getXStart(), 0.01F);
      assertEquals(4095.5F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(8192.0F, wall0.getYStart(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals((-2211.0F), wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(8192.0F, wall0.getXEnd(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(8192.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(8193.0F, wall0.getLength(), 0.01F);
      assertEquals(8193.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-1.0F), wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals(768.62F, level0.getHeight(), 0.01F);
      assertTrue(level0.isVisible());
      assertEquals(1.0F, level0.getFloorThickness(), 0.01F);
      assertEquals("com.eteks.sweethome3d.io.HomeURLContent", level0.getName());
      assertEquals(2372015.5F, level0.getElevation(), 0.01F);
      assertEquals("com.eteks.sweethome3d.io.HomeURLContent", level1.getName());
      assertEquals(2372015.5F, level1.getElevation(), 0.01F);
      assertEquals(768.62F, level1.getHeight(), 0.01F);
      assertEquals(1.0F, level1.getFloorThickness(), 0.01F);
      assertTrue(level1.isVisible());
      
      wall0.setHeightAtEnd((Float) null);
      assertEquals(8192.0F, wall0.getXStart(), 0.01F);
      assertEquals(4095.5F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(8192.0F, wall0.getYStart(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals((-2211.0F), wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(8192.0F, wall0.getXEnd(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(8192.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(8193.0F, wall0.getLength(), 0.01F);
      assertEquals(8193.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-1.0F), wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getHeight());
  }

  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      Wall wall0 = new Wall((-2165.49F), (-1.0F), (-2165.49F), (-2165.49F), 1.0F, 1747.2914F);
      assertNotNull(wall0);
      assertEquals(1.0F, wall0.getThickness(), 0.01F);
      assertEquals((-1083.245F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-1.0F), wall0.getYStart(), 0.01F);
      assertEquals(2164.49F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertNull(wall0.getLeftSideColor());
      assertEquals((-2165.49F), wall0.getXEnd(), 0.01F);
      assertEquals(2164.49F, wall0.getLength(), 0.01F);
      assertEquals((-2165.49F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals((-2165.49F), wall0.getYEnd(), 0.01F);
      assertEquals(1747.2914F, wall0.getHeight(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals((-2165.49F), wall0.getXStart(), 0.01F);
      
      Wall wall1 = wall0.clone();
      assertFalse(wall1.equals((Object)wall0));
      assertNotNull(wall1);
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      assertEquals(1.0F, wall0.getThickness(), 0.01F);
      assertEquals((-1083.245F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-1.0F), wall0.getYStart(), 0.01F);
      assertEquals(2164.49F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertNull(wall0.getLeftSideColor());
      assertEquals((-2165.49F), wall0.getXEnd(), 0.01F);
      assertEquals(2164.49F, wall0.getLength(), 0.01F);
      assertEquals((-2165.49F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals((-2165.49F), wall0.getYEnd(), 0.01F);
      assertEquals(1747.2914F, wall0.getHeight(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals((-2165.49F), wall0.getXStart(), 0.01F);
      assertEquals(2164.49F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertEquals(2164.49F, wall1.getLength(), 0.01F);
      assertEquals((-2165.49F), wall1.getXStart(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals((-1083.245F), wall1.getYArcCircleCenter(), 0.01F);
      assertEquals((-1.0F), wall1.getYStart(), 0.01F);
      assertEquals(1.0F, wall1.getThickness(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals((-2165.49F), wall1.getYEnd(), 0.01F);
      assertEquals((-2165.49F), wall1.getXEnd(), 0.01F);
      assertEquals(1747.2914F, wall1.getHeight(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals((-2165.49F), wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      
      wall1.setArcExtent((Float) null);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall1.equals((Object)wall0));
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      assertEquals(1.0F, wall0.getThickness(), 0.01F);
      assertEquals((-1083.245F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-1.0F), wall0.getYStart(), 0.01F);
      assertEquals(2164.49F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertNull(wall0.getLeftSideColor());
      assertEquals((-2165.49F), wall0.getXEnd(), 0.01F);
      assertEquals(2164.49F, wall0.getLength(), 0.01F);
      assertEquals((-2165.49F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals((-2165.49F), wall0.getYEnd(), 0.01F);
      assertEquals(1747.2914F, wall0.getHeight(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals((-2165.49F), wall0.getXStart(), 0.01F);
      assertEquals(2164.49F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertEquals(2164.49F, wall1.getLength(), 0.01F);
      assertEquals((-2165.49F), wall1.getXStart(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals((-1083.245F), wall1.getYArcCircleCenter(), 0.01F);
      assertEquals((-1.0F), wall1.getYStart(), 0.01F);
      assertEquals(1.0F, wall1.getThickness(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals((-2165.49F), wall1.getYEnd(), 0.01F);
      assertEquals((-2165.49F), wall1.getXEnd(), 0.01F);
      assertEquals(1747.2914F, wall1.getHeight(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals((-2165.49F), wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      
      URL uRL0 = MockURL.getFileExample();
      assertNotNull(uRL0);
      assertNull(uRL0.getUserInfo());
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getRef());
      assertEquals("some", uRL0.getHost());
      assertNull(uRL0.getQuery());
      assertEquals("some", uRL0.getAuthority());
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals("file", uRL0.getProtocol());
      
      URLContent uRLContent0 = new URLContent(uRL0);
      assertNotNull(uRLContent0);
      assertNull(uRL0.getUserInfo());
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getRef());
      assertEquals("some", uRL0.getHost());
      assertNull(uRL0.getQuery());
      assertEquals("some", uRL0.getAuthority());
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals("file", uRL0.getProtocol());
      assertFalse(uRLContent0.isJAREntry());
      
      CatalogTexture catalogTexture0 = new CatalogTexture("0sc!HV=N3E", "0sc!HV=N3E", uRLContent0, 0.0F, 1991.31F, ">2Wvd|yF9QSk(A", true);
      assertNotNull(catalogTexture0);
      assertNull(uRL0.getUserInfo());
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getRef());
      assertEquals("some", uRL0.getHost());
      assertNull(uRL0.getQuery());
      assertEquals("some", uRL0.getAuthority());
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals("file", uRL0.getProtocol());
      assertFalse(uRLContent0.isJAREntry());
      assertEquals(1991.31F, catalogTexture0.getHeight(), 0.01F);
      assertEquals("0sc!HV=N3E", catalogTexture0.getName());
      assertEquals(">2Wvd|yF9QSk(A", catalogTexture0.getCreator());
      assertEquals("0sc!HV=N3E", catalogTexture0.getId());
      assertEquals(0.0F, catalogTexture0.getWidth(), 0.01F);
      assertTrue(catalogTexture0.isModifiable());
      
      URLContent uRLContent1 = (URLContent)catalogTexture0.getImage();
      assertNotNull(uRLContent1);
      assertSame(uRLContent0, uRLContent1);
      assertSame(uRLContent1, uRLContent0);
      assertNull(uRL0.getUserInfo());
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getRef());
      assertEquals("some", uRL0.getHost());
      assertNull(uRL0.getQuery());
      assertEquals("some", uRL0.getAuthority());
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals("file", uRL0.getProtocol());
      assertFalse(uRLContent0.isJAREntry());
      assertEquals(1991.31F, catalogTexture0.getHeight(), 0.01F);
      assertEquals("0sc!HV=N3E", catalogTexture0.getName());
      assertEquals(">2Wvd|yF9QSk(A", catalogTexture0.getCreator());
      assertEquals("0sc!HV=N3E", catalogTexture0.getId());
      assertEquals(0.0F, catalogTexture0.getWidth(), 0.01F);
      assertTrue(catalogTexture0.isModifiable());
      assertFalse(uRLContent1.isJAREntry());
      
      float float0 = catalogTexture0.getWidth();
      assertSame(uRLContent0, uRLContent1);
      assertEquals(0.0F, float0, 0.01F);
      assertNull(uRL0.getUserInfo());
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getRef());
      assertEquals("some", uRL0.getHost());
      assertNull(uRL0.getQuery());
      assertEquals("some", uRL0.getAuthority());
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals("file", uRL0.getProtocol());
      assertFalse(uRLContent0.isJAREntry());
      assertEquals(1991.31F, catalogTexture0.getHeight(), 0.01F);
      assertEquals("0sc!HV=N3E", catalogTexture0.getName());
      assertEquals(">2Wvd|yF9QSk(A", catalogTexture0.getCreator());
      assertEquals("0sc!HV=N3E", catalogTexture0.getId());
      assertEquals(0.0F, catalogTexture0.getWidth(), 0.01F);
      assertTrue(catalogTexture0.isModifiable());
      
      float float1 = catalogTexture0.getHeight();
      assertNotEquals(float1, float0, 0.01F);
      assertSame(uRLContent0, uRLContent1);
      assertEquals(1991.31F, float1, 0.01F);
      assertNull(uRL0.getUserInfo());
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getRef());
      assertEquals("some", uRL0.getHost());
      assertNull(uRL0.getQuery());
      assertEquals("some", uRL0.getAuthority());
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals("file", uRL0.getProtocol());
      assertFalse(uRLContent0.isJAREntry());
      assertEquals(1991.31F, catalogTexture0.getHeight(), 0.01F);
      assertEquals("0sc!HV=N3E", catalogTexture0.getName());
      assertEquals(">2Wvd|yF9QSk(A", catalogTexture0.getCreator());
      assertEquals("0sc!HV=N3E", catalogTexture0.getId());
      assertEquals(0.0F, catalogTexture0.getWidth(), 0.01F);
      assertTrue(catalogTexture0.isModifiable());
      
      HomeTexture homeTexture0 = new HomeTexture(catalogTexture0);
      assertNotNull(homeTexture0);
      assertNull(uRL0.getUserInfo());
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getRef());
      assertEquals("some", uRL0.getHost());
      assertNull(uRL0.getQuery());
      assertEquals("some", uRL0.getAuthority());
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals("file", uRL0.getProtocol());
      assertFalse(uRLContent0.isJAREntry());
      assertEquals(1991.31F, catalogTexture0.getHeight(), 0.01F);
      assertEquals("0sc!HV=N3E", catalogTexture0.getName());
      assertEquals(">2Wvd|yF9QSk(A", catalogTexture0.getCreator());
      assertEquals("0sc!HV=N3E", catalogTexture0.getId());
      assertEquals(0.0F, catalogTexture0.getWidth(), 0.01F);
      assertTrue(catalogTexture0.isModifiable());
      assertEquals(0.0F, homeTexture0.getWidth(), 0.01F);
      assertEquals(1991.31F, homeTexture0.getHeight(), 0.01F);
      assertEquals("0sc!HV=N3E", homeTexture0.getName());
      assertTrue(homeTexture0.isLeftToRightOriented());
      
      wall0.setRightSideTexture(homeTexture0);
      assertFalse(wall0.equals((Object)wall1));
      assertNotSame(wall0, wall1);
      assertSame(uRLContent0, uRLContent1);
      assertEquals(1.0F, wall0.getThickness(), 0.01F);
      assertEquals((-1083.245F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-1.0F), wall0.getYStart(), 0.01F);
      assertEquals(2164.49F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertNull(wall0.getLeftSideColor());
      assertEquals((-2165.49F), wall0.getXEnd(), 0.01F);
      assertEquals(2164.49F, wall0.getLength(), 0.01F);
      assertEquals((-2165.49F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals((-2165.49F), wall0.getYEnd(), 0.01F);
      assertEquals(1747.2914F, wall0.getHeight(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals((-2165.49F), wall0.getXStart(), 0.01F);
      assertNull(uRL0.getUserInfo());
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getRef());
      assertEquals("some", uRL0.getHost());
      assertNull(uRL0.getQuery());
      assertEquals("some", uRL0.getAuthority());
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals("file", uRL0.getProtocol());
      assertFalse(uRLContent0.isJAREntry());
      assertEquals(1991.31F, catalogTexture0.getHeight(), 0.01F);
      assertEquals("0sc!HV=N3E", catalogTexture0.getName());
      assertEquals(">2Wvd|yF9QSk(A", catalogTexture0.getCreator());
      assertEquals("0sc!HV=N3E", catalogTexture0.getId());
      assertEquals(0.0F, catalogTexture0.getWidth(), 0.01F);
      assertTrue(catalogTexture0.isModifiable());
      assertEquals(0.0F, homeTexture0.getWidth(), 0.01F);
      assertEquals(1991.31F, homeTexture0.getHeight(), 0.01F);
      assertEquals("0sc!HV=N3E", homeTexture0.getName());
      assertTrue(homeTexture0.isLeftToRightOriented());
  }

  @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      Wall wall0 = new Wall(0.1F, 0.1F, 0.1F, 0.1F, 0.1F, 0.1F);
      assertNotNull(wall0);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.1F, wall0.getXEnd(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.1F, wall0.getYEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.1F, wall0.getHeight(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.1F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(0.1F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.1F, wall0.getYStart(), 0.01F);
      assertEquals(0.1F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.1F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      
      Level level0 = new Level("Super class isn't cloneable", 2683.0F, (-1.0F), 0.01F);
      assertNotNull(level0);
      assertEquals("Super class isn't cloneable", level0.getName());
      assertEquals((-1.0F), level0.getFloorThickness(), 0.01F);
      assertEquals(0.01F, level0.getHeight(), 0.01F);
      assertTrue(level0.isVisible());
      assertEquals(2683.0F, level0.getElevation(), 0.01F);
      
      float float0 = level0.getElevation();
      assertEquals(2683.0F, float0, 0.01F);
      assertEquals("Super class isn't cloneable", level0.getName());
      assertEquals((-1.0F), level0.getFloorThickness(), 0.01F);
      assertEquals(0.01F, level0.getHeight(), 0.01F);
      assertTrue(level0.isVisible());
      assertEquals(2683.0F, level0.getElevation(), 0.01F);
      
      float float1 = level0.getHeight();
      assertNotEquals(float1, float0, 0.01F);
      assertEquals(0.01F, float1, 0.01F);
      assertEquals("Super class isn't cloneable", level0.getName());
      assertEquals((-1.0F), level0.getFloorThickness(), 0.01F);
      assertEquals(0.01F, level0.getHeight(), 0.01F);
      assertTrue(level0.isVisible());
      assertEquals(2683.0F, level0.getElevation(), 0.01F);
      
      Wall wall1 = new Wall(0.1F, (-852.7006F), 1.0F, (-852.7006F), (-2253.057F), (-1907.7471F));
      assertFalse(wall1.equals((Object)wall0));
      assertNotNull(wall1);
      assertNull(wall1.getHeightAtEnd());
      assertNull(wall1.getLeftSideColor());
      assertEquals((-2253.057F), wall1.getThickness(), 0.01F);
      assertEquals(0.55F, wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(0.9F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-852.7006F), wall1.getYArcCircleCenter(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals(0.1F, wall1.getXStart(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals((-1907.7471F), wall1.getHeight(), 0.01F);
      assertEquals((-852.7006F), wall1.getYEnd(), 0.01F);
      assertEquals(0.9F, wall1.getLength(), 0.01F);
      assertEquals(1.0F, wall1.getXEnd(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertEquals((-852.7006F), wall1.getYStart(), 0.01F);
      
      wall1.setLevel(level0);
      assertFalse(wall1.equals((Object)wall0));
      assertNotSame(wall1, wall0);
      assertEquals("Super class isn't cloneable", level0.getName());
      assertEquals((-1.0F), level0.getFloorThickness(), 0.01F);
      assertEquals(0.01F, level0.getHeight(), 0.01F);
      assertTrue(level0.isVisible());
      assertEquals(2683.0F, level0.getElevation(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertNull(wall1.getLeftSideColor());
      assertEquals((-2253.057F), wall1.getThickness(), 0.01F);
      assertEquals(0.55F, wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(0.9F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-852.7006F), wall1.getYArcCircleCenter(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals(0.1F, wall1.getXStart(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals((-1907.7471F), wall1.getHeight(), 0.01F);
      assertEquals((-852.7006F), wall1.getYEnd(), 0.01F);
      assertEquals(0.9F, wall1.getLength(), 0.01F);
      assertEquals(1.0F, wall1.getXEnd(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertEquals((-852.7006F), wall1.getYStart(), 0.01F);
      
      LinkedList<Wall> linkedList0 = new LinkedList<Wall>();
      assertFalse(linkedList0.contains(wall0));
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      Level level1 = new Level("y$aSXO^]02f7(3`NK4", 2683.0F, 0.0F, (-1907.7471F));
      assertFalse(level1.equals((Object)level0));
      assertNotNull(level1);
      assertTrue(level1.isVisible());
      assertEquals("y$aSXO^]02f7(3`NK4", level1.getName());
      assertEquals((-1907.7471F), level1.getHeight(), 0.01F);
      assertEquals(2683.0F, level1.getElevation(), 0.01F);
      assertEquals(0.0F, level1.getFloorThickness(), 0.01F);
      
      level1.setElevation(2309.548F);
      assertFalse(level1.equals((Object)level0));
      assertNotSame(level1, level0);
      assertTrue(level1.isVisible());
      assertEquals("y$aSXO^]02f7(3`NK4", level1.getName());
      assertEquals(2309.548F, level1.getElevation(), 0.01F);
      assertEquals((-1907.7471F), level1.getHeight(), 0.01F);
      assertEquals(0.0F, level1.getFloorThickness(), 0.01F);
      
      boolean boolean0 = wall1.isAtLevel(level1);
      assertFalse(wall1.equals((Object)wall0));
      assertFalse(level1.equals((Object)level0));
      assertNotSame(wall1, wall0);
      assertNotSame(level1, level0);
      assertFalse(boolean0);
      assertNull(wall1.getHeightAtEnd());
      assertNull(wall1.getLeftSideColor());
      assertEquals((-2253.057F), wall1.getThickness(), 0.01F);
      assertEquals(0.55F, wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(0.9F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-852.7006F), wall1.getYArcCircleCenter(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals(0.1F, wall1.getXStart(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals((-1907.7471F), wall1.getHeight(), 0.01F);
      assertEquals((-852.7006F), wall1.getYEnd(), 0.01F);
      assertEquals(0.9F, wall1.getLength(), 0.01F);
      assertEquals(1.0F, wall1.getXEnd(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertEquals((-852.7006F), wall1.getYStart(), 0.01F);
      assertTrue(level1.isVisible());
      assertEquals("y$aSXO^]02f7(3`NK4", level1.getName());
      assertEquals(2309.548F, level1.getElevation(), 0.01F);
      assertEquals((-1907.7471F), level1.getHeight(), 0.01F);
      assertEquals(0.0F, level1.getFloorThickness(), 0.01F);
      
      Float float2 = wall0.getHeightAtEnd();
      assertFalse(wall0.equals((Object)wall1));
      assertNull(float2);
      assertNotSame(wall0, wall1);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.1F, wall0.getXEnd(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.1F, wall0.getYEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.1F, wall0.getHeight(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.1F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(0.1F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.1F, wall0.getYStart(), 0.01F);
      assertEquals(0.1F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.1F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
  }

  @Test(timeout = 4000)
  public void test162()  throws Throwable  {
      Wall wall0 = new Wall(1.0F, 1.0F, 0.0F, 1.0F, 1.0F);
      assertNotNull(wall0);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(1.0F, wall0.getYEnd(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(1.0F, wall0.getXStart(), 0.01F);
      assertEquals(1.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(1.0F, wall0.getLength(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertNull(wall0.getHeight());
      assertEquals(1.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.5F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(1.0F, wall0.getYStart(), 0.01F);
      assertEquals(1.0F, wall0.getThickness(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      
      Wall wall1 = new Wall(1.0F, 4901.0F, (-1.0F), (-1665.0F), (-2133.801F), 4901.0F);
      assertFalse(wall1.equals((Object)wall0));
      assertNotNull(wall1);
      assertEquals((-1.0F), wall1.getXEnd(), 0.01F);
      assertEquals(4901.0F, wall1.getHeight(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals((-2133.801F), wall1.getThickness(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals(0.0F, wall1.getXArcCircleCenter(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertEquals(6566.0005F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals((-1665.0F), wall1.getYEnd(), 0.01F);
      assertEquals(1618.0F, wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals(1.0F, wall1.getXStart(), 0.01F);
      assertEquals(4901.0F, wall1.getYStart(), 0.01F);
      assertEquals(6566.0005F, wall1.getLength(), 0.01F);
      
      boolean boolean0 = wall1.containsWallStartAt((-2133.801F), 953.0615F, 0.0F);
      assertFalse(wall1.equals((Object)wall0));
      assertNotSame(wall1, wall0);
      assertFalse(boolean0);
      assertEquals((-1.0F), wall1.getXEnd(), 0.01F);
      assertEquals(4901.0F, wall1.getHeight(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals((-2133.801F), wall1.getThickness(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals(0.0F, wall1.getXArcCircleCenter(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertEquals(6566.0005F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals((-1665.0F), wall1.getYEnd(), 0.01F);
      assertEquals(1618.0F, wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals(1.0F, wall1.getXStart(), 0.01F);
      assertEquals(4901.0F, wall1.getYStart(), 0.01F);
      assertEquals(6566.0005F, wall1.getLength(), 0.01F);
      
      wall0.setWallAtStart(wall1);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall1.equals((Object)wall0));
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(1.0F, wall0.getYEnd(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(1.0F, wall0.getXStart(), 0.01F);
      assertEquals(1.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(1.0F, wall0.getLength(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertNull(wall0.getHeight());
      assertEquals(1.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.5F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(1.0F, wall0.getYStart(), 0.01F);
      assertEquals(1.0F, wall0.getThickness(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-1.0F), wall1.getXEnd(), 0.01F);
      assertEquals(4901.0F, wall1.getHeight(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals((-2133.801F), wall1.getThickness(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals(0.0F, wall1.getXArcCircleCenter(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertEquals(6566.0005F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals((-1665.0F), wall1.getYEnd(), 0.01F);
      assertEquals(1618.0F, wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals(1.0F, wall1.getXStart(), 0.01F);
      assertEquals(4901.0F, wall1.getYStart(), 0.01F);
      assertEquals(6566.0005F, wall1.getLength(), 0.01F);
      
      boolean boolean1 = wall1.containsWallStartAt((-1.0F), (-1686.4304F), (-1.0F));
      assertFalse(wall1.equals((Object)wall0));
      assertTrue(boolean1 == boolean0);
      assertNotSame(wall1, wall0);
      assertFalse(boolean1);
      assertEquals((-1.0F), wall1.getXEnd(), 0.01F);
      assertEquals(4901.0F, wall1.getHeight(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals((-2133.801F), wall1.getThickness(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals(0.0F, wall1.getXArcCircleCenter(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertEquals(6566.0005F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals((-1665.0F), wall1.getYEnd(), 0.01F);
      assertEquals(1618.0F, wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals(1.0F, wall1.getXStart(), 0.01F);
      assertEquals(4901.0F, wall1.getYStart(), 0.01F);
      assertEquals(6566.0005F, wall1.getLength(), 0.01F);
      
      Wall wall2 = wall0.clone();
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall2.equals((Object)wall0));
      assertFalse(wall2.equals((Object)wall1));
      assertNotNull(wall2);
      assertNotSame(wall0, wall2);
      assertNotSame(wall0, wall1);
      assertNotSame(wall2, wall0);
      assertNotSame(wall2, wall1);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(1.0F, wall0.getYEnd(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(1.0F, wall0.getXStart(), 0.01F);
      assertEquals(1.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(1.0F, wall0.getLength(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertNull(wall0.getHeight());
      assertEquals(1.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.5F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(1.0F, wall0.getYStart(), 0.01F);
      assertEquals(1.0F, wall0.getThickness(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(1.0F, wall2.getYStart(), 0.01F);
      assertEquals(1.0F, wall2.getYArcCircleCenter(), 0.01F);
      assertNull(wall2.getHeightAtEnd());
      assertEquals(1.0F, wall2.getThickness(), 0.01F);
      assertNull(wall2.getArcExtent());
      assertNull(wall2.getRightSideColor());
      assertEquals(0.0F, wall2.getLeftSideShininess(), 0.01F);
      assertEquals(1.0F, wall2.getLength(), 0.01F);
      assertFalse(wall2.isTrapezoidal());
      assertEquals(1.0F, wall2.getYEnd(), 0.01F);
      assertEquals(0.0F, wall2.getXEnd(), 0.01F);
      assertEquals(0.5F, wall2.getXArcCircleCenter(), 0.01F);
      assertNull(wall2.getLeftSideColor());
      assertEquals(0.0F, wall2.getRightSideShininess(), 0.01F);
      assertNull(wall2.getHeight());
      assertEquals(1.0F, wall2.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(1.0F, wall2.getXStart(), 0.01F);
      
      Level level0 = new Level("", (-2133.801F), (-3751.994F), 784.0F);
      assertNotNull(level0);
      assertEquals(784.0F, level0.getHeight(), 0.01F);
      assertEquals((-3751.994F), level0.getFloorThickness(), 0.01F);
      assertEquals("", level0.getName());
      assertEquals((-2133.801F), level0.getElevation(), 0.01F);
      assertTrue(level0.isVisible());
      
      float float0 = level0.getHeight();
      assertEquals(784.0F, float0, 0.01F);
      assertEquals(784.0F, level0.getHeight(), 0.01F);
      assertEquals((-3751.994F), level0.getFloorThickness(), 0.01F);
      assertEquals("", level0.getName());
      assertEquals((-2133.801F), level0.getElevation(), 0.01F);
      assertTrue(level0.isVisible());
      
      Wall wall3 = wall0.getWallAtStart();
      assertFalse(wall0.equals((Object)wall2));
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall3.equals((Object)wall2));
      assertFalse(wall3.equals((Object)wall0));
      assertNotNull(wall3);
      assertNotSame(wall0, wall2);
      assertNotSame(wall0, wall1);
      assertNotSame(wall0, wall3);
      assertNotSame(wall3, wall2);
      assertNotSame(wall3, wall0);
      assertSame(wall3, wall1);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(1.0F, wall0.getYEnd(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(1.0F, wall0.getXStart(), 0.01F);
      assertEquals(1.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(1.0F, wall0.getLength(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertNull(wall0.getHeight());
      assertEquals(1.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.5F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(1.0F, wall0.getYStart(), 0.01F);
      assertEquals(1.0F, wall0.getThickness(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall3.getHeightAtEnd());
      assertNull(wall3.getArcExtent());
      assertNull(wall3.getRightSideColor());
      assertEquals(6566.0005F, wall3.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(4901.0F, wall3.getHeight(), 0.01F);
      assertEquals(0.0F, wall3.getLeftSideShininess(), 0.01F);
      assertFalse(wall3.isTrapezoidal());
      assertEquals((-2133.801F), wall3.getThickness(), 0.01F);
      assertNull(wall3.getLeftSideColor());
      assertEquals((-1.0F), wall3.getXEnd(), 0.01F);
      assertEquals(0.0F, wall3.getXArcCircleCenter(), 0.01F);
      assertEquals(6566.0005F, wall3.getLength(), 0.01F);
      assertEquals(0.0F, wall3.getRightSideShininess(), 0.01F);
      assertEquals((-1665.0F), wall3.getYEnd(), 0.01F);
      assertEquals(1618.0F, wall3.getYArcCircleCenter(), 0.01F);
      assertEquals(1.0F, wall3.getXStart(), 0.01F);
      assertEquals(4901.0F, wall3.getYStart(), 0.01F);
      
      level0.setName("");
      assertEquals(784.0F, level0.getHeight(), 0.01F);
      assertEquals((-3751.994F), level0.getFloorThickness(), 0.01F);
      assertEquals("", level0.getName());
      assertEquals((-2133.801F), level0.getElevation(), 0.01F);
      assertTrue(level0.isVisible());
      
      Wall wall4 = wall3.clone();
      assertFalse(wall0.equals((Object)wall2));
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall0.equals((Object)wall3));
      assertFalse(wall3.equals((Object)wall2));
      assertFalse(wall3.equals((Object)wall0));
      assertFalse(wall4.equals((Object)wall2));
      assertFalse(wall4.equals((Object)wall1));
      assertFalse(wall4.equals((Object)wall3));
      assertFalse(wall4.equals((Object)wall0));
      assertNotNull(wall4);
      assertNotSame(wall0, wall2);
      assertNotSame(wall0, wall1);
      assertNotSame(wall0, wall4);
      assertNotSame(wall0, wall3);
      assertNotSame(wall3, wall2);
      assertNotSame(wall3, wall0);
      assertNotSame(wall3, wall4);
      assertSame(wall3, wall1);
      assertNotSame(wall4, wall2);
      assertNotSame(wall4, wall1);
      assertNotSame(wall4, wall3);
      assertNotSame(wall4, wall0);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(1.0F, wall0.getYEnd(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(1.0F, wall0.getXStart(), 0.01F);
      assertEquals(1.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(1.0F, wall0.getLength(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertNull(wall0.getHeight());
      assertEquals(1.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.5F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(1.0F, wall0.getYStart(), 0.01F);
      assertEquals(1.0F, wall0.getThickness(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall3.getHeightAtEnd());
      assertNull(wall3.getArcExtent());
      assertNull(wall3.getRightSideColor());
      assertEquals(6566.0005F, wall3.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(4901.0F, wall3.getHeight(), 0.01F);
      assertEquals(0.0F, wall3.getLeftSideShininess(), 0.01F);
      assertFalse(wall3.isTrapezoidal());
      assertEquals((-2133.801F), wall3.getThickness(), 0.01F);
      assertNull(wall3.getLeftSideColor());
      assertEquals((-1.0F), wall3.getXEnd(), 0.01F);
      assertEquals(0.0F, wall3.getXArcCircleCenter(), 0.01F);
      assertEquals(6566.0005F, wall3.getLength(), 0.01F);
      assertEquals(0.0F, wall3.getRightSideShininess(), 0.01F);
      assertEquals((-1665.0F), wall3.getYEnd(), 0.01F);
      assertEquals(1618.0F, wall3.getYArcCircleCenter(), 0.01F);
      assertEquals(1.0F, wall3.getXStart(), 0.01F);
      assertEquals(4901.0F, wall3.getYStart(), 0.01F);
      assertEquals(6566.0005F, wall4.getLength(), 0.01F);
      assertNull(wall4.getArcExtent());
      assertNull(wall4.getRightSideColor());
      assertEquals(4901.0F, wall4.getYStart(), 0.01F);
      assertEquals((-1665.0F), wall4.getYEnd(), 0.01F);
      assertEquals(0.0F, wall4.getRightSideShininess(), 0.01F);
      assertNull(wall4.getHeightAtEnd());
      assertEquals(0.0F, wall4.getXArcCircleCenter(), 0.01F);
      assertEquals((-2133.801F), wall4.getThickness(), 0.01F);
      assertNull(wall4.getLeftSideColor());
      assertEquals(1618.0F, wall4.getYArcCircleCenter(), 0.01F);
      assertEquals((-1.0F), wall4.getXEnd(), 0.01F);
      assertEquals(1.0F, wall4.getXStart(), 0.01F);
      assertEquals(0.0F, wall4.getLeftSideShininess(), 0.01F);
      assertFalse(wall4.isTrapezoidal());
      assertEquals(6566.0005F, wall4.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(4901.0F, wall4.getHeight(), 0.01F);
      
      boolean boolean2 = wall3.isAtLevel(level0);
      assertFalse(wall0.equals((Object)wall2));
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall0.equals((Object)wall4));
      assertFalse(wall0.equals((Object)wall3));
      assertFalse(wall3.equals((Object)wall2));
      assertFalse(wall3.equals((Object)wall0));
      assertFalse(wall3.equals((Object)wall4));
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      assertNotSame(wall0, wall2);
      assertNotSame(wall0, wall1);
      assertNotSame(wall0, wall4);
      assertNotSame(wall0, wall3);
      assertNotSame(wall3, wall2);
      assertNotSame(wall3, wall0);
      assertNotSame(wall3, wall4);
      assertSame(wall3, wall1);
      assertFalse(boolean2);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(1.0F, wall0.getYEnd(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(1.0F, wall0.getXStart(), 0.01F);
      assertEquals(1.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(1.0F, wall0.getLength(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertNull(wall0.getHeight());
      assertEquals(1.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.5F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(1.0F, wall0.getYStart(), 0.01F);
      assertEquals(1.0F, wall0.getThickness(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(784.0F, level0.getHeight(), 0.01F);
      assertEquals((-3751.994F), level0.getFloorThickness(), 0.01F);
      assertEquals("", level0.getName());
      assertEquals((-2133.801F), level0.getElevation(), 0.01F);
      assertTrue(level0.isVisible());
      assertNull(wall3.getHeightAtEnd());
      assertNull(wall3.getArcExtent());
      assertNull(wall3.getRightSideColor());
      assertEquals(6566.0005F, wall3.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(4901.0F, wall3.getHeight(), 0.01F);
      assertEquals(0.0F, wall3.getLeftSideShininess(), 0.01F);
      assertFalse(wall3.isTrapezoidal());
      assertEquals((-2133.801F), wall3.getThickness(), 0.01F);
      assertNull(wall3.getLeftSideColor());
      assertEquals((-1.0F), wall3.getXEnd(), 0.01F);
      assertEquals(0.0F, wall3.getXArcCircleCenter(), 0.01F);
      assertEquals(6566.0005F, wall3.getLength(), 0.01F);
      assertEquals(0.0F, wall3.getRightSideShininess(), 0.01F);
      assertEquals((-1665.0F), wall3.getYEnd(), 0.01F);
      assertEquals(1618.0F, wall3.getYArcCircleCenter(), 0.01F);
      assertEquals(1.0F, wall3.getXStart(), 0.01F);
      assertEquals(4901.0F, wall3.getYStart(), 0.01F);
      
      float float1 = wall3.getStartPointToEndPointDistance();
      assertFalse(wall0.equals((Object)wall2));
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall0.equals((Object)wall4));
      assertFalse(wall0.equals((Object)wall3));
      assertFalse(wall3.equals((Object)wall2));
      assertFalse(wall3.equals((Object)wall0));
      assertFalse(wall3.equals((Object)wall4));
      assertNotEquals(float1, float0, 0.01F);
      assertNotSame(wall0, wall2);
      assertNotSame(wall0, wall1);
      assertNotSame(wall0, wall4);
      assertNotSame(wall0, wall3);
      assertNotSame(wall3, wall2);
      assertNotSame(wall3, wall0);
      assertNotSame(wall3, wall4);
      assertSame(wall3, wall1);
      assertEquals(6566.0005F, float1, 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(1.0F, wall0.getYEnd(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(1.0F, wall0.getXStart(), 0.01F);
      assertEquals(1.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(1.0F, wall0.getLength(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertNull(wall0.getHeight());
      assertEquals(1.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.5F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(1.0F, wall0.getYStart(), 0.01F);
      assertEquals(1.0F, wall0.getThickness(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall3.getHeightAtEnd());
      assertNull(wall3.getArcExtent());
      assertNull(wall3.getRightSideColor());
      assertEquals(6566.0005F, wall3.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(4901.0F, wall3.getHeight(), 0.01F);
      assertEquals(0.0F, wall3.getLeftSideShininess(), 0.01F);
      assertFalse(wall3.isTrapezoidal());
      assertEquals((-2133.801F), wall3.getThickness(), 0.01F);
      assertNull(wall3.getLeftSideColor());
      assertEquals((-1.0F), wall3.getXEnd(), 0.01F);
      assertEquals(0.0F, wall3.getXArcCircleCenter(), 0.01F);
      assertEquals(6566.0005F, wall3.getLength(), 0.01F);
      assertEquals(0.0F, wall3.getRightSideShininess(), 0.01F);
      assertEquals((-1665.0F), wall3.getYEnd(), 0.01F);
      assertEquals(1618.0F, wall3.getYArcCircleCenter(), 0.01F);
      assertEquals(1.0F, wall3.getXStart(), 0.01F);
      assertEquals(4901.0F, wall3.getYStart(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test163()  throws Throwable  {
      Wall wall0 = new Wall(0.1F, 0.1F, 0.1F, 0.1F, 0.1F, 0.1F);
      assertNotNull(wall0);
      assertEquals(0.1F, wall0.getHeight(), 0.01F);
      assertEquals(0.1F, wall0.getYStart(), 0.01F);
      assertEquals(0.1F, wall0.getThickness(), 0.01F);
      assertEquals(0.1F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(0.1F, wall0.getYEnd(), 0.01F);
      assertEquals(0.1F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.1F, wall0.getXStart(), 0.01F);
      assertEquals(0.1F, wall0.getXArcCircleCenter(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      
      wall0.setRightSideShininess((-1546.4F));
      assertEquals((-1546.4F), wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.1F, wall0.getHeight(), 0.01F);
      assertEquals(0.1F, wall0.getYStart(), 0.01F);
      assertEquals(0.1F, wall0.getThickness(), 0.01F);
      assertEquals(0.1F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(0.1F, wall0.getYEnd(), 0.01F);
      assertEquals(0.1F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.1F, wall0.getXStart(), 0.01F);
      assertEquals(0.1F, wall0.getXArcCircleCenter(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      
      wall0.setHeightAtEnd((Float) null);
      assertEquals((-1546.4F), wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.1F, wall0.getHeight(), 0.01F);
      assertEquals(0.1F, wall0.getYStart(), 0.01F);
      assertEquals(0.1F, wall0.getThickness(), 0.01F);
      assertEquals(0.1F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(0.1F, wall0.getYEnd(), 0.01F);
      assertEquals(0.1F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.1F, wall0.getXStart(), 0.01F);
      assertEquals(0.1F, wall0.getXArcCircleCenter(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      
      boolean boolean0 = wall0.intersectsRectangle(0.1F, 0.1F, 0.1F, 0.1F);
      assertFalse(boolean0);
      assertEquals((-1546.4F), wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.1F, wall0.getHeight(), 0.01F);
      assertEquals(0.1F, wall0.getYStart(), 0.01F);
      assertEquals(0.1F, wall0.getThickness(), 0.01F);
      assertEquals(0.1F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(0.1F, wall0.getYEnd(), 0.01F);
      assertEquals(0.1F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.1F, wall0.getXStart(), 0.01F);
      assertEquals(0.1F, wall0.getXArcCircleCenter(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
  }

  @Test(timeout = 4000)
  public void test164()  throws Throwable  {
      Wall wall0 = new Wall(16.918272F, 16.918272F, 16.918272F, 16.918272F, 16.918272F, 16.918272F);
      assertNotNull(wall0);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(16.918272F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(16.918272F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(16.918272F, wall0.getXStart(), 0.01F);
      assertEquals(16.918272F, wall0.getYStart(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(16.918272F, wall0.getThickness(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(16.918272F, wall0.getYEnd(), 0.01F);
      assertEquals(16.918272F, wall0.getHeight(), 0.01F);
      assertEquals(16.918272F, wall0.getXEnd(), 0.01F);
      
      Float float0 = new Float((double) 16.918272F);
      assertNotNull(float0);
      assertEquals(16.918272F, (float)float0, 0.01F);
      
      wall0.setArcExtent(float0);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(16.918272F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(16.918272F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(16.918272F, wall0.getXStart(), 0.01F);
      assertEquals(16.918272F, wall0.getYStart(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(16.918272F, wall0.getThickness(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals(16.918272F, wall0.getYEnd(), 0.01F);
      assertEquals(16.918272F, wall0.getArcExtent(), 0.01F);
      assertEquals(16.918272F, wall0.getHeight(), 0.01F);
      assertEquals(16.918272F, wall0.getXEnd(), 0.01F);
      
      float float1 = Float.max(16.918272F, 16.918272F);
      assertEquals(16.918272F, float1, 0.01F);
      
      float[][] floatArray0 = wall0.getPoints();
      assertNotNull(floatArray0);
      assertEquals(4, floatArray0.length);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(16.918272F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(16.918272F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(16.918272F, wall0.getXStart(), 0.01F);
      assertEquals(16.918272F, wall0.getYStart(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(16.918272F, wall0.getThickness(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals(16.918272F, wall0.getYEnd(), 0.01F);
      assertEquals(16.918272F, wall0.getArcExtent(), 0.01F);
      assertEquals(16.918272F, wall0.getHeight(), 0.01F);
      assertEquals(16.918272F, wall0.getXEnd(), 0.01F);
      
      HomeTexture homeTexture0 = wall0.getLeftSideTexture();
      assertNull(homeTexture0);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(16.918272F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(16.918272F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(16.918272F, wall0.getXStart(), 0.01F);
      assertEquals(16.918272F, wall0.getYStart(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(16.918272F, wall0.getThickness(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals(16.918272F, wall0.getYEnd(), 0.01F);
      assertEquals(16.918272F, wall0.getArcExtent(), 0.01F);
      assertEquals(16.918272F, wall0.getHeight(), 0.01F);
      assertEquals(16.918272F, wall0.getXEnd(), 0.01F);
      
      wall0.setArcExtent(float0);
      assertEquals((float)float0, (float)float1, 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(16.918272F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(16.918272F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(16.918272F, wall0.getXStart(), 0.01F);
      assertEquals(16.918272F, wall0.getYStart(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(16.918272F, wall0.getThickness(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals(16.918272F, wall0.getYEnd(), 0.01F);
      assertEquals(16.918272F, wall0.getArcExtent(), 0.01F);
      assertEquals(16.918272F, wall0.getHeight(), 0.01F);
      assertEquals(16.918272F, wall0.getXEnd(), 0.01F);
      
      float float2 = wall0.getLength();
      assertNotEquals(float2, float1, 0.01F);
      assertEquals(0.0F, float2, 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(16.918272F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(16.918272F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(16.918272F, wall0.getXStart(), 0.01F);
      assertEquals(16.918272F, wall0.getYStart(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(16.918272F, wall0.getThickness(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals(16.918272F, wall0.getYEnd(), 0.01F);
      assertEquals(16.918272F, wall0.getArcExtent(), 0.01F);
      assertEquals(16.918272F, wall0.getHeight(), 0.01F);
      assertEquals(16.918272F, wall0.getXEnd(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test165()  throws Throwable  {
      Wall wall0 = new Wall(0.1F, 0.1F, 0.1F, 0.1F, 0.1F, 0.1F);
      assertNotNull(wall0);
      assertEquals(0.1F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.1F, wall0.getYStart(), 0.01F);
      assertEquals(0.1F, wall0.getXStart(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(0.1F, wall0.getXEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.1F, wall0.getYEnd(), 0.01F);
      assertEquals(0.1F, wall0.getHeight(), 0.01F);
      assertEquals(0.1F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.1F, wall0.getThickness(), 0.01F);
      
      Level level0 = new Level("", (-1.0F), 2683.0F, 0.0F);
      assertNotNull(level0);
      assertEquals((-1.0F), level0.getElevation(), 0.01F);
      assertEquals(0.0F, level0.getHeight(), 0.01F);
      assertTrue(level0.isVisible());
      assertEquals(2683.0F, level0.getFloorThickness(), 0.01F);
      assertEquals("", level0.getName());
      
      float float0 = level0.getElevation();
      assertEquals((-1.0F), float0, 0.01F);
      assertEquals((-1.0F), level0.getElevation(), 0.01F);
      assertEquals(0.0F, level0.getHeight(), 0.01F);
      assertTrue(level0.isVisible());
      assertEquals(2683.0F, level0.getFloorThickness(), 0.01F);
      assertEquals("", level0.getName());
      
      float float1 = level0.getHeight();
      assertNotEquals(float1, float0, 0.01F);
      assertEquals(0.0F, float1, 0.01F);
      assertEquals((-1.0F), level0.getElevation(), 0.01F);
      assertEquals(0.0F, level0.getHeight(), 0.01F);
      assertTrue(level0.isVisible());
      assertEquals(2683.0F, level0.getFloorThickness(), 0.01F);
      assertEquals("", level0.getName());
      
      wall0.setLevel(level0);
      assertEquals(0.1F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.1F, wall0.getYStart(), 0.01F);
      assertEquals(0.1F, wall0.getXStart(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(0.1F, wall0.getXEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.1F, wall0.getYEnd(), 0.01F);
      assertEquals(0.1F, wall0.getHeight(), 0.01F);
      assertEquals(0.1F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.1F, wall0.getThickness(), 0.01F);
      assertEquals((-1.0F), level0.getElevation(), 0.01F);
      assertEquals(0.0F, level0.getHeight(), 0.01F);
      assertTrue(level0.isVisible());
      assertEquals(2683.0F, level0.getFloorThickness(), 0.01F);
      assertEquals("", level0.getName());
      
      LinkedList<Wall> linkedList0 = new LinkedList<Wall>();
      assertFalse(linkedList0.contains(wall0));
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      Level level1 = new Level("p;`)Y", 0.1F, 0.1F, 0.1F);
      assertFalse(level1.equals((Object)level0));
      assertNotNull(level1);
      assertEquals("p;`)Y", level1.getName());
      assertTrue(level1.isVisible());
      assertEquals(0.1F, level1.getHeight(), 0.01F);
      assertEquals(0.1F, level1.getElevation(), 0.01F);
      assertEquals(0.1F, level1.getFloorThickness(), 0.01F);
      
      level1.setElevation(0.1F);
      assertFalse(level1.equals((Object)level0));
      assertNotSame(level1, level0);
      assertEquals("p;`)Y", level1.getName());
      assertTrue(level1.isVisible());
      assertEquals(0.1F, level1.getHeight(), 0.01F);
      assertEquals(0.1F, level1.getElevation(), 0.01F);
      assertEquals(0.1F, level1.getFloorThickness(), 0.01F);
      
      boolean boolean0 = wall0.isAtLevel(level1);
      assertFalse(level1.equals((Object)level0));
      assertNotSame(level1, level0);
      assertFalse(boolean0);
      assertEquals(0.1F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.1F, wall0.getYStart(), 0.01F);
      assertEquals(0.1F, wall0.getXStart(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(0.1F, wall0.getXEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.1F, wall0.getYEnd(), 0.01F);
      assertEquals(0.1F, wall0.getHeight(), 0.01F);
      assertEquals(0.1F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.1F, wall0.getThickness(), 0.01F);
      assertEquals("p;`)Y", level1.getName());
      assertTrue(level1.isVisible());
      assertEquals(0.1F, level1.getHeight(), 0.01F);
      assertEquals(0.1F, level1.getElevation(), 0.01F);
      assertEquals(0.1F, level1.getFloorThickness(), 0.01F);
      
      Float float2 = wall0.getHeightAtEnd();
      assertNull(float2);
      assertEquals(0.1F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.1F, wall0.getYStart(), 0.01F);
      assertEquals(0.1F, wall0.getXStart(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(0.1F, wall0.getXEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.1F, wall0.getYEnd(), 0.01F);
      assertEquals(0.1F, wall0.getHeight(), 0.01F);
      assertEquals(0.1F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.1F, wall0.getThickness(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test166()  throws Throwable  {
      Wall wall0 = new Wall(0.0F, 0.0F, 0.0F, 0.0F, 0.0F);
      assertNotNull(wall0);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getHeight());
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      
      boolean boolean0 = wall0.containsWallStartAt(0.0F, 0.0F, 0.0F);
      assertFalse(boolean0);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getHeight());
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      
      wall0.setWallAtStart(wall0);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getHeight());
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      
      boolean boolean1 = wall0.containsWallEndAt(0.0F, 0.0F, 0.0F);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getHeight());
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      
      Wall wall1 = new Wall(0.0F, 4043.4763F, 0.0F, 3943.0F, 155.2F, (-1228.8142F));
      assertFalse(wall1.equals((Object)wall0));
      assertNotNull(wall1);
      assertNull(wall1.getLeftSideColor());
      assertFalse(wall1.isTrapezoidal());
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals((-1228.8142F), wall1.getHeight(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertEquals(3943.0F, wall1.getYEnd(), 0.01F);
      assertEquals(4043.4763F, wall1.getYStart(), 0.01F);
      assertEquals(3993.2383F, wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall1.getXArcCircleCenter(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals(100.47632F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(100.47632F, wall1.getLength(), 0.01F);
      assertEquals(0.0F, wall1.getXStart(), 0.01F);
      assertEquals(0.0F, wall1.getXEnd(), 0.01F);
      assertEquals(155.2F, wall1.getThickness(), 0.01F);
      
      wall0.setWallAtEnd(wall1);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall1.equals((Object)wall0));
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getHeight());
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertNull(wall1.getLeftSideColor());
      assertFalse(wall1.isTrapezoidal());
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals((-1228.8142F), wall1.getHeight(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertEquals(3943.0F, wall1.getYEnd(), 0.01F);
      assertEquals(4043.4763F, wall1.getYStart(), 0.01F);
      assertEquals(3993.2383F, wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall1.getXArcCircleCenter(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals(100.47632F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(100.47632F, wall1.getLength(), 0.01F);
      assertEquals(0.0F, wall1.getXStart(), 0.01F);
      assertEquals(0.0F, wall1.getXEnd(), 0.01F);
      assertEquals(155.2F, wall1.getThickness(), 0.01F);
      
      Wall wall2 = wall0.getWallAtStart();
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall2.equals((Object)wall1));
      assertNotNull(wall2);
      assertSame(wall0, wall2);
      assertNotSame(wall0, wall1);
      assertNotSame(wall2, wall1);
      assertSame(wall2, wall0);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getHeight());
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall2.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall2.getThickness(), 0.01F);
      assertEquals(0.0F, wall2.getYStart(), 0.01F);
      assertNull(wall2.getHeightAtEnd());
      assertEquals(0.0F, wall2.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall2.getXStart(), 0.01F);
      assertEquals(0.0F, wall2.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall2.getLength(), 0.01F);
      assertEquals(0.0F, wall2.getLeftSideShininess(), 0.01F);
      assertFalse(wall2.isTrapezoidal());
      assertNull(wall2.getLeftSideColor());
      assertEquals(0.0F, wall2.getXArcCircleCenter(), 0.01F);
      assertNull(wall2.getHeight());
      assertNull(wall2.getArcExtent());
      assertNull(wall2.getRightSideColor());
      assertEquals(0.0F, wall2.getYEnd(), 0.01F);
      assertEquals(0.0F, wall2.getXEnd(), 0.01F);
      
      wall1.setWallAtStart(wall2);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall1.equals((Object)wall2));
      assertFalse(wall1.equals((Object)wall0));
      assertFalse(wall2.equals((Object)wall1));
      assertSame(wall0, wall2);
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall2);
      assertNotSame(wall1, wall0);
      assertNotSame(wall2, wall1);
      assertSame(wall2, wall0);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getHeight());
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertNull(wall1.getLeftSideColor());
      assertFalse(wall1.isTrapezoidal());
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals((-1228.8142F), wall1.getHeight(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertEquals(3943.0F, wall1.getYEnd(), 0.01F);
      assertEquals(4043.4763F, wall1.getYStart(), 0.01F);
      assertEquals(3993.2383F, wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall1.getXArcCircleCenter(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals(100.47632F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(100.47632F, wall1.getLength(), 0.01F);
      assertEquals(0.0F, wall1.getXStart(), 0.01F);
      assertEquals(0.0F, wall1.getXEnd(), 0.01F);
      assertEquals(155.2F, wall1.getThickness(), 0.01F);
      assertEquals(0.0F, wall2.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall2.getThickness(), 0.01F);
      assertEquals(0.0F, wall2.getYStart(), 0.01F);
      assertNull(wall2.getHeightAtEnd());
      assertEquals(0.0F, wall2.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall2.getXStart(), 0.01F);
      assertEquals(0.0F, wall2.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall2.getLength(), 0.01F);
      assertEquals(0.0F, wall2.getLeftSideShininess(), 0.01F);
      assertFalse(wall2.isTrapezoidal());
      assertNull(wall2.getLeftSideColor());
      assertEquals(0.0F, wall2.getXArcCircleCenter(), 0.01F);
      assertNull(wall2.getHeight());
      assertNull(wall2.getArcExtent());
      assertNull(wall2.getRightSideColor());
      assertEquals(0.0F, wall2.getYEnd(), 0.01F);
      assertEquals(0.0F, wall2.getXEnd(), 0.01F);
      
      float[][] floatArray0 = wall0.getPoints();
      assertFalse(wall0.equals((Object)wall1));
      assertNotNull(floatArray0);
      assertEquals(4, floatArray0.length);
      assertSame(wall0, wall2);
      assertNotSame(wall0, wall1);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getHeight());
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      
      HomeTexture homeTexture0 = wall2.getRightSideTexture();
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall2.equals((Object)wall1));
      assertNull(homeTexture0);
      assertSame(wall0, wall2);
      assertNotSame(wall0, wall1);
      assertNotSame(wall2, wall1);
      assertSame(wall2, wall0);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getHeight());
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall2.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall2.getThickness(), 0.01F);
      assertEquals(0.0F, wall2.getYStart(), 0.01F);
      assertNull(wall2.getHeightAtEnd());
      assertEquals(0.0F, wall2.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall2.getXStart(), 0.01F);
      assertEquals(0.0F, wall2.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall2.getLength(), 0.01F);
      assertEquals(0.0F, wall2.getLeftSideShininess(), 0.01F);
      assertFalse(wall2.isTrapezoidal());
      assertNull(wall2.getLeftSideColor());
      assertEquals(0.0F, wall2.getXArcCircleCenter(), 0.01F);
      assertNull(wall2.getHeight());
      assertNull(wall2.getArcExtent());
      assertNull(wall2.getRightSideColor());
      assertEquals(0.0F, wall2.getYEnd(), 0.01F);
      assertEquals(0.0F, wall2.getXEnd(), 0.01F);
      
      Wall wall3 = wall2.clone();
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall2.equals((Object)wall1));
      assertFalse(wall3.equals((Object)wall2));
      assertFalse(wall3.equals((Object)wall0));
      assertFalse(wall3.equals((Object)wall1));
      assertNotNull(wall3);
      assertNotSame(wall0, wall3);
      assertSame(wall0, wall2);
      assertNotSame(wall0, wall1);
      assertNotSame(wall2, wall1);
      assertNotSame(wall2, wall3);
      assertSame(wall2, wall0);
      assertNotSame(wall3, wall2);
      assertNotSame(wall3, wall0);
      assertNotSame(wall3, wall1);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getHeight());
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall2.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall2.getThickness(), 0.01F);
      assertEquals(0.0F, wall2.getYStart(), 0.01F);
      assertNull(wall2.getHeightAtEnd());
      assertEquals(0.0F, wall2.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall2.getXStart(), 0.01F);
      assertEquals(0.0F, wall2.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall2.getLength(), 0.01F);
      assertEquals(0.0F, wall2.getLeftSideShininess(), 0.01F);
      assertFalse(wall2.isTrapezoidal());
      assertNull(wall2.getLeftSideColor());
      assertEquals(0.0F, wall2.getXArcCircleCenter(), 0.01F);
      assertNull(wall2.getHeight());
      assertNull(wall2.getArcExtent());
      assertNull(wall2.getRightSideColor());
      assertEquals(0.0F, wall2.getYEnd(), 0.01F);
      assertEquals(0.0F, wall2.getXEnd(), 0.01F);
      assertNull(wall3.getHeightAtEnd());
      assertEquals(0.0F, wall3.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall3.getHeight());
      assertEquals(0.0F, wall3.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall3.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall3.getYStart(), 0.01F);
      assertEquals(0.0F, wall3.getLeftSideShininess(), 0.01F);
      assertNull(wall3.getRightSideColor());
      assertNull(wall3.getArcExtent());
      assertEquals(0.0F, wall3.getThickness(), 0.01F);
      assertEquals(0.0F, wall3.getYEnd(), 0.01F);
      assertFalse(wall3.isTrapezoidal());
      assertEquals(0.0F, wall3.getLength(), 0.01F);
      assertEquals(0.0F, wall3.getXEnd(), 0.01F);
      assertEquals(0.0F, wall3.getXStart(), 0.01F);
      assertNull(wall3.getLeftSideColor());
      assertEquals(0.0F, wall3.getRightSideShininess(), 0.01F);
      
      TextureImage textureImage0 = wall0.getPattern();
      assertFalse(wall0.equals((Object)wall3));
      assertFalse(wall0.equals((Object)wall1));
      assertNull(textureImage0);
      assertNotSame(wall0, wall3);
      assertSame(wall0, wall2);
      assertNotSame(wall0, wall1);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getHeight());
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertNull(wall0.getLeftSideColor());
  }

  @Test(timeout = 4000)
  public void test167()  throws Throwable  {
      Wall wall0 = new Wall(2589.8674F, 0.0F, 0.0F, 0.0F, 0.0F);
      assertNotNull(wall0);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(2589.8674F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals(2589.8674F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(1294.9337F, wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(2589.8674F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getHeight());
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getLeftSideColor());
      assertFalse(wall0.isTrapezoidal());
      
      Wall wall1 = wall0.clone();
      assertFalse(wall1.equals((Object)wall0));
      assertNotNull(wall1);
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(2589.8674F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals(2589.8674F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(1294.9337F, wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(2589.8674F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getHeight());
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getLeftSideColor());
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall1.getXEnd(), 0.01F);
      assertEquals(0.0F, wall1.getYEnd(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals(0.0F, wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(2589.8674F, wall1.getLength(), 0.01F);
      assertNull(wall1.getHeight());
      assertNull(wall1.getLeftSideColor());
      assertEquals(1294.9337F, wall1.getXArcCircleCenter(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall1.getYStart(), 0.01F);
      assertEquals(0.0F, wall1.getThickness(), 0.01F);
      assertEquals(2589.8674F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(2589.8674F, wall1.getXStart(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      
      Wall wall2 = wall0.clone();
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall2.equals((Object)wall1));
      assertFalse(wall2.equals((Object)wall0));
      assertNotNull(wall2);
      assertNotSame(wall0, wall2);
      assertNotSame(wall0, wall1);
      assertNotSame(wall2, wall1);
      assertNotSame(wall2, wall0);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(2589.8674F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals(2589.8674F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(1294.9337F, wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(2589.8674F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getHeight());
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getLeftSideColor());
      assertFalse(wall0.isTrapezoidal());
      assertEquals(1294.9337F, wall2.getXArcCircleCenter(), 0.01F);
      assertNull(wall2.getArcExtent());
      assertNull(wall2.getRightSideColor());
      assertEquals(0.0F, wall2.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall2.getYStart(), 0.01F);
      assertEquals(0.0F, wall2.getThickness(), 0.01F);
      assertEquals(2589.8674F, wall2.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(2589.8674F, wall2.getXStart(), 0.01F);
      assertNull(wall2.getHeightAtEnd());
      assertEquals(0.0F, wall2.getXEnd(), 0.01F);
      assertEquals(0.0F, wall2.getYEnd(), 0.01F);
      assertEquals(0.0F, wall2.getLeftSideShininess(), 0.01F);
      assertFalse(wall2.isTrapezoidal());
      assertEquals(2589.8674F, wall2.getLength(), 0.01F);
      assertEquals(0.0F, wall2.getYArcCircleCenter(), 0.01F);
      assertNull(wall2.getHeight());
      assertNull(wall2.getLeftSideColor());
      
      boolean boolean0 = wall2.containsWallEndAt(2589.8674F, 0.0F, 0.0F);
      assertFalse(wall0.equals((Object)wall2));
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall2.equals((Object)wall1));
      assertFalse(wall2.equals((Object)wall0));
      assertNotSame(wall0, wall2);
      assertNotSame(wall0, wall1);
      assertNotSame(wall2, wall1);
      assertNotSame(wall2, wall0);
      assertFalse(boolean0);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(2589.8674F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals(2589.8674F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(1294.9337F, wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(2589.8674F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getHeight());
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getLeftSideColor());
      assertFalse(wall0.isTrapezoidal());
      assertEquals(1294.9337F, wall2.getXArcCircleCenter(), 0.01F);
      assertNull(wall2.getArcExtent());
      assertNull(wall2.getRightSideColor());
      assertEquals(0.0F, wall2.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall2.getYStart(), 0.01F);
      assertEquals(0.0F, wall2.getThickness(), 0.01F);
      assertEquals(2589.8674F, wall2.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(2589.8674F, wall2.getXStart(), 0.01F);
      assertNull(wall2.getHeightAtEnd());
      assertEquals(0.0F, wall2.getXEnd(), 0.01F);
      assertEquals(0.0F, wall2.getYEnd(), 0.01F);
      assertEquals(0.0F, wall2.getLeftSideShininess(), 0.01F);
      assertFalse(wall2.isTrapezoidal());
      assertEquals(2589.8674F, wall2.getLength(), 0.01F);
      assertEquals(0.0F, wall2.getYArcCircleCenter(), 0.01F);
      assertNull(wall2.getHeight());
      assertNull(wall2.getLeftSideColor());
      
      HomeTexture homeTexture0 = wall0.getRightSideTexture();
      assertFalse(wall0.equals((Object)wall2));
      assertFalse(wall0.equals((Object)wall1));
      assertNull(homeTexture0);
      assertNotSame(wall0, wall2);
      assertNotSame(wall0, wall1);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(2589.8674F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals(2589.8674F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(1294.9337F, wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(2589.8674F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getHeight());
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getLeftSideColor());
      assertFalse(wall0.isTrapezoidal());
      
      PropertyChangeListener propertyChangeListener0 = mock(PropertyChangeListener.class, new ViolatedAssumptionAnswer());
      PropertyChangeListenerProxy propertyChangeListenerProxy0 = new PropertyChangeListenerProxy("MHT:~~t+i8$W.8d)0X", propertyChangeListener0);
      assertNotNull(propertyChangeListenerProxy0);
      assertEquals("MHT:~~t+i8$W.8d)0X", propertyChangeListenerProxy0.getPropertyName());
      
      wall1.addPropertyChangeListener(propertyChangeListenerProxy0);
      assertFalse(wall0.equals((Object)wall2));
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall1.equals((Object)wall0));
      assertFalse(wall1.equals((Object)wall2));
      assertNotSame(wall0, wall2);
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      assertNotSame(wall1, wall2);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(2589.8674F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals(2589.8674F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(1294.9337F, wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(2589.8674F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getHeight());
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getLeftSideColor());
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall1.getXEnd(), 0.01F);
      assertEquals(0.0F, wall1.getYEnd(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals(0.0F, wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(2589.8674F, wall1.getLength(), 0.01F);
      assertNull(wall1.getHeight());
      assertNull(wall1.getLeftSideColor());
      assertEquals(1294.9337F, wall1.getXArcCircleCenter(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall1.getYStart(), 0.01F);
      assertEquals(0.0F, wall1.getThickness(), 0.01F);
      assertEquals(2589.8674F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(2589.8674F, wall1.getXStart(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals("MHT:~~t+i8$W.8d)0X", propertyChangeListenerProxy0.getPropertyName());
      
      float float0 = wall1.getXArcCircleCenter();
      assertFalse(wall0.equals((Object)wall2));
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall1.equals((Object)wall0));
      assertFalse(wall1.equals((Object)wall2));
      assertNotSame(wall0, wall2);
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      assertNotSame(wall1, wall2);
      assertEquals(1294.9337F, float0, 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(2589.8674F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals(2589.8674F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(1294.9337F, wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(2589.8674F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getHeight());
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getLeftSideColor());
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall1.getXEnd(), 0.01F);
      assertEquals(0.0F, wall1.getYEnd(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals(0.0F, wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(2589.8674F, wall1.getLength(), 0.01F);
      assertNull(wall1.getHeight());
      assertNull(wall1.getLeftSideColor());
      assertEquals(1294.9337F, wall1.getXArcCircleCenter(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall1.getYStart(), 0.01F);
      assertEquals(0.0F, wall1.getThickness(), 0.01F);
      assertEquals(2589.8674F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(2589.8674F, wall1.getXStart(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      
      Float float1 = wall0.getHeightAtEnd();
      assertFalse(wall0.equals((Object)wall2));
      assertFalse(wall0.equals((Object)wall1));
      assertNull(float1);
      assertNotSame(wall0, wall2);
      assertNotSame(wall0, wall1);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(2589.8674F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals(2589.8674F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(1294.9337F, wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(2589.8674F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getHeight());
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getLeftSideColor());
      assertFalse(wall0.isTrapezoidal());
      
      float float2 = wall0.getThickness();
      assertFalse(wall0.equals((Object)wall2));
      assertFalse(wall0.equals((Object)wall1));
      assertNotEquals(float2, float0, 0.01F);
      assertNotSame(wall0, wall2);
      assertNotSame(wall0, wall1);
      assertEquals(0.0F, float2, 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(2589.8674F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals(2589.8674F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(1294.9337F, wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(2589.8674F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getHeight());
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getLeftSideColor());
      assertFalse(wall0.isTrapezoidal());
      
      float float3 = wall1.getLeftSideShininess();
      assertFalse(wall0.equals((Object)wall2));
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall1.equals((Object)wall0));
      assertFalse(wall1.equals((Object)wall2));
      assertNotEquals(float3, float0, 0.01F);
      assertEquals(float3, float2, 0.01F);
      assertNotSame(wall0, wall2);
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      assertNotSame(wall1, wall2);
      assertEquals(0.0F, float3, 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(2589.8674F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals(2589.8674F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(1294.9337F, wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(2589.8674F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getHeight());
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getLeftSideColor());
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall1.getXEnd(), 0.01F);
      assertEquals(0.0F, wall1.getYEnd(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals(0.0F, wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(2589.8674F, wall1.getLength(), 0.01F);
      assertNull(wall1.getHeight());
      assertNull(wall1.getLeftSideColor());
      assertEquals(1294.9337F, wall1.getXArcCircleCenter(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall1.getYStart(), 0.01F);
      assertEquals(0.0F, wall1.getThickness(), 0.01F);
      assertEquals(2589.8674F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(2589.8674F, wall1.getXStart(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      
      wall1.setRightSideShininess((-1.0F));
      assertFalse(wall0.equals((Object)wall2));
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall1.equals((Object)wall0));
      assertFalse(wall1.equals((Object)wall2));
      assertNotSame(wall0, wall2);
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      assertNotSame(wall1, wall2);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(2589.8674F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals(2589.8674F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(1294.9337F, wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(2589.8674F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getHeight());
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getLeftSideColor());
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall1.getXEnd(), 0.01F);
      assertEquals(0.0F, wall1.getYEnd(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals(0.0F, wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(2589.8674F, wall1.getLength(), 0.01F);
      assertNull(wall1.getHeight());
      assertNull(wall1.getLeftSideColor());
      assertEquals(1294.9337F, wall1.getXArcCircleCenter(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertEquals((-1.0F), wall1.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall1.getYStart(), 0.01F);
      assertEquals(0.0F, wall1.getThickness(), 0.01F);
      assertEquals(2589.8674F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(2589.8674F, wall1.getXStart(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      
      wall0.setRightSideShininess(0.0F);
      assertFalse(wall0.equals((Object)wall2));
      assertFalse(wall0.equals((Object)wall1));
      assertNotSame(wall0, wall2);
      assertNotSame(wall0, wall1);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(2589.8674F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals(2589.8674F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(1294.9337F, wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(2589.8674F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getHeight());
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getLeftSideColor());
      assertFalse(wall0.isTrapezoidal());
      
      boolean boolean1 = wall0.containsPoint((-913.727F), 0.0F, 1014.9F);
      assertFalse(wall0.equals((Object)wall2));
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(boolean1 == boolean0);
      assertNotSame(wall0, wall2);
      assertNotSame(wall0, wall1);
      assertTrue(boolean1);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(2589.8674F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals(2589.8674F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(1294.9337F, wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(2589.8674F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getHeight());
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getLeftSideColor());
      assertFalse(wall0.isTrapezoidal());
      
      wall1.setPattern((TextureImage) null);
      assertFalse(wall0.equals((Object)wall2));
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall1.equals((Object)wall0));
      assertFalse(wall1.equals((Object)wall2));
      assertNotSame(wall0, wall2);
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      assertNotSame(wall1, wall2);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(2589.8674F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals(2589.8674F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(1294.9337F, wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(2589.8674F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getHeight());
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getLeftSideColor());
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall1.getXEnd(), 0.01F);
      assertEquals(0.0F, wall1.getYEnd(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals(0.0F, wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(2589.8674F, wall1.getLength(), 0.01F);
      assertNull(wall1.getHeight());
      assertNull(wall1.getLeftSideColor());
      assertEquals(1294.9337F, wall1.getXArcCircleCenter(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertEquals((-1.0F), wall1.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall1.getYStart(), 0.01F);
      assertEquals(0.0F, wall1.getThickness(), 0.01F);
      assertEquals(2589.8674F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(2589.8674F, wall1.getXStart(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      
      Float float4 = wall0.getHeight();
      assertFalse(wall0.equals((Object)wall2));
      assertFalse(wall0.equals((Object)wall1));
      assertNull(float4);
      assertNotSame(wall0, wall2);
      assertNotSame(wall0, wall1);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(2589.8674F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals(2589.8674F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(1294.9337F, wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(2589.8674F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getHeight());
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getLeftSideColor());
      assertFalse(wall0.isTrapezoidal());
      
      LinkedList<Wall> linkedList0 = new LinkedList<Wall>();
      assertFalse(linkedList0.contains(wall1));
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      float float5 = Float.min((-2078.415F), 0.0F);
      assertNotEquals(float5, float3, 0.01F);
      assertNotEquals(float5, float2, 0.01F);
      assertNotEquals(float5, float0, 0.01F);
      assertEquals((-2078.415F), float5, 0.01F);
      
      List<Wall> list0 = Wall.clone((List<Wall>) linkedList0);
      assertFalse(linkedList0.contains(wall1));
      assertFalse(list0.contains(wall1));
      assertNotNull(list0);
      assertEquals(0, linkedList0.size());
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      
      wall2.setRightSideTexture((HomeTexture) null);
      assertFalse(wall0.equals((Object)wall2));
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall2.equals((Object)wall1));
      assertFalse(wall2.equals((Object)wall0));
      assertNotSame(wall0, wall2);
      assertNotSame(wall0, wall1);
      assertNotSame(wall2, wall1);
      assertNotSame(wall2, wall0);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(2589.8674F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals(2589.8674F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(1294.9337F, wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(2589.8674F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getHeight());
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getLeftSideColor());
      assertFalse(wall0.isTrapezoidal());
      assertEquals(1294.9337F, wall2.getXArcCircleCenter(), 0.01F);
      assertNull(wall2.getArcExtent());
      assertNull(wall2.getRightSideColor());
      assertEquals(0.0F, wall2.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall2.getYStart(), 0.01F);
      assertEquals(0.0F, wall2.getThickness(), 0.01F);
      assertEquals(2589.8674F, wall2.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(2589.8674F, wall2.getXStart(), 0.01F);
      assertNull(wall2.getHeightAtEnd());
      assertEquals(0.0F, wall2.getXEnd(), 0.01F);
      assertEquals(0.0F, wall2.getYEnd(), 0.01F);
      assertEquals(0.0F, wall2.getLeftSideShininess(), 0.01F);
      assertFalse(wall2.isTrapezoidal());
      assertEquals(2589.8674F, wall2.getLength(), 0.01F);
      assertEquals(0.0F, wall2.getYArcCircleCenter(), 0.01F);
      assertNull(wall2.getHeight());
      assertNull(wall2.getLeftSideColor());
      
      Wall.Property[] wall_PropertyArray0 = Wall.Property.values();
      assertNotNull(wall_PropertyArray0);
      assertEquals(18, wall_PropertyArray0.length);
      
      wall2.setArcExtent((Float) null);
      assertFalse(wall0.equals((Object)wall2));
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall2.equals((Object)wall1));
      assertFalse(wall2.equals((Object)wall0));
      assertNotSame(wall0, wall2);
      assertNotSame(wall0, wall1);
      assertNotSame(wall2, wall1);
      assertNotSame(wall2, wall0);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(2589.8674F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals(2589.8674F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(1294.9337F, wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(2589.8674F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getHeight());
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getLeftSideColor());
      assertFalse(wall0.isTrapezoidal());
      assertEquals(1294.9337F, wall2.getXArcCircleCenter(), 0.01F);
      assertNull(wall2.getArcExtent());
      assertNull(wall2.getRightSideColor());
      assertEquals(0.0F, wall2.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall2.getYStart(), 0.01F);
      assertEquals(0.0F, wall2.getThickness(), 0.01F);
      assertEquals(2589.8674F, wall2.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(2589.8674F, wall2.getXStart(), 0.01F);
      assertNull(wall2.getHeightAtEnd());
      assertEquals(0.0F, wall2.getXEnd(), 0.01F);
      assertEquals(0.0F, wall2.getYEnd(), 0.01F);
      assertEquals(0.0F, wall2.getLeftSideShininess(), 0.01F);
      assertFalse(wall2.isTrapezoidal());
      assertEquals(2589.8674F, wall2.getLength(), 0.01F);
      assertEquals(0.0F, wall2.getYArcCircleCenter(), 0.01F);
      assertNull(wall2.getHeight());
      assertNull(wall2.getLeftSideColor());
      
      float float6 = wall1.getYStart();
      assertFalse(wall0.equals((Object)wall2));
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall1.equals((Object)wall0));
      assertFalse(wall1.equals((Object)wall2));
      assertEquals(float6, float2, 0.01F);
      assertNotEquals(float6, float5, 0.01F);
      assertEquals(float6, float3, 0.01F);
      assertNotEquals(float6, float0, 0.01F);
      assertNotSame(wall0, wall2);
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      assertNotSame(wall1, wall2);
      assertEquals(0.0F, float6, 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(2589.8674F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals(2589.8674F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(1294.9337F, wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(2589.8674F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getHeight());
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getLeftSideColor());
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall1.getXEnd(), 0.01F);
      assertEquals(0.0F, wall1.getYEnd(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals(0.0F, wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(2589.8674F, wall1.getLength(), 0.01F);
      assertNull(wall1.getHeight());
      assertNull(wall1.getLeftSideColor());
      assertEquals(1294.9337F, wall1.getXArcCircleCenter(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertEquals((-1.0F), wall1.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall1.getYStart(), 0.01F);
      assertEquals(0.0F, wall1.getThickness(), 0.01F);
      assertEquals(2589.8674F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(2589.8674F, wall1.getXStart(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      
      Wall wall3 = wall2.clone();
      assertFalse(wall0.equals((Object)wall2));
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall2.equals((Object)wall1));
      assertFalse(wall2.equals((Object)wall0));
      assertFalse(wall3.equals((Object)wall2));
      assertFalse(wall3.equals((Object)wall1));
      assertFalse(wall3.equals((Object)wall0));
      assertNotNull(wall3);
      assertNotSame(wall0, wall2);
      assertNotSame(wall0, wall3);
      assertNotSame(wall0, wall1);
      assertNotSame(wall2, wall1);
      assertNotSame(wall2, wall3);
      assertNotSame(wall2, wall0);
      assertNotSame(wall3, wall2);
      assertNotSame(wall3, wall1);
      assertNotSame(wall3, wall0);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(2589.8674F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals(2589.8674F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(1294.9337F, wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(2589.8674F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getHeight());
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getLeftSideColor());
      assertFalse(wall0.isTrapezoidal());
      assertEquals(1294.9337F, wall2.getXArcCircleCenter(), 0.01F);
      assertNull(wall2.getArcExtent());
      assertNull(wall2.getRightSideColor());
      assertEquals(0.0F, wall2.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall2.getYStart(), 0.01F);
      assertEquals(0.0F, wall2.getThickness(), 0.01F);
      assertEquals(2589.8674F, wall2.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(2589.8674F, wall2.getXStart(), 0.01F);
      assertNull(wall2.getHeightAtEnd());
      assertEquals(0.0F, wall2.getXEnd(), 0.01F);
      assertEquals(0.0F, wall2.getYEnd(), 0.01F);
      assertEquals(0.0F, wall2.getLeftSideShininess(), 0.01F);
      assertFalse(wall2.isTrapezoidal());
      assertEquals(2589.8674F, wall2.getLength(), 0.01F);
      assertEquals(0.0F, wall2.getYArcCircleCenter(), 0.01F);
      assertNull(wall2.getHeight());
      assertNull(wall2.getLeftSideColor());
      assertEquals(2589.8674F, wall3.getXStart(), 0.01F);
      assertEquals(0.0F, wall3.getThickness(), 0.01F);
      assertEquals(0.0F, wall3.getYEnd(), 0.01F);
      assertEquals(0.0F, wall3.getXEnd(), 0.01F);
      assertEquals(0.0F, wall3.getYStart(), 0.01F);
      assertEquals(0.0F, wall3.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall3.getLeftSideShininess(), 0.01F);
      assertEquals(2589.8674F, wall3.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall3.getArcExtent());
      assertNull(wall3.getRightSideColor());
      assertEquals(0.0F, wall3.getRightSideShininess(), 0.01F);
      assertNull(wall3.getHeight());
      assertEquals(1294.9337F, wall3.getXArcCircleCenter(), 0.01F);
      assertEquals(2589.8674F, wall3.getLength(), 0.01F);
      assertNull(wall3.getHeightAtEnd());
      assertNull(wall3.getLeftSideColor());
      assertFalse(wall3.isTrapezoidal());
      
      float float7 = wall2.getYStart();
      assertFalse(wall0.equals((Object)wall2));
      assertFalse(wall0.equals((Object)wall3));
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall2.equals((Object)wall1));
      assertFalse(wall2.equals((Object)wall3));
      assertFalse(wall2.equals((Object)wall0));
      assertEquals(float7, float3, 0.01F);
      assertEquals(float7, float6, 0.01F);
      assertNotEquals(float7, float5, 0.01F);
      assertNotEquals(float7, float0, 0.01F);
      assertEquals(float7, float2, 0.01F);
      assertNotSame(wall0, wall2);
      assertNotSame(wall0, wall3);
      assertNotSame(wall0, wall1);
      assertNotSame(wall2, wall1);
      assertNotSame(wall2, wall3);
      assertNotSame(wall2, wall0);
      assertEquals(0.0F, float7, 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(2589.8674F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals(2589.8674F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(1294.9337F, wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(2589.8674F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getHeight());
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getLeftSideColor());
      assertFalse(wall0.isTrapezoidal());
      assertEquals(1294.9337F, wall2.getXArcCircleCenter(), 0.01F);
      assertNull(wall2.getArcExtent());
      assertNull(wall2.getRightSideColor());
      assertEquals(0.0F, wall2.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall2.getYStart(), 0.01F);
      assertEquals(0.0F, wall2.getThickness(), 0.01F);
      assertEquals(2589.8674F, wall2.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(2589.8674F, wall2.getXStart(), 0.01F);
      assertNull(wall2.getHeightAtEnd());
      assertEquals(0.0F, wall2.getXEnd(), 0.01F);
      assertEquals(0.0F, wall2.getYEnd(), 0.01F);
      assertEquals(0.0F, wall2.getLeftSideShininess(), 0.01F);
      assertFalse(wall2.isTrapezoidal());
      assertEquals(2589.8674F, wall2.getLength(), 0.01F);
      assertEquals(0.0F, wall2.getYArcCircleCenter(), 0.01F);
      assertNull(wall2.getHeight());
      assertNull(wall2.getLeftSideColor());
      
      wall1.setWallAtStart(wall2);
      assertFalse(wall0.equals((Object)wall2));
      assertFalse(wall0.equals((Object)wall3));
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall1.equals((Object)wall3));
      assertFalse(wall1.equals((Object)wall0));
      assertFalse(wall1.equals((Object)wall2));
      assertFalse(wall2.equals((Object)wall1));
      assertFalse(wall2.equals((Object)wall3));
      assertFalse(wall2.equals((Object)wall0));
      assertNotSame(wall0, wall2);
      assertNotSame(wall0, wall3);
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall3);
      assertNotSame(wall1, wall0);
      assertNotSame(wall1, wall2);
      assertNotSame(wall2, wall1);
      assertNotSame(wall2, wall3);
      assertNotSame(wall2, wall0);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(2589.8674F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals(2589.8674F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(1294.9337F, wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(2589.8674F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getHeight());
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getLeftSideColor());
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall1.getXEnd(), 0.01F);
      assertEquals(0.0F, wall1.getYEnd(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals(0.0F, wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(2589.8674F, wall1.getLength(), 0.01F);
      assertNull(wall1.getHeight());
      assertNull(wall1.getLeftSideColor());
      assertEquals(1294.9337F, wall1.getXArcCircleCenter(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertEquals((-1.0F), wall1.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall1.getYStart(), 0.01F);
      assertEquals(0.0F, wall1.getThickness(), 0.01F);
      assertEquals(2589.8674F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(2589.8674F, wall1.getXStart(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals(1294.9337F, wall2.getXArcCircleCenter(), 0.01F);
      assertNull(wall2.getArcExtent());
      assertNull(wall2.getRightSideColor());
      assertEquals(0.0F, wall2.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall2.getYStart(), 0.01F);
      assertEquals(0.0F, wall2.getThickness(), 0.01F);
      assertEquals(2589.8674F, wall2.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(2589.8674F, wall2.getXStart(), 0.01F);
      assertNull(wall2.getHeightAtEnd());
      assertEquals(0.0F, wall2.getXEnd(), 0.01F);
      assertEquals(0.0F, wall2.getYEnd(), 0.01F);
      assertEquals(0.0F, wall2.getLeftSideShininess(), 0.01F);
      assertFalse(wall2.isTrapezoidal());
      assertEquals(2589.8674F, wall2.getLength(), 0.01F);
      assertEquals(0.0F, wall2.getYArcCircleCenter(), 0.01F);
      assertNull(wall2.getHeight());
      assertNull(wall2.getLeftSideColor());
      
      wall0.setYStart(0.0F);
      assertFalse(wall0.equals((Object)wall2));
      assertFalse(wall0.equals((Object)wall3));
      assertFalse(wall0.equals((Object)wall1));
      assertNotSame(wall0, wall2);
      assertNotSame(wall0, wall3);
      assertNotSame(wall0, wall1);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(2589.8674F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals(2589.8674F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(1294.9337F, wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(2589.8674F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getHeight());
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getLeftSideColor());
      assertFalse(wall0.isTrapezoidal());
      
      wall2.setHeight((Float) null);
      assertFalse(wall0.equals((Object)wall2));
      assertFalse(wall0.equals((Object)wall3));
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall2.equals((Object)wall1));
      assertFalse(wall2.equals((Object)wall3));
      assertFalse(wall2.equals((Object)wall0));
      assertNotSame(wall0, wall2);
      assertNotSame(wall0, wall3);
      assertNotSame(wall0, wall1);
      assertNotSame(wall2, wall1);
      assertNotSame(wall2, wall3);
      assertNotSame(wall2, wall0);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(2589.8674F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals(2589.8674F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(1294.9337F, wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(2589.8674F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getHeight());
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getLeftSideColor());
      assertFalse(wall0.isTrapezoidal());
      assertEquals(1294.9337F, wall2.getXArcCircleCenter(), 0.01F);
      assertNull(wall2.getArcExtent());
      assertNull(wall2.getRightSideColor());
      assertEquals(0.0F, wall2.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall2.getYStart(), 0.01F);
      assertEquals(0.0F, wall2.getThickness(), 0.01F);
      assertEquals(2589.8674F, wall2.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(2589.8674F, wall2.getXStart(), 0.01F);
      assertNull(wall2.getHeightAtEnd());
      assertEquals(0.0F, wall2.getXEnd(), 0.01F);
      assertEquals(0.0F, wall2.getYEnd(), 0.01F);
      assertEquals(0.0F, wall2.getLeftSideShininess(), 0.01F);
      assertFalse(wall2.isTrapezoidal());
      assertEquals(2589.8674F, wall2.getLength(), 0.01F);
      assertEquals(0.0F, wall2.getYArcCircleCenter(), 0.01F);
      assertNull(wall2.getHeight());
      assertNull(wall2.getLeftSideColor());
  }

  @Test(timeout = 4000)
  public void test168()  throws Throwable  {
      Wall wall0 = new Wall(0.0F, 0.0F, 0.0F, 0.1F, 0.0F);
      assertNotNull(wall0);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.1F, wall0.getYEnd(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertEquals(0.05F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.1F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals(0.1F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getHeight());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      
      boolean boolean0 = wall0.containsWallStartAt(0.1F, 0.0F, 0.1F);
      assertTrue(boolean0);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.1F, wall0.getYEnd(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertEquals(0.05F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.1F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals(0.1F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getHeight());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      
      wall0.setWallAtStart(wall0);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.1F, wall0.getYEnd(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertEquals(0.05F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.1F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals(0.1F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getHeight());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      
      boolean boolean1 = wall0.containsPoint(0.0F, 0.0F, 0.0F);
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.1F, wall0.getYEnd(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertEquals(0.05F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.1F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals(0.1F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getHeight());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      
      Wall wall1 = new Wall(0.0F, 4043.4763F, 0.1F, 3943.0F, 155.2F, (-1228.8142F));
      assertFalse(wall1.equals((Object)wall0));
      assertNotNull(wall1);
      assertEquals(0.0F, wall1.getXStart(), 0.01F);
      assertEquals(4043.4763F, wall1.getYStart(), 0.01F);
      assertEquals(155.2F, wall1.getThickness(), 0.01F);
      assertEquals(0.1F, wall1.getXEnd(), 0.01F);
      assertEquals(100.47637F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(3943.0F, wall1.getYEnd(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertEquals((-1228.8142F), wall1.getHeight(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals(3993.2383F, wall1.getYArcCircleCenter(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertNull(wall1.getHeightAtEnd());
      assertEquals(100.47637F, wall1.getLength(), 0.01F);
      assertEquals(0.05F, wall1.getXArcCircleCenter(), 0.01F);
      
      float float0 = wall1.getXArcCircleCenter();
      assertFalse(wall1.equals((Object)wall0));
      assertNotSame(wall1, wall0);
      assertEquals(0.05F, float0, 0.01F);
      assertEquals(0.0F, wall1.getXStart(), 0.01F);
      assertEquals(4043.4763F, wall1.getYStart(), 0.01F);
      assertEquals(155.2F, wall1.getThickness(), 0.01F);
      assertEquals(0.1F, wall1.getXEnd(), 0.01F);
      assertEquals(100.47637F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(3943.0F, wall1.getYEnd(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertEquals((-1228.8142F), wall1.getHeight(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals(3993.2383F, wall1.getYArcCircleCenter(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertNull(wall1.getHeightAtEnd());
      assertEquals(100.47637F, wall1.getLength(), 0.01F);
      assertEquals(0.05F, wall1.getXArcCircleCenter(), 0.01F);
      
      wall1.setYStart((-1097.3007F));
      assertFalse(wall1.equals((Object)wall0));
      assertNotSame(wall1, wall0);
      assertEquals(0.0F, wall1.getXStart(), 0.01F);
      assertEquals((-1097.3007F), wall1.getYStart(), 0.01F);
      assertEquals(1422.8496F, wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(5040.301F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(155.2F, wall1.getThickness(), 0.01F);
      assertEquals(0.1F, wall1.getXEnd(), 0.01F);
      assertEquals(3943.0F, wall1.getYEnd(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals(5040.301F, wall1.getLength(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertEquals((-1228.8142F), wall1.getHeight(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertNull(wall1.getHeightAtEnd());
      assertEquals(0.05F, wall1.getXArcCircleCenter(), 0.01F);
      
      HomeTexture homeTexture0 = wall0.getRightSideTexture();
      assertFalse(wall0.equals((Object)wall1));
      assertNull(homeTexture0);
      assertNotSame(wall0, wall1);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.1F, wall0.getYEnd(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertEquals(0.05F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.1F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals(0.1F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getHeight());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      
      Integer integer0 = new Integer(1291);
      assertNotNull(integer0);
      assertEquals(1291, (int)integer0);
      
      Wall wall2 = wall0.getWallAtStart();
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall2.equals((Object)wall1));
      assertNotNull(wall2);
      assertSame(wall0, wall2);
      assertNotSame(wall0, wall1);
      assertNotSame(wall2, wall1);
      assertSame(wall2, wall0);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.1F, wall0.getYEnd(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertEquals(0.05F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.1F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals(0.1F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getHeight());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall2.getLeftSideShininess(), 0.01F);
      assertNull(wall2.getLeftSideColor());
      assertEquals(0.1F, wall2.getYEnd(), 0.01F);
      assertEquals(0.0F, wall2.getXEnd(), 0.01F);
      assertFalse(wall2.isTrapezoidal());
      assertEquals(0.0F, wall2.getRightSideShininess(), 0.01F);
      assertEquals(0.1F, wall2.getLength(), 0.01F);
      assertNull(wall2.getHeight());
      assertEquals(0.05F, wall2.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall2.getXStart(), 0.01F);
      assertEquals(0.1F, wall2.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall2.getXArcCircleCenter(), 0.01F);
      assertNull(wall2.getArcExtent());
      assertNull(wall2.getRightSideColor());
      assertNull(wall2.getHeightAtEnd());
      assertEquals(0.0F, wall2.getYStart(), 0.01F);
      assertEquals(0.0F, wall2.getThickness(), 0.01F);
      
      wall2.setLeftSideColor((Integer) null);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall2.equals((Object)wall1));
      assertSame(wall0, wall2);
      assertNotSame(wall0, wall1);
      assertNotSame(wall2, wall1);
      assertSame(wall2, wall0);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.1F, wall0.getYEnd(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertEquals(0.05F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.1F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals(0.1F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getHeight());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall2.getLeftSideShininess(), 0.01F);
      assertNull(wall2.getLeftSideColor());
      assertEquals(0.1F, wall2.getYEnd(), 0.01F);
      assertEquals(0.0F, wall2.getXEnd(), 0.01F);
      assertFalse(wall2.isTrapezoidal());
      assertEquals(0.0F, wall2.getRightSideShininess(), 0.01F);
      assertEquals(0.1F, wall2.getLength(), 0.01F);
      assertNull(wall2.getHeight());
      assertEquals(0.05F, wall2.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall2.getXStart(), 0.01F);
      assertEquals(0.1F, wall2.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall2.getXArcCircleCenter(), 0.01F);
      assertNull(wall2.getArcExtent());
      assertNull(wall2.getRightSideColor());
      assertNull(wall2.getHeightAtEnd());
      assertEquals(0.0F, wall2.getYStart(), 0.01F);
      assertEquals(0.0F, wall2.getThickness(), 0.01F);
      
      HomeTexture homeTexture1 = wall0.getLeftSideTexture();
      assertFalse(wall0.equals((Object)wall1));
      assertNull(homeTexture1);
      assertSame(wall0, wall2);
      assertNotSame(wall0, wall1);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.1F, wall0.getYEnd(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertEquals(0.05F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.1F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals(0.1F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getHeight());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test169()  throws Throwable  {
      Wall wall0 = new Wall(2766.8726F, (-1476.5521F), 2766.8726F, 2766.8726F, 2766.8726F);
      assertNotNull(wall0);
      assertEquals(2766.8726F, wall0.getYEnd(), 0.01F);
      assertEquals(2766.8726F, wall0.getXEnd(), 0.01F);
      assertEquals(4243.425F, wall0.getLength(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(2766.8726F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(2766.8726F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(645.1602F, wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertNull(wall0.getHeight());
      assertFalse(wall0.isTrapezoidal());
      assertEquals(2766.8726F, wall0.getXStart(), 0.01F);
      assertEquals((-1476.5521F), wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(4243.425F, wall0.getStartPointToEndPointDistance(), 0.01F);
      
      wall0.setXEnd(0.0F);
      assertEquals(2766.8726F, wall0.getYEnd(), 0.01F);
      assertEquals(5065.791F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(1383.4363F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(2766.8726F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(645.1602F, wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertNull(wall0.getHeight());
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(2766.8726F, wall0.getXStart(), 0.01F);
      assertEquals((-1476.5521F), wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(5065.791F, wall0.getLength(), 0.01F);
      
      Float float0 = wall0.getArcExtent();
      assertNull(float0);
      assertEquals(2766.8726F, wall0.getYEnd(), 0.01F);
      assertEquals(5065.791F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(1383.4363F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(2766.8726F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(645.1602F, wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertNull(wall0.getHeight());
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(2766.8726F, wall0.getXStart(), 0.01F);
      assertEquals((-1476.5521F), wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(5065.791F, wall0.getLength(), 0.01F);
      
      boolean boolean0 = wall0.containsPoint((-808.0F), 2213.745F, 445.4F);
      assertTrue(boolean0);
      assertEquals(2766.8726F, wall0.getYEnd(), 0.01F);
      assertEquals(5065.791F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(1383.4363F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(2766.8726F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(645.1602F, wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertNull(wall0.getHeight());
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(2766.8726F, wall0.getXStart(), 0.01F);
      assertEquals((-1476.5521F), wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(5065.791F, wall0.getLength(), 0.01F);
      
      wall0.setYStart((-808.0F));
      assertEquals(2766.8726F, wall0.getYEnd(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(1383.4363F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(2766.8726F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(4520.5415F, wall0.getLength(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertNull(wall0.getHeight());
      assertFalse(wall0.isTrapezoidal());
      assertEquals((-808.0F), wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(2766.8726F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(979.4363F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(4520.5415F, wall0.getStartPointToEndPointDistance(), 0.01F);
      
      boolean boolean1 = wall0.intersectsRectangle(Float.POSITIVE_INFINITY, 0.0F, 0.0F, 445.4F);
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
      assertEquals(2766.8726F, wall0.getYEnd(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(1383.4363F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(2766.8726F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(4520.5415F, wall0.getLength(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertNull(wall0.getHeight());
      assertFalse(wall0.isTrapezoidal());
      assertEquals((-808.0F), wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(2766.8726F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(979.4363F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(4520.5415F, wall0.getStartPointToEndPointDistance(), 0.01F);
      
      Wall wall1 = new Wall(2.0F, 2.0F, (-2809.76F), 2213.745F, (-210.391F), (-1373.0F));
      assertFalse(wall1.equals((Object)wall0));
      assertNotNull(wall1);
      assertEquals(3577.4028F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall1.getRightSideColor());
      assertEquals(1107.8726F, wall1.getYArcCircleCenter(), 0.01F);
      assertEquals((-210.391F), wall1.getThickness(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertNull(wall1.getLeftSideColor());
      assertFalse(wall1.isTrapezoidal());
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals(2213.745F, wall1.getYEnd(), 0.01F);
      assertEquals(2.0F, wall1.getXStart(), 0.01F);
      assertEquals((-2809.76F), wall1.getXEnd(), 0.01F);
      assertEquals(2.0F, wall1.getYStart(), 0.01F);
      assertEquals(3577.4028F, wall1.getLength(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals((-1403.88F), wall1.getXArcCircleCenter(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertEquals((-1373.0F), wall1.getHeight(), 0.01F);
      
      wall1.setWallAtStart(wall0);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall1.equals((Object)wall0));
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      assertEquals(2766.8726F, wall0.getYEnd(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(1383.4363F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(2766.8726F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(4520.5415F, wall0.getLength(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertNull(wall0.getHeight());
      assertFalse(wall0.isTrapezoidal());
      assertEquals((-808.0F), wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(2766.8726F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(979.4363F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(4520.5415F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(3577.4028F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall1.getRightSideColor());
      assertEquals(1107.8726F, wall1.getYArcCircleCenter(), 0.01F);
      assertEquals((-210.391F), wall1.getThickness(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertNull(wall1.getLeftSideColor());
      assertFalse(wall1.isTrapezoidal());
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals(2213.745F, wall1.getYEnd(), 0.01F);
      assertEquals(2.0F, wall1.getXStart(), 0.01F);
      assertEquals((-2809.76F), wall1.getXEnd(), 0.01F);
      assertEquals(2.0F, wall1.getYStart(), 0.01F);
      assertEquals(3577.4028F, wall1.getLength(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals((-1403.88F), wall1.getXArcCircleCenter(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertEquals((-1373.0F), wall1.getHeight(), 0.01F);
      
      boolean boolean2 = wall0.containsWallStartAt(2.0F, 2766.8726F, 2.0F);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      assertNotSame(wall0, wall1);
      assertFalse(boolean2);
      assertEquals(2766.8726F, wall0.getYEnd(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(1383.4363F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(2766.8726F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(4520.5415F, wall0.getLength(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertNull(wall0.getHeight());
      assertFalse(wall0.isTrapezoidal());
      assertEquals((-808.0F), wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(2766.8726F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(979.4363F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(4520.5415F, wall0.getStartPointToEndPointDistance(), 0.01F);
      
      wall1.setXStart(1.0F);
      assertFalse(wall1.equals((Object)wall0));
      assertNotSame(wall1, wall0);
      assertNull(wall1.getRightSideColor());
      assertEquals(1107.8726F, wall1.getYArcCircleCenter(), 0.01F);
      assertEquals((-210.391F), wall1.getThickness(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertNull(wall1.getLeftSideColor());
      assertFalse(wall1.isTrapezoidal());
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals(3576.617F, wall1.getLength(), 0.01F);
      assertEquals(2213.745F, wall1.getYEnd(), 0.01F);
      assertEquals(1.0F, wall1.getXStart(), 0.01F);
      assertEquals((-1404.38F), wall1.getXArcCircleCenter(), 0.01F);
      assertEquals((-2809.76F), wall1.getXEnd(), 0.01F);
      assertEquals(2.0F, wall1.getYStart(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals(3576.617F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertEquals((-1373.0F), wall1.getHeight(), 0.01F);
      
      float float1 = wall1.getYEnd();
      assertFalse(wall1.equals((Object)wall0));
      assertNotSame(wall1, wall0);
      assertEquals(2213.745F, float1, 0.01F);
      assertNull(wall1.getRightSideColor());
      assertEquals(1107.8726F, wall1.getYArcCircleCenter(), 0.01F);
      assertEquals((-210.391F), wall1.getThickness(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertNull(wall1.getLeftSideColor());
      assertFalse(wall1.isTrapezoidal());
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals(3576.617F, wall1.getLength(), 0.01F);
      assertEquals(2213.745F, wall1.getYEnd(), 0.01F);
      assertEquals(1.0F, wall1.getXStart(), 0.01F);
      assertEquals((-1404.38F), wall1.getXArcCircleCenter(), 0.01F);
      assertEquals((-2809.76F), wall1.getXEnd(), 0.01F);
      assertEquals(2.0F, wall1.getYStart(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals(3576.617F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertEquals((-1373.0F), wall1.getHeight(), 0.01F);
      
      wall0.setRightSideShininess(368.2838F);
      assertFalse(wall0.equals((Object)wall1));
      assertNotSame(wall0, wall1);
      assertEquals(2766.8726F, wall0.getYEnd(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(1383.4363F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(2766.8726F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(4520.5415F, wall0.getLength(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertNull(wall0.getHeight());
      assertFalse(wall0.isTrapezoidal());
      assertEquals((-808.0F), wall0.getYStart(), 0.01F);
      assertEquals(368.2838F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(2766.8726F, wall0.getXStart(), 0.01F);
      assertEquals(979.4363F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(4520.5415F, wall0.getStartPointToEndPointDistance(), 0.01F);
      
      Wall wall2 = wall0.clone();
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall2.equals((Object)wall1));
      assertFalse(wall2.equals((Object)wall0));
      assertNotNull(wall2);
      assertNotSame(wall0, wall1);
      assertNotSame(wall0, wall2);
      assertNotSame(wall2, wall1);
      assertNotSame(wall2, wall0);
      assertEquals(2766.8726F, wall0.getYEnd(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(1383.4363F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(2766.8726F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(4520.5415F, wall0.getLength(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertNull(wall0.getHeight());
      assertFalse(wall0.isTrapezoidal());
      assertEquals((-808.0F), wall0.getYStart(), 0.01F);
      assertEquals(368.2838F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(2766.8726F, wall0.getXStart(), 0.01F);
      assertEquals(979.4363F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(4520.5415F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(1383.4363F, wall2.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall2.getXEnd(), 0.01F);
      assertFalse(wall2.isTrapezoidal());
      assertEquals(979.4363F, wall2.getYArcCircleCenter(), 0.01F);
      assertEquals((-808.0F), wall2.getYStart(), 0.01F);
      assertNull(wall2.getLeftSideColor());
      assertEquals(4520.5415F, wall2.getLength(), 0.01F);
      assertEquals(0.0F, wall2.getLeftSideShininess(), 0.01F);
      assertNull(wall2.getArcExtent());
      assertNull(wall2.getRightSideColor());
      assertEquals(2766.8726F, wall2.getThickness(), 0.01F);
      assertEquals(2766.8726F, wall2.getXStart(), 0.01F);
      assertNull(wall2.getHeightAtEnd());
      assertNull(wall2.getHeight());
      assertEquals(368.2838F, wall2.getRightSideShininess(), 0.01F);
      assertEquals(2766.8726F, wall2.getYEnd(), 0.01F);
      assertEquals(4520.5415F, wall2.getStartPointToEndPointDistance(), 0.01F);
      
      Integer integer0 = wall0.getRightSideColor();
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall0.equals((Object)wall2));
      assertNull(integer0);
      assertNotSame(wall0, wall1);
      assertNotSame(wall0, wall2);
      assertEquals(2766.8726F, wall0.getYEnd(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(1383.4363F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(2766.8726F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(4520.5415F, wall0.getLength(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertNull(wall0.getHeight());
      assertFalse(wall0.isTrapezoidal());
      assertEquals((-808.0F), wall0.getYStart(), 0.01F);
      assertEquals(368.2838F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(2766.8726F, wall0.getXStart(), 0.01F);
      assertEquals(979.4363F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(4520.5415F, wall0.getStartPointToEndPointDistance(), 0.01F);
      
      Integer integer1 = new Integer((-2091));
      assertNotNull(integer1);
      assertEquals((-2091), (int)integer1);
      
      long long0 = Integer.toUnsignedLong(297);
      assertEquals(297L, long0);
      
      Integer integer2 = Integer.getInteger("X_END", integer1);
      assertNotNull(integer2);
      assertEquals((-2091), (int)integer2);
      
      wall0.setRightSideColor(integer2);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall0.equals((Object)wall2));
      assertNotSame(wall0, wall1);
      assertNotSame(wall0, wall2);
      assertEquals(2766.8726F, wall0.getYEnd(), 0.01F);
      assertEquals((-2091), (int)wall0.getRightSideColor());
      assertNull(wall0.getHeightAtEnd());
      assertEquals(1383.4363F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(2766.8726F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertEquals(4520.5415F, wall0.getLength(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertNull(wall0.getHeight());
      assertFalse(wall0.isTrapezoidal());
      assertEquals((-808.0F), wall0.getYStart(), 0.01F);
      assertEquals(368.2838F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(2766.8726F, wall0.getXStart(), 0.01F);
      assertEquals(979.4363F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(4520.5415F, wall0.getStartPointToEndPointDistance(), 0.01F);
      
      float float2 = wall2.getRightSideShininess();
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall0.equals((Object)wall2));
      assertNotEquals(float2, float1, 0.01F);
      assertFalse(wall2.equals((Object)wall1));
      assertFalse(wall2.equals((Object)wall0));
      assertNotSame(wall0, wall1);
      assertNotSame(wall0, wall2);
      assertNotSame(wall2, wall1);
      assertNotSame(wall2, wall0);
      assertEquals(368.2838F, float2, 0.01F);
      assertEquals(2766.8726F, wall0.getYEnd(), 0.01F);
      assertEquals((-2091), (int)wall0.getRightSideColor());
      assertNull(wall0.getHeightAtEnd());
      assertEquals(1383.4363F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(2766.8726F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertEquals(4520.5415F, wall0.getLength(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertNull(wall0.getHeight());
      assertFalse(wall0.isTrapezoidal());
      assertEquals((-808.0F), wall0.getYStart(), 0.01F);
      assertEquals(368.2838F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(2766.8726F, wall0.getXStart(), 0.01F);
      assertEquals(979.4363F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(4520.5415F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(1383.4363F, wall2.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall2.getXEnd(), 0.01F);
      assertFalse(wall2.isTrapezoidal());
      assertEquals(979.4363F, wall2.getYArcCircleCenter(), 0.01F);
      assertEquals((-808.0F), wall2.getYStart(), 0.01F);
      assertNull(wall2.getLeftSideColor());
      assertEquals(4520.5415F, wall2.getLength(), 0.01F);
      assertEquals(0.0F, wall2.getLeftSideShininess(), 0.01F);
      assertNull(wall2.getArcExtent());
      assertNull(wall2.getRightSideColor());
      assertEquals(2766.8726F, wall2.getThickness(), 0.01F);
      assertEquals(2766.8726F, wall2.getXStart(), 0.01F);
      assertNull(wall2.getHeightAtEnd());
      assertNull(wall2.getHeight());
      assertEquals(368.2838F, wall2.getRightSideShininess(), 0.01F);
      assertEquals(2766.8726F, wall2.getYEnd(), 0.01F);
      assertEquals(4520.5415F, wall2.getStartPointToEndPointDistance(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test170()  throws Throwable  {
      Wall wall0 = new Wall(0.01F, 1747.2914F, 1747.2914F, 1.0F, 1747.2914F, 1747.2914F);
      assertNotNull(wall0);
      assertNull(wall0.getLeftSideColor());
      assertEquals(1747.2914F, wall0.getHeight(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(2470.329F, wall0.getLength(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.01F, wall0.getXStart(), 0.01F);
      assertEquals(1747.2914F, wall0.getYStart(), 0.01F);
      assertEquals(1747.2914F, wall0.getThickness(), 0.01F);
      assertEquals(1.0F, wall0.getYEnd(), 0.01F);
      assertEquals(873.6507F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(874.1457F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(1747.2914F, wall0.getXEnd(), 0.01F);
      assertEquals(2470.329F, wall0.getStartPointToEndPointDistance(), 0.01F);
      
      wall0.move(1747.2914F, 1.0F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(875.1457F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(1747.2914F, wall0.getHeight(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(2470.329F, wall0.getLength(), 0.01F);
      assertEquals(1748.2914F, wall0.getYStart(), 0.01F);
      assertEquals(2620.9421F, wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertFalse(wall0.isTrapezoidal());
      assertEquals(1747.2914F, wall0.getThickness(), 0.01F);
      assertEquals(2.0F, wall0.getYEnd(), 0.01F);
      assertEquals(1747.3014F, wall0.getXStart(), 0.01F);
      assertEquals(3494.5828F, wall0.getXEnd(), 0.01F);
      assertEquals(2470.329F, wall0.getStartPointToEndPointDistance(), 0.01F);
      
      boolean boolean0 = wall0.intersectsRectangle(445.4F, 1747.2914F, 1747.2914F, 0.01F);
      assertTrue(boolean0);
      assertNull(wall0.getLeftSideColor());
      assertEquals(875.1457F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(1747.2914F, wall0.getHeight(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(2470.329F, wall0.getLength(), 0.01F);
      assertEquals(1748.2914F, wall0.getYStart(), 0.01F);
      assertEquals(2620.9421F, wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertFalse(wall0.isTrapezoidal());
      assertEquals(1747.2914F, wall0.getThickness(), 0.01F);
      assertEquals(2.0F, wall0.getYEnd(), 0.01F);
      assertEquals(1747.3014F, wall0.getXStart(), 0.01F);
      assertEquals(3494.5828F, wall0.getXEnd(), 0.01F);
      assertEquals(2470.329F, wall0.getStartPointToEndPointDistance(), 0.01F);
      
      Float float0 = new Float(2.0);
      assertNotNull(float0);
      assertEquals(2.0F, (float)float0, 0.01F);
      
      wall0.setArcExtent(float0);
      assertEquals(1436.1039F, wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(1747.2914F, wall0.getHeight(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(2935.727F, wall0.getLength(), 0.01F);
      assertEquals(2.0F, wall0.getArcExtent(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals(1748.2914F, wall0.getYStart(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(3181.5825F, wall0.getXArcCircleCenter(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(1747.2914F, wall0.getThickness(), 0.01F);
      assertEquals(2.0F, wall0.getYEnd(), 0.01F);
      assertEquals(1747.3014F, wall0.getXStart(), 0.01F);
      assertEquals(3494.5828F, wall0.getXEnd(), 0.01F);
      assertEquals(2470.329F, wall0.getStartPointToEndPointDistance(), 0.01F);
      
      float float1 = wall0.getYArcCircleCenter();
      assertEquals(1436.1039F, float1, 0.01F);
      assertEquals(1436.1039F, wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(1747.2914F, wall0.getHeight(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(2935.727F, wall0.getLength(), 0.01F);
      assertEquals(2.0F, wall0.getArcExtent(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals(1748.2914F, wall0.getYStart(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(3181.5825F, wall0.getXArcCircleCenter(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(1747.2914F, wall0.getThickness(), 0.01F);
      assertEquals(2.0F, wall0.getYEnd(), 0.01F);
      assertEquals(1747.3014F, wall0.getXStart(), 0.01F);
      assertEquals(3494.5828F, wall0.getXEnd(), 0.01F);
      assertEquals(2470.329F, wall0.getStartPointToEndPointDistance(), 0.01F);
      
      Float float2 = new Float(445.4F);
      assertNotEquals((float)float2, (float)float1, 0.01F);
      assertNotEquals((float)float2, (float)float0, 0.01F);
      assertNotNull(float2);
      assertEquals(445.4F, (float)float2, 0.01F);
      
      float float3 = wall0.getXEnd();
      assertNotEquals(float3, float1, 0.01F);
      assertEquals(3494.5828F, float3, 0.01F);
      assertEquals(1436.1039F, wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(1747.2914F, wall0.getHeight(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(2935.727F, wall0.getLength(), 0.01F);
      assertEquals(2.0F, wall0.getArcExtent(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals(1748.2914F, wall0.getYStart(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(3181.5825F, wall0.getXArcCircleCenter(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(1747.2914F, wall0.getThickness(), 0.01F);
      assertEquals(2.0F, wall0.getYEnd(), 0.01F);
      assertEquals(1747.3014F, wall0.getXStart(), 0.01F);
      assertEquals(3494.5828F, wall0.getXEnd(), 0.01F);
      assertEquals(2470.329F, wall0.getStartPointToEndPointDistance(), 0.01F);
      
      Float float4 = wall0.getHeight();
      assertNotEquals((float)float4, (float)float3, 0.01F);
      assertNotEquals((float)float4, (float)float2, 0.01F);
      assertNotEquals((float)float4, (float)float0, 0.01F);
      assertNotEquals((float)float4, (float)float1, 0.01F);
      assertNotNull(float4);
      assertEquals(1747.2914F, (float)float4, 0.01F);
      assertEquals(1436.1039F, wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(1747.2914F, wall0.getHeight(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(2935.727F, wall0.getLength(), 0.01F);
      assertEquals(2.0F, wall0.getArcExtent(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals(1748.2914F, wall0.getYStart(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(3181.5825F, wall0.getXArcCircleCenter(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(1747.2914F, wall0.getThickness(), 0.01F);
      assertEquals(2.0F, wall0.getYEnd(), 0.01F);
      assertEquals(1747.3014F, wall0.getXStart(), 0.01F);
      assertEquals(3494.5828F, wall0.getXEnd(), 0.01F);
      assertEquals(2470.329F, wall0.getStartPointToEndPointDistance(), 0.01F);
      
      wall0.setHeight((Float) null);
      assertEquals(1436.1039F, wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(2935.727F, wall0.getLength(), 0.01F);
      assertEquals(2.0F, wall0.getArcExtent(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals(1748.2914F, wall0.getYStart(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(3181.5825F, wall0.getXArcCircleCenter(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(1747.2914F, wall0.getThickness(), 0.01F);
      assertEquals(2.0F, wall0.getYEnd(), 0.01F);
      assertEquals(1747.3014F, wall0.getXStart(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals(3494.5828F, wall0.getXEnd(), 0.01F);
      assertEquals(2470.329F, wall0.getStartPointToEndPointDistance(), 0.01F);
      
      Float float5 = wall0.getArcExtent();
      assertNotEquals((float)float5, (float)float3, 0.01F);
      assertNotEquals((float)float5, (float)float2, 0.01F);
      assertNotEquals((float)float5, (float)float1, 0.01F);
      assertNotEquals((float)float5, (float)float4, 0.01F);
      assertNotNull(float5);
      assertEquals(2.0F, (float)float5, 0.01F);
      assertEquals(1436.1039F, wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(2935.727F, wall0.getLength(), 0.01F);
      assertEquals(2.0F, wall0.getArcExtent(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals(1748.2914F, wall0.getYStart(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(3181.5825F, wall0.getXArcCircleCenter(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(1747.2914F, wall0.getThickness(), 0.01F);
      assertEquals(2.0F, wall0.getYEnd(), 0.01F);
      assertEquals(1747.3014F, wall0.getXStart(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals(3494.5828F, wall0.getXEnd(), 0.01F);
      assertEquals(2470.329F, wall0.getStartPointToEndPointDistance(), 0.01F);
      
      float float6 = wall0.getXStart();
      assertNotEquals(float6, float1, 0.01F);
      assertNotEquals(float6, float3, 0.01F);
      assertEquals(1747.3014F, float6, 0.01F);
      assertEquals(1436.1039F, wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(2935.727F, wall0.getLength(), 0.01F);
      assertEquals(2.0F, wall0.getArcExtent(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals(1748.2914F, wall0.getYStart(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(3181.5825F, wall0.getXArcCircleCenter(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(1747.2914F, wall0.getThickness(), 0.01F);
      assertEquals(2.0F, wall0.getYEnd(), 0.01F);
      assertEquals(1747.3014F, wall0.getXStart(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals(3494.5828F, wall0.getXEnd(), 0.01F);
      assertEquals(2470.329F, wall0.getStartPointToEndPointDistance(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test171()  throws Throwable  {
      Wall wall0 = new Wall(0.0F, 0.0F, 0.0F, 0.0F, 0.0F);
      assertNotNull(wall0);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertNull(wall0.getHeight());
      
      boolean boolean0 = wall0.containsWallStartAt(0.0F, 0.0F, 0.0F);
      assertFalse(boolean0);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertNull(wall0.getHeight());
      
      wall0.setWallAtStart(wall0);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertNull(wall0.getHeight());
      
      boolean boolean1 = wall0.isTrapezoidal();
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertNull(wall0.getHeight());
      
      Wall wall1 = new Wall(0.0F, 4043.4763F, 0.0F, 3943.0F, 0.0F, (-1229.7325F));
      assertFalse(wall1.equals((Object)wall0));
      assertNotNull(wall1);
      assertEquals(100.47632F, wall1.getLength(), 0.01F);
      assertEquals(0.0F, wall1.getXStart(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals(0.0F, wall1.getXEnd(), 0.01F);
      assertEquals(4043.4763F, wall1.getYStart(), 0.01F);
      assertEquals(3943.0F, wall1.getYEnd(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertEquals(0.0F, wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(100.47632F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall1.getThickness(), 0.01F);
      assertEquals(3993.2383F, wall1.getYArcCircleCenter(), 0.01F);
      assertEquals((-1229.7325F), wall1.getHeight(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      
      wall0.setWallAtEnd(wall1);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall1.equals((Object)wall0));
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertNull(wall0.getHeight());
      assertEquals(100.47632F, wall1.getLength(), 0.01F);
      assertEquals(0.0F, wall1.getXStart(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals(0.0F, wall1.getXEnd(), 0.01F);
      assertEquals(4043.4763F, wall1.getYStart(), 0.01F);
      assertEquals(3943.0F, wall1.getYEnd(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertEquals(0.0F, wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(100.47632F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall1.getThickness(), 0.01F);
      assertEquals(3993.2383F, wall1.getYArcCircleCenter(), 0.01F);
      assertEquals((-1229.7325F), wall1.getHeight(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      
      Wall wall2 = wall0.getWallAtStart();
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall2.equals((Object)wall1));
      assertNotNull(wall2);
      assertNotSame(wall0, wall1);
      assertSame(wall0, wall2);
      assertSame(wall2, wall0);
      assertNotSame(wall2, wall1);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertNull(wall0.getHeight());
      assertEquals(0.0F, wall2.getYArcCircleCenter(), 0.01F);
      assertNull(wall2.getHeightAtEnd());
      assertEquals(0.0F, wall2.getYStart(), 0.01F);
      assertNull(wall2.getHeight());
      assertNull(wall2.getArcExtent());
      assertNull(wall2.getRightSideColor());
      assertEquals(0.0F, wall2.getThickness(), 0.01F);
      assertEquals(0.0F, wall2.getLeftSideShininess(), 0.01F);
      assertFalse(wall2.isTrapezoidal());
      assertEquals(0.0F, wall2.getLength(), 0.01F);
      assertEquals(0.0F, wall2.getXEnd(), 0.01F);
      assertEquals(0.0F, wall2.getYEnd(), 0.01F);
      assertNull(wall2.getLeftSideColor());
      assertEquals(0.0F, wall2.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall2.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall2.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall2.getXStart(), 0.01F);
      
      wall1.setWallAtStart(wall2);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall1.equals((Object)wall0));
      assertFalse(wall1.equals((Object)wall2));
      assertFalse(wall2.equals((Object)wall1));
      assertNotSame(wall0, wall1);
      assertSame(wall0, wall2);
      assertNotSame(wall1, wall0);
      assertNotSame(wall1, wall2);
      assertSame(wall2, wall0);
      assertNotSame(wall2, wall1);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertNull(wall0.getHeight());
      assertEquals(100.47632F, wall1.getLength(), 0.01F);
      assertEquals(0.0F, wall1.getXStart(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals(0.0F, wall1.getXEnd(), 0.01F);
      assertEquals(4043.4763F, wall1.getYStart(), 0.01F);
      assertEquals(3943.0F, wall1.getYEnd(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertEquals(0.0F, wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(100.47632F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall1.getThickness(), 0.01F);
      assertEquals(3993.2383F, wall1.getYArcCircleCenter(), 0.01F);
      assertEquals((-1229.7325F), wall1.getHeight(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals(0.0F, wall2.getYArcCircleCenter(), 0.01F);
      assertNull(wall2.getHeightAtEnd());
      assertEquals(0.0F, wall2.getYStart(), 0.01F);
      assertNull(wall2.getHeight());
      assertNull(wall2.getArcExtent());
      assertNull(wall2.getRightSideColor());
      assertEquals(0.0F, wall2.getThickness(), 0.01F);
      assertEquals(0.0F, wall2.getLeftSideShininess(), 0.01F);
      assertFalse(wall2.isTrapezoidal());
      assertEquals(0.0F, wall2.getLength(), 0.01F);
      assertEquals(0.0F, wall2.getXEnd(), 0.01F);
      assertEquals(0.0F, wall2.getYEnd(), 0.01F);
      assertNull(wall2.getLeftSideColor());
      assertEquals(0.0F, wall2.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall2.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall2.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall2.getXStart(), 0.01F);
      
      Wall wall3 = wall2.getWallAtStart();
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall2.equals((Object)wall1));
      assertFalse(wall3.equals((Object)wall1));
      assertNotNull(wall3);
      assertSame(wall0, wall3);
      assertNotSame(wall0, wall1);
      assertSame(wall0, wall2);
      assertSame(wall2, wall0);
      assertSame(wall2, wall3);
      assertNotSame(wall2, wall1);
      assertSame(wall3, wall0);
      assertNotSame(wall3, wall1);
      assertSame(wall3, wall2);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertNull(wall0.getHeight());
      assertEquals(0.0F, wall2.getYArcCircleCenter(), 0.01F);
      assertNull(wall2.getHeightAtEnd());
      assertEquals(0.0F, wall2.getYStart(), 0.01F);
      assertNull(wall2.getHeight());
      assertNull(wall2.getArcExtent());
      assertNull(wall2.getRightSideColor());
      assertEquals(0.0F, wall2.getThickness(), 0.01F);
      assertEquals(0.0F, wall2.getLeftSideShininess(), 0.01F);
      assertFalse(wall2.isTrapezoidal());
      assertEquals(0.0F, wall2.getLength(), 0.01F);
      assertEquals(0.0F, wall2.getXEnd(), 0.01F);
      assertEquals(0.0F, wall2.getYEnd(), 0.01F);
      assertNull(wall2.getLeftSideColor());
      assertEquals(0.0F, wall2.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall2.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall2.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall2.getXStart(), 0.01F);
      assertEquals(0.0F, wall3.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall3.getLength(), 0.01F);
      assertEquals(0.0F, wall3.getLeftSideShininess(), 0.01F);
      assertNull(wall3.getArcExtent());
      assertFalse(wall3.isTrapezoidal());
      assertNull(wall3.getRightSideColor());
      assertEquals(0.0F, wall3.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall3.getYEnd(), 0.01F);
      assertEquals(0.0F, wall3.getXEnd(), 0.01F);
      assertNull(wall3.getLeftSideColor());
      assertNull(wall3.getHeight());
      assertEquals(0.0F, wall3.getThickness(), 0.01F);
      assertEquals(0.0F, wall3.getXStart(), 0.01F);
      assertEquals(0.0F, wall3.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall3.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall3.getHeightAtEnd());
      assertEquals(0.0F, wall3.getYStart(), 0.01F);
      
      wall0.setWallAtEnd(wall3);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall2.equals((Object)wall1));
      assertFalse(wall3.equals((Object)wall1));
      assertSame(wall0, wall3);
      assertNotSame(wall0, wall1);
      assertSame(wall0, wall2);
      assertSame(wall2, wall0);
      assertSame(wall2, wall3);
      assertNotSame(wall2, wall1);
      assertSame(wall3, wall0);
      assertNotSame(wall3, wall1);
      assertSame(wall3, wall2);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertNull(wall0.getHeight());
      assertEquals(0.0F, wall2.getYArcCircleCenter(), 0.01F);
      assertNull(wall2.getHeightAtEnd());
      assertEquals(0.0F, wall2.getYStart(), 0.01F);
      assertNull(wall2.getHeight());
      assertNull(wall2.getArcExtent());
      assertNull(wall2.getRightSideColor());
      assertEquals(0.0F, wall2.getThickness(), 0.01F);
      assertEquals(0.0F, wall2.getLeftSideShininess(), 0.01F);
      assertFalse(wall2.isTrapezoidal());
      assertEquals(0.0F, wall2.getLength(), 0.01F);
      assertEquals(0.0F, wall2.getXEnd(), 0.01F);
      assertEquals(0.0F, wall2.getYEnd(), 0.01F);
      assertNull(wall2.getLeftSideColor());
      assertEquals(0.0F, wall2.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall2.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall2.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall2.getXStart(), 0.01F);
      assertEquals(0.0F, wall3.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall3.getLength(), 0.01F);
      assertEquals(0.0F, wall3.getLeftSideShininess(), 0.01F);
      assertNull(wall3.getArcExtent());
      assertFalse(wall3.isTrapezoidal());
      assertNull(wall3.getRightSideColor());
      assertEquals(0.0F, wall3.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall3.getYEnd(), 0.01F);
      assertEquals(0.0F, wall3.getXEnd(), 0.01F);
      assertNull(wall3.getLeftSideColor());
      assertNull(wall3.getHeight());
      assertEquals(0.0F, wall3.getThickness(), 0.01F);
      assertEquals(0.0F, wall3.getXStart(), 0.01F);
      assertEquals(0.0F, wall3.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall3.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall3.getHeightAtEnd());
      assertEquals(0.0F, wall3.getYStart(), 0.01F);
      
      Wall wall4 = new Wall(0.1F, 2382.0F, 1105.3856F, 2382.0F, 2382.0F);
      assertFalse(wall4.equals((Object)wall0));
      assertFalse(wall4.equals((Object)wall3));
      assertFalse(wall4.equals((Object)wall2));
      assertFalse(wall4.equals((Object)wall1));
      assertNotNull(wall4);
      assertEquals(2382.0F, wall4.getYEnd(), 0.01F);
      assertEquals(2382.0F, wall4.getYArcCircleCenter(), 0.01F);
      assertEquals(1105.2856F, wall4.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(552.7428F, wall4.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall4.getLeftSideShininess(), 0.01F);
      assertNull(wall4.getArcExtent());
      assertNull(wall4.getRightSideColor());
      assertEquals(1105.3856F, wall4.getXEnd(), 0.01F);
      assertNull(wall4.getLeftSideColor());
      assertEquals(1105.2856F, wall4.getLength(), 0.01F);
      assertNull(wall4.getHeight());
      assertNull(wall4.getHeightAtEnd());
      assertEquals(0.1F, wall4.getXStart(), 0.01F);
      assertEquals(2382.0F, wall4.getThickness(), 0.01F);
      assertEquals(0.0F, wall4.getRightSideShininess(), 0.01F);
      assertFalse(wall4.isTrapezoidal());
      assertEquals(2382.0F, wall4.getYStart(), 0.01F);
      
      Wall wall5 = wall2.getWallAtStart();
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall0.equals((Object)wall4));
      assertFalse(wall2.equals((Object)wall4));
      assertFalse(wall2.equals((Object)wall1));
      assertFalse(wall5.equals((Object)wall1));
      assertFalse(wall5.equals((Object)wall4));
      assertNotNull(wall5);
      assertSame(wall0, wall3);
      assertNotSame(wall0, wall1);
      assertSame(wall0, wall5);
      assertNotSame(wall0, wall4);
      assertSame(wall0, wall2);
      assertNotSame(wall2, wall4);
      assertSame(wall2, wall5);
      assertSame(wall2, wall0);
      assertSame(wall2, wall3);
      assertNotSame(wall2, wall1);
      assertSame(wall5, wall0);
      assertSame(wall5, wall3);
      assertNotSame(wall5, wall1);
      assertNotSame(wall5, wall4);
      assertSame(wall5, wall2);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertNull(wall0.getHeight());
      assertEquals(0.0F, wall2.getYArcCircleCenter(), 0.01F);
      assertNull(wall2.getHeightAtEnd());
      assertEquals(0.0F, wall2.getYStart(), 0.01F);
      assertNull(wall2.getHeight());
      assertNull(wall2.getArcExtent());
      assertNull(wall2.getRightSideColor());
      assertEquals(0.0F, wall2.getThickness(), 0.01F);
      assertEquals(0.0F, wall2.getLeftSideShininess(), 0.01F);
      assertFalse(wall2.isTrapezoidal());
      assertEquals(0.0F, wall2.getLength(), 0.01F);
      assertEquals(0.0F, wall2.getXEnd(), 0.01F);
      assertEquals(0.0F, wall2.getYEnd(), 0.01F);
      assertNull(wall2.getLeftSideColor());
      assertEquals(0.0F, wall2.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall2.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall2.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall2.getXStart(), 0.01F);
      assertEquals(0.0F, wall5.getRightSideShininess(), 0.01F);
      assertNull(wall5.getHeight());
      assertNull(wall5.getArcExtent());
      assertNull(wall5.getRightSideColor());
      assertEquals(0.0F, wall5.getLength(), 0.01F);
      assertEquals(0.0F, wall5.getYEnd(), 0.01F);
      assertEquals(0.0F, wall5.getXEnd(), 0.01F);
      assertEquals(0.0F, wall5.getYArcCircleCenter(), 0.01F);
      assertNull(wall5.getLeftSideColor());
      assertEquals(0.0F, wall5.getThickness(), 0.01F);
      assertEquals(0.0F, wall5.getXStart(), 0.01F);
      assertEquals(0.0F, wall5.getLeftSideShininess(), 0.01F);
      assertFalse(wall5.isTrapezoidal());
      assertEquals(0.0F, wall5.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall5.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall5.getYStart(), 0.01F);
      assertNull(wall5.getHeightAtEnd());
      
      Wall wall6 = wall5.getWallAtStart();
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall0.equals((Object)wall4));
      assertFalse(wall2.equals((Object)wall4));
      assertFalse(wall2.equals((Object)wall1));
      assertFalse(wall5.equals((Object)wall1));
      assertFalse(wall5.equals((Object)wall4));
      assertFalse(wall6.equals((Object)wall4));
      assertFalse(wall6.equals((Object)wall1));
      assertNotNull(wall6);
      assertSame(wall0, wall3);
      assertNotSame(wall0, wall1);
      assertSame(wall0, wall6);
      assertSame(wall0, wall5);
      assertNotSame(wall0, wall4);
      assertSame(wall0, wall2);
      assertSame(wall2, wall6);
      assertNotSame(wall2, wall4);
      assertSame(wall2, wall5);
      assertSame(wall2, wall0);
      assertSame(wall2, wall3);
      assertNotSame(wall2, wall1);
      assertSame(wall5, wall0);
      assertSame(wall5, wall3);
      assertSame(wall5, wall6);
      assertNotSame(wall5, wall1);
      assertNotSame(wall5, wall4);
      assertSame(wall5, wall2);
      assertSame(wall6, wall0);
      assertSame(wall6, wall3);
      assertSame(wall6, wall5);
      assertNotSame(wall6, wall4);
      assertSame(wall6, wall2);
      assertNotSame(wall6, wall1);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertNull(wall0.getHeight());
      assertEquals(0.0F, wall2.getYArcCircleCenter(), 0.01F);
      assertNull(wall2.getHeightAtEnd());
      assertEquals(0.0F, wall2.getYStart(), 0.01F);
      assertNull(wall2.getHeight());
      assertNull(wall2.getArcExtent());
      assertNull(wall2.getRightSideColor());
      assertEquals(0.0F, wall2.getThickness(), 0.01F);
      assertEquals(0.0F, wall2.getLeftSideShininess(), 0.01F);
      assertFalse(wall2.isTrapezoidal());
      assertEquals(0.0F, wall2.getLength(), 0.01F);
      assertEquals(0.0F, wall2.getXEnd(), 0.01F);
      assertEquals(0.0F, wall2.getYEnd(), 0.01F);
      assertNull(wall2.getLeftSideColor());
      assertEquals(0.0F, wall2.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall2.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall2.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall2.getXStart(), 0.01F);
      assertEquals(0.0F, wall5.getRightSideShininess(), 0.01F);
      assertNull(wall5.getHeight());
      assertNull(wall5.getArcExtent());
      assertNull(wall5.getRightSideColor());
      assertEquals(0.0F, wall5.getLength(), 0.01F);
      assertEquals(0.0F, wall5.getYEnd(), 0.01F);
      assertEquals(0.0F, wall5.getXEnd(), 0.01F);
      assertEquals(0.0F, wall5.getYArcCircleCenter(), 0.01F);
      assertNull(wall5.getLeftSideColor());
      assertEquals(0.0F, wall5.getThickness(), 0.01F);
      assertEquals(0.0F, wall5.getXStart(), 0.01F);
      assertEquals(0.0F, wall5.getLeftSideShininess(), 0.01F);
      assertFalse(wall5.isTrapezoidal());
      assertEquals(0.0F, wall5.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall5.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall5.getYStart(), 0.01F);
      assertNull(wall5.getHeightAtEnd());
      assertEquals(0.0F, wall6.getThickness(), 0.01F);
      assertEquals(0.0F, wall6.getXStart(), 0.01F);
      assertEquals(0.0F, wall6.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall6.getYStart(), 0.01F);
      assertEquals(0.0F, wall6.getYEnd(), 0.01F);
      assertEquals(0.0F, wall6.getXEnd(), 0.01F);
      assertEquals(0.0F, wall6.getLength(), 0.01F);
      assertEquals(0.0F, wall6.getLeftSideShininess(), 0.01F);
      assertNull(wall6.getArcExtent());
      assertNull(wall6.getRightSideColor());
      assertEquals(0.0F, wall6.getXArcCircleCenter(), 0.01F);
      assertNull(wall6.getHeightAtEnd());
      assertNull(wall6.getLeftSideColor());
      assertNull(wall6.getHeight());
      assertEquals(0.0F, wall6.getStartPointToEndPointDistance(), 0.01F);
      assertFalse(wall6.isTrapezoidal());
      assertEquals(0.0F, wall6.getRightSideShininess(), 0.01F);
      
      Wall wall7 = wall4.clone();
      assertFalse(wall4.equals((Object)wall5));
      assertFalse(wall4.equals((Object)wall6));
      assertFalse(wall4.equals((Object)wall0));
      assertFalse(wall4.equals((Object)wall3));
      assertFalse(wall4.equals((Object)wall2));
      assertFalse(wall4.equals((Object)wall1));
      assertFalse(wall7.equals((Object)wall6));
      assertFalse(wall7.equals((Object)wall4));
      assertFalse(wall7.equals((Object)wall2));
      assertFalse(wall7.equals((Object)wall1));
      assertFalse(wall7.equals((Object)wall5));
      assertFalse(wall7.equals((Object)wall3));
      assertFalse(wall7.equals((Object)wall0));
      assertNotNull(wall7);
      assertNotSame(wall4, wall5);
      assertNotSame(wall4, wall7);
      assertNotSame(wall4, wall6);
      assertNotSame(wall4, wall0);
      assertNotSame(wall4, wall3);
      assertNotSame(wall4, wall2);
      assertNotSame(wall4, wall1);
      assertNotSame(wall7, wall6);
      assertNotSame(wall7, wall4);
      assertNotSame(wall7, wall2);
      assertNotSame(wall7, wall1);
      assertNotSame(wall7, wall5);
      assertNotSame(wall7, wall3);
      assertNotSame(wall7, wall0);
      assertEquals(2382.0F, wall4.getYEnd(), 0.01F);
      assertEquals(2382.0F, wall4.getYArcCircleCenter(), 0.01F);
      assertEquals(1105.2856F, wall4.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(552.7428F, wall4.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall4.getLeftSideShininess(), 0.01F);
      assertNull(wall4.getArcExtent());
      assertNull(wall4.getRightSideColor());
      assertEquals(1105.3856F, wall4.getXEnd(), 0.01F);
      assertNull(wall4.getLeftSideColor());
      assertEquals(1105.2856F, wall4.getLength(), 0.01F);
      assertNull(wall4.getHeight());
      assertNull(wall4.getHeightAtEnd());
      assertEquals(0.1F, wall4.getXStart(), 0.01F);
      assertEquals(2382.0F, wall4.getThickness(), 0.01F);
      assertEquals(0.0F, wall4.getRightSideShininess(), 0.01F);
      assertFalse(wall4.isTrapezoidal());
      assertEquals(2382.0F, wall4.getYStart(), 0.01F);
      assertEquals(0.1F, wall7.getXStart(), 0.01F);
      assertEquals(1105.2856F, wall7.getLength(), 0.01F);
      assertEquals(2382.0F, wall7.getYStart(), 0.01F);
      assertEquals(2382.0F, wall7.getThickness(), 0.01F);
      assertFalse(wall7.isTrapezoidal());
      assertEquals(1105.3856F, wall7.getXEnd(), 0.01F);
      assertNull(wall7.getHeightAtEnd());
      assertNull(wall7.getArcExtent());
      assertNull(wall7.getRightSideColor());
      assertEquals(2382.0F, wall7.getYArcCircleCenter(), 0.01F);
      assertNull(wall7.getHeight());
      assertEquals(0.0F, wall7.getRightSideShininess(), 0.01F);
      assertEquals(1105.2856F, wall7.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall7.getLeftSideShininess(), 0.01F);
      assertNull(wall7.getLeftSideColor());
      assertEquals(2382.0F, wall7.getYEnd(), 0.01F);
      assertEquals(552.7428F, wall7.getXArcCircleCenter(), 0.01F);
      
      wall4.setWallAtStart(wall7);
      assertFalse(wall4.equals((Object)wall5));
      assertFalse(wall4.equals((Object)wall7));
      assertFalse(wall4.equals((Object)wall6));
      assertFalse(wall4.equals((Object)wall0));
      assertFalse(wall4.equals((Object)wall3));
      assertFalse(wall4.equals((Object)wall2));
      assertFalse(wall4.equals((Object)wall1));
      assertFalse(wall7.equals((Object)wall6));
      assertFalse(wall7.equals((Object)wall4));
      assertFalse(wall7.equals((Object)wall2));
      assertFalse(wall7.equals((Object)wall1));
      assertFalse(wall7.equals((Object)wall5));
      assertFalse(wall7.equals((Object)wall3));
      assertFalse(wall7.equals((Object)wall0));
      assertNotSame(wall4, wall5);
      assertNotSame(wall4, wall7);
      assertNotSame(wall4, wall6);
      assertNotSame(wall4, wall0);
      assertNotSame(wall4, wall3);
      assertNotSame(wall4, wall2);
      assertNotSame(wall4, wall1);
      assertNotSame(wall7, wall6);
      assertNotSame(wall7, wall4);
      assertNotSame(wall7, wall2);
      assertNotSame(wall7, wall1);
      assertNotSame(wall7, wall5);
      assertNotSame(wall7, wall3);
      assertNotSame(wall7, wall0);
      assertEquals(2382.0F, wall4.getYEnd(), 0.01F);
      assertEquals(2382.0F, wall4.getYArcCircleCenter(), 0.01F);
      assertEquals(1105.2856F, wall4.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(552.7428F, wall4.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall4.getLeftSideShininess(), 0.01F);
      assertNull(wall4.getArcExtent());
      assertNull(wall4.getRightSideColor());
      assertEquals(1105.3856F, wall4.getXEnd(), 0.01F);
      assertNull(wall4.getLeftSideColor());
      assertEquals(1105.2856F, wall4.getLength(), 0.01F);
      assertNull(wall4.getHeight());
      assertNull(wall4.getHeightAtEnd());
      assertEquals(0.1F, wall4.getXStart(), 0.01F);
      assertEquals(2382.0F, wall4.getThickness(), 0.01F);
      assertEquals(0.0F, wall4.getRightSideShininess(), 0.01F);
      assertFalse(wall4.isTrapezoidal());
      assertEquals(2382.0F, wall4.getYStart(), 0.01F);
      assertEquals(0.1F, wall7.getXStart(), 0.01F);
      assertEquals(1105.2856F, wall7.getLength(), 0.01F);
      assertEquals(2382.0F, wall7.getYStart(), 0.01F);
      assertEquals(2382.0F, wall7.getThickness(), 0.01F);
      assertFalse(wall7.isTrapezoidal());
      assertEquals(1105.3856F, wall7.getXEnd(), 0.01F);
      assertNull(wall7.getHeightAtEnd());
      assertNull(wall7.getArcExtent());
      assertNull(wall7.getRightSideColor());
      assertEquals(2382.0F, wall7.getYArcCircleCenter(), 0.01F);
      assertNull(wall7.getHeight());
      assertEquals(0.0F, wall7.getRightSideShininess(), 0.01F);
      assertEquals(1105.2856F, wall7.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall7.getLeftSideShininess(), 0.01F);
      assertNull(wall7.getLeftSideColor());
      assertEquals(2382.0F, wall7.getYEnd(), 0.01F);
      assertEquals(552.7428F, wall7.getXArcCircleCenter(), 0.01F);
      
      Wall wall8 = wall6.getWallAtEnd();
      assertFalse(wall0.equals((Object)wall7));
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall0.equals((Object)wall4));
      assertFalse(wall2.equals((Object)wall4));
      assertFalse(wall2.equals((Object)wall7));
      assertFalse(wall2.equals((Object)wall1));
      assertFalse(wall5.equals((Object)wall1));
      assertFalse(wall5.equals((Object)wall4));
      assertFalse(wall5.equals((Object)wall7));
      assertFalse(wall6.equals((Object)wall7));
      assertFalse(wall6.equals((Object)wall4));
      assertFalse(wall6.equals((Object)wall1));
      assertFalse(wall8.equals((Object)wall4));
      assertFalse(wall8.equals((Object)wall7));
      assertFalse(wall8.equals((Object)wall1));
      assertNotNull(wall8);
      assertNotSame(wall0, wall7);
      assertSame(wall0, wall3);
      assertNotSame(wall0, wall1);
      assertSame(wall0, wall6);
      assertSame(wall0, wall8);
      assertSame(wall0, wall5);
      assertNotSame(wall0, wall4);
      assertSame(wall0, wall2);
      assertSame(wall2, wall6);
      assertSame(wall2, wall8);
      assertNotSame(wall2, wall4);
      assertSame(wall2, wall5);
      assertNotSame(wall2, wall7);
      assertSame(wall2, wall0);
      assertSame(wall2, wall3);
      assertNotSame(wall2, wall1);
      assertSame(wall5, wall0);
      assertSame(wall5, wall3);
      assertSame(wall5, wall8);
      assertSame(wall5, wall6);
      assertNotSame(wall5, wall1);
      assertNotSame(wall5, wall4);
      assertSame(wall5, wall2);
      assertNotSame(wall5, wall7);
      assertNotSame(wall6, wall7);
      assertSame(wall6, wall0);
      assertSame(wall6, wall3);
      assertSame(wall6, wall5);
      assertNotSame(wall6, wall4);
      assertSame(wall6, wall2);
      assertSame(wall6, wall8);
      assertNotSame(wall6, wall1);
      assertNotSame(wall8, wall4);
      assertSame(wall8, wall2);
      assertSame(wall8, wall5);
      assertSame(wall8, wall0);
      assertSame(wall8, wall3);
      assertNotSame(wall8, wall7);
      assertSame(wall8, wall6);
      assertNotSame(wall8, wall1);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertNull(wall0.getHeight());
      assertEquals(0.0F, wall2.getYArcCircleCenter(), 0.01F);
      assertNull(wall2.getHeightAtEnd());
      assertEquals(0.0F, wall2.getYStart(), 0.01F);
      assertNull(wall2.getHeight());
      assertNull(wall2.getArcExtent());
      assertNull(wall2.getRightSideColor());
      assertEquals(0.0F, wall2.getThickness(), 0.01F);
      assertEquals(0.0F, wall2.getLeftSideShininess(), 0.01F);
      assertFalse(wall2.isTrapezoidal());
      assertEquals(0.0F, wall2.getLength(), 0.01F);
      assertEquals(0.0F, wall2.getXEnd(), 0.01F);
      assertEquals(0.0F, wall2.getYEnd(), 0.01F);
      assertNull(wall2.getLeftSideColor());
      assertEquals(0.0F, wall2.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall2.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall2.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall2.getXStart(), 0.01F);
      assertEquals(0.0F, wall5.getRightSideShininess(), 0.01F);
      assertNull(wall5.getHeight());
      assertNull(wall5.getArcExtent());
      assertNull(wall5.getRightSideColor());
      assertEquals(0.0F, wall5.getLength(), 0.01F);
      assertEquals(0.0F, wall5.getYEnd(), 0.01F);
      assertEquals(0.0F, wall5.getXEnd(), 0.01F);
      assertEquals(0.0F, wall5.getYArcCircleCenter(), 0.01F);
      assertNull(wall5.getLeftSideColor());
      assertEquals(0.0F, wall5.getThickness(), 0.01F);
      assertEquals(0.0F, wall5.getXStart(), 0.01F);
      assertEquals(0.0F, wall5.getLeftSideShininess(), 0.01F);
      assertFalse(wall5.isTrapezoidal());
      assertEquals(0.0F, wall5.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall5.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall5.getYStart(), 0.01F);
      assertNull(wall5.getHeightAtEnd());
      assertEquals(0.0F, wall6.getThickness(), 0.01F);
      assertEquals(0.0F, wall6.getXStart(), 0.01F);
      assertEquals(0.0F, wall6.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall6.getYStart(), 0.01F);
      assertEquals(0.0F, wall6.getYEnd(), 0.01F);
      assertEquals(0.0F, wall6.getXEnd(), 0.01F);
      assertEquals(0.0F, wall6.getLength(), 0.01F);
      assertEquals(0.0F, wall6.getLeftSideShininess(), 0.01F);
      assertNull(wall6.getArcExtent());
      assertNull(wall6.getRightSideColor());
      assertEquals(0.0F, wall6.getXArcCircleCenter(), 0.01F);
      assertNull(wall6.getHeightAtEnd());
      assertNull(wall6.getLeftSideColor());
      assertNull(wall6.getHeight());
      assertEquals(0.0F, wall6.getStartPointToEndPointDistance(), 0.01F);
      assertFalse(wall6.isTrapezoidal());
      assertEquals(0.0F, wall6.getRightSideShininess(), 0.01F);
      assertNull(wall8.getHeightAtEnd());
      assertEquals(0.0F, wall8.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall8.getArcExtent());
      assertNull(wall8.getRightSideColor());
      assertNull(wall8.getHeight());
      assertEquals(0.0F, wall8.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall8.getXStart(), 0.01F);
      assertEquals(0.0F, wall8.getRightSideShininess(), 0.01F);
      assertFalse(wall8.isTrapezoidal());
      assertEquals(0.0F, wall8.getXEnd(), 0.01F);
      assertEquals(0.0F, wall8.getYEnd(), 0.01F);
      assertEquals(0.0F, wall8.getThickness(), 0.01F);
      assertEquals(0.0F, wall8.getYStart(), 0.01F);
      assertEquals(0.0F, wall8.getYArcCircleCenter(), 0.01F);
      assertNull(wall8.getLeftSideColor());
      assertEquals(0.0F, wall8.getLength(), 0.01F);
      assertEquals(0.0F, wall8.getLeftSideShininess(), 0.01F);
      
      wall7.setWallAtEnd(wall6);
      assertFalse(wall0.equals((Object)wall7));
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall0.equals((Object)wall4));
      assertFalse(wall2.equals((Object)wall4));
      assertFalse(wall2.equals((Object)wall7));
      assertFalse(wall2.equals((Object)wall1));
      assertFalse(wall4.equals((Object)wall5));
      assertFalse(wall4.equals((Object)wall8));
      assertFalse(wall4.equals((Object)wall7));
      assertFalse(wall4.equals((Object)wall6));
      assertFalse(wall4.equals((Object)wall0));
      assertFalse(wall4.equals((Object)wall3));
      assertFalse(wall4.equals((Object)wall2));
      assertFalse(wall4.equals((Object)wall1));
      assertFalse(wall5.equals((Object)wall1));
      assertFalse(wall5.equals((Object)wall4));
      assertFalse(wall5.equals((Object)wall7));
      assertFalse(wall6.equals((Object)wall7));
      assertFalse(wall6.equals((Object)wall4));
      assertFalse(wall6.equals((Object)wall1));
      assertFalse(wall7.equals((Object)wall6));
      assertFalse(wall7.equals((Object)wall4));
      assertFalse(wall7.equals((Object)wall2));
      assertFalse(wall7.equals((Object)wall8));
      assertFalse(wall7.equals((Object)wall1));
      assertFalse(wall7.equals((Object)wall5));
      assertFalse(wall7.equals((Object)wall3));
      assertFalse(wall7.equals((Object)wall0));
      assertNotSame(wall0, wall7);
      assertSame(wall0, wall3);
      assertNotSame(wall0, wall1);
      assertSame(wall0, wall6);
      assertSame(wall0, wall8);
      assertSame(wall0, wall5);
      assertNotSame(wall0, wall4);
      assertSame(wall0, wall2);
      assertSame(wall2, wall6);
      assertSame(wall2, wall8);
      assertNotSame(wall2, wall4);
      assertSame(wall2, wall5);
      assertNotSame(wall2, wall7);
      assertSame(wall2, wall0);
      assertSame(wall2, wall3);
      assertNotSame(wall2, wall1);
      assertNotSame(wall4, wall5);
      assertNotSame(wall4, wall8);
      assertNotSame(wall4, wall7);
      assertNotSame(wall4, wall6);
      assertNotSame(wall4, wall0);
      assertNotSame(wall4, wall3);
      assertNotSame(wall4, wall2);
      assertNotSame(wall4, wall1);
      assertSame(wall5, wall0);
      assertSame(wall5, wall3);
      assertSame(wall5, wall8);
      assertSame(wall5, wall6);
      assertNotSame(wall5, wall1);
      assertNotSame(wall5, wall4);
      assertSame(wall5, wall2);
      assertNotSame(wall5, wall7);
      assertNotSame(wall6, wall7);
      assertSame(wall6, wall0);
      assertSame(wall6, wall3);
      assertSame(wall6, wall5);
      assertNotSame(wall6, wall4);
      assertSame(wall6, wall2);
      assertSame(wall6, wall8);
      assertNotSame(wall6, wall1);
      assertNotSame(wall7, wall6);
      assertNotSame(wall7, wall4);
      assertNotSame(wall7, wall2);
      assertNotSame(wall7, wall8);
      assertNotSame(wall7, wall1);
      assertNotSame(wall7, wall5);
      assertNotSame(wall7, wall3);
      assertNotSame(wall7, wall0);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertNull(wall0.getHeight());
      assertEquals(0.0F, wall2.getYArcCircleCenter(), 0.01F);
      assertNull(wall2.getHeightAtEnd());
      assertEquals(0.0F, wall2.getYStart(), 0.01F);
      assertNull(wall2.getHeight());
      assertNull(wall2.getArcExtent());
      assertNull(wall2.getRightSideColor());
      assertEquals(0.0F, wall2.getThickness(), 0.01F);
      assertEquals(0.0F, wall2.getLeftSideShininess(), 0.01F);
      assertFalse(wall2.isTrapezoidal());
      assertEquals(0.0F, wall2.getLength(), 0.01F);
      assertEquals(0.0F, wall2.getXEnd(), 0.01F);
      assertEquals(0.0F, wall2.getYEnd(), 0.01F);
      assertNull(wall2.getLeftSideColor());
      assertEquals(0.0F, wall2.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall2.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall2.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall2.getXStart(), 0.01F);
      assertEquals(2382.0F, wall4.getYEnd(), 0.01F);
      assertEquals(2382.0F, wall4.getYArcCircleCenter(), 0.01F);
      assertEquals(1105.2856F, wall4.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(552.7428F, wall4.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall4.getLeftSideShininess(), 0.01F);
      assertNull(wall4.getArcExtent());
      assertNull(wall4.getRightSideColor());
      assertEquals(1105.3856F, wall4.getXEnd(), 0.01F);
      assertNull(wall4.getLeftSideColor());
      assertEquals(1105.2856F, wall4.getLength(), 0.01F);
      assertNull(wall4.getHeight());
      assertNull(wall4.getHeightAtEnd());
      assertEquals(0.1F, wall4.getXStart(), 0.01F);
      assertEquals(2382.0F, wall4.getThickness(), 0.01F);
      assertEquals(0.0F, wall4.getRightSideShininess(), 0.01F);
      assertFalse(wall4.isTrapezoidal());
      assertEquals(2382.0F, wall4.getYStart(), 0.01F);
      assertEquals(0.0F, wall5.getRightSideShininess(), 0.01F);
      assertNull(wall5.getHeight());
      assertNull(wall5.getArcExtent());
      assertNull(wall5.getRightSideColor());
      assertEquals(0.0F, wall5.getLength(), 0.01F);
      assertEquals(0.0F, wall5.getYEnd(), 0.01F);
      assertEquals(0.0F, wall5.getXEnd(), 0.01F);
      assertEquals(0.0F, wall5.getYArcCircleCenter(), 0.01F);
      assertNull(wall5.getLeftSideColor());
      assertEquals(0.0F, wall5.getThickness(), 0.01F);
      assertEquals(0.0F, wall5.getXStart(), 0.01F);
      assertEquals(0.0F, wall5.getLeftSideShininess(), 0.01F);
      assertFalse(wall5.isTrapezoidal());
      assertEquals(0.0F, wall5.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall5.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall5.getYStart(), 0.01F);
      assertNull(wall5.getHeightAtEnd());
      assertEquals(0.0F, wall6.getThickness(), 0.01F);
      assertEquals(0.0F, wall6.getXStart(), 0.01F);
      assertEquals(0.0F, wall6.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall6.getYStart(), 0.01F);
      assertEquals(0.0F, wall6.getYEnd(), 0.01F);
      assertEquals(0.0F, wall6.getXEnd(), 0.01F);
      assertEquals(0.0F, wall6.getLength(), 0.01F);
      assertEquals(0.0F, wall6.getLeftSideShininess(), 0.01F);
      assertNull(wall6.getArcExtent());
      assertNull(wall6.getRightSideColor());
      assertEquals(0.0F, wall6.getXArcCircleCenter(), 0.01F);
      assertNull(wall6.getHeightAtEnd());
      assertNull(wall6.getLeftSideColor());
      assertNull(wall6.getHeight());
      assertEquals(0.0F, wall6.getStartPointToEndPointDistance(), 0.01F);
      assertFalse(wall6.isTrapezoidal());
      assertEquals(0.0F, wall6.getRightSideShininess(), 0.01F);
      assertEquals(0.1F, wall7.getXStart(), 0.01F);
      assertEquals(1105.2856F, wall7.getLength(), 0.01F);
      assertEquals(2382.0F, wall7.getYStart(), 0.01F);
      assertEquals(2382.0F, wall7.getThickness(), 0.01F);
      assertFalse(wall7.isTrapezoidal());
      assertEquals(1105.3856F, wall7.getXEnd(), 0.01F);
      assertNull(wall7.getHeightAtEnd());
      assertNull(wall7.getArcExtent());
      assertNull(wall7.getRightSideColor());
      assertEquals(2382.0F, wall7.getYArcCircleCenter(), 0.01F);
      assertNull(wall7.getHeight());
      assertEquals(0.0F, wall7.getRightSideShininess(), 0.01F);
      assertEquals(1105.2856F, wall7.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall7.getLeftSideShininess(), 0.01F);
      assertNull(wall7.getLeftSideColor());
      assertEquals(2382.0F, wall7.getYEnd(), 0.01F);
      assertEquals(552.7428F, wall7.getXArcCircleCenter(), 0.01F);
      
      Wall wall9 = wall8.clone();
      assertFalse(wall0.equals((Object)wall7));
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall0.equals((Object)wall4));
      assertFalse(wall9.equals((Object)wall1));
      assertFalse(wall9.equals((Object)wall2));
      assertFalse(wall9.equals((Object)wall5));
      assertFalse(wall9.equals((Object)wall4));
      assertFalse(wall9.equals((Object)wall6));
      assertFalse(wall9.equals((Object)wall8));
      assertFalse(wall9.equals((Object)wall0));
      assertFalse(wall9.equals((Object)wall3));
      assertFalse(wall9.equals((Object)wall7));
      assertFalse(wall2.equals((Object)wall4));
      assertFalse(wall2.equals((Object)wall7));
      assertFalse(wall2.equals((Object)wall1));
      assertFalse(wall5.equals((Object)wall1));
      assertFalse(wall5.equals((Object)wall4));
      assertFalse(wall5.equals((Object)wall7));
      assertFalse(wall6.equals((Object)wall7));
      assertFalse(wall6.equals((Object)wall4));
      assertFalse(wall6.equals((Object)wall1));
      assertFalse(wall8.equals((Object)wall4));
      assertFalse(wall8.equals((Object)wall7));
      assertFalse(wall8.equals((Object)wall1));
      assertNotNull(wall9);
      assertNotSame(wall0, wall7);
      assertNotSame(wall0, wall9);
      assertSame(wall0, wall3);
      assertNotSame(wall0, wall1);
      assertSame(wall0, wall6);
      assertSame(wall0, wall8);
      assertSame(wall0, wall5);
      assertNotSame(wall0, wall4);
      assertSame(wall0, wall2);
      assertNotSame(wall9, wall1);
      assertNotSame(wall9, wall2);
      assertNotSame(wall9, wall5);
      assertNotSame(wall9, wall4);
      assertNotSame(wall9, wall6);
      assertNotSame(wall9, wall8);
      assertNotSame(wall9, wall0);
      assertNotSame(wall9, wall3);
      assertNotSame(wall9, wall7);
      assertSame(wall2, wall6);
      assertSame(wall2, wall8);
      assertNotSame(wall2, wall4);
      assertNotSame(wall2, wall9);
      assertSame(wall2, wall5);
      assertNotSame(wall2, wall7);
      assertSame(wall2, wall0);
      assertSame(wall2, wall3);
      assertNotSame(wall2, wall1);
      assertNotSame(wall5, wall9);
      assertSame(wall5, wall0);
      assertSame(wall5, wall3);
      assertSame(wall5, wall8);
      assertSame(wall5, wall6);
      assertNotSame(wall5, wall1);
      assertNotSame(wall5, wall4);
      assertSame(wall5, wall2);
      assertNotSame(wall5, wall7);
      assertNotSame(wall6, wall9);
      assertNotSame(wall6, wall7);
      assertSame(wall6, wall0);
      assertSame(wall6, wall3);
      assertSame(wall6, wall5);
      assertNotSame(wall6, wall4);
      assertSame(wall6, wall2);
      assertSame(wall6, wall8);
      assertNotSame(wall6, wall1);
      assertNotSame(wall8, wall4);
      assertSame(wall8, wall2);
      assertSame(wall8, wall5);
      assertNotSame(wall8, wall9);
      assertSame(wall8, wall0);
      assertSame(wall8, wall3);
      assertNotSame(wall8, wall7);
      assertSame(wall8, wall6);
      assertNotSame(wall8, wall1);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertNull(wall0.getHeight());
      assertNull(wall9.getLeftSideColor());
      assertEquals(0.0F, wall9.getLength(), 0.01F);
      assertFalse(wall9.isTrapezoidal());
      assertEquals(0.0F, wall9.getRightSideShininess(), 0.01F);
      assertNull(wall9.getArcExtent());
      assertEquals(0.0F, wall9.getLeftSideShininess(), 0.01F);
      assertNull(wall9.getRightSideColor());
      assertNull(wall9.getHeightAtEnd());
      assertEquals(0.0F, wall9.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall9.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall9.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall9.getYStart(), 0.01F);
      assertEquals(0.0F, wall9.getThickness(), 0.01F);
      assertEquals(0.0F, wall9.getXStart(), 0.01F);
      assertNull(wall9.getHeight());
      assertEquals(0.0F, wall9.getXEnd(), 0.01F);
      assertEquals(0.0F, wall9.getYEnd(), 0.01F);
      assertEquals(0.0F, wall2.getYArcCircleCenter(), 0.01F);
      assertNull(wall2.getHeightAtEnd());
      assertEquals(0.0F, wall2.getYStart(), 0.01F);
      assertNull(wall2.getHeight());
      assertNull(wall2.getArcExtent());
      assertNull(wall2.getRightSideColor());
      assertEquals(0.0F, wall2.getThickness(), 0.01F);
      assertEquals(0.0F, wall2.getLeftSideShininess(), 0.01F);
      assertFalse(wall2.isTrapezoidal());
      assertEquals(0.0F, wall2.getLength(), 0.01F);
      assertEquals(0.0F, wall2.getXEnd(), 0.01F);
      assertEquals(0.0F, wall2.getYEnd(), 0.01F);
      assertNull(wall2.getLeftSideColor());
      assertEquals(0.0F, wall2.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall2.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall2.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall2.getXStart(), 0.01F);
      assertEquals(0.0F, wall5.getRightSideShininess(), 0.01F);
      assertNull(wall5.getHeight());
      assertNull(wall5.getArcExtent());
      assertNull(wall5.getRightSideColor());
      assertEquals(0.0F, wall5.getLength(), 0.01F);
      assertEquals(0.0F, wall5.getYEnd(), 0.01F);
      assertEquals(0.0F, wall5.getXEnd(), 0.01F);
      assertEquals(0.0F, wall5.getYArcCircleCenter(), 0.01F);
      assertNull(wall5.getLeftSideColor());
      assertEquals(0.0F, wall5.getThickness(), 0.01F);
      assertEquals(0.0F, wall5.getXStart(), 0.01F);
      assertEquals(0.0F, wall5.getLeftSideShininess(), 0.01F);
      assertFalse(wall5.isTrapezoidal());
      assertEquals(0.0F, wall5.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall5.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall5.getYStart(), 0.01F);
      assertNull(wall5.getHeightAtEnd());
      assertEquals(0.0F, wall6.getThickness(), 0.01F);
      assertEquals(0.0F, wall6.getXStart(), 0.01F);
      assertEquals(0.0F, wall6.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall6.getYStart(), 0.01F);
      assertEquals(0.0F, wall6.getYEnd(), 0.01F);
      assertEquals(0.0F, wall6.getXEnd(), 0.01F);
      assertEquals(0.0F, wall6.getLength(), 0.01F);
      assertEquals(0.0F, wall6.getLeftSideShininess(), 0.01F);
      assertNull(wall6.getArcExtent());
      assertNull(wall6.getRightSideColor());
      assertEquals(0.0F, wall6.getXArcCircleCenter(), 0.01F);
      assertNull(wall6.getHeightAtEnd());
      assertNull(wall6.getLeftSideColor());
      assertNull(wall6.getHeight());
      assertEquals(0.0F, wall6.getStartPointToEndPointDistance(), 0.01F);
      assertFalse(wall6.isTrapezoidal());
      assertEquals(0.0F, wall6.getRightSideShininess(), 0.01F);
      assertNull(wall8.getHeightAtEnd());
      assertEquals(0.0F, wall8.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall8.getArcExtent());
      assertNull(wall8.getRightSideColor());
      assertNull(wall8.getHeight());
      assertEquals(0.0F, wall8.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall8.getXStart(), 0.01F);
      assertEquals(0.0F, wall8.getRightSideShininess(), 0.01F);
      assertFalse(wall8.isTrapezoidal());
      assertEquals(0.0F, wall8.getXEnd(), 0.01F);
      assertEquals(0.0F, wall8.getYEnd(), 0.01F);
      assertEquals(0.0F, wall8.getThickness(), 0.01F);
      assertEquals(0.0F, wall8.getYStart(), 0.01F);
      assertEquals(0.0F, wall8.getYArcCircleCenter(), 0.01F);
      assertNull(wall8.getLeftSideColor());
      assertEquals(0.0F, wall8.getLength(), 0.01F);
      assertEquals(0.0F, wall8.getLeftSideShininess(), 0.01F);
      
      float[][] floatArray0 = wall6.getPoints();
      assertFalse(wall0.equals((Object)wall7));
      assertFalse(wall0.equals((Object)wall9));
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall0.equals((Object)wall4));
      assertFalse(wall2.equals((Object)wall4));
      assertFalse(wall2.equals((Object)wall9));
      assertFalse(wall2.equals((Object)wall7));
      assertFalse(wall2.equals((Object)wall1));
      assertFalse(wall5.equals((Object)wall9));
      assertFalse(wall5.equals((Object)wall1));
      assertFalse(wall5.equals((Object)wall4));
      assertFalse(wall5.equals((Object)wall7));
      assertFalse(wall6.equals((Object)wall9));
      assertFalse(wall6.equals((Object)wall7));
      assertFalse(wall6.equals((Object)wall4));
      assertFalse(wall6.equals((Object)wall1));
      assertNotNull(floatArray0);
      assertEquals(4, floatArray0.length);
      assertNotSame(wall0, wall7);
      assertNotSame(wall0, wall9);
      assertSame(wall0, wall3);
      assertNotSame(wall0, wall1);
      assertSame(wall0, wall6);
      assertSame(wall0, wall8);
      assertSame(wall0, wall5);
      assertNotSame(wall0, wall4);
      assertSame(wall0, wall2);
      assertSame(wall2, wall6);
      assertSame(wall2, wall8);
      assertNotSame(wall2, wall4);
      assertNotSame(wall2, wall9);
      assertSame(wall2, wall5);
      assertNotSame(wall2, wall7);
      assertSame(wall2, wall0);
      assertSame(wall2, wall3);
      assertNotSame(wall2, wall1);
      assertNotSame(wall5, wall9);
      assertSame(wall5, wall0);
      assertSame(wall5, wall3);
      assertSame(wall5, wall8);
      assertSame(wall5, wall6);
      assertNotSame(wall5, wall1);
      assertNotSame(wall5, wall4);
      assertSame(wall5, wall2);
      assertNotSame(wall5, wall7);
      assertNotSame(wall6, wall9);
      assertNotSame(wall6, wall7);
      assertSame(wall6, wall0);
      assertSame(wall6, wall3);
      assertSame(wall6, wall5);
      assertNotSame(wall6, wall4);
      assertSame(wall6, wall2);
      assertSame(wall6, wall8);
      assertNotSame(wall6, wall1);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertNull(wall0.getHeight());
      assertEquals(0.0F, wall2.getYArcCircleCenter(), 0.01F);
      assertNull(wall2.getHeightAtEnd());
      assertEquals(0.0F, wall2.getYStart(), 0.01F);
      assertNull(wall2.getHeight());
      assertNull(wall2.getArcExtent());
      assertNull(wall2.getRightSideColor());
      assertEquals(0.0F, wall2.getThickness(), 0.01F);
      assertEquals(0.0F, wall2.getLeftSideShininess(), 0.01F);
      assertFalse(wall2.isTrapezoidal());
      assertEquals(0.0F, wall2.getLength(), 0.01F);
      assertEquals(0.0F, wall2.getXEnd(), 0.01F);
      assertEquals(0.0F, wall2.getYEnd(), 0.01F);
      assertNull(wall2.getLeftSideColor());
      assertEquals(0.0F, wall2.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall2.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall2.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall2.getXStart(), 0.01F);
      assertEquals(0.0F, wall5.getRightSideShininess(), 0.01F);
      assertNull(wall5.getHeight());
      assertNull(wall5.getArcExtent());
      assertNull(wall5.getRightSideColor());
      assertEquals(0.0F, wall5.getLength(), 0.01F);
      assertEquals(0.0F, wall5.getYEnd(), 0.01F);
      assertEquals(0.0F, wall5.getXEnd(), 0.01F);
      assertEquals(0.0F, wall5.getYArcCircleCenter(), 0.01F);
      assertNull(wall5.getLeftSideColor());
      assertEquals(0.0F, wall5.getThickness(), 0.01F);
      assertEquals(0.0F, wall5.getXStart(), 0.01F);
      assertEquals(0.0F, wall5.getLeftSideShininess(), 0.01F);
      assertFalse(wall5.isTrapezoidal());
      assertEquals(0.0F, wall5.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall5.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall5.getYStart(), 0.01F);
      assertNull(wall5.getHeightAtEnd());
      assertEquals(0.0F, wall6.getThickness(), 0.01F);
      assertEquals(0.0F, wall6.getXStart(), 0.01F);
      assertEquals(0.0F, wall6.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall6.getYStart(), 0.01F);
      assertEquals(0.0F, wall6.getYEnd(), 0.01F);
      assertEquals(0.0F, wall6.getXEnd(), 0.01F);
      assertEquals(0.0F, wall6.getLength(), 0.01F);
      assertEquals(0.0F, wall6.getLeftSideShininess(), 0.01F);
      assertNull(wall6.getArcExtent());
      assertNull(wall6.getRightSideColor());
      assertEquals(0.0F, wall6.getXArcCircleCenter(), 0.01F);
      assertNull(wall6.getHeightAtEnd());
      assertNull(wall6.getLeftSideColor());
      assertNull(wall6.getHeight());
      assertEquals(0.0F, wall6.getStartPointToEndPointDistance(), 0.01F);
      assertFalse(wall6.isTrapezoidal());
      assertEquals(0.0F, wall6.getRightSideShininess(), 0.01F);
      
      Integer integer0 = Integer.valueOf(11);
      assertNotNull(integer0);
      assertEquals(11, (int)integer0);
      
      Integer integer1 = Integer.valueOf(11);
      assertNotNull(integer1);
      assertEquals(11, (int)integer1);
      
      Integer integer2 = Integer.valueOf(11);
      assertNotNull(integer2);
      assertEquals(11, (int)integer2);
      
      Integer integer3 = Integer.valueOf((-1381));
      assertFalse(integer3.equals((Object)integer2));
      assertFalse(integer3.equals((Object)integer0));
      assertFalse(integer3.equals((Object)integer1));
      assertNotNull(integer3);
      assertEquals((-1381), (int)integer3);
      
      wall5.setRightSideColor(integer3);
      assertFalse(wall0.equals((Object)wall7));
      assertFalse(wall0.equals((Object)wall9));
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall0.equals((Object)wall4));
      assertFalse(integer3.equals((Object)integer2));
      assertFalse(integer3.equals((Object)integer0));
      assertFalse(integer3.equals((Object)integer1));
      assertFalse(wall2.equals((Object)wall4));
      assertFalse(wall2.equals((Object)wall9));
      assertFalse(wall2.equals((Object)wall7));
      assertFalse(wall2.equals((Object)wall1));
      assertFalse(wall5.equals((Object)wall9));
      assertFalse(wall5.equals((Object)wall1));
      assertFalse(wall5.equals((Object)wall4));
      assertFalse(wall5.equals((Object)wall7));
      assertNotSame(wall0, wall7);
      assertNotSame(wall0, wall9);
      assertSame(wall0, wall3);
      assertNotSame(wall0, wall1);
      assertSame(wall0, wall6);
      assertSame(wall0, wall8);
      assertSame(wall0, wall5);
      assertNotSame(wall0, wall4);
      assertSame(wall0, wall2);
      assertSame(wall2, wall6);
      assertSame(wall2, wall8);
      assertNotSame(wall2, wall4);
      assertNotSame(wall2, wall9);
      assertSame(wall2, wall5);
      assertNotSame(wall2, wall7);
      assertSame(wall2, wall0);
      assertSame(wall2, wall3);
      assertNotSame(wall2, wall1);
      assertNotSame(wall5, wall9);
      assertSame(wall5, wall0);
      assertSame(wall5, wall3);
      assertSame(wall5, wall8);
      assertSame(wall5, wall6);
      assertNotSame(wall5, wall1);
      assertNotSame(wall5, wall4);
      assertSame(wall5, wall2);
      assertNotSame(wall5, wall7);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals((-1381), (int)wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertNull(wall0.getHeight());
      assertEquals(0.0F, wall2.getYArcCircleCenter(), 0.01F);
      assertNull(wall2.getHeightAtEnd());
      assertEquals((-1381), (int)wall2.getRightSideColor());
      assertEquals(0.0F, wall2.getYStart(), 0.01F);
      assertNull(wall2.getHeight());
      assertNull(wall2.getArcExtent());
      assertEquals(0.0F, wall2.getThickness(), 0.01F);
      assertEquals(0.0F, wall2.getLeftSideShininess(), 0.01F);
      assertFalse(wall2.isTrapezoidal());
      assertEquals(0.0F, wall2.getLength(), 0.01F);
      assertEquals(0.0F, wall2.getXEnd(), 0.01F);
      assertEquals(0.0F, wall2.getYEnd(), 0.01F);
      assertNull(wall2.getLeftSideColor());
      assertEquals(0.0F, wall2.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall2.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall2.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall2.getXStart(), 0.01F);
      assertEquals(0.0F, wall5.getRightSideShininess(), 0.01F);
      assertNull(wall5.getHeight());
      assertNull(wall5.getArcExtent());
      assertEquals(0.0F, wall5.getLength(), 0.01F);
      assertEquals(0.0F, wall5.getYEnd(), 0.01F);
      assertEquals(0.0F, wall5.getXEnd(), 0.01F);
      assertEquals(0.0F, wall5.getYArcCircleCenter(), 0.01F);
      assertNull(wall5.getLeftSideColor());
      assertEquals(0.0F, wall5.getThickness(), 0.01F);
      assertEquals(0.0F, wall5.getXStart(), 0.01F);
      assertEquals(0.0F, wall5.getLeftSideShininess(), 0.01F);
      assertEquals((-1381), (int)wall5.getRightSideColor());
      assertFalse(wall5.isTrapezoidal());
      assertEquals(0.0F, wall5.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall5.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall5.getYStart(), 0.01F);
      assertNull(wall5.getHeightAtEnd());
  }

  @Test(timeout = 4000)
  public void test172()  throws Throwable  {
      Wall wall0 = new Wall(0.01F, 1747.2914F, 1747.2914F, 1.0F, 1747.2914F, 1747.2914F);
      assertNotNull(wall0);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(874.1457F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(1.0F, wall0.getYEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(873.6507F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(1747.2914F, wall0.getHeight(), 0.01F);
      assertEquals(1747.2914F, wall0.getXEnd(), 0.01F);
      assertEquals(2470.329F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.01F, wall0.getXStart(), 0.01F);
      assertEquals(1747.2914F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(1747.2914F, wall0.getThickness(), 0.01F);
      assertEquals(2470.329F, wall0.getLength(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      
      boolean boolean0 = wall0.containsPoint(1.0F, 445.4F, 2213.745F);
      assertTrue(boolean0);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(874.1457F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(1.0F, wall0.getYEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(873.6507F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(1747.2914F, wall0.getHeight(), 0.01F);
      assertEquals(1747.2914F, wall0.getXEnd(), 0.01F);
      assertEquals(2470.329F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.01F, wall0.getXStart(), 0.01F);
      assertEquals(1747.2914F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(1747.2914F, wall0.getThickness(), 0.01F);
      assertEquals(2470.329F, wall0.getLength(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      
      wall0.setYStart(2213.745F);
      assertEquals(2819.4385F, wall0.getLength(), 0.01F);
      assertEquals(2213.745F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(1107.3726F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(1.0F, wall0.getYEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(873.6507F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(1747.2914F, wall0.getHeight(), 0.01F);
      assertEquals(1747.2914F, wall0.getXEnd(), 0.01F);
      assertEquals(2819.4385F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.01F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(1747.2914F, wall0.getThickness(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      
      boolean boolean1 = wall0.intersectsRectangle(0.01F, (-3393.8887F), 1747.2914F, (-3393.8887F));
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      assertEquals(2819.4385F, wall0.getLength(), 0.01F);
      assertEquals(2213.745F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(1107.3726F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(1.0F, wall0.getYEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(873.6507F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(1747.2914F, wall0.getHeight(), 0.01F);
      assertEquals(1747.2914F, wall0.getXEnd(), 0.01F);
      assertEquals(2819.4385F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.01F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(1747.2914F, wall0.getThickness(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      
      Wall wall1 = new Wall(2213.745F, (-3393.8887F), 0.01F, 0.01F, (-3393.8887F), 1051.9F);
      assertFalse(wall1.equals((Object)wall0));
      assertNotNull(wall1);
      assertEquals(0.01F, wall1.getXEnd(), 0.01F);
      assertEquals(0.01F, wall1.getYEnd(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals((-1696.9393F), wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(1106.8776F, wall1.getXArcCircleCenter(), 0.01F);
      assertEquals((-3393.8887F), wall1.getThickness(), 0.01F);
      assertEquals(1051.9F, wall1.getHeight(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals(4052.0576F, wall1.getLength(), 0.01F);
      assertEquals((-3393.8887F), wall1.getYStart(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertEquals(4052.0576F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals(2213.745F, wall1.getXStart(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      
      wall0.setWallAtStart(wall1);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall1.equals((Object)wall0));
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      assertEquals(2819.4385F, wall0.getLength(), 0.01F);
      assertEquals(2213.745F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(1107.3726F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(1.0F, wall0.getYEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(873.6507F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(1747.2914F, wall0.getHeight(), 0.01F);
      assertEquals(1747.2914F, wall0.getXEnd(), 0.01F);
      assertEquals(2819.4385F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.01F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(1747.2914F, wall0.getThickness(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.01F, wall1.getXEnd(), 0.01F);
      assertEquals(0.01F, wall1.getYEnd(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals((-1696.9393F), wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(1106.8776F, wall1.getXArcCircleCenter(), 0.01F);
      assertEquals((-3393.8887F), wall1.getThickness(), 0.01F);
      assertEquals(1051.9F, wall1.getHeight(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals(4052.0576F, wall1.getLength(), 0.01F);
      assertEquals((-3393.8887F), wall1.getYStart(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertEquals(4052.0576F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals(2213.745F, wall1.getXStart(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      
      boolean boolean2 = wall0.containsWallStartAt((-3393.8887F), 2.0F, 1051.9F);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertNotSame(wall0, wall1);
      assertFalse(boolean2);
      assertEquals(2819.4385F, wall0.getLength(), 0.01F);
      assertEquals(2213.745F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(1107.3726F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(1.0F, wall0.getYEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(873.6507F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(1747.2914F, wall0.getHeight(), 0.01F);
      assertEquals(1747.2914F, wall0.getXEnd(), 0.01F);
      assertEquals(2819.4385F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.01F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(1747.2914F, wall0.getThickness(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      
      wall1.setXStart(0.0F);
      assertFalse(wall1.equals((Object)wall0));
      assertNotSame(wall1, wall0);
      assertEquals(0.01F, wall1.getXEnd(), 0.01F);
      assertEquals(3393.8987F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.01F, wall1.getYEnd(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals(0.005F, wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall1.getXStart(), 0.01F);
      assertEquals((-1696.9393F), wall1.getYArcCircleCenter(), 0.01F);
      assertEquals((-3393.8887F), wall1.getThickness(), 0.01F);
      assertEquals(1051.9F, wall1.getHeight(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals((-3393.8887F), wall1.getYStart(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertFalse(wall1.isTrapezoidal());
      assertEquals(3393.8987F, wall1.getLength(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      
      float float0 = wall0.getYEnd();
      assertFalse(wall0.equals((Object)wall1));
      assertNotSame(wall0, wall1);
      assertEquals(1.0F, float0, 0.01F);
      assertEquals(2819.4385F, wall0.getLength(), 0.01F);
      assertEquals(2213.745F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(1107.3726F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(1.0F, wall0.getYEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(873.6507F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(1747.2914F, wall0.getHeight(), 0.01F);
      assertEquals(1747.2914F, wall0.getXEnd(), 0.01F);
      assertEquals(2819.4385F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.01F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(1747.2914F, wall0.getThickness(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      
      wall0.setRightSideShininess((-3331.683F));
      assertFalse(wall0.equals((Object)wall1));
      assertNotSame(wall0, wall1);
      assertEquals(2819.4385F, wall0.getLength(), 0.01F);
      assertEquals(2213.745F, wall0.getYStart(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(1107.3726F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(1.0F, wall0.getYEnd(), 0.01F);
      assertEquals((-3331.683F), wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(873.6507F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(1747.2914F, wall0.getHeight(), 0.01F);
      assertEquals(1747.2914F, wall0.getXEnd(), 0.01F);
      assertEquals(2819.4385F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.01F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(1747.2914F, wall0.getThickness(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      
      Wall wall2 = wall1.clone();
      assertFalse(wall1.equals((Object)wall0));
      assertFalse(wall2.equals((Object)wall0));
      assertFalse(wall2.equals((Object)wall1));
      assertNotNull(wall2);
      assertNotSame(wall1, wall0);
      assertNotSame(wall1, wall2);
      assertNotSame(wall2, wall0);
      assertNotSame(wall2, wall1);
      assertEquals(0.01F, wall1.getXEnd(), 0.01F);
      assertEquals(3393.8987F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.01F, wall1.getYEnd(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals(0.005F, wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall1.getXStart(), 0.01F);
      assertEquals((-1696.9393F), wall1.getYArcCircleCenter(), 0.01F);
      assertEquals((-3393.8887F), wall1.getThickness(), 0.01F);
      assertEquals(1051.9F, wall1.getHeight(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals((-3393.8887F), wall1.getYStart(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertFalse(wall1.isTrapezoidal());
      assertEquals(3393.8987F, wall1.getLength(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals(0.0F, wall2.getLeftSideShininess(), 0.01F);
      assertFalse(wall2.isTrapezoidal());
      assertEquals(0.0F, wall2.getRightSideShininess(), 0.01F);
      assertEquals(3393.8987F, wall2.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-1696.9393F), wall2.getYArcCircleCenter(), 0.01F);
      assertNull(wall2.getLeftSideColor());
      assertEquals(0.005F, wall2.getXArcCircleCenter(), 0.01F);
      assertEquals(1051.9F, wall2.getHeight(), 0.01F);
      assertEquals(3393.8987F, wall2.getLength(), 0.01F);
      assertEquals((-3393.8887F), wall2.getThickness(), 0.01F);
      assertEquals(0.0F, wall2.getXStart(), 0.01F);
      assertEquals((-3393.8887F), wall2.getYStart(), 0.01F);
      assertNull(wall2.getArcExtent());
      assertNull(wall2.getRightSideColor());
      assertEquals(0.01F, wall2.getXEnd(), 0.01F);
      assertNull(wall2.getHeightAtEnd());
      assertEquals(0.01F, wall2.getYEnd(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test173()  throws Throwable  {
      Wall wall0 = new Wall((-13.933775F), 1.2353885F, 1.2353885F, (-13.933775F), (-13.933775F));
      assertNotNull(wall0);
      assertNull(wall0.getArcExtent());
      assertEquals((-6.349193F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(21.452436F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals((-13.933775F), wall0.getThickness(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(1.2353885F, wall0.getXEnd(), 0.01F);
      assertEquals((-13.933775F), wall0.getYEnd(), 0.01F);
      assertEquals((-6.349193F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(21.452436F, wall0.getLength(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals((-13.933775F), wall0.getXStart(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertNull(wall0.getHeight());
      assertEquals(1.2353885F, wall0.getYStart(), 0.01F);
      
      wall0.setYStart((-13.933775F));
      assertNull(wall0.getArcExtent());
      assertEquals((-6.349193F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals((-13.933775F), wall0.getThickness(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-13.933775F), wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(1.2353885F, wall0.getXEnd(), 0.01F);
      assertEquals((-13.933775F), wall0.getYEnd(), 0.01F);
      assertEquals(15.169164F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals((-13.933775F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(15.169164F, wall0.getLength(), 0.01F);
      assertEquals((-13.933775F), wall0.getXStart(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertNull(wall0.getHeight());
      
      Float float0 = new Float((-13.933775F));
      assertNotNull(float0);
      assertEquals((-13.933775F), (float)float0, 0.01F);
      
      Float float1 = new Float(3.271868944168);
      assertNotEquals((float)float1, (float)float0, 0.01F);
      assertNotNull(float1);
      assertEquals(3.271869F, (float)float1, 0.01F);
      
      float[][] floatArray0 = wall0.getPoints();
      assertNotNull(floatArray0);
      assertEquals(4, floatArray0.length);
      assertNull(wall0.getArcExtent());
      assertEquals((-6.349193F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals((-13.933775F), wall0.getThickness(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-13.933775F), wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(1.2353885F, wall0.getXEnd(), 0.01F);
      assertEquals((-13.933775F), wall0.getYEnd(), 0.01F);
      assertEquals(15.169164F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals((-13.933775F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(15.169164F, wall0.getLength(), 0.01F);
      assertEquals((-13.933775F), wall0.getXStart(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertNull(wall0.getHeight());
      
      HomeTexture homeTexture0 = wall0.getLeftSideTexture();
      assertNull(homeTexture0);
      assertNull(wall0.getArcExtent());
      assertEquals((-6.349193F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals((-13.933775F), wall0.getThickness(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-13.933775F), wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(1.2353885F, wall0.getXEnd(), 0.01F);
      assertEquals((-13.933775F), wall0.getYEnd(), 0.01F);
      assertEquals(15.169164F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals((-13.933775F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(15.169164F, wall0.getLength(), 0.01F);
      assertEquals((-13.933775F), wall0.getXStart(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertNull(wall0.getHeight());
  }

  @Test(timeout = 4000)
  public void test174()  throws Throwable  {
      Wall wall0 = new Wall(13.809036F, 13.809036F, 13.809036F, 13.809036F, 0.0F);
      assertNotNull(wall0);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(13.809036F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(13.809036F, wall0.getYStart(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals(13.809036F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(13.809036F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(13.809036F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(13.809036F, wall0.getYEnd(), 0.01F);
      assertNull(wall0.getHeight());
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      
      boolean boolean0 = wall0.containsWallStartAt(13.809036F, 0.0F, 13.809036F);
      assertTrue(boolean0);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(13.809036F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(13.809036F, wall0.getYStart(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals(13.809036F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(13.809036F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(13.809036F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(13.809036F, wall0.getYEnd(), 0.01F);
      assertNull(wall0.getHeight());
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      
      wall0.setWallAtStart(wall0);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(13.809036F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(13.809036F, wall0.getYStart(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals(13.809036F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(13.809036F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(13.809036F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(13.809036F, wall0.getYEnd(), 0.01F);
      assertNull(wall0.getHeight());
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      
      boolean boolean1 = wall0.containsPoint(13.809036F, 13.809036F, 13.809036F);
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(13.809036F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(13.809036F, wall0.getYStart(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals(13.809036F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(13.809036F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(13.809036F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(13.809036F, wall0.getYEnd(), 0.01F);
      assertNull(wall0.getHeight());
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      
      Wall wall1 = new Wall(13.809036F, (-1197.0072F), (-1.0F), 0.0F, (-2950.472F));
      assertFalse(wall1.equals((Object)wall0));
      assertNotNull(wall1);
      assertEquals(1197.0988F, wall1.getLength(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals(6.404518F, wall1.getXArcCircleCenter(), 0.01F);
      assertEquals((-2950.472F), wall1.getThickness(), 0.01F);
      assertEquals((-1197.0072F), wall1.getYStart(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertNull(wall1.getLeftSideColor());
      assertEquals(1197.0988F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(13.809036F, wall1.getXStart(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertNull(wall1.getHeight());
      assertEquals((-598.5036F), wall1.getYArcCircleCenter(), 0.01F);
      assertEquals((-1.0F), wall1.getXEnd(), 0.01F);
      assertEquals(0.0F, wall1.getYEnd(), 0.01F);
      
      LinkedList<Wall> linkedList0 = new LinkedList<Wall>();
      assertFalse(linkedList0.contains(wall0));
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      LinkedList<Wall> linkedList1 = new LinkedList<Wall>();
      assertFalse(linkedList1.contains(wall0));
      assertTrue(linkedList1.equals((Object)linkedList0));
      assertNotNull(linkedList1);
      assertEquals(0, linkedList1.size());
      
      boolean boolean2 = linkedList1.offerLast(wall1);
      assertTrue(linkedList1.contains(wall1));
      assertFalse(linkedList1.contains(wall0));
      assertFalse(wall1.equals((Object)wall0));
      assertFalse(linkedList1.equals((Object)linkedList0));
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertNotSame(wall1, wall0);
      assertNotSame(linkedList1, linkedList0);
      assertTrue(boolean2);
      assertEquals(1197.0988F, wall1.getLength(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals(6.404518F, wall1.getXArcCircleCenter(), 0.01F);
      assertEquals((-2950.472F), wall1.getThickness(), 0.01F);
      assertEquals((-1197.0072F), wall1.getYStart(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertNull(wall1.getLeftSideColor());
      assertEquals(1197.0988F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(13.809036F, wall1.getXStart(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertNull(wall1.getHeight());
      assertEquals((-598.5036F), wall1.getYArcCircleCenter(), 0.01F);
      assertEquals((-1.0F), wall1.getXEnd(), 0.01F);
      assertEquals(0.0F, wall1.getYEnd(), 0.01F);
      assertEquals(1, linkedList1.size());
      
      List<Wall> list0 = Wall.clone((List<Wall>) linkedList1);
      assertTrue(linkedList1.contains(wall1));
      assertFalse(linkedList1.contains(wall0));
      assertFalse(list0.contains(wall0));
      assertFalse(linkedList1.equals((Object)linkedList0));
      assertNotNull(list0);
      assertNotSame(linkedList1, linkedList0);
      assertEquals(1, linkedList1.size());
      assertFalse(list0.isEmpty());
      assertEquals(1, list0.size());
      
      Wall wall2 = wall0.getWallAtEnd();
      assertFalse(wall0.equals((Object)wall1));
      assertNull(wall2);
      assertNotSame(wall0, wall1);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(13.809036F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(13.809036F, wall0.getYStart(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals(13.809036F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(13.809036F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(13.809036F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(13.809036F, wall0.getYEnd(), 0.01F);
      assertNull(wall0.getHeight());
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      
      Integer integer0 = new Integer((-3125));
      assertNotNull(integer0);
      assertEquals((-3125), (int)integer0);
      
      wall1.setLeftSideColor(integer0);
      assertFalse(wall1.equals((Object)wall0));
      assertNotSame(wall1, wall0);
      assertEquals(1197.0988F, wall1.getLength(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals(6.404518F, wall1.getXArcCircleCenter(), 0.01F);
      assertEquals((-2950.472F), wall1.getThickness(), 0.01F);
      assertEquals((-1197.0072F), wall1.getYStart(), 0.01F);
      assertEquals((-3125), (int)wall1.getLeftSideColor());
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals(1197.0988F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(13.809036F, wall1.getXStart(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertNull(wall1.getHeight());
      assertEquals((-598.5036F), wall1.getYArcCircleCenter(), 0.01F);
      assertEquals((-1.0F), wall1.getXEnd(), 0.01F);
      assertEquals(0.0F, wall1.getYEnd(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test175()  throws Throwable  {
      Wall wall0 = new Wall(0.1F, 0.1F, 0.1F, 0.1F, 0.1F, 0.1F);
      assertNotNull(wall0);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.1F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.1F, wall0.getHeight(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.1F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(0.1F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.1F, wall0.getXStart(), 0.01F);
      assertEquals(0.1F, wall0.getYStart(), 0.01F);
      assertEquals(0.1F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.1F, wall0.getThickness(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      
      Float float0 = new Float((double) 0.1F);
      assertNotNull(float0);
      assertEquals(0.1F, (float)float0, 0.01F);
      
      wall0.setArcExtent(float0);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.1F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.1F, wall0.getHeight(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.1F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(0.1F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals(0.1F, wall0.getArcExtent(), 0.01F);
      assertEquals(0.1F, wall0.getXStart(), 0.01F);
      assertEquals(0.1F, wall0.getYStart(), 0.01F);
      assertEquals(0.1F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.1F, wall0.getThickness(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      
      float[][] floatArray0 = wall0.getPoints();
      assertNotNull(floatArray0);
      assertEquals(4, floatArray0.length);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.1F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.1F, wall0.getHeight(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.1F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(0.1F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals(0.1F, wall0.getArcExtent(), 0.01F);
      assertEquals(0.1F, wall0.getXStart(), 0.01F);
      assertEquals(0.1F, wall0.getYStart(), 0.01F);
      assertEquals(0.1F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.1F, wall0.getThickness(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test176()  throws Throwable  {
      Wall wall0 = new Wall(2452.9531F, (-1.321065F), 2452.9531F, 2452.9531F, (-1.321065F), 2452.9531F);
      assertNotNull(wall0);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(1225.816F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(2454.2742F, wall0.getLength(), 0.01F);
      assertEquals(2452.9531F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(2452.9531F, wall0.getXEnd(), 0.01F);
      assertEquals(2452.9531F, wall0.getYEnd(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(2452.9531F, wall0.getHeight(), 0.01F);
      assertEquals(2454.2742F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(2452.9531F, wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals((-1.321065F), wall0.getThickness(), 0.01F);
      assertEquals((-1.321065F), wall0.getYStart(), 0.01F);
      
      LinkedList<Wall> linkedList0 = new LinkedList<Wall>();
      assertFalse(linkedList0.contains(wall0));
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      Wall wall1 = wall0.getWallAtEnd();
      assertNull(wall1);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(1225.816F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(2454.2742F, wall0.getLength(), 0.01F);
      assertEquals(2452.9531F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(2452.9531F, wall0.getXEnd(), 0.01F);
      assertEquals(2452.9531F, wall0.getYEnd(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(2452.9531F, wall0.getHeight(), 0.01F);
      assertEquals(2454.2742F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(2452.9531F, wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals((-1.321065F), wall0.getThickness(), 0.01F);
      assertEquals((-1.321065F), wall0.getYStart(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test177()  throws Throwable  {
      Wall wall0 = new Wall(0.01F, 1747.2914F, 1747.2914F, 1.0F, 1747.2914F, 1747.2914F);
      assertNotNull(wall0);
      assertEquals(2470.329F, wall0.getLength(), 0.01F);
      assertEquals(873.6507F, wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(874.1457F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(2470.329F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(1747.2914F, wall0.getHeight(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(1.0F, wall0.getYEnd(), 0.01F);
      assertEquals(1747.2914F, wall0.getXEnd(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.01F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(1747.2914F, wall0.getThickness(), 0.01F);
      assertEquals(1747.2914F, wall0.getYStart(), 0.01F);
      
      boolean boolean0 = wall0.containsPoint(1.0F, 445.4F, 2213.745F);
      assertTrue(boolean0);
      assertEquals(2470.329F, wall0.getLength(), 0.01F);
      assertEquals(873.6507F, wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(874.1457F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(2470.329F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(1747.2914F, wall0.getHeight(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(1.0F, wall0.getYEnd(), 0.01F);
      assertEquals(1747.2914F, wall0.getXEnd(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.01F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(1747.2914F, wall0.getThickness(), 0.01F);
      assertEquals(1747.2914F, wall0.getYStart(), 0.01F);
      
      wall0.setYStart(2213.745F);
      assertEquals(873.6507F, wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getHeightAtEnd());
      assertEquals(2213.745F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(2819.4385F, wall0.getLength(), 0.01F);
      assertEquals(2819.4385F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(1107.3726F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(1747.2914F, wall0.getHeight(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(1.0F, wall0.getYEnd(), 0.01F);
      assertEquals(1747.2914F, wall0.getXEnd(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.01F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(1747.2914F, wall0.getThickness(), 0.01F);
      
      float float0 = Float.sum(2213.745F, 445.4F);
      assertEquals(2659.145F, float0, 0.01F);
      
      Float float1 = new Float(0.01F);
      assertNotEquals((float)float1, (float)float0, 0.01F);
      assertNotNull(float1);
      assertEquals(0.01F, (float)float1, 0.01F);
      
      wall0.setArcExtent(float1);
      assertNotEquals((float)float1, (float)float0, 0.01F);
      assertEquals(222146.33F, wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.01F, wall0.getArcExtent(), 0.01F);
      assertEquals(2213.745F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(2819.4385F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(1747.2914F, wall0.getHeight(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(1.0F, wall0.getYEnd(), 0.01F);
      assertEquals(1747.2914F, wall0.getXEnd(), 0.01F);
      assertEquals(2819.4502F, wall0.getLength(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(175834.06F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.01F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(1747.2914F, wall0.getThickness(), 0.01F);
      
      boolean boolean1 = wall0.containsWallStartAt((-534.42F), 613.716F, 1.0F);
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      assertEquals(222146.33F, wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.01F, wall0.getArcExtent(), 0.01F);
      assertEquals(2213.745F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(2819.4385F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(1747.2914F, wall0.getHeight(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(1.0F, wall0.getYEnd(), 0.01F);
      assertEquals(1747.2914F, wall0.getXEnd(), 0.01F);
      assertEquals(2819.4502F, wall0.getLength(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(175834.06F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.01F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(1747.2914F, wall0.getThickness(), 0.01F);
      
      float float2 = wall0.getXArcCircleCenter();
      assertNotEquals(float2, float0, 0.01F);
      assertEquals(222146.33F, float2, 0.01F);
      assertEquals(222146.33F, wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.01F, wall0.getArcExtent(), 0.01F);
      assertEquals(2213.745F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(2819.4385F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(1747.2914F, wall0.getHeight(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(1.0F, wall0.getYEnd(), 0.01F);
      assertEquals(1747.2914F, wall0.getXEnd(), 0.01F);
      assertEquals(2819.4502F, wall0.getLength(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(175834.06F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.01F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(1747.2914F, wall0.getThickness(), 0.01F);
      
      wall0.setYStart(613.716F);
      assertEquals(613.716F, wall0.getYStart(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.01F, wall0.getArcExtent(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(1747.2914F, wall0.getHeight(), 0.01F);
      assertEquals(62144.742F, wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(1851.5974F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(1.0F, wall0.getYEnd(), 0.01F);
      assertEquals(175034.05F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(1747.2914F, wall0.getXEnd(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.01F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(1747.2914F, wall0.getThickness(), 0.01F);
      assertEquals(1851.6052F, wall0.getLength(), 0.01F);
      
      boolean boolean2 = wall0.intersectsRectangle(445.4F, 2659.145F, 0.01F, 1747.2914F);
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      assertFalse(boolean2);
      assertEquals(613.716F, wall0.getYStart(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.01F, wall0.getArcExtent(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(1747.2914F, wall0.getHeight(), 0.01F);
      assertEquals(62144.742F, wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(1851.5974F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(1.0F, wall0.getYEnd(), 0.01F);
      assertEquals(175034.05F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(1747.2914F, wall0.getXEnd(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.01F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(1747.2914F, wall0.getThickness(), 0.01F);
      assertEquals(1851.6052F, wall0.getLength(), 0.01F);
      
      String string0 = "#dK";
      // Undeclared exception!
      try { 
        Wall.Property.valueOf("#dK");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant com.eteks.sweethome3d.model.Wall.Property.#dK
         //
         verifyException("java.lang.Enum", e);
      }
  }

  @Test(timeout = 4000)
  public void test178()  throws Throwable  {
      Wall wall0 = new Wall(0.01F, 0.01F, 0.01F, 1.0F, 0.01F, 0.01F);
      assertNotNull(wall0);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.01F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.01F, wall0.getXEnd(), 0.01F);
      assertEquals(0.99F, wall0.getLength(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.01F, wall0.getHeight(), 0.01F);
      assertEquals(0.01F, wall0.getXStart(), 0.01F);
      assertEquals(0.01F, wall0.getYStart(), 0.01F);
      assertEquals(0.01F, wall0.getThickness(), 0.01F);
      assertEquals(1.0F, wall0.getYEnd(), 0.01F);
      assertEquals(0.99F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.505F, wall0.getYArcCircleCenter(), 0.01F);
      
      float float0 = Float.sum(0.01F, 0.0F);
      assertEquals(0.01F, float0, 0.01F);
      
      Wall wall1 = new Wall((-2720.2073F), 1.0F, (-2720.2073F), 0.0F, 0.1F, 155.2F);
      assertFalse(wall1.equals((Object)wall0));
      assertNotNull(wall1);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals(155.2F, wall1.getHeight(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals((-2720.2073F), wall1.getXStart(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals((-2720.2073F), wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(1.0F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall1.getYEnd(), 0.01F);
      assertEquals(1.0F, wall1.getYStart(), 0.01F);
      assertEquals(0.1F, wall1.getThickness(), 0.01F);
      assertEquals(1.0F, wall1.getLength(), 0.01F);
      assertEquals(0.5F, wall1.getYArcCircleCenter(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals((-2720.2073F), wall1.getXEnd(), 0.01F);
      
      boolean boolean0 = wall1.containsWallEndAt(2569.1F, (-1.0F), 502.1F);
      assertFalse(wall1.equals((Object)wall0));
      assertNotSame(wall1, wall0);
      assertFalse(boolean0);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals(155.2F, wall1.getHeight(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals((-2720.2073F), wall1.getXStart(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals((-2720.2073F), wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(1.0F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall1.getYEnd(), 0.01F);
      assertEquals(1.0F, wall1.getYStart(), 0.01F);
      assertEquals(0.1F, wall1.getThickness(), 0.01F);
      assertEquals(1.0F, wall1.getLength(), 0.01F);
      assertEquals(0.5F, wall1.getYArcCircleCenter(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals((-2720.2073F), wall1.getXEnd(), 0.01F);
      
      wall1.setWallAtStart(wall0);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall1.equals((Object)wall0));
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.01F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.01F, wall0.getXEnd(), 0.01F);
      assertEquals(0.99F, wall0.getLength(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.01F, wall0.getHeight(), 0.01F);
      assertEquals(0.01F, wall0.getXStart(), 0.01F);
      assertEquals(0.01F, wall0.getYStart(), 0.01F);
      assertEquals(0.01F, wall0.getThickness(), 0.01F);
      assertEquals(1.0F, wall0.getYEnd(), 0.01F);
      assertEquals(0.99F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.505F, wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals(155.2F, wall1.getHeight(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals((-2720.2073F), wall1.getXStart(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals((-2720.2073F), wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(1.0F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall1.getYEnd(), 0.01F);
      assertEquals(1.0F, wall1.getYStart(), 0.01F);
      assertEquals(0.1F, wall1.getThickness(), 0.01F);
      assertEquals(1.0F, wall1.getLength(), 0.01F);
      assertEquals(0.5F, wall1.getYArcCircleCenter(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals((-2720.2073F), wall1.getXEnd(), 0.01F);
      
      Wall wall2 = wall1.getWallAtStart();
      assertFalse(wall1.equals((Object)wall0));
      assertFalse(wall2.equals((Object)wall1));
      assertNotNull(wall2);
      assertNotSame(wall1, wall2);
      assertNotSame(wall1, wall0);
      assertSame(wall2, wall0);
      assertNotSame(wall2, wall1);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals(155.2F, wall1.getHeight(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals((-2720.2073F), wall1.getXStart(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals((-2720.2073F), wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(1.0F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall1.getYEnd(), 0.01F);
      assertEquals(1.0F, wall1.getYStart(), 0.01F);
      assertEquals(0.1F, wall1.getThickness(), 0.01F);
      assertEquals(1.0F, wall1.getLength(), 0.01F);
      assertEquals(0.5F, wall1.getYArcCircleCenter(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals((-2720.2073F), wall1.getXEnd(), 0.01F);
      assertNull(wall2.getLeftSideColor());
      assertEquals(0.0F, wall2.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall2.getRightSideShininess(), 0.01F);
      assertFalse(wall2.isTrapezoidal());
      assertNull(wall2.getHeightAtEnd());
      assertEquals(0.01F, wall2.getXEnd(), 0.01F);
      assertNull(wall2.getArcExtent());
      assertNull(wall2.getRightSideColor());
      assertEquals(0.99F, wall2.getLength(), 0.01F);
      assertEquals(0.01F, wall2.getHeight(), 0.01F);
      assertEquals(0.01F, wall2.getYStart(), 0.01F);
      assertEquals(0.01F, wall2.getThickness(), 0.01F);
      assertEquals(0.01F, wall2.getXStart(), 0.01F);
      assertEquals(1.0F, wall2.getYEnd(), 0.01F);
      assertEquals(0.99F, wall2.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.505F, wall2.getYArcCircleCenter(), 0.01F);
      assertEquals(0.01F, wall2.getXArcCircleCenter(), 0.01F);
      
      Float float1 = wall2.getHeightAtEnd();
      assertFalse(wall1.equals((Object)wall2));
      assertFalse(wall1.equals((Object)wall0));
      assertFalse(wall2.equals((Object)wall1));
      assertNull(float1);
      assertNotSame(wall1, wall2);
      assertNotSame(wall1, wall0);
      assertSame(wall2, wall0);
      assertNotSame(wall2, wall1);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals(155.2F, wall1.getHeight(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals((-2720.2073F), wall1.getXStart(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals((-2720.2073F), wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(1.0F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall1.getYEnd(), 0.01F);
      assertEquals(1.0F, wall1.getYStart(), 0.01F);
      assertEquals(0.1F, wall1.getThickness(), 0.01F);
      assertEquals(1.0F, wall1.getLength(), 0.01F);
      assertEquals(0.5F, wall1.getYArcCircleCenter(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals((-2720.2073F), wall1.getXEnd(), 0.01F);
      assertNull(wall2.getLeftSideColor());
      assertEquals(0.0F, wall2.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall2.getRightSideShininess(), 0.01F);
      assertFalse(wall2.isTrapezoidal());
      assertNull(wall2.getHeightAtEnd());
      assertEquals(0.01F, wall2.getXEnd(), 0.01F);
      assertNull(wall2.getArcExtent());
      assertNull(wall2.getRightSideColor());
      assertEquals(0.99F, wall2.getLength(), 0.01F);
      assertEquals(0.01F, wall2.getHeight(), 0.01F);
      assertEquals(0.01F, wall2.getYStart(), 0.01F);
      assertEquals(0.01F, wall2.getThickness(), 0.01F);
      assertEquals(0.01F, wall2.getXStart(), 0.01F);
      assertEquals(1.0F, wall2.getYEnd(), 0.01F);
      assertEquals(0.99F, wall2.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.505F, wall2.getYArcCircleCenter(), 0.01F);
      assertEquals(0.01F, wall2.getXArcCircleCenter(), 0.01F);
      
      wall2.setWallAtEnd(wall1);
      assertFalse(wall1.equals((Object)wall2));
      assertFalse(wall1.equals((Object)wall0));
      assertFalse(wall2.equals((Object)wall1));
      assertNotSame(wall1, wall2);
      assertNotSame(wall1, wall0);
      assertSame(wall2, wall0);
      assertNotSame(wall2, wall1);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals(155.2F, wall1.getHeight(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals((-2720.2073F), wall1.getXStart(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals((-2720.2073F), wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(1.0F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall1.getYEnd(), 0.01F);
      assertEquals(1.0F, wall1.getYStart(), 0.01F);
      assertEquals(0.1F, wall1.getThickness(), 0.01F);
      assertEquals(1.0F, wall1.getLength(), 0.01F);
      assertEquals(0.5F, wall1.getYArcCircleCenter(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals((-2720.2073F), wall1.getXEnd(), 0.01F);
      assertNull(wall2.getLeftSideColor());
      assertEquals(0.0F, wall2.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall2.getRightSideShininess(), 0.01F);
      assertFalse(wall2.isTrapezoidal());
      assertNull(wall2.getHeightAtEnd());
      assertEquals(0.01F, wall2.getXEnd(), 0.01F);
      assertNull(wall2.getArcExtent());
      assertNull(wall2.getRightSideColor());
      assertEquals(0.99F, wall2.getLength(), 0.01F);
      assertEquals(0.01F, wall2.getHeight(), 0.01F);
      assertEquals(0.01F, wall2.getYStart(), 0.01F);
      assertEquals(0.01F, wall2.getThickness(), 0.01F);
      assertEquals(0.01F, wall2.getXStart(), 0.01F);
      assertEquals(1.0F, wall2.getYEnd(), 0.01F);
      assertEquals(0.99F, wall2.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.505F, wall2.getYArcCircleCenter(), 0.01F);
      assertEquals(0.01F, wall2.getXArcCircleCenter(), 0.01F);
      
      Float float2 = wall2.getArcExtent();
      assertFalse(wall1.equals((Object)wall2));
      assertFalse(wall1.equals((Object)wall0));
      assertFalse(wall2.equals((Object)wall1));
      assertNull(float2);
      assertNotSame(wall1, wall2);
      assertNotSame(wall1, wall0);
      assertSame(wall2, wall0);
      assertNotSame(wall2, wall1);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals(155.2F, wall1.getHeight(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals((-2720.2073F), wall1.getXStart(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals((-2720.2073F), wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(1.0F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall1.getYEnd(), 0.01F);
      assertEquals(1.0F, wall1.getYStart(), 0.01F);
      assertEquals(0.1F, wall1.getThickness(), 0.01F);
      assertEquals(1.0F, wall1.getLength(), 0.01F);
      assertEquals(0.5F, wall1.getYArcCircleCenter(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals((-2720.2073F), wall1.getXEnd(), 0.01F);
      assertNull(wall2.getLeftSideColor());
      assertEquals(0.0F, wall2.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall2.getRightSideShininess(), 0.01F);
      assertFalse(wall2.isTrapezoidal());
      assertNull(wall2.getHeightAtEnd());
      assertEquals(0.01F, wall2.getXEnd(), 0.01F);
      assertNull(wall2.getArcExtent());
      assertNull(wall2.getRightSideColor());
      assertEquals(0.99F, wall2.getLength(), 0.01F);
      assertEquals(0.01F, wall2.getHeight(), 0.01F);
      assertEquals(0.01F, wall2.getYStart(), 0.01F);
      assertEquals(0.01F, wall2.getThickness(), 0.01F);
      assertEquals(0.01F, wall2.getXStart(), 0.01F);
      assertEquals(1.0F, wall2.getYEnd(), 0.01F);
      assertEquals(0.99F, wall2.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.505F, wall2.getYArcCircleCenter(), 0.01F);
      assertEquals(0.01F, wall2.getXArcCircleCenter(), 0.01F);
      
      float float3 = wall0.getStartPointToEndPointDistance();
      assertFalse(wall0.equals((Object)wall1));
      assertNotEquals(float3, float0, 0.01F);
      assertNotSame(wall0, wall1);
      assertSame(wall0, wall2);
      assertEquals(0.99F, float3, 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.01F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.01F, wall0.getXEnd(), 0.01F);
      assertEquals(0.99F, wall0.getLength(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.01F, wall0.getHeight(), 0.01F);
      assertEquals(0.01F, wall0.getXStart(), 0.01F);
      assertEquals(0.01F, wall0.getYStart(), 0.01F);
      assertEquals(0.01F, wall0.getThickness(), 0.01F);
      assertEquals(1.0F, wall0.getYEnd(), 0.01F);
      assertEquals(0.99F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.505F, wall0.getYArcCircleCenter(), 0.01F);
      
      Float float4 = new Float(1.0F);
      assertEquals((float)float4, (float)float3, 0.01F);
      assertNotEquals((float)float4, (float)float0, 0.01F);
      assertNotNull(float4);
      assertEquals(1.0F, (float)float4, 0.01F);
      
      wall1.setHeightAtEnd(float4);
      assertFalse(wall1.equals((Object)wall2));
      assertFalse(wall1.equals((Object)wall0));
      assertEquals((float)float4, (float)float3, 0.01F);
      assertNotEquals((float)float4, (float)float0, 0.01F);
      assertNotSame(wall1, wall2);
      assertNotSame(wall1, wall0);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals(155.2F, wall1.getHeight(), 0.01F);
      assertTrue(wall1.isTrapezoidal());
      assertEquals(1.0F, wall1.getHeightAtEnd(), 0.01F);
      assertEquals((-2720.2073F), wall1.getXStart(), 0.01F);
      assertEquals((-2720.2073F), wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(1.0F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall1.getYEnd(), 0.01F);
      assertEquals(1.0F, wall1.getYStart(), 0.01F);
      assertEquals(0.1F, wall1.getThickness(), 0.01F);
      assertEquals(1.0F, wall1.getLength(), 0.01F);
      assertEquals(0.5F, wall1.getYArcCircleCenter(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals((-2720.2073F), wall1.getXEnd(), 0.01F);
      
      HomeTexture homeTexture0 = wall1.getRightSideTexture();
      assertFalse(wall1.equals((Object)wall2));
      assertFalse(wall1.equals((Object)wall0));
      assertNull(homeTexture0);
      assertNotSame(wall1, wall2);
      assertNotSame(wall1, wall0);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals(155.2F, wall1.getHeight(), 0.01F);
      assertTrue(wall1.isTrapezoidal());
      assertEquals(1.0F, wall1.getHeightAtEnd(), 0.01F);
      assertEquals((-2720.2073F), wall1.getXStart(), 0.01F);
      assertEquals((-2720.2073F), wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(1.0F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall1.getYEnd(), 0.01F);
      assertEquals(1.0F, wall1.getYStart(), 0.01F);
      assertEquals(0.1F, wall1.getThickness(), 0.01F);
      assertEquals(1.0F, wall1.getLength(), 0.01F);
      assertEquals(0.5F, wall1.getYArcCircleCenter(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals((-2720.2073F), wall1.getXEnd(), 0.01F);
      
      Level level0 = new Level("", (-1.0F), 2683.0F, 0.0F);
      assertNotNull(level0);
      assertEquals(0.0F, level0.getHeight(), 0.01F);
      assertEquals("", level0.getName());
      assertEquals((-1.0F), level0.getElevation(), 0.01F);
      assertEquals(2683.0F, level0.getFloorThickness(), 0.01F);
      assertTrue(level0.isVisible());
      
      float float5 = level0.getElevation();
      assertNotEquals(float5, float3, 0.01F);
      assertNotEquals(float5, float0, 0.01F);
      assertEquals((-1.0F), float5, 0.01F);
      assertEquals(0.0F, level0.getHeight(), 0.01F);
      assertEquals("", level0.getName());
      assertEquals((-1.0F), level0.getElevation(), 0.01F);
      assertEquals(2683.0F, level0.getFloorThickness(), 0.01F);
      assertTrue(level0.isVisible());
      
      float float6 = level0.getHeight();
      assertEquals(float6, float0, 0.01F);
      assertNotEquals(float6, float5, 0.01F);
      assertNotEquals(float6, float3, 0.01F);
      assertEquals(0.0F, float6, 0.01F);
      assertEquals(0.0F, level0.getHeight(), 0.01F);
      assertEquals("", level0.getName());
      assertEquals((-1.0F), level0.getElevation(), 0.01F);
      assertEquals(2683.0F, level0.getFloorThickness(), 0.01F);
      assertTrue(level0.isVisible());
      
      boolean boolean1 = wall0.isAtLevel(level0);
      assertTrue(boolean1 == boolean0);
      assertFalse(wall0.equals((Object)wall1));
      assertNotSame(wall0, wall1);
      assertSame(wall0, wall2);
      assertFalse(boolean1);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.01F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.01F, wall0.getXEnd(), 0.01F);
      assertEquals(0.99F, wall0.getLength(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.01F, wall0.getHeight(), 0.01F);
      assertEquals(0.01F, wall0.getXStart(), 0.01F);
      assertEquals(0.01F, wall0.getYStart(), 0.01F);
      assertEquals(0.01F, wall0.getThickness(), 0.01F);
      assertEquals(1.0F, wall0.getYEnd(), 0.01F);
      assertEquals(0.99F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.505F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, level0.getHeight(), 0.01F);
      assertEquals("", level0.getName());
      assertEquals((-1.0F), level0.getElevation(), 0.01F);
      assertEquals(2683.0F, level0.getFloorThickness(), 0.01F);
      assertTrue(level0.isVisible());
  }

  @Test(timeout = 4000)
  public void test179()  throws Throwable  {
      Wall wall0 = new Wall((-4215.8525F), (-4215.8525F), (-4215.8525F), (-4215.8525F), (-4215.8525F));
      assertNotNull(wall0);
      assertEquals((-4215.8525F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-4215.8525F), wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-4215.8525F), wall0.getXStart(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-4215.8525F), wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals((-4215.8525F), wall0.getYEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertNull(wall0.getHeight());
      assertEquals((-4215.8525F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-4215.8525F), wall0.getThickness(), 0.01F);
      
      Float float0 = new Float((double) (-4215.8525F));
      assertNotNull(float0);
      assertEquals((-4215.8525F), (float)float0, 0.01F);
      
      wall0.setArcExtent(float0);
      assertEquals((-4215.8525F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-4215.8525F), wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-4215.8525F), wall0.getXStart(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-4215.8525F), wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals((-4215.8525F), wall0.getYEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertNull(wall0.getHeight());
      assertEquals((-4215.8525F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals((-4215.8525F), wall0.getArcExtent(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-4215.8525F), wall0.getThickness(), 0.01F);
      
      Wall wall1 = new Wall((-4215.8525F), 764.0F, 1767.5094F, (-4215.8525F), 0.01F);
      assertFalse(wall1.equals((Object)wall0));
      assertNotNull(wall1);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals((-1224.1716F), wall1.getXArcCircleCenter(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertNull(wall1.getLeftSideColor());
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertNull(wall1.getHeight());
      assertEquals(7784.5713F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.01F, wall1.getThickness(), 0.01F);
      assertEquals((-4215.8525F), wall1.getXStart(), 0.01F);
      assertEquals(1767.5094F, wall1.getXEnd(), 0.01F);
      assertEquals((-1725.9263F), wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(764.0F, wall1.getYStart(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals((-4215.8525F), wall1.getYEnd(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertEquals(7784.5713F, wall1.getLength(), 0.01F);
      
      Integer integer0 = Integer.valueOf((-991));
      assertNotNull(integer0);
      assertEquals((-991), (int)integer0);
      
      wall1.setLeftSideColor(integer0);
      assertFalse(wall1.equals((Object)wall0));
      assertNotSame(wall1, wall0);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals((-1224.1716F), wall1.getXArcCircleCenter(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals((-991), (int)wall1.getLeftSideColor());
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertNull(wall1.getHeight());
      assertEquals(7784.5713F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.01F, wall1.getThickness(), 0.01F);
      assertEquals((-4215.8525F), wall1.getXStart(), 0.01F);
      assertEquals(1767.5094F, wall1.getXEnd(), 0.01F);
      assertEquals((-1725.9263F), wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(764.0F, wall1.getYStart(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals((-4215.8525F), wall1.getYEnd(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertEquals(7784.5713F, wall1.getLength(), 0.01F);
      
      Wall wall2 = wall1.clone();
      assertFalse(wall1.equals((Object)wall0));
      assertFalse(wall2.equals((Object)wall0));
      assertFalse(wall2.equals((Object)wall1));
      assertNotNull(wall2);
      assertNotSame(wall1, wall2);
      assertNotSame(wall1, wall0);
      assertNotSame(wall2, wall0);
      assertNotSame(wall2, wall1);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals((-1224.1716F), wall1.getXArcCircleCenter(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals((-991), (int)wall1.getLeftSideColor());
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertNull(wall1.getHeight());
      assertEquals(7784.5713F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.01F, wall1.getThickness(), 0.01F);
      assertEquals((-4215.8525F), wall1.getXStart(), 0.01F);
      assertEquals(1767.5094F, wall1.getXEnd(), 0.01F);
      assertEquals((-1725.9263F), wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(764.0F, wall1.getYStart(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals((-4215.8525F), wall1.getYEnd(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertEquals(7784.5713F, wall1.getLength(), 0.01F);
      assertEquals(764.0F, wall2.getYStart(), 0.01F);
      assertEquals((-4215.8525F), wall2.getXStart(), 0.01F);
      assertEquals((-1725.9263F), wall2.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall2.getRightSideShininess(), 0.01F);
      assertNull(wall2.getHeightAtEnd());
      assertEquals(0.01F, wall2.getThickness(), 0.01F);
      assertEquals(1767.5094F, wall2.getXEnd(), 0.01F);
      assertEquals(7784.5713F, wall2.getStartPointToEndPointDistance(), 0.01F);
      assertFalse(wall2.isTrapezoidal());
      assertEquals((-991), (int)wall2.getLeftSideColor());
      assertEquals(0.0F, wall2.getLeftSideShininess(), 0.01F);
      assertEquals((-1224.1716F), wall2.getXArcCircleCenter(), 0.01F);
      assertEquals(7784.5713F, wall2.getLength(), 0.01F);
      assertNull(wall2.getHeight());
      assertNull(wall2.getArcExtent());
      assertNull(wall2.getRightSideColor());
      assertEquals((-4215.8525F), wall2.getYEnd(), 0.01F);
      
      wall1.setYStart((-2344.743F));
      assertFalse(wall1.equals((Object)wall2));
      assertFalse(wall1.equals((Object)wall0));
      assertNotSame(wall1, wall2);
      assertNotSame(wall1, wall0);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals((-1224.1716F), wall1.getXArcCircleCenter(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals((-991), (int)wall1.getLeftSideColor());
      assertEquals((-3280.2979F), wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertNull(wall1.getHeight());
      assertEquals(6269.1045F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.01F, wall1.getThickness(), 0.01F);
      assertEquals((-4215.8525F), wall1.getXStart(), 0.01F);
      assertEquals(1767.5094F, wall1.getXEnd(), 0.01F);
      assertEquals(6269.1045F, wall1.getLength(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals((-4215.8525F), wall1.getYEnd(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertEquals((-2344.743F), wall1.getYStart(), 0.01F);
      
      wall0.setLeftSideShininess(1767.5094F);
      assertFalse(wall0.equals((Object)wall2));
      assertFalse(wall0.equals((Object)wall1));
      assertNotSame(wall0, wall2);
      assertNotSame(wall0, wall1);
      assertEquals((-4215.8525F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-4215.8525F), wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-4215.8525F), wall0.getXStart(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-4215.8525F), wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals((-4215.8525F), wall0.getYEnd(), 0.01F);
      assertEquals(1767.5094F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertNull(wall0.getHeight());
      assertEquals((-4215.8525F), wall0.getXArcCircleCenter(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals((-4215.8525F), wall0.getArcExtent(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-4215.8525F), wall0.getThickness(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test180()  throws Throwable  {
      Wall wall0 = new Wall((-4215.8525F), (-4215.8525F), (-4215.8525F), (-4215.8525F), (-4215.8525F));
      assertNotNull(wall0);
      assertEquals((-4215.8525F), wall0.getXEnd(), 0.01F);
      assertEquals((-4215.8525F), wall0.getYEnd(), 0.01F);
      assertEquals((-4215.8525F), wall0.getThickness(), 0.01F);
      assertEquals((-4215.8525F), wall0.getYStart(), 0.01F);
      assertEquals((-4215.8525F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertNull(wall0.getHeight());
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getLeftSideColor());
      assertEquals((-4215.8525F), wall0.getXStart(), 0.01F);
      assertEquals((-4215.8525F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      
      Float float0 = new Float((double) (-4215.8525F));
      assertNotNull(float0);
      assertEquals((-4215.8525F), (float)float0, 0.01F);
      
      wall0.setArcExtent(float0);
      assertEquals((-4215.8525F), wall0.getXEnd(), 0.01F);
      assertEquals((-4215.8525F), wall0.getYEnd(), 0.01F);
      assertEquals((-4215.8525F), wall0.getThickness(), 0.01F);
      assertEquals((-4215.8525F), wall0.getYStart(), 0.01F);
      assertEquals((-4215.8525F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals((-4215.8525F), wall0.getArcExtent(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertNull(wall0.getHeight());
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getLeftSideColor());
      assertEquals((-4215.8525F), wall0.getXStart(), 0.01F);
      assertEquals((-4215.8525F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      
      Wall wall1 = new Wall((-1.0F), (-4215.8525F), (-1.0F), (-4215.8525F), (-4215.8525F), (-1.0F));
      assertFalse(wall1.equals((Object)wall0));
      assertNotNull(wall1);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals((-1.0F), wall1.getHeight(), 0.01F);
      assertEquals((-1.0F), wall1.getXArcCircleCenter(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertNull(wall1.getHeightAtEnd());
      assertNull(wall1.getLeftSideColor());
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals((-1.0F), wall1.getXEnd(), 0.01F);
      assertEquals(0.0F, wall1.getLength(), 0.01F);
      assertEquals((-4215.8525F), wall1.getYArcCircleCenter(), 0.01F);
      assertEquals((-4215.8525F), wall1.getYEnd(), 0.01F);
      assertEquals((-1.0F), wall1.getXStart(), 0.01F);
      assertEquals((-4215.8525F), wall1.getThickness(), 0.01F);
      assertEquals((-4215.8525F), wall1.getYStart(), 0.01F);
      assertEquals(0.0F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      
      PropertyChangeListener propertyChangeListener0 = mock(PropertyChangeListener.class, new ViolatedAssumptionAnswer());
      PropertyChangeListenerProxy propertyChangeListenerProxy0 = new PropertyChangeListenerProxy((String) null, propertyChangeListener0);
      assertNotNull(propertyChangeListenerProxy0);
      assertNull(propertyChangeListenerProxy0.getPropertyName());
      
      wall1.removePropertyChangeListener(propertyChangeListenerProxy0);
      assertFalse(wall1.equals((Object)wall0));
      assertNotSame(wall1, wall0);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals((-1.0F), wall1.getHeight(), 0.01F);
      assertEquals((-1.0F), wall1.getXArcCircleCenter(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertNull(wall1.getHeightAtEnd());
      assertNull(wall1.getLeftSideColor());
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals((-1.0F), wall1.getXEnd(), 0.01F);
      assertEquals(0.0F, wall1.getLength(), 0.01F);
      assertEquals((-4215.8525F), wall1.getYArcCircleCenter(), 0.01F);
      assertEquals((-4215.8525F), wall1.getYEnd(), 0.01F);
      assertEquals((-1.0F), wall1.getXStart(), 0.01F);
      assertEquals((-4215.8525F), wall1.getThickness(), 0.01F);
      assertEquals((-4215.8525F), wall1.getYStart(), 0.01F);
      assertEquals(0.0F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertNull(propertyChangeListenerProxy0.getPropertyName());
      
      wall1.setXEnd((-1.0F));
      assertFalse(wall1.equals((Object)wall0));
      assertNotSame(wall1, wall0);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals((-1.0F), wall1.getHeight(), 0.01F);
      assertEquals((-1.0F), wall1.getXArcCircleCenter(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertNull(wall1.getHeightAtEnd());
      assertNull(wall1.getLeftSideColor());
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals((-1.0F), wall1.getXEnd(), 0.01F);
      assertEquals(0.0F, wall1.getLength(), 0.01F);
      assertEquals((-4215.8525F), wall1.getYArcCircleCenter(), 0.01F);
      assertEquals((-4215.8525F), wall1.getYEnd(), 0.01F);
      assertEquals((-1.0F), wall1.getXStart(), 0.01F);
      assertEquals((-4215.8525F), wall1.getThickness(), 0.01F);
      assertEquals((-4215.8525F), wall1.getYStart(), 0.01F);
      assertEquals(0.0F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      
      wall0.setWallAtEnd(wall1);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall1.equals((Object)wall0));
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      assertEquals((-4215.8525F), wall0.getXEnd(), 0.01F);
      assertEquals((-4215.8525F), wall0.getYEnd(), 0.01F);
      assertEquals((-4215.8525F), wall0.getThickness(), 0.01F);
      assertEquals((-4215.8525F), wall0.getYStart(), 0.01F);
      assertEquals((-4215.8525F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals((-4215.8525F), wall0.getArcExtent(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertNull(wall0.getHeight());
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getLeftSideColor());
      assertEquals((-4215.8525F), wall0.getXStart(), 0.01F);
      assertEquals((-4215.8525F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals((-1.0F), wall1.getHeight(), 0.01F);
      assertEquals((-1.0F), wall1.getXArcCircleCenter(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertNull(wall1.getHeightAtEnd());
      assertNull(wall1.getLeftSideColor());
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals((-1.0F), wall1.getXEnd(), 0.01F);
      assertEquals(0.0F, wall1.getLength(), 0.01F);
      assertEquals((-4215.8525F), wall1.getYArcCircleCenter(), 0.01F);
      assertEquals((-4215.8525F), wall1.getYEnd(), 0.01F);
      assertEquals((-1.0F), wall1.getXStart(), 0.01F);
      assertEquals((-4215.8525F), wall1.getThickness(), 0.01F);
      assertEquals((-4215.8525F), wall1.getYStart(), 0.01F);
      assertEquals(0.0F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      
      wall0.setHeight(float0);
      assertFalse(wall0.equals((Object)wall1));
      assertNotSame(wall0, wall1);
      assertEquals((-4215.8525F), wall0.getXEnd(), 0.01F);
      assertEquals((-4215.8525F), wall0.getYEnd(), 0.01F);
      assertEquals((-4215.8525F), wall0.getThickness(), 0.01F);
      assertEquals((-4215.8525F), wall0.getYStart(), 0.01F);
      assertEquals((-4215.8525F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals((-4215.8525F), wall0.getArcExtent(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-4215.8525F), wall0.getHeight(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals((-4215.8525F), wall0.getXStart(), 0.01F);
      assertEquals((-4215.8525F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      
      float float1 = wall0.getYArcCircleCenter();
      assertFalse(wall0.equals((Object)wall1));
      assertNotSame(wall0, wall1);
      assertEquals((-4215.8525F), float1, 0.01F);
      assertEquals((-4215.8525F), wall0.getXEnd(), 0.01F);
      assertEquals((-4215.8525F), wall0.getYEnd(), 0.01F);
      assertEquals((-4215.8525F), wall0.getThickness(), 0.01F);
      assertEquals((-4215.8525F), wall0.getYStart(), 0.01F);
      assertEquals((-4215.8525F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals((-4215.8525F), wall0.getArcExtent(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-4215.8525F), wall0.getHeight(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals((-4215.8525F), wall0.getXStart(), 0.01F);
      assertEquals((-4215.8525F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      
      Float float2 = wall1.getHeightAtEnd();
      assertFalse(wall1.equals((Object)wall0));
      assertNull(float2);
      assertNotSame(wall1, wall0);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals((-1.0F), wall1.getHeight(), 0.01F);
      assertEquals((-1.0F), wall1.getXArcCircleCenter(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertNull(wall1.getHeightAtEnd());
      assertNull(wall1.getLeftSideColor());
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals((-1.0F), wall1.getXEnd(), 0.01F);
      assertEquals(0.0F, wall1.getLength(), 0.01F);
      assertEquals((-4215.8525F), wall1.getYArcCircleCenter(), 0.01F);
      assertEquals((-4215.8525F), wall1.getYEnd(), 0.01F);
      assertEquals((-1.0F), wall1.getXStart(), 0.01F);
      assertEquals((-4215.8525F), wall1.getThickness(), 0.01F);
      assertEquals((-4215.8525F), wall1.getYStart(), 0.01F);
      assertEquals(0.0F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      
      Float float3 = wall0.getArcExtent();
      assertFalse(wall0.equals((Object)wall1));
      assertEquals((float)float3, (float)float1, 0.01F);
      assertNotNull(float3);
      assertNotSame(wall0, wall1);
      assertEquals((-4215.8525F), (float)float3, 0.01F);
      assertEquals((-4215.8525F), wall0.getXEnd(), 0.01F);
      assertEquals((-4215.8525F), wall0.getYEnd(), 0.01F);
      assertEquals((-4215.8525F), wall0.getThickness(), 0.01F);
      assertEquals((-4215.8525F), wall0.getYStart(), 0.01F);
      assertEquals((-4215.8525F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals((-4215.8525F), wall0.getArcExtent(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-4215.8525F), wall0.getHeight(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals((-4215.8525F), wall0.getXStart(), 0.01F);
      assertEquals((-4215.8525F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      
      wall1.setWallAtEnd(wall0);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall1.equals((Object)wall0));
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      assertEquals((-4215.8525F), wall0.getXEnd(), 0.01F);
      assertEquals((-4215.8525F), wall0.getYEnd(), 0.01F);
      assertEquals((-4215.8525F), wall0.getThickness(), 0.01F);
      assertEquals((-4215.8525F), wall0.getYStart(), 0.01F);
      assertEquals((-4215.8525F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals((-4215.8525F), wall0.getArcExtent(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-4215.8525F), wall0.getHeight(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals((-4215.8525F), wall0.getXStart(), 0.01F);
      assertEquals((-4215.8525F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals((-1.0F), wall1.getHeight(), 0.01F);
      assertEquals((-1.0F), wall1.getXArcCircleCenter(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertNull(wall1.getHeightAtEnd());
      assertNull(wall1.getLeftSideColor());
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals((-1.0F), wall1.getXEnd(), 0.01F);
      assertEquals(0.0F, wall1.getLength(), 0.01F);
      assertEquals((-4215.8525F), wall1.getYArcCircleCenter(), 0.01F);
      assertEquals((-4215.8525F), wall1.getYEnd(), 0.01F);
      assertEquals((-1.0F), wall1.getXStart(), 0.01F);
      assertEquals((-4215.8525F), wall1.getThickness(), 0.01F);
      assertEquals((-4215.8525F), wall1.getYStart(), 0.01F);
      assertEquals(0.0F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      
      TextureImage textureImage0 = wall1.getPattern();
      assertFalse(wall1.equals((Object)wall0));
      assertNull(textureImage0);
      assertNotSame(wall1, wall0);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals((-1.0F), wall1.getHeight(), 0.01F);
      assertEquals((-1.0F), wall1.getXArcCircleCenter(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertNull(wall1.getHeightAtEnd());
      assertNull(wall1.getLeftSideColor());
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals((-1.0F), wall1.getXEnd(), 0.01F);
      assertEquals(0.0F, wall1.getLength(), 0.01F);
      assertEquals((-4215.8525F), wall1.getYArcCircleCenter(), 0.01F);
      assertEquals((-4215.8525F), wall1.getYEnd(), 0.01F);
      assertEquals((-1.0F), wall1.getXStart(), 0.01F);
      assertEquals((-4215.8525F), wall1.getThickness(), 0.01F);
      assertEquals((-4215.8525F), wall1.getYStart(), 0.01F);
      assertEquals(0.0F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      
      Float float4 = wall1.getArcExtent();
      assertFalse(wall1.equals((Object)wall0));
      assertNull(float4);
      assertNotSame(wall1, wall0);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals((-1.0F), wall1.getHeight(), 0.01F);
      assertEquals((-1.0F), wall1.getXArcCircleCenter(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertNull(wall1.getHeightAtEnd());
      assertNull(wall1.getLeftSideColor());
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals((-1.0F), wall1.getXEnd(), 0.01F);
      assertEquals(0.0F, wall1.getLength(), 0.01F);
      assertEquals((-4215.8525F), wall1.getYArcCircleCenter(), 0.01F);
      assertEquals((-4215.8525F), wall1.getYEnd(), 0.01F);
      assertEquals((-1.0F), wall1.getXStart(), 0.01F);
      assertEquals((-4215.8525F), wall1.getThickness(), 0.01F);
      assertEquals((-4215.8525F), wall1.getYStart(), 0.01F);
      assertEquals(0.0F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
  }

  @Test(timeout = 4000)
  public void test181()  throws Throwable  {
      Wall wall0 = new Wall(0.01F, 0.01F, 0.01F, 1.0F, 0.01F, 0.01F);
      assertNotNull(wall0);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.99F, wall0.getLength(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.01F, wall0.getYStart(), 0.01F);
      assertEquals(0.01F, wall0.getHeight(), 0.01F);
      assertEquals(0.01F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.01F, wall0.getXStart(), 0.01F);
      assertEquals(0.99F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(1.0F, wall0.getYEnd(), 0.01F);
      assertEquals(0.01F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.505F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.01F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      
      wall0.setYStart(1544.4587F);
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.01F, wall0.getHeight(), 0.01F);
      assertEquals(0.01F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.01F, wall0.getXStart(), 0.01F);
      assertEquals(1544.4587F, wall0.getYStart(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(1543.4587F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(1.0F, wall0.getYEnd(), 0.01F);
      assertEquals(0.01F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(772.7294F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.01F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(1543.4587F, wall0.getLength(), 0.01F);
      
      float float0 = Float.sum(0.01F, 0.0F);
      assertEquals(0.01F, float0, 0.01F);
      
      Wall wall1 = new Wall(1.0F, 1305.2919F, 1.0F, 0.01F, 1.0F, 1.0F);
      assertFalse(wall1.equals((Object)wall0));
      assertNotNull(wall1);
      assertEquals(1.0F, wall1.getXEnd(), 0.01F);
      assertEquals(1305.2919F, wall1.getYStart(), 0.01F);
      assertEquals(1305.2819F, wall1.getLength(), 0.01F);
      assertEquals(0.01F, wall1.getYEnd(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals(1.0F, wall1.getThickness(), 0.01F);
      assertEquals(1305.2819F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(1.0F, wall1.getXStart(), 0.01F);
      assertEquals(1.0F, wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertNull(wall1.getHeightAtEnd());
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertEquals(1.0F, wall1.getHeight(), 0.01F);
      assertEquals(652.65094F, wall1.getYArcCircleCenter(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      
      wall0.setWallAtEnd(wall1);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall1.equals((Object)wall0));
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.01F, wall0.getHeight(), 0.01F);
      assertEquals(0.01F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.01F, wall0.getXStart(), 0.01F);
      assertEquals(1544.4587F, wall0.getYStart(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(1543.4587F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(1.0F, wall0.getYEnd(), 0.01F);
      assertEquals(0.01F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(772.7294F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.01F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(1543.4587F, wall0.getLength(), 0.01F);
      assertEquals(1.0F, wall1.getXEnd(), 0.01F);
      assertEquals(1305.2919F, wall1.getYStart(), 0.01F);
      assertEquals(1305.2819F, wall1.getLength(), 0.01F);
      assertEquals(0.01F, wall1.getYEnd(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals(1.0F, wall1.getThickness(), 0.01F);
      assertEquals(1305.2819F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(1.0F, wall1.getXStart(), 0.01F);
      assertEquals(1.0F, wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertNull(wall1.getHeightAtEnd());
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertEquals(1.0F, wall1.getHeight(), 0.01F);
      assertEquals(652.65094F, wall1.getYArcCircleCenter(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      
      wall1.setYEnd(1305.2919F);
      assertFalse(wall1.equals((Object)wall0));
      assertNotSame(wall1, wall0);
      assertEquals(1.0F, wall1.getXEnd(), 0.01F);
      assertEquals(1305.2919F, wall1.getYStart(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals(1305.2919F, wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(1305.2919F, wall1.getYEnd(), 0.01F);
      assertEquals(1.0F, wall1.getThickness(), 0.01F);
      assertEquals(1.0F, wall1.getXStart(), 0.01F);
      assertEquals(1.0F, wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals(0.0F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertEquals(1.0F, wall1.getHeight(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals(0.0F, wall1.getLength(), 0.01F);
      
      wall1.setWallAtEnd(wall0);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall1.equals((Object)wall0));
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.01F, wall0.getHeight(), 0.01F);
      assertEquals(0.01F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.01F, wall0.getXStart(), 0.01F);
      assertEquals(1544.4587F, wall0.getYStart(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(1543.4587F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(1.0F, wall0.getYEnd(), 0.01F);
      assertEquals(0.01F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(772.7294F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.01F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(1543.4587F, wall0.getLength(), 0.01F);
      assertEquals(1.0F, wall1.getXEnd(), 0.01F);
      assertEquals(1305.2919F, wall1.getYStart(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals(1305.2919F, wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(1305.2919F, wall1.getYEnd(), 0.01F);
      assertEquals(1.0F, wall1.getThickness(), 0.01F);
      assertEquals(1.0F, wall1.getXStart(), 0.01F);
      assertEquals(1.0F, wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals(0.0F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertEquals(1.0F, wall1.getHeight(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals(0.0F, wall1.getLength(), 0.01F);
      
      Float float1 = new Float(0.0F);
      assertEquals((float)float1, (float)float0, 0.01F);
      assertNotNull(float1);
      assertEquals(0.0F, (float)float1, 0.01F);
      
      Float float2 = new Float((double) 0.01F);
      assertEquals((float)float2, (float)float1, 0.01F);
      assertEquals((float)float2, (float)float0, 0.01F);
      assertNotNull(float2);
      assertEquals(0.01F, (float)float2, 0.01F);
      
      wall0.setHeight(float2);
      assertFalse(wall0.equals((Object)wall1));
      assertEquals((float)float2, (float)float1, 0.01F);
      assertEquals((float)float2, (float)float0, 0.01F);
      assertNotSame(wall0, wall1);
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.01F, wall0.getHeight(), 0.01F);
      assertEquals(0.01F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.01F, wall0.getXStart(), 0.01F);
      assertEquals(1544.4587F, wall0.getYStart(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(1543.4587F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(1.0F, wall0.getYEnd(), 0.01F);
      assertEquals(0.01F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(772.7294F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.01F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(1543.4587F, wall0.getLength(), 0.01F);
      
      float[][] floatArray0 = wall0.getPoints();
      assertFalse(wall0.equals((Object)wall1));
      assertNotNull(floatArray0);
      assertEquals(4, floatArray0.length);
      assertNotSame(wall0, wall1);
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.01F, wall0.getHeight(), 0.01F);
      assertEquals(0.01F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.01F, wall0.getXStart(), 0.01F);
      assertEquals(1544.4587F, wall0.getYStart(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(1543.4587F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(1.0F, wall0.getYEnd(), 0.01F);
      assertEquals(0.01F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(772.7294F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.01F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(1543.4587F, wall0.getLength(), 0.01F);
      
      float[][] floatArray1 = wall1.getPoints();
      assertFalse(wall1.equals((Object)wall0));
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertNotNull(floatArray1);
      assertEquals(4, floatArray1.length);
      assertNotSame(wall1, wall0);
      assertNotSame(floatArray1, floatArray0);
      assertEquals(1.0F, wall1.getXEnd(), 0.01F);
      assertEquals(1305.2919F, wall1.getYStart(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals(1305.2919F, wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(1305.2919F, wall1.getYEnd(), 0.01F);
      assertEquals(1.0F, wall1.getThickness(), 0.01F);
      assertEquals(1.0F, wall1.getXStart(), 0.01F);
      assertEquals(1.0F, wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals(0.0F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertEquals(1.0F, wall1.getHeight(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals(0.0F, wall1.getLength(), 0.01F);
      
      Integer integer0 = wall1.getRightSideColor();
      assertFalse(wall1.equals((Object)wall0));
      assertNull(integer0);
      assertNotSame(wall1, wall0);
      assertEquals(1.0F, wall1.getXEnd(), 0.01F);
      assertEquals(1305.2919F, wall1.getYStart(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals(1305.2919F, wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(1305.2919F, wall1.getYEnd(), 0.01F);
      assertEquals(1.0F, wall1.getThickness(), 0.01F);
      assertEquals(1.0F, wall1.getXStart(), 0.01F);
      assertEquals(1.0F, wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals(0.0F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertEquals(1.0F, wall1.getHeight(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals(0.0F, wall1.getLength(), 0.01F);
      
      HomeTexture homeTexture0 = wall0.getLeftSideTexture();
      assertFalse(wall0.equals((Object)wall1));
      assertNull(homeTexture0);
      assertNotSame(wall0, wall1);
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.01F, wall0.getHeight(), 0.01F);
      assertEquals(0.01F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.01F, wall0.getXStart(), 0.01F);
      assertEquals(1544.4587F, wall0.getYStart(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(1543.4587F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(1.0F, wall0.getYEnd(), 0.01F);
      assertEquals(0.01F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(772.7294F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.01F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(1543.4587F, wall0.getLength(), 0.01F);
      
      wall0.setRightSideTexture((HomeTexture) null);
      assertFalse(wall0.equals((Object)wall1));
      assertNotSame(wall0, wall1);
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.01F, wall0.getHeight(), 0.01F);
      assertEquals(0.01F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.01F, wall0.getXStart(), 0.01F);
      assertEquals(1544.4587F, wall0.getYStart(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(1543.4587F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(1.0F, wall0.getYEnd(), 0.01F);
      assertEquals(0.01F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(772.7294F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.01F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(1543.4587F, wall0.getLength(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test182()  throws Throwable  {
      Wall wall0 = new Wall(0.0F, 0.0F, 0.0F, 0.0F, 0.0F);
      assertNotNull(wall0);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertNull(wall0.getLeftSideColor());
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getHeight());
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      
      boolean boolean0 = wall0.containsWallStartAt(0.0F, 0.0F, 0.0F);
      assertFalse(boolean0);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertNull(wall0.getLeftSideColor());
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getHeight());
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      
      wall0.setWallAtStart(wall0);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertNull(wall0.getLeftSideColor());
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getHeight());
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      
      boolean boolean1 = wall0.isTrapezoidal();
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertNull(wall0.getLeftSideColor());
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getHeight());
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      
      Wall wall1 = new Wall(0.0F, 4043.4763F, 0.0F, 3943.0F, 0.0F, (-1229.7325F));
      assertFalse(wall1.equals((Object)wall0));
      assertNotNull(wall1);
      assertEquals(0.0F, wall1.getXStart(), 0.01F);
      assertEquals(0.0F, wall1.getThickness(), 0.01F);
      assertEquals(4043.4763F, wall1.getYStart(), 0.01F);
      assertEquals(0.0F, wall1.getXEnd(), 0.01F);
      assertEquals(3993.2383F, wall1.getYArcCircleCenter(), 0.01F);
      assertEquals((-1229.7325F), wall1.getHeight(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals(100.47632F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertNull(wall1.getLeftSideColor());
      assertFalse(wall1.isTrapezoidal());
      assertEquals(0.0F, wall1.getXArcCircleCenter(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals(100.47632F, wall1.getLength(), 0.01F);
      assertEquals(3943.0F, wall1.getYEnd(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      
      wall0.setWallAtEnd(wall1);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall1.equals((Object)wall0));
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertNull(wall0.getLeftSideColor());
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getHeight());
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall1.getXStart(), 0.01F);
      assertEquals(0.0F, wall1.getThickness(), 0.01F);
      assertEquals(4043.4763F, wall1.getYStart(), 0.01F);
      assertEquals(0.0F, wall1.getXEnd(), 0.01F);
      assertEquals(3993.2383F, wall1.getYArcCircleCenter(), 0.01F);
      assertEquals((-1229.7325F), wall1.getHeight(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals(100.47632F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertNull(wall1.getLeftSideColor());
      assertFalse(wall1.isTrapezoidal());
      assertEquals(0.0F, wall1.getXArcCircleCenter(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals(100.47632F, wall1.getLength(), 0.01F);
      assertEquals(3943.0F, wall1.getYEnd(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      
      Wall wall2 = wall0.getWallAtStart();
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall2.equals((Object)wall1));
      assertNotNull(wall2);
      assertSame(wall0, wall2);
      assertNotSame(wall0, wall1);
      assertSame(wall2, wall0);
      assertNotSame(wall2, wall1);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertNull(wall0.getLeftSideColor());
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getHeight());
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertNull(wall2.getLeftSideColor());
      assertEquals(0.0F, wall2.getXArcCircleCenter(), 0.01F);
      assertNull(wall2.getHeight());
      assertEquals(0.0F, wall2.getXEnd(), 0.01F);
      assertEquals(0.0F, wall2.getYEnd(), 0.01F);
      assertEquals(0.0F, wall2.getLeftSideShininess(), 0.01F);
      assertNull(wall2.getArcExtent());
      assertNull(wall2.getRightSideColor());
      assertEquals(0.0F, wall2.getLength(), 0.01F);
      assertEquals(0.0F, wall2.getYStart(), 0.01F);
      assertEquals(0.0F, wall2.getXStart(), 0.01F);
      assertEquals(0.0F, wall2.getThickness(), 0.01F);
      assertEquals(0.0F, wall2.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall2.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall2.getHeightAtEnd());
      assertFalse(wall2.isTrapezoidal());
      assertEquals(0.0F, wall2.getRightSideShininess(), 0.01F);
      
      wall1.setWallAtStart(wall2);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall1.equals((Object)wall2));
      assertFalse(wall1.equals((Object)wall0));
      assertFalse(wall2.equals((Object)wall1));
      assertSame(wall0, wall2);
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall2);
      assertNotSame(wall1, wall0);
      assertSame(wall2, wall0);
      assertNotSame(wall2, wall1);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertNull(wall0.getLeftSideColor());
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getHeight());
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall1.getXStart(), 0.01F);
      assertEquals(0.0F, wall1.getThickness(), 0.01F);
      assertEquals(4043.4763F, wall1.getYStart(), 0.01F);
      assertEquals(0.0F, wall1.getXEnd(), 0.01F);
      assertEquals(3993.2383F, wall1.getYArcCircleCenter(), 0.01F);
      assertEquals((-1229.7325F), wall1.getHeight(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals(100.47632F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertNull(wall1.getLeftSideColor());
      assertFalse(wall1.isTrapezoidal());
      assertEquals(0.0F, wall1.getXArcCircleCenter(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals(100.47632F, wall1.getLength(), 0.01F);
      assertEquals(3943.0F, wall1.getYEnd(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertNull(wall2.getLeftSideColor());
      assertEquals(0.0F, wall2.getXArcCircleCenter(), 0.01F);
      assertNull(wall2.getHeight());
      assertEquals(0.0F, wall2.getXEnd(), 0.01F);
      assertEquals(0.0F, wall2.getYEnd(), 0.01F);
      assertEquals(0.0F, wall2.getLeftSideShininess(), 0.01F);
      assertNull(wall2.getArcExtent());
      assertNull(wall2.getRightSideColor());
      assertEquals(0.0F, wall2.getLength(), 0.01F);
      assertEquals(0.0F, wall2.getYStart(), 0.01F);
      assertEquals(0.0F, wall2.getXStart(), 0.01F);
      assertEquals(0.0F, wall2.getThickness(), 0.01F);
      assertEquals(0.0F, wall2.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall2.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall2.getHeightAtEnd());
      assertFalse(wall2.isTrapezoidal());
      assertEquals(0.0F, wall2.getRightSideShininess(), 0.01F);
      
      Integer integer0 = wall1.getRightSideColor();
      assertFalse(wall1.equals((Object)wall2));
      assertFalse(wall1.equals((Object)wall0));
      assertNull(integer0);
      assertNotSame(wall1, wall2);
      assertNotSame(wall1, wall0);
      assertEquals(0.0F, wall1.getXStart(), 0.01F);
      assertEquals(0.0F, wall1.getThickness(), 0.01F);
      assertEquals(4043.4763F, wall1.getYStart(), 0.01F);
      assertEquals(0.0F, wall1.getXEnd(), 0.01F);
      assertEquals(3993.2383F, wall1.getYArcCircleCenter(), 0.01F);
      assertEquals((-1229.7325F), wall1.getHeight(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals(100.47632F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertNull(wall1.getLeftSideColor());
      assertFalse(wall1.isTrapezoidal());
      assertEquals(0.0F, wall1.getXArcCircleCenter(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals(100.47632F, wall1.getLength(), 0.01F);
      assertEquals(3943.0F, wall1.getYEnd(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      
      float[][] floatArray0 = wall0.getPoints();
      assertFalse(wall0.equals((Object)wall1));
      assertNotNull(floatArray0);
      assertEquals(4, floatArray0.length);
      assertSame(wall0, wall2);
      assertNotSame(wall0, wall1);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertNull(wall0.getLeftSideColor());
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getHeight());
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test183()  throws Throwable  {
      Wall wall0 = new Wall(0.1F, 0.1F, 0.1F, 0.1F, 0.1F, 0.1F);
      assertNotNull(wall0);
      assertEquals(0.1F, wall0.getXEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.1F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.1F, wall0.getThickness(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.1F, wall0.getYStart(), 0.01F);
      assertEquals(0.1F, wall0.getXStart(), 0.01F);
      assertEquals(0.1F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.1F, wall0.getHeight(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.1F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      
      LinkedList<Wall> linkedList0 = new LinkedList<Wall>();
      assertFalse(linkedList0.contains(wall0));
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      boolean boolean0 = linkedList0.add(wall0);
      assertTrue(linkedList0.contains(wall0));
      assertTrue(boolean0);
      assertEquals(0.1F, wall0.getXEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.1F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.1F, wall0.getThickness(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.1F, wall0.getYStart(), 0.01F);
      assertEquals(0.1F, wall0.getXStart(), 0.01F);
      assertEquals(0.1F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.1F, wall0.getHeight(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.1F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(1, linkedList0.size());
      
      List<Wall> list0 = Wall.clone((List<Wall>) linkedList0);
      assertTrue(linkedList0.contains(wall0));
      assertFalse(list0.contains(wall0));
      assertNotNull(list0);
      assertEquals(1, linkedList0.size());
      assertFalse(list0.isEmpty());
      assertEquals(1, list0.size());
  }

  @Test(timeout = 4000)
  public void test184()  throws Throwable  {
      Wall wall0 = new Wall((-13.933775F), 1.2353885F, 1.2353885F, (-13.933775F), (-13.933775F));
      assertNotNull(wall0);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(21.452436F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(21.452436F, wall0.getLength(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals((-6.349193F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(1.2353885F, wall0.getXEnd(), 0.01F);
      assertEquals((-13.933775F), wall0.getThickness(), 0.01F);
      assertEquals(1.2353885F, wall0.getYStart(), 0.01F);
      assertEquals((-13.933775F), wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals((-6.349193F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-13.933775F), wall0.getYEnd(), 0.01F);
      
      Wall wall1 = wall0.getWallAtStart();
      assertNull(wall1);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(21.452436F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(21.452436F, wall0.getLength(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals((-6.349193F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(1.2353885F, wall0.getXEnd(), 0.01F);
      assertEquals((-13.933775F), wall0.getThickness(), 0.01F);
      assertEquals(1.2353885F, wall0.getYStart(), 0.01F);
      assertEquals((-13.933775F), wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals((-6.349193F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-13.933775F), wall0.getYEnd(), 0.01F);
      
      wall0.setWallAtEnd((Wall) null);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(21.452436F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(21.452436F, wall0.getLength(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals((-6.349193F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(1.2353885F, wall0.getXEnd(), 0.01F);
      assertEquals((-13.933775F), wall0.getThickness(), 0.01F);
      assertEquals(1.2353885F, wall0.getYStart(), 0.01F);
      assertEquals((-13.933775F), wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals((-6.349193F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-13.933775F), wall0.getYEnd(), 0.01F);
      
      Float float0 = new Float((-13.933775F));
      assertNotNull(float0);
      assertEquals((-13.933775F), (float)float0, 0.01F);
      
      wall0.setArcExtent(float0);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(236.60666F, wall0.getLength(), 0.01F);
      assertEquals(21.452436F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals((-13.933775F), wall0.getArcExtent(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals((-15.65768F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(1.2353885F, wall0.getXEnd(), 0.01F);
      assertEquals((-13.933775F), wall0.getThickness(), 0.01F);
      assertEquals(1.2353885F, wall0.getYStart(), 0.01F);
      assertEquals((-13.933775F), wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals((-15.65768F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-13.933775F), wall0.getYEnd(), 0.01F);
      
      HomeTexture homeTexture0 = wall0.getLeftSideTexture();
      assertNull(homeTexture0);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(236.60666F, wall0.getLength(), 0.01F);
      assertEquals(21.452436F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals((-13.933775F), wall0.getArcExtent(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals((-15.65768F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(1.2353885F, wall0.getXEnd(), 0.01F);
      assertEquals((-13.933775F), wall0.getThickness(), 0.01F);
      assertEquals(1.2353885F, wall0.getYStart(), 0.01F);
      assertEquals((-13.933775F), wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals((-15.65768F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-13.933775F), wall0.getYEnd(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test185()  throws Throwable  {
      Wall wall0 = new Wall(0.01F, 0.01F, 0.01F, 1.0F, 0.01F, 0.01F);
      assertNotNull(wall0);
      assertEquals(0.505F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.01F, wall0.getThickness(), 0.01F);
      assertEquals(0.01F, wall0.getXStart(), 0.01F);
      assertEquals(0.01F, wall0.getYStart(), 0.01F);
      assertEquals(0.01F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(1.0F, wall0.getYEnd(), 0.01F);
      assertEquals(0.99F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.01F, wall0.getHeight(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.01F, wall0.getXEnd(), 0.01F);
      assertEquals(0.99F, wall0.getLength(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      
      float float0 = Float.sum(0.01F, 0.0F);
      assertEquals(0.01F, float0, 0.01F);
      
      Float float1 = new Float((-1.0F));
      assertNotEquals((float)float1, (float)float0, 0.01F);
      assertNotNull(float1);
      assertEquals((-1.0F), (float)float1, 0.01F);
      
      wall0.setHeightAtEnd(float1);
      assertNotEquals((float)float1, (float)float0, 0.01F);
      assertEquals(0.505F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.01F, wall0.getThickness(), 0.01F);
      assertEquals(0.01F, wall0.getXStart(), 0.01F);
      assertEquals(0.01F, wall0.getYStart(), 0.01F);
      assertEquals(0.01F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(1.0F, wall0.getYEnd(), 0.01F);
      assertEquals(0.99F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.01F, wall0.getHeight(), 0.01F);
      assertTrue(wall0.isTrapezoidal());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertEquals(0.01F, wall0.getXEnd(), 0.01F);
      assertEquals(0.99F, wall0.getLength(), 0.01F);
      assertEquals((-1.0F), wall0.getHeightAtEnd(), 0.01F);
      
      float float2 = wall0.getThickness();
      assertEquals(float2, float0, 0.01F);
      assertEquals(0.01F, float2, 0.01F);
      assertEquals(0.505F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.01F, wall0.getThickness(), 0.01F);
      assertEquals(0.01F, wall0.getXStart(), 0.01F);
      assertEquals(0.01F, wall0.getYStart(), 0.01F);
      assertEquals(0.01F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(1.0F, wall0.getYEnd(), 0.01F);
      assertEquals(0.99F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.01F, wall0.getHeight(), 0.01F);
      assertTrue(wall0.isTrapezoidal());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertEquals(0.01F, wall0.getXEnd(), 0.01F);
      assertEquals(0.99F, wall0.getLength(), 0.01F);
      assertEquals((-1.0F), wall0.getHeightAtEnd(), 0.01F);
      
      wall0.setRightSideColor((Integer) null);
      assertEquals(0.505F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.01F, wall0.getThickness(), 0.01F);
      assertEquals(0.01F, wall0.getXStart(), 0.01F);
      assertEquals(0.01F, wall0.getYStart(), 0.01F);
      assertEquals(0.01F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(1.0F, wall0.getYEnd(), 0.01F);
      assertEquals(0.99F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.01F, wall0.getHeight(), 0.01F);
      assertTrue(wall0.isTrapezoidal());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertEquals(0.01F, wall0.getXEnd(), 0.01F);
      assertEquals(0.99F, wall0.getLength(), 0.01F);
      assertEquals((-1.0F), wall0.getHeightAtEnd(), 0.01F);
      
      boolean boolean0 = wall0.containsWallEndAt(0.01F, 0.01F, 0.01F);
      assertFalse(boolean0);
      assertEquals(0.505F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.01F, wall0.getThickness(), 0.01F);
      assertEquals(0.01F, wall0.getXStart(), 0.01F);
      assertEquals(0.01F, wall0.getYStart(), 0.01F);
      assertEquals(0.01F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(1.0F, wall0.getYEnd(), 0.01F);
      assertEquals(0.99F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.01F, wall0.getHeight(), 0.01F);
      assertTrue(wall0.isTrapezoidal());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertEquals(0.01F, wall0.getXEnd(), 0.01F);
      assertEquals(0.99F, wall0.getLength(), 0.01F);
      assertEquals((-1.0F), wall0.getHeightAtEnd(), 0.01F);
      
      float float3 = wall0.getXArcCircleCenter();
      assertEquals(float3, float0, 0.01F);
      assertEquals(float3, float2, 0.01F);
      assertEquals(0.01F, float3, 0.01F);
      assertEquals(0.505F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.01F, wall0.getThickness(), 0.01F);
      assertEquals(0.01F, wall0.getXStart(), 0.01F);
      assertEquals(0.01F, wall0.getYStart(), 0.01F);
      assertEquals(0.01F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(1.0F, wall0.getYEnd(), 0.01F);
      assertEquals(0.99F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.01F, wall0.getHeight(), 0.01F);
      assertTrue(wall0.isTrapezoidal());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertEquals(0.01F, wall0.getXEnd(), 0.01F);
      assertEquals(0.99F, wall0.getLength(), 0.01F);
      assertEquals((-1.0F), wall0.getHeightAtEnd(), 0.01F);
      
      Wall wall1 = wall0.clone();
      assertFalse(wall1.equals((Object)wall0));
      assertNotNull(wall1);
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      assertEquals(0.505F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.01F, wall0.getThickness(), 0.01F);
      assertEquals(0.01F, wall0.getXStart(), 0.01F);
      assertEquals(0.01F, wall0.getYStart(), 0.01F);
      assertEquals(0.01F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(1.0F, wall0.getYEnd(), 0.01F);
      assertEquals(0.99F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.01F, wall0.getHeight(), 0.01F);
      assertTrue(wall0.isTrapezoidal());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertEquals(0.01F, wall0.getXEnd(), 0.01F);
      assertEquals(0.99F, wall0.getLength(), 0.01F);
      assertEquals((-1.0F), wall0.getHeightAtEnd(), 0.01F);
      assertEquals(0.99F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.01F, wall1.getThickness(), 0.01F);
      assertEquals(0.01F, wall1.getXStart(), 0.01F);
      assertEquals(0.505F, wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(1.0F, wall1.getYEnd(), 0.01F);
      assertEquals(0.01F, wall1.getYStart(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals(0.01F, wall1.getXArcCircleCenter(), 0.01F);
      assertTrue(wall1.isTrapezoidal());
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals(0.01F, wall1.getHeight(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertEquals(0.99F, wall1.getLength(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals((-1.0F), wall1.getHeightAtEnd(), 0.01F);
      assertEquals(0.01F, wall1.getXEnd(), 0.01F);
      
      HomeTexture homeTexture0 = wall1.getLeftSideTexture();
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall1.equals((Object)wall0));
      assertNull(homeTexture0);
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      assertEquals(0.505F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.01F, wall0.getThickness(), 0.01F);
      assertEquals(0.01F, wall0.getXStart(), 0.01F);
      assertEquals(0.01F, wall0.getYStart(), 0.01F);
      assertEquals(0.01F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(1.0F, wall0.getYEnd(), 0.01F);
      assertEquals(0.99F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.01F, wall0.getHeight(), 0.01F);
      assertTrue(wall0.isTrapezoidal());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertEquals(0.01F, wall0.getXEnd(), 0.01F);
      assertEquals(0.99F, wall0.getLength(), 0.01F);
      assertEquals((-1.0F), wall0.getHeightAtEnd(), 0.01F);
      assertEquals(0.99F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.01F, wall1.getThickness(), 0.01F);
      assertEquals(0.01F, wall1.getXStart(), 0.01F);
      assertEquals(0.505F, wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(1.0F, wall1.getYEnd(), 0.01F);
      assertEquals(0.01F, wall1.getYStart(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals(0.01F, wall1.getXArcCircleCenter(), 0.01F);
      assertTrue(wall1.isTrapezoidal());
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals(0.01F, wall1.getHeight(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertEquals(0.99F, wall1.getLength(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals((-1.0F), wall1.getHeightAtEnd(), 0.01F);
      assertEquals(0.01F, wall1.getXEnd(), 0.01F);
      
      wall0.setRightSideTexture((HomeTexture) null);
      assertFalse(wall0.equals((Object)wall1));
      assertNotSame(wall0, wall1);
      assertEquals(0.505F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.01F, wall0.getThickness(), 0.01F);
      assertEquals(0.01F, wall0.getXStart(), 0.01F);
      assertEquals(0.01F, wall0.getYStart(), 0.01F);
      assertEquals(0.01F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(1.0F, wall0.getYEnd(), 0.01F);
      assertEquals(0.99F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.01F, wall0.getHeight(), 0.01F);
      assertTrue(wall0.isTrapezoidal());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertEquals(0.01F, wall0.getXEnd(), 0.01F);
      assertEquals(0.99F, wall0.getLength(), 0.01F);
      assertEquals((-1.0F), wall0.getHeightAtEnd(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test186()  throws Throwable  {
      Wall wall0 = new Wall(0.01F, 0.01F, 0.01F, 1.0F, 0.01F, 0.01F);
      assertNotNull(wall0);
      assertEquals(0.01F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getLeftSideColor());
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.01F, wall0.getXEnd(), 0.01F);
      assertEquals(0.99F, wall0.getLength(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.01F, wall0.getHeight(), 0.01F);
      assertEquals(0.01F, wall0.getThickness(), 0.01F);
      assertEquals(0.99F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.01F, wall0.getXStart(), 0.01F);
      assertEquals(0.505F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(1.0F, wall0.getYEnd(), 0.01F);
      assertEquals(0.01F, wall0.getYStart(), 0.01F);
      
      wall0.setYStart((-519.96F));
      assertEquals((-519.96F), wall0.getYStart(), 0.01F);
      assertEquals(0.01F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getLeftSideColor());
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.01F, wall0.getXEnd(), 0.01F);
      assertEquals((-259.48F), wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.01F, wall0.getHeight(), 0.01F);
      assertEquals(0.01F, wall0.getThickness(), 0.01F);
      assertEquals(520.96F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.01F, wall0.getXStart(), 0.01F);
      assertEquals(520.96F, wall0.getLength(), 0.01F);
      assertEquals(1.0F, wall0.getYEnd(), 0.01F);
      
      float float0 = Float.sum(0.01F, 0.0F);
      assertEquals(0.01F, float0, 0.01F);
      
      Wall wall1 = new Wall(1.0F, 1306.6985F, (-480.33368F), 0.01F, (-480.33368F), 155.2F);
      assertFalse(wall1.equals((Object)wall0));
      assertNotNull(wall1);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals((-480.33368F), wall1.getThickness(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals((-239.66684F), wall1.getXArcCircleCenter(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertFalse(wall1.isTrapezoidal());
      assertEquals(1.0F, wall1.getXStart(), 0.01F);
      assertEquals(155.2F, wall1.getHeight(), 0.01F);
      assertEquals(1392.5217F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(1306.6985F, wall1.getYStart(), 0.01F);
      assertEquals(653.35425F, wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(0.01F, wall1.getYEnd(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals((-480.33368F), wall1.getXEnd(), 0.01F);
      assertEquals(1392.5217F, wall1.getLength(), 0.01F);
      
      wall0.setWallAtEnd(wall1);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall1.equals((Object)wall0));
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      assertEquals((-519.96F), wall0.getYStart(), 0.01F);
      assertEquals(0.01F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getLeftSideColor());
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.01F, wall0.getXEnd(), 0.01F);
      assertEquals((-259.48F), wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.01F, wall0.getHeight(), 0.01F);
      assertEquals(0.01F, wall0.getThickness(), 0.01F);
      assertEquals(520.96F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.01F, wall0.getXStart(), 0.01F);
      assertEquals(520.96F, wall0.getLength(), 0.01F);
      assertEquals(1.0F, wall0.getYEnd(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals((-480.33368F), wall1.getThickness(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals((-239.66684F), wall1.getXArcCircleCenter(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertFalse(wall1.isTrapezoidal());
      assertEquals(1.0F, wall1.getXStart(), 0.01F);
      assertEquals(155.2F, wall1.getHeight(), 0.01F);
      assertEquals(1392.5217F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(1306.6985F, wall1.getYStart(), 0.01F);
      assertEquals(653.35425F, wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(0.01F, wall1.getYEnd(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals((-480.33368F), wall1.getXEnd(), 0.01F);
      assertEquals(1392.5217F, wall1.getLength(), 0.01F);
      
      wall1.setYEnd(1306.6985F);
      assertFalse(wall1.equals((Object)wall0));
      assertNotSame(wall1, wall0);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals((-480.33368F), wall1.getThickness(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals(481.33368F, wall1.getLength(), 0.01F);
      assertEquals((-239.66684F), wall1.getXArcCircleCenter(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertFalse(wall1.isTrapezoidal());
      assertEquals(1306.6985F, wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(1.0F, wall1.getXStart(), 0.01F);
      assertEquals(155.2F, wall1.getHeight(), 0.01F);
      assertEquals(1306.6985F, wall1.getYStart(), 0.01F);
      assertEquals(1306.6985F, wall1.getYEnd(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals(481.33368F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-480.33368F), wall1.getXEnd(), 0.01F);
      
      wall1.setWallAtEnd(wall0);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall1.equals((Object)wall0));
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      assertEquals((-519.96F), wall0.getYStart(), 0.01F);
      assertEquals(0.01F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getLeftSideColor());
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.01F, wall0.getXEnd(), 0.01F);
      assertEquals((-259.48F), wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.01F, wall0.getHeight(), 0.01F);
      assertEquals(0.01F, wall0.getThickness(), 0.01F);
      assertEquals(520.96F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.01F, wall0.getXStart(), 0.01F);
      assertEquals(520.96F, wall0.getLength(), 0.01F);
      assertEquals(1.0F, wall0.getYEnd(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals((-480.33368F), wall1.getThickness(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals(481.33368F, wall1.getLength(), 0.01F);
      assertEquals((-239.66684F), wall1.getXArcCircleCenter(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertFalse(wall1.isTrapezoidal());
      assertEquals(1306.6985F, wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(1.0F, wall1.getXStart(), 0.01F);
      assertEquals(155.2F, wall1.getHeight(), 0.01F);
      assertEquals(1306.6985F, wall1.getYStart(), 0.01F);
      assertEquals(1306.6985F, wall1.getYEnd(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals(481.33368F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-480.33368F), wall1.getXEnd(), 0.01F);
      
      Float float1 = new Float((-480.33368F));
      assertNotEquals((float)float1, (float)float0, 0.01F);
      assertNotNull(float1);
      assertEquals((-480.33368F), (float)float1, 0.01F);
      
      Float float2 = new Float((double) 0.01F);
      assertEquals((float)float2, (float)float0, 0.01F);
      assertNotEquals((float)float2, (float)float1, 0.01F);
      assertNotNull(float2);
      assertEquals(0.01F, (float)float2, 0.01F);
      
      float float3 = Float.min(0.01F, 0.01F);
      assertEquals(float3, float0, 0.01F);
      assertEquals(0.01F, float3, 0.01F);
      
      wall0.setHeight(float2);
      assertFalse(wall0.equals((Object)wall1));
      assertEquals((float)float2, (float)float0, 0.01F);
      assertEquals((float)float2, (float)float3, 0.01F);
      assertNotEquals((float)float2, (float)float1, 0.01F);
      assertNotSame(wall0, wall1);
      assertEquals((-519.96F), wall0.getYStart(), 0.01F);
      assertEquals(0.01F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getLeftSideColor());
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.01F, wall0.getXEnd(), 0.01F);
      assertEquals((-259.48F), wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.01F, wall0.getHeight(), 0.01F);
      assertEquals(0.01F, wall0.getThickness(), 0.01F);
      assertEquals(520.96F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.01F, wall0.getXStart(), 0.01F);
      assertEquals(520.96F, wall0.getLength(), 0.01F);
      assertEquals(1.0F, wall0.getYEnd(), 0.01F);
      
      float[][] floatArray0 = wall0.getPoints();
      assertFalse(wall0.equals((Object)wall1));
      assertNotNull(floatArray0);
      assertEquals(4, floatArray0.length);
      assertNotSame(wall0, wall1);
      assertEquals((-519.96F), wall0.getYStart(), 0.01F);
      assertEquals(0.01F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getLeftSideColor());
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.01F, wall0.getXEnd(), 0.01F);
      assertEquals((-259.48F), wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.01F, wall0.getHeight(), 0.01F);
      assertEquals(0.01F, wall0.getThickness(), 0.01F);
      assertEquals(520.96F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.01F, wall0.getXStart(), 0.01F);
      assertEquals(520.96F, wall0.getLength(), 0.01F);
      assertEquals(1.0F, wall0.getYEnd(), 0.01F);
      
      float[][] floatArray1 = wall1.getPoints();
      assertFalse(wall1.equals((Object)wall0));
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertNotNull(floatArray1);
      assertEquals(4, floatArray1.length);
      assertNotSame(wall1, wall0);
      assertNotSame(floatArray1, floatArray0);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals((-480.33368F), wall1.getThickness(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals(481.33368F, wall1.getLength(), 0.01F);
      assertEquals((-239.66684F), wall1.getXArcCircleCenter(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertFalse(wall1.isTrapezoidal());
      assertEquals(1306.6985F, wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(1.0F, wall1.getXStart(), 0.01F);
      assertEquals(155.2F, wall1.getHeight(), 0.01F);
      assertEquals(1306.6985F, wall1.getYStart(), 0.01F);
      assertEquals(1306.6985F, wall1.getYEnd(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals(481.33368F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-480.33368F), wall1.getXEnd(), 0.01F);
      
      Integer integer0 = wall1.getRightSideColor();
      assertFalse(wall1.equals((Object)wall0));
      assertNull(integer0);
      assertNotSame(wall1, wall0);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals((-480.33368F), wall1.getThickness(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals(481.33368F, wall1.getLength(), 0.01F);
      assertEquals((-239.66684F), wall1.getXArcCircleCenter(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertFalse(wall1.isTrapezoidal());
      assertEquals(1306.6985F, wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(1.0F, wall1.getXStart(), 0.01F);
      assertEquals(155.2F, wall1.getHeight(), 0.01F);
      assertEquals(1306.6985F, wall1.getYStart(), 0.01F);
      assertEquals(1306.6985F, wall1.getYEnd(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals(481.33368F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-480.33368F), wall1.getXEnd(), 0.01F);
      
      boolean boolean0 = wall1.isAtLevel((Level) null);
      assertFalse(wall1.equals((Object)wall0));
      assertNotSame(wall1, wall0);
      assertTrue(boolean0);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals((-480.33368F), wall1.getThickness(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals(481.33368F, wall1.getLength(), 0.01F);
      assertEquals((-239.66684F), wall1.getXArcCircleCenter(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertFalse(wall1.isTrapezoidal());
      assertEquals(1306.6985F, wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(1.0F, wall1.getXStart(), 0.01F);
      assertEquals(155.2F, wall1.getHeight(), 0.01F);
      assertEquals(1306.6985F, wall1.getYStart(), 0.01F);
      assertEquals(1306.6985F, wall1.getYEnd(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals(481.33368F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-480.33368F), wall1.getXEnd(), 0.01F);
      
      wall0.setHeightAtEnd(float2);
      assertFalse(wall0.equals((Object)wall1));
      assertEquals((float)float2, (float)float0, 0.01F);
      assertEquals((float)float2, (float)float3, 0.01F);
      assertNotEquals((float)float2, (float)float1, 0.01F);
      assertNotSame(wall0, wall1);
      assertEquals((-519.96F), wall0.getYStart(), 0.01F);
      assertEquals(0.01F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getLeftSideColor());
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.01F, wall0.getXEnd(), 0.01F);
      assertEquals((-259.48F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.01F, wall0.getHeight(), 0.01F);
      assertEquals(0.01F, wall0.getThickness(), 0.01F);
      assertEquals(520.96F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.01F, wall0.getXStart(), 0.01F);
      assertEquals(520.96F, wall0.getLength(), 0.01F);
      assertEquals(1.0F, wall0.getYEnd(), 0.01F);
      assertEquals(0.01F, wall0.getHeightAtEnd(), 0.01F);
      
      wall0.setArcExtent(float1);
      assertFalse(wall0.equals((Object)wall1));
      assertNotEquals((float)float1, (float)float3, 0.01F);
      assertNotEquals((float)float1, (float)float0, 0.01F);
      assertNotEquals((float)float1, (float)float2, 0.01F);
      assertNotSame(wall0, wall1);
      assertEquals((-519.96F), wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getLeftSideColor());
      assertEquals(126839.99F, wall0.getLength(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals((-480.33368F), wall0.getArcExtent(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.01F, wall0.getXEnd(), 0.01F);
      assertEquals((-259.48F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.01F, wall0.getHeight(), 0.01F);
      assertEquals(43.383102F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.01F, wall0.getThickness(), 0.01F);
      assertEquals(520.96F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.01F, wall0.getXStart(), 0.01F);
      assertEquals(1.0F, wall0.getYEnd(), 0.01F);
      assertEquals(0.01F, wall0.getHeightAtEnd(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test187()  throws Throwable  {
      float float0 = (-4215.8525F);
      Wall wall0 = new Wall((-4215.8525F), (-4215.8525F), (-4215.8525F), (-4215.8525F), (-4215.8525F));
      assertNotNull(wall0);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals((-4215.8525F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-4215.8525F), wall0.getYEnd(), 0.01F);
      assertEquals((-4215.8525F), wall0.getXEnd(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getHeight());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getLeftSideColor());
      assertEquals((-4215.8525F), wall0.getThickness(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals((-4215.8525F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals((-4215.8525F), wall0.getYStart(), 0.01F);
      assertEquals((-4215.8525F), wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      
      float[][] floatArray0 = wall0.getPoints();
      assertNotNull(floatArray0);
      assertEquals(4, floatArray0.length);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals((-4215.8525F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-4215.8525F), wall0.getYEnd(), 0.01F);
      assertEquals((-4215.8525F), wall0.getXEnd(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getHeight());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getLeftSideColor());
      assertEquals((-4215.8525F), wall0.getThickness(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals((-4215.8525F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals((-4215.8525F), wall0.getYStart(), 0.01F);
      assertEquals((-4215.8525F), wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      
      Float float1 = new Float((double) (-4215.8525F));
      assertEquals((float)float1, (float)float0, 0.01F);
      assertNotNull(float1);
      assertEquals((-4215.8525F), (float)float1, 0.01F);
      
      wall0.setArcExtent(float1);
      assertEquals((float)float1, (float)float0, 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals((-4215.8525F), wall0.getArcExtent(), 0.01F);
      assertEquals((-4215.8525F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-4215.8525F), wall0.getYEnd(), 0.01F);
      assertEquals((-4215.8525F), wall0.getXEnd(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getHeight());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getLeftSideColor());
      assertEquals((-4215.8525F), wall0.getThickness(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals((-4215.8525F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals((-4215.8525F), wall0.getYStart(), 0.01F);
      assertEquals((-4215.8525F), wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      
      boolean boolean0 = wall0.containsWallEndAt((-4215.8525F), (-4215.8525F), 2315.428F);
      assertTrue(boolean0);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals((-4215.8525F), wall0.getArcExtent(), 0.01F);
      assertEquals((-4215.8525F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-4215.8525F), wall0.getYEnd(), 0.01F);
      assertEquals((-4215.8525F), wall0.getXEnd(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getHeight());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getLeftSideColor());
      assertEquals((-4215.8525F), wall0.getThickness(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals((-4215.8525F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals((-4215.8525F), wall0.getYStart(), 0.01F);
      assertEquals((-4215.8525F), wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      
      PropertyChangeListener propertyChangeListener0 = mock(PropertyChangeListener.class, new ViolatedAssumptionAnswer());
      wall0.setXEnd((-1.0F));
      assertEquals(21301.48F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(1.07943568E8F, wall0.getLength(), 0.01F);
      assertEquals((-4215.8525F), wall0.getArcExtent(), 0.01F);
      assertEquals((-1.0F), wall0.getXEnd(), 0.01F);
      assertEquals((-4215.8525F), wall0.getYEnd(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getHeight());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getLeftSideColor());
      assertEquals((-4215.8525F), wall0.getThickness(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals((-4215.8525F), wall0.getYStart(), 0.01F);
      assertEquals((-4215.8525F), wall0.getXStart(), 0.01F);
      assertEquals((-2108.4263F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(4214.8525F, wall0.getStartPointToEndPointDistance(), 0.01F);
      
      wall0.setWallAtEnd(wall0);
      assertEquals(21301.48F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(1.07943568E8F, wall0.getLength(), 0.01F);
      assertEquals((-4215.8525F), wall0.getArcExtent(), 0.01F);
      assertEquals((-1.0F), wall0.getXEnd(), 0.01F);
      assertEquals((-4215.8525F), wall0.getYEnd(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getHeight());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getLeftSideColor());
      assertEquals((-4215.8525F), wall0.getThickness(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals((-4215.8525F), wall0.getYStart(), 0.01F);
      assertEquals((-4215.8525F), wall0.getXStart(), 0.01F);
      assertEquals((-2108.4263F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(4214.8525F, wall0.getStartPointToEndPointDistance(), 0.01F);
      
      float float2 = wall0.getYArcCircleCenter();
      assertNotEquals(float2, float0, 0.01F);
      assertEquals(21301.48F, float2, 0.01F);
      assertEquals(21301.48F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(1.07943568E8F, wall0.getLength(), 0.01F);
      assertEquals((-4215.8525F), wall0.getArcExtent(), 0.01F);
      assertEquals((-1.0F), wall0.getXEnd(), 0.01F);
      assertEquals((-4215.8525F), wall0.getYEnd(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getHeight());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getLeftSideColor());
      assertEquals((-4215.8525F), wall0.getThickness(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals((-4215.8525F), wall0.getYStart(), 0.01F);
      assertEquals((-4215.8525F), wall0.getXStart(), 0.01F);
      assertEquals((-2108.4263F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(4214.8525F, wall0.getStartPointToEndPointDistance(), 0.01F);
      
      Float float3 = new Float(21301.48F);
      assertNotEquals((float)float3, (float)float0, 0.01F);
      assertEquals((float)float3, (float)float2, 0.01F);
      assertNotEquals((float)float3, (float)float1, 0.01F);
      assertNotNull(float3);
      assertEquals(21301.48F, (float)float3, 0.01F);
      
      float float4 = 2662.205F;
      float float5 = 1637.2125F;
      wall0.containsWallEndAt(float4, float0, float5);
  }

  @Test(timeout = 4000)
  public void test188()  throws Throwable  {
      Wall wall0 = new Wall(0.1F, 0.1F, 0.1F, 0.1F, 0.1F, 0.1F);
      assertNotNull(wall0);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(0.1F, wall0.getYEnd(), 0.01F);
      assertEquals(0.1F, wall0.getXEnd(), 0.01F);
      assertEquals(0.1F, wall0.getThickness(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.1F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.1F, wall0.getXStart(), 0.01F);
      assertEquals(0.1F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.1F, wall0.getHeight(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.1F, wall0.getYArcCircleCenter(), 0.01F);
      
      Integer integer0 = wall0.getRightSideColor();
      assertNull(integer0);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(0.1F, wall0.getYEnd(), 0.01F);
      assertEquals(0.1F, wall0.getXEnd(), 0.01F);
      assertEquals(0.1F, wall0.getThickness(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.1F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.1F, wall0.getXStart(), 0.01F);
      assertEquals(0.1F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.1F, wall0.getHeight(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.1F, wall0.getYArcCircleCenter(), 0.01F);
      
      float float0 = wall0.getLeftSideShininess();
      assertEquals(0.0F, float0, 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(0.1F, wall0.getYEnd(), 0.01F);
      assertEquals(0.1F, wall0.getXEnd(), 0.01F);
      assertEquals(0.1F, wall0.getThickness(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.1F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.1F, wall0.getXStart(), 0.01F);
      assertEquals(0.1F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.1F, wall0.getHeight(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.1F, wall0.getYArcCircleCenter(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test189()  throws Throwable  {
      Wall wall0 = new Wall(0.0F, 0.0F, 0.0F, 0.0F, 0.0F);
      assertNotNull(wall0);
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertFalse(wall0.isTrapezoidal());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertNull(wall0.getHeight());
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      
      boolean boolean0 = wall0.containsWallStartAt(0.0F, 0.0F, 0.0F);
      assertFalse(boolean0);
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertFalse(wall0.isTrapezoidal());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertNull(wall0.getHeight());
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      
      wall0.setWallAtStart(wall0);
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertFalse(wall0.isTrapezoidal());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertNull(wall0.getHeight());
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      
      boolean boolean1 = wall0.containsWallEndAt(0.0F, 0.0F, 0.0F);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertFalse(wall0.isTrapezoidal());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertNull(wall0.getHeight());
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      
      Wall wall1 = new Wall(0.0F, 4043.4763F, 0.0F, 3943.0F, 155.2F, (-1228.8142F));
      assertFalse(wall1.equals((Object)wall0));
      assertNotNull(wall1);
      assertNull(wall1.getLeftSideColor());
      assertFalse(wall1.isTrapezoidal());
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertEquals(3943.0F, wall1.getYEnd(), 0.01F);
      assertEquals((-1228.8142F), wall1.getHeight(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals(4043.4763F, wall1.getYStart(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals(3993.2383F, wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(100.47632F, wall1.getLength(), 0.01F);
      assertEquals(100.47632F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall1.getXStart(), 0.01F);
      assertEquals(155.2F, wall1.getThickness(), 0.01F);
      assertEquals(0.0F, wall1.getXEnd(), 0.01F);
      
      wall0.setWallAtEnd(wall1);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall1.equals((Object)wall0));
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertFalse(wall0.isTrapezoidal());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertNull(wall0.getHeight());
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertFalse(wall1.isTrapezoidal());
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertEquals(3943.0F, wall1.getYEnd(), 0.01F);
      assertEquals((-1228.8142F), wall1.getHeight(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals(4043.4763F, wall1.getYStart(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals(3993.2383F, wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(100.47632F, wall1.getLength(), 0.01F);
      assertEquals(100.47632F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall1.getXStart(), 0.01F);
      assertEquals(155.2F, wall1.getThickness(), 0.01F);
      assertEquals(0.0F, wall1.getXEnd(), 0.01F);
      
      Float float0 = new Float((-1.0F));
      assertNotNull(float0);
      assertEquals((-1.0F), (float)float0, 0.01F);
      
      wall0.setHeight(float0);
      assertFalse(wall0.equals((Object)wall1));
      assertNotSame(wall0, wall1);
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertFalse(wall0.isTrapezoidal());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals((-1.0F), wall0.getHeight(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      
      float float1 = wall0.getYArcCircleCenter();
      assertFalse(wall0.equals((Object)wall1));
      assertNotSame(wall0, wall1);
      assertEquals(0.0F, float1, 0.01F);
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertFalse(wall0.isTrapezoidal());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals((-1.0F), wall0.getHeight(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      
      boolean boolean2 = wall0.containsWallStartAt(185.3215F, 2213.745F, 4043.4763F);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      assertNotSame(wall0, wall1);
      assertTrue(boolean2);
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertFalse(wall0.isTrapezoidal());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals((-1.0F), wall0.getHeight(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      
      wall0.setXStart(3516.0F);
      assertFalse(wall0.equals((Object)wall1));
      assertNotSame(wall0, wall1);
      assertEquals(3516.0F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertFalse(wall0.isTrapezoidal());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals((-1.0F), wall0.getHeight(), 0.01F);
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals(3516.0F, wall0.getXStart(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(3516.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(1758.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      
      float float2 = wall0.getYEnd();
      assertFalse(wall0.equals((Object)wall1));
      assertEquals(float2, float1, 0.01F);
      assertNotSame(wall0, wall1);
      assertEquals(0.0F, float2, 0.01F);
      assertEquals(3516.0F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertFalse(wall0.isTrapezoidal());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals((-1.0F), wall0.getHeight(), 0.01F);
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals(3516.0F, wall0.getXStart(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(3516.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(1758.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      
      Wall wall2 = wall1.clone();
      assertFalse(wall1.equals((Object)wall0));
      assertFalse(wall2.equals((Object)wall0));
      assertFalse(wall2.equals((Object)wall1));
      assertNotNull(wall2);
      assertNotSame(wall1, wall0);
      assertNotSame(wall1, wall2);
      assertNotSame(wall2, wall0);
      assertNotSame(wall2, wall1);
      assertNull(wall1.getLeftSideColor());
      assertFalse(wall1.isTrapezoidal());
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertEquals(3943.0F, wall1.getYEnd(), 0.01F);
      assertEquals((-1228.8142F), wall1.getHeight(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals(4043.4763F, wall1.getYStart(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals(3993.2383F, wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(100.47632F, wall1.getLength(), 0.01F);
      assertEquals(100.47632F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall1.getXStart(), 0.01F);
      assertEquals(155.2F, wall1.getThickness(), 0.01F);
      assertEquals(0.0F, wall1.getXEnd(), 0.01F);
      assertEquals(4043.4763F, wall2.getYStart(), 0.01F);
      assertEquals(155.2F, wall2.getThickness(), 0.01F);
      assertFalse(wall2.isTrapezoidal());
      assertEquals(0.0F, wall2.getXEnd(), 0.01F);
      assertEquals(0.0F, wall2.getLeftSideShininess(), 0.01F);
      assertNull(wall2.getArcExtent());
      assertNull(wall2.getRightSideColor());
      assertEquals(100.47632F, wall2.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(3993.2383F, wall2.getYArcCircleCenter(), 0.01F);
      assertEquals((-1228.8142F), wall2.getHeight(), 0.01F);
      assertEquals(100.47632F, wall2.getLength(), 0.01F);
      assertNull(wall2.getHeightAtEnd());
      assertEquals(0.0F, wall2.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall2.getXStart(), 0.01F);
      assertNull(wall2.getLeftSideColor());
      assertEquals(3943.0F, wall2.getYEnd(), 0.01F);
      assertEquals(0.0F, wall2.getRightSideShininess(), 0.01F);
      
      Wall wall3 = wall2.clone();
      assertFalse(wall1.equals((Object)wall0));
      assertFalse(wall1.equals((Object)wall2));
      assertFalse(wall2.equals((Object)wall0));
      assertFalse(wall2.equals((Object)wall1));
      assertFalse(wall3.equals((Object)wall0));
      assertFalse(wall3.equals((Object)wall2));
      assertFalse(wall3.equals((Object)wall1));
      assertNotNull(wall3);
      assertNotSame(wall1, wall3);
      assertNotSame(wall1, wall0);
      assertNotSame(wall1, wall2);
      assertNotSame(wall2, wall0);
      assertNotSame(wall2, wall1);
      assertNotSame(wall2, wall3);
      assertNotSame(wall3, wall0);
      assertNotSame(wall3, wall2);
      assertNotSame(wall3, wall1);
      assertNull(wall1.getLeftSideColor());
      assertFalse(wall1.isTrapezoidal());
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertEquals(3943.0F, wall1.getYEnd(), 0.01F);
      assertEquals((-1228.8142F), wall1.getHeight(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals(4043.4763F, wall1.getYStart(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals(3993.2383F, wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(100.47632F, wall1.getLength(), 0.01F);
      assertEquals(100.47632F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall1.getXStart(), 0.01F);
      assertEquals(155.2F, wall1.getThickness(), 0.01F);
      assertEquals(0.0F, wall1.getXEnd(), 0.01F);
      assertEquals(4043.4763F, wall2.getYStart(), 0.01F);
      assertEquals(155.2F, wall2.getThickness(), 0.01F);
      assertFalse(wall2.isTrapezoidal());
      assertEquals(0.0F, wall2.getXEnd(), 0.01F);
      assertEquals(0.0F, wall2.getLeftSideShininess(), 0.01F);
      assertNull(wall2.getArcExtent());
      assertNull(wall2.getRightSideColor());
      assertEquals(100.47632F, wall2.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(3993.2383F, wall2.getYArcCircleCenter(), 0.01F);
      assertEquals((-1228.8142F), wall2.getHeight(), 0.01F);
      assertEquals(100.47632F, wall2.getLength(), 0.01F);
      assertNull(wall2.getHeightAtEnd());
      assertEquals(0.0F, wall2.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall2.getXStart(), 0.01F);
      assertNull(wall2.getLeftSideColor());
      assertEquals(3943.0F, wall2.getYEnd(), 0.01F);
      assertEquals(0.0F, wall2.getRightSideShininess(), 0.01F);
      assertEquals(3993.2383F, wall3.getYArcCircleCenter(), 0.01F);
      assertEquals(100.47632F, wall3.getLength(), 0.01F);
      assertNull(wall3.getRightSideColor());
      assertEquals(0.0F, wall3.getRightSideShininess(), 0.01F);
      assertNull(wall3.getArcExtent());
      assertNull(wall3.getHeightAtEnd());
      assertEquals(0.0F, wall3.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall3.getXStart(), 0.01F);
      assertEquals(3943.0F, wall3.getYEnd(), 0.01F);
      assertNull(wall3.getLeftSideColor());
      assertEquals(4043.4763F, wall3.getYStart(), 0.01F);
      assertEquals(0.0F, wall3.getXEnd(), 0.01F);
      assertEquals(155.2F, wall3.getThickness(), 0.01F);
      assertFalse(wall3.isTrapezoidal());
      assertEquals((-1228.8142F), wall3.getHeight(), 0.01F);
      assertEquals(0.0F, wall3.getLeftSideShininess(), 0.01F);
      assertEquals(100.47632F, wall3.getStartPointToEndPointDistance(), 0.01F);
      
      wall3.setWallAtEnd(wall0);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall0.equals((Object)wall3));
      assertFalse(wall0.equals((Object)wall2));
      assertFalse(wall1.equals((Object)wall3));
      assertFalse(wall1.equals((Object)wall0));
      assertFalse(wall1.equals((Object)wall2));
      assertFalse(wall2.equals((Object)wall0));
      assertFalse(wall2.equals((Object)wall1));
      assertFalse(wall2.equals((Object)wall3));
      assertFalse(wall3.equals((Object)wall0));
      assertFalse(wall3.equals((Object)wall2));
      assertFalse(wall3.equals((Object)wall1));
      assertNotSame(wall0, wall1);
      assertNotSame(wall0, wall3);
      assertNotSame(wall0, wall2);
      assertNotSame(wall1, wall3);
      assertNotSame(wall1, wall0);
      assertNotSame(wall1, wall2);
      assertNotSame(wall2, wall0);
      assertNotSame(wall2, wall1);
      assertNotSame(wall2, wall3);
      assertNotSame(wall3, wall0);
      assertNotSame(wall3, wall2);
      assertNotSame(wall3, wall1);
      assertEquals(3516.0F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertFalse(wall0.isTrapezoidal());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals((-1.0F), wall0.getHeight(), 0.01F);
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals(3516.0F, wall0.getXStart(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(3516.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(1758.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertFalse(wall1.isTrapezoidal());
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertEquals(3943.0F, wall1.getYEnd(), 0.01F);
      assertEquals((-1228.8142F), wall1.getHeight(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals(4043.4763F, wall1.getYStart(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals(3993.2383F, wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(100.47632F, wall1.getLength(), 0.01F);
      assertEquals(100.47632F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall1.getXStart(), 0.01F);
      assertEquals(155.2F, wall1.getThickness(), 0.01F);
      assertEquals(0.0F, wall1.getXEnd(), 0.01F);
      assertEquals(4043.4763F, wall2.getYStart(), 0.01F);
      assertEquals(155.2F, wall2.getThickness(), 0.01F);
      assertFalse(wall2.isTrapezoidal());
      assertEquals(0.0F, wall2.getXEnd(), 0.01F);
      assertEquals(0.0F, wall2.getLeftSideShininess(), 0.01F);
      assertNull(wall2.getArcExtent());
      assertNull(wall2.getRightSideColor());
      assertEquals(100.47632F, wall2.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(3993.2383F, wall2.getYArcCircleCenter(), 0.01F);
      assertEquals((-1228.8142F), wall2.getHeight(), 0.01F);
      assertEquals(100.47632F, wall2.getLength(), 0.01F);
      assertNull(wall2.getHeightAtEnd());
      assertEquals(0.0F, wall2.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall2.getXStart(), 0.01F);
      assertNull(wall2.getLeftSideColor());
      assertEquals(3943.0F, wall2.getYEnd(), 0.01F);
      assertEquals(0.0F, wall2.getRightSideShininess(), 0.01F);
      assertEquals(3993.2383F, wall3.getYArcCircleCenter(), 0.01F);
      assertEquals(100.47632F, wall3.getLength(), 0.01F);
      assertNull(wall3.getRightSideColor());
      assertEquals(0.0F, wall3.getRightSideShininess(), 0.01F);
      assertNull(wall3.getArcExtent());
      assertNull(wall3.getHeightAtEnd());
      assertEquals(0.0F, wall3.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall3.getXStart(), 0.01F);
      assertEquals(3943.0F, wall3.getYEnd(), 0.01F);
      assertNull(wall3.getLeftSideColor());
      assertEquals(4043.4763F, wall3.getYStart(), 0.01F);
      assertEquals(0.0F, wall3.getXEnd(), 0.01F);
      assertEquals(155.2F, wall3.getThickness(), 0.01F);
      assertFalse(wall3.isTrapezoidal());
      assertEquals((-1228.8142F), wall3.getHeight(), 0.01F);
      assertEquals(0.0F, wall3.getLeftSideShininess(), 0.01F);
      assertEquals(100.47632F, wall3.getStartPointToEndPointDistance(), 0.01F);
      
      float float3 = wall2.getXStart();
      assertFalse(wall1.equals((Object)wall3));
      assertFalse(wall1.equals((Object)wall0));
      assertFalse(wall1.equals((Object)wall2));
      assertFalse(wall2.equals((Object)wall0));
      assertFalse(wall2.equals((Object)wall1));
      assertFalse(wall2.equals((Object)wall3));
      assertEquals(float3, float2, 0.01F);
      assertEquals(float3, float1, 0.01F);
      assertNotSame(wall1, wall3);
      assertNotSame(wall1, wall0);
      assertNotSame(wall1, wall2);
      assertNotSame(wall2, wall0);
      assertNotSame(wall2, wall1);
      assertNotSame(wall2, wall3);
      assertEquals(0.0F, float3, 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertFalse(wall1.isTrapezoidal());
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertEquals(3943.0F, wall1.getYEnd(), 0.01F);
      assertEquals((-1228.8142F), wall1.getHeight(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals(4043.4763F, wall1.getYStart(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals(3993.2383F, wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(100.47632F, wall1.getLength(), 0.01F);
      assertEquals(100.47632F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall1.getXStart(), 0.01F);
      assertEquals(155.2F, wall1.getThickness(), 0.01F);
      assertEquals(0.0F, wall1.getXEnd(), 0.01F);
      assertEquals(4043.4763F, wall2.getYStart(), 0.01F);
      assertEquals(155.2F, wall2.getThickness(), 0.01F);
      assertFalse(wall2.isTrapezoidal());
      assertEquals(0.0F, wall2.getXEnd(), 0.01F);
      assertEquals(0.0F, wall2.getLeftSideShininess(), 0.01F);
      assertNull(wall2.getArcExtent());
      assertNull(wall2.getRightSideColor());
      assertEquals(100.47632F, wall2.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(3993.2383F, wall2.getYArcCircleCenter(), 0.01F);
      assertEquals((-1228.8142F), wall2.getHeight(), 0.01F);
      assertEquals(100.47632F, wall2.getLength(), 0.01F);
      assertNull(wall2.getHeightAtEnd());
      assertEquals(0.0F, wall2.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall2.getXStart(), 0.01F);
      assertNull(wall2.getLeftSideColor());
      assertEquals(3943.0F, wall2.getYEnd(), 0.01F);
      assertEquals(0.0F, wall2.getRightSideShininess(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test190()  throws Throwable  {
      Wall wall0 = new Wall(0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F);
      assertNotNull(wall0);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getHeight(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      
      int int0 = Float.compare(0.0F, (-64.0F));
      assertEquals(1, int0);
      
      wall0.setHeightAtEnd((Float) (-64.0F));
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertTrue(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-64.0F), wall0.getHeightAtEnd(), 0.01F);
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getHeight(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      
      wall0.setXStart(2536.7437F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertTrue(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-64.0F), wall0.getHeightAtEnd(), 0.01F);
      assertEquals(2536.7437F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(1268.3718F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getHeight(), 0.01F);
      assertEquals(2536.7437F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals(2536.7437F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      
      boolean boolean0 = wall0.containsWallStartAt(0.0F, 0.0F, 0.0F);
      assertFalse(boolean0);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertTrue(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-64.0F), wall0.getHeightAtEnd(), 0.01F);
      assertEquals(2536.7437F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(1268.3718F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getHeight(), 0.01F);
      assertEquals(2536.7437F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals(2536.7437F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      
      wall0.setWallAtStart(wall0);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertTrue(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-64.0F), wall0.getHeightAtEnd(), 0.01F);
      assertEquals(2536.7437F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(1268.3718F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getHeight(), 0.01F);
      assertEquals(2536.7437F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals(2536.7437F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      
      boolean boolean1 = wall0.containsWallStartAt(0.0F, 0.0F, 0.0F);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertTrue(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-64.0F), wall0.getHeightAtEnd(), 0.01F);
      assertEquals(2536.7437F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(1268.3718F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getHeight(), 0.01F);
      assertEquals(2536.7437F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals(2536.7437F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      
      Wall wall1 = new Wall(0.0F, 4043.4763F, 0.0F, 3943.0F, 0.0F, (-1229.7325F));
      assertFalse(wall1.equals((Object)wall0));
      assertNotNull(wall1);
      assertEquals(0.0F, wall1.getThickness(), 0.01F);
      assertEquals(100.47632F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-1229.7325F), wall1.getHeight(), 0.01F);
      assertEquals(4043.4763F, wall1.getYStart(), 0.01F);
      assertEquals(0.0F, wall1.getXStart(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertNull(wall1.getHeightAtEnd());
      assertEquals(0.0F, wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(3943.0F, wall1.getYEnd(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals(3993.2383F, wall1.getYArcCircleCenter(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals(100.47632F, wall1.getLength(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals(0.0F, wall1.getXEnd(), 0.01F);
      
      wall0.setWallAtEnd(wall1);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall1.equals((Object)wall0));
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertTrue(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-64.0F), wall0.getHeightAtEnd(), 0.01F);
      assertEquals(2536.7437F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(1268.3718F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getHeight(), 0.01F);
      assertEquals(2536.7437F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals(2536.7437F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall1.getThickness(), 0.01F);
      assertEquals(100.47632F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-1229.7325F), wall1.getHeight(), 0.01F);
      assertEquals(4043.4763F, wall1.getYStart(), 0.01F);
      assertEquals(0.0F, wall1.getXStart(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertNull(wall1.getHeightAtEnd());
      assertEquals(0.0F, wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(3943.0F, wall1.getYEnd(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals(3993.2383F, wall1.getYArcCircleCenter(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals(100.47632F, wall1.getLength(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals(0.0F, wall1.getXEnd(), 0.01F);
      
      Wall wall2 = wall0.getWallAtStart();
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall2.equals((Object)wall1));
      assertNotNull(wall2);
      assertNotSame(wall0, wall1);
      assertSame(wall0, wall2);
      assertNotSame(wall2, wall1);
      assertSame(wall2, wall0);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertTrue(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-64.0F), wall0.getHeightAtEnd(), 0.01F);
      assertEquals(2536.7437F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(1268.3718F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getHeight(), 0.01F);
      assertEquals(2536.7437F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals(2536.7437F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall2.getXEnd(), 0.01F);
      assertEquals(0.0F, wall2.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall2.getYEnd(), 0.01F);
      assertEquals(0.0F, wall2.getYStart(), 0.01F);
      assertTrue(wall2.isTrapezoidal());
      assertEquals(0.0F, wall2.getRightSideShininess(), 0.01F);
      assertEquals(1268.3718F, wall2.getXArcCircleCenter(), 0.01F);
      assertEquals((-64.0F), wall2.getHeightAtEnd(), 0.01F);
      assertEquals(2536.7437F, wall2.getLength(), 0.01F);
      assertEquals(0.0F, wall2.getHeight(), 0.01F);
      assertEquals(0.0F, wall2.getThickness(), 0.01F);
      assertEquals(0.0F, wall2.getYArcCircleCenter(), 0.01F);
      assertNull(wall2.getLeftSideColor());
      assertNull(wall2.getRightSideColor());
      assertEquals(2536.7437F, wall2.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall2.getArcExtent());
      assertEquals(2536.7437F, wall2.getXStart(), 0.01F);
      
      wall1.setWallAtStart(wall2);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall1.equals((Object)wall2));
      assertFalse(wall1.equals((Object)wall0));
      assertFalse(wall2.equals((Object)wall1));
      assertNotSame(wall0, wall1);
      assertSame(wall0, wall2);
      assertNotSame(wall1, wall2);
      assertNotSame(wall1, wall0);
      assertNotSame(wall2, wall1);
      assertSame(wall2, wall0);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertTrue(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-64.0F), wall0.getHeightAtEnd(), 0.01F);
      assertEquals(2536.7437F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(1268.3718F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getHeight(), 0.01F);
      assertEquals(2536.7437F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals(2536.7437F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall1.getThickness(), 0.01F);
      assertEquals(100.47632F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-1229.7325F), wall1.getHeight(), 0.01F);
      assertEquals(4043.4763F, wall1.getYStart(), 0.01F);
      assertEquals(0.0F, wall1.getXStart(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertNull(wall1.getHeightAtEnd());
      assertEquals(0.0F, wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(3943.0F, wall1.getYEnd(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals(3993.2383F, wall1.getYArcCircleCenter(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals(100.47632F, wall1.getLength(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals(0.0F, wall1.getXEnd(), 0.01F);
      assertEquals(0.0F, wall2.getXEnd(), 0.01F);
      assertEquals(0.0F, wall2.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall2.getYEnd(), 0.01F);
      assertEquals(0.0F, wall2.getYStart(), 0.01F);
      assertTrue(wall2.isTrapezoidal());
      assertEquals(0.0F, wall2.getRightSideShininess(), 0.01F);
      assertEquals(1268.3718F, wall2.getXArcCircleCenter(), 0.01F);
      assertEquals((-64.0F), wall2.getHeightAtEnd(), 0.01F);
      assertEquals(2536.7437F, wall2.getLength(), 0.01F);
      assertEquals(0.0F, wall2.getHeight(), 0.01F);
      assertEquals(0.0F, wall2.getThickness(), 0.01F);
      assertEquals(0.0F, wall2.getYArcCircleCenter(), 0.01F);
      assertNull(wall2.getLeftSideColor());
      assertNull(wall2.getRightSideColor());
      assertEquals(2536.7437F, wall2.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall2.getArcExtent());
      assertEquals(2536.7437F, wall2.getXStart(), 0.01F);
      
      Integer integer0 = wall1.getRightSideColor();
      assertFalse(wall1.equals((Object)wall2));
      assertFalse(wall1.equals((Object)wall0));
      assertNull(integer0);
      assertNotSame(wall1, wall2);
      assertNotSame(wall1, wall0);
      assertEquals(0.0F, wall1.getThickness(), 0.01F);
      assertEquals(100.47632F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-1229.7325F), wall1.getHeight(), 0.01F);
      assertEquals(4043.4763F, wall1.getYStart(), 0.01F);
      assertEquals(0.0F, wall1.getXStart(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertNull(wall1.getHeightAtEnd());
      assertEquals(0.0F, wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(3943.0F, wall1.getYEnd(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals(3993.2383F, wall1.getYArcCircleCenter(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals(100.47632F, wall1.getLength(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals(0.0F, wall1.getXEnd(), 0.01F);
      
      float[][] floatArray0 = wall0.getPoints();
      assertFalse(wall0.equals((Object)wall1));
      assertNotNull(floatArray0);
      assertEquals(4, floatArray0.length);
      assertNotSame(wall0, wall1);
      assertSame(wall0, wall2);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertTrue(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-64.0F), wall0.getHeightAtEnd(), 0.01F);
      assertEquals(2536.7437F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(1268.3718F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getHeight(), 0.01F);
      assertEquals(2536.7437F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals(2536.7437F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      
      float[][] floatArray1 = wall1.getPoints();
      assertFalse(wall1.equals((Object)wall2));
      assertFalse(wall1.equals((Object)wall0));
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertNotNull(floatArray1);
      assertEquals(4, floatArray1.length);
      assertNotSame(wall1, wall2);
      assertNotSame(wall1, wall0);
      assertNotSame(floatArray1, floatArray0);
      assertEquals(0.0F, wall1.getThickness(), 0.01F);
      assertEquals(100.47632F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-1229.7325F), wall1.getHeight(), 0.01F);
      assertEquals(4043.4763F, wall1.getYStart(), 0.01F);
      assertEquals(0.0F, wall1.getXStart(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertNull(wall1.getHeightAtEnd());
      assertEquals(0.0F, wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(3943.0F, wall1.getYEnd(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals(3993.2383F, wall1.getYArcCircleCenter(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals(100.47632F, wall1.getLength(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals(0.0F, wall1.getXEnd(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test191()  throws Throwable  {
      Wall wall0 = new Wall(1.8137146F, 1.8137146F, 1.8137146F, 1.8137146F, 1.8137146F, 1.8137146F);
      assertNotNull(wall0);
      assertEquals(1.8137146F, wall0.getXEnd(), 0.01F);
      assertEquals(1.8137146F, wall0.getYEnd(), 0.01F);
      assertEquals(1.8137146F, wall0.getThickness(), 0.01F);
      assertEquals(1.8137146F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(1.8137146F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertNull(wall0.getHeightAtEnd());
      assertEquals(1.8137146F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(1.8137146F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(1.8137146F, wall0.getHeight(), 0.01F);
      
      Float float0 = wall0.getHeightAtEnd();
      assertNull(float0);
      assertEquals(1.8137146F, wall0.getXEnd(), 0.01F);
      assertEquals(1.8137146F, wall0.getYEnd(), 0.01F);
      assertEquals(1.8137146F, wall0.getThickness(), 0.01F);
      assertEquals(1.8137146F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(1.8137146F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertNull(wall0.getHeightAtEnd());
      assertEquals(1.8137146F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(1.8137146F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(1.8137146F, wall0.getHeight(), 0.01F);
      
      Float float1 = new Float(1.8137146F);
      assertNotNull(float1);
      assertEquals(1.8137146F, (float)float1, 0.01F);
      
      Integer integer0 = wall0.getRightSideColor();
      assertNull(integer0);
      assertEquals(1.8137146F, wall0.getXEnd(), 0.01F);
      assertEquals(1.8137146F, wall0.getYEnd(), 0.01F);
      assertEquals(1.8137146F, wall0.getThickness(), 0.01F);
      assertEquals(1.8137146F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(1.8137146F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertNull(wall0.getHeightAtEnd());
      assertEquals(1.8137146F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(1.8137146F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(1.8137146F, wall0.getHeight(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test192()  throws Throwable  {
      Wall wall0 = new Wall(0.1F, 0.1F, 0.1F, 0.1F, 0.1F);
      assertNotNull(wall0);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.1F, wall0.getThickness(), 0.01F);
      assertEquals(0.1F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.1F, wall0.getYStart(), 0.01F);
      assertEquals(0.1F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getHeight());
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(0.1F, wall0.getYEnd(), 0.01F);
      assertEquals(0.1F, wall0.getXEnd(), 0.01F);
      assertEquals(0.1F, wall0.getYArcCircleCenter(), 0.01F);
      
      Float float0 = new Float((double) 0.1F);
      assertNotNull(float0);
      assertEquals(0.1F, (float)float0, 0.01F);
      
      wall0.setArcExtent(float0);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.1F, wall0.getThickness(), 0.01F);
      assertEquals(0.1F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.1F, wall0.getYStart(), 0.01F);
      assertEquals(0.1F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.1F, wall0.getArcExtent(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getHeight());
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(0.1F, wall0.getYEnd(), 0.01F);
      assertEquals(0.1F, wall0.getXEnd(), 0.01F);
      assertEquals(0.1F, wall0.getYArcCircleCenter(), 0.01F);
      
      float[][] floatArray0 = wall0.getPoints();
      assertNotNull(floatArray0);
      assertEquals(4, floatArray0.length);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.1F, wall0.getThickness(), 0.01F);
      assertEquals(0.1F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.1F, wall0.getYStart(), 0.01F);
      assertEquals(0.1F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.1F, wall0.getArcExtent(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getHeight());
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(0.1F, wall0.getYEnd(), 0.01F);
      assertEquals(0.1F, wall0.getXEnd(), 0.01F);
      assertEquals(0.1F, wall0.getYArcCircleCenter(), 0.01F);
      
      wall0.setHeight(float0);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.1F, wall0.getThickness(), 0.01F);
      assertEquals(0.1F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.1F, wall0.getYStart(), 0.01F);
      assertEquals(0.1F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.1F, wall0.getArcExtent(), 0.01F);
      assertEquals(0.1F, wall0.getHeight(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(0.1F, wall0.getYEnd(), 0.01F);
      assertEquals(0.1F, wall0.getXEnd(), 0.01F);
      assertEquals(0.1F, wall0.getYArcCircleCenter(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test193()  throws Throwable  {
      Wall wall0 = new Wall(13.809F, 13.809F, 13.809F, 13.809F, 13.809F, 13.809F);
      assertNotNull(wall0);
      assertEquals(13.809F, wall0.getHeight(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(13.809F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertNull(wall0.getHeightAtEnd());
      assertEquals(13.809F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(13.809F, wall0.getThickness(), 0.01F);
      assertEquals(13.809F, wall0.getXEnd(), 0.01F);
      assertEquals(13.809F, wall0.getYStart(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(13.809F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(13.809F, wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      
      wall0.setWallAtStart(wall0);
      assertEquals(13.809F, wall0.getHeight(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(13.809F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertNull(wall0.getHeightAtEnd());
      assertEquals(13.809F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(13.809F, wall0.getThickness(), 0.01F);
      assertEquals(13.809F, wall0.getXEnd(), 0.01F);
      assertEquals(13.809F, wall0.getYStart(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(13.809F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(13.809F, wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      
      Wall wall1 = new Wall(13.809F, 13.809F, 13.809F, 13.809F, 13.809F);
      assertFalse(wall1.equals((Object)wall0));
      assertNotNull(wall1);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals(0.0F, wall1.getLength(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals(13.809F, wall1.getYArcCircleCenter(), 0.01F);
      assertNull(wall1.getHeight());
      assertEquals(13.809F, wall1.getThickness(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals(13.809F, wall1.getYEnd(), 0.01F);
      assertEquals(13.809F, wall1.getXEnd(), 0.01F);
      assertEquals(0.0F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(13.809F, wall1.getYStart(), 0.01F);
      assertNull(wall1.getRightSideColor());
      assertNull(wall1.getArcExtent());
      assertEquals(13.809F, wall1.getXStart(), 0.01F);
      assertEquals(13.809F, wall1.getXArcCircleCenter(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      
      wall0.setWallAtStart(wall1);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall1.equals((Object)wall0));
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      assertEquals(13.809F, wall0.getHeight(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(13.809F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertNull(wall0.getHeightAtEnd());
      assertEquals(13.809F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(13.809F, wall0.getThickness(), 0.01F);
      assertEquals(13.809F, wall0.getXEnd(), 0.01F);
      assertEquals(13.809F, wall0.getYStart(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(13.809F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(13.809F, wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals(0.0F, wall1.getLength(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals(13.809F, wall1.getYArcCircleCenter(), 0.01F);
      assertNull(wall1.getHeight());
      assertEquals(13.809F, wall1.getThickness(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals(13.809F, wall1.getYEnd(), 0.01F);
      assertEquals(13.809F, wall1.getXEnd(), 0.01F);
      assertEquals(0.0F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(13.809F, wall1.getYStart(), 0.01F);
      assertNull(wall1.getRightSideColor());
      assertNull(wall1.getArcExtent());
      assertEquals(13.809F, wall1.getXStart(), 0.01F);
      assertEquals(13.809F, wall1.getXArcCircleCenter(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      
      wall1.setWallAtEnd(wall0);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall1.equals((Object)wall0));
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      assertEquals(13.809F, wall0.getHeight(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(13.809F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertNull(wall0.getHeightAtEnd());
      assertEquals(13.809F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(13.809F, wall0.getThickness(), 0.01F);
      assertEquals(13.809F, wall0.getXEnd(), 0.01F);
      assertEquals(13.809F, wall0.getYStart(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(13.809F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(13.809F, wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals(0.0F, wall1.getLength(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals(13.809F, wall1.getYArcCircleCenter(), 0.01F);
      assertNull(wall1.getHeight());
      assertEquals(13.809F, wall1.getThickness(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals(13.809F, wall1.getYEnd(), 0.01F);
      assertEquals(13.809F, wall1.getXEnd(), 0.01F);
      assertEquals(0.0F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(13.809F, wall1.getYStart(), 0.01F);
      assertNull(wall1.getRightSideColor());
      assertNull(wall1.getArcExtent());
      assertEquals(13.809F, wall1.getXStart(), 0.01F);
      assertEquals(13.809F, wall1.getXArcCircleCenter(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      
      boolean boolean0 = wall1.containsPoint(13.809F, 13.809F, 13.809F);
      assertFalse(wall1.equals((Object)wall0));
      assertNotSame(wall1, wall0);
      assertTrue(boolean0);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals(0.0F, wall1.getLength(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals(13.809F, wall1.getYArcCircleCenter(), 0.01F);
      assertNull(wall1.getHeight());
      assertEquals(13.809F, wall1.getThickness(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals(13.809F, wall1.getYEnd(), 0.01F);
      assertEquals(13.809F, wall1.getXEnd(), 0.01F);
      assertEquals(0.0F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(13.809F, wall1.getYStart(), 0.01F);
      assertNull(wall1.getRightSideColor());
      assertNull(wall1.getArcExtent());
      assertEquals(13.809F, wall1.getXStart(), 0.01F);
      assertEquals(13.809F, wall1.getXArcCircleCenter(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      
      float[][] floatArray0 = wall0.getPoints();
      assertFalse(wall0.equals((Object)wall1));
      assertNotNull(floatArray0);
      assertEquals(4, floatArray0.length);
      assertNotSame(wall0, wall1);
      assertEquals(13.809F, wall0.getHeight(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(13.809F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertNull(wall0.getHeightAtEnd());
      assertEquals(13.809F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(13.809F, wall0.getThickness(), 0.01F);
      assertEquals(13.809F, wall0.getXEnd(), 0.01F);
      assertEquals(13.809F, wall0.getYStart(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(13.809F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(13.809F, wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      
      Wall wall2 = wall0.clone();
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall2.equals((Object)wall0));
      assertFalse(wall2.equals((Object)wall1));
      assertNotNull(wall2);
      assertNotSame(wall0, wall1);
      assertNotSame(wall0, wall2);
      assertNotSame(wall2, wall0);
      assertNotSame(wall2, wall1);
      assertEquals(13.809F, wall0.getHeight(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(13.809F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertNull(wall0.getHeightAtEnd());
      assertEquals(13.809F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(13.809F, wall0.getThickness(), 0.01F);
      assertEquals(13.809F, wall0.getXEnd(), 0.01F);
      assertEquals(13.809F, wall0.getYStart(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(13.809F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(13.809F, wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(13.809F, wall2.getHeight(), 0.01F);
      assertNull(wall2.getLeftSideColor());
      assertFalse(wall2.isTrapezoidal());
      assertEquals(0.0F, wall2.getRightSideShininess(), 0.01F);
      assertEquals(13.809F, wall2.getYArcCircleCenter(), 0.01F);
      assertEquals(13.809F, wall2.getXEnd(), 0.01F);
      assertEquals(13.809F, wall2.getYEnd(), 0.01F);
      assertEquals(13.809F, wall2.getThickness(), 0.01F);
      assertEquals(13.809F, wall2.getYStart(), 0.01F);
      assertEquals(0.0F, wall2.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall2.getHeightAtEnd());
      assertEquals(13.809F, wall2.getXStart(), 0.01F);
      assertEquals(0.0F, wall2.getLength(), 0.01F);
      assertEquals(0.0F, wall2.getLeftSideShininess(), 0.01F);
      assertEquals(13.809F, wall2.getXArcCircleCenter(), 0.01F);
      assertNull(wall2.getArcExtent());
      assertNull(wall2.getRightSideColor());
  }

  @Test(timeout = 4000)
  public void test194()  throws Throwable  {
      Wall wall0 = new Wall(9.298907F, (-1.0F), 613.716F, 1.0F, (-4680.088F), 3494.5828F);
      assertNotNull(wall0);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(9.298907F, wall0.getXStart(), 0.01F);
      assertEquals(1.0F, wall0.getYEnd(), 0.01F);
      assertEquals(3494.5828F, wall0.getHeight(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(613.716F, wall0.getXEnd(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(604.4204F, wall0.getLength(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-4680.088F), wall0.getThickness(), 0.01F);
      assertEquals((-1.0F), wall0.getYStart(), 0.01F);
      assertEquals(604.4204F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(311.50745F, wall0.getXArcCircleCenter(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      
      wall0.move(1.0F, 9.298907F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(3494.5828F, wall0.getHeight(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(10.298907F, wall0.getYEnd(), 0.01F);
      assertEquals(312.50745F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(614.716F, wall0.getXEnd(), 0.01F);
      assertEquals(604.4204F, wall0.getLength(), 0.01F);
      assertEquals(8.298907F, wall0.getYStart(), 0.01F);
      assertEquals(10.298907F, wall0.getXStart(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-4680.088F), wall0.getThickness(), 0.01F);
      assertEquals(604.4204F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(9.298907F, wall0.getYArcCircleCenter(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      
      boolean boolean0 = wall0.containsPoint((-1.0F), (-1.0F), 445.4F);
      assertTrue(boolean0);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(3494.5828F, wall0.getHeight(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(10.298907F, wall0.getYEnd(), 0.01F);
      assertEquals(312.50745F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(614.716F, wall0.getXEnd(), 0.01F);
      assertEquals(604.4204F, wall0.getLength(), 0.01F);
      assertEquals(8.298907F, wall0.getYStart(), 0.01F);
      assertEquals(10.298907F, wall0.getXStart(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-4680.088F), wall0.getThickness(), 0.01F);
      assertEquals(604.4204F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(9.298907F, wall0.getYArcCircleCenter(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      
      HomeTexture homeTexture0 = wall0.getLeftSideTexture();
      assertNull(homeTexture0);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(3494.5828F, wall0.getHeight(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(10.298907F, wall0.getYEnd(), 0.01F);
      assertEquals(312.50745F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(614.716F, wall0.getXEnd(), 0.01F);
      assertEquals(604.4204F, wall0.getLength(), 0.01F);
      assertEquals(8.298907F, wall0.getYStart(), 0.01F);
      assertEquals(10.298907F, wall0.getXStart(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-4680.088F), wall0.getThickness(), 0.01F);
      assertEquals(604.4204F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(9.298907F, wall0.getYArcCircleCenter(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      
      wall0.setRightSideTexture((HomeTexture) null);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(3494.5828F, wall0.getHeight(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(10.298907F, wall0.getYEnd(), 0.01F);
      assertEquals(312.50745F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(614.716F, wall0.getXEnd(), 0.01F);
      assertEquals(604.4204F, wall0.getLength(), 0.01F);
      assertEquals(8.298907F, wall0.getYStart(), 0.01F);
      assertEquals(10.298907F, wall0.getXStart(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-4680.088F), wall0.getThickness(), 0.01F);
      assertEquals(604.4204F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(9.298907F, wall0.getYArcCircleCenter(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      
      Wall.Property[] wall_PropertyArray0 = Wall.Property.values();
      assertNotNull(wall_PropertyArray0);
      assertEquals(18, wall_PropertyArray0.length);
      
      Float float0 = new Float((double) 3494.5828F);
      assertNotNull(float0);
      assertEquals(3494.5828F, (float)float0, 0.01F);
      
      float float1 = wall0.getYStart();
      assertEquals(8.298907F, float1, 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(3494.5828F, wall0.getHeight(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(10.298907F, wall0.getYEnd(), 0.01F);
      assertEquals(312.50745F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(614.716F, wall0.getXEnd(), 0.01F);
      assertEquals(604.4204F, wall0.getLength(), 0.01F);
      assertEquals(8.298907F, wall0.getYStart(), 0.01F);
      assertEquals(10.298907F, wall0.getXStart(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-4680.088F), wall0.getThickness(), 0.01F);
      assertEquals(604.4204F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(9.298907F, wall0.getYArcCircleCenter(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      
      Wall wall1 = wall0.clone();
      assertFalse(wall1.equals((Object)wall0));
      assertNotNull(wall1);
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(3494.5828F, wall0.getHeight(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(10.298907F, wall0.getYEnd(), 0.01F);
      assertEquals(312.50745F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(614.716F, wall0.getXEnd(), 0.01F);
      assertEquals(604.4204F, wall0.getLength(), 0.01F);
      assertEquals(8.298907F, wall0.getYStart(), 0.01F);
      assertEquals(10.298907F, wall0.getXStart(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-4680.088F), wall0.getThickness(), 0.01F);
      assertEquals(604.4204F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(9.298907F, wall0.getYArcCircleCenter(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertEquals(10.298907F, wall1.getXStart(), 0.01F);
      assertEquals(312.50745F, wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(604.4204F, wall1.getLength(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals(614.716F, wall1.getXEnd(), 0.01F);
      assertEquals((-4680.088F), wall1.getThickness(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals(8.298907F, wall1.getYStart(), 0.01F);
      assertEquals(9.298907F, wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(604.4204F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(10.298907F, wall1.getYEnd(), 0.01F);
      assertEquals(3494.5828F, wall1.getHeight(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      
      Float float2 = new Float(3494.5828F);
      assertEquals((float)float2, (float)float0, 0.01F);
      assertNotEquals((float)float2, (float)float1, 0.01F);
      assertNotNull(float2);
      assertEquals(3494.5828F, (float)float2, 0.01F);
      
      float float3 = wall0.getXEnd();
      assertFalse(wall0.equals((Object)wall1));
      assertNotEquals(float3, float1, 0.01F);
      assertNotSame(wall0, wall1);
      assertEquals(614.716F, float3, 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(3494.5828F, wall0.getHeight(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(10.298907F, wall0.getYEnd(), 0.01F);
      assertEquals(312.50745F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(614.716F, wall0.getXEnd(), 0.01F);
      assertEquals(604.4204F, wall0.getLength(), 0.01F);
      assertEquals(8.298907F, wall0.getYStart(), 0.01F);
      assertEquals(10.298907F, wall0.getXStart(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-4680.088F), wall0.getThickness(), 0.01F);
      assertEquals(604.4204F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(9.298907F, wall0.getYArcCircleCenter(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      
      Float float4 = wall1.getHeight();
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall1.equals((Object)wall0));
      assertNotEquals((float)float4, (float)float3, 0.01F);
      assertNotEquals((float)float4, (float)float1, 0.01F);
      assertEquals((float)float4, (float)float0, 0.01F);
      assertEquals((float)float4, (float)float2, 0.01F);
      assertNotNull(float4);
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      assertEquals(3494.5828F, (float)float4, 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(3494.5828F, wall0.getHeight(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(10.298907F, wall0.getYEnd(), 0.01F);
      assertEquals(312.50745F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(614.716F, wall0.getXEnd(), 0.01F);
      assertEquals(604.4204F, wall0.getLength(), 0.01F);
      assertEquals(8.298907F, wall0.getYStart(), 0.01F);
      assertEquals(10.298907F, wall0.getXStart(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-4680.088F), wall0.getThickness(), 0.01F);
      assertEquals(604.4204F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(9.298907F, wall0.getYArcCircleCenter(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertEquals(10.298907F, wall1.getXStart(), 0.01F);
      assertEquals(312.50745F, wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(604.4204F, wall1.getLength(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals(614.716F, wall1.getXEnd(), 0.01F);
      assertEquals((-4680.088F), wall1.getThickness(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals(8.298907F, wall1.getYStart(), 0.01F);
      assertEquals(9.298907F, wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(604.4204F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(10.298907F, wall1.getYEnd(), 0.01F);
      assertEquals(3494.5828F, wall1.getHeight(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      
      wall1.setHeight(float4);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall1.equals((Object)wall0));
      assertNotEquals((float)float4, (float)float3, 0.01F);
      assertNotEquals((float)float4, (float)float1, 0.01F);
      assertEquals((float)float4, (float)float0, 0.01F);
      assertEquals((float)float4, (float)float2, 0.01F);
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(3494.5828F, wall0.getHeight(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(10.298907F, wall0.getYEnd(), 0.01F);
      assertEquals(312.50745F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(614.716F, wall0.getXEnd(), 0.01F);
      assertEquals(604.4204F, wall0.getLength(), 0.01F);
      assertEquals(8.298907F, wall0.getYStart(), 0.01F);
      assertEquals(10.298907F, wall0.getXStart(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-4680.088F), wall0.getThickness(), 0.01F);
      assertEquals(604.4204F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(9.298907F, wall0.getYArcCircleCenter(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertEquals(10.298907F, wall1.getXStart(), 0.01F);
      assertEquals(312.50745F, wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(604.4204F, wall1.getLength(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals(614.716F, wall1.getXEnd(), 0.01F);
      assertEquals((-4680.088F), wall1.getThickness(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals(8.298907F, wall1.getYStart(), 0.01F);
      assertEquals(9.298907F, wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(604.4204F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(10.298907F, wall1.getYEnd(), 0.01F);
      assertEquals(3494.5828F, wall1.getHeight(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      
      float[][] floatArray0 = wall0.getPoints();
      assertFalse(wall0.equals((Object)wall1));
      assertNotNull(floatArray0);
      assertEquals(4, floatArray0.length);
      assertNotSame(wall0, wall1);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(3494.5828F, wall0.getHeight(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(10.298907F, wall0.getYEnd(), 0.01F);
      assertEquals(312.50745F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(614.716F, wall0.getXEnd(), 0.01F);
      assertEquals(604.4204F, wall0.getLength(), 0.01F);
      assertEquals(8.298907F, wall0.getYStart(), 0.01F);
      assertEquals(10.298907F, wall0.getXStart(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-4680.088F), wall0.getThickness(), 0.01F);
      assertEquals(604.4204F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(9.298907F, wall0.getYArcCircleCenter(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
  }

  @Test(timeout = 4000)
  public void test195()  throws Throwable  {
      Wall wall0 = new Wall((-132.83813F), 0.0F, (-1392.843F), (-1392.843F), (-75.3497F), (-132.83813F));
      assertNotNull(wall0);
      assertEquals((-1392.843F), wall0.getXEnd(), 0.01F);
      assertEquals((-75.3497F), wall0.getThickness(), 0.01F);
      assertEquals((-132.83813F), wall0.getXStart(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getRightSideColor());
      assertEquals((-1392.843F), wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(1878.197F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-762.8406F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals((-696.4215F), wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(1878.197F, wall0.getLength(), 0.01F);
      assertEquals((-132.83813F), wall0.getHeight(), 0.01F);
      
      boolean boolean0 = wall0.containsWallEndAt((-953.78F), (-953.78F), (-75.3497F));
      assertFalse(boolean0);
      assertEquals((-1392.843F), wall0.getXEnd(), 0.01F);
      assertEquals((-75.3497F), wall0.getThickness(), 0.01F);
      assertEquals((-132.83813F), wall0.getXStart(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getRightSideColor());
      assertEquals((-1392.843F), wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(1878.197F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-762.8406F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals((-696.4215F), wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(1878.197F, wall0.getLength(), 0.01F);
      assertEquals((-132.83813F), wall0.getHeight(), 0.01F);
      
      wall0.setYEnd(0.0F);
      assertEquals((-1392.843F), wall0.getXEnd(), 0.01F);
      assertEquals((-75.3497F), wall0.getThickness(), 0.01F);
      assertEquals((-132.83813F), wall0.getXStart(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getRightSideColor());
      assertEquals(1260.0049F, wall0.getLength(), 0.01F);
      assertEquals(1260.0049F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-762.8406F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals((-132.83813F), wall0.getHeight(), 0.01F);
      
      PropertyChangeListener propertyChangeListener0 = mock(PropertyChangeListener.class, new ViolatedAssumptionAnswer());
      Wall wall1 = wall0.getWallAtStart();
      assertNull(wall1);
      assertEquals((-1392.843F), wall0.getXEnd(), 0.01F);
      assertEquals((-75.3497F), wall0.getThickness(), 0.01F);
      assertEquals((-132.83813F), wall0.getXStart(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getRightSideColor());
      assertEquals(1260.0049F, wall0.getLength(), 0.01F);
      assertEquals(1260.0049F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-762.8406F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals((-132.83813F), wall0.getHeight(), 0.01F);
      
      wall0.setWallAtStart((Wall) null);
      assertEquals((-1392.843F), wall0.getXEnd(), 0.01F);
      assertEquals((-75.3497F), wall0.getThickness(), 0.01F);
      assertEquals((-132.83813F), wall0.getXStart(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getRightSideColor());
      assertEquals(1260.0049F, wall0.getLength(), 0.01F);
      assertEquals(1260.0049F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-762.8406F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals((-132.83813F), wall0.getHeight(), 0.01F);
      
      PropertyChangeListenerProxy propertyChangeListenerProxy0 = new PropertyChangeListenerProxy("", propertyChangeListener0);
      assertNotNull(propertyChangeListenerProxy0);
      assertEquals("", propertyChangeListenerProxy0.getPropertyName());
      
      PropertyChangeEvent propertyChangeEvent0 = new PropertyChangeEvent("xJA;{JWlR", "NY!U1(f", "NY!U1(f", "xJA;{JWlR");
      assertNotNull(propertyChangeEvent0);
      assertEquals("NY!U1(f", propertyChangeEvent0.getPropertyName());
      
      String string0 = propertyChangeEvent0.getPropertyName();
      assertNotNull(string0);
      assertEquals("NY!U1(f", string0);
      assertEquals("NY!U1(f", propertyChangeEvent0.getPropertyName());
      
      String string1 = propertyChangeEvent0.getPropertyName();
      assertNotNull(string1);
      assertEquals("NY!U1(f", string1);
      assertEquals("NY!U1(f", propertyChangeEvent0.getPropertyName());
      
      String string2 = propertyChangeEvent0.getPropertyName();
      assertNotNull(string2);
      assertEquals("NY!U1(f", string2);
      assertEquals("NY!U1(f", propertyChangeEvent0.getPropertyName());
      
      String string3 = propertyChangeEvent0.getPropertyName();
      assertNotNull(string3);
      assertEquals("NY!U1(f", string3);
      assertEquals("NY!U1(f", propertyChangeEvent0.getPropertyName());
      
      propertyChangeListenerProxy0.propertyChange(propertyChangeEvent0);
      assertEquals("", propertyChangeListenerProxy0.getPropertyName());
      assertEquals("NY!U1(f", propertyChangeEvent0.getPropertyName());
      
      wall0.addPropertyChangeListener(propertyChangeListenerProxy0);
      assertEquals((-1392.843F), wall0.getXEnd(), 0.01F);
      assertEquals((-75.3497F), wall0.getThickness(), 0.01F);
      assertEquals((-132.83813F), wall0.getXStart(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getRightSideColor());
      assertEquals(1260.0049F, wall0.getLength(), 0.01F);
      assertEquals(1260.0049F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-762.8406F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals((-132.83813F), wall0.getHeight(), 0.01F);
      assertEquals("", propertyChangeListenerProxy0.getPropertyName());
      
      HomeTexture homeTexture0 = wall0.getLeftSideTexture();
      assertNull(homeTexture0);
      assertEquals((-1392.843F), wall0.getXEnd(), 0.01F);
      assertEquals((-75.3497F), wall0.getThickness(), 0.01F);
      assertEquals((-132.83813F), wall0.getXStart(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getRightSideColor());
      assertEquals(1260.0049F, wall0.getLength(), 0.01F);
      assertEquals(1260.0049F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-762.8406F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals((-132.83813F), wall0.getHeight(), 0.01F);
      
      wall0.setYStart(789.0F);
      assertEquals((-1392.843F), wall0.getXEnd(), 0.01F);
      assertEquals((-75.3497F), wall0.getThickness(), 0.01F);
      assertEquals((-132.83813F), wall0.getXStart(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getRightSideColor());
      assertEquals(1486.6517F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(789.0F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-762.8406F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(1486.6517F, wall0.getLength(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(394.5F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-132.83813F), wall0.getHeight(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test196()  throws Throwable  {
      Wall wall0 = new Wall(0.0F, 0.0F, 0.0F, 0.1F, 0.0F);
      assertNotNull(wall0);
      assertEquals(0.05F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.1F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getHeight());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.1F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(0.1F, wall0.getLength(), 0.01F);
      
      boolean boolean0 = wall0.containsWallStartAt(0.1F, 0.0F, 0.1F);
      assertTrue(boolean0);
      assertEquals(0.05F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.1F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getHeight());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.1F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(0.1F, wall0.getLength(), 0.01F);
      
      wall0.setWallAtStart(wall0);
      assertEquals(0.05F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.1F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getHeight());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.1F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(0.1F, wall0.getLength(), 0.01F);
      
      boolean boolean1 = wall0.containsPoint(0.0F, 0.0F, 0.0F);
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      assertEquals(0.05F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.1F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getHeight());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.1F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(0.1F, wall0.getLength(), 0.01F);
      
      boolean boolean2 = wall0.containsWallEndAt(0.0F, 0.1F, 1.0F);
      assertFalse(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2);
      assertEquals(0.05F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.1F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getHeight());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.1F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(0.1F, wall0.getLength(), 0.01F);
      
      float[][] floatArray0 = wall0.getPoints();
      assertNotNull(floatArray0);
      assertEquals(4, floatArray0.length);
      assertEquals(0.05F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.1F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getHeight());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.1F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(0.1F, wall0.getLength(), 0.01F);
      
      HomeTexture homeTexture0 = wall0.getRightSideTexture();
      assertNull(homeTexture0);
      assertEquals(0.05F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.1F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getHeight());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.1F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(0.1F, wall0.getLength(), 0.01F);
      
      wall0.removePropertyChangeListener((PropertyChangeListener) null);
      assertEquals(0.05F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.1F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getHeight());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.1F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(0.1F, wall0.getLength(), 0.01F);
      
      wall0.setYStart(0.0F);
      assertEquals(0.05F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.1F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getHeight());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.1F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(0.1F, wall0.getLength(), 0.01F);
      
      wall0.setRightSideShininess(0.0F);
      assertEquals(0.05F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.1F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getHeight());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.1F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(0.1F, wall0.getLength(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test197()  throws Throwable  {
      Wall wall0 = new Wall(0.01F, 0.01F, 0.01F, 1.0F, 0.01F, 0.01F);
      assertNotNull(wall0);
      assertEquals(0.01F, wall0.getXEnd(), 0.01F);
      assertEquals(0.99F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(1.0F, wall0.getYEnd(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.01F, wall0.getThickness(), 0.01F);
      assertEquals(0.505F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.01F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.01F, wall0.getHeight(), 0.01F);
      assertEquals(0.99F, wall0.getLength(), 0.01F);
      assertEquals(0.01F, wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.01F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      
      Wall wall1 = new Wall(0.01F, 1.0F, 0.01F, 0.01F, 0.01F, 0.01F);
      assertFalse(wall1.equals((Object)wall0));
      assertNotNull(wall1);
      assertEquals(0.99F, wall1.getLength(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals(0.01F, wall1.getHeight(), 0.01F);
      assertEquals(0.01F, wall1.getThickness(), 0.01F);
      assertEquals(1.0F, wall1.getYStart(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertNull(wall1.getHeightAtEnd());
      assertEquals(0.01F, wall1.getXEnd(), 0.01F);
      assertEquals(0.505F, wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(0.01F, wall1.getYEnd(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals(0.01F, wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(0.01F, wall1.getXStart(), 0.01F);
      assertEquals(0.99F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      
      wall1.setWallAtEnd(wall0);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall1.equals((Object)wall0));
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      assertEquals(0.01F, wall0.getXEnd(), 0.01F);
      assertEquals(0.99F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(1.0F, wall0.getYEnd(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.01F, wall0.getThickness(), 0.01F);
      assertEquals(0.505F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.01F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.01F, wall0.getHeight(), 0.01F);
      assertEquals(0.99F, wall0.getLength(), 0.01F);
      assertEquals(0.01F, wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.01F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.99F, wall1.getLength(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals(0.01F, wall1.getHeight(), 0.01F);
      assertEquals(0.01F, wall1.getThickness(), 0.01F);
      assertEquals(1.0F, wall1.getYStart(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertNull(wall1.getHeightAtEnd());
      assertEquals(0.01F, wall1.getXEnd(), 0.01F);
      assertEquals(0.505F, wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(0.01F, wall1.getYEnd(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals(0.01F, wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(0.01F, wall1.getXStart(), 0.01F);
      assertEquals(0.99F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      
      wall0.setWallAtEnd(wall1);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall1.equals((Object)wall0));
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      assertEquals(0.01F, wall0.getXEnd(), 0.01F);
      assertEquals(0.99F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(1.0F, wall0.getYEnd(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.01F, wall0.getThickness(), 0.01F);
      assertEquals(0.505F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.01F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.01F, wall0.getHeight(), 0.01F);
      assertEquals(0.99F, wall0.getLength(), 0.01F);
      assertEquals(0.01F, wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.01F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.99F, wall1.getLength(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals(0.01F, wall1.getHeight(), 0.01F);
      assertEquals(0.01F, wall1.getThickness(), 0.01F);
      assertEquals(1.0F, wall1.getYStart(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertNull(wall1.getHeightAtEnd());
      assertEquals(0.01F, wall1.getXEnd(), 0.01F);
      assertEquals(0.505F, wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(0.01F, wall1.getYEnd(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals(0.01F, wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(0.01F, wall1.getXStart(), 0.01F);
      assertEquals(0.99F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      
      Float float0 = new Float((double) 1.0F);
      assertNotNull(float0);
      assertEquals(1.0F, (float)float0, 0.01F);
      
      wall0.setArcExtent(float0);
      assertFalse(wall0.equals((Object)wall1));
      assertNotSame(wall0, wall1);
      assertEquals(0.01F, wall0.getXEnd(), 0.01F);
      assertEquals(0.99F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(1.0F, wall0.getYEnd(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals((-0.89609146F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.01F, wall0.getThickness(), 0.01F);
      assertEquals(0.505F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.01F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.01F, wall0.getHeight(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertNull(wall0.getHeightAtEnd());
      assertEquals(1.0324857F, wall0.getLength(), 0.01F);
      assertEquals(0.01F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(1.0F, wall0.getArcExtent(), 0.01F);
      assertNull(wall0.getRightSideColor());
      
      float[][] floatArray0 = wall0.getPoints();
      assertFalse(wall0.equals((Object)wall1));
      assertNotNull(floatArray0);
      assertEquals(6, floatArray0.length);
      assertNotSame(wall0, wall1);
      assertEquals(0.01F, wall0.getXEnd(), 0.01F);
      assertEquals(0.99F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(1.0F, wall0.getYEnd(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals((-0.89609146F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.01F, wall0.getThickness(), 0.01F);
      assertEquals(0.505F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.01F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.01F, wall0.getHeight(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertNull(wall0.getHeightAtEnd());
      assertEquals(1.0324857F, wall0.getLength(), 0.01F);
      assertEquals(0.01F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(1.0F, wall0.getArcExtent(), 0.01F);
      assertNull(wall0.getRightSideColor());
  }

  @Test(timeout = 4000)
  public void test198()  throws Throwable  {
      Wall wall0 = new Wall(0.0F, 0.0F, 0.0F, 0.0F, 0.0F);
      assertNotNull(wall0);
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertNull(wall0.getHeight());
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      
      boolean boolean0 = wall0.containsWallStartAt(0.0F, 0.0F, 0.0F);
      assertFalse(boolean0);
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertNull(wall0.getHeight());
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      
      wall0.setWallAtStart(wall0);
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertNull(wall0.getHeight());
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      
      Wall wall1 = new Wall(1956.35F, 1956.35F, 0.0F, 2010.127F, (-2867.864F), 874.08F);
      assertFalse(wall1.equals((Object)wall0));
      assertNotNull(wall1);
      assertEquals(1983.2385F, wall1.getYArcCircleCenter(), 0.01F);
      assertEquals((-2867.864F), wall1.getThickness(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals(1956.35F, wall1.getYStart(), 0.01F);
      assertEquals(1957.089F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(978.175F, wall1.getXArcCircleCenter(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals(874.08F, wall1.getHeight(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall1.getXEnd(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals(2010.127F, wall1.getYEnd(), 0.01F);
      assertEquals(1956.35F, wall1.getXStart(), 0.01F);
      assertEquals(1957.089F, wall1.getLength(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      
      LinkedList<Wall> linkedList0 = new LinkedList<Wall>();
      assertFalse(linkedList0.contains(wall1));
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      List<Wall> list0 = Wall.clone((List<Wall>) linkedList0);
      assertFalse(linkedList0.contains(wall1));
      assertFalse(list0.contains(wall1));
      assertNotNull(list0);
      assertEquals(0, linkedList0.size());
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      
      Wall wall2 = wall0.getWallAtEnd();
      assertFalse(wall0.equals((Object)wall1));
      assertNull(wall2);
      assertNotSame(wall0, wall1);
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertNull(wall0.getHeight());
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      
      Wall wall3 = wall0.getWallAtStart();
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall3.equals((Object)wall1));
      assertNotNull(wall3);
      assertSame(wall0, wall3);
      assertNotSame(wall0, wall1);
      assertSame(wall3, wall0);
      assertNotSame(wall3, wall1);
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertNull(wall0.getHeight());
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall3.getLeftSideColor());
      assertEquals(0.0F, wall3.getLength(), 0.01F);
      assertEquals(0.0F, wall3.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall3.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall3.getLeftSideShininess(), 0.01F);
      assertNull(wall3.getArcExtent());
      assertFalse(wall3.isTrapezoidal());
      assertNull(wall3.getRightSideColor());
      assertEquals(0.0F, wall3.getYEnd(), 0.01F);
      assertEquals(0.0F, wall3.getXEnd(), 0.01F);
      assertNull(wall3.getHeight());
      assertEquals(0.0F, wall3.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall3.getXStart(), 0.01F);
      assertEquals(0.0F, wall3.getThickness(), 0.01F);
      assertEquals(0.0F, wall3.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall3.getHeightAtEnd());
      assertEquals(0.0F, wall3.getYStart(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test199()  throws Throwable  {
      Wall wall0 = new Wall(13.809036F, 13.809036F, 13.809036F, 13.809036F, 0.0F);
      assertNotNull(wall0);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals(13.809036F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(13.809036F, wall0.getXStart(), 0.01F);
      assertEquals(13.809036F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(13.809036F, wall0.getYArcCircleCenter(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getLeftSideColor());
      assertEquals(13.809036F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(13.809036F, wall0.getYEnd(), 0.01F);
      
      boolean boolean0 = wall0.containsWallStartAt(13.809036F, 0.0F, 13.809036F);
      assertTrue(boolean0);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals(13.809036F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(13.809036F, wall0.getXStart(), 0.01F);
      assertEquals(13.809036F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(13.809036F, wall0.getYArcCircleCenter(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getLeftSideColor());
      assertEquals(13.809036F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(13.809036F, wall0.getYEnd(), 0.01F);
      
      wall0.setWallAtStart(wall0);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals(13.809036F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(13.809036F, wall0.getXStart(), 0.01F);
      assertEquals(13.809036F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(13.809036F, wall0.getYArcCircleCenter(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getLeftSideColor());
      assertEquals(13.809036F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(13.809036F, wall0.getYEnd(), 0.01F);
      
      Wall wall1 = new Wall(0.1F, 3677.7039F, (-1228.8142F), 155.2F, 13.809036F, 0.0F);
      assertFalse(wall1.equals((Object)wall0));
      assertNotNull(wall1);
      assertEquals(155.2F, wall1.getYEnd(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals(1916.4519F, wall1.getYArcCircleCenter(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals(3677.7039F, wall1.getYStart(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals(3730.719F, wall1.getLength(), 0.01F);
      assertEquals(13.809036F, wall1.getThickness(), 0.01F);
      assertEquals(0.0F, wall1.getHeight(), 0.01F);
      assertEquals(0.1F, wall1.getXStart(), 0.01F);
      assertEquals(3730.719F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals((-614.3571F), wall1.getXArcCircleCenter(), 0.01F);
      assertEquals((-1228.8142F), wall1.getXEnd(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      
      wall1.setWallAtEnd(wall0);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall1.equals((Object)wall0));
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals(13.809036F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(13.809036F, wall0.getXStart(), 0.01F);
      assertEquals(13.809036F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(13.809036F, wall0.getYArcCircleCenter(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getLeftSideColor());
      assertEquals(13.809036F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(13.809036F, wall0.getYEnd(), 0.01F);
      assertEquals(155.2F, wall1.getYEnd(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals(1916.4519F, wall1.getYArcCircleCenter(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals(3677.7039F, wall1.getYStart(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals(3730.719F, wall1.getLength(), 0.01F);
      assertEquals(13.809036F, wall1.getThickness(), 0.01F);
      assertEquals(0.0F, wall1.getHeight(), 0.01F);
      assertEquals(0.1F, wall1.getXStart(), 0.01F);
      assertEquals(3730.719F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals((-614.3571F), wall1.getXArcCircleCenter(), 0.01F);
      assertEquals((-1228.8142F), wall1.getXEnd(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      
      wall1.setWallAtEnd(wall0);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall1.equals((Object)wall0));
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals(13.809036F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(13.809036F, wall0.getXStart(), 0.01F);
      assertEquals(13.809036F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(13.809036F, wall0.getYArcCircleCenter(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getLeftSideColor());
      assertEquals(13.809036F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(13.809036F, wall0.getYEnd(), 0.01F);
      assertEquals(155.2F, wall1.getYEnd(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals(1916.4519F, wall1.getYArcCircleCenter(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals(3677.7039F, wall1.getYStart(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals(3730.719F, wall1.getLength(), 0.01F);
      assertEquals(13.809036F, wall1.getThickness(), 0.01F);
      assertEquals(0.0F, wall1.getHeight(), 0.01F);
      assertEquals(0.1F, wall1.getXStart(), 0.01F);
      assertEquals(3730.719F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals((-614.3571F), wall1.getXArcCircleCenter(), 0.01F);
      assertEquals((-1228.8142F), wall1.getXEnd(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      
      Float float0 = new Float(1747.2914F);
      assertNotNull(float0);
      assertEquals(1747.2914F, (float)float0, 0.01F);
      
      Float float1 = Float.valueOf(0.0F);
      assertNotEquals((float)float1, (float)float0, 0.01F);
      assertNotNull(float1);
      assertEquals(0.0F, (float)float1, 0.01F);
      
      wall0.setHeight(float1);
      assertFalse(wall0.equals((Object)wall1));
      assertNotEquals((float)float1, (float)float0, 0.01F);
      assertNotSame(wall0, wall1);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals(13.809036F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(13.809036F, wall0.getXStart(), 0.01F);
      assertEquals(13.809036F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getHeight(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(13.809036F, wall0.getYArcCircleCenter(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getLeftSideColor());
      assertEquals(13.809036F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(13.809036F, wall0.getYEnd(), 0.01F);
      
      float float2 = wall0.getYArcCircleCenter();
      assertFalse(wall0.equals((Object)wall1));
      assertNotSame(wall0, wall1);
      assertEquals(13.809036F, float2, 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals(13.809036F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(13.809036F, wall0.getXStart(), 0.01F);
      assertEquals(13.809036F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getHeight(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(13.809036F, wall0.getYArcCircleCenter(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getLeftSideColor());
      assertEquals(13.809036F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(13.809036F, wall0.getYEnd(), 0.01F);
      
      float[][] floatArray0 = wall0.getPoints();
      assertFalse(wall0.equals((Object)wall1));
      assertNotNull(floatArray0);
      assertEquals(4, floatArray0.length);
      assertNotSame(wall0, wall1);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals(13.809036F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(13.809036F, wall0.getXStart(), 0.01F);
      assertEquals(13.809036F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getHeight(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(13.809036F, wall0.getYArcCircleCenter(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getLeftSideColor());
      assertEquals(13.809036F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(13.809036F, wall0.getYEnd(), 0.01F);
      
      Wall wall2 = wall1.getWallAtEnd();
      assertFalse(wall1.equals((Object)wall0));
      assertFalse(wall2.equals((Object)wall1));
      assertNotNull(wall2);
      assertNotSame(wall1, wall0);
      assertNotSame(wall1, wall2);
      assertNotSame(wall2, wall1);
      assertSame(wall2, wall0);
      assertEquals(155.2F, wall1.getYEnd(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals(1916.4519F, wall1.getYArcCircleCenter(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals(3677.7039F, wall1.getYStart(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals(3730.719F, wall1.getLength(), 0.01F);
      assertEquals(13.809036F, wall1.getThickness(), 0.01F);
      assertEquals(0.0F, wall1.getHeight(), 0.01F);
      assertEquals(0.1F, wall1.getXStart(), 0.01F);
      assertEquals(3730.719F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals((-614.3571F), wall1.getXArcCircleCenter(), 0.01F);
      assertEquals((-1228.8142F), wall1.getXEnd(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertNull(wall2.getArcExtent());
      assertNull(wall2.getRightSideColor());
      assertEquals(0.0F, wall2.getHeight(), 0.01F);
      assertNull(wall2.getHeightAtEnd());
      assertEquals(0.0F, wall2.getRightSideShininess(), 0.01F);
      assertEquals(13.809036F, wall2.getYEnd(), 0.01F);
      assertEquals(13.809036F, wall2.getXEnd(), 0.01F);
      assertEquals(0.0F, wall2.getLength(), 0.01F);
      assertEquals(0.0F, wall2.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(13.809036F, wall2.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall2.getLeftSideShininess(), 0.01F);
      assertEquals(13.809036F, wall2.getXStart(), 0.01F);
      assertEquals(0.0F, wall2.getThickness(), 0.01F);
      assertEquals(13.809036F, wall2.getXArcCircleCenter(), 0.01F);
      assertFalse(wall2.isTrapezoidal());
      assertNull(wall2.getLeftSideColor());
      assertEquals(13.809036F, wall2.getYStart(), 0.01F);
      
      HomeTexture homeTexture0 = wall2.getRightSideTexture();
      assertFalse(wall1.equals((Object)wall0));
      assertFalse(wall1.equals((Object)wall2));
      assertFalse(wall2.equals((Object)wall1));
      assertNull(homeTexture0);
      assertNotSame(wall1, wall0);
      assertNotSame(wall1, wall2);
      assertNotSame(wall2, wall1);
      assertSame(wall2, wall0);
      assertEquals(155.2F, wall1.getYEnd(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals(1916.4519F, wall1.getYArcCircleCenter(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals(3677.7039F, wall1.getYStart(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals(3730.719F, wall1.getLength(), 0.01F);
      assertEquals(13.809036F, wall1.getThickness(), 0.01F);
      assertEquals(0.0F, wall1.getHeight(), 0.01F);
      assertEquals(0.1F, wall1.getXStart(), 0.01F);
      assertEquals(3730.719F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals((-614.3571F), wall1.getXArcCircleCenter(), 0.01F);
      assertEquals((-1228.8142F), wall1.getXEnd(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertNull(wall2.getArcExtent());
      assertNull(wall2.getRightSideColor());
      assertEquals(0.0F, wall2.getHeight(), 0.01F);
      assertNull(wall2.getHeightAtEnd());
      assertEquals(0.0F, wall2.getRightSideShininess(), 0.01F);
      assertEquals(13.809036F, wall2.getYEnd(), 0.01F);
      assertEquals(13.809036F, wall2.getXEnd(), 0.01F);
      assertEquals(0.0F, wall2.getLength(), 0.01F);
      assertEquals(0.0F, wall2.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(13.809036F, wall2.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall2.getLeftSideShininess(), 0.01F);
      assertEquals(13.809036F, wall2.getXStart(), 0.01F);
      assertEquals(0.0F, wall2.getThickness(), 0.01F);
      assertEquals(13.809036F, wall2.getXArcCircleCenter(), 0.01F);
      assertFalse(wall2.isTrapezoidal());
      assertNull(wall2.getLeftSideColor());
      assertEquals(13.809036F, wall2.getYStart(), 0.01F);
      
      Wall wall3 = new Wall((-693.4306F), 0.1F, 250.8876F, 0.1F, (-717.0F));
      assertFalse(wall3.equals((Object)wall1));
      assertFalse(wall3.equals((Object)wall2));
      assertFalse(wall3.equals((Object)wall0));
      assertNotNull(wall3);
      assertEquals(0.1F, wall3.getYArcCircleCenter(), 0.01F);
      assertNull(wall3.getHeight());
      assertEquals(0.0F, wall3.getRightSideShininess(), 0.01F);
      assertEquals((-221.2715F), wall3.getXArcCircleCenter(), 0.01F);
      assertEquals(944.31824F, wall3.getLength(), 0.01F);
      assertNull(wall3.getLeftSideColor());
      assertEquals(0.1F, wall3.getYEnd(), 0.01F);
      assertEquals((-717.0F), wall3.getThickness(), 0.01F);
      assertFalse(wall3.isTrapezoidal());
      assertEquals(0.1F, wall3.getYStart(), 0.01F);
      assertNull(wall3.getHeightAtEnd());
      assertEquals(944.31824F, wall3.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-693.4306F), wall3.getXStart(), 0.01F);
      assertEquals(0.0F, wall3.getLeftSideShininess(), 0.01F);
      assertNull(wall3.getArcExtent());
      assertNull(wall3.getRightSideColor());
      assertEquals(250.8876F, wall3.getXEnd(), 0.01F);
      
      Wall wall4 = wall2.clone();
      assertFalse(wall1.equals((Object)wall0));
      assertFalse(wall1.equals((Object)wall2));
      assertFalse(wall1.equals((Object)wall3));
      assertFalse(wall2.equals((Object)wall3));
      assertFalse(wall2.equals((Object)wall1));
      assertFalse(wall4.equals((Object)wall2));
      assertFalse(wall4.equals((Object)wall3));
      assertFalse(wall4.equals((Object)wall0));
      assertFalse(wall4.equals((Object)wall1));
      assertNotNull(wall4);
      assertNotSame(wall1, wall0);
      assertNotSame(wall1, wall2);
      assertNotSame(wall1, wall3);
      assertNotSame(wall1, wall4);
      assertNotSame(wall2, wall4);
      assertNotSame(wall2, wall3);
      assertNotSame(wall2, wall1);
      assertSame(wall2, wall0);
      assertNotSame(wall4, wall2);
      assertNotSame(wall4, wall3);
      assertNotSame(wall4, wall0);
      assertNotSame(wall4, wall1);
      assertEquals(155.2F, wall1.getYEnd(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals(1916.4519F, wall1.getYArcCircleCenter(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals(3677.7039F, wall1.getYStart(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals(3730.719F, wall1.getLength(), 0.01F);
      assertEquals(13.809036F, wall1.getThickness(), 0.01F);
      assertEquals(0.0F, wall1.getHeight(), 0.01F);
      assertEquals(0.1F, wall1.getXStart(), 0.01F);
      assertEquals(3730.719F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals((-614.3571F), wall1.getXArcCircleCenter(), 0.01F);
      assertEquals((-1228.8142F), wall1.getXEnd(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertNull(wall2.getArcExtent());
      assertNull(wall2.getRightSideColor());
      assertEquals(0.0F, wall2.getHeight(), 0.01F);
      assertNull(wall2.getHeightAtEnd());
      assertEquals(0.0F, wall2.getRightSideShininess(), 0.01F);
      assertEquals(13.809036F, wall2.getYEnd(), 0.01F);
      assertEquals(13.809036F, wall2.getXEnd(), 0.01F);
      assertEquals(0.0F, wall2.getLength(), 0.01F);
      assertEquals(0.0F, wall2.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(13.809036F, wall2.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall2.getLeftSideShininess(), 0.01F);
      assertEquals(13.809036F, wall2.getXStart(), 0.01F);
      assertEquals(0.0F, wall2.getThickness(), 0.01F);
      assertEquals(13.809036F, wall2.getXArcCircleCenter(), 0.01F);
      assertFalse(wall2.isTrapezoidal());
      assertNull(wall2.getLeftSideColor());
      assertEquals(13.809036F, wall2.getYStart(), 0.01F);
      assertNull(wall4.getLeftSideColor());
      assertEquals(13.809036F, wall4.getYStart(), 0.01F);
      assertEquals(13.809036F, wall4.getYArcCircleCenter(), 0.01F);
      assertFalse(wall4.isTrapezoidal());
      assertEquals(0.0F, wall4.getRightSideShininess(), 0.01F);
      assertNull(wall4.getHeightAtEnd());
      assertEquals(0.0F, wall4.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(13.809036F, wall4.getYEnd(), 0.01F);
      assertEquals(13.809036F, wall4.getXEnd(), 0.01F);
      assertEquals(0.0F, wall4.getHeight(), 0.01F);
      assertEquals(13.809036F, wall4.getXStart(), 0.01F);
      assertEquals(0.0F, wall4.getLength(), 0.01F);
      assertEquals(13.809036F, wall4.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall4.getThickness(), 0.01F);
      assertNull(wall4.getArcExtent());
      assertNull(wall4.getRightSideColor());
      assertEquals(0.0F, wall4.getLeftSideShininess(), 0.01F);
      
      TextureImage textureImage0 = wall1.getPattern();
      assertFalse(wall1.equals((Object)wall0));
      assertFalse(wall1.equals((Object)wall2));
      assertFalse(wall1.equals((Object)wall3));
      assertFalse(wall1.equals((Object)wall4));
      assertNull(textureImage0);
      assertNotSame(wall1, wall0);
      assertNotSame(wall1, wall2);
      assertNotSame(wall1, wall3);
      assertNotSame(wall1, wall4);
      assertEquals(155.2F, wall1.getYEnd(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals(1916.4519F, wall1.getYArcCircleCenter(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals(3677.7039F, wall1.getYStart(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals(3730.719F, wall1.getLength(), 0.01F);
      assertEquals(13.809036F, wall1.getThickness(), 0.01F);
      assertEquals(0.0F, wall1.getHeight(), 0.01F);
      assertEquals(0.1F, wall1.getXStart(), 0.01F);
      assertEquals(3730.719F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals((-614.3571F), wall1.getXArcCircleCenter(), 0.01F);
      assertEquals((-1228.8142F), wall1.getXEnd(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      
      Wall wall5 = wall1.clone();
      assertFalse(wall5.equals((Object)wall3));
      assertFalse(wall5.equals((Object)wall1));
      assertFalse(wall5.equals((Object)wall4));
      assertFalse(wall5.equals((Object)wall0));
      assertFalse(wall5.equals((Object)wall2));
      assertFalse(wall1.equals((Object)wall0));
      assertFalse(wall1.equals((Object)wall2));
      assertFalse(wall1.equals((Object)wall3));
      assertFalse(wall1.equals((Object)wall4));
      assertNotNull(wall5);
      assertNotSame(wall5, wall3);
      assertNotSame(wall5, wall1);
      assertNotSame(wall5, wall4);
      assertNotSame(wall5, wall0);
      assertNotSame(wall5, wall2);
      assertNotSame(wall1, wall0);
      assertNotSame(wall1, wall2);
      assertNotSame(wall1, wall3);
      assertNotSame(wall1, wall4);
      assertNotSame(wall1, wall5);
      assertNull(wall5.getRightSideColor());
      assertEquals(0.0F, wall5.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall5.getHeight(), 0.01F);
      assertEquals(13.809036F, wall5.getThickness(), 0.01F);
      assertNull(wall5.getArcExtent());
      assertEquals(0.0F, wall5.getLeftSideShininess(), 0.01F);
      assertFalse(wall5.isTrapezoidal());
      assertEquals((-1228.8142F), wall5.getXEnd(), 0.01F);
      assertEquals(1916.4519F, wall5.getYArcCircleCenter(), 0.01F);
      assertEquals(3730.719F, wall5.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-614.3571F), wall5.getXArcCircleCenter(), 0.01F);
      assertNull(wall5.getHeightAtEnd());
      assertEquals(0.1F, wall5.getXStart(), 0.01F);
      assertEquals(155.2F, wall5.getYEnd(), 0.01F);
      assertEquals(3730.719F, wall5.getLength(), 0.01F);
      assertEquals(3677.7039F, wall5.getYStart(), 0.01F);
      assertNull(wall5.getLeftSideColor());
      assertEquals(155.2F, wall1.getYEnd(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals(1916.4519F, wall1.getYArcCircleCenter(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals(3677.7039F, wall1.getYStart(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals(3730.719F, wall1.getLength(), 0.01F);
      assertEquals(13.809036F, wall1.getThickness(), 0.01F);
      assertEquals(0.0F, wall1.getHeight(), 0.01F);
      assertEquals(0.1F, wall1.getXStart(), 0.01F);
      assertEquals(3730.719F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals((-614.3571F), wall1.getXArcCircleCenter(), 0.01F);
      assertEquals((-1228.8142F), wall1.getXEnd(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
  }

  @Test(timeout = 4000)
  public void test200()  throws Throwable  {
      float float0 = 0.0F;
      Wall wall0 = new Wall(1.0F, (-1.0F), 1.0F, 0.0F, (-1.0F), (-1.0F));
      assertNotNull(wall0);
      assertEquals((-1.0F), wall0.getYStart(), 0.01F);
      assertEquals(1.0F, wall0.getXStart(), 0.01F);
      assertEquals((-1.0F), wall0.getThickness(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(1.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(1.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(1.0F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertNull(wall0.getLeftSideColor());
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals((-1.0F), wall0.getHeight(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals((-0.5F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(1.0F, wall0.getXEnd(), 0.01F);
      
      float float1 = wall0.getLeftSideShininess();
      assertEquals(float1, float0, 0.01F);
      assertEquals(0.0F, float1, 0.01F);
      assertEquals((-1.0F), wall0.getYStart(), 0.01F);
      assertEquals(1.0F, wall0.getXStart(), 0.01F);
      assertEquals((-1.0F), wall0.getThickness(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(1.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(1.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(1.0F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertNull(wall0.getLeftSideColor());
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals((-1.0F), wall0.getHeight(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals((-0.5F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(1.0F, wall0.getXEnd(), 0.01F);
      
      Float float2 = new Float((double) 0.0F);
      assertEquals((float)float2, (float)float1, 0.01F);
      assertEquals((float)float2, (float)float0, 0.01F);
      assertNotNull(float2);
      assertEquals(0.0F, (float)float2, 0.01F);
      
      wall0.setHeightAtEnd(float2);
      assertEquals((float)float2, (float)float1, 0.01F);
      assertEquals((float)float2, (float)float0, 0.01F);
      assertEquals((-1.0F), wall0.getYStart(), 0.01F);
      assertEquals(1.0F, wall0.getXStart(), 0.01F);
      assertEquals((-1.0F), wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getHeightAtEnd(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(1.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(1.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(1.0F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertTrue(wall0.isTrapezoidal());
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals((-1.0F), wall0.getHeight(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals((-0.5F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(1.0F, wall0.getXEnd(), 0.01F);
      
      float float3 = wall0.getThickness();
      assertNotEquals(float3, float0, 0.01F);
      assertNotEquals(float3, float1, 0.01F);
      assertEquals((-1.0F), float3, 0.01F);
      assertEquals((-1.0F), wall0.getYStart(), 0.01F);
      assertEquals(1.0F, wall0.getXStart(), 0.01F);
      assertEquals((-1.0F), wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getHeightAtEnd(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(1.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(1.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(1.0F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertTrue(wall0.isTrapezoidal());
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals((-1.0F), wall0.getHeight(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals((-0.5F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(1.0F, wall0.getXEnd(), 0.01F);
      
      String string0 = "com.eteks.sweethome3d.tools.TemporaryURLContent";
      try { 
        MockURL.URL("");
        fail("Expecting exception: MalformedURLException");
      
      } catch(MalformedURLException e) {
         //
         // no protocol: 
         //
         verifyException("java.net.URL", e);
      }
  }

  @Test(timeout = 4000)
  public void test201()  throws Throwable  {
      Wall wall0 = new Wall(0.0F, 0.0F, 0.0F, 0.1F, 0.0F);
      assertNotNull(wall0);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.1F, wall0.getYEnd(), 0.01F);
      assertEquals(0.05F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.1F, wall0.getLength(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals(0.1F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      
      boolean boolean0 = wall0.containsWallStartAt(0.1F, 0.0F, 0.1F);
      assertTrue(boolean0);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.1F, wall0.getYEnd(), 0.01F);
      assertEquals(0.05F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.1F, wall0.getLength(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals(0.1F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      
      wall0.setWallAtStart(wall0);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.1F, wall0.getYEnd(), 0.01F);
      assertEquals(0.05F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.1F, wall0.getLength(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals(0.1F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      
      boolean boolean1 = wall0.intersectsRectangle(0.0F, 0.1F, 0.0F, 0.0F);
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.1F, wall0.getYEnd(), 0.01F);
      assertEquals(0.05F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.1F, wall0.getLength(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals(0.1F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      
      Wall wall1 = new Wall(0.0F, 4043.4763F, 0.1F, 3943.0F, 155.2F, (-1228.8142F));
      assertFalse(wall1.equals((Object)wall0));
      assertNotNull(wall1);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals(4043.4763F, wall1.getYStart(), 0.01F);
      assertEquals(0.0F, wall1.getXStart(), 0.01F);
      assertEquals((-1228.8142F), wall1.getHeight(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals(155.2F, wall1.getThickness(), 0.01F);
      assertEquals(0.1F, wall1.getXEnd(), 0.01F);
      assertEquals(100.47637F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(3993.2383F, wall1.getYArcCircleCenter(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getHeightAtEnd());
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertNull(wall1.getRightSideColor());
      assertEquals(3943.0F, wall1.getYEnd(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals(100.47637F, wall1.getLength(), 0.01F);
      assertEquals(0.05F, wall1.getXArcCircleCenter(), 0.01F);
      
      Float float0 = wall0.getHeight();
      assertFalse(wall0.equals((Object)wall1));
      assertNull(float0);
      assertNotSame(wall0, wall1);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.1F, wall0.getYEnd(), 0.01F);
      assertEquals(0.05F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.1F, wall0.getLength(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals(0.1F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      
      LinkedList<Wall> linkedList0 = new LinkedList<Wall>();
      assertFalse(linkedList0.contains(wall1));
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      float float1 = Float.min(155.2F, 3943.0F);
      assertEquals(155.2F, float1, 0.01F);
      
      List<Wall> list0 = Wall.clone((List<Wall>) linkedList0);
      assertFalse(linkedList0.contains(wall1));
      assertFalse(list0.contains(wall1));
      assertNotNull(list0);
      assertEquals(0, linkedList0.size());
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      
      wall1.setRightSideTexture((HomeTexture) null);
      assertFalse(wall1.equals((Object)wall0));
      assertNotSame(wall1, wall0);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals(4043.4763F, wall1.getYStart(), 0.01F);
      assertEquals(0.0F, wall1.getXStart(), 0.01F);
      assertEquals((-1228.8142F), wall1.getHeight(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals(155.2F, wall1.getThickness(), 0.01F);
      assertEquals(0.1F, wall1.getXEnd(), 0.01F);
      assertEquals(100.47637F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(3993.2383F, wall1.getYArcCircleCenter(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getHeightAtEnd());
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertNull(wall1.getRightSideColor());
      assertEquals(3943.0F, wall1.getYEnd(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals(100.47637F, wall1.getLength(), 0.01F);
      assertEquals(0.05F, wall1.getXArcCircleCenter(), 0.01F);
      
      Wall.Property[] wall_PropertyArray0 = Wall.Property.values();
      assertNotNull(wall_PropertyArray0);
      assertEquals(18, wall_PropertyArray0.length);
      
      wall0.setArcExtent((Float) null);
      assertFalse(wall0.equals((Object)wall1));
      assertNotSame(wall0, wall1);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.1F, wall0.getYEnd(), 0.01F);
      assertEquals(0.05F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.1F, wall0.getLength(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals(0.1F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      
      float float2 = wall0.getYStart();
      assertFalse(wall0.equals((Object)wall1));
      assertNotEquals(float2, float1, 0.01F);
      assertNotSame(wall0, wall1);
      assertEquals(0.0F, float2, 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.1F, wall0.getYEnd(), 0.01F);
      assertEquals(0.05F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.1F, wall0.getLength(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals(0.1F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      
      Wall wall2 = wall0.clone();
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall2.equals((Object)wall0));
      assertFalse(wall2.equals((Object)wall1));
      assertNotNull(wall2);
      assertNotSame(wall0, wall1);
      assertNotSame(wall0, wall2);
      assertNotSame(wall2, wall0);
      assertNotSame(wall2, wall1);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.1F, wall0.getYEnd(), 0.01F);
      assertEquals(0.05F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.1F, wall0.getLength(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals(0.1F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertNull(wall2.getHeightAtEnd());
      assertNull(wall2.getHeight());
      assertEquals(0.1F, wall2.getLength(), 0.01F);
      assertEquals(0.0F, wall2.getXArcCircleCenter(), 0.01F);
      assertEquals(0.1F, wall2.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall2.getXStart(), 0.01F);
      assertNull(wall2.getLeftSideColor());
      assertEquals(0.1F, wall2.getYEnd(), 0.01F);
      assertEquals(0.0F, wall2.getRightSideShininess(), 0.01F);
      assertFalse(wall2.isTrapezoidal());
      assertEquals(0.05F, wall2.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall2.getXEnd(), 0.01F);
      assertEquals(0.0F, wall2.getYStart(), 0.01F);
      assertEquals(0.0F, wall2.getLeftSideShininess(), 0.01F);
      assertNull(wall2.getArcExtent());
      assertNull(wall2.getRightSideColor());
      assertEquals(0.0F, wall2.getThickness(), 0.01F);
      
      Wall wall3 = wall2.clone();
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall0.equals((Object)wall2));
      assertFalse(wall2.equals((Object)wall0));
      assertFalse(wall2.equals((Object)wall1));
      assertFalse(wall3.equals((Object)wall1));
      assertFalse(wall3.equals((Object)wall2));
      assertFalse(wall3.equals((Object)wall0));
      assertNotNull(wall3);
      assertNotSame(wall0, wall1);
      assertNotSame(wall0, wall3);
      assertNotSame(wall0, wall2);
      assertNotSame(wall2, wall3);
      assertNotSame(wall2, wall0);
      assertNotSame(wall2, wall1);
      assertNotSame(wall3, wall1);
      assertNotSame(wall3, wall2);
      assertNotSame(wall3, wall0);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.1F, wall0.getYEnd(), 0.01F);
      assertEquals(0.05F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.1F, wall0.getLength(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals(0.1F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertNull(wall2.getHeightAtEnd());
      assertNull(wall2.getHeight());
      assertEquals(0.1F, wall2.getLength(), 0.01F);
      assertEquals(0.0F, wall2.getXArcCircleCenter(), 0.01F);
      assertEquals(0.1F, wall2.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall2.getXStart(), 0.01F);
      assertNull(wall2.getLeftSideColor());
      assertEquals(0.1F, wall2.getYEnd(), 0.01F);
      assertEquals(0.0F, wall2.getRightSideShininess(), 0.01F);
      assertFalse(wall2.isTrapezoidal());
      assertEquals(0.05F, wall2.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall2.getXEnd(), 0.01F);
      assertEquals(0.0F, wall2.getYStart(), 0.01F);
      assertEquals(0.0F, wall2.getLeftSideShininess(), 0.01F);
      assertNull(wall2.getArcExtent());
      assertNull(wall2.getRightSideColor());
      assertEquals(0.0F, wall2.getThickness(), 0.01F);
      assertEquals(0.1F, wall3.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall3.getHeightAtEnd());
      assertEquals(0.0F, wall3.getYStart(), 0.01F);
      assertNull(wall3.getHeight());
      assertNull(wall3.getArcExtent());
      assertNull(wall3.getRightSideColor());
      assertEquals(0.05F, wall3.getYArcCircleCenter(), 0.01F);
      assertEquals(0.1F, wall3.getLength(), 0.01F);
      assertEquals(0.0F, wall3.getThickness(), 0.01F);
      assertEquals(0.0F, wall3.getLeftSideShininess(), 0.01F);
      assertFalse(wall3.isTrapezoidal());
      assertEquals(0.0F, wall3.getXEnd(), 0.01F);
      assertNull(wall3.getLeftSideColor());
      assertEquals(0.1F, wall3.getYEnd(), 0.01F);
      assertEquals(0.0F, wall3.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall3.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall3.getXStart(), 0.01F);
      
      boolean boolean2 = wall2.intersectsRectangle((-1.0F), (-2809.76F), 155.2F, 155.2F);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall0.equals((Object)wall3));
      assertFalse(wall0.equals((Object)wall2));
      assertFalse(wall2.equals((Object)wall3));
      assertFalse(wall2.equals((Object)wall0));
      assertFalse(wall2.equals((Object)wall1));
      assertFalse(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      assertNotSame(wall0, wall1);
      assertNotSame(wall0, wall3);
      assertNotSame(wall0, wall2);
      assertNotSame(wall2, wall3);
      assertNotSame(wall2, wall0);
      assertNotSame(wall2, wall1);
      assertTrue(boolean2);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.1F, wall0.getYEnd(), 0.01F);
      assertEquals(0.05F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.1F, wall0.getLength(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals(0.1F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertNull(wall2.getHeightAtEnd());
      assertNull(wall2.getHeight());
      assertEquals(0.1F, wall2.getLength(), 0.01F);
      assertEquals(0.0F, wall2.getXArcCircleCenter(), 0.01F);
      assertEquals(0.1F, wall2.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall2.getXStart(), 0.01F);
      assertNull(wall2.getLeftSideColor());
      assertEquals(0.1F, wall2.getYEnd(), 0.01F);
      assertEquals(0.0F, wall2.getRightSideShininess(), 0.01F);
      assertFalse(wall2.isTrapezoidal());
      assertEquals(0.05F, wall2.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall2.getXEnd(), 0.01F);
      assertEquals(0.0F, wall2.getYStart(), 0.01F);
      assertEquals(0.0F, wall2.getLeftSideShininess(), 0.01F);
      assertNull(wall2.getArcExtent());
      assertNull(wall2.getRightSideColor());
      assertEquals(0.0F, wall2.getThickness(), 0.01F);
      
      wall2.setThickness(0.0F);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall0.equals((Object)wall3));
      assertFalse(wall0.equals((Object)wall2));
      assertFalse(wall2.equals((Object)wall3));
      assertFalse(wall2.equals((Object)wall0));
      assertFalse(wall2.equals((Object)wall1));
      assertNotSame(wall0, wall1);
      assertNotSame(wall0, wall3);
      assertNotSame(wall0, wall2);
      assertNotSame(wall2, wall3);
      assertNotSame(wall2, wall0);
      assertNotSame(wall2, wall1);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.1F, wall0.getYEnd(), 0.01F);
      assertEquals(0.05F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.1F, wall0.getLength(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals(0.1F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertNull(wall2.getHeightAtEnd());
      assertNull(wall2.getHeight());
      assertEquals(0.1F, wall2.getLength(), 0.01F);
      assertEquals(0.0F, wall2.getXArcCircleCenter(), 0.01F);
      assertEquals(0.1F, wall2.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall2.getXStart(), 0.01F);
      assertNull(wall2.getLeftSideColor());
      assertEquals(0.1F, wall2.getYEnd(), 0.01F);
      assertEquals(0.0F, wall2.getRightSideShininess(), 0.01F);
      assertFalse(wall2.isTrapezoidal());
      assertEquals(0.05F, wall2.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall2.getXEnd(), 0.01F);
      assertEquals(0.0F, wall2.getYStart(), 0.01F);
      assertEquals(0.0F, wall2.getLeftSideShininess(), 0.01F);
      assertNull(wall2.getArcExtent());
      assertNull(wall2.getRightSideColor());
      assertEquals(0.0F, wall2.getThickness(), 0.01F);
      
      Wall wall4 = new Wall((-1228.8142F), 0.0F, 2435.498F, (-2078.415F), 2519.898F);
      assertFalse(wall4.equals((Object)wall3));
      assertFalse(wall4.equals((Object)wall1));
      assertFalse(wall4.equals((Object)wall0));
      assertFalse(wall4.equals((Object)wall2));
      assertNotNull(wall4);
      assertEquals((-2078.415F), wall4.getYEnd(), 0.01F);
      assertEquals(2435.498F, wall4.getXEnd(), 0.01F);
      assertEquals(0.0F, wall4.getYStart(), 0.01F);
      assertEquals(0.0F, wall4.getLeftSideShininess(), 0.01F);
      assertNull(wall4.getLeftSideColor());
      assertEquals(4212.7183F, wall4.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-1228.8142F), wall4.getXStart(), 0.01F);
      assertNull(wall4.getHeight());
      assertEquals(0.0F, wall4.getRightSideShininess(), 0.01F);
      assertNull(wall4.getArcExtent());
      assertNull(wall4.getRightSideColor());
      assertNull(wall4.getHeightAtEnd());
      assertEquals(2519.898F, wall4.getThickness(), 0.01F);
      assertEquals(4212.7183F, wall4.getLength(), 0.01F);
      assertEquals((-1039.2075F), wall4.getYArcCircleCenter(), 0.01F);
      assertEquals(603.3419F, wall4.getXArcCircleCenter(), 0.01F);
      assertFalse(wall4.isTrapezoidal());
      
      float float3 = wall4.getYStart();
      assertFalse(wall4.equals((Object)wall3));
      assertFalse(wall4.equals((Object)wall1));
      assertFalse(wall4.equals((Object)wall0));
      assertFalse(wall4.equals((Object)wall2));
      assertEquals(float3, float2, 0.01F);
      assertNotEquals(float3, float1, 0.01F);
      assertNotSame(wall4, wall3);
      assertNotSame(wall4, wall1);
      assertNotSame(wall4, wall0);
      assertNotSame(wall4, wall2);
      assertEquals(0.0F, float3, 0.01F);
      assertEquals((-2078.415F), wall4.getYEnd(), 0.01F);
      assertEquals(2435.498F, wall4.getXEnd(), 0.01F);
      assertEquals(0.0F, wall4.getYStart(), 0.01F);
      assertEquals(0.0F, wall4.getLeftSideShininess(), 0.01F);
      assertNull(wall4.getLeftSideColor());
      assertEquals(4212.7183F, wall4.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-1228.8142F), wall4.getXStart(), 0.01F);
      assertNull(wall4.getHeight());
      assertEquals(0.0F, wall4.getRightSideShininess(), 0.01F);
      assertNull(wall4.getArcExtent());
      assertNull(wall4.getRightSideColor());
      assertNull(wall4.getHeightAtEnd());
      assertEquals(2519.898F, wall4.getThickness(), 0.01F);
      assertEquals(4212.7183F, wall4.getLength(), 0.01F);
      assertEquals((-1039.2075F), wall4.getYArcCircleCenter(), 0.01F);
      assertEquals(603.3419F, wall4.getXArcCircleCenter(), 0.01F);
      assertFalse(wall4.isTrapezoidal());
      
      wall2.setWallAtStart(wall1);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall0.equals((Object)wall3));
      assertFalse(wall0.equals((Object)wall4));
      assertFalse(wall0.equals((Object)wall2));
      assertFalse(wall1.equals((Object)wall3));
      assertFalse(wall1.equals((Object)wall2));
      assertFalse(wall1.equals((Object)wall4));
      assertFalse(wall1.equals((Object)wall0));
      assertFalse(wall2.equals((Object)wall3));
      assertFalse(wall2.equals((Object)wall4));
      assertFalse(wall2.equals((Object)wall0));
      assertFalse(wall2.equals((Object)wall1));
      assertNotSame(wall0, wall1);
      assertNotSame(wall0, wall3);
      assertNotSame(wall0, wall4);
      assertNotSame(wall0, wall2);
      assertNotSame(wall1, wall3);
      assertNotSame(wall1, wall2);
      assertNotSame(wall1, wall4);
      assertNotSame(wall1, wall0);
      assertNotSame(wall2, wall3);
      assertNotSame(wall2, wall4);
      assertNotSame(wall2, wall0);
      assertNotSame(wall2, wall1);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.1F, wall0.getYEnd(), 0.01F);
      assertEquals(0.05F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.1F, wall0.getLength(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals(0.1F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals(4043.4763F, wall1.getYStart(), 0.01F);
      assertEquals(0.0F, wall1.getXStart(), 0.01F);
      assertEquals((-1228.8142F), wall1.getHeight(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals(155.2F, wall1.getThickness(), 0.01F);
      assertEquals(0.1F, wall1.getXEnd(), 0.01F);
      assertEquals(100.47637F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(3993.2383F, wall1.getYArcCircleCenter(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getHeightAtEnd());
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertNull(wall1.getRightSideColor());
      assertEquals(3943.0F, wall1.getYEnd(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals(100.47637F, wall1.getLength(), 0.01F);
      assertEquals(0.05F, wall1.getXArcCircleCenter(), 0.01F);
      assertNull(wall2.getHeightAtEnd());
      assertNull(wall2.getHeight());
      assertEquals(0.1F, wall2.getLength(), 0.01F);
      assertEquals(0.0F, wall2.getXArcCircleCenter(), 0.01F);
      assertEquals(0.1F, wall2.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall2.getXStart(), 0.01F);
      assertNull(wall2.getLeftSideColor());
      assertEquals(0.1F, wall2.getYEnd(), 0.01F);
      assertEquals(0.0F, wall2.getRightSideShininess(), 0.01F);
      assertFalse(wall2.isTrapezoidal());
      assertEquals(0.05F, wall2.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall2.getXEnd(), 0.01F);
      assertEquals(0.0F, wall2.getYStart(), 0.01F);
      assertEquals(0.0F, wall2.getLeftSideShininess(), 0.01F);
      assertNull(wall2.getArcExtent());
      assertNull(wall2.getRightSideColor());
      assertEquals(0.0F, wall2.getThickness(), 0.01F);
      
      wall2.setYStart(668.71356F);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall0.equals((Object)wall3));
      assertFalse(wall0.equals((Object)wall4));
      assertFalse(wall0.equals((Object)wall2));
      assertFalse(wall2.equals((Object)wall3));
      assertFalse(wall2.equals((Object)wall4));
      assertFalse(wall2.equals((Object)wall0));
      assertFalse(wall2.equals((Object)wall1));
      assertNotSame(wall0, wall1);
      assertNotSame(wall0, wall3);
      assertNotSame(wall0, wall4);
      assertNotSame(wall0, wall2);
      assertNotSame(wall2, wall3);
      assertNotSame(wall2, wall4);
      assertNotSame(wall2, wall0);
      assertNotSame(wall2, wall1);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.1F, wall0.getYEnd(), 0.01F);
      assertEquals(0.05F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.1F, wall0.getLength(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals(0.1F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(668.71356F, wall2.getYStart(), 0.01F);
      assertNull(wall2.getHeightAtEnd());
      assertNull(wall2.getHeight());
      assertEquals(0.0F, wall2.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall2.getXStart(), 0.01F);
      assertNull(wall2.getLeftSideColor());
      assertEquals(0.1F, wall2.getYEnd(), 0.01F);
      assertEquals(668.6136F, wall2.getLength(), 0.01F);
      assertEquals(0.0F, wall2.getRightSideShininess(), 0.01F);
      assertFalse(wall2.isTrapezoidal());
      assertEquals(0.0F, wall2.getXEnd(), 0.01F);
      assertEquals(334.40677F, wall2.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall2.getLeftSideShininess(), 0.01F);
      assertNull(wall2.getArcExtent());
      assertNull(wall2.getRightSideColor());
      assertEquals(668.6136F, wall2.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall2.getThickness(), 0.01F);
      
      Float float4 = new Float(0.0F);
      assertEquals((float)float4, (float)float3, 0.01F);
      assertEquals((float)float4, (float)float2, 0.01F);
      assertNotEquals((float)float4, (float)float1, 0.01F);
      assertNotNull(float4);
      assertEquals(0.0F, (float)float4, 0.01F);
      
      wall4.setHeight(float4);
      assertFalse(wall4.equals((Object)wall3));
      assertFalse(wall4.equals((Object)wall1));
      assertFalse(wall4.equals((Object)wall0));
      assertFalse(wall4.equals((Object)wall2));
      assertEquals((float)float4, (float)float3, 0.01F);
      assertEquals((float)float4, (float)float2, 0.01F);
      assertNotEquals((float)float4, (float)float1, 0.01F);
      assertNotSame(wall4, wall3);
      assertNotSame(wall4, wall1);
      assertNotSame(wall4, wall0);
      assertNotSame(wall4, wall2);
      assertEquals((-2078.415F), wall4.getYEnd(), 0.01F);
      assertEquals(2435.498F, wall4.getXEnd(), 0.01F);
      assertEquals(0.0F, wall4.getYStart(), 0.01F);
      assertEquals(0.0F, wall4.getLeftSideShininess(), 0.01F);
      assertNull(wall4.getLeftSideColor());
      assertEquals(4212.7183F, wall4.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-1228.8142F), wall4.getXStart(), 0.01F);
      assertEquals(0.0F, wall4.getHeight(), 0.01F);
      assertEquals(0.0F, wall4.getRightSideShininess(), 0.01F);
      assertNull(wall4.getArcExtent());
      assertNull(wall4.getRightSideColor());
      assertNull(wall4.getHeightAtEnd());
      assertEquals(2519.898F, wall4.getThickness(), 0.01F);
      assertEquals(4212.7183F, wall4.getLength(), 0.01F);
      assertEquals((-1039.2075F), wall4.getYArcCircleCenter(), 0.01F);
      assertEquals(603.3419F, wall4.getXArcCircleCenter(), 0.01F);
      assertFalse(wall4.isTrapezoidal());
  }

  @Test(timeout = 4000)
  public void test202()  throws Throwable  {
      LinkedList<Wall> linkedList0 = new LinkedList<Wall>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      float float0 = Float.min((-2893.675F), (-2479.613F));
      assertEquals((-2893.675F), float0, 0.01F);
      
      List<Wall> list0 = Wall.clone((List<Wall>) linkedList0);
      assertNotNull(list0);
      assertEquals(0, linkedList0.size());
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      
      Wall wall0 = new Wall((-3839.8455F), 842.69F, 842.69F, (-3839.8455F), (-2893.675F));
      assertNotNull(wall0);
      assertEquals(6622.105F, wall0.getLength(), 0.01F);
      assertEquals((-3839.8455F), wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals((-1498.5778F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(6622.105F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-3839.8455F), wall0.getYEnd(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(842.69F, wall0.getYStart(), 0.01F);
      assertEquals((-1498.5778F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-2893.675F), wall0.getThickness(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertNull(wall0.getHeight());
      assertEquals(842.69F, wall0.getXEnd(), 0.01F);
      
      float float1 = Float.sum((-4549.5F), 1.0F);
      assertNotEquals(float1, float0, 0.01F);
      assertEquals((-4548.5F), float1, 0.01F);
      
      Float float2 = new Float(617.2161123070293);
      assertNotEquals((float)float2, (float)float0, 0.01F);
      assertNotEquals((float)float2, (float)float1, 0.01F);
      assertNotNull(float2);
      assertEquals(617.2161F, (float)float2, 0.01F);
      
      wall0.setArcExtent(float2);
      assertNotEquals((float)float2, (float)float0, 0.01F);
      assertNotEquals((float)float2, (float)float1, 0.01F);
      assertEquals((-3839.8455F), wall0.getXStart(), 0.01F);
      assertEquals(1107.1898F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(6622.105F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-3839.8455F), wall0.getYEnd(), 0.01F);
      assertEquals(3057751.0F, wall0.getLength(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals(842.69F, wall0.getYStart(), 0.01F);
      assertEquals(617.2161F, wall0.getArcExtent(), 0.01F);
      assertEquals((-2893.675F), wall0.getThickness(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(1107.1898F, wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals(842.69F, wall0.getXEnd(), 0.01F);
      
      Float float3 = new Float(842.69F);
      assertNotEquals((float)float3, (float)float2, 0.01F);
      assertNotEquals((float)float3, (float)float1, 0.01F);
      assertNotEquals((float)float3, (float)float0, 0.01F);
      assertNotNull(float3);
      assertEquals(842.69F, (float)float3, 0.01F);
      
      float float4 = wall0.getLength();
      assertNotEquals(float4, float1, 0.01F);
      assertNotEquals(float4, float0, 0.01F);
      assertEquals(3057751.0F, float4, 0.01F);
      assertEquals((-3839.8455F), wall0.getXStart(), 0.01F);
      assertEquals(1107.1898F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(6622.105F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-3839.8455F), wall0.getYEnd(), 0.01F);
      assertEquals(3057751.0F, wall0.getLength(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals(842.69F, wall0.getYStart(), 0.01F);
      assertEquals(617.2161F, wall0.getArcExtent(), 0.01F);
      assertEquals((-2893.675F), wall0.getThickness(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(1107.1898F, wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals(842.69F, wall0.getXEnd(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test203()  throws Throwable  {
      Wall wall0 = new Wall((-1.0F), 1.0F, 1.0F, 0.0F, 0.0F, (-1.0F));
      assertNotNull(wall0);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals((-1.0F), wall0.getHeight(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-1.0F), wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals(0.5F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(2.236068F, wall0.getLength(), 0.01F);
      assertEquals(1.0F, wall0.getYStart(), 0.01F);
      assertEquals(1.0F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals(2.236068F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      
      boolean boolean0 = wall0.containsPoint(1019.497F, 0.0F, 0.1F);
      assertFalse(boolean0);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals((-1.0F), wall0.getHeight(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-1.0F), wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals(0.5F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(2.236068F, wall0.getLength(), 0.01F);
      assertEquals(1.0F, wall0.getYStart(), 0.01F);
      assertEquals(1.0F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals(2.236068F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      
      Float float0 = new Float((double) 2315.428F);
      assertNotNull(float0);
      assertEquals(2315.428F, (float)float0, 0.01F);
      
      float float1 = Float.sum(0.0F, (-1507.9714F));
      assertEquals((-1507.9714F), float1, 0.01F);
      
      wall0.setArcExtent(float0);
      assertNotEquals((float)float0, (float)float1, 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.46288657F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-1.0F), wall0.getHeight(), 0.01F);
      assertEquals((-0.018556718F), wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertFalse(wall0.isTrapezoidal());
      assertEquals(2590.5095F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(2315.428F, wall0.getArcExtent(), 0.01F);
      assertEquals((-1.0F), wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals(1.0F, wall0.getYStart(), 0.01F);
      assertEquals(1.0F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals(2.236068F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getRightSideColor());
      
      boolean boolean1 = wall0.containsWallStartAt(0.0F, 2315.428F, 0.0F);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.46288657F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-1.0F), wall0.getHeight(), 0.01F);
      assertEquals((-0.018556718F), wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertFalse(wall0.isTrapezoidal());
      assertEquals(2590.5095F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(2315.428F, wall0.getArcExtent(), 0.01F);
      assertEquals((-1.0F), wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals(1.0F, wall0.getYStart(), 0.01F);
      assertEquals(1.0F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals(2.236068F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getRightSideColor());
      
      float float2 = wall0.getXArcCircleCenter();
      assertNotEquals(float2, float1, 0.01F);
      assertEquals((-0.018556718F), float2, 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.46288657F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-1.0F), wall0.getHeight(), 0.01F);
      assertEquals((-0.018556718F), wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertFalse(wall0.isTrapezoidal());
      assertEquals(2590.5095F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(2315.428F, wall0.getArcExtent(), 0.01F);
      assertEquals((-1.0F), wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals(1.0F, wall0.getYStart(), 0.01F);
      assertEquals(1.0F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals(2.236068F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getRightSideColor());
      
      wall0.setYStart((-1.0F));
      assertNull(wall0.getLeftSideColor());
      assertEquals((-1.0F), wall0.getHeight(), 0.01F);
      assertEquals(0.018556718F, wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertFalse(wall0.isTrapezoidal());
      assertEquals(2590.5095F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(2315.428F, wall0.getArcExtent(), 0.01F);
      assertEquals((-1.0F), wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals((-1.0F), wall0.getYStart(), 0.01F);
      assertEquals(1.0F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals(2.236068F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals((-0.5371134F), wall0.getYArcCircleCenter(), 0.01F);
      
      Integer integer0 = wall0.getLeftSideColor();
      assertNull(integer0);
      assertNull(wall0.getLeftSideColor());
      assertEquals((-1.0F), wall0.getHeight(), 0.01F);
      assertEquals(0.018556718F, wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertFalse(wall0.isTrapezoidal());
      assertEquals(2590.5095F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(2315.428F, wall0.getArcExtent(), 0.01F);
      assertEquals((-1.0F), wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals((-1.0F), wall0.getYStart(), 0.01F);
      assertEquals(1.0F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals(2.236068F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals((-0.5371134F), wall0.getYArcCircleCenter(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test204()  throws Throwable  {
      Wall wall0 = new Wall(0.0F, 0.0F, 0.0F, 0.0F, 0.0F);
      assertNotNull(wall0);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getHeight());
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      
      boolean boolean0 = wall0.containsWallStartAt(0.0F, 0.0F, 0.0F);
      assertFalse(boolean0);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getHeight());
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      
      wall0.setWallAtStart(wall0);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getHeight());
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      
      boolean boolean1 = wall0.containsPoint(0.0F, 0.0F, 0.0F);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getHeight());
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      
      Wall wall1 = new Wall(0.0F, 4043.4763F, 0.0F, 3943.0F, 155.2F, 4043.4763F);
      assertFalse(wall1.equals((Object)wall0));
      assertNotNull(wall1);
      assertEquals(155.2F, wall1.getThickness(), 0.01F);
      assertEquals(0.0F, wall1.getXEnd(), 0.01F);
      assertEquals(4043.4763F, wall1.getHeight(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals(100.47632F, wall1.getLength(), 0.01F);
      assertEquals(0.0F, wall1.getXStart(), 0.01F);
      assertEquals(3943.0F, wall1.getYEnd(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals(0.0F, wall1.getXArcCircleCenter(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals(4043.4763F, wall1.getYStart(), 0.01F);
      assertEquals(3993.2383F, wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(100.47632F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      
      boolean boolean2 = wall1.containsWallEndAt(2213.745F, 155.2F, 1.0F);
      assertFalse(wall1.equals((Object)wall0));
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      assertNotSame(wall1, wall0);
      assertFalse(boolean2);
      assertEquals(155.2F, wall1.getThickness(), 0.01F);
      assertEquals(0.0F, wall1.getXEnd(), 0.01F);
      assertEquals(4043.4763F, wall1.getHeight(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals(100.47632F, wall1.getLength(), 0.01F);
      assertEquals(0.0F, wall1.getXStart(), 0.01F);
      assertEquals(3943.0F, wall1.getYEnd(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals(0.0F, wall1.getXArcCircleCenter(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals(4043.4763F, wall1.getYStart(), 0.01F);
      assertEquals(3993.2383F, wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(100.47632F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      
      wall0.setWallAtStart(wall1);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall1.equals((Object)wall0));
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getHeight());
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(155.2F, wall1.getThickness(), 0.01F);
      assertEquals(0.0F, wall1.getXEnd(), 0.01F);
      assertEquals(4043.4763F, wall1.getHeight(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals(100.47632F, wall1.getLength(), 0.01F);
      assertEquals(0.0F, wall1.getXStart(), 0.01F);
      assertEquals(3943.0F, wall1.getYEnd(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals(0.0F, wall1.getXArcCircleCenter(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals(4043.4763F, wall1.getYStart(), 0.01F);
      assertEquals(3993.2383F, wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(100.47632F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      
      boolean boolean3 = wall1.containsWallStartAt(4043.4763F, 0.0F, 4043.4763F);
      assertFalse(wall1.equals((Object)wall0));
      assertFalse(boolean3 == boolean0);
      assertFalse(boolean3 == boolean1);
      assertFalse(boolean3 == boolean2);
      assertNotSame(wall1, wall0);
      assertTrue(boolean3);
      assertEquals(155.2F, wall1.getThickness(), 0.01F);
      assertEquals(0.0F, wall1.getXEnd(), 0.01F);
      assertEquals(4043.4763F, wall1.getHeight(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals(100.47632F, wall1.getLength(), 0.01F);
      assertEquals(0.0F, wall1.getXStart(), 0.01F);
      assertEquals(3943.0F, wall1.getYEnd(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals(0.0F, wall1.getXArcCircleCenter(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals(4043.4763F, wall1.getYStart(), 0.01F);
      assertEquals(3993.2383F, wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(100.47632F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      
      wall1.setWallAtEnd(wall0);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall1.equals((Object)wall0));
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getHeight());
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(155.2F, wall1.getThickness(), 0.01F);
      assertEquals(0.0F, wall1.getXEnd(), 0.01F);
      assertEquals(4043.4763F, wall1.getHeight(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals(100.47632F, wall1.getLength(), 0.01F);
      assertEquals(0.0F, wall1.getXStart(), 0.01F);
      assertEquals(3943.0F, wall1.getYEnd(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals(0.0F, wall1.getXArcCircleCenter(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals(4043.4763F, wall1.getYStart(), 0.01F);
      assertEquals(3993.2383F, wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(100.47632F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      
      Wall wall2 = wall1.clone();
      assertFalse(wall1.equals((Object)wall0));
      assertFalse(wall2.equals((Object)wall1));
      assertFalse(wall2.equals((Object)wall0));
      assertNotNull(wall2);
      assertNotSame(wall1, wall0);
      assertNotSame(wall1, wall2);
      assertNotSame(wall2, wall1);
      assertNotSame(wall2, wall0);
      assertEquals(155.2F, wall1.getThickness(), 0.01F);
      assertEquals(0.0F, wall1.getXEnd(), 0.01F);
      assertEquals(4043.4763F, wall1.getHeight(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals(100.47632F, wall1.getLength(), 0.01F);
      assertEquals(0.0F, wall1.getXStart(), 0.01F);
      assertEquals(3943.0F, wall1.getYEnd(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals(0.0F, wall1.getXArcCircleCenter(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals(4043.4763F, wall1.getYStart(), 0.01F);
      assertEquals(3993.2383F, wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(100.47632F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertEquals(3993.2383F, wall2.getYArcCircleCenter(), 0.01F);
      assertNull(wall2.getArcExtent());
      assertNull(wall2.getRightSideColor());
      assertNull(wall2.getHeightAtEnd());
      assertEquals(100.47632F, wall2.getLength(), 0.01F);
      assertNull(wall2.getLeftSideColor());
      assertEquals(0.0F, wall2.getLeftSideShininess(), 0.01F);
      assertEquals(100.47632F, wall2.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(155.2F, wall2.getThickness(), 0.01F);
      assertEquals(4043.4763F, wall2.getYStart(), 0.01F);
      assertEquals(0.0F, wall2.getXEnd(), 0.01F);
      assertFalse(wall2.isTrapezoidal());
      assertEquals(0.0F, wall2.getXStart(), 0.01F);
      assertEquals(0.0F, wall2.getXArcCircleCenter(), 0.01F);
      assertEquals(4043.4763F, wall2.getHeight(), 0.01F);
      assertEquals(3943.0F, wall2.getYEnd(), 0.01F);
      assertEquals(0.0F, wall2.getRightSideShininess(), 0.01F);
      
      float float0 = wall2.getYArcCircleCenter();
      assertFalse(wall1.equals((Object)wall0));
      assertFalse(wall1.equals((Object)wall2));
      assertFalse(wall2.equals((Object)wall1));
      assertFalse(wall2.equals((Object)wall0));
      assertNotSame(wall1, wall0);
      assertNotSame(wall1, wall2);
      assertNotSame(wall2, wall1);
      assertNotSame(wall2, wall0);
      assertEquals(3993.2383F, float0, 0.01F);
      assertEquals(155.2F, wall1.getThickness(), 0.01F);
      assertEquals(0.0F, wall1.getXEnd(), 0.01F);
      assertEquals(4043.4763F, wall1.getHeight(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals(100.47632F, wall1.getLength(), 0.01F);
      assertEquals(0.0F, wall1.getXStart(), 0.01F);
      assertEquals(3943.0F, wall1.getYEnd(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals(0.0F, wall1.getXArcCircleCenter(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals(4043.4763F, wall1.getYStart(), 0.01F);
      assertEquals(3993.2383F, wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(100.47632F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertEquals(3993.2383F, wall2.getYArcCircleCenter(), 0.01F);
      assertNull(wall2.getArcExtent());
      assertNull(wall2.getRightSideColor());
      assertNull(wall2.getHeightAtEnd());
      assertEquals(100.47632F, wall2.getLength(), 0.01F);
      assertNull(wall2.getLeftSideColor());
      assertEquals(0.0F, wall2.getLeftSideShininess(), 0.01F);
      assertEquals(100.47632F, wall2.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(155.2F, wall2.getThickness(), 0.01F);
      assertEquals(4043.4763F, wall2.getYStart(), 0.01F);
      assertEquals(0.0F, wall2.getXEnd(), 0.01F);
      assertFalse(wall2.isTrapezoidal());
      assertEquals(0.0F, wall2.getXStart(), 0.01F);
      assertEquals(0.0F, wall2.getXArcCircleCenter(), 0.01F);
      assertEquals(4043.4763F, wall2.getHeight(), 0.01F);
      assertEquals(3943.0F, wall2.getYEnd(), 0.01F);
      assertEquals(0.0F, wall2.getRightSideShininess(), 0.01F);
      
      Float float1 = wall0.getHeightAtEnd();
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall0.equals((Object)wall2));
      assertNull(float1);
      assertNotSame(wall0, wall1);
      assertNotSame(wall0, wall2);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getHeight());
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      
      wall2.setWallAtEnd(wall0);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall0.equals((Object)wall2));
      assertFalse(wall1.equals((Object)wall0));
      assertFalse(wall1.equals((Object)wall2));
      assertFalse(wall2.equals((Object)wall1));
      assertFalse(wall2.equals((Object)wall0));
      assertNotSame(wall0, wall1);
      assertNotSame(wall0, wall2);
      assertNotSame(wall1, wall0);
      assertNotSame(wall1, wall2);
      assertNotSame(wall2, wall1);
      assertNotSame(wall2, wall0);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getHeight());
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(155.2F, wall1.getThickness(), 0.01F);
      assertEquals(0.0F, wall1.getXEnd(), 0.01F);
      assertEquals(4043.4763F, wall1.getHeight(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals(100.47632F, wall1.getLength(), 0.01F);
      assertEquals(0.0F, wall1.getXStart(), 0.01F);
      assertEquals(3943.0F, wall1.getYEnd(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals(0.0F, wall1.getXArcCircleCenter(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals(4043.4763F, wall1.getYStart(), 0.01F);
      assertEquals(3993.2383F, wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(100.47632F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertEquals(3993.2383F, wall2.getYArcCircleCenter(), 0.01F);
      assertNull(wall2.getArcExtent());
      assertNull(wall2.getRightSideColor());
      assertNull(wall2.getHeightAtEnd());
      assertEquals(100.47632F, wall2.getLength(), 0.01F);
      assertNull(wall2.getLeftSideColor());
      assertEquals(0.0F, wall2.getLeftSideShininess(), 0.01F);
      assertEquals(100.47632F, wall2.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(155.2F, wall2.getThickness(), 0.01F);
      assertEquals(4043.4763F, wall2.getYStart(), 0.01F);
      assertEquals(0.0F, wall2.getXEnd(), 0.01F);
      assertFalse(wall2.isTrapezoidal());
      assertEquals(0.0F, wall2.getXStart(), 0.01F);
      assertEquals(0.0F, wall2.getXArcCircleCenter(), 0.01F);
      assertEquals(4043.4763F, wall2.getHeight(), 0.01F);
      assertEquals(3943.0F, wall2.getYEnd(), 0.01F);
      assertEquals(0.0F, wall2.getRightSideShininess(), 0.01F);
      
      float float2 = wall1.getStartPointToEndPointDistance();
      assertFalse(wall1.equals((Object)wall0));
      assertFalse(wall1.equals((Object)wall2));
      assertNotEquals(float2, float0, 0.01F);
      assertNotSame(wall1, wall0);
      assertNotSame(wall1, wall2);
      assertEquals(100.47632F, float2, 0.01F);
      assertEquals(155.2F, wall1.getThickness(), 0.01F);
      assertEquals(0.0F, wall1.getXEnd(), 0.01F);
      assertEquals(4043.4763F, wall1.getHeight(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals(100.47632F, wall1.getLength(), 0.01F);
      assertEquals(0.0F, wall1.getXStart(), 0.01F);
      assertEquals(3943.0F, wall1.getYEnd(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals(0.0F, wall1.getXArcCircleCenter(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals(4043.4763F, wall1.getYStart(), 0.01F);
      assertEquals(3993.2383F, wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(100.47632F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      
      TextureImage textureImage0 = wall1.getPattern();
      assertFalse(wall1.equals((Object)wall0));
      assertFalse(wall1.equals((Object)wall2));
      assertNull(textureImage0);
      assertNotSame(wall1, wall0);
      assertNotSame(wall1, wall2);
      assertEquals(155.2F, wall1.getThickness(), 0.01F);
      assertEquals(0.0F, wall1.getXEnd(), 0.01F);
      assertEquals(4043.4763F, wall1.getHeight(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals(100.47632F, wall1.getLength(), 0.01F);
      assertEquals(0.0F, wall1.getXStart(), 0.01F);
      assertEquals(3943.0F, wall1.getYEnd(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals(0.0F, wall1.getXArcCircleCenter(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals(4043.4763F, wall1.getYStart(), 0.01F);
      assertEquals(3993.2383F, wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(100.47632F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      
      float float3 = wall0.getXEnd();
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall0.equals((Object)wall2));
      assertNotEquals(float3, float2, 0.01F);
      assertNotEquals(float3, float0, 0.01F);
      assertNotSame(wall0, wall1);
      assertNotSame(wall0, wall2);
      assertEquals(0.0F, float3, 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getHeight());
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test205()  throws Throwable  {
      Wall wall0 = new Wall(0.01F, 0.01F, 0.01F, 1.0F, 0.01F, 0.01F);
      assertNotNull(wall0);
      assertEquals(0.01F, wall0.getXStart(), 0.01F);
      assertEquals(0.01F, wall0.getThickness(), 0.01F);
      assertEquals(0.01F, wall0.getYStart(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals(1.0F, wall0.getYEnd(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertEquals(0.99F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.01F, wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.505F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.01F, wall0.getHeight(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.01F, wall0.getXEnd(), 0.01F);
      assertEquals(0.99F, wall0.getLength(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertFalse(wall0.isTrapezoidal());
      
      float float0 = Float.sum(0.01F, 0.0F);
      assertEquals(0.01F, float0, 0.01F);
      
      Float float1 = new Float((-1.0F));
      assertNotEquals((float)float1, (float)float0, 0.01F);
      assertNotNull(float1);
      assertEquals((-1.0F), (float)float1, 0.01F);
      
      wall0.setHeightAtEnd(float1);
      assertNotEquals((float)float1, (float)float0, 0.01F);
      assertEquals(0.01F, wall0.getXStart(), 0.01F);
      assertEquals(0.01F, wall0.getThickness(), 0.01F);
      assertEquals(0.01F, wall0.getYStart(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals(1.0F, wall0.getYEnd(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertEquals(0.99F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.01F, wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertTrue(wall0.isTrapezoidal());
      assertEquals(0.505F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.01F, wall0.getHeight(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.01F, wall0.getXEnd(), 0.01F);
      assertEquals(0.99F, wall0.getLength(), 0.01F);
      assertEquals((-1.0F), wall0.getHeightAtEnd(), 0.01F);
      
      float float2 = wall0.getThickness();
      assertEquals(float2, float0, 0.01F);
      assertEquals(0.01F, float2, 0.01F);
      assertEquals(0.01F, wall0.getXStart(), 0.01F);
      assertEquals(0.01F, wall0.getThickness(), 0.01F);
      assertEquals(0.01F, wall0.getYStart(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals(1.0F, wall0.getYEnd(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertEquals(0.99F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.01F, wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertTrue(wall0.isTrapezoidal());
      assertEquals(0.505F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.01F, wall0.getHeight(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.01F, wall0.getXEnd(), 0.01F);
      assertEquals(0.99F, wall0.getLength(), 0.01F);
      assertEquals((-1.0F), wall0.getHeightAtEnd(), 0.01F);
      
      wall0.setYEnd(0.01F);
      assertEquals(0.01F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.01F, wall0.getXStart(), 0.01F);
      assertEquals(0.01F, wall0.getThickness(), 0.01F);
      assertEquals(0.01F, wall0.getYStart(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.01F, wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertTrue(wall0.isTrapezoidal());
      assertEquals(0.01F, wall0.getHeight(), 0.01F);
      assertEquals(0.01F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.01F, wall0.getXEnd(), 0.01F);
      assertEquals((-1.0F), wall0.getHeightAtEnd(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      
      wall0.setRightSideColor((Integer) null);
      assertEquals(0.01F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.01F, wall0.getXStart(), 0.01F);
      assertEquals(0.01F, wall0.getThickness(), 0.01F);
      assertEquals(0.01F, wall0.getYStart(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.01F, wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertTrue(wall0.isTrapezoidal());
      assertEquals(0.01F, wall0.getHeight(), 0.01F);
      assertEquals(0.01F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.01F, wall0.getXEnd(), 0.01F);
      assertEquals((-1.0F), wall0.getHeightAtEnd(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      
      boolean boolean0 = wall0.intersectsRectangle(1.0F, 1.0F, 0.01F, 0.01F);
      assertFalse(boolean0);
      assertEquals(0.01F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.01F, wall0.getXStart(), 0.01F);
      assertEquals(0.01F, wall0.getThickness(), 0.01F);
      assertEquals(0.01F, wall0.getYStart(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.01F, wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertTrue(wall0.isTrapezoidal());
      assertEquals(0.01F, wall0.getHeight(), 0.01F);
      assertEquals(0.01F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.01F, wall0.getXEnd(), 0.01F);
      assertEquals((-1.0F), wall0.getHeightAtEnd(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      
      Integer integer0 = new Integer(46);
      assertNotNull(integer0);
      assertEquals(46, (int)integer0);
      
      Integer integer1 = new Integer((-445));
      assertFalse(integer1.equals((Object)integer0));
      assertNotNull(integer1);
      assertEquals((-445), (int)integer1);
      
      wall0.setLeftSideColor(integer1);
      assertFalse(integer1.equals((Object)integer0));
      assertEquals(0.01F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.01F, wall0.getXStart(), 0.01F);
      assertEquals(0.01F, wall0.getThickness(), 0.01F);
      assertEquals(0.01F, wall0.getYStart(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.01F, wall0.getXArcCircleCenter(), 0.01F);
      assertTrue(wall0.isTrapezoidal());
      assertEquals((-445), (int)wall0.getLeftSideColor());
      assertEquals(0.01F, wall0.getHeight(), 0.01F);
      assertEquals(0.01F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.01F, wall0.getXEnd(), 0.01F);
      assertEquals((-1.0F), wall0.getHeightAtEnd(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      
      wall0.setHeightAtEnd(float1);
      assertNotEquals((float)float1, (float)float0, 0.01F);
      assertNotEquals((float)float1, (float)float2, 0.01F);
      assertEquals(0.01F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.01F, wall0.getXStart(), 0.01F);
      assertEquals(0.01F, wall0.getThickness(), 0.01F);
      assertEquals(0.01F, wall0.getYStart(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.01F, wall0.getXArcCircleCenter(), 0.01F);
      assertTrue(wall0.isTrapezoidal());
      assertEquals((-445), (int)wall0.getLeftSideColor());
      assertEquals(0.01F, wall0.getHeight(), 0.01F);
      assertEquals(0.01F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.01F, wall0.getXEnd(), 0.01F);
      assertEquals((-1.0F), wall0.getHeightAtEnd(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test206()  throws Throwable  {
      Wall wall0 = new Wall((-4215.8525F), (-4215.8525F), (-4215.8525F), (-4215.8525F), (-4215.8525F));
      assertNotNull(wall0);
      assertEquals((-4215.8525F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-4215.8525F), wall0.getXStart(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-4215.8525F), wall0.getYStart(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-4215.8525F), wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals((-4215.8525F), wall0.getXEnd(), 0.01F);
      assertEquals((-4215.8525F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals((-4215.8525F), wall0.getYEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertNull(wall0.getHeight());
      
      Float float0 = new Float((double) (-4215.8525F));
      assertNotNull(float0);
      assertEquals((-4215.8525F), (float)float0, 0.01F);
      
      boolean boolean0 = Float.isFinite(613.716F);
      assertTrue(boolean0);
      
      wall0.setArcExtent(float0);
      assertEquals((-4215.8525F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-4215.8525F), wall0.getXStart(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-4215.8525F), wall0.getYStart(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-4215.8525F), wall0.getArcExtent(), 0.01F);
      assertEquals((-4215.8525F), wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals((-4215.8525F), wall0.getXEnd(), 0.01F);
      assertEquals((-4215.8525F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals((-4215.8525F), wall0.getYEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertNull(wall0.getHeight());
      
      float float1 = Float.sum(3236.7322F, 0.0F);
      assertEquals(3236.7322F, float1, 0.01F);
      
      int int0 = Float.floatToIntBits(0.0F);
      assertEquals(0, int0);
      
      int int1 = Float.floatToIntBits(0);
      assertTrue(int1 == int0);
      assertEquals(0, int1);
      
      wall0.setArcExtent((Float) 0.0F);
      assertEquals((-4215.8525F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-4215.8525F), wall0.getXStart(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-4215.8525F), wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getArcExtent(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-4215.8525F), wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals((-4215.8525F), wall0.getXEnd(), 0.01F);
      assertEquals((-4215.8525F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals((-4215.8525F), wall0.getYEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertNull(wall0.getHeight());
      
      boolean boolean1 = wall0.containsWallStartAt(0.0F, 9.298907F, 3236.7322F);
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      assertEquals((-4215.8525F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-4215.8525F), wall0.getXStart(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-4215.8525F), wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getArcExtent(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-4215.8525F), wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals((-4215.8525F), wall0.getXEnd(), 0.01F);
      assertEquals((-4215.8525F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals((-4215.8525F), wall0.getYEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertNull(wall0.getHeight());
      
      Wall wall1 = new Wall(0.0F, 0.0F, 1492.601F, 0.0F, 3236.7322F, (-1489.9F));
      assertFalse(wall1.equals((Object)wall0));
      assertNotNull(wall1);
      assertEquals(1492.601F, wall1.getLength(), 0.01F);
      assertEquals(746.3005F, wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall1.getYStart(), 0.01F);
      assertEquals((-1489.9F), wall1.getHeight(), 0.01F);
      assertEquals(0.0F, wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(1492.601F, wall1.getXEnd(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall1.getXStart(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertNull(wall1.getLeftSideColor());
      assertEquals(0.0F, wall1.getYEnd(), 0.01F);
      assertEquals(3236.7322F, wall1.getThickness(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertNull(wall1.getHeightAtEnd());
      assertEquals(1492.601F, wall1.getStartPointToEndPointDistance(), 0.01F);
      
      float float2 = wall1.getXArcCircleCenter();
      assertFalse(wall1.equals((Object)wall0));
      assertNotEquals(float2, float1, 0.01F);
      assertNotSame(wall1, wall0);
      assertEquals(746.3005F, float2, 0.01F);
      assertEquals(1492.601F, wall1.getLength(), 0.01F);
      assertEquals(746.3005F, wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall1.getYStart(), 0.01F);
      assertEquals((-1489.9F), wall1.getHeight(), 0.01F);
      assertEquals(0.0F, wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(1492.601F, wall1.getXEnd(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall1.getXStart(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertNull(wall1.getLeftSideColor());
      assertEquals(0.0F, wall1.getYEnd(), 0.01F);
      assertEquals(3236.7322F, wall1.getThickness(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertNull(wall1.getHeightAtEnd());
      assertEquals(1492.601F, wall1.getStartPointToEndPointDistance(), 0.01F);
      
      wall1.setYStart((-4215.8525F));
      assertFalse(wall1.equals((Object)wall0));
      assertNotSame(wall1, wall0);
      assertEquals(746.3005F, wall1.getXArcCircleCenter(), 0.01F);
      assertEquals((-1489.9F), wall1.getHeight(), 0.01F);
      assertEquals((-4215.8525F), wall1.getYStart(), 0.01F);
      assertEquals((-2107.9263F), wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(1492.601F, wall1.getXEnd(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals(4472.278F, wall1.getLength(), 0.01F);
      assertEquals(0.0F, wall1.getXStart(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertNull(wall1.getLeftSideColor());
      assertEquals(0.0F, wall1.getYEnd(), 0.01F);
      assertEquals(3236.7322F, wall1.getThickness(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertNull(wall1.getHeightAtEnd());
      assertEquals(4472.278F, wall1.getStartPointToEndPointDistance(), 0.01F);
      
      HomeTexture homeTexture0 = wall0.getRightSideTexture();
      assertFalse(wall0.equals((Object)wall1));
      assertNull(homeTexture0);
      assertNotSame(wall0, wall1);
      assertEquals((-4215.8525F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-4215.8525F), wall0.getXStart(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-4215.8525F), wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getArcExtent(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-4215.8525F), wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals((-4215.8525F), wall0.getXEnd(), 0.01F);
      assertEquals((-4215.8525F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals((-4215.8525F), wall0.getYEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertNull(wall0.getHeight());
      
      Integer integer0 = new Integer(0);
      assertTrue(integer0.equals((Object)int0));
      assertTrue(integer0.equals((Object)int1));
      assertNotNull(integer0);
      assertEquals(0, (int)integer0);
      
      Integer integer1 = new Integer((-1119));
      assertFalse(integer1.equals((Object)int0));
      assertFalse(integer1.equals((Object)int1));
      assertFalse(integer1.equals((Object)integer0));
      assertNotNull(integer1);
      assertEquals((-1119), (int)integer1);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      boolean boolean2 = integer1.equals(object0);
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      assertFalse(integer1.equals((Object)int0));
      assertFalse(integer1.equals((Object)int1));
      assertFalse(integer1.equals((Object)integer0));
      assertFalse(boolean2);
      
      wall1.setLeftSideColor(integer1);
      assertFalse(wall1.equals((Object)wall0));
      assertFalse(integer1.equals((Object)int0));
      assertFalse(integer1.equals((Object)int1));
      assertFalse(integer1.equals((Object)integer0));
      assertNotSame(wall1, wall0);
      assertEquals(746.3005F, wall1.getXArcCircleCenter(), 0.01F);
      assertEquals((-1489.9F), wall1.getHeight(), 0.01F);
      assertEquals((-4215.8525F), wall1.getYStart(), 0.01F);
      assertEquals((-2107.9263F), wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(1492.601F, wall1.getXEnd(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals(4472.278F, wall1.getLength(), 0.01F);
      assertEquals(0.0F, wall1.getXStart(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals((-1119), (int)wall1.getLeftSideColor());
      assertEquals(0.0F, wall1.getYEnd(), 0.01F);
      assertEquals(3236.7322F, wall1.getThickness(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertNull(wall1.getHeightAtEnd());
      assertEquals(4472.278F, wall1.getStartPointToEndPointDistance(), 0.01F);
      
      Wall.Property[] wall_PropertyArray0 = Wall.Property.values();
      assertNotNull(wall_PropertyArray0);
      assertEquals(18, wall_PropertyArray0.length);
      
      Wall.Property[] wall_PropertyArray1 = Wall.Property.values();
      assertFalse(wall_PropertyArray1.equals((Object)wall_PropertyArray0));
      assertNotNull(wall_PropertyArray1);
      assertEquals(18, wall_PropertyArray1.length);
      assertNotSame(wall_PropertyArray1, wall_PropertyArray0);
  }

  @Test(timeout = 4000)
  public void test207()  throws Throwable  {
      Wall wall0 = new Wall(0.01F, 0.01F, 0.01F, 1.0F, 0.01F, 0.01F);
      assertNotNull(wall0);
      assertEquals(0.01F, wall0.getXEnd(), 0.01F);
      assertEquals(1.0F, wall0.getYEnd(), 0.01F);
      assertEquals(0.505F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.01F, wall0.getYStart(), 0.01F);
      assertEquals(0.01F, wall0.getXStart(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.01F, wall0.getThickness(), 0.01F);
      assertEquals(0.99F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.01F, wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.01F, wall0.getHeight(), 0.01F);
      assertEquals(0.99F, wall0.getLength(), 0.01F);
      
      Wall wall1 = new Wall(3648.7322F, 1.0F, 155.2F, 155.2F, 155.2F, 622.811F);
      assertFalse(wall1.equals((Object)wall0));
      assertNotNull(wall1);
      assertEquals(3496.9336F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(622.811F, wall1.getHeight(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals(3648.7322F, wall1.getXStart(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals(155.2F, wall1.getYEnd(), 0.01F);
      assertEquals(155.2F, wall1.getXEnd(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals(1.0F, wall1.getYStart(), 0.01F);
      assertEquals(78.1F, wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(155.2F, wall1.getThickness(), 0.01F);
      assertEquals(1901.9661F, wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(3496.9336F, wall1.getLength(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      
      wall1.setWallAtEnd(wall0);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall1.equals((Object)wall0));
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      assertEquals(0.01F, wall0.getXEnd(), 0.01F);
      assertEquals(1.0F, wall0.getYEnd(), 0.01F);
      assertEquals(0.505F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.01F, wall0.getYStart(), 0.01F);
      assertEquals(0.01F, wall0.getXStart(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.01F, wall0.getThickness(), 0.01F);
      assertEquals(0.99F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.01F, wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.01F, wall0.getHeight(), 0.01F);
      assertEquals(0.99F, wall0.getLength(), 0.01F);
      assertEquals(3496.9336F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(622.811F, wall1.getHeight(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals(3648.7322F, wall1.getXStart(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals(155.2F, wall1.getYEnd(), 0.01F);
      assertEquals(155.2F, wall1.getXEnd(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals(1.0F, wall1.getYStart(), 0.01F);
      assertEquals(78.1F, wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(155.2F, wall1.getThickness(), 0.01F);
      assertEquals(1901.9661F, wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(3496.9336F, wall1.getLength(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      
      wall0.setWallAtEnd(wall1);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall1.equals((Object)wall0));
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      assertEquals(0.01F, wall0.getXEnd(), 0.01F);
      assertEquals(1.0F, wall0.getYEnd(), 0.01F);
      assertEquals(0.505F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.01F, wall0.getYStart(), 0.01F);
      assertEquals(0.01F, wall0.getXStart(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.01F, wall0.getThickness(), 0.01F);
      assertEquals(0.99F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.01F, wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.01F, wall0.getHeight(), 0.01F);
      assertEquals(0.99F, wall0.getLength(), 0.01F);
      assertEquals(3496.9336F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(622.811F, wall1.getHeight(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals(3648.7322F, wall1.getXStart(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals(155.2F, wall1.getYEnd(), 0.01F);
      assertEquals(155.2F, wall1.getXEnd(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals(1.0F, wall1.getYStart(), 0.01F);
      assertEquals(78.1F, wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(155.2F, wall1.getThickness(), 0.01F);
      assertEquals(1901.9661F, wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(3496.9336F, wall1.getLength(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      
      wall0.setWallAtEnd(wall1);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall1.equals((Object)wall0));
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      assertEquals(0.01F, wall0.getXEnd(), 0.01F);
      assertEquals(1.0F, wall0.getYEnd(), 0.01F);
      assertEquals(0.505F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.01F, wall0.getYStart(), 0.01F);
      assertEquals(0.01F, wall0.getXStart(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.01F, wall0.getThickness(), 0.01F);
      assertEquals(0.99F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.01F, wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.01F, wall0.getHeight(), 0.01F);
      assertEquals(0.99F, wall0.getLength(), 0.01F);
      assertEquals(3496.9336F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(622.811F, wall1.getHeight(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals(3648.7322F, wall1.getXStart(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals(155.2F, wall1.getYEnd(), 0.01F);
      assertEquals(155.2F, wall1.getXEnd(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals(1.0F, wall1.getYStart(), 0.01F);
      assertEquals(78.1F, wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(155.2F, wall1.getThickness(), 0.01F);
      assertEquals(1901.9661F, wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(3496.9336F, wall1.getLength(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      
      Float float0 = new Float(622.811F);
      assertNotNull(float0);
      assertEquals(622.811F, (float)float0, 0.01F);
      
      Float float1 = new Float(155.2F);
      assertNotEquals((float)float1, (float)float0, 0.01F);
      assertNotNull(float1);
      assertEquals(155.2F, (float)float1, 0.01F);
      
      wall0.setArcExtent(float1);
      assertFalse(wall0.equals((Object)wall1));
      assertNotEquals((float)float1, (float)float0, 0.01F);
      assertNotSame(wall0, wall1);
      assertEquals(0.01F, wall0.getXEnd(), 0.01F);
      assertEquals(1.0F, wall0.getYEnd(), 0.01F);
      assertEquals(0.505F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.01F, wall0.getYStart(), 0.01F);
      assertEquals(0.01F, wall0.getXStart(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.01F, wall0.getThickness(), 0.01F);
      assertEquals(0.99F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(155.2F, wall0.getArcExtent(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(95.14389F, wall0.getLength(), 0.01F);
      assertEquals(0.37165412F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals(0.01F, wall0.getHeight(), 0.01F);
      
      float[][] floatArray0 = wall1.getPoints();
      assertFalse(wall1.equals((Object)wall0));
      assertNotNull(floatArray0);
      assertEquals(4, floatArray0.length);
      assertNotSame(wall1, wall0);
      assertEquals(3496.9336F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(622.811F, wall1.getHeight(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals(3648.7322F, wall1.getXStart(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals(155.2F, wall1.getYEnd(), 0.01F);
      assertEquals(155.2F, wall1.getXEnd(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals(1.0F, wall1.getYStart(), 0.01F);
      assertEquals(78.1F, wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(155.2F, wall1.getThickness(), 0.01F);
      assertEquals(1901.9661F, wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(3496.9336F, wall1.getLength(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      
      HomeTexture homeTexture0 = wall1.getRightSideTexture();
      assertFalse(wall1.equals((Object)wall0));
      assertNull(homeTexture0);
      assertNotSame(wall1, wall0);
      assertEquals(3496.9336F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(622.811F, wall1.getHeight(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals(3648.7322F, wall1.getXStart(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals(155.2F, wall1.getYEnd(), 0.01F);
      assertEquals(155.2F, wall1.getXEnd(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals(1.0F, wall1.getYStart(), 0.01F);
      assertEquals(78.1F, wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(155.2F, wall1.getThickness(), 0.01F);
      assertEquals(1901.9661F, wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(3496.9336F, wall1.getLength(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      
      wall1.setRightSideTexture((HomeTexture) null);
      assertFalse(wall1.equals((Object)wall0));
      assertNotSame(wall1, wall0);
      assertEquals(3496.9336F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(622.811F, wall1.getHeight(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals(3648.7322F, wall1.getXStart(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals(155.2F, wall1.getYEnd(), 0.01F);
      assertEquals(155.2F, wall1.getXEnd(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals(1.0F, wall1.getYStart(), 0.01F);
      assertEquals(78.1F, wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(155.2F, wall1.getThickness(), 0.01F);
      assertEquals(1901.9661F, wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(3496.9336F, wall1.getLength(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
  }

  @Test(timeout = 4000)
  public void test208()  throws Throwable  {
      float float0 = Float.min((-2001.9872F), (-2001.9872F));
      assertEquals((-2001.9872F), float0, 0.01F);
      
      Wall wall0 = new Wall((-2001.9872F), (-2001.9872F), (-2001.9872F), (-2001.9872F), (-2001.9872F), (-2001.9872F));
      assertNotNull(wall0);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-2001.9872F), wall0.getHeight(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-2001.9872F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals((-2001.9872F), wall0.getYStart(), 0.01F);
      assertEquals((-2001.9872F), wall0.getXStart(), 0.01F);
      assertEquals((-2001.9872F), wall0.getXEnd(), 0.01F);
      assertEquals((-2001.9872F), wall0.getYEnd(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals((-2001.9872F), wall0.getThickness(), 0.01F);
      assertEquals((-2001.9872F), wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      
      Integer integer0 = new Integer(11);
      assertNotNull(integer0);
      assertEquals(11, (int)integer0);
      
      wall0.setLeftSideColor(integer0);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-2001.9872F), wall0.getHeight(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-2001.9872F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals((-2001.9872F), wall0.getYStart(), 0.01F);
      assertEquals((-2001.9872F), wall0.getXStart(), 0.01F);
      assertEquals((-2001.9872F), wall0.getXEnd(), 0.01F);
      assertEquals(11, (int)wall0.getLeftSideColor());
      assertEquals((-2001.9872F), wall0.getYEnd(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals((-2001.9872F), wall0.getThickness(), 0.01F);
      assertEquals((-2001.9872F), wall0.getYArcCircleCenter(), 0.01F);
      
      wall0.setLeftSideColor(integer0);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-2001.9872F), wall0.getHeight(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-2001.9872F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals((-2001.9872F), wall0.getYStart(), 0.01F);
      assertEquals((-2001.9872F), wall0.getXStart(), 0.01F);
      assertEquals((-2001.9872F), wall0.getXEnd(), 0.01F);
      assertEquals(11, (int)wall0.getLeftSideColor());
      assertEquals((-2001.9872F), wall0.getYEnd(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals((-2001.9872F), wall0.getThickness(), 0.01F);
      assertEquals((-2001.9872F), wall0.getYArcCircleCenter(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test209()  throws Throwable  {
      Wall wall0 = new Wall(2589.8674F, 0.0F, 0.0F, 0.0F, 0.0F);
      assertNotNull(wall0);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(1294.9337F, wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals(2589.8674F, wall0.getLength(), 0.01F);
      assertEquals(2589.8674F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(2589.8674F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      
      Wall wall1 = wall0.clone();
      assertFalse(wall1.equals((Object)wall0));
      assertNotNull(wall1);
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(1294.9337F, wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals(2589.8674F, wall0.getLength(), 0.01F);
      assertEquals(2589.8674F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(2589.8674F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall1.getThickness(), 0.01F);
      assertEquals(2589.8674F, wall1.getXStart(), 0.01F);
      assertEquals(0.0F, wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals(1294.9337F, wall1.getXArcCircleCenter(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals(0.0F, wall1.getYStart(), 0.01F);
      assertEquals(2589.8674F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(2589.8674F, wall1.getLength(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertFalse(wall1.isTrapezoidal());
      assertEquals(0.0F, wall1.getXEnd(), 0.01F);
      assertEquals(0.0F, wall1.getYEnd(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertNull(wall1.getHeight());
      
      Wall wall2 = wall0.clone();
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall2.equals((Object)wall1));
      assertFalse(wall2.equals((Object)wall0));
      assertNotNull(wall2);
      assertNotSame(wall0, wall2);
      assertNotSame(wall0, wall1);
      assertNotSame(wall2, wall1);
      assertNotSame(wall2, wall0);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(1294.9337F, wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals(2589.8674F, wall0.getLength(), 0.01F);
      assertEquals(2589.8674F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(2589.8674F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall2.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall2.getThickness(), 0.01F);
      assertEquals(2589.8674F, wall2.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall2.getYStart(), 0.01F);
      assertEquals(1294.9337F, wall2.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall2.getXEnd(), 0.01F);
      assertNull(wall2.getArcExtent());
      assertNull(wall2.getRightSideColor());
      assertEquals(0.0F, wall2.getYEnd(), 0.01F);
      assertNull(wall2.getLeftSideColor());
      assertEquals(0.0F, wall2.getLeftSideShininess(), 0.01F);
      assertEquals(2589.8674F, wall2.getLength(), 0.01F);
      assertNull(wall2.getHeight());
      assertNull(wall2.getHeightAtEnd());
      assertEquals(2589.8674F, wall2.getXStart(), 0.01F);
      assertEquals(0.0F, wall2.getRightSideShininess(), 0.01F);
      assertFalse(wall2.isTrapezoidal());
      
      boolean boolean0 = wall2.containsWallEndAt(2589.8674F, 0.0F, 0.0F);
      assertFalse(wall0.equals((Object)wall2));
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall2.equals((Object)wall1));
      assertFalse(wall2.equals((Object)wall0));
      assertNotSame(wall0, wall2);
      assertNotSame(wall0, wall1);
      assertNotSame(wall2, wall1);
      assertNotSame(wall2, wall0);
      assertFalse(boolean0);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(1294.9337F, wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals(2589.8674F, wall0.getLength(), 0.01F);
      assertEquals(2589.8674F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(2589.8674F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall2.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall2.getThickness(), 0.01F);
      assertEquals(2589.8674F, wall2.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall2.getYStart(), 0.01F);
      assertEquals(1294.9337F, wall2.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall2.getXEnd(), 0.01F);
      assertNull(wall2.getArcExtent());
      assertNull(wall2.getRightSideColor());
      assertEquals(0.0F, wall2.getYEnd(), 0.01F);
      assertNull(wall2.getLeftSideColor());
      assertEquals(0.0F, wall2.getLeftSideShininess(), 0.01F);
      assertEquals(2589.8674F, wall2.getLength(), 0.01F);
      assertNull(wall2.getHeight());
      assertNull(wall2.getHeightAtEnd());
      assertEquals(2589.8674F, wall2.getXStart(), 0.01F);
      assertEquals(0.0F, wall2.getRightSideShininess(), 0.01F);
      assertFalse(wall2.isTrapezoidal());
      
      HomeTexture homeTexture0 = wall0.getRightSideTexture();
      assertFalse(wall0.equals((Object)wall2));
      assertFalse(wall0.equals((Object)wall1));
      assertNull(homeTexture0);
      assertNotSame(wall0, wall2);
      assertNotSame(wall0, wall1);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(1294.9337F, wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals(2589.8674F, wall0.getLength(), 0.01F);
      assertEquals(2589.8674F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(2589.8674F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      
      PropertyChangeListener propertyChangeListener0 = mock(PropertyChangeListener.class, new ViolatedAssumptionAnswer());
      PropertyChangeListenerProxy propertyChangeListenerProxy0 = new PropertyChangeListenerProxy("MHT:~~t+i8$W.8d)0X", propertyChangeListener0);
      assertNotNull(propertyChangeListenerProxy0);
      assertEquals("MHT:~~t+i8$W.8d)0X", propertyChangeListenerProxy0.getPropertyName());
      
      wall1.addPropertyChangeListener(propertyChangeListenerProxy0);
      assertFalse(wall0.equals((Object)wall2));
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall1.equals((Object)wall2));
      assertFalse(wall1.equals((Object)wall0));
      assertNotSame(wall0, wall2);
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall2);
      assertNotSame(wall1, wall0);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(1294.9337F, wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals(2589.8674F, wall0.getLength(), 0.01F);
      assertEquals(2589.8674F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(2589.8674F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall1.getThickness(), 0.01F);
      assertEquals(2589.8674F, wall1.getXStart(), 0.01F);
      assertEquals(0.0F, wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals(1294.9337F, wall1.getXArcCircleCenter(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals(0.0F, wall1.getYStart(), 0.01F);
      assertEquals(2589.8674F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(2589.8674F, wall1.getLength(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertFalse(wall1.isTrapezoidal());
      assertEquals(0.0F, wall1.getXEnd(), 0.01F);
      assertEquals(0.0F, wall1.getYEnd(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertNull(wall1.getHeight());
      assertEquals("MHT:~~t+i8$W.8d)0X", propertyChangeListenerProxy0.getPropertyName());
      
      float float0 = wall1.getXArcCircleCenter();
      assertFalse(wall0.equals((Object)wall2));
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall1.equals((Object)wall2));
      assertFalse(wall1.equals((Object)wall0));
      assertNotSame(wall0, wall2);
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall2);
      assertNotSame(wall1, wall0);
      assertEquals(1294.9337F, float0, 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(1294.9337F, wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals(2589.8674F, wall0.getLength(), 0.01F);
      assertEquals(2589.8674F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(2589.8674F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall1.getThickness(), 0.01F);
      assertEquals(2589.8674F, wall1.getXStart(), 0.01F);
      assertEquals(0.0F, wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals(1294.9337F, wall1.getXArcCircleCenter(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals(0.0F, wall1.getYStart(), 0.01F);
      assertEquals(2589.8674F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(2589.8674F, wall1.getLength(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertFalse(wall1.isTrapezoidal());
      assertEquals(0.0F, wall1.getXEnd(), 0.01F);
      assertEquals(0.0F, wall1.getYEnd(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertNull(wall1.getHeight());
      
      Float float1 = wall0.getHeightAtEnd();
      assertFalse(wall0.equals((Object)wall2));
      assertFalse(wall0.equals((Object)wall1));
      assertNull(float1);
      assertNotSame(wall0, wall2);
      assertNotSame(wall0, wall1);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(1294.9337F, wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals(2589.8674F, wall0.getLength(), 0.01F);
      assertEquals(2589.8674F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(2589.8674F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      
      float float2 = wall0.getThickness();
      assertFalse(wall0.equals((Object)wall2));
      assertFalse(wall0.equals((Object)wall1));
      assertNotEquals(float2, float0, 0.01F);
      assertNotSame(wall0, wall2);
      assertNotSame(wall0, wall1);
      assertEquals(0.0F, float2, 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(1294.9337F, wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals(2589.8674F, wall0.getLength(), 0.01F);
      assertEquals(2589.8674F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(2589.8674F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      
      float float3 = wall1.getLeftSideShininess();
      assertFalse(wall0.equals((Object)wall2));
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall1.equals((Object)wall2));
      assertFalse(wall1.equals((Object)wall0));
      assertNotEquals(float3, float0, 0.01F);
      assertEquals(float3, float2, 0.01F);
      assertNotSame(wall0, wall2);
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall2);
      assertNotSame(wall1, wall0);
      assertEquals(0.0F, float3, 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(1294.9337F, wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals(2589.8674F, wall0.getLength(), 0.01F);
      assertEquals(2589.8674F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(2589.8674F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall1.getThickness(), 0.01F);
      assertEquals(2589.8674F, wall1.getXStart(), 0.01F);
      assertEquals(0.0F, wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals(1294.9337F, wall1.getXArcCircleCenter(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals(0.0F, wall1.getYStart(), 0.01F);
      assertEquals(2589.8674F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(2589.8674F, wall1.getLength(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertFalse(wall1.isTrapezoidal());
      assertEquals(0.0F, wall1.getXEnd(), 0.01F);
      assertEquals(0.0F, wall1.getYEnd(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertNull(wall1.getHeight());
      
      wall1.setRightSideShininess((-1.0F));
      assertFalse(wall0.equals((Object)wall2));
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall1.equals((Object)wall2));
      assertFalse(wall1.equals((Object)wall0));
      assertNotSame(wall0, wall2);
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall2);
      assertNotSame(wall1, wall0);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(1294.9337F, wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals(2589.8674F, wall0.getLength(), 0.01F);
      assertEquals(2589.8674F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(2589.8674F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall1.getThickness(), 0.01F);
      assertEquals(2589.8674F, wall1.getXStart(), 0.01F);
      assertEquals(0.0F, wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals(1294.9337F, wall1.getXArcCircleCenter(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals(0.0F, wall1.getYStart(), 0.01F);
      assertEquals(2589.8674F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(2589.8674F, wall1.getLength(), 0.01F);
      assertEquals((-1.0F), wall1.getRightSideShininess(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertFalse(wall1.isTrapezoidal());
      assertEquals(0.0F, wall1.getXEnd(), 0.01F);
      assertEquals(0.0F, wall1.getYEnd(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertNull(wall1.getHeight());
      
      wall0.setRightSideShininess(0.0F);
      assertFalse(wall0.equals((Object)wall2));
      assertFalse(wall0.equals((Object)wall1));
      assertNotSame(wall0, wall2);
      assertNotSame(wall0, wall1);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(1294.9337F, wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals(2589.8674F, wall0.getLength(), 0.01F);
      assertEquals(2589.8674F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(2589.8674F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      
      boolean boolean1 = wall0.containsPoint((-913.727F), 0.0F, 1014.9F);
      assertFalse(wall0.equals((Object)wall2));
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(boolean1 == boolean0);
      assertNotSame(wall0, wall2);
      assertNotSame(wall0, wall1);
      assertTrue(boolean1);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(1294.9337F, wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals(2589.8674F, wall0.getLength(), 0.01F);
      assertEquals(2589.8674F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(2589.8674F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      
      Float float4 = wall0.getHeight();
      assertFalse(wall0.equals((Object)wall2));
      assertFalse(wall0.equals((Object)wall1));
      assertNull(float4);
      assertNotSame(wall0, wall2);
      assertNotSame(wall0, wall1);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(1294.9337F, wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals(2589.8674F, wall0.getLength(), 0.01F);
      assertEquals(2589.8674F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(2589.8674F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      
      LinkedList<Wall> linkedList0 = new LinkedList<Wall>();
      assertFalse(linkedList0.contains(wall2));
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      float float5 = Float.min((-2078.415F), 0.0F);
      assertNotEquals(float5, float0, 0.01F);
      assertNotEquals(float5, float2, 0.01F);
      assertNotEquals(float5, float3, 0.01F);
      assertEquals((-2078.415F), float5, 0.01F);
      
      List<Wall> list0 = Wall.clone((List<Wall>) linkedList0);
      assertFalse(linkedList0.contains(wall2));
      assertFalse(list0.contains(wall2));
      assertNotNull(list0);
      assertEquals(0, linkedList0.size());
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      
      wall2.setRightSideTexture((HomeTexture) null);
      assertFalse(wall0.equals((Object)wall2));
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall2.equals((Object)wall1));
      assertFalse(wall2.equals((Object)wall0));
      assertNotSame(wall0, wall2);
      assertNotSame(wall0, wall1);
      assertNotSame(wall2, wall1);
      assertNotSame(wall2, wall0);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(1294.9337F, wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals(2589.8674F, wall0.getLength(), 0.01F);
      assertEquals(2589.8674F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(2589.8674F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall2.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall2.getThickness(), 0.01F);
      assertEquals(2589.8674F, wall2.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall2.getYStart(), 0.01F);
      assertEquals(1294.9337F, wall2.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall2.getXEnd(), 0.01F);
      assertNull(wall2.getArcExtent());
      assertNull(wall2.getRightSideColor());
      assertEquals(0.0F, wall2.getYEnd(), 0.01F);
      assertNull(wall2.getLeftSideColor());
      assertEquals(0.0F, wall2.getLeftSideShininess(), 0.01F);
      assertEquals(2589.8674F, wall2.getLength(), 0.01F);
      assertNull(wall2.getHeight());
      assertNull(wall2.getHeightAtEnd());
      assertEquals(2589.8674F, wall2.getXStart(), 0.01F);
      assertEquals(0.0F, wall2.getRightSideShininess(), 0.01F);
      assertFalse(wall2.isTrapezoidal());
      
      Wall.Property[] wall_PropertyArray0 = Wall.Property.values();
      assertNotNull(wall_PropertyArray0);
      assertEquals(18, wall_PropertyArray0.length);
      
      wall2.setArcExtent((Float) null);
      assertFalse(wall0.equals((Object)wall2));
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall2.equals((Object)wall1));
      assertFalse(wall2.equals((Object)wall0));
      assertNotSame(wall0, wall2);
      assertNotSame(wall0, wall1);
      assertNotSame(wall2, wall1);
      assertNotSame(wall2, wall0);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(1294.9337F, wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals(2589.8674F, wall0.getLength(), 0.01F);
      assertEquals(2589.8674F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(2589.8674F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall2.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall2.getThickness(), 0.01F);
      assertEquals(2589.8674F, wall2.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall2.getYStart(), 0.01F);
      assertEquals(1294.9337F, wall2.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall2.getXEnd(), 0.01F);
      assertNull(wall2.getArcExtent());
      assertNull(wall2.getRightSideColor());
      assertEquals(0.0F, wall2.getYEnd(), 0.01F);
      assertNull(wall2.getLeftSideColor());
      assertEquals(0.0F, wall2.getLeftSideShininess(), 0.01F);
      assertEquals(2589.8674F, wall2.getLength(), 0.01F);
      assertNull(wall2.getHeight());
      assertNull(wall2.getHeightAtEnd());
      assertEquals(2589.8674F, wall2.getXStart(), 0.01F);
      assertEquals(0.0F, wall2.getRightSideShininess(), 0.01F);
      assertFalse(wall2.isTrapezoidal());
      
      float float6 = wall1.getYStart();
      assertFalse(wall0.equals((Object)wall2));
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall1.equals((Object)wall2));
      assertFalse(wall1.equals((Object)wall0));
      assertEquals(float6, float2, 0.01F);
      assertNotEquals(float6, float5, 0.01F);
      assertEquals(float6, float3, 0.01F);
      assertNotEquals(float6, float0, 0.01F);
      assertNotSame(wall0, wall2);
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall2);
      assertNotSame(wall1, wall0);
      assertEquals(0.0F, float6, 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(1294.9337F, wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals(2589.8674F, wall0.getLength(), 0.01F);
      assertEquals(2589.8674F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(2589.8674F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall1.getThickness(), 0.01F);
      assertEquals(2589.8674F, wall1.getXStart(), 0.01F);
      assertEquals(0.0F, wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals(1294.9337F, wall1.getXArcCircleCenter(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals(0.0F, wall1.getYStart(), 0.01F);
      assertEquals(2589.8674F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(2589.8674F, wall1.getLength(), 0.01F);
      assertEquals((-1.0F), wall1.getRightSideShininess(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertFalse(wall1.isTrapezoidal());
      assertEquals(0.0F, wall1.getXEnd(), 0.01F);
      assertEquals(0.0F, wall1.getYEnd(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertNull(wall1.getHeight());
      
      Wall wall3 = wall2.clone();
      assertFalse(wall0.equals((Object)wall2));
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall2.equals((Object)wall1));
      assertFalse(wall2.equals((Object)wall0));
      assertFalse(wall3.equals((Object)wall1));
      assertFalse(wall3.equals((Object)wall2));
      assertFalse(wall3.equals((Object)wall0));
      assertNotNull(wall3);
      assertNotSame(wall0, wall2);
      assertNotSame(wall0, wall3);
      assertNotSame(wall0, wall1);
      assertNotSame(wall2, wall3);
      assertNotSame(wall2, wall1);
      assertNotSame(wall2, wall0);
      assertNotSame(wall3, wall1);
      assertNotSame(wall3, wall2);
      assertNotSame(wall3, wall0);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(1294.9337F, wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals(2589.8674F, wall0.getLength(), 0.01F);
      assertEquals(2589.8674F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(2589.8674F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall2.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall2.getThickness(), 0.01F);
      assertEquals(2589.8674F, wall2.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall2.getYStart(), 0.01F);
      assertEquals(1294.9337F, wall2.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall2.getXEnd(), 0.01F);
      assertNull(wall2.getArcExtent());
      assertNull(wall2.getRightSideColor());
      assertEquals(0.0F, wall2.getYEnd(), 0.01F);
      assertNull(wall2.getLeftSideColor());
      assertEquals(0.0F, wall2.getLeftSideShininess(), 0.01F);
      assertEquals(2589.8674F, wall2.getLength(), 0.01F);
      assertNull(wall2.getHeight());
      assertNull(wall2.getHeightAtEnd());
      assertEquals(2589.8674F, wall2.getXStart(), 0.01F);
      assertEquals(0.0F, wall2.getRightSideShininess(), 0.01F);
      assertFalse(wall2.isTrapezoidal());
      assertEquals(0.0F, wall3.getLeftSideShininess(), 0.01F);
      assertFalse(wall3.isTrapezoidal());
      assertEquals(0.0F, wall3.getXEnd(), 0.01F);
      assertNull(wall3.getLeftSideColor());
      assertEquals(0.0F, wall3.getYEnd(), 0.01F);
      assertEquals(2589.8674F, wall3.getLength(), 0.01F);
      assertEquals(2589.8674F, wall3.getXStart(), 0.01F);
      assertEquals(0.0F, wall3.getRightSideShininess(), 0.01F);
      assertEquals(2589.8674F, wall3.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall3.getHeightAtEnd());
      assertEquals(0.0F, wall3.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall3.getYStart(), 0.01F);
      assertNull(wall3.getHeight());
      assertNull(wall3.getRightSideColor());
      assertEquals(1294.9337F, wall3.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall3.getThickness(), 0.01F);
      assertNull(wall3.getArcExtent());
      
      float float7 = wall2.getYStart();
      assertFalse(wall0.equals((Object)wall2));
      assertFalse(wall0.equals((Object)wall3));
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall2.equals((Object)wall3));
      assertFalse(wall2.equals((Object)wall1));
      assertFalse(wall2.equals((Object)wall0));
      assertEquals(float7, float2, 0.01F);
      assertNotEquals(float7, float5, 0.01F);
      assertEquals(float7, float6, 0.01F);
      assertNotEquals(float7, float0, 0.01F);
      assertEquals(float7, float3, 0.01F);
      assertNotSame(wall0, wall2);
      assertNotSame(wall0, wall3);
      assertNotSame(wall0, wall1);
      assertNotSame(wall2, wall3);
      assertNotSame(wall2, wall1);
      assertNotSame(wall2, wall0);
      assertEquals(0.0F, float7, 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(1294.9337F, wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals(2589.8674F, wall0.getLength(), 0.01F);
      assertEquals(2589.8674F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(2589.8674F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall2.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall2.getThickness(), 0.01F);
      assertEquals(2589.8674F, wall2.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall2.getYStart(), 0.01F);
      assertEquals(1294.9337F, wall2.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall2.getXEnd(), 0.01F);
      assertNull(wall2.getArcExtent());
      assertNull(wall2.getRightSideColor());
      assertEquals(0.0F, wall2.getYEnd(), 0.01F);
      assertNull(wall2.getLeftSideColor());
      assertEquals(0.0F, wall2.getLeftSideShininess(), 0.01F);
      assertEquals(2589.8674F, wall2.getLength(), 0.01F);
      assertNull(wall2.getHeight());
      assertNull(wall2.getHeightAtEnd());
      assertEquals(2589.8674F, wall2.getXStart(), 0.01F);
      assertEquals(0.0F, wall2.getRightSideShininess(), 0.01F);
      assertFalse(wall2.isTrapezoidal());
      
      wall1.setWallAtStart(wall2);
      assertFalse(wall0.equals((Object)wall2));
      assertFalse(wall0.equals((Object)wall3));
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall1.equals((Object)wall2));
      assertFalse(wall1.equals((Object)wall0));
      assertFalse(wall1.equals((Object)wall3));
      assertFalse(wall2.equals((Object)wall3));
      assertFalse(wall2.equals((Object)wall1));
      assertFalse(wall2.equals((Object)wall0));
      assertNotSame(wall0, wall2);
      assertNotSame(wall0, wall3);
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall2);
      assertNotSame(wall1, wall0);
      assertNotSame(wall1, wall3);
      assertNotSame(wall2, wall3);
      assertNotSame(wall2, wall1);
      assertNotSame(wall2, wall0);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(1294.9337F, wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals(2589.8674F, wall0.getLength(), 0.01F);
      assertEquals(2589.8674F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(2589.8674F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall1.getThickness(), 0.01F);
      assertEquals(2589.8674F, wall1.getXStart(), 0.01F);
      assertEquals(0.0F, wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals(1294.9337F, wall1.getXArcCircleCenter(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals(0.0F, wall1.getYStart(), 0.01F);
      assertEquals(2589.8674F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(2589.8674F, wall1.getLength(), 0.01F);
      assertEquals((-1.0F), wall1.getRightSideShininess(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertFalse(wall1.isTrapezoidal());
      assertEquals(0.0F, wall1.getXEnd(), 0.01F);
      assertEquals(0.0F, wall1.getYEnd(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertNull(wall1.getHeight());
      assertEquals(0.0F, wall2.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall2.getThickness(), 0.01F);
      assertEquals(2589.8674F, wall2.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall2.getYStart(), 0.01F);
      assertEquals(1294.9337F, wall2.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall2.getXEnd(), 0.01F);
      assertNull(wall2.getArcExtent());
      assertNull(wall2.getRightSideColor());
      assertEquals(0.0F, wall2.getYEnd(), 0.01F);
      assertNull(wall2.getLeftSideColor());
      assertEquals(0.0F, wall2.getLeftSideShininess(), 0.01F);
      assertEquals(2589.8674F, wall2.getLength(), 0.01F);
      assertNull(wall2.getHeight());
      assertNull(wall2.getHeightAtEnd());
      assertEquals(2589.8674F, wall2.getXStart(), 0.01F);
      assertEquals(0.0F, wall2.getRightSideShininess(), 0.01F);
      assertFalse(wall2.isTrapezoidal());
      
      TextureImage textureImage0 = wall0.getPattern();
      assertFalse(wall0.equals((Object)wall2));
      assertFalse(wall0.equals((Object)wall3));
      assertFalse(wall0.equals((Object)wall1));
      assertNull(textureImage0);
      assertNotSame(wall0, wall2);
      assertNotSame(wall0, wall3);
      assertNotSame(wall0, wall1);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(1294.9337F, wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals(2589.8674F, wall0.getLength(), 0.01F);
      assertEquals(2589.8674F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(2589.8674F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      
      wall1.setPattern((TextureImage) null);
      assertFalse(wall0.equals((Object)wall2));
      assertFalse(wall0.equals((Object)wall3));
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall1.equals((Object)wall2));
      assertFalse(wall1.equals((Object)wall0));
      assertFalse(wall1.equals((Object)wall3));
      assertNotSame(wall0, wall2);
      assertNotSame(wall0, wall3);
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall2);
      assertNotSame(wall1, wall0);
      assertNotSame(wall1, wall3);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(1294.9337F, wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals(2589.8674F, wall0.getLength(), 0.01F);
      assertEquals(2589.8674F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(2589.8674F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall1.getThickness(), 0.01F);
      assertEquals(2589.8674F, wall1.getXStart(), 0.01F);
      assertEquals(0.0F, wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals(1294.9337F, wall1.getXArcCircleCenter(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals(0.0F, wall1.getYStart(), 0.01F);
      assertEquals(2589.8674F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(2589.8674F, wall1.getLength(), 0.01F);
      assertEquals((-1.0F), wall1.getRightSideShininess(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertFalse(wall1.isTrapezoidal());
      assertEquals(0.0F, wall1.getXEnd(), 0.01F);
      assertEquals(0.0F, wall1.getYEnd(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertNull(wall1.getHeight());
  }
}
