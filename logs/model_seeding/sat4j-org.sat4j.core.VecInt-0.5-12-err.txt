[MASTER] 19:21:56.483 [logback-2] ERROR TestCluster - Failed to check cache for java.util.Comparator<T> : Type points to itself
[MASTER] 19:26:21.900 [logback-2] ERROR JUnitAnalyzer - Compilation failed on compilation units: [RegularFileObject[/tmp/EvoSuite_14_1550514381322/org/sat4j/core/VecInt_14_tmp__ESTest.java], RegularFileObject[/tmp/EvoSuite_14_1550514381322/org/sat4j/core/VecInt_14_tmp__ESTest_scaffolding.java]]
[MASTER] 19:26:21.900 [logback-2] ERROR JUnitAnalyzer - Classpath: bins/sat4j/org.ow2.sat4j.core-2.3.6-SNAPSHOT.jar:bins/sat4j/org.ow2.sat4j.core-2.3.6-SNAPSHOT-tests.jar:/home/pderakhshanfar/common-uncommon-behaviour-testing-experiment/evosuite-master-1.0.7-SNAPSHOT.jar:/home/pderakhshanfar/common-uncommon-behaviour-testing-experiment/bins/sat4j/org.ow2.sat4j.core-2.3.6-SNAPSHOT.jar:/home/pderakhshanfar/common-uncommon-behaviour-testing-experiment/bins/sat4j/org.ow2.sat4j.core-2.3.6-SNAPSHOT-tests.jar
[MASTER] 19:26:21.900 [logback-2] ERROR JUnitAnalyzer - evosuiteCP: /home/pderakhshanfar/common-uncommon-behaviour-testing-experiment/evosuite-master-1.0.7-SNAPSHOT.jar:/home/pderakhshanfar/common-uncommon-behaviour-testing-experiment/bins/sat4j/org.ow2.sat4j.core-2.3.6-SNAPSHOT.jar:/home/pderakhshanfar/common-uncommon-behaviour-testing-experiment/bins/sat4j/org.ow2.sat4j.core-2.3.6-SNAPSHOT-tests.jar
[MASTER] 19:26:21.915 [logback-2] ERROR JUnitAnalyzer - Diagnostic: cannot find symbol
  symbol:   method access$000(org.sat4j.core.VecInt)
  location: class org.sat4j.core.VecInt: 218
[MASTER] 19:26:21.931 [logback-2] ERROR JUnitAnalyzer - RegularFileObject[/tmp/EvoSuite_14_1550514381322/org/sat4j/core/VecInt_14_tmp__ESTest.java]
1: /*
2:  * This file was automatically generated by EvoSuite
3:  * Mon Feb 18 18:26:21 GMT 2019
4:  */
5: 
6: package org.sat4j.core;
7: 
8: import org.junit.Test;
9: import static org.junit.Assert.*;
10: import static org.evosuite.runtime.EvoAssertions.*;
11: import org.evosuite.runtime.EvoRunner;
12: import org.evosuite.runtime.EvoRunnerParameters;
13: import org.junit.runner.RunWith;
14: import org.sat4j.core.VecInt;
15: import org.sat4j.specs.IVecInt;
16: 
17: @RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, useJEE = true) 
18: public class VecInt_14_tmp__ESTest extends VecInt_14_tmp__ESTest_scaffolding {
19: 
20:   @Test(timeout = 4000)
21:   public void test0()  throws Throwable  {
22:       VecInt vecInt0 = new VecInt(0, 0);
23:       assertNotNull(vecInt0);
24:       assertEquals(0, vecInt0.size());
25:       assertTrue(vecInt0.isEmpty());
26:       
27:       VecInt vecInt1 = new VecInt();
28:       assertNotNull(vecInt1);
29:       assertTrue(vecInt1.equals((Object)vecInt0));
30:       assertEquals(0, vecInt1.size());
31:       assertTrue(vecInt1.isEmpty());
32:       
33:       int int0 = vecInt1.size();
34:       assertEquals(0, int0);
35:       assertTrue(vecInt1.equals((Object)vecInt0));
36:       assertEquals(0, vecInt1.size());
37:       assertTrue(vecInt1.isEmpty());
38:       assertNotSame(vecInt1, vecInt0);
39:       
40:       IVecInt[] iVecIntArray0 = vecInt1.subset(0);
41:       assertNotNull(iVecIntArray0);
42:       assertEquals(0, iVecIntArray0.length);
43:       assertTrue(vecInt1.equals((Object)vecInt0));
44:       assertEquals(0, vecInt1.size());
45:       assertTrue(vecInt1.isEmpty());
46:       assertNotSame(vecInt1, vecInt0);
47:       
48:       VecInt vecInt2 = (VecInt)vecInt1.push(0);
49:       assertNotNull(vecInt2);
50:       assertFalse(vecInt1.equals((Object)vecInt0));
51:       assertFalse(vecInt2.equals((Object)vecInt0));
52:       assertEquals(1, vecInt1.size());
53:       assertFalse(vecInt1.isEmpty());
54:       assertEquals(0, vecInt1.last());
55:       assertEquals(1, vecInt2.size());
56:       assertFalse(vecInt2.isEmpty());
57:       assertEquals(0, vecInt2.last());
58:       assertSame(vecInt1, vecInt2);
59:       assertNotSame(vecInt1, vecInt0);
60:       assertSame(vecInt2, vecInt1);
61:       assertNotSame(vecInt2, vecInt0);
62:       
63:       VecInt vecInt3 = (VecInt)vecInt1.push(0);
64:       assertNotNull(vecInt3);
65:       assertFalse(vecInt1.equals((Object)vecInt0));
66:       assertFalse(vecInt3.equals((Object)vecInt0));
67:       assertFalse(vecInt1.isEmpty());
68:       assertEquals(2, vecInt1.size());
69:       assertEquals(0, vecInt1.last());
70:       assertFalse(vecInt3.isEmpty());
71:       assertEquals(2, vecInt3.size());
72:       assertEquals(0, vecInt3.last());
73:       assertSame(vecInt1, vecInt3);
74:       assertSame(vecInt1, vecInt2);
75:       assertNotSame(vecInt1, vecInt0);
76:       assertSame(vecInt3, vecInt2);
77:       assertNotSame(vecInt3, vecInt0);
78:       assertSame(vecInt3, vecInt1);
79:       
80:       IVecInt[] iVecIntArray1 = vecInt1.subset(0);
81:       assertNotNull(iVecIntArray1);
82:       assertEquals(0, iVecIntArray1.length);
83:       assertFalse(vecInt1.equals((Object)vecInt0));
84:       assertFalse(iVecIntArray1.equals((Object)iVecIntArray0));
85:       assertFalse(vecInt1.isEmpty());
86:       assertEquals(2, vecInt1.size());
87:       assertEquals(0, vecInt1.last());
88:       assertSame(vecInt1, vecInt3);
89:       assertSame(vecInt1, vecInt2);
90:       assertNotSame(vecInt1, vecInt0);
91:       assertNotSame(iVecIntArray1, iVecIntArray0);
92:       
93:       vecInt1.sort();
94:       assertFalse(vecInt1.equals((Object)vecInt0));
95:       assertFalse(vecInt1.isEmpty());
96:       assertEquals(2, vecInt1.size());
97:       assertEquals(0, vecInt1.last());
98:       assertSame(vecInt1, vecInt3);
99:       assertSame(vecInt1, vecInt2);
100:       assertNotSame(vecInt1, vecInt0);
101:       
102:       int[] intArray0 = vecInt1.toArray();
103:       assertNotNull(intArray0);
104:       assertEquals(5, intArray0.length);
105:       assertFalse(vecInt1.equals((Object)vecInt0));
106:       assertFalse(vecInt1.isEmpty());
107:       assertEquals(2, vecInt1.size());
108:       assertEquals(0, vecInt1.last());
109:       assertSame(vecInt1, vecInt3);
110:       assertSame(vecInt1, vecInt2);
111:       assertNotSame(vecInt1, vecInt0);
112:       assertArrayEquals(new int[] {0, 0, 0, 0, 0}, intArray0);
113:       
114:       boolean boolean0 = vecInt0.isSubsetOf(vecInt1);
115:       assertTrue(boolean0);
116:       assertFalse(vecInt0.equals((Object)vecInt1));
117:       assertFalse(vecInt0.equals((Object)vecInt2));
118:       assertFalse(vecInt0.equals((Object)vecInt3));
119:       assertFalse(vecInt1.equals((Object)vecInt0));
120:       assertEquals(0, vecInt0.size());
121:       assertTrue(vecInt0.isEmpty());
122:       assertFalse(vecInt1.isEmpty());
123:       assertEquals(2, vecInt1.size());
124:       assertEquals(0, vecInt1.last());
125:       assertNotSame(vecInt0, vecInt1);
126:       assertNotSame(vecInt0, vecInt2);
127:       assertNotSame(vecInt0, vecInt3);
128:       assertSame(vecInt1, vecInt3);
129:       assertSame(vecInt1, vecInt2);
130:       assertNotSame(vecInt1, vecInt0);
131:       
132:       vecInt0.shrinkTo(0);
133:       assertFalse(vecInt0.equals((Object)vecInt1));
134:       assertFalse(vecInt0.equals((Object)vecInt2));
135:       assertFalse(vecInt0.equals((Object)vecInt3));
136:       assertEquals(0, vecInt0.size());
137:       assertTrue(vecInt0.isEmpty());
138:       assertNotSame(vecInt0, vecInt1);
139:       assertNotSame(vecInt0, vecInt2);
140:       assertNotSame(vecInt0, vecInt3);
141:       
142:       int int1 = 339;
143:       int[] intArray1 = vecInt2.toArray();
144:       assertNotNull(intArray1);
145:       assertEquals(5, intArray1.length);
146:       assertFalse(vecInt1.equals((Object)vecInt0));
147:       assertFalse(vecInt2.equals((Object)vecInt0));
148:       assertFalse(vecInt1.isEmpty());
149:       assertEquals(2, vecInt1.size());
150:       assertEquals(0, vecInt1.last());
151:       assertEquals(2, vecInt2.size());
152:       assertFalse(vecInt2.isEmpty());
153:       assertEquals(0, vecInt2.last());
154:       assertSame(vecInt1, vecInt3);
155:       assertSame(vecInt1, vecInt2);
156:       assertNotSame(vecInt1, vecInt0);
157:       assertSame(vecInt2, vecInt3);
158:       assertSame(vecInt2, vecInt1);
159:       assertNotSame(vecInt2, vecInt0);
160:       assertSame(intArray1, intArray0);
161:       assertArrayEquals(new int[] {0, 0, 0, 0, 0}, intArray1);
162:       
163:       vecInt1.moveTo((IVecInt) vecInt3);
164:       assertTrue(vecInt1.equals((Object)vecInt0));
165:       assertTrue(vecInt3.equals((Object)vecInt0));
166:       assertEquals(0, vecInt1.size());
167:       assertTrue(vecInt1.isEmpty());
168:       assertTrue(vecInt3.isEmpty());
169:       assertEquals(0, vecInt3.size());
170:       assertSame(vecInt1, vecInt3);
171:       assertSame(vecInt1, vecInt2);
172:       assertNotSame(vecInt1, vecInt0);
173:       assertSame(vecInt3, vecInt2);
174:       assertNotSame(vecInt3, vecInt0);
175:       assertSame(vecInt3, vecInt1);
176:       
177:       vecInt2.pushAll(vecInt3);
178:       assertTrue(vecInt1.equals((Object)vecInt0));
179:       assertTrue(vecInt2.equals((Object)vecInt0));
180:       assertTrue(vecInt3.equals((Object)vecInt0));
181:       assertEquals(0, vecInt1.size());
182:       assertTrue(vecInt1.isEmpty());
183:       assertEquals(0, vecInt2.size());
184:       assertTrue(vecInt2.isEmpty());
185:       assertTrue(vecInt3.isEmpty());
186:       assertEquals(0, vecInt3.size());
187:       assertSame(vecInt1, vecInt3);
188:       assertSame(vecInt1, vecInt2);
189:       assertNotSame(vecInt1, vecInt0);
190:       assertSame(vecInt2, vecInt3);
191:       assertSame(vecInt2, vecInt1);
192:       assertNotSame(vecInt2, vecInt0);
193:       assertSame(vecInt3, vecInt2);
194:       assertNotSame(vecInt3, vecInt0);
195:       assertSame(vecInt3, vecInt1);
196:       
197:       boolean boolean1 = vecInt0.isSubsetOf(vecInt1);
198:       assertTrue(boolean1);
199:       assertTrue(vecInt0.equals((Object)vecInt3));
200:       assertTrue(vecInt0.equals((Object)vecInt1));
201:       assertTrue(vecInt0.equals((Object)vecInt2));
202:       assertTrue(vecInt1.equals((Object)vecInt0));
203:       assertTrue(boolean1 == boolean0);
204:       assertEquals(0, vecInt0.size());
205:       assertTrue(vecInt0.isEmpty());
206:       assertEquals(0, vecInt1.size());
207:       assertTrue(vecInt1.isEmpty());
208:       assertNotSame(vecInt0, vecInt1);
209:       assertNotSame(vecInt0, vecInt2);
210:       assertNotSame(vecInt0, vecInt3);
211:       assertSame(vecInt1, vecInt3);
212:       assertSame(vecInt1, vecInt2);
213:       assertNotSame(vecInt1, vecInt0);
214:       
215:       VecInt vecInt4 = null;
216:       // Undeclared exception!
217:       try { 
218:         VecInt.access$000((VecInt) null);
219:         fail("Expecting exception: NullPointerException");
220:       
221:       } catch(NullPointerException e) {
222:          //
223:          // no message in exception (getMessage() returned null)
224:          //
225:          verifyException("org.sat4j.core.VecInt", e);
226:       }
227:   }
228: }
RegularFileObject[/tmp/EvoSuite_14_1550514381322/org/sat4j/core/VecInt_14_tmp__ESTest.java]
1: /**
2:  * Scaffolding file used to store all the setups needed to run 
3:  * tests automatically generated by EvoSuite
4:  * Mon Feb 18 18:26:21 GMT 2019
5:  */
6: 
7: package org.sat4j.core;
8: 
9: import org.evosuite.runtime.annotation.EvoSuiteClassExclude;
10: import org.junit.BeforeClass;
11: import org.junit.Before;
12: import org.junit.After;
13: import org.junit.AfterClass;
14: import org.evosuite.runtime.sandbox.Sandbox;
15: import org.evosuite.runtime.sandbox.Sandbox.SandboxMode;
16: 
17: @EvoSuiteClassExclude
18: public class VecInt_14_tmp__ESTest_scaffolding {
19: 
20:   @org.junit.Rule 
21:   public org.evosuite.runtime.vnet.NonFunctionalRequirementRule nfr = new org.evosuite.runtime.vnet.NonFunctionalRequirementRule();
22: 
23:   private static final java.util.Properties defaultProperties = (java.util.Properties) java.lang.System.getProperties().clone(); 
24: 
25:   private org.evosuite.runtime.thread.ThreadStopper threadStopper =  new org.evosuite.runtime.thread.ThreadStopper (org.evosuite.runtime.thread.KillSwitchHandler.getInstance(), 3000);
26: 
27: 
28:   @BeforeClass 
29:   public static void initEvoSuiteFramework() { 
30:     org.evosuite.runtime.RuntimeSettings.className = "org.sat4j.core.VecInt"; 
31:     org.evosuite.runtime.GuiSupport.initialize(); 
32:     org.evosuite.runtime.RuntimeSettings.maxNumberOfThreads = 100; 
33:     org.evosuite.runtime.RuntimeSettings.maxNumberOfIterationsPerLoop = 10000; 
34:     org.evosuite.runtime.RuntimeSettings.mockSystemIn = true; 
35:     org.evosuite.runtime.RuntimeSettings.sandboxMode = org.evosuite.runtime.sandbox.Sandbox.SandboxMode.RECOMMENDED; 
36:     org.evosuite.runtime.sandbox.Sandbox.initializeSecurityManagerForSUT(); 
37:     org.evosuite.runtime.classhandling.JDKClassResetter.init();
38:     setSystemProperties();
39:     initializeClasses();
40:     org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
41:   } 
42: 
43:   @AfterClass 
44:   public static void clearEvoSuiteFramework(){ 
45:     Sandbox.resetDefaultSecurityManager(); 
46:     java.lang.System.setProperties((java.util.Properties) defaultProperties.clone()); 
47:   } 
48: 
49:   @Before 
50:   public void initTestCase(){ 
51:     threadStopper.storeCurrentThreads();
52:     threadStopper.startRecordingTime();
53:     org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().initHandler(); 
54:     org.evosuite.runtime.sandbox.Sandbox.goingToExecuteSUTCode(); 
55:     setSystemProperties(); 
56:     org.evosuite.runtime.GuiSupport.setHeadless(); 
57:     org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
58:     org.evosuite.runtime.agent.InstrumentingAgent.activate(); 
59:   } 
60: 
61:   @After 
62:   public void doneWithTestCase(){ 
63:     threadStopper.killAndJoinClientThreads();
64:     org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().safeExecuteAddedHooks(); 
65:     org.evosuite.runtime.classhandling.JDKClassResetter.reset(); 
66:     resetClasses(); 
67:     org.evosuite.runtime.sandbox.Sandbox.doneWithExecutingSUTCode(); 
68:     org.evosuite.runtime.agent.InstrumentingAgent.deactivate(); 
69:     org.evosuite.runtime.GuiSupport.restoreHeadlessMode(); 
70:   } 
71: 
72:   public static void setSystemProperties() {
73:  
74:     java.lang.System.setProperties((java.util.Properties) defaultProperties.clone()); 
75:     java.lang.System.setProperty("user.dir", "/home/pderakhshanfar/common-uncommon-behaviour-testing-experiment"); 
76:     java.lang.System.setProperty("java.io.tmpdir", "/tmp"); 
77:   }
78: 
79:   private static void initializeClasses() {
80:     org.evosuite.runtime.classhandling.ClassStateSupport.initializeClasses(VecInt_14_tmp__ESTest_scaffolding.class.getClassLoader() ,
81:       "org.sat4j.core.ReadOnlyVecInt",
82:       "org.sat4j.specs.IteratorInt",
83:       "org.sat4j.core.VecInt$1",
84:       "org.sat4j.specs.IVecInt",
85:       "org.sat4j.core.EmptyVecInt",
86:       "org.sat4j.core.VecInt",
87:       "org.sat4j.core.EmptyVecInt$1"
88:     );
89:   } 
90: 
91:   private static void resetClasses() {
92:     org.evosuite.runtime.classhandling.ClassResetter.getInstance().setClassLoader(VecInt_14_tmp__ESTest_scaffolding.class.getClassLoader()); 
93: 
94:     org.evosuite.runtime.classhandling.ClassStateSupport.resetClasses(
95:       "org.sat4j.core.EmptyVecInt",
96:       "org.sat4j.core.VecInt",
97:       "org.sat4j.core.VecInt$1",
98:       "org.sat4j.core.ReadOnlyVecInt",
99:       "org.sat4j.core.EmptyVecInt$1"
100:     );
101:   }
102: }

[MASTER] 19:26:21.950 [logback-2] ERROR JUnitAnalyzer - Failed to compile test case:
VecInt vecInt0 = new VecInt(0, 0);
assertNotNull(vecInt0);
assertEquals(0, vecInt0.size());
assertTrue(vecInt0.isEmpty());

VecInt vecInt1 = new VecInt();
assertNotNull(vecInt1);
assertTrue(vecInt1.equals((Object)vecInt0));
assertEquals(0, vecInt1.size());
assertTrue(vecInt1.isEmpty());

int int0 = vecInt1.size();
assertEquals(0, int0);
assertTrue(vecInt1.equals((Object)vecInt0));
assertEquals(0, vecInt1.size());
assertTrue(vecInt1.isEmpty());
assertNotSame(vecInt1, vecInt0);

IVecInt[] iVecIntArray0 = vecInt1.subset(0);
assertNotNull(iVecIntArray0);
assertEquals(0, iVecIntArray0.length);
assertTrue(vecInt1.equals((Object)vecInt0));
assertEquals(0, vecInt1.size());
assertTrue(vecInt1.isEmpty());
assertNotSame(vecInt1, vecInt0);

VecInt vecInt2 = (VecInt)vecInt1.push(0);
assertNotNull(vecInt2);
assertFalse(vecInt1.equals((Object)vecInt0));
assertFalse(vecInt2.equals((Object)vecInt0));
assertEquals(1, vecInt1.size());
assertFalse(vecInt1.isEmpty());
assertEquals(0, vecInt1.last());
assertEquals(1, vecInt2.size());
assertFalse(vecInt2.isEmpty());
assertEquals(0, vecInt2.last());
assertSame(vecInt1, vecInt2);
assertNotSame(vecInt1, vecInt0);
assertSame(vecInt2, vecInt1);
assertNotSame(vecInt2, vecInt0);

VecInt vecInt3 = (VecInt)vecInt1.push(0);
assertNotNull(vecInt3);
assertFalse(vecInt1.equals((Object)vecInt0));
assertFalse(vecInt3.equals((Object)vecInt0));
assertFalse(vecInt1.isEmpty());
assertEquals(2, vecInt1.size());
assertEquals(0, vecInt1.last());
assertFalse(vecInt3.isEmpty());
assertEquals(2, vecInt3.size());
assertEquals(0, vecInt3.last());
assertSame(vecInt1, vecInt3);
assertSame(vecInt1, vecInt2);
assertNotSame(vecInt1, vecInt0);
assertSame(vecInt3, vecInt2);
assertNotSame(vecInt3, vecInt0);
assertSame(vecInt3, vecInt1);

IVecInt[] iVecIntArray1 = vecInt1.subset(0);
assertNotNull(iVecIntArray1);
assertEquals(0, iVecIntArray1.length);
assertFalse(vecInt1.equals((Object)vecInt0));
assertFalse(iVecIntArray1.equals((Object)iVecIntArray0));
assertFalse(vecInt1.isEmpty());
assertEquals(2, vecInt1.size());
assertEquals(0, vecInt1.last());
assertSame(vecInt1, vecInt3);
assertSame(vecInt1, vecInt2);
assertNotSame(vecInt1, vecInt0);
assertNotSame(iVecIntArray1, iVecIntArray0);

vecInt1.sort();
assertFalse(vecInt1.equals((Object)vecInt0));
assertFalse(vecInt1.isEmpty());
assertEquals(2, vecInt1.size());
assertEquals(0, vecInt1.last());
assertSame(vecInt1, vecInt3);
assertSame(vecInt1, vecInt2);
assertNotSame(vecInt1, vecInt0);

int[] intArray0 = vecInt1.toArray();
assertNotNull(intArray0);
assertEquals(5, intArray0.length);
assertFalse(vecInt1.equals((Object)vecInt0));
assertFalse(vecInt1.isEmpty());
assertEquals(2, vecInt1.size());
assertEquals(0, vecInt1.last());
assertSame(vecInt1, vecInt3);
assertSame(vecInt1, vecInt2);
assertNotSame(vecInt1, vecInt0);
assertArrayEquals(new int[] {0, 0, 0, 0, 0}, intArray0);

boolean boolean0 = vecInt0.isSubsetOf(vecInt1);
assertTrue(boolean0);
assertFalse(vecInt0.equals((Object)vecInt1));
assertFalse(vecInt0.equals((Object)vecInt2));
assertFalse(vecInt0.equals((Object)vecInt3));
assertFalse(vecInt1.equals((Object)vecInt0));
assertEquals(0, vecInt0.size());
assertTrue(vecInt0.isEmpty());
assertFalse(vecInt1.isEmpty());
assertEquals(2, vecInt1.size());
assertEquals(0, vecInt1.last());
assertNotSame(vecInt0, vecInt1);
assertNotSame(vecInt0, vecInt2);
assertNotSame(vecInt0, vecInt3);
assertSame(vecInt1, vecInt3);
assertSame(vecInt1, vecInt2);
assertNotSame(vecInt1, vecInt0);

vecInt0.shrinkTo(0);
assertFalse(vecInt0.equals((Object)vecInt1));
assertFalse(vecInt0.equals((Object)vecInt2));
assertFalse(vecInt0.equals((Object)vecInt3));
assertEquals(0, vecInt0.size());
assertTrue(vecInt0.isEmpty());
assertNotSame(vecInt0, vecInt1);
assertNotSame(vecInt0, vecInt2);
assertNotSame(vecInt0, vecInt3);

int int1 = 339;
int[] intArray1 = vecInt2.toArray();
assertNotNull(intArray1);
assertEquals(5, intArray1.length);
assertFalse(vecInt1.equals((Object)vecInt0));
assertFalse(vecInt2.equals((Object)vecInt0));
assertFalse(vecInt1.isEmpty());
assertEquals(2, vecInt1.size());
assertEquals(0, vecInt1.last());
assertEquals(2, vecInt2.size());
assertFalse(vecInt2.isEmpty());
assertEquals(0, vecInt2.last());
assertSame(vecInt1, vecInt3);
assertSame(vecInt1, vecInt2);
assertNotSame(vecInt1, vecInt0);
assertSame(vecInt2, vecInt3);
assertSame(vecInt2, vecInt1);
assertNotSame(vecInt2, vecInt0);
assertSame(intArray1, intArray0);
assertArrayEquals(new int[] {0, 0, 0, 0, 0}, intArray1);

vecInt1.moveTo((IVecInt) vecInt3);
assertTrue(vecInt1.equals((Object)vecInt0));
assertTrue(vecInt3.equals((Object)vecInt0));
assertEquals(0, vecInt1.size());
assertTrue(vecInt1.isEmpty());
assertTrue(vecInt3.isEmpty());
assertEquals(0, vecInt3.size());
assertSame(vecInt1, vecInt3);
assertSame(vecInt1, vecInt2);
assertNotSame(vecInt1, vecInt0);
assertSame(vecInt3, vecInt2);
assertNotSame(vecInt3, vecInt0);
assertSame(vecInt3, vecInt1);

vecInt2.pushAll(vecInt3);
assertTrue(vecInt1.equals((Object)vecInt0));
assertTrue(vecInt2.equals((Object)vecInt0));
assertTrue(vecInt3.equals((Object)vecInt0));
assertEquals(0, vecInt1.size());
assertTrue(vecInt1.isEmpty());
assertEquals(0, vecInt2.size());
assertTrue(vecInt2.isEmpty());
assertTrue(vecInt3.isEmpty());
assertEquals(0, vecInt3.size());
assertSame(vecInt1, vecInt3);
assertSame(vecInt1, vecInt2);
assertNotSame(vecInt1, vecInt0);
assertSame(vecInt2, vecInt3);
assertSame(vecInt2, vecInt1);
assertNotSame(vecInt2, vecInt0);
assertSame(vecInt3, vecInt2);
assertNotSame(vecInt3, vecInt0);
assertSame(vecInt3, vecInt1);

boolean boolean1 = vecInt0.isSubsetOf(vecInt1);
assertTrue(boolean1);
assertTrue(vecInt0.equals((Object)vecInt3));
assertTrue(vecInt0.equals((Object)vecInt1));
assertTrue(vecInt0.equals((Object)vecInt2));
assertTrue(vecInt1.equals((Object)vecInt0));
assertTrue(boolean1 == boolean0);
assertEquals(0, vecInt0.size());
assertTrue(vecInt0.isEmpty());
assertEquals(0, vecInt1.size());
assertTrue(vecInt1.isEmpty());
assertNotSame(vecInt0, vecInt1);
assertNotSame(vecInt0, vecInt2);
assertNotSame(vecInt0, vecInt3);
assertSame(vecInt1, vecInt3);
assertSame(vecInt1, vecInt2);
assertNotSame(vecInt1, vecInt0);

VecInt vecInt4 = null;
VecInt.access$000((VecInt) null);

[MASTER] 19:26:33.606 [logback-2] ERROR JUnitAnalyzer - Compilation failed on compilation units: [RegularFileObject[/tmp/EvoSuite_75_1550514393542/org/sat4j/core/VecInt_75_tmp__ESTest.java], RegularFileObject[/tmp/EvoSuite_75_1550514393542/org/sat4j/core/VecInt_75_tmp__ESTest_scaffolding.java]]
[MASTER] 19:26:33.607 [logback-2] ERROR JUnitAnalyzer - Classpath: bins/sat4j/org.ow2.sat4j.core-2.3.6-SNAPSHOT.jar:bins/sat4j/org.ow2.sat4j.core-2.3.6-SNAPSHOT-tests.jar:/home/pderakhshanfar/common-uncommon-behaviour-testing-experiment/evosuite-master-1.0.7-SNAPSHOT.jar:/home/pderakhshanfar/common-uncommon-behaviour-testing-experiment/bins/sat4j/org.ow2.sat4j.core-2.3.6-SNAPSHOT.jar:/home/pderakhshanfar/common-uncommon-behaviour-testing-experiment/bins/sat4j/org.ow2.sat4j.core-2.3.6-SNAPSHOT-tests.jar
[MASTER] 19:26:33.607 [logback-2] ERROR JUnitAnalyzer - evosuiteCP: /home/pderakhshanfar/common-uncommon-behaviour-testing-experiment/evosuite-master-1.0.7-SNAPSHOT.jar:/home/pderakhshanfar/common-uncommon-behaviour-testing-experiment/bins/sat4j/org.ow2.sat4j.core-2.3.6-SNAPSHOT.jar:/home/pderakhshanfar/common-uncommon-behaviour-testing-experiment/bins/sat4j/org.ow2.sat4j.core-2.3.6-SNAPSHOT-tests.jar
[MASTER] 19:26:33.607 [logback-2] ERROR JUnitAnalyzer - Diagnostic: cannot find symbol
  symbol:   method access$100(org.sat4j.core.VecInt)
  location: class org.sat4j.core.VecInt: 135
[MASTER] 19:26:33.608 [logback-2] ERROR JUnitAnalyzer - RegularFileObject[/tmp/EvoSuite_75_1550514393542/org/sat4j/core/VecInt_75_tmp__ESTest.java]
1: /*
2:  * This file was automatically generated by EvoSuite
3:  * Mon Feb 18 18:26:33 GMT 2019
4:  */
5: 
6: package org.sat4j.core;
7: 
8: import org.junit.Test;
9: import static org.junit.Assert.*;
10: import static org.evosuite.runtime.EvoAssertions.*;
11: import org.evosuite.runtime.EvoRunner;
12: import org.evosuite.runtime.EvoRunnerParameters;
13: import org.junit.runner.RunWith;
14: import org.sat4j.core.VecInt;
15: import org.sat4j.specs.IVecInt;
16: 
17: @RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, useJEE = true) 
18: public class VecInt_75_tmp__ESTest extends VecInt_75_tmp__ESTest_scaffolding {
19: 
20:   @Test(timeout = 4000)
21:   public void test0()  throws Throwable  {
22:       VecInt vecInt0 = new VecInt(2);
23:       assertNotNull(vecInt0);
24:       assertTrue(vecInt0.isEmpty());
25:       assertEquals(0, vecInt0.size());
26:       
27:       vecInt0.clear();
28:       assertTrue(vecInt0.isEmpty());
29:       assertEquals(0, vecInt0.size());
30:       
31:       vecInt0.insertFirst(321);
32:       assertFalse(vecInt0.isEmpty());
33:       assertEquals(321, vecInt0.last());
34:       assertEquals(1, vecInt0.size());
35:       
36:       boolean boolean0 = vecInt0.contains(43);
37:       assertFalse(boolean0);
38:       assertFalse(vecInt0.isEmpty());
39:       assertEquals(321, vecInt0.last());
40:       assertEquals(1, vecInt0.size());
41:       
42:       vecInt0.sort();
43:       assertFalse(vecInt0.isEmpty());
44:       assertEquals(321, vecInt0.last());
45:       assertEquals(1, vecInt0.size());
46:       
47:       int int0 = vecInt0.get(1);
48:       assertEquals(0, int0);
49:       assertFalse(vecInt0.isEmpty());
50:       assertEquals(321, vecInt0.last());
51:       assertEquals(1, vecInt0.size());
52:       
53:       int[] intArray0 = new int[1];
54:       IVecInt iVecInt0 = vecInt0.push(1);
55:       assertNotNull(iVecInt0);
56:       assertFalse(vecInt0.isEmpty());
57:       assertEquals(1, vecInt0.last());
58:       assertEquals(2, vecInt0.size());
59:       assertFalse(iVecInt0.isEmpty());
60:       assertEquals(2, iVecInt0.size());
61:       assertEquals(1, iVecInt0.last());
62:       assertSame(vecInt0, iVecInt0);
63:       assertSame(iVecInt0, vecInt0);
64:       
65:       IVecInt[] iVecIntArray0 = vecInt0.subset(0);
66:       assertNotNull(iVecIntArray0);
67:       assertEquals(0, iVecIntArray0.length);
68:       assertFalse(vecInt0.isEmpty());
69:       assertEquals(1, vecInt0.last());
70:       assertEquals(2, vecInt0.size());
71:       assertSame(vecInt0, iVecInt0);
72:       
73:       vecInt0.sort();
74:       assertFalse(vecInt0.isEmpty());
75:       assertEquals(321, vecInt0.last());
76:       assertEquals(2, vecInt0.size());
77:       assertSame(vecInt0, iVecInt0);
78:       
79:       int[] intArray1 = vecInt0.toArray();
80:       assertNotNull(intArray1);
81:       assertEquals(2, intArray1.length);
82:       assertFalse(intArray1.equals((Object)intArray0));
83:       assertFalse(vecInt0.isEmpty());
84:       assertEquals(321, vecInt0.last());
85:       assertEquals(2, vecInt0.size());
86:       assertSame(vecInt0, iVecInt0);
87:       assertNotSame(intArray1, intArray0);
88:       assertArrayEquals(new int[] {1, 321}, intArray1);
89:       
90:       VecInt vecInt1 = new VecInt(intArray0);
91:       assertNotNull(vecInt1);
92:       assertEquals(1, intArray0.length);
93:       assertFalse(intArray0.equals((Object)intArray1));
94:       assertFalse(vecInt1.equals((Object)vecInt0));
95:       assertFalse(vecInt1.equals((Object)iVecInt0));
96:       assertEquals(1, vecInt1.size());
97:       assertFalse(vecInt1.isEmpty());
98:       assertEquals(0, vecInt1.last());
99:       assertArrayEquals(new int[] {0}, intArray0);
100:       
101:       iVecInt0.moveTo((IVecInt) vecInt1);
102:       assertEquals(1, intArray0.length);
103:       assertFalse(vecInt0.equals((Object)vecInt1));
104:       assertFalse(intArray0.equals((Object)intArray1));
105:       assertFalse(iVecInt0.equals((Object)vecInt1));
106:       assertFalse(vecInt1.equals((Object)vecInt0));
107:       assertFalse(vecInt1.equals((Object)iVecInt0));
108:       assertTrue(vecInt0.isEmpty());
109:       assertEquals(0, vecInt0.size());
110:       assertTrue(iVecInt0.isEmpty());
111:       assertEquals(0, iVecInt0.size());
112:       assertFalse(vecInt1.isEmpty());
113:       assertEquals(3, vecInt1.size());
114:       assertEquals(321, vecInt1.last());
115:       assertNotSame(vecInt0, vecInt1);
116:       assertSame(vecInt0, iVecInt0);
117:       assertNotSame(intArray0, intArray1);
118:       assertNotSame(iVecInt0, vecInt1);
119:       assertSame(iVecInt0, vecInt0);
120:       assertNotSame(vecInt1, vecInt0);
121:       assertNotSame(vecInt1, iVecInt0);
122:       assertArrayEquals(new int[] {0}, intArray0);
123:       
124:       VecInt vecInt2 = new VecInt();
125:       assertNotNull(vecInt2);
126:       assertTrue(vecInt2.equals((Object)iVecInt0));
127:       assertFalse(vecInt2.equals((Object)vecInt1));
128:       assertTrue(vecInt2.equals((Object)vecInt0));
129:       assertEquals(0, vecInt2.size());
130:       assertTrue(vecInt2.isEmpty());
131:       
132:       VecInt vecInt3 = null;
133:       // Undeclared exception!
134:       try { 
135:         VecInt.access$100((VecInt) null);
136:         fail("Expecting exception: NullPointerException");
137:       
138:       } catch(NullPointerException e) {
139:          //
140:          // no message in exception (getMessage() returned null)
141:          //
142:          verifyException("org.sat4j.core.VecInt", e);
143:       }
144:   }
145: }
RegularFileObject[/tmp/EvoSuite_75_1550514393542/org/sat4j/core/VecInt_75_tmp__ESTest.java]
1: /**
2:  * Scaffolding file used to store all the setups needed to run 
3:  * tests automatically generated by EvoSuite
4:  * Mon Feb 18 18:26:33 GMT 2019
5:  */
6: 
7: package org.sat4j.core;
8: 
9: import org.evosuite.runtime.annotation.EvoSuiteClassExclude;
10: import org.junit.BeforeClass;
11: import org.junit.Before;
12: import org.junit.After;
13: import org.junit.AfterClass;
14: import org.evosuite.runtime.sandbox.Sandbox;
15: import org.evosuite.runtime.sandbox.Sandbox.SandboxMode;
16: 
17: @EvoSuiteClassExclude
18: public class VecInt_75_tmp__ESTest_scaffolding {
19: 
20:   @org.junit.Rule 
21:   public org.evosuite.runtime.vnet.NonFunctionalRequirementRule nfr = new org.evosuite.runtime.vnet.NonFunctionalRequirementRule();
22: 
23:   private static final java.util.Properties defaultProperties = (java.util.Properties) java.lang.System.getProperties().clone(); 
24: 
25:   private org.evosuite.runtime.thread.ThreadStopper threadStopper =  new org.evosuite.runtime.thread.ThreadStopper (org.evosuite.runtime.thread.KillSwitchHandler.getInstance(), 3000);
26: 
27: 
28:   @BeforeClass 
29:   public static void initEvoSuiteFramework() { 
30:     org.evosuite.runtime.RuntimeSettings.className = "org.sat4j.core.VecInt"; 
31:     org.evosuite.runtime.GuiSupport.initialize(); 
32:     org.evosuite.runtime.RuntimeSettings.maxNumberOfThreads = 100; 
33:     org.evosuite.runtime.RuntimeSettings.maxNumberOfIterationsPerLoop = 10000; 
34:     org.evosuite.runtime.RuntimeSettings.mockSystemIn = true; 
35:     org.evosuite.runtime.RuntimeSettings.sandboxMode = org.evosuite.runtime.sandbox.Sandbox.SandboxMode.RECOMMENDED; 
36:     org.evosuite.runtime.sandbox.Sandbox.initializeSecurityManagerForSUT(); 
37:     org.evosuite.runtime.classhandling.JDKClassResetter.init();
38:     setSystemProperties();
39:     initializeClasses();
40:     org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
41:   } 
42: 
43:   @AfterClass 
44:   public static void clearEvoSuiteFramework(){ 
45:     Sandbox.resetDefaultSecurityManager(); 
46:     java.lang.System.setProperties((java.util.Properties) defaultProperties.clone()); 
47:   } 
48: 
49:   @Before 
50:   public void initTestCase(){ 
51:     threadStopper.storeCurrentThreads();
52:     threadStopper.startRecordingTime();
53:     org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().initHandler(); 
54:     org.evosuite.runtime.sandbox.Sandbox.goingToExecuteSUTCode(); 
55:     setSystemProperties(); 
56:     org.evosuite.runtime.GuiSupport.setHeadless(); 
57:     org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
58:     org.evosuite.runtime.agent.InstrumentingAgent.activate(); 
59:   } 
60: 
61:   @After 
62:   public void doneWithTestCase(){ 
63:     threadStopper.killAndJoinClientThreads();
64:     org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().safeExecuteAddedHooks(); 
65:     org.evosuite.runtime.classhandling.JDKClassResetter.reset(); 
66:     resetClasses(); 
67:     org.evosuite.runtime.sandbox.Sandbox.doneWithExecutingSUTCode(); 
68:     org.evosuite.runtime.agent.InstrumentingAgent.deactivate(); 
69:     org.evosuite.runtime.GuiSupport.restoreHeadlessMode(); 
70:   } 
71: 
72:   public static void setSystemProperties() {
73:  
74:     java.lang.System.setProperties((java.util.Properties) defaultProperties.clone()); 
75:     java.lang.System.setProperty("user.dir", "/home/pderakhshanfar/common-uncommon-behaviour-testing-experiment"); 
76:     java.lang.System.setProperty("java.io.tmpdir", "/tmp"); 
77:   }
78: 
79:   private static void initializeClasses() {
80:     org.evosuite.runtime.classhandling.ClassStateSupport.initializeClasses(VecInt_75_tmp__ESTest_scaffolding.class.getClassLoader() ,
81:       "org.sat4j.core.ReadOnlyVecInt",
82:       "org.sat4j.specs.IteratorInt",
83:       "org.sat4j.core.VecInt$1",
84:       "org.sat4j.specs.IVecInt",
85:       "org.sat4j.core.EmptyVecInt",
86:       "org.sat4j.core.VecInt",
87:       "org.sat4j.core.EmptyVecInt$1"
88:     );
89:   } 
90: 
91:   private static void resetClasses() {
92:     org.evosuite.runtime.classhandling.ClassResetter.getInstance().setClassLoader(VecInt_75_tmp__ESTest_scaffolding.class.getClassLoader()); 
93: 
94:     org.evosuite.runtime.classhandling.ClassStateSupport.resetClasses(
95:       "org.sat4j.core.EmptyVecInt",
96:       "org.sat4j.core.VecInt",
97:       "org.sat4j.core.VecInt$1",
98:       "org.sat4j.core.ReadOnlyVecInt",
99:       "org.sat4j.core.EmptyVecInt$1"
100:     );
101:   }
102: }

[MASTER] 19:26:33.610 [logback-2] ERROR JUnitAnalyzer - Failed to compile test case:
VecInt vecInt0 = new VecInt(2);
assertNotNull(vecInt0);
assertTrue(vecInt0.isEmpty());
assertEquals(0, vecInt0.size());

vecInt0.clear();
assertTrue(vecInt0.isEmpty());
assertEquals(0, vecInt0.size());

vecInt0.insertFirst(321);
assertFalse(vecInt0.isEmpty());
assertEquals(321, vecInt0.last());
assertEquals(1, vecInt0.size());

boolean boolean0 = vecInt0.contains(43);
assertFalse(boolean0);
assertFalse(vecInt0.isEmpty());
assertEquals(321, vecInt0.last());
assertEquals(1, vecInt0.size());

vecInt0.sort();
assertFalse(vecInt0.isEmpty());
assertEquals(321, vecInt0.last());
assertEquals(1, vecInt0.size());

int int0 = vecInt0.get(1);
assertEquals(0, int0);
assertFalse(vecInt0.isEmpty());
assertEquals(321, vecInt0.last());
assertEquals(1, vecInt0.size());

int[] intArray0 = new int[1];
IVecInt iVecInt0 = vecInt0.push(1);
assertNotNull(iVecInt0);
assertFalse(vecInt0.isEmpty());
assertEquals(1, vecInt0.last());
assertEquals(2, vecInt0.size());
assertFalse(iVecInt0.isEmpty());
assertEquals(2, iVecInt0.size());
assertEquals(1, iVecInt0.last());
assertSame(vecInt0, iVecInt0);
assertSame(iVecInt0, vecInt0);

IVecInt[] iVecIntArray0 = vecInt0.subset(0);
assertNotNull(iVecIntArray0);
assertEquals(0, iVecIntArray0.length);
assertFalse(vecInt0.isEmpty());
assertEquals(1, vecInt0.last());
assertEquals(2, vecInt0.size());
assertSame(vecInt0, iVecInt0);

vecInt0.sort();
assertFalse(vecInt0.isEmpty());
assertEquals(321, vecInt0.last());
assertEquals(2, vecInt0.size());
assertSame(vecInt0, iVecInt0);

int[] intArray1 = vecInt0.toArray();
assertNotNull(intArray1);
assertEquals(2, intArray1.length);
assertFalse(intArray1.equals((Object)intArray0));
assertFalse(vecInt0.isEmpty());
assertEquals(321, vecInt0.last());
assertEquals(2, vecInt0.size());
assertSame(vecInt0, iVecInt0);
assertNotSame(intArray1, intArray0);
assertArrayEquals(new int[] {1, 321}, intArray1);

VecInt vecInt1 = new VecInt(intArray0);
assertNotNull(vecInt1);
assertEquals(1, intArray0.length);
assertFalse(intArray0.equals((Object)intArray1));
assertFalse(vecInt1.equals((Object)vecInt0));
assertFalse(vecInt1.equals((Object)iVecInt0));
assertEquals(1, vecInt1.size());
assertFalse(vecInt1.isEmpty());
assertEquals(0, vecInt1.last());
assertArrayEquals(new int[] {0}, intArray0);

iVecInt0.moveTo((IVecInt) vecInt1);
assertEquals(1, intArray0.length);
assertFalse(vecInt0.equals((Object)vecInt1));
assertFalse(intArray0.equals((Object)intArray1));
assertFalse(iVecInt0.equals((Object)vecInt1));
assertFalse(vecInt1.equals((Object)vecInt0));
assertFalse(vecInt1.equals((Object)iVecInt0));
assertTrue(vecInt0.isEmpty());
assertEquals(0, vecInt0.size());
assertTrue(iVecInt0.isEmpty());
assertEquals(0, iVecInt0.size());
assertFalse(vecInt1.isEmpty());
assertEquals(3, vecInt1.size());
assertEquals(321, vecInt1.last());
assertNotSame(vecInt0, vecInt1);
assertSame(vecInt0, iVecInt0);
assertNotSame(intArray0, intArray1);
assertNotSame(iVecInt0, vecInt1);
assertSame(iVecInt0, vecInt0);
assertNotSame(vecInt1, vecInt0);
assertNotSame(vecInt1, iVecInt0);
assertArrayEquals(new int[] {0}, intArray0);

VecInt vecInt2 = new VecInt();
assertNotNull(vecInt2);
assertTrue(vecInt2.equals((Object)iVecInt0));
assertFalse(vecInt2.equals((Object)vecInt1));
assertTrue(vecInt2.equals((Object)vecInt0));
assertEquals(0, vecInt2.size());
assertTrue(vecInt2.isEmpty());

VecInt vecInt3 = null;
VecInt.access$100((VecInt) null);

