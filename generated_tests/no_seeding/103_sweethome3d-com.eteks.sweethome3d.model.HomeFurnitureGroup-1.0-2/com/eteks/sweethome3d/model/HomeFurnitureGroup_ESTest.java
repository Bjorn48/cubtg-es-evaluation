/*
 * This file was automatically generated by EvoSuite
 * Mon Oct 28 15:22:44 GMT 2019
 */

package com.eteks.sweethome3d.model;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.eteks.sweethome3d.model.CatalogLight;
import com.eteks.sweethome3d.model.CatalogPieceOfFurniture;
import com.eteks.sweethome3d.model.CatalogTexture;
import com.eteks.sweethome3d.model.Content;
import com.eteks.sweethome3d.model.FurnitureCategory;
import com.eteks.sweethome3d.model.HomeFurnitureGroup;
import com.eteks.sweethome3d.model.HomeLight;
import com.eteks.sweethome3d.model.HomePieceOfFurniture;
import com.eteks.sweethome3d.model.HomeTexture;
import com.eteks.sweethome3d.model.Level;
import com.eteks.sweethome3d.model.LightSource;
import com.eteks.sweethome3d.tools.ResourceURLContent;
import com.eteks.sweethome3d.tools.URLContent;
import java.beans.PropertyChangeEvent;
import java.beans.PropertyChangeListener;
import java.beans.PropertyChangeListenerProxy;
import java.math.BigDecimal;
import java.math.BigInteger;
import java.net.URL;
import java.util.LinkedList;
import java.util.List;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.System;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class HomeFurnitureGroup_ESTest extends HomeFurnitureGroup_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      LinkedList<HomePieceOfFurniture> linkedList0 = new LinkedList<HomePieceOfFurniture>();
      ResourceURLContent resourceURLContent0 = new ResourceURLContent((URL) null, true);
      LightSource[] lightSourceArray0 = new LightSource[1];
      Float float0 = new Float((-2.1125393349059776));
      float[][] floatArray0 = new float[4][6];
      BigDecimal bigDecimal0 = new BigDecimal((long) 2001);
      BigDecimal bigDecimal1 = new BigDecimal((-1L));
      BigDecimal bigDecimal2 = new BigDecimal((-1L));
      CatalogLight catalogLight0 = new CatalogLight("_])7g^)gy+P0XH3", "_])7g^)gy+P0XH3", "/<gAhL`8>", resourceURLContent0, resourceURLContent0, resourceURLContent0, 1331.01F, (-31.701214F), (-1L), (-31.701214F), true, lightSourceArray0, floatArray0, "DEPTH", true, bigDecimal2, bigDecimal1);
      HomeLight homeLight0 = new HomeLight(catalogLight0);
      linkedList0.add((HomePieceOfFurniture) homeLight0);
      linkedList0.spliterator();
      PropertyChangeListener propertyChangeListener0 = mock(PropertyChangeListener.class, new ViolatedAssumptionAnswer());
      linkedList0.add((HomePieceOfFurniture) homeLight0);
      HomeFurnitureGroup homeFurnitureGroup0 = new HomeFurnitureGroup(linkedList0, "");
      HomePieceOfFurniture homePieceOfFurniture0 = linkedList0.pop();
      HomeFurnitureGroup homeFurnitureGroup1 = homeFurnitureGroup0.clone();
      linkedList0.addFirst(homePieceOfFurniture0);
      homeFurnitureGroup1.setWidth(0.3927002F);
      homeFurnitureGroup0.getModel();
      homeFurnitureGroup1.setVisible(true);
      homeFurnitureGroup1.setHeight(3744.2312F);
      homeFurnitureGroup0.setDepth(1331.01F);
      homeFurnitureGroup1.setWidth(5.169168E-22F);
      homeFurnitureGroup1.setModelMirrored(true);
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      LinkedList<HomePieceOfFurniture> linkedList0 = new LinkedList<HomePieceOfFurniture>();
      ResourceURLContent resourceURLContent0 = new ResourceURLContent((URL) null, true);
      LightSource[] lightSourceArray0 = new LightSource[6];
      Float float0 = new Float((double) 88.9F);
      LightSource lightSource0 = new LightSource(88.9F, 1.0F, 1.0F, 2001, float0);
      float[][] floatArray0 = new float[4][6];
      BigDecimal bigDecimal0 = new BigDecimal((long) 2001);
      BigDecimal bigDecimal1 = new BigDecimal((long) 2001);
      CatalogLight catalogLight0 = new CatalogLight("_])7g^)gy+P0XH3", "_])7g^)gy+P0XH3", "/<gAhL`8>", resourceURLContent0, resourceURLContent0, resourceURLContent0, 1.0F, 1.0F, 2001, 1.0F, false, lightSourceArray0, floatArray0, "DEPTH", true, bigDecimal0, bigDecimal1);
      HomeLight homeLight0 = new HomeLight(catalogLight0);
      HomePieceOfFurniture homePieceOfFurniture0 = new HomePieceOfFurniture(homeLight0);
      linkedList0.add((HomePieceOfFurniture) homeLight0);
      PropertyChangeListener propertyChangeListener0 = mock(PropertyChangeListener.class, new ViolatedAssumptionAnswer());
      PropertyChangeListenerProxy propertyChangeListenerProxy0 = new PropertyChangeListenerProxy("", propertyChangeListener0);
      PropertyChangeListenerProxy propertyChangeListenerProxy1 = new PropertyChangeListenerProxy("/<gAhL`8>", propertyChangeListenerProxy0);
      HomeFurnitureGroup homeFurnitureGroup0 = new HomeFurnitureGroup(linkedList0, "");
      HomeFurnitureGroup homeFurnitureGroup1 = homeFurnitureGroup0.clone();
      homeFurnitureGroup1.addPropertyChangeListener(propertyChangeListenerProxy1);
      homeFurnitureGroup0.setHeight(2001);
      HomeFurnitureGroup homeFurnitureGroup2 = new HomeFurnitureGroup(linkedList0, "_])7g^)gy+P0XH3");
      homeFurnitureGroup2.getCatalogId();
      homeFurnitureGroup0.isDoorOrWindow();
      homeFurnitureGroup1.setModelMirrored(false);
      homeFurnitureGroup2.setWidth((-1605.139F));
      homeFurnitureGroup0.setMovable(true);
      try { 
        Integer.valueOf("");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      LinkedList<HomePieceOfFurniture> linkedList0 = new LinkedList<HomePieceOfFurniture>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      ResourceURLContent resourceURLContent0 = new ResourceURLContent((URL) null, true);
      assertTrue(resourceURLContent0.isMultiPartResource());
      assertNotNull(resourceURLContent0);
      
      LightSource[] lightSourceArray0 = new LightSource[1];
      float[][] floatArray0 = new float[4][6];
      BigDecimal bigDecimal0 = BigDecimal.ZERO;
      assertEquals((byte)0, bigDecimal0.byteValue());
      assertEquals((short)0, bigDecimal0.shortValue());
      assertNotNull(bigDecimal0);
      
      CatalogLight catalogLight0 = new CatalogLight("DEPTH", "DEPTH", "DEPTH", resourceURLContent0, resourceURLContent0, resourceURLContent0, 1.0F, 2001.0F, 1.0F, 1.0F, true, lightSourceArray0, floatArray0, "DEPTH", true, bigDecimal0, bigDecimal0);
      assertEquals(1, lightSourceArray0.length);
      assertEquals(4, floatArray0.length);
      assertTrue(resourceURLContent0.isMultiPartResource());
      assertEquals((byte)0, bigDecimal0.byteValue());
      assertEquals((short)0, bigDecimal0.shortValue());
      assertNull(catalogLight0.getCurrency());
      assertEquals(1.0F, catalogLight0.getHeight(), 0.01F);
      assertTrue(catalogLight0.isTexturable());
      assertTrue(catalogLight0.isProportional());
      assertEquals("DEPTH", catalogLight0.getName());
      assertTrue(catalogLight0.isResizable());
      assertEquals("DEPTH", catalogLight0.getCreator());
      assertEquals("DEPTH", catalogLight0.getDescription());
      assertNull(catalogLight0.getInformation());
      assertEquals(2001.0F, catalogLight0.getDepth(), 0.01F);
      assertTrue(catalogLight0.isDeformable());
      assertTrue(catalogLight0.isMovable());
      assertFalse(catalogLight0.isBackFaceShown());
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertFalse(catalogLight0.isDoorOrWindow());
      assertNull(catalogLight0.getGrade());
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertNull(catalogLight0.getCreationDate());
      assertNull(catalogLight0.getColor());
      assertFalse(catalogLight0.isModifiable());
      assertEquals(1.0F, catalogLight0.getWidth(), 0.01F);
      assertEquals(1.0F, catalogLight0.getElevation(), 0.01F);
      assertEquals("DEPTH", catalogLight0.getId());
      assertNotNull(catalogLight0);
      
      HomeLight homeLight0 = new HomeLight(catalogLight0);
      assertEquals(1, lightSourceArray0.length);
      assertEquals(4, floatArray0.length);
      assertTrue(resourceURLContent0.isMultiPartResource());
      assertEquals((byte)0, bigDecimal0.byteValue());
      assertEquals((short)0, bigDecimal0.shortValue());
      assertNull(catalogLight0.getCurrency());
      assertEquals(1.0F, catalogLight0.getHeight(), 0.01F);
      assertTrue(catalogLight0.isTexturable());
      assertTrue(catalogLight0.isProportional());
      assertEquals("DEPTH", catalogLight0.getName());
      assertTrue(catalogLight0.isResizable());
      assertEquals("DEPTH", catalogLight0.getCreator());
      assertEquals("DEPTH", catalogLight0.getDescription());
      assertNull(catalogLight0.getInformation());
      assertEquals(2001.0F, catalogLight0.getDepth(), 0.01F);
      assertTrue(catalogLight0.isDeformable());
      assertTrue(catalogLight0.isMovable());
      assertFalse(catalogLight0.isBackFaceShown());
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertFalse(catalogLight0.isDoorOrWindow());
      assertNull(catalogLight0.getGrade());
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertNull(catalogLight0.getCreationDate());
      assertNull(catalogLight0.getColor());
      assertFalse(catalogLight0.isModifiable());
      assertEquals(1.0F, catalogLight0.getWidth(), 0.01F);
      assertEquals(1.0F, catalogLight0.getElevation(), 0.01F);
      assertEquals("DEPTH", catalogLight0.getId());
      assertEquals(1.0F, homeLight0.getHeight(), 0.01F);
      assertEquals(2001.0F, homeLight0.getDepth(), 0.01F);
      assertEquals(1.0F, homeLight0.getWidth(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertNull(homeLight0.getCurrency());
      assertTrue(homeLight0.isDeformable());
      assertTrue(homeLight0.isResizable());
      assertTrue(homeLight0.isMovable());
      assertTrue(homeLight0.isVisible());
      assertNull(homeLight0.getShininess());
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertEquals(1.0F, homeLight0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertEquals(0.5F, homeLight0.getX(), 0.01F);
      assertEquals(1000.5F, homeLight0.getY(), 0.01F);
      assertTrue(homeLight0.isTexturable());
      assertNull(homeLight0.getColor());
      assertEquals("DEPTH", homeLight0.getDescription());
      assertEquals(1.0F, homeLight0.getElevation(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      assertEquals("DEPTH", homeLight0.getName());
      assertFalse(homeLight0.isNameVisible());
      assertEquals("DEPTH", homeLight0.getCatalogId());
      assertFalse(homeLight0.isModelMirrored());
      assertFalse(homeLight0.isBackFaceShown());
      assertNotNull(homeLight0);
      
      homeLight0.setNameVisible(true);
      assertEquals(1, lightSourceArray0.length);
      assertEquals(4, floatArray0.length);
      assertTrue(resourceURLContent0.isMultiPartResource());
      assertEquals((byte)0, bigDecimal0.byteValue());
      assertEquals((short)0, bigDecimal0.shortValue());
      assertNull(catalogLight0.getCurrency());
      assertEquals(1.0F, catalogLight0.getHeight(), 0.01F);
      assertTrue(catalogLight0.isTexturable());
      assertTrue(catalogLight0.isProportional());
      assertEquals("DEPTH", catalogLight0.getName());
      assertTrue(catalogLight0.isResizable());
      assertEquals("DEPTH", catalogLight0.getCreator());
      assertEquals("DEPTH", catalogLight0.getDescription());
      assertNull(catalogLight0.getInformation());
      assertEquals(2001.0F, catalogLight0.getDepth(), 0.01F);
      assertTrue(catalogLight0.isDeformable());
      assertTrue(catalogLight0.isMovable());
      assertFalse(catalogLight0.isBackFaceShown());
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertFalse(catalogLight0.isDoorOrWindow());
      assertNull(catalogLight0.getGrade());
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertNull(catalogLight0.getCreationDate());
      assertNull(catalogLight0.getColor());
      assertFalse(catalogLight0.isModifiable());
      assertEquals(1.0F, catalogLight0.getWidth(), 0.01F);
      assertEquals(1.0F, catalogLight0.getElevation(), 0.01F);
      assertEquals("DEPTH", catalogLight0.getId());
      assertEquals(1.0F, homeLight0.getHeight(), 0.01F);
      assertEquals(2001.0F, homeLight0.getDepth(), 0.01F);
      assertEquals(1.0F, homeLight0.getWidth(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertNull(homeLight0.getCurrency());
      assertTrue(homeLight0.isDeformable());
      assertTrue(homeLight0.isResizable());
      assertTrue(homeLight0.isMovable());
      assertTrue(homeLight0.isVisible());
      assertNull(homeLight0.getShininess());
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertEquals(1.0F, homeLight0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertEquals(0.5F, homeLight0.getX(), 0.01F);
      assertEquals(1000.5F, homeLight0.getY(), 0.01F);
      assertTrue(homeLight0.isTexturable());
      assertNull(homeLight0.getColor());
      assertEquals("DEPTH", homeLight0.getDescription());
      assertEquals(1.0F, homeLight0.getElevation(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      assertEquals("DEPTH", homeLight0.getName());
      assertEquals("DEPTH", homeLight0.getCatalogId());
      assertFalse(homeLight0.isModelMirrored());
      assertTrue(homeLight0.isNameVisible());
      assertFalse(homeLight0.isBackFaceShown());
      
      boolean boolean0 = linkedList0.add((HomePieceOfFurniture) homeLight0);
      assertTrue(boolean0);
      assertEquals(1, lightSourceArray0.length);
      assertEquals(4, floatArray0.length);
      assertEquals(1, linkedList0.size());
      assertTrue(resourceURLContent0.isMultiPartResource());
      assertEquals((byte)0, bigDecimal0.byteValue());
      assertEquals((short)0, bigDecimal0.shortValue());
      assertNull(catalogLight0.getCurrency());
      assertEquals(1.0F, catalogLight0.getHeight(), 0.01F);
      assertTrue(catalogLight0.isTexturable());
      assertTrue(catalogLight0.isProportional());
      assertEquals("DEPTH", catalogLight0.getName());
      assertTrue(catalogLight0.isResizable());
      assertEquals("DEPTH", catalogLight0.getCreator());
      assertEquals("DEPTH", catalogLight0.getDescription());
      assertNull(catalogLight0.getInformation());
      assertEquals(2001.0F, catalogLight0.getDepth(), 0.01F);
      assertTrue(catalogLight0.isDeformable());
      assertTrue(catalogLight0.isMovable());
      assertFalse(catalogLight0.isBackFaceShown());
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertFalse(catalogLight0.isDoorOrWindow());
      assertNull(catalogLight0.getGrade());
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertNull(catalogLight0.getCreationDate());
      assertNull(catalogLight0.getColor());
      assertFalse(catalogLight0.isModifiable());
      assertEquals(1.0F, catalogLight0.getWidth(), 0.01F);
      assertEquals(1.0F, catalogLight0.getElevation(), 0.01F);
      assertEquals("DEPTH", catalogLight0.getId());
      assertEquals(1.0F, homeLight0.getHeight(), 0.01F);
      assertEquals(2001.0F, homeLight0.getDepth(), 0.01F);
      assertEquals(1.0F, homeLight0.getWidth(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertNull(homeLight0.getCurrency());
      assertTrue(homeLight0.isDeformable());
      assertTrue(homeLight0.isResizable());
      assertTrue(homeLight0.isMovable());
      assertTrue(homeLight0.isVisible());
      assertNull(homeLight0.getShininess());
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertEquals(1.0F, homeLight0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertEquals(0.5F, homeLight0.getX(), 0.01F);
      assertEquals(1000.5F, homeLight0.getY(), 0.01F);
      assertTrue(homeLight0.isTexturable());
      assertNull(homeLight0.getColor());
      assertEquals("DEPTH", homeLight0.getDescription());
      assertEquals(1.0F, homeLight0.getElevation(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      assertEquals("DEPTH", homeLight0.getName());
      assertEquals("DEPTH", homeLight0.getCatalogId());
      assertFalse(homeLight0.isModelMirrored());
      assertTrue(homeLight0.isNameVisible());
      assertFalse(homeLight0.isBackFaceShown());
      
      HomeFurnitureGroup homeFurnitureGroup0 = new HomeFurnitureGroup(linkedList0, (String) null);
      assertEquals(1, linkedList0.size());
      assertFalse(homeFurnitureGroup0.isNameVisible());
      assertFalse(homeFurnitureGroup0.isBackFaceShown());
      assertEquals(0.0F, homeFurnitureGroup0.getNameYOffset(), 0.01F);
      assertNull(homeFurnitureGroup0.getColor());
      assertFalse(homeFurnitureGroup0.isModelMirrored());
      assertTrue(homeFurnitureGroup0.isVisible());
      assertEquals(1.0F, homeFurnitureGroup0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getAngle(), 0.01F);
      assertEquals(0.5F, homeFurnitureGroup0.getX(), 0.01F);
      assertFalse(homeFurnitureGroup0.isDoorOrWindow());
      assertTrue(homeFurnitureGroup0.isTexturable());
      assertEquals(1000.5F, homeFurnitureGroup0.getY(), 0.01F);
      assertNull(homeFurnitureGroup0.getDescription());
      assertEquals(1.0F, homeFurnitureGroup0.getElevation(), 0.01F);
      assertNull(homeFurnitureGroup0.getName());
      assertTrue(homeFurnitureGroup0.isMovable());
      assertEquals(0.0F, homeFurnitureGroup0.getNameXOffset(), 0.01F);
      assertNull(homeFurnitureGroup0.getStaircaseCutOutShape());
      assertEquals(2001.0F, homeFurnitureGroup0.getDepth(), 0.01F);
      assertTrue(homeFurnitureGroup0.isResizable());
      assertEquals(1.0F, homeFurnitureGroup0.getHeight(), 0.01F);
      assertNull(homeFurnitureGroup0.getShininess());
      assertNull(homeFurnitureGroup0.getCurrency());
      assertTrue(homeFurnitureGroup0.isDeformable());
      assertEquals(0.0F, homeFurnitureGroup0.getNameAngle(), 0.01F);
      assertNull(homeFurnitureGroup0.getCatalogId());
      assertEquals(1.0F, homeFurnitureGroup0.getWidth(), 0.01F);
      assertNotNull(homeFurnitureGroup0);
      
      HomeFurnitureGroup homeFurnitureGroup1 = homeFurnitureGroup0.clone();
      assertEquals(1, linkedList0.size());
      assertFalse(homeFurnitureGroup0.isNameVisible());
      assertFalse(homeFurnitureGroup0.isBackFaceShown());
      assertEquals(0.0F, homeFurnitureGroup0.getNameYOffset(), 0.01F);
      assertNull(homeFurnitureGroup0.getColor());
      assertFalse(homeFurnitureGroup0.isModelMirrored());
      assertTrue(homeFurnitureGroup0.isVisible());
      assertEquals(1.0F, homeFurnitureGroup0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getAngle(), 0.01F);
      assertEquals(0.5F, homeFurnitureGroup0.getX(), 0.01F);
      assertFalse(homeFurnitureGroup0.isDoorOrWindow());
      assertTrue(homeFurnitureGroup0.isTexturable());
      assertEquals(1000.5F, homeFurnitureGroup0.getY(), 0.01F);
      assertNull(homeFurnitureGroup0.getDescription());
      assertEquals(1.0F, homeFurnitureGroup0.getElevation(), 0.01F);
      assertNull(homeFurnitureGroup0.getName());
      assertTrue(homeFurnitureGroup0.isMovable());
      assertEquals(0.0F, homeFurnitureGroup0.getNameXOffset(), 0.01F);
      assertNull(homeFurnitureGroup0.getStaircaseCutOutShape());
      assertEquals(2001.0F, homeFurnitureGroup0.getDepth(), 0.01F);
      assertTrue(homeFurnitureGroup0.isResizable());
      assertEquals(1.0F, homeFurnitureGroup0.getHeight(), 0.01F);
      assertNull(homeFurnitureGroup0.getShininess());
      assertNull(homeFurnitureGroup0.getCurrency());
      assertTrue(homeFurnitureGroup0.isDeformable());
      assertEquals(0.0F, homeFurnitureGroup0.getNameAngle(), 0.01F);
      assertNull(homeFurnitureGroup0.getCatalogId());
      assertEquals(1.0F, homeFurnitureGroup0.getWidth(), 0.01F);
      assertEquals(1.0F, homeFurnitureGroup1.getWidth(), 0.01F);
      assertEquals(0.5F, homeFurnitureGroup1.getX(), 0.01F);
      assertEquals(1.0F, homeFurnitureGroup1.getGroundElevation(), 0.01F);
      assertFalse(homeFurnitureGroup1.isDoorOrWindow());
      assertEquals(1000.5F, homeFurnitureGroup1.getY(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup1.getAngle(), 0.01F);
      assertTrue(homeFurnitureGroup1.isTexturable());
      assertNull(homeFurnitureGroup1.getColor());
      assertEquals(1.0F, homeFurnitureGroup1.getElevation(), 0.01F);
      assertTrue(homeFurnitureGroup1.isMovable());
      assertEquals(0.0F, homeFurnitureGroup1.getNameXOffset(), 0.01F);
      assertTrue(homeFurnitureGroup1.isResizable());
      assertEquals(2001.0F, homeFurnitureGroup1.getDepth(), 0.01F);
      assertTrue(homeFurnitureGroup1.isVisible());
      assertEquals(0.0F, homeFurnitureGroup1.getNameAngle(), 0.01F);
      assertNull(homeFurnitureGroup1.getStaircaseCutOutShape());
      assertNull(homeFurnitureGroup1.getCatalogId());
      assertNull(homeFurnitureGroup1.getShininess());
      assertEquals(1.0F, homeFurnitureGroup1.getHeight(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup1.getNameYOffset(), 0.01F);
      assertNull(homeFurnitureGroup1.getName());
      assertFalse(homeFurnitureGroup1.isNameVisible());
      assertNull(homeFurnitureGroup1.getDescription());
      assertFalse(homeFurnitureGroup1.isBackFaceShown());
      assertFalse(homeFurnitureGroup1.isModelMirrored());
      assertTrue(homeFurnitureGroup1.isDeformable());
      assertNull(homeFurnitureGroup1.getCurrency());
      assertFalse(homeFurnitureGroup1.equals((Object)homeFurnitureGroup0));
      assertNotNull(homeFurnitureGroup1);
      assertNotSame(homeFurnitureGroup0, homeFurnitureGroup1);
      assertNotSame(homeFurnitureGroup1, homeFurnitureGroup0);
      
      Content content0 = homeFurnitureGroup1.getModel();
      assertEquals(1, linkedList0.size());
      assertFalse(homeFurnitureGroup0.isNameVisible());
      assertFalse(homeFurnitureGroup0.isBackFaceShown());
      assertEquals(0.0F, homeFurnitureGroup0.getNameYOffset(), 0.01F);
      assertNull(homeFurnitureGroup0.getColor());
      assertFalse(homeFurnitureGroup0.isModelMirrored());
      assertTrue(homeFurnitureGroup0.isVisible());
      assertEquals(1.0F, homeFurnitureGroup0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getAngle(), 0.01F);
      assertEquals(0.5F, homeFurnitureGroup0.getX(), 0.01F);
      assertFalse(homeFurnitureGroup0.isDoorOrWindow());
      assertTrue(homeFurnitureGroup0.isTexturable());
      assertEquals(1000.5F, homeFurnitureGroup0.getY(), 0.01F);
      assertNull(homeFurnitureGroup0.getDescription());
      assertEquals(1.0F, homeFurnitureGroup0.getElevation(), 0.01F);
      assertNull(homeFurnitureGroup0.getName());
      assertTrue(homeFurnitureGroup0.isMovable());
      assertEquals(0.0F, homeFurnitureGroup0.getNameXOffset(), 0.01F);
      assertNull(homeFurnitureGroup0.getStaircaseCutOutShape());
      assertEquals(2001.0F, homeFurnitureGroup0.getDepth(), 0.01F);
      assertTrue(homeFurnitureGroup0.isResizable());
      assertEquals(1.0F, homeFurnitureGroup0.getHeight(), 0.01F);
      assertNull(homeFurnitureGroup0.getShininess());
      assertNull(homeFurnitureGroup0.getCurrency());
      assertTrue(homeFurnitureGroup0.isDeformable());
      assertEquals(0.0F, homeFurnitureGroup0.getNameAngle(), 0.01F);
      assertNull(homeFurnitureGroup0.getCatalogId());
      assertEquals(1.0F, homeFurnitureGroup0.getWidth(), 0.01F);
      assertEquals(1.0F, homeFurnitureGroup1.getWidth(), 0.01F);
      assertEquals(0.5F, homeFurnitureGroup1.getX(), 0.01F);
      assertEquals(1.0F, homeFurnitureGroup1.getGroundElevation(), 0.01F);
      assertFalse(homeFurnitureGroup1.isDoorOrWindow());
      assertEquals(1000.5F, homeFurnitureGroup1.getY(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup1.getAngle(), 0.01F);
      assertTrue(homeFurnitureGroup1.isTexturable());
      assertNull(homeFurnitureGroup1.getColor());
      assertEquals(1.0F, homeFurnitureGroup1.getElevation(), 0.01F);
      assertTrue(homeFurnitureGroup1.isMovable());
      assertEquals(0.0F, homeFurnitureGroup1.getNameXOffset(), 0.01F);
      assertTrue(homeFurnitureGroup1.isResizable());
      assertEquals(2001.0F, homeFurnitureGroup1.getDepth(), 0.01F);
      assertTrue(homeFurnitureGroup1.isVisible());
      assertEquals(0.0F, homeFurnitureGroup1.getNameAngle(), 0.01F);
      assertNull(homeFurnitureGroup1.getStaircaseCutOutShape());
      assertNull(homeFurnitureGroup1.getCatalogId());
      assertNull(homeFurnitureGroup1.getShininess());
      assertEquals(1.0F, homeFurnitureGroup1.getHeight(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup1.getNameYOffset(), 0.01F);
      assertNull(homeFurnitureGroup1.getName());
      assertFalse(homeFurnitureGroup1.isNameVisible());
      assertNull(homeFurnitureGroup1.getDescription());
      assertFalse(homeFurnitureGroup1.isBackFaceShown());
      assertFalse(homeFurnitureGroup1.isModelMirrored());
      assertTrue(homeFurnitureGroup1.isDeformable());
      assertNull(homeFurnitureGroup1.getCurrency());
      assertFalse(homeFurnitureGroup0.equals((Object)homeFurnitureGroup1));
      assertFalse(homeFurnitureGroup1.equals((Object)homeFurnitureGroup0));
      assertNull(content0);
      assertNotSame(homeFurnitureGroup0, homeFurnitureGroup1);
      assertNotSame(homeFurnitureGroup1, homeFurnitureGroup0);
      
      float float0 = homeFurnitureGroup1.getDepth();
      assertEquals(2001.0F, float0, 0.01F);
      assertEquals(1, linkedList0.size());
      assertFalse(homeFurnitureGroup0.isNameVisible());
      assertFalse(homeFurnitureGroup0.isBackFaceShown());
      assertEquals(0.0F, homeFurnitureGroup0.getNameYOffset(), 0.01F);
      assertNull(homeFurnitureGroup0.getColor());
      assertFalse(homeFurnitureGroup0.isModelMirrored());
      assertTrue(homeFurnitureGroup0.isVisible());
      assertEquals(1.0F, homeFurnitureGroup0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getAngle(), 0.01F);
      assertEquals(0.5F, homeFurnitureGroup0.getX(), 0.01F);
      assertFalse(homeFurnitureGroup0.isDoorOrWindow());
      assertTrue(homeFurnitureGroup0.isTexturable());
      assertEquals(1000.5F, homeFurnitureGroup0.getY(), 0.01F);
      assertNull(homeFurnitureGroup0.getDescription());
      assertEquals(1.0F, homeFurnitureGroup0.getElevation(), 0.01F);
      assertNull(homeFurnitureGroup0.getName());
      assertTrue(homeFurnitureGroup0.isMovable());
      assertEquals(0.0F, homeFurnitureGroup0.getNameXOffset(), 0.01F);
      assertNull(homeFurnitureGroup0.getStaircaseCutOutShape());
      assertEquals(2001.0F, homeFurnitureGroup0.getDepth(), 0.01F);
      assertTrue(homeFurnitureGroup0.isResizable());
      assertEquals(1.0F, homeFurnitureGroup0.getHeight(), 0.01F);
      assertNull(homeFurnitureGroup0.getShininess());
      assertNull(homeFurnitureGroup0.getCurrency());
      assertTrue(homeFurnitureGroup0.isDeformable());
      assertEquals(0.0F, homeFurnitureGroup0.getNameAngle(), 0.01F);
      assertNull(homeFurnitureGroup0.getCatalogId());
      assertEquals(1.0F, homeFurnitureGroup0.getWidth(), 0.01F);
      assertEquals(1.0F, homeFurnitureGroup1.getWidth(), 0.01F);
      assertEquals(0.5F, homeFurnitureGroup1.getX(), 0.01F);
      assertEquals(1.0F, homeFurnitureGroup1.getGroundElevation(), 0.01F);
      assertFalse(homeFurnitureGroup1.isDoorOrWindow());
      assertEquals(1000.5F, homeFurnitureGroup1.getY(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup1.getAngle(), 0.01F);
      assertTrue(homeFurnitureGroup1.isTexturable());
      assertNull(homeFurnitureGroup1.getColor());
      assertEquals(1.0F, homeFurnitureGroup1.getElevation(), 0.01F);
      assertTrue(homeFurnitureGroup1.isMovable());
      assertEquals(0.0F, homeFurnitureGroup1.getNameXOffset(), 0.01F);
      assertTrue(homeFurnitureGroup1.isResizable());
      assertEquals(2001.0F, homeFurnitureGroup1.getDepth(), 0.01F);
      assertTrue(homeFurnitureGroup1.isVisible());
      assertEquals(0.0F, homeFurnitureGroup1.getNameAngle(), 0.01F);
      assertNull(homeFurnitureGroup1.getStaircaseCutOutShape());
      assertNull(homeFurnitureGroup1.getCatalogId());
      assertNull(homeFurnitureGroup1.getShininess());
      assertEquals(1.0F, homeFurnitureGroup1.getHeight(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup1.getNameYOffset(), 0.01F);
      assertNull(homeFurnitureGroup1.getName());
      assertFalse(homeFurnitureGroup1.isNameVisible());
      assertNull(homeFurnitureGroup1.getDescription());
      assertFalse(homeFurnitureGroup1.isBackFaceShown());
      assertFalse(homeFurnitureGroup1.isModelMirrored());
      assertTrue(homeFurnitureGroup1.isDeformable());
      assertNull(homeFurnitureGroup1.getCurrency());
      assertFalse(homeFurnitureGroup0.equals((Object)homeFurnitureGroup1));
      assertFalse(homeFurnitureGroup1.equals((Object)homeFurnitureGroup0));
      assertNotSame(homeFurnitureGroup0, homeFurnitureGroup1);
      assertNotSame(homeFurnitureGroup1, homeFurnitureGroup0);
      
      homeFurnitureGroup1.setWidth(2001.0F);
      assertEquals(1, linkedList0.size());
      assertFalse(homeFurnitureGroup0.isNameVisible());
      assertFalse(homeFurnitureGroup0.isBackFaceShown());
      assertEquals(0.0F, homeFurnitureGroup0.getNameYOffset(), 0.01F);
      assertNull(homeFurnitureGroup0.getColor());
      assertFalse(homeFurnitureGroup0.isModelMirrored());
      assertTrue(homeFurnitureGroup0.isVisible());
      assertEquals(1.0F, homeFurnitureGroup0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getAngle(), 0.01F);
      assertEquals(0.5F, homeFurnitureGroup0.getX(), 0.01F);
      assertFalse(homeFurnitureGroup0.isDoorOrWindow());
      assertTrue(homeFurnitureGroup0.isTexturable());
      assertEquals(1000.5F, homeFurnitureGroup0.getY(), 0.01F);
      assertNull(homeFurnitureGroup0.getDescription());
      assertEquals(1.0F, homeFurnitureGroup0.getElevation(), 0.01F);
      assertNull(homeFurnitureGroup0.getName());
      assertTrue(homeFurnitureGroup0.isMovable());
      assertEquals(0.0F, homeFurnitureGroup0.getNameXOffset(), 0.01F);
      assertNull(homeFurnitureGroup0.getStaircaseCutOutShape());
      assertEquals(2001.0F, homeFurnitureGroup0.getDepth(), 0.01F);
      assertTrue(homeFurnitureGroup0.isResizable());
      assertEquals(1.0F, homeFurnitureGroup0.getHeight(), 0.01F);
      assertNull(homeFurnitureGroup0.getShininess());
      assertNull(homeFurnitureGroup0.getCurrency());
      assertTrue(homeFurnitureGroup0.isDeformable());
      assertEquals(0.0F, homeFurnitureGroup0.getNameAngle(), 0.01F);
      assertNull(homeFurnitureGroup0.getCatalogId());
      assertEquals(1.0F, homeFurnitureGroup0.getWidth(), 0.01F);
      assertEquals(0.5F, homeFurnitureGroup1.getX(), 0.01F);
      assertEquals(1.0F, homeFurnitureGroup1.getGroundElevation(), 0.01F);
      assertFalse(homeFurnitureGroup1.isDoorOrWindow());
      assertEquals(1000.5F, homeFurnitureGroup1.getY(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup1.getAngle(), 0.01F);
      assertTrue(homeFurnitureGroup1.isTexturable());
      assertEquals(2001.0F, homeFurnitureGroup1.getWidth(), 0.01F);
      assertNull(homeFurnitureGroup1.getColor());
      assertEquals(1.0F, homeFurnitureGroup1.getElevation(), 0.01F);
      assertTrue(homeFurnitureGroup1.isMovable());
      assertEquals(0.0F, homeFurnitureGroup1.getNameXOffset(), 0.01F);
      assertTrue(homeFurnitureGroup1.isResizable());
      assertEquals(2001.0F, homeFurnitureGroup1.getDepth(), 0.01F);
      assertTrue(homeFurnitureGroup1.isVisible());
      assertEquals(0.0F, homeFurnitureGroup1.getNameAngle(), 0.01F);
      assertNull(homeFurnitureGroup1.getStaircaseCutOutShape());
      assertNull(homeFurnitureGroup1.getCatalogId());
      assertNull(homeFurnitureGroup1.getShininess());
      assertEquals(1.0F, homeFurnitureGroup1.getHeight(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup1.getNameYOffset(), 0.01F);
      assertNull(homeFurnitureGroup1.getName());
      assertFalse(homeFurnitureGroup1.isNameVisible());
      assertNull(homeFurnitureGroup1.getDescription());
      assertFalse(homeFurnitureGroup1.isBackFaceShown());
      assertFalse(homeFurnitureGroup1.isModelMirrored());
      assertTrue(homeFurnitureGroup1.isDeformable());
      assertNull(homeFurnitureGroup1.getCurrency());
      assertFalse(homeFurnitureGroup0.equals((Object)homeFurnitureGroup1));
      assertFalse(homeFurnitureGroup1.equals((Object)homeFurnitureGroup0));
      assertNotSame(homeFurnitureGroup0, homeFurnitureGroup1);
      assertNotSame(homeFurnitureGroup1, homeFurnitureGroup0);
      
      String string0 = homeFurnitureGroup0.getCatalogId();
      assertEquals(1, linkedList0.size());
      assertFalse(homeFurnitureGroup0.isNameVisible());
      assertFalse(homeFurnitureGroup0.isBackFaceShown());
      assertEquals(0.0F, homeFurnitureGroup0.getNameYOffset(), 0.01F);
      assertNull(homeFurnitureGroup0.getColor());
      assertFalse(homeFurnitureGroup0.isModelMirrored());
      assertTrue(homeFurnitureGroup0.isVisible());
      assertEquals(1.0F, homeFurnitureGroup0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getAngle(), 0.01F);
      assertEquals(0.5F, homeFurnitureGroup0.getX(), 0.01F);
      assertFalse(homeFurnitureGroup0.isDoorOrWindow());
      assertTrue(homeFurnitureGroup0.isTexturable());
      assertEquals(1000.5F, homeFurnitureGroup0.getY(), 0.01F);
      assertNull(homeFurnitureGroup0.getDescription());
      assertEquals(1.0F, homeFurnitureGroup0.getElevation(), 0.01F);
      assertNull(homeFurnitureGroup0.getName());
      assertTrue(homeFurnitureGroup0.isMovable());
      assertEquals(0.0F, homeFurnitureGroup0.getNameXOffset(), 0.01F);
      assertNull(homeFurnitureGroup0.getStaircaseCutOutShape());
      assertEquals(2001.0F, homeFurnitureGroup0.getDepth(), 0.01F);
      assertTrue(homeFurnitureGroup0.isResizable());
      assertEquals(1.0F, homeFurnitureGroup0.getHeight(), 0.01F);
      assertNull(homeFurnitureGroup0.getShininess());
      assertNull(homeFurnitureGroup0.getCurrency());
      assertTrue(homeFurnitureGroup0.isDeformable());
      assertEquals(0.0F, homeFurnitureGroup0.getNameAngle(), 0.01F);
      assertNull(homeFurnitureGroup0.getCatalogId());
      assertEquals(1.0F, homeFurnitureGroup0.getWidth(), 0.01F);
      assertFalse(homeFurnitureGroup0.equals((Object)homeFurnitureGroup1));
      assertNull(string0);
      assertNotSame(homeFurnitureGroup0, homeFurnitureGroup1);
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      LinkedList<HomePieceOfFurniture> linkedList0 = new LinkedList<HomePieceOfFurniture>();
      HomeFurnitureGroup homeFurnitureGroup0 = null;
      try {
        homeFurnitureGroup0 = new HomeFurnitureGroup(linkedList0, "}");
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.LinkedList", e);
      }
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      LinkedList<HomePieceOfFurniture> linkedList0 = new LinkedList<HomePieceOfFurniture>();
      ResourceURLContent resourceURLContent0 = new ResourceURLContent((URL) null, true);
      LightSource[] lightSourceArray0 = new LightSource[1];
      Float float0 = new Float(0.0);
      LightSource lightSource0 = new LightSource(88.9F, (-31.701214F), 1331.01F, 2001, float0);
      lightSourceArray0[0] = lightSource0;
      float[][] floatArray0 = new float[4][6];
      BigDecimal bigDecimal0 = new BigDecimal((long) 2001);
      BigDecimal bigDecimal1 = new BigDecimal((long) 2001);
      BigDecimal bigDecimal2 = new BigDecimal((long) 2001);
      CatalogLight catalogLight0 = new CatalogLight("_])7g^)gy+P0XH3", "_])7g^)gy+P0XH3", "DEPTH", resourceURLContent0, resourceURLContent0, resourceURLContent0, 1331.01F, (-31.701214F), 2001, (-31.701214F), true, lightSourceArray0, floatArray0, "DEPTH", true, bigDecimal2, bigDecimal1);
      HomeLight homeLight0 = new HomeLight(catalogLight0);
      linkedList0.add((HomePieceOfFurniture) homeLight0);
      linkedList0.spliterator();
      HomeLight homeLight1 = homeLight0.clone();
      homeLight1.setAngle((-31.701214F));
      HomePieceOfFurniture homePieceOfFurniture0 = new HomePieceOfFurniture(homeLight1);
      linkedList0.add((HomePieceOfFurniture) homeLight1);
      HomeFurnitureGroup homeFurnitureGroup0 = new HomeFurnitureGroup(linkedList0, "_])7g^)gy+P0XH3");
      homeFurnitureGroup0.getModelRotation();
      linkedList0.pop();
      HomeFurnitureGroup homeFurnitureGroup1 = homeFurnitureGroup0.clone();
      homeFurnitureGroup0.getModel();
      homeFurnitureGroup0.setAngle(2001);
      homeFurnitureGroup1.setHeight(2001);
      homeFurnitureGroup1.getPrice();
      homeFurnitureGroup0.getValueAddedTaxPercentage();
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      LinkedList<HomePieceOfFurniture> linkedList0 = new LinkedList<HomePieceOfFurniture>();
      ResourceURLContent resourceURLContent0 = new ResourceURLContent((URL) null, true);
      LightSource[] lightSourceArray0 = new LightSource[7];
      float[][] floatArray0 = new float[4][6];
      BigDecimal bigDecimal0 = new BigDecimal((long) 2001);
      bigDecimal0.ulp();
      CatalogLight catalogLight0 = new CatalogLight("9", "_])7g^)gy+P0XH3", "_])7g^)gy+P0XH3", resourceURLContent0, resourceURLContent0, resourceURLContent0, 2001, 1992.9916F, 1.0F, 1992.9916F, true, lightSourceArray0, floatArray0, "_])7g^)gy+P0XH3", true, bigDecimal0, bigDecimal0);
      HomeLight homeLight0 = new HomeLight(catalogLight0);
      HomePieceOfFurniture homePieceOfFurniture0 = new HomePieceOfFurniture(catalogLight0);
      linkedList0.add((HomePieceOfFurniture) homeLight0);
      HomeFurnitureGroup homeFurnitureGroup0 = new HomeFurnitureGroup(linkedList0, "_])7g^)gy+P0XH3");
      HomeFurnitureGroup homeFurnitureGroup1 = homeFurnitureGroup0.clone();
      homeFurnitureGroup1.setHeight(1771.3F);
      homeFurnitureGroup1.getFurniture();
      homeFurnitureGroup1.setY(298.2F);
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      LinkedList<HomePieceOfFurniture> linkedList0 = new LinkedList<HomePieceOfFurniture>();
      ResourceURLContent resourceURLContent0 = new ResourceURLContent((URL) null, true);
      LightSource[] lightSourceArray0 = new LightSource[1];
      Float float0 = new Float(0.0);
      LightSource lightSource0 = new LightSource(88.9F, 1.0F, 1331.01F, 1997, float0);
      lightSourceArray0[0] = lightSource0;
      float[][] floatArray0 = new float[4][6];
      BigDecimal bigDecimal0 = new BigDecimal((long) 1997);
      CatalogLight catalogLight0 = new CatalogLight("_])7g^)gy+P0XH3", "_])7g^)gy+P0XH3", "_])7g^)gy+P0XH3", resourceURLContent0, resourceURLContent0, resourceURLContent0, 124.49F, 0.0F, 1.0F, 1.0F, false, lightSourceArray0, floatArray0, "", true, bigDecimal0, bigDecimal0);
      HomeLight homeLight0 = new HomeLight(catalogLight0);
      HomePieceOfFurniture homePieceOfFurniture0 = new HomePieceOfFurniture(homeLight0);
      linkedList0.add(homePieceOfFurniture0);
      HomeFurnitureGroup homeFurnitureGroup0 = new HomeFurnitureGroup(linkedList0, "DEPTH");
      homeFurnitureGroup0.getModelRotation();
      linkedList0.pop();
      HomeFurnitureGroup homeFurnitureGroup1 = homeFurnitureGroup0.clone();
      homeFurnitureGroup0.getModel();
      homeFurnitureGroup1.setHeight(884.7593F);
      homeFurnitureGroup0.isDoorOrWindow();
      homeFurnitureGroup1.getPlanIcon();
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      LinkedList<HomePieceOfFurniture> linkedList0 = new LinkedList<HomePieceOfFurniture>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      ResourceURLContent resourceURLContent0 = new ResourceURLContent((URL) null, true);
      assertTrue(resourceURLContent0.isMultiPartResource());
      assertNotNull(resourceURLContent0);
      
      LightSource[] lightSourceArray0 = new LightSource[1];
      Float float0 = new Float(0.0);
      assertEquals(0.0F, (float)float0, 0.01F);
      assertNotNull(float0);
      
      LightSource lightSource0 = new LightSource(88.9F, 1.0F, 1331.01F, 1997, float0);
      assertEquals(1.0F, lightSource0.getY(), 0.01F);
      assertEquals(88.9F, lightSource0.getX(), 0.01F);
      assertEquals(1331.01F, lightSource0.getZ(), 0.01F);
      assertEquals(1997, lightSource0.getColor());
      assertEquals(0.0F, lightSource0.getDiameter(), 0.01F);
      assertNotNull(lightSource0);
      
      lightSourceArray0[0] = lightSource0;
      float[][] floatArray0 = new float[4][6];
      BigDecimal bigDecimal0 = new BigDecimal((long) 1997);
      assertEquals((short)1997, bigDecimal0.shortValue());
      assertEquals((byte) (-51), bigDecimal0.byteValue());
      assertNotNull(bigDecimal0);
      
      CatalogLight catalogLight0 = new CatalogLight("_])7g^)gy+P0XH3", "_])7g^)gy+P0XH3", "_])7g^)gy+P0XH3", resourceURLContent0, resourceURLContent0, resourceURLContent0, 124.49F, 0.0F, 1.0F, 1.0F, false, lightSourceArray0, floatArray0, "", true, bigDecimal0, bigDecimal0);
      assertEquals(1, lightSourceArray0.length);
      assertEquals(4, floatArray0.length);
      assertTrue(resourceURLContent0.isMultiPartResource());
      assertEquals((short)1997, bigDecimal0.shortValue());
      assertEquals((byte) (-51), bigDecimal0.byteValue());
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertEquals("_])7g^)gy+P0XH3", catalogLight0.getName());
      assertEquals("_])7g^)gy+P0XH3", catalogLight0.getDescription());
      assertFalse(catalogLight0.isDoorOrWindow());
      assertEquals(1.0F, catalogLight0.getElevation(), 0.01F);
      assertEquals("", catalogLight0.getCreator());
      assertEquals(124.49F, catalogLight0.getWidth(), 0.01F);
      assertNull(catalogLight0.getColor());
      assertFalse(catalogLight0.isModifiable());
      assertEquals("_])7g^)gy+P0XH3", catalogLight0.getId());
      assertEquals(0.0F, catalogLight0.getDepth(), 0.01F);
      assertNull(catalogLight0.getCurrency());
      assertFalse(catalogLight0.isBackFaceShown());
      assertFalse(catalogLight0.isMovable());
      assertNull(catalogLight0.getInformation());
      assertTrue(catalogLight0.isResizable());
      assertTrue(catalogLight0.isDeformable());
      assertNull(catalogLight0.getCreationDate());
      assertNull(catalogLight0.getGrade());
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertTrue(catalogLight0.isProportional());
      assertEquals(1.0F, catalogLight0.getHeight(), 0.01F);
      assertTrue(catalogLight0.isTexturable());
      assertNotNull(catalogLight0);
      
      HomeLight homeLight0 = new HomeLight(catalogLight0);
      assertEquals(1, lightSourceArray0.length);
      assertEquals(4, floatArray0.length);
      assertTrue(resourceURLContent0.isMultiPartResource());
      assertEquals((short)1997, bigDecimal0.shortValue());
      assertEquals((byte) (-51), bigDecimal0.byteValue());
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertEquals("_])7g^)gy+P0XH3", catalogLight0.getName());
      assertEquals("_])7g^)gy+P0XH3", catalogLight0.getDescription());
      assertFalse(catalogLight0.isDoorOrWindow());
      assertEquals(1.0F, catalogLight0.getElevation(), 0.01F);
      assertEquals("", catalogLight0.getCreator());
      assertEquals(124.49F, catalogLight0.getWidth(), 0.01F);
      assertNull(catalogLight0.getColor());
      assertFalse(catalogLight0.isModifiable());
      assertEquals("_])7g^)gy+P0XH3", catalogLight0.getId());
      assertEquals(0.0F, catalogLight0.getDepth(), 0.01F);
      assertNull(catalogLight0.getCurrency());
      assertFalse(catalogLight0.isBackFaceShown());
      assertFalse(catalogLight0.isMovable());
      assertNull(catalogLight0.getInformation());
      assertTrue(catalogLight0.isResizable());
      assertTrue(catalogLight0.isDeformable());
      assertNull(catalogLight0.getCreationDate());
      assertNull(catalogLight0.getGrade());
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertTrue(catalogLight0.isProportional());
      assertEquals(1.0F, catalogLight0.getHeight(), 0.01F);
      assertTrue(catalogLight0.isTexturable());
      assertTrue(homeLight0.isDeformable());
      assertEquals("_])7g^)gy+P0XH3", homeLight0.getDescription());
      assertEquals(62.245F, homeLight0.getX(), 0.01F);
      assertNull(homeLight0.getCurrency());
      assertTrue(homeLight0.isVisible());
      assertEquals(1.0F, homeLight0.getHeight(), 0.01F);
      assertEquals("_])7g^)gy+P0XH3", homeLight0.getCatalogId());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertNull(homeLight0.getColor());
      assertFalse(homeLight0.isBackFaceShown());
      assertFalse(homeLight0.isDoorOrWindow());
      assertTrue(homeLight0.isTexturable());
      assertFalse(homeLight0.isModelMirrored());
      assertEquals("_])7g^)gy+P0XH3", homeLight0.getName());
      assertFalse(homeLight0.isNameVisible());
      assertEquals(1.0F, homeLight0.getElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertEquals(1.0F, homeLight0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertTrue(homeLight0.isResizable());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertNull(homeLight0.getShininess());
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertFalse(homeLight0.isMovable());
      assertEquals(124.49F, homeLight0.getWidth(), 0.01F);
      assertNotNull(homeLight0);
      
      homeLight0.setAngle((-1.0F));
      assertEquals(1, lightSourceArray0.length);
      assertEquals(4, floatArray0.length);
      assertTrue(resourceURLContent0.isMultiPartResource());
      assertEquals((short)1997, bigDecimal0.shortValue());
      assertEquals((byte) (-51), bigDecimal0.byteValue());
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertEquals("_])7g^)gy+P0XH3", catalogLight0.getName());
      assertEquals("_])7g^)gy+P0XH3", catalogLight0.getDescription());
      assertFalse(catalogLight0.isDoorOrWindow());
      assertEquals(1.0F, catalogLight0.getElevation(), 0.01F);
      assertEquals("", catalogLight0.getCreator());
      assertEquals(124.49F, catalogLight0.getWidth(), 0.01F);
      assertNull(catalogLight0.getColor());
      assertFalse(catalogLight0.isModifiable());
      assertEquals("_])7g^)gy+P0XH3", catalogLight0.getId());
      assertEquals(0.0F, catalogLight0.getDepth(), 0.01F);
      assertNull(catalogLight0.getCurrency());
      assertFalse(catalogLight0.isBackFaceShown());
      assertFalse(catalogLight0.isMovable());
      assertNull(catalogLight0.getInformation());
      assertTrue(catalogLight0.isResizable());
      assertTrue(catalogLight0.isDeformable());
      assertNull(catalogLight0.getCreationDate());
      assertNull(catalogLight0.getGrade());
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertTrue(catalogLight0.isProportional());
      assertEquals(1.0F, catalogLight0.getHeight(), 0.01F);
      assertTrue(catalogLight0.isTexturable());
      assertTrue(homeLight0.isDeformable());
      assertEquals("_])7g^)gy+P0XH3", homeLight0.getDescription());
      assertEquals(62.245F, homeLight0.getX(), 0.01F);
      assertNull(homeLight0.getCurrency());
      assertTrue(homeLight0.isVisible());
      assertEquals(1.0F, homeLight0.getHeight(), 0.01F);
      assertEquals("_])7g^)gy+P0XH3", homeLight0.getCatalogId());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertNull(homeLight0.getColor());
      assertFalse(homeLight0.isBackFaceShown());
      assertFalse(homeLight0.isDoorOrWindow());
      assertTrue(homeLight0.isTexturable());
      assertFalse(homeLight0.isModelMirrored());
      assertEquals(5.2831855F, homeLight0.getAngle(), 0.01F);
      assertEquals("_])7g^)gy+P0XH3", homeLight0.getName());
      assertFalse(homeLight0.isNameVisible());
      assertEquals(1.0F, homeLight0.getElevation(), 0.01F);
      assertEquals(1.0F, homeLight0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertTrue(homeLight0.isResizable());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertNull(homeLight0.getShininess());
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertFalse(homeLight0.isMovable());
      assertEquals(124.49F, homeLight0.getWidth(), 0.01F);
      
      HomePieceOfFurniture homePieceOfFurniture0 = new HomePieceOfFurniture(homeLight0);
      assertEquals(1, lightSourceArray0.length);
      assertEquals(4, floatArray0.length);
      assertTrue(resourceURLContent0.isMultiPartResource());
      assertEquals((short)1997, bigDecimal0.shortValue());
      assertEquals((byte) (-51), bigDecimal0.byteValue());
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertEquals("_])7g^)gy+P0XH3", catalogLight0.getName());
      assertEquals("_])7g^)gy+P0XH3", catalogLight0.getDescription());
      assertFalse(catalogLight0.isDoorOrWindow());
      assertEquals(1.0F, catalogLight0.getElevation(), 0.01F);
      assertEquals("", catalogLight0.getCreator());
      assertEquals(124.49F, catalogLight0.getWidth(), 0.01F);
      assertNull(catalogLight0.getColor());
      assertFalse(catalogLight0.isModifiable());
      assertEquals("_])7g^)gy+P0XH3", catalogLight0.getId());
      assertEquals(0.0F, catalogLight0.getDepth(), 0.01F);
      assertNull(catalogLight0.getCurrency());
      assertFalse(catalogLight0.isBackFaceShown());
      assertFalse(catalogLight0.isMovable());
      assertNull(catalogLight0.getInformation());
      assertTrue(catalogLight0.isResizable());
      assertTrue(catalogLight0.isDeformable());
      assertNull(catalogLight0.getCreationDate());
      assertNull(catalogLight0.getGrade());
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertTrue(catalogLight0.isProportional());
      assertEquals(1.0F, catalogLight0.getHeight(), 0.01F);
      assertTrue(catalogLight0.isTexturable());
      assertTrue(homeLight0.isDeformable());
      assertEquals("_])7g^)gy+P0XH3", homeLight0.getDescription());
      assertEquals(62.245F, homeLight0.getX(), 0.01F);
      assertNull(homeLight0.getCurrency());
      assertTrue(homeLight0.isVisible());
      assertEquals(1.0F, homeLight0.getHeight(), 0.01F);
      assertEquals("_])7g^)gy+P0XH3", homeLight0.getCatalogId());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertNull(homeLight0.getColor());
      assertFalse(homeLight0.isBackFaceShown());
      assertFalse(homeLight0.isDoorOrWindow());
      assertTrue(homeLight0.isTexturable());
      assertFalse(homeLight0.isModelMirrored());
      assertEquals(5.2831855F, homeLight0.getAngle(), 0.01F);
      assertEquals("_])7g^)gy+P0XH3", homeLight0.getName());
      assertFalse(homeLight0.isNameVisible());
      assertEquals(1.0F, homeLight0.getElevation(), 0.01F);
      assertEquals(1.0F, homeLight0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertTrue(homeLight0.isResizable());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertNull(homeLight0.getShininess());
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertFalse(homeLight0.isMovable());
      assertEquals(124.49F, homeLight0.getWidth(), 0.01F);
      assertEquals(62.245F, homePieceOfFurniture0.getX(), 0.01F);
      assertEquals(1.0F, homePieceOfFurniture0.getHeight(), 0.01F);
      assertEquals("_])7g^)gy+P0XH3", homePieceOfFurniture0.getDescription());
      assertEquals(0.0F, homePieceOfFurniture0.getNameYOffset(), 0.01F);
      assertTrue(homePieceOfFurniture0.isVisible());
      assertNull(homePieceOfFurniture0.getShininess());
      assertTrue(homePieceOfFurniture0.isResizable());
      assertTrue(homePieceOfFurniture0.isDeformable());
      assertEquals("_])7g^)gy+P0XH3", homePieceOfFurniture0.getCatalogId());
      assertEquals(0.0F, homePieceOfFurniture0.getNameAngle(), 0.01F);
      assertNull(homePieceOfFurniture0.getStaircaseCutOutShape());
      assertEquals(0.0F, homePieceOfFurniture0.getDepth(), 0.01F);
      assertNull(homePieceOfFurniture0.getCurrency());
      assertFalse(homePieceOfFurniture0.isMovable());
      assertEquals(124.49F, homePieceOfFurniture0.getWidth(), 0.01F);
      assertEquals(1.0F, homePieceOfFurniture0.getElevation(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture0.getY(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture0.getNameXOffset(), 0.01F);
      assertEquals(1.0F, homePieceOfFurniture0.getGroundElevation(), 0.01F);
      assertNull(homePieceOfFurniture0.getColor());
      assertEquals(5.2831855F, homePieceOfFurniture0.getAngle(), 0.01F);
      assertFalse(homePieceOfFurniture0.isModelMirrored());
      assertFalse(homePieceOfFurniture0.isBackFaceShown());
      assertFalse(homePieceOfFurniture0.isDoorOrWindow());
      assertTrue(homePieceOfFurniture0.isTexturable());
      assertFalse(homePieceOfFurniture0.isNameVisible());
      assertEquals("_])7g^)gy+P0XH3", homePieceOfFurniture0.getName());
      assertNotNull(homePieceOfFurniture0);
      
      boolean boolean0 = linkedList0.add(homePieceOfFurniture0);
      assertTrue(boolean0);
      assertEquals(1, lightSourceArray0.length);
      assertEquals(4, floatArray0.length);
      assertTrue(linkedList0.contains(homePieceOfFurniture0));
      assertEquals(1, linkedList0.size());
      assertTrue(resourceURLContent0.isMultiPartResource());
      assertEquals((short)1997, bigDecimal0.shortValue());
      assertEquals((byte) (-51), bigDecimal0.byteValue());
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertEquals("_])7g^)gy+P0XH3", catalogLight0.getName());
      assertEquals("_])7g^)gy+P0XH3", catalogLight0.getDescription());
      assertFalse(catalogLight0.isDoorOrWindow());
      assertEquals(1.0F, catalogLight0.getElevation(), 0.01F);
      assertEquals("", catalogLight0.getCreator());
      assertEquals(124.49F, catalogLight0.getWidth(), 0.01F);
      assertNull(catalogLight0.getColor());
      assertFalse(catalogLight0.isModifiable());
      assertEquals("_])7g^)gy+P0XH3", catalogLight0.getId());
      assertEquals(0.0F, catalogLight0.getDepth(), 0.01F);
      assertNull(catalogLight0.getCurrency());
      assertFalse(catalogLight0.isBackFaceShown());
      assertFalse(catalogLight0.isMovable());
      assertNull(catalogLight0.getInformation());
      assertTrue(catalogLight0.isResizable());
      assertTrue(catalogLight0.isDeformable());
      assertNull(catalogLight0.getCreationDate());
      assertNull(catalogLight0.getGrade());
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertTrue(catalogLight0.isProportional());
      assertEquals(1.0F, catalogLight0.getHeight(), 0.01F);
      assertTrue(catalogLight0.isTexturable());
      assertTrue(homeLight0.isDeformable());
      assertEquals("_])7g^)gy+P0XH3", homeLight0.getDescription());
      assertEquals(62.245F, homeLight0.getX(), 0.01F);
      assertNull(homeLight0.getCurrency());
      assertTrue(homeLight0.isVisible());
      assertEquals(1.0F, homeLight0.getHeight(), 0.01F);
      assertEquals("_])7g^)gy+P0XH3", homeLight0.getCatalogId());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertNull(homeLight0.getColor());
      assertFalse(homeLight0.isBackFaceShown());
      assertFalse(homeLight0.isDoorOrWindow());
      assertTrue(homeLight0.isTexturable());
      assertFalse(homeLight0.isModelMirrored());
      assertEquals(5.2831855F, homeLight0.getAngle(), 0.01F);
      assertEquals("_])7g^)gy+P0XH3", homeLight0.getName());
      assertFalse(homeLight0.isNameVisible());
      assertEquals(1.0F, homeLight0.getElevation(), 0.01F);
      assertEquals(1.0F, homeLight0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertTrue(homeLight0.isResizable());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertNull(homeLight0.getShininess());
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertFalse(homeLight0.isMovable());
      assertEquals(124.49F, homeLight0.getWidth(), 0.01F);
      assertEquals(62.245F, homePieceOfFurniture0.getX(), 0.01F);
      assertEquals(1.0F, homePieceOfFurniture0.getHeight(), 0.01F);
      assertEquals("_])7g^)gy+P0XH3", homePieceOfFurniture0.getDescription());
      assertEquals(0.0F, homePieceOfFurniture0.getNameYOffset(), 0.01F);
      assertTrue(homePieceOfFurniture0.isVisible());
      assertNull(homePieceOfFurniture0.getShininess());
      assertTrue(homePieceOfFurniture0.isResizable());
      assertTrue(homePieceOfFurniture0.isDeformable());
      assertEquals("_])7g^)gy+P0XH3", homePieceOfFurniture0.getCatalogId());
      assertEquals(0.0F, homePieceOfFurniture0.getNameAngle(), 0.01F);
      assertNull(homePieceOfFurniture0.getStaircaseCutOutShape());
      assertEquals(0.0F, homePieceOfFurniture0.getDepth(), 0.01F);
      assertNull(homePieceOfFurniture0.getCurrency());
      assertFalse(homePieceOfFurniture0.isMovable());
      assertEquals(124.49F, homePieceOfFurniture0.getWidth(), 0.01F);
      assertEquals(1.0F, homePieceOfFurniture0.getElevation(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture0.getY(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture0.getNameXOffset(), 0.01F);
      assertEquals(1.0F, homePieceOfFurniture0.getGroundElevation(), 0.01F);
      assertNull(homePieceOfFurniture0.getColor());
      assertEquals(5.2831855F, homePieceOfFurniture0.getAngle(), 0.01F);
      assertFalse(homePieceOfFurniture0.isModelMirrored());
      assertFalse(homePieceOfFurniture0.isBackFaceShown());
      assertFalse(homePieceOfFurniture0.isDoorOrWindow());
      assertTrue(homePieceOfFurniture0.isTexturable());
      assertFalse(homePieceOfFurniture0.isNameVisible());
      assertEquals("_])7g^)gy+P0XH3", homePieceOfFurniture0.getName());
      
      HomeFurnitureGroup homeFurnitureGroup0 = new HomeFurnitureGroup(linkedList0, "DEPTH");
      assertTrue(linkedList0.contains(homePieceOfFurniture0));
      assertEquals(1, linkedList0.size());
      assertEquals(124.48999F, homeFurnitureGroup0.getWidth(), 0.01F);
      assertEquals(62.244995F, homeFurnitureGroup0.getX(), 0.01F);
      assertNull(homeFurnitureGroup0.getDescription());
      assertEquals(1.0F, homeFurnitureGroup0.getElevation(), 0.01F);
      assertTrue(homeFurnitureGroup0.isDeformable());
      assertEquals(0.0F, homeFurnitureGroup0.getNameXOffset(), 0.01F);
      assertNull(homeFurnitureGroup0.getColor());
      assertEquals(1.0F, homeFurnitureGroup0.getGroundElevation(), 0.01F);
      assertFalse(homeFurnitureGroup0.isBackFaceShown());
      assertNull(homeFurnitureGroup0.getCurrency());
      assertEquals(5.2831855F, homeFurnitureGroup0.getAngle(), 0.01F);
      assertTrue(homeFurnitureGroup0.isTexturable());
      assertFalse(homeFurnitureGroup0.isModelMirrored());
      assertEquals("DEPTH", homeFurnitureGroup0.getName());
      assertFalse(homeFurnitureGroup0.isNameVisible());
      assertFalse(homeFurnitureGroup0.isDoorOrWindow());
      assertEquals(2.000213E-6F, homeFurnitureGroup0.getY(), 0.01F);
      assertTrue(homeFurnitureGroup0.isVisible());
      assertEquals(0.0F, homeFurnitureGroup0.getNameYOffset(), 0.01F);
      assertEquals(1.0F, homeFurnitureGroup0.getHeight(), 0.01F);
      assertFalse(homeFurnitureGroup0.isMovable());
      assertNull(homeFurnitureGroup0.getShininess());
      assertEquals(0.0F, homeFurnitureGroup0.getNameAngle(), 0.01F);
      assertTrue(homeFurnitureGroup0.isResizable());
      assertNull(homeFurnitureGroup0.getCatalogId());
      assertNull(homeFurnitureGroup0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeFurnitureGroup0.getDepth(), 0.01F);
      assertNotNull(homeFurnitureGroup0);
      
      float[][] floatArray1 = homeFurnitureGroup0.getModelRotation();
      assertEquals(3, floatArray1.length);
      assertTrue(linkedList0.contains(homePieceOfFurniture0));
      assertEquals(1, linkedList0.size());
      assertEquals(124.48999F, homeFurnitureGroup0.getWidth(), 0.01F);
      assertEquals(62.244995F, homeFurnitureGroup0.getX(), 0.01F);
      assertNull(homeFurnitureGroup0.getDescription());
      assertEquals(1.0F, homeFurnitureGroup0.getElevation(), 0.01F);
      assertTrue(homeFurnitureGroup0.isDeformable());
      assertEquals(0.0F, homeFurnitureGroup0.getNameXOffset(), 0.01F);
      assertNull(homeFurnitureGroup0.getColor());
      assertEquals(1.0F, homeFurnitureGroup0.getGroundElevation(), 0.01F);
      assertFalse(homeFurnitureGroup0.isBackFaceShown());
      assertNull(homeFurnitureGroup0.getCurrency());
      assertEquals(5.2831855F, homeFurnitureGroup0.getAngle(), 0.01F);
      assertTrue(homeFurnitureGroup0.isTexturable());
      assertFalse(homeFurnitureGroup0.isModelMirrored());
      assertEquals("DEPTH", homeFurnitureGroup0.getName());
      assertFalse(homeFurnitureGroup0.isNameVisible());
      assertFalse(homeFurnitureGroup0.isDoorOrWindow());
      assertEquals(2.000213E-6F, homeFurnitureGroup0.getY(), 0.01F);
      assertTrue(homeFurnitureGroup0.isVisible());
      assertEquals(0.0F, homeFurnitureGroup0.getNameYOffset(), 0.01F);
      assertEquals(1.0F, homeFurnitureGroup0.getHeight(), 0.01F);
      assertFalse(homeFurnitureGroup0.isMovable());
      assertNull(homeFurnitureGroup0.getShininess());
      assertEquals(0.0F, homeFurnitureGroup0.getNameAngle(), 0.01F);
      assertTrue(homeFurnitureGroup0.isResizable());
      assertNull(homeFurnitureGroup0.getCatalogId());
      assertNull(homeFurnitureGroup0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeFurnitureGroup0.getDepth(), 0.01F);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertNotNull(floatArray1);
      assertNotSame(floatArray1, floatArray0);
      
      HomePieceOfFurniture homePieceOfFurniture1 = linkedList0.pop();
      assertFalse(linkedList0.contains(homePieceOfFurniture1));
      assertEquals(0, linkedList0.size());
      assertEquals(0.0F, homePieceOfFurniture1.getY(), 0.01F);
      assertFalse(homePieceOfFurniture1.isDoorOrWindow());
      assertFalse(homePieceOfFurniture1.isBackFaceShown());
      assertNull(homePieceOfFurniture1.getColor());
      assertEquals(1.0F, homePieceOfFurniture1.getGroundElevation(), 0.01F);
      assertEquals(5.2831855F, homePieceOfFurniture1.getAngle(), 0.01F);
      assertNull(homePieceOfFurniture1.getCurrency());
      assertTrue(homePieceOfFurniture1.isTexturable());
      assertEquals(0.0F, homePieceOfFurniture1.getNameYOffset(), 0.01F);
      assertEquals("_])7g^)gy+P0XH3", homePieceOfFurniture1.getName());
      assertFalse(homePieceOfFurniture1.isNameVisible());
      assertEquals("_])7g^)gy+P0XH3", homePieceOfFurniture1.getCatalogId());
      assertFalse(homePieceOfFurniture1.isModelMirrored());
      assertEquals(124.49F, homePieceOfFurniture1.getWidth(), 0.01F);
      assertEquals(62.245F, homePieceOfFurniture1.getX(), 0.01F);
      assertFalse(homePieceOfFurniture1.isMovable());
      assertEquals(1.0F, homePieceOfFurniture1.getHeight(), 0.01F);
      assertEquals(1.0F, homePieceOfFurniture1.getElevation(), 0.01F);
      assertEquals("_])7g^)gy+P0XH3", homePieceOfFurniture1.getDescription());
      assertTrue(homePieceOfFurniture1.isDeformable());
      assertEquals(0.0F, homePieceOfFurniture1.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture1.getNameAngle(), 0.01F);
      assertTrue(homePieceOfFurniture1.isResizable());
      assertTrue(homePieceOfFurniture1.isVisible());
      assertNull(homePieceOfFurniture1.getStaircaseCutOutShape());
      assertNull(homePieceOfFurniture1.getShininess());
      assertEquals(0.0F, homePieceOfFurniture1.getDepth(), 0.01F);
      assertNotNull(homePieceOfFurniture1);
      assertSame(homePieceOfFurniture1, homePieceOfFurniture0);
      
      HomeFurnitureGroup homeFurnitureGroup1 = homeFurnitureGroup0.clone();
      assertFalse(linkedList0.contains(homePieceOfFurniture1));
      assertEquals(2.000213E-6F, homeFurnitureGroup1.getY(), 0.01F);
      assertNull(homeFurnitureGroup1.getCatalogId());
      assertNull(homeFurnitureGroup1.getShininess());
      assertTrue(homeFurnitureGroup1.isVisible());
      assertFalse(homeFurnitureGroup1.isMovable());
      assertEquals(1.0F, homeFurnitureGroup1.getHeight(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup1.getNameYOffset(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup1.getNameAngle(), 0.01F);
      assertNull(homeFurnitureGroup1.getStaircaseCutOutShape());
      assertTrue(homeFurnitureGroup1.isResizable());
      assertEquals(0.0F, homeFurnitureGroup1.getDepth(), 0.01F);
      assertFalse(homeFurnitureGroup1.isDoorOrWindow());
      assertEquals(62.244995F, homeFurnitureGroup1.getX(), 0.01F);
      assertEquals(124.48999F, homeFurnitureGroup1.getWidth(), 0.01F);
      assertTrue(homeFurnitureGroup1.isDeformable());
      assertEquals(1.0F, homeFurnitureGroup1.getElevation(), 0.01F);
      assertTrue(homeFurnitureGroup1.isTexturable());
      assertNull(homeFurnitureGroup1.getColor());
      assertEquals(0.0F, homeFurnitureGroup1.getNameXOffset(), 0.01F);
      assertEquals(1.0F, homeFurnitureGroup1.getGroundElevation(), 0.01F);
      assertEquals("DEPTH", homeFurnitureGroup1.getName());
      assertNull(homeFurnitureGroup1.getDescription());
      assertEquals(5.2831855F, homeFurnitureGroup1.getAngle(), 0.01F);
      assertFalse(homeFurnitureGroup1.isModelMirrored());
      assertNull(homeFurnitureGroup1.getCurrency());
      assertFalse(homeFurnitureGroup1.isBackFaceShown());
      assertFalse(homeFurnitureGroup1.isNameVisible());
      assertEquals(0, linkedList0.size());
      assertEquals(124.48999F, homeFurnitureGroup0.getWidth(), 0.01F);
      assertEquals(62.244995F, homeFurnitureGroup0.getX(), 0.01F);
      assertNull(homeFurnitureGroup0.getDescription());
      assertEquals(1.0F, homeFurnitureGroup0.getElevation(), 0.01F);
      assertTrue(homeFurnitureGroup0.isDeformable());
      assertEquals(0.0F, homeFurnitureGroup0.getNameXOffset(), 0.01F);
      assertNull(homeFurnitureGroup0.getColor());
      assertEquals(1.0F, homeFurnitureGroup0.getGroundElevation(), 0.01F);
      assertFalse(homeFurnitureGroup0.isBackFaceShown());
      assertNull(homeFurnitureGroup0.getCurrency());
      assertEquals(5.2831855F, homeFurnitureGroup0.getAngle(), 0.01F);
      assertTrue(homeFurnitureGroup0.isTexturable());
      assertFalse(homeFurnitureGroup0.isModelMirrored());
      assertEquals("DEPTH", homeFurnitureGroup0.getName());
      assertFalse(homeFurnitureGroup0.isNameVisible());
      assertFalse(homeFurnitureGroup0.isDoorOrWindow());
      assertEquals(2.000213E-6F, homeFurnitureGroup0.getY(), 0.01F);
      assertTrue(homeFurnitureGroup0.isVisible());
      assertEquals(0.0F, homeFurnitureGroup0.getNameYOffset(), 0.01F);
      assertEquals(1.0F, homeFurnitureGroup0.getHeight(), 0.01F);
      assertFalse(homeFurnitureGroup0.isMovable());
      assertNull(homeFurnitureGroup0.getShininess());
      assertEquals(0.0F, homeFurnitureGroup0.getNameAngle(), 0.01F);
      assertTrue(homeFurnitureGroup0.isResizable());
      assertNull(homeFurnitureGroup0.getCatalogId());
      assertNull(homeFurnitureGroup0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeFurnitureGroup0.getDepth(), 0.01F);
      assertFalse(homeFurnitureGroup1.equals((Object)homeFurnitureGroup0));
      assertNotNull(homeFurnitureGroup1);
      assertNotSame(homeFurnitureGroup1, homeFurnitureGroup0);
      assertNotSame(homeFurnitureGroup0, homeFurnitureGroup1);
      
      Content content0 = homeFurnitureGroup0.getModel();
      assertFalse(linkedList0.contains(homePieceOfFurniture1));
      assertEquals(0, linkedList0.size());
      assertEquals(124.48999F, homeFurnitureGroup0.getWidth(), 0.01F);
      assertEquals(62.244995F, homeFurnitureGroup0.getX(), 0.01F);
      assertNull(homeFurnitureGroup0.getDescription());
      assertEquals(1.0F, homeFurnitureGroup0.getElevation(), 0.01F);
      assertTrue(homeFurnitureGroup0.isDeformable());
      assertEquals(0.0F, homeFurnitureGroup0.getNameXOffset(), 0.01F);
      assertNull(homeFurnitureGroup0.getColor());
      assertEquals(1.0F, homeFurnitureGroup0.getGroundElevation(), 0.01F);
      assertFalse(homeFurnitureGroup0.isBackFaceShown());
      assertNull(homeFurnitureGroup0.getCurrency());
      assertEquals(5.2831855F, homeFurnitureGroup0.getAngle(), 0.01F);
      assertTrue(homeFurnitureGroup0.isTexturable());
      assertFalse(homeFurnitureGroup0.isModelMirrored());
      assertEquals("DEPTH", homeFurnitureGroup0.getName());
      assertFalse(homeFurnitureGroup0.isNameVisible());
      assertFalse(homeFurnitureGroup0.isDoorOrWindow());
      assertEquals(2.000213E-6F, homeFurnitureGroup0.getY(), 0.01F);
      assertTrue(homeFurnitureGroup0.isVisible());
      assertEquals(0.0F, homeFurnitureGroup0.getNameYOffset(), 0.01F);
      assertEquals(1.0F, homeFurnitureGroup0.getHeight(), 0.01F);
      assertFalse(homeFurnitureGroup0.isMovable());
      assertNull(homeFurnitureGroup0.getShininess());
      assertEquals(0.0F, homeFurnitureGroup0.getNameAngle(), 0.01F);
      assertTrue(homeFurnitureGroup0.isResizable());
      assertNull(homeFurnitureGroup0.getCatalogId());
      assertNull(homeFurnitureGroup0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeFurnitureGroup0.getDepth(), 0.01F);
      assertFalse(homeFurnitureGroup0.equals((Object)homeFurnitureGroup1));
      assertNull(content0);
      assertNotSame(homeFurnitureGroup0, homeFurnitureGroup1);
      
      homeFurnitureGroup1.setAngle(308.4429F);
      assertFalse(linkedList0.contains(homePieceOfFurniture1));
      assertEquals(2.000213E-6F, homeFurnitureGroup1.getY(), 0.01F);
      assertNull(homeFurnitureGroup1.getCatalogId());
      assertNull(homeFurnitureGroup1.getShininess());
      assertTrue(homeFurnitureGroup1.isVisible());
      assertFalse(homeFurnitureGroup1.isMovable());
      assertEquals(1.0F, homeFurnitureGroup1.getHeight(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup1.getNameYOffset(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup1.getNameAngle(), 0.01F);
      assertNull(homeFurnitureGroup1.getStaircaseCutOutShape());
      assertTrue(homeFurnitureGroup1.isResizable());
      assertEquals(0.0F, homeFurnitureGroup1.getDepth(), 0.01F);
      assertFalse(homeFurnitureGroup1.isDoorOrWindow());
      assertEquals(62.244995F, homeFurnitureGroup1.getX(), 0.01F);
      assertEquals(124.48999F, homeFurnitureGroup1.getWidth(), 0.01F);
      assertTrue(homeFurnitureGroup1.isDeformable());
      assertEquals(1.0F, homeFurnitureGroup1.getElevation(), 0.01F);
      assertEquals(0.5668216F, homeFurnitureGroup1.getAngle(), 0.01F);
      assertTrue(homeFurnitureGroup1.isTexturable());
      assertNull(homeFurnitureGroup1.getColor());
      assertEquals(0.0F, homeFurnitureGroup1.getNameXOffset(), 0.01F);
      assertEquals(1.0F, homeFurnitureGroup1.getGroundElevation(), 0.01F);
      assertEquals("DEPTH", homeFurnitureGroup1.getName());
      assertNull(homeFurnitureGroup1.getDescription());
      assertFalse(homeFurnitureGroup1.isModelMirrored());
      assertNull(homeFurnitureGroup1.getCurrency());
      assertFalse(homeFurnitureGroup1.isBackFaceShown());
      assertFalse(homeFurnitureGroup1.isNameVisible());
      assertEquals(0, linkedList0.size());
      assertEquals(124.48999F, homeFurnitureGroup0.getWidth(), 0.01F);
      assertEquals(62.244995F, homeFurnitureGroup0.getX(), 0.01F);
      assertNull(homeFurnitureGroup0.getDescription());
      assertEquals(1.0F, homeFurnitureGroup0.getElevation(), 0.01F);
      assertTrue(homeFurnitureGroup0.isDeformable());
      assertEquals(0.0F, homeFurnitureGroup0.getNameXOffset(), 0.01F);
      assertNull(homeFurnitureGroup0.getColor());
      assertEquals(1.0F, homeFurnitureGroup0.getGroundElevation(), 0.01F);
      assertFalse(homeFurnitureGroup0.isBackFaceShown());
      assertNull(homeFurnitureGroup0.getCurrency());
      assertEquals(5.2831855F, homeFurnitureGroup0.getAngle(), 0.01F);
      assertTrue(homeFurnitureGroup0.isTexturable());
      assertFalse(homeFurnitureGroup0.isModelMirrored());
      assertEquals("DEPTH", homeFurnitureGroup0.getName());
      assertFalse(homeFurnitureGroup0.isNameVisible());
      assertFalse(homeFurnitureGroup0.isDoorOrWindow());
      assertEquals(2.000213E-6F, homeFurnitureGroup0.getY(), 0.01F);
      assertTrue(homeFurnitureGroup0.isVisible());
      assertEquals(0.0F, homeFurnitureGroup0.getNameYOffset(), 0.01F);
      assertEquals(1.0F, homeFurnitureGroup0.getHeight(), 0.01F);
      assertFalse(homeFurnitureGroup0.isMovable());
      assertNull(homeFurnitureGroup0.getShininess());
      assertEquals(0.0F, homeFurnitureGroup0.getNameAngle(), 0.01F);
      assertTrue(homeFurnitureGroup0.isResizable());
      assertNull(homeFurnitureGroup0.getCatalogId());
      assertNull(homeFurnitureGroup0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeFurnitureGroup0.getDepth(), 0.01F);
      assertFalse(homeFurnitureGroup1.equals((Object)homeFurnitureGroup0));
      assertFalse(homeFurnitureGroup0.equals((Object)homeFurnitureGroup1));
      assertNotSame(homeFurnitureGroup1, homeFurnitureGroup0);
      assertNotSame(homeFurnitureGroup0, homeFurnitureGroup1);
      
      homeFurnitureGroup1.setHeight(884.7593F);
      assertFalse(linkedList0.contains(homePieceOfFurniture1));
      assertEquals(2.000213E-6F, homeFurnitureGroup1.getY(), 0.01F);
      assertNull(homeFurnitureGroup1.getCatalogId());
      assertNull(homeFurnitureGroup1.getShininess());
      assertTrue(homeFurnitureGroup1.isVisible());
      assertFalse(homeFurnitureGroup1.isMovable());
      assertEquals(0.0F, homeFurnitureGroup1.getNameYOffset(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup1.getNameAngle(), 0.01F);
      assertNull(homeFurnitureGroup1.getStaircaseCutOutShape());
      assertTrue(homeFurnitureGroup1.isResizable());
      assertEquals(0.0F, homeFurnitureGroup1.getDepth(), 0.01F);
      assertFalse(homeFurnitureGroup1.isDoorOrWindow());
      assertEquals(62.244995F, homeFurnitureGroup1.getX(), 0.01F);
      assertEquals(124.48999F, homeFurnitureGroup1.getWidth(), 0.01F);
      assertTrue(homeFurnitureGroup1.isDeformable());
      assertEquals(1.0F, homeFurnitureGroup1.getElevation(), 0.01F);
      assertEquals(0.5668216F, homeFurnitureGroup1.getAngle(), 0.01F);
      assertTrue(homeFurnitureGroup1.isTexturable());
      assertNull(homeFurnitureGroup1.getColor());
      assertEquals(0.0F, homeFurnitureGroup1.getNameXOffset(), 0.01F);
      assertEquals(1.0F, homeFurnitureGroup1.getGroundElevation(), 0.01F);
      assertEquals("DEPTH", homeFurnitureGroup1.getName());
      assertNull(homeFurnitureGroup1.getDescription());
      assertFalse(homeFurnitureGroup1.isModelMirrored());
      assertEquals(884.7593F, homeFurnitureGroup1.getHeight(), 0.01F);
      assertNull(homeFurnitureGroup1.getCurrency());
      assertFalse(homeFurnitureGroup1.isBackFaceShown());
      assertFalse(homeFurnitureGroup1.isNameVisible());
      assertEquals(0, linkedList0.size());
      assertEquals(124.48999F, homeFurnitureGroup0.getWidth(), 0.01F);
      assertEquals(62.244995F, homeFurnitureGroup0.getX(), 0.01F);
      assertNull(homeFurnitureGroup0.getDescription());
      assertEquals(1.0F, homeFurnitureGroup0.getElevation(), 0.01F);
      assertTrue(homeFurnitureGroup0.isDeformable());
      assertEquals(0.0F, homeFurnitureGroup0.getNameXOffset(), 0.01F);
      assertNull(homeFurnitureGroup0.getColor());
      assertEquals(1.0F, homeFurnitureGroup0.getGroundElevation(), 0.01F);
      assertFalse(homeFurnitureGroup0.isBackFaceShown());
      assertNull(homeFurnitureGroup0.getCurrency());
      assertEquals(5.2831855F, homeFurnitureGroup0.getAngle(), 0.01F);
      assertTrue(homeFurnitureGroup0.isTexturable());
      assertFalse(homeFurnitureGroup0.isModelMirrored());
      assertEquals("DEPTH", homeFurnitureGroup0.getName());
      assertFalse(homeFurnitureGroup0.isNameVisible());
      assertFalse(homeFurnitureGroup0.isDoorOrWindow());
      assertEquals(2.000213E-6F, homeFurnitureGroup0.getY(), 0.01F);
      assertTrue(homeFurnitureGroup0.isVisible());
      assertEquals(0.0F, homeFurnitureGroup0.getNameYOffset(), 0.01F);
      assertEquals(1.0F, homeFurnitureGroup0.getHeight(), 0.01F);
      assertFalse(homeFurnitureGroup0.isMovable());
      assertNull(homeFurnitureGroup0.getShininess());
      assertEquals(0.0F, homeFurnitureGroup0.getNameAngle(), 0.01F);
      assertTrue(homeFurnitureGroup0.isResizable());
      assertNull(homeFurnitureGroup0.getCatalogId());
      assertNull(homeFurnitureGroup0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeFurnitureGroup0.getDepth(), 0.01F);
      assertFalse(homeFurnitureGroup1.equals((Object)homeFurnitureGroup0));
      assertFalse(homeFurnitureGroup0.equals((Object)homeFurnitureGroup1));
      assertNotSame(homeFurnitureGroup1, homeFurnitureGroup0);
      assertNotSame(homeFurnitureGroup0, homeFurnitureGroup1);
      
      BigDecimal bigDecimal1 = homeFurnitureGroup1.getPrice();
      assertFalse(linkedList0.contains(homePieceOfFurniture1));
      assertEquals(2.000213E-6F, homeFurnitureGroup1.getY(), 0.01F);
      assertNull(homeFurnitureGroup1.getCatalogId());
      assertNull(homeFurnitureGroup1.getShininess());
      assertTrue(homeFurnitureGroup1.isVisible());
      assertFalse(homeFurnitureGroup1.isMovable());
      assertEquals(0.0F, homeFurnitureGroup1.getNameYOffset(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup1.getNameAngle(), 0.01F);
      assertNull(homeFurnitureGroup1.getStaircaseCutOutShape());
      assertTrue(homeFurnitureGroup1.isResizable());
      assertEquals(0.0F, homeFurnitureGroup1.getDepth(), 0.01F);
      assertFalse(homeFurnitureGroup1.isDoorOrWindow());
      assertEquals(62.244995F, homeFurnitureGroup1.getX(), 0.01F);
      assertEquals(124.48999F, homeFurnitureGroup1.getWidth(), 0.01F);
      assertTrue(homeFurnitureGroup1.isDeformable());
      assertEquals(1.0F, homeFurnitureGroup1.getElevation(), 0.01F);
      assertEquals(0.5668216F, homeFurnitureGroup1.getAngle(), 0.01F);
      assertTrue(homeFurnitureGroup1.isTexturable());
      assertNull(homeFurnitureGroup1.getColor());
      assertEquals(0.0F, homeFurnitureGroup1.getNameXOffset(), 0.01F);
      assertEquals(1.0F, homeFurnitureGroup1.getGroundElevation(), 0.01F);
      assertEquals("DEPTH", homeFurnitureGroup1.getName());
      assertNull(homeFurnitureGroup1.getDescription());
      assertFalse(homeFurnitureGroup1.isModelMirrored());
      assertEquals(884.7593F, homeFurnitureGroup1.getHeight(), 0.01F);
      assertNull(homeFurnitureGroup1.getCurrency());
      assertFalse(homeFurnitureGroup1.isBackFaceShown());
      assertFalse(homeFurnitureGroup1.isNameVisible());
      assertEquals(0, linkedList0.size());
      assertEquals((byte) (-51), bigDecimal1.byteValue());
      assertEquals((short)1997, bigDecimal1.shortValue());
      assertEquals(124.48999F, homeFurnitureGroup0.getWidth(), 0.01F);
      assertEquals(62.244995F, homeFurnitureGroup0.getX(), 0.01F);
      assertNull(homeFurnitureGroup0.getDescription());
      assertEquals(1.0F, homeFurnitureGroup0.getElevation(), 0.01F);
      assertTrue(homeFurnitureGroup0.isDeformable());
      assertEquals(0.0F, homeFurnitureGroup0.getNameXOffset(), 0.01F);
      assertNull(homeFurnitureGroup0.getColor());
      assertEquals(1.0F, homeFurnitureGroup0.getGroundElevation(), 0.01F);
      assertFalse(homeFurnitureGroup0.isBackFaceShown());
      assertNull(homeFurnitureGroup0.getCurrency());
      assertEquals(5.2831855F, homeFurnitureGroup0.getAngle(), 0.01F);
      assertTrue(homeFurnitureGroup0.isTexturable());
      assertFalse(homeFurnitureGroup0.isModelMirrored());
      assertEquals("DEPTH", homeFurnitureGroup0.getName());
      assertFalse(homeFurnitureGroup0.isNameVisible());
      assertFalse(homeFurnitureGroup0.isDoorOrWindow());
      assertEquals(2.000213E-6F, homeFurnitureGroup0.getY(), 0.01F);
      assertTrue(homeFurnitureGroup0.isVisible());
      assertEquals(0.0F, homeFurnitureGroup0.getNameYOffset(), 0.01F);
      assertEquals(1.0F, homeFurnitureGroup0.getHeight(), 0.01F);
      assertFalse(homeFurnitureGroup0.isMovable());
      assertNull(homeFurnitureGroup0.getShininess());
      assertEquals(0.0F, homeFurnitureGroup0.getNameAngle(), 0.01F);
      assertTrue(homeFurnitureGroup0.isResizable());
      assertNull(homeFurnitureGroup0.getCatalogId());
      assertNull(homeFurnitureGroup0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeFurnitureGroup0.getDepth(), 0.01F);
      assertFalse(homeFurnitureGroup1.equals((Object)homeFurnitureGroup0));
      assertFalse(homeFurnitureGroup0.equals((Object)homeFurnitureGroup1));
      assertNotNull(bigDecimal1);
      assertNotSame(homeFurnitureGroup1, homeFurnitureGroup0);
      assertSame(bigDecimal1, bigDecimal0);
      assertNotSame(homeFurnitureGroup0, homeFurnitureGroup1);
      
      homeFurnitureGroup1.getPriceValueAddedTaxIncluded();
      homeFurnitureGroup0.getPlanIcon();
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      LinkedList<HomePieceOfFurniture> linkedList0 = new LinkedList<HomePieceOfFurniture>();
      ResourceURLContent resourceURLContent0 = new ResourceURLContent((URL) null, true);
      LightSource[] lightSourceArray0 = new LightSource[1];
      Float float0 = new Float(0.0);
      LightSource lightSource0 = new LightSource(88.9F, 1.0F, 1331.01F, 1997, float0);
      lightSourceArray0[0] = lightSource0;
      float[][] floatArray0 = new float[4][6];
      BigDecimal bigDecimal0 = new BigDecimal((long) 1997);
      CatalogLight catalogLight0 = new CatalogLight("_])7g^)gy+P0XH3", "_])7g^)gy+P0XH3", "_])7g^)gy+P0XH3", resourceURLContent0, resourceURLContent0, resourceURLContent0, 124.49F, 0.0F, 1.0F, 1.0F, false, lightSourceArray0, floatArray0, "", true, bigDecimal0, bigDecimal0);
      HomeLight homeLight0 = new HomeLight(catalogLight0);
      homeLight0.setAngle((-1.0F));
      HomePieceOfFurniture homePieceOfFurniture0 = new HomePieceOfFurniture(homeLight0);
      linkedList0.add(homePieceOfFurniture0);
      HomeFurnitureGroup homeFurnitureGroup0 = new HomeFurnitureGroup(linkedList0, "DEPTH");
      homeFurnitureGroup0.getModelRotation();
      linkedList0.pop();
      HomeFurnitureGroup homeFurnitureGroup1 = homeFurnitureGroup0.clone();
      homeFurnitureGroup0.getModel();
      homeFurnitureGroup1.setAngle(308.4429F);
      homeFurnitureGroup1.setHeight(884.7593F);
      homeFurnitureGroup1.getPrice();
      homeFurnitureGroup1.isDeformable();
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      LinkedList<HomePieceOfFurniture> linkedList0 = new LinkedList<HomePieceOfFurniture>();
      ResourceURLContent resourceURLContent0 = new ResourceURLContent((URL) null, true);
      LightSource[] lightSourceArray0 = new LightSource[1];
      float[][] floatArray0 = new float[4][6];
      CatalogLight catalogLight0 = new CatalogLight("9", "", "", resourceURLContent0, resourceURLContent0, resourceURLContent0, 0.3926991F, 2874.8F, 232.688F, 232.688F, true, lightSourceArray0, floatArray0, "_])7g^)gy+P0XH3", true, (BigDecimal) null, (BigDecimal) null);
      HomeLight homeLight0 = new HomeLight(catalogLight0);
      homeLight0.setNameVisible(true);
      HomePieceOfFurniture homePieceOfFurniture0 = new HomePieceOfFurniture(homeLight0);
      linkedList0.add(homePieceOfFurniture0);
      HomeFurnitureGroup homeFurnitureGroup0 = new HomeFurnitureGroup(linkedList0, "");
      linkedList0.pop();
      HomeFurnitureGroup homeFurnitureGroup1 = homeFurnitureGroup0.clone();
      homeFurnitureGroup1.getModel();
      CatalogTexture catalogTexture0 = new CatalogTexture("", (Content) null, 2874.8F, 0.39332533F, true);
      HomeTexture homeTexture0 = new HomeTexture(catalogTexture0);
      homeFurnitureGroup1.setTexture(homeTexture0);
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      LinkedList<HomePieceOfFurniture> linkedList0 = new LinkedList<HomePieceOfFurniture>();
      ResourceURLContent resourceURLContent0 = new ResourceURLContent((URL) null, true);
      LightSource[] lightSourceArray0 = new LightSource[1];
      Float float0 = new Float(0.0);
      float[][] floatArray0 = new float[4][6];
      BigDecimal bigDecimal0 = new BigDecimal((long) 2001);
      CatalogLight catalogLight0 = new CatalogLight("9", "DEPTH", "DEPTH", resourceURLContent0, resourceURLContent0, resourceURLContent0, 0.3926991F, 2001.0F, 1.0F, (-2885.0872F), true, lightSourceArray0, floatArray0, "DEPTH", true, bigDecimal0, bigDecimal0);
      HomeLight homeLight0 = new HomeLight(catalogLight0);
      homeLight0.setNameVisible(false);
      HomePieceOfFurniture homePieceOfFurniture0 = new HomePieceOfFurniture(catalogLight0);
      linkedList0.add((HomePieceOfFurniture) homeLight0);
      HomeFurnitureGroup homeFurnitureGroup0 = new HomeFurnitureGroup(linkedList0, "_])7g^)gy+P0XH3");
      linkedList0.pop();
      HomeFurnitureGroup homeFurnitureGroup1 = homeFurnitureGroup0.clone();
      homeFurnitureGroup0.getModel();
      homeFurnitureGroup1.setX((-1.0F));
      homeFurnitureGroup1.isResizable();
      Level level0 = new Level("", (-3682.2195F), (-592.9F), 2717.322F);
      homeFurnitureGroup1.setLevel(level0);
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      LinkedList<HomePieceOfFurniture> linkedList0 = new LinkedList<HomePieceOfFurniture>();
      ResourceURLContent resourceURLContent0 = new ResourceURLContent((URL) null, true);
      LightSource[] lightSourceArray0 = new LightSource[1];
      float[][] floatArray0 = new float[4][6];
      BigDecimal bigDecimal0 = new BigDecimal((long) 2001);
      CatalogLight catalogLight0 = new CatalogLight("9", "_])7g^)gy+P0XH3", "_])7g^)gy+P0XH3", resourceURLContent0, resourceURLContent0, resourceURLContent0, 2001, 2001.0F, 1.0F, (-2885.1F), true, lightSourceArray0, floatArray0, "_])7g^)gy+P0XH3", true, bigDecimal0, bigDecimal0);
      HomeLight homeLight0 = new HomeLight(catalogLight0);
      linkedList0.add((HomePieceOfFurniture) homeLight0);
      HomeFurnitureGroup homeFurnitureGroup0 = new HomeFurnitureGroup(linkedList0, "_])7g^)gy+P0XH3");
      linkedList0.pop();
      homeFurnitureGroup0.clone();
      homeFurnitureGroup0.getModel();
      CatalogTexture catalogTexture0 = new CatalogTexture("9", (Content) null, 2001.0F, 2001.0F);
      HomeTexture homeTexture0 = new HomeTexture(catalogTexture0);
      homeFurnitureGroup0.setTexture(homeTexture0);
      homeFurnitureGroup0.clone();
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      LinkedList<HomePieceOfFurniture> linkedList0 = new LinkedList<HomePieceOfFurniture>();
      ResourceURLContent resourceURLContent0 = new ResourceURLContent((URL) null, true);
      LightSource[] lightSourceArray0 = new LightSource[20];
      float[][] floatArray0 = new float[4][6];
      BigDecimal bigDecimal0 = BigDecimal.ZERO;
      bigDecimal0.movePointRight((-949));
      CatalogLight catalogLight0 = new CatalogLight("9", "DEPTH", "DEPTH", resourceURLContent0, resourceURLContent0, resourceURLContent0, 0.3926991F, 2001.0F, 1.0F, (-2885.0872F), true, lightSourceArray0, floatArray0, "DEPTH", true, bigDecimal0, bigDecimal0);
      HomeLight homeLight0 = new HomeLight(catalogLight0);
      homeLight0.setNameVisible(true);
      linkedList0.add((HomePieceOfFurniture) homeLight0);
      HomeFurnitureGroup homeFurnitureGroup0 = new HomeFurnitureGroup(linkedList0, (String) null);
      HomeFurnitureGroup homeFurnitureGroup1 = homeFurnitureGroup0.clone();
      homeFurnitureGroup1.getModel();
      homeFurnitureGroup0.setX(2001.0F);
      homeFurnitureGroup0.getTexture();
      homeFurnitureGroup1.setTexture((HomeTexture) null);
      homeFurnitureGroup1.getPriceValueAddedTaxIncluded();
      homeFurnitureGroup0.setModelMirrored(false);
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      LinkedList<HomePieceOfFurniture> linkedList0 = new LinkedList<HomePieceOfFurniture>();
      ResourceURLContent resourceURLContent0 = new ResourceURLContent((URL) null, true);
      LightSource[] lightSourceArray0 = new LightSource[1];
      float[][] floatArray0 = new float[4][6];
      BigDecimal bigDecimal0 = new BigDecimal((long) 2001);
      CatalogLight catalogLight0 = new CatalogLight("9", "DEPTH", "DEPTH", resourceURLContent0, resourceURLContent0, resourceURLContent0, 0.3926991F, 2001.0F, 1.0F, (-2885.0872F), true, lightSourceArray0, floatArray0, "DEPTH", true, bigDecimal0, bigDecimal0);
      HomeLight homeLight0 = new HomeLight(catalogLight0);
      homeLight0.setNameVisible(true);
      HomePieceOfFurniture homePieceOfFurniture0 = new HomePieceOfFurniture(catalogLight0);
      linkedList0.add((HomePieceOfFurniture) homeLight0);
      HomeFurnitureGroup homeFurnitureGroup0 = new HomeFurnitureGroup(linkedList0, "_])7g^)gy+P0XH3");
      linkedList0.pop();
      HomeFurnitureGroup homeFurnitureGroup1 = homeFurnitureGroup0.clone();
      homeFurnitureGroup0.getModel();
      homeFurnitureGroup1.setX(0.0F);
      homeFurnitureGroup0.getCurrency();
      homeFurnitureGroup0.isMovable();
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      LinkedList<HomePieceOfFurniture> linkedList0 = new LinkedList<HomePieceOfFurniture>();
      ResourceURLContent resourceURLContent0 = new ResourceURLContent((URL) null, true);
      LightSource[] lightSourceArray0 = new LightSource[1];
      float[][] floatArray0 = new float[4][6];
      BigDecimal bigDecimal0 = new BigDecimal((long) 2001);
      bigDecimal0.ulp();
      CatalogLight catalogLight0 = new CatalogLight("M19", "_])7g^)gy+P0XH3", "_])7g^)gy+P0XH3", resourceURLContent0, resourceURLContent0, resourceURLContent0, 2001, 2001.0F, 1.0F, 2001, true, lightSourceArray0, floatArray0, "_])7g^)gy+P0XH3", true, bigDecimal0, bigDecimal0);
      HomeLight homeLight0 = new HomeLight(catalogLight0);
      HomePieceOfFurniture homePieceOfFurniture0 = new HomePieceOfFurniture(catalogLight0);
      linkedList0.add((HomePieceOfFurniture) homeLight0);
      HomeFurnitureGroup homeFurnitureGroup0 = new HomeFurnitureGroup(linkedList0, "_])7g^)gy+P0XH3");
      HomeFurnitureGroup homeFurnitureGroup1 = new HomeFurnitureGroup(linkedList0, "M19");
      homeFurnitureGroup0.setDepth(2001);
      homeFurnitureGroup1.getValueAddedTax();
      homeFurnitureGroup0.getDepth();
      homeFurnitureGroup1.setAngle(2001.0F);
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      LinkedList<HomePieceOfFurniture> linkedList0 = new LinkedList<HomePieceOfFurniture>();
      ResourceURLContent resourceURLContent0 = new ResourceURLContent((URL) null, true);
      LightSource[] lightSourceArray0 = new LightSource[1];
      Float float0 = new Float(0.0);
      float[][] floatArray0 = new float[4][6];
      BigDecimal bigDecimal0 = new BigDecimal((-1L));
      BigDecimal bigDecimal1 = new BigDecimal((-1L));
      CatalogLight catalogLight0 = new CatalogLight("_])7g^)gy+P0XH3", "_])7g^)gy+P0XH3", "/<gAhL`8>", resourceURLContent0, resourceURLContent0, resourceURLContent0, 1331.01F, 1.0F, (-1L), 1.0F, false, lightSourceArray0, floatArray0, "DEPTH", true, bigDecimal1, bigDecimal0);
      HomeLight homeLight0 = new HomeLight(catalogLight0);
      HomePieceOfFurniture homePieceOfFurniture0 = new HomePieceOfFurniture(homeLight0);
      linkedList0.add((HomePieceOfFurniture) homeLight0);
      PropertyChangeListener propertyChangeListener0 = mock(PropertyChangeListener.class, new ViolatedAssumptionAnswer());
      PropertyChangeListenerProxy propertyChangeListenerProxy0 = new PropertyChangeListenerProxy("", propertyChangeListener0);
      HomeFurnitureGroup homeFurnitureGroup0 = new HomeFurnitureGroup(linkedList0, "");
      HomeFurnitureGroup homeFurnitureGroup1 = homeFurnitureGroup0.clone();
      homeFurnitureGroup0.setHeight((-1L));
      HomeFurnitureGroup homeFurnitureGroup2 = new HomeFurnitureGroup(linkedList0, "");
      homeFurnitureGroup2.getCatalogId();
      homeFurnitureGroup0.isDoorOrWindow();
      homeFurnitureGroup1.setModelMirrored(false);
      homeFurnitureGroup2.setWidth((-1605.139F));
      homeFurnitureGroup1.isDoorOrWindow();
      homeFurnitureGroup2.isTexturable();
      homeFurnitureGroup1.setElevation(1.0F);
      homeFurnitureGroup0.setX(1331.01F);
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      LinkedList<HomePieceOfFurniture> linkedList0 = new LinkedList<HomePieceOfFurniture>();
      ResourceURLContent resourceURLContent0 = new ResourceURLContent((URL) null, true);
      LightSource[] lightSourceArray0 = new LightSource[1];
      float[][] floatArray0 = new float[4][6];
      BigDecimal bigDecimal0 = BigDecimal.ZERO;
      CatalogLight catalogLight0 = new CatalogLight("9", "DEPTH", "DEPTH", resourceURLContent0, resourceURLContent0, resourceURLContent0, 0.3926991F, 2001.0F, 1.0F, 1.0F, true, lightSourceArray0, floatArray0, "DEPTH", true, bigDecimal0, bigDecimal0);
      HomeLight homeLight0 = new HomeLight(catalogLight0);
      homeLight0.setNameVisible(true);
      linkedList0.add((HomePieceOfFurniture) homeLight0);
      linkedList0.add((HomePieceOfFurniture) homeLight0);
      HomeFurnitureGroup homeFurnitureGroup0 = new HomeFurnitureGroup(linkedList0, (String) null);
      HomeFurnitureGroup homeFurnitureGroup1 = homeFurnitureGroup0.clone();
      homeFurnitureGroup1.getModel();
      homeFurnitureGroup1.getDepth();
      homeFurnitureGroup1.setWidth(2001.0F);
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      LinkedList<HomePieceOfFurniture> linkedList0 = new LinkedList<HomePieceOfFurniture>();
      ResourceURLContent resourceURLContent0 = new ResourceURLContent((URL) null, true);
      LightSource[] lightSourceArray0 = new LightSource[1];
      Float float0 = new Float(0.0);
      LightSource lightSource0 = new LightSource(2874.8F, 1.0F, 1331.01F, 2001, float0);
      lightSourceArray0[0] = lightSource0;
      float[][] floatArray0 = new float[4][6];
      BigDecimal bigDecimal0 = new BigDecimal((long) 2001);
      CatalogLight catalogLight0 = new CatalogLight("9", "DEPTH", "DEPTH", resourceURLContent0, resourceURLContent0, resourceURLContent0, 0.3926991F, 0.3926991F, 1.0F, (-2885.0872F), true, lightSourceArray0, floatArray0, "DEPTH", true, bigDecimal0, bigDecimal0);
      HomeLight homeLight0 = new HomeLight(catalogLight0);
      homeLight0.setPower((-540.37787F));
      homeLight0.setY(0.3926991F);
      HomePieceOfFurniture homePieceOfFurniture0 = new HomePieceOfFurniture(catalogLight0);
      linkedList0.add((HomePieceOfFurniture) homeLight0);
      HomeFurnitureGroup homeFurnitureGroup0 = new HomeFurnitureGroup(linkedList0, "_])7g^)gy+P0XH3");
      linkedList0.pop();
      homeFurnitureGroup0.getModel();
      homeFurnitureGroup0.setVisible(false);
      homeFurnitureGroup0.setHeight(2.0F);
      homeFurnitureGroup0.setDepth(1331.01F);
      float float1 = new Float((float) 2001);
      homeFurnitureGroup0.getValueAddedTax();
      homeFurnitureGroup0.intersectsRectangle(0.3926991F, 2874.8F, (-540.37787F), 0.0F);
      homeFurnitureGroup0.getStaircaseCutOutShape();
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      LinkedList<HomePieceOfFurniture> linkedList0 = new LinkedList<HomePieceOfFurniture>();
      ResourceURLContent resourceURLContent0 = new ResourceURLContent((URL) null, true);
      LightSource[] lightSourceArray0 = new LightSource[1];
      float[][] floatArray0 = new float[4][6];
      BigDecimal bigDecimal0 = new BigDecimal((long) 2001);
      CatalogLight catalogLight0 = new CatalogLight("9", "DEH", "DEH", resourceURLContent0, resourceURLContent0, resourceURLContent0, 0.3926991F, 2001, 1.0F, (-2885.0872F), true, lightSourceArray0, floatArray0, "DEH", true, bigDecimal0, bigDecimal0);
      HomeLight homeLight0 = new HomeLight(catalogLight0);
      linkedList0.add((HomePieceOfFurniture) homeLight0);
      HomeFurnitureGroup homeFurnitureGroup0 = new HomeFurnitureGroup(linkedList0, "");
      linkedList0.pop();
      HomeFurnitureGroup homeFurnitureGroup1 = homeFurnitureGroup0.clone();
      linkedList0.addFirst(homeFurnitureGroup0);
      homeFurnitureGroup0.isDoorOrWindow();
      homeFurnitureGroup0.getIcon();
      HomeFurnitureGroup homeFurnitureGroup2 = homeFurnitureGroup1.clone();
      HomeFurnitureGroup homeFurnitureGroup3 = homeFurnitureGroup2.clone();
      homeFurnitureGroup3.setVisible(false);
      homeFurnitureGroup1.move((-1.0F), 1.0F);
      homeFurnitureGroup0.setHeight(0.0F);
      homeFurnitureGroup0.getFurniture();
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      LinkedList<HomePieceOfFurniture> linkedList0 = new LinkedList<HomePieceOfFurniture>();
      ResourceURLContent resourceURLContent0 = new ResourceURLContent((URL) null, true);
      LightSource[] lightSourceArray0 = new LightSource[1];
      float[][] floatArray0 = new float[4][6];
      BigDecimal bigDecimal0 = BigDecimal.ZERO;
      CatalogLight catalogLight0 = new CatalogLight("9", "DEPTH", "DEPTH", resourceURLContent0, resourceURLContent0, resourceURLContent0, 0.3926991F, 2001.0F, 1.0F, 1.0F, true, lightSourceArray0, floatArray0, "DEPTH", true, bigDecimal0, bigDecimal0);
      HomeLight homeLight0 = new HomeLight(catalogLight0);
      bigDecimal0.movePointLeft((-2147120043));
      homeLight0.setNameVisible(true);
      linkedList0.add((HomePieceOfFurniture) homeLight0);
      HomeFurnitureGroup homeFurnitureGroup0 = new HomeFurnitureGroup(linkedList0, (String) null);
      Level level0 = new Level("", (-2147120043), 1.0F, 0.3926991F);
      homeFurnitureGroup0.setLevel(level0);
      homeFurnitureGroup0.setDepth(1.0F);
      homeFurnitureGroup0.getValueAddedTax();
      homeFurnitureGroup0.getDepth();
      homeFurnitureGroup0.setAngle(1.0F);
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      LinkedList<HomePieceOfFurniture> linkedList0 = new LinkedList<HomePieceOfFurniture>();
      ResourceURLContent resourceURLContent0 = new ResourceURLContent((URL) null, true);
      LightSource[] lightSourceArray0 = new LightSource[1];
      float[][] floatArray0 = new float[4][6];
      BigDecimal bigDecimal0 = new BigDecimal((long) 2001);
      BigDecimal bigDecimal1 = new BigDecimal((-1L));
      BigDecimal bigDecimal2 = BigDecimal.valueOf((-1L), 2001);
      CatalogLight catalogLight0 = new CatalogLight("_])7g^)gy+P0XH3", "_])7g^)gy+P0XH3", "DEPTH", resourceURLContent0, resourceURLContent0, resourceURLContent0, 1331.01F, (-31.701214F), (-1L), (-31.701214F), true, lightSourceArray0, floatArray0, "DEPTH", true, bigDecimal2, bigDecimal1);
      HomeLight homeLight0 = new HomeLight(catalogLight0);
      linkedList0.add((HomePieceOfFurniture) homeLight0);
      PropertyChangeListener propertyChangeListener0 = mock(PropertyChangeListener.class, new ViolatedAssumptionAnswer());
      PropertyChangeListenerProxy propertyChangeListenerProxy0 = new PropertyChangeListenerProxy("", propertyChangeListener0);
      PropertyChangeListenerProxy propertyChangeListenerProxy1 = new PropertyChangeListenerProxy("", propertyChangeListenerProxy0);
      HomeFurnitureGroup homeFurnitureGroup0 = new HomeFurnitureGroup(linkedList0, "_])7g^)gy+P0XH3");
      homeFurnitureGroup0.setModelMirrored(false);
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      LinkedList<HomePieceOfFurniture> linkedList0 = new LinkedList<HomePieceOfFurniture>();
      ResourceURLContent resourceURLContent0 = new ResourceURLContent((URL) null, true);
      LightSource[] lightSourceArray0 = new LightSource[1];
      Float float0 = new Float(0.0);
      LightSource lightSource0 = new LightSource(2874.8F, 1.0F, 1331.01F, 2001, float0);
      float[][] floatArray0 = new float[4][6];
      BigDecimal bigDecimal0 = new BigDecimal((long) 2001);
      CatalogLight catalogLight0 = new CatalogLight("9", "DEPTH", "DEPTH", resourceURLContent0, resourceURLContent0, resourceURLContent0, 0.3926991F, 2001.0F, 1.0F, (-2885.0872F), true, lightSourceArray0, floatArray0, "DEPTH", true, bigDecimal0, bigDecimal0);
      HomeLight homeLight0 = new HomeLight(catalogLight0);
      homeLight0.setNameVisible(false);
      HomePieceOfFurniture homePieceOfFurniture0 = new HomePieceOfFurniture(catalogLight0);
      linkedList0.add((HomePieceOfFurniture) homeLight0);
      HomeFurnitureGroup homeFurnitureGroup0 = new HomeFurnitureGroup(linkedList0, "_])7g^)gy+P0XH3");
      linkedList0.pop();
      HomeFurnitureGroup homeFurnitureGroup1 = homeFurnitureGroup0.clone();
      homeFurnitureGroup0.getModel();
      homeFurnitureGroup1.setX((-1.0F));
      homeFurnitureGroup1.isResizable();
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      LinkedList<HomePieceOfFurniture> linkedList0 = new LinkedList<HomePieceOfFurniture>();
      ResourceURLContent resourceURLContent0 = new ResourceURLContent((URL) null, true);
      LightSource[] lightSourceArray0 = new LightSource[1];
      Float float0 = new Float(0.0);
      float[][] floatArray0 = new float[4][6];
      BigDecimal bigDecimal0 = new BigDecimal((-1L));
      BigDecimal bigDecimal1 = new BigDecimal((-1L));
      CatalogLight catalogLight0 = new CatalogLight("_])7g^)gy+P0XH3", "_])7g^)gy+P0XH3", "/<gAhL`8>", resourceURLContent0, resourceURLContent0, resourceURLContent0, 1331.01F, 1.0F, (-1L), 1.0F, false, lightSourceArray0, floatArray0, "DEPTH", true, bigDecimal1, bigDecimal0);
      HomeLight homeLight0 = new HomeLight(catalogLight0);
      linkedList0.add((HomePieceOfFurniture) homeLight0);
      HomeFurnitureGroup homeFurnitureGroup0 = new HomeFurnitureGroup(linkedList0, "z");
      HomeFurnitureGroup homeFurnitureGroup1 = homeFurnitureGroup0.clone();
      homeFurnitureGroup1.getCatalogId();
      CatalogLight catalogLight1 = new CatalogLight("DEPTH", (String) null, "", resourceURLContent0, resourceURLContent0, resourceURLContent0, 1.0F, (-4727.1406F), (-4727.1406F), 1.0F, true, lightSourceArray0, floatArray0, (String) null, true, false, true, bigDecimal1, bigDecimal1);
      HomeFurnitureGroup homeFurnitureGroup2 = new HomeFurnitureGroup(linkedList0, "/<gAhL`8>");
      HomeFurnitureGroup homeFurnitureGroup3 = homeFurnitureGroup0.clone();
      homeFurnitureGroup3.setModelMirrored(false);
      homeFurnitureGroup2.setWidth(3.4028235E38F);
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      LinkedList<HomePieceOfFurniture> linkedList0 = new LinkedList<HomePieceOfFurniture>();
      ResourceURLContent resourceURLContent0 = new ResourceURLContent((URL) null, true);
      LightSource[] lightSourceArray0 = new LightSource[1];
      Float float0 = new Float(0.0);
      LightSource lightSource0 = new LightSource(88.9F, 0.84111226F, 1331.01F, (-1), float0);
      lightSourceArray0[0] = lightSource0;
      float[][] floatArray0 = new float[4][6];
      BigDecimal bigDecimal0 = new BigDecimal((long) (-1));
      CatalogLight catalogLight0 = new CatalogLight("_])7g^)gy+P0XH3", "_])7g^)gy+P0XH3", "_])7g^)gy+P0XH3", resourceURLContent0, resourceURLContent0, resourceURLContent0, 124.49F, 0.0F, 0.84111226F, 0.84111226F, true, lightSourceArray0, floatArray0, "", true, bigDecimal0, bigDecimal0);
      HomeLight homeLight0 = new HomeLight(catalogLight0);
      HomePieceOfFurniture homePieceOfFurniture0 = new HomePieceOfFurniture(homeLight0);
      linkedList0.add(homePieceOfFurniture0);
      HomeFurnitureGroup homeFurnitureGroup0 = new HomeFurnitureGroup(linkedList0, "DEPTH");
      homeFurnitureGroup0.getModelRotation();
      linkedList0.pop();
      HomeFurnitureGroup homeFurnitureGroup1 = homeFurnitureGroup0.clone();
      homeFurnitureGroup0.getModel();
      homeFurnitureGroup1.setHeight(884.7593F);
      homeFurnitureGroup0.isDoorOrWindow();
      homeFurnitureGroup1.setX(124.49F);
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      LinkedList<HomePieceOfFurniture> linkedList0 = new LinkedList<HomePieceOfFurniture>();
      ResourceURLContent resourceURLContent0 = new ResourceURLContent((URL) null, true);
      LightSource[] lightSourceArray0 = new LightSource[1];
      float[][] floatArray0 = new float[4][6];
      BigDecimal bigDecimal0 = new BigDecimal((long) 2001);
      CatalogLight catalogLight0 = new CatalogLight("9", "DEH", "DEH", resourceURLContent0, resourceURLContent0, resourceURLContent0, 0.3926991F, 2001.0F, 1.0F, (-2885.0872F), true, lightSourceArray0, floatArray0, "DEH", true, bigDecimal0, bigDecimal0);
      HomeLight homeLight0 = new HomeLight(catalogLight0);
      linkedList0.add((HomePieceOfFurniture) homeLight0);
      HomeFurnitureGroup homeFurnitureGroup0 = new HomeFurnitureGroup(linkedList0, "");
      homeLight0.setNameVisible(true);
      Integer integer0 = new Integer(2001);
      CatalogPieceOfFurniture catalogPieceOfFurniture0 = new CatalogPieceOfFurniture("9", resourceURLContent0, resourceURLContent0, 1.3734E-41F, (-1.0F), 5.596301E-39F, (-1.0F), true, "", integer0, floatArray0, true, (-570.0F), true);
      HomePieceOfFurniture homePieceOfFurniture0 = new HomePieceOfFurniture(catalogPieceOfFurniture0);
      linkedList0.add(homePieceOfFurniture0);
      HomeFurnitureGroup homeFurnitureGroup1 = new HomeFurnitureGroup(linkedList0, "");
      linkedList0.pop();
      homeFurnitureGroup1.clone();
      homeFurnitureGroup0.getModel();
      CatalogTexture catalogTexture0 = new CatalogTexture("", (Content) null, (-681.7705F), (-681.7705F), true);
      HomeTexture homeTexture0 = new HomeTexture(catalogTexture0);
      homeFurnitureGroup1.setTexture(homeTexture0);
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      LinkedList<HomePieceOfFurniture> linkedList0 = new LinkedList<HomePieceOfFurniture>();
      ResourceURLContent resourceURLContent0 = new ResourceURLContent((URL) null, true);
      LightSource[] lightSourceArray0 = new LightSource[1];
      float[][] floatArray0 = new float[4][6];
      BigDecimal bigDecimal0 = new BigDecimal((long) 2001);
      CatalogLight catalogLight0 = new CatalogLight("9", "DEPTH", "DEPTH", resourceURLContent0, resourceURLContent0, resourceURLContent0, 0.3926991F, 2001.0F, 1.0F, (-2885.0872F), true, lightSourceArray0, floatArray0, "DEPTH", true, bigDecimal0, bigDecimal0);
      bigDecimal0.precision();
      HomeLight homeLight0 = new HomeLight(catalogLight0);
      homeLight0.setNameVisible(false);
      linkedList0.add((HomePieceOfFurniture) homeLight0);
      HomeFurnitureGroup homeFurnitureGroup0 = new HomeFurnitureGroup(linkedList0, "l");
      homeFurnitureGroup0.setDepth(0.3926991F);
      homeFurnitureGroup0.getValueAddedTax();
      homeFurnitureGroup0.getDepth();
      homeFurnitureGroup0.setAngle(31.701214F);
      homeFurnitureGroup0.setDepth(31.701214F);
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      LinkedList<HomePieceOfFurniture> linkedList0 = new LinkedList<HomePieceOfFurniture>();
      ResourceURLContent resourceURLContent0 = new ResourceURLContent((URL) null, true);
      LightSource[] lightSourceArray0 = new LightSource[1];
      Float float0 = new Float(0.0);
      float[][] floatArray0 = new float[4][6];
      BigDecimal bigDecimal0 = new BigDecimal((-1L));
      BigDecimal bigDecimal1 = new BigDecimal((-1L));
      CatalogLight catalogLight0 = new CatalogLight("_])7g^)gy+P0XH3", "_])7g^)gy+P0XH3", "/<gAhL`8>", resourceURLContent0, resourceURLContent0, resourceURLContent0, 1331.01F, 1.0F, (-1L), 1.0F, false, lightSourceArray0, floatArray0, "DEPTH", true, bigDecimal1, bigDecimal0);
      HomeLight homeLight0 = new HomeLight(catalogLight0);
      linkedList0.add((HomePieceOfFurniture) homeLight0);
      HomeFurnitureGroup homeFurnitureGroup0 = new HomeFurnitureGroup(linkedList0, "z");
      HomeFurnitureGroup homeFurnitureGroup1 = homeFurnitureGroup0.clone();
      homeFurnitureGroup1.getCatalogId();
      HomeFurnitureGroup homeFurnitureGroup2 = homeFurnitureGroup1.clone();
      homeFurnitureGroup2.isDoorOrWindow();
      homeFurnitureGroup2.setDescription("/<gAhL`8>");
      homeFurnitureGroup2.getValueAddedTax();
      homeFurnitureGroup0.setHeight((-913.4841F));
      homeFurnitureGroup0.setY((-1480.0F));
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      LinkedList<HomePieceOfFurniture> linkedList0 = new LinkedList<HomePieceOfFurniture>();
      ResourceURLContent resourceURLContent0 = new ResourceURLContent((URL) null, true);
      LightSource[] lightSourceArray0 = new LightSource[1];
      float[][] floatArray0 = new float[4][6];
      BigDecimal bigDecimal0 = BigDecimal.ZERO;
      CatalogLight catalogLight0 = new CatalogLight("9", "DEPTH", "DEPTH", resourceURLContent0, resourceURLContent0, resourceURLContent0, 0.3926991F, 2001.0F, 1.0F, (-2885.0872F), true, lightSourceArray0, floatArray0, "DEPTH", true, bigDecimal0, bigDecimal0);
      HomeLight homeLight0 = new HomeLight(catalogLight0);
      homeLight0.setNameVisible(true);
      linkedList0.add((HomePieceOfFurniture) homeLight0);
      HomeFurnitureGroup homeFurnitureGroup0 = new HomeFurnitureGroup(linkedList0, "com.eteks.sweethome3d.model.HomeTexture");
      HomeFurnitureGroup homeFurnitureGroup1 = homeFurnitureGroup0.clone();
      homeFurnitureGroup1.setHeight(0.3926991F);
      HomeFurnitureGroup homeFurnitureGroup2 = new HomeFurnitureGroup(linkedList0, "DEPTH");
      homeFurnitureGroup2.setName((String) null);
      HomeFurnitureGroup homeFurnitureGroup3 = homeFurnitureGroup1.clone();
      homeFurnitureGroup3.setModelMirrored(true);
      homeFurnitureGroup2.getValueAddedTaxPercentage();
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      LinkedList<HomePieceOfFurniture> linkedList0 = new LinkedList<HomePieceOfFurniture>();
      ResourceURLContent resourceURLContent0 = new ResourceURLContent((URL) null, true);
      LightSource[] lightSourceArray0 = new LightSource[1];
      Float float0 = new Float(0.0);
      LightSource lightSource0 = new LightSource(88.9F, (-31.701214F), 1331.01F, 2001, float0);
      lightSourceArray0[0] = lightSource0;
      float[][] floatArray0 = new float[4][6];
      BigDecimal bigDecimal0 = new BigDecimal((long) 2001);
      BigDecimal bigDecimal1 = new BigDecimal((-1L));
      BigDecimal bigDecimal2 = new BigDecimal((-1L));
      CatalogLight catalogLight0 = new CatalogLight("_])7g^)gy+P0XH3", "_])7g^)gy+P0XH3", "/<gAhL`8>", resourceURLContent0, resourceURLContent0, resourceURLContent0, 1331.01F, (-31.701214F), (-1L), (-31.701214F), true, lightSourceArray0, floatArray0, "DEPTH", true, bigDecimal2, bigDecimal1);
      HomeLight homeLight0 = new HomeLight(catalogLight0);
      linkedList0.add((HomePieceOfFurniture) homeLight0);
      linkedList0.spliterator();
      PropertyChangeListener propertyChangeListener0 = mock(PropertyChangeListener.class, new ViolatedAssumptionAnswer());
      PropertyChangeListenerProxy propertyChangeListenerProxy0 = new PropertyChangeListenerProxy("", propertyChangeListener0);
      PropertyChangeListenerProxy propertyChangeListenerProxy1 = new PropertyChangeListenerProxy("", propertyChangeListenerProxy0);
      HomeFurnitureGroup homeFurnitureGroup0 = new HomeFurnitureGroup(linkedList0, "");
      HomeFurnitureGroup homeFurnitureGroup1 = homeFurnitureGroup0.clone();
      homeFurnitureGroup1.setAngle(2001);
      homeFurnitureGroup1.setHeight((-1011.66693F));
      homeFurnitureGroup0.setDepth((-326.0773F));
      homeFurnitureGroup0.getDepth();
      homeFurnitureGroup1.getValueAddedTax();
      homeFurnitureGroup1.getDepth();
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      LinkedList<HomePieceOfFurniture> linkedList0 = new LinkedList<HomePieceOfFurniture>();
      ResourceURLContent resourceURLContent0 = new ResourceURLContent((URL) null, true);
      LightSource[] lightSourceArray0 = new LightSource[1];
      Float float0 = new Float(0.0);
      LightSource lightSource0 = new LightSource(88.9F, 1.0F, 1331.01F, 2001, float0);
      lightSourceArray0[0] = lightSource0;
      float[][] floatArray0 = new float[4][6];
      BigDecimal bigDecimal0 = new BigDecimal((long) 2001);
      BigDecimal bigDecimal1 = new BigDecimal((-1L));
      BigDecimal bigDecimal2 = new BigDecimal((-1L));
      CatalogLight catalogLight0 = new CatalogLight("_])7g^)gy+P0XH3", "_])7g^)gy+P0XH3", "/<gAhL`8>", resourceURLContent0, resourceURLContent0, resourceURLContent0, 1331.01F, 1.0F, (-1L), 1.0F, false, lightSourceArray0, floatArray0, "DEPTH", true, bigDecimal2, bigDecimal1);
      HomeLight homeLight0 = new HomeLight(catalogLight0);
      HomePieceOfFurniture homePieceOfFurniture0 = new HomePieceOfFurniture(homeLight0);
      linkedList0.add((HomePieceOfFurniture) homeLight0);
      PropertyChangeListener propertyChangeListener0 = mock(PropertyChangeListener.class, new ViolatedAssumptionAnswer());
      PropertyChangeListenerProxy propertyChangeListenerProxy0 = new PropertyChangeListenerProxy("", propertyChangeListener0);
      PropertyChangeListenerProxy propertyChangeListenerProxy1 = new PropertyChangeListenerProxy("", propertyChangeListenerProxy0);
      HomeFurnitureGroup homeFurnitureGroup0 = new HomeFurnitureGroup(linkedList0, "");
      HomeFurnitureGroup homeFurnitureGroup1 = homeFurnitureGroup0.clone();
      homeFurnitureGroup1.addPropertyChangeListener(propertyChangeListenerProxy1);
      homeFurnitureGroup0.setHeight((-1L));
      HomeFurnitureGroup homeFurnitureGroup2 = new HomeFurnitureGroup(linkedList0, "");
      homeFurnitureGroup2.getCatalogId();
      homeFurnitureGroup0.isDoorOrWindow();
      homeFurnitureGroup1.setModelMirrored(false);
      homeFurnitureGroup2.setWidth((-1605.139F));
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      LinkedList<HomePieceOfFurniture> linkedList0 = new LinkedList<HomePieceOfFurniture>();
      ResourceURLContent resourceURLContent0 = new ResourceURLContent((URL) null, true);
      LightSource[] lightSourceArray0 = new LightSource[1];
      Float float0 = new Float((double) 88.9F);
      LightSource lightSource0 = new LightSource(88.9F, (-31.701214F), 1331.01F, 2001, float0);
      lightSourceArray0[0] = lightSource0;
      float[][] floatArray0 = new float[4][6];
      BigDecimal bigDecimal0 = new BigDecimal((long) 2001);
      BigDecimal bigDecimal1 = new BigDecimal((-1L));
      BigDecimal bigDecimal2 = new BigDecimal((-1L));
      CatalogLight catalogLight0 = new CatalogLight("_])7g^)gy+P0XH3", "_])7g^)gy+P0XH3", "/<gAhL`8>", resourceURLContent0, resourceURLContent0, resourceURLContent0, 1331.01F, (-31.701214F), (-1L), (-31.701214F), false, lightSourceArray0, floatArray0, "DEPTH", true, bigDecimal2, bigDecimal1);
      HomeLight homeLight0 = new HomeLight(catalogLight0);
      HomePieceOfFurniture homePieceOfFurniture0 = new HomePieceOfFurniture(homeLight0);
      linkedList0.add((HomePieceOfFurniture) homeLight0);
      PropertyChangeListener propertyChangeListener0 = mock(PropertyChangeListener.class, new ViolatedAssumptionAnswer());
      PropertyChangeListenerProxy propertyChangeListenerProxy0 = new PropertyChangeListenerProxy("", propertyChangeListener0);
      PropertyChangeListenerProxy propertyChangeListenerProxy1 = new PropertyChangeListenerProxy("", propertyChangeListenerProxy0);
      HomeFurnitureGroup homeFurnitureGroup0 = new HomeFurnitureGroup(linkedList0, "");
      HomeFurnitureGroup homeFurnitureGroup1 = homeFurnitureGroup0.clone();
      homeFurnitureGroup1.setAngle(2001);
      homeFurnitureGroup1.addPropertyChangeListener(propertyChangeListenerProxy1);
      homeFurnitureGroup0.setHeight(2001);
      homeFurnitureGroup1.getCatalogId();
      homeFurnitureGroup1.isDoorOrWindow();
      Integer integer0 = new Integer(2001);
      homeFurnitureGroup0.setColor(integer0);
      homeFurnitureGroup0.getDepth();
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      LinkedList<HomePieceOfFurniture> linkedList0 = new LinkedList<HomePieceOfFurniture>();
      ResourceURLContent resourceURLContent0 = new ResourceURLContent((URL) null, true);
      LightSource[] lightSourceArray0 = new LightSource[1];
      Float float0 = new Float(0.0);
      LightSource lightSource0 = new LightSource(88.9F, (-31.701214F), 1331.01F, 2001, float0);
      lightSourceArray0[0] = lightSource0;
      float[][] floatArray0 = new float[4][6];
      BigDecimal bigDecimal0 = new BigDecimal((long) 2001);
      BigDecimal bigDecimal1 = new BigDecimal((-1L));
      BigDecimal bigDecimal2 = new BigDecimal((-1L));
      CatalogLight catalogLight0 = new CatalogLight("_])7g^)gy+P0XH3", "_])7g^)gy+P0XH3", "/<gAhL`8>", resourceURLContent0, resourceURLContent0, resourceURLContent0, 1331.01F, (-31.701214F), (-1L), (-31.701214F), false, lightSourceArray0, floatArray0, "DEPTH", true, bigDecimal2, bigDecimal1);
      HomeLight homeLight0 = new HomeLight(catalogLight0);
      HomePieceOfFurniture homePieceOfFurniture0 = new HomePieceOfFurniture(homeLight0);
      linkedList0.add((HomePieceOfFurniture) homeLight0);
      PropertyChangeListener propertyChangeListener0 = mock(PropertyChangeListener.class, new ViolatedAssumptionAnswer());
      PropertyChangeListenerProxy propertyChangeListenerProxy0 = new PropertyChangeListenerProxy("", propertyChangeListener0);
      PropertyChangeListenerProxy propertyChangeListenerProxy1 = new PropertyChangeListenerProxy("", propertyChangeListenerProxy0);
      HomeFurnitureGroup homeFurnitureGroup0 = new HomeFurnitureGroup(linkedList0, "");
      HomeFurnitureGroup homeFurnitureGroup1 = homeFurnitureGroup0.clone();
      homeFurnitureGroup1.setAngle(2001);
      homeFurnitureGroup1.addPropertyChangeListener(propertyChangeListenerProxy1);
      homeFurnitureGroup0.setHeight(2001);
      homeFurnitureGroup1.getCatalogId();
      homeFurnitureGroup1.isDoorOrWindow();
      Integer integer0 = new Integer(2001);
      homeFurnitureGroup0.setColor(integer0);
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      LinkedList<HomePieceOfFurniture> linkedList0 = new LinkedList<HomePieceOfFurniture>();
      ResourceURLContent resourceURLContent0 = new ResourceURLContent((URL) null, true);
      LightSource[] lightSourceArray0 = new LightSource[1];
      Float float0 = new Float(0.0);
      float[][] floatArray0 = new float[4][6];
      BigDecimal bigDecimal0 = new BigDecimal((long) 2001);
      CatalogLight catalogLight0 = new CatalogLight("9", "DEPTH", "DEPTH", resourceURLContent0, resourceURLContent0, resourceURLContent0, 0.3926991F, 2001.0F, 1.0F, (-2885.0872F), true, lightSourceArray0, floatArray0, "DEPTH", true, bigDecimal0, bigDecimal0);
      HomeLight homeLight0 = new HomeLight(catalogLight0);
      homeLight0.setNameVisible(false);
      HomePieceOfFurniture homePieceOfFurniture0 = new HomePieceOfFurniture(catalogLight0);
      linkedList0.add((HomePieceOfFurniture) homeLight0);
      HomeFurnitureGroup homeFurnitureGroup0 = new HomeFurnitureGroup(linkedList0, "_])7g^)gy+P0XH3");
      linkedList0.pop();
      HomeFurnitureGroup homeFurnitureGroup1 = homeFurnitureGroup0.clone();
      homeFurnitureGroup0.getModel();
      homeFurnitureGroup1.setX((-1.0F));
      homeFurnitureGroup1.isResizable();
      homeFurnitureGroup1.getValueAddedTax();
      homeFurnitureGroup1.intersectsRectangle(0.3926991F, (-592.9F), 3845.3289F, (-3682.2195F));
      homeFurnitureGroup1.getFurniture();
      homeFurnitureGroup1.setHeight(2001);
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      System.setCurrentTimeMillis(0L);
      System.setCurrentTimeMillis((-1L));
      LinkedList<HomePieceOfFurniture> linkedList0 = new LinkedList<HomePieceOfFurniture>();
      Long long0 = new Long(0L);
      Float float0 = new Float(894.55773);
      LightSource[] lightSourceArray0 = new LightSource[9];
      LightSource lightSource0 = new LightSource(0L, (-7.0E-45F), 0L, (-1591));
      lightSourceArray0[0] = lightSource0;
      lightSourceArray0[1] = lightSource0;
      LightSource lightSource1 = new LightSource((-1L), (-7.0E-45F), (-3460), (-3460));
      lightSourceArray0[2] = lightSource1;
      Float float1 = new Float((double) 3580.4275F);
      LightSource lightSource2 = new LightSource(3580.4275F, (-7.0E-45F), 3.4028235E38F, (-3460), float1);
      lightSourceArray0[3] = lightSource2;
      Float float2 = new Float((float) (-1L));
      LightSource lightSource3 = new LightSource(0.3927002F, 0.0F, (-2518.0F), (-3460), float2);
      lightSourceArray0[4] = lightSource0;
      Float float3 = new Float((float) (-3460));
      LightSource lightSource4 = new LightSource(1.0F, 0L, 2.0F, (-430), float3);
      lightSourceArray0[5] = lightSource4;
      LightSource lightSource5 = new LightSource((-1L), 1.0F, (-7.0E-45F), (-3460), float2);
      LightSource lightSource6 = new LightSource((-2.0679545E-34F), 920.8F, 2.0F, (-3460), float2);
      lightSourceArray0[3] = lightSource6;
      Float float4 = new Float((double) 0.0F);
      LightSource lightSource7 = new LightSource(0L, 3.4028235E38F, 1144.44F, (-1093), float4);
      BigDecimal bigDecimal0 = new BigDecimal(0L);
      CatalogLight catalogLight0 = new CatalogLight("#B", (String) null, "#B", "#B", (String[]) null, long0, float0, (Content) null, (Content) null, (Content) null, 0L, (-1L), 0.3927002F, 2001.0F, false, lightSourceArray0, (String) null, (float[][]) null, "#B", false, false, false, bigDecimal0, bigDecimal0, "[1}%F/");
      HomeLight homeLight0 = new HomeLight(catalogLight0);
      linkedList0.add((HomePieceOfFurniture) homeLight0);
      HomeFurnitureGroup homeFurnitureGroup0 = null;
      try {
        homeFurnitureGroup0 = new HomeFurnitureGroup(linkedList0, "#B");
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Piece isn't resizable
         //
         verifyException("com.eteks.sweethome3d.model.HomePieceOfFurniture", e);
      }
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      LinkedList<HomePieceOfFurniture> linkedList0 = new LinkedList<HomePieceOfFurniture>();
      ResourceURLContent resourceURLContent0 = new ResourceURLContent((URL) null, true);
      LightSource[] lightSourceArray0 = new LightSource[1];
      Float float0 = new Float(0.0);
      float[][] floatArray0 = new float[4][6];
      BigDecimal bigDecimal0 = new BigDecimal((-1L));
      BigDecimal bigDecimal1 = new BigDecimal((-1L));
      CatalogLight catalogLight0 = new CatalogLight("_])7g^)gy+P0XH3", "_])7g^)gy+P0XH3", "/<gAhL`8>", resourceURLContent0, resourceURLContent0, resourceURLContent0, 1331.01F, 1.0F, (-1L), 1.0F, false, lightSourceArray0, floatArray0, "DEnZ", true, bigDecimal1, bigDecimal0);
      HomeLight homeLight0 = new HomeLight(catalogLight0);
      HomePieceOfFurniture homePieceOfFurniture0 = new HomePieceOfFurniture(homeLight0);
      linkedList0.add((HomePieceOfFurniture) homeLight0);
      HomeFurnitureGroup homeFurnitureGroup0 = new HomeFurnitureGroup(linkedList0, "");
      HomeFurnitureGroup homeFurnitureGroup1 = new HomeFurnitureGroup(linkedList0, "");
      homeFurnitureGroup1.getModelRotation();
      linkedList0.pop();
      HomeFurnitureGroup homeFurnitureGroup2 = homeFurnitureGroup1.clone();
      homeFurnitureGroup0.getModel();
      homeFurnitureGroup2.setAngle(124.49F);
      homeFurnitureGroup1.setHeight((-4845.0464F));
      homeFurnitureGroup2.getPrice();
      homeFurnitureGroup2.getHeight();
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      LinkedList<HomePieceOfFurniture> linkedList0 = new LinkedList<HomePieceOfFurniture>();
      ResourceURLContent resourceURLContent0 = new ResourceURLContent((URL) null, true);
      LightSource[] lightSourceArray0 = new LightSource[1];
      float[][] floatArray0 = new float[4][6];
      BigDecimal bigDecimal0 = BigDecimal.ONE;
      CatalogLight catalogLight0 = new CatalogLight("9", "_])7g^)gy+P0XH3", "_])7g^)gy+P0XH3", resourceURLContent0, resourceURLContent0, resourceURLContent0, 2001, 2001.0F, 1.0F, (-2885.1F), true, lightSourceArray0, floatArray0, "_])7g^)gy+P0XH3", true, bigDecimal0, bigDecimal0);
      HomeLight homeLight0 = new HomeLight(catalogLight0);
      HomePieceOfFurniture homePieceOfFurniture0 = new HomePieceOfFurniture(catalogLight0);
      linkedList0.add((HomePieceOfFurniture) homeLight0);
      HomeFurnitureGroup homeFurnitureGroup0 = new HomeFurnitureGroup(linkedList0, "_])7g^)gy+P0XH3");
      homeLight0.clone();
      homeFurnitureGroup0.clone();
      homeFurnitureGroup0.getModel();
      CatalogTexture catalogTexture0 = new CatalogTexture("_])7g^)gy+P0XH3", resourceURLContent0, 2001.0F, 1.0F, false);
      HomeTexture homeTexture0 = new HomeTexture(catalogTexture0);
      homeFurnitureGroup0.setTexture(homeTexture0);
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      LinkedList<HomePieceOfFurniture> linkedList0 = new LinkedList<HomePieceOfFurniture>();
      ResourceURLContent resourceURLContent0 = new ResourceURLContent((URL) null, true);
      LightSource[] lightSourceArray0 = new LightSource[1];
      float[][] floatArray0 = new float[4][6];
      BigDecimal bigDecimal0 = BigDecimal.ZERO;
      CatalogLight catalogLight0 = new CatalogLight("9", "DEPTH", "DEPTH", resourceURLContent0, resourceURLContent0, resourceURLContent0, (-1.557791F), 2001.0F, 1.0F, (-2885.0872F), true, lightSourceArray0, floatArray0, "DEPTH", true, bigDecimal0, bigDecimal0);
      HomeLight homeLight0 = new HomeLight(catalogLight0);
      homeLight0.setNameVisible(true);
      linkedList0.add((HomePieceOfFurniture) homeLight0);
      HomeFurnitureGroup homeFurnitureGroup0 = new HomeFurnitureGroup(linkedList0, "_])7g^)gy+P0XH3");
      homeLight0.clone();
      HomeFurnitureGroup homeFurnitureGroup1 = homeFurnitureGroup0.clone();
      homeFurnitureGroup0.getModel();
      homeFurnitureGroup0.setMovable(true);
      homeFurnitureGroup1.setX(0.0F);
      homeFurnitureGroup1.clone();
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      LinkedList<HomePieceOfFurniture> linkedList0 = new LinkedList<HomePieceOfFurniture>();
      ResourceURLContent resourceURLContent0 = new ResourceURLContent((URL) null, true);
      LightSource[] lightSourceArray0 = new LightSource[1];
      Float float0 = new Float(0.0);
      float[][] floatArray0 = new float[4][6];
      BigDecimal bigDecimal0 = new BigDecimal((long) 2001);
      CatalogLight catalogLight0 = new CatalogLight("9", "DLEPiH", "DLEPiH", resourceURLContent0, resourceURLContent0, resourceURLContent0, 0.3926991F, 2001.0F, (-10.1716795F), (-2885.0872F), true, lightSourceArray0, floatArray0, "DLEPiH", true, bigDecimal0, bigDecimal0);
      HomeLight homeLight0 = new HomeLight(catalogLight0);
      homeLight0.setY(0.3926991F);
      linkedList0.add((HomePieceOfFurniture) homeLight0);
      HomeFurnitureGroup homeFurnitureGroup0 = new HomeFurnitureGroup(linkedList0, "_])7g^)gy+P0XH3");
      linkedList0.pop();
      homeFurnitureGroup0.getModel();
      homeFurnitureGroup0.setVisible(true);
      homeFurnitureGroup0.setHeight(32.55777F);
      homeFurnitureGroup0.setDepth(1331.01F);
      homeFurnitureGroup0.getDepth();
      homeFurnitureGroup0.getValueAddedTax();
      homeFurnitureGroup0.getDepth();
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      LinkedList<HomePieceOfFurniture> linkedList0 = new LinkedList<HomePieceOfFurniture>();
      ResourceURLContent resourceURLContent0 = new ResourceURLContent((URL) null, true);
      LightSource[] lightSourceArray0 = new LightSource[1];
      float[][] floatArray0 = new float[4][6];
      BigDecimal bigDecimal0 = new BigDecimal((long) 2001);
      CatalogLight catalogLight0 = new CatalogLight("M19", "_])7g^)gy+P0XH3", "_])7g^)gy+P0XH3", resourceURLContent0, resourceURLContent0, resourceURLContent0, 2001, 2001.0F, 1.0F, 2001, true, lightSourceArray0, floatArray0, "_])7g^)gy+P0XH3", true, bigDecimal0, bigDecimal0);
      HomeLight homeLight0 = new HomeLight(catalogLight0);
      homeLight0.setElevation(2001.0F);
      HomePieceOfFurniture homePieceOfFurniture0 = new HomePieceOfFurniture(catalogLight0);
      linkedList0.add((HomePieceOfFurniture) homeLight0);
      HomeFurnitureGroup homeFurnitureGroup0 = new HomeFurnitureGroup(linkedList0, "_])7g^)gy+P0XH3");
      HomeFurnitureGroup homeFurnitureGroup1 = new HomeFurnitureGroup(linkedList0, "M19");
      homeFurnitureGroup0.getValueAddedTax();
      homeFurnitureGroup1.getDepth();
      homeFurnitureGroup1.setAngle(2001.0F);
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      LinkedList<HomePieceOfFurniture> linkedList0 = new LinkedList<HomePieceOfFurniture>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      ResourceURLContent resourceURLContent0 = new ResourceURLContent((URL) null, true);
      assertTrue(resourceURLContent0.isMultiPartResource());
      assertNotNull(resourceURLContent0);
      
      LightSource[] lightSourceArray0 = new LightSource[1];
      Float float0 = new Float(0.0);
      assertEquals(0.0F, (float)float0, 0.01F);
      assertNotNull(float0);
      
      LightSource lightSource0 = new LightSource(88.9F, 1.0F, 1331.01F, 2001, float0);
      assertEquals(2001, lightSource0.getColor());
      assertEquals(88.9F, lightSource0.getX(), 0.01F);
      assertEquals(1331.01F, lightSource0.getZ(), 0.01F);
      assertEquals(1.0F, lightSource0.getY(), 0.01F);
      assertEquals(0.0F, lightSource0.getDiameter(), 0.01F);
      assertNotNull(lightSource0);
      
      lightSourceArray0[0] = lightSource0;
      float[][] floatArray0 = new float[4][6];
      BigDecimal bigDecimal0 = new BigDecimal((long) 2001);
      assertEquals((short)2001, bigDecimal0.shortValue());
      assertEquals((byte) (-47), bigDecimal0.byteValue());
      assertNotNull(bigDecimal0);
      
      BigDecimal bigDecimal1 = new BigDecimal((-1L));
      assertEquals((byte) (-1), bigDecimal1.byteValue());
      assertEquals((short) (-1), bigDecimal1.shortValue());
      assertFalse(bigDecimal1.equals((Object)bigDecimal0));
      assertNotNull(bigDecimal1);
      
      BigDecimal bigDecimal2 = new BigDecimal((-1L));
      assertEquals((short) (-1), bigDecimal2.shortValue());
      assertEquals((byte) (-1), bigDecimal2.byteValue());
      assertTrue(bigDecimal2.equals((Object)bigDecimal1));
      assertFalse(bigDecimal2.equals((Object)bigDecimal0));
      assertNotNull(bigDecimal2);
      
      CatalogLight catalogLight0 = new CatalogLight("_])7g^)gy+P0XH3", "_])7g^)gy+P0XH3", "/<gAhL`8>", resourceURLContent0, resourceURLContent0, resourceURLContent0, 1331.01F, 1.0F, (-1L), 1.0F, false, lightSourceArray0, floatArray0, "DEPTH", true, bigDecimal2, bigDecimal1);
      assertEquals(1, lightSourceArray0.length);
      assertEquals(4, floatArray0.length);
      assertTrue(resourceURLContent0.isMultiPartResource());
      assertEquals((byte) (-1), bigDecimal1.byteValue());
      assertEquals((short) (-1), bigDecimal1.shortValue());
      assertEquals((short) (-1), bigDecimal2.shortValue());
      assertEquals((byte) (-1), bigDecimal2.byteValue());
      assertEquals("_])7g^)gy+P0XH3", catalogLight0.getId());
      assertNull(catalogLight0.getColor());
      assertFalse(catalogLight0.isModifiable());
      assertNull(catalogLight0.getCreationDate());
      assertEquals(1.0F, catalogLight0.getElevation(), 0.01F);
      assertFalse(catalogLight0.isMovable());
      assertFalse(catalogLight0.isBackFaceShown());
      assertEquals("_])7g^)gy+P0XH3", catalogLight0.getName());
      assertNull(catalogLight0.getCurrency());
      assertTrue(catalogLight0.isDeformable());
      assertNull(catalogLight0.getInformation());
      assertEquals(1.0F, catalogLight0.getDepth(), 0.01F);
      assertNull(catalogLight0.getGrade());
      assertEquals("/<gAhL`8>", catalogLight0.getDescription());
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertFalse(catalogLight0.isDoorOrWindow());
      assertEquals("DEPTH", catalogLight0.getCreator());
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertTrue(catalogLight0.isTexturable());
      assertEquals(1331.01F, catalogLight0.getWidth(), 0.01F);
      assertTrue(catalogLight0.isProportional());
      assertTrue(catalogLight0.isResizable());
      assertEquals((-1.0F), catalogLight0.getHeight(), 0.01F);
      assertTrue(bigDecimal1.equals((Object)bigDecimal2));
      assertFalse(bigDecimal1.equals((Object)bigDecimal0));
      assertTrue(bigDecimal2.equals((Object)bigDecimal1));
      assertFalse(bigDecimal2.equals((Object)bigDecimal0));
      assertNotNull(catalogLight0);
      
      HomeLight homeLight0 = new HomeLight(catalogLight0);
      assertEquals(1, lightSourceArray0.length);
      assertEquals(4, floatArray0.length);
      assertTrue(resourceURLContent0.isMultiPartResource());
      assertEquals((byte) (-1), bigDecimal1.byteValue());
      assertEquals((short) (-1), bigDecimal1.shortValue());
      assertEquals((short) (-1), bigDecimal2.shortValue());
      assertEquals((byte) (-1), bigDecimal2.byteValue());
      assertEquals("_])7g^)gy+P0XH3", catalogLight0.getId());
      assertNull(catalogLight0.getColor());
      assertFalse(catalogLight0.isModifiable());
      assertNull(catalogLight0.getCreationDate());
      assertEquals(1.0F, catalogLight0.getElevation(), 0.01F);
      assertFalse(catalogLight0.isMovable());
      assertFalse(catalogLight0.isBackFaceShown());
      assertEquals("_])7g^)gy+P0XH3", catalogLight0.getName());
      assertNull(catalogLight0.getCurrency());
      assertTrue(catalogLight0.isDeformable());
      assertNull(catalogLight0.getInformation());
      assertEquals(1.0F, catalogLight0.getDepth(), 0.01F);
      assertNull(catalogLight0.getGrade());
      assertEquals("/<gAhL`8>", catalogLight0.getDescription());
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertFalse(catalogLight0.isDoorOrWindow());
      assertEquals("DEPTH", catalogLight0.getCreator());
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertTrue(catalogLight0.isTexturable());
      assertEquals(1331.01F, catalogLight0.getWidth(), 0.01F);
      assertTrue(catalogLight0.isProportional());
      assertTrue(catalogLight0.isResizable());
      assertEquals((-1.0F), catalogLight0.getHeight(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertNull(homeLight0.getShininess());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertTrue(homeLight0.isResizable());
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals(1.0F, homeLight0.getElevation(), 0.01F);
      assertTrue(homeLight0.isDeformable());
      assertTrue(homeLight0.isVisible());
      assertEquals((-1.0F), homeLight0.getHeight(), 0.01F);
      assertFalse(homeLight0.isMovable());
      assertEquals(1.0F, homeLight0.getDepth(), 0.01F);
      assertNull(homeLight0.getColor());
      assertFalse(homeLight0.isModelMirrored());
      assertEquals("_])7g^)gy+P0XH3", homeLight0.getCatalogId());
      assertNull(homeLight0.getCurrency());
      assertTrue(homeLight0.isTexturable());
      assertEquals(0.5F, homeLight0.getY(), 0.01F);
      assertEquals(1.0F, homeLight0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      assertEquals(1331.01F, homeLight0.getWidth(), 0.01F);
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertEquals("_])7g^)gy+P0XH3", homeLight0.getName());
      assertFalse(homeLight0.isNameVisible());
      assertEquals(665.505F, homeLight0.getX(), 0.01F);
      assertEquals("/<gAhL`8>", homeLight0.getDescription());
      assertFalse(homeLight0.isBackFaceShown());
      assertTrue(bigDecimal1.equals((Object)bigDecimal2));
      assertFalse(bigDecimal1.equals((Object)bigDecimal0));
      assertTrue(bigDecimal2.equals((Object)bigDecimal1));
      assertFalse(bigDecimal2.equals((Object)bigDecimal0));
      assertNotNull(homeLight0);
      
      HomePieceOfFurniture homePieceOfFurniture0 = new HomePieceOfFurniture(homeLight0);
      assertEquals(1, lightSourceArray0.length);
      assertEquals(4, floatArray0.length);
      assertTrue(resourceURLContent0.isMultiPartResource());
      assertEquals((byte) (-1), bigDecimal1.byteValue());
      assertEquals((short) (-1), bigDecimal1.shortValue());
      assertEquals((short) (-1), bigDecimal2.shortValue());
      assertEquals((byte) (-1), bigDecimal2.byteValue());
      assertEquals("_])7g^)gy+P0XH3", catalogLight0.getId());
      assertNull(catalogLight0.getColor());
      assertFalse(catalogLight0.isModifiable());
      assertNull(catalogLight0.getCreationDate());
      assertEquals(1.0F, catalogLight0.getElevation(), 0.01F);
      assertFalse(catalogLight0.isMovable());
      assertFalse(catalogLight0.isBackFaceShown());
      assertEquals("_])7g^)gy+P0XH3", catalogLight0.getName());
      assertNull(catalogLight0.getCurrency());
      assertTrue(catalogLight0.isDeformable());
      assertNull(catalogLight0.getInformation());
      assertEquals(1.0F, catalogLight0.getDepth(), 0.01F);
      assertNull(catalogLight0.getGrade());
      assertEquals("/<gAhL`8>", catalogLight0.getDescription());
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertFalse(catalogLight0.isDoorOrWindow());
      assertEquals("DEPTH", catalogLight0.getCreator());
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertTrue(catalogLight0.isTexturable());
      assertEquals(1331.01F, catalogLight0.getWidth(), 0.01F);
      assertTrue(catalogLight0.isProportional());
      assertTrue(catalogLight0.isResizable());
      assertEquals((-1.0F), catalogLight0.getHeight(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertNull(homeLight0.getShininess());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertTrue(homeLight0.isResizable());
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals(1.0F, homeLight0.getElevation(), 0.01F);
      assertTrue(homeLight0.isDeformable());
      assertTrue(homeLight0.isVisible());
      assertEquals((-1.0F), homeLight0.getHeight(), 0.01F);
      assertFalse(homeLight0.isMovable());
      assertEquals(1.0F, homeLight0.getDepth(), 0.01F);
      assertNull(homeLight0.getColor());
      assertFalse(homeLight0.isModelMirrored());
      assertEquals("_])7g^)gy+P0XH3", homeLight0.getCatalogId());
      assertNull(homeLight0.getCurrency());
      assertTrue(homeLight0.isTexturable());
      assertEquals(0.5F, homeLight0.getY(), 0.01F);
      assertEquals(1.0F, homeLight0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      assertEquals(1331.01F, homeLight0.getWidth(), 0.01F);
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertEquals("_])7g^)gy+P0XH3", homeLight0.getName());
      assertFalse(homeLight0.isNameVisible());
      assertEquals(665.505F, homeLight0.getX(), 0.01F);
      assertEquals("/<gAhL`8>", homeLight0.getDescription());
      assertFalse(homeLight0.isBackFaceShown());
      assertEquals((-1.0F), homePieceOfFurniture0.getHeight(), 0.01F);
      assertTrue(homePieceOfFurniture0.isVisible());
      assertEquals(1331.01F, homePieceOfFurniture0.getWidth(), 0.01F);
      assertTrue(homePieceOfFurniture0.isDeformable());
      assertEquals("_])7g^)gy+P0XH3", homePieceOfFurniture0.getCatalogId());
      assertEquals(0.0F, homePieceOfFurniture0.getNameYOffset(), 0.01F);
      assertTrue(homePieceOfFurniture0.isResizable());
      assertNull(homePieceOfFurniture0.getShininess());
      assertEquals(0.0F, homePieceOfFurniture0.getNameAngle(), 0.01F);
      assertEquals(1.0F, homePieceOfFurniture0.getDepth(), 0.01F);
      assertNull(homePieceOfFurniture0.getStaircaseCutOutShape());
      assertNull(homePieceOfFurniture0.getCurrency());
      assertFalse(homePieceOfFurniture0.isMovable());
      assertEquals(1.0F, homePieceOfFurniture0.getElevation(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture0.getAngle(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture0.getNameXOffset(), 0.01F);
      assertEquals(0.5F, homePieceOfFurniture0.getY(), 0.01F);
      assertEquals(1.0F, homePieceOfFurniture0.getGroundElevation(), 0.01F);
      assertNull(homePieceOfFurniture0.getColor());
      assertEquals(665.505F, homePieceOfFurniture0.getX(), 0.01F);
      assertFalse(homePieceOfFurniture0.isBackFaceShown());
      assertFalse(homePieceOfFurniture0.isDoorOrWindow());
      assertFalse(homePieceOfFurniture0.isModelMirrored());
      assertEquals("_])7g^)gy+P0XH3", homePieceOfFurniture0.getName());
      assertTrue(homePieceOfFurniture0.isTexturable());
      assertEquals("/<gAhL`8>", homePieceOfFurniture0.getDescription());
      assertFalse(homePieceOfFurniture0.isNameVisible());
      assertTrue(bigDecimal1.equals((Object)bigDecimal2));
      assertFalse(bigDecimal1.equals((Object)bigDecimal0));
      assertTrue(bigDecimal2.equals((Object)bigDecimal1));
      assertFalse(bigDecimal2.equals((Object)bigDecimal0));
      assertNotNull(homePieceOfFurniture0);
      
      boolean boolean0 = linkedList0.add((HomePieceOfFurniture) homeLight0);
      assertTrue(boolean0);
      assertEquals(1, lightSourceArray0.length);
      assertEquals(4, floatArray0.length);
      assertFalse(linkedList0.contains(homePieceOfFurniture0));
      assertEquals(1, linkedList0.size());
      assertTrue(resourceURLContent0.isMultiPartResource());
      assertEquals((byte) (-1), bigDecimal1.byteValue());
      assertEquals((short) (-1), bigDecimal1.shortValue());
      assertEquals((short) (-1), bigDecimal2.shortValue());
      assertEquals((byte) (-1), bigDecimal2.byteValue());
      assertEquals("_])7g^)gy+P0XH3", catalogLight0.getId());
      assertNull(catalogLight0.getColor());
      assertFalse(catalogLight0.isModifiable());
      assertNull(catalogLight0.getCreationDate());
      assertEquals(1.0F, catalogLight0.getElevation(), 0.01F);
      assertFalse(catalogLight0.isMovable());
      assertFalse(catalogLight0.isBackFaceShown());
      assertEquals("_])7g^)gy+P0XH3", catalogLight0.getName());
      assertNull(catalogLight0.getCurrency());
      assertTrue(catalogLight0.isDeformable());
      assertNull(catalogLight0.getInformation());
      assertEquals(1.0F, catalogLight0.getDepth(), 0.01F);
      assertNull(catalogLight0.getGrade());
      assertEquals("/<gAhL`8>", catalogLight0.getDescription());
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertFalse(catalogLight0.isDoorOrWindow());
      assertEquals("DEPTH", catalogLight0.getCreator());
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertTrue(catalogLight0.isTexturable());
      assertEquals(1331.01F, catalogLight0.getWidth(), 0.01F);
      assertTrue(catalogLight0.isProportional());
      assertTrue(catalogLight0.isResizable());
      assertEquals((-1.0F), catalogLight0.getHeight(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertNull(homeLight0.getShininess());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertTrue(homeLight0.isResizable());
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals(1.0F, homeLight0.getElevation(), 0.01F);
      assertTrue(homeLight0.isDeformable());
      assertTrue(homeLight0.isVisible());
      assertEquals((-1.0F), homeLight0.getHeight(), 0.01F);
      assertFalse(homeLight0.isMovable());
      assertEquals(1.0F, homeLight0.getDepth(), 0.01F);
      assertNull(homeLight0.getColor());
      assertFalse(homeLight0.isModelMirrored());
      assertEquals("_])7g^)gy+P0XH3", homeLight0.getCatalogId());
      assertNull(homeLight0.getCurrency());
      assertTrue(homeLight0.isTexturable());
      assertEquals(0.5F, homeLight0.getY(), 0.01F);
      assertEquals(1.0F, homeLight0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      assertEquals(1331.01F, homeLight0.getWidth(), 0.01F);
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertEquals("_])7g^)gy+P0XH3", homeLight0.getName());
      assertFalse(homeLight0.isNameVisible());
      assertEquals(665.505F, homeLight0.getX(), 0.01F);
      assertEquals("/<gAhL`8>", homeLight0.getDescription());
      assertFalse(homeLight0.isBackFaceShown());
      assertTrue(bigDecimal1.equals((Object)bigDecimal2));
      assertFalse(bigDecimal1.equals((Object)bigDecimal0));
      assertTrue(bigDecimal2.equals((Object)bigDecimal1));
      assertFalse(bigDecimal2.equals((Object)bigDecimal0));
      assertNotSame(bigDecimal1, bigDecimal2);
      assertNotSame(bigDecimal1, bigDecimal0);
      assertNotSame(bigDecimal2, bigDecimal0);
      assertNotSame(bigDecimal2, bigDecimal1);
      
      PropertyChangeListener propertyChangeListener0 = mock(PropertyChangeListener.class, new ViolatedAssumptionAnswer());
      PropertyChangeListenerProxy propertyChangeListenerProxy0 = new PropertyChangeListenerProxy("", propertyChangeListener0);
      assertEquals("", propertyChangeListenerProxy0.getPropertyName());
      assertNotNull(propertyChangeListenerProxy0);
      
      PropertyChangeListenerProxy propertyChangeListenerProxy1 = new PropertyChangeListenerProxy("", propertyChangeListenerProxy0);
      assertEquals("", propertyChangeListenerProxy1.getPropertyName());
      assertEquals("", propertyChangeListenerProxy0.getPropertyName());
      assertFalse(propertyChangeListenerProxy1.equals((Object)propertyChangeListenerProxy0));
      assertNotNull(propertyChangeListenerProxy1);
      
      HomeFurnitureGroup homeFurnitureGroup0 = new HomeFurnitureGroup(linkedList0, "");
      assertFalse(linkedList0.contains(homePieceOfFurniture0));
      assertEquals(1, linkedList0.size());
      assertTrue(homeFurnitureGroup0.isDeformable());
      assertEquals(1.0F, homeFurnitureGroup0.getDepth(), 0.01F);
      assertEquals(0.5F, homeFurnitureGroup0.getY(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getNameXOffset(), 0.01F);
      assertFalse(homeFurnitureGroup0.isModelMirrored());
      assertEquals(1.0F, homeFurnitureGroup0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getNameAngle(), 0.01F);
      assertFalse(homeFurnitureGroup0.isMovable());
      assertEquals((-1.0F), homeFurnitureGroup0.getHeight(), 0.01F);
      assertNull(homeFurnitureGroup0.getColor());
      assertEquals(1331.01F, homeFurnitureGroup0.getWidth(), 0.01F);
      assertNull(homeFurnitureGroup0.getStaircaseCutOutShape());
      assertTrue(homeFurnitureGroup0.isResizable());
      assertNull(homeFurnitureGroup0.getCatalogId());
      assertNull(homeFurnitureGroup0.getShininess());
      assertEquals(0.0F, homeFurnitureGroup0.getNameYOffset(), 0.01F);
      assertTrue(homeFurnitureGroup0.isVisible());
      assertEquals(665.505F, homeFurnitureGroup0.getX(), 0.01F);
      assertNull(homeFurnitureGroup0.getCurrency());
      assertFalse(homeFurnitureGroup0.isBackFaceShown());
      assertFalse(homeFurnitureGroup0.isNameVisible());
      assertEquals("", homeFurnitureGroup0.getName());
      assertTrue(homeFurnitureGroup0.isTexturable());
      assertNull(homeFurnitureGroup0.getDescription());
      assertEquals(1.0F, homeFurnitureGroup0.getElevation(), 0.01F);
      assertFalse(homeFurnitureGroup0.isDoorOrWindow());
      assertEquals(0.0F, homeFurnitureGroup0.getAngle(), 0.01F);
      assertNotNull(homeFurnitureGroup0);
      
      HomeFurnitureGroup homeFurnitureGroup1 = homeFurnitureGroup0.clone();
      assertFalse(linkedList0.contains(homePieceOfFurniture0));
      assertEquals(1, linkedList0.size());
      assertTrue(homeFurnitureGroup0.isDeformable());
      assertEquals(1.0F, homeFurnitureGroup0.getDepth(), 0.01F);
      assertEquals(0.5F, homeFurnitureGroup0.getY(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getNameXOffset(), 0.01F);
      assertFalse(homeFurnitureGroup0.isModelMirrored());
      assertEquals(1.0F, homeFurnitureGroup0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getNameAngle(), 0.01F);
      assertFalse(homeFurnitureGroup0.isMovable());
      assertEquals((-1.0F), homeFurnitureGroup0.getHeight(), 0.01F);
      assertNull(homeFurnitureGroup0.getColor());
      assertEquals(1331.01F, homeFurnitureGroup0.getWidth(), 0.01F);
      assertNull(homeFurnitureGroup0.getStaircaseCutOutShape());
      assertTrue(homeFurnitureGroup0.isResizable());
      assertNull(homeFurnitureGroup0.getCatalogId());
      assertNull(homeFurnitureGroup0.getShininess());
      assertEquals(0.0F, homeFurnitureGroup0.getNameYOffset(), 0.01F);
      assertTrue(homeFurnitureGroup0.isVisible());
      assertEquals(665.505F, homeFurnitureGroup0.getX(), 0.01F);
      assertNull(homeFurnitureGroup0.getCurrency());
      assertFalse(homeFurnitureGroup0.isBackFaceShown());
      assertFalse(homeFurnitureGroup0.isNameVisible());
      assertEquals("", homeFurnitureGroup0.getName());
      assertTrue(homeFurnitureGroup0.isTexturable());
      assertNull(homeFurnitureGroup0.getDescription());
      assertEquals(1.0F, homeFurnitureGroup0.getElevation(), 0.01F);
      assertFalse(homeFurnitureGroup0.isDoorOrWindow());
      assertEquals(0.0F, homeFurnitureGroup0.getAngle(), 0.01F);
      assertTrue(homeFurnitureGroup1.isTexturable());
      assertFalse(homeFurnitureGroup1.isModelMirrored());
      assertNull(homeFurnitureGroup1.getColor());
      assertFalse(homeFurnitureGroup1.isNameVisible());
      assertFalse(homeFurnitureGroup1.isDoorOrWindow());
      assertEquals(665.505F, homeFurnitureGroup1.getX(), 0.01F);
      assertFalse(homeFurnitureGroup1.isBackFaceShown());
      assertEquals(1331.01F, homeFurnitureGroup1.getWidth(), 0.01F);
      assertEquals(1.0F, homeFurnitureGroup1.getDepth(), 0.01F);
      assertTrue(homeFurnitureGroup1.isDeformable());
      assertEquals(0.0F, homeFurnitureGroup1.getNameYOffset(), 0.01F);
      assertFalse(homeFurnitureGroup1.isMovable());
      assertEquals((-1.0F), homeFurnitureGroup1.getHeight(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup1.getNameAngle(), 0.01F);
      assertNull(homeFurnitureGroup1.getCatalogId());
      assertNull(homeFurnitureGroup1.getShininess());
      assertNull(homeFurnitureGroup1.getStaircaseCutOutShape());
      assertEquals("", homeFurnitureGroup1.getName());
      assertTrue(homeFurnitureGroup1.isResizable());
      assertNull(homeFurnitureGroup1.getCurrency());
      assertEquals(1.0F, homeFurnitureGroup1.getElevation(), 0.01F);
      assertNull(homeFurnitureGroup1.getDescription());
      assertEquals(0.0F, homeFurnitureGroup1.getAngle(), 0.01F);
      assertTrue(homeFurnitureGroup1.isVisible());
      assertEquals(1.0F, homeFurnitureGroup1.getGroundElevation(), 0.01F);
      assertEquals(0.5F, homeFurnitureGroup1.getY(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup1.getNameXOffset(), 0.01F);
      assertFalse(homeFurnitureGroup1.equals((Object)homeFurnitureGroup0));
      assertNotNull(homeFurnitureGroup1);
      assertNotSame(homeFurnitureGroup0, homeFurnitureGroup1);
      assertNotSame(homeFurnitureGroup1, homeFurnitureGroup0);
      
      homeFurnitureGroup1.addPropertyChangeListener(propertyChangeListenerProxy1);
      assertFalse(linkedList0.contains(homePieceOfFurniture0));
      assertEquals("", propertyChangeListenerProxy1.getPropertyName());
      assertEquals(1, linkedList0.size());
      assertTrue(homeFurnitureGroup0.isDeformable());
      assertEquals(1.0F, homeFurnitureGroup0.getDepth(), 0.01F);
      assertEquals(0.5F, homeFurnitureGroup0.getY(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getNameXOffset(), 0.01F);
      assertFalse(homeFurnitureGroup0.isModelMirrored());
      assertEquals(1.0F, homeFurnitureGroup0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getNameAngle(), 0.01F);
      assertFalse(homeFurnitureGroup0.isMovable());
      assertEquals((-1.0F), homeFurnitureGroup0.getHeight(), 0.01F);
      assertNull(homeFurnitureGroup0.getColor());
      assertEquals(1331.01F, homeFurnitureGroup0.getWidth(), 0.01F);
      assertNull(homeFurnitureGroup0.getStaircaseCutOutShape());
      assertTrue(homeFurnitureGroup0.isResizable());
      assertNull(homeFurnitureGroup0.getCatalogId());
      assertNull(homeFurnitureGroup0.getShininess());
      assertEquals(0.0F, homeFurnitureGroup0.getNameYOffset(), 0.01F);
      assertTrue(homeFurnitureGroup0.isVisible());
      assertEquals(665.505F, homeFurnitureGroup0.getX(), 0.01F);
      assertNull(homeFurnitureGroup0.getCurrency());
      assertFalse(homeFurnitureGroup0.isBackFaceShown());
      assertFalse(homeFurnitureGroup0.isNameVisible());
      assertEquals("", homeFurnitureGroup0.getName());
      assertTrue(homeFurnitureGroup0.isTexturable());
      assertNull(homeFurnitureGroup0.getDescription());
      assertEquals(1.0F, homeFurnitureGroup0.getElevation(), 0.01F);
      assertFalse(homeFurnitureGroup0.isDoorOrWindow());
      assertEquals(0.0F, homeFurnitureGroup0.getAngle(), 0.01F);
      assertTrue(homeFurnitureGroup1.isTexturable());
      assertFalse(homeFurnitureGroup1.isModelMirrored());
      assertNull(homeFurnitureGroup1.getColor());
      assertFalse(homeFurnitureGroup1.isNameVisible());
      assertFalse(homeFurnitureGroup1.isDoorOrWindow());
      assertEquals(665.505F, homeFurnitureGroup1.getX(), 0.01F);
      assertFalse(homeFurnitureGroup1.isBackFaceShown());
      assertEquals(1331.01F, homeFurnitureGroup1.getWidth(), 0.01F);
      assertEquals(1.0F, homeFurnitureGroup1.getDepth(), 0.01F);
      assertTrue(homeFurnitureGroup1.isDeformable());
      assertEquals(0.0F, homeFurnitureGroup1.getNameYOffset(), 0.01F);
      assertFalse(homeFurnitureGroup1.isMovable());
      assertEquals((-1.0F), homeFurnitureGroup1.getHeight(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup1.getNameAngle(), 0.01F);
      assertNull(homeFurnitureGroup1.getCatalogId());
      assertNull(homeFurnitureGroup1.getShininess());
      assertNull(homeFurnitureGroup1.getStaircaseCutOutShape());
      assertEquals("", homeFurnitureGroup1.getName());
      assertTrue(homeFurnitureGroup1.isResizable());
      assertNull(homeFurnitureGroup1.getCurrency());
      assertEquals(1.0F, homeFurnitureGroup1.getElevation(), 0.01F);
      assertNull(homeFurnitureGroup1.getDescription());
      assertEquals(0.0F, homeFurnitureGroup1.getAngle(), 0.01F);
      assertTrue(homeFurnitureGroup1.isVisible());
      assertEquals(1.0F, homeFurnitureGroup1.getGroundElevation(), 0.01F);
      assertEquals(0.5F, homeFurnitureGroup1.getY(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup1.getNameXOffset(), 0.01F);
      assertEquals("", propertyChangeListenerProxy0.getPropertyName());
      assertFalse(propertyChangeListenerProxy1.equals((Object)propertyChangeListenerProxy0));
      assertFalse(homeFurnitureGroup0.equals((Object)homeFurnitureGroup1));
      assertFalse(homeFurnitureGroup1.equals((Object)homeFurnitureGroup0));
      assertFalse(propertyChangeListenerProxy0.equals((Object)propertyChangeListenerProxy1));
      assertNotSame(propertyChangeListenerProxy1, propertyChangeListenerProxy0);
      assertNotSame(homeFurnitureGroup0, homeFurnitureGroup1);
      assertNotSame(homeFurnitureGroup1, homeFurnitureGroup0);
      assertNotSame(propertyChangeListenerProxy0, propertyChangeListenerProxy1);
      
      homeFurnitureGroup0.setHeight(2001);
      assertFalse(linkedList0.contains(homePieceOfFurniture0));
      assertEquals(1, linkedList0.size());
      assertTrue(homeFurnitureGroup0.isDeformable());
      assertEquals(1.0F, homeFurnitureGroup0.getDepth(), 0.01F);
      assertEquals(0.5F, homeFurnitureGroup0.getY(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getNameXOffset(), 0.01F);
      assertFalse(homeFurnitureGroup0.isModelMirrored());
      assertEquals(1.0F, homeFurnitureGroup0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getNameAngle(), 0.01F);
      assertFalse(homeFurnitureGroup0.isMovable());
      assertNull(homeFurnitureGroup0.getColor());
      assertEquals(1331.01F, homeFurnitureGroup0.getWidth(), 0.01F);
      assertNull(homeFurnitureGroup0.getStaircaseCutOutShape());
      assertTrue(homeFurnitureGroup0.isResizable());
      assertEquals(2001.0F, homeFurnitureGroup0.getHeight(), 0.01F);
      assertNull(homeFurnitureGroup0.getCatalogId());
      assertNull(homeFurnitureGroup0.getShininess());
      assertEquals(0.0F, homeFurnitureGroup0.getNameYOffset(), 0.01F);
      assertTrue(homeFurnitureGroup0.isVisible());
      assertEquals(665.505F, homeFurnitureGroup0.getX(), 0.01F);
      assertNull(homeFurnitureGroup0.getCurrency());
      assertFalse(homeFurnitureGroup0.isBackFaceShown());
      assertFalse(homeFurnitureGroup0.isNameVisible());
      assertEquals("", homeFurnitureGroup0.getName());
      assertTrue(homeFurnitureGroup0.isTexturable());
      assertNull(homeFurnitureGroup0.getDescription());
      assertEquals(1.0F, homeFurnitureGroup0.getElevation(), 0.01F);
      assertFalse(homeFurnitureGroup0.isDoorOrWindow());
      assertEquals(0.0F, homeFurnitureGroup0.getAngle(), 0.01F);
      assertFalse(homeFurnitureGroup0.equals((Object)homeFurnitureGroup1));
      assertNotSame(homeFurnitureGroup0, homeFurnitureGroup1);
      
      String string0 = homeFurnitureGroup1.getCatalogId();
      assertFalse(linkedList0.contains(homePieceOfFurniture0));
      assertEquals(1, linkedList0.size());
      assertTrue(homeFurnitureGroup0.isDeformable());
      assertEquals(1.0F, homeFurnitureGroup0.getDepth(), 0.01F);
      assertEquals(0.5F, homeFurnitureGroup0.getY(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getNameXOffset(), 0.01F);
      assertFalse(homeFurnitureGroup0.isModelMirrored());
      assertEquals(1.0F, homeFurnitureGroup0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getNameAngle(), 0.01F);
      assertFalse(homeFurnitureGroup0.isMovable());
      assertNull(homeFurnitureGroup0.getColor());
      assertEquals(1331.01F, homeFurnitureGroup0.getWidth(), 0.01F);
      assertNull(homeFurnitureGroup0.getStaircaseCutOutShape());
      assertTrue(homeFurnitureGroup0.isResizable());
      assertEquals(2001.0F, homeFurnitureGroup0.getHeight(), 0.01F);
      assertNull(homeFurnitureGroup0.getCatalogId());
      assertNull(homeFurnitureGroup0.getShininess());
      assertEquals(0.0F, homeFurnitureGroup0.getNameYOffset(), 0.01F);
      assertTrue(homeFurnitureGroup0.isVisible());
      assertEquals(665.505F, homeFurnitureGroup0.getX(), 0.01F);
      assertNull(homeFurnitureGroup0.getCurrency());
      assertFalse(homeFurnitureGroup0.isBackFaceShown());
      assertFalse(homeFurnitureGroup0.isNameVisible());
      assertEquals("", homeFurnitureGroup0.getName());
      assertTrue(homeFurnitureGroup0.isTexturable());
      assertNull(homeFurnitureGroup0.getDescription());
      assertEquals(1.0F, homeFurnitureGroup0.getElevation(), 0.01F);
      assertFalse(homeFurnitureGroup0.isDoorOrWindow());
      assertEquals(0.0F, homeFurnitureGroup0.getAngle(), 0.01F);
      assertTrue(homeFurnitureGroup1.isTexturable());
      assertFalse(homeFurnitureGroup1.isModelMirrored());
      assertNull(homeFurnitureGroup1.getColor());
      assertFalse(homeFurnitureGroup1.isNameVisible());
      assertFalse(homeFurnitureGroup1.isDoorOrWindow());
      assertEquals(665.505F, homeFurnitureGroup1.getX(), 0.01F);
      assertFalse(homeFurnitureGroup1.isBackFaceShown());
      assertEquals(1331.01F, homeFurnitureGroup1.getWidth(), 0.01F);
      assertEquals(1.0F, homeFurnitureGroup1.getDepth(), 0.01F);
      assertTrue(homeFurnitureGroup1.isDeformable());
      assertEquals(0.0F, homeFurnitureGroup1.getNameYOffset(), 0.01F);
      assertFalse(homeFurnitureGroup1.isMovable());
      assertEquals((-1.0F), homeFurnitureGroup1.getHeight(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup1.getNameAngle(), 0.01F);
      assertNull(homeFurnitureGroup1.getCatalogId());
      assertNull(homeFurnitureGroup1.getShininess());
      assertNull(homeFurnitureGroup1.getStaircaseCutOutShape());
      assertEquals("", homeFurnitureGroup1.getName());
      assertTrue(homeFurnitureGroup1.isResizable());
      assertNull(homeFurnitureGroup1.getCurrency());
      assertEquals(1.0F, homeFurnitureGroup1.getElevation(), 0.01F);
      assertNull(homeFurnitureGroup1.getDescription());
      assertEquals(0.0F, homeFurnitureGroup1.getAngle(), 0.01F);
      assertTrue(homeFurnitureGroup1.isVisible());
      assertEquals(1.0F, homeFurnitureGroup1.getGroundElevation(), 0.01F);
      assertEquals(0.5F, homeFurnitureGroup1.getY(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup1.getNameXOffset(), 0.01F);
      assertFalse(homeFurnitureGroup0.equals((Object)homeFurnitureGroup1));
      assertFalse(homeFurnitureGroup1.equals((Object)homeFurnitureGroup0));
      assertNull(string0);
      assertNotSame(homeFurnitureGroup0, homeFurnitureGroup1);
      assertNotSame(homeFurnitureGroup1, homeFurnitureGroup0);
      
      boolean boolean1 = homeFurnitureGroup1.isDoorOrWindow();
      assertFalse(boolean1);
      assertFalse(linkedList0.contains(homePieceOfFurniture0));
      assertEquals(1, linkedList0.size());
      assertTrue(homeFurnitureGroup0.isDeformable());
      assertEquals(1.0F, homeFurnitureGroup0.getDepth(), 0.01F);
      assertEquals(0.5F, homeFurnitureGroup0.getY(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getNameXOffset(), 0.01F);
      assertFalse(homeFurnitureGroup0.isModelMirrored());
      assertEquals(1.0F, homeFurnitureGroup0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getNameAngle(), 0.01F);
      assertFalse(homeFurnitureGroup0.isMovable());
      assertNull(homeFurnitureGroup0.getColor());
      assertEquals(1331.01F, homeFurnitureGroup0.getWidth(), 0.01F);
      assertNull(homeFurnitureGroup0.getStaircaseCutOutShape());
      assertTrue(homeFurnitureGroup0.isResizable());
      assertEquals(2001.0F, homeFurnitureGroup0.getHeight(), 0.01F);
      assertNull(homeFurnitureGroup0.getCatalogId());
      assertNull(homeFurnitureGroup0.getShininess());
      assertEquals(0.0F, homeFurnitureGroup0.getNameYOffset(), 0.01F);
      assertTrue(homeFurnitureGroup0.isVisible());
      assertEquals(665.505F, homeFurnitureGroup0.getX(), 0.01F);
      assertNull(homeFurnitureGroup0.getCurrency());
      assertFalse(homeFurnitureGroup0.isBackFaceShown());
      assertFalse(homeFurnitureGroup0.isNameVisible());
      assertEquals("", homeFurnitureGroup0.getName());
      assertTrue(homeFurnitureGroup0.isTexturable());
      assertNull(homeFurnitureGroup0.getDescription());
      assertEquals(1.0F, homeFurnitureGroup0.getElevation(), 0.01F);
      assertFalse(homeFurnitureGroup0.isDoorOrWindow());
      assertEquals(0.0F, homeFurnitureGroup0.getAngle(), 0.01F);
      assertTrue(homeFurnitureGroup1.isTexturable());
      assertFalse(homeFurnitureGroup1.isModelMirrored());
      assertNull(homeFurnitureGroup1.getColor());
      assertFalse(homeFurnitureGroup1.isNameVisible());
      assertFalse(homeFurnitureGroup1.isDoorOrWindow());
      assertEquals(665.505F, homeFurnitureGroup1.getX(), 0.01F);
      assertFalse(homeFurnitureGroup1.isBackFaceShown());
      assertEquals(1331.01F, homeFurnitureGroup1.getWidth(), 0.01F);
      assertEquals(1.0F, homeFurnitureGroup1.getDepth(), 0.01F);
      assertTrue(homeFurnitureGroup1.isDeformable());
      assertEquals(0.0F, homeFurnitureGroup1.getNameYOffset(), 0.01F);
      assertFalse(homeFurnitureGroup1.isMovable());
      assertEquals((-1.0F), homeFurnitureGroup1.getHeight(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup1.getNameAngle(), 0.01F);
      assertNull(homeFurnitureGroup1.getCatalogId());
      assertNull(homeFurnitureGroup1.getShininess());
      assertNull(homeFurnitureGroup1.getStaircaseCutOutShape());
      assertEquals("", homeFurnitureGroup1.getName());
      assertTrue(homeFurnitureGroup1.isResizable());
      assertNull(homeFurnitureGroup1.getCurrency());
      assertEquals(1.0F, homeFurnitureGroup1.getElevation(), 0.01F);
      assertNull(homeFurnitureGroup1.getDescription());
      assertEquals(0.0F, homeFurnitureGroup1.getAngle(), 0.01F);
      assertTrue(homeFurnitureGroup1.isVisible());
      assertEquals(1.0F, homeFurnitureGroup1.getGroundElevation(), 0.01F);
      assertEquals(0.5F, homeFurnitureGroup1.getY(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup1.getNameXOffset(), 0.01F);
      assertFalse(homeFurnitureGroup0.equals((Object)homeFurnitureGroup1));
      assertFalse(homeFurnitureGroup1.equals((Object)homeFurnitureGroup0));
      assertFalse(boolean1 == boolean0);
      assertNotSame(homeFurnitureGroup0, homeFurnitureGroup1);
      assertNotSame(homeFurnitureGroup1, homeFurnitureGroup0);
      
      boolean boolean2 = homeFurnitureGroup0.containsPoint(0.0F, (-852.3583F), 0.0F);
      assertFalse(boolean2);
      assertFalse(linkedList0.contains(homePieceOfFurniture0));
      assertEquals(1, linkedList0.size());
      assertTrue(homeFurnitureGroup0.isDeformable());
      assertEquals(1.0F, homeFurnitureGroup0.getDepth(), 0.01F);
      assertEquals(0.5F, homeFurnitureGroup0.getY(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getNameXOffset(), 0.01F);
      assertFalse(homeFurnitureGroup0.isModelMirrored());
      assertEquals(1.0F, homeFurnitureGroup0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getNameAngle(), 0.01F);
      assertFalse(homeFurnitureGroup0.isMovable());
      assertNull(homeFurnitureGroup0.getColor());
      assertEquals(1331.01F, homeFurnitureGroup0.getWidth(), 0.01F);
      assertNull(homeFurnitureGroup0.getStaircaseCutOutShape());
      assertTrue(homeFurnitureGroup0.isResizable());
      assertEquals(2001.0F, homeFurnitureGroup0.getHeight(), 0.01F);
      assertNull(homeFurnitureGroup0.getCatalogId());
      assertNull(homeFurnitureGroup0.getShininess());
      assertEquals(0.0F, homeFurnitureGroup0.getNameYOffset(), 0.01F);
      assertTrue(homeFurnitureGroup0.isVisible());
      assertEquals(665.505F, homeFurnitureGroup0.getX(), 0.01F);
      assertNull(homeFurnitureGroup0.getCurrency());
      assertFalse(homeFurnitureGroup0.isBackFaceShown());
      assertFalse(homeFurnitureGroup0.isNameVisible());
      assertEquals("", homeFurnitureGroup0.getName());
      assertTrue(homeFurnitureGroup0.isTexturable());
      assertNull(homeFurnitureGroup0.getDescription());
      assertEquals(1.0F, homeFurnitureGroup0.getElevation(), 0.01F);
      assertFalse(homeFurnitureGroup0.isDoorOrWindow());
      assertEquals(0.0F, homeFurnitureGroup0.getAngle(), 0.01F);
      assertFalse(homeFurnitureGroup0.equals((Object)homeFurnitureGroup1));
      assertFalse(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertNotSame(homeFurnitureGroup0, homeFurnitureGroup1);
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      LinkedList<HomePieceOfFurniture> linkedList0 = new LinkedList<HomePieceOfFurniture>();
      ResourceURLContent resourceURLContent0 = new ResourceURLContent((URL) null, true);
      LightSource[] lightSourceArray0 = new LightSource[1];
      Float float0 = new Float(0.0);
      float[][] floatArray0 = new float[4][6];
      BigDecimal bigDecimal0 = new BigDecimal((-1L));
      BigDecimal bigDecimal1 = new BigDecimal((-1L));
      CatalogLight catalogLight0 = new CatalogLight("_])7g^)gy+P0XH3", "_])7g^)gy+P0XH3", "/<gAhL`8>", resourceURLContent0, resourceURLContent0, resourceURLContent0, 1331.01F, 1.0F, (-1L), 1.0F, false, lightSourceArray0, floatArray0, "DEPTH", true, bigDecimal1, bigDecimal0);
      HomeLight homeLight0 = new HomeLight(catalogLight0);
      HomePieceOfFurniture homePieceOfFurniture0 = new HomePieceOfFurniture(homeLight0);
      linkedList0.add((HomePieceOfFurniture) homeLight0);
      PropertyChangeListener propertyChangeListener0 = mock(PropertyChangeListener.class, new ViolatedAssumptionAnswer());
      PropertyChangeListenerProxy propertyChangeListenerProxy0 = new PropertyChangeListenerProxy("", propertyChangeListener0);
      PropertyChangeListenerProxy propertyChangeListenerProxy1 = new PropertyChangeListenerProxy("", propertyChangeListenerProxy0);
      HomeFurnitureGroup homeFurnitureGroup0 = new HomeFurnitureGroup(linkedList0, "");
      HomeFurnitureGroup homeFurnitureGroup1 = homeFurnitureGroup0.clone();
      homeFurnitureGroup1.addPropertyChangeListener(propertyChangeListenerProxy1);
      homeFurnitureGroup1.getCatalogId();
      homeFurnitureGroup0.isTexturable();
      homeFurnitureGroup1.setWidth(635.3535F);
      homeFurnitureGroup0.isDoorOrWindow();
      homeFurnitureGroup1.isTexturable();
      homeFurnitureGroup0.setElevation((-1.0F));
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      LinkedList<HomePieceOfFurniture> linkedList0 = new LinkedList<HomePieceOfFurniture>();
      ResourceURLContent resourceURLContent0 = new ResourceURLContent((URL) null, true);
      LightSource[] lightSourceArray0 = new LightSource[1];
      float[][] floatArray0 = new float[4][6];
      BigDecimal bigDecimal0 = new BigDecimal((long) 2001);
      CatalogLight catalogLight0 = new CatalogLight("9", "DEH", "DEH", resourceURLContent0, resourceURLContent0, resourceURLContent0, 0.3926991F, 2001, 1.0F, (-2885.0872F), true, lightSourceArray0, floatArray0, "DEH", true, bigDecimal0, bigDecimal0);
      HomeLight homeLight0 = new HomeLight(catalogLight0);
      linkedList0.add((HomePieceOfFurniture) homeLight0);
      HomeFurnitureGroup homeFurnitureGroup0 = new HomeFurnitureGroup(linkedList0, "");
      linkedList0.pop();
      homeFurnitureGroup0.clone();
      linkedList0.addFirst(homeFurnitureGroup0);
      float float0 = 0.3927F;
      Integer.getInteger("DEH");
      homeFurnitureGroup0.setColor((Integer) null);
      // Undeclared exception!
      try { 
        homeFurnitureGroup0.setWidth(float0);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
      }
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      LinkedList<HomePieceOfFurniture> linkedList0 = new LinkedList<HomePieceOfFurniture>();
      ResourceURLContent resourceURLContent0 = new ResourceURLContent((URL) null, true);
      LightSource[] lightSourceArray0 = new LightSource[1];
      Float float0 = new Float(0.0);
      float[][] floatArray0 = new float[4][6];
      BigDecimal bigDecimal0 = new BigDecimal((-1L));
      CatalogLight catalogLight0 = new CatalogLight("_])7g^)gy+P0XH3", "_])7g^)gy+P0XH3", "/<gAhL`8>", resourceURLContent0, resourceURLContent0, resourceURLContent0, 1331.01F, 1.0F, (-1L), 1.0F, true, lightSourceArray0, floatArray0, "_])7g^)gy+P0XH3", true, bigDecimal0, bigDecimal0);
      HomeLight homeLight0 = new HomeLight(catalogLight0);
      linkedList0.add((HomePieceOfFurniture) homeLight0);
      LinkedList<HomePieceOfFurniture> linkedList1 = new LinkedList<HomePieceOfFurniture>();
      linkedList1.addFirst(homeLight0);
      Integer.getInteger("8|;.zEk|?kS}yX{5-");
      HomeFurnitureGroup homeFurnitureGroup0 = new HomeFurnitureGroup(linkedList0, "8|;.zEk|?kS}yX{5-");
      homeFurnitureGroup0.isTexturable();
      Integer integer0 = new Integer((-131));
      homeFurnitureGroup0.setColor(integer0);
      HomeFurnitureGroup homeFurnitureGroup1 = homeFurnitureGroup0.clone();
      homeFurnitureGroup1.setWidth(2.0F);
      HomeFurnitureGroup homeFurnitureGroup2 = homeFurnitureGroup0.clone();
      linkedList1.add((HomePieceOfFurniture) homeFurnitureGroup2);
      HomeFurnitureGroup homeFurnitureGroup3 = new HomeFurnitureGroup(linkedList1, "");
      homeFurnitureGroup0.getDepth();
      homeFurnitureGroup1.setAngle(0.3927F);
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      LinkedList<HomePieceOfFurniture> linkedList0 = new LinkedList<HomePieceOfFurniture>();
      ResourceURLContent resourceURLContent0 = new ResourceURLContent((URL) null, true);
      LightSource[] lightSourceArray0 = new LightSource[1];
      int int0 = 2001;
      Float float0 = new Float(0.0);
      float[][] floatArray0 = new float[4][6];
      BigDecimal bigDecimal0 = new BigDecimal((long) 2001);
      CatalogLight catalogLight0 = new CatalogLight("9", "DEPTH", "DEPTH", resourceURLContent0, resourceURLContent0, resourceURLContent0, 0.3926991F, 2001.0F, 1.0F, (-2885.0872F), true, lightSourceArray0, floatArray0, "DEPTH", true, bigDecimal0, bigDecimal0);
      HomeLight homeLight0 = new HomeLight(catalogLight0);
      linkedList0.add((HomePieceOfFurniture) homeLight0);
      HomeFurnitureGroup homeFurnitureGroup0 = new HomeFurnitureGroup(linkedList0, "DEPTH");
      linkedList0.pop();
      HomeFurnitureGroup homeFurnitureGroup1 = homeFurnitureGroup0.clone();
      linkedList0.addFirst(homeFurnitureGroup1);
      homeFurnitureGroup1.setWidth(2001);
      homeFurnitureGroup0.getModel();
      homeFurnitureGroup1.setVisible(true);
      HomeFurnitureGroup homeFurnitureGroup2 = null;
      try {
        homeFurnitureGroup2 = new HomeFurnitureGroup(linkedList0, "_])7g^)gy+P0XH3");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.eteks.sweethome3d.model.HomeFurnitureGroup", e);
      }
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      LinkedList<HomePieceOfFurniture> linkedList0 = new LinkedList<HomePieceOfFurniture>();
      ResourceURLContent resourceURLContent0 = new ResourceURLContent((URL) null, true);
      LightSource[] lightSourceArray0 = new LightSource[1];
      float[][] floatArray0 = new float[4][6];
      BigDecimal bigDecimal0 = BigDecimal.ZERO;
      CatalogLight catalogLight0 = new CatalogLight("9", "DEPTH", "DEPTH", resourceURLContent0, resourceURLContent0, resourceURLContent0, 0.3926991F, 2001.0F, 1.0F, (-2885.0872F), true, lightSourceArray0, floatArray0, "DEPTH", true, bigDecimal0, bigDecimal0);
      HomeLight homeLight0 = new HomeLight(catalogLight0);
      homeLight0.setNameVisible(true);
      linkedList0.add((HomePieceOfFurniture) homeLight0);
      HomeFurnitureGroup homeFurnitureGroup0 = new HomeFurnitureGroup(linkedList0, "com.eteks.sweethome3d.model.HomeTexture");
      HomeFurnitureGroup homeFurnitureGroup1 = homeFurnitureGroup0.clone();
      homeFurnitureGroup1.setHeight(0.3926991F);
      HomeFurnitureGroup homeFurnitureGroup2 = new HomeFurnitureGroup(linkedList0, "DEPTH");
      homeFurnitureGroup1.clone();
      homeFurnitureGroup0.setY(0.3926991F);
      homeFurnitureGroup1.getModelRotation();
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      LinkedList<HomePieceOfFurniture> linkedList0 = new LinkedList<HomePieceOfFurniture>();
      ResourceURLContent resourceURLContent0 = new ResourceURLContent((URL) null, true);
      LightSource[] lightSourceArray0 = new LightSource[1];
      Float float0 = new Float(0.0);
      float[][] floatArray0 = new float[4][6];
      BigDecimal bigDecimal0 = new BigDecimal((-1L));
      BigDecimal bigDecimal1 = new BigDecimal((-1L));
      CatalogLight catalogLight0 = new CatalogLight("_])7g^)gy+P0XH3", "_])7g^)gy+P0XH3", "/<gAhL`8>", resourceURLContent0, resourceURLContent0, resourceURLContent0, 1331.01F, 1.0F, (-1L), 1.0F, false, lightSourceArray0, floatArray0, "_])7g^)gy+P0XH3", true, bigDecimal1, bigDecimal0);
      HomeLight homeLight0 = new HomeLight(catalogLight0);
      HomePieceOfFurniture homePieceOfFurniture0 = new HomePieceOfFurniture(homeLight0);
      linkedList0.add((HomePieceOfFurniture) homeLight0);
      HomeFurnitureGroup homeFurnitureGroup0 = new HomeFurnitureGroup(linkedList0, (String) null);
      homeFurnitureGroup0.getCatalogId();
      HomeFurnitureGroup homeFurnitureGroup1 = new HomeFurnitureGroup(linkedList0, "");
      homeFurnitureGroup1.isDoorOrWindow();
      homeFurnitureGroup0.containsPoint(65.655F, (-1L), 1283.53F);
      homeFurnitureGroup1.getValueAddedTax();
      homeFurnitureGroup1.setHeight(0.0F);
      homeFurnitureGroup0.setY((-1L));
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      LinkedList<HomePieceOfFurniture> linkedList0 = new LinkedList<HomePieceOfFurniture>();
      ResourceURLContent resourceURLContent0 = new ResourceURLContent((URL) null, true);
      LightSource[] lightSourceArray0 = new LightSource[1];
      float[][] floatArray0 = new float[4][6];
      BigDecimal bigDecimal0 = new BigDecimal((long) 2001);
      bigDecimal0.ulp();
      CatalogLight catalogLight0 = new CatalogLight("M19", "_])7g^)gy+P0XH3", "_])7g^)gy+P0XH3", resourceURLContent0, resourceURLContent0, resourceURLContent0, 2001, 2001.0F, 1.0F, 2001, true, lightSourceArray0, floatArray0, "_])7g^)gy+P0XH3", true, bigDecimal0, bigDecimal0);
      HomeLight homeLight0 = new HomeLight(catalogLight0);
      HomePieceOfFurniture homePieceOfFurniture0 = new HomePieceOfFurniture(catalogLight0);
      linkedList0.add((HomePieceOfFurniture) homeLight0);
      HomeFurnitureGroup homeFurnitureGroup0 = new HomeFurnitureGroup(linkedList0, "_])7g^)gy+P0XH3");
      HomeFurnitureGroup homeFurnitureGroup1 = new HomeFurnitureGroup(linkedList0, "M19");
      homeFurnitureGroup1.setVisible(true);
      homeFurnitureGroup0.setDepth(1.0F);
      homeFurnitureGroup0.getValueAddedTax();
      homeFurnitureGroup1.getDepth();
      homeFurnitureGroup1.setAngle(2001.0F);
      homeFurnitureGroup0.getModelRotation();
      Integer integer0 = new Integer(2001);
      homeFurnitureGroup1.setColor(integer0);
      homeFurnitureGroup0.getDepth();
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      LinkedList<HomePieceOfFurniture> linkedList0 = new LinkedList<HomePieceOfFurniture>();
      ResourceURLContent resourceURLContent0 = new ResourceURLContent((URL) null, true);
      LightSource[] lightSourceArray0 = new LightSource[7];
      float[][] floatArray0 = new float[4][6];
      BigDecimal bigDecimal0 = new BigDecimal((long) 2001);
      bigDecimal0.ulp();
      CatalogLight catalogLight0 = new CatalogLight("9", "_])7g^)gy+P0XH3", "_])7g^)gy+P0XH3", resourceURLContent0, resourceURLContent0, resourceURLContent0, 2001, 2001.0F, 1.0F, 2001.0F, true, lightSourceArray0, floatArray0, "_])7g^)gy+P0XH3", true, bigDecimal0, bigDecimal0);
      HomeLight homeLight0 = new HomeLight(catalogLight0);
      HomePieceOfFurniture homePieceOfFurniture0 = new HomePieceOfFurniture(catalogLight0);
      linkedList0.add((HomePieceOfFurniture) homeLight0);
      HomeFurnitureGroup homeFurnitureGroup0 = new HomeFurnitureGroup(linkedList0, "_])7g^)gy+P0XH3");
      HomeFurnitureGroup homeFurnitureGroup1 = homeFurnitureGroup0.clone();
      homeFurnitureGroup0.getValueAddedTax();
      homeFurnitureGroup1.getDepth();
      homeFurnitureGroup1.setAngle(2001.0F);
      homeFurnitureGroup0.clone();
      homeFurnitureGroup0.setModelMirrored(true);
      homeFurnitureGroup1.getPriceValueAddedTaxIncluded();
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      LinkedList<HomePieceOfFurniture> linkedList0 = new LinkedList<HomePieceOfFurniture>();
      ResourceURLContent resourceURLContent0 = new ResourceURLContent((URL) null, true);
      LightSource[] lightSourceArray0 = new LightSource[1];
      float[][] floatArray0 = new float[4][6];
      BigDecimal bigDecimal0 = BigDecimal.ZERO;
      CatalogLight catalogLight0 = new CatalogLight("com.eteks.sweethome3d.model.BackgroundImage", "", "M8$z=8d&3U).lB", resourceURLContent0, resourceURLContent0, resourceURLContent0, 0.0F, 2226.03F, (-3138.7803F), 0.39290205F, true, lightSourceArray0, floatArray0, "", true, bigDecimal0, bigDecimal0);
      HomeLight homeLight0 = new HomeLight(catalogLight0);
      HomePieceOfFurniture homePieceOfFurniture0 = new HomePieceOfFurniture(homeLight0);
      linkedList0.add((HomePieceOfFurniture) homeLight0);
      HomeFurnitureGroup homeFurnitureGroup0 = new HomeFurnitureGroup(linkedList0, "DEPTH");
      linkedList0.pop();
      HomeFurnitureGroup homeFurnitureGroup1 = homeFurnitureGroup0.clone();
      homeFurnitureGroup1.getModel();
      CatalogTexture catalogTexture0 = new CatalogTexture("vQ_}{7DR'K*.fMar|(y", resourceURLContent0, (-1154.9897F), 1.0F, true);
      HomeTexture homeTexture0 = new HomeTexture(catalogTexture0);
      homeFurnitureGroup0.setTexture(homeTexture0);
      homeFurnitureGroup0.setTexture(homeTexture0);
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      LinkedList<HomePieceOfFurniture> linkedList0 = new LinkedList<HomePieceOfFurniture>();
      ResourceURLContent resourceURLContent0 = new ResourceURLContent((URL) null, true);
      LightSource[] lightSourceArray0 = new LightSource[1];
      Float float0 = new Float(0.0);
      float[][] floatArray0 = new float[4][6];
      BigDecimal bigDecimal0 = new BigDecimal((-1L));
      BigDecimal bigDecimal1 = new BigDecimal((-1L));
      CatalogLight catalogLight0 = new CatalogLight("_])7g^)gy+P0XH3", "_])7g^)gy+P0XH3", "/<gAhL`8>", resourceURLContent0, resourceURLContent0, resourceURLContent0, 1331.01F, 1.0F, (-1L), 1.0F, false, lightSourceArray0, floatArray0, "DEPTH", true, bigDecimal1, bigDecimal0);
      HomeLight homeLight0 = new HomeLight(catalogLight0);
      HomePieceOfFurniture homePieceOfFurniture0 = new HomePieceOfFurniture(homeLight0);
      linkedList0.add((HomePieceOfFurniture) homeLight0);
      PropertyChangeListener propertyChangeListener0 = mock(PropertyChangeListener.class, new ViolatedAssumptionAnswer());
      PropertyChangeListenerProxy propertyChangeListenerProxy0 = new PropertyChangeListenerProxy("", propertyChangeListener0);
      HomeFurnitureGroup homeFurnitureGroup0 = new HomeFurnitureGroup(linkedList0, "");
      HomeFurnitureGroup homeFurnitureGroup1 = homeFurnitureGroup0.clone();
      homeFurnitureGroup0.setHeight((-1L));
      HomeFurnitureGroup homeFurnitureGroup2 = new HomeFurnitureGroup(linkedList0, "");
      homeFurnitureGroup2.getCatalogId();
      homeFurnitureGroup0.isDoorOrWindow();
      homeFurnitureGroup1.setModelMirrored(false);
      homeFurnitureGroup2.setWidth((-1605.139F));
      homeFurnitureGroup1.isDoorOrWindow();
      homeFurnitureGroup2.isTexturable();
      homeFurnitureGroup1.setElevation(1.0F);
      homeFurnitureGroup2.getWidth();
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      LinkedList<HomePieceOfFurniture> linkedList0 = new LinkedList<HomePieceOfFurniture>();
      ResourceURLContent resourceURLContent0 = new ResourceURLContent((URL) null, true);
      LightSource[] lightSourceArray0 = new LightSource[1];
      Float float0 = new Float(0.0);
      LightSource lightSource0 = new LightSource(0.0F, 1.0F, 1331.01F, 2001, float0);
      lightSourceArray0[0] = lightSource0;
      float[][] floatArray0 = new float[4][6];
      BigDecimal bigDecimal0 = new BigDecimal((long) 2001);
      CatalogLight catalogLight0 = new CatalogLight("9", "DEPTH", "DEPTH", resourceURLContent0, resourceURLContent0, resourceURLContent0, 0.3926991F, 0.3926991F, 1.0F, (-2885.0872F), true, lightSourceArray0, floatArray0, "DEPTH", true, bigDecimal0, bigDecimal0);
      HomeLight homeLight0 = new HomeLight(catalogLight0);
      homeLight0.setPower((-540.37787F));
      linkedList0.add((HomePieceOfFurniture) homeLight0);
      homeLight0.setY(0.3926991F);
      HomePieceOfFurniture homePieceOfFurniture0 = new HomePieceOfFurniture(catalogLight0);
      linkedList0.add((HomePieceOfFurniture) homeLight0);
      HomeFurnitureGroup homeFurnitureGroup0 = new HomeFurnitureGroup(linkedList0, "_])7g^)gy+P0XH3");
      linkedList0.pop();
      homeFurnitureGroup0.getModel();
      homeFurnitureGroup0.setVisible(false);
      homeFurnitureGroup0.setHeight(2.0F);
      homeFurnitureGroup0.setDepth(1331.01F);
      homeFurnitureGroup0.getDepth();
      homeFurnitureGroup0.getValueAddedTax();
      homeFurnitureGroup0.intersectsRectangle(0.3926991F, 0.0F, (-540.37787F), 0.0F);
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      LinkedList<HomePieceOfFurniture> linkedList0 = new LinkedList<HomePieceOfFurniture>();
      ResourceURLContent resourceURLContent0 = new ResourceURLContent((URL) null, true);
      LightSource[] lightSourceArray0 = new LightSource[1];
      Float float0 = new Float(0.0);
      LightSource lightSource0 = new LightSource(2874.8F, 1.0F, 1331.01F, 2001, float0);
      lightSourceArray0[0] = lightSource0;
      float[][] floatArray0 = new float[4][6];
      BigDecimal bigDecimal0 = new BigDecimal((long) 2001);
      CatalogLight catalogLight0 = new CatalogLight("9", "DEPTH", "DEPTH", resourceURLContent0, resourceURLContent0, resourceURLContent0, 0.3926991F, 2001.0F, 1.0F, (-2885.0872F), true, lightSourceArray0, floatArray0, "DEPTH", true, bigDecimal0, bigDecimal0);
      HomeLight homeLight0 = new HomeLight(catalogLight0);
      homeLight0.setPower((-540.37787F));
      homeLight0.setY(0.3926991F);
      HomePieceOfFurniture homePieceOfFurniture0 = new HomePieceOfFurniture(catalogLight0);
      linkedList0.add((HomePieceOfFurniture) homeLight0);
      HomeFurnitureGroup homeFurnitureGroup0 = new HomeFurnitureGroup(linkedList0, "_])7g^)gy+P0XH3");
      homeFurnitureGroup0.getPoints();
      linkedList0.pop();
      homeFurnitureGroup0.getModel();
      homeFurnitureGroup0.setVisible(false);
      homeFurnitureGroup0.setHeight(2.0F);
      homeFurnitureGroup0.setDepth(2001.0F);
      homeFurnitureGroup0.getDepth();
      homeFurnitureGroup0.getValueAddedTax();
      homeFurnitureGroup0.setY(2001);
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      LinkedList<HomePieceOfFurniture> linkedList0 = new LinkedList<HomePieceOfFurniture>();
      ResourceURLContent resourceURLContent0 = new ResourceURLContent((URL) null, true);
      LightSource[] lightSourceArray0 = new LightSource[1];
      float[][] floatArray0 = new float[4][6];
      BigDecimal bigDecimal0 = new BigDecimal((long) 2001);
      bigDecimal0.ulp();
      CatalogLight catalogLight0 = new CatalogLight("9", "_])7g^)gy+P0XH3", "_])7g^)gy+P0XH3", resourceURLContent0, resourceURLContent0, resourceURLContent0, 2001, 2001.0F, 1.0F, (-2885.1F), true, lightSourceArray0, floatArray0, "_])7g^)gy+P0XH3", true, bigDecimal0, bigDecimal0);
      HomeLight homeLight0 = new HomeLight(catalogLight0);
      HomePieceOfFurniture homePieceOfFurniture0 = new HomePieceOfFurniture(catalogLight0);
      linkedList0.add((HomePieceOfFurniture) homeLight0);
      HomeFurnitureGroup homeFurnitureGroup0 = new HomeFurnitureGroup(linkedList0, "_])7g^)gy+P0XH3");
      linkedList0.pop();
      HomeFurnitureGroup homeFurnitureGroup1 = homeFurnitureGroup0.clone();
      homeFurnitureGroup0.getModel();
      homeFurnitureGroup0.setX((-2257.0F));
      homeFurnitureGroup1.getCurrency();
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      LinkedList<HomePieceOfFurniture> linkedList0 = new LinkedList<HomePieceOfFurniture>();
      ResourceURLContent resourceURLContent0 = new ResourceURLContent((URL) null, true);
      LightSource[] lightSourceArray0 = new LightSource[1];
      Float float0 = new Float(0.0);
      float[][] floatArray0 = new float[4][6];
      BigDecimal bigDecimal0 = new BigDecimal((-1L));
      BigDecimal bigDecimal1 = BigDecimal.TEN;
      bigDecimal0.add(bigDecimal1);
      CatalogLight catalogLight0 = new CatalogLight("_])7g^)gy+P0XH3", "_])7g^)gy+P0XH3", "/<_AhL`85", resourceURLContent0, resourceURLContent0, resourceURLContent0, 1331.01F, 1.0F, (-1L), 1.0F, false, lightSourceArray0, floatArray0, "_])7g^)gy+P0XH3", true, bigDecimal0, bigDecimal0);
      HomeLight homeLight0 = new HomeLight(catalogLight0);
      HomePieceOfFurniture homePieceOfFurniture0 = new HomePieceOfFurniture(homeLight0);
      linkedList0.add((HomePieceOfFurniture) homeLight0);
      CatalogLight catalogLight1 = new CatalogLight("/<_AhL`85", "/<_AhL`85", "/<_AhL`85", resourceURLContent0, resourceURLContent0, resourceURLContent0, (-1L), 1160.423F, 1160.423F, 88.9F, true, lightSourceArray0, floatArray0, "/<_AhL`85", false, false, true, bigDecimal0, bigDecimal0);
      HomeFurnitureGroup homeFurnitureGroup0 = new HomeFurnitureGroup(linkedList0, "");
      HomeFurnitureGroup homeFurnitureGroup1 = homeFurnitureGroup0.clone();
      homeFurnitureGroup1.getTexture();
      homeFurnitureGroup0.setTexture((HomeTexture) null);
      homeFurnitureGroup1.setModelMirrored(true);
      homeFurnitureGroup0.setWidth((-1L));
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      LinkedList<HomePieceOfFurniture> linkedList0 = new LinkedList<HomePieceOfFurniture>();
      ResourceURLContent resourceURLContent0 = new ResourceURLContent((URL) null, true);
      LightSource[] lightSourceArray0 = new LightSource[1];
      Float float0 = new Float(0.0);
      LightSource lightSource0 = new LightSource(2874.8F, 1.0F, 1331.01F, 2001, float0);
      lightSourceArray0[0] = lightSource0;
      float[][] floatArray0 = new float[4][6];
      BigDecimal bigDecimal0 = new BigDecimal((long) 2001);
      CatalogLight catalogLight0 = new CatalogLight("9", "DEPTH", "DEPTH", resourceURLContent0, resourceURLContent0, resourceURLContent0, 0.3926991F, 2001.0F, 1.0F, (-2885.0872F), true, lightSourceArray0, floatArray0, "DEPTH", true, bigDecimal0, bigDecimal0);
      HomeLight homeLight0 = new HomeLight(catalogLight0);
      homeLight0.setY(0.3926991F);
      HomePieceOfFurniture homePieceOfFurniture0 = new HomePieceOfFurniture(catalogLight0);
      linkedList0.add((HomePieceOfFurniture) homeLight0);
      HomeFurnitureGroup homeFurnitureGroup0 = new HomeFurnitureGroup(linkedList0, "_])7g^)gy+P0XH3");
      linkedList0.pop();
      HomeFurnitureGroup homeFurnitureGroup1 = homeFurnitureGroup0.clone();
      homeFurnitureGroup0.getModel();
      homeFurnitureGroup0.setVisible(false);
      homeFurnitureGroup0.setHeight(1331.01F);
      homeFurnitureGroup1.getCurrency();
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      LinkedList<HomePieceOfFurniture> linkedList0 = new LinkedList<HomePieceOfFurniture>();
      ResourceURLContent resourceURLContent0 = new ResourceURLContent((URL) null, true);
      LightSource[] lightSourceArray0 = new LightSource[1];
      Float float0 = new Float(0.0);
      float[][] floatArray0 = new float[4][6];
      BigDecimal bigDecimal0 = new BigDecimal((-1L));
      BigDecimal bigDecimal1 = new BigDecimal((-1L));
      CatalogLight catalogLight0 = new CatalogLight("_])7g^)gy+P0XH3", "_])7g^)gy+P0XH3", "/<gAhL`8>", resourceURLContent0, resourceURLContent0, resourceURLContent0, 1331.01F, 1.0F, (-1L), 1.0F, false, lightSourceArray0, floatArray0, "DEPTH", true, bigDecimal1, bigDecimal0);
      HomeLight homeLight0 = new HomeLight(catalogLight0);
      HomePieceOfFurniture homePieceOfFurniture0 = new HomePieceOfFurniture(homeLight0);
      linkedList0.add((HomePieceOfFurniture) homeLight0);
      PropertyChangeListener propertyChangeListener0 = mock(PropertyChangeListener.class, new ViolatedAssumptionAnswer());
      PropertyChangeListenerProxy propertyChangeListenerProxy0 = new PropertyChangeListenerProxy("", propertyChangeListener0);
      PropertyChangeListenerProxy propertyChangeListenerProxy1 = new PropertyChangeListenerProxy("", propertyChangeListenerProxy0);
      HomeFurnitureGroup homeFurnitureGroup0 = new HomeFurnitureGroup(linkedList0, "");
      HomeFurnitureGroup homeFurnitureGroup1 = homeFurnitureGroup0.clone();
      homeFurnitureGroup0.setHeight((-1L));
      HomeFurnitureGroup homeFurnitureGroup2 = new HomeFurnitureGroup(linkedList0, "");
      homeFurnitureGroup2.getCatalogId();
      homeFurnitureGroup0.isDoorOrWindow();
      homeFurnitureGroup1.setModelMirrored(false);
      homeFurnitureGroup2.setWidth((-1605.139F));
      homeFurnitureGroup1.isDoorOrWindow();
      homeFurnitureGroup2.isTexturable();
      homeFurnitureGroup1.setElevation(1.0F);
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      LinkedList<HomePieceOfFurniture> linkedList0 = new LinkedList<HomePieceOfFurniture>();
      ResourceURLContent resourceURLContent0 = new ResourceURLContent((URL) null, true);
      LightSource[] lightSourceArray0 = new LightSource[1];
      float[][] floatArray0 = new float[4][6];
      BigDecimal bigDecimal0 = BigDecimal.ZERO;
      CatalogLight catalogLight0 = new CatalogLight("9", "DEPTH", "DEPTH", resourceURLContent0, resourceURLContent0, resourceURLContent0, 0.3926991F, 2001.0F, 1.0F, 1.0F, true, lightSourceArray0, floatArray0, "DEPTH", true, bigDecimal0, bigDecimal0);
      HomeLight homeLight0 = new HomeLight(catalogLight0);
      homeLight0.setNameVisible(true);
      linkedList0.add((HomePieceOfFurniture) homeLight0);
      HomeFurnitureGroup homeFurnitureGroup0 = new HomeFurnitureGroup(linkedList0, (String) null);
      HomeFurnitureGroup homeFurnitureGroup1 = homeFurnitureGroup0.clone();
      homeFurnitureGroup1.getModel();
      homeFurnitureGroup0.setX(2001.0F);
      homeFurnitureGroup0.getTexture();
      homeFurnitureGroup1.setTexture((HomeTexture) null);
      homeFurnitureGroup1.getStaircaseCutOutShape();
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      LinkedList<HomePieceOfFurniture> linkedList0 = new LinkedList<HomePieceOfFurniture>();
      ResourceURLContent resourceURLContent0 = new ResourceURLContent((URL) null, true);
      LightSource[] lightSourceArray0 = new LightSource[1];
      Float float0 = new Float(0.0);
      float[][] floatArray0 = new float[4][6];
      BigDecimal bigDecimal0 = new BigDecimal((-1L));
      BigDecimal bigDecimal1 = new BigDecimal((-1L));
      CatalogLight catalogLight0 = new CatalogLight("_])7g^)gy+P0XH3", "_])7g^)gy+P0XH3", "/<gAhL`8>", resourceURLContent0, resourceURLContent0, resourceURLContent0, 1331.01F, 1.0F, (-1L), 1.0F, false, lightSourceArray0, floatArray0, "DEPTH", true, bigDecimal1, bigDecimal0);
      HomeLight homeLight0 = new HomeLight(catalogLight0);
      linkedList0.add((HomePieceOfFurniture) homeLight0);
      HomeFurnitureGroup homeFurnitureGroup0 = new HomeFurnitureGroup(linkedList0, "z");
      HomeFurnitureGroup homeFurnitureGroup1 = homeFurnitureGroup0.clone();
      homeFurnitureGroup1.getCatalogId();
      HomeFurnitureGroup homeFurnitureGroup2 = homeFurnitureGroup1.clone();
      homeFurnitureGroup2.isDoorOrWindow();
      homeFurnitureGroup2.containsPoint((-913.4841F), (-913.4841F), 635.3535F);
      homeFurnitureGroup0.getValueAddedTax();
      homeFurnitureGroup0.isMovable();
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      LinkedList<HomePieceOfFurniture> linkedList0 = new LinkedList<HomePieceOfFurniture>();
      ResourceURLContent resourceURLContent0 = new ResourceURLContent((URL) null, true);
      LightSource[] lightSourceArray0 = new LightSource[1];
      Float float0 = new Float(0.0);
      float[][] floatArray0 = new float[4][6];
      BigDecimal bigDecimal0 = new BigDecimal((-1L));
      BigDecimal bigDecimal1 = new BigDecimal((-1L));
      CatalogLight catalogLight0 = new CatalogLight("_])7g^)gy+P0XH3", "_])7g^)gy+P0XH3", "/<gAhL`8>", resourceURLContent0, resourceURLContent0, resourceURLContent0, 1331.01F, 1.0F, (-1L), 1.0F, false, lightSourceArray0, floatArray0, "DEPTH", true, bigDecimal1, bigDecimal0);
      HomeLight homeLight0 = new HomeLight(catalogLight0);
      HomePieceOfFurniture homePieceOfFurniture0 = new HomePieceOfFurniture(homeLight0);
      linkedList0.add((HomePieceOfFurniture) homeLight0);
      HomeFurnitureGroup homeFurnitureGroup0 = new HomeFurnitureGroup(linkedList0, "");
      HomeFurnitureGroup homeFurnitureGroup1 = homeFurnitureGroup0.clone();
      homeFurnitureGroup1.getCatalogId();
      homeFurnitureGroup1.isDoorOrWindow();
      homeFurnitureGroup0.containsPoint(0.0F, (-852.3583F), 0.0F);
      homeFurnitureGroup0.getValueAddedTax();
      homeFurnitureGroup0.setHeight(1331.01F);
      homeFurnitureGroup0.setY(1.0F);
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      LinkedList<HomePieceOfFurniture> linkedList0 = new LinkedList<HomePieceOfFurniture>();
      ResourceURLContent resourceURLContent0 = new ResourceURLContent((URL) null, true);
      LightSource[] lightSourceArray0 = new LightSource[1];
      Float float0 = new Float(0.0);
      float[][] floatArray0 = new float[4][6];
      BigDecimal bigDecimal0 = new BigDecimal((-1L));
      CatalogLight catalogLight0 = new CatalogLight("_])7g^)gy+P0XH3", "_])7g^)gy+P0XH3", "/<gAhL`8>", resourceURLContent0, resourceURLContent0, resourceURLContent0, 1331.01F, 1.0F, (-1L), 1.0F, true, lightSourceArray0, floatArray0, "DEPTH", true, bigDecimal0, bigDecimal0);
      HomeLight homeLight0 = new HomeLight(catalogLight0);
      HomePieceOfFurniture homePieceOfFurniture0 = new HomePieceOfFurniture(homeLight0);
      linkedList0.add((HomePieceOfFurniture) homeLight0);
      HomeFurnitureGroup homeFurnitureGroup0 = new HomeFurnitureGroup(linkedList0, "");
      HomeFurnitureGroup homeFurnitureGroup1 = homeFurnitureGroup0.clone();
      HomeFurnitureGroup homeFurnitureGroup2 = homeFurnitureGroup1.clone();
      homeFurnitureGroup2.isDoorOrWindow();
      homeFurnitureGroup1.containsPoint(1331.01F, (-1011.66693F), (-1L));
      homeFurnitureGroup0.getValueAddedTax();
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      LinkedList<HomePieceOfFurniture> linkedList0 = new LinkedList<HomePieceOfFurniture>();
      ResourceURLContent resourceURLContent0 = new ResourceURLContent((URL) null, true);
      LightSource[] lightSourceArray0 = new LightSource[1];
      float[][] floatArray0 = new float[4][6];
      BigDecimal bigDecimal0 = BigDecimal.ZERO;
      CatalogLight catalogLight0 = new CatalogLight("9", "_])7g^)gy+P0XH3", "", resourceURLContent0, resourceURLContent0, resourceURLContent0, 2001.0F, (-366.4097F), (-2885.0872F), (-1.0F), true, lightSourceArray0, floatArray0, "_])7g^)gy+P0XH3", true, bigDecimal0, bigDecimal0);
      HomeLight homeLight0 = new HomeLight(catalogLight0);
      HomeLight homeLight1 = homeLight0.clone();
      HomeLight homeLight2 = new HomeLight(homeLight1);
      homeLight2.setNameVisible(true);
      linkedList0.add((HomePieceOfFurniture) homeLight2);
      HomeFurnitureGroup homeFurnitureGroup0 = new HomeFurnitureGroup(linkedList0, "ahwo--)\"&!Y");
      homeFurnitureGroup0.setDepth((-1.51E-43F));
      HomeFurnitureGroup homeFurnitureGroup1 = homeFurnitureGroup0.clone();
      homeFurnitureGroup1.getValueAddedTax();
      homeFurnitureGroup1.getDepth();
      homeFurnitureGroup1.setAngle(3989.0F);
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      LinkedList<HomePieceOfFurniture> linkedList0 = new LinkedList<HomePieceOfFurniture>();
      ResourceURLContent resourceURLContent0 = new ResourceURLContent((URL) null, true);
      LightSource[] lightSourceArray0 = new LightSource[1];
      Float float0 = new Float(0.0);
      LightSource lightSource0 = new LightSource(2874.8F, 1.0F, 1331.01F, 2001, float0);
      float[][] floatArray0 = new float[4][6];
      BigDecimal bigDecimal0 = new BigDecimal((long) 2001);
      CatalogLight catalogLight0 = new CatalogLight("9", "DEPTH", "DEPTH", resourceURLContent0, resourceURLContent0, resourceURLContent0, 0.3926991F, 2001.0F, 1.0F, (-2885.0872F), true, lightSourceArray0, floatArray0, "DEPTH", true, bigDecimal0, bigDecimal0);
      HomeLight homeLight0 = new HomeLight(catalogLight0);
      homeLight0.setMovable(true);
      homeLight0.setNameVisible(false);
      linkedList0.add((HomePieceOfFurniture) homeLight0);
      HomeFurnitureGroup homeFurnitureGroup0 = new HomeFurnitureGroup(linkedList0, "_])7g^)gy+P0XH3");
      homeFurnitureGroup0.setDepth(1824.7F);
      homeFurnitureGroup0.getValueAddedTax();
      homeFurnitureGroup0.getDepth();
      homeFurnitureGroup0.getCurrency();
      homeFurnitureGroup0.getHeight();
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      LinkedList<HomePieceOfFurniture> linkedList0 = new LinkedList<HomePieceOfFurniture>();
      ResourceURLContent resourceURLContent0 = new ResourceURLContent((URL) null, true);
      LightSource[] lightSourceArray0 = new LightSource[1];
      Float float0 = new Float(0.0);
      LightSource lightSource0 = new LightSource(88.9F, (-31.701214F), 1331.01F, 2001, float0);
      lightSourceArray0[0] = lightSource0;
      float[][] floatArray0 = new float[4][6];
      BigDecimal bigDecimal0 = new BigDecimal((long) 2001);
      BigDecimal bigDecimal1 = new BigDecimal((-1L));
      BigDecimal bigDecimal2 = new BigDecimal((-1L));
      CatalogLight catalogLight0 = new CatalogLight("_])7g^)gy+P0XH3", "_])7g^)gy+P0XH3", "/<gAhL`8>", resourceURLContent0, resourceURLContent0, resourceURLContent0, 1331.01F, (-31.701214F), (-1L), (-31.701214F), false, lightSourceArray0, floatArray0, "DEPTH", true, bigDecimal2, bigDecimal1);
      HomeLight homeLight0 = new HomeLight(catalogLight0);
      linkedList0.add((HomePieceOfFurniture) homeLight0);
      PropertyChangeListener propertyChangeListener0 = mock(PropertyChangeListener.class, new ViolatedAssumptionAnswer());
      PropertyChangeListenerProxy propertyChangeListenerProxy0 = new PropertyChangeListenerProxy("", propertyChangeListener0);
      PropertyChangeListenerProxy propertyChangeListenerProxy1 = new PropertyChangeListenerProxy("", propertyChangeListenerProxy0);
      HomeFurnitureGroup homeFurnitureGroup0 = new HomeFurnitureGroup(linkedList0, "");
      HomeFurnitureGroup homeFurnitureGroup1 = homeFurnitureGroup0.clone();
      homeFurnitureGroup1.setAngle(2001);
      homeFurnitureGroup1.setModelMirrored(false);
      homeFurnitureGroup1.setWidth((-1605.139F));
      homeFurnitureGroup0.isDoorOrWindow();
      homeFurnitureGroup1.isTexturable();
      homeFurnitureGroup0.setElevation(88.9F);
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      LinkedList<HomePieceOfFurniture> linkedList0 = new LinkedList<HomePieceOfFurniture>();
      ResourceURLContent resourceURLContent0 = new ResourceURLContent((URL) null, true);
      LightSource[] lightSourceArray0 = new LightSource[1];
      Float float0 = new Float(0.0);
      LightSource lightSource0 = new LightSource(2874.8F, 1.0F, 1331.01F, 2001, float0);
      lightSourceArray0[0] = lightSource0;
      float[][] floatArray0 = new float[4][6];
      BigDecimal bigDecimal0 = new BigDecimal((long) 2001);
      CatalogLight catalogLight0 = new CatalogLight("9", "DEPTH", "DEPTH", resourceURLContent0, resourceURLContent0, resourceURLContent0, 0.3926991F, 2001.0F, 1.0F, (-2885.0872F), true, lightSourceArray0, floatArray0, "DEPTH", true, bigDecimal0, bigDecimal0);
      catalogLight0.setCategory((FurnitureCategory) null);
      HomeLight homeLight0 = new HomeLight(catalogLight0);
      homeLight0.setY(0.3926991F);
      HomePieceOfFurniture homePieceOfFurniture0 = new HomePieceOfFurniture(catalogLight0);
      linkedList0.add((HomePieceOfFurniture) homeLight0);
      HomeFurnitureGroup homeFurnitureGroup0 = new HomeFurnitureGroup(linkedList0, "_])7g^)gy+P0XH3");
      linkedList0.pop();
      HomeFurnitureGroup homeFurnitureGroup1 = homeFurnitureGroup0.clone();
      homeFurnitureGroup1.setWidth((-7.83947F));
      homeFurnitureGroup0.getModel();
      homeFurnitureGroup0.setVisible(false);
      homeFurnitureGroup0.setHeight(1331.01F);
      homeFurnitureGroup0.setHeight((-1.0F));
      homeFurnitureGroup1.getFurniture();
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      LinkedList<HomePieceOfFurniture> linkedList0 = new LinkedList<HomePieceOfFurniture>();
      ResourceURLContent resourceURLContent0 = new ResourceURLContent((URL) null, true);
      LightSource[] lightSourceArray0 = new LightSource[1];
      Float float0 = new Float(0.0);
      LightSource lightSource0 = new LightSource(88.9F, 1.0F, 1331.01F, 2001, float0);
      lightSourceArray0[0] = lightSource0;
      float[][] floatArray0 = new float[4][6];
      float[] floatArray1 = new float[5];
      floatArray1[0] = 88.9F;
      floatArray1[1] = 88.9F;
      floatArray1[2] = 2874.8F;
      floatArray1[3] = 1331.01F;
      floatArray1[4] = 0.3926991F;
      floatArray0[0] = floatArray1;
      float[] floatArray2 = new float[3];
      floatArray2[0] = 1331.01F;
      floatArray2[2] = 1.0F;
      floatArray0[1] = floatArray2;
      float[] floatArray3 = new float[8];
      floatArray3[0] = 1331.01F;
      floatArray3[1] = 2874.8F;
      floatArray3[2] = 0.3926991F;
      floatArray3[3] = 2874.8F;
      floatArray3[4] = 1331.01F;
      floatArray3[5] = 0.3926991F;
      floatArray3[6] = 0.3926991F;
      floatArray1[1] = 2874.8F;
      floatArray0[2] = floatArray3;
      float[] floatArray4 = new float[8];
      floatArray4[0] = 1331.01F;
      floatArray4[1] = (float) 2001;
      floatArray4[2] = 1331.01F;
      floatArray4[3] = (float) 2001;
      floatArray3[3] = 0.3926991F;
      floatArray4[6] = 0.3926991F;
      floatArray4[7] = 0.3926991F;
      floatArray0[3] = floatArray4;
      BigDecimal bigDecimal0 = new BigDecimal((long) 2001);
      CatalogLight catalogLight0 = new CatalogLight("_])7g^)gy+P0XH3", "DEPTH", "</p^5h1qOKEO[", resourceURLContent0, resourceURLContent0, resourceURLContent0, 2874.8F, 88.9F, 0.3926991F, 0.3926991F, true, lightSourceArray0, floatArray0, "DEPTH", true, bigDecimal0, bigDecimal0);
      HomeLight homeLight0 = new HomeLight(catalogLight0);
      HomePieceOfFurniture homePieceOfFurniture0 = new HomePieceOfFurniture(homeLight0);
      linkedList0.add(homePieceOfFurniture0);
      HomeFurnitureGroup homeFurnitureGroup0 = new HomeFurnitureGroup(linkedList0, "^Kt#*Xz$:kH^{z+");
      homeLight0.clone();
      HomeFurnitureGroup homeFurnitureGroup1 = homeFurnitureGroup0.clone();
      homeFurnitureGroup1.getModel();
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      LinkedList<HomePieceOfFurniture> linkedList0 = new LinkedList<HomePieceOfFurniture>();
      ResourceURLContent resourceURLContent0 = new ResourceURLContent((URL) null, true);
      LightSource[] lightSourceArray0 = new LightSource[1];
      Float float0 = new Float(0.0);
      LightSource lightSource0 = new LightSource(88.9F, 1.0F, 1331.01F, 2001, float0);
      lightSourceArray0[0] = lightSource0;
      float[][] floatArray0 = new float[4][6];
      BigDecimal bigDecimal0 = new BigDecimal((long) 2001);
      BigDecimal bigDecimal1 = new BigDecimal((-1L));
      BigDecimal bigDecimal2 = new BigDecimal((-1L));
      CatalogLight catalogLight0 = new CatalogLight("_])7g^)gy+P0XH3", "_])7g^)gy+P0XH3", "/<gAhL`8>", resourceURLContent0, resourceURLContent0, resourceURLContent0, 1331.01F, 1.0F, (-1L), 1.0F, false, lightSourceArray0, floatArray0, "DEPTH", true, bigDecimal2, bigDecimal1);
      String[] stringArray0 = new String[2];
      stringArray0[0] = "";
      stringArray0[1] = "com.eteks.sweethome3d.model.HomePieceOfFurniture$19";
      Long long0 = new Long((-1L));
      Long long1 = Long.getLong("", long0);
      URLContent uRLContent0 = new URLContent((URL) null);
      BigInteger bigInteger0 = BigInteger.ONE;
      BigDecimal bigDecimal3 = new BigDecimal(bigInteger0);
      CatalogPieceOfFurniture catalogPieceOfFurniture0 = new CatalogPieceOfFurniture(":K72ou~", "", "", "com.eteks.sweethome3d.model.HomePieceOfFurniture$19", stringArray0, long1, float0, uRLContent0, uRLContent0, resourceURLContent0, 2001, 1.0F, 0.19634955F, 2001.0F, false, "8|@[kr!{", floatArray0, "DEPTH", false, true, false, bigDecimal1, bigDecimal3, "");
      catalogLight0.compareTo(catalogPieceOfFurniture0);
      HomeLight homeLight0 = new HomeLight(catalogLight0);
      HomePieceOfFurniture homePieceOfFurniture0 = new HomePieceOfFurniture(homeLight0);
      linkedList0.add((HomePieceOfFurniture) homeLight0);
      PropertyChangeListener propertyChangeListener0 = mock(PropertyChangeListener.class, new ViolatedAssumptionAnswer());
      PropertyChangeListenerProxy propertyChangeListenerProxy0 = new PropertyChangeListenerProxy("", propertyChangeListener0);
      PropertyChangeListenerProxy propertyChangeListenerProxy1 = new PropertyChangeListenerProxy("", propertyChangeListenerProxy0);
      HomeFurnitureGroup homeFurnitureGroup0 = new HomeFurnitureGroup(linkedList0, "");
      HomeFurnitureGroup homeFurnitureGroup1 = homeFurnitureGroup0.clone();
      homeFurnitureGroup1.addPropertyChangeListener(propertyChangeListenerProxy1);
      homeFurnitureGroup1.setVisible(false);
      homeFurnitureGroup0.setHeight((-1203.788F));
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      LinkedList<HomePieceOfFurniture> linkedList0 = new LinkedList<HomePieceOfFurniture>();
      ResourceURLContent resourceURLContent0 = new ResourceURLContent((URL) null, true);
      LightSource[] lightSourceArray0 = new LightSource[1];
      Float float0 = new Float(0.0);
      float[][] floatArray0 = new float[4][6];
      BigDecimal bigDecimal0 = new BigDecimal((long) 2001);
      CatalogLight catalogLight0 = new CatalogLight("9", "DEPTH", "DEPTH", resourceURLContent0, resourceURLContent0, resourceURLContent0, 0.3926991F, 2001.0F, 1.0F, (-2885.0872F), true, lightSourceArray0, floatArray0, "DEPTH", true, bigDecimal0, bigDecimal0);
      HomeLight homeLight0 = new HomeLight(catalogLight0);
      homeLight0.setNameVisible(false);
      HomePieceOfFurniture homePieceOfFurniture0 = new HomePieceOfFurniture(catalogLight0);
      linkedList0.add((HomePieceOfFurniture) homeLight0);
      HomeFurnitureGroup homeFurnitureGroup0 = new HomeFurnitureGroup(linkedList0, "_])7g^)gy+P0XH3");
      homeFurnitureGroup0.setDepth(1824.7F);
      homeFurnitureGroup0.getValueAddedTax();
      homeFurnitureGroup0.getDepth();
      homeFurnitureGroup0.setAngle(0.0F);
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      LinkedList<HomePieceOfFurniture> linkedList0 = new LinkedList<HomePieceOfFurniture>();
      ResourceURLContent resourceURLContent0 = new ResourceURLContent((URL) null, true);
      LightSource[] lightSourceArray0 = new LightSource[1];
      Float float0 = new Float(0.0);
      LightSource lightSource0 = new LightSource(88.9F, 1.0F, 1331.01F, 2001, float0);
      lightSourceArray0[0] = lightSource0;
      float[][] floatArray0 = new float[4][6];
      BigDecimal bigDecimal0 = new BigDecimal((long) 2001);
      BigDecimal bigDecimal1 = new BigDecimal((-1L));
      BigDecimal bigDecimal2 = new BigDecimal((-1L));
      CatalogLight catalogLight0 = new CatalogLight("_])7g^)gy+P0XH3", "_])7g^)gy+P0XH3", "/<gAhL`8>", resourceURLContent0, resourceURLContent0, resourceURLContent0, 1331.01F, 1.0F, (-1L), 1.0F, false, lightSourceArray0, floatArray0, "DEPTH", true, bigDecimal2, bigDecimal1);
      HomeLight homeLight0 = new HomeLight(catalogLight0);
      HomePieceOfFurniture homePieceOfFurniture0 = new HomePieceOfFurniture(homeLight0);
      linkedList0.add((HomePieceOfFurniture) homeLight0);
      HomeLight homeLight1 = homeLight0.clone();
      linkedList0.removeFirstOccurrence(homeLight1);
      PropertyChangeListener propertyChangeListener0 = mock(PropertyChangeListener.class, new ViolatedAssumptionAnswer());
      PropertyChangeListenerProxy propertyChangeListenerProxy0 = new PropertyChangeListenerProxy("", propertyChangeListener0);
      PropertyChangeListenerProxy propertyChangeListenerProxy1 = new PropertyChangeListenerProxy("", propertyChangeListenerProxy0);
      HomeFurnitureGroup homeFurnitureGroup0 = new HomeFurnitureGroup(linkedList0, "");
      HomeFurnitureGroup homeFurnitureGroup1 = homeFurnitureGroup0.clone();
      homeFurnitureGroup1.addPropertyChangeListener(propertyChangeListenerProxy1);
      homeFurnitureGroup0.setHeight(2001);
      homeFurnitureGroup1.getCatalogId();
      homeFurnitureGroup1.isDoorOrWindow();
      homeFurnitureGroup1.getWidth();
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      LinkedList<HomePieceOfFurniture> linkedList0 = new LinkedList<HomePieceOfFurniture>();
      ResourceURLContent resourceURLContent0 = new ResourceURLContent((URL) null, true);
      LightSource[] lightSourceArray0 = new LightSource[1];
      Float float0 = new Float(0.0);
      float[][] floatArray0 = new float[4][6];
      BigDecimal bigDecimal0 = new BigDecimal((-1L));
      BigDecimal bigDecimal1 = new BigDecimal((-1L));
      CatalogLight catalogLight0 = new CatalogLight("_])7g^)gy+P0XH3", "_])7g^)gy+P0XH3", "/<gAhL`8>", resourceURLContent0, resourceURLContent0, resourceURLContent0, 1331.01F, 1.0F, (-1L), 1.0F, false, lightSourceArray0, floatArray0, "_])7g^)gy+P0XH3", true, bigDecimal1, bigDecimal0);
      HomeLight homeLight0 = new HomeLight(catalogLight0);
      bigDecimal1.toPlainString();
      HomePieceOfFurniture homePieceOfFurniture0 = new HomePieceOfFurniture(homeLight0);
      linkedList0.add((HomePieceOfFurniture) homeLight0);
      HomeFurnitureGroup homeFurnitureGroup0 = new HomeFurnitureGroup(linkedList0, (String) null);
      HomeFurnitureGroup homeFurnitureGroup1 = homeFurnitureGroup0.clone();
      homeFurnitureGroup1.isDoorOrWindow();
      homeFurnitureGroup1.containsPoint((-1.0F), 625.98F, 2.0F);
      homeFurnitureGroup0.getValueAddedTax();
      homeFurnitureGroup1.getValueAddedTaxPercentage();
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      LinkedList<HomePieceOfFurniture> linkedList0 = new LinkedList<HomePieceOfFurniture>();
      ResourceURLContent resourceURLContent0 = new ResourceURLContent((URL) null, true);
      LightSource[] lightSourceArray0 = new LightSource[1];
      Float float0 = new Float(0.0);
      LightSource lightSource0 = new LightSource(2874.8F, 1.0F, 1331.01F, 2001, float0);
      lightSourceArray0[0] = lightSource0;
      float[][] floatArray0 = new float[4][6];
      BigDecimal bigDecimal0 = new BigDecimal((long) 2001);
      CatalogLight catalogLight0 = new CatalogLight("9", "DEPTH", "DEPTH", resourceURLContent0, resourceURLContent0, resourceURLContent0, 0.3926991F, 2001.0F, 1.0F, (-2885.0872F), true, lightSourceArray0, floatArray0, "DEPTH", true, bigDecimal0, bigDecimal0);
      HomeLight homeLight0 = new HomeLight(catalogLight0);
      homeLight0.setPower((-540.37787F));
      homeLight0.setY(0.3926991F);
      HomePieceOfFurniture homePieceOfFurniture0 = new HomePieceOfFurniture(catalogLight0);
      linkedList0.add((HomePieceOfFurniture) homeLight0);
      HomeFurnitureGroup homeFurnitureGroup0 = new HomeFurnitureGroup(linkedList0, "_])7g^)gy+P0XH3");
      linkedList0.pop();
      homeFurnitureGroup0.getModel();
      homeFurnitureGroup0.setVisible(false);
      homeFurnitureGroup0.setHeight(2.0F);
      homeFurnitureGroup0.setDepth(2001.0F);
      homeFurnitureGroup0.getDepth();
      homeFurnitureGroup0.getValueAddedTax();
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      LinkedList<HomePieceOfFurniture> linkedList0 = new LinkedList<HomePieceOfFurniture>();
      ResourceURLContent resourceURLContent0 = new ResourceURLContent((URL) null, true);
      LightSource[] lightSourceArray0 = new LightSource[1];
      float[][] floatArray0 = new float[4][6];
      BigDecimal bigDecimal0 = new BigDecimal((long) 2001);
      bigDecimal0.ulp();
      CatalogLight catalogLight0 = new CatalogLight("_])7g^)gy+P0XH3", "_])7g^)gy+P0XH3", "_])7g^)gy+P0XH3", resourceURLContent0, resourceURLContent0, resourceURLContent0, 0.3926991F, 2001.0F, 1.0F, (-2885.1F), true, lightSourceArray0, floatArray0, "_])7g^)gy+P0XH3", true, bigDecimal0, bigDecimal0);
      HomeLight homeLight0 = new HomeLight(catalogLight0);
      homeLight0.setNameVisible(false);
      HomePieceOfFurniture homePieceOfFurniture0 = new HomePieceOfFurniture(catalogLight0);
      linkedList0.add((HomePieceOfFurniture) homeLight0);
      HomeFurnitureGroup homeFurnitureGroup0 = new HomeFurnitureGroup(linkedList0, "_])7g^)gy+P0XH3");
      linkedList0.pop();
      homeFurnitureGroup0.getModel();
      homeFurnitureGroup0.setHeight(1.0F);
      homeFurnitureGroup0.setY((-1283.3528F));
      homeFurnitureGroup0.getValueAddedTaxPercentage();
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      LinkedList<HomePieceOfFurniture> linkedList0 = new LinkedList<HomePieceOfFurniture>();
      ResourceURLContent resourceURLContent0 = new ResourceURLContent((URL) null, true);
      LightSource[] lightSourceArray0 = new LightSource[1];
      Float float0 = new Float(0.0);
      LightSource lightSource0 = new LightSource(2874.8F, 1.0F, 1331.01F, 2001, float0);
      lightSourceArray0[0] = lightSource0;
      float[][] floatArray0 = new float[4][6];
      BigDecimal bigDecimal0 = new BigDecimal((long) 2001);
      CatalogLight catalogLight0 = new CatalogLight("9", "DEPTH", "DEPTH", resourceURLContent0, resourceURLContent0, resourceURLContent0, 0.3926991F, 2001.0F, 1.0F, (-2885.0872F), true, lightSourceArray0, floatArray0, "DEPTH", true, bigDecimal0, bigDecimal0);
      HomeLight homeLight0 = new HomeLight(catalogLight0);
      homeLight0.setY(0.3926991F);
      HomePieceOfFurniture homePieceOfFurniture0 = new HomePieceOfFurniture(catalogLight0);
      linkedList0.add((HomePieceOfFurniture) homeLight0);
      HomeFurnitureGroup homeFurnitureGroup0 = new HomeFurnitureGroup(linkedList0, "_])7g^)gy+P0XH3");
      linkedList0.pop();
      HomeFurnitureGroup homeFurnitureGroup1 = homeFurnitureGroup0.clone();
      homeFurnitureGroup1.setWidth((-7.83947F));
      homeFurnitureGroup0.getModel();
      homeFurnitureGroup0.setVisible(false);
      homeFurnitureGroup0.setHeight(1331.01F);
      homeFurnitureGroup0.getIcon();
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      LinkedList<HomePieceOfFurniture> linkedList0 = new LinkedList<HomePieceOfFurniture>();
      ResourceURLContent resourceURLContent0 = new ResourceURLContent((URL) null, true);
      LightSource[] lightSourceArray0 = new LightSource[1];
      Float float0 = new Float(0.0);
      LightSource lightSource0 = new LightSource(2874.8F, 1.0F, 1331.01F, 2001, float0);
      lightSourceArray0[0] = lightSource0;
      float[][] floatArray0 = new float[4][6];
      BigDecimal bigDecimal0 = new BigDecimal((long) 2001);
      CatalogLight catalogLight0 = new CatalogLight("9", "DEPTH", "DEPTH", resourceURLContent0, resourceURLContent0, resourceURLContent0, 0.3926991F, 2001.0F, 1.0F, (-2885.0872F), true, lightSourceArray0, floatArray0, "DEPTH", true, bigDecimal0, bigDecimal0);
      BigDecimal bigDecimal1 = BigDecimal.TEN;
      bigDecimal0.subtract(bigDecimal1);
      HomeLight homeLight0 = new HomeLight(catalogLight0);
      homeLight0.setY(0.3926991F);
      HomePieceOfFurniture homePieceOfFurniture0 = new HomePieceOfFurniture(catalogLight0);
      linkedList0.add((HomePieceOfFurniture) homeLight0);
      HomeFurnitureGroup homeFurnitureGroup0 = new HomeFurnitureGroup(linkedList0, "_])7g^)gy+P0XH3");
      linkedList0.pop();
      HomeFurnitureGroup homeFurnitureGroup1 = homeFurnitureGroup0.clone();
      homeFurnitureGroup0.getModel();
      homeFurnitureGroup0.setVisible(false);
      homeFurnitureGroup0.setHeight(1331.01F);
      homeFurnitureGroup1.setDepth(3679.382F);
      homeFurnitureGroup1.getDepth();
      homeFurnitureGroup1.intersectsRectangle(0.3926991F, 930.0F, 0.0F, 2874.8F);
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      LinkedList<HomePieceOfFurniture> linkedList0 = new LinkedList<HomePieceOfFurniture>();
      ResourceURLContent resourceURLContent0 = new ResourceURLContent((URL) null, true);
      LightSource[] lightSourceArray0 = new LightSource[1];
      Float float0 = new Float(0.0);
      LightSource lightSource0 = new LightSource(88.9F, 1.0F, 1331.01F, 2001, float0);
      lightSourceArray0[0] = lightSource0;
      float[][] floatArray0 = new float[4][6];
      BigDecimal bigDecimal0 = new BigDecimal((long) 2001);
      BigDecimal bigDecimal1 = new BigDecimal((long) 2001);
      CatalogLight catalogLight0 = new CatalogLight("_])7g^)gy+P0XH3", "K)`=", "", resourceURLContent0, resourceURLContent0, resourceURLContent0, 0.0F, 0.0F, 124.49F, 0.0F, true, lightSourceArray0, floatArray0, (String) null, true, bigDecimal1, bigDecimal1);
      HomeLight homeLight0 = new HomeLight(catalogLight0);
      HomePieceOfFurniture homePieceOfFurniture0 = new HomePieceOfFurniture(homeLight0);
      linkedList0.add((HomePieceOfFurniture) homeLight0);
      HomeFurnitureGroup homeFurnitureGroup0 = new HomeFurnitureGroup(linkedList0, "_])7g^)gy+P0XH3");
      linkedList0.pop();
      homeFurnitureGroup0.clone();
      homeFurnitureGroup0.getModel();
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      LinkedList<HomePieceOfFurniture> linkedList0 = new LinkedList<HomePieceOfFurniture>();
      ResourceURLContent resourceURLContent0 = new ResourceURLContent((URL) null, true);
      LightSource[] lightSourceArray0 = new LightSource[1];
      Float float0 = new Float(0.0);
      float[][] floatArray0 = new float[4][6];
      BigDecimal bigDecimal0 = new BigDecimal((-1L));
      BigDecimal bigDecimal1 = new BigDecimal((-1L));
      CatalogLight catalogLight0 = new CatalogLight("_])7g^)gy+P0XH3", "_])7g^)gy+P0XH3", "/<gAhL`8>", resourceURLContent0, resourceURLContent0, resourceURLContent0, 1331.01F, 1.0F, (-1L), 1.0F, false, lightSourceArray0, floatArray0, "DEPTH", true, bigDecimal1, bigDecimal0);
      HomeLight homeLight0 = new HomeLight(catalogLight0);
      homeLight0.setNameAngle((-1L));
      homeLight0.setAngle((-268.33878F));
      HomePieceOfFurniture homePieceOfFurniture0 = new HomePieceOfFurniture(homeLight0);
      linkedList0.add((HomePieceOfFurniture) homeLight0);
      PropertyChangeListener propertyChangeListener0 = mock(PropertyChangeListener.class, new ViolatedAssumptionAnswer());
      PropertyChangeListenerProxy propertyChangeListenerProxy0 = new PropertyChangeListenerProxy("", propertyChangeListener0);
      HomeFurnitureGroup homeFurnitureGroup0 = new HomeFurnitureGroup(linkedList0, "");
      HomeFurnitureGroup homeFurnitureGroup1 = homeFurnitureGroup0.clone();
      homeFurnitureGroup0.setHeight((-1L));
      HomeFurnitureGroup homeFurnitureGroup2 = new HomeFurnitureGroup(linkedList0, "");
      homeFurnitureGroup2.getCatalogId();
      homeFurnitureGroup0.isDoorOrWindow();
      homeFurnitureGroup1.setModelMirrored(false);
      homeFurnitureGroup2.setWidth((-1605.139F));
      homeFurnitureGroup1.isDoorOrWindow();
      homeFurnitureGroup2.isTexturable();
      homeFurnitureGroup1.setElevation(1.0F);
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      LinkedList<HomePieceOfFurniture> linkedList0 = new LinkedList<HomePieceOfFurniture>();
      ResourceURLContent resourceURLContent0 = new ResourceURLContent((URL) null, true);
      LightSource[] lightSourceArray0 = new LightSource[1];
      Float float0 = new Float(0.0);
      float[][] floatArray0 = new float[4][6];
      BigDecimal bigDecimal0 = new BigDecimal((long) 2001);
      CatalogLight catalogLight0 = new CatalogLight("9", "DEPTH", "DEPTH", resourceURLContent0, resourceURLContent0, resourceURLContent0, 0.3926991F, 2001.0F, 1.0F, (-2885.0872F), true, lightSourceArray0, floatArray0, "DEPTH", true, bigDecimal0, bigDecimal0);
      HomeLight homeLight0 = new HomeLight(catalogLight0);
      homeLight0.setShininess(float0);
      homeLight0.setY(0.3926991F);
      linkedList0.add((HomePieceOfFurniture) homeLight0);
      HomeFurnitureGroup homeFurnitureGroup0 = new HomeFurnitureGroup(linkedList0, "_])7g^)gy+P0XH3");
      linkedList0.pop();
      HomeFurnitureGroup homeFurnitureGroup1 = homeFurnitureGroup0.clone();
      homeFurnitureGroup1.setDepth(0.3926991F);
      linkedList0.addFirst(homeLight0);
      homeFurnitureGroup1.setWidth((-7.83947F));
      homeFurnitureGroup0.getModel();
      homeFurnitureGroup0.setVisible(false);
      homeFurnitureGroup0.setHeight(1331.01F);
      Integer integer0 = new Integer(1860);
      homeFurnitureGroup0.setColor(integer0);
      homeFurnitureGroup1.getPriceValueAddedTaxIncluded();
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      LinkedList<HomePieceOfFurniture> linkedList0 = new LinkedList<HomePieceOfFurniture>();
      ResourceURLContent resourceURLContent0 = new ResourceURLContent((URL) null, true);
      LightSource[] lightSourceArray0 = new LightSource[1];
      float[][] floatArray0 = new float[4][6];
      BigDecimal bigDecimal0 = new BigDecimal((long) 2001);
      BigDecimal bigDecimal1 = new BigDecimal((-1L));
      BigDecimal bigDecimal2 = BigDecimal.valueOf((-1L), 2001);
      CatalogLight catalogLight0 = new CatalogLight("_])7g^)gy+P0XH3", "_])7g^)gy+P0XH3", "/<gAhL`8>", resourceURLContent0, resourceURLContent0, resourceURLContent0, 1331.01F, (-31.701214F), (-1L), (-31.701214F), false, lightSourceArray0, floatArray0, "DEPTH", true, bigDecimal2, bigDecimal1);
      HomeLight homeLight0 = new HomeLight(catalogLight0);
      linkedList0.add((HomePieceOfFurniture) homeLight0);
      PropertyChangeListener propertyChangeListener0 = mock(PropertyChangeListener.class, new ViolatedAssumptionAnswer());
      PropertyChangeListenerProxy propertyChangeListenerProxy0 = new PropertyChangeListenerProxy("", (PropertyChangeListener) null);
      PropertyChangeListenerProxy propertyChangeListenerProxy1 = new PropertyChangeListenerProxy("", propertyChangeListenerProxy0);
      HomeFurnitureGroup homeFurnitureGroup0 = new HomeFurnitureGroup(linkedList0, "");
      HomeFurnitureGroup homeFurnitureGroup1 = homeFurnitureGroup0.clone();
      homeFurnitureGroup1.setAngle(2001);
      homeFurnitureGroup1.addPropertyChangeListener(propertyChangeListenerProxy1);
      homeFurnitureGroup0.getCatalogId();
      homeFurnitureGroup1.getValueAddedTax();
      homeFurnitureGroup0.setHeight(1983.65F);
      HomeFurnitureGroup homeFurnitureGroup2 = new HomeFurnitureGroup(linkedList0, "_])7g^)gy+P0XH3");
      HomeFurnitureGroup homeFurnitureGroup3 = homeFurnitureGroup1.clone();
      homeFurnitureGroup3.setY(0.3933106F);
      homeFurnitureGroup1.setColor((Integer) null);
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      HomeFurnitureGroup homeFurnitureGroup0 = null;
      try {
        homeFurnitureGroup0 = new HomeFurnitureGroup((List<HomePieceOfFurniture>) null, (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.eteks.sweethome3d.model.HomeFurnitureGroup", e);
      }
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      LinkedList<HomePieceOfFurniture> linkedList0 = new LinkedList<HomePieceOfFurniture>();
      ResourceURLContent resourceURLContent0 = new ResourceURLContent((URL) null, true);
      LightSource[] lightSourceArray0 = new LightSource[1];
      float[][] floatArray0 = new float[4][6];
      BigDecimal bigDecimal0 = new BigDecimal((long) 2001);
      CatalogLight catalogLight0 = new CatalogLight("9", "DEPTH", "DEPTH", resourceURLContent0, resourceURLContent0, resourceURLContent0, 0.3926991F, 2001.0F, 1.0F, (-2885.0872F), true, lightSourceArray0, floatArray0, "DEPTH", true, bigDecimal0, bigDecimal0);
      HomeLight homeLight0 = new HomeLight(catalogLight0);
      linkedList0.add((HomePieceOfFurniture) homeLight0);
      HomeFurnitureGroup homeFurnitureGroup0 = new HomeFurnitureGroup(linkedList0, "_])7g^)gy+P0XH3");
      linkedList0.pop();
      HomeFurnitureGroup homeFurnitureGroup1 = homeFurnitureGroup0.clone();
      homeFurnitureGroup1.getModel();
      homeFurnitureGroup1.setX(1.0F);
      Integer integer0 = new Integer(606202301);
      Integer integer1 = new Integer(956851814);
      homeFurnitureGroup0.setColor(integer1);
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      LinkedList<HomePieceOfFurniture> linkedList0 = new LinkedList<HomePieceOfFurniture>();
      ResourceURLContent resourceURLContent0 = new ResourceURLContent((URL) null, true);
      LightSource[] lightSourceArray0 = new LightSource[1];
      Float float0 = new Float(0.0);
      LightSource lightSource0 = new LightSource(2874.8F, 1.0F, 1331.01F, 2001, float0);
      lightSourceArray0[0] = lightSource0;
      float[][] floatArray0 = new float[4][6];
      BigDecimal bigDecimal0 = new BigDecimal((long) 2001);
      CatalogLight catalogLight0 = new CatalogLight("9", "DEPTH", "DEPTH", resourceURLContent0, resourceURLContent0, resourceURLContent0, 0.3926991F, 2001.0F, 1.0F, (-2885.0872F), true, lightSourceArray0, floatArray0, "DEPTH", true, bigDecimal0, bigDecimal0);
      HomeLight homeLight0 = new HomeLight(catalogLight0);
      homeLight0.setNameVisible(false);
      HomePieceOfFurniture homePieceOfFurniture0 = new HomePieceOfFurniture(catalogLight0);
      linkedList0.add((HomePieceOfFurniture) homeLight0);
      HomeFurnitureGroup homeFurnitureGroup0 = new HomeFurnitureGroup(linkedList0, "_])7g^)gy+P0XH3");
      linkedList0.pop();
      HomeFurnitureGroup homeFurnitureGroup1 = homeFurnitureGroup0.clone();
      homeFurnitureGroup0.getModel();
      homeFurnitureGroup1.setX((-1.0F));
      homeFurnitureGroup1.getValueAddedTaxPercentage();
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      LinkedList<HomePieceOfFurniture> linkedList0 = new LinkedList<HomePieceOfFurniture>();
      ResourceURLContent resourceURLContent0 = new ResourceURLContent((URL) null, true);
      LightSource[] lightSourceArray0 = new LightSource[1];
      float[][] floatArray0 = new float[4][6];
      BigDecimal bigDecimal0 = new BigDecimal((long) 2001);
      BigDecimal bigDecimal1 = bigDecimal0.ulp();
      CatalogLight catalogLight0 = new CatalogLight("com.eteks.sweethome3d.model.HomeFurnitureGroup", "com.eteks.sweethome3d.model.HomeFurnitureGroup", "_])7g^)gy+P0XH3", resourceURLContent0, resourceURLContent0, resourceURLContent0, 2001, 2.0F, 178.44893F, 0.5F, true, lightSourceArray0, floatArray0, "com.eteks.sweethome3d.model.HomeFurnitureGroup", true, bigDecimal1, bigDecimal1);
      HomeLight homeLight0 = new HomeLight(catalogLight0);
      HomePieceOfFurniture homePieceOfFurniture0 = new HomePieceOfFurniture(homeLight0);
      linkedList0.add((HomePieceOfFurniture) homeLight0);
      HomeFurnitureGroup homeFurnitureGroup0 = new HomeFurnitureGroup(linkedList0, "");
      HomeFurnitureGroup homeFurnitureGroup1 = homeFurnitureGroup0.clone();
      homeFurnitureGroup1.getValueAddedTax();
      homeFurnitureGroup0.getDepth();
      homeFurnitureGroup1.setModelMirrored(true);
      homeFurnitureGroup0.isDeformable();
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      LinkedList<HomePieceOfFurniture> linkedList0 = new LinkedList<HomePieceOfFurniture>();
      ResourceURLContent resourceURLContent0 = new ResourceURLContent((URL) null, false);
      LightSource[] lightSourceArray0 = new LightSource[1];
      float float0 = 1.0F;
      float[][] floatArray0 = new float[4][6];
      String string0 = "M19";
      BigDecimal bigDecimal0 = new BigDecimal((long) 2001);
      bigDecimal0.ulp();
      CatalogLight catalogLight0 = new CatalogLight("M19", "_])7g^)gy+P0XH3", "_])7g^)gy+P0XH3", resourceURLContent0, resourceURLContent0, resourceURLContent0, 2001, 2001.0F, 1.0F, 2001, false, lightSourceArray0, floatArray0, "_])7g^)gy+P0XH3", false, bigDecimal0, bigDecimal0);
      HomeLight homeLight0 = new HomeLight(catalogLight0);
      HomePieceOfFurniture homePieceOfFurniture0 = new HomePieceOfFurniture(catalogLight0);
      linkedList0.add((HomePieceOfFurniture) homeLight0);
      HomeFurnitureGroup homeFurnitureGroup0 = null;
      try {
        homeFurnitureGroup0 = new HomeFurnitureGroup(linkedList0, "_])7g^)gy+P0XH3");
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Piece isn't resizable
         //
         verifyException("com.eteks.sweethome3d.model.HomePieceOfFurniture", e);
      }
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      LinkedList<HomePieceOfFurniture> linkedList0 = new LinkedList<HomePieceOfFurniture>();
      ResourceURLContent resourceURLContent0 = new ResourceURLContent((URL) null, true);
      LightSource[] lightSourceArray0 = new LightSource[1];
      Float float0 = new Float(0.0);
      LightSource lightSource0 = new LightSource(88.9F, 1.0F, 1331.01F, 2001, float0);
      lightSourceArray0[0] = lightSource0;
      float[][] floatArray0 = new float[4][6];
      BigDecimal bigDecimal0 = new BigDecimal((long) 2001);
      BigDecimal bigDecimal1 = new BigDecimal((-1L));
      BigDecimal bigDecimal2 = new BigDecimal((-1L));
      CatalogLight catalogLight0 = new CatalogLight("_])7g^)gy+P0XH3", "_])7g^)gy+P0XH3", "/<gAhL`8>", resourceURLContent0, resourceURLContent0, resourceURLContent0, 1331.01F, 1.0F, (-1L), 1.0F, false, lightSourceArray0, floatArray0, "DEPTH", true, bigDecimal2, bigDecimal1);
      HomeLight homeLight0 = new HomeLight(catalogLight0);
      HomePieceOfFurniture homePieceOfFurniture0 = new HomePieceOfFurniture(homeLight0);
      linkedList0.add((HomePieceOfFurniture) homeLight0);
      PropertyChangeListener propertyChangeListener0 = mock(PropertyChangeListener.class, new ViolatedAssumptionAnswer());
      PropertyChangeListenerProxy propertyChangeListenerProxy0 = new PropertyChangeListenerProxy("", propertyChangeListener0);
      CatalogLight catalogLight1 = new CatalogLight("/<gAhL`8>", "com.eteks.sweethome3d.model.HomeFurnitureGroup", "com.eteks.sweethome3d.model.HomeFurnitureGroup", resourceURLContent0, resourceURLContent0, resourceURLContent0, (-1L), 1160.423F, 1160.423F, 88.9F, true, lightSourceArray0, floatArray0, "/<gAhL`8>", false, false, true, bigDecimal2, bigDecimal2);
      PropertyChangeEvent propertyChangeEvent0 = new PropertyChangeEvent("", "_])7g^)gy+P0XH3", catalogLight1, "");
      propertyChangeListenerProxy0.propertyChange(propertyChangeEvent0);
      PropertyChangeListenerProxy propertyChangeListenerProxy1 = new PropertyChangeListenerProxy("", propertyChangeListenerProxy0);
      HomeFurnitureGroup homeFurnitureGroup0 = new HomeFurnitureGroup(linkedList0, "");
      HomeFurnitureGroup homeFurnitureGroup1 = homeFurnitureGroup0.clone();
      homeFurnitureGroup1.addPropertyChangeListener(propertyChangeListenerProxy1);
      homeFurnitureGroup1.setModelMirrored(true);
      homeFurnitureGroup0.setWidth(1.0F);
      homeFurnitureGroup0.isTexturable();
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      LinkedList<HomePieceOfFurniture> linkedList0 = new LinkedList<HomePieceOfFurniture>();
      ResourceURLContent resourceURLContent0 = new ResourceURLContent((URL) null, true);
      LightSource[] lightSourceArray0 = new LightSource[7];
      float[][] floatArray0 = new float[4][6];
      BigDecimal bigDecimal0 = new BigDecimal((long) 2001);
      bigDecimal0.ulp();
      CatalogLight catalogLight0 = new CatalogLight("9", "_])7g^)gy+P0XH3", "_])7g^)gy+P0XH3", resourceURLContent0, resourceURLContent0, resourceURLContent0, 2001, 2001.0F, 1.0F, 2001.0F, true, lightSourceArray0, floatArray0, "_])7g^)gy+P0XH3", true, bigDecimal0, bigDecimal0);
      HomeLight homeLight0 = new HomeLight(catalogLight0);
      HomePieceOfFurniture homePieceOfFurniture0 = new HomePieceOfFurniture(catalogLight0);
      linkedList0.add((HomePieceOfFurniture) homeLight0);
      HomeFurnitureGroup homeFurnitureGroup0 = new HomeFurnitureGroup(linkedList0, "_])7g^)gy+P0XH3");
      HomeFurnitureGroup homeFurnitureGroup1 = homeFurnitureGroup0.clone();
      homeFurnitureGroup0.getValueAddedTax();
      homeFurnitureGroup1.getDepth();
      homeFurnitureGroup0.setModelMirrored(true);
      homeFurnitureGroup1.getIcon();
      assertTrue(homeFurnitureGroup0.isModelMirrored());
      assertTrue(homeFurnitureGroup0.isMovable());
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      LinkedList<HomePieceOfFurniture> linkedList0 = new LinkedList<HomePieceOfFurniture>();
      ResourceURLContent resourceURLContent0 = new ResourceURLContent((URL) null, true);
      LightSource[] lightSourceArray0 = new LightSource[1];
      Float float0 = new Float(0.0);
      LightSource lightSource0 = new LightSource(88.9F, 1.0F, 1331.01F, 1997, float0);
      lightSourceArray0[0] = lightSource0;
      float[][] floatArray0 = new float[4][6];
      BigDecimal bigDecimal0 = new BigDecimal((long) 1997);
      CatalogLight catalogLight0 = new CatalogLight("_])7g^)gy+P0XH3", "_])7g^)gy+P0XH3", "_])7g^)gy+P0XH3", resourceURLContent0, resourceURLContent0, resourceURLContent0, 124.49F, 0.0F, 1.0F, 1.0F, false, lightSourceArray0, floatArray0, "", true, bigDecimal0, bigDecimal0);
      HomeLight homeLight0 = new HomeLight(catalogLight0);
      homeLight0.setAngle((-1.0F));
      HomePieceOfFurniture homePieceOfFurniture0 = new HomePieceOfFurniture(homeLight0);
      linkedList0.add(homePieceOfFurniture0);
      HomeFurnitureGroup homeFurnitureGroup0 = new HomeFurnitureGroup(linkedList0, "DEPTH");
      LinkedList<HomePieceOfFurniture> linkedList1 = new LinkedList<HomePieceOfFurniture>();
      linkedList1.add((HomePieceOfFurniture) homeFurnitureGroup0);
      HomeFurnitureGroup homeFurnitureGroup1 = new HomeFurnitureGroup(linkedList1, "com.eteks.sweethome3d.model.TextStyle");
      linkedList0.pop();
      homeFurnitureGroup1.containsPoint((-244.8F), 2885.0872F, 1198.338F);
      HomeFurnitureGroup homeFurnitureGroup2 = homeFurnitureGroup1.clone();
      homeFurnitureGroup2.getModel();
      homeFurnitureGroup0.setX(0.0F);
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      LinkedList<HomePieceOfFurniture> linkedList0 = new LinkedList<HomePieceOfFurniture>();
      ResourceURLContent resourceURLContent0 = new ResourceURLContent((URL) null, true);
      LightSource[] lightSourceArray0 = new LightSource[1];
      Float float0 = new Float((-2.1125393349059776));
      float[][] floatArray0 = new float[4][6];
      BigDecimal bigDecimal0 = new BigDecimal((long) 2001);
      BigDecimal bigDecimal1 = new BigDecimal((-1L));
      BigDecimal bigDecimal2 = new BigDecimal((-1L));
      CatalogLight catalogLight0 = new CatalogLight("_])7g^)gy+P0XH3", "_])7g^)gy+P0XH3", "/<gAhL`8>", resourceURLContent0, resourceURLContent0, resourceURLContent0, 1331.01F, (-31.701214F), (-1L), (-31.701214F), true, lightSourceArray0, floatArray0, "DEPTH", true, bigDecimal2, bigDecimal1);
      HomeLight homeLight0 = new HomeLight(catalogLight0);
      linkedList0.add((HomePieceOfFurniture) homeLight0);
      linkedList0.spliterator();
      PropertyChangeListener propertyChangeListener0 = mock(PropertyChangeListener.class, new ViolatedAssumptionAnswer());
      linkedList0.add((HomePieceOfFurniture) homeLight0);
      HomeFurnitureGroup homeFurnitureGroup0 = new HomeFurnitureGroup(linkedList0, "");
      HomePieceOfFurniture homePieceOfFurniture0 = linkedList0.pop();
      HomeFurnitureGroup homeFurnitureGroup1 = homeFurnitureGroup0.clone();
      linkedList0.addFirst(homePieceOfFurniture0);
      homeFurnitureGroup1.setWidth(0.3927002F);
      homeFurnitureGroup0.getModel();
      homeFurnitureGroup1.setVisible(true);
      homeFurnitureGroup1.setHeight(3744.2312F);
      homeFurnitureGroup0.setDepth(1331.01F);
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      LinkedList<HomePieceOfFurniture> linkedList0 = new LinkedList<HomePieceOfFurniture>();
      ResourceURLContent resourceURLContent0 = new ResourceURLContent((URL) null, true);
      LightSource[] lightSourceArray0 = new LightSource[1];
      float[][] floatArray0 = new float[4][6];
      BigDecimal bigDecimal0 = new BigDecimal((long) 2001);
      bigDecimal0.ulp();
      CatalogLight catalogLight0 = new CatalogLight("M19", "_])7g^)gy+P0XH3", "_])7g^)gy+P0XH3", resourceURLContent0, resourceURLContent0, resourceURLContent0, 2001, 2001.0F, 1.0F, 2001, true, lightSourceArray0, floatArray0, "_])7g^)gy+P0XH3", true, bigDecimal0, bigDecimal0);
      HomeLight homeLight0 = new HomeLight(catalogLight0);
      HomePieceOfFurniture homePieceOfFurniture0 = new HomePieceOfFurniture(catalogLight0);
      linkedList0.add((HomePieceOfFurniture) homeLight0);
      HomeFurnitureGroup homeFurnitureGroup0 = new HomeFurnitureGroup(linkedList0, "_])7g^)gy+P0XH3");
      HomeFurnitureGroup homeFurnitureGroup1 = new HomeFurnitureGroup(linkedList0, "M19");
      homeFurnitureGroup0.setDepth(1.0F);
      homeFurnitureGroup0.getValueAddedTax();
      homeFurnitureGroup1.getDepth();
      homeFurnitureGroup1.setAngle(2001.0F);
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      System.setCurrentTimeMillis(0L);
      System.setCurrentTimeMillis((-1L));
      LinkedList<HomePieceOfFurniture> linkedList0 = new LinkedList<HomePieceOfFurniture>();
      Long long0 = new Long(0L);
      Float float0 = new Float(894.55773);
      LightSource[] lightSourceArray0 = new LightSource[9];
      LightSource lightSource0 = new LightSource(0L, (-7.0E-45F), 0L, (-1591));
      lightSourceArray0[0] = lightSource0;
      LightSource lightSource1 = new LightSource(1.0F, 1.0F, (-1L), (-3460), float0);
      lightSourceArray0[1] = lightSource1;
      LightSource lightSource2 = new LightSource(0L, (-1591), 0L, (-1591), float0);
      lightSourceArray0[2] = lightSource2;
      Float float1 = new Float((double) 3566.3284F);
      LightSource lightSource3 = new LightSource(3566.3284F, (-1.0244743E-35F), 3.4028235E38F, (-3460), float1);
      lightSourceArray0[3] = lightSource3;
      Float float2 = new Float((-1.0244743E-35F));
      LightSource lightSource4 = new LightSource((-74.177F), 0.0F, (-2518.0F), (-3460), float2);
      lightSourceArray0[4] = lightSource4;
      Float float3 = new Float((float) (-3460));
      LightSource lightSource5 = new LightSource(1.0F, 1.0F, 2.0F, (-430), float3);
      lightSourceArray0[5] = lightSource5;
      LightSource lightSource6 = new LightSource((-1591), 131.602F, 131.602F, 1795);
      lightSourceArray0[6] = lightSource6;
      Float float4 = new Float(1060.2448F);
      LightSource lightSource7 = new LightSource((-2.0679545E-34F), 920.8F, 2.0F, (-3460), float4);
      lightSourceArray0[7] = lightSource7;
      Float float5 = new Float((double) 0.0F);
      LightSource lightSource8 = new LightSource(0L, 3.4028235E38F, 1144.44F, (-1093), float5);
      lightSourceArray0[8] = lightSource8;
      BigDecimal bigDecimal0 = new BigDecimal(0L);
      CatalogLight catalogLight0 = new CatalogLight("#B", (String) null, "#B", "#B", (String[]) null, long0, float0, (Content) null, (Content) null, (Content) null, 0L, (-1474.12F), 0.3927002F, 2001.0F, false, lightSourceArray0, (String) null, (float[][]) null, "#B", false, false, false, bigDecimal0, bigDecimal0, "[1}%F/");
      HomeLight homeLight0 = new HomeLight(catalogLight0);
      HomeLight homeLight1 = homeLight0.clone();
      linkedList0.add((HomePieceOfFurniture) homeLight1);
      HomeFurnitureGroup homeFurnitureGroup0 = null;
      try {
        homeFurnitureGroup0 = new HomeFurnitureGroup(linkedList0, "#B");
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Piece isn't resizable
         //
         verifyException("com.eteks.sweethome3d.model.HomePieceOfFurniture", e);
      }
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      LinkedList<HomePieceOfFurniture> linkedList0 = new LinkedList<HomePieceOfFurniture>();
      ResourceURLContent resourceURLContent0 = new ResourceURLContent((URL) null, true);
      LightSource[] lightSourceArray0 = new LightSource[1];
      Float float0 = new Float(0.0);
      LightSource lightSource0 = new LightSource(88.9F, 1.0F, 1331.01F, 2001, float0);
      lightSourceArray0[0] = lightSource0;
      float[][] floatArray0 = new float[4][6];
      float[] floatArray1 = new float[5];
      floatArray1[0] = 88.9F;
      floatArray1[1] = 88.9F;
      floatArray1[2] = 2874.8F;
      floatArray1[3] = 1331.01F;
      floatArray1[4] = 0.3926991F;
      floatArray0[0] = floatArray1;
      float[] floatArray2 = new float[3];
      floatArray2[0] = 1331.01F;
      floatArray2[1] = (float) 2001;
      floatArray2[2] = 1.0F;
      floatArray0[1] = floatArray2;
      float[] floatArray3 = new float[8];
      floatArray3[0] = 1331.01F;
      floatArray3[1] = 2874.8F;
      floatArray3[2] = 0.3926991F;
      floatArray3[3] = 2874.8F;
      floatArray3[4] = 1331.01F;
      floatArray3[5] = 0.3926991F;
      floatArray3[6] = 0.3926991F;
      floatArray3[7] = 2874.8F;
      floatArray0[2] = floatArray3;
      float[] floatArray4 = new float[8];
      floatArray4[0] = 1331.01F;
      floatArray4[1] = (float) 2001;
      floatArray4[2] = 1331.01F;
      floatArray4[3] = (float) 2001;
      floatArray4[4] = 0.3926991F;
      floatArray4[5] = 1.0F;
      floatArray4[6] = 0.3926991F;
      floatArray4[7] = 0.3926991F;
      floatArray0[3] = floatArray4;
      BigDecimal bigDecimal0 = new BigDecimal((long) 2001);
      CatalogLight catalogLight0 = new CatalogLight("_])7g^)gy+P0XH3", "DEPTH", "<9/p^5h1qOKEO[", resourceURLContent0, resourceURLContent0, resourceURLContent0, 2874.8F, 88.9F, 0.3926991F, 0.3926991F, true, lightSourceArray0, floatArray0, "9", true, bigDecimal0, bigDecimal0);
      HomeLight homeLight0 = new HomeLight(catalogLight0);
      HomePieceOfFurniture homePieceOfFurniture0 = new HomePieceOfFurniture(homeLight0);
      linkedList0.add(homePieceOfFurniture0);
      HomeFurnitureGroup homeFurnitureGroup0 = new HomeFurnitureGroup(linkedList0, "^Kt#*Xz$:kH^{z+");
      linkedList0.pop();
      HomeFurnitureGroup homeFurnitureGroup1 = homeFurnitureGroup0.clone();
      homeFurnitureGroup1.getModel();
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      LinkedList<HomePieceOfFurniture> linkedList0 = new LinkedList<HomePieceOfFurniture>();
      ResourceURLContent resourceURLContent0 = new ResourceURLContent((URL) null, true);
      LightSource[] lightSourceArray0 = new LightSource[1];
      Float float0 = new Float(0.0);
      LightSource lightSource0 = new LightSource(2874.8F, 1.0F, 1331.01F, 2001, float0);
      lightSourceArray0[0] = lightSource0;
      float[][] floatArray0 = new float[4][6];
      float[] floatArray1 = new float[5];
      floatArray1[0] = 2874.8F;
      floatArray1[1] = 2874.8F;
      floatArray1[2] = 2874.8F;
      BigDecimal bigDecimal0 = new BigDecimal((-1L));
      CatalogLight catalogLight0 = new CatalogLight("DEPTH", "DEPTH", "fS(plp?27q!ETPwwm4q", resourceURLContent0, resourceURLContent0, resourceURLContent0, 0.3926991F, 0.3926991F, 1.0F, 0.0F, true, lightSourceArray0, floatArray0, "_])7g^)gy+P0XH3", true, bigDecimal0, bigDecimal0);
      HomeLight homeLight0 = new HomeLight(catalogLight0);
      HomePieceOfFurniture homePieceOfFurniture0 = new HomePieceOfFurniture(homeLight0);
      linkedList0.add((HomePieceOfFurniture) homeLight0);
      HomeFurnitureGroup homeFurnitureGroup0 = new HomeFurnitureGroup(linkedList0, "^Kt#*Xz$:kH^{z+");
      homeLight0.clone();
      homeFurnitureGroup0.clone();
      homeFurnitureGroup0.getModel();
      PropertyChangeListener propertyChangeListener0 = mock(PropertyChangeListener.class, new ViolatedAssumptionAnswer());
      PropertyChangeListenerProxy propertyChangeListenerProxy0 = new PropertyChangeListenerProxy("K\"C(cSAc)I2b", propertyChangeListener0);
      homeFurnitureGroup0.addPropertyChangeListener(propertyChangeListenerProxy0);
      homeFurnitureGroup0.setHeight(35.8802F);
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      LinkedList<HomePieceOfFurniture> linkedList0 = new LinkedList<HomePieceOfFurniture>();
      ResourceURLContent resourceURLContent0 = new ResourceURLContent((URL) null, true);
      LightSource[] lightSourceArray0 = new LightSource[1];
      Float float0 = new Float(0.0);
      LightSource lightSource0 = new LightSource(2874.8F, 1.0F, 1331.01F, 2001, float0);
      lightSourceArray0[0] = lightSource0;
      float[][] floatArray0 = new float[4][6];
      BigDecimal bigDecimal0 = new BigDecimal((long) 2001);
      CatalogLight catalogLight0 = new CatalogLight("9", "DEPTH", "DEPTH", resourceURLContent0, resourceURLContent0, resourceURLContent0, 0.3926991F, 0.3926991F, 1.0F, (-2885.0872F), true, lightSourceArray0, floatArray0, "DEPTH", true, bigDecimal0, bigDecimal0);
      HomeLight homeLight0 = new HomeLight(catalogLight0);
      homeLight0.setPower((-540.37787F));
      linkedList0.add((HomePieceOfFurniture) homeLight0);
      homeLight0.setY(0.3926991F);
      HomePieceOfFurniture homePieceOfFurniture0 = new HomePieceOfFurniture(catalogLight0);
      linkedList0.add((HomePieceOfFurniture) homeLight0);
      HomeFurnitureGroup homeFurnitureGroup0 = new HomeFurnitureGroup(linkedList0, "_])7g^)gy+P0XH3");
      linkedList0.pop();
      homeFurnitureGroup0.getModel();
      homeFurnitureGroup0.setVisible(false);
      homeFurnitureGroup0.setHeight(2.0F);
      homeFurnitureGroup0.setDepth(1331.01F);
      homeFurnitureGroup0.getDepth();
      homeFurnitureGroup0.getValueAddedTax();
      homeFurnitureGroup0.intersectsRectangle(0.3926991F, 2874.8F, (-540.37787F), 0.0F);
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      LinkedList<HomePieceOfFurniture> linkedList0 = new LinkedList<HomePieceOfFurniture>();
      ResourceURLContent resourceURLContent0 = new ResourceURLContent((URL) null, true);
      LightSource[] lightSourceArray0 = new LightSource[1];
      Float float0 = new Float(0.0);
      LightSource lightSource0 = new LightSource(2874.8F, 1.0F, 1331.01F, 2001, float0);
      lightSourceArray0[0] = lightSource0;
      float[][] floatArray0 = new float[4][6];
      BigDecimal bigDecimal0 = new BigDecimal((long) 2001);
      CatalogLight catalogLight0 = new CatalogLight("9", "DEPTH", "DEPTH", resourceURLContent0, resourceURLContent0, resourceURLContent0, 0.3926991F, 2001.0F, 1.0F, (-2885.0872F), true, lightSourceArray0, floatArray0, "DEPTH", true, bigDecimal0, bigDecimal0);
      HomeLight homeLight0 = new HomeLight(catalogLight0);
      homeLight0.setY(0.3926991F);
      homeLight0.move((-7.83947F), 1.0F);
      HomePieceOfFurniture homePieceOfFurniture0 = new HomePieceOfFurniture(catalogLight0);
      linkedList0.add((HomePieceOfFurniture) homeLight0);
      HomeFurnitureGroup homeFurnitureGroup0 = new HomeFurnitureGroup(linkedList0, "_])7g^)gy+P0XH3");
      linkedList0.pop();
      homeFurnitureGroup0.clone();
      ResourceURLContent resourceURLContent1 = new ResourceURLContent((URL) null, true);
      homeFurnitureGroup0.setVisible(false);
      homeFurnitureGroup0.setHeight(1331.01F);
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      LinkedList<HomePieceOfFurniture> linkedList0 = new LinkedList<HomePieceOfFurniture>();
      ResourceURLContent resourceURLContent0 = new ResourceURLContent((URL) null, true);
      LightSource[] lightSourceArray0 = new LightSource[1];
      Float float0 = new Float(0.0);
      LightSource lightSource0 = new LightSource(2874.8F, 1.0F, 1331.01F, 2001, float0);
      float[][] floatArray0 = new float[4][6];
      BigDecimal bigDecimal0 = new BigDecimal((long) 2001);
      CatalogLight catalogLight0 = new CatalogLight("9", "DEPTH", "DEPTH", resourceURLContent0, resourceURLContent0, resourceURLContent0, 0.3926991F, 2001.0F, 1.0F, (-2885.0872F), true, lightSourceArray0, floatArray0, "DEPTH", true, bigDecimal0, bigDecimal0);
      HomeLight homeLight0 = new HomeLight(catalogLight0);
      homeLight0.setNameVisible(false);
      HomePieceOfFurniture homePieceOfFurniture0 = new HomePieceOfFurniture(catalogLight0);
      linkedList0.add((HomePieceOfFurniture) homeLight0);
      HomeFurnitureGroup homeFurnitureGroup0 = new HomeFurnitureGroup(linkedList0, "_])7g^)gy+P0XH3");
      linkedList0.pop();
      HomeFurnitureGroup homeFurnitureGroup1 = homeFurnitureGroup0.clone();
      homeFurnitureGroup0.getModel();
      homeFurnitureGroup1.setX(0.3926991F);
      homeFurnitureGroup0.setAngle((-913.4841F));
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      LinkedList<HomePieceOfFurniture> linkedList0 = new LinkedList<HomePieceOfFurniture>();
      ResourceURLContent resourceURLContent0 = new ResourceURLContent((URL) null, true);
      LightSource[] lightSourceArray0 = new LightSource[1];
      Float float0 = new Float(0.0);
      float[][] floatArray0 = new float[4][6];
      BigDecimal bigDecimal0 = new BigDecimal((long) 2001);
      CatalogLight catalogLight0 = new CatalogLight("9", "DEPTH", "DEPTH", resourceURLContent0, resourceURLContent0, resourceURLContent0, 0.3926991F, 2001.0F, 1.0F, (-2885.0872F), true, lightSourceArray0, floatArray0, "DEPTH", true, bigDecimal0, bigDecimal0);
      HomeLight homeLight0 = new HomeLight(catalogLight0);
      homeLight0.setY(0.3926991F);
      linkedList0.add((HomePieceOfFurniture) homeLight0);
      HomeFurnitureGroup homeFurnitureGroup0 = new HomeFurnitureGroup(linkedList0, "_])7g^)gy+P0XH3");
      linkedList0.pop();
      HomeFurnitureGroup homeFurnitureGroup1 = homeFurnitureGroup0.clone();
      homeFurnitureGroup1.setWidth((-7.83947F));
      homeFurnitureGroup0.setHeight(1.0F);
      homeFurnitureGroup0.setDepth(0.3926991F);
      homeFurnitureGroup1.getDepth();
      homeFurnitureGroup1.getValueAddedTax();
      homeFurnitureGroup0.isBackFaceShown();
      homeFurnitureGroup1.setModelMirrored(true);
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      LinkedList<HomePieceOfFurniture> linkedList0 = new LinkedList<HomePieceOfFurniture>();
      ResourceURLContent resourceURLContent0 = new ResourceURLContent((URL) null, true);
      LightSource[] lightSourceArray0 = new LightSource[1];
      Float float0 = new Float(0.0);
      LightSource lightSource0 = new LightSource(88.9F, 1.0F, 1331.01F, 1997, float0);
      lightSourceArray0[0] = lightSource0;
      float[][] floatArray0 = new float[4][6];
      BigDecimal bigDecimal0 = new BigDecimal((long) 1997);
      CatalogLight catalogLight0 = new CatalogLight("_])7g^)gy+P0XH3", "_])7g^)gy+P0XH3", "_])7g^)gy+P0XH3", resourceURLContent0, resourceURLContent0, resourceURLContent0, 124.49F, 0.0F, 1.0F, 1.0F, false, lightSourceArray0, floatArray0, "", true, bigDecimal0, bigDecimal0);
      HomeLight homeLight0 = new HomeLight(catalogLight0);
      homeLight0.setAngle((-1.0F));
      HomePieceOfFurniture homePieceOfFurniture0 = new HomePieceOfFurniture(homeLight0);
      linkedList0.add(homePieceOfFurniture0);
      HomeFurnitureGroup homeFurnitureGroup0 = new HomeFurnitureGroup(linkedList0, "DEPTH");
      homeFurnitureGroup0.getModelRotation();
      HomeFurnitureGroup homeFurnitureGroup1 = homeFurnitureGroup0.clone();
      homeFurnitureGroup0.getModel();
      homeFurnitureGroup1.setAngle(1331.01F);
      homeFurnitureGroup1.setHeight(884.7593F);
      homeFurnitureGroup1.getPrice();
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      LinkedList<HomePieceOfFurniture> linkedList0 = new LinkedList<HomePieceOfFurniture>();
      ResourceURLContent resourceURLContent0 = new ResourceURLContent((URL) null, true);
      LightSource[] lightSourceArray0 = new LightSource[1];
      float[][] floatArray0 = new float[4][6];
      BigDecimal bigDecimal0 = BigDecimal.ZERO;
      CatalogLight catalogLight0 = new CatalogLight("9", "DEPTH", "DEPTH", resourceURLContent0, resourceURLContent0, resourceURLContent0, 0.3926991F, 2001.0F, 1.0F, (-5539.1797F), true, lightSourceArray0, floatArray0, "DEPTH", true, bigDecimal0, bigDecimal0);
      HomeLight homeLight0 = new HomeLight(catalogLight0);
      homeLight0.setTexture((HomeTexture) null);
      homeLight0.setNameVisible(true);
      linkedList0.add((HomePieceOfFurniture) homeLight0);
      HomeFurnitureGroup homeFurnitureGroup0 = new HomeFurnitureGroup(linkedList0, (String) null);
      HomeFurnitureGroup homeFurnitureGroup1 = homeFurnitureGroup0.clone();
      homeFurnitureGroup0.getPlanIcon();
      homeFurnitureGroup1.intersectsRectangle((-1.0F), (-5539.1797F), 1858.512F, 1.0F);
      homeFurnitureGroup1.getDepth();
      homeFurnitureGroup1.setWidth((-5539.1797F));
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      LinkedList<HomePieceOfFurniture> linkedList0 = new LinkedList<HomePieceOfFurniture>();
      ResourceURLContent resourceURLContent0 = new ResourceURLContent((URL) null, true);
      LightSource[] lightSourceArray0 = new LightSource[1];
      Float float0 = new Float(0.0);
      LightSource lightSource0 = new LightSource(88.9F, 1.0F, 1331.01F, 1997, float0);
      lightSourceArray0[0] = lightSource0;
      float[][] floatArray0 = new float[4][6];
      BigDecimal bigDecimal0 = new BigDecimal((long) 1997);
      CatalogLight catalogLight0 = new CatalogLight("_])7g^)gy+P0XH3", "_])7g^)gy+P0XH3", "_])7g^)gy+P0XH3", resourceURLContent0, resourceURLContent0, resourceURLContent0, 124.49F, 0.0F, 1.0F, 1.0F, false, lightSourceArray0, floatArray0, "", true, bigDecimal0, bigDecimal0);
      HomeLight homeLight0 = new HomeLight(catalogLight0);
      homeLight0.setAngle((-1.0F));
      HomePieceOfFurniture homePieceOfFurniture0 = new HomePieceOfFurniture(homeLight0);
      linkedList0.add(homePieceOfFurniture0);
      HomeFurnitureGroup homeFurnitureGroup0 = new HomeFurnitureGroup(linkedList0, "DEPTH");
      homeFurnitureGroup0.getModelRotation();
      linkedList0.pop();
      HomeFurnitureGroup homeFurnitureGroup1 = homeFurnitureGroup0.clone();
      homeFurnitureGroup0.getModel();
      homeFurnitureGroup1.setAngle(308.4429F);
      homeFurnitureGroup1.setHeight(884.7593F);
      homeFurnitureGroup1.getPrice();
      homeFurnitureGroup0.getValueAddedTax();
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      LinkedList<HomePieceOfFurniture> linkedList0 = new LinkedList<HomePieceOfFurniture>();
      ResourceURLContent resourceURLContent0 = new ResourceURLContent((URL) null, true);
      LightSource[] lightSourceArray0 = new LightSource[1];
      float[][] floatArray0 = new float[4][6];
      BigDecimal bigDecimal0 = new BigDecimal((long) 2001);
      bigDecimal0.ulp();
      CatalogLight catalogLight0 = new CatalogLight("", "_])7g^)gy+P0XH3", "_])7g^)gy+P0XH3", resourceURLContent0, resourceURLContent0, resourceURLContent0, 0.24312304F, 2001.0F, 1.0F, (-2885.1F), true, lightSourceArray0, floatArray0, "_])7g^)gy+P0XH3", true, bigDecimal0, bigDecimal0);
      HomeLight homeLight0 = new HomeLight(catalogLight0);
      linkedList0.add((HomePieceOfFurniture) homeLight0);
      HomeFurnitureGroup homeFurnitureGroup0 = new HomeFurnitureGroup(linkedList0, "`a");
      HomeFurnitureGroup homeFurnitureGroup1 = homeFurnitureGroup0.clone();
      homeFurnitureGroup1.setAngle(1.0F);
      homeFurnitureGroup1.containsPoint(1.0F, 0.39314166F, (-2885.1F));
      Integer.getInteger("^9ECp|Oeo}/");
      homeFurnitureGroup0.isDeformable();
      homeFurnitureGroup1.setColor((Integer) null);
      homeFurnitureGroup1.setWidth((-1385.32F));
      linkedList0.add((HomePieceOfFurniture) homeFurnitureGroup1);
      homeFurnitureGroup0.getDepth();
      homeFurnitureGroup1.setAngle((-1973.5F));
      homeFurnitureGroup0.setModelMirrored(true);
      homeFurnitureGroup1.isDoorOrWindow();
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      LinkedList<HomePieceOfFurniture> linkedList0 = new LinkedList<HomePieceOfFurniture>();
      ResourceURLContent resourceURLContent0 = new ResourceURLContent((URL) null, true);
      LightSource[] lightSourceArray0 = new LightSource[1];
      float[][] floatArray0 = new float[4][6];
      BigDecimal bigDecimal0 = new BigDecimal(2001);
      BigDecimal bigDecimal1 = bigDecimal0.ulp();
      BigDecimal bigDecimal2 = BigDecimal.TEN;
      CatalogLight catalogLight0 = new CatalogLight("_])7g^)gy+P0XH3", "DEP", "_])7g^)gy+P0XH3", resourceURLContent0, resourceURLContent0, resourceURLContent0, 2874.8F, (-548.0F), 0.0F, 0.0F, true, lightSourceArray0, floatArray0, "DEP", true, bigDecimal2, bigDecimal1);
      HomeLight homeLight0 = new HomeLight(catalogLight0);
      homeLight0.setNameVisible(true);
      HomePieceOfFurniture homePieceOfFurniture0 = new HomePieceOfFurniture(catalogLight0);
      linkedList0.add((HomePieceOfFurniture) homeLight0);
      HomeFurnitureGroup homeFurnitureGroup0 = new HomeFurnitureGroup(linkedList0, "DEP");
      linkedList0.pop();
      HomeFurnitureGroup homeFurnitureGroup1 = homeFurnitureGroup0.clone();
      homeFurnitureGroup0.getModel();
      CatalogTexture catalogTexture0 = new CatalogTexture("_])7g^)gy+P0XH3", resourceURLContent0, (-45.89683F), 1388.9381F, true);
      HomeTexture homeTexture0 = new HomeTexture(catalogTexture0);
      homeFurnitureGroup1.setTexture(homeTexture0);
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      LinkedList<HomePieceOfFurniture> linkedList0 = new LinkedList<HomePieceOfFurniture>();
      ResourceURLContent resourceURLContent0 = new ResourceURLContent((URL) null, true);
      LightSource[] lightSourceArray0 = new LightSource[1];
      Float float0 = new Float(0.0);
      float[][] floatArray0 = new float[4][6];
      BigDecimal bigDecimal0 = new BigDecimal((-1L));
      BigDecimal bigDecimal1 = new BigDecimal((-1L));
      CatalogLight catalogLight0 = new CatalogLight("_])7g^)gy+P0XH3", "_])7g^)gy+P0XH3", "/<gAhL`8>", resourceURLContent0, resourceURLContent0, resourceURLContent0, 1331.01F, 1.0F, (-1L), 1.0F, false, lightSourceArray0, floatArray0, "DEnZ", true, bigDecimal1, bigDecimal0);
      HomeLight homeLight0 = new HomeLight(catalogLight0);
      homeLight0.setAngle(3923.341F);
      HomePieceOfFurniture homePieceOfFurniture0 = new HomePieceOfFurniture(homeLight0);
      linkedList0.add((HomePieceOfFurniture) homeLight0);
      CatalogLight catalogLight1 = new CatalogLight("/<gAhL`8>", "com.eteks.sweethome3d.model.HomeFurnitureGroup", "com.eteks.sweethome3d.model.HomeFurnitureGroup", resourceURLContent0, resourceURLContent0, resourceURLContent0, (-1L), 1160.423F, 1160.423F, 88.9F, true, lightSourceArray0, floatArray0, "/<gAhL`8>", false, false, true, bigDecimal1, bigDecimal1);
      PropertyChangeEvent propertyChangeEvent0 = new PropertyChangeEvent("", "_])7g^)gy+P0XH3", catalogLight1, "");
      HomeFurnitureGroup homeFurnitureGroup0 = new HomeFurnitureGroup(linkedList0, "");
      HomeFurnitureGroup homeFurnitureGroup1 = homeFurnitureGroup0.clone();
      homeFurnitureGroup1.setModelMirrored(true);
      homeFurnitureGroup0.setWidth((-1L));
      homeFurnitureGroup0.isTexturable();
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      LinkedList<HomePieceOfFurniture> linkedList0 = new LinkedList<HomePieceOfFurniture>();
      ResourceURLContent resourceURLContent0 = new ResourceURLContent((URL) null, true);
      LightSource[] lightSourceArray0 = new LightSource[1];
      float[][] floatArray0 = new float[4][6];
      BigDecimal bigDecimal0 = new BigDecimal((long) 2001);
      BigDecimal bigDecimal1 = new BigDecimal((-1L));
      BigDecimal bigDecimal2 = BigDecimal.valueOf((-1L), 2001);
      CatalogLight catalogLight0 = new CatalogLight("_])7g^)gy+P0XH3", "_])7g^)gy+P0XH3", "/<gAhL`8>", resourceURLContent0, resourceURLContent0, resourceURLContent0, 1331.01F, (-31.701214F), (-1L), (-31.701214F), false, lightSourceArray0, floatArray0, "DEPTH", true, bigDecimal2, bigDecimal1);
      HomeLight homeLight0 = new HomeLight(catalogLight0);
      linkedList0.add((HomePieceOfFurniture) homeLight0);
      PropertyChangeListener propertyChangeListener0 = mock(PropertyChangeListener.class, new ViolatedAssumptionAnswer());
      PropertyChangeListenerProxy propertyChangeListenerProxy0 = new PropertyChangeListenerProxy("", propertyChangeListener0);
      PropertyChangeListenerProxy propertyChangeListenerProxy1 = new PropertyChangeListenerProxy("", propertyChangeListenerProxy0);
      HomeFurnitureGroup homeFurnitureGroup0 = new HomeFurnitureGroup(linkedList0, "");
      HomeFurnitureGroup homeFurnitureGroup1 = homeFurnitureGroup0.clone();
      homeFurnitureGroup1.setAngle(2001);
      homeFurnitureGroup1.addPropertyChangeListener(propertyChangeListenerProxy1);
      homeFurnitureGroup0.setHeight(2001);
      homeFurnitureGroup1.containsPoint((-512.1203F), 2047.2F, (-31.701214F));
      homeFurnitureGroup1.getValueAddedTax();
      homeFurnitureGroup1.setHeight((-1.0F));
      homeFurnitureGroup1.setY(2047.2F);
      homeFurnitureGroup0.getValueAddedTaxPercentage();
      homeFurnitureGroup1.isMovable();
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      LinkedList<HomePieceOfFurniture> linkedList0 = new LinkedList<HomePieceOfFurniture>();
      ResourceURLContent resourceURLContent0 = new ResourceURLContent((URL) null, true);
      LightSource[] lightSourceArray0 = new LightSource[1];
      float[][] floatArray0 = new float[4][6];
      BigDecimal bigDecimal0 = BigDecimal.ZERO;
      CatalogLight catalogLight0 = new CatalogLight("9", "DEPTH", "DEPTH", resourceURLContent0, resourceURLContent0, resourceURLContent0, 0.3926991F, 0.3926991F, 1.0F, (-2876.6099F), true, lightSourceArray0, floatArray0, "DEPTH", true, bigDecimal0, bigDecimal0);
      HomeLight homeLight0 = new HomeLight(catalogLight0);
      linkedList0.add((HomePieceOfFurniture) homeLight0);
      HomeFurnitureGroup homeFurnitureGroup0 = new HomeFurnitureGroup(linkedList0, (String) null);
      HomeFurnitureGroup homeFurnitureGroup1 = homeFurnitureGroup0.clone();
      homeFurnitureGroup0.setX(1.0F);
      homeFurnitureGroup1.getTexture();
      homeFurnitureGroup1.setTexture((HomeTexture) null);
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      LinkedList<HomePieceOfFurniture> linkedList0 = new LinkedList<HomePieceOfFurniture>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      ResourceURLContent resourceURLContent0 = new ResourceURLContent((URL) null, true);
      assertTrue(resourceURLContent0.isMultiPartResource());
      assertNotNull(resourceURLContent0);
      
      LightSource[] lightSourceArray0 = new LightSource[1];
      Float float0 = new Float(0.0);
      assertEquals(0.0F, (float)float0, 0.01F);
      assertNotNull(float0);
      
      LightSource lightSource0 = new LightSource(2874.8F, 1.0F, 1331.01F, 2001, float0);
      assertEquals(0.0F, lightSource0.getDiameter(), 0.01F);
      assertEquals(1331.01F, lightSource0.getZ(), 0.01F);
      assertEquals(2874.8F, lightSource0.getX(), 0.01F);
      assertEquals(2001, lightSource0.getColor());
      assertEquals(1.0F, lightSource0.getY(), 0.01F);
      assertNotNull(lightSource0);
      
      lightSourceArray0[0] = lightSource0;
      float[][] floatArray0 = new float[4][6];
      BigDecimal bigDecimal0 = new BigDecimal((long) 2001);
      assertEquals((byte) (-47), bigDecimal0.byteValue());
      assertEquals((short)2001, bigDecimal0.shortValue());
      assertNotNull(bigDecimal0);
      
      CatalogLight catalogLight0 = new CatalogLight("9", "DEPTH", "DEPTH", resourceURLContent0, resourceURLContent0, resourceURLContent0, 0.3926991F, 2001.0F, 1.0F, (-2885.0872F), true, lightSourceArray0, floatArray0, "DEPTH", true, bigDecimal0, bigDecimal0);
      assertEquals(1, lightSourceArray0.length);
      assertEquals(4, floatArray0.length);
      assertTrue(resourceURLContent0.isMultiPartResource());
      assertEquals((byte) (-47), bigDecimal0.byteValue());
      assertEquals((short)2001, bigDecimal0.shortValue());
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertEquals("DEPTH", catalogLight0.getName());
      assertEquals(2001.0F, catalogLight0.getDepth(), 0.01F);
      assertEquals((-2885.0872F), catalogLight0.getElevation(), 0.01F);
      assertTrue(catalogLight0.isTexturable());
      assertNull(catalogLight0.getGrade());
      assertFalse(catalogLight0.isDoorOrWindow());
      assertNull(catalogLight0.getCurrency());
      assertNull(catalogLight0.getColor());
      assertNull(catalogLight0.getInformation());
      assertTrue(catalogLight0.isDeformable());
      assertFalse(catalogLight0.isBackFaceShown());
      assertEquals(0.3926991F, catalogLight0.getWidth(), 0.01F);
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertTrue(catalogLight0.isMovable());
      assertEquals("9", catalogLight0.getId());
      assertNull(catalogLight0.getCreationDate());
      assertFalse(catalogLight0.isModifiable());
      assertTrue(catalogLight0.isProportional());
      assertTrue(catalogLight0.isResizable());
      assertEquals(1.0F, catalogLight0.getHeight(), 0.01F);
      assertEquals("DEPTH", catalogLight0.getCreator());
      assertEquals("DEPTH", catalogLight0.getDescription());
      assertNotNull(catalogLight0);
      
      BigDecimal bigDecimal1 = bigDecimal0.subtract(bigDecimal0);
      assertEquals((byte) (-47), bigDecimal0.byteValue());
      assertEquals((short)2001, bigDecimal0.shortValue());
      assertEquals((byte)0, bigDecimal1.byteValue());
      assertEquals((short)0, bigDecimal1.shortValue());
      assertFalse(bigDecimal1.equals((Object)bigDecimal0));
      assertNotNull(bigDecimal1);
      assertNotSame(bigDecimal0, bigDecimal1);
      assertNotSame(bigDecimal1, bigDecimal0);
      
      HomeLight homeLight0 = new HomeLight(catalogLight0);
      assertEquals(1, lightSourceArray0.length);
      assertEquals(4, floatArray0.length);
      assertTrue(resourceURLContent0.isMultiPartResource());
      assertEquals((byte) (-47), bigDecimal0.byteValue());
      assertEquals((short)2001, bigDecimal0.shortValue());
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertEquals("DEPTH", catalogLight0.getName());
      assertEquals(2001.0F, catalogLight0.getDepth(), 0.01F);
      assertEquals((-2885.0872F), catalogLight0.getElevation(), 0.01F);
      assertTrue(catalogLight0.isTexturable());
      assertNull(catalogLight0.getGrade());
      assertFalse(catalogLight0.isDoorOrWindow());
      assertNull(catalogLight0.getCurrency());
      assertNull(catalogLight0.getColor());
      assertNull(catalogLight0.getInformation());
      assertTrue(catalogLight0.isDeformable());
      assertFalse(catalogLight0.isBackFaceShown());
      assertEquals(0.3926991F, catalogLight0.getWidth(), 0.01F);
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertTrue(catalogLight0.isMovable());
      assertEquals("9", catalogLight0.getId());
      assertNull(catalogLight0.getCreationDate());
      assertFalse(catalogLight0.isModifiable());
      assertTrue(catalogLight0.isProportional());
      assertTrue(catalogLight0.isResizable());
      assertEquals(1.0F, catalogLight0.getHeight(), 0.01F);
      assertEquals("DEPTH", catalogLight0.getCreator());
      assertEquals("DEPTH", catalogLight0.getDescription());
      assertTrue(homeLight0.isResizable());
      assertTrue(homeLight0.isMovable());
      assertEquals(2001.0F, homeLight0.getDepth(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertNull(homeLight0.getShininess());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals(0.19634955F, homeLight0.getX(), 0.01F);
      assertEquals("DEPTH", homeLight0.getDescription());
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertTrue(homeLight0.isVisible());
      assertTrue(homeLight0.isDeformable());
      assertNull(homeLight0.getCurrency());
      assertEquals(1.0F, homeLight0.getHeight(), 0.01F);
      assertFalse(homeLight0.isModelMirrored());
      assertFalse(homeLight0.isBackFaceShown());
      assertTrue(homeLight0.isTexturable());
      assertFalse(homeLight0.isDoorOrWindow());
      assertEquals(0.3926991F, homeLight0.getWidth(), 0.01F);
      assertNull(homeLight0.getColor());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertEquals((-2885.0872F), homeLight0.getElevation(), 0.01F);
      assertEquals(1000.5F, homeLight0.getY(), 0.01F);
      assertEquals("DEPTH", homeLight0.getName());
      assertEquals("9", homeLight0.getCatalogId());
      assertFalse(homeLight0.isNameVisible());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertEquals((-2885.0872F), homeLight0.getGroundElevation(), 0.01F);
      assertFalse(bigDecimal0.equals((Object)bigDecimal1));
      assertNotNull(homeLight0);
      
      homeLight0.setY(0.3926991F);
      assertEquals(1, lightSourceArray0.length);
      assertEquals(4, floatArray0.length);
      assertTrue(resourceURLContent0.isMultiPartResource());
      assertEquals((byte) (-47), bigDecimal0.byteValue());
      assertEquals((short)2001, bigDecimal0.shortValue());
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertEquals("DEPTH", catalogLight0.getName());
      assertEquals(2001.0F, catalogLight0.getDepth(), 0.01F);
      assertEquals((-2885.0872F), catalogLight0.getElevation(), 0.01F);
      assertTrue(catalogLight0.isTexturable());
      assertNull(catalogLight0.getGrade());
      assertFalse(catalogLight0.isDoorOrWindow());
      assertNull(catalogLight0.getCurrency());
      assertNull(catalogLight0.getColor());
      assertNull(catalogLight0.getInformation());
      assertTrue(catalogLight0.isDeformable());
      assertFalse(catalogLight0.isBackFaceShown());
      assertEquals(0.3926991F, catalogLight0.getWidth(), 0.01F);
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertTrue(catalogLight0.isMovable());
      assertEquals("9", catalogLight0.getId());
      assertNull(catalogLight0.getCreationDate());
      assertFalse(catalogLight0.isModifiable());
      assertTrue(catalogLight0.isProportional());
      assertTrue(catalogLight0.isResizable());
      assertEquals(1.0F, catalogLight0.getHeight(), 0.01F);
      assertEquals("DEPTH", catalogLight0.getCreator());
      assertEquals("DEPTH", catalogLight0.getDescription());
      assertTrue(homeLight0.isResizable());
      assertTrue(homeLight0.isMovable());
      assertEquals(2001.0F, homeLight0.getDepth(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertNull(homeLight0.getShininess());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals(0.19634955F, homeLight0.getX(), 0.01F);
      assertEquals(0.3926991F, homeLight0.getY(), 0.01F);
      assertEquals("DEPTH", homeLight0.getDescription());
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertTrue(homeLight0.isVisible());
      assertTrue(homeLight0.isDeformable());
      assertNull(homeLight0.getCurrency());
      assertEquals(1.0F, homeLight0.getHeight(), 0.01F);
      assertFalse(homeLight0.isModelMirrored());
      assertFalse(homeLight0.isBackFaceShown());
      assertTrue(homeLight0.isTexturable());
      assertFalse(homeLight0.isDoorOrWindow());
      assertEquals(0.3926991F, homeLight0.getWidth(), 0.01F);
      assertNull(homeLight0.getColor());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertEquals((-2885.0872F), homeLight0.getElevation(), 0.01F);
      assertEquals("DEPTH", homeLight0.getName());
      assertEquals("9", homeLight0.getCatalogId());
      assertFalse(homeLight0.isNameVisible());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertEquals((-2885.0872F), homeLight0.getGroundElevation(), 0.01F);
      assertFalse(bigDecimal0.equals((Object)bigDecimal1));
      assertNotSame(bigDecimal0, bigDecimal1);
      
      HomePieceOfFurniture homePieceOfFurniture0 = new HomePieceOfFurniture(catalogLight0);
      assertEquals(1, lightSourceArray0.length);
      assertEquals(4, floatArray0.length);
      assertTrue(resourceURLContent0.isMultiPartResource());
      assertEquals((byte) (-47), bigDecimal0.byteValue());
      assertEquals((short)2001, bigDecimal0.shortValue());
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertEquals("DEPTH", catalogLight0.getName());
      assertEquals(2001.0F, catalogLight0.getDepth(), 0.01F);
      assertEquals((-2885.0872F), catalogLight0.getElevation(), 0.01F);
      assertTrue(catalogLight0.isTexturable());
      assertNull(catalogLight0.getGrade());
      assertFalse(catalogLight0.isDoorOrWindow());
      assertNull(catalogLight0.getCurrency());
      assertNull(catalogLight0.getColor());
      assertNull(catalogLight0.getInformation());
      assertTrue(catalogLight0.isDeformable());
      assertFalse(catalogLight0.isBackFaceShown());
      assertEquals(0.3926991F, catalogLight0.getWidth(), 0.01F);
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertTrue(catalogLight0.isMovable());
      assertEquals("9", catalogLight0.getId());
      assertNull(catalogLight0.getCreationDate());
      assertFalse(catalogLight0.isModifiable());
      assertTrue(catalogLight0.isProportional());
      assertTrue(catalogLight0.isResizable());
      assertEquals(1.0F, catalogLight0.getHeight(), 0.01F);
      assertEquals("DEPTH", catalogLight0.getCreator());
      assertEquals("DEPTH", catalogLight0.getDescription());
      assertEquals("DEPTH", homePieceOfFurniture0.getName());
      assertEquals(0.0F, homePieceOfFurniture0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture0.getNameAngle(), 0.01F);
      assertEquals(1000.5F, homePieceOfFurniture0.getY(), 0.01F);
      assertTrue(homePieceOfFurniture0.isMovable());
      assertEquals(0.0F, homePieceOfFurniture0.getAngle(), 0.01F);
      assertEquals(0.3926991F, homePieceOfFurniture0.getWidth(), 0.01F);
      assertEquals((-2885.0872F), homePieceOfFurniture0.getGroundElevation(), 0.01F);
      assertFalse(homePieceOfFurniture0.isModelMirrored());
      assertFalse(homePieceOfFurniture0.isBackFaceShown());
      assertEquals((-2885.0872F), homePieceOfFurniture0.getElevation(), 0.01F);
      assertNull(homePieceOfFurniture0.getColor());
      assertEquals(0.19634955F, homePieceOfFurniture0.getX(), 0.01F);
      assertNull(homePieceOfFurniture0.getCurrency());
      assertEquals("9", homePieceOfFurniture0.getCatalogId());
      assertEquals(0.0F, homePieceOfFurniture0.getNameYOffset(), 0.01F);
      assertEquals(1.0F, homePieceOfFurniture0.getHeight(), 0.01F);
      assertFalse(homePieceOfFurniture0.isNameVisible());
      assertTrue(homePieceOfFurniture0.isTexturable());
      assertNull(homePieceOfFurniture0.getShininess());
      assertEquals(2001.0F, homePieceOfFurniture0.getDepth(), 0.01F);
      assertFalse(homePieceOfFurniture0.isDoorOrWindow());
      assertNull(homePieceOfFurniture0.getStaircaseCutOutShape());
      assertTrue(homePieceOfFurniture0.isDeformable());
      assertTrue(homePieceOfFurniture0.isVisible());
      assertEquals("DEPTH", homePieceOfFurniture0.getDescription());
      assertTrue(homePieceOfFurniture0.isResizable());
      assertFalse(bigDecimal0.equals((Object)bigDecimal1));
      assertNotNull(homePieceOfFurniture0);
      
      boolean boolean0 = linkedList0.add((HomePieceOfFurniture) homeLight0);
      assertTrue(boolean0);
      assertEquals(1, lightSourceArray0.length);
      assertEquals(4, floatArray0.length);
      assertFalse(linkedList0.contains(homePieceOfFurniture0));
      assertEquals(1, linkedList0.size());
      assertTrue(resourceURLContent0.isMultiPartResource());
      assertEquals((byte) (-47), bigDecimal0.byteValue());
      assertEquals((short)2001, bigDecimal0.shortValue());
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertEquals("DEPTH", catalogLight0.getName());
      assertEquals(2001.0F, catalogLight0.getDepth(), 0.01F);
      assertEquals((-2885.0872F), catalogLight0.getElevation(), 0.01F);
      assertTrue(catalogLight0.isTexturable());
      assertNull(catalogLight0.getGrade());
      assertFalse(catalogLight0.isDoorOrWindow());
      assertNull(catalogLight0.getCurrency());
      assertNull(catalogLight0.getColor());
      assertNull(catalogLight0.getInformation());
      assertTrue(catalogLight0.isDeformable());
      assertFalse(catalogLight0.isBackFaceShown());
      assertEquals(0.3926991F, catalogLight0.getWidth(), 0.01F);
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertTrue(catalogLight0.isMovable());
      assertEquals("9", catalogLight0.getId());
      assertNull(catalogLight0.getCreationDate());
      assertFalse(catalogLight0.isModifiable());
      assertTrue(catalogLight0.isProportional());
      assertTrue(catalogLight0.isResizable());
      assertEquals(1.0F, catalogLight0.getHeight(), 0.01F);
      assertEquals("DEPTH", catalogLight0.getCreator());
      assertEquals("DEPTH", catalogLight0.getDescription());
      assertTrue(homeLight0.isResizable());
      assertTrue(homeLight0.isMovable());
      assertEquals(2001.0F, homeLight0.getDepth(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertNull(homeLight0.getShininess());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals(0.19634955F, homeLight0.getX(), 0.01F);
      assertEquals(0.3926991F, homeLight0.getY(), 0.01F);
      assertEquals("DEPTH", homeLight0.getDescription());
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertTrue(homeLight0.isVisible());
      assertTrue(homeLight0.isDeformable());
      assertNull(homeLight0.getCurrency());
      assertEquals(1.0F, homeLight0.getHeight(), 0.01F);
      assertFalse(homeLight0.isModelMirrored());
      assertFalse(homeLight0.isBackFaceShown());
      assertTrue(homeLight0.isTexturable());
      assertFalse(homeLight0.isDoorOrWindow());
      assertEquals(0.3926991F, homeLight0.getWidth(), 0.01F);
      assertNull(homeLight0.getColor());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertEquals((-2885.0872F), homeLight0.getElevation(), 0.01F);
      assertEquals("DEPTH", homeLight0.getName());
      assertEquals("9", homeLight0.getCatalogId());
      assertFalse(homeLight0.isNameVisible());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertEquals((-2885.0872F), homeLight0.getGroundElevation(), 0.01F);
      assertFalse(bigDecimal0.equals((Object)bigDecimal1));
      assertNotSame(bigDecimal0, bigDecimal1);
      
      HomeFurnitureGroup homeFurnitureGroup0 = new HomeFurnitureGroup(linkedList0, "_])7g^)gy+P0XH3");
      assertFalse(linkedList0.contains(homePieceOfFurniture0));
      assertEquals(1, linkedList0.size());
      assertEquals(0.3926991F, homeFurnitureGroup0.getWidth(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getNameAngle(), 0.01F);
      assertEquals(2001.0F, homeFurnitureGroup0.getDepth(), 0.01F);
      assertEquals(0.3927002F, homeFurnitureGroup0.getY(), 0.01F);
      assertNull(homeFurnitureGroup0.getCurrency());
      assertTrue(homeFurnitureGroup0.isMovable());
      assertNull(homeFurnitureGroup0.getStaircaseCutOutShape());
      assertNull(homeFurnitureGroup0.getShininess());
      assertEquals(0.0F, homeFurnitureGroup0.getNameXOffset(), 0.01F);
      assertEquals(0.19634955F, homeFurnitureGroup0.getX(), 0.01F);
      assertTrue(homeFurnitureGroup0.isResizable());
      assertNull(homeFurnitureGroup0.getCatalogId());
      assertEquals(2885.0872F, homeFurnitureGroup0.getHeight(), 0.01F);
      assertFalse(homeFurnitureGroup0.isBackFaceShown());
      assertFalse(homeFurnitureGroup0.isNameVisible());
      assertTrue(homeFurnitureGroup0.isTexturable());
      assertTrue(homeFurnitureGroup0.isVisible());
      assertFalse(homeFurnitureGroup0.isModelMirrored());
      assertEquals(0.0F, homeFurnitureGroup0.getNameYOffset(), 0.01F);
      assertNull(homeFurnitureGroup0.getColor());
      assertTrue(homeFurnitureGroup0.isDeformable());
      assertEquals(0.0F, homeFurnitureGroup0.getAngle(), 0.01F);
      assertEquals((-2885.0872F), homeFurnitureGroup0.getElevation(), 0.01F);
      assertNull(homeFurnitureGroup0.getDescription());
      assertEquals((-2885.0872F), homeFurnitureGroup0.getGroundElevation(), 0.01F);
      assertEquals("_])7g^)gy+P0XH3", homeFurnitureGroup0.getName());
      assertFalse(homeFurnitureGroup0.isDoorOrWindow());
      assertNotNull(homeFurnitureGroup0);
      
      HomeLight homeLight1 = (HomeLight)linkedList0.pop();
      assertFalse(linkedList0.contains(homePieceOfFurniture0));
      assertEquals(0, linkedList0.size());
      assertEquals(1.0F, homeLight1.getHeight(), 0.01F);
      assertNull(homeLight1.getShininess());
      assertEquals((-2885.0872F), homeLight1.getElevation(), 0.01F);
      assertTrue(homeLight1.isMovable());
      assertEquals((-2885.0872F), homeLight1.getGroundElevation(), 0.01F);
      assertNull(homeLight1.getCurrency());
      assertEquals(0.5F, homeLight1.getPower(), 0.01F);
      assertNull(homeLight1.getColor());
      assertEquals(0.0F, homeLight1.getNameYOffset(), 0.01F);
      assertEquals(0.19634955F, homeLight1.getX(), 0.01F);
      assertEquals(0.3926991F, homeLight1.getY(), 0.01F);
      assertEquals(0.3926991F, homeLight1.getWidth(), 0.01F);
      assertTrue(homeLight1.isTexturable());
      assertEquals(0.0F, homeLight1.getAngle(), 0.01F);
      assertFalse(homeLight1.isModelMirrored());
      assertFalse(homeLight1.isBackFaceShown());
      assertFalse(homeLight1.isDoorOrWindow());
      assertFalse(homeLight1.isNameVisible());
      assertEquals("DEPTH", homeLight1.getName());
      assertEquals(0.0F, homeLight1.getNameXOffset(), 0.01F);
      assertEquals("9", homeLight1.getCatalogId());
      assertEquals(0.0F, homeLight1.getNameAngle(), 0.01F);
      assertNull(homeLight1.getStaircaseCutOutShape());
      assertTrue(homeLight1.isResizable());
      assertTrue(homeLight1.isVisible());
      assertEquals(2001.0F, homeLight1.getDepth(), 0.01F);
      assertEquals("DEPTH", homeLight1.getDescription());
      assertTrue(homeLight1.isDeformable());
      assertNotNull(homeLight1);
      assertSame(homeLight1, homeLight0);
      
      HomeFurnitureGroup homeFurnitureGroup1 = homeFurnitureGroup0.clone();
      assertFalse(linkedList0.contains(homePieceOfFurniture0));
      assertEquals((-2885.0872F), homeFurnitureGroup1.getGroundElevation(), 0.01F);
      assertNull(homeFurnitureGroup1.getCurrency());
      assertEquals(0.0F, homeFurnitureGroup1.getNameAngle(), 0.01F);
      assertEquals(0.3926991F, homeFurnitureGroup1.getWidth(), 0.01F);
      assertEquals((-2885.0872F), homeFurnitureGroup1.getElevation(), 0.01F);
      assertEquals(0.19634955F, homeFurnitureGroup1.getX(), 0.01F);
      assertEquals(2001.0F, homeFurnitureGroup1.getDepth(), 0.01F);
      assertTrue(homeFurnitureGroup1.isVisible());
      assertNull(homeFurnitureGroup1.getShininess());
      assertEquals(0.3927002F, homeFurnitureGroup1.getY(), 0.01F);
      assertNull(homeFurnitureGroup1.getDescription());
      assertEquals("_])7g^)gy+P0XH3", homeFurnitureGroup1.getName());
      assertFalse(homeFurnitureGroup1.isNameVisible());
      assertEquals(0.0F, homeFurnitureGroup1.getNameXOffset(), 0.01F);
      assertFalse(homeFurnitureGroup1.isBackFaceShown());
      assertFalse(homeFurnitureGroup1.isDoorOrWindow());
      assertEquals(0.0F, homeFurnitureGroup1.getAngle(), 0.01F);
      assertTrue(homeFurnitureGroup1.isTexturable());
      assertNull(homeFurnitureGroup1.getColor());
      assertTrue(homeFurnitureGroup1.isDeformable());
      assertFalse(homeFurnitureGroup1.isModelMirrored());
      assertEquals(0.0F, homeFurnitureGroup1.getNameYOffset(), 0.01F);
      assertTrue(homeFurnitureGroup1.isResizable());
      assertNull(homeFurnitureGroup1.getStaircaseCutOutShape());
      assertEquals(2885.0872F, homeFurnitureGroup1.getHeight(), 0.01F);
      assertTrue(homeFurnitureGroup1.isMovable());
      assertNull(homeFurnitureGroup1.getCatalogId());
      assertEquals(0, linkedList0.size());
      assertEquals(0.3926991F, homeFurnitureGroup0.getWidth(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getNameAngle(), 0.01F);
      assertEquals(2001.0F, homeFurnitureGroup0.getDepth(), 0.01F);
      assertEquals(0.3927002F, homeFurnitureGroup0.getY(), 0.01F);
      assertNull(homeFurnitureGroup0.getCurrency());
      assertTrue(homeFurnitureGroup0.isMovable());
      assertNull(homeFurnitureGroup0.getStaircaseCutOutShape());
      assertNull(homeFurnitureGroup0.getShininess());
      assertEquals(0.0F, homeFurnitureGroup0.getNameXOffset(), 0.01F);
      assertEquals(0.19634955F, homeFurnitureGroup0.getX(), 0.01F);
      assertTrue(homeFurnitureGroup0.isResizable());
      assertNull(homeFurnitureGroup0.getCatalogId());
      assertEquals(2885.0872F, homeFurnitureGroup0.getHeight(), 0.01F);
      assertFalse(homeFurnitureGroup0.isBackFaceShown());
      assertFalse(homeFurnitureGroup0.isNameVisible());
      assertTrue(homeFurnitureGroup0.isTexturable());
      assertTrue(homeFurnitureGroup0.isVisible());
      assertFalse(homeFurnitureGroup0.isModelMirrored());
      assertEquals(0.0F, homeFurnitureGroup0.getNameYOffset(), 0.01F);
      assertNull(homeFurnitureGroup0.getColor());
      assertTrue(homeFurnitureGroup0.isDeformable());
      assertEquals(0.0F, homeFurnitureGroup0.getAngle(), 0.01F);
      assertEquals((-2885.0872F), homeFurnitureGroup0.getElevation(), 0.01F);
      assertNull(homeFurnitureGroup0.getDescription());
      assertEquals((-2885.0872F), homeFurnitureGroup0.getGroundElevation(), 0.01F);
      assertEquals("_])7g^)gy+P0XH3", homeFurnitureGroup0.getName());
      assertFalse(homeFurnitureGroup0.isDoorOrWindow());
      assertFalse(homeFurnitureGroup1.equals((Object)homeFurnitureGroup0));
      assertNotNull(homeFurnitureGroup1);
      assertNotSame(homeFurnitureGroup1, homeFurnitureGroup0);
      assertNotSame(homeFurnitureGroup0, homeFurnitureGroup1);
      
      Content content0 = homeFurnitureGroup0.getModel();
      assertFalse(linkedList0.contains(homePieceOfFurniture0));
      assertEquals(0, linkedList0.size());
      assertEquals(0.3926991F, homeFurnitureGroup0.getWidth(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getNameAngle(), 0.01F);
      assertEquals(2001.0F, homeFurnitureGroup0.getDepth(), 0.01F);
      assertEquals(0.3927002F, homeFurnitureGroup0.getY(), 0.01F);
      assertNull(homeFurnitureGroup0.getCurrency());
      assertTrue(homeFurnitureGroup0.isMovable());
      assertNull(homeFurnitureGroup0.getStaircaseCutOutShape());
      assertNull(homeFurnitureGroup0.getShininess());
      assertEquals(0.0F, homeFurnitureGroup0.getNameXOffset(), 0.01F);
      assertEquals(0.19634955F, homeFurnitureGroup0.getX(), 0.01F);
      assertTrue(homeFurnitureGroup0.isResizable());
      assertNull(homeFurnitureGroup0.getCatalogId());
      assertEquals(2885.0872F, homeFurnitureGroup0.getHeight(), 0.01F);
      assertFalse(homeFurnitureGroup0.isBackFaceShown());
      assertFalse(homeFurnitureGroup0.isNameVisible());
      assertTrue(homeFurnitureGroup0.isTexturable());
      assertTrue(homeFurnitureGroup0.isVisible());
      assertFalse(homeFurnitureGroup0.isModelMirrored());
      assertEquals(0.0F, homeFurnitureGroup0.getNameYOffset(), 0.01F);
      assertNull(homeFurnitureGroup0.getColor());
      assertTrue(homeFurnitureGroup0.isDeformable());
      assertEquals(0.0F, homeFurnitureGroup0.getAngle(), 0.01F);
      assertEquals((-2885.0872F), homeFurnitureGroup0.getElevation(), 0.01F);
      assertNull(homeFurnitureGroup0.getDescription());
      assertEquals((-2885.0872F), homeFurnitureGroup0.getGroundElevation(), 0.01F);
      assertEquals("_])7g^)gy+P0XH3", homeFurnitureGroup0.getName());
      assertFalse(homeFurnitureGroup0.isDoorOrWindow());
      assertFalse(homeFurnitureGroup0.equals((Object)homeFurnitureGroup1));
      assertNull(content0);
      assertNotSame(homeFurnitureGroup0, homeFurnitureGroup1);
      
      homeFurnitureGroup0.setVisible(false);
      assertFalse(linkedList0.contains(homePieceOfFurniture0));
      assertEquals(0, linkedList0.size());
      assertEquals(0.3926991F, homeFurnitureGroup0.getWidth(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getNameAngle(), 0.01F);
      assertEquals(2001.0F, homeFurnitureGroup0.getDepth(), 0.01F);
      assertEquals(0.3927002F, homeFurnitureGroup0.getY(), 0.01F);
      assertNull(homeFurnitureGroup0.getCurrency());
      assertTrue(homeFurnitureGroup0.isMovable());
      assertNull(homeFurnitureGroup0.getStaircaseCutOutShape());
      assertNull(homeFurnitureGroup0.getShininess());
      assertEquals(0.0F, homeFurnitureGroup0.getNameXOffset(), 0.01F);
      assertEquals(0.19634955F, homeFurnitureGroup0.getX(), 0.01F);
      assertTrue(homeFurnitureGroup0.isResizable());
      assertNull(homeFurnitureGroup0.getCatalogId());
      assertEquals(2885.0872F, homeFurnitureGroup0.getHeight(), 0.01F);
      assertFalse(homeFurnitureGroup0.isBackFaceShown());
      assertFalse(homeFurnitureGroup0.isNameVisible());
      assertTrue(homeFurnitureGroup0.isTexturable());
      assertFalse(homeFurnitureGroup0.isVisible());
      assertFalse(homeFurnitureGroup0.isModelMirrored());
      assertEquals(0.0F, homeFurnitureGroup0.getNameYOffset(), 0.01F);
      assertNull(homeFurnitureGroup0.getColor());
      assertTrue(homeFurnitureGroup0.isDeformable());
      assertEquals(0.0F, homeFurnitureGroup0.getAngle(), 0.01F);
      assertEquals((-2885.0872F), homeFurnitureGroup0.getElevation(), 0.01F);
      assertNull(homeFurnitureGroup0.getDescription());
      assertEquals((-2885.0872F), homeFurnitureGroup0.getGroundElevation(), 0.01F);
      assertEquals("_])7g^)gy+P0XH3", homeFurnitureGroup0.getName());
      assertFalse(homeFurnitureGroup0.isDoorOrWindow());
      assertFalse(homeFurnitureGroup0.equals((Object)homeFurnitureGroup1));
      assertNotSame(homeFurnitureGroup0, homeFurnitureGroup1);
      
      homeFurnitureGroup0.setHeight(1331.01F);
      assertFalse(linkedList0.contains(homePieceOfFurniture0));
      assertEquals(0, linkedList0.size());
      assertEquals(0.3926991F, homeFurnitureGroup0.getWidth(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getNameAngle(), 0.01F);
      assertEquals(2001.0F, homeFurnitureGroup0.getDepth(), 0.01F);
      assertEquals(0.3927002F, homeFurnitureGroup0.getY(), 0.01F);
      assertNull(homeFurnitureGroup0.getCurrency());
      assertTrue(homeFurnitureGroup0.isMovable());
      assertEquals(1331.01F, homeFurnitureGroup0.getHeight(), 0.01F);
      assertNull(homeFurnitureGroup0.getStaircaseCutOutShape());
      assertNull(homeFurnitureGroup0.getShininess());
      assertEquals(0.0F, homeFurnitureGroup0.getNameXOffset(), 0.01F);
      assertEquals(0.19634955F, homeFurnitureGroup0.getX(), 0.01F);
      assertTrue(homeFurnitureGroup0.isResizable());
      assertNull(homeFurnitureGroup0.getCatalogId());
      assertFalse(homeFurnitureGroup0.isBackFaceShown());
      assertFalse(homeFurnitureGroup0.isNameVisible());
      assertTrue(homeFurnitureGroup0.isTexturable());
      assertFalse(homeFurnitureGroup0.isVisible());
      assertFalse(homeFurnitureGroup0.isModelMirrored());
      assertEquals(0.0F, homeFurnitureGroup0.getNameYOffset(), 0.01F);
      assertNull(homeFurnitureGroup0.getColor());
      assertTrue(homeFurnitureGroup0.isDeformable());
      assertEquals(0.0F, homeFurnitureGroup0.getAngle(), 0.01F);
      assertEquals((-2885.0872F), homeFurnitureGroup0.getElevation(), 0.01F);
      assertNull(homeFurnitureGroup0.getDescription());
      assertEquals((-2885.0872F), homeFurnitureGroup0.getGroundElevation(), 0.01F);
      assertEquals("_])7g^)gy+P0XH3", homeFurnitureGroup0.getName());
      assertFalse(homeFurnitureGroup0.isDoorOrWindow());
      assertFalse(homeFurnitureGroup0.equals((Object)homeFurnitureGroup1));
      assertNotSame(homeFurnitureGroup0, homeFurnitureGroup1);
      
      HomeFurnitureGroup homeFurnitureGroup2 = homeFurnitureGroup0.clone();
      assertFalse(linkedList0.contains(homePieceOfFurniture0));
      assertEquals(0, linkedList0.size());
      assertNull(homeFurnitureGroup2.getCatalogId());
      assertEquals((-2885.0872F), homeFurnitureGroup2.getElevation(), 0.01F);
      assertNull(homeFurnitureGroup2.getShininess());
      assertEquals(0.0F, homeFurnitureGroup2.getNameYOffset(), 0.01F);
      assertEquals(0.19634955F, homeFurnitureGroup2.getX(), 0.01F);
      assertEquals(0.3927002F, homeFurnitureGroup2.getY(), 0.01F);
      assertFalse(homeFurnitureGroup2.isModelMirrored());
      assertEquals((-2885.0872F), homeFurnitureGroup2.getGroundElevation(), 0.01F);
      assertEquals("_])7g^)gy+P0XH3", homeFurnitureGroup2.getName());
      assertFalse(homeFurnitureGroup2.isBackFaceShown());
      assertFalse(homeFurnitureGroup2.isNameVisible());
      assertNull(homeFurnitureGroup2.getCurrency());
      assertTrue(homeFurnitureGroup2.isDeformable());
      assertEquals(0.0F, homeFurnitureGroup2.getAngle(), 0.01F);
      assertFalse(homeFurnitureGroup2.isDoorOrWindow());
      assertNull(homeFurnitureGroup2.getDescription());
      assertTrue(homeFurnitureGroup2.isTexturable());
      assertNull(homeFurnitureGroup2.getColor());
      assertEquals(0.0F, homeFurnitureGroup2.getNameXOffset(), 0.01F);
      assertEquals(0.3926991F, homeFurnitureGroup2.getWidth(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup2.getNameAngle(), 0.01F);
      assertEquals(2001.0F, homeFurnitureGroup2.getDepth(), 0.01F);
      assertTrue(homeFurnitureGroup2.isMovable());
      assertFalse(homeFurnitureGroup2.isVisible());
      assertNull(homeFurnitureGroup2.getStaircaseCutOutShape());
      assertTrue(homeFurnitureGroup2.isResizable());
      assertEquals(1331.01F, homeFurnitureGroup2.getHeight(), 0.01F);
      assertEquals(0.3926991F, homeFurnitureGroup0.getWidth(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getNameAngle(), 0.01F);
      assertEquals(2001.0F, homeFurnitureGroup0.getDepth(), 0.01F);
      assertEquals(0.3927002F, homeFurnitureGroup0.getY(), 0.01F);
      assertNull(homeFurnitureGroup0.getCurrency());
      assertTrue(homeFurnitureGroup0.isMovable());
      assertEquals(1331.01F, homeFurnitureGroup0.getHeight(), 0.01F);
      assertNull(homeFurnitureGroup0.getStaircaseCutOutShape());
      assertNull(homeFurnitureGroup0.getShininess());
      assertEquals(0.0F, homeFurnitureGroup0.getNameXOffset(), 0.01F);
      assertEquals(0.19634955F, homeFurnitureGroup0.getX(), 0.01F);
      assertTrue(homeFurnitureGroup0.isResizable());
      assertNull(homeFurnitureGroup0.getCatalogId());
      assertFalse(homeFurnitureGroup0.isBackFaceShown());
      assertFalse(homeFurnitureGroup0.isNameVisible());
      assertTrue(homeFurnitureGroup0.isTexturable());
      assertFalse(homeFurnitureGroup0.isVisible());
      assertFalse(homeFurnitureGroup0.isModelMirrored());
      assertEquals(0.0F, homeFurnitureGroup0.getNameYOffset(), 0.01F);
      assertNull(homeFurnitureGroup0.getColor());
      assertTrue(homeFurnitureGroup0.isDeformable());
      assertEquals(0.0F, homeFurnitureGroup0.getAngle(), 0.01F);
      assertEquals((-2885.0872F), homeFurnitureGroup0.getElevation(), 0.01F);
      assertNull(homeFurnitureGroup0.getDescription());
      assertEquals((-2885.0872F), homeFurnitureGroup0.getGroundElevation(), 0.01F);
      assertEquals("_])7g^)gy+P0XH3", homeFurnitureGroup0.getName());
      assertFalse(homeFurnitureGroup0.isDoorOrWindow());
      assertFalse(homeFurnitureGroup2.equals((Object)homeFurnitureGroup1));
      assertFalse(homeFurnitureGroup2.equals((Object)homeFurnitureGroup0));
      assertFalse(homeFurnitureGroup0.equals((Object)homeFurnitureGroup1));
      assertNotNull(homeFurnitureGroup2);
      assertNotSame(homeFurnitureGroup2, homeFurnitureGroup1);
      assertNotSame(homeFurnitureGroup2, homeFurnitureGroup0);
      assertNotSame(homeFurnitureGroup0, homeFurnitureGroup2);
      assertNotSame(homeFurnitureGroup0, homeFurnitureGroup1);
      
      homeFurnitureGroup1.setDepth(3679.382F);
      assertFalse(linkedList0.contains(homePieceOfFurniture0));
      assertEquals((-2885.0872F), homeFurnitureGroup1.getGroundElevation(), 0.01F);
      assertEquals(3679.382F, homeFurnitureGroup1.getDepth(), 0.01F);
      assertNull(homeFurnitureGroup1.getCurrency());
      assertEquals(0.0F, homeFurnitureGroup1.getNameAngle(), 0.01F);
      assertEquals(0.3926991F, homeFurnitureGroup1.getWidth(), 0.01F);
      assertEquals((-2885.0872F), homeFurnitureGroup1.getElevation(), 0.01F);
      assertEquals(0.19634955F, homeFurnitureGroup1.getX(), 0.01F);
      assertTrue(homeFurnitureGroup1.isVisible());
      assertNull(homeFurnitureGroup1.getShininess());
      assertEquals(0.3927002F, homeFurnitureGroup1.getY(), 0.01F);
      assertNull(homeFurnitureGroup1.getDescription());
      assertEquals("_])7g^)gy+P0XH3", homeFurnitureGroup1.getName());
      assertFalse(homeFurnitureGroup1.isNameVisible());
      assertEquals(0.0F, homeFurnitureGroup1.getNameXOffset(), 0.01F);
      assertFalse(homeFurnitureGroup1.isBackFaceShown());
      assertFalse(homeFurnitureGroup1.isDoorOrWindow());
      assertEquals(0.0F, homeFurnitureGroup1.getAngle(), 0.01F);
      assertTrue(homeFurnitureGroup1.isTexturable());
      assertNull(homeFurnitureGroup1.getColor());
      assertTrue(homeFurnitureGroup1.isDeformable());
      assertFalse(homeFurnitureGroup1.isModelMirrored());
      assertEquals(0.0F, homeFurnitureGroup1.getNameYOffset(), 0.01F);
      assertTrue(homeFurnitureGroup1.isResizable());
      assertNull(homeFurnitureGroup1.getStaircaseCutOutShape());
      assertEquals(2885.0872F, homeFurnitureGroup1.getHeight(), 0.01F);
      assertTrue(homeFurnitureGroup1.isMovable());
      assertNull(homeFurnitureGroup1.getCatalogId());
      assertEquals(0, linkedList0.size());
      assertEquals(0.3926991F, homeFurnitureGroup0.getWidth(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getNameAngle(), 0.01F);
      assertEquals(2001.0F, homeFurnitureGroup0.getDepth(), 0.01F);
      assertEquals(0.3927002F, homeFurnitureGroup0.getY(), 0.01F);
      assertNull(homeFurnitureGroup0.getCurrency());
      assertTrue(homeFurnitureGroup0.isMovable());
      assertEquals(1331.01F, homeFurnitureGroup0.getHeight(), 0.01F);
      assertNull(homeFurnitureGroup0.getStaircaseCutOutShape());
      assertNull(homeFurnitureGroup0.getShininess());
      assertEquals(0.0F, homeFurnitureGroup0.getNameXOffset(), 0.01F);
      assertEquals(0.19634955F, homeFurnitureGroup0.getX(), 0.01F);
      assertTrue(homeFurnitureGroup0.isResizable());
      assertNull(homeFurnitureGroup0.getCatalogId());
      assertFalse(homeFurnitureGroup0.isBackFaceShown());
      assertFalse(homeFurnitureGroup0.isNameVisible());
      assertTrue(homeFurnitureGroup0.isTexturable());
      assertFalse(homeFurnitureGroup0.isVisible());
      assertFalse(homeFurnitureGroup0.isModelMirrored());
      assertEquals(0.0F, homeFurnitureGroup0.getNameYOffset(), 0.01F);
      assertNull(homeFurnitureGroup0.getColor());
      assertTrue(homeFurnitureGroup0.isDeformable());
      assertEquals(0.0F, homeFurnitureGroup0.getAngle(), 0.01F);
      assertEquals((-2885.0872F), homeFurnitureGroup0.getElevation(), 0.01F);
      assertNull(homeFurnitureGroup0.getDescription());
      assertEquals((-2885.0872F), homeFurnitureGroup0.getGroundElevation(), 0.01F);
      assertEquals("_])7g^)gy+P0XH3", homeFurnitureGroup0.getName());
      assertFalse(homeFurnitureGroup0.isDoorOrWindow());
      assertFalse(homeFurnitureGroup1.equals((Object)homeFurnitureGroup0));
      assertFalse(homeFurnitureGroup1.equals((Object)homeFurnitureGroup2));
      assertFalse(homeFurnitureGroup0.equals((Object)homeFurnitureGroup2));
      assertFalse(homeFurnitureGroup0.equals((Object)homeFurnitureGroup1));
      assertNotSame(homeFurnitureGroup1, homeFurnitureGroup0);
      assertNotSame(homeFurnitureGroup1, homeFurnitureGroup2);
      assertNotSame(homeFurnitureGroup0, homeFurnitureGroup2);
      assertNotSame(homeFurnitureGroup0, homeFurnitureGroup1);
      
      float float1 = homeFurnitureGroup1.getDepth();
      assertEquals(3679.382F, float1, 0.01F);
      assertFalse(linkedList0.contains(homePieceOfFurniture0));
      assertEquals((-2885.0872F), homeFurnitureGroup1.getGroundElevation(), 0.01F);
      assertEquals(3679.382F, homeFurnitureGroup1.getDepth(), 0.01F);
      assertNull(homeFurnitureGroup1.getCurrency());
      assertEquals(0.0F, homeFurnitureGroup1.getNameAngle(), 0.01F);
      assertEquals(0.3926991F, homeFurnitureGroup1.getWidth(), 0.01F);
      assertEquals((-2885.0872F), homeFurnitureGroup1.getElevation(), 0.01F);
      assertEquals(0.19634955F, homeFurnitureGroup1.getX(), 0.01F);
      assertTrue(homeFurnitureGroup1.isVisible());
      assertNull(homeFurnitureGroup1.getShininess());
      assertEquals(0.3927002F, homeFurnitureGroup1.getY(), 0.01F);
      assertNull(homeFurnitureGroup1.getDescription());
      assertEquals("_])7g^)gy+P0XH3", homeFurnitureGroup1.getName());
      assertFalse(homeFurnitureGroup1.isNameVisible());
      assertEquals(0.0F, homeFurnitureGroup1.getNameXOffset(), 0.01F);
      assertFalse(homeFurnitureGroup1.isBackFaceShown());
      assertFalse(homeFurnitureGroup1.isDoorOrWindow());
      assertEquals(0.0F, homeFurnitureGroup1.getAngle(), 0.01F);
      assertTrue(homeFurnitureGroup1.isTexturable());
      assertNull(homeFurnitureGroup1.getColor());
      assertTrue(homeFurnitureGroup1.isDeformable());
      assertFalse(homeFurnitureGroup1.isModelMirrored());
      assertEquals(0.0F, homeFurnitureGroup1.getNameYOffset(), 0.01F);
      assertTrue(homeFurnitureGroup1.isResizable());
      assertNull(homeFurnitureGroup1.getStaircaseCutOutShape());
      assertEquals(2885.0872F, homeFurnitureGroup1.getHeight(), 0.01F);
      assertTrue(homeFurnitureGroup1.isMovable());
      assertNull(homeFurnitureGroup1.getCatalogId());
      assertEquals(0, linkedList0.size());
      assertEquals(0.3926991F, homeFurnitureGroup0.getWidth(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getNameAngle(), 0.01F);
      assertEquals(2001.0F, homeFurnitureGroup0.getDepth(), 0.01F);
      assertEquals(0.3927002F, homeFurnitureGroup0.getY(), 0.01F);
      assertNull(homeFurnitureGroup0.getCurrency());
      assertTrue(homeFurnitureGroup0.isMovable());
      assertEquals(1331.01F, homeFurnitureGroup0.getHeight(), 0.01F);
      assertNull(homeFurnitureGroup0.getStaircaseCutOutShape());
      assertNull(homeFurnitureGroup0.getShininess());
      assertEquals(0.0F, homeFurnitureGroup0.getNameXOffset(), 0.01F);
      assertEquals(0.19634955F, homeFurnitureGroup0.getX(), 0.01F);
      assertTrue(homeFurnitureGroup0.isResizable());
      assertNull(homeFurnitureGroup0.getCatalogId());
      assertFalse(homeFurnitureGroup0.isBackFaceShown());
      assertFalse(homeFurnitureGroup0.isNameVisible());
      assertTrue(homeFurnitureGroup0.isTexturable());
      assertFalse(homeFurnitureGroup0.isVisible());
      assertFalse(homeFurnitureGroup0.isModelMirrored());
      assertEquals(0.0F, homeFurnitureGroup0.getNameYOffset(), 0.01F);
      assertNull(homeFurnitureGroup0.getColor());
      assertTrue(homeFurnitureGroup0.isDeformable());
      assertEquals(0.0F, homeFurnitureGroup0.getAngle(), 0.01F);
      assertEquals((-2885.0872F), homeFurnitureGroup0.getElevation(), 0.01F);
      assertNull(homeFurnitureGroup0.getDescription());
      assertEquals((-2885.0872F), homeFurnitureGroup0.getGroundElevation(), 0.01F);
      assertEquals("_])7g^)gy+P0XH3", homeFurnitureGroup0.getName());
      assertFalse(homeFurnitureGroup0.isDoorOrWindow());
      assertFalse(homeFurnitureGroup1.equals((Object)homeFurnitureGroup0));
      assertFalse(homeFurnitureGroup1.equals((Object)homeFurnitureGroup2));
      assertFalse(homeFurnitureGroup0.equals((Object)homeFurnitureGroup2));
      assertFalse(homeFurnitureGroup0.equals((Object)homeFurnitureGroup1));
      assertNotSame(homeFurnitureGroup1, homeFurnitureGroup0);
      assertNotSame(homeFurnitureGroup1, homeFurnitureGroup2);
      assertNotSame(homeFurnitureGroup0, homeFurnitureGroup2);
      assertNotSame(homeFurnitureGroup0, homeFurnitureGroup1);
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      LinkedList<HomePieceOfFurniture> linkedList0 = new LinkedList<HomePieceOfFurniture>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      ResourceURLContent resourceURLContent0 = new ResourceURLContent((URL) null, true);
      assertTrue(resourceURLContent0.isMultiPartResource());
      assertNotNull(resourceURLContent0);
      
      LightSource[] lightSourceArray0 = new LightSource[1];
      float[][] floatArray0 = new float[4][6];
      BigDecimal bigDecimal0 = new BigDecimal((long) 2001);
      assertEquals((byte) (-47), bigDecimal0.byteValue());
      assertEquals((short)2001, bigDecimal0.shortValue());
      assertNotNull(bigDecimal0);
      
      CatalogLight catalogLight0 = new CatalogLight("9", "_])7g^)gy+P0XH3", "_])7g^)gy+P0XH3", resourceURLContent0, resourceURLContent0, resourceURLContent0, 2001, 2001.0F, 1.0F, (-2885.1F), true, lightSourceArray0, floatArray0, "_])7g^)gy+P0XH3", true, bigDecimal0, bigDecimal0);
      assertEquals(1, lightSourceArray0.length);
      assertEquals(4, floatArray0.length);
      assertTrue(resourceURLContent0.isMultiPartResource());
      assertEquals((byte) (-47), bigDecimal0.byteValue());
      assertEquals((short)2001, bigDecimal0.shortValue());
      assertFalse(catalogLight0.isDoorOrWindow());
      assertTrue(catalogLight0.isTexturable());
      assertNull(catalogLight0.getCurrency());
      assertEquals("_])7g^)gy+P0XH3", catalogLight0.getCreator());
      assertTrue(catalogLight0.isProportional());
      assertEquals("_])7g^)gy+P0XH3", catalogLight0.getDescription());
      assertEquals("_])7g^)gy+P0XH3", catalogLight0.getName());
      assertEquals(1.0F, catalogLight0.getHeight(), 0.01F);
      assertTrue(catalogLight0.isMovable());
      assertNull(catalogLight0.getColor());
      assertNull(catalogLight0.getGrade());
      assertEquals(2001.0F, catalogLight0.getWidth(), 0.01F);
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertEquals(2001.0F, catalogLight0.getDepth(), 0.01F);
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertEquals("9", catalogLight0.getId());
      assertFalse(catalogLight0.isBackFaceShown());
      assertEquals((-2885.1F), catalogLight0.getElevation(), 0.01F);
      assertNull(catalogLight0.getCreationDate());
      assertNull(catalogLight0.getInformation());
      assertTrue(catalogLight0.isDeformable());
      assertTrue(catalogLight0.isResizable());
      assertFalse(catalogLight0.isModifiable());
      assertNotNull(catalogLight0);
      
      HomeLight homeLight0 = new HomeLight(catalogLight0);
      assertEquals(1, lightSourceArray0.length);
      assertEquals(4, floatArray0.length);
      assertTrue(resourceURLContent0.isMultiPartResource());
      assertEquals((byte) (-47), bigDecimal0.byteValue());
      assertEquals((short)2001, bigDecimal0.shortValue());
      assertFalse(catalogLight0.isDoorOrWindow());
      assertTrue(catalogLight0.isTexturable());
      assertNull(catalogLight0.getCurrency());
      assertEquals("_])7g^)gy+P0XH3", catalogLight0.getCreator());
      assertTrue(catalogLight0.isProportional());
      assertEquals("_])7g^)gy+P0XH3", catalogLight0.getDescription());
      assertEquals("_])7g^)gy+P0XH3", catalogLight0.getName());
      assertEquals(1.0F, catalogLight0.getHeight(), 0.01F);
      assertTrue(catalogLight0.isMovable());
      assertNull(catalogLight0.getColor());
      assertNull(catalogLight0.getGrade());
      assertEquals(2001.0F, catalogLight0.getWidth(), 0.01F);
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertEquals(2001.0F, catalogLight0.getDepth(), 0.01F);
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertEquals("9", catalogLight0.getId());
      assertFalse(catalogLight0.isBackFaceShown());
      assertEquals((-2885.1F), catalogLight0.getElevation(), 0.01F);
      assertNull(catalogLight0.getCreationDate());
      assertNull(catalogLight0.getInformation());
      assertTrue(catalogLight0.isDeformable());
      assertTrue(catalogLight0.isResizable());
      assertFalse(catalogLight0.isModifiable());
      assertTrue(homeLight0.isDeformable());
      assertEquals("_])7g^)gy+P0XH3", homeLight0.getDescription());
      assertNull(homeLight0.getCurrency());
      assertTrue(homeLight0.isVisible());
      assertEquals(1.0F, homeLight0.getHeight(), 0.01F);
      assertEquals((-2885.1F), homeLight0.getGroundElevation(), 0.01F);
      assertEquals("9", homeLight0.getCatalogId());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertEquals(2001.0F, homeLight0.getDepth(), 0.01F);
      assertNull(homeLight0.getColor());
      assertFalse(homeLight0.isModelMirrored());
      assertFalse(homeLight0.isBackFaceShown());
      assertFalse(homeLight0.isDoorOrWindow());
      assertTrue(homeLight0.isTexturable());
      assertFalse(homeLight0.isNameVisible());
      assertEquals("_])7g^)gy+P0XH3", homeLight0.getName());
      assertEquals(2001.0F, homeLight0.getWidth(), 0.01F);
      assertEquals(1000.5F, homeLight0.getY(), 0.01F);
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertEquals(1000.5F, homeLight0.getX(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals((-2885.1F), homeLight0.getElevation(), 0.01F);
      assertTrue(homeLight0.isResizable());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertNull(homeLight0.getShininess());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertTrue(homeLight0.isMovable());
      assertNotNull(homeLight0);
      
      HomePieceOfFurniture homePieceOfFurniture0 = new HomePieceOfFurniture(catalogLight0);
      assertEquals(1, lightSourceArray0.length);
      assertEquals(4, floatArray0.length);
      assertTrue(resourceURLContent0.isMultiPartResource());
      assertEquals((byte) (-47), bigDecimal0.byteValue());
      assertEquals((short)2001, bigDecimal0.shortValue());
      assertFalse(catalogLight0.isDoorOrWindow());
      assertTrue(catalogLight0.isTexturable());
      assertNull(catalogLight0.getCurrency());
      assertEquals("_])7g^)gy+P0XH3", catalogLight0.getCreator());
      assertTrue(catalogLight0.isProportional());
      assertEquals("_])7g^)gy+P0XH3", catalogLight0.getDescription());
      assertEquals("_])7g^)gy+P0XH3", catalogLight0.getName());
      assertEquals(1.0F, catalogLight0.getHeight(), 0.01F);
      assertTrue(catalogLight0.isMovable());
      assertNull(catalogLight0.getColor());
      assertNull(catalogLight0.getGrade());
      assertEquals(2001.0F, catalogLight0.getWidth(), 0.01F);
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertEquals(2001.0F, catalogLight0.getDepth(), 0.01F);
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertEquals("9", catalogLight0.getId());
      assertFalse(catalogLight0.isBackFaceShown());
      assertEquals((-2885.1F), catalogLight0.getElevation(), 0.01F);
      assertNull(catalogLight0.getCreationDate());
      assertNull(catalogLight0.getInformation());
      assertTrue(catalogLight0.isDeformable());
      assertTrue(catalogLight0.isResizable());
      assertFalse(catalogLight0.isModifiable());
      assertFalse(homePieceOfFurniture0.isDoorOrWindow());
      assertFalse(homePieceOfFurniture0.isBackFaceShown());
      assertEquals((-2885.1F), homePieceOfFurniture0.getElevation(), 0.01F);
      assertEquals(2001.0F, homePieceOfFurniture0.getWidth(), 0.01F);
      assertNull(homePieceOfFurniture0.getColor());
      assertEquals((-2885.1F), homePieceOfFurniture0.getGroundElevation(), 0.01F);
      assertFalse(homePieceOfFurniture0.isModelMirrored());
      assertEquals("9", homePieceOfFurniture0.getCatalogId());
      assertEquals("_])7g^)gy+P0XH3", homePieceOfFurniture0.getName());
      assertFalse(homePieceOfFurniture0.isNameVisible());
      assertEquals("_])7g^)gy+P0XH3", homePieceOfFurniture0.getDescription());
      assertEquals(0.0F, homePieceOfFurniture0.getNameXOffset(), 0.01F);
      assertEquals(1000.5F, homePieceOfFurniture0.getX(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture0.getAngle(), 0.01F);
      assertEquals(1000.5F, homePieceOfFurniture0.getY(), 0.01F);
      assertTrue(homePieceOfFurniture0.isTexturable());
      assertTrue(homePieceOfFurniture0.isMovable());
      assertEquals(2001.0F, homePieceOfFurniture0.getDepth(), 0.01F);
      assertNull(homePieceOfFurniture0.getStaircaseCutOutShape());
      assertEquals(0.0F, homePieceOfFurniture0.getNameAngle(), 0.01F);
      assertTrue(homePieceOfFurniture0.isResizable());
      assertTrue(homePieceOfFurniture0.isDeformable());
      assertNull(homePieceOfFurniture0.getShininess());
      assertTrue(homePieceOfFurniture0.isVisible());
      assertEquals(0.0F, homePieceOfFurniture0.getNameYOffset(), 0.01F);
      assertEquals(1.0F, homePieceOfFurniture0.getHeight(), 0.01F);
      assertNull(homePieceOfFurniture0.getCurrency());
      assertNotNull(homePieceOfFurniture0);
      
      boolean boolean0 = linkedList0.add((HomePieceOfFurniture) homeLight0);
      assertTrue(boolean0);
      assertEquals(1, lightSourceArray0.length);
      assertEquals(4, floatArray0.length);
      assertFalse(linkedList0.contains(homePieceOfFurniture0));
      assertEquals(1, linkedList0.size());
      assertTrue(resourceURLContent0.isMultiPartResource());
      assertEquals((byte) (-47), bigDecimal0.byteValue());
      assertEquals((short)2001, bigDecimal0.shortValue());
      assertFalse(catalogLight0.isDoorOrWindow());
      assertTrue(catalogLight0.isTexturable());
      assertNull(catalogLight0.getCurrency());
      assertEquals("_])7g^)gy+P0XH3", catalogLight0.getCreator());
      assertTrue(catalogLight0.isProportional());
      assertEquals("_])7g^)gy+P0XH3", catalogLight0.getDescription());
      assertEquals("_])7g^)gy+P0XH3", catalogLight0.getName());
      assertEquals(1.0F, catalogLight0.getHeight(), 0.01F);
      assertTrue(catalogLight0.isMovable());
      assertNull(catalogLight0.getColor());
      assertNull(catalogLight0.getGrade());
      assertEquals(2001.0F, catalogLight0.getWidth(), 0.01F);
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertEquals(2001.0F, catalogLight0.getDepth(), 0.01F);
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertEquals("9", catalogLight0.getId());
      assertFalse(catalogLight0.isBackFaceShown());
      assertEquals((-2885.1F), catalogLight0.getElevation(), 0.01F);
      assertNull(catalogLight0.getCreationDate());
      assertNull(catalogLight0.getInformation());
      assertTrue(catalogLight0.isDeformable());
      assertTrue(catalogLight0.isResizable());
      assertFalse(catalogLight0.isModifiable());
      assertTrue(homeLight0.isDeformable());
      assertEquals("_])7g^)gy+P0XH3", homeLight0.getDescription());
      assertNull(homeLight0.getCurrency());
      assertTrue(homeLight0.isVisible());
      assertEquals(1.0F, homeLight0.getHeight(), 0.01F);
      assertEquals((-2885.1F), homeLight0.getGroundElevation(), 0.01F);
      assertEquals("9", homeLight0.getCatalogId());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertEquals(2001.0F, homeLight0.getDepth(), 0.01F);
      assertNull(homeLight0.getColor());
      assertFalse(homeLight0.isModelMirrored());
      assertFalse(homeLight0.isBackFaceShown());
      assertFalse(homeLight0.isDoorOrWindow());
      assertTrue(homeLight0.isTexturable());
      assertFalse(homeLight0.isNameVisible());
      assertEquals("_])7g^)gy+P0XH3", homeLight0.getName());
      assertEquals(2001.0F, homeLight0.getWidth(), 0.01F);
      assertEquals(1000.5F, homeLight0.getY(), 0.01F);
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertEquals(1000.5F, homeLight0.getX(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals((-2885.1F), homeLight0.getElevation(), 0.01F);
      assertTrue(homeLight0.isResizable());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertNull(homeLight0.getShininess());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertTrue(homeLight0.isMovable());
      
      HomeFurnitureGroup homeFurnitureGroup0 = new HomeFurnitureGroup(linkedList0, "_])7g^)gy+P0XH3");
      assertFalse(linkedList0.contains(homePieceOfFurniture0));
      assertEquals(1, linkedList0.size());
      assertEquals(0.0F, homeFurnitureGroup0.getNameYOffset(), 0.01F);
      assertTrue(homeFurnitureGroup0.isVisible());
      assertNull(homeFurnitureGroup0.getShininess());
      assertEquals((-2885.1F), homeFurnitureGroup0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getNameAngle(), 0.01F);
      assertNull(homeFurnitureGroup0.getColor());
      assertNull(homeFurnitureGroup0.getStaircaseCutOutShape());
      assertTrue(homeFurnitureGroup0.isResizable());
      assertTrue(homeFurnitureGroup0.isMovable());
      assertNull(homeFurnitureGroup0.getCatalogId());
      assertEquals(2885.1F, homeFurnitureGroup0.getHeight(), 0.01F);
      assertEquals(1000.5F, homeFurnitureGroup0.getY(), 0.01F);
      assertEquals(1000.5F, homeFurnitureGroup0.getX(), 0.01F);
      assertEquals(2001.0F, homeFurnitureGroup0.getWidth(), 0.01F);
      assertTrue(homeFurnitureGroup0.isDeformable());
      assertEquals(0.0F, homeFurnitureGroup0.getNameXOffset(), 0.01F);
      assertEquals(2001.0F, homeFurnitureGroup0.getDepth(), 0.01F);
      assertFalse(homeFurnitureGroup0.isModelMirrored());
      assertNull(homeFurnitureGroup0.getCurrency());
      assertFalse(homeFurnitureGroup0.isBackFaceShown());
      assertTrue(homeFurnitureGroup0.isTexturable());
      assertEquals((-2885.1F), homeFurnitureGroup0.getElevation(), 0.01F);
      assertEquals("_])7g^)gy+P0XH3", homeFurnitureGroup0.getName());
      assertFalse(homeFurnitureGroup0.isNameVisible());
      assertNull(homeFurnitureGroup0.getDescription());
      assertEquals(0.0F, homeFurnitureGroup0.getAngle(), 0.01F);
      assertFalse(homeFurnitureGroup0.isDoorOrWindow());
      assertNotNull(homeFurnitureGroup0);
      
      HomeLight homeLight1 = (HomeLight)linkedList0.pop();
      assertFalse(linkedList0.contains(homePieceOfFurniture0));
      assertEquals(0, linkedList0.size());
      assertTrue(homeLight1.isTexturable());
      assertFalse(homeLight1.isDoorOrWindow());
      assertEquals((-2885.1F), homeLight1.getElevation(), 0.01F);
      assertFalse(homeLight1.isBackFaceShown());
      assertNull(homeLight1.getColor());
      assertFalse(homeLight1.isModelMirrored());
      assertEquals((-2885.1F), homeLight1.getGroundElevation(), 0.01F);
      assertNull(homeLight1.getCurrency());
      assertEquals(0.0F, homeLight1.getNameYOffset(), 0.01F);
      assertEquals(0.0F, homeLight1.getNameAngle(), 0.01F);
      assertTrue(homeLight1.isMovable());
      assertEquals(0.5F, homeLight1.getPower(), 0.01F);
      assertEquals(1.0F, homeLight1.getHeight(), 0.01F);
      assertEquals(2001.0F, homeLight1.getDepth(), 0.01F);
      assertNull(homeLight1.getStaircaseCutOutShape());
      assertNull(homeLight1.getShininess());
      assertTrue(homeLight1.isVisible());
      assertTrue(homeLight1.isResizable());
      assertTrue(homeLight1.isDeformable());
      assertEquals("9", homeLight1.getCatalogId());
      assertEquals("_])7g^)gy+P0XH3", homeLight1.getName());
      assertFalse(homeLight1.isNameVisible());
      assertEquals(0.0F, homeLight1.getNameXOffset(), 0.01F);
      assertEquals(2001.0F, homeLight1.getWidth(), 0.01F);
      assertEquals("_])7g^)gy+P0XH3", homeLight1.getDescription());
      assertEquals(1000.5F, homeLight1.getX(), 0.01F);
      assertEquals(1000.5F, homeLight1.getY(), 0.01F);
      assertEquals(0.0F, homeLight1.getAngle(), 0.01F);
      assertNotNull(homeLight1);
      assertSame(homeLight1, homeLight0);
      
      homeFurnitureGroup0.setDepth(1.0F);
      assertFalse(linkedList0.contains(homePieceOfFurniture0));
      assertEquals(0, linkedList0.size());
      assertEquals(0.0F, homeFurnitureGroup0.getNameYOffset(), 0.01F);
      assertTrue(homeFurnitureGroup0.isVisible());
      assertNull(homeFurnitureGroup0.getShininess());
      assertEquals((-2885.1F), homeFurnitureGroup0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getNameAngle(), 0.01F);
      assertNull(homeFurnitureGroup0.getColor());
      assertNull(homeFurnitureGroup0.getStaircaseCutOutShape());
      assertTrue(homeFurnitureGroup0.isResizable());
      assertTrue(homeFurnitureGroup0.isMovable());
      assertNull(homeFurnitureGroup0.getCatalogId());
      assertEquals(2885.1F, homeFurnitureGroup0.getHeight(), 0.01F);
      assertEquals(1000.5F, homeFurnitureGroup0.getY(), 0.01F);
      assertEquals(1000.5F, homeFurnitureGroup0.getX(), 0.01F);
      assertEquals(1.0F, homeFurnitureGroup0.getDepth(), 0.01F);
      assertEquals(2001.0F, homeFurnitureGroup0.getWidth(), 0.01F);
      assertTrue(homeFurnitureGroup0.isDeformable());
      assertEquals(0.0F, homeFurnitureGroup0.getNameXOffset(), 0.01F);
      assertFalse(homeFurnitureGroup0.isModelMirrored());
      assertNull(homeFurnitureGroup0.getCurrency());
      assertFalse(homeFurnitureGroup0.isBackFaceShown());
      assertTrue(homeFurnitureGroup0.isTexturable());
      assertEquals((-2885.1F), homeFurnitureGroup0.getElevation(), 0.01F);
      assertEquals("_])7g^)gy+P0XH3", homeFurnitureGroup0.getName());
      assertFalse(homeFurnitureGroup0.isNameVisible());
      assertNull(homeFurnitureGroup0.getDescription());
      assertEquals(0.0F, homeFurnitureGroup0.getAngle(), 0.01F);
      assertFalse(homeFurnitureGroup0.isDoorOrWindow());
      
      BigDecimal bigDecimal1 = homeFurnitureGroup0.getValueAddedTax();
      assertFalse(linkedList0.contains(homePieceOfFurniture0));
      assertEquals(0, linkedList0.size());
      assertEquals(0.0F, homeFurnitureGroup0.getNameYOffset(), 0.01F);
      assertTrue(homeFurnitureGroup0.isVisible());
      assertNull(homeFurnitureGroup0.getShininess());
      assertEquals((-2885.1F), homeFurnitureGroup0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getNameAngle(), 0.01F);
      assertNull(homeFurnitureGroup0.getColor());
      assertNull(homeFurnitureGroup0.getStaircaseCutOutShape());
      assertTrue(homeFurnitureGroup0.isResizable());
      assertTrue(homeFurnitureGroup0.isMovable());
      assertNull(homeFurnitureGroup0.getCatalogId());
      assertEquals(2885.1F, homeFurnitureGroup0.getHeight(), 0.01F);
      assertEquals(1000.5F, homeFurnitureGroup0.getY(), 0.01F);
      assertEquals(1000.5F, homeFurnitureGroup0.getX(), 0.01F);
      assertEquals(1.0F, homeFurnitureGroup0.getDepth(), 0.01F);
      assertEquals(2001.0F, homeFurnitureGroup0.getWidth(), 0.01F);
      assertTrue(homeFurnitureGroup0.isDeformable());
      assertEquals(0.0F, homeFurnitureGroup0.getNameXOffset(), 0.01F);
      assertFalse(homeFurnitureGroup0.isModelMirrored());
      assertNull(homeFurnitureGroup0.getCurrency());
      assertFalse(homeFurnitureGroup0.isBackFaceShown());
      assertTrue(homeFurnitureGroup0.isTexturable());
      assertEquals((-2885.1F), homeFurnitureGroup0.getElevation(), 0.01F);
      assertEquals("_])7g^)gy+P0XH3", homeFurnitureGroup0.getName());
      assertFalse(homeFurnitureGroup0.isNameVisible());
      assertNull(homeFurnitureGroup0.getDescription());
      assertEquals(0.0F, homeFurnitureGroup0.getAngle(), 0.01F);
      assertFalse(homeFurnitureGroup0.isDoorOrWindow());
      assertEquals((byte) (-95), bigDecimal1.byteValue());
      assertEquals((short)6305, bigDecimal1.shortValue());
      assertFalse(bigDecimal1.equals((Object)bigDecimal0));
      assertNotNull(bigDecimal1);
      assertNotSame(bigDecimal1, bigDecimal0);
      
      float float0 = homeFurnitureGroup0.getDepth();
      assertEquals(1.0F, float0, 0.01F);
      assertFalse(linkedList0.contains(homePieceOfFurniture0));
      assertEquals(0, linkedList0.size());
      assertEquals(0.0F, homeFurnitureGroup0.getNameYOffset(), 0.01F);
      assertTrue(homeFurnitureGroup0.isVisible());
      assertNull(homeFurnitureGroup0.getShininess());
      assertEquals((-2885.1F), homeFurnitureGroup0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getNameAngle(), 0.01F);
      assertNull(homeFurnitureGroup0.getColor());
      assertNull(homeFurnitureGroup0.getStaircaseCutOutShape());
      assertTrue(homeFurnitureGroup0.isResizable());
      assertTrue(homeFurnitureGroup0.isMovable());
      assertNull(homeFurnitureGroup0.getCatalogId());
      assertEquals(2885.1F, homeFurnitureGroup0.getHeight(), 0.01F);
      assertEquals(1000.5F, homeFurnitureGroup0.getY(), 0.01F);
      assertEquals(1000.5F, homeFurnitureGroup0.getX(), 0.01F);
      assertEquals(1.0F, homeFurnitureGroup0.getDepth(), 0.01F);
      assertEquals(2001.0F, homeFurnitureGroup0.getWidth(), 0.01F);
      assertTrue(homeFurnitureGroup0.isDeformable());
      assertEquals(0.0F, homeFurnitureGroup0.getNameXOffset(), 0.01F);
      assertFalse(homeFurnitureGroup0.isModelMirrored());
      assertNull(homeFurnitureGroup0.getCurrency());
      assertFalse(homeFurnitureGroup0.isBackFaceShown());
      assertTrue(homeFurnitureGroup0.isTexturable());
      assertEquals((-2885.1F), homeFurnitureGroup0.getElevation(), 0.01F);
      assertEquals("_])7g^)gy+P0XH3", homeFurnitureGroup0.getName());
      assertFalse(homeFurnitureGroup0.isNameVisible());
      assertNull(homeFurnitureGroup0.getDescription());
      assertEquals(0.0F, homeFurnitureGroup0.getAngle(), 0.01F);
      assertFalse(homeFurnitureGroup0.isDoorOrWindow());
      
      homeFurnitureGroup0.setWidth(2001);
      assertFalse(linkedList0.contains(homePieceOfFurniture0));
      assertEquals(0, linkedList0.size());
      assertEquals(0.0F, homeFurnitureGroup0.getNameYOffset(), 0.01F);
      assertTrue(homeFurnitureGroup0.isVisible());
      assertNull(homeFurnitureGroup0.getShininess());
      assertEquals((-2885.1F), homeFurnitureGroup0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getNameAngle(), 0.01F);
      assertNull(homeFurnitureGroup0.getColor());
      assertNull(homeFurnitureGroup0.getStaircaseCutOutShape());
      assertTrue(homeFurnitureGroup0.isResizable());
      assertTrue(homeFurnitureGroup0.isMovable());
      assertNull(homeFurnitureGroup0.getCatalogId());
      assertEquals(2885.1F, homeFurnitureGroup0.getHeight(), 0.01F);
      assertEquals(1000.5F, homeFurnitureGroup0.getY(), 0.01F);
      assertEquals(1000.5F, homeFurnitureGroup0.getX(), 0.01F);
      assertEquals(1.0F, homeFurnitureGroup0.getDepth(), 0.01F);
      assertEquals(2001.0F, homeFurnitureGroup0.getWidth(), 0.01F);
      assertTrue(homeFurnitureGroup0.isDeformable());
      assertEquals(0.0F, homeFurnitureGroup0.getNameXOffset(), 0.01F);
      assertFalse(homeFurnitureGroup0.isModelMirrored());
      assertNull(homeFurnitureGroup0.getCurrency());
      assertFalse(homeFurnitureGroup0.isBackFaceShown());
      assertTrue(homeFurnitureGroup0.isTexturable());
      assertEquals((-2885.1F), homeFurnitureGroup0.getElevation(), 0.01F);
      assertEquals("_])7g^)gy+P0XH3", homeFurnitureGroup0.getName());
      assertFalse(homeFurnitureGroup0.isNameVisible());
      assertNull(homeFurnitureGroup0.getDescription());
      assertEquals(0.0F, homeFurnitureGroup0.getAngle(), 0.01F);
      assertFalse(homeFurnitureGroup0.isDoorOrWindow());
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      LinkedList<HomePieceOfFurniture> linkedList0 = new LinkedList<HomePieceOfFurniture>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      ResourceURLContent resourceURLContent0 = new ResourceURLContent((URL) null, true);
      assertTrue(resourceURLContent0.isMultiPartResource());
      assertNotNull(resourceURLContent0);
      
      LightSource[] lightSourceArray0 = new LightSource[1];
      Float float0 = new Float(0.0);
      assertEquals(0.0F, (float)float0, 0.01F);
      assertNotNull(float0);
      
      float[][] floatArray0 = new float[4][6];
      BigDecimal bigDecimal0 = new BigDecimal((long) 2001);
      assertEquals((short)2001, bigDecimal0.shortValue());
      assertEquals((byte) (-47), bigDecimal0.byteValue());
      assertNotNull(bigDecimal0);
      
      CatalogLight catalogLight0 = new CatalogLight("9", "DEPTH", "DEPTH", resourceURLContent0, resourceURLContent0, resourceURLContent0, 0.3926991F, 2001.0F, 1.0F, (-2883.8875F), true, lightSourceArray0, floatArray0, "DEPTH", true, bigDecimal0, bigDecimal0);
      assertEquals(1, lightSourceArray0.length);
      assertEquals(4, floatArray0.length);
      assertTrue(resourceURLContent0.isMultiPartResource());
      assertEquals((short)2001, bigDecimal0.shortValue());
      assertEquals((byte) (-47), bigDecimal0.byteValue());
      assertEquals("DEPTH", catalogLight0.getCreator());
      assertTrue(catalogLight0.isTexturable());
      assertEquals("DEPTH", catalogLight0.getName());
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertTrue(catalogLight0.isProportional());
      assertNull(catalogLight0.getCurrency());
      assertEquals(1.0F, catalogLight0.getHeight(), 0.01F);
      assertEquals("DEPTH", catalogLight0.getDescription());
      assertFalse(catalogLight0.isModifiable());
      assertNull(catalogLight0.getCreationDate());
      assertEquals((-2883.8875F), catalogLight0.getElevation(), 0.01F);
      assertFalse(catalogLight0.isBackFaceShown());
      assertEquals(0.3926991F, catalogLight0.getWidth(), 0.01F);
      assertTrue(catalogLight0.isDeformable());
      assertNull(catalogLight0.getInformation());
      assertTrue(catalogLight0.isResizable());
      assertTrue(catalogLight0.isMovable());
      assertNull(catalogLight0.getColor());
      assertNull(catalogLight0.getGrade());
      assertEquals("9", catalogLight0.getId());
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertEquals(2001.0F, catalogLight0.getDepth(), 0.01F);
      assertFalse(catalogLight0.isDoorOrWindow());
      assertNotNull(catalogLight0);
      
      HomeLight homeLight0 = new HomeLight(catalogLight0);
      assertEquals(1, lightSourceArray0.length);
      assertEquals(4, floatArray0.length);
      assertTrue(resourceURLContent0.isMultiPartResource());
      assertEquals((short)2001, bigDecimal0.shortValue());
      assertEquals((byte) (-47), bigDecimal0.byteValue());
      assertEquals("DEPTH", catalogLight0.getCreator());
      assertTrue(catalogLight0.isTexturable());
      assertEquals("DEPTH", catalogLight0.getName());
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertTrue(catalogLight0.isProportional());
      assertNull(catalogLight0.getCurrency());
      assertEquals(1.0F, catalogLight0.getHeight(), 0.01F);
      assertEquals("DEPTH", catalogLight0.getDescription());
      assertFalse(catalogLight0.isModifiable());
      assertNull(catalogLight0.getCreationDate());
      assertEquals((-2883.8875F), catalogLight0.getElevation(), 0.01F);
      assertFalse(catalogLight0.isBackFaceShown());
      assertEquals(0.3926991F, catalogLight0.getWidth(), 0.01F);
      assertTrue(catalogLight0.isDeformable());
      assertNull(catalogLight0.getInformation());
      assertTrue(catalogLight0.isResizable());
      assertTrue(catalogLight0.isMovable());
      assertNull(catalogLight0.getColor());
      assertNull(catalogLight0.getGrade());
      assertEquals("9", catalogLight0.getId());
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertEquals(2001.0F, catalogLight0.getDepth(), 0.01F);
      assertFalse(catalogLight0.isDoorOrWindow());
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals("DEPTH", homeLight0.getDescription());
      assertEquals(0.19634955F, homeLight0.getX(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertTrue(homeLight0.isMovable());
      assertNull(homeLight0.getColor());
      assertEquals(1.0F, homeLight0.getHeight(), 0.01F);
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertNull(homeLight0.getCurrency());
      assertEquals(0.3926991F, homeLight0.getWidth(), 0.01F);
      assertTrue(homeLight0.isVisible());
      assertTrue(homeLight0.isDeformable());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertFalse(homeLight0.isNameVisible());
      assertEquals((-2883.8875F), homeLight0.getGroundElevation(), 0.01F);
      assertFalse(homeLight0.isModelMirrored());
      assertEquals(2001.0F, homeLight0.getDepth(), 0.01F);
      assertFalse(homeLight0.isBackFaceShown());
      assertNull(homeLight0.getShininess());
      assertTrue(homeLight0.isResizable());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertEquals(1000.5F, homeLight0.getY(), 0.01F);
      assertEquals("DEPTH", homeLight0.getName());
      assertTrue(homeLight0.isTexturable());
      assertFalse(homeLight0.isDoorOrWindow());
      assertEquals((-2883.8875F), homeLight0.getElevation(), 0.01F);
      assertEquals("9", homeLight0.getCatalogId());
      assertNotNull(homeLight0);
      
      homeLight0.setNameVisible(true);
      assertEquals(1, lightSourceArray0.length);
      assertEquals(4, floatArray0.length);
      assertTrue(resourceURLContent0.isMultiPartResource());
      assertEquals((short)2001, bigDecimal0.shortValue());
      assertEquals((byte) (-47), bigDecimal0.byteValue());
      assertEquals("DEPTH", catalogLight0.getCreator());
      assertTrue(catalogLight0.isTexturable());
      assertEquals("DEPTH", catalogLight0.getName());
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertTrue(catalogLight0.isProportional());
      assertNull(catalogLight0.getCurrency());
      assertEquals(1.0F, catalogLight0.getHeight(), 0.01F);
      assertEquals("DEPTH", catalogLight0.getDescription());
      assertFalse(catalogLight0.isModifiable());
      assertNull(catalogLight0.getCreationDate());
      assertEquals((-2883.8875F), catalogLight0.getElevation(), 0.01F);
      assertFalse(catalogLight0.isBackFaceShown());
      assertEquals(0.3926991F, catalogLight0.getWidth(), 0.01F);
      assertTrue(catalogLight0.isDeformable());
      assertNull(catalogLight0.getInformation());
      assertTrue(catalogLight0.isResizable());
      assertTrue(catalogLight0.isMovable());
      assertNull(catalogLight0.getColor());
      assertNull(catalogLight0.getGrade());
      assertEquals("9", catalogLight0.getId());
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertEquals(2001.0F, catalogLight0.getDepth(), 0.01F);
      assertFalse(catalogLight0.isDoorOrWindow());
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals("DEPTH", homeLight0.getDescription());
      assertEquals(0.19634955F, homeLight0.getX(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertTrue(homeLight0.isMovable());
      assertNull(homeLight0.getColor());
      assertEquals(1.0F, homeLight0.getHeight(), 0.01F);
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertNull(homeLight0.getCurrency());
      assertEquals(0.3926991F, homeLight0.getWidth(), 0.01F);
      assertTrue(homeLight0.isVisible());
      assertTrue(homeLight0.isDeformable());
      assertTrue(homeLight0.isNameVisible());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertEquals((-2883.8875F), homeLight0.getGroundElevation(), 0.01F);
      assertFalse(homeLight0.isModelMirrored());
      assertEquals(2001.0F, homeLight0.getDepth(), 0.01F);
      assertFalse(homeLight0.isBackFaceShown());
      assertNull(homeLight0.getShininess());
      assertTrue(homeLight0.isResizable());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertEquals(1000.5F, homeLight0.getY(), 0.01F);
      assertEquals("DEPTH", homeLight0.getName());
      assertTrue(homeLight0.isTexturable());
      assertFalse(homeLight0.isDoorOrWindow());
      assertEquals((-2883.8875F), homeLight0.getElevation(), 0.01F);
      assertEquals("9", homeLight0.getCatalogId());
      
      HomePieceOfFurniture homePieceOfFurniture0 = new HomePieceOfFurniture(catalogLight0);
      assertEquals(1, lightSourceArray0.length);
      assertEquals(4, floatArray0.length);
      assertTrue(resourceURLContent0.isMultiPartResource());
      assertEquals((short)2001, bigDecimal0.shortValue());
      assertEquals((byte) (-47), bigDecimal0.byteValue());
      assertEquals("DEPTH", catalogLight0.getCreator());
      assertTrue(catalogLight0.isTexturable());
      assertEquals("DEPTH", catalogLight0.getName());
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertTrue(catalogLight0.isProportional());
      assertNull(catalogLight0.getCurrency());
      assertEquals(1.0F, catalogLight0.getHeight(), 0.01F);
      assertEquals("DEPTH", catalogLight0.getDescription());
      assertFalse(catalogLight0.isModifiable());
      assertNull(catalogLight0.getCreationDate());
      assertEquals((-2883.8875F), catalogLight0.getElevation(), 0.01F);
      assertFalse(catalogLight0.isBackFaceShown());
      assertEquals(0.3926991F, catalogLight0.getWidth(), 0.01F);
      assertTrue(catalogLight0.isDeformable());
      assertNull(catalogLight0.getInformation());
      assertTrue(catalogLight0.isResizable());
      assertTrue(catalogLight0.isMovable());
      assertNull(catalogLight0.getColor());
      assertNull(catalogLight0.getGrade());
      assertEquals("9", catalogLight0.getId());
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertEquals(2001.0F, catalogLight0.getDepth(), 0.01F);
      assertFalse(catalogLight0.isDoorOrWindow());
      assertEquals(0.0F, homePieceOfFurniture0.getNameXOffset(), 0.01F);
      assertEquals("DEPTH", homePieceOfFurniture0.getDescription());
      assertEquals(0.0F, homePieceOfFurniture0.getNameAngle(), 0.01F);
      assertNull(homePieceOfFurniture0.getStaircaseCutOutShape());
      assertTrue(homePieceOfFurniture0.isResizable());
      assertEquals(0.19634955F, homePieceOfFurniture0.getX(), 0.01F);
      assertFalse(homePieceOfFurniture0.isDoorOrWindow());
      assertTrue(homePieceOfFurniture0.isTexturable());
      assertFalse(homePieceOfFurniture0.isModelMirrored());
      assertEquals(2001.0F, homePieceOfFurniture0.getDepth(), 0.01F);
      assertFalse(homePieceOfFurniture0.isBackFaceShown());
      assertEquals(1000.5F, homePieceOfFurniture0.getY(), 0.01F);
      assertFalse(homePieceOfFurniture0.isNameVisible());
      assertEquals("DEPTH", homePieceOfFurniture0.getName());
      assertEquals(0.0F, homePieceOfFurniture0.getAngle(), 0.01F);
      assertNull(homePieceOfFurniture0.getCurrency());
      assertEquals("9", homePieceOfFurniture0.getCatalogId());
      assertEquals(0.0F, homePieceOfFurniture0.getNameYOffset(), 0.01F);
      assertEquals((-2883.8875F), homePieceOfFurniture0.getElevation(), 0.01F);
      assertNull(homePieceOfFurniture0.getColor());
      assertEquals((-2883.8875F), homePieceOfFurniture0.getGroundElevation(), 0.01F);
      assertTrue(homePieceOfFurniture0.isVisible());
      assertTrue(homePieceOfFurniture0.isDeformable());
      assertEquals(0.3926991F, homePieceOfFurniture0.getWidth(), 0.01F);
      assertNull(homePieceOfFurniture0.getShininess());
      assertTrue(homePieceOfFurniture0.isMovable());
      assertEquals(1.0F, homePieceOfFurniture0.getHeight(), 0.01F);
      assertNotNull(homePieceOfFurniture0);
      
      boolean boolean0 = linkedList0.add((HomePieceOfFurniture) homeLight0);
      assertTrue(boolean0);
      assertEquals(1, lightSourceArray0.length);
      assertEquals(4, floatArray0.length);
      assertFalse(linkedList0.contains(homePieceOfFurniture0));
      assertEquals(1, linkedList0.size());
      assertTrue(resourceURLContent0.isMultiPartResource());
      assertEquals((short)2001, bigDecimal0.shortValue());
      assertEquals((byte) (-47), bigDecimal0.byteValue());
      assertEquals("DEPTH", catalogLight0.getCreator());
      assertTrue(catalogLight0.isTexturable());
      assertEquals("DEPTH", catalogLight0.getName());
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertTrue(catalogLight0.isProportional());
      assertNull(catalogLight0.getCurrency());
      assertEquals(1.0F, catalogLight0.getHeight(), 0.01F);
      assertEquals("DEPTH", catalogLight0.getDescription());
      assertFalse(catalogLight0.isModifiable());
      assertNull(catalogLight0.getCreationDate());
      assertEquals((-2883.8875F), catalogLight0.getElevation(), 0.01F);
      assertFalse(catalogLight0.isBackFaceShown());
      assertEquals(0.3926991F, catalogLight0.getWidth(), 0.01F);
      assertTrue(catalogLight0.isDeformable());
      assertNull(catalogLight0.getInformation());
      assertTrue(catalogLight0.isResizable());
      assertTrue(catalogLight0.isMovable());
      assertNull(catalogLight0.getColor());
      assertNull(catalogLight0.getGrade());
      assertEquals("9", catalogLight0.getId());
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertEquals(2001.0F, catalogLight0.getDepth(), 0.01F);
      assertFalse(catalogLight0.isDoorOrWindow());
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals("DEPTH", homeLight0.getDescription());
      assertEquals(0.19634955F, homeLight0.getX(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertTrue(homeLight0.isMovable());
      assertNull(homeLight0.getColor());
      assertEquals(1.0F, homeLight0.getHeight(), 0.01F);
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertNull(homeLight0.getCurrency());
      assertEquals(0.3926991F, homeLight0.getWidth(), 0.01F);
      assertTrue(homeLight0.isVisible());
      assertTrue(homeLight0.isDeformable());
      assertTrue(homeLight0.isNameVisible());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertEquals((-2883.8875F), homeLight0.getGroundElevation(), 0.01F);
      assertFalse(homeLight0.isModelMirrored());
      assertEquals(2001.0F, homeLight0.getDepth(), 0.01F);
      assertFalse(homeLight0.isBackFaceShown());
      assertNull(homeLight0.getShininess());
      assertTrue(homeLight0.isResizable());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertEquals(1000.5F, homeLight0.getY(), 0.01F);
      assertEquals("DEPTH", homeLight0.getName());
      assertTrue(homeLight0.isTexturable());
      assertFalse(homeLight0.isDoorOrWindow());
      assertEquals((-2883.8875F), homeLight0.getElevation(), 0.01F);
      assertEquals("9", homeLight0.getCatalogId());
      
      HomeFurnitureGroup homeFurnitureGroup0 = new HomeFurnitureGroup(linkedList0, "_])7g^)gy+P0XH3");
      assertFalse(linkedList0.contains(homePieceOfFurniture0));
      assertEquals(1, linkedList0.size());
      assertTrue(homeFurnitureGroup0.isResizable());
      assertEquals(0.0F, homeFurnitureGroup0.getNameXOffset(), 0.01F);
      assertNull(homeFurnitureGroup0.getStaircaseCutOutShape());
      assertEquals(0.19634955F, homeFurnitureGroup0.getX(), 0.01F);
      assertNull(homeFurnitureGroup0.getCurrency());
      assertEquals(0.3926991F, homeFurnitureGroup0.getWidth(), 0.01F);
      assertEquals(2001.0F, homeFurnitureGroup0.getDepth(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getNameAngle(), 0.01F);
      assertTrue(homeFurnitureGroup0.isDeformable());
      assertNull(homeFurnitureGroup0.getShininess());
      assertFalse(homeFurnitureGroup0.isDoorOrWindow());
      assertEquals(1000.5F, homeFurnitureGroup0.getY(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getAngle(), 0.01F);
      assertEquals((-2883.8875F), homeFurnitureGroup0.getElevation(), 0.01F);
      assertTrue(homeFurnitureGroup0.isTexturable());
      assertNull(homeFurnitureGroup0.getDescription());
      assertEquals("_])7g^)gy+P0XH3", homeFurnitureGroup0.getName());
      assertFalse(homeFurnitureGroup0.isNameVisible());
      assertEquals(0.0F, homeFurnitureGroup0.getNameYOffset(), 0.01F);
      assertEquals((-2883.8875F), homeFurnitureGroup0.getGroundElevation(), 0.01F);
      assertFalse(homeFurnitureGroup0.isBackFaceShown());
      assertTrue(homeFurnitureGroup0.isVisible());
      assertFalse(homeFurnitureGroup0.isModelMirrored());
      assertNull(homeFurnitureGroup0.getCatalogId());
      assertEquals(2883.8875F, homeFurnitureGroup0.getHeight(), 0.01F);
      assertNull(homeFurnitureGroup0.getColor());
      assertTrue(homeFurnitureGroup0.isMovable());
      assertNotNull(homeFurnitureGroup0);
      
      homeFurnitureGroup0.setDepth(1824.7F);
      assertFalse(linkedList0.contains(homePieceOfFurniture0));
      assertEquals(1, linkedList0.size());
      assertTrue(homeFurnitureGroup0.isResizable());
      assertEquals(1824.7F, homeFurnitureGroup0.getDepth(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getNameXOffset(), 0.01F);
      assertNull(homeFurnitureGroup0.getStaircaseCutOutShape());
      assertEquals(0.19634955F, homeFurnitureGroup0.getX(), 0.01F);
      assertNull(homeFurnitureGroup0.getCurrency());
      assertEquals(0.3926991F, homeFurnitureGroup0.getWidth(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getNameAngle(), 0.01F);
      assertTrue(homeFurnitureGroup0.isDeformable());
      assertNull(homeFurnitureGroup0.getShininess());
      assertFalse(homeFurnitureGroup0.isDoorOrWindow());
      assertEquals(1000.5F, homeFurnitureGroup0.getY(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getAngle(), 0.01F);
      assertEquals((-2883.8875F), homeFurnitureGroup0.getElevation(), 0.01F);
      assertTrue(homeFurnitureGroup0.isTexturable());
      assertNull(homeFurnitureGroup0.getDescription());
      assertEquals("_])7g^)gy+P0XH3", homeFurnitureGroup0.getName());
      assertFalse(homeFurnitureGroup0.isNameVisible());
      assertEquals(0.0F, homeFurnitureGroup0.getNameYOffset(), 0.01F);
      assertEquals((-2883.8875F), homeFurnitureGroup0.getGroundElevation(), 0.01F);
      assertFalse(homeFurnitureGroup0.isBackFaceShown());
      assertTrue(homeFurnitureGroup0.isVisible());
      assertFalse(homeFurnitureGroup0.isModelMirrored());
      assertNull(homeFurnitureGroup0.getCatalogId());
      assertEquals(2883.8875F, homeFurnitureGroup0.getHeight(), 0.01F);
      assertNull(homeFurnitureGroup0.getColor());
      assertTrue(homeFurnitureGroup0.isMovable());
      
      BigDecimal bigDecimal1 = homeFurnitureGroup0.getValueAddedTax();
      assertFalse(linkedList0.contains(homePieceOfFurniture0));
      assertEquals(1, linkedList0.size());
      assertTrue(homeFurnitureGroup0.isResizable());
      assertEquals(1824.7F, homeFurnitureGroup0.getDepth(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getNameXOffset(), 0.01F);
      assertNull(homeFurnitureGroup0.getStaircaseCutOutShape());
      assertEquals(0.19634955F, homeFurnitureGroup0.getX(), 0.01F);
      assertNull(homeFurnitureGroup0.getCurrency());
      assertEquals(0.3926991F, homeFurnitureGroup0.getWidth(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getNameAngle(), 0.01F);
      assertTrue(homeFurnitureGroup0.isDeformable());
      assertNull(homeFurnitureGroup0.getShininess());
      assertFalse(homeFurnitureGroup0.isDoorOrWindow());
      assertEquals(1000.5F, homeFurnitureGroup0.getY(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getAngle(), 0.01F);
      assertEquals((-2883.8875F), homeFurnitureGroup0.getElevation(), 0.01F);
      assertTrue(homeFurnitureGroup0.isTexturable());
      assertNull(homeFurnitureGroup0.getDescription());
      assertEquals("_])7g^)gy+P0XH3", homeFurnitureGroup0.getName());
      assertFalse(homeFurnitureGroup0.isNameVisible());
      assertEquals(0.0F, homeFurnitureGroup0.getNameYOffset(), 0.01F);
      assertEquals((-2883.8875F), homeFurnitureGroup0.getGroundElevation(), 0.01F);
      assertFalse(homeFurnitureGroup0.isBackFaceShown());
      assertTrue(homeFurnitureGroup0.isVisible());
      assertFalse(homeFurnitureGroup0.isModelMirrored());
      assertNull(homeFurnitureGroup0.getCatalogId());
      assertEquals(2883.8875F, homeFurnitureGroup0.getHeight(), 0.01F);
      assertNull(homeFurnitureGroup0.getColor());
      assertTrue(homeFurnitureGroup0.isMovable());
      assertEquals((short)6305, bigDecimal1.shortValue());
      assertEquals((byte) (-95), bigDecimal1.byteValue());
      assertFalse(bigDecimal1.equals((Object)bigDecimal0));
      assertNotNull(bigDecimal1);
      assertNotSame(bigDecimal1, bigDecimal0);
      
      homeFurnitureGroup0.setAngle(0.0F);
      assertFalse(linkedList0.contains(homePieceOfFurniture0));
      assertEquals(1, linkedList0.size());
      assertTrue(homeFurnitureGroup0.isResizable());
      assertEquals(1824.7F, homeFurnitureGroup0.getDepth(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getNameXOffset(), 0.01F);
      assertNull(homeFurnitureGroup0.getStaircaseCutOutShape());
      assertEquals(0.19634955F, homeFurnitureGroup0.getX(), 0.01F);
      assertNull(homeFurnitureGroup0.getCurrency());
      assertEquals(0.3926991F, homeFurnitureGroup0.getWidth(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getNameAngle(), 0.01F);
      assertTrue(homeFurnitureGroup0.isDeformable());
      assertNull(homeFurnitureGroup0.getShininess());
      assertFalse(homeFurnitureGroup0.isDoorOrWindow());
      assertEquals(1000.5F, homeFurnitureGroup0.getY(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getAngle(), 0.01F);
      assertEquals((-2883.8875F), homeFurnitureGroup0.getElevation(), 0.01F);
      assertTrue(homeFurnitureGroup0.isTexturable());
      assertNull(homeFurnitureGroup0.getDescription());
      assertEquals("_])7g^)gy+P0XH3", homeFurnitureGroup0.getName());
      assertFalse(homeFurnitureGroup0.isNameVisible());
      assertEquals(0.0F, homeFurnitureGroup0.getNameYOffset(), 0.01F);
      assertEquals((-2883.8875F), homeFurnitureGroup0.getGroundElevation(), 0.01F);
      assertFalse(homeFurnitureGroup0.isBackFaceShown());
      assertTrue(homeFurnitureGroup0.isVisible());
      assertFalse(homeFurnitureGroup0.isModelMirrored());
      assertNull(homeFurnitureGroup0.getCatalogId());
      assertEquals(2883.8875F, homeFurnitureGroup0.getHeight(), 0.01F);
      assertNull(homeFurnitureGroup0.getColor());
      assertTrue(homeFurnitureGroup0.isMovable());
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      LinkedList<HomePieceOfFurniture> linkedList0 = new LinkedList<HomePieceOfFurniture>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      ResourceURLContent resourceURLContent0 = new ResourceURLContent((URL) null, true);
      assertTrue(resourceURLContent0.isMultiPartResource());
      assertNotNull(resourceURLContent0);
      
      LightSource[] lightSourceArray0 = new LightSource[6];
      Float float0 = new Float((double) (-22.0F));
      assertEquals((-22.0F), (float)float0, 0.01F);
      assertNotNull(float0);
      
      LightSource lightSource0 = new LightSource(88.9F, 1.0F, (-22.0F), 2001, float0);
      assertEquals(2001, lightSource0.getColor());
      assertEquals((-22.0F), lightSource0.getZ(), 0.01F);
      assertEquals(88.9F, lightSource0.getX(), 0.01F);
      assertEquals((-22.0F), lightSource0.getDiameter(), 0.01F);
      assertEquals(1.0F, lightSource0.getY(), 0.01F);
      assertNotNull(lightSource0);
      
      float[][] floatArray0 = new float[4][6];
      BigDecimal bigDecimal0 = new BigDecimal((long) 2001);
      assertEquals((byte) (-47), bigDecimal0.byteValue());
      assertEquals((short)2001, bigDecimal0.shortValue());
      assertNotNull(bigDecimal0);
      
      BigDecimal bigDecimal1 = new BigDecimal((long) 2001);
      assertEquals((short)2001, bigDecimal1.shortValue());
      assertEquals((byte) (-47), bigDecimal1.byteValue());
      assertTrue(bigDecimal1.equals((Object)bigDecimal0));
      assertNotNull(bigDecimal1);
      
      CatalogLight catalogLight0 = new CatalogLight("_])7g^)gy+P0XH3", "_])7g^)gy+P0XH3", "/<gAhL`8>", resourceURLContent0, resourceURLContent0, resourceURLContent0, (-22.0F), 1.0F, 2001, 1.0F, false, lightSourceArray0, floatArray0, "DEPTH", true, bigDecimal0, bigDecimal1);
      assertEquals(6, lightSourceArray0.length);
      assertEquals(4, floatArray0.length);
      assertTrue(resourceURLContent0.isMultiPartResource());
      assertEquals((byte) (-47), bigDecimal0.byteValue());
      assertEquals((short)2001, bigDecimal0.shortValue());
      assertEquals((short)2001, bigDecimal1.shortValue());
      assertEquals((byte) (-47), bigDecimal1.byteValue());
      assertNull(catalogLight0.getGrade());
      assertTrue(catalogLight0.isProportional());
      assertNull(catalogLight0.getCurrency());
      assertEquals("/<gAhL`8>", catalogLight0.getDescription());
      assertEquals("DEPTH", catalogLight0.getCreator());
      assertNull(catalogLight0.getInformation());
      assertTrue(catalogLight0.isResizable());
      assertEquals((-22.0F), catalogLight0.getWidth(), 0.01F);
      assertTrue(catalogLight0.isDeformable());
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertEquals("_])7g^)gy+P0XH3", catalogLight0.getName());
      assertFalse(catalogLight0.isBackFaceShown());
      assertTrue(catalogLight0.isTexturable());
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertFalse(catalogLight0.isDoorOrWindow());
      assertNull(catalogLight0.getCreationDate());
      assertEquals("_])7g^)gy+P0XH3", catalogLight0.getId());
      assertNull(catalogLight0.getColor());
      assertFalse(catalogLight0.isModifiable());
      assertEquals(1.0F, catalogLight0.getDepth(), 0.01F);
      assertFalse(catalogLight0.isMovable());
      assertEquals(2001.0F, catalogLight0.getHeight(), 0.01F);
      assertEquals(1.0F, catalogLight0.getElevation(), 0.01F);
      assertTrue(bigDecimal0.equals((Object)bigDecimal1));
      assertTrue(bigDecimal1.equals((Object)bigDecimal0));
      assertNotNull(catalogLight0);
      
      HomeLight homeLight0 = new HomeLight(catalogLight0);
      assertEquals(6, lightSourceArray0.length);
      assertEquals(4, floatArray0.length);
      assertTrue(resourceURLContent0.isMultiPartResource());
      assertEquals((byte) (-47), bigDecimal0.byteValue());
      assertEquals((short)2001, bigDecimal0.shortValue());
      assertEquals((short)2001, bigDecimal1.shortValue());
      assertEquals((byte) (-47), bigDecimal1.byteValue());
      assertNull(catalogLight0.getGrade());
      assertTrue(catalogLight0.isProportional());
      assertNull(catalogLight0.getCurrency());
      assertEquals("/<gAhL`8>", catalogLight0.getDescription());
      assertEquals("DEPTH", catalogLight0.getCreator());
      assertNull(catalogLight0.getInformation());
      assertTrue(catalogLight0.isResizable());
      assertEquals((-22.0F), catalogLight0.getWidth(), 0.01F);
      assertTrue(catalogLight0.isDeformable());
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertEquals("_])7g^)gy+P0XH3", catalogLight0.getName());
      assertFalse(catalogLight0.isBackFaceShown());
      assertTrue(catalogLight0.isTexturable());
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertFalse(catalogLight0.isDoorOrWindow());
      assertNull(catalogLight0.getCreationDate());
      assertEquals("_])7g^)gy+P0XH3", catalogLight0.getId());
      assertNull(catalogLight0.getColor());
      assertFalse(catalogLight0.isModifiable());
      assertEquals(1.0F, catalogLight0.getDepth(), 0.01F);
      assertFalse(catalogLight0.isMovable());
      assertEquals(2001.0F, catalogLight0.getHeight(), 0.01F);
      assertEquals(1.0F, catalogLight0.getElevation(), 0.01F);
      assertEquals(1.0F, homeLight0.getGroundElevation(), 0.01F);
      assertTrue(homeLight0.isTexturable());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertEquals(0.5F, homeLight0.getY(), 0.01F);
      assertEquals(1.0F, homeLight0.getElevation(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      assertEquals(1.0F, homeLight0.getDepth(), 0.01F);
      assertNull(homeLight0.getCurrency());
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertTrue(homeLight0.isDeformable());
      assertTrue(homeLight0.isResizable());
      assertNull(homeLight0.getShininess());
      assertTrue(homeLight0.isVisible());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertEquals(2001.0F, homeLight0.getHeight(), 0.01F);
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertFalse(homeLight0.isMovable());
      assertFalse(homeLight0.isNameVisible());
      assertEquals("/<gAhL`8>", homeLight0.getDescription());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertEquals((-11.0F), homeLight0.getX(), 0.01F);
      assertNull(homeLight0.getColor());
      assertEquals("_])7g^)gy+P0XH3", homeLight0.getName());
      assertEquals("_])7g^)gy+P0XH3", homeLight0.getCatalogId());
      assertFalse(homeLight0.isModelMirrored());
      assertFalse(homeLight0.isBackFaceShown());
      assertEquals((-22.0F), homeLight0.getWidth(), 0.01F);
      assertTrue(bigDecimal0.equals((Object)bigDecimal1));
      assertTrue(bigDecimal1.equals((Object)bigDecimal0));
      assertNotNull(homeLight0);
      
      HomePieceOfFurniture homePieceOfFurniture0 = new HomePieceOfFurniture(homeLight0);
      assertEquals(6, lightSourceArray0.length);
      assertEquals(4, floatArray0.length);
      assertTrue(resourceURLContent0.isMultiPartResource());
      assertEquals((byte) (-47), bigDecimal0.byteValue());
      assertEquals((short)2001, bigDecimal0.shortValue());
      assertEquals((short)2001, bigDecimal1.shortValue());
      assertEquals((byte) (-47), bigDecimal1.byteValue());
      assertNull(catalogLight0.getGrade());
      assertTrue(catalogLight0.isProportional());
      assertNull(catalogLight0.getCurrency());
      assertEquals("/<gAhL`8>", catalogLight0.getDescription());
      assertEquals("DEPTH", catalogLight0.getCreator());
      assertNull(catalogLight0.getInformation());
      assertTrue(catalogLight0.isResizable());
      assertEquals((-22.0F), catalogLight0.getWidth(), 0.01F);
      assertTrue(catalogLight0.isDeformable());
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertEquals("_])7g^)gy+P0XH3", catalogLight0.getName());
      assertFalse(catalogLight0.isBackFaceShown());
      assertTrue(catalogLight0.isTexturable());
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertFalse(catalogLight0.isDoorOrWindow());
      assertNull(catalogLight0.getCreationDate());
      assertEquals("_])7g^)gy+P0XH3", catalogLight0.getId());
      assertNull(catalogLight0.getColor());
      assertFalse(catalogLight0.isModifiable());
      assertEquals(1.0F, catalogLight0.getDepth(), 0.01F);
      assertFalse(catalogLight0.isMovable());
      assertEquals(2001.0F, catalogLight0.getHeight(), 0.01F);
      assertEquals(1.0F, catalogLight0.getElevation(), 0.01F);
      assertEquals(1.0F, homeLight0.getGroundElevation(), 0.01F);
      assertTrue(homeLight0.isTexturable());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertEquals(0.5F, homeLight0.getY(), 0.01F);
      assertEquals(1.0F, homeLight0.getElevation(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      assertEquals(1.0F, homeLight0.getDepth(), 0.01F);
      assertNull(homeLight0.getCurrency());
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertTrue(homeLight0.isDeformable());
      assertTrue(homeLight0.isResizable());
      assertNull(homeLight0.getShininess());
      assertTrue(homeLight0.isVisible());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertEquals(2001.0F, homeLight0.getHeight(), 0.01F);
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertFalse(homeLight0.isMovable());
      assertFalse(homeLight0.isNameVisible());
      assertEquals("/<gAhL`8>", homeLight0.getDescription());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertEquals((-11.0F), homeLight0.getX(), 0.01F);
      assertNull(homeLight0.getColor());
      assertEquals("_])7g^)gy+P0XH3", homeLight0.getName());
      assertEquals("_])7g^)gy+P0XH3", homeLight0.getCatalogId());
      assertFalse(homeLight0.isModelMirrored());
      assertFalse(homeLight0.isBackFaceShown());
      assertEquals((-22.0F), homeLight0.getWidth(), 0.01F);
      assertFalse(homePieceOfFurniture0.isMovable());
      assertEquals("/<gAhL`8>", homePieceOfFurniture0.getDescription());
      assertEquals("_])7g^)gy+P0XH3", homePieceOfFurniture0.getName());
      assertEquals("_])7g^)gy+P0XH3", homePieceOfFurniture0.getCatalogId());
      assertNull(homePieceOfFurniture0.getColor());
      assertFalse(homePieceOfFurniture0.isNameVisible());
      assertEquals(0.0F, homePieceOfFurniture0.getNameYOffset(), 0.01F);
      assertEquals((-11.0F), homePieceOfFurniture0.getX(), 0.01F);
      assertFalse(homePieceOfFurniture0.isBackFaceShown());
      assertEquals((-22.0F), homePieceOfFurniture0.getWidth(), 0.01F);
      assertFalse(homePieceOfFurniture0.isModelMirrored());
      assertEquals(0.0F, homePieceOfFurniture0.getAngle(), 0.01F);
      assertEquals(0.5F, homePieceOfFurniture0.getY(), 0.01F);
      assertEquals(1.0F, homePieceOfFurniture0.getGroundElevation(), 0.01F);
      assertFalse(homePieceOfFurniture0.isDoorOrWindow());
      assertTrue(homePieceOfFurniture0.isTexturable());
      assertEquals(1.0F, homePieceOfFurniture0.getElevation(), 0.01F);
      assertEquals(1.0F, homePieceOfFurniture0.getDepth(), 0.01F);
      assertNull(homePieceOfFurniture0.getCurrency());
      assertEquals(0.0F, homePieceOfFurniture0.getNameXOffset(), 0.01F);
      assertTrue(homePieceOfFurniture0.isVisible());
      assertTrue(homePieceOfFurniture0.isDeformable());
      assertEquals(2001.0F, homePieceOfFurniture0.getHeight(), 0.01F);
      assertTrue(homePieceOfFurniture0.isResizable());
      assertEquals(0.0F, homePieceOfFurniture0.getNameAngle(), 0.01F);
      assertNull(homePieceOfFurniture0.getShininess());
      assertNull(homePieceOfFurniture0.getStaircaseCutOutShape());
      assertTrue(bigDecimal0.equals((Object)bigDecimal1));
      assertTrue(bigDecimal1.equals((Object)bigDecimal0));
      assertNotNull(homePieceOfFurniture0);
      
      boolean boolean0 = linkedList0.add((HomePieceOfFurniture) homeLight0);
      assertTrue(boolean0);
      assertEquals(6, lightSourceArray0.length);
      assertEquals(4, floatArray0.length);
      assertFalse(linkedList0.contains(homePieceOfFurniture0));
      assertEquals(1, linkedList0.size());
      assertTrue(resourceURLContent0.isMultiPartResource());
      assertEquals((byte) (-47), bigDecimal0.byteValue());
      assertEquals((short)2001, bigDecimal0.shortValue());
      assertEquals((short)2001, bigDecimal1.shortValue());
      assertEquals((byte) (-47), bigDecimal1.byteValue());
      assertNull(catalogLight0.getGrade());
      assertTrue(catalogLight0.isProportional());
      assertNull(catalogLight0.getCurrency());
      assertEquals("/<gAhL`8>", catalogLight0.getDescription());
      assertEquals("DEPTH", catalogLight0.getCreator());
      assertNull(catalogLight0.getInformation());
      assertTrue(catalogLight0.isResizable());
      assertEquals((-22.0F), catalogLight0.getWidth(), 0.01F);
      assertTrue(catalogLight0.isDeformable());
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertEquals("_])7g^)gy+P0XH3", catalogLight0.getName());
      assertFalse(catalogLight0.isBackFaceShown());
      assertTrue(catalogLight0.isTexturable());
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertFalse(catalogLight0.isDoorOrWindow());
      assertNull(catalogLight0.getCreationDate());
      assertEquals("_])7g^)gy+P0XH3", catalogLight0.getId());
      assertNull(catalogLight0.getColor());
      assertFalse(catalogLight0.isModifiable());
      assertEquals(1.0F, catalogLight0.getDepth(), 0.01F);
      assertFalse(catalogLight0.isMovable());
      assertEquals(2001.0F, catalogLight0.getHeight(), 0.01F);
      assertEquals(1.0F, catalogLight0.getElevation(), 0.01F);
      assertEquals(1.0F, homeLight0.getGroundElevation(), 0.01F);
      assertTrue(homeLight0.isTexturable());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertEquals(0.5F, homeLight0.getY(), 0.01F);
      assertEquals(1.0F, homeLight0.getElevation(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      assertEquals(1.0F, homeLight0.getDepth(), 0.01F);
      assertNull(homeLight0.getCurrency());
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertTrue(homeLight0.isDeformable());
      assertTrue(homeLight0.isResizable());
      assertNull(homeLight0.getShininess());
      assertTrue(homeLight0.isVisible());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertEquals(2001.0F, homeLight0.getHeight(), 0.01F);
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertFalse(homeLight0.isMovable());
      assertFalse(homeLight0.isNameVisible());
      assertEquals("/<gAhL`8>", homeLight0.getDescription());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertEquals((-11.0F), homeLight0.getX(), 0.01F);
      assertNull(homeLight0.getColor());
      assertEquals("_])7g^)gy+P0XH3", homeLight0.getName());
      assertEquals("_])7g^)gy+P0XH3", homeLight0.getCatalogId());
      assertFalse(homeLight0.isModelMirrored());
      assertFalse(homeLight0.isBackFaceShown());
      assertEquals((-22.0F), homeLight0.getWidth(), 0.01F);
      assertTrue(bigDecimal0.equals((Object)bigDecimal1));
      assertTrue(bigDecimal1.equals((Object)bigDecimal0));
      assertNotSame(bigDecimal0, bigDecimal1);
      assertNotSame(bigDecimal1, bigDecimal0);
      
      PropertyChangeListener propertyChangeListener0 = mock(PropertyChangeListener.class, new ViolatedAssumptionAnswer());
      PropertyChangeListenerProxy propertyChangeListenerProxy0 = new PropertyChangeListenerProxy("", propertyChangeListener0);
      assertEquals("", propertyChangeListenerProxy0.getPropertyName());
      assertNotNull(propertyChangeListenerProxy0);
      
      PropertyChangeListenerProxy propertyChangeListenerProxy1 = new PropertyChangeListenerProxy("", propertyChangeListenerProxy0);
      assertEquals("", propertyChangeListenerProxy0.getPropertyName());
      assertEquals("", propertyChangeListenerProxy1.getPropertyName());
      assertFalse(propertyChangeListenerProxy1.equals((Object)propertyChangeListenerProxy0));
      assertNotNull(propertyChangeListenerProxy1);
      
      HomeFurnitureGroup homeFurnitureGroup0 = new HomeFurnitureGroup(linkedList0, "");
      assertFalse(linkedList0.contains(homePieceOfFurniture0));
      assertEquals(1, linkedList0.size());
      assertEquals(0.0F, homeFurnitureGroup0.getX(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getY(), 0.01F);
      assertFalse(homeFurnitureGroup0.isModelMirrored());
      assertEquals(1.0F, homeFurnitureGroup0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getAngle(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getWidth(), 0.01F);
      assertFalse(homeFurnitureGroup0.isDoorOrWindow());
      assertFalse(homeFurnitureGroup0.isBackFaceShown());
      assertTrue(homeFurnitureGroup0.isDeformable());
      assertEquals(0.0F, homeFurnitureGroup0.getDepth(), 0.01F);
      assertTrue(homeFurnitureGroup0.isResizable());
      assertEquals(0.0F, homeFurnitureGroup0.getNameYOffset(), 0.01F);
      assertFalse(homeFurnitureGroup0.isMovable());
      assertNull(homeFurnitureGroup0.getColor());
      assertNull(homeFurnitureGroup0.getShininess());
      assertEquals(2001.0F, homeFurnitureGroup0.getHeight(), 0.01F);
      assertNull(homeFurnitureGroup0.getCatalogId());
      assertEquals(0.0F, homeFurnitureGroup0.getNameAngle(), 0.01F);
      assertNull(homeFurnitureGroup0.getCurrency());
      assertEquals("", homeFurnitureGroup0.getName());
      assertNull(homeFurnitureGroup0.getStaircaseCutOutShape());
      assertNull(homeFurnitureGroup0.getDescription());
      assertEquals(0.0F, homeFurnitureGroup0.getNameXOffset(), 0.01F);
      assertEquals(1.0F, homeFurnitureGroup0.getElevation(), 0.01F);
      assertFalse(homeFurnitureGroup0.isNameVisible());
      assertTrue(homeFurnitureGroup0.isVisible());
      assertTrue(homeFurnitureGroup0.isTexturable());
      assertNotNull(homeFurnitureGroup0);
      
      HomeFurnitureGroup homeFurnitureGroup1 = homeFurnitureGroup0.clone();
      assertFalse(linkedList0.contains(homePieceOfFurniture0));
      assertEquals(2001.0F, homeFurnitureGroup1.getHeight(), 0.01F);
      assertNull(homeFurnitureGroup1.getCatalogId());
      assertEquals("", homeFurnitureGroup1.getName());
      assertFalse(homeFurnitureGroup1.isNameVisible());
      assertEquals(0.0F, homeFurnitureGroup1.getNameYOffset(), 0.01F);
      assertFalse(homeFurnitureGroup1.isBackFaceShown());
      assertFalse(homeFurnitureGroup1.isMovable());
      assertNull(homeFurnitureGroup1.getCurrency());
      assertFalse(homeFurnitureGroup1.isModelMirrored());
      assertNull(homeFurnitureGroup1.getColor());
      assertTrue(homeFurnitureGroup1.isDeformable());
      assertEquals(1.0F, homeFurnitureGroup1.getGroundElevation(), 0.01F);
      assertFalse(homeFurnitureGroup1.isDoorOrWindow());
      assertEquals(0.0F, homeFurnitureGroup1.getWidth(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup1.getY(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup1.getX(), 0.01F);
      assertTrue(homeFurnitureGroup1.isTexturable());
      assertEquals(0.0F, homeFurnitureGroup1.getDepth(), 0.01F);
      assertEquals(1.0F, homeFurnitureGroup1.getElevation(), 0.01F);
      assertNull(homeFurnitureGroup1.getDescription());
      assertEquals(0.0F, homeFurnitureGroup1.getAngle(), 0.01F);
      assertNull(homeFurnitureGroup1.getStaircaseCutOutShape());
      assertTrue(homeFurnitureGroup1.isResizable());
      assertEquals(0.0F, homeFurnitureGroup1.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup1.getNameAngle(), 0.01F);
      assertNull(homeFurnitureGroup1.getShininess());
      assertTrue(homeFurnitureGroup1.isVisible());
      assertEquals(1, linkedList0.size());
      assertEquals(0.0F, homeFurnitureGroup0.getX(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getY(), 0.01F);
      assertFalse(homeFurnitureGroup0.isModelMirrored());
      assertEquals(1.0F, homeFurnitureGroup0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getAngle(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getWidth(), 0.01F);
      assertFalse(homeFurnitureGroup0.isDoorOrWindow());
      assertFalse(homeFurnitureGroup0.isBackFaceShown());
      assertTrue(homeFurnitureGroup0.isDeformable());
      assertEquals(0.0F, homeFurnitureGroup0.getDepth(), 0.01F);
      assertTrue(homeFurnitureGroup0.isResizable());
      assertEquals(0.0F, homeFurnitureGroup0.getNameYOffset(), 0.01F);
      assertFalse(homeFurnitureGroup0.isMovable());
      assertNull(homeFurnitureGroup0.getColor());
      assertNull(homeFurnitureGroup0.getShininess());
      assertEquals(2001.0F, homeFurnitureGroup0.getHeight(), 0.01F);
      assertNull(homeFurnitureGroup0.getCatalogId());
      assertEquals(0.0F, homeFurnitureGroup0.getNameAngle(), 0.01F);
      assertNull(homeFurnitureGroup0.getCurrency());
      assertEquals("", homeFurnitureGroup0.getName());
      assertNull(homeFurnitureGroup0.getStaircaseCutOutShape());
      assertNull(homeFurnitureGroup0.getDescription());
      assertEquals(0.0F, homeFurnitureGroup0.getNameXOffset(), 0.01F);
      assertEquals(1.0F, homeFurnitureGroup0.getElevation(), 0.01F);
      assertFalse(homeFurnitureGroup0.isNameVisible());
      assertTrue(homeFurnitureGroup0.isVisible());
      assertTrue(homeFurnitureGroup0.isTexturable());
      assertFalse(homeFurnitureGroup1.equals((Object)homeFurnitureGroup0));
      assertNotNull(homeFurnitureGroup1);
      assertNotSame(homeFurnitureGroup1, homeFurnitureGroup0);
      assertNotSame(homeFurnitureGroup0, homeFurnitureGroup1);
      
      homeFurnitureGroup1.addPropertyChangeListener(propertyChangeListenerProxy1);
      assertFalse(linkedList0.contains(homePieceOfFurniture0));
      assertEquals(2001.0F, homeFurnitureGroup1.getHeight(), 0.01F);
      assertNull(homeFurnitureGroup1.getCatalogId());
      assertEquals("", homeFurnitureGroup1.getName());
      assertFalse(homeFurnitureGroup1.isNameVisible());
      assertEquals(0.0F, homeFurnitureGroup1.getNameYOffset(), 0.01F);
      assertFalse(homeFurnitureGroup1.isBackFaceShown());
      assertFalse(homeFurnitureGroup1.isMovable());
      assertNull(homeFurnitureGroup1.getCurrency());
      assertFalse(homeFurnitureGroup1.isModelMirrored());
      assertNull(homeFurnitureGroup1.getColor());
      assertTrue(homeFurnitureGroup1.isDeformable());
      assertEquals(1.0F, homeFurnitureGroup1.getGroundElevation(), 0.01F);
      assertFalse(homeFurnitureGroup1.isDoorOrWindow());
      assertEquals(0.0F, homeFurnitureGroup1.getWidth(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup1.getY(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup1.getX(), 0.01F);
      assertTrue(homeFurnitureGroup1.isTexturable());
      assertEquals(0.0F, homeFurnitureGroup1.getDepth(), 0.01F);
      assertEquals(1.0F, homeFurnitureGroup1.getElevation(), 0.01F);
      assertNull(homeFurnitureGroup1.getDescription());
      assertEquals(0.0F, homeFurnitureGroup1.getAngle(), 0.01F);
      assertNull(homeFurnitureGroup1.getStaircaseCutOutShape());
      assertTrue(homeFurnitureGroup1.isResizable());
      assertEquals(0.0F, homeFurnitureGroup1.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup1.getNameAngle(), 0.01F);
      assertNull(homeFurnitureGroup1.getShininess());
      assertTrue(homeFurnitureGroup1.isVisible());
      assertEquals(1, linkedList0.size());
      assertEquals("", propertyChangeListenerProxy0.getPropertyName());
      assertEquals("", propertyChangeListenerProxy1.getPropertyName());
      assertEquals(0.0F, homeFurnitureGroup0.getX(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getY(), 0.01F);
      assertFalse(homeFurnitureGroup0.isModelMirrored());
      assertEquals(1.0F, homeFurnitureGroup0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getAngle(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getWidth(), 0.01F);
      assertFalse(homeFurnitureGroup0.isDoorOrWindow());
      assertFalse(homeFurnitureGroup0.isBackFaceShown());
      assertTrue(homeFurnitureGroup0.isDeformable());
      assertEquals(0.0F, homeFurnitureGroup0.getDepth(), 0.01F);
      assertTrue(homeFurnitureGroup0.isResizable());
      assertEquals(0.0F, homeFurnitureGroup0.getNameYOffset(), 0.01F);
      assertFalse(homeFurnitureGroup0.isMovable());
      assertNull(homeFurnitureGroup0.getColor());
      assertNull(homeFurnitureGroup0.getShininess());
      assertEquals(2001.0F, homeFurnitureGroup0.getHeight(), 0.01F);
      assertNull(homeFurnitureGroup0.getCatalogId());
      assertEquals(0.0F, homeFurnitureGroup0.getNameAngle(), 0.01F);
      assertNull(homeFurnitureGroup0.getCurrency());
      assertEquals("", homeFurnitureGroup0.getName());
      assertNull(homeFurnitureGroup0.getStaircaseCutOutShape());
      assertNull(homeFurnitureGroup0.getDescription());
      assertEquals(0.0F, homeFurnitureGroup0.getNameXOffset(), 0.01F);
      assertEquals(1.0F, homeFurnitureGroup0.getElevation(), 0.01F);
      assertFalse(homeFurnitureGroup0.isNameVisible());
      assertTrue(homeFurnitureGroup0.isVisible());
      assertTrue(homeFurnitureGroup0.isTexturable());
      assertFalse(homeFurnitureGroup1.equals((Object)homeFurnitureGroup0));
      assertFalse(propertyChangeListenerProxy0.equals((Object)propertyChangeListenerProxy1));
      assertFalse(propertyChangeListenerProxy1.equals((Object)propertyChangeListenerProxy0));
      assertFalse(homeFurnitureGroup0.equals((Object)homeFurnitureGroup1));
      assertNotSame(homeFurnitureGroup1, homeFurnitureGroup0);
      assertNotSame(propertyChangeListenerProxy0, propertyChangeListenerProxy1);
      assertNotSame(propertyChangeListenerProxy1, propertyChangeListenerProxy0);
      assertNotSame(homeFurnitureGroup0, homeFurnitureGroup1);
      
      homeFurnitureGroup0.setHeight(2001);
      assertFalse(linkedList0.contains(homePieceOfFurniture0));
      assertEquals(1, linkedList0.size());
      assertEquals(0.0F, homeFurnitureGroup0.getX(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getY(), 0.01F);
      assertFalse(homeFurnitureGroup0.isModelMirrored());
      assertEquals(1.0F, homeFurnitureGroup0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getAngle(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getWidth(), 0.01F);
      assertFalse(homeFurnitureGroup0.isDoorOrWindow());
      assertFalse(homeFurnitureGroup0.isBackFaceShown());
      assertTrue(homeFurnitureGroup0.isDeformable());
      assertEquals(0.0F, homeFurnitureGroup0.getDepth(), 0.01F);
      assertTrue(homeFurnitureGroup0.isResizable());
      assertEquals(0.0F, homeFurnitureGroup0.getNameYOffset(), 0.01F);
      assertFalse(homeFurnitureGroup0.isMovable());
      assertNull(homeFurnitureGroup0.getColor());
      assertNull(homeFurnitureGroup0.getShininess());
      assertEquals(2001.0F, homeFurnitureGroup0.getHeight(), 0.01F);
      assertNull(homeFurnitureGroup0.getCatalogId());
      assertEquals(0.0F, homeFurnitureGroup0.getNameAngle(), 0.01F);
      assertNull(homeFurnitureGroup0.getCurrency());
      assertEquals("", homeFurnitureGroup0.getName());
      assertNull(homeFurnitureGroup0.getStaircaseCutOutShape());
      assertNull(homeFurnitureGroup0.getDescription());
      assertEquals(0.0F, homeFurnitureGroup0.getNameXOffset(), 0.01F);
      assertEquals(1.0F, homeFurnitureGroup0.getElevation(), 0.01F);
      assertFalse(homeFurnitureGroup0.isNameVisible());
      assertTrue(homeFurnitureGroup0.isVisible());
      assertTrue(homeFurnitureGroup0.isTexturable());
      assertFalse(homeFurnitureGroup0.equals((Object)homeFurnitureGroup1));
      assertNotSame(homeFurnitureGroup0, homeFurnitureGroup1);
      
      HomeFurnitureGroup homeFurnitureGroup2 = new HomeFurnitureGroup(linkedList0, "");
      assertFalse(linkedList0.contains(homePieceOfFurniture0));
      assertEquals(1, linkedList0.size());
      assertNull(homeFurnitureGroup2.getColor());
      assertFalse(homeFurnitureGroup2.isBackFaceShown());
      assertFalse(homeFurnitureGroup2.isModelMirrored());
      assertTrue(homeFurnitureGroup2.isTexturable());
      assertFalse(homeFurnitureGroup2.isNameVisible());
      assertEquals(0.0F, homeFurnitureGroup2.getAngle(), 0.01F);
      assertFalse(homeFurnitureGroup2.isDoorOrWindow());
      assertEquals(0.0F, homeFurnitureGroup2.getDepth(), 0.01F);
      assertEquals(1.0F, homeFurnitureGroup2.getElevation(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup2.getX(), 0.01F);
      assertEquals(1.0F, homeFurnitureGroup2.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup2.getY(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup2.getNameXOffset(), 0.01F);
      assertNull(homeFurnitureGroup2.getShininess());
      assertTrue(homeFurnitureGroup2.isVisible());
      assertFalse(homeFurnitureGroup2.isMovable());
      assertNull(homeFurnitureGroup2.getCurrency());
      assertEquals(0.0F, homeFurnitureGroup2.getNameAngle(), 0.01F);
      assertNull(homeFurnitureGroup2.getCatalogId());
      assertNull(homeFurnitureGroup2.getStaircaseCutOutShape());
      assertTrue(homeFurnitureGroup2.isResizable());
      assertNull(homeFurnitureGroup2.getDescription());
      assertEquals("", homeFurnitureGroup2.getName());
      assertEquals(2001.0F, homeFurnitureGroup2.getHeight(), 0.01F);
      assertTrue(homeFurnitureGroup2.isDeformable());
      assertEquals(0.0F, homeFurnitureGroup2.getWidth(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup2.getNameYOffset(), 0.01F);
      assertFalse(homeFurnitureGroup2.equals((Object)homeFurnitureGroup0));
      assertFalse(homeFurnitureGroup2.equals((Object)homeFurnitureGroup1));
      assertNotNull(homeFurnitureGroup2);
      
      String string0 = homeFurnitureGroup2.getCatalogId();
      assertFalse(linkedList0.contains(homePieceOfFurniture0));
      assertEquals(1, linkedList0.size());
      assertNull(homeFurnitureGroup2.getColor());
      assertFalse(homeFurnitureGroup2.isBackFaceShown());
      assertFalse(homeFurnitureGroup2.isModelMirrored());
      assertTrue(homeFurnitureGroup2.isTexturable());
      assertFalse(homeFurnitureGroup2.isNameVisible());
      assertEquals(0.0F, homeFurnitureGroup2.getAngle(), 0.01F);
      assertFalse(homeFurnitureGroup2.isDoorOrWindow());
      assertEquals(0.0F, homeFurnitureGroup2.getDepth(), 0.01F);
      assertEquals(1.0F, homeFurnitureGroup2.getElevation(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup2.getX(), 0.01F);
      assertEquals(1.0F, homeFurnitureGroup2.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup2.getY(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup2.getNameXOffset(), 0.01F);
      assertNull(homeFurnitureGroup2.getShininess());
      assertTrue(homeFurnitureGroup2.isVisible());
      assertFalse(homeFurnitureGroup2.isMovable());
      assertNull(homeFurnitureGroup2.getCurrency());
      assertEquals(0.0F, homeFurnitureGroup2.getNameAngle(), 0.01F);
      assertNull(homeFurnitureGroup2.getCatalogId());
      assertNull(homeFurnitureGroup2.getStaircaseCutOutShape());
      assertTrue(homeFurnitureGroup2.isResizable());
      assertNull(homeFurnitureGroup2.getDescription());
      assertEquals("", homeFurnitureGroup2.getName());
      assertEquals(2001.0F, homeFurnitureGroup2.getHeight(), 0.01F);
      assertTrue(homeFurnitureGroup2.isDeformable());
      assertEquals(0.0F, homeFurnitureGroup2.getWidth(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup2.getNameYOffset(), 0.01F);
      assertFalse(homeFurnitureGroup2.equals((Object)homeFurnitureGroup0));
      assertFalse(homeFurnitureGroup2.equals((Object)homeFurnitureGroup1));
      assertNull(string0);
      assertNotSame(homeFurnitureGroup2, homeFurnitureGroup0);
      assertNotSame(homeFurnitureGroup2, homeFurnitureGroup1);
      
      boolean boolean1 = homeFurnitureGroup0.isDoorOrWindow();
      assertFalse(boolean1);
      assertFalse(linkedList0.contains(homePieceOfFurniture0));
      assertEquals(1, linkedList0.size());
      assertEquals(0.0F, homeFurnitureGroup0.getX(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getY(), 0.01F);
      assertFalse(homeFurnitureGroup0.isModelMirrored());
      assertEquals(1.0F, homeFurnitureGroup0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getAngle(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getWidth(), 0.01F);
      assertFalse(homeFurnitureGroup0.isDoorOrWindow());
      assertFalse(homeFurnitureGroup0.isBackFaceShown());
      assertTrue(homeFurnitureGroup0.isDeformable());
      assertEquals(0.0F, homeFurnitureGroup0.getDepth(), 0.01F);
      assertTrue(homeFurnitureGroup0.isResizable());
      assertEquals(0.0F, homeFurnitureGroup0.getNameYOffset(), 0.01F);
      assertFalse(homeFurnitureGroup0.isMovable());
      assertNull(homeFurnitureGroup0.getColor());
      assertNull(homeFurnitureGroup0.getShininess());
      assertEquals(2001.0F, homeFurnitureGroup0.getHeight(), 0.01F);
      assertNull(homeFurnitureGroup0.getCatalogId());
      assertEquals(0.0F, homeFurnitureGroup0.getNameAngle(), 0.01F);
      assertNull(homeFurnitureGroup0.getCurrency());
      assertEquals("", homeFurnitureGroup0.getName());
      assertNull(homeFurnitureGroup0.getStaircaseCutOutShape());
      assertNull(homeFurnitureGroup0.getDescription());
      assertEquals(0.0F, homeFurnitureGroup0.getNameXOffset(), 0.01F);
      assertEquals(1.0F, homeFurnitureGroup0.getElevation(), 0.01F);
      assertFalse(homeFurnitureGroup0.isNameVisible());
      assertTrue(homeFurnitureGroup0.isVisible());
      assertTrue(homeFurnitureGroup0.isTexturable());
      assertFalse(boolean1 == boolean0);
      assertFalse(homeFurnitureGroup0.equals((Object)homeFurnitureGroup1));
      assertFalse(homeFurnitureGroup0.equals((Object)homeFurnitureGroup2));
      assertNotSame(homeFurnitureGroup0, homeFurnitureGroup1);
      assertNotSame(homeFurnitureGroup0, homeFurnitureGroup2);
      
      homeFurnitureGroup1.setModelMirrored(false);
      assertFalse(linkedList0.contains(homePieceOfFurniture0));
      assertEquals(2001.0F, homeFurnitureGroup1.getHeight(), 0.01F);
      assertNull(homeFurnitureGroup1.getCatalogId());
      assertEquals("", homeFurnitureGroup1.getName());
      assertFalse(homeFurnitureGroup1.isNameVisible());
      assertEquals(0.0F, homeFurnitureGroup1.getNameYOffset(), 0.01F);
      assertFalse(homeFurnitureGroup1.isBackFaceShown());
      assertFalse(homeFurnitureGroup1.isMovable());
      assertNull(homeFurnitureGroup1.getCurrency());
      assertFalse(homeFurnitureGroup1.isModelMirrored());
      assertNull(homeFurnitureGroup1.getColor());
      assertTrue(homeFurnitureGroup1.isDeformable());
      assertEquals(1.0F, homeFurnitureGroup1.getGroundElevation(), 0.01F);
      assertFalse(homeFurnitureGroup1.isDoorOrWindow());
      assertEquals(0.0F, homeFurnitureGroup1.getWidth(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup1.getY(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup1.getX(), 0.01F);
      assertTrue(homeFurnitureGroup1.isTexturable());
      assertEquals(0.0F, homeFurnitureGroup1.getDepth(), 0.01F);
      assertEquals(1.0F, homeFurnitureGroup1.getElevation(), 0.01F);
      assertNull(homeFurnitureGroup1.getDescription());
      assertEquals(0.0F, homeFurnitureGroup1.getAngle(), 0.01F);
      assertNull(homeFurnitureGroup1.getStaircaseCutOutShape());
      assertTrue(homeFurnitureGroup1.isResizable());
      assertEquals(0.0F, homeFurnitureGroup1.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup1.getNameAngle(), 0.01F);
      assertNull(homeFurnitureGroup1.getShininess());
      assertTrue(homeFurnitureGroup1.isVisible());
      assertEquals(1, linkedList0.size());
      assertEquals(0.0F, homeFurnitureGroup0.getX(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getY(), 0.01F);
      assertFalse(homeFurnitureGroup0.isModelMirrored());
      assertEquals(1.0F, homeFurnitureGroup0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getAngle(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getWidth(), 0.01F);
      assertFalse(homeFurnitureGroup0.isDoorOrWindow());
      assertFalse(homeFurnitureGroup0.isBackFaceShown());
      assertTrue(homeFurnitureGroup0.isDeformable());
      assertEquals(0.0F, homeFurnitureGroup0.getDepth(), 0.01F);
      assertTrue(homeFurnitureGroup0.isResizable());
      assertEquals(0.0F, homeFurnitureGroup0.getNameYOffset(), 0.01F);
      assertFalse(homeFurnitureGroup0.isMovable());
      assertNull(homeFurnitureGroup0.getColor());
      assertNull(homeFurnitureGroup0.getShininess());
      assertEquals(2001.0F, homeFurnitureGroup0.getHeight(), 0.01F);
      assertNull(homeFurnitureGroup0.getCatalogId());
      assertEquals(0.0F, homeFurnitureGroup0.getNameAngle(), 0.01F);
      assertNull(homeFurnitureGroup0.getCurrency());
      assertEquals("", homeFurnitureGroup0.getName());
      assertNull(homeFurnitureGroup0.getStaircaseCutOutShape());
      assertNull(homeFurnitureGroup0.getDescription());
      assertEquals(0.0F, homeFurnitureGroup0.getNameXOffset(), 0.01F);
      assertEquals(1.0F, homeFurnitureGroup0.getElevation(), 0.01F);
      assertFalse(homeFurnitureGroup0.isNameVisible());
      assertTrue(homeFurnitureGroup0.isVisible());
      assertTrue(homeFurnitureGroup0.isTexturable());
      assertFalse(homeFurnitureGroup1.equals((Object)homeFurnitureGroup0));
      assertFalse(homeFurnitureGroup1.equals((Object)homeFurnitureGroup2));
      assertFalse(homeFurnitureGroup0.equals((Object)homeFurnitureGroup1));
      assertFalse(homeFurnitureGroup0.equals((Object)homeFurnitureGroup2));
      assertNotSame(homeFurnitureGroup1, homeFurnitureGroup0);
      assertNotSame(homeFurnitureGroup1, homeFurnitureGroup2);
      assertNotSame(homeFurnitureGroup0, homeFurnitureGroup1);
      assertNotSame(homeFurnitureGroup0, homeFurnitureGroup2);
      
      homeFurnitureGroup2.setWidth((-1605.139F));
      assertFalse(linkedList0.contains(homePieceOfFurniture0));
      assertEquals(1, linkedList0.size());
      assertNull(homeFurnitureGroup2.getColor());
      assertFalse(homeFurnitureGroup2.isBackFaceShown());
      assertFalse(homeFurnitureGroup2.isModelMirrored());
      assertTrue(homeFurnitureGroup2.isTexturable());
      assertFalse(homeFurnitureGroup2.isNameVisible());
      assertEquals(0.0F, homeFurnitureGroup2.getAngle(), 0.01F);
      assertFalse(homeFurnitureGroup2.isDoorOrWindow());
      assertEquals(0.0F, homeFurnitureGroup2.getDepth(), 0.01F);
      assertEquals(1.0F, homeFurnitureGroup2.getElevation(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup2.getX(), 0.01F);
      assertEquals(1.0F, homeFurnitureGroup2.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup2.getY(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup2.getNameXOffset(), 0.01F);
      assertNull(homeFurnitureGroup2.getShininess());
      assertTrue(homeFurnitureGroup2.isVisible());
      assertFalse(homeFurnitureGroup2.isMovable());
      assertNull(homeFurnitureGroup2.getCurrency());
      assertEquals(0.0F, homeFurnitureGroup2.getNameAngle(), 0.01F);
      assertNull(homeFurnitureGroup2.getCatalogId());
      assertNull(homeFurnitureGroup2.getStaircaseCutOutShape());
      assertTrue(homeFurnitureGroup2.isResizable());
      assertNull(homeFurnitureGroup2.getDescription());
      assertEquals("", homeFurnitureGroup2.getName());
      assertEquals(2001.0F, homeFurnitureGroup2.getHeight(), 0.01F);
      assertTrue(homeFurnitureGroup2.isDeformable());
      assertEquals((-1605.139F), homeFurnitureGroup2.getWidth(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup2.getNameYOffset(), 0.01F);
      assertFalse(homeFurnitureGroup2.equals((Object)homeFurnitureGroup0));
      assertFalse(homeFurnitureGroup2.equals((Object)homeFurnitureGroup1));
      assertNotSame(homeFurnitureGroup2, homeFurnitureGroup0);
      assertNotSame(homeFurnitureGroup2, homeFurnitureGroup1);
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      LinkedList<HomePieceOfFurniture> linkedList0 = new LinkedList<HomePieceOfFurniture>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      ResourceURLContent resourceURLContent0 = new ResourceURLContent((URL) null, true);
      assertTrue(resourceURLContent0.isMultiPartResource());
      assertNotNull(resourceURLContent0);
      
      LightSource[] lightSourceArray0 = new LightSource[1];
      int int0 = 2007;
      float[][] floatArray0 = new float[4][6];
      BigDecimal bigDecimal0 = new BigDecimal((long) 2007);
      assertEquals((short)2007, bigDecimal0.shortValue());
      assertEquals((byte) (-41), bigDecimal0.byteValue());
      assertNotNull(bigDecimal0);
      
      CatalogLight catalogLight0 = new CatalogLight("9", "DEH", "DEH", resourceURLContent0, resourceURLContent0, resourceURLContent0, 0.3926991F, 2001.0F, 1.0F, (-2885.0872F), true, lightSourceArray0, floatArray0, "DEH", true, bigDecimal0, bigDecimal0);
      assertEquals(1, lightSourceArray0.length);
      assertEquals(4, floatArray0.length);
      assertTrue(resourceURLContent0.isMultiPartResource());
      assertEquals((short)2007, bigDecimal0.shortValue());
      assertEquals((byte) (-41), bigDecimal0.byteValue());
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertEquals(2001.0F, catalogLight0.getDepth(), 0.01F);
      assertEquals((-2885.0872F), catalogLight0.getElevation(), 0.01F);
      assertFalse(catalogLight0.isDoorOrWindow());
      assertNull(catalogLight0.getColor());
      assertFalse(catalogLight0.isModifiable());
      assertEquals("DEH", catalogLight0.getName());
      assertNull(catalogLight0.getCurrency());
      assertEquals(0.3926991F, catalogLight0.getWidth(), 0.01F);
      assertNull(catalogLight0.getInformation());
      assertTrue(catalogLight0.isDeformable());
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertTrue(catalogLight0.isResizable());
      assertEquals("DEH", catalogLight0.getCreator());
      assertTrue(catalogLight0.isMovable());
      assertEquals("9", catalogLight0.getId());
      assertFalse(catalogLight0.isBackFaceShown());
      assertNull(catalogLight0.getCreationDate());
      assertNull(catalogLight0.getGrade());
      assertEquals(1.0F, catalogLight0.getHeight(), 0.01F);
      assertEquals("DEH", catalogLight0.getDescription());
      assertTrue(catalogLight0.isTexturable());
      assertTrue(catalogLight0.isProportional());
      assertNotNull(catalogLight0);
      
      HomeLight homeLight0 = new HomeLight(catalogLight0);
      assertEquals(1, lightSourceArray0.length);
      assertEquals(4, floatArray0.length);
      assertTrue(resourceURLContent0.isMultiPartResource());
      assertEquals((short)2007, bigDecimal0.shortValue());
      assertEquals((byte) (-41), bigDecimal0.byteValue());
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertEquals(2001.0F, catalogLight0.getDepth(), 0.01F);
      assertEquals((-2885.0872F), catalogLight0.getElevation(), 0.01F);
      assertFalse(catalogLight0.isDoorOrWindow());
      assertNull(catalogLight0.getColor());
      assertFalse(catalogLight0.isModifiable());
      assertEquals("DEH", catalogLight0.getName());
      assertNull(catalogLight0.getCurrency());
      assertEquals(0.3926991F, catalogLight0.getWidth(), 0.01F);
      assertNull(catalogLight0.getInformation());
      assertTrue(catalogLight0.isDeformable());
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertTrue(catalogLight0.isResizable());
      assertEquals("DEH", catalogLight0.getCreator());
      assertTrue(catalogLight0.isMovable());
      assertEquals("9", catalogLight0.getId());
      assertFalse(catalogLight0.isBackFaceShown());
      assertNull(catalogLight0.getCreationDate());
      assertNull(catalogLight0.getGrade());
      assertEquals(1.0F, catalogLight0.getHeight(), 0.01F);
      assertEquals("DEH", catalogLight0.getDescription());
      assertTrue(catalogLight0.isTexturable());
      assertTrue(catalogLight0.isProportional());
      assertEquals(1.0F, homeLight0.getHeight(), 0.01F);
      assertEquals((-2885.0872F), homeLight0.getElevation(), 0.01F);
      assertTrue(homeLight0.isMovable());
      assertEquals((-2885.0872F), homeLight0.getGroundElevation(), 0.01F);
      assertNull(homeLight0.getCurrency());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals("9", homeLight0.getCatalogId());
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertTrue(homeLight0.isDeformable());
      assertEquals(2001.0F, homeLight0.getDepth(), 0.01F);
      assertTrue(homeLight0.isVisible());
      assertNull(homeLight0.getShininess());
      assertTrue(homeLight0.isResizable());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertEquals(0.3926991F, homeLight0.getWidth(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      assertEquals(1000.5F, homeLight0.getY(), 0.01F);
      assertEquals("DEH", homeLight0.getName());
      assertTrue(homeLight0.isTexturable());
      assertEquals(0.19634955F, homeLight0.getX(), 0.01F);
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertFalse(homeLight0.isNameVisible());
      assertEquals("DEH", homeLight0.getDescription());
      assertFalse(homeLight0.isBackFaceShown());
      assertNull(homeLight0.getColor());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertFalse(homeLight0.isModelMirrored());
      assertNotNull(homeLight0);
      
      boolean boolean0 = linkedList0.add((HomePieceOfFurniture) homeLight0);
      assertTrue(boolean0);
      assertEquals(1, lightSourceArray0.length);
      assertEquals(4, floatArray0.length);
      assertEquals(1, linkedList0.size());
      assertTrue(resourceURLContent0.isMultiPartResource());
      assertEquals((short)2007, bigDecimal0.shortValue());
      assertEquals((byte) (-41), bigDecimal0.byteValue());
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertEquals(2001.0F, catalogLight0.getDepth(), 0.01F);
      assertEquals((-2885.0872F), catalogLight0.getElevation(), 0.01F);
      assertFalse(catalogLight0.isDoorOrWindow());
      assertNull(catalogLight0.getColor());
      assertFalse(catalogLight0.isModifiable());
      assertEquals("DEH", catalogLight0.getName());
      assertNull(catalogLight0.getCurrency());
      assertEquals(0.3926991F, catalogLight0.getWidth(), 0.01F);
      assertNull(catalogLight0.getInformation());
      assertTrue(catalogLight0.isDeformable());
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertTrue(catalogLight0.isResizable());
      assertEquals("DEH", catalogLight0.getCreator());
      assertTrue(catalogLight0.isMovable());
      assertEquals("9", catalogLight0.getId());
      assertFalse(catalogLight0.isBackFaceShown());
      assertNull(catalogLight0.getCreationDate());
      assertNull(catalogLight0.getGrade());
      assertEquals(1.0F, catalogLight0.getHeight(), 0.01F);
      assertEquals("DEH", catalogLight0.getDescription());
      assertTrue(catalogLight0.isTexturable());
      assertTrue(catalogLight0.isProportional());
      assertEquals(1.0F, homeLight0.getHeight(), 0.01F);
      assertEquals((-2885.0872F), homeLight0.getElevation(), 0.01F);
      assertTrue(homeLight0.isMovable());
      assertEquals((-2885.0872F), homeLight0.getGroundElevation(), 0.01F);
      assertNull(homeLight0.getCurrency());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals("9", homeLight0.getCatalogId());
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertTrue(homeLight0.isDeformable());
      assertEquals(2001.0F, homeLight0.getDepth(), 0.01F);
      assertTrue(homeLight0.isVisible());
      assertNull(homeLight0.getShininess());
      assertTrue(homeLight0.isResizable());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertEquals(0.3926991F, homeLight0.getWidth(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      assertEquals(1000.5F, homeLight0.getY(), 0.01F);
      assertEquals("DEH", homeLight0.getName());
      assertTrue(homeLight0.isTexturable());
      assertEquals(0.19634955F, homeLight0.getX(), 0.01F);
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertFalse(homeLight0.isNameVisible());
      assertEquals("DEH", homeLight0.getDescription());
      assertFalse(homeLight0.isBackFaceShown());
      assertNull(homeLight0.getColor());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertFalse(homeLight0.isModelMirrored());
      
      String string0 = "";
      HomeFurnitureGroup homeFurnitureGroup0 = new HomeFurnitureGroup(linkedList0, "");
      assertEquals(1, linkedList0.size());
      assertEquals(0.0F, homeFurnitureGroup0.getNameYOffset(), 0.01F);
      assertEquals(2885.0872F, homeFurnitureGroup0.getHeight(), 0.01F);
      assertFalse(homeFurnitureGroup0.isBackFaceShown());
      assertFalse(homeFurnitureGroup0.isNameVisible());
      assertNull(homeFurnitureGroup0.getCatalogId());
      assertNull(homeFurnitureGroup0.getShininess());
      assertTrue(homeFurnitureGroup0.isTexturable());
      assertEquals(0.0F, homeFurnitureGroup0.getNameAngle(), 0.01F);
      assertEquals(2001.0F, homeFurnitureGroup0.getDepth(), 0.01F);
      assertTrue(homeFurnitureGroup0.isVisible());
      assertEquals(0.3926991F, homeFurnitureGroup0.getWidth(), 0.01F);
      assertTrue(homeFurnitureGroup0.isResizable());
      assertEquals(0.0F, homeFurnitureGroup0.getNameXOffset(), 0.01F);
      assertNull(homeFurnitureGroup0.getDescription());
      assertNull(homeFurnitureGroup0.getStaircaseCutOutShape());
      assertEquals("", homeFurnitureGroup0.getName());
      assertTrue(homeFurnitureGroup0.isMovable());
      assertEquals(1000.5F, homeFurnitureGroup0.getY(), 0.01F);
      assertFalse(homeFurnitureGroup0.isDoorOrWindow());
      assertEquals(0.0F, homeFurnitureGroup0.getAngle(), 0.01F);
      assertEquals((-2885.0872F), homeFurnitureGroup0.getGroundElevation(), 0.01F);
      assertFalse(homeFurnitureGroup0.isModelMirrored());
      assertNull(homeFurnitureGroup0.getCurrency());
      assertNull(homeFurnitureGroup0.getColor());
      assertEquals((-2885.0872F), homeFurnitureGroup0.getElevation(), 0.01F);
      assertTrue(homeFurnitureGroup0.isDeformable());
      assertEquals(0.19634955F, homeFurnitureGroup0.getX(), 0.01F);
      assertNotNull(homeFurnitureGroup0);
      
      HomeLight homeLight1 = (HomeLight)linkedList0.pop();
      assertEquals(0, linkedList0.size());
      assertEquals(1.0F, homeLight1.getHeight(), 0.01F);
      assertEquals((-2885.0872F), homeLight1.getGroundElevation(), 0.01F);
      assertEquals(2001.0F, homeLight1.getDepth(), 0.01F);
      assertNull(homeLight1.getCurrency());
      assertEquals("9", homeLight1.getCatalogId());
      assertEquals(0.5F, homeLight1.getPower(), 0.01F);
      assertFalse(homeLight1.isNameVisible());
      assertEquals(0.19634955F, homeLight1.getX(), 0.01F);
      assertNull(homeLight1.getColor());
      assertEquals(0.0F, homeLight1.getNameYOffset(), 0.01F);
      assertEquals("DEH", homeLight1.getDescription());
      assertFalse(homeLight1.isModelMirrored());
      assertFalse(homeLight1.isBackFaceShown());
      assertEquals((-2885.0872F), homeLight1.getElevation(), 0.01F);
      assertEquals(0.0F, homeLight1.getAngle(), 0.01F);
      assertFalse(homeLight1.isDoorOrWindow());
      assertTrue(homeLight1.isTexturable());
      assertEquals(0.3926991F, homeLight1.getWidth(), 0.01F);
      assertEquals(1000.5F, homeLight1.getY(), 0.01F);
      assertEquals("DEH", homeLight1.getName());
      assertEquals(0.0F, homeLight1.getNameXOffset(), 0.01F);
      assertTrue(homeLight1.isResizable());
      assertTrue(homeLight1.isMovable());
      assertTrue(homeLight1.isVisible());
      assertTrue(homeLight1.isDeformable());
      assertNull(homeLight1.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight1.getNameAngle(), 0.01F);
      assertNull(homeLight1.getShininess());
      assertNotNull(homeLight1);
      assertSame(homeLight1, homeLight0);
      
      HomeFurnitureGroup homeFurnitureGroup1 = homeFurnitureGroup0.clone();
      assertEquals(0, linkedList0.size());
      assertEquals(0.0F, homeFurnitureGroup0.getNameYOffset(), 0.01F);
      assertEquals(2885.0872F, homeFurnitureGroup0.getHeight(), 0.01F);
      assertFalse(homeFurnitureGroup0.isBackFaceShown());
      assertFalse(homeFurnitureGroup0.isNameVisible());
      assertNull(homeFurnitureGroup0.getCatalogId());
      assertNull(homeFurnitureGroup0.getShininess());
      assertTrue(homeFurnitureGroup0.isTexturable());
      assertEquals(0.0F, homeFurnitureGroup0.getNameAngle(), 0.01F);
      assertEquals(2001.0F, homeFurnitureGroup0.getDepth(), 0.01F);
      assertTrue(homeFurnitureGroup0.isVisible());
      assertEquals(0.3926991F, homeFurnitureGroup0.getWidth(), 0.01F);
      assertTrue(homeFurnitureGroup0.isResizable());
      assertEquals(0.0F, homeFurnitureGroup0.getNameXOffset(), 0.01F);
      assertNull(homeFurnitureGroup0.getDescription());
      assertNull(homeFurnitureGroup0.getStaircaseCutOutShape());
      assertEquals("", homeFurnitureGroup0.getName());
      assertTrue(homeFurnitureGroup0.isMovable());
      assertEquals(1000.5F, homeFurnitureGroup0.getY(), 0.01F);
      assertFalse(homeFurnitureGroup0.isDoorOrWindow());
      assertEquals(0.0F, homeFurnitureGroup0.getAngle(), 0.01F);
      assertEquals((-2885.0872F), homeFurnitureGroup0.getGroundElevation(), 0.01F);
      assertFalse(homeFurnitureGroup0.isModelMirrored());
      assertNull(homeFurnitureGroup0.getCurrency());
      assertNull(homeFurnitureGroup0.getColor());
      assertEquals((-2885.0872F), homeFurnitureGroup0.getElevation(), 0.01F);
      assertTrue(homeFurnitureGroup0.isDeformable());
      assertEquals(0.19634955F, homeFurnitureGroup0.getX(), 0.01F);
      assertNull(homeFurnitureGroup1.getShininess());
      assertNull(homeFurnitureGroup1.getCatalogId());
      assertEquals(0.0F, homeFurnitureGroup1.getNameYOffset(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup1.getNameXOffset(), 0.01F);
      assertTrue(homeFurnitureGroup1.isResizable());
      assertTrue(homeFurnitureGroup1.isMovable());
      assertEquals(2885.0872F, homeFurnitureGroup1.getHeight(), 0.01F);
      assertEquals(0.3926991F, homeFurnitureGroup1.getWidth(), 0.01F);
      assertEquals(2001.0F, homeFurnitureGroup1.getDepth(), 0.01F);
      assertTrue(homeFurnitureGroup1.isVisible());
      assertEquals(0.0F, homeFurnitureGroup1.getNameAngle(), 0.01F);
      assertNull(homeFurnitureGroup1.getStaircaseCutOutShape());
      assertFalse(homeFurnitureGroup1.isDoorOrWindow());
      assertFalse(homeFurnitureGroup1.isModelMirrored());
      assertEquals(1000.5F, homeFurnitureGroup1.getY(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup1.getAngle(), 0.01F);
      assertNull(homeFurnitureGroup1.getColor());
      assertTrue(homeFurnitureGroup1.isTexturable());
      assertEquals(0.19634955F, homeFurnitureGroup1.getX(), 0.01F);
      assertFalse(homeFurnitureGroup1.isNameVisible());
      assertNull(homeFurnitureGroup1.getDescription());
      assertFalse(homeFurnitureGroup1.isBackFaceShown());
      assertEquals((-2885.0872F), homeFurnitureGroup1.getElevation(), 0.01F);
      assertTrue(homeFurnitureGroup1.isDeformable());
      assertEquals((-2885.0872F), homeFurnitureGroup1.getGroundElevation(), 0.01F);
      assertEquals("", homeFurnitureGroup1.getName());
      assertNull(homeFurnitureGroup1.getCurrency());
      assertFalse(homeFurnitureGroup1.equals((Object)homeFurnitureGroup0));
      assertNotNull(homeFurnitureGroup1);
      assertNotSame(homeFurnitureGroup0, homeFurnitureGroup1);
      assertNotSame(homeFurnitureGroup1, homeFurnitureGroup0);
      
      linkedList0.addFirst(homeFurnitureGroup0);
      assertEquals(1, linkedList0.size());
      assertEquals(0.0F, homeFurnitureGroup0.getNameYOffset(), 0.01F);
      assertEquals(2885.0872F, homeFurnitureGroup0.getHeight(), 0.01F);
      assertFalse(homeFurnitureGroup0.isBackFaceShown());
      assertFalse(homeFurnitureGroup0.isNameVisible());
      assertNull(homeFurnitureGroup0.getCatalogId());
      assertNull(homeFurnitureGroup0.getShininess());
      assertTrue(homeFurnitureGroup0.isTexturable());
      assertEquals(0.0F, homeFurnitureGroup0.getNameAngle(), 0.01F);
      assertEquals(2001.0F, homeFurnitureGroup0.getDepth(), 0.01F);
      assertTrue(homeFurnitureGroup0.isVisible());
      assertEquals(0.3926991F, homeFurnitureGroup0.getWidth(), 0.01F);
      assertTrue(homeFurnitureGroup0.isResizable());
      assertEquals(0.0F, homeFurnitureGroup0.getNameXOffset(), 0.01F);
      assertNull(homeFurnitureGroup0.getDescription());
      assertNull(homeFurnitureGroup0.getStaircaseCutOutShape());
      assertEquals("", homeFurnitureGroup0.getName());
      assertTrue(homeFurnitureGroup0.isMovable());
      assertEquals(1000.5F, homeFurnitureGroup0.getY(), 0.01F);
      assertFalse(homeFurnitureGroup0.isDoorOrWindow());
      assertEquals(0.0F, homeFurnitureGroup0.getAngle(), 0.01F);
      assertEquals((-2885.0872F), homeFurnitureGroup0.getGroundElevation(), 0.01F);
      assertFalse(homeFurnitureGroup0.isModelMirrored());
      assertNull(homeFurnitureGroup0.getCurrency());
      assertNull(homeFurnitureGroup0.getColor());
      assertEquals((-2885.0872F), homeFurnitureGroup0.getElevation(), 0.01F);
      assertTrue(homeFurnitureGroup0.isDeformable());
      assertEquals(0.19634955F, homeFurnitureGroup0.getX(), 0.01F);
      assertFalse(homeFurnitureGroup0.equals((Object)homeFurnitureGroup1));
      assertNotSame(homeFurnitureGroup0, homeFurnitureGroup1);
      
      // Undeclared exception!
      try { 
        homeFurnitureGroup0.setWidth(int0);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
      }
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      LinkedList<HomePieceOfFurniture> linkedList0 = new LinkedList<HomePieceOfFurniture>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      ResourceURLContent resourceURLContent0 = new ResourceURLContent((URL) null, true);
      assertTrue(resourceURLContent0.isMultiPartResource());
      assertNotNull(resourceURLContent0);
      
      LightSource[] lightSourceArray0 = new LightSource[1];
      float[][] floatArray0 = new float[4][6];
      BigDecimal bigDecimal0 = new BigDecimal((long) 2001);
      assertEquals((byte) (-47), bigDecimal0.byteValue());
      assertEquals((short)2001, bigDecimal0.shortValue());
      assertNotNull(bigDecimal0);
      
      CatalogLight catalogLight0 = new CatalogLight("9", "DEPTH", "DEPTH", resourceURLContent0, resourceURLContent0, resourceURLContent0, 0.3926991F, 2001.0F, 1.0F, (-2885.0872F), true, lightSourceArray0, floatArray0, "DEPTH", true, bigDecimal0, bigDecimal0);
      assertEquals(1, lightSourceArray0.length);
      assertEquals(4, floatArray0.length);
      assertTrue(resourceURLContent0.isMultiPartResource());
      assertEquals((byte) (-47), bigDecimal0.byteValue());
      assertEquals((short)2001, bigDecimal0.shortValue());
      assertNull(catalogLight0.getGrade());
      assertEquals(1.0F, catalogLight0.getHeight(), 0.01F);
      assertTrue(catalogLight0.isTexturable());
      assertEquals("DEPTH", catalogLight0.getName());
      assertTrue(catalogLight0.isProportional());
      assertNull(catalogLight0.getCurrency());
      assertTrue(catalogLight0.isResizable());
      assertEquals("DEPTH", catalogLight0.getCreator());
      assertEquals("DEPTH", catalogLight0.getDescription());
      assertFalse(catalogLight0.isModifiable());
      assertNull(catalogLight0.getCreationDate());
      assertEquals(0.3926991F, catalogLight0.getWidth(), 0.01F);
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertNull(catalogLight0.getInformation());
      assertEquals(2001.0F, catalogLight0.getDepth(), 0.01F);
      assertEquals((-2885.0872F), catalogLight0.getElevation(), 0.01F);
      assertTrue(catalogLight0.isDeformable());
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertFalse(catalogLight0.isDoorOrWindow());
      assertTrue(catalogLight0.isMovable());
      assertEquals("9", catalogLight0.getId());
      assertNull(catalogLight0.getColor());
      assertFalse(catalogLight0.isBackFaceShown());
      assertNotNull(catalogLight0);
      
      HomeLight homeLight0 = new HomeLight(catalogLight0);
      assertEquals(1, lightSourceArray0.length);
      assertEquals(4, floatArray0.length);
      assertTrue(resourceURLContent0.isMultiPartResource());
      assertEquals((byte) (-47), bigDecimal0.byteValue());
      assertEquals((short)2001, bigDecimal0.shortValue());
      assertNull(catalogLight0.getGrade());
      assertEquals(1.0F, catalogLight0.getHeight(), 0.01F);
      assertTrue(catalogLight0.isTexturable());
      assertEquals("DEPTH", catalogLight0.getName());
      assertTrue(catalogLight0.isProportional());
      assertNull(catalogLight0.getCurrency());
      assertTrue(catalogLight0.isResizable());
      assertEquals("DEPTH", catalogLight0.getCreator());
      assertEquals("DEPTH", catalogLight0.getDescription());
      assertFalse(catalogLight0.isModifiable());
      assertNull(catalogLight0.getCreationDate());
      assertEquals(0.3926991F, catalogLight0.getWidth(), 0.01F);
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertNull(catalogLight0.getInformation());
      assertEquals(2001.0F, catalogLight0.getDepth(), 0.01F);
      assertEquals((-2885.0872F), catalogLight0.getElevation(), 0.01F);
      assertTrue(catalogLight0.isDeformable());
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertFalse(catalogLight0.isDoorOrWindow());
      assertTrue(catalogLight0.isMovable());
      assertEquals("9", catalogLight0.getId());
      assertNull(catalogLight0.getColor());
      assertFalse(catalogLight0.isBackFaceShown());
      assertTrue(homeLight0.isVisible());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertEquals((-2885.0872F), homeLight0.getElevation(), 0.01F);
      assertTrue(homeLight0.isDeformable());
      assertTrue(homeLight0.isResizable());
      assertTrue(homeLight0.isMovable());
      assertNull(homeLight0.getColor());
      assertNull(homeLight0.getShininess());
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals(0.3926991F, homeLight0.getWidth(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertEquals(1.0F, homeLight0.getHeight(), 0.01F);
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertNull(homeLight0.getCurrency());
      assertEquals("DEPTH", homeLight0.getDescription());
      assertEquals(0.19634955F, homeLight0.getX(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertFalse(homeLight0.isModelMirrored());
      assertEquals(2001.0F, homeLight0.getDepth(), 0.01F);
      assertEquals((-2885.0872F), homeLight0.getGroundElevation(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      assertFalse(homeLight0.isBackFaceShown());
      assertFalse(homeLight0.isNameVisible());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertEquals("DEPTH", homeLight0.getName());
      assertEquals("9", homeLight0.getCatalogId());
      assertTrue(homeLight0.isTexturable());
      assertEquals(1000.5F, homeLight0.getY(), 0.01F);
      assertNotNull(homeLight0);
      
      homeLight0.setNameVisible(false);
      assertEquals(1, lightSourceArray0.length);
      assertEquals(4, floatArray0.length);
      assertTrue(resourceURLContent0.isMultiPartResource());
      assertEquals((byte) (-47), bigDecimal0.byteValue());
      assertEquals((short)2001, bigDecimal0.shortValue());
      assertNull(catalogLight0.getGrade());
      assertEquals(1.0F, catalogLight0.getHeight(), 0.01F);
      assertTrue(catalogLight0.isTexturable());
      assertEquals("DEPTH", catalogLight0.getName());
      assertTrue(catalogLight0.isProportional());
      assertNull(catalogLight0.getCurrency());
      assertTrue(catalogLight0.isResizable());
      assertEquals("DEPTH", catalogLight0.getCreator());
      assertEquals("DEPTH", catalogLight0.getDescription());
      assertFalse(catalogLight0.isModifiable());
      assertNull(catalogLight0.getCreationDate());
      assertEquals(0.3926991F, catalogLight0.getWidth(), 0.01F);
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertNull(catalogLight0.getInformation());
      assertEquals(2001.0F, catalogLight0.getDepth(), 0.01F);
      assertEquals((-2885.0872F), catalogLight0.getElevation(), 0.01F);
      assertTrue(catalogLight0.isDeformable());
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertFalse(catalogLight0.isDoorOrWindow());
      assertTrue(catalogLight0.isMovable());
      assertEquals("9", catalogLight0.getId());
      assertNull(catalogLight0.getColor());
      assertFalse(catalogLight0.isBackFaceShown());
      assertTrue(homeLight0.isVisible());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertEquals((-2885.0872F), homeLight0.getElevation(), 0.01F);
      assertTrue(homeLight0.isDeformable());
      assertTrue(homeLight0.isResizable());
      assertTrue(homeLight0.isMovable());
      assertNull(homeLight0.getColor());
      assertNull(homeLight0.getShininess());
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals(0.3926991F, homeLight0.getWidth(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertEquals(1.0F, homeLight0.getHeight(), 0.01F);
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertNull(homeLight0.getCurrency());
      assertEquals("DEPTH", homeLight0.getDescription());
      assertEquals(0.19634955F, homeLight0.getX(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertFalse(homeLight0.isModelMirrored());
      assertEquals(2001.0F, homeLight0.getDepth(), 0.01F);
      assertEquals((-2885.0872F), homeLight0.getGroundElevation(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      assertFalse(homeLight0.isBackFaceShown());
      assertFalse(homeLight0.isNameVisible());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertEquals("DEPTH", homeLight0.getName());
      assertEquals("9", homeLight0.getCatalogId());
      assertTrue(homeLight0.isTexturable());
      assertEquals(1000.5F, homeLight0.getY(), 0.01F);
      
      boolean boolean0 = linkedList0.add((HomePieceOfFurniture) homeLight0);
      assertTrue(boolean0);
      assertEquals(1, lightSourceArray0.length);
      assertEquals(4, floatArray0.length);
      assertEquals(1, linkedList0.size());
      assertTrue(resourceURLContent0.isMultiPartResource());
      assertEquals((byte) (-47), bigDecimal0.byteValue());
      assertEquals((short)2001, bigDecimal0.shortValue());
      assertNull(catalogLight0.getGrade());
      assertEquals(1.0F, catalogLight0.getHeight(), 0.01F);
      assertTrue(catalogLight0.isTexturable());
      assertEquals("DEPTH", catalogLight0.getName());
      assertTrue(catalogLight0.isProportional());
      assertNull(catalogLight0.getCurrency());
      assertTrue(catalogLight0.isResizable());
      assertEquals("DEPTH", catalogLight0.getCreator());
      assertEquals("DEPTH", catalogLight0.getDescription());
      assertFalse(catalogLight0.isModifiable());
      assertNull(catalogLight0.getCreationDate());
      assertEquals(0.3926991F, catalogLight0.getWidth(), 0.01F);
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertNull(catalogLight0.getInformation());
      assertEquals(2001.0F, catalogLight0.getDepth(), 0.01F);
      assertEquals((-2885.0872F), catalogLight0.getElevation(), 0.01F);
      assertTrue(catalogLight0.isDeformable());
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertFalse(catalogLight0.isDoorOrWindow());
      assertTrue(catalogLight0.isMovable());
      assertEquals("9", catalogLight0.getId());
      assertNull(catalogLight0.getColor());
      assertFalse(catalogLight0.isBackFaceShown());
      assertTrue(homeLight0.isVisible());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertEquals((-2885.0872F), homeLight0.getElevation(), 0.01F);
      assertTrue(homeLight0.isDeformable());
      assertTrue(homeLight0.isResizable());
      assertTrue(homeLight0.isMovable());
      assertNull(homeLight0.getColor());
      assertNull(homeLight0.getShininess());
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals(0.3926991F, homeLight0.getWidth(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertEquals(1.0F, homeLight0.getHeight(), 0.01F);
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertNull(homeLight0.getCurrency());
      assertEquals("DEPTH", homeLight0.getDescription());
      assertEquals(0.19634955F, homeLight0.getX(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertFalse(homeLight0.isModelMirrored());
      assertEquals(2001.0F, homeLight0.getDepth(), 0.01F);
      assertEquals((-2885.0872F), homeLight0.getGroundElevation(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      assertFalse(homeLight0.isBackFaceShown());
      assertFalse(homeLight0.isNameVisible());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertEquals("DEPTH", homeLight0.getName());
      assertEquals("9", homeLight0.getCatalogId());
      assertTrue(homeLight0.isTexturable());
      assertEquals(1000.5F, homeLight0.getY(), 0.01F);
      
      HomeFurnitureGroup homeFurnitureGroup0 = new HomeFurnitureGroup(linkedList0, "l");
      assertEquals(1, linkedList0.size());
      assertNull(homeFurnitureGroup0.getDescription());
      assertTrue(homeFurnitureGroup0.isResizable());
      assertEquals(0.0F, homeFurnitureGroup0.getNameXOffset(), 0.01F);
      assertEquals(0.19634955F, homeFurnitureGroup0.getX(), 0.01F);
      assertTrue(homeFurnitureGroup0.isMovable());
      assertEquals(0.3926991F, homeFurnitureGroup0.getWidth(), 0.01F);
      assertEquals(2001.0F, homeFurnitureGroup0.getDepth(), 0.01F);
      assertEquals(1000.5F, homeFurnitureGroup0.getY(), 0.01F);
      assertEquals("l", homeFurnitureGroup0.getName());
      assertNull(homeFurnitureGroup0.getShininess());
      assertNull(homeFurnitureGroup0.getCatalogId());
      assertEquals(0.0F, homeFurnitureGroup0.getNameAngle(), 0.01F);
      assertEquals(2885.0872F, homeFurnitureGroup0.getHeight(), 0.01F);
      assertNull(homeFurnitureGroup0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeFurnitureGroup0.getNameYOffset(), 0.01F);
      assertTrue(homeFurnitureGroup0.isVisible());
      assertNull(homeFurnitureGroup0.getColor());
      assertTrue(homeFurnitureGroup0.isTexturable());
      assertEquals((-2885.0872F), homeFurnitureGroup0.getGroundElevation(), 0.01F);
      assertFalse(homeFurnitureGroup0.isModelMirrored());
      assertFalse(homeFurnitureGroup0.isDoorOrWindow());
      assertEquals(0.0F, homeFurnitureGroup0.getAngle(), 0.01F);
      assertFalse(homeFurnitureGroup0.isBackFaceShown());
      assertEquals((-2885.0872F), homeFurnitureGroup0.getElevation(), 0.01F);
      assertTrue(homeFurnitureGroup0.isDeformable());
      assertNull(homeFurnitureGroup0.getCurrency());
      assertFalse(homeFurnitureGroup0.isNameVisible());
      assertNotNull(homeFurnitureGroup0);
      
      homeFurnitureGroup0.setDepth(0.3926991F);
      assertEquals(1, linkedList0.size());
      assertNull(homeFurnitureGroup0.getDescription());
      assertTrue(homeFurnitureGroup0.isResizable());
      assertEquals(0.0F, homeFurnitureGroup0.getNameXOffset(), 0.01F);
      assertEquals(0.19634955F, homeFurnitureGroup0.getX(), 0.01F);
      assertTrue(homeFurnitureGroup0.isMovable());
      assertEquals(0.3926991F, homeFurnitureGroup0.getWidth(), 0.01F);
      assertEquals(1000.5F, homeFurnitureGroup0.getY(), 0.01F);
      assertEquals("l", homeFurnitureGroup0.getName());
      assertNull(homeFurnitureGroup0.getShininess());
      assertNull(homeFurnitureGroup0.getCatalogId());
      assertEquals(0.0F, homeFurnitureGroup0.getNameAngle(), 0.01F);
      assertEquals(2885.0872F, homeFurnitureGroup0.getHeight(), 0.01F);
      assertNull(homeFurnitureGroup0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeFurnitureGroup0.getNameYOffset(), 0.01F);
      assertTrue(homeFurnitureGroup0.isVisible());
      assertNull(homeFurnitureGroup0.getColor());
      assertTrue(homeFurnitureGroup0.isTexturable());
      assertEquals((-2885.0872F), homeFurnitureGroup0.getGroundElevation(), 0.01F);
      assertEquals(0.3926991F, homeFurnitureGroup0.getDepth(), 0.01F);
      assertFalse(homeFurnitureGroup0.isModelMirrored());
      assertFalse(homeFurnitureGroup0.isDoorOrWindow());
      assertEquals(0.0F, homeFurnitureGroup0.getAngle(), 0.01F);
      assertFalse(homeFurnitureGroup0.isBackFaceShown());
      assertEquals((-2885.0872F), homeFurnitureGroup0.getElevation(), 0.01F);
      assertTrue(homeFurnitureGroup0.isDeformable());
      assertNull(homeFurnitureGroup0.getCurrency());
      assertFalse(homeFurnitureGroup0.isNameVisible());
      
      BigDecimal bigDecimal1 = homeFurnitureGroup0.getValueAddedTax();
      assertEquals(1, linkedList0.size());
      assertNull(homeFurnitureGroup0.getDescription());
      assertTrue(homeFurnitureGroup0.isResizable());
      assertEquals(0.0F, homeFurnitureGroup0.getNameXOffset(), 0.01F);
      assertEquals(0.19634955F, homeFurnitureGroup0.getX(), 0.01F);
      assertTrue(homeFurnitureGroup0.isMovable());
      assertEquals(0.3926991F, homeFurnitureGroup0.getWidth(), 0.01F);
      assertEquals(1000.5F, homeFurnitureGroup0.getY(), 0.01F);
      assertEquals("l", homeFurnitureGroup0.getName());
      assertNull(homeFurnitureGroup0.getShininess());
      assertNull(homeFurnitureGroup0.getCatalogId());
      assertEquals(0.0F, homeFurnitureGroup0.getNameAngle(), 0.01F);
      assertEquals(2885.0872F, homeFurnitureGroup0.getHeight(), 0.01F);
      assertNull(homeFurnitureGroup0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeFurnitureGroup0.getNameYOffset(), 0.01F);
      assertTrue(homeFurnitureGroup0.isVisible());
      assertNull(homeFurnitureGroup0.getColor());
      assertTrue(homeFurnitureGroup0.isTexturable());
      assertEquals((-2885.0872F), homeFurnitureGroup0.getGroundElevation(), 0.01F);
      assertEquals(0.3926991F, homeFurnitureGroup0.getDepth(), 0.01F);
      assertFalse(homeFurnitureGroup0.isModelMirrored());
      assertFalse(homeFurnitureGroup0.isDoorOrWindow());
      assertEquals(0.0F, homeFurnitureGroup0.getAngle(), 0.01F);
      assertFalse(homeFurnitureGroup0.isBackFaceShown());
      assertEquals((-2885.0872F), homeFurnitureGroup0.getElevation(), 0.01F);
      assertTrue(homeFurnitureGroup0.isDeformable());
      assertNull(homeFurnitureGroup0.getCurrency());
      assertFalse(homeFurnitureGroup0.isNameVisible());
      assertEquals((byte) (-95), bigDecimal1.byteValue());
      assertEquals((short)6305, bigDecimal1.shortValue());
      assertFalse(bigDecimal1.equals((Object)bigDecimal0));
      assertNotNull(bigDecimal1);
      assertNotSame(bigDecimal1, bigDecimal0);
      
      float float0 = homeFurnitureGroup0.getDepth();
      assertEquals(0.3926991F, float0, 0.01F);
      assertEquals(1, linkedList0.size());
      assertNull(homeFurnitureGroup0.getDescription());
      assertTrue(homeFurnitureGroup0.isResizable());
      assertEquals(0.0F, homeFurnitureGroup0.getNameXOffset(), 0.01F);
      assertEquals(0.19634955F, homeFurnitureGroup0.getX(), 0.01F);
      assertTrue(homeFurnitureGroup0.isMovable());
      assertEquals(0.3926991F, homeFurnitureGroup0.getWidth(), 0.01F);
      assertEquals(1000.5F, homeFurnitureGroup0.getY(), 0.01F);
      assertEquals("l", homeFurnitureGroup0.getName());
      assertNull(homeFurnitureGroup0.getShininess());
      assertNull(homeFurnitureGroup0.getCatalogId());
      assertEquals(0.0F, homeFurnitureGroup0.getNameAngle(), 0.01F);
      assertEquals(2885.0872F, homeFurnitureGroup0.getHeight(), 0.01F);
      assertNull(homeFurnitureGroup0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeFurnitureGroup0.getNameYOffset(), 0.01F);
      assertTrue(homeFurnitureGroup0.isVisible());
      assertNull(homeFurnitureGroup0.getColor());
      assertTrue(homeFurnitureGroup0.isTexturable());
      assertEquals((-2885.0872F), homeFurnitureGroup0.getGroundElevation(), 0.01F);
      assertEquals(0.3926991F, homeFurnitureGroup0.getDepth(), 0.01F);
      assertFalse(homeFurnitureGroup0.isModelMirrored());
      assertFalse(homeFurnitureGroup0.isDoorOrWindow());
      assertEquals(0.0F, homeFurnitureGroup0.getAngle(), 0.01F);
      assertFalse(homeFurnitureGroup0.isBackFaceShown());
      assertEquals((-2885.0872F), homeFurnitureGroup0.getElevation(), 0.01F);
      assertTrue(homeFurnitureGroup0.isDeformable());
      assertNull(homeFurnitureGroup0.getCurrency());
      assertFalse(homeFurnitureGroup0.isNameVisible());
      
      homeFurnitureGroup0.setWidth(4.6027882E-35F);
      assertEquals(1, linkedList0.size());
      assertNull(homeFurnitureGroup0.getDescription());
      assertTrue(homeFurnitureGroup0.isResizable());
      assertEquals(0.0F, homeFurnitureGroup0.getNameXOffset(), 0.01F);
      assertEquals(0.19634955F, homeFurnitureGroup0.getX(), 0.01F);
      assertTrue(homeFurnitureGroup0.isMovable());
      assertEquals(4.6027882E-35F, homeFurnitureGroup0.getWidth(), 0.01F);
      assertEquals(1000.5F, homeFurnitureGroup0.getY(), 0.01F);
      assertEquals("l", homeFurnitureGroup0.getName());
      assertNull(homeFurnitureGroup0.getShininess());
      assertNull(homeFurnitureGroup0.getCatalogId());
      assertEquals(0.0F, homeFurnitureGroup0.getNameAngle(), 0.01F);
      assertEquals(2885.0872F, homeFurnitureGroup0.getHeight(), 0.01F);
      assertNull(homeFurnitureGroup0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeFurnitureGroup0.getNameYOffset(), 0.01F);
      assertTrue(homeFurnitureGroup0.isVisible());
      assertNull(homeFurnitureGroup0.getColor());
      assertTrue(homeFurnitureGroup0.isTexturable());
      assertEquals((-2885.0872F), homeFurnitureGroup0.getGroundElevation(), 0.01F);
      assertEquals(0.3926991F, homeFurnitureGroup0.getDepth(), 0.01F);
      assertFalse(homeFurnitureGroup0.isModelMirrored());
      assertFalse(homeFurnitureGroup0.isDoorOrWindow());
      assertEquals(0.0F, homeFurnitureGroup0.getAngle(), 0.01F);
      assertFalse(homeFurnitureGroup0.isBackFaceShown());
      assertEquals((-2885.0872F), homeFurnitureGroup0.getElevation(), 0.01F);
      assertTrue(homeFurnitureGroup0.isDeformable());
      assertNull(homeFurnitureGroup0.getCurrency());
      assertFalse(homeFurnitureGroup0.isNameVisible());
      
      boolean boolean1 = homeFurnitureGroup0.isBackFaceShown();
      assertFalse(boolean1);
      assertEquals(1, linkedList0.size());
      assertNull(homeFurnitureGroup0.getDescription());
      assertTrue(homeFurnitureGroup0.isResizable());
      assertEquals(0.0F, homeFurnitureGroup0.getNameXOffset(), 0.01F);
      assertEquals(0.19634955F, homeFurnitureGroup0.getX(), 0.01F);
      assertTrue(homeFurnitureGroup0.isMovable());
      assertEquals(4.6027882E-35F, homeFurnitureGroup0.getWidth(), 0.01F);
      assertEquals(1000.5F, homeFurnitureGroup0.getY(), 0.01F);
      assertEquals("l", homeFurnitureGroup0.getName());
      assertNull(homeFurnitureGroup0.getShininess());
      assertNull(homeFurnitureGroup0.getCatalogId());
      assertEquals(0.0F, homeFurnitureGroup0.getNameAngle(), 0.01F);
      assertEquals(2885.0872F, homeFurnitureGroup0.getHeight(), 0.01F);
      assertNull(homeFurnitureGroup0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeFurnitureGroup0.getNameYOffset(), 0.01F);
      assertTrue(homeFurnitureGroup0.isVisible());
      assertNull(homeFurnitureGroup0.getColor());
      assertTrue(homeFurnitureGroup0.isTexturable());
      assertEquals((-2885.0872F), homeFurnitureGroup0.getGroundElevation(), 0.01F);
      assertEquals(0.3926991F, homeFurnitureGroup0.getDepth(), 0.01F);
      assertFalse(homeFurnitureGroup0.isModelMirrored());
      assertFalse(homeFurnitureGroup0.isDoorOrWindow());
      assertEquals(0.0F, homeFurnitureGroup0.getAngle(), 0.01F);
      assertFalse(homeFurnitureGroup0.isBackFaceShown());
      assertEquals((-2885.0872F), homeFurnitureGroup0.getElevation(), 0.01F);
      assertTrue(homeFurnitureGroup0.isDeformable());
      assertNull(homeFurnitureGroup0.getCurrency());
      assertFalse(homeFurnitureGroup0.isNameVisible());
      assertFalse(boolean1 == boolean0);
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      LinkedList<HomePieceOfFurniture> linkedList0 = new LinkedList<HomePieceOfFurniture>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      ResourceURLContent resourceURLContent0 = new ResourceURLContent((URL) null, true);
      assertTrue(resourceURLContent0.isMultiPartResource());
      assertNotNull(resourceURLContent0);
      
      LightSource[] lightSourceArray0 = new LightSource[1];
      float[][] floatArray0 = new float[4][6];
      BigDecimal bigDecimal0 = new BigDecimal((long) 2001);
      assertEquals((byte) (-47), bigDecimal0.byteValue());
      assertEquals((short)2001, bigDecimal0.shortValue());
      assertNotNull(bigDecimal0);
      
      long long0 = (-1L);
      BigDecimal bigDecimal1 = new BigDecimal((-1L));
      assertEquals((byte) (-1), bigDecimal1.byteValue());
      assertEquals((short) (-1), bigDecimal1.shortValue());
      assertFalse(bigDecimal1.equals((Object)bigDecimal0));
      assertNotNull(bigDecimal1);
      
      BigDecimal bigDecimal2 = BigDecimal.valueOf((-1L), 2001);
      assertEquals((byte)0, bigDecimal2.byteValue());
      assertEquals((short)0, bigDecimal2.shortValue());
      assertFalse(bigDecimal2.equals((Object)bigDecimal0));
      assertFalse(bigDecimal2.equals((Object)bigDecimal1));
      assertNotNull(bigDecimal2);
      assertNotSame(bigDecimal2, bigDecimal0);
      assertNotSame(bigDecimal2, bigDecimal1);
      
      CatalogLight catalogLight0 = new CatalogLight("_])7g^)gy+P0XH3", "_])7g^)gy+P0XH3", "/<gAhL`8>", resourceURLContent0, resourceURLContent0, resourceURLContent0, 1331.01F, (-31.701214F), (-1L), (-31.701214F), false, lightSourceArray0, floatArray0, "DEPTH", true, bigDecimal2, bigDecimal1);
      assertEquals(1, lightSourceArray0.length);
      assertEquals(4, floatArray0.length);
      assertTrue(resourceURLContent0.isMultiPartResource());
      assertEquals((byte) (-1), bigDecimal1.byteValue());
      assertEquals((short) (-1), bigDecimal1.shortValue());
      assertEquals((byte)0, bigDecimal2.byteValue());
      assertEquals((short)0, bigDecimal2.shortValue());
      assertFalse(catalogLight0.isMovable());
      assertFalse(catalogLight0.isBackFaceShown());
      assertNull(catalogLight0.getCreationDate());
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertEquals((-31.701214F), catalogLight0.getElevation(), 0.01F);
      assertFalse(catalogLight0.isModifiable());
      assertEquals(1331.01F, catalogLight0.getWidth(), 0.01F);
      assertTrue(catalogLight0.isResizable());
      assertEquals((-1.0F), catalogLight0.getHeight(), 0.01F);
      assertEquals("DEPTH", catalogLight0.getCreator());
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertTrue(catalogLight0.isTexturable());
      assertTrue(catalogLight0.isProportional());
      assertEquals("_])7g^)gy+P0XH3", catalogLight0.getName());
      assertNull(catalogLight0.getCurrency());
      assertEquals("/<gAhL`8>", catalogLight0.getDescription());
      assertNull(catalogLight0.getGrade());
      assertFalse(catalogLight0.isDoorOrWindow());
      assertEquals("_])7g^)gy+P0XH3", catalogLight0.getId());
      assertNull(catalogLight0.getColor());
      assertEquals((-31.701214F), catalogLight0.getDepth(), 0.01F);
      assertTrue(catalogLight0.isDeformable());
      assertNull(catalogLight0.getInformation());
      assertFalse(bigDecimal1.equals((Object)bigDecimal0));
      assertFalse(bigDecimal1.equals((Object)bigDecimal2));
      assertFalse(bigDecimal2.equals((Object)bigDecimal0));
      assertFalse(bigDecimal2.equals((Object)bigDecimal1));
      assertNotNull(catalogLight0);
      
      HomeLight homeLight0 = new HomeLight(catalogLight0);
      assertEquals(1, lightSourceArray0.length);
      assertEquals(4, floatArray0.length);
      assertTrue(resourceURLContent0.isMultiPartResource());
      assertEquals((byte) (-1), bigDecimal1.byteValue());
      assertEquals((short) (-1), bigDecimal1.shortValue());
      assertEquals((byte)0, bigDecimal2.byteValue());
      assertEquals((short)0, bigDecimal2.shortValue());
      assertFalse(catalogLight0.isMovable());
      assertFalse(catalogLight0.isBackFaceShown());
      assertNull(catalogLight0.getCreationDate());
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertEquals((-31.701214F), catalogLight0.getElevation(), 0.01F);
      assertFalse(catalogLight0.isModifiable());
      assertEquals(1331.01F, catalogLight0.getWidth(), 0.01F);
      assertTrue(catalogLight0.isResizable());
      assertEquals((-1.0F), catalogLight0.getHeight(), 0.01F);
      assertEquals("DEPTH", catalogLight0.getCreator());
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertTrue(catalogLight0.isTexturable());
      assertTrue(catalogLight0.isProportional());
      assertEquals("_])7g^)gy+P0XH3", catalogLight0.getName());
      assertNull(catalogLight0.getCurrency());
      assertEquals("/<gAhL`8>", catalogLight0.getDescription());
      assertNull(catalogLight0.getGrade());
      assertFalse(catalogLight0.isDoorOrWindow());
      assertEquals("_])7g^)gy+P0XH3", catalogLight0.getId());
      assertNull(catalogLight0.getColor());
      assertEquals((-31.701214F), catalogLight0.getDepth(), 0.01F);
      assertTrue(catalogLight0.isDeformable());
      assertNull(catalogLight0.getInformation());
      assertEquals((-31.701214F), homeLight0.getDepth(), 0.01F);
      assertFalse(homeLight0.isMovable());
      assertNull(homeLight0.getShininess());
      assertEquals((-31.701214F), homeLight0.getElevation(), 0.01F);
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals((-1.0F), homeLight0.getHeight(), 0.01F);
      assertEquals((-31.701214F), homeLight0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertEquals("/<gAhL`8>", homeLight0.getDescription());
      assertNull(homeLight0.getCurrency());
      assertEquals(1331.01F, homeLight0.getWidth(), 0.01F);
      assertEquals((-15.850607F), homeLight0.getY(), 0.01F);
      assertNull(homeLight0.getColor());
      assertEquals("_])7g^)gy+P0XH3", homeLight0.getCatalogId());
      assertTrue(homeLight0.isTexturable());
      assertFalse(homeLight0.isModelMirrored());
      assertFalse(homeLight0.isBackFaceShown());
      assertFalse(homeLight0.isDoorOrWindow());
      assertEquals(665.505F, homeLight0.getX(), 0.01F);
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertFalse(homeLight0.isNameVisible());
      assertEquals("_])7g^)gy+P0XH3", homeLight0.getName());
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertTrue(homeLight0.isVisible());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertTrue(homeLight0.isResizable());
      assertTrue(homeLight0.isDeformable());
      assertFalse(bigDecimal1.equals((Object)bigDecimal0));
      assertFalse(bigDecimal1.equals((Object)bigDecimal2));
      assertFalse(bigDecimal2.equals((Object)bigDecimal0));
      assertFalse(bigDecimal2.equals((Object)bigDecimal1));
      assertNotNull(homeLight0);
      
      boolean boolean0 = linkedList0.add((HomePieceOfFurniture) homeLight0);
      assertTrue(boolean0);
      assertEquals(1, lightSourceArray0.length);
      assertEquals(4, floatArray0.length);
      assertEquals(1, linkedList0.size());
      assertTrue(resourceURLContent0.isMultiPartResource());
      assertEquals((byte) (-1), bigDecimal1.byteValue());
      assertEquals((short) (-1), bigDecimal1.shortValue());
      assertEquals((byte)0, bigDecimal2.byteValue());
      assertEquals((short)0, bigDecimal2.shortValue());
      assertFalse(catalogLight0.isMovable());
      assertFalse(catalogLight0.isBackFaceShown());
      assertNull(catalogLight0.getCreationDate());
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertEquals((-31.701214F), catalogLight0.getElevation(), 0.01F);
      assertFalse(catalogLight0.isModifiable());
      assertEquals(1331.01F, catalogLight0.getWidth(), 0.01F);
      assertTrue(catalogLight0.isResizable());
      assertEquals((-1.0F), catalogLight0.getHeight(), 0.01F);
      assertEquals("DEPTH", catalogLight0.getCreator());
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertTrue(catalogLight0.isTexturable());
      assertTrue(catalogLight0.isProportional());
      assertEquals("_])7g^)gy+P0XH3", catalogLight0.getName());
      assertNull(catalogLight0.getCurrency());
      assertEquals("/<gAhL`8>", catalogLight0.getDescription());
      assertNull(catalogLight0.getGrade());
      assertFalse(catalogLight0.isDoorOrWindow());
      assertEquals("_])7g^)gy+P0XH3", catalogLight0.getId());
      assertNull(catalogLight0.getColor());
      assertEquals((-31.701214F), catalogLight0.getDepth(), 0.01F);
      assertTrue(catalogLight0.isDeformable());
      assertNull(catalogLight0.getInformation());
      assertEquals((-31.701214F), homeLight0.getDepth(), 0.01F);
      assertFalse(homeLight0.isMovable());
      assertNull(homeLight0.getShininess());
      assertEquals((-31.701214F), homeLight0.getElevation(), 0.01F);
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals((-1.0F), homeLight0.getHeight(), 0.01F);
      assertEquals((-31.701214F), homeLight0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertEquals("/<gAhL`8>", homeLight0.getDescription());
      assertNull(homeLight0.getCurrency());
      assertEquals(1331.01F, homeLight0.getWidth(), 0.01F);
      assertEquals((-15.850607F), homeLight0.getY(), 0.01F);
      assertNull(homeLight0.getColor());
      assertEquals("_])7g^)gy+P0XH3", homeLight0.getCatalogId());
      assertTrue(homeLight0.isTexturable());
      assertFalse(homeLight0.isModelMirrored());
      assertFalse(homeLight0.isBackFaceShown());
      assertFalse(homeLight0.isDoorOrWindow());
      assertEquals(665.505F, homeLight0.getX(), 0.01F);
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertFalse(homeLight0.isNameVisible());
      assertEquals("_])7g^)gy+P0XH3", homeLight0.getName());
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertTrue(homeLight0.isVisible());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertTrue(homeLight0.isResizable());
      assertTrue(homeLight0.isDeformable());
      assertFalse(bigDecimal1.equals((Object)bigDecimal0));
      assertFalse(bigDecimal1.equals((Object)bigDecimal2));
      assertFalse(bigDecimal2.equals((Object)bigDecimal0));
      assertFalse(bigDecimal2.equals((Object)bigDecimal1));
      assertNotSame(bigDecimal1, bigDecimal0);
      assertNotSame(bigDecimal1, bigDecimal2);
      assertNotSame(bigDecimal2, bigDecimal0);
      assertNotSame(bigDecimal2, bigDecimal1);
      
      BigDecimal bigDecimal3 = BigDecimal.ZERO;
      assertEquals((short)0, bigDecimal3.shortValue());
      assertEquals((byte)0, bigDecimal3.byteValue());
      assertFalse(bigDecimal3.equals((Object)bigDecimal1));
      assertFalse(bigDecimal3.equals((Object)bigDecimal0));
      assertFalse(bigDecimal3.equals((Object)bigDecimal2));
      assertNotNull(bigDecimal3);
      assertNotSame(bigDecimal3, bigDecimal1);
      assertNotSame(bigDecimal3, bigDecimal0);
      assertNotSame(bigDecimal3, bigDecimal2);
      
      CatalogLight catalogLight1 = new CatalogLight("s}bRx.d@mPe_&AQRttT", "", "com.eteks.sweethome3d.model.HomePieceOfFurniture$11", resourceURLContent0, resourceURLContent0, resourceURLContent0, 2001, 2001, (-31.701214F), (-31.701214F), false, lightSourceArray0, floatArray0, "s}bRx.d@mPe_&AQRttT", false, bigDecimal3, bigDecimal3);
      assertEquals(1, lightSourceArray0.length);
      assertEquals(4, floatArray0.length);
      assertTrue(resourceURLContent0.isMultiPartResource());
      assertEquals((short)0, bigDecimal3.shortValue());
      assertEquals((byte)0, bigDecimal3.byteValue());
      assertEquals("s}bRx.d@mPe_&AQRttT", catalogLight1.getCreator());
      assertEquals(2001.0F, catalogLight1.getDepth(), 0.01F);
      assertEquals(0.3926991F, catalogLight1.getIconYaw(), 0.01F);
      assertFalse(catalogLight1.isDoorOrWindow());
      assertTrue(catalogLight1.isTexturable());
      assertEquals("", catalogLight1.getName());
      assertFalse(catalogLight1.isMovable());
      assertFalse(catalogLight1.isBackFaceShown());
      assertNull(catalogLight1.getColor());
      assertTrue(catalogLight1.isDeformable());
      assertNull(catalogLight1.getStaircaseCutOutShape());
      assertNull(catalogLight1.getInformation());
      assertEquals((-31.701214F), catalogLight1.getElevation(), 0.01F);
      assertEquals(2001.0F, catalogLight1.getWidth(), 0.01F);
      assertNull(catalogLight1.getGrade());
      assertNull(catalogLight1.getCurrency());
      assertFalse(catalogLight1.isResizable());
      assertTrue(catalogLight1.isProportional());
      assertEquals("s}bRx.d@mPe_&AQRttT", catalogLight1.getId());
      assertEquals((-31.701214F), catalogLight1.getHeight(), 0.01F);
      assertNull(catalogLight1.getCreationDate());
      assertFalse(catalogLight1.isModifiable());
      assertEquals("com.eteks.sweethome3d.model.HomePieceOfFurniture$11", catalogLight1.getDescription());
      assertFalse(bigDecimal3.equals((Object)bigDecimal1));
      assertFalse(bigDecimal3.equals((Object)bigDecimal0));
      assertFalse(bigDecimal3.equals((Object)bigDecimal2));
      assertFalse(catalogLight1.equals((Object)catalogLight0));
      assertNotNull(catalogLight1);
      
      HomeLight homeLight1 = new HomeLight(catalogLight1);
      assertEquals(1, lightSourceArray0.length);
      assertEquals(4, floatArray0.length);
      assertTrue(resourceURLContent0.isMultiPartResource());
      assertEquals((short)0, bigDecimal3.shortValue());
      assertEquals((byte)0, bigDecimal3.byteValue());
      assertEquals("s}bRx.d@mPe_&AQRttT", catalogLight1.getCreator());
      assertEquals(2001.0F, catalogLight1.getDepth(), 0.01F);
      assertEquals(0.3926991F, catalogLight1.getIconYaw(), 0.01F);
      assertFalse(catalogLight1.isDoorOrWindow());
      assertTrue(catalogLight1.isTexturable());
      assertEquals("", catalogLight1.getName());
      assertFalse(catalogLight1.isMovable());
      assertFalse(catalogLight1.isBackFaceShown());
      assertNull(catalogLight1.getColor());
      assertTrue(catalogLight1.isDeformable());
      assertNull(catalogLight1.getStaircaseCutOutShape());
      assertNull(catalogLight1.getInformation());
      assertEquals((-31.701214F), catalogLight1.getElevation(), 0.01F);
      assertEquals(2001.0F, catalogLight1.getWidth(), 0.01F);
      assertNull(catalogLight1.getGrade());
      assertNull(catalogLight1.getCurrency());
      assertFalse(catalogLight1.isResizable());
      assertTrue(catalogLight1.isProportional());
      assertEquals("s}bRx.d@mPe_&AQRttT", catalogLight1.getId());
      assertEquals((-31.701214F), catalogLight1.getHeight(), 0.01F);
      assertNull(catalogLight1.getCreationDate());
      assertFalse(catalogLight1.isModifiable());
      assertEquals("com.eteks.sweethome3d.model.HomePieceOfFurniture$11", catalogLight1.getDescription());
      assertNull(homeLight1.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight1.getNameAngle(), 0.01F);
      assertEquals((-31.701214F), homeLight1.getElevation(), 0.01F);
      assertEquals("com.eteks.sweethome3d.model.HomePieceOfFurniture$11", homeLight1.getDescription());
      assertEquals(0.5F, homeLight1.getPower(), 0.01F);
      assertEquals((-31.701214F), homeLight1.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight1.getNameXOffset(), 0.01F);
      assertEquals(2001.0F, homeLight1.getDepth(), 0.01F);
      assertEquals(1000.5F, homeLight1.getY(), 0.01F);
      assertEquals(1000.5F, homeLight1.getX(), 0.01F);
      assertEquals(0.0F, homeLight1.getAngle(), 0.01F);
      assertEquals("", homeLight1.getName());
      assertFalse(homeLight1.isModelMirrored());
      assertFalse(homeLight1.isBackFaceShown());
      assertEquals(2001.0F, homeLight1.getWidth(), 0.01F);
      assertNull(homeLight1.getColor());
      assertFalse(homeLight1.isNameVisible());
      assertEquals((-31.701214F), homeLight1.getHeight(), 0.01F);
      assertTrue(homeLight1.isTexturable());
      assertNull(homeLight1.getCurrency());
      assertFalse(homeLight1.isDoorOrWindow());
      assertEquals(0.0F, homeLight1.getNameYOffset(), 0.01F);
      assertTrue(homeLight1.isVisible());
      assertFalse(homeLight1.isMovable());
      assertTrue(homeLight1.isDeformable());
      assertNull(homeLight1.getShininess());
      assertEquals("s}bRx.d@mPe_&AQRttT", homeLight1.getCatalogId());
      assertFalse(homeLight1.isResizable());
      assertFalse(bigDecimal3.equals((Object)bigDecimal1));
      assertFalse(bigDecimal3.equals((Object)bigDecimal0));
      assertFalse(bigDecimal3.equals((Object)bigDecimal2));
      assertFalse(catalogLight1.equals((Object)catalogLight0));
      assertFalse(homeLight1.equals((Object)homeLight0));
      assertNotNull(homeLight1);
      
      BigDecimal bigDecimal4 = bigDecimal3.add(bigDecimal1);
      assertEquals((byte) (-1), bigDecimal1.byteValue());
      assertEquals((short) (-1), bigDecimal1.shortValue());
      assertEquals((short)0, bigDecimal3.shortValue());
      assertEquals((byte)0, bigDecimal3.byteValue());
      assertEquals((short) (-1), bigDecimal4.shortValue());
      assertEquals((byte) (-1), bigDecimal4.byteValue());
      assertFalse(bigDecimal1.equals((Object)bigDecimal0));
      assertFalse(bigDecimal1.equals((Object)bigDecimal3));
      assertFalse(bigDecimal1.equals((Object)bigDecimal2));
      assertFalse(bigDecimal3.equals((Object)bigDecimal1));
      assertFalse(bigDecimal3.equals((Object)bigDecimal0));
      assertFalse(bigDecimal3.equals((Object)bigDecimal2));
      assertFalse(bigDecimal4.equals((Object)bigDecimal0));
      assertTrue(bigDecimal4.equals((Object)bigDecimal1));
      assertFalse(bigDecimal4.equals((Object)bigDecimal3));
      assertFalse(bigDecimal4.equals((Object)bigDecimal2));
      assertNotNull(bigDecimal4);
      assertNotSame(bigDecimal1, bigDecimal0);
      assertNotSame(bigDecimal1, bigDecimal3);
      assertNotSame(bigDecimal1, bigDecimal4);
      assertNotSame(bigDecimal1, bigDecimal2);
      assertNotSame(bigDecimal3, bigDecimal1);
      assertNotSame(bigDecimal3, bigDecimal0);
      assertNotSame(bigDecimal3, bigDecimal4);
      assertNotSame(bigDecimal3, bigDecimal2);
      assertNotSame(bigDecimal4, bigDecimal0);
      assertNotSame(bigDecimal4, bigDecimal1);
      assertNotSame(bigDecimal4, bigDecimal3);
      assertNotSame(bigDecimal4, bigDecimal2);
      
      homeLight1.setNameVisible(false);
      assertEquals(1, lightSourceArray0.length);
      assertEquals(4, floatArray0.length);
      assertTrue(resourceURLContent0.isMultiPartResource());
      assertEquals((short)0, bigDecimal3.shortValue());
      assertEquals((byte)0, bigDecimal3.byteValue());
      assertEquals("s}bRx.d@mPe_&AQRttT", catalogLight1.getCreator());
      assertEquals(2001.0F, catalogLight1.getDepth(), 0.01F);
      assertEquals(0.3926991F, catalogLight1.getIconYaw(), 0.01F);
      assertFalse(catalogLight1.isDoorOrWindow());
      assertTrue(catalogLight1.isTexturable());
      assertEquals("", catalogLight1.getName());
      assertFalse(catalogLight1.isMovable());
      assertFalse(catalogLight1.isBackFaceShown());
      assertNull(catalogLight1.getColor());
      assertTrue(catalogLight1.isDeformable());
      assertNull(catalogLight1.getStaircaseCutOutShape());
      assertNull(catalogLight1.getInformation());
      assertEquals((-31.701214F), catalogLight1.getElevation(), 0.01F);
      assertEquals(2001.0F, catalogLight1.getWidth(), 0.01F);
      assertNull(catalogLight1.getGrade());
      assertNull(catalogLight1.getCurrency());
      assertFalse(catalogLight1.isResizable());
      assertTrue(catalogLight1.isProportional());
      assertEquals("s}bRx.d@mPe_&AQRttT", catalogLight1.getId());
      assertEquals((-31.701214F), catalogLight1.getHeight(), 0.01F);
      assertNull(catalogLight1.getCreationDate());
      assertFalse(catalogLight1.isModifiable());
      assertEquals("com.eteks.sweethome3d.model.HomePieceOfFurniture$11", catalogLight1.getDescription());
      assertNull(homeLight1.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight1.getNameAngle(), 0.01F);
      assertEquals((-31.701214F), homeLight1.getElevation(), 0.01F);
      assertEquals("com.eteks.sweethome3d.model.HomePieceOfFurniture$11", homeLight1.getDescription());
      assertEquals(0.5F, homeLight1.getPower(), 0.01F);
      assertEquals((-31.701214F), homeLight1.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight1.getNameXOffset(), 0.01F);
      assertEquals(2001.0F, homeLight1.getDepth(), 0.01F);
      assertEquals(1000.5F, homeLight1.getY(), 0.01F);
      assertEquals(1000.5F, homeLight1.getX(), 0.01F);
      assertEquals(0.0F, homeLight1.getAngle(), 0.01F);
      assertEquals("", homeLight1.getName());
      assertFalse(homeLight1.isModelMirrored());
      assertFalse(homeLight1.isBackFaceShown());
      assertEquals(2001.0F, homeLight1.getWidth(), 0.01F);
      assertNull(homeLight1.getColor());
      assertFalse(homeLight1.isNameVisible());
      assertEquals((-31.701214F), homeLight1.getHeight(), 0.01F);
      assertTrue(homeLight1.isTexturable());
      assertNull(homeLight1.getCurrency());
      assertFalse(homeLight1.isDoorOrWindow());
      assertEquals(0.0F, homeLight1.getNameYOffset(), 0.01F);
      assertTrue(homeLight1.isVisible());
      assertFalse(homeLight1.isMovable());
      assertTrue(homeLight1.isDeformable());
      assertNull(homeLight1.getShininess());
      assertEquals("s}bRx.d@mPe_&AQRttT", homeLight1.getCatalogId());
      assertFalse(homeLight1.isResizable());
      assertFalse(bigDecimal3.equals((Object)bigDecimal1));
      assertFalse(bigDecimal3.equals((Object)bigDecimal0));
      assertFalse(bigDecimal3.equals((Object)bigDecimal4));
      assertFalse(bigDecimal3.equals((Object)bigDecimal2));
      assertFalse(catalogLight1.equals((Object)catalogLight0));
      assertFalse(homeLight1.equals((Object)homeLight0));
      assertNotSame(bigDecimal3, bigDecimal1);
      assertNotSame(bigDecimal3, bigDecimal0);
      assertNotSame(bigDecimal3, bigDecimal4);
      assertNotSame(bigDecimal3, bigDecimal2);
      assertNotSame(catalogLight1, catalogLight0);
      assertNotSame(homeLight1, homeLight0);
      
      boolean boolean1 = linkedList0.add((HomePieceOfFurniture) homeLight1);
      assertTrue(boolean1);
      assertEquals(1, lightSourceArray0.length);
      assertEquals(4, floatArray0.length);
      assertEquals(2, linkedList0.size());
      assertTrue(resourceURLContent0.isMultiPartResource());
      assertEquals((short)0, bigDecimal3.shortValue());
      assertEquals((byte)0, bigDecimal3.byteValue());
      assertEquals("s}bRx.d@mPe_&AQRttT", catalogLight1.getCreator());
      assertEquals(2001.0F, catalogLight1.getDepth(), 0.01F);
      assertEquals(0.3926991F, catalogLight1.getIconYaw(), 0.01F);
      assertFalse(catalogLight1.isDoorOrWindow());
      assertTrue(catalogLight1.isTexturable());
      assertEquals("", catalogLight1.getName());
      assertFalse(catalogLight1.isMovable());
      assertFalse(catalogLight1.isBackFaceShown());
      assertNull(catalogLight1.getColor());
      assertTrue(catalogLight1.isDeformable());
      assertNull(catalogLight1.getStaircaseCutOutShape());
      assertNull(catalogLight1.getInformation());
      assertEquals((-31.701214F), catalogLight1.getElevation(), 0.01F);
      assertEquals(2001.0F, catalogLight1.getWidth(), 0.01F);
      assertNull(catalogLight1.getGrade());
      assertNull(catalogLight1.getCurrency());
      assertFalse(catalogLight1.isResizable());
      assertTrue(catalogLight1.isProportional());
      assertEquals("s}bRx.d@mPe_&AQRttT", catalogLight1.getId());
      assertEquals((-31.701214F), catalogLight1.getHeight(), 0.01F);
      assertNull(catalogLight1.getCreationDate());
      assertFalse(catalogLight1.isModifiable());
      assertEquals("com.eteks.sweethome3d.model.HomePieceOfFurniture$11", catalogLight1.getDescription());
      assertNull(homeLight1.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight1.getNameAngle(), 0.01F);
      assertEquals((-31.701214F), homeLight1.getElevation(), 0.01F);
      assertEquals("com.eteks.sweethome3d.model.HomePieceOfFurniture$11", homeLight1.getDescription());
      assertEquals(0.5F, homeLight1.getPower(), 0.01F);
      assertEquals((-31.701214F), homeLight1.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight1.getNameXOffset(), 0.01F);
      assertEquals(2001.0F, homeLight1.getDepth(), 0.01F);
      assertEquals(1000.5F, homeLight1.getY(), 0.01F);
      assertEquals(1000.5F, homeLight1.getX(), 0.01F);
      assertEquals(0.0F, homeLight1.getAngle(), 0.01F);
      assertEquals("", homeLight1.getName());
      assertFalse(homeLight1.isModelMirrored());
      assertFalse(homeLight1.isBackFaceShown());
      assertEquals(2001.0F, homeLight1.getWidth(), 0.01F);
      assertNull(homeLight1.getColor());
      assertFalse(homeLight1.isNameVisible());
      assertEquals((-31.701214F), homeLight1.getHeight(), 0.01F);
      assertTrue(homeLight1.isTexturable());
      assertNull(homeLight1.getCurrency());
      assertFalse(homeLight1.isDoorOrWindow());
      assertEquals(0.0F, homeLight1.getNameYOffset(), 0.01F);
      assertTrue(homeLight1.isVisible());
      assertFalse(homeLight1.isMovable());
      assertTrue(homeLight1.isDeformable());
      assertNull(homeLight1.getShininess());
      assertEquals("s}bRx.d@mPe_&AQRttT", homeLight1.getCatalogId());
      assertFalse(homeLight1.isResizable());
      assertTrue(boolean1 == boolean0);
      assertFalse(bigDecimal3.equals((Object)bigDecimal1));
      assertFalse(bigDecimal3.equals((Object)bigDecimal0));
      assertFalse(bigDecimal3.equals((Object)bigDecimal4));
      assertFalse(bigDecimal3.equals((Object)bigDecimal2));
      assertFalse(catalogLight1.equals((Object)catalogLight0));
      assertFalse(homeLight1.equals((Object)homeLight0));
      assertNotSame(bigDecimal3, bigDecimal1);
      assertNotSame(bigDecimal3, bigDecimal0);
      assertNotSame(bigDecimal3, bigDecimal4);
      assertNotSame(bigDecimal3, bigDecimal2);
      assertNotSame(catalogLight1, catalogLight0);
      assertNotSame(homeLight1, homeLight0);
      
      HomeFurnitureGroup homeFurnitureGroup0 = null;
      try {
        homeFurnitureGroup0 = new HomeFurnitureGroup(linkedList0, "?Hl");
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Piece isn't resizable
         //
         verifyException("com.eteks.sweethome3d.model.HomePieceOfFurniture", e);
      }
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      LinkedList<HomePieceOfFurniture> linkedList0 = new LinkedList<HomePieceOfFurniture>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      ResourceURLContent resourceURLContent0 = new ResourceURLContent((URL) null, true);
      assertTrue(resourceURLContent0.isMultiPartResource());
      assertNotNull(resourceURLContent0);
      
      LightSource[] lightSourceArray0 = new LightSource[1];
      Float float0 = new Float(0.0);
      assertEquals(0.0F, (float)float0, 0.01F);
      assertNotNull(float0);
      
      float[][] floatArray0 = new float[4][6];
      BigDecimal bigDecimal0 = new BigDecimal((-1L));
      assertEquals((byte) (-1), bigDecimal0.byteValue());
      assertEquals((short) (-1), bigDecimal0.shortValue());
      assertNotNull(bigDecimal0);
      
      BigDecimal bigDecimal1 = new BigDecimal((-1L));
      assertEquals((short) (-1), bigDecimal1.shortValue());
      assertEquals((byte) (-1), bigDecimal1.byteValue());
      assertTrue(bigDecimal1.equals((Object)bigDecimal0));
      assertNotNull(bigDecimal1);
      
      CatalogLight catalogLight0 = new CatalogLight("_])7g^)gy+P0XH3", "_])7g^)gy+P0XH3", "/<gAhL`8>", resourceURLContent0, resourceURLContent0, resourceURLContent0, 1331.01F, 1.0F, (-1L), 1.0F, false, lightSourceArray0, floatArray0, "_])7g^)gy+P0XH3", true, bigDecimal1, bigDecimal0);
      assertEquals(1, lightSourceArray0.length);
      assertEquals(4, floatArray0.length);
      assertTrue(resourceURLContent0.isMultiPartResource());
      assertEquals((byte) (-1), bigDecimal0.byteValue());
      assertEquals((short) (-1), bigDecimal0.shortValue());
      assertEquals((short) (-1), bigDecimal1.shortValue());
      assertEquals((byte) (-1), bigDecimal1.byteValue());
      assertNull(catalogLight0.getGrade());
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertTrue(catalogLight0.isTexturable());
      assertTrue(catalogLight0.isProportional());
      assertEquals((-1.0F), catalogLight0.getHeight(), 0.01F);
      assertNull(catalogLight0.getCurrency());
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertEquals("_])7g^)gy+P0XH3", catalogLight0.getName());
      assertFalse(catalogLight0.isBackFaceShown());
      assertFalse(catalogLight0.isMovable());
      assertFalse(catalogLight0.isDoorOrWindow());
      assertNull(catalogLight0.getInformation());
      assertTrue(catalogLight0.isDeformable());
      assertNull(catalogLight0.getColor());
      assertEquals("/<gAhL`8>", catalogLight0.getDescription());
      assertEquals(1.0F, catalogLight0.getDepth(), 0.01F);
      assertEquals("_])7g^)gy+P0XH3", catalogLight0.getId());
      assertEquals("_])7g^)gy+P0XH3", catalogLight0.getCreator());
      assertEquals(1.0F, catalogLight0.getElevation(), 0.01F);
      assertTrue(catalogLight0.isResizable());
      assertEquals(1331.01F, catalogLight0.getWidth(), 0.01F);
      assertNull(catalogLight0.getCreationDate());
      assertFalse(catalogLight0.isModifiable());
      assertTrue(bigDecimal0.equals((Object)bigDecimal1));
      assertTrue(bigDecimal1.equals((Object)bigDecimal0));
      assertNotNull(catalogLight0);
      
      HomeLight homeLight0 = new HomeLight(catalogLight0);
      assertEquals(1, lightSourceArray0.length);
      assertEquals(4, floatArray0.length);
      assertTrue(resourceURLContent0.isMultiPartResource());
      assertEquals((byte) (-1), bigDecimal0.byteValue());
      assertEquals((short) (-1), bigDecimal0.shortValue());
      assertEquals((short) (-1), bigDecimal1.shortValue());
      assertEquals((byte) (-1), bigDecimal1.byteValue());
      assertNull(catalogLight0.getGrade());
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertTrue(catalogLight0.isTexturable());
      assertTrue(catalogLight0.isProportional());
      assertEquals((-1.0F), catalogLight0.getHeight(), 0.01F);
      assertNull(catalogLight0.getCurrency());
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertEquals("_])7g^)gy+P0XH3", catalogLight0.getName());
      assertFalse(catalogLight0.isBackFaceShown());
      assertFalse(catalogLight0.isMovable());
      assertFalse(catalogLight0.isDoorOrWindow());
      assertNull(catalogLight0.getInformation());
      assertTrue(catalogLight0.isDeformable());
      assertNull(catalogLight0.getColor());
      assertEquals("/<gAhL`8>", catalogLight0.getDescription());
      assertEquals(1.0F, catalogLight0.getDepth(), 0.01F);
      assertEquals("_])7g^)gy+P0XH3", catalogLight0.getId());
      assertEquals("_])7g^)gy+P0XH3", catalogLight0.getCreator());
      assertEquals(1.0F, catalogLight0.getElevation(), 0.01F);
      assertTrue(catalogLight0.isResizable());
      assertEquals(1331.01F, catalogLight0.getWidth(), 0.01F);
      assertNull(catalogLight0.getCreationDate());
      assertFalse(catalogLight0.isModifiable());
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals("/<gAhL`8>", homeLight0.getDescription());
      assertTrue(homeLight0.isResizable());
      assertNull(homeLight0.getShininess());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertEquals(1.0F, homeLight0.getDepth(), 0.01F);
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertTrue(homeLight0.isTexturable());
      assertEquals(0.5F, homeLight0.getY(), 0.01F);
      assertEquals(1.0F, homeLight0.getGroundElevation(), 0.01F);
      assertEquals(1.0F, homeLight0.getElevation(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertNull(homeLight0.getCurrency());
      assertEquals("_])7g^)gy+P0XH3", homeLight0.getName());
      assertEquals("_])7g^)gy+P0XH3", homeLight0.getCatalogId());
      assertFalse(homeLight0.isNameVisible());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertNull(homeLight0.getColor());
      assertEquals(665.505F, homeLight0.getX(), 0.01F);
      assertTrue(homeLight0.isDeformable());
      assertFalse(homeLight0.isBackFaceShown());
      assertTrue(homeLight0.isVisible());
      assertFalse(homeLight0.isModelMirrored());
      assertFalse(homeLight0.isMovable());
      assertEquals(1331.01F, homeLight0.getWidth(), 0.01F);
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals((-1.0F), homeLight0.getHeight(), 0.01F);
      assertTrue(bigDecimal0.equals((Object)bigDecimal1));
      assertTrue(bigDecimal1.equals((Object)bigDecimal0));
      assertNotNull(homeLight0);
      
      HomePieceOfFurniture homePieceOfFurniture0 = new HomePieceOfFurniture(homeLight0);
      assertEquals(1, lightSourceArray0.length);
      assertEquals(4, floatArray0.length);
      assertTrue(resourceURLContent0.isMultiPartResource());
      assertEquals((byte) (-1), bigDecimal0.byteValue());
      assertEquals((short) (-1), bigDecimal0.shortValue());
      assertEquals((short) (-1), bigDecimal1.shortValue());
      assertEquals((byte) (-1), bigDecimal1.byteValue());
      assertNull(catalogLight0.getGrade());
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertTrue(catalogLight0.isTexturable());
      assertTrue(catalogLight0.isProportional());
      assertEquals((-1.0F), catalogLight0.getHeight(), 0.01F);
      assertNull(catalogLight0.getCurrency());
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertEquals("_])7g^)gy+P0XH3", catalogLight0.getName());
      assertFalse(catalogLight0.isBackFaceShown());
      assertFalse(catalogLight0.isMovable());
      assertFalse(catalogLight0.isDoorOrWindow());
      assertNull(catalogLight0.getInformation());
      assertTrue(catalogLight0.isDeformable());
      assertNull(catalogLight0.getColor());
      assertEquals("/<gAhL`8>", catalogLight0.getDescription());
      assertEquals(1.0F, catalogLight0.getDepth(), 0.01F);
      assertEquals("_])7g^)gy+P0XH3", catalogLight0.getId());
      assertEquals("_])7g^)gy+P0XH3", catalogLight0.getCreator());
      assertEquals(1.0F, catalogLight0.getElevation(), 0.01F);
      assertTrue(catalogLight0.isResizable());
      assertEquals(1331.01F, catalogLight0.getWidth(), 0.01F);
      assertNull(catalogLight0.getCreationDate());
      assertFalse(catalogLight0.isModifiable());
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals("/<gAhL`8>", homeLight0.getDescription());
      assertTrue(homeLight0.isResizable());
      assertNull(homeLight0.getShininess());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertEquals(1.0F, homeLight0.getDepth(), 0.01F);
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertTrue(homeLight0.isTexturable());
      assertEquals(0.5F, homeLight0.getY(), 0.01F);
      assertEquals(1.0F, homeLight0.getGroundElevation(), 0.01F);
      assertEquals(1.0F, homeLight0.getElevation(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertNull(homeLight0.getCurrency());
      assertEquals("_])7g^)gy+P0XH3", homeLight0.getName());
      assertEquals("_])7g^)gy+P0XH3", homeLight0.getCatalogId());
      assertFalse(homeLight0.isNameVisible());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertNull(homeLight0.getColor());
      assertEquals(665.505F, homeLight0.getX(), 0.01F);
      assertTrue(homeLight0.isDeformable());
      assertFalse(homeLight0.isBackFaceShown());
      assertTrue(homeLight0.isVisible());
      assertFalse(homeLight0.isModelMirrored());
      assertFalse(homeLight0.isMovable());
      assertEquals(1331.01F, homeLight0.getWidth(), 0.01F);
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals((-1.0F), homeLight0.getHeight(), 0.01F);
      assertTrue(homePieceOfFurniture0.isVisible());
      assertEquals(0.0F, homePieceOfFurniture0.getNameYOffset(), 0.01F);
      assertNull(homePieceOfFurniture0.getColor());
      assertEquals("_])7g^)gy+P0XH3", homePieceOfFurniture0.getCatalogId());
      assertEquals(1331.01F, homePieceOfFurniture0.getWidth(), 0.01F);
      assertTrue(homePieceOfFurniture0.isDeformable());
      assertFalse(homePieceOfFurniture0.isModelMirrored());
      assertFalse(homePieceOfFurniture0.isBackFaceShown());
      assertEquals(0.5F, homePieceOfFurniture0.getY(), 0.01F);
      assertFalse(homePieceOfFurniture0.isDoorOrWindow());
      assertEquals(665.505F, homePieceOfFurniture0.getX(), 0.01F);
      assertFalse(homePieceOfFurniture0.isNameVisible());
      assertEquals(0.0F, homePieceOfFurniture0.getAngle(), 0.01F);
      assertEquals("_])7g^)gy+P0XH3", homePieceOfFurniture0.getName());
      assertTrue(homePieceOfFurniture0.isTexturable());
      assertEquals(1.0F, homePieceOfFurniture0.getElevation(), 0.01F);
      assertEquals("/<gAhL`8>", homePieceOfFurniture0.getDescription());
      assertEquals(1.0F, homePieceOfFurniture0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture0.getNameXOffset(), 0.01F);
      assertEquals(1.0F, homePieceOfFurniture0.getDepth(), 0.01F);
      assertTrue(homePieceOfFurniture0.isResizable());
      assertNull(homePieceOfFurniture0.getShininess());
      assertNull(homePieceOfFurniture0.getStaircaseCutOutShape());
      assertEquals(0.0F, homePieceOfFurniture0.getNameAngle(), 0.01F);
      assertEquals((-1.0F), homePieceOfFurniture0.getHeight(), 0.01F);
      assertNull(homePieceOfFurniture0.getCurrency());
      assertFalse(homePieceOfFurniture0.isMovable());
      assertTrue(bigDecimal0.equals((Object)bigDecimal1));
      assertTrue(bigDecimal1.equals((Object)bigDecimal0));
      assertNotNull(homePieceOfFurniture0);
      
      boolean boolean0 = linkedList0.add((HomePieceOfFurniture) homeLight0);
      assertTrue(boolean0);
      assertEquals(1, lightSourceArray0.length);
      assertEquals(4, floatArray0.length);
      assertFalse(linkedList0.contains(homePieceOfFurniture0));
      assertEquals(1, linkedList0.size());
      assertTrue(resourceURLContent0.isMultiPartResource());
      assertEquals((byte) (-1), bigDecimal0.byteValue());
      assertEquals((short) (-1), bigDecimal0.shortValue());
      assertEquals((short) (-1), bigDecimal1.shortValue());
      assertEquals((byte) (-1), bigDecimal1.byteValue());
      assertNull(catalogLight0.getGrade());
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertTrue(catalogLight0.isTexturable());
      assertTrue(catalogLight0.isProportional());
      assertEquals((-1.0F), catalogLight0.getHeight(), 0.01F);
      assertNull(catalogLight0.getCurrency());
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertEquals("_])7g^)gy+P0XH3", catalogLight0.getName());
      assertFalse(catalogLight0.isBackFaceShown());
      assertFalse(catalogLight0.isMovable());
      assertFalse(catalogLight0.isDoorOrWindow());
      assertNull(catalogLight0.getInformation());
      assertTrue(catalogLight0.isDeformable());
      assertNull(catalogLight0.getColor());
      assertEquals("/<gAhL`8>", catalogLight0.getDescription());
      assertEquals(1.0F, catalogLight0.getDepth(), 0.01F);
      assertEquals("_])7g^)gy+P0XH3", catalogLight0.getId());
      assertEquals("_])7g^)gy+P0XH3", catalogLight0.getCreator());
      assertEquals(1.0F, catalogLight0.getElevation(), 0.01F);
      assertTrue(catalogLight0.isResizable());
      assertEquals(1331.01F, catalogLight0.getWidth(), 0.01F);
      assertNull(catalogLight0.getCreationDate());
      assertFalse(catalogLight0.isModifiable());
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals("/<gAhL`8>", homeLight0.getDescription());
      assertTrue(homeLight0.isResizable());
      assertNull(homeLight0.getShininess());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertEquals(1.0F, homeLight0.getDepth(), 0.01F);
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertTrue(homeLight0.isTexturable());
      assertEquals(0.5F, homeLight0.getY(), 0.01F);
      assertEquals(1.0F, homeLight0.getGroundElevation(), 0.01F);
      assertEquals(1.0F, homeLight0.getElevation(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertNull(homeLight0.getCurrency());
      assertEquals("_])7g^)gy+P0XH3", homeLight0.getName());
      assertEquals("_])7g^)gy+P0XH3", homeLight0.getCatalogId());
      assertFalse(homeLight0.isNameVisible());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertNull(homeLight0.getColor());
      assertEquals(665.505F, homeLight0.getX(), 0.01F);
      assertTrue(homeLight0.isDeformable());
      assertFalse(homeLight0.isBackFaceShown());
      assertTrue(homeLight0.isVisible());
      assertFalse(homeLight0.isModelMirrored());
      assertFalse(homeLight0.isMovable());
      assertEquals(1331.01F, homeLight0.getWidth(), 0.01F);
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals((-1.0F), homeLight0.getHeight(), 0.01F);
      assertTrue(bigDecimal0.equals((Object)bigDecimal1));
      assertTrue(bigDecimal1.equals((Object)bigDecimal0));
      assertNotSame(bigDecimal0, bigDecimal1);
      assertNotSame(bigDecimal1, bigDecimal0);
      
      CatalogLight catalogLight1 = new CatalogLight("/<gAhL`8>", "com.eteks.sweethome3d.model.HomeFurnitureGroup", "com.eteks.sweethome3d.model.HomeFurnitureGroup", resourceURLContent0, resourceURLContent0, resourceURLContent0, (-1L), 1160.423F, 1160.423F, 88.9F, true, lightSourceArray0, floatArray0, "/<gAhL`8>", false, false, true, bigDecimal1, bigDecimal1);
      assertEquals(1, lightSourceArray0.length);
      assertEquals(4, floatArray0.length);
      assertTrue(resourceURLContent0.isMultiPartResource());
      assertEquals((short) (-1), bigDecimal1.shortValue());
      assertEquals((byte) (-1), bigDecimal1.byteValue());
      assertNull(catalogLight1.getInformation());
      assertEquals(1160.423F, catalogLight1.getDepth(), 0.01F);
      assertTrue(catalogLight1.isDeformable());
      assertNull(catalogLight1.getStaircaseCutOutShape());
      assertFalse(catalogLight1.isBackFaceShown());
      assertTrue(catalogLight1.isMovable());
      assertTrue(catalogLight1.isProportional());
      assertNull(catalogLight1.getCreationDate());
      assertNull(catalogLight1.getGrade());
      assertEquals(88.9F, catalogLight1.getElevation(), 0.01F);
      assertTrue(catalogLight1.isTexturable());
      assertFalse(catalogLight1.isResizable());
      assertEquals((-1.0F), catalogLight1.getWidth(), 0.01F);
      assertEquals("/<gAhL`8>", catalogLight1.getId());
      assertEquals(0.3926991F, catalogLight1.getIconYaw(), 0.01F);
      assertEquals("com.eteks.sweethome3d.model.HomeFurnitureGroup", catalogLight1.getName());
      assertNull(catalogLight1.getColor());
      assertFalse(catalogLight1.isModifiable());
      assertEquals("com.eteks.sweethome3d.model.HomeFurnitureGroup", catalogLight1.getDescription());
      assertFalse(catalogLight1.isDoorOrWindow());
      assertEquals(1160.423F, catalogLight1.getHeight(), 0.01F);
      assertNull(catalogLight1.getCurrency());
      assertEquals("/<gAhL`8>", catalogLight1.getCreator());
      assertTrue(bigDecimal1.equals((Object)bigDecimal0));
      assertFalse(catalogLight1.equals((Object)catalogLight0));
      assertNotNull(catalogLight1);
      
      HomeFurnitureGroup homeFurnitureGroup0 = new HomeFurnitureGroup(linkedList0, "");
      assertFalse(linkedList0.contains(homePieceOfFurniture0));
      assertEquals(1, linkedList0.size());
      assertTrue(homeFurnitureGroup0.isDeformable());
      assertEquals(1.0F, homeFurnitureGroup0.getDepth(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getAngle(), 0.01F);
      assertEquals(1.0F, homeFurnitureGroup0.getGroundElevation(), 0.01F);
      assertFalse(homeFurnitureGroup0.isDoorOrWindow());
      assertTrue(homeFurnitureGroup0.isResizable());
      assertNull(homeFurnitureGroup0.getStaircaseCutOutShape());
      assertEquals("", homeFurnitureGroup0.getName());
      assertFalse(homeFurnitureGroup0.isModelMirrored());
      assertEquals(0.0F, homeFurnitureGroup0.getNameAngle(), 0.01F);
      assertFalse(homeFurnitureGroup0.isMovable());
      assertEquals((-1.0F), homeFurnitureGroup0.getHeight(), 0.01F);
      assertNull(homeFurnitureGroup0.getColor());
      assertEquals(1331.01F, homeFurnitureGroup0.getWidth(), 0.01F);
      assertNull(homeFurnitureGroup0.getCatalogId());
      assertEquals(0.0F, homeFurnitureGroup0.getNameYOffset(), 0.01F);
      assertTrue(homeFurnitureGroup0.isVisible());
      assertNull(homeFurnitureGroup0.getShininess());
      assertNull(homeFurnitureGroup0.getCurrency());
      assertEquals(665.505F, homeFurnitureGroup0.getX(), 0.01F);
      assertFalse(homeFurnitureGroup0.isBackFaceShown());
      assertFalse(homeFurnitureGroup0.isNameVisible());
      assertNull(homeFurnitureGroup0.getDescription());
      assertEquals(0.5F, homeFurnitureGroup0.getY(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getNameXOffset(), 0.01F);
      assertEquals(1.0F, homeFurnitureGroup0.getElevation(), 0.01F);
      assertTrue(homeFurnitureGroup0.isTexturable());
      assertNotNull(homeFurnitureGroup0);
      
      HomeFurnitureGroup homeFurnitureGroup1 = homeFurnitureGroup0.clone();
      assertFalse(linkedList0.contains(homePieceOfFurniture0));
      assertEquals(1, linkedList0.size());
      assertTrue(homeFurnitureGroup0.isDeformable());
      assertEquals(1.0F, homeFurnitureGroup0.getDepth(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getAngle(), 0.01F);
      assertEquals(1.0F, homeFurnitureGroup0.getGroundElevation(), 0.01F);
      assertFalse(homeFurnitureGroup0.isDoorOrWindow());
      assertTrue(homeFurnitureGroup0.isResizable());
      assertNull(homeFurnitureGroup0.getStaircaseCutOutShape());
      assertEquals("", homeFurnitureGroup0.getName());
      assertFalse(homeFurnitureGroup0.isModelMirrored());
      assertEquals(0.0F, homeFurnitureGroup0.getNameAngle(), 0.01F);
      assertFalse(homeFurnitureGroup0.isMovable());
      assertEquals((-1.0F), homeFurnitureGroup0.getHeight(), 0.01F);
      assertNull(homeFurnitureGroup0.getColor());
      assertEquals(1331.01F, homeFurnitureGroup0.getWidth(), 0.01F);
      assertNull(homeFurnitureGroup0.getCatalogId());
      assertEquals(0.0F, homeFurnitureGroup0.getNameYOffset(), 0.01F);
      assertTrue(homeFurnitureGroup0.isVisible());
      assertNull(homeFurnitureGroup0.getShininess());
      assertNull(homeFurnitureGroup0.getCurrency());
      assertEquals(665.505F, homeFurnitureGroup0.getX(), 0.01F);
      assertFalse(homeFurnitureGroup0.isBackFaceShown());
      assertFalse(homeFurnitureGroup0.isNameVisible());
      assertNull(homeFurnitureGroup0.getDescription());
      assertEquals(0.5F, homeFurnitureGroup0.getY(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getNameXOffset(), 0.01F);
      assertEquals(1.0F, homeFurnitureGroup0.getElevation(), 0.01F);
      assertTrue(homeFurnitureGroup0.isTexturable());
      assertEquals(0.0F, homeFurnitureGroup1.getNameYOffset(), 0.01F);
      assertTrue(homeFurnitureGroup1.isVisible());
      assertNull(homeFurnitureGroup1.getColor());
      assertNull(homeFurnitureGroup1.getCatalogId());
      assertNull(homeFurnitureGroup1.getShininess());
      assertEquals(1331.01F, homeFurnitureGroup1.getWidth(), 0.01F);
      assertEquals(1.0F, homeFurnitureGroup1.getDepth(), 0.01F);
      assertTrue(homeFurnitureGroup1.isResizable());
      assertNull(homeFurnitureGroup1.getDescription());
      assertEquals(0.0F, homeFurnitureGroup1.getNameXOffset(), 0.01F);
      assertNull(homeFurnitureGroup1.getStaircaseCutOutShape());
      assertEquals(1.0F, homeFurnitureGroup1.getElevation(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup1.getNameAngle(), 0.01F);
      assertTrue(homeFurnitureGroup1.isDeformable());
      assertFalse(homeFurnitureGroup1.isMovable());
      assertEquals(1.0F, homeFurnitureGroup1.getGroundElevation(), 0.01F);
      assertEquals((-1.0F), homeFurnitureGroup1.getHeight(), 0.01F);
      assertEquals(0.5F, homeFurnitureGroup1.getY(), 0.01F);
      assertTrue(homeFurnitureGroup1.isTexturable());
      assertFalse(homeFurnitureGroup1.isModelMirrored());
      assertEquals(665.505F, homeFurnitureGroup1.getX(), 0.01F);
      assertFalse(homeFurnitureGroup1.isBackFaceShown());
      assertEquals(0.0F, homeFurnitureGroup1.getAngle(), 0.01F);
      assertEquals("", homeFurnitureGroup1.getName());
      assertNull(homeFurnitureGroup1.getCurrency());
      assertFalse(homeFurnitureGroup1.isNameVisible());
      assertFalse(homeFurnitureGroup1.isDoorOrWindow());
      assertFalse(homeFurnitureGroup1.equals((Object)homeFurnitureGroup0));
      assertNotNull(homeFurnitureGroup1);
      assertNotSame(homeFurnitureGroup0, homeFurnitureGroup1);
      assertNotSame(homeFurnitureGroup1, homeFurnitureGroup0);
      
      homeFurnitureGroup0.setModelMirrored(true);
      assertFalse(linkedList0.contains(homePieceOfFurniture0));
      assertEquals(1, linkedList0.size());
      assertTrue(homeFurnitureGroup0.isDeformable());
      assertEquals(1.0F, homeFurnitureGroup0.getDepth(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getAngle(), 0.01F);
      assertEquals(1.0F, homeFurnitureGroup0.getGroundElevation(), 0.01F);
      assertFalse(homeFurnitureGroup0.isDoorOrWindow());
      assertTrue(homeFurnitureGroup0.isResizable());
      assertNull(homeFurnitureGroup0.getStaircaseCutOutShape());
      assertEquals("", homeFurnitureGroup0.getName());
      assertEquals(0.0F, homeFurnitureGroup0.getNameAngle(), 0.01F);
      assertFalse(homeFurnitureGroup0.isMovable());
      assertEquals((-1.0F), homeFurnitureGroup0.getHeight(), 0.01F);
      assertNull(homeFurnitureGroup0.getColor());
      assertEquals(1331.01F, homeFurnitureGroup0.getWidth(), 0.01F);
      assertTrue(homeFurnitureGroup0.isModelMirrored());
      assertNull(homeFurnitureGroup0.getCatalogId());
      assertEquals(0.0F, homeFurnitureGroup0.getNameYOffset(), 0.01F);
      assertTrue(homeFurnitureGroup0.isVisible());
      assertNull(homeFurnitureGroup0.getShininess());
      assertNull(homeFurnitureGroup0.getCurrency());
      assertEquals(665.505F, homeFurnitureGroup0.getX(), 0.01F);
      assertFalse(homeFurnitureGroup0.isBackFaceShown());
      assertFalse(homeFurnitureGroup0.isNameVisible());
      assertNull(homeFurnitureGroup0.getDescription());
      assertEquals(0.5F, homeFurnitureGroup0.getY(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getNameXOffset(), 0.01F);
      assertEquals(1.0F, homeFurnitureGroup0.getElevation(), 0.01F);
      assertTrue(homeFurnitureGroup0.isTexturable());
      assertFalse(homeFurnitureGroup0.equals((Object)homeFurnitureGroup1));
      assertNotSame(homeFurnitureGroup0, homeFurnitureGroup1);
      
      HomeFurnitureGroup homeFurnitureGroup2 = homeFurnitureGroup0.clone();
      assertFalse(linkedList0.contains(homePieceOfFurniture0));
      assertEquals(1, linkedList0.size());
      assertTrue(homeFurnitureGroup0.isDeformable());
      assertEquals(1.0F, homeFurnitureGroup0.getDepth(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getAngle(), 0.01F);
      assertEquals(1.0F, homeFurnitureGroup0.getGroundElevation(), 0.01F);
      assertFalse(homeFurnitureGroup0.isDoorOrWindow());
      assertTrue(homeFurnitureGroup0.isResizable());
      assertNull(homeFurnitureGroup0.getStaircaseCutOutShape());
      assertEquals("", homeFurnitureGroup0.getName());
      assertEquals(0.0F, homeFurnitureGroup0.getNameAngle(), 0.01F);
      assertFalse(homeFurnitureGroup0.isMovable());
      assertEquals((-1.0F), homeFurnitureGroup0.getHeight(), 0.01F);
      assertNull(homeFurnitureGroup0.getColor());
      assertEquals(1331.01F, homeFurnitureGroup0.getWidth(), 0.01F);
      assertTrue(homeFurnitureGroup0.isModelMirrored());
      assertNull(homeFurnitureGroup0.getCatalogId());
      assertEquals(0.0F, homeFurnitureGroup0.getNameYOffset(), 0.01F);
      assertTrue(homeFurnitureGroup0.isVisible());
      assertNull(homeFurnitureGroup0.getShininess());
      assertNull(homeFurnitureGroup0.getCurrency());
      assertEquals(665.505F, homeFurnitureGroup0.getX(), 0.01F);
      assertFalse(homeFurnitureGroup0.isBackFaceShown());
      assertFalse(homeFurnitureGroup0.isNameVisible());
      assertNull(homeFurnitureGroup0.getDescription());
      assertEquals(0.5F, homeFurnitureGroup0.getY(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getNameXOffset(), 0.01F);
      assertEquals(1.0F, homeFurnitureGroup0.getElevation(), 0.01F);
      assertTrue(homeFurnitureGroup0.isTexturable());
      assertEquals(1331.01F, homeFurnitureGroup2.getWidth(), 0.01F);
      assertEquals(0.5F, homeFurnitureGroup2.getY(), 0.01F);
      assertEquals(665.505F, homeFurnitureGroup2.getX(), 0.01F);
      assertTrue(homeFurnitureGroup2.isTexturable());
      assertEquals(1.0F, homeFurnitureGroup2.getGroundElevation(), 0.01F);
      assertNull(homeFurnitureGroup2.getColor());
      assertTrue(homeFurnitureGroup2.isModelMirrored());
      assertEquals(1.0F, homeFurnitureGroup2.getElevation(), 0.01F);
      assertNull(homeFurnitureGroup2.getDescription());
      assertTrue(homeFurnitureGroup2.isDeformable());
      assertFalse(homeFurnitureGroup2.isNameVisible());
      assertEquals(0.0F, homeFurnitureGroup2.getAngle(), 0.01F);
      assertEquals("", homeFurnitureGroup2.getName());
      assertFalse(homeFurnitureGroup2.isBackFaceShown());
      assertFalse(homeFurnitureGroup2.isDoorOrWindow());
      assertNull(homeFurnitureGroup2.getShininess());
      assertFalse(homeFurnitureGroup2.isMovable());
      assertNull(homeFurnitureGroup2.getCurrency());
      assertEquals(0.0F, homeFurnitureGroup2.getNameAngle(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup2.getNameXOffset(), 0.01F);
      assertEquals((-1.0F), homeFurnitureGroup2.getHeight(), 0.01F);
      assertTrue(homeFurnitureGroup2.isVisible());
      assertEquals(0.0F, homeFurnitureGroup2.getNameYOffset(), 0.01F);
      assertEquals(1.0F, homeFurnitureGroup2.getDepth(), 0.01F);
      assertNull(homeFurnitureGroup2.getStaircaseCutOutShape());
      assertNull(homeFurnitureGroup2.getCatalogId());
      assertTrue(homeFurnitureGroup2.isResizable());
      assertFalse(homeFurnitureGroup0.equals((Object)homeFurnitureGroup1));
      assertFalse(homeFurnitureGroup2.equals((Object)homeFurnitureGroup0));
      assertFalse(homeFurnitureGroup2.equals((Object)homeFurnitureGroup1));
      assertNotNull(homeFurnitureGroup2);
      assertNotSame(homeFurnitureGroup0, homeFurnitureGroup2);
      assertNotSame(homeFurnitureGroup0, homeFurnitureGroup1);
      assertNotSame(homeFurnitureGroup2, homeFurnitureGroup0);
      assertNotSame(homeFurnitureGroup2, homeFurnitureGroup1);
      
      homeFurnitureGroup2.setWidth((-1396.0F));
      assertFalse(linkedList0.contains(homePieceOfFurniture0));
      assertEquals(1, linkedList0.size());
      assertTrue(homeFurnitureGroup0.isDeformable());
      assertEquals(1.0F, homeFurnitureGroup0.getDepth(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getAngle(), 0.01F);
      assertEquals(1.0F, homeFurnitureGroup0.getGroundElevation(), 0.01F);
      assertFalse(homeFurnitureGroup0.isDoorOrWindow());
      assertTrue(homeFurnitureGroup0.isResizable());
      assertNull(homeFurnitureGroup0.getStaircaseCutOutShape());
      assertEquals("", homeFurnitureGroup0.getName());
      assertEquals(0.0F, homeFurnitureGroup0.getNameAngle(), 0.01F);
      assertFalse(homeFurnitureGroup0.isMovable());
      assertEquals((-1.0F), homeFurnitureGroup0.getHeight(), 0.01F);
      assertNull(homeFurnitureGroup0.getColor());
      assertEquals(1331.01F, homeFurnitureGroup0.getWidth(), 0.01F);
      assertTrue(homeFurnitureGroup0.isModelMirrored());
      assertNull(homeFurnitureGroup0.getCatalogId());
      assertEquals(0.0F, homeFurnitureGroup0.getNameYOffset(), 0.01F);
      assertTrue(homeFurnitureGroup0.isVisible());
      assertNull(homeFurnitureGroup0.getShininess());
      assertNull(homeFurnitureGroup0.getCurrency());
      assertEquals(665.505F, homeFurnitureGroup0.getX(), 0.01F);
      assertFalse(homeFurnitureGroup0.isBackFaceShown());
      assertFalse(homeFurnitureGroup0.isNameVisible());
      assertNull(homeFurnitureGroup0.getDescription());
      assertEquals(0.5F, homeFurnitureGroup0.getY(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getNameXOffset(), 0.01F);
      assertEquals(1.0F, homeFurnitureGroup0.getElevation(), 0.01F);
      assertTrue(homeFurnitureGroup0.isTexturable());
      assertEquals(0.5F, homeFurnitureGroup2.getY(), 0.01F);
      assertEquals(665.505F, homeFurnitureGroup2.getX(), 0.01F);
      assertTrue(homeFurnitureGroup2.isTexturable());
      assertEquals(1.0F, homeFurnitureGroup2.getGroundElevation(), 0.01F);
      assertNull(homeFurnitureGroup2.getColor());
      assertTrue(homeFurnitureGroup2.isModelMirrored());
      assertEquals(1.0F, homeFurnitureGroup2.getElevation(), 0.01F);
      assertNull(homeFurnitureGroup2.getDescription());
      assertTrue(homeFurnitureGroup2.isDeformable());
      assertFalse(homeFurnitureGroup2.isNameVisible());
      assertEquals(0.0F, homeFurnitureGroup2.getAngle(), 0.01F);
      assertEquals("", homeFurnitureGroup2.getName());
      assertFalse(homeFurnitureGroup2.isBackFaceShown());
      assertFalse(homeFurnitureGroup2.isDoorOrWindow());
      assertNull(homeFurnitureGroup2.getShininess());
      assertFalse(homeFurnitureGroup2.isMovable());
      assertNull(homeFurnitureGroup2.getCurrency());
      assertEquals(0.0F, homeFurnitureGroup2.getNameAngle(), 0.01F);
      assertEquals((-1396.0F), homeFurnitureGroup2.getWidth(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup2.getNameXOffset(), 0.01F);
      assertEquals((-1.0F), homeFurnitureGroup2.getHeight(), 0.01F);
      assertTrue(homeFurnitureGroup2.isVisible());
      assertEquals(0.0F, homeFurnitureGroup2.getNameYOffset(), 0.01F);
      assertEquals(1.0F, homeFurnitureGroup2.getDepth(), 0.01F);
      assertNull(homeFurnitureGroup2.getStaircaseCutOutShape());
      assertNull(homeFurnitureGroup2.getCatalogId());
      assertTrue(homeFurnitureGroup2.isResizable());
      assertFalse(homeFurnitureGroup0.equals((Object)homeFurnitureGroup2));
      assertFalse(homeFurnitureGroup0.equals((Object)homeFurnitureGroup1));
      assertFalse(homeFurnitureGroup2.equals((Object)homeFurnitureGroup0));
      assertFalse(homeFurnitureGroup2.equals((Object)homeFurnitureGroup1));
      assertNotSame(homeFurnitureGroup0, homeFurnitureGroup2);
      assertNotSame(homeFurnitureGroup0, homeFurnitureGroup1);
      assertNotSame(homeFurnitureGroup2, homeFurnitureGroup0);
      assertNotSame(homeFurnitureGroup2, homeFurnitureGroup1);
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      LinkedList<HomePieceOfFurniture> linkedList0 = new LinkedList<HomePieceOfFurniture>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      ResourceURLContent resourceURLContent0 = new ResourceURLContent((URL) null, true);
      assertTrue(resourceURLContent0.isMultiPartResource());
      assertNotNull(resourceURLContent0);
      
      LightSource[] lightSourceArray0 = new LightSource[1];
      Float float0 = new Float(0.0);
      assertEquals(0.0F, (float)float0, 0.01F);
      assertNotNull(float0);
      
      float[][] floatArray0 = new float[4][6];
      BigDecimal bigDecimal0 = new BigDecimal((-1L));
      assertEquals((byte) (-1), bigDecimal0.byteValue());
      assertEquals((short) (-1), bigDecimal0.shortValue());
      assertNotNull(bigDecimal0);
      
      BigDecimal bigDecimal1 = new BigDecimal((-1L));
      assertEquals((byte) (-1), bigDecimal1.byteValue());
      assertEquals((short) (-1), bigDecimal1.shortValue());
      assertTrue(bigDecimal1.equals((Object)bigDecimal0));
      assertNotNull(bigDecimal1);
      
      CatalogLight catalogLight0 = new CatalogLight("_])7g^)gy+P0XH3", "_])7g^)gy+P0XH3", "/<gAhL`8>", resourceURLContent0, resourceURLContent0, resourceURLContent0, 1331.01F, 1.0F, (-1L), 1.0F, false, lightSourceArray0, floatArray0, "DEPTH", true, bigDecimal1, bigDecimal0);
      assertEquals(1, lightSourceArray0.length);
      assertEquals(4, floatArray0.length);
      assertTrue(resourceURLContent0.isMultiPartResource());
      assertEquals((byte) (-1), bigDecimal0.byteValue());
      assertEquals((short) (-1), bigDecimal0.shortValue());
      assertEquals((byte) (-1), bigDecimal1.byteValue());
      assertEquals((short) (-1), bigDecimal1.shortValue());
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertEquals("_])7g^)gy+P0XH3", catalogLight0.getName());
      assertFalse(catalogLight0.isDoorOrWindow());
      assertTrue(catalogLight0.isTexturable());
      assertEquals(1.0F, catalogLight0.getElevation(), 0.01F);
      assertNull(catalogLight0.getCurrency());
      assertEquals("_])7g^)gy+P0XH3", catalogLight0.getId());
      assertNull(catalogLight0.getColor());
      assertEquals("/<gAhL`8>", catalogLight0.getDescription());
      assertEquals(1.0F, catalogLight0.getDepth(), 0.01F);
      assertTrue(catalogLight0.isDeformable());
      assertNull(catalogLight0.getInformation());
      assertFalse(catalogLight0.isMovable());
      assertFalse(catalogLight0.isBackFaceShown());
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertNull(catalogLight0.getGrade());
      assertFalse(catalogLight0.isModifiable());
      assertTrue(catalogLight0.isProportional());
      assertNull(catalogLight0.getCreationDate());
      assertEquals((-1.0F), catalogLight0.getHeight(), 0.01F);
      assertEquals(1331.01F, catalogLight0.getWidth(), 0.01F);
      assertTrue(catalogLight0.isResizable());
      assertEquals("DEPTH", catalogLight0.getCreator());
      assertTrue(bigDecimal0.equals((Object)bigDecimal1));
      assertTrue(bigDecimal1.equals((Object)bigDecimal0));
      assertNotNull(catalogLight0);
      
      HomeLight homeLight0 = new HomeLight(catalogLight0);
      assertEquals(1, lightSourceArray0.length);
      assertEquals(4, floatArray0.length);
      assertTrue(resourceURLContent0.isMultiPartResource());
      assertEquals((byte) (-1), bigDecimal0.byteValue());
      assertEquals((short) (-1), bigDecimal0.shortValue());
      assertEquals((byte) (-1), bigDecimal1.byteValue());
      assertEquals((short) (-1), bigDecimal1.shortValue());
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertEquals("_])7g^)gy+P0XH3", catalogLight0.getName());
      assertFalse(catalogLight0.isDoorOrWindow());
      assertTrue(catalogLight0.isTexturable());
      assertEquals(1.0F, catalogLight0.getElevation(), 0.01F);
      assertNull(catalogLight0.getCurrency());
      assertEquals("_])7g^)gy+P0XH3", catalogLight0.getId());
      assertNull(catalogLight0.getColor());
      assertEquals("/<gAhL`8>", catalogLight0.getDescription());
      assertEquals(1.0F, catalogLight0.getDepth(), 0.01F);
      assertTrue(catalogLight0.isDeformable());
      assertNull(catalogLight0.getInformation());
      assertFalse(catalogLight0.isMovable());
      assertFalse(catalogLight0.isBackFaceShown());
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertNull(catalogLight0.getGrade());
      assertFalse(catalogLight0.isModifiable());
      assertTrue(catalogLight0.isProportional());
      assertNull(catalogLight0.getCreationDate());
      assertEquals((-1.0F), catalogLight0.getHeight(), 0.01F);
      assertEquals(1331.01F, catalogLight0.getWidth(), 0.01F);
      assertTrue(catalogLight0.isResizable());
      assertEquals("DEPTH", catalogLight0.getCreator());
      assertTrue(homeLight0.isResizable());
      assertEquals(1.0F, homeLight0.getDepth(), 0.01F);
      assertEquals("/<gAhL`8>", homeLight0.getDescription());
      assertNull(homeLight0.getShininess());
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertTrue(homeLight0.isVisible());
      assertTrue(homeLight0.isDeformable());
      assertEquals("_])7g^)gy+P0XH3", homeLight0.getName());
      assertEquals(1.0F, homeLight0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertTrue(homeLight0.isTexturable());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      assertEquals(1.0F, homeLight0.getElevation(), 0.01F);
      assertFalse(homeLight0.isBackFaceShown());
      assertEquals(665.505F, homeLight0.getX(), 0.01F);
      assertEquals(0.5F, homeLight0.getY(), 0.01F);
      assertEquals("_])7g^)gy+P0XH3", homeLight0.getCatalogId());
      assertFalse(homeLight0.isNameVisible());
      assertNull(homeLight0.getColor());
      assertFalse(homeLight0.isModelMirrored());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertEquals(1331.01F, homeLight0.getWidth(), 0.01F);
      assertFalse(homeLight0.isMovable());
      assertEquals((-1.0F), homeLight0.getHeight(), 0.01F);
      assertNull(homeLight0.getCurrency());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertTrue(bigDecimal0.equals((Object)bigDecimal1));
      assertTrue(bigDecimal1.equals((Object)bigDecimal0));
      assertNotNull(homeLight0);
      
      HomePieceOfFurniture homePieceOfFurniture0 = new HomePieceOfFurniture(homeLight0);
      assertEquals(1, lightSourceArray0.length);
      assertEquals(4, floatArray0.length);
      assertTrue(resourceURLContent0.isMultiPartResource());
      assertEquals((byte) (-1), bigDecimal0.byteValue());
      assertEquals((short) (-1), bigDecimal0.shortValue());
      assertEquals((byte) (-1), bigDecimal1.byteValue());
      assertEquals((short) (-1), bigDecimal1.shortValue());
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertEquals("_])7g^)gy+P0XH3", catalogLight0.getName());
      assertFalse(catalogLight0.isDoorOrWindow());
      assertTrue(catalogLight0.isTexturable());
      assertEquals(1.0F, catalogLight0.getElevation(), 0.01F);
      assertNull(catalogLight0.getCurrency());
      assertEquals("_])7g^)gy+P0XH3", catalogLight0.getId());
      assertNull(catalogLight0.getColor());
      assertEquals("/<gAhL`8>", catalogLight0.getDescription());
      assertEquals(1.0F, catalogLight0.getDepth(), 0.01F);
      assertTrue(catalogLight0.isDeformable());
      assertNull(catalogLight0.getInformation());
      assertFalse(catalogLight0.isMovable());
      assertFalse(catalogLight0.isBackFaceShown());
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertNull(catalogLight0.getGrade());
      assertFalse(catalogLight0.isModifiable());
      assertTrue(catalogLight0.isProportional());
      assertNull(catalogLight0.getCreationDate());
      assertEquals((-1.0F), catalogLight0.getHeight(), 0.01F);
      assertEquals(1331.01F, catalogLight0.getWidth(), 0.01F);
      assertTrue(catalogLight0.isResizable());
      assertEquals("DEPTH", catalogLight0.getCreator());
      assertTrue(homeLight0.isResizable());
      assertEquals(1.0F, homeLight0.getDepth(), 0.01F);
      assertEquals("/<gAhL`8>", homeLight0.getDescription());
      assertNull(homeLight0.getShininess());
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertTrue(homeLight0.isVisible());
      assertTrue(homeLight0.isDeformable());
      assertEquals("_])7g^)gy+P0XH3", homeLight0.getName());
      assertEquals(1.0F, homeLight0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertTrue(homeLight0.isTexturable());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      assertEquals(1.0F, homeLight0.getElevation(), 0.01F);
      assertFalse(homeLight0.isBackFaceShown());
      assertEquals(665.505F, homeLight0.getX(), 0.01F);
      assertEquals(0.5F, homeLight0.getY(), 0.01F);
      assertEquals("_])7g^)gy+P0XH3", homeLight0.getCatalogId());
      assertFalse(homeLight0.isNameVisible());
      assertNull(homeLight0.getColor());
      assertFalse(homeLight0.isModelMirrored());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertEquals(1331.01F, homeLight0.getWidth(), 0.01F);
      assertFalse(homeLight0.isMovable());
      assertEquals((-1.0F), homeLight0.getHeight(), 0.01F);
      assertNull(homeLight0.getCurrency());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertTrue(homePieceOfFurniture0.isVisible());
      assertEquals((-1.0F), homePieceOfFurniture0.getHeight(), 0.01F);
      assertEquals("_])7g^)gy+P0XH3", homePieceOfFurniture0.getName());
      assertNull(homePieceOfFurniture0.getCurrency());
      assertFalse(homePieceOfFurniture0.isMovable());
      assertFalse(homePieceOfFurniture0.isNameVisible());
      assertEquals(665.505F, homePieceOfFurniture0.getX(), 0.01F);
      assertFalse(homePieceOfFurniture0.isBackFaceShown());
      assertFalse(homePieceOfFurniture0.isModelMirrored());
      assertEquals(1331.01F, homePieceOfFurniture0.getWidth(), 0.01F);
      assertEquals("_])7g^)gy+P0XH3", homePieceOfFurniture0.getCatalogId());
      assertEquals(0.0F, homePieceOfFurniture0.getNameYOffset(), 0.01F);
      assertNull(homePieceOfFurniture0.getColor());
      assertEquals(1.0F, homePieceOfFurniture0.getElevation(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture0.getAngle(), 0.01F);
      assertTrue(homePieceOfFurniture0.isTexturable());
      assertEquals("/<gAhL`8>", homePieceOfFurniture0.getDescription());
      assertNull(homePieceOfFurniture0.getStaircaseCutOutShape());
      assertTrue(homePieceOfFurniture0.isResizable());
      assertNull(homePieceOfFurniture0.getShininess());
      assertEquals(0.0F, homePieceOfFurniture0.getNameAngle(), 0.01F);
      assertFalse(homePieceOfFurniture0.isDoorOrWindow());
      assertEquals(1.0F, homePieceOfFurniture0.getDepth(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture0.getNameXOffset(), 0.01F);
      assertTrue(homePieceOfFurniture0.isDeformable());
      assertEquals(0.5F, homePieceOfFurniture0.getY(), 0.01F);
      assertEquals(1.0F, homePieceOfFurniture0.getGroundElevation(), 0.01F);
      assertTrue(bigDecimal0.equals((Object)bigDecimal1));
      assertTrue(bigDecimal1.equals((Object)bigDecimal0));
      assertNotNull(homePieceOfFurniture0);
      
      boolean boolean0 = linkedList0.add((HomePieceOfFurniture) homeLight0);
      assertTrue(boolean0);
      assertEquals(1, lightSourceArray0.length);
      assertEquals(4, floatArray0.length);
      assertFalse(linkedList0.contains(homePieceOfFurniture0));
      assertEquals(1, linkedList0.size());
      assertTrue(resourceURLContent0.isMultiPartResource());
      assertEquals((byte) (-1), bigDecimal0.byteValue());
      assertEquals((short) (-1), bigDecimal0.shortValue());
      assertEquals((byte) (-1), bigDecimal1.byteValue());
      assertEquals((short) (-1), bigDecimal1.shortValue());
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertEquals("_])7g^)gy+P0XH3", catalogLight0.getName());
      assertFalse(catalogLight0.isDoorOrWindow());
      assertTrue(catalogLight0.isTexturable());
      assertEquals(1.0F, catalogLight0.getElevation(), 0.01F);
      assertNull(catalogLight0.getCurrency());
      assertEquals("_])7g^)gy+P0XH3", catalogLight0.getId());
      assertNull(catalogLight0.getColor());
      assertEquals("/<gAhL`8>", catalogLight0.getDescription());
      assertEquals(1.0F, catalogLight0.getDepth(), 0.01F);
      assertTrue(catalogLight0.isDeformable());
      assertNull(catalogLight0.getInformation());
      assertFalse(catalogLight0.isMovable());
      assertFalse(catalogLight0.isBackFaceShown());
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertNull(catalogLight0.getGrade());
      assertFalse(catalogLight0.isModifiable());
      assertTrue(catalogLight0.isProportional());
      assertNull(catalogLight0.getCreationDate());
      assertEquals((-1.0F), catalogLight0.getHeight(), 0.01F);
      assertEquals(1331.01F, catalogLight0.getWidth(), 0.01F);
      assertTrue(catalogLight0.isResizable());
      assertEquals("DEPTH", catalogLight0.getCreator());
      assertTrue(homeLight0.isResizable());
      assertEquals(1.0F, homeLight0.getDepth(), 0.01F);
      assertEquals("/<gAhL`8>", homeLight0.getDescription());
      assertNull(homeLight0.getShininess());
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertTrue(homeLight0.isVisible());
      assertTrue(homeLight0.isDeformable());
      assertEquals("_])7g^)gy+P0XH3", homeLight0.getName());
      assertEquals(1.0F, homeLight0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertTrue(homeLight0.isTexturable());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      assertEquals(1.0F, homeLight0.getElevation(), 0.01F);
      assertFalse(homeLight0.isBackFaceShown());
      assertEquals(665.505F, homeLight0.getX(), 0.01F);
      assertEquals(0.5F, homeLight0.getY(), 0.01F);
      assertEquals("_])7g^)gy+P0XH3", homeLight0.getCatalogId());
      assertFalse(homeLight0.isNameVisible());
      assertNull(homeLight0.getColor());
      assertFalse(homeLight0.isModelMirrored());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertEquals(1331.01F, homeLight0.getWidth(), 0.01F);
      assertFalse(homeLight0.isMovable());
      assertEquals((-1.0F), homeLight0.getHeight(), 0.01F);
      assertNull(homeLight0.getCurrency());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertTrue(bigDecimal0.equals((Object)bigDecimal1));
      assertTrue(bigDecimal1.equals((Object)bigDecimal0));
      assertNotSame(bigDecimal0, bigDecimal1);
      assertNotSame(bigDecimal1, bigDecimal0);
      
      PropertyChangeListener propertyChangeListener0 = mock(PropertyChangeListener.class, new ViolatedAssumptionAnswer());
      PropertyChangeListenerProxy propertyChangeListenerProxy0 = new PropertyChangeListenerProxy("", propertyChangeListener0);
      assertEquals("", propertyChangeListenerProxy0.getPropertyName());
      assertNotNull(propertyChangeListenerProxy0);
      
      PropertyChangeListenerProxy propertyChangeListenerProxy1 = new PropertyChangeListenerProxy("", propertyChangeListenerProxy0);
      assertEquals("", propertyChangeListenerProxy0.getPropertyName());
      assertEquals("", propertyChangeListenerProxy1.getPropertyName());
      assertFalse(propertyChangeListenerProxy1.equals((Object)propertyChangeListenerProxy0));
      assertNotNull(propertyChangeListenerProxy1);
      
      HomeFurnitureGroup homeFurnitureGroup0 = new HomeFurnitureGroup(linkedList0, "");
      assertFalse(linkedList0.contains(homePieceOfFurniture0));
      assertEquals(1, linkedList0.size());
      assertNull(homeFurnitureGroup0.getDescription());
      assertEquals(1.0F, homeFurnitureGroup0.getElevation(), 0.01F);
      assertTrue(homeFurnitureGroup0.isResizable());
      assertEquals(1.0F, homeFurnitureGroup0.getDepth(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getNameXOffset(), 0.01F);
      assertNull(homeFurnitureGroup0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeFurnitureGroup0.getNameAngle(), 0.01F);
      assertTrue(homeFurnitureGroup0.isDeformable());
      assertEquals(1.0F, homeFurnitureGroup0.getGroundElevation(), 0.01F);
      assertEquals((-1.0F), homeFurnitureGroup0.getHeight(), 0.01F);
      assertNull(homeFurnitureGroup0.getShininess());
      assertEquals(1331.01F, homeFurnitureGroup0.getWidth(), 0.01F);
      assertFalse(homeFurnitureGroup0.isMovable());
      assertNull(homeFurnitureGroup0.getCatalogId());
      assertEquals(0.0F, homeFurnitureGroup0.getNameYOffset(), 0.01F);
      assertTrue(homeFurnitureGroup0.isVisible());
      assertNull(homeFurnitureGroup0.getColor());
      assertFalse(homeFurnitureGroup0.isModelMirrored());
      assertEquals(0.5F, homeFurnitureGroup0.getY(), 0.01F);
      assertEquals(665.505F, homeFurnitureGroup0.getX(), 0.01F);
      assertTrue(homeFurnitureGroup0.isTexturable());
      assertEquals(0.0F, homeFurnitureGroup0.getAngle(), 0.01F);
      assertFalse(homeFurnitureGroup0.isBackFaceShown());
      assertFalse(homeFurnitureGroup0.isNameVisible());
      assertNull(homeFurnitureGroup0.getCurrency());
      assertEquals("", homeFurnitureGroup0.getName());
      assertFalse(homeFurnitureGroup0.isDoorOrWindow());
      assertNotNull(homeFurnitureGroup0);
      
      HomeFurnitureGroup homeFurnitureGroup1 = homeFurnitureGroup0.clone();
      assertFalse(linkedList0.contains(homePieceOfFurniture0));
      assertEquals(1, linkedList0.size());
      assertNull(homeFurnitureGroup0.getDescription());
      assertEquals(1.0F, homeFurnitureGroup0.getElevation(), 0.01F);
      assertTrue(homeFurnitureGroup0.isResizable());
      assertEquals(1.0F, homeFurnitureGroup0.getDepth(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getNameXOffset(), 0.01F);
      assertNull(homeFurnitureGroup0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeFurnitureGroup0.getNameAngle(), 0.01F);
      assertTrue(homeFurnitureGroup0.isDeformable());
      assertEquals(1.0F, homeFurnitureGroup0.getGroundElevation(), 0.01F);
      assertEquals((-1.0F), homeFurnitureGroup0.getHeight(), 0.01F);
      assertNull(homeFurnitureGroup0.getShininess());
      assertEquals(1331.01F, homeFurnitureGroup0.getWidth(), 0.01F);
      assertFalse(homeFurnitureGroup0.isMovable());
      assertNull(homeFurnitureGroup0.getCatalogId());
      assertEquals(0.0F, homeFurnitureGroup0.getNameYOffset(), 0.01F);
      assertTrue(homeFurnitureGroup0.isVisible());
      assertNull(homeFurnitureGroup0.getColor());
      assertFalse(homeFurnitureGroup0.isModelMirrored());
      assertEquals(0.5F, homeFurnitureGroup0.getY(), 0.01F);
      assertEquals(665.505F, homeFurnitureGroup0.getX(), 0.01F);
      assertTrue(homeFurnitureGroup0.isTexturable());
      assertEquals(0.0F, homeFurnitureGroup0.getAngle(), 0.01F);
      assertFalse(homeFurnitureGroup0.isBackFaceShown());
      assertFalse(homeFurnitureGroup0.isNameVisible());
      assertNull(homeFurnitureGroup0.getCurrency());
      assertEquals("", homeFurnitureGroup0.getName());
      assertFalse(homeFurnitureGroup0.isDoorOrWindow());
      assertFalse(homeFurnitureGroup1.isDoorOrWindow());
      assertEquals(0.0F, homeFurnitureGroup1.getAngle(), 0.01F);
      assertEquals(1.0F, homeFurnitureGroup1.getGroundElevation(), 0.01F);
      assertTrue(homeFurnitureGroup1.isDeformable());
      assertTrue(homeFurnitureGroup1.isResizable());
      assertEquals(1.0F, homeFurnitureGroup1.getDepth(), 0.01F);
      assertFalse(homeFurnitureGroup1.isModelMirrored());
      assertEquals(1331.01F, homeFurnitureGroup1.getWidth(), 0.01F);
      assertNull(homeFurnitureGroup1.getStaircaseCutOutShape());
      assertEquals(665.505F, homeFurnitureGroup1.getX(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup1.getNameAngle(), 0.01F);
      assertFalse(homeFurnitureGroup1.isBackFaceShown());
      assertEquals("", homeFurnitureGroup1.getName());
      assertFalse(homeFurnitureGroup1.isNameVisible());
      assertEquals(1.0F, homeFurnitureGroup1.getElevation(), 0.01F);
      assertEquals(0.5F, homeFurnitureGroup1.getY(), 0.01F);
      assertNull(homeFurnitureGroup1.getDescription());
      assertEquals(0.0F, homeFurnitureGroup1.getNameXOffset(), 0.01F);
      assertTrue(homeFurnitureGroup1.isTexturable());
      assertNull(homeFurnitureGroup1.getCatalogId());
      assertNull(homeFurnitureGroup1.getShininess());
      assertTrue(homeFurnitureGroup1.isVisible());
      assertNull(homeFurnitureGroup1.getCurrency());
      assertNull(homeFurnitureGroup1.getColor());
      assertEquals((-1.0F), homeFurnitureGroup1.getHeight(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup1.getNameYOffset(), 0.01F);
      assertFalse(homeFurnitureGroup1.isMovable());
      assertFalse(homeFurnitureGroup1.equals((Object)homeFurnitureGroup0));
      assertNotNull(homeFurnitureGroup1);
      assertNotSame(homeFurnitureGroup0, homeFurnitureGroup1);
      assertNotSame(homeFurnitureGroup1, homeFurnitureGroup0);
      
      homeFurnitureGroup1.addPropertyChangeListener(propertyChangeListenerProxy1);
      assertFalse(linkedList0.contains(homePieceOfFurniture0));
      assertEquals(1, linkedList0.size());
      assertEquals("", propertyChangeListenerProxy0.getPropertyName());
      assertEquals("", propertyChangeListenerProxy1.getPropertyName());
      assertNull(homeFurnitureGroup0.getDescription());
      assertEquals(1.0F, homeFurnitureGroup0.getElevation(), 0.01F);
      assertTrue(homeFurnitureGroup0.isResizable());
      assertEquals(1.0F, homeFurnitureGroup0.getDepth(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getNameXOffset(), 0.01F);
      assertNull(homeFurnitureGroup0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeFurnitureGroup0.getNameAngle(), 0.01F);
      assertTrue(homeFurnitureGroup0.isDeformable());
      assertEquals(1.0F, homeFurnitureGroup0.getGroundElevation(), 0.01F);
      assertEquals((-1.0F), homeFurnitureGroup0.getHeight(), 0.01F);
      assertNull(homeFurnitureGroup0.getShininess());
      assertEquals(1331.01F, homeFurnitureGroup0.getWidth(), 0.01F);
      assertFalse(homeFurnitureGroup0.isMovable());
      assertNull(homeFurnitureGroup0.getCatalogId());
      assertEquals(0.0F, homeFurnitureGroup0.getNameYOffset(), 0.01F);
      assertTrue(homeFurnitureGroup0.isVisible());
      assertNull(homeFurnitureGroup0.getColor());
      assertFalse(homeFurnitureGroup0.isModelMirrored());
      assertEquals(0.5F, homeFurnitureGroup0.getY(), 0.01F);
      assertEquals(665.505F, homeFurnitureGroup0.getX(), 0.01F);
      assertTrue(homeFurnitureGroup0.isTexturable());
      assertEquals(0.0F, homeFurnitureGroup0.getAngle(), 0.01F);
      assertFalse(homeFurnitureGroup0.isBackFaceShown());
      assertFalse(homeFurnitureGroup0.isNameVisible());
      assertNull(homeFurnitureGroup0.getCurrency());
      assertEquals("", homeFurnitureGroup0.getName());
      assertFalse(homeFurnitureGroup0.isDoorOrWindow());
      assertFalse(homeFurnitureGroup1.isDoorOrWindow());
      assertEquals(0.0F, homeFurnitureGroup1.getAngle(), 0.01F);
      assertEquals(1.0F, homeFurnitureGroup1.getGroundElevation(), 0.01F);
      assertTrue(homeFurnitureGroup1.isDeformable());
      assertTrue(homeFurnitureGroup1.isResizable());
      assertEquals(1.0F, homeFurnitureGroup1.getDepth(), 0.01F);
      assertFalse(homeFurnitureGroup1.isModelMirrored());
      assertEquals(1331.01F, homeFurnitureGroup1.getWidth(), 0.01F);
      assertNull(homeFurnitureGroup1.getStaircaseCutOutShape());
      assertEquals(665.505F, homeFurnitureGroup1.getX(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup1.getNameAngle(), 0.01F);
      assertFalse(homeFurnitureGroup1.isBackFaceShown());
      assertEquals("", homeFurnitureGroup1.getName());
      assertFalse(homeFurnitureGroup1.isNameVisible());
      assertEquals(1.0F, homeFurnitureGroup1.getElevation(), 0.01F);
      assertEquals(0.5F, homeFurnitureGroup1.getY(), 0.01F);
      assertNull(homeFurnitureGroup1.getDescription());
      assertEquals(0.0F, homeFurnitureGroup1.getNameXOffset(), 0.01F);
      assertTrue(homeFurnitureGroup1.isTexturable());
      assertNull(homeFurnitureGroup1.getCatalogId());
      assertNull(homeFurnitureGroup1.getShininess());
      assertTrue(homeFurnitureGroup1.isVisible());
      assertNull(homeFurnitureGroup1.getCurrency());
      assertNull(homeFurnitureGroup1.getColor());
      assertEquals((-1.0F), homeFurnitureGroup1.getHeight(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup1.getNameYOffset(), 0.01F);
      assertFalse(homeFurnitureGroup1.isMovable());
      assertFalse(propertyChangeListenerProxy0.equals((Object)propertyChangeListenerProxy1));
      assertFalse(propertyChangeListenerProxy1.equals((Object)propertyChangeListenerProxy0));
      assertFalse(homeFurnitureGroup0.equals((Object)homeFurnitureGroup1));
      assertFalse(homeFurnitureGroup1.equals((Object)homeFurnitureGroup0));
      assertNotSame(propertyChangeListenerProxy0, propertyChangeListenerProxy1);
      assertNotSame(propertyChangeListenerProxy1, propertyChangeListenerProxy0);
      assertNotSame(homeFurnitureGroup0, homeFurnitureGroup1);
      assertNotSame(homeFurnitureGroup1, homeFurnitureGroup0);
      
      String string0 = homeFurnitureGroup1.getCatalogId();
      assertFalse(linkedList0.contains(homePieceOfFurniture0));
      assertEquals(1, linkedList0.size());
      assertNull(homeFurnitureGroup0.getDescription());
      assertEquals(1.0F, homeFurnitureGroup0.getElevation(), 0.01F);
      assertTrue(homeFurnitureGroup0.isResizable());
      assertEquals(1.0F, homeFurnitureGroup0.getDepth(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getNameXOffset(), 0.01F);
      assertNull(homeFurnitureGroup0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeFurnitureGroup0.getNameAngle(), 0.01F);
      assertTrue(homeFurnitureGroup0.isDeformable());
      assertEquals(1.0F, homeFurnitureGroup0.getGroundElevation(), 0.01F);
      assertEquals((-1.0F), homeFurnitureGroup0.getHeight(), 0.01F);
      assertNull(homeFurnitureGroup0.getShininess());
      assertEquals(1331.01F, homeFurnitureGroup0.getWidth(), 0.01F);
      assertFalse(homeFurnitureGroup0.isMovable());
      assertNull(homeFurnitureGroup0.getCatalogId());
      assertEquals(0.0F, homeFurnitureGroup0.getNameYOffset(), 0.01F);
      assertTrue(homeFurnitureGroup0.isVisible());
      assertNull(homeFurnitureGroup0.getColor());
      assertFalse(homeFurnitureGroup0.isModelMirrored());
      assertEquals(0.5F, homeFurnitureGroup0.getY(), 0.01F);
      assertEquals(665.505F, homeFurnitureGroup0.getX(), 0.01F);
      assertTrue(homeFurnitureGroup0.isTexturable());
      assertEquals(0.0F, homeFurnitureGroup0.getAngle(), 0.01F);
      assertFalse(homeFurnitureGroup0.isBackFaceShown());
      assertFalse(homeFurnitureGroup0.isNameVisible());
      assertNull(homeFurnitureGroup0.getCurrency());
      assertEquals("", homeFurnitureGroup0.getName());
      assertFalse(homeFurnitureGroup0.isDoorOrWindow());
      assertFalse(homeFurnitureGroup1.isDoorOrWindow());
      assertEquals(0.0F, homeFurnitureGroup1.getAngle(), 0.01F);
      assertEquals(1.0F, homeFurnitureGroup1.getGroundElevation(), 0.01F);
      assertTrue(homeFurnitureGroup1.isDeformable());
      assertTrue(homeFurnitureGroup1.isResizable());
      assertEquals(1.0F, homeFurnitureGroup1.getDepth(), 0.01F);
      assertFalse(homeFurnitureGroup1.isModelMirrored());
      assertEquals(1331.01F, homeFurnitureGroup1.getWidth(), 0.01F);
      assertNull(homeFurnitureGroup1.getStaircaseCutOutShape());
      assertEquals(665.505F, homeFurnitureGroup1.getX(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup1.getNameAngle(), 0.01F);
      assertFalse(homeFurnitureGroup1.isBackFaceShown());
      assertEquals("", homeFurnitureGroup1.getName());
      assertFalse(homeFurnitureGroup1.isNameVisible());
      assertEquals(1.0F, homeFurnitureGroup1.getElevation(), 0.01F);
      assertEquals(0.5F, homeFurnitureGroup1.getY(), 0.01F);
      assertNull(homeFurnitureGroup1.getDescription());
      assertEquals(0.0F, homeFurnitureGroup1.getNameXOffset(), 0.01F);
      assertTrue(homeFurnitureGroup1.isTexturable());
      assertNull(homeFurnitureGroup1.getCatalogId());
      assertNull(homeFurnitureGroup1.getShininess());
      assertTrue(homeFurnitureGroup1.isVisible());
      assertNull(homeFurnitureGroup1.getCurrency());
      assertNull(homeFurnitureGroup1.getColor());
      assertEquals((-1.0F), homeFurnitureGroup1.getHeight(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup1.getNameYOffset(), 0.01F);
      assertFalse(homeFurnitureGroup1.isMovable());
      assertFalse(homeFurnitureGroup0.equals((Object)homeFurnitureGroup1));
      assertFalse(homeFurnitureGroup1.equals((Object)homeFurnitureGroup0));
      assertNull(string0);
      assertNotSame(homeFurnitureGroup0, homeFurnitureGroup1);
      assertNotSame(homeFurnitureGroup1, homeFurnitureGroup0);
      
      boolean boolean1 = homeFurnitureGroup1.isDoorOrWindow();
      assertFalse(boolean1);
      assertFalse(linkedList0.contains(homePieceOfFurniture0));
      assertEquals(1, linkedList0.size());
      assertNull(homeFurnitureGroup0.getDescription());
      assertEquals(1.0F, homeFurnitureGroup0.getElevation(), 0.01F);
      assertTrue(homeFurnitureGroup0.isResizable());
      assertEquals(1.0F, homeFurnitureGroup0.getDepth(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getNameXOffset(), 0.01F);
      assertNull(homeFurnitureGroup0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeFurnitureGroup0.getNameAngle(), 0.01F);
      assertTrue(homeFurnitureGroup0.isDeformable());
      assertEquals(1.0F, homeFurnitureGroup0.getGroundElevation(), 0.01F);
      assertEquals((-1.0F), homeFurnitureGroup0.getHeight(), 0.01F);
      assertNull(homeFurnitureGroup0.getShininess());
      assertEquals(1331.01F, homeFurnitureGroup0.getWidth(), 0.01F);
      assertFalse(homeFurnitureGroup0.isMovable());
      assertNull(homeFurnitureGroup0.getCatalogId());
      assertEquals(0.0F, homeFurnitureGroup0.getNameYOffset(), 0.01F);
      assertTrue(homeFurnitureGroup0.isVisible());
      assertNull(homeFurnitureGroup0.getColor());
      assertFalse(homeFurnitureGroup0.isModelMirrored());
      assertEquals(0.5F, homeFurnitureGroup0.getY(), 0.01F);
      assertEquals(665.505F, homeFurnitureGroup0.getX(), 0.01F);
      assertTrue(homeFurnitureGroup0.isTexturable());
      assertEquals(0.0F, homeFurnitureGroup0.getAngle(), 0.01F);
      assertFalse(homeFurnitureGroup0.isBackFaceShown());
      assertFalse(homeFurnitureGroup0.isNameVisible());
      assertNull(homeFurnitureGroup0.getCurrency());
      assertEquals("", homeFurnitureGroup0.getName());
      assertFalse(homeFurnitureGroup0.isDoorOrWindow());
      assertFalse(homeFurnitureGroup1.isDoorOrWindow());
      assertEquals(0.0F, homeFurnitureGroup1.getAngle(), 0.01F);
      assertEquals(1.0F, homeFurnitureGroup1.getGroundElevation(), 0.01F);
      assertTrue(homeFurnitureGroup1.isDeformable());
      assertTrue(homeFurnitureGroup1.isResizable());
      assertEquals(1.0F, homeFurnitureGroup1.getDepth(), 0.01F);
      assertFalse(homeFurnitureGroup1.isModelMirrored());
      assertEquals(1331.01F, homeFurnitureGroup1.getWidth(), 0.01F);
      assertNull(homeFurnitureGroup1.getStaircaseCutOutShape());
      assertEquals(665.505F, homeFurnitureGroup1.getX(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup1.getNameAngle(), 0.01F);
      assertFalse(homeFurnitureGroup1.isBackFaceShown());
      assertEquals("", homeFurnitureGroup1.getName());
      assertFalse(homeFurnitureGroup1.isNameVisible());
      assertEquals(1.0F, homeFurnitureGroup1.getElevation(), 0.01F);
      assertEquals(0.5F, homeFurnitureGroup1.getY(), 0.01F);
      assertNull(homeFurnitureGroup1.getDescription());
      assertEquals(0.0F, homeFurnitureGroup1.getNameXOffset(), 0.01F);
      assertTrue(homeFurnitureGroup1.isTexturable());
      assertNull(homeFurnitureGroup1.getCatalogId());
      assertNull(homeFurnitureGroup1.getShininess());
      assertTrue(homeFurnitureGroup1.isVisible());
      assertNull(homeFurnitureGroup1.getCurrency());
      assertNull(homeFurnitureGroup1.getColor());
      assertEquals((-1.0F), homeFurnitureGroup1.getHeight(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup1.getNameYOffset(), 0.01F);
      assertFalse(homeFurnitureGroup1.isMovable());
      assertFalse(boolean1 == boolean0);
      assertFalse(homeFurnitureGroup0.equals((Object)homeFurnitureGroup1));
      assertFalse(homeFurnitureGroup1.equals((Object)homeFurnitureGroup0));
      assertNotSame(homeFurnitureGroup0, homeFurnitureGroup1);
      assertNotSame(homeFurnitureGroup1, homeFurnitureGroup0);
      
      boolean boolean2 = homeFurnitureGroup0.containsPoint(0.0F, (-852.3583F), 0.0F);
      assertFalse(boolean2);
      assertFalse(linkedList0.contains(homePieceOfFurniture0));
      assertEquals(1, linkedList0.size());
      assertNull(homeFurnitureGroup0.getDescription());
      assertEquals(1.0F, homeFurnitureGroup0.getElevation(), 0.01F);
      assertTrue(homeFurnitureGroup0.isResizable());
      assertEquals(1.0F, homeFurnitureGroup0.getDepth(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getNameXOffset(), 0.01F);
      assertNull(homeFurnitureGroup0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeFurnitureGroup0.getNameAngle(), 0.01F);
      assertTrue(homeFurnitureGroup0.isDeformable());
      assertEquals(1.0F, homeFurnitureGroup0.getGroundElevation(), 0.01F);
      assertEquals((-1.0F), homeFurnitureGroup0.getHeight(), 0.01F);
      assertNull(homeFurnitureGroup0.getShininess());
      assertEquals(1331.01F, homeFurnitureGroup0.getWidth(), 0.01F);
      assertFalse(homeFurnitureGroup0.isMovable());
      assertNull(homeFurnitureGroup0.getCatalogId());
      assertEquals(0.0F, homeFurnitureGroup0.getNameYOffset(), 0.01F);
      assertTrue(homeFurnitureGroup0.isVisible());
      assertNull(homeFurnitureGroup0.getColor());
      assertFalse(homeFurnitureGroup0.isModelMirrored());
      assertEquals(0.5F, homeFurnitureGroup0.getY(), 0.01F);
      assertEquals(665.505F, homeFurnitureGroup0.getX(), 0.01F);
      assertTrue(homeFurnitureGroup0.isTexturable());
      assertEquals(0.0F, homeFurnitureGroup0.getAngle(), 0.01F);
      assertFalse(homeFurnitureGroup0.isBackFaceShown());
      assertFalse(homeFurnitureGroup0.isNameVisible());
      assertNull(homeFurnitureGroup0.getCurrency());
      assertEquals("", homeFurnitureGroup0.getName());
      assertFalse(homeFurnitureGroup0.isDoorOrWindow());
      assertFalse(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertFalse(homeFurnitureGroup0.equals((Object)homeFurnitureGroup1));
      assertNotSame(homeFurnitureGroup0, homeFurnitureGroup1);
      
      BigDecimal bigDecimal2 = homeFurnitureGroup0.getValueAddedTax();
      assertFalse(linkedList0.contains(homePieceOfFurniture0));
      assertEquals(1, linkedList0.size());
      assertEquals((byte)1, bigDecimal2.byteValue());
      assertEquals((short)1, bigDecimal2.shortValue());
      assertNull(homeFurnitureGroup0.getDescription());
      assertEquals(1.0F, homeFurnitureGroup0.getElevation(), 0.01F);
      assertTrue(homeFurnitureGroup0.isResizable());
      assertEquals(1.0F, homeFurnitureGroup0.getDepth(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getNameXOffset(), 0.01F);
      assertNull(homeFurnitureGroup0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeFurnitureGroup0.getNameAngle(), 0.01F);
      assertTrue(homeFurnitureGroup0.isDeformable());
      assertEquals(1.0F, homeFurnitureGroup0.getGroundElevation(), 0.01F);
      assertEquals((-1.0F), homeFurnitureGroup0.getHeight(), 0.01F);
      assertNull(homeFurnitureGroup0.getShininess());
      assertEquals(1331.01F, homeFurnitureGroup0.getWidth(), 0.01F);
      assertFalse(homeFurnitureGroup0.isMovable());
      assertNull(homeFurnitureGroup0.getCatalogId());
      assertEquals(0.0F, homeFurnitureGroup0.getNameYOffset(), 0.01F);
      assertTrue(homeFurnitureGroup0.isVisible());
      assertNull(homeFurnitureGroup0.getColor());
      assertFalse(homeFurnitureGroup0.isModelMirrored());
      assertEquals(0.5F, homeFurnitureGroup0.getY(), 0.01F);
      assertEquals(665.505F, homeFurnitureGroup0.getX(), 0.01F);
      assertTrue(homeFurnitureGroup0.isTexturable());
      assertEquals(0.0F, homeFurnitureGroup0.getAngle(), 0.01F);
      assertFalse(homeFurnitureGroup0.isBackFaceShown());
      assertFalse(homeFurnitureGroup0.isNameVisible());
      assertNull(homeFurnitureGroup0.getCurrency());
      assertEquals("", homeFurnitureGroup0.getName());
      assertFalse(homeFurnitureGroup0.isDoorOrWindow());
      assertFalse(bigDecimal2.equals((Object)bigDecimal1));
      assertFalse(bigDecimal2.equals((Object)bigDecimal0));
      assertFalse(homeFurnitureGroup0.equals((Object)homeFurnitureGroup1));
      assertNotNull(bigDecimal2);
      assertNotSame(bigDecimal2, bigDecimal1);
      assertNotSame(bigDecimal2, bigDecimal0);
      assertNotSame(homeFurnitureGroup0, homeFurnitureGroup1);
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      LinkedList<HomePieceOfFurniture> linkedList0 = new LinkedList<HomePieceOfFurniture>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      ResourceURLContent resourceURLContent0 = new ResourceURLContent((URL) null, true);
      assertTrue(resourceURLContent0.isMultiPartResource());
      assertNotNull(resourceURLContent0);
      
      LightSource[] lightSourceArray0 = new LightSource[1];
      Float float0 = new Float(0.0);
      assertEquals(0.0F, (float)float0, 0.01F);
      assertNotNull(float0);
      
      LightSource lightSource0 = new LightSource(2874.8F, 1.0F, 1331.01F, 2001, float0);
      assertEquals(0.0F, lightSource0.getDiameter(), 0.01F);
      assertEquals(1331.01F, lightSource0.getZ(), 0.01F);
      assertEquals(2874.8F, lightSource0.getX(), 0.01F);
      assertEquals(1.0F, lightSource0.getY(), 0.01F);
      assertEquals(2001, lightSource0.getColor());
      assertNotNull(lightSource0);
      
      lightSourceArray0[0] = lightSource0;
      float[][] floatArray0 = new float[4][6];
      BigDecimal bigDecimal0 = new BigDecimal((long) 2001);
      assertEquals((byte) (-47), bigDecimal0.byteValue());
      assertEquals((short)2001, bigDecimal0.shortValue());
      assertNotNull(bigDecimal0);
      
      CatalogLight catalogLight0 = new CatalogLight("9", "DEPTH", "DEPTH", resourceURLContent0, resourceURLContent0, resourceURLContent0, 0.3926991F, 2001.0F, 1.0F, (-2885.0872F), true, lightSourceArray0, floatArray0, "DEPTH", true, bigDecimal0, bigDecimal0);
      assertEquals(1, lightSourceArray0.length);
      assertEquals(4, floatArray0.length);
      assertTrue(resourceURLContent0.isMultiPartResource());
      assertEquals((byte) (-47), bigDecimal0.byteValue());
      assertEquals((short)2001, bigDecimal0.shortValue());
      assertFalse(catalogLight0.isDoorOrWindow());
      assertTrue(catalogLight0.isTexturable());
      assertEquals("DEPTH", catalogLight0.getName());
      assertEquals(1.0F, catalogLight0.getHeight(), 0.01F);
      assertEquals("DEPTH", catalogLight0.getCreator());
      assertEquals("DEPTH", catalogLight0.getDescription());
      assertNull(catalogLight0.getGrade());
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertNull(catalogLight0.getCurrency());
      assertTrue(catalogLight0.isProportional());
      assertTrue(catalogLight0.isMovable());
      assertEquals(2001.0F, catalogLight0.getDepth(), 0.01F);
      assertTrue(catalogLight0.isDeformable());
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertNull(catalogLight0.getInformation());
      assertEquals((-2885.0872F), catalogLight0.getElevation(), 0.01F);
      assertEquals("9", catalogLight0.getId());
      assertNull(catalogLight0.getColor());
      assertFalse(catalogLight0.isBackFaceShown());
      assertEquals(0.3926991F, catalogLight0.getWidth(), 0.01F);
      assertTrue(catalogLight0.isResizable());
      assertFalse(catalogLight0.isModifiable());
      assertNull(catalogLight0.getCreationDate());
      assertNotNull(catalogLight0);
      
      HomeLight homeLight0 = new HomeLight(catalogLight0);
      assertEquals(1, lightSourceArray0.length);
      assertEquals(4, floatArray0.length);
      assertTrue(resourceURLContent0.isMultiPartResource());
      assertEquals((byte) (-47), bigDecimal0.byteValue());
      assertEquals((short)2001, bigDecimal0.shortValue());
      assertFalse(catalogLight0.isDoorOrWindow());
      assertTrue(catalogLight0.isTexturable());
      assertEquals("DEPTH", catalogLight0.getName());
      assertEquals(1.0F, catalogLight0.getHeight(), 0.01F);
      assertEquals("DEPTH", catalogLight0.getCreator());
      assertEquals("DEPTH", catalogLight0.getDescription());
      assertNull(catalogLight0.getGrade());
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertNull(catalogLight0.getCurrency());
      assertTrue(catalogLight0.isProportional());
      assertTrue(catalogLight0.isMovable());
      assertEquals(2001.0F, catalogLight0.getDepth(), 0.01F);
      assertTrue(catalogLight0.isDeformable());
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertNull(catalogLight0.getInformation());
      assertEquals((-2885.0872F), catalogLight0.getElevation(), 0.01F);
      assertEquals("9", catalogLight0.getId());
      assertNull(catalogLight0.getColor());
      assertFalse(catalogLight0.isBackFaceShown());
      assertEquals(0.3926991F, catalogLight0.getWidth(), 0.01F);
      assertTrue(catalogLight0.isResizable());
      assertFalse(catalogLight0.isModifiable());
      assertNull(catalogLight0.getCreationDate());
      assertNull(homeLight0.getColor());
      assertFalse(homeLight0.isNameVisible());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      assertNull(homeLight0.getCurrency());
      assertTrue(homeLight0.isTexturable());
      assertEquals(0.3926991F, homeLight0.getWidth(), 0.01F);
      assertEquals("9", homeLight0.getCatalogId());
      assertEquals(1.0F, homeLight0.getHeight(), 0.01F);
      assertTrue(homeLight0.isDeformable());
      assertTrue(homeLight0.isMovable());
      assertTrue(homeLight0.isVisible());
      assertNull(homeLight0.getShininess());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals("DEPTH", homeLight0.getName());
      assertTrue(homeLight0.isResizable());
      assertEquals(0.19634955F, homeLight0.getX(), 0.01F);
      assertEquals("DEPTH", homeLight0.getDescription());
      assertEquals(2001.0F, homeLight0.getDepth(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals(1000.5F, homeLight0.getY(), 0.01F);
      assertEquals((-2885.0872F), homeLight0.getElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertEquals((-2885.0872F), homeLight0.getGroundElevation(), 0.01F);
      assertFalse(homeLight0.isModelMirrored());
      assertFalse(homeLight0.isBackFaceShown());
      assertNotNull(homeLight0);
      
      HomePieceOfFurniture homePieceOfFurniture0 = new HomePieceOfFurniture(catalogLight0);
      assertEquals(1, lightSourceArray0.length);
      assertEquals(4, floatArray0.length);
      assertTrue(resourceURLContent0.isMultiPartResource());
      assertEquals((byte) (-47), bigDecimal0.byteValue());
      assertEquals((short)2001, bigDecimal0.shortValue());
      assertFalse(catalogLight0.isDoorOrWindow());
      assertTrue(catalogLight0.isTexturable());
      assertEquals("DEPTH", catalogLight0.getName());
      assertEquals(1.0F, catalogLight0.getHeight(), 0.01F);
      assertEquals("DEPTH", catalogLight0.getCreator());
      assertEquals("DEPTH", catalogLight0.getDescription());
      assertNull(catalogLight0.getGrade());
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertNull(catalogLight0.getCurrency());
      assertTrue(catalogLight0.isProportional());
      assertTrue(catalogLight0.isMovable());
      assertEquals(2001.0F, catalogLight0.getDepth(), 0.01F);
      assertTrue(catalogLight0.isDeformable());
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertNull(catalogLight0.getInformation());
      assertEquals((-2885.0872F), catalogLight0.getElevation(), 0.01F);
      assertEquals("9", catalogLight0.getId());
      assertNull(catalogLight0.getColor());
      assertFalse(catalogLight0.isBackFaceShown());
      assertEquals(0.3926991F, catalogLight0.getWidth(), 0.01F);
      assertTrue(catalogLight0.isResizable());
      assertFalse(catalogLight0.isModifiable());
      assertNull(catalogLight0.getCreationDate());
      assertEquals(0.0F, homePieceOfFurniture0.getAngle(), 0.01F);
      assertEquals(1000.5F, homePieceOfFurniture0.getY(), 0.01F);
      assertFalse(homePieceOfFurniture0.isDoorOrWindow());
      assertTrue(homePieceOfFurniture0.isTexturable());
      assertEquals(0.3926991F, homePieceOfFurniture0.getWidth(), 0.01F);
      assertEquals("DEPTH", homePieceOfFurniture0.getName());
      assertEquals(0.19634955F, homePieceOfFurniture0.getX(), 0.01F);
      assertNull(homePieceOfFurniture0.getColor());
      assertFalse(homePieceOfFurniture0.isNameVisible());
      assertEquals(0.0F, homePieceOfFurniture0.getNameYOffset(), 0.01F);
      assertFalse(homePieceOfFurniture0.isBackFaceShown());
      assertEquals((-2885.0872F), homePieceOfFurniture0.getElevation(), 0.01F);
      assertFalse(homePieceOfFurniture0.isModelMirrored());
      assertEquals(1.0F, homePieceOfFurniture0.getHeight(), 0.01F);
      assertEquals((-2885.0872F), homePieceOfFurniture0.getGroundElevation(), 0.01F);
      assertEquals(2001.0F, homePieceOfFurniture0.getDepth(), 0.01F);
      assertEquals("9", homePieceOfFurniture0.getCatalogId());
      assertNull(homePieceOfFurniture0.getCurrency());
      assertEquals(0.0F, homePieceOfFurniture0.getNameXOffset(), 0.01F);
      assertEquals("DEPTH", homePieceOfFurniture0.getDescription());
      assertTrue(homePieceOfFurniture0.isMovable());
      assertTrue(homePieceOfFurniture0.isVisible());
      assertTrue(homePieceOfFurniture0.isDeformable());
      assertTrue(homePieceOfFurniture0.isResizable());
      assertEquals(0.0F, homePieceOfFurniture0.getNameAngle(), 0.01F);
      assertNull(homePieceOfFurniture0.getShininess());
      assertNull(homePieceOfFurniture0.getStaircaseCutOutShape());
      assertNotNull(homePieceOfFurniture0);
      
      boolean boolean0 = linkedList0.add((HomePieceOfFurniture) homeLight0);
      assertTrue(boolean0);
      assertEquals(1, lightSourceArray0.length);
      assertEquals(4, floatArray0.length);
      assertFalse(linkedList0.contains(homePieceOfFurniture0));
      assertEquals(1, linkedList0.size());
      assertTrue(resourceURLContent0.isMultiPartResource());
      assertEquals((byte) (-47), bigDecimal0.byteValue());
      assertEquals((short)2001, bigDecimal0.shortValue());
      assertFalse(catalogLight0.isDoorOrWindow());
      assertTrue(catalogLight0.isTexturable());
      assertEquals("DEPTH", catalogLight0.getName());
      assertEquals(1.0F, catalogLight0.getHeight(), 0.01F);
      assertEquals("DEPTH", catalogLight0.getCreator());
      assertEquals("DEPTH", catalogLight0.getDescription());
      assertNull(catalogLight0.getGrade());
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertNull(catalogLight0.getCurrency());
      assertTrue(catalogLight0.isProportional());
      assertTrue(catalogLight0.isMovable());
      assertEquals(2001.0F, catalogLight0.getDepth(), 0.01F);
      assertTrue(catalogLight0.isDeformable());
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertNull(catalogLight0.getInformation());
      assertEquals((-2885.0872F), catalogLight0.getElevation(), 0.01F);
      assertEquals("9", catalogLight0.getId());
      assertNull(catalogLight0.getColor());
      assertFalse(catalogLight0.isBackFaceShown());
      assertEquals(0.3926991F, catalogLight0.getWidth(), 0.01F);
      assertTrue(catalogLight0.isResizable());
      assertFalse(catalogLight0.isModifiable());
      assertNull(catalogLight0.getCreationDate());
      assertNull(homeLight0.getColor());
      assertFalse(homeLight0.isNameVisible());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      assertNull(homeLight0.getCurrency());
      assertTrue(homeLight0.isTexturable());
      assertEquals(0.3926991F, homeLight0.getWidth(), 0.01F);
      assertEquals("9", homeLight0.getCatalogId());
      assertEquals(1.0F, homeLight0.getHeight(), 0.01F);
      assertTrue(homeLight0.isDeformable());
      assertTrue(homeLight0.isMovable());
      assertTrue(homeLight0.isVisible());
      assertNull(homeLight0.getShininess());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals("DEPTH", homeLight0.getName());
      assertTrue(homeLight0.isResizable());
      assertEquals(0.19634955F, homeLight0.getX(), 0.01F);
      assertEquals("DEPTH", homeLight0.getDescription());
      assertEquals(2001.0F, homeLight0.getDepth(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals(1000.5F, homeLight0.getY(), 0.01F);
      assertEquals((-2885.0872F), homeLight0.getElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertEquals((-2885.0872F), homeLight0.getGroundElevation(), 0.01F);
      assertFalse(homeLight0.isModelMirrored());
      assertFalse(homeLight0.isBackFaceShown());
      
      HomeFurnitureGroup homeFurnitureGroup0 = new HomeFurnitureGroup(linkedList0, "_])7g^)gy+P0XH3");
      assertFalse(linkedList0.contains(homePieceOfFurniture0));
      assertEquals(1, linkedList0.size());
      assertEquals(0.0F, homeFurnitureGroup0.getNameAngle(), 0.01F);
      assertNull(homeFurnitureGroup0.getShininess());
      assertNull(homeFurnitureGroup0.getStaircaseCutOutShape());
      assertNull(homeFurnitureGroup0.getCatalogId());
      assertNull(homeFurnitureGroup0.getCurrency());
      assertTrue(homeFurnitureGroup0.isResizable());
      assertEquals((-2885.0872F), homeFurnitureGroup0.getGroundElevation(), 0.01F);
      assertTrue(homeFurnitureGroup0.isDeformable());
      assertTrue(homeFurnitureGroup0.isMovable());
      assertEquals((-2885.0872F), homeFurnitureGroup0.getElevation(), 0.01F);
      assertEquals(0.19634955F, homeFurnitureGroup0.getX(), 0.01F);
      assertNull(homeFurnitureGroup0.getColor());
      assertEquals(0.0F, homeFurnitureGroup0.getNameYOffset(), 0.01F);
      assertTrue(homeFurnitureGroup0.isTexturable());
      assertFalse(homeFurnitureGroup0.isModelMirrored());
      assertFalse(homeFurnitureGroup0.isDoorOrWindow());
      assertEquals(0.0F, homeFurnitureGroup0.getAngle(), 0.01F);
      assertEquals("_])7g^)gy+P0XH3", homeFurnitureGroup0.getName());
      assertEquals(2885.0872F, homeFurnitureGroup0.getHeight(), 0.01F);
      assertFalse(homeFurnitureGroup0.isBackFaceShown());
      assertFalse(homeFurnitureGroup0.isNameVisible());
      assertTrue(homeFurnitureGroup0.isVisible());
      assertEquals(1000.5F, homeFurnitureGroup0.getY(), 0.01F);
      assertNull(homeFurnitureGroup0.getDescription());
      assertEquals(2001.0F, homeFurnitureGroup0.getDepth(), 0.01F);
      assertEquals(0.3926991F, homeFurnitureGroup0.getWidth(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getNameXOffset(), 0.01F);
      assertNotNull(homeFurnitureGroup0);
      
      HomeLight homeLight1 = (HomeLight)linkedList0.pop();
      assertFalse(linkedList0.contains(homePieceOfFurniture0));
      assertEquals(0, linkedList0.size());
      assertNull(homeLight1.getCurrency());
      assertEquals("9", homeLight1.getCatalogId());
      assertTrue(homeLight1.isVisible());
      assertTrue(homeLight1.isDeformable());
      assertNull(homeLight1.getColor());
      assertEquals(0.0F, homeLight1.getNameYOffset(), 0.01F);
      assertEquals(1.0F, homeLight1.getHeight(), 0.01F);
      assertNull(homeLight1.getShininess());
      assertEquals(0.3926991F, homeLight1.getWidth(), 0.01F);
      assertTrue(homeLight1.isMovable());
      assertEquals(0.19634955F, homeLight1.getX(), 0.01F);
      assertEquals("DEPTH", homeLight1.getName());
      assertEquals(0.0F, homeLight1.getNameAngle(), 0.01F);
      assertEquals(0.5F, homeLight1.getPower(), 0.01F);
      assertNull(homeLight1.getStaircaseCutOutShape());
      assertEquals(2001.0F, homeLight1.getDepth(), 0.01F);
      assertTrue(homeLight1.isResizable());
      assertEquals(0.0F, homeLight1.getNameXOffset(), 0.01F);
      assertEquals("DEPTH", homeLight1.getDescription());
      assertEquals(0.0F, homeLight1.getAngle(), 0.01F);
      assertFalse(homeLight1.isDoorOrWindow());
      assertTrue(homeLight1.isTexturable());
      assertEquals((-2885.0872F), homeLight1.getElevation(), 0.01F);
      assertFalse(homeLight1.isModelMirrored());
      assertEquals(1000.5F, homeLight1.getY(), 0.01F);
      assertFalse(homeLight1.isBackFaceShown());
      assertEquals((-2885.0872F), homeLight1.getGroundElevation(), 0.01F);
      assertFalse(homeLight1.isNameVisible());
      assertNotNull(homeLight1);
      assertSame(homeLight1, homeLight0);
      
      HomeFurnitureGroup homeFurnitureGroup1 = homeFurnitureGroup0.clone();
      assertFalse(linkedList0.contains(homePieceOfFurniture0));
      assertEquals(0, linkedList0.size());
      assertEquals(0.0F, homeFurnitureGroup0.getNameAngle(), 0.01F);
      assertNull(homeFurnitureGroup0.getShininess());
      assertNull(homeFurnitureGroup0.getStaircaseCutOutShape());
      assertNull(homeFurnitureGroup0.getCatalogId());
      assertNull(homeFurnitureGroup0.getCurrency());
      assertTrue(homeFurnitureGroup0.isResizable());
      assertEquals((-2885.0872F), homeFurnitureGroup0.getGroundElevation(), 0.01F);
      assertTrue(homeFurnitureGroup0.isDeformable());
      assertTrue(homeFurnitureGroup0.isMovable());
      assertEquals((-2885.0872F), homeFurnitureGroup0.getElevation(), 0.01F);
      assertEquals(0.19634955F, homeFurnitureGroup0.getX(), 0.01F);
      assertNull(homeFurnitureGroup0.getColor());
      assertEquals(0.0F, homeFurnitureGroup0.getNameYOffset(), 0.01F);
      assertTrue(homeFurnitureGroup0.isTexturable());
      assertFalse(homeFurnitureGroup0.isModelMirrored());
      assertFalse(homeFurnitureGroup0.isDoorOrWindow());
      assertEquals(0.0F, homeFurnitureGroup0.getAngle(), 0.01F);
      assertEquals("_])7g^)gy+P0XH3", homeFurnitureGroup0.getName());
      assertEquals(2885.0872F, homeFurnitureGroup0.getHeight(), 0.01F);
      assertFalse(homeFurnitureGroup0.isBackFaceShown());
      assertFalse(homeFurnitureGroup0.isNameVisible());
      assertTrue(homeFurnitureGroup0.isVisible());
      assertEquals(1000.5F, homeFurnitureGroup0.getY(), 0.01F);
      assertNull(homeFurnitureGroup0.getDescription());
      assertEquals(2001.0F, homeFurnitureGroup0.getDepth(), 0.01F);
      assertEquals(0.3926991F, homeFurnitureGroup0.getWidth(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getNameXOffset(), 0.01F);
      assertNull(homeFurnitureGroup1.getCurrency());
      assertEquals(0.3926991F, homeFurnitureGroup1.getWidth(), 0.01F);
      assertNull(homeFurnitureGroup1.getShininess());
      assertEquals(2001.0F, homeFurnitureGroup1.getDepth(), 0.01F);
      assertTrue(homeFurnitureGroup1.isMovable());
      assertEquals(0.0F, homeFurnitureGroup1.getNameAngle(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup1.getNameXOffset(), 0.01F);
      assertEquals(0.19634955F, homeFurnitureGroup1.getX(), 0.01F);
      assertTrue(homeFurnitureGroup1.isVisible());
      assertNull(homeFurnitureGroup1.getCatalogId());
      assertNull(homeFurnitureGroup1.getStaircaseCutOutShape());
      assertTrue(homeFurnitureGroup1.isResizable());
      assertEquals(2885.0872F, homeFurnitureGroup1.getHeight(), 0.01F);
      assertNull(homeFurnitureGroup1.getColor());
      assertTrue(homeFurnitureGroup1.isTexturable());
      assertFalse(homeFurnitureGroup1.isModelMirrored());
      assertEquals(0.0F, homeFurnitureGroup1.getNameYOffset(), 0.01F);
      assertEquals(1000.5F, homeFurnitureGroup1.getY(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup1.getAngle(), 0.01F);
      assertNull(homeFurnitureGroup1.getDescription());
      assertTrue(homeFurnitureGroup1.isDeformable());
      assertEquals((-2885.0872F), homeFurnitureGroup1.getElevation(), 0.01F);
      assertEquals("_])7g^)gy+P0XH3", homeFurnitureGroup1.getName());
      assertFalse(homeFurnitureGroup1.isDoorOrWindow());
      assertFalse(homeFurnitureGroup1.isBackFaceShown());
      assertFalse(homeFurnitureGroup1.isNameVisible());
      assertEquals((-2885.0872F), homeFurnitureGroup1.getGroundElevation(), 0.01F);
      assertFalse(homeFurnitureGroup1.equals((Object)homeFurnitureGroup0));
      assertNotNull(homeFurnitureGroup1);
      assertNotSame(homeFurnitureGroup0, homeFurnitureGroup1);
      assertNotSame(homeFurnitureGroup1, homeFurnitureGroup0);
      
      Content content0 = homeFurnitureGroup0.getModel();
      assertFalse(linkedList0.contains(homePieceOfFurniture0));
      assertEquals(0, linkedList0.size());
      assertEquals(0.0F, homeFurnitureGroup0.getNameAngle(), 0.01F);
      assertNull(homeFurnitureGroup0.getShininess());
      assertNull(homeFurnitureGroup0.getStaircaseCutOutShape());
      assertNull(homeFurnitureGroup0.getCatalogId());
      assertNull(homeFurnitureGroup0.getCurrency());
      assertTrue(homeFurnitureGroup0.isResizable());
      assertEquals((-2885.0872F), homeFurnitureGroup0.getGroundElevation(), 0.01F);
      assertTrue(homeFurnitureGroup0.isDeformable());
      assertTrue(homeFurnitureGroup0.isMovable());
      assertEquals((-2885.0872F), homeFurnitureGroup0.getElevation(), 0.01F);
      assertEquals(0.19634955F, homeFurnitureGroup0.getX(), 0.01F);
      assertNull(homeFurnitureGroup0.getColor());
      assertEquals(0.0F, homeFurnitureGroup0.getNameYOffset(), 0.01F);
      assertTrue(homeFurnitureGroup0.isTexturable());
      assertFalse(homeFurnitureGroup0.isModelMirrored());
      assertFalse(homeFurnitureGroup0.isDoorOrWindow());
      assertEquals(0.0F, homeFurnitureGroup0.getAngle(), 0.01F);
      assertEquals("_])7g^)gy+P0XH3", homeFurnitureGroup0.getName());
      assertEquals(2885.0872F, homeFurnitureGroup0.getHeight(), 0.01F);
      assertFalse(homeFurnitureGroup0.isBackFaceShown());
      assertFalse(homeFurnitureGroup0.isNameVisible());
      assertTrue(homeFurnitureGroup0.isVisible());
      assertEquals(1000.5F, homeFurnitureGroup0.getY(), 0.01F);
      assertNull(homeFurnitureGroup0.getDescription());
      assertEquals(2001.0F, homeFurnitureGroup0.getDepth(), 0.01F);
      assertEquals(0.3926991F, homeFurnitureGroup0.getWidth(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getNameXOffset(), 0.01F);
      assertFalse(homeFurnitureGroup0.equals((Object)homeFurnitureGroup1));
      assertNull(content0);
      assertNotSame(homeFurnitureGroup0, homeFurnitureGroup1);
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      LinkedList<HomePieceOfFurniture> linkedList0 = new LinkedList<HomePieceOfFurniture>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      ResourceURLContent resourceURLContent0 = new ResourceURLContent((URL) null, true);
      assertTrue(resourceURLContent0.isMultiPartResource());
      assertNotNull(resourceURLContent0);
      
      LightSource[] lightSourceArray0 = new LightSource[1];
      Float float0 = new Float(0.0);
      assertEquals(0.0F, (float)float0, 0.01F);
      assertNotNull(float0);
      
      LightSource lightSource0 = new LightSource(88.9F, 1.0F, 1331.01F, 2001, float0);
      assertEquals(1331.01F, lightSource0.getZ(), 0.01F);
      assertEquals(88.9F, lightSource0.getX(), 0.01F);
      assertEquals(0.0F, lightSource0.getDiameter(), 0.01F);
      assertEquals(1.0F, lightSource0.getY(), 0.01F);
      assertEquals(2001, lightSource0.getColor());
      assertNotNull(lightSource0);
      
      lightSourceArray0[0] = lightSource0;
      float[][] floatArray0 = new float[4][6];
      BigDecimal bigDecimal0 = new BigDecimal((long) 2001);
      assertEquals((byte) (-47), bigDecimal0.byteValue());
      assertEquals((short)2001, bigDecimal0.shortValue());
      assertNotNull(bigDecimal0);
      
      BigDecimal bigDecimal1 = new BigDecimal((-1L));
      assertEquals((byte) (-1), bigDecimal1.byteValue());
      assertEquals((short) (-1), bigDecimal1.shortValue());
      assertFalse(bigDecimal1.equals((Object)bigDecimal0));
      assertNotNull(bigDecimal1);
      
      BigDecimal bigDecimal2 = new BigDecimal((-1L));
      assertEquals((byte) (-1), bigDecimal2.byteValue());
      assertEquals((short) (-1), bigDecimal2.shortValue());
      assertFalse(bigDecimal2.equals((Object)bigDecimal0));
      assertTrue(bigDecimal2.equals((Object)bigDecimal1));
      assertNotNull(bigDecimal2);
      
      CatalogLight catalogLight0 = new CatalogLight("_])7g^)gy+P0XH3", "_])7g^)gy+P0XH3", "/<gAhL`8>", resourceURLContent0, resourceURLContent0, resourceURLContent0, 1331.01F, 1.0F, (-1L), 1.0F, false, lightSourceArray0, floatArray0, "DEPTH", true, bigDecimal2, bigDecimal1);
      assertEquals(1, lightSourceArray0.length);
      assertEquals(4, floatArray0.length);
      assertTrue(resourceURLContent0.isMultiPartResource());
      assertEquals((byte) (-1), bigDecimal1.byteValue());
      assertEquals((short) (-1), bigDecimal1.shortValue());
      assertEquals((byte) (-1), bigDecimal2.byteValue());
      assertEquals((short) (-1), bigDecimal2.shortValue());
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertEquals("_])7g^)gy+P0XH3", catalogLight0.getName());
      assertEquals((-1.0F), catalogLight0.getHeight(), 0.01F);
      assertEquals("DEPTH", catalogLight0.getCreator());
      assertEquals("_])7g^)gy+P0XH3", catalogLight0.getId());
      assertFalse(catalogLight0.isModifiable());
      assertNull(catalogLight0.getCreationDate());
      assertNull(catalogLight0.getCurrency());
      assertEquals(1.0F, catalogLight0.getElevation(), 0.01F);
      assertEquals(1.0F, catalogLight0.getDepth(), 0.01F);
      assertFalse(catalogLight0.isBackFaceShown());
      assertFalse(catalogLight0.isMovable());
      assertNull(catalogLight0.getInformation());
      assertTrue(catalogLight0.isResizable());
      assertEquals(1331.01F, catalogLight0.getWidth(), 0.01F);
      assertTrue(catalogLight0.isDeformable());
      assertNull(catalogLight0.getColor());
      assertEquals("/<gAhL`8>", catalogLight0.getDescription());
      assertTrue(catalogLight0.isProportional());
      assertTrue(catalogLight0.isTexturable());
      assertFalse(catalogLight0.isDoorOrWindow());
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertNull(catalogLight0.getGrade());
      assertTrue(bigDecimal1.equals((Object)bigDecimal2));
      assertFalse(bigDecimal1.equals((Object)bigDecimal0));
      assertFalse(bigDecimal2.equals((Object)bigDecimal0));
      assertTrue(bigDecimal2.equals((Object)bigDecimal1));
      assertNotNull(catalogLight0);
      
      HomeLight homeLight0 = new HomeLight(catalogLight0);
      assertEquals(1, lightSourceArray0.length);
      assertEquals(4, floatArray0.length);
      assertTrue(resourceURLContent0.isMultiPartResource());
      assertEquals((byte) (-1), bigDecimal1.byteValue());
      assertEquals((short) (-1), bigDecimal1.shortValue());
      assertEquals((byte) (-1), bigDecimal2.byteValue());
      assertEquals((short) (-1), bigDecimal2.shortValue());
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertEquals("_])7g^)gy+P0XH3", catalogLight0.getName());
      assertEquals((-1.0F), catalogLight0.getHeight(), 0.01F);
      assertEquals("DEPTH", catalogLight0.getCreator());
      assertEquals("_])7g^)gy+P0XH3", catalogLight0.getId());
      assertFalse(catalogLight0.isModifiable());
      assertNull(catalogLight0.getCreationDate());
      assertNull(catalogLight0.getCurrency());
      assertEquals(1.0F, catalogLight0.getElevation(), 0.01F);
      assertEquals(1.0F, catalogLight0.getDepth(), 0.01F);
      assertFalse(catalogLight0.isBackFaceShown());
      assertFalse(catalogLight0.isMovable());
      assertNull(catalogLight0.getInformation());
      assertTrue(catalogLight0.isResizable());
      assertEquals(1331.01F, catalogLight0.getWidth(), 0.01F);
      assertTrue(catalogLight0.isDeformable());
      assertNull(catalogLight0.getColor());
      assertEquals("/<gAhL`8>", catalogLight0.getDescription());
      assertTrue(catalogLight0.isProportional());
      assertTrue(catalogLight0.isTexturable());
      assertFalse(catalogLight0.isDoorOrWindow());
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertNull(catalogLight0.getGrade());
      assertTrue(homeLight0.isResizable());
      assertEquals(1331.01F, homeLight0.getWidth(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals(1.0F, homeLight0.getDepth(), 0.01F);
      assertNull(homeLight0.getShininess());
      assertTrue(homeLight0.isVisible());
      assertTrue(homeLight0.isDeformable());
      assertEquals(1.0F, homeLight0.getElevation(), 0.01F);
      assertEquals("_])7g^)gy+P0XH3", homeLight0.getName());
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals("/<gAhL`8>", homeLight0.getDescription());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertFalse(homeLight0.isNameVisible());
      assertTrue(homeLight0.isTexturable());
      assertFalse(homeLight0.isBackFaceShown());
      assertFalse(homeLight0.isModelMirrored());
      assertFalse(homeLight0.isDoorOrWindow());
      assertNull(homeLight0.getColor());
      assertEquals(665.505F, homeLight0.getX(), 0.01F);
      assertEquals(0.5F, homeLight0.getY(), 0.01F);
      assertEquals(1.0F, homeLight0.getGroundElevation(), 0.01F);
      assertEquals("_])7g^)gy+P0XH3", homeLight0.getCatalogId());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertEquals((-1.0F), homeLight0.getHeight(), 0.01F);
      assertNull(homeLight0.getCurrency());
      assertFalse(homeLight0.isMovable());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertTrue(bigDecimal1.equals((Object)bigDecimal2));
      assertFalse(bigDecimal1.equals((Object)bigDecimal0));
      assertFalse(bigDecimal2.equals((Object)bigDecimal0));
      assertTrue(bigDecimal2.equals((Object)bigDecimal1));
      assertNotNull(homeLight0);
      
      HomePieceOfFurniture homePieceOfFurniture0 = new HomePieceOfFurniture(homeLight0);
      assertEquals(1, lightSourceArray0.length);
      assertEquals(4, floatArray0.length);
      assertTrue(resourceURLContent0.isMultiPartResource());
      assertEquals((byte) (-1), bigDecimal1.byteValue());
      assertEquals((short) (-1), bigDecimal1.shortValue());
      assertEquals((byte) (-1), bigDecimal2.byteValue());
      assertEquals((short) (-1), bigDecimal2.shortValue());
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertEquals("_])7g^)gy+P0XH3", catalogLight0.getName());
      assertEquals((-1.0F), catalogLight0.getHeight(), 0.01F);
      assertEquals("DEPTH", catalogLight0.getCreator());
      assertEquals("_])7g^)gy+P0XH3", catalogLight0.getId());
      assertFalse(catalogLight0.isModifiable());
      assertNull(catalogLight0.getCreationDate());
      assertNull(catalogLight0.getCurrency());
      assertEquals(1.0F, catalogLight0.getElevation(), 0.01F);
      assertEquals(1.0F, catalogLight0.getDepth(), 0.01F);
      assertFalse(catalogLight0.isBackFaceShown());
      assertFalse(catalogLight0.isMovable());
      assertNull(catalogLight0.getInformation());
      assertTrue(catalogLight0.isResizable());
      assertEquals(1331.01F, catalogLight0.getWidth(), 0.01F);
      assertTrue(catalogLight0.isDeformable());
      assertNull(catalogLight0.getColor());
      assertEquals("/<gAhL`8>", catalogLight0.getDescription());
      assertTrue(catalogLight0.isProportional());
      assertTrue(catalogLight0.isTexturable());
      assertFalse(catalogLight0.isDoorOrWindow());
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertNull(catalogLight0.getGrade());
      assertTrue(homeLight0.isResizable());
      assertEquals(1331.01F, homeLight0.getWidth(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals(1.0F, homeLight0.getDepth(), 0.01F);
      assertNull(homeLight0.getShininess());
      assertTrue(homeLight0.isVisible());
      assertTrue(homeLight0.isDeformable());
      assertEquals(1.0F, homeLight0.getElevation(), 0.01F);
      assertEquals("_])7g^)gy+P0XH3", homeLight0.getName());
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals("/<gAhL`8>", homeLight0.getDescription());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertFalse(homeLight0.isNameVisible());
      assertTrue(homeLight0.isTexturable());
      assertFalse(homeLight0.isBackFaceShown());
      assertFalse(homeLight0.isModelMirrored());
      assertFalse(homeLight0.isDoorOrWindow());
      assertNull(homeLight0.getColor());
      assertEquals(665.505F, homeLight0.getX(), 0.01F);
      assertEquals(0.5F, homeLight0.getY(), 0.01F);
      assertEquals(1.0F, homeLight0.getGroundElevation(), 0.01F);
      assertEquals("_])7g^)gy+P0XH3", homeLight0.getCatalogId());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertEquals((-1.0F), homeLight0.getHeight(), 0.01F);
      assertNull(homeLight0.getCurrency());
      assertFalse(homeLight0.isMovable());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertFalse(homePieceOfFurniture0.isDoorOrWindow());
      assertEquals(1.0F, homePieceOfFurniture0.getElevation(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture0.getAngle(), 0.01F);
      assertTrue(homePieceOfFurniture0.isTexturable());
      assertNull(homePieceOfFurniture0.getStaircaseCutOutShape());
      assertEquals(0.0F, homePieceOfFurniture0.getNameAngle(), 0.01F);
      assertEquals(0.5F, homePieceOfFurniture0.getY(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture0.getNameXOffset(), 0.01F);
      assertEquals(1.0F, homePieceOfFurniture0.getGroundElevation(), 0.01F);
      assertNull(homePieceOfFurniture0.getShininess());
      assertTrue(homePieceOfFurniture0.isDeformable());
      assertTrue(homePieceOfFurniture0.isResizable());
      assertEquals(1.0F, homePieceOfFurniture0.getDepth(), 0.01F);
      assertTrue(homePieceOfFurniture0.isVisible());
      assertEquals(0.0F, homePieceOfFurniture0.getNameYOffset(), 0.01F);
      assertFalse(homePieceOfFurniture0.isMovable());
      assertEquals("_])7g^)gy+P0XH3", homePieceOfFurniture0.getName());
      assertEquals((-1.0F), homePieceOfFurniture0.getHeight(), 0.01F);
      assertNull(homePieceOfFurniture0.getCurrency());
      assertNull(homePieceOfFurniture0.getColor());
      assertFalse(homePieceOfFurniture0.isBackFaceShown());
      assertFalse(homePieceOfFurniture0.isNameVisible());
      assertEquals(665.505F, homePieceOfFurniture0.getX(), 0.01F);
      assertEquals("/<gAhL`8>", homePieceOfFurniture0.getDescription());
      assertEquals("_])7g^)gy+P0XH3", homePieceOfFurniture0.getCatalogId());
      assertEquals(1331.01F, homePieceOfFurniture0.getWidth(), 0.01F);
      assertFalse(homePieceOfFurniture0.isModelMirrored());
      assertTrue(bigDecimal1.equals((Object)bigDecimal2));
      assertFalse(bigDecimal1.equals((Object)bigDecimal0));
      assertFalse(bigDecimal2.equals((Object)bigDecimal0));
      assertTrue(bigDecimal2.equals((Object)bigDecimal1));
      assertNotNull(homePieceOfFurniture0);
      
      boolean boolean0 = linkedList0.add((HomePieceOfFurniture) homeLight0);
      assertTrue(boolean0);
      assertEquals(1, lightSourceArray0.length);
      assertEquals(4, floatArray0.length);
      assertFalse(linkedList0.contains(homePieceOfFurniture0));
      assertEquals(1, linkedList0.size());
      assertTrue(resourceURLContent0.isMultiPartResource());
      assertEquals((byte) (-1), bigDecimal1.byteValue());
      assertEquals((short) (-1), bigDecimal1.shortValue());
      assertEquals((byte) (-1), bigDecimal2.byteValue());
      assertEquals((short) (-1), bigDecimal2.shortValue());
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertEquals("_])7g^)gy+P0XH3", catalogLight0.getName());
      assertEquals((-1.0F), catalogLight0.getHeight(), 0.01F);
      assertEquals("DEPTH", catalogLight0.getCreator());
      assertEquals("_])7g^)gy+P0XH3", catalogLight0.getId());
      assertFalse(catalogLight0.isModifiable());
      assertNull(catalogLight0.getCreationDate());
      assertNull(catalogLight0.getCurrency());
      assertEquals(1.0F, catalogLight0.getElevation(), 0.01F);
      assertEquals(1.0F, catalogLight0.getDepth(), 0.01F);
      assertFalse(catalogLight0.isBackFaceShown());
      assertFalse(catalogLight0.isMovable());
      assertNull(catalogLight0.getInformation());
      assertTrue(catalogLight0.isResizable());
      assertEquals(1331.01F, catalogLight0.getWidth(), 0.01F);
      assertTrue(catalogLight0.isDeformable());
      assertNull(catalogLight0.getColor());
      assertEquals("/<gAhL`8>", catalogLight0.getDescription());
      assertTrue(catalogLight0.isProportional());
      assertTrue(catalogLight0.isTexturable());
      assertFalse(catalogLight0.isDoorOrWindow());
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertNull(catalogLight0.getGrade());
      assertTrue(homeLight0.isResizable());
      assertEquals(1331.01F, homeLight0.getWidth(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals(1.0F, homeLight0.getDepth(), 0.01F);
      assertNull(homeLight0.getShininess());
      assertTrue(homeLight0.isVisible());
      assertTrue(homeLight0.isDeformable());
      assertEquals(1.0F, homeLight0.getElevation(), 0.01F);
      assertEquals("_])7g^)gy+P0XH3", homeLight0.getName());
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals("/<gAhL`8>", homeLight0.getDescription());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertFalse(homeLight0.isNameVisible());
      assertTrue(homeLight0.isTexturable());
      assertFalse(homeLight0.isBackFaceShown());
      assertFalse(homeLight0.isModelMirrored());
      assertFalse(homeLight0.isDoorOrWindow());
      assertNull(homeLight0.getColor());
      assertEquals(665.505F, homeLight0.getX(), 0.01F);
      assertEquals(0.5F, homeLight0.getY(), 0.01F);
      assertEquals(1.0F, homeLight0.getGroundElevation(), 0.01F);
      assertEquals("_])7g^)gy+P0XH3", homeLight0.getCatalogId());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertEquals((-1.0F), homeLight0.getHeight(), 0.01F);
      assertNull(homeLight0.getCurrency());
      assertFalse(homeLight0.isMovable());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertTrue(bigDecimal1.equals((Object)bigDecimal2));
      assertFalse(bigDecimal1.equals((Object)bigDecimal0));
      assertFalse(bigDecimal2.equals((Object)bigDecimal0));
      assertTrue(bigDecimal2.equals((Object)bigDecimal1));
      assertNotSame(bigDecimal1, bigDecimal0);
      assertNotSame(bigDecimal1, bigDecimal2);
      assertNotSame(bigDecimal2, bigDecimal0);
      assertNotSame(bigDecimal2, bigDecimal1);
      
      PropertyChangeListener propertyChangeListener0 = mock(PropertyChangeListener.class, new ViolatedAssumptionAnswer());
      PropertyChangeListenerProxy propertyChangeListenerProxy0 = new PropertyChangeListenerProxy("", propertyChangeListener0);
      assertEquals("", propertyChangeListenerProxy0.getPropertyName());
      assertNotNull(propertyChangeListenerProxy0);
      
      PropertyChangeListenerProxy propertyChangeListenerProxy1 = new PropertyChangeListenerProxy("", propertyChangeListenerProxy0);
      assertEquals("", propertyChangeListenerProxy1.getPropertyName());
      assertEquals("", propertyChangeListenerProxy0.getPropertyName());
      assertFalse(propertyChangeListenerProxy1.equals((Object)propertyChangeListenerProxy0));
      assertNotNull(propertyChangeListenerProxy1);
      
      HomeFurnitureGroup homeFurnitureGroup0 = new HomeFurnitureGroup(linkedList0, "");
      assertFalse(linkedList0.contains(homePieceOfFurniture0));
      assertEquals(1, linkedList0.size());
      assertTrue(homeFurnitureGroup0.isVisible());
      assertFalse(homeFurnitureGroup0.isNameVisible());
      assertEquals(665.505F, homeFurnitureGroup0.getX(), 0.01F);
      assertTrue(homeFurnitureGroup0.isTexturable());
      assertFalse(homeFurnitureGroup0.isBackFaceShown());
      assertEquals(0.0F, homeFurnitureGroup0.getNameAngle(), 0.01F);
      assertNull(homeFurnitureGroup0.getShininess());
      assertEquals(0.0F, homeFurnitureGroup0.getNameXOffset(), 0.01F);
      assertEquals(1.0F, homeFurnitureGroup0.getGroundElevation(), 0.01F);
      assertNull(homeFurnitureGroup0.getDescription());
      assertEquals(0.5F, homeFurnitureGroup0.getY(), 0.01F);
      assertEquals(1.0F, homeFurnitureGroup0.getDepth(), 0.01F);
      assertEquals(1.0F, homeFurnitureGroup0.getElevation(), 0.01F);
      assertTrue(homeFurnitureGroup0.isDeformable());
      assertFalse(homeFurnitureGroup0.isDoorOrWindow());
      assertEquals(0.0F, homeFurnitureGroup0.getAngle(), 0.01F);
      assertEquals("", homeFurnitureGroup0.getName());
      assertTrue(homeFurnitureGroup0.isResizable());
      assertNull(homeFurnitureGroup0.getCurrency());
      assertNull(homeFurnitureGroup0.getStaircaseCutOutShape());
      assertEquals(1331.01F, homeFurnitureGroup0.getWidth(), 0.01F);
      assertFalse(homeFurnitureGroup0.isModelMirrored());
      assertEquals((-1.0F), homeFurnitureGroup0.getHeight(), 0.01F);
      assertNull(homeFurnitureGroup0.getColor());
      assertNull(homeFurnitureGroup0.getCatalogId());
      assertEquals(0.0F, homeFurnitureGroup0.getNameYOffset(), 0.01F);
      assertFalse(homeFurnitureGroup0.isMovable());
      assertNotNull(homeFurnitureGroup0);
      
      HomeFurnitureGroup homeFurnitureGroup1 = homeFurnitureGroup0.clone();
      assertFalse(linkedList0.contains(homePieceOfFurniture0));
      assertEquals(1, linkedList0.size());
      assertTrue(homeFurnitureGroup0.isVisible());
      assertFalse(homeFurnitureGroup0.isNameVisible());
      assertEquals(665.505F, homeFurnitureGroup0.getX(), 0.01F);
      assertTrue(homeFurnitureGroup0.isTexturable());
      assertFalse(homeFurnitureGroup0.isBackFaceShown());
      assertEquals(0.0F, homeFurnitureGroup0.getNameAngle(), 0.01F);
      assertNull(homeFurnitureGroup0.getShininess());
      assertEquals(0.0F, homeFurnitureGroup0.getNameXOffset(), 0.01F);
      assertEquals(1.0F, homeFurnitureGroup0.getGroundElevation(), 0.01F);
      assertNull(homeFurnitureGroup0.getDescription());
      assertEquals(0.5F, homeFurnitureGroup0.getY(), 0.01F);
      assertEquals(1.0F, homeFurnitureGroup0.getDepth(), 0.01F);
      assertEquals(1.0F, homeFurnitureGroup0.getElevation(), 0.01F);
      assertTrue(homeFurnitureGroup0.isDeformable());
      assertFalse(homeFurnitureGroup0.isDoorOrWindow());
      assertEquals(0.0F, homeFurnitureGroup0.getAngle(), 0.01F);
      assertEquals("", homeFurnitureGroup0.getName());
      assertTrue(homeFurnitureGroup0.isResizable());
      assertNull(homeFurnitureGroup0.getCurrency());
      assertNull(homeFurnitureGroup0.getStaircaseCutOutShape());
      assertEquals(1331.01F, homeFurnitureGroup0.getWidth(), 0.01F);
      assertFalse(homeFurnitureGroup0.isModelMirrored());
      assertEquals((-1.0F), homeFurnitureGroup0.getHeight(), 0.01F);
      assertNull(homeFurnitureGroup0.getColor());
      assertNull(homeFurnitureGroup0.getCatalogId());
      assertEquals(0.0F, homeFurnitureGroup0.getNameYOffset(), 0.01F);
      assertFalse(homeFurnitureGroup0.isMovable());
      assertEquals(0.0F, homeFurnitureGroup1.getAngle(), 0.01F);
      assertEquals(1.0F, homeFurnitureGroup1.getGroundElevation(), 0.01F);
      assertFalse(homeFurnitureGroup1.isDoorOrWindow());
      assertEquals(1.0F, homeFurnitureGroup1.getDepth(), 0.01F);
      assertEquals(0.5F, homeFurnitureGroup1.getY(), 0.01F);
      assertEquals(1.0F, homeFurnitureGroup1.getElevation(), 0.01F);
      assertTrue(homeFurnitureGroup1.isTexturable());
      assertNull(homeFurnitureGroup1.getDescription());
      assertEquals(0.0F, homeFurnitureGroup1.getNameAngle(), 0.01F);
      assertTrue(homeFurnitureGroup1.isResizable());
      assertNull(homeFurnitureGroup1.getStaircaseCutOutShape());
      assertEquals(1331.01F, homeFurnitureGroup1.getWidth(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup1.getNameXOffset(), 0.01F);
      assertTrue(homeFurnitureGroup1.isVisible());
      assertNull(homeFurnitureGroup1.getShininess());
      assertNull(homeFurnitureGroup1.getCatalogId());
      assertFalse(homeFurnitureGroup1.isNameVisible());
      assertFalse(homeFurnitureGroup1.isMovable());
      assertEquals((-1.0F), homeFurnitureGroup1.getHeight(), 0.01F);
      assertNull(homeFurnitureGroup1.getCurrency());
      assertEquals(665.505F, homeFurnitureGroup1.getX(), 0.01F);
      assertFalse(homeFurnitureGroup1.isBackFaceShown());
      assertNull(homeFurnitureGroup1.getColor());
      assertEquals(0.0F, homeFurnitureGroup1.getNameYOffset(), 0.01F);
      assertEquals("", homeFurnitureGroup1.getName());
      assertFalse(homeFurnitureGroup1.isModelMirrored());
      assertTrue(homeFurnitureGroup1.isDeformable());
      assertFalse(homeFurnitureGroup1.equals((Object)homeFurnitureGroup0));
      assertNotNull(homeFurnitureGroup1);
      assertNotSame(homeFurnitureGroup0, homeFurnitureGroup1);
      assertNotSame(homeFurnitureGroup1, homeFurnitureGroup0);
      
      homeFurnitureGroup1.setAngle(2001);
      assertFalse(linkedList0.contains(homePieceOfFurniture0));
      assertEquals(1, linkedList0.size());
      assertTrue(homeFurnitureGroup0.isVisible());
      assertFalse(homeFurnitureGroup0.isNameVisible());
      assertEquals(665.505F, homeFurnitureGroup0.getX(), 0.01F);
      assertTrue(homeFurnitureGroup0.isTexturable());
      assertFalse(homeFurnitureGroup0.isBackFaceShown());
      assertEquals(0.0F, homeFurnitureGroup0.getNameAngle(), 0.01F);
      assertNull(homeFurnitureGroup0.getShininess());
      assertEquals(0.0F, homeFurnitureGroup0.getNameXOffset(), 0.01F);
      assertEquals(1.0F, homeFurnitureGroup0.getGroundElevation(), 0.01F);
      assertNull(homeFurnitureGroup0.getDescription());
      assertEquals(0.5F, homeFurnitureGroup0.getY(), 0.01F);
      assertEquals(1.0F, homeFurnitureGroup0.getDepth(), 0.01F);
      assertEquals(1.0F, homeFurnitureGroup0.getElevation(), 0.01F);
      assertTrue(homeFurnitureGroup0.isDeformable());
      assertFalse(homeFurnitureGroup0.isDoorOrWindow());
      assertEquals(0.0F, homeFurnitureGroup0.getAngle(), 0.01F);
      assertEquals("", homeFurnitureGroup0.getName());
      assertTrue(homeFurnitureGroup0.isResizable());
      assertNull(homeFurnitureGroup0.getCurrency());
      assertNull(homeFurnitureGroup0.getStaircaseCutOutShape());
      assertEquals(1331.01F, homeFurnitureGroup0.getWidth(), 0.01F);
      assertFalse(homeFurnitureGroup0.isModelMirrored());
      assertEquals((-1.0F), homeFurnitureGroup0.getHeight(), 0.01F);
      assertNull(homeFurnitureGroup0.getColor());
      assertNull(homeFurnitureGroup0.getCatalogId());
      assertEquals(0.0F, homeFurnitureGroup0.getNameYOffset(), 0.01F);
      assertFalse(homeFurnitureGroup0.isMovable());
      assertEquals(1.0F, homeFurnitureGroup1.getGroundElevation(), 0.01F);
      assertFalse(homeFurnitureGroup1.isDoorOrWindow());
      assertEquals(1.0F, homeFurnitureGroup1.getDepth(), 0.01F);
      assertEquals(0.5F, homeFurnitureGroup1.getY(), 0.01F);
      assertEquals(1.0F, homeFurnitureGroup1.getElevation(), 0.01F);
      assertTrue(homeFurnitureGroup1.isTexturable());
      assertEquals(2.9470723F, homeFurnitureGroup1.getAngle(), 0.01F);
      assertNull(homeFurnitureGroup1.getDescription());
      assertEquals(0.0F, homeFurnitureGroup1.getNameAngle(), 0.01F);
      assertTrue(homeFurnitureGroup1.isResizable());
      assertNull(homeFurnitureGroup1.getStaircaseCutOutShape());
      assertEquals(1331.01F, homeFurnitureGroup1.getWidth(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup1.getNameXOffset(), 0.01F);
      assertTrue(homeFurnitureGroup1.isVisible());
      assertNull(homeFurnitureGroup1.getShininess());
      assertNull(homeFurnitureGroup1.getCatalogId());
      assertFalse(homeFurnitureGroup1.isNameVisible());
      assertFalse(homeFurnitureGroup1.isMovable());
      assertEquals((-1.0F), homeFurnitureGroup1.getHeight(), 0.01F);
      assertNull(homeFurnitureGroup1.getCurrency());
      assertEquals(665.505F, homeFurnitureGroup1.getX(), 0.01F);
      assertFalse(homeFurnitureGroup1.isBackFaceShown());
      assertNull(homeFurnitureGroup1.getColor());
      assertEquals(0.0F, homeFurnitureGroup1.getNameYOffset(), 0.01F);
      assertEquals("", homeFurnitureGroup1.getName());
      assertFalse(homeFurnitureGroup1.isModelMirrored());
      assertTrue(homeFurnitureGroup1.isDeformable());
      assertFalse(homeFurnitureGroup0.equals((Object)homeFurnitureGroup1));
      assertFalse(homeFurnitureGroup1.equals((Object)homeFurnitureGroup0));
      assertNotSame(homeFurnitureGroup0, homeFurnitureGroup1);
      assertNotSame(homeFurnitureGroup1, homeFurnitureGroup0);
      
      homeFurnitureGroup1.addPropertyChangeListener(propertyChangeListenerProxy1);
      assertFalse(linkedList0.contains(homePieceOfFurniture0));
      assertEquals("", propertyChangeListenerProxy1.getPropertyName());
      assertEquals(1, linkedList0.size());
      assertTrue(homeFurnitureGroup0.isVisible());
      assertFalse(homeFurnitureGroup0.isNameVisible());
      assertEquals(665.505F, homeFurnitureGroup0.getX(), 0.01F);
      assertTrue(homeFurnitureGroup0.isTexturable());
      assertFalse(homeFurnitureGroup0.isBackFaceShown());
      assertEquals(0.0F, homeFurnitureGroup0.getNameAngle(), 0.01F);
      assertNull(homeFurnitureGroup0.getShininess());
      assertEquals(0.0F, homeFurnitureGroup0.getNameXOffset(), 0.01F);
      assertEquals(1.0F, homeFurnitureGroup0.getGroundElevation(), 0.01F);
      assertNull(homeFurnitureGroup0.getDescription());
      assertEquals(0.5F, homeFurnitureGroup0.getY(), 0.01F);
      assertEquals(1.0F, homeFurnitureGroup0.getDepth(), 0.01F);
      assertEquals(1.0F, homeFurnitureGroup0.getElevation(), 0.01F);
      assertTrue(homeFurnitureGroup0.isDeformable());
      assertFalse(homeFurnitureGroup0.isDoorOrWindow());
      assertEquals(0.0F, homeFurnitureGroup0.getAngle(), 0.01F);
      assertEquals("", homeFurnitureGroup0.getName());
      assertTrue(homeFurnitureGroup0.isResizable());
      assertNull(homeFurnitureGroup0.getCurrency());
      assertNull(homeFurnitureGroup0.getStaircaseCutOutShape());
      assertEquals(1331.01F, homeFurnitureGroup0.getWidth(), 0.01F);
      assertFalse(homeFurnitureGroup0.isModelMirrored());
      assertEquals((-1.0F), homeFurnitureGroup0.getHeight(), 0.01F);
      assertNull(homeFurnitureGroup0.getColor());
      assertNull(homeFurnitureGroup0.getCatalogId());
      assertEquals(0.0F, homeFurnitureGroup0.getNameYOffset(), 0.01F);
      assertFalse(homeFurnitureGroup0.isMovable());
      assertEquals(1.0F, homeFurnitureGroup1.getGroundElevation(), 0.01F);
      assertFalse(homeFurnitureGroup1.isDoorOrWindow());
      assertEquals(1.0F, homeFurnitureGroup1.getDepth(), 0.01F);
      assertEquals(0.5F, homeFurnitureGroup1.getY(), 0.01F);
      assertEquals(1.0F, homeFurnitureGroup1.getElevation(), 0.01F);
      assertTrue(homeFurnitureGroup1.isTexturable());
      assertEquals(2.9470723F, homeFurnitureGroup1.getAngle(), 0.01F);
      assertNull(homeFurnitureGroup1.getDescription());
      assertEquals(0.0F, homeFurnitureGroup1.getNameAngle(), 0.01F);
      assertTrue(homeFurnitureGroup1.isResizable());
      assertNull(homeFurnitureGroup1.getStaircaseCutOutShape());
      assertEquals(1331.01F, homeFurnitureGroup1.getWidth(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup1.getNameXOffset(), 0.01F);
      assertTrue(homeFurnitureGroup1.isVisible());
      assertNull(homeFurnitureGroup1.getShininess());
      assertNull(homeFurnitureGroup1.getCatalogId());
      assertFalse(homeFurnitureGroup1.isNameVisible());
      assertFalse(homeFurnitureGroup1.isMovable());
      assertEquals((-1.0F), homeFurnitureGroup1.getHeight(), 0.01F);
      assertNull(homeFurnitureGroup1.getCurrency());
      assertEquals(665.505F, homeFurnitureGroup1.getX(), 0.01F);
      assertFalse(homeFurnitureGroup1.isBackFaceShown());
      assertNull(homeFurnitureGroup1.getColor());
      assertEquals(0.0F, homeFurnitureGroup1.getNameYOffset(), 0.01F);
      assertEquals("", homeFurnitureGroup1.getName());
      assertFalse(homeFurnitureGroup1.isModelMirrored());
      assertTrue(homeFurnitureGroup1.isDeformable());
      assertEquals("", propertyChangeListenerProxy0.getPropertyName());
      assertFalse(propertyChangeListenerProxy1.equals((Object)propertyChangeListenerProxy0));
      assertFalse(homeFurnitureGroup0.equals((Object)homeFurnitureGroup1));
      assertFalse(homeFurnitureGroup1.equals((Object)homeFurnitureGroup0));
      assertFalse(propertyChangeListenerProxy0.equals((Object)propertyChangeListenerProxy1));
      assertNotSame(propertyChangeListenerProxy1, propertyChangeListenerProxy0);
      assertNotSame(homeFurnitureGroup0, homeFurnitureGroup1);
      assertNotSame(homeFurnitureGroup1, homeFurnitureGroup0);
      assertNotSame(propertyChangeListenerProxy0, propertyChangeListenerProxy1);
      
      homeFurnitureGroup0.setHeight(2001);
      assertFalse(linkedList0.contains(homePieceOfFurniture0));
      assertEquals(1, linkedList0.size());
      assertTrue(homeFurnitureGroup0.isVisible());
      assertFalse(homeFurnitureGroup0.isNameVisible());
      assertEquals(665.505F, homeFurnitureGroup0.getX(), 0.01F);
      assertTrue(homeFurnitureGroup0.isTexturable());
      assertFalse(homeFurnitureGroup0.isBackFaceShown());
      assertEquals(0.0F, homeFurnitureGroup0.getNameAngle(), 0.01F);
      assertNull(homeFurnitureGroup0.getShininess());
      assertEquals(0.0F, homeFurnitureGroup0.getNameXOffset(), 0.01F);
      assertEquals(1.0F, homeFurnitureGroup0.getGroundElevation(), 0.01F);
      assertNull(homeFurnitureGroup0.getDescription());
      assertEquals(0.5F, homeFurnitureGroup0.getY(), 0.01F);
      assertEquals(1.0F, homeFurnitureGroup0.getDepth(), 0.01F);
      assertEquals(1.0F, homeFurnitureGroup0.getElevation(), 0.01F);
      assertTrue(homeFurnitureGroup0.isDeformable());
      assertFalse(homeFurnitureGroup0.isDoorOrWindow());
      assertEquals(0.0F, homeFurnitureGroup0.getAngle(), 0.01F);
      assertEquals("", homeFurnitureGroup0.getName());
      assertTrue(homeFurnitureGroup0.isResizable());
      assertNull(homeFurnitureGroup0.getCurrency());
      assertNull(homeFurnitureGroup0.getStaircaseCutOutShape());
      assertEquals(1331.01F, homeFurnitureGroup0.getWidth(), 0.01F);
      assertFalse(homeFurnitureGroup0.isModelMirrored());
      assertNull(homeFurnitureGroup0.getColor());
      assertNull(homeFurnitureGroup0.getCatalogId());
      assertEquals(2001.0F, homeFurnitureGroup0.getHeight(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getNameYOffset(), 0.01F);
      assertFalse(homeFurnitureGroup0.isMovable());
      assertFalse(homeFurnitureGroup0.equals((Object)homeFurnitureGroup1));
      assertNotSame(homeFurnitureGroup0, homeFurnitureGroup1);
      
      String string0 = homeFurnitureGroup1.getCatalogId();
      assertFalse(linkedList0.contains(homePieceOfFurniture0));
      assertEquals(1, linkedList0.size());
      assertTrue(homeFurnitureGroup0.isVisible());
      assertFalse(homeFurnitureGroup0.isNameVisible());
      assertEquals(665.505F, homeFurnitureGroup0.getX(), 0.01F);
      assertTrue(homeFurnitureGroup0.isTexturable());
      assertFalse(homeFurnitureGroup0.isBackFaceShown());
      assertEquals(0.0F, homeFurnitureGroup0.getNameAngle(), 0.01F);
      assertNull(homeFurnitureGroup0.getShininess());
      assertEquals(0.0F, homeFurnitureGroup0.getNameXOffset(), 0.01F);
      assertEquals(1.0F, homeFurnitureGroup0.getGroundElevation(), 0.01F);
      assertNull(homeFurnitureGroup0.getDescription());
      assertEquals(0.5F, homeFurnitureGroup0.getY(), 0.01F);
      assertEquals(1.0F, homeFurnitureGroup0.getDepth(), 0.01F);
      assertEquals(1.0F, homeFurnitureGroup0.getElevation(), 0.01F);
      assertTrue(homeFurnitureGroup0.isDeformable());
      assertFalse(homeFurnitureGroup0.isDoorOrWindow());
      assertEquals(0.0F, homeFurnitureGroup0.getAngle(), 0.01F);
      assertEquals("", homeFurnitureGroup0.getName());
      assertTrue(homeFurnitureGroup0.isResizable());
      assertNull(homeFurnitureGroup0.getCurrency());
      assertNull(homeFurnitureGroup0.getStaircaseCutOutShape());
      assertEquals(1331.01F, homeFurnitureGroup0.getWidth(), 0.01F);
      assertFalse(homeFurnitureGroup0.isModelMirrored());
      assertNull(homeFurnitureGroup0.getColor());
      assertNull(homeFurnitureGroup0.getCatalogId());
      assertEquals(2001.0F, homeFurnitureGroup0.getHeight(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getNameYOffset(), 0.01F);
      assertFalse(homeFurnitureGroup0.isMovable());
      assertEquals(1.0F, homeFurnitureGroup1.getGroundElevation(), 0.01F);
      assertFalse(homeFurnitureGroup1.isDoorOrWindow());
      assertEquals(1.0F, homeFurnitureGroup1.getDepth(), 0.01F);
      assertEquals(0.5F, homeFurnitureGroup1.getY(), 0.01F);
      assertEquals(1.0F, homeFurnitureGroup1.getElevation(), 0.01F);
      assertTrue(homeFurnitureGroup1.isTexturable());
      assertEquals(2.9470723F, homeFurnitureGroup1.getAngle(), 0.01F);
      assertNull(homeFurnitureGroup1.getDescription());
      assertEquals(0.0F, homeFurnitureGroup1.getNameAngle(), 0.01F);
      assertTrue(homeFurnitureGroup1.isResizable());
      assertNull(homeFurnitureGroup1.getStaircaseCutOutShape());
      assertEquals(1331.01F, homeFurnitureGroup1.getWidth(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup1.getNameXOffset(), 0.01F);
      assertTrue(homeFurnitureGroup1.isVisible());
      assertNull(homeFurnitureGroup1.getShininess());
      assertNull(homeFurnitureGroup1.getCatalogId());
      assertFalse(homeFurnitureGroup1.isNameVisible());
      assertFalse(homeFurnitureGroup1.isMovable());
      assertEquals((-1.0F), homeFurnitureGroup1.getHeight(), 0.01F);
      assertNull(homeFurnitureGroup1.getCurrency());
      assertEquals(665.505F, homeFurnitureGroup1.getX(), 0.01F);
      assertFalse(homeFurnitureGroup1.isBackFaceShown());
      assertNull(homeFurnitureGroup1.getColor());
      assertEquals(0.0F, homeFurnitureGroup1.getNameYOffset(), 0.01F);
      assertEquals("", homeFurnitureGroup1.getName());
      assertFalse(homeFurnitureGroup1.isModelMirrored());
      assertTrue(homeFurnitureGroup1.isDeformable());
      assertFalse(homeFurnitureGroup0.equals((Object)homeFurnitureGroup1));
      assertFalse(homeFurnitureGroup1.equals((Object)homeFurnitureGroup0));
      assertNull(string0);
      assertNotSame(homeFurnitureGroup0, homeFurnitureGroup1);
      assertNotSame(homeFurnitureGroup1, homeFurnitureGroup0);
      
      boolean boolean1 = homeFurnitureGroup1.isDoorOrWindow();
      assertFalse(boolean1);
      assertFalse(linkedList0.contains(homePieceOfFurniture0));
      assertEquals(1, linkedList0.size());
      assertTrue(homeFurnitureGroup0.isVisible());
      assertFalse(homeFurnitureGroup0.isNameVisible());
      assertEquals(665.505F, homeFurnitureGroup0.getX(), 0.01F);
      assertTrue(homeFurnitureGroup0.isTexturable());
      assertFalse(homeFurnitureGroup0.isBackFaceShown());
      assertEquals(0.0F, homeFurnitureGroup0.getNameAngle(), 0.01F);
      assertNull(homeFurnitureGroup0.getShininess());
      assertEquals(0.0F, homeFurnitureGroup0.getNameXOffset(), 0.01F);
      assertEquals(1.0F, homeFurnitureGroup0.getGroundElevation(), 0.01F);
      assertNull(homeFurnitureGroup0.getDescription());
      assertEquals(0.5F, homeFurnitureGroup0.getY(), 0.01F);
      assertEquals(1.0F, homeFurnitureGroup0.getDepth(), 0.01F);
      assertEquals(1.0F, homeFurnitureGroup0.getElevation(), 0.01F);
      assertTrue(homeFurnitureGroup0.isDeformable());
      assertFalse(homeFurnitureGroup0.isDoorOrWindow());
      assertEquals(0.0F, homeFurnitureGroup0.getAngle(), 0.01F);
      assertEquals("", homeFurnitureGroup0.getName());
      assertTrue(homeFurnitureGroup0.isResizable());
      assertNull(homeFurnitureGroup0.getCurrency());
      assertNull(homeFurnitureGroup0.getStaircaseCutOutShape());
      assertEquals(1331.01F, homeFurnitureGroup0.getWidth(), 0.01F);
      assertFalse(homeFurnitureGroup0.isModelMirrored());
      assertNull(homeFurnitureGroup0.getColor());
      assertNull(homeFurnitureGroup0.getCatalogId());
      assertEquals(2001.0F, homeFurnitureGroup0.getHeight(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getNameYOffset(), 0.01F);
      assertFalse(homeFurnitureGroup0.isMovable());
      assertEquals(1.0F, homeFurnitureGroup1.getGroundElevation(), 0.01F);
      assertFalse(homeFurnitureGroup1.isDoorOrWindow());
      assertEquals(1.0F, homeFurnitureGroup1.getDepth(), 0.01F);
      assertEquals(0.5F, homeFurnitureGroup1.getY(), 0.01F);
      assertEquals(1.0F, homeFurnitureGroup1.getElevation(), 0.01F);
      assertTrue(homeFurnitureGroup1.isTexturable());
      assertEquals(2.9470723F, homeFurnitureGroup1.getAngle(), 0.01F);
      assertNull(homeFurnitureGroup1.getDescription());
      assertEquals(0.0F, homeFurnitureGroup1.getNameAngle(), 0.01F);
      assertTrue(homeFurnitureGroup1.isResizable());
      assertNull(homeFurnitureGroup1.getStaircaseCutOutShape());
      assertEquals(1331.01F, homeFurnitureGroup1.getWidth(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup1.getNameXOffset(), 0.01F);
      assertTrue(homeFurnitureGroup1.isVisible());
      assertNull(homeFurnitureGroup1.getShininess());
      assertNull(homeFurnitureGroup1.getCatalogId());
      assertFalse(homeFurnitureGroup1.isNameVisible());
      assertFalse(homeFurnitureGroup1.isMovable());
      assertEquals((-1.0F), homeFurnitureGroup1.getHeight(), 0.01F);
      assertNull(homeFurnitureGroup1.getCurrency());
      assertEquals(665.505F, homeFurnitureGroup1.getX(), 0.01F);
      assertFalse(homeFurnitureGroup1.isBackFaceShown());
      assertNull(homeFurnitureGroup1.getColor());
      assertEquals(0.0F, homeFurnitureGroup1.getNameYOffset(), 0.01F);
      assertEquals("", homeFurnitureGroup1.getName());
      assertFalse(homeFurnitureGroup1.isModelMirrored());
      assertTrue(homeFurnitureGroup1.isDeformable());
      assertFalse(homeFurnitureGroup0.equals((Object)homeFurnitureGroup1));
      assertFalse(homeFurnitureGroup1.equals((Object)homeFurnitureGroup0));
      assertFalse(boolean1 == boolean0);
      assertNotSame(homeFurnitureGroup0, homeFurnitureGroup1);
      assertNotSame(homeFurnitureGroup1, homeFurnitureGroup0);
      
      Integer integer0 = new Integer(2001);
      assertEquals(2001, (int)integer0);
      assertNotNull(integer0);
      
      homeFurnitureGroup0.setColor(integer0);
      assertFalse(linkedList0.contains(homePieceOfFurniture0));
      assertEquals(1, linkedList0.size());
      assertEquals(2001, (int)homeFurnitureGroup0.getColor());
      assertTrue(homeFurnitureGroup0.isVisible());
      assertFalse(homeFurnitureGroup0.isNameVisible());
      assertEquals(665.505F, homeFurnitureGroup0.getX(), 0.01F);
      assertTrue(homeFurnitureGroup0.isTexturable());
      assertFalse(homeFurnitureGroup0.isBackFaceShown());
      assertEquals(0.0F, homeFurnitureGroup0.getNameAngle(), 0.01F);
      assertNull(homeFurnitureGroup0.getShininess());
      assertEquals(0.0F, homeFurnitureGroup0.getNameXOffset(), 0.01F);
      assertEquals(1.0F, homeFurnitureGroup0.getGroundElevation(), 0.01F);
      assertNull(homeFurnitureGroup0.getDescription());
      assertEquals(0.5F, homeFurnitureGroup0.getY(), 0.01F);
      assertEquals(1.0F, homeFurnitureGroup0.getDepth(), 0.01F);
      assertEquals(1.0F, homeFurnitureGroup0.getElevation(), 0.01F);
      assertTrue(homeFurnitureGroup0.isDeformable());
      assertFalse(homeFurnitureGroup0.isDoorOrWindow());
      assertEquals(0.0F, homeFurnitureGroup0.getAngle(), 0.01F);
      assertEquals("", homeFurnitureGroup0.getName());
      assertTrue(homeFurnitureGroup0.isResizable());
      assertNull(homeFurnitureGroup0.getCurrency());
      assertNull(homeFurnitureGroup0.getStaircaseCutOutShape());
      assertEquals(1331.01F, homeFurnitureGroup0.getWidth(), 0.01F);
      assertFalse(homeFurnitureGroup0.isModelMirrored());
      assertNull(homeFurnitureGroup0.getCatalogId());
      assertEquals(2001.0F, homeFurnitureGroup0.getHeight(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getNameYOffset(), 0.01F);
      assertFalse(homeFurnitureGroup0.isMovable());
      assertFalse(homeFurnitureGroup0.equals((Object)homeFurnitureGroup1));
      assertNotSame(homeFurnitureGroup0, homeFurnitureGroup1);
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      LinkedList<HomePieceOfFurniture> linkedList0 = new LinkedList<HomePieceOfFurniture>();
      ResourceURLContent resourceURLContent0 = new ResourceURLContent((URL) null, true);
      LightSource[] lightSourceArray0 = new LightSource[1];
      float[][] floatArray0 = new float[4][6];
      BigDecimal bigDecimal0 = BigDecimal.ZERO;
      CatalogLight catalogLight0 = new CatalogLight("DEPTH", "DEPTH", "DEPTH", resourceURLContent0, resourceURLContent0, resourceURLContent0, 1.0F, 2001.0F, 1.0F, 1.0F, true, lightSourceArray0, floatArray0, "DEPTH", true, bigDecimal0, bigDecimal0);
      HomeLight homeLight0 = new HomeLight(catalogLight0);
      homeLight0.setNameVisible(true);
      linkedList0.add((HomePieceOfFurniture) homeLight0);
      HomeFurnitureGroup homeFurnitureGroup0 = new HomeFurnitureGroup(linkedList0, (String) null);
      HomeFurnitureGroup homeFurnitureGroup1 = homeFurnitureGroup0.clone();
      homeFurnitureGroup1.getModel();
      homeFurnitureGroup1.getDepth();
      homeFurnitureGroup1.setWidth(2001.0F);
      homeFurnitureGroup1.getPlanIcon();
      assertEquals(2001.0F, homeFurnitureGroup1.getWidth(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      LinkedList<HomePieceOfFurniture> linkedList0 = new LinkedList<HomePieceOfFurniture>();
      ResourceURLContent resourceURLContent0 = new ResourceURLContent((URL) null, true);
      LightSource[] lightSourceArray0 = new LightSource[1];
      Float float0 = new Float(0.0);
      LightSource lightSource0 = new LightSource(2874.8F, 2874.8F, 1331.01F, 2001, float0);
      lightSourceArray0[0] = lightSource0;
      float[][] floatArray0 = new float[5][6];
      float[] floatArray1 = new float[5];
      floatArray1[0] = 2874.8F;
      floatArray1[1] = 2874.8F;
      floatArray1[2] = 2874.8F;
      BigDecimal bigDecimal0 = new BigDecimal((-1L));
      CatalogLight catalogLight0 = new CatalogLight("DEPTH", "DEPTH", "fS(plp?27q!ETPwwm4q", resourceURLContent0, resourceURLContent0, resourceURLContent0, 0.3926991F, 0.3926991F, 2874.8F, 0.0F, true, lightSourceArray0, floatArray0, "_])7g^)gy+P0XH3", true, bigDecimal0, bigDecimal0);
      HomeLight homeLight0 = new HomeLight(catalogLight0);
      HomePieceOfFurniture homePieceOfFurniture0 = new HomePieceOfFurniture(homeLight0);
      linkedList0.add((HomePieceOfFurniture) homeLight0);
      HomeFurnitureGroup homeFurnitureGroup0 = new HomeFurnitureGroup(linkedList0, "^Kt#*Xz$:kH^{z+");
      homeLight0.clone();
      homeFurnitureGroup0.clone();
      homeFurnitureGroup0.getModel();
      PropertyChangeListener propertyChangeListener0 = mock(PropertyChangeListener.class, new ViolatedAssumptionAnswer());
      PropertyChangeListenerProxy propertyChangeListenerProxy0 = new PropertyChangeListenerProxy("K\"C(cSAc)I2b", propertyChangeListener0);
      homeFurnitureGroup0.setHeight(35.8802F);
      assertEquals(35.8802F, homeFurnitureGroup0.getHeight(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      LinkedList<HomePieceOfFurniture> linkedList0 = new LinkedList<HomePieceOfFurniture>();
      ResourceURLContent resourceURLContent0 = new ResourceURLContent((URL) null, true);
      LightSource[] lightSourceArray0 = new LightSource[1];
      Float float0 = new Float(0.0);
      LightSource lightSource0 = new LightSource(88.9F, 1.0F, 1331.01F, 2001, float0);
      lightSourceArray0[0] = lightSource0;
      float[][] floatArray0 = new float[4][6];
      BigDecimal bigDecimal0 = new BigDecimal((long) 2001);
      BigDecimal bigDecimal1 = new BigDecimal((-1L));
      BigDecimal bigDecimal2 = new BigDecimal((-1L));
      CatalogLight catalogLight0 = new CatalogLight("_])7g^)gy+P0XH3", "_])7g^)gy+P0XH3", "/<gAhL`8>", resourceURLContent0, resourceURLContent0, resourceURLContent0, 1331.01F, 1.0F, (-1L), 1.0F, false, lightSourceArray0, floatArray0, "DEPTH", true, bigDecimal2, bigDecimal1);
      HomeLight homeLight0 = new HomeLight(catalogLight0);
      HomePieceOfFurniture homePieceOfFurniture0 = new HomePieceOfFurniture(homeLight0);
      linkedList0.add((HomePieceOfFurniture) homeLight0);
      HomeFurnitureGroup homeFurnitureGroup0 = new HomeFurnitureGroup(linkedList0, "_])7g^)gy+P0XH3");
      HomeLight homeLight1 = (HomeLight)linkedList0.pop();
      assertTrue(homeLight1.isVisible());
      assertFalse(homeLight1.isMovable());
      
      HomeFurnitureGroup homeFurnitureGroup1 = homeFurnitureGroup0.clone();
      homeFurnitureGroup1.getModel();
      assertNotSame(homeFurnitureGroup0, homeFurnitureGroup1);
      assertEquals(1331.01F, homeFurnitureGroup0.getWidth(), 0.01F);
      assertEquals(1.0F, homeFurnitureGroup0.getDepth(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      LinkedList<HomePieceOfFurniture> linkedList0 = new LinkedList<HomePieceOfFurniture>();
      ResourceURLContent resourceURLContent0 = new ResourceURLContent((URL) null, true);
      LightSource[] lightSourceArray0 = new LightSource[1];
      Float float0 = new Float(0.0);
      float[][] floatArray0 = new float[4][6];
      BigDecimal bigDecimal0 = new BigDecimal((-1L));
      BigDecimal bigDecimal1 = new BigDecimal((-1L));
      CatalogLight catalogLight0 = new CatalogLight("_])7g^)gy+P0XH3", "_])7g^)gy+P0XH3", "/<gAhL`8>", resourceURLContent0, resourceURLContent0, resourceURLContent0, 1331.01F, 1.0F, (-1L), 1.0F, false, lightSourceArray0, floatArray0, "DEPTH", true, bigDecimal1, bigDecimal0);
      HomeLight homeLight0 = new HomeLight(catalogLight0);
      HomePieceOfFurniture homePieceOfFurniture0 = new HomePieceOfFurniture(homeLight0);
      linkedList0.add((HomePieceOfFurniture) homeLight0);
      HomeFurnitureGroup homeFurnitureGroup0 = new HomeFurnitureGroup(linkedList0, "");
      HomeFurnitureGroup homeFurnitureGroup1 = homeFurnitureGroup0.clone();
      homeFurnitureGroup1.getCatalogId();
      homeFurnitureGroup1.isDoorOrWindow();
      Level level0 = new Level("V*nBGR%,Ub4L+", (-4576.0F), 3242.0F, 0.0F);
      homeFurnitureGroup1.setLevel(level0);
      assertTrue(homeFurnitureGroup1.isVisible());
      assertFalse(homeFurnitureGroup1.isMovable());
      assertEquals(1.0F, homeFurnitureGroup1.getDepth(), 0.01F);
      assertEquals(1331.01F, homeFurnitureGroup1.getWidth(), 0.01F);
      assertEquals(1.0F, homeFurnitureGroup0.getGroundElevation(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      LinkedList<HomePieceOfFurniture> linkedList0 = new LinkedList<HomePieceOfFurniture>();
      ResourceURLContent resourceURLContent0 = new ResourceURLContent((URL) null, true);
      LightSource[] lightSourceArray0 = new LightSource[1];
      float[][] floatArray0 = new float[4][6];
      BigDecimal bigDecimal0 = new BigDecimal((-1L));
      BigDecimal bigDecimal1 = new BigDecimal((-1L));
      CatalogLight catalogLight0 = new CatalogLight("_])7g^)gy+P0XH3", "_])7g^)gy+P0XH3", "/<gAhL`8>", resourceURLContent0, resourceURLContent0, resourceURLContent0, 1331.01F, (-31.701214F), (-1L), (-31.701214F), false, lightSourceArray0, floatArray0, "DEPTH", true, bigDecimal1, bigDecimal0);
      HomeLight homeLight0 = new HomeLight(catalogLight0);
      linkedList0.add((HomePieceOfFurniture) homeLight0);
      HomeFurnitureGroup homeFurnitureGroup0 = new HomeFurnitureGroup(linkedList0, "");
      HomeFurnitureGroup homeFurnitureGroup1 = homeFurnitureGroup0.clone();
      homeFurnitureGroup1.getCatalogId();
      homeFurnitureGroup1.isDoorOrWindow();
      assertNotSame(homeFurnitureGroup1, homeFurnitureGroup0);
      assertTrue(homeFurnitureGroup1.isVisible());
      assertFalse(homeFurnitureGroup1.isMovable());
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      LinkedList<HomePieceOfFurniture> linkedList0 = new LinkedList<HomePieceOfFurniture>();
      ResourceURLContent resourceURLContent0 = new ResourceURLContent((URL) null, true);
      LightSource[] lightSourceArray0 = new LightSource[1];
      float[][] floatArray0 = new float[4][6];
      BigDecimal bigDecimal0 = new BigDecimal((long) 2001);
      BigDecimal bigDecimal1 = new BigDecimal((-1L));
      BigDecimal bigDecimal2 = new BigDecimal((-1L));
      CatalogLight catalogLight0 = new CatalogLight("_])7g^)gy+P0XH3", "_])7g^)gy+P0XH3", "/<gAhL`8>", resourceURLContent0, resourceURLContent0, resourceURLContent0, 1331.01F, (-31.701214F), (-1L), (-31.701214F), false, lightSourceArray0, floatArray0, "DEPTH", true, bigDecimal2, bigDecimal1);
      HomeLight homeLight0 = new HomeLight(catalogLight0);
      linkedList0.add((HomePieceOfFurniture) homeLight0);
      PropertyChangeListener propertyChangeListener0 = mock(PropertyChangeListener.class, new ViolatedAssumptionAnswer());
      PropertyChangeListenerProxy propertyChangeListenerProxy0 = new PropertyChangeListenerProxy("", propertyChangeListener0);
      PropertyChangeListenerProxy propertyChangeListenerProxy1 = new PropertyChangeListenerProxy("", propertyChangeListenerProxy0);
      HomeFurnitureGroup homeFurnitureGroup0 = new HomeFurnitureGroup(linkedList0, "");
      HomeFurnitureGroup homeFurnitureGroup1 = homeFurnitureGroup0.clone();
      homeFurnitureGroup1.setAngle(2001);
      homeFurnitureGroup1.addPropertyChangeListener(propertyChangeListenerProxy1);
      homeFurnitureGroup0.setHeight(2001);
      homeFurnitureGroup1.getCatalogId();
      homeFurnitureGroup1.isDoorOrWindow();
      Integer integer0 = new Integer(2001);
      homeFurnitureGroup0.setColor(integer0);
      homeFurnitureGroup0.getIcon();
      CatalogTexture catalogTexture0 = new CatalogTexture("", "", (Content) null, 3018.0513F, (-1153.0F), "", true);
      HomeTexture homeTexture0 = new HomeTexture(catalogTexture0);
      homeFurnitureGroup1.setTexture(homeTexture0);
      assertEquals(2001.0F, homeFurnitureGroup0.getHeight(), 0.01F);
  }
}
