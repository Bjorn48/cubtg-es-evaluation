* EvoSuite 1.0.7-SNAPSHOT
* Going to generate test cases for class: org.sat4j.minisat.core.Solver
* Starting Client-0
* Connecting to master process on port 13080
* Analyzing classpath: 
  - bins/sat4j/org.ow2.sat4j.core-2.3.6-SNAPSHOT.jar
  - bins/sat4j/org.ow2.sat4j.core-2.3.6-SNAPSHOT-tests.jar
* Finished analyzing classpath
* Generating tests for class org.sat4j.minisat.core.Solver
* Test criteria:
  - Line Coverage
  - Branch Coverage
  - Exception
  - Mutation testing (weak)
  - Method-Output Coverage
  - Top-Level Method Coverage
  - No-Exception Top-Level Method Coverage
  - Context Branch Coverage
* Total number of test goals for DYNAMOSA: 3882
* Using seed 1550578891572
* Starting evolution
* Initialsss Number of Goals in DynMOSA = 1320 / 3882
Current fitness function value: class org.evosuite.coverage.line.LineCoverageSuiteFitness ** 0.22949389179755672
Current fitness function value: class org.evosuite.coverage.branch.BranchCoverageSuiteFitness ** 0.1377899045020464
Current fitness function value: class org.evosuite.coverage.exception.ExceptionCoverageSuiteFitness ** 1.0
Current fitness function value: class org.evosuite.coverage.mutation.WeakMutationSuiteFitness ** 0.14533333333333334
Current fitness function value: class org.evosuite.coverage.io.output.OutputCoverageSuiteFitness ** 0.04887218045112782
Current fitness function value: class org.evosuite.coverage.method.MethodCoverageSuiteFitness ** 0.2440944881889764
Current fitness function value: class org.evosuite.coverage.method.MethodNoExceptionCoverageSuiteFitness ** 0.1968503937007874
Current fitness function value: class org.evosuite.coverage.cbranch.CBranchSuiteFitness ** 0.08321964529331514
* naaame: 
* naaame: org.evosuite.ga.stoppingconditions.ZeroFitnessStoppingCondition
* naaame: org.evosuite.ga.stoppingconditions.MaxFitnessEvaluationsStoppingCondition
Current fitness evaluations: 200
* naaame: org.evosuite.ga.stoppingconditions.GlobalTimeStoppingCondition
* naaame: org.evosuite.ShutdownTestWriter
* naaame: org.evosuite.ga.stoppingconditions.RMIStoppingCondition
* naaame: 
* naaame: org.evosuite.ga.stoppingconditions.ZeroFitnessStoppingCondition
* naaame: org.evosuite.ga.stoppingconditions.MaxFitnessEvaluationsStoppingCondition
Current fitness evaluations: 262
* naaame: org.evosuite.ga.stoppingconditions.GlobalTimeStoppingCondition
* naaame: org.evosuite.ShutdownTestWriter
* naaame: org.evosuite.ga.stoppingconditions.RMIStoppingCondition
Current fitness function value: class org.evosuite.coverage.line.LineCoverageSuiteFitness ** 0.2862129144851658
Current fitness function value: class org.evosuite.coverage.branch.BranchCoverageSuiteFitness ** 0.17326057298772168
Current fitness function value: class org.evosuite.coverage.exception.ExceptionCoverageSuiteFitness ** 1.0
Current fitness function value: class org.evosuite.coverage.mutation.WeakMutationSuiteFitness ** 0.20666666666666667
Current fitness function value: class org.evosuite.coverage.io.output.OutputCoverageSuiteFitness ** 0.06015037593984962
Current fitness function value: class org.evosuite.coverage.method.MethodCoverageSuiteFitness ** 0.3228346456692913
Current fitness function value: class org.evosuite.coverage.method.MethodNoExceptionCoverageSuiteFitness ** 0.2440944881889764
Current fitness function value: class org.evosuite.coverage.cbranch.CBranchSuiteFitness ** 0.10914051841746249
[MASTER] 13:23:04.282 [logback-1] WARN  TestChromosome - Functional mock problem: org.evosuite.ga.ConstructionFailedException: Found no variables of type interface org.sat4j.specs.IteratorInt
* naaame: 
* naaame: org.evosuite.ga.stoppingconditions.ZeroFitnessStoppingCondition
* naaame: org.evosuite.ga.stoppingconditions.MaxFitnessEvaluationsStoppingCondition
Current fitness evaluations: 329
* naaame: org.evosuite.ga.stoppingconditions.GlobalTimeStoppingCondition
* naaame: org.evosuite.ShutdownTestWriter
* naaame: org.evosuite.ga.stoppingconditions.RMIStoppingCondition
Current fitness function value: class org.evosuite.coverage.line.LineCoverageSuiteFitness ** 0.28970331588132636
Current fitness function value: class org.evosuite.coverage.branch.BranchCoverageSuiteFitness ** 0.17598908594815826
Current fitness function value: class org.evosuite.coverage.exception.ExceptionCoverageSuiteFitness ** 1.0
Current fitness function value: class org.evosuite.coverage.mutation.WeakMutationSuiteFitness ** 0.20666666666666667
Current fitness function value: class org.evosuite.coverage.io.output.OutputCoverageSuiteFitness ** 0.06766917293233082
Current fitness function value: class org.evosuite.coverage.method.MethodCoverageSuiteFitness ** 0.3464566929133858
Current fitness function value: class org.evosuite.coverage.method.MethodNoExceptionCoverageSuiteFitness ** 0.2677165354330709
Current fitness function value: class org.evosuite.coverage.cbranch.CBranchSuiteFitness ** 0.11732605729877217
* naaame: 
* naaame: org.evosuite.ga.stoppingconditions.ZeroFitnessStoppingCondition
* naaame: org.evosuite.ga.stoppingconditions.MaxFitnessEvaluationsStoppingCondition
Current fitness evaluations: 396
* naaame: org.evosuite.ga.stoppingconditions.GlobalTimeStoppingCondition
* naaame: org.evosuite.ShutdownTestWriter
* naaame: org.evosuite.ga.stoppingconditions.RMIStoppingCondition
Current fitness function value: class org.evosuite.coverage.line.LineCoverageSuiteFitness ** 0.3394415357766143
Current fitness function value: class org.evosuite.coverage.branch.BranchCoverageSuiteFitness ** 0.2100954979536153
Current fitness function value: class org.evosuite.coverage.exception.ExceptionCoverageSuiteFitness ** 1.0
Current fitness function value: class org.evosuite.coverage.mutation.WeakMutationSuiteFitness ** 0.25066666666666665
Current fitness function value: class org.evosuite.coverage.io.output.OutputCoverageSuiteFitness ** 0.09022556390977443
Current fitness function value: class org.evosuite.coverage.method.MethodCoverageSuiteFitness ** 0.3937007874015748
Current fitness function value: class org.evosuite.coverage.method.MethodNoExceptionCoverageSuiteFitness ** 0.31496062992125984
Current fitness function value: class org.evosuite.coverage.cbranch.CBranchSuiteFitness ** 0.1446111869031378
* naaame: 
* naaame: org.evosuite.ga.stoppingconditions.ZeroFitnessStoppingCondition
* naaame: org.evosuite.ga.stoppingconditions.MaxFitnessEvaluationsStoppingCondition
Current fitness evaluations: 452
* naaame: org.evosuite.ga.stoppingconditions.GlobalTimeStoppingCondition
* naaame: org.evosuite.ShutdownTestWriter
* naaame: org.evosuite.ga.stoppingconditions.RMIStoppingCondition
Current fitness function value: class org.evosuite.coverage.line.LineCoverageSuiteFitness ** 0.3507853403141361
Current fitness function value: class org.evosuite.coverage.branch.BranchCoverageSuiteFitness ** 0.21828103683492497
Current fitness function value: class org.evosuite.coverage.exception.ExceptionCoverageSuiteFitness ** 1.0
Current fitness function value: class org.evosuite.coverage.mutation.WeakMutationSuiteFitness ** 0.264
Current fitness function value: class org.evosuite.coverage.io.output.OutputCoverageSuiteFitness ** 0.09398496240601503
Current fitness function value: class org.evosuite.coverage.method.MethodCoverageSuiteFitness ** 0.4409448818897638
Current fitness function value: class org.evosuite.coverage.method.MethodNoExceptionCoverageSuiteFitness ** 0.33858267716535434
Current fitness function value: class org.evosuite.coverage.cbranch.CBranchSuiteFitness ** 0.15552523874488403
* naaame: 
* naaame: org.evosuite.ga.stoppingconditions.ZeroFitnessStoppingCondition
* naaame: org.evosuite.ga.stoppingconditions.MaxFitnessEvaluationsStoppingCondition
Current fitness evaluations: 510
* naaame: org.evosuite.ga.stoppingconditions.GlobalTimeStoppingCondition
* naaame: org.evosuite.ShutdownTestWriter
* naaame: org.evosuite.ga.stoppingconditions.RMIStoppingCondition
Current fitness function value: class org.evosuite.coverage.line.LineCoverageSuiteFitness ** 0.3507853403141361
Current fitness function value: class org.evosuite.coverage.branch.BranchCoverageSuiteFitness ** 0.21828103683492497
Current fitness function value: class org.evosuite.coverage.exception.ExceptionCoverageSuiteFitness ** 1.0
Current fitness function value: class org.evosuite.coverage.mutation.WeakMutationSuiteFitness ** 0.264
Current fitness function value: class org.evosuite.coverage.io.output.OutputCoverageSuiteFitness ** 0.09398496240601503
Current fitness function value: class org.evosuite.coverage.method.MethodCoverageSuiteFitness ** 0.4409448818897638
Current fitness function value: class org.evosuite.coverage.method.MethodNoExceptionCoverageSuiteFitness ** 0.33858267716535434
Current fitness function value: class org.evosuite.coverage.cbranch.CBranchSuiteFitness ** 0.15552523874488403
* naaame: 
* naaame: org.evosuite.ga.stoppingconditions.ZeroFitnessStoppingCondition
* naaame: org.evosuite.ga.stoppingconditions.MaxFitnessEvaluationsStoppingCondition
Current fitness evaluations: 592
* naaame: org.evosuite.ga.stoppingconditions.GlobalTimeStoppingCondition
* naaame: org.evosuite.ShutdownTestWriter
* naaame: org.evosuite.ga.stoppingconditions.RMIStoppingCondition
Current fitness function value: class org.evosuite.coverage.line.LineCoverageSuiteFitness ** 0.3542757417102967
Current fitness function value: class org.evosuite.coverage.branch.BranchCoverageSuiteFitness ** 0.21964529331514324
Current fitness function value: class org.evosuite.coverage.exception.ExceptionCoverageSuiteFitness ** 1.0
Current fitness function value: class org.evosuite.coverage.mutation.WeakMutationSuiteFitness ** 0.264
Current fitness function value: class org.evosuite.coverage.io.output.OutputCoverageSuiteFitness ** 0.10150375939849623
Current fitness function value: class org.evosuite.coverage.method.MethodCoverageSuiteFitness ** 0.4645669291338583
Current fitness function value: class org.evosuite.coverage.method.MethodNoExceptionCoverageSuiteFitness ** 0.36220472440944884
Current fitness function value: class org.evosuite.coverage.cbranch.CBranchSuiteFitness ** 0.15961800818553887
* naaame: 
* naaame: org.evosuite.ga.stoppingconditions.ZeroFitnessStoppingCondition
* naaame: org.evosuite.ga.stoppingconditions.MaxFitnessEvaluationsStoppingCondition
Current fitness evaluations: 666
* naaame: org.evosuite.ga.stoppingconditions.GlobalTimeStoppingCondition
* naaame: org.evosuite.ShutdownTestWriter
* naaame: org.evosuite.ga.stoppingconditions.RMIStoppingCondition
* naaame: 
* naaame: org.evosuite.ga.stoppingconditions.ZeroFitnessStoppingCondition
* naaame: org.evosuite.ga.stoppingconditions.MaxFitnessEvaluationsStoppingCondition
Current fitness evaluations: 741
* naaame: org.evosuite.ga.stoppingconditions.GlobalTimeStoppingCondition
* naaame: org.evosuite.ShutdownTestWriter
* naaame: org.evosuite.ga.stoppingconditions.RMIStoppingCondition
Current fitness function value: class org.evosuite.coverage.line.LineCoverageSuiteFitness ** 0.37085514834205935
Current fitness function value: class org.evosuite.coverage.branch.BranchCoverageSuiteFitness ** 0.22783083219645292
Current fitness function value: class org.evosuite.coverage.exception.ExceptionCoverageSuiteFitness ** 1.0
Current fitness function value: class org.evosuite.coverage.mutation.WeakMutationSuiteFitness ** 0.2733333333333333
Current fitness function value: class org.evosuite.coverage.io.output.OutputCoverageSuiteFitness ** 0.17293233082706766
Current fitness function value: class org.evosuite.coverage.method.MethodCoverageSuiteFitness ** 0.5354330708661418
Current fitness function value: class org.evosuite.coverage.method.MethodNoExceptionCoverageSuiteFitness ** 0.4251968503937008
Current fitness function value: class org.evosuite.coverage.cbranch.CBranchSuiteFitness ** 0.17326057298772168
* naaame: 
* naaame: org.evosuite.ga.stoppingconditions.ZeroFitnessStoppingCondition
* naaame: org.evosuite.ga.stoppingconditions.MaxFitnessEvaluationsStoppingCondition
Current fitness evaluations: 753
* naaame: org.evosuite.ga.stoppingconditions.GlobalTimeStoppingCondition
* naaame: org.evosuite.ShutdownTestWriter
* naaame: org.evosuite.ga.stoppingconditions.RMIStoppingCondition
Current fitness function value: class org.evosuite.coverage.line.LineCoverageSuiteFitness ** 0.3726003490401396
Current fitness function value: class org.evosuite.coverage.branch.BranchCoverageSuiteFitness ** 0.2291950886766712
Current fitness function value: class org.evosuite.coverage.exception.ExceptionCoverageSuiteFitness ** 1.0
Current fitness function value: class org.evosuite.coverage.mutation.WeakMutationSuiteFitness ** 0.276
Current fitness function value: class org.evosuite.coverage.io.output.OutputCoverageSuiteFitness ** 0.17669172932330826
Current fitness function value: class org.evosuite.coverage.method.MethodCoverageSuiteFitness ** 0.5433070866141733
Current fitness function value: class org.evosuite.coverage.method.MethodNoExceptionCoverageSuiteFitness ** 0.4251968503937008
Current fitness function value: class org.evosuite.coverage.cbranch.CBranchSuiteFitness ** 0.17462482946793997
* Search finished after 125s and 9 generations, 16099 statements, best individual has fitness: 2782.0
Current fitness function value: class org.evosuite.coverage.line.LineCoverageSuiteFitness ** 0.3726003490401396
Current fitness function value: class org.evosuite.coverage.branch.BranchCoverageSuiteFitness ** 0.2291950886766712
Current fitness function value: class org.evosuite.coverage.exception.ExceptionCoverageSuiteFitness ** 1.0
Current fitness function value: class org.evosuite.coverage.mutation.WeakMutationSuiteFitness ** 0.276
Current fitness function value: class org.evosuite.coverage.io.output.OutputCoverageSuiteFitness ** 0.17669172932330826
Current fitness function value: class org.evosuite.coverage.method.MethodCoverageSuiteFitness ** 0.5433070866141733
Current fitness function value: class org.evosuite.coverage.method.MethodNoExceptionCoverageSuiteFitness ** 0.4251968503937008
Current fitness function value: class org.evosuite.coverage.cbranch.CBranchSuiteFitness ** 0.17462482946793997
* Minimizing test suite
[MASTER] 13:24:58.945 [logback-1] WARN  TestSuiteMinimizer - Minimization timeout. Roll back to original test suite
* Going to analyze the coverage criteria
* Coverage analysis for criterion LINE
* Coverage of criterion LINE: 39%
* Total number of goals: 1146
* Number of covered goals: 446
* Coverage analysis for criterion BRANCH
* Coverage of criterion BRANCH: 23%
* Total number of goals: 733
* Number of covered goals: 168
* Coverage analysis for criterion EXCEPTION
* Coverage of criterion EXCEPTION: 100%
* Total number of goals: 30
* Number of covered goals: 30
* Coverage analysis for criterion WEAKMUTATION
* Coverage of criterion WEAKMUTATION: 28%
* Total number of goals: 750
* Number of covered goals: 213
* Coverage analysis for criterion OUTPUT
* Coverage of criterion OUTPUT: 18%
* Total number of goals: 266
* Number of covered goals: 47
* Coverage analysis for criterion METHOD
* Coverage of criterion METHOD: 57%
* Total number of goals: 127
* Number of covered goals: 73
* Coverage analysis for criterion METHODNOEXCEPTION
* Coverage of criterion METHODNOEXCEPTION: 43%
* Total number of goals: 127
* Number of covered goals: 54
* Coverage analysis for criterion CBRANCH
* Coverage of criterion CBRANCH: 17%
* Total number of goals: 733
* Number of covered goals: 128
Current fitness function value: class org.evosuite.coverage.line.LineCoverageSuiteFitness ** 0.3726003490401396
Current fitness function value: class org.evosuite.coverage.branch.BranchCoverageSuiteFitness ** 0.2291950886766712
Current fitness function value: class org.evosuite.coverage.exception.ExceptionCoverageSuiteFitness ** 1.0
Current fitness function value: class org.evosuite.coverage.mutation.WeakMutationSuiteFitness ** 0.276
Current fitness function value: class org.evosuite.coverage.io.output.OutputCoverageSuiteFitness ** 0.17669172932330826
Current fitness function value: class org.evosuite.coverage.method.MethodCoverageSuiteFitness ** 0.5433070866141733
Current fitness function value: class org.evosuite.coverage.method.MethodNoExceptionCoverageSuiteFitness ** 0.4251968503937008
Current fitness function value: class org.evosuite.coverage.cbranch.CBranchSuiteFitness ** 0.17462482946793997
* Generated 117 tests with total length 2940
* Resulting test suite's coverage: 40% (average coverage for all fitness functions)
* Generating assertions
[MASTER] 13:26:04.486 [logback-1] WARN  SimpleMutationAssertionGenerator - Assertion minimization is taking too long (0.8825166666666666% of time used, but only 22/117 tests minimized), falling back to using all assertions
* Resulting test suite's mutation score: 3%
Current fitness function value: class org.evosuite.coverage.line.LineCoverageSuiteFitness ** 0.3726003490401396
Current fitness function value: class org.evosuite.coverage.branch.BranchCoverageSuiteFitness ** 0.2291950886766712
Current fitness function value: class org.evosuite.coverage.exception.ExceptionCoverageSuiteFitness ** 1.0
Current fitness function value: class org.evosuite.coverage.mutation.WeakMutationSuiteFitness ** 0.276
Current fitness function value: class org.evosuite.coverage.io.output.OutputCoverageSuiteFitness ** 0.17669172932330826
Current fitness function value: class org.evosuite.coverage.method.MethodCoverageSuiteFitness ** 0.5433070866141733
Current fitness function value: class org.evosuite.coverage.method.MethodNoExceptionCoverageSuiteFitness ** 0.4251968503937008
Current fitness function value: class org.evosuite.coverage.cbranch.CBranchSuiteFitness ** 0.17462482946793997
* Compiling and checking tests
[MASTER] 13:26:39.635 [logback-1] WARN  ClassResetter - class java.lang.IncompatibleClassChangeError thrown while loading method  __STATIC_RESET() for class org.sat4j.minisat.core.Solver$GlucoseLCDS
[MASTER] 13:26:39.652 [logback-1] WARN  ClassResetter - class java.lang.IncompatibleClassChangeError thrown while loading method  __STATIC_RESET() for class org.sat4j.minisat.core.Solver$Glucose2LCDS
[MASTER] 13:26:57.448 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class org.evosuite.runtime.System$SystemExitException: null
[MASTER] 13:26:57.449 [logback-1] WARN  JUnitAnalyzer - Failing test:
 FixedLengthLearning<CardinalityDataStructureYanMax> fixedLengthLearning0 = new FixedLengthLearning<CardinalityDataStructureYanMax>((-2000));
CardinalityDataStructureYanMax cardinalityDataStructureYanMax0 = new CardinalityDataStructureYanMax();
SearchParams searchParams0 = new SearchParams();
NaturalStaticOrder naturalStaticOrder0 = new NaturalStaticOrder();
naturalStaticOrder0.updateVar((-2000));
naturalStaticOrder0.updateVarAtDecisionLevel(7);
NoRestarts noRestarts0 = new NoRestarts();
noRestarts0.shouldRestart();
noRestarts0.onBackjumpToRootLevel();
Pair pair0 = new Pair();
pair0.getReason();
noRestarts0.newLearnedClause((Constr) null, (-1008));
MUSLauncher mUSLauncher0 = new MUSLauncher();
mUSLauncher0.log("org.sat4j.reader.Reader");
Solver<CardinalityDataStructureYanMax> solver0 = new Solver<CardinalityDataStructureYanMax>(fixedLengthLearning0, cardinalityDataStructureYanMax0, searchParams0, naturalStaticOrder0, noRestarts0, mUSLauncher0);
PercentLengthLearning<ClausalDataStructureWL> percentLengthLearning0 = new PercentLengthLearning<ClausalDataStructureWL>(12127);
String[] stringArray0 = new String[2];
stringArray0[0] = "c ";
stringArray0[1] = "UNSATISFIABLE";
MUSLauncher.main(stringArray0);

[MASTER] 13:27:03.504 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class java.lang.AssertionError: expected:<1> but was:<0>
[MASTER] 13:27:03.526 [logback-1] WARN  JUnitAnalyzer - Failing test:
 FixedLengthLearning<CardinalityDataStructure> fixedLengthLearning0 = new FixedLengthLearning<CardinalityDataStructure>();
assertEquals(3, fixedLengthLearning0.getMaxLength());
assertNotNull(fixedLengthLearning0);

CardinalityDataStructure cardinalityDataStructure0 = new CardinalityDataStructure();
assertNotNull(cardinalityDataStructure0);

SearchParams searchParams0 = new SearchParams(1621.92741493, 1);
assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
assertEquals(1, searchParams0.getInitConflictBound());
assertEquals(1621.92741493, searchParams0.getConflictBoundIncFactor(), 0.01);
assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
assertNotNull(searchParams0);

double double0 = searchParams0.getConflictBoundIncFactor();
assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
assertEquals(1, searchParams0.getInitConflictBound());
assertEquals(1621.92741493, searchParams0.getConflictBoundIncFactor(), 0.01);
assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
assertEquals(1621.92741493, double0, 0.01);

NaturalStaticOrder naturalStaticOrder0 = new NaturalStaticOrder();
assertEquals("Natural static ordering", naturalStaticOrder0.toString());
assertNotNull(naturalStaticOrder0);

naturalStaticOrder0.updateVar(500);
assertEquals("Natural static ordering", naturalStaticOrder0.toString());

naturalStaticOrder0.updateVarAtDecisionLevel(7);
assertEquals("Natural static ordering", naturalStaticOrder0.toString());

FixedPeriodRestarts fixedPeriodRestarts0 = new FixedPeriodRestarts();
assertEquals(0L, fixedPeriodRestarts0.getPeriod());
assertTrue(fixedPeriodRestarts0.shouldRestart());
assertEquals(0L, fixedPeriodRestarts0.nextRestartNumberOfConflict());
assertNotNull(fixedPeriodRestarts0);

ActiveLearning<MixedDataStructureDanielHT> activeLearning0 = new ActiveLearning<MixedDataStructureDanielHT>();
assertEquals(0, activeLearning0.getLimit());
assertEquals(0.95, activeLearning0.getActivityPercent(), 0.01);
assertNotNull(activeLearning0);

fixedPeriodRestarts0.newConflict();
assertEquals(0L, fixedPeriodRestarts0.getPeriod());
assertTrue(fixedPeriodRestarts0.shouldRestart());
assertEquals(0L, fixedPeriodRestarts0.nextRestartNumberOfConflict());

MiniSATLearning<MixedDataStructureDanielHT> miniSATLearning0 = new MiniSATLearning<MixedDataStructureDanielHT>();
assertEquals("Learn all clauses as in MiniSAT", miniSATLearning0.toString());
assertNotNull(miniSATLearning0);

MixedDataStructureDanielHT mixedDataStructureDanielHT0 = new MixedDataStructureDanielHT();
assertNotNull(mixedDataStructureDanielHT0);

Solver<MixedDataStructureDanielHT> solver0 = new Solver<MixedDataStructureDanielHT>(miniSATLearning0, mixedDataStructureDanielHT0, searchParams0, naturalStaticOrder0, fixedPeriodRestarts0);
assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
assertEquals(1, searchParams0.getInitConflictBound());
assertEquals(1621.92741493, searchParams0.getConflictBoundIncFactor(), 0.01);
assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
assertEquals("Natural static ordering", naturalStaticOrder0.toString());
assertEquals(0L, fixedPeriodRestarts0.getPeriod());
assertTrue(fixedPeriodRestarts0.shouldRestart());
assertEquals(0L, fixedPeriodRestarts0.nextRestartNumberOfConflict());
assertEquals("Learn all clauses as in MiniSAT", miniSATLearning0.toString());
assertFalse(solver0.isDBSimplificationAllowed());
assertFalse(solver0.isVerbose());
assertEquals(0, solver0.getPropagationLevel());
assertEquals(0, solver0.currentDecisionLevel());
assertEquals(0, solver0.decisionLevel());
assertEquals("c ", solver0.getLogPrefix());
assertEquals(1, solver0.realNumberOfVariables());
assertEquals(0, solver0.nConstraints());
assertEquals(2147483, solver0.getTimeout());
assertEquals(2, solver0.newVar());
assertFalse(solver0.isSolverKeptHot());
assertEquals(1, solver0.nVars());
assertNotNull(solver0);

int int0 = solver0.getPropagationLevel();
assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
assertEquals(1, searchParams0.getInitConflictBound());
assertEquals(1621.92741493, searchParams0.getConflictBoundIncFactor(), 0.01);
assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
assertEquals("Natural static ordering", naturalStaticOrder0.toString());
assertEquals(0L, fixedPeriodRestarts0.getPeriod());
assertTrue(fixedPeriodRestarts0.shouldRestart());
assertEquals(0L, fixedPeriodRestarts0.nextRestartNumberOfConflict());
assertEquals("Learn all clauses as in MiniSAT", miniSATLearning0.toString());
assertFalse(solver0.isDBSimplificationAllowed());
assertFalse(solver0.isVerbose());
assertEquals(0, solver0.getPropagationLevel());
assertEquals(4, solver0.newVar());
assertEquals(0, solver0.currentDecisionLevel());
assertEquals(0, solver0.decisionLevel());
assertEquals("c ", solver0.getLogPrefix());
assertEquals(3, solver0.realNumberOfVariables());
assertEquals(3, solver0.nVars());
assertEquals(0, solver0.nConstraints());
assertEquals(2147483, solver0.getTimeout());
assertFalse(solver0.isSolverKeptHot());
assertEquals(0, int0);

LBDConflictTimer lBDConflictTimer0 = new LBDConflictTimer(solver0, 0);
assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
assertEquals(1, searchParams0.getInitConflictBound());
assertEquals(1621.92741493, searchParams0.getConflictBoundIncFactor(), 0.01);
assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
assertEquals("Natural static ordering", naturalStaticOrder0.toString());
assertEquals(0L, fixedPeriodRestarts0.getPeriod());
assertTrue(fixedPeriodRestarts0.shouldRestart());
assertEquals(0L, fixedPeriodRestarts0.nextRestartNumberOfConflict());
assertEquals("Learn all clauses as in MiniSAT", miniSATLearning0.toString());
assertFalse(solver0.isDBSimplificationAllowed());
assertEquals(5, solver0.nVars());
assertFalse(solver0.isVerbose());
assertEquals(5, solver0.realNumberOfVariables());
assertEquals(0, solver0.getPropagationLevel());
assertEquals(0, solver0.currentDecisionLevel());
assertEquals(0, solver0.decisionLevel());
assertEquals("c ", solver0.getLogPrefix());
assertEquals(6, solver0.newVar());
assertEquals(0, solver0.nConstraints());
assertEquals(2147483, solver0.getTimeout());
assertFalse(solver0.isSolverKeptHot());
assertEquals(0, lBDConflictTimer0.bound());
assertNotNull(lBDConflictTimer0);

Solver<? extends DataStructureFactory> solver1 = lBDConflictTimer0.getSolver();
assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
assertEquals(1, searchParams0.getInitConflictBound());
assertEquals(1621.92741493, searchParams0.getConflictBoundIncFactor(), 0.01);
assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
assertEquals("Natural static ordering", naturalStaticOrder0.toString());
assertEquals(0L, fixedPeriodRestarts0.getPeriod());
assertTrue(fixedPeriodRestarts0.shouldRestart());
assertEquals(0L, fixedPeriodRestarts0.nextRestartNumberOfConflict());
assertEquals("Learn all clauses as in MiniSAT", miniSATLearning0.toString());
assertEquals(9, solver0.realNumberOfVariables());
assertFalse(solver0.isDBSimplificationAllowed());
assertFalse(solver0.isVerbose());
assertEquals(10, solver0.newVar());
assertEquals(9, solver0.nVars());
assertEquals(0, solver0.getPropagationLevel());
assertEquals(0, solver0.currentDecisionLevel());
assertEquals(0, solver0.decisionLevel());
assertEquals("c ", solver0.getLogPrefix());
assertEquals(0, solver0.nConstraints());
assertEquals(2147483, solver0.getTimeout());
assertFalse(solver0.isSolverKeptHot());
assertEquals(0, lBDConflictTimer0.bound());
assertFalse(solver1.isDBSimplificationAllowed());
assertEquals(0, solver1.decisionLevel());
assertFalse(solver1.isSolverKeptHot());
assertFalse(solver1.isVerbose());
assertEquals(0, solver1.nConstraints());
assertEquals(2147483, solver1.getTimeout());
assertEquals(0, solver1.currentDecisionLevel());
assertEquals(0, solver1.getPropagationLevel());
assertEquals("c ", solver1.getLogPrefix());
assertEquals(8, solver1.realNumberOfVariables());
assertEquals(8, solver1.nVars());
assertEquals(9, solver1.newVar());
assertNotNull(solver1);

solver0.unset(1);
assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
assertEquals(1, searchParams0.getInitConflictBound());
assertEquals(1621.92741493, searchParams0.getConflictBoundIncFactor(), 0.01);
assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
assertEquals("Natural static ordering", naturalStaticOrder0.toString());
assertEquals(0L, fixedPeriodRestarts0.getPeriod());
assertTrue(fixedPeriodRestarts0.shouldRestart());
assertEquals(0L, fixedPeriodRestarts0.nextRestartNumberOfConflict());
assertEquals("Learn all clauses as in MiniSAT", miniSATLearning0.toString());
assertEquals(12, solver0.newVar());
assertFalse(solver0.isDBSimplificationAllowed());
assertEquals(11, solver0.realNumberOfVariables());
assertFalse(solver0.isVerbose());
assertEquals(11, solver0.nVars());
assertEquals(0, solver0.getPropagationLevel());
assertEquals(0, solver0.currentDecisionLevel());
assertEquals(0, solver0.decisionLevel());
assertEquals("c ", solver0.getLogPrefix());
assertEquals(0, solver0.nConstraints());
assertEquals(2147483, solver0.getTimeout());
assertFalse(solver0.isSolverKeptHot());

MiniSATLearning<CardinalityDataStructureYanMax> miniSATLearning1 = new MiniSATLearning<CardinalityDataStructureYanMax>();
assertEquals("Learn all clauses as in MiniSAT", miniSATLearning1.toString());
assertNotNull(miniSATLearning1);

CardinalityDataStructureYanMax cardinalityDataStructureYanMax0 = new CardinalityDataStructureYanMax();
assertNotNull(cardinalityDataStructureYanMax0);

MUSLauncher mUSLauncher0 = new MUSLauncher();
assertEquals(ExitCode.UNKNOWN, mUSLauncher0.getExitCode());
assertEquals(0L, mUSLauncher0.getBeginTime());
assertFalse(mUSLauncher0.isSilent());
assertNotNull(mUSLauncher0);

mUSLauncher0.log(" constraints processed.");
assertEquals(ExitCode.UNKNOWN, mUSLauncher0.getExitCode());
assertEquals(0L, mUSLauncher0.getBeginTime());
assertFalse(mUSLauncher0.isSilent());

Solver<CardinalityDataStructureYanMax> solver2 = new Solver<CardinalityDataStructureYanMax>(miniSATLearning1, cardinalityDataStructureYanMax0, searchParams0, naturalStaticOrder0, fixedPeriodRestarts0, mUSLauncher0);
assertEquals("Learn all clauses as in MiniSAT", miniSATLearning1.toString());
assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
assertEquals(1, searchParams0.getInitConflictBound());
assertEquals(1621.92741493, searchParams0.getConflictBoundIncFactor(), 0.01);
assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
assertEquals(ExitCode.UNKNOWN, mUSLauncher0.getExitCode());
assertEquals(0L, mUSLauncher0.getBeginTime());
assertFalse(mUSLauncher0.isSilent());
assertEquals("Natural static ordering", naturalStaticOrder0.toString());
assertEquals(0, solver2.decisionLevel());
assertEquals("c ", solver2.getLogPrefix());
assertFalse(solver2.isSolverKeptHot());
assertEquals(1, solver2.nVars());
assertEquals(2, solver2.newVar());
assertEquals(1, solver2.realNumberOfVariables());
assertEquals(0, solver2.nConstraints());
assertEquals(2147483, solver2.getTimeout());
assertFalse(solver2.isDBSimplificationAllowed());
assertEquals(0, solver2.currentDecisionLevel());
assertEquals(0, solver2.getPropagationLevel());
assertFalse(solver2.isVerbose());
assertEquals(0L, fixedPeriodRestarts0.getPeriod());
assertTrue(fixedPeriodRestarts0.shouldRestart());
assertEquals(0L, fixedPeriodRestarts0.nextRestartNumberOfConflict());
assertNotNull(solver2);

solver2.setTimeoutMs(1);
assertEquals("Learn all clauses as in MiniSAT", miniSATLearning1.toString());
assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
assertEquals(1, searchParams0.getInitConflictBound());
assertEquals(1621.92741493, searchParams0.getConflictBoundIncFactor(), 0.01);
assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
assertEquals(ExitCode.UNKNOWN, mUSLauncher0.getExitCode());
assertEquals(0L, mUSLauncher0.getBeginTime());
assertFalse(mUSLauncher0.isSilent());
assertEquals("Natural static ordering", naturalStaticOrder0.toString());
assertEquals(4, solver2.newVar());
assertEquals(3, solver2.realNumberOfVariables());
assertEquals(0, solver2.decisionLevel());
assertEquals("c ", solver2.getLogPrefix());
assertEquals(3, solver2.nVars());
assertFalse(solver2.isSolverKeptHot());
assertEquals(0, solver2.nConstraints());
assertEquals(0, solver2.getTimeout());
assertFalse(solver2.isDBSimplificationAllowed());
assertEquals(0, solver2.currentDecisionLevel());
assertEquals(0, solver2.getPropagationLevel());
assertFalse(solver2.isVerbose());
assertEquals(0L, fixedPeriodRestarts0.getPeriod());
assertTrue(fixedPeriodRestarts0.shouldRestart());
assertEquals(0L, fixedPeriodRestarts0.nextRestartNumberOfConflict());


[MASTER] 13:27:04.814 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class java.lang.AssertionError: expected:<2> but was:<1>
[MASTER] 13:27:04.826 [logback-1] WARN  JUnitAnalyzer - Failing test:
 PercentLengthLearning<CardinalityDataStructureYanMin> percentLengthLearning0 = new PercentLengthLearning<CardinalityDataStructureYanMin>(1356);
assertEquals(1356, percentLengthLearning0.getLimit());
assertNotNull(percentLengthLearning0);

CardinalityDataStructureYanMin cardinalityDataStructureYanMin0 = new CardinalityDataStructureYanMin();
assertNotNull(cardinalityDataStructureYanMin0);

RSATLastLearnedClausesPhaseSelectionStrategy rSATLastLearnedClausesPhaseSelectionStrategy0 = new RSATLastLearnedClausesPhaseSelectionStrategy();
assertEquals("lightweight component caching from RSAT inverting phase for variables at conflict decision level", rSATLastLearnedClausesPhaseSelectionStrategy0.toString());
assertNotNull(rSATLastLearnedClausesPhaseSelectionStrategy0);

VarOrderHeap varOrderHeap0 = new VarOrderHeap(rSATLastLearnedClausesPhaseSelectionStrategy0);
assertEquals("lightweight component caching from RSAT inverting phase for variables at conflict decision level", rSATLastLearnedClausesPhaseSelectionStrategy0.toString());
assertEquals(0, varOrderHeap0.numberOfInterestingVariables());
assertNotNull(varOrderHeap0);

double[] doubleArray0 = varOrderHeap0.getVariableHeuristics();
assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
assertEquals(1, doubleArray0.length);
assertEquals("lightweight component caching from RSAT inverting phase for variables at conflict decision level", rSATLastLearnedClausesPhaseSelectionStrategy0.toString());
assertEquals(0, varOrderHeap0.numberOfInterestingVariables());
assertNotNull(doubleArray0);

NoRestarts noRestarts0 = new NoRestarts();
assertEquals(9223372036854775807L, noRestarts0.nextRestartNumberOfConflict());
assertEquals("NoRestarts", noRestarts0.toString());
assertFalse(noRestarts0.shouldRestart());
assertNotNull(noRestarts0);

boolean boolean0 = noRestarts0.shouldRestart();
assertEquals(9223372036854775807L, noRestarts0.nextRestartNumberOfConflict());
assertEquals("NoRestarts", noRestarts0.toString());
assertFalse(noRestarts0.shouldRestart());
assertFalse(boolean0);

noRestarts0.onBackjumpToRootLevel();
assertEquals(9223372036854775807L, noRestarts0.nextRestartNumberOfConflict());
assertEquals("NoRestarts", noRestarts0.toString());
assertFalse(noRestarts0.shouldRestart());

Pair pair0 = new Pair();
assertEquals(0, pair0.getBacktrackLevel());
assertNotNull(pair0);

Constr constr0 = pair0.getReason();
assertEquals(0, pair0.getBacktrackLevel());
assertNull(constr0);

int int0 = (-1008);
noRestarts0.newLearnedClause((Constr) null, (-1008));
assertEquals(9223372036854775807L, noRestarts0.nextRestartNumberOfConflict());
assertEquals("NoRestarts", noRestarts0.toString());
assertFalse(noRestarts0.shouldRestart());

boolean boolean1 = false;
Solver<ClausalDataStructureWL>[] solverArray0 = (Solver<ClausalDataStructureWL>[]) Array.newInstance(Solver.class, 4);
ActiveLearning<ClausalDataStructureWL> activeLearning0 = new ActiveLearning<ClausalDataStructureWL>(1.0);
assertEquals(1.0, activeLearning0.getActivityPercent(), 0.01);
assertEquals(0, activeLearning0.getLimit());
assertNotNull(activeLearning0);

ClausalDataStructureWL clausalDataStructureWL0 = new ClausalDataStructureWL();
assertNotNull(clausalDataStructureWL0);

NaturalStaticOrder naturalStaticOrder0 = new NaturalStaticOrder();
assertEquals("Natural static ordering", naturalStaticOrder0.toString());
assertNotNull(naturalStaticOrder0);

FixedLengthLearning<CardinalityDataStructure> fixedLengthLearning0 = new FixedLengthLearning<CardinalityDataStructure>();
assertEquals(3, fixedLengthLearning0.getMaxLength());
assertNotNull(fixedLengthLearning0);

CardinalityDataStructure cardinalityDataStructure0 = new CardinalityDataStructure();
assertNotNull(cardinalityDataStructure0);

int int1 = 0;
SearchParams searchParams0 = new SearchParams(1.0, 0);
assertEquals(0, searchParams0.getInitConflictBound());
assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
assertEquals(1.0, searchParams0.getConflictBoundIncFactor(), 0.01);
assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
assertNotNull(searchParams0);

EMARestarts eMARestarts0 = new EMARestarts();
assertEquals("Exponential Moving Average (EMA, Biere) restarts strategy", eMARestarts0.toString());
assertEquals(0L, eMARestarts0.nextRestartNumberOfConflict());
assertNotNull(eMARestarts0);

MUSLauncher mUSLauncher0 = new MUSLauncher();
assertEquals(ExitCode.UNKNOWN, mUSLauncher0.getExitCode());
assertFalse(mUSLauncher0.isSilent());
assertEquals(0L, mUSLauncher0.getBeginTime());
assertNotNull(mUSLauncher0);

Solver<CardinalityDataStructure> solver0 = new Solver<CardinalityDataStructure>(fixedLengthLearning0, cardinalityDataStructure0, searchParams0, naturalStaticOrder0, eMARestarts0, mUSLauncher0);
assertEquals("Natural static ordering", naturalStaticOrder0.toString());
assertEquals(3, fixedLengthLearning0.getMaxLength());
assertEquals(0, searchParams0.getInitConflictBound());
assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
assertEquals(1.0, searchParams0.getConflictBoundIncFactor(), 0.01);
assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
assertEquals("Exponential Moving Average (EMA, Biere) restarts strategy", eMARestarts0.toString());
assertEquals(0L, eMARestarts0.nextRestartNumberOfConflict());
assertEquals(ExitCode.UNKNOWN, mUSLauncher0.getExitCode());
assertFalse(mUSLauncher0.isSilent());
assertEquals(0L, mUSLauncher0.getBeginTime());
assertFalse(solver0.isDBSimplificationAllowed());
assertEquals("c ", solver0.getLogPrefix());
assertEquals(0, solver0.getPropagationLevel());
assertFalse(solver0.isVerbose());
assertEquals(2, solver0.newVar());
assertEquals(0, solver0.currentDecisionLevel());
assertEquals(1, solver0.realNumberOfVariables());
assertEquals(0, solver0.nConstraints());
assertEquals(2147483, solver0.getTimeout());
assertFalse(solver0.isSolverKeptHot());
assertEquals(1, solver0.nVars());
assertEquals(0, solver0.decisionLevel());
assertNotNull(solver0);

EMARestarts eMARestarts1 = (EMARestarts)solver0.getRestartStrategy();
assertSame(eMARestarts0, eMARestarts1);
assertSame(eMARestarts1, eMARestarts0);
assertEquals("Natural static ordering", naturalStaticOrder0.toString());
assertEquals(3, fixedLengthLearning0.getMaxLength());
assertEquals(0, searchParams0.getInitConflictBound());
assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
assertEquals(1.0, searchParams0.getConflictBoundIncFactor(), 0.01);
assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
assertEquals("Exponential Moving Average (EMA, Biere) restarts strategy", eMARestarts0.toString());
assertEquals(0L, eMARestarts0.nextRestartNumberOfConflict());
assertEquals(ExitCode.UNKNOWN, mUSLauncher0.getExitCode());
assertFalse(mUSLauncher0.isSilent());
assertEquals(0L, mUSLauncher0.getBeginTime());
assertFalse(solver0.isDBSimplificationAllowed());
assertEquals(3, solver0.nVars());
assertEquals("c ", solver0.getLogPrefix());
assertEquals(0, solver0.getPropagationLevel());
assertEquals(4, solver0.newVar());
assertEquals(3, solver0.realNumberOfVariables());
assertFalse(solver0.isVerbose());
assertEquals(0, solver0.currentDecisionLevel());
assertEquals(0, solver0.nConstraints());
assertEquals(2147483, solver0.getTimeout());
assertFalse(solver0.isSolverKeptHot());
assertEquals(0, solver0.decisionLevel());
assertEquals("Exponential Moving Average (EMA, Biere) restarts strategy", eMARestarts1.toString());
assertEquals(0L, eMARestarts1.nextRestartNumberOfConflict());
assertNotNull(eMARestarts1);

Solver<ClausalDataStructureWL> solver1 = new Solver<ClausalDataStructureWL>(activeLearning0, clausalDataStructureWL0, naturalStaticOrder0, eMARestarts1);
assertEquals("Natural static ordering", naturalStaticOrder0.toString());
assertEquals(3, fixedLengthLearning0.getMaxLength());
assertEquals(0, searchParams0.getInitConflictBound());
assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
assertEquals(1.0, searchParams0.getConflictBoundIncFactor(), 0.01);
assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
assertEquals("Exponential Moving Average (EMA, Biere) restarts strategy", eMARestarts0.toString());
assertEquals(0L, eMARestarts0.nextRestartNumberOfConflict());
assertEquals(ExitCode.UNKNOWN, mUSLauncher0.getExitCode());
assertFalse(mUSLauncher0.isSilent());
assertEquals(0L, mUSLauncher0.getBeginTime());
assertEquals(5, solver0.nVars());
assertFalse(solver0.isDBSimplificationAllowed());
assertEquals("c ", solver0.getLogPrefix());
assertEquals(6, solver0.newVar());
assertEquals(5, solver0.realNumberOfVariables());
assertEquals(0, solver0.getPropagationLevel());
assertFalse(solver0.isVerbose());
assertEquals(0, solver0.currentDecisionLevel());
assertEquals(0, solver0.nConstraints());
assertEquals(2147483, solver0.getTimeout());
assertFalse(solver0.isSolverKeptHot());
assertEquals(0, solver0.decisionLevel());
assertEquals("Exponential Moving Average (EMA, Biere) restarts strategy", eMARestarts1.toString());
assertEquals(0L, eMARestarts1.nextRestartNumberOfConflict());
assertEquals(0, solver1.currentDecisionLevel());
assertEquals(0, solver1.decisionLevel());
assertEquals(0, solver1.getPropagationLevel());
assertEquals("c ", solver1.getLogPrefix());
assertEquals(1, solver1.nVars());
assertEquals(2, solver1.newVar());
assertEquals(0, solver1.nConstraints());
assertEquals(1, solver1.realNumberOfVariables());
assertFalse(solver1.isSolverKeptHot());
assertFalse(solver1.isVerbose());
assertEquals(2147483, solver1.getTimeout());
assertFalse(solver1.isDBSimplificationAllowed());
assertEquals(1.0, activeLearning0.getActivityPercent(), 0.01);
assertEquals(0, activeLearning0.getLimit());
assertNotNull(solver1);

solverArray0[0] = solver1;
Solver<ClausalDataStructureWL> solver2 = new Solver<ClausalDataStructureWL>(activeLearning0, clausalDataStructureWL0, naturalStaticOrder0, eMARestarts1);
assertEquals("Natural static ordering", naturalStaticOrder0.toString());
assertEquals(3, fixedLengthLearning0.getMaxLength());
assertEquals(0, searchParams0.getInitConflictBound());
assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
assertEquals(1.0, searchParams0.getConflictBoundIncFactor(), 0.01);
assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
assertEquals("Exponential Moving Average (EMA, Biere) restarts strategy", eMARestarts0.toString());
assertEquals(0L, eMARestarts0.nextRestartNumberOfConflict());
assertEquals(ExitCode.UNKNOWN, mUSLauncher0.getExitCode());
assertFalse(mUSLauncher0.isSilent());
assertEquals(0L, mUSLauncher0.getBeginTime());
assertFalse(solver0.isDBSimplificationAllowed());
assertEquals(8, solver0.newVar());
assertEquals(7, solver0.realNumberOfVariables());
assertEquals("c ", solver0.getLogPrefix());
assertEquals(7, solver0.nVars());
assertEquals(0, solver0.getPropagationLevel());
assertFalse(solver0.isVerbose());
assertEquals(0, solver0.currentDecisionLevel());
assertEquals(0, solver0.nConstraints());
assertEquals(2147483, solver0.getTimeout());
assertFalse(solver0.isSolverKeptHot());
assertEquals(0, solver0.decisionLevel());
assertEquals("Exponential Moving Average (EMA, Biere) restarts strategy", eMARestarts1.toString());
assertEquals(0L, eMARestarts1.nextRestartNumberOfConflict());
assertFalse(solver2.isVerbose());
assertEquals(0, solver2.decisionLevel());
assertEquals(4, solver2.newVar());
assertEquals(2147483, solver2.getTimeout());
assertEquals(3, solver2.realNumberOfVariables());
assertEquals(0, solver2.nConstraints());
assertFalse(solver2.isSolverKeptHot());
assertFalse(solver2.isDBSimplificationAllowed());
assertEquals(3, solver2.nVars());
assertEquals("c ", solver2.getLogPrefix());
assertEquals(0, solver2.currentDecisionLevel());
assertEquals(0, solver2.getPropagationLevel());
assertEquals(1.0, activeLearning0.getActivityPercent(), 0.01);
assertEquals(0, activeLearning0.getLimit());
assertNotNull(solver2);
assertFalse(solver2.equals((Object)solver1));

solverArray0[1] = solver2;
MixedDataStructureDanielWLConciseBinary mixedDataStructureDanielWLConciseBinary0 = new MixedDataStructureDanielWLConciseBinary();
assertNotNull(mixedDataStructureDanielWLConciseBinary0);

Solver<MixedDataStructureDanielWLConciseBinary> solver3 = new Solver<MixedDataStructureDanielWLConciseBinary>((LearningStrategy<MixedDataStructureDanielWLConciseBinary>) null, mixedDataStructureDanielWLConciseBinary0, naturalStaticOrder0, eMARestarts1);

[MASTER] 13:27:05.942 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class java.lang.AssertionError: expected:<1> but was:<0>
[MASTER] 13:27:05.945 [logback-1] WARN  JUnitAnalyzer - Failing test:
 ActiveLearning<MixedDataStructureDanielHT> activeLearning0 = new ActiveLearning<MixedDataStructureDanielHT>((-1269.7));
assertEquals(0, activeLearning0.getLimit());
assertEquals((-1269.7), activeLearning0.getActivityPercent(), 0.01);
assertNotNull(activeLearning0);

MixedDataStructureDanielHT mixedDataStructureDanielHT0 = new MixedDataStructureDanielHT();
assertNotNull(mixedDataStructureDanielHT0);

RandomLiteralSelectionStrategy randomLiteralSelectionStrategy0 = new RandomLiteralSelectionStrategy();
assertEquals("random phase selection", randomLiteralSelectionStrategy0.toString());
assertNotNull(randomLiteralSelectionStrategy0);

LevelBasedVarOrderHeap levelBasedVarOrderHeap0 = new LevelBasedVarOrderHeap(randomLiteralSelectionStrategy0);
assertEquals("random phase selection", randomLiteralSelectionStrategy0.toString());
assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
assertNotNull(levelBasedVarOrderHeap0);

RandomWalkDecorator randomWalkDecorator0 = new RandomWalkDecorator(levelBasedVarOrderHeap0, 0.95);
assertEquals("random phase selection", randomLiteralSelectionStrategy0.toString());
assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
assertEquals(0.95, randomWalkDecorator0.getProbability(), 0.01);
assertNotNull(randomWalkDecorator0);

VarOrderHeap varOrderHeap0 = new VarOrderHeap(randomLiteralSelectionStrategy0);
assertEquals("random phase selection", randomLiteralSelectionStrategy0.toString());
assertEquals(0, varOrderHeap0.numberOfInterestingVariables());
assertNotNull(varOrderHeap0);

double[] doubleArray0 = randomWalkDecorator0.getVariableHeuristics();
assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
assertEquals(1, doubleArray0.length);
assertEquals("random phase selection", randomLiteralSelectionStrategy0.toString());
assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
assertEquals(0.95, randomWalkDecorator0.getProbability(), 0.01);
assertNotNull(doubleArray0);

ArminRestarts arminRestarts0 = new ArminRestarts();
assertEquals(0L, arminRestarts0.nextRestartNumberOfConflict());
assertEquals("Armin Biere (Picosat) restarts strategy", arminRestarts0.toString());
assertTrue(arminRestarts0.shouldRestart());
assertNotNull(arminRestarts0);

boolean boolean0 = arminRestarts0.shouldRestart();
assertEquals(0L, arminRestarts0.nextRestartNumberOfConflict());
assertEquals("Armin Biere (Picosat) restarts strategy", arminRestarts0.toString());
assertTrue(arminRestarts0.shouldRestart());
assertTrue(boolean0);

arminRestarts0.onBackjumpToRootLevel();
assertEquals(0L, arminRestarts0.nextRestartNumberOfConflict());
assertEquals("Armin Biere (Picosat) restarts strategy", arminRestarts0.toString());
assertTrue(arminRestarts0.shouldRestart());

arminRestarts0.newLearnedClause((Constr) null, (-639));
assertEquals(0L, arminRestarts0.nextRestartNumberOfConflict());
assertEquals("Armin Biere (Picosat) restarts strategy", arminRestarts0.toString());
assertTrue(arminRestarts0.shouldRestart());

Solver<MixedDataStructureDanielHT> solver0 = new Solver<MixedDataStructureDanielHT>(activeLearning0, mixedDataStructureDanielHT0, levelBasedVarOrderHeap0, arminRestarts0);
assertEquals(0, activeLearning0.getLimit());
assertEquals((-1269.7), activeLearning0.getActivityPercent(), 0.01);
assertEquals("random phase selection", randomLiteralSelectionStrategy0.toString());
assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
assertEquals(0L, arminRestarts0.nextRestartNumberOfConflict());
assertEquals("Armin Biere (Picosat) restarts strategy", arminRestarts0.toString());
assertTrue(arminRestarts0.shouldRestart());
assertEquals(0, solver0.nConstraints());
assertEquals(2147483, solver0.getTimeout());
assertEquals(0, solver0.getPropagationLevel());
assertFalse(solver0.isVerbose());
assertEquals(1, solver0.nVars());
assertEquals(0, solver0.currentDecisionLevel());
assertEquals("c ", solver0.getLogPrefix());
assertFalse(solver0.isDBSimplificationAllowed());
assertEquals(2, solver0.newVar());
assertEquals(0, solver0.decisionLevel());
assertEquals(1, solver0.realNumberOfVariables());
assertFalse(solver0.isSolverKeptHot());
assertNotNull(solver0);

Solver<MixedDataStructureDanielHT> solver1 = new Solver<MixedDataStructureDanielHT>(activeLearning0, mixedDataStructureDanielHT0, randomWalkDecorator0, arminRestarts0);
assertEquals(0, activeLearning0.getLimit());
assertEquals((-1269.7), activeLearning0.getActivityPercent(), 0.01);
assertEquals("random phase selection", randomLiteralSelectionStrategy0.toString());
assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
assertEquals(0.95, randomWalkDecorator0.getProbability(), 0.01);
assertEquals(0L, arminRestarts0.nextRestartNumberOfConflict());
assertEquals("Armin Biere (Picosat) restarts strategy", arminRestarts0.toString());
assertTrue(arminRestarts0.shouldRestart());
assertFalse(solver1.isDBSimplificationAllowed());
assertEquals(0, solver1.currentDecisionLevel());
assertEquals(0, solver1.getPropagationLevel());
assertFalse(solver1.isVerbose());
assertEquals(4, solver1.newVar());
assertEquals(3, solver1.realNumberOfVariables());
assertEquals(0, solver1.decisionLevel());
assertEquals("c ", solver1.getLogPrefix());
assertEquals(2147483, solver1.getTimeout());
assertFalse(solver1.isSolverKeptHot());
assertEquals(3, solver1.nVars());
assertEquals(0, solver1.nConstraints());
assertNotNull(solver1);
assertFalse(solver1.equals((Object)solver0));

LearnedConstraintsEvaluationType learnedConstraintsEvaluationType0 = LearnedConstraintsEvaluationType.LBD2;
solver1.setLearnedConstraintsDeletionStrategy((ConflictTimer) arminRestarts0, learnedConstraintsEvaluationType0);
assertNotSame(solver1, solver0);
assertEquals(0, activeLearning0.getLimit());
assertEquals((-1269.7), activeLearning0.getActivityPercent(), 0.01);
assertEquals("random phase selection", randomLiteralSelectionStrategy0.toString());
assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
assertEquals(0.95, randomWalkDecorator0.getProbability(), 0.01);
assertEquals(0L, arminRestarts0.nextRestartNumberOfConflict());
assertEquals("Armin Biere (Picosat) restarts strategy", arminRestarts0.toString());
assertTrue(arminRestarts0.shouldRestart());
assertEquals(5, solver1.nVars());
assertFalse(solver1.isDBSimplificationAllowed());
assertEquals(5, solver1.realNumberOfVariables());
assertEquals(0, solver1.currentDecisionLevel());
assertEquals(0, solver1.getPropagationLevel());
assertFalse(solver1.isVerbose());
assertEquals(0, solver1.decisionLevel());
assertEquals("c ", solver1.getLogPrefix());
assertEquals(6, solver1.newVar());
assertEquals(2147483, solver1.getTimeout());
assertFalse(solver1.isSolverKeptHot());
assertEquals(0, solver1.nConstraints());
assertFalse(solver1.equals((Object)solver0));


[MASTER] 13:27:07.002 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class java.lang.AssertionError: expected:<2> but was:<1>
[MASTER] 13:27:07.017 [logback-1] WARN  JUnitAnalyzer - Failing test:
 MixedDataStructureDanielHT mixedDataStructureDanielHT0 = new MixedDataStructureDanielHT();
assertNotNull(mixedDataStructureDanielHT0);

FixedLengthLearning<CardinalityDataStructureYanMin> fixedLengthLearning0 = new FixedLengthLearning<CardinalityDataStructureYanMin>();
assertEquals(3, fixedLengthLearning0.getMaxLength());
assertNotNull(fixedLengthLearning0);

SearchParams searchParams0 = new SearchParams(1, (-5541));
assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
assertEquals((-5541), searchParams0.getInitConflictBound());
assertEquals(1.0, searchParams0.getConflictBoundIncFactor(), 0.01);
assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
assertNotNull(searchParams0);

SearchParams searchParams1 = new SearchParams();
assertEquals(0.999, searchParams1.getClaDecay(), 0.01);
assertEquals(1.5, searchParams1.getConflictBoundIncFactor(), 0.01);
assertEquals(0.95, searchParams1.getVarDecay(), 0.01);
assertEquals(100, searchParams1.getInitConflictBound());
assertNotNull(searchParams1);
assertFalse(searchParams1.equals((Object)searchParams0));

double double0 = searchParams1.getVarDecay();
assertNotSame(searchParams1, searchParams0);
assertEquals(0.999, searchParams1.getClaDecay(), 0.01);
assertEquals(1.5, searchParams1.getConflictBoundIncFactor(), 0.01);
assertEquals(0.95, searchParams1.getVarDecay(), 0.01);
assertEquals(100, searchParams1.getInitConflictBound());
assertEquals(0.95, double0, 0.01);
assertFalse(searchParams1.equals((Object)searchParams0));

double double1 = searchParams1.getClaDecay();
assertNotSame(searchParams1, searchParams0);
assertEquals(0.999, searchParams1.getClaDecay(), 0.01);
assertEquals(1.5, searchParams1.getConflictBoundIncFactor(), 0.01);
assertEquals(0.95, searchParams1.getVarDecay(), 0.01);
assertEquals(100, searchParams1.getInitConflictBound());
assertEquals(0.999, double1, 0.01);
assertFalse(searchParams1.equals((Object)searchParams0));
assertNotEquals(double1, double0, 0.01);

double double2 = searchParams1.getConflictBoundIncFactor();
assertNotSame(searchParams1, searchParams0);
assertEquals(0.999, searchParams1.getClaDecay(), 0.01);
assertEquals(1.5, searchParams1.getConflictBoundIncFactor(), 0.01);
assertEquals(0.95, searchParams1.getVarDecay(), 0.01);
assertEquals(100, searchParams1.getInitConflictBound());
assertEquals(1.5, double2, 0.01);
assertFalse(searchParams1.equals((Object)searchParams0));
assertNotEquals(double2, double0, 0.01);
assertNotEquals(double2, double1, 0.01);

NaturalStaticOrder naturalStaticOrder0 = new NaturalStaticOrder();
assertEquals("Natural static ordering", naturalStaticOrder0.toString());
assertNotNull(naturalStaticOrder0);

naturalStaticOrder0.updateVar(1);
assertEquals("Natural static ordering", naturalStaticOrder0.toString());

MixedDataStructureDanielWLConciseBinary mixedDataStructureDanielWLConciseBinary0 = new MixedDataStructureDanielWLConciseBinary();
assertNotNull(mixedDataStructureDanielWLConciseBinary0);

MiniSATRestarts miniSATRestarts0 = new MiniSATRestarts();
assertEquals(0L, miniSATRestarts0.nextRestartNumberOfConflict());
assertEquals("MiniSAT restarts strategy", miniSATRestarts0.toString());
assertTrue(miniSATRestarts0.shouldRestart());
assertNotNull(miniSATRestarts0);

boolean boolean0 = miniSATRestarts0.shouldRestart();
assertEquals(0L, miniSATRestarts0.nextRestartNumberOfConflict());
assertEquals("MiniSAT restarts strategy", miniSATRestarts0.toString());
assertTrue(miniSATRestarts0.shouldRestart());
assertTrue(boolean0);

NoRestarts noRestarts0 = new NoRestarts();
assertEquals(9223372036854775807L, noRestarts0.nextRestartNumberOfConflict());
assertEquals("NoRestarts", noRestarts0.toString());
assertFalse(noRestarts0.shouldRestart());
assertNotNull(noRestarts0);

boolean boolean1 = noRestarts0.shouldRestart();
assertEquals(9223372036854775807L, noRestarts0.nextRestartNumberOfConflict());
assertEquals("NoRestarts", noRestarts0.toString());
assertFalse(noRestarts0.shouldRestart());
assertFalse(boolean1);
assertFalse(boolean1 == boolean0);

noRestarts0.onBackjumpToRootLevel();
assertEquals(9223372036854775807L, noRestarts0.nextRestartNumberOfConflict());
assertEquals("NoRestarts", noRestarts0.toString());
assertFalse(noRestarts0.shouldRestart());

Pair pair0 = new Pair();
assertEquals(0, pair0.getBacktrackLevel());
assertNotNull(pair0);

Constr constr0 = pair0.getReason();
assertEquals(0, pair0.getBacktrackLevel());
assertNull(constr0);

noRestarts0.newLearnedClause((Constr) null, (-1008));
assertEquals(9223372036854775807L, noRestarts0.nextRestartNumberOfConflict());
assertEquals("NoRestarts", noRestarts0.toString());
assertFalse(noRestarts0.shouldRestart());

noRestarts0.onBackjumpToRootLevel();
assertEquals(9223372036854775807L, noRestarts0.nextRestartNumberOfConflict());
assertEquals("NoRestarts", noRestarts0.toString());
assertFalse(noRestarts0.shouldRestart());

ClausalDataStructureWL clausalDataStructureWL0 = new ClausalDataStructureWL();
assertNotNull(clausalDataStructureWL0);

MiniSATLearning<MixedDataStructureDanielHT> miniSATLearning0 = new MiniSATLearning<MixedDataStructureDanielHT>();
assertEquals("Learn all clauses as in MiniSAT", miniSATLearning0.toString());
assertNotNull(miniSATLearning0);

MixedDataStructureDanielHT mixedDataStructureDanielHT1 = new MixedDataStructureDanielHT();
assertNotNull(mixedDataStructureDanielHT1);
assertFalse(mixedDataStructureDanielHT1.equals((Object)mixedDataStructureDanielHT0));

PercentLengthLearning<MixedDataStructureDanielHT> percentLengthLearning0 = new PercentLengthLearning<MixedDataStructureDanielHT>((-639));
assertEquals((-639), percentLengthLearning0.getLimit());
assertNotNull(percentLengthLearning0);

Solver<MixedDataStructureDanielHT> solver0 = new Solver<MixedDataStructureDanielHT>(percentLengthLearning0, mixedDataStructureDanielHT0, naturalStaticOrder0, noRestarts0);
assertEquals((-639), percentLengthLearning0.getLimit());
assertEquals("c ", solver0.getLogPrefix());
assertEquals(0, solver0.currentDecisionLevel());
assertFalse(solver0.isVerbose());
assertFalse(solver0.isDBSimplificationAllowed());
assertEquals(0, solver0.getPropagationLevel());
assertEquals(2147483, solver0.getTimeout());
assertEquals(2, solver0.newVar());
assertEquals(0, solver0.decisionLevel());
assertEquals(1, solver0.realNumberOfVariables());
assertEquals(0, solver0.nConstraints());
assertFalse(solver0.isSolverKeptHot());
assertEquals(1, solver0.nVars());
assertEquals("Natural static ordering", naturalStaticOrder0.toString());
assertEquals(9223372036854775807L, noRestarts0.nextRestartNumberOfConflict());
assertEquals("NoRestarts", noRestarts0.toString());
assertFalse(noRestarts0.shouldRestart());
assertNotNull(solver0);
assertFalse(mixedDataStructureDanielHT0.equals((Object)mixedDataStructureDanielHT1));

solver0.setDBSimplificationAllowed(true);
assertNotSame(mixedDataStructureDanielHT0, mixedDataStructureDanielHT1);
assertEquals((-639), percentLengthLearning0.getLimit());
assertEquals("c ", solver0.getLogPrefix());
assertEquals(0, solver0.currentDecisionLevel());
assertTrue(solver0.isDBSimplificationAllowed());
assertEquals(4, solver0.newVar());
assertEquals(3, solver0.realNumberOfVariables());
assertFalse(solver0.isVerbose());
assertEquals(0, solver0.getPropagationLevel());
assertEquals(2147483, solver0.getTimeout());
assertEquals(0, solver0.decisionLevel());
assertEquals(3, solver0.nVars());
assertEquals(0, solver0.nConstraints());
assertFalse(solver0.isSolverKeptHot());
assertEquals("Natural static ordering", naturalStaticOrder0.toString());
assertEquals(9223372036854775807L, noRestarts0.nextRestartNumberOfConflict());
assertEquals("NoRestarts", noRestarts0.toString());
assertFalse(noRestarts0.shouldRestart());
assertFalse(mixedDataStructureDanielHT0.equals((Object)mixedDataStructureDanielHT1));

NoLearningNoHeuristics<CardinalityDataStructureYanMax> noLearningNoHeuristics0 = new NoLearningNoHeuristics<CardinalityDataStructureYanMax>();
assertNotNull(noLearningNoHeuristics0);

CardinalityDataStructureYanMax cardinalityDataStructureYanMax0 = new CardinalityDataStructureYanMax();
assertNotNull(cardinalityDataStructureYanMax0);

Solver<CardinalityDataStructureYanMax> solver1 = new Solver<CardinalityDataStructureYanMax>(noLearningNoHeuristics0, cardinalityDataStructureYanMax0, naturalStaticOrder0, noRestarts0);
assertEquals("Natural static ordering", naturalStaticOrder0.toString());
assertFalse(solver1.isDBSimplificationAllowed());
assertFalse(solver1.isSolverKeptHot());
assertEquals(1, solver1.nVars());
assertEquals(2147483, solver1.getTimeout());
assertEquals(0, solver1.decisionLevel());
assertEquals(1, solver1.realNumberOfVariables());
assertEquals(0, solver1.currentDecisionLevel());
assertEquals(0, solver1.getPropagationLevel());
assertFalse(solver1.isVerbose());
assertEquals(2, solver1.newVar());
assertEquals(0, solver1.nConstraints());
assertEquals("c ", solver1.getLogPrefix());
assertEquals(9223372036854775807L, noRestarts0.nextRestartNumberOfConflict());
assertEquals("NoRestarts", noRestarts0.toString());
assertFalse(noRestarts0.shouldRestart());
assertNotNull(solver1);

IVecInt iVecInt0 = solver1.unsatExplanation();
assertEquals("Natural static ordering", naturalStaticOrder0.toString());
assertFalse(solver1.isDBSimplificationAllowed());
assertEquals(3, solver1.nVars());
assertFalse(solver1.isSolverKeptHot());
assertEquals(2147483, solver1.getTimeout());
assertEquals(0, solver1.decisionLevel());
assertEquals(4, solver1.newVar());
assertEquals(0, solver1.currentDecisionLevel());
assertEquals(0, solver1.getPropagationLevel());
assertFalse(solver1.isVerbose());
assertEquals(0, solver1.nConstraints());
assertEquals(3, solver1.realNumberOfVariables());
assertEquals("c ", solver1.getLogPrefix());
assertEquals(9223372036854775807L, noRestarts0.nextRestartNumberOfConflict());
assertEquals("NoRestarts", noRestarts0.toString());
assertFalse(noRestarts0.shouldRestart());
assertNull(iVecInt0);

ActiveLearning<MixedDataStructureDanielWL> activeLearning0 = new ActiveLearning<MixedDataStructureDanielWL>();
assertEquals(0.95, activeLearning0.getActivityPercent(), 0.01);
assertEquals(0, activeLearning0.getLimit());
assertNotNull(activeLearning0);

MixedDataStructureDanielWL mixedDataStructureDanielWL0 = new MixedDataStructureDanielWL();
assertNotNull(mixedDataStructureDanielWL0);

Solver<MixedDataStructureDanielWL> solver2 = new Solver<MixedDataStructureDanielWL>(activeLearning0, mixedDataStructureDanielWL0, searchParams0, naturalStaticOrder0, noRestarts0);
assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
assertEquals((-5541), searchParams0.getInitConflictBound());
assertEquals(1.0, searchParams0.getConflictBoundIncFactor(), 0.01);
assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
assertEquals("Natural static ordering", naturalStaticOrder0.toString());
assertEquals(9223372036854775807L, noRestarts0.nextRestartNumberOfConflict());
assertEquals("NoRestarts", noRestarts0.toString());
assertFalse(noRestarts0.shouldRestart());
assertEquals(0.95, activeLearning0.getActivityPercent(), 0.01);
assertEquals(0, activeLearning0.getLimit());
assertEquals(0, solver2.currentDecisionLevel());
assertEquals("c ", solver2.getLogPrefix());
assertEquals(0, solver2.getPropagationLevel());
assertEquals(1, solver2.realNumberOfVariables());
assertFalse(solver2.isVerbose());
assertEquals(0, solver2.nConstraints());
assertFalse(solver2.isDBSimplificationAllowed());
assertEquals(2, solver2.newVar());
assertFalse(solver2.isSolverKeptHot());
assertEquals(0, solver2.decisionLevel());
assertEquals(1, solver2.nVars());
assertEquals(2147483, solver2.getTimeout());
assertNotNull(solver2);
assertFalse(searchParams0.equals((Object)searchParams1));

SolverStats solverStats0 = solver2.getStats();
assertNotSame(searchParams0, searchParams1);
assertEquals(0, solverStats0.getStarts());
assertEquals(0L, solverStats0.getRootSimplifications());
assertEquals(0, solverStats0.getShortcuts());
assertEquals(0L, solverStats0.getIgnoredclauses());
assertEquals(0L, solverStats0.getDecisions());
assertEquals(0L, solverStats0.getLearnedbinaryclauses());
assertEquals(0L, solverStats0.getLearnedclauses());
assertEquals(0, solverStats0.getImportedUnits());
assertEquals(0, solverStats0.getReduceddb());
assertEquals(0L, solverStats0.getUpdateLBD());
assertEquals(0L, solverStats0.getReducedliterals());
assertEquals(0L, solverStats0.getConflicts());
assertEquals(0L, solverStats0.getInspects());
assertEquals(0L, solverStats0.getLearnedternaryclauses());
assertEquals(0L, solverStats0.getLearnedliterals());
assertEquals(0L, solverStats0.getChangedreason());
assertEquals(0L, solverStats0.getPropagations());
assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
assertEquals((-5541), searchParams0.getInitConflictBound());
assertEquals(1.0, searchParams0.getConflictBoundIncFactor(), 0.01);
assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
assertEquals("Natural static ordering", naturalStaticOrder0.toString());
assertEquals(9223372036854775807L, noRestarts0.nextRestartNumberOfConflict());
assertEquals("NoRestarts", noRestarts0.toString());
assertFalse(noRestarts0.shouldRestart());
assertEquals(0.95, activeLearning0.getActivityPercent(), 0.01);
assertEquals(0, activeLearning0.getLimit());
assertEquals(0, solver2.currentDecisionLevel());
assertEquals("c ", solver2.getLogPrefix());
assertEquals(3, solver2.realNumberOfVariables());
assertEquals(0, solver2.getPropagationLevel());
assertEquals(4, solver2.newVar());
assertFalse(solver2.isVerbose());
assertEquals(0, solver2.nConstraints());
assertFalse(solver2.isDBSimplificationAllowed());
assertEquals(3, solver2.nVars());
assertFalse(solver2.isSolverKeptHot());
assertEquals(0, solver2.decisionLevel());
assertEquals(2147483, solver2.getTimeout());
assertNotNull(solverStats0);
assertFalse(searchParams0.equals((Object)searchParams1));


* Permissions denied during test execution: 
  - java.lang.RuntimePermission: 
         writeFileDescriptor: 1
* Writing tests to file
* Writing JUnit test case 'Solver_ESTest' to evosuite-tests
* Done!

* Computation finished
