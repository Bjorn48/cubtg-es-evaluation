/*
 * This file was automatically generated by EvoSuite
 * Tue Feb 19 17:30:00 GMT 2019
 */

package org.sat4j.opt;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;
import org.sat4j.core.VecInt;
import org.sat4j.minisat.constraints.CardinalityDataStructure;
import org.sat4j.minisat.core.Solver;
import org.sat4j.minisat.learning.FixedLengthLearning;
import org.sat4j.minisat.orders.LevelBasedVarOrderHeap;
import org.sat4j.minisat.orders.RSATPhaseSelectionStrategy;
import org.sat4j.minisat.restarts.MiniSATRestarts;
import org.sat4j.opt.MaxSatDecorator;
import org.sat4j.specs.IConstr;
import org.sat4j.specs.ISolver;
import org.sat4j.specs.IVecInt;
import org.sat4j.tools.ClausalCardinalitiesDecorator;
import org.sat4j.tools.DimacsOutputSolver;
import org.sat4j.tools.FullClauseSelectorSolver;
import org.sat4j.tools.LexicoDecorator;
import org.sat4j.tools.Minimal4InclusionModel;
import org.sat4j.tools.OptToSatAdapter;
import org.sat4j.tools.StatisticsSolver;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class AbstractSelectorVariablesDecorator_ESTest extends AbstractSelectorVariablesDecorator_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Minimal4InclusionModel minimal4InclusionModel0 = mock(Minimal4InclusionModel.class, new ViolatedAssumptionAnswer());
      FullClauseSelectorSolver<Minimal4InclusionModel> fullClauseSelectorSolver0 = new FullClauseSelectorSolver<Minimal4InclusionModel>(minimal4InclusionModel0, false);
      IVecInt iVecInt0 = fullClauseSelectorSolver0.getLastClause();
      int[] intArray0 = new int[2];
      DimacsOutputSolver dimacsOutputSolver0 = mock(DimacsOutputSolver.class, new ViolatedAssumptionAnswer());
      doReturn(iVecInt0).when(dimacsOutputSolver0).createBlockingClauseForCurrentModel();
      doReturn(true).when(dimacsOutputSolver0).isSatisfiable(any(org.sat4j.specs.IVecInt.class) , anyBoolean());
      doReturn(intArray0).when(dimacsOutputSolver0).model();
      doReturn(intArray0).when(dimacsOutputSolver0).modelWithInternalVariables();
      doReturn(0, 870, (-1), 0, 0).when(dimacsOutputSolver0).nVars();
      ClausalCardinalitiesDecorator<DimacsOutputSolver> clausalCardinalitiesDecorator0 = new ClausalCardinalitiesDecorator<DimacsOutputSolver>(dimacsOutputSolver0);
      clausalCardinalitiesDecorator0.nVars();
      MaxSatDecorator maxSatDecorator0 = new MaxSatDecorator(clausalCardinalitiesDecorator0, false);
      boolean boolean0 = maxSatDecorator0.admitABetterSolution();
      assertFalse(maxSatDecorator0.isSolutionOptimal());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      MaxSatDecorator maxSatDecorator0 = new MaxSatDecorator((ISolver) null, true);
      int[] intArray0 = new int[0];
      maxSatDecorator0.setPrevmodel(intArray0);
      int[] intArray1 = maxSatDecorator0.model();
      assertArrayEquals(new int[] {}, intArray1);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      FixedLengthLearning<CardinalityDataStructure> fixedLengthLearning0 = new FixedLengthLearning<CardinalityDataStructure>();
      CardinalityDataStructure cardinalityDataStructure0 = new CardinalityDataStructure();
      RSATPhaseSelectionStrategy rSATPhaseSelectionStrategy0 = new RSATPhaseSelectionStrategy();
      LevelBasedVarOrderHeap levelBasedVarOrderHeap0 = new LevelBasedVarOrderHeap(rSATPhaseSelectionStrategy0);
      MiniSATRestarts miniSATRestarts0 = new MiniSATRestarts();
      Solver<CardinalityDataStructure> solver0 = new Solver<CardinalityDataStructure>(fixedLengthLearning0, cardinalityDataStructure0, levelBasedVarOrderHeap0, miniSATRestarts0);
      ISolver iSolver0 = solver0.getSolvingEngine();
      MaxSatDecorator maxSatDecorator0 = new MaxSatDecorator(iSolver0);
      maxSatDecorator0.setSolutionOptimal(true);
      boolean boolean0 = maxSatDecorator0.isSolutionOptimal();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      FixedLengthLearning<CardinalityDataStructure> fixedLengthLearning0 = new FixedLengthLearning<CardinalityDataStructure>();
      CardinalityDataStructure cardinalityDataStructure0 = new CardinalityDataStructure();
      RSATPhaseSelectionStrategy rSATPhaseSelectionStrategy0 = new RSATPhaseSelectionStrategy();
      LevelBasedVarOrderHeap levelBasedVarOrderHeap0 = new LevelBasedVarOrderHeap(rSATPhaseSelectionStrategy0);
      MiniSATRestarts miniSATRestarts0 = new MiniSATRestarts();
      Solver<CardinalityDataStructure> solver0 = new Solver<CardinalityDataStructure>(fixedLengthLearning0, cardinalityDataStructure0, levelBasedVarOrderHeap0, miniSATRestarts0);
      ISolver iSolver0 = solver0.getSolvingEngine();
      MaxSatDecorator maxSatDecorator0 = new MaxSatDecorator(iSolver0, false);
      boolean boolean0 = maxSatDecorator0.admitABetterSolution();
      assertTrue(boolean0);
      
      maxSatDecorator0.getPrevmodel();
      assertFalse(maxSatDecorator0.isSolutionOptimal());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      MaxSatDecorator maxSatDecorator0 = new MaxSatDecorator((ISolver) null);
      int[] intArray0 = maxSatDecorator0.getPrevfullmodel();
      assertNull(intArray0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      FixedLengthLearning<CardinalityDataStructure> fixedLengthLearning0 = new FixedLengthLearning<CardinalityDataStructure>();
      CardinalityDataStructure cardinalityDataStructure0 = new CardinalityDataStructure();
      RSATPhaseSelectionStrategy rSATPhaseSelectionStrategy0 = new RSATPhaseSelectionStrategy();
      LevelBasedVarOrderHeap levelBasedVarOrderHeap0 = new LevelBasedVarOrderHeap(rSATPhaseSelectionStrategy0);
      MiniSATRestarts miniSATRestarts0 = new MiniSATRestarts();
      Solver<CardinalityDataStructure> solver0 = new Solver<CardinalityDataStructure>(fixedLengthLearning0, cardinalityDataStructure0, levelBasedVarOrderHeap0, miniSATRestarts0);
      ISolver iSolver0 = solver0.getSolvingEngine();
      MaxSatDecorator maxSatDecorator0 = new MaxSatDecorator(iSolver0, false);
      int[] intArray0 = new int[9];
      maxSatDecorator0.setPrevfullmodel(intArray0);
      int[] intArray1 = maxSatDecorator0.getPrevfullmodel();
      assertArrayEquals(new int[] {0, 0, 0, 0, 0, 0, 0, 0, 0}, intArray1);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      FixedLengthLearning<CardinalityDataStructure> fixedLengthLearning0 = new FixedLengthLearning<CardinalityDataStructure>();
      CardinalityDataStructure cardinalityDataStructure0 = new CardinalityDataStructure();
      RSATPhaseSelectionStrategy rSATPhaseSelectionStrategy0 = new RSATPhaseSelectionStrategy();
      LevelBasedVarOrderHeap levelBasedVarOrderHeap0 = new LevelBasedVarOrderHeap(rSATPhaseSelectionStrategy0);
      MiniSATRestarts miniSATRestarts0 = new MiniSATRestarts();
      Solver<CardinalityDataStructure> solver0 = new Solver<CardinalityDataStructure>(fixedLengthLearning0, cardinalityDataStructure0, levelBasedVarOrderHeap0, miniSATRestarts0);
      ISolver iSolver0 = solver0.getSolvingEngine();
      MaxSatDecorator maxSatDecorator0 = new MaxSatDecorator(iSolver0, false);
      boolean boolean0 = maxSatDecorator0.admitABetterSolution();
      assertTrue(boolean0);
      
      maxSatDecorator0.getPrevfullmodel();
      assertFalse(maxSatDecorator0.isOptimal());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      FixedLengthLearning<CardinalityDataStructure> fixedLengthLearning0 = new FixedLengthLearning<CardinalityDataStructure>();
      CardinalityDataStructure cardinalityDataStructure0 = new CardinalityDataStructure();
      RSATPhaseSelectionStrategy rSATPhaseSelectionStrategy0 = new RSATPhaseSelectionStrategy();
      LevelBasedVarOrderHeap levelBasedVarOrderHeap0 = new LevelBasedVarOrderHeap(rSATPhaseSelectionStrategy0);
      MiniSATRestarts miniSATRestarts0 = new MiniSATRestarts();
      Solver<CardinalityDataStructure> solver0 = new Solver<CardinalityDataStructure>(fixedLengthLearning0, cardinalityDataStructure0, levelBasedVarOrderHeap0, miniSATRestarts0);
      ISolver iSolver0 = solver0.getSolvingEngine();
      MaxSatDecorator maxSatDecorator0 = new MaxSatDecorator(iSolver0, false);
      boolean boolean0 = maxSatDecorator0.admitABetterSolution();
      assertTrue(boolean0);
      
      maxSatDecorator0.getPrevboolmodel();
      assertFalse(maxSatDecorator0.isOptimal());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      DimacsOutputSolver dimacsOutputSolver0 = mock(DimacsOutputSolver.class, new ViolatedAssumptionAnswer());
      ClausalCardinalitiesDecorator<DimacsOutputSolver> clausalCardinalitiesDecorator0 = new ClausalCardinalitiesDecorator<DimacsOutputSolver>(dimacsOutputSolver0);
      MaxSatDecorator maxSatDecorator0 = new MaxSatDecorator(clausalCardinalitiesDecorator0);
      maxSatDecorator0.setNbexpectedclauses(615);
      int int0 = maxSatDecorator0.getNbexpectedclauses();
      assertEquals(615, int0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      FixedLengthLearning<CardinalityDataStructure> fixedLengthLearning0 = new FixedLengthLearning<CardinalityDataStructure>();
      CardinalityDataStructure cardinalityDataStructure0 = new CardinalityDataStructure();
      RSATPhaseSelectionStrategy rSATPhaseSelectionStrategy0 = new RSATPhaseSelectionStrategy();
      LevelBasedVarOrderHeap levelBasedVarOrderHeap0 = new LevelBasedVarOrderHeap(rSATPhaseSelectionStrategy0);
      MiniSATRestarts miniSATRestarts0 = new MiniSATRestarts();
      Solver<CardinalityDataStructure> solver0 = new Solver<CardinalityDataStructure>(fixedLengthLearning0, cardinalityDataStructure0, levelBasedVarOrderHeap0, miniSATRestarts0);
      ISolver iSolver0 = solver0.getSolvingEngine();
      MaxSatDecorator maxSatDecorator0 = new MaxSatDecorator(iSolver0, false);
      maxSatDecorator0.setExpectedNumberOfClauses((-3887));
      int int0 = maxSatDecorator0.getNbexpectedclauses();
      assertEquals((-3887), int0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      FixedLengthLearning<CardinalityDataStructure> fixedLengthLearning0 = new FixedLengthLearning<CardinalityDataStructure>();
      CardinalityDataStructure cardinalityDataStructure0 = new CardinalityDataStructure();
      RSATPhaseSelectionStrategy rSATPhaseSelectionStrategy0 = new RSATPhaseSelectionStrategy();
      LevelBasedVarOrderHeap levelBasedVarOrderHeap0 = new LevelBasedVarOrderHeap(rSATPhaseSelectionStrategy0);
      MiniSATRestarts miniSATRestarts0 = new MiniSATRestarts();
      Solver<CardinalityDataStructure> solver0 = new Solver<CardinalityDataStructure>(fixedLengthLearning0, cardinalityDataStructure0, levelBasedVarOrderHeap0, miniSATRestarts0);
      ISolver iSolver0 = solver0.getSolvingEngine();
      MaxSatDecorator maxSatDecorator0 = new MaxSatDecorator(iSolver0, false);
      maxSatDecorator0.setExpectedNumberOfClauses((-3887));
      int int0 = maxSatDecorator0.getExpectedNumberOfClauses();
      assertEquals((-3887), int0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      DimacsOutputSolver dimacsOutputSolver0 = mock(DimacsOutputSolver.class, new ViolatedAssumptionAnswer());
      doReturn((IConstr) null).when(dimacsOutputSolver0).addBlockingClause(any(org.sat4j.specs.IVecInt.class));
      ClausalCardinalitiesDecorator<DimacsOutputSolver> clausalCardinalitiesDecorator0 = new ClausalCardinalitiesDecorator<DimacsOutputSolver>(dimacsOutputSolver0);
      MaxSatDecorator maxSatDecorator0 = new MaxSatDecorator(clausalCardinalitiesDecorator0, false);
      IConstr iConstr0 = maxSatDecorator0.discardCurrentModel();
      assertNull(iConstr0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      DimacsOutputSolver dimacsOutputSolver0 = mock(DimacsOutputSolver.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(dimacsOutputSolver0).isSatisfiable(any(org.sat4j.specs.IVecInt.class) , anyBoolean());
      ClausalCardinalitiesDecorator<DimacsOutputSolver> clausalCardinalitiesDecorator0 = new ClausalCardinalitiesDecorator<DimacsOutputSolver>(dimacsOutputSolver0);
      MaxSatDecorator maxSatDecorator0 = new MaxSatDecorator(clausalCardinalitiesDecorator0, false);
      boolean boolean0 = maxSatDecorator0.admitABetterSolution();
      assertTrue(maxSatDecorator0.isSolutionOptimal());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      FixedLengthLearning<CardinalityDataStructure> fixedLengthLearning0 = new FixedLengthLearning<CardinalityDataStructure>();
      CardinalityDataStructure cardinalityDataStructure0 = new CardinalityDataStructure();
      RSATPhaseSelectionStrategy rSATPhaseSelectionStrategy0 = new RSATPhaseSelectionStrategy();
      LevelBasedVarOrderHeap levelBasedVarOrderHeap0 = new LevelBasedVarOrderHeap(rSATPhaseSelectionStrategy0);
      MiniSATRestarts miniSATRestarts0 = new MiniSATRestarts();
      Solver<CardinalityDataStructure> solver0 = new Solver<CardinalityDataStructure>(fixedLengthLearning0, cardinalityDataStructure0, levelBasedVarOrderHeap0, miniSATRestarts0);
      ISolver iSolver0 = solver0.getSolvingEngine();
      MaxSatDecorator maxSatDecorator0 = new MaxSatDecorator(iSolver0, false);
      // Undeclared exception!
      try { 
        maxSatDecorator0.setPrevfullmodel((int[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.opt.AbstractSelectorVariablesDecorator", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      MaxSatDecorator maxSatDecorator0 = new MaxSatDecorator((ISolver) null, false);
      // Undeclared exception!
      try { 
        maxSatDecorator0.setPrevboolmodel((boolean[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.opt.AbstractSelectorVariablesDecorator", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      FixedLengthLearning<CardinalityDataStructure> fixedLengthLearning0 = new FixedLengthLearning<CardinalityDataStructure>();
      CardinalityDataStructure cardinalityDataStructure0 = new CardinalityDataStructure();
      RSATPhaseSelectionStrategy rSATPhaseSelectionStrategy0 = new RSATPhaseSelectionStrategy();
      LevelBasedVarOrderHeap levelBasedVarOrderHeap0 = new LevelBasedVarOrderHeap(rSATPhaseSelectionStrategy0);
      MiniSATRestarts miniSATRestarts0 = new MiniSATRestarts();
      Solver<CardinalityDataStructure> solver0 = new Solver<CardinalityDataStructure>(fixedLengthLearning0, cardinalityDataStructure0, levelBasedVarOrderHeap0, miniSATRestarts0);
      ISolver iSolver0 = solver0.getSolvingEngine();
      MaxSatDecorator maxSatDecorator0 = new MaxSatDecorator(iSolver0, false);
      maxSatDecorator0.admitABetterSolution();
      try { 
        maxSatDecorator0.discardCurrentModel();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.minisat.constraints.card.AtLeast", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      StatisticsSolver statisticsSolver0 = new StatisticsSolver();
      Minimal4InclusionModel minimal4InclusionModel0 = new Minimal4InclusionModel(statisticsSolver0);
      LexicoDecorator<Minimal4InclusionModel> lexicoDecorator0 = new LexicoDecorator<Minimal4InclusionModel>(minimal4InclusionModel0);
      OptToSatAdapter optToSatAdapter0 = new OptToSatAdapter(lexicoDecorator0);
      MaxSatDecorator maxSatDecorator0 = new MaxSatDecorator(optToSatAdapter0, false);
      // Undeclared exception!
      try { 
        maxSatDecorator0.discardCurrentModel();
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Not implemented yet!
         //
         verifyException("org.sat4j.tools.StatisticsSolver", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      FixedLengthLearning<CardinalityDataStructure> fixedLengthLearning0 = new FixedLengthLearning<CardinalityDataStructure>();
      CardinalityDataStructure cardinalityDataStructure0 = new CardinalityDataStructure();
      RSATPhaseSelectionStrategy rSATPhaseSelectionStrategy0 = new RSATPhaseSelectionStrategy();
      LevelBasedVarOrderHeap levelBasedVarOrderHeap0 = new LevelBasedVarOrderHeap(rSATPhaseSelectionStrategy0);
      MiniSATRestarts miniSATRestarts0 = new MiniSATRestarts();
      Solver<CardinalityDataStructure> solver0 = new Solver<CardinalityDataStructure>(fixedLengthLearning0, cardinalityDataStructure0, levelBasedVarOrderHeap0, miniSATRestarts0);
      MaxSatDecorator maxSatDecorator0 = new MaxSatDecorator(solver0, false);
      // Undeclared exception!
      try { 
        maxSatDecorator0.admitABetterSolution((IVecInt) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.minisat.core.Solver", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      StatisticsSolver statisticsSolver0 = new StatisticsSolver();
      MaxSatDecorator maxSatDecorator0 = new MaxSatDecorator(statisticsSolver0, false);
      try { 
        maxSatDecorator0.admitABetterSolution();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // That solver only compute statistics
         //
         verifyException("org.sat4j.tools.StatisticsSolver", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      MaxSatDecorator maxSatDecorator0 = new MaxSatDecorator((ISolver) null, false);
      // Undeclared exception!
      try { 
        maxSatDecorator0.admitABetterSolution();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.tools.SolverDecorator", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      DimacsOutputSolver dimacsOutputSolver0 = mock(DimacsOutputSolver.class, new ViolatedAssumptionAnswer());
      doReturn(true).when(dimacsOutputSolver0).isSatisfiable(any(org.sat4j.specs.IVecInt.class) , anyBoolean());
      doReturn(0, (-1)).when(dimacsOutputSolver0).nVars();
      ClausalCardinalitiesDecorator<DimacsOutputSolver> clausalCardinalitiesDecorator0 = new ClausalCardinalitiesDecorator<DimacsOutputSolver>(dimacsOutputSolver0);
      clausalCardinalitiesDecorator0.nVars();
      MaxSatDecorator maxSatDecorator0 = new MaxSatDecorator(clausalCardinalitiesDecorator0, false);
      // Undeclared exception!
      try { 
        maxSatDecorator0.admitABetterSolution();
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.opt.AbstractSelectorVariablesDecorator", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      FixedLengthLearning<CardinalityDataStructure> fixedLengthLearning0 = new FixedLengthLearning<CardinalityDataStructure>();
      CardinalityDataStructure cardinalityDataStructure0 = new CardinalityDataStructure();
      RSATPhaseSelectionStrategy rSATPhaseSelectionStrategy0 = new RSATPhaseSelectionStrategy();
      LevelBasedVarOrderHeap levelBasedVarOrderHeap0 = new LevelBasedVarOrderHeap(rSATPhaseSelectionStrategy0);
      MiniSATRestarts miniSATRestarts0 = new MiniSATRestarts();
      Solver<CardinalityDataStructure> solver0 = new Solver<CardinalityDataStructure>(fixedLengthLearning0, cardinalityDataStructure0, levelBasedVarOrderHeap0, miniSATRestarts0);
      ISolver iSolver0 = solver0.getSolvingEngine();
      MaxSatDecorator maxSatDecorator0 = new MaxSatDecorator(iSolver0, false);
      int[] intArray0 = new int[5];
      intArray0[0] = (-3887);
      levelBasedVarOrderHeap0.addLevel(intArray0);
      // Undeclared exception!
      try { 
        maxSatDecorator0.admitABetterSolution();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -3887
         //
         verifyException("org.sat4j.minisat.orders.LevelBasedVarOrderHeap", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      FixedLengthLearning<CardinalityDataStructure> fixedLengthLearning0 = new FixedLengthLearning<CardinalityDataStructure>();
      CardinalityDataStructure cardinalityDataStructure0 = new CardinalityDataStructure();
      LevelBasedVarOrderHeap levelBasedVarOrderHeap0 = new LevelBasedVarOrderHeap();
      MiniSATRestarts miniSATRestarts0 = new MiniSATRestarts();
      Solver<CardinalityDataStructure> solver0 = new Solver<CardinalityDataStructure>(fixedLengthLearning0, cardinalityDataStructure0, levelBasedVarOrderHeap0, miniSATRestarts0);
      MaxSatDecorator maxSatDecorator0 = new MaxSatDecorator(solver0);
      VecInt vecInt0 = new VecInt();
      maxSatDecorator0.addClause(vecInt0);
      boolean boolean0 = maxSatDecorator0.admitABetterSolution((IVecInt) vecInt0);
      assertTrue(boolean0);
      assertFalse(maxSatDecorator0.isOptimal());
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      FixedLengthLearning<CardinalityDataStructure> fixedLengthLearning0 = new FixedLengthLearning<CardinalityDataStructure>();
      CardinalityDataStructure cardinalityDataStructure0 = new CardinalityDataStructure();
      RSATPhaseSelectionStrategy rSATPhaseSelectionStrategy0 = new RSATPhaseSelectionStrategy();
      LevelBasedVarOrderHeap levelBasedVarOrderHeap0 = new LevelBasedVarOrderHeap(rSATPhaseSelectionStrategy0);
      MiniSATRestarts miniSATRestarts0 = new MiniSATRestarts();
      Solver<CardinalityDataStructure> solver0 = new Solver<CardinalityDataStructure>(fixedLengthLearning0, cardinalityDataStructure0, levelBasedVarOrderHeap0, miniSATRestarts0);
      ISolver iSolver0 = solver0.getSolvingEngine();
      MaxSatDecorator maxSatDecorator0 = new MaxSatDecorator(iSolver0, false);
      maxSatDecorator0.admitABetterSolution();
      IVecInt iVecInt0 = maxSatDecorator0.createBlockingClauseForCurrentModel();
      boolean boolean0 = maxSatDecorator0.admitABetterSolution(iVecInt0);
      assertTrue(boolean0);
      assertFalse(maxSatDecorator0.isSolutionOptimal());
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      FixedLengthLearning<CardinalityDataStructure> fixedLengthLearning0 = new FixedLengthLearning<CardinalityDataStructure>();
      CardinalityDataStructure cardinalityDataStructure0 = new CardinalityDataStructure();
      RSATPhaseSelectionStrategy rSATPhaseSelectionStrategy0 = new RSATPhaseSelectionStrategy();
      LevelBasedVarOrderHeap levelBasedVarOrderHeap0 = new LevelBasedVarOrderHeap(rSATPhaseSelectionStrategy0);
      MiniSATRestarts miniSATRestarts0 = new MiniSATRestarts();
      Solver<CardinalityDataStructure> solver0 = new Solver<CardinalityDataStructure>(fixedLengthLearning0, cardinalityDataStructure0, levelBasedVarOrderHeap0, miniSATRestarts0);
      solver0.newVar(736);
      MaxSatDecorator maxSatDecorator0 = new MaxSatDecorator(solver0, true);
      boolean boolean0 = maxSatDecorator0.admitABetterSolution();
      assertTrue(boolean0);
      
      maxSatDecorator0.getPrevboolmodel();
      assertFalse(maxSatDecorator0.isOptimal());
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      DimacsOutputSolver dimacsOutputSolver0 = mock(DimacsOutputSolver.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(dimacsOutputSolver0).isSatisfiable(any(org.sat4j.specs.IVecInt.class) , anyBoolean());
      MaxSatDecorator maxSatDecorator0 = new MaxSatDecorator(dimacsOutputSolver0, false);
      boolean boolean0 = maxSatDecorator0.admitABetterSolution((IVecInt) null);
      assertTrue(maxSatDecorator0.isSolutionOptimal());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      FixedLengthLearning<CardinalityDataStructure> fixedLengthLearning0 = new FixedLengthLearning<CardinalityDataStructure>();
      CardinalityDataStructure cardinalityDataStructure0 = new CardinalityDataStructure();
      RSATPhaseSelectionStrategy rSATPhaseSelectionStrategy0 = new RSATPhaseSelectionStrategy();
      LevelBasedVarOrderHeap levelBasedVarOrderHeap0 = new LevelBasedVarOrderHeap(rSATPhaseSelectionStrategy0);
      MiniSATRestarts miniSATRestarts0 = new MiniSATRestarts();
      Solver<CardinalityDataStructure> solver0 = new Solver<CardinalityDataStructure>(fixedLengthLearning0, cardinalityDataStructure0, levelBasedVarOrderHeap0, miniSATRestarts0);
      MaxSatDecorator maxSatDecorator0 = new MaxSatDecorator(solver0, true);
      boolean[] booleanArray0 = maxSatDecorator0.getPrevboolmodel();
      assertNull(booleanArray0);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      DimacsOutputSolver dimacsOutputSolver0 = mock(DimacsOutputSolver.class, new ViolatedAssumptionAnswer());
      ClausalCardinalitiesDecorator<DimacsOutputSolver> clausalCardinalitiesDecorator0 = new ClausalCardinalitiesDecorator<DimacsOutputSolver>(dimacsOutputSolver0);
      MaxSatDecorator maxSatDecorator0 = new MaxSatDecorator(clausalCardinalitiesDecorator0);
      maxSatDecorator0.setNbexpectedclauses(615);
      int int0 = maxSatDecorator0.getExpectedNumberOfClauses();
      assertEquals(615, int0);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      MaxSatDecorator maxSatDecorator0 = new MaxSatDecorator((ISolver) null, true);
      boolean boolean0 = maxSatDecorator0.isSolutionOptimal();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      MaxSatDecorator maxSatDecorator0 = new MaxSatDecorator((ISolver) null);
      int[] intArray0 = maxSatDecorator0.getPrevmodel();
      assertNull(intArray0);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      FixedLengthLearning<CardinalityDataStructure> fixedLengthLearning0 = new FixedLengthLearning<CardinalityDataStructure>();
      CardinalityDataStructure cardinalityDataStructure0 = new CardinalityDataStructure();
      RSATPhaseSelectionStrategy rSATPhaseSelectionStrategy0 = new RSATPhaseSelectionStrategy();
      LevelBasedVarOrderHeap levelBasedVarOrderHeap0 = new LevelBasedVarOrderHeap(rSATPhaseSelectionStrategy0);
      MiniSATRestarts miniSATRestarts0 = new MiniSATRestarts();
      Solver<CardinalityDataStructure> solver0 = new Solver<CardinalityDataStructure>(fixedLengthLearning0, cardinalityDataStructure0, levelBasedVarOrderHeap0, miniSATRestarts0);
      ISolver iSolver0 = solver0.getSolvingEngine();
      MaxSatDecorator maxSatDecorator0 = new MaxSatDecorator(iSolver0, false);
      IVecInt iVecInt0 = maxSatDecorator0.createBlockingClauseForCurrentModel();
      assertNull(iVecInt0);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      DimacsOutputSolver dimacsOutputSolver0 = mock(DimacsOutputSolver.class, new ViolatedAssumptionAnswer());
      ClausalCardinalitiesDecorator<DimacsOutputSolver> clausalCardinalitiesDecorator0 = new ClausalCardinalitiesDecorator<DimacsOutputSolver>(dimacsOutputSolver0);
      MaxSatDecorator maxSatDecorator0 = new MaxSatDecorator(clausalCardinalitiesDecorator0, false);
      int int0 = maxSatDecorator0.getExpectedNumberOfClauses();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      FixedLengthLearning<CardinalityDataStructure> fixedLengthLearning0 = new FixedLengthLearning<CardinalityDataStructure>();
      CardinalityDataStructure cardinalityDataStructure0 = new CardinalityDataStructure();
      LevelBasedVarOrderHeap levelBasedVarOrderHeap0 = new LevelBasedVarOrderHeap();
      MiniSATRestarts miniSATRestarts0 = new MiniSATRestarts();
      Solver<CardinalityDataStructure> solver0 = new Solver<CardinalityDataStructure>(fixedLengthLearning0, cardinalityDataStructure0, levelBasedVarOrderHeap0, miniSATRestarts0);
      MaxSatDecorator maxSatDecorator0 = new MaxSatDecorator(solver0, true);
      maxSatDecorator0.admitABetterSolution();
      // Undeclared exception!
      try { 
        maxSatDecorator0.model(3131);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 3130
         //
         verifyException("org.sat4j.opt.AbstractSelectorVariablesDecorator", e);
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      MaxSatDecorator maxSatDecorator0 = new MaxSatDecorator((ISolver) null, false);
      boolean boolean0 = maxSatDecorator0.isOptimal();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      MaxSatDecorator maxSatDecorator0 = new MaxSatDecorator((ISolver) null, true);
      int[] intArray0 = maxSatDecorator0.model();
      assertNull(intArray0);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      FixedLengthLearning<CardinalityDataStructure> fixedLengthLearning0 = new FixedLengthLearning<CardinalityDataStructure>();
      CardinalityDataStructure cardinalityDataStructure0 = new CardinalityDataStructure();
      LevelBasedVarOrderHeap levelBasedVarOrderHeap0 = new LevelBasedVarOrderHeap();
      MiniSATRestarts miniSATRestarts0 = new MiniSATRestarts();
      Solver<CardinalityDataStructure> solver0 = new Solver<CardinalityDataStructure>(fixedLengthLearning0, cardinalityDataStructure0, levelBasedVarOrderHeap0, miniSATRestarts0);
      MaxSatDecorator maxSatDecorator0 = new MaxSatDecorator(solver0, true);
      // Undeclared exception!
      try { 
        maxSatDecorator0.model(3131);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.opt.AbstractSelectorVariablesDecorator", e);
      }
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      MaxSatDecorator maxSatDecorator0 = new MaxSatDecorator((ISolver) null, true);
      boolean[] booleanArray0 = new boolean[2];
      maxSatDecorator0.setPrevboolmodel(booleanArray0);
      assertEquals(0, maxSatDecorator0.getNbexpectedclauses());
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      DimacsOutputSolver dimacsOutputSolver0 = mock(DimacsOutputSolver.class, new ViolatedAssumptionAnswer());
      ClausalCardinalitiesDecorator<DimacsOutputSolver> clausalCardinalitiesDecorator0 = new ClausalCardinalitiesDecorator<DimacsOutputSolver>(dimacsOutputSolver0);
      MaxSatDecorator maxSatDecorator0 = new MaxSatDecorator(clausalCardinalitiesDecorator0);
      int int0 = maxSatDecorator0.getNbexpectedclauses();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      FixedLengthLearning<CardinalityDataStructure> fixedLengthLearning0 = new FixedLengthLearning<CardinalityDataStructure>();
      CardinalityDataStructure cardinalityDataStructure0 = new CardinalityDataStructure();
      RSATPhaseSelectionStrategy rSATPhaseSelectionStrategy0 = new RSATPhaseSelectionStrategy();
      LevelBasedVarOrderHeap levelBasedVarOrderHeap0 = new LevelBasedVarOrderHeap(rSATPhaseSelectionStrategy0);
      MiniSATRestarts miniSATRestarts0 = new MiniSATRestarts();
      Solver<CardinalityDataStructure> solver0 = new Solver<CardinalityDataStructure>(fixedLengthLearning0, cardinalityDataStructure0, levelBasedVarOrderHeap0, miniSATRestarts0);
      MaxSatDecorator maxSatDecorator0 = new MaxSatDecorator(solver0, true);
      // Undeclared exception!
      try { 
        maxSatDecorator0.discardCurrentModel();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.minisat.core.Solver", e);
      }
  }
}
