/*
 * This file was automatically generated by EvoSuite
 * Sun Feb 17 12:31:31 GMT 2019
 */

package org.sat4j.core;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.Comparator;
import java.util.NoSuchElementException;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;
import org.sat4j.core.EmptyVecInt;
import org.sat4j.core.ReadOnlyVecInt;
import org.sat4j.core.VecInt;
import org.sat4j.specs.IVecInt;
import org.sat4j.specs.IteratorInt;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class VecInt_ESTest extends VecInt_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      VecInt vecInt0 = new VecInt();
      assertNotNull(vecInt0);
      assertEquals(0, vecInt0.size());
      assertTrue(vecInt0.isEmpty());
      
      IVecInt iVecInt0 = vecInt0.pop();
      assertNotNull(iVecInt0);
      assertSame(vecInt0, iVecInt0);
      assertSame(iVecInt0, vecInt0);
      assertEquals((-1), vecInt0.size());
      assertFalse(vecInt0.isEmpty());
      assertEquals((-1), iVecInt0.size());
      assertFalse(iVecInt0.isEmpty());
      
      // Undeclared exception!
      try { 
        vecInt0.subset((-571));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.core.VecInt", e);
      }
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      int[] intArray0 = new int[3];
      VecInt vecInt0 = new VecInt(intArray0);
      assertArrayEquals(new int[] {0, 0, 0}, intArray0);
      assertEquals(3, intArray0.length);
      assertNotNull(vecInt0);
      assertEquals(0, vecInt0.last());
      assertEquals(3, vecInt0.size());
      assertFalse(vecInt0.isEmpty());
      
      vecInt0.shrink(3011);
      assertArrayEquals(new int[] {0, 0, 0}, intArray0);
      assertEquals(3, intArray0.length);
      assertEquals((-3008), vecInt0.size());
      assertFalse(vecInt0.isEmpty());
      
      boolean boolean0 = vecInt0.isEmpty();
      assertArrayEquals(new int[] {0, 0, 0}, intArray0);
      assertEquals(3, intArray0.length);
      assertFalse(boolean0);
      assertEquals((-3008), vecInt0.size());
      assertFalse(vecInt0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      VecInt vecInt0 = new VecInt();
      assertNotNull(vecInt0);
      assertTrue(vecInt0.isEmpty());
      assertEquals(0, vecInt0.size());
      
      int[] intArray0 = new int[8];
      VecInt vecInt1 = new VecInt(intArray0);
      assertArrayEquals(new int[] {0, 0, 0, 0, 0, 0, 0, 0}, intArray0);
      assertEquals(8, intArray0.length);
      assertNotNull(vecInt1);
      assertFalse(vecInt1.equals((Object)vecInt0));
      assertEquals(8, vecInt1.size());
      assertFalse(vecInt1.isEmpty());
      assertEquals(0, vecInt1.last());
      
      vecInt0.shrink(4);
      assertFalse(vecInt0.equals((Object)vecInt1));
      assertNotSame(vecInt0, vecInt1);
      assertEquals((-4), vecInt0.size());
      assertFalse(vecInt0.isEmpty());
      
      boolean boolean0 = vecInt1.isSubsetOf(vecInt0);
      assertArrayEquals(new int[] {0, 0, 0, 0, 0, 0, 0, 0}, intArray0);
      assertEquals(8, intArray0.length);
      assertTrue(boolean0);
      assertFalse(vecInt0.equals((Object)vecInt1));
      assertFalse(vecInt1.equals((Object)vecInt0));
      assertNotSame(vecInt0, vecInt1);
      assertNotSame(vecInt1, vecInt0);
      assertEquals((-4), vecInt0.size());
      assertFalse(vecInt0.isEmpty());
      assertEquals(8, vecInt1.size());
      assertFalse(vecInt1.isEmpty());
      assertEquals(0, vecInt1.last());
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      int[] intArray0 = new int[1];
      VecInt vecInt0 = new VecInt(intArray0);
      assertArrayEquals(new int[] {0}, intArray0);
      assertEquals(1, intArray0.length);
      assertNotNull(vecInt0);
      assertFalse(vecInt0.isEmpty());
      assertEquals(1, vecInt0.size());
      assertEquals(0, vecInt0.last());
      
      VecInt vecInt1 = new VecInt();
      assertNotNull(vecInt1);
      assertFalse(vecInt1.equals((Object)vecInt0));
      assertEquals(0, vecInt1.size());
      assertTrue(vecInt1.isEmpty());
      
      IVecInt iVecInt0 = vecInt1.pop();
      assertNotNull(iVecInt0);
      assertFalse(vecInt1.equals((Object)vecInt0));
      assertFalse(iVecInt0.equals((Object)vecInt0));
      assertNotSame(vecInt1, vecInt0);
      assertSame(vecInt1, iVecInt0);
      assertSame(iVecInt0, vecInt1);
      assertNotSame(iVecInt0, vecInt0);
      assertFalse(vecInt1.isEmpty());
      assertEquals((-1), vecInt1.size());
      assertFalse(iVecInt0.isEmpty());
      assertEquals((-1), iVecInt0.size());
      
      boolean boolean0 = vecInt1.isSubsetOf(vecInt0);
      assertArrayEquals(new int[] {0}, intArray0);
      assertEquals(1, intArray0.length);
      assertTrue(boolean0);
      assertFalse(vecInt0.equals((Object)iVecInt0));
      assertFalse(vecInt0.equals((Object)vecInt1));
      assertFalse(vecInt1.equals((Object)vecInt0));
      assertNotSame(vecInt0, iVecInt0);
      assertNotSame(vecInt0, vecInt1);
      assertNotSame(vecInt1, vecInt0);
      assertSame(vecInt1, iVecInt0);
      assertFalse(vecInt0.isEmpty());
      assertEquals(1, vecInt0.size());
      assertEquals(0, vecInt0.last());
      assertFalse(vecInt1.isEmpty());
      assertEquals((-1), vecInt1.size());
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      VecInt vecInt0 = new VecInt(865, 863);
      assertNotNull(vecInt0);
      assertEquals(863, vecInt0.last());
      assertFalse(vecInt0.isEmpty());
      assertEquals(865, vecInt0.size());
      
      vecInt0.hashCode();
      assertEquals(863, vecInt0.last());
      assertFalse(vecInt0.isEmpty());
      assertEquals(865, vecInt0.size());
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      VecInt vecInt0 = new VecInt();
      assertNotNull(vecInt0);
      assertTrue(vecInt0.isEmpty());
      assertEquals(0, vecInt0.size());
      
      vecInt0.shrink(1);
      assertEquals((-1), vecInt0.size());
      assertFalse(vecInt0.isEmpty());
      
      vecInt0.hashCode();
      assertEquals((-1), vecInt0.size());
      assertFalse(vecInt0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      VecInt vecInt0 = new VecInt();
      assertNotNull(vecInt0);
      assertEquals(0, vecInt0.size());
      assertTrue(vecInt0.isEmpty());
      
      vecInt0.unsafePush(1);
      assertEquals(1, vecInt0.last());
      assertFalse(vecInt0.isEmpty());
      assertEquals(1, vecInt0.size());
      
      VecInt vecInt1 = new VecInt();
      assertNotNull(vecInt1);
      assertFalse(vecInt1.equals((Object)vecInt0));
      assertTrue(vecInt1.isEmpty());
      assertEquals(0, vecInt1.size());
      
      ReadOnlyVecInt readOnlyVecInt0 = new ReadOnlyVecInt(vecInt0);
      assertNotNull(readOnlyVecInt0);
      assertFalse(vecInt0.equals((Object)vecInt1));
      assertEquals(1, vecInt0.last());
      assertFalse(vecInt0.isEmpty());
      assertEquals(1, vecInt0.size());
      assertEquals(1, readOnlyVecInt0.size());
      assertFalse(readOnlyVecInt0.isEmpty());
      
      boolean boolean0 = vecInt1.equals(readOnlyVecInt0);
      assertFalse(boolean0);
      assertFalse(vecInt0.equals((Object)vecInt1));
      assertFalse(vecInt1.equals((Object)vecInt0));
      assertNotSame(vecInt0, vecInt1);
      assertNotSame(vecInt1, vecInt0);
      assertEquals(1, vecInt0.last());
      assertFalse(vecInt0.isEmpty());
      assertEquals(1, vecInt0.size());
      assertTrue(vecInt1.isEmpty());
      assertEquals(0, vecInt1.size());
      assertEquals(1, readOnlyVecInt0.size());
      assertFalse(readOnlyVecInt0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      VecInt vecInt0 = new VecInt();
      assertNotNull(vecInt0);
      assertTrue(vecInt0.isEmpty());
      assertEquals(0, vecInt0.size());
      
      IVecInt iVecInt0 = vecInt0.pop();
      assertNotNull(iVecInt0);
      assertSame(vecInt0, iVecInt0);
      assertSame(iVecInt0, vecInt0);
      assertEquals((-1), vecInt0.size());
      assertFalse(vecInt0.isEmpty());
      assertFalse(iVecInt0.isEmpty());
      assertEquals((-1), iVecInt0.size());
      
      vecInt0.sortUnique();
      assertSame(vecInt0, iVecInt0);
      assertEquals(0, vecInt0.last());
      assertEquals(1, vecInt0.size());
      assertFalse(vecInt0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      VecInt vecInt0 = new VecInt(1);
      assertNotNull(vecInt0);
      assertEquals(0, vecInt0.size());
      assertTrue(vecInt0.isEmpty());
      
      IVecInt iVecInt0 = vecInt0.pop();
      assertNotNull(iVecInt0);
      assertSame(vecInt0, iVecInt0);
      assertSame(iVecInt0, vecInt0);
      assertEquals((-1), vecInt0.size());
      assertFalse(vecInt0.isEmpty());
      assertFalse(iVecInt0.isEmpty());
      assertEquals((-1), iVecInt0.size());
      
      String string0 = vecInt0.toString();
      assertNotNull(string0);
      assertEquals("", string0);
      assertSame(vecInt0, iVecInt0);
      assertEquals((-1), vecInt0.size());
      assertFalse(vecInt0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      VecInt vecInt0 = new VecInt(512);
      assertNotNull(vecInt0);
      assertEquals(0, vecInt0.size());
      assertTrue(vecInt0.isEmpty());
      
      vecInt0.shrink(512);
      assertEquals((-512), vecInt0.size());
      assertFalse(vecInt0.isEmpty());
      
      // Undeclared exception!
      try { 
        vecInt0.remove(512);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 512
         //
         verifyException("org.sat4j.core.VecInt", e);
      }
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      VecInt vecInt0 = new VecInt();
      assertNotNull(vecInt0);
      assertTrue(vecInt0.isEmpty());
      assertEquals(0, vecInt0.size());
      
      // Undeclared exception!
      try { 
        vecInt0.remove((-17));
        fail("Expecting exception: NoSuchElementException");
      
      } catch(NoSuchElementException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.core.VecInt", e);
      }
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      VecInt vecInt0 = new VecInt();
      assertNotNull(vecInt0);
      assertEquals(0, vecInt0.size());
      assertTrue(vecInt0.isEmpty());
      
      vecInt0.insertFirst((-2));
      assertEquals(1, vecInt0.size());
      assertFalse(vecInt0.isEmpty());
      assertEquals((-2), vecInt0.last());
      
      int int0 = vecInt0.containsAt((-269));
      assertEquals((-1), int0);
      assertEquals(1, vecInt0.size());
      assertFalse(vecInt0.isEmpty());
      assertEquals((-2), vecInt0.last());
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      VecInt vecInt0 = new VecInt(2450, 2450);
      assertNotNull(vecInt0);
      assertEquals(2450, vecInt0.size());
      assertEquals(2450, vecInt0.last());
      assertFalse(vecInt0.isEmpty());
      
      int int0 = vecInt0.indexOf(0);
      assertEquals((-1), int0);
      assertEquals(2450, vecInt0.size());
      assertEquals(2450, vecInt0.last());
      assertFalse(vecInt0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      VecInt vecInt0 = new VecInt();
      assertNotNull(vecInt0);
      assertEquals(0, vecInt0.size());
      assertTrue(vecInt0.isEmpty());
      
      IVecInt iVecInt0 = vecInt0.pop();
      assertNotNull(iVecInt0);
      assertSame(vecInt0, iVecInt0);
      assertSame(iVecInt0, vecInt0);
      assertEquals((-1), vecInt0.size());
      assertFalse(vecInt0.isEmpty());
      assertFalse(iVecInt0.isEmpty());
      assertEquals((-1), iVecInt0.size());
      
      int int0 = vecInt0.indexOf(2);
      assertEquals((-1), int0);
      assertSame(vecInt0, iVecInt0);
      assertEquals((-1), vecInt0.size());
      assertFalse(vecInt0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      VecInt vecInt0 = new VecInt();
      assertNotNull(vecInt0);
      assertEquals(0, vecInt0.size());
      assertTrue(vecInt0.isEmpty());
      
      vecInt0.shrink(863);
      assertEquals((-863), vecInt0.size());
      assertFalse(vecInt0.isEmpty());
      
      boolean boolean0 = vecInt0.contains(863);
      assertFalse(boolean0);
      assertEquals((-863), vecInt0.size());
      assertFalse(vecInt0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      VecInt vecInt0 = new VecInt(1);
      assertNotNull(vecInt0);
      assertEquals(0, vecInt0.size());
      assertTrue(vecInt0.isEmpty());
      
      // Undeclared exception!
      try { 
        vecInt0.set(0, 23);
        fail("Expecting exception: AssertionError");
      
      } catch(AssertionError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      VecInt vecInt0 = new VecInt();
      assertNotNull(vecInt0);
      assertEquals(0, vecInt0.size());
      assertTrue(vecInt0.isEmpty());
      
      Comparator<Integer> comparator0 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      vecInt0.selectionSort(3485, 3485, comparator0);
      assertEquals(0, vecInt0.size());
      assertTrue(vecInt0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      VecInt vecInt0 = new VecInt();
      assertNotNull(vecInt0);
      assertTrue(vecInt0.isEmpty());
      assertEquals(0, vecInt0.size());
      
      vecInt0.selectionSort((-190), (-190));
      assertTrue(vecInt0.isEmpty());
      assertEquals(0, vecInt0.size());
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      VecInt vecInt0 = new VecInt(1016);
      assertNotNull(vecInt0);
      assertEquals(0, vecInt0.size());
      assertTrue(vecInt0.isEmpty());
      
      vecInt0.copyTo((IVecInt) vecInt0);
      assertEquals(0, vecInt0.size());
      assertTrue(vecInt0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      VecInt vecInt0 = new VecInt(2450, 2450);
      assertNotNull(vecInt0);
      assertEquals(2450, vecInt0.last());
      assertFalse(vecInt0.isEmpty());
      assertEquals(2450, vecInt0.size());
      
      vecInt0.moveTo2(vecInt0);
      assertEquals(0, vecInt0.size());
      assertTrue(vecInt0.isEmpty());
      
      VecInt vecInt1 = (VecInt)vecInt0.pop();
      assertNotNull(vecInt1);
      assertSame(vecInt0, vecInt1);
      assertSame(vecInt1, vecInt0);
      assertEquals((-1), vecInt0.size());
      assertFalse(vecInt0.isEmpty());
      assertEquals((-1), vecInt1.size());
      assertFalse(vecInt1.isEmpty());
      
      boolean boolean0 = vecInt1.equals(vecInt0);
      assertTrue(boolean0);
      assertSame(vecInt0, vecInt1);
      assertSame(vecInt1, vecInt0);
      assertEquals((-1), vecInt0.size());
      assertFalse(vecInt0.isEmpty());
      assertEquals((-1), vecInt1.size());
      assertFalse(vecInt1.isEmpty());
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      int[] intArray0 = new int[5];
      VecInt vecInt0 = new VecInt(intArray0);
      assertArrayEquals(new int[] {0, 0, 0, 0, 0}, intArray0);
      assertEquals(5, intArray0.length);
      assertNotNull(vecInt0);
      assertEquals(0, vecInt0.last());
      assertEquals(5, vecInt0.size());
      assertFalse(vecInt0.isEmpty());
      
      vecInt0.moveTo(intArray0);
      assertArrayEquals(new int[] {0, 0, 0, 0, 0}, intArray0);
      assertEquals(5, intArray0.length);
      assertTrue(vecInt0.isEmpty());
      assertEquals(0, vecInt0.size());
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      VecInt vecInt0 = new VecInt(1, 1);
      assertNotNull(vecInt0);
      assertEquals(1, vecInt0.last());
      assertEquals(1, vecInt0.size());
      assertFalse(vecInt0.isEmpty());
      
      int[] intArray0 = new int[1];
      vecInt0.moveTo(1, intArray0);
      assertArrayEquals(new int[] {0}, intArray0);
      assertEquals(1, intArray0.length);
      assertTrue(vecInt0.isEmpty());
      assertEquals(0, vecInt0.size());
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      VecInt vecInt0 = new VecInt();
      assertNotNull(vecInt0);
      assertTrue(vecInt0.isEmpty());
      assertEquals(0, vecInt0.size());
      
      vecInt0.moveTo(1, 0);
      assertTrue(vecInt0.isEmpty());
      assertEquals(0, vecInt0.size());
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      VecInt vecInt0 = new VecInt(4, (-2429));
      assertNotNull(vecInt0);
      assertEquals(4, vecInt0.size());
      assertEquals((-2429), vecInt0.last());
      assertFalse(vecInt0.isEmpty());
      
      int[] intArray0 = new int[9];
      vecInt0.copyTo(intArray0);
      assertArrayEquals(new int[] {(-2429), (-2429), (-2429), (-2429), 0, 0, 0, 0, 0}, intArray0);
      assertEquals(9, intArray0.length);
      assertEquals(4, vecInt0.size());
      assertEquals((-2429), vecInt0.last());
      assertFalse(vecInt0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      VecInt vecInt0 = new VecInt(817);
      assertNotNull(vecInt0);
      assertTrue(vecInt0.isEmpty());
      assertEquals(0, vecInt0.size());
      
      int int0 = vecInt0.unsafeGet(6);
      assertEquals(0, int0);
      assertTrue(vecInt0.isEmpty());
      assertEquals(0, vecInt0.size());
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      VecInt vecInt0 = new VecInt(107, 2775);
      assertNotNull(vecInt0);
      assertFalse(vecInt0.isEmpty());
      assertEquals(2775, vecInt0.last());
      assertEquals(107, vecInt0.size());
      
      int int0 = vecInt0.unsafeGet(0);
      assertEquals(2775, int0);
      assertFalse(vecInt0.isEmpty());
      assertEquals(2775, vecInt0.last());
      assertEquals(107, vecInt0.size());
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      VecInt vecInt0 = new VecInt(50, (-447));
      assertNotNull(vecInt0);
      assertFalse(vecInt0.isEmpty());
      assertEquals((-447), vecInt0.last());
      assertEquals(50, vecInt0.size());
      
      int int0 = vecInt0.unsafeGet(0);
      assertEquals((-447), int0);
      assertFalse(vecInt0.isEmpty());
      assertEquals((-447), vecInt0.last());
      assertEquals(50, vecInt0.size());
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      VecInt vecInt0 = new VecInt(2450, 2450);
      assertNotNull(vecInt0);
      assertFalse(vecInt0.isEmpty());
      assertEquals(2450, vecInt0.last());
      assertEquals(2450, vecInt0.size());
      
      int int0 = vecInt0.size();
      assertEquals(2450, int0);
      assertFalse(vecInt0.isEmpty());
      assertEquals(2450, vecInt0.last());
      assertEquals(2450, vecInt0.size());
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      VecInt vecInt0 = new VecInt();
      assertNotNull(vecInt0);
      assertEquals(0, vecInt0.size());
      assertTrue(vecInt0.isEmpty());
      
      vecInt0.shrink(5);
      assertEquals((-5), vecInt0.size());
      assertFalse(vecInt0.isEmpty());
      
      int int0 = vecInt0.size();
      assertEquals((-5), int0);
      assertEquals((-5), vecInt0.size());
      assertFalse(vecInt0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      VecInt vecInt0 = new VecInt(2, 2);
      assertNotNull(vecInt0);
      assertEquals(2, vecInt0.last());
      assertFalse(vecInt0.isEmpty());
      assertEquals(2, vecInt0.size());
      
      IVecInt iVecInt0 = vecInt0.pop();
      assertNotNull(iVecInt0);
      assertSame(vecInt0, iVecInt0);
      assertSame(iVecInt0, vecInt0);
      assertEquals(2, vecInt0.last());
      assertFalse(vecInt0.isEmpty());
      assertEquals(1, vecInt0.size());
      assertEquals(2, iVecInt0.last());
      assertEquals(1, iVecInt0.size());
      assertFalse(iVecInt0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      VecInt vecInt0 = new VecInt();
      assertNotNull(vecInt0);
      assertTrue(vecInt0.isEmpty());
      assertEquals(0, vecInt0.size());
      
      vecInt0.unsafePush(1);
      assertEquals(1, vecInt0.last());
      assertFalse(vecInt0.isEmpty());
      assertEquals(1, vecInt0.size());
      
      IVecInt iVecInt0 = vecInt0.pop();
      assertNotNull(iVecInt0);
      assertSame(vecInt0, iVecInt0);
      assertSame(iVecInt0, vecInt0);
      assertTrue(vecInt0.isEmpty());
      assertEquals(0, vecInt0.size());
      assertEquals(0, iVecInt0.size());
      assertTrue(iVecInt0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      int[] intArray0 = new int[2];
      VecInt vecInt0 = new VecInt(intArray0);
      assertArrayEquals(new int[] {0, 0}, intArray0);
      assertEquals(2, intArray0.length);
      assertNotNull(vecInt0);
      assertEquals(2, vecInt0.size());
      assertEquals(0, vecInt0.last());
      assertFalse(vecInt0.isEmpty());
      
      int int0 = vecInt0.last();
      assertArrayEquals(new int[] {0, 0}, intArray0);
      assertEquals(2, intArray0.length);
      assertEquals(0, int0);
      assertEquals(2, vecInt0.size());
      assertEquals(0, vecInt0.last());
      assertFalse(vecInt0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      VecInt vecInt0 = new VecInt(3713);
      assertNotNull(vecInt0);
      assertTrue(vecInt0.isEmpty());
      assertEquals(0, vecInt0.size());
      
      vecInt0.growTo(3713, (-1625));
      assertFalse(vecInt0.isEmpty());
      assertEquals((-1625), vecInt0.last());
      assertEquals(3713, vecInt0.size());
      
      int int0 = vecInt0.last();
      assertEquals((-1625), int0);
      assertFalse(vecInt0.isEmpty());
      assertEquals((-1625), vecInt0.last());
      assertEquals(3713, vecInt0.size());
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      int[] intArray0 = new int[4];
      intArray0[2] = 3;
      VecInt vecInt0 = new VecInt(intArray0);
      assertArrayEquals(new int[] {0, 0, 3, 0}, intArray0);
      assertEquals(4, intArray0.length);
      assertNotNull(vecInt0);
      assertEquals(0, vecInt0.last());
      assertEquals(4, vecInt0.size());
      assertFalse(vecInt0.isEmpty());
      
      int int0 = vecInt0.indexOf(3);
      assertArrayEquals(new int[] {0, 0, 3, 0}, intArray0);
      assertEquals(4, intArray0.length);
      assertEquals(2, int0);
      assertEquals(0, vecInt0.last());
      assertEquals(4, vecInt0.size());
      assertFalse(vecInt0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      int[] intArray0 = new int[10];
      VecInt vecInt0 = new VecInt(intArray0);
      assertArrayEquals(new int[] {0, 0, 0, 0, 0, 0, 0, 0, 0, 0}, intArray0);
      assertEquals(10, intArray0.length);
      assertNotNull(vecInt0);
      assertEquals(10, vecInt0.size());
      assertFalse(vecInt0.isEmpty());
      assertEquals(0, vecInt0.last());
      
      int int0 = vecInt0.get(7);
      assertArrayEquals(new int[] {0, 0, 0, 0, 0, 0, 0, 0, 0, 0}, intArray0);
      assertEquals(10, intArray0.length);
      assertEquals(0, int0);
      assertEquals(10, vecInt0.size());
      assertFalse(vecInt0.isEmpty());
      assertEquals(0, vecInt0.last());
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      VecInt vecInt0 = new VecInt(0, 4);
      assertNotNull(vecInt0);
      assertTrue(vecInt0.isEmpty());
      assertEquals(0, vecInt0.size());
      
      IVecInt iVecInt0 = vecInt0.push(2);
      assertNotNull(iVecInt0);
      assertSame(vecInt0, iVecInt0);
      assertSame(iVecInt0, vecInt0);
      assertEquals(2, vecInt0.last());
      assertFalse(vecInt0.isEmpty());
      assertEquals(1, vecInt0.size());
      assertEquals(1, iVecInt0.size());
      assertFalse(iVecInt0.isEmpty());
      assertEquals(2, iVecInt0.last());
      
      int int0 = iVecInt0.get(0);
      assertEquals(2, int0);
      assertSame(vecInt0, iVecInt0);
      assertSame(iVecInt0, vecInt0);
      assertEquals(2, vecInt0.last());
      assertFalse(vecInt0.isEmpty());
      assertEquals(1, vecInt0.size());
      assertEquals(1, iVecInt0.size());
      assertFalse(iVecInt0.isEmpty());
      assertEquals(2, iVecInt0.last());
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      VecInt vecInt0 = new VecInt(979);
      assertNotNull(vecInt0);
      assertEquals(0, vecInt0.size());
      assertTrue(vecInt0.isEmpty());
      
      IVecInt iVecInt0 = vecInt0.push(979);
      assertNotNull(iVecInt0);
      assertSame(vecInt0, iVecInt0);
      assertSame(iVecInt0, vecInt0);
      assertFalse(vecInt0.isEmpty());
      assertEquals(1, vecInt0.size());
      assertEquals(979, vecInt0.last());
      assertEquals(979, iVecInt0.last());
      assertFalse(iVecInt0.isEmpty());
      assertEquals(1, iVecInt0.size());
      
      int int0 = iVecInt0.delete(1);
      assertEquals(0, int0);
      assertSame(vecInt0, iVecInt0);
      assertSame(iVecInt0, vecInt0);
      assertEquals(0, vecInt0.size());
      assertTrue(vecInt0.isEmpty());
      assertTrue(iVecInt0.isEmpty());
      assertEquals(0, iVecInt0.size());
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      VecInt vecInt0 = new VecInt(2450, 2450);
      assertNotNull(vecInt0);
      assertFalse(vecInt0.isEmpty());
      assertEquals(2450, vecInt0.size());
      assertEquals(2450, vecInt0.last());
      
      int int0 = vecInt0.delete(0);
      assertEquals(2450, int0);
      assertFalse(vecInt0.isEmpty());
      assertEquals(2449, vecInt0.size());
      assertEquals(2450, vecInt0.last());
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      int[] intArray0 = new int[1];
      intArray0[0] = 100;
      VecInt vecInt0 = new VecInt(intArray0);
      assertArrayEquals(new int[] {100}, intArray0);
      assertEquals(1, intArray0.length);
      assertNotNull(vecInt0);
      assertFalse(vecInt0.isEmpty());
      assertEquals(100, vecInt0.last());
      assertEquals(1, vecInt0.size());
      
      int int0 = vecInt0.containsAt(100, (-1));
      assertArrayEquals(new int[] {100}, intArray0);
      assertEquals(1, intArray0.length);
      assertEquals(0, int0);
      assertFalse(vecInt0.isEmpty());
      assertEquals(100, vecInt0.last());
      assertEquals(1, vecInt0.size());
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      int[] intArray0 = new int[5];
      intArray0[1] = 2811;
      VecInt vecInt0 = new VecInt(intArray0);
      assertArrayEquals(new int[] {0, 2811, 0, 0, 0}, intArray0);
      assertEquals(5, intArray0.length);
      assertNotNull(vecInt0);
      assertEquals(0, vecInt0.last());
      assertEquals(5, vecInt0.size());
      assertFalse(vecInt0.isEmpty());
      
      int int0 = vecInt0.containsAt(2811);
      assertArrayEquals(new int[] {0, 2811, 0, 0, 0}, intArray0);
      assertEquals(5, intArray0.length);
      assertEquals(1, int0);
      assertEquals(0, vecInt0.last());
      assertEquals(5, vecInt0.size());
      assertFalse(vecInt0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      VecInt vecInt0 = new VecInt(0, 0);
      assertNotNull(vecInt0);
      assertEquals(0, vecInt0.size());
      assertTrue(vecInt0.isEmpty());
      
      // Undeclared exception!
      try { 
        vecInt0.unsafePush(0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.sat4j.core.VecInt", e);
      }
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      VecInt vecInt0 = new VecInt();
      assertNotNull(vecInt0);
      assertEquals(0, vecInt0.size());
      assertTrue(vecInt0.isEmpty());
      
      vecInt0.shrink((-3987));
      assertFalse(vecInt0.isEmpty());
      assertEquals(3987, vecInt0.size());
      
      // Undeclared exception!
      try { 
        vecInt0.toString();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      VecInt vecInt0 = new VecInt(1);
      assertNotNull(vecInt0);
      assertTrue(vecInt0.isEmpty());
      assertEquals(0, vecInt0.size());
      
      vecInt0.shrink(1);
      assertEquals((-1), vecInt0.size());
      assertFalse(vecInt0.isEmpty());
      
      // Undeclared exception!
      try { 
        vecInt0.subset(1);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.core.VecInt", e);
      }
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      VecInt vecInt0 = new VecInt();
      assertNotNull(vecInt0);
      assertEquals(0, vecInt0.size());
      assertTrue(vecInt0.isEmpty());
      
      vecInt0.shrinkTo(142);
      assertEquals(142, vecInt0.size());
      assertFalse(vecInt0.isEmpty());
      
      // Undeclared exception!
      try { 
        vecInt0.sortUnique();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 71
         //
         verifyException("org.sat4j.core.VecInt", e);
      }
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      int[] intArray0 = new int[9];
      VecInt vecInt0 = new VecInt(intArray0);
      assertArrayEquals(new int[] {0, 0, 0, 0, 0, 0, 0, 0, 0}, intArray0);
      assertEquals(9, intArray0.length);
      assertNotNull(vecInt0);
      assertFalse(vecInt0.isEmpty());
      assertEquals(9, vecInt0.size());
      assertEquals(0, vecInt0.last());
      
      // Undeclared exception!
      try { 
        vecInt0.sort((Comparator<Integer>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      VecInt vecInt0 = new VecInt();
      assertNotNull(vecInt0);
      assertTrue(vecInt0.isEmpty());
      assertEquals(0, vecInt0.size());
      
      vecInt0.shrink((-5419));
      assertEquals(5419, vecInt0.size());
      assertFalse(vecInt0.isEmpty());
      
      Comparator<Integer> comparator0 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        vecInt0.sort(comparator0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 2709
         //
         verifyException("org.sat4j.core.VecInt", e);
      }
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      VecInt vecInt0 = new VecInt();
      assertNotNull(vecInt0);
      assertEquals(0, vecInt0.size());
      assertTrue(vecInt0.isEmpty());
      
      vecInt0.shrink((-3188));
      assertEquals(3188, vecInt0.size());
      assertFalse(vecInt0.isEmpty());
      
      // Undeclared exception!
      try { 
        vecInt0.sort();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1594
         //
         verifyException("org.sat4j.core.VecInt", e);
      }
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      VecInt vecInt0 = new VecInt(2, 2);
      assertNotNull(vecInt0);
      assertEquals(2, vecInt0.last());
      assertEquals(2, vecInt0.size());
      assertFalse(vecInt0.isEmpty());
      
      vecInt0.shrink((-250));
      assertEquals(252, vecInt0.size());
      assertFalse(vecInt0.isEmpty());
      
      // Undeclared exception!
      try { 
        vecInt0.set(2, 1486);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 2
         //
         verifyException("org.sat4j.core.VecInt", e);
      }
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      VecInt vecInt0 = new VecInt(950, 4);
      assertNotNull(vecInt0);
      assertFalse(vecInt0.isEmpty());
      assertEquals(950, vecInt0.size());
      assertEquals(4, vecInt0.last());
      
      // Undeclared exception!
      vecInt0.selectionSort(1, 950);
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      VecInt vecInt0 = new VecInt(5, (-3254));
      assertNotNull(vecInt0);
      assertEquals((-3254), vecInt0.last());
      assertEquals(5, vecInt0.size());
      assertFalse(vecInt0.isEmpty());
      
      // Undeclared exception!
      try { 
        vecInt0.selectionSort(5, 24);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      VecInt vecInt0 = new VecInt();
      assertNotNull(vecInt0);
      assertEquals(0, vecInt0.size());
      assertTrue(vecInt0.isEmpty());
      
      // Undeclared exception!
      try { 
        vecInt0.pushAll((IVecInt) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.core.VecInt", e);
      }
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      int[] intArray0 = new int[10];
      VecInt vecInt0 = new VecInt(intArray0);
      assertArrayEquals(new int[] {0, 0, 0, 0, 0, 0, 0, 0, 0, 0}, intArray0);
      assertEquals(10, intArray0.length);
      assertNotNull(vecInt0);
      assertFalse(vecInt0.isEmpty());
      assertEquals(0, vecInt0.last());
      assertEquals(10, vecInt0.size());
      
      EmptyVecInt emptyVecInt0 = (EmptyVecInt)VecInt.EMPTY;
      assertNotNull(emptyVecInt0);
      assertTrue(emptyVecInt0.isEmpty());
      assertEquals("[]", emptyVecInt0.toString());
      assertEquals(0, emptyVecInt0.size());
      
      // Undeclared exception!
      try { 
        vecInt0.pushAll(emptyVecInt0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // org.sat4j.core.EmptyVecInt cannot be cast to org.sat4j.core.VecInt
         //
         verifyException("org.sat4j.core.VecInt", e);
      }
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      VecInt vecInt0 = new VecInt();
      assertNotNull(vecInt0);
      assertEquals(0, vecInt0.size());
      assertTrue(vecInt0.isEmpty());
      
      IVecInt iVecInt0 = vecInt0.pop();
      assertNotNull(iVecInt0);
      assertSame(vecInt0, iVecInt0);
      assertSame(iVecInt0, vecInt0);
      assertFalse(vecInt0.isEmpty());
      assertEquals((-1), vecInt0.size());
      assertEquals((-1), iVecInt0.size());
      assertFalse(iVecInt0.isEmpty());
      
      // Undeclared exception!
      try { 
        vecInt0.pushAll(iVecInt0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      VecInt vecInt0 = new VecInt(979);
      assertNotNull(vecInt0);
      assertTrue(vecInt0.isEmpty());
      assertEquals(0, vecInt0.size());
      
      vecInt0.shrink(1014);
      assertEquals((-1014), vecInt0.size());
      assertFalse(vecInt0.isEmpty());
      
      // Undeclared exception!
      try { 
        vecInt0.push(979);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1014
         //
         verifyException("org.sat4j.core.VecInt", e);
      }
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      int[] intArray0 = new int[10];
      VecInt vecInt0 = new VecInt(3475, 3475);
      assertNotNull(vecInt0);
      assertFalse(vecInt0.isEmpty());
      assertEquals(3475, vecInt0.last());
      assertEquals(3475, vecInt0.size());
      
      // Undeclared exception!
      try { 
        vecInt0.moveTo(intArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      int[] intArray0 = new int[2];
      VecInt vecInt0 = new VecInt(intArray0);
      assertArrayEquals(new int[] {0, 0}, intArray0);
      assertEquals(2, intArray0.length);
      assertNotNull(vecInt0);
      assertFalse(vecInt0.isEmpty());
      assertEquals(2, vecInt0.size());
      assertEquals(0, vecInt0.last());
      
      // Undeclared exception!
      try { 
        vecInt0.moveTo((IVecInt) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      int[] intArray0 = new int[1];
      VecInt vecInt0 = new VecInt(intArray0);
      assertArrayEquals(new int[] {0}, intArray0);
      assertEquals(1, intArray0.length);
      assertNotNull(vecInt0);
      assertFalse(vecInt0.isEmpty());
      assertEquals(1, vecInt0.size());
      assertEquals(0, vecInt0.last());
      
      EmptyVecInt emptyVecInt0 = new EmptyVecInt();
      assertNotNull(emptyVecInt0);
      assertTrue(emptyVecInt0.isEmpty());
      assertEquals("[]", emptyVecInt0.toString());
      assertEquals(0, emptyVecInt0.size());
      
      // Undeclared exception!
      try { 
        vecInt0.moveTo((IVecInt) emptyVecInt0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      int[] intArray0 = new int[2];
      VecInt vecInt0 = new VecInt(intArray0);
      assertArrayEquals(new int[] {0, 0}, intArray0);
      assertEquals(2, intArray0.length);
      assertNotNull(vecInt0);
      assertEquals(2, vecInt0.size());
      assertEquals(0, vecInt0.last());
      assertFalse(vecInt0.isEmpty());
      
      // Undeclared exception!
      try { 
        vecInt0.moveTo((-955), intArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      VecInt vecInt0 = new VecInt();
      assertNotNull(vecInt0);
      assertEquals(0, vecInt0.size());
      assertTrue(vecInt0.isEmpty());
      
      // Undeclared exception!
      try { 
        vecInt0.last();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("org.sat4j.core.VecInt", e);
      }
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      int[] intArray0 = new int[2];
      VecInt vecInt0 = new VecInt(intArray0);
      assertArrayEquals(new int[] {0, 0}, intArray0);
      assertEquals(2, intArray0.length);
      assertNotNull(vecInt0);
      assertEquals(2, vecInt0.size());
      assertFalse(vecInt0.isEmpty());
      assertEquals(0, vecInt0.last());
      
      // Undeclared exception!
      try { 
        vecInt0.isSubsetOf((VecInt) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.core.VecInt", e);
      }
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      int[] intArray0 = new int[8];
      VecInt vecInt0 = new VecInt(intArray0);
      assertArrayEquals(new int[] {0, 0, 0, 0, 0, 0, 0, 0}, intArray0);
      assertEquals(8, intArray0.length);
      assertNotNull(vecInt0);
      assertEquals(8, vecInt0.size());
      assertFalse(vecInt0.isEmpty());
      assertEquals(0, vecInt0.last());
      
      vecInt0.shrink((-1));
      assertArrayEquals(new int[] {0, 0, 0, 0, 0, 0, 0, 0}, intArray0);
      assertEquals(8, intArray0.length);
      assertEquals(9, vecInt0.size());
      assertFalse(vecInt0.isEmpty());
      
      // Undeclared exception!
      try { 
        vecInt0.isSubsetOf(vecInt0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 8
         //
         verifyException("org.sat4j.core.VecInt", e);
      }
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      int[] intArray0 = new int[2];
      VecInt vecInt0 = new VecInt(intArray0);
      assertArrayEquals(new int[] {0, 0}, intArray0);
      assertEquals(2, intArray0.length);
      assertNotNull(vecInt0);
      assertFalse(vecInt0.isEmpty());
      assertEquals(0, vecInt0.last());
      assertEquals(2, vecInt0.size());
      
      vecInt0.shrinkTo((-829));
      assertArrayEquals(new int[] {0, 0}, intArray0);
      assertEquals(2, intArray0.length);
      assertFalse(vecInt0.isEmpty());
      assertEquals((-829), vecInt0.size());
      
      // Undeclared exception!
      try { 
        vecInt0.insertFirst((-829));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -829
         //
         verifyException("org.sat4j.core.VecInt", e);
      }
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      VecInt vecInt0 = new VecInt();
      assertNotNull(vecInt0);
      assertTrue(vecInt0.isEmpty());
      assertEquals(0, vecInt0.size());
      
      vecInt0.shrink((-1529));
      assertEquals(1529, vecInt0.size());
      assertFalse(vecInt0.isEmpty());
      
      // Undeclared exception!
      try { 
        vecInt0.hashCode();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 5
         //
         verifyException("org.sat4j.core.VecInt", e);
      }
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      VecInt vecInt0 = new VecInt(1, 1);
      assertNotNull(vecInt0);
      assertEquals(1, vecInt0.last());
      assertFalse(vecInt0.isEmpty());
      assertEquals(1, vecInt0.size());
      
      // Undeclared exception!
      try { 
        vecInt0.growTo(5190, 5190);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      int[] intArray0 = new int[4];
      VecInt vecInt0 = new VecInt(intArray0);
      assertArrayEquals(new int[] {0, 0, 0, 0}, intArray0);
      assertEquals(4, intArray0.length);
      assertNotNull(vecInt0);
      assertFalse(vecInt0.isEmpty());
      assertEquals(0, vecInt0.last());
      assertEquals(4, vecInt0.size());
      
      vecInt0.shrinkTo(1231);
      assertArrayEquals(new int[] {0, 0, 0, 0}, intArray0);
      assertEquals(4, intArray0.length);
      assertEquals(1231, vecInt0.size());
      assertFalse(vecInt0.isEmpty());
      
      // Undeclared exception!
      try { 
        vecInt0.ensure(5);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.core.VecInt", e);
      }
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      VecInt vecInt0 = new VecInt();
      assertNotNull(vecInt0);
      assertTrue(vecInt0.isEmpty());
      assertEquals(0, vecInt0.size());
      
      EmptyVecInt emptyVecInt0 = new EmptyVecInt();
      assertNotNull(emptyVecInt0);
      assertEquals("[]", emptyVecInt0.toString());
      assertTrue(emptyVecInt0.isEmpty());
      assertEquals(0, emptyVecInt0.size());
      
      // Undeclared exception!
      try { 
        vecInt0.copyTo((IVecInt) emptyVecInt0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      VecInt vecInt0 = new VecInt();
      assertNotNull(vecInt0);
      assertEquals(0, vecInt0.size());
      assertTrue(vecInt0.isEmpty());
      
      vecInt0.shrink((-1346));
      assertEquals(1346, vecInt0.size());
      assertFalse(vecInt0.isEmpty());
      
      // Undeclared exception!
      try { 
        vecInt0.containsAt(1111);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 5
         //
         verifyException("org.sat4j.core.VecInt", e);
      }
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      VecInt vecInt0 = new VecInt();
      assertNotNull(vecInt0);
      assertTrue(vecInt0.isEmpty());
      assertEquals(0, vecInt0.size());
      
      vecInt0.shrink((-3987));
      assertEquals(3987, vecInt0.size());
      assertFalse(vecInt0.isEmpty());
      
      // Undeclared exception!
      try { 
        vecInt0.contains(9);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 5
         //
         verifyException("org.sat4j.core.VecInt", e);
      }
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      VecInt vecInt0 = new VecInt();
      assertNotNull(vecInt0);
      assertTrue(vecInt0.isEmpty());
      assertEquals(0, vecInt0.size());
      
      vecInt0.shrink(5);
      assertEquals((-5), vecInt0.size());
      assertFalse(vecInt0.isEmpty());
      
      // Undeclared exception!
      try { 
        vecInt0.clone();
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.core.VecInt", e);
      }
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      VecInt vecInt0 = new VecInt(4);
      assertNotNull(vecInt0);
      assertTrue(vecInt0.isEmpty());
      assertEquals(0, vecInt0.size());
      
      vecInt0.shrinkTo(791);
      assertEquals(791, vecInt0.size());
      assertFalse(vecInt0.isEmpty());
      
      // Undeclared exception!
      try { 
        vecInt0.clone();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.core.VecInt", e);
      }
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      VecInt vecInt0 = null;
      try {
        vecInt0 = new VecInt((int[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      VecInt vecInt0 = null;
      try {
        vecInt0 = new VecInt((-969), (-969));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.core.VecInt", e);
      }
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      VecInt vecInt0 = null;
      try {
        vecInt0 = new VecInt((-536));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.core.VecInt", e);
      }
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      VecInt vecInt0 = new VecInt();
      assertNotNull(vecInt0);
      assertEquals(0, vecInt0.size());
      assertTrue(vecInt0.isEmpty());
      
      vecInt0.growTo(1460, 512);
      assertEquals(1460, vecInt0.size());
      assertFalse(vecInt0.isEmpty());
      assertEquals(512, vecInt0.last());
      
      Comparator<Integer> comparator0 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn((-874), 0).when(comparator0).compare(anyInt() , anyInt());
      // Undeclared exception!
      try { 
        vecInt0.sort(185, 2727, comparator0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 2726
         //
         verifyException("org.sat4j.core.VecInt", e);
      }
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      VecInt vecInt0 = new VecInt(2, 2);
      assertNotNull(vecInt0);
      assertFalse(vecInt0.isEmpty());
      assertEquals(2, vecInt0.last());
      assertEquals(2, vecInt0.size());
      
      Comparator<Integer> comparator0 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      vecInt0.sort(100, (-1216), comparator0);
      assertFalse(vecInt0.isEmpty());
      assertEquals(2, vecInt0.last());
      assertEquals(2, vecInt0.size());
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      VecInt vecInt0 = new VecInt();
      assertNotNull(vecInt0);
      assertEquals(0, vecInt0.size());
      assertTrue(vecInt0.isEmpty());
      
      IVecInt[] iVecIntArray0 = vecInt0.subset((-2937));
      assertEquals(0, iVecIntArray0.length);
      assertNotNull(iVecIntArray0);
      assertEquals(0, vecInt0.size());
      assertTrue(vecInt0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      VecInt vecInt0 = new VecInt(2627);
      assertNotNull(vecInt0);
      assertEquals(0, vecInt0.size());
      assertTrue(vecInt0.isEmpty());
      
      // Undeclared exception!
      vecInt0.sort(0, 2627);
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      VecInt vecInt0 = new VecInt(979);
      assertNotNull(vecInt0);
      assertTrue(vecInt0.isEmpty());
      assertEquals(0, vecInt0.size());
      
      // Undeclared exception!
      try { 
        vecInt0.sort((-5419), 979);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -2220
         //
         verifyException("org.sat4j.core.VecInt", e);
      }
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      VecInt vecInt0 = new VecInt(128);
      assertNotNull(vecInt0);
      assertEquals(0, vecInt0.size());
      assertTrue(vecInt0.isEmpty());
      
      vecInt0.sort(128, 0);
      assertEquals(0, vecInt0.size());
      assertTrue(vecInt0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      int[] intArray0 = new int[5];
      intArray0[3] = 1922;
      VecInt vecInt0 = new VecInt(intArray0);
      assertArrayEquals(new int[] {0, 0, 0, 1922, 0}, intArray0);
      assertEquals(5, intArray0.length);
      assertNotNull(vecInt0);
      assertEquals(0, vecInt0.last());
      assertFalse(vecInt0.isEmpty());
      assertEquals(5, vecInt0.size());
      
      vecInt0.remove(1922);
      assertArrayEquals(new int[] {0, 0, 0, 0, 0}, intArray0);
      assertEquals(5, intArray0.length);
      assertEquals(0, vecInt0.last());
      assertFalse(vecInt0.isEmpty());
      assertEquals(4, vecInt0.size());
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      int[] intArray0 = new int[4];
      intArray0[2] = 5209;
      VecInt vecInt0 = new VecInt(intArray0);
      assertArrayEquals(new int[] {0, 0, 5209, 0}, intArray0);
      assertEquals(4, intArray0.length);
      assertNotNull(vecInt0);
      assertFalse(vecInt0.isEmpty());
      assertEquals(4, vecInt0.size());
      assertEquals(0, vecInt0.last());
      
      int int0 = vecInt0.containsAt(5209, (-1));
      assertArrayEquals(new int[] {0, 0, 5209, 0}, intArray0);
      assertEquals(4, intArray0.length);
      assertEquals(2, int0);
      assertFalse(vecInt0.isEmpty());
      assertEquals(4, vecInt0.size());
      assertEquals(0, vecInt0.last());
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      int[] intArray0 = new int[4];
      VecInt vecInt0 = new VecInt(intArray0);
      assertArrayEquals(new int[] {0, 0, 0, 0}, intArray0);
      assertEquals(4, intArray0.length);
      assertNotNull(vecInt0);
      assertFalse(vecInt0.isEmpty());
      assertEquals(4, vecInt0.size());
      assertEquals(0, vecInt0.last());
      
      int int0 = vecInt0.containsAt(5209, (-1));
      assertArrayEquals(new int[] {0, 0, 0, 0}, intArray0);
      assertEquals(4, intArray0.length);
      assertEquals((-1), int0);
      assertFalse(vecInt0.isEmpty());
      assertEquals(4, vecInt0.size());
      assertEquals(0, vecInt0.last());
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      VecInt vecInt0 = new VecInt();
      assertNotNull(vecInt0);
      assertEquals(0, vecInt0.size());
      assertTrue(vecInt0.isEmpty());
      
      // Undeclared exception!
      try { 
        vecInt0.containsAt(2528, (-547));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -546
         //
         verifyException("org.sat4j.core.VecInt", e);
      }
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      VecInt vecInt0 = new VecInt();
      assertNotNull(vecInt0);
      assertEquals(0, vecInt0.size());
      assertTrue(vecInt0.isEmpty());
      
      int int0 = vecInt0.containsAt(1, 333);
      assertEquals((-1), int0);
      assertEquals(0, vecInt0.size());
      assertTrue(vecInt0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      VecInt vecInt0 = new VecInt(2226, 0);
      assertNotNull(vecInt0);
      assertEquals(2226, vecInt0.size());
      assertEquals(0, vecInt0.last());
      assertFalse(vecInt0.isEmpty());
      
      vecInt0.ensure(0);
      assertEquals(2226, vecInt0.size());
      assertEquals(0, vecInt0.last());
      assertFalse(vecInt0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      VecInt vecInt0 = new VecInt();
      assertNotNull(vecInt0);
      assertEquals(0, vecInt0.size());
      assertTrue(vecInt0.isEmpty());
      
      int int0 = vecInt0.size();
      assertEquals(0, int0);
      assertEquals(0, vecInt0.size());
      assertTrue(vecInt0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      VecInt vecInt0 = new VecInt();
      assertNotNull(vecInt0);
      assertEquals(0, vecInt0.size());
      assertTrue(vecInt0.isEmpty());
      
      // Undeclared exception!
      try { 
        vecInt0.copyTo((IVecInt) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      VecInt vecInt0 = new VecInt();
      assertNotNull(vecInt0);
      assertEquals(0, vecInt0.size());
      assertTrue(vecInt0.isEmpty());
      
      // Undeclared exception!
      try { 
        vecInt0.get(89);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      VecInt vecInt0 = new VecInt(2226, 0);
      assertNotNull(vecInt0);
      assertFalse(vecInt0.isEmpty());
      assertEquals(2226, vecInt0.size());
      assertEquals(0, vecInt0.last());
      
      Comparator<Integer> comparator0 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn((-2152), 2, (-2152), 2, 0).when(comparator0).compare(anyInt() , anyInt());
      // Undeclared exception!
      vecInt0.sort(comparator0);
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      int[] intArray0 = new int[2];
      VecInt vecInt0 = new VecInt(intArray0);
      assertArrayEquals(new int[] {0, 0}, intArray0);
      assertEquals(2, intArray0.length);
      assertNotNull(vecInt0);
      assertEquals(0, vecInt0.last());
      assertFalse(vecInt0.isEmpty());
      assertEquals(2, vecInt0.size());
      
      Comparator<Integer> comparator0 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn((-1163)).when(comparator0).compare(anyInt() , anyInt());
      vecInt0.sort(comparator0);
      assertArrayEquals(new int[] {0, 0}, intArray0);
      assertEquals(2, intArray0.length);
      assertEquals(0, vecInt0.last());
      assertFalse(vecInt0.isEmpty());
      assertEquals(2, vecInt0.size());
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      VecInt vecInt0 = new VecInt(1643, 1643);
      assertNotNull(vecInt0);
      assertEquals(1643, vecInt0.size());
      assertEquals(1643, vecInt0.last());
      assertFalse(vecInt0.isEmpty());
      
      Comparator<Integer> comparator0 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        vecInt0.selectionSort((-3517), 1643, comparator0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      int[] intArray0 = new int[10];
      VecInt vecInt0 = new VecInt(intArray0);
      assertArrayEquals(new int[] {0, 0, 0, 0, 0, 0, 0, 0, 0, 0}, intArray0);
      assertEquals(10, intArray0.length);
      assertNotNull(vecInt0);
      assertFalse(vecInt0.isEmpty());
      assertEquals(0, vecInt0.last());
      assertEquals(10, vecInt0.size());
      
      IVecInt[] iVecIntArray0 = vecInt0.subset(7);
      assertArrayEquals(new int[] {0, 0, 0, 0, 0, 0, 0, 0, 0, 0}, intArray0);
      assertEquals(10, intArray0.length);
      assertEquals(120, iVecIntArray0.length);
      assertNotNull(iVecIntArray0);
      assertFalse(vecInt0.isEmpty());
      assertEquals(0, vecInt0.last());
      assertEquals(10, vecInt0.size());
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      VecInt vecInt0 = new VecInt();
      assertNotNull(vecInt0);
      assertEquals(0, vecInt0.size());
      assertTrue(vecInt0.isEmpty());
      
      boolean boolean0 = vecInt0.isEmpty();
      assertTrue(boolean0);
      assertEquals(0, vecInt0.size());
      assertTrue(vecInt0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      VecInt vecInt0 = new VecInt(15, 15);
      assertNotNull(vecInt0);
      assertEquals(15, vecInt0.last());
      assertFalse(vecInt0.isEmpty());
      assertEquals(15, vecInt0.size());
      
      boolean boolean0 = vecInt0.isEmpty();
      assertFalse(boolean0);
      assertEquals(15, vecInt0.last());
      assertFalse(vecInt0.isEmpty());
      assertEquals(15, vecInt0.size());
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      int[] intArray0 = new int[8];
      VecInt vecInt0 = new VecInt(intArray0);
      assertArrayEquals(new int[] {0, 0, 0, 0, 0, 0, 0, 0}, intArray0);
      assertEquals(8, intArray0.length);
      assertNotNull(vecInt0);
      assertFalse(vecInt0.isEmpty());
      assertEquals(0, vecInt0.last());
      assertEquals(8, vecInt0.size());
      
      VecInt vecInt1 = new VecInt(1896, 1896);
      assertNotNull(vecInt1);
      assertFalse(vecInt1.equals((Object)vecInt0));
      assertEquals(1896, vecInt1.size());
      assertEquals(1896, vecInt1.last());
      assertFalse(vecInt1.isEmpty());
      
      boolean boolean0 = vecInt0.isSubsetOf(vecInt1);
      assertArrayEquals(new int[] {0, 0, 0, 0, 0, 0, 0, 0}, intArray0);
      assertEquals(8, intArray0.length);
      assertFalse(boolean0);
      assertFalse(vecInt0.equals((Object)vecInt1));
      assertFalse(vecInt1.equals((Object)vecInt0));
      assertNotSame(vecInt0, vecInt1);
      assertNotSame(vecInt1, vecInt0);
      assertFalse(vecInt0.isEmpty());
      assertEquals(0, vecInt0.last());
      assertEquals(8, vecInt0.size());
      assertEquals(1896, vecInt1.size());
      assertEquals(1896, vecInt1.last());
      assertFalse(vecInt1.isEmpty());
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      int[] intArray0 = new int[2];
      VecInt vecInt0 = new VecInt(intArray0);
      assertArrayEquals(new int[] {0, 0}, intArray0);
      assertEquals(2, intArray0.length);
      assertNotNull(vecInt0);
      assertFalse(vecInt0.isEmpty());
      assertEquals(2, vecInt0.size());
      assertEquals(0, vecInt0.last());
      
      VecInt vecInt1 = new VecInt(1436, 1436);
      assertNotNull(vecInt1);
      assertFalse(vecInt1.equals((Object)vecInt0));
      assertFalse(vecInt1.isEmpty());
      assertEquals(1436, vecInt1.size());
      assertEquals(1436, vecInt1.last());
      
      boolean boolean0 = vecInt1.isSubsetOf(vecInt0);
      assertArrayEquals(new int[] {0, 0}, intArray0);
      assertEquals(2, intArray0.length);
      assertFalse(boolean0);
      assertFalse(vecInt0.equals((Object)vecInt1));
      assertFalse(vecInt1.equals((Object)vecInt0));
      assertNotSame(vecInt0, vecInt1);
      assertNotSame(vecInt1, vecInt0);
      assertFalse(vecInt0.isEmpty());
      assertEquals(2, vecInt0.size());
      assertEquals(0, vecInt0.last());
      assertFalse(vecInt1.isEmpty());
      assertEquals(1436, vecInt1.size());
      assertEquals(1436, vecInt1.last());
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      VecInt vecInt0 = new VecInt(4, 4);
      assertNotNull(vecInt0);
      assertEquals(4, vecInt0.last());
      assertFalse(vecInt0.isEmpty());
      assertEquals(4, vecInt0.size());
      
      VecInt vecInt1 = new VecInt(4);
      assertNotNull(vecInt1);
      assertFalse(vecInt1.equals((Object)vecInt0));
      assertTrue(vecInt1.isEmpty());
      assertEquals(0, vecInt1.size());
      
      boolean boolean0 = vecInt0.isSubsetOf(vecInt1);
      assertTrue(boolean0);
      assertFalse(vecInt0.equals((Object)vecInt1));
      assertFalse(vecInt1.equals((Object)vecInt0));
      assertNotSame(vecInt0, vecInt1);
      assertNotSame(vecInt1, vecInt0);
      assertEquals(4, vecInt0.last());
      assertFalse(vecInt0.isEmpty());
      assertEquals(4, vecInt0.size());
      assertTrue(vecInt1.isEmpty());
      assertEquals(0, vecInt1.size());
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      VecInt vecInt0 = new VecInt(4, 4);
      assertNotNull(vecInt0);
      assertEquals(4, vecInt0.size());
      assertFalse(vecInt0.isEmpty());
      assertEquals(4, vecInt0.last());
      
      boolean boolean0 = vecInt0.isSubsetOf(vecInt0);
      assertTrue(boolean0);
      assertEquals(4, vecInt0.size());
      assertFalse(vecInt0.isEmpty());
      assertEquals(4, vecInt0.last());
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      VecInt vecInt0 = new VecInt();
      assertNotNull(vecInt0);
      assertEquals(0, vecInt0.size());
      assertTrue(vecInt0.isEmpty());
      
      // Undeclared exception!
      try { 
        vecInt0.hashCode();
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // / by zero
         //
         verifyException("org.sat4j.core.VecInt", e);
      }
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      int[] intArray0 = new int[9];
      VecInt vecInt0 = new VecInt(intArray0);
      assertArrayEquals(new int[] {0, 0, 0, 0, 0, 0, 0, 0, 0}, intArray0);
      assertEquals(9, intArray0.length);
      assertNotNull(vecInt0);
      assertEquals(9, vecInt0.size());
      assertEquals(0, vecInt0.last());
      assertFalse(vecInt0.isEmpty());
      
      ReadOnlyVecInt readOnlyVecInt0 = new ReadOnlyVecInt(vecInt0);
      assertArrayEquals(new int[] {0, 0, 0, 0, 0, 0, 0, 0, 0}, intArray0);
      assertEquals(9, intArray0.length);
      assertNotNull(readOnlyVecInt0);
      assertEquals(9, vecInt0.size());
      assertEquals(0, vecInt0.last());
      assertFalse(vecInt0.isEmpty());
      assertFalse(readOnlyVecInt0.isEmpty());
      assertEquals(9, readOnlyVecInt0.size());
      
      boolean boolean0 = vecInt0.equals(readOnlyVecInt0);
      assertArrayEquals(new int[] {0, 0, 0, 0, 0, 0, 0, 0, 0}, intArray0);
      assertEquals(9, intArray0.length);
      assertTrue(boolean0);
      assertEquals(9, vecInt0.size());
      assertEquals(0, vecInt0.last());
      assertFalse(vecInt0.isEmpty());
      assertFalse(readOnlyVecInt0.isEmpty());
      assertEquals(9, readOnlyVecInt0.size());
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      int[] intArray0 = new int[9];
      VecInt vecInt0 = new VecInt(intArray0);
      assertArrayEquals(new int[] {0, 0, 0, 0, 0, 0, 0, 0, 0}, intArray0);
      assertEquals(9, intArray0.length);
      assertNotNull(vecInt0);
      assertFalse(vecInt0.isEmpty());
      assertEquals(9, vecInt0.size());
      assertEquals(0, vecInt0.last());
      
      VecInt vecInt1 = new VecInt();
      assertNotNull(vecInt1);
      assertFalse(vecInt1.equals((Object)vecInt0));
      assertTrue(vecInt1.isEmpty());
      assertEquals(0, vecInt1.size());
      
      boolean boolean0 = vecInt0.equals(vecInt1);
      assertArrayEquals(new int[] {0, 0, 0, 0, 0, 0, 0, 0, 0}, intArray0);
      assertEquals(9, intArray0.length);
      assertFalse(boolean0);
      assertFalse(vecInt0.equals((Object)vecInt1));
      assertFalse(vecInt1.equals((Object)vecInt0));
      assertNotSame(vecInt0, vecInt1);
      assertNotSame(vecInt1, vecInt0);
      assertFalse(vecInt0.isEmpty());
      assertEquals(9, vecInt0.size());
      assertEquals(0, vecInt0.last());
      assertTrue(vecInt1.isEmpty());
      assertEquals(0, vecInt1.size());
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      VecInt vecInt0 = new VecInt();
      assertNotNull(vecInt0);
      assertEquals(0, vecInt0.size());
      assertTrue(vecInt0.isEmpty());
      
      boolean boolean0 = vecInt0.equals((Object) null);
      assertFalse(boolean0);
      assertEquals(0, vecInt0.size());
      assertTrue(vecInt0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      VecInt vecInt0 = new VecInt();
      assertNotNull(vecInt0);
      assertEquals(0, vecInt0.size());
      assertTrue(vecInt0.isEmpty());
      
      vecInt0.sortUnique();
      assertEquals(0, vecInt0.size());
      assertTrue(vecInt0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      VecInt vecInt0 = new VecInt(1016, 2456);
      assertNotNull(vecInt0);
      assertEquals(2456, vecInt0.last());
      assertFalse(vecInt0.isEmpty());
      assertEquals(1016, vecInt0.size());
      
      vecInt0.set(23, (-1819));
      assertEquals(2456, vecInt0.last());
      assertFalse(vecInt0.isEmpty());
      assertEquals(1016, vecInt0.size());
      
      vecInt0.sortUnique();
      assertEquals(2456, vecInt0.last());
      assertFalse(vecInt0.isEmpty());
      assertEquals(2, vecInt0.size());
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      VecInt vecInt0 = new VecInt(4, 4);
      assertNotNull(vecInt0);
      assertEquals(4, vecInt0.last());
      assertFalse(vecInt0.isEmpty());
      assertEquals(4, vecInt0.size());
      
      VecInt vecInt1 = new VecInt(494, 494);
      assertNotNull(vecInt1);
      assertFalse(vecInt1.equals((Object)vecInt0));
      assertFalse(vecInt1.isEmpty());
      assertEquals(494, vecInt1.size());
      assertEquals(494, vecInt1.last());
      
      vecInt1.pushAll(vecInt0);
      assertFalse(vecInt0.equals((Object)vecInt1));
      assertFalse(vecInt1.equals((Object)vecInt0));
      assertNotSame(vecInt0, vecInt1);
      assertNotSame(vecInt1, vecInt0);
      assertEquals(4, vecInt0.last());
      assertFalse(vecInt0.isEmpty());
      assertEquals(4, vecInt0.size());
      assertEquals(498, vecInt1.size());
      assertFalse(vecInt1.isEmpty());
      assertEquals(4, vecInt1.last());
      
      vecInt1.sortUnique();
      assertFalse(vecInt1.equals((Object)vecInt0));
      assertNotSame(vecInt1, vecInt0);
      assertEquals(2, vecInt1.size());
      assertFalse(vecInt1.isEmpty());
      assertEquals(494, vecInt1.last());
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      VecInt vecInt0 = new VecInt(2675, 1);
      assertNotNull(vecInt0);
      assertEquals(2675, vecInt0.size());
      assertEquals(1, vecInt0.last());
      assertFalse(vecInt0.isEmpty());
      
      // Undeclared exception!
      vecInt0.sortUnique();
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      VecInt vecInt0 = new VecInt(993, 993);
      assertNotNull(vecInt0);
      assertFalse(vecInt0.isEmpty());
      assertEquals(993, vecInt0.size());
      assertEquals(993, vecInt0.last());
      
      String string0 = vecInt0.toString();
      assertNotNull(string0);
      assertFalse(vecInt0.isEmpty());
      assertEquals(993, vecInt0.size());
      assertEquals(993, vecInt0.last());
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      VecInt vecInt0 = new VecInt();
      assertNotNull(vecInt0);
      assertTrue(vecInt0.isEmpty());
      assertEquals(0, vecInt0.size());
      
      String string0 = vecInt0.toString();
      assertNotNull(string0);
      assertEquals("", string0);
      assertTrue(vecInt0.isEmpty());
      assertEquals(0, vecInt0.size());
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      int[] intArray0 = new int[2];
      VecInt vecInt0 = new VecInt(intArray0);
      assertArrayEquals(new int[] {0, 0}, intArray0);
      assertEquals(2, intArray0.length);
      assertNotNull(vecInt0);
      assertEquals(0, vecInt0.last());
      assertFalse(vecInt0.isEmpty());
      assertEquals(2, vecInt0.size());
      
      vecInt0.insertFirst(1768);
      assertArrayEquals(new int[] {0, 0}, intArray0);
      assertEquals(2, intArray0.length);
      assertEquals(0, vecInt0.last());
      assertFalse(vecInt0.isEmpty());
      assertEquals(3, vecInt0.size());
      
      vecInt0.sortUnique();
      assertArrayEquals(new int[] {0, 0}, intArray0);
      assertEquals(2, intArray0.length);
      assertFalse(vecInt0.isEmpty());
      assertEquals(2, vecInt0.size());
      assertEquals(1768, vecInt0.last());
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      VecInt vecInt0 = new VecInt(705, (-108));
      assertNotNull(vecInt0);
      assertEquals((-108), vecInt0.last());
      assertFalse(vecInt0.isEmpty());
      assertEquals(705, vecInt0.size());
      
      int int0 = vecInt0.containsAt((-108));
      assertEquals(0, int0);
      assertEquals((-108), vecInt0.last());
      assertFalse(vecInt0.isEmpty());
      assertEquals(705, vecInt0.size());
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      VecInt vecInt0 = new VecInt();
      assertNotNull(vecInt0);
      assertTrue(vecInt0.isEmpty());
      assertEquals(0, vecInt0.size());
      
      vecInt0.unsafePush(966);
      assertEquals(966, vecInt0.last());
      assertFalse(vecInt0.isEmpty());
      assertEquals(1, vecInt0.size());
      
      int int0 = vecInt0.indexOf(966);
      assertEquals(0, int0);
      assertEquals(966, vecInt0.last());
      assertFalse(vecInt0.isEmpty());
      assertEquals(1, vecInt0.size());
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      VecInt vecInt0 = new VecInt(529, 529);
      assertNotNull(vecInt0);
      assertFalse(vecInt0.isEmpty());
      assertEquals(529, vecInt0.size());
      assertEquals(529, vecInt0.last());
      
      boolean boolean0 = vecInt0.contains(529);
      assertTrue(boolean0);
      assertFalse(vecInt0.isEmpty());
      assertEquals(529, vecInt0.size());
      assertEquals(529, vecInt0.last());
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      VecInt vecInt0 = new VecInt(5215, 5215);
      boolean boolean0 = vecInt0.contains(1534);
      assertEquals(5215, vecInt0.size());
      assertFalse(boolean0);
      assertEquals(5215, vecInt0.last());
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      VecInt vecInt0 = new VecInt(4, 4);
      // Undeclared exception!
      try { 
        vecInt0.set((-2292), 4);
        fail("Expecting exception: AssertionError");
      
      } catch(AssertionError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      VecInt vecInt0 = new VecInt(4);
      // Undeclared exception!
      try { 
        vecInt0.set(3017, (-2292));
        fail("Expecting exception: AssertionError");
      
      } catch(AssertionError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      VecInt vecInt0 = new VecInt();
      vecInt0.growTo(979, 979);
      Comparator<Integer> comparator0 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn(979, 979, 979, (-553), 979).when(comparator0).compare(anyInt() , anyInt());
      vecInt0.sort(comparator0);
      assertFalse(vecInt0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      VecInt vecInt0 = new VecInt();
      ReadOnlyVecInt readOnlyVecInt0 = new ReadOnlyVecInt(vecInt0);
      // Undeclared exception!
      try { 
        vecInt0.moveTo2(readOnlyVecInt0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // org.sat4j.core.ReadOnlyVecInt cannot be cast to org.sat4j.core.VecInt
         //
         verifyException("org.sat4j.core.VecInt", e);
      }
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      VecInt vecInt0 = new VecInt();
      vecInt0.unsafePush(17);
      vecInt0.clone();
      assertEquals(1, vecInt0.size());
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      VecInt vecInt0 = new VecInt();
      // Undeclared exception!
      try { 
        vecInt0.copyTo((int[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      VecInt vecInt0 = new VecInt();
      // Undeclared exception!
      try { 
        vecInt0.moveTo((int[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      VecInt vecInt0 = new VecInt(4);
      // Undeclared exception!
      try { 
        vecInt0.moveTo(4, (int[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      VecInt vecInt0 = new VecInt(3176);
      vecInt0.sort();
      assertEquals(0, vecInt0.size());
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      int[] intArray0 = new int[10];
      VecInt vecInt0 = new VecInt(intArray0);
      vecInt0.moveTo((IVecInt) vecInt0);
      assertTrue(vecInt0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      VecInt vecInt0 = new VecInt();
      int[] intArray0 = vecInt0.toArray();
      assertEquals(5, intArray0.length);
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      int[] intArray0 = new int[1];
      VecInt vecInt0 = new VecInt(intArray0);
      vecInt0.clear();
      assertEquals(0, vecInt0.size());
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      VecInt vecInt0 = new VecInt(4, 4);
      // Undeclared exception!
      try { 
        vecInt0.moveTo((-1), 4);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 4
         //
         verifyException("org.sat4j.core.VecInt", e);
      }
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      VecInt vecInt0 = new VecInt();
      // Undeclared exception!
      try { 
        vecInt0.delete(2020);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 2020
         //
         verifyException("org.sat4j.core.VecInt", e);
      }
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      VecInt vecInt0 = new VecInt(1, 1);
      IVecInt[] iVecIntArray0 = vecInt0.subset(1);
      assertEquals(1, vecInt0.size());
      assertEquals(1, iVecIntArray0.length);
      assertEquals(1, vecInt0.last());
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      VecInt vecInt0 = new VecInt();
      // Undeclared exception!
      try { 
        vecInt0.unsafeGet(4022);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 4022
         //
         verifyException("org.sat4j.core.VecInt", e);
      }
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      VecInt vecInt0 = new VecInt();
      IVecInt iVecInt0 = vecInt0.pop();
      // Undeclared exception!
      try { 
        vecInt0.copyTo(iVecInt0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.core.VecInt", e);
      }
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      VecInt vecInt0 = new VecInt();
      IVecInt iVecInt0 = vecInt0.clone();
      assertEquals(0, iVecInt0.size());
      assertEquals(0, vecInt0.size());
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      VecInt vecInt0 = new VecInt(1131, 1131);
      int int0 = vecInt0.last();
      assertEquals(1131, int0);
      assertEquals(1131, vecInt0.size());
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      VecInt vecInt0 = new VecInt();
      IteratorInt iteratorInt0 = vecInt0.iterator();
      assertNotNull(iteratorInt0);
  }
}
