/*
 * This file was automatically generated by EvoSuite
 * Tue Feb 19 15:55:31 GMT 2019
 */

package org.sat4j.minisat.orders;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.File;
import java.io.PrintWriter;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockPrintWriter;
import org.junit.runner.RunWith;
import org.sat4j.minisat.constraints.cnf.Lits;
import org.sat4j.minisat.core.Heap;
import org.sat4j.minisat.core.ILits;
import org.sat4j.minisat.core.IPhaseSelectionStrategy;
import org.sat4j.minisat.orders.LevelBasedVarOrderHeap;
import org.sat4j.minisat.orders.NegativeLiteralSelectionStrategy;
import org.sat4j.minisat.orders.PhaseInLastLearnedClauseSelectionStrategy;
import org.sat4j.minisat.orders.PureOrder;
import org.sat4j.minisat.orders.RSATPhaseSelectionStrategy;
import org.sat4j.minisat.orders.VarOrderHeap;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class VarOrderHeap_ESTest extends VarOrderHeap_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      PureOrder pureOrder0 = new PureOrder(0);
      pureOrder0.setVarDecay(0);
      pureOrder0.varDecayActivity();
      assertEquals(0, pureOrder0.numberOfInterestingVariables());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      PureOrder pureOrder0 = new PureOrder();
      Lits lits0 = new Lits();
      pureOrder0.setLits(lits0);
      pureOrder0.init();
      pureOrder0.undo(0);
      pureOrder0.updateVar(1);
      assertEquals(0, pureOrder0.numberOfInterestingVariables());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      PureOrder pureOrder0 = new PureOrder(2);
      File file0 = MockFile.createTempFile("/L %4y4", "/L %4y4");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(file0);
      pureOrder0.printStat(mockPrintWriter0, "/L %4y4");
      assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder0.toString());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      NegativeLiteralSelectionStrategy negativeLiteralSelectionStrategy0 = new NegativeLiteralSelectionStrategy();
      VarOrderHeap varOrderHeap0 = new VarOrderHeap(negativeLiteralSelectionStrategy0);
      varOrderHeap0.updateActivity(0);
      double double0 = varOrderHeap0.varActivity(1);
      assertEquals(1.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      PureOrder pureOrder0 = new PureOrder();
      Lits lits0 = new Lits();
      pureOrder0.setLits(lits0);
      pureOrder0.init();
      double double0 = pureOrder0.varActivity(0);
      assertEquals((-1.0), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      PureOrder pureOrder0 = new PureOrder();
      Lits lits0 = new Lits();
      NegativeLiteralSelectionStrategy negativeLiteralSelectionStrategy0 = new NegativeLiteralSelectionStrategy();
      pureOrder0.setPhaseSelectionStrategy(negativeLiteralSelectionStrategy0);
      pureOrder0.setLits(lits0);
      pureOrder0.init();
      pureOrder0.undo(0);
      int int0 = pureOrder0.select();
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      PureOrder pureOrder0 = new PureOrder();
      Lits lits0 = new Lits();
      lits0.getFromPool(0);
      pureOrder0.setLits(lits0);
      ILits iLits0 = pureOrder0.getVocabulary();
      assertEquals(0, iLits0.nVars());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      PureOrder pureOrder0 = new PureOrder();
      Lits lits0 = new Lits();
      pureOrder0.setLits(lits0);
      ILits iLits0 = pureOrder0.getVocabulary();
      assertEquals(0, iLits0.nVars());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      PureOrder pureOrder0 = new PureOrder();
      Lits lits0 = new Lits();
      lits0.ensurePool(13);
      pureOrder0.setLits(lits0);
      ILits iLits0 = pureOrder0.getVocabulary();
      assertSame(iLits0, lits0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      LevelBasedVarOrderHeap levelBasedVarOrderHeap0 = new LevelBasedVarOrderHeap((IPhaseSelectionStrategy) null);
      IPhaseSelectionStrategy iPhaseSelectionStrategy0 = levelBasedVarOrderHeap0.getPhaseSelectionStrategy();
      assertNull(iPhaseSelectionStrategy0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      RSATPhaseSelectionStrategy rSATPhaseSelectionStrategy0 = new RSATPhaseSelectionStrategy();
      VarOrderHeap varOrderHeap0 = new VarOrderHeap(rSATPhaseSelectionStrategy0);
      varOrderHeap0.activity = null;
      // Undeclared exception!
      try { 
        varOrderHeap0.varActivity((-1495));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.minisat.orders.VarOrderHeap", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      VarOrderHeap varOrderHeap0 = new VarOrderHeap();
      // Undeclared exception!
      try { 
        varOrderHeap0.varActivity((-2147483647));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1073741824
         //
         verifyException("org.sat4j.minisat.orders.VarOrderHeap", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      LevelBasedVarOrderHeap levelBasedVarOrderHeap0 = new LevelBasedVarOrderHeap((IPhaseSelectionStrategy) null);
      // Undeclared exception!
      try { 
        levelBasedVarOrderHeap0.updateVarAtDecisionLevel(0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.minisat.orders.VarOrderHeap", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      VarOrderHeap varOrderHeap0 = new VarOrderHeap();
      // Undeclared exception!
      try { 
        varOrderHeap0.updateVar(0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.minisat.orders.PhaseInLastLearnedClauseSelectionStrategy", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      LevelBasedVarOrderHeap levelBasedVarOrderHeap0 = new LevelBasedVarOrderHeap();
      // Undeclared exception!
      try { 
        levelBasedVarOrderHeap0.updateVar((-977));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -489
         //
         verifyException("org.sat4j.minisat.orders.VarOrderHeap", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      VarOrderHeap varOrderHeap0 = new VarOrderHeap();
      varOrderHeap0.activity = null;
      // Undeclared exception!
      try { 
        varOrderHeap0.updateActivity(106);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.minisat.orders.VarOrderHeap", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      VarOrderHeap varOrderHeap0 = new VarOrderHeap();
      // Undeclared exception!
      try { 
        varOrderHeap0.updateActivity((-42));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -42
         //
         verifyException("org.sat4j.minisat.orders.VarOrderHeap", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      VarOrderHeap varOrderHeap0 = new VarOrderHeap();
      // Undeclared exception!
      try { 
        varOrderHeap0.undo(0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.minisat.orders.VarOrderHeap", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      PureOrder pureOrder0 = new PureOrder();
      Lits lits0 = new Lits();
      pureOrder0.setLits(lits0);
      pureOrder0.init();
      // Undeclared exception!
      try { 
        pureOrder0.undo((-2993));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -2993
         //
         verifyException("org.sat4j.core.VecInt", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      VarOrderHeap varOrderHeap0 = new VarOrderHeap();
      // Undeclared exception!
      try { 
        varOrderHeap0.select();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.minisat.orders.VarOrderHeap", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      PureOrder pureOrder0 = new PureOrder();
      Lits lits0 = new Lits();
      pureOrder0.setLits(lits0);
      pureOrder0.init();
      pureOrder0.undo(1);
      // Undeclared exception!
      try { 
        pureOrder0.select();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1
         //
         verifyException("org.sat4j.minisat.orders.AbstractPhaserecordingSelectionStrategy", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      PureOrder pureOrder0 = new PureOrder();
      Lits lits0 = new Lits();
      lits0.ensurePool(65535);
      pureOrder0.setLits(lits0);
      // Undeclared exception!
      pureOrder0.init();
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      VarOrderHeap varOrderHeap0 = new VarOrderHeap();
      // Undeclared exception!
      try { 
        varOrderHeap0.init();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.minisat.orders.VarOrderHeap", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      LevelBasedVarOrderHeap levelBasedVarOrderHeap0 = new LevelBasedVarOrderHeap();
      Lits lits0 = new Lits();
      int[] intArray0 = new int[4];
      intArray0[0] = 1774;
      levelBasedVarOrderHeap0.addLevel(intArray0);
      levelBasedVarOrderHeap0.setLits(lits0);
      // Undeclared exception!
      try { 
        levelBasedVarOrderHeap0.init();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1774
         //
         verifyException("org.sat4j.minisat.orders.LevelBasedVarOrderHeap", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      LevelBasedVarOrderHeap levelBasedVarOrderHeap0 = new LevelBasedVarOrderHeap((IPhaseSelectionStrategy) null);
      // Undeclared exception!
      try { 
        levelBasedVarOrderHeap0.assignLiteral(0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.minisat.orders.VarOrderHeap", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      PureOrder pureOrder0 = new PureOrder();
      Lits lits0 = new Lits();
      lits0.ensurePool(13);
      pureOrder0.setLits(lits0);
      pureOrder0.init();
      int int0 = pureOrder0.numberOfInterestingVariables();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      PureOrder pureOrder0 = new PureOrder();
      Lits lits0 = new Lits();
      pureOrder0.setLits(lits0);
      pureOrder0.init();
      pureOrder0.updateVar(1);
      assertEquals(20, pureOrder0.getPeriod());
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      PureOrder pureOrder0 = new PureOrder();
      Lits lits0 = new Lits();
      pureOrder0.setLits(lits0);
      pureOrder0.init();
      pureOrder0.undo(0);
      pureOrder0.undo(0);
      assertEquals(0, pureOrder0.numberOfInterestingVariables());
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      PureOrder pureOrder0 = new PureOrder();
      Lits lits0 = new Lits();
      pureOrder0.setLits(lits0);
      pureOrder0.init();
      pureOrder0.undo(0);
      pureOrder0.updateVar(0);
      pureOrder0.updateVar(0);
      int int0 = pureOrder0.select();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      PureOrder pureOrder0 = new PureOrder();
      Lits lits0 = new Lits();
      lits0.satisfies(0);
      pureOrder0.setLits(lits0);
      pureOrder0.init();
      pureOrder0.undo(0);
      int int0 = pureOrder0.select();
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Lits lits0 = new Lits();
      PureOrder pureOrder0 = new PureOrder();
      lits0.getFromPool(1);
      pureOrder0.setLits(lits0);
      pureOrder0.init();
      int int0 = pureOrder0.select();
      assertEquals(3, int0);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      NegativeLiteralSelectionStrategy negativeLiteralSelectionStrategy0 = new NegativeLiteralSelectionStrategy();
      VarOrderHeap varOrderHeap0 = new VarOrderHeap(negativeLiteralSelectionStrategy0);
      String string0 = varOrderHeap0.toString();
      assertEquals("VSIDS like heuristics from MiniSAT using a heap negative phase selection", string0);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      LevelBasedVarOrderHeap levelBasedVarOrderHeap0 = new LevelBasedVarOrderHeap();
      double[] doubleArray0 = levelBasedVarOrderHeap0.getVariableHeuristics();
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      PureOrder pureOrder0 = new PureOrder();
      pureOrder0.updateVarAtDecisionLevel(45);
      assertEquals(20, pureOrder0.getPeriod());
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      PureOrder pureOrder0 = new PureOrder();
      double[] doubleArray0 = new double[13];
      Heap heap0 = pureOrder0.createHeap(doubleArray0);
      assertTrue(heap0.empty());
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      PureOrder pureOrder0 = new PureOrder();
      ILits iLits0 = pureOrder0.getVocabulary();
      assertNull(iLits0);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      PureOrder pureOrder0 = new PureOrder();
      pureOrder0.assignLiteral((-2317));
      assertEquals(0, pureOrder0.numberOfInterestingVariables());
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      PureOrder pureOrder0 = new PureOrder();
      double double0 = pureOrder0.varActivity(0);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      PureOrder pureOrder0 = new PureOrder();
      PhaseInLastLearnedClauseSelectionStrategy phaseInLastLearnedClauseSelectionStrategy0 = (PhaseInLastLearnedClauseSelectionStrategy)pureOrder0.getPhaseSelectionStrategy();
      assertEquals("phase appearing in latest learned clause", phaseInLastLearnedClauseSelectionStrategy0.toString());
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      PureOrder pureOrder0 = new PureOrder(0);
      pureOrder0.varDecayActivity();
      assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder0.toString());
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      LevelBasedVarOrderHeap levelBasedVarOrderHeap0 = new LevelBasedVarOrderHeap();
      // Undeclared exception!
      try { 
        levelBasedVarOrderHeap0.printStat((PrintWriter) null, "Level and activity based heuristics using a heap phase appearing in latest learned clause");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.minisat.orders.VarOrderHeap", e);
      }
  }
}
