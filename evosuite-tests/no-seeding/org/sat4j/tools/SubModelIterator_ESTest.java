/*
 * This file was automatically generated by EvoSuite
 * Mon Feb 18 01:27:05 GMT 2019
 */

package org.sat4j.tools;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;
import org.sat4j.LightFactory;
import org.sat4j.core.ASolverFactory;
import org.sat4j.core.VecInt;
import org.sat4j.minisat.constraints.CardinalityDataStructureYanMax;
import org.sat4j.minisat.core.Solver;
import org.sat4j.specs.ISolver;
import org.sat4j.specs.IVecInt;
import org.sat4j.tools.AbstractMinimalModel;
import org.sat4j.tools.ClausalCardinalitiesDecorator;
import org.sat4j.tools.DimacsOutputSolver;
import org.sat4j.tools.DimacsStringSolver;
import org.sat4j.tools.LexicoDecorator;
import org.sat4j.tools.ManyCore;
import org.sat4j.tools.SubModelIterator;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class SubModelIterator_ESTest extends SubModelIterator_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      LightFactory lightFactory0 = LightFactory.instance();
      ISolver iSolver0 = lightFactory0.lightSolver();
      int[] intArray0 = new int[4];
      intArray0[0] = 2476;
      VecInt vecInt0 = new VecInt(intArray0);
      SubModelIterator subModelIterator0 = new SubModelIterator(iSolver0, vecInt0, 0);
      subModelIterator0.findModel((IVecInt) vecInt0);
      subModelIterator0.findModel();
      int[] intArray1 = subModelIterator0.model();
      assertEquals(2476, iSolver0.realNumberOfVariables());
      assertArrayEquals(new int[] {(-2476), 0}, intArray1);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      DimacsStringSolver dimacsStringSolver0 = new DimacsStringSolver(45);
      VecInt vecInt0 = new VecInt(45, 45);
      SubModelIterator subModelIterator0 = new SubModelIterator(dimacsStringSolver0, vecInt0, 45);
      // Undeclared exception!
      try { 
        subModelIterator0.model();
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.tools.AbstractOutputSolver", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      LexicoDecorator<ClausalCardinalitiesDecorator<DimacsOutputSolver>> lexicoDecorator0 = new LexicoDecorator<ClausalCardinalitiesDecorator<DimacsOutputSolver>>((ClausalCardinalitiesDecorator<DimacsOutputSolver>) null);
      VecInt vecInt0 = new VecInt();
      SubModelIterator subModelIterator0 = new SubModelIterator(lexicoDecorator0, vecInt0);
      // Undeclared exception!
      try { 
        subModelIterator0.model();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.tools.SolverDecorator", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      int[] intArray0 = new int[4];
      VecInt vecInt0 = new VecInt(intArray0);
      ASolverFactory<Solver<CardinalityDataStructureYanMax>> aSolverFactory0 = (ASolverFactory<Solver<CardinalityDataStructureYanMax>>) mock(ASolverFactory.class, new ViolatedAssumptionAnswer());
      String[] stringArray0 = new String[0];
      ManyCore<Solver<CardinalityDataStructureYanMax>> manyCore0 = new ManyCore<Solver<CardinalityDataStructureYanMax>>(aSolverFactory0, false, stringArray0);
      SubModelIterator subModelIterator0 = new SubModelIterator(manyCore0, vecInt0, (-1951));
      // Undeclared exception!
      try { 
        subModelIterator0.model();
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      DimacsStringSolver dimacsStringSolver0 = new DimacsStringSolver();
      SubModelIterator subModelIterator0 = null;
      try {
        subModelIterator0 = new SubModelIterator(dimacsStringSolver0, (IVecInt) null, (-1L));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.tools.SubModelIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      LightFactory lightFactory0 = LightFactory.instance();
      ISolver iSolver0 = lightFactory0.lightSolver();
      IVecInt iVecInt0 = AbstractMinimalModel.negativeLiterals(iSolver0);
      SubModelIterator subModelIterator0 = new SubModelIterator(iSolver0, iVecInt0);
      iVecInt0.shrinkTo(2164);
      SubModelIterator subModelIterator1 = null;
      try {
        subModelIterator1 = new SubModelIterator(subModelIterator0, iVecInt0, 2164);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.sat4j.core.VecInt$1", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      DimacsStringSolver dimacsStringSolver0 = new DimacsStringSolver();
      SubModelIterator subModelIterator0 = null;
      try {
        subModelIterator0 = new SubModelIterator(dimacsStringSolver0, (IVecInt) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.tools.SubModelIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      LightFactory lightFactory0 = LightFactory.instance();
      ISolver iSolver0 = lightFactory0.lightSolver();
      int[] intArray0 = new int[4];
      intArray0[2] = (-1951);
      VecInt vecInt0 = new VecInt(intArray0);
      SubModelIterator subModelIterator0 = new SubModelIterator(iSolver0, vecInt0, 0);
      subModelIterator0.findModel((IVecInt) vecInt0);
      subModelIterator0.model();
      assertEquals(2L, subModelIterator0.numberOfModelsFoundSoFar());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      LightFactory lightFactory0 = new LightFactory();
      ISolver iSolver0 = lightFactory0.lightSolver();
      VecInt vecInt0 = new VecInt();
      vecInt0.push(0);
      SubModelIterator subModelIterator0 = new SubModelIterator(iSolver0, vecInt0, 0);
      subModelIterator0.findModel();
      SubModelIterator subModelIterator1 = new SubModelIterator(subModelIterator0, vecInt0, 0);
      // Undeclared exception!
      try { 
        subModelIterator1.model();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 0 is not a valid variable identifier
         //
         verifyException("org.sat4j.minisat.core.Solver", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      LightFactory lightFactory0 = new LightFactory();
      ISolver iSolver0 = lightFactory0.lightSolver();
      VecInt vecInt0 = new VecInt();
      SubModelIterator subModelIterator0 = new SubModelIterator(iSolver0, vecInt0, 0);
      subModelIterator0.findModel();
      subModelIterator0.model();
      assertEquals(2L, subModelIterator0.numberOfModelsFoundSoFar());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      DimacsOutputSolver dimacsOutputSolver0 = new DimacsOutputSolver();
      IVecInt iVecInt0 = VecInt.EMPTY;
      SubModelIterator subModelIterator0 = new SubModelIterator(dimacsOutputSolver0, iVecInt0);
      // Undeclared exception!
      try { 
        subModelIterator0.primeImplicant();
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.tools.SubModelIterator", e);
      }
  }
}
