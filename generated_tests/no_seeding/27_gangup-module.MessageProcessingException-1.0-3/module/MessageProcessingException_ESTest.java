/*
 * This file was automatically generated by EvoSuite
 * Mon Oct 28 15:45:13 GMT 2019
 */

package module;

import org.junit.Test;
import static org.junit.Assert.*;
import java.awt.event.InvocationEvent;
import java.sql.SQLInvalidAuthorizationSpecException;
import module.Message;
import module.MessageFactory;
import module.MessageProcessingException;
import module.Module;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class MessageProcessingException_ESTest extends MessageProcessingException_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      Message message0 = MessageFactory.createUnloadMessage("U?}qSwM;x}");
      InvocationEvent invocationEvent0 = new InvocationEvent((Object) message0.DELIVERED, (Runnable) null, (Runnable) null, true);
      Throwable throwable0 = invocationEvent0.getThrowable();
      MessageProcessingException messageProcessingException0 = new MessageProcessingException((Module) null, message0, "U?}qSwM;x}", throwable0);
      MessageProcessingException messageProcessingException1 = new MessageProcessingException((Module) null, message0, messageProcessingException0);
      assertFalse(messageProcessingException1.equals((Object)messageProcessingException0));
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      Message message0 = MessageFactory.createUnloadMessage("U?}qSwM;x}");
      InvocationEvent invocationEvent0 = new InvocationEvent((Object) message0.TIME_TO_LIVE, (Runnable) null, (Runnable) null, true);
      Throwable throwable0 = invocationEvent0.getThrowable();
      MessageProcessingException messageProcessingException0 = new MessageProcessingException("U?}qSwM;x}", throwable0);
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException();
      MessageProcessingException messageProcessingException0 = new MessageProcessingException(sQLInvalidAuthorizationSpecException0);
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      Message message0 = MessageFactory.createUnloadMessage("U?}qSwM;x}");
      MessageProcessingException messageProcessingException0 = new MessageProcessingException(message0);
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      Message message0 = MessageFactory.createUnloadMessage("U?}qSwM;x}");
      MessageProcessingException messageProcessingException0 = new MessageProcessingException(message0, "mod=");
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      Message message0 = MessageFactory.createUnloadMessage("U?}qSwM;x}");
      InvocationEvent invocationEvent0 = new InvocationEvent((Object) message0.CREATED, (Runnable) null, (Runnable) null, true);
      Throwable throwable0 = invocationEvent0.getThrowable();
      MessageProcessingException messageProcessingException0 = new MessageProcessingException((Module) null, message0, "U?}qSwM;x}", throwable0);
      MessageProcessingException messageProcessingException1 = new MessageProcessingException(message0, messageProcessingException0);
      assertFalse(messageProcessingException1.equals((Object)messageProcessingException0));
  }
}
