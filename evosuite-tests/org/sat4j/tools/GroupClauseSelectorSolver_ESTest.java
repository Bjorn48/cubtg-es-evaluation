/*
 * This file was automatically generated by EvoSuite
 * Tue Feb 19 15:28:41 GMT 2019
 */

package org.sat4j.tools;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.Collection;
import java.util.Map;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;
import org.sat4j.LightFactory;
import org.sat4j.core.ASolverFactory;
import org.sat4j.core.VecInt;
import org.sat4j.minisat.constraints.CardinalityDataStructureYanMin;
import org.sat4j.minisat.core.Solver;
import org.sat4j.opt.MaxSatDecorator;
import org.sat4j.specs.IConstr;
import org.sat4j.specs.ISolver;
import org.sat4j.specs.IVecInt;
import org.sat4j.tools.CheckMUSSolutionListener;
import org.sat4j.tools.ClausalCardinalitiesDecorator;
import org.sat4j.tools.DimacsOutputSolver;
import org.sat4j.tools.DimacsStringSolver;
import org.sat4j.tools.GateTranslator;
import org.sat4j.tools.GroupClauseSelectorSolver;
import org.sat4j.tools.Minimal4CardinalityModel;
import org.sat4j.tools.Minimal4InclusionModel;
import org.sat4j.tools.ModelIterator;
import org.sat4j.tools.ModelIteratorToSATAdapter;
import org.sat4j.tools.NegationDecorator;
import org.sat4j.tools.OptToSatAdapter;
import org.sat4j.tools.SingleSolutionDetector;
import org.sat4j.tools.SolutionCounter;
import org.sat4j.tools.SolutionFoundListener;
import org.sat4j.tools.SubModelIterator;
import org.sat4j.tools.encoding.Policy;
import org.sat4j.tools.encoding.Product;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class GroupClauseSelectorSolver_ESTest extends GroupClauseSelectorSolver_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Minimal4CardinalityModel minimal4CardinalityModel0 = mock(Minimal4CardinalityModel.class, new ViolatedAssumptionAnswer());
      doReturn((IVecInt) null).when(minimal4CardinalityModel0).unsatExplanation();
      GroupClauseSelectorSolver<Minimal4CardinalityModel> groupClauseSelectorSolver0 = new GroupClauseSelectorSolver<Minimal4CardinalityModel>(minimal4CardinalityModel0);
      // Undeclared exception!
      try { 
        groupClauseSelectorSolver0.unsatExplanation();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.tools.GroupClauseSelectorSolver", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      ISolver iSolver0 = mock(ISolver.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(iSolver0).nextFreeVarId(anyBoolean());
      VecInt vecInt0 = new VecInt(0);
      SubModelIterator subModelIterator0 = new SubModelIterator(iSolver0, vecInt0, 0);
      MaxSatDecorator maxSatDecorator0 = new MaxSatDecorator(subModelIterator0, false);
      GroupClauseSelectorSolver<MaxSatDecorator> groupClauseSelectorSolver0 = new GroupClauseSelectorSolver<MaxSatDecorator>(maxSatDecorator0);
      Integer integer0 = groupClauseSelectorSolver0.getGroupVar(vecInt0, (-258));
      assertEquals(0, (int)integer0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      GroupClauseSelectorSolver<ModelIteratorToSATAdapter> groupClauseSelectorSolver0 = new GroupClauseSelectorSolver<ModelIteratorToSATAdapter>((ModelIteratorToSATAdapter) null);
      Collection<Integer> collection0 = groupClauseSelectorSolver0.getAddedVars();
      assertNotNull(collection0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      ModelIterator modelIterator0 = mock(ModelIterator.class, new ViolatedAssumptionAnswer());
      doReturn((IConstr) null).when(modelIterator0).addClause(any(org.sat4j.specs.IVecInt.class));
      GroupClauseSelectorSolver<ModelIterator> groupClauseSelectorSolver0 = new GroupClauseSelectorSolver<ModelIterator>(modelIterator0);
      IConstr iConstr0 = groupClauseSelectorSolver0.addNonControlableClause((IVecInt) null);
      assertNull(iConstr0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      DimacsStringSolver dimacsStringSolver0 = new DimacsStringSolver(47);
      GroupClauseSelectorSolver<DimacsStringSolver> groupClauseSelectorSolver0 = new GroupClauseSelectorSolver<DimacsStringSolver>(dimacsStringSolver0);
      VecInt vecInt0 = new VecInt(47);
      Minimal4InclusionModel minimal4InclusionModel0 = new Minimal4InclusionModel(groupClauseSelectorSolver0);
      GroupClauseSelectorSolver<Minimal4InclusionModel> groupClauseSelectorSolver1 = new GroupClauseSelectorSolver<Minimal4InclusionModel>(minimal4InclusionModel0);
      Minimal4CardinalityModel minimal4CardinalityModel0 = new Minimal4CardinalityModel(groupClauseSelectorSolver1);
      GroupClauseSelectorSolver<Minimal4CardinalityModel> groupClauseSelectorSolver2 = new GroupClauseSelectorSolver<Minimal4CardinalityModel>(minimal4CardinalityModel0);
      groupClauseSelectorSolver2.addControlableClause(vecInt0, 1404);
      assertEquals(1, vecInt0.size());
      assertEquals(1, dimacsStringSolver0.nVars());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Product product0 = new Product();
      ISolver iSolver0 = mock(ISolver.class, new ViolatedAssumptionAnswer());
      doReturn((IConstr) null).when(iSolver0).addClause(any(org.sat4j.specs.IVecInt.class));
      VecInt vecInt0 = new VecInt(0);
      SubModelIterator subModelIterator0 = new SubModelIterator(iSolver0, vecInt0, 0);
      IConstr iConstr0 = product0.addExactlyOne(subModelIterator0, vecInt0);
      ISolver iSolver1 = mock(ISolver.class, new ViolatedAssumptionAnswer());
      doReturn(8, 0, 0, 0).when(iSolver1).nVars();
      doReturn(iConstr0).when(iSolver1).addClause(any(org.sat4j.specs.IVecInt.class));
      doReturn(0).when(iSolver1).nextFreeVarId(anyBoolean());
      ModelIterator modelIterator0 = new ModelIterator(iSolver1);
      Minimal4InclusionModel minimal4InclusionModel0 = new Minimal4InclusionModel(modelIterator0);
      Minimal4CardinalityModel minimal4CardinalityModel0 = new Minimal4CardinalityModel(minimal4InclusionModel0);
      GroupClauseSelectorSolver<Minimal4CardinalityModel> groupClauseSelectorSolver0 = new GroupClauseSelectorSolver<Minimal4CardinalityModel>(minimal4CardinalityModel0);
      groupClauseSelectorSolver0.addControlableClause(vecInt0, 848);
      assertEquals(1, vecInt0.size());
      assertFalse(vecInt0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      ASolverFactory<GateTranslator> aSolverFactory0 = (ASolverFactory<GateTranslator>) mock(ASolverFactory.class, new ViolatedAssumptionAnswer());
      CheckMUSSolutionListener checkMUSSolutionListener0 = new CheckMUSSolutionListener(aSolverFactory0);
      LightFactory lightFactory0 = new LightFactory();
      ISolver iSolver0 = lightFactory0.defaultSolver();
      ModelIteratorToSATAdapter modelIteratorToSATAdapter0 = new ModelIteratorToSATAdapter(iSolver0, checkMUSSolutionListener0);
      GroupClauseSelectorSolver<ModelIteratorToSATAdapter> groupClauseSelectorSolver0 = new GroupClauseSelectorSolver<ModelIteratorToSATAdapter>(modelIteratorToSATAdapter0);
      VecInt vecInt0 = new VecInt();
      IConstr iConstr0 = groupClauseSelectorSolver0.addClause((IVecInt) vecInt0, (-1666));
      assertFalse(iConstr0.learnt());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      DimacsStringSolver dimacsStringSolver0 = new DimacsStringSolver(47);
      GroupClauseSelectorSolver<DimacsStringSolver> groupClauseSelectorSolver0 = new GroupClauseSelectorSolver<DimacsStringSolver>(dimacsStringSolver0);
      // Undeclared exception!
      try { 
        groupClauseSelectorSolver0.unsatExplanation();
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.tools.AbstractOutputSolver", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      DimacsStringSolver dimacsStringSolver0 = new DimacsStringSolver(6);
      GroupClauseSelectorSolver<DimacsStringSolver> groupClauseSelectorSolver0 = new GroupClauseSelectorSolver<DimacsStringSolver>(dimacsStringSolver0);
      // Undeclared exception!
      try { 
        groupClauseSelectorSolver0.model();
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.tools.DimacsStringSolver", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      GroupClauseSelectorSolver<GateTranslator> groupClauseSelectorSolver0 = new GroupClauseSelectorSolver<GateTranslator>((GateTranslator) null);
      // Undeclared exception!
      try { 
        groupClauseSelectorSolver0.model();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.tools.SolverDecorator", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      ISolver iSolver0 = mock(ISolver.class, new ViolatedAssumptionAnswer());
      ModelIterator modelIterator0 = new ModelIterator(iSolver0);
      SingleSolutionDetector singleSolutionDetector0 = new SingleSolutionDetector(modelIterator0);
      ClausalCardinalitiesDecorator<SingleSolutionDetector> clausalCardinalitiesDecorator0 = new ClausalCardinalitiesDecorator<SingleSolutionDetector>(singleSolutionDetector0);
      GroupClauseSelectorSolver<ClausalCardinalitiesDecorator<SingleSolutionDetector>> groupClauseSelectorSolver0 = new GroupClauseSelectorSolver<ClausalCardinalitiesDecorator<SingleSolutionDetector>>(clausalCardinalitiesDecorator0);
      // Undeclared exception!
      try { 
        groupClauseSelectorSolver0.getGroupVar((IVecInt) null, (-1));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.tools.AbstractClauseSelectorSolver", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      LightFactory lightFactory0 = new LightFactory();
      ISolver iSolver0 = lightFactory0.lightSolver();
      VecInt vecInt0 = new VecInt(512, 0);
      SolutionFoundListener solutionFoundListener0 = SolutionFoundListener.VOID;
      Minimal4InclusionModel minimal4InclusionModel0 = new Minimal4InclusionModel(iSolver0, vecInt0, solutionFoundListener0);
      GateTranslator gateTranslator0 = new GateTranslator(minimal4InclusionModel0);
      GroupClauseSelectorSolver<GateTranslator> groupClauseSelectorSolver0 = new GroupClauseSelectorSolver<GateTranslator>(gateTranslator0);
      // Undeclared exception!
      try { 
        groupClauseSelectorSolver0.addControlableClause(vecInt0, 1404);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 0 is not a valid variable identifier
         //
         verifyException("org.sat4j.minisat.core.Solver", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      NegationDecorator<ModelIterator> negationDecorator0 = (NegationDecorator<ModelIterator>) mock(NegationDecorator.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(negationDecorator0).nextFreeVarId(anyBoolean());
      Policy policy0 = new Policy();
      ClausalCardinalitiesDecorator<NegationDecorator<ModelIterator>> clausalCardinalitiesDecorator0 = new ClausalCardinalitiesDecorator<NegationDecorator<ModelIterator>>(negationDecorator0, policy0);
      SolutionCounter solutionCounter0 = new SolutionCounter(clausalCardinalitiesDecorator0);
      VecInt vecInt0 = new VecInt(0);
      GroupClauseSelectorSolver<SolutionCounter> groupClauseSelectorSolver0 = new GroupClauseSelectorSolver<SolutionCounter>(solutionCounter0);
      IVecInt iVecInt0 = vecInt0.pop();
      SolutionFoundListener solutionFoundListener0 = SolutionFoundListener.VOID;
      Minimal4InclusionModel minimal4InclusionModel0 = new Minimal4InclusionModel(groupClauseSelectorSolver0, vecInt0, solutionFoundListener0);
      GateTranslator gateTranslator0 = new GateTranslator(minimal4InclusionModel0);
      GroupClauseSelectorSolver<GateTranslator> groupClauseSelectorSolver1 = new GroupClauseSelectorSolver<GateTranslator>(gateTranslator0);
      // Undeclared exception!
      try { 
        groupClauseSelectorSolver1.addControlableClause(iVecInt0, (-903));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      ISolver iSolver0 = mock(ISolver.class, new ViolatedAssumptionAnswer());
      ModelIterator modelIterator0 = new ModelIterator(iSolver0);
      GroupClauseSelectorSolver<ModelIterator> groupClauseSelectorSolver0 = new GroupClauseSelectorSolver<ModelIterator>(modelIterator0);
      // Undeclared exception!
      try { 
        groupClauseSelectorSolver0.addClause((IVecInt) null, (-1));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.tools.AbstractClauseSelectorSolver", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      DimacsOutputSolver dimacsOutputSolver0 = new DimacsOutputSolver();
      GroupClauseSelectorSolver<DimacsOutputSolver> groupClauseSelectorSolver0 = new GroupClauseSelectorSolver<DimacsOutputSolver>(dimacsOutputSolver0);
      VecInt vecInt0 = new VecInt(16, 16);
      // Undeclared exception!
      try { 
        groupClauseSelectorSolver0.addControlableClause(vecInt0, 37);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Please call newVar(int) before adding constraints!!!
         //
         verifyException("org.sat4j.tools.AbstractClauseSelectorSolver", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      GateTranslator gateTranslator0 = mock(GateTranslator.class, new ViolatedAssumptionAnswer());
      doReturn((int[]) null).when(gateTranslator0).modelWithInternalVariables();
      GroupClauseSelectorSolver<GateTranslator> groupClauseSelectorSolver0 = new GroupClauseSelectorSolver<GateTranslator>(gateTranslator0);
      int[] intArray0 = groupClauseSelectorSolver0.model();
      assertNull(intArray0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      int[] intArray0 = new int[7];
      GateTranslator gateTranslator0 = mock(GateTranslator.class, new ViolatedAssumptionAnswer());
      doReturn(intArray0).when(gateTranslator0).modelWithInternalVariables();
      GroupClauseSelectorSolver<GateTranslator> groupClauseSelectorSolver0 = new GroupClauseSelectorSolver<GateTranslator>(gateTranslator0);
      int[] intArray1 = groupClauseSelectorSolver0.model();
      assertArrayEquals(new int[] {0, 0, 0, 0, 0, 0, 0}, intArray1);
      assertNotNull(intArray1);
      assertNotSame(intArray1, intArray0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      DimacsStringSolver dimacsStringSolver0 = new DimacsStringSolver(2);
      GroupClauseSelectorSolver<DimacsStringSolver> groupClauseSelectorSolver0 = new GroupClauseSelectorSolver<DimacsStringSolver>(dimacsStringSolver0);
      ASolverFactory<OptToSatAdapter> aSolverFactory0 = (ASolverFactory<OptToSatAdapter>) mock(ASolverFactory.class, new ViolatedAssumptionAnswer());
      CheckMUSSolutionListener checkMUSSolutionListener0 = new CheckMUSSolutionListener(aSolverFactory0);
      ModelIteratorToSATAdapter modelIteratorToSATAdapter0 = new ModelIteratorToSATAdapter(groupClauseSelectorSolver0, checkMUSSolutionListener0);
      GroupClauseSelectorSolver<ModelIteratorToSATAdapter> groupClauseSelectorSolver1 = new GroupClauseSelectorSolver<ModelIteratorToSATAdapter>(modelIteratorToSATAdapter0);
      VecInt vecInt0 = new VecInt();
      groupClauseSelectorSolver1.addClause((IVecInt) vecInt0, 0);
      assertEquals(0, vecInt0.size());
      assertEquals(0, dimacsStringSolver0.realNumberOfVariables());
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      NegationDecorator<ModelIterator> negationDecorator0 = (NegationDecorator<ModelIterator>) mock(NegationDecorator.class, new ViolatedAssumptionAnswer());
      Policy policy0 = new Policy();
      ClausalCardinalitiesDecorator<NegationDecorator<ModelIterator>> clausalCardinalitiesDecorator0 = new ClausalCardinalitiesDecorator<NegationDecorator<ModelIterator>>(negationDecorator0, policy0);
      SolutionCounter solutionCounter0 = new SolutionCounter(clausalCardinalitiesDecorator0);
      GroupClauseSelectorSolver<SolutionCounter> groupClauseSelectorSolver0 = new GroupClauseSelectorSolver<SolutionCounter>(solutionCounter0);
      Map<Integer, Integer> map0 = groupClauseSelectorSolver0.getVarToHighLevel();
      assertEquals(0, map0.size());
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      GroupClauseSelectorSolver<Solver<CardinalityDataStructureYanMin>> groupClauseSelectorSolver0 = new GroupClauseSelectorSolver<Solver<CardinalityDataStructureYanMin>>((Solver<CardinalityDataStructureYanMin>) null);
      // Undeclared exception!
      try { 
        groupClauseSelectorSolver0.addNonControlableClause((IVecInt) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.tools.SolverDecorator", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      DimacsStringSolver dimacsStringSolver0 = new DimacsStringSolver(6);
      GroupClauseSelectorSolver<DimacsStringSolver> groupClauseSelectorSolver0 = new GroupClauseSelectorSolver<DimacsStringSolver>(dimacsStringSolver0);
      VecInt vecInt0 = new VecInt(6, 6);
      SolutionFoundListener solutionFoundListener0 = SolutionFoundListener.VOID;
      ModelIteratorToSATAdapter modelIteratorToSATAdapter0 = new ModelIteratorToSATAdapter(groupClauseSelectorSolver0, 6, solutionFoundListener0);
      GroupClauseSelectorSolver<ModelIteratorToSATAdapter> groupClauseSelectorSolver1 = new GroupClauseSelectorSolver<ModelIteratorToSATAdapter>(modelIteratorToSATAdapter0);
      // Undeclared exception!
      try { 
        groupClauseSelectorSolver1.addClause((IVecInt) vecInt0, 6);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Please call newVar(int) before adding constraints!!!
         //
         verifyException("org.sat4j.tools.AbstractClauseSelectorSolver", e);
      }
  }
}
