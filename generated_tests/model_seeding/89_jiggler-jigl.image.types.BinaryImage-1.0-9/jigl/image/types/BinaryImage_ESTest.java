/*
 * This file was automatically generated by EvoSuite
 * Sat Oct 26 01:16:49 GMT 2019
 */

package jigl.image.types;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.awt.image.ImageProducer;
import jigl.image.Image;
import jigl.image.ROI;
import jigl.image.types.BinaryImage;
import jigl.image.types.GrayImage;
import jigl.image.types.MagnitudeImage;
import jigl.image.types.RealGrayImage;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class BinaryImage_ESTest extends BinaryImage_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      BinaryImage binaryImage0 = new BinaryImage(11, 11);
      binaryImage0.count();
      BinaryImage binaryImage1 = new BinaryImage(binaryImage0);
      binaryImage0.Y();
      BinaryImage binaryImage2 = binaryImage1.shift((-16777216), (-2252));
      BinaryImage binaryImage3 = binaryImage0.shift((-569), (-1));
      binaryImage0.getJavaImage();
      binaryImage1.count();
      BinaryImage binaryImage4 = new BinaryImage(binaryImage2);
      BinaryImage binaryImage5 = binaryImage3.intersection(binaryImage4);
      Byte byte0 = Byte.valueOf((byte)38);
      ROI rOI0 = new ROI(1, 1, 1, 1);
      rOI0.uy();
      rOI0.X();
      rOI0.Y();
      rOI0.Y();
      rOI0.Y();
      // Undeclared exception!
      try { 
        binaryImage5.set(11, 7, byte0, rOI0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.BinaryImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      BinaryImage binaryImage0 = new BinaryImage(21, 21);
      ROI rOI0 = new ROI();
      rOI0.ux();
      rOI0.lx();
      rOI0.ux();
      rOI0.ly();
      binaryImage0.copy(rOI0);
      binaryImage0.compliment();
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)1;
      byteArray0[4] = (byte) (-38);
      byte byte0 = (byte)1;
      byteArray0[5] = (byte)1;
      byteArray0[6] = (byte)0;
      byteArray0[7] = (byte) (-1);
      BinaryImage binaryImage0 = new BinaryImage(0, 0, byteArray0);
      binaryImage0.toString();
      // Undeclared exception!
      try { 
        binaryImage0.clear();
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.BinaryImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      BinaryImage binaryImage0 = new BinaryImage();
      BinaryImage binaryImage1 = binaryImage0.difference(binaryImage0);
      binaryImage1.Y();
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      BinaryImage binaryImage0 = new BinaryImage(11, 11);
      BinaryImage binaryImage1 = binaryImage0.shift(11, 11);
      Byte byte0 = new Byte((byte) (-90));
      byte0.byteValue();
      // Undeclared exception!
      try { 
        binaryImage1.clear((Byte) (byte) (-90));
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.BinaryImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      BinaryImage binaryImage0 = new BinaryImage(1100, 1100);
      Integer integer0 = new Integer(1100);
      binaryImage0.shift(24, 147);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      BinaryImage binaryImage0 = new BinaryImage();
      assertNotNull(binaryImage0);
      assertEquals((byte)1, (byte)binaryImage0.max());
      assertEquals((byte)0, (byte)binaryImage0.min());
      assertEquals(0, binaryImage0.count());
      assertEquals(0, binaryImage0.Y());
      assertEquals(0, binaryImage0.X());
      
      BinaryImage binaryImage1 = binaryImage0.compliment();
      assertNotNull(binaryImage1);
      assertSame(binaryImage0, binaryImage1);
      assertSame(binaryImage1, binaryImage0);
      assertEquals((byte)1, (byte)binaryImage0.max());
      assertEquals((byte)0, (byte)binaryImage0.min());
      assertEquals(0, binaryImage0.count());
      assertEquals(0, binaryImage0.Y());
      assertEquals(0, binaryImage0.X());
      assertEquals(0, binaryImage1.X());
      assertEquals(0, binaryImage1.Y());
      assertEquals((byte)0, (byte)binaryImage1.min());
      assertEquals((byte)1, (byte)binaryImage1.max());
      assertEquals(0, binaryImage1.count());
      
      ROI rOI0 = new ROI(1, 1, 1, 1);
      rOI0.X();
      rOI0.Y();
      rOI0.Y();
      rOI0.Y();
      binaryImage1.intersection(binaryImage0);
      binaryImage1.count();
      int int0 = (-762);
      // Undeclared exception!
      try { 
        binaryImage0.get(0, (-762));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      BinaryImage binaryImage0 = new BinaryImage(739, 739);
      BinaryImage binaryImage1 = new BinaryImage(binaryImage0);
      binaryImage1.max();
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)97;
      byteArray0[1] = (byte) (-73);
      byteArray0[2] = (byte)72;
      byteArray0[3] = (byte)1;
      byteArray0[4] = (byte) (-1);
      byteArray0[5] = (byte)0;
      byteArray0[6] = (byte) (-40);
      byteArray0[7] = (byte) (-128);
      BinaryImage binaryImage0 = new BinaryImage(2, 2, byteArray0);
      binaryImage0.Y();
      Byte byte0 = new Byte((byte)97);
      Byte.toUnsignedLong((byte)97);
      // Undeclared exception!
      try { 
        binaryImage0.get(16, (byte)1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      int[][] intArray0 = new int[0][8];
      GrayImage grayImage0 = new GrayImage(intArray0);
      int int0 = 1;
      GrayImage grayImage1 = grayImage0.multiply(1);
      BinaryImage binaryImage0 = new BinaryImage(grayImage1);
      byte byte0 = (byte) (-128);
      Byte byte1 = Byte.valueOf((byte)38);
      binaryImage0.shift(0, 0);
      // Undeclared exception!
      try { 
        binaryImage0.set(0, (-80), byte1, (ROI) null);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.BinaryImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      BinaryImage binaryImage0 = new BinaryImage(3565, 17);
      BinaryImage binaryImage1 = new BinaryImage(binaryImage0);
      // Undeclared exception!
      binaryImage0.union(binaryImage1);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      BinaryImage binaryImage0 = new BinaryImage();
      assertNotNull(binaryImage0);
      assertEquals((byte)1, (byte)binaryImage0.max());
      assertEquals((byte)0, (byte)binaryImage0.min());
      assertEquals(0, binaryImage0.X());
      assertEquals(0, binaryImage0.count());
      assertEquals(0, binaryImage0.Y());
      
      int int0 = binaryImage0.count();
      assertEquals(0, int0);
      assertEquals((byte)1, (byte)binaryImage0.max());
      assertEquals((byte)0, (byte)binaryImage0.min());
      assertEquals(0, binaryImage0.X());
      assertEquals(0, binaryImage0.count());
      assertEquals(0, binaryImage0.Y());
      
      binaryImage0.min();
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      byte[][] byteArray0 = new byte[2][7];
      byte[] byteArray1 = new byte[3];
      byteArray1[0] = (byte) (-47);
      byteArray1[1] = (byte) (-118);
      byteArray1[2] = (byte)59;
      byteArray0[0] = byteArray1;
      byte[] byteArray2 = new byte[1];
      byteArray2[0] = (byte) (-118);
      byteArray0[1] = byteArray2;
      BinaryImage binaryImage0 = null;
      try {
        binaryImage0 = new BinaryImage(byteArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1
         //
         verifyException("jigl.image.types.BinaryImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      BinaryImage binaryImage0 = new BinaryImage(11, 11);
      binaryImage0.getJavaImage();
      binaryImage0.compliment();
      binaryImage0.X();
      binaryImage0.getJavaImage();
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      BinaryImage binaryImage0 = new BinaryImage();
      assertNotNull(binaryImage0);
      assertEquals((byte)0, (byte)binaryImage0.min());
      assertEquals((byte)1, (byte)binaryImage0.max());
      assertEquals(0, binaryImage0.X());
      assertEquals(0, binaryImage0.count());
      assertEquals(0, binaryImage0.Y());
      
      Image image0 = binaryImage0.copy();
      assertNotNull(image0);
      assertNotSame(binaryImage0, image0);
      assertEquals((byte)0, (byte)binaryImage0.min());
      assertEquals((byte)1, (byte)binaryImage0.max());
      assertEquals(0, binaryImage0.X());
      assertEquals(0, binaryImage0.count());
      assertEquals(0, binaryImage0.Y());
      assertEquals(0, image0.X());
      assertEquals(0, image0.Y());
      
      int int0 = binaryImage0.count();
      assertNotSame(binaryImage0, image0);
      assertEquals(0, int0);
      assertFalse(binaryImage0.equals((Object)image0));
      assertEquals((byte)0, (byte)binaryImage0.min());
      assertEquals((byte)1, (byte)binaryImage0.max());
      assertEquals(0, binaryImage0.X());
      assertEquals(0, binaryImage0.count());
      assertEquals(0, binaryImage0.Y());
      
      binaryImage0.min();
      binaryImage0.X();
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      BinaryImage binaryImage0 = new BinaryImage(21, 21);
      BinaryImage binaryImage1 = binaryImage0.compliment();
      binaryImage0.difference(binaryImage1);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)122;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)8;
      byteArray0[4] = (byte) (-1);
      byteArray0[5] = (byte) (-108);
      byteArray0[6] = (byte) (-1);
      byteArray0[7] = (byte) (-128);
      BinaryImage binaryImage0 = new BinaryImage(0, 0, byteArray0);
      binaryImage0.toString();
      ROI rOI0 = new ROI(1, 1, 1, 1);
      rOI0.setROI((byte)0, (-8), 0, (byte)8);
      rOI0.uy();
      rOI0.X();
      rOI0.Y();
      rOI0.Y();
      // Undeclared exception!
      try { 
        binaryImage0.copy(rOI0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -8
         //
         verifyException("jigl.image.types.BinaryImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      BinaryImage binaryImage0 = null;
      try {
        binaryImage0 = new BinaryImage((GrayImage) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.BinaryImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      BinaryImage binaryImage0 = new BinaryImage(21, 21);
      BinaryImage binaryImage1 = binaryImage0.compliment();
      binaryImage1.count();
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      byte[][] byteArray0 = new byte[0][0];
      BinaryImage binaryImage0 = new BinaryImage(byteArray0);
      BinaryImage binaryImage1 = new BinaryImage(binaryImage0);
      binaryImage0.union(binaryImage1);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)122;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)8;
      byteArray0[4] = (byte) (-1);
      byteArray0[5] = (byte) (-108);
      byteArray0[6] = (byte) (-1);
      byteArray0[7] = (byte) (-128);
      BinaryImage binaryImage0 = new BinaryImage(0, 0, byteArray0);
      binaryImage0.toString();
      ROI rOI0 = new ROI(1, 1, 1, 1);
      rOI0.uy();
      rOI0.X();
      rOI0.Y();
      rOI0.Y();
      rOI0.Y();
      // Undeclared exception!
      try { 
        binaryImage0.copy(rOI0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1
         //
         verifyException("jigl.image.types.BinaryImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      BinaryImage binaryImage0 = new BinaryImage();
      // Undeclared exception!
      try { 
        binaryImage0.clear();
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.BinaryImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      BinaryImage binaryImage0 = new BinaryImage(11, 11);
      binaryImage0.count();
      binaryImage0.Y();
      binaryImage0.Y();
      BinaryImage binaryImage1 = new BinaryImage();
      binaryImage0.difference(binaryImage1);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      BinaryImage binaryImage0 = new BinaryImage(21, 21);
      binaryImage0.shift(16, 16);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      BinaryImage binaryImage0 = new BinaryImage();
      assertNotNull(binaryImage0);
      assertEquals(0, binaryImage0.Y());
      assertEquals(0, binaryImage0.count());
      assertEquals(0, binaryImage0.X());
      assertEquals((byte)1, (byte)binaryImage0.max());
      assertEquals((byte)0, (byte)binaryImage0.min());
      
      Byte[][] byteArray0 = binaryImage0.getData();
      assertNotNull(byteArray0);
      assertEquals(0, byteArray0.length);
      assertEquals(0, binaryImage0.Y());
      assertEquals(0, binaryImage0.count());
      assertEquals(0, binaryImage0.X());
      assertEquals((byte)1, (byte)binaryImage0.max());
      assertEquals((byte)0, (byte)binaryImage0.min());
      
      binaryImage0.getJavaImage();
      binaryImage0.count();
      binaryImage0.Y();
      Byte.toUnsignedLong((byte)36);
      Byte.valueOf((byte)36);
      BinaryImage binaryImage1 = new BinaryImage();
      binaryImage0.difference(binaryImage1);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      BinaryImage binaryImage0 = new BinaryImage();
      int int0 = 1;
      Byte byte0 = new Byte((byte) (-7));
      byte0.byteValue();
      // Undeclared exception!
      try { 
        binaryImage0.clear((Byte) (byte) (-7));
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.BinaryImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      BinaryImage binaryImage0 = new BinaryImage();
      binaryImage0.copy();
      Byte.toUnsignedLong((byte)84);
      Byte byte0 = new Byte((byte)0);
      byte0.byteValue();
      // Undeclared exception!
      try { 
        binaryImage0.set((-119), 211, (Byte) (byte)0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.BinaryImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      BinaryImage binaryImage0 = new BinaryImage(11, 11);
      MagnitudeImage magnitudeImage0 = new MagnitudeImage(229, 11);
      MagnitudeImage magnitudeImage1 = new MagnitudeImage(magnitudeImage0);
      binaryImage0.count();
      BinaryImage binaryImage1 = new BinaryImage(binaryImage0);
      binaryImage0.intersection(binaryImage1);
      binaryImage0.X();
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)122;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)8;
      byteArray0[4] = (byte) (-1);
      byteArray0[5] = (byte) (-108);
      byteArray0[6] = (byte) (-1);
      byteArray0[7] = (byte) (-128);
      BinaryImage binaryImage0 = new BinaryImage(0, 0, byteArray0);
      binaryImage0.toString();
      ROI rOI0 = new ROI(1, 1, 1, 1);
      rOI0.uy();
      rOI0.X();
      rOI0.Y();
      rOI0.Y();
      rOI0.Y();
      binaryImage0.Y();
      Byte.valueOf((byte) (-51));
      Byte.toUnsignedLong((byte)53);
      // Undeclared exception!
      try { 
        binaryImage0.set((int) (byte) (-1), 0, (Byte) (byte)8);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("jigl.image.types.BinaryImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      BinaryImage binaryImage0 = new BinaryImage(11, 11);
      int int0 = 229;
      MagnitudeImage magnitudeImage0 = new MagnitudeImage(229, 11);
      MagnitudeImage magnitudeImage1 = new MagnitudeImage(magnitudeImage0);
      magnitudeImage1.toString();
      BinaryImage binaryImage1 = null;
      try {
        binaryImage1 = new BinaryImage(magnitudeImage1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.BinaryImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      BinaryImage binaryImage0 = null;
      try {
        binaryImage0 = new BinaryImage((RealGrayImage) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.BinaryImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      BinaryImage binaryImage0 = new BinaryImage(19, 16);
      byte[][] byteArray0 = new byte[2][9];
      byte[] byteArray1 = new byte[8];
      byteArray1[0] = (byte)122;
      byteArray1[1] = (byte) (-2);
      byteArray1[2] = (byte)111;
      byteArray1[3] = (byte) (-70);
      byteArray1[4] = (byte)6;
      byteArray1[5] = (byte)5;
      byteArray1[6] = (byte)0;
      byteArray1[7] = (byte)0;
      byteArray0[0] = byteArray1;
      byte[] byteArray2 = new byte[8];
      byteArray2[0] = (byte) (-70);
      byteArray2[1] = (byte)6;
      byteArray2[2] = (byte)6;
      byteArray2[3] = (byte)121;
      byteArray2[4] = (byte)111;
      byteArray2[5] = (byte)0;
      byteArray2[6] = (byte)11;
      byteArray2[7] = (byte)6;
      byteArray0[1] = byteArray2;
      BinaryImage binaryImage1 = new BinaryImage(byteArray0);
      binaryImage1.count();
      binaryImage1.getJavaImage();
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      BinaryImage binaryImage0 = new BinaryImage(11, 11);
      Integer integer0 = new Integer(11);
      binaryImage0.shift((int) integer0, (int) integer0);
      binaryImage0.shift(1, 1);
      BinaryImage binaryImage1 = binaryImage0.shift((-569), 203);
      binaryImage1.copy();
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      BinaryImage binaryImage0 = new BinaryImage(21, 21);
      // Undeclared exception!
      try { 
        binaryImage0.getData();
        fail("Expecting exception: ArrayStoreException");
      
      } catch(ArrayStoreException e) {
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      BinaryImage binaryImage0 = new BinaryImage();
      binaryImage0.Y();
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      BinaryImage binaryImage0 = new BinaryImage();
      assertNotNull(binaryImage0);
      assertEquals((byte)0, (byte)binaryImage0.min());
      assertEquals((byte)1, (byte)binaryImage0.max());
      assertEquals(0, binaryImage0.X());
      assertEquals(0, binaryImage0.count());
      assertEquals(0, binaryImage0.Y());
      
      int int0 = binaryImage0.X();
      assertEquals(0, int0);
      assertEquals((byte)0, (byte)binaryImage0.min());
      assertEquals((byte)1, (byte)binaryImage0.max());
      assertEquals(0, binaryImage0.X());
      assertEquals(0, binaryImage0.count());
      assertEquals(0, binaryImage0.Y());
      
      binaryImage0.getData();
      binaryImage0.getJavaImage();
      ROI rOI0 = new ROI(1, 1, 1, 1);
      rOI0.uy();
      rOI0.X();
      binaryImage0.toString();
      rOI0.Y();
      rOI0.Y();
      rOI0.Y();
      binaryImage0.count();
      binaryImage0.intersection((BinaryImage) null);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      BinaryImage binaryImage0 = new BinaryImage(3, 3);
      binaryImage0.getJavaImage();
      BinaryImage binaryImage1 = binaryImage0.compliment();
      binaryImage1.compliment();
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      BinaryImage binaryImage0 = new BinaryImage(1633, 1633);
      // Undeclared exception!
      binaryImage0.compliment();
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      BinaryImage binaryImage0 = new BinaryImage();
      binaryImage0.getJavaImage();
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      BinaryImage binaryImage0 = new BinaryImage(30, 1405);
      binaryImage0.intersection(binaryImage0);
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      BinaryImage binaryImage0 = new BinaryImage();
      binaryImage0.copy();
      ROI rOI0 = new ROI();
      rOI0.ux();
      rOI0.lx();
      rOI0.Y();
      rOI0.Y();
      rOI0.Y();
      // Undeclared exception!
      try { 
        binaryImage0.copy(rOI0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.BinaryImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      BinaryImage binaryImage0 = new BinaryImage(11, 11);
      binaryImage0.count();
      BinaryImage binaryImage1 = new BinaryImage(binaryImage0);
      BinaryImage binaryImage2 = new BinaryImage(1389, 1187);
      // Undeclared exception!
      try { 
        binaryImage2.intersection(binaryImage1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      BinaryImage binaryImage0 = new BinaryImage(21, 21);
      // Undeclared exception!
      try { 
        binaryImage0.copy((ROI) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.BinaryImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      BinaryImage binaryImage0 = new BinaryImage(21, 21);
      BinaryImage binaryImage1 = new BinaryImage(binaryImage0);
      binaryImage1.union(binaryImage0);
      // Undeclared exception!
      try { 
        binaryImage1.get(21, 21);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      BinaryImage binaryImage0 = new BinaryImage(11, 11);
      binaryImage0.getJavaImage();
      BinaryImage binaryImage1 = binaryImage0.compliment();
      binaryImage1.difference(binaryImage0);
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      BinaryImage binaryImage0 = new BinaryImage(11, 11);
      binaryImage0.count();
      Byte byte0 = new Byte((byte) (-49));
      byte0.byteValue();
      // Undeclared exception!
      try { 
        binaryImage0.set((-32768), 3, (Byte) (byte) (-49));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -32768
         //
         verifyException("jigl.image.types.BinaryImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      BinaryImage binaryImage0 = new BinaryImage(30, 30);
      binaryImage0.count();
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)19;
      BinaryImage binaryImage1 = new BinaryImage(1, 1, byteArray0);
      // Undeclared exception!
      try { 
        binaryImage0.union(binaryImage1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      BinaryImage binaryImage0 = new BinaryImage();
      BinaryImage binaryImage1 = new BinaryImage();
      binaryImage0.union(binaryImage1);
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      MagnitudeImage magnitudeImage0 = mock(MagnitudeImage.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(magnitudeImage0).X();
      doReturn(0).when(magnitudeImage0).Y();
      MagnitudeImage magnitudeImage1 = new MagnitudeImage(magnitudeImage0);
      magnitudeImage1.toString();
      BinaryImage binaryImage0 = new BinaryImage(magnitudeImage1);
      BinaryImage binaryImage1 = new BinaryImage(1187, 1187);
      binaryImage0.intersection(binaryImage1);
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      BinaryImage binaryImage0 = new BinaryImage(935, 4162);
      // Undeclared exception!
      binaryImage0.count();
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      BinaryImage binaryImage0 = new BinaryImage(21, 21);
      binaryImage0.shift(21, 21);
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      MagnitudeImage magnitudeImage0 = new MagnitudeImage(17, 17);
      magnitudeImage0.toString();
      BinaryImage binaryImage0 = null;
      try {
        binaryImage0 = new BinaryImage(magnitudeImage0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.BinaryImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      BinaryImage binaryImage0 = new BinaryImage();
      BinaryImage binaryImage1 = new BinaryImage(binaryImage0);
      BinaryImage binaryImage2 = new BinaryImage(binaryImage0);
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      BinaryImage binaryImage0 = new BinaryImage(11, 11);
      binaryImage0.count();
      BinaryImage binaryImage1 = new BinaryImage(binaryImage0);
      binaryImage1.Y();
      BinaryImage binaryImage2 = binaryImage0.shift(11, 66);
      BinaryImage binaryImage3 = binaryImage2.shift(0, (-1246));
      binaryImage3.getJavaImage();
      binaryImage2.count();
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      BinaryImage binaryImage0 = new BinaryImage(86, 86);
      binaryImage0.shift(86, (-832));
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      BinaryImage binaryImage0 = new BinaryImage();
      BinaryImage binaryImage1 = new BinaryImage(binaryImage0);
      // Undeclared exception!
      try { 
        binaryImage1.get((-1123), (-1123));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      BinaryImage binaryImage0 = new BinaryImage(11, 11);
      binaryImage0.count();
      binaryImage0.Y();
      binaryImage0.shift((-569), (-1));
      binaryImage0.copy();
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)97;
      byteArray0[1] = (byte) (-50);
      byteArray0[2] = (byte)72;
      byteArray0[3] = (byte)1;
      byteArray0[4] = (byte) (-1);
      byteArray0[5] = (byte)0;
      byteArray0[6] = (byte) (-40);
      byteArray0[7] = (byte) (-128);
      BinaryImage binaryImage0 = new BinaryImage(2, 2, byteArray0);
      binaryImage0.Y();
      Byte byte0 = Byte.valueOf((byte)98);
      Byte.toUnsignedLong((byte)97);
      // Undeclared exception!
      try { 
        binaryImage0.set((int) (byte)1, (-4824), byte0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -4824
         //
         verifyException("jigl.image.types.BinaryImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      BinaryImage binaryImage0 = new BinaryImage();
      binaryImage0.count();
      binaryImage0.shift(0, 0);
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      byte[][] byteArray0 = new byte[3][3];
      byte[] byteArray1 = new byte[3];
      byteArray1[0] = (byte)16;
      byteArray1[1] = (byte) (-1);
      byteArray1[2] = (byte) (-105);
      byteArray0[0] = byteArray1;
      byte[] byteArray2 = new byte[2];
      byteArray2[0] = (byte) (-1);
      byteArray2[1] = (byte)16;
      byteArray0[1] = byteArray2;
      byte[] byteArray3 = new byte[6];
      byteArray3[0] = (byte) (-1);
      byteArray3[1] = (byte) (-105);
      byteArray3[2] = (byte)0;
      byteArray3[3] = (byte) (-1);
      byteArray3[4] = (byte) (-1);
      byteArray3[5] = (byte) (-105);
      byteArray0[2] = byteArray3;
      BinaryImage binaryImage0 = null;
      try {
        binaryImage0 = new BinaryImage(byteArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 3
         //
         verifyException("jigl.image.types.BinaryImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      BinaryImage binaryImage0 = new BinaryImage(5, 5);
      // Undeclared exception!
      try { 
        binaryImage0.intersection((BinaryImage) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.BinaryImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      BinaryImage binaryImage0 = new BinaryImage(18, 18);
      binaryImage0.count();
      binaryImage0.Y();
      binaryImage0.compliment();
      int int0 = new Integer(18);
      binaryImage0.compliment();
      binaryImage0.copy();
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      BinaryImage binaryImage0 = new BinaryImage(21, 21);
      assertNotNull(binaryImage0);
      assertEquals(21, binaryImage0.Y());
      assertEquals(0, binaryImage0.count());
      assertEquals((byte)0, (byte)binaryImage0.min());
      assertEquals((byte)1, (byte)binaryImage0.max());
      assertEquals(21, binaryImage0.X());
      
      BinaryImage binaryImage1 = binaryImage0.intersection(binaryImage0);
      assertNotNull(binaryImage1);
      assertSame(binaryImage0, binaryImage1);
      assertSame(binaryImage1, binaryImage0);
      assertEquals(21, binaryImage0.Y());
      assertEquals(0, binaryImage0.count());
      assertEquals((byte)0, (byte)binaryImage0.min());
      assertEquals((byte)1, (byte)binaryImage0.max());
      assertEquals(21, binaryImage0.X());
      assertEquals((byte)0, (byte)binaryImage1.min());
      assertEquals(0, binaryImage1.count());
      assertEquals(21, binaryImage1.X());
      assertEquals(21, binaryImage1.Y());
      assertEquals((byte)1, (byte)binaryImage1.max());
      
      BinaryImage binaryImage2 = binaryImage0.union(binaryImage1);
      assertNotNull(binaryImage2);
      assertSame(binaryImage0, binaryImage1);
      assertSame(binaryImage0, binaryImage2);
      assertSame(binaryImage1, binaryImage0);
      assertSame(binaryImage1, binaryImage2);
      assertSame(binaryImage2, binaryImage0);
      assertSame(binaryImage2, binaryImage1);
      assertEquals(21, binaryImage0.Y());
      assertEquals(0, binaryImage0.count());
      assertEquals((byte)0, (byte)binaryImage0.min());
      assertEquals((byte)1, (byte)binaryImage0.max());
      assertEquals(21, binaryImage0.X());
      assertEquals((byte)0, (byte)binaryImage1.min());
      assertEquals(0, binaryImage1.count());
      assertEquals(21, binaryImage1.X());
      assertEquals(21, binaryImage1.Y());
      assertEquals((byte)1, (byte)binaryImage1.max());
      assertEquals(0, binaryImage2.count());
      assertEquals((byte)1, (byte)binaryImage2.max());
      assertEquals((byte)0, (byte)binaryImage2.min());
      assertEquals(21, binaryImage2.Y());
      assertEquals(21, binaryImage2.X());
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      BinaryImage binaryImage0 = new BinaryImage();
      assertNotNull(binaryImage0);
      assertEquals((byte)0, (byte)binaryImage0.min());
      assertEquals((byte)1, (byte)binaryImage0.max());
      assertEquals(0, binaryImage0.Y());
      assertEquals(0, binaryImage0.X());
      assertEquals(0, binaryImage0.count());
      
      String string0 = binaryImage0.toString();
      assertNotNull(string0);
      assertEquals((byte)0, (byte)binaryImage0.min());
      assertEquals((byte)1, (byte)binaryImage0.max());
      assertEquals(0, binaryImage0.Y());
      assertEquals(0, binaryImage0.X());
      assertEquals(0, binaryImage0.count());
      
      BinaryImage binaryImage1 = new BinaryImage(785, 2477);
      assertNotNull(binaryImage1);
      assertFalse(binaryImage1.equals((Object)binaryImage0));
      assertEquals((byte)1, (byte)binaryImage1.max());
      assertEquals((byte)0, (byte)binaryImage1.min());
      assertEquals(785, binaryImage1.X());
      assertEquals(2477, binaryImage1.Y());
      
      BinaryImage binaryImage2 = binaryImage0.intersection(binaryImage1);
      assertNotNull(binaryImage2);
      assertNotSame(binaryImage0, binaryImage1);
      assertSame(binaryImage0, binaryImage2);
      assertNotSame(binaryImage1, binaryImage2);
      assertNotSame(binaryImage1, binaryImage0);
      assertSame(binaryImage2, binaryImage0);
      assertNotSame(binaryImage2, binaryImage1);
      assertFalse(binaryImage0.equals((Object)binaryImage1));
      assertFalse(binaryImage1.equals((Object)binaryImage0));
      assertFalse(binaryImage2.equals((Object)binaryImage1));
      assertEquals((byte)0, (byte)binaryImage0.min());
      assertEquals((byte)1, (byte)binaryImage0.max());
      assertEquals(0, binaryImage0.Y());
      assertEquals(0, binaryImage0.X());
      assertEquals(0, binaryImage0.count());
      assertEquals((byte)1, (byte)binaryImage1.max());
      assertEquals((byte)0, (byte)binaryImage1.min());
      assertEquals(785, binaryImage1.X());
      assertEquals(2477, binaryImage1.Y());
      assertEquals(0, binaryImage2.Y());
      assertEquals((byte)1, (byte)binaryImage2.max());
      assertEquals((byte)0, (byte)binaryImage2.min());
      assertEquals(0, binaryImage2.X());
      assertEquals(0, binaryImage2.count());
      
      BinaryImage binaryImage3 = binaryImage2.union(binaryImage0);
      assertNotNull(binaryImage3);
      assertNotSame(binaryImage0, binaryImage1);
      assertSame(binaryImage0, binaryImage3);
      assertSame(binaryImage0, binaryImage2);
      assertNotSame(binaryImage1, binaryImage2);
      assertNotSame(binaryImage1, binaryImage0);
      assertNotSame(binaryImage1, binaryImage3);
      assertSame(binaryImage2, binaryImage0);
      assertSame(binaryImage2, binaryImage3);
      assertNotSame(binaryImage2, binaryImage1);
      assertSame(binaryImage3, binaryImage0);
      assertSame(binaryImage3, binaryImage2);
      assertNotSame(binaryImage3, binaryImage1);
      assertFalse(binaryImage0.equals((Object)binaryImage1));
      assertFalse(binaryImage1.equals((Object)binaryImage2));
      assertFalse(binaryImage1.equals((Object)binaryImage0));
      assertFalse(binaryImage2.equals((Object)binaryImage1));
      assertFalse(binaryImage3.equals((Object)binaryImage1));
      assertEquals((byte)0, (byte)binaryImage0.min());
      assertEquals((byte)1, (byte)binaryImage0.max());
      assertEquals(0, binaryImage0.Y());
      assertEquals(0, binaryImage0.X());
      assertEquals(0, binaryImage0.count());
      assertEquals((byte)1, (byte)binaryImage1.max());
      assertEquals((byte)0, (byte)binaryImage1.min());
      assertEquals(785, binaryImage1.X());
      assertEquals(2477, binaryImage1.Y());
      assertEquals(0, binaryImage2.Y());
      assertEquals((byte)1, (byte)binaryImage2.max());
      assertEquals((byte)0, (byte)binaryImage2.min());
      assertEquals(0, binaryImage2.X());
      assertEquals(0, binaryImage2.count());
      assertEquals((byte)0, (byte)binaryImage3.min());
      assertEquals((byte)1, (byte)binaryImage3.max());
      assertEquals(0, binaryImage3.X());
      assertEquals(0, binaryImage3.Y());
      assertEquals(0, binaryImage3.count());
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      BinaryImage binaryImage0 = new BinaryImage();
      assertNotNull(binaryImage0);
      assertEquals((byte)1, (byte)binaryImage0.max());
      assertEquals((byte)0, (byte)binaryImage0.min());
      assertEquals(0, binaryImage0.count());
      assertEquals(0, binaryImage0.X());
      assertEquals(0, binaryImage0.Y());
      
      Byte[][] byteArray0 = binaryImage0.getData();
      assertNotNull(byteArray0);
      assertEquals(0, byteArray0.length);
      assertEquals((byte)1, (byte)binaryImage0.max());
      assertEquals((byte)0, (byte)binaryImage0.min());
      assertEquals(0, binaryImage0.count());
      assertEquals(0, binaryImage0.X());
      assertEquals(0, binaryImage0.Y());
      
      BinaryImage binaryImage1 = new BinaryImage();
      assertNotNull(binaryImage1);
      assertFalse(binaryImage1.equals((Object)binaryImage0));
      assertEquals((byte)1, (byte)binaryImage1.max());
      assertEquals(0, binaryImage1.X());
      assertEquals(0, binaryImage1.count());
      assertEquals(0, binaryImage1.Y());
      assertEquals((byte)0, (byte)binaryImage1.min());
      
      byte[] byteArray1 = new byte[0];
      BinaryImage binaryImage2 = null;
      try {
        binaryImage2 = new BinaryImage(255, 255, byteArray1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("jigl.image.types.BinaryImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      BinaryImage binaryImage0 = new BinaryImage();
      assertNotNull(binaryImage0);
      assertEquals(0, binaryImage0.X());
      assertEquals(0, binaryImage0.count());
      assertEquals(0, binaryImage0.Y());
      assertEquals((byte)1, (byte)binaryImage0.max());
      assertEquals((byte)0, (byte)binaryImage0.min());
      
      int int0 = binaryImage0.X();
      assertEquals(0, int0);
      assertEquals(0, binaryImage0.X());
      assertEquals(0, binaryImage0.count());
      assertEquals(0, binaryImage0.Y());
      assertEquals((byte)1, (byte)binaryImage0.max());
      assertEquals((byte)0, (byte)binaryImage0.min());
      
      Byte[][] byteArray0 = binaryImage0.getData();
      assertNotNull(byteArray0);
      assertEquals(0, byteArray0.length);
      assertEquals(0, binaryImage0.X());
      assertEquals(0, binaryImage0.count());
      assertEquals(0, binaryImage0.Y());
      assertEquals((byte)1, (byte)binaryImage0.max());
      assertEquals((byte)0, (byte)binaryImage0.min());
      
      ImageProducer imageProducer0 = binaryImage0.getJavaImage();
      assertNotNull(imageProducer0);
      assertEquals(0, binaryImage0.X());
      assertEquals(0, binaryImage0.count());
      assertEquals(0, binaryImage0.Y());
      assertEquals((byte)1, (byte)binaryImage0.max());
      assertEquals((byte)0, (byte)binaryImage0.min());
      
      ROI rOI0 = new ROI(1, 1, 1, 1);
      assertNotNull(rOI0);
      assertEquals(1, rOI0.ly());
      assertEquals(1, rOI0.lx());
      assertEquals(1, rOI0.Y());
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.uy());
      assertEquals(1, rOI0.ux());
      
      int int1 = rOI0.uy();
      assertEquals(1, int1);
      assertFalse(int1 == int0);
      assertEquals(1, rOI0.ly());
      assertEquals(1, rOI0.lx());
      assertEquals(1, rOI0.Y());
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.uy());
      assertEquals(1, rOI0.ux());
      
      int int2 = rOI0.X();
      assertEquals(1, int2);
      assertFalse(int2 == int0);
      assertTrue(int2 == int1);
      assertEquals(1, rOI0.ly());
      assertEquals(1, rOI0.lx());
      assertEquals(1, rOI0.Y());
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.uy());
      assertEquals(1, rOI0.ux());
      
      int int3 = rOI0.Y();
      assertEquals(1, int3);
      assertTrue(int3 == int2);
      assertTrue(int3 == int1);
      assertFalse(int3 == int0);
      assertEquals(1, rOI0.ly());
      assertEquals(1, rOI0.lx());
      assertEquals(1, rOI0.Y());
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.uy());
      assertEquals(1, rOI0.ux());
      
      int int4 = rOI0.Y();
      assertEquals(1, int4);
      assertTrue(int4 == int1);
      assertTrue(int4 == int3);
      assertFalse(int4 == int0);
      assertTrue(int4 == int2);
      assertEquals(1, rOI0.ly());
      assertEquals(1, rOI0.lx());
      assertEquals(1, rOI0.Y());
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.uy());
      assertEquals(1, rOI0.ux());
      
      int int5 = rOI0.Y();
      assertEquals(1, int5);
      assertTrue(int5 == int1);
      assertTrue(int5 == int2);
      assertTrue(int5 == int4);
      assertTrue(int5 == int3);
      assertFalse(int5 == int0);
      assertEquals(1, rOI0.ly());
      assertEquals(1, rOI0.lx());
      assertEquals(1, rOI0.Y());
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.uy());
      assertEquals(1, rOI0.ux());
      
      // Undeclared exception!
      try { 
        binaryImage0.set(0, 1819, (Byte) null, rOI0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.BinaryImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      BinaryImage binaryImage0 = new BinaryImage(4, 4);
      assertNotNull(binaryImage0);
      assertEquals((byte)0, (byte)binaryImage0.min());
      assertEquals((byte)1, (byte)binaryImage0.max());
      assertEquals(0, binaryImage0.count());
      assertEquals(4, binaryImage0.X());
      assertEquals(4, binaryImage0.Y());
      
      int int0 = binaryImage0.count();
      assertEquals(0, int0);
      assertEquals((byte)0, (byte)binaryImage0.min());
      assertEquals((byte)1, (byte)binaryImage0.max());
      assertEquals(0, binaryImage0.count());
      assertEquals(4, binaryImage0.X());
      assertEquals(4, binaryImage0.Y());
      
      BinaryImage binaryImage1 = new BinaryImage(0, 4);
      assertNotNull(binaryImage1);
      assertFalse(binaryImage1.equals((Object)binaryImage0));
      assertEquals((byte)1, (byte)binaryImage1.max());
      assertEquals((byte)0, (byte)binaryImage1.min());
      assertEquals(4, binaryImage1.Y());
      assertEquals(0, binaryImage1.X());
      assertEquals(0, binaryImage1.count());
      
      // Undeclared exception!
      try { 
        binaryImage0.union(binaryImage1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      BinaryImage binaryImage0 = new BinaryImage(30, 30);
      assertNotNull(binaryImage0);
      assertEquals(30, binaryImage0.Y());
      assertEquals(30, binaryImage0.X());
      assertEquals(0, binaryImage0.count());
      assertEquals((byte)0, (byte)binaryImage0.min());
      assertEquals((byte)1, (byte)binaryImage0.max());
      
      // Undeclared exception!
      try { 
        binaryImage0.clear((Byte) null);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.BinaryImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      BinaryImage binaryImage0 = new BinaryImage(4, 4);
      assertNotNull(binaryImage0);
      assertEquals((byte)1, (byte)binaryImage0.max());
      assertEquals((byte)0, (byte)binaryImage0.min());
      assertEquals(4, binaryImage0.X());
      assertEquals(0, binaryImage0.count());
      assertEquals(4, binaryImage0.Y());
      
      ImageProducer imageProducer0 = binaryImage0.getJavaImage();
      assertNotNull(imageProducer0);
      assertEquals((byte)1, (byte)binaryImage0.max());
      assertEquals((byte)0, (byte)binaryImage0.min());
      assertEquals(4, binaryImage0.X());
      assertEquals(0, binaryImage0.count());
      assertEquals(4, binaryImage0.Y());
      
      BinaryImage binaryImage1 = binaryImage0.compliment();
      assertNotNull(binaryImage1);
      assertSame(binaryImage0, binaryImage1);
      assertSame(binaryImage1, binaryImage0);
      assertEquals((byte)1, (byte)binaryImage0.max());
      assertEquals((byte)0, (byte)binaryImage0.min());
      assertEquals(4, binaryImage0.X());
      assertEquals(16, binaryImage0.count());
      assertEquals(4, binaryImage0.Y());
      assertEquals(16, binaryImage1.count());
      assertEquals(4, binaryImage1.Y());
      assertEquals(4, binaryImage1.X());
      assertEquals((byte)0, (byte)binaryImage1.min());
      assertEquals((byte)1, (byte)binaryImage1.max());
      
      BinaryImage binaryImage2 = binaryImage0.union(binaryImage1);
      assertNotNull(binaryImage2);
      assertSame(binaryImage0, binaryImage2);
      assertSame(binaryImage0, binaryImage1);
      assertSame(binaryImage1, binaryImage2);
      assertSame(binaryImage1, binaryImage0);
      assertSame(binaryImage2, binaryImage0);
      assertSame(binaryImage2, binaryImage1);
      assertEquals((byte)1, (byte)binaryImage0.max());
      assertEquals((byte)0, (byte)binaryImage0.min());
      assertEquals(4, binaryImage0.X());
      assertEquals(16, binaryImage0.count());
      assertEquals(4, binaryImage0.Y());
      assertEquals(16, binaryImage1.count());
      assertEquals(4, binaryImage1.Y());
      assertEquals(4, binaryImage1.X());
      assertEquals((byte)0, (byte)binaryImage1.min());
      assertEquals((byte)1, (byte)binaryImage1.max());
      assertEquals(4, binaryImage2.X());
      assertEquals((byte)1, (byte)binaryImage2.max());
      assertEquals((byte)0, (byte)binaryImage2.min());
      assertEquals(4, binaryImage2.Y());
      assertEquals(16, binaryImage2.count());
  }

  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      int[][] intArray0 = new int[0][8];
      GrayImage grayImage0 = new GrayImage(intArray0);
      assertNotNull(grayImage0);
      assertEquals(0, intArray0.length);
      assertEquals(0, grayImage0.absSum());
      assertEquals(0, grayImage0.Y());
      assertEquals(0L, grayImage0.sqrSum());
      assertEquals(0, grayImage0.X());
      assertEquals(0, grayImage0.addSum());
      
      BinaryImage binaryImage0 = null;
      try {
        binaryImage0 = new BinaryImage((BinaryImage) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.BinaryImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      BinaryImage binaryImage0 = null;
      try {
        binaryImage0 = new BinaryImage(30, 30, (byte[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.BinaryImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      BinaryImage binaryImage0 = new BinaryImage(11, 11);
      assertNotNull(binaryImage0);
      assertEquals((byte)0, (byte)binaryImage0.min());
      assertEquals(11, binaryImage0.X());
      assertEquals((byte)1, (byte)binaryImage0.max());
      assertEquals(11, binaryImage0.Y());
      assertEquals(0, binaryImage0.count());
      
      BinaryImage binaryImage1 = binaryImage0.compliment();
      assertNotNull(binaryImage1);
      assertSame(binaryImage0, binaryImage1);
      assertSame(binaryImage1, binaryImage0);
      assertEquals((byte)0, (byte)binaryImage0.min());
      assertEquals(11, binaryImage0.X());
      assertEquals((byte)1, (byte)binaryImage0.max());
      assertEquals(121, binaryImage0.count());
      assertEquals(11, binaryImage0.Y());
      assertEquals((byte)1, (byte)binaryImage1.max());
      assertEquals((byte)0, (byte)binaryImage1.min());
      assertEquals(11, binaryImage1.Y());
      assertEquals(11, binaryImage1.X());
      assertEquals(121, binaryImage1.count());
  }

  @Test(timeout = 4000)
  public void test72()  throws Throwable  {
      BinaryImage binaryImage0 = new BinaryImage(0, 0);
      assertNotNull(binaryImage0);
      assertEquals(0, binaryImage0.count());
      assertEquals(0, binaryImage0.X());
      assertEquals(0, binaryImage0.Y());
      assertEquals((byte)0, (byte)binaryImage0.min());
      assertEquals((byte)1, (byte)binaryImage0.max());
      
      int int0 = binaryImage0.X();
      assertEquals(0, int0);
      assertEquals(0, binaryImage0.count());
      assertEquals(0, binaryImage0.X());
      assertEquals(0, binaryImage0.Y());
      assertEquals((byte)0, (byte)binaryImage0.min());
      assertEquals((byte)1, (byte)binaryImage0.max());
      
      BinaryImage binaryImage1 = binaryImage0.compliment();
      assertNotNull(binaryImage1);
      assertSame(binaryImage0, binaryImage1);
      assertSame(binaryImage1, binaryImage0);
      assertEquals(0, binaryImage0.count());
      assertEquals(0, binaryImage0.X());
      assertEquals(0, binaryImage0.Y());
      assertEquals((byte)0, (byte)binaryImage0.min());
      assertEquals((byte)1, (byte)binaryImage0.max());
      assertEquals((byte)1, (byte)binaryImage1.max());
      assertEquals(0, binaryImage1.Y());
      assertEquals(0, binaryImage1.count());
      assertEquals(0, binaryImage1.X());
      assertEquals((byte)0, (byte)binaryImage1.min());
      
      byte byte0 = (byte) (-78);
      String string0 = binaryImage0.toString();
      assertNotNull(string0);
      assertSame(binaryImage0, binaryImage1);
      assertEquals(0, binaryImage0.count());
      assertEquals(0, binaryImage0.X());
      assertEquals(0, binaryImage0.Y());
      assertEquals((byte)0, (byte)binaryImage0.min());
      assertEquals((byte)1, (byte)binaryImage0.max());
      
      Byte byte1 = Byte.valueOf((byte) (-78));
      assertNotNull(byte1);
      assertEquals((byte) (-78), (byte)byte1);
      
      int int1 = Byte.toUnsignedInt((byte) (-78));
      assertEquals(178, int1);
      assertFalse(int1 == int0);
      
      int int2 = Byte.toUnsignedInt((byte)16);
      assertEquals(16, int2);
      assertFalse(int2 == int0);
      assertFalse(int2 == int1);
      
      int int3 = Byte.toUnsignedInt((byte) (-78));
      assertEquals(178, int3);
      assertTrue(int3 == int1);
      assertFalse(int3 == int0);
      assertFalse(int3 == int2);
      
      // Undeclared exception!
      try { 
        binaryImage1.clear(byte1);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.BinaryImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test73()  throws Throwable  {
      byte[][] byteArray0 = new byte[2][4];
      byte[] byteArray1 = new byte[1];
      byteArray1[0] = (byte)1;
      byteArray0[0] = byteArray1;
      byte[] byteArray2 = new byte[5];
      assertFalse(byteArray2.equals((Object)byteArray1));
      
      byteArray2[0] = (byte)1;
      byteArray2[1] = (byte)1;
      byteArray2[2] = (byte)1;
      byteArray2[3] = (byte)1;
      byteArray2[4] = (byte)1;
      byteArray0[1] = byteArray2;
      BinaryImage binaryImage0 = null;
      try {
        binaryImage0 = new BinaryImage(byteArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1
         //
         verifyException("jigl.image.types.BinaryImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test74()  throws Throwable  {
      BinaryImage binaryImage0 = null;
      try {
        binaryImage0 = new BinaryImage((byte[][]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.BinaryImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test75()  throws Throwable  {
      BinaryImage binaryImage0 = new BinaryImage(11, 11);
      assertNotNull(binaryImage0);
      assertEquals((byte)0, (byte)binaryImage0.min());
      assertEquals((byte)1, (byte)binaryImage0.max());
      assertEquals(11, binaryImage0.X());
      assertEquals(11, binaryImage0.Y());
      assertEquals(0, binaryImage0.count());
      
      Image image0 = binaryImage0.copy();
      assertNotNull(image0);
      assertNotSame(binaryImage0, image0);
      assertEquals((byte)0, (byte)binaryImage0.min());
      assertEquals((byte)1, (byte)binaryImage0.max());
      assertEquals(11, binaryImage0.X());
      assertEquals(11, binaryImage0.Y());
      assertEquals(0, binaryImage0.count());
      assertEquals(11, image0.Y());
      assertEquals(11, image0.X());
      
      MagnitudeImage magnitudeImage0 = new MagnitudeImage(894, 0);
      assertNotNull(magnitudeImage0);
      assertEquals((-32768.0F), magnitudeImage0.max(), 0.01F);
      assertEquals(0.0F, magnitudeImage0.absSum(), 0.01F);
      assertEquals(894, magnitudeImage0.X());
      assertEquals(0, magnitudeImage0.Y());
      assertEquals(0.0F, magnitudeImage0.addSum(), 0.01F);
      assertEquals(0.0, magnitudeImage0.sqrSum(), 0.01);
      assertEquals(32767.0F, magnitudeImage0.min(), 0.01F);
      
      String string0 = magnitudeImage0.toString();
      assertNotNull(string0);
      assertEquals("894:0\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", string0);
      assertEquals((-32768.0F), magnitudeImage0.max(), 0.01F);
      assertEquals(0.0F, magnitudeImage0.absSum(), 0.01F);
      assertEquals(894, magnitudeImage0.X());
      assertEquals(0, magnitudeImage0.Y());
      assertEquals(0.0F, magnitudeImage0.addSum(), 0.01F);
      assertEquals(0.0, magnitudeImage0.sqrSum(), 0.01);
      assertEquals(32767.0F, magnitudeImage0.min(), 0.01F);
      
      BinaryImage binaryImage1 = new BinaryImage(magnitudeImage0);
      assertNotNull(binaryImage1);
      assertFalse(binaryImage1.equals((Object)image0));
      assertFalse(binaryImage1.equals((Object)binaryImage0));
      assertEquals((-32768.0F), magnitudeImage0.max(), 0.01F);
      assertEquals(0.0F, magnitudeImage0.absSum(), 0.01F);
      assertEquals(894, magnitudeImage0.X());
      assertEquals(0, magnitudeImage0.Y());
      assertEquals(0.0F, magnitudeImage0.addSum(), 0.01F);
      assertEquals(0.0, magnitudeImage0.sqrSum(), 0.01);
      assertEquals(32767.0F, magnitudeImage0.min(), 0.01F);
      assertEquals((byte)0, (byte)binaryImage1.min());
      assertEquals((byte)1, (byte)binaryImage1.max());
      assertEquals(0, binaryImage1.Y());
      assertEquals(894, binaryImage1.X());
      assertEquals(0, binaryImage1.count());
      
      BinaryImage binaryImage2 = binaryImage1.shift(11, 894);
      assertNotNull(binaryImage2);
      assertSame(binaryImage1, binaryImage2);
      assertNotSame(binaryImage1, image0);
      assertNotSame(binaryImage1, binaryImage0);
      assertSame(binaryImage2, binaryImage1);
      assertNotSame(binaryImage2, binaryImage0);
      assertNotSame(binaryImage2, image0);
      assertFalse(binaryImage1.equals((Object)image0));
      assertFalse(binaryImage1.equals((Object)binaryImage0));
      assertFalse(binaryImage2.equals((Object)binaryImage0));
      assertFalse(binaryImage2.equals((Object)image0));
      assertEquals((-32768.0F), magnitudeImage0.max(), 0.01F);
      assertEquals(0.0F, magnitudeImage0.absSum(), 0.01F);
      assertEquals(894, magnitudeImage0.X());
      assertEquals(0, magnitudeImage0.Y());
      assertEquals(0.0F, magnitudeImage0.addSum(), 0.01F);
      assertEquals(0.0, magnitudeImage0.sqrSum(), 0.01);
      assertEquals(32767.0F, magnitudeImage0.min(), 0.01F);
      assertEquals((byte)0, (byte)binaryImage1.min());
      assertEquals((byte)1, (byte)binaryImage1.max());
      assertEquals(0, binaryImage1.Y());
      assertEquals(894, binaryImage1.X());
      assertEquals(0, binaryImage1.count());
      assertEquals(0, binaryImage2.count());
      assertEquals(0, binaryImage2.Y());
      assertEquals(894, binaryImage2.X());
      assertEquals((byte)1, (byte)binaryImage2.max());
      assertEquals((byte)0, (byte)binaryImage2.min());
      
      Image image1 = binaryImage2.copy();
      assertNotNull(image1);
      assertSame(binaryImage1, binaryImage2);
      assertNotSame(binaryImage1, image0);
      assertNotSame(binaryImage1, binaryImage0);
      assertNotSame(binaryImage1, image1);
      assertSame(binaryImage2, binaryImage1);
      assertNotSame(binaryImage2, binaryImage0);
      assertNotSame(binaryImage2, image0);
      assertNotSame(binaryImage2, image1);
      assertNotSame(image1, image0);
      assertFalse(binaryImage1.equals((Object)image0));
      assertFalse(binaryImage1.equals((Object)binaryImage0));
      assertFalse(binaryImage2.equals((Object)binaryImage0));
      assertFalse(binaryImage2.equals((Object)image0));
      assertFalse(image1.equals((Object)image0));
      assertEquals((-32768.0F), magnitudeImage0.max(), 0.01F);
      assertEquals(0.0F, magnitudeImage0.absSum(), 0.01F);
      assertEquals(894, magnitudeImage0.X());
      assertEquals(0, magnitudeImage0.Y());
      assertEquals(0.0F, magnitudeImage0.addSum(), 0.01F);
      assertEquals(0.0, magnitudeImage0.sqrSum(), 0.01);
      assertEquals(32767.0F, magnitudeImage0.min(), 0.01F);
      assertEquals((byte)0, (byte)binaryImage1.min());
      assertEquals((byte)1, (byte)binaryImage1.max());
      assertEquals(0, binaryImage1.Y());
      assertEquals(894, binaryImage1.X());
      assertEquals(0, binaryImage1.count());
      assertEquals(0, binaryImage2.count());
      assertEquals(0, binaryImage2.Y());
      assertEquals(894, binaryImage2.X());
      assertEquals((byte)1, (byte)binaryImage2.max());
      assertEquals((byte)0, (byte)binaryImage2.min());
      assertEquals(894, image1.X());
      assertEquals(0, image1.Y());
  }

  @Test(timeout = 4000)
  public void test76()  throws Throwable  {
      BinaryImage binaryImage0 = new BinaryImage(11, 11);
      assertNotNull(binaryImage0);
      assertEquals((byte)1, (byte)binaryImage0.max());
      assertEquals(11, binaryImage0.X());
      assertEquals(11, binaryImage0.Y());
      assertEquals(0, binaryImage0.count());
      assertEquals((byte)0, (byte)binaryImage0.min());
      
      int int0 = binaryImage0.count();
      assertEquals(0, int0);
      assertEquals((byte)1, (byte)binaryImage0.max());
      assertEquals(11, binaryImage0.X());
      assertEquals(11, binaryImage0.Y());
      assertEquals(0, binaryImage0.count());
      assertEquals((byte)0, (byte)binaryImage0.min());
      
      BinaryImage binaryImage1 = binaryImage0.shift(1134, 11);
      assertNotNull(binaryImage1);
      assertSame(binaryImage0, binaryImage1);
      assertSame(binaryImage1, binaryImage0);
      assertEquals((byte)1, (byte)binaryImage0.max());
      assertEquals(11, binaryImage0.X());
      assertEquals(11, binaryImage0.Y());
      assertEquals(0, binaryImage0.count());
      assertEquals((byte)0, (byte)binaryImage0.min());
      assertEquals((byte)1, (byte)binaryImage1.max());
      assertEquals(11, binaryImage1.Y());
      assertEquals(11, binaryImage1.X());
      assertEquals(0, binaryImage1.count());
      assertEquals((byte)0, (byte)binaryImage1.min());
      
      ROI rOI0 = new ROI(1, 1, 1, 1);
      assertNotNull(rOI0);
      assertEquals(1, rOI0.lx());
      assertEquals(1, rOI0.Y());
      assertEquals(1, rOI0.ly());
      assertEquals(1, rOI0.ux());
      assertEquals(1, rOI0.uy());
      assertEquals(1, rOI0.X());
      
      int int1 = rOI0.uy();
      assertEquals(1, int1);
      assertFalse(int1 == int0);
      assertEquals(1, rOI0.lx());
      assertEquals(1, rOI0.Y());
      assertEquals(1, rOI0.ly());
      assertEquals(1, rOI0.ux());
      assertEquals(1, rOI0.uy());
      assertEquals(1, rOI0.X());
      
      int int2 = rOI0.X();
      assertEquals(1, int2);
      assertTrue(int2 == int1);
      assertFalse(int2 == int0);
      assertEquals(1, rOI0.lx());
      assertEquals(1, rOI0.Y());
      assertEquals(1, rOI0.ly());
      assertEquals(1, rOI0.ux());
      assertEquals(1, rOI0.uy());
      assertEquals(1, rOI0.X());
      
      int int3 = rOI0.Y();
      assertEquals(1, int3);
      assertTrue(int3 == int2);
      assertTrue(int3 == int1);
      assertFalse(int3 == int0);
      assertEquals(1, rOI0.lx());
      assertEquals(1, rOI0.Y());
      assertEquals(1, rOI0.ly());
      assertEquals(1, rOI0.ux());
      assertEquals(1, rOI0.uy());
      assertEquals(1, rOI0.X());
      
      int int4 = rOI0.Y();
      assertEquals(1, int4);
      assertTrue(int4 == int2);
      assertTrue(int4 == int3);
      assertFalse(int4 == int0);
      assertTrue(int4 == int1);
      assertEquals(1, rOI0.lx());
      assertEquals(1, rOI0.Y());
      assertEquals(1, rOI0.ly());
      assertEquals(1, rOI0.ux());
      assertEquals(1, rOI0.uy());
      assertEquals(1, rOI0.X());
      
      Image image0 = binaryImage0.copy();
      assertNotNull(image0);
      assertNotSame(binaryImage0, image0);
      assertSame(binaryImage0, binaryImage1);
      assertEquals((byte)1, (byte)binaryImage0.max());
      assertEquals(11, binaryImage0.X());
      assertEquals(11, binaryImage0.Y());
      assertEquals(0, binaryImage0.count());
      assertEquals((byte)0, (byte)binaryImage0.min());
      assertEquals(11, image0.Y());
      assertEquals(11, image0.X());
      
      int int5 = binaryImage0.count();
      assertNotSame(binaryImage0, image0);
      assertSame(binaryImage0, binaryImage1);
      assertEquals(0, int5);
      assertFalse(binaryImage0.equals((Object)image0));
      assertFalse(int5 == int3);
      assertFalse(int5 == int2);
      assertFalse(int5 == int4);
      assertTrue(int5 == int0);
      assertFalse(int5 == int1);
      assertEquals((byte)1, (byte)binaryImage0.max());
      assertEquals(11, binaryImage0.X());
      assertEquals(11, binaryImage0.Y());
      assertEquals(0, binaryImage0.count());
      assertEquals((byte)0, (byte)binaryImage0.min());
  }

  @Test(timeout = 4000)
  public void test77()  throws Throwable  {
      BinaryImage binaryImage0 = new BinaryImage();
      assertNotNull(binaryImage0);
      assertEquals((byte)0, (byte)binaryImage0.min());
      assertEquals((byte)1, (byte)binaryImage0.max());
      assertEquals(0, binaryImage0.count());
      assertEquals(0, binaryImage0.Y());
      assertEquals(0, binaryImage0.X());
      
      Byte[][] byteArray0 = binaryImage0.getData();
      assertNotNull(byteArray0);
      assertEquals(0, byteArray0.length);
      assertEquals((byte)0, (byte)binaryImage0.min());
      assertEquals((byte)1, (byte)binaryImage0.max());
      assertEquals(0, binaryImage0.count());
      assertEquals(0, binaryImage0.Y());
      assertEquals(0, binaryImage0.X());
      
      Image image0 = binaryImage0.copy();
      assertNotNull(image0);
      assertNotSame(binaryImage0, image0);
      assertEquals((byte)0, (byte)binaryImage0.min());
      assertEquals((byte)1, (byte)binaryImage0.max());
      assertEquals(0, binaryImage0.count());
      assertEquals(0, binaryImage0.Y());
      assertEquals(0, binaryImage0.X());
      assertEquals(0, image0.Y());
      assertEquals(0, image0.X());
      
      // Undeclared exception!
      try { 
        binaryImage0.set((-1398), (-1398), (Byte) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.BinaryImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test78()  throws Throwable  {
      int[][] intArray0 = new int[0][8];
      GrayImage grayImage0 = new GrayImage(intArray0);
      assertNotNull(grayImage0);
      assertEquals(0, intArray0.length);
      assertEquals(0, grayImage0.absSum());
      assertEquals(0, grayImage0.Y());
      assertEquals(0L, grayImage0.sqrSum());
      assertEquals(0, grayImage0.addSum());
      assertEquals(0, grayImage0.X());
      
      GrayImage grayImage1 = grayImage0.multiply(11);
      assertNotNull(grayImage1);
      assertSame(grayImage0, grayImage1);
      assertSame(grayImage1, grayImage0);
      assertEquals(0, intArray0.length);
      assertEquals(0, grayImage0.absSum());
      assertEquals(0, grayImage0.Y());
      assertEquals(0L, grayImage0.sqrSum());
      assertEquals(0, grayImage0.addSum());
      assertEquals(0, grayImage0.X());
      assertEquals(0, grayImage1.absSum());
      assertEquals(0, grayImage1.X());
      assertEquals(0L, grayImage1.sqrSum());
      assertEquals(0, grayImage1.addSum());
      assertEquals(0, grayImage1.Y());
      
      BinaryImage binaryImage0 = new BinaryImage(grayImage1);
      assertNotNull(binaryImage0);
      assertEquals(0, intArray0.length);
      assertEquals(0, grayImage0.absSum());
      assertEquals(0, grayImage0.Y());
      assertEquals(0L, grayImage0.sqrSum());
      assertEquals(0, grayImage0.addSum());
      assertEquals(0, grayImage0.X());
      assertEquals(0, grayImage1.absSum());
      assertEquals(0, grayImage1.X());
      assertEquals(0L, grayImage1.sqrSum());
      assertEquals(0, grayImage1.addSum());
      assertEquals(0, grayImage1.Y());
      assertEquals((byte)0, (byte)binaryImage0.min());
      assertEquals((byte)1, (byte)binaryImage0.max());
      assertEquals(0, binaryImage0.Y());
      assertEquals(0, binaryImage0.count());
      assertEquals(0, binaryImage0.X());
      
      Byte byte0 = Byte.valueOf((byte)38);
      assertNotNull(byte0);
      assertEquals((byte)38, (byte)byte0);
      
      Image image0 = binaryImage0.copy();
      assertNotNull(image0);
      assertSame(grayImage0, grayImage1);
      assertSame(grayImage1, grayImage0);
      assertNotSame(binaryImage0, image0);
      assertEquals(0, intArray0.length);
      assertEquals(0, grayImage0.absSum());
      assertEquals(0, grayImage0.Y());
      assertEquals(0L, grayImage0.sqrSum());
      assertEquals(0, grayImage0.addSum());
      assertEquals(0, grayImage0.X());
      assertEquals(0, grayImage1.absSum());
      assertEquals(0, grayImage1.X());
      assertEquals(0L, grayImage1.sqrSum());
      assertEquals(0, grayImage1.addSum());
      assertEquals(0, grayImage1.Y());
      assertEquals((byte)0, (byte)binaryImage0.min());
      assertEquals((byte)1, (byte)binaryImage0.max());
      assertEquals(0, binaryImage0.Y());
      assertEquals(0, binaryImage0.count());
      assertEquals(0, binaryImage0.X());
      assertEquals(0, image0.X());
      assertEquals(0, image0.Y());
      
      ROI rOI0 = new ROI();
      assertNotNull(rOI0);
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      assertEquals(1, rOI0.Y());
      assertEquals(1, rOI0.X());
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      
      int int0 = rOI0.ux();
      assertEquals(0, int0);
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      assertEquals(1, rOI0.Y());
      assertEquals(1, rOI0.X());
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      
      int int1 = rOI0.lx();
      assertEquals(0, int1);
      assertTrue(int1 == int0);
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      assertEquals(1, rOI0.Y());
      assertEquals(1, rOI0.X());
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      
      int int2 = rOI0.ux();
      assertEquals(0, int2);
      assertTrue(int2 == int0);
      assertTrue(int2 == int1);
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      assertEquals(1, rOI0.Y());
      assertEquals(1, rOI0.X());
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      
      int int3 = rOI0.ly();
      assertEquals(0, int3);
      assertTrue(int3 == int0);
      assertTrue(int3 == int1);
      assertTrue(int3 == int2);
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      assertEquals(1, rOI0.Y());
      assertEquals(1, rOI0.X());
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      
      // Undeclared exception!
      try { 
        binaryImage0.copy(rOI0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("jigl.image.types.BinaryImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test79()  throws Throwable  {
      BinaryImage binaryImage0 = new BinaryImage();
      assertNotNull(binaryImage0);
      assertEquals((byte)1, (byte)binaryImage0.max());
      assertEquals(0, binaryImage0.Y());
      assertEquals(0, binaryImage0.X());
      assertEquals(0, binaryImage0.count());
      assertEquals((byte)0, (byte)binaryImage0.min());
      
      Byte byte0 = new Byte((byte)7);
      assertNotNull(byte0);
      assertEquals((byte)7, (byte)byte0);
      
      byte byte1 = byte0.byteValue();
      assertEquals((byte)7, byte1);
      
      // Undeclared exception!
      try { 
        binaryImage0.set(11, 488, (Byte) (byte)7, (ROI) null);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.BinaryImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test80()  throws Throwable  {
      BinaryImage binaryImage0 = new BinaryImage(11, 11);
      assertNotNull(binaryImage0);
      assertEquals((byte)1, (byte)binaryImage0.max());
      assertEquals((byte)0, (byte)binaryImage0.min());
      assertEquals(11, binaryImage0.X());
      assertEquals(11, binaryImage0.Y());
      assertEquals(0, binaryImage0.count());
      
      int int0 = binaryImage0.count();
      assertEquals(0, int0);
      assertEquals((byte)1, (byte)binaryImage0.max());
      assertEquals((byte)0, (byte)binaryImage0.min());
      assertEquals(11, binaryImage0.X());
      assertEquals(11, binaryImage0.Y());
      assertEquals(0, binaryImage0.count());
      
      ROI rOI0 = new ROI(1, 1, 1, 1);
      assertNotNull(rOI0);
      assertEquals(1, rOI0.Y());
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.ly());
      assertEquals(1, rOI0.lx());
      assertEquals(1, rOI0.ux());
      assertEquals(1, rOI0.uy());
      
      int int1 = rOI0.uy();
      assertEquals(1, int1);
      assertFalse(int1 == int0);
      assertEquals(1, rOI0.Y());
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.ly());
      assertEquals(1, rOI0.lx());
      assertEquals(1, rOI0.ux());
      assertEquals(1, rOI0.uy());
      
      int int2 = rOI0.X();
      assertEquals(1, int2);
      assertFalse(int2 == int0);
      assertTrue(int2 == int1);
      assertEquals(1, rOI0.Y());
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.ly());
      assertEquals(1, rOI0.lx());
      assertEquals(1, rOI0.ux());
      assertEquals(1, rOI0.uy());
      
      int int3 = rOI0.Y();
      assertEquals(1, int3);
      assertTrue(int3 == int1);
      assertFalse(int3 == int0);
      assertTrue(int3 == int2);
      assertEquals(1, rOI0.Y());
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.ly());
      assertEquals(1, rOI0.lx());
      assertEquals(1, rOI0.ux());
      assertEquals(1, rOI0.uy());
      
      int int4 = rOI0.Y();
      assertEquals(1, int4);
      assertTrue(int4 == int3);
      assertFalse(int4 == int0);
      assertTrue(int4 == int1);
      assertTrue(int4 == int2);
      assertEquals(1, rOI0.Y());
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.ly());
      assertEquals(1, rOI0.lx());
      assertEquals(1, rOI0.ux());
      assertEquals(1, rOI0.uy());
      
      int int5 = rOI0.Y();
      assertEquals(1, int5);
      assertTrue(int5 == int4);
      assertTrue(int5 == int2);
      assertTrue(int5 == int3);
      assertFalse(int5 == int0);
      assertTrue(int5 == int1);
      assertEquals(1, rOI0.Y());
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.ly());
      assertEquals(1, rOI0.lx());
      assertEquals(1, rOI0.ux());
      assertEquals(1, rOI0.uy());
      
      Image image0 = binaryImage0.copy(rOI0);
      assertNotNull(image0);
      assertNotSame(binaryImage0, image0);
      assertEquals((byte)1, (byte)binaryImage0.max());
      assertEquals((byte)0, (byte)binaryImage0.min());
      assertEquals(11, binaryImage0.X());
      assertEquals(11, binaryImage0.Y());
      assertEquals(0, binaryImage0.count());
      assertEquals(1, rOI0.Y());
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.ly());
      assertEquals(1, rOI0.lx());
      assertEquals(1, rOI0.ux());
      assertEquals(1, rOI0.uy());
      assertEquals(1, image0.X());
      assertEquals(1, image0.Y());
  }

  @Test(timeout = 4000)
  public void test81()  throws Throwable  {
      int[][] intArray0 = new int[1][8];
      GrayImage grayImage0 = new GrayImage(intArray0);
      assertNotNull(grayImage0);
      assertEquals(1, intArray0.length);
      assertEquals(8, grayImage0.X());
      assertEquals(1, grayImage0.Y());
      
      Integer integer0 = new Integer((-216));
      assertNotNull(integer0);
      assertEquals((-216), (int)integer0);
      
      BinaryImage binaryImage0 = new BinaryImage();
      assertNotNull(binaryImage0);
      assertEquals((byte)1, (byte)binaryImage0.max());
      assertEquals(0, binaryImage0.Y());
      assertEquals(0, binaryImage0.count());
      assertEquals(0, binaryImage0.X());
      assertEquals((byte)0, (byte)binaryImage0.min());
      
      BinaryImage binaryImage1 = null;
      try {
        binaryImage1 = new BinaryImage(grayImage0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1
         //
         verifyException("jigl.image.types.GrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test82()  throws Throwable  {
      byte[][] byteArray0 = new byte[1][6];
      byte[] byteArray1 = new byte[3];
      byteArray1[0] = (byte)16;
      byteArray1[1] = (byte) (-1);
      byteArray1[2] = (byte)6;
      byteArray0[0] = byteArray1;
      BinaryImage binaryImage0 = new BinaryImage(byteArray0);
      assertNotNull(binaryImage0);
      assertEquals(1, byteArray0.length);
      assertEquals(3, binaryImage0.X());
      assertEquals(2, binaryImage0.count());
      assertEquals(1, binaryImage0.Y());
      assertEquals((byte)1, (byte)binaryImage0.max());
      assertEquals((byte)0, (byte)binaryImage0.min());
      
      BinaryImage binaryImage1 = new BinaryImage(binaryImage0);
      assertNotNull(binaryImage1);
      assertEquals(1, byteArray0.length);
      assertFalse(binaryImage1.equals((Object)binaryImage0));
      assertEquals(3, binaryImage0.X());
      assertEquals(2, binaryImage0.count());
      assertEquals(1, binaryImage0.Y());
      assertEquals((byte)1, (byte)binaryImage0.max());
      assertEquals((byte)0, (byte)binaryImage0.min());
      assertEquals(1, binaryImage1.Y());
      assertEquals(3, binaryImage1.X());
      assertEquals(2, binaryImage1.count());
      assertEquals((byte)1, (byte)binaryImage1.max());
      assertEquals((byte)0, (byte)binaryImage1.min());
      
      // Undeclared exception!
      try { 
        binaryImage1.getData();
        fail("Expecting exception: ArrayStoreException");
      
      } catch(ArrayStoreException e) {
      }
  }

  @Test(timeout = 4000)
  public void test83()  throws Throwable  {
      BinaryImage binaryImage0 = new BinaryImage(11, 11);
      assertNotNull(binaryImage0);
      assertEquals((byte)0, (byte)binaryImage0.min());
      assertEquals((byte)1, (byte)binaryImage0.max());
      assertEquals(11, binaryImage0.Y());
      assertEquals(11, binaryImage0.X());
      assertEquals(0, binaryImage0.count());
      
      int int0 = binaryImage0.count();
      assertEquals(0, int0);
      assertEquals((byte)0, (byte)binaryImage0.min());
      assertEquals((byte)1, (byte)binaryImage0.max());
      assertEquals(11, binaryImage0.Y());
      assertEquals(11, binaryImage0.X());
      assertEquals(0, binaryImage0.count());
      
      ROI rOI0 = new ROI((-954), 2, 11, 2);
      assertNotNull(rOI0);
      assertEquals(2, rOI0.uy());
      assertEquals(2, rOI0.ly());
      assertEquals(11, rOI0.lx());
      assertEquals(966, rOI0.X());
      assertEquals((-954), rOI0.ux());
      assertEquals(1, rOI0.Y());
      
      ROI rOI1 = new ROI();
      assertNotNull(rOI1);
      assertFalse(rOI1.equals((Object)rOI0));
      assertEquals(1, rOI1.Y());
      assertEquals(1, rOI1.X());
      assertEquals(0, rOI1.lx());
      assertEquals(0, rOI1.ly());
      assertEquals(0, rOI1.uy());
      assertEquals(0, rOI1.ux());
      
      int int1 = new Integer(11);
      assertEquals(11, int1);
      assertFalse(int1 == int0);
      
      int int2 = rOI1.lx();
      assertNotSame(rOI1, rOI0);
      assertEquals(0, int2);
      assertFalse(rOI1.equals((Object)rOI0));
      assertTrue(int2 == int0);
      assertFalse(int2 == int1);
      assertEquals(1, rOI1.Y());
      assertEquals(1, rOI1.X());
      assertEquals(0, rOI1.lx());
      assertEquals(0, rOI1.ly());
      assertEquals(0, rOI1.uy());
      assertEquals(0, rOI1.ux());
      
      int int3 = rOI1.ux();
      assertNotSame(rOI1, rOI0);
      assertEquals(0, int3);
      assertFalse(rOI1.equals((Object)rOI0));
      assertFalse(int3 == int1);
      assertTrue(int3 == int0);
      assertTrue(int3 == int2);
      assertEquals(1, rOI1.Y());
      assertEquals(1, rOI1.X());
      assertEquals(0, rOI1.lx());
      assertEquals(0, rOI1.ly());
      assertEquals(0, rOI1.uy());
      assertEquals(0, rOI1.ux());
      
      int int4 = rOI1.ly();
      assertNotSame(rOI1, rOI0);
      assertEquals(0, int4);
      assertFalse(rOI1.equals((Object)rOI0));
      assertFalse(int4 == int1);
      assertTrue(int4 == int2);
      assertTrue(int4 == int3);
      assertTrue(int4 == int0);
      assertEquals(1, rOI1.Y());
      assertEquals(1, rOI1.X());
      assertEquals(0, rOI1.lx());
      assertEquals(0, rOI1.ly());
      assertEquals(0, rOI1.uy());
      assertEquals(0, rOI1.ux());
      
      int int5 = rOI1.uy();
      assertNotSame(rOI1, rOI0);
      assertEquals(0, int5);
      assertFalse(rOI1.equals((Object)rOI0));
      assertTrue(int5 == int3);
      assertTrue(int5 == int0);
      assertFalse(int5 == int1);
      assertTrue(int5 == int4);
      assertTrue(int5 == int2);
      assertEquals(1, rOI1.Y());
      assertEquals(1, rOI1.X());
      assertEquals(0, rOI1.lx());
      assertEquals(0, rOI1.ly());
      assertEquals(0, rOI1.uy());
      assertEquals(0, rOI1.ux());
      
      int int6 = rOI0.X();
      assertNotSame(rOI0, rOI1);
      assertEquals(966, int6);
      assertFalse(rOI0.equals((Object)rOI1));
      assertFalse(int6 == int2);
      assertFalse(int6 == int5);
      assertFalse(int6 == int1);
      assertFalse(int6 == int4);
      assertFalse(int6 == int3);
      assertFalse(int6 == int0);
      assertEquals(2, rOI0.uy());
      assertEquals(2, rOI0.ly());
      assertEquals(11, rOI0.lx());
      assertEquals(966, rOI0.X());
      assertEquals((-954), rOI0.ux());
      assertEquals(1, rOI0.Y());
      
      int int7 = rOI1.Y();
      assertNotSame(rOI1, rOI0);
      assertEquals(1, int7);
      assertFalse(rOI1.equals((Object)rOI0));
      assertFalse(int7 == int5);
      assertFalse(int7 == int6);
      assertFalse(int7 == int2);
      assertFalse(int7 == int0);
      assertFalse(int7 == int3);
      assertFalse(int7 == int4);
      assertFalse(int7 == int1);
      assertEquals(1, rOI1.Y());
      assertEquals(1, rOI1.X());
      assertEquals(0, rOI1.lx());
      assertEquals(0, rOI1.ly());
      assertEquals(0, rOI1.uy());
      assertEquals(0, rOI1.ux());
      
      int int8 = rOI1.Y();
      assertNotSame(rOI1, rOI0);
      assertEquals(1, int8);
      assertFalse(rOI1.equals((Object)rOI0));
      assertFalse(int8 == int5);
      assertFalse(int8 == int0);
      assertFalse(int8 == int6);
      assertFalse(int8 == int1);
      assertTrue(int8 == int7);
      assertFalse(int8 == int4);
      assertFalse(int8 == int3);
      assertFalse(int8 == int2);
      assertEquals(1, rOI1.Y());
      assertEquals(1, rOI1.X());
      assertEquals(0, rOI1.lx());
      assertEquals(0, rOI1.ly());
      assertEquals(0, rOI1.uy());
      assertEquals(0, rOI1.ux());
      
      int int9 = rOI1.Y();
      assertNotSame(rOI1, rOI0);
      assertEquals(1, int9);
      assertFalse(rOI1.equals((Object)rOI0));
      assertFalse(int9 == int2);
      assertFalse(int9 == int5);
      assertFalse(int9 == int6);
      assertFalse(int9 == int1);
      assertTrue(int9 == int7);
      assertFalse(int9 == int4);
      assertFalse(int9 == int3);
      assertFalse(int9 == int0);
      assertTrue(int9 == int8);
      assertEquals(1, rOI1.Y());
      assertEquals(1, rOI1.X());
      assertEquals(0, rOI1.lx());
      assertEquals(0, rOI1.ly());
      assertEquals(0, rOI1.uy());
      assertEquals(0, rOI1.ux());
      
      Image image0 = binaryImage0.copy(rOI1);
      assertNotNull(image0);
      assertNotSame(binaryImage0, image0);
      assertNotSame(rOI1, rOI0);
      assertFalse(rOI1.equals((Object)rOI0));
      assertEquals((byte)0, (byte)binaryImage0.min());
      assertEquals((byte)1, (byte)binaryImage0.max());
      assertEquals(11, binaryImage0.Y());
      assertEquals(11, binaryImage0.X());
      assertEquals(0, binaryImage0.count());
      assertEquals(1, rOI1.Y());
      assertEquals(1, rOI1.X());
      assertEquals(0, rOI1.lx());
      assertEquals(0, rOI1.ly());
      assertEquals(0, rOI1.uy());
      assertEquals(0, rOI1.ux());
      assertEquals(1, image0.Y());
      assertEquals(1, image0.X());
      
      int int10 = binaryImage0.count();
      assertNotSame(binaryImage0, image0);
      assertEquals(0, int10);
      assertFalse(binaryImage0.equals((Object)image0));
      assertFalse(int10 == int8);
      assertFalse(int10 == int9);
      assertTrue(int10 == int2);
      assertFalse(int10 == int6);
      assertTrue(int10 == int4);
      assertTrue(int10 == int0);
      assertFalse(int10 == int1);
      assertTrue(int10 == int3);
      assertFalse(int10 == int7);
      assertTrue(int10 == int5);
      assertEquals((byte)0, (byte)binaryImage0.min());
      assertEquals((byte)1, (byte)binaryImage0.max());
      assertEquals(11, binaryImage0.Y());
      assertEquals(11, binaryImage0.X());
      assertEquals(0, binaryImage0.count());
  }

  @Test(timeout = 4000)
  public void test84()  throws Throwable  {
      int[][] intArray0 = new int[1][5];
      int[] intArray1 = new int[9];
      intArray1[0] = 11;
      intArray1[2] = 11;
      intArray1[3] = 11;
      intArray1[4] = 11;
      intArray1[5] = 11;
      intArray1[6] = 11;
      intArray1[7] = 11;
      intArray1[8] = 11;
      intArray0[0] = intArray1;
      GrayImage grayImage0 = new GrayImage(intArray0);
      assertNotNull(grayImage0);
      assertEquals(1, intArray0.length);
      assertEquals(1, grayImage0.Y());
      assertEquals(9, grayImage0.X());
      
      BinaryImage binaryImage0 = null;
      try {
        binaryImage0 = new BinaryImage(grayImage0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1
         //
         verifyException("jigl.image.types.GrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test85()  throws Throwable  {
      BinaryImage binaryImage0 = new BinaryImage(21, 21);
      assertNotNull(binaryImage0);
      assertEquals(0, binaryImage0.count());
      assertEquals((byte)1, (byte)binaryImage0.max());
      assertEquals(21, binaryImage0.Y());
      assertEquals(21, binaryImage0.X());
      assertEquals((byte)0, (byte)binaryImage0.min());
      
      BinaryImage binaryImage1 = binaryImage0.difference(binaryImage0);
      assertNotNull(binaryImage1);
      assertSame(binaryImage0, binaryImage1);
      assertSame(binaryImage1, binaryImage0);
      assertEquals(0, binaryImage0.count());
      assertEquals((byte)1, (byte)binaryImage0.max());
      assertEquals(21, binaryImage0.Y());
      assertEquals(21, binaryImage0.X());
      assertEquals((byte)0, (byte)binaryImage0.min());
      assertEquals(0, binaryImage1.count());
      assertEquals(21, binaryImage1.X());
      assertEquals((byte)0, (byte)binaryImage1.min());
      assertEquals(21, binaryImage1.Y());
      assertEquals((byte)1, (byte)binaryImage1.max());
      
      Byte byte0 = binaryImage1.max();
      assertNotNull(byte0);
      assertSame(binaryImage0, binaryImage1);
      assertSame(binaryImage1, binaryImage0);
      assertEquals((byte)1, (byte)byte0);
      assertEquals(0, binaryImage0.count());
      assertEquals((byte)1, (byte)binaryImage0.max());
      assertEquals(21, binaryImage0.Y());
      assertEquals(21, binaryImage0.X());
      assertEquals((byte)0, (byte)binaryImage0.min());
      assertEquals(0, binaryImage1.count());
      assertEquals(21, binaryImage1.X());
      assertEquals((byte)0, (byte)binaryImage1.min());
      assertEquals(21, binaryImage1.Y());
      assertEquals((byte)1, (byte)binaryImage1.max());
  }

  @Test(timeout = 4000)
  public void test86()  throws Throwable  {
      BinaryImage binaryImage0 = new BinaryImage(11, 11);
      assertNotNull(binaryImage0);
      assertEquals((byte)0, (byte)binaryImage0.min());
      assertEquals((byte)1, (byte)binaryImage0.max());
      assertEquals(11, binaryImage0.Y());
      assertEquals(0, binaryImage0.count());
      assertEquals(11, binaryImage0.X());
      
      int int0 = binaryImage0.count();
      assertEquals(0, int0);
      assertEquals((byte)0, (byte)binaryImage0.min());
      assertEquals((byte)1, (byte)binaryImage0.max());
      assertEquals(11, binaryImage0.Y());
      assertEquals(0, binaryImage0.count());
      assertEquals(11, binaryImage0.X());
      
      BinaryImage binaryImage1 = new BinaryImage(binaryImage0);
      assertNotNull(binaryImage1);
      assertFalse(binaryImage1.equals((Object)binaryImage0));
      assertEquals((byte)0, (byte)binaryImage0.min());
      assertEquals((byte)1, (byte)binaryImage0.max());
      assertEquals(11, binaryImage0.Y());
      assertEquals(0, binaryImage0.count());
      assertEquals(11, binaryImage0.X());
      assertEquals(11, binaryImage1.Y());
      assertEquals(11, binaryImage1.X());
      assertEquals((byte)1, (byte)binaryImage1.max());
      assertEquals((byte)0, (byte)binaryImage1.min());
      assertEquals(0, binaryImage1.count());
      
      BinaryImage binaryImage2 = binaryImage0.intersection(binaryImage1);
      assertNotNull(binaryImage2);
      assertNotSame(binaryImage0, binaryImage1);
      assertSame(binaryImage0, binaryImage2);
      assertNotSame(binaryImage1, binaryImage0);
      assertNotSame(binaryImage1, binaryImage2);
      assertSame(binaryImage2, binaryImage0);
      assertNotSame(binaryImage2, binaryImage1);
      assertFalse(binaryImage0.equals((Object)binaryImage1));
      assertFalse(binaryImage1.equals((Object)binaryImage0));
      assertFalse(binaryImage2.equals((Object)binaryImage1));
      assertEquals((byte)0, (byte)binaryImage0.min());
      assertEquals((byte)1, (byte)binaryImage0.max());
      assertEquals(11, binaryImage0.Y());
      assertEquals(0, binaryImage0.count());
      assertEquals(11, binaryImage0.X());
      assertEquals(11, binaryImage1.Y());
      assertEquals(11, binaryImage1.X());
      assertEquals((byte)1, (byte)binaryImage1.max());
      assertEquals((byte)0, (byte)binaryImage1.min());
      assertEquals(0, binaryImage1.count());
      assertEquals((byte)1, (byte)binaryImage2.max());
      assertEquals(0, binaryImage2.count());
      assertEquals(11, binaryImage2.X());
      assertEquals(11, binaryImage2.Y());
      assertEquals((byte)0, (byte)binaryImage2.min());
      
      String string0 = binaryImage0.toString();
      assertNotNull(string0);
      assertNotSame(binaryImage0, binaryImage1);
      assertSame(binaryImage0, binaryImage2);
      assertFalse(binaryImage0.equals((Object)binaryImage1));
      assertEquals((byte)0, (byte)binaryImage0.min());
      assertEquals((byte)1, (byte)binaryImage0.max());
      assertEquals(11, binaryImage0.Y());
      assertEquals(0, binaryImage0.count());
      assertEquals(11, binaryImage0.X());
      
      BinaryImage binaryImage3 = binaryImage2.shift((-2), 2);
      assertNotNull(binaryImage3);
      assertNotSame(binaryImage0, binaryImage1);
      assertSame(binaryImage0, binaryImage3);
      assertSame(binaryImage0, binaryImage2);
      assertNotSame(binaryImage1, binaryImage0);
      assertNotSame(binaryImage1, binaryImage2);
      assertNotSame(binaryImage1, binaryImage3);
      assertSame(binaryImage2, binaryImage3);
      assertSame(binaryImage2, binaryImage0);
      assertNotSame(binaryImage2, binaryImage1);
      assertSame(binaryImage3, binaryImage2);
      assertNotSame(binaryImage3, binaryImage1);
      assertSame(binaryImage3, binaryImage0);
      assertFalse(binaryImage0.equals((Object)binaryImage1));
      assertFalse(binaryImage1.equals((Object)binaryImage0));
      assertFalse(binaryImage1.equals((Object)binaryImage2));
      assertFalse(binaryImage2.equals((Object)binaryImage1));
      assertFalse(binaryImage3.equals((Object)binaryImage1));
      assertEquals((byte)0, (byte)binaryImage0.min());
      assertEquals((byte)1, (byte)binaryImage0.max());
      assertEquals(11, binaryImage0.Y());
      assertEquals(0, binaryImage0.count());
      assertEquals(11, binaryImage0.X());
      assertEquals(11, binaryImage1.Y());
      assertEquals(11, binaryImage1.X());
      assertEquals((byte)1, (byte)binaryImage1.max());
      assertEquals((byte)0, (byte)binaryImage1.min());
      assertEquals(0, binaryImage1.count());
      assertEquals((byte)1, (byte)binaryImage2.max());
      assertEquals(0, binaryImage2.count());
      assertEquals(11, binaryImage2.X());
      assertEquals(11, binaryImage2.Y());
      assertEquals((byte)0, (byte)binaryImage2.min());
      assertEquals(0, binaryImage3.count());
      assertEquals(11, binaryImage3.Y());
      assertEquals(11, binaryImage3.X());
      assertEquals((byte)1, (byte)binaryImage3.max());
      assertEquals((byte)0, (byte)binaryImage3.min());
      
      BinaryImage binaryImage4 = new BinaryImage();
      assertNotNull(binaryImage4);
      assertFalse(binaryImage4.equals((Object)binaryImage2));
      assertFalse(binaryImage4.equals((Object)binaryImage1));
      assertFalse(binaryImage4.equals((Object)binaryImage3));
      assertFalse(binaryImage4.equals((Object)binaryImage0));
      assertEquals(0, binaryImage4.count());
      assertEquals((byte)0, (byte)binaryImage4.min());
      assertEquals((byte)1, (byte)binaryImage4.max());
      assertEquals(0, binaryImage4.Y());
      assertEquals(0, binaryImage4.X());
      
      BinaryImage binaryImage5 = binaryImage4.difference(binaryImage3);
      assertNotNull(binaryImage5);
      assertNotSame(binaryImage0, binaryImage1);
      assertSame(binaryImage0, binaryImage3);
      assertSame(binaryImage0, binaryImage2);
      assertNotSame(binaryImage0, binaryImage4);
      assertNotSame(binaryImage0, binaryImage5);
      assertNotSame(binaryImage1, binaryImage4);
      assertNotSame(binaryImage1, binaryImage0);
      assertNotSame(binaryImage1, binaryImage2);
      assertNotSame(binaryImage1, binaryImage5);
      assertNotSame(binaryImage1, binaryImage3);
      assertSame(binaryImage2, binaryImage3);
      assertNotSame(binaryImage2, binaryImage5);
      assertNotSame(binaryImage2, binaryImage4);
      assertSame(binaryImage2, binaryImage0);
      assertNotSame(binaryImage2, binaryImage1);
      assertNotSame(binaryImage3, binaryImage4);
      assertSame(binaryImage3, binaryImage2);
      assertNotSame(binaryImage3, binaryImage5);
      assertNotSame(binaryImage3, binaryImage1);
      assertSame(binaryImage3, binaryImage0);
      assertNotSame(binaryImage4, binaryImage2);
      assertNotSame(binaryImage4, binaryImage1);
      assertSame(binaryImage4, binaryImage5);
      assertNotSame(binaryImage4, binaryImage3);
      assertNotSame(binaryImage4, binaryImage0);
      assertNotSame(binaryImage5, binaryImage0);
      assertNotSame(binaryImage5, binaryImage2);
      assertNotSame(binaryImage5, binaryImage3);
      assertSame(binaryImage5, binaryImage4);
      assertNotSame(binaryImage5, binaryImage1);
      assertFalse(binaryImage0.equals((Object)binaryImage1));
      assertFalse(binaryImage0.equals((Object)binaryImage4));
      assertFalse(binaryImage1.equals((Object)binaryImage4));
      assertFalse(binaryImage1.equals((Object)binaryImage0));
      assertFalse(binaryImage1.equals((Object)binaryImage2));
      assertFalse(binaryImage1.equals((Object)binaryImage3));
      assertFalse(binaryImage2.equals((Object)binaryImage4));
      assertFalse(binaryImage2.equals((Object)binaryImage1));
      assertFalse(binaryImage3.equals((Object)binaryImage4));
      assertFalse(binaryImage3.equals((Object)binaryImage1));
      assertFalse(binaryImage4.equals((Object)binaryImage2));
      assertFalse(binaryImage4.equals((Object)binaryImage1));
      assertFalse(binaryImage4.equals((Object)binaryImage3));
      assertFalse(binaryImage4.equals((Object)binaryImage0));
      assertFalse(binaryImage5.equals((Object)binaryImage0));
      assertFalse(binaryImage5.equals((Object)binaryImage2));
      assertFalse(binaryImage5.equals((Object)binaryImage3));
      assertFalse(binaryImage5.equals((Object)binaryImage1));
      assertEquals((byte)0, (byte)binaryImage0.min());
      assertEquals((byte)1, (byte)binaryImage0.max());
      assertEquals(11, binaryImage0.Y());
      assertEquals(0, binaryImage0.count());
      assertEquals(11, binaryImage0.X());
      assertEquals(11, binaryImage1.Y());
      assertEquals(11, binaryImage1.X());
      assertEquals((byte)1, (byte)binaryImage1.max());
      assertEquals((byte)0, (byte)binaryImage1.min());
      assertEquals(0, binaryImage1.count());
      assertEquals((byte)1, (byte)binaryImage2.max());
      assertEquals(0, binaryImage2.count());
      assertEquals(11, binaryImage2.X());
      assertEquals(11, binaryImage2.Y());
      assertEquals((byte)0, (byte)binaryImage2.min());
      assertEquals(0, binaryImage3.count());
      assertEquals(11, binaryImage3.Y());
      assertEquals(11, binaryImage3.X());
      assertEquals((byte)1, (byte)binaryImage3.max());
      assertEquals((byte)0, (byte)binaryImage3.min());
      assertEquals(0, binaryImage4.count());
      assertEquals((byte)0, (byte)binaryImage4.min());
      assertEquals((byte)1, (byte)binaryImage4.max());
      assertEquals(0, binaryImage4.Y());
      assertEquals(0, binaryImage4.X());
      assertEquals(0, binaryImage5.Y());
      assertEquals(0, binaryImage5.count());
      assertEquals(0, binaryImage5.X());
      assertEquals((byte)0, (byte)binaryImage5.min());
      assertEquals((byte)1, (byte)binaryImage5.max());
  }

  @Test(timeout = 4000)
  public void test87()  throws Throwable  {
      int[][] intArray0 = new int[1][8];
      GrayImage grayImage0 = new GrayImage(intArray0);
      assertNotNull(grayImage0);
      assertEquals(1, intArray0.length);
      assertEquals(8, grayImage0.X());
      assertEquals(1, grayImage0.Y());
      
      BinaryImage binaryImage0 = null;
      try {
        binaryImage0 = new BinaryImage(grayImage0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1
         //
         verifyException("jigl.image.types.GrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test88()  throws Throwable  {
      BinaryImage binaryImage0 = null;
      try {
        binaryImage0 = new BinaryImage((-3), (-3));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.BinaryImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test89()  throws Throwable  {
      BinaryImage binaryImage0 = new BinaryImage(11, 11);
      assertNotNull(binaryImage0);
      assertEquals(11, binaryImage0.X());
      assertEquals(0, binaryImage0.count());
      assertEquals((byte)1, (byte)binaryImage0.max());
      assertEquals((byte)0, (byte)binaryImage0.min());
      assertEquals(11, binaryImage0.Y());
      
      int int0 = binaryImage0.count();
      assertEquals(0, int0);
      assertEquals(11, binaryImage0.X());
      assertEquals(0, binaryImage0.count());
      assertEquals((byte)1, (byte)binaryImage0.max());
      assertEquals((byte)0, (byte)binaryImage0.min());
      assertEquals(11, binaryImage0.Y());
      
      BinaryImage binaryImage1 = new BinaryImage(binaryImage0);
      assertNotNull(binaryImage1);
      assertFalse(binaryImage1.equals((Object)binaryImage0));
      assertEquals(11, binaryImage0.X());
      assertEquals(0, binaryImage0.count());
      assertEquals((byte)1, (byte)binaryImage0.max());
      assertEquals((byte)0, (byte)binaryImage0.min());
      assertEquals(11, binaryImage0.Y());
      assertEquals(11, binaryImage1.Y());
      assertEquals(11, binaryImage1.X());
      assertEquals((byte)0, (byte)binaryImage1.min());
      assertEquals((byte)1, (byte)binaryImage1.max());
      assertEquals(0, binaryImage1.count());
      
      Byte byte0 = new Byte((byte)83);
      assertNotNull(byte0);
      assertEquals((byte)83, (byte)byte0);
      
      byte byte1 = byte0.byteValue();
      assertEquals((byte)83, byte1);
      
      // Undeclared exception!
      try { 
        binaryImage0.set(11, 11, (Byte) (byte)83);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 11
         //
         verifyException("jigl.image.types.BinaryImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test90()  throws Throwable  {
      BinaryImage binaryImage0 = new BinaryImage(11, 11);
      assertNotNull(binaryImage0);
      assertEquals((byte)0, (byte)binaryImage0.min());
      assertEquals((byte)1, (byte)binaryImage0.max());
      assertEquals(11, binaryImage0.X());
      assertEquals(11, binaryImage0.Y());
      assertEquals(0, binaryImage0.count());
      
      Integer integer0 = new Integer(11);
      assertNotNull(integer0);
      assertEquals(11, (int)integer0);
      
      BinaryImage binaryImage1 = binaryImage0.shift((int) integer0, (int) integer0);
      assertNotNull(binaryImage1);
      assertSame(binaryImage0, binaryImage1);
      assertSame(binaryImage1, binaryImage0);
      assertEquals((byte)0, (byte)binaryImage0.min());
      assertEquals((byte)1, (byte)binaryImage0.max());
      assertEquals(11, binaryImage0.X());
      assertEquals(11, binaryImage0.Y());
      assertEquals(0, binaryImage0.count());
      assertEquals((byte)0, (byte)binaryImage1.min());
      assertEquals(11, binaryImage1.X());
      assertEquals(11, binaryImage1.Y());
      assertEquals(0, binaryImage1.count());
      assertEquals((byte)1, (byte)binaryImage1.max());
      
      BinaryImage binaryImage2 = binaryImage0.intersection(binaryImage1);
      assertNotNull(binaryImage2);
      assertSame(binaryImage0, binaryImage1);
      assertSame(binaryImage0, binaryImage2);
      assertSame(binaryImage1, binaryImage0);
      assertSame(binaryImage1, binaryImage2);
      assertSame(binaryImage2, binaryImage1);
      assertSame(binaryImage2, binaryImage0);
      assertEquals((byte)0, (byte)binaryImage0.min());
      assertEquals((byte)1, (byte)binaryImage0.max());
      assertEquals(11, binaryImage0.X());
      assertEquals(11, binaryImage0.Y());
      assertEquals(0, binaryImage0.count());
      assertEquals((byte)0, (byte)binaryImage1.min());
      assertEquals(11, binaryImage1.X());
      assertEquals(11, binaryImage1.Y());
      assertEquals(0, binaryImage1.count());
      assertEquals((byte)1, (byte)binaryImage1.max());
      assertEquals((byte)1, (byte)binaryImage2.max());
      assertEquals((byte)0, (byte)binaryImage2.min());
      assertEquals(11, binaryImage2.Y());
      assertEquals(11, binaryImage2.X());
      assertEquals(0, binaryImage2.count());
      
      Byte byte0 = new Byte((byte) (-49));
      assertNotNull(byte0);
      assertEquals((byte) (-49), (byte)byte0);
      
      byte byte1 = byte0.byteValue();
      assertEquals((byte) (-49), byte1);
      
      binaryImage1.set(0, 0, (Byte) (byte) (-49));
      assertSame(binaryImage0, binaryImage1);
      assertSame(binaryImage0, binaryImage2);
      assertSame(binaryImage1, binaryImage0);
      assertSame(binaryImage1, binaryImage2);
      assertEquals((byte)0, (byte)binaryImage0.min());
      assertEquals((byte)1, (byte)binaryImage0.max());
      assertEquals(11, binaryImage0.X());
      assertEquals(11, binaryImage0.Y());
      assertEquals(0, binaryImage0.count());
      assertEquals((byte)0, (byte)binaryImage1.min());
      assertEquals(11, binaryImage1.X());
      assertEquals(11, binaryImage1.Y());
      assertEquals(0, binaryImage1.count());
      assertEquals((byte)1, (byte)binaryImage1.max());
      
      BinaryImage binaryImage3 = binaryImage1.intersection(binaryImage0);
      assertNotNull(binaryImage3);
      assertSame(binaryImage0, binaryImage1);
      assertSame(binaryImage0, binaryImage3);
      assertSame(binaryImage0, binaryImage2);
      assertSame(binaryImage1, binaryImage0);
      assertSame(binaryImage1, binaryImage3);
      assertSame(binaryImage1, binaryImage2);
      assertSame(binaryImage3, binaryImage0);
      assertSame(binaryImage3, binaryImage1);
      assertSame(binaryImage3, binaryImage2);
      assertEquals((byte)0, (byte)binaryImage0.min());
      assertEquals((byte)1, (byte)binaryImage0.max());
      assertEquals(11, binaryImage0.X());
      assertEquals(11, binaryImage0.Y());
      assertEquals(0, binaryImage0.count());
      assertEquals((byte)0, (byte)binaryImage1.min());
      assertEquals(11, binaryImage1.X());
      assertEquals(11, binaryImage1.Y());
      assertEquals(0, binaryImage1.count());
      assertEquals((byte)1, (byte)binaryImage1.max());
      assertEquals((byte)1, (byte)binaryImage3.max());
      assertEquals((byte)0, (byte)binaryImage3.min());
      assertEquals(0, binaryImage3.count());
      assertEquals(11, binaryImage3.X());
      assertEquals(11, binaryImage3.Y());
      
      Image image0 = binaryImage1.copy();
      assertNotNull(image0);
      assertSame(binaryImage0, binaryImage1);
      assertNotSame(binaryImage0, image0);
      assertSame(binaryImage0, binaryImage3);
      assertSame(binaryImage0, binaryImage2);
      assertSame(binaryImage1, binaryImage0);
      assertNotSame(binaryImage1, image0);
      assertSame(binaryImage1, binaryImage3);
      assertSame(binaryImage1, binaryImage2);
      assertEquals((byte)0, (byte)binaryImage0.min());
      assertEquals((byte)1, (byte)binaryImage0.max());
      assertEquals(11, binaryImage0.X());
      assertEquals(11, binaryImage0.Y());
      assertEquals(0, binaryImage0.count());
      assertEquals((byte)0, (byte)binaryImage1.min());
      assertEquals(11, binaryImage1.X());
      assertEquals(11, binaryImage1.Y());
      assertEquals(0, binaryImage1.count());
      assertEquals((byte)1, (byte)binaryImage1.max());
      assertEquals(11, image0.Y());
      assertEquals(11, image0.X());
  }

  @Test(timeout = 4000)
  public void test91()  throws Throwable  {
      BinaryImage binaryImage0 = new BinaryImage(1, 2463);
      assertNotNull(binaryImage0);
      assertEquals(2463, binaryImage0.Y());
      assertEquals(1, binaryImage0.X());
      assertEquals(0, binaryImage0.count());
      assertEquals((byte)1, (byte)binaryImage0.max());
      assertEquals((byte)0, (byte)binaryImage0.min());
      
      Image image0 = binaryImage0.copy();
      assertNotNull(image0);
      assertNotSame(binaryImage0, image0);
      assertEquals(2463, binaryImage0.Y());
      assertEquals(1, binaryImage0.X());
      assertEquals(0, binaryImage0.count());
      assertEquals((byte)1, (byte)binaryImage0.max());
      assertEquals((byte)0, (byte)binaryImage0.min());
      assertEquals(1, image0.X());
      assertEquals(2463, image0.Y());
      
      Byte byte0 = binaryImage0.min();
      assertNotNull(byte0);
      assertNotSame(binaryImage0, image0);
      assertEquals((byte)0, (byte)byte0);
      assertFalse(binaryImage0.equals((Object)image0));
      assertEquals(2463, binaryImage0.Y());
      assertEquals(1, binaryImage0.X());
      assertEquals((byte)1, (byte)binaryImage0.max());
      assertEquals((byte)0, (byte)binaryImage0.min());
      
      int int0 = 2253;
      Byte byte1 = new Byte((byte)13);
      assertNotNull(byte1);
      assertEquals((byte)13, (byte)byte1);
      assertFalse(byte1.equals((Object)byte0));
      
      long long0 = Byte.toUnsignedLong((byte)13);
      assertEquals(13L, long0);
      
      int int1 = Byte.toUnsignedInt((byte)13);
      assertEquals(13, int1);
      assertFalse(int1 == int0);
      
      byte byte2 = byte1.byteValue();
      assertEquals((byte)13, byte2);
      assertFalse(byte1.equals((Object)byte0));
      
      int int2 = Byte.toUnsignedInt((byte) (-57));
      assertEquals(199, int2);
      assertFalse(int2 == int1);
      assertFalse(int2 == int0);
      
      ImageProducer imageProducer0 = binaryImage0.getJavaImage();
      assertNotNull(imageProducer0);
      assertNotSame(binaryImage0, image0);
      assertFalse(binaryImage0.equals((Object)image0));
      assertEquals(2463, binaryImage0.Y());
      assertEquals(1, binaryImage0.X());
      assertEquals(0, binaryImage0.count());
      assertEquals((byte)1, (byte)binaryImage0.max());
      assertEquals((byte)0, (byte)binaryImage0.min());
      
      // Undeclared exception!
      try { 
        binaryImage0.set(2253, 1, (Byte) (byte)13);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 2253
         //
         verifyException("jigl.image.types.BinaryImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test92()  throws Throwable  {
      BinaryImage binaryImage0 = new BinaryImage();
      assertNotNull(binaryImage0);
      assertEquals(0, binaryImage0.Y());
      assertEquals(0, binaryImage0.X());
      assertEquals(0, binaryImage0.count());
      assertEquals((byte)1, (byte)binaryImage0.max());
      assertEquals((byte)0, (byte)binaryImage0.min());
      
      BinaryImage binaryImage1 = null;
      try {
        binaryImage1 = new BinaryImage(21, (-1264), (byte[]) null);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.BinaryImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test93()  throws Throwable  {
      MagnitudeImage magnitudeImage0 = mock(MagnitudeImage.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(magnitudeImage0).X();
      doReturn(0).when(magnitudeImage0).Y();
      MagnitudeImage magnitudeImage1 = new MagnitudeImage(magnitudeImage0);
      assertNotNull(magnitudeImage1);
      assertFalse(magnitudeImage1.equals((Object)magnitudeImage0));
      assertEquals(0.0, magnitudeImage1.sqrSum(), 0.01);
      assertEquals(32767.0F, magnitudeImage1.min(), 0.01F);
      assertEquals(0, magnitudeImage1.Y());
      assertEquals(0.0F, magnitudeImage1.absSum(), 0.01F);
      assertEquals(0, magnitudeImage1.X());
      assertEquals(0.0F, magnitudeImage1.addSum(), 0.01F);
      assertEquals((-32768.0F), magnitudeImage1.max(), 0.01F);
      
      String string0 = magnitudeImage1.toString();
      assertNotNull(string0);
      assertEquals("0:0\n", string0);
      assertFalse(magnitudeImage1.equals((Object)magnitudeImage0));
      assertEquals(0.0, magnitudeImage1.sqrSum(), 0.01);
      assertEquals(32767.0F, magnitudeImage1.min(), 0.01F);
      assertEquals(0, magnitudeImage1.Y());
      assertEquals(0.0F, magnitudeImage1.absSum(), 0.01F);
      assertEquals(0, magnitudeImage1.X());
      assertEquals(0.0F, magnitudeImage1.addSum(), 0.01F);
      assertEquals((-32768.0F), magnitudeImage1.max(), 0.01F);
      
      BinaryImage binaryImage0 = new BinaryImage(magnitudeImage1);
      assertNotNull(binaryImage0);
      assertFalse(magnitudeImage1.equals((Object)magnitudeImage0));
      assertEquals(0.0, magnitudeImage1.sqrSum(), 0.01);
      assertEquals(32767.0F, magnitudeImage1.min(), 0.01F);
      assertEquals(0, magnitudeImage1.Y());
      assertEquals(0.0F, magnitudeImage1.absSum(), 0.01F);
      assertEquals(0, magnitudeImage1.X());
      assertEquals(0.0F, magnitudeImage1.addSum(), 0.01F);
      assertEquals((-32768.0F), magnitudeImage1.max(), 0.01F);
      assertEquals((byte)0, (byte)binaryImage0.min());
      assertEquals(0, binaryImage0.Y());
      assertEquals(0, binaryImage0.count());
      assertEquals(0, binaryImage0.X());
      assertEquals((byte)1, (byte)binaryImage0.max());
      
      Byte[][] byteArray0 = binaryImage0.getData();
      assertNotNull(byteArray0);
      assertEquals(0, byteArray0.length);
      assertFalse(magnitudeImage1.equals((Object)magnitudeImage0));
      assertEquals(0.0, magnitudeImage1.sqrSum(), 0.01);
      assertEquals(32767.0F, magnitudeImage1.min(), 0.01F);
      assertEquals(0, magnitudeImage1.Y());
      assertEquals(0.0F, magnitudeImage1.absSum(), 0.01F);
      assertEquals(0, magnitudeImage1.X());
      assertEquals(0.0F, magnitudeImage1.addSum(), 0.01F);
      assertEquals((-32768.0F), magnitudeImage1.max(), 0.01F);
      assertEquals((byte)0, (byte)binaryImage0.min());
      assertEquals(0, binaryImage0.Y());
      assertEquals(0, binaryImage0.count());
      assertEquals(0, binaryImage0.X());
      assertEquals((byte)1, (byte)binaryImage0.max());
  }

  @Test(timeout = 4000)
  public void test94()  throws Throwable  {
      BinaryImage binaryImage0 = new BinaryImage(2262, 2262);
      assertNotNull(binaryImage0);
      assertEquals(2262, binaryImage0.X());
      assertEquals((byte)0, (byte)binaryImage0.min());
      assertEquals(2262, binaryImage0.Y());
      assertEquals((byte)1, (byte)binaryImage0.max());
      
      BinaryImage binaryImage1 = new BinaryImage(19, 2262);
      assertNotNull(binaryImage1);
      assertFalse(binaryImage1.equals((Object)binaryImage0));
      assertEquals(2262, binaryImage1.Y());
      assertEquals((byte)1, (byte)binaryImage1.max());
      assertEquals(19, binaryImage1.X());
      assertEquals((byte)0, (byte)binaryImage1.min());
      
      // Undeclared exception!
      try { 
        binaryImage0.intersection(binaryImage1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }
}
