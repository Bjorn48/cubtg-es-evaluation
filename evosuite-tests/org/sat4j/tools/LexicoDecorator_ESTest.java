/*
 * This file was automatically generated by EvoSuite
 * Tue Feb 19 07:26:47 GMT 2019
 */

package org.sat4j.tools;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;
import org.sat4j.core.ASolverFactory;
import org.sat4j.core.VecInt;
import org.sat4j.minisat.constraints.MixedDataStructureDanielWLConciseBinary;
import org.sat4j.minisat.constraints.cnf.BinaryClauses;
import org.sat4j.minisat.core.ILits;
import org.sat4j.minisat.core.SearchParams;
import org.sat4j.minisat.learning.FixedLengthLearning;
import org.sat4j.minisat.orders.VarOrderHeap;
import org.sat4j.minisat.restarts.MiniSATRestarts;
import org.sat4j.opt.MaxSatDecorator;
import org.sat4j.specs.Constr;
import org.sat4j.specs.IConstr;
import org.sat4j.specs.ISolver;
import org.sat4j.specs.IVecInt;
import org.sat4j.tools.AbstractMinimalModel;
import org.sat4j.tools.CheckMUSSolutionListener;
import org.sat4j.tools.ClausalCardinalitiesDecorator;
import org.sat4j.tools.DimacsOutputSolver;
import org.sat4j.tools.DimacsStringSolver;
import org.sat4j.tools.FullClauseSelectorSolver;
import org.sat4j.tools.GateTranslator;
import org.sat4j.tools.GroupClauseSelectorSolver;
import org.sat4j.tools.LexicoDecorator;
import org.sat4j.tools.ManyCore;
import org.sat4j.tools.Minimal4CardinalityModel;
import org.sat4j.tools.Minimal4InclusionModel;
import org.sat4j.tools.ModelIterator;
import org.sat4j.tools.NegationDecorator;
import org.sat4j.tools.SingleSolutionDetector;
import org.sat4j.tools.SolutionCounter;
import org.sat4j.tools.SolutionFoundListener;
import org.sat4j.tools.StatisticsSolver;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class LexicoDecorator_ESTest extends LexicoDecorator_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      StatisticsSolver statisticsSolver0 = new StatisticsSolver();
      LexicoDecorator<StatisticsSolver> lexicoDecorator0 = new LexicoDecorator<StatisticsSolver>(statisticsSolver0);
      int[] intArray0 = new int[27];
      lexicoDecorator0.prevfullmodel = intArray0;
      int[] intArray1 = lexicoDecorator0.modelWithInternalVariables();
      assertNull(intArray1);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      StatisticsSolver statisticsSolver0 = new StatisticsSolver();
      ClausalCardinalitiesDecorator<StatisticsSolver> clausalCardinalitiesDecorator0 = new ClausalCardinalitiesDecorator<StatisticsSolver>(statisticsSolver0);
      LexicoDecorator<ClausalCardinalitiesDecorator<StatisticsSolver>> lexicoDecorator0 = new LexicoDecorator<ClausalCardinalitiesDecorator<StatisticsSolver>>(clausalCardinalitiesDecorator0);
      // Undeclared exception!
      try { 
        lexicoDecorator0.model((-1687));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.tools.LexicoDecorator", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      int[] intArray0 = new int[5];
      ILits iLits0 = mock(ILits.class, new ViolatedAssumptionAnswer());
      BinaryClauses binaryClauses0 = new BinaryClauses(iLits0, 0);
      GroupClauseSelectorSolver<Minimal4InclusionModel> groupClauseSelectorSolver0 = (GroupClauseSelectorSolver<Minimal4InclusionModel>) mock(GroupClauseSelectorSolver.class, new ViolatedAssumptionAnswer());
      doReturn(true).when(groupClauseSelectorSolver0).isSatisfiable(any(org.sat4j.specs.IVecInt.class) , anyBoolean());
      doReturn(intArray0).when(groupClauseSelectorSolver0).model();
      doReturn(binaryClauses0).when(groupClauseSelectorSolver0).addClause(any(org.sat4j.specs.IVecInt.class));
      doReturn(intArray0).when(groupClauseSelectorSolver0).modelWithInternalVariables();
      doReturn(0, (-1), 0, (-1)).when(groupClauseSelectorSolver0).nVars();
      doReturn(true).when(groupClauseSelectorSolver0).removeConstr(any(org.sat4j.specs.IConstr.class));
      NegationDecorator<GroupClauseSelectorSolver<Minimal4InclusionModel>> negationDecorator0 = new NegationDecorator<GroupClauseSelectorSolver<Minimal4InclusionModel>>(groupClauseSelectorSolver0);
      Minimal4CardinalityModel minimal4CardinalityModel0 = new Minimal4CardinalityModel(negationDecorator0);
      LexicoDecorator<Minimal4CardinalityModel> lexicoDecorator0 = new LexicoDecorator<Minimal4CardinalityModel>(minimal4CardinalityModel0);
      // Undeclared exception!
      try { 
        lexicoDecorator0.admitABetterSolution();
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Not implemented yet!
         //
         verifyException("org.sat4j.tools.NegationDecorator", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      LexicoDecorator<GateTranslator> lexicoDecorator0 = new LexicoDecorator<GateTranslator>((GateTranslator) null);
      // Undeclared exception!
      try { 
        lexicoDecorator0.evaluate((-697));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      StatisticsSolver statisticsSolver0 = new StatisticsSolver();
      LexicoDecorator<StatisticsSolver> lexicoDecorator0 = new LexicoDecorator<StatisticsSolver>(statisticsSolver0);
      lexicoDecorator0.currentCriterion = (-498);
      // Undeclared exception!
      try { 
        lexicoDecorator0.evaluate();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      StatisticsSolver statisticsSolver0 = new StatisticsSolver();
      ClausalCardinalitiesDecorator<StatisticsSolver> clausalCardinalitiesDecorator0 = new ClausalCardinalitiesDecorator<StatisticsSolver>(statisticsSolver0);
      LexicoDecorator<ClausalCardinalitiesDecorator<StatisticsSolver>> lexicoDecorator0 = new LexicoDecorator<ClausalCardinalitiesDecorator<StatisticsSolver>>(clausalCardinalitiesDecorator0);
      // Undeclared exception!
      try { 
        lexicoDecorator0.discardSolutionsForOptimizing();
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      StatisticsSolver statisticsSolver0 = new StatisticsSolver();
      LexicoDecorator<StatisticsSolver> lexicoDecorator0 = new LexicoDecorator<StatisticsSolver>(statisticsSolver0);
      lexicoDecorator0.currentCriterion = (-498);
      // Undeclared exception!
      try { 
        lexicoDecorator0.discardCurrentSolution();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      StatisticsSolver statisticsSolver0 = new StatisticsSolver();
      LexicoDecorator<StatisticsSolver> lexicoDecorator0 = new LexicoDecorator<StatisticsSolver>(statisticsSolver0);
      try { 
        lexicoDecorator0.admitABetterSolution();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // That solver only compute statistics
         //
         verifyException("org.sat4j.tools.StatisticsSolver", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      int[] intArray0 = new int[5];
      intArray0[0] = 2620;
      intArray0[1] = 856;
      intArray0[2] = 0;
      intArray0[3] = 1885;
      intArray0[4] = 0;
      ILits iLits0 = mock(ILits.class, new ViolatedAssumptionAnswer());
      BinaryClauses binaryClauses0 = new BinaryClauses(iLits0, 0);
      Constr constr0 = binaryClauses0.toConstraint();
      constr0.size();
      GroupClauseSelectorSolver<Minimal4InclusionModel> groupClauseSelectorSolver0 = (GroupClauseSelectorSolver<Minimal4InclusionModel>) mock(GroupClauseSelectorSolver.class, new ViolatedAssumptionAnswer());
      doReturn(true).when(groupClauseSelectorSolver0).isSatisfiable(any(org.sat4j.specs.IVecInt.class) , anyBoolean());
      doReturn((int[]) null).when(groupClauseSelectorSolver0).model();
      doReturn(constr0).when(groupClauseSelectorSolver0).addClause(any(org.sat4j.specs.IVecInt.class));
      doReturn(intArray0).when(groupClauseSelectorSolver0).findModel();
      doReturn((int[]) null).when(groupClauseSelectorSolver0).modelWithInternalVariables();
      doReturn(0, (-1), 0, 0).when(groupClauseSelectorSolver0).nVars();
      doReturn(true).when(groupClauseSelectorSolver0).removeConstr(any(org.sat4j.specs.IConstr.class));
      NegationDecorator<GroupClauseSelectorSolver<Minimal4InclusionModel>> negationDecorator0 = new NegationDecorator<GroupClauseSelectorSolver<Minimal4InclusionModel>>(groupClauseSelectorSolver0);
      negationDecorator0.findModel();
      Minimal4CardinalityModel minimal4CardinalityModel0 = new Minimal4CardinalityModel(negationDecorator0);
      LexicoDecorator<AbstractMinimalModel> lexicoDecorator0 = new LexicoDecorator<AbstractMinimalModel>(minimal4CardinalityModel0);
      lexicoDecorator0.manageUnsatCase();
      FullClauseSelectorSolver<MaxSatDecorator> fullClauseSelectorSolver0 = (FullClauseSelectorSolver<MaxSatDecorator>) mock(FullClauseSelectorSolver.class, new ViolatedAssumptionAnswer());
      LexicoDecorator<FullClauseSelectorSolver<MaxSatDecorator>> lexicoDecorator1 = new LexicoDecorator<FullClauseSelectorSolver<MaxSatDecorator>>(fullClauseSelectorSolver0);
      FixedLengthLearning<MixedDataStructureDanielWLConciseBinary> fixedLengthLearning0 = new FixedLengthLearning<MixedDataStructureDanielWLConciseBinary>();
      MixedDataStructureDanielWLConciseBinary mixedDataStructureDanielWLConciseBinary0 = new MixedDataStructureDanielWLConciseBinary();
      SearchParams searchParams0 = new SearchParams(0);
      VarOrderHeap varOrderHeap0 = new VarOrderHeap();
      MiniSATRestarts miniSATRestarts0 = new MiniSATRestarts();
      CheckMUSSolutionListener checkMUSSolutionListener0 = new CheckMUSSolutionListener((ASolverFactory<? extends ISolver>) null);
      ISolver iSolver0 = mock(ISolver.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(iSolver0).isSatisfiable(anyBoolean());
      doReturn(constr0).when(iSolver0).addClause(any(org.sat4j.specs.IVecInt.class));
      SolutionCounter solutionCounter0 = new SolutionCounter(iSolver0);
      IVecInt iVecInt0 = mock(IVecInt.class, new ViolatedAssumptionAnswer());
      solutionCounter0.addClause(iVecInt0);
      solutionCounter0.setTimeout((-600));
      solutionCounter0.countSolutions();
      solutionCounter0.lowerBound();
      LexicoDecorator<SolutionCounter> lexicoDecorator2 = new LexicoDecorator<SolutionCounter>(solutionCounter0);
      lexicoDecorator2.model();
      LexicoDecorator<Minimal4CardinalityModel> lexicoDecorator3 = new LexicoDecorator<Minimal4CardinalityModel>(minimal4CardinalityModel0);
      // Undeclared exception!
      try { 
        lexicoDecorator3.admitABetterSolution();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.tools.Minimal4CardinalityModel", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      DimacsStringSolver dimacsStringSolver0 = new DimacsStringSolver();
      LexicoDecorator<DimacsStringSolver> lexicoDecorator0 = new LexicoDecorator<DimacsStringSolver>(dimacsStringSolver0);
      VecInt vecInt0 = new VecInt(0, 1097);
      IVecInt iVecInt0 = vecInt0.pop();
      // Undeclared exception!
      try { 
        lexicoDecorator0.addCriterion(iVecInt0);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.core.VecInt", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      StatisticsSolver statisticsSolver0 = new StatisticsSolver();
      LexicoDecorator<StatisticsSolver> lexicoDecorator0 = new LexicoDecorator<StatisticsSolver>(statisticsSolver0);
      // Undeclared exception!
      try { 
        lexicoDecorator0.discardCurrentSolution();
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      StatisticsSolver statisticsSolver0 = new StatisticsSolver();
      LexicoDecorator<StatisticsSolver> lexicoDecorator0 = new LexicoDecorator<StatisticsSolver>(statisticsSolver0);
      lexicoDecorator0.currentCriterion = (-498);
      int[] intArray0 = new int[9];
      lexicoDecorator0.prevfullmodel = intArray0;
      // Undeclared exception!
      try { 
        lexicoDecorator0.manageUnsatCase();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      StatisticsSolver statisticsSolver0 = new StatisticsSolver();
      LexicoDecorator<StatisticsSolver> lexicoDecorator0 = new LexicoDecorator<StatisticsSolver>(statisticsSolver0);
      int[] intArray0 = new int[27];
      lexicoDecorator0.prevfullmodel = intArray0;
      // Undeclared exception!
      try { 
        lexicoDecorator0.manageUnsatCase();
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Not implemented yet!
         //
         verifyException("org.sat4j.tools.StatisticsSolver", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      int[] intArray0 = new int[5];
      intArray0[0] = 2620;
      intArray0[1] = 856;
      intArray0[2] = 0;
      intArray0[3] = 1885;
      intArray0[4] = 0;
      ILits iLits0 = mock(ILits.class, new ViolatedAssumptionAnswer());
      BinaryClauses binaryClauses0 = new BinaryClauses(iLits0, 0);
      Constr constr0 = binaryClauses0.toConstraint();
      constr0.size();
      GroupClauseSelectorSolver<Minimal4InclusionModel> groupClauseSelectorSolver0 = (GroupClauseSelectorSolver<Minimal4InclusionModel>) mock(GroupClauseSelectorSolver.class, new ViolatedAssumptionAnswer());
      doReturn(true).when(groupClauseSelectorSolver0).isSatisfiable(any(org.sat4j.specs.IVecInt.class) , anyBoolean());
      doReturn((int[]) null).when(groupClauseSelectorSolver0).model();
      doReturn(constr0).when(groupClauseSelectorSolver0).addClause(any(org.sat4j.specs.IVecInt.class));
      doReturn(intArray0).when(groupClauseSelectorSolver0).findModel();
      doReturn((int[]) null).when(groupClauseSelectorSolver0).modelWithInternalVariables();
      doReturn(0, (-1), 1885, 0).when(groupClauseSelectorSolver0).nVars();
      doReturn(true).when(groupClauseSelectorSolver0).removeConstr(any(org.sat4j.specs.IConstr.class));
      NegationDecorator<GroupClauseSelectorSolver<Minimal4InclusionModel>> negationDecorator0 = new NegationDecorator<GroupClauseSelectorSolver<Minimal4InclusionModel>>(groupClauseSelectorSolver0);
      negationDecorator0.findModel();
      Minimal4CardinalityModel minimal4CardinalityModel0 = new Minimal4CardinalityModel(negationDecorator0);
      LexicoDecorator<AbstractMinimalModel> lexicoDecorator0 = new LexicoDecorator<AbstractMinimalModel>(minimal4CardinalityModel0);
      lexicoDecorator0.manageUnsatCase();
      FullClauseSelectorSolver<MaxSatDecorator> fullClauseSelectorSolver0 = (FullClauseSelectorSolver<MaxSatDecorator>) mock(FullClauseSelectorSolver.class, new ViolatedAssumptionAnswer());
      LexicoDecorator<FullClauseSelectorSolver<MaxSatDecorator>> lexicoDecorator1 = new LexicoDecorator<FullClauseSelectorSolver<MaxSatDecorator>>(fullClauseSelectorSolver0);
      FixedLengthLearning<MixedDataStructureDanielWLConciseBinary> fixedLengthLearning0 = new FixedLengthLearning<MixedDataStructureDanielWLConciseBinary>();
      MixedDataStructureDanielWLConciseBinary mixedDataStructureDanielWLConciseBinary0 = new MixedDataStructureDanielWLConciseBinary();
      SearchParams searchParams0 = new SearchParams(0);
      VarOrderHeap varOrderHeap0 = new VarOrderHeap();
      MiniSATRestarts miniSATRestarts0 = new MiniSATRestarts();
      CheckMUSSolutionListener checkMUSSolutionListener0 = new CheckMUSSolutionListener((ASolverFactory<? extends ISolver>) null);
      ISolver iSolver0 = mock(ISolver.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(iSolver0).isSatisfiable(anyBoolean());
      doReturn(constr0).when(iSolver0).addClause(any(org.sat4j.specs.IVecInt.class));
      SolutionCounter solutionCounter0 = new SolutionCounter(iSolver0);
      IVecInt iVecInt0 = mock(IVecInt.class, new ViolatedAssumptionAnswer());
      solutionCounter0.addClause(iVecInt0);
      solutionCounter0.setTimeout((-600));
      solutionCounter0.countSolutions();
      solutionCounter0.lowerBound();
      LexicoDecorator<SolutionCounter> lexicoDecorator2 = new LexicoDecorator<SolutionCounter>(solutionCounter0);
      lexicoDecorator2.model();
      LexicoDecorator<Minimal4CardinalityModel> lexicoDecorator3 = new LexicoDecorator<Minimal4CardinalityModel>(minimal4CardinalityModel0);
      // Undeclared exception!
      try { 
        lexicoDecorator3.admitABetterSolution();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.tools.Minimal4CardinalityModel", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      GroupClauseSelectorSolver<Minimal4InclusionModel> groupClauseSelectorSolver0 = (GroupClauseSelectorSolver<Minimal4InclusionModel>) mock(GroupClauseSelectorSolver.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(groupClauseSelectorSolver0).isSatisfiable(any(org.sat4j.specs.IVecInt.class) , anyBoolean());
      doReturn((IConstr) null).when(groupClauseSelectorSolver0).addClause(any(org.sat4j.specs.IVecInt.class));
      doReturn(0, (-1)).when(groupClauseSelectorSolver0).nVars();
      doReturn(false).when(groupClauseSelectorSolver0).removeConstr(any(org.sat4j.specs.IConstr.class));
      NegationDecorator<GroupClauseSelectorSolver<Minimal4InclusionModel>> negationDecorator0 = new NegationDecorator<GroupClauseSelectorSolver<Minimal4InclusionModel>>(groupClauseSelectorSolver0);
      Minimal4CardinalityModel minimal4CardinalityModel0 = new Minimal4CardinalityModel(negationDecorator0);
      LexicoDecorator<Minimal4CardinalityModel> lexicoDecorator0 = new LexicoDecorator<Minimal4CardinalityModel>(minimal4CardinalityModel0);
      boolean boolean0 = lexicoDecorator0.admitABetterSolution();
      assertFalse(lexicoDecorator0.isOptimal());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      DimacsStringSolver dimacsStringSolver0 = new DimacsStringSolver();
      LexicoDecorator<DimacsStringSolver> lexicoDecorator0 = new LexicoDecorator<DimacsStringSolver>(dimacsStringSolver0);
      // Undeclared exception!
      try { 
        lexicoDecorator0.calculateObjective();
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      DimacsOutputSolver dimacsOutputSolver0 = new DimacsOutputSolver();
      Minimal4InclusionModel minimal4InclusionModel0 = new Minimal4InclusionModel(dimacsOutputSolver0);
      FullClauseSelectorSolver<Minimal4InclusionModel> fullClauseSelectorSolver0 = new FullClauseSelectorSolver<Minimal4InclusionModel>(minimal4InclusionModel0, true);
      SolutionCounter solutionCounter0 = new SolutionCounter(fullClauseSelectorSolver0);
      SolutionFoundListener solutionFoundListener0 = SolutionFoundListener.VOID;
      Minimal4CardinalityModel minimal4CardinalityModel0 = new Minimal4CardinalityModel(solutionCounter0, solutionFoundListener0);
      LexicoDecorator<AbstractMinimalModel> lexicoDecorator0 = new LexicoDecorator<AbstractMinimalModel>(minimal4CardinalityModel0);
      Number number0 = lexicoDecorator0.getObjectiveValue();
      assertEquals((-1), number0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      DimacsStringSolver dimacsStringSolver0 = new DimacsStringSolver();
      LexicoDecorator<DimacsStringSolver> lexicoDecorator0 = new LexicoDecorator<DimacsStringSolver>(dimacsStringSolver0);
      // Undeclared exception!
      try { 
        lexicoDecorator0.fixCriterionValue();
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      DimacsStringSolver dimacsStringSolver0 = new DimacsStringSolver();
      LexicoDecorator<DimacsStringSolver> lexicoDecorator0 = new LexicoDecorator<DimacsStringSolver>(dimacsStringSolver0);
      // Undeclared exception!
      try { 
        lexicoDecorator0.addCriterion((IVecInt) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.tools.LexicoDecorator", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      LexicoDecorator<SolutionCounter> lexicoDecorator0 = new LexicoDecorator<SolutionCounter>((SolutionCounter) null);
      boolean boolean0 = lexicoDecorator0.nonOptimalMeansSatisfiable();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      LexicoDecorator<ModelIterator> lexicoDecorator0 = new LexicoDecorator<ModelIterator>((ModelIterator) null);
      // Undeclared exception!
      try { 
        lexicoDecorator0.setTimeoutForFindingBetterSolution(1882);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // No implemented yet
         //
         verifyException("org.sat4j.tools.LexicoDecorator", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      DimacsStringSolver dimacsStringSolver0 = new DimacsStringSolver(0);
      SingleSolutionDetector singleSolutionDetector0 = new SingleSolutionDetector(dimacsStringSolver0);
      LexicoDecorator<SingleSolutionDetector> lexicoDecorator0 = new LexicoDecorator<SingleSolutionDetector>(singleSolutionDetector0);
      boolean boolean0 = lexicoDecorator0.isOptimal();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      LexicoDecorator<SolutionCounter> lexicoDecorator0 = new LexicoDecorator<SolutionCounter>((SolutionCounter) null);
      // Undeclared exception!
      try { 
        lexicoDecorator0.evaluate();
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      DimacsStringSolver dimacsStringSolver0 = new DimacsStringSolver(0);
      SingleSolutionDetector singleSolutionDetector0 = new SingleSolutionDetector(dimacsStringSolver0);
      LexicoDecorator<SingleSolutionDetector> lexicoDecorator0 = new LexicoDecorator<SingleSolutionDetector>(singleSolutionDetector0);
      // Undeclared exception!
      try { 
        lexicoDecorator0.forceObjectiveValueTo((Number) null);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.tools.LexicoDecorator", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      DimacsStringSolver dimacsStringSolver0 = new DimacsStringSolver();
      LexicoDecorator<DimacsStringSolver> lexicoDecorator0 = new LexicoDecorator<DimacsStringSolver>(dimacsStringSolver0);
      boolean boolean0 = lexicoDecorator0.hasNoObjectiveFunction();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      DimacsStringSolver dimacsStringSolver0 = new DimacsStringSolver(0);
      LexicoDecorator<DimacsStringSolver> lexicoDecorator0 = new LexicoDecorator<DimacsStringSolver>(dimacsStringSolver0);
      // Undeclared exception!
      try { 
        lexicoDecorator0.getObjectiveValue(822);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      ManyCore<MaxSatDecorator> manyCore0 = (ManyCore<MaxSatDecorator>) mock(ManyCore.class, new ViolatedAssumptionAnswer());
      LexicoDecorator<ManyCore<MaxSatDecorator>> lexicoDecorator0 = new LexicoDecorator<ManyCore<MaxSatDecorator>>(manyCore0);
      // Undeclared exception!
      try { 
        lexicoDecorator0.discard();
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      DimacsStringSolver dimacsStringSolver0 = new DimacsStringSolver();
      LexicoDecorator<DimacsStringSolver> lexicoDecorator0 = new LexicoDecorator<DimacsStringSolver>(dimacsStringSolver0);
      int int0 = lexicoDecorator0.numberOfCriteria();
      assertEquals(0, int0);
  }
}
