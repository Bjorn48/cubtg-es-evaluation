/*
 * This file was automatically generated by EvoSuite
 * Tue Feb 19 17:19:31 GMT 2019
 */

package org.sat4j.tools.xplain;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.HashMap;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;
import org.sat4j.core.VecInt;
import org.sat4j.minisat.constraints.CardinalityDataStructure;
import org.sat4j.opt.MaxSatDecorator;
import org.sat4j.specs.ISolver;
import org.sat4j.specs.IVecInt;
import org.sat4j.tools.AbstractMinimalModel;
import org.sat4j.tools.ClausalCardinalitiesDecorator;
import org.sat4j.tools.DimacsStringSolver;
import org.sat4j.tools.FullClauseSelectorSolver;
import org.sat4j.tools.encoding.Commander;
import org.sat4j.tools.xplain.QuickXplain2001Strategy;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class QuickXplain2001Strategy_ESTest extends QuickXplain2001Strategy_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      QuickXplain2001Strategy quickXplain2001Strategy0 = new QuickXplain2001Strategy();
      MaxSatDecorator maxSatDecorator0 = mock(MaxSatDecorator.class, new ViolatedAssumptionAnswer());
      doReturn(0, 0).when(maxSatDecorator0).nVars();
      FullClauseSelectorSolver<MaxSatDecorator> fullClauseSelectorSolver0 = new FullClauseSelectorSolver<MaxSatDecorator>(maxSatDecorator0, true);
      IVecInt iVecInt0 = fullClauseSelectorSolver0.getLastClause();
      MaxSatDecorator maxSatDecorator1 = mock(MaxSatDecorator.class, new ViolatedAssumptionAnswer());
      doReturn("n.P[IwYm_qmeQr=O(E").when(maxSatDecorator1).getLogPrefix();
      doReturn(true).when(maxSatDecorator1).isSatisfiable(any(org.sat4j.specs.IVecInt.class));
      doReturn(true).when(maxSatDecorator1).isVerbose();
      doReturn(iVecInt0).when(maxSatDecorator1).unsatExplanation();
      Commander commander0 = new Commander();
      ClausalCardinalitiesDecorator<MaxSatDecorator> clausalCardinalitiesDecorator0 = new ClausalCardinalitiesDecorator<MaxSatDecorator>(maxSatDecorator1, commander0);
      IVecInt iVecInt1 = AbstractMinimalModel.positiveLiterals(fullClauseSelectorSolver0);
      iVecInt0.push(30);
      HashMap<Integer, Object> hashMap0 = new HashMap<Integer, Object>();
      // Undeclared exception!
      try { 
        quickXplain2001Strategy0.explain(clausalCardinalitiesDecorator0, hashMap0, iVecInt1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      QuickXplain2001Strategy quickXplain2001Strategy0 = new QuickXplain2001Strategy();
      MaxSatDecorator maxSatDecorator0 = mock(MaxSatDecorator.class, new ViolatedAssumptionAnswer());
      FullClauseSelectorSolver<MaxSatDecorator> fullClauseSelectorSolver0 = new FullClauseSelectorSolver<MaxSatDecorator>(maxSatDecorator0, true);
      IVecInt iVecInt0 = fullClauseSelectorSolver0.getLastClause();
      iVecInt0.shrinkTo((-1417));
      MaxSatDecorator maxSatDecorator1 = mock(MaxSatDecorator.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(maxSatDecorator1).getLogPrefix();
      doReturn(true).when(maxSatDecorator1).isSatisfiable(any(org.sat4j.specs.IVecInt.class));
      doReturn(true).when(maxSatDecorator1).isVerbose();
      doReturn(0, (-1)).when(maxSatDecorator1).nVars();
      doReturn(iVecInt0).when(maxSatDecorator1).unsatExplanation();
      Commander commander0 = new Commander();
      ClausalCardinalitiesDecorator<MaxSatDecorator> clausalCardinalitiesDecorator0 = new ClausalCardinalitiesDecorator<MaxSatDecorator>(maxSatDecorator1, commander0);
      IVecInt iVecInt1 = AbstractMinimalModel.positiveLiterals(clausalCardinalitiesDecorator0);
      HashMap<Integer, String> hashMap0 = new HashMap<Integer, String>();
      // Undeclared exception!
      try { 
        quickXplain2001Strategy0.explain(clausalCardinalitiesDecorator0, hashMap0, iVecInt1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      QuickXplain2001Strategy quickXplain2001Strategy0 = new QuickXplain2001Strategy();
      HashMap<Integer, Object> hashMap0 = new HashMap<Integer, Object>();
      DimacsStringSolver dimacsStringSolver0 = new DimacsStringSolver();
      VecInt vecInt0 = new VecInt();
      // Undeclared exception!
      try { 
        quickXplain2001Strategy0.explain(dimacsStringSolver0, hashMap0, vecInt0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.tools.AbstractOutputSolver", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      QuickXplain2001Strategy quickXplain2001Strategy0 = new QuickXplain2001Strategy();
      HashMap<Integer, QuickXplain2001Strategy> hashMap0 = new HashMap<Integer, QuickXplain2001Strategy>();
      // Undeclared exception!
      try { 
        quickXplain2001Strategy0.explain((ISolver) null, hashMap0, (IVecInt) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.tools.xplain.QuickXplain2001Strategy", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      QuickXplain2001Strategy quickXplain2001Strategy0 = new QuickXplain2001Strategy();
      VecInt vecInt0 = new VecInt();
      MaxSatDecorator maxSatDecorator0 = mock(MaxSatDecorator.class, new ViolatedAssumptionAnswer());
      Commander commander0 = new Commander();
      ClausalCardinalitiesDecorator<MaxSatDecorator> clausalCardinalitiesDecorator0 = new ClausalCardinalitiesDecorator<MaxSatDecorator>(maxSatDecorator0, commander0);
      IVecInt iVecInt0 = vecInt0.pop();
      HashMap<Integer, CardinalityDataStructure> hashMap0 = new HashMap<Integer, CardinalityDataStructure>();
      // Undeclared exception!
      try { 
        quickXplain2001Strategy0.explain(clausalCardinalitiesDecorator0, hashMap0, iVecInt0);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.core.VecInt", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      QuickXplain2001Strategy quickXplain2001Strategy0 = new QuickXplain2001Strategy();
      VecInt vecInt0 = new VecInt();
      MaxSatDecorator maxSatDecorator0 = mock(MaxSatDecorator.class, new ViolatedAssumptionAnswer());
      doReturn("n.PIwYmP_qm{Qr.=O(E").when(maxSatDecorator0).getLogPrefix();
      doReturn(true, false).when(maxSatDecorator0).isSatisfiable(any(org.sat4j.specs.IVecInt.class));
      doReturn(true).when(maxSatDecorator0).isVerbose();
      doReturn(vecInt0).when(maxSatDecorator0).unsatExplanation();
      HashMap<Integer, String> hashMap0 = new HashMap<Integer, String>();
      hashMap0.put((Integer) Integer.MIN_VALUE, "\"Yrs:5f$*68Qb");
      IVecInt iVecInt0 = vecInt0.push(Integer.MIN_VALUE);
      IVecInt iVecInt1 = quickXplain2001Strategy0.explain(maxSatDecorator0, hashMap0, vecInt0);
      assertTrue(iVecInt1.equals((Object)iVecInt0));
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      QuickXplain2001Strategy quickXplain2001Strategy0 = new QuickXplain2001Strategy();
      MaxSatDecorator maxSatDecorator0 = mock(MaxSatDecorator.class, new ViolatedAssumptionAnswer());
      FullClauseSelectorSolver<MaxSatDecorator> fullClauseSelectorSolver0 = new FullClauseSelectorSolver<MaxSatDecorator>(maxSatDecorator0, true);
      IVecInt iVecInt0 = fullClauseSelectorSolver0.getLastClause();
      MaxSatDecorator maxSatDecorator1 = mock(MaxSatDecorator.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(maxSatDecorator1).getLogPrefix();
      doReturn(true).when(maxSatDecorator1).isSatisfiable(any(org.sat4j.specs.IVecInt.class));
      doReturn(true).when(maxSatDecorator1).isVerbose();
      doReturn(iVecInt0).when(maxSatDecorator1).unsatExplanation();
      Commander commander0 = new Commander();
      ClausalCardinalitiesDecorator<MaxSatDecorator> clausalCardinalitiesDecorator0 = new ClausalCardinalitiesDecorator<MaxSatDecorator>(maxSatDecorator1, commander0);
      HashMap<Integer, String> hashMap0 = new HashMap<Integer, String>();
      hashMap0.put((Integer) null, (String) null);
      // Undeclared exception!
      try { 
        quickXplain2001Strategy0.explain(clausalCardinalitiesDecorator0, hashMap0, iVecInt0);
        fail("Expecting exception: AssertionError");
      
      } catch(AssertionError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      QuickXplain2001Strategy quickXplain2001Strategy0 = new QuickXplain2001Strategy();
      VecInt vecInt0 = new VecInt();
      MaxSatDecorator maxSatDecorator0 = mock(MaxSatDecorator.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(maxSatDecorator0).isSatisfiable(any(org.sat4j.specs.IVecInt.class));
      doReturn(false).when(maxSatDecorator0).isVerbose();
      doReturn(vecInt0).when(maxSatDecorator0).unsatExplanation();
      Commander commander0 = new Commander();
      ClausalCardinalitiesDecorator<MaxSatDecorator> clausalCardinalitiesDecorator0 = new ClausalCardinalitiesDecorator<MaxSatDecorator>(maxSatDecorator0, commander0);
      HashMap<Integer, QuickXplain2001Strategy> hashMap0 = new HashMap<Integer, QuickXplain2001Strategy>();
      IVecInt iVecInt0 = quickXplain2001Strategy0.explain(clausalCardinalitiesDecorator0, hashMap0, vecInt0);
      assertTrue(iVecInt0.equals((Object)vecInt0));
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      QuickXplain2001Strategy quickXplain2001Strategy0 = new QuickXplain2001Strategy();
      VecInt vecInt0 = new VecInt();
      MaxSatDecorator maxSatDecorator0 = mock(MaxSatDecorator.class, new ViolatedAssumptionAnswer());
      doReturn("n.PIwYmP_qm{Qr.=O(E").when(maxSatDecorator0).getLogPrefix();
      doReturn(true, true).when(maxSatDecorator0).isSatisfiable(any(org.sat4j.specs.IVecInt.class));
      doReturn(true).when(maxSatDecorator0).isVerbose();
      doReturn(vecInt0).when(maxSatDecorator0).unsatExplanation();
      HashMap<Integer, String> hashMap0 = new HashMap<Integer, String>();
      hashMap0.put((Integer) Integer.MIN_VALUE, "\"Yrs:5f$*68Qb");
      vecInt0.push(Integer.MIN_VALUE);
      IVecInt iVecInt0 = quickXplain2001Strategy0.explain(maxSatDecorator0, hashMap0, vecInt0);
      assertTrue(iVecInt0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      QuickXplain2001Strategy quickXplain2001Strategy0 = new QuickXplain2001Strategy();
      String string0 = quickXplain2001Strategy0.toString();
      assertEquals("QuickXplain (IJCAI WS 2001 version) minimization strategy", string0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      QuickXplain2001Strategy quickXplain2001Strategy0 = new QuickXplain2001Strategy();
      quickXplain2001Strategy0.cancelExplanationComputation();
      assertEquals("QuickXplain (IJCAI WS 2001 version) minimization strategy", quickXplain2001Strategy0.toString());
  }
}
