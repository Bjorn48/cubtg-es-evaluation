/*
 * This file was automatically generated by EvoSuite
 * Tue Oct 29 12:40:45 GMT 2019
 */

package com.eteks.sweethome3d.model;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.eteks.sweethome3d.model.CatalogTexture;
import com.eteks.sweethome3d.model.Content;
import com.eteks.sweethome3d.model.HomeTexture;
import com.eteks.sweethome3d.model.Level;
import com.eteks.sweethome3d.model.Room;
import com.eteks.sweethome3d.model.TextStyle;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Room_ESTest extends Room_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      float[][] floatArray0 = new float[3][8];
      Room room0 = new Room(floatArray0);
      room0.move(0.0F, 1813.1987F);
      assertEquals(1813.1987F, room0.getYCenter(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      float[][] floatArray0 = new float[7][7];
      Room room0 = new Room(floatArray0);
      room0.containsPoint(432.8F, (-43.32601F), 0.0F);
      assertTrue(room0.isAreaVisible());
      assertEquals((-40.0F), room0.getNameYOffset(), 0.01F);
      assertTrue(room0.isCeilingVisible());
      assertTrue(room0.isFloorVisible());
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      float[][] floatArray0 = new float[9][4];
      Room room0 = new Room(floatArray0);
      boolean boolean0 = room0.containsPoint(0.0F, 1107.2662F, (-4004.0F));
      assertTrue(room0.isFloorVisible());
      assertTrue(room0.isAreaVisible());
      assertFalse(boolean0);
      assertTrue(room0.isCeilingVisible());
      assertEquals((-40.0F), room0.getNameYOffset(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      float[][] floatArray0 = new float[6][4];
      Room room0 = new Room(floatArray0);
      boolean boolean0 = room0.isAreaCenterPointAt(1997.5916F, 1997.5916F, 1997.5916F);
      assertEquals(0.0F, room0.getAreaYOffset(), 0.01F);
      assertTrue(boolean0);
      assertEquals(0.0F, room0.getAreaXOffset(), 0.01F);
      assertEquals(0.0F, room0.getYCenter(), 0.01F);
      assertEquals((-40.0F), room0.getNameYOffset(), 0.01F);
      assertTrue(room0.isCeilingVisible());
      assertEquals(0.0F, room0.getXCenter(), 0.01F);
      assertTrue(room0.isAreaVisible());
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      float[][] floatArray0 = new float[2][1];
      float[] floatArray1 = new float[9];
      floatArray1[0] = 1731.2157F;
      floatArray1[1] = 0.7168147F;
      floatArray0[0] = floatArray1;
      floatArray0[1] = floatArray0[0];
      Room room0 = new Room(floatArray0);
      boolean boolean0 = room0.isAreaCenterPointAt(2297.9407F, 2.0F, 1531.22F);
      assertEquals(1731.2157F, room0.getXCenter(), 0.01F);
      assertTrue(room0.isCeilingVisible());
      assertEquals((-40.0F), room0.getNameYOffset(), 0.01F);
      assertTrue(boolean0);
      assertEquals(0.0F, room0.getAreaYOffset(), 0.01F);
      assertEquals(0.0F, room0.getAreaXOffset(), 0.01F);
      assertEquals(0.7168147F, room0.getYCenter(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      float[][] floatArray0 = new float[3][7];
      Room room0 = new Room(floatArray0);
      room0.setAreaXOffset(865.9123F);
      boolean boolean0 = room0.isAreaCenterPointAt((-1938.0F), (-1938.0F), (-1938.0F));
      assertEquals(865.9123F, room0.getAreaXOffset(), 0.01F);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      float[][] floatArray0 = new float[5][6];
      Room room0 = new Room(floatArray0);
      room0.addPoint((-515.56F), (-515.56F));
      boolean boolean0 = room0.isNameCenterPointAt(750.69275F, (-1545.4111F), 2888.983F);
      assertEquals((-257.78F), room0.getXCenter(), 0.01F);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      float[][] floatArray0 = new float[16][4];
      Room room0 = new Room(floatArray0);
      int int0 = room0.getPointIndexAt(1.0F, 1.0F, 1.0F);
      assertEquals((-40.0F), room0.getNameYOffset(), 0.01F);
      assertTrue(room0.isCeilingVisible());
      assertTrue(room0.isAreaVisible());
      assertTrue(room0.isFloorVisible());
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      float[][] floatArray0 = new float[9][4];
      Room room0 = new Room(floatArray0);
      room0.move((-1.0F), 1834.8893F);
      int int0 = room0.getPointIndexAt((-1.0F), 2.0F, 1.0F);
      assertEquals((-1.0F), room0.getXCenter(), 0.01F);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      float[][] floatArray0 = new float[3][3];
      float[] floatArray1 = new float[6];
      floatArray1[0] = 100.153F;
      floatArray0[0] = floatArray1;
      float[] floatArray2 = new float[6];
      floatArray2[1] = (-1190.0466F);
      floatArray0[1] = floatArray2;
      Room room0 = new Room(floatArray0);
      boolean boolean0 = room0.isClockwise();
      assertTrue(room0.isFloorVisible());
      assertEquals((-40.0F), room0.getNameYOffset(), 0.01F);
      assertTrue(room0.isCeilingVisible());
      assertTrue(room0.isAreaVisible());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      float[][] floatArray0 = new float[8][6];
      float[] floatArray1 = new float[2];
      floatArray1[0] = 2376.0F;
      floatArray0[0] = floatArray1;
      Room room0 = new Room(floatArray0);
      boolean boolean0 = room0.isAreaCenterPointAt((-2210.05F), (-694.95F), 0.0F);
      assertFalse(boolean0);
      assertEquals(0.0F, room0.getAreaXOffset(), 0.01F);
      assertTrue(room0.isCeilingVisible());
      assertTrue(room0.isFloorVisible());
      assertEquals((-40.0F), room0.getNameYOffset(), 0.01F);
      assertTrue(room0.isAreaVisible());
      assertEquals(1188.0F, room0.getXCenter(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      float[][] floatArray0 = new float[3][8];
      Room room0 = new Room(floatArray0);
      room0.setAreaAngle((-1.0F));
      room0.setAreaAngle(517.81F);
      assertEquals(2.5888023F, room0.getAreaAngle(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      float[][] floatArray0 = new float[5][6];
      Room room0 = new Room(floatArray0);
      room0.removePoint(4);
      assertEquals(4, room0.getPointCount());
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      float[][] floatArray0 = new float[2][6];
      Room room0 = new Room(floatArray0);
      // Undeclared exception!
      try { 
        room0.removePoint(2);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Invalid index 2
         //
         verifyException("com.eteks.sweethome3d.model.Room", e);
      }
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      float[][] floatArray0 = new float[3][8];
      Room room0 = new Room(floatArray0);
      room0.setPoint(0.0F, 2, 2);
      assertEquals(1.0F, room0.getYCenter(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      float[][] floatArray0 = new float[5][4];
      Room room0 = new Room(floatArray0);
      // Undeclared exception!
      try { 
        room0.setPoint(2, 2, 5);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Invalid index 5
         //
         verifyException("com.eteks.sweethome3d.model.Room", e);
      }
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      float[][] floatArray0 = new float[3][8];
      Room room0 = new Room(floatArray0);
      room0.setPoint(2, (-1.0F), 0);
      assertEquals(1.0F, room0.getXCenter(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      float[][] floatArray0 = new float[7][7];
      Room room0 = new Room(floatArray0);
      room0.addPoint(2676.4275F, (-762.206F));
      assertEquals(8, room0.getPointCount());
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      float[][] floatArray0 = new float[9][4];
      Room room0 = new Room(floatArray0);
      room0.setNameAngle(822.0F);
      assertEquals(5.18591F, room0.getNameAngle(), 0.01F);
      
      room0.setNameAngle(0.0F);
      assertEquals(0.0F, room0.getNameAngle(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      float[][] floatArray0 = new float[5][6];
      Room room0 = new Room(floatArray0);
      room0.setNameYOffset((-889.0F));
      assertEquals((-889.0F), room0.getNameYOffset(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      float[][] floatArray0 = new float[5][7];
      Room room0 = new Room(floatArray0);
      room0.setName("+'Z=(}b");
      room0.setName("+'Z=(}b");
      assertTrue(room0.isFloorVisible());
      assertEquals((-40.0F), room0.getNameYOffset(), 0.01F);
      assertTrue(room0.isCeilingVisible());
      assertTrue(room0.isAreaVisible());
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      float[][] floatArray0 = new float[7][7];
      float[] floatArray1 = new float[21];
      floatArray1[0] = 1533.1F;
      floatArray0[2] = floatArray1;
      float[] floatArray2 = new float[5];
      floatArray2[1] = 1533.1F;
      floatArray0[3] = floatArray2;
      float[] floatArray3 = new float[6];
      floatArray3[0] = 1927.53F;
      floatArray3[1] = 1927.53F;
      floatArray0[4] = floatArray3;
      Room room0 = new Room(floatArray0);
      boolean boolean0 = room0.isSingular();
      assertTrue(room0.isFloorVisible());
      assertEquals((-40.0F), room0.getNameYOffset(), 0.01F);
      assertTrue(room0.isCeilingVisible());
      assertFalse(boolean0);
      assertTrue(room0.isAreaVisible());
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      float[][] floatArray0 = new float[2][7];
      Room room0 = new Room(floatArray0);
      assertTrue(room0.isCeilingVisible());
      
      room0.setCeilingVisible(false);
      boolean boolean0 = room0.isCeilingVisible();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      float[][] floatArray0 = new float[9][4];
      Room room0 = new Room(floatArray0);
      assertTrue(room0.isAreaVisible());
      
      room0.setAreaVisible(false);
      boolean boolean0 = room0.isAreaVisible();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      float[][] floatArray0 = new float[6][8];
      Room room0 = new Room(floatArray0);
      room0.addPoint(1.0F, 1.0F, 2);
      float float0 = room0.getYCenter();
      assertEquals(0.5F, room0.getXCenter(), 0.01F);
      assertEquals(0.5F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      float[][] floatArray0 = new float[3][8];
      Room room0 = new Room(floatArray0);
      room0.setPoint((-198.0358F), (-444.09137F), 2);
      float float0 = room0.getYCenter();
      assertEquals((-99.0179F), room0.getXCenter(), 0.01F);
      assertEquals((-222.04568F), float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      float[][] floatArray0 = new float[2][5];
      float[] floatArray1 = new float[7];
      floatArray1[0] = (-1233.7349F);
      floatArray0[1] = floatArray1;
      Room room0 = new Room(floatArray0);
      float float0 = room0.getXCenter();
      assertTrue(room0.isFloorVisible());
      assertEquals((-616.86743F), float0, 0.01F);
      assertTrue(room0.isCeilingVisible());
      assertEquals((-40.0F), room0.getNameYOffset(), 0.01F);
      assertTrue(room0.isAreaVisible());
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      float[][] floatArray0 = new float[4][3];
      float[] floatArray1 = new float[6];
      floatArray1[1] = (-2861.8F);
      floatArray0[1] = floatArray1;
      Room room0 = new Room(floatArray0);
      int int0 = room0.getPointIndexAt((-1.0F), (-2517.5098F), 1330.6F);
      assertEquals((-40.0F), room0.getNameYOffset(), 0.01F);
      assertEquals(1, int0);
      assertTrue(room0.isCeilingVisible());
      assertTrue(room0.isAreaVisible());
      assertTrue(room0.isFloorVisible());
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      float[][] floatArray0 = new float[16][8];
      Room room0 = new Room(floatArray0);
      room0.setNameYOffset(2375.467F);
      float float0 = room0.getNameYOffset();
      assertEquals(2375.467F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      float[][] floatArray0 = new float[2][7];
      Room room0 = new Room(floatArray0);
      room0.setNameXOffset((-1264.4154F));
      float float0 = room0.getNameXOffset();
      assertEquals((-1264.4154F), float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      float[][] floatArray0 = new float[5][6];
      Room room0 = new Room(floatArray0);
      room0.setNameAngle((-405.61F));
      float float0 = room0.getNameAngle();
      assertEquals(2.7970595F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      float[][] floatArray0 = new float[3][4];
      Room room0 = new Room(floatArray0);
      room0.setName("CEILING_TEXTURE");
      String string0 = room0.getName();
      assertTrue(room0.isCeilingVisible());
      assertEquals((-40.0F), room0.getNameYOffset(), 0.01F);
      assertTrue(room0.isAreaVisible());
      assertNotNull(string0);
      assertTrue(room0.isFloorVisible());
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      float[][] floatArray0 = new float[9][8];
      Room room0 = new Room(floatArray0);
      room0.setName("");
      String string0 = room0.getName();
      assertTrue(room0.isFloorVisible());
      assertNotNull(string0);
      assertEquals((-40.0F), room0.getNameYOffset(), 0.01F);
      assertTrue(room0.isCeilingVisible());
      assertTrue(room0.isAreaVisible());
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      float[][] floatArray0 = new float[9][8];
      Room room0 = new Room(floatArray0);
      Level level0 = new Level("", (-40.0F), 0.0F, (-2137.8F));
      room0.setLevel(level0);
      Level level1 = room0.getLevel();
      assertTrue(room0.isAreaVisible());
      assertTrue(room0.isFloorVisible());
      assertNotNull(level1);
      assertTrue(room0.isCeilingVisible());
      assertEquals((-40.0F), room0.getNameYOffset(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      float[][] floatArray0 = new float[23][8];
      Room room0 = new Room(floatArray0);
      CatalogTexture catalogTexture0 = new CatalogTexture("]D@sr&[s", (Content) null, (-1083.2266F), (-1083.2266F));
      HomeTexture homeTexture0 = new HomeTexture(catalogTexture0);
      room0.setFloorTexture(homeTexture0);
      HomeTexture homeTexture1 = room0.getFloorTexture();
      assertTrue(room0.isFloorVisible());
      assertTrue(room0.isAreaVisible());
      assertTrue(room0.isCeilingVisible());
      assertNotNull(homeTexture1);
      assertEquals((-40.0F), room0.getNameYOffset(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      float[][] floatArray0 = new float[6][7];
      Room room0 = new Room(floatArray0);
      room0.setFloorShininess((-1179.9208F));
      float float0 = room0.getFloorShininess();
      assertEquals((-1179.9208F), float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      float[][] floatArray0 = new float[4][8];
      Room room0 = new Room(floatArray0);
      Integer integer0 = Integer.valueOf(33);
      room0.setFloorColor(integer0);
      Integer integer1 = room0.getFloorColor();
      assertEquals((-40.0F), room0.getNameYOffset(), 0.01F);
      assertTrue(room0.isCeilingVisible());
      assertNotNull(integer1);
      assertTrue(room0.isAreaVisible());
      assertTrue(room0.isFloorVisible());
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      float[][] floatArray0 = new float[16][8];
      CatalogTexture catalogTexture0 = new CatalogTexture("com.eteks.sweethome3d.model.Level$Property", (Content) null, (-1083.2266F), 0.0F);
      HomeTexture homeTexture0 = new HomeTexture(catalogTexture0);
      Room room0 = new Room(floatArray0);
      room0.setCeilingTexture(homeTexture0);
      HomeTexture homeTexture1 = room0.getCeilingTexture();
      assertNotNull(homeTexture1);
      assertTrue(room0.isCeilingVisible());
      assertTrue(room0.isFloorVisible());
      assertEquals((-40.0F), room0.getNameYOffset(), 0.01F);
      assertTrue(room0.isAreaVisible());
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      float[][] floatArray0 = new float[14][8];
      Room room0 = new Room(floatArray0);
      CatalogTexture catalogTexture0 = new CatalogTexture("]D@sr&[s", (Content) null, 5.255908F, 1.0F);
      HomeTexture homeTexture0 = new HomeTexture(catalogTexture0);
      room0.setCeilingTexture(homeTexture0);
      HomeTexture homeTexture1 = room0.getCeilingTexture();
      assertNotNull(homeTexture1);
      assertTrue(room0.isAreaVisible());
      assertTrue(room0.isFloorVisible());
      assertTrue(room0.isCeilingVisible());
      assertEquals((-40.0F), room0.getNameYOffset(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      float[][] floatArray0 = new float[6][8];
      Room room0 = new Room(floatArray0);
      room0.setCeilingShininess(1633.8976F);
      float float0 = room0.getCeilingShininess();
      assertEquals(1633.8976F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      float[][] floatArray0 = new float[6][8];
      Room room0 = new Room(floatArray0);
      room0.setCeilingShininess((-1510.0F));
      float float0 = room0.getCeilingShininess();
      assertEquals((-1510.0F), float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      float[][] floatArray0 = new float[6][4];
      Room room0 = new Room(floatArray0);
      Integer integer0 = Integer.valueOf(0);
      room0.setCeilingColor(integer0);
      Integer integer1 = room0.getCeilingColor();
      assertTrue(room0.isCeilingVisible());
      assertNotNull(integer1);
      assertTrue(room0.isAreaVisible());
      assertTrue(room0.isFloorVisible());
      assertEquals((-40.0F), room0.getNameYOffset(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      float[][] floatArray0 = new float[7][7];
      Room room0 = new Room(floatArray0);
      Integer integer0 = new Integer(2147017243);
      room0.setCeilingColor(integer0);
      Integer integer1 = room0.getCeilingColor();
      assertNotNull(integer1);
      assertTrue(room0.isCeilingVisible());
      assertEquals((-40.0F), room0.getNameYOffset(), 0.01F);
      assertTrue(room0.isAreaVisible());
      assertTrue(room0.isFloorVisible());
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      float[][] floatArray0 = new float[3][8];
      Room room0 = new Room(floatArray0);
      Integer integer0 = new Integer((-32));
      room0.setCeilingColor(integer0);
      Integer integer1 = room0.getCeilingColor();
      assertTrue(room0.isAreaVisible());
      assertEquals((-40.0F), room0.getNameYOffset(), 0.01F);
      assertTrue(room0.isFloorVisible());
      assertTrue(room0.isCeilingVisible());
      assertNotNull(integer1);
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      float[][] floatArray0 = new float[5][6];
      Room room0 = new Room(floatArray0);
      room0.setAreaYOffset(2847.0F);
      float float0 = room0.getAreaYOffset();
      assertEquals(2847.0F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      float[][] floatArray0 = new float[3][7];
      Room room0 = new Room(floatArray0);
      room0.setAreaXOffset(865.9123F);
      float float0 = room0.getAreaXOffset();
      assertEquals(865.9123F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      float[][] floatArray0 = new float[2][4];
      Room room0 = new Room(floatArray0);
      room0.setAreaXOffset((-136.0F));
      float float0 = room0.getAreaXOffset();
      assertEquals((-136.0F), float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      float[][] floatArray0 = new float[5][6];
      Room room0 = new Room(floatArray0);
      boolean boolean0 = room0.containsPoint(0.0F, 0.0F, 3572.5742F);
      assertTrue(room0.isFloorVisible());
      assertEquals((-40.0F), room0.getNameYOffset(), 0.01F);
      assertTrue(boolean0);
      assertTrue(room0.isAreaVisible());
      assertTrue(room0.isCeilingVisible());
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      float[][] floatArray0 = new float[3][8];
      Room room0 = new Room(floatArray0);
      assertTrue(room0.isFloorVisible());
      
      room0.setFloorVisible(false);
      room0.clone();
      assertFalse(room0.isFloorVisible());
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      float[][] floatArray0 = new float[7][7];
      float[] floatArray1 = new float[5];
      floatArray1[0] = 568.0F;
      floatArray0[0] = floatArray1;
      float[] floatArray2 = new float[6];
      floatArray2[1] = 432.8F;
      floatArray0[1] = floatArray2;
      Room room0 = new Room(floatArray0);
      Room room1 = room0.clone();
      assertTrue(room1.isFloorVisible());
      assertTrue(room1.isCeilingVisible());
      assertEquals((-40.0F), room1.getNameYOffset(), 0.01F);
      assertTrue(room1.isAreaVisible());
      assertNotSame(room1, room0);
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      float[][] floatArray0 = new float[6][7];
      Room room0 = new Room(floatArray0);
      assertTrue(room0.isCeilingVisible());
      
      room0.setCeilingVisible(false);
      room0.clone();
      assertFalse(room0.isCeilingVisible());
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      float[][] floatArray0 = new float[9][4];
      Room room0 = new Room(floatArray0);
      assertTrue(room0.isAreaVisible());
      
      room0.setAreaVisible(false);
      room0.clone();
      assertFalse(room0.isAreaVisible());
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      float[][] floatArray0 = new float[3][8];
      Room room0 = new Room(floatArray0);
      room0.setPoint((-198.0358F), (-444.09137F), 2);
      room0.clone();
      assertEquals((-222.04568F), room0.getYCenter(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      float[][] floatArray0 = new float[5][6];
      Room room0 = new Room(floatArray0);
      room0.setNameYOffset(2297.9407F);
      room0.clone();
      assertEquals(2297.9407F, room0.getNameYOffset(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      float[][] floatArray0 = new float[7][7];
      Room room0 = new Room(floatArray0);
      room0.setNameXOffset(1330.4F);
      room0.clone();
      assertEquals(1330.4F, room0.getNameXOffset(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      float[][] floatArray0 = new float[7][0];
      Room room0 = new Room(floatArray0);
      room0.setNameXOffset((-959.3176F));
      room0.clone();
      assertEquals((-959.3176F), room0.getNameXOffset(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      float[][] floatArray0 = new float[6][2];
      Room room0 = new Room(floatArray0);
      room0.setNameAngle((-1.0F));
      room0.clone();
      assertEquals(5.2831855F, room0.getNameAngle(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      float[][] floatArray0 = new float[9][4];
      Room room0 = new Room(floatArray0);
      room0.setFloorShininess(2.0F);
      room0.clone();
      assertEquals(2.0F, room0.getFloorShininess(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      float[][] floatArray0 = new float[6][7];
      Room room0 = new Room(floatArray0);
      room0.setFloorShininess((-1179.9208F));
      room0.clone();
      assertEquals((-1179.9208F), room0.getFloorShininess(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      float[][] floatArray0 = new float[3][8];
      Room room0 = new Room(floatArray0);
      room0.setCeilingShininess(5.2831855F);
      room0.clone();
      assertEquals(5.2831855F, room0.getCeilingShininess(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      float[][] floatArray0 = new float[9][4];
      Room room0 = new Room(floatArray0);
      room0.setCeilingShininess((-44.944298F));
      room0.clone();
      assertEquals((-44.944298F), room0.getCeilingShininess(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      float[][] floatArray0 = new float[5][6];
      Room room0 = new Room(floatArray0);
      room0.setAreaYOffset(2847.0F);
      room0.clone();
      assertEquals(2847.0F, room0.getAreaYOffset(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      float[][] floatArray0 = new float[5][6];
      Room room0 = new Room(floatArray0);
      room0.setAreaXOffset(2.0F);
      room0.clone();
      assertEquals(2.0F, room0.getAreaXOffset(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      float[][] floatArray0 = new float[5][6];
      Room room0 = new Room(floatArray0);
      room0.setAreaXOffset((-1.0F));
      room0.clone();
      assertEquals((-1.0F), room0.getAreaXOffset(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      float[][] floatArray0 = new float[6][8];
      Room room0 = new Room(floatArray0);
      room0.setAreaAngle(2);
      room0.clone();
      assertEquals(2.0F, room0.getAreaAngle(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      float[][] floatArray0 = new float[8][0];
      Room room0 = new Room(floatArray0);
      // Undeclared exception!
      try { 
        room0.setPoint(1.0F, 1.0F, 3);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("com.eteks.sweethome3d.model.Room", e);
      }
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      float[][] floatArray0 = new float[2][0];
      Room room0 = new Room(floatArray0);
      // Undeclared exception!
      try { 
        room0.move(622.95215F, (-2067.5586F));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("com.eteks.sweethome3d.model.Room", e);
      }
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      float[][] floatArray0 = new float[8][0];
      Room room0 = new Room(floatArray0);
      // Undeclared exception!
      try { 
        room0.isSingular();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("com.eteks.sweethome3d.model.Room", e);
      }
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      float[][] floatArray0 = new float[3][8];
      float[] floatArray1 = new float[1];
      floatArray1[0] = (-1.0F);
      floatArray0[1] = floatArray1;
      floatArray0[2] = floatArray1;
      Room room0 = new Room(floatArray0);
      room0.removePoint(0);
      // Undeclared exception!
      try { 
        room0.isNameCenterPointAt((-1.0F), (-1.0F), 0.0F);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1
         //
         verifyException("com.eteks.sweethome3d.model.Room", e);
      }
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      float[][] floatArray0 = new float[8][2];
      float[] floatArray1 = new float[0];
      floatArray0[1] = floatArray1;
      Room room0 = new Room(floatArray0);
      // Undeclared exception!
      try { 
        room0.isClockwise();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("com.eteks.sweethome3d.model.Room", e);
      }
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      float[][] floatArray0 = new float[4][6];
      float[] floatArray1 = new float[0];
      floatArray0[2] = floatArray1;
      Room room0 = new Room(floatArray0);
      // Undeclared exception!
      try { 
        room0.isAreaCenterPointAt(2258.3303F, (-3236.0F), (-3236.0F));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      float[][] floatArray0 = new float[8][0];
      Room room0 = new Room(floatArray0);
      // Undeclared exception!
      try { 
        room0.intersectsRectangle(0.0F, 1153.0F, 1821.887F, (-1335.0F));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("com.eteks.sweethome3d.model.Room", e);
      }
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      float[][] floatArray0 = new float[8][0];
      Room room0 = new Room(floatArray0);
      // Undeclared exception!
      try { 
        room0.getYCenter();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1
         //
         verifyException("com.eteks.sweethome3d.model.Room", e);
      }
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      float[][] floatArray0 = new float[2][2];
      float[] floatArray1 = new float[0];
      floatArray0[1] = floatArray1;
      Room room0 = new Room(floatArray0);
      // Undeclared exception!
      try { 
        room0.getXCenter();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      float[][] floatArray0 = new float[2][1];
      Room room0 = new Room(floatArray0);
      // Undeclared exception!
      try { 
        room0.getPointIndexAt((-1.0F), 99.2554F, 622.95215F);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1
         //
         verifyException("com.eteks.sweethome3d.model.Room", e);
      }
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      float[][] floatArray0 = new float[6][0];
      Room room0 = new Room(floatArray0);
      // Undeclared exception!
      try { 
        room0.getArea();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("com.eteks.sweethome3d.model.Room", e);
      }
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      float[][] floatArray0 = new float[8][0];
      Room room0 = new Room(floatArray0);
      // Undeclared exception!
      try { 
        room0.containsPoint(1153.0F, 0.0F, (-227.5F));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("com.eteks.sweethome3d.model.Room", e);
      }
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      Room room0 = null;
      try {
        room0 = new Room((float[][]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.eteks.sweethome3d.model.Room", e);
      }
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      float[][] floatArray0 = new float[3][8];
      Room room0 = new Room(floatArray0);
      boolean boolean0 = room0.intersectsRectangle((-615.0F), (-1783.554F), 823.595F, 370.0F);
      boolean boolean1 = room0.containsPoint((-950.0418F), 0.0F, 370.0F);
      assertTrue(room0.isAreaVisible());
      assertFalse(boolean1 == boolean0);
      assertEquals((-40.0F), room0.getNameYOffset(), 0.01F);
      assertTrue(room0.isCeilingVisible());
      assertTrue(room0.isFloorVisible());
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      float[][] floatArray0 = new float[2][4];
      Room room0 = new Room(floatArray0);
      float float0 = room0.getYCenter();
      assertTrue(room0.isAreaVisible());
      assertTrue(room0.isFloorVisible());
      assertEquals(0.0F, float0, 0.01F);
      assertTrue(room0.isCeilingVisible());
      assertEquals((-40.0F), room0.getNameYOffset(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      float[][] floatArray0 = new float[2][4];
      Room room0 = new Room(floatArray0);
      float float0 = room0.getXCenter();
      assertEquals(0.0F, float0, 0.01F);
      assertTrue(room0.isCeilingVisible());
      assertEquals((-40.0F), room0.getNameYOffset(), 0.01F);
      assertTrue(room0.isAreaVisible());
      assertTrue(room0.isFloorVisible());
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      float[][] floatArray0 = new float[3][8];
      Room room0 = new Room(floatArray0);
      room0.addPoint(0.8520161F, (-32.16F), 0);
      assertEquals(4, room0.getPointCount());
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      float[][] floatArray0 = new float[9][8];
      Room room0 = new Room(floatArray0);
      float[][] floatArray1 = room0.getPoints();
      assertNotSame(floatArray1, floatArray0);
      assertTrue(room0.isFloorVisible());
      assertTrue(room0.isAreaVisible());
      assertEquals((-40.0F), room0.getNameYOffset(), 0.01F);
      assertTrue(room0.isCeilingVisible());
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      float[][] floatArray0 = new float[3][8];
      Room room0 = new Room(floatArray0);
      float float0 = room0.getNameYOffset();
      assertTrue(room0.isFloorVisible());
      assertEquals((-40.0F), float0, 0.01F);
      assertTrue(room0.isAreaVisible());
      assertTrue(room0.isCeilingVisible());
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      float[][] floatArray0 = new float[2][7];
      Room room0 = new Room(floatArray0);
      float float0 = room0.getAreaXOffset();
      assertTrue(room0.isFloorVisible());
      assertEquals((-40.0F), room0.getNameYOffset(), 0.01F);
      assertTrue(room0.isCeilingVisible());
      assertTrue(room0.isAreaVisible());
      assertEquals(0.0F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      float[][] floatArray0 = new float[2][7];
      Room room0 = new Room(floatArray0);
      float float0 = room0.getNameXOffset();
      assertTrue(room0.isFloorVisible());
      assertTrue(room0.isAreaVisible());
      assertEquals((-40.0F), room0.getNameYOffset(), 0.01F);
      assertEquals(0.0F, float0, 0.01F);
      assertTrue(room0.isCeilingVisible());
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      float[][] floatArray0 = new float[2][7];
      Room room0 = new Room(floatArray0);
      room0.move(0.0F, 0.0F);
      assertTrue(room0.isFloorVisible());
      assertEquals((-40.0F), room0.getNameYOffset(), 0.01F);
      assertTrue(room0.isCeilingVisible());
      assertTrue(room0.isAreaVisible());
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      float[][] floatArray0 = new float[5][6];
      Room room0 = new Room(floatArray0);
      room0.setAreaYOffset(2847.0F);
      boolean boolean0 = room0.isAreaCenterPointAt(2847.0F, (-515.56F), 2847.0F);
      assertEquals(2847.0F, room0.getAreaYOffset(), 0.01F);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      float[][] floatArray0 = new float[2][4];
      Room room0 = new Room(floatArray0);
      boolean boolean0 = room0.isNameCenterPointAt(0, (-40.0F), 0);
      assertEquals(0.0F, room0.getXCenter(), 0.01F);
      assertTrue(boolean0);
      assertEquals(0.0F, room0.getYCenter(), 0.01F);
      assertEquals(0.0F, room0.getNameXOffset(), 0.01F);
      assertTrue(room0.isAreaVisible());
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      float[][] floatArray0 = new float[2][7];
      Room room0 = new Room(floatArray0);
      boolean boolean0 = room0.isNameCenterPointAt((-27.310154F), (-27.310154F), (-27.310154F));
      assertTrue(room0.isAreaVisible());
      assertFalse(boolean0);
      assertEquals(0.0F, room0.getXCenter(), 0.01F);
      assertTrue(room0.isFloorVisible());
      assertEquals(0.0F, room0.getNameXOffset(), 0.01F);
      assertEquals((-40.0F), room0.getNameYOffset(), 0.01F);
      assertTrue(room0.isCeilingVisible());
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      float[][] floatArray0 = new float[5][6];
      Room room0 = new Room(floatArray0);
      int int0 = room0.getPointIndexAt(1.0F, (-501.0F), (-1510.0F));
      assertTrue(room0.isFloorVisible());
      assertEquals((-40.0F), room0.getNameYOffset(), 0.01F);
      assertEquals((-1), int0);
      assertTrue(room0.isCeilingVisible());
      assertTrue(room0.isAreaVisible());
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      float[][] floatArray0 = new float[7][7];
      float[] floatArray1 = new float[6];
      floatArray1[0] = 1533.1F;
      floatArray0[2] = floatArray1;
      float[] floatArray2 = new float[5];
      floatArray2[1] = 1533.1F;
      floatArray0[3] = floatArray2;
      Room room0 = new Room(floatArray0);
      boolean boolean0 = room0.isClockwise();
      assertTrue(room0.isCeilingVisible());
      assertTrue(room0.isAreaVisible());
      assertEquals((-40.0F), room0.getNameYOffset(), 0.01F);
      assertTrue(room0.isFloorVisible());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      float[][] floatArray0 = new float[3][3];
      Room room0 = new Room(floatArray0);
      boolean boolean0 = room0.isClockwise();
      assertFalse(boolean0);
      assertTrue(room0.isAreaVisible());
      assertEquals((-40.0F), room0.getNameYOffset(), 0.01F);
      assertTrue(room0.isFloorVisible());
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      float[][] floatArray0 = new float[8][7];
      float[] floatArray1 = new float[16];
      floatArray1[0] = 622.95215F;
      floatArray0[2] = floatArray1;
      float[] floatArray2 = new float[5];
      floatArray2[1] = 622.95215F;
      floatArray0[3] = floatArray2;
      float[] floatArray3 = new float[5];
      floatArray3[0] = 622.95215F;
      floatArray3[1] = 622.95215F;
      floatArray0[4] = floatArray3;
      Room room0 = new Room(floatArray0);
      float float0 = room0.getArea();
      assertTrue(room0.isFloorVisible());
      assertEquals(194034.69F, float0, 0.01F);
      assertEquals((-40.0F), room0.getNameYOffset(), 0.01F);
      assertFalse(room0.isClockwise());
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      float[][] floatArray0 = new float[14][8];
      Room room0 = new Room(floatArray0);
      room0.getArea();
      float float0 = room0.getArea();
      assertEquals(0.0F, float0, 0.01F);
      assertTrue(room0.isFloorVisible());
      assertTrue(room0.isAreaVisible());
      assertEquals((-40.0F), room0.getNameYOffset(), 0.01F);
      assertTrue(room0.isCeilingVisible());
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      float[][] floatArray0 = new float[9][4];
      Room room0 = new Room(floatArray0);
      boolean boolean0 = room0.isAtLevel((Level) null);
      assertTrue(room0.isFloorVisible());
      assertTrue(room0.isAreaVisible());
      assertTrue(boolean0);
      assertTrue(room0.isCeilingVisible());
      assertEquals((-40.0F), room0.getNameYOffset(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      float[][] floatArray0 = new float[5][6];
      Room room0 = new Room(floatArray0);
      Level level0 = new Level("Super class isn't cloneable", 0.0F, (-5563.524F), 693.2F);
      boolean boolean0 = room0.isAtLevel(level0);
      assertTrue(room0.isCeilingVisible());
      assertTrue(room0.isFloorVisible());
      assertTrue(room0.isAreaVisible());
      assertEquals((-40.0F), room0.getNameYOffset(), 0.01F);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      float[][] floatArray0 = new float[15][8];
      Room room0 = new Room(floatArray0);
      Level level0 = new Level("B>Y2/2'F=-hOs", 0.0F, 0.0F, 0.0F);
      room0.setLevel(level0);
      Level level1 = room0.getLevel();
      assertTrue(room0.isCeilingVisible());
      assertTrue(room0.isFloorVisible());
      assertEquals((-40.0F), room0.getNameYOffset(), 0.01F);
      assertNotNull(level1);
      assertTrue(room0.isAreaVisible());
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      float[][] floatArray0 = new float[6][8];
      Room room0 = new Room(floatArray0);
      room0.setLevel((Level) null);
      assertTrue(room0.isAreaVisible());
      assertTrue(room0.isFloorVisible());
      assertEquals((-40.0F), room0.getNameYOffset(), 0.01F);
      assertTrue(room0.isCeilingVisible());
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      float[][] floatArray0 = new float[10][8];
      Room room0 = new Room(floatArray0);
      room0.setCeilingShininess(0.0F);
      assertTrue(room0.isFloorVisible());
      assertTrue(room0.isCeilingVisible());
      assertEquals((-40.0F), room0.getNameYOffset(), 0.01F);
      assertTrue(room0.isAreaVisible());
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      float[][] floatArray0 = new float[25][8];
      Room room0 = new Room(floatArray0);
      room0.setCeilingVisible(false);
      assertFalse(room0.isCeilingVisible());
      
      room0.setCeilingVisible(true);
      assertEquals((-40.0F), room0.getNameYOffset(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      float[][] floatArray0 = new float[6][7];
      Room room0 = new Room(floatArray0);
      assertTrue(room0.isCeilingVisible());
      
      room0.setCeilingVisible(true);
      assertTrue(room0.isFloorVisible());
      assertEquals((-40.0F), room0.getNameYOffset(), 0.01F);
      assertTrue(room0.isAreaVisible());
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      float[][] floatArray0 = new float[16][8];
      CatalogTexture catalogTexture0 = new CatalogTexture("com.eteks.sweethome3d.model.Level$Property", (Content) null, (-1083.2266F), 0.0F);
      HomeTexture homeTexture0 = new HomeTexture(catalogTexture0);
      Room room0 = new Room(floatArray0);
      room0.setCeilingTexture(homeTexture0);
      room0.setCeilingTexture(homeTexture0);
      assertEquals((-40.0F), room0.getNameYOffset(), 0.01F);
      assertTrue(room0.isAreaVisible());
      assertTrue(room0.isCeilingVisible());
      assertTrue(room0.isFloorVisible());
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      float[][] floatArray0 = new float[6][8];
      Room room0 = new Room(floatArray0);
      room0.setCeilingTexture((HomeTexture) null);
      assertEquals((-40.0F), room0.getNameYOffset(), 0.01F);
      assertTrue(room0.isAreaVisible());
      assertTrue(room0.isFloorVisible());
      assertTrue(room0.isCeilingVisible());
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      float[][] floatArray0 = new float[23][8];
      Room room0 = new Room(floatArray0);
      CatalogTexture catalogTexture0 = new CatalogTexture("]D@sr&[s", (Content) null, (-1083.2266F), (-1083.2266F));
      HomeTexture homeTexture0 = new HomeTexture(catalogTexture0);
      room0.setCeilingTexture(homeTexture0);
      HomeTexture homeTexture1 = room0.getCeilingTexture();
      assertTrue(room0.isCeilingVisible());
      assertTrue(room0.isFloorVisible());
      assertEquals((-40.0F), room0.getNameYOffset(), 0.01F);
      assertTrue(room0.isAreaVisible());
      assertNotNull(homeTexture1);
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      float[][] floatArray0 = new float[9][8];
      Room room0 = new Room(floatArray0);
      room0.setCeilingColor((Integer) null);
      assertTrue(room0.isAreaVisible());
      assertTrue(room0.isCeilingVisible());
      assertEquals((-40.0F), room0.getNameYOffset(), 0.01F);
      assertTrue(room0.isFloorVisible());
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      float[][] floatArray0 = new float[6][8];
      Room room0 = new Room(floatArray0);
      Integer integer0 = new Integer((-5));
      room0.setCeilingColor(integer0);
      room0.setCeilingColor(integer0);
      assertTrue(room0.isAreaVisible());
      assertEquals((-40.0F), room0.getNameYOffset(), 0.01F);
      assertTrue(room0.isCeilingVisible());
      assertTrue(room0.isFloorVisible());
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      float[][] floatArray0 = new float[15][8];
      Room room0 = new Room(floatArray0);
      room0.setFloorShininess(1.0F);
      float float0 = room0.getFloorShininess();
      assertEquals(1.0F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      float[][] floatArray0 = new float[4][8];
      Room room0 = new Room(floatArray0);
      room0.setFloorShininess(0.0F);
      assertTrue(room0.isFloorVisible());
      assertTrue(room0.isAreaVisible());
      assertEquals((-40.0F), room0.getNameYOffset(), 0.01F);
      assertTrue(room0.isCeilingVisible());
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      float[][] floatArray0 = new float[9][4];
      Room room0 = new Room(floatArray0);
      room0.setFloorVisible(false);
      assertFalse(room0.isFloorVisible());
      
      room0.setFloorVisible(true);
      assertEquals((-40.0F), room0.getNameYOffset(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      float[][] floatArray0 = new float[7][7];
      Room room0 = new Room(floatArray0);
      assertTrue(room0.isFloorVisible());
      
      room0.setFloorVisible(false);
      boolean boolean0 = room0.isFloorVisible();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      float[][] floatArray0 = new float[7][7];
      Room room0 = new Room(floatArray0);
      assertTrue(room0.isFloorVisible());
      
      room0.setFloorVisible(true);
      assertEquals((-40.0F), room0.getNameYOffset(), 0.01F);
      assertTrue(room0.isAreaVisible());
      assertTrue(room0.isCeilingVisible());
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      float[][] floatArray0 = new float[6][8];
      Room room0 = new Room(floatArray0);
      room0.setFloorTexture((HomeTexture) null);
      assertTrue(room0.isFloorVisible());
      assertTrue(room0.isAreaVisible());
      assertTrue(room0.isCeilingVisible());
      assertEquals((-40.0F), room0.getNameYOffset(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      float[][] floatArray0 = new float[23][8];
      Room room0 = new Room(floatArray0);
      CatalogTexture catalogTexture0 = new CatalogTexture("]D@sr&[s", (Content) null, (-1083.2266F), (-1083.2266F));
      HomeTexture homeTexture0 = new HomeTexture(catalogTexture0);
      room0.setFloorTexture(homeTexture0);
      room0.setFloorTexture(homeTexture0);
      assertTrue(room0.isFloorVisible());
      assertTrue(room0.isAreaVisible());
      assertEquals((-40.0F), room0.getNameYOffset(), 0.01F);
      assertTrue(room0.isCeilingVisible());
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      float[][] floatArray0 = new float[16][8];
      Room room0 = new Room(floatArray0);
      room0.setFloorColor((Integer) null);
      assertTrue(room0.isCeilingVisible());
      assertTrue(room0.isFloorVisible());
      assertTrue(room0.isAreaVisible());
      assertEquals((-40.0F), room0.getNameYOffset(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      float[][] floatArray0 = new float[9][8];
      Room room0 = new Room(floatArray0);
      Integer integer0 = new Integer(21);
      room0.setFloorColor(integer0);
      room0.setFloorColor(integer0);
      assertTrue(room0.isCeilingVisible());
      assertTrue(room0.isFloorVisible());
      assertEquals((-40.0F), room0.getNameYOffset(), 0.01F);
      assertTrue(room0.isAreaVisible());
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      float[][] floatArray0 = new float[6][8];
      Room room0 = new Room(floatArray0);
      Integer integer0 = new Integer((-5));
      room0.setFloorColor(integer0);
      Integer integer1 = room0.getFloorColor();
      assertTrue(room0.isCeilingVisible());
      assertNotNull(integer1);
      assertEquals((-40.0F), room0.getNameYOffset(), 0.01F);
      assertTrue(room0.isAreaVisible());
      assertTrue(room0.isFloorVisible());
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      float[][] floatArray0 = new float[6][8];
      Room room0 = new Room(floatArray0);
      room0.setAreaAngle((-276.0F));
      room0.setAreaAngle((-276.0F));
      assertEquals(0.46015352F, room0.getAreaAngle(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      float[][] floatArray0 = new float[6][7];
      Room room0 = new Room(floatArray0);
      TextStyle textStyle0 = new TextStyle(687.441F);
      room0.setAreaStyle(textStyle0);
      TextStyle textStyle1 = room0.getAreaStyle();
      assertTrue(room0.isAreaVisible());
      assertNotNull(textStyle1);
      assertEquals((-40.0F), room0.getNameYOffset(), 0.01F);
      assertTrue(room0.isCeilingVisible());
      assertTrue(room0.isFloorVisible());
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      float[][] floatArray0 = new float[3][4];
      Room room0 = new Room(floatArray0);
      room0.setAreaStyle((TextStyle) null);
      assertTrue(room0.isCeilingVisible());
      assertTrue(room0.isFloorVisible());
      assertTrue(room0.isAreaVisible());
      assertEquals((-40.0F), room0.getNameYOffset(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      float[][] floatArray0 = new float[2][7];
      Room room0 = new Room(floatArray0);
      room0.setAreaYOffset((-827.27F));
      room0.clone();
      assertEquals((-827.27F), room0.getAreaYOffset(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      float[][] floatArray0 = new float[14][8];
      Room room0 = new Room(floatArray0);
      room0.setAreaYOffset(0.0F);
      assertTrue(room0.isAreaVisible());
      assertEquals((-40.0F), room0.getNameYOffset(), 0.01F);
      assertTrue(room0.isFloorVisible());
      assertTrue(room0.isCeilingVisible());
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      float[][] floatArray0 = new float[2][4];
      Room room0 = new Room(floatArray0);
      room0.setAreaXOffset(0);
      assertTrue(room0.isFloorVisible());
      assertEquals((-40.0F), room0.getNameYOffset(), 0.01F);
      assertTrue(room0.isCeilingVisible());
      assertTrue(room0.isAreaVisible());
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      float[][] floatArray0 = new float[2][7];
      Room room0 = new Room(floatArray0);
      room0.setAreaVisible(false);
      assertFalse(room0.isAreaVisible());
      
      room0.setAreaVisible(true);
      assertEquals((-40.0F), room0.getNameYOffset(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      float[][] floatArray0 = new float[2][7];
      Room room0 = new Room(floatArray0);
      assertTrue(room0.isAreaVisible());
      
      room0.setAreaVisible(true);
      assertTrue(room0.isCeilingVisible());
      assertTrue(room0.isFloorVisible());
      assertEquals((-40.0F), room0.getNameYOffset(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      float[][] floatArray0 = new float[6][4];
      Room room0 = new Room(floatArray0);
      // Undeclared exception!
      try { 
        room0.removePoint(1830);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Invalid index 1830
         //
         verifyException("com.eteks.sweethome3d.model.Room", e);
      }
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      float[][] floatArray0 = new float[2][4];
      Room room0 = new Room(floatArray0);
      room0.removePoint(0);
      // Undeclared exception!
      try { 
        room0.removePoint(0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Room points must containt at least one point
         //
         verifyException("com.eteks.sweethome3d.model.Room", e);
      }
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      float[][] floatArray0 = new float[3][8];
      Room room0 = new Room(floatArray0);
      // Undeclared exception!
      try { 
        room0.removePoint((-2146827112));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Invalid index -2146827112
         //
         verifyException("com.eteks.sweethome3d.model.Room", e);
      }
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      float[][] floatArray0 = new float[6][4];
      Room room0 = new Room(floatArray0);
      room0.setPoint(0.0F, (-887.526F), 1);
      assertEquals((-443.763F), room0.getYCenter(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      float[][] floatArray0 = new float[3][8];
      Room room0 = new Room(floatArray0);
      room0.setPoint(0.0F, 0.0F, 2);
      assertTrue(room0.isCeilingVisible());
      assertTrue(room0.isFloorVisible());
      assertTrue(room0.isAreaVisible());
      assertEquals((-40.0F), room0.getNameYOffset(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      float[][] floatArray0 = new float[4][8];
      Room room0 = new Room(floatArray0);
      // Undeclared exception!
      try { 
        room0.setPoint(6483.0664F, 6483.0664F, 1085);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Invalid index 1085
         //
         verifyException("com.eteks.sweethome3d.model.Room", e);
      }
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      float[][] floatArray0 = new float[21][8];
      Room room0 = new Room(floatArray0);
      room0.setPoint(206.0F, 206.0F, 20);
      float float0 = room0.getXCenter();
      assertEquals(103.0F, room0.getYCenter(), 0.01F);
      assertEquals(103.0F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      float[][] floatArray0 = new float[15][8];
      Room room0 = new Room(floatArray0);
      // Undeclared exception!
      try { 
        room0.setPoint(1.0F, 1.0F, (-622));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Invalid index -622
         //
         verifyException("com.eteks.sweethome3d.model.Room", e);
      }
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      float[][] floatArray0 = new float[9][8];
      Room room0 = new Room(floatArray0);
      // Undeclared exception!
      try { 
        room0.addPoint(1.0F, 1.0F, 11);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Invalid index 11
         //
         verifyException("com.eteks.sweethome3d.model.Room", e);
      }
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      float[][] floatArray0 = new float[11][8];
      Room room0 = new Room(floatArray0);
      // Undeclared exception!
      try { 
        room0.addPoint(1.0F, 1.0F, (-2146493110));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Invalid index -2146493110
         //
         verifyException("com.eteks.sweethome3d.model.Room", e);
      }
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      float[][] floatArray0 = new float[2][7];
      Room room0 = new Room(floatArray0);
      room0.move(820.856F, (-3472.0F));
      assertEquals(820.856F, room0.getXCenter(), 0.01F);
      
      room0.setPoints(floatArray0);
      assertEquals((-40.0F), room0.getNameYOffset(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      float[][] floatArray0 = new float[6][7];
      Room room0 = new Room(floatArray0);
      room0.setPoints(floatArray0);
      assertTrue(room0.isAreaVisible());
      assertTrue(room0.isFloorVisible());
      assertTrue(room0.isCeilingVisible());
      assertEquals((-40.0F), room0.getNameYOffset(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      float[][] floatArray0 = new float[14][8];
      Room room0 = new Room(floatArray0);
      room0.setNameAngle(0.0F);
      assertTrue(room0.isCeilingVisible());
      assertEquals((-40.0F), room0.getNameYOffset(), 0.01F);
      assertTrue(room0.isAreaVisible());
      assertTrue(room0.isFloorVisible());
      assertEquals(0.0F, room0.getNameAngle(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      float[][] floatArray0 = new float[3][8];
      Room room0 = new Room(floatArray0);
      TextStyle textStyle0 = new TextStyle(0.0F);
      room0.setNameStyle(textStyle0);
      assertTrue(room0.isCeilingVisible());
      assertTrue(room0.isFloorVisible());
      assertEquals((-40.0F), room0.getNameYOffset(), 0.01F);
      assertTrue(room0.isAreaVisible());
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      float[][] floatArray0 = new float[2][7];
      Room room0 = new Room(floatArray0);
      room0.setNameStyle((TextStyle) null);
      assertEquals((-40.0F), room0.getNameYOffset(), 0.01F);
      assertTrue(room0.isAreaVisible());
      assertTrue(room0.isFloorVisible());
      assertTrue(room0.isCeilingVisible());
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      float[][] floatArray0 = new float[6][7];
      Room room0 = new Room(floatArray0);
      assertEquals((-40.0F), room0.getNameYOffset(), 0.01F);
      
      room0.setNameYOffset(0.0F);
      room0.clone();
      assertEquals(0.0F, room0.getNameYOffset(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      float[][] floatArray0 = new float[14][8];
      Room room0 = new Room(floatArray0);
      assertEquals((-40.0F), room0.getNameYOffset(), 0.01F);
      
      room0.setNameYOffset((-40.0F));
      assertTrue(room0.isFloorVisible());
      assertTrue(room0.isCeilingVisible());
      assertTrue(room0.isAreaVisible());
  }
}
