/*
 * This file was automatically generated by EvoSuite
 * Tue Feb 19 15:48:13 GMT 2019
 */

package org.sat4j.tools;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;
import org.sat4j.BasicLauncher;
import org.sat4j.core.ASolverFactory;
import org.sat4j.core.VecInt;
import org.sat4j.minisat.constraints.MixedDataStructureDanielWLConciseBinary;
import org.sat4j.minisat.constraints.cnf.UnitClause;
import org.sat4j.minisat.core.SearchParams;
import org.sat4j.minisat.core.Solver;
import org.sat4j.minisat.learning.PercentLengthLearning;
import org.sat4j.minisat.orders.LevelBasedVarOrderHeap;
import org.sat4j.minisat.orders.NaturalStaticOrder;
import org.sat4j.minisat.orders.RSATLastLearnedClausesPhaseSelectionStrategy;
import org.sat4j.minisat.restarts.FixedPeriodRestarts;
import org.sat4j.minisat.restarts.LubyRestarts;
import org.sat4j.specs.Constr;
import org.sat4j.specs.IConstr;
import org.sat4j.specs.ISolver;
import org.sat4j.specs.IVecInt;
import org.sat4j.specs.UnitPropagationListener;
import org.sat4j.tools.CheckMUSSolutionListener;
import org.sat4j.tools.DimacsStringSolver;
import org.sat4j.tools.ManyCore;
import org.sat4j.tools.Minimal4CardinalityModel;
import org.sat4j.tools.OptToSatAdapter;
import org.sat4j.tools.SolutionFoundListener;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Minimal4CardinalityModel_ESTest extends Minimal4CardinalityModel_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      int[] intArray0 = new int[7];
      intArray0[0] = 1277;
      intArray0[1] = 1277;
      intArray0[2] = 1277;
      intArray0[3] = 1277;
      intArray0[4] = 1277;
      intArray0[5] = 1277;
      intArray0[6] = 1277;
      int[] intArray1 = new int[6];
      intArray1[0] = 1277;
      intArray1[1] = 1277;
      intArray1[2] = 1277;
      intArray1[3] = 1277;
      intArray1[4] = 1277;
      intArray1[5] = 1277;
      ISolver iSolver0 = mock(ISolver.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(iSolver0).isSatisfiable();
      doReturn((Object) intArray0, (Object) null).when(iSolver0).model();
      doReturn(1277, 1277, 1277, 1277, 1277).when(iSolver0).nVars();
      doReturn((IConstr) null).when(iSolver0).addAtMost(any(org.sat4j.specs.IVecInt.class) , anyInt());
      doReturn((Object) intArray1, (Object) null).when(iSolver0).modelWithInternalVariables();
      Minimal4CardinalityModel minimal4CardinalityModel0 = new Minimal4CardinalityModel(iSolver0);
      UnitPropagationListener unitPropagationListener0 = mock(UnitPropagationListener.class, new ViolatedAssumptionAnswer());
      RSATLastLearnedClausesPhaseSelectionStrategy rSATLastLearnedClausesPhaseSelectionStrategy0 = new RSATLastLearnedClausesPhaseSelectionStrategy();
      LevelBasedVarOrderHeap levelBasedVarOrderHeap0 = new LevelBasedVarOrderHeap();
      levelBasedVarOrderHeap0.varDecayActivity();
      levelBasedVarOrderHeap0.getVocabulary();
      minimal4CardinalityModel0.model();
      levelBasedVarOrderHeap0.assignLiteral(16);
      // Undeclared exception!
      try { 
        minimal4CardinalityModel0.model();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      PercentLengthLearning<MixedDataStructureDanielWLConciseBinary> percentLengthLearning0 = new PercentLengthLearning<MixedDataStructureDanielWLConciseBinary>();
      MixedDataStructureDanielWLConciseBinary mixedDataStructureDanielWLConciseBinary0 = new MixedDataStructureDanielWLConciseBinary();
      NaturalStaticOrder naturalStaticOrder0 = new NaturalStaticOrder();
      LubyRestarts lubyRestarts0 = new LubyRestarts(513);
      Solver<MixedDataStructureDanielWLConciseBinary> solver0 = new Solver<MixedDataStructureDanielWLConciseBinary>(percentLengthLearning0, mixedDataStructureDanielWLConciseBinary0, naturalStaticOrder0, lubyRestarts0);
      solver0.isSatisfiable();
      Minimal4CardinalityModel minimal4CardinalityModel0 = new Minimal4CardinalityModel(solver0);
      int[] intArray0 = minimal4CardinalityModel0.modelWithInternalVariables();
      assertEquals(0, intArray0.length);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      OptToSatAdapter optToSatAdapter0 = mock(OptToSatAdapter.class, new ViolatedAssumptionAnswer());
      doReturn((int[]) null).when(optToSatAdapter0).model();
      doReturn((int[]) null).when(optToSatAdapter0).modelWithInternalVariables();
      doReturn(0, 0).when(optToSatAdapter0).nVars();
      OptToSatAdapter[] optToSatAdapterArray0 = new OptToSatAdapter[1];
      optToSatAdapterArray0[0] = optToSatAdapter0;
      ManyCore<OptToSatAdapter> manyCore0 = new ManyCore<OptToSatAdapter>(false, optToSatAdapterArray0);
      Minimal4CardinalityModel minimal4CardinalityModel0 = new Minimal4CardinalityModel(manyCore0);
      // Undeclared exception!
      try { 
        minimal4CardinalityModel0.modelWithInternalVariables();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      int[] intArray0 = new int[7];
      intArray0[0] = 1277;
      intArray0[1] = 1277;
      intArray0[2] = 1277;
      intArray0[3] = 1277;
      intArray0[4] = 1277;
      intArray0[5] = 1277;
      intArray0[6] = 1277;
      int[] intArray1 = new int[6];
      intArray1[0] = 1277;
      intArray1[1] = 1277;
      intArray1[2] = 1277;
      intArray1[3] = 1277;
      intArray1[4] = 1277;
      intArray1[5] = 1277;
      Constr constr0 = Constr.TAUTOLOGY;
      constr0.size();
      ISolver iSolver0 = mock(ISolver.class, new ViolatedAssumptionAnswer());
      doReturn(true).when(iSolver0).isSatisfiable();
      doReturn((Object) intArray0, (Object) null).when(iSolver0).model();
      doReturn(1277, 1277, 1277, 1277, 1277).when(iSolver0).nVars();
      doReturn(constr0).when(iSolver0).addAtMost(any(org.sat4j.specs.IVecInt.class) , anyInt());
      doReturn((Object) intArray1, (Object) null).when(iSolver0).modelWithInternalVariables();
      Minimal4CardinalityModel minimal4CardinalityModel0 = new Minimal4CardinalityModel(iSolver0);
      // Undeclared exception!
      try { 
        minimal4CardinalityModel0.model();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Minimal4CardinalityModel minimal4CardinalityModel0 = null;
      try {
        minimal4CardinalityModel0 = new Minimal4CardinalityModel((ISolver) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.tools.AbstractMinimalModel", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      ISolver iSolver0 = mock(ISolver.class, new ViolatedAssumptionAnswer());
      doReturn((-25)).when(iSolver0).nVars();
      Minimal4CardinalityModel minimal4CardinalityModel0 = null;
      try {
        minimal4CardinalityModel0 = new Minimal4CardinalityModel(iSolver0);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.core.VecInt", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      DimacsStringSolver dimacsStringSolver0 = new DimacsStringSolver();
      SolutionFoundListener solutionFoundListener0 = SolutionFoundListener.VOID;
      Minimal4CardinalityModel minimal4CardinalityModel0 = new Minimal4CardinalityModel(dimacsStringSolver0, solutionFoundListener0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      int[] intArray0 = new int[7];
      UnitClause unitClause0 = new UnitClause(0);
      ISolver iSolver0 = mock(ISolver.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(iSolver0).isSatisfiable();
      doReturn(intArray0).when(iSolver0).model();
      doReturn(1277, 1277, 1277, 1277, 1277).when(iSolver0).nVars();
      doReturn(unitClause0).when(iSolver0).addAtMost(any(org.sat4j.specs.IVecInt.class) , anyInt());
      doReturn(intArray0).when(iSolver0).modelWithInternalVariables();
      doReturn(false).when(iSolver0).removeConstr(any(org.sat4j.specs.IConstr.class));
      Minimal4CardinalityModel minimal4CardinalityModel0 = new Minimal4CardinalityModel(iSolver0);
      int[] intArray1 = minimal4CardinalityModel0.model();
      assertSame(intArray1, intArray0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      PercentLengthLearning<MixedDataStructureDanielWLConciseBinary> percentLengthLearning0 = new PercentLengthLearning<MixedDataStructureDanielWLConciseBinary>(11);
      MixedDataStructureDanielWLConciseBinary mixedDataStructureDanielWLConciseBinary0 = new MixedDataStructureDanielWLConciseBinary();
      SearchParams searchParams0 = new SearchParams(11, 11);
      RSATLastLearnedClausesPhaseSelectionStrategy rSATLastLearnedClausesPhaseSelectionStrategy0 = new RSATLastLearnedClausesPhaseSelectionStrategy();
      LevelBasedVarOrderHeap levelBasedVarOrderHeap0 = new LevelBasedVarOrderHeap(rSATLastLearnedClausesPhaseSelectionStrategy0);
      FixedPeriodRestarts fixedPeriodRestarts0 = new FixedPeriodRestarts();
      ASolverFactory<OptToSatAdapter> aSolverFactory0 = (ASolverFactory<OptToSatAdapter>) mock(ASolverFactory.class, new ViolatedAssumptionAnswer());
      BasicLauncher<OptToSatAdapter> basicLauncher0 = new BasicLauncher<OptToSatAdapter>(aSolverFactory0);
      Solver<MixedDataStructureDanielWLConciseBinary> solver0 = new Solver<MixedDataStructureDanielWLConciseBinary>(percentLengthLearning0, mixedDataStructureDanielWLConciseBinary0, searchParams0, levelBasedVarOrderHeap0, fixedPeriodRestarts0, basicLauncher0);
      solver0.isSatisfiable();
      Minimal4CardinalityModel minimal4CardinalityModel0 = new Minimal4CardinalityModel(solver0);
      int[] intArray0 = minimal4CardinalityModel0.model();
      assertArrayEquals(new int[] {}, intArray0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      SolutionFoundListener solutionFoundListener0 = SolutionFoundListener.VOID;
      Minimal4CardinalityModel minimal4CardinalityModel0 = null;
      try {
        minimal4CardinalityModel0 = new Minimal4CardinalityModel((ISolver) null, (IVecInt) null, solutionFoundListener0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      DimacsStringSolver dimacsStringSolver0 = new DimacsStringSolver();
      VecInt vecInt0 = new VecInt(1, 1);
      Minimal4CardinalityModel minimal4CardinalityModel0 = new Minimal4CardinalityModel(dimacsStringSolver0, vecInt0);
      // Undeclared exception!
      try { 
        minimal4CardinalityModel0.modelWithInternalVariables();
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.tools.DimacsStringSolver", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Minimal4CardinalityModel minimal4CardinalityModel0 = null;
      try {
        minimal4CardinalityModel0 = new Minimal4CardinalityModel((ISolver) null, (IVecInt) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      DimacsStringSolver dimacsStringSolver0 = new DimacsStringSolver();
      Minimal4CardinalityModel minimal4CardinalityModel0 = new Minimal4CardinalityModel(dimacsStringSolver0);
      // Undeclared exception!
      try { 
        minimal4CardinalityModel0.model();
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.tools.DimacsStringSolver", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      ASolverFactory<OptToSatAdapter> aSolverFactory0 = (ASolverFactory<OptToSatAdapter>) mock(ASolverFactory.class, new ViolatedAssumptionAnswer());
      CheckMUSSolutionListener checkMUSSolutionListener0 = new CheckMUSSolutionListener(aSolverFactory0);
      Minimal4CardinalityModel minimal4CardinalityModel0 = null;
      try {
        minimal4CardinalityModel0 = new Minimal4CardinalityModel((ISolver) null, checkMUSSolutionListener0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.tools.AbstractMinimalModel", e);
      }
  }
}
