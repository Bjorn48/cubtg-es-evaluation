/*
 * This file was automatically generated by EvoSuite
 * Tue Feb 19 07:33:17 GMT 2019
 */

package org.sat4j.minisat.constraints.cnf;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.NoSuchElementException;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;
import org.sat4j.core.ReadOnlyVec;
import org.sat4j.core.Vec;
import org.sat4j.core.VecInt;
import org.sat4j.minisat.constraints.CardinalityDataStructure;
import org.sat4j.minisat.constraints.cnf.LearntWLClause;
import org.sat4j.minisat.constraints.cnf.Lits;
import org.sat4j.minisat.constraints.cnf.OriginalWLClause;
import org.sat4j.minisat.core.ILits;
import org.sat4j.specs.Constr;
import org.sat4j.specs.IVec;
import org.sat4j.specs.IVecInt;
import org.sat4j.specs.Propagatable;
import org.sat4j.specs.UnitPropagationListener;
import org.sat4j.specs.VarMapper;
import org.sat4j.tools.DotSearchTracing;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class WLClause_ESTest extends WLClause_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      int[] intArray0 = new int[3];
      VecInt vecInt0 = new VecInt(intArray0);
      VecInt vecInt1 = new VecInt(intArray0);
      vecInt0.insertFirst(45);
      LearntWLClause learntWLClause0 = new LearntWLClause(vecInt0, (ILits) null);
      int int0 = learntWLClause0.getAssertionLevel(vecInt1, (-121));
      assertEquals(0.0, learntWLClause0.getActivity(), 0.01);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      int[] intArray0 = new int[3];
      VecInt vecInt0 = new VecInt(intArray0);
      VecInt vecInt1 = new VecInt(intArray0);
      LearntWLClause learntWLClause0 = new LearntWLClause(vecInt0, (ILits) null);
      // Undeclared exception!
      try { 
        learntWLClause0.calcReasonOnTheFly((-121), vecInt0, vecInt1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.minisat.constraints.cnf.WLClause", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      VecInt vecInt0 = new VecInt(1449, 1449);
      LearntWLClause learntWLClause0 = new LearntWLClause(vecInt0, (ILits) null);
      learntWLClause0.hashCode();
      assertEquals(0.0, learntWLClause0.getActivity(), 0.01);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      int[] intArray0 = new int[4];
      VecInt vecInt0 = new VecInt(intArray0);
      VecInt vecInt1 = new VecInt();
      LearntWLClause learntWLClause0 = new LearntWLClause(vecInt1, (ILits) null);
      LearntWLClause learntWLClause1 = new LearntWLClause(vecInt0, (ILits) null);
      boolean boolean0 = learntWLClause1.equals(learntWLClause0);
      assertEquals(0.0, learntWLClause1.getActivity(), 0.01);
      assertFalse(learntWLClause0.equals((Object)learntWLClause1));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      VecInt vecInt0 = new VecInt(1447, 1447);
      LearntWLClause learntWLClause0 = new LearntWLClause(vecInt0, (ILits) null);
      learntWLClause0.setActivity((-1.0));
      learntWLClause0.rescaleBy(1.0E-100);
      assertEquals((-1.0E-100), learntWLClause0.getActivity(), 0.01);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      VecInt vecInt0 = new VecInt(1417, 1417);
      ILits iLits0 = mock(ILits.class, new ViolatedAssumptionAnswer());
      doReturn(true, false).when(iLits0).isFalsified(anyInt());
      doReturn(false).when(iLits0).isSatisfied(anyInt());
      OriginalWLClause originalWLClause0 = new OriginalWLClause(vecInt0, iLits0);
      originalWLClause0.propagate((UnitPropagationListener) null, 1417);
      assertEquals(0.0, originalWLClause0.getActivity(), 0.01);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      int[] intArray0 = new int[3];
      intArray0[0] = (-121);
      VecInt vecInt0 = new VecInt(intArray0);
      LearntWLClause learntWLClause0 = new LearntWLClause(vecInt0, (ILits) null);
      // Undeclared exception!
      try { 
        learntWLClause0.remove((UnitPropagationListener) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.minisat.constraints.cnf.WLClause", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      VecInt vecInt0 = new VecInt(1442, 1442);
      ILits iLits0 = mock(ILits.class, new ViolatedAssumptionAnswer());
      doReturn("", "", "", "',F0\"ztj\"V[;C", "',F0\"ztj\"V[;C").when(iLits0).valueToString(anyInt());
      DotSearchTracing<Object> dotSearchTracing0 = new DotSearchTracing<Object>("");
      LearntWLClause learntWLClause0 = new LearntWLClause(vecInt0, iLits0);
      learntWLClause0.toString((VarMapper) dotSearchTracing0);
      assertEquals(0.0, learntWLClause0.getActivity(), 0.01);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      VecInt vecInt0 = new VecInt(1442, 1442);
      ILits iLits0 = mock(ILits.class, new ViolatedAssumptionAnswer());
      doReturn("]", "]", "]", "", ", ").when(iLits0).valueToString(anyInt());
      OriginalWLClause originalWLClause0 = new OriginalWLClause(vecInt0, iLits0);
      Constr constr0 = originalWLClause0.toConstraint();
      assertEquals(0.0, constr0.getActivity(), 0.01);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      VecInt vecInt0 = new VecInt();
      OriginalWLClause originalWLClause0 = new OriginalWLClause(vecInt0, (ILits) null);
      Constr constr0 = originalWLClause0.toConstraint();
      assertEquals(0.0, constr0.getActivity(), 0.01);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      VecInt vecInt0 = new VecInt(1423);
      LearntWLClause learntWLClause0 = new LearntWLClause(vecInt0, (ILits) null);
      learntWLClause0.size();
      assertEquals(0.0, learntWLClause0.getActivity(), 0.01);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      VecInt vecInt0 = new VecInt(1442, 1442);
      ILits iLits0 = mock(ILits.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(iLits0).isFalsified(anyInt());
      doReturn(false).when(iLits0).isSatisfied(anyInt());
      OriginalWLClause originalWLClause0 = new OriginalWLClause(vecInt0, iLits0);
      originalWLClause0.propagate((UnitPropagationListener) null, (-388));
      assertEquals(0.0, originalWLClause0.getActivity(), 0.01);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      VecInt vecInt0 = new VecInt(1423);
      LearntWLClause learntWLClause0 = new LearntWLClause(vecInt0, (ILits) null);
      learntWLClause0.getLits();
      assertEquals(0.0, learntWLClause0.getActivity(), 0.01);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      VecInt vecInt0 = new VecInt(1447, 1447);
      OriginalWLClause originalWLClause0 = new OriginalWLClause(vecInt0, (ILits) null);
      originalWLClause0.forwardActivity(1447);
      double double0 = originalWLClause0.getActivity();
      assertEquals(1447.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      VecInt vecInt0 = new VecInt(1447, 1447);
      LearntWLClause learntWLClause0 = new LearntWLClause(vecInt0, (ILits) null);
      learntWLClause0.get(512);
      assertEquals(0.0, learntWLClause0.getActivity(), 0.01);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      int[] intArray0 = new int[3];
      intArray0[0] = (-121);
      VecInt vecInt0 = new VecInt(intArray0);
      LearntWLClause learntWLClause0 = new LearntWLClause(vecInt0, (ILits) null);
      int int0 = learntWLClause0.get(0);
      assertEquals(0.0, learntWLClause0.getActivity(), 0.01);
      assertEquals((-121), int0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      VecInt vecInt0 = new VecInt(1442, 1442);
      OriginalWLClause originalWLClause0 = new OriginalWLClause(vecInt0, (ILits) null);
      // Undeclared exception!
      try { 
        originalWLClause0.toString();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.minisat.constraints.cnf.WLClause", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      VecInt vecInt0 = new VecInt(1442, 1442);
      ReadOnlyVec<Propagatable> readOnlyVec0 = new ReadOnlyVec<Propagatable>((IVec<Propagatable>) null);
      ILits iLits0 = mock(ILits.class, new ViolatedAssumptionAnswer());
      doReturn(readOnlyVec0).when(iLits0).watches(anyInt());
      OriginalWLClause originalWLClause0 = new OriginalWLClause(vecInt0, iLits0);
      // Undeclared exception!
      try { 
        originalWLClause0.remove((UnitPropagationListener) null);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.core.ReadOnlyVec", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      VecInt vecInt0 = new VecInt();
      LearntWLClause learntWLClause0 = new LearntWLClause(vecInt0, (ILits) null);
      // Undeclared exception!
      try { 
        learntWLClause0.remove((UnitPropagationListener) null);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.sat4j.minisat.constraints.cnf.WLClause", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      VecInt vecInt0 = new VecInt(1442, 1442);
      ILits iLits0 = mock(ILits.class, new ViolatedAssumptionAnswer());
      doReturn(true, true, false).when(iLits0).isFalsified(anyInt());
      doReturn(true, false).when(iLits0).isSatisfied(anyInt());
      OriginalWLClause originalWLClause0 = new OriginalWLClause(vecInt0, iLits0);
      originalWLClause0.propagate((UnitPropagationListener) null, 1442);
      originalWLClause0.propagate((UnitPropagationListener) null, (-388));
      assertEquals(0.0, originalWLClause0.getActivity(), 0.01);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      VecInt vecInt0 = new VecInt(1423);
      LearntWLClause learntWLClause0 = new LearntWLClause(vecInt0, (ILits) null);
      // Undeclared exception!
      try { 
        learntWLClause0.propagate((UnitPropagationListener) null, 699);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.sat4j.minisat.constraints.cnf.WLClause", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      VecInt vecInt0 = new VecInt(1442, 1442);
      LearntWLClause learntWLClause0 = new LearntWLClause(vecInt0, (ILits) null);
      // Undeclared exception!
      try { 
        learntWLClause0.locked();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.minisat.constraints.cnf.WLClause", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      VecInt vecInt0 = new VecInt();
      LearntWLClause learntWLClause0 = new LearntWLClause(vecInt0, (ILits) null);
      // Undeclared exception!
      try { 
        learntWLClause0.locked();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.sat4j.minisat.constraints.cnf.WLClause", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      VecInt vecInt0 = new VecInt(1442, 1442);
      OriginalWLClause originalWLClause0 = new OriginalWLClause(vecInt0, (ILits) null);
      // Undeclared exception!
      try { 
        originalWLClause0.isSatisfied();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      VecInt vecInt0 = new VecInt();
      LearntWLClause learntWLClause0 = new LearntWLClause(vecInt0, (ILits) null);
      // Undeclared exception!
      try { 
        learntWLClause0.hashCode();
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // / by zero
         //
         verifyException("org.sat4j.minisat.constraints.cnf.WLClause", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      int[] intArray0 = new int[3];
      VecInt vecInt0 = new VecInt(intArray0);
      VecInt vecInt1 = new VecInt(intArray0);
      IVecInt iVecInt0 = vecInt1.pop();
      LearntWLClause learntWLClause0 = new LearntWLClause(iVecInt0, (ILits) null);
      LearntWLClause learntWLClause1 = new LearntWLClause(vecInt1, (ILits) null);
      // Undeclared exception!
      try { 
        learntWLClause1.getAssertionLevel(vecInt0, 1446);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.sat4j.minisat.constraints.cnf.WLClause", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      VecInt vecInt0 = new VecInt(1447, 1447);
      LearntWLClause learntWLClause0 = new LearntWLClause(vecInt0, (ILits) null);
      // Undeclared exception!
      try { 
        learntWLClause0.get(1447);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1447
         //
         verifyException("org.sat4j.minisat.constraints.cnf.WLClause", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      VecInt vecInt0 = new VecInt(1449, 1449);
      CardinalityDataStructure cardinalityDataStructure0 = new CardinalityDataStructure();
      ILits iLits0 = cardinalityDataStructure0.getVocabulary();
      OriginalWLClause originalWLClause0 = new OriginalWLClause(vecInt0, iLits0);
      // Undeclared exception!
      try { 
        originalWLClause0.calcReasonOnTheFly(1449, vecInt0, vecInt0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1449
         //
         verifyException("org.sat4j.minisat.constraints.cnf.Lits", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      VecInt vecInt0 = new VecInt(1417, 1417);
      Lits lits0 = new Lits();
      OriginalWLClause originalWLClause0 = new OriginalWLClause(vecInt0, lits0);
      // Undeclared exception!
      try { 
        originalWLClause0.calcReason(1421, vecInt0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1417
         //
         verifyException("org.sat4j.minisat.constraints.cnf.Lits", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      VecInt vecInt0 = new VecInt();
      LearntWLClause learntWLClause0 = new LearntWLClause(vecInt0, (ILits) null);
      // Undeclared exception!
      try { 
        learntWLClause0.assertConstraintIfNeeded((UnitPropagationListener) null);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1
         //
         verifyException("org.sat4j.minisat.constraints.cnf.WLClause", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      VecInt vecInt0 = new VecInt(1442, 1442);
      LearntWLClause learntWLClause0 = new LearntWLClause(vecInt0, (ILits) null);
      // Undeclared exception!
      try { 
        learntWLClause0.assertConstraint((UnitPropagationListener) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.minisat.constraints.cnf.WLClause", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      VecInt vecInt0 = new VecInt();
      LearntWLClause learntWLClause0 = new LearntWLClause(vecInt0, (ILits) null);
      // Undeclared exception!
      try { 
        learntWLClause0.assertConstraint((UnitPropagationListener) null);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.sat4j.minisat.constraints.cnf.WLClause", e);
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      int[] intArray0 = new int[3];
      VecInt vecInt0 = new VecInt(intArray0);
      IVecInt iVecInt0 = vecInt0.pop();
      IVecInt iVecInt1 = vecInt0.pop();
      LearntWLClause learntWLClause0 = new LearntWLClause(iVecInt1, (ILits) null);
      learntWLClause0.calcReason((-121), iVecInt0);
      assertEquals(0.0, learntWLClause0.getActivity(), 0.01);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      int[] intArray0 = new int[4];
      VecInt vecInt0 = new VecInt(intArray0);
      LearntWLClause learntWLClause0 = new LearntWLClause(vecInt0, (ILits) null);
      learntWLClause0.size();
      assertEquals(0.0, learntWLClause0.getActivity(), 0.01);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      int[] intArray0 = new int[3];
      intArray0[0] = (-121);
      VecInt vecInt0 = new VecInt(intArray0);
      VecInt vecInt1 = new VecInt(intArray0);
      LearntWLClause learntWLClause0 = new LearntWLClause(vecInt0, (ILits) null);
      int int0 = learntWLClause0.getAssertionLevel(vecInt1, (-121));
      assertEquals(0, int0);
      assertEquals(0.0, learntWLClause0.getActivity(), 0.01);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      int[] intArray0 = new int[3];
      VecInt vecInt0 = new VecInt(intArray0);
      VecInt vecInt1 = new VecInt(intArray0);
      LearntWLClause learntWLClause0 = new LearntWLClause(vecInt0, (ILits) null);
      int int0 = learntWLClause0.getAssertionLevel(vecInt1, (-121));
      assertEquals(0.0, learntWLClause0.getActivity(), 0.01);
      assertEquals(2, int0);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      VecInt vecInt0 = new VecInt(1442, 1442);
      ILits iLits0 = mock(ILits.class, new ViolatedAssumptionAnswer());
      doReturn(false, false, true).when(iLits0).isSatisfied(anyInt());
      OriginalWLClause originalWLClause0 = new OriginalWLClause(vecInt0, iLits0);
      boolean boolean0 = originalWLClause0.isSatisfied();
      assertTrue(boolean0);
      assertEquals(0.0, originalWLClause0.getActivity(), 0.01);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      VecInt vecInt0 = new VecInt(1442, 1442);
      ILits iLits0 = mock(ILits.class, new ViolatedAssumptionAnswer());
      doReturn(false, false, false, false, false).when(iLits0).isSatisfied(anyInt());
      OriginalWLClause originalWLClause0 = new OriginalWLClause(vecInt0, iLits0);
      boolean boolean0 = originalWLClause0.isSatisfied();
      assertFalse(boolean0);
      assertEquals(0.0, originalWLClause0.getActivity(), 0.01);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      int[] intArray0 = new int[3];
      VecInt vecInt0 = new VecInt(intArray0);
      LearntWLClause learntWLClause0 = new LearntWLClause(vecInt0, (ILits) null);
      LearntWLClause learntWLClause1 = new LearntWLClause(vecInt0, (ILits) null);
      boolean boolean0 = learntWLClause1.equals(learntWLClause0);
      assertEquals(0.0, learntWLClause1.getActivity(), 0.01);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      int[] intArray0 = new int[3];
      VecInt vecInt0 = new VecInt(intArray0);
      LearntWLClause learntWLClause0 = new LearntWLClause(vecInt0, (ILits) null);
      boolean boolean0 = learntWLClause0.equals(vecInt0);
      assertEquals(0.0, learntWLClause0.getActivity(), 0.01);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      VecInt vecInt0 = new VecInt(1442, 1442);
      LearntWLClause learntWLClause0 = new LearntWLClause(vecInt0, (ILits) null);
      boolean boolean0 = learntWLClause0.equals((Object) null);
      assertFalse(boolean0);
      assertEquals(0.0, learntWLClause0.getActivity(), 0.01);
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      int[] intArray0 = new int[4];
      VecInt vecInt0 = new VecInt(intArray0);
      LearntWLClause learntWLClause0 = new LearntWLClause(vecInt0, (ILits) null);
      boolean boolean0 = learntWLClause0.equals(learntWLClause0);
      assertEquals(0.0, learntWLClause0.getActivity(), 0.01);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      VecInt vecInt0 = new VecInt(1442, 1442);
      ILits iLits0 = mock(ILits.class, new ViolatedAssumptionAnswer());
      doReturn(true).when(iLits0).isFalsified(anyInt());
      OriginalWLClause originalWLClause0 = new OriginalWLClause(vecInt0, iLits0);
      // Undeclared exception!
      try { 
        originalWLClause0.assertConstraintIfNeeded((UnitPropagationListener) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.minisat.constraints.cnf.WLClause", e);
      }
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      VecInt vecInt0 = new VecInt(1442, 1442);
      ILits iLits0 = mock(ILits.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(iLits0).isFalsified(anyInt());
      OriginalWLClause originalWLClause0 = new OriginalWLClause(vecInt0, iLits0);
      originalWLClause0.assertConstraintIfNeeded((UnitPropagationListener) null);
      assertEquals(0.0, originalWLClause0.getActivity(), 0.01);
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      VecInt vecInt0 = new VecInt();
      LearntWLClause learntWLClause0 = new LearntWLClause(vecInt0, (ILits) null);
      DotSearchTracing<Object> dotSearchTracing0 = new DotSearchTracing<Object>("N\"^O");
      learntWLClause0.toString((VarMapper) dotSearchTracing0);
      assertEquals(0.0, learntWLClause0.getActivity(), 0.01);
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      VecInt vecInt0 = new VecInt();
      LearntWLClause learntWLClause0 = new LearntWLClause(vecInt0, (ILits) null);
      learntWLClause0.toString((VarMapper) null);
      assertEquals(0.0, learntWLClause0.getActivity(), 0.01);
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      int[] intArray0 = new int[4];
      VecInt vecInt0 = new VecInt(intArray0);
      LearntWLClause learntWLClause0 = new LearntWLClause(vecInt0, (ILits) null);
      DotSearchTracing<Object> dotSearchTracing0 = new DotSearchTracing<Object>("N\"^O");
      // Undeclared exception!
      try { 
        learntWLClause0.toString((VarMapper) dotSearchTracing0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.minisat.constraints.cnf.WLClause", e);
      }
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      VecInt vecInt0 = new VecInt(1442, 1442);
      ILits iLits0 = mock(ILits.class, new ViolatedAssumptionAnswer());
      doReturn((String) null, (String) null, (String) null, (String) null, (String) null).when(iLits0).valueToString(anyInt());
      OriginalWLClause originalWLClause0 = new OriginalWLClause(vecInt0, iLits0);
      originalWLClause0.toString();
      assertEquals(0.0, originalWLClause0.getActivity(), 0.01);
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      int[] intArray0 = new int[3];
      VecInt vecInt0 = new VecInt(intArray0);
      LearntWLClause learntWLClause0 = new LearntWLClause(vecInt0, (ILits) null);
      LearntWLClause learntWLClause1 = new LearntWLClause(vecInt0, (ILits) null);
      learntWLClause1.toString();
      assertEquals(0.0, learntWLClause1.getActivity(), 0.01);
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      VecInt vecInt0 = new VecInt(1442, 1442);
      ILits iLits0 = mock(ILits.class, new ViolatedAssumptionAnswer());
      doReturn((Constr) null).when(iLits0).getReason(anyInt());
      OriginalWLClause originalWLClause0 = new OriginalWLClause(vecInt0, iLits0);
      boolean boolean0 = originalWLClause0.locked();
      assertEquals(0.0, originalWLClause0.getActivity(), 0.01);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      VecInt vecInt0 = new VecInt(1442, 1442);
      vecInt0.sortUnique();
      ILits iLits0 = mock(ILits.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(iLits0).isSatisfied(anyInt());
      OriginalWLClause originalWLClause0 = new OriginalWLClause(vecInt0, iLits0);
      // Undeclared exception!
      try { 
        originalWLClause0.propagate((UnitPropagationListener) null, 1442);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      int[] intArray0 = new int[3];
      VecInt vecInt0 = new VecInt(intArray0);
      LearntWLClause learntWLClause0 = new LearntWLClause(vecInt0, (ILits) null);
      // Undeclared exception!
      try { 
        learntWLClause0.simplify();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      int[] intArray0 = new int[3];
      VecInt vecInt0 = new VecInt(intArray0);
      LearntWLClause learntWLClause0 = new LearntWLClause(vecInt0, (ILits) null);
      LearntWLClause learntWLClause1 = new LearntWLClause(vecInt0, (ILits) null);
      boolean boolean0 = learntWLClause1.simplify();
      assertFalse(boolean0);
      assertEquals(0.0, learntWLClause1.getActivity(), 0.01);
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      VecInt vecInt0 = new VecInt(1417, 1417);
      ILits iLits0 = mock(ILits.class, new ViolatedAssumptionAnswer());
      doReturn(true, false).when(iLits0).isFalsified(anyInt());
      OriginalWLClause originalWLClause0 = new OriginalWLClause(vecInt0, iLits0);
      // Undeclared exception!
      try { 
        originalWLClause0.calcReason(1421, vecInt0);
        fail("Expecting exception: AssertionError");
      
      } catch(AssertionError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      int[] intArray0 = new int[3];
      VecInt vecInt0 = new VecInt(intArray0);
      vecInt0.clear();
      LearntWLClause learntWLClause0 = new LearntWLClause(vecInt0, (ILits) null);
      learntWLClause0.calcReasonOnTheFly(993, vecInt0, vecInt0);
      assertEquals(0.0, learntWLClause0.getActivity(), 0.01);
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      int[] intArray0 = new int[3];
      VecInt vecInt0 = new VecInt(intArray0);
      LearntWLClause learntWLClause0 = new LearntWLClause(vecInt0, (ILits) null);
      // Undeclared exception!
      try { 
        learntWLClause0.calcReason((-1), vecInt0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.minisat.constraints.cnf.WLClause", e);
      }
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      int[] intArray0 = new int[3];
      VecInt vecInt0 = new VecInt(intArray0);
      LearntWLClause learntWLClause0 = new LearntWLClause(vecInt0, (ILits) null);
      Constr constr0 = learntWLClause0.toConstraint();
      assertEquals(0.0, constr0.getActivity(), 0.01);
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      int[] intArray0 = new int[3];
      VecInt vecInt0 = new VecInt(intArray0);
      LearntWLClause learntWLClause0 = new LearntWLClause(vecInt0, (ILits) null);
      learntWLClause0.getVocabulary();
      assertEquals(0.0, learntWLClause0.getActivity(), 0.01);
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      int[] intArray0 = new int[3];
      VecInt vecInt0 = new VecInt(intArray0);
      LearntWLClause learntWLClause0 = new LearntWLClause(vecInt0, (ILits) null);
      boolean boolean0 = learntWLClause0.canBeSatisfiedByCountingLiterals();
      assertEquals(0.0, learntWLClause0.getActivity(), 0.01);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      int[] intArray0 = new int[3];
      VecInt vecInt0 = new VecInt(intArray0);
      LearntWLClause learntWLClause0 = new LearntWLClause(vecInt0, (ILits) null);
      int int0 = learntWLClause0.requiredNumberOfSatisfiedLiterals();
      assertEquals(0.0, learntWLClause0.getActivity(), 0.01);
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      int[] intArray0 = new int[3];
      VecInt vecInt0 = new VecInt(intArray0);
      LearntWLClause learntWLClause0 = new LearntWLClause(vecInt0, (ILits) null);
      boolean boolean0 = learntWLClause0.canBePropagatedMultipleTimes();
      assertFalse(boolean0);
      assertEquals(0.0, learntWLClause0.getActivity(), 0.01);
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      VecInt vecInt0 = new VecInt(2);
      OriginalWLClause originalWLClause0 = new OriginalWLClause(vecInt0, (ILits) null);
      double double0 = originalWLClause0.getActivity();
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      VecInt vecInt0 = new VecInt(1442, 1442);
      Vec<Propagatable> vec0 = new Vec<Propagatable>();
      ILits iLits0 = mock(ILits.class, new ViolatedAssumptionAnswer());
      doReturn(vec0).when(iLits0).watches(anyInt());
      OriginalWLClause originalWLClause0 = new OriginalWLClause(vecInt0, iLits0);
      // Undeclared exception!
      try { 
        originalWLClause0.remove((UnitPropagationListener) null);
        fail("Expecting exception: NoSuchElementException");
      
      } catch(NoSuchElementException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.core.Vec", e);
      }
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      int[] intArray0 = new int[3];
      VecInt vecInt0 = new VecInt(intArray0);
      LearntWLClause learntWLClause0 = new LearntWLClause(vecInt0, (ILits) null);
      learntWLClause0.get(0);
      assertEquals(0.0, learntWLClause0.getActivity(), 0.01);
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      int[] intArray0 = new int[3];
      VecInt vecInt0 = new VecInt(intArray0);
      LearntWLClause learntWLClause0 = new LearntWLClause(vecInt0, (ILits) null);
      learntWLClause0.getLits();
      assertEquals(0.0, learntWLClause0.getActivity(), 0.01);
  }
}
