/*
 * This file was automatically generated by EvoSuite
 * Sun Feb 17 08:00:09 GMT 2019
 */

package org.sat4j.tools;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;
import org.sat4j.minisat.constraints.MixedDataStructureDanielWL;
import org.sat4j.minisat.core.Solver;
import org.sat4j.specs.ISolverService;
import org.sat4j.specs.Lbool;
import org.sat4j.specs.RandomAccessModel;
import org.sat4j.tools.ModelIteratorToSATAdapter;
import org.sat4j.tools.NegationDecorator;
import org.sat4j.tools.SearchMinOneListener;
import org.sat4j.tools.SolutionFoundListener;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class SearchMinOneListener_ESTest extends SearchMinOneListener_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      SearchMinOneListener searchMinOneListener0 = new SearchMinOneListener((SolutionFoundListener) null);
      int[] intArray0 = new int[9];
      intArray0[0] = (-1);
      Solver<MixedDataStructureDanielWL> solver0 = (Solver<MixedDataStructureDanielWL>) mock(Solver.class, new ViolatedAssumptionAnswer());
      NegationDecorator<Solver<MixedDataStructureDanielWL>> negationDecorator0 = new NegationDecorator<Solver<MixedDataStructureDanielWL>>(solver0);
      SolutionFoundListener solutionFoundListener0 = mock(SolutionFoundListener.class, new ViolatedAssumptionAnswer());
      ModelIteratorToSATAdapter modelIteratorToSATAdapter0 = new ModelIteratorToSATAdapter(negationDecorator0, 183L, solutionFoundListener0);
      // Undeclared exception!
      try { 
        searchMinOneListener0.solutionFound(intArray0, modelIteratorToSATAdapter0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.tools.SearchMinOneListener", e);
      }
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      Lbool lbool0 = Lbool.UNDEFINED;
      SolutionFoundListener solutionFoundListener0 = mock(SolutionFoundListener.class, new ViolatedAssumptionAnswer());
      SearchMinOneListener searchMinOneListener0 = new SearchMinOneListener(solutionFoundListener0);
      searchMinOneListener0.end(lbool0);
      assertEquals("U", lbool0.toString());
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      Lbool lbool0 = Lbool.TRUE;
      SolutionFoundListener solutionFoundListener0 = mock(SolutionFoundListener.class, new ViolatedAssumptionAnswer());
      SearchMinOneListener searchMinOneListener0 = new SearchMinOneListener(solutionFoundListener0);
      // Undeclared exception!
      try { 
        searchMinOneListener0.end(lbool0);
        fail("Expecting exception: AssertionError");
      
      } catch(AssertionError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      SearchMinOneListener searchMinOneListener0 = new SearchMinOneListener((SolutionFoundListener) null);
      int[] intArray0 = new int[7];
      intArray0[0] = 786;
      // Undeclared exception!
      try { 
        searchMinOneListener0.solutionFound(intArray0, (RandomAccessModel) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.tools.SearchMinOneListener", e);
      }
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      SearchMinOneListener searchMinOneListener0 = new SearchMinOneListener((SolutionFoundListener) null);
      searchMinOneListener0.init((ISolverService) null);
  }
}
