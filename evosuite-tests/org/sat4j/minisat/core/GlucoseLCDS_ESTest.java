/*
 * This file was automatically generated by EvoSuite
 * Tue Feb 19 07:29:17 GMT 2019
 */

package org.sat4j.minisat.core;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;
import org.sat4j.BasicLauncher;
import org.sat4j.MUSLauncher;
import org.sat4j.core.ASolverFactory;
import org.sat4j.core.Vec;
import org.sat4j.minisat.constraints.CardinalityDataStructure;
import org.sat4j.minisat.constraints.CardinalityDataStructureYanMax;
import org.sat4j.minisat.constraints.CardinalityDataStructureYanMin;
import org.sat4j.minisat.constraints.ClausalDataStructureWL;
import org.sat4j.minisat.constraints.MixedDataStructureDanielHT;
import org.sat4j.minisat.constraints.MixedDataStructureDanielWL;
import org.sat4j.minisat.constraints.MixedDataStructureDanielWLConciseBinary;
import org.sat4j.minisat.constraints.MixedDataStructureSingleWL;
import org.sat4j.minisat.constraints.cnf.UnitClause;
import org.sat4j.minisat.core.ConflictTimer;
import org.sat4j.minisat.core.Glucose2LCDS;
import org.sat4j.minisat.core.GlucoseLCDS;
import org.sat4j.minisat.core.ILits;
import org.sat4j.minisat.core.LearningStrategy;
import org.sat4j.minisat.core.MemoryBasedConflictTimer;
import org.sat4j.minisat.core.SearchParams;
import org.sat4j.minisat.core.Solver;
import org.sat4j.minisat.learning.ActiveLearning;
import org.sat4j.minisat.learning.ClauseOnlyLearning;
import org.sat4j.minisat.learning.FixedLengthLearning;
import org.sat4j.minisat.learning.MiniSATLearning;
import org.sat4j.minisat.learning.NoLearningButHeuristics;
import org.sat4j.minisat.learning.PercentLengthLearning;
import org.sat4j.minisat.orders.PureOrder;
import org.sat4j.minisat.orders.RandomWalkDecorator;
import org.sat4j.minisat.orders.SubsetVarOrder;
import org.sat4j.minisat.orders.TabuListDecorator;
import org.sat4j.minisat.orders.VarOrderHeap;
import org.sat4j.minisat.restarts.ArminRestarts;
import org.sat4j.minisat.restarts.FixedPeriodRestarts;
import org.sat4j.minisat.restarts.Glucose21Restarts;
import org.sat4j.minisat.restarts.LubyRestarts;
import org.sat4j.minisat.restarts.NoRestarts;
import org.sat4j.opt.MaxSatDecorator;
import org.sat4j.specs.Constr;
import org.sat4j.specs.IVec;
import org.sat4j.tools.ManyCore;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class GlucoseLCDS_ESTest extends GlucoseLCDS_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      int[] intArray0 = new int[8];
      SearchParams searchParams0 = new SearchParams(10, 713);
      SubsetVarOrder subsetVarOrder0 = new SubsetVarOrder(intArray0);
      NoRestarts noRestarts0 = new NoRestarts();
      MUSLauncher mUSLauncher0 = new MUSLauncher();
      ClauseOnlyLearning<CardinalityDataStructureYanMax> clauseOnlyLearning0 = new ClauseOnlyLearning<CardinalityDataStructureYanMax>();
      CardinalityDataStructureYanMax cardinalityDataStructureYanMax0 = new CardinalityDataStructureYanMax();
      Solver<CardinalityDataStructureYanMax> solver0 = new Solver<CardinalityDataStructureYanMax>(clauseOnlyLearning0, cardinalityDataStructureYanMax0, searchParams0, subsetVarOrder0, noRestarts0, mUSLauncher0);
      Solver<CardinalityDataStructure> solver1 = (Solver<CardinalityDataStructure>) mock(Solver.class, new ViolatedAssumptionAnswer());
      MemoryBasedConflictTimer memoryBasedConflictTimer0 = new MemoryBasedConflictTimer(solver0, 713);
      Constr constr0 = Constr.TAUTOLOGY;
      Glucose2LCDS<CardinalityDataStructure> glucose2LCDS0 = new Glucose2LCDS<CardinalityDataStructure>(solver1, memoryBasedConflictTimer0);
      int int0 = glucose2LCDS0.computeLBD(constr0);
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      int[] intArray0 = new int[8];
      SearchParams searchParams0 = new SearchParams(10, 713);
      SubsetVarOrder subsetVarOrder0 = new SubsetVarOrder(intArray0);
      NoRestarts noRestarts0 = new NoRestarts();
      MUSLauncher mUSLauncher0 = new MUSLauncher();
      ClauseOnlyLearning<CardinalityDataStructureYanMax> clauseOnlyLearning0 = new ClauseOnlyLearning<CardinalityDataStructureYanMax>();
      CardinalityDataStructureYanMax cardinalityDataStructureYanMax0 = new CardinalityDataStructureYanMax();
      Solver<CardinalityDataStructureYanMax> solver0 = new Solver<CardinalityDataStructureYanMax>(clauseOnlyLearning0, cardinalityDataStructureYanMax0, searchParams0, subsetVarOrder0, noRestarts0, mUSLauncher0);
      Glucose2LCDS<CardinalityDataStructureYanMax> glucose2LCDS0 = new Glucose2LCDS<CardinalityDataStructureYanMax>(solver0, noRestarts0);
      Constr constr0 = Constr.TAUTOLOGY;
      Vec<Constr> vec0 = new Vec<Constr>(10, constr0);
      vec0.pop();
      // Undeclared exception!
      try { 
        glucose2LCDS0.reduce(vec0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 5
         //
         verifyException("org.sat4j.core.Vec", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Glucose2LCDS<MixedDataStructureDanielWLConciseBinary> glucose2LCDS0 = new Glucose2LCDS<MixedDataStructureDanielWLConciseBinary>((Solver<MixedDataStructureDanielWLConciseBinary>) null, (ConflictTimer) null);
      ConflictTimer conflictTimer0 = glucose2LCDS0.getTimer();
      assertNull(conflictTimer0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      ActiveLearning<MixedDataStructureDanielHT> activeLearning0 = new ActiveLearning<MixedDataStructureDanielHT>(1.0E-20);
      MixedDataStructureDanielHT mixedDataStructureDanielHT0 = new MixedDataStructureDanielHT();
      LearningStrategy<MixedDataStructureDanielWL> learningStrategy0 = (LearningStrategy<MixedDataStructureDanielWL>) mock(LearningStrategy.class, new ViolatedAssumptionAnswer());
      MixedDataStructureDanielWL mixedDataStructureDanielWL0 = mock(MixedDataStructureDanielWL.class, new ViolatedAssumptionAnswer());
      doReturn((ILits) null).when(mixedDataStructureDanielWL0).getVocabulary();
      VarOrderHeap varOrderHeap0 = new VarOrderHeap();
      RandomWalkDecorator randomWalkDecorator0 = new RandomWalkDecorator(varOrderHeap0, 83.0);
      Glucose21Restarts glucose21Restarts0 = new Glucose21Restarts();
      Solver<MixedDataStructureDanielWL> solver0 = new Solver<MixedDataStructureDanielWL>(learningStrategy0, mixedDataStructureDanielWL0, randomWalkDecorator0, glucose21Restarts0);
      SearchParams searchParams0 = solver0.getSearchParams();
      ASolverFactory<ManyCore<MaxSatDecorator>> aSolverFactory0 = (ASolverFactory<ManyCore<MaxSatDecorator>>) mock(ASolverFactory.class, new ViolatedAssumptionAnswer());
      BasicLauncher<ManyCore<MaxSatDecorator>> basicLauncher0 = new BasicLauncher<ManyCore<MaxSatDecorator>>(aSolverFactory0);
      Solver<MixedDataStructureDanielHT> solver1 = new Solver<MixedDataStructureDanielHT>(activeLearning0, mixedDataStructureDanielHT0, searchParams0, randomWalkDecorator0, glucose21Restarts0, basicLauncher0);
      GlucoseLCDS<MixedDataStructureDanielHT> glucoseLCDS0 = new GlucoseLCDS<MixedDataStructureDanielHT>(solver1, glucose21Restarts0);
      Glucose21Restarts glucose21Restarts1 = (Glucose21Restarts)glucoseLCDS0.getTimer();
      assertEquals(0L, glucose21Restarts1.nextRestartNumberOfConflict());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      FixedPeriodRestarts fixedPeriodRestarts0 = new FixedPeriodRestarts();
      UnitClause unitClause0 = new UnitClause((-1));
      Glucose2LCDS<MixedDataStructureSingleWL> glucose2LCDS0 = new Glucose2LCDS<MixedDataStructureSingleWL>((Solver<MixedDataStructureSingleWL>) null, fixedPeriodRestarts0);
      int int0 = glucose2LCDS0.computeLBD(unitClause0);
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      PureOrder pureOrder0 = new PureOrder();
      LubyRestarts lubyRestarts0 = new LubyRestarts();
      NoLearningButHeuristics<MixedDataStructureSingleWL> noLearningButHeuristics0 = new NoLearningButHeuristics<MixedDataStructureSingleWL>();
      MixedDataStructureSingleWL mixedDataStructureSingleWL0 = new MixedDataStructureSingleWL();
      SearchParams searchParams0 = new SearchParams(32);
      Solver<MixedDataStructureSingleWL> solver0 = new Solver<MixedDataStructureSingleWL>(noLearningButHeuristics0, mixedDataStructureSingleWL0, searchParams0, pureOrder0, lubyRestarts0);
      Glucose2LCDS<MixedDataStructureSingleWL> glucose2LCDS0 = new Glucose2LCDS<MixedDataStructureSingleWL>(solver0, lubyRestarts0);
      UnitClause unitClause0 = new UnitClause(32);
      Vec<Constr> vec0 = new Vec<Constr>(32, unitClause0);
      // Undeclared exception!
      try { 
        glucose2LCDS0.reduce(vec0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.minisat.constraints.cnf.UnitClause", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      FixedPeriodRestarts fixedPeriodRestarts0 = new FixedPeriodRestarts();
      Glucose2LCDS<MixedDataStructureDanielHT> glucose2LCDS0 = new Glucose2LCDS<MixedDataStructureDanielHT>((Solver<MixedDataStructureDanielHT>) null, fixedPeriodRestarts0);
      Vec<Constr> vec0 = new Vec<Constr>(1417);
      // Undeclared exception!
      try { 
        glucose2LCDS0.reduce(vec0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.minisat.core.GlucoseLCDS", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      ArminRestarts arminRestarts0 = new ArminRestarts();
      Glucose2LCDS<CardinalityDataStructureYanMin> glucose2LCDS0 = new Glucose2LCDS<CardinalityDataStructureYanMin>((Solver<CardinalityDataStructureYanMin>) null, arminRestarts0);
      // Undeclared exception!
      try { 
        glucose2LCDS0.onClauseLearning((Constr) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.minisat.core.GlucoseLCDS", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      FixedPeriodRestarts fixedPeriodRestarts0 = new FixedPeriodRestarts();
      Glucose2LCDS<ClausalDataStructureWL> glucose2LCDS0 = new Glucose2LCDS<ClausalDataStructureWL>((Solver<ClausalDataStructureWL>) null, fixedPeriodRestarts0);
      // Undeclared exception!
      try { 
        glucose2LCDS0.init();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.minisat.core.GlucoseLCDS", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      FixedPeriodRestarts fixedPeriodRestarts0 = new FixedPeriodRestarts();
      Glucose2LCDS<MixedDataStructureSingleWL> glucose2LCDS0 = new Glucose2LCDS<MixedDataStructureSingleWL>((Solver<MixedDataStructureSingleWL>) null, fixedPeriodRestarts0);
      // Undeclared exception!
      try { 
        glucose2LCDS0.computeLBD((Constr) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.minisat.core.GlucoseLCDS", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      VarOrderHeap varOrderHeap0 = new VarOrderHeap();
      Glucose21Restarts glucose21Restarts0 = new Glucose21Restarts();
      MiniSATLearning<CardinalityDataStructureYanMin> miniSATLearning0 = new MiniSATLearning<CardinalityDataStructureYanMin>();
      CardinalityDataStructureYanMin cardinalityDataStructureYanMin0 = new CardinalityDataStructureYanMin();
      Solver<CardinalityDataStructureYanMin> solver0 = new Solver<CardinalityDataStructureYanMin>(miniSATLearning0, cardinalityDataStructureYanMin0, varOrderHeap0, glucose21Restarts0);
      Glucose2LCDS<CardinalityDataStructureYanMin> glucose2LCDS0 = new Glucose2LCDS<CardinalityDataStructureYanMin>(solver0, glucose21Restarts0);
      glucose2LCDS0.init();
      glucose2LCDS0.init();
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      FixedPeriodRestarts fixedPeriodRestarts0 = new FixedPeriodRestarts();
      ActiveLearning<CardinalityDataStructureYanMin> activeLearning0 = new ActiveLearning<CardinalityDataStructureYanMin>(2916.0);
      CardinalityDataStructureYanMin cardinalityDataStructureYanMin0 = new CardinalityDataStructureYanMin();
      SearchParams searchParams0 = new SearchParams(2297.844056253, (-879.94557768812), (-879.94557768812), 1601);
      PureOrder pureOrder0 = new PureOrder();
      TabuListDecorator tabuListDecorator0 = new TabuListDecorator(pureOrder0);
      Solver<CardinalityDataStructureYanMin> solver0 = new Solver<CardinalityDataStructureYanMin>(activeLearning0, cardinalityDataStructureYanMin0, searchParams0, tabuListDecorator0, fixedPeriodRestarts0);
      GlucoseLCDS<CardinalityDataStructureYanMin> glucoseLCDS0 = new GlucoseLCDS<CardinalityDataStructureYanMin>(solver0, fixedPeriodRestarts0);
      IVec<Constr> iVec0 = solver0.learnts;
      glucoseLCDS0.reduce(iVec0);
      assertTrue(iVec0.isEmpty());
      assertEquals(0, iVec0.size());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      FixedLengthLearning<CardinalityDataStructureYanMin> fixedLengthLearning0 = new FixedLengthLearning<CardinalityDataStructureYanMin>();
      CardinalityDataStructureYanMin cardinalityDataStructureYanMin0 = new CardinalityDataStructureYanMin();
      int[] intArray0 = new int[8];
      SubsetVarOrder subsetVarOrder0 = new SubsetVarOrder(intArray0);
      LubyRestarts lubyRestarts0 = new LubyRestarts();
      Solver<CardinalityDataStructureYanMin> solver0 = new Solver<CardinalityDataStructureYanMin>(fixedLengthLearning0, cardinalityDataStructureYanMin0, (SearchParams) null, subsetVarOrder0, lubyRestarts0);
      Glucose2LCDS<CardinalityDataStructureYanMin> glucose2LCDS0 = new Glucose2LCDS<CardinalityDataStructureYanMin>(solver0, lubyRestarts0);
      UnitClause unitClause0 = new UnitClause(0);
      glucose2LCDS0.onClauseLearning(unitClause0);
      assertEquals(0.0, unitClause0.getActivity(), 0.01);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      UnitClause unitClause0 = new UnitClause((-515));
      ArminRestarts arminRestarts0 = new ArminRestarts();
      GlucoseLCDS<CardinalityDataStructure> glucoseLCDS0 = new GlucoseLCDS<CardinalityDataStructure>((Solver<CardinalityDataStructure>) null, arminRestarts0);
      glucoseLCDS0.onPropagation(unitClause0);
      assertEquals(1, unitClause0.requiredNumberOfSatisfiedLiterals());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      UnitClause unitClause0 = new UnitClause((-515));
      ArminRestarts arminRestarts0 = new ArminRestarts();
      Glucose2LCDS<ClausalDataStructureWL> glucose2LCDS0 = new Glucose2LCDS<ClausalDataStructureWL>((Solver<ClausalDataStructureWL>) null, arminRestarts0);
      glucose2LCDS0.onConflictAnalysis(unitClause0);
      assertTrue(unitClause0.isSatisfied());
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      ClausalDataStructureWL clausalDataStructureWL0 = new ClausalDataStructureWL();
      ILits iLits0 = clausalDataStructureWL0.getVocabulary();
      LearningStrategy<MixedDataStructureDanielWL> learningStrategy0 = (LearningStrategy<MixedDataStructureDanielWL>) mock(LearningStrategy.class, new ViolatedAssumptionAnswer());
      MixedDataStructureDanielWL mixedDataStructureDanielWL0 = mock(MixedDataStructureDanielWL.class, new ViolatedAssumptionAnswer());
      doReturn(iLits0).when(mixedDataStructureDanielWL0).getVocabulary();
      VarOrderHeap varOrderHeap0 = new VarOrderHeap();
      RandomWalkDecorator randomWalkDecorator0 = new RandomWalkDecorator(varOrderHeap0, 83.0);
      Glucose21Restarts glucose21Restarts0 = new Glucose21Restarts();
      Solver<MixedDataStructureDanielWL> solver0 = new Solver<MixedDataStructureDanielWL>(learningStrategy0, mixedDataStructureDanielWL0, randomWalkDecorator0, glucose21Restarts0);
      SearchParams searchParams0 = solver0.getSearchParams();
      ASolverFactory<ManyCore<MaxSatDecorator>> aSolverFactory0 = (ASolverFactory<ManyCore<MaxSatDecorator>>) mock(ASolverFactory.class, new ViolatedAssumptionAnswer());
      BasicLauncher<ManyCore<MaxSatDecorator>> basicLauncher0 = new BasicLauncher<ManyCore<MaxSatDecorator>>(aSolverFactory0);
      PercentLengthLearning<CardinalityDataStructure> percentLengthLearning0 = new PercentLengthLearning<CardinalityDataStructure>(37);
      CardinalityDataStructure cardinalityDataStructure0 = new CardinalityDataStructure();
      Solver<CardinalityDataStructure> solver1 = new Solver<CardinalityDataStructure>(percentLengthLearning0, cardinalityDataStructure0, searchParams0, randomWalkDecorator0, glucose21Restarts0, basicLauncher0);
      GlucoseLCDS<CardinalityDataStructure> glucoseLCDS0 = new GlucoseLCDS<CardinalityDataStructure>(solver1, (ConflictTimer) null);
      String string0 = glucoseLCDS0.toString();
      assertEquals("Glucose learned constraints deletion strategy with timer null", string0);
  }
}
