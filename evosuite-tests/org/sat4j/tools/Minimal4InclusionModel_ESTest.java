/*
 * This file was automatically generated by EvoSuite
 * Mon Feb 18 01:33:20 GMT 2019
 */

package org.sat4j.tools;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;
import org.sat4j.LightFactory;
import org.sat4j.core.ASolverFactory;
import org.sat4j.core.ReadOnlyVecInt;
import org.sat4j.core.VecInt;
import org.sat4j.minisat.constraints.CardinalityDataStructureYanMin;
import org.sat4j.minisat.constraints.cnf.UnitClauses;
import org.sat4j.minisat.core.Solver;
import org.sat4j.minisat.learning.ActiveLearning;
import org.sat4j.minisat.learning.ClauseOnlyLearning;
import org.sat4j.minisat.orders.LevelBasedVarOrderHeap;
import org.sat4j.minisat.orders.PureOrder;
import org.sat4j.minisat.orders.TabuListDecorator;
import org.sat4j.minisat.restarts.LubyRestarts;
import org.sat4j.minisat.restarts.MiniSATRestarts;
import org.sat4j.specs.Constr;
import org.sat4j.specs.IConstr;
import org.sat4j.specs.ISolver;
import org.sat4j.specs.IVecInt;
import org.sat4j.tools.AbstractMinimalModel;
import org.sat4j.tools.CheckMUSSolutionListener;
import org.sat4j.tools.DimacsOutputSolver;
import org.sat4j.tools.DimacsStringSolver;
import org.sat4j.tools.FullClauseSelectorSolver;
import org.sat4j.tools.GroupClauseSelectorSolver;
import org.sat4j.tools.ManyCore;
import org.sat4j.tools.Minimal4InclusionModel;
import org.sat4j.tools.SingleSolutionDetector;
import org.sat4j.tools.SolutionFoundListener;
import org.sat4j.tools.StatisticsSolver;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Minimal4InclusionModel_ESTest extends Minimal4InclusionModel_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      ActiveLearning<CardinalityDataStructureYanMin> activeLearning0 = new ActiveLearning<CardinalityDataStructureYanMin>();
      CardinalityDataStructureYanMin cardinalityDataStructureYanMin0 = new CardinalityDataStructureYanMin();
      LevelBasedVarOrderHeap levelBasedVarOrderHeap0 = new LevelBasedVarOrderHeap();
      TabuListDecorator tabuListDecorator0 = new TabuListDecorator(levelBasedVarOrderHeap0, 1);
      LubyRestarts lubyRestarts0 = new LubyRestarts(0);
      Solver<CardinalityDataStructureYanMin> solver0 = new Solver<CardinalityDataStructureYanMin>(activeLearning0, cardinalityDataStructureYanMin0, tabuListDecorator0, lubyRestarts0);
      IVecInt iVecInt0 = solver0.createBlockingClauseForCurrentModel();
      Minimal4InclusionModel minimal4InclusionModel0 = new Minimal4InclusionModel(solver0);
      minimal4InclusionModel0.isSatisfiable(iVecInt0);
      int[] intArray0 = minimal4InclusionModel0.modelWithInternalVariables();
      assertEquals(0, intArray0.length);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      int[] intArray0 = new int[0];
      ActiveLearning<CardinalityDataStructureYanMin> activeLearning0 = new ActiveLearning<CardinalityDataStructureYanMin>();
      CardinalityDataStructureYanMin cardinalityDataStructureYanMin0 = new CardinalityDataStructureYanMin();
      PureOrder pureOrder0 = new PureOrder(76);
      LubyRestarts lubyRestarts0 = new LubyRestarts(76);
      Solver<CardinalityDataStructureYanMin> solver0 = new Solver<CardinalityDataStructureYanMin>(activeLearning0, cardinalityDataStructureYanMin0, pureOrder0, lubyRestarts0);
      solver0.addConstr((Constr) null);
      GroupClauseSelectorSolver<Minimal4InclusionModel> groupClauseSelectorSolver0 = (GroupClauseSelectorSolver<Minimal4InclusionModel>) mock(GroupClauseSelectorSolver.class, new ViolatedAssumptionAnswer());
      doReturn(true).when(groupClauseSelectorSolver0).isSatisfiable(any(org.sat4j.specs.IVecInt.class));
      doReturn((IConstr) null).when(groupClauseSelectorSolver0).addBlockingClause(any(org.sat4j.specs.IVecInt.class));
      doReturn((Object) intArray0, (Object) intArray0, (Object) null, (Object) null).when(groupClauseSelectorSolver0).modelWithInternalVariables();
      GroupClauseSelectorSolver<GroupClauseSelectorSolver<Minimal4InclusionModel>> groupClauseSelectorSolver1 = new GroupClauseSelectorSolver<GroupClauseSelectorSolver<Minimal4InclusionModel>>(groupClauseSelectorSolver0);
      FullClauseSelectorSolver<Minimal4InclusionModel> fullClauseSelectorSolver0 = (FullClauseSelectorSolver<Minimal4InclusionModel>) mock(FullClauseSelectorSolver.class, new ViolatedAssumptionAnswer());
      doReturn(15, 15, 15, (-1359)).when(fullClauseSelectorSolver0).nVars();
      FullClauseSelectorSolver<FullClauseSelectorSolver<Minimal4InclusionModel>> fullClauseSelectorSolver1 = new FullClauseSelectorSolver<FullClauseSelectorSolver<Minimal4InclusionModel>>(fullClauseSelectorSolver0, true);
      IVecInt iVecInt0 = AbstractMinimalModel.negativeLiterals(fullClauseSelectorSolver1);
      Minimal4InclusionModel minimal4InclusionModel0 = new Minimal4InclusionModel(groupClauseSelectorSolver1, iVecInt0);
      // Undeclared exception!
      try { 
        minimal4InclusionModel0.modelWithInternalVariables();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.tools.Minimal4InclusionModel", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      int[] intArray0 = new int[0];
      ActiveLearning<CardinalityDataStructureYanMin> activeLearning0 = new ActiveLearning<CardinalityDataStructureYanMin>();
      CardinalityDataStructureYanMin cardinalityDataStructureYanMin0 = new CardinalityDataStructureYanMin();
      PureOrder pureOrder0 = new PureOrder(76);
      LubyRestarts lubyRestarts0 = new LubyRestarts(76);
      Solver<CardinalityDataStructureYanMin> solver0 = new Solver<CardinalityDataStructureYanMin>(activeLearning0, cardinalityDataStructureYanMin0, pureOrder0, lubyRestarts0);
      solver0.addConstr((Constr) null);
      GroupClauseSelectorSolver<Minimal4InclusionModel> groupClauseSelectorSolver0 = (GroupClauseSelectorSolver<Minimal4InclusionModel>) mock(GroupClauseSelectorSolver.class, new ViolatedAssumptionAnswer());
      doReturn(true).when(groupClauseSelectorSolver0).isSatisfiable(any(org.sat4j.specs.IVecInt.class));
      doReturn((IConstr) null).when(groupClauseSelectorSolver0).addBlockingClause(any(org.sat4j.specs.IVecInt.class));
      doReturn((Object) intArray0, (Object) intArray0, (Object) null, (Object) null).when(groupClauseSelectorSolver0).modelWithInternalVariables();
      GroupClauseSelectorSolver<GroupClauseSelectorSolver<Minimal4InclusionModel>> groupClauseSelectorSolver1 = new GroupClauseSelectorSolver<GroupClauseSelectorSolver<Minimal4InclusionModel>>(groupClauseSelectorSolver0);
      FullClauseSelectorSolver<Minimal4InclusionModel> fullClauseSelectorSolver0 = (FullClauseSelectorSolver<Minimal4InclusionModel>) mock(FullClauseSelectorSolver.class, new ViolatedAssumptionAnswer());
      doReturn(15, 15, 15, (-1359)).when(fullClauseSelectorSolver0).nVars();
      FullClauseSelectorSolver<FullClauseSelectorSolver<Minimal4InclusionModel>> fullClauseSelectorSolver1 = new FullClauseSelectorSolver<FullClauseSelectorSolver<Minimal4InclusionModel>>(fullClauseSelectorSolver0, true);
      IVecInt iVecInt0 = AbstractMinimalModel.negativeLiterals(fullClauseSelectorSolver1);
      Minimal4InclusionModel minimal4InclusionModel0 = new Minimal4InclusionModel(groupClauseSelectorSolver1, iVecInt0);
      // Undeclared exception!
      try { 
        minimal4InclusionModel0.model();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.tools.Minimal4InclusionModel", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      int[] intArray0 = new int[1];
      GroupClauseSelectorSolver<Minimal4InclusionModel> groupClauseSelectorSolver0 = (GroupClauseSelectorSolver<Minimal4InclusionModel>) mock(GroupClauseSelectorSolver.class, new ViolatedAssumptionAnswer());
      doReturn(true, false, false).when(groupClauseSelectorSolver0).isSatisfiable(any(org.sat4j.specs.IVecInt.class));
      doReturn((Object) null, (Object) null).when(groupClauseSelectorSolver0).model();
      doReturn((IConstr) null, (IConstr) null).when(groupClauseSelectorSolver0).addBlockingClause(any(org.sat4j.specs.IVecInt.class));
      doReturn((Object) intArray0, (Object) intArray0).when(groupClauseSelectorSolver0).modelWithInternalVariables();
      VecInt vecInt0 = new VecInt(203);
      CheckMUSSolutionListener checkMUSSolutionListener0 = new CheckMUSSolutionListener((ASolverFactory<? extends ISolver>) null);
      Minimal4InclusionModel minimal4InclusionModel0 = new Minimal4InclusionModel(groupClauseSelectorSolver0, vecInt0, checkMUSSolutionListener0);
      minimal4InclusionModel0.model();
      boolean boolean0 = minimal4InclusionModel0.isSatisfiable((IVecInt) vecInt0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      int[] intArray0 = new int[1];
      GroupClauseSelectorSolver<Minimal4InclusionModel> groupClauseSelectorSolver0 = (GroupClauseSelectorSolver<Minimal4InclusionModel>) mock(GroupClauseSelectorSolver.class, new ViolatedAssumptionAnswer());
      doReturn(true, true, true, false, true).when(groupClauseSelectorSolver0).isSatisfiable(any(org.sat4j.specs.IVecInt.class));
      doReturn((Object) intArray0, (Object) intArray0, (Object) intArray0, (Object) intArray0, (Object) intArray0).when(groupClauseSelectorSolver0).model();
      doReturn((IConstr) null, (IConstr) null, (IConstr) null, (IConstr) null, (IConstr) null).when(groupClauseSelectorSolver0).addBlockingClause(any(org.sat4j.specs.IVecInt.class));
      doReturn((Object) intArray0, (Object) intArray0, (Object) intArray0, (Object) intArray0, (Object) intArray0).when(groupClauseSelectorSolver0).modelWithInternalVariables();
      doReturn(1, 1411, 0).when(groupClauseSelectorSolver0).nVars();
      Minimal4InclusionModel minimal4InclusionModel0 = new Minimal4InclusionModel(groupClauseSelectorSolver0);
      minimal4InclusionModel0.model();
      // Undeclared exception!
      minimal4InclusionModel0.modelWithInternalVariables();
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      DimacsOutputSolver dimacsOutputSolver0 = new DimacsOutputSolver();
      Minimal4InclusionModel minimal4InclusionModel0 = new Minimal4InclusionModel(dimacsOutputSolver0);
      // Undeclared exception!
      try { 
        minimal4InclusionModel0.modelWithInternalVariables();
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.tools.DimacsOutputSolver", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      ASolverFactory<Minimal4InclusionModel> aSolverFactory0 = (ASolverFactory<Minimal4InclusionModel>) mock(ASolverFactory.class, new ViolatedAssumptionAnswer());
      String[] stringArray0 = new String[0];
      ManyCore<Minimal4InclusionModel> manyCore0 = new ManyCore<Minimal4InclusionModel>(aSolverFactory0, true, stringArray0);
      IVecInt iVecInt0 = VecInt.EMPTY;
      ReadOnlyVecInt readOnlyVecInt0 = new ReadOnlyVecInt(iVecInt0);
      Minimal4InclusionModel minimal4InclusionModel0 = new Minimal4InclusionModel(manyCore0, readOnlyVecInt0);
      // Undeclared exception!
      try { 
        minimal4InclusionModel0.modelWithInternalVariables();
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      int[] intArray0 = new int[1];
      intArray0[0] = 203;
      GroupClauseSelectorSolver<Minimal4InclusionModel> groupClauseSelectorSolver0 = (GroupClauseSelectorSolver<Minimal4InclusionModel>) mock(GroupClauseSelectorSolver.class, new ViolatedAssumptionAnswer());
      doReturn(true, true).when(groupClauseSelectorSolver0).isSatisfiable(any(org.sat4j.specs.IVecInt.class));
      doReturn((Object) null, (Object) null, (Object) null).when(groupClauseSelectorSolver0).model();
      doReturn((IConstr) null, (IConstr) null).when(groupClauseSelectorSolver0).addBlockingClause(any(org.sat4j.specs.IVecInt.class));
      doReturn((Object) intArray0, (Object) intArray0, (Object) null).when(groupClauseSelectorSolver0).modelWithInternalVariables();
      doReturn(0, 0).when(groupClauseSelectorSolver0).nVars();
      Minimal4InclusionModel minimal4InclusionModel0 = new Minimal4InclusionModel(groupClauseSelectorSolver0);
      // Undeclared exception!
      try { 
        minimal4InclusionModel0.model();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.tools.Minimal4InclusionModel", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      StatisticsSolver statisticsSolver0 = new StatisticsSolver();
      Minimal4InclusionModel minimal4InclusionModel0 = new Minimal4InclusionModel(statisticsSolver0);
      // Undeclared exception!
      try { 
        minimal4InclusionModel0.model();
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Not implemented yet!
         //
         verifyException("org.sat4j.tools.StatisticsSolver", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      VecInt vecInt0 = new VecInt(1);
      CheckMUSSolutionListener checkMUSSolutionListener0 = new CheckMUSSolutionListener((ASolverFactory<? extends ISolver>) null);
      Minimal4InclusionModel[] minimal4InclusionModelArray0 = new Minimal4InclusionModel[0];
      ManyCore<Minimal4InclusionModel> manyCore0 = new ManyCore<Minimal4InclusionModel>(false, minimal4InclusionModelArray0);
      Minimal4InclusionModel minimal4InclusionModel0 = new Minimal4InclusionModel(manyCore0, vecInt0, checkMUSSolutionListener0);
      // Undeclared exception!
      try { 
        minimal4InclusionModel0.model();
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      DimacsStringSolver dimacsStringSolver0 = new DimacsStringSolver();
      SingleSolutionDetector singleSolutionDetector0 = new SingleSolutionDetector(dimacsStringSolver0);
      int[] intArray0 = new int[5];
      VecInt vecInt0 = new VecInt(intArray0);
      Minimal4InclusionModel minimal4InclusionModel0 = new Minimal4InclusionModel(singleSolutionDetector0, vecInt0);
      try { 
        minimal4InclusionModel0.isSatisfiable((IVecInt) vecInt0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // There is no real solver behind!
         //
         verifyException("org.sat4j.tools.AbstractOutputSolver", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      ClauseOnlyLearning<CardinalityDataStructureYanMin> clauseOnlyLearning0 = new ClauseOnlyLearning<CardinalityDataStructureYanMin>();
      CardinalityDataStructureYanMin cardinalityDataStructureYanMin0 = new CardinalityDataStructureYanMin();
      LevelBasedVarOrderHeap levelBasedVarOrderHeap0 = new LevelBasedVarOrderHeap();
      MiniSATRestarts miniSATRestarts0 = new MiniSATRestarts();
      Solver<CardinalityDataStructureYanMin> solver0 = new Solver<CardinalityDataStructureYanMin>(clauseOnlyLearning0, cardinalityDataStructureYanMin0, levelBasedVarOrderHeap0, miniSATRestarts0);
      Minimal4InclusionModel minimal4InclusionModel0 = new Minimal4InclusionModel(solver0);
      int[] intArray0 = new int[4];
      intArray0[0] = 2794;
      VecInt vecInt0 = new VecInt(intArray0);
      minimal4InclusionModel0.isSatisfiable((IVecInt) vecInt0);
      // Undeclared exception!
      minimal4InclusionModel0.isSatisfiable((IVecInt) vecInt0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      GroupClauseSelectorSolver<Minimal4InclusionModel> groupClauseSelectorSolver0 = (GroupClauseSelectorSolver<Minimal4InclusionModel>) mock(GroupClauseSelectorSolver.class, new ViolatedAssumptionAnswer());
      doReturn(769, 46, 0).when(groupClauseSelectorSolver0).nVars();
      GroupClauseSelectorSolver<GroupClauseSelectorSolver<Minimal4InclusionModel>> groupClauseSelectorSolver1 = new GroupClauseSelectorSolver<GroupClauseSelectorSolver<Minimal4InclusionModel>>(groupClauseSelectorSolver0);
      IVecInt iVecInt0 = AbstractMinimalModel.negativeLiterals(groupClauseSelectorSolver1);
      Minimal4InclusionModel minimal4InclusionModel0 = new Minimal4InclusionModel((ISolver) null, iVecInt0);
      // Undeclared exception!
      try { 
        minimal4InclusionModel0.isSatisfiable(iVecInt0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.tools.SolverDecorator", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      SolutionFoundListener solutionFoundListener0 = SolutionFoundListener.VOID;
      Minimal4InclusionModel minimal4InclusionModel0 = null;
      try {
        minimal4InclusionModel0 = new Minimal4InclusionModel((ISolver) null, (IVecInt) null, solutionFoundListener0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.tools.AbstractMinimalModel", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      LightFactory lightFactory0 = new LightFactory();
      ISolver iSolver0 = lightFactory0.defaultSolver();
      Minimal4InclusionModel minimal4InclusionModel0 = null;
      try {
        minimal4InclusionModel0 = new Minimal4InclusionModel(iSolver0, (IVecInt) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.tools.AbstractMinimalModel", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      int[] intArray0 = new int[1];
      GroupClauseSelectorSolver<Minimal4InclusionModel> groupClauseSelectorSolver0 = (GroupClauseSelectorSolver<Minimal4InclusionModel>) mock(GroupClauseSelectorSolver.class, new ViolatedAssumptionAnswer());
      doReturn(65535, 65535, 0).when(groupClauseSelectorSolver0).nVars();
      Minimal4InclusionModel minimal4InclusionModel0 = new Minimal4InclusionModel(groupClauseSelectorSolver0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Minimal4InclusionModel minimal4InclusionModel0 = null;
      try {
        minimal4InclusionModel0 = new Minimal4InclusionModel((ISolver) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.tools.AbstractMinimalModel", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      int[] intArray0 = new int[0];
      ActiveLearning<CardinalityDataStructureYanMin> activeLearning0 = new ActiveLearning<CardinalityDataStructureYanMin>();
      CardinalityDataStructureYanMin cardinalityDataStructureYanMin0 = new CardinalityDataStructureYanMin();
      PureOrder pureOrder0 = new PureOrder(76);
      LubyRestarts lubyRestarts0 = new LubyRestarts(76);
      Solver<CardinalityDataStructureYanMin> solver0 = new Solver<CardinalityDataStructureYanMin>(activeLearning0, cardinalityDataStructureYanMin0, pureOrder0, lubyRestarts0);
      solver0.addConstr((Constr) null);
      GroupClauseSelectorSolver<Minimal4InclusionModel> groupClauseSelectorSolver0 = (GroupClauseSelectorSolver<Minimal4InclusionModel>) mock(GroupClauseSelectorSolver.class, new ViolatedAssumptionAnswer());
      GroupClauseSelectorSolver<GroupClauseSelectorSolver<Minimal4InclusionModel>> groupClauseSelectorSolver1 = new GroupClauseSelectorSolver<GroupClauseSelectorSolver<Minimal4InclusionModel>>(groupClauseSelectorSolver0);
      FullClauseSelectorSolver<Minimal4InclusionModel> fullClauseSelectorSolver0 = (FullClauseSelectorSolver<Minimal4InclusionModel>) mock(FullClauseSelectorSolver.class, new ViolatedAssumptionAnswer());
      doReturn(15, 15, 15, (-1359), 0).when(fullClauseSelectorSolver0).nVars();
      FullClauseSelectorSolver<FullClauseSelectorSolver<Minimal4InclusionModel>> fullClauseSelectorSolver1 = new FullClauseSelectorSolver<FullClauseSelectorSolver<Minimal4InclusionModel>>(fullClauseSelectorSolver0, true);
      AbstractMinimalModel.negativeLiterals(fullClauseSelectorSolver1);
      Minimal4InclusionModel minimal4InclusionModel0 = new Minimal4InclusionModel(fullClauseSelectorSolver1);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      ASolverFactory<GroupClauseSelectorSolver<Minimal4InclusionModel>> aSolverFactory0 = (ASolverFactory<GroupClauseSelectorSolver<Minimal4InclusionModel>>) mock(ASolverFactory.class, new ViolatedAssumptionAnswer());
      String[] stringArray0 = new String[0];
      ManyCore<GroupClauseSelectorSolver<Minimal4InclusionModel>> manyCore0 = new ManyCore<GroupClauseSelectorSolver<Minimal4InclusionModel>>(aSolverFactory0, stringArray0);
      Minimal4InclusionModel minimal4InclusionModel0 = null;
      try {
        minimal4InclusionModel0 = new Minimal4InclusionModel(manyCore0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      int[] intArray0 = new int[6];
      intArray0[1] = (-1);
      GroupClauseSelectorSolver<Minimal4InclusionModel> groupClauseSelectorSolver0 = (GroupClauseSelectorSolver<Minimal4InclusionModel>) mock(GroupClauseSelectorSolver.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(groupClauseSelectorSolver0).isSatisfiable(any(org.sat4j.specs.IVecInt.class));
      doReturn((IConstr) null).when(groupClauseSelectorSolver0).addBlockingClause(any(org.sat4j.specs.IVecInt.class));
      doReturn((Object) intArray0, (Object) intArray0).when(groupClauseSelectorSolver0).modelWithInternalVariables();
      GroupClauseSelectorSolver<GroupClauseSelectorSolver<Minimal4InclusionModel>> groupClauseSelectorSolver1 = new GroupClauseSelectorSolver<GroupClauseSelectorSolver<Minimal4InclusionModel>>(groupClauseSelectorSolver0);
      FullClauseSelectorSolver<Minimal4InclusionModel> fullClauseSelectorSolver0 = (FullClauseSelectorSolver<Minimal4InclusionModel>) mock(FullClauseSelectorSolver.class, new ViolatedAssumptionAnswer());
      doReturn(0, 873, 0).when(fullClauseSelectorSolver0).nVars();
      FullClauseSelectorSolver<FullClauseSelectorSolver<Minimal4InclusionModel>> fullClauseSelectorSolver1 = new FullClauseSelectorSolver<FullClauseSelectorSolver<Minimal4InclusionModel>>(fullClauseSelectorSolver0, true);
      IVecInt iVecInt0 = AbstractMinimalModel.negativeLiterals(fullClauseSelectorSolver1);
      Minimal4InclusionModel minimal4InclusionModel0 = new Minimal4InclusionModel(groupClauseSelectorSolver1, iVecInt0);
      int[] intArray1 = minimal4InclusionModel0.model();
      assertNotSame(intArray1, intArray0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      int[] intArray0 = new int[1];
      VecInt vecInt0 = new VecInt(203);
      UnitClauses unitClauses0 = new UnitClauses(vecInt0);
      GroupClauseSelectorSolver<Minimal4InclusionModel> groupClauseSelectorSolver0 = (GroupClauseSelectorSolver<Minimal4InclusionModel>) mock(GroupClauseSelectorSolver.class, new ViolatedAssumptionAnswer());
      doReturn(true, true, false).when(groupClauseSelectorSolver0).isSatisfiable(any(org.sat4j.specs.IVecInt.class));
      doReturn((Object) intArray0, (Object) intArray0, (Object) intArray0).when(groupClauseSelectorSolver0).model();
      doReturn(unitClauses0, unitClauses0, unitClauses0).when(groupClauseSelectorSolver0).addBlockingClause(any(org.sat4j.specs.IVecInt.class));
      doReturn((Object) intArray0, (Object) intArray0, (Object) intArray0).when(groupClauseSelectorSolver0).modelWithInternalVariables();
      doReturn(203, 1345, 0).when(groupClauseSelectorSolver0).nVars();
      doReturn(false, false).when(groupClauseSelectorSolver0).removeSubsumedConstr(any(org.sat4j.specs.IConstr.class));
      Minimal4InclusionModel minimal4InclusionModel0 = new Minimal4InclusionModel(groupClauseSelectorSolver0);
      int[] intArray1 = minimal4InclusionModel0.model();
      assertSame(intArray1, intArray0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      int[] intArray0 = new int[1];
      intArray0[0] = 203;
      GroupClauseSelectorSolver<Minimal4InclusionModel> groupClauseSelectorSolver0 = (GroupClauseSelectorSolver<Minimal4InclusionModel>) mock(GroupClauseSelectorSolver.class, new ViolatedAssumptionAnswer());
      doReturn(true, true, true, false).when(groupClauseSelectorSolver0).isSatisfiable(any(org.sat4j.specs.IVecInt.class));
      doReturn((Object) intArray0, (Object) intArray0, (Object) intArray0, (Object) intArray0).when(groupClauseSelectorSolver0).model();
      doReturn((IConstr) null, (IConstr) null, (IConstr) null, (IConstr) null).when(groupClauseSelectorSolver0).addBlockingClause(any(org.sat4j.specs.IVecInt.class));
      doReturn((Object) intArray0, (Object) intArray0, (Object) intArray0, (Object) intArray0).when(groupClauseSelectorSolver0).modelWithInternalVariables();
      doReturn(1, 1411, 0).when(groupClauseSelectorSolver0).nVars();
      Minimal4InclusionModel minimal4InclusionModel0 = new Minimal4InclusionModel(groupClauseSelectorSolver0);
      int[] intArray1 = minimal4InclusionModel0.model();
      assertSame(intArray1, intArray0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      int[] intArray0 = new int[6];
      intArray0[1] = (-1);
      GroupClauseSelectorSolver<Minimal4InclusionModel> groupClauseSelectorSolver0 = (GroupClauseSelectorSolver<Minimal4InclusionModel>) mock(GroupClauseSelectorSolver.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(groupClauseSelectorSolver0).isSatisfiable(any(org.sat4j.specs.IVecInt.class));
      doReturn((IConstr) null).when(groupClauseSelectorSolver0).addBlockingClause(any(org.sat4j.specs.IVecInt.class));
      doReturn((Object) intArray0, (Object) intArray0).when(groupClauseSelectorSolver0).modelWithInternalVariables();
      GroupClauseSelectorSolver<GroupClauseSelectorSolver<Minimal4InclusionModel>> groupClauseSelectorSolver1 = new GroupClauseSelectorSolver<GroupClauseSelectorSolver<Minimal4InclusionModel>>(groupClauseSelectorSolver0);
      FullClauseSelectorSolver<Minimal4InclusionModel> fullClauseSelectorSolver0 = (FullClauseSelectorSolver<Minimal4InclusionModel>) mock(FullClauseSelectorSolver.class, new ViolatedAssumptionAnswer());
      doReturn(0, 873, 0).when(fullClauseSelectorSolver0).nVars();
      FullClauseSelectorSolver<FullClauseSelectorSolver<Minimal4InclusionModel>> fullClauseSelectorSolver1 = new FullClauseSelectorSolver<FullClauseSelectorSolver<Minimal4InclusionModel>>(fullClauseSelectorSolver0, true);
      IVecInt iVecInt0 = AbstractMinimalModel.negativeLiterals(fullClauseSelectorSolver1);
      Minimal4InclusionModel minimal4InclusionModel0 = new Minimal4InclusionModel(groupClauseSelectorSolver1, iVecInt0);
      int[] intArray1 = minimal4InclusionModel0.modelWithInternalVariables();
      assertArrayEquals(new int[] {0, (-1), 0, 0, 0, 0}, intArray1);
  }
}
