/*
 * This file was automatically generated by EvoSuite
 * Fri Oct 25 21:56:49 GMT 2019
 */

package weka.filters.unsupervised.attribute;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.ArrayList;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.util.SystemInUtil;
import org.junit.runner.RunWith;
import weka.core.AbstractInstance;
import weka.core.Attribute;
import weka.core.BinarySparseInstance;
import weka.core.Instance;
import weka.core.Instances;
import weka.core.SparseInstance;
import weka.filters.Filter;
import weka.filters.unsupervised.attribute.InterquartileRange;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class InterquartileRange_ESTest extends InterquartileRange_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      InterquartileRange interquartileRange0 = new InterquartileRange();
      SystemInUtil.addInputLine("BJd,NCnDN4*q");
      InterquartileRange.ValueType interquartileRange_ValueType0 = InterquartileRange.ValueType.MEDIAN;
      interquartileRange0.getValues(interquartileRange_ValueType0);
      interquartileRange0.setExtremeValuesAsOutliers(false);
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(0);
      binarySparseInstance0.copy();
      // Undeclared exception!
      try { 
        interquartileRange0.isExtremeValue(binarySparseInstance0, 6);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.filters.unsupervised.attribute.InterquartileRange", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      InterquartileRange interquartileRange0 = new InterquartileRange();
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (double) (-1);
      doubleArray0[1] = (-1387.2566360086298);
      doubleArray0[2] = 2306.136396;
      interquartileRange0.m_LowerExtremeValue = doubleArray0;
      interquartileRange0.getAttributeIndices();
      interquartileRange0.getOutlierFactor();
      String[] stringArray0 = new String[5];
      stringArray0[0] = "first-last";
      stringArray0[1] = "first-last";
      stringArray0[2] = "first-last";
      stringArray0[3] = "first-last";
      stringArray0[4] = "rBqVIR7k5f";
      InterquartileRange.main(stringArray0);
      int[] intArray0 = new int[9];
      intArray0[0] = (-1);
      intArray0[1] = (-1);
      intArray0[2] = (-1);
      intArray0[3] = 104;
      intArray0[4] = (-1);
      intArray0[5] = (-1);
      intArray0[6] = (-1);
      intArray0[7] = (-1);
      intArray0[8] = (-1);
      interquartileRange0.setAttributeIndicesArray(intArray0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      InterquartileRange interquartileRange0 = new InterquartileRange();
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(711);
      BinarySparseInstance binarySparseInstance1 = new BinarySparseInstance((SparseInstance) binarySparseInstance0);
      InterquartileRange.ValueType interquartileRange_ValueType0 = InterquartileRange.ValueType.LOWER_OUTLIER_VALUES;
      interquartileRange0.getValues(interquartileRange_ValueType0);
      // Undeclared exception!
      try { 
        interquartileRange0.getCapabilities();
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // weka/core/WekaPackageManager
         //
         verifyException("weka.core.Utils", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      InterquartileRange interquartileRange0 = new InterquartileRange();
      interquartileRange0.extremeValuesAsOutliersTipText();
      interquartileRange0.extremeValuesAsOutliersTipText();
      interquartileRange0.detectionPerAttributeTipText();
      interquartileRange0.setExtremeValuesFactor(0.0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      InterquartileRange interquartileRange0 = new InterquartileRange();
      interquartileRange0.getExtremeValuesAsOutliers();
      int[] intArray0 = new int[5];
      intArray0[0] = (-1);
      intArray0[1] = (-1);
      intArray0[2] = 0;
      intArray0[3] = (-1);
      intArray0[4] = (-1);
      interquartileRange0.m_OutlierAttributePosition = intArray0;
      interquartileRange0.extremeValuesAsOutliersTipText();
      interquartileRange0.outputOffsetMultiplierTipText();
      interquartileRange0.extremeValuesAsOutliersTipText();
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      InterquartileRange interquartileRange0 = new InterquartileRange();
      interquartileRange0.outputOffsetMultiplierTipText();
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) (-1);
      doubleArray0[1] = (double) (-1);
      interquartileRange0.m_LowerOutlier = doubleArray0;
      interquartileRange0.outlierFactorTipText();
      InterquartileRange.ValueType interquartileRange_ValueType0 = InterquartileRange.ValueType.LOWER_EXTREME_VALUES;
      interquartileRange0.getValues(interquartileRange_ValueType0);
      interquartileRange0.outputOffsetMultiplierTipText();
      String[] stringArray0 = new String[2];
      stringArray0[0] = "Generates an additional attribute 'Offset' that contains the multiplier the value is off the median: value = median + 'multiplier' * IQR";
      stringArray0[1] = "Generates an additional attribute 'Offset' that contains the multiplier the value is off the median: value = median + 'multiplier' * IQR";
      interquartileRange0.setOptions(stringArray0);
      InterquartileRange.ValueType interquartileRange_ValueType1 = InterquartileRange.ValueType.LOWER_OUTLIER_VALUES;
      interquartileRange0.getValues(interquartileRange_ValueType1);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      InterquartileRange interquartileRange0 = new InterquartileRange();
      // Undeclared exception!
      try { 
        interquartileRange0.getCapabilities();
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // weka/core/WekaPackageManager
         //
         verifyException("weka.core.Utils", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      InterquartileRange interquartileRange0 = new InterquartileRange();
      InterquartileRange.main((String[]) null);
      interquartileRange0.getOptions();
      interquartileRange0.setOutputOffsetMultiplier(true);
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (double) (-1);
      doubleArray0[1] = 0.0;
      doubleArray0[2] = (double) (-1);
      doubleArray0[3] = (double) (-1);
      InterquartileRange interquartileRange1 = (InterquartileRange)Filter.makeCopy(interquartileRange0);
      interquartileRange0.m_IQR = doubleArray0;
      interquartileRange0.setAttributeIndices("n");
      interquartileRange0.setOutputOffsetMultiplier(true);
      interquartileRange0.setOutputOffsetMultiplier(true);
      interquartileRange1.getExtremeValuesAsOutliers();
      interquartileRange0.attributeIndicesTipText();
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      InterquartileRange interquartileRange0 = new InterquartileRange();
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) (-1);
      doubleArray0[1] = (double) (-1);
      interquartileRange0.m_IQR = doubleArray0;
      InterquartileRange.ValueType interquartileRange_ValueType0 = InterquartileRange.ValueType.IQR;
      interquartileRange0.getValues(interquartileRange_ValueType0);
      String[] stringArray0 = new String[5];
      stringArray0[0] = "RfdaQ2`";
      stringArray0[1] = "95t+G'ru0=";
      stringArray0[2] = "E";
      stringArray0[3] = "E";
      stringArray0[4] = "oFJ=}nk|xzI7";
      interquartileRange0.setOptions(stringArray0);
      interquartileRange0.setExtremeValuesFactor((-1));
      interquartileRange0.getExtremeValuesAsOutliers();
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      InterquartileRange interquartileRange0 = new InterquartileRange();
      InterquartileRange.main((String[]) null);
      interquartileRange0.getOptions();
      interquartileRange0.setOutputOffsetMultiplier(true);
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (double) (-1);
      doubleArray0[1] = 0.0;
      doubleArray0[2] = (double) (-1);
      doubleArray0[3] = (double) (-1);
      InterquartileRange interquartileRange1 = (InterquartileRange)Filter.makeCopy(interquartileRange0);
      interquartileRange0.m_IQR = doubleArray0;
      interquartileRange0.setAttributeIndices("n");
      InterquartileRange.ValueType interquartileRange_ValueType0 = InterquartileRange.ValueType.UPPER_EXTREME_VALUES;
      interquartileRange0.getValues(interquartileRange_ValueType0);
      interquartileRange1.getOutlierFactor();
      String[] stringArray0 = new String[9];
      stringArray0[1] = "n";
      stringArray0[3] = "n";
      stringArray0[4] = "n";
      stringArray0[8] = "n";
      try { 
        interquartileRange0.setOptions(stringArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.core.Utils", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      InterquartileRange interquartileRange0 = new InterquartileRange();
      double[] doubleArray0 = interquartileRange0.m_Median;
      String[] stringArray0 = new String[1];
      try { 
        interquartileRange0.setOptions(stringArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.core.Utils", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      InterquartileRange interquartileRange0 = new InterquartileRange();
      int int0 = 711;
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(711);
      BinarySparseInstance binarySparseInstance1 = new BinarySparseInstance((SparseInstance) binarySparseInstance0);
      SystemInUtil.addInputLine("<f>|d~mwutIchE");
      binarySparseInstance1.isMissing((-1));
      // Undeclared exception!
      try { 
        interquartileRange0.isOutlier(binarySparseInstance0, 711);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.filters.unsupervised.attribute.InterquartileRange", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      InterquartileRange interquartileRange0 = new InterquartileRange();
      InterquartileRange.ValueType interquartileRange_ValueType0 = InterquartileRange.ValueType.UPPER_OUTLIER_VALUES;
      interquartileRange0.getValues(interquartileRange_ValueType0);
      interquartileRange0.getExtremeValuesAsOutliers();
      interquartileRange0.attributeIndicesTipText();
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      InterquartileRange interquartileRange0 = new InterquartileRange();
      interquartileRange0.setExtremeValuesAsOutliers(false);
      // Undeclared exception!
      try { 
        interquartileRange0.isOutlier((Instance) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.filters.unsupervised.attribute.InterquartileRange", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      InterquartileRange interquartileRange0 = new InterquartileRange();
      interquartileRange0.globalInfo();
      try { 
        interquartileRange0.process((Instances) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.filters.unsupervised.attribute.InterquartileRange", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      InterquartileRange interquartileRange0 = new InterquartileRange();
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) (-1);
      doubleArray0[1] = (double) (-1);
      interquartileRange0.m_UpperOutlier = doubleArray0;
      interquartileRange0.getOptions();
      interquartileRange0.setOutlierFactor((-1690.4954413));
      InterquartileRange.ValueType.values();
      interquartileRange0.getRevision();
      int[] intArray0 = new int[3];
      intArray0[0] = (-1);
      intArray0[1] = (-1);
      intArray0[2] = (-1);
      interquartileRange0.setAttributeIndicesArray(intArray0);
      interquartileRange0.setExtremeValuesAsOutliers(false);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      InterquartileRange interquartileRange0 = new InterquartileRange();
      interquartileRange0.m_ExtremeValuesFactor = (-1.0);
      interquartileRange0.getOutlierFactor();
      interquartileRange0.extremeValuesFactorTipText();
      String[] stringArray0 = new String[4];
      stringArray0[0] = "The factor for determining the thresholds for extreme values.";
      stringArray0[1] = "The factor for determining the thresholds for extreme values.";
      stringArray0[2] = "The factor for determining the thresholds for extreme values.";
      stringArray0[3] = "The factor for determining the thresholds for extreme values.";
      InterquartileRange.main(stringArray0);
      InterquartileRange.ValueType interquartileRange_ValueType0 = InterquartileRange.ValueType.MEDIAN;
      interquartileRange0.getValues(interquartileRange_ValueType0);
      interquartileRange0.extremeValuesAsOutliersTipText();
      interquartileRange0.getDetectionPerAttribute();
      interquartileRange0.outlierFactorTipText();
      interquartileRange0.setExtremeValuesAsOutliers(false);
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      Instances instances0 = new Instances("", arrayList0, 3);
      instances0.deleteAttributeType(114);
      // Undeclared exception!
      try { 
        instances0.setClassIndex(3);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid class index: 3
         //
         verifyException("weka.core.Instances", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      InterquartileRange interquartileRange0 = new InterquartileRange();
      InterquartileRange interquartileRange1 = (InterquartileRange)Filter.makeCopy(interquartileRange0);
      // Undeclared exception!
      try { 
        interquartileRange1.setAttributeIndices((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.core.Range", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      InterquartileRange interquartileRange0 = new InterquartileRange();
      interquartileRange0.globalInfo();
      interquartileRange0.setExtremeValuesAsOutliers(false);
      String[] stringArray0 = new String[1];
      try { 
        interquartileRange0.batchFinished();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // No input instance format defined
         //
         verifyException("weka.filters.SimpleBatchFilter", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      InterquartileRange interquartileRange0 = new InterquartileRange();
      interquartileRange0.setExtremeValuesAsOutliers(false);
      interquartileRange0.getOptions();
      InterquartileRange interquartileRange1 = new InterquartileRange();
      interquartileRange1.setOutlierFactor(422.8);
      int int0 = 0;
      BinarySparseInstance binarySparseInstance0 = null;
      try {
        binarySparseInstance0 = new BinarySparseInstance((-1));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.core.BinarySparseInstance", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      InterquartileRange interquartileRange0 = new InterquartileRange();
      InterquartileRange.ValueType interquartileRange_ValueType0 = InterquartileRange.ValueType.MEDIAN;
      interquartileRange0.getValues(interquartileRange_ValueType0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      InterquartileRange interquartileRange0 = new InterquartileRange();
      interquartileRange0.getExtremeValuesAsOutliers();
      // Undeclared exception!
      try { 
        interquartileRange0.setAttributeIndicesArray((int[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.core.Range", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      InterquartileRange interquartileRange0 = new InterquartileRange();
      interquartileRange0.attributeIndicesTipText();
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(0);
      binarySparseInstance0.copy();
      // Undeclared exception!
      try { 
        interquartileRange0.calculateMultiplier(binarySparseInstance0, (-313));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.filters.unsupervised.attribute.InterquartileRange", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      InterquartileRange interquartileRange0 = new InterquartileRange();
      InterquartileRange.main((String[]) null);
      interquartileRange0.getOptions();
      interquartileRange0.setOutputOffsetMultiplier(true);
      SystemInUtil.addInputLine("first-last");
      Filter.makeCopy(interquartileRange0);
      interquartileRange0.setAttributeIndices("n");
      interquartileRange0.setOutputOffsetMultiplier(true);
      interquartileRange0.setOutputOffsetMultiplier(true);
      interquartileRange0.setExtremeValuesAsOutliers(true);
      interquartileRange0.getOptions();
      int[] intArray0 = null;
      // Undeclared exception!
      try { 
        interquartileRange0.isExtremeValue((Instance) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.filters.unsupervised.attribute.InterquartileRange", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      InterquartileRange interquartileRange0 = new InterquartileRange();
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) (-1);
      doubleArray0[1] = (double) (-1);
      interquartileRange0.m_UpperOutlier = doubleArray0;
      interquartileRange0.m_ExtremeValuesFactor = 0.0;
      interquartileRange0.setExtremeValuesAsOutliers(true);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      InterquartileRange interquartileRange0 = new InterquartileRange();
      int[] intArray0 = null;
      Instance instance0 = null;
      // Undeclared exception!
      try { 
        interquartileRange0.isExtremeValue((Instance) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.filters.unsupervised.attribute.InterquartileRange", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      InterquartileRange interquartileRange0 = new InterquartileRange();
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(4);
      binarySparseInstance0.copy();
      // Undeclared exception!
      try { 
        interquartileRange0.isExtremeValue(binarySparseInstance0, 395);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.filters.unsupervised.attribute.InterquartileRange", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      InterquartileRange interquartileRange0 = new InterquartileRange();
      interquartileRange0.setExtremeValuesFactor(Double.NaN);
      int[] intArray0 = new int[6];
      interquartileRange0.getOptions();
      intArray0[0] = (-1);
      intArray0[1] = (-1);
      intArray0[2] = (-1);
      intArray0[3] = (-1);
      interquartileRange0.m_OutputOffsetMultiplier = true;
      intArray0[4] = (-1);
      intArray0[5] = 0;
      interquartileRange0.m_OutlierAttributePosition = intArray0;
      interquartileRange0.listOptions();
      interquartileRange0.setExtremeValuesFactor(0.0);
      // Undeclared exception!
      try { 
        interquartileRange0.getCapabilities();
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // weka/core/WekaPackageManager
         //
         verifyException("weka.core.Utils", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      InterquartileRange interquartileRange0 = new InterquartileRange();
      interquartileRange0.setOutlierFactor(3006.408);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      InterquartileRange interquartileRange0 = new InterquartileRange();
      InterquartileRange.ValueType interquartileRange_ValueType0 = InterquartileRange.ValueType.LOWER_EXTREME_VALUES;
      interquartileRange0.getValues(interquartileRange_ValueType0);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      InterquartileRange interquartileRange0 = new InterquartileRange();
      interquartileRange0.setDetectionPerAttribute(false);
      interquartileRange0.getDetectionPerAttribute();
      String string0 = null;
      int[] intArray0 = new int[9];
      Instances instances0 = null;
      try {
        instances0 = new Instances("", (ArrayList<Attribute>) null, 661);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.core.Instances", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      InterquartileRange interquartileRange0 = new InterquartileRange();
      InterquartileRange.main((String[]) null);
      interquartileRange0.getOptions();
      interquartileRange0.setOutputOffsetMultiplier(true);
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (double) (-1);
      try { 
        Filter.filterFile(interquartileRange0, (String[]) null);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // 
         // Unable to determine structure as arff (Reason: java.io.IOException: Simulated exception in System.in).
         // Filter options:
         // 
         // -D
         // \tTurns on output of debugging information.
         // -R <col1,col2-col4,...>
         // \tSpecifies list of columns to base outlier/extreme value detection
         // \ton. If an instance is considered in at least one of those
         // \tattributes an outlier/extreme value, it is tagged accordingly.
         //  'first' and 'last' are valid indexes.
         // \t(default none)
         // -O <num>
         // \tThe factor for outlier detection.
         // \t(default: 3)
         // -E <num>
         // \tThe factor for extreme values detection.
         // \t(default: 2*Outlier Factor)
         // -E-as-O
         // \tTags extreme values also as outliers.
         // \t(default: off)
         // -P
         // \tGenerates Outlier/ExtremeValue pair for each numeric attribute in
         // \tthe range, not just a single indicator pair for all the attributes.
         // \t(default: off)
         // -M
         // \tGenerates an additional attribute 'Offset' per Outlier/ExtremeValue
         // \tpair that contains the multiplier that the value is off the median.
         // \t   value = median + 'multiplier' * IQR
         // Note: implicitely sets '-P'.\t(default: off)
         // 
         // General options:
         // 
         // -h
         // \tGet help on available options.
         // \t(use -b -h for help on batch mode.)
         // -i <file>
         // \tThe name of the file containing input instances.
         // \tIf not supplied then instances will be read from stdin.
         // -o <file>
         // \tThe name of the file output instances will be written to.
         // \tIf not supplied then instances will be written to stdout.
         // -c <class index>
         // \tThe number of the attribute to use as the class.
         // \t\"first\" and \"last\" are also valid entries.
         // \tIf not supplied then no class is assigned.
         //
         verifyException("weka.filters.Filter", e);
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      InterquartileRange interquartileRange0 = new InterquartileRange();
      interquartileRange0.outputOffsetMultiplierTipText();
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) (-1);
      doubleArray0[1] = (double) (-1);
      interquartileRange0.m_LowerOutlier = doubleArray0;
      interquartileRange0.outlierFactorTipText();
      InterquartileRange.ValueType interquartileRange_ValueType0 = InterquartileRange.ValueType.LOWER_EXTREME_VALUES;
      interquartileRange0.getValues(interquartileRange_ValueType0);
      InterquartileRange.ValueType interquartileRange_ValueType1 = InterquartileRange.ValueType.IQR;
      interquartileRange0.getValues(interquartileRange_ValueType1);
      interquartileRange0.getOutlierFactor();
      interquartileRange0.outputOffsetMultiplierTipText();
      String[] stringArray0 = new String[2];
      stringArray0[0] = "Generates an additional attribute 'Offset' that contains the multiplier the value is off the median: value = median + 'multiplier' * IQR";
      stringArray0[1] = "Generates an additional attribute 'Offset' that contains the multiplier the value is off the median: value = median + 'multiplier' * IQR";
      interquartileRange0.setOptions(stringArray0);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      InterquartileRange interquartileRange0 = new InterquartileRange();
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (double) (-1);
      doubleArray0[1] = (double) (-1);
      doubleArray0[2] = (double) (-1);
      doubleArray0[3] = (double) (-1);
      doubleArray0[4] = (double) (-1);
      interquartileRange0.m_UpperOutlier = doubleArray0;
      InterquartileRange.ValueType interquartileRange_ValueType0 = InterquartileRange.ValueType.UPPER_EXTREME_VALUES;
      interquartileRange0.getValues(interquartileRange_ValueType0);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      InterquartileRange interquartileRange0 = new InterquartileRange();
      InterquartileRange.main((String[]) null);
      interquartileRange0.getOptions();
      interquartileRange0.setOutputOffsetMultiplier(false);
      Filter.makeCopy(interquartileRange0);
      interquartileRange0.setAttributeIndices("n");
      interquartileRange0.setOutputOffsetMultiplier(true);
      interquartileRange0.setOutputOffsetMultiplier(false);
      interquartileRange0.setExtremeValuesAsOutliers(false);
      interquartileRange0.getOptions();
      InterquartileRange interquartileRange1 = new InterquartileRange();
      InterquartileRange interquartileRange2 = new InterquartileRange();
      // Undeclared exception!
      try { 
        interquartileRange2.getCapabilities();
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // weka/core/WekaPackageManager
         //
         verifyException("weka.core.Utils", e);
      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      InterquartileRange interquartileRange0 = new InterquartileRange();
      interquartileRange0.getAttributeIndices();
      interquartileRange0.getDetectionPerAttribute();
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      InterquartileRange interquartileRange0 = new InterquartileRange();
      InterquartileRange interquartileRange1 = new InterquartileRange();
      interquartileRange0.setOutlierFactor((-1));
      interquartileRange0.setExtremeValuesFactor((-1));
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      InterquartileRange interquartileRange0 = new InterquartileRange();
      InterquartileRange.ValueType interquartileRange_ValueType0 = InterquartileRange.ValueType.IQR;
      interquartileRange0.getValues(interquartileRange_ValueType0);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      InterquartileRange interquartileRange0 = new InterquartileRange();
      InterquartileRange.ValueType interquartileRange_ValueType0 = InterquartileRange.ValueType.UPPER_EXTREME_VALUES;
      interquartileRange0.getValues(interquartileRange_ValueType0);
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      InterquartileRange interquartileRange0 = new InterquartileRange();
      int[] intArray0 = new int[0];
      interquartileRange0.m_AttributeIndices = intArray0;
      String[] stringArray0 = new String[0];
      interquartileRange0.setOptions(stringArray0);
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      Instances instances0 = new Instances((String) null, arrayList0, 7);
      // Undeclared exception!
      try { 
        interquartileRange0.getCapabilities(instances0);
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // weka/core/WekaPackageManager
         //
         verifyException("weka.core.Utils", e);
      }
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      InterquartileRange interquartileRange0 = new InterquartileRange();
      // Undeclared exception!
      try { 
        interquartileRange0.calculateMultiplier((Instance) null, 2147483645);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.filters.unsupervised.attribute.InterquartileRange", e);
      }
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      InterquartileRange interquartileRange0 = new InterquartileRange();
      interquartileRange0.globalInfo();
      try { 
        interquartileRange0.determineOutputFormat((Instances) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.filters.unsupervised.attribute.InterquartileRange", e);
      }
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      InterquartileRange interquartileRange0 = new InterquartileRange();
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      Instances instances0 = null;
      try {
        instances0 = new Instances("", arrayList0, (-903));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal Capacity: -903
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      InterquartileRange interquartileRange0 = new InterquartileRange();
      int[] intArray0 = new int[9];
      intArray0[0] = 17;
      intArray0[1] = 1523;
      intArray0[2] = 1485;
      SystemInUtil.addInputLine("U0#VJ-hY,)p6GBDhq-");
      intArray0[3] = 91;
      intArray0[4] = 710;
      SystemInUtil.addInputLine((String) null);
      intArray0[5] = 0;
      intArray0[6] = 2969;
      intArray0[7] = 97;
      intArray0[8] = 0;
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(0.0, intArray0, 123);
      BinarySparseInstance binarySparseInstance1 = new BinarySparseInstance((SparseInstance) binarySparseInstance0);
      binarySparseInstance1.setWeight(0.0);
      // Undeclared exception!
      try { 
        interquartileRange0.isOutlier(binarySparseInstance1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.filters.unsupervised.attribute.InterquartileRange", e);
      }
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      InterquartileRange interquartileRange0 = new InterquartileRange();
      interquartileRange0.detectionPerAttributeTipText();
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      InterquartileRange interquartileRange0 = new InterquartileRange();
      interquartileRange0.extremeValuesFactorTipText();
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      InterquartileRange.main((String[]) null);
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      InterquartileRange interquartileRange0 = new InterquartileRange();
      int[] intArray0 = new int[6];
      intArray0[0] = (-560);
      intArray0[1] = (-1);
      intArray0[2] = (-1);
      intArray0[3] = (-1);
      intArray0[4] = (-1);
      intArray0[5] = (-1);
      interquartileRange0.m_OutlierAttributePosition = intArray0;
      try { 
        interquartileRange0.process((Instances) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.filters.unsupervised.attribute.InterquartileRange", e);
      }
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      InterquartileRange interquartileRange0 = new InterquartileRange();
      interquartileRange0.setExtremeValuesFactor((-2030.9031119571));
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      InterquartileRange interquartileRange0 = new InterquartileRange();
      interquartileRange0.getOptions();
      // Undeclared exception!
      try { 
        interquartileRange0.getCapabilities();
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // weka/core/WekaPackageManager
         //
         verifyException("weka.core.Utils", e);
      }
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      InterquartileRange interquartileRange0 = new InterquartileRange();
      assertNotNull(interquartileRange0);
      assertEquals("Generates an additional attribute 'Offset' that contains the multiplier the value is off the median: value = median + 'multiplier' * IQR", interquartileRange0.outputOffsetMultiplierTipText());
      assertEquals("The factor for determining the thresholds for outliers.", interquartileRange0.outlierFactorTipText());
      assertEquals("The factor for determining the thresholds for extreme values.", interquartileRange0.extremeValuesFactorTipText());
      assertEquals("Turns on output of debugging information.", interquartileRange0.debugTipText());
      assertEquals("Whether to tag extreme values also as outliers.", interquartileRange0.extremeValuesAsOutliersTipText());
      assertFalse(interquartileRange0.isFirstBatchDone());
      assertEquals(6.0, interquartileRange0.getExtremeValuesFactor(), 0.01);
      assertFalse(interquartileRange0.getDetectionPerAttribute());
      assertFalse(interquartileRange0.isOutputFormatDefined());
      assertEquals("Generates Outlier/ExtremeValue attribute pair for each numeric attribute, not just a single pair for all numeric attributes together.", interquartileRange0.detectionPerAttributeTipText());
      assertFalse(interquartileRange0.getOutputOffsetMultiplier());
      assertFalse(interquartileRange0.getDebug());
      assertEquals(3.0, interquartileRange0.getOutlierFactor(), 0.01);
      assertFalse(interquartileRange0.getExtremeValuesAsOutliers());
      assertEquals("A filter for detecting outliers and extreme values based on interquartile ranges. The filter skips the class attribute.\n\nOutliers:\n  Q3 + OF*IQR < x <= Q3 + EVF*IQR\n  or\n  Q1 - EVF*IQR <= x < Q1 - OF*IQR\n\nExtreme values:\n  x > Q3 + EVF*IQR\n  or\n  x < Q1 - EVF*IQR\n\nKey:\n  Q1  = 25% quartile\n  Q3  = 75% quartile\n  IQR = Interquartile Range, difference between Q1 and Q3\n  OF  = Outlier Factor\n  EVF = Extreme Value Factor", interquartileRange0.globalInfo());
      assertEquals("Specify range of attributes to act on;  this is a comma separated list of attribute indices, with \"first\" and \"last\" valid values; specify an inclusive range with \"-\", eg: \"first-3,5,6-10,last\".", interquartileRange0.attributeIndicesTipText());
      assertTrue(interquartileRange0.isNewBatch());
      assertFalse(interquartileRange0.mayRemoveInstanceAfterFirstBatchDone());
      assertEquals((-1), InterquartileRange.NON_NUMERIC);
      
      InterquartileRange.main((String[]) null);
      String[] stringArray0 = interquartileRange0.getOptions();
      assertNotNull(stringArray0);
      assertEquals(6, stringArray0.length);
      assertEquals("Generates an additional attribute 'Offset' that contains the multiplier the value is off the median: value = median + 'multiplier' * IQR", interquartileRange0.outputOffsetMultiplierTipText());
      assertEquals("The factor for determining the thresholds for outliers.", interquartileRange0.outlierFactorTipText());
      assertEquals("The factor for determining the thresholds for extreme values.", interquartileRange0.extremeValuesFactorTipText());
      assertEquals("Turns on output of debugging information.", interquartileRange0.debugTipText());
      assertEquals("Whether to tag extreme values also as outliers.", interquartileRange0.extremeValuesAsOutliersTipText());
      assertFalse(interquartileRange0.isFirstBatchDone());
      assertEquals(6.0, interquartileRange0.getExtremeValuesFactor(), 0.01);
      assertFalse(interquartileRange0.getDetectionPerAttribute());
      assertFalse(interquartileRange0.isOutputFormatDefined());
      assertEquals("Generates Outlier/ExtremeValue attribute pair for each numeric attribute, not just a single pair for all numeric attributes together.", interquartileRange0.detectionPerAttributeTipText());
      assertFalse(interquartileRange0.getOutputOffsetMultiplier());
      assertFalse(interquartileRange0.getDebug());
      assertEquals(3.0, interquartileRange0.getOutlierFactor(), 0.01);
      assertFalse(interquartileRange0.getExtremeValuesAsOutliers());
      assertEquals("A filter for detecting outliers and extreme values based on interquartile ranges. The filter skips the class attribute.\n\nOutliers:\n  Q3 + OF*IQR < x <= Q3 + EVF*IQR\n  or\n  Q1 - EVF*IQR <= x < Q1 - OF*IQR\n\nExtreme values:\n  x > Q3 + EVF*IQR\n  or\n  x < Q1 - EVF*IQR\n\nKey:\n  Q1  = 25% quartile\n  Q3  = 75% quartile\n  IQR = Interquartile Range, difference between Q1 and Q3\n  OF  = Outlier Factor\n  EVF = Extreme Value Factor", interquartileRange0.globalInfo());
      assertEquals("Specify range of attributes to act on;  this is a comma separated list of attribute indices, with \"first\" and \"last\" valid values; specify an inclusive range with \"-\", eg: \"first-3,5,6-10,last\".", interquartileRange0.attributeIndicesTipText());
      assertTrue(interquartileRange0.isNewBatch());
      assertFalse(interquartileRange0.mayRemoveInstanceAfterFirstBatchDone());
      assertEquals((-1), InterquartileRange.NON_NUMERIC);
      
      interquartileRange0.setOutputOffsetMultiplier(true);
      assertEquals("Generates an additional attribute 'Offset' that contains the multiplier the value is off the median: value = median + 'multiplier' * IQR", interquartileRange0.outputOffsetMultiplierTipText());
      assertEquals("The factor for determining the thresholds for outliers.", interquartileRange0.outlierFactorTipText());
      assertTrue(interquartileRange0.getOutputOffsetMultiplier());
      assertEquals("The factor for determining the thresholds for extreme values.", interquartileRange0.extremeValuesFactorTipText());
      assertEquals("Turns on output of debugging information.", interquartileRange0.debugTipText());
      assertEquals("Whether to tag extreme values also as outliers.", interquartileRange0.extremeValuesAsOutliersTipText());
      assertFalse(interquartileRange0.isFirstBatchDone());
      assertEquals(6.0, interquartileRange0.getExtremeValuesFactor(), 0.01);
      assertFalse(interquartileRange0.isOutputFormatDefined());
      assertEquals("Generates Outlier/ExtremeValue attribute pair for each numeric attribute, not just a single pair for all numeric attributes together.", interquartileRange0.detectionPerAttributeTipText());
      assertTrue(interquartileRange0.getDetectionPerAttribute());
      assertFalse(interquartileRange0.getDebug());
      assertEquals(3.0, interquartileRange0.getOutlierFactor(), 0.01);
      assertFalse(interquartileRange0.getExtremeValuesAsOutliers());
      assertEquals("A filter for detecting outliers and extreme values based on interquartile ranges. The filter skips the class attribute.\n\nOutliers:\n  Q3 + OF*IQR < x <= Q3 + EVF*IQR\n  or\n  Q1 - EVF*IQR <= x < Q1 - OF*IQR\n\nExtreme values:\n  x > Q3 + EVF*IQR\n  or\n  x < Q1 - EVF*IQR\n\nKey:\n  Q1  = 25% quartile\n  Q3  = 75% quartile\n  IQR = Interquartile Range, difference between Q1 and Q3\n  OF  = Outlier Factor\n  EVF = Extreme Value Factor", interquartileRange0.globalInfo());
      assertEquals("Specify range of attributes to act on;  this is a comma separated list of attribute indices, with \"first\" and \"last\" valid values; specify an inclusive range with \"-\", eg: \"first-3,5,6-10,last\".", interquartileRange0.attributeIndicesTipText());
      assertTrue(interquartileRange0.isNewBatch());
      assertFalse(interquartileRange0.mayRemoveInstanceAfterFirstBatchDone());
      assertEquals((-1), InterquartileRange.NON_NUMERIC);
      
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (double) (-1);
      doubleArray0[1] = 0.0;
      doubleArray0[2] = (double) (-1);
      doubleArray0[3] = (double) (-1);
      InterquartileRange interquartileRange1 = (InterquartileRange)Filter.makeCopy(interquartileRange0);
      assertNotNull(interquartileRange1);
      assertEquals("Generates an additional attribute 'Offset' that contains the multiplier the value is off the median: value = median + 'multiplier' * IQR", interquartileRange0.outputOffsetMultiplierTipText());
      assertEquals("The factor for determining the thresholds for outliers.", interquartileRange0.outlierFactorTipText());
      assertTrue(interquartileRange0.getOutputOffsetMultiplier());
      assertEquals("The factor for determining the thresholds for extreme values.", interquartileRange0.extremeValuesFactorTipText());
      assertEquals("Turns on output of debugging information.", interquartileRange0.debugTipText());
      assertEquals("Whether to tag extreme values also as outliers.", interquartileRange0.extremeValuesAsOutliersTipText());
      assertFalse(interquartileRange0.isFirstBatchDone());
      assertEquals(6.0, interquartileRange0.getExtremeValuesFactor(), 0.01);
      assertFalse(interquartileRange0.isOutputFormatDefined());
      assertEquals("Generates Outlier/ExtremeValue attribute pair for each numeric attribute, not just a single pair for all numeric attributes together.", interquartileRange0.detectionPerAttributeTipText());
      assertTrue(interquartileRange0.getDetectionPerAttribute());
      assertFalse(interquartileRange0.getDebug());
      assertEquals(3.0, interquartileRange0.getOutlierFactor(), 0.01);
      assertFalse(interquartileRange0.getExtremeValuesAsOutliers());
      assertEquals("A filter for detecting outliers and extreme values based on interquartile ranges. The filter skips the class attribute.\n\nOutliers:\n  Q3 + OF*IQR < x <= Q3 + EVF*IQR\n  or\n  Q1 - EVF*IQR <= x < Q1 - OF*IQR\n\nExtreme values:\n  x > Q3 + EVF*IQR\n  or\n  x < Q1 - EVF*IQR\n\nKey:\n  Q1  = 25% quartile\n  Q3  = 75% quartile\n  IQR = Interquartile Range, difference between Q1 and Q3\n  OF  = Outlier Factor\n  EVF = Extreme Value Factor", interquartileRange0.globalInfo());
      assertEquals("Specify range of attributes to act on;  this is a comma separated list of attribute indices, with \"first\" and \"last\" valid values; specify an inclusive range with \"-\", eg: \"first-3,5,6-10,last\".", interquartileRange0.attributeIndicesTipText());
      assertTrue(interquartileRange0.isNewBatch());
      assertFalse(interquartileRange0.mayRemoveInstanceAfterFirstBatchDone());
      assertEquals("Generates Outlier/ExtremeValue attribute pair for each numeric attribute, not just a single pair for all numeric attributes together.", interquartileRange1.detectionPerAttributeTipText());
      assertTrue(interquartileRange1.getOutputOffsetMultiplier());
      assertEquals(6.0, interquartileRange1.getExtremeValuesFactor(), 0.01);
      assertEquals("Generates an additional attribute 'Offset' that contains the multiplier the value is off the median: value = median + 'multiplier' * IQR", interquartileRange1.outputOffsetMultiplierTipText());
      assertEquals("Specify range of attributes to act on;  this is a comma separated list of attribute indices, with \"first\" and \"last\" valid values; specify an inclusive range with \"-\", eg: \"first-3,5,6-10,last\".", interquartileRange1.attributeIndicesTipText());
      assertFalse(interquartileRange1.isOutputFormatDefined());
      assertEquals("The factor for determining the thresholds for outliers.", interquartileRange1.outlierFactorTipText());
      assertEquals("Turns on output of debugging information.", interquartileRange1.debugTipText());
      assertTrue(interquartileRange1.getDetectionPerAttribute());
      assertEquals("The factor for determining the thresholds for extreme values.", interquartileRange1.extremeValuesFactorTipText());
      assertFalse(interquartileRange1.getDebug());
      assertEquals(3.0, interquartileRange1.getOutlierFactor(), 0.01);
      assertEquals("A filter for detecting outliers and extreme values based on interquartile ranges. The filter skips the class attribute.\n\nOutliers:\n  Q3 + OF*IQR < x <= Q3 + EVF*IQR\n  or\n  Q1 - EVF*IQR <= x < Q1 - OF*IQR\n\nExtreme values:\n  x > Q3 + EVF*IQR\n  or\n  x < Q1 - EVF*IQR\n\nKey:\n  Q1  = 25% quartile\n  Q3  = 75% quartile\n  IQR = Interquartile Range, difference between Q1 and Q3\n  OF  = Outlier Factor\n  EVF = Extreme Value Factor", interquartileRange1.globalInfo());
      assertFalse(interquartileRange1.isFirstBatchDone());
      assertFalse(interquartileRange1.mayRemoveInstanceAfterFirstBatchDone());
      assertTrue(interquartileRange1.isNewBatch());
      assertEquals("Whether to tag extreme values also as outliers.", interquartileRange1.extremeValuesAsOutliersTipText());
      assertFalse(interquartileRange1.getExtremeValuesAsOutliers());
      assertEquals((-1), InterquartileRange.NON_NUMERIC);
      assertEquals((-1), InterquartileRange.NON_NUMERIC);
      assertFalse(interquartileRange1.equals((Object)interquartileRange0));
      assertNotSame(interquartileRange0, interquartileRange1);
      assertNotSame(interquartileRange1, interquartileRange0);
      
      interquartileRange0.m_IQR = doubleArray0;
      assertEquals("Generates an additional attribute 'Offset' that contains the multiplier the value is off the median: value = median + 'multiplier' * IQR", interquartileRange0.outputOffsetMultiplierTipText());
      assertEquals("The factor for determining the thresholds for outliers.", interquartileRange0.outlierFactorTipText());
      assertTrue(interquartileRange0.getOutputOffsetMultiplier());
      assertEquals("The factor for determining the thresholds for extreme values.", interquartileRange0.extremeValuesFactorTipText());
      assertEquals("Turns on output of debugging information.", interquartileRange0.debugTipText());
      assertEquals("Whether to tag extreme values also as outliers.", interquartileRange0.extremeValuesAsOutliersTipText());
      assertFalse(interquartileRange0.isFirstBatchDone());
      assertEquals(6.0, interquartileRange0.getExtremeValuesFactor(), 0.01);
      assertFalse(interquartileRange0.isOutputFormatDefined());
      assertEquals("Generates Outlier/ExtremeValue attribute pair for each numeric attribute, not just a single pair for all numeric attributes together.", interquartileRange0.detectionPerAttributeTipText());
      assertTrue(interquartileRange0.getDetectionPerAttribute());
      assertFalse(interquartileRange0.getDebug());
      assertEquals(3.0, interquartileRange0.getOutlierFactor(), 0.01);
      assertFalse(interquartileRange0.getExtremeValuesAsOutliers());
      assertEquals("A filter for detecting outliers and extreme values based on interquartile ranges. The filter skips the class attribute.\n\nOutliers:\n  Q3 + OF*IQR < x <= Q3 + EVF*IQR\n  or\n  Q1 - EVF*IQR <= x < Q1 - OF*IQR\n\nExtreme values:\n  x > Q3 + EVF*IQR\n  or\n  x < Q1 - EVF*IQR\n\nKey:\n  Q1  = 25% quartile\n  Q3  = 75% quartile\n  IQR = Interquartile Range, difference between Q1 and Q3\n  OF  = Outlier Factor\n  EVF = Extreme Value Factor", interquartileRange0.globalInfo());
      assertEquals("Specify range of attributes to act on;  this is a comma separated list of attribute indices, with \"first\" and \"last\" valid values; specify an inclusive range with \"-\", eg: \"first-3,5,6-10,last\".", interquartileRange0.attributeIndicesTipText());
      assertTrue(interquartileRange0.isNewBatch());
      assertFalse(interquartileRange0.mayRemoveInstanceAfterFirstBatchDone());
      
      interquartileRange0.setAttributeIndices("n");
      assertEquals("Generates an additional attribute 'Offset' that contains the multiplier the value is off the median: value = median + 'multiplier' * IQR", interquartileRange0.outputOffsetMultiplierTipText());
      assertEquals("The factor for determining the thresholds for outliers.", interquartileRange0.outlierFactorTipText());
      assertTrue(interquartileRange0.getOutputOffsetMultiplier());
      assertEquals("The factor for determining the thresholds for extreme values.", interquartileRange0.extremeValuesFactorTipText());
      assertEquals("Turns on output of debugging information.", interquartileRange0.debugTipText());
      assertEquals("Whether to tag extreme values also as outliers.", interquartileRange0.extremeValuesAsOutliersTipText());
      assertFalse(interquartileRange0.isFirstBatchDone());
      assertEquals(6.0, interquartileRange0.getExtremeValuesFactor(), 0.01);
      assertFalse(interquartileRange0.isOutputFormatDefined());
      assertEquals("Generates Outlier/ExtremeValue attribute pair for each numeric attribute, not just a single pair for all numeric attributes together.", interquartileRange0.detectionPerAttributeTipText());
      assertTrue(interquartileRange0.getDetectionPerAttribute());
      assertFalse(interquartileRange0.getDebug());
      assertEquals(3.0, interquartileRange0.getOutlierFactor(), 0.01);
      assertFalse(interquartileRange0.getExtremeValuesAsOutliers());
      assertEquals("A filter for detecting outliers and extreme values based on interquartile ranges. The filter skips the class attribute.\n\nOutliers:\n  Q3 + OF*IQR < x <= Q3 + EVF*IQR\n  or\n  Q1 - EVF*IQR <= x < Q1 - OF*IQR\n\nExtreme values:\n  x > Q3 + EVF*IQR\n  or\n  x < Q1 - EVF*IQR\n\nKey:\n  Q1  = 25% quartile\n  Q3  = 75% quartile\n  IQR = Interquartile Range, difference between Q1 and Q3\n  OF  = Outlier Factor\n  EVF = Extreme Value Factor", interquartileRange0.globalInfo());
      assertEquals("Specify range of attributes to act on;  this is a comma separated list of attribute indices, with \"first\" and \"last\" valid values; specify an inclusive range with \"-\", eg: \"first-3,5,6-10,last\".", interquartileRange0.attributeIndicesTipText());
      assertTrue(interquartileRange0.isNewBatch());
      assertFalse(interquartileRange0.mayRemoveInstanceAfterFirstBatchDone());
      assertEquals((-1), InterquartileRange.NON_NUMERIC);
      assertFalse(interquartileRange0.equals((Object)interquartileRange1));
      assertNotSame(interquartileRange0, interquartileRange1);
      
      interquartileRange0.setOutputOffsetMultiplier(true);
      assertEquals("Generates an additional attribute 'Offset' that contains the multiplier the value is off the median: value = median + 'multiplier' * IQR", interquartileRange0.outputOffsetMultiplierTipText());
      assertEquals("The factor for determining the thresholds for outliers.", interquartileRange0.outlierFactorTipText());
      assertTrue(interquartileRange0.getOutputOffsetMultiplier());
      assertEquals("The factor for determining the thresholds for extreme values.", interquartileRange0.extremeValuesFactorTipText());
      assertEquals("Turns on output of debugging information.", interquartileRange0.debugTipText());
      assertEquals("Whether to tag extreme values also as outliers.", interquartileRange0.extremeValuesAsOutliersTipText());
      assertFalse(interquartileRange0.isFirstBatchDone());
      assertEquals(6.0, interquartileRange0.getExtremeValuesFactor(), 0.01);
      assertFalse(interquartileRange0.isOutputFormatDefined());
      assertEquals("Generates Outlier/ExtremeValue attribute pair for each numeric attribute, not just a single pair for all numeric attributes together.", interquartileRange0.detectionPerAttributeTipText());
      assertTrue(interquartileRange0.getDetectionPerAttribute());
      assertFalse(interquartileRange0.getDebug());
      assertEquals(3.0, interquartileRange0.getOutlierFactor(), 0.01);
      assertFalse(interquartileRange0.getExtremeValuesAsOutliers());
      assertEquals("A filter for detecting outliers and extreme values based on interquartile ranges. The filter skips the class attribute.\n\nOutliers:\n  Q3 + OF*IQR < x <= Q3 + EVF*IQR\n  or\n  Q1 - EVF*IQR <= x < Q1 - OF*IQR\n\nExtreme values:\n  x > Q3 + EVF*IQR\n  or\n  x < Q1 - EVF*IQR\n\nKey:\n  Q1  = 25% quartile\n  Q3  = 75% quartile\n  IQR = Interquartile Range, difference between Q1 and Q3\n  OF  = Outlier Factor\n  EVF = Extreme Value Factor", interquartileRange0.globalInfo());
      assertEquals("Specify range of attributes to act on;  this is a comma separated list of attribute indices, with \"first\" and \"last\" valid values; specify an inclusive range with \"-\", eg: \"first-3,5,6-10,last\".", interquartileRange0.attributeIndicesTipText());
      assertTrue(interquartileRange0.isNewBatch());
      assertFalse(interquartileRange0.mayRemoveInstanceAfterFirstBatchDone());
      assertEquals((-1), InterquartileRange.NON_NUMERIC);
      assertFalse(interquartileRange0.equals((Object)interquartileRange1));
      assertNotSame(interquartileRange0, interquartileRange1);
      
      interquartileRange0.setOutputOffsetMultiplier(true);
      assertEquals("Generates an additional attribute 'Offset' that contains the multiplier the value is off the median: value = median + 'multiplier' * IQR", interquartileRange0.outputOffsetMultiplierTipText());
      assertEquals("The factor for determining the thresholds for outliers.", interquartileRange0.outlierFactorTipText());
      assertTrue(interquartileRange0.getOutputOffsetMultiplier());
      assertEquals("The factor for determining the thresholds for extreme values.", interquartileRange0.extremeValuesFactorTipText());
      assertEquals("Turns on output of debugging information.", interquartileRange0.debugTipText());
      assertEquals("Whether to tag extreme values also as outliers.", interquartileRange0.extremeValuesAsOutliersTipText());
      assertFalse(interquartileRange0.isFirstBatchDone());
      assertEquals(6.0, interquartileRange0.getExtremeValuesFactor(), 0.01);
      assertFalse(interquartileRange0.isOutputFormatDefined());
      assertEquals("Generates Outlier/ExtremeValue attribute pair for each numeric attribute, not just a single pair for all numeric attributes together.", interquartileRange0.detectionPerAttributeTipText());
      assertTrue(interquartileRange0.getDetectionPerAttribute());
      assertFalse(interquartileRange0.getDebug());
      assertEquals(3.0, interquartileRange0.getOutlierFactor(), 0.01);
      assertFalse(interquartileRange0.getExtremeValuesAsOutliers());
      assertEquals("A filter for detecting outliers and extreme values based on interquartile ranges. The filter skips the class attribute.\n\nOutliers:\n  Q3 + OF*IQR < x <= Q3 + EVF*IQR\n  or\n  Q1 - EVF*IQR <= x < Q1 - OF*IQR\n\nExtreme values:\n  x > Q3 + EVF*IQR\n  or\n  x < Q1 - EVF*IQR\n\nKey:\n  Q1  = 25% quartile\n  Q3  = 75% quartile\n  IQR = Interquartile Range, difference between Q1 and Q3\n  OF  = Outlier Factor\n  EVF = Extreme Value Factor", interquartileRange0.globalInfo());
      assertEquals("Specify range of attributes to act on;  this is a comma separated list of attribute indices, with \"first\" and \"last\" valid values; specify an inclusive range with \"-\", eg: \"first-3,5,6-10,last\".", interquartileRange0.attributeIndicesTipText());
      assertTrue(interquartileRange0.isNewBatch());
      assertFalse(interquartileRange0.mayRemoveInstanceAfterFirstBatchDone());
      assertEquals((-1), InterquartileRange.NON_NUMERIC);
      assertFalse(interquartileRange0.equals((Object)interquartileRange1));
      assertNotSame(interquartileRange0, interquartileRange1);
      
      interquartileRange0.setExtremeValuesAsOutliers(true);
      assertEquals("Generates an additional attribute 'Offset' that contains the multiplier the value is off the median: value = median + 'multiplier' * IQR", interquartileRange0.outputOffsetMultiplierTipText());
      assertEquals("The factor for determining the thresholds for outliers.", interquartileRange0.outlierFactorTipText());
      assertTrue(interquartileRange0.getOutputOffsetMultiplier());
      assertEquals("The factor for determining the thresholds for extreme values.", interquartileRange0.extremeValuesFactorTipText());
      assertEquals("Turns on output of debugging information.", interquartileRange0.debugTipText());
      assertEquals("Whether to tag extreme values also as outliers.", interquartileRange0.extremeValuesAsOutliersTipText());
      assertFalse(interquartileRange0.isFirstBatchDone());
      assertEquals(6.0, interquartileRange0.getExtremeValuesFactor(), 0.01);
      assertFalse(interquartileRange0.isOutputFormatDefined());
      assertEquals("Generates Outlier/ExtremeValue attribute pair for each numeric attribute, not just a single pair for all numeric attributes together.", interquartileRange0.detectionPerAttributeTipText());
      assertTrue(interquartileRange0.getDetectionPerAttribute());
      assertFalse(interquartileRange0.getDebug());
      assertEquals(3.0, interquartileRange0.getOutlierFactor(), 0.01);
      assertEquals("A filter for detecting outliers and extreme values based on interquartile ranges. The filter skips the class attribute.\n\nOutliers:\n  Q3 + OF*IQR < x <= Q3 + EVF*IQR\n  or\n  Q1 - EVF*IQR <= x < Q1 - OF*IQR\n\nExtreme values:\n  x > Q3 + EVF*IQR\n  or\n  x < Q1 - EVF*IQR\n\nKey:\n  Q1  = 25% quartile\n  Q3  = 75% quartile\n  IQR = Interquartile Range, difference between Q1 and Q3\n  OF  = Outlier Factor\n  EVF = Extreme Value Factor", interquartileRange0.globalInfo());
      assertTrue(interquartileRange0.getExtremeValuesAsOutliers());
      assertEquals("Specify range of attributes to act on;  this is a comma separated list of attribute indices, with \"first\" and \"last\" valid values; specify an inclusive range with \"-\", eg: \"first-3,5,6-10,last\".", interquartileRange0.attributeIndicesTipText());
      assertTrue(interquartileRange0.isNewBatch());
      assertFalse(interquartileRange0.mayRemoveInstanceAfterFirstBatchDone());
      assertEquals((-1), InterquartileRange.NON_NUMERIC);
      assertFalse(interquartileRange0.equals((Object)interquartileRange1));
      assertNotSame(interquartileRange0, interquartileRange1);
      
      String[] stringArray1 = interquartileRange0.getOptions();
      assertNotNull(stringArray1);
      assertEquals(9, stringArray1.length);
      assertEquals("Generates an additional attribute 'Offset' that contains the multiplier the value is off the median: value = median + 'multiplier' * IQR", interquartileRange0.outputOffsetMultiplierTipText());
      assertEquals("The factor for determining the thresholds for outliers.", interquartileRange0.outlierFactorTipText());
      assertTrue(interquartileRange0.getOutputOffsetMultiplier());
      assertEquals("The factor for determining the thresholds for extreme values.", interquartileRange0.extremeValuesFactorTipText());
      assertEquals("Turns on output of debugging information.", interquartileRange0.debugTipText());
      assertEquals("Whether to tag extreme values also as outliers.", interquartileRange0.extremeValuesAsOutliersTipText());
      assertFalse(interquartileRange0.isFirstBatchDone());
      assertEquals(6.0, interquartileRange0.getExtremeValuesFactor(), 0.01);
      assertFalse(interquartileRange0.isOutputFormatDefined());
      assertEquals("Generates Outlier/ExtremeValue attribute pair for each numeric attribute, not just a single pair for all numeric attributes together.", interquartileRange0.detectionPerAttributeTipText());
      assertTrue(interquartileRange0.getDetectionPerAttribute());
      assertFalse(interquartileRange0.getDebug());
      assertEquals(3.0, interquartileRange0.getOutlierFactor(), 0.01);
      assertEquals("A filter for detecting outliers and extreme values based on interquartile ranges. The filter skips the class attribute.\n\nOutliers:\n  Q3 + OF*IQR < x <= Q3 + EVF*IQR\n  or\n  Q1 - EVF*IQR <= x < Q1 - OF*IQR\n\nExtreme values:\n  x > Q3 + EVF*IQR\n  or\n  x < Q1 - EVF*IQR\n\nKey:\n  Q1  = 25% quartile\n  Q3  = 75% quartile\n  IQR = Interquartile Range, difference between Q1 and Q3\n  OF  = Outlier Factor\n  EVF = Extreme Value Factor", interquartileRange0.globalInfo());
      assertTrue(interquartileRange0.getExtremeValuesAsOutliers());
      assertEquals("Specify range of attributes to act on;  this is a comma separated list of attribute indices, with \"first\" and \"last\" valid values; specify an inclusive range with \"-\", eg: \"first-3,5,6-10,last\".", interquartileRange0.attributeIndicesTipText());
      assertTrue(interquartileRange0.isNewBatch());
      assertFalse(interquartileRange0.mayRemoveInstanceAfterFirstBatchDone());
      assertEquals((-1), InterquartileRange.NON_NUMERIC);
      assertFalse(interquartileRange0.equals((Object)interquartileRange1));
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertNotSame(interquartileRange0, interquartileRange1);
      assertNotSame(stringArray1, stringArray0);
      
      interquartileRange0.setOutlierFactor(0.0);
      assertEquals("Generates an additional attribute 'Offset' that contains the multiplier the value is off the median: value = median + 'multiplier' * IQR", interquartileRange0.outputOffsetMultiplierTipText());
      assertEquals("The factor for determining the thresholds for outliers.", interquartileRange0.outlierFactorTipText());
      assertTrue(interquartileRange0.getOutputOffsetMultiplier());
      assertEquals("The factor for determining the thresholds for extreme values.", interquartileRange0.extremeValuesFactorTipText());
      assertEquals("Turns on output of debugging information.", interquartileRange0.debugTipText());
      assertEquals("Whether to tag extreme values also as outliers.", interquartileRange0.extremeValuesAsOutliersTipText());
      assertFalse(interquartileRange0.isFirstBatchDone());
      assertEquals(6.0, interquartileRange0.getExtremeValuesFactor(), 0.01);
      assertFalse(interquartileRange0.isOutputFormatDefined());
      assertEquals("Generates Outlier/ExtremeValue attribute pair for each numeric attribute, not just a single pair for all numeric attributes together.", interquartileRange0.detectionPerAttributeTipText());
      assertTrue(interquartileRange0.getDetectionPerAttribute());
      assertFalse(interquartileRange0.getDebug());
      assertEquals("A filter for detecting outliers and extreme values based on interquartile ranges. The filter skips the class attribute.\n\nOutliers:\n  Q3 + OF*IQR < x <= Q3 + EVF*IQR\n  or\n  Q1 - EVF*IQR <= x < Q1 - OF*IQR\n\nExtreme values:\n  x > Q3 + EVF*IQR\n  or\n  x < Q1 - EVF*IQR\n\nKey:\n  Q1  = 25% quartile\n  Q3  = 75% quartile\n  IQR = Interquartile Range, difference between Q1 and Q3\n  OF  = Outlier Factor\n  EVF = Extreme Value Factor", interquartileRange0.globalInfo());
      assertEquals(0.0, interquartileRange0.getOutlierFactor(), 0.01);
      assertTrue(interquartileRange0.getExtremeValuesAsOutliers());
      assertEquals("Specify range of attributes to act on;  this is a comma separated list of attribute indices, with \"first\" and \"last\" valid values; specify an inclusive range with \"-\", eg: \"first-3,5,6-10,last\".", interquartileRange0.attributeIndicesTipText());
      assertTrue(interquartileRange0.isNewBatch());
      assertFalse(interquartileRange0.mayRemoveInstanceAfterFirstBatchDone());
      assertEquals((-1), InterquartileRange.NON_NUMERIC);
      assertFalse(interquartileRange0.equals((Object)interquartileRange1));
      assertNotSame(interquartileRange0, interquartileRange1);
      
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(0);
      assertNotNull(binarySparseInstance0);
      assertEquals(0, binarySparseInstance0.numValues());
      assertEquals(1.0, binarySparseInstance0.weight(), 0.01);
      assertEquals(0, binarySparseInstance0.numAttributes());
      assertEquals(6, AbstractInstance.s_numericAfterDecimalPoint);
      
      boolean boolean0 = binarySparseInstance0.isMissing(1760);
      assertFalse(boolean0);
      assertEquals(0, binarySparseInstance0.numValues());
      assertEquals(1.0, binarySparseInstance0.weight(), 0.01);
      assertEquals(0, binarySparseInstance0.numAttributes());
      assertEquals(6, AbstractInstance.s_numericAfterDecimalPoint);
      
      BinarySparseInstance binarySparseInstance1 = (BinarySparseInstance)binarySparseInstance0.copy();
      assertNotNull(binarySparseInstance1);
      assertEquals(0, binarySparseInstance0.numValues());
      assertEquals(1.0, binarySparseInstance0.weight(), 0.01);
      assertEquals(0, binarySparseInstance0.numAttributes());
      assertEquals(0, binarySparseInstance1.numValues());
      assertEquals(0, binarySparseInstance1.numAttributes());
      assertEquals(1.0, binarySparseInstance1.weight(), 0.01);
      assertEquals(6, AbstractInstance.s_numericAfterDecimalPoint);
      assertEquals(6, AbstractInstance.s_numericAfterDecimalPoint);
      assertFalse(binarySparseInstance1.equals((Object)binarySparseInstance0));
      assertNotSame(binarySparseInstance0, binarySparseInstance1);
      assertNotSame(binarySparseInstance1, binarySparseInstance0);
      
      // Undeclared exception!
      try { 
        interquartileRange0.isOutlier(binarySparseInstance0, 6);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.filters.unsupervised.attribute.InterquartileRange", e);
      }
  }
}
