/*
 * This file was automatically generated by EvoSuite
 * Tue Oct 29 12:19:40 GMT 2019
 */

package de.outstare.fortbattleplayer.statistics;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import de.outstare.fortbattleplayer.model.Area;
import de.outstare.fortbattleplayer.model.CharacterClass;
import de.outstare.fortbattleplayer.model.Combatant;
import de.outstare.fortbattleplayer.model.CombatantSide;
import de.outstare.fortbattleplayer.model.CombatantState;
import de.outstare.fortbattleplayer.model.Sector;
import de.outstare.fortbattleplayer.model.Weapon;
import de.outstare.fortbattleplayer.model.impl.SimpleArea;
import de.outstare.fortbattleplayer.model.impl.SimpleCombatant;
import de.outstare.fortbattleplayer.model.impl.SimpleSector;
import de.outstare.fortbattleplayer.model.impl.SimpleWeapon;
import de.outstare.fortbattleplayer.statistics.AreaStatistic;
import de.outstare.fortbattleplayer.statistics.BattleStatistics;
import de.outstare.fortbattleplayer.statistics.CriticalHit;
import de.outstare.fortbattleplayer.statistics.LabeledData;
import de.outstare.fortbattleplayer.statistics.PositionSwitch;
import de.outstare.fortbattleplayer.statistics.RoundStatistics;
import de.outstare.fortbattleplayer.statistics.WeaponModCounter;
import java.awt.Point;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Set;
import java.util.concurrent.atomic.AtomicInteger;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class BattleStatistics_ESTest extends BattleStatistics_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      BattleStatistics battleStatistics0 = new BattleStatistics((-5), (-5));
      battleStatistics0.setRound(1);
      battleStatistics0.setRound(1);
      Map<CombatantSide, ? extends LabeledData> map0 = battleStatistics0.getNotShootersPerRound();
      assertEquals(2, map0.size());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      BattleStatistics battleStatistics0 = new BattleStatistics(1443, 1443);
      CharacterClass characterClass0 = CharacterClass.GREENHORN;
      SimpleSector simpleSector0 = new SimpleSector(2, false, true, 2, 1443, false, 2, characterClass0);
      SimpleArea simpleArea0 = new SimpleArea(1443, 1443, simpleSector0);
      CombatantState combatantState0 = new CombatantState(simpleArea0, 2, simpleArea0, true);
      SimpleWeapon simpleWeapon0 = new SimpleWeapon(1, "", 2181, 2686);
      CombatantSide combatantSide0 = CombatantSide.DEFENDER;
      SimpleCombatant simpleCombatant0 = new SimpleCombatant(combatantSide0, combatantState0, 2, "{", characterClass0, simpleWeapon0, "n/I~)");
      Combatant combatant0 = mock(Combatant.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(combatant0).getName();
      doReturn((Weapon) null).when(combatant0).getWeapon();
      // Undeclared exception!
      try { 
        battleStatistics0.criticalShot(combatant0, simpleCombatant0, (-866));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("de.outstare.fortbattleplayer.statistics.CriticalHit", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      BattleStatistics battleStatistics0 = new BattleStatistics(13, (-4394));
      Combatant combatant0 = mock(Combatant.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(combatant0)._health();
      doReturn((CombatantSide) null).when(combatant0).getSide();
      // Undeclared exception!
      try { 
        battleStatistics0.hasSwappedPosition(combatant0, (Combatant) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("de.outstare.fortbattleplayer.statistics.PositionSwitch", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      BattleStatistics battleStatistics0 = new BattleStatistics(13, (-4394));
      CombatantSide combatantSide0 = CombatantSide.ATTACKER;
      Sector sector0 = mock(Sector.class, new ViolatedAssumptionAnswer());
      SimpleArea simpleArea0 = new SimpleArea((Point) null, sector0);
      Combatant combatant0 = mock(Combatant.class, new ViolatedAssumptionAnswer());
      doReturn(combatantSide0).when(combatant0).getSide();
      CharacterClass characterClass0 = CharacterClass.SOLDIER;
      CombatantState combatantState0 = new CombatantState(simpleArea0, 2, simpleArea0, true);
      SimpleCombatant simpleCombatant0 = new SimpleCombatant(combatantSide0, combatantState0, 0, "8UOl#cJr", characterClass0, (Weapon) null, " shoots at ");
      battleStatistics0.aimsAt(combatant0, simpleCombatant0);
      assertEquals(CharacterClass.SOLDIER, simpleCombatant0.getCharacterClass());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      BattleStatistics battleStatistics0 = new BattleStatistics(0, 0);
      CombatantSide combatantSide0 = CombatantSide.ATTACKER;
      double double0 = battleStatistics0.numberOfMovesPerPlayer(combatantSide0);
      assertEquals(Double.NaN, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      BattleStatistics battleStatistics0 = new BattleStatistics((-2586), (-2586));
      HashMap<CombatantSide, AtomicInteger> hashMap0 = new HashMap<CombatantSide, AtomicInteger>();
      HashMap<CombatantSide, RoundStatistics> hashMap1 = new HashMap<CombatantSide, RoundStatistics>(0);
      battleStatistics0.addAndResetRoundCounter(hashMap0, hashMap1);
      assertTrue(hashMap1.isEmpty());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      BattleStatistics battleStatistics0 = new BattleStatistics(5084, 0);
      Combatant combatant0 = mock(Combatant.class, new ViolatedAssumptionAnswer());
      battleStatistics0.isDead(combatant0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      CombatantSide combatantSide0 = CombatantSide.ATTACKER;
      BattleStatistics battleStatistics0 = new BattleStatistics(3560, (-1556));
      Combatant combatant0 = mock(Combatant.class, new ViolatedAssumptionAnswer());
      doReturn((Area) null).when(combatant0)._getLocation();
      doReturn(combatantSide0).when(combatant0).getSide();
      battleStatistics0.isHit(combatant0, 457, 1237);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      BattleStatistics battleStatistics0 = new BattleStatistics(1759, 17);
      CombatantSide combatantSide0 = CombatantSide.DEFENDER;
      Combatant combatant0 = mock(Combatant.class, new ViolatedAssumptionAnswer());
      doReturn(4645, (-1423)).when(combatant0)._health();
      doReturn(combatantSide0, combatantSide0, combatantSide0).when(combatant0).getSide();
      battleStatistics0.hasSwappedPosition(combatant0, combatant0);
      Set<PositionSwitch> set0 = battleStatistics0.switchedPosList(combatantSide0);
      assertFalse(set0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      BattleStatistics battleStatistics0 = new BattleStatistics((-2140), (-2140));
      int int0 = battleStatistics0.round(0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      BattleStatistics battleStatistics0 = new BattleStatistics((-4942), 0);
      int int0 = battleStatistics0.round(222.0);
      assertEquals(222, int0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      BattleStatistics battleStatistics0 = new BattleStatistics((-2586), (-2586));
      int int0 = battleStatistics0.round((-2586));
      assertEquals((-2586), int0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      BattleStatistics battleStatistics0 = new BattleStatistics((-1), (-1));
      Sector sector0 = mock(Sector.class, new ViolatedAssumptionAnswer());
      SimpleArea simpleArea0 = new SimpleArea((Point) null, sector0);
      Combatant combatant0 = mock(Combatant.class, new ViolatedAssumptionAnswer());
      doReturn((CombatantSide) null).when(combatant0).getSide();
      battleStatistics0.hasMoved(combatant0, simpleArea0);
      CombatantSide combatantSide0 = CombatantSide.DEFENDER;
      double double0 = battleStatistics0.numberOfMovesPerPlayer(combatantSide0);
      assertEquals((-1.0), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      BattleStatistics battleStatistics0 = new BattleStatistics(1443, 1443);
      CharacterClass characterClass0 = CharacterClass.GREENHORN;
      SimpleSector simpleSector0 = new SimpleSector((-1089), false, true, (-1089), 1443, false, (-1089), characterClass0);
      SimpleArea simpleArea0 = new SimpleArea(1443, 1443, simpleSector0);
      CombatantState combatantState0 = new CombatantState(simpleArea0, (-1089), simpleArea0, false);
      SimpleWeapon simpleWeapon0 = new SimpleWeapon(1, "", 2181, 2686);
      CombatantSide combatantSide0 = CombatantSide.DEFENDER;
      SimpleCombatant simpleCombatant0 = new SimpleCombatant(combatantSide0, combatantState0, 16716049, "\"", characterClass0, simpleWeapon0, "");
      battleStatistics0.criticalShot(simpleCombatant0, simpleCombatant0, (-1));
      Map<Area, AreaStatistic> map0 = battleStatistics0.getFieldStatistics();
      assertEquals(1, map0.size());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      BattleStatistics battleStatistics0 = new BattleStatistics(2, 2);
      CombatantSide combatantSide0 = CombatantSide.ATTACKER;
      WeaponModCounter.HipFlaskCounter weaponModCounter_HipFlaskCounter0 = new WeaponModCounter.HipFlaskCounter();
      int int0 = battleStatistics0.countWeaponMods(combatantSide0, weaponModCounter_HipFlaskCounter0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      BattleStatistics battleStatistics0 = new BattleStatistics((-12), (-2869));
      int int0 = battleStatistics0.combatantLifetime((Combatant) null);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      BattleStatistics battleStatistics0 = new BattleStatistics(1, 1);
      CombatantSide combatantSide0 = CombatantSide.DEFENDER;
      Point point0 = new Point();
      CharacterClass characterClass0 = CharacterClass.DUELANT;
      SimpleSector simpleSector0 = new SimpleSector((-1048), true, true, 843, 296, true, 0, characterClass0);
      SimpleArea simpleArea0 = new SimpleArea(point0, simpleSector0);
      CombatantState combatantState0 = new CombatantState(simpleArea0, (-1048), simpleArea0, false);
      SimpleWeapon simpleWeapon0 = new SimpleWeapon(0, "92PO4D1oe|", 0, 478);
      SimpleCombatant simpleCombatant0 = new SimpleCombatant(combatantSide0, combatantState0, 0, "92PO4D1oe|", characterClass0, simpleWeapon0, "92PO4D1oe|");
      battleStatistics0.isOnline(simpleCombatant0, false);
      int int0 = battleStatistics0.amountOfAttackBonus(combatantSide0);
      assertEquals(843, int0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      BattleStatistics battleStatistics0 = new BattleStatistics(1, 1);
      Point point0 = new Point();
      CharacterClass characterClass0 = CharacterClass.WORKER;
      SimpleSector simpleSector0 = new SimpleSector(0, true, true, 3044, 1, false, (-393), characterClass0);
      SimpleArea simpleArea0 = new SimpleArea(point0, simpleSector0);
      CombatantState combatantState0 = new CombatantState(simpleArea0, 0, simpleArea0, true);
      SimpleWeapon simpleWeapon0 = new SimpleWeapon(2924, "92!PO4D1\"oe|", 0, 2924);
      CombatantSide combatantSide0 = CombatantSide.DEFENDER;
      SimpleCombatant simpleCombatant0 = new SimpleCombatant(combatantSide0, combatantState0, 479, "92!PO4D1\"oe|", characterClass0, simpleWeapon0, "");
      battleStatistics0.isOnline(simpleCombatant0, true);
      int int0 = battleStatistics0.numberOfShinyOil(combatantSide0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      BattleStatistics battleStatistics0 = new BattleStatistics(1443, 1443);
      CharacterClass characterClass0 = CharacterClass.GREENHORN;
      SimpleSector simpleSector0 = new SimpleSector(2, false, true, 2, 1443, false, 2, characterClass0);
      SimpleArea simpleArea0 = new SimpleArea(1443, 1443, simpleSector0);
      CombatantState combatantState0 = new CombatantState(simpleArea0, 2, simpleArea0, true);
      SimpleWeapon simpleWeapon0 = new SimpleWeapon(2, "", 2181, 2686);
      CombatantSide combatantSide0 = CombatantSide.DEFENDER;
      SimpleCombatant simpleCombatant0 = new SimpleCombatant(combatantSide0, combatantState0, 16716049, "", characterClass0, simpleWeapon0, "");
      battleStatistics0.isOnline(simpleCombatant0, true);
      int int0 = battleStatistics0.numberOfLoadingChamerOrEnhancedPatrons(combatantSide0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      BattleStatistics battleStatistics0 = new BattleStatistics(1, 1);
      CombatantSide combatantSide0 = CombatantSide.ATTACKER;
      Point point0 = new Point();
      CharacterClass characterClass0 = CharacterClass.DUELANT;
      SimpleSector simpleSector0 = new SimpleSector((-1048), true, true, 3044, 296, false, (-393), characterClass0);
      SimpleArea simpleArea0 = new SimpleArea(point0, simpleSector0);
      CombatantState combatantState0 = new CombatantState(simpleArea0, (-1048), simpleArea0, false);
      SimpleWeapon simpleWeapon0 = new SimpleWeapon(0, "92!PO4D1\"oe|", 0, 476);
      SimpleCombatant simpleCombatant0 = new SimpleCombatant(combatantSide0, combatantState0, (-2589), "92!PO4D1\"oe|", characterClass0, simpleWeapon0, "92!PO4D1\"oe|");
      battleStatistics0.isOnline(simpleCombatant0, false);
      int int0 = battleStatistics0.numberOfHipFlasks(combatantSide0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      BattleStatistics battleStatistics0 = new BattleStatistics(1443, 1443);
      CharacterClass characterClass0 = CharacterClass.GREENHORN;
      SimpleSector simpleSector0 = new SimpleSector(2, false, true, 2, 1443, false, 2, characterClass0);
      SimpleArea simpleArea0 = new SimpleArea(1443, 1443, simpleSector0);
      CombatantState combatantState0 = new CombatantState(simpleArea0, 2, simpleArea0, true);
      SimpleWeapon simpleWeapon0 = new SimpleWeapon(1, "", 2181, 2686);
      CombatantSide combatantSide0 = CombatantSide.DEFENDER;
      SimpleCombatant simpleCombatant0 = new SimpleCombatant(combatantSide0, combatantState0, 16716049, "", characterClass0, simpleWeapon0, "");
      battleStatistics0.isOnline(simpleCombatant0, true);
      int int0 = battleStatistics0.numberOfFettesOil(combatantSide0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      BattleStatistics battleStatistics0 = new BattleStatistics((-1), (-1));
      // Undeclared exception!
      try { 
        battleStatistics0.isOnline((Combatant) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("de.outstare.fortbattleplayer.statistics.BattleStatistics", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      BattleStatistics battleStatistics0 = new BattleStatistics(1231, 1231);
      Sector sector0 = mock(Sector.class, new ViolatedAssumptionAnswer());
      SimpleArea simpleArea0 = new SimpleArea((Point) null, sector0);
      // Undeclared exception!
      try { 
        battleStatistics0.hasMoved((Combatant) null, simpleArea0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("de.outstare.fortbattleplayer.statistics.AllCombatantSidesCounter", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      BattleStatistics battleStatistics0 = new BattleStatistics(6, 6);
      // Undeclared exception!
      try { 
        battleStatistics0.aimsAt((Combatant) null, (Combatant) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("de.outstare.fortbattleplayer.statistics.BattleStatistics", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      BattleStatistics battleStatistics0 = new BattleStatistics(103, 103);
      HashMap<CombatantSide, RoundStatistics> hashMap0 = new HashMap<CombatantSide, RoundStatistics>();
      // Undeclared exception!
      try { 
        battleStatistics0.addAndResetRoundCounter((Map<CombatantSide, AtomicInteger>) null, hashMap0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("de.outstare.fortbattleplayer.statistics.BattleStatistics", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      BattleStatistics battleStatistics0 = new BattleStatistics(0, 0);
      CombatantSide combatantSide0 = CombatantSide.ATTACKER;
      List<CriticalHit> list0 = battleStatistics0.critList(combatantSide0);
      assertEquals(0, list0.size());
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      BattleStatistics battleStatistics0 = new BattleStatistics((-3167), 0);
      CombatantSide combatantSide0 = CombatantSide.DEFENDER;
      List<Combatant> list0 = battleStatistics0.turnOrder(combatantSide0);
      assertTrue(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      BattleStatistics battleStatistics0 = new BattleStatistics((-4140), (-4140));
      long long0 = battleStatistics0.criticalHitDamage((CombatantSide) null);
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      BattleStatistics battleStatistics0 = new BattleStatistics((-4942), 0);
      CombatantSide combatantSide0 = CombatantSide.DEFENDER;
      Set<PositionSwitch> set0 = battleStatistics0.switchedPosList(combatantSide0);
      assertEquals(0, set0.size());
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      BattleStatistics battleStatistics0 = new BattleStatistics(1757, 17);
      Combatant combatant0 = mock(Combatant.class, new ViolatedAssumptionAnswer());
      doReturn(0, 0).when(combatant0)._health();
      doReturn((CombatantSide) null, (CombatantSide) null).when(combatant0).getSide();
      // Undeclared exception!
      try { 
        battleStatistics0.hasSwappedPosition(combatant0, combatant0);
        fail("Expecting exception: AssertionError");
      
      } catch(AssertionError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      BattleStatistics battleStatistics0 = new BattleStatistics(1759, 17);
      CombatantSide combatantSide0 = CombatantSide.DEFENDER;
      Combatant combatant0 = mock(Combatant.class, new ViolatedAssumptionAnswer());
      doReturn(4645, (-1399)).when(combatant0)._health();
      doReturn(combatantSide0, combatantSide0, combatantSide0).when(combatant0).getSide();
      battleStatistics0.hasSwappedPosition(combatant0, combatant0);
      int int0 = battleStatistics0.totalSwaps(combatantSide0);
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      BattleStatistics battleStatistics0 = new BattleStatistics(1432, 1432);
      CharacterClass characterClass0 = CharacterClass.GREENHORN;
      SimpleSector simpleSector0 = new SimpleSector(2, false, true, 2, 1432, false, 2, characterClass0);
      SimpleArea simpleArea0 = new SimpleArea(1432, 1432, simpleSector0);
      CombatantState combatantState0 = new CombatantState(simpleArea0, 2, simpleArea0, false);
      SimpleWeapon simpleWeapon0 = new SimpleWeapon(1, "", 2181, 2686);
      CombatantSide combatantSide0 = CombatantSide.DEFENDER;
      SimpleCombatant simpleCombatant0 = new SimpleCombatant(combatantSide0, combatantState0, 16716049, "\"", characterClass0, simpleWeapon0, "");
      battleStatistics0.isOnline(simpleCombatant0, true);
      CombatantSide combatantSide1 = CombatantSide.ATTACKER;
      int int0 = battleStatistics0.numberOfFettesOil(combatantSide1);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      BattleStatistics battleStatistics0 = new BattleStatistics(1, 1);
      CombatantSide combatantSide0 = CombatantSide.ATTACKER;
      Point point0 = new Point();
      CharacterClass characterClass0 = CharacterClass.DUELANT;
      SimpleSector simpleSector0 = new SimpleSector((-1048), true, true, 3044, 296, false, (-393), characterClass0);
      SimpleArea simpleArea0 = new SimpleArea(point0, simpleSector0);
      CombatantState combatantState0 = new CombatantState(simpleArea0, (-1048), simpleArea0, false);
      SimpleWeapon simpleWeapon0 = new SimpleWeapon(0, "92!PO4D1\"oe|", 0, 476);
      SimpleCombatant simpleCombatant0 = new SimpleCombatant(combatantSide0, combatantState0, (-2569), "92!PO4D1\"oe|", characterClass0, simpleWeapon0, "92!PO4D1\"oe|");
      battleStatistics0.isOnline(simpleCombatant0, false);
      int int0 = battleStatistics0.numberOfGraphitLubricants(combatantSide0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      BattleStatistics battleStatistics0 = new BattleStatistics(5084, 5084);
      Sector sector0 = mock(Sector.class, new ViolatedAssumptionAnswer());
      SimpleArea simpleArea0 = new SimpleArea((Point) null, sector0);
      CombatantSide combatantSide0 = CombatantSide.DEFENDER;
      Combatant combatant0 = mock(Combatant.class, new ViolatedAssumptionAnswer());
      doReturn(simpleArea0).when(combatant0)._getLocation();
      doReturn(combatantSide0, combatantSide0).when(combatant0).getSide();
      battleStatistics0.aimsAt(combatant0, combatant0);
      CombatantSide combatantSide1 = CombatantSide.ATTACKER;
      String string0 = battleStatistics0.targetNoOne(combatantSide1);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      BattleStatistics battleStatistics0 = new BattleStatistics(5084, 5084);
      Sector sector0 = mock(Sector.class, new ViolatedAssumptionAnswer());
      SimpleArea simpleArea0 = new SimpleArea((Point) null, sector0);
      CombatantSide combatantSide0 = CombatantSide.DEFENDER;
      Combatant combatant0 = mock(Combatant.class, new ViolatedAssumptionAnswer());
      doReturn(simpleArea0).when(combatant0)._getLocation();
      doReturn((String) null).when(combatant0).getName();
      doReturn(combatantSide0, combatantSide0).when(combatant0).getSide();
      battleStatistics0.aimsAt(combatant0, combatant0);
      String string0 = battleStatistics0.targetNoOne(combatantSide0);
      assertEquals("null(1)", string0);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      BattleStatistics battleStatistics0 = new BattleStatistics(1, 1);
      CombatantSide combatantSide0 = CombatantSide.ATTACKER;
      Point point0 = new Point();
      CharacterClass characterClass0 = CharacterClass.DUELANT;
      SimpleSector simpleSector0 = new SimpleSector((-1048), true, true, 3044, 296, false, (-393), characterClass0);
      SimpleArea simpleArea0 = new SimpleArea(point0, simpleSector0);
      CombatantState combatantState0 = new CombatantState(simpleArea0, (-1048), simpleArea0, false);
      SimpleWeapon simpleWeapon0 = new SimpleWeapon(0, "92!PO4D1\"oe|", 0, 476);
      SimpleCombatant simpleCombatant0 = new SimpleCombatant(combatantSide0, combatantState0, (-2589), "92!PO4D1\"oe|", characterClass0, simpleWeapon0, "92!PO4D1\"oe|");
      battleStatistics0.isOnline(simpleCombatant0, false);
      battleStatistics0.isOnline(simpleCombatant0, true);
      assertEquals("92!PO4D1\"oe|", simpleCombatant0.getName());
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      BattleStatistics battleStatistics0 = new BattleStatistics(1443, 1443);
      CharacterClass characterClass0 = CharacterClass.GREENHORN;
      SimpleSector simpleSector0 = new SimpleSector(2, false, false, 2, 1443, false, 2, characterClass0);
      SimpleArea simpleArea0 = new SimpleArea(1443, 1443, simpleSector0);
      CombatantState combatantState0 = new CombatantState(simpleArea0, 2, simpleArea0, false);
      SimpleWeapon simpleWeapon0 = new SimpleWeapon(2, "", 2168, 2686);
      CombatantSide combatantSide0 = CombatantSide.DEFENDER;
      SimpleCombatant simpleCombatant0 = new SimpleCombatant(combatantSide0, combatantState0, 16716049, "", characterClass0, simpleWeapon0, "");
      battleStatistics0.isOnline(simpleCombatant0, true);
      double double0 = battleStatistics0.averageRoundsOnline(combatantSide0);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      BattleStatistics battleStatistics0 = new BattleStatistics(1443, 1443);
      CharacterClass characterClass0 = CharacterClass.GREENHORN;
      SimpleSector simpleSector0 = new SimpleSector(2, false, true, 2, 1443, false, 2, characterClass0);
      SimpleArea simpleArea0 = new SimpleArea(1443, 1443, simpleSector0);
      CombatantState combatantState0 = new CombatantState(simpleArea0, 2, simpleArea0, true);
      SimpleWeapon simpleWeapon0 = new SimpleWeapon(2, "", 2181, 2686);
      CombatantSide combatantSide0 = CombatantSide.DEFENDER;
      SimpleCombatant simpleCombatant0 = new SimpleCombatant(combatantSide0, combatantState0, 16716049, "", characterClass0, simpleWeapon0, "");
      battleStatistics0.isOnline(simpleCombatant0, true);
      double double0 = battleStatistics0.averageRoundsOnline(combatantSide0);
      assertEquals(1.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      BattleStatistics battleStatistics0 = new BattleStatistics(1, 1);
      CombatantSide combatantSide0 = CombatantSide.ATTACKER;
      Point point0 = new Point();
      CharacterClass characterClass0 = CharacterClass.DUELANT;
      SimpleSector simpleSector0 = new SimpleSector((-1048), true, true, 3044, 296, false, (-393), characterClass0);
      SimpleArea simpleArea0 = new SimpleArea(point0, simpleSector0);
      CombatantState combatantState0 = new CombatantState(simpleArea0, (-1048), simpleArea0, false);
      SimpleWeapon simpleWeapon0 = new SimpleWeapon(0, "92!PO4D1\"oe|", 0, 476);
      SimpleCombatant simpleCombatant0 = new SimpleCombatant(combatantSide0, combatantState0, (-2589), "92!PO4D1\"oe|", characterClass0, simpleWeapon0, "92!PO4D1\"oe|");
      battleStatistics0.isOnline(simpleCombatant0, false);
      double double0 = battleStatistics0.roundsTillOnline(combatantSide0);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      BattleStatistics battleStatistics0 = new BattleStatistics(1443, 1443);
      CharacterClass characterClass0 = CharacterClass.GREENHORN;
      SimpleSector simpleSector0 = new SimpleSector(2, false, true, 2, 1443, false, 2, characterClass0);
      SimpleArea simpleArea0 = new SimpleArea(1443, 1443, simpleSector0);
      CombatantState combatantState0 = new CombatantState(simpleArea0, 2, simpleArea0, true);
      SimpleWeapon simpleWeapon0 = new SimpleWeapon(1, "", 2181, 2686);
      CombatantSide combatantSide0 = CombatantSide.DEFENDER;
      SimpleCombatant simpleCombatant0 = new SimpleCombatant(combatantSide0, combatantState0, (-445), "", characterClass0, simpleWeapon0, "5zIJ>");
      battleStatistics0.isOnline(simpleCombatant0, true);
      CombatantSide combatantSide1 = CombatantSide.ATTACKER;
      double double0 = battleStatistics0.roundsTillOnline(combatantSide1);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      BattleStatistics battleStatistics0 = new BattleStatistics(1443, 1443);
      CharacterClass characterClass0 = CharacterClass.GREENHORN;
      SimpleSector simpleSector0 = new SimpleSector(2, false, true, 2, 1443, false, 2, characterClass0);
      SimpleArea simpleArea0 = new SimpleArea(1443, 1443, simpleSector0);
      CombatantState combatantState0 = new CombatantState(simpleArea0, 2, simpleArea0, true);
      SimpleWeapon simpleWeapon0 = new SimpleWeapon(1, "", 2181, 2686);
      CombatantSide combatantSide0 = CombatantSide.DEFENDER;
      SimpleCombatant simpleCombatant0 = new SimpleCombatant(combatantSide0, combatantState0, (-445), "", characterClass0, simpleWeapon0, "5zIJ>");
      battleStatistics0.isOnline(simpleCombatant0, true);
      double double0 = battleStatistics0.roundsTillOnline(combatantSide0);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      BattleStatistics battleStatistics0 = new BattleStatistics(1, 1);
      CombatantSide combatantSide0 = CombatantSide.ATTACKER;
      Point point0 = new Point();
      CharacterClass characterClass0 = CharacterClass.DUELANT;
      SimpleSector simpleSector0 = new SimpleSector((-1048), true, true, 843, 296, true, (-1166), characterClass0);
      SimpleArea simpleArea0 = new SimpleArea(point0, simpleSector0);
      CombatantState combatantState0 = new CombatantState(simpleArea0, (-1048), simpleArea0, true);
      SimpleWeapon simpleWeapon0 = new SimpleWeapon(0, "92PO4D1oe|", 0, 478);
      SimpleCombatant simpleCombatant0 = new SimpleCombatant(combatantSide0, combatantState0, 0, "92PO4D1oe|", characterClass0, simpleWeapon0, "92PO4D1oe|");
      battleStatistics0.isOnline(simpleCombatant0, false);
      int int0 = battleStatistics0.numberOfOffliners(combatantSide0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      BattleStatistics battleStatistics0 = new BattleStatistics(1, 1);
      CombatantSide combatantSide0 = CombatantSide.ATTACKER;
      Point point0 = new Point();
      CharacterClass characterClass0 = CharacterClass.DUELANT;
      SimpleSector simpleSector0 = new SimpleSector((-1048), true, true, 3044, 296, false, (-393), characterClass0);
      SimpleArea simpleArea0 = new SimpleArea(point0, simpleSector0);
      CombatantState combatantState0 = new CombatantState(simpleArea0, (-1048), simpleArea0, false);
      SimpleWeapon simpleWeapon0 = new SimpleWeapon(0, "92!PO4D1\"oe|", 0, 476);
      SimpleCombatant simpleCombatant0 = new SimpleCombatant(combatantSide0, combatantState0, (-2589), "92!PO4D1\"oe|", characterClass0, simpleWeapon0, "92!PO4D1\"oe|");
      battleStatistics0.isOnline(simpleCombatant0, false);
      CombatantSide combatantSide1 = CombatantSide.DEFENDER;
      int int0 = battleStatistics0.numberOfOffliners(combatantSide1);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      BattleStatistics battleStatistics0 = new BattleStatistics(1, 1);
      CombatantSide combatantSide0 = CombatantSide.DEFENDER;
      Point point0 = new Point();
      CharacterClass characterClass0 = CharacterClass.DUELANT;
      SimpleSector simpleSector0 = new SimpleSector((-1048), true, true, 843, 296, true, 0, characterClass0);
      SimpleArea simpleArea0 = new SimpleArea(point0, simpleSector0);
      CombatantState combatantState0 = new CombatantState(simpleArea0, (-1048), simpleArea0, false);
      SimpleWeapon simpleWeapon0 = new SimpleWeapon(0, "92PO4D1oe|", 0, 478);
      SimpleCombatant simpleCombatant0 = new SimpleCombatant(combatantSide0, combatantState0, 0, "92PO4D1oe|", characterClass0, simpleWeapon0, "92PO4D1oe|");
      battleStatistics0.isOnline(simpleCombatant0, false);
      int int0 = battleStatistics0.numberOfOffliners(combatantSide0);
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      BattleStatistics battleStatistics0 = new BattleStatistics(0, 0);
      CombatantSide combatantSide0 = CombatantSide.DEFENDER;
      double double0 = battleStatistics0.numberOfMovesPerPlayer(combatantSide0);
      assertEquals(Double.NaN, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      BattleStatistics battleStatistics0 = new BattleStatistics(5084, 0);
      CombatantSide combatantSide0 = CombatantSide.ATTACKER;
      double double0 = battleStatistics0.numberOfMovesPerPlayer(combatantSide0);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      BattleStatistics battleStatistics0 = new BattleStatistics(5084, 0);
      Sector sector0 = mock(Sector.class, new ViolatedAssumptionAnswer());
      SimpleArea simpleArea0 = new SimpleArea((Point) null, sector0);
      CombatantSide combatantSide0 = CombatantSide.DEFENDER;
      CombatantSide combatantSide1 = CombatantSide.ATTACKER;
      Combatant combatant0 = mock(Combatant.class, new ViolatedAssumptionAnswer());
      doReturn(simpleArea0).when(combatant0)._getLocation();
      doReturn(combatantSide0, combatantSide1).when(combatant0).getSide();
      battleStatistics0.aimsAt(combatant0, combatant0);
      int int0 = battleStatistics0.percentAbleToShoot(combatantSide0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      BattleStatistics battleStatistics0 = new BattleStatistics(1231, 1231);
      battleStatistics0.setRound(1231);
      battleStatistics0.setRound(1231);
      battleStatistics0.setRound(1231);
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      BattleStatistics battleStatistics0 = new BattleStatistics(1, 1);
      Map<CombatantSide, ? extends LabeledData> map0 = battleStatistics0.getShotsPerRound();
      assertEquals(2, map0.size());
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      BattleStatistics battleStatistics0 = new BattleStatistics((-4942), 0);
      CombatantSide combatantSide0 = CombatantSide.DEFENDER;
      int int0 = battleStatistics0.amountOfDefenseBonus(combatantSide0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      BattleStatistics battleStatistics0 = new BattleStatistics(5084, 5084);
      Sector sector0 = mock(Sector.class, new ViolatedAssumptionAnswer());
      SimpleArea simpleArea0 = new SimpleArea((Point) null, sector0);
      CombatantSide combatantSide0 = CombatantSide.DEFENDER;
      Combatant combatant0 = mock(Combatant.class, new ViolatedAssumptionAnswer());
      doReturn(simpleArea0).when(combatant0)._getLocation();
      doReturn(combatantSide0, combatantSide0).when(combatant0).getSide();
      battleStatistics0.aimsAt(combatant0, combatant0);
      int int0 = battleStatistics0.percentAbleToShoot(combatantSide0);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      BattleStatistics battleStatistics0 = new BattleStatistics((-4942), 0);
      CombatantSide combatantSide0 = CombatantSide.DEFENDER;
      int int0 = battleStatistics0.criticalHits(combatantSide0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      BattleStatistics battleStatistics0 = new BattleStatistics(1221, 1221);
      Map<CombatantSide, ? extends LabeledData> map0 = battleStatistics0.getHitsPerRound();
      assertEquals(2, map0.size());
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      BattleStatistics battleStatistics0 = new BattleStatistics(1774, 17);
      battleStatistics0.isAlive((Combatant) null);
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      BattleStatistics battleStatistics0 = new BattleStatistics(1, 1);
      CombatantSide combatantSide0 = CombatantSide.ATTACKER;
      int int0 = battleStatistics0.numberOfHipFlasks(combatantSide0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      BattleStatistics battleStatistics0 = new BattleStatistics(1231, 1231);
      CombatantSide combatantSide0 = CombatantSide.ATTACKER;
      int int0 = battleStatistics0.numberOfSchmierOil(combatantSide0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      BattleStatistics battleStatistics0 = new BattleStatistics(1, 1);
      Map<Area, AreaStatistic> map0 = battleStatistics0.getFieldStatistics();
      assertTrue(map0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      BattleStatistics battleStatistics0 = new BattleStatistics(1759, 17);
      CombatantSide combatantSide0 = CombatantSide.DEFENDER;
      int int0 = battleStatistics0.totalSwaps(combatantSide0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      BattleStatistics battleStatistics0 = new BattleStatistics(1, 1);
      CombatantSide combatantSide0 = CombatantSide.ATTACKER;
      int int0 = battleStatistics0.numberOfGraphitLubricants(combatantSide0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      BattleStatistics battleStatistics0 = new BattleStatistics(1, 1);
      CombatantSide combatantSide0 = CombatantSide.DEFENDER;
      int int0 = battleStatistics0.amountOfAttackBonus(combatantSide0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      BattleStatistics battleStatistics0 = new BattleStatistics((-4942), 0);
      CombatantSide combatantSide0 = CombatantSide.DEFENDER;
      int int0 = battleStatistics0.numberOfLoadingChamerOrEnhancedPatrons(combatantSide0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      BattleStatistics battleStatistics0 = new BattleStatistics((-4942), 0);
      CombatantSide combatantSide0 = CombatantSide.DEFENDER;
      int int0 = battleStatistics0.numberOfShinyOil(combatantSide0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      BattleStatistics battleStatistics0 = new BattleStatistics(6, 6);
      // Undeclared exception!
      try { 
        battleStatistics0.isHit((Combatant) null, 6, (-1));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("de.outstare.fortbattleplayer.statistics.BattleStatistics", e);
      }
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      BattleStatistics battleStatistics0 = new BattleStatistics(1, 1);
      CombatantSide combatantSide0 = CombatantSide.DEFENDER;
      Point point0 = new Point();
      CharacterClass characterClass0 = CharacterClass.DUELANT;
      SimpleSector simpleSector0 = new SimpleSector((-1048), true, true, 843, 296, true, 0, characterClass0);
      SimpleArea simpleArea0 = new SimpleArea(point0, simpleSector0);
      CombatantState combatantState0 = new CombatantState(simpleArea0, (-1048), simpleArea0, false);
      SimpleWeapon simpleWeapon0 = new SimpleWeapon(0, "92PO4D1oe|", 0, 478);
      SimpleCombatant simpleCombatant0 = new SimpleCombatant(combatantSide0, combatantState0, 0, "92PO4D1oe|", characterClass0, simpleWeapon0, "92PO4D1oe|");
      battleStatistics0.criticalShot(simpleCombatant0, simpleCombatant0, 843);
      long long0 = battleStatistics0.criticalHitDamage(combatantSide0);
      assertEquals(604L, long0);
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      BattleStatistics battleStatistics0 = new BattleStatistics(0, 1);
      CharacterClass characterClass0 = CharacterClass.GREENHORN;
      SimpleSector simpleSector0 = new SimpleSector(5822, false, false, 0, 1, true, 0, characterClass0);
      SimpleArea simpleArea0 = new SimpleArea(954, 0, simpleSector0);
      battleStatistics0.newDestination((Combatant) null, simpleArea0);
      assertFalse(simpleArea0.isOccupied());
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      CombatantSide combatantSide0 = CombatantSide.ATTACKER;
      BattleStatistics battleStatistics0 = new BattleStatistics((-9), (-9));
      int int0 = battleStatistics0.numberOfBayonets(combatantSide0);
      assertEquals(0, int0);
  }
}
