[MASTER] 03:46:31.636 [logback-2] ERROR TestCluster - Failed to check cache for org.sat4j.core.ReadOnlyVec<T> : Type points to itself
[MASTER] 03:46:31.636 [logback-2] ERROR TestCluster - Failed to check cache for org.sat4j.core.Vec<T> : Type points to itself
[MASTER] 03:47:06.281 [logback-2] ERROR AbstractStatement - Error assigning value of type Vec[] defined at statement Vec<String>[] vecArray0 = (Vec<String>[]) Array.newInstance(Vec.class, 5), assignment statement: vecArray0[0] = (Vec<String>) vecArray0; SUT=org.sat4j.core.Vec
[MASTER] 03:47:06.453 [logback-2] ERROR TestCluster - Failed to check cache for java.util.Comparator<T> : Type points to itself
[MASTER] 03:47:09.023 [logback-2] ERROR AbstractStatement - Error assigning value of type Comparable[] defined at statement Comparable<Object>[] comparableArray0 = (Comparable<Object>[]) Array.newInstance(Comparable.class, 2), assignment statement: comparableArray0[0] = (Comparable<Object>) comparableArray0; SUT=org.sat4j.core.Vec
[MASTER] 03:47:11.943 [logback-2] ERROR AbstractStatement - Error assigning value of type Vec[] defined at statement Vec<String>[] vecArray0 = (Vec<String>[]) Array.newInstance(Vec.class, 5), assignment statement: vecArray0[0] = (Vec<String>) vecArray0; SUT=org.sat4j.core.Vec
[MASTER] 03:47:13.770 [logback-2] ERROR AbstractStatement - Error assigning value of type Comparable[] defined at statement Comparable<Object>[] comparableArray0 = (Comparable<Object>[]) Array.newInstance(Comparable.class, 2), assignment statement: comparableArray0[0] = (Comparable<Object>) comparableArray0; SUT=org.sat4j.core.Vec
[MASTER] 03:47:16.491 [logback-2] ERROR AbstractStatement - Error assigning value of type Comparable[] defined at statement Comparable<Object>[] comparableArray0 = (Comparable<Object>[]) Array.newInstance(Comparable.class, 1), assignment statement: comparableArray0[0] = (Comparable<Object>) comparableArray0; SUT=org.sat4j.core.Vec
[MASTER] 03:48:00.676 [logback-2] ERROR AbstractStatement - Error assigning value of type Vec[] defined at statement Vec<String>[] vecArray0 = (Vec<String>[]) Array.newInstance(Vec.class, 5), assignment statement: vecArray0[0] = (Vec<String>) vecArray0; SUT=org.sat4j.core.Vec
[MASTER] 03:48:02.679 [logback-2] ERROR AbstractStatement - Error assigning value of type Vec[] defined at statement Vec<String>[] vecArray0 = (Vec<String>[]) Array.newInstance(Vec.class, 5), assignment statement: vecArray0[0] = (Vec<String>) vecArray0; SUT=org.sat4j.core.Vec
[MASTER] 03:48:23.299 [logback-2] ERROR AbstractStatement - Error assigning value of type Comparable[] defined at statement Comparable<Object>[] comparableArray0 = (Comparable<Object>[]) Array.newInstance(Comparable.class, 4), assignment statement: comparableArray0[0] = (Comparable<Object>) comparableArray0; SUT=org.sat4j.core.Vec
[MASTER] 03:48:35.084 [logback-2] ERROR AbstractStatement - Error assigning value of type Vec[] defined at statement Vec<String>[] vecArray0 = (Vec<String>[]) Array.newInstance(Vec.class, 5), assignment statement: vecArray0[0] = (Vec<String>) vecArray0; SUT=org.sat4j.core.Vec
[MASTER] 03:48:39.235 [logback-2] ERROR AbstractStatement - Error assigning value of type Vec[] defined at statement Vec<String>[] vecArray0 = (Vec<String>[]) Array.newInstance(Vec.class, 5), assignment statement: vecArray0[0] = (Vec<String>) vecArray0; SUT=org.sat4j.core.Vec
[MASTER] 03:50:26.766 [logback-2] ERROR AbstractStatement - Error assigning value of type Vec[] defined at statement Vec<String>[] vecArray0 = (Vec<String>[]) Array.newInstance(Vec.class, 5), assignment statement: vecArray0[0] = (Vec<String>) vecArray0; SUT=org.sat4j.core.Vec
[MASTER] 03:50:42.821 [logback-2] ERROR AbstractStatement - Error assigning value of type Vec[] defined at statement Vec<String>[] vecArray0 = (Vec<String>[]) Array.newInstance(Vec.class, 5), assignment statement: vecArray0[0] = (Vec<String>) vecArray0; SUT=org.sat4j.core.Vec
[MASTER] 03:50:42.946 [logback-2] ERROR JUnitAnalyzer - Compilation failed on compilation units: [RegularFileObject[/tmp/EvoSuite_48_1550544642715/org/sat4j/core/Vec_48_tmp__ESTest.java], RegularFileObject[/tmp/EvoSuite_48_1550544642715/org/sat4j/core/Vec_48_tmp__ESTest_scaffolding.java]]
[MASTER] 03:50:42.946 [logback-2] ERROR JUnitAnalyzer - Classpath: bins/sat4j/org.ow2.sat4j.core-2.3.6-SNAPSHOT.jar:bins/sat4j/org.ow2.sat4j.core-2.3.6-SNAPSHOT-tests.jar:/home/pderakhshanfar/common-uncommon-behaviour-testing-experiment/evosuite-master-1.0.7-SNAPSHOT.jar:/home/pderakhshanfar/common-uncommon-behaviour-testing-experiment/bins/sat4j/org.ow2.sat4j.core-2.3.6-SNAPSHOT.jar:/home/pderakhshanfar/common-uncommon-behaviour-testing-experiment/bins/sat4j/org.ow2.sat4j.core-2.3.6-SNAPSHOT-tests.jar
[MASTER] 03:50:42.946 [logback-2] ERROR JUnitAnalyzer - evosuiteCP: /home/pderakhshanfar/common-uncommon-behaviour-testing-experiment/evosuite-master-1.0.7-SNAPSHOT.jar:/home/pderakhshanfar/common-uncommon-behaviour-testing-experiment/bins/sat4j/org.ow2.sat4j.core-2.3.6-SNAPSHOT.jar:/home/pderakhshanfar/common-uncommon-behaviour-testing-experiment/bins/sat4j/org.ow2.sat4j.core-2.3.6-SNAPSHOT-tests.jar
[MASTER] 03:50:42.983 [logback-2] ERROR JUnitAnalyzer - Diagnostic: incompatible types: org.sat4j.core.Vec<java.lang.String>[] cannot be converted to org.sat4j.core.Vec<java.lang.String>: 85
[MASTER] 03:50:42.983 [logback-2] ERROR JUnitAnalyzer - Diagnostic: /tmp/EvoSuite_48_1550544642715/org/sat4j/core/Vec_48_tmp__ESTest.java uses unchecked or unsafe operations.: -1
[MASTER] 03:50:42.983 [logback-2] ERROR JUnitAnalyzer - Diagnostic: Recompile with -Xlint:unchecked for details.: -1
[MASTER] 03:50:42.996 [logback-2] ERROR JUnitAnalyzer - RegularFileObject[/tmp/EvoSuite_48_1550544642715/org/sat4j/core/Vec_48_tmp__ESTest.java]
1: /*
2:  * This file was automatically generated by EvoSuite
3:  * Tue Feb 19 02:50:42 GMT 2019
4:  */
5: 
6: package org.sat4j.core;
7: 
8: import org.junit.Test;
9: import static org.junit.Assert.*;
10: import static org.evosuite.runtime.EvoAssertions.*;
11: import java.lang.reflect.Array;
12: import java.util.Iterator;
13: import org.evosuite.runtime.EvoRunner;
14: import org.evosuite.runtime.EvoRunnerParameters;
15: import org.junit.runner.RunWith;
16: import org.sat4j.core.ReadOnlyVec;
17: import org.sat4j.core.Vec;
18: import org.sat4j.specs.IVec;
19: 
20: @RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, useJEE = true) 
21: public class Vec_48_tmp__ESTest extends Vec_48_tmp__ESTest_scaffolding {
22: 
23:   @Test(timeout = 4000)
24:   public void test0()  throws Throwable  {
25:       int int0 = 0;
26:       Vec<ReadOnlyVec<Object>> vec0 = new Vec<ReadOnlyVec<Object>>(0);
27:       assertEquals(0, vec0.size());
28:       assertTrue(vec0.isEmpty());
29:       assertNotNull(vec0);
30:       
31:       int int1 = 1487;
32:       vec0.copyTo((IVec<ReadOnlyVec<Object>>) vec0);
33:       assertEquals(0, vec0.size());
34:       assertTrue(vec0.isEmpty());
35:       
36:       Vec<Object> vec1 = new Vec<Object>(1487, vec0);
37:       assertEquals(0, vec0.size());
38:       assertTrue(vec0.isEmpty());
39:       assertFalse(vec1.isEmpty());
40:       assertEquals(1487, vec1.size());
41:       assertNotNull(vec1);
42:       
43:       Iterator<Object> iterator0 = vec1.iterator();
44:       assertEquals(0, vec0.size());
45:       assertTrue(vec0.isEmpty());
46:       assertFalse(vec1.isEmpty());
47:       assertEquals(1487, vec1.size());
48:       assertNotNull(iterator0);
49:       
50:       String string0 = vec1.toString();
51:       assertEquals(0, vec0.size());
52:       assertTrue(vec0.isEmpty());
53:       assertFalse(vec1.isEmpty());
54:       assertEquals(1487, vec1.size());
55:       assertNotNull(string0);
56:       
57:       Vec<Object> vec2 = new Vec<Object>();
58:       assertFalse(vec2.equals((Object)vec1));
59:       assertEquals(0, vec2.size());
60:       assertTrue(vec2.isEmpty());
61:       assertNotNull(vec2);
62:       
63:       vec1.moveTo((IVec<Object>) vec2);
64:       assertFalse(vec1.equals((Object)vec2));
65:       assertFalse(vec2.equals((Object)vec1));
66:       assertEquals(0, vec0.size());
67:       assertTrue(vec0.isEmpty());
68:       assertEquals(0, vec1.size());
69:       assertTrue(vec1.isEmpty());
70:       assertFalse(vec2.isEmpty());
71:       assertEquals(1487, vec2.size());
72:       assertNotSame(vec1, vec2);
73:       assertNotSame(vec2, vec1);
74:       
75:       IVec<Object> iVec0 = vec2.clone();
76:       assertFalse(vec2.equals((Object)vec1));
77:       assertFalse(vec2.isEmpty());
78:       assertEquals(1487, vec2.size());
79:       assertEquals(1487, iVec0.size());
80:       assertFalse(iVec0.isEmpty());
81:       assertNotSame(vec2, vec1);
82:       assertNotNull(iVec0);
83:       
84:       Vec<String>[] vecArray0 = (Vec<String>[]) Array.newInstance(Vec.class, 5);
85:       vecArray0[0] = (Vec<String>) vecArray0;
86:   }
87: }
RegularFileObject[/tmp/EvoSuite_48_1550544642715/org/sat4j/core/Vec_48_tmp__ESTest.java]
1: /**
2:  * Scaffolding file used to store all the setups needed to run 
3:  * tests automatically generated by EvoSuite
4:  * Tue Feb 19 02:50:42 GMT 2019
5:  */
6: 
7: package org.sat4j.core;
8: 
9: import org.evosuite.runtime.annotation.EvoSuiteClassExclude;
10: import org.junit.BeforeClass;
11: import org.junit.Before;
12: import org.junit.After;
13: import org.junit.AfterClass;
14: import org.evosuite.runtime.sandbox.Sandbox;
15: import org.evosuite.runtime.sandbox.Sandbox.SandboxMode;
16: 
17: @EvoSuiteClassExclude
18: public class Vec_48_tmp__ESTest_scaffolding {
19: 
20:   @org.junit.Rule 
21:   public org.evosuite.runtime.vnet.NonFunctionalRequirementRule nfr = new org.evosuite.runtime.vnet.NonFunctionalRequirementRule();
22: 
23:   private static final java.util.Properties defaultProperties = (java.util.Properties) java.lang.System.getProperties().clone(); 
24: 
25:   private org.evosuite.runtime.thread.ThreadStopper threadStopper =  new org.evosuite.runtime.thread.ThreadStopper (org.evosuite.runtime.thread.KillSwitchHandler.getInstance(), 3000);
26: 
27: 
28:   @BeforeClass 
29:   public static void initEvoSuiteFramework() { 
30:     org.evosuite.runtime.RuntimeSettings.className = "org.sat4j.core.Vec"; 
31:     org.evosuite.runtime.GuiSupport.initialize(); 
32:     org.evosuite.runtime.RuntimeSettings.maxNumberOfThreads = 100; 
33:     org.evosuite.runtime.RuntimeSettings.maxNumberOfIterationsPerLoop = 10000; 
34:     org.evosuite.runtime.RuntimeSettings.mockSystemIn = true; 
35:     org.evosuite.runtime.RuntimeSettings.sandboxMode = org.evosuite.runtime.sandbox.Sandbox.SandboxMode.RECOMMENDED; 
36:     org.evosuite.runtime.sandbox.Sandbox.initializeSecurityManagerForSUT(); 
37:     org.evosuite.runtime.classhandling.JDKClassResetter.init();
38:     setSystemProperties();
39:     initializeClasses();
40:     org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
41:   } 
42: 
43:   @AfterClass 
44:   public static void clearEvoSuiteFramework(){ 
45:     Sandbox.resetDefaultSecurityManager(); 
46:     java.lang.System.setProperties((java.util.Properties) defaultProperties.clone()); 
47:   } 
48: 
49:   @Before 
50:   public void initTestCase(){ 
51:     threadStopper.storeCurrentThreads();
52:     threadStopper.startRecordingTime();
53:     org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().initHandler(); 
54:     org.evosuite.runtime.sandbox.Sandbox.goingToExecuteSUTCode(); 
55:     setSystemProperties(); 
56:     org.evosuite.runtime.GuiSupport.setHeadless(); 
57:     org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
58:     org.evosuite.runtime.agent.InstrumentingAgent.activate(); 
59:   } 
60: 
61:   @After 
62:   public void doneWithTestCase(){ 
63:     threadStopper.killAndJoinClientThreads();
64:     org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().safeExecuteAddedHooks(); 
65:     org.evosuite.runtime.classhandling.JDKClassResetter.reset(); 
66:     resetClasses(); 
67:     org.evosuite.runtime.sandbox.Sandbox.doneWithExecutingSUTCode(); 
68:     org.evosuite.runtime.agent.InstrumentingAgent.deactivate(); 
69:     org.evosuite.runtime.GuiSupport.restoreHeadlessMode(); 
70:   } 
71: 
72:   public static void setSystemProperties() {
73:  
74:     java.lang.System.setProperties((java.util.Properties) defaultProperties.clone()); 
75:     java.lang.System.setProperty("user.dir", "/home/pderakhshanfar/common-uncommon-behaviour-testing-experiment"); 
76:     java.lang.System.setProperty("java.io.tmpdir", "/tmp"); 
77:   }
78: 
79:   private static void initializeClasses() {
80:     org.evosuite.runtime.classhandling.ClassStateSupport.initializeClasses(Vec_48_tmp__ESTest_scaffolding.class.getClassLoader() ,
81:       "org.sat4j.core.Vec$1",
82:       "org.sat4j.core.Vec",
83:       "org.sat4j.specs.IVec",
84:       "org.sat4j.core.ReadOnlyVec"
85:     );
86:   } 
87: 
88:   private static void resetClasses() {
89:     org.evosuite.runtime.classhandling.ClassResetter.getInstance().setClassLoader(Vec_48_tmp__ESTest_scaffolding.class.getClassLoader()); 
90: 
91:     org.evosuite.runtime.classhandling.ClassStateSupport.resetClasses(
92:       "org.sat4j.core.Vec",
93:       "org.sat4j.core.Vec$1",
94:       "org.sat4j.core.ReadOnlyVec"
95:     );
96:   }
97: }

[MASTER] 03:50:42.997 [logback-2] ERROR JUnitAnalyzer - Failed to compile test case:
int int0 = 0;
Vec<ReadOnlyVec<Object>> vec0 = new Vec<ReadOnlyVec<Object>>(0);
assertEquals(0, vec0.size());
assertTrue(vec0.isEmpty());
assertNotNull(vec0);

int int1 = 1487;
vec0.copyTo((IVec<ReadOnlyVec<Object>>) vec0);
assertEquals(0, vec0.size());
assertTrue(vec0.isEmpty());

Vec<Object> vec1 = new Vec<Object>(1487, vec0);
assertEquals(0, vec0.size());
assertTrue(vec0.isEmpty());
assertFalse(vec1.isEmpty());
assertEquals(1487, vec1.size());
assertNotNull(vec1);

Iterator<Object> iterator0 = vec1.iterator();
assertEquals(0, vec0.size());
assertTrue(vec0.isEmpty());
assertFalse(vec1.isEmpty());
assertEquals(1487, vec1.size());
assertNotNull(iterator0);

String string0 = vec1.toString();
assertEquals(0, vec0.size());
assertTrue(vec0.isEmpty());
assertFalse(vec1.isEmpty());
assertEquals(1487, vec1.size());
assertNotNull(string0);

Vec<Object> vec2 = new Vec<Object>();
assertFalse(vec2.equals((Object)vec1));
assertEquals(0, vec2.size());
assertTrue(vec2.isEmpty());
assertNotNull(vec2);

vec1.moveTo((IVec<Object>) vec2);
assertFalse(vec1.equals((Object)vec2));
assertFalse(vec2.equals((Object)vec1));
assertEquals(0, vec0.size());
assertTrue(vec0.isEmpty());
assertEquals(0, vec1.size());
assertTrue(vec1.isEmpty());
assertFalse(vec2.isEmpty());
assertEquals(1487, vec2.size());
assertNotSame(vec1, vec2);
assertNotSame(vec2, vec1);

IVec<Object> iVec0 = vec2.clone();
assertFalse(vec2.equals((Object)vec1));
assertFalse(vec2.isEmpty());
assertEquals(1487, vec2.size());
assertEquals(1487, iVec0.size());
assertFalse(iVec0.isEmpty());
assertNotSame(vec2, vec1);
assertNotNull(iVec0);

Vec<String>[] vecArray0 = (Vec<String>[]) Array.newInstance(Vec.class, 5);
vecArray0[0] = (Vec<String>) vecArray0;

