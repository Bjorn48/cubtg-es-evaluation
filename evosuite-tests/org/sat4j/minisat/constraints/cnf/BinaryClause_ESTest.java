/*
 * This file was automatically generated by EvoSuite
 * Mon Feb 18 22:36:02 GMT 2019
 */

package org.sat4j.minisat.constraints.cnf;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.NoSuchElementException;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;
import org.sat4j.MUSLauncher;
import org.sat4j.core.ReadOnlyVec;
import org.sat4j.core.Vec;
import org.sat4j.core.VecInt;
import org.sat4j.minisat.constraints.MixedDataStructureSingleWL;
import org.sat4j.minisat.constraints.cnf.Lits;
import org.sat4j.minisat.constraints.cnf.OriginalBinaryClause;
import org.sat4j.minisat.core.ILits;
import org.sat4j.minisat.core.SearchParams;
import org.sat4j.minisat.core.Solver;
import org.sat4j.minisat.core.WatcherBasedPrimeImplicantStrategy;
import org.sat4j.minisat.learning.ActiveLearning;
import org.sat4j.minisat.learning.ClauseOnlyLearning;
import org.sat4j.minisat.learning.PercentLengthLearning;
import org.sat4j.minisat.orders.LevelBasedVarOrderHeap;
import org.sat4j.minisat.orders.PureOrder;
import org.sat4j.minisat.orders.RandomWalkDecorator;
import org.sat4j.minisat.orders.TabuListDecorator;
import org.sat4j.minisat.orders.UserFixedPhaseSelectionStrategy;
import org.sat4j.minisat.orders.VarOrderHeap;
import org.sat4j.minisat.restarts.ArminRestarts;
import org.sat4j.minisat.restarts.NoRestarts;
import org.sat4j.specs.Constr;
import org.sat4j.specs.IVec;
import org.sat4j.specs.IVecInt;
import org.sat4j.specs.Propagatable;
import org.sat4j.specs.UnitPropagationListener;
import org.sat4j.specs.VarMapper;
import org.sat4j.tools.DotSearchTracing;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class BinaryClause_ESTest extends BinaryClause_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      IVecInt iVecInt0 = mock(IVecInt.class, new ViolatedAssumptionAnswer());
      doReturn(2, 2).when(iVecInt0).get(anyInt());
      doReturn(2).when(iVecInt0).size();
      Lits lits0 = new Lits();
      OriginalBinaryClause originalBinaryClause0 = new OriginalBinaryClause(iVecInt0, lits0);
      VecInt vecInt0 = new VecInt(3244);
      vecInt0.push(741);
      int int0 = originalBinaryClause0.getAssertionLevel(vecInt0, 791);
      assertEquals((-1), int0);
      assertEquals(0.0, originalBinaryClause0.getActivity(), 0.01);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      IVecInt iVecInt0 = mock(IVecInt.class, new ViolatedAssumptionAnswer());
      doReturn(211, (-1)).when(iVecInt0).get(anyInt());
      doReturn(2).when(iVecInt0).size();
      ILits iLits0 = mock(ILits.class, new ViolatedAssumptionAnswer());
      OriginalBinaryClause originalBinaryClause0 = new OriginalBinaryClause(iVecInt0, iLits0);
      int[] intArray0 = originalBinaryClause0.getLits();
      assertArrayEquals(new int[] {211, (-1)}, intArray0);
      assertEquals(0.0, originalBinaryClause0.getActivity(), 0.01);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      IVecInt iVecInt0 = mock(IVecInt.class, new ViolatedAssumptionAnswer());
      doReturn(211, 2).when(iVecInt0).get(anyInt());
      doReturn(2).when(iVecInt0).size();
      Lits lits0 = new Lits();
      OriginalBinaryClause originalBinaryClause0 = new OriginalBinaryClause(iVecInt0, lits0);
      MixedDataStructureSingleWL mixedDataStructureSingleWL0 = new MixedDataStructureSingleWL();
      SearchParams searchParams0 = new SearchParams();
      ActiveLearning<MixedDataStructureSingleWL> activeLearning0 = new ActiveLearning<MixedDataStructureSingleWL>();
      UserFixedPhaseSelectionStrategy userFixedPhaseSelectionStrategy0 = new UserFixedPhaseSelectionStrategy();
      LevelBasedVarOrderHeap levelBasedVarOrderHeap0 = new LevelBasedVarOrderHeap(userFixedPhaseSelectionStrategy0);
      TabuListDecorator tabuListDecorator0 = new TabuListDecorator(levelBasedVarOrderHeap0, 0);
      ArminRestarts arminRestarts0 = new ArminRestarts();
      Solver<MixedDataStructureSingleWL> solver0 = new Solver<MixedDataStructureSingleWL>(activeLearning0, mixedDataStructureSingleWL0, searchParams0, tabuListDecorator0, arminRestarts0);
      originalBinaryClause0.assertConstraint(solver0);
      assertEquals(0.0, originalBinaryClause0.getActivity(), 0.01);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      IVecInt iVecInt0 = mock(IVecInt.class, new ViolatedAssumptionAnswer());
      doReturn(211, (-1)).when(iVecInt0).get(anyInt());
      doReturn(2).when(iVecInt0).size();
      ILits iLits0 = mock(ILits.class, new ViolatedAssumptionAnswer());
      OriginalBinaryClause originalBinaryClause0 = new OriginalBinaryClause(iVecInt0, iLits0);
      originalBinaryClause0.rescaleBy(2);
      assertEquals(0.0, originalBinaryClause0.getActivity(), 0.01);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      IVecInt iVecInt0 = mock(IVecInt.class, new ViolatedAssumptionAnswer());
      doReturn(2, 48).when(iVecInt0).get(anyInt());
      doReturn(2).when(iVecInt0).size();
      ILits iLits0 = mock(ILits.class, new ViolatedAssumptionAnswer());
      OriginalBinaryClause originalBinaryClause0 = new OriginalBinaryClause(iVecInt0, iLits0);
      // Undeclared exception!
      try { 
        originalBinaryClause0.get((-1642));
        fail("Expecting exception: AssertionError");
      
      } catch(AssertionError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      IVecInt iVecInt0 = mock(IVecInt.class, new ViolatedAssumptionAnswer());
      doReturn(2, 48).when(iVecInt0).get(anyInt());
      doReturn(2).when(iVecInt0).size();
      Lits lits0 = new Lits();
      OriginalBinaryClause originalBinaryClause0 = new OriginalBinaryClause(iVecInt0, lits0);
      boolean boolean0 = originalBinaryClause0.locked();
      assertFalse(boolean0);
      assertEquals(0.0, originalBinaryClause0.getActivity(), 0.01);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      IVecInt iVecInt0 = mock(IVecInt.class, new ViolatedAssumptionAnswer());
      doReturn(211, 48).when(iVecInt0).get(anyInt());
      doReturn(2).when(iVecInt0).size();
      ILits iLits0 = mock(ILits.class, new ViolatedAssumptionAnswer());
      OriginalBinaryClause originalBinaryClause0 = new OriginalBinaryClause(iVecInt0, iLits0);
      WatcherBasedPrimeImplicantStrategy watcherBasedPrimeImplicantStrategy0 = new WatcherBasedPrimeImplicantStrategy();
      // Undeclared exception!
      try { 
        originalBinaryClause0.propagatePI(watcherBasedPrimeImplicantStrategy0, (-616));
        fail("Expecting exception: AssertionError");
      
      } catch(AssertionError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      IVecInt iVecInt0 = mock(IVecInt.class, new ViolatedAssumptionAnswer());
      doReturn(2, 2).when(iVecInt0).get(anyInt());
      doReturn(2).when(iVecInt0).size();
      ILits iLits0 = mock(ILits.class, new ViolatedAssumptionAnswer());
      OriginalBinaryClause originalBinaryClause0 = new OriginalBinaryClause(iVecInt0, iLits0);
      PercentLengthLearning<MixedDataStructureSingleWL> percentLengthLearning0 = new PercentLengthLearning<MixedDataStructureSingleWL>();
      MixedDataStructureSingleWL mixedDataStructureSingleWL0 = new MixedDataStructureSingleWL();
      VarOrderHeap varOrderHeap0 = mock(VarOrderHeap.class, new ViolatedAssumptionAnswer());
      RandomWalkDecorator randomWalkDecorator0 = new RandomWalkDecorator(varOrderHeap0, 2);
      NoRestarts noRestarts0 = new NoRestarts();
      MUSLauncher mUSLauncher0 = new MUSLauncher();
      Solver<MixedDataStructureSingleWL> solver0 = new Solver<MixedDataStructureSingleWL>(percentLengthLearning0, mixedDataStructureSingleWL0, (SearchParams) null, randomWalkDecorator0, noRestarts0, mUSLauncher0);
      // Undeclared exception!
      try { 
        originalBinaryClause0.propagate(solver0, 48);
        fail("Expecting exception: AssertionError");
      
      } catch(AssertionError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      IVecInt iVecInt0 = mock(IVecInt.class, new ViolatedAssumptionAnswer());
      doReturn(211, 48).when(iVecInt0).get(anyInt());
      doReturn(2).when(iVecInt0).size();
      ILits iLits0 = mock(ILits.class, new ViolatedAssumptionAnswer());
      doReturn((IVec) null).when(iLits0).watches(anyInt());
      OriginalBinaryClause originalBinaryClause0 = new OriginalBinaryClause(iVecInt0, iLits0);
      PureOrder pureOrder0 = new PureOrder();
      NoRestarts noRestarts0 = new NoRestarts();
      MUSLauncher mUSLauncher0 = new MUSLauncher();
      ClauseOnlyLearning<MixedDataStructureSingleWL> clauseOnlyLearning0 = new ClauseOnlyLearning<MixedDataStructureSingleWL>();
      MixedDataStructureSingleWL mixedDataStructureSingleWL0 = new MixedDataStructureSingleWL();
      SearchParams searchParams0 = new SearchParams(1074);
      Solver<MixedDataStructureSingleWL> solver0 = new Solver<MixedDataStructureSingleWL>(clauseOnlyLearning0, mixedDataStructureSingleWL0, searchParams0, pureOrder0, noRestarts0, mUSLauncher0);
      // Undeclared exception!
      try { 
        originalBinaryClause0.remove(solver0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.minisat.constraints.cnf.BinaryClause", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      IVecInt iVecInt0 = mock(IVecInt.class, new ViolatedAssumptionAnswer());
      doReturn(211, 48).when(iVecInt0).get(anyInt());
      doReturn(2).when(iVecInt0).size();
      ILits iLits0 = mock(ILits.class, new ViolatedAssumptionAnswer());
      doReturn(true).when(iLits0).isFalsified(anyInt());
      OriginalBinaryClause originalBinaryClause0 = new OriginalBinaryClause(iVecInt0, iLits0);
      // Undeclared exception!
      try { 
        originalBinaryClause0.calcReason(2, (IVecInt) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.minisat.constraints.cnf.BinaryClause", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      IVecInt iVecInt0 = mock(IVecInt.class, new ViolatedAssumptionAnswer());
      doReturn(211, 48).when(iVecInt0).get(anyInt());
      doReturn(2).when(iVecInt0).size();
      ILits iLits0 = mock(ILits.class, new ViolatedAssumptionAnswer());
      OriginalBinaryClause originalBinaryClause0 = new OriginalBinaryClause(iVecInt0, iLits0);
      originalBinaryClause0.register();
      assertEquals(0.0, originalBinaryClause0.getActivity(), 0.01);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      IVecInt iVecInt0 = mock(IVecInt.class, new ViolatedAssumptionAnswer());
      doReturn(2, 2).when(iVecInt0).get(anyInt());
      doReturn(2).when(iVecInt0).size();
      ILits iLits0 = mock(ILits.class, new ViolatedAssumptionAnswer());
      doReturn(false, false).when(iLits0).isFalsified(anyInt());
      OriginalBinaryClause originalBinaryClause0 = new OriginalBinaryClause(iVecInt0, iLits0);
      originalBinaryClause0.calcReasonOnTheFly(1398, (IVecInt) null, (IVecInt) null);
      assertEquals(0.0, originalBinaryClause0.getActivity(), 0.01);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      IVecInt iVecInt0 = mock(IVecInt.class, new ViolatedAssumptionAnswer());
      doReturn(2, 2).when(iVecInt0).get(anyInt());
      doReturn(2).when(iVecInt0).size();
      Constr constr0 = Constr.TAUTOLOGY;
      ILits iLits0 = mock(ILits.class, new ViolatedAssumptionAnswer());
      doReturn("+;L`g:sukbk6", "+;L`g:sukbk6").when(iLits0).valueToString(anyInt());
      OriginalBinaryClause originalBinaryClause0 = new OriginalBinaryClause(iVecInt0, iLits0);
      Constr constr1 = originalBinaryClause0.toConstraint();
      assertEquals(0.0, constr1.getActivity(), 0.01);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      IVecInt iVecInt0 = mock(IVecInt.class, new ViolatedAssumptionAnswer());
      doReturn(2, 2).when(iVecInt0).get(anyInt());
      doReturn(2).when(iVecInt0).size();
      Lits lits0 = new Lits();
      OriginalBinaryClause originalBinaryClause0 = new OriginalBinaryClause(iVecInt0, lits0);
      originalBinaryClause0.getVocabulary();
      assertEquals(0.0, originalBinaryClause0.getActivity(), 0.01);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      IVecInt iVecInt0 = mock(IVecInt.class, new ViolatedAssumptionAnswer());
      doReturn(2, 2).when(iVecInt0).get(anyInt());
      doReturn(2).when(iVecInt0).size();
      Lits lits0 = new Lits();
      OriginalBinaryClause originalBinaryClause0 = new OriginalBinaryClause(iVecInt0, lits0);
      VecInt vecInt0 = new VecInt(2);
      IVecInt iVecInt1 = vecInt0.push(2);
      int int0 = originalBinaryClause0.getAssertionLevel(iVecInt1, 3244);
      assertEquals(0.0, originalBinaryClause0.getActivity(), 0.01);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      IVecInt iVecInt0 = mock(IVecInt.class, new ViolatedAssumptionAnswer());
      doReturn(211, (-1)).when(iVecInt0).get(anyInt());
      doReturn(2).when(iVecInt0).size();
      Lits lits0 = new Lits();
      OriginalBinaryClause originalBinaryClause0 = new OriginalBinaryClause(iVecInt0, lits0);
      // Undeclared exception!
      try { 
        originalBinaryClause0.simplify();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -2
         //
         verifyException("org.sat4j.minisat.constraints.cnf.Lits", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      IVecInt iVecInt0 = mock(IVecInt.class, new ViolatedAssumptionAnswer());
      doReturn(2, 2).when(iVecInt0).get(anyInt());
      doReturn(2).when(iVecInt0).size();
      Vec<Propagatable> vec0 = new Vec<Propagatable>(2);
      ILits iLits0 = mock(ILits.class, new ViolatedAssumptionAnswer());
      doReturn(vec0).when(iLits0).watches(anyInt());
      OriginalBinaryClause originalBinaryClause0 = new OriginalBinaryClause(iVecInt0, iLits0);
      PercentLengthLearning<MixedDataStructureSingleWL> percentLengthLearning0 = new PercentLengthLearning<MixedDataStructureSingleWL>();
      MixedDataStructureSingleWL mixedDataStructureSingleWL0 = new MixedDataStructureSingleWL();
      VarOrderHeap varOrderHeap0 = mock(VarOrderHeap.class, new ViolatedAssumptionAnswer());
      RandomWalkDecorator randomWalkDecorator0 = new RandomWalkDecorator(varOrderHeap0, 1549.457242);
      NoRestarts noRestarts0 = new NoRestarts();
      MUSLauncher mUSLauncher0 = new MUSLauncher();
      Solver<MixedDataStructureSingleWL> solver0 = new Solver<MixedDataStructureSingleWL>(percentLengthLearning0, mixedDataStructureSingleWL0, (SearchParams) null, randomWalkDecorator0, noRestarts0, mUSLauncher0);
      // Undeclared exception!
      try { 
        originalBinaryClause0.remove(solver0);
        fail("Expecting exception: NoSuchElementException");
      
      } catch(NoSuchElementException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.core.Vec", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      IVecInt iVecInt0 = mock(IVecInt.class, new ViolatedAssumptionAnswer());
      doReturn(2, 2).when(iVecInt0).get(anyInt());
      doReturn(2).when(iVecInt0).size();
      Vec<Propagatable> vec0 = new Vec<Propagatable>(2);
      ReadOnlyVec<Propagatable> readOnlyVec0 = new ReadOnlyVec<Propagatable>(vec0);
      ILits iLits0 = mock(ILits.class, new ViolatedAssumptionAnswer());
      doReturn(readOnlyVec0).when(iLits0).watches(anyInt());
      OriginalBinaryClause originalBinaryClause0 = new OriginalBinaryClause(iVecInt0, iLits0);
      PercentLengthLearning<MixedDataStructureSingleWL> percentLengthLearning0 = new PercentLengthLearning<MixedDataStructureSingleWL>();
      MixedDataStructureSingleWL mixedDataStructureSingleWL0 = new MixedDataStructureSingleWL();
      VarOrderHeap varOrderHeap0 = mock(VarOrderHeap.class, new ViolatedAssumptionAnswer());
      RandomWalkDecorator randomWalkDecorator0 = new RandomWalkDecorator(varOrderHeap0, 2);
      NoRestarts noRestarts0 = new NoRestarts();
      MUSLauncher mUSLauncher0 = new MUSLauncher();
      Solver<MixedDataStructureSingleWL> solver0 = new Solver<MixedDataStructureSingleWL>(percentLengthLearning0, mixedDataStructureSingleWL0, (SearchParams) null, randomWalkDecorator0, noRestarts0, mUSLauncher0);
      // Undeclared exception!
      try { 
        originalBinaryClause0.remove(solver0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.core.ReadOnlyVec", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      IVecInt iVecInt0 = mock(IVecInt.class, new ViolatedAssumptionAnswer());
      doReturn(2, 2).when(iVecInt0).get(anyInt());
      doReturn(2).when(iVecInt0).size();
      Lits lits0 = new Lits();
      OriginalBinaryClause originalBinaryClause0 = new OriginalBinaryClause(iVecInt0, lits0);
      WatcherBasedPrimeImplicantStrategy watcherBasedPrimeImplicantStrategy0 = new WatcherBasedPrimeImplicantStrategy();
      // Undeclared exception!
      try { 
        originalBinaryClause0.propagatePI(watcherBasedPrimeImplicantStrategy0, (-2983));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -2983
         //
         verifyException("org.sat4j.minisat.constraints.cnf.Lits", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      IVecInt iVecInt0 = mock(IVecInt.class, new ViolatedAssumptionAnswer());
      doReturn(2, 2).when(iVecInt0).get(anyInt());
      doReturn(2).when(iVecInt0).size();
      Lits lits0 = new Lits();
      OriginalBinaryClause originalBinaryClause0 = new OriginalBinaryClause(iVecInt0, lits0);
      PureOrder pureOrder0 = new PureOrder();
      NoRestarts noRestarts0 = new NoRestarts();
      PercentLengthLearning<MixedDataStructureSingleWL> percentLengthLearning0 = new PercentLengthLearning<MixedDataStructureSingleWL>(35);
      MUSLauncher mUSLauncher0 = new MUSLauncher();
      MixedDataStructureSingleWL mixedDataStructureSingleWL0 = new MixedDataStructureSingleWL();
      SearchParams searchParams0 = new SearchParams(1.0, 1.0, 195.62374312355817, 2065);
      Solver<MixedDataStructureSingleWL> solver0 = new Solver<MixedDataStructureSingleWL>(percentLengthLearning0, mixedDataStructureSingleWL0, searchParams0, pureOrder0, noRestarts0, mUSLauncher0);
      // Undeclared exception!
      try { 
        originalBinaryClause0.propagate(solver0, 2);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.minisat.constraints.cnf.Lits", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      IVecInt iVecInt0 = mock(IVecInt.class, new ViolatedAssumptionAnswer());
      doReturn(2, 2).when(iVecInt0).get(anyInt());
      doReturn(2).when(iVecInt0).size();
      Lits lits0 = new Lits();
      OriginalBinaryClause originalBinaryClause0 = new OriginalBinaryClause(iVecInt0, lits0);
      // Undeclared exception!
      try { 
        originalBinaryClause0.getAssertionLevel((IVecInt) null, 2);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.minisat.constraints.cnf.BinaryClause", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      IVecInt iVecInt0 = mock(IVecInt.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(iVecInt0).size();
      ILits iLits0 = mock(ILits.class, new ViolatedAssumptionAnswer());
      OriginalBinaryClause originalBinaryClause0 = null;
      try {
        originalBinaryClause0 = new OriginalBinaryClause(iVecInt0, iLits0);
        fail("Expecting exception: AssertionError");
      
      } catch(AssertionError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      IVecInt iVecInt0 = mock(IVecInt.class, new ViolatedAssumptionAnswer());
      doReturn(211, 48).when(iVecInt0).get(anyInt());
      doReturn(2).when(iVecInt0).size();
      ILits iLits0 = mock(ILits.class, new ViolatedAssumptionAnswer());
      doReturn(false, true).when(iLits0).isFalsified(anyInt());
      OriginalBinaryClause originalBinaryClause0 = new OriginalBinaryClause(iVecInt0, iLits0);
      // Undeclared exception!
      try { 
        originalBinaryClause0.calcReason(2, (IVecInt) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.minisat.constraints.cnf.BinaryClause", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      IVecInt iVecInt0 = mock(IVecInt.class, new ViolatedAssumptionAnswer());
      doReturn(211, (-1)).when(iVecInt0).get(anyInt());
      doReturn(2).when(iVecInt0).size();
      ILits iLits0 = mock(ILits.class, new ViolatedAssumptionAnswer());
      doReturn((String) null, (String) null).when(iLits0).valueToString(anyInt());
      OriginalBinaryClause originalBinaryClause0 = new OriginalBinaryClause(iVecInt0, iLits0);
      String string0 = originalBinaryClause0.toString((VarMapper) null);
      assertEquals("-105[null] --1[null]", string0);
      assertEquals(0.0, originalBinaryClause0.getActivity(), 0.01);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      IVecInt iVecInt0 = mock(IVecInt.class, new ViolatedAssumptionAnswer());
      doReturn(211, (-1)).when(iVecInt0).get(anyInt());
      doReturn(2).when(iVecInt0).size();
      ILits iLits0 = mock(ILits.class, new ViolatedAssumptionAnswer());
      doReturn(" #one ", " #one ").when(iLits0).valueToString(anyInt());
      OriginalBinaryClause originalBinaryClause0 = new OriginalBinaryClause(iVecInt0, iLits0);
      DotSearchTracing<Integer> dotSearchTracing0 = new DotSearchTracing<Integer>("p!?tO1l(O#v>");
      String string0 = originalBinaryClause0.toString((VarMapper) dotSearchTracing0);
      assertEquals(0.0, originalBinaryClause0.getActivity(), 0.01);
      assertEquals("-105[ #one ] 1[ #one ]", string0);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      IVecInt iVecInt0 = mock(IVecInt.class, new ViolatedAssumptionAnswer());
      doReturn(2, 2).when(iVecInt0).get(anyInt());
      doReturn(2).when(iVecInt0).size();
      ILits iLits0 = mock(ILits.class, new ViolatedAssumptionAnswer());
      OriginalBinaryClause originalBinaryClause0 = new OriginalBinaryClause(iVecInt0, iLits0);
      VecInt vecInt0 = new VecInt(1);
      vecInt0.push(1);
      int int0 = originalBinaryClause0.getAssertionLevel(vecInt0, 335);
      assertEquals(0.0, originalBinaryClause0.getActivity(), 0.01);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      VecInt vecInt0 = new VecInt(2, 2);
      ILits iLits0 = mock(ILits.class, new ViolatedAssumptionAnswer());
      OriginalBinaryClause originalBinaryClause0 = new OriginalBinaryClause(vecInt0, iLits0);
      int int0 = originalBinaryClause0.getAssertionLevel(vecInt0, (-1));
      assertEquals(1, int0);
      assertEquals(0.0, originalBinaryClause0.getActivity(), 0.01);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      IVecInt iVecInt0 = mock(IVecInt.class, new ViolatedAssumptionAnswer());
      doReturn(2, 2).when(iVecInt0).get(anyInt());
      doReturn(2).when(iVecInt0).size();
      ILits iLits0 = mock(ILits.class, new ViolatedAssumptionAnswer());
      doReturn(true).when(iLits0).isSatisfied(anyInt());
      OriginalBinaryClause originalBinaryClause0 = new OriginalBinaryClause(iVecInt0, iLits0);
      boolean boolean0 = originalBinaryClause0.isSatisfied();
      assertTrue(boolean0);
      assertEquals(0.0, originalBinaryClause0.getActivity(), 0.01);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      IVecInt iVecInt0 = mock(IVecInt.class, new ViolatedAssumptionAnswer());
      doReturn(2, 48).when(iVecInt0).get(anyInt());
      doReturn(2).when(iVecInt0).size();
      Lits lits0 = new Lits();
      OriginalBinaryClause originalBinaryClause0 = new OriginalBinaryClause(iVecInt0, lits0);
      boolean boolean0 = originalBinaryClause0.isSatisfied();
      assertEquals(0.0, originalBinaryClause0.getActivity(), 0.01);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      IVecInt iVecInt0 = mock(IVecInt.class, new ViolatedAssumptionAnswer());
      doReturn(2, 48).when(iVecInt0).get(anyInt());
      doReturn(2).when(iVecInt0).size();
      Lits lits0 = new Lits();
      OriginalBinaryClause originalBinaryClause0 = new OriginalBinaryClause(iVecInt0, lits0);
      boolean boolean0 = originalBinaryClause0.equals((Object) null);
      assertEquals(0.0, originalBinaryClause0.getActivity(), 0.01);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      VecInt vecInt0 = new VecInt(2, 2);
      ILits iLits0 = mock(ILits.class, new ViolatedAssumptionAnswer());
      OriginalBinaryClause originalBinaryClause0 = new OriginalBinaryClause(vecInt0, iLits0);
      VarOrderHeap varOrderHeap0 = mock(VarOrderHeap.class, new ViolatedAssumptionAnswer());
      RandomWalkDecorator randomWalkDecorator0 = new RandomWalkDecorator(varOrderHeap0, 2);
      boolean boolean0 = originalBinaryClause0.equals(randomWalkDecorator0);
      assertEquals(0.0, originalBinaryClause0.getActivity(), 0.01);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      IVecInt iVecInt0 = mock(IVecInt.class, new ViolatedAssumptionAnswer());
      doReturn(2, 2).when(iVecInt0).get(anyInt());
      doReturn(2).when(iVecInt0).size();
      ILits iLits0 = mock(ILits.class, new ViolatedAssumptionAnswer());
      doReturn(true).when(iLits0).isFalsified(anyInt());
      OriginalBinaryClause originalBinaryClause0 = new OriginalBinaryClause(iVecInt0, iLits0);
      PercentLengthLearning<MixedDataStructureSingleWL> percentLengthLearning0 = new PercentLengthLearning<MixedDataStructureSingleWL>();
      MixedDataStructureSingleWL mixedDataStructureSingleWL0 = new MixedDataStructureSingleWL();
      VarOrderHeap varOrderHeap0 = mock(VarOrderHeap.class, new ViolatedAssumptionAnswer());
      RandomWalkDecorator randomWalkDecorator0 = new RandomWalkDecorator(varOrderHeap0, 2);
      NoRestarts noRestarts0 = new NoRestarts();
      MUSLauncher mUSLauncher0 = new MUSLauncher();
      Solver<MixedDataStructureSingleWL> solver0 = new Solver<MixedDataStructureSingleWL>(percentLengthLearning0, mixedDataStructureSingleWL0, (SearchParams) null, randomWalkDecorator0, noRestarts0, mUSLauncher0);
      originalBinaryClause0.assertConstraintIfNeeded(solver0);
      assertEquals(1, solver0.getPropagationLevel());
      assertEquals(0.0, originalBinaryClause0.getActivity(), 0.01);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      IVecInt iVecInt0 = mock(IVecInt.class, new ViolatedAssumptionAnswer());
      doReturn(2, 2).when(iVecInt0).get(anyInt());
      doReturn(2).when(iVecInt0).size();
      Lits lits0 = new Lits();
      OriginalBinaryClause originalBinaryClause0 = new OriginalBinaryClause(iVecInt0, lits0);
      // Undeclared exception!
      try { 
        originalBinaryClause0.get(2);
        fail("Expecting exception: AssertionError");
      
      } catch(AssertionError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      IVecInt iVecInt0 = mock(IVecInt.class, new ViolatedAssumptionAnswer());
      doReturn(2, 48).when(iVecInt0).get(anyInt());
      doReturn(2).when(iVecInt0).size();
      ILits iLits0 = mock(ILits.class, new ViolatedAssumptionAnswer());
      OriginalBinaryClause originalBinaryClause0 = new OriginalBinaryClause(iVecInt0, iLits0);
      int int0 = originalBinaryClause0.get(0);
      assertEquals(0.0, originalBinaryClause0.getActivity(), 0.01);
      assertEquals(2, int0);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      IVecInt iVecInt0 = mock(IVecInt.class, new ViolatedAssumptionAnswer());
      doReturn(2, 2).when(iVecInt0).get(anyInt());
      doReturn(2).when(iVecInt0).size();
      ILits iLits0 = mock(ILits.class, new ViolatedAssumptionAnswer());
      OriginalBinaryClause originalBinaryClause0 = new OriginalBinaryClause(iVecInt0, iLits0);
      int int0 = originalBinaryClause0.get(1);
      assertEquals(0.0, originalBinaryClause0.getActivity(), 0.01);
      assertEquals(2, int0);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      IVecInt iVecInt0 = mock(IVecInt.class, new ViolatedAssumptionAnswer());
      doReturn(2, 2).when(iVecInt0).get(anyInt());
      doReturn(2).when(iVecInt0).size();
      ILits iLits0 = mock(ILits.class, new ViolatedAssumptionAnswer());
      OriginalBinaryClause originalBinaryClause0 = new OriginalBinaryClause(iVecInt0, iLits0);
      WatcherBasedPrimeImplicantStrategy watcherBasedPrimeImplicantStrategy0 = new WatcherBasedPrimeImplicantStrategy();
      // Undeclared exception!
      try { 
        originalBinaryClause0.propagatePI(watcherBasedPrimeImplicantStrategy0, 3);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.minisat.core.WatcherBasedPrimeImplicantStrategy", e);
      }
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      IVecInt iVecInt0 = mock(IVecInt.class, new ViolatedAssumptionAnswer());
      doReturn(2, 2).when(iVecInt0).get(anyInt());
      doReturn(2).when(iVecInt0).size();
      ILits iLits0 = mock(ILits.class, new ViolatedAssumptionAnswer());
      OriginalBinaryClause originalBinaryClause0 = new OriginalBinaryClause(iVecInt0, iLits0);
      WatcherBasedPrimeImplicantStrategy watcherBasedPrimeImplicantStrategy0 = new WatcherBasedPrimeImplicantStrategy();
      // Undeclared exception!
      try { 
        originalBinaryClause0.propagatePI(watcherBasedPrimeImplicantStrategy0, 2);
        fail("Expecting exception: AssertionError");
      
      } catch(AssertionError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      IVecInt iVecInt0 = mock(IVecInt.class, new ViolatedAssumptionAnswer());
      doReturn(2, 2).when(iVecInt0).get(anyInt());
      doReturn(2).when(iVecInt0).size();
      ILits iLits0 = mock(ILits.class, new ViolatedAssumptionAnswer());
      OriginalBinaryClause originalBinaryClause0 = new OriginalBinaryClause(iVecInt0, iLits0);
      // Undeclared exception!
      try { 
        originalBinaryClause0.propagate((UnitPropagationListener) null, (-2335));
        fail("Expecting exception: AssertionError");
      
      } catch(AssertionError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      IVecInt iVecInt0 = mock(IVecInt.class, new ViolatedAssumptionAnswer());
      doReturn(211, (-1)).when(iVecInt0).get(anyInt());
      doReturn(2).when(iVecInt0).size();
      ILits iLits0 = mock(ILits.class, new ViolatedAssumptionAnswer());
      doReturn(false, false).when(iLits0).isSatisfied(anyInt());
      OriginalBinaryClause originalBinaryClause0 = new OriginalBinaryClause(iVecInt0, iLits0);
      boolean boolean0 = originalBinaryClause0.simplify();
      assertEquals(0.0, originalBinaryClause0.getActivity(), 0.01);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      IVecInt iVecInt0 = mock(IVecInt.class, new ViolatedAssumptionAnswer());
      doReturn(211, (-1)).when(iVecInt0).get(anyInt());
      doReturn(2).when(iVecInt0).size();
      ILits iLits0 = mock(ILits.class, new ViolatedAssumptionAnswer());
      doReturn(false, true).when(iLits0).isSatisfied(anyInt());
      OriginalBinaryClause originalBinaryClause0 = new OriginalBinaryClause(iVecInt0, iLits0);
      boolean boolean0 = originalBinaryClause0.simplify();
      assertTrue(boolean0);
      assertEquals(0.0, originalBinaryClause0.getActivity(), 0.01);
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      IVecInt iVecInt0 = mock(IVecInt.class, new ViolatedAssumptionAnswer());
      doReturn(211, (-1)).when(iVecInt0).get(anyInt());
      doReturn(2).when(iVecInt0).size();
      ILits iLits0 = mock(ILits.class, new ViolatedAssumptionAnswer());
      doReturn(true).when(iLits0).isSatisfied(anyInt());
      OriginalBinaryClause originalBinaryClause0 = new OriginalBinaryClause(iVecInt0, iLits0);
      boolean boolean0 = originalBinaryClause0.simplify();
      assertEquals(0.0, originalBinaryClause0.getActivity(), 0.01);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      IVecInt iVecInt0 = mock(IVecInt.class, new ViolatedAssumptionAnswer());
      doReturn(211, 48).when(iVecInt0).get(anyInt());
      doReturn(2).when(iVecInt0).size();
      ILits iLits0 = mock(ILits.class, new ViolatedAssumptionAnswer());
      doReturn(false, false).when(iLits0).isFalsified(anyInt());
      OriginalBinaryClause originalBinaryClause0 = new OriginalBinaryClause(iVecInt0, iLits0);
      originalBinaryClause0.calcReason(2, (IVecInt) null);
      assertEquals(0.0, originalBinaryClause0.getActivity(), 0.01);
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      IVecInt iVecInt0 = mock(IVecInt.class, new ViolatedAssumptionAnswer());
      doReturn(2, 2).when(iVecInt0).get(anyInt());
      doReturn(2).when(iVecInt0).size();
      ILits iLits0 = mock(ILits.class, new ViolatedAssumptionAnswer());
      doReturn(false, true).when(iLits0).isFalsified(anyInt());
      OriginalBinaryClause originalBinaryClause0 = new OriginalBinaryClause(iVecInt0, iLits0);
      // Undeclared exception!
      try { 
        originalBinaryClause0.calcReasonOnTheFly(1398, (IVecInt) null, (IVecInt) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.minisat.constraints.cnf.BinaryClause", e);
      }
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      IVecInt iVecInt0 = mock(IVecInt.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(iVecInt0).size();
      OriginalBinaryClause originalBinaryClause0 = null;
      try {
        originalBinaryClause0 = new OriginalBinaryClause(iVecInt0, (ILits) null);
        fail("Expecting exception: AssertionError");
      
      } catch(AssertionError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      IVecInt iVecInt0 = mock(IVecInt.class, new ViolatedAssumptionAnswer());
      doReturn(2, 2).when(iVecInt0).get(anyInt());
      doReturn(2).when(iVecInt0).size();
      ILits iLits0 = mock(ILits.class, new ViolatedAssumptionAnswer());
      OriginalBinaryClause originalBinaryClause0 = new OriginalBinaryClause(iVecInt0, iLits0);
      int int0 = originalBinaryClause0.size();
      assertEquals(0.0, originalBinaryClause0.getActivity(), 0.01);
      assertEquals(2, int0);
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      IVecInt iVecInt0 = mock(IVecInt.class, new ViolatedAssumptionAnswer());
      doReturn(2, 2).when(iVecInt0).get(anyInt());
      doReturn(2).when(iVecInt0).size();
      ILits iLits0 = mock(ILits.class, new ViolatedAssumptionAnswer());
      OriginalBinaryClause originalBinaryClause0 = new OriginalBinaryClause(iVecInt0, iLits0);
      boolean boolean0 = originalBinaryClause0.canBePropagatedMultipleTimes();
      assertFalse(boolean0);
      assertEquals(0.0, originalBinaryClause0.getActivity(), 0.01);
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      IVecInt iVecInt0 = mock(IVecInt.class, new ViolatedAssumptionAnswer());
      doReturn(2, 2).when(iVecInt0).get(anyInt());
      doReturn(2).when(iVecInt0).size();
      Lits lits0 = new Lits();
      OriginalBinaryClause originalBinaryClause0 = new OriginalBinaryClause(iVecInt0, lits0);
      String string0 = originalBinaryClause0.toString();
      assertEquals("1[?] 1[?]", string0);
      assertEquals(0.0, originalBinaryClause0.getActivity(), 0.01);
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      IVecInt iVecInt0 = mock(IVecInt.class, new ViolatedAssumptionAnswer());
      doReturn(2, 48).when(iVecInt0).get(anyInt());
      doReturn(2).when(iVecInt0).size();
      Lits lits0 = new Lits();
      OriginalBinaryClause originalBinaryClause0 = new OriginalBinaryClause(iVecInt0, lits0);
      originalBinaryClause0.hashCode();
      assertEquals(0.0, originalBinaryClause0.getActivity(), 0.01);
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      IVecInt iVecInt0 = mock(IVecInt.class, new ViolatedAssumptionAnswer());
      doReturn(2, 2).when(iVecInt0).get(anyInt());
      doReturn(2).when(iVecInt0).size();
      Lits lits0 = new Lits();
      OriginalBinaryClause originalBinaryClause0 = new OriginalBinaryClause(iVecInt0, lits0);
      boolean boolean0 = originalBinaryClause0.canBeSatisfiedByCountingLiterals();
      assertTrue(boolean0);
      assertEquals(0.0, originalBinaryClause0.getActivity(), 0.01);
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      VecInt vecInt0 = new VecInt(2, 2);
      ILits iLits0 = mock(ILits.class, new ViolatedAssumptionAnswer());
      OriginalBinaryClause originalBinaryClause0 = new OriginalBinaryClause(vecInt0, iLits0);
      int int0 = originalBinaryClause0.requiredNumberOfSatisfiedLiterals();
      assertEquals(0.0, originalBinaryClause0.getActivity(), 0.01);
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      IVecInt iVecInt0 = mock(IVecInt.class, new ViolatedAssumptionAnswer());
      doReturn(2, 2).when(iVecInt0).get(anyInt());
      doReturn(2).when(iVecInt0).size();
      Lits lits0 = new Lits();
      OriginalBinaryClause originalBinaryClause0 = new OriginalBinaryClause(iVecInt0, lits0);
      // Undeclared exception!
      try { 
        originalBinaryClause0.register();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.minisat.constraints.cnf.Lits", e);
      }
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      IVecInt iVecInt0 = mock(IVecInt.class, new ViolatedAssumptionAnswer());
      doReturn(2, 2).when(iVecInt0).get(anyInt());
      doReturn(2).when(iVecInt0).size();
      ILits iLits0 = mock(ILits.class, new ViolatedAssumptionAnswer());
      OriginalBinaryClause originalBinaryClause0 = new OriginalBinaryClause(iVecInt0, iLits0);
      originalBinaryClause0.rescaleBy(0.0);
      assertEquals(0.0, originalBinaryClause0.getActivity(), 0.01);
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      IVecInt iVecInt0 = mock(IVecInt.class, new ViolatedAssumptionAnswer());
      doReturn(2, 2).when(iVecInt0).get(anyInt());
      doReturn(2).when(iVecInt0).size();
      Lits lits0 = new Lits();
      OriginalBinaryClause originalBinaryClause0 = new OriginalBinaryClause(iVecInt0, lits0);
      Constr constr0 = originalBinaryClause0.toConstraint();
      assertEquals(0.0, constr0.getActivity(), 0.01);
  }
}
