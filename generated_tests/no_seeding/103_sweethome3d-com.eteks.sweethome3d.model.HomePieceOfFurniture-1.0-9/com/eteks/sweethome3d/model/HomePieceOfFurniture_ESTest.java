/*
 * This file was automatically generated by EvoSuite
 * Mon Oct 28 23:31:23 GMT 2019
 */

package com.eteks.sweethome3d.model;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.eteks.sweethome3d.model.CatalogDoorOrWindow;
import com.eteks.sweethome3d.model.CatalogLight;
import com.eteks.sweethome3d.model.CatalogPieceOfFurniture;
import com.eteks.sweethome3d.model.CatalogTexture;
import com.eteks.sweethome3d.model.Content;
import com.eteks.sweethome3d.model.FurnitureCategory;
import com.eteks.sweethome3d.model.HomeDoorOrWindow;
import com.eteks.sweethome3d.model.HomeFurnitureGroup;
import com.eteks.sweethome3d.model.HomeLight;
import com.eteks.sweethome3d.model.HomePieceOfFurniture;
import com.eteks.sweethome3d.model.HomeTexture;
import com.eteks.sweethome3d.model.Level;
import com.eteks.sweethome3d.model.LightSource;
import com.eteks.sweethome3d.model.PieceOfFurniture;
import com.eteks.sweethome3d.model.Sash;
import com.eteks.sweethome3d.model.TextStyle;
import com.eteks.sweethome3d.model.TextureImage;
import com.eteks.sweethome3d.tools.ResourceURLContent;
import com.eteks.sweethome3d.tools.TemporaryURLContent;
import com.eteks.sweethome3d.tools.URLContent;
import java.beans.PropertyChangeEvent;
import java.beans.PropertyChangeListener;
import java.beans.PropertyChangeListenerProxy;
import java.math.BigDecimal;
import java.math.BigInteger;
import java.math.MathContext;
import java.net.URL;
import java.net.URLStreamHandler;
import java.util.LinkedList;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.Random;
import org.evosuite.runtime.System;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.net.MockURL;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class HomePieceOfFurniture_ESTest extends HomePieceOfFurniture_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      LightSource[] lightSourceArray0 = new LightSource[2];
      CatalogLight catalogLight0 = new CatalogLight("h&*+\"", (String) null, "n1\"OEa9/Bu9v.nFpc", (Content) null, (Content) null, (-815.0F), 1111.87F, 233.10785F, (-815.0F), false, lightSourceArray0, (float[][]) null, "com.eteks.sweethome3d.model.HomePieceOfFurniture$5", false, (BigDecimal) null, (BigDecimal) null);
      HomeLight homeLight0 = new HomeLight(catalogLight0);
      catalogLight0.getCategory();
      homeLight0.isPointAt((-1.0F), 1111.87F, (-1.0F));
      homeLight0.setName((String) null);
      // Undeclared exception!
      try { 
        homeLight0.setModelMirrored(true);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Piece isn't resizable
         //
         verifyException("com.eteks.sweethome3d.model.HomePieceOfFurniture", e);
      }
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      LightSource[] lightSourceArray0 = new LightSource[14];
      BigDecimal bigDecimal0 = BigDecimal.ONE;
      CatalogLight catalogLight0 = new CatalogLight("(%", "(%", "(%", (Content) null, (Content) null, (-815.0011F), (-815.0011F), (-815.0011F), (-815.0011F), false, lightSourceArray0, (float[][]) null, "(%", false, bigDecimal0, bigDecimal0);
      Float float0 = new Float((-815.0011F));
      HomeLight homeLight0 = new HomeLight(catalogLight0);
      homeLight0.setShininess(float0);
      homeLight0.setShininess(float0);
      homeLight0.setDescription("(%");
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      LightSource[] lightSourceArray0 = new LightSource[2];
      LightSource lightSource0 = new LightSource((-815.0F), 0.0F, 0.0F, 114);
      lightSourceArray0[0] = lightSource0;
      LightSource lightSource1 = new LightSource((-694.0F), (-815.0F), (-127.62969F), 0);
      lightSourceArray0[0] = lightSource1;
      BigDecimal bigDecimal0 = BigDecimal.TEN;
      CatalogLight catalogLight0 = new CatalogLight("h&9+\"", "h&9+\"", "h&9+\"", (Content) null, (Content) null, (-815.0F), (-815.0F), (-694.0F), (-694.0F), true, lightSourceArray0, (float[][]) null, "h&9+\"", true, bigDecimal0, bigDecimal0);
      HomeLight homeLight0 = new HomeLight(catalogLight0);
      HomeLight homeLight1 = homeLight0.clone();
      HomePieceOfFurniture homePieceOfFurniture0 = homeLight1.clone();
      homeLight1.isPointAt(114, (-815.0F), 114);
      homePieceOfFurniture0.setModelMirrored(true);
      homeLight0.isBottomLeftPointAt(0, 0, (-694.0F));
      homePieceOfFurniture0.isTopRightPointAt((-815.0F), (-127.62969F), (-815.0F));
      HomePieceOfFurniture homePieceOfFurniture1 = homePieceOfFurniture0.clone();
      homeLight1.getHeight();
      homeLight0.setElevation(0.0F);
      homePieceOfFurniture1.getPriceValueAddedTaxIncluded();
      homeLight1.getDescription();
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      LightSource[] lightSourceArray0 = new LightSource[2];
      BigDecimal bigDecimal0 = BigDecimal.TEN;
      CatalogLight catalogLight0 = new CatalogLight("/", "/", "/", (Content) null, (Content) null, 0.3926991F, 92.121765F, (-727.8896F), (-727.8896F), true, lightSourceArray0, (float[][]) null, "{L", true, bigDecimal0, bigDecimal0);
      HomeLight homeLight0 = new HomeLight(catalogLight0);
      catalogLight0.getCategory();
      catalogLight0.setCategory((FurnitureCategory) null);
      HomeLight homeLight1 = homeLight0.clone();
      HomePieceOfFurniture homePieceOfFurniture0 = homeLight1.clone();
      HomeLight homeLight2 = new HomeLight(catalogLight0);
      homeLight2.getIcon();
      homeLight1.setNameVisible(true);
      HomeLight homeLight3 = homeLight2.clone();
      homeLight2.setModelMirrored(true);
      homePieceOfFurniture0.isBottomLeftPointAt((-11.086381F), 553.24F, 553.24F);
      homePieceOfFurniture0.isTopRightPointAt(553.24F, (-11.086381F), 0.0F);
      homeLight1.clone();
      HomeLight homeLight4 = new HomeLight(homeLight0);
      homeLight4.getHeight();
      homeLight3.getPriceValueAddedTaxIncluded();
      homeLight3.setDescription("{L");
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      LightSource[] lightSourceArray0 = new LightSource[2];
      LightSource lightSource0 = new LightSource((-815.0F), 0.0F, 0.0F, 114);
      lightSourceArray0[0] = lightSource0;
      LightSource lightSource1 = new LightSource((-694.0F), (-815.0F), (-127.62969F), 0);
      lightSourceArray0[1] = lightSource1;
      BigDecimal bigDecimal0 = BigDecimal.TEN;
      CatalogLight catalogLight0 = new CatalogLight("h&9+\"", "h&9+\"", "h&9+\"", (Content) null, (Content) null, (-815.0F), (-815.0F), (-694.0F), (-694.0F), true, lightSourceArray0, (float[][]) null, "h&9+\"", true, bigDecimal0, bigDecimal0);
      HomeLight homeLight0 = new HomeLight(catalogLight0);
      HomeLight homeLight1 = homeLight0.clone();
      HomePieceOfFurniture homePieceOfFurniture0 = homeLight1.clone();
      homeLight1.isPointAt(114, (-815.0F), 114);
      homePieceOfFurniture0.setModelMirrored(true);
      homeLight0.isBottomLeftPointAt(0, 0, (-694.0F));
      homePieceOfFurniture0.isTopRightPointAt((-815.0F), 127.82604F, (-815.0F));
      homePieceOfFurniture0.clone();
      homeLight1.getHeight();
      homeLight0.setElevation(0.0F);
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      LightSource[] lightSourceArray0 = new LightSource[2];
      LightSource lightSource0 = new LightSource((-815.0011F), 0.0F, 0.0F, (-1541));
      lightSourceArray0[0] = lightSource0;
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, true);
      BigDecimal bigDecimal0 = BigDecimal.TEN;
      CatalogLight catalogLight0 = new CatalogLight("/", "/", "/", (Content) null, (Content) null, 0.3926991F, 92.121765F, 0.3926991F, (-727.8896F), true, lightSourceArray0, (float[][]) null, "{L", true, bigDecimal0, bigDecimal0);
      HomeLight homeLight0 = new HomeLight(catalogLight0);
      catalogLight0.getCategory();
      HomeLight homeLight1 = homeLight0.clone();
      HomePieceOfFurniture homePieceOfFurniture0 = new HomePieceOfFurniture(homeLight0);
      HomePieceOfFurniture homePieceOfFurniture1 = homeLight0.clone();
      homePieceOfFurniture1.setElevation(0.0F);
      homeLight0.setModelMirrored(true);
      catalogLight0.setCategory((FurnitureCategory) null);
      homeLight0.isNameCenterPointAt((-1541), 527.5414F, 0.0F);
      homeLight0.setY(4.3852863F);
      HomeLight homeLight2 = new HomeLight(homeLight0);
      homeLight1.getGroundElevation();
      homeLight0.setDepth(0.0F);
      homeLight2.isPointAt(0.0F, 0.3926991F, 0.3926991F);
      homeLight2.getColor();
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      HomePieceOfFurniture homePieceOfFurniture0 = null;
      try {
        homePieceOfFurniture0 = new HomePieceOfFurniture((PieceOfFurniture) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.eteks.sweethome3d.model.HomePieceOfFurniture", e);
      }
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      LightSource[] lightSourceArray0 = new LightSource[5];
      BigDecimal bigDecimal0 = BigDecimal.ZERO;
      CatalogLight catalogLight0 = new CatalogLight("h&*+\"", "h&*+\"", "h&*+\"", (Content) null, (Content) null, (-1676.307F), (-1676.307F), (-1676.307F), (-1676.307F), false, lightSourceArray0, (float[][]) null, "h&*+\"", false, bigDecimal0, bigDecimal0);
      HomeLight homeLight0 = new HomeLight(catalogLight0);
      homeLight0.isTopRightPointAt(3.4028235E38F, (-1676.307F), 3.4028235E38F);
      homeLight0.getGroundElevation();
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      LightSource[] lightSourceArray0 = new LightSource[2];
      LightSource lightSource0 = new LightSource((-815.0011F), (-689.75726F), (-689.75726F), (-1541));
      lightSourceArray0[0] = lightSource0;
      BigDecimal bigDecimal0 = BigDecimal.TEN;
      CatalogLight catalogLight0 = new CatalogLight("h&*+\"", "h&*+\"", "h&*+\"", (Content) null, (Content) null, (-815.0011F), 1.1802855F, (-689.75726F), (-689.75726F), false, lightSourceArray0, (float[][]) null, "h&*+\"", false, bigDecimal0, bigDecimal0);
      HomeLight homeLight0 = new HomeLight(catalogLight0);
      HomeLight homeLight1 = homeLight0.clone();
      homeLight0.setName("");
      homeLight0.getTexture();
      homeLight1.setTexture((HomeTexture) null);
      HomePieceOfFurniture homePieceOfFurniture0 = homeLight1.clone();
      homeLight0.getShininess();
      homeLight0.isTopRightPointAt(3.4028235E38F, (-427.82852F), 3.4028235E38F);
      homeLight0.setNameVisible(false);
      homePieceOfFurniture0.getModelRotation();
      homePieceOfFurniture0.isResizable();
      HomePieceOfFurniture.SortableProperty homePieceOfFurniture_SortableProperty0 = HomePieceOfFurniture.SortableProperty.PRICE;
      HomePieceOfFurniture.getFurnitureComparator(homePieceOfFurniture_SortableProperty0);
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      LightSource[] lightSourceArray0 = new LightSource[2];
      LightSource lightSource0 = new LightSource((-815.0F), 0.0F, 0.0F, 114);
      lightSourceArray0[0] = lightSource0;
      LightSource lightSource1 = new LightSource((-1.0F), (-2755.2034F), 815.0F, 114);
      BigDecimal bigDecimal0 = BigDecimal.ZERO;
      CatalogLight catalogLight0 = new CatalogLight("com.eteks.sweethome3d.model.HomePieceOfFurniture$2", (String) null, "com.eteks.sweethome3d.model.HomePieceOfFurniture$2", (Content) null, (Content) null, (-815.0F), 114, 2965.994F, 2169.8F, true, lightSourceArray0, (float[][]) null, (String) null, true, bigDecimal0, bigDecimal0);
      HomeLight homeLight0 = new HomeLight(catalogLight0);
      HomeLight homeLight1 = homeLight0.clone();
      HomeLight homeLight2 = homeLight1.clone();
      HomePieceOfFurniture homePieceOfFurniture0 = new HomePieceOfFurniture(homeLight1);
      homePieceOfFurniture0.clone();
      homeLight0.setModelMirrored(true);
      homeLight2.move((-3675.8054F), (-3732.8054F));
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      LightSource[] lightSourceArray0 = new LightSource[2];
      BigDecimal bigDecimal0 = BigDecimal.ONE;
      CatalogLight catalogLight0 = new CatalogLight("h&i*+\"", "h&i*+\"", "h&i*+\"", (Content) null, (Content) null, (-2263.3643F), (-2263.3643F), (-2263.3643F), (-2263.3643F), true, lightSourceArray0, (float[][]) null, "h&i*+\"", true, bigDecimal0, bigDecimal0);
      HomeLight homeLight0 = new HomeLight(catalogLight0);
      homeLight0.intersectsRectangle(0, 0, 0, 114.0F);
      homeLight0.isPointAt(0, (-2263.3643F), (-2263.3643F));
      homeLight0.getPoints();
      System.setCurrentTimeMillis(0);
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      LightSource[] lightSourceArray0 = new LightSource[12];
      BigDecimal bigDecimal0 = BigDecimal.TEN;
      CatalogLight catalogLight0 = new CatalogLight("h&*+\"", "h&*+\"", "h&*+\"", (Content) null, (Content) null, 587.23944F, 587.23944F, 587.23944F, 587.23944F, true, lightSourceArray0, (float[][]) null, "h&*+\"", true, bigDecimal0, bigDecimal0);
      HomeLight homeLight0 = new HomeLight(catalogLight0);
      homeLight0.setLevel((Level) null);
      homeLight0.getModelRotation();
      homeLight0.setNameVisible(true);
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      LightSource[] lightSourceArray0 = new LightSource[2];
      LightSource lightSource0 = new LightSource((-815.0011F), 0.0F, 0.0F, (-1541));
      lightSourceArray0[0] = lightSource0;
      LightSource lightSource1 = new LightSource((-1541), (-2278.261F), (-727.8896F), 8192);
      BigDecimal bigDecimal0 = BigDecimal.TEN;
      CatalogLight catalogLight0 = new CatalogLight("/", "PRICE_VALUE_ADDED_TAX_INCLUDED", "PRICE_VALUE_ADDED_TAX_INCLUDED", (Content) null, (Content) null, 0.3926991F, 92.121765F, 233.10785F, (-727.8896F), true, lightSourceArray0, (float[][]) null, "{L", true, bigDecimal0, bigDecimal0);
      HomeLight homeLight0 = new HomeLight(catalogLight0);
      catalogLight0.getCategory();
      catalogLight0.setCategory((FurnitureCategory) null);
      HomeLight homeLight1 = homeLight0.clone();
      homeLight1.setName("D7L");
      homeLight0.setModelMirrored(false);
      homeLight1.isBottomLeftPointAt((-815.0011F), 132.17F, 2886.24F);
      homeLight1.clone();
      homeLight0.getHeight();
      homeLight1.isResizable();
      Random.setNextRandom(8192);
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      LightSource[] lightSourceArray0 = new LightSource[8];
      BigDecimal bigDecimal0 = BigDecimal.TEN;
      CatalogLight catalogLight0 = new CatalogLight("h&*+\"", "h&*+\"", "h&*+\"", (Content) null, (Content) null, (-1193.1042F), (-1193.1042F), (-1193.1042F), (-1193.1042F), true, lightSourceArray0, (float[][]) null, "h&*+\"", true, bigDecimal0, bigDecimal0);
      HomeLight homeLight0 = new HomeLight(catalogLight0);
      HomeLight homeLight1 = homeLight0.clone();
      homeLight1.isNameCenterPointAt(2.3748727F, (-974.0342F), (-1193.1042F));
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      LightSource[] lightSourceArray0 = new LightSource[2];
      LightSource lightSource0 = new LightSource((-815.0011F), 0.0F, 0.0F, (-1541));
      lightSourceArray0[0] = lightSource0;
      LightSource lightSource1 = new LightSource((-1541), (-2278.261F), (-727.8896F), (-1541));
      BigDecimal bigDecimal0 = BigDecimal.TEN;
      CatalogLight catalogLight0 = new CatalogLight("applicationSubFolder.Mac OS X", "applicationSubFolder.Mac OS X", "applicationSubFolder.Mac OS X", (Content) null, (Content) null, 0.3926991F, (-1541), 233.10785F, (-727.8896F), true, lightSourceArray0, (float[][]) null, "{L", true, bigDecimal0, bigDecimal0);
      catalogLight0.getCategory();
      catalogLight0.setCategory((FurnitureCategory) null);
      HomeLight homeLight0 = new HomeLight(catalogLight0);
      homeLight0.getIcon();
      HomeLight homeLight1 = homeLight0.clone();
      homeLight1.setNameYOffset((-2278.261F));
      homeLight1.setWidth(0.5F);
      homeLight0.setDescription("applicationSubFolder.Mac OS X");
      homeLight0.setHeight((-815.0011F));
      homeLight1.isBottomLeftPointAt((-1541), (-1699.7946F), 3770.39F);
      homeLight1.isNameCenterPointAt(0.3926991F, 3387.4543F, 3387.4543F);
      homeLight0.setNameYOffset((-422.8F));
      homeLight1.setMovable(true);
      homeLight0.getValueAddedTaxPercentage();
      homeLight0.isResizable();
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      LightSource[] lightSourceArray0 = new LightSource[2];
      BigDecimal bigDecimal0 = new BigDecimal(16);
      CatalogLight catalogLight0 = new CatalogLight("&i*_\"", "&i*_\"", "&i*_\"", (Content) null, (Content) null, (-815.0F), (-815.0F), (-815.0F), (-815.0F), true, lightSourceArray0, (float[][]) null, "&i*_\"", true, bigDecimal0, bigDecimal0);
      HomeLight homeLight0 = new HomeLight(catalogLight0);
      homeLight0.setVisible(false);
      homeLight0.getNameAngle();
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      LightSource[] lightSourceArray0 = new LightSource[12];
      BigDecimal bigDecimal0 = BigDecimal.TEN;
      CatalogLight catalogLight0 = new CatalogLight("h&*+\"", "h&*+\"", "h&*+\"", (Content) null, (Content) null, 587.23944F, 587.23944F, (-694.0F), (-694.0F), true, lightSourceArray0, (float[][]) null, "h&*+\"", true, bigDecimal0, bigDecimal0);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "h&*+\"");
      HomeLight homeLight0 = new HomeLight(catalogLight0);
      HomeLight homeLight1 = new HomeLight(homeLight0);
      homeLight1.getTexture();
      homeLight1.getGroundElevation();
      homeLight0.setMovable(true);
      homeLight0.getModelRotation();
      homeLight1.getPoints();
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      LightSource[] lightSourceArray0 = new LightSource[5];
      BigDecimal bigDecimal0 = BigDecimal.ZERO;
      CatalogLight catalogLight0 = new CatalogLight("h&*+\"", "h&*+\"", "h&*+\"", (Content) null, (Content) null, (-1093.1008F), (-1093.1008F), (-689.75726F), (-689.75726F), false, lightSourceArray0, (float[][]) null, "h&*+\"", false, bigDecimal0, bigDecimal0);
      HomeLight homeLight0 = new HomeLight(catalogLight0);
      HomeLight homeLight1 = homeLight0.clone();
      homeLight0.setAngle((-1093.1008F));
      homeLight1.isNameCenterPointAt(0.0F, (-427.82852F), 3.4028235E38F);
      homeLight0.getAngle();
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      LightSource[] lightSourceArray0 = new LightSource[1];
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      LightSource lightSource0 = new LightSource((-815.0F), 0.28356954F, 0.28356954F, 114);
      LightSource lightSource1 = new LightSource(2965.994F, (-1.0F), (-127.62969F), 114);
      BigDecimal bigDecimal0 = BigDecimal.ZERO;
      CatalogLight catalogLight0 = new CatalogLight("h&*+\"", "h&*+\"", "h&*+\"", (Content) null, (Content) null, 0.28356954F, 0.28356954F, 2965.994F, (-694.0F), false, lightSourceArray0, (float[][]) null, "ELEVATION", true, bigDecimal0, bigDecimal0);
      HomeLight homeLight0 = new HomeLight(catalogLight0);
      homeLight0.setY((-127.62969F));
      HomeLight homeLight1 = homeLight0.clone();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      homeLight1.intersectsRectangle(1.0F, (-1581.4954F), (-1581.4954F), 3737.9102F);
      homeLight1.setModelMirrored(false);
      HomeLight homeLight2 = new HomeLight(homeLight1);
      HomeLight homeLight3 = homeLight2.clone();
      Integer integer0 = new Integer((-174));
      homeLight3.setColor(integer0);
      homeLight3.isNameCenterPointAt((-852.8F), (-1179.0F), (-1179.0F));
      homeLight1.getY();
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      LightSource[] lightSourceArray0 = new LightSource[2];
      LightSource lightSource0 = new LightSource((-815.0F), 0.0F, 0.0F, 114);
      lightSourceArray0[0] = lightSource0;
      LightSource lightSource1 = new LightSource((-694.0F), (-815.0F), (-127.62969F), 0);
      lightSourceArray0[0] = lightSource1;
      BigDecimal bigDecimal0 = BigDecimal.TEN;
      CatalogLight catalogLight0 = new CatalogLight("h&9+\"", "h&9+\"", "h&9+\"", (Content) null, (Content) null, (-815.0F), (-815.0F), (-694.0F), (-694.0F), true, lightSourceArray0, (float[][]) null, "h&9+\"", true, bigDecimal0, bigDecimal0);
      HomeLight homeLight0 = new HomeLight(catalogLight0);
      HomeLight homeLight1 = homeLight0.clone();
      HomePieceOfFurniture homePieceOfFurniture0 = homeLight1.clone();
      homeLight1.isPointAt(114, (-815.0F), 114);
      homePieceOfFurniture0.setModelMirrored(true);
      homeLight0.isBottomLeftPointAt(0, 0, (-694.0F));
      homePieceOfFurniture0.isTopRightPointAt((-815.0F), (-127.62969F), (-815.0F));
      homePieceOfFurniture0.clone();
      homeLight1.getHeight();
      homeLight0.setElevation(0.0F);
      homePieceOfFurniture0.isModelMirrored();
      homePieceOfFurniture0.setModelMirrored(false);
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      LightSource[] lightSourceArray0 = new LightSource[12];
      LightSource lightSource0 = new LightSource((-815.0011F), 0.0F, 0.0F, (-1541));
      LightSource lightSource1 = new LightSource((-694.0F), 2965.994F, (-127.62969F), 0);
      lightSourceArray0[1] = lightSource1;
      BigDecimal bigDecimal0 = BigDecimal.TEN;
      CatalogLight catalogLight0 = new CatalogLight("h&*+\"", "h&*+\"", "h&*+\"", (Content) null, (Content) null, (-815.0011F), 1.1802855F, (-694.0F), (-694.0F), true, lightSourceArray0, (float[][]) null, "h&*+\"", true, bigDecimal0, bigDecimal0);
      HomeLight homeLight0 = new HomeLight(catalogLight0);
      homeLight0.setDepth(1.1802855F);
      homeLight0.isNameCenterPointAt((-1932.6633F), (-72.0F), (-4136.8F));
      homeLight0.setY((-694.0F));
      homeLight0.getGroundElevation();
      homeLight0.getDepth();
      homeLight0.setNameAngle(0.0F);
      homeLight0.getModelRotation();
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      LightSource[] lightSourceArray0 = new LightSource[2];
      LightSource lightSource0 = new LightSource((-815.0F), 0.0F, 0.0F, 484);
      lightSourceArray0[0] = lightSource0;
      LightSource lightSource1 = new LightSource((-694.0F), 0.36957806F, (-127.62969F), 0);
      lightSourceArray0[1] = lightSource1;
      BigDecimal bigDecimal0 = BigDecimal.TEN;
      CatalogLight catalogLight0 = new CatalogLight("h&9+\"", "h&9+\"", "h&9+\"", (Content) null, (Content) null, (-815.0F), 0.36957806F, (-694.0F), (-694.0F), true, lightSourceArray0, (float[][]) null, "h&9+\"", true, bigDecimal0, bigDecimal0);
      HomeLight homeLight0 = new HomeLight(catalogLight0);
      HomeLight homeLight1 = homeLight0.clone();
      HomePieceOfFurniture homePieceOfFurniture0 = homeLight1.clone();
      homeLight1.isPointAt(484, (-815.0F), 484);
      homePieceOfFurniture0.setHeight((-38.0F));
      homeLight1.setName("h&9+\"");
      homePieceOfFurniture0.setModelMirrored(true);
      homeLight0.isBottomLeftPointAt(0, 407.5F, (-694.0F));
      homeLight0.clone();
      homeLight0.getHeight();
      homeLight0.isResizable();
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      LightSource[] lightSourceArray0 = new LightSource[2];
      BigDecimal bigDecimal0 = new BigDecimal(0);
      CatalogLight catalogLight0 = new CatalogLight("h&i*+\"", "h&i*+\"", "h&i*+\"", (Content) null, (Content) null, (-2263.3643F), (-2263.3643F), (-2263.3643F), (-2263.3643F), true, lightSourceArray0, (float[][]) null, "h&i*+\"", true, bigDecimal0, bigDecimal0);
      HomeLight homeLight0 = new HomeLight(catalogLight0);
      homeLight0.setVisible(true);
      homeLight0.setNameAngle(0);
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      LightSource[] lightSourceArray0 = new LightSource[2];
      BigDecimal bigDecimal0 = BigDecimal.ONE;
      CatalogLight catalogLight0 = new CatalogLight("h&i*+\"", "h&i*+\"", "h&i*+\"", (Content) null, (Content) null, (-2263.3643F), (-2263.3643F), (-2263.3643F), (-2263.3643F), true, lightSourceArray0, (float[][]) null, "h&i*+\"", true, bigDecimal0, bigDecimal0);
      HomeLight homeLight0 = new HomeLight(catalogLight0);
      HomeLight homeLight1 = new HomeLight(homeLight0);
      Integer integer0 = new Integer((-1568));
      homeLight1.setColor(integer0);
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      LightSource[] lightSourceArray0 = new LightSource[5];
      BigDecimal bigDecimal0 = BigDecimal.TEN;
      BigDecimal bigDecimal1 = new BigDecimal(271);
      CatalogLight catalogLight0 = new CatalogLight((String) null, (String) null, "", (Content) null, (Content) null, 0, 271, (-815.0011F), 0.3926991F, true, lightSourceArray0, (float[][]) null, "Ae\"}n@URHupA^+VB", true, bigDecimal1, bigDecimal1);
      HomeLight homeLight0 = new HomeLight(catalogLight0);
      HomeLight homeLight1 = homeLight0.clone();
      catalogLight0.getCategory();
      homeLight1.setY((-2066.2F));
      homeLight0.setName("/");
      homeLight0.getShininess();
      homeLight1.getPriceValueAddedTaxIncluded();
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      LightSource[] lightSourceArray0 = new LightSource[2];
      LightSource lightSource0 = new LightSource((-815.0F), 0.0F, 0.0F, 114);
      lightSourceArray0[0] = lightSource0;
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      LightSource lightSource1 = new LightSource((-694.0F), 2965.994F, (-127.62969F), 0);
      BigDecimal bigDecimal0 = BigDecimal.ZERO;
      CatalogLight catalogLight0 = new CatalogLight("h&*+\"", "h&*+\"", "h&*+\"", (Content) null, (Content) null, (-815.0F), 0.3926991F, (-694.0F), (-694.0F), true, lightSourceArray0, (float[][]) null, "h&*+\"", true, bigDecimal0, bigDecimal0);
      HomeLight homeLight0 = new HomeLight(catalogLight0);
      HomeLight homeLight1 = new HomeLight(homeLight0);
      HomeLight homeLight2 = homeLight1.clone();
      HomePieceOfFurniture homePieceOfFurniture0 = homeLight2.clone();
      homeLight2.setModelMirrored(true);
      homeLight2.isNameCenterPointAt(0, 127.82604F, 527.5414F);
      BigDecimal bigDecimal1 = BigDecimal.ONE;
      bigDecimal0.divideToIntegralValue(bigDecimal1);
      homeLight0.setY((-127.62969F));
      homeLight0.getGroundElevation();
      homePieceOfFurniture0.getDepth();
      homeLight2.setNameAngle(1430.9785F);
      HomePieceOfFurniture.SortableProperty homePieceOfFurniture_SortableProperty0 = HomePieceOfFurniture.SortableProperty.HEIGHT;
      HomePieceOfFurniture.getFurnitureComparator(homePieceOfFurniture_SortableProperty0);
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      LightSource[] lightSourceArray0 = new LightSource[4];
      BigDecimal bigDecimal0 = BigDecimal.TEN;
      CatalogLight catalogLight0 = new CatalogLight("/", "/", "/", (Content) null, (Content) null, 0.3926991F, 92.121765F, 233.10785F, (-727.8896F), true, lightSourceArray0, (float[][]) null, "{L", true, bigDecimal0, bigDecimal0);
      HomeLight homeLight0 = new HomeLight(catalogLight0);
      catalogLight0.getCategory();
      catalogLight0.setCategory((FurnitureCategory) null);
      HomeLight homeLight1 = new HomeLight(catalogLight0);
      homeLight1.getIcon();
      Integer integer0 = new Integer((-1204));
      homeLight1.isBottomRightPointAt((-727.8896F), 301.6161F, 3709.4194F);
      HomeLight homeLight2 = homeLight1.clone();
      homeLight2.isBottomLeftPointAt(92.121765F, 938.408F, 1295.3629F);
      Integer integer1 = new Integer((-1204));
      Integer integer2 = new Integer((-1204));
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      LightSource[] lightSourceArray0 = new LightSource[2];
      LightSource lightSource0 = new LightSource((-813.1042F), 0.0F, 0.0F, Integer.MAX_VALUE);
      lightSourceArray0[0] = lightSource0;
      LightSource lightSource1 = new LightSource(Integer.MAX_VALUE, (-2278.261F), (-694.0F), 8192);
      BigDecimal bigDecimal0 = BigDecimal.TEN;
      CatalogLight catalogLight0 = new CatalogLight("/", "PRICE_VALUE_ADDED_TAX_INCLUDED", "PRICE_VALUE_ADDED_TAX_INCLUDED", (Content) null, (Content) null, 23.119429F, 114.0F, 233.10785F, (-694.0F), true, lightSourceArray0, (float[][]) null, "{L", true, bigDecimal0, bigDecimal0);
      HomeLight homeLight0 = new HomeLight(catalogLight0);
      HomeLight homeLight1 = homeLight0.clone();
      HomePieceOfFurniture.SortableProperty.values();
      FileSystemHandling.shouldAllThrowIOExceptions();
      Level level0 = new Level("PRICE_VALUE_ADDED_TAX_INCLUDED", (-323.7F), (-323.7F), (-260.58734F));
      homeLight1.isAtLevel(level0);
      homeLight0.isPointAt(472.863F, 2826.3784F, 2826.3784F);
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      LightSource[] lightSourceArray0 = new LightSource[2];
      LightSource lightSource0 = new LightSource((-815.0011F), 0.0F, 0.0F, (-1541));
      lightSourceArray0[0] = lightSource0;
      LightSource lightSource1 = new LightSource((-694.0F), 2965.994F, (-127.32604F), 0);
      lightSourceArray0[1] = lightSource1;
      BigDecimal bigDecimal0 = BigDecimal.TEN;
      CatalogLight catalogLight0 = new CatalogLight("h&*+\"", "h&*+\"", "h&*+\"", (Content) null, (Content) null, (-815.0011F), 0.3926991F, (-694.0F), (-694.0F), true, lightSourceArray0, (float[][]) null, "h&*+\"", true, bigDecimal0, bigDecimal0);
      HomeLight homeLight0 = new HomeLight(catalogLight0);
      HomeLight homeLight1 = homeLight0.clone();
      homeLight0.getTexture();
      homeLight1.setTexture((HomeTexture) null);
      HomePieceOfFurniture homePieceOfFurniture0 = homeLight1.clone();
      homePieceOfFurniture0.setModelMirrored(true);
      homeLight1.isTexturable();
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      LightSource[] lightSourceArray0 = new LightSource[2];
      LightSource lightSource0 = new LightSource((-814.4827F), 0.0F, 0.0F, 114);
      LightSource lightSource1 = new LightSource((-694.0F), (-814.4827F), (-127.62969F), 0);
      lightSourceArray0[0] = lightSource1;
      BigDecimal bigDecimal0 = BigDecimal.TEN;
      CatalogLight catalogLight0 = new CatalogLight("h&9+\"", "h&9+\"", "h&9+\"", (Content) null, (Content) null, (-814.4827F), (-814.4827F), (-694.0F), (-694.0F), true, lightSourceArray0, (float[][]) null, "h&9+\"", true, bigDecimal0, bigDecimal0);
      HomeLight homeLight0 = new HomeLight(catalogLight0);
      homeLight0.setNameAngle(114);
      HomeLight homeLight1 = homeLight0.clone();
      homeLight1.isPointAt(1.0F, 0.0F, (-814.4827F));
      homeLight0.setName("h&9+\"");
      homeLight0.setModelMirrored(true);
      homeLight0.setDescription("> ");
      HomeLight homeLight2 = homeLight1.clone();
      homeLight0.getLevel();
      homeLight2.setLevel((Level) null);
      HomeLight homeLight3 = new HomeLight(homeLight0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      homeLight3.setX(233.10785F);
      homeLight2.isTopRightPointAt(114.0F, 0.3926991F, 0.0F);
      homeLight3.getName();
      homeLight3.getHeight();
      homeLight1.getModel();
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      String string0 = "h&9+\"";
      LightSource[] lightSourceArray0 = new LightSource[2];
      LightSource lightSource0 = new LightSource((-815.0F), 0.0F, 0.0F, 114);
      lightSourceArray0[0] = lightSource0;
      LightSource lightSource1 = new LightSource((-694.0F), 0.36957806F, (-127.62969F), 0);
      lightSourceArray0[1] = lightSource1;
      BigDecimal bigDecimal0 = BigDecimal.TEN;
      CatalogLight catalogLight0 = new CatalogLight("h&9+\"", "h&9+\"", "h&9+\"", (Content) null, (Content) null, (-815.0F), 0.36957806F, (-694.0F), (-694.0F), false, lightSourceArray0, (float[][]) null, "h&9+\"", false, bigDecimal0, bigDecimal0);
      HomeLight homeLight0 = new HomeLight(catalogLight0);
      HomeLight homeLight1 = homeLight0.clone();
      HomePieceOfFurniture homePieceOfFurniture0 = homeLight1.clone();
      homeLight1.isPointAt(114, (-815.0F), 114);
      // Undeclared exception!
      try { 
        homePieceOfFurniture0.setHeight((-38.0F));
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Piece isn't resizable
         //
         verifyException("com.eteks.sweethome3d.model.HomePieceOfFurniture", e);
      }
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      LightSource[] lightSourceArray0 = new LightSource[2];
      LightSource lightSource0 = new LightSource((-815.0011F), 0.0F, 0.0F, (-1541));
      lightSourceArray0[0] = lightSource0;
      LightSource lightSource1 = new LightSource((-815.0011F), (-1548.6785F), 0.18478903F, 8192);
      BigDecimal bigDecimal0 = BigDecimal.TEN;
      CatalogLight catalogLight0 = new CatalogLight("WIDTH", "WIDTH", "E.@l^;]}$=be2#-uXze", (Content) null, (Content) null, 0.0F, 1.0F, 2965.994F, (-727.8896F), true, lightSourceArray0, (float[][]) null, "E.@l^;]}$=be2#-uXze", true, bigDecimal0, bigDecimal0);
      HomeLight homeLight0 = new HomeLight(catalogLight0);
      HomeLight homeLight1 = homeLight0.clone();
      homeLight1.setName("E.@l^;]}$=be2#-uXze");
      homeLight0.getTexture();
      HomeLight homeLight2 = new HomeLight(homeLight1);
      homeLight2.setTexture((HomeTexture) null);
      HomePieceOfFurniture homePieceOfFurniture0 = homeLight2.clone();
      homePieceOfFurniture0.getShininess();
      Float float0 = new Float(2.0F);
      homeLight0.setShininess(float0);
      homeLight2.getNameStyle();
      homeLight2.getTexture();
      homeLight0.getNameYOffset();
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      LightSource[] lightSourceArray0 = new LightSource[2];
      LightSource lightSource0 = new LightSource((-815.0F), 0.0F, 0.0F, 128);
      lightSourceArray0[0] = lightSource0;
      LightSource lightSource1 = new LightSource((-1.0F), (-2755.2034F), 815.0F, 128);
      BigDecimal bigDecimal0 = BigDecimal.ZERO;
      CatalogLight catalogLight0 = new CatalogLight("com.eteks.sweethome3d.model.HomePieceOfFurniture$2", (String) null, "com.eteks.sweethome3d.model.HomePieceOfFurniture$2", (Content) null, (Content) null, (-815.0F), 128, 2965.994F, 2169.8F, true, lightSourceArray0, (float[][]) null, (String) null, true, bigDecimal0, bigDecimal0);
      HomeLight homeLight0 = new HomeLight(catalogLight0);
      HomeLight homeLight1 = homeLight0.clone();
      HomePieceOfFurniture homePieceOfFurniture0 = new HomePieceOfFurniture(homeLight0);
      homePieceOfFurniture0.clone();
      homePieceOfFurniture0.setModelMirrored(true);
      homeLight0.isNameCenterPointAt(0.0F, 2965.994F, 0.0F);
      homeLight0.setY((-1344.4F));
      homeLight0.getGroundElevation();
      homeLight1.getStaircaseCutOutShape();
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      LightSource[] lightSourceArray0 = new LightSource[2];
      LightSource lightSource0 = new LightSource((-815.0F), 0.0F, 0.0F, 114);
      lightSourceArray0[0] = lightSource0;
      LightSource lightSource1 = new LightSource((-1.0F), (-2755.2034F), 815.0F, 114);
      BigDecimal bigDecimal0 = BigDecimal.ZERO;
      CatalogLight catalogLight0 = new CatalogLight("com.eteks.sweethome3d.model.HomePieceOfFurniture$2", (String) null, "com.eteks.sweethome3d.model.HomePieceOfFurniture$2", (Content) null, (Content) null, (-815.0F), 114, 2965.994F, 2169.8F, true, lightSourceArray0, (float[][]) null, (String) null, true, bigDecimal0, bigDecimal0);
      HomeLight homeLight0 = new HomeLight(catalogLight0);
      BigDecimal bigDecimal1 = BigDecimal.ZERO;
      bigDecimal0.compareTo(bigDecimal1);
      HomeLight homeLight1 = homeLight0.clone();
      HomeLight homeLight2 = homeLight0.clone();
      HomePieceOfFurniture homePieceOfFurniture0 = homeLight0.clone();
      homePieceOfFurniture0.setModelMirrored(true);
      homeLight1.isNameCenterPointAt(1002.0F, 0, 233.10785F);
      homeLight2.setY(233.10785F);
      homeLight2.getGroundElevation();
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      LightSource[] lightSourceArray0 = new LightSource[2];
      LightSource lightSource0 = new LightSource((-815.0011F), 0.0F, 0.0F, (-1541));
      lightSourceArray0[0] = lightSource0;
      LightSource lightSource1 = new LightSource((-1541), (-2278.261F), (-727.8896F), 8192);
      BigDecimal bigDecimal0 = BigDecimal.TEN;
      CatalogLight catalogLight0 = new CatalogLight("/", "PRICE_VALUE_ADDED_TAX_INCLUDED", "PRICE_VALUE_ADDED_TAX_INCLUDED", (Content) null, (Content) null, 0.3926991F, 114.0F, 233.10785F, (-727.8896F), true, lightSourceArray0, (float[][]) null, "{L", true, bigDecimal0, bigDecimal0);
      HomeLight homeLight0 = new HomeLight(catalogLight0);
      catalogLight0.getCategory();
      catalogLight0.setCategory((FurnitureCategory) null);
      HomeLight homeLight1 = homeLight0.clone();
      homeLight1.clone();
      homeLight0.setDescription("com.eteks.sweethome3d.model.HomePieceOfFurniture$12");
      homeLight1.clone();
      homeLight1.getLevel();
      homeLight0.setLevel((Level) null);
      homeLight0.isBackFaceShown();
      homeLight0.setX(2.0F);
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      LightSource[] lightSourceArray0 = new LightSource[2];
      LightSource lightSource0 = new LightSource((-815.0011F), 0.0F, 0.0F, (-1541));
      lightSourceArray0[0] = lightSource0;
      LightSource lightSource1 = new LightSource((-694.0F), 2965.994F, (-127.62969F), 0);
      lightSourceArray0[1] = lightSource1;
      BigDecimal bigDecimal0 = BigDecimal.TEN;
      CatalogLight catalogLight0 = new CatalogLight("h&*+\"", "h&*+\"", "h&*+\"", (Content) null, (Content) null, (-815.0011F), 0.3926991F, (-694.0F), (-694.0F), true, lightSourceArray0, (float[][]) null, "h&*+\"", true, bigDecimal0, bigDecimal0);
      HomeLight homeLight0 = new HomeLight(catalogLight0);
      HomeLight homeLight1 = homeLight0.clone();
      homeLight0.getTexture();
      homeLight1.setTexture((HomeTexture) null);
      HomePieceOfFurniture homePieceOfFurniture0 = homeLight1.clone();
      homePieceOfFurniture0.setModelMirrored(true);
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      LightSource[] lightSourceArray0 = new LightSource[2];
      LightSource lightSource0 = new LightSource((-813.1042F), 0.0F, 0.0F, Integer.MAX_VALUE);
      lightSourceArray0[0] = lightSource0;
      LightSource lightSource1 = new LightSource(Integer.MAX_VALUE, (-2278.261F), (-694.0F), 8192);
      BigDecimal bigDecimal0 = BigDecimal.TEN;
      CatalogLight catalogLight0 = new CatalogLight("/", "PRICE_VALUE_ADDED_TAX_INCLUDED", "PRICE_VALUE_ADDED_TAX_INCLUDED", (Content) null, (Content) null, 23.119429F, 114.0F, 233.10785F, (-694.0F), true, lightSourceArray0, (float[][]) null, "{L", true, bigDecimal0, bigDecimal0);
      HomeLight homeLight0 = new HomeLight(catalogLight0);
      HomeLight homeLight1 = homeLight0.clone();
      HomePieceOfFurniture homePieceOfFurniture0 = homeLight1.clone();
      homeLight1.setModelMirrored(true);
      homePieceOfFurniture0.setDescription("PRICE_VALUE_ADDED_TAX_INCLUDED");
      HomePieceOfFurniture homePieceOfFurniture1 = homeLight1.clone();
      homePieceOfFurniture0.getHeight();
      homePieceOfFurniture1.getAngle();
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      LightSource[] lightSourceArray0 = new LightSource[2];
      LightSource lightSource0 = new LightSource((-815.0011F), 0.0F, 0.0F, (-1541));
      lightSourceArray0[0] = lightSource0;
      LightSource lightSource1 = new LightSource((-1541), (-2278.261F), (-727.8896F), (-1541));
      BigDecimal bigDecimal0 = BigDecimal.TEN;
      CatalogLight catalogLight0 = new CatalogLight("/", "/", "/", (Content) null, (Content) null, 0.3926991F, 92.121765F, 233.10785F, (-727.8896F), true, lightSourceArray0, (float[][]) null, "{L", true, bigDecimal0, bigDecimal0);
      HomeLight homeLight0 = new HomeLight(catalogLight0);
      catalogLight0.getCategory();
      catalogLight0.setCategory((FurnitureCategory) null);
      HomePieceOfFurniture homePieceOfFurniture0 = homeLight0.clone();
      homePieceOfFurniture0.setNameVisible(true);
      homeLight0.clone();
      homeLight0.setWidth(0.3926991F);
      homeLight0.getName();
      Float float0 = new Float((-2717.519200408411));
      homeLight0.setShininess(float0);
      HomeLight homeLight1 = homeLight0.clone();
      homeLight1.getCatalogId();
      homeLight1.isBottomRightPointAt((-2278.261F), (-464.77F), (-721.7658F));
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      LightSource[] lightSourceArray0 = new LightSource[2];
      LightSource lightSource0 = new LightSource((-815.0F), 0.0F, 0.0F, 114);
      lightSourceArray0[1] = lightSource0;
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      LightSource lightSource1 = new LightSource((-694.0F), 2965.994F, (-127.62969F), 0);
      BigDecimal bigDecimal0 = BigDecimal.TEN;
      CatalogLight catalogLight0 = new CatalogLight("h&*+\"", "h&*+\"", "h&*+\"", (Content) null, (Content) null, (-815.0F), 0.3926991F, (-694.0F), (-694.0F), true, lightSourceArray0, (float[][]) null, "h&*+\"", true, bigDecimal0, bigDecimal0);
      HomeLight homeLight0 = new HomeLight(catalogLight0);
      HomePieceOfFurniture homePieceOfFurniture0 = new HomePieceOfFurniture(homeLight0);
      homeLight0.clone();
      BigInteger bigInteger0 = BigInteger.ONE;
      BigDecimal bigDecimal1 = new BigDecimal(bigInteger0);
      MathContext mathContext0 = MathContext.DECIMAL32;
      bigDecimal0.multiply(bigDecimal1, mathContext0);
      homeLight0.setModelMirrored(true);
      homePieceOfFurniture0.move(0.0F, 0.0F);
      homeLight0.getNameStyle();
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      LightSource[] lightSourceArray0 = new LightSource[5];
      BigDecimal bigDecimal0 = BigDecimal.TEN;
      CatalogLight catalogLight0 = new CatalogLight("/", "/", "/", (Content) null, (Content) null, 0.3926991F, 0.3926991F, 0.3926991F, (-815.0011F), true, lightSourceArray0, (float[][]) null, "{L", true, bigDecimal0, bigDecimal0);
      catalogLight0.getCategory();
      HomeLight homeLight0 = new HomeLight(catalogLight0);
      catalogLight0.getCategory();
      homeLight0.isPointAt((-437.3305F), 0.18478903F, 0.18478903F);
      homeLight0.setName("/");
      homeLight0.setModelMirrored(true);
      HomePieceOfFurniture homePieceOfFurniture0 = homeLight0.clone();
      homePieceOfFurniture0.setModelMirrored(false);
      homeLight0.isBottomLeftPointAt(0.3926991F, 0.18478903F, 0.3926991F);
      homeLight0.getPoints();
      homeLight0.setVisible(false);
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      LightSource[] lightSourceArray0 = new LightSource[2];
      LightSource lightSource0 = new LightSource((-815.0F), 0.0F, 0.0F, 114);
      lightSourceArray0[0] = lightSource0;
      int int0 = 0;
      BigDecimal bigDecimal0 = BigDecimal.TEN;
      float float0 = 425.0F;
      CatalogLight catalogLight0 = new CatalogLight("h&*+\"", "h&*+\"", "h&*+\"", (Content) null, (Content) null, 162.0F, 425.0F, 0, (-3269.8F), true, lightSourceArray0, (float[][]) null, "NAME_X_OFFSET", true, bigDecimal0, bigDecimal0);
      HomeLight homeLight0 = new HomeLight(catalogLight0);
      HomeLight homeLight1 = homeLight0.clone();
      homeLight0.clone();
      homeLight1.setNameXOffset(0.0F);
      homeLight0.setModelMirrored(false);
      // Undeclared exception!
      try { 
        HomePieceOfFurniture.Property.valueOf("h&*+\"");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant com.eteks.sweethome3d.model.HomePieceOfFurniture.Property.h&*+\"
         //
         verifyException("java.lang.Enum", e);
      }
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      LightSource[] lightSourceArray0 = new LightSource[5];
      BigDecimal bigDecimal0 = BigDecimal.ONE;
      CatalogLight catalogLight0 = new CatalogLight("/", "/", "/", (Content) null, (Content) null, 0.3926991F, 0.3926991F, 0.3926991F, (-815.0011F), true, lightSourceArray0, (float[][]) null, "/", true, bigDecimal0, bigDecimal0);
      catalogLight0.getCategory();
      catalogLight0.setCategory((FurnitureCategory) null);
      HomeLight homeLight0 = new HomeLight(catalogLight0);
      CatalogLight catalogLight1 = new CatalogLight("/", "4(b#i[4ur:", "/", (Content) null, (Content) null, (-694.0F), 0.054564774F, 2164.7F, (-1.0F), false, lightSourceArray0, (float[][]) null, "/", true, bigDecimal0, bigDecimal0);
      String[] stringArray0 = new String[1];
      stringArray0[0] = "/";
      Long long0 = new Long(7025L);
      Float float0 = new Float((float) 7025L);
      CatalogLight catalogLight2 = new CatalogLight("", "/", "", "4(b#i[4ur:", stringArray0, long0, float0, (Content) null, (Content) null, (Content) null, 7025L, (-1052.77F), (-815.0011F), (-815.0011F), false, lightSourceArray0, "/", (float[][]) null, "Nw'wDftRT'w0@7", true, true, false, bigDecimal0, bigDecimal0, "/");
      HomeLight homeLight1 = new HomeLight(catalogLight2);
      homeLight0.getColor();
      // Undeclared exception!
      try { 
        homeLight1.setColor((Integer) null);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Piece isn't texturable
         //
         verifyException("com.eteks.sweethome3d.model.HomePieceOfFurniture", e);
      }
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      LightSource[] lightSourceArray0 = new LightSource[12];
      BigDecimal bigDecimal0 = BigDecimal.TEN;
      CatalogLight catalogLight0 = new CatalogLight("h&*+\"", "h&*+\"", "h&*+\"", (Content) null, (Content) null, (-815.0011F), 1.1803F, (-694.0F), (-694.0F), true, lightSourceArray0, (float[][]) null, "h&*+\"", true, bigDecimal0, bigDecimal0);
      HomeLight homeLight0 = new HomeLight(catalogLight0);
      HomeLight homeLight1 = homeLight0.clone();
      HomeLight homeLight2 = homeLight1.clone();
      HomeLight homeLight3 = new HomeLight(catalogLight0);
      homeLight3.setName("");
      homeLight0.getTexture();
      homeLight1.setTexture((HomeTexture) null);
      Float float0 = new Float((-815.0011F));
      homeLight3.setShininess(float0);
      HomePieceOfFurniture homePieceOfFurniture0 = homeLight3.clone();
      Float float1 = homePieceOfFurniture0.getShininess();
      homeLight2.setShininess(float1);
      homeLight2.isTopRightPointAt(0.0F, (-815.0011F), 0.0F);
      homeLight1.getModelRotation();
      homeLight2.isBackFaceShown();
      homeLight2.getY();
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      LightSource[] lightSourceArray0 = new LightSource[2];
      LightSource lightSource0 = new LightSource((-815.0F), 0.0F, 0.0F, 78);
      lightSourceArray0[0] = lightSource0;
      LightSource lightSource1 = new LightSource((-694.0F), 2965.994F, (-127.62969F), 0);
      lightSourceArray0[1] = lightSource1;
      BigDecimal bigDecimal0 = BigDecimal.TEN;
      Sash[] sashArray0 = new Sash[4];
      Sash sash0 = new Sash((-1.0F), (-187.9F), 0.3926991F, 1599.0F, (-127.62969F));
      sashArray0[0] = sash0;
      Sash sash1 = new Sash(78, (-815.0F), 1060.91F, (-1851.05F), 0);
      sashArray0[1] = sash1;
      Sash sash2 = new Sash(2761.1174F, (-289.2334F), 1.0F, 1898.1688F, (-1.0F));
      sashArray0[2] = sash2;
      Sash sash3 = new Sash(0, 0.0F, 1.0F, (-289.2334F), 2965.994F);
      sashArray0[3] = sash3;
      Integer integer0 = new Integer(0);
      CatalogDoorOrWindow catalogDoorOrWindow0 = new CatalogDoorOrWindow("8Ggp{'HEKwdoXu1vmcB", (Content) null, (Content) null, 2965.994F, (-289.2334F), (-1.0F), (-1094.2F), false, 1060.91F, (-1.0F), sashArray0, integer0, (float[][]) null, false, 0.0F, true);
      HomeDoorOrWindow homeDoorOrWindow0 = new HomeDoorOrWindow(catalogDoorOrWindow0);
      HomeDoorOrWindow homeDoorOrWindow1 = homeDoorOrWindow0.clone();
      homeDoorOrWindow1.setNameYOffset((-815.0F));
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      LightSource[] lightSourceArray0 = new LightSource[2];
      LightSource lightSource0 = new LightSource((-815.0F), 0.0F, 0.0F, 114);
      lightSourceArray0[0] = lightSource0;
      LightSource lightSource1 = new LightSource((-1.0F), (-2755.2034F), 815.0F, 114);
      BigDecimal bigDecimal0 = BigDecimal.ZERO;
      CatalogLight catalogLight0 = new CatalogLight("com.eteks.sweethome3d.model.HomePieceOfFurniture$2", (String) null, "com.eteks.sweethome3d.model.HomePieceOfFurniture$2", (Content) null, (Content) null, (-815.0F), 114, 2965.994F, 2169.8F, true, lightSourceArray0, (float[][]) null, (String) null, true, bigDecimal0, bigDecimal0);
      HomeLight homeLight0 = new HomeLight(catalogLight0);
      BigDecimal bigDecimal1 = BigDecimal.ZERO;
      bigDecimal0.compareTo(bigDecimal1);
      HomeLight homeLight1 = homeLight0.clone();
      HomePieceOfFurniture homePieceOfFurniture0 = new HomePieceOfFurniture(homeLight0);
      HomePieceOfFurniture homePieceOfFurniture1 = homePieceOfFurniture0.clone();
      homePieceOfFurniture0.setModelMirrored(true);
      homePieceOfFurniture1.move(1599.0F, (-3732.8054F));
      homeLight1.isBottomLeftPointAt(1.0F, (-815.0F), 1416.034F);
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      LightSource[] lightSourceArray0 = new LightSource[2];
      LightSource lightSource0 = new LightSource((-815.0F), 0.0F, 0.0F, 114);
      lightSourceArray0[0] = lightSource0;
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      LightSource lightSource1 = new LightSource((-694.0F), 2965.994F, (-127.62969F), 0);
      BigDecimal bigDecimal0 = BigDecimal.TEN;
      CatalogLight catalogLight0 = new CatalogLight("h&*+\"", "h&*+\"", "h&*+\"", (Content) null, (Content) null, (-815.0F), 0.3926991F, (-694.0F), (-694.0F), true, lightSourceArray0, (float[][]) null, "h&*+\"", true, bigDecimal0, bigDecimal0);
      HomeLight homeLight0 = new HomeLight(catalogLight0);
      HomeLight homeLight1 = homeLight0.clone();
      HomePieceOfFurniture homePieceOfFurniture0 = homeLight1.clone();
      homePieceOfFurniture0.setModelMirrored(true);
      homePieceOfFurniture0.isNameCenterPointAt(1002.0F, (-127.62969F), 1707.7522F);
      homePieceOfFurniture0.setY((-694.0F));
      float float0 = new Integer(0);
      homePieceOfFurniture0.setElevation(0.0F);
      System.setCurrentTimeMillis(114);
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      LightSource[] lightSourceArray0 = new LightSource[2];
      BigDecimal bigDecimal0 = BigDecimal.ZERO;
      CatalogLight catalogLight0 = new CatalogLight("h&+)`\"", "h&+)`\"", "h&+)`\"", (Content) null, (Content) null, (-2263.0F), (-2263.0F), (-2263.0F), (-2263.0F), false, lightSourceArray0, (float[][]) null, "h&+)`\"", false, bigDecimal0, bigDecimal0);
      HomeLight homeLight0 = new HomeLight(catalogLight0);
      homeLight0.isPointAt((-2263.0F), 2719.4F, 2263.0F);
      homeLight0.getColor();
      homeLight0.setColor((Integer) null);
      homeLight0.getModelRotation();
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      LightSource[] lightSourceArray0 = new LightSource[12];
      BigDecimal bigDecimal0 = BigDecimal.TEN;
      bigDecimal0.byteValueExact();
      CatalogLight catalogLight0 = new CatalogLight("h&*+\"", "h&*+\"", "h&*+\"", (Content) null, (Content) null, 587.23944F, 587.23944F, 587.23944F, 587.23944F, true, lightSourceArray0, (float[][]) null, "h&*+\"", true, bigDecimal0, bigDecimal0);
      HomeLight homeLight0 = new HomeLight(catalogLight0);
      homeLight0.setNameYOffset(587.23944F);
      homeLight0.setNameVisible(true);
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      LightSource[] lightSourceArray0 = new LightSource[2];
      LightSource lightSource0 = new LightSource((-815.0F), 0.0F, 0.0F, 114);
      lightSourceArray0[0] = lightSource0;
      LightSource lightSource1 = new LightSource(407.5F, 0.36957806F, (-127.62969F), 0);
      lightSourceArray0[1] = lightSource1;
      BigDecimal bigDecimal0 = BigDecimal.TEN;
      CatalogLight catalogLight0 = new CatalogLight("h&9+\"", "h&9+\"", "h&9+\"", (Content) null, (Content) null, (-815.0F), 0.36957806F, 407.5F, 407.5F, true, lightSourceArray0, (float[][]) null, "h&9+\"", true, bigDecimal0, bigDecimal0);
      HomeLight homeLight0 = new HomeLight(catalogLight0);
      HomeLight homeLight1 = homeLight0.clone();
      homeLight0.setNameAngle((-215.5262F));
      HomeLight homeLight2 = homeLight0.clone();
      homeLight2.setAngle(1.0F);
      homeLight1.isPointAt(114, (-815.0F), 114);
      homeLight1.setName("h&9+\"");
      homeLight2.setModelMirrored(true);
      homeLight0.isBottomLeftPointAt(0, 407.5F, 407.5F);
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      LightSource[] lightSourceArray0 = new LightSource[4];
      BigDecimal bigDecimal0 = BigDecimal.TEN;
      CatalogLight catalogLight0 = new CatalogLight("/", "/", "/", (Content) null, (Content) null, 0.3926991F, 92.121765F, 233.10785F, 1.0F, true, lightSourceArray0, (float[][]) null, "{L", true, bigDecimal0, bigDecimal0);
      HomeLight homeLight0 = new HomeLight(catalogLight0);
      catalogLight0.getCategory();
      catalogLight0.setCategory((FurnitureCategory) null);
      HomeLight homeLight1 = homeLight0.clone();
      homeLight1.getIcon();
      Integer integer0 = new Integer((-1204));
      homeLight1.isBottomRightPointAt(0.0F, 301.6161F, 3709.4194F);
      HomeLight homeLight2 = homeLight1.clone();
      homeLight2.isTopRightPointAt(233.10785F, 1.0F, 731.74036F);
      homeLight2.getModelRotation();
      homeLight1.getTexture();
      homeLight0.setTexture((HomeTexture) null);
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      LightSource[] lightSourceArray0 = new LightSource[2];
      BigDecimal bigDecimal0 = BigDecimal.ONE;
      CatalogLight catalogLight0 = new CatalogLight("h&i*+\"", "h&i*+\"", "h&i*+\"", (Content) null, (Content) null, (-2263.3643F), (-2263.3643F), (-2263.3643F), (-2263.3643F), true, lightSourceArray0, (float[][]) null, "h&i*+\"", true, bigDecimal0, bigDecimal0);
      HomeLight homeLight0 = new HomeLight(catalogLight0);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Float float0 = new Float(6.283185307179586);
      Float float1 = new Float((-3132.28F));
      HomeLight homeLight1 = homeLight0.clone();
      homeLight1.setShininess(float1);
      homeLight1.setDepth((-2263.3643F));
      homeLight0.setNameXOffset((-3132.28F));
      Float float2 = new Float((-2378.190197));
      homeLight1.setShininess(float2);
      homeLight0.getNameXOffset();
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      URL uRL0 = MockURL.getFileExample();
      URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      URL uRL1 = MockURL.URL(uRL0, "Invalid URL base for JAR entry", uRLStreamHandler0);
      ResourceURLContent resourceURLContent0 = new ResourceURLContent(uRL1, true);
      LightSource[] lightSourceArray0 = new LightSource[6];
      LightSource lightSource0 = new LightSource(0.0F, 563.43F, 563.43F, 901);
      lightSourceArray0[0] = lightSource0;
      Float float0 = new Float(127027.3506062376);
      LightSource lightSource1 = new LightSource(0.0F, 0.0F, 4519.7793F, 901, float0);
      lightSourceArray0[1] = lightSource1;
      Float float1 = new Float((-460.2F));
      LightSource lightSource2 = new LightSource((-460.2F), 0.3926991F, 733.0F, (-3473), float1);
      lightSourceArray0[2] = lightSource2;
      Float float2 = new Float(43888.02588786379);
      LightSource lightSource3 = new LightSource(2.0F, 0.59015F, (-3473), (-624), float2);
      lightSourceArray0[3] = lightSource3;
      LightSource lightSource4 = new LightSource(563.43F, 1595.0009F, 4519.7793F, 901);
      lightSourceArray0[4] = lightSource4;
      LightSource lightSource5 = new LightSource(1.0F, 1799.27F, (-3473), 14, float0);
      lightSourceArray0[5] = lightSource5;
      BigInteger bigInteger0 = BigInteger.ZERO;
      BigDecimal bigDecimal0 = new BigDecimal(bigInteger0);
      CatalogLight catalogLight0 = new CatalogLight(" r", "vlZ", "vlZ", resourceURLContent0, resourceURLContent0, resourceURLContent0, 563.43F, 563.43F, 0.0F, 563.43F, true, lightSourceArray0, (float[][]) null, "", false, false, true, bigDecimal0, bigDecimal0);
      HomeLight homeLight0 = new HomeLight(catalogLight0);
      HomeLight homeLight1 = homeLight0.clone();
      homeLight1.getPrice();
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      LightSource[] lightSourceArray0 = new LightSource[2];
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      LightSource lightSource0 = new LightSource((-815.0F), 0.28356954F, 0.28356954F, 114);
      LightSource lightSource1 = new LightSource(2965.994F, (-1.0F), (-127.62969F), 114);
      BigDecimal bigDecimal0 = BigDecimal.ZERO;
      CatalogLight catalogLight0 = new CatalogLight("h&*+\"", "h&*+\"", "h&*+\"", (Content) null, (Content) null, 0.28356954F, 0.28356954F, 2965.994F, (-1.0F), false, lightSourceArray0, (float[][]) null, "ELEVATION", true, bigDecimal0, bigDecimal0);
      HomeLight homeLight0 = new HomeLight(catalogLight0);
      homeLight0.setY((-174));
      HomeLight homeLight1 = homeLight0.clone();
      homeLight1.isTopLeftPointAt((-127.62969F), (-174), 2965.994F);
      homeLight1.intersectsRectangle(1.0F, (-1581.4954F), (-1581.4954F), 3737.9102F);
      homeLight1.setModelMirrored(false);
      HomeLight homeLight2 = new HomeLight(homeLight1);
      HomeLight homeLight3 = homeLight2.clone();
      homeLight0.setMovable(false);
      homeLight3.isNameCenterPointAt((-852.8F), (-1179.0F), (-1179.0F));
      homeLight2.getPoints();
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      LightSource[] lightSourceArray0 = new LightSource[2];
      LightSource lightSource0 = new LightSource((-815.0F), 0.0F, 0.0F, 114);
      lightSourceArray0[0] = lightSource0;
      LightSource lightSource1 = new LightSource((-694.0F), (-815.0F), (-127.62969F), 0);
      lightSourceArray0[0] = lightSource1;
      BigDecimal bigDecimal0 = BigDecimal.TEN;
      CatalogLight catalogLight0 = new CatalogLight("h&9+\"", "h&9+\"", "h&9+\"", (Content) null, (Content) null, (-815.0F), (-815.0F), (-694.0F), (-694.0F), true, lightSourceArray0, (float[][]) null, "h&9+\"", true, bigDecimal0, bigDecimal0);
      HomeLight homeLight0 = new HomeLight(catalogLight0);
      HomeLight homeLight1 = homeLight0.clone();
      HomePieceOfFurniture homePieceOfFurniture0 = homeLight1.clone();
      homeLight1.isPointAt(114, (-815.0F), 114);
      homePieceOfFurniture0.setModelMirrored(true);
      homeLight0.isBottomLeftPointAt(0, 0, (-694.0F));
      homePieceOfFurniture0.isTopRightPointAt((-815.0F), (-127.62969F), (-815.0F));
      homeLight1.getHeight();
      homeLight0.setElevation(0.0F);
      homeLight0.getIcon();
      homePieceOfFurniture0.getPlanIcon();
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      float float0 = 0.3926991F;
      LightSource[] lightSourceArray0 = new LightSource[2];
      int int0 = 114;
      LightSource lightSource0 = new LightSource((-815.0F), 0.0F, 0.0F, 114);
      lightSourceArray0[0] = lightSource0;
      LightSource lightSource1 = new LightSource((-694.0F), 2965.994F, (-127.62969F), 0);
      lightSourceArray0[1] = lightSource1;
      BigDecimal bigDecimal0 = new BigDecimal(0);
      CatalogLight catalogLight0 = new CatalogLight("h&*+\"", "h&*+\"", "h&*+\"", (Content) null, (Content) null, (-815.0F), 0.3926991F, (-694.0F), (-694.0F), true, lightSourceArray0, (float[][]) null, "h&*+\"", true, bigDecimal0, bigDecimal0);
      HomeLight homeLight0 = new HomeLight(catalogLight0);
      HomeLight homeLight1 = homeLight0.clone();
      HomePieceOfFurniture homePieceOfFurniture0 = homeLight1.clone();
      homePieceOfFurniture0.setNameVisible(true);
      homeLight1.setNameXOffset((-1.0F));
      homeLight0.isTopRightPointAt(0, 407.5F, (-4320.624F));
      homePieceOfFurniture0.setModelMirrored(true);
      // Undeclared exception!
      try { 
        HomePieceOfFurniture.Property.valueOf("h&*+\"");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant com.eteks.sweethome3d.model.HomePieceOfFurniture.Property.h&*+\"
         //
         verifyException("java.lang.Enum", e);
      }
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      LightSource[] lightSourceArray0 = new LightSource[2];
      LightSource lightSource0 = new LightSource((-815.0F), 0.0F, 0.0F, 128);
      lightSourceArray0[0] = lightSource0;
      LightSource lightSource1 = new LightSource((-27.863897F), (-2755.2034F), 815.0F, 128);
      BigDecimal bigDecimal0 = BigDecimal.ZERO;
      CatalogLight catalogLight0 = new CatalogLight("com.eteks.sweethome3d.model.HomePieceOfFurniture$2", (String) null, "com.eteks.sweethome3d.model.HomePieceOfFurniture$2", (Content) null, (Content) null, (-815.0F), 128, 2965.994F, 2169.8F, true, lightSourceArray0, (float[][]) null, (String) null, true, bigDecimal0, bigDecimal0);
      HomeLight homeLight0 = new HomeLight(catalogLight0);
      HomeLight homeLight1 = homeLight0.clone();
      HomePieceOfFurniture homePieceOfFurniture0 = new HomePieceOfFurniture(homeLight0);
      homePieceOfFurniture0.clone();
      homePieceOfFurniture0.setModelMirrored(true);
      homeLight0.isNameCenterPointAt(0.0F, 2965.994F, 0.0F);
      homeLight0.setY((-1344.4F));
      Float float0 = new Float(2169.8F);
      homeLight1.setDepth((float) float0);
      homeLight1.getValueAddedTax();
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      LightSource[] lightSourceArray0 = new LightSource[2];
      LightSource lightSource0 = new LightSource((-815.0F), 0.0F, 0.0F, 114);
      lightSourceArray0[0] = lightSource0;
      LightSource lightSource1 = new LightSource((-694.0F), 2965.994F, (-127.62969F), 0);
      lightSourceArray0[1] = lightSource1;
      BigDecimal bigDecimal0 = BigDecimal.TEN;
      CatalogLight catalogLight0 = new CatalogLight("h&*+\"", "h&*+\"", "h&*+\"", (Content) null, (Content) null, (-815.0F), 0.3926991F, (-694.0F), (-694.0F), true, lightSourceArray0, (float[][]) null, "h&*+\"", true, bigDecimal0, bigDecimal0);
      HomeLight homeLight0 = new HomeLight(catalogLight0);
      HomeLight homeLight1 = homeLight0.clone();
      HomePieceOfFurniture homePieceOfFurniture0 = homeLight1.clone();
      homePieceOfFurniture0.setModelMirrored(true);
      homeLight1.getShininess();
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      LightSource[] lightSourceArray0 = new LightSource[14];
      BigDecimal bigDecimal0 = BigDecimal.ONE;
      CatalogLight catalogLight0 = new CatalogLight("(%", "(%", "(%", (Content) null, (Content) null, (-815.0011F), (-815.0011F), (-815.0011F), (-815.0011F), false, lightSourceArray0, (float[][]) null, "(%", false, bigDecimal0, bigDecimal0);
      Float float0 = new Float((-815.0011F));
      HomeLight homeLight0 = new HomeLight(catalogLight0);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      homeLight0.isTopLeftPointAt((-2513.15F), (-2513.15F), (-2324.5999F));
      homeLight0.setShininess(float0);
      homeLight0.setShininess(float0);
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      LightSource[] lightSourceArray0 = new LightSource[2];
      LightSource lightSource0 = new LightSource((-815.0F), 0.0F, 0.0F, 114);
      lightSourceArray0[0] = lightSource0;
      LightSource lightSource1 = new LightSource((-1.0F), (-2755.2034F), 815.0F, 114);
      BigDecimal bigDecimal0 = BigDecimal.ZERO;
      CatalogLight catalogLight0 = new CatalogLight("com.eteks.sweethome3d.model.HomePieceOfFurniture$2", (String) null, "com.eteks.sweethome3d.model.HomePieceOfFurniture$2", (Content) null, (Content) null, (-815.0F), 114, 2965.994F, 2169.8F, true, lightSourceArray0, (float[][]) null, (String) null, true, bigDecimal0, bigDecimal0);
      HomeLight homeLight0 = new HomeLight(catalogLight0);
      homeLight0.clone();
      HomePieceOfFurniture homePieceOfFurniture0 = new HomePieceOfFurniture(homeLight0);
      HomePieceOfFurniture homePieceOfFurniture1 = homePieceOfFurniture0.clone();
      homePieceOfFurniture0.setModelMirrored(true);
      homePieceOfFurniture1.move(1599.0F, (-3732.8054F));
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      LightSource[] lightSourceArray0 = new LightSource[12];
      BigDecimal bigDecimal0 = BigDecimal.TEN;
      CatalogLight catalogLight0 = new CatalogLight("h&*+\"", "h&*+\"", "h&*+\"", (Content) null, (Content) null, 587.23944F, 587.23944F, 587.23944F, 587.23944F, true, lightSourceArray0, (float[][]) null, "h&*+\"", true, bigDecimal0, bigDecimal0);
      HomeLight homeLight0 = new HomeLight(catalogLight0);
      homeLight0.setAngle(587.23944F);
      homeLight0.setNameVisible(true);
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      LightSource[] lightSourceArray0 = new LightSource[2];
      LightSource lightSource0 = new LightSource((-815.0011F), (-727.8896F), (-727.8896F), (-1541));
      lightSourceArray0[0] = lightSource0;
      LightSource lightSource1 = new LightSource((-1541), (-2278.261F), (-727.8896F), (-1541));
      BigDecimal bigDecimal0 = BigDecimal.TEN;
      CatalogLight catalogLight0 = new CatalogLight("/", "/", "/", (Content) null, (Content) null, 0.3926991F, 92.121765F, 233.10785F, (-727.8896F), true, lightSourceArray0, (float[][]) null, "{L", true, bigDecimal0, bigDecimal0);
      catalogLight0.getCategory();
      catalogLight0.setCategory((FurnitureCategory) null);
      HomeLight homeLight0 = new HomeLight(catalogLight0);
      homeLight0.getIcon();
      HomeLight homeLight1 = homeLight0.clone();
      homeLight1.setWidth(0.5F);
      homeLight0.setDescription("/");
      homeLight0.setHeight((-815.0011F));
      Integer integer0 = new Integer(3320);
      Integer integer1 = new Integer(3320);
      homeLight0.setColor((Integer) null);
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      LightSource[] lightSourceArray0 = new LightSource[5];
      BigDecimal bigDecimal0 = BigDecimal.ONE;
      CatalogLight catalogLight0 = new CatalogLight("/", "/", "/", (Content) null, (Content) null, 0.3926991F, 0.3926991F, 0.3926991F, (-815.0011F), true, lightSourceArray0, (float[][]) null, "/", true, bigDecimal0, bigDecimal0);
      catalogLight0.getCategory();
      catalogLight0.setCategory((FurnitureCategory) null);
      HomeLight homeLight0 = new HomeLight(catalogLight0);
      CatalogLight catalogLight1 = new CatalogLight("/", "4(b#i[4ur:", "/", (Content) null, (Content) null, (-694.0F), 0.054564774F, 2164.7F, (-1.0F), false, lightSourceArray0, (float[][]) null, "/", true, bigDecimal0, bigDecimal0);
      String[] stringArray0 = new String[1];
      stringArray0[0] = "/";
      Long long0 = Long.valueOf(7025L);
      Float float0 = new Float((float) 7025L);
      CatalogLight catalogLight2 = new CatalogLight("4(b#i[4ur:", "/", "4(b#i[4ur:", "4(b#i[4ur:", stringArray0, long0, float0, (Content) null, (Content) null, (Content) null, 7025L, (-1052.77F), (-815.0011F), (-815.0011F), false, lightSourceArray0, "/", (float[][]) null, "Nw'wDftRT'w0@7", true, true, false, bigDecimal0, bigDecimal0, "/");
      HomeLight homeLight1 = new HomeLight(catalogLight2);
      homeLight0.getColor();
      // Undeclared exception!
      try { 
        homeLight1.setColor((Integer) null);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Piece isn't texturable
         //
         verifyException("com.eteks.sweethome3d.model.HomePieceOfFurniture", e);
      }
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      LightSource[] lightSourceArray0 = new LightSource[2];
      BigDecimal bigDecimal0 = BigDecimal.TEN;
      CatalogLight catalogLight0 = new CatalogLight("(%", "(%", "(%", (Content) null, (Content) null, (-815.0011F), (-815.0011F), (-815.0011F), (-815.0011F), false, lightSourceArray0, (float[][]) null, "(%", false, bigDecimal0, bigDecimal0);
      HomeLight homeLight0 = new HomeLight(catalogLight0);
      HomeLight homeLight1 = homeLight0.clone();
      homeLight0.getModelRotation();
      homeLight1.getPriceValueAddedTaxIncluded();
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      LightSource[] lightSourceArray0 = new LightSource[8];
      BigDecimal bigDecimal0 = BigDecimal.TEN;
      CatalogLight catalogLight0 = new CatalogLight("h&*+\"", "h&*+\"", "h&*+\"", (Content) null, (Content) null, (-1193.1042F), (-1193.1042F), (-1193.1042F), (-1193.1042F), true, lightSourceArray0, (float[][]) null, "h&*+\"", true, bigDecimal0, bigDecimal0);
      HomeLight homeLight0 = new HomeLight(catalogLight0);
      homeLight0.setNameXOffset((-1193.1042F));
      catalogLight0.setCategory((FurnitureCategory) null);
      HomeLight homeLight1 = homeLight0.clone();
      homeLight1.isNameCenterPointAt(2.3748727F, (-974.0342F), (-1193.1042F));
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      LightSource[] lightSourceArray0 = new LightSource[1];
      Float float0 = new Float(0.0);
      Float float1 = new Float(4.8656383F);
      String[] stringArray0 = new String[7];
      stringArray0[0] = "(%";
      stringArray0[1] = "(%";
      stringArray0[2] = "(%";
      stringArray0[3] = "(%";
      stringArray0[4] = "(%";
      stringArray0[5] = "Content isn't a JAR entry";
      stringArray0[6] = "(%";
      Long long0 = new Long((-1L));
      BigDecimal bigDecimal0 = BigDecimal.ONE;
      BigDecimal bigDecimal1 = BigDecimal.TEN;
      CatalogLight catalogLight0 = new CatalogLight("(%", "Content isn't a JAR entry", "Content isn't a JAR entry", "x7", stringArray0, long0, float1, (Content) null, (Content) null, (Content) null, 4.8656383F, 2233.23F, 883.0F, 1561.2765F, true, lightSourceArray0, "(%", (float[][]) null, "jjM[&wC4@Itbda4", false, true, false, bigDecimal0, bigDecimal1, "xSL$6exP/BgtRGBf");
      HomeLight homeLight0 = new HomeLight(catalogLight0);
      HomeLight homeLight1 = homeLight0.clone();
      // Undeclared exception!
      try { 
        homeLight1.setShininess(float1);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Piece isn't texturable
         //
         verifyException("com.eteks.sweethome3d.model.HomePieceOfFurniture", e);
      }
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      LightSource[] lightSourceArray0 = new LightSource[2];
      LightSource lightSource0 = new LightSource((-815.0011F), 0.0F, 0.0F, (-1541));
      lightSourceArray0[0] = lightSource0;
      LightSource lightSource1 = new LightSource((-1541), (-2278.261F), (-727.8896F), 8192);
      BigDecimal bigDecimal0 = BigDecimal.TEN;
      CatalogLight catalogLight0 = new CatalogLight("/", "PRICE_VALUE_ADDED_TAX_INCLUDED", "PRICE_VALUE_ADDED_TAX_INCLUDED", (Content) null, (Content) null, 0.3926991F, 114.0F, 233.10785F, (-727.8896F), true, lightSourceArray0, (float[][]) null, "{L", true, bigDecimal0, bigDecimal0);
      HomeLight homeLight0 = new HomeLight(catalogLight0);
      HomeLight homeLight1 = homeLight0.clone();
      homeLight1.clone();
      homeLight0.setDescription("com.eteks.sweethome3d.model.HomePieceOfFurniture$12");
      homeLight1.clone();
      homeLight1.getLevel();
      homeLight0.setLevel((Level) null);
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      LightSource[] lightSourceArray0 = new LightSource[12];
      CatalogLight catalogLight0 = new CatalogLight((String) null, (String) null, "", (Content) null, (Content) null, 0.3805792F, 1697.44F, 1697.44F, (-4796.1F), true, lightSourceArray0, (float[][]) null, "", false, (BigDecimal) null, (BigDecimal) null);
      HomeLight homeLight0 = new HomeLight(catalogLight0);
      HomeLight homeLight1 = new HomeLight(catalogLight0);
      homeLight1.getPriceValueAddedTaxIncluded();
      Level level0 = new Level((String) null, (-235.55F), 1.0F, 252.89F);
      homeLight1.isAtLevel(level0);
      homeLight0.getModelRotation();
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      LightSource[] lightSourceArray0 = new LightSource[5];
      BigDecimal bigDecimal0 = BigDecimal.TEN;
      CatalogLight catalogLight0 = new CatalogLight("/", "{L", (String) null, (Content) null, (Content) null, 1998.094F, (-1025.4883F), 1108.6598F, (-1025.4883F), true, lightSourceArray0, (float[][]) null, "", true, (BigDecimal) null, bigDecimal0);
      catalogLight0.getCategory();
      catalogLight0.setCategory((FurnitureCategory) null);
      HomeLight homeLight0 = new HomeLight(catalogLight0);
      homeLight0.setWidth(0.3926991F);
      homeLight0.setHeight(0.054564774F);
      HomeLight homeLight1 = homeLight0.clone();
      homeLight1.isNameCenterPointAt(887.75903F, (-3149.6F), 423.9751F);
      homeLight0.getPrice();
      homeLight0.getX();
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      LightSource[] lightSourceArray0 = new LightSource[2];
      LightSource lightSource0 = new LightSource((-815.0F), 0.0F, 0.0F, 114);
      lightSourceArray0[0] = lightSource0;
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      LightSource lightSource1 = new LightSource((-694.0F), 2965.994F, (-127.62969F), 0);
      BigDecimal bigDecimal0 = BigDecimal.TEN;
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      CatalogLight catalogLight0 = new CatalogLight("h&*+\"", "h&*+\"", "h&*+\"", (Content) null, (Content) null, (-815.0F), 0.3926991F, (-694.0F), (-694.0F), true, lightSourceArray0, (float[][]) null, "h&*+\"", true, bigDecimal0, bigDecimal0);
      HomeLight homeLight0 = new HomeLight(catalogLight0);
      HomeLight homeLight1 = homeLight0.clone();
      HomePieceOfFurniture homePieceOfFurniture0 = homeLight1.clone();
      homePieceOfFurniture0.setModelMirrored(true);
      homePieceOfFurniture0.isNameCenterPointAt(1002.0F, (-127.62969F), 1707.7522F);
      homePieceOfFurniture0.setY((-694.0F));
      Integer integer0 = new Integer(0);
      homePieceOfFurniture0.setElevation(0.0F);
      System.setCurrentTimeMillis(114);
      homePieceOfFurniture0.setNameYOffset(482.0F);
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      LightSource[] lightSourceArray0 = new LightSource[2];
      BigDecimal bigDecimal0 = BigDecimal.TEN;
      CatalogLight catalogLight0 = new CatalogLight("(%", "(%", "(%", (Content) null, (Content) null, (-815.0011F), (-815.0011F), (-815.0011F), (-815.0011F), false, lightSourceArray0, (float[][]) null, "(%", false, bigDecimal0, bigDecimal0);
      HomeLight homeLight0 = new HomeLight(catalogLight0);
      HomeLight homeLight1 = homeLight0.clone();
      homeLight1.setAngle(0.0F);
      homeLight0.move((-815.0011F), 0.0F);
      homeLight0.setAngle(0.85871536F);
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      LightSource[] lightSourceArray0 = new LightSource[1];
      BigDecimal bigDecimal0 = BigDecimal.ONE;
      CatalogLight catalogLight0 = new CatalogLight("h&i*+\"", "h&i*+\"", "h&i*+\"", (Content) null, (Content) null, (-2263.3643F), (-2263.3643F), (-2263.3643F), (-2263.3643F), true, lightSourceArray0, (float[][]) null, "h&i*+\"", true, bigDecimal0, bigDecimal0);
      HomeLight homeLight0 = new HomeLight(catalogLight0);
      homeLight0.setColor((Integer) null);
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      LightSource[] lightSourceArray0 = new LightSource[1];
      BigDecimal bigDecimal0 = BigDecimal.ONE;
      CatalogLight catalogLight0 = new CatalogLight("h&i*+\"", "h&i*+\"", "h&i*+\"", (Content) null, (Content) null, (-2264.8018F), (-2264.8018F), (-2264.8018F), (-2264.8018F), false, lightSourceArray0, (float[][]) null, "h&i*+\"", false, bigDecimal0, bigDecimal0);
      HomeLight homeLight0 = new HomeLight(catalogLight0);
      homeLight0.setColor((Integer) null);
      homeLight0.isBottomRightPointAt((-1.0F), (-1.0F), (-2264.8018F));
      homeLight0.getLevel();
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      LightSource[] lightSourceArray0 = new LightSource[10];
      BigDecimal bigDecimal0 = BigDecimal.ONE;
      BigDecimal bigDecimal1 = BigDecimal.ONE;
      CatalogLight catalogLight0 = new CatalogLight("16(CN/1u0K|7:$df>", "10.4", (String) null, (Content) null, (Content) null, 0.16906716F, 0.54474217F, 5.229896F, 1.0F, false, lightSourceArray0, (float[][]) null, "16(CN/1u0K|7:$df>", true, bigDecimal1, bigDecimal1);
      Float float0 = new Float(1.0F);
      HomeLight homeLight0 = new HomeLight(catalogLight0);
      Float float1 = new Float(1.0F);
      homeLight0.setShininess(float1);
      Float float2 = homeLight0.getShininess();
      homeLight0.setShininess(float2);
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      LightSource[] lightSourceArray0 = new LightSource[2];
      LightSource lightSource0 = new LightSource((-815.0F), 0.0F, 0.0F, 114);
      lightSourceArray0[0] = lightSource0;
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      LightSource lightSource1 = new LightSource((-694.0F), 2965.994F, (-127.62969F), 0);
      BigDecimal bigDecimal0 = BigDecimal.TEN;
      CatalogLight catalogLight0 = new CatalogLight("h&*+\"", "h&*+\"", "h&*+\"", (Content) null, (Content) null, (-815.0F), 0.3926991F, (-694.0F), (-694.0F), true, lightSourceArray0, (float[][]) null, "h&*+\"", true, bigDecimal0, bigDecimal0);
      HomeLight homeLight0 = new HomeLight(catalogLight0);
      HomeLight homeLight1 = homeLight0.clone();
      HomePieceOfFurniture homePieceOfFurniture0 = homeLight1.clone();
      homePieceOfFurniture0.setModelMirrored(true);
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)13;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      homePieceOfFurniture0.containsPoint(1.0F, 0.0F, 0.0F);
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      LightSource[] lightSourceArray0 = new LightSource[2];
      LightSource lightSource0 = new LightSource((-815.0F), 0.0F, 0.0F, 128);
      lightSourceArray0[0] = lightSource0;
      LightSource lightSource1 = new LightSource((-27.863897F), (-2755.2034F), 815.0F, 128);
      BigDecimal bigDecimal0 = BigDecimal.ZERO;
      CatalogLight catalogLight0 = new CatalogLight("com.eteks.sweethome3d.model.HomePieceOfFurniture$2", (String) null, "com.eteks.sweethome3d.model.HomePieceOfFurniture$2", (Content) null, (Content) null, (-815.0F), 128, 2965.994F, 2169.8F, true, lightSourceArray0, (float[][]) null, (String) null, true, bigDecimal0, bigDecimal0);
      HomeLight homeLight0 = new HomeLight(catalogLight0);
      HomeLight homeLight1 = homeLight0.clone();
      HomePieceOfFurniture homePieceOfFurniture0 = new HomePieceOfFurniture(homeLight0);
      homePieceOfFurniture0.clone();
      homePieceOfFurniture0.setModelMirrored(true);
      homeLight0.isNameCenterPointAt(0.0F, 2965.994F, 0.0F);
      homeLight0.setY((-1344.4F));
      homeLight0.getGroundElevation();
      homeLight1.setDepth(2169.8F);
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      LightSource[] lightSourceArray0 = new LightSource[2];
      LightSource lightSource0 = new LightSource((-815.0F), 0.0F, 0.0F, 114);
      lightSourceArray0[0] = lightSource0;
      LightSource lightSource1 = new LightSource(407.5F, 0.36957806F, (-127.62969F), 114);
      lightSourceArray0[1] = lightSource1;
      BigDecimal bigDecimal0 = BigDecimal.TEN;
      CatalogLight catalogLight0 = new CatalogLight("h&9+\"", "h&9+\"", "h&9+\"", (Content) null, (Content) null, (-815.0F), 0.36957806F, 407.5F, 407.5F, true, lightSourceArray0, (float[][]) null, "h&9+\"", true, bigDecimal0, bigDecimal0);
      HomeLight homeLight0 = new HomeLight(catalogLight0);
      HomeLight homeLight1 = homeLight0.clone();
      homeLight0.setNameAngle((-215.5262F));
      HomeLight homeLight2 = homeLight0.clone();
      HomePieceOfFurniture homePieceOfFurniture0 = new HomePieceOfFurniture(homeLight1);
      HomePieceOfFurniture homePieceOfFurniture1 = homePieceOfFurniture0.clone();
      homePieceOfFurniture1.setNameYOffset(0.0F);
      homePieceOfFurniture1.setModelMirrored(false);
      homeLight0.isNameCenterPointAt(0.0F, (-2702.1F), 407.5F);
      homeLight2.setY(0.36957806F);
      HomeLight homeLight3 = new HomeLight(homeLight1);
      homePieceOfFurniture0.getPriceValueAddedTaxIncluded();
      homeLight3.getGroundElevation();
      homeLight3.setDepth(0.36957806F);
      homeLight0.isPointAt(1.0F, (-802.0745F), (-1529.0F));
      homePieceOfFurniture0.getPriceValueAddedTaxIncluded();
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      LightSource[] lightSourceArray0 = new LightSource[2];
      BigDecimal bigDecimal0 = BigDecimal.TEN;
      CatalogLight catalogLight0 = new CatalogLight("h&+)`\"", "h&+)`\"", "h&+)`\"", (Content) null, (Content) null, (-2263.3643F), (-2263.3643F), (-2263.3643F), (-2263.3643F), false, lightSourceArray0, (float[][]) null, "h&+)`\"", false, bigDecimal0, bigDecimal0);
      HomeLight homeLight0 = new HomeLight(catalogLight0);
      homeLight0.setName("h&+)`\"");
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      LightSource[] lightSourceArray0 = new LightSource[1];
      BigDecimal bigDecimal0 = BigDecimal.ONE;
      CatalogLight catalogLight0 = new CatalogLight("h&i*+\"", "h&i*+\"", "h&i*+\"", (Content) null, (Content) null, (-2265.2297F), (-2265.2297F), (-2265.2297F), (-2265.2297F), false, lightSourceArray0, (float[][]) null, "h&i*+\"", false, bigDecimal0, bigDecimal0);
      HomeLight homeLight0 = new HomeLight(catalogLight0);
      homeLight0.setName("0u,< `1>R$Ag<RH");
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      LightSource[] lightSourceArray0 = new LightSource[2];
      BigDecimal bigDecimal0 = new BigDecimal(0);
      CatalogLight catalogLight0 = new CatalogLight("h&*+\"", "h&*+\"", "h&*+\"", (Content) null, (Content) null, (-815.0011F), (-815.0011F), (-815.0011F), (-815.0011F), true, lightSourceArray0, (float[][]) null, "h&*+\"", true, bigDecimal0, bigDecimal0);
      HomeLight homeLight0 = new HomeLight(catalogLight0);
      homeLight0.setNameAngle((-815.0011F));
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      LightSource[] lightSourceArray0 = new LightSource[8];
      BigDecimal bigDecimal0 = BigDecimal.TEN;
      CatalogLight catalogLight0 = new CatalogLight("h&*+\"", "h&*+\"", "h&*+\"", (Content) null, (Content) null, (-1193.1042F), (-1193.1042F), (-1193.1042F), (-1193.1042F), true, lightSourceArray0, (float[][]) null, "h&*+\"", true, bigDecimal0, bigDecimal0);
      HomeLight homeLight0 = new HomeLight(catalogLight0);
      HomeLight homeLight1 = homeLight0.clone();
      homeLight1.setModelMirrored(false);
      homeLight1.isBottomLeftPointAt(23.69071F, 23.69071F, (-1.0F));
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      LightSource[] lightSourceArray0 = new LightSource[2];
      BigDecimal bigDecimal0 = BigDecimal.TEN;
      CatalogLight catalogLight0 = new CatalogLight("h&*+\"", "h&*+\"", "h&*+\"", (Content) null, (Content) null, (-815.0011F), 1.1802855F, (-689.75726F), (-689.75726F), false, lightSourceArray0, (float[][]) null, "h&*+\"", false, bigDecimal0, bigDecimal0);
      HomeLight homeLight0 = new HomeLight(catalogLight0);
      HomeLight homeLight1 = homeLight0.clone();
      homeLight0.getTexture();
      HomePieceOfFurniture homePieceOfFurniture0 = homeLight1.clone();
      Float float0 = new Float((-689.75726F));
      homeLight1.setAngle(1.1802855F);
      homeLight0.isTopRightPointAt(3.4028235E38F, (-427.82852F), 3.4028235E38F);
      homePieceOfFurniture0.getModelRotation();
      Random.setNextRandom(3459);
      HomePieceOfFurniture homePieceOfFurniture1 = homeLight1.clone();
      homePieceOfFurniture1.getNameYOffset();
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      LightSource[] lightSourceArray0 = new LightSource[2];
      BigDecimal bigDecimal0 = BigDecimal.ZERO;
      CatalogLight catalogLight0 = new CatalogLight("h&+)`\"", "h&+)`\"", "h&+)`\"", (Content) null, (Content) null, (-2263.0F), (-2263.0F), (-2263.0F), (-2263.0F), false, lightSourceArray0, (float[][]) null, "h&+)`\"", false, bigDecimal0, bigDecimal0);
      HomeLight homeLight0 = new HomeLight(catalogLight0);
      homeLight0.getGroundElevation();
      homeLight0.getShininess();
      homeLight0.getValueAddedTaxPercentage();
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      LightSource[] lightSourceArray0 = new LightSource[2];
      LightSource lightSource0 = new LightSource((-815.0F), 0.0F, 0.0F, 114);
      lightSourceArray0[0] = lightSource0;
      LightSource lightSource1 = new LightSource((-694.0F), 2965.994F, (-127.62969F), 0);
      BigDecimal bigDecimal0 = BigDecimal.TEN;
      CatalogLight catalogLight0 = new CatalogLight("h&*+\"", (String) null, (String) null, (Content) null, (Content) null, 0, (-815.0F), 0.5F, (-127.62969F), true, lightSourceArray0, (float[][]) null, "DkK}fB", true, bigDecimal0, bigDecimal0);
      HomeLight homeLight0 = new HomeLight(catalogLight0);
      HomeLight homeLight1 = homeLight0.clone();
      HomePieceOfFurniture homePieceOfFurniture0 = homeLight0.clone();
      HomeLight homeLight2 = homeLight0.clone();
      homeLight2.isPointAt(0.3926991F, (-1413.0F), 3617.2566F);
      homePieceOfFurniture0.setModelMirrored(true);
      homeLight1.getCurrency();
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      LightSource[] lightSourceArray0 = new LightSource[12];
      BigDecimal bigDecimal0 = BigDecimal.TEN;
      CatalogLight catalogLight0 = new CatalogLight("h&*+\"", "h&*+\"", "h&*+\"", (Content) null, (Content) null, (-815.0011F), 1.1803F, (-694.0F), (-694.0F), true, lightSourceArray0, (float[][]) null, "h&*+\"", true, bigDecimal0, bigDecimal0);
      HomeLight homeLight0 = new HomeLight(catalogLight0);
      HomeLight homeLight1 = new HomeLight(homeLight0);
      HomeLight homeLight2 = homeLight1.clone();
      homeLight1.setVisible(false);
      homeLight2.setNameXOffset((-489.0F));
      homeLight2.setMovable(true);
      homeLight0.getTexture();
      homeLight2.clone();
      HomeLight homeLight3 = new HomeLight(homeLight1);
      homeLight3.setNameAngle(1707.7522F);
      Integer integer0 = new Integer(498);
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      LightSource[] lightSourceArray0 = new LightSource[2];
      LightSource lightSource0 = new LightSource((-815.0F), 0.0F, 0.0F, 114);
      lightSourceArray0[0] = lightSource0;
      LightSource lightSource1 = new LightSource((-694.0F), 0.36957806F, (-127.62969F), 0);
      lightSourceArray0[1] = lightSource1;
      BigDecimal bigDecimal0 = BigDecimal.TEN;
      CatalogLight catalogLight0 = new CatalogLight("h&9+\"", "h&9+\"", "h&9+\"", (Content) null, (Content) null, (-815.0F), 0.36957806F, (-694.0F), (-694.0F), true, lightSourceArray0, (float[][]) null, "h&9+\"", true, bigDecimal0, bigDecimal0);
      HomeLight homeLight0 = new HomeLight(catalogLight0);
      HomeLight homeLight1 = homeLight0.clone();
      HomePieceOfFurniture homePieceOfFurniture0 = homeLight1.clone();
      homeLight1.isPointAt(114, (-815.0F), 114);
      homeLight1.setName("h&9+\"");
      homePieceOfFurniture0.setModelMirrored(true);
      homeLight0.isBottomLeftPointAt(0, 407.5F, (-694.0F));
      Integer integer0 = new Integer(2146617363);
      homePieceOfFurniture0.setColor(integer0);
      homeLight0.getIcon();
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      LightSource[] lightSourceArray0 = new LightSource[4];
      BigDecimal bigDecimal0 = BigDecimal.TEN;
      URL uRL0 = MockURL.getFtpExample();
      URLContent uRLContent0 = new URLContent(uRL0);
      BigDecimal bigDecimal1 = new BigDecimal((-2566));
      CatalogLight catalogLight0 = new CatalogLight("'={4jP[rO{Z", "com.eteks.sweethome3d.tools.TemporaryURLContent", "N_wD8_;(T", uRLContent0, uRLContent0, 1208.0677F, 0.3926991F, 0.3926991F, (-727.8896F), true, lightSourceArray0, (float[][]) null, "os.name", true, bigDecimal0, bigDecimal1);
      catalogLight0.getCategory();
      catalogLight0.setCategory((FurnitureCategory) null);
      HomeLight homeLight0 = new HomeLight(catalogLight0);
      homeLight0.getIcon();
      homeLight0.setWidth((-727.8896F));
      homeLight0.setHeight(879.8F);
      HomeLight homeLight1 = homeLight0.clone();
      HomeLight homeLight2 = new HomeLight(homeLight1);
      homeLight2.isNameCenterPointAt((-15.6620655F), 0.6073009F, (-727.8896F));
      homeLight1.getPoints();
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      LightSource[] lightSourceArray0 = new LightSource[14];
      BigDecimal bigDecimal0 = BigDecimal.ONE;
      CatalogLight catalogLight0 = new CatalogLight("(%", "(%", "(%", (Content) null, (Content) null, (-815.0011F), (-815.0011F), (-815.0011F), (-815.0011F), false, lightSourceArray0, (float[][]) null, "(%", false, bigDecimal0, bigDecimal0);
      Float float0 = new Float((-815.0011F));
      HomeLight homeLight0 = new HomeLight(catalogLight0);
      homeLight0.isBottomLeftPointAt((-815.0011F), (-815.0011F), (-815.0011F));
      homeLight0.setShininess(float0);
      homeLight0.setAngle((-815.0011F));
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      LightSource[] lightSourceArray0 = new LightSource[2];
      LightSource lightSource0 = new LightSource((-815.0F), 0.0F, 0.0F, 114);
      lightSourceArray0[0] = lightSource0;
      LightSource lightSource1 = new LightSource(407.5F, 0.36957806F, (-127.62969F), 0);
      lightSourceArray0[1] = lightSource1;
      BigDecimal bigDecimal0 = BigDecimal.TEN;
      CatalogLight catalogLight0 = new CatalogLight("h&9+\"", "h&9+\"", "h&9+\"", (Content) null, (Content) null, (-815.0F), 0.36957806F, 407.5F, 407.5F, true, lightSourceArray0, (float[][]) null, "h&9+\"", true, bigDecimal0, bigDecimal0);
      HomeLight homeLight0 = new HomeLight(catalogLight0);
      HomeLight homeLight1 = homeLight0.clone();
      homeLight0.setNameAngle((-215.5262F));
      HomeLight homeLight2 = homeLight0.clone();
      HomePieceOfFurniture homePieceOfFurniture0 = new HomePieceOfFurniture(homeLight1);
      HomePieceOfFurniture homePieceOfFurniture1 = homePieceOfFurniture0.clone();
      homePieceOfFurniture1.setModelMirrored(false);
      homeLight0.isNameCenterPointAt(0.0F, (-2702.1F), 407.5F);
      homeLight2.setY(0.36957806F);
      HomeLight homeLight3 = new HomeLight(homeLight1);
      homeLight3.getGroundElevation();
      homeLight3.setDepth(0.36957806F);
      homeLight0.isPointAt(1.0F, (-802.0745F), (-1529.0F));
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "h&*+\"");
      LightSource[] lightSourceArray0 = new LightSource[2];
      LightSource lightSource0 = new LightSource((-815.0F), 0.0F, 0.0F, 114);
      lightSourceArray0[0] = lightSource0;
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      LightSource lightSource1 = new LightSource((-694.0F), 2965.994F, (-127.62969F), 0);
      BigDecimal bigDecimal0 = BigDecimal.TEN;
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      CatalogLight catalogLight0 = new CatalogLight("h&*+\"", "h&*+\"", "h&*+\"", (Content) null, (Content) null, (-815.0F), 0.3926991F, (-694.0F), (-694.0F), true, lightSourceArray0, (float[][]) null, "h&*+\"", true, bigDecimal0, bigDecimal0);
      HomeLight homeLight0 = new HomeLight(catalogLight0);
      HomeLight homeLight1 = homeLight0.clone();
      HomePieceOfFurniture homePieceOfFurniture0 = homeLight1.clone();
      homePieceOfFurniture0.setModelMirrored(false);
      homePieceOfFurniture0.setY((-694.0F));
      Integer integer0 = new Integer(0);
      homeLight1.isPointAt(1707.7522F, (-694.0F), 0.0F);
      homePieceOfFurniture0.setElevation(0.0F);
      System.setCurrentTimeMillis(114);
      homePieceOfFurniture0.setNameYOffset(482.0F);
      homeLight1.getPriceValueAddedTaxIncluded();
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      LightSource[] lightSourceArray0 = new LightSource[2];
      LightSource lightSource0 = new LightSource((-815.0F), 0.0F, 0.0F, 114);
      lightSourceArray0[0] = lightSource0;
      LightSource lightSource1 = new LightSource((-694.0F), 2965.994F, (-127.62969F), 0);
      lightSourceArray0[1] = lightSource1;
      BigDecimal bigDecimal0 = BigDecimal.TEN;
      CatalogLight catalogLight0 = new CatalogLight("h&*+\"", "h&*+\"", "h&*+\"", (Content) null, (Content) null, (-815.0F), 0.3926991F, (-694.0F), (-694.0F), true, lightSourceArray0, (float[][]) null, "h&*+\"", true, bigDecimal0, bigDecimal0);
      HomeLight homeLight0 = new HomeLight(catalogLight0);
      HomeLight homeLight1 = homeLight0.clone();
      HomePieceOfFurniture homePieceOfFurniture0 = homeLight1.clone();
      homePieceOfFurniture0.setNameVisible(true);
      homeLight1.setNameXOffset((-1.0F));
      homePieceOfFurniture0.setModelMirrored(true);
      // Undeclared exception!
      try { 
        HomePieceOfFurniture.Property.valueOf("ze=V\"!P$1#:4jtj%>");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant com.eteks.sweethome3d.model.HomePieceOfFurniture.Property.ze=V\"!P$1#:4jtj%>
         //
         verifyException("java.lang.Enum", e);
      }
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      LightSource[] lightSourceArray0 = new LightSource[10];
      BigDecimal bigDecimal0 = BigDecimal.TEN;
      CatalogLight catalogLight0 = new CatalogLight("h&+)`\"", "h&+)`\"", "h&+)`\"", (Content) null, (Content) null, (-2263.0F), (-2263.0F), (-2263.0F), (-2263.0F), false, lightSourceArray0, (float[][]) null, "h&+)`\"", false, bigDecimal0, bigDecimal0);
      HomeLight homeLight0 = new HomeLight(catalogLight0);
      homeLight0.setNameVisible(false);
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      LightSource[] lightSourceArray0 = new LightSource[2];
      BigDecimal bigDecimal0 = BigDecimal.TEN;
      MathContext mathContext0 = MathContext.DECIMAL32;
      bigDecimal0.negate(mathContext0);
      CatalogLight catalogLight0 = new CatalogLight((String) null, "{L", "", (Content) null, (Content) null, (Content) null, 1783.1F, 1707.7522F, (-1.0F), 2.0F, true, lightSourceArray0, "", (float[][]) null, "{L", true, true, true, bigDecimal0, bigDecimal0, "");
      HomeLight homeLight0 = new HomeLight(catalogLight0);
      HomeLight homeLight1 = homeLight0.clone();
      homeLight1.getDescription();
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      LightSource[] lightSourceArray0 = new LightSource[10];
      BigDecimal bigDecimal0 = BigDecimal.ZERO;
      CatalogLight catalogLight0 = new CatalogLight("5z;eZN", "5z;eZN", "5z;eZN", (Content) null, (Content) null, (-2263.0F), (-2263.0F), (-2263.0F), (-2263.0F), false, lightSourceArray0, (float[][]) null, "5z;eZN", false, bigDecimal0, bigDecimal0);
      HomeLight homeLight0 = new HomeLight(catalogLight0);
      homeLight0.isTopRightPointAt((-2263.0F), (-2263.0F), (-2263.0F));
      homeLight0.getGroundElevation();
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      LightSource[] lightSourceArray0 = new LightSource[8];
      BigDecimal bigDecimal0 = BigDecimal.TEN;
      CatalogLight catalogLight0 = new CatalogLight("h&*+\"", "h&*+\"", "h&*+\"", (Content) null, (Content) null, 587.23944F, 587.23944F, 587.23944F, 587.23944F, true, lightSourceArray0, (float[][]) null, "h&*+\"", true, bigDecimal0, bigDecimal0);
      HomeLight homeLight0 = new HomeLight(catalogLight0);
      HomeLight homeLight1 = new HomeLight(catalogLight0);
      homeLight1.isNameCenterPointAt(1.0F, 1186.53F, 587.23944F);
      Float float0 = new Float((double) 587.23944F);
      homeLight0.setName("h&*+\"");
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      LightSource[] lightSourceArray0 = new LightSource[2];
      LightSource lightSource0 = new LightSource((-815.0011F), 0.0F, 0.0F, (-1541));
      lightSourceArray0[0] = lightSource0;
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, true);
      BigDecimal bigDecimal0 = BigDecimal.TEN;
      CatalogLight catalogLight0 = new CatalogLight("/", "/", "/", (Content) null, (Content) null, 0.3926991F, 92.121765F, 0.3926991F, (-727.8896F), true, lightSourceArray0, (float[][]) null, "{L", true, bigDecimal0, bigDecimal0);
      HomeLight homeLight0 = new HomeLight(catalogLight0);
      catalogLight0.getCategory();
      HomeLight homeLight1 = homeLight0.clone();
      HomePieceOfFurniture homePieceOfFurniture0 = new HomePieceOfFurniture(homeLight0);
      HomePieceOfFurniture homePieceOfFurniture1 = homeLight0.clone();
      homePieceOfFurniture1.setElevation(0.0F);
      homeLight0.setModelMirrored(true);
      homeLight0.isNameCenterPointAt((-1541), 527.5414F, 0.0F);
      homeLight0.setY(4.3852863F);
      HomeLight homeLight2 = new HomeLight(homeLight0);
      homeLight1.getGroundElevation();
      homeLight0.setDepth(0.0F);
      homePieceOfFurniture1.isTopLeftPointAt(0.0F, 527.5414F, (-1541));
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      LightSource[] lightSourceArray0 = new LightSource[2];
      BigDecimal bigDecimal0 = BigDecimal.TEN;
      CatalogLight catalogLight0 = new CatalogLight("h&i*+\"", "h&i*+\"", "h&i*+\"", (Content) null, (Content) null, (-2263.3643F), (-2263.3643F), (-2263.3643F), (-2263.3643F), false, lightSourceArray0, (float[][]) null, "h&i*+\"", false, bigDecimal0, bigDecimal0);
      HomeLight homeLight0 = new HomeLight(catalogLight0);
      homeLight0.getTexture();
      homeLight0.setTexture((HomeTexture) null);
      homeLight0.setName("h&i*+\"");
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      LightSource[] lightSourceArray0 = new LightSource[1];
      BigDecimal bigDecimal0 = BigDecimal.TEN;
      CatalogLight catalogLight0 = new CatalogLight("(%", "(%", "(%", (Content) null, (Content) null, (-815.0011F), (-815.0011F), (-815.0011F), (-815.0011F), false, lightSourceArray0, (float[][]) null, "(%", false, bigDecimal0, bigDecimal0);
      HomeLight homeLight0 = new HomeLight(catalogLight0);
      homeLight0.setAngle(0.0F);
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      LightSource[] lightSourceArray0 = new LightSource[2];
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      LightSource lightSource0 = new LightSource((-815.0F), 0.28356954F, 0.28356954F, 114);
      LightSource lightSource1 = new LightSource(2965.994F, (-1.0F), (-127.62969F), 114);
      BigDecimal bigDecimal0 = BigDecimal.ZERO;
      CatalogLight catalogLight0 = new CatalogLight("h&*+\"", "h&*+\"", "h&*+\"", (Content) null, (Content) null, 0.28356954F, 0.28356954F, 2965.994F, (-694.0F), false, lightSourceArray0, (float[][]) null, "ELEVATION", true, bigDecimal0, bigDecimal0);
      HomeLight homeLight0 = new HomeLight(catalogLight0);
      homeLight0.setY((-127.62969F));
      HomeLight homeLight1 = homeLight0.clone();
      homeLight1.isTopLeftPointAt((-127.62969F), (-174), 2965.994F);
      homeLight1.intersectsRectangle(1.0F, (-1581.4954F), (-1581.4954F), 3737.9102F);
      homeLight1.setModelMirrored(false);
      HomeLight homeLight2 = new HomeLight(homeLight1);
      HomeLight homeLight3 = homeLight2.clone();
      homeLight3.isNameCenterPointAt((-852.8F), (-1179.0F), (-1179.0F));
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      LightSource[] lightSourceArray0 = new LightSource[2];
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      LightSource lightSource0 = new LightSource((-815.0F), 0.0F, 0.0F, 114);
      lightSourceArray0[0] = lightSource0;
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      LightSource lightSource1 = new LightSource((-694.0F), 2965.994F, (-127.62969F), 0);
      BigDecimal bigDecimal0 = BigDecimal.TEN;
      CatalogLight catalogLight0 = new CatalogLight("h&*+\"", "h&*+\"", "h&*+\"", (Content) null, (Content) null, (-815.0F), 0.3926991F, (-694.0F), (-694.0F), true, lightSourceArray0, (float[][]) null, "h&*+\"", true, bigDecimal0, bigDecimal0);
      HomeLight homeLight0 = new HomeLight(catalogLight0);
      HomeLight homeLight1 = homeLight0.clone();
      HomePieceOfFurniture homePieceOfFurniture0 = homeLight1.clone();
      homePieceOfFurniture0.setModelMirrored(true);
      homePieceOfFurniture0.containsPoint((-2221.3743F), (-2221.3743F), 2965.994F);
      homePieceOfFurniture0.isTopLeftPointAt(2965.994F, 0.3926991F, (-1.0F));
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      LightSource[] lightSourceArray0 = new LightSource[12];
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      BigDecimal bigDecimal0 = new BigDecimal(0);
      CatalogLight catalogLight0 = new CatalogLight("Piece isn't resizable", "h&*+\"", "Piece isn't resizable", (Content) null, (Content) null, (Content) null, (-1019.53F), 0, 2582.849F, 2582.849F, true, lightSourceArray0, (float[][]) null, "com.eteks.sweethome3d.model.CatalogLight", true, (BigDecimal) null, bigDecimal0);
      HomeLight homeLight0 = new HomeLight(catalogLight0);
      homeLight0.isBottomRightPointAt(0, (-1299.0F), (-1299.0F));
      HomeLight homeLight1 = new HomeLight(homeLight0);
      HomeLight homeLight2 = homeLight1.clone();
      homeLight2.getModelRotation();
      homeLight2.getModelRotation();
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      LightSource[] lightSourceArray0 = new LightSource[2];
      LightSource lightSource0 = new LightSource((-694.0F), 2965.994F, (-127.62969F), 114);
      BigDecimal bigDecimal0 = BigDecimal.ZERO;
      CatalogLight catalogLight0 = new CatalogLight("temporarySubFolder", "h&*+\"", "", (Content) null, (Content) null, (-127.62969F), (-815.0F), (-127.62969F), 0.3926991F, false, lightSourceArray0, (float[][]) null, "HkQ7<C4uW0E .", true, bigDecimal0, bigDecimal0);
      catalogLight0.getCategory();
      catalogLight0.setCategory((FurnitureCategory) null);
      HomeLight homeLight0 = new HomeLight(catalogLight0);
      homeLight0.getIcon();
      HomeLight homeLight1 = homeLight0.clone();
      homeLight0.setWidth(3357.0F);
      homeLight1.setDescription("");
      HomeLight homeLight2 = new HomeLight(homeLight1);
      homeLight2.setHeight(2.0F);
      homeLight0.isNameCenterPointAt(2.0F, 2.0F, 3357.0F);
      homeLight1.setNameYOffset(3357.0F);
      homeLight1.setMovable(true);
      homeLight0.getValueAddedTaxPercentage();
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      LightSource[] lightSourceArray0 = new LightSource[12];
      BigDecimal bigDecimal0 = BigDecimal.TEN;
      CatalogLight catalogLight0 = new CatalogLight("h&*+\"", "h&*+\"", "h&*+\"", (Content) null, (Content) null, 587.23944F, 587.23944F, (-694.0F), (-694.0F), true, lightSourceArray0, (float[][]) null, "h&*+\"", true, bigDecimal0, bigDecimal0);
      HomeLight homeLight0 = new HomeLight(catalogLight0);
      HomeLight homeLight1 = new HomeLight(homeLight0);
      homeLight0.setName("h&*+\"");
      CatalogTexture catalogTexture0 = new CatalogTexture("h&*+\"", "lQtv  ABDGX*PV2", (Content) null, (-1.0F), (-694.0F), "h&*+\"", false);
      HomeTexture homeTexture0 = new HomeTexture(catalogTexture0);
      homeLight1.setTexture(homeTexture0);
      homeLight1.getTexture();
      homeLight1.isNameCenterPointAt(587.23944F, 1.0F, 1.0F);
      Float float0 = new Float((double) 587.23944F);
      Float float1 = new Float((double) 587.23944F);
      homeLight1.setShininess(float1);
      // Undeclared exception!
      try { 
        HomePieceOfFurniture.Property.valueOf("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant com.eteks.sweethome3d.model.HomePieceOfFurniture.Property.
         //
         verifyException("java.lang.Enum", e);
      }
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      LightSource[] lightSourceArray0 = new LightSource[2];
      LightSource lightSource0 = new LightSource((-815.0011F), 0.0F, 0.0F, (-1541));
      lightSourceArray0[0] = lightSource0;
      LightSource lightSource1 = new LightSource((-1541), (-2278.261F), (-727.8896F), 8192);
      BigDecimal bigDecimal0 = BigDecimal.TEN;
      CatalogLight catalogLight0 = new CatalogLight("/", "PRICE_VALUE_ADDED_TAX_INCLUDED", "PRICE_VALUE_ADDED_TAX_INCLUDED", (Content) null, (Content) null, 0.3926991F, 114.0F, 233.10785F, (-727.8896F), true, lightSourceArray0, (float[][]) null, "{L", true, bigDecimal0, bigDecimal0);
      HomeLight homeLight0 = new HomeLight(catalogLight0);
      catalogLight0.getCategory();
      catalogLight0.setCategory((FurnitureCategory) null);
      HomeLight homeLight1 = homeLight0.clone();
      HomePieceOfFurniture homePieceOfFurniture0 = homeLight1.clone();
      homeLight0.setDescription("com.eteks.sweethome3d.model.HomePieceOfFurniture$12");
      homePieceOfFurniture0.move((-727.8896F), (-1058.5073F));
      homeLight0.isBottomLeftPointAt((-761.0389F), (-1541), (-2278.261F));
      homePieceOfFurniture0.getNameXOffset();
      homeLight1.getTexture();
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      LightSource[] lightSourceArray0 = new LightSource[2];
      BigDecimal bigDecimal0 = BigDecimal.ONE;
      CatalogLight catalogLight0 = new CatalogLight("h&+)`\"", "h&+)`\"", "h&+)`\"", (Content) null, (Content) null, (-2273.5383F), (-2273.5383F), (-2273.5383F), (-2273.5383F), false, lightSourceArray0, (float[][]) null, "h&+)`\"", false, bigDecimal0, bigDecimal0);
      HomeLight homeLight0 = new HomeLight(catalogLight0);
      homeLight0.setElevation(3118.517F);
      homeLight0.setVisible(false);
      homeLight0.setName("h&+)`\"");
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      LightSource[] lightSourceArray0 = new LightSource[2];
      BigDecimal bigDecimal0 = new BigDecimal(16);
      CatalogLight catalogLight0 = new CatalogLight("&i*_\"", "&i*_\"", "&i*_\"", (Content) null, (Content) null, (-815.0F), (-815.0F), (-815.0F), (-815.0F), true, lightSourceArray0, (float[][]) null, "&i*_\"", true, bigDecimal0, bigDecimal0);
      HomeLight homeLight0 = new HomeLight(catalogLight0);
      homeLight0.setVisible(true);
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      LightSource[] lightSourceArray0 = new LightSource[2];
      LightSource lightSource0 = new LightSource((-815.0F), 0.0F, 0.0F, 114);
      lightSourceArray0[0] = lightSource0;
      LightSource lightSource1 = new LightSource((-694.0F), 2965.994F, (-127.62969F), 0);
      lightSourceArray0[0] = lightSource1;
      BigDecimal bigDecimal0 = BigDecimal.TEN;
      CatalogLight catalogLight0 = new CatalogLight("h&*+\"", "h&*+\"", "h&*+\"", (Content) null, (Content) null, (-815.0F), 0.3926991F, (-694.0F), (-694.0F), true, lightSourceArray0, (float[][]) null, "h&*+\"", true, bigDecimal0, bigDecimal0);
      HomeLight homeLight0 = new HomeLight(catalogLight0);
      HomeLight homeLight1 = homeLight0.clone();
      HomePieceOfFurniture homePieceOfFurniture0 = homeLight1.clone();
      homeLight1.isPointAt(2965.994F, (-815.0F), 114);
      homePieceOfFurniture0.setModelMirrored(true);
      homeLight0.getCurrency();
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)14;
      byteArray0[1] = (byte)2;
      byteArray0[2] = (byte)6;
      byteArray0[3] = (byte)3;
      byteArray0[4] = (byte)84;
      byteArray0[5] = (byte)17;
      byteArray0[6] = (byte) (-62);
      byteArray0[7] = (byte) (-41);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      homeLight0.containsPoint(1.0F, 1599.0F, (-2755.2034F));
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      LightSource[] lightSourceArray0 = new LightSource[2];
      LightSource lightSource0 = new LightSource((-815.0011F), (-1541), 1.1802855F, (-1541));
      LightSource lightSource1 = new LightSource((-694.0F), (-1541), 1.1802855F, 33);
      BigDecimal bigDecimal0 = BigDecimal.TEN;
      CatalogLight catalogLight0 = new CatalogLight("h&*+\"", "h&*+\"", (String) null, (Content) null, (Content) null, 0.0F, (-1292.1427F), (-1541), (-1424.1735F), false, lightSourceArray0, (float[][]) null, (String) null, false, bigDecimal0, bigDecimal0);
      HomeLight homeLight0 = new HomeLight(catalogLight0);
      homeLight0.clone();
      homeLight0.setName("ff)vdKR^K");
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "");
      CatalogPieceOfFurniture catalogPieceOfFurniture0 = new CatalogPieceOfFurniture("K+BNc|=f9&%", "", ")e_Y8yZ]J<yn>", (Content) null, (Content) null, (-1968.0F), 33, (-1938.64F), 0.0F, false, false, (float[][]) null, (String) null, true, bigDecimal0, bigDecimal0);
      catalogLight0.compareTo(catalogPieceOfFurniture0);
      homeLight0.setY((-147.64618F));
      homeLight0.isBottomLeftPointAt(0.14178477F, (-127.62969F), 0.0F);
      Integer integer0 = new Integer(2146617363);
      homeLight0.setX(0);
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      LightSource[] lightSourceArray0 = new LightSource[2];
      LightSource lightSource0 = new LightSource((-815.0011F), 0.0F, 0.0F, (-1541));
      lightSourceArray0[0] = lightSource0;
      LightSource lightSource1 = new LightSource((-1541), (-2278.261F), (-727.8896F), 8192);
      BigDecimal bigDecimal0 = BigDecimal.TEN;
      CatalogLight catalogLight0 = new CatalogLight("/", "PRICE_VALUE_ADDED_TAX_INCLUDED", "PRICE_VALUE_ADDED_TAX_INCLUDED", (Content) null, (Content) null, 0.3926991F, 92.121765F, 233.10785F, (-727.8896F), true, lightSourceArray0, (float[][]) null, "{L", true, bigDecimal0, bigDecimal0);
      HomeLight homeLight0 = new HomeLight(catalogLight0);
      catalogLight0.getCategory();
      catalogLight0.setCategory((FurnitureCategory) null);
      HomeLight homeLight1 = homeLight0.clone();
      homeLight1.clone();
      HomeLight homeLight2 = new HomeLight(catalogLight0);
      homeLight2.getIcon();
      homeLight1.setNameVisible(true);
      HomeLight homeLight3 = homeLight2.clone();
      homeLight3.setWidth(0.5F);
      homeLight1.getName();
      Float float0 = new Float((-1.0));
      homeLight3.setShininess(float0);
      homeLight3.getCatalogId();
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      LightSource[] lightSourceArray0 = new LightSource[2];
      LightSource lightSource0 = new LightSource((-815.0011F), 0.0F, 0.0F, (-1541));
      lightSourceArray0[0] = lightSource0;
      LightSource lightSource1 = new LightSource((-1541), (-2278.261F), (-694.0F), 8192);
      BigDecimal bigDecimal0 = BigDecimal.TEN;
      CatalogLight catalogLight0 = new CatalogLight("/", "PRICE_VALUE_ADDED_TAX_INCLUDED", "PRICE_VALUE_ADDED_TAX_INCLUDED", (Content) null, (Content) null, 23.119429F, (-815.0011F), 233.10785F, (-694.0F), true, lightSourceArray0, (float[][]) null, "{L", true, bigDecimal0, bigDecimal0);
      HomeLight homeLight0 = new HomeLight(catalogLight0);
      HomeLight homeLight1 = homeLight0.clone();
      HomePieceOfFurniture homePieceOfFurniture0 = homeLight1.clone();
      Integer integer0 = new Integer(6);
      homeLight0.setModelMirrored(true);
      homeLight0.isNameCenterPointAt(0.0F, 23.119429F, 3916.483F);
      HomeLight homeLight2 = homeLight1.clone();
      homeLight2.setY((-609.088F));
      homePieceOfFurniture0.getGroundElevation();
      homeLight1.getDepth();
      homePieceOfFurniture0.setNameAngle(4459.2446F);
      homeLight2.getNameAngle();
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      LightSource[] lightSourceArray0 = new LightSource[12];
      BigDecimal bigDecimal0 = BigDecimal.TEN;
      CatalogLight catalogLight0 = new CatalogLight("h&*+\"", "h&*+\"", "h&*+\"", (Content) null, (Content) null, 587.23944F, 587.23944F, 587.23944F, 587.23944F, true, lightSourceArray0, (float[][]) null, "h&*+\"", true, bigDecimal0, bigDecimal0);
      HomeLight homeLight0 = new HomeLight(catalogLight0);
      homeLight0.isBottomLeftPointAt(0.3926991F, 587.23944F, (-1.0F));
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      BigDecimal bigDecimal0 = BigDecimal.TEN;
      LightSource[] lightSourceArray0 = new LightSource[2];
      LightSource lightSource0 = new LightSource(0.3926991F, 4.1423F, 4.1423F, (-1541));
      lightSourceArray0[0] = lightSource0;
      float float0 = 0.5F;
      float float1 = (-1758.0F);
      Float float2 = new Float(12.695F);
      LightSource lightSource1 = new LightSource(0.5F, (-1758.0F), 0.0F, (-1541), float2);
      lightSourceArray0[1] = lightSource1;
      BigDecimal bigDecimal1 = BigDecimal.ONE;
      CatalogLight catalogLight0 = new CatalogLight("LEVEL", "\"3|;Y6~-=>o", (String) null, (Content) null, (Content) null, (-1541), 1.0F, (-1541), 0.0F, false, lightSourceArray0, (float[][]) null, "q 8cfO#6H)`p3VXl'r", false, bigDecimal1, bigDecimal1);
      HomeLight homeLight0 = new HomeLight(catalogLight0);
      homeLight0.clone();
      Integer integer0 = new Integer((-2144227417));
      homeLight0.getValueAddedTax();
      homeLight0.setDescription((String) null);
      // Undeclared exception!
      try { 
        HomePieceOfFurniture.SortableProperty.valueOf("q 8cfO#6H)`p3VXl'r");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant com.eteks.sweethome3d.model.HomePieceOfFurniture.SortableProperty.q 8cfO#6H)`p3VXl'r
         //
         verifyException("java.lang.Enum", e);
      }
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      LightSource[] lightSourceArray0 = new LightSource[2];
      LightSource lightSource0 = new LightSource((-815.0F), 0.0F, 0.0F, 114);
      lightSourceArray0[0] = lightSource0;
      LightSource lightSource1 = new LightSource((-694.0F), 2965.994F, (-127.62969F), 0);
      lightSourceArray0[1] = lightSource1;
      BigDecimal bigDecimal0 = BigDecimal.TEN;
      CatalogLight catalogLight0 = new CatalogLight("h&*+\"", "h&*+\"", "h&*+\"", (Content) null, (Content) null, (-815.0F), 0.3926991F, (-694.0F), (-694.0F), true, lightSourceArray0, (float[][]) null, "h&*+\"", true, bigDecimal0, bigDecimal0);
      HomeLight homeLight0 = new HomeLight(catalogLight0);
      HomeLight homeLight1 = homeLight0.clone();
      HomePieceOfFurniture homePieceOfFurniture0 = homeLight1.clone();
      homeLight1.setNameXOffset((-1.0F));
      homePieceOfFurniture0.setModelMirrored(true);
      // Undeclared exception!
      try { 
        HomePieceOfFurniture.Property.valueOf("ze=V\"!P$1#:4jtj%>");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant com.eteks.sweethome3d.model.HomePieceOfFurniture.Property.ze=V\"!P$1#:4jtj%>
         //
         verifyException("java.lang.Enum", e);
      }
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      LightSource[] lightSourceArray0 = new LightSource[2];
      LightSource lightSource0 = new LightSource((-815.0011F), 0.0F, 0.0F, (-1541));
      lightSourceArray0[0] = lightSource0;
      LightSource lightSource1 = new LightSource((-1541), (-2278.261F), (-694.0F), 8192);
      BigDecimal bigDecimal0 = BigDecimal.TEN;
      CatalogLight catalogLight0 = new CatalogLight("/", "PRICE_VALUE_ADDED_TAX_INCLUDED", "PRICE_VALUE_ADDED_TAX_INCLUDED", (Content) null, (Content) null, 23.119429F, 114.0F, 233.10785F, (-694.0F), true, lightSourceArray0, (float[][]) null, "{L", true, bigDecimal0, bigDecimal0);
      HomeLight homeLight0 = new HomeLight(catalogLight0);
      HomeLight homeLight1 = homeLight0.clone();
      HomePieceOfFurniture homePieceOfFurniture0 = homeLight1.clone();
      homeLight1.setModelMirrored(true);
      homePieceOfFurniture0.setDescription("PRICE_VALUE_ADDED_TAX_INCLUDED");
      homeLight1.clone();
      homePieceOfFurniture0.getHeight();
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      LightSource[] lightSourceArray0 = new LightSource[2];
      LightSource lightSource0 = new LightSource((-694.0F), 407.50055F, (-127.6F), 0);
      lightSourceArray0[1] = lightSource0;
      BigDecimal bigDecimal0 = BigDecimal.TEN;
      CatalogLight catalogLight0 = new CatalogLight("BB)J:riT>};y", "BB)J:riT>};y", "BB)J:riT>};y", (Content) null, (Content) null, (-815.0011F), 1.2921178F, (-694.0F), (-694.0F), true, lightSourceArray0, (float[][]) null, "BB)J:riT>};y", true, bigDecimal0, bigDecimal0);
      HomeLight homeLight0 = new HomeLight(catalogLight0);
      HomeLight homeLight1 = homeLight0.clone();
      homeLight0.setVisible(false);
      homeLight0.getTexture();
      homeLight1.setTexture((HomeTexture) null);
      homeLight0.isTopRightPointAt(128.0F, 2775.0F, 0.0F);
      homeLight0.clone();
      homeLight0.getHeight();
      homeLight0.isTopLeftPointAt(0.0F, 0, 0.0F);
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      LightSource[] lightSourceArray0 = new LightSource[2];
      LightSource lightSource0 = new LightSource((-815.0F), 0.0F, 0.0F, 114);
      lightSourceArray0[0] = lightSource0;
      LightSource lightSource1 = new LightSource((-694.0F), 2965.994F, (-127.62969F), 0);
      lightSourceArray0[1] = lightSource1;
      BigDecimal bigDecimal0 = BigDecimal.ZERO;
      CatalogLight catalogLight0 = new CatalogLight("h&*+\"", "h&*+\"", "h&*+\"", (Content) null, (Content) null, (-815.0F), 0.3926991F, (-694.0F), (-694.0F), true, lightSourceArray0, (float[][]) null, "h&*+\"", true, bigDecimal0, bigDecimal0);
      HomeLight homeLight0 = new HomeLight(catalogLight0);
      homeLight0.setY((-127.62969F));
      HomePieceOfFurniture homePieceOfFurniture0 = homeLight0.clone();
      homePieceOfFurniture0.setModelMirrored(true);
      homeLight0.setVisible(false);
      HomePieceOfFurniture.SortableProperty.values();
      homePieceOfFurniture0.isMovable();
      homeLight0.getHeight();
      homePieceOfFurniture0.setHeight((-694.0F));
      homePieceOfFurniture0.isNameCenterPointAt((-127.62969F), (-694.0F), (-694.0F));
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      LightSource[] lightSourceArray0 = new LightSource[2];
      BigDecimal bigDecimal0 = BigDecimal.TEN;
      CatalogLight catalogLight0 = new CatalogLight("h&+)`\"", "h&+)`\"", "h&+)`\"", (Content) null, (Content) null, (-2263.3643F), (-2263.3643F), (-2263.3643F), (-2263.3643F), false, lightSourceArray0, (float[][]) null, "h&+)`\"", false, bigDecimal0, bigDecimal0);
      HomeLight homeLight0 = new HomeLight(catalogLight0);
      homeLight0.setNameXOffset((-774.5F));
      homeLight0.setName("h&+)`\"");
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      LightSource[] lightSourceArray0 = new LightSource[12];
      BigDecimal bigDecimal0 = BigDecimal.TEN;
      CatalogLight catalogLight0 = new CatalogLight("h&*+\"", "h&*+\"", "h&*+\"", (Content) null, (Content) null, 587.23944F, 587.23944F, 587.23944F, 587.23944F, true, lightSourceArray0, (float[][]) null, "h&*+\"", true, bigDecimal0, bigDecimal0);
      HomeLight homeLight0 = new HomeLight(catalogLight0);
      HomeLight homeLight1 = new HomeLight(homeLight0);
      homeLight0.getModelRotation();
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      LightSource[] lightSourceArray0 = new LightSource[12];
      BigDecimal bigDecimal0 = BigDecimal.TEN;
      CatalogLight catalogLight0 = new CatalogLight("h&*+\"", "h&*+\"", "h&*+\"", (Content) null, (Content) null, 587.23944F, 587.23944F, (-694.0F), (-694.0F), true, lightSourceArray0, (float[][]) null, "h&*+\"", true, bigDecimal0, bigDecimal0);
      HomeLight homeLight0 = new HomeLight(catalogLight0);
      HomeLight homeLight1 = new HomeLight(homeLight0);
      homeLight1.getTexture();
      homeLight0.setTexture((HomeTexture) null);
      homeLight0.getModelRotation();
      homeLight1.setNameVisible(true);
      homeLight1.getColor();
      homeLight1.isNameVisible();
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      LightSource[] lightSourceArray0 = new LightSource[2];
      LightSource lightSource0 = new LightSource((-815.0F), 0.0F, 0.0F, 114);
      lightSourceArray0[0] = lightSource0;
      LightSource lightSource1 = new LightSource((-694.0F), (-815.0F), (-127.62969F), 0);
      lightSourceArray0[0] = lightSource1;
      BigDecimal bigDecimal0 = BigDecimal.TEN;
      CatalogLight catalogLight0 = new CatalogLight("h&9+\"", "h&9+\"", "h&9+\"", (Content) null, (Content) null, (-815.0F), (-815.0F), (-694.0F), (-694.0F), true, lightSourceArray0, (float[][]) null, "h&9+\"", true, bigDecimal0, bigDecimal0);
      HomeLight homeLight0 = new HomeLight(catalogLight0);
      homeLight0.setNameAngle(114);
      HomeLight homeLight1 = homeLight0.clone();
      homeLight1.setAngle(0);
      homeLight1.isPointAt(1.0F, 0.0F, (-815.0F));
      homeLight0.setName("h&9+\"");
      homeLight0.setModelMirrored(true);
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)10;
      byteArray0[1] = (byte)120;
      byteArray0[2] = (byte) (-109);
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      BigDecimal bigDecimal1 = new BigDecimal(bigInteger0);
      bigDecimal0.compareTo(bigDecimal1);
      homeLight0.isBottomLeftPointAt(0.0F, 0.0F, (-1890.262F));
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      LightSource[] lightSourceArray0 = new LightSource[2];
      BigDecimal bigDecimal0 = BigDecimal.TEN;
      CatalogLight catalogLight0 = new CatalogLight("/", "/", "/", (Content) null, (Content) null, 0.3926991F, 92.121765F, 233.10785F, (-727.8896F), true, lightSourceArray0, (float[][]) null, "{L", true, bigDecimal0, bigDecimal0);
      HomeLight homeLight0 = new HomeLight(catalogLight0);
      catalogLight0.getCategory();
      catalogLight0.setCategory((FurnitureCategory) null);
      HomeLight homeLight1 = homeLight0.clone();
      homeLight1.clone();
      HomeLight homeLight2 = new HomeLight(catalogLight0);
      homeLight2.getIcon();
      Integer integer0 = new Integer((-1204));
      homeLight0.setColor(integer0);
      homeLight1.setNameVisible(true);
      homeLight2.isBottomRightPointAt(0.0F, 301.6161F, 3709.4194F);
      HomeLight homeLight3 = homeLight2.clone();
      homeLight3.setWidth((-11.086381F));
      homeLight1.getName();
      homeLight3.getCatalogId();
      homeLight2.isBottomRightPointAt(233.10785F, 114.0F, (-1204));
      homeLight3.isBottomRightPointAt(0.5F, 0.0F, (-1.0F));
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      LightSource[] lightSourceArray0 = new LightSource[2];
      LightSource lightSource0 = new LightSource((-815.0011F), 0.0F, 0.0F, (-1541));
      lightSourceArray0[0] = lightSource0;
      LightSource lightSource1 = new LightSource((-1541), (-2278.261F), (-727.8896F), 8192);
      BigDecimal bigDecimal0 = BigDecimal.TEN;
      CatalogLight catalogLight0 = new CatalogLight("/", "PRICE_VALUE_ADDED_TAX_INCLUDED", "PRICE_VALUE_ADDED_TAX_INCLUDED", (Content) null, (Content) null, 0.3926991F, 92.121765F, 233.10785F, (-727.8896F), true, lightSourceArray0, (float[][]) null, "{L", true, bigDecimal0, bigDecimal0);
      HomeLight homeLight0 = new HomeLight(catalogLight0);
      catalogLight0.getCategory();
      catalogLight0.setCategory((FurnitureCategory) null);
      HomeLight homeLight1 = homeLight0.clone();
      homeLight1.setName("D7L");
      homeLight0.setModelMirrored(false);
      homeLight0.isTopRightPointAt(8192, (-1.0F), 233.10785F);
      HomePieceOfFurniture homePieceOfFurniture0 = homeLight0.clone();
      homeLight0.getHeight();
      homeLight0.isTopLeftPointAt(1.0F, 92.121765F, 233.10785F);
      homePieceOfFurniture0.setNameVisible(false);
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      LightSource[] lightSourceArray0 = new LightSource[12];
      BigDecimal bigDecimal0 = BigDecimal.TEN;
      CatalogLight catalogLight0 = new CatalogLight("h&*+\"", "h&*+\"", "h&*+\"", (Content) null, (Content) null, 587.23944F, 587.23944F, 587.23944F, 587.23944F, true, lightSourceArray0, (float[][]) null, "h&*+\"", true, bigDecimal0, bigDecimal0);
      HomeLight homeLight0 = new HomeLight(catalogLight0);
      homeLight0.setNameVisible(true);
      homeLight0.getLevel();
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      LightSource[] lightSourceArray0 = new LightSource[2];
      LightSource lightSource0 = new LightSource((-815.0F), 0.0F, 0.0F, 78);
      lightSourceArray0[0] = lightSource0;
      LightSource lightSource1 = new LightSource((-694.0F), 2965.994F, (-127.62969F), 0);
      lightSourceArray0[1] = lightSource1;
      BigDecimal bigDecimal0 = BigDecimal.TEN;
      CatalogLight catalogLight0 = new CatalogLight("h&*+\"", "h&*+\"", "h&*+\"", (Content) null, (Content) null, (-815.0F), 0.3926991F, (-694.0F), (-694.0F), true, lightSourceArray0, (float[][]) null, "h&*+\"", true, bigDecimal0, bigDecimal0);
      HomeLight homeLight0 = new HomeLight(catalogLight0);
      HomeLight homeLight1 = homeLight0.clone();
      HomeLight homeLight2 = homeLight1.clone();
      homeLight0.clone();
      homeLight1.setModelMirrored(true);
      HomeLight homeLight3 = homeLight0.clone();
      homeLight3.isNameCenterPointAt(3.4028235E38F, 0.5F, 1031.2587F);
      TextStyle textStyle0 = new TextStyle(1635.3077F);
      homeLight1.setNameStyle(textStyle0);
      homeLight0.getWidth();
      CatalogTexture catalogTexture0 = new CatalogTexture("S-C-H*,DqW", (Content) null, (-694.0F), 3401.5F);
      HomeTexture homeTexture0 = new HomeTexture(catalogTexture0);
      homeLight0.setTexture(homeTexture0);
      homeLight2.setMovable(false);
      homeLight0.setElevation((-815.0F));
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      LightSource[] lightSourceArray0 = new LightSource[2];
      LightSource lightSource0 = new LightSource(0.0F, (-815.0F), (-815.0F), (-874));
      LightSource lightSource1 = new LightSource((-1.0F), (-1676.266F), (-815.0F), 0);
      BigDecimal bigDecimal0 = BigDecimal.TEN;
      CatalogLight catalogLight0 = new CatalogLight("\"kL5lH}&XZ+#C", "\"kL5lH}&XZ+#C", "!Z8d", (Content) null, (Content) null, (-127.62969F), 114.0F, (-694.0F), 3.4028235E38F, true, lightSourceArray0, (float[][]) null, "", true, bigDecimal0, bigDecimal0);
      HomeLight homeLight0 = new HomeLight(catalogLight0);
      HomeLight homeLight1 = homeLight0.clone();
      HomeLight homeLight2 = new HomeLight(homeLight1);
      homeLight2.clone();
      homeLight1.setNameXOffset(114.0F);
      homeLight0.setModelMirrored(true);
      // Undeclared exception!
      try { 
        HomePieceOfFurniture.Property.valueOf("{ MIxXVMT6P&aj8f");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant com.eteks.sweethome3d.model.HomePieceOfFurniture.Property.{ MIxXVMT6P&aj8f
         //
         verifyException("java.lang.Enum", e);
      }
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      LightSource[] lightSourceArray0 = new LightSource[1];
      BigDecimal bigDecimal0 = BigDecimal.ONE;
      CatalogLight catalogLight0 = new CatalogLight("h&i*+\"", "h&i*+\"", "h&i*+\"", (Content) null, (Content) null, (-2263.3643F), (-2263.3643F), (-2263.3643F), (-2263.3643F), true, lightSourceArray0, (float[][]) null, "h&i*+\"", true, bigDecimal0, bigDecimal0);
      HomeLight homeLight0 = new HomeLight(catalogLight0);
      homeLight0.getModelRotation();
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      LightSource[] lightSourceArray0 = new LightSource[2];
      BigDecimal bigDecimal0 = BigDecimal.TEN;
      CatalogLight catalogLight0 = new CatalogLight("h&+)`\"", "h&+)`\"", "h&+)`\"", (Content) null, (Content) null, (-2263.3643F), (-2263.3643F), (-2263.3643F), (-2263.3643F), false, lightSourceArray0, (float[][]) null, "h&+)`\"", false, bigDecimal0, bigDecimal0);
      HomeLight homeLight0 = new HomeLight(catalogLight0);
      HomeLight homeLight1 = new HomeLight(homeLight0);
      HomeLight homeLight2 = new HomeLight(homeLight1);
      // Undeclared exception!
      try { 
        homeLight2.setWidth((-2263.3643F));
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Piece isn't resizable
         //
         verifyException("com.eteks.sweethome3d.model.HomePieceOfFurniture", e);
      }
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      LightSource[] lightSourceArray0 = new LightSource[12];
      BigDecimal bigDecimal0 = BigDecimal.TEN;
      FileSystemHandling.shouldAllThrowIOExceptions();
      CatalogLight catalogLight0 = new CatalogLight("h&*+\"", "h&*+\"", "h&*+\"", (Content) null, (Content) null, 587.23944F, 587.23944F, (-694.0F), (-694.0F), true, lightSourceArray0, (float[][]) null, "h&*+\"", true, bigDecimal0, bigDecimal0);
      HomeLight homeLight0 = new HomeLight(catalogLight0);
      HomeLight homeLight1 = new HomeLight(homeLight0);
      homeLight1.setDepth((-694.0F));
      Level level0 = new Level("6U3Z:Hdy", 1.0F, 51.805F, 51.805F);
      homeLight0.isAtLevel(level0);
      homeLight1.getModelRotation();
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      LightSource[] lightSourceArray0 = new LightSource[2];
      LightSource lightSource0 = new LightSource((-815.0011F), 0.0F, 0.0F, (-1541));
      assertEquals((-1541), lightSource0.getColor());
      assertNull(lightSource0.getDiameter());
      assertEquals(0.0F, lightSource0.getY(), 0.01F);
      assertEquals(0.0F, lightSource0.getZ(), 0.01F);
      assertEquals((-815.0011F), lightSource0.getX(), 0.01F);
      assertNotNull(lightSource0);
      
      lightSourceArray0[0] = lightSource0;
      LightSource lightSource1 = new LightSource((-1541), (-2278.261F), (-694.0F), 8192);
      assertFalse(lightSource1.equals((Object)lightSource0));
      assertEquals(8192, lightSource1.getColor());
      assertEquals((-2278.261F), lightSource1.getY(), 0.01F);
      assertEquals((-1541.0F), lightSource1.getX(), 0.01F);
      assertNull(lightSource1.getDiameter());
      assertEquals((-694.0F), lightSource1.getZ(), 0.01F);
      assertNotNull(lightSource1);
      
      BigDecimal bigDecimal0 = BigDecimal.TEN;
      assertEquals((byte)10, bigDecimal0.byteValue());
      assertEquals((short)10, bigDecimal0.shortValue());
      assertNotNull(bigDecimal0);
      
      CatalogLight catalogLight0 = new CatalogLight("/", "PRICE_VALUE_ADDED_TAX_INCLUDED", "PRICE_VALUE_ADDED_TAX_INCLUDED", (Content) null, (Content) null, 0.3926991F, 114.0F, 233.10785F, (-694.0F), true, lightSourceArray0, (float[][]) null, "{L", true, bigDecimal0, bigDecimal0);
      assertEquals((byte)10, bigDecimal0.byteValue());
      assertEquals((short)10, bigDecimal0.shortValue());
      assertEquals("PRICE_VALUE_ADDED_TAX_INCLUDED", catalogLight0.getName());
      assertEquals("PRICE_VALUE_ADDED_TAX_INCLUDED", catalogLight0.getDescription());
      assertNull(catalogLight0.getGrade());
      assertEquals("/", catalogLight0.getId());
      assertTrue(catalogLight0.isMovable());
      assertNull(catalogLight0.getInformation());
      assertTrue(catalogLight0.isResizable());
      assertTrue(catalogLight0.isDeformable());
      assertFalse(catalogLight0.isBackFaceShown());
      assertFalse(catalogLight0.isDoorOrWindow());
      assertTrue(catalogLight0.isTexturable());
      assertTrue(catalogLight0.isProportional());
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertEquals(233.10785F, catalogLight0.getHeight(), 0.01F);
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertNull(catalogLight0.getCreationDate());
      assertEquals("{L", catalogLight0.getCreator());
      assertNull(catalogLight0.getColor());
      assertFalse(catalogLight0.isModifiable());
      assertEquals(114.0F, catalogLight0.getDepth(), 0.01F);
      assertEquals((-694.0F), catalogLight0.getElevation(), 0.01F);
      assertEquals(0.3926991F, catalogLight0.getWidth(), 0.01F);
      assertNull(catalogLight0.getCurrency());
      assertEquals(2, lightSourceArray0.length);
      assertNotNull(catalogLight0);
      
      HomeLight homeLight0 = new HomeLight(catalogLight0);
      assertEquals((byte)10, bigDecimal0.byteValue());
      assertEquals((short)10, bigDecimal0.shortValue());
      assertEquals("PRICE_VALUE_ADDED_TAX_INCLUDED", catalogLight0.getName());
      assertEquals("PRICE_VALUE_ADDED_TAX_INCLUDED", catalogLight0.getDescription());
      assertNull(catalogLight0.getGrade());
      assertEquals("/", catalogLight0.getId());
      assertTrue(catalogLight0.isMovable());
      assertNull(catalogLight0.getInformation());
      assertTrue(catalogLight0.isResizable());
      assertTrue(catalogLight0.isDeformable());
      assertFalse(catalogLight0.isBackFaceShown());
      assertFalse(catalogLight0.isDoorOrWindow());
      assertTrue(catalogLight0.isTexturable());
      assertTrue(catalogLight0.isProportional());
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertEquals(233.10785F, catalogLight0.getHeight(), 0.01F);
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertNull(catalogLight0.getCreationDate());
      assertEquals("{L", catalogLight0.getCreator());
      assertNull(catalogLight0.getColor());
      assertFalse(catalogLight0.isModifiable());
      assertEquals(114.0F, catalogLight0.getDepth(), 0.01F);
      assertEquals((-694.0F), catalogLight0.getElevation(), 0.01F);
      assertEquals(0.3926991F, catalogLight0.getWidth(), 0.01F);
      assertNull(catalogLight0.getCurrency());
      assertNull(homeLight0.getShininess());
      assertTrue(homeLight0.isResizable());
      assertEquals(57.0F, homeLight0.getY(), 0.01F);
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertTrue(homeLight0.isMovable());
      assertEquals("/", homeLight0.getCatalogId());
      assertEquals("PRICE_VALUE_ADDED_TAX_INCLUDED", homeLight0.getName());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertEquals(114.0F, homeLight0.getDepth(), 0.01F);
      assertNull(homeLight0.getCurrency());
      assertEquals(0.19634955F, homeLight0.getX(), 0.01F);
      assertEquals("PRICE_VALUE_ADDED_TAX_INCLUDED", homeLight0.getDescription());
      assertNull(homeLight0.getColor());
      assertFalse(homeLight0.isDoorOrWindow());
      assertFalse(homeLight0.isBackFaceShown());
      assertEquals(0.3926991F, homeLight0.getWidth(), 0.01F);
      assertTrue(homeLight0.isTexturable());
      assertFalse(homeLight0.isModelMirrored());
      assertEquals(233.10785F, homeLight0.getHeight(), 0.01F);
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertFalse(homeLight0.isNameVisible());
      assertTrue(homeLight0.isDeformable());
      assertTrue(homeLight0.isVisible());
      assertEquals((-694.0F), homeLight0.getElevation(), 0.01F);
      assertEquals((-694.0F), homeLight0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals(2, lightSourceArray0.length);
      assertNotNull(homeLight0);
      
      HomeLight homeLight1 = homeLight0.clone();
      assertFalse(homeLight1.equals((Object)homeLight0));
      assertEquals((byte)10, bigDecimal0.byteValue());
      assertEquals((short)10, bigDecimal0.shortValue());
      assertEquals("PRICE_VALUE_ADDED_TAX_INCLUDED", catalogLight0.getName());
      assertEquals("PRICE_VALUE_ADDED_TAX_INCLUDED", catalogLight0.getDescription());
      assertNull(catalogLight0.getGrade());
      assertEquals("/", catalogLight0.getId());
      assertTrue(catalogLight0.isMovable());
      assertNull(catalogLight0.getInformation());
      assertTrue(catalogLight0.isResizable());
      assertTrue(catalogLight0.isDeformable());
      assertFalse(catalogLight0.isBackFaceShown());
      assertFalse(catalogLight0.isDoorOrWindow());
      assertTrue(catalogLight0.isTexturable());
      assertTrue(catalogLight0.isProportional());
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertEquals(233.10785F, catalogLight0.getHeight(), 0.01F);
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertNull(catalogLight0.getCreationDate());
      assertEquals("{L", catalogLight0.getCreator());
      assertNull(catalogLight0.getColor());
      assertFalse(catalogLight0.isModifiable());
      assertEquals(114.0F, catalogLight0.getDepth(), 0.01F);
      assertEquals((-694.0F), catalogLight0.getElevation(), 0.01F);
      assertEquals(0.3926991F, catalogLight0.getWidth(), 0.01F);
      assertNull(catalogLight0.getCurrency());
      assertNull(homeLight0.getShininess());
      assertTrue(homeLight0.isResizable());
      assertEquals(57.0F, homeLight0.getY(), 0.01F);
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertTrue(homeLight0.isMovable());
      assertEquals("/", homeLight0.getCatalogId());
      assertEquals("PRICE_VALUE_ADDED_TAX_INCLUDED", homeLight0.getName());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertEquals(114.0F, homeLight0.getDepth(), 0.01F);
      assertNull(homeLight0.getCurrency());
      assertEquals(0.19634955F, homeLight0.getX(), 0.01F);
      assertEquals("PRICE_VALUE_ADDED_TAX_INCLUDED", homeLight0.getDescription());
      assertNull(homeLight0.getColor());
      assertFalse(homeLight0.isDoorOrWindow());
      assertFalse(homeLight0.isBackFaceShown());
      assertEquals(0.3926991F, homeLight0.getWidth(), 0.01F);
      assertTrue(homeLight0.isTexturable());
      assertFalse(homeLight0.isModelMirrored());
      assertEquals(233.10785F, homeLight0.getHeight(), 0.01F);
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertFalse(homeLight0.isNameVisible());
      assertTrue(homeLight0.isDeformable());
      assertTrue(homeLight0.isVisible());
      assertEquals((-694.0F), homeLight0.getElevation(), 0.01F);
      assertEquals((-694.0F), homeLight0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertNull(homeLight1.getShininess());
      assertTrue(homeLight1.isMovable());
      assertEquals("/", homeLight1.getCatalogId());
      assertEquals("PRICE_VALUE_ADDED_TAX_INCLUDED", homeLight1.getName());
      assertNull(homeLight1.getCurrency());
      assertEquals(0.19634955F, homeLight1.getX(), 0.01F);
      assertEquals(114.0F, homeLight1.getDepth(), 0.01F);
      assertEquals("PRICE_VALUE_ADDED_TAX_INCLUDED", homeLight1.getDescription());
      assertEquals(0.5F, homeLight1.getPower(), 0.01F);
      assertNull(homeLight1.getColor());
      assertEquals(57.0F, homeLight1.getY(), 0.01F);
      assertEquals(0.0F, homeLight1.getNameYOffset(), 0.01F);
      assertEquals(0.3926991F, homeLight1.getWidth(), 0.01F);
      assertTrue(homeLight1.isTexturable());
      assertFalse(homeLight1.isDoorOrWindow());
      assertEquals(0.0F, homeLight1.getAngle(), 0.01F);
      assertEquals(233.10785F, homeLight1.getHeight(), 0.01F);
      assertFalse(homeLight1.isModelMirrored());
      assertFalse(homeLight1.isBackFaceShown());
      assertFalse(homeLight1.isNameVisible());
      assertEquals(0.0F, homeLight1.getNameXOffset(), 0.01F);
      assertTrue(homeLight1.isVisible());
      assertEquals(0.0F, homeLight1.getNameAngle(), 0.01F);
      assertEquals((-694.0F), homeLight1.getElevation(), 0.01F);
      assertNull(homeLight1.getStaircaseCutOutShape());
      assertTrue(homeLight1.isResizable());
      assertTrue(homeLight1.isDeformable());
      assertEquals((-694.0F), homeLight1.getGroundElevation(), 0.01F);
      assertEquals(2, lightSourceArray0.length);
      assertNotSame(homeLight0, homeLight1);
      assertNotSame(homeLight1, homeLight0);
      assertNotNull(homeLight1);
      
      HomeLight homeLight2 = (HomeLight)homeLight1.clone();
      assertFalse(homeLight0.equals((Object)homeLight1));
      assertFalse(homeLight1.equals((Object)homeLight0));
      assertFalse(homeLight2.equals((Object)homeLight1));
      assertFalse(homeLight2.equals((Object)homeLight0));
      assertEquals((byte)10, bigDecimal0.byteValue());
      assertEquals((short)10, bigDecimal0.shortValue());
      assertEquals("PRICE_VALUE_ADDED_TAX_INCLUDED", catalogLight0.getName());
      assertEquals("PRICE_VALUE_ADDED_TAX_INCLUDED", catalogLight0.getDescription());
      assertNull(catalogLight0.getGrade());
      assertEquals("/", catalogLight0.getId());
      assertTrue(catalogLight0.isMovable());
      assertNull(catalogLight0.getInformation());
      assertTrue(catalogLight0.isResizable());
      assertTrue(catalogLight0.isDeformable());
      assertFalse(catalogLight0.isBackFaceShown());
      assertFalse(catalogLight0.isDoorOrWindow());
      assertTrue(catalogLight0.isTexturable());
      assertTrue(catalogLight0.isProportional());
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertEquals(233.10785F, catalogLight0.getHeight(), 0.01F);
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertNull(catalogLight0.getCreationDate());
      assertEquals("{L", catalogLight0.getCreator());
      assertNull(catalogLight0.getColor());
      assertFalse(catalogLight0.isModifiable());
      assertEquals(114.0F, catalogLight0.getDepth(), 0.01F);
      assertEquals((-694.0F), catalogLight0.getElevation(), 0.01F);
      assertEquals(0.3926991F, catalogLight0.getWidth(), 0.01F);
      assertNull(catalogLight0.getCurrency());
      assertNull(homeLight0.getShininess());
      assertTrue(homeLight0.isResizable());
      assertEquals(57.0F, homeLight0.getY(), 0.01F);
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertTrue(homeLight0.isMovable());
      assertEquals("/", homeLight0.getCatalogId());
      assertEquals("PRICE_VALUE_ADDED_TAX_INCLUDED", homeLight0.getName());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertEquals(114.0F, homeLight0.getDepth(), 0.01F);
      assertNull(homeLight0.getCurrency());
      assertEquals(0.19634955F, homeLight0.getX(), 0.01F);
      assertEquals("PRICE_VALUE_ADDED_TAX_INCLUDED", homeLight0.getDescription());
      assertNull(homeLight0.getColor());
      assertFalse(homeLight0.isDoorOrWindow());
      assertFalse(homeLight0.isBackFaceShown());
      assertEquals(0.3926991F, homeLight0.getWidth(), 0.01F);
      assertTrue(homeLight0.isTexturable());
      assertFalse(homeLight0.isModelMirrored());
      assertEquals(233.10785F, homeLight0.getHeight(), 0.01F);
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertFalse(homeLight0.isNameVisible());
      assertTrue(homeLight0.isDeformable());
      assertTrue(homeLight0.isVisible());
      assertEquals((-694.0F), homeLight0.getElevation(), 0.01F);
      assertEquals((-694.0F), homeLight0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertNull(homeLight1.getShininess());
      assertTrue(homeLight1.isMovable());
      assertEquals("/", homeLight1.getCatalogId());
      assertEquals("PRICE_VALUE_ADDED_TAX_INCLUDED", homeLight1.getName());
      assertNull(homeLight1.getCurrency());
      assertEquals(0.19634955F, homeLight1.getX(), 0.01F);
      assertEquals(114.0F, homeLight1.getDepth(), 0.01F);
      assertEquals("PRICE_VALUE_ADDED_TAX_INCLUDED", homeLight1.getDescription());
      assertEquals(0.5F, homeLight1.getPower(), 0.01F);
      assertNull(homeLight1.getColor());
      assertEquals(57.0F, homeLight1.getY(), 0.01F);
      assertEquals(0.0F, homeLight1.getNameYOffset(), 0.01F);
      assertEquals(0.3926991F, homeLight1.getWidth(), 0.01F);
      assertTrue(homeLight1.isTexturable());
      assertFalse(homeLight1.isDoorOrWindow());
      assertEquals(0.0F, homeLight1.getAngle(), 0.01F);
      assertEquals(233.10785F, homeLight1.getHeight(), 0.01F);
      assertFalse(homeLight1.isModelMirrored());
      assertFalse(homeLight1.isBackFaceShown());
      assertFalse(homeLight1.isNameVisible());
      assertEquals(0.0F, homeLight1.getNameXOffset(), 0.01F);
      assertTrue(homeLight1.isVisible());
      assertEquals(0.0F, homeLight1.getNameAngle(), 0.01F);
      assertEquals((-694.0F), homeLight1.getElevation(), 0.01F);
      assertNull(homeLight1.getStaircaseCutOutShape());
      assertTrue(homeLight1.isResizable());
      assertTrue(homeLight1.isDeformable());
      assertEquals((-694.0F), homeLight1.getGroundElevation(), 0.01F);
      assertFalse(homeLight2.isModelMirrored());
      assertFalse(homeLight2.isBackFaceShown());
      assertTrue(homeLight2.isTexturable());
      assertFalse(homeLight2.isDoorOrWindow());
      assertEquals(233.10785F, homeLight2.getHeight(), 0.01F);
      assertEquals(0.3926991F, homeLight2.getWidth(), 0.01F);
      assertFalse(homeLight2.isNameVisible());
      assertEquals(0.0F, homeLight2.getAngle(), 0.01F);
      assertNull(homeLight2.getCurrency());
      assertEquals(114.0F, homeLight2.getDepth(), 0.01F);
      assertEquals(0.19634955F, homeLight2.getX(), 0.01F);
      assertEquals("PRICE_VALUE_ADDED_TAX_INCLUDED", homeLight2.getDescription());
      assertEquals(0.0F, homeLight2.getNameYOffset(), 0.01F);
      assertNull(homeLight2.getColor());
      assertTrue(homeLight2.isMovable());
      assertTrue(homeLight2.isResizable());
      assertEquals(57.0F, homeLight2.getY(), 0.01F);
      assertNull(homeLight2.getShininess());
      assertNull(homeLight2.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight2.getNameAngle(), 0.01F);
      assertEquals(0.5F, homeLight2.getPower(), 0.01F);
      assertEquals("/", homeLight2.getCatalogId());
      assertEquals("PRICE_VALUE_ADDED_TAX_INCLUDED", homeLight2.getName());
      assertTrue(homeLight2.isVisible());
      assertTrue(homeLight2.isDeformable());
      assertEquals((-694.0F), homeLight2.getElevation(), 0.01F);
      assertEquals((-694.0F), homeLight2.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight2.getNameXOffset(), 0.01F);
      assertEquals(2, lightSourceArray0.length);
      assertNotSame(homeLight0, homeLight1);
      assertNotSame(homeLight0, homeLight2);
      assertNotSame(homeLight1, homeLight0);
      assertNotSame(homeLight1, homeLight2);
      assertNotSame(homeLight2, homeLight1);
      assertNotSame(homeLight2, homeLight0);
      assertNotNull(homeLight2);
      
      homeLight1.setModelMirrored(true);
      assertFalse(homeLight0.equals((Object)homeLight1));
      assertFalse(homeLight0.equals((Object)homeLight2));
      assertFalse(homeLight1.equals((Object)homeLight0));
      assertFalse(homeLight1.equals((Object)homeLight2));
      assertEquals((byte)10, bigDecimal0.byteValue());
      assertEquals((short)10, bigDecimal0.shortValue());
      assertEquals("PRICE_VALUE_ADDED_TAX_INCLUDED", catalogLight0.getName());
      assertEquals("PRICE_VALUE_ADDED_TAX_INCLUDED", catalogLight0.getDescription());
      assertNull(catalogLight0.getGrade());
      assertEquals("/", catalogLight0.getId());
      assertTrue(catalogLight0.isMovable());
      assertNull(catalogLight0.getInformation());
      assertTrue(catalogLight0.isResizable());
      assertTrue(catalogLight0.isDeformable());
      assertFalse(catalogLight0.isBackFaceShown());
      assertFalse(catalogLight0.isDoorOrWindow());
      assertTrue(catalogLight0.isTexturable());
      assertTrue(catalogLight0.isProportional());
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertEquals(233.10785F, catalogLight0.getHeight(), 0.01F);
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertNull(catalogLight0.getCreationDate());
      assertEquals("{L", catalogLight0.getCreator());
      assertNull(catalogLight0.getColor());
      assertFalse(catalogLight0.isModifiable());
      assertEquals(114.0F, catalogLight0.getDepth(), 0.01F);
      assertEquals((-694.0F), catalogLight0.getElevation(), 0.01F);
      assertEquals(0.3926991F, catalogLight0.getWidth(), 0.01F);
      assertNull(catalogLight0.getCurrency());
      assertNull(homeLight0.getShininess());
      assertTrue(homeLight0.isResizable());
      assertEquals(57.0F, homeLight0.getY(), 0.01F);
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertTrue(homeLight0.isMovable());
      assertEquals("/", homeLight0.getCatalogId());
      assertEquals("PRICE_VALUE_ADDED_TAX_INCLUDED", homeLight0.getName());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertEquals(114.0F, homeLight0.getDepth(), 0.01F);
      assertNull(homeLight0.getCurrency());
      assertEquals(0.19634955F, homeLight0.getX(), 0.01F);
      assertEquals("PRICE_VALUE_ADDED_TAX_INCLUDED", homeLight0.getDescription());
      assertNull(homeLight0.getColor());
      assertFalse(homeLight0.isDoorOrWindow());
      assertFalse(homeLight0.isBackFaceShown());
      assertEquals(0.3926991F, homeLight0.getWidth(), 0.01F);
      assertTrue(homeLight0.isTexturable());
      assertFalse(homeLight0.isModelMirrored());
      assertEquals(233.10785F, homeLight0.getHeight(), 0.01F);
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertFalse(homeLight0.isNameVisible());
      assertTrue(homeLight0.isDeformable());
      assertTrue(homeLight0.isVisible());
      assertEquals((-694.0F), homeLight0.getElevation(), 0.01F);
      assertEquals((-694.0F), homeLight0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertNull(homeLight1.getShininess());
      assertTrue(homeLight1.isMovable());
      assertEquals("/", homeLight1.getCatalogId());
      assertEquals("PRICE_VALUE_ADDED_TAX_INCLUDED", homeLight1.getName());
      assertNull(homeLight1.getCurrency());
      assertEquals(0.19634955F, homeLight1.getX(), 0.01F);
      assertEquals(114.0F, homeLight1.getDepth(), 0.01F);
      assertEquals("PRICE_VALUE_ADDED_TAX_INCLUDED", homeLight1.getDescription());
      assertEquals(0.5F, homeLight1.getPower(), 0.01F);
      assertNull(homeLight1.getColor());
      assertEquals(57.0F, homeLight1.getY(), 0.01F);
      assertTrue(homeLight1.isModelMirrored());
      assertEquals(0.0F, homeLight1.getNameYOffset(), 0.01F);
      assertEquals(0.3926991F, homeLight1.getWidth(), 0.01F);
      assertTrue(homeLight1.isTexturable());
      assertFalse(homeLight1.isDoorOrWindow());
      assertEquals(0.0F, homeLight1.getAngle(), 0.01F);
      assertEquals(233.10785F, homeLight1.getHeight(), 0.01F);
      assertFalse(homeLight1.isBackFaceShown());
      assertFalse(homeLight1.isNameVisible());
      assertEquals(0.0F, homeLight1.getNameXOffset(), 0.01F);
      assertTrue(homeLight1.isVisible());
      assertEquals(0.0F, homeLight1.getNameAngle(), 0.01F);
      assertEquals((-694.0F), homeLight1.getElevation(), 0.01F);
      assertNull(homeLight1.getStaircaseCutOutShape());
      assertTrue(homeLight1.isResizable());
      assertTrue(homeLight1.isDeformable());
      assertEquals((-694.0F), homeLight1.getGroundElevation(), 0.01F);
      assertEquals(2, lightSourceArray0.length);
      assertNotSame(homeLight0, homeLight1);
      assertNotSame(homeLight0, homeLight2);
      assertNotSame(homeLight1, homeLight0);
      assertNotSame(homeLight1, homeLight2);
      
      homeLight0.setDescription("fU.#i`,XJ/02pTQ");
      assertFalse(homeLight0.equals((Object)homeLight1));
      assertFalse(homeLight0.equals((Object)homeLight2));
      assertEquals((byte)10, bigDecimal0.byteValue());
      assertEquals((short)10, bigDecimal0.shortValue());
      assertEquals("PRICE_VALUE_ADDED_TAX_INCLUDED", catalogLight0.getName());
      assertEquals("PRICE_VALUE_ADDED_TAX_INCLUDED", catalogLight0.getDescription());
      assertNull(catalogLight0.getGrade());
      assertEquals("/", catalogLight0.getId());
      assertTrue(catalogLight0.isMovable());
      assertNull(catalogLight0.getInformation());
      assertTrue(catalogLight0.isResizable());
      assertTrue(catalogLight0.isDeformable());
      assertFalse(catalogLight0.isBackFaceShown());
      assertFalse(catalogLight0.isDoorOrWindow());
      assertTrue(catalogLight0.isTexturable());
      assertTrue(catalogLight0.isProportional());
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertEquals(233.10785F, catalogLight0.getHeight(), 0.01F);
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertNull(catalogLight0.getCreationDate());
      assertEquals("{L", catalogLight0.getCreator());
      assertNull(catalogLight0.getColor());
      assertFalse(catalogLight0.isModifiable());
      assertEquals(114.0F, catalogLight0.getDepth(), 0.01F);
      assertEquals((-694.0F), catalogLight0.getElevation(), 0.01F);
      assertEquals(0.3926991F, catalogLight0.getWidth(), 0.01F);
      assertNull(catalogLight0.getCurrency());
      assertNull(homeLight0.getShininess());
      assertTrue(homeLight0.isResizable());
      assertEquals(57.0F, homeLight0.getY(), 0.01F);
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertTrue(homeLight0.isMovable());
      assertEquals("/", homeLight0.getCatalogId());
      assertEquals("PRICE_VALUE_ADDED_TAX_INCLUDED", homeLight0.getName());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertEquals(114.0F, homeLight0.getDepth(), 0.01F);
      assertNull(homeLight0.getCurrency());
      assertEquals(0.19634955F, homeLight0.getX(), 0.01F);
      assertNull(homeLight0.getColor());
      assertFalse(homeLight0.isDoorOrWindow());
      assertFalse(homeLight0.isBackFaceShown());
      assertEquals(0.3926991F, homeLight0.getWidth(), 0.01F);
      assertTrue(homeLight0.isTexturable());
      assertFalse(homeLight0.isModelMirrored());
      assertEquals(233.10785F, homeLight0.getHeight(), 0.01F);
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertFalse(homeLight0.isNameVisible());
      assertTrue(homeLight0.isDeformable());
      assertTrue(homeLight0.isVisible());
      assertEquals((-694.0F), homeLight0.getElevation(), 0.01F);
      assertEquals((-694.0F), homeLight0.getGroundElevation(), 0.01F);
      assertEquals("fU.#i`,XJ/02pTQ", homeLight0.getDescription());
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals(2, lightSourceArray0.length);
      assertNotSame(homeLight0, homeLight1);
      assertNotSame(homeLight0, homeLight2);
      
      HomeLight homeLight3 = (HomeLight)homeLight1.clone();
      assertFalse(homeLight0.equals((Object)homeLight1));
      assertFalse(homeLight0.equals((Object)homeLight2));
      assertFalse(homeLight1.equals((Object)homeLight0));
      assertFalse(homeLight1.equals((Object)homeLight2));
      assertFalse(homeLight3.equals((Object)homeLight1));
      assertFalse(homeLight3.equals((Object)homeLight0));
      assertFalse(homeLight3.equals((Object)homeLight2));
      assertEquals((byte)10, bigDecimal0.byteValue());
      assertEquals((short)10, bigDecimal0.shortValue());
      assertEquals("PRICE_VALUE_ADDED_TAX_INCLUDED", catalogLight0.getName());
      assertEquals("PRICE_VALUE_ADDED_TAX_INCLUDED", catalogLight0.getDescription());
      assertNull(catalogLight0.getGrade());
      assertEquals("/", catalogLight0.getId());
      assertTrue(catalogLight0.isMovable());
      assertNull(catalogLight0.getInformation());
      assertTrue(catalogLight0.isResizable());
      assertTrue(catalogLight0.isDeformable());
      assertFalse(catalogLight0.isBackFaceShown());
      assertFalse(catalogLight0.isDoorOrWindow());
      assertTrue(catalogLight0.isTexturable());
      assertTrue(catalogLight0.isProportional());
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertEquals(233.10785F, catalogLight0.getHeight(), 0.01F);
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertNull(catalogLight0.getCreationDate());
      assertEquals("{L", catalogLight0.getCreator());
      assertNull(catalogLight0.getColor());
      assertFalse(catalogLight0.isModifiable());
      assertEquals(114.0F, catalogLight0.getDepth(), 0.01F);
      assertEquals((-694.0F), catalogLight0.getElevation(), 0.01F);
      assertEquals(0.3926991F, catalogLight0.getWidth(), 0.01F);
      assertNull(catalogLight0.getCurrency());
      assertNull(homeLight0.getShininess());
      assertTrue(homeLight0.isResizable());
      assertEquals(57.0F, homeLight0.getY(), 0.01F);
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertTrue(homeLight0.isMovable());
      assertEquals("/", homeLight0.getCatalogId());
      assertEquals("PRICE_VALUE_ADDED_TAX_INCLUDED", homeLight0.getName());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertEquals(114.0F, homeLight0.getDepth(), 0.01F);
      assertNull(homeLight0.getCurrency());
      assertEquals(0.19634955F, homeLight0.getX(), 0.01F);
      assertNull(homeLight0.getColor());
      assertFalse(homeLight0.isDoorOrWindow());
      assertFalse(homeLight0.isBackFaceShown());
      assertEquals(0.3926991F, homeLight0.getWidth(), 0.01F);
      assertTrue(homeLight0.isTexturable());
      assertFalse(homeLight0.isModelMirrored());
      assertEquals(233.10785F, homeLight0.getHeight(), 0.01F);
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertFalse(homeLight0.isNameVisible());
      assertTrue(homeLight0.isDeformable());
      assertTrue(homeLight0.isVisible());
      assertEquals((-694.0F), homeLight0.getElevation(), 0.01F);
      assertEquals((-694.0F), homeLight0.getGroundElevation(), 0.01F);
      assertEquals("fU.#i`,XJ/02pTQ", homeLight0.getDescription());
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertNull(homeLight1.getShininess());
      assertTrue(homeLight1.isMovable());
      assertEquals("/", homeLight1.getCatalogId());
      assertEquals("PRICE_VALUE_ADDED_TAX_INCLUDED", homeLight1.getName());
      assertNull(homeLight1.getCurrency());
      assertEquals(0.19634955F, homeLight1.getX(), 0.01F);
      assertEquals(114.0F, homeLight1.getDepth(), 0.01F);
      assertEquals("PRICE_VALUE_ADDED_TAX_INCLUDED", homeLight1.getDescription());
      assertEquals(0.5F, homeLight1.getPower(), 0.01F);
      assertNull(homeLight1.getColor());
      assertEquals(57.0F, homeLight1.getY(), 0.01F);
      assertTrue(homeLight1.isModelMirrored());
      assertEquals(0.0F, homeLight1.getNameYOffset(), 0.01F);
      assertEquals(0.3926991F, homeLight1.getWidth(), 0.01F);
      assertTrue(homeLight1.isTexturable());
      assertFalse(homeLight1.isDoorOrWindow());
      assertEquals(0.0F, homeLight1.getAngle(), 0.01F);
      assertEquals(233.10785F, homeLight1.getHeight(), 0.01F);
      assertFalse(homeLight1.isBackFaceShown());
      assertFalse(homeLight1.isNameVisible());
      assertEquals(0.0F, homeLight1.getNameXOffset(), 0.01F);
      assertTrue(homeLight1.isVisible());
      assertEquals(0.0F, homeLight1.getNameAngle(), 0.01F);
      assertEquals((-694.0F), homeLight1.getElevation(), 0.01F);
      assertNull(homeLight1.getStaircaseCutOutShape());
      assertTrue(homeLight1.isResizable());
      assertTrue(homeLight1.isDeformable());
      assertEquals((-694.0F), homeLight1.getGroundElevation(), 0.01F);
      assertEquals((-694.0F), homeLight3.getElevation(), 0.01F);
      assertEquals(0.5F, homeLight3.getPower(), 0.01F);
      assertEquals(0.0F, homeLight3.getAngle(), 0.01F);
      assertEquals("PRICE_VALUE_ADDED_TAX_INCLUDED", homeLight3.getName());
      assertEquals(57.0F, homeLight3.getY(), 0.01F);
      assertFalse(homeLight3.isBackFaceShown());
      assertEquals(0.3926991F, homeLight3.getWidth(), 0.01F);
      assertEquals(0.19634955F, homeLight3.getX(), 0.01F);
      assertEquals("PRICE_VALUE_ADDED_TAX_INCLUDED", homeLight3.getDescription());
      assertTrue(homeLight3.isModelMirrored());
      assertNull(homeLight3.getColor());
      assertEquals(0.0F, homeLight3.getNameYOffset(), 0.01F);
      assertTrue(homeLight3.isDeformable());
      assertTrue(homeLight3.isVisible());
      assertEquals(114.0F, homeLight3.getDepth(), 0.01F);
      assertNull(homeLight3.getCurrency());
      assertEquals("/", homeLight3.getCatalogId());
      assertFalse(homeLight3.isNameVisible());
      assertTrue(homeLight3.isMovable());
      assertNull(homeLight3.getShininess());
      assertTrue(homeLight3.isResizable());
      assertTrue(homeLight3.isTexturable());
      assertFalse(homeLight3.isDoorOrWindow());
      assertEquals(233.10785F, homeLight3.getHeight(), 0.01F);
      assertEquals(0.0F, homeLight3.getNameAngle(), 0.01F);
      assertNull(homeLight3.getStaircaseCutOutShape());
      assertEquals((-694.0F), homeLight3.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight3.getNameXOffset(), 0.01F);
      assertEquals(2, lightSourceArray0.length);
      assertNotSame(homeLight0, homeLight1);
      assertNotSame(homeLight0, homeLight2);
      assertNotSame(homeLight0, homeLight3);
      assertNotSame(homeLight1, homeLight0);
      assertNotSame(homeLight1, homeLight3);
      assertNotSame(homeLight1, homeLight2);
      assertNotSame(homeLight3, homeLight1);
      assertNotSame(homeLight3, homeLight0);
      assertNotSame(homeLight3, homeLight2);
      assertNotNull(homeLight3);
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "");
      LightSource[] lightSourceArray0 = new LightSource[2];
      BigDecimal bigDecimal0 = new BigDecimal(16);
      CatalogLight catalogLight0 = new CatalogLight("&i*_\"", "&i*_\"", "&i*_\"", (Content) null, (Content) null, (-815.0F), (-815.0F), (-815.0F), (-815.0F), true, lightSourceArray0, (float[][]) null, "&i*_\"", true, bigDecimal0, bigDecimal0);
      HomeLight homeLight0 = new HomeLight(catalogLight0);
      Level level0 = new Level("&i*_\"", (-2203.887F), 16, (-1561.8196F));
      homeLight0.setLevel(level0);
      homeLight0.setVisible(false);
      homeLight0.isVisible();
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      LightSource[] lightSourceArray0 = new LightSource[12];
      BigDecimal bigDecimal0 = BigDecimal.TEN;
      CatalogLight catalogLight0 = new CatalogLight("com.eteks.sweethome3d.model.HomePieceOfFurniture$10", (String) null, "", (Content) null, (Content) null, (-732.77F), (-591.61F), (-591.61F), (-727.8896F), true, lightSourceArray0, (float[][]) null, "h&*+\"", false, bigDecimal0, bigDecimal0);
      HomeLight homeLight0 = new HomeLight(catalogLight0);
      HomeLight homeLight1 = homeLight0.clone();
      homeLight1.clone();
      HomeLight homeLight2 = homeLight0.clone();
      HomeLight homeLight3 = new HomeLight(catalogLight0);
      homeLight2.setName((String) null);
      homeLight2.getTexture();
      HomeTexture homeTexture0 = null;
      try {
        homeTexture0 = new HomeTexture((TextureImage) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.eteks.sweethome3d.model.HomeTexture", e);
      }
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      LightSource[] lightSourceArray0 = new LightSource[2];
      LightSource lightSource0 = new LightSource((-815.0F), 0.0F, 0.0F, 114);
      lightSourceArray0[0] = lightSource0;
      LightSource lightSource1 = new LightSource((-694.0F), 2965.994F, (-127.62969F), 0);
      lightSourceArray0[1] = lightSource1;
      BigDecimal bigDecimal0 = BigDecimal.ZERO;
      CatalogLight catalogLight0 = new CatalogLight("h&*+\"", "h&*+\"", "h&*+\"", (Content) null, (Content) null, (-815.0F), 0.3926991F, (-694.0F), (-694.0F), true, lightSourceArray0, (float[][]) null, "h&*+\"", true, bigDecimal0, bigDecimal0);
      HomeLight homeLight0 = new HomeLight(catalogLight0);
      homeLight0.setY((-127.62969F));
      HomeLight homeLight1 = homeLight0.clone();
      homeLight1.setModelMirrored(false);
      homeLight0.getCurrency();
      homeLight1.getNameXOffset();
      homeLight0.isDoorOrWindow();
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      LightSource[] lightSourceArray0 = new LightSource[10];
      BigDecimal bigDecimal0 = BigDecimal.TEN;
      CatalogLight catalogLight0 = new CatalogLight("h&+)`\"", "h&+)`\"", "h&+)`\"", (Content) null, (Content) null, (-2263.0F), (-2263.0F), (-2263.0F), (-2263.0F), false, lightSourceArray0, (float[][]) null, "h&+)`\"", false, bigDecimal0, bigDecimal0);
      HomeLight homeLight0 = new HomeLight(catalogLight0);
      homeLight0.isPointAt((-2263.0F), (-2263.0F), (-2263.0F));
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      LightSource[] lightSourceArray0 = new LightSource[2];
      LightSource lightSource0 = new LightSource((-815.0011F), 0.0F, 0.0F, (-1541));
      lightSourceArray0[1] = lightSource0;
      LightSource lightSource1 = new LightSource((-1541), (-2278.261F), (-727.8896F), 8192);
      BigDecimal bigDecimal0 = BigDecimal.TEN;
      CatalogLight catalogLight0 = new CatalogLight("/", "PRICE_VALUE_ADDED_TAX_INCLUDED", "PRICE_VALUE_ADDED_TAX_INCLUDED", (Content) null, (Content) null, 0.3926991F, 114.0F, 233.10785F, (-727.8896F), true, lightSourceArray0, (float[][]) null, "{L", true, bigDecimal0, bigDecimal0);
      HomeLight homeLight0 = new HomeLight(catalogLight0);
      FurnitureCategory furnitureCategory0 = new FurnitureCategory("/");
      catalogLight0.setCategory(furnitureCategory0);
      HomeLight homeLight1 = homeLight0.clone();
      HomePieceOfFurniture homePieceOfFurniture0 = homeLight1.clone();
      homeLight0.setDescription("com.eteks.sweethome3d.model.HomePieceOfFurniture$12");
      homeLight1.setModelMirrored(false);
      homeLight0.getCurrency();
      homeLight1.getNameXOffset();
      homePieceOfFurniture0.intersectsRectangle(1349.391F, 0.0F, 1349.391F, 359.8F);
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      LightSource lightSource0 = new LightSource((-694.0F), (-694.0F), 0.0F, 2147450086);
      BigDecimal bigDecimal0 = BigDecimal.TEN;
      LightSource[] lightSourceArray0 = new LightSource[5];
      lightSourceArray0[0] = lightSource0;
      lightSourceArray0[2] = lightSource0;
      lightSourceArray0[3] = lightSource0;
      Float float0 = new Float(2268695.096069146);
      LightSource lightSource1 = new LightSource(187.76027F, (-1181.06F), 1.0F, 2035, float0);
      lightSourceArray0[4] = lightSource1;
      CatalogLight catalogLight0 = new CatalogLight("0OR", "com.eteks.sweethome3d.model.HomePieceOfFurniture$14", "CATALOG_ID", (Content) null, (Content) null, (-815.7997F), (-2098.535F), (-815.0F), (-694.0F), true, lightSourceArray0, (float[][]) null, "CATALOG_ID", true, bigDecimal0, (BigDecimal) null);
      HomeLight homeLight0 = new HomeLight(catalogLight0);
      homeLight0.clone();
      FileSystemHandling.shouldAllThrowIOExceptions();
      homeLight0.getHeight();
      HomeLight homeLight1 = new HomeLight(homeLight0);
      homeLight1.getPriceValueAddedTaxIncluded();
      homeLight1.getValueAddedTax();
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      LightSource[] lightSourceArray0 = new LightSource[12];
      BigDecimal bigDecimal0 = BigDecimal.TEN;
      CatalogLight catalogLight0 = new CatalogLight("ihl*+\"", "ihl*+\"", "ihl*+\"", (Content) null, (Content) null, 587.23944F, 587.23944F, (-694.0F), (-694.0F), true, lightSourceArray0, (float[][]) null, "ihl*+\"", true, bigDecimal0, bigDecimal0);
      HomeLight homeLight0 = new HomeLight(catalogLight0);
      CatalogTexture catalogTexture0 = new CatalogTexture("ihl*+\"", (Content) null, (-694.0F), 587.23944F);
      HomeTexture homeTexture0 = new HomeTexture(catalogTexture0);
      homeLight0.setTexture(homeTexture0);
      homeLight0.setName("ihl*+\"");
      homeLight0.getTexture();
      homeLight0.getGroundElevation();
      homeLight0.getModelRotation();
      homeLight0.getPoints();
      homeLight0.getDescription();
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      LightSource[] lightSourceArray0 = new LightSource[2];
      BigDecimal bigDecimal0 = BigDecimal.TEN;
      CatalogLight catalogLight0 = new CatalogLight("h&+)`\"", "h&+)`\"", "h&+)`\"", (Content) null, (Content) null, (-2263.3643F), (-2263.3643F), (-2263.3643F), (-2263.3643F), false, lightSourceArray0, (float[][]) null, "h&+)`\"", false, bigDecimal0, bigDecimal0);
      HomeLight homeLight0 = new HomeLight(catalogLight0);
      homeLight0.setElevation((-2263.3643F));
      HomeLight homeLight1 = new HomeLight(homeLight0);
      homeLight1.getTexture();
      homeLight1.getGroundElevation();
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      LightSource[] lightSourceArray0 = new LightSource[12];
      BigDecimal bigDecimal0 = BigDecimal.TEN;
      CatalogLight catalogLight0 = new CatalogLight("", "", "", (Content) null, (Content) null, 587.23944F, 587.23944F, (-693.5724F), (-693.5724F), false, lightSourceArray0, (float[][]) null, "", false, bigDecimal0, bigDecimal0);
      HomeLight homeLight0 = new HomeLight(catalogLight0);
      FurnitureCategory furnitureCategory0 = new FurnitureCategory("");
      catalogLight0.setCategory(furnitureCategory0);
      HomeLight homeLight1 = homeLight0.clone();
      homeLight1.isBottomLeftPointAt(587.23944F, 587.23944F, (-4352.0F));
      homeLight1.getTexture();
      homeLight1.setTexture((HomeTexture) null);
      homeLight0.setDescription("");
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      LightSource[] lightSourceArray0 = new LightSource[2];
      BigDecimal bigDecimal0 = BigDecimal.ONE;
      CatalogLight catalogLight0 = new CatalogLight("h&i*+\"", "h&i*+\"", "h&i*+\"", (Content) null, (Content) null, (-2263.3643F), (-2263.3643F), (-2263.3643F), (-2263.3643F), true, lightSourceArray0, (float[][]) null, "h&i*+\"", true, bigDecimal0, bigDecimal0);
      HomeLight homeLight0 = new HomeLight(catalogLight0);
      homeLight0.isPointAt(0, (-2263.3643F), (-2263.3643F));
      homeLight0.isBottomLeftPointAt(0, (-117.2F), (-2263.3643F));
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      LightSource[] lightSourceArray0 = new LightSource[12];
      BigDecimal bigDecimal0 = BigDecimal.TEN;
      CatalogLight catalogLight0 = new CatalogLight("h&*+\"", "h&*+\"", "h&*+\"", (Content) null, (Content) null, 587.23944F, 587.23944F, 587.23944F, 587.23944F, true, lightSourceArray0, (float[][]) null, "h&*+\"", true, bigDecimal0, bigDecimal0);
      HomeLight homeLight0 = new HomeLight(catalogLight0);
      homeLight0.setHeight(587.23944F);
      homeLight0.setDepth(587.23944F);
      homeLight0.getModelRotation();
      homeLight0.setNameVisible(true);
      // Undeclared exception!
      try { 
        HomePieceOfFurniture.SortableProperty.valueOf("h&*+\"");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant com.eteks.sweethome3d.model.HomePieceOfFurniture.SortableProperty.h&*+\"
         //
         verifyException("java.lang.Enum", e);
      }
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      LightSource[] lightSourceArray0 = new LightSource[2];
      BigDecimal bigDecimal0 = BigDecimal.TEN;
      CatalogLight catalogLight0 = new CatalogLight("& C", "& C", "& C", (Content) null, (Content) null, (-815.0F), (-815.0F), (-694.0F), (-694.0F), true, lightSourceArray0, (float[][]) null, "& C", true, bigDecimal0, bigDecimal0);
      HomeLight homeLight0 = new HomeLight(catalogLight0);
      HomeLight homeLight1 = homeLight0.clone();
      homeLight0.containsPoint((-694.0F), (-815.0F), (-694.0F));
      homeLight0.clone();
      homeLight1.getHeight();
      homeLight1.getPriceValueAddedTaxIncluded();
      homeLight1.getValueAddedTax();
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      LightSource[] lightSourceArray0 = new LightSource[2];
      BigDecimal bigDecimal0 = BigDecimal.TEN;
      LightSource lightSource0 = new LightSource(23.119429F, (-815.0011F), (-815.0011F), 0);
      LightSource lightSource1 = new LightSource(0, (-127.62969F), 0, 0);
      BigDecimal bigDecimal1 = BigDecimal.TEN;
      CatalogLight catalogLight0 = new CatalogLight("", "", "", (Content) null, (Content) null, 2320.0F, 23.119429F, 2320.0F, (-127.62969F), false, lightSourceArray0, (float[][]) null, "", false, bigDecimal1, bigDecimal0);
      HomeLight homeLight0 = new HomeLight(catalogLight0);
      // Undeclared exception!
      try { 
        homeLight0.setDepth(0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Piece isn't resizable
         //
         verifyException("com.eteks.sweethome3d.model.HomePieceOfFurniture", e);
      }
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      LightSource[] lightSourceArray0 = new LightSource[12];
      BigDecimal bigDecimal0 = BigDecimal.TEN;
      CatalogLight catalogLight0 = new CatalogLight("h&*+\"", "h&*+\"", "h&*+\"", (Content) null, (Content) null, 587.23944F, 587.23944F, 587.23944F, 587.23944F, true, lightSourceArray0, (float[][]) null, "h&*+\"", true, bigDecimal0, bigDecimal0);
      HomeLight homeLight0 = new HomeLight(catalogLight0);
      homeLight0.move((-1.0F), 587.23944F);
      homeLight0.getModelRotation();
      Float float0 = new Float((double) 587.23944F);
      homeLight0.setShininess(float0);
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      LightSource[] lightSourceArray0 = new LightSource[2];
      BigDecimal bigDecimal0 = BigDecimal.TEN;
      LightSource lightSource0 = new LightSource(0, 1.0F, 1.0F, 0);
      BigDecimal bigDecimal1 = BigDecimal.TEN;
      CatalogLight catalogLight0 = new CatalogLight("jar", "jar", "jar", (Content) null, (Content) null, (-2037.0F), 1.0F, 0.0F, 1.0F, true, lightSourceArray0, (float[][]) null, "jar", true, bigDecimal1, bigDecimal0);
      HomeLight homeLight0 = new HomeLight(catalogLight0);
      homeLight0.isBottomLeftPointAt((-2037.0F), (-815.0011F), (-2037.0F));
      homeLight0.setDepth(0.0F);
      homeLight0.isNameCenterPointAt((-4508.0F), 23.119429F, (-407.5F));
      homeLight0.setY(23.119429F);
      homeLight0.getGroundElevation();
      homeLight0.getDepth();
      homeLight0.setNameAngle((-407.5F));
      homeLight0.getModelRotation();
      homeLight0.isPointAt(0.0F, 0.0F, 2.0F);
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      LightSource[] lightSourceArray0 = new LightSource[2];
      LightSource lightSource0 = new LightSource((-815.0F), 0.0F, 0.0F, 114);
      lightSourceArray0[0] = lightSource0;
      LightSource lightSource1 = new LightSource((-694.0F), 2965.994F, (-127.62969F), 0);
      lightSourceArray0[1] = lightSource1;
      BigDecimal bigDecimal0 = BigDecimal.TEN;
      CatalogLight catalogLight0 = new CatalogLight("SDfTTd%", (String) null, (String) null, (Content) null, (Content) null, (-694.0F), 3.4028235E38F, (-127.62969F), 4207.1F, true, lightSourceArray0, (float[][]) null, " ReO&X *.:unU", true, bigDecimal0, bigDecimal0);
      HomeLight homeLight0 = new HomeLight(catalogLight0);
      HomeLight homeLight1 = homeLight0.clone();
      homeLight0.clone();
      HomeLight homeLight2 = homeLight1.clone();
      homeLight2.setNameXOffset((-127.62969F));
      homeLight1.setModelMirrored(false);
      // Undeclared exception!
      try { 
        HomePieceOfFurniture.Property.valueOf("h&*+\"");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant com.eteks.sweethome3d.model.HomePieceOfFurniture.Property.h&*+\"
         //
         verifyException("java.lang.Enum", e);
      }
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      LightSource[] lightSourceArray0 = new LightSource[2];
      BigDecimal bigDecimal0 = BigDecimal.ZERO;
      CatalogLight catalogLight0 = new CatalogLight("h&+)`\"", "h&+)`\"", "h&+)`\"", (Content) null, (Content) null, (-2263.3643F), (-2263.3643F), (-2263.3643F), (-2263.3643F), false, lightSourceArray0, (float[][]) null, "h&+)`\"", false, bigDecimal0, bigDecimal0);
      HomeLight homeLight0 = new HomeLight(catalogLight0);
      homeLight0.getTexture();
      homeLight0.getGroundElevation();
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      LightSource[] lightSourceArray0 = new LightSource[14];
      BigDecimal bigDecimal0 = BigDecimal.ONE;
      CatalogLight catalogLight0 = new CatalogLight("(%", "(%", "(%", (Content) null, (Content) null, (-815.0011F), (-815.0011F), (-815.0011F), (-815.0011F), false, lightSourceArray0, (float[][]) null, "(%", false, bigDecimal0, bigDecimal0);
      CatalogLight catalogLight1 = new CatalogLight("(%", "com.eteks.sweethome3d.tools.OperatingSystem$1", "JlGx;CM5'`X*~8;:sk_", (Content) null, (Content) null, 3211.1326F, (-815.0011F), (-815.0011F), 3211.1326F, false, lightSourceArray0, (float[][]) null, "8", false, bigDecimal0, bigDecimal0);
      HomeLight homeLight0 = new HomeLight(catalogLight1);
      HomeLight homeLight1 = new HomeLight(homeLight0);
      TextStyle textStyle0 = new TextStyle((-815.0011F));
      TextStyle textStyle1 = textStyle0.deriveStyle(3211.1326F);
      homeLight1.setNameStyle(textStyle1);
      HomeLight homeLight2 = homeLight1.clone();
      homeLight2.setName("JlGx;CM5'`X*~8;:sk_");
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      LightSource lightSource0 = new LightSource((-815.0F), 0.0F, 0.0F, 128);
      LightSource lightSource1 = new LightSource((-27.863897F), (-2755.2034F), 815.0F, 128);
      BigDecimal bigDecimal0 = BigDecimal.ZERO;
      String[] stringArray0 = new String[6];
      stringArray0[0] = null;
      stringArray0[1] = null;
      stringArray0[2] = "com.eteks.sweethome3d.model.HomePieceOfFurniture$2";
      stringArray0[3] = "com.eteks.sweethome3d.model.HomePieceOfFurniture$2";
      stringArray0[4] = " doesn't contain piece ";
      stringArray0[5] = " doesn't contain piece ";
      Long long0 = new Long(128);
      Float float0 = new Float((-27.863897F));
      Sash[] sashArray0 = new Sash[4];
      Sash sash0 = new Sash(567.9278F, 0.0F, 2965.994F, 2169.8F, 815.0F);
      sashArray0[0] = sash0;
      Sash sash1 = new Sash((-2755.2034F), (-2755.2034F), 128, 815.0F, 1043.49F);
      sashArray0[1] = sash1;
      Sash sash2 = new Sash((-2755.2034F), 0.0F, 1674.603F, (-815.0F), 567.9278F);
      sashArray0[2] = sash2;
      Sash sash3 = new Sash((-815.0F), (-1344.4F), 2004.6312F, 0.5F, 2169.8F);
      sashArray0[3] = sash3;
      CatalogDoorOrWindow catalogDoorOrWindow0 = new CatalogDoorOrWindow(" doesn't contain piece ", (String) null, (String) null, (String) null, stringArray0, long0, float0, (Content) null, (Content) null, (Content) null, (-815.0F), 2169.8F, 815.0F, (-1344.4F), false, (-1344.4F), (-27.863897F), sashArray0, (float[][]) null, "DEPTH", true, true, false, bigDecimal0, bigDecimal0, "com.eteks.sweethome3d.model.HomePieceOfFurniture$2");
      HomeDoorOrWindow homeDoorOrWindow0 = new HomeDoorOrWindow(catalogDoorOrWindow0);
      HomeDoorOrWindow homeDoorOrWindow1 = homeDoorOrWindow0.clone();
      homeDoorOrWindow1.isNameVisible();
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      LightSource[] lightSourceArray0 = new LightSource[2];
      LightSource lightSource0 = new LightSource((-815.0F), 0.0F, 0.0F, 114);
      lightSourceArray0[0] = lightSource0;
      LightSource lightSource1 = new LightSource((-694.0F), 2965.994F, (-127.62969F), 0);
      lightSourceArray0[1] = lightSource1;
      BigDecimal bigDecimal0 = BigDecimal.TEN;
      CatalogLight catalogLight0 = new CatalogLight("h&*+\"", "h&*+\"", "h&*+\"", (Content) null, (Content) null, (-815.0F), 0.3926991F, (-694.0F), (-694.0F), true, lightSourceArray0, (float[][]) null, "h&*+\"", true, bigDecimal0, bigDecimal0);
      HomeLight homeLight0 = new HomeLight(catalogLight0);
      HomeLight homeLight1 = homeLight0.clone();
      HomePieceOfFurniture homePieceOfFurniture0 = homeLight1.clone();
      homeLight1.isPointAt(2965.994F, (-815.0F), 114);
      homePieceOfFurniture0.setModelMirrored(true);
      homeLight0.getCurrency();
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      ResourceURLContent resourceURLContent0 = new ResourceURLContent((URL) null, true);
      Sash[] sashArray0 = new Sash[6];
      Sash sash0 = new Sash(1676.307F, (-2667.24F), 1676.307F, 1392.6615F, 8.67158F);
      sashArray0[0] = sash0;
      Sash sash1 = new Sash(1392.6615F, (-948.705F), 2.0F, (-2667.24F), 1392.6615F);
      sashArray0[1] = sash1;
      Sash sash2 = new Sash(1392.6615F, (-1916.7349F), 0.0F, (-2667.24F), 2.0F);
      sashArray0[2] = sash2;
      Sash sash3 = new Sash(1676.307F, (-2667.24F), 1392.6615F, 114.0F, 0.0F);
      sashArray0[3] = sash3;
      Sash sash4 = new Sash(8.67158F, (-660.85376F), 1676.307F, (-4407.0454F), (-948.705F));
      sashArray0[4] = sash4;
      Sash sash5 = new Sash(1676.307F, 2.0F, 114.0F, (-948.705F), (-1284.6346F));
      sashArray0[5] = sash5;
      BigDecimal bigDecimal0 = new BigDecimal(811402969);
      CatalogDoorOrWindow catalogDoorOrWindow0 = new CatalogDoorOrWindow("", "", "", resourceURLContent0, resourceURLContent0, resourceURLContent0, 1392.6615F, 1392.6615F, 1392.6615F, 8.67158F, true, 1392.6615F, 1392.6615F, sashArray0, (float[][]) null, "", true, bigDecimal0, bigDecimal0);
      HomeDoorOrWindow homeDoorOrWindow0 = new HomeDoorOrWindow(catalogDoorOrWindow0);
      HomeDoorOrWindow homeDoorOrWindow1 = homeDoorOrWindow0.clone();
      homeDoorOrWindow1.getPlanIcon();
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      LightSource[] lightSourceArray0 = new LightSource[2];
      BigDecimal bigDecimal0 = BigDecimal.ONE;
      CatalogLight catalogLight0 = new CatalogLight("h&i*+\"", "h&i*+\"", "h&i*+\"", (Content) null, (Content) null, (-2263.3643F), (-2263.3643F), (-2263.3643F), (-2263.3643F), true, lightSourceArray0, (float[][]) null, "h&i*+\"", true, bigDecimal0, bigDecimal0);
      HomeLight homeLight0 = new HomeLight(catalogLight0);
      homeLight0.getPoints();
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      LightSource[] lightSourceArray0 = new LightSource[5];
      BigDecimal bigDecimal0 = BigDecimal.ZERO;
      CatalogLight catalogLight0 = new CatalogLight("KN1X-YF77~a:WG8", "NAME", "NAME", (Content) null, (Content) null, (-623.32F), 4321.791F, (-1093.1008F), 0.0F, true, lightSourceArray0, (float[][]) null, "h&*+\"", false, bigDecimal0, bigDecimal0);
      HomeLight homeLight0 = new HomeLight(catalogLight0);
      homeLight0.getGroundElevation();
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      LightSource[] lightSourceArray0 = new LightSource[2];
      LightSource lightSource0 = new LightSource((-815.0F), 0.0F, 0.0F, 114);
      lightSourceArray0[0] = lightSource0;
      LightSource lightSource1 = new LightSource((-694.0F), 0.36957806F, (-127.62969F), 0);
      lightSourceArray0[1] = lightSource1;
      BigDecimal bigDecimal0 = BigDecimal.TEN;
      CatalogLight catalogLight0 = new CatalogLight("h&9+\"", "h&9+\"", "h&9+\"", (Content) null, (Content) null, (-815.0F), 0.36957806F, (-694.0F), (-694.0F), true, lightSourceArray0, (float[][]) null, "h&9+\"", true, bigDecimal0, bigDecimal0);
      HomeLight homeLight0 = new HomeLight(catalogLight0);
      HomeLight homeLight1 = homeLight0.clone();
      HomePieceOfFurniture homePieceOfFurniture0 = homeLight1.clone();
      homeLight1.isPointAt(114, (-815.0F), 114);
      homePieceOfFurniture0.setHeight((-38.0F));
      homeLight1.setName("h&9+\"");
      homePieceOfFurniture0.setModelMirrored(true);
      homeLight0.isBottomLeftPointAt(0, 407.5F, (-694.0F));
      homeLight1.getY();
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      LightSource[] lightSourceArray0 = new LightSource[12];
      BigDecimal bigDecimal0 = new BigDecimal(0);
      CatalogLight catalogLight0 = new CatalogLight("h&*+\"", "h&*+\"", "h&*+\"", (Content) null, (Content) null, (-815.0011F), (-815.0011F), (-694.0F), (-694.0F), true, lightSourceArray0, (float[][]) null, "h&*+\"", true, bigDecimal0, bigDecimal0);
      HomeLight homeLight0 = new HomeLight(catalogLight0);
      HomePieceOfFurniture homePieceOfFurniture0 = homeLight0.clone();
      homeLight0.containsPoint((-1151), 0, 0);
      homePieceOfFurniture0.setColor((Integer) null);
      homePieceOfFurniture0.isBackFaceShown();
  }

  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      LightSource[] lightSourceArray0 = new LightSource[5];
      BigDecimal bigDecimal0 = BigDecimal.TEN;
      CatalogLight catalogLight0 = new CatalogLight("/", "/", "/", (Content) null, (Content) null, 0.3926991F, 0.3926991F, 0.3926991F, (-815.0011F), true, lightSourceArray0, (float[][]) null, "{L", true, bigDecimal0, bigDecimal0);
      catalogLight0.getCategory();
      catalogLight0.setCategory((FurnitureCategory) null);
      HomeLight homeLight0 = new HomeLight(catalogLight0);
      homeLight0.setWidth(0.054564774F);
      homeLight0.setHeight((-815.0011F));
      HomeLight homeLight1 = homeLight0.clone();
      homeLight1.isNameCenterPointAt(0.14178477F, 0.14178477F, 1.0F);
      Float float0 = new Float((double) 0.14178477F);
      homeLight0.setShininess(float0);
      homeLight0.setShininess(float0);
  }

  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      LightSource[] lightSourceArray0 = new LightSource[2];
      LightSource lightSource0 = new LightSource((-815.0F), 0.0F, 0.0F, 484);
      lightSourceArray0[0] = lightSource0;
      LightSource lightSource1 = new LightSource((-694.0F), 0.36957806F, (-127.62969F), 0);
      lightSourceArray0[1] = lightSource1;
      BigDecimal bigDecimal0 = BigDecimal.TEN;
      CatalogLight catalogLight0 = new CatalogLight("h&9+\"", "h&9+\"", "h&9+\"", (Content) null, (Content) null, (-815.0F), 0.36957806F, (-694.0F), (-694.0F), true, lightSourceArray0, (float[][]) null, "h&9+\"", true, bigDecimal0, bigDecimal0);
      HomeLight homeLight0 = new HomeLight(catalogLight0);
      HomeLight homeLight1 = homeLight0.clone();
      HomePieceOfFurniture homePieceOfFurniture0 = homeLight1.clone();
      homeLight1.isPointAt(484, (-815.0F), 484);
      homeLight1.setAngle((-38.0F));
      HomeLight homeLight2 = new HomeLight(catalogLight0);
      homeLight2.isPointAt((-815.0F), 0, 2141.882F);
      homeLight0.setName("Invalid URL base for JAR entry");
      homePieceOfFurniture0.setModelMirrored(false);
      homeLight0.isBottomLeftPointAt(2141.882F, 3170.9631F, 0.36957806F);
  }

  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      LightSource[] lightSourceArray0 = new LightSource[8];
      BigDecimal bigDecimal0 = BigDecimal.TEN;
      CatalogLight catalogLight0 = new CatalogLight("", (String) null, "", (Content) null, (Content) null, 587.23944F, 6965.1F, 587.23944F, 587.23944F, true, lightSourceArray0, (float[][]) null, "", false, bigDecimal0, bigDecimal0);
      HomeLight homeLight0 = new HomeLight(catalogLight0);
      HomeLight homeLight1 = homeLight0.clone();
      HomeLight homeLight2 = homeLight0.clone();
      homeLight0.setAngle(1421.1938F);
      homeLight1.isTopRightPointAt(579.0F, (-257.95F), (-1322.0859F));
      homeLight2.setNameAngle(3.4028235E38F);
  }

  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      LightSource[] lightSourceArray0 = new LightSource[2];
      BigDecimal bigDecimal0 = BigDecimal.ZERO;
      CatalogLight catalogLight0 = new CatalogLight("h&+)`\"", "h&+)`\"", "h&+)`\"", (Content) null, (Content) null, (-2263.3643F), (-2263.3643F), (-2263.3643F), (-2263.3643F), true, lightSourceArray0, (float[][]) null, "h&+)`\"", true, bigDecimal0, bigDecimal0);
      HomeLight homeLight0 = new HomeLight(catalogLight0);
      homeLight0.getGroundElevation();
  }

  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      LightSource[] lightSourceArray0 = new LightSource[2];
      BigDecimal bigDecimal0 = BigDecimal.TEN;
      CatalogLight catalogLight0 = new CatalogLight("h&+)`\"", "h&+)`\"", "h&+)`\"", (Content) null, (Content) null, (-2263.3643F), (-2263.3643F), (-2263.3643F), (-2263.3643F), false, lightSourceArray0, (float[][]) null, "h&+)`\"", false, bigDecimal0, bigDecimal0);
      FurnitureCategory furnitureCategory0 = new FurnitureCategory("h&+)`\"");
      catalogLight0.setCategory(furnitureCategory0);
      HomeLight homeLight0 = new HomeLight(catalogLight0);
      homeLight0.setVisible(false);
      FurnitureCategory furnitureCategory1 = new FurnitureCategory("h&+)`\"");
      homeLight0.setName("h&+)`\"");
      homeLight0.setVisible(true);
  }

  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      LightSource[] lightSourceArray0 = new LightSource[2];
      BigDecimal bigDecimal0 = BigDecimal.TEN;
      CatalogLight catalogLight0 = new CatalogLight("h&+)`\"", "h&+)`\"", "h&+)`\"", (Content) null, (Content) null, (-2263.3643F), (-2263.3643F), (-2263.3643F), (-2263.3643F), false, lightSourceArray0, (float[][]) null, "h&+)`\"", false, bigDecimal0, bigDecimal0);
      HomeLight homeLight0 = new HomeLight(catalogLight0);
      homeLight0.setVisible(false);
      homeLight0.setName("h&+)`\"");
  }

  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      LightSource[] lightSourceArray0 = new LightSource[2];
      LightSource lightSource0 = new LightSource((-815.0F), 0.0F, 0.0F, 128);
      lightSourceArray0[0] = lightSource0;
      LightSource lightSource1 = new LightSource((-1.0F), (-2755.2034F), 815.0F, 128);
      BigDecimal bigDecimal0 = BigDecimal.ZERO;
      CatalogLight catalogLight0 = new CatalogLight("com.eteks.sweethome3d.model.HomePieceOfFurniture$2", (String) null, "com.eteks.sweethome3d.model.HomePieceOfFurniture$2", (Content) null, (Content) null, (-815.0F), 128, 2965.994F, 2169.8F, true, lightSourceArray0, (float[][]) null, (String) null, true, bigDecimal0, bigDecimal0);
      HomeLight homeLight0 = new HomeLight(catalogLight0);
      homeLight0.clone();
      HomePieceOfFurniture homePieceOfFurniture0 = new HomePieceOfFurniture(homeLight0);
      HomePieceOfFurniture homePieceOfFurniture1 = homePieceOfFurniture0.clone();
      homePieceOfFurniture0.setModelMirrored(true);
      homeLight0.isNameCenterPointAt(0.0F, 2965.994F, 0.0F);
      homeLight0.setY((-1344.4F));
      homeLight0.getGroundElevation();
      homePieceOfFurniture1.setElevation(2.0F);
  }

  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      LightSource[] lightSourceArray0 = new LightSource[4];
      BigDecimal bigDecimal0 = BigDecimal.TEN;
      CatalogLight catalogLight0 = new CatalogLight("/", "/", "/", (Content) null, (Content) null, 0.3926991F, 92.121765F, 233.10785F, (-727.8896F), true, lightSourceArray0, (float[][]) null, "{L", true, bigDecimal0, bigDecimal0);
      HomeLight homeLight0 = new HomeLight(catalogLight0);
      catalogLight0.getCategory();
      catalogLight0.setCategory((FurnitureCategory) null);
      HomeLight homeLight1 = new HomeLight(catalogLight0);
      homeLight1.getIcon();
      Integer integer0 = new Integer((-1204));
      homeLight0.setColor(integer0);
      homeLight0.setNameVisible(true);
      homeLight1.isBottomRightPointAt(0.0F, 301.6161F, 3709.4194F);
      HomeLight homeLight2 = homeLight1.clone();
      Float float0 = new Float((double) 301.6161F);
      homeLight2.setShininess(float0);
      Integer integer1 = new Integer(3009);
      homeLight1.setColor(integer1);
      homeLight1.isTopRightPointAt(233.10785F, 92.121765F, 1413.239F);
  }

  @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      LightSource[] lightSourceArray0 = new LightSource[2];
      LightSource lightSource0 = new LightSource((-815.0F), 0.0F, 0.0F, 114);
      assertEquals((-815.0F), lightSource0.getX(), 0.01F);
      assertNull(lightSource0.getDiameter());
      assertEquals(0.0F, lightSource0.getZ(), 0.01F);
      assertEquals(114, lightSource0.getColor());
      assertEquals(0.0F, lightSource0.getY(), 0.01F);
      assertNotNull(lightSource0);
      
      lightSourceArray0[0] = lightSource0;
      boolean boolean0 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      LightSource lightSource1 = new LightSource((-694.0F), 2965.994F, (-127.62969F), 0);
      assertFalse(lightSource1.equals((Object)lightSource0));
      assertEquals((-127.62969F), lightSource1.getZ(), 0.01F);
      assertEquals(0, lightSource1.getColor());
      assertEquals(2965.994F, lightSource1.getY(), 0.01F);
      assertNull(lightSource1.getDiameter());
      assertEquals((-694.0F), lightSource1.getX(), 0.01F);
      assertNotNull(lightSource1);
      
      BigDecimal bigDecimal0 = BigDecimal.TEN;
      assertEquals((short)10, bigDecimal0.shortValue());
      assertEquals((byte)10, bigDecimal0.byteValue());
      assertNotNull(bigDecimal0);
      
      CatalogLight catalogLight0 = new CatalogLight("h&*+\"", "h&*+\"", "h&*+\"", (Content) null, (Content) null, (-815.0F), 0.3926991F, (-694.0F), (-694.0F), true, lightSourceArray0, (float[][]) null, "h&*+\"", true, bigDecimal0, bigDecimal0);
      assertEquals((short)10, bigDecimal0.shortValue());
      assertEquals((byte)10, bigDecimal0.byteValue());
      assertEquals("h&*+\"", catalogLight0.getId());
      assertFalse(catalogLight0.isDoorOrWindow());
      assertTrue(catalogLight0.isProportional());
      assertNull(catalogLight0.getCurrency());
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertEquals((-694.0F), catalogLight0.getElevation(), 0.01F);
      assertTrue(catalogLight0.isTexturable());
      assertEquals((-694.0F), catalogLight0.getHeight(), 0.01F);
      assertNull(catalogLight0.getCreationDate());
      assertEquals("h&*+\"", catalogLight0.getDescription());
      assertTrue(catalogLight0.isResizable());
      assertFalse(catalogLight0.isModifiable());
      assertFalse(catalogLight0.isBackFaceShown());
      assertTrue(catalogLight0.isMovable());
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertEquals("h&*+\"", catalogLight0.getCreator());
      assertEquals((-815.0F), catalogLight0.getWidth(), 0.01F);
      assertEquals(0.3926991F, catalogLight0.getDepth(), 0.01F);
      assertNull(catalogLight0.getGrade());
      assertEquals("h&*+\"", catalogLight0.getName());
      assertNull(catalogLight0.getInformation());
      assertNull(catalogLight0.getColor());
      assertTrue(catalogLight0.isDeformable());
      assertEquals(2, lightSourceArray0.length);
      assertNotNull(catalogLight0);
      
      HomeLight homeLight0 = new HomeLight(catalogLight0);
      assertEquals((short)10, bigDecimal0.shortValue());
      assertEquals((byte)10, bigDecimal0.byteValue());
      assertEquals("h&*+\"", catalogLight0.getId());
      assertFalse(catalogLight0.isDoorOrWindow());
      assertTrue(catalogLight0.isProportional());
      assertNull(catalogLight0.getCurrency());
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertEquals((-694.0F), catalogLight0.getElevation(), 0.01F);
      assertTrue(catalogLight0.isTexturable());
      assertEquals((-694.0F), catalogLight0.getHeight(), 0.01F);
      assertNull(catalogLight0.getCreationDate());
      assertEquals("h&*+\"", catalogLight0.getDescription());
      assertTrue(catalogLight0.isResizable());
      assertFalse(catalogLight0.isModifiable());
      assertFalse(catalogLight0.isBackFaceShown());
      assertTrue(catalogLight0.isMovable());
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertEquals("h&*+\"", catalogLight0.getCreator());
      assertEquals((-815.0F), catalogLight0.getWidth(), 0.01F);
      assertEquals(0.3926991F, catalogLight0.getDepth(), 0.01F);
      assertNull(catalogLight0.getGrade());
      assertEquals("h&*+\"", catalogLight0.getName());
      assertNull(catalogLight0.getInformation());
      assertNull(catalogLight0.getColor());
      assertTrue(catalogLight0.isDeformable());
      assertEquals((-815.0F), homeLight0.getWidth(), 0.01F);
      assertEquals("h&*+\"", homeLight0.getName());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals("h&*+\"", homeLight0.getDescription());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertNull(homeLight0.getShininess());
      assertTrue(homeLight0.isResizable());
      assertTrue(homeLight0.isMovable());
      assertEquals(0.3926991F, homeLight0.getDepth(), 0.01F);
      assertEquals((-694.0F), homeLight0.getHeight(), 0.01F);
      assertEquals((-407.5F), homeLight0.getX(), 0.01F);
      assertNull(homeLight0.getCurrency());
      assertEquals(0.19634955F, homeLight0.getY(), 0.01F);
      assertEquals("h&*+\"", homeLight0.getCatalogId());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertNull(homeLight0.getColor());
      assertFalse(homeLight0.isModelMirrored());
      assertFalse(homeLight0.isNameVisible());
      assertFalse(homeLight0.isBackFaceShown());
      assertTrue(homeLight0.isDeformable());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertTrue(homeLight0.isVisible());
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertTrue(homeLight0.isTexturable());
      assertEquals((-694.0F), homeLight0.getElevation(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      assertEquals((-694.0F), homeLight0.getGroundElevation(), 0.01F);
      assertEquals(2, lightSourceArray0.length);
      assertNotNull(homeLight0);
      
      HomeLight homeLight1 = homeLight0.clone();
      assertFalse(homeLight1.equals((Object)homeLight0));
      assertEquals((short)10, bigDecimal0.shortValue());
      assertEquals((byte)10, bigDecimal0.byteValue());
      assertEquals("h&*+\"", catalogLight0.getId());
      assertFalse(catalogLight0.isDoorOrWindow());
      assertTrue(catalogLight0.isProportional());
      assertNull(catalogLight0.getCurrency());
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertEquals((-694.0F), catalogLight0.getElevation(), 0.01F);
      assertTrue(catalogLight0.isTexturable());
      assertEquals((-694.0F), catalogLight0.getHeight(), 0.01F);
      assertNull(catalogLight0.getCreationDate());
      assertEquals("h&*+\"", catalogLight0.getDescription());
      assertTrue(catalogLight0.isResizable());
      assertFalse(catalogLight0.isModifiable());
      assertFalse(catalogLight0.isBackFaceShown());
      assertTrue(catalogLight0.isMovable());
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertEquals("h&*+\"", catalogLight0.getCreator());
      assertEquals((-815.0F), catalogLight0.getWidth(), 0.01F);
      assertEquals(0.3926991F, catalogLight0.getDepth(), 0.01F);
      assertNull(catalogLight0.getGrade());
      assertEquals("h&*+\"", catalogLight0.getName());
      assertNull(catalogLight0.getInformation());
      assertNull(catalogLight0.getColor());
      assertTrue(catalogLight0.isDeformable());
      assertEquals((-815.0F), homeLight0.getWidth(), 0.01F);
      assertEquals("h&*+\"", homeLight0.getName());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals("h&*+\"", homeLight0.getDescription());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertNull(homeLight0.getShininess());
      assertTrue(homeLight0.isResizable());
      assertTrue(homeLight0.isMovable());
      assertEquals(0.3926991F, homeLight0.getDepth(), 0.01F);
      assertEquals((-694.0F), homeLight0.getHeight(), 0.01F);
      assertEquals((-407.5F), homeLight0.getX(), 0.01F);
      assertNull(homeLight0.getCurrency());
      assertEquals(0.19634955F, homeLight0.getY(), 0.01F);
      assertEquals("h&*+\"", homeLight0.getCatalogId());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertNull(homeLight0.getColor());
      assertFalse(homeLight0.isModelMirrored());
      assertFalse(homeLight0.isNameVisible());
      assertFalse(homeLight0.isBackFaceShown());
      assertTrue(homeLight0.isDeformable());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertTrue(homeLight0.isVisible());
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertTrue(homeLight0.isTexturable());
      assertEquals((-694.0F), homeLight0.getElevation(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      assertEquals((-694.0F), homeLight0.getGroundElevation(), 0.01F);
      assertEquals("h&*+\"", homeLight1.getCatalogId());
      assertNull(homeLight1.getShininess());
      assertTrue(homeLight1.isResizable());
      assertEquals((-694.0F), homeLight1.getHeight(), 0.01F);
      assertNull(homeLight1.getStaircaseCutOutShape());
      assertTrue(homeLight1.isVisible());
      assertTrue(homeLight1.isMovable());
      assertEquals("h&*+\"", homeLight1.getName());
      assertEquals(0.0F, homeLight1.getNameAngle(), 0.01F);
      assertEquals(0.3926991F, homeLight1.getDepth(), 0.01F);
      assertEquals((-815.0F), homeLight1.getWidth(), 0.01F);
      assertEquals(0.0F, homeLight1.getNameXOffset(), 0.01F);
      assertEquals((-694.0F), homeLight1.getElevation(), 0.01F);
      assertTrue(homeLight1.isDeformable());
      assertFalse(homeLight1.isNameVisible());
      assertEquals((-694.0F), homeLight1.getGroundElevation(), 0.01F);
      assertEquals("h&*+\"", homeLight1.getDescription());
      assertFalse(homeLight1.isDoorOrWindow());
      assertTrue(homeLight1.isTexturable());
      assertEquals(0.0F, homeLight1.getAngle(), 0.01F);
      assertFalse(homeLight1.isModelMirrored());
      assertFalse(homeLight1.isBackFaceShown());
      assertNull(homeLight1.getCurrency());
      assertEquals((-407.5F), homeLight1.getX(), 0.01F);
      assertEquals(0.0F, homeLight1.getNameYOffset(), 0.01F);
      assertEquals(0.19634955F, homeLight1.getY(), 0.01F);
      assertNull(homeLight1.getColor());
      assertEquals(0.5F, homeLight1.getPower(), 0.01F);
      assertEquals(2, lightSourceArray0.length);
      assertNotSame(homeLight0, homeLight1);
      assertNotSame(homeLight1, homeLight0);
      assertNotNull(homeLight1);
      
      HomeLight homeLight2 = (HomeLight)homeLight1.clone();
      assertFalse(homeLight0.equals((Object)homeLight1));
      assertFalse(homeLight1.equals((Object)homeLight0));
      assertFalse(homeLight2.equals((Object)homeLight0));
      assertFalse(homeLight2.equals((Object)homeLight1));
      assertEquals((short)10, bigDecimal0.shortValue());
      assertEquals((byte)10, bigDecimal0.byteValue());
      assertEquals("h&*+\"", catalogLight0.getId());
      assertFalse(catalogLight0.isDoorOrWindow());
      assertTrue(catalogLight0.isProportional());
      assertNull(catalogLight0.getCurrency());
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertEquals((-694.0F), catalogLight0.getElevation(), 0.01F);
      assertTrue(catalogLight0.isTexturable());
      assertEquals((-694.0F), catalogLight0.getHeight(), 0.01F);
      assertNull(catalogLight0.getCreationDate());
      assertEquals("h&*+\"", catalogLight0.getDescription());
      assertTrue(catalogLight0.isResizable());
      assertFalse(catalogLight0.isModifiable());
      assertFalse(catalogLight0.isBackFaceShown());
      assertTrue(catalogLight0.isMovable());
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertEquals("h&*+\"", catalogLight0.getCreator());
      assertEquals((-815.0F), catalogLight0.getWidth(), 0.01F);
      assertEquals(0.3926991F, catalogLight0.getDepth(), 0.01F);
      assertNull(catalogLight0.getGrade());
      assertEquals("h&*+\"", catalogLight0.getName());
      assertNull(catalogLight0.getInformation());
      assertNull(catalogLight0.getColor());
      assertTrue(catalogLight0.isDeformable());
      assertEquals((-815.0F), homeLight0.getWidth(), 0.01F);
      assertEquals("h&*+\"", homeLight0.getName());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals("h&*+\"", homeLight0.getDescription());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertNull(homeLight0.getShininess());
      assertTrue(homeLight0.isResizable());
      assertTrue(homeLight0.isMovable());
      assertEquals(0.3926991F, homeLight0.getDepth(), 0.01F);
      assertEquals((-694.0F), homeLight0.getHeight(), 0.01F);
      assertEquals((-407.5F), homeLight0.getX(), 0.01F);
      assertNull(homeLight0.getCurrency());
      assertEquals(0.19634955F, homeLight0.getY(), 0.01F);
      assertEquals("h&*+\"", homeLight0.getCatalogId());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertNull(homeLight0.getColor());
      assertFalse(homeLight0.isModelMirrored());
      assertFalse(homeLight0.isNameVisible());
      assertFalse(homeLight0.isBackFaceShown());
      assertTrue(homeLight0.isDeformable());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertTrue(homeLight0.isVisible());
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertTrue(homeLight0.isTexturable());
      assertEquals((-694.0F), homeLight0.getElevation(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      assertEquals((-694.0F), homeLight0.getGroundElevation(), 0.01F);
      assertEquals("h&*+\"", homeLight1.getCatalogId());
      assertNull(homeLight1.getShininess());
      assertTrue(homeLight1.isResizable());
      assertEquals((-694.0F), homeLight1.getHeight(), 0.01F);
      assertNull(homeLight1.getStaircaseCutOutShape());
      assertTrue(homeLight1.isVisible());
      assertTrue(homeLight1.isMovable());
      assertEquals("h&*+\"", homeLight1.getName());
      assertEquals(0.0F, homeLight1.getNameAngle(), 0.01F);
      assertEquals(0.3926991F, homeLight1.getDepth(), 0.01F);
      assertEquals((-815.0F), homeLight1.getWidth(), 0.01F);
      assertEquals(0.0F, homeLight1.getNameXOffset(), 0.01F);
      assertEquals((-694.0F), homeLight1.getElevation(), 0.01F);
      assertTrue(homeLight1.isDeformable());
      assertFalse(homeLight1.isNameVisible());
      assertEquals((-694.0F), homeLight1.getGroundElevation(), 0.01F);
      assertEquals("h&*+\"", homeLight1.getDescription());
      assertFalse(homeLight1.isDoorOrWindow());
      assertTrue(homeLight1.isTexturable());
      assertEquals(0.0F, homeLight1.getAngle(), 0.01F);
      assertFalse(homeLight1.isModelMirrored());
      assertFalse(homeLight1.isBackFaceShown());
      assertNull(homeLight1.getCurrency());
      assertEquals((-407.5F), homeLight1.getX(), 0.01F);
      assertEquals(0.0F, homeLight1.getNameYOffset(), 0.01F);
      assertEquals(0.19634955F, homeLight1.getY(), 0.01F);
      assertNull(homeLight1.getColor());
      assertEquals(0.5F, homeLight1.getPower(), 0.01F);
      assertFalse(homeLight2.isDoorOrWindow());
      assertFalse(homeLight2.isModelMirrored());
      assertEquals(0.0F, homeLight2.getAngle(), 0.01F);
      assertTrue(homeLight2.isTexturable());
      assertNull(homeLight2.getColor());
      assertEquals((-694.0F), homeLight2.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight2.getNameYOffset(), 0.01F);
      assertEquals((-694.0F), homeLight2.getElevation(), 0.01F);
      assertEquals(0.3926991F, homeLight2.getDepth(), 0.01F);
      assertFalse(homeLight2.isNameVisible());
      assertFalse(homeLight2.isBackFaceShown());
      assertEquals("h&*+\"", homeLight2.getName());
      assertEquals("h&*+\"", homeLight2.getCatalogId());
      assertTrue(homeLight2.isResizable());
      assertNull(homeLight2.getShininess());
      assertEquals("h&*+\"", homeLight2.getDescription());
      assertEquals(0.19634955F, homeLight2.getY(), 0.01F);
      assertEquals(0.0F, homeLight2.getNameXOffset(), 0.01F);
      assertTrue(homeLight2.isDeformable());
      assertEquals((-407.5F), homeLight2.getX(), 0.01F);
      assertNull(homeLight2.getCurrency());
      assertEquals(0.5F, homeLight2.getPower(), 0.01F);
      assertTrue(homeLight2.isVisible());
      assertEquals((-694.0F), homeLight2.getHeight(), 0.01F);
      assertEquals(0.0F, homeLight2.getNameAngle(), 0.01F);
      assertNull(homeLight2.getStaircaseCutOutShape());
      assertEquals((-815.0F), homeLight2.getWidth(), 0.01F);
      assertTrue(homeLight2.isMovable());
      assertEquals(2, lightSourceArray0.length);
      assertNotSame(homeLight0, homeLight1);
      assertNotSame(homeLight0, homeLight2);
      assertNotSame(homeLight1, homeLight2);
      assertNotSame(homeLight1, homeLight0);
      assertNotSame(homeLight2, homeLight0);
      assertNotSame(homeLight2, homeLight1);
      assertNotNull(homeLight2);
      
      homeLight2.setModelMirrored(true);
      assertFalse(homeLight0.equals((Object)homeLight1));
      assertFalse(homeLight0.equals((Object)homeLight2));
      assertFalse(homeLight1.equals((Object)homeLight2));
      assertFalse(homeLight1.equals((Object)homeLight0));
      assertFalse(homeLight2.equals((Object)homeLight0));
      assertFalse(homeLight2.equals((Object)homeLight1));
      assertEquals((short)10, bigDecimal0.shortValue());
      assertEquals((byte)10, bigDecimal0.byteValue());
      assertEquals("h&*+\"", catalogLight0.getId());
      assertFalse(catalogLight0.isDoorOrWindow());
      assertTrue(catalogLight0.isProportional());
      assertNull(catalogLight0.getCurrency());
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertEquals((-694.0F), catalogLight0.getElevation(), 0.01F);
      assertTrue(catalogLight0.isTexturable());
      assertEquals((-694.0F), catalogLight0.getHeight(), 0.01F);
      assertNull(catalogLight0.getCreationDate());
      assertEquals("h&*+\"", catalogLight0.getDescription());
      assertTrue(catalogLight0.isResizable());
      assertFalse(catalogLight0.isModifiable());
      assertFalse(catalogLight0.isBackFaceShown());
      assertTrue(catalogLight0.isMovable());
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertEquals("h&*+\"", catalogLight0.getCreator());
      assertEquals((-815.0F), catalogLight0.getWidth(), 0.01F);
      assertEquals(0.3926991F, catalogLight0.getDepth(), 0.01F);
      assertNull(catalogLight0.getGrade());
      assertEquals("h&*+\"", catalogLight0.getName());
      assertNull(catalogLight0.getInformation());
      assertNull(catalogLight0.getColor());
      assertTrue(catalogLight0.isDeformable());
      assertEquals((-815.0F), homeLight0.getWidth(), 0.01F);
      assertEquals("h&*+\"", homeLight0.getName());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals("h&*+\"", homeLight0.getDescription());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertNull(homeLight0.getShininess());
      assertTrue(homeLight0.isResizable());
      assertTrue(homeLight0.isMovable());
      assertEquals(0.3926991F, homeLight0.getDepth(), 0.01F);
      assertEquals((-694.0F), homeLight0.getHeight(), 0.01F);
      assertEquals((-407.5F), homeLight0.getX(), 0.01F);
      assertNull(homeLight0.getCurrency());
      assertEquals(0.19634955F, homeLight0.getY(), 0.01F);
      assertEquals("h&*+\"", homeLight0.getCatalogId());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertNull(homeLight0.getColor());
      assertFalse(homeLight0.isModelMirrored());
      assertFalse(homeLight0.isNameVisible());
      assertFalse(homeLight0.isBackFaceShown());
      assertTrue(homeLight0.isDeformable());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertTrue(homeLight0.isVisible());
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertTrue(homeLight0.isTexturable());
      assertEquals((-694.0F), homeLight0.getElevation(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      assertEquals((-694.0F), homeLight0.getGroundElevation(), 0.01F);
      assertEquals("h&*+\"", homeLight1.getCatalogId());
      assertNull(homeLight1.getShininess());
      assertTrue(homeLight1.isResizable());
      assertEquals((-694.0F), homeLight1.getHeight(), 0.01F);
      assertNull(homeLight1.getStaircaseCutOutShape());
      assertTrue(homeLight1.isVisible());
      assertTrue(homeLight1.isMovable());
      assertEquals("h&*+\"", homeLight1.getName());
      assertEquals(0.0F, homeLight1.getNameAngle(), 0.01F);
      assertEquals(0.3926991F, homeLight1.getDepth(), 0.01F);
      assertEquals((-815.0F), homeLight1.getWidth(), 0.01F);
      assertEquals(0.0F, homeLight1.getNameXOffset(), 0.01F);
      assertEquals((-694.0F), homeLight1.getElevation(), 0.01F);
      assertTrue(homeLight1.isDeformable());
      assertFalse(homeLight1.isNameVisible());
      assertEquals((-694.0F), homeLight1.getGroundElevation(), 0.01F);
      assertEquals("h&*+\"", homeLight1.getDescription());
      assertFalse(homeLight1.isDoorOrWindow());
      assertTrue(homeLight1.isTexturable());
      assertEquals(0.0F, homeLight1.getAngle(), 0.01F);
      assertFalse(homeLight1.isModelMirrored());
      assertFalse(homeLight1.isBackFaceShown());
      assertNull(homeLight1.getCurrency());
      assertEquals((-407.5F), homeLight1.getX(), 0.01F);
      assertEquals(0.0F, homeLight1.getNameYOffset(), 0.01F);
      assertEquals(0.19634955F, homeLight1.getY(), 0.01F);
      assertNull(homeLight1.getColor());
      assertEquals(0.5F, homeLight1.getPower(), 0.01F);
      assertFalse(homeLight2.isDoorOrWindow());
      assertEquals(0.0F, homeLight2.getAngle(), 0.01F);
      assertTrue(homeLight2.isTexturable());
      assertNull(homeLight2.getColor());
      assertTrue(homeLight2.isModelMirrored());
      assertEquals((-694.0F), homeLight2.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight2.getNameYOffset(), 0.01F);
      assertEquals((-694.0F), homeLight2.getElevation(), 0.01F);
      assertEquals(0.3926991F, homeLight2.getDepth(), 0.01F);
      assertFalse(homeLight2.isNameVisible());
      assertFalse(homeLight2.isBackFaceShown());
      assertEquals("h&*+\"", homeLight2.getName());
      assertEquals("h&*+\"", homeLight2.getCatalogId());
      assertTrue(homeLight2.isResizable());
      assertNull(homeLight2.getShininess());
      assertEquals("h&*+\"", homeLight2.getDescription());
      assertEquals(0.19634955F, homeLight2.getY(), 0.01F);
      assertEquals(0.0F, homeLight2.getNameXOffset(), 0.01F);
      assertTrue(homeLight2.isDeformable());
      assertEquals((-407.5F), homeLight2.getX(), 0.01F);
      assertNull(homeLight2.getCurrency());
      assertEquals(0.5F, homeLight2.getPower(), 0.01F);
      assertTrue(homeLight2.isVisible());
      assertEquals((-694.0F), homeLight2.getHeight(), 0.01F);
      assertEquals(0.0F, homeLight2.getNameAngle(), 0.01F);
      assertNull(homeLight2.getStaircaseCutOutShape());
      assertEquals((-815.0F), homeLight2.getWidth(), 0.01F);
      assertTrue(homeLight2.isMovable());
      assertEquals(2, lightSourceArray0.length);
      assertNotSame(homeLight0, homeLight1);
      assertNotSame(homeLight0, homeLight2);
      assertNotSame(homeLight1, homeLight2);
      assertNotSame(homeLight1, homeLight0);
      assertNotSame(homeLight2, homeLight0);
      assertNotSame(homeLight2, homeLight1);
      
      boolean boolean1 = homeLight2.isNameCenterPointAt(1002.0F, (-127.62969F), 1707.7522F);
      assertFalse(homeLight0.equals((Object)homeLight1));
      assertFalse(homeLight0.equals((Object)homeLight2));
      assertFalse(homeLight1.equals((Object)homeLight2));
      assertFalse(homeLight1.equals((Object)homeLight0));
      assertFalse(homeLight2.equals((Object)homeLight0));
      assertFalse(homeLight2.equals((Object)homeLight1));
      assertFalse(boolean1 == boolean0);
      assertEquals((short)10, bigDecimal0.shortValue());
      assertEquals((byte)10, bigDecimal0.byteValue());
      assertEquals("h&*+\"", catalogLight0.getId());
      assertFalse(catalogLight0.isDoorOrWindow());
      assertTrue(catalogLight0.isProportional());
      assertNull(catalogLight0.getCurrency());
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertEquals((-694.0F), catalogLight0.getElevation(), 0.01F);
      assertTrue(catalogLight0.isTexturable());
      assertEquals((-694.0F), catalogLight0.getHeight(), 0.01F);
      assertNull(catalogLight0.getCreationDate());
      assertEquals("h&*+\"", catalogLight0.getDescription());
      assertTrue(catalogLight0.isResizable());
      assertFalse(catalogLight0.isModifiable());
      assertFalse(catalogLight0.isBackFaceShown());
      assertTrue(catalogLight0.isMovable());
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertEquals("h&*+\"", catalogLight0.getCreator());
      assertEquals((-815.0F), catalogLight0.getWidth(), 0.01F);
      assertEquals(0.3926991F, catalogLight0.getDepth(), 0.01F);
      assertNull(catalogLight0.getGrade());
      assertEquals("h&*+\"", catalogLight0.getName());
      assertNull(catalogLight0.getInformation());
      assertNull(catalogLight0.getColor());
      assertTrue(catalogLight0.isDeformable());
      assertEquals((-815.0F), homeLight0.getWidth(), 0.01F);
      assertEquals("h&*+\"", homeLight0.getName());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals("h&*+\"", homeLight0.getDescription());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertNull(homeLight0.getShininess());
      assertTrue(homeLight0.isResizable());
      assertTrue(homeLight0.isMovable());
      assertEquals(0.3926991F, homeLight0.getDepth(), 0.01F);
      assertEquals((-694.0F), homeLight0.getHeight(), 0.01F);
      assertEquals((-407.5F), homeLight0.getX(), 0.01F);
      assertNull(homeLight0.getCurrency());
      assertEquals(0.19634955F, homeLight0.getY(), 0.01F);
      assertEquals("h&*+\"", homeLight0.getCatalogId());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertNull(homeLight0.getColor());
      assertFalse(homeLight0.isModelMirrored());
      assertFalse(homeLight0.isNameVisible());
      assertFalse(homeLight0.isBackFaceShown());
      assertTrue(homeLight0.isDeformable());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertTrue(homeLight0.isVisible());
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertTrue(homeLight0.isTexturable());
      assertEquals((-694.0F), homeLight0.getElevation(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      assertEquals((-694.0F), homeLight0.getGroundElevation(), 0.01F);
      assertEquals("h&*+\"", homeLight1.getCatalogId());
      assertNull(homeLight1.getShininess());
      assertTrue(homeLight1.isResizable());
      assertEquals((-694.0F), homeLight1.getHeight(), 0.01F);
      assertNull(homeLight1.getStaircaseCutOutShape());
      assertTrue(homeLight1.isVisible());
      assertTrue(homeLight1.isMovable());
      assertEquals("h&*+\"", homeLight1.getName());
      assertEquals(0.0F, homeLight1.getNameAngle(), 0.01F);
      assertEquals(0.3926991F, homeLight1.getDepth(), 0.01F);
      assertEquals((-815.0F), homeLight1.getWidth(), 0.01F);
      assertEquals(0.0F, homeLight1.getNameXOffset(), 0.01F);
      assertEquals((-694.0F), homeLight1.getElevation(), 0.01F);
      assertTrue(homeLight1.isDeformable());
      assertFalse(homeLight1.isNameVisible());
      assertEquals((-694.0F), homeLight1.getGroundElevation(), 0.01F);
      assertEquals("h&*+\"", homeLight1.getDescription());
      assertFalse(homeLight1.isDoorOrWindow());
      assertTrue(homeLight1.isTexturable());
      assertEquals(0.0F, homeLight1.getAngle(), 0.01F);
      assertFalse(homeLight1.isModelMirrored());
      assertFalse(homeLight1.isBackFaceShown());
      assertNull(homeLight1.getCurrency());
      assertEquals((-407.5F), homeLight1.getX(), 0.01F);
      assertEquals(0.0F, homeLight1.getNameYOffset(), 0.01F);
      assertEquals(0.19634955F, homeLight1.getY(), 0.01F);
      assertNull(homeLight1.getColor());
      assertEquals(0.5F, homeLight1.getPower(), 0.01F);
      assertFalse(homeLight2.isDoorOrWindow());
      assertEquals(0.0F, homeLight2.getAngle(), 0.01F);
      assertTrue(homeLight2.isTexturable());
      assertNull(homeLight2.getColor());
      assertTrue(homeLight2.isModelMirrored());
      assertEquals((-694.0F), homeLight2.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight2.getNameYOffset(), 0.01F);
      assertEquals((-694.0F), homeLight2.getElevation(), 0.01F);
      assertEquals(0.3926991F, homeLight2.getDepth(), 0.01F);
      assertFalse(homeLight2.isNameVisible());
      assertFalse(homeLight2.isBackFaceShown());
      assertEquals("h&*+\"", homeLight2.getName());
      assertEquals("h&*+\"", homeLight2.getCatalogId());
      assertTrue(homeLight2.isResizable());
      assertNull(homeLight2.getShininess());
      assertEquals("h&*+\"", homeLight2.getDescription());
      assertEquals(0.19634955F, homeLight2.getY(), 0.01F);
      assertEquals(0.0F, homeLight2.getNameXOffset(), 0.01F);
      assertTrue(homeLight2.isDeformable());
      assertEquals((-407.5F), homeLight2.getX(), 0.01F);
      assertNull(homeLight2.getCurrency());
      assertEquals(0.5F, homeLight2.getPower(), 0.01F);
      assertTrue(homeLight2.isVisible());
      assertEquals((-694.0F), homeLight2.getHeight(), 0.01F);
      assertEquals(0.0F, homeLight2.getNameAngle(), 0.01F);
      assertNull(homeLight2.getStaircaseCutOutShape());
      assertEquals((-815.0F), homeLight2.getWidth(), 0.01F);
      assertTrue(homeLight2.isMovable());
      assertEquals(2, lightSourceArray0.length);
      assertNotSame(homeLight0, homeLight1);
      assertNotSame(homeLight0, homeLight2);
      assertNotSame(homeLight1, homeLight2);
      assertNotSame(homeLight1, homeLight0);
      assertNotSame(homeLight2, homeLight0);
      assertNotSame(homeLight2, homeLight1);
      assertTrue(boolean1);
      
      homeLight2.setY((-694.0F));
      assertFalse(homeLight0.equals((Object)homeLight1));
      assertFalse(homeLight0.equals((Object)homeLight2));
      assertFalse(homeLight1.equals((Object)homeLight2));
      assertFalse(homeLight1.equals((Object)homeLight0));
      assertFalse(homeLight2.equals((Object)homeLight0));
      assertFalse(homeLight2.equals((Object)homeLight1));
      assertEquals((short)10, bigDecimal0.shortValue());
      assertEquals((byte)10, bigDecimal0.byteValue());
      assertEquals("h&*+\"", catalogLight0.getId());
      assertFalse(catalogLight0.isDoorOrWindow());
      assertTrue(catalogLight0.isProportional());
      assertNull(catalogLight0.getCurrency());
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertEquals((-694.0F), catalogLight0.getElevation(), 0.01F);
      assertTrue(catalogLight0.isTexturable());
      assertEquals((-694.0F), catalogLight0.getHeight(), 0.01F);
      assertNull(catalogLight0.getCreationDate());
      assertEquals("h&*+\"", catalogLight0.getDescription());
      assertTrue(catalogLight0.isResizable());
      assertFalse(catalogLight0.isModifiable());
      assertFalse(catalogLight0.isBackFaceShown());
      assertTrue(catalogLight0.isMovable());
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertEquals("h&*+\"", catalogLight0.getCreator());
      assertEquals((-815.0F), catalogLight0.getWidth(), 0.01F);
      assertEquals(0.3926991F, catalogLight0.getDepth(), 0.01F);
      assertNull(catalogLight0.getGrade());
      assertEquals("h&*+\"", catalogLight0.getName());
      assertNull(catalogLight0.getInformation());
      assertNull(catalogLight0.getColor());
      assertTrue(catalogLight0.isDeformable());
      assertEquals((-815.0F), homeLight0.getWidth(), 0.01F);
      assertEquals("h&*+\"", homeLight0.getName());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals("h&*+\"", homeLight0.getDescription());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertNull(homeLight0.getShininess());
      assertTrue(homeLight0.isResizable());
      assertTrue(homeLight0.isMovable());
      assertEquals(0.3926991F, homeLight0.getDepth(), 0.01F);
      assertEquals((-694.0F), homeLight0.getHeight(), 0.01F);
      assertEquals((-407.5F), homeLight0.getX(), 0.01F);
      assertNull(homeLight0.getCurrency());
      assertEquals(0.19634955F, homeLight0.getY(), 0.01F);
      assertEquals("h&*+\"", homeLight0.getCatalogId());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertNull(homeLight0.getColor());
      assertFalse(homeLight0.isModelMirrored());
      assertFalse(homeLight0.isNameVisible());
      assertFalse(homeLight0.isBackFaceShown());
      assertTrue(homeLight0.isDeformable());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertTrue(homeLight0.isVisible());
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertTrue(homeLight0.isTexturable());
      assertEquals((-694.0F), homeLight0.getElevation(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      assertEquals((-694.0F), homeLight0.getGroundElevation(), 0.01F);
      assertEquals("h&*+\"", homeLight1.getCatalogId());
      assertNull(homeLight1.getShininess());
      assertTrue(homeLight1.isResizable());
      assertEquals((-694.0F), homeLight1.getHeight(), 0.01F);
      assertNull(homeLight1.getStaircaseCutOutShape());
      assertTrue(homeLight1.isVisible());
      assertTrue(homeLight1.isMovable());
      assertEquals("h&*+\"", homeLight1.getName());
      assertEquals(0.0F, homeLight1.getNameAngle(), 0.01F);
      assertEquals(0.3926991F, homeLight1.getDepth(), 0.01F);
      assertEquals((-815.0F), homeLight1.getWidth(), 0.01F);
      assertEquals(0.0F, homeLight1.getNameXOffset(), 0.01F);
      assertEquals((-694.0F), homeLight1.getElevation(), 0.01F);
      assertTrue(homeLight1.isDeformable());
      assertFalse(homeLight1.isNameVisible());
      assertEquals((-694.0F), homeLight1.getGroundElevation(), 0.01F);
      assertEquals("h&*+\"", homeLight1.getDescription());
      assertFalse(homeLight1.isDoorOrWindow());
      assertTrue(homeLight1.isTexturable());
      assertEquals(0.0F, homeLight1.getAngle(), 0.01F);
      assertFalse(homeLight1.isModelMirrored());
      assertFalse(homeLight1.isBackFaceShown());
      assertNull(homeLight1.getCurrency());
      assertEquals((-407.5F), homeLight1.getX(), 0.01F);
      assertEquals(0.0F, homeLight1.getNameYOffset(), 0.01F);
      assertEquals(0.19634955F, homeLight1.getY(), 0.01F);
      assertNull(homeLight1.getColor());
      assertEquals(0.5F, homeLight1.getPower(), 0.01F);
      assertFalse(homeLight2.isDoorOrWindow());
      assertEquals(0.0F, homeLight2.getAngle(), 0.01F);
      assertTrue(homeLight2.isTexturable());
      assertNull(homeLight2.getColor());
      assertTrue(homeLight2.isModelMirrored());
      assertEquals((-694.0F), homeLight2.getY(), 0.01F);
      assertEquals((-694.0F), homeLight2.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight2.getNameYOffset(), 0.01F);
      assertEquals((-694.0F), homeLight2.getElevation(), 0.01F);
      assertEquals(0.3926991F, homeLight2.getDepth(), 0.01F);
      assertFalse(homeLight2.isNameVisible());
      assertFalse(homeLight2.isBackFaceShown());
      assertEquals("h&*+\"", homeLight2.getName());
      assertEquals("h&*+\"", homeLight2.getCatalogId());
      assertTrue(homeLight2.isResizable());
      assertNull(homeLight2.getShininess());
      assertEquals("h&*+\"", homeLight2.getDescription());
      assertEquals(0.0F, homeLight2.getNameXOffset(), 0.01F);
      assertTrue(homeLight2.isDeformable());
      assertEquals((-407.5F), homeLight2.getX(), 0.01F);
      assertNull(homeLight2.getCurrency());
      assertEquals(0.5F, homeLight2.getPower(), 0.01F);
      assertTrue(homeLight2.isVisible());
      assertEquals((-694.0F), homeLight2.getHeight(), 0.01F);
      assertEquals(0.0F, homeLight2.getNameAngle(), 0.01F);
      assertNull(homeLight2.getStaircaseCutOutShape());
      assertEquals((-815.0F), homeLight2.getWidth(), 0.01F);
      assertTrue(homeLight2.isMovable());
      assertEquals(2, lightSourceArray0.length);
      assertNotSame(homeLight0, homeLight1);
      assertNotSame(homeLight0, homeLight2);
      assertNotSame(homeLight1, homeLight2);
      assertNotSame(homeLight1, homeLight0);
      assertNotSame(homeLight2, homeLight0);
      assertNotSame(homeLight2, homeLight1);
      
      float float0 = homeLight2.getGroundElevation();
      assertFalse(homeLight0.equals((Object)homeLight1));
      assertFalse(homeLight0.equals((Object)homeLight2));
      assertFalse(homeLight1.equals((Object)homeLight2));
      assertFalse(homeLight1.equals((Object)homeLight0));
      assertFalse(homeLight2.equals((Object)homeLight0));
      assertFalse(homeLight2.equals((Object)homeLight1));
      assertEquals((short)10, bigDecimal0.shortValue());
      assertEquals((byte)10, bigDecimal0.byteValue());
      assertEquals("h&*+\"", catalogLight0.getId());
      assertFalse(catalogLight0.isDoorOrWindow());
      assertTrue(catalogLight0.isProportional());
      assertNull(catalogLight0.getCurrency());
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertEquals((-694.0F), catalogLight0.getElevation(), 0.01F);
      assertTrue(catalogLight0.isTexturable());
      assertEquals((-694.0F), catalogLight0.getHeight(), 0.01F);
      assertNull(catalogLight0.getCreationDate());
      assertEquals("h&*+\"", catalogLight0.getDescription());
      assertTrue(catalogLight0.isResizable());
      assertFalse(catalogLight0.isModifiable());
      assertFalse(catalogLight0.isBackFaceShown());
      assertTrue(catalogLight0.isMovable());
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertEquals("h&*+\"", catalogLight0.getCreator());
      assertEquals((-815.0F), catalogLight0.getWidth(), 0.01F);
      assertEquals(0.3926991F, catalogLight0.getDepth(), 0.01F);
      assertNull(catalogLight0.getGrade());
      assertEquals("h&*+\"", catalogLight0.getName());
      assertNull(catalogLight0.getInformation());
      assertNull(catalogLight0.getColor());
      assertTrue(catalogLight0.isDeformable());
      assertEquals((-815.0F), homeLight0.getWidth(), 0.01F);
      assertEquals("h&*+\"", homeLight0.getName());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals("h&*+\"", homeLight0.getDescription());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertNull(homeLight0.getShininess());
      assertTrue(homeLight0.isResizable());
      assertTrue(homeLight0.isMovable());
      assertEquals(0.3926991F, homeLight0.getDepth(), 0.01F);
      assertEquals((-694.0F), homeLight0.getHeight(), 0.01F);
      assertEquals((-407.5F), homeLight0.getX(), 0.01F);
      assertNull(homeLight0.getCurrency());
      assertEquals(0.19634955F, homeLight0.getY(), 0.01F);
      assertEquals("h&*+\"", homeLight0.getCatalogId());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertNull(homeLight0.getColor());
      assertFalse(homeLight0.isModelMirrored());
      assertFalse(homeLight0.isNameVisible());
      assertFalse(homeLight0.isBackFaceShown());
      assertTrue(homeLight0.isDeformable());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertTrue(homeLight0.isVisible());
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertTrue(homeLight0.isTexturable());
      assertEquals((-694.0F), homeLight0.getElevation(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      assertEquals((-694.0F), homeLight0.getGroundElevation(), 0.01F);
      assertEquals("h&*+\"", homeLight1.getCatalogId());
      assertNull(homeLight1.getShininess());
      assertTrue(homeLight1.isResizable());
      assertEquals((-694.0F), homeLight1.getHeight(), 0.01F);
      assertNull(homeLight1.getStaircaseCutOutShape());
      assertTrue(homeLight1.isVisible());
      assertTrue(homeLight1.isMovable());
      assertEquals("h&*+\"", homeLight1.getName());
      assertEquals(0.0F, homeLight1.getNameAngle(), 0.01F);
      assertEquals(0.3926991F, homeLight1.getDepth(), 0.01F);
      assertEquals((-815.0F), homeLight1.getWidth(), 0.01F);
      assertEquals(0.0F, homeLight1.getNameXOffset(), 0.01F);
      assertEquals((-694.0F), homeLight1.getElevation(), 0.01F);
      assertTrue(homeLight1.isDeformable());
      assertFalse(homeLight1.isNameVisible());
      assertEquals((-694.0F), homeLight1.getGroundElevation(), 0.01F);
      assertEquals("h&*+\"", homeLight1.getDescription());
      assertFalse(homeLight1.isDoorOrWindow());
      assertTrue(homeLight1.isTexturable());
      assertEquals(0.0F, homeLight1.getAngle(), 0.01F);
      assertFalse(homeLight1.isModelMirrored());
      assertFalse(homeLight1.isBackFaceShown());
      assertNull(homeLight1.getCurrency());
      assertEquals((-407.5F), homeLight1.getX(), 0.01F);
      assertEquals(0.0F, homeLight1.getNameYOffset(), 0.01F);
      assertEquals(0.19634955F, homeLight1.getY(), 0.01F);
      assertNull(homeLight1.getColor());
      assertEquals(0.5F, homeLight1.getPower(), 0.01F);
      assertFalse(homeLight2.isDoorOrWindow());
      assertEquals(0.0F, homeLight2.getAngle(), 0.01F);
      assertTrue(homeLight2.isTexturable());
      assertNull(homeLight2.getColor());
      assertTrue(homeLight2.isModelMirrored());
      assertEquals((-694.0F), homeLight2.getY(), 0.01F);
      assertEquals((-694.0F), homeLight2.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight2.getNameYOffset(), 0.01F);
      assertEquals((-694.0F), homeLight2.getElevation(), 0.01F);
      assertEquals(0.3926991F, homeLight2.getDepth(), 0.01F);
      assertFalse(homeLight2.isNameVisible());
      assertFalse(homeLight2.isBackFaceShown());
      assertEquals("h&*+\"", homeLight2.getName());
      assertEquals("h&*+\"", homeLight2.getCatalogId());
      assertTrue(homeLight2.isResizable());
      assertNull(homeLight2.getShininess());
      assertEquals("h&*+\"", homeLight2.getDescription());
      assertEquals(0.0F, homeLight2.getNameXOffset(), 0.01F);
      assertTrue(homeLight2.isDeformable());
      assertEquals((-407.5F), homeLight2.getX(), 0.01F);
      assertNull(homeLight2.getCurrency());
      assertEquals(0.5F, homeLight2.getPower(), 0.01F);
      assertTrue(homeLight2.isVisible());
      assertEquals((-694.0F), homeLight2.getHeight(), 0.01F);
      assertEquals(0.0F, homeLight2.getNameAngle(), 0.01F);
      assertNull(homeLight2.getStaircaseCutOutShape());
      assertEquals((-815.0F), homeLight2.getWidth(), 0.01F);
      assertTrue(homeLight2.isMovable());
      assertEquals(2, lightSourceArray0.length);
      assertNotSame(homeLight0, homeLight1);
      assertNotSame(homeLight0, homeLight2);
      assertNotSame(homeLight1, homeLight2);
      assertNotSame(homeLight1, homeLight0);
      assertNotSame(homeLight2, homeLight0);
      assertNotSame(homeLight2, homeLight1);
      assertEquals((-694.0F), float0, 0.01F);
      
      String string0 = homeLight1.getName();
      assertFalse(homeLight0.equals((Object)homeLight1));
      assertFalse(homeLight0.equals((Object)homeLight2));
      assertFalse(homeLight1.equals((Object)homeLight2));
      assertFalse(homeLight1.equals((Object)homeLight0));
      assertEquals((short)10, bigDecimal0.shortValue());
      assertEquals((byte)10, bigDecimal0.byteValue());
      assertEquals("h&*+\"", catalogLight0.getId());
      assertFalse(catalogLight0.isDoorOrWindow());
      assertTrue(catalogLight0.isProportional());
      assertNull(catalogLight0.getCurrency());
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertEquals((-694.0F), catalogLight0.getElevation(), 0.01F);
      assertTrue(catalogLight0.isTexturable());
      assertEquals((-694.0F), catalogLight0.getHeight(), 0.01F);
      assertNull(catalogLight0.getCreationDate());
      assertEquals("h&*+\"", catalogLight0.getDescription());
      assertTrue(catalogLight0.isResizable());
      assertFalse(catalogLight0.isModifiable());
      assertFalse(catalogLight0.isBackFaceShown());
      assertTrue(catalogLight0.isMovable());
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertEquals("h&*+\"", catalogLight0.getCreator());
      assertEquals((-815.0F), catalogLight0.getWidth(), 0.01F);
      assertEquals(0.3926991F, catalogLight0.getDepth(), 0.01F);
      assertNull(catalogLight0.getGrade());
      assertEquals("h&*+\"", catalogLight0.getName());
      assertNull(catalogLight0.getInformation());
      assertNull(catalogLight0.getColor());
      assertTrue(catalogLight0.isDeformable());
      assertEquals((-815.0F), homeLight0.getWidth(), 0.01F);
      assertEquals("h&*+\"", homeLight0.getName());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals("h&*+\"", homeLight0.getDescription());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertNull(homeLight0.getShininess());
      assertTrue(homeLight0.isResizable());
      assertTrue(homeLight0.isMovable());
      assertEquals(0.3926991F, homeLight0.getDepth(), 0.01F);
      assertEquals((-694.0F), homeLight0.getHeight(), 0.01F);
      assertEquals((-407.5F), homeLight0.getX(), 0.01F);
      assertNull(homeLight0.getCurrency());
      assertEquals(0.19634955F, homeLight0.getY(), 0.01F);
      assertEquals("h&*+\"", homeLight0.getCatalogId());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertNull(homeLight0.getColor());
      assertFalse(homeLight0.isModelMirrored());
      assertFalse(homeLight0.isNameVisible());
      assertFalse(homeLight0.isBackFaceShown());
      assertTrue(homeLight0.isDeformable());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertTrue(homeLight0.isVisible());
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertTrue(homeLight0.isTexturable());
      assertEquals((-694.0F), homeLight0.getElevation(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      assertEquals((-694.0F), homeLight0.getGroundElevation(), 0.01F);
      assertEquals("h&*+\"", homeLight1.getCatalogId());
      assertNull(homeLight1.getShininess());
      assertTrue(homeLight1.isResizable());
      assertEquals((-694.0F), homeLight1.getHeight(), 0.01F);
      assertNull(homeLight1.getStaircaseCutOutShape());
      assertTrue(homeLight1.isVisible());
      assertTrue(homeLight1.isMovable());
      assertEquals("h&*+\"", homeLight1.getName());
      assertEquals(0.0F, homeLight1.getNameAngle(), 0.01F);
      assertEquals(0.3926991F, homeLight1.getDepth(), 0.01F);
      assertEquals((-815.0F), homeLight1.getWidth(), 0.01F);
      assertEquals(0.0F, homeLight1.getNameXOffset(), 0.01F);
      assertEquals((-694.0F), homeLight1.getElevation(), 0.01F);
      assertTrue(homeLight1.isDeformable());
      assertFalse(homeLight1.isNameVisible());
      assertEquals((-694.0F), homeLight1.getGroundElevation(), 0.01F);
      assertEquals("h&*+\"", homeLight1.getDescription());
      assertFalse(homeLight1.isDoorOrWindow());
      assertTrue(homeLight1.isTexturable());
      assertEquals(0.0F, homeLight1.getAngle(), 0.01F);
      assertFalse(homeLight1.isModelMirrored());
      assertFalse(homeLight1.isBackFaceShown());
      assertNull(homeLight1.getCurrency());
      assertEquals((-407.5F), homeLight1.getX(), 0.01F);
      assertEquals(0.0F, homeLight1.getNameYOffset(), 0.01F);
      assertEquals(0.19634955F, homeLight1.getY(), 0.01F);
      assertNull(homeLight1.getColor());
      assertEquals(0.5F, homeLight1.getPower(), 0.01F);
      assertEquals(2, lightSourceArray0.length);
      assertNotSame(homeLight0, homeLight1);
      assertNotSame(homeLight0, homeLight2);
      assertNotSame(homeLight1, homeLight2);
      assertNotSame(homeLight1, homeLight0);
      assertNotNull(string0);
      assertEquals("h&*+\"", string0);
  }

  @Test(timeout = 4000)
  public void test162()  throws Throwable  {
      LightSource[] lightSourceArray0 = new LightSource[5];
      BigDecimal bigDecimal0 = BigDecimal.ZERO;
      Long long0 = new Long((-1672L));
      Float float0 = new Float(1546.336F);
      URL uRL0 = MockURL.getHttpExample();
      ResourceURLContent resourceURLContent0 = new ResourceURLContent(uRL0, false);
      LightSource[] lightSourceArray1 = new LightSource[6];
      LightSource lightSource0 = new LightSource(0.0F, (-689.75726F), 2.9281225F, 0);
      lightSourceArray1[0] = lightSource0;
      LightSource lightSource1 = new LightSource(0.5F, 3.4028235E38F, 43.621662F, 0);
      lightSourceArray1[1] = lightSource1;
      LightSource lightSource2 = new LightSource(3.4028235E38F, 2.9281225F, 950.5983F, (-248), float0);
      lightSourceArray1[2] = lightSource2;
      LightSource lightSource3 = new LightSource((-1093.1008F), 2.9281225F, 0.5F, (-1717), float0);
      lightSourceArray1[3] = lightSource3;
      LightSource lightSource4 = new LightSource(293.61972F, 3.4028235E38F, 689.75726F, (-773));
      lightSourceArray1[4] = lightSource4;
      LightSource lightSource5 = new LightSource(0.5F, 43.621662F, 950.5983F, (-1));
      lightSourceArray1[5] = lightSource5;
      CatalogLight catalogLight0 = new CatalogLight("a`79N[i1@iy9KsnFJ;", "", "h&*+\"", "", (String[]) null, long0, float0, resourceURLContent0, resourceURLContent0, resourceURLContent0, (-1672L), (-1672L), (-1672L), 2.9281225F, false, lightSourceArray1, "", (float[][]) null, "", false, false, false, bigDecimal0, bigDecimal0, "h&*+\"");
      HomeLight homeLight0 = new HomeLight(catalogLight0);
      HomeLight homeLight1 = homeLight0.clone();
      homeLight1.isDeformable();
  }

  @Test(timeout = 4000)
  public void test163()  throws Throwable  {
      LightSource[] lightSourceArray0 = new LightSource[5];
      BigDecimal bigDecimal0 = BigDecimal.TEN;
      CatalogLight catalogLight0 = new CatalogLight("/", "/", "/", (Content) null, (Content) null, 0.3926991F, 0.3926991F, 0.3926991F, (-815.0011F), true, lightSourceArray0, (float[][]) null, "/", true, bigDecimal0, bigDecimal0);
      HomeLight homeLight0 = new HomeLight(catalogLight0);
      homeLight0.setWidth(0.054564774F);
      homeLight0.isBottomRightPointAt(0.3926991F, 47.60001F, (-815.0011F));
      homeLight0.getPoints();
  }

  @Test(timeout = 4000)
  public void test164()  throws Throwable  {
      LightSource[] lightSourceArray0 = new LightSource[2];
      BigDecimal bigDecimal0 = BigDecimal.TEN;
      CatalogLight catalogLight0 = new CatalogLight("/", "/", "/", (Content) null, (Content) null, 0.3926991F, 92.121765F, 233.10785F, (-727.8896F), true, lightSourceArray0, (float[][]) null, "{L", true, bigDecimal0, bigDecimal0);
      HomeLight homeLight0 = new HomeLight(catalogLight0);
      catalogLight0.getCategory();
      catalogLight0.setCategory((FurnitureCategory) null);
      HomeLight homeLight1 = homeLight0.clone();
      homeLight1.clone();
      HomeLight homeLight2 = new HomeLight(catalogLight0);
      homeLight2.getIcon();
      Integer integer0 = new Integer((-1204));
      homeLight0.setColor(integer0);
      homeLight1.setNameVisible(true);
      HomeLight homeLight3 = homeLight2.clone();
      homeLight3.setWidth((-11.086381F));
      homeLight1.getName();
      homeLight3.getCatalogId();
      homeLight2.isBottomRightPointAt(233.10785F, 114.0F, (-1204));
      homeLight3.isBottomRightPointAt(0.5F, 0.0F, (-1.0F));
  }

  @Test(timeout = 4000)
  public void test165()  throws Throwable  {
      String string0 = "h&i*+\"";
      LightSource[] lightSourceArray0 = new LightSource[2];
      int int0 = 0;
      BigDecimal bigDecimal0 = BigDecimal.TEN;
      CatalogLight catalogLight0 = new CatalogLight("h&i*+\"", "h&i*+\"", "h&i*+\"", (Content) null, (Content) null, (-2263.3643F), (-2263.3643F), (-2263.3643F), (-2263.3643F), false, lightSourceArray0, (float[][]) null, "h&i*+\"", false, bigDecimal0, bigDecimal0);
      HomeLight homeLight0 = new HomeLight(catalogLight0);
      // Undeclared exception!
      try { 
        homeLight0.setDepth(0.054564774F);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Piece isn't resizable
         //
         verifyException("com.eteks.sweethome3d.model.HomePieceOfFurniture", e);
      }
  }

  @Test(timeout = 4000)
  public void test166()  throws Throwable  {
      float float0 = (-1379.72F);
      LightSource[] lightSourceArray0 = new LightSource[14];
      BigDecimal bigDecimal0 = BigDecimal.ONE;
      CatalogLight catalogLight0 = new CatalogLight("(%", "(%", "(%", (Content) null, (Content) null, (-1379.72F), (-1379.72F), (-1379.72F), (-1379.72F), false, lightSourceArray0, (float[][]) null, "(%", false, bigDecimal0, bigDecimal0);
      HomeLight homeLight0 = new HomeLight(catalogLight0);
      homeLight0.setMovable(true);
      homeLight0.isBottomRightPointAt(0.3926991F, 0.3926991F, 2003.1F);
      FurnitureCategory furnitureCategory0 = new FurnitureCategory("(%");
      catalogLight0.setCategory(furnitureCategory0);
      // Undeclared exception!
      try { 
        homeLight0.setModelMirrored(true);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Piece isn't resizable
         //
         verifyException("com.eteks.sweethome3d.model.HomePieceOfFurniture", e);
      }
  }

  @Test(timeout = 4000)
  public void test167()  throws Throwable  {
      LightSource[] lightSourceArray0 = new LightSource[12];
      BigDecimal bigDecimal0 = new BigDecimal(0);
      CatalogLight catalogLight0 = new CatalogLight("h&*+\"", "h&*+\"", "h&*+\"", (Content) null, (Content) null, (-815.0011F), (-815.0011F), (-694.0F), (-694.0F), true, lightSourceArray0, (float[][]) null, "h&*+\"", true, bigDecimal0, bigDecimal0);
      HomeLight homeLight0 = new HomeLight(catalogLight0);
      homeLight0.setHeight((-1285.955F));
      homeLight0.clone();
      homeLight0.isNameCenterPointAt((-1983.9161F), (-815.0011F), (-1983.9161F));
      homeLight0.getPoints();
  }

  @Test(timeout = 4000)
  public void test168()  throws Throwable  {
      LightSource[] lightSourceArray0 = new LightSource[2];
      LightSource lightSource0 = new LightSource((-815.0F), 0.0F, 0.0F, 78);
      assertNull(lightSource0.getDiameter());
      assertEquals((-815.0F), lightSource0.getX(), 0.01F);
      assertEquals(0.0F, lightSource0.getZ(), 0.01F);
      assertEquals(78, lightSource0.getColor());
      assertEquals(0.0F, lightSource0.getY(), 0.01F);
      assertNotNull(lightSource0);
      
      lightSourceArray0[0] = lightSource0;
      LightSource lightSource1 = new LightSource((-694.0F), 2965.994F, (-127.62969F), 0);
      assertFalse(lightSource1.equals((Object)lightSource0));
      assertEquals(2965.994F, lightSource1.getY(), 0.01F);
      assertEquals(0, lightSource1.getColor());
      assertEquals((-694.0F), lightSource1.getX(), 0.01F);
      assertNull(lightSource1.getDiameter());
      assertEquals((-127.62969F), lightSource1.getZ(), 0.01F);
      assertNotNull(lightSource1);
      
      lightSourceArray0[1] = lightSource1;
      BigDecimal bigDecimal0 = BigDecimal.TEN;
      assertEquals((byte)10, bigDecimal0.byteValue());
      assertEquals((short)10, bigDecimal0.shortValue());
      assertNotNull(bigDecimal0);
      
      CatalogLight catalogLight0 = new CatalogLight("h&*+\"", "h&*+\"", "h&*+\"", (Content) null, (Content) null, (-815.0F), 0.3926991F, (-694.0F), (-694.0F), true, lightSourceArray0, (float[][]) null, "h&*+\"", true, bigDecimal0, bigDecimal0);
      assertEquals((byte)10, bigDecimal0.byteValue());
      assertEquals((short)10, bigDecimal0.shortValue());
      assertNull(catalogLight0.getCurrency());
      assertTrue(catalogLight0.isProportional());
      assertEquals(0.3926991F, catalogLight0.getDepth(), 0.01F);
      assertNull(catalogLight0.getGrade());
      assertEquals((-694.0F), catalogLight0.getHeight(), 0.01F);
      assertEquals((-694.0F), catalogLight0.getElevation(), 0.01F);
      assertTrue(catalogLight0.isTexturable());
      assertEquals("h&*+\"", catalogLight0.getId());
      assertNull(catalogLight0.getInformation());
      assertTrue(catalogLight0.isDeformable());
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertEquals((-815.0F), catalogLight0.getWidth(), 0.01F);
      assertNull(catalogLight0.getColor());
      assertFalse(catalogLight0.isBackFaceShown());
      assertFalse(catalogLight0.isDoorOrWindow());
      assertEquals("h&*+\"", catalogLight0.getName());
      assertTrue(catalogLight0.isMovable());
      assertNull(catalogLight0.getCreationDate());
      assertTrue(catalogLight0.isResizable());
      assertFalse(catalogLight0.isModifiable());
      assertEquals("h&*+\"", catalogLight0.getCreator());
      assertEquals("h&*+\"", catalogLight0.getDescription());
      assertEquals(2, lightSourceArray0.length);
      assertNotNull(catalogLight0);
      
      HomeLight homeLight0 = new HomeLight(catalogLight0);
      assertEquals((byte)10, bigDecimal0.byteValue());
      assertEquals((short)10, bigDecimal0.shortValue());
      assertNull(catalogLight0.getCurrency());
      assertTrue(catalogLight0.isProportional());
      assertEquals(0.3926991F, catalogLight0.getDepth(), 0.01F);
      assertNull(catalogLight0.getGrade());
      assertEquals((-694.0F), catalogLight0.getHeight(), 0.01F);
      assertEquals((-694.0F), catalogLight0.getElevation(), 0.01F);
      assertTrue(catalogLight0.isTexturable());
      assertEquals("h&*+\"", catalogLight0.getId());
      assertNull(catalogLight0.getInformation());
      assertTrue(catalogLight0.isDeformable());
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertEquals((-815.0F), catalogLight0.getWidth(), 0.01F);
      assertNull(catalogLight0.getColor());
      assertFalse(catalogLight0.isBackFaceShown());
      assertFalse(catalogLight0.isDoorOrWindow());
      assertEquals("h&*+\"", catalogLight0.getName());
      assertTrue(catalogLight0.isMovable());
      assertNull(catalogLight0.getCreationDate());
      assertTrue(catalogLight0.isResizable());
      assertFalse(catalogLight0.isModifiable());
      assertEquals("h&*+\"", catalogLight0.getCreator());
      assertEquals("h&*+\"", catalogLight0.getDescription());
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals((-694.0F), homeLight0.getElevation(), 0.01F);
      assertEquals("h&*+\"", homeLight0.getDescription());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals((-694.0F), homeLight0.getGroundElevation(), 0.01F);
      assertTrue(homeLight0.isResizable());
      assertEquals(0.19634955F, homeLight0.getY(), 0.01F);
      assertEquals("h&*+\"", homeLight0.getCatalogId());
      assertNull(homeLight0.getShininess());
      assertEquals((-815.0F), homeLight0.getWidth(), 0.01F);
      assertTrue(homeLight0.isMovable());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals((-407.5F), homeLight0.getX(), 0.01F);
      assertEquals((-694.0F), homeLight0.getHeight(), 0.01F);
      assertNull(homeLight0.getCurrency());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertNull(homeLight0.getColor());
      assertTrue(homeLight0.isDeformable());
      assertTrue(homeLight0.isVisible());
      assertTrue(homeLight0.isTexturable());
      assertFalse(homeLight0.isModelMirrored());
      assertFalse(homeLight0.isBackFaceShown());
      assertFalse(homeLight0.isDoorOrWindow());
      assertEquals(0.3926991F, homeLight0.getDepth(), 0.01F);
      assertEquals("h&*+\"", homeLight0.getName());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertFalse(homeLight0.isNameVisible());
      assertEquals(2, lightSourceArray0.length);
      assertNotNull(homeLight0);
      
      HomeLight homeLight1 = homeLight0.clone();
      assertFalse(homeLight1.equals((Object)homeLight0));
      assertEquals((byte)10, bigDecimal0.byteValue());
      assertEquals((short)10, bigDecimal0.shortValue());
      assertNull(catalogLight0.getCurrency());
      assertTrue(catalogLight0.isProportional());
      assertEquals(0.3926991F, catalogLight0.getDepth(), 0.01F);
      assertNull(catalogLight0.getGrade());
      assertEquals((-694.0F), catalogLight0.getHeight(), 0.01F);
      assertEquals((-694.0F), catalogLight0.getElevation(), 0.01F);
      assertTrue(catalogLight0.isTexturable());
      assertEquals("h&*+\"", catalogLight0.getId());
      assertNull(catalogLight0.getInformation());
      assertTrue(catalogLight0.isDeformable());
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertEquals((-815.0F), catalogLight0.getWidth(), 0.01F);
      assertNull(catalogLight0.getColor());
      assertFalse(catalogLight0.isBackFaceShown());
      assertFalse(catalogLight0.isDoorOrWindow());
      assertEquals("h&*+\"", catalogLight0.getName());
      assertTrue(catalogLight0.isMovable());
      assertNull(catalogLight0.getCreationDate());
      assertTrue(catalogLight0.isResizable());
      assertFalse(catalogLight0.isModifiable());
      assertEquals("h&*+\"", catalogLight0.getCreator());
      assertEquals("h&*+\"", catalogLight0.getDescription());
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals((-694.0F), homeLight0.getElevation(), 0.01F);
      assertEquals("h&*+\"", homeLight0.getDescription());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals((-694.0F), homeLight0.getGroundElevation(), 0.01F);
      assertTrue(homeLight0.isResizable());
      assertEquals(0.19634955F, homeLight0.getY(), 0.01F);
      assertEquals("h&*+\"", homeLight0.getCatalogId());
      assertNull(homeLight0.getShininess());
      assertEquals((-815.0F), homeLight0.getWidth(), 0.01F);
      assertTrue(homeLight0.isMovable());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals((-407.5F), homeLight0.getX(), 0.01F);
      assertEquals((-694.0F), homeLight0.getHeight(), 0.01F);
      assertNull(homeLight0.getCurrency());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertNull(homeLight0.getColor());
      assertTrue(homeLight0.isDeformable());
      assertTrue(homeLight0.isVisible());
      assertTrue(homeLight0.isTexturable());
      assertFalse(homeLight0.isModelMirrored());
      assertFalse(homeLight0.isBackFaceShown());
      assertFalse(homeLight0.isDoorOrWindow());
      assertEquals(0.3926991F, homeLight0.getDepth(), 0.01F);
      assertEquals("h&*+\"", homeLight0.getName());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertFalse(homeLight0.isNameVisible());
      assertEquals((-694.0F), homeLight1.getHeight(), 0.01F);
      assertEquals(0.3926991F, homeLight1.getDepth(), 0.01F);
      assertEquals("h&*+\"", homeLight1.getCatalogId());
      assertEquals(0.0F, homeLight1.getNameYOffset(), 0.01F);
      assertTrue(homeLight1.isDeformable());
      assertTrue(homeLight1.isResizable());
      assertNull(homeLight1.getShininess());
      assertTrue(homeLight1.isVisible());
      assertEquals(0.0F, homeLight1.getNameAngle(), 0.01F);
      assertNull(homeLight1.getStaircaseCutOutShape());
      assertNull(homeLight1.getColor());
      assertEquals((-815.0F), homeLight1.getWidth(), 0.01F);
      assertEquals(0.19634955F, homeLight1.getY(), 0.01F);
      assertTrue(homeLight1.isMovable());
      assertEquals((-407.5F), homeLight1.getX(), 0.01F);
      assertNull(homeLight1.getCurrency());
      assertEquals(0.5F, homeLight1.getPower(), 0.01F);
      assertEquals((-694.0F), homeLight1.getGroundElevation(), 0.01F);
      assertFalse(homeLight1.isModelMirrored());
      assertEquals("h&*+\"", homeLight1.getDescription());
      assertFalse(homeLight1.isNameVisible());
      assertFalse(homeLight1.isBackFaceShown());
      assertEquals(0.0F, homeLight1.getNameXOffset(), 0.01F);
      assertEquals("h&*+\"", homeLight1.getName());
      assertEquals((-694.0F), homeLight1.getElevation(), 0.01F);
      assertFalse(homeLight1.isDoorOrWindow());
      assertTrue(homeLight1.isTexturable());
      assertEquals(0.0F, homeLight1.getAngle(), 0.01F);
      assertEquals(2, lightSourceArray0.length);
      assertNotSame(homeLight0, homeLight1);
      assertNotSame(homeLight1, homeLight0);
      assertNotNull(homeLight1);
      
      HomeLight homeLight2 = (HomeLight)homeLight1.clone();
      assertFalse(homeLight0.equals((Object)homeLight1));
      assertFalse(homeLight1.equals((Object)homeLight0));
      assertFalse(homeLight2.equals((Object)homeLight1));
      assertFalse(homeLight2.equals((Object)homeLight0));
      assertEquals((byte)10, bigDecimal0.byteValue());
      assertEquals((short)10, bigDecimal0.shortValue());
      assertNull(catalogLight0.getCurrency());
      assertTrue(catalogLight0.isProportional());
      assertEquals(0.3926991F, catalogLight0.getDepth(), 0.01F);
      assertNull(catalogLight0.getGrade());
      assertEquals((-694.0F), catalogLight0.getHeight(), 0.01F);
      assertEquals((-694.0F), catalogLight0.getElevation(), 0.01F);
      assertTrue(catalogLight0.isTexturable());
      assertEquals("h&*+\"", catalogLight0.getId());
      assertNull(catalogLight0.getInformation());
      assertTrue(catalogLight0.isDeformable());
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertEquals((-815.0F), catalogLight0.getWidth(), 0.01F);
      assertNull(catalogLight0.getColor());
      assertFalse(catalogLight0.isBackFaceShown());
      assertFalse(catalogLight0.isDoorOrWindow());
      assertEquals("h&*+\"", catalogLight0.getName());
      assertTrue(catalogLight0.isMovable());
      assertNull(catalogLight0.getCreationDate());
      assertTrue(catalogLight0.isResizable());
      assertFalse(catalogLight0.isModifiable());
      assertEquals("h&*+\"", catalogLight0.getCreator());
      assertEquals("h&*+\"", catalogLight0.getDescription());
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals((-694.0F), homeLight0.getElevation(), 0.01F);
      assertEquals("h&*+\"", homeLight0.getDescription());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals((-694.0F), homeLight0.getGroundElevation(), 0.01F);
      assertTrue(homeLight0.isResizable());
      assertEquals(0.19634955F, homeLight0.getY(), 0.01F);
      assertEquals("h&*+\"", homeLight0.getCatalogId());
      assertNull(homeLight0.getShininess());
      assertEquals((-815.0F), homeLight0.getWidth(), 0.01F);
      assertTrue(homeLight0.isMovable());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals((-407.5F), homeLight0.getX(), 0.01F);
      assertEquals((-694.0F), homeLight0.getHeight(), 0.01F);
      assertNull(homeLight0.getCurrency());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertNull(homeLight0.getColor());
      assertTrue(homeLight0.isDeformable());
      assertTrue(homeLight0.isVisible());
      assertTrue(homeLight0.isTexturable());
      assertFalse(homeLight0.isModelMirrored());
      assertFalse(homeLight0.isBackFaceShown());
      assertFalse(homeLight0.isDoorOrWindow());
      assertEquals(0.3926991F, homeLight0.getDepth(), 0.01F);
      assertEquals("h&*+\"", homeLight0.getName());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertFalse(homeLight0.isNameVisible());
      assertEquals((-694.0F), homeLight1.getHeight(), 0.01F);
      assertEquals(0.3926991F, homeLight1.getDepth(), 0.01F);
      assertEquals("h&*+\"", homeLight1.getCatalogId());
      assertEquals(0.0F, homeLight1.getNameYOffset(), 0.01F);
      assertTrue(homeLight1.isDeformable());
      assertTrue(homeLight1.isResizable());
      assertNull(homeLight1.getShininess());
      assertTrue(homeLight1.isVisible());
      assertEquals(0.0F, homeLight1.getNameAngle(), 0.01F);
      assertNull(homeLight1.getStaircaseCutOutShape());
      assertNull(homeLight1.getColor());
      assertEquals((-815.0F), homeLight1.getWidth(), 0.01F);
      assertEquals(0.19634955F, homeLight1.getY(), 0.01F);
      assertTrue(homeLight1.isMovable());
      assertEquals((-407.5F), homeLight1.getX(), 0.01F);
      assertNull(homeLight1.getCurrency());
      assertEquals(0.5F, homeLight1.getPower(), 0.01F);
      assertEquals((-694.0F), homeLight1.getGroundElevation(), 0.01F);
      assertFalse(homeLight1.isModelMirrored());
      assertEquals("h&*+\"", homeLight1.getDescription());
      assertFalse(homeLight1.isNameVisible());
      assertFalse(homeLight1.isBackFaceShown());
      assertEquals(0.0F, homeLight1.getNameXOffset(), 0.01F);
      assertEquals("h&*+\"", homeLight1.getName());
      assertEquals((-694.0F), homeLight1.getElevation(), 0.01F);
      assertFalse(homeLight1.isDoorOrWindow());
      assertTrue(homeLight1.isTexturable());
      assertEquals(0.0F, homeLight1.getAngle(), 0.01F);
      assertFalse(homeLight2.isBackFaceShown());
      assertFalse(homeLight2.isDoorOrWindow());
      assertTrue(homeLight2.isTexturable());
      assertFalse(homeLight2.isModelMirrored());
      assertFalse(homeLight2.isNameVisible());
      assertEquals(0.0F, homeLight2.getAngle(), 0.01F);
      assertEquals((-407.5F), homeLight2.getX(), 0.01F);
      assertNull(homeLight2.getCurrency());
      assertEquals(0.3926991F, homeLight2.getDepth(), 0.01F);
      assertEquals(0.19634955F, homeLight2.getY(), 0.01F);
      assertNull(homeLight2.getColor());
      assertEquals(0.0F, homeLight2.getNameYOffset(), 0.01F);
      assertEquals("h&*+\"", homeLight2.getCatalogId());
      assertTrue(homeLight2.isMovable());
      assertTrue(homeLight2.isResizable());
      assertEquals((-815.0F), homeLight2.getWidth(), 0.01F);
      assertEquals(0.0F, homeLight2.getNameAngle(), 0.01F);
      assertEquals(0.5F, homeLight2.getPower(), 0.01F);
      assertNull(homeLight2.getShininess());
      assertEquals("h&*+\"", homeLight2.getDescription());
      assertNull(homeLight2.getStaircaseCutOutShape());
      assertEquals((-694.0F), homeLight2.getHeight(), 0.01F);
      assertEquals("h&*+\"", homeLight2.getName());
      assertTrue(homeLight2.isVisible());
      assertTrue(homeLight2.isDeformable());
      assertEquals((-694.0F), homeLight2.getElevation(), 0.01F);
      assertEquals((-694.0F), homeLight2.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight2.getNameXOffset(), 0.01F);
      assertEquals(2, lightSourceArray0.length);
      assertNotSame(homeLight0, homeLight1);
      assertNotSame(homeLight0, homeLight2);
      assertNotSame(homeLight1, homeLight0);
      assertNotSame(homeLight1, homeLight2);
      assertNotSame(homeLight2, homeLight1);
      assertNotSame(homeLight2, homeLight0);
      assertNotNull(homeLight2);
      
      Content content0 = homeLight0.getIcon();
      assertFalse(homeLight0.equals((Object)homeLight1));
      assertFalse(homeLight0.equals((Object)homeLight2));
      assertEquals((byte)10, bigDecimal0.byteValue());
      assertEquals((short)10, bigDecimal0.shortValue());
      assertNull(catalogLight0.getCurrency());
      assertTrue(catalogLight0.isProportional());
      assertEquals(0.3926991F, catalogLight0.getDepth(), 0.01F);
      assertNull(catalogLight0.getGrade());
      assertEquals((-694.0F), catalogLight0.getHeight(), 0.01F);
      assertEquals((-694.0F), catalogLight0.getElevation(), 0.01F);
      assertTrue(catalogLight0.isTexturable());
      assertEquals("h&*+\"", catalogLight0.getId());
      assertNull(catalogLight0.getInformation());
      assertTrue(catalogLight0.isDeformable());
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertEquals((-815.0F), catalogLight0.getWidth(), 0.01F);
      assertNull(catalogLight0.getColor());
      assertFalse(catalogLight0.isBackFaceShown());
      assertFalse(catalogLight0.isDoorOrWindow());
      assertEquals("h&*+\"", catalogLight0.getName());
      assertTrue(catalogLight0.isMovable());
      assertNull(catalogLight0.getCreationDate());
      assertTrue(catalogLight0.isResizable());
      assertFalse(catalogLight0.isModifiable());
      assertEquals("h&*+\"", catalogLight0.getCreator());
      assertEquals("h&*+\"", catalogLight0.getDescription());
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals((-694.0F), homeLight0.getElevation(), 0.01F);
      assertEquals("h&*+\"", homeLight0.getDescription());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals((-694.0F), homeLight0.getGroundElevation(), 0.01F);
      assertTrue(homeLight0.isResizable());
      assertEquals(0.19634955F, homeLight0.getY(), 0.01F);
      assertEquals("h&*+\"", homeLight0.getCatalogId());
      assertNull(homeLight0.getShininess());
      assertEquals((-815.0F), homeLight0.getWidth(), 0.01F);
      assertTrue(homeLight0.isMovable());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals((-407.5F), homeLight0.getX(), 0.01F);
      assertEquals((-694.0F), homeLight0.getHeight(), 0.01F);
      assertNull(homeLight0.getCurrency());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertNull(homeLight0.getColor());
      assertTrue(homeLight0.isDeformable());
      assertTrue(homeLight0.isVisible());
      assertTrue(homeLight0.isTexturable());
      assertFalse(homeLight0.isModelMirrored());
      assertFalse(homeLight0.isBackFaceShown());
      assertFalse(homeLight0.isDoorOrWindow());
      assertEquals(0.3926991F, homeLight0.getDepth(), 0.01F);
      assertEquals("h&*+\"", homeLight0.getName());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertFalse(homeLight0.isNameVisible());
      assertEquals(2, lightSourceArray0.length);
      assertNotSame(homeLight0, homeLight1);
      assertNotSame(homeLight0, homeLight2);
      assertNull(content0);
      
      homeLight2.setNameVisible(false);
      assertFalse(homeLight0.equals((Object)homeLight1));
      assertFalse(homeLight0.equals((Object)homeLight2));
      assertFalse(homeLight1.equals((Object)homeLight0));
      assertFalse(homeLight1.equals((Object)homeLight2));
      assertFalse(homeLight2.equals((Object)homeLight1));
      assertFalse(homeLight2.equals((Object)homeLight0));
      assertEquals((byte)10, bigDecimal0.byteValue());
      assertEquals((short)10, bigDecimal0.shortValue());
      assertNull(catalogLight0.getCurrency());
      assertTrue(catalogLight0.isProportional());
      assertEquals(0.3926991F, catalogLight0.getDepth(), 0.01F);
      assertNull(catalogLight0.getGrade());
      assertEquals((-694.0F), catalogLight0.getHeight(), 0.01F);
      assertEquals((-694.0F), catalogLight0.getElevation(), 0.01F);
      assertTrue(catalogLight0.isTexturable());
      assertEquals("h&*+\"", catalogLight0.getId());
      assertNull(catalogLight0.getInformation());
      assertTrue(catalogLight0.isDeformable());
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertEquals((-815.0F), catalogLight0.getWidth(), 0.01F);
      assertNull(catalogLight0.getColor());
      assertFalse(catalogLight0.isBackFaceShown());
      assertFalse(catalogLight0.isDoorOrWindow());
      assertEquals("h&*+\"", catalogLight0.getName());
      assertTrue(catalogLight0.isMovable());
      assertNull(catalogLight0.getCreationDate());
      assertTrue(catalogLight0.isResizable());
      assertFalse(catalogLight0.isModifiable());
      assertEquals("h&*+\"", catalogLight0.getCreator());
      assertEquals("h&*+\"", catalogLight0.getDescription());
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals((-694.0F), homeLight0.getElevation(), 0.01F);
      assertEquals("h&*+\"", homeLight0.getDescription());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals((-694.0F), homeLight0.getGroundElevation(), 0.01F);
      assertTrue(homeLight0.isResizable());
      assertEquals(0.19634955F, homeLight0.getY(), 0.01F);
      assertEquals("h&*+\"", homeLight0.getCatalogId());
      assertNull(homeLight0.getShininess());
      assertEquals((-815.0F), homeLight0.getWidth(), 0.01F);
      assertTrue(homeLight0.isMovable());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals((-407.5F), homeLight0.getX(), 0.01F);
      assertEquals((-694.0F), homeLight0.getHeight(), 0.01F);
      assertNull(homeLight0.getCurrency());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertNull(homeLight0.getColor());
      assertTrue(homeLight0.isDeformable());
      assertTrue(homeLight0.isVisible());
      assertTrue(homeLight0.isTexturable());
      assertFalse(homeLight0.isModelMirrored());
      assertFalse(homeLight0.isBackFaceShown());
      assertFalse(homeLight0.isDoorOrWindow());
      assertEquals(0.3926991F, homeLight0.getDepth(), 0.01F);
      assertEquals("h&*+\"", homeLight0.getName());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertFalse(homeLight0.isNameVisible());
      assertEquals((-694.0F), homeLight1.getHeight(), 0.01F);
      assertEquals(0.3926991F, homeLight1.getDepth(), 0.01F);
      assertEquals("h&*+\"", homeLight1.getCatalogId());
      assertEquals(0.0F, homeLight1.getNameYOffset(), 0.01F);
      assertTrue(homeLight1.isDeformable());
      assertTrue(homeLight1.isResizable());
      assertNull(homeLight1.getShininess());
      assertTrue(homeLight1.isVisible());
      assertEquals(0.0F, homeLight1.getNameAngle(), 0.01F);
      assertNull(homeLight1.getStaircaseCutOutShape());
      assertNull(homeLight1.getColor());
      assertEquals((-815.0F), homeLight1.getWidth(), 0.01F);
      assertEquals(0.19634955F, homeLight1.getY(), 0.01F);
      assertTrue(homeLight1.isMovable());
      assertEquals((-407.5F), homeLight1.getX(), 0.01F);
      assertNull(homeLight1.getCurrency());
      assertEquals(0.5F, homeLight1.getPower(), 0.01F);
      assertEquals((-694.0F), homeLight1.getGroundElevation(), 0.01F);
      assertFalse(homeLight1.isModelMirrored());
      assertEquals("h&*+\"", homeLight1.getDescription());
      assertFalse(homeLight1.isNameVisible());
      assertFalse(homeLight1.isBackFaceShown());
      assertEquals(0.0F, homeLight1.getNameXOffset(), 0.01F);
      assertEquals("h&*+\"", homeLight1.getName());
      assertEquals((-694.0F), homeLight1.getElevation(), 0.01F);
      assertFalse(homeLight1.isDoorOrWindow());
      assertTrue(homeLight1.isTexturable());
      assertEquals(0.0F, homeLight1.getAngle(), 0.01F);
      assertFalse(homeLight2.isBackFaceShown());
      assertFalse(homeLight2.isDoorOrWindow());
      assertTrue(homeLight2.isTexturable());
      assertFalse(homeLight2.isModelMirrored());
      assertFalse(homeLight2.isNameVisible());
      assertEquals(0.0F, homeLight2.getAngle(), 0.01F);
      assertEquals((-407.5F), homeLight2.getX(), 0.01F);
      assertNull(homeLight2.getCurrency());
      assertEquals(0.3926991F, homeLight2.getDepth(), 0.01F);
      assertEquals(0.19634955F, homeLight2.getY(), 0.01F);
      assertNull(homeLight2.getColor());
      assertEquals(0.0F, homeLight2.getNameYOffset(), 0.01F);
      assertEquals("h&*+\"", homeLight2.getCatalogId());
      assertTrue(homeLight2.isMovable());
      assertTrue(homeLight2.isResizable());
      assertEquals((-815.0F), homeLight2.getWidth(), 0.01F);
      assertEquals(0.0F, homeLight2.getNameAngle(), 0.01F);
      assertEquals(0.5F, homeLight2.getPower(), 0.01F);
      assertNull(homeLight2.getShininess());
      assertEquals("h&*+\"", homeLight2.getDescription());
      assertNull(homeLight2.getStaircaseCutOutShape());
      assertEquals((-694.0F), homeLight2.getHeight(), 0.01F);
      assertEquals("h&*+\"", homeLight2.getName());
      assertTrue(homeLight2.isVisible());
      assertTrue(homeLight2.isDeformable());
      assertEquals((-694.0F), homeLight2.getElevation(), 0.01F);
      assertEquals((-694.0F), homeLight2.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight2.getNameXOffset(), 0.01F);
      assertEquals(2, lightSourceArray0.length);
      assertNotSame(homeLight0, homeLight1);
      assertNotSame(homeLight0, homeLight2);
      assertNotSame(homeLight1, homeLight0);
      assertNotSame(homeLight1, homeLight2);
      assertNotSame(homeLight2, homeLight1);
      assertNotSame(homeLight2, homeLight0);
      
      homeLight0.setWidth((-1.0F));
      assertFalse(homeLight0.equals((Object)homeLight1));
      assertFalse(homeLight0.equals((Object)homeLight2));
      assertEquals((byte)10, bigDecimal0.byteValue());
      assertEquals((short)10, bigDecimal0.shortValue());
      assertNull(catalogLight0.getCurrency());
      assertTrue(catalogLight0.isProportional());
      assertEquals(0.3926991F, catalogLight0.getDepth(), 0.01F);
      assertNull(catalogLight0.getGrade());
      assertEquals((-694.0F), catalogLight0.getHeight(), 0.01F);
      assertEquals((-694.0F), catalogLight0.getElevation(), 0.01F);
      assertTrue(catalogLight0.isTexturable());
      assertEquals("h&*+\"", catalogLight0.getId());
      assertNull(catalogLight0.getInformation());
      assertTrue(catalogLight0.isDeformable());
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertEquals((-815.0F), catalogLight0.getWidth(), 0.01F);
      assertNull(catalogLight0.getColor());
      assertFalse(catalogLight0.isBackFaceShown());
      assertFalse(catalogLight0.isDoorOrWindow());
      assertEquals("h&*+\"", catalogLight0.getName());
      assertTrue(catalogLight0.isMovable());
      assertNull(catalogLight0.getCreationDate());
      assertTrue(catalogLight0.isResizable());
      assertFalse(catalogLight0.isModifiable());
      assertEquals("h&*+\"", catalogLight0.getCreator());
      assertEquals("h&*+\"", catalogLight0.getDescription());
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals((-694.0F), homeLight0.getElevation(), 0.01F);
      assertEquals("h&*+\"", homeLight0.getDescription());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals((-694.0F), homeLight0.getGroundElevation(), 0.01F);
      assertTrue(homeLight0.isResizable());
      assertEquals(0.19634955F, homeLight0.getY(), 0.01F);
      assertEquals("h&*+\"", homeLight0.getCatalogId());
      assertNull(homeLight0.getShininess());
      assertTrue(homeLight0.isMovable());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals((-407.5F), homeLight0.getX(), 0.01F);
      assertEquals((-694.0F), homeLight0.getHeight(), 0.01F);
      assertNull(homeLight0.getCurrency());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertEquals((-1.0F), homeLight0.getWidth(), 0.01F);
      assertNull(homeLight0.getColor());
      assertTrue(homeLight0.isDeformable());
      assertTrue(homeLight0.isVisible());
      assertTrue(homeLight0.isTexturable());
      assertFalse(homeLight0.isModelMirrored());
      assertFalse(homeLight0.isBackFaceShown());
      assertFalse(homeLight0.isDoorOrWindow());
      assertEquals(0.3926991F, homeLight0.getDepth(), 0.01F);
      assertEquals("h&*+\"", homeLight0.getName());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertFalse(homeLight0.isNameVisible());
      assertEquals(2, lightSourceArray0.length);
      assertNotSame(homeLight0, homeLight1);
      assertNotSame(homeLight0, homeLight2);
      
      String string0 = homeLight1.getName();
      assertFalse(homeLight0.equals((Object)homeLight1));
      assertFalse(homeLight0.equals((Object)homeLight2));
      assertFalse(homeLight1.equals((Object)homeLight0));
      assertFalse(homeLight1.equals((Object)homeLight2));
      assertEquals((byte)10, bigDecimal0.byteValue());
      assertEquals((short)10, bigDecimal0.shortValue());
      assertNull(catalogLight0.getCurrency());
      assertTrue(catalogLight0.isProportional());
      assertEquals(0.3926991F, catalogLight0.getDepth(), 0.01F);
      assertNull(catalogLight0.getGrade());
      assertEquals((-694.0F), catalogLight0.getHeight(), 0.01F);
      assertEquals((-694.0F), catalogLight0.getElevation(), 0.01F);
      assertTrue(catalogLight0.isTexturable());
      assertEquals("h&*+\"", catalogLight0.getId());
      assertNull(catalogLight0.getInformation());
      assertTrue(catalogLight0.isDeformable());
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertEquals((-815.0F), catalogLight0.getWidth(), 0.01F);
      assertNull(catalogLight0.getColor());
      assertFalse(catalogLight0.isBackFaceShown());
      assertFalse(catalogLight0.isDoorOrWindow());
      assertEquals("h&*+\"", catalogLight0.getName());
      assertTrue(catalogLight0.isMovable());
      assertNull(catalogLight0.getCreationDate());
      assertTrue(catalogLight0.isResizable());
      assertFalse(catalogLight0.isModifiable());
      assertEquals("h&*+\"", catalogLight0.getCreator());
      assertEquals("h&*+\"", catalogLight0.getDescription());
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals((-694.0F), homeLight0.getElevation(), 0.01F);
      assertEquals("h&*+\"", homeLight0.getDescription());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals((-694.0F), homeLight0.getGroundElevation(), 0.01F);
      assertTrue(homeLight0.isResizable());
      assertEquals(0.19634955F, homeLight0.getY(), 0.01F);
      assertEquals("h&*+\"", homeLight0.getCatalogId());
      assertNull(homeLight0.getShininess());
      assertTrue(homeLight0.isMovable());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals((-407.5F), homeLight0.getX(), 0.01F);
      assertEquals((-694.0F), homeLight0.getHeight(), 0.01F);
      assertNull(homeLight0.getCurrency());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertEquals((-1.0F), homeLight0.getWidth(), 0.01F);
      assertNull(homeLight0.getColor());
      assertTrue(homeLight0.isDeformable());
      assertTrue(homeLight0.isVisible());
      assertTrue(homeLight0.isTexturable());
      assertFalse(homeLight0.isModelMirrored());
      assertFalse(homeLight0.isBackFaceShown());
      assertFalse(homeLight0.isDoorOrWindow());
      assertEquals(0.3926991F, homeLight0.getDepth(), 0.01F);
      assertEquals("h&*+\"", homeLight0.getName());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertFalse(homeLight0.isNameVisible());
      assertEquals((-694.0F), homeLight1.getHeight(), 0.01F);
      assertEquals(0.3926991F, homeLight1.getDepth(), 0.01F);
      assertEquals("h&*+\"", homeLight1.getCatalogId());
      assertEquals(0.0F, homeLight1.getNameYOffset(), 0.01F);
      assertTrue(homeLight1.isDeformable());
      assertTrue(homeLight1.isResizable());
      assertNull(homeLight1.getShininess());
      assertTrue(homeLight1.isVisible());
      assertEquals(0.0F, homeLight1.getNameAngle(), 0.01F);
      assertNull(homeLight1.getStaircaseCutOutShape());
      assertNull(homeLight1.getColor());
      assertEquals((-815.0F), homeLight1.getWidth(), 0.01F);
      assertEquals(0.19634955F, homeLight1.getY(), 0.01F);
      assertTrue(homeLight1.isMovable());
      assertEquals((-407.5F), homeLight1.getX(), 0.01F);
      assertNull(homeLight1.getCurrency());
      assertEquals(0.5F, homeLight1.getPower(), 0.01F);
      assertEquals((-694.0F), homeLight1.getGroundElevation(), 0.01F);
      assertFalse(homeLight1.isModelMirrored());
      assertEquals("h&*+\"", homeLight1.getDescription());
      assertFalse(homeLight1.isNameVisible());
      assertFalse(homeLight1.isBackFaceShown());
      assertEquals(0.0F, homeLight1.getNameXOffset(), 0.01F);
      assertEquals("h&*+\"", homeLight1.getName());
      assertEquals((-694.0F), homeLight1.getElevation(), 0.01F);
      assertFalse(homeLight1.isDoorOrWindow());
      assertTrue(homeLight1.isTexturable());
      assertEquals(0.0F, homeLight1.getAngle(), 0.01F);
      assertEquals(2, lightSourceArray0.length);
      assertNotSame(homeLight0, homeLight1);
      assertNotSame(homeLight0, homeLight2);
      assertNotSame(homeLight1, homeLight0);
      assertNotSame(homeLight1, homeLight2);
      assertNotNull(string0);
      assertEquals("h&*+\"", string0);
      
      homeLight2.setShininess((Float) null);
      assertFalse(homeLight0.equals((Object)homeLight1));
      assertFalse(homeLight0.equals((Object)homeLight2));
      assertFalse(homeLight1.equals((Object)homeLight0));
      assertFalse(homeLight1.equals((Object)homeLight2));
      assertFalse(homeLight2.equals((Object)homeLight1));
      assertFalse(homeLight2.equals((Object)homeLight0));
      assertEquals((byte)10, bigDecimal0.byteValue());
      assertEquals((short)10, bigDecimal0.shortValue());
      assertNull(catalogLight0.getCurrency());
      assertTrue(catalogLight0.isProportional());
      assertEquals(0.3926991F, catalogLight0.getDepth(), 0.01F);
      assertNull(catalogLight0.getGrade());
      assertEquals((-694.0F), catalogLight0.getHeight(), 0.01F);
      assertEquals((-694.0F), catalogLight0.getElevation(), 0.01F);
      assertTrue(catalogLight0.isTexturable());
      assertEquals("h&*+\"", catalogLight0.getId());
      assertNull(catalogLight0.getInformation());
      assertTrue(catalogLight0.isDeformable());
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertEquals((-815.0F), catalogLight0.getWidth(), 0.01F);
      assertNull(catalogLight0.getColor());
      assertFalse(catalogLight0.isBackFaceShown());
      assertFalse(catalogLight0.isDoorOrWindow());
      assertEquals("h&*+\"", catalogLight0.getName());
      assertTrue(catalogLight0.isMovable());
      assertNull(catalogLight0.getCreationDate());
      assertTrue(catalogLight0.isResizable());
      assertFalse(catalogLight0.isModifiable());
      assertEquals("h&*+\"", catalogLight0.getCreator());
      assertEquals("h&*+\"", catalogLight0.getDescription());
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals((-694.0F), homeLight0.getElevation(), 0.01F);
      assertEquals("h&*+\"", homeLight0.getDescription());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals((-694.0F), homeLight0.getGroundElevation(), 0.01F);
      assertTrue(homeLight0.isResizable());
      assertEquals(0.19634955F, homeLight0.getY(), 0.01F);
      assertEquals("h&*+\"", homeLight0.getCatalogId());
      assertNull(homeLight0.getShininess());
      assertTrue(homeLight0.isMovable());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals((-407.5F), homeLight0.getX(), 0.01F);
      assertEquals((-694.0F), homeLight0.getHeight(), 0.01F);
      assertNull(homeLight0.getCurrency());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertEquals((-1.0F), homeLight0.getWidth(), 0.01F);
      assertNull(homeLight0.getColor());
      assertTrue(homeLight0.isDeformable());
      assertTrue(homeLight0.isVisible());
      assertTrue(homeLight0.isTexturable());
      assertFalse(homeLight0.isModelMirrored());
      assertFalse(homeLight0.isBackFaceShown());
      assertFalse(homeLight0.isDoorOrWindow());
      assertEquals(0.3926991F, homeLight0.getDepth(), 0.01F);
      assertEquals("h&*+\"", homeLight0.getName());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertFalse(homeLight0.isNameVisible());
      assertEquals((-694.0F), homeLight1.getHeight(), 0.01F);
      assertEquals(0.3926991F, homeLight1.getDepth(), 0.01F);
      assertEquals("h&*+\"", homeLight1.getCatalogId());
      assertEquals(0.0F, homeLight1.getNameYOffset(), 0.01F);
      assertTrue(homeLight1.isDeformable());
      assertTrue(homeLight1.isResizable());
      assertNull(homeLight1.getShininess());
      assertTrue(homeLight1.isVisible());
      assertEquals(0.0F, homeLight1.getNameAngle(), 0.01F);
      assertNull(homeLight1.getStaircaseCutOutShape());
      assertNull(homeLight1.getColor());
      assertEquals((-815.0F), homeLight1.getWidth(), 0.01F);
      assertEquals(0.19634955F, homeLight1.getY(), 0.01F);
      assertTrue(homeLight1.isMovable());
      assertEquals((-407.5F), homeLight1.getX(), 0.01F);
      assertNull(homeLight1.getCurrency());
      assertEquals(0.5F, homeLight1.getPower(), 0.01F);
      assertEquals((-694.0F), homeLight1.getGroundElevation(), 0.01F);
      assertFalse(homeLight1.isModelMirrored());
      assertEquals("h&*+\"", homeLight1.getDescription());
      assertFalse(homeLight1.isNameVisible());
      assertFalse(homeLight1.isBackFaceShown());
      assertEquals(0.0F, homeLight1.getNameXOffset(), 0.01F);
      assertEquals("h&*+\"", homeLight1.getName());
      assertEquals((-694.0F), homeLight1.getElevation(), 0.01F);
      assertFalse(homeLight1.isDoorOrWindow());
      assertTrue(homeLight1.isTexturable());
      assertEquals(0.0F, homeLight1.getAngle(), 0.01F);
      assertFalse(homeLight2.isBackFaceShown());
      assertFalse(homeLight2.isDoorOrWindow());
      assertTrue(homeLight2.isTexturable());
      assertFalse(homeLight2.isModelMirrored());
      assertFalse(homeLight2.isNameVisible());
      assertEquals(0.0F, homeLight2.getAngle(), 0.01F);
      assertEquals((-407.5F), homeLight2.getX(), 0.01F);
      assertNull(homeLight2.getCurrency());
      assertEquals(0.3926991F, homeLight2.getDepth(), 0.01F);
      assertEquals(0.19634955F, homeLight2.getY(), 0.01F);
      assertNull(homeLight2.getColor());
      assertEquals(0.0F, homeLight2.getNameYOffset(), 0.01F);
      assertEquals("h&*+\"", homeLight2.getCatalogId());
      assertTrue(homeLight2.isMovable());
      assertTrue(homeLight2.isResizable());
      assertEquals((-815.0F), homeLight2.getWidth(), 0.01F);
      assertEquals(0.0F, homeLight2.getNameAngle(), 0.01F);
      assertEquals(0.5F, homeLight2.getPower(), 0.01F);
      assertNull(homeLight2.getShininess());
      assertEquals("h&*+\"", homeLight2.getDescription());
      assertNull(homeLight2.getStaircaseCutOutShape());
      assertEquals((-694.0F), homeLight2.getHeight(), 0.01F);
      assertEquals("h&*+\"", homeLight2.getName());
      assertTrue(homeLight2.isVisible());
      assertTrue(homeLight2.isDeformable());
      assertEquals((-694.0F), homeLight2.getElevation(), 0.01F);
      assertEquals((-694.0F), homeLight2.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight2.getNameXOffset(), 0.01F);
      assertEquals(2, lightSourceArray0.length);
      assertNotSame(homeLight0, homeLight1);
      assertNotSame(homeLight0, homeLight2);
      assertNotSame(homeLight1, homeLight0);
      assertNotSame(homeLight1, homeLight2);
      assertNotSame(homeLight2, homeLight1);
      assertNotSame(homeLight2, homeLight0);
      
      homeLight1.getValueAddedTaxPercentage();
  }

  @Test(timeout = 4000)
  public void test169()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      BigDecimal bigDecimal0 = BigDecimal.TEN;
      LightSource[] lightSourceArray0 = new LightSource[2];
      LightSource lightSource0 = new LightSource(0.3926991F, 4.1423F, 4.1423F, (-1541));
      lightSourceArray0[0] = lightSource0;
      float float0 = 0.5F;
      float float1 = (-1758.0F);
      Float float2 = new Float(12.695F);
      LightSource lightSource1 = new LightSource(0.5F, (-1758.0F), 1.0F, (-1541), float2);
      lightSourceArray0[1] = lightSource1;
      BigDecimal bigDecimal1 = BigDecimal.ONE;
      CatalogLight catalogLight0 = new CatalogLight("LEVEL", "\"3|;Y6~-=>o", (String) null, (Content) null, (Content) null, (-1541), 1.0F, (-1541), 0.0F, false, lightSourceArray0, (float[][]) null, "q 8cfO#6H)`p3VXl'r", false, bigDecimal1, bigDecimal1);
      HomeLight homeLight0 = new HomeLight(catalogLight0);
      homeLight0.clone();
      homeLight0.setAngle(1.0F);
      Integer integer0 = new Integer((-2144227417));
      homeLight0.getValueAddedTax();
      homeLight0.setDescription((String) null);
      // Undeclared exception!
      try { 
        HomePieceOfFurniture.SortableProperty.valueOf("q 8cfO#6H)`p3VXl'r");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant com.eteks.sweethome3d.model.HomePieceOfFurniture.SortableProperty.q 8cfO#6H)`p3VXl'r
         //
         verifyException("java.lang.Enum", e);
      }
  }

  @Test(timeout = 4000)
  public void test170()  throws Throwable  {
      LightSource[] lightSourceArray0 = new LightSource[4];
      BigDecimal bigDecimal0 = BigDecimal.TEN;
      CatalogLight catalogLight0 = new CatalogLight("jP", "jP", "jP", (Content) null, (Content) null, 0.3926991F, 92.121765F, 233.10785F, (-727.8896F), true, lightSourceArray0, (float[][]) null, "{L", true, bigDecimal0, bigDecimal0);
      HomeLight homeLight0 = new HomeLight(catalogLight0);
      catalogLight0.getCategory();
      catalogLight0.setCategory((FurnitureCategory) null);
      HomeLight homeLight1 = new HomeLight(catalogLight0);
      homeLight1.getIcon();
      Integer integer0 = new Integer((-1204));
      homeLight1.setColor(integer0);
      homeLight1.isBottomRightPointAt(0.3926991F, 301.6161F, 3709.4194F);
      HomeLight homeLight2 = homeLight1.clone();
      HomeLight homeLight3 = new HomeLight(catalogLight0);
      homeLight2.setDescription("{L");
      HomeLight homeLight4 = homeLight3.clone();
      homeLight4.getModelRotation();
      homeLight2.getColor();
  }

  @Test(timeout = 4000)
  public void test171()  throws Throwable  {
      LightSource[] lightSourceArray0 = new LightSource[2];
      LightSource lightSource0 = new LightSource((-815.0F), 0.0F, 0.0F, 114);
      LightSource lightSource1 = new LightSource((-815.0F), (-1.0F), (-127.62969F), (-174));
      BigDecimal bigDecimal0 = BigDecimal.ZERO;
      CatalogLight catalogLight0 = new CatalogLight("h&*+\"", "h&*+\"", "h&*+\"", (Content) null, (Content) null, 0.0F, 0.0F, 2965.994F, (-694.0F), false, lightSourceArray0, (float[][]) null, "ELEVATION", true, bigDecimal0, bigDecimal0);
      HomeLight homeLight0 = new HomeLight(catalogLight0);
      homeLight0.setY((-127.62969F));
      HomeLight homeLight1 = homeLight0.clone();
      homeLight1.isTopLeftPointAt((-127.62969F), (-174), 2965.994F);
      homeLight1.intersectsRectangle(1.0F, (-1581.4954F), (-1581.4954F), 3737.9102F);
      homeLight1.setModelMirrored(false);
      HomePieceOfFurniture.SortableProperty.values();
      homeLight1.isMovable();
  }

  @Test(timeout = 4000)
  public void test172()  throws Throwable  {
      LightSource[] lightSourceArray0 = new LightSource[2];
      LightSource lightSource0 = new LightSource((-815.0011F), 0.0F, 0.0F, (-1541));
      LightSource lightSource1 = new LightSource((-694.0F), 407.50055F, (-127.6F), 0);
      lightSourceArray0[1] = lightSource1;
      BigDecimal bigDecimal0 = BigDecimal.TEN;
      CatalogLight catalogLight0 = new CatalogLight("h&*+\"", "h&*+\"", "h&*+\"", (Content) null, (Content) null, (-815.0011F), 1.2921178F, (-694.0F), (-694.0F), true, lightSourceArray0, (float[][]) null, "h&*+\"", true, bigDecimal0, bigDecimal0);
      HomeLight homeLight0 = new HomeLight(catalogLight0);
      HomeLight homeLight1 = homeLight0.clone();
      homeLight0.setVisible(false);
      homeLight0.getTexture();
      homeLight1.setTexture((HomeTexture) null);
      HomePieceOfFurniture homePieceOfFurniture0 = homeLight1.clone();
      homePieceOfFurniture0.getNameStyle();
      homeLight0.getTexture();
      homeLight1.getTexture();
      homeLight1.isBottomRightPointAt((-694.0F), (-1179.0F), 6264.17F);
  }

  @Test(timeout = 4000)
  public void test173()  throws Throwable  {
      LightSource[] lightSourceArray0 = new LightSource[2];
      LightSource lightSource0 = new LightSource((-815.0F), 0.0F, 0.0F, 114);
      lightSourceArray0[0] = lightSource0;
      LightSource lightSource1 = new LightSource(407.5F, 0.36957806F, (-127.62969F), 114);
      lightSourceArray0[1] = lightSource1;
      BigDecimal bigDecimal0 = BigDecimal.TEN;
      CatalogLight catalogLight0 = new CatalogLight("h&9+\"", "h&9+\"", "h&9+\"", (Content) null, (Content) null, (-815.0F), 0.36957806F, 407.5F, 407.5F, true, lightSourceArray0, (float[][]) null, "h&9+\"", true, bigDecimal0, bigDecimal0);
      HomeLight homeLight0 = new HomeLight(catalogLight0);
      HomeLight homeLight1 = homeLight0.clone();
      homeLight0.setNameAngle((-215.5262F));
      HomeLight homeLight2 = homeLight0.clone();
      HomePieceOfFurniture homePieceOfFurniture0 = new HomePieceOfFurniture(homeLight1);
      HomePieceOfFurniture homePieceOfFurniture1 = homePieceOfFurniture0.clone();
      homePieceOfFurniture1.setModelMirrored(false);
      homeLight0.isNameCenterPointAt(0.0F, (-2702.1F), 407.5F);
      homeLight2.setY(0.36957806F);
      HomeLight homeLight3 = new HomeLight(homeLight1);
      homeLight3.getGroundElevation();
      homeLight3.setDepth(0.36957806F);
      homeLight0.isPointAt(1.0F, (-802.0745F), (-1529.0F));
      homeLight3.getElevation();
  }

  @Test(timeout = 4000)
  public void test174()  throws Throwable  {
      LightSource[] lightSourceArray0 = new LightSource[2];
      LightSource lightSource0 = new LightSource((-815.0011F), 0.3926991F, 0.3926991F, (-1541));
      lightSourceArray0[0] = lightSource0;
      LightSource lightSource1 = new LightSource((-1541), (-2278.261F), 0.3926991F, (-1541));
      BigDecimal bigDecimal0 = BigDecimal.TEN;
      CatalogLight catalogLight0 = new CatalogLight("/", "/", "/", (Content) null, (Content) null, 0.3926991F, 92.121765F, 233.10785F, (-815.0011F), true, lightSourceArray0, (float[][]) null, "{L", true, bigDecimal0, bigDecimal0);
      catalogLight0.getCategory();
      catalogLight0.setCategory((FurnitureCategory) null);
      HomeLight homeLight0 = new HomeLight(catalogLight0);
      homeLight0.getIcon();
      HomeLight homeLight1 = homeLight0.clone();
      homeLight1.setWidth(0.5F);
      HomePieceOfFurniture homePieceOfFurniture0 = homeLight0.clone();
      HomePieceOfFurniture homePieceOfFurniture1 = homePieceOfFurniture0.clone();
      homeLight1.getTexture();
      HomeLight homeLight2 = homeLight1.clone();
      homeLight2.setNameAngle((-1541));
      homeLight2.getTexture();
      homeLight2.isBottomRightPointAt(233.10785F, (-491.2029F), (-1646.9657F));
      homeLight0.isDoorOrWindow();
      homePieceOfFurniture1.setTexture((HomeTexture) null);
  }

  @Test(timeout = 4000)
  public void test175()  throws Throwable  {
      LightSource[] lightSourceArray0 = new LightSource[2];
      LightSource lightSource0 = new LightSource((-815.0011F), 0.0F, 0.0F, (-1541));
      LightSource lightSource1 = new LightSource((-689.75726F), 2965.994F, (-127.62969F), 0);
      lightSourceArray0[1] = lightSource1;
      BigDecimal bigDecimal0 = BigDecimal.TEN;
      BigInteger bigInteger0 = BigInteger.ZERO;
      BigDecimal bigDecimal1 = new BigDecimal(bigInteger0);
      CatalogLight catalogLight0 = new CatalogLight("h&*+\"", "h&*+\"", "h&*+\"", (Content) null, (Content) null, 1.1802855F, (-689.75726F), 0.0F, 2965.994F, true, lightSourceArray0, (float[][]) null, "%49XEFsvP", true, bigDecimal1, bigDecimal1);
      HomeLight homeLight0 = new HomeLight(catalogLight0);
      HomeLight homeLight1 = homeLight0.clone();
      homeLight1.clone();
      PropertyChangeListener propertyChangeListener0 = mock(PropertyChangeListener.class, new ViolatedAssumptionAnswer());
      PropertyChangeListenerProxy propertyChangeListenerProxy0 = new PropertyChangeListenerProxy("", propertyChangeListener0);
      Object object0 = new Object();
      Object object1 = new Object();
      PropertyChangeEvent propertyChangeEvent0 = new PropertyChangeEvent(object0, "Piece isn't texturable", object1, "%49XEFsvP");
      propertyChangeListenerProxy0.propertyChange(propertyChangeEvent0);
      homeLight1.removePropertyChangeListener(propertyChangeListenerProxy0);
      homeLight0.isPointAt(1559.15F, (-815.0011F), 1.1802855F);
      homeLight1.setModelMirrored(true);
      homeLight1.isBottomLeftPointAt((-689.75726F), 2965.994F, 1.1802855F);
      homeLight0.isTopRightPointAt(835.11633F, (-815.0011F), (-127.62969F));
      HomePieceOfFurniture homePieceOfFurniture0 = homeLight0.clone();
      homeLight0.getHeight();
      homeLight0.getPriceValueAddedTaxIncluded();
      homePieceOfFurniture0.getColor();
  }

  @Test(timeout = 4000)
  public void test176()  throws Throwable  {
      LightSource[] lightSourceArray0 = new LightSource[12];
      BigDecimal bigDecimal0 = BigDecimal.TEN;
      CatalogLight catalogLight0 = new CatalogLight("h&*+\"", "h&*+\"", "h&*+\"", (Content) null, (Content) null, 571.1281F, 571.1281F, (-693.5724F), (-693.5724F), true, lightSourceArray0, (float[][]) null, "h&*+\"", true, bigDecimal0, bigDecimal0);
      HomeLight homeLight0 = new HomeLight(catalogLight0);
      HomeLight homeLight1 = new HomeLight(homeLight0);
      homeLight1.getTexture();
      Integer integer0 = new Integer((-1));
      CatalogPieceOfFurniture catalogPieceOfFurniture0 = new CatalogPieceOfFurniture("h&*+\"", (Content) null, (Content) null, (-693.5724F), (-1.0F), (-640.0F), true, true);
      catalogLight0.compareTo(catalogPieceOfFurniture0);
      HomeLight homeLight2 = new HomeLight(homeLight1);
      homeLight2.isNameCenterPointAt((-1232.5602F), 3.4028235E38F, 3.4028235E38F);
      homeLight1.getLevel();
  }

  @Test(timeout = 4000)
  public void test177()  throws Throwable  {
      LightSource[] lightSourceArray0 = new LightSource[2];
      LightSource lightSource0 = new LightSource((-815.0011F), 0.0F, 0.0F, (-1541));
      lightSourceArray0[0] = lightSource0;
      LightSource lightSource1 = new LightSource((-1541), (-2278.261F), (-727.8896F), 8192);
      BigDecimal bigDecimal0 = BigDecimal.TEN;
      CatalogLight catalogLight0 = new CatalogLight("/", "PRICE_VALUE_ADDED_TAX_INCLUDED", "PRICE_VALUE_ADDED_TAX_INCLUDED", (Content) null, (Content) null, 0.3926991F, 92.121765F, 233.10785F, (-727.8896F), true, lightSourceArray0, (float[][]) null, "{L", true, bigDecimal0, bigDecimal0);
      HomeLight homeLight0 = new HomeLight(catalogLight0);
      catalogLight0.getCategory();
      catalogLight0.setCategory((FurnitureCategory) null);
      HomeLight homeLight1 = homeLight0.clone();
      HomePieceOfFurniture homePieceOfFurniture0 = homeLight1.clone();
      homeLight0.setDescription("com.eteks.sweethome3d.model.HomePieceOfFurniture$12");
      homeLight1.getLevel();
      homeLight0.setLevel((Level) null);
      homeLight0.isBackFaceShown();
      homeLight0.setX(2.0F);
      homePieceOfFurniture0.getX();
      homePieceOfFurniture0.setNameAngle((-2983.0F));
  }

  @Test(timeout = 4000)
  public void test178()  throws Throwable  {
      LightSource[] lightSourceArray0 = new LightSource[2];
      LightSource lightSource0 = new LightSource((-815.0F), 0.0F, 0.0F, 114);
      lightSourceArray0[0] = lightSource0;
      LightSource lightSource1 = new LightSource((-694.0F), 2965.994F, (-127.62969F), 0);
      lightSourceArray0[1] = lightSource1;
      BigDecimal bigDecimal0 = BigDecimal.TEN;
      CatalogLight catalogLight0 = new CatalogLight("h&*+\"", "h&*+\"", "h&*+\"", (Content) null, (Content) null, (-815.0F), 0.3926991F, (-694.0F), (-694.0F), true, lightSourceArray0, (float[][]) null, "h&*+\"", true, bigDecimal0, bigDecimal0);
      HomeLight homeLight0 = new HomeLight(catalogLight0);
      HomeLight homeLight1 = homeLight0.clone();
      homeLight1.clone();
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-62);
      byteArray0[1] = (byte)17;
      byteArray0[2] = (byte) (-62);
      byteArray0[3] = (byte)13;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      homeLight0.containsPoint((-768.18F), 2965.994F, 1409.5F);
  }

  @Test(timeout = 4000)
  public void test179()  throws Throwable  {
      LightSource[] lightSourceArray0 = new LightSource[2];
      LightSource lightSource0 = new LightSource((-815.0F), 0.0F, 0.0F, 114);
      lightSourceArray0[0] = lightSource0;
      LightSource lightSource1 = new LightSource((-694.0F), 2965.994F, (-127.62969F), 0);
      lightSourceArray0[1] = lightSource1;
      BigDecimal bigDecimal0 = BigDecimal.TEN;
      CatalogLight catalogLight0 = new CatalogLight("PRICE", "PRICE", "", (Content) null, (Content) null, (-491.084F), 0, 0.3926991F, (-127.62969F), true, lightSourceArray0, (float[][]) null, "TP_eQ<Qrs{$qHnS};G", false, bigDecimal0, bigDecimal0);
      HomeLight homeLight0 = new HomeLight(catalogLight0);
      HomeLight homeLight1 = new HomeLight(homeLight0);
      HomeLight homeLight2 = homeLight1.clone();
      homeLight0.clone();
      // Undeclared exception!
      try { 
        homeLight2.setModelMirrored(true);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Piece isn't resizable
         //
         verifyException("com.eteks.sweethome3d.model.HomePieceOfFurniture", e);
      }
  }

  @Test(timeout = 4000)
  public void test180()  throws Throwable  {
      LightSource[] lightSourceArray0 = new LightSource[4];
      BigDecimal bigDecimal0 = BigDecimal.TEN;
      LightSource lightSource0 = new LightSource((-727.8896F), 0.0F, (-1541), (-1541));
      LightSource lightSource1 = new LightSource((-1541), 551.29F, (-127.62969F), 0);
      BigDecimal bigDecimal1 = BigDecimal.TEN;
      CatalogLight catalogLight0 = new CatalogLight("com.eteks.sweethome3d.model.HomePieceOfFurniture$10", "com.eteks.sweethome3d.tools.URLContent", "MODEL_MIRRORED", (Content) null, (Content) null, 1927.0F, 0, 0.3926991F, 4248.03F, true, lightSourceArray0, (float[][]) null, "MODEL_MIRRORED", true, bigDecimal0, bigDecimal0);
      HomeLight homeLight0 = new HomeLight(catalogLight0);
      HomeLight homeLight1 = homeLight0.clone();
      HomeLight homeLight2 = homeLight1.clone();
      homeLight2.setName("MODEL_MIRRORED");
      homeLight2.getTexture();
      homeLight1.setTexture((HomeTexture) null);
      homeLight2.clone();
      homeLight1.getShininess();
      HomeLight homeLight3 = new HomeLight(homeLight2);
      homeLight1.isTopRightPointAt(2351.3047F, 1.9739261F, (-1085.438F));
      homeLight3.getModelRotation();
  }

  @Test(timeout = 4000)
  public void test181()  throws Throwable  {
      LightSource[] lightSourceArray0 = new LightSource[2];
      LightSource lightSource0 = new LightSource((-815.0011F), 0.0F, 0.0F, (-1541));
      assertEquals(0.0F, lightSource0.getZ(), 0.01F);
      assertEquals((-815.0011F), lightSource0.getX(), 0.01F);
      assertNull(lightSource0.getDiameter());
      assertEquals((-1541), lightSource0.getColor());
      assertEquals(0.0F, lightSource0.getY(), 0.01F);
      assertNotNull(lightSource0);
      
      lightSourceArray0[0] = lightSource0;
      LightSource lightSource1 = new LightSource((-1541), (-2278.261F), (-694.0F), 8192);
      assertFalse(lightSource1.equals((Object)lightSource0));
      assertEquals((-2278.261F), lightSource1.getY(), 0.01F);
      assertEquals(8192, lightSource1.getColor());
      assertNull(lightSource1.getDiameter());
      assertEquals((-694.0F), lightSource1.getZ(), 0.01F);
      assertEquals((-1541.0F), lightSource1.getX(), 0.01F);
      assertNotNull(lightSource1);
      
      BigDecimal bigDecimal0 = BigDecimal.TEN;
      assertEquals((short)10, bigDecimal0.shortValue());
      assertEquals((byte)10, bigDecimal0.byteValue());
      assertNotNull(bigDecimal0);
      
      boolean boolean0 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "&|.q>W=%p@A+c");
      assertFalse(boolean0);
      
      CatalogLight catalogLight0 = new CatalogLight("/", "PRICE_VALUE_ADDED_TAX_INCLUDED", "PRICE_VALUE_ADDED_TAX_INCLUDED", (Content) null, (Content) null, 0.3926991F, 114.0F, 233.10785F, (-694.0F), true, lightSourceArray0, (float[][]) null, "{L", true, bigDecimal0, bigDecimal0);
      assertEquals((short)10, bigDecimal0.shortValue());
      assertEquals((byte)10, bigDecimal0.byteValue());
      assertNull(catalogLight0.getCreationDate());
      assertEquals("{L", catalogLight0.getCreator());
      assertNull(catalogLight0.getColor());
      assertFalse(catalogLight0.isModifiable());
      assertEquals(233.10785F, catalogLight0.getHeight(), 0.01F);
      assertFalse(catalogLight0.isBackFaceShown());
      assertTrue(catalogLight0.isDeformable());
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertFalse(catalogLight0.isDoorOrWindow());
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertTrue(catalogLight0.isMovable());
      assertNull(catalogLight0.getGrade());
      assertEquals("PRICE_VALUE_ADDED_TAX_INCLUDED", catalogLight0.getDescription());
      assertEquals("PRICE_VALUE_ADDED_TAX_INCLUDED", catalogLight0.getName());
      assertNull(catalogLight0.getCurrency());
      assertEquals((-694.0F), catalogLight0.getElevation(), 0.01F);
      assertTrue(catalogLight0.isTexturable());
      assertEquals("/", catalogLight0.getId());
      assertTrue(catalogLight0.isProportional());
      assertNull(catalogLight0.getInformation());
      assertTrue(catalogLight0.isResizable());
      assertEquals(114.0F, catalogLight0.getDepth(), 0.01F);
      assertEquals(0.3926991F, catalogLight0.getWidth(), 0.01F);
      assertEquals(2, lightSourceArray0.length);
      assertNotNull(catalogLight0);
      
      HomeLight homeLight0 = new HomeLight(catalogLight0);
      assertEquals((short)10, bigDecimal0.shortValue());
      assertEquals((byte)10, bigDecimal0.byteValue());
      assertNull(catalogLight0.getCreationDate());
      assertEquals("{L", catalogLight0.getCreator());
      assertNull(catalogLight0.getColor());
      assertFalse(catalogLight0.isModifiable());
      assertEquals(233.10785F, catalogLight0.getHeight(), 0.01F);
      assertFalse(catalogLight0.isBackFaceShown());
      assertTrue(catalogLight0.isDeformable());
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertFalse(catalogLight0.isDoorOrWindow());
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertTrue(catalogLight0.isMovable());
      assertNull(catalogLight0.getGrade());
      assertEquals("PRICE_VALUE_ADDED_TAX_INCLUDED", catalogLight0.getDescription());
      assertEquals("PRICE_VALUE_ADDED_TAX_INCLUDED", catalogLight0.getName());
      assertNull(catalogLight0.getCurrency());
      assertEquals((-694.0F), catalogLight0.getElevation(), 0.01F);
      assertTrue(catalogLight0.isTexturable());
      assertEquals("/", catalogLight0.getId());
      assertTrue(catalogLight0.isProportional());
      assertNull(catalogLight0.getInformation());
      assertTrue(catalogLight0.isResizable());
      assertEquals(114.0F, catalogLight0.getDepth(), 0.01F);
      assertEquals(0.3926991F, catalogLight0.getWidth(), 0.01F);
      assertNull(homeLight0.getCurrency());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertEquals(114.0F, homeLight0.getDepth(), 0.01F);
      assertNull(homeLight0.getColor());
      assertTrue(homeLight0.isDeformable());
      assertTrue(homeLight0.isVisible());
      assertTrue(homeLight0.isTexturable());
      assertFalse(homeLight0.isModelMirrored());
      assertFalse(homeLight0.isBackFaceShown());
      assertFalse(homeLight0.isDoorOrWindow());
      assertEquals(233.10785F, homeLight0.getHeight(), 0.01F);
      assertEquals("/", homeLight0.getCatalogId());
      assertFalse(homeLight0.isNameVisible());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals((-694.0F), homeLight0.getElevation(), 0.01F);
      assertEquals("PRICE_VALUE_ADDED_TAX_INCLUDED", homeLight0.getDescription());
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertEquals((-694.0F), homeLight0.getGroundElevation(), 0.01F);
      assertTrue(homeLight0.isResizable());
      assertEquals(57.0F, homeLight0.getY(), 0.01F);
      assertEquals(0.19634955F, homeLight0.getX(), 0.01F);
      assertEquals(0.3926991F, homeLight0.getWidth(), 0.01F);
      assertNull(homeLight0.getShininess());
      assertTrue(homeLight0.isMovable());
      assertEquals("PRICE_VALUE_ADDED_TAX_INCLUDED", homeLight0.getName());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals(2, lightSourceArray0.length);
      assertNotNull(homeLight0);
      
      HomeLight homeLight1 = homeLight0.clone();
      assertFalse(homeLight1.equals((Object)homeLight0));
      assertEquals((short)10, bigDecimal0.shortValue());
      assertEquals((byte)10, bigDecimal0.byteValue());
      assertNull(catalogLight0.getCreationDate());
      assertEquals("{L", catalogLight0.getCreator());
      assertNull(catalogLight0.getColor());
      assertFalse(catalogLight0.isModifiable());
      assertEquals(233.10785F, catalogLight0.getHeight(), 0.01F);
      assertFalse(catalogLight0.isBackFaceShown());
      assertTrue(catalogLight0.isDeformable());
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertFalse(catalogLight0.isDoorOrWindow());
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertTrue(catalogLight0.isMovable());
      assertNull(catalogLight0.getGrade());
      assertEquals("PRICE_VALUE_ADDED_TAX_INCLUDED", catalogLight0.getDescription());
      assertEquals("PRICE_VALUE_ADDED_TAX_INCLUDED", catalogLight0.getName());
      assertNull(catalogLight0.getCurrency());
      assertEquals((-694.0F), catalogLight0.getElevation(), 0.01F);
      assertTrue(catalogLight0.isTexturable());
      assertEquals("/", catalogLight0.getId());
      assertTrue(catalogLight0.isProportional());
      assertNull(catalogLight0.getInformation());
      assertTrue(catalogLight0.isResizable());
      assertEquals(114.0F, catalogLight0.getDepth(), 0.01F);
      assertEquals(0.3926991F, catalogLight0.getWidth(), 0.01F);
      assertNull(homeLight0.getCurrency());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertEquals(114.0F, homeLight0.getDepth(), 0.01F);
      assertNull(homeLight0.getColor());
      assertTrue(homeLight0.isDeformable());
      assertTrue(homeLight0.isVisible());
      assertTrue(homeLight0.isTexturable());
      assertFalse(homeLight0.isModelMirrored());
      assertFalse(homeLight0.isBackFaceShown());
      assertFalse(homeLight0.isDoorOrWindow());
      assertEquals(233.10785F, homeLight0.getHeight(), 0.01F);
      assertEquals("/", homeLight0.getCatalogId());
      assertFalse(homeLight0.isNameVisible());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals((-694.0F), homeLight0.getElevation(), 0.01F);
      assertEquals("PRICE_VALUE_ADDED_TAX_INCLUDED", homeLight0.getDescription());
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertEquals((-694.0F), homeLight0.getGroundElevation(), 0.01F);
      assertTrue(homeLight0.isResizable());
      assertEquals(57.0F, homeLight0.getY(), 0.01F);
      assertEquals(0.19634955F, homeLight0.getX(), 0.01F);
      assertEquals(0.3926991F, homeLight0.getWidth(), 0.01F);
      assertNull(homeLight0.getShininess());
      assertTrue(homeLight0.isMovable());
      assertEquals("PRICE_VALUE_ADDED_TAX_INCLUDED", homeLight0.getName());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertTrue(homeLight1.isResizable());
      assertEquals(57.0F, homeLight1.getY(), 0.01F);
      assertEquals("PRICE_VALUE_ADDED_TAX_INCLUDED", homeLight1.getName());
      assertTrue(homeLight1.isMovable());
      assertEquals(0.0F, homeLight1.getNameAngle(), 0.01F);
      assertEquals(0.19634955F, homeLight1.getX(), 0.01F);
      assertNull(homeLight1.getStaircaseCutOutShape());
      assertNull(homeLight1.getShininess());
      assertTrue(homeLight1.isDeformable());
      assertTrue(homeLight1.isVisible());
      assertEquals(114.0F, homeLight1.getDepth(), 0.01F);
      assertEquals((-694.0F), homeLight1.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight1.getNameXOffset(), 0.01F);
      assertEquals("/", homeLight1.getCatalogId());
      assertEquals(0.0F, homeLight1.getAngle(), 0.01F);
      assertFalse(homeLight1.isNameVisible());
      assertEquals(233.10785F, homeLight1.getHeight(), 0.01F);
      assertTrue(homeLight1.isTexturable());
      assertEquals((-694.0F), homeLight1.getElevation(), 0.01F);
      assertFalse(homeLight1.isModelMirrored());
      assertFalse(homeLight1.isBackFaceShown());
      assertFalse(homeLight1.isDoorOrWindow());
      assertNull(homeLight1.getColor());
      assertEquals(0.0F, homeLight1.getNameYOffset(), 0.01F);
      assertEquals("PRICE_VALUE_ADDED_TAX_INCLUDED", homeLight1.getDescription());
      assertNull(homeLight1.getCurrency());
      assertEquals(0.3926991F, homeLight1.getWidth(), 0.01F);
      assertEquals(0.5F, homeLight1.getPower(), 0.01F);
      assertEquals(2, lightSourceArray0.length);
      assertNotSame(homeLight0, homeLight1);
      assertNotSame(homeLight1, homeLight0);
      assertNotNull(homeLight1);
      
      HomeLight homeLight2 = (HomeLight)homeLight1.clone();
      assertFalse(homeLight0.equals((Object)homeLight1));
      assertFalse(homeLight1.equals((Object)homeLight0));
      assertFalse(homeLight2.equals((Object)homeLight1));
      assertFalse(homeLight2.equals((Object)homeLight0));
      assertEquals((short)10, bigDecimal0.shortValue());
      assertEquals((byte)10, bigDecimal0.byteValue());
      assertNull(catalogLight0.getCreationDate());
      assertEquals("{L", catalogLight0.getCreator());
      assertNull(catalogLight0.getColor());
      assertFalse(catalogLight0.isModifiable());
      assertEquals(233.10785F, catalogLight0.getHeight(), 0.01F);
      assertFalse(catalogLight0.isBackFaceShown());
      assertTrue(catalogLight0.isDeformable());
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertFalse(catalogLight0.isDoorOrWindow());
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertTrue(catalogLight0.isMovable());
      assertNull(catalogLight0.getGrade());
      assertEquals("PRICE_VALUE_ADDED_TAX_INCLUDED", catalogLight0.getDescription());
      assertEquals("PRICE_VALUE_ADDED_TAX_INCLUDED", catalogLight0.getName());
      assertNull(catalogLight0.getCurrency());
      assertEquals((-694.0F), catalogLight0.getElevation(), 0.01F);
      assertTrue(catalogLight0.isTexturable());
      assertEquals("/", catalogLight0.getId());
      assertTrue(catalogLight0.isProportional());
      assertNull(catalogLight0.getInformation());
      assertTrue(catalogLight0.isResizable());
      assertEquals(114.0F, catalogLight0.getDepth(), 0.01F);
      assertEquals(0.3926991F, catalogLight0.getWidth(), 0.01F);
      assertNull(homeLight0.getCurrency());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertEquals(114.0F, homeLight0.getDepth(), 0.01F);
      assertNull(homeLight0.getColor());
      assertTrue(homeLight0.isDeformable());
      assertTrue(homeLight0.isVisible());
      assertTrue(homeLight0.isTexturable());
      assertFalse(homeLight0.isModelMirrored());
      assertFalse(homeLight0.isBackFaceShown());
      assertFalse(homeLight0.isDoorOrWindow());
      assertEquals(233.10785F, homeLight0.getHeight(), 0.01F);
      assertEquals("/", homeLight0.getCatalogId());
      assertFalse(homeLight0.isNameVisible());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals((-694.0F), homeLight0.getElevation(), 0.01F);
      assertEquals("PRICE_VALUE_ADDED_TAX_INCLUDED", homeLight0.getDescription());
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertEquals((-694.0F), homeLight0.getGroundElevation(), 0.01F);
      assertTrue(homeLight0.isResizable());
      assertEquals(57.0F, homeLight0.getY(), 0.01F);
      assertEquals(0.19634955F, homeLight0.getX(), 0.01F);
      assertEquals(0.3926991F, homeLight0.getWidth(), 0.01F);
      assertNull(homeLight0.getShininess());
      assertTrue(homeLight0.isMovable());
      assertEquals("PRICE_VALUE_ADDED_TAX_INCLUDED", homeLight0.getName());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertTrue(homeLight1.isResizable());
      assertEquals(57.0F, homeLight1.getY(), 0.01F);
      assertEquals("PRICE_VALUE_ADDED_TAX_INCLUDED", homeLight1.getName());
      assertTrue(homeLight1.isMovable());
      assertEquals(0.0F, homeLight1.getNameAngle(), 0.01F);
      assertEquals(0.19634955F, homeLight1.getX(), 0.01F);
      assertNull(homeLight1.getStaircaseCutOutShape());
      assertNull(homeLight1.getShininess());
      assertTrue(homeLight1.isDeformable());
      assertTrue(homeLight1.isVisible());
      assertEquals(114.0F, homeLight1.getDepth(), 0.01F);
      assertEquals((-694.0F), homeLight1.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight1.getNameXOffset(), 0.01F);
      assertEquals("/", homeLight1.getCatalogId());
      assertEquals(0.0F, homeLight1.getAngle(), 0.01F);
      assertFalse(homeLight1.isNameVisible());
      assertEquals(233.10785F, homeLight1.getHeight(), 0.01F);
      assertTrue(homeLight1.isTexturable());
      assertEquals((-694.0F), homeLight1.getElevation(), 0.01F);
      assertFalse(homeLight1.isModelMirrored());
      assertFalse(homeLight1.isBackFaceShown());
      assertFalse(homeLight1.isDoorOrWindow());
      assertNull(homeLight1.getColor());
      assertEquals(0.0F, homeLight1.getNameYOffset(), 0.01F);
      assertEquals("PRICE_VALUE_ADDED_TAX_INCLUDED", homeLight1.getDescription());
      assertNull(homeLight1.getCurrency());
      assertEquals(0.3926991F, homeLight1.getWidth(), 0.01F);
      assertEquals(0.5F, homeLight1.getPower(), 0.01F);
      assertEquals(0.0F, homeLight2.getNameAngle(), 0.01F);
      assertNull(homeLight2.getStaircaseCutOutShape());
      assertEquals("PRICE_VALUE_ADDED_TAX_INCLUDED", homeLight2.getName());
      assertEquals(0.5F, homeLight2.getPower(), 0.01F);
      assertEquals(0.19634955F, homeLight2.getX(), 0.01F);
      assertTrue(homeLight2.isResizable());
      assertEquals(57.0F, homeLight2.getY(), 0.01F);
      assertNull(homeLight2.getShininess());
      assertTrue(homeLight2.isMovable());
      assertEquals(0.0F, homeLight2.getNameYOffset(), 0.01F);
      assertEquals(0.3926991F, homeLight2.getWidth(), 0.01F);
      assertEquals("PRICE_VALUE_ADDED_TAX_INCLUDED", homeLight2.getDescription());
      assertFalse(homeLight2.isNameVisible());
      assertNull(homeLight2.getColor());
      assertNull(homeLight2.getCurrency());
      assertTrue(homeLight2.isVisible());
      assertFalse(homeLight2.isModelMirrored());
      assertFalse(homeLight2.isBackFaceShown());
      assertEquals(114.0F, homeLight2.getDepth(), 0.01F);
      assertEquals((-694.0F), homeLight2.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight2.getAngle(), 0.01F);
      assertEquals("/", homeLight2.getCatalogId());
      assertTrue(homeLight2.isDeformable());
      assertFalse(homeLight2.isDoorOrWindow());
      assertTrue(homeLight2.isTexturable());
      assertEquals((-694.0F), homeLight2.getElevation(), 0.01F);
      assertEquals(233.10785F, homeLight2.getHeight(), 0.01F);
      assertEquals(0.0F, homeLight2.getNameXOffset(), 0.01F);
      assertEquals(2, lightSourceArray0.length);
      assertNotSame(homeLight0, homeLight1);
      assertNotSame(homeLight0, homeLight2);
      assertNotSame(homeLight1, homeLight2);
      assertNotSame(homeLight1, homeLight0);
      assertNotSame(homeLight2, homeLight1);
      assertNotSame(homeLight2, homeLight0);
      assertNotNull(homeLight2);
      
      homeLight1.setModelMirrored(true);
      assertFalse(homeLight0.equals((Object)homeLight1));
      assertFalse(homeLight0.equals((Object)homeLight2));
      assertFalse(homeLight1.equals((Object)homeLight2));
      assertFalse(homeLight1.equals((Object)homeLight0));
      assertEquals((short)10, bigDecimal0.shortValue());
      assertEquals((byte)10, bigDecimal0.byteValue());
      assertNull(catalogLight0.getCreationDate());
      assertEquals("{L", catalogLight0.getCreator());
      assertNull(catalogLight0.getColor());
      assertFalse(catalogLight0.isModifiable());
      assertEquals(233.10785F, catalogLight0.getHeight(), 0.01F);
      assertFalse(catalogLight0.isBackFaceShown());
      assertTrue(catalogLight0.isDeformable());
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertFalse(catalogLight0.isDoorOrWindow());
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertTrue(catalogLight0.isMovable());
      assertNull(catalogLight0.getGrade());
      assertEquals("PRICE_VALUE_ADDED_TAX_INCLUDED", catalogLight0.getDescription());
      assertEquals("PRICE_VALUE_ADDED_TAX_INCLUDED", catalogLight0.getName());
      assertNull(catalogLight0.getCurrency());
      assertEquals((-694.0F), catalogLight0.getElevation(), 0.01F);
      assertTrue(catalogLight0.isTexturable());
      assertEquals("/", catalogLight0.getId());
      assertTrue(catalogLight0.isProportional());
      assertNull(catalogLight0.getInformation());
      assertTrue(catalogLight0.isResizable());
      assertEquals(114.0F, catalogLight0.getDepth(), 0.01F);
      assertEquals(0.3926991F, catalogLight0.getWidth(), 0.01F);
      assertNull(homeLight0.getCurrency());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertEquals(114.0F, homeLight0.getDepth(), 0.01F);
      assertNull(homeLight0.getColor());
      assertTrue(homeLight0.isDeformable());
      assertTrue(homeLight0.isVisible());
      assertTrue(homeLight0.isTexturable());
      assertFalse(homeLight0.isModelMirrored());
      assertFalse(homeLight0.isBackFaceShown());
      assertFalse(homeLight0.isDoorOrWindow());
      assertEquals(233.10785F, homeLight0.getHeight(), 0.01F);
      assertEquals("/", homeLight0.getCatalogId());
      assertFalse(homeLight0.isNameVisible());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals((-694.0F), homeLight0.getElevation(), 0.01F);
      assertEquals("PRICE_VALUE_ADDED_TAX_INCLUDED", homeLight0.getDescription());
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertEquals((-694.0F), homeLight0.getGroundElevation(), 0.01F);
      assertTrue(homeLight0.isResizable());
      assertEquals(57.0F, homeLight0.getY(), 0.01F);
      assertEquals(0.19634955F, homeLight0.getX(), 0.01F);
      assertEquals(0.3926991F, homeLight0.getWidth(), 0.01F);
      assertNull(homeLight0.getShininess());
      assertTrue(homeLight0.isMovable());
      assertEquals("PRICE_VALUE_ADDED_TAX_INCLUDED", homeLight0.getName());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertTrue(homeLight1.isResizable());
      assertEquals(57.0F, homeLight1.getY(), 0.01F);
      assertEquals("PRICE_VALUE_ADDED_TAX_INCLUDED", homeLight1.getName());
      assertTrue(homeLight1.isMovable());
      assertEquals(0.0F, homeLight1.getNameAngle(), 0.01F);
      assertEquals(0.19634955F, homeLight1.getX(), 0.01F);
      assertNull(homeLight1.getStaircaseCutOutShape());
      assertNull(homeLight1.getShininess());
      assertTrue(homeLight1.isDeformable());
      assertTrue(homeLight1.isVisible());
      assertEquals(114.0F, homeLight1.getDepth(), 0.01F);
      assertEquals((-694.0F), homeLight1.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight1.getNameXOffset(), 0.01F);
      assertEquals("/", homeLight1.getCatalogId());
      assertEquals(0.0F, homeLight1.getAngle(), 0.01F);
      assertFalse(homeLight1.isNameVisible());
      assertEquals(233.10785F, homeLight1.getHeight(), 0.01F);
      assertTrue(homeLight1.isTexturable());
      assertEquals((-694.0F), homeLight1.getElevation(), 0.01F);
      assertFalse(homeLight1.isBackFaceShown());
      assertFalse(homeLight1.isDoorOrWindow());
      assertNull(homeLight1.getColor());
      assertTrue(homeLight1.isModelMirrored());
      assertEquals(0.0F, homeLight1.getNameYOffset(), 0.01F);
      assertEquals("PRICE_VALUE_ADDED_TAX_INCLUDED", homeLight1.getDescription());
      assertNull(homeLight1.getCurrency());
      assertEquals(0.3926991F, homeLight1.getWidth(), 0.01F);
      assertEquals(0.5F, homeLight1.getPower(), 0.01F);
      assertEquals(2, lightSourceArray0.length);
      assertNotSame(homeLight0, homeLight1);
      assertNotSame(homeLight0, homeLight2);
      assertNotSame(homeLight1, homeLight2);
      assertNotSame(homeLight1, homeLight0);
      
      homeLight0.setDescription("fU.#i`,XJ/02pTQ");
      assertFalse(homeLight0.equals((Object)homeLight1));
      assertFalse(homeLight0.equals((Object)homeLight2));
      assertEquals((short)10, bigDecimal0.shortValue());
      assertEquals((byte)10, bigDecimal0.byteValue());
      assertNull(catalogLight0.getCreationDate());
      assertEquals("{L", catalogLight0.getCreator());
      assertNull(catalogLight0.getColor());
      assertFalse(catalogLight0.isModifiable());
      assertEquals(233.10785F, catalogLight0.getHeight(), 0.01F);
      assertFalse(catalogLight0.isBackFaceShown());
      assertTrue(catalogLight0.isDeformable());
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertFalse(catalogLight0.isDoorOrWindow());
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertTrue(catalogLight0.isMovable());
      assertNull(catalogLight0.getGrade());
      assertEquals("PRICE_VALUE_ADDED_TAX_INCLUDED", catalogLight0.getDescription());
      assertEquals("PRICE_VALUE_ADDED_TAX_INCLUDED", catalogLight0.getName());
      assertNull(catalogLight0.getCurrency());
      assertEquals((-694.0F), catalogLight0.getElevation(), 0.01F);
      assertTrue(catalogLight0.isTexturable());
      assertEquals("/", catalogLight0.getId());
      assertTrue(catalogLight0.isProportional());
      assertNull(catalogLight0.getInformation());
      assertTrue(catalogLight0.isResizable());
      assertEquals(114.0F, catalogLight0.getDepth(), 0.01F);
      assertEquals(0.3926991F, catalogLight0.getWidth(), 0.01F);
      assertNull(homeLight0.getCurrency());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertEquals(114.0F, homeLight0.getDepth(), 0.01F);
      assertNull(homeLight0.getColor());
      assertTrue(homeLight0.isDeformable());
      assertTrue(homeLight0.isVisible());
      assertTrue(homeLight0.isTexturable());
      assertFalse(homeLight0.isModelMirrored());
      assertFalse(homeLight0.isBackFaceShown());
      assertFalse(homeLight0.isDoorOrWindow());
      assertEquals(233.10785F, homeLight0.getHeight(), 0.01F);
      assertEquals("/", homeLight0.getCatalogId());
      assertFalse(homeLight0.isNameVisible());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals((-694.0F), homeLight0.getElevation(), 0.01F);
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertEquals("fU.#i`,XJ/02pTQ", homeLight0.getDescription());
      assertEquals((-694.0F), homeLight0.getGroundElevation(), 0.01F);
      assertTrue(homeLight0.isResizable());
      assertEquals(57.0F, homeLight0.getY(), 0.01F);
      assertEquals(0.19634955F, homeLight0.getX(), 0.01F);
      assertEquals(0.3926991F, homeLight0.getWidth(), 0.01F);
      assertNull(homeLight0.getShininess());
      assertTrue(homeLight0.isMovable());
      assertEquals("PRICE_VALUE_ADDED_TAX_INCLUDED", homeLight0.getName());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals(2, lightSourceArray0.length);
      assertNotSame(homeLight0, homeLight1);
      assertNotSame(homeLight0, homeLight2);
      
      HomeLight homeLight3 = (HomeLight)homeLight1.clone();
      assertFalse(homeLight0.equals((Object)homeLight1));
      assertFalse(homeLight0.equals((Object)homeLight2));
      assertFalse(homeLight1.equals((Object)homeLight2));
      assertFalse(homeLight1.equals((Object)homeLight0));
      assertFalse(homeLight3.equals((Object)homeLight2));
      assertFalse(homeLight3.equals((Object)homeLight0));
      assertFalse(homeLight3.equals((Object)homeLight1));
      assertEquals((short)10, bigDecimal0.shortValue());
      assertEquals((byte)10, bigDecimal0.byteValue());
      assertNull(catalogLight0.getCreationDate());
      assertEquals("{L", catalogLight0.getCreator());
      assertNull(catalogLight0.getColor());
      assertFalse(catalogLight0.isModifiable());
      assertEquals(233.10785F, catalogLight0.getHeight(), 0.01F);
      assertFalse(catalogLight0.isBackFaceShown());
      assertTrue(catalogLight0.isDeformable());
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertFalse(catalogLight0.isDoorOrWindow());
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertTrue(catalogLight0.isMovable());
      assertNull(catalogLight0.getGrade());
      assertEquals("PRICE_VALUE_ADDED_TAX_INCLUDED", catalogLight0.getDescription());
      assertEquals("PRICE_VALUE_ADDED_TAX_INCLUDED", catalogLight0.getName());
      assertNull(catalogLight0.getCurrency());
      assertEquals((-694.0F), catalogLight0.getElevation(), 0.01F);
      assertTrue(catalogLight0.isTexturable());
      assertEquals("/", catalogLight0.getId());
      assertTrue(catalogLight0.isProportional());
      assertNull(catalogLight0.getInformation());
      assertTrue(catalogLight0.isResizable());
      assertEquals(114.0F, catalogLight0.getDepth(), 0.01F);
      assertEquals(0.3926991F, catalogLight0.getWidth(), 0.01F);
      assertNull(homeLight0.getCurrency());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertEquals(114.0F, homeLight0.getDepth(), 0.01F);
      assertNull(homeLight0.getColor());
      assertTrue(homeLight0.isDeformable());
      assertTrue(homeLight0.isVisible());
      assertTrue(homeLight0.isTexturable());
      assertFalse(homeLight0.isModelMirrored());
      assertFalse(homeLight0.isBackFaceShown());
      assertFalse(homeLight0.isDoorOrWindow());
      assertEquals(233.10785F, homeLight0.getHeight(), 0.01F);
      assertEquals("/", homeLight0.getCatalogId());
      assertFalse(homeLight0.isNameVisible());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals((-694.0F), homeLight0.getElevation(), 0.01F);
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertEquals("fU.#i`,XJ/02pTQ", homeLight0.getDescription());
      assertEquals((-694.0F), homeLight0.getGroundElevation(), 0.01F);
      assertTrue(homeLight0.isResizable());
      assertEquals(57.0F, homeLight0.getY(), 0.01F);
      assertEquals(0.19634955F, homeLight0.getX(), 0.01F);
      assertEquals(0.3926991F, homeLight0.getWidth(), 0.01F);
      assertNull(homeLight0.getShininess());
      assertTrue(homeLight0.isMovable());
      assertEquals("PRICE_VALUE_ADDED_TAX_INCLUDED", homeLight0.getName());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertTrue(homeLight1.isResizable());
      assertEquals(57.0F, homeLight1.getY(), 0.01F);
      assertEquals("PRICE_VALUE_ADDED_TAX_INCLUDED", homeLight1.getName());
      assertTrue(homeLight1.isMovable());
      assertEquals(0.0F, homeLight1.getNameAngle(), 0.01F);
      assertEquals(0.19634955F, homeLight1.getX(), 0.01F);
      assertNull(homeLight1.getStaircaseCutOutShape());
      assertNull(homeLight1.getShininess());
      assertTrue(homeLight1.isDeformable());
      assertTrue(homeLight1.isVisible());
      assertEquals(114.0F, homeLight1.getDepth(), 0.01F);
      assertEquals((-694.0F), homeLight1.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight1.getNameXOffset(), 0.01F);
      assertEquals("/", homeLight1.getCatalogId());
      assertEquals(0.0F, homeLight1.getAngle(), 0.01F);
      assertFalse(homeLight1.isNameVisible());
      assertEquals(233.10785F, homeLight1.getHeight(), 0.01F);
      assertTrue(homeLight1.isTexturable());
      assertEquals((-694.0F), homeLight1.getElevation(), 0.01F);
      assertFalse(homeLight1.isBackFaceShown());
      assertFalse(homeLight1.isDoorOrWindow());
      assertNull(homeLight1.getColor());
      assertTrue(homeLight1.isModelMirrored());
      assertEquals(0.0F, homeLight1.getNameYOffset(), 0.01F);
      assertEquals("PRICE_VALUE_ADDED_TAX_INCLUDED", homeLight1.getDescription());
      assertNull(homeLight1.getCurrency());
      assertEquals(0.3926991F, homeLight1.getWidth(), 0.01F);
      assertEquals(0.5F, homeLight1.getPower(), 0.01F);
      assertNull(homeLight3.getCurrency());
      assertEquals(0.0F, homeLight3.getNameYOffset(), 0.01F);
      assertFalse(homeLight3.isNameVisible());
      assertTrue(homeLight3.isVisible());
      assertTrue(homeLight3.isModelMirrored());
      assertTrue(homeLight3.isDeformable());
      assertEquals("/", homeLight3.getCatalogId());
      assertEquals(114.0F, homeLight3.getDepth(), 0.01F);
      assertFalse(homeLight3.isBackFaceShown());
      assertTrue(homeLight3.isTexturable());
      assertFalse(homeLight3.isDoorOrWindow());
      assertNull(homeLight3.getShininess());
      assertTrue(homeLight3.isResizable());
      assertEquals(0.0F, homeLight3.getAngle(), 0.01F);
      assertEquals((-694.0F), homeLight3.getGroundElevation(), 0.01F);
      assertEquals(233.10785F, homeLight3.getHeight(), 0.01F);
      assertEquals((-694.0F), homeLight3.getElevation(), 0.01F);
      assertEquals(0.0F, homeLight3.getNameXOffset(), 0.01F);
      assertEquals(0.19634955F, homeLight3.getX(), 0.01F);
      assertEquals("PRICE_VALUE_ADDED_TAX_INCLUDED", homeLight3.getName());
      assertEquals(0.0F, homeLight3.getNameAngle(), 0.01F);
      assertNull(homeLight3.getStaircaseCutOutShape());
      assertTrue(homeLight3.isMovable());
      assertEquals(0.3926991F, homeLight3.getWidth(), 0.01F);
      assertEquals(57.0F, homeLight3.getY(), 0.01F);
      assertNull(homeLight3.getColor());
      assertEquals(0.5F, homeLight3.getPower(), 0.01F);
      assertEquals("PRICE_VALUE_ADDED_TAX_INCLUDED", homeLight3.getDescription());
      assertEquals(2, lightSourceArray0.length);
      assertNotSame(homeLight0, homeLight3);
      assertNotSame(homeLight0, homeLight1);
      assertNotSame(homeLight0, homeLight2);
      assertNotSame(homeLight1, homeLight2);
      assertNotSame(homeLight1, homeLight3);
      assertNotSame(homeLight1, homeLight0);
      assertNotSame(homeLight3, homeLight2);
      assertNotSame(homeLight3, homeLight0);
      assertNotSame(homeLight3, homeLight1);
      assertNotNull(homeLight3);
      
      float float0 = homeLight0.getWidth();
      assertFalse(homeLight0.equals((Object)homeLight3));
      assertFalse(homeLight0.equals((Object)homeLight1));
      assertFalse(homeLight0.equals((Object)homeLight2));
      assertEquals((short)10, bigDecimal0.shortValue());
      assertEquals((byte)10, bigDecimal0.byteValue());
      assertNull(catalogLight0.getCreationDate());
      assertEquals("{L", catalogLight0.getCreator());
      assertNull(catalogLight0.getColor());
      assertFalse(catalogLight0.isModifiable());
      assertEquals(233.10785F, catalogLight0.getHeight(), 0.01F);
      assertFalse(catalogLight0.isBackFaceShown());
      assertTrue(catalogLight0.isDeformable());
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertFalse(catalogLight0.isDoorOrWindow());
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertTrue(catalogLight0.isMovable());
      assertNull(catalogLight0.getGrade());
      assertEquals("PRICE_VALUE_ADDED_TAX_INCLUDED", catalogLight0.getDescription());
      assertEquals("PRICE_VALUE_ADDED_TAX_INCLUDED", catalogLight0.getName());
      assertNull(catalogLight0.getCurrency());
      assertEquals((-694.0F), catalogLight0.getElevation(), 0.01F);
      assertTrue(catalogLight0.isTexturable());
      assertEquals("/", catalogLight0.getId());
      assertTrue(catalogLight0.isProportional());
      assertNull(catalogLight0.getInformation());
      assertTrue(catalogLight0.isResizable());
      assertEquals(114.0F, catalogLight0.getDepth(), 0.01F);
      assertEquals(0.3926991F, catalogLight0.getWidth(), 0.01F);
      assertNull(homeLight0.getCurrency());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertEquals(114.0F, homeLight0.getDepth(), 0.01F);
      assertNull(homeLight0.getColor());
      assertTrue(homeLight0.isDeformable());
      assertTrue(homeLight0.isVisible());
      assertTrue(homeLight0.isTexturable());
      assertFalse(homeLight0.isModelMirrored());
      assertFalse(homeLight0.isBackFaceShown());
      assertFalse(homeLight0.isDoorOrWindow());
      assertEquals(233.10785F, homeLight0.getHeight(), 0.01F);
      assertEquals("/", homeLight0.getCatalogId());
      assertFalse(homeLight0.isNameVisible());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals((-694.0F), homeLight0.getElevation(), 0.01F);
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertEquals("fU.#i`,XJ/02pTQ", homeLight0.getDescription());
      assertEquals((-694.0F), homeLight0.getGroundElevation(), 0.01F);
      assertTrue(homeLight0.isResizable());
      assertEquals(57.0F, homeLight0.getY(), 0.01F);
      assertEquals(0.19634955F, homeLight0.getX(), 0.01F);
      assertEquals(0.3926991F, homeLight0.getWidth(), 0.01F);
      assertNull(homeLight0.getShininess());
      assertTrue(homeLight0.isMovable());
      assertEquals("PRICE_VALUE_ADDED_TAX_INCLUDED", homeLight0.getName());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals(2, lightSourceArray0.length);
      assertNotSame(homeLight0, homeLight3);
      assertNotSame(homeLight0, homeLight1);
      assertNotSame(homeLight0, homeLight2);
      assertEquals(0.3926991F, float0, 0.01F);
      
      boolean boolean1 = homeLight0.isModelMirrored();
      assertFalse(homeLight0.equals((Object)homeLight3));
      assertFalse(homeLight0.equals((Object)homeLight1));
      assertFalse(homeLight0.equals((Object)homeLight2));
      assertTrue(boolean1 == boolean0);
      assertEquals((short)10, bigDecimal0.shortValue());
      assertEquals((byte)10, bigDecimal0.byteValue());
      assertNull(catalogLight0.getCreationDate());
      assertEquals("{L", catalogLight0.getCreator());
      assertNull(catalogLight0.getColor());
      assertFalse(catalogLight0.isModifiable());
      assertEquals(233.10785F, catalogLight0.getHeight(), 0.01F);
      assertFalse(catalogLight0.isBackFaceShown());
      assertTrue(catalogLight0.isDeformable());
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertFalse(catalogLight0.isDoorOrWindow());
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertTrue(catalogLight0.isMovable());
      assertNull(catalogLight0.getGrade());
      assertEquals("PRICE_VALUE_ADDED_TAX_INCLUDED", catalogLight0.getDescription());
      assertEquals("PRICE_VALUE_ADDED_TAX_INCLUDED", catalogLight0.getName());
      assertNull(catalogLight0.getCurrency());
      assertEquals((-694.0F), catalogLight0.getElevation(), 0.01F);
      assertTrue(catalogLight0.isTexturable());
      assertEquals("/", catalogLight0.getId());
      assertTrue(catalogLight0.isProportional());
      assertNull(catalogLight0.getInformation());
      assertTrue(catalogLight0.isResizable());
      assertEquals(114.0F, catalogLight0.getDepth(), 0.01F);
      assertEquals(0.3926991F, catalogLight0.getWidth(), 0.01F);
      assertNull(homeLight0.getCurrency());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertEquals(114.0F, homeLight0.getDepth(), 0.01F);
      assertNull(homeLight0.getColor());
      assertTrue(homeLight0.isDeformable());
      assertTrue(homeLight0.isVisible());
      assertTrue(homeLight0.isTexturable());
      assertFalse(homeLight0.isModelMirrored());
      assertFalse(homeLight0.isBackFaceShown());
      assertFalse(homeLight0.isDoorOrWindow());
      assertEquals(233.10785F, homeLight0.getHeight(), 0.01F);
      assertEquals("/", homeLight0.getCatalogId());
      assertFalse(homeLight0.isNameVisible());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals((-694.0F), homeLight0.getElevation(), 0.01F);
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertEquals("fU.#i`,XJ/02pTQ", homeLight0.getDescription());
      assertEquals((-694.0F), homeLight0.getGroundElevation(), 0.01F);
      assertTrue(homeLight0.isResizable());
      assertEquals(57.0F, homeLight0.getY(), 0.01F);
      assertEquals(0.19634955F, homeLight0.getX(), 0.01F);
      assertEquals(0.3926991F, homeLight0.getWidth(), 0.01F);
      assertNull(homeLight0.getShininess());
      assertTrue(homeLight0.isMovable());
      assertEquals("PRICE_VALUE_ADDED_TAX_INCLUDED", homeLight0.getName());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals(2, lightSourceArray0.length);
      assertNotSame(homeLight0, homeLight3);
      assertNotSame(homeLight0, homeLight1);
      assertNotSame(homeLight0, homeLight2);
      assertFalse(boolean1);
      
      boolean boolean2 = homeLight3.isNameCenterPointAt((-893.0428F), 0.0F, 407.5F);
      assertFalse(homeLight0.equals((Object)homeLight3));
      assertFalse(homeLight0.equals((Object)homeLight1));
      assertFalse(homeLight0.equals((Object)homeLight2));
      assertFalse(homeLight1.equals((Object)homeLight2));
      assertFalse(homeLight1.equals((Object)homeLight3));
      assertFalse(homeLight1.equals((Object)homeLight0));
      assertFalse(homeLight3.equals((Object)homeLight2));
      assertFalse(homeLight3.equals((Object)homeLight0));
      assertFalse(homeLight3.equals((Object)homeLight1));
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      assertEquals((short)10, bigDecimal0.shortValue());
      assertEquals((byte)10, bigDecimal0.byteValue());
      assertNull(catalogLight0.getCreationDate());
      assertEquals("{L", catalogLight0.getCreator());
      assertNull(catalogLight0.getColor());
      assertFalse(catalogLight0.isModifiable());
      assertEquals(233.10785F, catalogLight0.getHeight(), 0.01F);
      assertFalse(catalogLight0.isBackFaceShown());
      assertTrue(catalogLight0.isDeformable());
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertFalse(catalogLight0.isDoorOrWindow());
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertTrue(catalogLight0.isMovable());
      assertNull(catalogLight0.getGrade());
      assertEquals("PRICE_VALUE_ADDED_TAX_INCLUDED", catalogLight0.getDescription());
      assertEquals("PRICE_VALUE_ADDED_TAX_INCLUDED", catalogLight0.getName());
      assertNull(catalogLight0.getCurrency());
      assertEquals((-694.0F), catalogLight0.getElevation(), 0.01F);
      assertTrue(catalogLight0.isTexturable());
      assertEquals("/", catalogLight0.getId());
      assertTrue(catalogLight0.isProportional());
      assertNull(catalogLight0.getInformation());
      assertTrue(catalogLight0.isResizable());
      assertEquals(114.0F, catalogLight0.getDepth(), 0.01F);
      assertEquals(0.3926991F, catalogLight0.getWidth(), 0.01F);
      assertNull(homeLight0.getCurrency());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertEquals(114.0F, homeLight0.getDepth(), 0.01F);
      assertNull(homeLight0.getColor());
      assertTrue(homeLight0.isDeformable());
      assertTrue(homeLight0.isVisible());
      assertTrue(homeLight0.isTexturable());
      assertFalse(homeLight0.isModelMirrored());
      assertFalse(homeLight0.isBackFaceShown());
      assertFalse(homeLight0.isDoorOrWindow());
      assertEquals(233.10785F, homeLight0.getHeight(), 0.01F);
      assertEquals("/", homeLight0.getCatalogId());
      assertFalse(homeLight0.isNameVisible());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals((-694.0F), homeLight0.getElevation(), 0.01F);
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertEquals("fU.#i`,XJ/02pTQ", homeLight0.getDescription());
      assertEquals((-694.0F), homeLight0.getGroundElevation(), 0.01F);
      assertTrue(homeLight0.isResizable());
      assertEquals(57.0F, homeLight0.getY(), 0.01F);
      assertEquals(0.19634955F, homeLight0.getX(), 0.01F);
      assertEquals(0.3926991F, homeLight0.getWidth(), 0.01F);
      assertNull(homeLight0.getShininess());
      assertTrue(homeLight0.isMovable());
      assertEquals("PRICE_VALUE_ADDED_TAX_INCLUDED", homeLight0.getName());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertTrue(homeLight1.isResizable());
      assertEquals(57.0F, homeLight1.getY(), 0.01F);
      assertEquals("PRICE_VALUE_ADDED_TAX_INCLUDED", homeLight1.getName());
      assertTrue(homeLight1.isMovable());
      assertEquals(0.0F, homeLight1.getNameAngle(), 0.01F);
      assertEquals(0.19634955F, homeLight1.getX(), 0.01F);
      assertNull(homeLight1.getStaircaseCutOutShape());
      assertNull(homeLight1.getShininess());
      assertTrue(homeLight1.isDeformable());
      assertTrue(homeLight1.isVisible());
      assertEquals(114.0F, homeLight1.getDepth(), 0.01F);
      assertEquals((-694.0F), homeLight1.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight1.getNameXOffset(), 0.01F);
      assertEquals("/", homeLight1.getCatalogId());
      assertEquals(0.0F, homeLight1.getAngle(), 0.01F);
      assertFalse(homeLight1.isNameVisible());
      assertEquals(233.10785F, homeLight1.getHeight(), 0.01F);
      assertTrue(homeLight1.isTexturable());
      assertEquals((-694.0F), homeLight1.getElevation(), 0.01F);
      assertFalse(homeLight1.isBackFaceShown());
      assertFalse(homeLight1.isDoorOrWindow());
      assertNull(homeLight1.getColor());
      assertTrue(homeLight1.isModelMirrored());
      assertEquals(0.0F, homeLight1.getNameYOffset(), 0.01F);
      assertEquals("PRICE_VALUE_ADDED_TAX_INCLUDED", homeLight1.getDescription());
      assertNull(homeLight1.getCurrency());
      assertEquals(0.3926991F, homeLight1.getWidth(), 0.01F);
      assertEquals(0.5F, homeLight1.getPower(), 0.01F);
      assertNull(homeLight3.getCurrency());
      assertEquals(0.0F, homeLight3.getNameYOffset(), 0.01F);
      assertFalse(homeLight3.isNameVisible());
      assertTrue(homeLight3.isVisible());
      assertTrue(homeLight3.isModelMirrored());
      assertTrue(homeLight3.isDeformable());
      assertEquals("/", homeLight3.getCatalogId());
      assertEquals(114.0F, homeLight3.getDepth(), 0.01F);
      assertFalse(homeLight3.isBackFaceShown());
      assertTrue(homeLight3.isTexturable());
      assertFalse(homeLight3.isDoorOrWindow());
      assertNull(homeLight3.getShininess());
      assertTrue(homeLight3.isResizable());
      assertEquals(0.0F, homeLight3.getAngle(), 0.01F);
      assertEquals((-694.0F), homeLight3.getGroundElevation(), 0.01F);
      assertEquals(233.10785F, homeLight3.getHeight(), 0.01F);
      assertEquals((-694.0F), homeLight3.getElevation(), 0.01F);
      assertEquals(0.0F, homeLight3.getNameXOffset(), 0.01F);
      assertEquals(0.19634955F, homeLight3.getX(), 0.01F);
      assertEquals("PRICE_VALUE_ADDED_TAX_INCLUDED", homeLight3.getName());
      assertEquals(0.0F, homeLight3.getNameAngle(), 0.01F);
      assertNull(homeLight3.getStaircaseCutOutShape());
      assertTrue(homeLight3.isMovable());
      assertEquals(0.3926991F, homeLight3.getWidth(), 0.01F);
      assertEquals(57.0F, homeLight3.getY(), 0.01F);
      assertNull(homeLight3.getColor());
      assertEquals(0.5F, homeLight3.getPower(), 0.01F);
      assertEquals("PRICE_VALUE_ADDED_TAX_INCLUDED", homeLight3.getDescription());
      assertEquals(2, lightSourceArray0.length);
      assertNotSame(homeLight0, homeLight3);
      assertNotSame(homeLight0, homeLight1);
      assertNotSame(homeLight0, homeLight2);
      assertNotSame(homeLight1, homeLight2);
      assertNotSame(homeLight1, homeLight3);
      assertNotSame(homeLight1, homeLight0);
      assertNotSame(homeLight3, homeLight2);
      assertNotSame(homeLight3, homeLight0);
      assertNotSame(homeLight3, homeLight1);
      assertFalse(boolean2);
  }

  @Test(timeout = 4000)
  public void test182()  throws Throwable  {
      LightSource[] lightSourceArray0 = new LightSource[2];
      BigDecimal bigDecimal0 = BigDecimal.TEN;
      CatalogLight catalogLight0 = new CatalogLight("/", "/", "/", (Content) null, (Content) null, 0.3926991F, 92.121765F, 233.10785F, (-815.0011F), true, lightSourceArray0, (float[][]) null, "{L", true, bigDecimal0, bigDecimal0);
      catalogLight0.getCategory();
      catalogLight0.setCategory((FurnitureCategory) null);
      HomeLight homeLight0 = new HomeLight(catalogLight0);
      homeLight0.getIcon();
      HomeLight homeLight1 = homeLight0.clone();
      homeLight1.setWidth(0.5F);
      homeLight0.setDescription("/");
      homeLight1.setModelMirrored(true);
      HomeLight homeLight2 = homeLight1.clone();
      homeLight2.isTopRightPointAt((-1.0F), (-1.0F), 1130.1677F);
      homeLight0.getModelRotation();
  }

  @Test(timeout = 4000)
  public void test183()  throws Throwable  {
      LightSource[] lightSourceArray0 = new LightSource[2];
      BigDecimal bigDecimal0 = BigDecimal.TEN;
      CatalogLight catalogLight0 = new CatalogLight("", "", "", (Content) null, (Content) null, 23.119429F, 1.1803F, 2278.261F, 550.0F, true, lightSourceArray0, (float[][]) null, "", true, bigDecimal0, bigDecimal0);
      HomeLight homeLight0 = new HomeLight(catalogLight0);
      HomeLight homeLight1 = homeLight0.clone();
      homeLight0.clone();
      HomeLight homeLight2 = new HomeLight(homeLight1);
      homeLight2.setName("");
      homeLight0.getTexture();
      HomeLight homeLight3 = new HomeLight(homeLight2);
      HomeLight homeLight4 = homeLight3.clone();
      homeLight4.setTexture((HomeTexture) null);
      LinkedList<HomePieceOfFurniture> linkedList0 = new LinkedList<HomePieceOfFurniture>();
      linkedList0.add((HomePieceOfFurniture) homeLight2);
      HomeFurnitureGroup homeFurnitureGroup0 = new HomeFurnitureGroup(linkedList0, "");
      HomeFurnitureGroup homeFurnitureGroup1 = homeFurnitureGroup0.clone();
      homeFurnitureGroup1.clone();
      homeLight2.getShininess();
      Float float0 = new Float((-694.0F));
      homeLight2.setShininess(float0);
      Integer integer0 = new Integer(965);
      homeLight3.setColor(integer0);
      HomePieceOfFurniture.Property.values();
  }

  @Test(timeout = 4000)
  public void test184()  throws Throwable  {
      LightSource[] lightSourceArray0 = new LightSource[2];
      BigDecimal bigDecimal0 = BigDecimal.ZERO;
      CatalogLight catalogLight0 = new CatalogLight("/", "PRICE_VALUE_ADDED_TAX_INCLUDED", "PRICE_VALUE_ADDED_TAX_INCLUDED", (Content) null, (Content) null, 0.3926991F, 92.121765F, 233.10785F, (-727.8896F), true, lightSourceArray0, (float[][]) null, "{L", true, bigDecimal0, bigDecimal0);
      HomeLight homeLight0 = new HomeLight(catalogLight0);
      catalogLight0.getCategory();
      catalogLight0.setCategory((FurnitureCategory) null);
      homeLight0.isPointAt((-2278.261F), 92.121765F, 0.18478903F);
      homeLight0.setName("PRICE_VALUE_ADDED_TAX_INCLUDED");
      homeLight0.setModelMirrored(true);
      homeLight0.setModelMirrored(true);
      homeLight0.isBottomLeftPointAt(0.3926991F, 92.121765F, (-815.0011F));
      Integer integer0 = new Integer(8192);
      Integer integer1 = new Integer(3037);
      catalogLight0.setCategory((FurnitureCategory) null);
      Integer integer2 = new Integer(46);
      homeLight0.setColor(integer2);
      homeLight0.getIcon();
      homeLight0.getColor();
  }

  @Test(timeout = 4000)
  public void test185()  throws Throwable  {
      LightSource[] lightSourceArray0 = new LightSource[2];
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      LightSource lightSource0 = new LightSource((-815.0F), 0.28356954F, 0.28356954F, 114);
      LightSource lightSource1 = new LightSource(2965.994F, (-1.0F), (-127.62969F), 114);
      BigDecimal bigDecimal0 = BigDecimal.ZERO;
      CatalogLight catalogLight0 = new CatalogLight("h&*+\"", "h&*+\"", "h&*+\"", (Content) null, (Content) null, 0.28356954F, 0.28356954F, 2965.994F, (-694.0F), false, lightSourceArray0, (float[][]) null, "ELEVATION", true, bigDecimal0, bigDecimal0);
      HomeLight homeLight0 = new HomeLight(catalogLight0);
      homeLight0.setY((-127.62969F));
      HomeLight homeLight1 = homeLight0.clone();
      homeLight0.setHeight(1.0F);
      homeLight0.isNameCenterPointAt(1658.0F, 1.0F, 1457.5319F);
      homeLight0.setNameYOffset((-2818.0F));
      homeLight1.setMovable(false);
      HomeLight homeLight2 = homeLight0.clone();
      homeLight2.getValueAddedTaxPercentage();
  }

  @Test(timeout = 4000)
  public void test186()  throws Throwable  {
      LightSource[] lightSourceArray0 = new LightSource[2];
      LightSource lightSource0 = new LightSource((-815.0011F), 0.0F, 0.0F, (-1541));
      lightSourceArray0[0] = lightSource0;
      LightSource lightSource1 = new LightSource((-1541), (-2278.261F), (-727.8896F), (-1541));
      BigDecimal bigDecimal0 = BigDecimal.TEN;
      CatalogLight catalogLight0 = new CatalogLight("/", "/", "/", (Content) null, (Content) null, 0.3926991F, 92.121765F, 233.10785F, (-727.8896F), true, lightSourceArray0, (float[][]) null, "{L", true, bigDecimal0, bigDecimal0);
      HomeLight homeLight0 = new HomeLight(catalogLight0);
      catalogLight0.getCategory();
      catalogLight0.setCategory((FurnitureCategory) null);
      HomeLight homeLight1 = homeLight0.clone();
      homeLight1.clone();
      HomeLight homeLight2 = new HomeLight(catalogLight0);
      homeLight2.getIcon();
      homeLight1.setNameVisible(true);
      HomeLight homeLight3 = homeLight2.clone();
      homeLight3.setWidth(0.5F);
      homeLight1.getName();
      Float float0 = new Float((-1.0));
      homeLight3.setShininess(float0);
      homeLight3.getCatalogId();
      homeLight3.isBottomRightPointAt(0.5F, 0.0F, 4.3852863F);
  }

  @Test(timeout = 4000)
  public void test187()  throws Throwable  {
      LightSource[] lightSourceArray0 = new LightSource[2];
      LightSource lightSource0 = new LightSource((-694.0F), 2965.994F, (-127.62969F), 114);
      BigDecimal bigDecimal0 = BigDecimal.TEN;
      String[] stringArray0 = new String[5];
      stringArray0[0] = "`/A7D9=/f;))qi2GSd";
      stringArray0[1] = "h&*+\"";
      stringArray0[2] = "`/A7D9=/f;))qi2GSd";
      stringArray0[3] = "`/A7D9=/f;))qi2GSd";
      stringArray0[4] = "h&*+\"";
      Long long0 = new Long(1710L);
      Sash[] sashArray0 = new Sash[8];
      Sash sash0 = new Sash(2278.261F, (-907.41046F), 114, 1710L, 719.992F);
      sashArray0[0] = sash0;
      Sash sash1 = new Sash(1641.0F, 1707.7522F, 3241.9F, (-407.24136F), 852.9418F);
      sashArray0[1] = sash1;
      Sash sash2 = new Sash(369.5F, 2.0F, (-407.24136F), (-815.0011F), 58.4F);
      sashArray0[2] = sash2;
      Sash sash3 = new Sash(0.3926991F, 1657.8582F, 1657.8582F, 2190.695F, (-379.0F));
      sashArray0[3] = sash3;
      Sash sash4 = new Sash(2190.695F, 3.4028235E38F, 3.4028235E38F, 1707.7522F, (-407.24136F));
      sashArray0[4] = sash4;
      Sash sash5 = new Sash(719.992F, 0.3926991F, 0.0F, 3241.9F, (-2898.4568F));
      sashArray0[5] = sash5;
      Sash sash6 = new Sash((-1558.0F), (-127.62969F), 2965.994F, 1.0F, 1594.536F);
      sashArray0[6] = sash6;
      Sash sash7 = new Sash((-379.0F), (-2898.4568F), 1.0F, 1710L, 2.0F);
      sashArray0[7] = sash7;
      CatalogDoorOrWindow catalogDoorOrWindow0 = new CatalogDoorOrWindow("h&*+\"", "`/A7D9=/f;))qi2GSd", "`/A7D9=/f;))qi2GSd", "`/A7D9=/f;))qi2GSd", stringArray0, long0, (Float) null, (Content) null, (Content) null, (Content) null, (-2137.838F), 114, 1710L, (-379.0F), true, 1641.0F, (-694.0F), sashArray0, (float[][]) null, "K}>Ox^oi O20", true, false, false, bigDecimal0, bigDecimal0, "K}>Ox^oi O20");
      HomeDoorOrWindow homeDoorOrWindow0 = new HomeDoorOrWindow(catalogDoorOrWindow0);
      HomeDoorOrWindow homeDoorOrWindow1 = homeDoorOrWindow0.clone();
      homeDoorOrWindow1.getCurrency();
  }

  @Test(timeout = 4000)
  public void test188()  throws Throwable  {
      LightSource[] lightSourceArray0 = new LightSource[2];
      LightSource lightSource0 = new LightSource((-815.0F), 0.0F, 0.0F, 114);
      lightSourceArray0[0] = lightSource0;
      LightSource lightSource1 = new LightSource((-694.0F), 2965.994F, (-127.62969F), 0);
      lightSourceArray0[1] = lightSource1;
      BigDecimal bigDecimal0 = BigDecimal.ZERO;
      CatalogLight catalogLight0 = new CatalogLight("h&*+\"", "h&*+\"", "h&*+\"", (Content) null, (Content) null, (-815.0F), 0.3926991F, (-694.0F), (-694.0F), true, lightSourceArray0, (float[][]) null, "h&*+\"", true, bigDecimal0, bigDecimal0);
      HomeLight homeLight0 = new HomeLight(catalogLight0);
      homeLight0.setY((-127.62969F));
      HomeLight homeLight1 = homeLight0.clone();
      HomePieceOfFurniture homePieceOfFurniture0 = homeLight1.clone();
      homePieceOfFurniture0.setModelMirrored(true);
      homeLight1.setVisible(false);
      HomePieceOfFurniture.SortableProperty.values();
      homePieceOfFurniture0.isMovable();
      homeLight0.getHeight();
  }

  @Test(timeout = 4000)
  public void test189()  throws Throwable  {
      LightSource[] lightSourceArray0 = new LightSource[12];
      HomePieceOfFurniture.SortableProperty homePieceOfFurniture_SortableProperty0 = HomePieceOfFurniture.SortableProperty.X;
      HomePieceOfFurniture.getFurnitureComparator(homePieceOfFurniture_SortableProperty0);
  }

  @Test(timeout = 4000)
  public void test190()  throws Throwable  {
      LightSource[] lightSourceArray0 = new LightSource[2];
      LightSource lightSource0 = new LightSource((-815.0011F), 0.0F, 0.0F, (-1534));
      lightSourceArray0[0] = lightSource0;
      BigDecimal bigDecimal0 = BigDecimal.TEN;
      Sash[] sashArray0 = new Sash[8];
      Sash sash0 = new Sash(0.0F, 0.0F, (-1826.01F), 189.56955F, (-815.0011F));
      sashArray0[0] = sash0;
      Sash sash1 = new Sash(3.4028235E38F, (-1826.01F), 2.0F, 897.77673F, 591.6563F);
      sashArray0[1] = sash1;
      Sash sash2 = new Sash(1.8129913F, (-1826.01F), 350.54F, (-1534), (-407.50055F));
      sashArray0[2] = sash2;
      Sash sash3 = new Sash(1.0F, 591.6563F, (-407.50055F), 591.6563F, 4868.502F);
      sashArray0[3] = sash3;
      Sash sash4 = new Sash(189.56955F, (-2409.9097F), 1.8129913F, 1733.1006F, (-1826.01F));
      sashArray0[4] = sash4;
      Sash sash5 = new Sash((-1807.5238F), 591.6563F, 407.5551F, (-2527.7F), (-1.0F));
      sashArray0[5] = sash5;
      Sash sash6 = new Sash((-101.0F), 1733.1006F, 897.77673F, 1218.8F, (-2409.9097F));
      sashArray0[6] = sash6;
      Sash sash7 = new Sash((-0.016631484F), 0.0F, (-1534), 4868.502F, 2.0F);
      sashArray0[7] = sash7;
      CatalogDoorOrWindow catalogDoorOrWindow0 = new CatalogDoorOrWindow((String) null, "", (String) null, (Content) null, (Content) null, (Content) null, 897.77673F, 1.8129913F, 591.6563F, (-815.0011F), true, (-1534), (-815.0011F), sashArray0, (float[][]) null, "3t6$]'5L", true, true, false, bigDecimal0, bigDecimal0, "");
      HomeDoorOrWindow homeDoorOrWindow0 = new HomeDoorOrWindow(catalogDoorOrWindow0);
      HomePieceOfFurniture homePieceOfFurniture0 = homeDoorOrWindow0.clone();
      homePieceOfFurniture0.getCatalogId();
  }

  @Test(timeout = 4000)
  public void test191()  throws Throwable  {
      LightSource[] lightSourceArray0 = new LightSource[2];
      LightSource lightSource0 = new LightSource((-815.0F), 0.0F, 0.0F, 114);
      lightSourceArray0[0] = lightSource0;
      LightSource lightSource1 = new LightSource((-694.0F), 0.36957806F, (-127.62969F), 0);
      lightSourceArray0[1] = lightSource1;
      BigDecimal bigDecimal0 = BigDecimal.TEN;
      CatalogLight catalogLight0 = new CatalogLight("h&*+\"", "h&*+\"", "h&*+\"", (Content) null, (Content) null, (-815.0F), 0.36957806F, (-694.0F), (-694.0F), true, lightSourceArray0, (float[][]) null, "h&*+\"", true, bigDecimal0, bigDecimal0);
      HomeLight homeLight0 = new HomeLight(catalogLight0);
      HomeLight homeLight1 = homeLight0.clone();
      HomePieceOfFurniture homePieceOfFurniture0 = homeLight1.clone();
      homeLight1.isPointAt(114, (-815.0F), 114);
      homePieceOfFurniture0.setModelMirrored(true);
      homeLight0.getCurrency();
  }

  @Test(timeout = 4000)
  public void test192()  throws Throwable  {
      LightSource[] lightSourceArray0 = new LightSource[2];
      LightSource lightSource0 = new LightSource((-815.0F), 0.0F, 0.0F, 114);
      lightSourceArray0[0] = lightSource0;
      LightSource lightSource1 = new LightSource((-694.0F), 2965.994F, (-127.62969F), 0);
      lightSourceArray0[1] = lightSource1;
      BigDecimal bigDecimal0 = BigDecimal.TEN;
      Sash[] sashArray0 = new Sash[1];
      Sash sash0 = new Sash(2965.994F, 2965.994F, 2965.994F, 1.0F, 0.3926991F);
      sashArray0[0] = sash0;
      float[][] floatArray0 = new float[7][1];
      float[] floatArray1 = new float[3];
      floatArray1[0] = 0.0F;
      floatArray1[1] = 1.0F;
      floatArray1[2] = 1.0F;
      floatArray0[0] = floatArray1;
      float[] floatArray2 = new float[4];
      floatArray2[0] = (-127.62969F);
      floatArray2[1] = (-815.0F);
      floatArray2[2] = (float) 0;
      floatArray2[3] = 1.0F;
      floatArray0[1] = floatArray2;
      float[] floatArray3 = new float[4];
      floatArray3[0] = 0.0F;
      floatArray3[1] = 0.5F;
      floatArray3[2] = (-815.0F);
      floatArray3[3] = 2965.994F;
      floatArray0[2] = floatArray3;
      float[] floatArray4 = new float[8];
      floatArray4[0] = 2965.994F;
      floatArray4[1] = 0.3926991F;
      floatArray4[2] = (float) 114;
      floatArray4[3] = (-127.62969F);
      floatArray4[4] = (-100.48457F);
      floatArray4[5] = 0.5F;
      floatArray4[6] = 0.3926991F;
      floatArray4[7] = (-157.231F);
      floatArray0[3] = floatArray4;
      float[] floatArray5 = new float[0];
      floatArray0[4] = floatArray5;
      float[] floatArray6 = new float[9];
      floatArray6[0] = 2965.994F;
      floatArray6[1] = 1.0F;
      floatArray6[2] = (-1182.203F);
      floatArray6[3] = 1.0F;
      floatArray6[4] = (-815.0F);
      floatArray6[5] = (-815.0F);
      floatArray6[6] = 0.5F;
      floatArray6[7] = (float) 0;
      floatArray6[8] = 1.0F;
      floatArray0[5] = floatArray6;
      float[] floatArray7 = new float[0];
      floatArray0[6] = floatArray7;
      CatalogDoorOrWindow catalogDoorOrWindow0 = new CatalogDoorOrWindow("h&*+\"", "U1rzI(", "tb[qQKj[^1<?C5TrtL", (Content) null, (Content) null, (Content) null, 0.0F, (-100.48457F), (-815.0F), (-5775.283F), false, 2965.994F, (-815.0F), sashArray0, floatArray0, "h&*+\"", true, true, true, bigDecimal0, bigDecimal0);
      HomeDoorOrWindow homeDoorOrWindow0 = new HomeDoorOrWindow(catalogDoorOrWindow0);
      HomeDoorOrWindow homeDoorOrWindow1 = homeDoorOrWindow0.clone();
      HomePieceOfFurniture homePieceOfFurniture0 = homeDoorOrWindow1.clone();
      PropertyChangeListener propertyChangeListener0 = mock(PropertyChangeListener.class, new ViolatedAssumptionAnswer());
      PropertyChangeListenerProxy propertyChangeListenerProxy0 = new PropertyChangeListenerProxy("com.eteks.sweethome3d.model.HomePieceOfFurniture$10", propertyChangeListener0);
      homePieceOfFurniture0.removePropertyChangeListener(propertyChangeListenerProxy0);
  }

  @Test(timeout = 4000)
  public void test193()  throws Throwable  {
      LightSource[] lightSourceArray0 = new LightSource[2];
      LightSource lightSource0 = new LightSource((-815.0F), 0.0F, 0.0F, 114);
      lightSourceArray0[0] = lightSource0;
      LightSource lightSource1 = new LightSource(407.5F, 0.36957806F, 0.36957806F, 114);
      lightSourceArray0[1] = lightSource1;
      BigDecimal bigDecimal0 = BigDecimal.TEN;
      CatalogLight catalogLight0 = new CatalogLight("h&9+\"", "h&9+\"", "h&9+\"", (Content) null, (Content) null, (-815.0F), 0.36957806F, 407.5F, 407.5F, true, lightSourceArray0, (float[][]) null, "h&9+\"", true, bigDecimal0, bigDecimal0);
      HomeLight homeLight0 = new HomeLight(catalogLight0);
      HomeLight homeLight1 = homeLight0.clone();
      homeLight0.setNameAngle((-215.5262F));
      HomeLight homeLight2 = homeLight0.clone();
      HomePieceOfFurniture homePieceOfFurniture0 = new HomePieceOfFurniture(homeLight1);
      HomePieceOfFurniture homePieceOfFurniture1 = homePieceOfFurniture0.clone();
      homePieceOfFurniture1.setModelMirrored(false);
      homeLight2.isBottomLeftPointAt((-2702.1F), (-2614.449F), (-815.0F));
      homeLight2.isBottomLeftPointAt(272.196F, 2886.24F, 127.62969F);
      homeLight2.clone();
      homeLight2.getHeight();
      homeLight2.isResizable();
      Random.setNextRandom((-55));
  }

  @Test(timeout = 4000)
  public void test194()  throws Throwable  {
      LightSource[] lightSourceArray0 = new LightSource[2];
      LightSource lightSource0 = new LightSource((-694.0F), 2965.994F, (-127.62969F), 114);
      BigDecimal bigDecimal0 = BigDecimal.TEN;
      CatalogLight catalogLight0 = new CatalogLight("h&*+\"", "h&*+\"", "h&*+\"", (Content) null, (Content) null, (-815.0F), 0.3926991F, (-694.0F), (-694.0F), true, lightSourceArray0, (float[][]) null, "h&*+\"", true, bigDecimal0, bigDecimal0);
      HomeLight homeLight0 = new HomeLight(catalogLight0);
      HomeLight homeLight1 = homeLight0.clone();
      HomePieceOfFurniture homePieceOfFurniture0 = homeLight1.clone();
      homePieceOfFurniture0.isNameCenterPointAt(1002.0F, (-127.62969F), 1707.7522F);
      homePieceOfFurniture0.setY((-694.0F));
      homePieceOfFurniture0.getGroundElevation();
      homePieceOfFurniture0.getDepth();
      homeLight1.setNameAngle((-694.0F));
      homePieceOfFurniture0.getModelRotation();
  }

  @Test(timeout = 4000)
  public void test195()  throws Throwable  {
      LightSource[] lightSourceArray0 = new LightSource[2];
      LightSource lightSource0 = new LightSource((-815.0F), 0.0F, 0.0F, 114);
      lightSourceArray0[0] = lightSource0;
      LightSource lightSource1 = new LightSource((-694.0F), 2965.994F, (-127.62969F), 0);
      LightSource lightSource2 = new LightSource(0.19634955F, 0.3926991F, 2377.285F, (-489));
      BigDecimal bigDecimal0 = BigDecimal.TEN;
      CatalogLight catalogLight0 = new CatalogLight("com.eteks.sweethome3d.model.HomePieceOfFurniture$SortableProperty", "com.eteks.sweethome3d.model.HomePieceOfFurniture$SortableProperty", "com.eteks.sweethome3d.model.HomePieceOfFurniture$SortableProperty", (Content) null, (Content) null, 0.0F, 824.0F, 114.0F, 114.0F, true, lightSourceArray0, (float[][]) null, "a_pL[@4vw^sg3iloUNr", false, bigDecimal0, bigDecimal0);
      HomeLight homeLight0 = new HomeLight(catalogLight0);
      HomeLight homeLight1 = homeLight0.clone();
      bigDecimal0.intValueExact();
      homeLight0.clone();
      homeLight0.setName("a_pL[@4vw^sg3iloUNr");
      homeLight1.isPointAt(1599.0F, 0.0F, (-694.0F));
      // Undeclared exception!
      try { 
        homeLight0.setModelMirrored(true);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Piece isn't resizable
         //
         verifyException("com.eteks.sweethome3d.model.HomePieceOfFurniture", e);
      }
  }

  @Test(timeout = 4000)
  public void test196()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte) (-107);
      byteArray0[2] = (byte)77;
      byteArray0[3] = (byte)88;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      LightSource[] lightSourceArray0 = new LightSource[2];
      LightSource lightSource0 = new LightSource((-694.0F), 2965.994F, (-127.62969F), 0);
      lightSourceArray0[1] = lightSource0;
      BigDecimal bigDecimal0 = BigDecimal.TEN;
      URL uRL0 = MockURL.getFtpExample();
      TemporaryURLContent temporaryURLContent0 = new TemporaryURLContent(uRL0);
      Sash[] sashArray0 = new Sash[0];
      CatalogDoorOrWindow catalogDoorOrWindow0 = new CatalogDoorOrWindow("h&*+\"", "", "", temporaryURLContent0, temporaryURLContent0, temporaryURLContent0, (byte)88, (-694.0F), (-479.28F), 0.0F, false, 0.3926991F, 0, sashArray0, (float[][]) null, "", false, false, false, bigDecimal0, bigDecimal0);
      CatalogLight catalogLight0 = new CatalogLight("", "", "", (Content) null, temporaryURLContent0, (Content) null, (-2165.0F), 1191.5F, (byte) (-107), 1.0F, false, lightSourceArray0, (float[][]) null, "h&*+\"", false, false, true, bigDecimal0, bigDecimal0);
      catalogDoorOrWindow0.compareTo((CatalogPieceOfFurniture) catalogLight0);
      HomeDoorOrWindow homeDoorOrWindow0 = new HomeDoorOrWindow(catalogDoorOrWindow0);
      HomePieceOfFurniture homePieceOfFurniture0 = homeDoorOrWindow0.clone();
      homePieceOfFurniture0.addPropertyChangeListener((PropertyChangeListener) null);
  }

  @Test(timeout = 4000)
  public void test197()  throws Throwable  {
      LightSource[] lightSourceArray0 = new LightSource[12];
      BigDecimal bigDecimal0 = BigDecimal.TEN;
      CatalogLight catalogLight0 = new CatalogLight("h&*+\"", "h&*+\"", "h&*+\"", (Content) null, (Content) null, 587.23944F, 587.23944F, (-694.0F), (-694.0F), true, lightSourceArray0, (float[][]) null, "h&*+\"", true, bigDecimal0, bigDecimal0);
      HomeLight homeLight0 = new HomeLight(catalogLight0);
      HomeLight homeLight1 = new HomeLight(homeLight0);
      homeLight1.getTexture();
      homeLight1.getGroundElevation();
      HomeLight homeLight2 = new HomeLight(homeLight1);
      homeLight2.setName("h&*+\"");
      homeLight0.setModelMirrored(true);
      homeLight0.setNameAngle(587.23944F);
  }

  @Test(timeout = 4000)
  public void test198()  throws Throwable  {
      LightSource[] lightSourceArray0 = new LightSource[2];
      LightSource lightSource0 = new LightSource((-815.0F), 0.0F, 0.0F, 114);
      lightSourceArray0[0] = lightSource0;
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      LightSource lightSource1 = new LightSource((-694.0F), 2965.994F, (-127.62969F), 0);
      BigDecimal bigDecimal0 = BigDecimal.TEN;
      CatalogLight catalogLight0 = new CatalogLight("h&*+\"", "h&*+\"", "h&*+\"", (Content) null, (Content) null, (-815.0F), 0.3926991F, (-694.0F), (-694.0F), true, lightSourceArray0, (float[][]) null, "h&*+\"", true, bigDecimal0, bigDecimal0);
      HomeLight homeLight0 = new HomeLight(catalogLight0);
      HomePieceOfFurniture homePieceOfFurniture0 = new HomePieceOfFurniture(homeLight0);
      homeLight0.clone();
      BigInteger bigInteger0 = BigInteger.ONE;
      BigDecimal bigDecimal1 = new BigDecimal(bigInteger0);
      MathContext mathContext0 = MathContext.DECIMAL32;
      bigDecimal0.multiply(bigDecimal1, mathContext0);
      homeLight0.setModelMirrored(true);
      homePieceOfFurniture0.move(0.0F, 0.0F);
      homeLight0.isBottomLeftPointAt(0.3926991F, (-140.02371F), 1.0F);
  }

  @Test(timeout = 4000)
  public void test199()  throws Throwable  {
      LightSource[] lightSourceArray0 = new LightSource[8];
      BigDecimal bigDecimal0 = BigDecimal.TEN;
      assertEquals((byte)10, bigDecimal0.byteValue());
      assertEquals((short)10, bigDecimal0.shortValue());
      assertNotNull(bigDecimal0);
      
      CatalogLight catalogLight0 = new CatalogLight("h&*+\"", "h&*+\"", "h&*+\"", (Content) null, (Content) null, 587.23944F, 587.23944F, 587.23944F, 587.23944F, true, lightSourceArray0, (float[][]) null, "h&*+\"", true, bigDecimal0, bigDecimal0);
      assertEquals((byte)10, bigDecimal0.byteValue());
      assertEquals((short)10, bigDecimal0.shortValue());
      assertFalse(catalogLight0.isModifiable());
      assertEquals(587.23944F, catalogLight0.getWidth(), 0.01F);
      assertNull(catalogLight0.getColor());
      assertEquals(587.23944F, catalogLight0.getHeight(), 0.01F);
      assertTrue(catalogLight0.isProportional());
      assertNull(catalogLight0.getGrade());
      assertFalse(catalogLight0.isDoorOrWindow());
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertEquals(587.23944F, catalogLight0.getElevation(), 0.01F);
      assertTrue(catalogLight0.isTexturable());
      assertEquals(587.23944F, catalogLight0.getDepth(), 0.01F);
      assertNull(catalogLight0.getInformation());
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertTrue(catalogLight0.isDeformable());
      assertTrue(catalogLight0.isResizable());
      assertTrue(catalogLight0.isMovable());
      assertEquals("h&*+\"", catalogLight0.getName());
      assertFalse(catalogLight0.isBackFaceShown());
      assertNull(catalogLight0.getCreationDate());
      assertEquals("h&*+\"", catalogLight0.getId());
      assertEquals("h&*+\"", catalogLight0.getCreator());
      assertEquals("h&*+\"", catalogLight0.getDescription());
      assertNull(catalogLight0.getCurrency());
      assertEquals(8, lightSourceArray0.length);
      assertNotNull(catalogLight0);
      
      HomeLight homeLight0 = new HomeLight(catalogLight0);
      assertEquals((byte)10, bigDecimal0.byteValue());
      assertEquals((short)10, bigDecimal0.shortValue());
      assertFalse(catalogLight0.isModifiable());
      assertEquals(587.23944F, catalogLight0.getWidth(), 0.01F);
      assertNull(catalogLight0.getColor());
      assertEquals(587.23944F, catalogLight0.getHeight(), 0.01F);
      assertTrue(catalogLight0.isProportional());
      assertNull(catalogLight0.getGrade());
      assertFalse(catalogLight0.isDoorOrWindow());
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertEquals(587.23944F, catalogLight0.getElevation(), 0.01F);
      assertTrue(catalogLight0.isTexturable());
      assertEquals(587.23944F, catalogLight0.getDepth(), 0.01F);
      assertNull(catalogLight0.getInformation());
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertTrue(catalogLight0.isDeformable());
      assertTrue(catalogLight0.isResizable());
      assertTrue(catalogLight0.isMovable());
      assertEquals("h&*+\"", catalogLight0.getName());
      assertFalse(catalogLight0.isBackFaceShown());
      assertNull(catalogLight0.getCreationDate());
      assertEquals("h&*+\"", catalogLight0.getId());
      assertEquals("h&*+\"", catalogLight0.getCreator());
      assertEquals("h&*+\"", catalogLight0.getDescription());
      assertNull(catalogLight0.getCurrency());
      assertEquals("h&*+\"", homeLight0.getCatalogId());
      assertNull(homeLight0.getShininess());
      assertTrue(homeLight0.isMovable());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertEquals(587.23944F, homeLight0.getWidth(), 0.01F);
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertTrue(homeLight0.isResizable());
      assertTrue(homeLight0.isDeformable());
      assertEquals(587.23944F, homeLight0.getHeight(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals("h&*+\"", homeLight0.getDescription());
      assertEquals("h&*+\"", homeLight0.getName());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertFalse(homeLight0.isNameVisible());
      assertEquals(587.23944F, homeLight0.getDepth(), 0.01F);
      assertEquals(587.23944F, homeLight0.getGroundElevation(), 0.01F);
      assertTrue(homeLight0.isTexturable());
      assertEquals(293.61972F, homeLight0.getX(), 0.01F);
      assertFalse(homeLight0.isModelMirrored());
      assertFalse(homeLight0.isBackFaceShown());
      assertEquals(293.61972F, homeLight0.getY(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      assertEquals(587.23944F, homeLight0.getElevation(), 0.01F);
      assertNull(homeLight0.getColor());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertTrue(homeLight0.isVisible());
      assertNull(homeLight0.getCurrency());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals(8, lightSourceArray0.length);
      assertNotNull(homeLight0);
      
      HomeLight homeLight1 = homeLight0.clone();
      assertFalse(homeLight1.equals((Object)homeLight0));
      assertEquals((byte)10, bigDecimal0.byteValue());
      assertEquals((short)10, bigDecimal0.shortValue());
      assertFalse(catalogLight0.isModifiable());
      assertEquals(587.23944F, catalogLight0.getWidth(), 0.01F);
      assertNull(catalogLight0.getColor());
      assertEquals(587.23944F, catalogLight0.getHeight(), 0.01F);
      assertTrue(catalogLight0.isProportional());
      assertNull(catalogLight0.getGrade());
      assertFalse(catalogLight0.isDoorOrWindow());
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertEquals(587.23944F, catalogLight0.getElevation(), 0.01F);
      assertTrue(catalogLight0.isTexturable());
      assertEquals(587.23944F, catalogLight0.getDepth(), 0.01F);
      assertNull(catalogLight0.getInformation());
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertTrue(catalogLight0.isDeformable());
      assertTrue(catalogLight0.isResizable());
      assertTrue(catalogLight0.isMovable());
      assertEquals("h&*+\"", catalogLight0.getName());
      assertFalse(catalogLight0.isBackFaceShown());
      assertNull(catalogLight0.getCreationDate());
      assertEquals("h&*+\"", catalogLight0.getId());
      assertEquals("h&*+\"", catalogLight0.getCreator());
      assertEquals("h&*+\"", catalogLight0.getDescription());
      assertNull(catalogLight0.getCurrency());
      assertEquals("h&*+\"", homeLight0.getCatalogId());
      assertNull(homeLight0.getShininess());
      assertTrue(homeLight0.isMovable());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertEquals(587.23944F, homeLight0.getWidth(), 0.01F);
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertTrue(homeLight0.isResizable());
      assertTrue(homeLight0.isDeformable());
      assertEquals(587.23944F, homeLight0.getHeight(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals("h&*+\"", homeLight0.getDescription());
      assertEquals("h&*+\"", homeLight0.getName());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertFalse(homeLight0.isNameVisible());
      assertEquals(587.23944F, homeLight0.getDepth(), 0.01F);
      assertEquals(587.23944F, homeLight0.getGroundElevation(), 0.01F);
      assertTrue(homeLight0.isTexturable());
      assertEquals(293.61972F, homeLight0.getX(), 0.01F);
      assertFalse(homeLight0.isModelMirrored());
      assertFalse(homeLight0.isBackFaceShown());
      assertEquals(293.61972F, homeLight0.getY(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      assertEquals(587.23944F, homeLight0.getElevation(), 0.01F);
      assertNull(homeLight0.getColor());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertTrue(homeLight0.isVisible());
      assertNull(homeLight0.getCurrency());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals(587.23944F, homeLight1.getDepth(), 0.01F);
      assertEquals(0.0F, homeLight1.getNameXOffset(), 0.01F);
      assertEquals(587.23944F, homeLight1.getElevation(), 0.01F);
      assertNull(homeLight1.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight1.getNameAngle(), 0.01F);
      assertFalse(homeLight1.isModelMirrored());
      assertTrue(homeLight1.isMovable());
      assertEquals("h&*+\"", homeLight1.getCatalogId());
      assertNull(homeLight1.getColor());
      assertEquals(0.5F, homeLight1.getPower(), 0.01F);
      assertNull(homeLight1.getCurrency());
      assertTrue(homeLight1.isDeformable());
      assertTrue(homeLight1.isVisible());
      assertEquals(587.23944F, homeLight1.getWidth(), 0.01F);
      assertEquals(0.0F, homeLight1.getNameYOffset(), 0.01F);
      assertFalse(homeLight1.isNameVisible());
      assertEquals(293.61972F, homeLight1.getY(), 0.01F);
      assertFalse(homeLight1.isBackFaceShown());
      assertNull(homeLight1.getShininess());
      assertEquals(293.61972F, homeLight1.getX(), 0.01F);
      assertEquals(587.23944F, homeLight1.getGroundElevation(), 0.01F);
      assertTrue(homeLight1.isResizable());
      assertEquals("h&*+\"", homeLight1.getName());
      assertEquals(587.23944F, homeLight1.getHeight(), 0.01F);
      assertEquals(0.0F, homeLight1.getAngle(), 0.01F);
      assertTrue(homeLight1.isTexturable());
      assertFalse(homeLight1.isDoorOrWindow());
      assertEquals("h&*+\"", homeLight1.getDescription());
      assertEquals(8, lightSourceArray0.length);
      assertNotSame(homeLight0, homeLight1);
      assertNotSame(homeLight1, homeLight0);
      assertNotNull(homeLight1);
      
      boolean boolean0 = homeLight1.isNameCenterPointAt(1.0F, 1.0F, 587.23944F);
      assertFalse(homeLight0.equals((Object)homeLight1));
      assertFalse(homeLight1.equals((Object)homeLight0));
      assertEquals((byte)10, bigDecimal0.byteValue());
      assertEquals((short)10, bigDecimal0.shortValue());
      assertFalse(catalogLight0.isModifiable());
      assertEquals(587.23944F, catalogLight0.getWidth(), 0.01F);
      assertNull(catalogLight0.getColor());
      assertEquals(587.23944F, catalogLight0.getHeight(), 0.01F);
      assertTrue(catalogLight0.isProportional());
      assertNull(catalogLight0.getGrade());
      assertFalse(catalogLight0.isDoorOrWindow());
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertEquals(587.23944F, catalogLight0.getElevation(), 0.01F);
      assertTrue(catalogLight0.isTexturable());
      assertEquals(587.23944F, catalogLight0.getDepth(), 0.01F);
      assertNull(catalogLight0.getInformation());
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertTrue(catalogLight0.isDeformable());
      assertTrue(catalogLight0.isResizable());
      assertTrue(catalogLight0.isMovable());
      assertEquals("h&*+\"", catalogLight0.getName());
      assertFalse(catalogLight0.isBackFaceShown());
      assertNull(catalogLight0.getCreationDate());
      assertEquals("h&*+\"", catalogLight0.getId());
      assertEquals("h&*+\"", catalogLight0.getCreator());
      assertEquals("h&*+\"", catalogLight0.getDescription());
      assertNull(catalogLight0.getCurrency());
      assertEquals("h&*+\"", homeLight0.getCatalogId());
      assertNull(homeLight0.getShininess());
      assertTrue(homeLight0.isMovable());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertEquals(587.23944F, homeLight0.getWidth(), 0.01F);
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertTrue(homeLight0.isResizable());
      assertTrue(homeLight0.isDeformable());
      assertEquals(587.23944F, homeLight0.getHeight(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals("h&*+\"", homeLight0.getDescription());
      assertEquals("h&*+\"", homeLight0.getName());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertFalse(homeLight0.isNameVisible());
      assertEquals(587.23944F, homeLight0.getDepth(), 0.01F);
      assertEquals(587.23944F, homeLight0.getGroundElevation(), 0.01F);
      assertTrue(homeLight0.isTexturable());
      assertEquals(293.61972F, homeLight0.getX(), 0.01F);
      assertFalse(homeLight0.isModelMirrored());
      assertFalse(homeLight0.isBackFaceShown());
      assertEquals(293.61972F, homeLight0.getY(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      assertEquals(587.23944F, homeLight0.getElevation(), 0.01F);
      assertNull(homeLight0.getColor());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertTrue(homeLight0.isVisible());
      assertNull(homeLight0.getCurrency());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals(587.23944F, homeLight1.getDepth(), 0.01F);
      assertEquals(0.0F, homeLight1.getNameXOffset(), 0.01F);
      assertEquals(587.23944F, homeLight1.getElevation(), 0.01F);
      assertNull(homeLight1.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight1.getNameAngle(), 0.01F);
      assertFalse(homeLight1.isModelMirrored());
      assertTrue(homeLight1.isMovable());
      assertEquals("h&*+\"", homeLight1.getCatalogId());
      assertNull(homeLight1.getColor());
      assertEquals(0.5F, homeLight1.getPower(), 0.01F);
      assertNull(homeLight1.getCurrency());
      assertTrue(homeLight1.isDeformable());
      assertTrue(homeLight1.isVisible());
      assertEquals(587.23944F, homeLight1.getWidth(), 0.01F);
      assertEquals(0.0F, homeLight1.getNameYOffset(), 0.01F);
      assertFalse(homeLight1.isNameVisible());
      assertEquals(293.61972F, homeLight1.getY(), 0.01F);
      assertFalse(homeLight1.isBackFaceShown());
      assertNull(homeLight1.getShininess());
      assertEquals(293.61972F, homeLight1.getX(), 0.01F);
      assertEquals(587.23944F, homeLight1.getGroundElevation(), 0.01F);
      assertTrue(homeLight1.isResizable());
      assertEquals("h&*+\"", homeLight1.getName());
      assertEquals(587.23944F, homeLight1.getHeight(), 0.01F);
      assertEquals(0.0F, homeLight1.getAngle(), 0.01F);
      assertTrue(homeLight1.isTexturable());
      assertFalse(homeLight1.isDoorOrWindow());
      assertEquals("h&*+\"", homeLight1.getDescription());
      assertEquals(8, lightSourceArray0.length);
      assertNotSame(homeLight0, homeLight1);
      assertNotSame(homeLight1, homeLight0);
      assertTrue(boolean0);
      
      Float float0 = new Float((double) 587.23944F);
      assertNotNull(float0);
      assertEquals(587.23944F, (float)float0, 0.01F);
      
      HomePieceOfFurniture.Property[] homePieceOfFurniture_PropertyArray0 = HomePieceOfFurniture.Property.values();
      assertEquals(21, homePieceOfFurniture_PropertyArray0.length);
      assertNotNull(homePieceOfFurniture_PropertyArray0);
      
      homeLight0.setNameVisible(false);
      assertFalse(homeLight0.equals((Object)homeLight1));
      assertEquals((byte)10, bigDecimal0.byteValue());
      assertEquals((short)10, bigDecimal0.shortValue());
      assertFalse(catalogLight0.isModifiable());
      assertEquals(587.23944F, catalogLight0.getWidth(), 0.01F);
      assertNull(catalogLight0.getColor());
      assertEquals(587.23944F, catalogLight0.getHeight(), 0.01F);
      assertTrue(catalogLight0.isProportional());
      assertNull(catalogLight0.getGrade());
      assertFalse(catalogLight0.isDoorOrWindow());
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertEquals(587.23944F, catalogLight0.getElevation(), 0.01F);
      assertTrue(catalogLight0.isTexturable());
      assertEquals(587.23944F, catalogLight0.getDepth(), 0.01F);
      assertNull(catalogLight0.getInformation());
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertTrue(catalogLight0.isDeformable());
      assertTrue(catalogLight0.isResizable());
      assertTrue(catalogLight0.isMovable());
      assertEquals("h&*+\"", catalogLight0.getName());
      assertFalse(catalogLight0.isBackFaceShown());
      assertNull(catalogLight0.getCreationDate());
      assertEquals("h&*+\"", catalogLight0.getId());
      assertEquals("h&*+\"", catalogLight0.getCreator());
      assertEquals("h&*+\"", catalogLight0.getDescription());
      assertNull(catalogLight0.getCurrency());
      assertEquals("h&*+\"", homeLight0.getCatalogId());
      assertNull(homeLight0.getShininess());
      assertTrue(homeLight0.isMovable());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertEquals(587.23944F, homeLight0.getWidth(), 0.01F);
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertTrue(homeLight0.isResizable());
      assertTrue(homeLight0.isDeformable());
      assertEquals(587.23944F, homeLight0.getHeight(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals("h&*+\"", homeLight0.getDescription());
      assertEquals("h&*+\"", homeLight0.getName());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertFalse(homeLight0.isNameVisible());
      assertEquals(587.23944F, homeLight0.getDepth(), 0.01F);
      assertEquals(587.23944F, homeLight0.getGroundElevation(), 0.01F);
      assertTrue(homeLight0.isTexturable());
      assertEquals(293.61972F, homeLight0.getX(), 0.01F);
      assertFalse(homeLight0.isModelMirrored());
      assertFalse(homeLight0.isBackFaceShown());
      assertEquals(293.61972F, homeLight0.getY(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      assertEquals(587.23944F, homeLight0.getElevation(), 0.01F);
      assertNull(homeLight0.getColor());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertTrue(homeLight0.isVisible());
      assertNull(homeLight0.getCurrency());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals(8, lightSourceArray0.length);
      assertNotSame(homeLight0, homeLight1);
      
      boolean boolean1 = homeLight1.isTopRightPointAt(597.89F, 587.23944F, 597.89F);
      assertFalse(homeLight0.equals((Object)homeLight1));
      assertFalse(homeLight1.equals((Object)homeLight0));
      assertFalse(boolean1 == boolean0);
      assertEquals((byte)10, bigDecimal0.byteValue());
      assertEquals((short)10, bigDecimal0.shortValue());
      assertFalse(catalogLight0.isModifiable());
      assertEquals(587.23944F, catalogLight0.getWidth(), 0.01F);
      assertNull(catalogLight0.getColor());
      assertEquals(587.23944F, catalogLight0.getHeight(), 0.01F);
      assertTrue(catalogLight0.isProportional());
      assertNull(catalogLight0.getGrade());
      assertFalse(catalogLight0.isDoorOrWindow());
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertEquals(587.23944F, catalogLight0.getElevation(), 0.01F);
      assertTrue(catalogLight0.isTexturable());
      assertEquals(587.23944F, catalogLight0.getDepth(), 0.01F);
      assertNull(catalogLight0.getInformation());
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertTrue(catalogLight0.isDeformable());
      assertTrue(catalogLight0.isResizable());
      assertTrue(catalogLight0.isMovable());
      assertEquals("h&*+\"", catalogLight0.getName());
      assertFalse(catalogLight0.isBackFaceShown());
      assertNull(catalogLight0.getCreationDate());
      assertEquals("h&*+\"", catalogLight0.getId());
      assertEquals("h&*+\"", catalogLight0.getCreator());
      assertEquals("h&*+\"", catalogLight0.getDescription());
      assertNull(catalogLight0.getCurrency());
      assertEquals("h&*+\"", homeLight0.getCatalogId());
      assertNull(homeLight0.getShininess());
      assertTrue(homeLight0.isMovable());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertEquals(587.23944F, homeLight0.getWidth(), 0.01F);
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertTrue(homeLight0.isResizable());
      assertTrue(homeLight0.isDeformable());
      assertEquals(587.23944F, homeLight0.getHeight(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals("h&*+\"", homeLight0.getDescription());
      assertEquals("h&*+\"", homeLight0.getName());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertFalse(homeLight0.isNameVisible());
      assertEquals(587.23944F, homeLight0.getDepth(), 0.01F);
      assertEquals(587.23944F, homeLight0.getGroundElevation(), 0.01F);
      assertTrue(homeLight0.isTexturable());
      assertEquals(293.61972F, homeLight0.getX(), 0.01F);
      assertFalse(homeLight0.isModelMirrored());
      assertFalse(homeLight0.isBackFaceShown());
      assertEquals(293.61972F, homeLight0.getY(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      assertEquals(587.23944F, homeLight0.getElevation(), 0.01F);
      assertNull(homeLight0.getColor());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertTrue(homeLight0.isVisible());
      assertNull(homeLight0.getCurrency());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals(587.23944F, homeLight1.getDepth(), 0.01F);
      assertEquals(0.0F, homeLight1.getNameXOffset(), 0.01F);
      assertEquals(587.23944F, homeLight1.getElevation(), 0.01F);
      assertNull(homeLight1.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight1.getNameAngle(), 0.01F);
      assertFalse(homeLight1.isModelMirrored());
      assertTrue(homeLight1.isMovable());
      assertEquals("h&*+\"", homeLight1.getCatalogId());
      assertNull(homeLight1.getColor());
      assertEquals(0.5F, homeLight1.getPower(), 0.01F);
      assertNull(homeLight1.getCurrency());
      assertTrue(homeLight1.isDeformable());
      assertTrue(homeLight1.isVisible());
      assertEquals(587.23944F, homeLight1.getWidth(), 0.01F);
      assertEquals(0.0F, homeLight1.getNameYOffset(), 0.01F);
      assertFalse(homeLight1.isNameVisible());
      assertEquals(293.61972F, homeLight1.getY(), 0.01F);
      assertFalse(homeLight1.isBackFaceShown());
      assertNull(homeLight1.getShininess());
      assertEquals(293.61972F, homeLight1.getX(), 0.01F);
      assertEquals(587.23944F, homeLight1.getGroundElevation(), 0.01F);
      assertTrue(homeLight1.isResizable());
      assertEquals("h&*+\"", homeLight1.getName());
      assertEquals(587.23944F, homeLight1.getHeight(), 0.01F);
      assertEquals(0.0F, homeLight1.getAngle(), 0.01F);
      assertTrue(homeLight1.isTexturable());
      assertFalse(homeLight1.isDoorOrWindow());
      assertEquals("h&*+\"", homeLight1.getDescription());
      assertEquals(8, lightSourceArray0.length);
      assertNotSame(homeLight0, homeLight1);
      assertNotSame(homeLight1, homeLight0);
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test200()  throws Throwable  {
      LightSource[] lightSourceArray0 = new LightSource[2];
      LightSource lightSource0 = new LightSource((-815.0F), 0.0F, 0.0F, 114);
      lightSourceArray0[0] = lightSource0;
      LightSource lightSource1 = new LightSource(407.5F, 0.36957806F, (-127.62969F), 0);
      lightSourceArray0[1] = lightSource1;
      BigDecimal bigDecimal0 = BigDecimal.TEN;
      CatalogLight catalogLight0 = new CatalogLight("h&9+\"", "h&9+\"", "h&9+\"", (Content) null, (Content) null, (-815.0F), 0.36957806F, 407.5F, 407.5F, true, lightSourceArray0, (float[][]) null, "h&9+\"", true, bigDecimal0, bigDecimal0);
      HomeLight homeLight0 = new HomeLight(catalogLight0);
      HomeLight homeLight1 = homeLight0.clone();
      homeLight0.setNameAngle((-215.5262F));
      HomeLight homeLight2 = homeLight0.clone();
      homeLight1.isPointAt(114, (-815.0F), 114);
      homeLight1.setName("h&9+\"");
      homeLight2.setModelMirrored(true);
      homeLight0.isBottomLeftPointAt(0, 407.5F, 407.5F);
  }

  @Test(timeout = 4000)
  public void test201()  throws Throwable  {
      LightSource[] lightSourceArray0 = new LightSource[12];
      BigDecimal bigDecimal0 = BigDecimal.TEN;
      CatalogLight catalogLight0 = new CatalogLight("h&*+\"", "h&*+\"", "h&*+\"", (Content) null, (Content) null, 587.23944F, 587.23944F, 587.23944F, 587.23944F, true, lightSourceArray0, (float[][]) null, "h&*+\"", true, bigDecimal0, bigDecimal0);
      HomeLight homeLight0 = new HomeLight(catalogLight0);
      homeLight0.setDepth(587.23944F);
      homeLight0.getModelRotation();
      homeLight0.setNameVisible(true);
      // Undeclared exception!
      try { 
        HomePieceOfFurniture.SortableProperty.valueOf("h&*+\"");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant com.eteks.sweethome3d.model.HomePieceOfFurniture.SortableProperty.h&*+\"
         //
         verifyException("java.lang.Enum", e);
      }
  }

  @Test(timeout = 4000)
  public void test202()  throws Throwable  {
      LightSource[] lightSourceArray0 = new LightSource[5];
      BigDecimal bigDecimal0 = BigDecimal.TEN;
      CatalogLight catalogLight0 = new CatalogLight("/", "/", "/", (Content) null, (Content) null, 0.3926991F, 0.3926991F, 0.3926991F, (-815.0011F), true, lightSourceArray0, (float[][]) null, "/", true, bigDecimal0, bigDecimal0);
      HomeLight homeLight0 = new HomeLight(catalogLight0);
      homeLight0.setWidth(0.054564774F);
      homeLight0.isBottomLeftPointAt(0.054564774F, 0.054564774F, 0.3926991F);
  }

  @Test(timeout = 4000)
  public void test203()  throws Throwable  {
      float float0 = (-2265.2297F);
      LightSource[] lightSourceArray0 = new LightSource[1];
      BigDecimal bigDecimal0 = BigDecimal.ONE;
      CatalogLight catalogLight0 = new CatalogLight("h&i*+\"", "h&i*+\"", "h&i*+\"", (Content) null, (Content) null, (-2265.2297F), (-2265.2297F), (-2265.2297F), (-2265.2297F), false, lightSourceArray0, (float[][]) null, "h&i*+\"", false, bigDecimal0, bigDecimal0);
      HomeLight homeLight0 = new HomeLight(catalogLight0);
      // Undeclared exception!
      try { 
        homeLight0.setModelMirrored(true);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Piece isn't resizable
         //
         verifyException("com.eteks.sweethome3d.model.HomePieceOfFurniture", e);
      }
  }

  @Test(timeout = 4000)
  public void test204()  throws Throwable  {
      LightSource[] lightSourceArray0 = new LightSource[2];
      LightSource lightSource0 = new LightSource((-815.0F), 0.0F, 0.0F, 114);
      lightSourceArray0[0] = lightSource0;
      LightSource lightSource1 = new LightSource((-694.0F), 0.36957806F, (-127.62969F), 0);
      lightSourceArray0[1] = lightSource1;
      BigDecimal bigDecimal0 = BigDecimal.TEN;
      CatalogLight catalogLight0 = new CatalogLight("h&9+\"", "h&9+\"", "h&9+\"", (Content) null, (Content) null, (-815.0F), 0.36957806F, (-694.0F), (-694.0F), true, lightSourceArray0, (float[][]) null, "h&9+\"", true, bigDecimal0, bigDecimal0);
      HomeLight homeLight0 = new HomeLight(catalogLight0);
      HomeLight homeLight1 = homeLight0.clone();
      HomePieceOfFurniture homePieceOfFurniture0 = homeLight1.clone();
      homeLight1.isPointAt(114, (-815.0F), 114);
      homePieceOfFurniture0.setHeight((-38.0F));
      homeLight1.setName("h&9+\"");
      homePieceOfFurniture0.setModelMirrored(true);
      Level level0 = new Level("h&9+\"", (-694.0F), (-815.0F), 0.0F);
      Level level1 = level0.clone();
      homeLight0.setLevel(level1);
      homePieceOfFurniture0.isBackFaceShown();
      homeLight1.setX((-694.0F));
  }

  @Test(timeout = 4000)
  public void test205()  throws Throwable  {
      LightSource[] lightSourceArray0 = new LightSource[2];
      LightSource lightSource0 = new LightSource((-815.0F), 0.0F, 0.0F, 114);
      lightSourceArray0[0] = lightSource0;
      LightSource lightSource1 = new LightSource((-694.0F), 2965.994F, (-127.62969F), 0);
      lightSourceArray0[1] = lightSource1;
      BigDecimal bigDecimal0 = BigDecimal.ZERO;
      CatalogLight catalogLight0 = new CatalogLight("h&*+\"", "h&*+\"", "h&*+\"", (Content) null, (Content) null, (-815.0F), 0.3926991F, (-694.0F), (-694.0F), true, lightSourceArray0, (float[][]) null, "h&*+\"", true, bigDecimal0, bigDecimal0);
      HomeLight homeLight0 = new HomeLight(catalogLight0);
      homeLight0.setY((-127.62969F));
      HomeLight homeLight1 = homeLight0.clone();
      HomePieceOfFurniture homePieceOfFurniture0 = homeLight1.clone();
      homePieceOfFurniture0.setModelMirrored(true);
      HomePieceOfFurniture.SortableProperty.values();
      homePieceOfFurniture0.isMovable();
  }

  @Test(timeout = 4000)
  public void test206()  throws Throwable  {
      LightSource[] lightSourceArray0 = new LightSource[2];
      LightSource lightSource0 = new LightSource((-815.0F), 0.0F, 0.0F, 78);
      lightSourceArray0[0] = lightSource0;
      LightSource lightSource1 = new LightSource((-694.0F), 2965.994F, (-127.62969F), 0);
      lightSourceArray0[1] = lightSource1;
      BigDecimal bigDecimal0 = BigDecimal.TEN;
      CatalogLight catalogLight0 = new CatalogLight("h&*+\"", "h&*+\"", "h&*+\"", (Content) null, (Content) null, (-815.0F), 0.3926991F, (-694.0F), (-694.0F), true, lightSourceArray0, (float[][]) null, "h&*+\"", true, bigDecimal0, bigDecimal0);
      HomeLight homeLight0 = new HomeLight(catalogLight0);
      HomeLight homeLight1 = homeLight0.clone();
      HomeLight homeLight2 = homeLight1.clone();
      homeLight0.clone();
      homeLight1.setModelMirrored(true);
      HomeLight homeLight3 = homeLight0.clone();
      homeLight3.isNameCenterPointAt(3.4028235E38F, 0.5F, 1031.2587F);
      TextStyle textStyle0 = new TextStyle(1635.3077F);
      homeLight1.setNameStyle(textStyle0);
      homeLight0.getWidth();
      homeLight2.setMovable(false);
      homeLight0.setElevation((-815.0F));
  }

  @Test(timeout = 4000)
  public void test207()  throws Throwable  {
      LightSource[] lightSourceArray0 = new LightSource[2];
      LightSource lightSource0 = new LightSource((-815.0F), 0.0F, 0.0F, 114);
      lightSourceArray0[0] = lightSource0;
      LightSource lightSource1 = new LightSource((-694.0F), 2965.994F, (-127.62969F), 0);
      LightSource lightSource2 = new LightSource(0.19634955F, 0.3926991F, 2377.285F, (-489));
      BigDecimal bigDecimal0 = BigDecimal.TEN;
      CatalogLight catalogLight0 = new CatalogLight("com.eteks.sweethome3d.model.HomePieceOfFurniture$SortableProperty", "com.eteks.sweethome3d.model.HomePieceOfFurniture$SortableProperty", "com.eteks.sweethome3d.model.HomePieceOfFurniture$SortableProperty", (Content) null, (Content) null, 0.0F, 824.0F, 114.0F, 114.0F, true, lightSourceArray0, (float[][]) null, "a_pL[@4vw^sg3iloUNr", false, bigDecimal0, bigDecimal0);
      HomeLight homeLight0 = new HomeLight(catalogLight0);
      HomeLight homeLight1 = homeLight0.clone();
      bigDecimal0.intValueExact();
      homeLight0.clone();
      homeLight1.isPointAt(1599.0F, 0.0F, (-694.0F));
      // Undeclared exception!
      try { 
        homeLight0.setModelMirrored(true);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Piece isn't resizable
         //
         verifyException("com.eteks.sweethome3d.model.HomePieceOfFurniture", e);
      }
  }

  @Test(timeout = 4000)
  public void test208()  throws Throwable  {
      URL uRL0 = MockURL.getFtpExample();
      URLContent uRLContent0 = new URLContent(uRL0);
      Integer integer0 = new Integer(16);
      float[][] floatArray0 = new float[7][5];
      float[] floatArray1 = new float[9];
      floatArray1[0] = 3331.0F;
      floatArray1[1] = 0.0F;
      floatArray1[2] = 3331.0F;
      floatArray1[3] = (float) 16;
      floatArray1[4] = 0.0F;
      floatArray1[5] = 1.0F;
      floatArray1[6] = 1.0F;
      floatArray1[7] = (float) 16;
      floatArray1[8] = 0.0F;
      floatArray0[0] = floatArray1;
      float[] floatArray2 = new float[5];
      floatArray2[0] = 0.0F;
      floatArray2[1] = (float) 16;
      floatArray2[2] = 0.0F;
      floatArray2[3] = 1.0F;
      floatArray2[4] = 3331.0F;
      floatArray0[1] = floatArray2;
      float[] floatArray3 = new float[4];
      floatArray3[0] = 0.0F;
      floatArray3[1] = 0.0F;
      floatArray3[2] = 1.0F;
      floatArray3[3] = 0.0F;
      floatArray0[2] = floatArray3;
      float[] floatArray4 = new float[0];
      floatArray0[3] = floatArray4;
      float[] floatArray5 = new float[2];
      floatArray5[0] = 0.0F;
      floatArray5[1] = 0.0F;
      floatArray0[4] = floatArray5;
      float[] floatArray6 = new float[0];
      floatArray0[5] = floatArray6;
      float[] floatArray7 = new float[4];
      floatArray7[0] = 0.0F;
      floatArray7[1] = (float) 16;
      floatArray7[2] = 1.0F;
      floatArray7[3] = (float) 16;
      floatArray0[6] = floatArray7;
      CatalogPieceOfFurniture catalogPieceOfFurniture0 = new CatalogPieceOfFurniture("DEPTH", uRLContent0, uRLContent0, 0.0F, 1.0F, 3331.0F, 3331.0F, true, integer0, floatArray0, true, 0.0F, true);
      HomePieceOfFurniture homePieceOfFurniture0 = new HomePieceOfFurniture(catalogPieceOfFurniture0);
  }

  @Test(timeout = 4000)
  public void test209()  throws Throwable  {
      LightSource[] lightSourceArray0 = new LightSource[2];
      LightSource lightSource0 = new LightSource((-815.0F), 0.0F, 0.0F, 114);
      lightSourceArray0[0] = lightSource0;
      LightSource lightSource1 = new LightSource((-694.0F), 0.36957806F, (-127.62969F), 0);
      lightSourceArray0[1] = lightSource1;
      BigDecimal bigDecimal0 = BigDecimal.TEN;
      CatalogLight catalogLight0 = new CatalogLight("h&*+\"", "h&*+\"", "h&*+\"", (Content) null, (Content) null, (-815.0F), 0.36957806F, (-694.0F), (-694.0F), true, lightSourceArray0, (float[][]) null, "h&*+\"", true, bigDecimal0, bigDecimal0);
      HomeLight homeLight0 = new HomeLight(catalogLight0);
      HomeLight homeLight1 = homeLight0.clone();
      HomePieceOfFurniture homePieceOfFurniture0 = homeLight1.clone();
      homeLight1.isPointAt(114, (-815.0F), 114);
      homeLight1.setName("h&*+\"");
      homePieceOfFurniture0.setModelMirrored(true);
      homeLight0.getCurrency();
      homeLight0.getNameXOffset();
  }

  @Test(timeout = 4000)
  public void test210()  throws Throwable  {
      LightSource[] lightSourceArray0 = new LightSource[2];
      LightSource lightSource0 = new LightSource((-815.0F), 0.0F, 0.0F, 128);
      LightSource lightSource1 = new LightSource((-3684.3054F), (-815.0F), (-850.7784F), 114);
      LightSource lightSource2 = new LightSource(1021.705F, 128, 333.5518F, 128);
      BigDecimal bigDecimal0 = BigDecimal.TEN;
      CatalogLight catalogLight0 = new CatalogLight("O2Gq", "O2Gq", "/N:|d?il:#/( 3", (Content) null, (Content) null, 333.5518F, 114.0F, (-3684.3054F), (-850.7784F), false, lightSourceArray0, (float[][]) null, "ETO~3kywKj+", false, bigDecimal0, bigDecimal0);
      HomeLight homeLight0 = new HomeLight(catalogLight0);
      HomeLight homeLight1 = homeLight0.clone();
      homeLight0.clone();
      homeLight1.isPointAt(128, 0.0F, 127.853F);
      // Undeclared exception!
      try { 
        homeLight1.setModelMirrored(false);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Piece isn't resizable
         //
         verifyException("com.eteks.sweethome3d.model.HomePieceOfFurniture", e);
      }
  }

  @Test(timeout = 4000)
  public void test211()  throws Throwable  {
      LightSource[] lightSourceArray0 = new LightSource[2];
      BigDecimal bigDecimal0 = BigDecimal.TEN;
      CatalogLight catalogLight0 = new CatalogLight("h&+)`\"", "h&+)`\"", "h&+)`\"", (Content) null, (Content) null, (-2263.3643F), (-2263.3643F), (-2263.3643F), (-2263.3643F), true, lightSourceArray0, (float[][]) null, "h&+)`\"", true, bigDecimal0, bigDecimal0);
      HomeLight homeLight0 = new HomeLight(catalogLight0);
      homeLight0.setY((-2263.3643F));
      homeLight0.getLevel();
      homeLight0.isAtLevel((Level) null);
  }

  @Test(timeout = 4000)
  public void test212()  throws Throwable  {
      LightSource[] lightSourceArray0 = new LightSource[2];
      LightSource lightSource0 = new LightSource((-815.0F), 0.0F, 0.0F, 114);
      lightSourceArray0[0] = lightSource0;
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      LightSource lightSource1 = new LightSource((-694.0F), 2965.994F, (-127.62969F), 0);
      BigDecimal bigDecimal0 = BigDecimal.ZERO;
      CatalogLight catalogLight0 = new CatalogLight("h&*+\"", "h&*+\"", "h&*+\"", (Content) null, (Content) null, (-815.0F), 0.3926991F, (-694.0F), (-694.0F), true, lightSourceArray0, (float[][]) null, "h&*+\"", true, bigDecimal0, bigDecimal0);
      HomeLight homeLight0 = new HomeLight(catalogLight0);
      HomeLight homeLight1 = new HomeLight(homeLight0);
      HomeLight homeLight2 = homeLight1.clone();
      homeLight2.clone();
      homeLight2.setModelMirrored(true);
      homeLight2.isNameCenterPointAt(0, 127.82604F, 527.5414F);
      TextStyle textStyle0 = new TextStyle((-3239.72F));
      homeLight0.setNameStyle(textStyle0);
      HomeLight homeLight3 = new HomeLight(homeLight0);
      HomeLight homeLight4 = homeLight3.clone();
      homeLight4.getName();
      Float float0 = new Float(16339.633646144788);
      homeLight3.setShininess(float0);
  }

  @Test(timeout = 4000)
  public void test213()  throws Throwable  {
      LightSource[] lightSourceArray0 = new LightSource[12];
      BigDecimal bigDecimal0 = BigDecimal.TEN;
      CatalogLight catalogLight0 = new CatalogLight("h&*+\"", "h&*+\"", "h&*+\"", (Content) null, (Content) null, 587.23944F, 587.23944F, (-694.0F), (-694.0F), true, lightSourceArray0, (float[][]) null, "h&*+\"", true, bigDecimal0, bigDecimal0);
      HomeLight homeLight0 = new HomeLight(catalogLight0);
      bigDecimal0.equals("h&*+\"");
      homeLight0.isTopLeftPointAt(587.23944F, (-694.0F), 5247.7217F);
      HomeLight homeLight1 = new HomeLight(homeLight0);
      BigDecimal bigDecimal1 = BigDecimal.ONE;
      homeLight0.setDescription("h&*+\"");
      homeLight0.setHeight((-618.0F));
      homeLight0.isPointAt((-694.0F), 587.23944F, 347.4607F);
      // Undeclared exception!
      try { 
        HomePieceOfFurniture.SortableProperty.valueOf("h&*+\"");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant com.eteks.sweethome3d.model.HomePieceOfFurniture.SortableProperty.h&*+\"
         //
         verifyException("java.lang.Enum", e);
      }
  }

  @Test(timeout = 4000)
  public void test214()  throws Throwable  {
      LightSource[] lightSourceArray0 = new LightSource[2];
      LightSource lightSource0 = new LightSource((-815.0F), 0.0F, 0.0F, 114);
      lightSourceArray0[0] = lightSource0;
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      LightSource lightSource1 = new LightSource((-694.0F), 2965.994F, (-127.62969F), 0);
      BigDecimal bigDecimal0 = BigDecimal.TEN;
      CatalogLight catalogLight0 = new CatalogLight("h&*+\"", "h&*+\"", "h&*+\"", (Content) null, (Content) null, (-815.0F), 0.3926991F, (-694.0F), (-694.0F), true, lightSourceArray0, (float[][]) null, "h&*+\"", true, bigDecimal0, bigDecimal0);
      HomeLight homeLight0 = new HomeLight(catalogLight0);
      HomeLight homeLight1 = homeLight0.clone();
      HomePieceOfFurniture homePieceOfFurniture0 = homeLight1.clone();
      homePieceOfFurniture0.setModelMirrored(true);
      homePieceOfFurniture0.isNameCenterPointAt(1002.0F, (-127.62969F), 1707.7522F);
      TextStyle textStyle0 = new TextStyle((-815.0F));
      homePieceOfFurniture0.setNameStyle(textStyle0);
      homeLight1.getWidth();
  }

  @Test(timeout = 4000)
  public void test215()  throws Throwable  {
      LightSource[] lightSourceArray0 = new LightSource[2];
      BigDecimal bigDecimal0 = new BigDecimal(0);
      CatalogLight catalogLight0 = new CatalogLight("h&*+\"", "h&*+\"", "h&*+\"", (Content) null, (Content) null, (-815.0011F), (-815.0011F), (-815.0011F), (-815.0011F), true, lightSourceArray0, (float[][]) null, "h&*+\"", true, bigDecimal0, bigDecimal0);
      HomeLight homeLight0 = new HomeLight(catalogLight0);
      homeLight0.setShininess((Float) null);
  }

  @Test(timeout = 4000)
  public void test216()  throws Throwable  {
      LightSource[] lightSourceArray0 = new LightSource[2];
      LightSource lightSource0 = new LightSource((-815.0F), 0.0F, 0.0F, 114);
      lightSourceArray0[0] = lightSource0;
      LightSource lightSource1 = new LightSource(407.5F, 0.36957806F, (-127.62969F), 114);
      lightSourceArray0[1] = lightSource1;
      BigDecimal bigDecimal0 = BigDecimal.TEN;
      CatalogLight catalogLight0 = new CatalogLight("h&9+\"", "h&9+\"", "h&9+\"", (Content) null, (Content) null, (-815.0F), 0.36957806F, 407.5F, 407.5F, true, lightSourceArray0, (float[][]) null, "h&9+\"", true, bigDecimal0, bigDecimal0);
      HomeLight homeLight0 = new HomeLight(catalogLight0);
      HomeLight homeLight1 = homeLight0.clone();
      homeLight0.setNameAngle((-215.5262F));
      HomeLight homeLight2 = homeLight0.clone();
      HomePieceOfFurniture homePieceOfFurniture0 = new HomePieceOfFurniture(homeLight1);
      HomePieceOfFurniture homePieceOfFurniture1 = homePieceOfFurniture0.clone();
      homePieceOfFurniture1.setModelMirrored(false);
      homeLight0.isNameCenterPointAt(0.0F, (-2702.1F), 407.5F);
      homeLight2.setY(0.36957806F);
      HomeLight homeLight3 = homeLight0.clone();
      homeLight3.getGroundElevation();
      homeLight3.setDepth(0.36957806F);
      homeLight0.isPointAt(1.0F, (-802.0745F), (-1529.0F));
      homeLight1.setDepth((-1.0F));
      homeLight0.getNameStyle();
      homePieceOfFurniture0.setNameStyle((TextStyle) null);
  }

  @Test(timeout = 4000)
  public void test217()  throws Throwable  {
      LightSource[] lightSourceArray0 = new LightSource[12];
      BigDecimal bigDecimal0 = BigDecimal.ONE;
      CatalogLight catalogLight0 = new CatalogLight("h&*+\"", "h&*+\"", "h&*+\"", (Content) null, (Content) null, 587.23944F, 587.23944F, (-694.0F), (-694.0F), true, lightSourceArray0, (float[][]) null, "h&*+\"", true, bigDecimal0, bigDecimal0);
      HomeLight homeLight0 = new HomeLight(catalogLight0);
      homeLight0.isTopLeftPointAt((-694.0F), 587.23944F, 924.3818F);
      homeLight0.isBottomRightPointAt(2.0F, (-694.0F), 3.4028235E38F);
      HomeLight homeLight1 = homeLight0.clone();
      homeLight0.getModelRotation();
      homeLight0.setNameAngle(2636.856F);
      homeLight0.getModelRotation();
      homeLight1.setNameVisible(false);
  }

  @Test(timeout = 4000)
  public void test218()  throws Throwable  {
      LightSource[] lightSourceArray0 = new LightSource[2];
      LightSource lightSource0 = new LightSource((-815.0F), 0.0F, 0.0F, 78);
      lightSourceArray0[0] = lightSource0;
      LightSource lightSource1 = new LightSource((-2635.6233F), 0.0F, 0.3926991F, 2147483403);
      BigDecimal bigDecimal0 = BigDecimal.TEN;
      CatalogLight catalogLight0 = new CatalogLight("h&*+\"", "qm9?A.dE1Q!GeD", "", (Content) null, (Content) null, 0.3926991F, 2.0F, 0.3926991F, 0.3926991F, true, lightSourceArray0, (float[][]) null, "oN|", true, bigDecimal0, bigDecimal0);
      HomeLight homeLight0 = new HomeLight(catalogLight0);
      HomeLight homeLight1 = homeLight0.clone();
      homeLight1.clone();
      homeLight0.isPointAt((-815.0F), 2.0F, 0.3926991F);
      homeLight0.setName("");
      homeLight1.setModelMirrored(false);
      homeLight0.isBottomLeftPointAt(407.5F, (-694.0F), 2.0F);
      homeLight1.getPoints();
  }

  @Test(timeout = 4000)
  public void test219()  throws Throwable  {
      LightSource[] lightSourceArray0 = new LightSource[2];
      LightSource lightSource0 = new LightSource((-815.0F), 0.0F, 0.0F, 114);
      lightSourceArray0[0] = lightSource0;
      LightSource lightSource1 = new LightSource(407.5F, 0.36957806F, (-127.62969F), 0);
      lightSourceArray0[1] = lightSource1;
      BigDecimal bigDecimal0 = BigDecimal.TEN;
      CatalogLight catalogLight0 = new CatalogLight("h&9+\"", "h&9+\"", "h&9+\"", (Content) null, (Content) null, (-815.0F), 0.36957806F, 407.5F, 407.5F, true, lightSourceArray0, (float[][]) null, "h&9+\"", true, bigDecimal0, bigDecimal0);
      HomeLight homeLight0 = new HomeLight(catalogLight0);
      HomeLight homeLight1 = homeLight0.clone();
      homeLight0.setNameAngle((-215.5262F));
      HomeLight homeLight2 = homeLight0.clone();
      HomePieceOfFurniture homePieceOfFurniture0 = new HomePieceOfFurniture(homeLight1);
      HomePieceOfFurniture homePieceOfFurniture1 = homePieceOfFurniture0.clone();
      homePieceOfFurniture1.setModelMirrored(false);
      homeLight0.isNameCenterPointAt(0.0F, (-2702.1F), 407.5F);
      homeLight2.setY(0.36957806F);
      HomeLight homeLight3 = new HomeLight(homeLight1);
      homeLight3.isTopRightPointAt(128.0F, 0.0F, (-815.0F));
      HomeLight homeLight4 = new HomeLight(homeLight1);
      homeLight4.clone();
      homeLight0.getHeight();
      homeLight2.setElevation(407.5F);
  }

  @Test(timeout = 4000)
  public void test220()  throws Throwable  {
      LightSource[] lightSourceArray0 = new LightSource[10];
      BigDecimal bigDecimal0 = BigDecimal.ZERO;
      CatalogLight catalogLight0 = new CatalogLight("5z;eZN", "5z;eZN", "5z;eZN", (Content) null, (Content) null, (-2263.0F), (-2263.0F), (-2263.0F), (-2263.0F), false, lightSourceArray0, (float[][]) null, "5z;eZN", false, bigDecimal0, bigDecimal0);
      HomeLight homeLight0 = new HomeLight(catalogLight0);
      PropertyChangeListener propertyChangeListener0 = mock(PropertyChangeListener.class, new ViolatedAssumptionAnswer());
      PropertyChangeListenerProxy propertyChangeListenerProxy0 = new PropertyChangeListenerProxy("5z;eZN", propertyChangeListener0);
      homeLight0.addPropertyChangeListener(propertyChangeListenerProxy0);
      homeLight0.getGroundElevation();
      HomePieceOfFurniture.Property.values();
  }

  @Test(timeout = 4000)
  public void test221()  throws Throwable  {
      LightSource[] lightSourceArray0 = new LightSource[2];
      LightSource lightSource0 = new LightSource((-815.0F), 0.0F, 0.0F, 114);
      lightSourceArray0[0] = lightSource0;
      LightSource lightSource1 = new LightSource((-694.0F), 0.36957806F, (-127.62969F), 0);
      lightSourceArray0[1] = lightSource1;
      BigDecimal bigDecimal0 = BigDecimal.TEN;
      CatalogLight catalogLight0 = new CatalogLight("h&9+\"", "h&9+\"", "h&9+\"", (Content) null, (Content) null, (-815.0F), 0.36957806F, (-694.0F), (-694.0F), true, lightSourceArray0, (float[][]) null, "h&9+\"", true, bigDecimal0, bigDecimal0);
      HomeLight homeLight0 = new HomeLight(catalogLight0);
      HomeLight homeLight1 = homeLight0.clone();
      HomePieceOfFurniture homePieceOfFurniture0 = homeLight1.clone();
      homeLight1.isPointAt(114, (-815.0F), 114);
      homeLight1.setName("h&9+\"");
      homePieceOfFurniture0.setModelMirrored(true);
      HomeLight homeLight2 = new HomeLight(homeLight0);
      homeLight2.isTopRightPointAt(451.89F, 822.8428F, (-815.0F));
      homeLight2.clone();
      homeLight1.getHeight();
      homeLight2.isTopLeftPointAt(448.7342F, 0, 448.7342F);
      homePieceOfFurniture0.isDeformable();
  }

  @Test(timeout = 4000)
  public void test222()  throws Throwable  {
      LightSource[] lightSourceArray0 = new LightSource[2];
      BigDecimal bigDecimal0 = BigDecimal.TEN;
      assertEquals((byte)10, bigDecimal0.byteValue());
      assertEquals((short)10, bigDecimal0.shortValue());
      assertNotNull(bigDecimal0);
      
      CatalogLight catalogLight0 = new CatalogLight("", "", "", (Content) null, (Content) null, 0.3926991F, 92.121765F, (-727.8896F), (-727.8896F), true, lightSourceArray0, (float[][]) null, "{L", true, bigDecimal0, bigDecimal0);
      assertEquals((byte)10, bigDecimal0.byteValue());
      assertEquals((short)10, bigDecimal0.shortValue());
      assertNull(catalogLight0.getGrade());
      assertFalse(catalogLight0.isDoorOrWindow());
      assertEquals("", catalogLight0.getDescription());
      assertEquals("", catalogLight0.getName());
      assertTrue(catalogLight0.isMovable());
      assertNull(catalogLight0.getInformation());
      assertTrue(catalogLight0.isDeformable());
      assertEquals("", catalogLight0.getId());
      assertEquals(0.3926991F, catalogLight0.getWidth(), 0.01F);
      assertNull(catalogLight0.getCurrency());
      assertNull(catalogLight0.getCreationDate());
      assertEquals("{L", catalogLight0.getCreator());
      assertEquals(92.121765F, catalogLight0.getDepth(), 0.01F);
      assertEquals((-727.8896F), catalogLight0.getElevation(), 0.01F);
      assertFalse(catalogLight0.isBackFaceShown());
      assertNull(catalogLight0.getColor());
      assertFalse(catalogLight0.isModifiable());
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertEquals((-727.8896F), catalogLight0.getHeight(), 0.01F);
      assertTrue(catalogLight0.isResizable());
      assertTrue(catalogLight0.isTexturable());
      assertTrue(catalogLight0.isProportional());
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertEquals(2, lightSourceArray0.length);
      assertNotNull(catalogLight0);
      
      HomeLight homeLight0 = new HomeLight(catalogLight0);
      assertEquals((byte)10, bigDecimal0.byteValue());
      assertEquals((short)10, bigDecimal0.shortValue());
      assertNull(catalogLight0.getGrade());
      assertFalse(catalogLight0.isDoorOrWindow());
      assertEquals("", catalogLight0.getDescription());
      assertEquals("", catalogLight0.getName());
      assertTrue(catalogLight0.isMovable());
      assertNull(catalogLight0.getInformation());
      assertTrue(catalogLight0.isDeformable());
      assertEquals("", catalogLight0.getId());
      assertEquals(0.3926991F, catalogLight0.getWidth(), 0.01F);
      assertNull(catalogLight0.getCurrency());
      assertNull(catalogLight0.getCreationDate());
      assertEquals("{L", catalogLight0.getCreator());
      assertEquals(92.121765F, catalogLight0.getDepth(), 0.01F);
      assertEquals((-727.8896F), catalogLight0.getElevation(), 0.01F);
      assertFalse(catalogLight0.isBackFaceShown());
      assertNull(catalogLight0.getColor());
      assertFalse(catalogLight0.isModifiable());
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertEquals((-727.8896F), catalogLight0.getHeight(), 0.01F);
      assertTrue(catalogLight0.isResizable());
      assertTrue(catalogLight0.isTexturable());
      assertTrue(catalogLight0.isProportional());
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertTrue(homeLight0.isDeformable());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertEquals((-727.8896F), homeLight0.getElevation(), 0.01F);
      assertNull(homeLight0.getCurrency());
      assertNull(homeLight0.getColor());
      assertEquals((-727.8896F), homeLight0.getHeight(), 0.01F);
      assertFalse(homeLight0.isBackFaceShown());
      assertFalse(homeLight0.isNameVisible());
      assertEquals("", homeLight0.getCatalogId());
      assertEquals("", homeLight0.getName());
      assertEquals(0.19634955F, homeLight0.getX(), 0.01F);
      assertFalse(homeLight0.isModelMirrored());
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals(0.3926991F, homeLight0.getWidth(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      assertEquals("", homeLight0.getDescription());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertTrue(homeLight0.isTexturable());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals(92.121765F, homeLight0.getDepth(), 0.01F);
      assertTrue(homeLight0.isResizable());
      assertTrue(homeLight0.isMovable());
      assertEquals(46.060883F, homeLight0.getY(), 0.01F);
      assertNull(homeLight0.getShininess());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertTrue(homeLight0.isVisible());
      assertEquals((-727.8896F), homeLight0.getGroundElevation(), 0.01F);
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals(2, lightSourceArray0.length);
      assertNotNull(homeLight0);
      
      FurnitureCategory furnitureCategory0 = catalogLight0.getCategory();
      assertEquals((byte)10, bigDecimal0.byteValue());
      assertEquals((short)10, bigDecimal0.shortValue());
      assertNull(catalogLight0.getGrade());
      assertFalse(catalogLight0.isDoorOrWindow());
      assertEquals("", catalogLight0.getDescription());
      assertEquals("", catalogLight0.getName());
      assertTrue(catalogLight0.isMovable());
      assertNull(catalogLight0.getInformation());
      assertTrue(catalogLight0.isDeformable());
      assertEquals("", catalogLight0.getId());
      assertEquals(0.3926991F, catalogLight0.getWidth(), 0.01F);
      assertNull(catalogLight0.getCurrency());
      assertNull(catalogLight0.getCreationDate());
      assertEquals("{L", catalogLight0.getCreator());
      assertEquals(92.121765F, catalogLight0.getDepth(), 0.01F);
      assertEquals((-727.8896F), catalogLight0.getElevation(), 0.01F);
      assertFalse(catalogLight0.isBackFaceShown());
      assertNull(catalogLight0.getColor());
      assertFalse(catalogLight0.isModifiable());
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertEquals((-727.8896F), catalogLight0.getHeight(), 0.01F);
      assertTrue(catalogLight0.isResizable());
      assertTrue(catalogLight0.isTexturable());
      assertTrue(catalogLight0.isProportional());
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertEquals(2, lightSourceArray0.length);
      assertNull(furnitureCategory0);
      
      catalogLight0.setCategory((FurnitureCategory) null);
      assertEquals((byte)10, bigDecimal0.byteValue());
      assertEquals((short)10, bigDecimal0.shortValue());
      assertNull(catalogLight0.getGrade());
      assertFalse(catalogLight0.isDoorOrWindow());
      assertEquals("", catalogLight0.getDescription());
      assertEquals("", catalogLight0.getName());
      assertTrue(catalogLight0.isMovable());
      assertNull(catalogLight0.getInformation());
      assertTrue(catalogLight0.isDeformable());
      assertEquals("", catalogLight0.getId());
      assertEquals(0.3926991F, catalogLight0.getWidth(), 0.01F);
      assertNull(catalogLight0.getCurrency());
      assertNull(catalogLight0.getCreationDate());
      assertEquals("{L", catalogLight0.getCreator());
      assertEquals(92.121765F, catalogLight0.getDepth(), 0.01F);
      assertEquals((-727.8896F), catalogLight0.getElevation(), 0.01F);
      assertFalse(catalogLight0.isBackFaceShown());
      assertNull(catalogLight0.getColor());
      assertFalse(catalogLight0.isModifiable());
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertEquals((-727.8896F), catalogLight0.getHeight(), 0.01F);
      assertTrue(catalogLight0.isResizable());
      assertTrue(catalogLight0.isTexturable());
      assertTrue(catalogLight0.isProportional());
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertEquals(2, lightSourceArray0.length);
      
      HomeLight homeLight1 = homeLight0.clone();
      assertFalse(homeLight1.equals((Object)homeLight0));
      assertEquals((byte)10, bigDecimal0.byteValue());
      assertEquals((short)10, bigDecimal0.shortValue());
      assertNull(catalogLight0.getGrade());
      assertFalse(catalogLight0.isDoorOrWindow());
      assertEquals("", catalogLight0.getDescription());
      assertEquals("", catalogLight0.getName());
      assertTrue(catalogLight0.isMovable());
      assertNull(catalogLight0.getInformation());
      assertTrue(catalogLight0.isDeformable());
      assertEquals("", catalogLight0.getId());
      assertEquals(0.3926991F, catalogLight0.getWidth(), 0.01F);
      assertNull(catalogLight0.getCurrency());
      assertNull(catalogLight0.getCreationDate());
      assertEquals("{L", catalogLight0.getCreator());
      assertEquals(92.121765F, catalogLight0.getDepth(), 0.01F);
      assertEquals((-727.8896F), catalogLight0.getElevation(), 0.01F);
      assertFalse(catalogLight0.isBackFaceShown());
      assertNull(catalogLight0.getColor());
      assertFalse(catalogLight0.isModifiable());
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertEquals((-727.8896F), catalogLight0.getHeight(), 0.01F);
      assertTrue(catalogLight0.isResizable());
      assertTrue(catalogLight0.isTexturable());
      assertTrue(catalogLight0.isProportional());
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertTrue(homeLight0.isDeformable());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertEquals((-727.8896F), homeLight0.getElevation(), 0.01F);
      assertNull(homeLight0.getCurrency());
      assertNull(homeLight0.getColor());
      assertEquals((-727.8896F), homeLight0.getHeight(), 0.01F);
      assertFalse(homeLight0.isBackFaceShown());
      assertFalse(homeLight0.isNameVisible());
      assertEquals("", homeLight0.getCatalogId());
      assertEquals("", homeLight0.getName());
      assertEquals(0.19634955F, homeLight0.getX(), 0.01F);
      assertFalse(homeLight0.isModelMirrored());
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals(0.3926991F, homeLight0.getWidth(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      assertEquals("", homeLight0.getDescription());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertTrue(homeLight0.isTexturable());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals(92.121765F, homeLight0.getDepth(), 0.01F);
      assertTrue(homeLight0.isResizable());
      assertTrue(homeLight0.isMovable());
      assertEquals(46.060883F, homeLight0.getY(), 0.01F);
      assertNull(homeLight0.getShininess());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertTrue(homeLight0.isVisible());
      assertEquals((-727.8896F), homeLight0.getGroundElevation(), 0.01F);
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals((-727.8896F), homeLight1.getHeight(), 0.01F);
      assertFalse(homeLight1.isModelMirrored());
      assertFalse(homeLight1.isBackFaceShown());
      assertTrue(homeLight1.isTexturable());
      assertNull(homeLight1.getColor());
      assertEquals(92.121765F, homeLight1.getDepth(), 0.01F);
      assertEquals(0.0F, homeLight1.getAngle(), 0.01F);
      assertEquals(0.3926991F, homeLight1.getWidth(), 0.01F);
      assertFalse(homeLight1.isDoorOrWindow());
      assertEquals(0.0F, homeLight1.getNameYOffset(), 0.01F);
      assertEquals(0.19634955F, homeLight1.getX(), 0.01F);
      assertFalse(homeLight1.isNameVisible());
      assertEquals("", homeLight1.getName());
      assertNull(homeLight1.getShininess());
      assertTrue(homeLight1.isResizable());
      assertEquals((-727.8896F), homeLight1.getGroundElevation(), 0.01F);
      assertTrue(homeLight1.isMovable());
      assertEquals("", homeLight1.getCatalogId());
      assertEquals(0.5F, homeLight1.getPower(), 0.01F);
      assertEquals((-727.8896F), homeLight1.getElevation(), 0.01F);
      assertEquals("", homeLight1.getDescription());
      assertTrue(homeLight1.isDeformable());
      assertTrue(homeLight1.isVisible());
      assertNull(homeLight1.getCurrency());
      assertEquals(0.0F, homeLight1.getNameXOffset(), 0.01F);
      assertEquals(46.060883F, homeLight1.getY(), 0.01F);
      assertNull(homeLight1.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight1.getNameAngle(), 0.01F);
      assertEquals(2, lightSourceArray0.length);
      assertNotSame(homeLight0, homeLight1);
      assertNotSame(homeLight1, homeLight0);
      assertNotNull(homeLight1);
      
      HomeLight homeLight2 = (HomeLight)homeLight1.clone();
      assertFalse(homeLight0.equals((Object)homeLight1));
      assertFalse(homeLight1.equals((Object)homeLight0));
      assertFalse(homeLight2.equals((Object)homeLight1));
      assertFalse(homeLight2.equals((Object)homeLight0));
      assertEquals((byte)10, bigDecimal0.byteValue());
      assertEquals((short)10, bigDecimal0.shortValue());
      assertNull(catalogLight0.getGrade());
      assertFalse(catalogLight0.isDoorOrWindow());
      assertEquals("", catalogLight0.getDescription());
      assertEquals("", catalogLight0.getName());
      assertTrue(catalogLight0.isMovable());
      assertNull(catalogLight0.getInformation());
      assertTrue(catalogLight0.isDeformable());
      assertEquals("", catalogLight0.getId());
      assertEquals(0.3926991F, catalogLight0.getWidth(), 0.01F);
      assertNull(catalogLight0.getCurrency());
      assertNull(catalogLight0.getCreationDate());
      assertEquals("{L", catalogLight0.getCreator());
      assertEquals(92.121765F, catalogLight0.getDepth(), 0.01F);
      assertEquals((-727.8896F), catalogLight0.getElevation(), 0.01F);
      assertFalse(catalogLight0.isBackFaceShown());
      assertNull(catalogLight0.getColor());
      assertFalse(catalogLight0.isModifiable());
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertEquals((-727.8896F), catalogLight0.getHeight(), 0.01F);
      assertTrue(catalogLight0.isResizable());
      assertTrue(catalogLight0.isTexturable());
      assertTrue(catalogLight0.isProportional());
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertTrue(homeLight0.isDeformable());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertEquals((-727.8896F), homeLight0.getElevation(), 0.01F);
      assertNull(homeLight0.getCurrency());
      assertNull(homeLight0.getColor());
      assertEquals((-727.8896F), homeLight0.getHeight(), 0.01F);
      assertFalse(homeLight0.isBackFaceShown());
      assertFalse(homeLight0.isNameVisible());
      assertEquals("", homeLight0.getCatalogId());
      assertEquals("", homeLight0.getName());
      assertEquals(0.19634955F, homeLight0.getX(), 0.01F);
      assertFalse(homeLight0.isModelMirrored());
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals(0.3926991F, homeLight0.getWidth(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      assertEquals("", homeLight0.getDescription());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertTrue(homeLight0.isTexturable());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals(92.121765F, homeLight0.getDepth(), 0.01F);
      assertTrue(homeLight0.isResizable());
      assertTrue(homeLight0.isMovable());
      assertEquals(46.060883F, homeLight0.getY(), 0.01F);
      assertNull(homeLight0.getShininess());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertTrue(homeLight0.isVisible());
      assertEquals((-727.8896F), homeLight0.getGroundElevation(), 0.01F);
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals((-727.8896F), homeLight1.getHeight(), 0.01F);
      assertFalse(homeLight1.isModelMirrored());
      assertFalse(homeLight1.isBackFaceShown());
      assertTrue(homeLight1.isTexturable());
      assertNull(homeLight1.getColor());
      assertEquals(92.121765F, homeLight1.getDepth(), 0.01F);
      assertEquals(0.0F, homeLight1.getAngle(), 0.01F);
      assertEquals(0.3926991F, homeLight1.getWidth(), 0.01F);
      assertFalse(homeLight1.isDoorOrWindow());
      assertEquals(0.0F, homeLight1.getNameYOffset(), 0.01F);
      assertEquals(0.19634955F, homeLight1.getX(), 0.01F);
      assertFalse(homeLight1.isNameVisible());
      assertEquals("", homeLight1.getName());
      assertNull(homeLight1.getShininess());
      assertTrue(homeLight1.isResizable());
      assertEquals((-727.8896F), homeLight1.getGroundElevation(), 0.01F);
      assertTrue(homeLight1.isMovable());
      assertEquals("", homeLight1.getCatalogId());
      assertEquals(0.5F, homeLight1.getPower(), 0.01F);
      assertEquals((-727.8896F), homeLight1.getElevation(), 0.01F);
      assertEquals("", homeLight1.getDescription());
      assertTrue(homeLight1.isDeformable());
      assertTrue(homeLight1.isVisible());
      assertNull(homeLight1.getCurrency());
      assertEquals(0.0F, homeLight1.getNameXOffset(), 0.01F);
      assertEquals(46.060883F, homeLight1.getY(), 0.01F);
      assertNull(homeLight1.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight1.getNameAngle(), 0.01F);
      assertEquals((-727.8896F), homeLight2.getHeight(), 0.01F);
      assertFalse(homeLight2.isBackFaceShown());
      assertFalse(homeLight2.isDoorOrWindow());
      assertEquals(92.121765F, homeLight2.getDepth(), 0.01F);
      assertNull(homeLight2.getColor());
      assertFalse(homeLight2.isModelMirrored());
      assertEquals(0.3926991F, homeLight2.getWidth(), 0.01F);
      assertEquals(0.0F, homeLight2.getAngle(), 0.01F);
      assertFalse(homeLight2.isNameVisible());
      assertNull(homeLight2.getCurrency());
      assertTrue(homeLight2.isTexturable());
      assertTrue(homeLight2.isDeformable());
      assertTrue(homeLight2.isVisible());
      assertEquals("", homeLight2.getDescription());
      assertEquals(0.0F, homeLight2.getNameXOffset(), 0.01F);
      assertEquals((-727.8896F), homeLight2.getElevation(), 0.01F);
      assertEquals(46.060883F, homeLight2.getY(), 0.01F);
      assertEquals(0.0F, homeLight2.getNameAngle(), 0.01F);
      assertNull(homeLight2.getStaircaseCutOutShape());
      assertTrue(homeLight2.isResizable());
      assertEquals((-727.8896F), homeLight2.getGroundElevation(), 0.01F);
      assertTrue(homeLight2.isMovable());
      assertNull(homeLight2.getShininess());
      assertEquals("", homeLight2.getCatalogId());
      assertEquals(0.5F, homeLight2.getPower(), 0.01F);
      assertEquals("", homeLight2.getName());
      assertEquals(0.0F, homeLight2.getNameYOffset(), 0.01F);
      assertEquals(0.19634955F, homeLight2.getX(), 0.01F);
      assertEquals(2, lightSourceArray0.length);
      assertNotSame(homeLight0, homeLight1);
      assertNotSame(homeLight0, homeLight2);
      assertNotSame(homeLight1, homeLight2);
      assertNotSame(homeLight1, homeLight0);
      assertNotSame(homeLight2, homeLight1);
      assertNotSame(homeLight2, homeLight0);
      assertNotNull(homeLight2);
      
      HomeLight homeLight3 = new HomeLight(catalogLight0);
      assertFalse(homeLight3.equals((Object)homeLight0));
      assertFalse(homeLight3.equals((Object)homeLight1));
      assertFalse(homeLight3.equals((Object)homeLight2));
      assertEquals((byte)10, bigDecimal0.byteValue());
      assertEquals((short)10, bigDecimal0.shortValue());
      assertNull(catalogLight0.getGrade());
      assertFalse(catalogLight0.isDoorOrWindow());
      assertEquals("", catalogLight0.getDescription());
      assertEquals("", catalogLight0.getName());
      assertTrue(catalogLight0.isMovable());
      assertNull(catalogLight0.getInformation());
      assertTrue(catalogLight0.isDeformable());
      assertEquals("", catalogLight0.getId());
      assertEquals(0.3926991F, catalogLight0.getWidth(), 0.01F);
      assertNull(catalogLight0.getCurrency());
      assertNull(catalogLight0.getCreationDate());
      assertEquals("{L", catalogLight0.getCreator());
      assertEquals(92.121765F, catalogLight0.getDepth(), 0.01F);
      assertEquals((-727.8896F), catalogLight0.getElevation(), 0.01F);
      assertFalse(catalogLight0.isBackFaceShown());
      assertNull(catalogLight0.getColor());
      assertFalse(catalogLight0.isModifiable());
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertEquals((-727.8896F), catalogLight0.getHeight(), 0.01F);
      assertTrue(catalogLight0.isResizable());
      assertTrue(catalogLight0.isTexturable());
      assertTrue(catalogLight0.isProportional());
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertEquals(46.060883F, homeLight3.getY(), 0.01F);
      assertEquals((-727.8896F), homeLight3.getElevation(), 0.01F);
      assertNull(homeLight3.getCurrency());
      assertFalse(homeLight3.isNameVisible());
      assertNull(homeLight3.getColor());
      assertEquals(0.5F, homeLight3.getPower(), 0.01F);
      assertEquals("", homeLight3.getCatalogId());
      assertEquals((-727.8896F), homeLight3.getHeight(), 0.01F);
      assertFalse(homeLight3.isModelMirrored());
      assertFalse(homeLight3.isBackFaceShown());
      assertEquals(0.0F, homeLight3.getNameYOffset(), 0.01F);
      assertEquals(0.19634955F, homeLight3.getX(), 0.01F);
      assertTrue(homeLight3.isTexturable());
      assertFalse(homeLight3.isDoorOrWindow());
      assertEquals(0.3926991F, homeLight3.getWidth(), 0.01F);
      assertEquals("", homeLight3.getDescription());
      assertEquals("", homeLight3.getName());
      assertEquals(0.0F, homeLight3.getAngle(), 0.01F);
      assertNull(homeLight3.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight3.getNameAngle(), 0.01F);
      assertEquals(92.121765F, homeLight3.getDepth(), 0.01F);
      assertTrue(homeLight3.isMovable());
      assertNull(homeLight3.getShininess());
      assertEquals(0.0F, homeLight3.getNameXOffset(), 0.01F);
      assertTrue(homeLight3.isVisible());
      assertEquals((-727.8896F), homeLight3.getGroundElevation(), 0.01F);
      assertTrue(homeLight3.isResizable());
      assertTrue(homeLight3.isDeformable());
      assertEquals(2, lightSourceArray0.length);
      assertNotNull(homeLight3);
      
      Content content0 = homeLight3.getIcon();
      assertFalse(homeLight3.equals((Object)homeLight0));
      assertFalse(homeLight3.equals((Object)homeLight1));
      assertFalse(homeLight3.equals((Object)homeLight2));
      assertEquals((byte)10, bigDecimal0.byteValue());
      assertEquals((short)10, bigDecimal0.shortValue());
      assertNull(catalogLight0.getGrade());
      assertFalse(catalogLight0.isDoorOrWindow());
      assertEquals("", catalogLight0.getDescription());
      assertEquals("", catalogLight0.getName());
      assertTrue(catalogLight0.isMovable());
      assertNull(catalogLight0.getInformation());
      assertTrue(catalogLight0.isDeformable());
      assertEquals("", catalogLight0.getId());
      assertEquals(0.3926991F, catalogLight0.getWidth(), 0.01F);
      assertNull(catalogLight0.getCurrency());
      assertNull(catalogLight0.getCreationDate());
      assertEquals("{L", catalogLight0.getCreator());
      assertEquals(92.121765F, catalogLight0.getDepth(), 0.01F);
      assertEquals((-727.8896F), catalogLight0.getElevation(), 0.01F);
      assertFalse(catalogLight0.isBackFaceShown());
      assertNull(catalogLight0.getColor());
      assertFalse(catalogLight0.isModifiable());
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertEquals((-727.8896F), catalogLight0.getHeight(), 0.01F);
      assertTrue(catalogLight0.isResizable());
      assertTrue(catalogLight0.isTexturable());
      assertTrue(catalogLight0.isProportional());
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertEquals(46.060883F, homeLight3.getY(), 0.01F);
      assertEquals((-727.8896F), homeLight3.getElevation(), 0.01F);
      assertNull(homeLight3.getCurrency());
      assertFalse(homeLight3.isNameVisible());
      assertNull(homeLight3.getColor());
      assertEquals(0.5F, homeLight3.getPower(), 0.01F);
      assertEquals("", homeLight3.getCatalogId());
      assertEquals((-727.8896F), homeLight3.getHeight(), 0.01F);
      assertFalse(homeLight3.isModelMirrored());
      assertFalse(homeLight3.isBackFaceShown());
      assertEquals(0.0F, homeLight3.getNameYOffset(), 0.01F);
      assertEquals(0.19634955F, homeLight3.getX(), 0.01F);
      assertTrue(homeLight3.isTexturable());
      assertFalse(homeLight3.isDoorOrWindow());
      assertEquals(0.3926991F, homeLight3.getWidth(), 0.01F);
      assertEquals("", homeLight3.getDescription());
      assertEquals("", homeLight3.getName());
      assertEquals(0.0F, homeLight3.getAngle(), 0.01F);
      assertNull(homeLight3.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight3.getNameAngle(), 0.01F);
      assertEquals(92.121765F, homeLight3.getDepth(), 0.01F);
      assertTrue(homeLight3.isMovable());
      assertNull(homeLight3.getShininess());
      assertEquals(0.0F, homeLight3.getNameXOffset(), 0.01F);
      assertTrue(homeLight3.isVisible());
      assertEquals((-727.8896F), homeLight3.getGroundElevation(), 0.01F);
      assertTrue(homeLight3.isResizable());
      assertTrue(homeLight3.isDeformable());
      assertEquals(2, lightSourceArray0.length);
      assertNotSame(homeLight3, homeLight0);
      assertNotSame(homeLight3, homeLight1);
      assertNotSame(homeLight3, homeLight2);
      assertNull(content0);
      
      homeLight1.setNameVisible(true);
      assertFalse(homeLight0.equals((Object)homeLight1));
      assertFalse(homeLight0.equals((Object)homeLight3));
      assertFalse(homeLight0.equals((Object)homeLight2));
      assertFalse(homeLight1.equals((Object)homeLight2));
      assertFalse(homeLight1.equals((Object)homeLight0));
      assertFalse(homeLight1.equals((Object)homeLight3));
      assertEquals((byte)10, bigDecimal0.byteValue());
      assertEquals((short)10, bigDecimal0.shortValue());
      assertNull(catalogLight0.getGrade());
      assertFalse(catalogLight0.isDoorOrWindow());
      assertEquals("", catalogLight0.getDescription());
      assertEquals("", catalogLight0.getName());
      assertTrue(catalogLight0.isMovable());
      assertNull(catalogLight0.getInformation());
      assertTrue(catalogLight0.isDeformable());
      assertEquals("", catalogLight0.getId());
      assertEquals(0.3926991F, catalogLight0.getWidth(), 0.01F);
      assertNull(catalogLight0.getCurrency());
      assertNull(catalogLight0.getCreationDate());
      assertEquals("{L", catalogLight0.getCreator());
      assertEquals(92.121765F, catalogLight0.getDepth(), 0.01F);
      assertEquals((-727.8896F), catalogLight0.getElevation(), 0.01F);
      assertFalse(catalogLight0.isBackFaceShown());
      assertNull(catalogLight0.getColor());
      assertFalse(catalogLight0.isModifiable());
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertEquals((-727.8896F), catalogLight0.getHeight(), 0.01F);
      assertTrue(catalogLight0.isResizable());
      assertTrue(catalogLight0.isTexturable());
      assertTrue(catalogLight0.isProportional());
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertTrue(homeLight0.isDeformable());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertEquals((-727.8896F), homeLight0.getElevation(), 0.01F);
      assertNull(homeLight0.getCurrency());
      assertNull(homeLight0.getColor());
      assertEquals((-727.8896F), homeLight0.getHeight(), 0.01F);
      assertFalse(homeLight0.isBackFaceShown());
      assertFalse(homeLight0.isNameVisible());
      assertEquals("", homeLight0.getCatalogId());
      assertEquals("", homeLight0.getName());
      assertEquals(0.19634955F, homeLight0.getX(), 0.01F);
      assertFalse(homeLight0.isModelMirrored());
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals(0.3926991F, homeLight0.getWidth(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      assertEquals("", homeLight0.getDescription());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertTrue(homeLight0.isTexturable());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals(92.121765F, homeLight0.getDepth(), 0.01F);
      assertTrue(homeLight0.isResizable());
      assertTrue(homeLight0.isMovable());
      assertEquals(46.060883F, homeLight0.getY(), 0.01F);
      assertNull(homeLight0.getShininess());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertTrue(homeLight0.isVisible());
      assertEquals((-727.8896F), homeLight0.getGroundElevation(), 0.01F);
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals((-727.8896F), homeLight1.getHeight(), 0.01F);
      assertFalse(homeLight1.isModelMirrored());
      assertFalse(homeLight1.isBackFaceShown());
      assertTrue(homeLight1.isTexturable());
      assertNull(homeLight1.getColor());
      assertEquals(92.121765F, homeLight1.getDepth(), 0.01F);
      assertEquals(0.0F, homeLight1.getAngle(), 0.01F);
      assertEquals(0.3926991F, homeLight1.getWidth(), 0.01F);
      assertFalse(homeLight1.isDoorOrWindow());
      assertEquals(0.0F, homeLight1.getNameYOffset(), 0.01F);
      assertEquals(0.19634955F, homeLight1.getX(), 0.01F);
      assertEquals("", homeLight1.getName());
      assertTrue(homeLight1.isNameVisible());
      assertNull(homeLight1.getShininess());
      assertTrue(homeLight1.isResizable());
      assertEquals((-727.8896F), homeLight1.getGroundElevation(), 0.01F);
      assertTrue(homeLight1.isMovable());
      assertEquals("", homeLight1.getCatalogId());
      assertEquals(0.5F, homeLight1.getPower(), 0.01F);
      assertEquals((-727.8896F), homeLight1.getElevation(), 0.01F);
      assertEquals("", homeLight1.getDescription());
      assertTrue(homeLight1.isDeformable());
      assertTrue(homeLight1.isVisible());
      assertNull(homeLight1.getCurrency());
      assertEquals(0.0F, homeLight1.getNameXOffset(), 0.01F);
      assertEquals(46.060883F, homeLight1.getY(), 0.01F);
      assertNull(homeLight1.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight1.getNameAngle(), 0.01F);
      assertEquals(2, lightSourceArray0.length);
      assertNotSame(homeLight0, homeLight1);
      assertNotSame(homeLight0, homeLight3);
      assertNotSame(homeLight0, homeLight2);
      assertNotSame(homeLight1, homeLight2);
      assertNotSame(homeLight1, homeLight0);
      assertNotSame(homeLight1, homeLight3);
      
      HomeLight homeLight4 = homeLight3.clone();
      assertFalse(homeLight3.equals((Object)homeLight0));
      assertFalse(homeLight3.equals((Object)homeLight1));
      assertFalse(homeLight3.equals((Object)homeLight2));
      assertFalse(homeLight4.equals((Object)homeLight0));
      assertFalse(homeLight4.equals((Object)homeLight1));
      assertFalse(homeLight4.equals((Object)homeLight2));
      assertFalse(homeLight4.equals((Object)homeLight3));
      assertEquals((byte)10, bigDecimal0.byteValue());
      assertEquals((short)10, bigDecimal0.shortValue());
      assertNull(catalogLight0.getGrade());
      assertFalse(catalogLight0.isDoorOrWindow());
      assertEquals("", catalogLight0.getDescription());
      assertEquals("", catalogLight0.getName());
      assertTrue(catalogLight0.isMovable());
      assertNull(catalogLight0.getInformation());
      assertTrue(catalogLight0.isDeformable());
      assertEquals("", catalogLight0.getId());
      assertEquals(0.3926991F, catalogLight0.getWidth(), 0.01F);
      assertNull(catalogLight0.getCurrency());
      assertNull(catalogLight0.getCreationDate());
      assertEquals("{L", catalogLight0.getCreator());
      assertEquals(92.121765F, catalogLight0.getDepth(), 0.01F);
      assertEquals((-727.8896F), catalogLight0.getElevation(), 0.01F);
      assertFalse(catalogLight0.isBackFaceShown());
      assertNull(catalogLight0.getColor());
      assertFalse(catalogLight0.isModifiable());
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertEquals((-727.8896F), catalogLight0.getHeight(), 0.01F);
      assertTrue(catalogLight0.isResizable());
      assertTrue(catalogLight0.isTexturable());
      assertTrue(catalogLight0.isProportional());
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertEquals(46.060883F, homeLight3.getY(), 0.01F);
      assertEquals((-727.8896F), homeLight3.getElevation(), 0.01F);
      assertNull(homeLight3.getCurrency());
      assertFalse(homeLight3.isNameVisible());
      assertNull(homeLight3.getColor());
      assertEquals(0.5F, homeLight3.getPower(), 0.01F);
      assertEquals("", homeLight3.getCatalogId());
      assertEquals((-727.8896F), homeLight3.getHeight(), 0.01F);
      assertFalse(homeLight3.isModelMirrored());
      assertFalse(homeLight3.isBackFaceShown());
      assertEquals(0.0F, homeLight3.getNameYOffset(), 0.01F);
      assertEquals(0.19634955F, homeLight3.getX(), 0.01F);
      assertTrue(homeLight3.isTexturable());
      assertFalse(homeLight3.isDoorOrWindow());
      assertEquals(0.3926991F, homeLight3.getWidth(), 0.01F);
      assertEquals("", homeLight3.getDescription());
      assertEquals("", homeLight3.getName());
      assertEquals(0.0F, homeLight3.getAngle(), 0.01F);
      assertNull(homeLight3.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight3.getNameAngle(), 0.01F);
      assertEquals(92.121765F, homeLight3.getDepth(), 0.01F);
      assertTrue(homeLight3.isMovable());
      assertNull(homeLight3.getShininess());
      assertEquals(0.0F, homeLight3.getNameXOffset(), 0.01F);
      assertTrue(homeLight3.isVisible());
      assertEquals((-727.8896F), homeLight3.getGroundElevation(), 0.01F);
      assertTrue(homeLight3.isResizable());
      assertTrue(homeLight3.isDeformable());
      assertEquals((-727.8896F), homeLight4.getElevation(), 0.01F);
      assertTrue(homeLight4.isVisible());
      assertEquals((-727.8896F), homeLight4.getGroundElevation(), 0.01F);
      assertTrue(homeLight4.isMovable());
      assertTrue(homeLight4.isResizable());
      assertTrue(homeLight4.isDeformable());
      assertNull(homeLight4.getShininess());
      assertNull(homeLight4.getStaircaseCutOutShape());
      assertEquals(46.060883F, homeLight4.getY(), 0.01F);
      assertEquals(0.0F, homeLight4.getNameAngle(), 0.01F);
      assertEquals(0.19634955F, homeLight4.getX(), 0.01F);
      assertEquals(0.5F, homeLight4.getPower(), 0.01F);
      assertNull(homeLight4.getCurrency());
      assertEquals("", homeLight4.getCatalogId());
      assertEquals(0.0F, homeLight4.getNameYOffset(), 0.01F);
      assertEquals(92.121765F, homeLight4.getDepth(), 0.01F);
      assertNull(homeLight4.getColor());
      assertEquals((-727.8896F), homeLight4.getHeight(), 0.01F);
      assertEquals(0.3926991F, homeLight4.getWidth(), 0.01F);
      assertEquals(0.0F, homeLight4.getAngle(), 0.01F);
      assertFalse(homeLight4.isModelMirrored());
      assertFalse(homeLight4.isBackFaceShown());
      assertFalse(homeLight4.isNameVisible());
      assertEquals("", homeLight4.getName());
      assertEquals(0.0F, homeLight4.getNameXOffset(), 0.01F);
      assertTrue(homeLight4.isTexturable());
      assertFalse(homeLight4.isDoorOrWindow());
      assertEquals("", homeLight4.getDescription());
      assertEquals(2, lightSourceArray0.length);
      assertNotSame(homeLight3, homeLight0);
      assertNotSame(homeLight3, homeLight4);
      assertNotSame(homeLight3, homeLight1);
      assertNotSame(homeLight3, homeLight2);
      assertNotSame(homeLight4, homeLight0);
      assertNotSame(homeLight4, homeLight1);
      assertNotSame(homeLight4, homeLight2);
      assertNotSame(homeLight4, homeLight3);
      assertNotNull(homeLight4);
      
      homeLight4.setWidth((-11.086381F));
      assertFalse(homeLight3.equals((Object)homeLight0));
      assertFalse(homeLight3.equals((Object)homeLight4));
      assertFalse(homeLight3.equals((Object)homeLight1));
      assertFalse(homeLight3.equals((Object)homeLight2));
      assertFalse(homeLight4.equals((Object)homeLight0));
      assertFalse(homeLight4.equals((Object)homeLight1));
      assertFalse(homeLight4.equals((Object)homeLight2));
      assertFalse(homeLight4.equals((Object)homeLight3));
      assertEquals((byte)10, bigDecimal0.byteValue());
      assertEquals((short)10, bigDecimal0.shortValue());
      assertNull(catalogLight0.getGrade());
      assertFalse(catalogLight0.isDoorOrWindow());
      assertEquals("", catalogLight0.getDescription());
      assertEquals("", catalogLight0.getName());
      assertTrue(catalogLight0.isMovable());
      assertNull(catalogLight0.getInformation());
      assertTrue(catalogLight0.isDeformable());
      assertEquals("", catalogLight0.getId());
      assertEquals(0.3926991F, catalogLight0.getWidth(), 0.01F);
      assertNull(catalogLight0.getCurrency());
      assertNull(catalogLight0.getCreationDate());
      assertEquals("{L", catalogLight0.getCreator());
      assertEquals(92.121765F, catalogLight0.getDepth(), 0.01F);
      assertEquals((-727.8896F), catalogLight0.getElevation(), 0.01F);
      assertFalse(catalogLight0.isBackFaceShown());
      assertNull(catalogLight0.getColor());
      assertFalse(catalogLight0.isModifiable());
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertEquals((-727.8896F), catalogLight0.getHeight(), 0.01F);
      assertTrue(catalogLight0.isResizable());
      assertTrue(catalogLight0.isTexturable());
      assertTrue(catalogLight0.isProportional());
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertEquals(46.060883F, homeLight3.getY(), 0.01F);
      assertEquals((-727.8896F), homeLight3.getElevation(), 0.01F);
      assertNull(homeLight3.getCurrency());
      assertFalse(homeLight3.isNameVisible());
      assertNull(homeLight3.getColor());
      assertEquals(0.5F, homeLight3.getPower(), 0.01F);
      assertEquals("", homeLight3.getCatalogId());
      assertEquals((-727.8896F), homeLight3.getHeight(), 0.01F);
      assertFalse(homeLight3.isModelMirrored());
      assertFalse(homeLight3.isBackFaceShown());
      assertEquals(0.0F, homeLight3.getNameYOffset(), 0.01F);
      assertEquals(0.19634955F, homeLight3.getX(), 0.01F);
      assertTrue(homeLight3.isTexturable());
      assertFalse(homeLight3.isDoorOrWindow());
      assertEquals(0.3926991F, homeLight3.getWidth(), 0.01F);
      assertEquals("", homeLight3.getDescription());
      assertEquals("", homeLight3.getName());
      assertEquals(0.0F, homeLight3.getAngle(), 0.01F);
      assertNull(homeLight3.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight3.getNameAngle(), 0.01F);
      assertEquals(92.121765F, homeLight3.getDepth(), 0.01F);
      assertTrue(homeLight3.isMovable());
      assertNull(homeLight3.getShininess());
      assertEquals(0.0F, homeLight3.getNameXOffset(), 0.01F);
      assertTrue(homeLight3.isVisible());
      assertEquals((-727.8896F), homeLight3.getGroundElevation(), 0.01F);
      assertTrue(homeLight3.isResizable());
      assertTrue(homeLight3.isDeformable());
      assertEquals((-727.8896F), homeLight4.getElevation(), 0.01F);
      assertTrue(homeLight4.isVisible());
      assertEquals((-727.8896F), homeLight4.getGroundElevation(), 0.01F);
      assertTrue(homeLight4.isMovable());
      assertTrue(homeLight4.isResizable());
      assertTrue(homeLight4.isDeformable());
      assertNull(homeLight4.getShininess());
      assertEquals((-11.086381F), homeLight4.getWidth(), 0.01F);
      assertNull(homeLight4.getStaircaseCutOutShape());
      assertEquals(46.060883F, homeLight4.getY(), 0.01F);
      assertEquals(0.0F, homeLight4.getNameAngle(), 0.01F);
      assertEquals(0.19634955F, homeLight4.getX(), 0.01F);
      assertEquals(0.5F, homeLight4.getPower(), 0.01F);
      assertNull(homeLight4.getCurrency());
      assertEquals("", homeLight4.getCatalogId());
      assertEquals(0.0F, homeLight4.getNameYOffset(), 0.01F);
      assertEquals(92.121765F, homeLight4.getDepth(), 0.01F);
      assertNull(homeLight4.getColor());
      assertEquals((-727.8896F), homeLight4.getHeight(), 0.01F);
      assertEquals(0.0F, homeLight4.getAngle(), 0.01F);
      assertFalse(homeLight4.isModelMirrored());
      assertFalse(homeLight4.isBackFaceShown());
      assertFalse(homeLight4.isNameVisible());
      assertEquals("", homeLight4.getName());
      assertEquals(0.0F, homeLight4.getNameXOffset(), 0.01F);
      assertTrue(homeLight4.isTexturable());
      assertFalse(homeLight4.isDoorOrWindow());
      assertEquals("", homeLight4.getDescription());
      assertEquals(2, lightSourceArray0.length);
      assertNotSame(homeLight3, homeLight0);
      assertNotSame(homeLight3, homeLight4);
      assertNotSame(homeLight3, homeLight1);
      assertNotSame(homeLight3, homeLight2);
      assertNotSame(homeLight4, homeLight0);
      assertNotSame(homeLight4, homeLight1);
      assertNotSame(homeLight4, homeLight2);
      assertNotSame(homeLight4, homeLight3);
      
      String string0 = homeLight1.getName();
      assertFalse(homeLight0.equals((Object)homeLight4));
      assertFalse(homeLight0.equals((Object)homeLight1));
      assertFalse(homeLight0.equals((Object)homeLight3));
      assertFalse(homeLight0.equals((Object)homeLight2));
      assertFalse(homeLight1.equals((Object)homeLight4));
      assertFalse(homeLight1.equals((Object)homeLight2));
      assertFalse(homeLight1.equals((Object)homeLight0));
      assertFalse(homeLight1.equals((Object)homeLight3));
      assertEquals((byte)10, bigDecimal0.byteValue());
      assertEquals((short)10, bigDecimal0.shortValue());
      assertNull(catalogLight0.getGrade());
      assertFalse(catalogLight0.isDoorOrWindow());
      assertEquals("", catalogLight0.getDescription());
      assertEquals("", catalogLight0.getName());
      assertTrue(catalogLight0.isMovable());
      assertNull(catalogLight0.getInformation());
      assertTrue(catalogLight0.isDeformable());
      assertEquals("", catalogLight0.getId());
      assertEquals(0.3926991F, catalogLight0.getWidth(), 0.01F);
      assertNull(catalogLight0.getCurrency());
      assertNull(catalogLight0.getCreationDate());
      assertEquals("{L", catalogLight0.getCreator());
      assertEquals(92.121765F, catalogLight0.getDepth(), 0.01F);
      assertEquals((-727.8896F), catalogLight0.getElevation(), 0.01F);
      assertFalse(catalogLight0.isBackFaceShown());
      assertNull(catalogLight0.getColor());
      assertFalse(catalogLight0.isModifiable());
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertEquals((-727.8896F), catalogLight0.getHeight(), 0.01F);
      assertTrue(catalogLight0.isResizable());
      assertTrue(catalogLight0.isTexturable());
      assertTrue(catalogLight0.isProportional());
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertTrue(homeLight0.isDeformable());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertEquals((-727.8896F), homeLight0.getElevation(), 0.01F);
      assertNull(homeLight0.getCurrency());
      assertNull(homeLight0.getColor());
      assertEquals((-727.8896F), homeLight0.getHeight(), 0.01F);
      assertFalse(homeLight0.isBackFaceShown());
      assertFalse(homeLight0.isNameVisible());
      assertEquals("", homeLight0.getCatalogId());
      assertEquals("", homeLight0.getName());
      assertEquals(0.19634955F, homeLight0.getX(), 0.01F);
      assertFalse(homeLight0.isModelMirrored());
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals(0.3926991F, homeLight0.getWidth(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      assertEquals("", homeLight0.getDescription());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertTrue(homeLight0.isTexturable());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals(92.121765F, homeLight0.getDepth(), 0.01F);
      assertTrue(homeLight0.isResizable());
      assertTrue(homeLight0.isMovable());
      assertEquals(46.060883F, homeLight0.getY(), 0.01F);
      assertNull(homeLight0.getShininess());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertTrue(homeLight0.isVisible());
      assertEquals((-727.8896F), homeLight0.getGroundElevation(), 0.01F);
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals((-727.8896F), homeLight1.getHeight(), 0.01F);
      assertFalse(homeLight1.isModelMirrored());
      assertFalse(homeLight1.isBackFaceShown());
      assertTrue(homeLight1.isTexturable());
      assertNull(homeLight1.getColor());
      assertEquals(92.121765F, homeLight1.getDepth(), 0.01F);
      assertEquals(0.0F, homeLight1.getAngle(), 0.01F);
      assertEquals(0.3926991F, homeLight1.getWidth(), 0.01F);
      assertFalse(homeLight1.isDoorOrWindow());
      assertEquals(0.0F, homeLight1.getNameYOffset(), 0.01F);
      assertEquals(0.19634955F, homeLight1.getX(), 0.01F);
      assertEquals("", homeLight1.getName());
      assertTrue(homeLight1.isNameVisible());
      assertNull(homeLight1.getShininess());
      assertTrue(homeLight1.isResizable());
      assertEquals((-727.8896F), homeLight1.getGroundElevation(), 0.01F);
      assertTrue(homeLight1.isMovable());
      assertEquals("", homeLight1.getCatalogId());
      assertEquals(0.5F, homeLight1.getPower(), 0.01F);
      assertEquals((-727.8896F), homeLight1.getElevation(), 0.01F);
      assertEquals("", homeLight1.getDescription());
      assertTrue(homeLight1.isDeformable());
      assertTrue(homeLight1.isVisible());
      assertNull(homeLight1.getCurrency());
      assertEquals(0.0F, homeLight1.getNameXOffset(), 0.01F);
      assertEquals(46.060883F, homeLight1.getY(), 0.01F);
      assertNull(homeLight1.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight1.getNameAngle(), 0.01F);
      assertEquals(2, lightSourceArray0.length);
      assertNotSame(homeLight0, homeLight4);
      assertNotSame(homeLight0, homeLight1);
      assertNotSame(homeLight0, homeLight3);
      assertNotSame(homeLight0, homeLight2);
      assertNotSame(homeLight1, homeLight4);
      assertNotSame(homeLight1, homeLight2);
      assertNotSame(homeLight1, homeLight0);
      assertNotSame(homeLight1, homeLight3);
      assertNotNull(string0);
      assertEquals("", string0);
      
      String string1 = homeLight4.getCatalogId();
      assertFalse(homeLight3.equals((Object)homeLight0));
      assertFalse(homeLight3.equals((Object)homeLight4));
      assertFalse(homeLight3.equals((Object)homeLight1));
      assertFalse(homeLight3.equals((Object)homeLight2));
      assertFalse(homeLight4.equals((Object)homeLight0));
      assertFalse(homeLight4.equals((Object)homeLight1));
      assertFalse(homeLight4.equals((Object)homeLight2));
      assertFalse(homeLight4.equals((Object)homeLight3));
      assertEquals((byte)10, bigDecimal0.byteValue());
      assertEquals((short)10, bigDecimal0.shortValue());
      assertNull(catalogLight0.getGrade());
      assertFalse(catalogLight0.isDoorOrWindow());
      assertEquals("", catalogLight0.getDescription());
      assertEquals("", catalogLight0.getName());
      assertTrue(catalogLight0.isMovable());
      assertNull(catalogLight0.getInformation());
      assertTrue(catalogLight0.isDeformable());
      assertEquals("", catalogLight0.getId());
      assertEquals(0.3926991F, catalogLight0.getWidth(), 0.01F);
      assertNull(catalogLight0.getCurrency());
      assertNull(catalogLight0.getCreationDate());
      assertEquals("{L", catalogLight0.getCreator());
      assertEquals(92.121765F, catalogLight0.getDepth(), 0.01F);
      assertEquals((-727.8896F), catalogLight0.getElevation(), 0.01F);
      assertFalse(catalogLight0.isBackFaceShown());
      assertNull(catalogLight0.getColor());
      assertFalse(catalogLight0.isModifiable());
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertEquals((-727.8896F), catalogLight0.getHeight(), 0.01F);
      assertTrue(catalogLight0.isResizable());
      assertTrue(catalogLight0.isTexturable());
      assertTrue(catalogLight0.isProportional());
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertEquals(46.060883F, homeLight3.getY(), 0.01F);
      assertEquals((-727.8896F), homeLight3.getElevation(), 0.01F);
      assertNull(homeLight3.getCurrency());
      assertFalse(homeLight3.isNameVisible());
      assertNull(homeLight3.getColor());
      assertEquals(0.5F, homeLight3.getPower(), 0.01F);
      assertEquals("", homeLight3.getCatalogId());
      assertEquals((-727.8896F), homeLight3.getHeight(), 0.01F);
      assertFalse(homeLight3.isModelMirrored());
      assertFalse(homeLight3.isBackFaceShown());
      assertEquals(0.0F, homeLight3.getNameYOffset(), 0.01F);
      assertEquals(0.19634955F, homeLight3.getX(), 0.01F);
      assertTrue(homeLight3.isTexturable());
      assertFalse(homeLight3.isDoorOrWindow());
      assertEquals(0.3926991F, homeLight3.getWidth(), 0.01F);
      assertEquals("", homeLight3.getDescription());
      assertEquals("", homeLight3.getName());
      assertEquals(0.0F, homeLight3.getAngle(), 0.01F);
      assertNull(homeLight3.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight3.getNameAngle(), 0.01F);
      assertEquals(92.121765F, homeLight3.getDepth(), 0.01F);
      assertTrue(homeLight3.isMovable());
      assertNull(homeLight3.getShininess());
      assertEquals(0.0F, homeLight3.getNameXOffset(), 0.01F);
      assertTrue(homeLight3.isVisible());
      assertEquals((-727.8896F), homeLight3.getGroundElevation(), 0.01F);
      assertTrue(homeLight3.isResizable());
      assertTrue(homeLight3.isDeformable());
      assertEquals((-727.8896F), homeLight4.getElevation(), 0.01F);
      assertTrue(homeLight4.isVisible());
      assertEquals((-727.8896F), homeLight4.getGroundElevation(), 0.01F);
      assertTrue(homeLight4.isMovable());
      assertTrue(homeLight4.isResizable());
      assertTrue(homeLight4.isDeformable());
      assertNull(homeLight4.getShininess());
      assertEquals((-11.086381F), homeLight4.getWidth(), 0.01F);
      assertNull(homeLight4.getStaircaseCutOutShape());
      assertEquals(46.060883F, homeLight4.getY(), 0.01F);
      assertEquals(0.0F, homeLight4.getNameAngle(), 0.01F);
      assertEquals(0.19634955F, homeLight4.getX(), 0.01F);
      assertEquals(0.5F, homeLight4.getPower(), 0.01F);
      assertNull(homeLight4.getCurrency());
      assertEquals("", homeLight4.getCatalogId());
      assertEquals(0.0F, homeLight4.getNameYOffset(), 0.01F);
      assertEquals(92.121765F, homeLight4.getDepth(), 0.01F);
      assertNull(homeLight4.getColor());
      assertEquals((-727.8896F), homeLight4.getHeight(), 0.01F);
      assertEquals(0.0F, homeLight4.getAngle(), 0.01F);
      assertFalse(homeLight4.isModelMirrored());
      assertFalse(homeLight4.isBackFaceShown());
      assertFalse(homeLight4.isNameVisible());
      assertEquals("", homeLight4.getName());
      assertEquals(0.0F, homeLight4.getNameXOffset(), 0.01F);
      assertTrue(homeLight4.isTexturable());
      assertFalse(homeLight4.isDoorOrWindow());
      assertEquals("", homeLight4.getDescription());
      assertEquals(2, lightSourceArray0.length);
      assertNotSame(homeLight3, homeLight0);
      assertNotSame(homeLight3, homeLight4);
      assertNotSame(homeLight3, homeLight1);
      assertNotSame(homeLight3, homeLight2);
      assertNotSame(homeLight4, homeLight0);
      assertNotSame(homeLight4, homeLight1);
      assertNotSame(homeLight4, homeLight2);
      assertNotSame(homeLight4, homeLight3);
      assertNotNull(string1);
      assertEquals("", string1);
      
      boolean boolean0 = homeLight4.isBottomRightPointAt(0.5F, 0.0F, (-1.0F));
      assertFalse(homeLight3.equals((Object)homeLight0));
      assertFalse(homeLight3.equals((Object)homeLight4));
      assertFalse(homeLight3.equals((Object)homeLight1));
      assertFalse(homeLight3.equals((Object)homeLight2));
      assertFalse(homeLight4.equals((Object)homeLight0));
      assertFalse(homeLight4.equals((Object)homeLight1));
      assertFalse(homeLight4.equals((Object)homeLight2));
      assertFalse(homeLight4.equals((Object)homeLight3));
      assertEquals((byte)10, bigDecimal0.byteValue());
      assertEquals((short)10, bigDecimal0.shortValue());
      assertNull(catalogLight0.getGrade());
      assertFalse(catalogLight0.isDoorOrWindow());
      assertEquals("", catalogLight0.getDescription());
      assertEquals("", catalogLight0.getName());
      assertTrue(catalogLight0.isMovable());
      assertNull(catalogLight0.getInformation());
      assertTrue(catalogLight0.isDeformable());
      assertEquals("", catalogLight0.getId());
      assertEquals(0.3926991F, catalogLight0.getWidth(), 0.01F);
      assertNull(catalogLight0.getCurrency());
      assertNull(catalogLight0.getCreationDate());
      assertEquals("{L", catalogLight0.getCreator());
      assertEquals(92.121765F, catalogLight0.getDepth(), 0.01F);
      assertEquals((-727.8896F), catalogLight0.getElevation(), 0.01F);
      assertFalse(catalogLight0.isBackFaceShown());
      assertNull(catalogLight0.getColor());
      assertFalse(catalogLight0.isModifiable());
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertEquals((-727.8896F), catalogLight0.getHeight(), 0.01F);
      assertTrue(catalogLight0.isResizable());
      assertTrue(catalogLight0.isTexturable());
      assertTrue(catalogLight0.isProportional());
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertEquals(46.060883F, homeLight3.getY(), 0.01F);
      assertEquals((-727.8896F), homeLight3.getElevation(), 0.01F);
      assertNull(homeLight3.getCurrency());
      assertFalse(homeLight3.isNameVisible());
      assertNull(homeLight3.getColor());
      assertEquals(0.5F, homeLight3.getPower(), 0.01F);
      assertEquals("", homeLight3.getCatalogId());
      assertEquals((-727.8896F), homeLight3.getHeight(), 0.01F);
      assertFalse(homeLight3.isModelMirrored());
      assertFalse(homeLight3.isBackFaceShown());
      assertEquals(0.0F, homeLight3.getNameYOffset(), 0.01F);
      assertEquals(0.19634955F, homeLight3.getX(), 0.01F);
      assertTrue(homeLight3.isTexturable());
      assertFalse(homeLight3.isDoorOrWindow());
      assertEquals(0.3926991F, homeLight3.getWidth(), 0.01F);
      assertEquals("", homeLight3.getDescription());
      assertEquals("", homeLight3.getName());
      assertEquals(0.0F, homeLight3.getAngle(), 0.01F);
      assertNull(homeLight3.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight3.getNameAngle(), 0.01F);
      assertEquals(92.121765F, homeLight3.getDepth(), 0.01F);
      assertTrue(homeLight3.isMovable());
      assertNull(homeLight3.getShininess());
      assertEquals(0.0F, homeLight3.getNameXOffset(), 0.01F);
      assertTrue(homeLight3.isVisible());
      assertEquals((-727.8896F), homeLight3.getGroundElevation(), 0.01F);
      assertTrue(homeLight3.isResizable());
      assertTrue(homeLight3.isDeformable());
      assertEquals((-727.8896F), homeLight4.getElevation(), 0.01F);
      assertTrue(homeLight4.isVisible());
      assertEquals((-727.8896F), homeLight4.getGroundElevation(), 0.01F);
      assertTrue(homeLight4.isMovable());
      assertTrue(homeLight4.isResizable());
      assertTrue(homeLight4.isDeformable());
      assertNull(homeLight4.getShininess());
      assertEquals((-11.086381F), homeLight4.getWidth(), 0.01F);
      assertNull(homeLight4.getStaircaseCutOutShape());
      assertEquals(46.060883F, homeLight4.getY(), 0.01F);
      assertEquals(0.0F, homeLight4.getNameAngle(), 0.01F);
      assertEquals(0.19634955F, homeLight4.getX(), 0.01F);
      assertEquals(0.5F, homeLight4.getPower(), 0.01F);
      assertNull(homeLight4.getCurrency());
      assertEquals("", homeLight4.getCatalogId());
      assertEquals(0.0F, homeLight4.getNameYOffset(), 0.01F);
      assertEquals(92.121765F, homeLight4.getDepth(), 0.01F);
      assertNull(homeLight4.getColor());
      assertEquals((-727.8896F), homeLight4.getHeight(), 0.01F);
      assertEquals(0.0F, homeLight4.getAngle(), 0.01F);
      assertFalse(homeLight4.isModelMirrored());
      assertFalse(homeLight4.isBackFaceShown());
      assertFalse(homeLight4.isNameVisible());
      assertEquals("", homeLight4.getName());
      assertEquals(0.0F, homeLight4.getNameXOffset(), 0.01F);
      assertTrue(homeLight4.isTexturable());
      assertFalse(homeLight4.isDoorOrWindow());
      assertEquals("", homeLight4.getDescription());
      assertEquals(2, lightSourceArray0.length);
      assertNotSame(homeLight3, homeLight0);
      assertNotSame(homeLight3, homeLight4);
      assertNotSame(homeLight3, homeLight1);
      assertNotSame(homeLight3, homeLight2);
      assertNotSame(homeLight4, homeLight0);
      assertNotSame(homeLight4, homeLight1);
      assertNotSame(homeLight4, homeLight2);
      assertNotSame(homeLight4, homeLight3);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test223()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      assertFalse(boolean0);
      
      LightSource[] lightSourceArray0 = new LightSource[2];
      LightSource lightSource0 = new LightSource((-815.0011F), 0.0F, 0.0F, (-1541));
      assertEquals((-815.0011F), lightSource0.getX(), 0.01F);
      assertEquals(0.0F, lightSource0.getY(), 0.01F);
      assertNull(lightSource0.getDiameter());
      assertEquals(0.0F, lightSource0.getZ(), 0.01F);
      assertEquals((-1541), lightSource0.getColor());
      assertNotNull(lightSource0);
      
      lightSourceArray0[0] = lightSource0;
      LightSource lightSource1 = new LightSource((-1541), (-2278.261F), (-694.0F), 8192);
      assertFalse(lightSource1.equals((Object)lightSource0));
      assertEquals((-2278.261F), lightSource1.getY(), 0.01F);
      assertEquals((-694.0F), lightSource1.getZ(), 0.01F);
      assertEquals(8192, lightSource1.getColor());
      assertNull(lightSource1.getDiameter());
      assertEquals((-1541.0F), lightSource1.getX(), 0.01F);
      assertNotNull(lightSource1);
      
      BigDecimal bigDecimal0 = BigDecimal.TEN;
      assertEquals((byte)10, bigDecimal0.byteValue());
      assertEquals((short)10, bigDecimal0.shortValue());
      assertNotNull(bigDecimal0);
      
      CatalogLight catalogLight0 = new CatalogLight("/", "PRICE_VALUE_ADDED_TAX_INCLUDED", "PRICE_VALUE_ADDED_TAX_INCLUDED", (Content) null, (Content) null, 0.3926991F, 114.0F, 233.10785F, (-694.0F), true, lightSourceArray0, (float[][]) null, "{L", true, bigDecimal0, bigDecimal0);
      assertEquals((byte)10, bigDecimal0.byteValue());
      assertEquals((short)10, bigDecimal0.shortValue());
      assertNull(catalogLight0.getGrade());
      assertEquals("PRICE_VALUE_ADDED_TAX_INCLUDED", catalogLight0.getName());
      assertEquals("PRICE_VALUE_ADDED_TAX_INCLUDED", catalogLight0.getDescription());
      assertEquals("/", catalogLight0.getId());
      assertTrue(catalogLight0.isResizable());
      assertNull(catalogLight0.getInformation());
      assertTrue(catalogLight0.isDeformable());
      assertFalse(catalogLight0.isBackFaceShown());
      assertTrue(catalogLight0.isMovable());
      assertFalse(catalogLight0.isDoorOrWindow());
      assertEquals(233.10785F, catalogLight0.getHeight(), 0.01F);
      assertTrue(catalogLight0.isProportional());
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertTrue(catalogLight0.isTexturable());
      assertNull(catalogLight0.getCreationDate());
      assertEquals("{L", catalogLight0.getCreator());
      assertNull(catalogLight0.getColor());
      assertFalse(catalogLight0.isModifiable());
      assertEquals(114.0F, catalogLight0.getDepth(), 0.01F);
      assertEquals(0.3926991F, catalogLight0.getWidth(), 0.01F);
      assertNull(catalogLight0.getCurrency());
      assertEquals((-694.0F), catalogLight0.getElevation(), 0.01F);
      assertEquals(2, lightSourceArray0.length);
      assertNotNull(catalogLight0);
      
      HomeLight homeLight0 = new HomeLight(catalogLight0);
      assertEquals((byte)10, bigDecimal0.byteValue());
      assertEquals((short)10, bigDecimal0.shortValue());
      assertNull(catalogLight0.getGrade());
      assertEquals("PRICE_VALUE_ADDED_TAX_INCLUDED", catalogLight0.getName());
      assertEquals("PRICE_VALUE_ADDED_TAX_INCLUDED", catalogLight0.getDescription());
      assertEquals("/", catalogLight0.getId());
      assertTrue(catalogLight0.isResizable());
      assertNull(catalogLight0.getInformation());
      assertTrue(catalogLight0.isDeformable());
      assertFalse(catalogLight0.isBackFaceShown());
      assertTrue(catalogLight0.isMovable());
      assertFalse(catalogLight0.isDoorOrWindow());
      assertEquals(233.10785F, catalogLight0.getHeight(), 0.01F);
      assertTrue(catalogLight0.isProportional());
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertTrue(catalogLight0.isTexturable());
      assertNull(catalogLight0.getCreationDate());
      assertEquals("{L", catalogLight0.getCreator());
      assertNull(catalogLight0.getColor());
      assertFalse(catalogLight0.isModifiable());
      assertEquals(114.0F, catalogLight0.getDepth(), 0.01F);
      assertEquals(0.3926991F, catalogLight0.getWidth(), 0.01F);
      assertNull(catalogLight0.getCurrency());
      assertEquals((-694.0F), catalogLight0.getElevation(), 0.01F);
      assertNull(homeLight0.getShininess());
      assertTrue(homeLight0.isMovable());
      assertTrue(homeLight0.isResizable());
      assertEquals(57.0F, homeLight0.getY(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertEquals("/", homeLight0.getCatalogId());
      assertEquals("PRICE_VALUE_ADDED_TAX_INCLUDED", homeLight0.getName());
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertNull(homeLight0.getCurrency());
      assertEquals(0.19634955F, homeLight0.getX(), 0.01F);
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals(0.3926991F, homeLight0.getWidth(), 0.01F);
      assertEquals("PRICE_VALUE_ADDED_TAX_INCLUDED", homeLight0.getDescription());
      assertFalse(homeLight0.isDoorOrWindow());
      assertTrue(homeLight0.isTexturable());
      assertFalse(homeLight0.isModelMirrored());
      assertEquals(233.10785F, homeLight0.getHeight(), 0.01F);
      assertNull(homeLight0.getColor());
      assertFalse(homeLight0.isNameVisible());
      assertEquals(114.0F, homeLight0.getDepth(), 0.01F);
      assertFalse(homeLight0.isBackFaceShown());
      assertTrue(homeLight0.isVisible());
      assertEquals((-694.0F), homeLight0.getElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertTrue(homeLight0.isDeformable());
      assertEquals((-694.0F), homeLight0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertEquals(2, lightSourceArray0.length);
      assertNotNull(homeLight0);
      
      HomeLight homeLight1 = homeLight0.clone();
      assertFalse(homeLight1.equals((Object)homeLight0));
      assertEquals((byte)10, bigDecimal0.byteValue());
      assertEquals((short)10, bigDecimal0.shortValue());
      assertNull(catalogLight0.getGrade());
      assertEquals("PRICE_VALUE_ADDED_TAX_INCLUDED", catalogLight0.getName());
      assertEquals("PRICE_VALUE_ADDED_TAX_INCLUDED", catalogLight0.getDescription());
      assertEquals("/", catalogLight0.getId());
      assertTrue(catalogLight0.isResizable());
      assertNull(catalogLight0.getInformation());
      assertTrue(catalogLight0.isDeformable());
      assertFalse(catalogLight0.isBackFaceShown());
      assertTrue(catalogLight0.isMovable());
      assertFalse(catalogLight0.isDoorOrWindow());
      assertEquals(233.10785F, catalogLight0.getHeight(), 0.01F);
      assertTrue(catalogLight0.isProportional());
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertTrue(catalogLight0.isTexturable());
      assertNull(catalogLight0.getCreationDate());
      assertEquals("{L", catalogLight0.getCreator());
      assertNull(catalogLight0.getColor());
      assertFalse(catalogLight0.isModifiable());
      assertEquals(114.0F, catalogLight0.getDepth(), 0.01F);
      assertEquals(0.3926991F, catalogLight0.getWidth(), 0.01F);
      assertNull(catalogLight0.getCurrency());
      assertEquals((-694.0F), catalogLight0.getElevation(), 0.01F);
      assertNull(homeLight0.getShininess());
      assertTrue(homeLight0.isMovable());
      assertTrue(homeLight0.isResizable());
      assertEquals(57.0F, homeLight0.getY(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertEquals("/", homeLight0.getCatalogId());
      assertEquals("PRICE_VALUE_ADDED_TAX_INCLUDED", homeLight0.getName());
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertNull(homeLight0.getCurrency());
      assertEquals(0.19634955F, homeLight0.getX(), 0.01F);
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals(0.3926991F, homeLight0.getWidth(), 0.01F);
      assertEquals("PRICE_VALUE_ADDED_TAX_INCLUDED", homeLight0.getDescription());
      assertFalse(homeLight0.isDoorOrWindow());
      assertTrue(homeLight0.isTexturable());
      assertFalse(homeLight0.isModelMirrored());
      assertEquals(233.10785F, homeLight0.getHeight(), 0.01F);
      assertNull(homeLight0.getColor());
      assertFalse(homeLight0.isNameVisible());
      assertEquals(114.0F, homeLight0.getDepth(), 0.01F);
      assertFalse(homeLight0.isBackFaceShown());
      assertTrue(homeLight0.isVisible());
      assertEquals((-694.0F), homeLight0.getElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertTrue(homeLight0.isDeformable());
      assertEquals((-694.0F), homeLight0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertNull(homeLight1.getColor());
      assertEquals(233.10785F, homeLight1.getHeight(), 0.01F);
      assertFalse(homeLight1.isModelMirrored());
      assertNull(homeLight1.getCurrency());
      assertEquals(114.0F, homeLight1.getDepth(), 0.01F);
      assertFalse(homeLight1.isNameVisible());
      assertFalse(homeLight1.isBackFaceShown());
      assertEquals(0.0F, homeLight1.getNameYOffset(), 0.01F);
      assertEquals(0.3926991F, homeLight1.getWidth(), 0.01F);
      assertEquals("PRICE_VALUE_ADDED_TAX_INCLUDED", homeLight1.getDescription());
      assertEquals(0.0F, homeLight1.getNameAngle(), 0.01F);
      assertNull(homeLight1.getStaircaseCutOutShape());
      assertEquals("PRICE_VALUE_ADDED_TAX_INCLUDED", homeLight1.getName());
      assertEquals(57.0F, homeLight1.getY(), 0.01F);
      assertEquals(0.19634955F, homeLight1.getX(), 0.01F);
      assertTrue(homeLight1.isResizable());
      assertEquals(0.5F, homeLight1.getPower(), 0.01F);
      assertNull(homeLight1.getShininess());
      assertTrue(homeLight1.isMovable());
      assertEquals("/", homeLight1.getCatalogId());
      assertTrue(homeLight1.isDeformable());
      assertTrue(homeLight1.isVisible());
      assertTrue(homeLight1.isTexturable());
      assertEquals(0.0F, homeLight1.getAngle(), 0.01F);
      assertEquals((-694.0F), homeLight1.getElevation(), 0.01F);
      assertFalse(homeLight1.isDoorOrWindow());
      assertEquals(0.0F, homeLight1.getNameXOffset(), 0.01F);
      assertEquals((-694.0F), homeLight1.getGroundElevation(), 0.01F);
      assertEquals(2, lightSourceArray0.length);
      assertNotSame(homeLight0, homeLight1);
      assertNotSame(homeLight1, homeLight0);
      assertNotNull(homeLight1);
      
      homeLight1.setNameYOffset(233.10785F);
      assertFalse(homeLight0.equals((Object)homeLight1));
      assertFalse(homeLight1.equals((Object)homeLight0));
      assertEquals((byte)10, bigDecimal0.byteValue());
      assertEquals((short)10, bigDecimal0.shortValue());
      assertNull(catalogLight0.getGrade());
      assertEquals("PRICE_VALUE_ADDED_TAX_INCLUDED", catalogLight0.getName());
      assertEquals("PRICE_VALUE_ADDED_TAX_INCLUDED", catalogLight0.getDescription());
      assertEquals("/", catalogLight0.getId());
      assertTrue(catalogLight0.isResizable());
      assertNull(catalogLight0.getInformation());
      assertTrue(catalogLight0.isDeformable());
      assertFalse(catalogLight0.isBackFaceShown());
      assertTrue(catalogLight0.isMovable());
      assertFalse(catalogLight0.isDoorOrWindow());
      assertEquals(233.10785F, catalogLight0.getHeight(), 0.01F);
      assertTrue(catalogLight0.isProportional());
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertTrue(catalogLight0.isTexturable());
      assertNull(catalogLight0.getCreationDate());
      assertEquals("{L", catalogLight0.getCreator());
      assertNull(catalogLight0.getColor());
      assertFalse(catalogLight0.isModifiable());
      assertEquals(114.0F, catalogLight0.getDepth(), 0.01F);
      assertEquals(0.3926991F, catalogLight0.getWidth(), 0.01F);
      assertNull(catalogLight0.getCurrency());
      assertEquals((-694.0F), catalogLight0.getElevation(), 0.01F);
      assertNull(homeLight0.getShininess());
      assertTrue(homeLight0.isMovable());
      assertTrue(homeLight0.isResizable());
      assertEquals(57.0F, homeLight0.getY(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertEquals("/", homeLight0.getCatalogId());
      assertEquals("PRICE_VALUE_ADDED_TAX_INCLUDED", homeLight0.getName());
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertNull(homeLight0.getCurrency());
      assertEquals(0.19634955F, homeLight0.getX(), 0.01F);
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals(0.3926991F, homeLight0.getWidth(), 0.01F);
      assertEquals("PRICE_VALUE_ADDED_TAX_INCLUDED", homeLight0.getDescription());
      assertFalse(homeLight0.isDoorOrWindow());
      assertTrue(homeLight0.isTexturable());
      assertFalse(homeLight0.isModelMirrored());
      assertEquals(233.10785F, homeLight0.getHeight(), 0.01F);
      assertNull(homeLight0.getColor());
      assertFalse(homeLight0.isNameVisible());
      assertEquals(114.0F, homeLight0.getDepth(), 0.01F);
      assertFalse(homeLight0.isBackFaceShown());
      assertTrue(homeLight0.isVisible());
      assertEquals((-694.0F), homeLight0.getElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertTrue(homeLight0.isDeformable());
      assertEquals((-694.0F), homeLight0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertNull(homeLight1.getColor());
      assertEquals(233.10785F, homeLight1.getHeight(), 0.01F);
      assertFalse(homeLight1.isModelMirrored());
      assertNull(homeLight1.getCurrency());
      assertEquals(114.0F, homeLight1.getDepth(), 0.01F);
      assertFalse(homeLight1.isNameVisible());
      assertFalse(homeLight1.isBackFaceShown());
      assertEquals(0.3926991F, homeLight1.getWidth(), 0.01F);
      assertEquals("PRICE_VALUE_ADDED_TAX_INCLUDED", homeLight1.getDescription());
      assertEquals(0.0F, homeLight1.getNameAngle(), 0.01F);
      assertNull(homeLight1.getStaircaseCutOutShape());
      assertEquals("PRICE_VALUE_ADDED_TAX_INCLUDED", homeLight1.getName());
      assertEquals(57.0F, homeLight1.getY(), 0.01F);
      assertEquals(0.19634955F, homeLight1.getX(), 0.01F);
      assertTrue(homeLight1.isResizable());
      assertEquals(0.5F, homeLight1.getPower(), 0.01F);
      assertNull(homeLight1.getShininess());
      assertTrue(homeLight1.isMovable());
      assertEquals("/", homeLight1.getCatalogId());
      assertEquals(233.10785F, homeLight1.getNameYOffset(), 0.01F);
      assertTrue(homeLight1.isDeformable());
      assertTrue(homeLight1.isVisible());
      assertTrue(homeLight1.isTexturable());
      assertEquals(0.0F, homeLight1.getAngle(), 0.01F);
      assertEquals((-694.0F), homeLight1.getElevation(), 0.01F);
      assertFalse(homeLight1.isDoorOrWindow());
      assertEquals(0.0F, homeLight1.getNameXOffset(), 0.01F);
      assertEquals((-694.0F), homeLight1.getGroundElevation(), 0.01F);
      assertEquals(2, lightSourceArray0.length);
      assertNotSame(homeLight0, homeLight1);
      assertNotSame(homeLight1, homeLight0);
      
      HomeLight homeLight2 = (HomeLight)homeLight1.clone();
      assertFalse(homeLight0.equals((Object)homeLight1));
      assertFalse(homeLight1.equals((Object)homeLight0));
      assertFalse(homeLight2.equals((Object)homeLight0));
      assertFalse(homeLight2.equals((Object)homeLight1));
      assertEquals((byte)10, bigDecimal0.byteValue());
      assertEquals((short)10, bigDecimal0.shortValue());
      assertNull(catalogLight0.getGrade());
      assertEquals("PRICE_VALUE_ADDED_TAX_INCLUDED", catalogLight0.getName());
      assertEquals("PRICE_VALUE_ADDED_TAX_INCLUDED", catalogLight0.getDescription());
      assertEquals("/", catalogLight0.getId());
      assertTrue(catalogLight0.isResizable());
      assertNull(catalogLight0.getInformation());
      assertTrue(catalogLight0.isDeformable());
      assertFalse(catalogLight0.isBackFaceShown());
      assertTrue(catalogLight0.isMovable());
      assertFalse(catalogLight0.isDoorOrWindow());
      assertEquals(233.10785F, catalogLight0.getHeight(), 0.01F);
      assertTrue(catalogLight0.isProportional());
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertTrue(catalogLight0.isTexturable());
      assertNull(catalogLight0.getCreationDate());
      assertEquals("{L", catalogLight0.getCreator());
      assertNull(catalogLight0.getColor());
      assertFalse(catalogLight0.isModifiable());
      assertEquals(114.0F, catalogLight0.getDepth(), 0.01F);
      assertEquals(0.3926991F, catalogLight0.getWidth(), 0.01F);
      assertNull(catalogLight0.getCurrency());
      assertEquals((-694.0F), catalogLight0.getElevation(), 0.01F);
      assertNull(homeLight0.getShininess());
      assertTrue(homeLight0.isMovable());
      assertTrue(homeLight0.isResizable());
      assertEquals(57.0F, homeLight0.getY(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertEquals("/", homeLight0.getCatalogId());
      assertEquals("PRICE_VALUE_ADDED_TAX_INCLUDED", homeLight0.getName());
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertNull(homeLight0.getCurrency());
      assertEquals(0.19634955F, homeLight0.getX(), 0.01F);
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals(0.3926991F, homeLight0.getWidth(), 0.01F);
      assertEquals("PRICE_VALUE_ADDED_TAX_INCLUDED", homeLight0.getDescription());
      assertFalse(homeLight0.isDoorOrWindow());
      assertTrue(homeLight0.isTexturable());
      assertFalse(homeLight0.isModelMirrored());
      assertEquals(233.10785F, homeLight0.getHeight(), 0.01F);
      assertNull(homeLight0.getColor());
      assertFalse(homeLight0.isNameVisible());
      assertEquals(114.0F, homeLight0.getDepth(), 0.01F);
      assertFalse(homeLight0.isBackFaceShown());
      assertTrue(homeLight0.isVisible());
      assertEquals((-694.0F), homeLight0.getElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertTrue(homeLight0.isDeformable());
      assertEquals((-694.0F), homeLight0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertNull(homeLight1.getColor());
      assertEquals(233.10785F, homeLight1.getHeight(), 0.01F);
      assertFalse(homeLight1.isModelMirrored());
      assertNull(homeLight1.getCurrency());
      assertEquals(114.0F, homeLight1.getDepth(), 0.01F);
      assertFalse(homeLight1.isNameVisible());
      assertFalse(homeLight1.isBackFaceShown());
      assertEquals(0.3926991F, homeLight1.getWidth(), 0.01F);
      assertEquals("PRICE_VALUE_ADDED_TAX_INCLUDED", homeLight1.getDescription());
      assertEquals(0.0F, homeLight1.getNameAngle(), 0.01F);
      assertNull(homeLight1.getStaircaseCutOutShape());
      assertEquals("PRICE_VALUE_ADDED_TAX_INCLUDED", homeLight1.getName());
      assertEquals(57.0F, homeLight1.getY(), 0.01F);
      assertEquals(0.19634955F, homeLight1.getX(), 0.01F);
      assertTrue(homeLight1.isResizable());
      assertEquals(0.5F, homeLight1.getPower(), 0.01F);
      assertNull(homeLight1.getShininess());
      assertTrue(homeLight1.isMovable());
      assertEquals("/", homeLight1.getCatalogId());
      assertEquals(233.10785F, homeLight1.getNameYOffset(), 0.01F);
      assertTrue(homeLight1.isDeformable());
      assertTrue(homeLight1.isVisible());
      assertTrue(homeLight1.isTexturable());
      assertEquals(0.0F, homeLight1.getAngle(), 0.01F);
      assertEquals((-694.0F), homeLight1.getElevation(), 0.01F);
      assertFalse(homeLight1.isDoorOrWindow());
      assertEquals(0.0F, homeLight1.getNameXOffset(), 0.01F);
      assertEquals((-694.0F), homeLight1.getGroundElevation(), 0.01F);
      assertFalse(homeLight2.isNameVisible());
      assertNull(homeLight2.getCurrency());
      assertEquals(233.10785F, homeLight2.getHeight(), 0.01F);
      assertTrue(homeLight2.isVisible());
      assertTrue(homeLight2.isDeformable());
      assertNull(homeLight2.getColor());
      assertEquals(0.0F, homeLight2.getAngle(), 0.01F);
      assertTrue(homeLight2.isTexturable());
      assertFalse(homeLight2.isDoorOrWindow());
      assertFalse(homeLight2.isModelMirrored());
      assertEquals(114.0F, homeLight2.getDepth(), 0.01F);
      assertFalse(homeLight2.isBackFaceShown());
      assertEquals("/", homeLight2.getCatalogId());
      assertEquals(0.19634955F, homeLight2.getX(), 0.01F);
      assertEquals("PRICE_VALUE_ADDED_TAX_INCLUDED", homeLight2.getDescription());
      assertEquals((-694.0F), homeLight2.getElevation(), 0.01F);
      assertEquals(0.0F, homeLight2.getNameAngle(), 0.01F);
      assertEquals(0.5F, homeLight2.getPower(), 0.01F);
      assertNull(homeLight2.getStaircaseCutOutShape());
      assertTrue(homeLight2.isResizable());
      assertEquals(57.0F, homeLight2.getY(), 0.01F);
      assertEquals((-694.0F), homeLight2.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight2.getNameXOffset(), 0.01F);
      assertEquals(233.10785F, homeLight2.getNameYOffset(), 0.01F);
      assertNull(homeLight2.getShininess());
      assertEquals(0.3926991F, homeLight2.getWidth(), 0.01F);
      assertTrue(homeLight2.isMovable());
      assertEquals("PRICE_VALUE_ADDED_TAX_INCLUDED", homeLight2.getName());
      assertEquals(2, lightSourceArray0.length);
      assertNotSame(homeLight0, homeLight1);
      assertNotSame(homeLight0, homeLight2);
      assertNotSame(homeLight1, homeLight2);
      assertNotSame(homeLight1, homeLight0);
      assertNotSame(homeLight2, homeLight0);
      assertNotSame(homeLight2, homeLight1);
      assertNotNull(homeLight2);
      
      homeLight1.setModelMirrored(true);
      assertFalse(homeLight0.equals((Object)homeLight1));
      assertFalse(homeLight0.equals((Object)homeLight2));
      assertFalse(homeLight1.equals((Object)homeLight2));
      assertFalse(homeLight1.equals((Object)homeLight0));
      assertEquals((byte)10, bigDecimal0.byteValue());
      assertEquals((short)10, bigDecimal0.shortValue());
      assertNull(catalogLight0.getGrade());
      assertEquals("PRICE_VALUE_ADDED_TAX_INCLUDED", catalogLight0.getName());
      assertEquals("PRICE_VALUE_ADDED_TAX_INCLUDED", catalogLight0.getDescription());
      assertEquals("/", catalogLight0.getId());
      assertTrue(catalogLight0.isResizable());
      assertNull(catalogLight0.getInformation());
      assertTrue(catalogLight0.isDeformable());
      assertFalse(catalogLight0.isBackFaceShown());
      assertTrue(catalogLight0.isMovable());
      assertFalse(catalogLight0.isDoorOrWindow());
      assertEquals(233.10785F, catalogLight0.getHeight(), 0.01F);
      assertTrue(catalogLight0.isProportional());
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertTrue(catalogLight0.isTexturable());
      assertNull(catalogLight0.getCreationDate());
      assertEquals("{L", catalogLight0.getCreator());
      assertNull(catalogLight0.getColor());
      assertFalse(catalogLight0.isModifiable());
      assertEquals(114.0F, catalogLight0.getDepth(), 0.01F);
      assertEquals(0.3926991F, catalogLight0.getWidth(), 0.01F);
      assertNull(catalogLight0.getCurrency());
      assertEquals((-694.0F), catalogLight0.getElevation(), 0.01F);
      assertNull(homeLight0.getShininess());
      assertTrue(homeLight0.isMovable());
      assertTrue(homeLight0.isResizable());
      assertEquals(57.0F, homeLight0.getY(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertEquals("/", homeLight0.getCatalogId());
      assertEquals("PRICE_VALUE_ADDED_TAX_INCLUDED", homeLight0.getName());
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertNull(homeLight0.getCurrency());
      assertEquals(0.19634955F, homeLight0.getX(), 0.01F);
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals(0.3926991F, homeLight0.getWidth(), 0.01F);
      assertEquals("PRICE_VALUE_ADDED_TAX_INCLUDED", homeLight0.getDescription());
      assertFalse(homeLight0.isDoorOrWindow());
      assertTrue(homeLight0.isTexturable());
      assertFalse(homeLight0.isModelMirrored());
      assertEquals(233.10785F, homeLight0.getHeight(), 0.01F);
      assertNull(homeLight0.getColor());
      assertFalse(homeLight0.isNameVisible());
      assertEquals(114.0F, homeLight0.getDepth(), 0.01F);
      assertFalse(homeLight0.isBackFaceShown());
      assertTrue(homeLight0.isVisible());
      assertEquals((-694.0F), homeLight0.getElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertTrue(homeLight0.isDeformable());
      assertEquals((-694.0F), homeLight0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertNull(homeLight1.getColor());
      assertTrue(homeLight1.isModelMirrored());
      assertEquals(233.10785F, homeLight1.getHeight(), 0.01F);
      assertNull(homeLight1.getCurrency());
      assertEquals(114.0F, homeLight1.getDepth(), 0.01F);
      assertFalse(homeLight1.isNameVisible());
      assertFalse(homeLight1.isBackFaceShown());
      assertEquals(0.3926991F, homeLight1.getWidth(), 0.01F);
      assertEquals("PRICE_VALUE_ADDED_TAX_INCLUDED", homeLight1.getDescription());
      assertEquals(0.0F, homeLight1.getNameAngle(), 0.01F);
      assertNull(homeLight1.getStaircaseCutOutShape());
      assertEquals("PRICE_VALUE_ADDED_TAX_INCLUDED", homeLight1.getName());
      assertEquals(57.0F, homeLight1.getY(), 0.01F);
      assertEquals(0.19634955F, homeLight1.getX(), 0.01F);
      assertTrue(homeLight1.isResizable());
      assertEquals(0.5F, homeLight1.getPower(), 0.01F);
      assertNull(homeLight1.getShininess());
      assertTrue(homeLight1.isMovable());
      assertEquals("/", homeLight1.getCatalogId());
      assertEquals(233.10785F, homeLight1.getNameYOffset(), 0.01F);
      assertTrue(homeLight1.isDeformable());
      assertTrue(homeLight1.isVisible());
      assertTrue(homeLight1.isTexturable());
      assertEquals(0.0F, homeLight1.getAngle(), 0.01F);
      assertEquals((-694.0F), homeLight1.getElevation(), 0.01F);
      assertFalse(homeLight1.isDoorOrWindow());
      assertEquals(0.0F, homeLight1.getNameXOffset(), 0.01F);
      assertEquals((-694.0F), homeLight1.getGroundElevation(), 0.01F);
      assertEquals(2, lightSourceArray0.length);
      assertNotSame(homeLight0, homeLight1);
      assertNotSame(homeLight0, homeLight2);
      assertNotSame(homeLight1, homeLight2);
      assertNotSame(homeLight1, homeLight0);
      
      homeLight0.setDescription("fU.#i`,XJ/02pTQ");
      assertFalse(homeLight0.equals((Object)homeLight1));
      assertFalse(homeLight0.equals((Object)homeLight2));
      assertEquals((byte)10, bigDecimal0.byteValue());
      assertEquals((short)10, bigDecimal0.shortValue());
      assertNull(catalogLight0.getGrade());
      assertEquals("PRICE_VALUE_ADDED_TAX_INCLUDED", catalogLight0.getName());
      assertEquals("PRICE_VALUE_ADDED_TAX_INCLUDED", catalogLight0.getDescription());
      assertEquals("/", catalogLight0.getId());
      assertTrue(catalogLight0.isResizable());
      assertNull(catalogLight0.getInformation());
      assertTrue(catalogLight0.isDeformable());
      assertFalse(catalogLight0.isBackFaceShown());
      assertTrue(catalogLight0.isMovable());
      assertFalse(catalogLight0.isDoorOrWindow());
      assertEquals(233.10785F, catalogLight0.getHeight(), 0.01F);
      assertTrue(catalogLight0.isProportional());
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertTrue(catalogLight0.isTexturable());
      assertNull(catalogLight0.getCreationDate());
      assertEquals("{L", catalogLight0.getCreator());
      assertNull(catalogLight0.getColor());
      assertFalse(catalogLight0.isModifiable());
      assertEquals(114.0F, catalogLight0.getDepth(), 0.01F);
      assertEquals(0.3926991F, catalogLight0.getWidth(), 0.01F);
      assertNull(catalogLight0.getCurrency());
      assertEquals((-694.0F), catalogLight0.getElevation(), 0.01F);
      assertNull(homeLight0.getShininess());
      assertTrue(homeLight0.isMovable());
      assertTrue(homeLight0.isResizable());
      assertEquals(57.0F, homeLight0.getY(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertEquals("/", homeLight0.getCatalogId());
      assertEquals("PRICE_VALUE_ADDED_TAX_INCLUDED", homeLight0.getName());
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertNull(homeLight0.getCurrency());
      assertEquals(0.19634955F, homeLight0.getX(), 0.01F);
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals(0.3926991F, homeLight0.getWidth(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      assertTrue(homeLight0.isTexturable());
      assertFalse(homeLight0.isModelMirrored());
      assertEquals(233.10785F, homeLight0.getHeight(), 0.01F);
      assertNull(homeLight0.getColor());
      assertFalse(homeLight0.isNameVisible());
      assertEquals(114.0F, homeLight0.getDepth(), 0.01F);
      assertFalse(homeLight0.isBackFaceShown());
      assertTrue(homeLight0.isVisible());
      assertEquals((-694.0F), homeLight0.getElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertTrue(homeLight0.isDeformable());
      assertEquals((-694.0F), homeLight0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertEquals("fU.#i`,XJ/02pTQ", homeLight0.getDescription());
      assertEquals(2, lightSourceArray0.length);
      assertNotSame(homeLight0, homeLight1);
      assertNotSame(homeLight0, homeLight2);
      
      float float0 = homeLight2.getHeight();
      assertFalse(homeLight0.equals((Object)homeLight1));
      assertFalse(homeLight0.equals((Object)homeLight2));
      assertFalse(homeLight1.equals((Object)homeLight2));
      assertFalse(homeLight1.equals((Object)homeLight0));
      assertFalse(homeLight2.equals((Object)homeLight0));
      assertFalse(homeLight2.equals((Object)homeLight1));
      assertEquals((byte)10, bigDecimal0.byteValue());
      assertEquals((short)10, bigDecimal0.shortValue());
      assertNull(catalogLight0.getGrade());
      assertEquals("PRICE_VALUE_ADDED_TAX_INCLUDED", catalogLight0.getName());
      assertEquals("PRICE_VALUE_ADDED_TAX_INCLUDED", catalogLight0.getDescription());
      assertEquals("/", catalogLight0.getId());
      assertTrue(catalogLight0.isResizable());
      assertNull(catalogLight0.getInformation());
      assertTrue(catalogLight0.isDeformable());
      assertFalse(catalogLight0.isBackFaceShown());
      assertTrue(catalogLight0.isMovable());
      assertFalse(catalogLight0.isDoorOrWindow());
      assertEquals(233.10785F, catalogLight0.getHeight(), 0.01F);
      assertTrue(catalogLight0.isProportional());
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertTrue(catalogLight0.isTexturable());
      assertNull(catalogLight0.getCreationDate());
      assertEquals("{L", catalogLight0.getCreator());
      assertNull(catalogLight0.getColor());
      assertFalse(catalogLight0.isModifiable());
      assertEquals(114.0F, catalogLight0.getDepth(), 0.01F);
      assertEquals(0.3926991F, catalogLight0.getWidth(), 0.01F);
      assertNull(catalogLight0.getCurrency());
      assertEquals((-694.0F), catalogLight0.getElevation(), 0.01F);
      assertNull(homeLight0.getShininess());
      assertTrue(homeLight0.isMovable());
      assertTrue(homeLight0.isResizable());
      assertEquals(57.0F, homeLight0.getY(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertEquals("/", homeLight0.getCatalogId());
      assertEquals("PRICE_VALUE_ADDED_TAX_INCLUDED", homeLight0.getName());
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertNull(homeLight0.getCurrency());
      assertEquals(0.19634955F, homeLight0.getX(), 0.01F);
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals(0.3926991F, homeLight0.getWidth(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      assertTrue(homeLight0.isTexturable());
      assertFalse(homeLight0.isModelMirrored());
      assertEquals(233.10785F, homeLight0.getHeight(), 0.01F);
      assertNull(homeLight0.getColor());
      assertFalse(homeLight0.isNameVisible());
      assertEquals(114.0F, homeLight0.getDepth(), 0.01F);
      assertFalse(homeLight0.isBackFaceShown());
      assertTrue(homeLight0.isVisible());
      assertEquals((-694.0F), homeLight0.getElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertTrue(homeLight0.isDeformable());
      assertEquals((-694.0F), homeLight0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertEquals("fU.#i`,XJ/02pTQ", homeLight0.getDescription());
      assertNull(homeLight1.getColor());
      assertTrue(homeLight1.isModelMirrored());
      assertEquals(233.10785F, homeLight1.getHeight(), 0.01F);
      assertNull(homeLight1.getCurrency());
      assertEquals(114.0F, homeLight1.getDepth(), 0.01F);
      assertFalse(homeLight1.isNameVisible());
      assertFalse(homeLight1.isBackFaceShown());
      assertEquals(0.3926991F, homeLight1.getWidth(), 0.01F);
      assertEquals("PRICE_VALUE_ADDED_TAX_INCLUDED", homeLight1.getDescription());
      assertEquals(0.0F, homeLight1.getNameAngle(), 0.01F);
      assertNull(homeLight1.getStaircaseCutOutShape());
      assertEquals("PRICE_VALUE_ADDED_TAX_INCLUDED", homeLight1.getName());
      assertEquals(57.0F, homeLight1.getY(), 0.01F);
      assertEquals(0.19634955F, homeLight1.getX(), 0.01F);
      assertTrue(homeLight1.isResizable());
      assertEquals(0.5F, homeLight1.getPower(), 0.01F);
      assertNull(homeLight1.getShininess());
      assertTrue(homeLight1.isMovable());
      assertEquals("/", homeLight1.getCatalogId());
      assertEquals(233.10785F, homeLight1.getNameYOffset(), 0.01F);
      assertTrue(homeLight1.isDeformable());
      assertTrue(homeLight1.isVisible());
      assertTrue(homeLight1.isTexturable());
      assertEquals(0.0F, homeLight1.getAngle(), 0.01F);
      assertEquals((-694.0F), homeLight1.getElevation(), 0.01F);
      assertFalse(homeLight1.isDoorOrWindow());
      assertEquals(0.0F, homeLight1.getNameXOffset(), 0.01F);
      assertEquals((-694.0F), homeLight1.getGroundElevation(), 0.01F);
      assertFalse(homeLight2.isNameVisible());
      assertNull(homeLight2.getCurrency());
      assertEquals(233.10785F, homeLight2.getHeight(), 0.01F);
      assertTrue(homeLight2.isVisible());
      assertTrue(homeLight2.isDeformable());
      assertNull(homeLight2.getColor());
      assertEquals(0.0F, homeLight2.getAngle(), 0.01F);
      assertTrue(homeLight2.isTexturable());
      assertFalse(homeLight2.isDoorOrWindow());
      assertFalse(homeLight2.isModelMirrored());
      assertEquals(114.0F, homeLight2.getDepth(), 0.01F);
      assertFalse(homeLight2.isBackFaceShown());
      assertEquals("/", homeLight2.getCatalogId());
      assertEquals(0.19634955F, homeLight2.getX(), 0.01F);
      assertEquals("PRICE_VALUE_ADDED_TAX_INCLUDED", homeLight2.getDescription());
      assertEquals((-694.0F), homeLight2.getElevation(), 0.01F);
      assertEquals(0.0F, homeLight2.getNameAngle(), 0.01F);
      assertEquals(0.5F, homeLight2.getPower(), 0.01F);
      assertNull(homeLight2.getStaircaseCutOutShape());
      assertTrue(homeLight2.isResizable());
      assertEquals(57.0F, homeLight2.getY(), 0.01F);
      assertEquals((-694.0F), homeLight2.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight2.getNameXOffset(), 0.01F);
      assertEquals(233.10785F, homeLight2.getNameYOffset(), 0.01F);
      assertNull(homeLight2.getShininess());
      assertEquals(0.3926991F, homeLight2.getWidth(), 0.01F);
      assertTrue(homeLight2.isMovable());
      assertEquals("PRICE_VALUE_ADDED_TAX_INCLUDED", homeLight2.getName());
      assertEquals(2, lightSourceArray0.length);
      assertNotSame(homeLight0, homeLight1);
      assertNotSame(homeLight0, homeLight2);
      assertNotSame(homeLight1, homeLight2);
      assertNotSame(homeLight1, homeLight0);
      assertNotSame(homeLight2, homeLight0);
      assertNotSame(homeLight2, homeLight1);
      assertEquals(233.10785F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test224()  throws Throwable  {
      LightSource[] lightSourceArray0 = new LightSource[2];
      LightSource lightSource0 = new LightSource((-815.0F), 0.0F, 0.0F, 114);
      assertNull(lightSource0.getDiameter());
      assertEquals(0.0F, lightSource0.getY(), 0.01F);
      assertEquals(0.0F, lightSource0.getZ(), 0.01F);
      assertEquals((-815.0F), lightSource0.getX(), 0.01F);
      assertEquals(114, lightSource0.getColor());
      assertNotNull(lightSource0);
      
      LightSource lightSource1 = new LightSource((-815.0F), (-1.0F), (-127.62969F), (-174));
      assertFalse(lightSource1.equals((Object)lightSource0));
      assertEquals((-174), lightSource1.getColor());
      assertEquals((-127.62969F), lightSource1.getZ(), 0.01F);
      assertEquals((-815.0F), lightSource1.getX(), 0.01F);
      assertEquals((-1.0F), lightSource1.getY(), 0.01F);
      assertNull(lightSource1.getDiameter());
      assertNotNull(lightSource1);
      
      BigDecimal bigDecimal0 = BigDecimal.ZERO;
      assertEquals((byte)0, bigDecimal0.byteValue());
      assertEquals((short)0, bigDecimal0.shortValue());
      assertNotNull(bigDecimal0);
      
      CatalogLight catalogLight0 = new CatalogLight("h&*+\"", "h&*+\"", "h&*+\"", (Content) null, (Content) null, 0.0F, 0.0F, 2965.994F, (-694.0F), false, lightSourceArray0, (float[][]) null, "ELEVATION", true, bigDecimal0, bigDecimal0);
      assertEquals((byte)0, bigDecimal0.byteValue());
      assertEquals((short)0, bigDecimal0.shortValue());
      assertFalse(catalogLight0.isMovable());
      assertNull(catalogLight0.getInformation());
      assertTrue(catalogLight0.isDeformable());
      assertTrue(catalogLight0.isResizable());
      assertEquals(0.0F, catalogLight0.getDepth(), 0.01F);
      assertEquals("ELEVATION", catalogLight0.getCreator());
      assertFalse(catalogLight0.isModifiable());
      assertEquals("h&*+\"", catalogLight0.getDescription());
      assertNull(catalogLight0.getCreationDate());
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertEquals(2965.994F, catalogLight0.getHeight(), 0.01F);
      assertTrue(catalogLight0.isProportional());
      assertEquals((-694.0F), catalogLight0.getElevation(), 0.01F);
      assertTrue(catalogLight0.isTexturable());
      assertNull(catalogLight0.getCurrency());
      assertEquals("h&*+\"", catalogLight0.getId());
      assertEquals(0.0F, catalogLight0.getWidth(), 0.01F);
      assertNull(catalogLight0.getColor());
      assertNull(catalogLight0.getGrade());
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertFalse(catalogLight0.isDoorOrWindow());
      assertEquals("h&*+\"", catalogLight0.getName());
      assertFalse(catalogLight0.isBackFaceShown());
      assertEquals(2, lightSourceArray0.length);
      assertNotNull(catalogLight0);
      
      FurnitureCategory furnitureCategory0 = new FurnitureCategory("ELEVATION");
      assertEquals("ELEVATION", furnitureCategory0.getName());
      assertEquals(0, furnitureCategory0.getFurnitureCount());
      assertNotNull(furnitureCategory0);
      
      catalogLight0.setCategory(furnitureCategory0);
      assertEquals((byte)0, bigDecimal0.byteValue());
      assertEquals((short)0, bigDecimal0.shortValue());
      assertFalse(catalogLight0.isMovable());
      assertNull(catalogLight0.getInformation());
      assertTrue(catalogLight0.isDeformable());
      assertTrue(catalogLight0.isResizable());
      assertEquals(0.0F, catalogLight0.getDepth(), 0.01F);
      assertEquals("ELEVATION", catalogLight0.getCreator());
      assertFalse(catalogLight0.isModifiable());
      assertEquals("h&*+\"", catalogLight0.getDescription());
      assertNull(catalogLight0.getCreationDate());
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertEquals(2965.994F, catalogLight0.getHeight(), 0.01F);
      assertTrue(catalogLight0.isProportional());
      assertEquals((-694.0F), catalogLight0.getElevation(), 0.01F);
      assertTrue(catalogLight0.isTexturable());
      assertNull(catalogLight0.getCurrency());
      assertEquals("h&*+\"", catalogLight0.getId());
      assertEquals(0.0F, catalogLight0.getWidth(), 0.01F);
      assertNull(catalogLight0.getColor());
      assertNull(catalogLight0.getGrade());
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertFalse(catalogLight0.isDoorOrWindow());
      assertEquals("h&*+\"", catalogLight0.getName());
      assertFalse(catalogLight0.isBackFaceShown());
      assertEquals("ELEVATION", furnitureCategory0.getName());
      assertEquals(0, furnitureCategory0.getFurnitureCount());
      assertEquals(2, lightSourceArray0.length);
      
      HomeLight homeLight0 = new HomeLight(catalogLight0);
      assertEquals((byte)0, bigDecimal0.byteValue());
      assertEquals((short)0, bigDecimal0.shortValue());
      assertFalse(catalogLight0.isMovable());
      assertNull(catalogLight0.getInformation());
      assertTrue(catalogLight0.isDeformable());
      assertTrue(catalogLight0.isResizable());
      assertEquals(0.0F, catalogLight0.getDepth(), 0.01F);
      assertEquals("ELEVATION", catalogLight0.getCreator());
      assertFalse(catalogLight0.isModifiable());
      assertEquals("h&*+\"", catalogLight0.getDescription());
      assertNull(catalogLight0.getCreationDate());
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertEquals(2965.994F, catalogLight0.getHeight(), 0.01F);
      assertTrue(catalogLight0.isProportional());
      assertEquals((-694.0F), catalogLight0.getElevation(), 0.01F);
      assertTrue(catalogLight0.isTexturable());
      assertNull(catalogLight0.getCurrency());
      assertEquals("h&*+\"", catalogLight0.getId());
      assertEquals(0.0F, catalogLight0.getWidth(), 0.01F);
      assertNull(catalogLight0.getColor());
      assertNull(catalogLight0.getGrade());
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertFalse(catalogLight0.isDoorOrWindow());
      assertEquals("h&*+\"", catalogLight0.getName());
      assertFalse(catalogLight0.isBackFaceShown());
      assertNull(homeLight0.getColor());
      assertFalse(homeLight0.isNameVisible());
      assertFalse(homeLight0.isModelMirrored());
      assertFalse(homeLight0.isBackFaceShown());
      assertFalse(homeLight0.isMovable());
      assertNull(homeLight0.getCurrency());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertEquals("h&*+\"", homeLight0.getCatalogId());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals("h&*+\"", homeLight0.getDescription());
      assertEquals("h&*+\"", homeLight0.getName());
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertTrue(homeLight0.isResizable());
      assertNull(homeLight0.getShininess());
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertEquals(2965.994F, homeLight0.getHeight(), 0.01F);
      assertEquals((-694.0F), homeLight0.getGroundElevation(), 0.01F);
      assertTrue(homeLight0.isVisible());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertTrue(homeLight0.isDeformable());
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertEquals((-694.0F), homeLight0.getElevation(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      assertTrue(homeLight0.isTexturable());
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertEquals(2, lightSourceArray0.length);
      assertNotNull(homeLight0);
      
      homeLight0.setY((-127.62969F));
      assertEquals((byte)0, bigDecimal0.byteValue());
      assertEquals((short)0, bigDecimal0.shortValue());
      assertFalse(catalogLight0.isMovable());
      assertNull(catalogLight0.getInformation());
      assertTrue(catalogLight0.isDeformable());
      assertTrue(catalogLight0.isResizable());
      assertEquals(0.0F, catalogLight0.getDepth(), 0.01F);
      assertEquals("ELEVATION", catalogLight0.getCreator());
      assertFalse(catalogLight0.isModifiable());
      assertEquals("h&*+\"", catalogLight0.getDescription());
      assertNull(catalogLight0.getCreationDate());
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertEquals(2965.994F, catalogLight0.getHeight(), 0.01F);
      assertTrue(catalogLight0.isProportional());
      assertEquals((-694.0F), catalogLight0.getElevation(), 0.01F);
      assertTrue(catalogLight0.isTexturable());
      assertNull(catalogLight0.getCurrency());
      assertEquals("h&*+\"", catalogLight0.getId());
      assertEquals(0.0F, catalogLight0.getWidth(), 0.01F);
      assertNull(catalogLight0.getColor());
      assertNull(catalogLight0.getGrade());
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertFalse(catalogLight0.isDoorOrWindow());
      assertEquals("h&*+\"", catalogLight0.getName());
      assertFalse(catalogLight0.isBackFaceShown());
      assertNull(homeLight0.getColor());
      assertFalse(homeLight0.isNameVisible());
      assertFalse(homeLight0.isModelMirrored());
      assertFalse(homeLight0.isBackFaceShown());
      assertFalse(homeLight0.isMovable());
      assertEquals((-127.62969F), homeLight0.getY(), 0.01F);
      assertNull(homeLight0.getCurrency());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertEquals("h&*+\"", homeLight0.getCatalogId());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals("h&*+\"", homeLight0.getDescription());
      assertEquals("h&*+\"", homeLight0.getName());
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertTrue(homeLight0.isResizable());
      assertNull(homeLight0.getShininess());
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertEquals(2965.994F, homeLight0.getHeight(), 0.01F);
      assertEquals((-694.0F), homeLight0.getGroundElevation(), 0.01F);
      assertTrue(homeLight0.isVisible());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertTrue(homeLight0.isDeformable());
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertEquals((-694.0F), homeLight0.getElevation(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      assertTrue(homeLight0.isTexturable());
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertEquals(2, lightSourceArray0.length);
      
      HomeLight homeLight1 = homeLight0.clone();
      assertFalse(homeLight1.equals((Object)homeLight0));
      assertEquals((byte)0, bigDecimal0.byteValue());
      assertEquals((short)0, bigDecimal0.shortValue());
      assertFalse(catalogLight0.isMovable());
      assertNull(catalogLight0.getInformation());
      assertTrue(catalogLight0.isDeformable());
      assertTrue(catalogLight0.isResizable());
      assertEquals(0.0F, catalogLight0.getDepth(), 0.01F);
      assertEquals("ELEVATION", catalogLight0.getCreator());
      assertFalse(catalogLight0.isModifiable());
      assertEquals("h&*+\"", catalogLight0.getDescription());
      assertNull(catalogLight0.getCreationDate());
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertEquals(2965.994F, catalogLight0.getHeight(), 0.01F);
      assertTrue(catalogLight0.isProportional());
      assertEquals((-694.0F), catalogLight0.getElevation(), 0.01F);
      assertTrue(catalogLight0.isTexturable());
      assertNull(catalogLight0.getCurrency());
      assertEquals("h&*+\"", catalogLight0.getId());
      assertEquals(0.0F, catalogLight0.getWidth(), 0.01F);
      assertNull(catalogLight0.getColor());
      assertNull(catalogLight0.getGrade());
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertFalse(catalogLight0.isDoorOrWindow());
      assertEquals("h&*+\"", catalogLight0.getName());
      assertFalse(catalogLight0.isBackFaceShown());
      assertNull(homeLight0.getColor());
      assertFalse(homeLight0.isNameVisible());
      assertFalse(homeLight0.isModelMirrored());
      assertFalse(homeLight0.isBackFaceShown());
      assertFalse(homeLight0.isMovable());
      assertEquals((-127.62969F), homeLight0.getY(), 0.01F);
      assertNull(homeLight0.getCurrency());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertEquals("h&*+\"", homeLight0.getCatalogId());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals("h&*+\"", homeLight0.getDescription());
      assertEquals("h&*+\"", homeLight0.getName());
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertTrue(homeLight0.isResizable());
      assertNull(homeLight0.getShininess());
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertEquals(2965.994F, homeLight0.getHeight(), 0.01F);
      assertEquals((-694.0F), homeLight0.getGroundElevation(), 0.01F);
      assertTrue(homeLight0.isVisible());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertTrue(homeLight0.isDeformable());
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertEquals((-694.0F), homeLight0.getElevation(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      assertTrue(homeLight0.isTexturable());
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertNull(homeLight1.getColor());
      assertFalse(homeLight1.isNameVisible());
      assertFalse(homeLight1.isModelMirrored());
      assertFalse(homeLight1.isBackFaceShown());
      assertEquals(0.0F, homeLight1.getNameYOffset(), 0.01F);
      assertFalse(homeLight1.isMovable());
      assertEquals((-127.62969F), homeLight1.getY(), 0.01F);
      assertEquals("h&*+\"", homeLight1.getCatalogId());
      assertNull(homeLight1.getCurrency());
      assertEquals(0.5F, homeLight1.getPower(), 0.01F);
      assertEquals("h&*+\"", homeLight1.getName());
      assertNull(homeLight1.getStaircaseCutOutShape());
      assertTrue(homeLight1.isResizable());
      assertEquals(0.0F, homeLight1.getDepth(), 0.01F);
      assertNull(homeLight1.getShininess());
      assertEquals(0.0F, homeLight1.getNameAngle(), 0.01F);
      assertEquals(2965.994F, homeLight1.getHeight(), 0.01F);
      assertTrue(homeLight1.isVisible());
      assertEquals((-694.0F), homeLight1.getGroundElevation(), 0.01F);
      assertTrue(homeLight1.isDeformable());
      assertEquals(0.0F, homeLight1.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeLight1.getX(), 0.01F);
      assertEquals((-694.0F), homeLight1.getElevation(), 0.01F);
      assertTrue(homeLight1.isTexturable());
      assertEquals(0.0F, homeLight1.getAngle(), 0.01F);
      assertEquals(0.0F, homeLight1.getWidth(), 0.01F);
      assertEquals("h&*+\"", homeLight1.getDescription());
      assertFalse(homeLight1.isDoorOrWindow());
      assertEquals(2, lightSourceArray0.length);
      assertNotSame(homeLight0, homeLight1);
      assertNotSame(homeLight1, homeLight0);
      assertNotNull(homeLight1);
      
      boolean boolean0 = homeLight1.isTopLeftPointAt((-127.62969F), (-174), 2965.994F);
      assertFalse(homeLight0.equals((Object)homeLight1));
      assertFalse(homeLight1.equals((Object)homeLight0));
      assertEquals((byte)0, bigDecimal0.byteValue());
      assertEquals((short)0, bigDecimal0.shortValue());
      assertFalse(catalogLight0.isMovable());
      assertNull(catalogLight0.getInformation());
      assertTrue(catalogLight0.isDeformable());
      assertTrue(catalogLight0.isResizable());
      assertEquals(0.0F, catalogLight0.getDepth(), 0.01F);
      assertEquals("ELEVATION", catalogLight0.getCreator());
      assertFalse(catalogLight0.isModifiable());
      assertEquals("h&*+\"", catalogLight0.getDescription());
      assertNull(catalogLight0.getCreationDate());
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertEquals(2965.994F, catalogLight0.getHeight(), 0.01F);
      assertTrue(catalogLight0.isProportional());
      assertEquals((-694.0F), catalogLight0.getElevation(), 0.01F);
      assertTrue(catalogLight0.isTexturable());
      assertNull(catalogLight0.getCurrency());
      assertEquals("h&*+\"", catalogLight0.getId());
      assertEquals(0.0F, catalogLight0.getWidth(), 0.01F);
      assertNull(catalogLight0.getColor());
      assertNull(catalogLight0.getGrade());
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertFalse(catalogLight0.isDoorOrWindow());
      assertEquals("h&*+\"", catalogLight0.getName());
      assertFalse(catalogLight0.isBackFaceShown());
      assertNull(homeLight0.getColor());
      assertFalse(homeLight0.isNameVisible());
      assertFalse(homeLight0.isModelMirrored());
      assertFalse(homeLight0.isBackFaceShown());
      assertFalse(homeLight0.isMovable());
      assertEquals((-127.62969F), homeLight0.getY(), 0.01F);
      assertNull(homeLight0.getCurrency());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertEquals("h&*+\"", homeLight0.getCatalogId());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals("h&*+\"", homeLight0.getDescription());
      assertEquals("h&*+\"", homeLight0.getName());
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertTrue(homeLight0.isResizable());
      assertNull(homeLight0.getShininess());
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertEquals(2965.994F, homeLight0.getHeight(), 0.01F);
      assertEquals((-694.0F), homeLight0.getGroundElevation(), 0.01F);
      assertTrue(homeLight0.isVisible());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertTrue(homeLight0.isDeformable());
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertEquals((-694.0F), homeLight0.getElevation(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      assertTrue(homeLight0.isTexturable());
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertNull(homeLight1.getColor());
      assertFalse(homeLight1.isNameVisible());
      assertFalse(homeLight1.isModelMirrored());
      assertFalse(homeLight1.isBackFaceShown());
      assertEquals(0.0F, homeLight1.getNameYOffset(), 0.01F);
      assertFalse(homeLight1.isMovable());
      assertEquals((-127.62969F), homeLight1.getY(), 0.01F);
      assertEquals("h&*+\"", homeLight1.getCatalogId());
      assertNull(homeLight1.getCurrency());
      assertEquals(0.5F, homeLight1.getPower(), 0.01F);
      assertEquals("h&*+\"", homeLight1.getName());
      assertNull(homeLight1.getStaircaseCutOutShape());
      assertTrue(homeLight1.isResizable());
      assertEquals(0.0F, homeLight1.getDepth(), 0.01F);
      assertNull(homeLight1.getShininess());
      assertEquals(0.0F, homeLight1.getNameAngle(), 0.01F);
      assertEquals(2965.994F, homeLight1.getHeight(), 0.01F);
      assertTrue(homeLight1.isVisible());
      assertEquals((-694.0F), homeLight1.getGroundElevation(), 0.01F);
      assertTrue(homeLight1.isDeformable());
      assertEquals(0.0F, homeLight1.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeLight1.getX(), 0.01F);
      assertEquals((-694.0F), homeLight1.getElevation(), 0.01F);
      assertTrue(homeLight1.isTexturable());
      assertEquals(0.0F, homeLight1.getAngle(), 0.01F);
      assertEquals(0.0F, homeLight1.getWidth(), 0.01F);
      assertEquals("h&*+\"", homeLight1.getDescription());
      assertFalse(homeLight1.isDoorOrWindow());
      assertEquals(2, lightSourceArray0.length);
      assertNotSame(homeLight0, homeLight1);
      assertNotSame(homeLight1, homeLight0);
      assertFalse(boolean0);
      
      boolean boolean1 = homeLight1.intersectsRectangle(0.7543064F, (-1581.4954F), (-1581.4954F), 3737.9102F);
      assertFalse(homeLight0.equals((Object)homeLight1));
      assertFalse(homeLight1.equals((Object)homeLight0));
      assertFalse(boolean1 == boolean0);
      assertEquals((byte)0, bigDecimal0.byteValue());
      assertEquals((short)0, bigDecimal0.shortValue());
      assertFalse(catalogLight0.isMovable());
      assertNull(catalogLight0.getInformation());
      assertTrue(catalogLight0.isDeformable());
      assertTrue(catalogLight0.isResizable());
      assertEquals(0.0F, catalogLight0.getDepth(), 0.01F);
      assertEquals("ELEVATION", catalogLight0.getCreator());
      assertFalse(catalogLight0.isModifiable());
      assertEquals("h&*+\"", catalogLight0.getDescription());
      assertNull(catalogLight0.getCreationDate());
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertEquals(2965.994F, catalogLight0.getHeight(), 0.01F);
      assertTrue(catalogLight0.isProportional());
      assertEquals((-694.0F), catalogLight0.getElevation(), 0.01F);
      assertTrue(catalogLight0.isTexturable());
      assertNull(catalogLight0.getCurrency());
      assertEquals("h&*+\"", catalogLight0.getId());
      assertEquals(0.0F, catalogLight0.getWidth(), 0.01F);
      assertNull(catalogLight0.getColor());
      assertNull(catalogLight0.getGrade());
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertFalse(catalogLight0.isDoorOrWindow());
      assertEquals("h&*+\"", catalogLight0.getName());
      assertFalse(catalogLight0.isBackFaceShown());
      assertNull(homeLight0.getColor());
      assertFalse(homeLight0.isNameVisible());
      assertFalse(homeLight0.isModelMirrored());
      assertFalse(homeLight0.isBackFaceShown());
      assertFalse(homeLight0.isMovable());
      assertEquals((-127.62969F), homeLight0.getY(), 0.01F);
      assertNull(homeLight0.getCurrency());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertEquals("h&*+\"", homeLight0.getCatalogId());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals("h&*+\"", homeLight0.getDescription());
      assertEquals("h&*+\"", homeLight0.getName());
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertTrue(homeLight0.isResizable());
      assertNull(homeLight0.getShininess());
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertEquals(2965.994F, homeLight0.getHeight(), 0.01F);
      assertEquals((-694.0F), homeLight0.getGroundElevation(), 0.01F);
      assertTrue(homeLight0.isVisible());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertTrue(homeLight0.isDeformable());
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertEquals((-694.0F), homeLight0.getElevation(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      assertTrue(homeLight0.isTexturable());
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertNull(homeLight1.getColor());
      assertFalse(homeLight1.isNameVisible());
      assertFalse(homeLight1.isModelMirrored());
      assertFalse(homeLight1.isBackFaceShown());
      assertEquals(0.0F, homeLight1.getNameYOffset(), 0.01F);
      assertFalse(homeLight1.isMovable());
      assertEquals((-127.62969F), homeLight1.getY(), 0.01F);
      assertEquals("h&*+\"", homeLight1.getCatalogId());
      assertNull(homeLight1.getCurrency());
      assertEquals(0.5F, homeLight1.getPower(), 0.01F);
      assertEquals("h&*+\"", homeLight1.getName());
      assertNull(homeLight1.getStaircaseCutOutShape());
      assertTrue(homeLight1.isResizable());
      assertEquals(0.0F, homeLight1.getDepth(), 0.01F);
      assertNull(homeLight1.getShininess());
      assertEquals(0.0F, homeLight1.getNameAngle(), 0.01F);
      assertEquals(2965.994F, homeLight1.getHeight(), 0.01F);
      assertTrue(homeLight1.isVisible());
      assertEquals((-694.0F), homeLight1.getGroundElevation(), 0.01F);
      assertTrue(homeLight1.isDeformable());
      assertEquals(0.0F, homeLight1.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeLight1.getX(), 0.01F);
      assertEquals((-694.0F), homeLight1.getElevation(), 0.01F);
      assertTrue(homeLight1.isTexturable());
      assertEquals(0.0F, homeLight1.getAngle(), 0.01F);
      assertEquals(0.0F, homeLight1.getWidth(), 0.01F);
      assertEquals("h&*+\"", homeLight1.getDescription());
      assertFalse(homeLight1.isDoorOrWindow());
      assertEquals(2, lightSourceArray0.length);
      assertNotSame(homeLight0, homeLight1);
      assertNotSame(homeLight1, homeLight0);
      assertTrue(boolean1);
      
      float float0 = homeLight1.getWidth();
      assertFalse(homeLight0.equals((Object)homeLight1));
      assertFalse(homeLight1.equals((Object)homeLight0));
      assertEquals((byte)0, bigDecimal0.byteValue());
      assertEquals((short)0, bigDecimal0.shortValue());
      assertFalse(catalogLight0.isMovable());
      assertNull(catalogLight0.getInformation());
      assertTrue(catalogLight0.isDeformable());
      assertTrue(catalogLight0.isResizable());
      assertEquals(0.0F, catalogLight0.getDepth(), 0.01F);
      assertEquals("ELEVATION", catalogLight0.getCreator());
      assertFalse(catalogLight0.isModifiable());
      assertEquals("h&*+\"", catalogLight0.getDescription());
      assertNull(catalogLight0.getCreationDate());
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertEquals(2965.994F, catalogLight0.getHeight(), 0.01F);
      assertTrue(catalogLight0.isProportional());
      assertEquals((-694.0F), catalogLight0.getElevation(), 0.01F);
      assertTrue(catalogLight0.isTexturable());
      assertNull(catalogLight0.getCurrency());
      assertEquals("h&*+\"", catalogLight0.getId());
      assertEquals(0.0F, catalogLight0.getWidth(), 0.01F);
      assertNull(catalogLight0.getColor());
      assertNull(catalogLight0.getGrade());
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertFalse(catalogLight0.isDoorOrWindow());
      assertEquals("h&*+\"", catalogLight0.getName());
      assertFalse(catalogLight0.isBackFaceShown());
      assertNull(homeLight0.getColor());
      assertFalse(homeLight0.isNameVisible());
      assertFalse(homeLight0.isModelMirrored());
      assertFalse(homeLight0.isBackFaceShown());
      assertFalse(homeLight0.isMovable());
      assertEquals((-127.62969F), homeLight0.getY(), 0.01F);
      assertNull(homeLight0.getCurrency());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertEquals("h&*+\"", homeLight0.getCatalogId());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals("h&*+\"", homeLight0.getDescription());
      assertEquals("h&*+\"", homeLight0.getName());
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertTrue(homeLight0.isResizable());
      assertNull(homeLight0.getShininess());
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertEquals(2965.994F, homeLight0.getHeight(), 0.01F);
      assertEquals((-694.0F), homeLight0.getGroundElevation(), 0.01F);
      assertTrue(homeLight0.isVisible());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertTrue(homeLight0.isDeformable());
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertEquals((-694.0F), homeLight0.getElevation(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      assertTrue(homeLight0.isTexturable());
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertNull(homeLight1.getColor());
      assertFalse(homeLight1.isNameVisible());
      assertFalse(homeLight1.isModelMirrored());
      assertFalse(homeLight1.isBackFaceShown());
      assertEquals(0.0F, homeLight1.getNameYOffset(), 0.01F);
      assertFalse(homeLight1.isMovable());
      assertEquals((-127.62969F), homeLight1.getY(), 0.01F);
      assertEquals("h&*+\"", homeLight1.getCatalogId());
      assertNull(homeLight1.getCurrency());
      assertEquals(0.5F, homeLight1.getPower(), 0.01F);
      assertEquals("h&*+\"", homeLight1.getName());
      assertNull(homeLight1.getStaircaseCutOutShape());
      assertTrue(homeLight1.isResizable());
      assertEquals(0.0F, homeLight1.getDepth(), 0.01F);
      assertNull(homeLight1.getShininess());
      assertEquals(0.0F, homeLight1.getNameAngle(), 0.01F);
      assertEquals(2965.994F, homeLight1.getHeight(), 0.01F);
      assertTrue(homeLight1.isVisible());
      assertEquals((-694.0F), homeLight1.getGroundElevation(), 0.01F);
      assertTrue(homeLight1.isDeformable());
      assertEquals(0.0F, homeLight1.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeLight1.getX(), 0.01F);
      assertEquals((-694.0F), homeLight1.getElevation(), 0.01F);
      assertTrue(homeLight1.isTexturable());
      assertEquals(0.0F, homeLight1.getAngle(), 0.01F);
      assertEquals(0.0F, homeLight1.getWidth(), 0.01F);
      assertEquals("h&*+\"", homeLight1.getDescription());
      assertFalse(homeLight1.isDoorOrWindow());
      assertEquals(2, lightSourceArray0.length);
      assertNotSame(homeLight0, homeLight1);
      assertNotSame(homeLight1, homeLight0);
      assertEquals(0.0F, float0, 0.01F);
      
      homeLight1.setMovable(false);
      assertFalse(homeLight0.equals((Object)homeLight1));
      assertFalse(homeLight1.equals((Object)homeLight0));
      assertEquals((byte)0, bigDecimal0.byteValue());
      assertEquals((short)0, bigDecimal0.shortValue());
      assertFalse(catalogLight0.isMovable());
      assertNull(catalogLight0.getInformation());
      assertTrue(catalogLight0.isDeformable());
      assertTrue(catalogLight0.isResizable());
      assertEquals(0.0F, catalogLight0.getDepth(), 0.01F);
      assertEquals("ELEVATION", catalogLight0.getCreator());
      assertFalse(catalogLight0.isModifiable());
      assertEquals("h&*+\"", catalogLight0.getDescription());
      assertNull(catalogLight0.getCreationDate());
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertEquals(2965.994F, catalogLight0.getHeight(), 0.01F);
      assertTrue(catalogLight0.isProportional());
      assertEquals((-694.0F), catalogLight0.getElevation(), 0.01F);
      assertTrue(catalogLight0.isTexturable());
      assertNull(catalogLight0.getCurrency());
      assertEquals("h&*+\"", catalogLight0.getId());
      assertEquals(0.0F, catalogLight0.getWidth(), 0.01F);
      assertNull(catalogLight0.getColor());
      assertNull(catalogLight0.getGrade());
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertFalse(catalogLight0.isDoorOrWindow());
      assertEquals("h&*+\"", catalogLight0.getName());
      assertFalse(catalogLight0.isBackFaceShown());
      assertNull(homeLight0.getColor());
      assertFalse(homeLight0.isNameVisible());
      assertFalse(homeLight0.isModelMirrored());
      assertFalse(homeLight0.isBackFaceShown());
      assertFalse(homeLight0.isMovable());
      assertEquals((-127.62969F), homeLight0.getY(), 0.01F);
      assertNull(homeLight0.getCurrency());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertEquals("h&*+\"", homeLight0.getCatalogId());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals("h&*+\"", homeLight0.getDescription());
      assertEquals("h&*+\"", homeLight0.getName());
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertTrue(homeLight0.isResizable());
      assertNull(homeLight0.getShininess());
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertEquals(2965.994F, homeLight0.getHeight(), 0.01F);
      assertEquals((-694.0F), homeLight0.getGroundElevation(), 0.01F);
      assertTrue(homeLight0.isVisible());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertTrue(homeLight0.isDeformable());
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertEquals((-694.0F), homeLight0.getElevation(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      assertTrue(homeLight0.isTexturable());
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertNull(homeLight1.getColor());
      assertFalse(homeLight1.isNameVisible());
      assertFalse(homeLight1.isModelMirrored());
      assertFalse(homeLight1.isBackFaceShown());
      assertEquals(0.0F, homeLight1.getNameYOffset(), 0.01F);
      assertFalse(homeLight1.isMovable());
      assertEquals((-127.62969F), homeLight1.getY(), 0.01F);
      assertEquals("h&*+\"", homeLight1.getCatalogId());
      assertNull(homeLight1.getCurrency());
      assertEquals(0.5F, homeLight1.getPower(), 0.01F);
      assertEquals("h&*+\"", homeLight1.getName());
      assertNull(homeLight1.getStaircaseCutOutShape());
      assertTrue(homeLight1.isResizable());
      assertEquals(0.0F, homeLight1.getDepth(), 0.01F);
      assertNull(homeLight1.getShininess());
      assertEquals(0.0F, homeLight1.getNameAngle(), 0.01F);
      assertEquals(2965.994F, homeLight1.getHeight(), 0.01F);
      assertTrue(homeLight1.isVisible());
      assertEquals((-694.0F), homeLight1.getGroundElevation(), 0.01F);
      assertTrue(homeLight1.isDeformable());
      assertEquals(0.0F, homeLight1.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeLight1.getX(), 0.01F);
      assertEquals((-694.0F), homeLight1.getElevation(), 0.01F);
      assertTrue(homeLight1.isTexturable());
      assertEquals(0.0F, homeLight1.getAngle(), 0.01F);
      assertEquals(0.0F, homeLight1.getWidth(), 0.01F);
      assertEquals("h&*+\"", homeLight1.getDescription());
      assertFalse(homeLight1.isDoorOrWindow());
      assertEquals(2, lightSourceArray0.length);
      assertNotSame(homeLight0, homeLight1);
      assertNotSame(homeLight1, homeLight0);
      
      homeLight0.setElevation(114);
      assertFalse(homeLight0.equals((Object)homeLight1));
      assertEquals((byte)0, bigDecimal0.byteValue());
      assertEquals((short)0, bigDecimal0.shortValue());
      assertFalse(catalogLight0.isMovable());
      assertNull(catalogLight0.getInformation());
      assertTrue(catalogLight0.isDeformable());
      assertTrue(catalogLight0.isResizable());
      assertEquals(0.0F, catalogLight0.getDepth(), 0.01F);
      assertEquals("ELEVATION", catalogLight0.getCreator());
      assertFalse(catalogLight0.isModifiable());
      assertEquals("h&*+\"", catalogLight0.getDescription());
      assertNull(catalogLight0.getCreationDate());
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertEquals(2965.994F, catalogLight0.getHeight(), 0.01F);
      assertTrue(catalogLight0.isProportional());
      assertEquals((-694.0F), catalogLight0.getElevation(), 0.01F);
      assertTrue(catalogLight0.isTexturable());
      assertNull(catalogLight0.getCurrency());
      assertEquals("h&*+\"", catalogLight0.getId());
      assertEquals(0.0F, catalogLight0.getWidth(), 0.01F);
      assertNull(catalogLight0.getColor());
      assertNull(catalogLight0.getGrade());
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertFalse(catalogLight0.isDoorOrWindow());
      assertEquals("h&*+\"", catalogLight0.getName());
      assertFalse(catalogLight0.isBackFaceShown());
      assertNull(homeLight0.getColor());
      assertFalse(homeLight0.isNameVisible());
      assertFalse(homeLight0.isModelMirrored());
      assertFalse(homeLight0.isBackFaceShown());
      assertFalse(homeLight0.isMovable());
      assertEquals((-127.62969F), homeLight0.getY(), 0.01F);
      assertNull(homeLight0.getCurrency());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertEquals("h&*+\"", homeLight0.getCatalogId());
      assertEquals(114.0F, homeLight0.getElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals("h&*+\"", homeLight0.getDescription());
      assertEquals("h&*+\"", homeLight0.getName());
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertTrue(homeLight0.isResizable());
      assertEquals(114.0F, homeLight0.getGroundElevation(), 0.01F);
      assertNull(homeLight0.getShininess());
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertEquals(2965.994F, homeLight0.getHeight(), 0.01F);
      assertTrue(homeLight0.isVisible());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertTrue(homeLight0.isDeformable());
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      assertTrue(homeLight0.isTexturable());
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertEquals(2, lightSourceArray0.length);
      assertNotSame(homeLight0, homeLight1);
  }

  @Test(timeout = 4000)
  public void test225()  throws Throwable  {
      LightSource[] lightSourceArray0 = new LightSource[5];
      BigDecimal bigDecimal0 = BigDecimal.TEN;
      assertEquals((byte)10, bigDecimal0.byteValue());
      assertEquals((short)10, bigDecimal0.shortValue());
      assertNotNull(bigDecimal0);
      
      BigDecimal bigDecimal1 = BigDecimal.ZERO;
      assertFalse(bigDecimal1.equals((Object)bigDecimal0));
      assertEquals((byte)0, bigDecimal1.byteValue());
      assertEquals((short)0, bigDecimal1.shortValue());
      assertNotSame(bigDecimal1, bigDecimal0);
      assertNotNull(bigDecimal1);
      
      CatalogLight catalogLight0 = new CatalogLight("", "EEc%GG0I*<WK`u9", (String) null, (Content) null, (Content) null, (-815.0011F), (-1644.719F), 2.0F, 2.0F, false, lightSourceArray0, (float[][]) null, "EEc%GG0I*<WK`u9", false, bigDecimal1, bigDecimal1);
      assertFalse(bigDecimal1.equals((Object)bigDecimal0));
      assertEquals((byte)0, bigDecimal1.byteValue());
      assertEquals((short)0, bigDecimal1.shortValue());
      assertEquals("", catalogLight0.getId());
      assertFalse(catalogLight0.isDoorOrWindow());
      assertEquals(2.0F, catalogLight0.getElevation(), 0.01F);
      assertEquals((-815.0011F), catalogLight0.getWidth(), 0.01F);
      assertNull(catalogLight0.getDescription());
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertTrue(catalogLight0.isTexturable());
      assertEquals("EEc%GG0I*<WK`u9", catalogLight0.getName());
      assertNull(catalogLight0.getCreationDate());
      assertTrue(catalogLight0.isProportional());
      assertEquals(2.0F, catalogLight0.getHeight(), 0.01F);
      assertFalse(catalogLight0.isModifiable());
      assertFalse(catalogLight0.isBackFaceShown());
      assertFalse(catalogLight0.isResizable());
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertNull(catalogLight0.getGrade());
      assertEquals("EEc%GG0I*<WK`u9", catalogLight0.getCreator());
      assertNull(catalogLight0.getCurrency());
      assertEquals((-1644.719F), catalogLight0.getDepth(), 0.01F);
      assertFalse(catalogLight0.isMovable());
      assertNull(catalogLight0.getColor());
      assertNull(catalogLight0.getInformation());
      assertTrue(catalogLight0.isDeformable());
      assertEquals(5, lightSourceArray0.length);
      assertNotNull(catalogLight0);
      
      HomeLight homeLight0 = new HomeLight(catalogLight0);
      assertFalse(bigDecimal1.equals((Object)bigDecimal0));
      assertEquals((byte)0, bigDecimal1.byteValue());
      assertEquals((short)0, bigDecimal1.shortValue());
      assertEquals("", catalogLight0.getId());
      assertFalse(catalogLight0.isDoorOrWindow());
      assertEquals(2.0F, catalogLight0.getElevation(), 0.01F);
      assertEquals((-815.0011F), catalogLight0.getWidth(), 0.01F);
      assertNull(catalogLight0.getDescription());
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertTrue(catalogLight0.isTexturable());
      assertEquals("EEc%GG0I*<WK`u9", catalogLight0.getName());
      assertNull(catalogLight0.getCreationDate());
      assertTrue(catalogLight0.isProportional());
      assertEquals(2.0F, catalogLight0.getHeight(), 0.01F);
      assertFalse(catalogLight0.isModifiable());
      assertFalse(catalogLight0.isBackFaceShown());
      assertFalse(catalogLight0.isResizable());
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertNull(catalogLight0.getGrade());
      assertEquals("EEc%GG0I*<WK`u9", catalogLight0.getCreator());
      assertNull(catalogLight0.getCurrency());
      assertEquals((-1644.719F), catalogLight0.getDepth(), 0.01F);
      assertFalse(catalogLight0.isMovable());
      assertNull(catalogLight0.getColor());
      assertNull(catalogLight0.getInformation());
      assertTrue(catalogLight0.isDeformable());
      assertFalse(homeLight0.isDoorOrWindow());
      assertEquals((-407.50055F), homeLight0.getX(), 0.01F);
      assertTrue(homeLight0.isTexturable());
      assertFalse(homeLight0.isModelMirrored());
      assertFalse(homeLight0.isBackFaceShown());
      assertEquals("EEc%GG0I*<WK`u9", homeLight0.getName());
      assertNull(homeLight0.getColor());
      assertEquals(2.0F, homeLight0.getGroundElevation(), 0.01F);
      assertEquals((-1644.719F), homeLight0.getDepth(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertEquals((-815.0011F), homeLight0.getWidth(), 0.01F);
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals(2.0F, homeLight0.getHeight(), 0.01F);
      assertNull(homeLight0.getCurrency());
      assertFalse(homeLight0.isMovable());
      assertNull(homeLight0.getShininess());
      assertFalse(homeLight0.isResizable());
      assertEquals((-822.3595F), homeLight0.getY(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertEquals("", homeLight0.getCatalogId());
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertTrue(homeLight0.isVisible());
      assertTrue(homeLight0.isDeformable());
      assertNull(homeLight0.getDescription());
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals(2.0F, homeLight0.getElevation(), 0.01F);
      assertFalse(homeLight0.isNameVisible());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertEquals(5, lightSourceArray0.length);
      assertNotNull(homeLight0);
      
      HomeLight homeLight1 = homeLight0.clone();
      assertFalse(bigDecimal1.equals((Object)bigDecimal0));
      assertFalse(homeLight1.equals((Object)homeLight0));
      assertEquals((byte)0, bigDecimal1.byteValue());
      assertEquals((short)0, bigDecimal1.shortValue());
      assertEquals("", catalogLight0.getId());
      assertFalse(catalogLight0.isDoorOrWindow());
      assertEquals(2.0F, catalogLight0.getElevation(), 0.01F);
      assertEquals((-815.0011F), catalogLight0.getWidth(), 0.01F);
      assertNull(catalogLight0.getDescription());
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertTrue(catalogLight0.isTexturable());
      assertEquals("EEc%GG0I*<WK`u9", catalogLight0.getName());
      assertNull(catalogLight0.getCreationDate());
      assertTrue(catalogLight0.isProportional());
      assertEquals(2.0F, catalogLight0.getHeight(), 0.01F);
      assertFalse(catalogLight0.isModifiable());
      assertFalse(catalogLight0.isBackFaceShown());
      assertFalse(catalogLight0.isResizable());
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertNull(catalogLight0.getGrade());
      assertEquals("EEc%GG0I*<WK`u9", catalogLight0.getCreator());
      assertNull(catalogLight0.getCurrency());
      assertEquals((-1644.719F), catalogLight0.getDepth(), 0.01F);
      assertFalse(catalogLight0.isMovable());
      assertNull(catalogLight0.getColor());
      assertNull(catalogLight0.getInformation());
      assertTrue(catalogLight0.isDeformable());
      assertFalse(homeLight0.isDoorOrWindow());
      assertEquals((-407.50055F), homeLight0.getX(), 0.01F);
      assertTrue(homeLight0.isTexturable());
      assertFalse(homeLight0.isModelMirrored());
      assertFalse(homeLight0.isBackFaceShown());
      assertEquals("EEc%GG0I*<WK`u9", homeLight0.getName());
      assertNull(homeLight0.getColor());
      assertEquals(2.0F, homeLight0.getGroundElevation(), 0.01F);
      assertEquals((-1644.719F), homeLight0.getDepth(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertEquals((-815.0011F), homeLight0.getWidth(), 0.01F);
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals(2.0F, homeLight0.getHeight(), 0.01F);
      assertNull(homeLight0.getCurrency());
      assertFalse(homeLight0.isMovable());
      assertNull(homeLight0.getShininess());
      assertFalse(homeLight0.isResizable());
      assertEquals((-822.3595F), homeLight0.getY(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertEquals("", homeLight0.getCatalogId());
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertTrue(homeLight0.isVisible());
      assertTrue(homeLight0.isDeformable());
      assertNull(homeLight0.getDescription());
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals(2.0F, homeLight0.getElevation(), 0.01F);
      assertFalse(homeLight0.isNameVisible());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertEquals(0.0F, homeLight1.getAngle(), 0.01F);
      assertEquals(2.0F, homeLight1.getGroundElevation(), 0.01F);
      assertEquals("EEc%GG0I*<WK`u9", homeLight1.getName());
      assertNull(homeLight1.getDescription());
      assertTrue(homeLight1.isTexturable());
      assertEquals(0.0F, homeLight1.getNameXOffset(), 0.01F);
      assertEquals(2.0F, homeLight1.getElevation(), 0.01F);
      assertFalse(homeLight1.isDoorOrWindow());
      assertNull(homeLight1.getStaircaseCutOutShape());
      assertEquals(0.5F, homeLight1.getPower(), 0.01F);
      assertNull(homeLight1.getShininess());
      assertEquals(0.0F, homeLight1.getNameAngle(), 0.01F);
      assertFalse(homeLight1.isResizable());
      assertTrue(homeLight1.isDeformable());
      assertTrue(homeLight1.isVisible());
      assertEquals(2.0F, homeLight1.getHeight(), 0.01F);
      assertNull(homeLight1.getCurrency());
      assertFalse(homeLight1.isMovable());
      assertEquals(0.0F, homeLight1.getNameYOffset(), 0.01F);
      assertEquals((-815.0011F), homeLight1.getWidth(), 0.01F);
      assertEquals((-822.3595F), homeLight1.getY(), 0.01F);
      assertEquals("", homeLight1.getCatalogId());
      assertNull(homeLight1.getColor());
      assertFalse(homeLight1.isNameVisible());
      assertEquals((-1644.719F), homeLight1.getDepth(), 0.01F);
      assertEquals((-407.50055F), homeLight1.getX(), 0.01F);
      assertFalse(homeLight1.isModelMirrored());
      assertFalse(homeLight1.isBackFaceShown());
      assertEquals(5, lightSourceArray0.length);
      assertNotSame(bigDecimal1, bigDecimal0);
      assertNotSame(homeLight0, homeLight1);
      assertNotSame(homeLight1, homeLight0);
      assertNotNull(homeLight1);
      
      HomeLight homeLight2 = homeLight0.clone();
      assertFalse(bigDecimal1.equals((Object)bigDecimal0));
      assertFalse(homeLight0.equals((Object)homeLight1));
      assertFalse(homeLight2.equals((Object)homeLight0));
      assertFalse(homeLight2.equals((Object)homeLight1));
      assertEquals((byte)0, bigDecimal1.byteValue());
      assertEquals((short)0, bigDecimal1.shortValue());
      assertEquals("", catalogLight0.getId());
      assertFalse(catalogLight0.isDoorOrWindow());
      assertEquals(2.0F, catalogLight0.getElevation(), 0.01F);
      assertEquals((-815.0011F), catalogLight0.getWidth(), 0.01F);
      assertNull(catalogLight0.getDescription());
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertTrue(catalogLight0.isTexturable());
      assertEquals("EEc%GG0I*<WK`u9", catalogLight0.getName());
      assertNull(catalogLight0.getCreationDate());
      assertTrue(catalogLight0.isProportional());
      assertEquals(2.0F, catalogLight0.getHeight(), 0.01F);
      assertFalse(catalogLight0.isModifiable());
      assertFalse(catalogLight0.isBackFaceShown());
      assertFalse(catalogLight0.isResizable());
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertNull(catalogLight0.getGrade());
      assertEquals("EEc%GG0I*<WK`u9", catalogLight0.getCreator());
      assertNull(catalogLight0.getCurrency());
      assertEquals((-1644.719F), catalogLight0.getDepth(), 0.01F);
      assertFalse(catalogLight0.isMovable());
      assertNull(catalogLight0.getColor());
      assertNull(catalogLight0.getInformation());
      assertTrue(catalogLight0.isDeformable());
      assertFalse(homeLight0.isDoorOrWindow());
      assertEquals((-407.50055F), homeLight0.getX(), 0.01F);
      assertTrue(homeLight0.isTexturable());
      assertFalse(homeLight0.isModelMirrored());
      assertFalse(homeLight0.isBackFaceShown());
      assertEquals("EEc%GG0I*<WK`u9", homeLight0.getName());
      assertNull(homeLight0.getColor());
      assertEquals(2.0F, homeLight0.getGroundElevation(), 0.01F);
      assertEquals((-1644.719F), homeLight0.getDepth(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertEquals((-815.0011F), homeLight0.getWidth(), 0.01F);
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals(2.0F, homeLight0.getHeight(), 0.01F);
      assertNull(homeLight0.getCurrency());
      assertFalse(homeLight0.isMovable());
      assertNull(homeLight0.getShininess());
      assertFalse(homeLight0.isResizable());
      assertEquals((-822.3595F), homeLight0.getY(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertEquals("", homeLight0.getCatalogId());
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertTrue(homeLight0.isVisible());
      assertTrue(homeLight0.isDeformable());
      assertNull(homeLight0.getDescription());
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals(2.0F, homeLight0.getElevation(), 0.01F);
      assertFalse(homeLight0.isNameVisible());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertNull(homeLight2.getShininess());
      assertEquals("", homeLight2.getCatalogId());
      assertNull(homeLight2.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight2.getNameAngle(), 0.01F);
      assertFalse(homeLight2.isResizable());
      assertEquals(2.0F, homeLight2.getHeight(), 0.01F);
      assertEquals(0.5F, homeLight2.getPower(), 0.01F);
      assertFalse(homeLight2.isMovable());
      assertEquals((-815.0011F), homeLight2.getWidth(), 0.01F);
      assertEquals(0.0F, homeLight2.getNameYOffset(), 0.01F);
      assertEquals((-822.3595F), homeLight2.getY(), 0.01F);
      assertNull(homeLight2.getColor());
      assertEquals((-1644.719F), homeLight2.getDepth(), 0.01F);
      assertFalse(homeLight2.isModelMirrored());
      assertFalse(homeLight2.isBackFaceShown());
      assertEquals((-407.50055F), homeLight2.getX(), 0.01F);
      assertFalse(homeLight2.isDoorOrWindow());
      assertFalse(homeLight2.isNameVisible());
      assertEquals(0.0F, homeLight2.getAngle(), 0.01F);
      assertTrue(homeLight2.isTexturable());
      assertNull(homeLight2.getCurrency());
      assertTrue(homeLight2.isVisible());
      assertEquals(2.0F, homeLight2.getElevation(), 0.01F);
      assertNull(homeLight2.getDescription());
      assertEquals(2.0F, homeLight2.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight2.getNameXOffset(), 0.01F);
      assertEquals("EEc%GG0I*<WK`u9", homeLight2.getName());
      assertTrue(homeLight2.isDeformable());
      assertEquals(5, lightSourceArray0.length);
      assertNotSame(bigDecimal1, bigDecimal0);
      assertNotSame(homeLight0, homeLight1);
      assertNotSame(homeLight0, homeLight2);
      assertNotSame(homeLight2, homeLight0);
      assertNotSame(homeLight2, homeLight1);
      assertNotNull(homeLight2);
      
      homeLight1.setAngle(3.4028235E38F);
      assertFalse(bigDecimal1.equals((Object)bigDecimal0));
      assertFalse(homeLight0.equals((Object)homeLight1));
      assertFalse(homeLight0.equals((Object)homeLight2));
      assertFalse(homeLight1.equals((Object)homeLight2));
      assertFalse(homeLight1.equals((Object)homeLight0));
      assertEquals((byte)0, bigDecimal1.byteValue());
      assertEquals((short)0, bigDecimal1.shortValue());
      assertEquals("", catalogLight0.getId());
      assertFalse(catalogLight0.isDoorOrWindow());
      assertEquals(2.0F, catalogLight0.getElevation(), 0.01F);
      assertEquals((-815.0011F), catalogLight0.getWidth(), 0.01F);
      assertNull(catalogLight0.getDescription());
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertTrue(catalogLight0.isTexturable());
      assertEquals("EEc%GG0I*<WK`u9", catalogLight0.getName());
      assertNull(catalogLight0.getCreationDate());
      assertTrue(catalogLight0.isProportional());
      assertEquals(2.0F, catalogLight0.getHeight(), 0.01F);
      assertFalse(catalogLight0.isModifiable());
      assertFalse(catalogLight0.isBackFaceShown());
      assertFalse(catalogLight0.isResizable());
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertNull(catalogLight0.getGrade());
      assertEquals("EEc%GG0I*<WK`u9", catalogLight0.getCreator());
      assertNull(catalogLight0.getCurrency());
      assertEquals((-1644.719F), catalogLight0.getDepth(), 0.01F);
      assertFalse(catalogLight0.isMovable());
      assertNull(catalogLight0.getColor());
      assertNull(catalogLight0.getInformation());
      assertTrue(catalogLight0.isDeformable());
      assertFalse(homeLight0.isDoorOrWindow());
      assertEquals((-407.50055F), homeLight0.getX(), 0.01F);
      assertTrue(homeLight0.isTexturable());
      assertFalse(homeLight0.isModelMirrored());
      assertFalse(homeLight0.isBackFaceShown());
      assertEquals("EEc%GG0I*<WK`u9", homeLight0.getName());
      assertNull(homeLight0.getColor());
      assertEquals(2.0F, homeLight0.getGroundElevation(), 0.01F);
      assertEquals((-1644.719F), homeLight0.getDepth(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertEquals((-815.0011F), homeLight0.getWidth(), 0.01F);
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals(2.0F, homeLight0.getHeight(), 0.01F);
      assertNull(homeLight0.getCurrency());
      assertFalse(homeLight0.isMovable());
      assertNull(homeLight0.getShininess());
      assertFalse(homeLight0.isResizable());
      assertEquals((-822.3595F), homeLight0.getY(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertEquals("", homeLight0.getCatalogId());
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertTrue(homeLight0.isVisible());
      assertTrue(homeLight0.isDeformable());
      assertNull(homeLight0.getDescription());
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals(2.0F, homeLight0.getElevation(), 0.01F);
      assertFalse(homeLight0.isNameVisible());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertEquals(2.0F, homeLight1.getGroundElevation(), 0.01F);
      assertEquals("EEc%GG0I*<WK`u9", homeLight1.getName());
      assertNull(homeLight1.getDescription());
      assertTrue(homeLight1.isTexturable());
      assertEquals(0.0F, homeLight1.getNameXOffset(), 0.01F);
      assertEquals(2.0F, homeLight1.getElevation(), 0.01F);
      assertFalse(homeLight1.isDoorOrWindow());
      assertNull(homeLight1.getStaircaseCutOutShape());
      assertEquals(1.5746664F, homeLight1.getAngle(), 0.01F);
      assertEquals(0.5F, homeLight1.getPower(), 0.01F);
      assertNull(homeLight1.getShininess());
      assertEquals(0.0F, homeLight1.getNameAngle(), 0.01F);
      assertFalse(homeLight1.isResizable());
      assertTrue(homeLight1.isDeformable());
      assertTrue(homeLight1.isVisible());
      assertEquals(2.0F, homeLight1.getHeight(), 0.01F);
      assertNull(homeLight1.getCurrency());
      assertFalse(homeLight1.isMovable());
      assertEquals(0.0F, homeLight1.getNameYOffset(), 0.01F);
      assertEquals((-815.0011F), homeLight1.getWidth(), 0.01F);
      assertEquals((-822.3595F), homeLight1.getY(), 0.01F);
      assertEquals("", homeLight1.getCatalogId());
      assertNull(homeLight1.getColor());
      assertFalse(homeLight1.isNameVisible());
      assertEquals((-1644.719F), homeLight1.getDepth(), 0.01F);
      assertEquals((-407.50055F), homeLight1.getX(), 0.01F);
      assertFalse(homeLight1.isModelMirrored());
      assertFalse(homeLight1.isBackFaceShown());
      assertEquals(5, lightSourceArray0.length);
      assertNotSame(bigDecimal1, bigDecimal0);
      assertNotSame(homeLight0, homeLight1);
      assertNotSame(homeLight0, homeLight2);
      assertNotSame(homeLight1, homeLight2);
      assertNotSame(homeLight1, homeLight0);
      
      boolean boolean0 = homeLight0.isTopRightPointAt(5.7112646F, 2.9032073F, (-1644.719F));
      assertFalse(bigDecimal1.equals((Object)bigDecimal0));
      assertFalse(homeLight0.equals((Object)homeLight1));
      assertFalse(homeLight0.equals((Object)homeLight2));
      assertEquals((byte)0, bigDecimal1.byteValue());
      assertEquals((short)0, bigDecimal1.shortValue());
      assertEquals("", catalogLight0.getId());
      assertFalse(catalogLight0.isDoorOrWindow());
      assertEquals(2.0F, catalogLight0.getElevation(), 0.01F);
      assertEquals((-815.0011F), catalogLight0.getWidth(), 0.01F);
      assertNull(catalogLight0.getDescription());
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertTrue(catalogLight0.isTexturable());
      assertEquals("EEc%GG0I*<WK`u9", catalogLight0.getName());
      assertNull(catalogLight0.getCreationDate());
      assertTrue(catalogLight0.isProportional());
      assertEquals(2.0F, catalogLight0.getHeight(), 0.01F);
      assertFalse(catalogLight0.isModifiable());
      assertFalse(catalogLight0.isBackFaceShown());
      assertFalse(catalogLight0.isResizable());
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertNull(catalogLight0.getGrade());
      assertEquals("EEc%GG0I*<WK`u9", catalogLight0.getCreator());
      assertNull(catalogLight0.getCurrency());
      assertEquals((-1644.719F), catalogLight0.getDepth(), 0.01F);
      assertFalse(catalogLight0.isMovable());
      assertNull(catalogLight0.getColor());
      assertNull(catalogLight0.getInformation());
      assertTrue(catalogLight0.isDeformable());
      assertFalse(homeLight0.isDoorOrWindow());
      assertEquals((-407.50055F), homeLight0.getX(), 0.01F);
      assertTrue(homeLight0.isTexturable());
      assertFalse(homeLight0.isModelMirrored());
      assertFalse(homeLight0.isBackFaceShown());
      assertEquals("EEc%GG0I*<WK`u9", homeLight0.getName());
      assertNull(homeLight0.getColor());
      assertEquals(2.0F, homeLight0.getGroundElevation(), 0.01F);
      assertEquals((-1644.719F), homeLight0.getDepth(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertEquals((-815.0011F), homeLight0.getWidth(), 0.01F);
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals(2.0F, homeLight0.getHeight(), 0.01F);
      assertNull(homeLight0.getCurrency());
      assertFalse(homeLight0.isMovable());
      assertNull(homeLight0.getShininess());
      assertFalse(homeLight0.isResizable());
      assertEquals((-822.3595F), homeLight0.getY(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertEquals("", homeLight0.getCatalogId());
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertTrue(homeLight0.isVisible());
      assertTrue(homeLight0.isDeformable());
      assertNull(homeLight0.getDescription());
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals(2.0F, homeLight0.getElevation(), 0.01F);
      assertFalse(homeLight0.isNameVisible());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertEquals(5, lightSourceArray0.length);
      assertNotSame(bigDecimal1, bigDecimal0);
      assertNotSame(homeLight0, homeLight1);
      assertNotSame(homeLight0, homeLight2);
      assertFalse(boolean0);
      
      homeLight0.setNameAngle(0.5F);
      assertFalse(bigDecimal1.equals((Object)bigDecimal0));
      assertFalse(homeLight0.equals((Object)homeLight1));
      assertFalse(homeLight0.equals((Object)homeLight2));
      assertEquals((byte)0, bigDecimal1.byteValue());
      assertEquals((short)0, bigDecimal1.shortValue());
      assertEquals("", catalogLight0.getId());
      assertFalse(catalogLight0.isDoorOrWindow());
      assertEquals(2.0F, catalogLight0.getElevation(), 0.01F);
      assertEquals((-815.0011F), catalogLight0.getWidth(), 0.01F);
      assertNull(catalogLight0.getDescription());
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertTrue(catalogLight0.isTexturable());
      assertEquals("EEc%GG0I*<WK`u9", catalogLight0.getName());
      assertNull(catalogLight0.getCreationDate());
      assertTrue(catalogLight0.isProportional());
      assertEquals(2.0F, catalogLight0.getHeight(), 0.01F);
      assertFalse(catalogLight0.isModifiable());
      assertFalse(catalogLight0.isBackFaceShown());
      assertFalse(catalogLight0.isResizable());
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertNull(catalogLight0.getGrade());
      assertEquals("EEc%GG0I*<WK`u9", catalogLight0.getCreator());
      assertNull(catalogLight0.getCurrency());
      assertEquals((-1644.719F), catalogLight0.getDepth(), 0.01F);
      assertFalse(catalogLight0.isMovable());
      assertNull(catalogLight0.getColor());
      assertNull(catalogLight0.getInformation());
      assertTrue(catalogLight0.isDeformable());
      assertFalse(homeLight0.isDoorOrWindow());
      assertEquals((-407.50055F), homeLight0.getX(), 0.01F);
      assertTrue(homeLight0.isTexturable());
      assertFalse(homeLight0.isModelMirrored());
      assertFalse(homeLight0.isBackFaceShown());
      assertEquals("EEc%GG0I*<WK`u9", homeLight0.getName());
      assertNull(homeLight0.getColor());
      assertEquals(2.0F, homeLight0.getGroundElevation(), 0.01F);
      assertEquals((-1644.719F), homeLight0.getDepth(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertEquals((-815.0011F), homeLight0.getWidth(), 0.01F);
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals(2.0F, homeLight0.getHeight(), 0.01F);
      assertNull(homeLight0.getCurrency());
      assertFalse(homeLight0.isMovable());
      assertNull(homeLight0.getShininess());
      assertFalse(homeLight0.isResizable());
      assertEquals((-822.3595F), homeLight0.getY(), 0.01F);
      assertEquals(0.5F, homeLight0.getNameAngle(), 0.01F);
      assertEquals("", homeLight0.getCatalogId());
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertTrue(homeLight0.isVisible());
      assertTrue(homeLight0.isDeformable());
      assertNull(homeLight0.getDescription());
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals(2.0F, homeLight0.getElevation(), 0.01F);
      assertFalse(homeLight0.isNameVisible());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertEquals(5, lightSourceArray0.length);
      assertNotSame(bigDecimal1, bigDecimal0);
      assertNotSame(homeLight0, homeLight1);
      assertNotSame(homeLight0, homeLight2);
      
      String string0 = homeLight2.getDescription();
      assertFalse(bigDecimal1.equals((Object)bigDecimal0));
      assertFalse(homeLight0.equals((Object)homeLight1));
      assertFalse(homeLight0.equals((Object)homeLight2));
      assertFalse(homeLight2.equals((Object)homeLight0));
      assertFalse(homeLight2.equals((Object)homeLight1));
      assertEquals((byte)0, bigDecimal1.byteValue());
      assertEquals((short)0, bigDecimal1.shortValue());
      assertEquals("", catalogLight0.getId());
      assertFalse(catalogLight0.isDoorOrWindow());
      assertEquals(2.0F, catalogLight0.getElevation(), 0.01F);
      assertEquals((-815.0011F), catalogLight0.getWidth(), 0.01F);
      assertNull(catalogLight0.getDescription());
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertTrue(catalogLight0.isTexturable());
      assertEquals("EEc%GG0I*<WK`u9", catalogLight0.getName());
      assertNull(catalogLight0.getCreationDate());
      assertTrue(catalogLight0.isProportional());
      assertEquals(2.0F, catalogLight0.getHeight(), 0.01F);
      assertFalse(catalogLight0.isModifiable());
      assertFalse(catalogLight0.isBackFaceShown());
      assertFalse(catalogLight0.isResizable());
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertNull(catalogLight0.getGrade());
      assertEquals("EEc%GG0I*<WK`u9", catalogLight0.getCreator());
      assertNull(catalogLight0.getCurrency());
      assertEquals((-1644.719F), catalogLight0.getDepth(), 0.01F);
      assertFalse(catalogLight0.isMovable());
      assertNull(catalogLight0.getColor());
      assertNull(catalogLight0.getInformation());
      assertTrue(catalogLight0.isDeformable());
      assertFalse(homeLight0.isDoorOrWindow());
      assertEquals((-407.50055F), homeLight0.getX(), 0.01F);
      assertTrue(homeLight0.isTexturable());
      assertFalse(homeLight0.isModelMirrored());
      assertFalse(homeLight0.isBackFaceShown());
      assertEquals("EEc%GG0I*<WK`u9", homeLight0.getName());
      assertNull(homeLight0.getColor());
      assertEquals(2.0F, homeLight0.getGroundElevation(), 0.01F);
      assertEquals((-1644.719F), homeLight0.getDepth(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertEquals((-815.0011F), homeLight0.getWidth(), 0.01F);
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals(2.0F, homeLight0.getHeight(), 0.01F);
      assertNull(homeLight0.getCurrency());
      assertFalse(homeLight0.isMovable());
      assertNull(homeLight0.getShininess());
      assertFalse(homeLight0.isResizable());
      assertEquals((-822.3595F), homeLight0.getY(), 0.01F);
      assertEquals(0.5F, homeLight0.getNameAngle(), 0.01F);
      assertEquals("", homeLight0.getCatalogId());
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertTrue(homeLight0.isVisible());
      assertTrue(homeLight0.isDeformable());
      assertNull(homeLight0.getDescription());
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals(2.0F, homeLight0.getElevation(), 0.01F);
      assertFalse(homeLight0.isNameVisible());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertNull(homeLight2.getShininess());
      assertEquals("", homeLight2.getCatalogId());
      assertNull(homeLight2.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight2.getNameAngle(), 0.01F);
      assertFalse(homeLight2.isResizable());
      assertEquals(2.0F, homeLight2.getHeight(), 0.01F);
      assertEquals(0.5F, homeLight2.getPower(), 0.01F);
      assertFalse(homeLight2.isMovable());
      assertEquals((-815.0011F), homeLight2.getWidth(), 0.01F);
      assertEquals(0.0F, homeLight2.getNameYOffset(), 0.01F);
      assertEquals((-822.3595F), homeLight2.getY(), 0.01F);
      assertNull(homeLight2.getColor());
      assertEquals((-1644.719F), homeLight2.getDepth(), 0.01F);
      assertFalse(homeLight2.isModelMirrored());
      assertFalse(homeLight2.isBackFaceShown());
      assertEquals((-407.50055F), homeLight2.getX(), 0.01F);
      assertFalse(homeLight2.isDoorOrWindow());
      assertFalse(homeLight2.isNameVisible());
      assertEquals(0.0F, homeLight2.getAngle(), 0.01F);
      assertTrue(homeLight2.isTexturable());
      assertNull(homeLight2.getCurrency());
      assertTrue(homeLight2.isVisible());
      assertEquals(2.0F, homeLight2.getElevation(), 0.01F);
      assertNull(homeLight2.getDescription());
      assertEquals(2.0F, homeLight2.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight2.getNameXOffset(), 0.01F);
      assertEquals("EEc%GG0I*<WK`u9", homeLight2.getName());
      assertTrue(homeLight2.isDeformable());
      assertEquals(5, lightSourceArray0.length);
      assertNotSame(bigDecimal1, bigDecimal0);
      assertNotSame(homeLight0, homeLight1);
      assertNotSame(homeLight0, homeLight2);
      assertNotSame(homeLight2, homeLight0);
      assertNotSame(homeLight2, homeLight1);
      assertNull(string0);
      
      Integer integer0 = homeLight0.getColor();
      assertFalse(bigDecimal1.equals((Object)bigDecimal0));
      assertFalse(homeLight0.equals((Object)homeLight1));
      assertFalse(homeLight0.equals((Object)homeLight2));
      assertEquals((byte)0, bigDecimal1.byteValue());
      assertEquals((short)0, bigDecimal1.shortValue());
      assertEquals("", catalogLight0.getId());
      assertFalse(catalogLight0.isDoorOrWindow());
      assertEquals(2.0F, catalogLight0.getElevation(), 0.01F);
      assertEquals((-815.0011F), catalogLight0.getWidth(), 0.01F);
      assertNull(catalogLight0.getDescription());
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertTrue(catalogLight0.isTexturable());
      assertEquals("EEc%GG0I*<WK`u9", catalogLight0.getName());
      assertNull(catalogLight0.getCreationDate());
      assertTrue(catalogLight0.isProportional());
      assertEquals(2.0F, catalogLight0.getHeight(), 0.01F);
      assertFalse(catalogLight0.isModifiable());
      assertFalse(catalogLight0.isBackFaceShown());
      assertFalse(catalogLight0.isResizable());
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertNull(catalogLight0.getGrade());
      assertEquals("EEc%GG0I*<WK`u9", catalogLight0.getCreator());
      assertNull(catalogLight0.getCurrency());
      assertEquals((-1644.719F), catalogLight0.getDepth(), 0.01F);
      assertFalse(catalogLight0.isMovable());
      assertNull(catalogLight0.getColor());
      assertNull(catalogLight0.getInformation());
      assertTrue(catalogLight0.isDeformable());
      assertFalse(homeLight0.isDoorOrWindow());
      assertEquals((-407.50055F), homeLight0.getX(), 0.01F);
      assertTrue(homeLight0.isTexturable());
      assertFalse(homeLight0.isModelMirrored());
      assertFalse(homeLight0.isBackFaceShown());
      assertEquals("EEc%GG0I*<WK`u9", homeLight0.getName());
      assertNull(homeLight0.getColor());
      assertEquals(2.0F, homeLight0.getGroundElevation(), 0.01F);
      assertEquals((-1644.719F), homeLight0.getDepth(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertEquals((-815.0011F), homeLight0.getWidth(), 0.01F);
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals(2.0F, homeLight0.getHeight(), 0.01F);
      assertNull(homeLight0.getCurrency());
      assertFalse(homeLight0.isMovable());
      assertNull(homeLight0.getShininess());
      assertFalse(homeLight0.isResizable());
      assertEquals((-822.3595F), homeLight0.getY(), 0.01F);
      assertEquals(0.5F, homeLight0.getNameAngle(), 0.01F);
      assertEquals("", homeLight0.getCatalogId());
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertTrue(homeLight0.isVisible());
      assertTrue(homeLight0.isDeformable());
      assertNull(homeLight0.getDescription());
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals(2.0F, homeLight0.getElevation(), 0.01F);
      assertFalse(homeLight0.isNameVisible());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertEquals(5, lightSourceArray0.length);
      assertNotSame(bigDecimal1, bigDecimal0);
      assertNotSame(homeLight0, homeLight1);
      assertNotSame(homeLight0, homeLight2);
      assertNull(integer0);
  }

  @Test(timeout = 4000)
  public void test226()  throws Throwable  {
      LightSource[] lightSourceArray0 = new LightSource[2];
      LightSource lightSource0 = new LightSource((-815.0011F), 0.0F, 0.0F, (-1541));
      assertEquals(0.0F, lightSource0.getY(), 0.01F);
      assertEquals((-815.0011F), lightSource0.getX(), 0.01F);
      assertEquals(0.0F, lightSource0.getZ(), 0.01F);
      assertEquals((-1541), lightSource0.getColor());
      assertNull(lightSource0.getDiameter());
      assertNotNull(lightSource0);
      
      lightSourceArray0[0] = lightSource0;
      LightSource lightSource1 = new LightSource((-1541), (-2278.261F), (-727.8896F), (-1541));
      assertFalse(lightSource1.equals((Object)lightSource0));
      assertEquals((-727.8896F), lightSource1.getZ(), 0.01F);
      assertNull(lightSource1.getDiameter());
      assertEquals((-2278.261F), lightSource1.getY(), 0.01F);
      assertEquals((-1541.0F), lightSource1.getX(), 0.01F);
      assertEquals((-1541), lightSource1.getColor());
      assertNotNull(lightSource1);
      
      boolean boolean0 = FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, true);
      assertFalse(boolean0);
      
      BigDecimal bigDecimal0 = BigDecimal.TEN;
      assertEquals((short)10, bigDecimal0.shortValue());
      assertEquals((byte)10, bigDecimal0.byteValue());
      assertNotNull(bigDecimal0);
      
      CatalogLight catalogLight0 = new CatalogLight("/", "/", "/", (Content) null, (Content) null, 0.3926991F, 92.121765F, 0.3926991F, (-727.8896F), true, lightSourceArray0, (float[][]) null, "{L", true, bigDecimal0, bigDecimal0);
      assertEquals((short)10, bigDecimal0.shortValue());
      assertEquals((byte)10, bigDecimal0.byteValue());
      assertNull(catalogLight0.getInformation());
      assertTrue(catalogLight0.isDeformable());
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertTrue(catalogLight0.isResizable());
      assertFalse(catalogLight0.isBackFaceShown());
      assertEquals("/", catalogLight0.getDescription());
      assertEquals("/", catalogLight0.getName());
      assertTrue(catalogLight0.isMovable());
      assertNull(catalogLight0.getCurrency());
      assertEquals(0.3926991F, catalogLight0.getWidth(), 0.01F);
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertEquals((-727.8896F), catalogLight0.getElevation(), 0.01F);
      assertNull(catalogLight0.getColor());
      assertFalse(catalogLight0.isModifiable());
      assertEquals(92.121765F, catalogLight0.getDepth(), 0.01F);
      assertFalse(catalogLight0.isDoorOrWindow());
      assertTrue(catalogLight0.isProportional());
      assertNull(catalogLight0.getCreationDate());
      assertEquals("{L", catalogLight0.getCreator());
      assertNull(catalogLight0.getGrade());
      assertTrue(catalogLight0.isTexturable());
      assertEquals(0.3926991F, catalogLight0.getHeight(), 0.01F);
      assertEquals("/", catalogLight0.getId());
      assertEquals(2, lightSourceArray0.length);
      assertNotNull(catalogLight0);
      
      HomeLight homeLight0 = new HomeLight(catalogLight0);
      assertEquals((short)10, bigDecimal0.shortValue());
      assertEquals((byte)10, bigDecimal0.byteValue());
      assertNull(catalogLight0.getInformation());
      assertTrue(catalogLight0.isDeformable());
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertTrue(catalogLight0.isResizable());
      assertFalse(catalogLight0.isBackFaceShown());
      assertEquals("/", catalogLight0.getDescription());
      assertEquals("/", catalogLight0.getName());
      assertTrue(catalogLight0.isMovable());
      assertNull(catalogLight0.getCurrency());
      assertEquals(0.3926991F, catalogLight0.getWidth(), 0.01F);
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertEquals((-727.8896F), catalogLight0.getElevation(), 0.01F);
      assertNull(catalogLight0.getColor());
      assertFalse(catalogLight0.isModifiable());
      assertEquals(92.121765F, catalogLight0.getDepth(), 0.01F);
      assertFalse(catalogLight0.isDoorOrWindow());
      assertTrue(catalogLight0.isProportional());
      assertNull(catalogLight0.getCreationDate());
      assertEquals("{L", catalogLight0.getCreator());
      assertNull(catalogLight0.getGrade());
      assertTrue(catalogLight0.isTexturable());
      assertEquals(0.3926991F, catalogLight0.getHeight(), 0.01F);
      assertEquals("/", catalogLight0.getId());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals(0.19634955F, homeLight0.getX(), 0.01F);
      assertNull(homeLight0.getShininess());
      assertEquals("/", homeLight0.getDescription());
      assertEquals((-727.8896F), homeLight0.getGroundElevation(), 0.01F);
      assertTrue(homeLight0.isMovable());
      assertTrue(homeLight0.isResizable());
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertNull(homeLight0.getCurrency());
      assertEquals(0.3926991F, homeLight0.getWidth(), 0.01F);
      assertNull(homeLight0.getColor());
      assertEquals(92.121765F, homeLight0.getDepth(), 0.01F);
      assertFalse(homeLight0.isNameVisible());
      assertTrue(homeLight0.isDeformable());
      assertFalse(homeLight0.isBackFaceShown());
      assertTrue(homeLight0.isVisible());
      assertFalse(homeLight0.isModelMirrored());
      assertEquals((-727.8896F), homeLight0.getElevation(), 0.01F);
      assertEquals(46.060883F, homeLight0.getY(), 0.01F);
      assertEquals("/", homeLight0.getCatalogId());
      assertEquals("/", homeLight0.getName());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertTrue(homeLight0.isTexturable());
      assertEquals(0.3926991F, homeLight0.getHeight(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      assertEquals(2, lightSourceArray0.length);
      assertNotNull(homeLight0);
      
      FurnitureCategory furnitureCategory0 = catalogLight0.getCategory();
      assertEquals((short)10, bigDecimal0.shortValue());
      assertEquals((byte)10, bigDecimal0.byteValue());
      assertNull(catalogLight0.getInformation());
      assertTrue(catalogLight0.isDeformable());
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertTrue(catalogLight0.isResizable());
      assertFalse(catalogLight0.isBackFaceShown());
      assertEquals("/", catalogLight0.getDescription());
      assertEquals("/", catalogLight0.getName());
      assertTrue(catalogLight0.isMovable());
      assertNull(catalogLight0.getCurrency());
      assertEquals(0.3926991F, catalogLight0.getWidth(), 0.01F);
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertEquals((-727.8896F), catalogLight0.getElevation(), 0.01F);
      assertNull(catalogLight0.getColor());
      assertFalse(catalogLight0.isModifiable());
      assertEquals(92.121765F, catalogLight0.getDepth(), 0.01F);
      assertFalse(catalogLight0.isDoorOrWindow());
      assertTrue(catalogLight0.isProportional());
      assertNull(catalogLight0.getCreationDate());
      assertEquals("{L", catalogLight0.getCreator());
      assertNull(catalogLight0.getGrade());
      assertTrue(catalogLight0.isTexturable());
      assertEquals(0.3926991F, catalogLight0.getHeight(), 0.01F);
      assertEquals("/", catalogLight0.getId());
      assertEquals(2, lightSourceArray0.length);
      assertNull(furnitureCategory0);
      
      HomeLight homeLight1 = homeLight0.clone();
      assertFalse(homeLight1.equals((Object)homeLight0));
      assertEquals((short)10, bigDecimal0.shortValue());
      assertEquals((byte)10, bigDecimal0.byteValue());
      assertNull(catalogLight0.getInformation());
      assertTrue(catalogLight0.isDeformable());
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertTrue(catalogLight0.isResizable());
      assertFalse(catalogLight0.isBackFaceShown());
      assertEquals("/", catalogLight0.getDescription());
      assertEquals("/", catalogLight0.getName());
      assertTrue(catalogLight0.isMovable());
      assertNull(catalogLight0.getCurrency());
      assertEquals(0.3926991F, catalogLight0.getWidth(), 0.01F);
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertEquals((-727.8896F), catalogLight0.getElevation(), 0.01F);
      assertNull(catalogLight0.getColor());
      assertFalse(catalogLight0.isModifiable());
      assertEquals(92.121765F, catalogLight0.getDepth(), 0.01F);
      assertFalse(catalogLight0.isDoorOrWindow());
      assertTrue(catalogLight0.isProportional());
      assertNull(catalogLight0.getCreationDate());
      assertEquals("{L", catalogLight0.getCreator());
      assertNull(catalogLight0.getGrade());
      assertTrue(catalogLight0.isTexturable());
      assertEquals(0.3926991F, catalogLight0.getHeight(), 0.01F);
      assertEquals("/", catalogLight0.getId());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals(0.19634955F, homeLight0.getX(), 0.01F);
      assertNull(homeLight0.getShininess());
      assertEquals("/", homeLight0.getDescription());
      assertEquals((-727.8896F), homeLight0.getGroundElevation(), 0.01F);
      assertTrue(homeLight0.isMovable());
      assertTrue(homeLight0.isResizable());
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertNull(homeLight0.getCurrency());
      assertEquals(0.3926991F, homeLight0.getWidth(), 0.01F);
      assertNull(homeLight0.getColor());
      assertEquals(92.121765F, homeLight0.getDepth(), 0.01F);
      assertFalse(homeLight0.isNameVisible());
      assertTrue(homeLight0.isDeformable());
      assertFalse(homeLight0.isBackFaceShown());
      assertTrue(homeLight0.isVisible());
      assertFalse(homeLight0.isModelMirrored());
      assertEquals((-727.8896F), homeLight0.getElevation(), 0.01F);
      assertEquals(46.060883F, homeLight0.getY(), 0.01F);
      assertEquals("/", homeLight0.getCatalogId());
      assertEquals("/", homeLight0.getName());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertTrue(homeLight0.isTexturable());
      assertEquals(0.3926991F, homeLight0.getHeight(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      assertEquals("/", homeLight1.getCatalogId());
      assertEquals(46.060883F, homeLight1.getY(), 0.01F);
      assertTrue(homeLight1.isVisible());
      assertTrue(homeLight1.isDeformable());
      assertNull(homeLight1.getCurrency());
      assertEquals("/", homeLight1.getName());
      assertEquals(0.0F, homeLight1.getNameYOffset(), 0.01F);
      assertEquals((-727.8896F), homeLight1.getElevation(), 0.01F);
      assertNull(homeLight1.getColor());
      assertFalse(homeLight1.isModelMirrored());
      assertEquals(0.3926991F, homeLight1.getHeight(), 0.01F);
      assertEquals(0.19634955F, homeLight1.getX(), 0.01F);
      assertFalse(homeLight1.isNameVisible());
      assertFalse(homeLight1.isBackFaceShown());
      assertEquals(0.0F, homeLight1.getAngle(), 0.01F);
      assertEquals(0.3926991F, homeLight1.getWidth(), 0.01F);
      assertTrue(homeLight1.isTexturable());
      assertEquals(0.0F, homeLight1.getNameXOffset(), 0.01F);
      assertFalse(homeLight1.isDoorOrWindow());
      assertEquals((-727.8896F), homeLight1.getGroundElevation(), 0.01F);
      assertTrue(homeLight1.isMovable());
      assertNull(homeLight1.getStaircaseCutOutShape());
      assertEquals(92.121765F, homeLight1.getDepth(), 0.01F);
      assertEquals(0.5F, homeLight1.getPower(), 0.01F);
      assertNull(homeLight1.getShininess());
      assertTrue(homeLight1.isResizable());
      assertEquals("/", homeLight1.getDescription());
      assertEquals(0.0F, homeLight1.getNameAngle(), 0.01F);
      assertEquals(2, lightSourceArray0.length);
      assertNotSame(homeLight0, homeLight1);
      assertNotSame(homeLight1, homeLight0);
      assertNotNull(homeLight1);
      
      HomePieceOfFurniture homePieceOfFurniture0 = new HomePieceOfFurniture(homeLight0);
      assertFalse(homeLight0.equals((Object)homeLight1));
      assertEquals((short)10, bigDecimal0.shortValue());
      assertEquals((byte)10, bigDecimal0.byteValue());
      assertNull(catalogLight0.getInformation());
      assertTrue(catalogLight0.isDeformable());
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertTrue(catalogLight0.isResizable());
      assertFalse(catalogLight0.isBackFaceShown());
      assertEquals("/", catalogLight0.getDescription());
      assertEquals("/", catalogLight0.getName());
      assertTrue(catalogLight0.isMovable());
      assertNull(catalogLight0.getCurrency());
      assertEquals(0.3926991F, catalogLight0.getWidth(), 0.01F);
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertEquals((-727.8896F), catalogLight0.getElevation(), 0.01F);
      assertNull(catalogLight0.getColor());
      assertFalse(catalogLight0.isModifiable());
      assertEquals(92.121765F, catalogLight0.getDepth(), 0.01F);
      assertFalse(catalogLight0.isDoorOrWindow());
      assertTrue(catalogLight0.isProportional());
      assertNull(catalogLight0.getCreationDate());
      assertEquals("{L", catalogLight0.getCreator());
      assertNull(catalogLight0.getGrade());
      assertTrue(catalogLight0.isTexturable());
      assertEquals(0.3926991F, catalogLight0.getHeight(), 0.01F);
      assertEquals("/", catalogLight0.getId());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals(0.19634955F, homeLight0.getX(), 0.01F);
      assertNull(homeLight0.getShininess());
      assertEquals("/", homeLight0.getDescription());
      assertEquals((-727.8896F), homeLight0.getGroundElevation(), 0.01F);
      assertTrue(homeLight0.isMovable());
      assertTrue(homeLight0.isResizable());
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertNull(homeLight0.getCurrency());
      assertEquals(0.3926991F, homeLight0.getWidth(), 0.01F);
      assertNull(homeLight0.getColor());
      assertEquals(92.121765F, homeLight0.getDepth(), 0.01F);
      assertFalse(homeLight0.isNameVisible());
      assertTrue(homeLight0.isDeformable());
      assertFalse(homeLight0.isBackFaceShown());
      assertTrue(homeLight0.isVisible());
      assertFalse(homeLight0.isModelMirrored());
      assertEquals((-727.8896F), homeLight0.getElevation(), 0.01F);
      assertEquals(46.060883F, homeLight0.getY(), 0.01F);
      assertEquals("/", homeLight0.getCatalogId());
      assertEquals("/", homeLight0.getName());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertTrue(homeLight0.isTexturable());
      assertEquals(0.3926991F, homeLight0.getHeight(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      assertFalse(homePieceOfFurniture0.isModelMirrored());
      assertFalse(homePieceOfFurniture0.isBackFaceShown());
      assertFalse(homePieceOfFurniture0.isDoorOrWindow());
      assertEquals(92.121765F, homePieceOfFurniture0.getDepth(), 0.01F);
      assertNull(homePieceOfFurniture0.getColor());
      assertEquals(0.0F, homePieceOfFurniture0.getAngle(), 0.01F);
      assertFalse(homePieceOfFurniture0.isNameVisible());
      assertEquals(0.3926991F, homePieceOfFurniture0.getWidth(), 0.01F);
      assertTrue(homePieceOfFurniture0.isTexturable());
      assertEquals(0.3926991F, homePieceOfFurniture0.getHeight(), 0.01F);
      assertNull(homePieceOfFurniture0.getCurrency());
      assertEquals(0.0F, homePieceOfFurniture0.getNameYOffset(), 0.01F);
      assertEquals("/", homePieceOfFurniture0.getCatalogId());
      assertEquals(0.19634955F, homePieceOfFurniture0.getX(), 0.01F);
      assertTrue(homePieceOfFurniture0.isMovable());
      assertNull(homePieceOfFurniture0.getShininess());
      assertEquals((-727.8896F), homePieceOfFurniture0.getGroundElevation(), 0.01F);
      assertEquals("/", homePieceOfFurniture0.getDescription());
      assertEquals("/", homePieceOfFurniture0.getName());
      assertTrue(homePieceOfFurniture0.isDeformable());
      assertTrue(homePieceOfFurniture0.isVisible());
      assertEquals(0.0F, homePieceOfFurniture0.getNameXOffset(), 0.01F);
      assertEquals((-727.8896F), homePieceOfFurniture0.getElevation(), 0.01F);
      assertEquals(46.060883F, homePieceOfFurniture0.getY(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture0.getNameAngle(), 0.01F);
      assertNull(homePieceOfFurniture0.getStaircaseCutOutShape());
      assertTrue(homePieceOfFurniture0.isResizable());
      assertEquals(2, lightSourceArray0.length);
      assertNotNull(homePieceOfFurniture0);
      
      HomeLight homeLight2 = (HomeLight)homeLight0.clone();
      assertFalse(homeLight0.equals((Object)homeLight1));
      assertFalse(homeLight2.equals((Object)homeLight0));
      assertFalse(homeLight2.equals((Object)homeLight1));
      assertEquals((short)10, bigDecimal0.shortValue());
      assertEquals((byte)10, bigDecimal0.byteValue());
      assertNull(catalogLight0.getInformation());
      assertTrue(catalogLight0.isDeformable());
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertTrue(catalogLight0.isResizable());
      assertFalse(catalogLight0.isBackFaceShown());
      assertEquals("/", catalogLight0.getDescription());
      assertEquals("/", catalogLight0.getName());
      assertTrue(catalogLight0.isMovable());
      assertNull(catalogLight0.getCurrency());
      assertEquals(0.3926991F, catalogLight0.getWidth(), 0.01F);
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertEquals((-727.8896F), catalogLight0.getElevation(), 0.01F);
      assertNull(catalogLight0.getColor());
      assertFalse(catalogLight0.isModifiable());
      assertEquals(92.121765F, catalogLight0.getDepth(), 0.01F);
      assertFalse(catalogLight0.isDoorOrWindow());
      assertTrue(catalogLight0.isProportional());
      assertNull(catalogLight0.getCreationDate());
      assertEquals("{L", catalogLight0.getCreator());
      assertNull(catalogLight0.getGrade());
      assertTrue(catalogLight0.isTexturable());
      assertEquals(0.3926991F, catalogLight0.getHeight(), 0.01F);
      assertEquals("/", catalogLight0.getId());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals(0.19634955F, homeLight0.getX(), 0.01F);
      assertNull(homeLight0.getShininess());
      assertEquals("/", homeLight0.getDescription());
      assertEquals((-727.8896F), homeLight0.getGroundElevation(), 0.01F);
      assertTrue(homeLight0.isMovable());
      assertTrue(homeLight0.isResizable());
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertNull(homeLight0.getCurrency());
      assertEquals(0.3926991F, homeLight0.getWidth(), 0.01F);
      assertNull(homeLight0.getColor());
      assertEquals(92.121765F, homeLight0.getDepth(), 0.01F);
      assertFalse(homeLight0.isNameVisible());
      assertTrue(homeLight0.isDeformable());
      assertFalse(homeLight0.isBackFaceShown());
      assertTrue(homeLight0.isVisible());
      assertFalse(homeLight0.isModelMirrored());
      assertEquals((-727.8896F), homeLight0.getElevation(), 0.01F);
      assertEquals(46.060883F, homeLight0.getY(), 0.01F);
      assertEquals("/", homeLight0.getCatalogId());
      assertEquals("/", homeLight0.getName());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertTrue(homeLight0.isTexturable());
      assertEquals(0.3926991F, homeLight0.getHeight(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      assertEquals(92.121765F, homeLight2.getDepth(), 0.01F);
      assertEquals(0.3926991F, homeLight2.getHeight(), 0.01F);
      assertFalse(homeLight2.isModelMirrored());
      assertNull(homeLight2.getColor());
      assertTrue(homeLight2.isTexturable());
      assertFalse(homeLight2.isNameVisible());
      assertFalse(homeLight2.isBackFaceShown());
      assertEquals(46.060883F, homeLight2.getY(), 0.01F);
      assertTrue(homeLight2.isDeformable());
      assertTrue(homeLight2.isVisible());
      assertEquals(0.0F, homeLight2.getAngle(), 0.01F);
      assertEquals("/", homeLight2.getName());
      assertEquals(0.0F, homeLight2.getNameXOffset(), 0.01F);
      assertFalse(homeLight2.isDoorOrWindow());
      assertEquals((-727.8896F), homeLight2.getElevation(), 0.01F);
      assertEquals((-727.8896F), homeLight2.getGroundElevation(), 0.01F);
      assertTrue(homeLight2.isMovable());
      assertNull(homeLight2.getStaircaseCutOutShape());
      assertEquals("/", homeLight2.getDescription());
      assertEquals(0.5F, homeLight2.getPower(), 0.01F);
      assertNull(homeLight2.getShininess());
      assertTrue(homeLight2.isResizable());
      assertEquals(0.0F, homeLight2.getNameAngle(), 0.01F);
      assertEquals("/", homeLight2.getCatalogId());
      assertNull(homeLight2.getCurrency());
      assertEquals(0.19634955F, homeLight2.getX(), 0.01F);
      assertEquals(0.3926991F, homeLight2.getWidth(), 0.01F);
      assertEquals(0.0F, homeLight2.getNameYOffset(), 0.01F);
      assertEquals(2, lightSourceArray0.length);
      assertNotSame(homeLight0, homeLight1);
      assertNotSame(homeLight0, homeLight2);
      assertNotSame(homeLight2, homeLight0);
      assertNotSame(homeLight2, homeLight1);
      assertNotNull(homeLight2);
      
      homeLight2.setElevation(0.0F);
      assertFalse(homeLight0.equals((Object)homeLight1));
      assertFalse(homeLight0.equals((Object)homeLight2));
      assertFalse(homeLight2.equals((Object)homeLight0));
      assertFalse(homeLight2.equals((Object)homeLight1));
      assertEquals((short)10, bigDecimal0.shortValue());
      assertEquals((byte)10, bigDecimal0.byteValue());
      assertNull(catalogLight0.getInformation());
      assertTrue(catalogLight0.isDeformable());
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertTrue(catalogLight0.isResizable());
      assertFalse(catalogLight0.isBackFaceShown());
      assertEquals("/", catalogLight0.getDescription());
      assertEquals("/", catalogLight0.getName());
      assertTrue(catalogLight0.isMovable());
      assertNull(catalogLight0.getCurrency());
      assertEquals(0.3926991F, catalogLight0.getWidth(), 0.01F);
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertEquals((-727.8896F), catalogLight0.getElevation(), 0.01F);
      assertNull(catalogLight0.getColor());
      assertFalse(catalogLight0.isModifiable());
      assertEquals(92.121765F, catalogLight0.getDepth(), 0.01F);
      assertFalse(catalogLight0.isDoorOrWindow());
      assertTrue(catalogLight0.isProportional());
      assertNull(catalogLight0.getCreationDate());
      assertEquals("{L", catalogLight0.getCreator());
      assertNull(catalogLight0.getGrade());
      assertTrue(catalogLight0.isTexturable());
      assertEquals(0.3926991F, catalogLight0.getHeight(), 0.01F);
      assertEquals("/", catalogLight0.getId());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals(0.19634955F, homeLight0.getX(), 0.01F);
      assertNull(homeLight0.getShininess());
      assertEquals("/", homeLight0.getDescription());
      assertEquals((-727.8896F), homeLight0.getGroundElevation(), 0.01F);
      assertTrue(homeLight0.isMovable());
      assertTrue(homeLight0.isResizable());
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertNull(homeLight0.getCurrency());
      assertEquals(0.3926991F, homeLight0.getWidth(), 0.01F);
      assertNull(homeLight0.getColor());
      assertEquals(92.121765F, homeLight0.getDepth(), 0.01F);
      assertFalse(homeLight0.isNameVisible());
      assertTrue(homeLight0.isDeformable());
      assertFalse(homeLight0.isBackFaceShown());
      assertTrue(homeLight0.isVisible());
      assertFalse(homeLight0.isModelMirrored());
      assertEquals((-727.8896F), homeLight0.getElevation(), 0.01F);
      assertEquals(46.060883F, homeLight0.getY(), 0.01F);
      assertEquals("/", homeLight0.getCatalogId());
      assertEquals("/", homeLight0.getName());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertTrue(homeLight0.isTexturable());
      assertEquals(0.3926991F, homeLight0.getHeight(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      assertEquals(92.121765F, homeLight2.getDepth(), 0.01F);
      assertEquals(0.3926991F, homeLight2.getHeight(), 0.01F);
      assertFalse(homeLight2.isModelMirrored());
      assertNull(homeLight2.getColor());
      assertTrue(homeLight2.isTexturable());
      assertFalse(homeLight2.isNameVisible());
      assertFalse(homeLight2.isBackFaceShown());
      assertEquals(0.0F, homeLight2.getElevation(), 0.01F);
      assertEquals(46.060883F, homeLight2.getY(), 0.01F);
      assertTrue(homeLight2.isDeformable());
      assertTrue(homeLight2.isVisible());
      assertEquals(0.0F, homeLight2.getAngle(), 0.01F);
      assertEquals("/", homeLight2.getName());
      assertEquals(0.0F, homeLight2.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeLight2.getGroundElevation(), 0.01F);
      assertFalse(homeLight2.isDoorOrWindow());
      assertTrue(homeLight2.isMovable());
      assertNull(homeLight2.getStaircaseCutOutShape());
      assertEquals("/", homeLight2.getDescription());
      assertEquals(0.5F, homeLight2.getPower(), 0.01F);
      assertNull(homeLight2.getShininess());
      assertTrue(homeLight2.isResizable());
      assertEquals(0.0F, homeLight2.getNameAngle(), 0.01F);
      assertEquals("/", homeLight2.getCatalogId());
      assertNull(homeLight2.getCurrency());
      assertEquals(0.19634955F, homeLight2.getX(), 0.01F);
      assertEquals(0.3926991F, homeLight2.getWidth(), 0.01F);
      assertEquals(0.0F, homeLight2.getNameYOffset(), 0.01F);
      assertEquals(2, lightSourceArray0.length);
      assertNotSame(homeLight0, homeLight1);
      assertNotSame(homeLight0, homeLight2);
      assertNotSame(homeLight2, homeLight0);
      assertNotSame(homeLight2, homeLight1);
      
      homeLight0.setModelMirrored(true);
      assertFalse(homeLight0.equals((Object)homeLight1));
      assertFalse(homeLight0.equals((Object)homeLight2));
      assertEquals((short)10, bigDecimal0.shortValue());
      assertEquals((byte)10, bigDecimal0.byteValue());
      assertNull(catalogLight0.getInformation());
      assertTrue(catalogLight0.isDeformable());
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertTrue(catalogLight0.isResizable());
      assertFalse(catalogLight0.isBackFaceShown());
      assertEquals("/", catalogLight0.getDescription());
      assertEquals("/", catalogLight0.getName());
      assertTrue(catalogLight0.isMovable());
      assertNull(catalogLight0.getCurrency());
      assertEquals(0.3926991F, catalogLight0.getWidth(), 0.01F);
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertEquals((-727.8896F), catalogLight0.getElevation(), 0.01F);
      assertNull(catalogLight0.getColor());
      assertFalse(catalogLight0.isModifiable());
      assertEquals(92.121765F, catalogLight0.getDepth(), 0.01F);
      assertFalse(catalogLight0.isDoorOrWindow());
      assertTrue(catalogLight0.isProportional());
      assertNull(catalogLight0.getCreationDate());
      assertEquals("{L", catalogLight0.getCreator());
      assertNull(catalogLight0.getGrade());
      assertTrue(catalogLight0.isTexturable());
      assertEquals(0.3926991F, catalogLight0.getHeight(), 0.01F);
      assertEquals("/", catalogLight0.getId());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals(0.19634955F, homeLight0.getX(), 0.01F);
      assertNull(homeLight0.getShininess());
      assertEquals("/", homeLight0.getDescription());
      assertEquals((-727.8896F), homeLight0.getGroundElevation(), 0.01F);
      assertTrue(homeLight0.isMovable());
      assertTrue(homeLight0.isResizable());
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertNull(homeLight0.getCurrency());
      assertEquals(0.3926991F, homeLight0.getWidth(), 0.01F);
      assertTrue(homeLight0.isModelMirrored());
      assertNull(homeLight0.getColor());
      assertEquals(92.121765F, homeLight0.getDepth(), 0.01F);
      assertFalse(homeLight0.isNameVisible());
      assertTrue(homeLight0.isDeformable());
      assertFalse(homeLight0.isBackFaceShown());
      assertTrue(homeLight0.isVisible());
      assertEquals((-727.8896F), homeLight0.getElevation(), 0.01F);
      assertEquals(46.060883F, homeLight0.getY(), 0.01F);
      assertEquals("/", homeLight0.getCatalogId());
      assertEquals("/", homeLight0.getName());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertTrue(homeLight0.isTexturable());
      assertEquals(0.3926991F, homeLight0.getHeight(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      assertEquals(2, lightSourceArray0.length);
      assertNotSame(homeLight0, homeLight1);
      assertNotSame(homeLight0, homeLight2);
      
      boolean boolean1 = homeLight0.isNameCenterPointAt((-1541), 527.5414F, 0.0F);
      assertFalse(homeLight0.equals((Object)homeLight1));
      assertFalse(homeLight0.equals((Object)homeLight2));
      assertTrue(boolean1 == boolean0);
      assertEquals((short)10, bigDecimal0.shortValue());
      assertEquals((byte)10, bigDecimal0.byteValue());
      assertNull(catalogLight0.getInformation());
      assertTrue(catalogLight0.isDeformable());
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertTrue(catalogLight0.isResizable());
      assertFalse(catalogLight0.isBackFaceShown());
      assertEquals("/", catalogLight0.getDescription());
      assertEquals("/", catalogLight0.getName());
      assertTrue(catalogLight0.isMovable());
      assertNull(catalogLight0.getCurrency());
      assertEquals(0.3926991F, catalogLight0.getWidth(), 0.01F);
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertEquals((-727.8896F), catalogLight0.getElevation(), 0.01F);
      assertNull(catalogLight0.getColor());
      assertFalse(catalogLight0.isModifiable());
      assertEquals(92.121765F, catalogLight0.getDepth(), 0.01F);
      assertFalse(catalogLight0.isDoorOrWindow());
      assertTrue(catalogLight0.isProportional());
      assertNull(catalogLight0.getCreationDate());
      assertEquals("{L", catalogLight0.getCreator());
      assertNull(catalogLight0.getGrade());
      assertTrue(catalogLight0.isTexturable());
      assertEquals(0.3926991F, catalogLight0.getHeight(), 0.01F);
      assertEquals("/", catalogLight0.getId());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals(0.19634955F, homeLight0.getX(), 0.01F);
      assertNull(homeLight0.getShininess());
      assertEquals("/", homeLight0.getDescription());
      assertEquals((-727.8896F), homeLight0.getGroundElevation(), 0.01F);
      assertTrue(homeLight0.isMovable());
      assertTrue(homeLight0.isResizable());
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertNull(homeLight0.getCurrency());
      assertEquals(0.3926991F, homeLight0.getWidth(), 0.01F);
      assertTrue(homeLight0.isModelMirrored());
      assertNull(homeLight0.getColor());
      assertEquals(92.121765F, homeLight0.getDepth(), 0.01F);
      assertFalse(homeLight0.isNameVisible());
      assertTrue(homeLight0.isDeformable());
      assertFalse(homeLight0.isBackFaceShown());
      assertTrue(homeLight0.isVisible());
      assertEquals((-727.8896F), homeLight0.getElevation(), 0.01F);
      assertEquals(46.060883F, homeLight0.getY(), 0.01F);
      assertEquals("/", homeLight0.getCatalogId());
      assertEquals("/", homeLight0.getName());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertTrue(homeLight0.isTexturable());
      assertEquals(0.3926991F, homeLight0.getHeight(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      assertEquals(2, lightSourceArray0.length);
      assertNotSame(homeLight0, homeLight1);
      assertNotSame(homeLight0, homeLight2);
      assertFalse(boolean1);
      
      homeLight0.setY(4.3852863F);
      assertFalse(homeLight0.equals((Object)homeLight1));
      assertFalse(homeLight0.equals((Object)homeLight2));
      assertEquals((short)10, bigDecimal0.shortValue());
      assertEquals((byte)10, bigDecimal0.byteValue());
      assertNull(catalogLight0.getInformation());
      assertTrue(catalogLight0.isDeformable());
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertTrue(catalogLight0.isResizable());
      assertFalse(catalogLight0.isBackFaceShown());
      assertEquals("/", catalogLight0.getDescription());
      assertEquals("/", catalogLight0.getName());
      assertTrue(catalogLight0.isMovable());
      assertNull(catalogLight0.getCurrency());
      assertEquals(0.3926991F, catalogLight0.getWidth(), 0.01F);
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertEquals((-727.8896F), catalogLight0.getElevation(), 0.01F);
      assertNull(catalogLight0.getColor());
      assertFalse(catalogLight0.isModifiable());
      assertEquals(92.121765F, catalogLight0.getDepth(), 0.01F);
      assertFalse(catalogLight0.isDoorOrWindow());
      assertTrue(catalogLight0.isProportional());
      assertNull(catalogLight0.getCreationDate());
      assertEquals("{L", catalogLight0.getCreator());
      assertNull(catalogLight0.getGrade());
      assertTrue(catalogLight0.isTexturable());
      assertEquals(0.3926991F, catalogLight0.getHeight(), 0.01F);
      assertEquals("/", catalogLight0.getId());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals(0.19634955F, homeLight0.getX(), 0.01F);
      assertNull(homeLight0.getShininess());
      assertEquals("/", homeLight0.getDescription());
      assertEquals((-727.8896F), homeLight0.getGroundElevation(), 0.01F);
      assertTrue(homeLight0.isMovable());
      assertTrue(homeLight0.isResizable());
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertNull(homeLight0.getCurrency());
      assertEquals(0.3926991F, homeLight0.getWidth(), 0.01F);
      assertTrue(homeLight0.isModelMirrored());
      assertNull(homeLight0.getColor());
      assertEquals(92.121765F, homeLight0.getDepth(), 0.01F);
      assertFalse(homeLight0.isNameVisible());
      assertTrue(homeLight0.isDeformable());
      assertFalse(homeLight0.isBackFaceShown());
      assertTrue(homeLight0.isVisible());
      assertEquals(4.3852863F, homeLight0.getY(), 0.01F);
      assertEquals((-727.8896F), homeLight0.getElevation(), 0.01F);
      assertEquals("/", homeLight0.getCatalogId());
      assertEquals("/", homeLight0.getName());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertTrue(homeLight0.isTexturable());
      assertEquals(0.3926991F, homeLight0.getHeight(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      assertEquals(2, lightSourceArray0.length);
      assertNotSame(homeLight0, homeLight1);
      assertNotSame(homeLight0, homeLight2);
      
      HomeLight homeLight3 = new HomeLight(homeLight0);
      assertFalse(homeLight3.equals((Object)homeLight0));
      assertFalse(homeLight3.equals((Object)homeLight1));
      assertFalse(homeLight3.equals((Object)homeLight2));
      assertFalse(homeLight0.equals((Object)homeLight1));
      assertFalse(homeLight0.equals((Object)homeLight2));
      assertFalse(homeLight3.isBackFaceShown());
      assertFalse(homeLight3.isDoorOrWindow());
      assertEquals(0.3926991F, homeLight3.getWidth(), 0.01F);
      assertTrue(homeLight3.isTexturable());
      assertEquals(4.3852863F, homeLight3.getY(), 0.01F);
      assertEquals(0.0F, homeLight3.getAngle(), 0.01F);
      assertFalse(homeLight3.isNameVisible());
      assertEquals(92.121765F, homeLight3.getDepth(), 0.01F);
      assertEquals(0.0F, homeLight3.getNameYOffset(), 0.01F);
      assertNull(homeLight3.getCurrency());
      assertEquals(0.5F, homeLight3.getPower(), 0.01F);
      assertTrue(homeLight3.isModelMirrored());
      assertEquals(0.19634955F, homeLight3.getX(), 0.01F);
      assertNull(homeLight3.getColor());
      assertNull(homeLight3.getShininess());
      assertEquals("/", homeLight3.getDescription());
      assertNull(homeLight3.getStaircaseCutOutShape());
      assertEquals((-727.8896F), homeLight3.getGroundElevation(), 0.01F);
      assertTrue(homeLight3.isResizable());
      assertEquals(0.0F, homeLight3.getNameAngle(), 0.01F);
      assertTrue(homeLight3.isMovable());
      assertEquals("/", homeLight3.getCatalogId());
      assertTrue(homeLight3.isDeformable());
      assertTrue(homeLight3.isVisible());
      assertEquals((-727.8896F), homeLight3.getElevation(), 0.01F);
      assertEquals(0.3926991F, homeLight3.getHeight(), 0.01F);
      assertEquals(0.0F, homeLight3.getNameXOffset(), 0.01F);
      assertEquals("/", homeLight3.getName());
      assertEquals((short)10, bigDecimal0.shortValue());
      assertEquals((byte)10, bigDecimal0.byteValue());
      assertNull(catalogLight0.getInformation());
      assertTrue(catalogLight0.isDeformable());
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertTrue(catalogLight0.isResizable());
      assertFalse(catalogLight0.isBackFaceShown());
      assertEquals("/", catalogLight0.getDescription());
      assertEquals("/", catalogLight0.getName());
      assertTrue(catalogLight0.isMovable());
      assertNull(catalogLight0.getCurrency());
      assertEquals(0.3926991F, catalogLight0.getWidth(), 0.01F);
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertEquals((-727.8896F), catalogLight0.getElevation(), 0.01F);
      assertNull(catalogLight0.getColor());
      assertFalse(catalogLight0.isModifiable());
      assertEquals(92.121765F, catalogLight0.getDepth(), 0.01F);
      assertFalse(catalogLight0.isDoorOrWindow());
      assertTrue(catalogLight0.isProportional());
      assertNull(catalogLight0.getCreationDate());
      assertEquals("{L", catalogLight0.getCreator());
      assertNull(catalogLight0.getGrade());
      assertTrue(catalogLight0.isTexturable());
      assertEquals(0.3926991F, catalogLight0.getHeight(), 0.01F);
      assertEquals("/", catalogLight0.getId());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals(0.19634955F, homeLight0.getX(), 0.01F);
      assertNull(homeLight0.getShininess());
      assertEquals("/", homeLight0.getDescription());
      assertEquals((-727.8896F), homeLight0.getGroundElevation(), 0.01F);
      assertTrue(homeLight0.isMovable());
      assertTrue(homeLight0.isResizable());
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertNull(homeLight0.getCurrency());
      assertEquals(0.3926991F, homeLight0.getWidth(), 0.01F);
      assertTrue(homeLight0.isModelMirrored());
      assertNull(homeLight0.getColor());
      assertEquals(92.121765F, homeLight0.getDepth(), 0.01F);
      assertFalse(homeLight0.isNameVisible());
      assertTrue(homeLight0.isDeformable());
      assertFalse(homeLight0.isBackFaceShown());
      assertTrue(homeLight0.isVisible());
      assertEquals(4.3852863F, homeLight0.getY(), 0.01F);
      assertEquals((-727.8896F), homeLight0.getElevation(), 0.01F);
      assertEquals("/", homeLight0.getCatalogId());
      assertEquals("/", homeLight0.getName());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertTrue(homeLight0.isTexturable());
      assertEquals(0.3926991F, homeLight0.getHeight(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      assertEquals(2, lightSourceArray0.length);
      assertNotNull(homeLight3);
      
      float float0 = homeLight1.getGroundElevation();
      assertFalse(homeLight0.equals((Object)homeLight1));
      assertFalse(homeLight0.equals((Object)homeLight3));
      assertFalse(homeLight0.equals((Object)homeLight2));
      assertFalse(homeLight1.equals((Object)homeLight3));
      assertFalse(homeLight1.equals((Object)homeLight2));
      assertFalse(homeLight1.equals((Object)homeLight0));
      assertEquals((short)10, bigDecimal0.shortValue());
      assertEquals((byte)10, bigDecimal0.byteValue());
      assertNull(catalogLight0.getInformation());
      assertTrue(catalogLight0.isDeformable());
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertTrue(catalogLight0.isResizable());
      assertFalse(catalogLight0.isBackFaceShown());
      assertEquals("/", catalogLight0.getDescription());
      assertEquals("/", catalogLight0.getName());
      assertTrue(catalogLight0.isMovable());
      assertNull(catalogLight0.getCurrency());
      assertEquals(0.3926991F, catalogLight0.getWidth(), 0.01F);
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertEquals((-727.8896F), catalogLight0.getElevation(), 0.01F);
      assertNull(catalogLight0.getColor());
      assertFalse(catalogLight0.isModifiable());
      assertEquals(92.121765F, catalogLight0.getDepth(), 0.01F);
      assertFalse(catalogLight0.isDoorOrWindow());
      assertTrue(catalogLight0.isProportional());
      assertNull(catalogLight0.getCreationDate());
      assertEquals("{L", catalogLight0.getCreator());
      assertNull(catalogLight0.getGrade());
      assertTrue(catalogLight0.isTexturable());
      assertEquals(0.3926991F, catalogLight0.getHeight(), 0.01F);
      assertEquals("/", catalogLight0.getId());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals(0.19634955F, homeLight0.getX(), 0.01F);
      assertNull(homeLight0.getShininess());
      assertEquals("/", homeLight0.getDescription());
      assertEquals((-727.8896F), homeLight0.getGroundElevation(), 0.01F);
      assertTrue(homeLight0.isMovable());
      assertTrue(homeLight0.isResizable());
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertNull(homeLight0.getCurrency());
      assertEquals(0.3926991F, homeLight0.getWidth(), 0.01F);
      assertTrue(homeLight0.isModelMirrored());
      assertNull(homeLight0.getColor());
      assertEquals(92.121765F, homeLight0.getDepth(), 0.01F);
      assertFalse(homeLight0.isNameVisible());
      assertTrue(homeLight0.isDeformable());
      assertFalse(homeLight0.isBackFaceShown());
      assertTrue(homeLight0.isVisible());
      assertEquals(4.3852863F, homeLight0.getY(), 0.01F);
      assertEquals((-727.8896F), homeLight0.getElevation(), 0.01F);
      assertEquals("/", homeLight0.getCatalogId());
      assertEquals("/", homeLight0.getName());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertTrue(homeLight0.isTexturable());
      assertEquals(0.3926991F, homeLight0.getHeight(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      assertEquals("/", homeLight1.getCatalogId());
      assertEquals(46.060883F, homeLight1.getY(), 0.01F);
      assertTrue(homeLight1.isVisible());
      assertTrue(homeLight1.isDeformable());
      assertNull(homeLight1.getCurrency());
      assertEquals("/", homeLight1.getName());
      assertEquals(0.0F, homeLight1.getNameYOffset(), 0.01F);
      assertEquals((-727.8896F), homeLight1.getElevation(), 0.01F);
      assertNull(homeLight1.getColor());
      assertFalse(homeLight1.isModelMirrored());
      assertEquals(0.3926991F, homeLight1.getHeight(), 0.01F);
      assertEquals(0.19634955F, homeLight1.getX(), 0.01F);
      assertFalse(homeLight1.isNameVisible());
      assertFalse(homeLight1.isBackFaceShown());
      assertEquals(0.0F, homeLight1.getAngle(), 0.01F);
      assertEquals(0.3926991F, homeLight1.getWidth(), 0.01F);
      assertTrue(homeLight1.isTexturable());
      assertEquals(0.0F, homeLight1.getNameXOffset(), 0.01F);
      assertFalse(homeLight1.isDoorOrWindow());
      assertEquals((-727.8896F), homeLight1.getGroundElevation(), 0.01F);
      assertTrue(homeLight1.isMovable());
      assertNull(homeLight1.getStaircaseCutOutShape());
      assertEquals(92.121765F, homeLight1.getDepth(), 0.01F);
      assertEquals(0.5F, homeLight1.getPower(), 0.01F);
      assertNull(homeLight1.getShininess());
      assertTrue(homeLight1.isResizable());
      assertEquals("/", homeLight1.getDescription());
      assertEquals(0.0F, homeLight1.getNameAngle(), 0.01F);
      assertEquals(2, lightSourceArray0.length);
      assertNotSame(homeLight0, homeLight1);
      assertNotSame(homeLight0, homeLight3);
      assertNotSame(homeLight0, homeLight2);
      assertNotSame(homeLight1, homeLight3);
      assertNotSame(homeLight1, homeLight2);
      assertNotSame(homeLight1, homeLight0);
      assertEquals((-727.8896F), float0, 0.01F);
      
      homeLight0.setDepth(0.0F);
      assertFalse(homeLight0.equals((Object)homeLight1));
      assertFalse(homeLight0.equals((Object)homeLight3));
      assertFalse(homeLight0.equals((Object)homeLight2));
      assertEquals((short)10, bigDecimal0.shortValue());
      assertEquals((byte)10, bigDecimal0.byteValue());
      assertNull(catalogLight0.getInformation());
      assertTrue(catalogLight0.isDeformable());
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertTrue(catalogLight0.isResizable());
      assertFalse(catalogLight0.isBackFaceShown());
      assertEquals("/", catalogLight0.getDescription());
      assertEquals("/", catalogLight0.getName());
      assertTrue(catalogLight0.isMovable());
      assertNull(catalogLight0.getCurrency());
      assertEquals(0.3926991F, catalogLight0.getWidth(), 0.01F);
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertEquals((-727.8896F), catalogLight0.getElevation(), 0.01F);
      assertNull(catalogLight0.getColor());
      assertFalse(catalogLight0.isModifiable());
      assertEquals(92.121765F, catalogLight0.getDepth(), 0.01F);
      assertFalse(catalogLight0.isDoorOrWindow());
      assertTrue(catalogLight0.isProportional());
      assertNull(catalogLight0.getCreationDate());
      assertEquals("{L", catalogLight0.getCreator());
      assertNull(catalogLight0.getGrade());
      assertTrue(catalogLight0.isTexturable());
      assertEquals(0.3926991F, catalogLight0.getHeight(), 0.01F);
      assertEquals("/", catalogLight0.getId());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals(0.19634955F, homeLight0.getX(), 0.01F);
      assertNull(homeLight0.getShininess());
      assertEquals("/", homeLight0.getDescription());
      assertEquals((-727.8896F), homeLight0.getGroundElevation(), 0.01F);
      assertTrue(homeLight0.isMovable());
      assertTrue(homeLight0.isResizable());
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertNull(homeLight0.getCurrency());
      assertEquals(0.3926991F, homeLight0.getWidth(), 0.01F);
      assertTrue(homeLight0.isModelMirrored());
      assertNull(homeLight0.getColor());
      assertFalse(homeLight0.isNameVisible());
      assertTrue(homeLight0.isDeformable());
      assertFalse(homeLight0.isBackFaceShown());
      assertTrue(homeLight0.isVisible());
      assertEquals(4.3852863F, homeLight0.getY(), 0.01F);
      assertEquals((-727.8896F), homeLight0.getElevation(), 0.01F);
      assertEquals("/", homeLight0.getCatalogId());
      assertEquals("/", homeLight0.getName());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertTrue(homeLight0.isTexturable());
      assertEquals(0.3926991F, homeLight0.getHeight(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      assertEquals(2, lightSourceArray0.length);
      assertNotSame(homeLight0, homeLight1);
      assertNotSame(homeLight0, homeLight3);
      assertNotSame(homeLight0, homeLight2);
      
      boolean boolean2 = homeLight3.isPointAt(0.0F, 0.3926991F, 0.3926991F);
      assertFalse(homeLight3.equals((Object)homeLight0));
      assertFalse(homeLight3.equals((Object)homeLight1));
      assertFalse(homeLight3.equals((Object)homeLight2));
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertFalse(homeLight0.equals((Object)homeLight1));
      assertFalse(homeLight0.equals((Object)homeLight3));
      assertFalse(homeLight0.equals((Object)homeLight2));
      assertFalse(homeLight3.isBackFaceShown());
      assertFalse(homeLight3.isDoorOrWindow());
      assertEquals(0.3926991F, homeLight3.getWidth(), 0.01F);
      assertTrue(homeLight3.isTexturable());
      assertEquals(4.3852863F, homeLight3.getY(), 0.01F);
      assertEquals(0.0F, homeLight3.getAngle(), 0.01F);
      assertFalse(homeLight3.isNameVisible());
      assertEquals(92.121765F, homeLight3.getDepth(), 0.01F);
      assertEquals(0.0F, homeLight3.getNameYOffset(), 0.01F);
      assertNull(homeLight3.getCurrency());
      assertEquals(0.5F, homeLight3.getPower(), 0.01F);
      assertTrue(homeLight3.isModelMirrored());
      assertEquals(0.19634955F, homeLight3.getX(), 0.01F);
      assertNull(homeLight3.getColor());
      assertNull(homeLight3.getShininess());
      assertEquals("/", homeLight3.getDescription());
      assertNull(homeLight3.getStaircaseCutOutShape());
      assertEquals((-727.8896F), homeLight3.getGroundElevation(), 0.01F);
      assertTrue(homeLight3.isResizable());
      assertEquals(0.0F, homeLight3.getNameAngle(), 0.01F);
      assertTrue(homeLight3.isMovable());
      assertEquals("/", homeLight3.getCatalogId());
      assertTrue(homeLight3.isDeformable());
      assertTrue(homeLight3.isVisible());
      assertEquals((-727.8896F), homeLight3.getElevation(), 0.01F);
      assertEquals(0.3926991F, homeLight3.getHeight(), 0.01F);
      assertEquals(0.0F, homeLight3.getNameXOffset(), 0.01F);
      assertEquals("/", homeLight3.getName());
      assertEquals((short)10, bigDecimal0.shortValue());
      assertEquals((byte)10, bigDecimal0.byteValue());
      assertNull(catalogLight0.getInformation());
      assertTrue(catalogLight0.isDeformable());
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertTrue(catalogLight0.isResizable());
      assertFalse(catalogLight0.isBackFaceShown());
      assertEquals("/", catalogLight0.getDescription());
      assertEquals("/", catalogLight0.getName());
      assertTrue(catalogLight0.isMovable());
      assertNull(catalogLight0.getCurrency());
      assertEquals(0.3926991F, catalogLight0.getWidth(), 0.01F);
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertEquals((-727.8896F), catalogLight0.getElevation(), 0.01F);
      assertNull(catalogLight0.getColor());
      assertFalse(catalogLight0.isModifiable());
      assertEquals(92.121765F, catalogLight0.getDepth(), 0.01F);
      assertFalse(catalogLight0.isDoorOrWindow());
      assertTrue(catalogLight0.isProportional());
      assertNull(catalogLight0.getCreationDate());
      assertEquals("{L", catalogLight0.getCreator());
      assertNull(catalogLight0.getGrade());
      assertTrue(catalogLight0.isTexturable());
      assertEquals(0.3926991F, catalogLight0.getHeight(), 0.01F);
      assertEquals("/", catalogLight0.getId());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals(0.19634955F, homeLight0.getX(), 0.01F);
      assertNull(homeLight0.getShininess());
      assertEquals("/", homeLight0.getDescription());
      assertEquals((-727.8896F), homeLight0.getGroundElevation(), 0.01F);
      assertTrue(homeLight0.isMovable());
      assertTrue(homeLight0.isResizable());
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertNull(homeLight0.getCurrency());
      assertEquals(0.3926991F, homeLight0.getWidth(), 0.01F);
      assertTrue(homeLight0.isModelMirrored());
      assertNull(homeLight0.getColor());
      assertFalse(homeLight0.isNameVisible());
      assertTrue(homeLight0.isDeformable());
      assertFalse(homeLight0.isBackFaceShown());
      assertTrue(homeLight0.isVisible());
      assertEquals(4.3852863F, homeLight0.getY(), 0.01F);
      assertEquals((-727.8896F), homeLight0.getElevation(), 0.01F);
      assertEquals("/", homeLight0.getCatalogId());
      assertEquals("/", homeLight0.getName());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertTrue(homeLight0.isTexturable());
      assertEquals(0.3926991F, homeLight0.getHeight(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      assertEquals(2, lightSourceArray0.length);
      assertNotSame(homeLight3, homeLight0);
      assertNotSame(homeLight3, homeLight1);
      assertNotSame(homeLight3, homeLight2);
      assertNotSame(homeLight0, homeLight1);
      assertNotSame(homeLight0, homeLight3);
      assertNotSame(homeLight0, homeLight2);
      assertFalse(boolean2);
  }

  @Test(timeout = 4000)
  public void test227()  throws Throwable  {
      LightSource[] lightSourceArray0 = new LightSource[10];
      BigDecimal bigDecimal0 = BigDecimal.TEN;
      assertEquals((short)10, bigDecimal0.shortValue());
      assertEquals((byte)10, bigDecimal0.byteValue());
      assertNotNull(bigDecimal0);
      
      CatalogLight catalogLight0 = new CatalogLight("h&+)`\"", "h&+)`\"", "h&+)`\"", (Content) null, (Content) null, (-2263.0F), (-2263.0F), (-2263.0F), (-2263.0F), false, lightSourceArray0, (float[][]) null, "h&+)`\"", false, bigDecimal0, bigDecimal0);
      assertEquals((short)10, bigDecimal0.shortValue());
      assertEquals((byte)10, bigDecimal0.byteValue());
      assertNull(catalogLight0.getColor());
      assertFalse(catalogLight0.isModifiable());
      assertEquals((-2263.0F), catalogLight0.getWidth(), 0.01F);
      assertFalse(catalogLight0.isDoorOrWindow());
      assertEquals("h&+)`\"", catalogLight0.getDescription());
      assertTrue(catalogLight0.isProportional());
      assertFalse(catalogLight0.isMovable());
      assertEquals("h&+)`\"", catalogLight0.getCreator());
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertFalse(catalogLight0.isResizable());
      assertTrue(catalogLight0.isTexturable());
      assertNull(catalogLight0.getGrade());
      assertFalse(catalogLight0.isBackFaceShown());
      assertNull(catalogLight0.getInformation());
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertTrue(catalogLight0.isDeformable());
      assertEquals("h&+)`\"", catalogLight0.getId());
      assertEquals((-2263.0F), catalogLight0.getHeight(), 0.01F);
      assertEquals((-2263.0F), catalogLight0.getDepth(), 0.01F);
      assertEquals("h&+)`\"", catalogLight0.getName());
      assertEquals((-2263.0F), catalogLight0.getElevation(), 0.01F);
      assertNull(catalogLight0.getCurrency());
      assertNull(catalogLight0.getCreationDate());
      assertEquals(10, lightSourceArray0.length);
      assertNotNull(catalogLight0);
      
      HomeLight homeLight0 = new HomeLight(catalogLight0);
      assertEquals((short)10, bigDecimal0.shortValue());
      assertEquals((byte)10, bigDecimal0.byteValue());
      assertNull(catalogLight0.getColor());
      assertFalse(catalogLight0.isModifiable());
      assertEquals((-2263.0F), catalogLight0.getWidth(), 0.01F);
      assertFalse(catalogLight0.isDoorOrWindow());
      assertEquals("h&+)`\"", catalogLight0.getDescription());
      assertTrue(catalogLight0.isProportional());
      assertFalse(catalogLight0.isMovable());
      assertEquals("h&+)`\"", catalogLight0.getCreator());
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertFalse(catalogLight0.isResizable());
      assertTrue(catalogLight0.isTexturable());
      assertNull(catalogLight0.getGrade());
      assertFalse(catalogLight0.isBackFaceShown());
      assertNull(catalogLight0.getInformation());
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertTrue(catalogLight0.isDeformable());
      assertEquals("h&+)`\"", catalogLight0.getId());
      assertEquals((-2263.0F), catalogLight0.getHeight(), 0.01F);
      assertEquals((-2263.0F), catalogLight0.getDepth(), 0.01F);
      assertEquals("h&+)`\"", catalogLight0.getName());
      assertEquals((-2263.0F), catalogLight0.getElevation(), 0.01F);
      assertNull(catalogLight0.getCurrency());
      assertNull(catalogLight0.getCreationDate());
      assertTrue(homeLight0.isTexturable());
      assertEquals("h&+)`\"", homeLight0.getDescription());
      assertFalse(homeLight0.isDoorOrWindow());
      assertEquals((-2263.0F), homeLight0.getHeight(), 0.01F);
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertNull(homeLight0.getColor());
      assertEquals("h&+)`\"", homeLight0.getName());
      assertNull(homeLight0.getCurrency());
      assertEquals((-2263.0F), homeLight0.getElevation(), 0.01F);
      assertEquals((-2263.0F), homeLight0.getWidth(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertTrue(homeLight0.isVisible());
      assertTrue(homeLight0.isDeformable());
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertFalse(homeLight0.isResizable());
      assertEquals((-1131.5F), homeLight0.getY(), 0.01F);
      assertNull(homeLight0.getShininess());
      assertEquals((-1131.5F), homeLight0.getX(), 0.01F);
      assertEquals((-2263.0F), homeLight0.getGroundElevation(), 0.01F);
      assertFalse(homeLight0.isMovable());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertFalse(homeLight0.isNameVisible());
      assertEquals((-2263.0F), homeLight0.getDepth(), 0.01F);
      assertFalse(homeLight0.isModelMirrored());
      assertFalse(homeLight0.isBackFaceShown());
      assertEquals("h&+)`\"", homeLight0.getCatalogId());
      assertEquals(10, lightSourceArray0.length);
      assertNotNull(homeLight0);
      
      boolean boolean0 = homeLight0.isBottomRightPointAt((-2263.0F), (-2263.0F), (-2263.0F));
      assertEquals((short)10, bigDecimal0.shortValue());
      assertEquals((byte)10, bigDecimal0.byteValue());
      assertNull(catalogLight0.getColor());
      assertFalse(catalogLight0.isModifiable());
      assertEquals((-2263.0F), catalogLight0.getWidth(), 0.01F);
      assertFalse(catalogLight0.isDoorOrWindow());
      assertEquals("h&+)`\"", catalogLight0.getDescription());
      assertTrue(catalogLight0.isProportional());
      assertFalse(catalogLight0.isMovable());
      assertEquals("h&+)`\"", catalogLight0.getCreator());
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertFalse(catalogLight0.isResizable());
      assertTrue(catalogLight0.isTexturable());
      assertNull(catalogLight0.getGrade());
      assertFalse(catalogLight0.isBackFaceShown());
      assertNull(catalogLight0.getInformation());
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertTrue(catalogLight0.isDeformable());
      assertEquals("h&+)`\"", catalogLight0.getId());
      assertEquals((-2263.0F), catalogLight0.getHeight(), 0.01F);
      assertEquals((-2263.0F), catalogLight0.getDepth(), 0.01F);
      assertEquals("h&+)`\"", catalogLight0.getName());
      assertEquals((-2263.0F), catalogLight0.getElevation(), 0.01F);
      assertNull(catalogLight0.getCurrency());
      assertNull(catalogLight0.getCreationDate());
      assertTrue(homeLight0.isTexturable());
      assertEquals("h&+)`\"", homeLight0.getDescription());
      assertFalse(homeLight0.isDoorOrWindow());
      assertEquals((-2263.0F), homeLight0.getHeight(), 0.01F);
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertNull(homeLight0.getColor());
      assertEquals("h&+)`\"", homeLight0.getName());
      assertNull(homeLight0.getCurrency());
      assertEquals((-2263.0F), homeLight0.getElevation(), 0.01F);
      assertEquals((-2263.0F), homeLight0.getWidth(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertTrue(homeLight0.isVisible());
      assertTrue(homeLight0.isDeformable());
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertFalse(homeLight0.isResizable());
      assertEquals((-1131.5F), homeLight0.getY(), 0.01F);
      assertNull(homeLight0.getShininess());
      assertEquals((-1131.5F), homeLight0.getX(), 0.01F);
      assertEquals((-2263.0F), homeLight0.getGroundElevation(), 0.01F);
      assertFalse(homeLight0.isMovable());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertFalse(homeLight0.isNameVisible());
      assertEquals((-2263.0F), homeLight0.getDepth(), 0.01F);
      assertFalse(homeLight0.isModelMirrored());
      assertFalse(homeLight0.isBackFaceShown());
      assertEquals("h&+)`\"", homeLight0.getCatalogId());
      assertEquals(10, lightSourceArray0.length);
      assertFalse(boolean0);
      
      float[][] floatArray0 = homeLight0.getPoints();
      assertEquals((short)10, bigDecimal0.shortValue());
      assertEquals((byte)10, bigDecimal0.byteValue());
      assertNull(catalogLight0.getColor());
      assertFalse(catalogLight0.isModifiable());
      assertEquals((-2263.0F), catalogLight0.getWidth(), 0.01F);
      assertFalse(catalogLight0.isDoorOrWindow());
      assertEquals("h&+)`\"", catalogLight0.getDescription());
      assertTrue(catalogLight0.isProportional());
      assertFalse(catalogLight0.isMovable());
      assertEquals("h&+)`\"", catalogLight0.getCreator());
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertFalse(catalogLight0.isResizable());
      assertTrue(catalogLight0.isTexturable());
      assertNull(catalogLight0.getGrade());
      assertFalse(catalogLight0.isBackFaceShown());
      assertNull(catalogLight0.getInformation());
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertTrue(catalogLight0.isDeformable());
      assertEquals("h&+)`\"", catalogLight0.getId());
      assertEquals((-2263.0F), catalogLight0.getHeight(), 0.01F);
      assertEquals((-2263.0F), catalogLight0.getDepth(), 0.01F);
      assertEquals("h&+)`\"", catalogLight0.getName());
      assertEquals((-2263.0F), catalogLight0.getElevation(), 0.01F);
      assertNull(catalogLight0.getCurrency());
      assertNull(catalogLight0.getCreationDate());
      assertTrue(homeLight0.isTexturable());
      assertEquals("h&+)`\"", homeLight0.getDescription());
      assertFalse(homeLight0.isDoorOrWindow());
      assertEquals((-2263.0F), homeLight0.getHeight(), 0.01F);
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertNull(homeLight0.getColor());
      assertEquals("h&+)`\"", homeLight0.getName());
      assertNull(homeLight0.getCurrency());
      assertEquals((-2263.0F), homeLight0.getElevation(), 0.01F);
      assertEquals((-2263.0F), homeLight0.getWidth(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertTrue(homeLight0.isVisible());
      assertTrue(homeLight0.isDeformable());
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertFalse(homeLight0.isResizable());
      assertEquals((-1131.5F), homeLight0.getY(), 0.01F);
      assertNull(homeLight0.getShininess());
      assertEquals((-1131.5F), homeLight0.getX(), 0.01F);
      assertEquals((-2263.0F), homeLight0.getGroundElevation(), 0.01F);
      assertFalse(homeLight0.isMovable());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertFalse(homeLight0.isNameVisible());
      assertEquals((-2263.0F), homeLight0.getDepth(), 0.01F);
      assertFalse(homeLight0.isModelMirrored());
      assertFalse(homeLight0.isBackFaceShown());
      assertEquals("h&+)`\"", homeLight0.getCatalogId());
      assertEquals(10, lightSourceArray0.length);
      assertEquals(4, floatArray0.length);
      assertNotNull(floatArray0);
      
      float[][] floatArray1 = homeLight0.getModelRotation();
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertEquals((short)10, bigDecimal0.shortValue());
      assertEquals((byte)10, bigDecimal0.byteValue());
      assertNull(catalogLight0.getColor());
      assertFalse(catalogLight0.isModifiable());
      assertEquals((-2263.0F), catalogLight0.getWidth(), 0.01F);
      assertFalse(catalogLight0.isDoorOrWindow());
      assertEquals("h&+)`\"", catalogLight0.getDescription());
      assertTrue(catalogLight0.isProportional());
      assertFalse(catalogLight0.isMovable());
      assertEquals("h&+)`\"", catalogLight0.getCreator());
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertFalse(catalogLight0.isResizable());
      assertTrue(catalogLight0.isTexturable());
      assertNull(catalogLight0.getGrade());
      assertFalse(catalogLight0.isBackFaceShown());
      assertNull(catalogLight0.getInformation());
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertTrue(catalogLight0.isDeformable());
      assertEquals("h&+)`\"", catalogLight0.getId());
      assertEquals((-2263.0F), catalogLight0.getHeight(), 0.01F);
      assertEquals((-2263.0F), catalogLight0.getDepth(), 0.01F);
      assertEquals("h&+)`\"", catalogLight0.getName());
      assertEquals((-2263.0F), catalogLight0.getElevation(), 0.01F);
      assertNull(catalogLight0.getCurrency());
      assertNull(catalogLight0.getCreationDate());
      assertTrue(homeLight0.isTexturable());
      assertEquals("h&+)`\"", homeLight0.getDescription());
      assertFalse(homeLight0.isDoorOrWindow());
      assertEquals((-2263.0F), homeLight0.getHeight(), 0.01F);
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertNull(homeLight0.getColor());
      assertEquals("h&+)`\"", homeLight0.getName());
      assertNull(homeLight0.getCurrency());
      assertEquals((-2263.0F), homeLight0.getElevation(), 0.01F);
      assertEquals((-2263.0F), homeLight0.getWidth(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertTrue(homeLight0.isVisible());
      assertTrue(homeLight0.isDeformable());
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertFalse(homeLight0.isResizable());
      assertEquals((-1131.5F), homeLight0.getY(), 0.01F);
      assertNull(homeLight0.getShininess());
      assertEquals((-1131.5F), homeLight0.getX(), 0.01F);
      assertEquals((-2263.0F), homeLight0.getGroundElevation(), 0.01F);
      assertFalse(homeLight0.isMovable());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertFalse(homeLight0.isNameVisible());
      assertEquals((-2263.0F), homeLight0.getDepth(), 0.01F);
      assertFalse(homeLight0.isModelMirrored());
      assertFalse(homeLight0.isBackFaceShown());
      assertEquals("h&+)`\"", homeLight0.getCatalogId());
      assertEquals(10, lightSourceArray0.length);
      assertEquals(3, floatArray1.length);
      assertNotSame(floatArray1, floatArray0);
      assertNotNull(floatArray1);
  }

  @Test(timeout = 4000)
  public void test228()  throws Throwable  {
      LightSource[] lightSourceArray0 = new LightSource[1];
      BigDecimal bigDecimal0 = BigDecimal.ONE;
      assertEquals((short)1, bigDecimal0.shortValue());
      assertEquals((byte)1, bigDecimal0.byteValue());
      assertNotNull(bigDecimal0);
      
      CatalogLight catalogLight0 = new CatalogLight("h&i*+\"", "h&i*+\"", "h&i*+\"", (Content) null, (Content) null, (-2265.2297F), (-2265.2297F), (-2265.2297F), (-2265.2297F), false, lightSourceArray0, (float[][]) null, "h&i*+\"", false, bigDecimal0, bigDecimal0);
      assertEquals((short)1, bigDecimal0.shortValue());
      assertEquals((byte)1, bigDecimal0.byteValue());
      assertNull(catalogLight0.getInformation());
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertTrue(catalogLight0.isDeformable());
      assertEquals("h&i*+\"", catalogLight0.getId());
      assertNull(catalogLight0.getGrade());
      assertEquals((-2265.2297F), catalogLight0.getWidth(), 0.01F);
      assertFalse(catalogLight0.isBackFaceShown());
      assertEquals((-2265.2297F), catalogLight0.getElevation(), 0.01F);
      assertTrue(catalogLight0.isTexturable());
      assertEquals((-2265.2297F), catalogLight0.getDepth(), 0.01F);
      assertTrue(catalogLight0.isProportional());
      assertEquals("h&i*+\"", catalogLight0.getName());
      assertFalse(catalogLight0.isResizable());
      assertNull(catalogLight0.getColor());
      assertFalse(catalogLight0.isModifiable());
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertNull(catalogLight0.getCreationDate());
      assertFalse(catalogLight0.isDoorOrWindow());
      assertEquals((-2265.2297F), catalogLight0.getHeight(), 0.01F);
      assertEquals("h&i*+\"", catalogLight0.getDescription());
      assertNull(catalogLight0.getCurrency());
      assertFalse(catalogLight0.isMovable());
      assertEquals("h&i*+\"", catalogLight0.getCreator());
      assertEquals(1, lightSourceArray0.length);
      assertNotNull(catalogLight0);
      
      HomeLight homeLight0 = new HomeLight(catalogLight0);
      assertEquals((short)1, bigDecimal0.shortValue());
      assertEquals((byte)1, bigDecimal0.byteValue());
      assertNull(catalogLight0.getInformation());
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertTrue(catalogLight0.isDeformable());
      assertEquals("h&i*+\"", catalogLight0.getId());
      assertNull(catalogLight0.getGrade());
      assertEquals((-2265.2297F), catalogLight0.getWidth(), 0.01F);
      assertFalse(catalogLight0.isBackFaceShown());
      assertEquals((-2265.2297F), catalogLight0.getElevation(), 0.01F);
      assertTrue(catalogLight0.isTexturable());
      assertEquals((-2265.2297F), catalogLight0.getDepth(), 0.01F);
      assertTrue(catalogLight0.isProportional());
      assertEquals("h&i*+\"", catalogLight0.getName());
      assertFalse(catalogLight0.isResizable());
      assertNull(catalogLight0.getColor());
      assertFalse(catalogLight0.isModifiable());
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertNull(catalogLight0.getCreationDate());
      assertFalse(catalogLight0.isDoorOrWindow());
      assertEquals((-2265.2297F), catalogLight0.getHeight(), 0.01F);
      assertEquals("h&i*+\"", catalogLight0.getDescription());
      assertNull(catalogLight0.getCurrency());
      assertFalse(catalogLight0.isMovable());
      assertEquals("h&i*+\"", catalogLight0.getCreator());
      assertNull(homeLight0.getColor());
      assertFalse(homeLight0.isNameVisible());
      assertFalse(homeLight0.isBackFaceShown());
      assertEquals((-1132.6149F), homeLight0.getY(), 0.01F);
      assertEquals((-1132.6149F), homeLight0.getX(), 0.01F);
      assertEquals((-2265.2297F), homeLight0.getElevation(), 0.01F);
      assertTrue(homeLight0.isDeformable());
      assertEquals((-2265.2297F), homeLight0.getGroundElevation(), 0.01F);
      assertEquals("h&i*+\"", homeLight0.getName());
      assertFalse(homeLight0.isModelMirrored());
      assertTrue(homeLight0.isVisible());
      assertEquals("h&i*+\"", homeLight0.getCatalogId());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertNull(homeLight0.getCurrency());
      assertFalse(homeLight0.isMovable());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertEquals((-2265.2297F), homeLight0.getWidth(), 0.01F);
      assertEquals((-2265.2297F), homeLight0.getHeight(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertFalse(homeLight0.isResizable());
      assertNull(homeLight0.getShininess());
      assertEquals((-2265.2297F), homeLight0.getDepth(), 0.01F);
      assertEquals("h&i*+\"", homeLight0.getDescription());
      assertFalse(homeLight0.isDoorOrWindow());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertTrue(homeLight0.isTexturable());
      assertEquals(1, lightSourceArray0.length);
      assertNotNull(homeLight0);
      
      PropertyChangeListener propertyChangeListener0 = mock(PropertyChangeListener.class, new ViolatedAssumptionAnswer());
      PropertyChangeListenerProxy propertyChangeListenerProxy0 = new PropertyChangeListenerProxy("", propertyChangeListener0);
      assertEquals("", propertyChangeListenerProxy0.getPropertyName());
      assertNotNull(propertyChangeListenerProxy0);
      
      homeLight0.removePropertyChangeListener(propertyChangeListenerProxy0);
      assertEquals((short)1, bigDecimal0.shortValue());
      assertEquals((byte)1, bigDecimal0.byteValue());
      assertNull(catalogLight0.getInformation());
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertTrue(catalogLight0.isDeformable());
      assertEquals("h&i*+\"", catalogLight0.getId());
      assertNull(catalogLight0.getGrade());
      assertEquals((-2265.2297F), catalogLight0.getWidth(), 0.01F);
      assertFalse(catalogLight0.isBackFaceShown());
      assertEquals((-2265.2297F), catalogLight0.getElevation(), 0.01F);
      assertTrue(catalogLight0.isTexturable());
      assertEquals((-2265.2297F), catalogLight0.getDepth(), 0.01F);
      assertTrue(catalogLight0.isProportional());
      assertEquals("h&i*+\"", catalogLight0.getName());
      assertFalse(catalogLight0.isResizable());
      assertNull(catalogLight0.getColor());
      assertFalse(catalogLight0.isModifiable());
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertNull(catalogLight0.getCreationDate());
      assertFalse(catalogLight0.isDoorOrWindow());
      assertEquals((-2265.2297F), catalogLight0.getHeight(), 0.01F);
      assertEquals("h&i*+\"", catalogLight0.getDescription());
      assertNull(catalogLight0.getCurrency());
      assertFalse(catalogLight0.isMovable());
      assertEquals("h&i*+\"", catalogLight0.getCreator());
      assertNull(homeLight0.getColor());
      assertFalse(homeLight0.isNameVisible());
      assertFalse(homeLight0.isBackFaceShown());
      assertEquals((-1132.6149F), homeLight0.getY(), 0.01F);
      assertEquals((-1132.6149F), homeLight0.getX(), 0.01F);
      assertEquals((-2265.2297F), homeLight0.getElevation(), 0.01F);
      assertTrue(homeLight0.isDeformable());
      assertEquals((-2265.2297F), homeLight0.getGroundElevation(), 0.01F);
      assertEquals("h&i*+\"", homeLight0.getName());
      assertFalse(homeLight0.isModelMirrored());
      assertTrue(homeLight0.isVisible());
      assertEquals("h&i*+\"", homeLight0.getCatalogId());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertNull(homeLight0.getCurrency());
      assertFalse(homeLight0.isMovable());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertEquals((-2265.2297F), homeLight0.getWidth(), 0.01F);
      assertEquals((-2265.2297F), homeLight0.getHeight(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertFalse(homeLight0.isResizable());
      assertNull(homeLight0.getShininess());
      assertEquals((-2265.2297F), homeLight0.getDepth(), 0.01F);
      assertEquals("h&i*+\"", homeLight0.getDescription());
      assertFalse(homeLight0.isDoorOrWindow());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertTrue(homeLight0.isTexturable());
      assertEquals("", propertyChangeListenerProxy0.getPropertyName());
      assertEquals(1, lightSourceArray0.length);
      
      // Undeclared exception!
      try { 
        homeLight0.setHeight((-2265.2297F));
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Piece isn't resizable
         //
         verifyException("com.eteks.sweethome3d.model.HomePieceOfFurniture", e);
      }
  }

  @Test(timeout = 4000)
  public void test229()  throws Throwable  {
      LightSource[] lightSourceArray0 = new LightSource[2];
      LightSource lightSource0 = new LightSource((-815.0F), 0.0F, 0.0F, 114);
      assertNull(lightSource0.getDiameter());
      assertEquals(114, lightSource0.getColor());
      assertEquals(0.0F, lightSource0.getZ(), 0.01F);
      assertEquals((-815.0F), lightSource0.getX(), 0.01F);
      assertEquals(0.0F, lightSource0.getY(), 0.01F);
      assertNotNull(lightSource0);
      
      lightSourceArray0[0] = lightSource0;
      LightSource lightSource1 = new LightSource((-694.0F), 0.36957806F, (-127.62969F), 114);
      assertFalse(lightSource1.equals((Object)lightSource0));
      assertNull(lightSource1.getDiameter());
      assertEquals((-127.62969F), lightSource1.getZ(), 0.01F);
      assertEquals(114, lightSource1.getColor());
      assertEquals(0.36957806F, lightSource1.getY(), 0.01F);
      assertEquals((-694.0F), lightSource1.getX(), 0.01F);
      assertNotNull(lightSource1);
      
      lightSourceArray0[1] = lightSource1;
      BigDecimal bigDecimal0 = BigDecimal.TEN;
      assertEquals((byte)10, bigDecimal0.byteValue());
      assertEquals((short)10, bigDecimal0.shortValue());
      assertNotNull(bigDecimal0);
      
      CatalogLight catalogLight0 = new CatalogLight("h&9+\"", "h&9+\"", "h&9+\"", (Content) null, (Content) null, (-815.0F), 0.36957806F, (-694.0F), (-694.0F), true, lightSourceArray0, (float[][]) null, "h&9+\"", true, bigDecimal0, bigDecimal0);
      assertEquals((byte)10, bigDecimal0.byteValue());
      assertEquals((short)10, bigDecimal0.shortValue());
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertEquals("h&9+\"", catalogLight0.getCreator());
      assertEquals("h&9+\"", catalogLight0.getDescription());
      assertEquals("h&9+\"", catalogLight0.getName());
      assertEquals((-694.0F), catalogLight0.getHeight(), 0.01F);
      assertEquals("h&9+\"", catalogLight0.getId());
      assertFalse(catalogLight0.isModifiable());
      assertNull(catalogLight0.getCreationDate());
      assertEquals((-694.0F), catalogLight0.getElevation(), 0.01F);
      assertNull(catalogLight0.getCurrency());
      assertFalse(catalogLight0.isBackFaceShown());
      assertNull(catalogLight0.getInformation());
      assertTrue(catalogLight0.isResizable());
      assertEquals(0.36957806F, catalogLight0.getDepth(), 0.01F);
      assertTrue(catalogLight0.isDeformable());
      assertNull(catalogLight0.getColor());
      assertTrue(catalogLight0.isProportional());
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertTrue(catalogLight0.isMovable());
      assertTrue(catalogLight0.isTexturable());
      assertFalse(catalogLight0.isDoorOrWindow());
      assertNull(catalogLight0.getGrade());
      assertEquals((-815.0F), catalogLight0.getWidth(), 0.01F);
      assertEquals(2, lightSourceArray0.length);
      assertNotNull(catalogLight0);
      
      HomeLight homeLight0 = new HomeLight(catalogLight0);
      assertEquals((byte)10, bigDecimal0.byteValue());
      assertEquals((short)10, bigDecimal0.shortValue());
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertEquals("h&9+\"", catalogLight0.getCreator());
      assertEquals("h&9+\"", catalogLight0.getDescription());
      assertEquals("h&9+\"", catalogLight0.getName());
      assertEquals((-694.0F), catalogLight0.getHeight(), 0.01F);
      assertEquals("h&9+\"", catalogLight0.getId());
      assertFalse(catalogLight0.isModifiable());
      assertNull(catalogLight0.getCreationDate());
      assertEquals((-694.0F), catalogLight0.getElevation(), 0.01F);
      assertNull(catalogLight0.getCurrency());
      assertFalse(catalogLight0.isBackFaceShown());
      assertNull(catalogLight0.getInformation());
      assertTrue(catalogLight0.isResizable());
      assertEquals(0.36957806F, catalogLight0.getDepth(), 0.01F);
      assertTrue(catalogLight0.isDeformable());
      assertNull(catalogLight0.getColor());
      assertTrue(catalogLight0.isProportional());
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertTrue(catalogLight0.isMovable());
      assertTrue(catalogLight0.isTexturable());
      assertFalse(catalogLight0.isDoorOrWindow());
      assertNull(catalogLight0.getGrade());
      assertEquals((-815.0F), catalogLight0.getWidth(), 0.01F);
      assertNull(homeLight0.getCurrency());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertTrue(homeLight0.isDeformable());
      assertTrue(homeLight0.isVisible());
      assertFalse(homeLight0.isNameVisible());
      assertEquals((-407.5F), homeLight0.getX(), 0.01F);
      assertFalse(homeLight0.isBackFaceShown());
      assertFalse(homeLight0.isModelMirrored());
      assertEquals(0.18478903F, homeLight0.getY(), 0.01F);
      assertTrue(homeLight0.isTexturable());
      assertNull(homeLight0.getShininess());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertTrue(homeLight0.isResizable());
      assertEquals((-694.0F), homeLight0.getGroundElevation(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals((-694.0F), homeLight0.getElevation(), 0.01F);
      assertEquals("h&9+\"", homeLight0.getName());
      assertEquals("h&9+\"", homeLight0.getDescription());
      assertEquals(0.36957806F, homeLight0.getDepth(), 0.01F);
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertTrue(homeLight0.isMovable());
      assertEquals("h&9+\"", homeLight0.getCatalogId());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertEquals((-815.0F), homeLight0.getWidth(), 0.01F);
      assertEquals((-694.0F), homeLight0.getHeight(), 0.01F);
      assertNull(homeLight0.getColor());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals(2, lightSourceArray0.length);
      assertNotNull(homeLight0);
      
      HomeLight homeLight1 = homeLight0.clone();
      assertFalse(homeLight1.equals((Object)homeLight0));
      assertEquals((byte)10, bigDecimal0.byteValue());
      assertEquals((short)10, bigDecimal0.shortValue());
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertEquals("h&9+\"", catalogLight0.getCreator());
      assertEquals("h&9+\"", catalogLight0.getDescription());
      assertEquals("h&9+\"", catalogLight0.getName());
      assertEquals((-694.0F), catalogLight0.getHeight(), 0.01F);
      assertEquals("h&9+\"", catalogLight0.getId());
      assertFalse(catalogLight0.isModifiable());
      assertNull(catalogLight0.getCreationDate());
      assertEquals((-694.0F), catalogLight0.getElevation(), 0.01F);
      assertNull(catalogLight0.getCurrency());
      assertFalse(catalogLight0.isBackFaceShown());
      assertNull(catalogLight0.getInformation());
      assertTrue(catalogLight0.isResizable());
      assertEquals(0.36957806F, catalogLight0.getDepth(), 0.01F);
      assertTrue(catalogLight0.isDeformable());
      assertNull(catalogLight0.getColor());
      assertTrue(catalogLight0.isProportional());
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertTrue(catalogLight0.isMovable());
      assertTrue(catalogLight0.isTexturable());
      assertFalse(catalogLight0.isDoorOrWindow());
      assertNull(catalogLight0.getGrade());
      assertEquals((-815.0F), catalogLight0.getWidth(), 0.01F);
      assertNull(homeLight0.getCurrency());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertTrue(homeLight0.isDeformable());
      assertTrue(homeLight0.isVisible());
      assertFalse(homeLight0.isNameVisible());
      assertEquals((-407.5F), homeLight0.getX(), 0.01F);
      assertFalse(homeLight0.isBackFaceShown());
      assertFalse(homeLight0.isModelMirrored());
      assertEquals(0.18478903F, homeLight0.getY(), 0.01F);
      assertTrue(homeLight0.isTexturable());
      assertNull(homeLight0.getShininess());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertTrue(homeLight0.isResizable());
      assertEquals((-694.0F), homeLight0.getGroundElevation(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals((-694.0F), homeLight0.getElevation(), 0.01F);
      assertEquals("h&9+\"", homeLight0.getName());
      assertEquals("h&9+\"", homeLight0.getDescription());
      assertEquals(0.36957806F, homeLight0.getDepth(), 0.01F);
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertTrue(homeLight0.isMovable());
      assertEquals("h&9+\"", homeLight0.getCatalogId());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertEquals((-815.0F), homeLight0.getWidth(), 0.01F);
      assertEquals((-694.0F), homeLight0.getHeight(), 0.01F);
      assertNull(homeLight0.getColor());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertNull(homeLight1.getShininess());
      assertEquals((-815.0F), homeLight1.getWidth(), 0.01F);
      assertNull(homeLight1.getStaircaseCutOutShape());
      assertTrue(homeLight1.isDeformable());
      assertTrue(homeLight1.isVisible());
      assertTrue(homeLight1.isResizable());
      assertNull(homeLight1.getCurrency());
      assertEquals(0.0F, homeLight1.getNameYOffset(), 0.01F);
      assertEquals("h&9+\"", homeLight1.getName());
      assertEquals("h&9+\"", homeLight1.getCatalogId());
      assertEquals(0.0F, homeLight1.getNameAngle(), 0.01F);
      assertTrue(homeLight1.isMovable());
      assertEquals(0.5F, homeLight1.getPower(), 0.01F);
      assertEquals((-407.5F), homeLight1.getX(), 0.01F);
      assertEquals((-694.0F), homeLight1.getHeight(), 0.01F);
      assertTrue(homeLight1.isTexturable());
      assertFalse(homeLight1.isBackFaceShown());
      assertFalse(homeLight1.isModelMirrored());
      assertEquals(0.18478903F, homeLight1.getY(), 0.01F);
      assertFalse(homeLight1.isDoorOrWindow());
      assertNull(homeLight1.getColor());
      assertEquals((-694.0F), homeLight1.getGroundElevation(), 0.01F);
      assertEquals("h&9+\"", homeLight1.getDescription());
      assertEquals(0.0F, homeLight1.getNameXOffset(), 0.01F);
      assertEquals((-694.0F), homeLight1.getElevation(), 0.01F);
      assertEquals(0.0F, homeLight1.getAngle(), 0.01F);
      assertFalse(homeLight1.isNameVisible());
      assertEquals(0.36957806F, homeLight1.getDepth(), 0.01F);
      assertEquals(2, lightSourceArray0.length);
      assertNotSame(homeLight0, homeLight1);
      assertNotSame(homeLight1, homeLight0);
      assertNotNull(homeLight1);
      
      boolean boolean0 = homeLight1.isPointAt(114, (-815.0F), 114);
      assertFalse(homeLight0.equals((Object)homeLight1));
      assertFalse(homeLight1.equals((Object)homeLight0));
      assertEquals((byte)10, bigDecimal0.byteValue());
      assertEquals((short)10, bigDecimal0.shortValue());
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertEquals("h&9+\"", catalogLight0.getCreator());
      assertEquals("h&9+\"", catalogLight0.getDescription());
      assertEquals("h&9+\"", catalogLight0.getName());
      assertEquals((-694.0F), catalogLight0.getHeight(), 0.01F);
      assertEquals("h&9+\"", catalogLight0.getId());
      assertFalse(catalogLight0.isModifiable());
      assertNull(catalogLight0.getCreationDate());
      assertEquals((-694.0F), catalogLight0.getElevation(), 0.01F);
      assertNull(catalogLight0.getCurrency());
      assertFalse(catalogLight0.isBackFaceShown());
      assertNull(catalogLight0.getInformation());
      assertTrue(catalogLight0.isResizable());
      assertEquals(0.36957806F, catalogLight0.getDepth(), 0.01F);
      assertTrue(catalogLight0.isDeformable());
      assertNull(catalogLight0.getColor());
      assertTrue(catalogLight0.isProportional());
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertTrue(catalogLight0.isMovable());
      assertTrue(catalogLight0.isTexturable());
      assertFalse(catalogLight0.isDoorOrWindow());
      assertNull(catalogLight0.getGrade());
      assertEquals((-815.0F), catalogLight0.getWidth(), 0.01F);
      assertNull(homeLight0.getCurrency());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertTrue(homeLight0.isDeformable());
      assertTrue(homeLight0.isVisible());
      assertFalse(homeLight0.isNameVisible());
      assertEquals((-407.5F), homeLight0.getX(), 0.01F);
      assertFalse(homeLight0.isBackFaceShown());
      assertFalse(homeLight0.isModelMirrored());
      assertEquals(0.18478903F, homeLight0.getY(), 0.01F);
      assertTrue(homeLight0.isTexturable());
      assertNull(homeLight0.getShininess());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertTrue(homeLight0.isResizable());
      assertEquals((-694.0F), homeLight0.getGroundElevation(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals((-694.0F), homeLight0.getElevation(), 0.01F);
      assertEquals("h&9+\"", homeLight0.getName());
      assertEquals("h&9+\"", homeLight0.getDescription());
      assertEquals(0.36957806F, homeLight0.getDepth(), 0.01F);
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertTrue(homeLight0.isMovable());
      assertEquals("h&9+\"", homeLight0.getCatalogId());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertEquals((-815.0F), homeLight0.getWidth(), 0.01F);
      assertEquals((-694.0F), homeLight0.getHeight(), 0.01F);
      assertNull(homeLight0.getColor());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertNull(homeLight1.getShininess());
      assertEquals((-815.0F), homeLight1.getWidth(), 0.01F);
      assertNull(homeLight1.getStaircaseCutOutShape());
      assertTrue(homeLight1.isDeformable());
      assertTrue(homeLight1.isVisible());
      assertTrue(homeLight1.isResizable());
      assertNull(homeLight1.getCurrency());
      assertEquals(0.0F, homeLight1.getNameYOffset(), 0.01F);
      assertEquals("h&9+\"", homeLight1.getName());
      assertEquals("h&9+\"", homeLight1.getCatalogId());
      assertEquals(0.0F, homeLight1.getNameAngle(), 0.01F);
      assertTrue(homeLight1.isMovable());
      assertEquals(0.5F, homeLight1.getPower(), 0.01F);
      assertEquals((-407.5F), homeLight1.getX(), 0.01F);
      assertEquals((-694.0F), homeLight1.getHeight(), 0.01F);
      assertTrue(homeLight1.isTexturable());
      assertFalse(homeLight1.isBackFaceShown());
      assertFalse(homeLight1.isModelMirrored());
      assertEquals(0.18478903F, homeLight1.getY(), 0.01F);
      assertFalse(homeLight1.isDoorOrWindow());
      assertNull(homeLight1.getColor());
      assertEquals((-694.0F), homeLight1.getGroundElevation(), 0.01F);
      assertEquals("h&9+\"", homeLight1.getDescription());
      assertEquals(0.0F, homeLight1.getNameXOffset(), 0.01F);
      assertEquals((-694.0F), homeLight1.getElevation(), 0.01F);
      assertEquals(0.0F, homeLight1.getAngle(), 0.01F);
      assertFalse(homeLight1.isNameVisible());
      assertEquals(0.36957806F, homeLight1.getDepth(), 0.01F);
      assertEquals(2, lightSourceArray0.length);
      assertNotSame(homeLight0, homeLight1);
      assertNotSame(homeLight1, homeLight0);
      assertFalse(boolean0);
      
      homeLight1.setName("h&9+\"");
      assertFalse(homeLight0.equals((Object)homeLight1));
      assertFalse(homeLight1.equals((Object)homeLight0));
      assertEquals((byte)10, bigDecimal0.byteValue());
      assertEquals((short)10, bigDecimal0.shortValue());
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertEquals("h&9+\"", catalogLight0.getCreator());
      assertEquals("h&9+\"", catalogLight0.getDescription());
      assertEquals("h&9+\"", catalogLight0.getName());
      assertEquals((-694.0F), catalogLight0.getHeight(), 0.01F);
      assertEquals("h&9+\"", catalogLight0.getId());
      assertFalse(catalogLight0.isModifiable());
      assertNull(catalogLight0.getCreationDate());
      assertEquals((-694.0F), catalogLight0.getElevation(), 0.01F);
      assertNull(catalogLight0.getCurrency());
      assertFalse(catalogLight0.isBackFaceShown());
      assertNull(catalogLight0.getInformation());
      assertTrue(catalogLight0.isResizable());
      assertEquals(0.36957806F, catalogLight0.getDepth(), 0.01F);
      assertTrue(catalogLight0.isDeformable());
      assertNull(catalogLight0.getColor());
      assertTrue(catalogLight0.isProportional());
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertTrue(catalogLight0.isMovable());
      assertTrue(catalogLight0.isTexturable());
      assertFalse(catalogLight0.isDoorOrWindow());
      assertNull(catalogLight0.getGrade());
      assertEquals((-815.0F), catalogLight0.getWidth(), 0.01F);
      assertNull(homeLight0.getCurrency());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertTrue(homeLight0.isDeformable());
      assertTrue(homeLight0.isVisible());
      assertFalse(homeLight0.isNameVisible());
      assertEquals((-407.5F), homeLight0.getX(), 0.01F);
      assertFalse(homeLight0.isBackFaceShown());
      assertFalse(homeLight0.isModelMirrored());
      assertEquals(0.18478903F, homeLight0.getY(), 0.01F);
      assertTrue(homeLight0.isTexturable());
      assertNull(homeLight0.getShininess());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertTrue(homeLight0.isResizable());
      assertEquals((-694.0F), homeLight0.getGroundElevation(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals((-694.0F), homeLight0.getElevation(), 0.01F);
      assertEquals("h&9+\"", homeLight0.getName());
      assertEquals("h&9+\"", homeLight0.getDescription());
      assertEquals(0.36957806F, homeLight0.getDepth(), 0.01F);
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertTrue(homeLight0.isMovable());
      assertEquals("h&9+\"", homeLight0.getCatalogId());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertEquals((-815.0F), homeLight0.getWidth(), 0.01F);
      assertEquals((-694.0F), homeLight0.getHeight(), 0.01F);
      assertNull(homeLight0.getColor());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertNull(homeLight1.getShininess());
      assertEquals((-815.0F), homeLight1.getWidth(), 0.01F);
      assertNull(homeLight1.getStaircaseCutOutShape());
      assertTrue(homeLight1.isDeformable());
      assertTrue(homeLight1.isVisible());
      assertTrue(homeLight1.isResizable());
      assertNull(homeLight1.getCurrency());
      assertEquals(0.0F, homeLight1.getNameYOffset(), 0.01F);
      assertEquals("h&9+\"", homeLight1.getName());
      assertEquals("h&9+\"", homeLight1.getCatalogId());
      assertEquals(0.0F, homeLight1.getNameAngle(), 0.01F);
      assertTrue(homeLight1.isMovable());
      assertEquals(0.5F, homeLight1.getPower(), 0.01F);
      assertEquals((-407.5F), homeLight1.getX(), 0.01F);
      assertEquals((-694.0F), homeLight1.getHeight(), 0.01F);
      assertTrue(homeLight1.isTexturable());
      assertFalse(homeLight1.isBackFaceShown());
      assertFalse(homeLight1.isModelMirrored());
      assertEquals(0.18478903F, homeLight1.getY(), 0.01F);
      assertFalse(homeLight1.isDoorOrWindow());
      assertNull(homeLight1.getColor());
      assertEquals((-694.0F), homeLight1.getGroundElevation(), 0.01F);
      assertEquals("h&9+\"", homeLight1.getDescription());
      assertEquals(0.0F, homeLight1.getNameXOffset(), 0.01F);
      assertEquals((-694.0F), homeLight1.getElevation(), 0.01F);
      assertEquals(0.0F, homeLight1.getAngle(), 0.01F);
      assertFalse(homeLight1.isNameVisible());
      assertEquals(0.36957806F, homeLight1.getDepth(), 0.01F);
      assertEquals(2, lightSourceArray0.length);
      assertNotSame(homeLight0, homeLight1);
      assertNotSame(homeLight1, homeLight0);
      
      homeLight1.setModelMirrored(true);
      assertFalse(homeLight0.equals((Object)homeLight1));
      assertFalse(homeLight1.equals((Object)homeLight0));
      assertEquals((byte)10, bigDecimal0.byteValue());
      assertEquals((short)10, bigDecimal0.shortValue());
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertEquals("h&9+\"", catalogLight0.getCreator());
      assertEquals("h&9+\"", catalogLight0.getDescription());
      assertEquals("h&9+\"", catalogLight0.getName());
      assertEquals((-694.0F), catalogLight0.getHeight(), 0.01F);
      assertEquals("h&9+\"", catalogLight0.getId());
      assertFalse(catalogLight0.isModifiable());
      assertNull(catalogLight0.getCreationDate());
      assertEquals((-694.0F), catalogLight0.getElevation(), 0.01F);
      assertNull(catalogLight0.getCurrency());
      assertFalse(catalogLight0.isBackFaceShown());
      assertNull(catalogLight0.getInformation());
      assertTrue(catalogLight0.isResizable());
      assertEquals(0.36957806F, catalogLight0.getDepth(), 0.01F);
      assertTrue(catalogLight0.isDeformable());
      assertNull(catalogLight0.getColor());
      assertTrue(catalogLight0.isProportional());
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertTrue(catalogLight0.isMovable());
      assertTrue(catalogLight0.isTexturable());
      assertFalse(catalogLight0.isDoorOrWindow());
      assertNull(catalogLight0.getGrade());
      assertEquals((-815.0F), catalogLight0.getWidth(), 0.01F);
      assertNull(homeLight0.getCurrency());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertTrue(homeLight0.isDeformable());
      assertTrue(homeLight0.isVisible());
      assertFalse(homeLight0.isNameVisible());
      assertEquals((-407.5F), homeLight0.getX(), 0.01F);
      assertFalse(homeLight0.isBackFaceShown());
      assertFalse(homeLight0.isModelMirrored());
      assertEquals(0.18478903F, homeLight0.getY(), 0.01F);
      assertTrue(homeLight0.isTexturable());
      assertNull(homeLight0.getShininess());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertTrue(homeLight0.isResizable());
      assertEquals((-694.0F), homeLight0.getGroundElevation(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals((-694.0F), homeLight0.getElevation(), 0.01F);
      assertEquals("h&9+\"", homeLight0.getName());
      assertEquals("h&9+\"", homeLight0.getDescription());
      assertEquals(0.36957806F, homeLight0.getDepth(), 0.01F);
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertTrue(homeLight0.isMovable());
      assertEquals("h&9+\"", homeLight0.getCatalogId());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertEquals((-815.0F), homeLight0.getWidth(), 0.01F);
      assertEquals((-694.0F), homeLight0.getHeight(), 0.01F);
      assertNull(homeLight0.getColor());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertNull(homeLight1.getShininess());
      assertEquals((-815.0F), homeLight1.getWidth(), 0.01F);
      assertNull(homeLight1.getStaircaseCutOutShape());
      assertTrue(homeLight1.isDeformable());
      assertTrue(homeLight1.isVisible());
      assertTrue(homeLight1.isResizable());
      assertNull(homeLight1.getCurrency());
      assertEquals(0.0F, homeLight1.getNameYOffset(), 0.01F);
      assertEquals("h&9+\"", homeLight1.getName());
      assertEquals("h&9+\"", homeLight1.getCatalogId());
      assertEquals(0.0F, homeLight1.getNameAngle(), 0.01F);
      assertTrue(homeLight1.isMovable());
      assertEquals(0.5F, homeLight1.getPower(), 0.01F);
      assertEquals((-407.5F), homeLight1.getX(), 0.01F);
      assertEquals((-694.0F), homeLight1.getHeight(), 0.01F);
      assertTrue(homeLight1.isTexturable());
      assertFalse(homeLight1.isBackFaceShown());
      assertEquals(0.18478903F, homeLight1.getY(), 0.01F);
      assertFalse(homeLight1.isDoorOrWindow());
      assertNull(homeLight1.getColor());
      assertEquals((-694.0F), homeLight1.getGroundElevation(), 0.01F);
      assertEquals("h&9+\"", homeLight1.getDescription());
      assertTrue(homeLight1.isModelMirrored());
      assertEquals(0.0F, homeLight1.getNameXOffset(), 0.01F);
      assertEquals((-694.0F), homeLight1.getElevation(), 0.01F);
      assertEquals(0.0F, homeLight1.getAngle(), 0.01F);
      assertFalse(homeLight1.isNameVisible());
      assertEquals(0.36957806F, homeLight1.getDepth(), 0.01F);
      assertEquals(2, lightSourceArray0.length);
      assertNotSame(homeLight0, homeLight1);
      assertNotSame(homeLight1, homeLight0);
      
      boolean boolean1 = homeLight1.isNameCenterPointAt((-1231.513F), (-694.0F), 1191.5F);
      assertFalse(homeLight0.equals((Object)homeLight1));
      assertFalse(homeLight1.equals((Object)homeLight0));
      assertFalse(boolean1 == boolean0);
      assertEquals((byte)10, bigDecimal0.byteValue());
      assertEquals((short)10, bigDecimal0.shortValue());
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertEquals("h&9+\"", catalogLight0.getCreator());
      assertEquals("h&9+\"", catalogLight0.getDescription());
      assertEquals("h&9+\"", catalogLight0.getName());
      assertEquals((-694.0F), catalogLight0.getHeight(), 0.01F);
      assertEquals("h&9+\"", catalogLight0.getId());
      assertFalse(catalogLight0.isModifiable());
      assertNull(catalogLight0.getCreationDate());
      assertEquals((-694.0F), catalogLight0.getElevation(), 0.01F);
      assertNull(catalogLight0.getCurrency());
      assertFalse(catalogLight0.isBackFaceShown());
      assertNull(catalogLight0.getInformation());
      assertTrue(catalogLight0.isResizable());
      assertEquals(0.36957806F, catalogLight0.getDepth(), 0.01F);
      assertTrue(catalogLight0.isDeformable());
      assertNull(catalogLight0.getColor());
      assertTrue(catalogLight0.isProportional());
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertTrue(catalogLight0.isMovable());
      assertTrue(catalogLight0.isTexturable());
      assertFalse(catalogLight0.isDoorOrWindow());
      assertNull(catalogLight0.getGrade());
      assertEquals((-815.0F), catalogLight0.getWidth(), 0.01F);
      assertNull(homeLight0.getCurrency());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertTrue(homeLight0.isDeformable());
      assertTrue(homeLight0.isVisible());
      assertFalse(homeLight0.isNameVisible());
      assertEquals((-407.5F), homeLight0.getX(), 0.01F);
      assertFalse(homeLight0.isBackFaceShown());
      assertFalse(homeLight0.isModelMirrored());
      assertEquals(0.18478903F, homeLight0.getY(), 0.01F);
      assertTrue(homeLight0.isTexturable());
      assertNull(homeLight0.getShininess());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertTrue(homeLight0.isResizable());
      assertEquals((-694.0F), homeLight0.getGroundElevation(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals((-694.0F), homeLight0.getElevation(), 0.01F);
      assertEquals("h&9+\"", homeLight0.getName());
      assertEquals("h&9+\"", homeLight0.getDescription());
      assertEquals(0.36957806F, homeLight0.getDepth(), 0.01F);
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertTrue(homeLight0.isMovable());
      assertEquals("h&9+\"", homeLight0.getCatalogId());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertEquals((-815.0F), homeLight0.getWidth(), 0.01F);
      assertEquals((-694.0F), homeLight0.getHeight(), 0.01F);
      assertNull(homeLight0.getColor());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertNull(homeLight1.getShininess());
      assertEquals((-815.0F), homeLight1.getWidth(), 0.01F);
      assertNull(homeLight1.getStaircaseCutOutShape());
      assertTrue(homeLight1.isDeformable());
      assertTrue(homeLight1.isVisible());
      assertTrue(homeLight1.isResizable());
      assertNull(homeLight1.getCurrency());
      assertEquals(0.0F, homeLight1.getNameYOffset(), 0.01F);
      assertEquals("h&9+\"", homeLight1.getName());
      assertEquals("h&9+\"", homeLight1.getCatalogId());
      assertEquals(0.0F, homeLight1.getNameAngle(), 0.01F);
      assertTrue(homeLight1.isMovable());
      assertEquals(0.5F, homeLight1.getPower(), 0.01F);
      assertEquals((-407.5F), homeLight1.getX(), 0.01F);
      assertEquals((-694.0F), homeLight1.getHeight(), 0.01F);
      assertTrue(homeLight1.isTexturable());
      assertFalse(homeLight1.isBackFaceShown());
      assertEquals(0.18478903F, homeLight1.getY(), 0.01F);
      assertFalse(homeLight1.isDoorOrWindow());
      assertNull(homeLight1.getColor());
      assertEquals((-694.0F), homeLight1.getGroundElevation(), 0.01F);
      assertEquals("h&9+\"", homeLight1.getDescription());
      assertTrue(homeLight1.isModelMirrored());
      assertEquals(0.0F, homeLight1.getNameXOffset(), 0.01F);
      assertEquals((-694.0F), homeLight1.getElevation(), 0.01F);
      assertEquals(0.0F, homeLight1.getAngle(), 0.01F);
      assertFalse(homeLight1.isNameVisible());
      assertEquals(0.36957806F, homeLight1.getDepth(), 0.01F);
      assertEquals(2, lightSourceArray0.length);
      assertNotSame(homeLight0, homeLight1);
      assertNotSame(homeLight1, homeLight0);
      assertTrue(boolean1);
      
      homeLight1.setY(114);
      assertFalse(homeLight0.equals((Object)homeLight1));
      assertFalse(homeLight1.equals((Object)homeLight0));
      assertEquals((byte)10, bigDecimal0.byteValue());
      assertEquals((short)10, bigDecimal0.shortValue());
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertEquals("h&9+\"", catalogLight0.getCreator());
      assertEquals("h&9+\"", catalogLight0.getDescription());
      assertEquals("h&9+\"", catalogLight0.getName());
      assertEquals((-694.0F), catalogLight0.getHeight(), 0.01F);
      assertEquals("h&9+\"", catalogLight0.getId());
      assertFalse(catalogLight0.isModifiable());
      assertNull(catalogLight0.getCreationDate());
      assertEquals((-694.0F), catalogLight0.getElevation(), 0.01F);
      assertNull(catalogLight0.getCurrency());
      assertFalse(catalogLight0.isBackFaceShown());
      assertNull(catalogLight0.getInformation());
      assertTrue(catalogLight0.isResizable());
      assertEquals(0.36957806F, catalogLight0.getDepth(), 0.01F);
      assertTrue(catalogLight0.isDeformable());
      assertNull(catalogLight0.getColor());
      assertTrue(catalogLight0.isProportional());
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertTrue(catalogLight0.isMovable());
      assertTrue(catalogLight0.isTexturable());
      assertFalse(catalogLight0.isDoorOrWindow());
      assertNull(catalogLight0.getGrade());
      assertEquals((-815.0F), catalogLight0.getWidth(), 0.01F);
      assertNull(homeLight0.getCurrency());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertTrue(homeLight0.isDeformable());
      assertTrue(homeLight0.isVisible());
      assertFalse(homeLight0.isNameVisible());
      assertEquals((-407.5F), homeLight0.getX(), 0.01F);
      assertFalse(homeLight0.isBackFaceShown());
      assertFalse(homeLight0.isModelMirrored());
      assertEquals(0.18478903F, homeLight0.getY(), 0.01F);
      assertTrue(homeLight0.isTexturable());
      assertNull(homeLight0.getShininess());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertTrue(homeLight0.isResizable());
      assertEquals((-694.0F), homeLight0.getGroundElevation(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals((-694.0F), homeLight0.getElevation(), 0.01F);
      assertEquals("h&9+\"", homeLight0.getName());
      assertEquals("h&9+\"", homeLight0.getDescription());
      assertEquals(0.36957806F, homeLight0.getDepth(), 0.01F);
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertTrue(homeLight0.isMovable());
      assertEquals("h&9+\"", homeLight0.getCatalogId());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertEquals((-815.0F), homeLight0.getWidth(), 0.01F);
      assertEquals((-694.0F), homeLight0.getHeight(), 0.01F);
      assertNull(homeLight0.getColor());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertNull(homeLight1.getShininess());
      assertEquals((-815.0F), homeLight1.getWidth(), 0.01F);
      assertNull(homeLight1.getStaircaseCutOutShape());
      assertTrue(homeLight1.isDeformable());
      assertTrue(homeLight1.isVisible());
      assertTrue(homeLight1.isResizable());
      assertEquals(114.0F, homeLight1.getY(), 0.01F);
      assertNull(homeLight1.getCurrency());
      assertEquals(0.0F, homeLight1.getNameYOffset(), 0.01F);
      assertEquals("h&9+\"", homeLight1.getName());
      assertEquals("h&9+\"", homeLight1.getCatalogId());
      assertEquals(0.0F, homeLight1.getNameAngle(), 0.01F);
      assertTrue(homeLight1.isMovable());
      assertEquals(0.5F, homeLight1.getPower(), 0.01F);
      assertEquals((-407.5F), homeLight1.getX(), 0.01F);
      assertEquals((-694.0F), homeLight1.getHeight(), 0.01F);
      assertTrue(homeLight1.isTexturable());
      assertFalse(homeLight1.isBackFaceShown());
      assertFalse(homeLight1.isDoorOrWindow());
      assertNull(homeLight1.getColor());
      assertEquals((-694.0F), homeLight1.getGroundElevation(), 0.01F);
      assertEquals("h&9+\"", homeLight1.getDescription());
      assertTrue(homeLight1.isModelMirrored());
      assertEquals(0.0F, homeLight1.getNameXOffset(), 0.01F);
      assertEquals((-694.0F), homeLight1.getElevation(), 0.01F);
      assertEquals(0.0F, homeLight1.getAngle(), 0.01F);
      assertFalse(homeLight1.isNameVisible());
      assertEquals(0.36957806F, homeLight1.getDepth(), 0.01F);
      assertEquals(2, lightSourceArray0.length);
      assertNotSame(homeLight0, homeLight1);
      assertNotSame(homeLight1, homeLight0);
      
      HomeLight homeLight2 = new HomeLight(homeLight0);
      assertFalse(homeLight0.equals((Object)homeLight1));
      assertFalse(homeLight2.equals((Object)homeLight0));
      assertFalse(homeLight2.equals((Object)homeLight1));
      assertEquals((byte)10, bigDecimal0.byteValue());
      assertEquals((short)10, bigDecimal0.shortValue());
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertEquals("h&9+\"", catalogLight0.getCreator());
      assertEquals("h&9+\"", catalogLight0.getDescription());
      assertEquals("h&9+\"", catalogLight0.getName());
      assertEquals((-694.0F), catalogLight0.getHeight(), 0.01F);
      assertEquals("h&9+\"", catalogLight0.getId());
      assertFalse(catalogLight0.isModifiable());
      assertNull(catalogLight0.getCreationDate());
      assertEquals((-694.0F), catalogLight0.getElevation(), 0.01F);
      assertNull(catalogLight0.getCurrency());
      assertFalse(catalogLight0.isBackFaceShown());
      assertNull(catalogLight0.getInformation());
      assertTrue(catalogLight0.isResizable());
      assertEquals(0.36957806F, catalogLight0.getDepth(), 0.01F);
      assertTrue(catalogLight0.isDeformable());
      assertNull(catalogLight0.getColor());
      assertTrue(catalogLight0.isProportional());
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertTrue(catalogLight0.isMovable());
      assertTrue(catalogLight0.isTexturable());
      assertFalse(catalogLight0.isDoorOrWindow());
      assertNull(catalogLight0.getGrade());
      assertEquals((-815.0F), catalogLight0.getWidth(), 0.01F);
      assertNull(homeLight0.getCurrency());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertTrue(homeLight0.isDeformable());
      assertTrue(homeLight0.isVisible());
      assertFalse(homeLight0.isNameVisible());
      assertEquals((-407.5F), homeLight0.getX(), 0.01F);
      assertFalse(homeLight0.isBackFaceShown());
      assertFalse(homeLight0.isModelMirrored());
      assertEquals(0.18478903F, homeLight0.getY(), 0.01F);
      assertTrue(homeLight0.isTexturable());
      assertNull(homeLight0.getShininess());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertTrue(homeLight0.isResizable());
      assertEquals((-694.0F), homeLight0.getGroundElevation(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals((-694.0F), homeLight0.getElevation(), 0.01F);
      assertEquals("h&9+\"", homeLight0.getName());
      assertEquals("h&9+\"", homeLight0.getDescription());
      assertEquals(0.36957806F, homeLight0.getDepth(), 0.01F);
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertTrue(homeLight0.isMovable());
      assertEquals("h&9+\"", homeLight0.getCatalogId());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertEquals((-815.0F), homeLight0.getWidth(), 0.01F);
      assertEquals((-694.0F), homeLight0.getHeight(), 0.01F);
      assertNull(homeLight0.getColor());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals((-815.0F), homeLight2.getWidth(), 0.01F);
      assertTrue(homeLight2.isMovable());
      assertTrue(homeLight2.isResizable());
      assertNull(homeLight2.getShininess());
      assertEquals(0.5F, homeLight2.getPower(), 0.01F);
      assertEquals("h&9+\"", homeLight2.getCatalogId());
      assertNull(homeLight2.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight2.getNameAngle(), 0.01F);
      assertEquals(0.0F, homeLight2.getNameXOffset(), 0.01F);
      assertEquals("h&9+\"", homeLight2.getDescription());
      assertEquals(0.36957806F, homeLight2.getDepth(), 0.01F);
      assertTrue(homeLight2.isTexturable());
      assertEquals((-694.0F), homeLight2.getElevation(), 0.01F);
      assertEquals(0.0F, homeLight2.getAngle(), 0.01F);
      assertFalse(homeLight2.isNameVisible());
      assertFalse(homeLight2.isBackFaceShown());
      assertEquals(0.18478903F, homeLight2.getY(), 0.01F);
      assertFalse(homeLight2.isModelMirrored());
      assertFalse(homeLight2.isDoorOrWindow());
      assertEquals((-694.0F), homeLight2.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight2.getNameYOffset(), 0.01F);
      assertTrue(homeLight2.isDeformable());
      assertNull(homeLight2.getColor());
      assertTrue(homeLight2.isVisible());
      assertEquals((-407.5F), homeLight2.getX(), 0.01F);
      assertEquals("h&9+\"", homeLight2.getName());
      assertNull(homeLight2.getCurrency());
      assertEquals((-694.0F), homeLight2.getHeight(), 0.01F);
      assertEquals(2, lightSourceArray0.length);
      assertNotNull(homeLight2);
      
      float float0 = homeLight0.getGroundElevation();
      assertFalse(homeLight0.equals((Object)homeLight1));
      assertFalse(homeLight0.equals((Object)homeLight2));
      assertEquals((byte)10, bigDecimal0.byteValue());
      assertEquals((short)10, bigDecimal0.shortValue());
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertEquals("h&9+\"", catalogLight0.getCreator());
      assertEquals("h&9+\"", catalogLight0.getDescription());
      assertEquals("h&9+\"", catalogLight0.getName());
      assertEquals((-694.0F), catalogLight0.getHeight(), 0.01F);
      assertEquals("h&9+\"", catalogLight0.getId());
      assertFalse(catalogLight0.isModifiable());
      assertNull(catalogLight0.getCreationDate());
      assertEquals((-694.0F), catalogLight0.getElevation(), 0.01F);
      assertNull(catalogLight0.getCurrency());
      assertFalse(catalogLight0.isBackFaceShown());
      assertNull(catalogLight0.getInformation());
      assertTrue(catalogLight0.isResizable());
      assertEquals(0.36957806F, catalogLight0.getDepth(), 0.01F);
      assertTrue(catalogLight0.isDeformable());
      assertNull(catalogLight0.getColor());
      assertTrue(catalogLight0.isProportional());
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertTrue(catalogLight0.isMovable());
      assertTrue(catalogLight0.isTexturable());
      assertFalse(catalogLight0.isDoorOrWindow());
      assertNull(catalogLight0.getGrade());
      assertEquals((-815.0F), catalogLight0.getWidth(), 0.01F);
      assertNull(homeLight0.getCurrency());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertTrue(homeLight0.isDeformable());
      assertTrue(homeLight0.isVisible());
      assertFalse(homeLight0.isNameVisible());
      assertEquals((-407.5F), homeLight0.getX(), 0.01F);
      assertFalse(homeLight0.isBackFaceShown());
      assertFalse(homeLight0.isModelMirrored());
      assertEquals(0.18478903F, homeLight0.getY(), 0.01F);
      assertTrue(homeLight0.isTexturable());
      assertNull(homeLight0.getShininess());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertTrue(homeLight0.isResizable());
      assertEquals((-694.0F), homeLight0.getGroundElevation(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals((-694.0F), homeLight0.getElevation(), 0.01F);
      assertEquals("h&9+\"", homeLight0.getName());
      assertEquals("h&9+\"", homeLight0.getDescription());
      assertEquals(0.36957806F, homeLight0.getDepth(), 0.01F);
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertTrue(homeLight0.isMovable());
      assertEquals("h&9+\"", homeLight0.getCatalogId());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertEquals((-815.0F), homeLight0.getWidth(), 0.01F);
      assertEquals((-694.0F), homeLight0.getHeight(), 0.01F);
      assertNull(homeLight0.getColor());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals(2, lightSourceArray0.length);
      assertNotSame(homeLight0, homeLight1);
      assertNotSame(homeLight0, homeLight2);
      assertEquals((-694.0F), float0, 0.01F);
      
      homeLight2.setDepth((-127.62969F));
      assertFalse(homeLight0.equals((Object)homeLight1));
      assertFalse(homeLight0.equals((Object)homeLight2));
      assertFalse(homeLight2.equals((Object)homeLight0));
      assertFalse(homeLight2.equals((Object)homeLight1));
      assertEquals((byte)10, bigDecimal0.byteValue());
      assertEquals((short)10, bigDecimal0.shortValue());
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertEquals("h&9+\"", catalogLight0.getCreator());
      assertEquals("h&9+\"", catalogLight0.getDescription());
      assertEquals("h&9+\"", catalogLight0.getName());
      assertEquals((-694.0F), catalogLight0.getHeight(), 0.01F);
      assertEquals("h&9+\"", catalogLight0.getId());
      assertFalse(catalogLight0.isModifiable());
      assertNull(catalogLight0.getCreationDate());
      assertEquals((-694.0F), catalogLight0.getElevation(), 0.01F);
      assertNull(catalogLight0.getCurrency());
      assertFalse(catalogLight0.isBackFaceShown());
      assertNull(catalogLight0.getInformation());
      assertTrue(catalogLight0.isResizable());
      assertEquals(0.36957806F, catalogLight0.getDepth(), 0.01F);
      assertTrue(catalogLight0.isDeformable());
      assertNull(catalogLight0.getColor());
      assertTrue(catalogLight0.isProportional());
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertTrue(catalogLight0.isMovable());
      assertTrue(catalogLight0.isTexturable());
      assertFalse(catalogLight0.isDoorOrWindow());
      assertNull(catalogLight0.getGrade());
      assertEquals((-815.0F), catalogLight0.getWidth(), 0.01F);
      assertNull(homeLight0.getCurrency());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertTrue(homeLight0.isDeformable());
      assertTrue(homeLight0.isVisible());
      assertFalse(homeLight0.isNameVisible());
      assertEquals((-407.5F), homeLight0.getX(), 0.01F);
      assertFalse(homeLight0.isBackFaceShown());
      assertFalse(homeLight0.isModelMirrored());
      assertEquals(0.18478903F, homeLight0.getY(), 0.01F);
      assertTrue(homeLight0.isTexturable());
      assertNull(homeLight0.getShininess());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertTrue(homeLight0.isResizable());
      assertEquals((-694.0F), homeLight0.getGroundElevation(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals((-694.0F), homeLight0.getElevation(), 0.01F);
      assertEquals("h&9+\"", homeLight0.getName());
      assertEquals("h&9+\"", homeLight0.getDescription());
      assertEquals(0.36957806F, homeLight0.getDepth(), 0.01F);
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertTrue(homeLight0.isMovable());
      assertEquals("h&9+\"", homeLight0.getCatalogId());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertEquals((-815.0F), homeLight0.getWidth(), 0.01F);
      assertEquals((-694.0F), homeLight0.getHeight(), 0.01F);
      assertNull(homeLight0.getColor());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals((-815.0F), homeLight2.getWidth(), 0.01F);
      assertTrue(homeLight2.isMovable());
      assertTrue(homeLight2.isResizable());
      assertNull(homeLight2.getShininess());
      assertEquals(0.5F, homeLight2.getPower(), 0.01F);
      assertEquals("h&9+\"", homeLight2.getCatalogId());
      assertNull(homeLight2.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight2.getNameAngle(), 0.01F);
      assertEquals(0.0F, homeLight2.getNameXOffset(), 0.01F);
      assertEquals("h&9+\"", homeLight2.getDescription());
      assertTrue(homeLight2.isTexturable());
      assertEquals((-694.0F), homeLight2.getElevation(), 0.01F);
      assertEquals(0.0F, homeLight2.getAngle(), 0.01F);
      assertFalse(homeLight2.isNameVisible());
      assertFalse(homeLight2.isBackFaceShown());
      assertEquals(0.18478903F, homeLight2.getY(), 0.01F);
      assertFalse(homeLight2.isModelMirrored());
      assertFalse(homeLight2.isDoorOrWindow());
      assertEquals((-127.62969F), homeLight2.getDepth(), 0.01F);
      assertEquals((-694.0F), homeLight2.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight2.getNameYOffset(), 0.01F);
      assertTrue(homeLight2.isDeformable());
      assertNull(homeLight2.getColor());
      assertTrue(homeLight2.isVisible());
      assertEquals((-407.5F), homeLight2.getX(), 0.01F);
      assertEquals("h&9+\"", homeLight2.getName());
      assertNull(homeLight2.getCurrency());
      assertEquals((-694.0F), homeLight2.getHeight(), 0.01F);
      assertEquals(2, lightSourceArray0.length);
      assertNotSame(homeLight0, homeLight1);
      assertNotSame(homeLight0, homeLight2);
      assertNotSame(homeLight2, homeLight0);
      assertNotSame(homeLight2, homeLight1);
      
      boolean boolean2 = homeLight0.isPointAt((-407.50055F), 1.0F, (-694.0F));
      assertTrue(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      assertFalse(homeLight0.equals((Object)homeLight1));
      assertFalse(homeLight0.equals((Object)homeLight2));
      assertEquals((byte)10, bigDecimal0.byteValue());
      assertEquals((short)10, bigDecimal0.shortValue());
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertEquals("h&9+\"", catalogLight0.getCreator());
      assertEquals("h&9+\"", catalogLight0.getDescription());
      assertEquals("h&9+\"", catalogLight0.getName());
      assertEquals((-694.0F), catalogLight0.getHeight(), 0.01F);
      assertEquals("h&9+\"", catalogLight0.getId());
      assertFalse(catalogLight0.isModifiable());
      assertNull(catalogLight0.getCreationDate());
      assertEquals((-694.0F), catalogLight0.getElevation(), 0.01F);
      assertNull(catalogLight0.getCurrency());
      assertFalse(catalogLight0.isBackFaceShown());
      assertNull(catalogLight0.getInformation());
      assertTrue(catalogLight0.isResizable());
      assertEquals(0.36957806F, catalogLight0.getDepth(), 0.01F);
      assertTrue(catalogLight0.isDeformable());
      assertNull(catalogLight0.getColor());
      assertTrue(catalogLight0.isProportional());
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertTrue(catalogLight0.isMovable());
      assertTrue(catalogLight0.isTexturable());
      assertFalse(catalogLight0.isDoorOrWindow());
      assertNull(catalogLight0.getGrade());
      assertEquals((-815.0F), catalogLight0.getWidth(), 0.01F);
      assertNull(homeLight0.getCurrency());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertTrue(homeLight0.isDeformable());
      assertTrue(homeLight0.isVisible());
      assertFalse(homeLight0.isNameVisible());
      assertEquals((-407.5F), homeLight0.getX(), 0.01F);
      assertFalse(homeLight0.isBackFaceShown());
      assertFalse(homeLight0.isModelMirrored());
      assertEquals(0.18478903F, homeLight0.getY(), 0.01F);
      assertTrue(homeLight0.isTexturable());
      assertNull(homeLight0.getShininess());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertTrue(homeLight0.isResizable());
      assertEquals((-694.0F), homeLight0.getGroundElevation(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals((-694.0F), homeLight0.getElevation(), 0.01F);
      assertEquals("h&9+\"", homeLight0.getName());
      assertEquals("h&9+\"", homeLight0.getDescription());
      assertEquals(0.36957806F, homeLight0.getDepth(), 0.01F);
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertTrue(homeLight0.isMovable());
      assertEquals("h&9+\"", homeLight0.getCatalogId());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertEquals((-815.0F), homeLight0.getWidth(), 0.01F);
      assertEquals((-694.0F), homeLight0.getHeight(), 0.01F);
      assertNull(homeLight0.getColor());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals(2, lightSourceArray0.length);
      assertNotSame(homeLight0, homeLight1);
      assertNotSame(homeLight0, homeLight2);
      assertFalse(boolean2);
      
      float float1 = homeLight1.getWidth();
      assertNotEquals(float1, float0, 0.01F);
      assertFalse(homeLight0.equals((Object)homeLight1));
      assertFalse(homeLight0.equals((Object)homeLight2));
      assertFalse(homeLight1.equals((Object)homeLight2));
      assertFalse(homeLight1.equals((Object)homeLight0));
      assertEquals((byte)10, bigDecimal0.byteValue());
      assertEquals((short)10, bigDecimal0.shortValue());
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertEquals("h&9+\"", catalogLight0.getCreator());
      assertEquals("h&9+\"", catalogLight0.getDescription());
      assertEquals("h&9+\"", catalogLight0.getName());
      assertEquals((-694.0F), catalogLight0.getHeight(), 0.01F);
      assertEquals("h&9+\"", catalogLight0.getId());
      assertFalse(catalogLight0.isModifiable());
      assertNull(catalogLight0.getCreationDate());
      assertEquals((-694.0F), catalogLight0.getElevation(), 0.01F);
      assertNull(catalogLight0.getCurrency());
      assertFalse(catalogLight0.isBackFaceShown());
      assertNull(catalogLight0.getInformation());
      assertTrue(catalogLight0.isResizable());
      assertEquals(0.36957806F, catalogLight0.getDepth(), 0.01F);
      assertTrue(catalogLight0.isDeformable());
      assertNull(catalogLight0.getColor());
      assertTrue(catalogLight0.isProportional());
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertTrue(catalogLight0.isMovable());
      assertTrue(catalogLight0.isTexturable());
      assertFalse(catalogLight0.isDoorOrWindow());
      assertNull(catalogLight0.getGrade());
      assertEquals((-815.0F), catalogLight0.getWidth(), 0.01F);
      assertNull(homeLight0.getCurrency());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertTrue(homeLight0.isDeformable());
      assertTrue(homeLight0.isVisible());
      assertFalse(homeLight0.isNameVisible());
      assertEquals((-407.5F), homeLight0.getX(), 0.01F);
      assertFalse(homeLight0.isBackFaceShown());
      assertFalse(homeLight0.isModelMirrored());
      assertEquals(0.18478903F, homeLight0.getY(), 0.01F);
      assertTrue(homeLight0.isTexturable());
      assertNull(homeLight0.getShininess());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertTrue(homeLight0.isResizable());
      assertEquals((-694.0F), homeLight0.getGroundElevation(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals((-694.0F), homeLight0.getElevation(), 0.01F);
      assertEquals("h&9+\"", homeLight0.getName());
      assertEquals("h&9+\"", homeLight0.getDescription());
      assertEquals(0.36957806F, homeLight0.getDepth(), 0.01F);
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertTrue(homeLight0.isMovable());
      assertEquals("h&9+\"", homeLight0.getCatalogId());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertEquals((-815.0F), homeLight0.getWidth(), 0.01F);
      assertEquals((-694.0F), homeLight0.getHeight(), 0.01F);
      assertNull(homeLight0.getColor());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertNull(homeLight1.getShininess());
      assertEquals((-815.0F), homeLight1.getWidth(), 0.01F);
      assertNull(homeLight1.getStaircaseCutOutShape());
      assertTrue(homeLight1.isDeformable());
      assertTrue(homeLight1.isVisible());
      assertTrue(homeLight1.isResizable());
      assertEquals(114.0F, homeLight1.getY(), 0.01F);
      assertNull(homeLight1.getCurrency());
      assertEquals(0.0F, homeLight1.getNameYOffset(), 0.01F);
      assertEquals("h&9+\"", homeLight1.getName());
      assertEquals("h&9+\"", homeLight1.getCatalogId());
      assertEquals(0.0F, homeLight1.getNameAngle(), 0.01F);
      assertTrue(homeLight1.isMovable());
      assertEquals(0.5F, homeLight1.getPower(), 0.01F);
      assertEquals((-407.5F), homeLight1.getX(), 0.01F);
      assertEquals((-694.0F), homeLight1.getHeight(), 0.01F);
      assertTrue(homeLight1.isTexturable());
      assertFalse(homeLight1.isBackFaceShown());
      assertFalse(homeLight1.isDoorOrWindow());
      assertNull(homeLight1.getColor());
      assertEquals((-694.0F), homeLight1.getGroundElevation(), 0.01F);
      assertEquals("h&9+\"", homeLight1.getDescription());
      assertTrue(homeLight1.isModelMirrored());
      assertEquals(0.0F, homeLight1.getNameXOffset(), 0.01F);
      assertEquals((-694.0F), homeLight1.getElevation(), 0.01F);
      assertEquals(0.0F, homeLight1.getAngle(), 0.01F);
      assertFalse(homeLight1.isNameVisible());
      assertEquals(0.36957806F, homeLight1.getDepth(), 0.01F);
      assertEquals(2, lightSourceArray0.length);
      assertNotSame(homeLight0, homeLight1);
      assertNotSame(homeLight0, homeLight2);
      assertNotSame(homeLight1, homeLight2);
      assertNotSame(homeLight1, homeLight0);
      assertEquals((-815.0F), float1, 0.01F);
  }

  @Test(timeout = 4000)
  public void test230()  throws Throwable  {
      LightSource[] lightSourceArray0 = new LightSource[2];
      LightSource lightSource0 = new LightSource((-815.0011F), 0.0F, 0.0F, (-1541));
      assertEquals(0.0F, lightSource0.getY(), 0.01F);
      assertNull(lightSource0.getDiameter());
      assertEquals(0.0F, lightSource0.getZ(), 0.01F);
      assertEquals((-1541), lightSource0.getColor());
      assertEquals((-815.0011F), lightSource0.getX(), 0.01F);
      assertNotNull(lightSource0);
      
      lightSourceArray0[0] = lightSource0;
      LightSource lightSource1 = new LightSource((-1541), (-1541), (-727.8896F), 8192);
      assertFalse(lightSource1.equals((Object)lightSource0));
      assertEquals((-727.8896F), lightSource1.getZ(), 0.01F);
      assertEquals(8192, lightSource1.getColor());
      assertNull(lightSource1.getDiameter());
      assertEquals((-1541.0F), lightSource1.getY(), 0.01F);
      assertEquals((-1541.0F), lightSource1.getX(), 0.01F);
      assertNotNull(lightSource1);
      
      BigDecimal bigDecimal0 = BigDecimal.ONE;
      assertEquals((byte)1, bigDecimal0.byteValue());
      assertEquals((short)1, bigDecimal0.shortValue());
      assertNotNull(bigDecimal0);
      
      CatalogLight catalogLight0 = new CatalogLight("", "PRICE_VALUE_ADDED_TAX_INCLUDED", "PRICE_VALUE_ADDED_TAX_INCLUDED", (Content) null, (Content) null, 0.3926991F, (-1541), 233.10785F, (-727.8896F), true, lightSourceArray0, (float[][]) null, "{L", true, bigDecimal0, bigDecimal0);
      assertEquals((byte)1, bigDecimal0.byteValue());
      assertEquals((short)1, bigDecimal0.shortValue());
      assertEquals(233.10785F, catalogLight0.getHeight(), 0.01F);
      assertEquals("", catalogLight0.getId());
      assertNull(catalogLight0.getColor());
      assertFalse(catalogLight0.isModifiable());
      assertEquals((-727.8896F), catalogLight0.getElevation(), 0.01F);
      assertTrue(catalogLight0.isProportional());
      assertFalse(catalogLight0.isDoorOrWindow());
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertNull(catalogLight0.getGrade());
      assertEquals("{L", catalogLight0.getCreator());
      assertTrue(catalogLight0.isTexturable());
      assertNull(catalogLight0.getInformation());
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertTrue(catalogLight0.isResizable());
      assertTrue(catalogLight0.isMovable());
      assertFalse(catalogLight0.isBackFaceShown());
      assertEquals("PRICE_VALUE_ADDED_TAX_INCLUDED", catalogLight0.getName());
      assertEquals((-1541.0F), catalogLight0.getDepth(), 0.01F);
      assertTrue(catalogLight0.isDeformable());
      assertNull(catalogLight0.getCurrency());
      assertNull(catalogLight0.getCreationDate());
      assertEquals("PRICE_VALUE_ADDED_TAX_INCLUDED", catalogLight0.getDescription());
      assertEquals(0.3926991F, catalogLight0.getWidth(), 0.01F);
      assertEquals(2, lightSourceArray0.length);
      assertNotNull(catalogLight0);
      
      HomeLight homeLight0 = new HomeLight(catalogLight0);
      assertEquals((byte)1, bigDecimal0.byteValue());
      assertEquals((short)1, bigDecimal0.shortValue());
      assertEquals(233.10785F, catalogLight0.getHeight(), 0.01F);
      assertEquals("", catalogLight0.getId());
      assertNull(catalogLight0.getColor());
      assertFalse(catalogLight0.isModifiable());
      assertEquals((-727.8896F), catalogLight0.getElevation(), 0.01F);
      assertTrue(catalogLight0.isProportional());
      assertFalse(catalogLight0.isDoorOrWindow());
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertNull(catalogLight0.getGrade());
      assertEquals("{L", catalogLight0.getCreator());
      assertTrue(catalogLight0.isTexturable());
      assertNull(catalogLight0.getInformation());
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertTrue(catalogLight0.isResizable());
      assertTrue(catalogLight0.isMovable());
      assertFalse(catalogLight0.isBackFaceShown());
      assertEquals("PRICE_VALUE_ADDED_TAX_INCLUDED", catalogLight0.getName());
      assertEquals((-1541.0F), catalogLight0.getDepth(), 0.01F);
      assertTrue(catalogLight0.isDeformable());
      assertNull(catalogLight0.getCurrency());
      assertNull(catalogLight0.getCreationDate());
      assertEquals("PRICE_VALUE_ADDED_TAX_INCLUDED", catalogLight0.getDescription());
      assertEquals(0.3926991F, catalogLight0.getWidth(), 0.01F);
      assertEquals((-1541.0F), homeLight0.getDepth(), 0.01F);
      assertEquals((-727.8896F), homeLight0.getElevation(), 0.01F);
      assertTrue(homeLight0.isMovable());
      assertNull(homeLight0.getCurrency());
      assertFalse(homeLight0.isNameVisible());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals("", homeLight0.getCatalogId());
      assertEquals((-770.5F), homeLight0.getY(), 0.01F);
      assertEquals("PRICE_VALUE_ADDED_TAX_INCLUDED", homeLight0.getDescription());
      assertFalse(homeLight0.isBackFaceShown());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertFalse(homeLight0.isModelMirrored());
      assertNull(homeLight0.getColor());
      assertEquals(0.19634955F, homeLight0.getX(), 0.01F);
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertEquals(0.3926991F, homeLight0.getWidth(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      assertTrue(homeLight0.isTexturable());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals("PRICE_VALUE_ADDED_TAX_INCLUDED", homeLight0.getName());
      assertEquals(233.10785F, homeLight0.getHeight(), 0.01F);
      assertTrue(homeLight0.isVisible());
      assertEquals((-727.8896F), homeLight0.getGroundElevation(), 0.01F);
      assertNull(homeLight0.getShininess());
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertTrue(homeLight0.isResizable());
      assertTrue(homeLight0.isDeformable());
      assertEquals(2, lightSourceArray0.length);
      assertNotNull(homeLight0);
      
      FurnitureCategory furnitureCategory0 = catalogLight0.getCategory();
      assertEquals((byte)1, bigDecimal0.byteValue());
      assertEquals((short)1, bigDecimal0.shortValue());
      assertEquals(233.10785F, catalogLight0.getHeight(), 0.01F);
      assertEquals("", catalogLight0.getId());
      assertNull(catalogLight0.getColor());
      assertFalse(catalogLight0.isModifiable());
      assertEquals((-727.8896F), catalogLight0.getElevation(), 0.01F);
      assertTrue(catalogLight0.isProportional());
      assertFalse(catalogLight0.isDoorOrWindow());
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertNull(catalogLight0.getGrade());
      assertEquals("{L", catalogLight0.getCreator());
      assertTrue(catalogLight0.isTexturable());
      assertNull(catalogLight0.getInformation());
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertTrue(catalogLight0.isResizable());
      assertTrue(catalogLight0.isMovable());
      assertFalse(catalogLight0.isBackFaceShown());
      assertEquals("PRICE_VALUE_ADDED_TAX_INCLUDED", catalogLight0.getName());
      assertEquals((-1541.0F), catalogLight0.getDepth(), 0.01F);
      assertTrue(catalogLight0.isDeformable());
      assertNull(catalogLight0.getCurrency());
      assertNull(catalogLight0.getCreationDate());
      assertEquals("PRICE_VALUE_ADDED_TAX_INCLUDED", catalogLight0.getDescription());
      assertEquals(0.3926991F, catalogLight0.getWidth(), 0.01F);
      assertEquals(2, lightSourceArray0.length);
      assertNull(furnitureCategory0);
      
      catalogLight0.setCategory((FurnitureCategory) null);
      assertEquals((byte)1, bigDecimal0.byteValue());
      assertEquals((short)1, bigDecimal0.shortValue());
      assertEquals(233.10785F, catalogLight0.getHeight(), 0.01F);
      assertEquals("", catalogLight0.getId());
      assertNull(catalogLight0.getColor());
      assertFalse(catalogLight0.isModifiable());
      assertEquals((-727.8896F), catalogLight0.getElevation(), 0.01F);
      assertTrue(catalogLight0.isProportional());
      assertFalse(catalogLight0.isDoorOrWindow());
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertNull(catalogLight0.getGrade());
      assertEquals("{L", catalogLight0.getCreator());
      assertTrue(catalogLight0.isTexturable());
      assertNull(catalogLight0.getInformation());
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertTrue(catalogLight0.isResizable());
      assertTrue(catalogLight0.isMovable());
      assertFalse(catalogLight0.isBackFaceShown());
      assertEquals("PRICE_VALUE_ADDED_TAX_INCLUDED", catalogLight0.getName());
      assertEquals((-1541.0F), catalogLight0.getDepth(), 0.01F);
      assertTrue(catalogLight0.isDeformable());
      assertNull(catalogLight0.getCurrency());
      assertNull(catalogLight0.getCreationDate());
      assertEquals("PRICE_VALUE_ADDED_TAX_INCLUDED", catalogLight0.getDescription());
      assertEquals(0.3926991F, catalogLight0.getWidth(), 0.01F);
      assertEquals(2, lightSourceArray0.length);
      
      HomeLight homeLight1 = homeLight0.clone();
      assertFalse(homeLight1.equals((Object)homeLight0));
      assertEquals((byte)1, bigDecimal0.byteValue());
      assertEquals((short)1, bigDecimal0.shortValue());
      assertEquals(233.10785F, catalogLight0.getHeight(), 0.01F);
      assertEquals("", catalogLight0.getId());
      assertNull(catalogLight0.getColor());
      assertFalse(catalogLight0.isModifiable());
      assertEquals((-727.8896F), catalogLight0.getElevation(), 0.01F);
      assertTrue(catalogLight0.isProportional());
      assertFalse(catalogLight0.isDoorOrWindow());
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertNull(catalogLight0.getGrade());
      assertEquals("{L", catalogLight0.getCreator());
      assertTrue(catalogLight0.isTexturable());
      assertNull(catalogLight0.getInformation());
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertTrue(catalogLight0.isResizable());
      assertTrue(catalogLight0.isMovable());
      assertFalse(catalogLight0.isBackFaceShown());
      assertEquals("PRICE_VALUE_ADDED_TAX_INCLUDED", catalogLight0.getName());
      assertEquals((-1541.0F), catalogLight0.getDepth(), 0.01F);
      assertTrue(catalogLight0.isDeformable());
      assertNull(catalogLight0.getCurrency());
      assertNull(catalogLight0.getCreationDate());
      assertEquals("PRICE_VALUE_ADDED_TAX_INCLUDED", catalogLight0.getDescription());
      assertEquals(0.3926991F, catalogLight0.getWidth(), 0.01F);
      assertEquals((-1541.0F), homeLight0.getDepth(), 0.01F);
      assertEquals((-727.8896F), homeLight0.getElevation(), 0.01F);
      assertTrue(homeLight0.isMovable());
      assertNull(homeLight0.getCurrency());
      assertFalse(homeLight0.isNameVisible());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals("", homeLight0.getCatalogId());
      assertEquals((-770.5F), homeLight0.getY(), 0.01F);
      assertEquals("PRICE_VALUE_ADDED_TAX_INCLUDED", homeLight0.getDescription());
      assertFalse(homeLight0.isBackFaceShown());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertFalse(homeLight0.isModelMirrored());
      assertNull(homeLight0.getColor());
      assertEquals(0.19634955F, homeLight0.getX(), 0.01F);
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertEquals(0.3926991F, homeLight0.getWidth(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      assertTrue(homeLight0.isTexturable());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals("PRICE_VALUE_ADDED_TAX_INCLUDED", homeLight0.getName());
      assertEquals(233.10785F, homeLight0.getHeight(), 0.01F);
      assertTrue(homeLight0.isVisible());
      assertEquals((-727.8896F), homeLight0.getGroundElevation(), 0.01F);
      assertNull(homeLight0.getShininess());
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertTrue(homeLight0.isResizable());
      assertTrue(homeLight0.isDeformable());
      assertFalse(homeLight1.isDoorOrWindow());
      assertFalse(homeLight1.isBackFaceShown());
      assertEquals(233.10785F, homeLight1.getHeight(), 0.01F);
      assertEquals(0.3926991F, homeLight1.getWidth(), 0.01F);
      assertTrue(homeLight1.isTexturable());
      assertFalse(homeLight1.isModelMirrored());
      assertEquals(0.0F, homeLight1.getAngle(), 0.01F);
      assertFalse(homeLight1.isNameVisible());
      assertEquals(0.0F, homeLight1.getNameYOffset(), 0.01F);
      assertNull(homeLight1.getCurrency());
      assertEquals(0.5F, homeLight1.getPower(), 0.01F);
      assertEquals(0.19634955F, homeLight1.getX(), 0.01F);
      assertEquals("PRICE_VALUE_ADDED_TAX_INCLUDED", homeLight1.getDescription());
      assertNull(homeLight1.getColor());
      assertEquals("", homeLight1.getCatalogId());
      assertNull(homeLight1.getShininess());
      assertTrue(homeLight1.isResizable());
      assertEquals((-727.8896F), homeLight1.getGroundElevation(), 0.01F);
      assertNull(homeLight1.getStaircaseCutOutShape());
      assertEquals((-1541.0F), homeLight1.getDepth(), 0.01F);
      assertEquals(0.0F, homeLight1.getNameAngle(), 0.01F);
      assertEquals((-770.5F), homeLight1.getY(), 0.01F);
      assertTrue(homeLight1.isMovable());
      assertEquals("PRICE_VALUE_ADDED_TAX_INCLUDED", homeLight1.getName());
      assertTrue(homeLight1.isDeformable());
      assertTrue(homeLight1.isVisible());
      assertEquals(0.0F, homeLight1.getNameXOffset(), 0.01F);
      assertEquals((-727.8896F), homeLight1.getElevation(), 0.01F);
      assertEquals(2, lightSourceArray0.length);
      assertNotSame(homeLight0, homeLight1);
      assertNotSame(homeLight1, homeLight0);
      assertNotNull(homeLight1);
      
      HomeLight homeLight2 = (HomeLight)homeLight1.clone();
      assertFalse(homeLight0.equals((Object)homeLight1));
      assertFalse(homeLight1.equals((Object)homeLight0));
      assertFalse(homeLight2.equals((Object)homeLight0));
      assertFalse(homeLight2.equals((Object)homeLight1));
      assertEquals((byte)1, bigDecimal0.byteValue());
      assertEquals((short)1, bigDecimal0.shortValue());
      assertEquals(233.10785F, catalogLight0.getHeight(), 0.01F);
      assertEquals("", catalogLight0.getId());
      assertNull(catalogLight0.getColor());
      assertFalse(catalogLight0.isModifiable());
      assertEquals((-727.8896F), catalogLight0.getElevation(), 0.01F);
      assertTrue(catalogLight0.isProportional());
      assertFalse(catalogLight0.isDoorOrWindow());
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertNull(catalogLight0.getGrade());
      assertEquals("{L", catalogLight0.getCreator());
      assertTrue(catalogLight0.isTexturable());
      assertNull(catalogLight0.getInformation());
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertTrue(catalogLight0.isResizable());
      assertTrue(catalogLight0.isMovable());
      assertFalse(catalogLight0.isBackFaceShown());
      assertEquals("PRICE_VALUE_ADDED_TAX_INCLUDED", catalogLight0.getName());
      assertEquals((-1541.0F), catalogLight0.getDepth(), 0.01F);
      assertTrue(catalogLight0.isDeformable());
      assertNull(catalogLight0.getCurrency());
      assertNull(catalogLight0.getCreationDate());
      assertEquals("PRICE_VALUE_ADDED_TAX_INCLUDED", catalogLight0.getDescription());
      assertEquals(0.3926991F, catalogLight0.getWidth(), 0.01F);
      assertEquals((-1541.0F), homeLight0.getDepth(), 0.01F);
      assertEquals((-727.8896F), homeLight0.getElevation(), 0.01F);
      assertTrue(homeLight0.isMovable());
      assertNull(homeLight0.getCurrency());
      assertFalse(homeLight0.isNameVisible());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals("", homeLight0.getCatalogId());
      assertEquals((-770.5F), homeLight0.getY(), 0.01F);
      assertEquals("PRICE_VALUE_ADDED_TAX_INCLUDED", homeLight0.getDescription());
      assertFalse(homeLight0.isBackFaceShown());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertFalse(homeLight0.isModelMirrored());
      assertNull(homeLight0.getColor());
      assertEquals(0.19634955F, homeLight0.getX(), 0.01F);
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertEquals(0.3926991F, homeLight0.getWidth(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      assertTrue(homeLight0.isTexturable());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals("PRICE_VALUE_ADDED_TAX_INCLUDED", homeLight0.getName());
      assertEquals(233.10785F, homeLight0.getHeight(), 0.01F);
      assertTrue(homeLight0.isVisible());
      assertEquals((-727.8896F), homeLight0.getGroundElevation(), 0.01F);
      assertNull(homeLight0.getShininess());
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertTrue(homeLight0.isResizable());
      assertTrue(homeLight0.isDeformable());
      assertFalse(homeLight1.isDoorOrWindow());
      assertFalse(homeLight1.isBackFaceShown());
      assertEquals(233.10785F, homeLight1.getHeight(), 0.01F);
      assertEquals(0.3926991F, homeLight1.getWidth(), 0.01F);
      assertTrue(homeLight1.isTexturable());
      assertFalse(homeLight1.isModelMirrored());
      assertEquals(0.0F, homeLight1.getAngle(), 0.01F);
      assertFalse(homeLight1.isNameVisible());
      assertEquals(0.0F, homeLight1.getNameYOffset(), 0.01F);
      assertNull(homeLight1.getCurrency());
      assertEquals(0.5F, homeLight1.getPower(), 0.01F);
      assertEquals(0.19634955F, homeLight1.getX(), 0.01F);
      assertEquals("PRICE_VALUE_ADDED_TAX_INCLUDED", homeLight1.getDescription());
      assertNull(homeLight1.getColor());
      assertEquals("", homeLight1.getCatalogId());
      assertNull(homeLight1.getShininess());
      assertTrue(homeLight1.isResizable());
      assertEquals((-727.8896F), homeLight1.getGroundElevation(), 0.01F);
      assertNull(homeLight1.getStaircaseCutOutShape());
      assertEquals((-1541.0F), homeLight1.getDepth(), 0.01F);
      assertEquals(0.0F, homeLight1.getNameAngle(), 0.01F);
      assertEquals((-770.5F), homeLight1.getY(), 0.01F);
      assertTrue(homeLight1.isMovable());
      assertEquals("PRICE_VALUE_ADDED_TAX_INCLUDED", homeLight1.getName());
      assertTrue(homeLight1.isDeformable());
      assertTrue(homeLight1.isVisible());
      assertEquals(0.0F, homeLight1.getNameXOffset(), 0.01F);
      assertEquals((-727.8896F), homeLight1.getElevation(), 0.01F);
      assertTrue(homeLight2.isResizable());
      assertNull(homeLight2.getStaircaseCutOutShape());
      assertEquals((-727.8896F), homeLight2.getGroundElevation(), 0.01F);
      assertEquals(0.5F, homeLight2.getPower(), 0.01F);
      assertNull(homeLight2.getShininess());
      assertEquals(0.19634955F, homeLight2.getX(), 0.01F);
      assertEquals("PRICE_VALUE_ADDED_TAX_INCLUDED", homeLight2.getDescription());
      assertEquals(0.0F, homeLight2.getNameXOffset(), 0.01F);
      assertEquals("", homeLight2.getCatalogId());
      assertEquals((-727.8896F), homeLight2.getElevation(), 0.01F);
      assertEquals(0.0F, homeLight2.getAngle(), 0.01F);
      assertFalse(homeLight2.isNameVisible());
      assertEquals((-770.5F), homeLight2.getY(), 0.01F);
      assertEquals((-1541.0F), homeLight2.getDepth(), 0.01F);
      assertFalse(homeLight2.isBackFaceShown());
      assertFalse(homeLight2.isModelMirrored());
      assertFalse(homeLight2.isDoorOrWindow());
      assertEquals(0.3926991F, homeLight2.getWidth(), 0.01F);
      assertEquals(233.10785F, homeLight2.getHeight(), 0.01F);
      assertTrue(homeLight2.isTexturable());
      assertNull(homeLight2.getColor());
      assertEquals(0.0F, homeLight2.getNameYOffset(), 0.01F);
      assertTrue(homeLight2.isDeformable());
      assertTrue(homeLight2.isVisible());
      assertNull(homeLight2.getCurrency());
      assertEquals(0.0F, homeLight2.getNameAngle(), 0.01F);
      assertEquals("PRICE_VALUE_ADDED_TAX_INCLUDED", homeLight2.getName());
      assertTrue(homeLight2.isMovable());
      assertEquals(2, lightSourceArray0.length);
      assertNotSame(homeLight0, homeLight2);
      assertNotSame(homeLight0, homeLight1);
      assertNotSame(homeLight1, homeLight2);
      assertNotSame(homeLight1, homeLight0);
      assertNotSame(homeLight2, homeLight0);
      assertNotSame(homeLight2, homeLight1);
      assertNotNull(homeLight2);
      
      HomeLight homeLight3 = new HomeLight(catalogLight0);
      assertFalse(homeLight3.equals((Object)homeLight1));
      assertFalse(homeLight3.equals((Object)homeLight2));
      assertFalse(homeLight3.equals((Object)homeLight0));
      assertEquals((byte)1, bigDecimal0.byteValue());
      assertEquals((short)1, bigDecimal0.shortValue());
      assertEquals(233.10785F, catalogLight0.getHeight(), 0.01F);
      assertEquals("", catalogLight0.getId());
      assertNull(catalogLight0.getColor());
      assertFalse(catalogLight0.isModifiable());
      assertEquals((-727.8896F), catalogLight0.getElevation(), 0.01F);
      assertTrue(catalogLight0.isProportional());
      assertFalse(catalogLight0.isDoorOrWindow());
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertNull(catalogLight0.getGrade());
      assertEquals("{L", catalogLight0.getCreator());
      assertTrue(catalogLight0.isTexturable());
      assertNull(catalogLight0.getInformation());
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertTrue(catalogLight0.isResizable());
      assertTrue(catalogLight0.isMovable());
      assertFalse(catalogLight0.isBackFaceShown());
      assertEquals("PRICE_VALUE_ADDED_TAX_INCLUDED", catalogLight0.getName());
      assertEquals((-1541.0F), catalogLight0.getDepth(), 0.01F);
      assertTrue(catalogLight0.isDeformable());
      assertNull(catalogLight0.getCurrency());
      assertNull(catalogLight0.getCreationDate());
      assertEquals("PRICE_VALUE_ADDED_TAX_INCLUDED", catalogLight0.getDescription());
      assertEquals(0.3926991F, catalogLight0.getWidth(), 0.01F);
      assertEquals(0.0F, homeLight3.getNameYOffset(), 0.01F);
      assertTrue(homeLight3.isDeformable());
      assertTrue(homeLight3.isVisible());
      assertNull(homeLight3.getCurrency());
      assertNull(homeLight3.getColor());
      assertEquals((-727.8896F), homeLight3.getElevation(), 0.01F);
      assertTrue(homeLight3.isResizable());
      assertEquals(0.3926991F, homeLight3.getWidth(), 0.01F);
      assertNull(homeLight3.getStaircaseCutOutShape());
      assertEquals((-727.8896F), homeLight3.getGroundElevation(), 0.01F);
      assertNull(homeLight3.getShininess());
      assertEquals(0.0F, homeLight3.getNameAngle(), 0.01F);
      assertEquals("PRICE_VALUE_ADDED_TAX_INCLUDED", homeLight3.getName());
      assertTrue(homeLight3.isMovable());
      assertEquals(0.5F, homeLight3.getPower(), 0.01F);
      assertEquals(0.19634955F, homeLight3.getX(), 0.01F);
      assertEquals("PRICE_VALUE_ADDED_TAX_INCLUDED", homeLight3.getDescription());
      assertEquals("", homeLight3.getCatalogId());
      assertEquals(0.0F, homeLight3.getNameXOffset(), 0.01F);
      assertFalse(homeLight3.isDoorOrWindow());
      assertFalse(homeLight3.isBackFaceShown());
      assertEquals(233.10785F, homeLight3.getHeight(), 0.01F);
      assertTrue(homeLight3.isTexturable());
      assertFalse(homeLight3.isModelMirrored());
      assertEquals(0.0F, homeLight3.getAngle(), 0.01F);
      assertEquals((-1541.0F), homeLight3.getDepth(), 0.01F);
      assertEquals((-770.5F), homeLight3.getY(), 0.01F);
      assertFalse(homeLight3.isNameVisible());
      assertEquals(2, lightSourceArray0.length);
      assertNotNull(homeLight3);
      
      Content content0 = homeLight3.getIcon();
      assertFalse(homeLight3.equals((Object)homeLight1));
      assertFalse(homeLight3.equals((Object)homeLight2));
      assertFalse(homeLight3.equals((Object)homeLight0));
      assertEquals((byte)1, bigDecimal0.byteValue());
      assertEquals((short)1, bigDecimal0.shortValue());
      assertEquals(233.10785F, catalogLight0.getHeight(), 0.01F);
      assertEquals("", catalogLight0.getId());
      assertNull(catalogLight0.getColor());
      assertFalse(catalogLight0.isModifiable());
      assertEquals((-727.8896F), catalogLight0.getElevation(), 0.01F);
      assertTrue(catalogLight0.isProportional());
      assertFalse(catalogLight0.isDoorOrWindow());
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertNull(catalogLight0.getGrade());
      assertEquals("{L", catalogLight0.getCreator());
      assertTrue(catalogLight0.isTexturable());
      assertNull(catalogLight0.getInformation());
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertTrue(catalogLight0.isResizable());
      assertTrue(catalogLight0.isMovable());
      assertFalse(catalogLight0.isBackFaceShown());
      assertEquals("PRICE_VALUE_ADDED_TAX_INCLUDED", catalogLight0.getName());
      assertEquals((-1541.0F), catalogLight0.getDepth(), 0.01F);
      assertTrue(catalogLight0.isDeformable());
      assertNull(catalogLight0.getCurrency());
      assertNull(catalogLight0.getCreationDate());
      assertEquals("PRICE_VALUE_ADDED_TAX_INCLUDED", catalogLight0.getDescription());
      assertEquals(0.3926991F, catalogLight0.getWidth(), 0.01F);
      assertEquals(0.0F, homeLight3.getNameYOffset(), 0.01F);
      assertTrue(homeLight3.isDeformable());
      assertTrue(homeLight3.isVisible());
      assertNull(homeLight3.getCurrency());
      assertNull(homeLight3.getColor());
      assertEquals((-727.8896F), homeLight3.getElevation(), 0.01F);
      assertTrue(homeLight3.isResizable());
      assertEquals(0.3926991F, homeLight3.getWidth(), 0.01F);
      assertNull(homeLight3.getStaircaseCutOutShape());
      assertEquals((-727.8896F), homeLight3.getGroundElevation(), 0.01F);
      assertNull(homeLight3.getShininess());
      assertEquals(0.0F, homeLight3.getNameAngle(), 0.01F);
      assertEquals("PRICE_VALUE_ADDED_TAX_INCLUDED", homeLight3.getName());
      assertTrue(homeLight3.isMovable());
      assertEquals(0.5F, homeLight3.getPower(), 0.01F);
      assertEquals(0.19634955F, homeLight3.getX(), 0.01F);
      assertEquals("PRICE_VALUE_ADDED_TAX_INCLUDED", homeLight3.getDescription());
      assertEquals("", homeLight3.getCatalogId());
      assertEquals(0.0F, homeLight3.getNameXOffset(), 0.01F);
      assertFalse(homeLight3.isDoorOrWindow());
      assertFalse(homeLight3.isBackFaceShown());
      assertEquals(233.10785F, homeLight3.getHeight(), 0.01F);
      assertTrue(homeLight3.isTexturable());
      assertFalse(homeLight3.isModelMirrored());
      assertEquals(0.0F, homeLight3.getAngle(), 0.01F);
      assertEquals((-1541.0F), homeLight3.getDepth(), 0.01F);
      assertEquals((-770.5F), homeLight3.getY(), 0.01F);
      assertFalse(homeLight3.isNameVisible());
      assertEquals(2, lightSourceArray0.length);
      assertNotSame(homeLight3, homeLight1);
      assertNotSame(homeLight3, homeLight2);
      assertNotSame(homeLight3, homeLight0);
      assertNull(content0);
      
      homeLight1.setNameVisible(true);
      assertFalse(homeLight0.equals((Object)homeLight2));
      assertFalse(homeLight0.equals((Object)homeLight3));
      assertFalse(homeLight0.equals((Object)homeLight1));
      assertFalse(homeLight1.equals((Object)homeLight2));
      assertFalse(homeLight1.equals((Object)homeLight3));
      assertFalse(homeLight1.equals((Object)homeLight0));
      assertEquals((byte)1, bigDecimal0.byteValue());
      assertEquals((short)1, bigDecimal0.shortValue());
      assertEquals(233.10785F, catalogLight0.getHeight(), 0.01F);
      assertEquals("", catalogLight0.getId());
      assertNull(catalogLight0.getColor());
      assertFalse(catalogLight0.isModifiable());
      assertEquals((-727.8896F), catalogLight0.getElevation(), 0.01F);
      assertTrue(catalogLight0.isProportional());
      assertFalse(catalogLight0.isDoorOrWindow());
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertNull(catalogLight0.getGrade());
      assertEquals("{L", catalogLight0.getCreator());
      assertTrue(catalogLight0.isTexturable());
      assertNull(catalogLight0.getInformation());
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertTrue(catalogLight0.isResizable());
      assertTrue(catalogLight0.isMovable());
      assertFalse(catalogLight0.isBackFaceShown());
      assertEquals("PRICE_VALUE_ADDED_TAX_INCLUDED", catalogLight0.getName());
      assertEquals((-1541.0F), catalogLight0.getDepth(), 0.01F);
      assertTrue(catalogLight0.isDeformable());
      assertNull(catalogLight0.getCurrency());
      assertNull(catalogLight0.getCreationDate());
      assertEquals("PRICE_VALUE_ADDED_TAX_INCLUDED", catalogLight0.getDescription());
      assertEquals(0.3926991F, catalogLight0.getWidth(), 0.01F);
      assertEquals((-1541.0F), homeLight0.getDepth(), 0.01F);
      assertEquals((-727.8896F), homeLight0.getElevation(), 0.01F);
      assertTrue(homeLight0.isMovable());
      assertNull(homeLight0.getCurrency());
      assertFalse(homeLight0.isNameVisible());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals("", homeLight0.getCatalogId());
      assertEquals((-770.5F), homeLight0.getY(), 0.01F);
      assertEquals("PRICE_VALUE_ADDED_TAX_INCLUDED", homeLight0.getDescription());
      assertFalse(homeLight0.isBackFaceShown());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertFalse(homeLight0.isModelMirrored());
      assertNull(homeLight0.getColor());
      assertEquals(0.19634955F, homeLight0.getX(), 0.01F);
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertEquals(0.3926991F, homeLight0.getWidth(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      assertTrue(homeLight0.isTexturable());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals("PRICE_VALUE_ADDED_TAX_INCLUDED", homeLight0.getName());
      assertEquals(233.10785F, homeLight0.getHeight(), 0.01F);
      assertTrue(homeLight0.isVisible());
      assertEquals((-727.8896F), homeLight0.getGroundElevation(), 0.01F);
      assertNull(homeLight0.getShininess());
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertTrue(homeLight0.isResizable());
      assertTrue(homeLight0.isDeformable());
      assertFalse(homeLight1.isDoorOrWindow());
      assertFalse(homeLight1.isBackFaceShown());
      assertEquals(233.10785F, homeLight1.getHeight(), 0.01F);
      assertEquals(0.3926991F, homeLight1.getWidth(), 0.01F);
      assertTrue(homeLight1.isTexturable());
      assertFalse(homeLight1.isModelMirrored());
      assertEquals(0.0F, homeLight1.getAngle(), 0.01F);
      assertTrue(homeLight1.isNameVisible());
      assertEquals(0.0F, homeLight1.getNameYOffset(), 0.01F);
      assertNull(homeLight1.getCurrency());
      assertEquals(0.5F, homeLight1.getPower(), 0.01F);
      assertEquals(0.19634955F, homeLight1.getX(), 0.01F);
      assertEquals("PRICE_VALUE_ADDED_TAX_INCLUDED", homeLight1.getDescription());
      assertNull(homeLight1.getColor());
      assertEquals("", homeLight1.getCatalogId());
      assertNull(homeLight1.getShininess());
      assertTrue(homeLight1.isResizable());
      assertEquals((-727.8896F), homeLight1.getGroundElevation(), 0.01F);
      assertNull(homeLight1.getStaircaseCutOutShape());
      assertEquals((-1541.0F), homeLight1.getDepth(), 0.01F);
      assertEquals(0.0F, homeLight1.getNameAngle(), 0.01F);
      assertEquals((-770.5F), homeLight1.getY(), 0.01F);
      assertTrue(homeLight1.isMovable());
      assertEquals("PRICE_VALUE_ADDED_TAX_INCLUDED", homeLight1.getName());
      assertTrue(homeLight1.isDeformable());
      assertTrue(homeLight1.isVisible());
      assertEquals(0.0F, homeLight1.getNameXOffset(), 0.01F);
      assertEquals((-727.8896F), homeLight1.getElevation(), 0.01F);
      assertEquals(2, lightSourceArray0.length);
      assertNotSame(homeLight0, homeLight2);
      assertNotSame(homeLight0, homeLight3);
      assertNotSame(homeLight0, homeLight1);
      assertNotSame(homeLight1, homeLight2);
      assertNotSame(homeLight1, homeLight3);
      assertNotSame(homeLight1, homeLight0);
      
      HomeLight homeLight4 = homeLight3.clone();
      assertFalse(homeLight3.equals((Object)homeLight1));
      assertFalse(homeLight3.equals((Object)homeLight2));
      assertFalse(homeLight3.equals((Object)homeLight0));
      assertFalse(homeLight4.equals((Object)homeLight0));
      assertFalse(homeLight4.equals((Object)homeLight1));
      assertFalse(homeLight4.equals((Object)homeLight2));
      assertFalse(homeLight4.equals((Object)homeLight3));
      assertEquals((byte)1, bigDecimal0.byteValue());
      assertEquals((short)1, bigDecimal0.shortValue());
      assertEquals(233.10785F, catalogLight0.getHeight(), 0.01F);
      assertEquals("", catalogLight0.getId());
      assertNull(catalogLight0.getColor());
      assertFalse(catalogLight0.isModifiable());
      assertEquals((-727.8896F), catalogLight0.getElevation(), 0.01F);
      assertTrue(catalogLight0.isProportional());
      assertFalse(catalogLight0.isDoorOrWindow());
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertNull(catalogLight0.getGrade());
      assertEquals("{L", catalogLight0.getCreator());
      assertTrue(catalogLight0.isTexturable());
      assertNull(catalogLight0.getInformation());
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertTrue(catalogLight0.isResizable());
      assertTrue(catalogLight0.isMovable());
      assertFalse(catalogLight0.isBackFaceShown());
      assertEquals("PRICE_VALUE_ADDED_TAX_INCLUDED", catalogLight0.getName());
      assertEquals((-1541.0F), catalogLight0.getDepth(), 0.01F);
      assertTrue(catalogLight0.isDeformable());
      assertNull(catalogLight0.getCurrency());
      assertNull(catalogLight0.getCreationDate());
      assertEquals("PRICE_VALUE_ADDED_TAX_INCLUDED", catalogLight0.getDescription());
      assertEquals(0.3926991F, catalogLight0.getWidth(), 0.01F);
      assertEquals(0.0F, homeLight3.getNameYOffset(), 0.01F);
      assertTrue(homeLight3.isDeformable());
      assertTrue(homeLight3.isVisible());
      assertNull(homeLight3.getCurrency());
      assertNull(homeLight3.getColor());
      assertEquals((-727.8896F), homeLight3.getElevation(), 0.01F);
      assertTrue(homeLight3.isResizable());
      assertEquals(0.3926991F, homeLight3.getWidth(), 0.01F);
      assertNull(homeLight3.getStaircaseCutOutShape());
      assertEquals((-727.8896F), homeLight3.getGroundElevation(), 0.01F);
      assertNull(homeLight3.getShininess());
      assertEquals(0.0F, homeLight3.getNameAngle(), 0.01F);
      assertEquals("PRICE_VALUE_ADDED_TAX_INCLUDED", homeLight3.getName());
      assertTrue(homeLight3.isMovable());
      assertEquals(0.5F, homeLight3.getPower(), 0.01F);
      assertEquals(0.19634955F, homeLight3.getX(), 0.01F);
      assertEquals("PRICE_VALUE_ADDED_TAX_INCLUDED", homeLight3.getDescription());
      assertEquals("", homeLight3.getCatalogId());
      assertEquals(0.0F, homeLight3.getNameXOffset(), 0.01F);
      assertFalse(homeLight3.isDoorOrWindow());
      assertFalse(homeLight3.isBackFaceShown());
      assertEquals(233.10785F, homeLight3.getHeight(), 0.01F);
      assertTrue(homeLight3.isTexturable());
      assertFalse(homeLight3.isModelMirrored());
      assertEquals(0.0F, homeLight3.getAngle(), 0.01F);
      assertEquals((-1541.0F), homeLight3.getDepth(), 0.01F);
      assertEquals((-770.5F), homeLight3.getY(), 0.01F);
      assertFalse(homeLight3.isNameVisible());
      assertTrue(homeLight4.isResizable());
      assertTrue(homeLight4.isMovable());
      assertNull(homeLight4.getStaircaseCutOutShape());
      assertEquals("", homeLight4.getCatalogId());
      assertEquals("PRICE_VALUE_ADDED_TAX_INCLUDED", homeLight4.getName());
      assertEquals((-727.8896F), homeLight4.getGroundElevation(), 0.01F);
      assertNull(homeLight4.getShininess());
      assertEquals(0.0F, homeLight4.getNameAngle(), 0.01F);
      assertEquals("PRICE_VALUE_ADDED_TAX_INCLUDED", homeLight4.getDescription());
      assertEquals((-770.5F), homeLight4.getY(), 0.01F);
      assertEquals(0.5F, homeLight4.getPower(), 0.01F);
      assertEquals((-1541.0F), homeLight4.getDepth(), 0.01F);
      assertTrue(homeLight4.isVisible());
      assertEquals(0.0F, homeLight4.getNameXOffset(), 0.01F);
      assertEquals((-727.8896F), homeLight4.getElevation(), 0.01F);
      assertTrue(homeLight4.isDeformable());
      assertEquals(233.10785F, homeLight4.getHeight(), 0.01F);
      assertNull(homeLight4.getColor());
      assertFalse(homeLight4.isModelMirrored());
      assertFalse(homeLight4.isDoorOrWindow());
      assertFalse(homeLight4.isBackFaceShown());
      assertEquals(0.3926991F, homeLight4.getWidth(), 0.01F);
      assertFalse(homeLight4.isNameVisible());
      assertNull(homeLight4.getCurrency());
      assertTrue(homeLight4.isTexturable());
      assertEquals(0.0F, homeLight4.getAngle(), 0.01F);
      assertEquals(0.0F, homeLight4.getNameYOffset(), 0.01F);
      assertEquals(0.19634955F, homeLight4.getX(), 0.01F);
      assertEquals(2, lightSourceArray0.length);
      assertNotSame(homeLight3, homeLight1);
      assertNotSame(homeLight3, homeLight2);
      assertNotSame(homeLight3, homeLight4);
      assertNotSame(homeLight3, homeLight0);
      assertNotSame(homeLight4, homeLight0);
      assertNotSame(homeLight4, homeLight1);
      assertNotSame(homeLight4, homeLight2);
      assertNotSame(homeLight4, homeLight3);
      assertNotNull(homeLight4);
      
      homeLight4.setWidth((-815.0011F));
      assertFalse(homeLight3.equals((Object)homeLight1));
      assertFalse(homeLight3.equals((Object)homeLight2));
      assertFalse(homeLight3.equals((Object)homeLight4));
      assertFalse(homeLight3.equals((Object)homeLight0));
      assertFalse(homeLight4.equals((Object)homeLight0));
      assertFalse(homeLight4.equals((Object)homeLight1));
      assertFalse(homeLight4.equals((Object)homeLight2));
      assertFalse(homeLight4.equals((Object)homeLight3));
      assertEquals((byte)1, bigDecimal0.byteValue());
      assertEquals((short)1, bigDecimal0.shortValue());
      assertEquals(233.10785F, catalogLight0.getHeight(), 0.01F);
      assertEquals("", catalogLight0.getId());
      assertNull(catalogLight0.getColor());
      assertFalse(catalogLight0.isModifiable());
      assertEquals((-727.8896F), catalogLight0.getElevation(), 0.01F);
      assertTrue(catalogLight0.isProportional());
      assertFalse(catalogLight0.isDoorOrWindow());
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertNull(catalogLight0.getGrade());
      assertEquals("{L", catalogLight0.getCreator());
      assertTrue(catalogLight0.isTexturable());
      assertNull(catalogLight0.getInformation());
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertTrue(catalogLight0.isResizable());
      assertTrue(catalogLight0.isMovable());
      assertFalse(catalogLight0.isBackFaceShown());
      assertEquals("PRICE_VALUE_ADDED_TAX_INCLUDED", catalogLight0.getName());
      assertEquals((-1541.0F), catalogLight0.getDepth(), 0.01F);
      assertTrue(catalogLight0.isDeformable());
      assertNull(catalogLight0.getCurrency());
      assertNull(catalogLight0.getCreationDate());
      assertEquals("PRICE_VALUE_ADDED_TAX_INCLUDED", catalogLight0.getDescription());
      assertEquals(0.3926991F, catalogLight0.getWidth(), 0.01F);
      assertEquals(0.0F, homeLight3.getNameYOffset(), 0.01F);
      assertTrue(homeLight3.isDeformable());
      assertTrue(homeLight3.isVisible());
      assertNull(homeLight3.getCurrency());
      assertNull(homeLight3.getColor());
      assertEquals((-727.8896F), homeLight3.getElevation(), 0.01F);
      assertTrue(homeLight3.isResizable());
      assertEquals(0.3926991F, homeLight3.getWidth(), 0.01F);
      assertNull(homeLight3.getStaircaseCutOutShape());
      assertEquals((-727.8896F), homeLight3.getGroundElevation(), 0.01F);
      assertNull(homeLight3.getShininess());
      assertEquals(0.0F, homeLight3.getNameAngle(), 0.01F);
      assertEquals("PRICE_VALUE_ADDED_TAX_INCLUDED", homeLight3.getName());
      assertTrue(homeLight3.isMovable());
      assertEquals(0.5F, homeLight3.getPower(), 0.01F);
      assertEquals(0.19634955F, homeLight3.getX(), 0.01F);
      assertEquals("PRICE_VALUE_ADDED_TAX_INCLUDED", homeLight3.getDescription());
      assertEquals("", homeLight3.getCatalogId());
      assertEquals(0.0F, homeLight3.getNameXOffset(), 0.01F);
      assertFalse(homeLight3.isDoorOrWindow());
      assertFalse(homeLight3.isBackFaceShown());
      assertEquals(233.10785F, homeLight3.getHeight(), 0.01F);
      assertTrue(homeLight3.isTexturable());
      assertFalse(homeLight3.isModelMirrored());
      assertEquals(0.0F, homeLight3.getAngle(), 0.01F);
      assertEquals((-1541.0F), homeLight3.getDepth(), 0.01F);
      assertEquals((-770.5F), homeLight3.getY(), 0.01F);
      assertFalse(homeLight3.isNameVisible());
      assertTrue(homeLight4.isResizable());
      assertTrue(homeLight4.isMovable());
      assertNull(homeLight4.getStaircaseCutOutShape());
      assertEquals("", homeLight4.getCatalogId());
      assertEquals("PRICE_VALUE_ADDED_TAX_INCLUDED", homeLight4.getName());
      assertEquals((-727.8896F), homeLight4.getGroundElevation(), 0.01F);
      assertNull(homeLight4.getShininess());
      assertEquals(0.0F, homeLight4.getNameAngle(), 0.01F);
      assertEquals("PRICE_VALUE_ADDED_TAX_INCLUDED", homeLight4.getDescription());
      assertEquals((-770.5F), homeLight4.getY(), 0.01F);
      assertEquals(0.5F, homeLight4.getPower(), 0.01F);
      assertEquals((-1541.0F), homeLight4.getDepth(), 0.01F);
      assertTrue(homeLight4.isVisible());
      assertEquals(0.0F, homeLight4.getNameXOffset(), 0.01F);
      assertEquals((-727.8896F), homeLight4.getElevation(), 0.01F);
      assertTrue(homeLight4.isDeformable());
      assertEquals(233.10785F, homeLight4.getHeight(), 0.01F);
      assertNull(homeLight4.getColor());
      assertFalse(homeLight4.isModelMirrored());
      assertFalse(homeLight4.isDoorOrWindow());
      assertFalse(homeLight4.isBackFaceShown());
      assertFalse(homeLight4.isNameVisible());
      assertNull(homeLight4.getCurrency());
      assertTrue(homeLight4.isTexturable());
      assertEquals(0.0F, homeLight4.getAngle(), 0.01F);
      assertEquals((-815.0011F), homeLight4.getWidth(), 0.01F);
      assertEquals(0.0F, homeLight4.getNameYOffset(), 0.01F);
      assertEquals(0.19634955F, homeLight4.getX(), 0.01F);
      assertEquals(2, lightSourceArray0.length);
      assertNotSame(homeLight3, homeLight1);
      assertNotSame(homeLight3, homeLight2);
      assertNotSame(homeLight3, homeLight4);
      assertNotSame(homeLight3, homeLight0);
      assertNotSame(homeLight4, homeLight0);
      assertNotSame(homeLight4, homeLight1);
      assertNotSame(homeLight4, homeLight2);
      assertNotSame(homeLight4, homeLight3);
      
      String string0 = homeLight1.getName();
      assertFalse(homeLight0.equals((Object)homeLight2));
      assertFalse(homeLight0.equals((Object)homeLight3));
      assertFalse(homeLight0.equals((Object)homeLight1));
      assertFalse(homeLight0.equals((Object)homeLight4));
      assertFalse(homeLight1.equals((Object)homeLight2));
      assertFalse(homeLight1.equals((Object)homeLight3));
      assertFalse(homeLight1.equals((Object)homeLight4));
      assertFalse(homeLight1.equals((Object)homeLight0));
      assertEquals((byte)1, bigDecimal0.byteValue());
      assertEquals((short)1, bigDecimal0.shortValue());
      assertEquals(233.10785F, catalogLight0.getHeight(), 0.01F);
      assertEquals("", catalogLight0.getId());
      assertNull(catalogLight0.getColor());
      assertFalse(catalogLight0.isModifiable());
      assertEquals((-727.8896F), catalogLight0.getElevation(), 0.01F);
      assertTrue(catalogLight0.isProportional());
      assertFalse(catalogLight0.isDoorOrWindow());
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertNull(catalogLight0.getGrade());
      assertEquals("{L", catalogLight0.getCreator());
      assertTrue(catalogLight0.isTexturable());
      assertNull(catalogLight0.getInformation());
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertTrue(catalogLight0.isResizable());
      assertTrue(catalogLight0.isMovable());
      assertFalse(catalogLight0.isBackFaceShown());
      assertEquals("PRICE_VALUE_ADDED_TAX_INCLUDED", catalogLight0.getName());
      assertEquals((-1541.0F), catalogLight0.getDepth(), 0.01F);
      assertTrue(catalogLight0.isDeformable());
      assertNull(catalogLight0.getCurrency());
      assertNull(catalogLight0.getCreationDate());
      assertEquals("PRICE_VALUE_ADDED_TAX_INCLUDED", catalogLight0.getDescription());
      assertEquals(0.3926991F, catalogLight0.getWidth(), 0.01F);
      assertEquals((-1541.0F), homeLight0.getDepth(), 0.01F);
      assertEquals((-727.8896F), homeLight0.getElevation(), 0.01F);
      assertTrue(homeLight0.isMovable());
      assertNull(homeLight0.getCurrency());
      assertFalse(homeLight0.isNameVisible());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals("", homeLight0.getCatalogId());
      assertEquals((-770.5F), homeLight0.getY(), 0.01F);
      assertEquals("PRICE_VALUE_ADDED_TAX_INCLUDED", homeLight0.getDescription());
      assertFalse(homeLight0.isBackFaceShown());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertFalse(homeLight0.isModelMirrored());
      assertNull(homeLight0.getColor());
      assertEquals(0.19634955F, homeLight0.getX(), 0.01F);
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertEquals(0.3926991F, homeLight0.getWidth(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      assertTrue(homeLight0.isTexturable());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals("PRICE_VALUE_ADDED_TAX_INCLUDED", homeLight0.getName());
      assertEquals(233.10785F, homeLight0.getHeight(), 0.01F);
      assertTrue(homeLight0.isVisible());
      assertEquals((-727.8896F), homeLight0.getGroundElevation(), 0.01F);
      assertNull(homeLight0.getShininess());
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertTrue(homeLight0.isResizable());
      assertTrue(homeLight0.isDeformable());
      assertFalse(homeLight1.isDoorOrWindow());
      assertFalse(homeLight1.isBackFaceShown());
      assertEquals(233.10785F, homeLight1.getHeight(), 0.01F);
      assertEquals(0.3926991F, homeLight1.getWidth(), 0.01F);
      assertTrue(homeLight1.isTexturable());
      assertFalse(homeLight1.isModelMirrored());
      assertEquals(0.0F, homeLight1.getAngle(), 0.01F);
      assertTrue(homeLight1.isNameVisible());
      assertEquals(0.0F, homeLight1.getNameYOffset(), 0.01F);
      assertNull(homeLight1.getCurrency());
      assertEquals(0.5F, homeLight1.getPower(), 0.01F);
      assertEquals(0.19634955F, homeLight1.getX(), 0.01F);
      assertEquals("PRICE_VALUE_ADDED_TAX_INCLUDED", homeLight1.getDescription());
      assertNull(homeLight1.getColor());
      assertEquals("", homeLight1.getCatalogId());
      assertNull(homeLight1.getShininess());
      assertTrue(homeLight1.isResizable());
      assertEquals((-727.8896F), homeLight1.getGroundElevation(), 0.01F);
      assertNull(homeLight1.getStaircaseCutOutShape());
      assertEquals((-1541.0F), homeLight1.getDepth(), 0.01F);
      assertEquals(0.0F, homeLight1.getNameAngle(), 0.01F);
      assertEquals((-770.5F), homeLight1.getY(), 0.01F);
      assertTrue(homeLight1.isMovable());
      assertEquals("PRICE_VALUE_ADDED_TAX_INCLUDED", homeLight1.getName());
      assertTrue(homeLight1.isDeformable());
      assertTrue(homeLight1.isVisible());
      assertEquals(0.0F, homeLight1.getNameXOffset(), 0.01F);
      assertEquals((-727.8896F), homeLight1.getElevation(), 0.01F);
      assertEquals(2, lightSourceArray0.length);
      assertNotSame(homeLight0, homeLight2);
      assertNotSame(homeLight0, homeLight3);
      assertNotSame(homeLight0, homeLight1);
      assertNotSame(homeLight0, homeLight4);
      assertNotSame(homeLight1, homeLight2);
      assertNotSame(homeLight1, homeLight3);
      assertNotSame(homeLight1, homeLight4);
      assertNotSame(homeLight1, homeLight0);
      assertNotNull(string0);
      assertEquals("PRICE_VALUE_ADDED_TAX_INCLUDED", string0);
      
      float float0 = homeLight2.getWidth();
      assertFalse(homeLight0.equals((Object)homeLight2));
      assertFalse(homeLight0.equals((Object)homeLight3));
      assertFalse(homeLight0.equals((Object)homeLight1));
      assertFalse(homeLight0.equals((Object)homeLight4));
      assertFalse(homeLight1.equals((Object)homeLight2));
      assertFalse(homeLight1.equals((Object)homeLight3));
      assertFalse(homeLight1.equals((Object)homeLight4));
      assertFalse(homeLight1.equals((Object)homeLight0));
      assertFalse(homeLight2.equals((Object)homeLight0));
      assertFalse(homeLight2.equals((Object)homeLight3));
      assertFalse(homeLight2.equals((Object)homeLight1));
      assertFalse(homeLight2.equals((Object)homeLight4));
      assertEquals((byte)1, bigDecimal0.byteValue());
      assertEquals((short)1, bigDecimal0.shortValue());
      assertEquals(233.10785F, catalogLight0.getHeight(), 0.01F);
      assertEquals("", catalogLight0.getId());
      assertNull(catalogLight0.getColor());
      assertFalse(catalogLight0.isModifiable());
      assertEquals((-727.8896F), catalogLight0.getElevation(), 0.01F);
      assertTrue(catalogLight0.isProportional());
      assertFalse(catalogLight0.isDoorOrWindow());
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertNull(catalogLight0.getGrade());
      assertEquals("{L", catalogLight0.getCreator());
      assertTrue(catalogLight0.isTexturable());
      assertNull(catalogLight0.getInformation());
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertTrue(catalogLight0.isResizable());
      assertTrue(catalogLight0.isMovable());
      assertFalse(catalogLight0.isBackFaceShown());
      assertEquals("PRICE_VALUE_ADDED_TAX_INCLUDED", catalogLight0.getName());
      assertEquals((-1541.0F), catalogLight0.getDepth(), 0.01F);
      assertTrue(catalogLight0.isDeformable());
      assertNull(catalogLight0.getCurrency());
      assertNull(catalogLight0.getCreationDate());
      assertEquals("PRICE_VALUE_ADDED_TAX_INCLUDED", catalogLight0.getDescription());
      assertEquals(0.3926991F, catalogLight0.getWidth(), 0.01F);
      assertEquals((-1541.0F), homeLight0.getDepth(), 0.01F);
      assertEquals((-727.8896F), homeLight0.getElevation(), 0.01F);
      assertTrue(homeLight0.isMovable());
      assertNull(homeLight0.getCurrency());
      assertFalse(homeLight0.isNameVisible());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals("", homeLight0.getCatalogId());
      assertEquals((-770.5F), homeLight0.getY(), 0.01F);
      assertEquals("PRICE_VALUE_ADDED_TAX_INCLUDED", homeLight0.getDescription());
      assertFalse(homeLight0.isBackFaceShown());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertFalse(homeLight0.isModelMirrored());
      assertNull(homeLight0.getColor());
      assertEquals(0.19634955F, homeLight0.getX(), 0.01F);
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertEquals(0.3926991F, homeLight0.getWidth(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      assertTrue(homeLight0.isTexturable());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals("PRICE_VALUE_ADDED_TAX_INCLUDED", homeLight0.getName());
      assertEquals(233.10785F, homeLight0.getHeight(), 0.01F);
      assertTrue(homeLight0.isVisible());
      assertEquals((-727.8896F), homeLight0.getGroundElevation(), 0.01F);
      assertNull(homeLight0.getShininess());
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertTrue(homeLight0.isResizable());
      assertTrue(homeLight0.isDeformable());
      assertFalse(homeLight1.isDoorOrWindow());
      assertFalse(homeLight1.isBackFaceShown());
      assertEquals(233.10785F, homeLight1.getHeight(), 0.01F);
      assertEquals(0.3926991F, homeLight1.getWidth(), 0.01F);
      assertTrue(homeLight1.isTexturable());
      assertFalse(homeLight1.isModelMirrored());
      assertEquals(0.0F, homeLight1.getAngle(), 0.01F);
      assertTrue(homeLight1.isNameVisible());
      assertEquals(0.0F, homeLight1.getNameYOffset(), 0.01F);
      assertNull(homeLight1.getCurrency());
      assertEquals(0.5F, homeLight1.getPower(), 0.01F);
      assertEquals(0.19634955F, homeLight1.getX(), 0.01F);
      assertEquals("PRICE_VALUE_ADDED_TAX_INCLUDED", homeLight1.getDescription());
      assertNull(homeLight1.getColor());
      assertEquals("", homeLight1.getCatalogId());
      assertNull(homeLight1.getShininess());
      assertTrue(homeLight1.isResizable());
      assertEquals((-727.8896F), homeLight1.getGroundElevation(), 0.01F);
      assertNull(homeLight1.getStaircaseCutOutShape());
      assertEquals((-1541.0F), homeLight1.getDepth(), 0.01F);
      assertEquals(0.0F, homeLight1.getNameAngle(), 0.01F);
      assertEquals((-770.5F), homeLight1.getY(), 0.01F);
      assertTrue(homeLight1.isMovable());
      assertEquals("PRICE_VALUE_ADDED_TAX_INCLUDED", homeLight1.getName());
      assertTrue(homeLight1.isDeformable());
      assertTrue(homeLight1.isVisible());
      assertEquals(0.0F, homeLight1.getNameXOffset(), 0.01F);
      assertEquals((-727.8896F), homeLight1.getElevation(), 0.01F);
      assertTrue(homeLight2.isResizable());
      assertNull(homeLight2.getStaircaseCutOutShape());
      assertEquals((-727.8896F), homeLight2.getGroundElevation(), 0.01F);
      assertEquals(0.5F, homeLight2.getPower(), 0.01F);
      assertNull(homeLight2.getShininess());
      assertEquals(0.19634955F, homeLight2.getX(), 0.01F);
      assertEquals("PRICE_VALUE_ADDED_TAX_INCLUDED", homeLight2.getDescription());
      assertEquals(0.0F, homeLight2.getNameXOffset(), 0.01F);
      assertEquals("", homeLight2.getCatalogId());
      assertEquals((-727.8896F), homeLight2.getElevation(), 0.01F);
      assertEquals(0.0F, homeLight2.getAngle(), 0.01F);
      assertFalse(homeLight2.isNameVisible());
      assertEquals((-770.5F), homeLight2.getY(), 0.01F);
      assertEquals((-1541.0F), homeLight2.getDepth(), 0.01F);
      assertFalse(homeLight2.isBackFaceShown());
      assertFalse(homeLight2.isModelMirrored());
      assertFalse(homeLight2.isDoorOrWindow());
      assertEquals(0.3926991F, homeLight2.getWidth(), 0.01F);
      assertEquals(233.10785F, homeLight2.getHeight(), 0.01F);
      assertTrue(homeLight2.isTexturable());
      assertNull(homeLight2.getColor());
      assertEquals(0.0F, homeLight2.getNameYOffset(), 0.01F);
      assertTrue(homeLight2.isDeformable());
      assertTrue(homeLight2.isVisible());
      assertNull(homeLight2.getCurrency());
      assertEquals(0.0F, homeLight2.getNameAngle(), 0.01F);
      assertEquals("PRICE_VALUE_ADDED_TAX_INCLUDED", homeLight2.getName());
      assertTrue(homeLight2.isMovable());
      assertEquals(2, lightSourceArray0.length);
      assertNotSame(homeLight0, homeLight2);
      assertNotSame(homeLight0, homeLight3);
      assertNotSame(homeLight0, homeLight1);
      assertNotSame(homeLight0, homeLight4);
      assertNotSame(homeLight1, homeLight2);
      assertNotSame(homeLight1, homeLight3);
      assertNotSame(homeLight1, homeLight4);
      assertNotSame(homeLight1, homeLight0);
      assertNotSame(homeLight2, homeLight0);
      assertNotSame(homeLight2, homeLight3);
      assertNotSame(homeLight2, homeLight1);
      assertNotSame(homeLight2, homeLight4);
      assertEquals(0.3926991F, float0, 0.01F);
      
      homeLight0.setMovable(true);
      assertFalse(homeLight0.equals((Object)homeLight2));
      assertFalse(homeLight0.equals((Object)homeLight3));
      assertFalse(homeLight0.equals((Object)homeLight1));
      assertFalse(homeLight0.equals((Object)homeLight4));
      assertEquals((byte)1, bigDecimal0.byteValue());
      assertEquals((short)1, bigDecimal0.shortValue());
      assertEquals(233.10785F, catalogLight0.getHeight(), 0.01F);
      assertEquals("", catalogLight0.getId());
      assertNull(catalogLight0.getColor());
      assertFalse(catalogLight0.isModifiable());
      assertEquals((-727.8896F), catalogLight0.getElevation(), 0.01F);
      assertTrue(catalogLight0.isProportional());
      assertFalse(catalogLight0.isDoorOrWindow());
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertNull(catalogLight0.getGrade());
      assertEquals("{L", catalogLight0.getCreator());
      assertTrue(catalogLight0.isTexturable());
      assertNull(catalogLight0.getInformation());
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertTrue(catalogLight0.isResizable());
      assertTrue(catalogLight0.isMovable());
      assertFalse(catalogLight0.isBackFaceShown());
      assertEquals("PRICE_VALUE_ADDED_TAX_INCLUDED", catalogLight0.getName());
      assertEquals((-1541.0F), catalogLight0.getDepth(), 0.01F);
      assertTrue(catalogLight0.isDeformable());
      assertNull(catalogLight0.getCurrency());
      assertNull(catalogLight0.getCreationDate());
      assertEquals("PRICE_VALUE_ADDED_TAX_INCLUDED", catalogLight0.getDescription());
      assertEquals(0.3926991F, catalogLight0.getWidth(), 0.01F);
      assertEquals((-1541.0F), homeLight0.getDepth(), 0.01F);
      assertEquals((-727.8896F), homeLight0.getElevation(), 0.01F);
      assertTrue(homeLight0.isMovable());
      assertNull(homeLight0.getCurrency());
      assertFalse(homeLight0.isNameVisible());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals("", homeLight0.getCatalogId());
      assertEquals((-770.5F), homeLight0.getY(), 0.01F);
      assertEquals("PRICE_VALUE_ADDED_TAX_INCLUDED", homeLight0.getDescription());
      assertFalse(homeLight0.isBackFaceShown());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertFalse(homeLight0.isModelMirrored());
      assertNull(homeLight0.getColor());
      assertEquals(0.19634955F, homeLight0.getX(), 0.01F);
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertEquals(0.3926991F, homeLight0.getWidth(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      assertTrue(homeLight0.isTexturable());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals("PRICE_VALUE_ADDED_TAX_INCLUDED", homeLight0.getName());
      assertEquals(233.10785F, homeLight0.getHeight(), 0.01F);
      assertTrue(homeLight0.isVisible());
      assertEquals((-727.8896F), homeLight0.getGroundElevation(), 0.01F);
      assertNull(homeLight0.getShininess());
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertTrue(homeLight0.isResizable());
      assertTrue(homeLight0.isDeformable());
      assertEquals(2, lightSourceArray0.length);
      assertNotSame(homeLight0, homeLight2);
      assertNotSame(homeLight0, homeLight3);
      assertNotSame(homeLight0, homeLight1);
      assertNotSame(homeLight0, homeLight4);
      
      homeLight2.setElevation((-1541));
      assertFalse(homeLight0.equals((Object)homeLight2));
      assertFalse(homeLight0.equals((Object)homeLight3));
      assertFalse(homeLight0.equals((Object)homeLight1));
      assertFalse(homeLight0.equals((Object)homeLight4));
      assertFalse(homeLight1.equals((Object)homeLight2));
      assertFalse(homeLight1.equals((Object)homeLight3));
      assertFalse(homeLight1.equals((Object)homeLight4));
      assertFalse(homeLight1.equals((Object)homeLight0));
      assertFalse(homeLight2.equals((Object)homeLight0));
      assertFalse(homeLight2.equals((Object)homeLight3));
      assertFalse(homeLight2.equals((Object)homeLight1));
      assertFalse(homeLight2.equals((Object)homeLight4));
      assertEquals((byte)1, bigDecimal0.byteValue());
      assertEquals((short)1, bigDecimal0.shortValue());
      assertEquals(233.10785F, catalogLight0.getHeight(), 0.01F);
      assertEquals("", catalogLight0.getId());
      assertNull(catalogLight0.getColor());
      assertFalse(catalogLight0.isModifiable());
      assertEquals((-727.8896F), catalogLight0.getElevation(), 0.01F);
      assertTrue(catalogLight0.isProportional());
      assertFalse(catalogLight0.isDoorOrWindow());
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertNull(catalogLight0.getGrade());
      assertEquals("{L", catalogLight0.getCreator());
      assertTrue(catalogLight0.isTexturable());
      assertNull(catalogLight0.getInformation());
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertTrue(catalogLight0.isResizable());
      assertTrue(catalogLight0.isMovable());
      assertFalse(catalogLight0.isBackFaceShown());
      assertEquals("PRICE_VALUE_ADDED_TAX_INCLUDED", catalogLight0.getName());
      assertEquals((-1541.0F), catalogLight0.getDepth(), 0.01F);
      assertTrue(catalogLight0.isDeformable());
      assertNull(catalogLight0.getCurrency());
      assertNull(catalogLight0.getCreationDate());
      assertEquals("PRICE_VALUE_ADDED_TAX_INCLUDED", catalogLight0.getDescription());
      assertEquals(0.3926991F, catalogLight0.getWidth(), 0.01F);
      assertEquals((-1541.0F), homeLight0.getDepth(), 0.01F);
      assertEquals((-727.8896F), homeLight0.getElevation(), 0.01F);
      assertTrue(homeLight0.isMovable());
      assertNull(homeLight0.getCurrency());
      assertFalse(homeLight0.isNameVisible());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals("", homeLight0.getCatalogId());
      assertEquals((-770.5F), homeLight0.getY(), 0.01F);
      assertEquals("PRICE_VALUE_ADDED_TAX_INCLUDED", homeLight0.getDescription());
      assertFalse(homeLight0.isBackFaceShown());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertFalse(homeLight0.isModelMirrored());
      assertNull(homeLight0.getColor());
      assertEquals(0.19634955F, homeLight0.getX(), 0.01F);
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertEquals(0.3926991F, homeLight0.getWidth(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      assertTrue(homeLight0.isTexturable());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals("PRICE_VALUE_ADDED_TAX_INCLUDED", homeLight0.getName());
      assertEquals(233.10785F, homeLight0.getHeight(), 0.01F);
      assertTrue(homeLight0.isVisible());
      assertEquals((-727.8896F), homeLight0.getGroundElevation(), 0.01F);
      assertNull(homeLight0.getShininess());
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertTrue(homeLight0.isResizable());
      assertTrue(homeLight0.isDeformable());
      assertFalse(homeLight1.isDoorOrWindow());
      assertFalse(homeLight1.isBackFaceShown());
      assertEquals(233.10785F, homeLight1.getHeight(), 0.01F);
      assertEquals(0.3926991F, homeLight1.getWidth(), 0.01F);
      assertTrue(homeLight1.isTexturable());
      assertFalse(homeLight1.isModelMirrored());
      assertEquals(0.0F, homeLight1.getAngle(), 0.01F);
      assertTrue(homeLight1.isNameVisible());
      assertEquals(0.0F, homeLight1.getNameYOffset(), 0.01F);
      assertNull(homeLight1.getCurrency());
      assertEquals(0.5F, homeLight1.getPower(), 0.01F);
      assertEquals(0.19634955F, homeLight1.getX(), 0.01F);
      assertEquals("PRICE_VALUE_ADDED_TAX_INCLUDED", homeLight1.getDescription());
      assertNull(homeLight1.getColor());
      assertEquals("", homeLight1.getCatalogId());
      assertNull(homeLight1.getShininess());
      assertTrue(homeLight1.isResizable());
      assertEquals((-727.8896F), homeLight1.getGroundElevation(), 0.01F);
      assertNull(homeLight1.getStaircaseCutOutShape());
      assertEquals((-1541.0F), homeLight1.getDepth(), 0.01F);
      assertEquals(0.0F, homeLight1.getNameAngle(), 0.01F);
      assertEquals((-770.5F), homeLight1.getY(), 0.01F);
      assertTrue(homeLight1.isMovable());
      assertEquals("PRICE_VALUE_ADDED_TAX_INCLUDED", homeLight1.getName());
      assertTrue(homeLight1.isDeformable());
      assertTrue(homeLight1.isVisible());
      assertEquals(0.0F, homeLight1.getNameXOffset(), 0.01F);
      assertEquals((-727.8896F), homeLight1.getElevation(), 0.01F);
      assertTrue(homeLight2.isResizable());
      assertNull(homeLight2.getStaircaseCutOutShape());
      assertEquals((-1541.0F), homeLight2.getElevation(), 0.01F);
      assertEquals(0.5F, homeLight2.getPower(), 0.01F);
      assertNull(homeLight2.getShininess());
      assertEquals(0.19634955F, homeLight2.getX(), 0.01F);
      assertEquals("PRICE_VALUE_ADDED_TAX_INCLUDED", homeLight2.getDescription());
      assertEquals(0.0F, homeLight2.getNameXOffset(), 0.01F);
      assertEquals("", homeLight2.getCatalogId());
      assertEquals(0.0F, homeLight2.getAngle(), 0.01F);
      assertFalse(homeLight2.isNameVisible());
      assertEquals((-770.5F), homeLight2.getY(), 0.01F);
      assertEquals((-1541.0F), homeLight2.getDepth(), 0.01F);
      assertEquals((-1541.0F), homeLight2.getGroundElevation(), 0.01F);
      assertFalse(homeLight2.isBackFaceShown());
      assertFalse(homeLight2.isModelMirrored());
      assertFalse(homeLight2.isDoorOrWindow());
      assertEquals(0.3926991F, homeLight2.getWidth(), 0.01F);
      assertEquals(233.10785F, homeLight2.getHeight(), 0.01F);
      assertTrue(homeLight2.isTexturable());
      assertNull(homeLight2.getColor());
      assertEquals(0.0F, homeLight2.getNameYOffset(), 0.01F);
      assertTrue(homeLight2.isDeformable());
      assertTrue(homeLight2.isVisible());
      assertNull(homeLight2.getCurrency());
      assertEquals(0.0F, homeLight2.getNameAngle(), 0.01F);
      assertEquals("PRICE_VALUE_ADDED_TAX_INCLUDED", homeLight2.getName());
      assertTrue(homeLight2.isMovable());
      assertEquals(2, lightSourceArray0.length);
      assertNotSame(homeLight0, homeLight2);
      assertNotSame(homeLight0, homeLight3);
      assertNotSame(homeLight0, homeLight1);
      assertNotSame(homeLight0, homeLight4);
      assertNotSame(homeLight1, homeLight2);
      assertNotSame(homeLight1, homeLight3);
      assertNotSame(homeLight1, homeLight4);
      assertNotSame(homeLight1, homeLight0);
      assertNotSame(homeLight2, homeLight0);
      assertNotSame(homeLight2, homeLight3);
      assertNotSame(homeLight2, homeLight1);
      assertNotSame(homeLight2, homeLight4);
  }

  @Test(timeout = 4000)
  public void test231()  throws Throwable  {
      LightSource[] lightSourceArray0 = new LightSource[10];
      BigDecimal bigDecimal0 = BigDecimal.TEN;
      assertEquals((byte)10, bigDecimal0.byteValue());
      assertEquals((short)10, bigDecimal0.shortValue());
      assertNotNull(bigDecimal0);
      
      CatalogLight catalogLight0 = new CatalogLight("h&*+\"", "h&*+\"", "h&*+\"", (Content) null, (Content) null, 583.2978F, 583.2978F, (-694.0F), (-694.0F), true, lightSourceArray0, (float[][]) null, "h&*+\"", true, bigDecimal0, bigDecimal0);
      assertEquals((byte)10, bigDecimal0.byteValue());
      assertEquals((short)10, bigDecimal0.shortValue());
      assertNull(catalogLight0.getInformation());
      assertTrue(catalogLight0.isDeformable());
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertTrue(catalogLight0.isResizable());
      assertEquals(583.2978F, catalogLight0.getDepth(), 0.01F);
      assertEquals("h&*+\"", catalogLight0.getName());
      assertTrue(catalogLight0.isMovable());
      assertFalse(catalogLight0.isBackFaceShown());
      assertEquals((-694.0F), catalogLight0.getHeight(), 0.01F);
      assertEquals(583.2978F, catalogLight0.getWidth(), 0.01F);
      assertNull(catalogLight0.getCurrency());
      assertNull(catalogLight0.getCreationDate());
      assertEquals("h&*+\"", catalogLight0.getId());
      assertEquals("h&*+\"", catalogLight0.getCreator());
      assertEquals("h&*+\"", catalogLight0.getDescription());
      assertEquals((-694.0F), catalogLight0.getElevation(), 0.01F);
      assertNull(catalogLight0.getColor());
      assertFalse(catalogLight0.isModifiable());
      assertTrue(catalogLight0.isProportional());
      assertFalse(catalogLight0.isDoorOrWindow());
      assertNull(catalogLight0.getGrade());
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertTrue(catalogLight0.isTexturable());
      assertEquals(10, lightSourceArray0.length);
      assertNotNull(catalogLight0);
      
      CatalogLight catalogLight1 = new CatalogLight("", "-!3", "jar:", (Content) null, (Content) null, 347.4607F, (-3487.7092F), (-2746.9963F), 583.2978F, true, lightSourceArray0, (float[][]) null, "mQ)3A|jpy>d", true, bigDecimal0, bigDecimal0);
      assertFalse(catalogLight1.equals((Object)catalogLight0));
      assertEquals((byte)10, bigDecimal0.byteValue());
      assertEquals((short)10, bigDecimal0.shortValue());
      assertEquals("jar:", catalogLight1.getDescription());
      assertNull(catalogLight1.getCurrency());
      assertTrue(catalogLight1.isProportional());
      assertNull(catalogLight1.getInformation());
      assertTrue(catalogLight1.isResizable());
      assertTrue(catalogLight1.isDeformable());
      assertEquals("", catalogLight1.getId());
      assertNull(catalogLight1.getCreationDate());
      assertEquals("-!3", catalogLight1.getName());
      assertNull(catalogLight1.getColor());
      assertFalse(catalogLight1.isModifiable());
      assertEquals(583.2978F, catalogLight1.getElevation(), 0.01F);
      assertEquals("mQ)3A|jpy>d", catalogLight1.getCreator());
      assertEquals(347.4607F, catalogLight1.getWidth(), 0.01F);
      assertFalse(catalogLight1.isBackFaceShown());
      assertTrue(catalogLight1.isMovable());
      assertFalse(catalogLight1.isDoorOrWindow());
      assertEquals(0.3926991F, catalogLight1.getIconYaw(), 0.01F);
      assertNull(catalogLight1.getStaircaseCutOutShape());
      assertEquals((-2746.9963F), catalogLight1.getHeight(), 0.01F);
      assertTrue(catalogLight1.isTexturable());
      assertEquals((-3487.7092F), catalogLight1.getDepth(), 0.01F);
      assertNull(catalogLight1.getGrade());
      assertEquals(10, lightSourceArray0.length);
      assertNotNull(catalogLight1);
      
      HomeLight homeLight0 = new HomeLight(catalogLight0);
      assertFalse(catalogLight0.equals((Object)catalogLight1));
      assertEquals((byte)10, bigDecimal0.byteValue());
      assertEquals((short)10, bigDecimal0.shortValue());
      assertNull(catalogLight0.getInformation());
      assertTrue(catalogLight0.isDeformable());
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertTrue(catalogLight0.isResizable());
      assertEquals(583.2978F, catalogLight0.getDepth(), 0.01F);
      assertEquals("h&*+\"", catalogLight0.getName());
      assertTrue(catalogLight0.isMovable());
      assertFalse(catalogLight0.isBackFaceShown());
      assertEquals((-694.0F), catalogLight0.getHeight(), 0.01F);
      assertEquals(583.2978F, catalogLight0.getWidth(), 0.01F);
      assertNull(catalogLight0.getCurrency());
      assertNull(catalogLight0.getCreationDate());
      assertEquals("h&*+\"", catalogLight0.getId());
      assertEquals("h&*+\"", catalogLight0.getCreator());
      assertEquals("h&*+\"", catalogLight0.getDescription());
      assertEquals((-694.0F), catalogLight0.getElevation(), 0.01F);
      assertNull(catalogLight0.getColor());
      assertFalse(catalogLight0.isModifiable());
      assertTrue(catalogLight0.isProportional());
      assertFalse(catalogLight0.isDoorOrWindow());
      assertNull(catalogLight0.getGrade());
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertTrue(catalogLight0.isTexturable());
      assertEquals("h&*+\"", homeLight0.getName());
      assertEquals(291.6489F, homeLight0.getX(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals("h&*+\"", homeLight0.getDescription());
      assertTrue(homeLight0.isMovable());
      assertEquals((-694.0F), homeLight0.getElevation(), 0.01F);
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals((-694.0F), homeLight0.getHeight(), 0.01F);
      assertEquals("h&*+\"", homeLight0.getCatalogId());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertNull(homeLight0.getColor());
      assertFalse(homeLight0.isModelMirrored());
      assertFalse(homeLight0.isDoorOrWindow());
      assertFalse(homeLight0.isBackFaceShown());
      assertNull(homeLight0.getCurrency());
      assertTrue(homeLight0.isTexturable());
      assertFalse(homeLight0.isNameVisible());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertEquals(583.2978F, homeLight0.getDepth(), 0.01F);
      assertEquals(583.2978F, homeLight0.getWidth(), 0.01F);
      assertEquals((-694.0F), homeLight0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertNull(homeLight0.getShininess());
      assertTrue(homeLight0.isVisible());
      assertEquals(291.6489F, homeLight0.getY(), 0.01F);
      assertTrue(homeLight0.isResizable());
      assertTrue(homeLight0.isDeformable());
      assertEquals(10, lightSourceArray0.length);
      assertNotNull(homeLight0);
      
      homeLight0.setNameAngle((-3487.7092F));
      assertFalse(catalogLight0.equals((Object)catalogLight1));
      assertEquals((byte)10, bigDecimal0.byteValue());
      assertEquals((short)10, bigDecimal0.shortValue());
      assertNull(catalogLight0.getInformation());
      assertTrue(catalogLight0.isDeformable());
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertTrue(catalogLight0.isResizable());
      assertEquals(583.2978F, catalogLight0.getDepth(), 0.01F);
      assertEquals("h&*+\"", catalogLight0.getName());
      assertTrue(catalogLight0.isMovable());
      assertFalse(catalogLight0.isBackFaceShown());
      assertEquals((-694.0F), catalogLight0.getHeight(), 0.01F);
      assertEquals(583.2978F, catalogLight0.getWidth(), 0.01F);
      assertNull(catalogLight0.getCurrency());
      assertNull(catalogLight0.getCreationDate());
      assertEquals("h&*+\"", catalogLight0.getId());
      assertEquals("h&*+\"", catalogLight0.getCreator());
      assertEquals("h&*+\"", catalogLight0.getDescription());
      assertEquals((-694.0F), catalogLight0.getElevation(), 0.01F);
      assertNull(catalogLight0.getColor());
      assertFalse(catalogLight0.isModifiable());
      assertTrue(catalogLight0.isProportional());
      assertFalse(catalogLight0.isDoorOrWindow());
      assertNull(catalogLight0.getGrade());
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertTrue(catalogLight0.isTexturable());
      assertEquals("h&*+\"", homeLight0.getName());
      assertEquals(291.6489F, homeLight0.getX(), 0.01F);
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals("h&*+\"", homeLight0.getDescription());
      assertTrue(homeLight0.isMovable());
      assertEquals((-694.0F), homeLight0.getElevation(), 0.01F);
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals((-694.0F), homeLight0.getHeight(), 0.01F);
      assertEquals("h&*+\"", homeLight0.getCatalogId());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertEquals(5.741802F, homeLight0.getNameAngle(), 0.01F);
      assertNull(homeLight0.getColor());
      assertFalse(homeLight0.isModelMirrored());
      assertFalse(homeLight0.isDoorOrWindow());
      assertFalse(homeLight0.isBackFaceShown());
      assertNull(homeLight0.getCurrency());
      assertTrue(homeLight0.isTexturable());
      assertFalse(homeLight0.isNameVisible());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertEquals(583.2978F, homeLight0.getDepth(), 0.01F);
      assertEquals(583.2978F, homeLight0.getWidth(), 0.01F);
      assertEquals((-694.0F), homeLight0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertNull(homeLight0.getShininess());
      assertTrue(homeLight0.isVisible());
      assertEquals(291.6489F, homeLight0.getY(), 0.01F);
      assertTrue(homeLight0.isResizable());
      assertTrue(homeLight0.isDeformable());
      assertEquals(10, lightSourceArray0.length);
      assertNotSame(catalogLight0, catalogLight1);
      
      homeLight0.setVisible(true);
      assertFalse(catalogLight0.equals((Object)catalogLight1));
      assertEquals((byte)10, bigDecimal0.byteValue());
      assertEquals((short)10, bigDecimal0.shortValue());
      assertNull(catalogLight0.getInformation());
      assertTrue(catalogLight0.isDeformable());
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertTrue(catalogLight0.isResizable());
      assertEquals(583.2978F, catalogLight0.getDepth(), 0.01F);
      assertEquals("h&*+\"", catalogLight0.getName());
      assertTrue(catalogLight0.isMovable());
      assertFalse(catalogLight0.isBackFaceShown());
      assertEquals((-694.0F), catalogLight0.getHeight(), 0.01F);
      assertEquals(583.2978F, catalogLight0.getWidth(), 0.01F);
      assertNull(catalogLight0.getCurrency());
      assertNull(catalogLight0.getCreationDate());
      assertEquals("h&*+\"", catalogLight0.getId());
      assertEquals("h&*+\"", catalogLight0.getCreator());
      assertEquals("h&*+\"", catalogLight0.getDescription());
      assertEquals((-694.0F), catalogLight0.getElevation(), 0.01F);
      assertNull(catalogLight0.getColor());
      assertFalse(catalogLight0.isModifiable());
      assertTrue(catalogLight0.isProportional());
      assertFalse(catalogLight0.isDoorOrWindow());
      assertNull(catalogLight0.getGrade());
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertTrue(catalogLight0.isTexturable());
      assertEquals("h&*+\"", homeLight0.getName());
      assertEquals(291.6489F, homeLight0.getX(), 0.01F);
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals("h&*+\"", homeLight0.getDescription());
      assertTrue(homeLight0.isMovable());
      assertEquals((-694.0F), homeLight0.getElevation(), 0.01F);
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals((-694.0F), homeLight0.getHeight(), 0.01F);
      assertEquals("h&*+\"", homeLight0.getCatalogId());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertEquals(5.741802F, homeLight0.getNameAngle(), 0.01F);
      assertNull(homeLight0.getColor());
      assertFalse(homeLight0.isModelMirrored());
      assertFalse(homeLight0.isDoorOrWindow());
      assertFalse(homeLight0.isBackFaceShown());
      assertNull(homeLight0.getCurrency());
      assertTrue(homeLight0.isTexturable());
      assertFalse(homeLight0.isNameVisible());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertEquals(583.2978F, homeLight0.getDepth(), 0.01F);
      assertEquals(583.2978F, homeLight0.getWidth(), 0.01F);
      assertEquals((-694.0F), homeLight0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertNull(homeLight0.getShininess());
      assertTrue(homeLight0.isVisible());
      assertEquals(291.6489F, homeLight0.getY(), 0.01F);
      assertTrue(homeLight0.isResizable());
      assertTrue(homeLight0.isDeformable());
      assertEquals(10, lightSourceArray0.length);
      assertNotSame(catalogLight0, catalogLight1);
      
      homeLight0.setNameAngle(583.2978F);
      assertFalse(catalogLight0.equals((Object)catalogLight1));
      assertEquals((byte)10, bigDecimal0.byteValue());
      assertEquals((short)10, bigDecimal0.shortValue());
      assertNull(catalogLight0.getInformation());
      assertTrue(catalogLight0.isDeformable());
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertTrue(catalogLight0.isResizable());
      assertEquals(583.2978F, catalogLight0.getDepth(), 0.01F);
      assertEquals("h&*+\"", catalogLight0.getName());
      assertTrue(catalogLight0.isMovable());
      assertFalse(catalogLight0.isBackFaceShown());
      assertEquals((-694.0F), catalogLight0.getHeight(), 0.01F);
      assertEquals(583.2978F, catalogLight0.getWidth(), 0.01F);
      assertNull(catalogLight0.getCurrency());
      assertNull(catalogLight0.getCreationDate());
      assertEquals("h&*+\"", catalogLight0.getId());
      assertEquals("h&*+\"", catalogLight0.getCreator());
      assertEquals("h&*+\"", catalogLight0.getDescription());
      assertEquals((-694.0F), catalogLight0.getElevation(), 0.01F);
      assertNull(catalogLight0.getColor());
      assertFalse(catalogLight0.isModifiable());
      assertTrue(catalogLight0.isProportional());
      assertFalse(catalogLight0.isDoorOrWindow());
      assertNull(catalogLight0.getGrade());
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertTrue(catalogLight0.isTexturable());
      assertEquals("h&*+\"", homeLight0.getName());
      assertEquals(291.6489F, homeLight0.getX(), 0.01F);
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals("h&*+\"", homeLight0.getDescription());
      assertTrue(homeLight0.isMovable());
      assertEquals((-694.0F), homeLight0.getElevation(), 0.01F);
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals((-694.0F), homeLight0.getHeight(), 0.01F);
      assertEquals("h&*+\"", homeLight0.getCatalogId());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertEquals(5.2447424F, homeLight0.getNameAngle(), 0.01F);
      assertNull(homeLight0.getColor());
      assertFalse(homeLight0.isModelMirrored());
      assertFalse(homeLight0.isDoorOrWindow());
      assertFalse(homeLight0.isBackFaceShown());
      assertNull(homeLight0.getCurrency());
      assertTrue(homeLight0.isTexturable());
      assertFalse(homeLight0.isNameVisible());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertEquals(583.2978F, homeLight0.getDepth(), 0.01F);
      assertEquals(583.2978F, homeLight0.getWidth(), 0.01F);
      assertEquals((-694.0F), homeLight0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertNull(homeLight0.getShininess());
      assertTrue(homeLight0.isVisible());
      assertEquals(291.6489F, homeLight0.getY(), 0.01F);
      assertTrue(homeLight0.isResizable());
      assertTrue(homeLight0.isDeformable());
      assertEquals(10, lightSourceArray0.length);
      assertNotSame(catalogLight0, catalogLight1);
      
      CatalogTexture catalogTexture0 = new CatalogTexture("editorSubFolder.Windows", (Content) null, (-2746.9963F), (-694.0F), true);
      assertEquals((-2746.9963F), catalogTexture0.getWidth(), 0.01F);
      assertTrue(catalogTexture0.isModifiable());
      assertEquals((-694.0F), catalogTexture0.getHeight(), 0.01F);
      assertEquals("editorSubFolder.Windows", catalogTexture0.getName());
      assertNull(catalogTexture0.getCreator());
      assertNull(catalogTexture0.getId());
      assertNotNull(catalogTexture0);
      
      HomeTexture homeTexture0 = new HomeTexture(catalogTexture0);
      assertEquals((-2746.9963F), catalogTexture0.getWidth(), 0.01F);
      assertTrue(catalogTexture0.isModifiable());
      assertEquals((-694.0F), catalogTexture0.getHeight(), 0.01F);
      assertEquals("editorSubFolder.Windows", catalogTexture0.getName());
      assertNull(catalogTexture0.getCreator());
      assertNull(catalogTexture0.getId());
      assertEquals((-694.0F), homeTexture0.getHeight(), 0.01F);
      assertTrue(homeTexture0.isLeftToRightOriented());
      assertEquals("editorSubFolder.Windows", homeTexture0.getName());
      assertEquals((-2746.9963F), homeTexture0.getWidth(), 0.01F);
      assertNotNull(homeTexture0);
      
      homeLight0.setTexture(homeTexture0);
      assertFalse(catalogLight0.equals((Object)catalogLight1));
      assertEquals((byte)10, bigDecimal0.byteValue());
      assertEquals((short)10, bigDecimal0.shortValue());
      assertNull(catalogLight0.getInformation());
      assertTrue(catalogLight0.isDeformable());
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertTrue(catalogLight0.isResizable());
      assertEquals(583.2978F, catalogLight0.getDepth(), 0.01F);
      assertEquals("h&*+\"", catalogLight0.getName());
      assertTrue(catalogLight0.isMovable());
      assertFalse(catalogLight0.isBackFaceShown());
      assertEquals((-694.0F), catalogLight0.getHeight(), 0.01F);
      assertEquals(583.2978F, catalogLight0.getWidth(), 0.01F);
      assertNull(catalogLight0.getCurrency());
      assertNull(catalogLight0.getCreationDate());
      assertEquals("h&*+\"", catalogLight0.getId());
      assertEquals("h&*+\"", catalogLight0.getCreator());
      assertEquals("h&*+\"", catalogLight0.getDescription());
      assertEquals((-694.0F), catalogLight0.getElevation(), 0.01F);
      assertNull(catalogLight0.getColor());
      assertFalse(catalogLight0.isModifiable());
      assertTrue(catalogLight0.isProportional());
      assertFalse(catalogLight0.isDoorOrWindow());
      assertNull(catalogLight0.getGrade());
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertTrue(catalogLight0.isTexturable());
      assertEquals("h&*+\"", homeLight0.getName());
      assertEquals(291.6489F, homeLight0.getX(), 0.01F);
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals("h&*+\"", homeLight0.getDescription());
      assertTrue(homeLight0.isMovable());
      assertEquals((-694.0F), homeLight0.getElevation(), 0.01F);
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals((-694.0F), homeLight0.getHeight(), 0.01F);
      assertEquals("h&*+\"", homeLight0.getCatalogId());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertEquals(5.2447424F, homeLight0.getNameAngle(), 0.01F);
      assertNull(homeLight0.getColor());
      assertFalse(homeLight0.isModelMirrored());
      assertFalse(homeLight0.isDoorOrWindow());
      assertFalse(homeLight0.isBackFaceShown());
      assertNull(homeLight0.getCurrency());
      assertTrue(homeLight0.isTexturable());
      assertFalse(homeLight0.isNameVisible());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertEquals(583.2978F, homeLight0.getDepth(), 0.01F);
      assertEquals(583.2978F, homeLight0.getWidth(), 0.01F);
      assertEquals((-694.0F), homeLight0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertNull(homeLight0.getShininess());
      assertTrue(homeLight0.isVisible());
      assertEquals(291.6489F, homeLight0.getY(), 0.01F);
      assertTrue(homeLight0.isResizable());
      assertTrue(homeLight0.isDeformable());
      assertEquals((-2746.9963F), catalogTexture0.getWidth(), 0.01F);
      assertTrue(catalogTexture0.isModifiable());
      assertEquals((-694.0F), catalogTexture0.getHeight(), 0.01F);
      assertEquals("editorSubFolder.Windows", catalogTexture0.getName());
      assertNull(catalogTexture0.getCreator());
      assertNull(catalogTexture0.getId());
      assertEquals((-694.0F), homeTexture0.getHeight(), 0.01F);
      assertTrue(homeTexture0.isLeftToRightOriented());
      assertEquals("editorSubFolder.Windows", homeTexture0.getName());
      assertEquals((-2746.9963F), homeTexture0.getWidth(), 0.01F);
      assertEquals(10, lightSourceArray0.length);
      assertNotSame(catalogLight0, catalogLight1);
      
      Float float0 = homeLight0.getShininess();
      assertFalse(catalogLight0.equals((Object)catalogLight1));
      assertEquals((byte)10, bigDecimal0.byteValue());
      assertEquals((short)10, bigDecimal0.shortValue());
      assertNull(catalogLight0.getInformation());
      assertTrue(catalogLight0.isDeformable());
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertTrue(catalogLight0.isResizable());
      assertEquals(583.2978F, catalogLight0.getDepth(), 0.01F);
      assertEquals("h&*+\"", catalogLight0.getName());
      assertTrue(catalogLight0.isMovable());
      assertFalse(catalogLight0.isBackFaceShown());
      assertEquals((-694.0F), catalogLight0.getHeight(), 0.01F);
      assertEquals(583.2978F, catalogLight0.getWidth(), 0.01F);
      assertNull(catalogLight0.getCurrency());
      assertNull(catalogLight0.getCreationDate());
      assertEquals("h&*+\"", catalogLight0.getId());
      assertEquals("h&*+\"", catalogLight0.getCreator());
      assertEquals("h&*+\"", catalogLight0.getDescription());
      assertEquals((-694.0F), catalogLight0.getElevation(), 0.01F);
      assertNull(catalogLight0.getColor());
      assertFalse(catalogLight0.isModifiable());
      assertTrue(catalogLight0.isProportional());
      assertFalse(catalogLight0.isDoorOrWindow());
      assertNull(catalogLight0.getGrade());
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertTrue(catalogLight0.isTexturable());
      assertEquals("h&*+\"", homeLight0.getName());
      assertEquals(291.6489F, homeLight0.getX(), 0.01F);
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals("h&*+\"", homeLight0.getDescription());
      assertTrue(homeLight0.isMovable());
      assertEquals((-694.0F), homeLight0.getElevation(), 0.01F);
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals((-694.0F), homeLight0.getHeight(), 0.01F);
      assertEquals("h&*+\"", homeLight0.getCatalogId());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertEquals(5.2447424F, homeLight0.getNameAngle(), 0.01F);
      assertNull(homeLight0.getColor());
      assertFalse(homeLight0.isModelMirrored());
      assertFalse(homeLight0.isDoorOrWindow());
      assertFalse(homeLight0.isBackFaceShown());
      assertNull(homeLight0.getCurrency());
      assertTrue(homeLight0.isTexturable());
      assertFalse(homeLight0.isNameVisible());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertEquals(583.2978F, homeLight0.getDepth(), 0.01F);
      assertEquals(583.2978F, homeLight0.getWidth(), 0.01F);
      assertEquals((-694.0F), homeLight0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertNull(homeLight0.getShininess());
      assertTrue(homeLight0.isVisible());
      assertEquals(291.6489F, homeLight0.getY(), 0.01F);
      assertTrue(homeLight0.isResizable());
      assertTrue(homeLight0.isDeformable());
      assertEquals(10, lightSourceArray0.length);
      assertNotSame(catalogLight0, catalogLight1);
      assertNull(float0);
  }

  @Test(timeout = 4000)
  public void test232()  throws Throwable  {
      LightSource[] lightSourceArray0 = new LightSource[2];
      LightSource lightSource0 = new LightSource((-813.1042F), 0.0F, 0.0F, Integer.MAX_VALUE);
      assertEquals(Integer.MAX_VALUE, lightSource0.getColor());
      assertEquals(0.0F, lightSource0.getY(), 0.01F);
      assertEquals((-813.1042F), lightSource0.getX(), 0.01F);
      assertNull(lightSource0.getDiameter());
      assertEquals(0.0F, lightSource0.getZ(), 0.01F);
      assertNotNull(lightSource0);
      
      lightSourceArray0[0] = lightSource0;
      LightSource lightSource1 = new LightSource(Integer.MAX_VALUE, (-2278.261F), (-694.0F), 8192);
      assertFalse(lightSource1.equals((Object)lightSource0));
      assertEquals((-694.0F), lightSource1.getZ(), 0.01F);
      assertEquals(2.14748365E9F, lightSource1.getX(), 0.01F);
      assertNull(lightSource1.getDiameter());
      assertEquals(8192, lightSource1.getColor());
      assertEquals((-2278.261F), lightSource1.getY(), 0.01F);
      assertNotNull(lightSource1);
      
      BigDecimal bigDecimal0 = BigDecimal.TEN;
      assertEquals((byte)10, bigDecimal0.byteValue());
      assertEquals((short)10, bigDecimal0.shortValue());
      assertNotNull(bigDecimal0);
      
      CatalogLight catalogLight0 = new CatalogLight("/", "PRICE_VALUE_ADDED_TAX_INCLUDED", "PRICE_VALUE_ADDED_TAX_INCLUDED", (Content) null, (Content) null, 23.119429F, 114.0F, 233.10785F, (-694.0F), true, lightSourceArray0, (float[][]) null, "{L", true, bigDecimal0, bigDecimal0);
      assertEquals((byte)10, bigDecimal0.byteValue());
      assertEquals((short)10, bigDecimal0.shortValue());
      assertNull(catalogLight0.getInformation());
      assertTrue(catalogLight0.isDeformable());
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertTrue(catalogLight0.isResizable());
      assertEquals("/", catalogLight0.getId());
      assertTrue(catalogLight0.isMovable());
      assertEquals(114.0F, catalogLight0.getDepth(), 0.01F);
      assertNull(catalogLight0.getGrade());
      assertNull(catalogLight0.getCurrency());
      assertFalse(catalogLight0.isDoorOrWindow());
      assertNull(catalogLight0.getColor());
      assertFalse(catalogLight0.isBackFaceShown());
      assertEquals("PRICE_VALUE_ADDED_TAX_INCLUDED", catalogLight0.getName());
      assertEquals(233.10785F, catalogLight0.getHeight(), 0.01F);
      assertEquals(23.119429F, catalogLight0.getWidth(), 0.01F);
      assertEquals("{L", catalogLight0.getCreator());
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertEquals((-694.0F), catalogLight0.getElevation(), 0.01F);
      assertTrue(catalogLight0.isTexturable());
      assertTrue(catalogLight0.isProportional());
      assertNull(catalogLight0.getCreationDate());
      assertEquals("PRICE_VALUE_ADDED_TAX_INCLUDED", catalogLight0.getDescription());
      assertFalse(catalogLight0.isModifiable());
      assertEquals(2, lightSourceArray0.length);
      assertNotNull(catalogLight0);
      
      HomeLight homeLight0 = new HomeLight(catalogLight0);
      assertEquals((byte)10, bigDecimal0.byteValue());
      assertEquals((short)10, bigDecimal0.shortValue());
      assertNull(catalogLight0.getInformation());
      assertTrue(catalogLight0.isDeformable());
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertTrue(catalogLight0.isResizable());
      assertEquals("/", catalogLight0.getId());
      assertTrue(catalogLight0.isMovable());
      assertEquals(114.0F, catalogLight0.getDepth(), 0.01F);
      assertNull(catalogLight0.getGrade());
      assertNull(catalogLight0.getCurrency());
      assertFalse(catalogLight0.isDoorOrWindow());
      assertNull(catalogLight0.getColor());
      assertFalse(catalogLight0.isBackFaceShown());
      assertEquals("PRICE_VALUE_ADDED_TAX_INCLUDED", catalogLight0.getName());
      assertEquals(233.10785F, catalogLight0.getHeight(), 0.01F);
      assertEquals(23.119429F, catalogLight0.getWidth(), 0.01F);
      assertEquals("{L", catalogLight0.getCreator());
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertEquals((-694.0F), catalogLight0.getElevation(), 0.01F);
      assertTrue(catalogLight0.isTexturable());
      assertTrue(catalogLight0.isProportional());
      assertNull(catalogLight0.getCreationDate());
      assertEquals("PRICE_VALUE_ADDED_TAX_INCLUDED", catalogLight0.getDescription());
      assertFalse(catalogLight0.isModifiable());
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals((-694.0F), homeLight0.getElevation(), 0.01F);
      assertEquals(23.119429F, homeLight0.getWidth(), 0.01F);
      assertEquals("PRICE_VALUE_ADDED_TAX_INCLUDED", homeLight0.getDescription());
      assertEquals((-694.0F), homeLight0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertTrue(homeLight0.isResizable());
      assertEquals(57.0F, homeLight0.getY(), 0.01F);
      assertTrue(homeLight0.isMovable());
      assertNull(homeLight0.getShininess());
      assertEquals("PRICE_VALUE_ADDED_TAX_INCLUDED", homeLight0.getName());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals(11.559714F, homeLight0.getX(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertTrue(homeLight0.isVisible());
      assertNull(homeLight0.getCurrency());
      assertEquals(114.0F, homeLight0.getDepth(), 0.01F);
      assertNull(homeLight0.getColor());
      assertTrue(homeLight0.isDeformable());
      assertFalse(homeLight0.isDoorOrWindow());
      assertTrue(homeLight0.isTexturable());
      assertFalse(homeLight0.isModelMirrored());
      assertEquals(233.10785F, homeLight0.getHeight(), 0.01F);
      assertFalse(homeLight0.isBackFaceShown());
      assertFalse(homeLight0.isNameVisible());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertEquals("/", homeLight0.getCatalogId());
      assertEquals(2, lightSourceArray0.length);
      assertNotNull(homeLight0);
      
      homeLight0.setModelMirrored(false);
      assertEquals((byte)10, bigDecimal0.byteValue());
      assertEquals((short)10, bigDecimal0.shortValue());
      assertNull(catalogLight0.getInformation());
      assertTrue(catalogLight0.isDeformable());
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertTrue(catalogLight0.isResizable());
      assertEquals("/", catalogLight0.getId());
      assertTrue(catalogLight0.isMovable());
      assertEquals(114.0F, catalogLight0.getDepth(), 0.01F);
      assertNull(catalogLight0.getGrade());
      assertNull(catalogLight0.getCurrency());
      assertFalse(catalogLight0.isDoorOrWindow());
      assertNull(catalogLight0.getColor());
      assertFalse(catalogLight0.isBackFaceShown());
      assertEquals("PRICE_VALUE_ADDED_TAX_INCLUDED", catalogLight0.getName());
      assertEquals(233.10785F, catalogLight0.getHeight(), 0.01F);
      assertEquals(23.119429F, catalogLight0.getWidth(), 0.01F);
      assertEquals("{L", catalogLight0.getCreator());
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertEquals((-694.0F), catalogLight0.getElevation(), 0.01F);
      assertTrue(catalogLight0.isTexturable());
      assertTrue(catalogLight0.isProportional());
      assertNull(catalogLight0.getCreationDate());
      assertEquals("PRICE_VALUE_ADDED_TAX_INCLUDED", catalogLight0.getDescription());
      assertFalse(catalogLight0.isModifiable());
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals((-694.0F), homeLight0.getElevation(), 0.01F);
      assertEquals(23.119429F, homeLight0.getWidth(), 0.01F);
      assertEquals("PRICE_VALUE_ADDED_TAX_INCLUDED", homeLight0.getDescription());
      assertEquals((-694.0F), homeLight0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertTrue(homeLight0.isResizable());
      assertEquals(57.0F, homeLight0.getY(), 0.01F);
      assertTrue(homeLight0.isMovable());
      assertNull(homeLight0.getShininess());
      assertEquals("PRICE_VALUE_ADDED_TAX_INCLUDED", homeLight0.getName());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals(11.559714F, homeLight0.getX(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertTrue(homeLight0.isVisible());
      assertNull(homeLight0.getCurrency());
      assertEquals(114.0F, homeLight0.getDepth(), 0.01F);
      assertNull(homeLight0.getColor());
      assertTrue(homeLight0.isDeformable());
      assertFalse(homeLight0.isDoorOrWindow());
      assertTrue(homeLight0.isTexturable());
      assertFalse(homeLight0.isModelMirrored());
      assertEquals(233.10785F, homeLight0.getHeight(), 0.01F);
      assertFalse(homeLight0.isBackFaceShown());
      assertFalse(homeLight0.isNameVisible());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertEquals("/", homeLight0.getCatalogId());
      assertEquals(2, lightSourceArray0.length);
      
      homeLight0.setVisible(true);
      assertEquals((byte)10, bigDecimal0.byteValue());
      assertEquals((short)10, bigDecimal0.shortValue());
      assertNull(catalogLight0.getInformation());
      assertTrue(catalogLight0.isDeformable());
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertTrue(catalogLight0.isResizable());
      assertEquals("/", catalogLight0.getId());
      assertTrue(catalogLight0.isMovable());
      assertEquals(114.0F, catalogLight0.getDepth(), 0.01F);
      assertNull(catalogLight0.getGrade());
      assertNull(catalogLight0.getCurrency());
      assertFalse(catalogLight0.isDoorOrWindow());
      assertNull(catalogLight0.getColor());
      assertFalse(catalogLight0.isBackFaceShown());
      assertEquals("PRICE_VALUE_ADDED_TAX_INCLUDED", catalogLight0.getName());
      assertEquals(233.10785F, catalogLight0.getHeight(), 0.01F);
      assertEquals(23.119429F, catalogLight0.getWidth(), 0.01F);
      assertEquals("{L", catalogLight0.getCreator());
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertEquals((-694.0F), catalogLight0.getElevation(), 0.01F);
      assertTrue(catalogLight0.isTexturable());
      assertTrue(catalogLight0.isProportional());
      assertNull(catalogLight0.getCreationDate());
      assertEquals("PRICE_VALUE_ADDED_TAX_INCLUDED", catalogLight0.getDescription());
      assertFalse(catalogLight0.isModifiable());
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals((-694.0F), homeLight0.getElevation(), 0.01F);
      assertEquals(23.119429F, homeLight0.getWidth(), 0.01F);
      assertEquals("PRICE_VALUE_ADDED_TAX_INCLUDED", homeLight0.getDescription());
      assertEquals((-694.0F), homeLight0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertTrue(homeLight0.isResizable());
      assertEquals(57.0F, homeLight0.getY(), 0.01F);
      assertTrue(homeLight0.isMovable());
      assertNull(homeLight0.getShininess());
      assertEquals("PRICE_VALUE_ADDED_TAX_INCLUDED", homeLight0.getName());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals(11.559714F, homeLight0.getX(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertTrue(homeLight0.isVisible());
      assertNull(homeLight0.getCurrency());
      assertEquals(114.0F, homeLight0.getDepth(), 0.01F);
      assertNull(homeLight0.getColor());
      assertTrue(homeLight0.isDeformable());
      assertFalse(homeLight0.isDoorOrWindow());
      assertTrue(homeLight0.isTexturable());
      assertFalse(homeLight0.isModelMirrored());
      assertEquals(233.10785F, homeLight0.getHeight(), 0.01F);
      assertFalse(homeLight0.isBackFaceShown());
      assertFalse(homeLight0.isNameVisible());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertEquals("/", homeLight0.getCatalogId());
      assertEquals(2, lightSourceArray0.length);
      
      HomePieceOfFurniture.SortableProperty[] homePieceOfFurniture_SortablePropertyArray0 = HomePieceOfFurniture.SortableProperty.values();
      assertEquals(19, homePieceOfFurniture_SortablePropertyArray0.length);
      assertNotNull(homePieceOfFurniture_SortablePropertyArray0);
      
      boolean boolean0 = homeLight0.isMovable();
      assertEquals((byte)10, bigDecimal0.byteValue());
      assertEquals((short)10, bigDecimal0.shortValue());
      assertNull(catalogLight0.getInformation());
      assertTrue(catalogLight0.isDeformable());
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertTrue(catalogLight0.isResizable());
      assertEquals("/", catalogLight0.getId());
      assertTrue(catalogLight0.isMovable());
      assertEquals(114.0F, catalogLight0.getDepth(), 0.01F);
      assertNull(catalogLight0.getGrade());
      assertNull(catalogLight0.getCurrency());
      assertFalse(catalogLight0.isDoorOrWindow());
      assertNull(catalogLight0.getColor());
      assertFalse(catalogLight0.isBackFaceShown());
      assertEquals("PRICE_VALUE_ADDED_TAX_INCLUDED", catalogLight0.getName());
      assertEquals(233.10785F, catalogLight0.getHeight(), 0.01F);
      assertEquals(23.119429F, catalogLight0.getWidth(), 0.01F);
      assertEquals("{L", catalogLight0.getCreator());
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertEquals((-694.0F), catalogLight0.getElevation(), 0.01F);
      assertTrue(catalogLight0.isTexturable());
      assertTrue(catalogLight0.isProportional());
      assertNull(catalogLight0.getCreationDate());
      assertEquals("PRICE_VALUE_ADDED_TAX_INCLUDED", catalogLight0.getDescription());
      assertFalse(catalogLight0.isModifiable());
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals((-694.0F), homeLight0.getElevation(), 0.01F);
      assertEquals(23.119429F, homeLight0.getWidth(), 0.01F);
      assertEquals("PRICE_VALUE_ADDED_TAX_INCLUDED", homeLight0.getDescription());
      assertEquals((-694.0F), homeLight0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertTrue(homeLight0.isResizable());
      assertEquals(57.0F, homeLight0.getY(), 0.01F);
      assertTrue(homeLight0.isMovable());
      assertNull(homeLight0.getShininess());
      assertEquals("PRICE_VALUE_ADDED_TAX_INCLUDED", homeLight0.getName());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals(11.559714F, homeLight0.getX(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertTrue(homeLight0.isVisible());
      assertNull(homeLight0.getCurrency());
      assertEquals(114.0F, homeLight0.getDepth(), 0.01F);
      assertNull(homeLight0.getColor());
      assertTrue(homeLight0.isDeformable());
      assertFalse(homeLight0.isDoorOrWindow());
      assertTrue(homeLight0.isTexturable());
      assertFalse(homeLight0.isModelMirrored());
      assertEquals(233.10785F, homeLight0.getHeight(), 0.01F);
      assertFalse(homeLight0.isBackFaceShown());
      assertFalse(homeLight0.isNameVisible());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertEquals("/", homeLight0.getCatalogId());
      assertEquals(2, lightSourceArray0.length);
      assertTrue(boolean0);
      
      float float0 = homeLight0.getHeight();
      assertEquals((byte)10, bigDecimal0.byteValue());
      assertEquals((short)10, bigDecimal0.shortValue());
      assertNull(catalogLight0.getInformation());
      assertTrue(catalogLight0.isDeformable());
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertTrue(catalogLight0.isResizable());
      assertEquals("/", catalogLight0.getId());
      assertTrue(catalogLight0.isMovable());
      assertEquals(114.0F, catalogLight0.getDepth(), 0.01F);
      assertNull(catalogLight0.getGrade());
      assertNull(catalogLight0.getCurrency());
      assertFalse(catalogLight0.isDoorOrWindow());
      assertNull(catalogLight0.getColor());
      assertFalse(catalogLight0.isBackFaceShown());
      assertEquals("PRICE_VALUE_ADDED_TAX_INCLUDED", catalogLight0.getName());
      assertEquals(233.10785F, catalogLight0.getHeight(), 0.01F);
      assertEquals(23.119429F, catalogLight0.getWidth(), 0.01F);
      assertEquals("{L", catalogLight0.getCreator());
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertEquals((-694.0F), catalogLight0.getElevation(), 0.01F);
      assertTrue(catalogLight0.isTexturable());
      assertTrue(catalogLight0.isProportional());
      assertNull(catalogLight0.getCreationDate());
      assertEquals("PRICE_VALUE_ADDED_TAX_INCLUDED", catalogLight0.getDescription());
      assertFalse(catalogLight0.isModifiable());
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals((-694.0F), homeLight0.getElevation(), 0.01F);
      assertEquals(23.119429F, homeLight0.getWidth(), 0.01F);
      assertEquals("PRICE_VALUE_ADDED_TAX_INCLUDED", homeLight0.getDescription());
      assertEquals((-694.0F), homeLight0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertTrue(homeLight0.isResizable());
      assertEquals(57.0F, homeLight0.getY(), 0.01F);
      assertTrue(homeLight0.isMovable());
      assertNull(homeLight0.getShininess());
      assertEquals("PRICE_VALUE_ADDED_TAX_INCLUDED", homeLight0.getName());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals(11.559714F, homeLight0.getX(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertTrue(homeLight0.isVisible());
      assertNull(homeLight0.getCurrency());
      assertEquals(114.0F, homeLight0.getDepth(), 0.01F);
      assertNull(homeLight0.getColor());
      assertTrue(homeLight0.isDeformable());
      assertFalse(homeLight0.isDoorOrWindow());
      assertTrue(homeLight0.isTexturable());
      assertFalse(homeLight0.isModelMirrored());
      assertEquals(233.10785F, homeLight0.getHeight(), 0.01F);
      assertFalse(homeLight0.isBackFaceShown());
      assertFalse(homeLight0.isNameVisible());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertEquals("/", homeLight0.getCatalogId());
      assertEquals(2, lightSourceArray0.length);
      assertEquals(233.10785F, float0, 0.01F);
      
      homeLight0.setHeight(0.0F);
      assertEquals((byte)10, bigDecimal0.byteValue());
      assertEquals((short)10, bigDecimal0.shortValue());
      assertNull(catalogLight0.getInformation());
      assertTrue(catalogLight0.isDeformable());
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertTrue(catalogLight0.isResizable());
      assertEquals("/", catalogLight0.getId());
      assertTrue(catalogLight0.isMovable());
      assertEquals(114.0F, catalogLight0.getDepth(), 0.01F);
      assertNull(catalogLight0.getGrade());
      assertNull(catalogLight0.getCurrency());
      assertFalse(catalogLight0.isDoorOrWindow());
      assertNull(catalogLight0.getColor());
      assertFalse(catalogLight0.isBackFaceShown());
      assertEquals("PRICE_VALUE_ADDED_TAX_INCLUDED", catalogLight0.getName());
      assertEquals(233.10785F, catalogLight0.getHeight(), 0.01F);
      assertEquals(23.119429F, catalogLight0.getWidth(), 0.01F);
      assertEquals("{L", catalogLight0.getCreator());
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertEquals((-694.0F), catalogLight0.getElevation(), 0.01F);
      assertTrue(catalogLight0.isTexturable());
      assertTrue(catalogLight0.isProportional());
      assertNull(catalogLight0.getCreationDate());
      assertEquals("PRICE_VALUE_ADDED_TAX_INCLUDED", catalogLight0.getDescription());
      assertFalse(catalogLight0.isModifiable());
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals((-694.0F), homeLight0.getElevation(), 0.01F);
      assertEquals(23.119429F, homeLight0.getWidth(), 0.01F);
      assertEquals("PRICE_VALUE_ADDED_TAX_INCLUDED", homeLight0.getDescription());
      assertEquals((-694.0F), homeLight0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertTrue(homeLight0.isResizable());
      assertEquals(57.0F, homeLight0.getY(), 0.01F);
      assertTrue(homeLight0.isMovable());
      assertNull(homeLight0.getShininess());
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertEquals("PRICE_VALUE_ADDED_TAX_INCLUDED", homeLight0.getName());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals(11.559714F, homeLight0.getX(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertTrue(homeLight0.isVisible());
      assertNull(homeLight0.getCurrency());
      assertEquals(114.0F, homeLight0.getDepth(), 0.01F);
      assertNull(homeLight0.getColor());
      assertTrue(homeLight0.isDeformable());
      assertFalse(homeLight0.isDoorOrWindow());
      assertTrue(homeLight0.isTexturable());
      assertFalse(homeLight0.isModelMirrored());
      assertFalse(homeLight0.isBackFaceShown());
      assertFalse(homeLight0.isNameVisible());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertEquals("/", homeLight0.getCatalogId());
      assertEquals(2, lightSourceArray0.length);
      
      boolean boolean1 = homeLight0.isNameCenterPointAt(82.71662F, 114.0F, (-852.8F));
      assertFalse(boolean1 == boolean0);
      assertEquals((byte)10, bigDecimal0.byteValue());
      assertEquals((short)10, bigDecimal0.shortValue());
      assertNull(catalogLight0.getInformation());
      assertTrue(catalogLight0.isDeformable());
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertTrue(catalogLight0.isResizable());
      assertEquals("/", catalogLight0.getId());
      assertTrue(catalogLight0.isMovable());
      assertEquals(114.0F, catalogLight0.getDepth(), 0.01F);
      assertNull(catalogLight0.getGrade());
      assertNull(catalogLight0.getCurrency());
      assertFalse(catalogLight0.isDoorOrWindow());
      assertNull(catalogLight0.getColor());
      assertFalse(catalogLight0.isBackFaceShown());
      assertEquals("PRICE_VALUE_ADDED_TAX_INCLUDED", catalogLight0.getName());
      assertEquals(233.10785F, catalogLight0.getHeight(), 0.01F);
      assertEquals(23.119429F, catalogLight0.getWidth(), 0.01F);
      assertEquals("{L", catalogLight0.getCreator());
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertEquals((-694.0F), catalogLight0.getElevation(), 0.01F);
      assertTrue(catalogLight0.isTexturable());
      assertTrue(catalogLight0.isProportional());
      assertNull(catalogLight0.getCreationDate());
      assertEquals("PRICE_VALUE_ADDED_TAX_INCLUDED", catalogLight0.getDescription());
      assertFalse(catalogLight0.isModifiable());
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals((-694.0F), homeLight0.getElevation(), 0.01F);
      assertEquals(23.119429F, homeLight0.getWidth(), 0.01F);
      assertEquals("PRICE_VALUE_ADDED_TAX_INCLUDED", homeLight0.getDescription());
      assertEquals((-694.0F), homeLight0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertTrue(homeLight0.isResizable());
      assertEquals(57.0F, homeLight0.getY(), 0.01F);
      assertTrue(homeLight0.isMovable());
      assertNull(homeLight0.getShininess());
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertEquals("PRICE_VALUE_ADDED_TAX_INCLUDED", homeLight0.getName());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals(11.559714F, homeLight0.getX(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertTrue(homeLight0.isVisible());
      assertNull(homeLight0.getCurrency());
      assertEquals(114.0F, homeLight0.getDepth(), 0.01F);
      assertNull(homeLight0.getColor());
      assertTrue(homeLight0.isDeformable());
      assertFalse(homeLight0.isDoorOrWindow());
      assertTrue(homeLight0.isTexturable());
      assertFalse(homeLight0.isModelMirrored());
      assertFalse(homeLight0.isBackFaceShown());
      assertFalse(homeLight0.isNameVisible());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertEquals("/", homeLight0.getCatalogId());
      assertEquals(2, lightSourceArray0.length);
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test233()  throws Throwable  {
      LightSource[] lightSourceArray0 = new LightSource[2];
      LightSource lightSource0 = new LightSource((-815.0F), 0.0F, 0.0F, 114);
      assertNull(lightSource0.getDiameter());
      assertEquals(0.0F, lightSource0.getZ(), 0.01F);
      assertEquals(114, lightSource0.getColor());
      assertEquals((-815.0F), lightSource0.getX(), 0.01F);
      assertEquals(0.0F, lightSource0.getY(), 0.01F);
      assertNotNull(lightSource0);
      
      lightSourceArray0[0] = lightSource0;
      LightSource lightSource1 = new LightSource((-694.0F), 2965.994F, (-127.62969F), 114);
      assertFalse(lightSource1.equals((Object)lightSource0));
      assertEquals((-694.0F), lightSource1.getX(), 0.01F);
      assertNull(lightSource1.getDiameter());
      assertEquals((-127.62969F), lightSource1.getZ(), 0.01F);
      assertEquals(2965.994F, lightSource1.getY(), 0.01F);
      assertEquals(114, lightSource1.getColor());
      assertNotNull(lightSource1);
      
      BigDecimal bigDecimal0 = BigDecimal.TEN;
      assertEquals((short)10, bigDecimal0.shortValue());
      assertEquals((byte)10, bigDecimal0.byteValue());
      assertNotNull(bigDecimal0);
      
      CatalogLight catalogLight0 = new CatalogLight("h&*+\"", "h&*+\"", "h&*+\"", (Content) null, (Content) null, (-815.0F), 0.3926991F, (-694.0F), (-694.0F), true, lightSourceArray0, (float[][]) null, "h&*+\"", true, bigDecimal0, bigDecimal0);
      assertEquals((short)10, bigDecimal0.shortValue());
      assertEquals((byte)10, bigDecimal0.byteValue());
      assertNull(catalogLight0.getCreationDate());
      assertFalse(catalogLight0.isModifiable());
      assertTrue(catalogLight0.isResizable());
      assertEquals((-694.0F), catalogLight0.getHeight(), 0.01F);
      assertEquals(0.3926991F, catalogLight0.getDepth(), 0.01F);
      assertNull(catalogLight0.getGrade());
      assertNull(catalogLight0.getCurrency());
      assertTrue(catalogLight0.isProportional());
      assertEquals("h&*+\"", catalogLight0.getName());
      assertFalse(catalogLight0.isDoorOrWindow());
      assertEquals("h&*+\"", catalogLight0.getCreator());
      assertEquals("h&*+\"", catalogLight0.getDescription());
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertEquals((-694.0F), catalogLight0.getElevation(), 0.01F);
      assertEquals((-815.0F), catalogLight0.getWidth(), 0.01F);
      assertTrue(catalogLight0.isTexturable());
      assertFalse(catalogLight0.isBackFaceShown());
      assertTrue(catalogLight0.isMovable());
      assertEquals("h&*+\"", catalogLight0.getId());
      assertNull(catalogLight0.getColor());
      assertNull(catalogLight0.getInformation());
      assertTrue(catalogLight0.isDeformable());
      assertEquals(2, lightSourceArray0.length);
      assertNotNull(catalogLight0);
      
      HomeLight homeLight0 = new HomeLight(catalogLight0);
      assertEquals((short)10, bigDecimal0.shortValue());
      assertEquals((byte)10, bigDecimal0.byteValue());
      assertNull(catalogLight0.getCreationDate());
      assertFalse(catalogLight0.isModifiable());
      assertTrue(catalogLight0.isResizable());
      assertEquals((-694.0F), catalogLight0.getHeight(), 0.01F);
      assertEquals(0.3926991F, catalogLight0.getDepth(), 0.01F);
      assertNull(catalogLight0.getGrade());
      assertNull(catalogLight0.getCurrency());
      assertTrue(catalogLight0.isProportional());
      assertEquals("h&*+\"", catalogLight0.getName());
      assertFalse(catalogLight0.isDoorOrWindow());
      assertEquals("h&*+\"", catalogLight0.getCreator());
      assertEquals("h&*+\"", catalogLight0.getDescription());
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertEquals((-694.0F), catalogLight0.getElevation(), 0.01F);
      assertEquals((-815.0F), catalogLight0.getWidth(), 0.01F);
      assertTrue(catalogLight0.isTexturable());
      assertFalse(catalogLight0.isBackFaceShown());
      assertTrue(catalogLight0.isMovable());
      assertEquals("h&*+\"", catalogLight0.getId());
      assertNull(catalogLight0.getColor());
      assertNull(catalogLight0.getInformation());
      assertTrue(catalogLight0.isDeformable());
      assertNull(homeLight0.getColor());
      assertFalse(homeLight0.isBackFaceShown());
      assertFalse(homeLight0.isNameVisible());
      assertNull(homeLight0.getCurrency());
      assertTrue(homeLight0.isTexturable());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      assertEquals((-694.0F), homeLight0.getHeight(), 0.01F);
      assertEquals((-407.5F), homeLight0.getX(), 0.01F);
      assertTrue(homeLight0.isDeformable());
      assertEquals((-694.0F), homeLight0.getGroundElevation(), 0.01F);
      assertTrue(homeLight0.isVisible());
      assertNull(homeLight0.getShininess());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals((-815.0F), homeLight0.getWidth(), 0.01F);
      assertEquals("h&*+\"", homeLight0.getName());
      assertTrue(homeLight0.isResizable());
      assertTrue(homeLight0.isMovable());
      assertEquals(0.19634955F, homeLight0.getY(), 0.01F);
      assertEquals("h&*+\"", homeLight0.getCatalogId());
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals((-694.0F), homeLight0.getElevation(), 0.01F);
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals("h&*+\"", homeLight0.getDescription());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertEquals(0.3926991F, homeLight0.getDepth(), 0.01F);
      assertFalse(homeLight0.isModelMirrored());
      assertEquals(2, lightSourceArray0.length);
      assertNotNull(homeLight0);
      
      HomeLight homeLight1 = homeLight0.clone();
      assertFalse(homeLight1.equals((Object)homeLight0));
      assertEquals((short)10, bigDecimal0.shortValue());
      assertEquals((byte)10, bigDecimal0.byteValue());
      assertNull(catalogLight0.getCreationDate());
      assertFalse(catalogLight0.isModifiable());
      assertTrue(catalogLight0.isResizable());
      assertEquals((-694.0F), catalogLight0.getHeight(), 0.01F);
      assertEquals(0.3926991F, catalogLight0.getDepth(), 0.01F);
      assertNull(catalogLight0.getGrade());
      assertNull(catalogLight0.getCurrency());
      assertTrue(catalogLight0.isProportional());
      assertEquals("h&*+\"", catalogLight0.getName());
      assertFalse(catalogLight0.isDoorOrWindow());
      assertEquals("h&*+\"", catalogLight0.getCreator());
      assertEquals("h&*+\"", catalogLight0.getDescription());
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertEquals((-694.0F), catalogLight0.getElevation(), 0.01F);
      assertEquals((-815.0F), catalogLight0.getWidth(), 0.01F);
      assertTrue(catalogLight0.isTexturable());
      assertFalse(catalogLight0.isBackFaceShown());
      assertTrue(catalogLight0.isMovable());
      assertEquals("h&*+\"", catalogLight0.getId());
      assertNull(catalogLight0.getColor());
      assertNull(catalogLight0.getInformation());
      assertTrue(catalogLight0.isDeformable());
      assertNull(homeLight0.getColor());
      assertFalse(homeLight0.isBackFaceShown());
      assertFalse(homeLight0.isNameVisible());
      assertNull(homeLight0.getCurrency());
      assertTrue(homeLight0.isTexturable());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      assertEquals((-694.0F), homeLight0.getHeight(), 0.01F);
      assertEquals((-407.5F), homeLight0.getX(), 0.01F);
      assertTrue(homeLight0.isDeformable());
      assertEquals((-694.0F), homeLight0.getGroundElevation(), 0.01F);
      assertTrue(homeLight0.isVisible());
      assertNull(homeLight0.getShininess());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals((-815.0F), homeLight0.getWidth(), 0.01F);
      assertEquals("h&*+\"", homeLight0.getName());
      assertTrue(homeLight0.isResizable());
      assertTrue(homeLight0.isMovable());
      assertEquals(0.19634955F, homeLight0.getY(), 0.01F);
      assertEquals("h&*+\"", homeLight0.getCatalogId());
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals((-694.0F), homeLight0.getElevation(), 0.01F);
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals("h&*+\"", homeLight0.getDescription());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertEquals(0.3926991F, homeLight0.getDepth(), 0.01F);
      assertFalse(homeLight0.isModelMirrored());
      assertFalse(homeLight1.isModelMirrored());
      assertFalse(homeLight1.isDoorOrWindow());
      assertTrue(homeLight1.isDeformable());
      assertNull(homeLight1.getColor());
      assertEquals((-694.0F), homeLight1.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight1.getNameYOffset(), 0.01F);
      assertEquals(0.3926991F, homeLight1.getDepth(), 0.01F);
      assertEquals(0.0F, homeLight1.getAngle(), 0.01F);
      assertTrue(homeLight1.isTexturable());
      assertEquals((-694.0F), homeLight1.getElevation(), 0.01F);
      assertFalse(homeLight1.isBackFaceShown());
      assertFalse(homeLight1.isNameVisible());
      assertEquals("h&*+\"", homeLight1.getName());
      assertEquals(0.0F, homeLight1.getNameAngle(), 0.01F);
      assertEquals((-815.0F), homeLight1.getWidth(), 0.01F);
      assertTrue(homeLight1.isResizable());
      assertEquals(0.5F, homeLight1.getPower(), 0.01F);
      assertNull(homeLight1.getShininess());
      assertEquals("h&*+\"", homeLight1.getDescription());
      assertNull(homeLight1.getStaircaseCutOutShape());
      assertEquals(0.19634955F, homeLight1.getY(), 0.01F);
      assertEquals(0.0F, homeLight1.getNameXOffset(), 0.01F);
      assertEquals("h&*+\"", homeLight1.getCatalogId());
      assertEquals((-694.0F), homeLight1.getHeight(), 0.01F);
      assertTrue(homeLight1.isVisible());
      assertNull(homeLight1.getCurrency());
      assertEquals((-407.5F), homeLight1.getX(), 0.01F);
      assertTrue(homeLight1.isMovable());
      assertEquals(2, lightSourceArray0.length);
      assertNotSame(homeLight0, homeLight1);
      assertNotSame(homeLight1, homeLight0);
      assertNotNull(homeLight1);
      
      HomeLight homeLight2 = (HomeLight)homeLight1.clone();
      assertFalse(homeLight0.equals((Object)homeLight1));
      assertFalse(homeLight1.equals((Object)homeLight0));
      assertFalse(homeLight2.equals((Object)homeLight0));
      assertFalse(homeLight2.equals((Object)homeLight1));
      assertEquals((short)10, bigDecimal0.shortValue());
      assertEquals((byte)10, bigDecimal0.byteValue());
      assertNull(catalogLight0.getCreationDate());
      assertFalse(catalogLight0.isModifiable());
      assertTrue(catalogLight0.isResizable());
      assertEquals((-694.0F), catalogLight0.getHeight(), 0.01F);
      assertEquals(0.3926991F, catalogLight0.getDepth(), 0.01F);
      assertNull(catalogLight0.getGrade());
      assertNull(catalogLight0.getCurrency());
      assertTrue(catalogLight0.isProportional());
      assertEquals("h&*+\"", catalogLight0.getName());
      assertFalse(catalogLight0.isDoorOrWindow());
      assertEquals("h&*+\"", catalogLight0.getCreator());
      assertEquals("h&*+\"", catalogLight0.getDescription());
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertEquals((-694.0F), catalogLight0.getElevation(), 0.01F);
      assertEquals((-815.0F), catalogLight0.getWidth(), 0.01F);
      assertTrue(catalogLight0.isTexturable());
      assertFalse(catalogLight0.isBackFaceShown());
      assertTrue(catalogLight0.isMovable());
      assertEquals("h&*+\"", catalogLight0.getId());
      assertNull(catalogLight0.getColor());
      assertNull(catalogLight0.getInformation());
      assertTrue(catalogLight0.isDeformable());
      assertNull(homeLight0.getColor());
      assertFalse(homeLight0.isBackFaceShown());
      assertFalse(homeLight0.isNameVisible());
      assertNull(homeLight0.getCurrency());
      assertTrue(homeLight0.isTexturable());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      assertEquals((-694.0F), homeLight0.getHeight(), 0.01F);
      assertEquals((-407.5F), homeLight0.getX(), 0.01F);
      assertTrue(homeLight0.isDeformable());
      assertEquals((-694.0F), homeLight0.getGroundElevation(), 0.01F);
      assertTrue(homeLight0.isVisible());
      assertNull(homeLight0.getShininess());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals((-815.0F), homeLight0.getWidth(), 0.01F);
      assertEquals("h&*+\"", homeLight0.getName());
      assertTrue(homeLight0.isResizable());
      assertTrue(homeLight0.isMovable());
      assertEquals(0.19634955F, homeLight0.getY(), 0.01F);
      assertEquals("h&*+\"", homeLight0.getCatalogId());
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals((-694.0F), homeLight0.getElevation(), 0.01F);
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals("h&*+\"", homeLight0.getDescription());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertEquals(0.3926991F, homeLight0.getDepth(), 0.01F);
      assertFalse(homeLight0.isModelMirrored());
      assertFalse(homeLight1.isModelMirrored());
      assertFalse(homeLight1.isDoorOrWindow());
      assertTrue(homeLight1.isDeformable());
      assertNull(homeLight1.getColor());
      assertEquals((-694.0F), homeLight1.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight1.getNameYOffset(), 0.01F);
      assertEquals(0.3926991F, homeLight1.getDepth(), 0.01F);
      assertEquals(0.0F, homeLight1.getAngle(), 0.01F);
      assertTrue(homeLight1.isTexturable());
      assertEquals((-694.0F), homeLight1.getElevation(), 0.01F);
      assertFalse(homeLight1.isBackFaceShown());
      assertFalse(homeLight1.isNameVisible());
      assertEquals("h&*+\"", homeLight1.getName());
      assertEquals(0.0F, homeLight1.getNameAngle(), 0.01F);
      assertEquals((-815.0F), homeLight1.getWidth(), 0.01F);
      assertTrue(homeLight1.isResizable());
      assertEquals(0.5F, homeLight1.getPower(), 0.01F);
      assertNull(homeLight1.getShininess());
      assertEquals("h&*+\"", homeLight1.getDescription());
      assertNull(homeLight1.getStaircaseCutOutShape());
      assertEquals(0.19634955F, homeLight1.getY(), 0.01F);
      assertEquals(0.0F, homeLight1.getNameXOffset(), 0.01F);
      assertEquals("h&*+\"", homeLight1.getCatalogId());
      assertEquals((-694.0F), homeLight1.getHeight(), 0.01F);
      assertTrue(homeLight1.isVisible());
      assertNull(homeLight1.getCurrency());
      assertEquals((-407.5F), homeLight1.getX(), 0.01F);
      assertTrue(homeLight1.isMovable());
      assertEquals(0.0F, homeLight2.getNameXOffset(), 0.01F);
      assertEquals((-694.0F), homeLight2.getGroundElevation(), 0.01F);
      assertEquals(0.19634955F, homeLight2.getY(), 0.01F);
      assertEquals(0.0F, homeLight2.getNameAngle(), 0.01F);
      assertNull(homeLight2.getStaircaseCutOutShape());
      assertTrue(homeLight2.isResizable());
      assertNull(homeLight2.getShininess());
      assertNull(homeLight2.getColor());
      assertEquals((-815.0F), homeLight2.getWidth(), 0.01F);
      assertEquals("h&*+\"", homeLight2.getCatalogId());
      assertTrue(homeLight2.isMovable());
      assertEquals(0.5F, homeLight2.getPower(), 0.01F);
      assertEquals((-694.0F), homeLight2.getHeight(), 0.01F);
      assertNull(homeLight2.getCurrency());
      assertTrue(homeLight2.isDeformable());
      assertEquals((-407.5F), homeLight2.getX(), 0.01F);
      assertEquals(0.0F, homeLight2.getNameYOffset(), 0.01F);
      assertEquals(0.3926991F, homeLight2.getDepth(), 0.01F);
      assertTrue(homeLight2.isVisible());
      assertFalse(homeLight2.isModelMirrored());
      assertFalse(homeLight2.isBackFaceShown());
      assertFalse(homeLight2.isDoorOrWindow());
      assertEquals("h&*+\"", homeLight2.getName());
      assertEquals("h&*+\"", homeLight2.getDescription());
      assertFalse(homeLight2.isNameVisible());
      assertEquals((-694.0F), homeLight2.getElevation(), 0.01F);
      assertTrue(homeLight2.isTexturable());
      assertEquals(0.0F, homeLight2.getAngle(), 0.01F);
      assertEquals(2, lightSourceArray0.length);
      assertNotSame(homeLight0, homeLight1);
      assertNotSame(homeLight0, homeLight2);
      assertNotSame(homeLight1, homeLight0);
      assertNotSame(homeLight1, homeLight2);
      assertNotSame(homeLight2, homeLight0);
      assertNotSame(homeLight2, homeLight1);
      assertNotNull(homeLight2);
      
      homeLight2.setModelMirrored(true);
      assertFalse(homeLight0.equals((Object)homeLight1));
      assertFalse(homeLight0.equals((Object)homeLight2));
      assertFalse(homeLight1.equals((Object)homeLight0));
      assertFalse(homeLight1.equals((Object)homeLight2));
      assertFalse(homeLight2.equals((Object)homeLight0));
      assertFalse(homeLight2.equals((Object)homeLight1));
      assertEquals((short)10, bigDecimal0.shortValue());
      assertEquals((byte)10, bigDecimal0.byteValue());
      assertNull(catalogLight0.getCreationDate());
      assertFalse(catalogLight0.isModifiable());
      assertTrue(catalogLight0.isResizable());
      assertEquals((-694.0F), catalogLight0.getHeight(), 0.01F);
      assertEquals(0.3926991F, catalogLight0.getDepth(), 0.01F);
      assertNull(catalogLight0.getGrade());
      assertNull(catalogLight0.getCurrency());
      assertTrue(catalogLight0.isProportional());
      assertEquals("h&*+\"", catalogLight0.getName());
      assertFalse(catalogLight0.isDoorOrWindow());
      assertEquals("h&*+\"", catalogLight0.getCreator());
      assertEquals("h&*+\"", catalogLight0.getDescription());
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertEquals((-694.0F), catalogLight0.getElevation(), 0.01F);
      assertEquals((-815.0F), catalogLight0.getWidth(), 0.01F);
      assertTrue(catalogLight0.isTexturable());
      assertFalse(catalogLight0.isBackFaceShown());
      assertTrue(catalogLight0.isMovable());
      assertEquals("h&*+\"", catalogLight0.getId());
      assertNull(catalogLight0.getColor());
      assertNull(catalogLight0.getInformation());
      assertTrue(catalogLight0.isDeformable());
      assertNull(homeLight0.getColor());
      assertFalse(homeLight0.isBackFaceShown());
      assertFalse(homeLight0.isNameVisible());
      assertNull(homeLight0.getCurrency());
      assertTrue(homeLight0.isTexturable());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      assertEquals((-694.0F), homeLight0.getHeight(), 0.01F);
      assertEquals((-407.5F), homeLight0.getX(), 0.01F);
      assertTrue(homeLight0.isDeformable());
      assertEquals((-694.0F), homeLight0.getGroundElevation(), 0.01F);
      assertTrue(homeLight0.isVisible());
      assertNull(homeLight0.getShininess());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals((-815.0F), homeLight0.getWidth(), 0.01F);
      assertEquals("h&*+\"", homeLight0.getName());
      assertTrue(homeLight0.isResizable());
      assertTrue(homeLight0.isMovable());
      assertEquals(0.19634955F, homeLight0.getY(), 0.01F);
      assertEquals("h&*+\"", homeLight0.getCatalogId());
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals((-694.0F), homeLight0.getElevation(), 0.01F);
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals("h&*+\"", homeLight0.getDescription());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertEquals(0.3926991F, homeLight0.getDepth(), 0.01F);
      assertFalse(homeLight0.isModelMirrored());
      assertFalse(homeLight1.isModelMirrored());
      assertFalse(homeLight1.isDoorOrWindow());
      assertTrue(homeLight1.isDeformable());
      assertNull(homeLight1.getColor());
      assertEquals((-694.0F), homeLight1.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight1.getNameYOffset(), 0.01F);
      assertEquals(0.3926991F, homeLight1.getDepth(), 0.01F);
      assertEquals(0.0F, homeLight1.getAngle(), 0.01F);
      assertTrue(homeLight1.isTexturable());
      assertEquals((-694.0F), homeLight1.getElevation(), 0.01F);
      assertFalse(homeLight1.isBackFaceShown());
      assertFalse(homeLight1.isNameVisible());
      assertEquals("h&*+\"", homeLight1.getName());
      assertEquals(0.0F, homeLight1.getNameAngle(), 0.01F);
      assertEquals((-815.0F), homeLight1.getWidth(), 0.01F);
      assertTrue(homeLight1.isResizable());
      assertEquals(0.5F, homeLight1.getPower(), 0.01F);
      assertNull(homeLight1.getShininess());
      assertEquals("h&*+\"", homeLight1.getDescription());
      assertNull(homeLight1.getStaircaseCutOutShape());
      assertEquals(0.19634955F, homeLight1.getY(), 0.01F);
      assertEquals(0.0F, homeLight1.getNameXOffset(), 0.01F);
      assertEquals("h&*+\"", homeLight1.getCatalogId());
      assertEquals((-694.0F), homeLight1.getHeight(), 0.01F);
      assertTrue(homeLight1.isVisible());
      assertNull(homeLight1.getCurrency());
      assertEquals((-407.5F), homeLight1.getX(), 0.01F);
      assertTrue(homeLight1.isMovable());
      assertEquals(0.0F, homeLight2.getNameXOffset(), 0.01F);
      assertEquals((-694.0F), homeLight2.getGroundElevation(), 0.01F);
      assertEquals(0.19634955F, homeLight2.getY(), 0.01F);
      assertEquals(0.0F, homeLight2.getNameAngle(), 0.01F);
      assertNull(homeLight2.getStaircaseCutOutShape());
      assertTrue(homeLight2.isResizable());
      assertNull(homeLight2.getShininess());
      assertNull(homeLight2.getColor());
      assertEquals((-815.0F), homeLight2.getWidth(), 0.01F);
      assertEquals("h&*+\"", homeLight2.getCatalogId());
      assertTrue(homeLight2.isMovable());
      assertEquals(0.5F, homeLight2.getPower(), 0.01F);
      assertEquals((-694.0F), homeLight2.getHeight(), 0.01F);
      assertNull(homeLight2.getCurrency());
      assertTrue(homeLight2.isDeformable());
      assertEquals((-407.5F), homeLight2.getX(), 0.01F);
      assertEquals(0.0F, homeLight2.getNameYOffset(), 0.01F);
      assertEquals(0.3926991F, homeLight2.getDepth(), 0.01F);
      assertTrue(homeLight2.isModelMirrored());
      assertTrue(homeLight2.isVisible());
      assertFalse(homeLight2.isBackFaceShown());
      assertFalse(homeLight2.isDoorOrWindow());
      assertEquals("h&*+\"", homeLight2.getName());
      assertEquals("h&*+\"", homeLight2.getDescription());
      assertFalse(homeLight2.isNameVisible());
      assertEquals((-694.0F), homeLight2.getElevation(), 0.01F);
      assertTrue(homeLight2.isTexturable());
      assertEquals(0.0F, homeLight2.getAngle(), 0.01F);
      assertEquals(2, lightSourceArray0.length);
      assertNotSame(homeLight0, homeLight1);
      assertNotSame(homeLight0, homeLight2);
      assertNotSame(homeLight1, homeLight0);
      assertNotSame(homeLight1, homeLight2);
      assertNotSame(homeLight2, homeLight0);
      assertNotSame(homeLight2, homeLight1);
      
      boolean boolean0 = homeLight2.isNameCenterPointAt(1002.0F, (-127.62969F), 1707.7522F);
      assertFalse(homeLight0.equals((Object)homeLight1));
      assertFalse(homeLight0.equals((Object)homeLight2));
      assertFalse(homeLight1.equals((Object)homeLight0));
      assertFalse(homeLight1.equals((Object)homeLight2));
      assertFalse(homeLight2.equals((Object)homeLight0));
      assertFalse(homeLight2.equals((Object)homeLight1));
      assertEquals((short)10, bigDecimal0.shortValue());
      assertEquals((byte)10, bigDecimal0.byteValue());
      assertNull(catalogLight0.getCreationDate());
      assertFalse(catalogLight0.isModifiable());
      assertTrue(catalogLight0.isResizable());
      assertEquals((-694.0F), catalogLight0.getHeight(), 0.01F);
      assertEquals(0.3926991F, catalogLight0.getDepth(), 0.01F);
      assertNull(catalogLight0.getGrade());
      assertNull(catalogLight0.getCurrency());
      assertTrue(catalogLight0.isProportional());
      assertEquals("h&*+\"", catalogLight0.getName());
      assertFalse(catalogLight0.isDoorOrWindow());
      assertEquals("h&*+\"", catalogLight0.getCreator());
      assertEquals("h&*+\"", catalogLight0.getDescription());
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertEquals((-694.0F), catalogLight0.getElevation(), 0.01F);
      assertEquals((-815.0F), catalogLight0.getWidth(), 0.01F);
      assertTrue(catalogLight0.isTexturable());
      assertFalse(catalogLight0.isBackFaceShown());
      assertTrue(catalogLight0.isMovable());
      assertEquals("h&*+\"", catalogLight0.getId());
      assertNull(catalogLight0.getColor());
      assertNull(catalogLight0.getInformation());
      assertTrue(catalogLight0.isDeformable());
      assertNull(homeLight0.getColor());
      assertFalse(homeLight0.isBackFaceShown());
      assertFalse(homeLight0.isNameVisible());
      assertNull(homeLight0.getCurrency());
      assertTrue(homeLight0.isTexturable());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      assertEquals((-694.0F), homeLight0.getHeight(), 0.01F);
      assertEquals((-407.5F), homeLight0.getX(), 0.01F);
      assertTrue(homeLight0.isDeformable());
      assertEquals((-694.0F), homeLight0.getGroundElevation(), 0.01F);
      assertTrue(homeLight0.isVisible());
      assertNull(homeLight0.getShininess());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals((-815.0F), homeLight0.getWidth(), 0.01F);
      assertEquals("h&*+\"", homeLight0.getName());
      assertTrue(homeLight0.isResizable());
      assertTrue(homeLight0.isMovable());
      assertEquals(0.19634955F, homeLight0.getY(), 0.01F);
      assertEquals("h&*+\"", homeLight0.getCatalogId());
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals((-694.0F), homeLight0.getElevation(), 0.01F);
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals("h&*+\"", homeLight0.getDescription());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertEquals(0.3926991F, homeLight0.getDepth(), 0.01F);
      assertFalse(homeLight0.isModelMirrored());
      assertFalse(homeLight1.isModelMirrored());
      assertFalse(homeLight1.isDoorOrWindow());
      assertTrue(homeLight1.isDeformable());
      assertNull(homeLight1.getColor());
      assertEquals((-694.0F), homeLight1.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight1.getNameYOffset(), 0.01F);
      assertEquals(0.3926991F, homeLight1.getDepth(), 0.01F);
      assertEquals(0.0F, homeLight1.getAngle(), 0.01F);
      assertTrue(homeLight1.isTexturable());
      assertEquals((-694.0F), homeLight1.getElevation(), 0.01F);
      assertFalse(homeLight1.isBackFaceShown());
      assertFalse(homeLight1.isNameVisible());
      assertEquals("h&*+\"", homeLight1.getName());
      assertEquals(0.0F, homeLight1.getNameAngle(), 0.01F);
      assertEquals((-815.0F), homeLight1.getWidth(), 0.01F);
      assertTrue(homeLight1.isResizable());
      assertEquals(0.5F, homeLight1.getPower(), 0.01F);
      assertNull(homeLight1.getShininess());
      assertEquals("h&*+\"", homeLight1.getDescription());
      assertNull(homeLight1.getStaircaseCutOutShape());
      assertEquals(0.19634955F, homeLight1.getY(), 0.01F);
      assertEquals(0.0F, homeLight1.getNameXOffset(), 0.01F);
      assertEquals("h&*+\"", homeLight1.getCatalogId());
      assertEquals((-694.0F), homeLight1.getHeight(), 0.01F);
      assertTrue(homeLight1.isVisible());
      assertNull(homeLight1.getCurrency());
      assertEquals((-407.5F), homeLight1.getX(), 0.01F);
      assertTrue(homeLight1.isMovable());
      assertEquals(0.0F, homeLight2.getNameXOffset(), 0.01F);
      assertEquals((-694.0F), homeLight2.getGroundElevation(), 0.01F);
      assertEquals(0.19634955F, homeLight2.getY(), 0.01F);
      assertEquals(0.0F, homeLight2.getNameAngle(), 0.01F);
      assertNull(homeLight2.getStaircaseCutOutShape());
      assertTrue(homeLight2.isResizable());
      assertNull(homeLight2.getShininess());
      assertNull(homeLight2.getColor());
      assertEquals((-815.0F), homeLight2.getWidth(), 0.01F);
      assertEquals("h&*+\"", homeLight2.getCatalogId());
      assertTrue(homeLight2.isMovable());
      assertEquals(0.5F, homeLight2.getPower(), 0.01F);
      assertEquals((-694.0F), homeLight2.getHeight(), 0.01F);
      assertNull(homeLight2.getCurrency());
      assertTrue(homeLight2.isDeformable());
      assertEquals((-407.5F), homeLight2.getX(), 0.01F);
      assertEquals(0.0F, homeLight2.getNameYOffset(), 0.01F);
      assertEquals(0.3926991F, homeLight2.getDepth(), 0.01F);
      assertTrue(homeLight2.isModelMirrored());
      assertTrue(homeLight2.isVisible());
      assertFalse(homeLight2.isBackFaceShown());
      assertFalse(homeLight2.isDoorOrWindow());
      assertEquals("h&*+\"", homeLight2.getName());
      assertEquals("h&*+\"", homeLight2.getDescription());
      assertFalse(homeLight2.isNameVisible());
      assertEquals((-694.0F), homeLight2.getElevation(), 0.01F);
      assertTrue(homeLight2.isTexturable());
      assertEquals(0.0F, homeLight2.getAngle(), 0.01F);
      assertEquals(2, lightSourceArray0.length);
      assertNotSame(homeLight0, homeLight1);
      assertNotSame(homeLight0, homeLight2);
      assertNotSame(homeLight1, homeLight0);
      assertNotSame(homeLight1, homeLight2);
      assertNotSame(homeLight2, homeLight0);
      assertNotSame(homeLight2, homeLight1);
      assertTrue(boolean0);
      
      homeLight2.setY((-694.0F));
      assertFalse(homeLight0.equals((Object)homeLight1));
      assertFalse(homeLight0.equals((Object)homeLight2));
      assertFalse(homeLight1.equals((Object)homeLight0));
      assertFalse(homeLight1.equals((Object)homeLight2));
      assertFalse(homeLight2.equals((Object)homeLight0));
      assertFalse(homeLight2.equals((Object)homeLight1));
      assertEquals((short)10, bigDecimal0.shortValue());
      assertEquals((byte)10, bigDecimal0.byteValue());
      assertNull(catalogLight0.getCreationDate());
      assertFalse(catalogLight0.isModifiable());
      assertTrue(catalogLight0.isResizable());
      assertEquals((-694.0F), catalogLight0.getHeight(), 0.01F);
      assertEquals(0.3926991F, catalogLight0.getDepth(), 0.01F);
      assertNull(catalogLight0.getGrade());
      assertNull(catalogLight0.getCurrency());
      assertTrue(catalogLight0.isProportional());
      assertEquals("h&*+\"", catalogLight0.getName());
      assertFalse(catalogLight0.isDoorOrWindow());
      assertEquals("h&*+\"", catalogLight0.getCreator());
      assertEquals("h&*+\"", catalogLight0.getDescription());
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertEquals((-694.0F), catalogLight0.getElevation(), 0.01F);
      assertEquals((-815.0F), catalogLight0.getWidth(), 0.01F);
      assertTrue(catalogLight0.isTexturable());
      assertFalse(catalogLight0.isBackFaceShown());
      assertTrue(catalogLight0.isMovable());
      assertEquals("h&*+\"", catalogLight0.getId());
      assertNull(catalogLight0.getColor());
      assertNull(catalogLight0.getInformation());
      assertTrue(catalogLight0.isDeformable());
      assertNull(homeLight0.getColor());
      assertFalse(homeLight0.isBackFaceShown());
      assertFalse(homeLight0.isNameVisible());
      assertNull(homeLight0.getCurrency());
      assertTrue(homeLight0.isTexturable());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      assertEquals((-694.0F), homeLight0.getHeight(), 0.01F);
      assertEquals((-407.5F), homeLight0.getX(), 0.01F);
      assertTrue(homeLight0.isDeformable());
      assertEquals((-694.0F), homeLight0.getGroundElevation(), 0.01F);
      assertTrue(homeLight0.isVisible());
      assertNull(homeLight0.getShininess());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals((-815.0F), homeLight0.getWidth(), 0.01F);
      assertEquals("h&*+\"", homeLight0.getName());
      assertTrue(homeLight0.isResizable());
      assertTrue(homeLight0.isMovable());
      assertEquals(0.19634955F, homeLight0.getY(), 0.01F);
      assertEquals("h&*+\"", homeLight0.getCatalogId());
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals((-694.0F), homeLight0.getElevation(), 0.01F);
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals("h&*+\"", homeLight0.getDescription());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertEquals(0.3926991F, homeLight0.getDepth(), 0.01F);
      assertFalse(homeLight0.isModelMirrored());
      assertFalse(homeLight1.isModelMirrored());
      assertFalse(homeLight1.isDoorOrWindow());
      assertTrue(homeLight1.isDeformable());
      assertNull(homeLight1.getColor());
      assertEquals((-694.0F), homeLight1.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight1.getNameYOffset(), 0.01F);
      assertEquals(0.3926991F, homeLight1.getDepth(), 0.01F);
      assertEquals(0.0F, homeLight1.getAngle(), 0.01F);
      assertTrue(homeLight1.isTexturable());
      assertEquals((-694.0F), homeLight1.getElevation(), 0.01F);
      assertFalse(homeLight1.isBackFaceShown());
      assertFalse(homeLight1.isNameVisible());
      assertEquals("h&*+\"", homeLight1.getName());
      assertEquals(0.0F, homeLight1.getNameAngle(), 0.01F);
      assertEquals((-815.0F), homeLight1.getWidth(), 0.01F);
      assertTrue(homeLight1.isResizable());
      assertEquals(0.5F, homeLight1.getPower(), 0.01F);
      assertNull(homeLight1.getShininess());
      assertEquals("h&*+\"", homeLight1.getDescription());
      assertNull(homeLight1.getStaircaseCutOutShape());
      assertEquals(0.19634955F, homeLight1.getY(), 0.01F);
      assertEquals(0.0F, homeLight1.getNameXOffset(), 0.01F);
      assertEquals("h&*+\"", homeLight1.getCatalogId());
      assertEquals((-694.0F), homeLight1.getHeight(), 0.01F);
      assertTrue(homeLight1.isVisible());
      assertNull(homeLight1.getCurrency());
      assertEquals((-407.5F), homeLight1.getX(), 0.01F);
      assertTrue(homeLight1.isMovable());
      assertEquals(0.0F, homeLight2.getNameXOffset(), 0.01F);
      assertEquals((-694.0F), homeLight2.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight2.getNameAngle(), 0.01F);
      assertNull(homeLight2.getStaircaseCutOutShape());
      assertTrue(homeLight2.isResizable());
      assertNull(homeLight2.getShininess());
      assertNull(homeLight2.getColor());
      assertEquals((-815.0F), homeLight2.getWidth(), 0.01F);
      assertEquals("h&*+\"", homeLight2.getCatalogId());
      assertTrue(homeLight2.isMovable());
      assertEquals(0.5F, homeLight2.getPower(), 0.01F);
      assertEquals((-694.0F), homeLight2.getHeight(), 0.01F);
      assertNull(homeLight2.getCurrency());
      assertTrue(homeLight2.isDeformable());
      assertEquals((-407.5F), homeLight2.getX(), 0.01F);
      assertEquals(0.0F, homeLight2.getNameYOffset(), 0.01F);
      assertEquals(0.3926991F, homeLight2.getDepth(), 0.01F);
      assertTrue(homeLight2.isModelMirrored());
      assertTrue(homeLight2.isVisible());
      assertFalse(homeLight2.isBackFaceShown());
      assertFalse(homeLight2.isDoorOrWindow());
      assertEquals((-694.0F), homeLight2.getY(), 0.01F);
      assertEquals("h&*+\"", homeLight2.getName());
      assertEquals("h&*+\"", homeLight2.getDescription());
      assertFalse(homeLight2.isNameVisible());
      assertEquals((-694.0F), homeLight2.getElevation(), 0.01F);
      assertTrue(homeLight2.isTexturable());
      assertEquals(0.0F, homeLight2.getAngle(), 0.01F);
      assertEquals(2, lightSourceArray0.length);
      assertNotSame(homeLight0, homeLight1);
      assertNotSame(homeLight0, homeLight2);
      assertNotSame(homeLight1, homeLight0);
      assertNotSame(homeLight1, homeLight2);
      assertNotSame(homeLight2, homeLight0);
      assertNotSame(homeLight2, homeLight1);
      
      float float0 = homeLight2.getGroundElevation();
      assertFalse(homeLight0.equals((Object)homeLight1));
      assertFalse(homeLight0.equals((Object)homeLight2));
      assertFalse(homeLight1.equals((Object)homeLight0));
      assertFalse(homeLight1.equals((Object)homeLight2));
      assertFalse(homeLight2.equals((Object)homeLight0));
      assertFalse(homeLight2.equals((Object)homeLight1));
      assertEquals((short)10, bigDecimal0.shortValue());
      assertEquals((byte)10, bigDecimal0.byteValue());
      assertNull(catalogLight0.getCreationDate());
      assertFalse(catalogLight0.isModifiable());
      assertTrue(catalogLight0.isResizable());
      assertEquals((-694.0F), catalogLight0.getHeight(), 0.01F);
      assertEquals(0.3926991F, catalogLight0.getDepth(), 0.01F);
      assertNull(catalogLight0.getGrade());
      assertNull(catalogLight0.getCurrency());
      assertTrue(catalogLight0.isProportional());
      assertEquals("h&*+\"", catalogLight0.getName());
      assertFalse(catalogLight0.isDoorOrWindow());
      assertEquals("h&*+\"", catalogLight0.getCreator());
      assertEquals("h&*+\"", catalogLight0.getDescription());
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertEquals((-694.0F), catalogLight0.getElevation(), 0.01F);
      assertEquals((-815.0F), catalogLight0.getWidth(), 0.01F);
      assertTrue(catalogLight0.isTexturable());
      assertFalse(catalogLight0.isBackFaceShown());
      assertTrue(catalogLight0.isMovable());
      assertEquals("h&*+\"", catalogLight0.getId());
      assertNull(catalogLight0.getColor());
      assertNull(catalogLight0.getInformation());
      assertTrue(catalogLight0.isDeformable());
      assertNull(homeLight0.getColor());
      assertFalse(homeLight0.isBackFaceShown());
      assertFalse(homeLight0.isNameVisible());
      assertNull(homeLight0.getCurrency());
      assertTrue(homeLight0.isTexturable());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      assertEquals((-694.0F), homeLight0.getHeight(), 0.01F);
      assertEquals((-407.5F), homeLight0.getX(), 0.01F);
      assertTrue(homeLight0.isDeformable());
      assertEquals((-694.0F), homeLight0.getGroundElevation(), 0.01F);
      assertTrue(homeLight0.isVisible());
      assertNull(homeLight0.getShininess());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals((-815.0F), homeLight0.getWidth(), 0.01F);
      assertEquals("h&*+\"", homeLight0.getName());
      assertTrue(homeLight0.isResizable());
      assertTrue(homeLight0.isMovable());
      assertEquals(0.19634955F, homeLight0.getY(), 0.01F);
      assertEquals("h&*+\"", homeLight0.getCatalogId());
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals((-694.0F), homeLight0.getElevation(), 0.01F);
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals("h&*+\"", homeLight0.getDescription());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertEquals(0.3926991F, homeLight0.getDepth(), 0.01F);
      assertFalse(homeLight0.isModelMirrored());
      assertFalse(homeLight1.isModelMirrored());
      assertFalse(homeLight1.isDoorOrWindow());
      assertTrue(homeLight1.isDeformable());
      assertNull(homeLight1.getColor());
      assertEquals((-694.0F), homeLight1.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight1.getNameYOffset(), 0.01F);
      assertEquals(0.3926991F, homeLight1.getDepth(), 0.01F);
      assertEquals(0.0F, homeLight1.getAngle(), 0.01F);
      assertTrue(homeLight1.isTexturable());
      assertEquals((-694.0F), homeLight1.getElevation(), 0.01F);
      assertFalse(homeLight1.isBackFaceShown());
      assertFalse(homeLight1.isNameVisible());
      assertEquals("h&*+\"", homeLight1.getName());
      assertEquals(0.0F, homeLight1.getNameAngle(), 0.01F);
      assertEquals((-815.0F), homeLight1.getWidth(), 0.01F);
      assertTrue(homeLight1.isResizable());
      assertEquals(0.5F, homeLight1.getPower(), 0.01F);
      assertNull(homeLight1.getShininess());
      assertEquals("h&*+\"", homeLight1.getDescription());
      assertNull(homeLight1.getStaircaseCutOutShape());
      assertEquals(0.19634955F, homeLight1.getY(), 0.01F);
      assertEquals(0.0F, homeLight1.getNameXOffset(), 0.01F);
      assertEquals("h&*+\"", homeLight1.getCatalogId());
      assertEquals((-694.0F), homeLight1.getHeight(), 0.01F);
      assertTrue(homeLight1.isVisible());
      assertNull(homeLight1.getCurrency());
      assertEquals((-407.5F), homeLight1.getX(), 0.01F);
      assertTrue(homeLight1.isMovable());
      assertEquals(0.0F, homeLight2.getNameXOffset(), 0.01F);
      assertEquals((-694.0F), homeLight2.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight2.getNameAngle(), 0.01F);
      assertNull(homeLight2.getStaircaseCutOutShape());
      assertTrue(homeLight2.isResizable());
      assertNull(homeLight2.getShininess());
      assertNull(homeLight2.getColor());
      assertEquals((-815.0F), homeLight2.getWidth(), 0.01F);
      assertEquals("h&*+\"", homeLight2.getCatalogId());
      assertTrue(homeLight2.isMovable());
      assertEquals(0.5F, homeLight2.getPower(), 0.01F);
      assertEquals((-694.0F), homeLight2.getHeight(), 0.01F);
      assertNull(homeLight2.getCurrency());
      assertTrue(homeLight2.isDeformable());
      assertEquals((-407.5F), homeLight2.getX(), 0.01F);
      assertEquals(0.0F, homeLight2.getNameYOffset(), 0.01F);
      assertEquals(0.3926991F, homeLight2.getDepth(), 0.01F);
      assertTrue(homeLight2.isModelMirrored());
      assertTrue(homeLight2.isVisible());
      assertFalse(homeLight2.isBackFaceShown());
      assertFalse(homeLight2.isDoorOrWindow());
      assertEquals((-694.0F), homeLight2.getY(), 0.01F);
      assertEquals("h&*+\"", homeLight2.getName());
      assertEquals("h&*+\"", homeLight2.getDescription());
      assertFalse(homeLight2.isNameVisible());
      assertEquals((-694.0F), homeLight2.getElevation(), 0.01F);
      assertTrue(homeLight2.isTexturable());
      assertEquals(0.0F, homeLight2.getAngle(), 0.01F);
      assertEquals(2, lightSourceArray0.length);
      assertNotSame(homeLight0, homeLight1);
      assertNotSame(homeLight0, homeLight2);
      assertNotSame(homeLight1, homeLight0);
      assertNotSame(homeLight1, homeLight2);
      assertNotSame(homeLight2, homeLight0);
      assertNotSame(homeLight2, homeLight1);
      assertEquals((-694.0F), float0, 0.01F);
      
      float float1 = homeLight2.getDepth();
      assertFalse(homeLight0.equals((Object)homeLight1));
      assertFalse(homeLight0.equals((Object)homeLight2));
      assertFalse(homeLight1.equals((Object)homeLight0));
      assertFalse(homeLight1.equals((Object)homeLight2));
      assertFalse(homeLight2.equals((Object)homeLight0));
      assertFalse(homeLight2.equals((Object)homeLight1));
      assertNotEquals(float1, float0, 0.01F);
      assertEquals((short)10, bigDecimal0.shortValue());
      assertEquals((byte)10, bigDecimal0.byteValue());
      assertNull(catalogLight0.getCreationDate());
      assertFalse(catalogLight0.isModifiable());
      assertTrue(catalogLight0.isResizable());
      assertEquals((-694.0F), catalogLight0.getHeight(), 0.01F);
      assertEquals(0.3926991F, catalogLight0.getDepth(), 0.01F);
      assertNull(catalogLight0.getGrade());
      assertNull(catalogLight0.getCurrency());
      assertTrue(catalogLight0.isProportional());
      assertEquals("h&*+\"", catalogLight0.getName());
      assertFalse(catalogLight0.isDoorOrWindow());
      assertEquals("h&*+\"", catalogLight0.getCreator());
      assertEquals("h&*+\"", catalogLight0.getDescription());
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertEquals((-694.0F), catalogLight0.getElevation(), 0.01F);
      assertEquals((-815.0F), catalogLight0.getWidth(), 0.01F);
      assertTrue(catalogLight0.isTexturable());
      assertFalse(catalogLight0.isBackFaceShown());
      assertTrue(catalogLight0.isMovable());
      assertEquals("h&*+\"", catalogLight0.getId());
      assertNull(catalogLight0.getColor());
      assertNull(catalogLight0.getInformation());
      assertTrue(catalogLight0.isDeformable());
      assertNull(homeLight0.getColor());
      assertFalse(homeLight0.isBackFaceShown());
      assertFalse(homeLight0.isNameVisible());
      assertNull(homeLight0.getCurrency());
      assertTrue(homeLight0.isTexturable());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      assertEquals((-694.0F), homeLight0.getHeight(), 0.01F);
      assertEquals((-407.5F), homeLight0.getX(), 0.01F);
      assertTrue(homeLight0.isDeformable());
      assertEquals((-694.0F), homeLight0.getGroundElevation(), 0.01F);
      assertTrue(homeLight0.isVisible());
      assertNull(homeLight0.getShininess());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals((-815.0F), homeLight0.getWidth(), 0.01F);
      assertEquals("h&*+\"", homeLight0.getName());
      assertTrue(homeLight0.isResizable());
      assertTrue(homeLight0.isMovable());
      assertEquals(0.19634955F, homeLight0.getY(), 0.01F);
      assertEquals("h&*+\"", homeLight0.getCatalogId());
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals((-694.0F), homeLight0.getElevation(), 0.01F);
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals("h&*+\"", homeLight0.getDescription());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertEquals(0.3926991F, homeLight0.getDepth(), 0.01F);
      assertFalse(homeLight0.isModelMirrored());
      assertFalse(homeLight1.isModelMirrored());
      assertFalse(homeLight1.isDoorOrWindow());
      assertTrue(homeLight1.isDeformable());
      assertNull(homeLight1.getColor());
      assertEquals((-694.0F), homeLight1.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight1.getNameYOffset(), 0.01F);
      assertEquals(0.3926991F, homeLight1.getDepth(), 0.01F);
      assertEquals(0.0F, homeLight1.getAngle(), 0.01F);
      assertTrue(homeLight1.isTexturable());
      assertEquals((-694.0F), homeLight1.getElevation(), 0.01F);
      assertFalse(homeLight1.isBackFaceShown());
      assertFalse(homeLight1.isNameVisible());
      assertEquals("h&*+\"", homeLight1.getName());
      assertEquals(0.0F, homeLight1.getNameAngle(), 0.01F);
      assertEquals((-815.0F), homeLight1.getWidth(), 0.01F);
      assertTrue(homeLight1.isResizable());
      assertEquals(0.5F, homeLight1.getPower(), 0.01F);
      assertNull(homeLight1.getShininess());
      assertEquals("h&*+\"", homeLight1.getDescription());
      assertNull(homeLight1.getStaircaseCutOutShape());
      assertEquals(0.19634955F, homeLight1.getY(), 0.01F);
      assertEquals(0.0F, homeLight1.getNameXOffset(), 0.01F);
      assertEquals("h&*+\"", homeLight1.getCatalogId());
      assertEquals((-694.0F), homeLight1.getHeight(), 0.01F);
      assertTrue(homeLight1.isVisible());
      assertNull(homeLight1.getCurrency());
      assertEquals((-407.5F), homeLight1.getX(), 0.01F);
      assertTrue(homeLight1.isMovable());
      assertEquals(0.0F, homeLight2.getNameXOffset(), 0.01F);
      assertEquals((-694.0F), homeLight2.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight2.getNameAngle(), 0.01F);
      assertNull(homeLight2.getStaircaseCutOutShape());
      assertTrue(homeLight2.isResizable());
      assertNull(homeLight2.getShininess());
      assertNull(homeLight2.getColor());
      assertEquals((-815.0F), homeLight2.getWidth(), 0.01F);
      assertEquals("h&*+\"", homeLight2.getCatalogId());
      assertTrue(homeLight2.isMovable());
      assertEquals(0.5F, homeLight2.getPower(), 0.01F);
      assertEquals((-694.0F), homeLight2.getHeight(), 0.01F);
      assertNull(homeLight2.getCurrency());
      assertTrue(homeLight2.isDeformable());
      assertEquals((-407.5F), homeLight2.getX(), 0.01F);
      assertEquals(0.0F, homeLight2.getNameYOffset(), 0.01F);
      assertEquals(0.3926991F, homeLight2.getDepth(), 0.01F);
      assertTrue(homeLight2.isModelMirrored());
      assertTrue(homeLight2.isVisible());
      assertFalse(homeLight2.isBackFaceShown());
      assertFalse(homeLight2.isDoorOrWindow());
      assertEquals((-694.0F), homeLight2.getY(), 0.01F);
      assertEquals("h&*+\"", homeLight2.getName());
      assertEquals("h&*+\"", homeLight2.getDescription());
      assertFalse(homeLight2.isNameVisible());
      assertEquals((-694.0F), homeLight2.getElevation(), 0.01F);
      assertTrue(homeLight2.isTexturable());
      assertEquals(0.0F, homeLight2.getAngle(), 0.01F);
      assertEquals(2, lightSourceArray0.length);
      assertNotSame(homeLight0, homeLight1);
      assertNotSame(homeLight0, homeLight2);
      assertNotSame(homeLight1, homeLight0);
      assertNotSame(homeLight1, homeLight2);
      assertNotSame(homeLight2, homeLight0);
      assertNotSame(homeLight2, homeLight1);
      assertEquals(0.3926991F, float1, 0.01F);
      
      homeLight1.setNameAngle((-694.0F));
      assertFalse(homeLight0.equals((Object)homeLight1));
      assertFalse(homeLight0.equals((Object)homeLight2));
      assertFalse(homeLight1.equals((Object)homeLight0));
      assertFalse(homeLight1.equals((Object)homeLight2));
      assertEquals((short)10, bigDecimal0.shortValue());
      assertEquals((byte)10, bigDecimal0.byteValue());
      assertNull(catalogLight0.getCreationDate());
      assertFalse(catalogLight0.isModifiable());
      assertTrue(catalogLight0.isResizable());
      assertEquals((-694.0F), catalogLight0.getHeight(), 0.01F);
      assertEquals(0.3926991F, catalogLight0.getDepth(), 0.01F);
      assertNull(catalogLight0.getGrade());
      assertNull(catalogLight0.getCurrency());
      assertTrue(catalogLight0.isProportional());
      assertEquals("h&*+\"", catalogLight0.getName());
      assertFalse(catalogLight0.isDoorOrWindow());
      assertEquals("h&*+\"", catalogLight0.getCreator());
      assertEquals("h&*+\"", catalogLight0.getDescription());
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertEquals((-694.0F), catalogLight0.getElevation(), 0.01F);
      assertEquals((-815.0F), catalogLight0.getWidth(), 0.01F);
      assertTrue(catalogLight0.isTexturable());
      assertFalse(catalogLight0.isBackFaceShown());
      assertTrue(catalogLight0.isMovable());
      assertEquals("h&*+\"", catalogLight0.getId());
      assertNull(catalogLight0.getColor());
      assertNull(catalogLight0.getInformation());
      assertTrue(catalogLight0.isDeformable());
      assertNull(homeLight0.getColor());
      assertFalse(homeLight0.isBackFaceShown());
      assertFalse(homeLight0.isNameVisible());
      assertNull(homeLight0.getCurrency());
      assertTrue(homeLight0.isTexturable());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      assertEquals((-694.0F), homeLight0.getHeight(), 0.01F);
      assertEquals((-407.5F), homeLight0.getX(), 0.01F);
      assertTrue(homeLight0.isDeformable());
      assertEquals((-694.0F), homeLight0.getGroundElevation(), 0.01F);
      assertTrue(homeLight0.isVisible());
      assertNull(homeLight0.getShininess());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals((-815.0F), homeLight0.getWidth(), 0.01F);
      assertEquals("h&*+\"", homeLight0.getName());
      assertTrue(homeLight0.isResizable());
      assertTrue(homeLight0.isMovable());
      assertEquals(0.19634955F, homeLight0.getY(), 0.01F);
      assertEquals("h&*+\"", homeLight0.getCatalogId());
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals((-694.0F), homeLight0.getElevation(), 0.01F);
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals("h&*+\"", homeLight0.getDescription());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertEquals(0.3926991F, homeLight0.getDepth(), 0.01F);
      assertFalse(homeLight0.isModelMirrored());
      assertFalse(homeLight1.isModelMirrored());
      assertFalse(homeLight1.isDoorOrWindow());
      assertTrue(homeLight1.isDeformable());
      assertNull(homeLight1.getColor());
      assertEquals((-694.0F), homeLight1.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight1.getNameYOffset(), 0.01F);
      assertEquals(0.3926991F, homeLight1.getDepth(), 0.01F);
      assertEquals(3.4335692F, homeLight1.getNameAngle(), 0.01F);
      assertEquals(0.0F, homeLight1.getAngle(), 0.01F);
      assertTrue(homeLight1.isTexturable());
      assertEquals((-694.0F), homeLight1.getElevation(), 0.01F);
      assertFalse(homeLight1.isBackFaceShown());
      assertFalse(homeLight1.isNameVisible());
      assertEquals("h&*+\"", homeLight1.getName());
      assertEquals((-815.0F), homeLight1.getWidth(), 0.01F);
      assertTrue(homeLight1.isResizable());
      assertEquals(0.5F, homeLight1.getPower(), 0.01F);
      assertNull(homeLight1.getShininess());
      assertEquals("h&*+\"", homeLight1.getDescription());
      assertNull(homeLight1.getStaircaseCutOutShape());
      assertEquals(0.19634955F, homeLight1.getY(), 0.01F);
      assertEquals(0.0F, homeLight1.getNameXOffset(), 0.01F);
      assertEquals("h&*+\"", homeLight1.getCatalogId());
      assertEquals((-694.0F), homeLight1.getHeight(), 0.01F);
      assertTrue(homeLight1.isVisible());
      assertNull(homeLight1.getCurrency());
      assertEquals((-407.5F), homeLight1.getX(), 0.01F);
      assertTrue(homeLight1.isMovable());
      assertEquals(2, lightSourceArray0.length);
      assertNotSame(homeLight0, homeLight1);
      assertNotSame(homeLight0, homeLight2);
      assertNotSame(homeLight1, homeLight0);
      assertNotSame(homeLight1, homeLight2);
  }

  @Test(timeout = 4000)
  public void test234()  throws Throwable  {
      LightSource[] lightSourceArray0 = new LightSource[2];
      BigDecimal bigDecimal0 = BigDecimal.TEN;
      assertEquals((byte)10, bigDecimal0.byteValue());
      assertEquals((short)10, bigDecimal0.shortValue());
      assertNotNull(bigDecimal0);
      
      CatalogLight catalogLight0 = new CatalogLight("/", "PRICE_VALUE_ADDED_TAX_INCLUDED", "PRICE_VALUE_ADDED_TAX_INCLUDED", (Content) null, (Content) null, 23.119429F, 114.0F, (-663.6746F), (-663.6746F), true, lightSourceArray0, (float[][]) null, "{L", true, bigDecimal0, bigDecimal0);
      assertEquals((byte)10, bigDecimal0.byteValue());
      assertEquals((short)10, bigDecimal0.shortValue());
      assertNull(catalogLight0.getGrade());
      assertEquals((-663.6746F), catalogLight0.getElevation(), 0.01F);
      assertEquals("PRICE_VALUE_ADDED_TAX_INCLUDED", catalogLight0.getDescription());
      assertEquals((-663.6746F), catalogLight0.getHeight(), 0.01F);
      assertFalse(catalogLight0.isDoorOrWindow());
      assertTrue(catalogLight0.isMovable());
      assertEquals("PRICE_VALUE_ADDED_TAX_INCLUDED", catalogLight0.getName());
      assertEquals(114.0F, catalogLight0.getDepth(), 0.01F);
      assertNull(catalogLight0.getInformation());
      assertTrue(catalogLight0.isDeformable());
      assertNull(catalogLight0.getCurrency());
      assertEquals("{L", catalogLight0.getCreator());
      assertNull(catalogLight0.getColor());
      assertFalse(catalogLight0.isModifiable());
      assertFalse(catalogLight0.isBackFaceShown());
      assertNull(catalogLight0.getCreationDate());
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertTrue(catalogLight0.isResizable());
      assertEquals("/", catalogLight0.getId());
      assertTrue(catalogLight0.isTexturable());
      assertTrue(catalogLight0.isProportional());
      assertEquals(23.119429F, catalogLight0.getWidth(), 0.01F);
      assertEquals(2, lightSourceArray0.length);
      assertNotNull(catalogLight0);
      
      HomeLight homeLight0 = new HomeLight(catalogLight0);
      assertEquals((byte)10, bigDecimal0.byteValue());
      assertEquals((short)10, bigDecimal0.shortValue());
      assertNull(catalogLight0.getGrade());
      assertEquals((-663.6746F), catalogLight0.getElevation(), 0.01F);
      assertEquals("PRICE_VALUE_ADDED_TAX_INCLUDED", catalogLight0.getDescription());
      assertEquals((-663.6746F), catalogLight0.getHeight(), 0.01F);
      assertFalse(catalogLight0.isDoorOrWindow());
      assertTrue(catalogLight0.isMovable());
      assertEquals("PRICE_VALUE_ADDED_TAX_INCLUDED", catalogLight0.getName());
      assertEquals(114.0F, catalogLight0.getDepth(), 0.01F);
      assertNull(catalogLight0.getInformation());
      assertTrue(catalogLight0.isDeformable());
      assertNull(catalogLight0.getCurrency());
      assertEquals("{L", catalogLight0.getCreator());
      assertNull(catalogLight0.getColor());
      assertFalse(catalogLight0.isModifiable());
      assertFalse(catalogLight0.isBackFaceShown());
      assertNull(catalogLight0.getCreationDate());
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertTrue(catalogLight0.isResizable());
      assertEquals("/", catalogLight0.getId());
      assertTrue(catalogLight0.isTexturable());
      assertTrue(catalogLight0.isProportional());
      assertEquals(23.119429F, catalogLight0.getWidth(), 0.01F);
      assertEquals(57.0F, homeLight0.getY(), 0.01F);
      assertTrue(homeLight0.isMovable());
      assertTrue(homeLight0.isResizable());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertNull(homeLight0.getShininess());
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals("PRICE_VALUE_ADDED_TAX_INCLUDED", homeLight0.getDescription());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals(23.119429F, homeLight0.getWidth(), 0.01F);
      assertTrue(homeLight0.isDeformable());
      assertTrue(homeLight0.isVisible());
      assertEquals((-663.6746F), homeLight0.getHeight(), 0.01F);
      assertNull(homeLight0.getCurrency());
      assertEquals(11.559714F, homeLight0.getX(), 0.01F);
      assertEquals("PRICE_VALUE_ADDED_TAX_INCLUDED", homeLight0.getName());
      assertFalse(homeLight0.isBackFaceShown());
      assertFalse(homeLight0.isDoorOrWindow());
      assertFalse(homeLight0.isModelMirrored());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertNull(homeLight0.getColor());
      assertEquals((-663.6746F), homeLight0.getGroundElevation(), 0.01F);
      assertEquals("/", homeLight0.getCatalogId());
      assertEquals(114.0F, homeLight0.getDepth(), 0.01F);
      assertEquals((-663.6746F), homeLight0.getElevation(), 0.01F);
      assertTrue(homeLight0.isTexturable());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertFalse(homeLight0.isNameVisible());
      assertEquals(2, lightSourceArray0.length);
      assertNotNull(homeLight0);
      
      HomeLight homeLight1 = homeLight0.clone();
      assertFalse(homeLight1.equals((Object)homeLight0));
      assertEquals((byte)10, bigDecimal0.byteValue());
      assertEquals((short)10, bigDecimal0.shortValue());
      assertNull(catalogLight0.getGrade());
      assertEquals((-663.6746F), catalogLight0.getElevation(), 0.01F);
      assertEquals("PRICE_VALUE_ADDED_TAX_INCLUDED", catalogLight0.getDescription());
      assertEquals((-663.6746F), catalogLight0.getHeight(), 0.01F);
      assertFalse(catalogLight0.isDoorOrWindow());
      assertTrue(catalogLight0.isMovable());
      assertEquals("PRICE_VALUE_ADDED_TAX_INCLUDED", catalogLight0.getName());
      assertEquals(114.0F, catalogLight0.getDepth(), 0.01F);
      assertNull(catalogLight0.getInformation());
      assertTrue(catalogLight0.isDeformable());
      assertNull(catalogLight0.getCurrency());
      assertEquals("{L", catalogLight0.getCreator());
      assertNull(catalogLight0.getColor());
      assertFalse(catalogLight0.isModifiable());
      assertFalse(catalogLight0.isBackFaceShown());
      assertNull(catalogLight0.getCreationDate());
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertTrue(catalogLight0.isResizable());
      assertEquals("/", catalogLight0.getId());
      assertTrue(catalogLight0.isTexturable());
      assertTrue(catalogLight0.isProportional());
      assertEquals(23.119429F, catalogLight0.getWidth(), 0.01F);
      assertEquals(57.0F, homeLight0.getY(), 0.01F);
      assertTrue(homeLight0.isMovable());
      assertTrue(homeLight0.isResizable());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertNull(homeLight0.getShininess());
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals("PRICE_VALUE_ADDED_TAX_INCLUDED", homeLight0.getDescription());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals(23.119429F, homeLight0.getWidth(), 0.01F);
      assertTrue(homeLight0.isDeformable());
      assertTrue(homeLight0.isVisible());
      assertEquals((-663.6746F), homeLight0.getHeight(), 0.01F);
      assertNull(homeLight0.getCurrency());
      assertEquals(11.559714F, homeLight0.getX(), 0.01F);
      assertEquals("PRICE_VALUE_ADDED_TAX_INCLUDED", homeLight0.getName());
      assertFalse(homeLight0.isBackFaceShown());
      assertFalse(homeLight0.isDoorOrWindow());
      assertFalse(homeLight0.isModelMirrored());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertNull(homeLight0.getColor());
      assertEquals((-663.6746F), homeLight0.getGroundElevation(), 0.01F);
      assertEquals("/", homeLight0.getCatalogId());
      assertEquals(114.0F, homeLight0.getDepth(), 0.01F);
      assertEquals((-663.6746F), homeLight0.getElevation(), 0.01F);
      assertTrue(homeLight0.isTexturable());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertFalse(homeLight0.isNameVisible());
      assertEquals(57.0F, homeLight1.getY(), 0.01F);
      assertEquals(11.559714F, homeLight1.getX(), 0.01F);
      assertTrue(homeLight1.isMovable());
      assertNull(homeLight1.getStaircaseCutOutShape());
      assertEquals("PRICE_VALUE_ADDED_TAX_INCLUDED", homeLight1.getName());
      assertNull(homeLight1.getShininess());
      assertTrue(homeLight1.isResizable());
      assertEquals("PRICE_VALUE_ADDED_TAX_INCLUDED", homeLight1.getDescription());
      assertEquals(0.5F, homeLight1.getPower(), 0.01F);
      assertEquals(0.0F, homeLight1.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeLight1.getNameYOffset(), 0.01F);
      assertEquals((-663.6746F), homeLight1.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight1.getAngle(), 0.01F);
      assertEquals((-663.6746F), homeLight1.getElevation(), 0.01F);
      assertFalse(homeLight1.isNameVisible());
      assertEquals(114.0F, homeLight1.getDepth(), 0.01F);
      assertEquals("/", homeLight1.getCatalogId());
      assertFalse(homeLight1.isBackFaceShown());
      assertNull(homeLight1.getColor());
      assertFalse(homeLight1.isModelMirrored());
      assertTrue(homeLight1.isTexturable());
      assertFalse(homeLight1.isDoorOrWindow());
      assertTrue(homeLight1.isVisible());
      assertEquals(23.119429F, homeLight1.getWidth(), 0.01F);
      assertTrue(homeLight1.isDeformable());
      assertNull(homeLight1.getCurrency());
      assertEquals(0.0F, homeLight1.getNameAngle(), 0.01F);
      assertEquals((-663.6746F), homeLight1.getHeight(), 0.01F);
      assertEquals(2, lightSourceArray0.length);
      assertNotSame(homeLight0, homeLight1);
      assertNotSame(homeLight1, homeLight0);
      assertNotNull(homeLight1);
      
      HomePieceOfFurniture.SortableProperty[] homePieceOfFurniture_SortablePropertyArray0 = HomePieceOfFurniture.SortableProperty.values();
      assertEquals(19, homePieceOfFurniture_SortablePropertyArray0.length);
      assertNotNull(homePieceOfFurniture_SortablePropertyArray0);
      
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      homeLight0.setDescription(")x'.R~1u:;mh@\"W");
      assertFalse(homeLight0.equals((Object)homeLight1));
      assertEquals((byte)10, bigDecimal0.byteValue());
      assertEquals((short)10, bigDecimal0.shortValue());
      assertNull(catalogLight0.getGrade());
      assertEquals((-663.6746F), catalogLight0.getElevation(), 0.01F);
      assertEquals("PRICE_VALUE_ADDED_TAX_INCLUDED", catalogLight0.getDescription());
      assertEquals((-663.6746F), catalogLight0.getHeight(), 0.01F);
      assertFalse(catalogLight0.isDoorOrWindow());
      assertTrue(catalogLight0.isMovable());
      assertEquals("PRICE_VALUE_ADDED_TAX_INCLUDED", catalogLight0.getName());
      assertEquals(114.0F, catalogLight0.getDepth(), 0.01F);
      assertNull(catalogLight0.getInformation());
      assertTrue(catalogLight0.isDeformable());
      assertNull(catalogLight0.getCurrency());
      assertEquals("{L", catalogLight0.getCreator());
      assertNull(catalogLight0.getColor());
      assertFalse(catalogLight0.isModifiable());
      assertFalse(catalogLight0.isBackFaceShown());
      assertNull(catalogLight0.getCreationDate());
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertTrue(catalogLight0.isResizable());
      assertEquals("/", catalogLight0.getId());
      assertTrue(catalogLight0.isTexturable());
      assertTrue(catalogLight0.isProportional());
      assertEquals(23.119429F, catalogLight0.getWidth(), 0.01F);
      assertEquals(57.0F, homeLight0.getY(), 0.01F);
      assertTrue(homeLight0.isMovable());
      assertTrue(homeLight0.isResizable());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertNull(homeLight0.getShininess());
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals(23.119429F, homeLight0.getWidth(), 0.01F);
      assertTrue(homeLight0.isDeformable());
      assertTrue(homeLight0.isVisible());
      assertEquals((-663.6746F), homeLight0.getHeight(), 0.01F);
      assertEquals(")x'.R~1u:;mh@\"W", homeLight0.getDescription());
      assertNull(homeLight0.getCurrency());
      assertEquals(11.559714F, homeLight0.getX(), 0.01F);
      assertEquals("PRICE_VALUE_ADDED_TAX_INCLUDED", homeLight0.getName());
      assertFalse(homeLight0.isBackFaceShown());
      assertFalse(homeLight0.isDoorOrWindow());
      assertFalse(homeLight0.isModelMirrored());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertNull(homeLight0.getColor());
      assertEquals((-663.6746F), homeLight0.getGroundElevation(), 0.01F);
      assertEquals("/", homeLight0.getCatalogId());
      assertEquals(114.0F, homeLight0.getDepth(), 0.01F);
      assertEquals((-663.6746F), homeLight0.getElevation(), 0.01F);
      assertTrue(homeLight0.isTexturable());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertFalse(homeLight0.isNameVisible());
      assertEquals(2, lightSourceArray0.length);
      assertNotSame(homeLight0, homeLight1);
      
      boolean boolean1 = homeLight0.isNameCenterPointAt(23.119429F, (-815.0011F), (-586.992F));
      assertFalse(homeLight0.equals((Object)homeLight1));
      assertFalse(boolean1 == boolean0);
      assertEquals((byte)10, bigDecimal0.byteValue());
      assertEquals((short)10, bigDecimal0.shortValue());
      assertNull(catalogLight0.getGrade());
      assertEquals((-663.6746F), catalogLight0.getElevation(), 0.01F);
      assertEquals("PRICE_VALUE_ADDED_TAX_INCLUDED", catalogLight0.getDescription());
      assertEquals((-663.6746F), catalogLight0.getHeight(), 0.01F);
      assertFalse(catalogLight0.isDoorOrWindow());
      assertTrue(catalogLight0.isMovable());
      assertEquals("PRICE_VALUE_ADDED_TAX_INCLUDED", catalogLight0.getName());
      assertEquals(114.0F, catalogLight0.getDepth(), 0.01F);
      assertNull(catalogLight0.getInformation());
      assertTrue(catalogLight0.isDeformable());
      assertNull(catalogLight0.getCurrency());
      assertEquals("{L", catalogLight0.getCreator());
      assertNull(catalogLight0.getColor());
      assertFalse(catalogLight0.isModifiable());
      assertFalse(catalogLight0.isBackFaceShown());
      assertNull(catalogLight0.getCreationDate());
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertTrue(catalogLight0.isResizable());
      assertEquals("/", catalogLight0.getId());
      assertTrue(catalogLight0.isTexturable());
      assertTrue(catalogLight0.isProportional());
      assertEquals(23.119429F, catalogLight0.getWidth(), 0.01F);
      assertEquals(57.0F, homeLight0.getY(), 0.01F);
      assertTrue(homeLight0.isMovable());
      assertTrue(homeLight0.isResizable());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertNull(homeLight0.getShininess());
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals(23.119429F, homeLight0.getWidth(), 0.01F);
      assertTrue(homeLight0.isDeformable());
      assertTrue(homeLight0.isVisible());
      assertEquals((-663.6746F), homeLight0.getHeight(), 0.01F);
      assertEquals(")x'.R~1u:;mh@\"W", homeLight0.getDescription());
      assertNull(homeLight0.getCurrency());
      assertEquals(11.559714F, homeLight0.getX(), 0.01F);
      assertEquals("PRICE_VALUE_ADDED_TAX_INCLUDED", homeLight0.getName());
      assertFalse(homeLight0.isBackFaceShown());
      assertFalse(homeLight0.isDoorOrWindow());
      assertFalse(homeLight0.isModelMirrored());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertNull(homeLight0.getColor());
      assertEquals((-663.6746F), homeLight0.getGroundElevation(), 0.01F);
      assertEquals("/", homeLight0.getCatalogId());
      assertEquals(114.0F, homeLight0.getDepth(), 0.01F);
      assertEquals((-663.6746F), homeLight0.getElevation(), 0.01F);
      assertTrue(homeLight0.isTexturable());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertFalse(homeLight0.isNameVisible());
      assertEquals(2, lightSourceArray0.length);
      assertNotSame(homeLight0, homeLight1);
      assertFalse(boolean1);
      
      homeLight0.setY(23.119429F);
      assertFalse(homeLight0.equals((Object)homeLight1));
      assertEquals((byte)10, bigDecimal0.byteValue());
      assertEquals((short)10, bigDecimal0.shortValue());
      assertNull(catalogLight0.getGrade());
      assertEquals((-663.6746F), catalogLight0.getElevation(), 0.01F);
      assertEquals("PRICE_VALUE_ADDED_TAX_INCLUDED", catalogLight0.getDescription());
      assertEquals((-663.6746F), catalogLight0.getHeight(), 0.01F);
      assertFalse(catalogLight0.isDoorOrWindow());
      assertTrue(catalogLight0.isMovable());
      assertEquals("PRICE_VALUE_ADDED_TAX_INCLUDED", catalogLight0.getName());
      assertEquals(114.0F, catalogLight0.getDepth(), 0.01F);
      assertNull(catalogLight0.getInformation());
      assertTrue(catalogLight0.isDeformable());
      assertNull(catalogLight0.getCurrency());
      assertEquals("{L", catalogLight0.getCreator());
      assertNull(catalogLight0.getColor());
      assertFalse(catalogLight0.isModifiable());
      assertFalse(catalogLight0.isBackFaceShown());
      assertNull(catalogLight0.getCreationDate());
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertTrue(catalogLight0.isResizable());
      assertEquals("/", catalogLight0.getId());
      assertTrue(catalogLight0.isTexturable());
      assertTrue(catalogLight0.isProportional());
      assertEquals(23.119429F, catalogLight0.getWidth(), 0.01F);
      assertTrue(homeLight0.isMovable());
      assertTrue(homeLight0.isResizable());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertNull(homeLight0.getShininess());
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals(23.119429F, homeLight0.getWidth(), 0.01F);
      assertTrue(homeLight0.isDeformable());
      assertTrue(homeLight0.isVisible());
      assertEquals((-663.6746F), homeLight0.getHeight(), 0.01F);
      assertEquals(")x'.R~1u:;mh@\"W", homeLight0.getDescription());
      assertNull(homeLight0.getCurrency());
      assertEquals(11.559714F, homeLight0.getX(), 0.01F);
      assertEquals("PRICE_VALUE_ADDED_TAX_INCLUDED", homeLight0.getName());
      assertEquals(23.119429F, homeLight0.getY(), 0.01F);
      assertFalse(homeLight0.isBackFaceShown());
      assertFalse(homeLight0.isDoorOrWindow());
      assertFalse(homeLight0.isModelMirrored());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertNull(homeLight0.getColor());
      assertEquals((-663.6746F), homeLight0.getGroundElevation(), 0.01F);
      assertEquals("/", homeLight0.getCatalogId());
      assertEquals(114.0F, homeLight0.getDepth(), 0.01F);
      assertEquals((-663.6746F), homeLight0.getElevation(), 0.01F);
      assertTrue(homeLight0.isTexturable());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertFalse(homeLight0.isNameVisible());
      assertEquals(2, lightSourceArray0.length);
      assertNotSame(homeLight0, homeLight1);
      
      float float0 = homeLight0.getGroundElevation();
      assertFalse(homeLight0.equals((Object)homeLight1));
      assertEquals((byte)10, bigDecimal0.byteValue());
      assertEquals((short)10, bigDecimal0.shortValue());
      assertNull(catalogLight0.getGrade());
      assertEquals((-663.6746F), catalogLight0.getElevation(), 0.01F);
      assertEquals("PRICE_VALUE_ADDED_TAX_INCLUDED", catalogLight0.getDescription());
      assertEquals((-663.6746F), catalogLight0.getHeight(), 0.01F);
      assertFalse(catalogLight0.isDoorOrWindow());
      assertTrue(catalogLight0.isMovable());
      assertEquals("PRICE_VALUE_ADDED_TAX_INCLUDED", catalogLight0.getName());
      assertEquals(114.0F, catalogLight0.getDepth(), 0.01F);
      assertNull(catalogLight0.getInformation());
      assertTrue(catalogLight0.isDeformable());
      assertNull(catalogLight0.getCurrency());
      assertEquals("{L", catalogLight0.getCreator());
      assertNull(catalogLight0.getColor());
      assertFalse(catalogLight0.isModifiable());
      assertFalse(catalogLight0.isBackFaceShown());
      assertNull(catalogLight0.getCreationDate());
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertTrue(catalogLight0.isResizable());
      assertEquals("/", catalogLight0.getId());
      assertTrue(catalogLight0.isTexturable());
      assertTrue(catalogLight0.isProportional());
      assertEquals(23.119429F, catalogLight0.getWidth(), 0.01F);
      assertTrue(homeLight0.isMovable());
      assertTrue(homeLight0.isResizable());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertNull(homeLight0.getShininess());
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals(23.119429F, homeLight0.getWidth(), 0.01F);
      assertTrue(homeLight0.isDeformable());
      assertTrue(homeLight0.isVisible());
      assertEquals((-663.6746F), homeLight0.getHeight(), 0.01F);
      assertEquals(")x'.R~1u:;mh@\"W", homeLight0.getDescription());
      assertNull(homeLight0.getCurrency());
      assertEquals(11.559714F, homeLight0.getX(), 0.01F);
      assertEquals("PRICE_VALUE_ADDED_TAX_INCLUDED", homeLight0.getName());
      assertEquals(23.119429F, homeLight0.getY(), 0.01F);
      assertFalse(homeLight0.isBackFaceShown());
      assertFalse(homeLight0.isDoorOrWindow());
      assertFalse(homeLight0.isModelMirrored());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertNull(homeLight0.getColor());
      assertEquals((-663.6746F), homeLight0.getGroundElevation(), 0.01F);
      assertEquals("/", homeLight0.getCatalogId());
      assertEquals(114.0F, homeLight0.getDepth(), 0.01F);
      assertEquals((-663.6746F), homeLight0.getElevation(), 0.01F);
      assertTrue(homeLight0.isTexturable());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertFalse(homeLight0.isNameVisible());
      assertEquals(2, lightSourceArray0.length);
      assertNotSame(homeLight0, homeLight1);
      assertEquals((-663.6746F), float0, 0.01F);
      
      float float1 = homeLight1.getDepth();
      assertFalse(homeLight0.equals((Object)homeLight1));
      assertFalse(homeLight1.equals((Object)homeLight0));
      assertNotEquals(float1, float0, 0.01F);
      assertEquals((byte)10, bigDecimal0.byteValue());
      assertEquals((short)10, bigDecimal0.shortValue());
      assertNull(catalogLight0.getGrade());
      assertEquals((-663.6746F), catalogLight0.getElevation(), 0.01F);
      assertEquals("PRICE_VALUE_ADDED_TAX_INCLUDED", catalogLight0.getDescription());
      assertEquals((-663.6746F), catalogLight0.getHeight(), 0.01F);
      assertFalse(catalogLight0.isDoorOrWindow());
      assertTrue(catalogLight0.isMovable());
      assertEquals("PRICE_VALUE_ADDED_TAX_INCLUDED", catalogLight0.getName());
      assertEquals(114.0F, catalogLight0.getDepth(), 0.01F);
      assertNull(catalogLight0.getInformation());
      assertTrue(catalogLight0.isDeformable());
      assertNull(catalogLight0.getCurrency());
      assertEquals("{L", catalogLight0.getCreator());
      assertNull(catalogLight0.getColor());
      assertFalse(catalogLight0.isModifiable());
      assertFalse(catalogLight0.isBackFaceShown());
      assertNull(catalogLight0.getCreationDate());
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertTrue(catalogLight0.isResizable());
      assertEquals("/", catalogLight0.getId());
      assertTrue(catalogLight0.isTexturable());
      assertTrue(catalogLight0.isProportional());
      assertEquals(23.119429F, catalogLight0.getWidth(), 0.01F);
      assertTrue(homeLight0.isMovable());
      assertTrue(homeLight0.isResizable());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertNull(homeLight0.getShininess());
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals(23.119429F, homeLight0.getWidth(), 0.01F);
      assertTrue(homeLight0.isDeformable());
      assertTrue(homeLight0.isVisible());
      assertEquals((-663.6746F), homeLight0.getHeight(), 0.01F);
      assertEquals(")x'.R~1u:;mh@\"W", homeLight0.getDescription());
      assertNull(homeLight0.getCurrency());
      assertEquals(11.559714F, homeLight0.getX(), 0.01F);
      assertEquals("PRICE_VALUE_ADDED_TAX_INCLUDED", homeLight0.getName());
      assertEquals(23.119429F, homeLight0.getY(), 0.01F);
      assertFalse(homeLight0.isBackFaceShown());
      assertFalse(homeLight0.isDoorOrWindow());
      assertFalse(homeLight0.isModelMirrored());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertNull(homeLight0.getColor());
      assertEquals((-663.6746F), homeLight0.getGroundElevation(), 0.01F);
      assertEquals("/", homeLight0.getCatalogId());
      assertEquals(114.0F, homeLight0.getDepth(), 0.01F);
      assertEquals((-663.6746F), homeLight0.getElevation(), 0.01F);
      assertTrue(homeLight0.isTexturable());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertFalse(homeLight0.isNameVisible());
      assertEquals(57.0F, homeLight1.getY(), 0.01F);
      assertEquals(11.559714F, homeLight1.getX(), 0.01F);
      assertTrue(homeLight1.isMovable());
      assertNull(homeLight1.getStaircaseCutOutShape());
      assertEquals("PRICE_VALUE_ADDED_TAX_INCLUDED", homeLight1.getName());
      assertNull(homeLight1.getShininess());
      assertTrue(homeLight1.isResizable());
      assertEquals("PRICE_VALUE_ADDED_TAX_INCLUDED", homeLight1.getDescription());
      assertEquals(0.5F, homeLight1.getPower(), 0.01F);
      assertEquals(0.0F, homeLight1.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeLight1.getNameYOffset(), 0.01F);
      assertEquals((-663.6746F), homeLight1.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight1.getAngle(), 0.01F);
      assertEquals((-663.6746F), homeLight1.getElevation(), 0.01F);
      assertFalse(homeLight1.isNameVisible());
      assertEquals(114.0F, homeLight1.getDepth(), 0.01F);
      assertEquals("/", homeLight1.getCatalogId());
      assertFalse(homeLight1.isBackFaceShown());
      assertNull(homeLight1.getColor());
      assertFalse(homeLight1.isModelMirrored());
      assertTrue(homeLight1.isTexturable());
      assertFalse(homeLight1.isDoorOrWindow());
      assertTrue(homeLight1.isVisible());
      assertEquals(23.119429F, homeLight1.getWidth(), 0.01F);
      assertTrue(homeLight1.isDeformable());
      assertNull(homeLight1.getCurrency());
      assertEquals(0.0F, homeLight1.getNameAngle(), 0.01F);
      assertEquals((-663.6746F), homeLight1.getHeight(), 0.01F);
      assertEquals(2, lightSourceArray0.length);
      assertNotSame(homeLight0, homeLight1);
      assertNotSame(homeLight1, homeLight0);
      assertEquals(114.0F, float1, 0.01F);
      
      homeLight1.setNameAngle((-815.0011F));
      assertFalse(homeLight0.equals((Object)homeLight1));
      assertFalse(homeLight1.equals((Object)homeLight0));
      assertEquals((byte)10, bigDecimal0.byteValue());
      assertEquals((short)10, bigDecimal0.shortValue());
      assertNull(catalogLight0.getGrade());
      assertEquals((-663.6746F), catalogLight0.getElevation(), 0.01F);
      assertEquals("PRICE_VALUE_ADDED_TAX_INCLUDED", catalogLight0.getDescription());
      assertEquals((-663.6746F), catalogLight0.getHeight(), 0.01F);
      assertFalse(catalogLight0.isDoorOrWindow());
      assertTrue(catalogLight0.isMovable());
      assertEquals("PRICE_VALUE_ADDED_TAX_INCLUDED", catalogLight0.getName());
      assertEquals(114.0F, catalogLight0.getDepth(), 0.01F);
      assertNull(catalogLight0.getInformation());
      assertTrue(catalogLight0.isDeformable());
      assertNull(catalogLight0.getCurrency());
      assertEquals("{L", catalogLight0.getCreator());
      assertNull(catalogLight0.getColor());
      assertFalse(catalogLight0.isModifiable());
      assertFalse(catalogLight0.isBackFaceShown());
      assertNull(catalogLight0.getCreationDate());
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertTrue(catalogLight0.isResizable());
      assertEquals("/", catalogLight0.getId());
      assertTrue(catalogLight0.isTexturable());
      assertTrue(catalogLight0.isProportional());
      assertEquals(23.119429F, catalogLight0.getWidth(), 0.01F);
      assertTrue(homeLight0.isMovable());
      assertTrue(homeLight0.isResizable());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertNull(homeLight0.getShininess());
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals(23.119429F, homeLight0.getWidth(), 0.01F);
      assertTrue(homeLight0.isDeformable());
      assertTrue(homeLight0.isVisible());
      assertEquals((-663.6746F), homeLight0.getHeight(), 0.01F);
      assertEquals(")x'.R~1u:;mh@\"W", homeLight0.getDescription());
      assertNull(homeLight0.getCurrency());
      assertEquals(11.559714F, homeLight0.getX(), 0.01F);
      assertEquals("PRICE_VALUE_ADDED_TAX_INCLUDED", homeLight0.getName());
      assertEquals(23.119429F, homeLight0.getY(), 0.01F);
      assertFalse(homeLight0.isBackFaceShown());
      assertFalse(homeLight0.isDoorOrWindow());
      assertFalse(homeLight0.isModelMirrored());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertNull(homeLight0.getColor());
      assertEquals((-663.6746F), homeLight0.getGroundElevation(), 0.01F);
      assertEquals("/", homeLight0.getCatalogId());
      assertEquals(114.0F, homeLight0.getDepth(), 0.01F);
      assertEquals((-663.6746F), homeLight0.getElevation(), 0.01F);
      assertTrue(homeLight0.isTexturable());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertFalse(homeLight0.isNameVisible());
      assertEquals(57.0F, homeLight1.getY(), 0.01F);
      assertEquals(11.559714F, homeLight1.getX(), 0.01F);
      assertTrue(homeLight1.isMovable());
      assertNull(homeLight1.getStaircaseCutOutShape());
      assertEquals("PRICE_VALUE_ADDED_TAX_INCLUDED", homeLight1.getName());
      assertNull(homeLight1.getShininess());
      assertTrue(homeLight1.isResizable());
      assertEquals("PRICE_VALUE_ADDED_TAX_INCLUDED", homeLight1.getDescription());
      assertEquals(0.5F, homeLight1.getPower(), 0.01F);
      assertEquals(0.0F, homeLight1.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeLight1.getNameYOffset(), 0.01F);
      assertEquals(1.8129913F, homeLight1.getNameAngle(), 0.01F);
      assertEquals((-663.6746F), homeLight1.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight1.getAngle(), 0.01F);
      assertEquals((-663.6746F), homeLight1.getElevation(), 0.01F);
      assertFalse(homeLight1.isNameVisible());
      assertEquals(114.0F, homeLight1.getDepth(), 0.01F);
      assertEquals("/", homeLight1.getCatalogId());
      assertFalse(homeLight1.isBackFaceShown());
      assertNull(homeLight1.getColor());
      assertFalse(homeLight1.isModelMirrored());
      assertTrue(homeLight1.isTexturable());
      assertFalse(homeLight1.isDoorOrWindow());
      assertTrue(homeLight1.isVisible());
      assertEquals(23.119429F, homeLight1.getWidth(), 0.01F);
      assertTrue(homeLight1.isDeformable());
      assertNull(homeLight1.getCurrency());
      assertEquals((-663.6746F), homeLight1.getHeight(), 0.01F);
      assertEquals(2, lightSourceArray0.length);
      assertNotSame(homeLight0, homeLight1);
      assertNotSame(homeLight1, homeLight0);
      
      float[][] floatArray0 = homeLight1.getModelRotation();
      assertFalse(homeLight0.equals((Object)homeLight1));
      assertFalse(homeLight1.equals((Object)homeLight0));
      assertEquals((byte)10, bigDecimal0.byteValue());
      assertEquals((short)10, bigDecimal0.shortValue());
      assertNull(catalogLight0.getGrade());
      assertEquals((-663.6746F), catalogLight0.getElevation(), 0.01F);
      assertEquals("PRICE_VALUE_ADDED_TAX_INCLUDED", catalogLight0.getDescription());
      assertEquals((-663.6746F), catalogLight0.getHeight(), 0.01F);
      assertFalse(catalogLight0.isDoorOrWindow());
      assertTrue(catalogLight0.isMovable());
      assertEquals("PRICE_VALUE_ADDED_TAX_INCLUDED", catalogLight0.getName());
      assertEquals(114.0F, catalogLight0.getDepth(), 0.01F);
      assertNull(catalogLight0.getInformation());
      assertTrue(catalogLight0.isDeformable());
      assertNull(catalogLight0.getCurrency());
      assertEquals("{L", catalogLight0.getCreator());
      assertNull(catalogLight0.getColor());
      assertFalse(catalogLight0.isModifiable());
      assertFalse(catalogLight0.isBackFaceShown());
      assertNull(catalogLight0.getCreationDate());
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertTrue(catalogLight0.isResizable());
      assertEquals("/", catalogLight0.getId());
      assertTrue(catalogLight0.isTexturable());
      assertTrue(catalogLight0.isProportional());
      assertEquals(23.119429F, catalogLight0.getWidth(), 0.01F);
      assertTrue(homeLight0.isMovable());
      assertTrue(homeLight0.isResizable());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertNull(homeLight0.getShininess());
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals(23.119429F, homeLight0.getWidth(), 0.01F);
      assertTrue(homeLight0.isDeformable());
      assertTrue(homeLight0.isVisible());
      assertEquals((-663.6746F), homeLight0.getHeight(), 0.01F);
      assertEquals(")x'.R~1u:;mh@\"W", homeLight0.getDescription());
      assertNull(homeLight0.getCurrency());
      assertEquals(11.559714F, homeLight0.getX(), 0.01F);
      assertEquals("PRICE_VALUE_ADDED_TAX_INCLUDED", homeLight0.getName());
      assertEquals(23.119429F, homeLight0.getY(), 0.01F);
      assertFalse(homeLight0.isBackFaceShown());
      assertFalse(homeLight0.isDoorOrWindow());
      assertFalse(homeLight0.isModelMirrored());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertNull(homeLight0.getColor());
      assertEquals((-663.6746F), homeLight0.getGroundElevation(), 0.01F);
      assertEquals("/", homeLight0.getCatalogId());
      assertEquals(114.0F, homeLight0.getDepth(), 0.01F);
      assertEquals((-663.6746F), homeLight0.getElevation(), 0.01F);
      assertTrue(homeLight0.isTexturable());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertFalse(homeLight0.isNameVisible());
      assertEquals(57.0F, homeLight1.getY(), 0.01F);
      assertEquals(11.559714F, homeLight1.getX(), 0.01F);
      assertTrue(homeLight1.isMovable());
      assertNull(homeLight1.getStaircaseCutOutShape());
      assertEquals("PRICE_VALUE_ADDED_TAX_INCLUDED", homeLight1.getName());
      assertNull(homeLight1.getShininess());
      assertTrue(homeLight1.isResizable());
      assertEquals("PRICE_VALUE_ADDED_TAX_INCLUDED", homeLight1.getDescription());
      assertEquals(0.5F, homeLight1.getPower(), 0.01F);
      assertEquals(0.0F, homeLight1.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeLight1.getNameYOffset(), 0.01F);
      assertEquals(1.8129913F, homeLight1.getNameAngle(), 0.01F);
      assertEquals((-663.6746F), homeLight1.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight1.getAngle(), 0.01F);
      assertEquals((-663.6746F), homeLight1.getElevation(), 0.01F);
      assertFalse(homeLight1.isNameVisible());
      assertEquals(114.0F, homeLight1.getDepth(), 0.01F);
      assertEquals("/", homeLight1.getCatalogId());
      assertFalse(homeLight1.isBackFaceShown());
      assertNull(homeLight1.getColor());
      assertFalse(homeLight1.isModelMirrored());
      assertTrue(homeLight1.isTexturable());
      assertFalse(homeLight1.isDoorOrWindow());
      assertTrue(homeLight1.isVisible());
      assertEquals(23.119429F, homeLight1.getWidth(), 0.01F);
      assertTrue(homeLight1.isDeformable());
      assertNull(homeLight1.getCurrency());
      assertEquals((-663.6746F), homeLight1.getHeight(), 0.01F);
      assertEquals(2, lightSourceArray0.length);
      assertEquals(3, floatArray0.length);
      assertNotSame(homeLight0, homeLight1);
      assertNotSame(homeLight1, homeLight0);
      assertNotNull(floatArray0);
      
      HomeLight homeLight2 = homeLight1.clone();
      assertFalse(homeLight0.equals((Object)homeLight1));
      assertFalse(homeLight1.equals((Object)homeLight0));
      assertFalse(homeLight2.equals((Object)homeLight1));
      assertFalse(homeLight2.equals((Object)homeLight0));
      assertEquals((byte)10, bigDecimal0.byteValue());
      assertEquals((short)10, bigDecimal0.shortValue());
      assertNull(catalogLight0.getGrade());
      assertEquals((-663.6746F), catalogLight0.getElevation(), 0.01F);
      assertEquals("PRICE_VALUE_ADDED_TAX_INCLUDED", catalogLight0.getDescription());
      assertEquals((-663.6746F), catalogLight0.getHeight(), 0.01F);
      assertFalse(catalogLight0.isDoorOrWindow());
      assertTrue(catalogLight0.isMovable());
      assertEquals("PRICE_VALUE_ADDED_TAX_INCLUDED", catalogLight0.getName());
      assertEquals(114.0F, catalogLight0.getDepth(), 0.01F);
      assertNull(catalogLight0.getInformation());
      assertTrue(catalogLight0.isDeformable());
      assertNull(catalogLight0.getCurrency());
      assertEquals("{L", catalogLight0.getCreator());
      assertNull(catalogLight0.getColor());
      assertFalse(catalogLight0.isModifiable());
      assertFalse(catalogLight0.isBackFaceShown());
      assertNull(catalogLight0.getCreationDate());
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertTrue(catalogLight0.isResizable());
      assertEquals("/", catalogLight0.getId());
      assertTrue(catalogLight0.isTexturable());
      assertTrue(catalogLight0.isProportional());
      assertEquals(23.119429F, catalogLight0.getWidth(), 0.01F);
      assertTrue(homeLight0.isMovable());
      assertTrue(homeLight0.isResizable());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertNull(homeLight0.getShininess());
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals(23.119429F, homeLight0.getWidth(), 0.01F);
      assertTrue(homeLight0.isDeformable());
      assertTrue(homeLight0.isVisible());
      assertEquals((-663.6746F), homeLight0.getHeight(), 0.01F);
      assertEquals(")x'.R~1u:;mh@\"W", homeLight0.getDescription());
      assertNull(homeLight0.getCurrency());
      assertEquals(11.559714F, homeLight0.getX(), 0.01F);
      assertEquals("PRICE_VALUE_ADDED_TAX_INCLUDED", homeLight0.getName());
      assertEquals(23.119429F, homeLight0.getY(), 0.01F);
      assertFalse(homeLight0.isBackFaceShown());
      assertFalse(homeLight0.isDoorOrWindow());
      assertFalse(homeLight0.isModelMirrored());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertNull(homeLight0.getColor());
      assertEquals((-663.6746F), homeLight0.getGroundElevation(), 0.01F);
      assertEquals("/", homeLight0.getCatalogId());
      assertEquals(114.0F, homeLight0.getDepth(), 0.01F);
      assertEquals((-663.6746F), homeLight0.getElevation(), 0.01F);
      assertTrue(homeLight0.isTexturable());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertFalse(homeLight0.isNameVisible());
      assertEquals(57.0F, homeLight1.getY(), 0.01F);
      assertEquals(11.559714F, homeLight1.getX(), 0.01F);
      assertTrue(homeLight1.isMovable());
      assertNull(homeLight1.getStaircaseCutOutShape());
      assertEquals("PRICE_VALUE_ADDED_TAX_INCLUDED", homeLight1.getName());
      assertNull(homeLight1.getShininess());
      assertTrue(homeLight1.isResizable());
      assertEquals("PRICE_VALUE_ADDED_TAX_INCLUDED", homeLight1.getDescription());
      assertEquals(0.5F, homeLight1.getPower(), 0.01F);
      assertEquals(0.0F, homeLight1.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeLight1.getNameYOffset(), 0.01F);
      assertEquals(1.8129913F, homeLight1.getNameAngle(), 0.01F);
      assertEquals((-663.6746F), homeLight1.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight1.getAngle(), 0.01F);
      assertEquals((-663.6746F), homeLight1.getElevation(), 0.01F);
      assertFalse(homeLight1.isNameVisible());
      assertEquals(114.0F, homeLight1.getDepth(), 0.01F);
      assertEquals("/", homeLight1.getCatalogId());
      assertFalse(homeLight1.isBackFaceShown());
      assertNull(homeLight1.getColor());
      assertFalse(homeLight1.isModelMirrored());
      assertTrue(homeLight1.isTexturable());
      assertFalse(homeLight1.isDoorOrWindow());
      assertTrue(homeLight1.isVisible());
      assertEquals(23.119429F, homeLight1.getWidth(), 0.01F);
      assertTrue(homeLight1.isDeformable());
      assertNull(homeLight1.getCurrency());
      assertEquals((-663.6746F), homeLight1.getHeight(), 0.01F);
      assertNull(homeLight2.getColor());
      assertFalse(homeLight2.isModelMirrored());
      assertTrue(homeLight2.isTexturable());
      assertNull(homeLight2.getCurrency());
      assertEquals(114.0F, homeLight2.getDepth(), 0.01F);
      assertFalse(homeLight2.isBackFaceShown());
      assertFalse(homeLight2.isNameVisible());
      assertEquals((-663.6746F), homeLight2.getElevation(), 0.01F);
      assertEquals((-663.6746F), homeLight2.getHeight(), 0.01F);
      assertEquals(23.119429F, homeLight2.getWidth(), 0.01F);
      assertTrue(homeLight2.isDeformable());
      assertTrue(homeLight2.isVisible());
      assertEquals(0.0F, homeLight2.getAngle(), 0.01F);
      assertEquals((-663.6746F), homeLight2.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight2.getNameXOffset(), 0.01F);
      assertFalse(homeLight2.isDoorOrWindow());
      assertNull(homeLight2.getStaircaseCutOutShape());
      assertEquals("PRICE_VALUE_ADDED_TAX_INCLUDED", homeLight2.getName());
      assertEquals(57.0F, homeLight2.getY(), 0.01F);
      assertTrue(homeLight2.isResizable());
      assertEquals(0.5F, homeLight2.getPower(), 0.01F);
      assertNull(homeLight2.getShininess());
      assertEquals(11.559714F, homeLight2.getX(), 0.01F);
      assertTrue(homeLight2.isMovable());
      assertEquals("/", homeLight2.getCatalogId());
      assertEquals(1.8129913F, homeLight2.getNameAngle(), 0.01F);
      assertEquals("PRICE_VALUE_ADDED_TAX_INCLUDED", homeLight2.getDescription());
      assertEquals(0.0F, homeLight2.getNameYOffset(), 0.01F);
      assertEquals(2, lightSourceArray0.length);
      assertNotSame(homeLight0, homeLight1);
      assertNotSame(homeLight0, homeLight2);
      assertNotSame(homeLight1, homeLight2);
      assertNotSame(homeLight1, homeLight0);
      assertNotSame(homeLight2, homeLight1);
      assertNotSame(homeLight2, homeLight0);
      assertNotNull(homeLight2);
      
      Integer integer0 = homeLight2.getColor();
      assertFalse(homeLight0.equals((Object)homeLight1));
      assertFalse(homeLight0.equals((Object)homeLight2));
      assertFalse(homeLight1.equals((Object)homeLight2));
      assertFalse(homeLight1.equals((Object)homeLight0));
      assertFalse(homeLight2.equals((Object)homeLight1));
      assertFalse(homeLight2.equals((Object)homeLight0));
      assertEquals((byte)10, bigDecimal0.byteValue());
      assertEquals((short)10, bigDecimal0.shortValue());
      assertNull(catalogLight0.getGrade());
      assertEquals((-663.6746F), catalogLight0.getElevation(), 0.01F);
      assertEquals("PRICE_VALUE_ADDED_TAX_INCLUDED", catalogLight0.getDescription());
      assertEquals((-663.6746F), catalogLight0.getHeight(), 0.01F);
      assertFalse(catalogLight0.isDoorOrWindow());
      assertTrue(catalogLight0.isMovable());
      assertEquals("PRICE_VALUE_ADDED_TAX_INCLUDED", catalogLight0.getName());
      assertEquals(114.0F, catalogLight0.getDepth(), 0.01F);
      assertNull(catalogLight0.getInformation());
      assertTrue(catalogLight0.isDeformable());
      assertNull(catalogLight0.getCurrency());
      assertEquals("{L", catalogLight0.getCreator());
      assertNull(catalogLight0.getColor());
      assertFalse(catalogLight0.isModifiable());
      assertFalse(catalogLight0.isBackFaceShown());
      assertNull(catalogLight0.getCreationDate());
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertTrue(catalogLight0.isResizable());
      assertEquals("/", catalogLight0.getId());
      assertTrue(catalogLight0.isTexturable());
      assertTrue(catalogLight0.isProportional());
      assertEquals(23.119429F, catalogLight0.getWidth(), 0.01F);
      assertTrue(homeLight0.isMovable());
      assertTrue(homeLight0.isResizable());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertNull(homeLight0.getShininess());
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals(23.119429F, homeLight0.getWidth(), 0.01F);
      assertTrue(homeLight0.isDeformable());
      assertTrue(homeLight0.isVisible());
      assertEquals((-663.6746F), homeLight0.getHeight(), 0.01F);
      assertEquals(")x'.R~1u:;mh@\"W", homeLight0.getDescription());
      assertNull(homeLight0.getCurrency());
      assertEquals(11.559714F, homeLight0.getX(), 0.01F);
      assertEquals("PRICE_VALUE_ADDED_TAX_INCLUDED", homeLight0.getName());
      assertEquals(23.119429F, homeLight0.getY(), 0.01F);
      assertFalse(homeLight0.isBackFaceShown());
      assertFalse(homeLight0.isDoorOrWindow());
      assertFalse(homeLight0.isModelMirrored());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertNull(homeLight0.getColor());
      assertEquals((-663.6746F), homeLight0.getGroundElevation(), 0.01F);
      assertEquals("/", homeLight0.getCatalogId());
      assertEquals(114.0F, homeLight0.getDepth(), 0.01F);
      assertEquals((-663.6746F), homeLight0.getElevation(), 0.01F);
      assertTrue(homeLight0.isTexturable());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertFalse(homeLight0.isNameVisible());
      assertEquals(57.0F, homeLight1.getY(), 0.01F);
      assertEquals(11.559714F, homeLight1.getX(), 0.01F);
      assertTrue(homeLight1.isMovable());
      assertNull(homeLight1.getStaircaseCutOutShape());
      assertEquals("PRICE_VALUE_ADDED_TAX_INCLUDED", homeLight1.getName());
      assertNull(homeLight1.getShininess());
      assertTrue(homeLight1.isResizable());
      assertEquals("PRICE_VALUE_ADDED_TAX_INCLUDED", homeLight1.getDescription());
      assertEquals(0.5F, homeLight1.getPower(), 0.01F);
      assertEquals(0.0F, homeLight1.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeLight1.getNameYOffset(), 0.01F);
      assertEquals(1.8129913F, homeLight1.getNameAngle(), 0.01F);
      assertEquals((-663.6746F), homeLight1.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight1.getAngle(), 0.01F);
      assertEquals((-663.6746F), homeLight1.getElevation(), 0.01F);
      assertFalse(homeLight1.isNameVisible());
      assertEquals(114.0F, homeLight1.getDepth(), 0.01F);
      assertEquals("/", homeLight1.getCatalogId());
      assertFalse(homeLight1.isBackFaceShown());
      assertNull(homeLight1.getColor());
      assertFalse(homeLight1.isModelMirrored());
      assertTrue(homeLight1.isTexturable());
      assertFalse(homeLight1.isDoorOrWindow());
      assertTrue(homeLight1.isVisible());
      assertEquals(23.119429F, homeLight1.getWidth(), 0.01F);
      assertTrue(homeLight1.isDeformable());
      assertNull(homeLight1.getCurrency());
      assertEquals((-663.6746F), homeLight1.getHeight(), 0.01F);
      assertNull(homeLight2.getColor());
      assertFalse(homeLight2.isModelMirrored());
      assertTrue(homeLight2.isTexturable());
      assertNull(homeLight2.getCurrency());
      assertEquals(114.0F, homeLight2.getDepth(), 0.01F);
      assertFalse(homeLight2.isBackFaceShown());
      assertFalse(homeLight2.isNameVisible());
      assertEquals((-663.6746F), homeLight2.getElevation(), 0.01F);
      assertEquals((-663.6746F), homeLight2.getHeight(), 0.01F);
      assertEquals(23.119429F, homeLight2.getWidth(), 0.01F);
      assertTrue(homeLight2.isDeformable());
      assertTrue(homeLight2.isVisible());
      assertEquals(0.0F, homeLight2.getAngle(), 0.01F);
      assertEquals((-663.6746F), homeLight2.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight2.getNameXOffset(), 0.01F);
      assertFalse(homeLight2.isDoorOrWindow());
      assertNull(homeLight2.getStaircaseCutOutShape());
      assertEquals("PRICE_VALUE_ADDED_TAX_INCLUDED", homeLight2.getName());
      assertEquals(57.0F, homeLight2.getY(), 0.01F);
      assertTrue(homeLight2.isResizable());
      assertEquals(0.5F, homeLight2.getPower(), 0.01F);
      assertNull(homeLight2.getShininess());
      assertEquals(11.559714F, homeLight2.getX(), 0.01F);
      assertTrue(homeLight2.isMovable());
      assertEquals("/", homeLight2.getCatalogId());
      assertEquals(1.8129913F, homeLight2.getNameAngle(), 0.01F);
      assertEquals("PRICE_VALUE_ADDED_TAX_INCLUDED", homeLight2.getDescription());
      assertEquals(0.0F, homeLight2.getNameYOffset(), 0.01F);
      assertEquals(2, lightSourceArray0.length);
      assertNotSame(homeLight0, homeLight1);
      assertNotSame(homeLight0, homeLight2);
      assertNotSame(homeLight1, homeLight2);
      assertNotSame(homeLight1, homeLight0);
      assertNotSame(homeLight2, homeLight1);
      assertNotSame(homeLight2, homeLight0);
      assertNull(integer0);
      
      float float2 = homeLight2.getNameAngle();
      assertNotEquals(float2, float1, 0.01F);
      assertNotEquals(float2, float0, 0.01F);
      assertFalse(homeLight0.equals((Object)homeLight1));
      assertFalse(homeLight0.equals((Object)homeLight2));
      assertFalse(homeLight1.equals((Object)homeLight2));
      assertFalse(homeLight1.equals((Object)homeLight0));
      assertFalse(homeLight2.equals((Object)homeLight1));
      assertFalse(homeLight2.equals((Object)homeLight0));
      assertEquals((byte)10, bigDecimal0.byteValue());
      assertEquals((short)10, bigDecimal0.shortValue());
      assertNull(catalogLight0.getGrade());
      assertEquals((-663.6746F), catalogLight0.getElevation(), 0.01F);
      assertEquals("PRICE_VALUE_ADDED_TAX_INCLUDED", catalogLight0.getDescription());
      assertEquals((-663.6746F), catalogLight0.getHeight(), 0.01F);
      assertFalse(catalogLight0.isDoorOrWindow());
      assertTrue(catalogLight0.isMovable());
      assertEquals("PRICE_VALUE_ADDED_TAX_INCLUDED", catalogLight0.getName());
      assertEquals(114.0F, catalogLight0.getDepth(), 0.01F);
      assertNull(catalogLight0.getInformation());
      assertTrue(catalogLight0.isDeformable());
      assertNull(catalogLight0.getCurrency());
      assertEquals("{L", catalogLight0.getCreator());
      assertNull(catalogLight0.getColor());
      assertFalse(catalogLight0.isModifiable());
      assertFalse(catalogLight0.isBackFaceShown());
      assertNull(catalogLight0.getCreationDate());
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertTrue(catalogLight0.isResizable());
      assertEquals("/", catalogLight0.getId());
      assertTrue(catalogLight0.isTexturable());
      assertTrue(catalogLight0.isProportional());
      assertEquals(23.119429F, catalogLight0.getWidth(), 0.01F);
      assertTrue(homeLight0.isMovable());
      assertTrue(homeLight0.isResizable());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertNull(homeLight0.getShininess());
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals(23.119429F, homeLight0.getWidth(), 0.01F);
      assertTrue(homeLight0.isDeformable());
      assertTrue(homeLight0.isVisible());
      assertEquals((-663.6746F), homeLight0.getHeight(), 0.01F);
      assertEquals(")x'.R~1u:;mh@\"W", homeLight0.getDescription());
      assertNull(homeLight0.getCurrency());
      assertEquals(11.559714F, homeLight0.getX(), 0.01F);
      assertEquals("PRICE_VALUE_ADDED_TAX_INCLUDED", homeLight0.getName());
      assertEquals(23.119429F, homeLight0.getY(), 0.01F);
      assertFalse(homeLight0.isBackFaceShown());
      assertFalse(homeLight0.isDoorOrWindow());
      assertFalse(homeLight0.isModelMirrored());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertNull(homeLight0.getColor());
      assertEquals((-663.6746F), homeLight0.getGroundElevation(), 0.01F);
      assertEquals("/", homeLight0.getCatalogId());
      assertEquals(114.0F, homeLight0.getDepth(), 0.01F);
      assertEquals((-663.6746F), homeLight0.getElevation(), 0.01F);
      assertTrue(homeLight0.isTexturable());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertFalse(homeLight0.isNameVisible());
      assertEquals(57.0F, homeLight1.getY(), 0.01F);
      assertEquals(11.559714F, homeLight1.getX(), 0.01F);
      assertTrue(homeLight1.isMovable());
      assertNull(homeLight1.getStaircaseCutOutShape());
      assertEquals("PRICE_VALUE_ADDED_TAX_INCLUDED", homeLight1.getName());
      assertNull(homeLight1.getShininess());
      assertTrue(homeLight1.isResizable());
      assertEquals("PRICE_VALUE_ADDED_TAX_INCLUDED", homeLight1.getDescription());
      assertEquals(0.5F, homeLight1.getPower(), 0.01F);
      assertEquals(0.0F, homeLight1.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeLight1.getNameYOffset(), 0.01F);
      assertEquals(1.8129913F, homeLight1.getNameAngle(), 0.01F);
      assertEquals((-663.6746F), homeLight1.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight1.getAngle(), 0.01F);
      assertEquals((-663.6746F), homeLight1.getElevation(), 0.01F);
      assertFalse(homeLight1.isNameVisible());
      assertEquals(114.0F, homeLight1.getDepth(), 0.01F);
      assertEquals("/", homeLight1.getCatalogId());
      assertFalse(homeLight1.isBackFaceShown());
      assertNull(homeLight1.getColor());
      assertFalse(homeLight1.isModelMirrored());
      assertTrue(homeLight1.isTexturable());
      assertFalse(homeLight1.isDoorOrWindow());
      assertTrue(homeLight1.isVisible());
      assertEquals(23.119429F, homeLight1.getWidth(), 0.01F);
      assertTrue(homeLight1.isDeformable());
      assertNull(homeLight1.getCurrency());
      assertEquals((-663.6746F), homeLight1.getHeight(), 0.01F);
      assertNull(homeLight2.getColor());
      assertFalse(homeLight2.isModelMirrored());
      assertTrue(homeLight2.isTexturable());
      assertNull(homeLight2.getCurrency());
      assertEquals(114.0F, homeLight2.getDepth(), 0.01F);
      assertFalse(homeLight2.isBackFaceShown());
      assertFalse(homeLight2.isNameVisible());
      assertEquals((-663.6746F), homeLight2.getElevation(), 0.01F);
      assertEquals((-663.6746F), homeLight2.getHeight(), 0.01F);
      assertEquals(23.119429F, homeLight2.getWidth(), 0.01F);
      assertTrue(homeLight2.isDeformable());
      assertTrue(homeLight2.isVisible());
      assertEquals(0.0F, homeLight2.getAngle(), 0.01F);
      assertEquals((-663.6746F), homeLight2.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight2.getNameXOffset(), 0.01F);
      assertFalse(homeLight2.isDoorOrWindow());
      assertNull(homeLight2.getStaircaseCutOutShape());
      assertEquals("PRICE_VALUE_ADDED_TAX_INCLUDED", homeLight2.getName());
      assertEquals(57.0F, homeLight2.getY(), 0.01F);
      assertTrue(homeLight2.isResizable());
      assertEquals(0.5F, homeLight2.getPower(), 0.01F);
      assertNull(homeLight2.getShininess());
      assertEquals(11.559714F, homeLight2.getX(), 0.01F);
      assertTrue(homeLight2.isMovable());
      assertEquals("/", homeLight2.getCatalogId());
      assertEquals(1.8129913F, homeLight2.getNameAngle(), 0.01F);
      assertEquals("PRICE_VALUE_ADDED_TAX_INCLUDED", homeLight2.getDescription());
      assertEquals(0.0F, homeLight2.getNameYOffset(), 0.01F);
      assertEquals(2, lightSourceArray0.length);
      assertNotSame(homeLight0, homeLight1);
      assertNotSame(homeLight0, homeLight2);
      assertNotSame(homeLight1, homeLight2);
      assertNotSame(homeLight1, homeLight0);
      assertNotSame(homeLight2, homeLight1);
      assertNotSame(homeLight2, homeLight0);
      assertEquals(1.8129913F, float2, 0.01F);
      
      float float3 = homeLight2.getGroundElevation();
      assertNotEquals(float3, float1, 0.01F);
      assertNotEquals(float3, float2, 0.01F);
      assertEquals(float3, float0, 0.01F);
      assertFalse(homeLight0.equals((Object)homeLight1));
      assertFalse(homeLight0.equals((Object)homeLight2));
      assertFalse(homeLight1.equals((Object)homeLight2));
      assertFalse(homeLight1.equals((Object)homeLight0));
      assertFalse(homeLight2.equals((Object)homeLight1));
      assertFalse(homeLight2.equals((Object)homeLight0));
      assertEquals((byte)10, bigDecimal0.byteValue());
      assertEquals((short)10, bigDecimal0.shortValue());
      assertNull(catalogLight0.getGrade());
      assertEquals((-663.6746F), catalogLight0.getElevation(), 0.01F);
      assertEquals("PRICE_VALUE_ADDED_TAX_INCLUDED", catalogLight0.getDescription());
      assertEquals((-663.6746F), catalogLight0.getHeight(), 0.01F);
      assertFalse(catalogLight0.isDoorOrWindow());
      assertTrue(catalogLight0.isMovable());
      assertEquals("PRICE_VALUE_ADDED_TAX_INCLUDED", catalogLight0.getName());
      assertEquals(114.0F, catalogLight0.getDepth(), 0.01F);
      assertNull(catalogLight0.getInformation());
      assertTrue(catalogLight0.isDeformable());
      assertNull(catalogLight0.getCurrency());
      assertEquals("{L", catalogLight0.getCreator());
      assertNull(catalogLight0.getColor());
      assertFalse(catalogLight0.isModifiable());
      assertFalse(catalogLight0.isBackFaceShown());
      assertNull(catalogLight0.getCreationDate());
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertTrue(catalogLight0.isResizable());
      assertEquals("/", catalogLight0.getId());
      assertTrue(catalogLight0.isTexturable());
      assertTrue(catalogLight0.isProportional());
      assertEquals(23.119429F, catalogLight0.getWidth(), 0.01F);
      assertTrue(homeLight0.isMovable());
      assertTrue(homeLight0.isResizable());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertNull(homeLight0.getShininess());
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals(23.119429F, homeLight0.getWidth(), 0.01F);
      assertTrue(homeLight0.isDeformable());
      assertTrue(homeLight0.isVisible());
      assertEquals((-663.6746F), homeLight0.getHeight(), 0.01F);
      assertEquals(")x'.R~1u:;mh@\"W", homeLight0.getDescription());
      assertNull(homeLight0.getCurrency());
      assertEquals(11.559714F, homeLight0.getX(), 0.01F);
      assertEquals("PRICE_VALUE_ADDED_TAX_INCLUDED", homeLight0.getName());
      assertEquals(23.119429F, homeLight0.getY(), 0.01F);
      assertFalse(homeLight0.isBackFaceShown());
      assertFalse(homeLight0.isDoorOrWindow());
      assertFalse(homeLight0.isModelMirrored());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertNull(homeLight0.getColor());
      assertEquals((-663.6746F), homeLight0.getGroundElevation(), 0.01F);
      assertEquals("/", homeLight0.getCatalogId());
      assertEquals(114.0F, homeLight0.getDepth(), 0.01F);
      assertEquals((-663.6746F), homeLight0.getElevation(), 0.01F);
      assertTrue(homeLight0.isTexturable());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertFalse(homeLight0.isNameVisible());
      assertEquals(57.0F, homeLight1.getY(), 0.01F);
      assertEquals(11.559714F, homeLight1.getX(), 0.01F);
      assertTrue(homeLight1.isMovable());
      assertNull(homeLight1.getStaircaseCutOutShape());
      assertEquals("PRICE_VALUE_ADDED_TAX_INCLUDED", homeLight1.getName());
      assertNull(homeLight1.getShininess());
      assertTrue(homeLight1.isResizable());
      assertEquals("PRICE_VALUE_ADDED_TAX_INCLUDED", homeLight1.getDescription());
      assertEquals(0.5F, homeLight1.getPower(), 0.01F);
      assertEquals(0.0F, homeLight1.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeLight1.getNameYOffset(), 0.01F);
      assertEquals(1.8129913F, homeLight1.getNameAngle(), 0.01F);
      assertEquals((-663.6746F), homeLight1.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight1.getAngle(), 0.01F);
      assertEquals((-663.6746F), homeLight1.getElevation(), 0.01F);
      assertFalse(homeLight1.isNameVisible());
      assertEquals(114.0F, homeLight1.getDepth(), 0.01F);
      assertEquals("/", homeLight1.getCatalogId());
      assertFalse(homeLight1.isBackFaceShown());
      assertNull(homeLight1.getColor());
      assertFalse(homeLight1.isModelMirrored());
      assertTrue(homeLight1.isTexturable());
      assertFalse(homeLight1.isDoorOrWindow());
      assertTrue(homeLight1.isVisible());
      assertEquals(23.119429F, homeLight1.getWidth(), 0.01F);
      assertTrue(homeLight1.isDeformable());
      assertNull(homeLight1.getCurrency());
      assertEquals((-663.6746F), homeLight1.getHeight(), 0.01F);
      assertNull(homeLight2.getColor());
      assertFalse(homeLight2.isModelMirrored());
      assertTrue(homeLight2.isTexturable());
      assertNull(homeLight2.getCurrency());
      assertEquals(114.0F, homeLight2.getDepth(), 0.01F);
      assertFalse(homeLight2.isBackFaceShown());
      assertFalse(homeLight2.isNameVisible());
      assertEquals((-663.6746F), homeLight2.getElevation(), 0.01F);
      assertEquals((-663.6746F), homeLight2.getHeight(), 0.01F);
      assertEquals(23.119429F, homeLight2.getWidth(), 0.01F);
      assertTrue(homeLight2.isDeformable());
      assertTrue(homeLight2.isVisible());
      assertEquals(0.0F, homeLight2.getAngle(), 0.01F);
      assertEquals((-663.6746F), homeLight2.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight2.getNameXOffset(), 0.01F);
      assertFalse(homeLight2.isDoorOrWindow());
      assertNull(homeLight2.getStaircaseCutOutShape());
      assertEquals("PRICE_VALUE_ADDED_TAX_INCLUDED", homeLight2.getName());
      assertEquals(57.0F, homeLight2.getY(), 0.01F);
      assertTrue(homeLight2.isResizable());
      assertEquals(0.5F, homeLight2.getPower(), 0.01F);
      assertNull(homeLight2.getShininess());
      assertEquals(11.559714F, homeLight2.getX(), 0.01F);
      assertTrue(homeLight2.isMovable());
      assertEquals("/", homeLight2.getCatalogId());
      assertEquals(1.8129913F, homeLight2.getNameAngle(), 0.01F);
      assertEquals("PRICE_VALUE_ADDED_TAX_INCLUDED", homeLight2.getDescription());
      assertEquals(0.0F, homeLight2.getNameYOffset(), 0.01F);
      assertEquals(2, lightSourceArray0.length);
      assertNotSame(homeLight0, homeLight1);
      assertNotSame(homeLight0, homeLight2);
      assertNotSame(homeLight1, homeLight2);
      assertNotSame(homeLight1, homeLight0);
      assertNotSame(homeLight2, homeLight1);
      assertNotSame(homeLight2, homeLight0);
      assertEquals((-663.6746F), float3, 0.01F);
  }

  @Test(timeout = 4000)
  public void test235()  throws Throwable  {
      LightSource[] lightSourceArray0 = new LightSource[5];
      BigDecimal bigDecimal0 = BigDecimal.ZERO;
      assertEquals((short)0, bigDecimal0.shortValue());
      assertEquals((byte)0, bigDecimal0.byteValue());
      assertNotNull(bigDecimal0);
      
      Class<CatalogPieceOfFurniture> class0 = CatalogPieceOfFurniture.class;
      ResourceURLContent resourceURLContent0 = new ResourceURLContent(class0, "", false);
      assertTrue(resourceURLContent0.isJAREntry());
      assertFalse(resourceURLContent0.isMultiPartResource());
      assertNotNull(resourceURLContent0);
      
      Sash[] sashArray0 = new Sash[0];
      CatalogDoorOrWindow catalogDoorOrWindow0 = new CatalogDoorOrWindow("", "", "tQyW?Kw7W7", resourceURLContent0, resourceURLContent0, 3.4028235E38F, (-1093.1008F), (-427.82852F), (-381.71533F), true, 1362.7057F, 1088.4066F, sashArray0, (float[][]) null, "", false, bigDecimal0, bigDecimal0);
      assertEquals((short)0, bigDecimal0.shortValue());
      assertEquals((byte)0, bigDecimal0.byteValue());
      assertTrue(resourceURLContent0.isJAREntry());
      assertFalse(resourceURLContent0.isMultiPartResource());
      assertTrue(catalogDoorOrWindow0.isDoorOrWindow());
      assertEquals("", catalogDoorOrWindow0.getId());
      assertNull(catalogDoorOrWindow0.getCurrency());
      assertFalse(catalogDoorOrWindow0.isResizable());
      assertEquals("tQyW?Kw7W7", catalogDoorOrWindow0.getDescription());
      assertNull(catalogDoorOrWindow0.getInformation());
      assertNull(catalogDoorOrWindow0.getColor());
      assertEquals((-427.82852F), catalogDoorOrWindow0.getHeight(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isMovable());
      assertNull(catalogDoorOrWindow0.getStaircaseCutOutShape());
      assertEquals("", catalogDoorOrWindow0.getCreator());
      assertEquals("", catalogDoorOrWindow0.getName());
      assertEquals(1088.4066F, catalogDoorOrWindow0.getWallDistance(), 0.01F);
      assertEquals(3.4028235E38F, catalogDoorOrWindow0.getWidth(), 0.01F);
      assertFalse(catalogDoorOrWindow0.isBackFaceShown());
      assertNull(catalogDoorOrWindow0.getCreationDate());
      assertEquals((-381.71533F), catalogDoorOrWindow0.getElevation(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isDeformable());
      assertFalse(catalogDoorOrWindow0.isModifiable());
      assertEquals(1362.7057F, catalogDoorOrWindow0.getWallThickness(), 0.01F);
      assertEquals((-1093.1008F), catalogDoorOrWindow0.getDepth(), 0.01F);
      assertNull(catalogDoorOrWindow0.getGrade());
      assertTrue(catalogDoorOrWindow0.isProportional());
      assertTrue(catalogDoorOrWindow0.isTexturable());
      assertEquals(0.3926991F, catalogDoorOrWindow0.getIconYaw(), 0.01F);
      assertEquals(0, sashArray0.length);
      assertNotNull(catalogDoorOrWindow0);
      
      HomeDoorOrWindow homeDoorOrWindow0 = new HomeDoorOrWindow(catalogDoorOrWindow0);
      assertEquals((short)0, bigDecimal0.shortValue());
      assertEquals((byte)0, bigDecimal0.byteValue());
      assertTrue(resourceURLContent0.isJAREntry());
      assertFalse(resourceURLContent0.isMultiPartResource());
      assertTrue(catalogDoorOrWindow0.isDoorOrWindow());
      assertEquals("", catalogDoorOrWindow0.getId());
      assertNull(catalogDoorOrWindow0.getCurrency());
      assertFalse(catalogDoorOrWindow0.isResizable());
      assertEquals("tQyW?Kw7W7", catalogDoorOrWindow0.getDescription());
      assertNull(catalogDoorOrWindow0.getInformation());
      assertNull(catalogDoorOrWindow0.getColor());
      assertEquals((-427.82852F), catalogDoorOrWindow0.getHeight(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isMovable());
      assertNull(catalogDoorOrWindow0.getStaircaseCutOutShape());
      assertEquals("", catalogDoorOrWindow0.getCreator());
      assertEquals("", catalogDoorOrWindow0.getName());
      assertEquals(1088.4066F, catalogDoorOrWindow0.getWallDistance(), 0.01F);
      assertEquals(3.4028235E38F, catalogDoorOrWindow0.getWidth(), 0.01F);
      assertFalse(catalogDoorOrWindow0.isBackFaceShown());
      assertNull(catalogDoorOrWindow0.getCreationDate());
      assertEquals((-381.71533F), catalogDoorOrWindow0.getElevation(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isDeformable());
      assertFalse(catalogDoorOrWindow0.isModifiable());
      assertEquals(1362.7057F, catalogDoorOrWindow0.getWallThickness(), 0.01F);
      assertEquals((-1093.1008F), catalogDoorOrWindow0.getDepth(), 0.01F);
      assertNull(catalogDoorOrWindow0.getGrade());
      assertTrue(catalogDoorOrWindow0.isProportional());
      assertTrue(catalogDoorOrWindow0.isTexturable());
      assertEquals(0.3926991F, catalogDoorOrWindow0.getIconYaw(), 0.01F);
      assertEquals((-546.5504F), homeDoorOrWindow0.getY(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getAngle(), 0.01F);
      assertTrue(homeDoorOrWindow0.isTexturable());
      assertNull(homeDoorOrWindow0.getColor());
      assertEquals((-427.82852F), homeDoorOrWindow0.getHeight(), 0.01F);
      assertEquals(3.4028235E38F, homeDoorOrWindow0.getWidth(), 0.01F);
      assertEquals(1088.4066F, homeDoorOrWindow0.getWallDistance(), 0.01F);
      assertEquals((-381.71533F), homeDoorOrWindow0.getGroundElevation(), 0.01F);
      assertEquals("", homeDoorOrWindow0.getName());
      assertFalse(homeDoorOrWindow0.isNameVisible());
      assertEquals(0.0F, homeDoorOrWindow0.getNameYOffset(), 0.01F);
      assertEquals((-381.71533F), homeDoorOrWindow0.getElevation(), 0.01F);
      assertFalse(homeDoorOrWindow0.isBoundToWall());
      assertFalse(homeDoorOrWindow0.isModelMirrored());
      assertFalse(homeDoorOrWindow0.isBackFaceShown());
      assertFalse(homeDoorOrWindow0.isResizable());
      assertEquals(1.7014117E38F, homeDoorOrWindow0.getX(), 0.01F);
      assertEquals("", homeDoorOrWindow0.getCatalogId());
      assertEquals((-1093.1008F), homeDoorOrWindow0.getDepth(), 0.01F);
      assertEquals("tQyW?Kw7W7", homeDoorOrWindow0.getDescription());
      assertEquals(0.0F, homeDoorOrWindow0.getNameXOffset(), 0.01F);
      assertNull(homeDoorOrWindow0.getCurrency());
      assertTrue(homeDoorOrWindow0.isDeformable());
      assertNull(homeDoorOrWindow0.getStaircaseCutOutShape());
      assertEquals(1362.7057F, homeDoorOrWindow0.getWallThickness(), 0.01F);
      assertTrue(homeDoorOrWindow0.isVisible());
      assertTrue(homeDoorOrWindow0.isMovable());
      assertNull(homeDoorOrWindow0.getShininess());
      assertTrue(homeDoorOrWindow0.isDoorOrWindow());
      assertEquals(0.0F, homeDoorOrWindow0.getNameAngle(), 0.01F);
      assertEquals(0, sashArray0.length);
      assertNotNull(homeDoorOrWindow0);
      
      HomeDoorOrWindow homeDoorOrWindow1 = homeDoorOrWindow0.clone();
      assertFalse(homeDoorOrWindow1.equals((Object)homeDoorOrWindow0));
      assertEquals((short)0, bigDecimal0.shortValue());
      assertEquals((byte)0, bigDecimal0.byteValue());
      assertTrue(resourceURLContent0.isJAREntry());
      assertFalse(resourceURLContent0.isMultiPartResource());
      assertTrue(catalogDoorOrWindow0.isDoorOrWindow());
      assertEquals("", catalogDoorOrWindow0.getId());
      assertNull(catalogDoorOrWindow0.getCurrency());
      assertFalse(catalogDoorOrWindow0.isResizable());
      assertEquals("tQyW?Kw7W7", catalogDoorOrWindow0.getDescription());
      assertNull(catalogDoorOrWindow0.getInformation());
      assertNull(catalogDoorOrWindow0.getColor());
      assertEquals((-427.82852F), catalogDoorOrWindow0.getHeight(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isMovable());
      assertNull(catalogDoorOrWindow0.getStaircaseCutOutShape());
      assertEquals("", catalogDoorOrWindow0.getCreator());
      assertEquals("", catalogDoorOrWindow0.getName());
      assertEquals(1088.4066F, catalogDoorOrWindow0.getWallDistance(), 0.01F);
      assertEquals(3.4028235E38F, catalogDoorOrWindow0.getWidth(), 0.01F);
      assertFalse(catalogDoorOrWindow0.isBackFaceShown());
      assertNull(catalogDoorOrWindow0.getCreationDate());
      assertEquals((-381.71533F), catalogDoorOrWindow0.getElevation(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isDeformable());
      assertFalse(catalogDoorOrWindow0.isModifiable());
      assertEquals(1362.7057F, catalogDoorOrWindow0.getWallThickness(), 0.01F);
      assertEquals((-1093.1008F), catalogDoorOrWindow0.getDepth(), 0.01F);
      assertNull(catalogDoorOrWindow0.getGrade());
      assertTrue(catalogDoorOrWindow0.isProportional());
      assertTrue(catalogDoorOrWindow0.isTexturable());
      assertEquals(0.3926991F, catalogDoorOrWindow0.getIconYaw(), 0.01F);
      assertEquals((-546.5504F), homeDoorOrWindow0.getY(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getAngle(), 0.01F);
      assertTrue(homeDoorOrWindow0.isTexturable());
      assertNull(homeDoorOrWindow0.getColor());
      assertEquals((-427.82852F), homeDoorOrWindow0.getHeight(), 0.01F);
      assertEquals(3.4028235E38F, homeDoorOrWindow0.getWidth(), 0.01F);
      assertEquals(1088.4066F, homeDoorOrWindow0.getWallDistance(), 0.01F);
      assertEquals((-381.71533F), homeDoorOrWindow0.getGroundElevation(), 0.01F);
      assertEquals("", homeDoorOrWindow0.getName());
      assertFalse(homeDoorOrWindow0.isNameVisible());
      assertEquals(0.0F, homeDoorOrWindow0.getNameYOffset(), 0.01F);
      assertEquals((-381.71533F), homeDoorOrWindow0.getElevation(), 0.01F);
      assertFalse(homeDoorOrWindow0.isBoundToWall());
      assertFalse(homeDoorOrWindow0.isModelMirrored());
      assertFalse(homeDoorOrWindow0.isBackFaceShown());
      assertFalse(homeDoorOrWindow0.isResizable());
      assertEquals(1.7014117E38F, homeDoorOrWindow0.getX(), 0.01F);
      assertEquals("", homeDoorOrWindow0.getCatalogId());
      assertEquals((-1093.1008F), homeDoorOrWindow0.getDepth(), 0.01F);
      assertEquals("tQyW?Kw7W7", homeDoorOrWindow0.getDescription());
      assertEquals(0.0F, homeDoorOrWindow0.getNameXOffset(), 0.01F);
      assertNull(homeDoorOrWindow0.getCurrency());
      assertTrue(homeDoorOrWindow0.isDeformable());
      assertNull(homeDoorOrWindow0.getStaircaseCutOutShape());
      assertEquals(1362.7057F, homeDoorOrWindow0.getWallThickness(), 0.01F);
      assertTrue(homeDoorOrWindow0.isVisible());
      assertTrue(homeDoorOrWindow0.isMovable());
      assertNull(homeDoorOrWindow0.getShininess());
      assertTrue(homeDoorOrWindow0.isDoorOrWindow());
      assertEquals(0.0F, homeDoorOrWindow0.getNameAngle(), 0.01F);
      assertEquals((-381.71533F), homeDoorOrWindow1.getElevation(), 0.01F);
      assertNull(homeDoorOrWindow1.getColor());
      assertFalse(homeDoorOrWindow1.isBackFaceShown());
      assertEquals(1088.4066F, homeDoorOrWindow1.getWallDistance(), 0.01F);
      assertEquals((-427.82852F), homeDoorOrWindow1.getHeight(), 0.01F);
      assertFalse(homeDoorOrWindow1.isModelMirrored());
      assertTrue(homeDoorOrWindow1.isTexturable());
      assertNull(homeDoorOrWindow1.getCurrency());
      assertEquals((-381.71533F), homeDoorOrWindow1.getGroundElevation(), 0.01F);
      assertEquals((-546.5504F), homeDoorOrWindow1.getY(), 0.01F);
      assertFalse(homeDoorOrWindow1.isNameVisible());
      assertFalse(homeDoorOrWindow1.isBoundToWall());
      assertEquals(3.4028235E38F, homeDoorOrWindow1.getWidth(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow1.getNameYOffset(), 0.01F);
      assertEquals(1.7014117E38F, homeDoorOrWindow1.getX(), 0.01F);
      assertEquals("", homeDoorOrWindow1.getCatalogId());
      assertTrue(homeDoorOrWindow1.isDoorOrWindow());
      assertEquals((-1093.1008F), homeDoorOrWindow1.getDepth(), 0.01F);
      assertEquals("tQyW?Kw7W7", homeDoorOrWindow1.getDescription());
      assertNull(homeDoorOrWindow1.getShininess());
      assertEquals(0.0F, homeDoorOrWindow1.getNameAngle(), 0.01F);
      assertEquals(1362.7057F, homeDoorOrWindow1.getWallThickness(), 0.01F);
      assertNull(homeDoorOrWindow1.getStaircaseCutOutShape());
      assertFalse(homeDoorOrWindow1.isResizable());
      assertEquals("", homeDoorOrWindow1.getName());
      assertTrue(homeDoorOrWindow1.isMovable());
      assertTrue(homeDoorOrWindow1.isDeformable());
      assertEquals(0.0F, homeDoorOrWindow1.getAngle(), 0.01F);
      assertTrue(homeDoorOrWindow1.isVisible());
      assertEquals(0.0F, homeDoorOrWindow1.getNameXOffset(), 0.01F);
      assertEquals(0, sashArray0.length);
      assertNotSame(homeDoorOrWindow0, homeDoorOrWindow1);
      assertNotSame(homeDoorOrWindow1, homeDoorOrWindow0);
      assertNotNull(homeDoorOrWindow1);
      
      homeDoorOrWindow1.move(1362.7057F, (-444.26144F));
      assertFalse(homeDoorOrWindow0.equals((Object)homeDoorOrWindow1));
      assertFalse(homeDoorOrWindow1.equals((Object)homeDoorOrWindow0));
      assertEquals((short)0, bigDecimal0.shortValue());
      assertEquals((byte)0, bigDecimal0.byteValue());
      assertTrue(resourceURLContent0.isJAREntry());
      assertFalse(resourceURLContent0.isMultiPartResource());
      assertTrue(catalogDoorOrWindow0.isDoorOrWindow());
      assertEquals("", catalogDoorOrWindow0.getId());
      assertNull(catalogDoorOrWindow0.getCurrency());
      assertFalse(catalogDoorOrWindow0.isResizable());
      assertEquals("tQyW?Kw7W7", catalogDoorOrWindow0.getDescription());
      assertNull(catalogDoorOrWindow0.getInformation());
      assertNull(catalogDoorOrWindow0.getColor());
      assertEquals((-427.82852F), catalogDoorOrWindow0.getHeight(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isMovable());
      assertNull(catalogDoorOrWindow0.getStaircaseCutOutShape());
      assertEquals("", catalogDoorOrWindow0.getCreator());
      assertEquals("", catalogDoorOrWindow0.getName());
      assertEquals(1088.4066F, catalogDoorOrWindow0.getWallDistance(), 0.01F);
      assertEquals(3.4028235E38F, catalogDoorOrWindow0.getWidth(), 0.01F);
      assertFalse(catalogDoorOrWindow0.isBackFaceShown());
      assertNull(catalogDoorOrWindow0.getCreationDate());
      assertEquals((-381.71533F), catalogDoorOrWindow0.getElevation(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isDeformable());
      assertFalse(catalogDoorOrWindow0.isModifiable());
      assertEquals(1362.7057F, catalogDoorOrWindow0.getWallThickness(), 0.01F);
      assertEquals((-1093.1008F), catalogDoorOrWindow0.getDepth(), 0.01F);
      assertNull(catalogDoorOrWindow0.getGrade());
      assertTrue(catalogDoorOrWindow0.isProportional());
      assertTrue(catalogDoorOrWindow0.isTexturable());
      assertEquals(0.3926991F, catalogDoorOrWindow0.getIconYaw(), 0.01F);
      assertEquals((-546.5504F), homeDoorOrWindow0.getY(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getAngle(), 0.01F);
      assertTrue(homeDoorOrWindow0.isTexturable());
      assertNull(homeDoorOrWindow0.getColor());
      assertEquals((-427.82852F), homeDoorOrWindow0.getHeight(), 0.01F);
      assertEquals(3.4028235E38F, homeDoorOrWindow0.getWidth(), 0.01F);
      assertEquals(1088.4066F, homeDoorOrWindow0.getWallDistance(), 0.01F);
      assertEquals((-381.71533F), homeDoorOrWindow0.getGroundElevation(), 0.01F);
      assertEquals("", homeDoorOrWindow0.getName());
      assertFalse(homeDoorOrWindow0.isNameVisible());
      assertEquals(0.0F, homeDoorOrWindow0.getNameYOffset(), 0.01F);
      assertEquals((-381.71533F), homeDoorOrWindow0.getElevation(), 0.01F);
      assertFalse(homeDoorOrWindow0.isBoundToWall());
      assertFalse(homeDoorOrWindow0.isModelMirrored());
      assertFalse(homeDoorOrWindow0.isBackFaceShown());
      assertFalse(homeDoorOrWindow0.isResizable());
      assertEquals(1.7014117E38F, homeDoorOrWindow0.getX(), 0.01F);
      assertEquals("", homeDoorOrWindow0.getCatalogId());
      assertEquals((-1093.1008F), homeDoorOrWindow0.getDepth(), 0.01F);
      assertEquals("tQyW?Kw7W7", homeDoorOrWindow0.getDescription());
      assertEquals(0.0F, homeDoorOrWindow0.getNameXOffset(), 0.01F);
      assertNull(homeDoorOrWindow0.getCurrency());
      assertTrue(homeDoorOrWindow0.isDeformable());
      assertNull(homeDoorOrWindow0.getStaircaseCutOutShape());
      assertEquals(1362.7057F, homeDoorOrWindow0.getWallThickness(), 0.01F);
      assertTrue(homeDoorOrWindow0.isVisible());
      assertTrue(homeDoorOrWindow0.isMovable());
      assertNull(homeDoorOrWindow0.getShininess());
      assertTrue(homeDoorOrWindow0.isDoorOrWindow());
      assertEquals(0.0F, homeDoorOrWindow0.getNameAngle(), 0.01F);
      assertEquals((-381.71533F), homeDoorOrWindow1.getElevation(), 0.01F);
      assertNull(homeDoorOrWindow1.getColor());
      assertFalse(homeDoorOrWindow1.isBackFaceShown());
      assertEquals(1088.4066F, homeDoorOrWindow1.getWallDistance(), 0.01F);
      assertEquals((-427.82852F), homeDoorOrWindow1.getHeight(), 0.01F);
      assertEquals((-990.8119F), homeDoorOrWindow1.getY(), 0.01F);
      assertFalse(homeDoorOrWindow1.isModelMirrored());
      assertTrue(homeDoorOrWindow1.isTexturable());
      assertNull(homeDoorOrWindow1.getCurrency());
      assertEquals((-381.71533F), homeDoorOrWindow1.getGroundElevation(), 0.01F);
      assertFalse(homeDoorOrWindow1.isNameVisible());
      assertFalse(homeDoorOrWindow1.isBoundToWall());
      assertEquals(3.4028235E38F, homeDoorOrWindow1.getWidth(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow1.getNameYOffset(), 0.01F);
      assertEquals(1.7014117E38F, homeDoorOrWindow1.getX(), 0.01F);
      assertEquals("", homeDoorOrWindow1.getCatalogId());
      assertTrue(homeDoorOrWindow1.isDoorOrWindow());
      assertEquals((-1093.1008F), homeDoorOrWindow1.getDepth(), 0.01F);
      assertEquals("tQyW?Kw7W7", homeDoorOrWindow1.getDescription());
      assertNull(homeDoorOrWindow1.getShininess());
      assertEquals(0.0F, homeDoorOrWindow1.getNameAngle(), 0.01F);
      assertEquals(1362.7057F, homeDoorOrWindow1.getWallThickness(), 0.01F);
      assertNull(homeDoorOrWindow1.getStaircaseCutOutShape());
      assertFalse(homeDoorOrWindow1.isResizable());
      assertEquals("", homeDoorOrWindow1.getName());
      assertTrue(homeDoorOrWindow1.isMovable());
      assertTrue(homeDoorOrWindow1.isDeformable());
      assertEquals(0.0F, homeDoorOrWindow1.getAngle(), 0.01F);
      assertTrue(homeDoorOrWindow1.isVisible());
      assertEquals(0.0F, homeDoorOrWindow1.getNameXOffset(), 0.01F);
      assertEquals(0, sashArray0.length);
      assertNotSame(homeDoorOrWindow0, homeDoorOrWindow1);
      assertNotSame(homeDoorOrWindow1, homeDoorOrWindow0);
      
      HomePieceOfFurniture homePieceOfFurniture0 = new HomePieceOfFurniture(homeDoorOrWindow1);
      assertFalse(homeDoorOrWindow0.equals((Object)homeDoorOrWindow1));
      assertFalse(homeDoorOrWindow1.equals((Object)homeDoorOrWindow0));
      assertEquals((short)0, bigDecimal0.shortValue());
      assertEquals((byte)0, bigDecimal0.byteValue());
      assertTrue(resourceURLContent0.isJAREntry());
      assertFalse(resourceURLContent0.isMultiPartResource());
      assertTrue(catalogDoorOrWindow0.isDoorOrWindow());
      assertEquals("", catalogDoorOrWindow0.getId());
      assertNull(catalogDoorOrWindow0.getCurrency());
      assertFalse(catalogDoorOrWindow0.isResizable());
      assertEquals("tQyW?Kw7W7", catalogDoorOrWindow0.getDescription());
      assertNull(catalogDoorOrWindow0.getInformation());
      assertNull(catalogDoorOrWindow0.getColor());
      assertEquals((-427.82852F), catalogDoorOrWindow0.getHeight(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isMovable());
      assertNull(catalogDoorOrWindow0.getStaircaseCutOutShape());
      assertEquals("", catalogDoorOrWindow0.getCreator());
      assertEquals("", catalogDoorOrWindow0.getName());
      assertEquals(1088.4066F, catalogDoorOrWindow0.getWallDistance(), 0.01F);
      assertEquals(3.4028235E38F, catalogDoorOrWindow0.getWidth(), 0.01F);
      assertFalse(catalogDoorOrWindow0.isBackFaceShown());
      assertNull(catalogDoorOrWindow0.getCreationDate());
      assertEquals((-381.71533F), catalogDoorOrWindow0.getElevation(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isDeformable());
      assertFalse(catalogDoorOrWindow0.isModifiable());
      assertEquals(1362.7057F, catalogDoorOrWindow0.getWallThickness(), 0.01F);
      assertEquals((-1093.1008F), catalogDoorOrWindow0.getDepth(), 0.01F);
      assertNull(catalogDoorOrWindow0.getGrade());
      assertTrue(catalogDoorOrWindow0.isProportional());
      assertTrue(catalogDoorOrWindow0.isTexturable());
      assertEquals(0.3926991F, catalogDoorOrWindow0.getIconYaw(), 0.01F);
      assertEquals((-546.5504F), homeDoorOrWindow0.getY(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getAngle(), 0.01F);
      assertTrue(homeDoorOrWindow0.isTexturable());
      assertNull(homeDoorOrWindow0.getColor());
      assertEquals((-427.82852F), homeDoorOrWindow0.getHeight(), 0.01F);
      assertEquals(3.4028235E38F, homeDoorOrWindow0.getWidth(), 0.01F);
      assertEquals(1088.4066F, homeDoorOrWindow0.getWallDistance(), 0.01F);
      assertEquals((-381.71533F), homeDoorOrWindow0.getGroundElevation(), 0.01F);
      assertEquals("", homeDoorOrWindow0.getName());
      assertFalse(homeDoorOrWindow0.isNameVisible());
      assertEquals(0.0F, homeDoorOrWindow0.getNameYOffset(), 0.01F);
      assertEquals((-381.71533F), homeDoorOrWindow0.getElevation(), 0.01F);
      assertFalse(homeDoorOrWindow0.isBoundToWall());
      assertFalse(homeDoorOrWindow0.isModelMirrored());
      assertFalse(homeDoorOrWindow0.isBackFaceShown());
      assertFalse(homeDoorOrWindow0.isResizable());
      assertEquals(1.7014117E38F, homeDoorOrWindow0.getX(), 0.01F);
      assertEquals("", homeDoorOrWindow0.getCatalogId());
      assertEquals((-1093.1008F), homeDoorOrWindow0.getDepth(), 0.01F);
      assertEquals("tQyW?Kw7W7", homeDoorOrWindow0.getDescription());
      assertEquals(0.0F, homeDoorOrWindow0.getNameXOffset(), 0.01F);
      assertNull(homeDoorOrWindow0.getCurrency());
      assertTrue(homeDoorOrWindow0.isDeformable());
      assertNull(homeDoorOrWindow0.getStaircaseCutOutShape());
      assertEquals(1362.7057F, homeDoorOrWindow0.getWallThickness(), 0.01F);
      assertTrue(homeDoorOrWindow0.isVisible());
      assertTrue(homeDoorOrWindow0.isMovable());
      assertNull(homeDoorOrWindow0.getShininess());
      assertTrue(homeDoorOrWindow0.isDoorOrWindow());
      assertEquals(0.0F, homeDoorOrWindow0.getNameAngle(), 0.01F);
      assertEquals((-381.71533F), homeDoorOrWindow1.getElevation(), 0.01F);
      assertNull(homeDoorOrWindow1.getColor());
      assertFalse(homeDoorOrWindow1.isBackFaceShown());
      assertEquals(1088.4066F, homeDoorOrWindow1.getWallDistance(), 0.01F);
      assertEquals((-427.82852F), homeDoorOrWindow1.getHeight(), 0.01F);
      assertEquals((-990.8119F), homeDoorOrWindow1.getY(), 0.01F);
      assertFalse(homeDoorOrWindow1.isModelMirrored());
      assertTrue(homeDoorOrWindow1.isTexturable());
      assertNull(homeDoorOrWindow1.getCurrency());
      assertEquals((-381.71533F), homeDoorOrWindow1.getGroundElevation(), 0.01F);
      assertFalse(homeDoorOrWindow1.isNameVisible());
      assertFalse(homeDoorOrWindow1.isBoundToWall());
      assertEquals(3.4028235E38F, homeDoorOrWindow1.getWidth(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow1.getNameYOffset(), 0.01F);
      assertEquals(1.7014117E38F, homeDoorOrWindow1.getX(), 0.01F);
      assertEquals("", homeDoorOrWindow1.getCatalogId());
      assertTrue(homeDoorOrWindow1.isDoorOrWindow());
      assertEquals((-1093.1008F), homeDoorOrWindow1.getDepth(), 0.01F);
      assertEquals("tQyW?Kw7W7", homeDoorOrWindow1.getDescription());
      assertNull(homeDoorOrWindow1.getShininess());
      assertEquals(0.0F, homeDoorOrWindow1.getNameAngle(), 0.01F);
      assertEquals(1362.7057F, homeDoorOrWindow1.getWallThickness(), 0.01F);
      assertNull(homeDoorOrWindow1.getStaircaseCutOutShape());
      assertFalse(homeDoorOrWindow1.isResizable());
      assertEquals("", homeDoorOrWindow1.getName());
      assertTrue(homeDoorOrWindow1.isMovable());
      assertTrue(homeDoorOrWindow1.isDeformable());
      assertEquals(0.0F, homeDoorOrWindow1.getAngle(), 0.01F);
      assertTrue(homeDoorOrWindow1.isVisible());
      assertEquals(0.0F, homeDoorOrWindow1.getNameXOffset(), 0.01F);
      assertTrue(homePieceOfFurniture0.isTexturable());
      assertFalse(homePieceOfFurniture0.isModelMirrored());
      assertFalse(homePieceOfFurniture0.isBackFaceShown());
      assertNull(homePieceOfFurniture0.getColor());
      assertEquals((-427.82852F), homePieceOfFurniture0.getHeight(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture0.getNameXOffset(), 0.01F);
      assertEquals((-381.71533F), homePieceOfFurniture0.getGroundElevation(), 0.01F);
      assertEquals("", homePieceOfFurniture0.getName());
      assertEquals((-990.8119F), homePieceOfFurniture0.getY(), 0.01F);
      assertTrue(homePieceOfFurniture0.isDoorOrWindow());
      assertEquals((-1093.1008F), homePieceOfFurniture0.getDepth(), 0.01F);
      assertEquals((-381.71533F), homePieceOfFurniture0.getElevation(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture0.getAngle(), 0.01F);
      assertFalse(homePieceOfFurniture0.isNameVisible());
      assertEquals(1.7014117E38F, homePieceOfFurniture0.getX(), 0.01F);
      assertNull(homePieceOfFurniture0.getShininess());
      assertEquals("tQyW?Kw7W7", homePieceOfFurniture0.getDescription());
      assertFalse(homePieceOfFurniture0.isResizable());
      assertEquals("", homePieceOfFurniture0.getCatalogId());
      assertNull(homePieceOfFurniture0.getStaircaseCutOutShape());
      assertTrue(homePieceOfFurniture0.isVisible());
      assertTrue(homePieceOfFurniture0.isDeformable());
      assertEquals(0.0F, homePieceOfFurniture0.getNameYOffset(), 0.01F);
      assertNull(homePieceOfFurniture0.getCurrency());
      assertEquals(0.0F, homePieceOfFurniture0.getNameAngle(), 0.01F);
      assertTrue(homePieceOfFurniture0.isMovable());
      assertEquals(3.4028235E38F, homePieceOfFurniture0.getWidth(), 0.01F);
      assertEquals(0, sashArray0.length);
      assertNotNull(homePieceOfFurniture0);
      
      String string0 = homePieceOfFurniture0.getCurrency();
      assertFalse(homeDoorOrWindow0.equals((Object)homeDoorOrWindow1));
      assertFalse(homeDoorOrWindow1.equals((Object)homeDoorOrWindow0));
      assertEquals((short)0, bigDecimal0.shortValue());
      assertEquals((byte)0, bigDecimal0.byteValue());
      assertTrue(resourceURLContent0.isJAREntry());
      assertFalse(resourceURLContent0.isMultiPartResource());
      assertTrue(catalogDoorOrWindow0.isDoorOrWindow());
      assertEquals("", catalogDoorOrWindow0.getId());
      assertNull(catalogDoorOrWindow0.getCurrency());
      assertFalse(catalogDoorOrWindow0.isResizable());
      assertEquals("tQyW?Kw7W7", catalogDoorOrWindow0.getDescription());
      assertNull(catalogDoorOrWindow0.getInformation());
      assertNull(catalogDoorOrWindow0.getColor());
      assertEquals((-427.82852F), catalogDoorOrWindow0.getHeight(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isMovable());
      assertNull(catalogDoorOrWindow0.getStaircaseCutOutShape());
      assertEquals("", catalogDoorOrWindow0.getCreator());
      assertEquals("", catalogDoorOrWindow0.getName());
      assertEquals(1088.4066F, catalogDoorOrWindow0.getWallDistance(), 0.01F);
      assertEquals(3.4028235E38F, catalogDoorOrWindow0.getWidth(), 0.01F);
      assertFalse(catalogDoorOrWindow0.isBackFaceShown());
      assertNull(catalogDoorOrWindow0.getCreationDate());
      assertEquals((-381.71533F), catalogDoorOrWindow0.getElevation(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isDeformable());
      assertFalse(catalogDoorOrWindow0.isModifiable());
      assertEquals(1362.7057F, catalogDoorOrWindow0.getWallThickness(), 0.01F);
      assertEquals((-1093.1008F), catalogDoorOrWindow0.getDepth(), 0.01F);
      assertNull(catalogDoorOrWindow0.getGrade());
      assertTrue(catalogDoorOrWindow0.isProportional());
      assertTrue(catalogDoorOrWindow0.isTexturable());
      assertEquals(0.3926991F, catalogDoorOrWindow0.getIconYaw(), 0.01F);
      assertEquals((-546.5504F), homeDoorOrWindow0.getY(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getAngle(), 0.01F);
      assertTrue(homeDoorOrWindow0.isTexturable());
      assertNull(homeDoorOrWindow0.getColor());
      assertEquals((-427.82852F), homeDoorOrWindow0.getHeight(), 0.01F);
      assertEquals(3.4028235E38F, homeDoorOrWindow0.getWidth(), 0.01F);
      assertEquals(1088.4066F, homeDoorOrWindow0.getWallDistance(), 0.01F);
      assertEquals((-381.71533F), homeDoorOrWindow0.getGroundElevation(), 0.01F);
      assertEquals("", homeDoorOrWindow0.getName());
      assertFalse(homeDoorOrWindow0.isNameVisible());
      assertEquals(0.0F, homeDoorOrWindow0.getNameYOffset(), 0.01F);
      assertEquals((-381.71533F), homeDoorOrWindow0.getElevation(), 0.01F);
      assertFalse(homeDoorOrWindow0.isBoundToWall());
      assertFalse(homeDoorOrWindow0.isModelMirrored());
      assertFalse(homeDoorOrWindow0.isBackFaceShown());
      assertFalse(homeDoorOrWindow0.isResizable());
      assertEquals(1.7014117E38F, homeDoorOrWindow0.getX(), 0.01F);
      assertEquals("", homeDoorOrWindow0.getCatalogId());
      assertEquals((-1093.1008F), homeDoorOrWindow0.getDepth(), 0.01F);
      assertEquals("tQyW?Kw7W7", homeDoorOrWindow0.getDescription());
      assertEquals(0.0F, homeDoorOrWindow0.getNameXOffset(), 0.01F);
      assertNull(homeDoorOrWindow0.getCurrency());
      assertTrue(homeDoorOrWindow0.isDeformable());
      assertNull(homeDoorOrWindow0.getStaircaseCutOutShape());
      assertEquals(1362.7057F, homeDoorOrWindow0.getWallThickness(), 0.01F);
      assertTrue(homeDoorOrWindow0.isVisible());
      assertTrue(homeDoorOrWindow0.isMovable());
      assertNull(homeDoorOrWindow0.getShininess());
      assertTrue(homeDoorOrWindow0.isDoorOrWindow());
      assertEquals(0.0F, homeDoorOrWindow0.getNameAngle(), 0.01F);
      assertEquals((-381.71533F), homeDoorOrWindow1.getElevation(), 0.01F);
      assertNull(homeDoorOrWindow1.getColor());
      assertFalse(homeDoorOrWindow1.isBackFaceShown());
      assertEquals(1088.4066F, homeDoorOrWindow1.getWallDistance(), 0.01F);
      assertEquals((-427.82852F), homeDoorOrWindow1.getHeight(), 0.01F);
      assertEquals((-990.8119F), homeDoorOrWindow1.getY(), 0.01F);
      assertFalse(homeDoorOrWindow1.isModelMirrored());
      assertTrue(homeDoorOrWindow1.isTexturable());
      assertNull(homeDoorOrWindow1.getCurrency());
      assertEquals((-381.71533F), homeDoorOrWindow1.getGroundElevation(), 0.01F);
      assertFalse(homeDoorOrWindow1.isNameVisible());
      assertFalse(homeDoorOrWindow1.isBoundToWall());
      assertEquals(3.4028235E38F, homeDoorOrWindow1.getWidth(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow1.getNameYOffset(), 0.01F);
      assertEquals(1.7014117E38F, homeDoorOrWindow1.getX(), 0.01F);
      assertEquals("", homeDoorOrWindow1.getCatalogId());
      assertTrue(homeDoorOrWindow1.isDoorOrWindow());
      assertEquals((-1093.1008F), homeDoorOrWindow1.getDepth(), 0.01F);
      assertEquals("tQyW?Kw7W7", homeDoorOrWindow1.getDescription());
      assertNull(homeDoorOrWindow1.getShininess());
      assertEquals(0.0F, homeDoorOrWindow1.getNameAngle(), 0.01F);
      assertEquals(1362.7057F, homeDoorOrWindow1.getWallThickness(), 0.01F);
      assertNull(homeDoorOrWindow1.getStaircaseCutOutShape());
      assertFalse(homeDoorOrWindow1.isResizable());
      assertEquals("", homeDoorOrWindow1.getName());
      assertTrue(homeDoorOrWindow1.isMovable());
      assertTrue(homeDoorOrWindow1.isDeformable());
      assertEquals(0.0F, homeDoorOrWindow1.getAngle(), 0.01F);
      assertTrue(homeDoorOrWindow1.isVisible());
      assertEquals(0.0F, homeDoorOrWindow1.getNameXOffset(), 0.01F);
      assertTrue(homePieceOfFurniture0.isTexturable());
      assertFalse(homePieceOfFurniture0.isModelMirrored());
      assertFalse(homePieceOfFurniture0.isBackFaceShown());
      assertNull(homePieceOfFurniture0.getColor());
      assertEquals((-427.82852F), homePieceOfFurniture0.getHeight(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture0.getNameXOffset(), 0.01F);
      assertEquals((-381.71533F), homePieceOfFurniture0.getGroundElevation(), 0.01F);
      assertEquals("", homePieceOfFurniture0.getName());
      assertEquals((-990.8119F), homePieceOfFurniture0.getY(), 0.01F);
      assertTrue(homePieceOfFurniture0.isDoorOrWindow());
      assertEquals((-1093.1008F), homePieceOfFurniture0.getDepth(), 0.01F);
      assertEquals((-381.71533F), homePieceOfFurniture0.getElevation(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture0.getAngle(), 0.01F);
      assertFalse(homePieceOfFurniture0.isNameVisible());
      assertEquals(1.7014117E38F, homePieceOfFurniture0.getX(), 0.01F);
      assertNull(homePieceOfFurniture0.getShininess());
      assertEquals("tQyW?Kw7W7", homePieceOfFurniture0.getDescription());
      assertFalse(homePieceOfFurniture0.isResizable());
      assertEquals("", homePieceOfFurniture0.getCatalogId());
      assertNull(homePieceOfFurniture0.getStaircaseCutOutShape());
      assertTrue(homePieceOfFurniture0.isVisible());
      assertTrue(homePieceOfFurniture0.isDeformable());
      assertEquals(0.0F, homePieceOfFurniture0.getNameYOffset(), 0.01F);
      assertNull(homePieceOfFurniture0.getCurrency());
      assertEquals(0.0F, homePieceOfFurniture0.getNameAngle(), 0.01F);
      assertTrue(homePieceOfFurniture0.isMovable());
      assertEquals(3.4028235E38F, homePieceOfFurniture0.getWidth(), 0.01F);
      assertEquals(0, sashArray0.length);
      assertNotSame(homeDoorOrWindow0, homeDoorOrWindow1);
      assertNotSame(homeDoorOrWindow1, homeDoorOrWindow0);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test236()  throws Throwable  {
      LightSource[] lightSourceArray0 = new LightSource[2];
      boolean boolean0 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      LightSource lightSource0 = new LightSource((-815.0F), 0.28356954F, 0.28356954F, 114);
      assertNull(lightSource0.getDiameter());
      assertEquals(114, lightSource0.getColor());
      assertEquals((-815.0F), lightSource0.getX(), 0.01F);
      assertEquals(0.28356954F, lightSource0.getY(), 0.01F);
      assertEquals(0.28356954F, lightSource0.getZ(), 0.01F);
      assertNotNull(lightSource0);
      
      LightSource lightSource1 = new LightSource((-815.0F), (-1.0F), (-127.62969F), (-174));
      assertFalse(lightSource1.equals((Object)lightSource0));
      assertEquals((-1.0F), lightSource1.getY(), 0.01F);
      assertEquals((-815.0F), lightSource1.getX(), 0.01F);
      assertEquals((-174), lightSource1.getColor());
      assertEquals((-127.62969F), lightSource1.getZ(), 0.01F);
      assertNull(lightSource1.getDiameter());
      assertNotNull(lightSource1);
      
      BigDecimal bigDecimal0 = BigDecimal.ZERO;
      assertEquals((byte)0, bigDecimal0.byteValue());
      assertEquals((short)0, bigDecimal0.shortValue());
      assertNotNull(bigDecimal0);
      
      CatalogLight catalogLight0 = new CatalogLight("h&*+\"", "h&*+\"", "h&*+\"", (Content) null, (Content) null, 0.28356954F, 0.28356954F, 2965.994F, (-694.0F), false, lightSourceArray0, (float[][]) null, "ELEVATION", true, bigDecimal0, bigDecimal0);
      assertEquals((byte)0, bigDecimal0.byteValue());
      assertEquals((short)0, bigDecimal0.shortValue());
      assertNull(catalogLight0.getGrade());
      assertNull(catalogLight0.getCurrency());
      assertEquals((-694.0F), catalogLight0.getElevation(), 0.01F);
      assertTrue(catalogLight0.isTexturable());
      assertTrue(catalogLight0.isProportional());
      assertTrue(catalogLight0.isResizable());
      assertEquals("h&*+\"", catalogLight0.getId());
      assertEquals(0.28356954F, catalogLight0.getDepth(), 0.01F);
      assertNull(catalogLight0.getInformation());
      assertTrue(catalogLight0.isDeformable());
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertFalse(catalogLight0.isDoorOrWindow());
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertFalse(catalogLight0.isBackFaceShown());
      assertEquals("h&*+\"", catalogLight0.getName());
      assertNull(catalogLight0.getCreationDate());
      assertNull(catalogLight0.getColor());
      assertFalse(catalogLight0.isModifiable());
      assertEquals(0.28356954F, catalogLight0.getWidth(), 0.01F);
      assertEquals("ELEVATION", catalogLight0.getCreator());
      assertFalse(catalogLight0.isMovable());
      assertEquals(2965.994F, catalogLight0.getHeight(), 0.01F);
      assertEquals("h&*+\"", catalogLight0.getDescription());
      assertEquals(2, lightSourceArray0.length);
      assertNotNull(catalogLight0);
      
      HomeLight homeLight0 = new HomeLight(catalogLight0);
      assertEquals((byte)0, bigDecimal0.byteValue());
      assertEquals((short)0, bigDecimal0.shortValue());
      assertNull(catalogLight0.getGrade());
      assertNull(catalogLight0.getCurrency());
      assertEquals((-694.0F), catalogLight0.getElevation(), 0.01F);
      assertTrue(catalogLight0.isTexturable());
      assertTrue(catalogLight0.isProportional());
      assertTrue(catalogLight0.isResizable());
      assertEquals("h&*+\"", catalogLight0.getId());
      assertEquals(0.28356954F, catalogLight0.getDepth(), 0.01F);
      assertNull(catalogLight0.getInformation());
      assertTrue(catalogLight0.isDeformable());
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertFalse(catalogLight0.isDoorOrWindow());
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertFalse(catalogLight0.isBackFaceShown());
      assertEquals("h&*+\"", catalogLight0.getName());
      assertNull(catalogLight0.getCreationDate());
      assertNull(catalogLight0.getColor());
      assertFalse(catalogLight0.isModifiable());
      assertEquals(0.28356954F, catalogLight0.getWidth(), 0.01F);
      assertEquals("ELEVATION", catalogLight0.getCreator());
      assertFalse(catalogLight0.isMovable());
      assertEquals(2965.994F, catalogLight0.getHeight(), 0.01F);
      assertEquals("h&*+\"", catalogLight0.getDescription());
      assertEquals(0.28356954F, homeLight0.getWidth(), 0.01F);
      assertTrue(homeLight0.isVisible());
      assertEquals("h&*+\"", homeLight0.getCatalogId());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertTrue(homeLight0.isResizable());
      assertTrue(homeLight0.isDeformable());
      assertFalse(homeLight0.isModelMirrored());
      assertEquals("h&*+\"", homeLight0.getName());
      assertFalse(homeLight0.isDoorOrWindow());
      assertEquals(2965.994F, homeLight0.getHeight(), 0.01F);
      assertEquals("h&*+\"", homeLight0.getDescription());
      assertFalse(homeLight0.isBackFaceShown());
      assertFalse(homeLight0.isNameVisible());
      assertTrue(homeLight0.isTexturable());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertEquals((-694.0F), homeLight0.getElevation(), 0.01F);
      assertEquals((-694.0F), homeLight0.getGroundElevation(), 0.01F);
      assertEquals(0.28356954F, homeLight0.getDepth(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals(0.14178477F, homeLight0.getY(), 0.01F);
      assertNull(homeLight0.getColor());
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertNull(homeLight0.getShininess());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertFalse(homeLight0.isMovable());
      assertNull(homeLight0.getCurrency());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals(0.14178477F, homeLight0.getX(), 0.01F);
      assertEquals(2, lightSourceArray0.length);
      assertNotNull(homeLight0);
      
      homeLight0.setY((-127.62969F));
      assertEquals((byte)0, bigDecimal0.byteValue());
      assertEquals((short)0, bigDecimal0.shortValue());
      assertNull(catalogLight0.getGrade());
      assertNull(catalogLight0.getCurrency());
      assertEquals((-694.0F), catalogLight0.getElevation(), 0.01F);
      assertTrue(catalogLight0.isTexturable());
      assertTrue(catalogLight0.isProportional());
      assertTrue(catalogLight0.isResizable());
      assertEquals("h&*+\"", catalogLight0.getId());
      assertEquals(0.28356954F, catalogLight0.getDepth(), 0.01F);
      assertNull(catalogLight0.getInformation());
      assertTrue(catalogLight0.isDeformable());
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertFalse(catalogLight0.isDoorOrWindow());
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertFalse(catalogLight0.isBackFaceShown());
      assertEquals("h&*+\"", catalogLight0.getName());
      assertNull(catalogLight0.getCreationDate());
      assertNull(catalogLight0.getColor());
      assertFalse(catalogLight0.isModifiable());
      assertEquals(0.28356954F, catalogLight0.getWidth(), 0.01F);
      assertEquals("ELEVATION", catalogLight0.getCreator());
      assertFalse(catalogLight0.isMovable());
      assertEquals(2965.994F, catalogLight0.getHeight(), 0.01F);
      assertEquals("h&*+\"", catalogLight0.getDescription());
      assertEquals(0.28356954F, homeLight0.getWidth(), 0.01F);
      assertTrue(homeLight0.isVisible());
      assertEquals((-127.62969F), homeLight0.getY(), 0.01F);
      assertEquals("h&*+\"", homeLight0.getCatalogId());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertTrue(homeLight0.isResizable());
      assertTrue(homeLight0.isDeformable());
      assertFalse(homeLight0.isModelMirrored());
      assertEquals("h&*+\"", homeLight0.getName());
      assertFalse(homeLight0.isDoorOrWindow());
      assertEquals(2965.994F, homeLight0.getHeight(), 0.01F);
      assertEquals("h&*+\"", homeLight0.getDescription());
      assertFalse(homeLight0.isBackFaceShown());
      assertFalse(homeLight0.isNameVisible());
      assertTrue(homeLight0.isTexturable());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertEquals((-694.0F), homeLight0.getElevation(), 0.01F);
      assertEquals((-694.0F), homeLight0.getGroundElevation(), 0.01F);
      assertEquals(0.28356954F, homeLight0.getDepth(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertNull(homeLight0.getColor());
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertNull(homeLight0.getShininess());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertFalse(homeLight0.isMovable());
      assertNull(homeLight0.getCurrency());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals(0.14178477F, homeLight0.getX(), 0.01F);
      assertEquals(2, lightSourceArray0.length);
      
      HomeLight homeLight1 = homeLight0.clone();
      assertFalse(homeLight1.equals((Object)homeLight0));
      assertEquals((byte)0, bigDecimal0.byteValue());
      assertEquals((short)0, bigDecimal0.shortValue());
      assertNull(catalogLight0.getGrade());
      assertNull(catalogLight0.getCurrency());
      assertEquals((-694.0F), catalogLight0.getElevation(), 0.01F);
      assertTrue(catalogLight0.isTexturable());
      assertTrue(catalogLight0.isProportional());
      assertTrue(catalogLight0.isResizable());
      assertEquals("h&*+\"", catalogLight0.getId());
      assertEquals(0.28356954F, catalogLight0.getDepth(), 0.01F);
      assertNull(catalogLight0.getInformation());
      assertTrue(catalogLight0.isDeformable());
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertFalse(catalogLight0.isDoorOrWindow());
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertFalse(catalogLight0.isBackFaceShown());
      assertEquals("h&*+\"", catalogLight0.getName());
      assertNull(catalogLight0.getCreationDate());
      assertNull(catalogLight0.getColor());
      assertFalse(catalogLight0.isModifiable());
      assertEquals(0.28356954F, catalogLight0.getWidth(), 0.01F);
      assertEquals("ELEVATION", catalogLight0.getCreator());
      assertFalse(catalogLight0.isMovable());
      assertEquals(2965.994F, catalogLight0.getHeight(), 0.01F);
      assertEquals("h&*+\"", catalogLight0.getDescription());
      assertEquals(0.28356954F, homeLight0.getWidth(), 0.01F);
      assertTrue(homeLight0.isVisible());
      assertEquals((-127.62969F), homeLight0.getY(), 0.01F);
      assertEquals("h&*+\"", homeLight0.getCatalogId());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertTrue(homeLight0.isResizable());
      assertTrue(homeLight0.isDeformable());
      assertFalse(homeLight0.isModelMirrored());
      assertEquals("h&*+\"", homeLight0.getName());
      assertFalse(homeLight0.isDoorOrWindow());
      assertEquals(2965.994F, homeLight0.getHeight(), 0.01F);
      assertEquals("h&*+\"", homeLight0.getDescription());
      assertFalse(homeLight0.isBackFaceShown());
      assertFalse(homeLight0.isNameVisible());
      assertTrue(homeLight0.isTexturable());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertEquals((-694.0F), homeLight0.getElevation(), 0.01F);
      assertEquals((-694.0F), homeLight0.getGroundElevation(), 0.01F);
      assertEquals(0.28356954F, homeLight0.getDepth(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertNull(homeLight0.getColor());
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertNull(homeLight0.getShininess());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertFalse(homeLight0.isMovable());
      assertNull(homeLight0.getCurrency());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals(0.14178477F, homeLight0.getX(), 0.01F);
      assertEquals((-694.0F), homeLight1.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight1.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeLight1.getNameAngle(), 0.01F);
      assertNull(homeLight1.getStaircaseCutOutShape());
      assertFalse(homeLight1.isModelMirrored());
      assertEquals("h&*+\"", homeLight1.getName());
      assertTrue(homeLight1.isResizable());
      assertFalse(homeLight1.isBackFaceShown());
      assertFalse(homeLight1.isNameVisible());
      assertEquals("h&*+\"", homeLight1.getDescription());
      assertFalse(homeLight1.isDoorOrWindow());
      assertEquals(0.0F, homeLight1.getAngle(), 0.01F);
      assertTrue(homeLight1.isTexturable());
      assertEquals((-694.0F), homeLight1.getElevation(), 0.01F);
      assertEquals(0.28356954F, homeLight1.getWidth(), 0.01F);
      assertTrue(homeLight1.isDeformable());
      assertEquals(0.0F, homeLight1.getNameYOffset(), 0.01F);
      assertEquals((-127.62969F), homeLight1.getY(), 0.01F);
      assertEquals(2965.994F, homeLight1.getHeight(), 0.01F);
      assertNull(homeLight1.getShininess());
      assertTrue(homeLight1.isVisible());
      assertNull(homeLight1.getColor());
      assertEquals(0.14178477F, homeLight1.getX(), 0.01F);
      assertEquals("h&*+\"", homeLight1.getCatalogId());
      assertFalse(homeLight1.isMovable());
      assertNull(homeLight1.getCurrency());
      assertEquals(0.5F, homeLight1.getPower(), 0.01F);
      assertEquals(0.28356954F, homeLight1.getDepth(), 0.01F);
      assertEquals(2, lightSourceArray0.length);
      assertNotSame(homeLight0, homeLight1);
      assertNotSame(homeLight1, homeLight0);
      assertNotNull(homeLight1);
      
      boolean boolean1 = homeLight1.isTopLeftPointAt((-127.62969F), (-174), 2965.994F);
      assertFalse(homeLight0.equals((Object)homeLight1));
      assertFalse(homeLight1.equals((Object)homeLight0));
      assertFalse(boolean1 == boolean0);
      assertEquals((byte)0, bigDecimal0.byteValue());
      assertEquals((short)0, bigDecimal0.shortValue());
      assertNull(catalogLight0.getGrade());
      assertNull(catalogLight0.getCurrency());
      assertEquals((-694.0F), catalogLight0.getElevation(), 0.01F);
      assertTrue(catalogLight0.isTexturable());
      assertTrue(catalogLight0.isProportional());
      assertTrue(catalogLight0.isResizable());
      assertEquals("h&*+\"", catalogLight0.getId());
      assertEquals(0.28356954F, catalogLight0.getDepth(), 0.01F);
      assertNull(catalogLight0.getInformation());
      assertTrue(catalogLight0.isDeformable());
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertFalse(catalogLight0.isDoorOrWindow());
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertFalse(catalogLight0.isBackFaceShown());
      assertEquals("h&*+\"", catalogLight0.getName());
      assertNull(catalogLight0.getCreationDate());
      assertNull(catalogLight0.getColor());
      assertFalse(catalogLight0.isModifiable());
      assertEquals(0.28356954F, catalogLight0.getWidth(), 0.01F);
      assertEquals("ELEVATION", catalogLight0.getCreator());
      assertFalse(catalogLight0.isMovable());
      assertEquals(2965.994F, catalogLight0.getHeight(), 0.01F);
      assertEquals("h&*+\"", catalogLight0.getDescription());
      assertEquals(0.28356954F, homeLight0.getWidth(), 0.01F);
      assertTrue(homeLight0.isVisible());
      assertEquals((-127.62969F), homeLight0.getY(), 0.01F);
      assertEquals("h&*+\"", homeLight0.getCatalogId());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertTrue(homeLight0.isResizable());
      assertTrue(homeLight0.isDeformable());
      assertFalse(homeLight0.isModelMirrored());
      assertEquals("h&*+\"", homeLight0.getName());
      assertFalse(homeLight0.isDoorOrWindow());
      assertEquals(2965.994F, homeLight0.getHeight(), 0.01F);
      assertEquals("h&*+\"", homeLight0.getDescription());
      assertFalse(homeLight0.isBackFaceShown());
      assertFalse(homeLight0.isNameVisible());
      assertTrue(homeLight0.isTexturable());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertEquals((-694.0F), homeLight0.getElevation(), 0.01F);
      assertEquals((-694.0F), homeLight0.getGroundElevation(), 0.01F);
      assertEquals(0.28356954F, homeLight0.getDepth(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertNull(homeLight0.getColor());
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertNull(homeLight0.getShininess());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertFalse(homeLight0.isMovable());
      assertNull(homeLight0.getCurrency());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals(0.14178477F, homeLight0.getX(), 0.01F);
      assertEquals((-694.0F), homeLight1.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight1.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeLight1.getNameAngle(), 0.01F);
      assertNull(homeLight1.getStaircaseCutOutShape());
      assertFalse(homeLight1.isModelMirrored());
      assertEquals("h&*+\"", homeLight1.getName());
      assertTrue(homeLight1.isResizable());
      assertFalse(homeLight1.isBackFaceShown());
      assertFalse(homeLight1.isNameVisible());
      assertEquals("h&*+\"", homeLight1.getDescription());
      assertFalse(homeLight1.isDoorOrWindow());
      assertEquals(0.0F, homeLight1.getAngle(), 0.01F);
      assertTrue(homeLight1.isTexturable());
      assertEquals((-694.0F), homeLight1.getElevation(), 0.01F);
      assertEquals(0.28356954F, homeLight1.getWidth(), 0.01F);
      assertTrue(homeLight1.isDeformable());
      assertEquals(0.0F, homeLight1.getNameYOffset(), 0.01F);
      assertEquals((-127.62969F), homeLight1.getY(), 0.01F);
      assertEquals(2965.994F, homeLight1.getHeight(), 0.01F);
      assertNull(homeLight1.getShininess());
      assertTrue(homeLight1.isVisible());
      assertNull(homeLight1.getColor());
      assertEquals(0.14178477F, homeLight1.getX(), 0.01F);
      assertEquals("h&*+\"", homeLight1.getCatalogId());
      assertFalse(homeLight1.isMovable());
      assertNull(homeLight1.getCurrency());
      assertEquals(0.5F, homeLight1.getPower(), 0.01F);
      assertEquals(0.28356954F, homeLight1.getDepth(), 0.01F);
      assertEquals(2, lightSourceArray0.length);
      assertNotSame(homeLight0, homeLight1);
      assertNotSame(homeLight1, homeLight0);
      assertTrue(boolean1);
      
      boolean boolean2 = homeLight1.intersectsRectangle(1.0F, (-1581.4954F), (-1581.4954F), 3737.9102F);
      assertFalse(homeLight0.equals((Object)homeLight1));
      assertFalse(homeLight1.equals((Object)homeLight0));
      assertFalse(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertEquals((byte)0, bigDecimal0.byteValue());
      assertEquals((short)0, bigDecimal0.shortValue());
      assertNull(catalogLight0.getGrade());
      assertNull(catalogLight0.getCurrency());
      assertEquals((-694.0F), catalogLight0.getElevation(), 0.01F);
      assertTrue(catalogLight0.isTexturable());
      assertTrue(catalogLight0.isProportional());
      assertTrue(catalogLight0.isResizable());
      assertEquals("h&*+\"", catalogLight0.getId());
      assertEquals(0.28356954F, catalogLight0.getDepth(), 0.01F);
      assertNull(catalogLight0.getInformation());
      assertTrue(catalogLight0.isDeformable());
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertFalse(catalogLight0.isDoorOrWindow());
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertFalse(catalogLight0.isBackFaceShown());
      assertEquals("h&*+\"", catalogLight0.getName());
      assertNull(catalogLight0.getCreationDate());
      assertNull(catalogLight0.getColor());
      assertFalse(catalogLight0.isModifiable());
      assertEquals(0.28356954F, catalogLight0.getWidth(), 0.01F);
      assertEquals("ELEVATION", catalogLight0.getCreator());
      assertFalse(catalogLight0.isMovable());
      assertEquals(2965.994F, catalogLight0.getHeight(), 0.01F);
      assertEquals("h&*+\"", catalogLight0.getDescription());
      assertEquals(0.28356954F, homeLight0.getWidth(), 0.01F);
      assertTrue(homeLight0.isVisible());
      assertEquals((-127.62969F), homeLight0.getY(), 0.01F);
      assertEquals("h&*+\"", homeLight0.getCatalogId());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertTrue(homeLight0.isResizable());
      assertTrue(homeLight0.isDeformable());
      assertFalse(homeLight0.isModelMirrored());
      assertEquals("h&*+\"", homeLight0.getName());
      assertFalse(homeLight0.isDoorOrWindow());
      assertEquals(2965.994F, homeLight0.getHeight(), 0.01F);
      assertEquals("h&*+\"", homeLight0.getDescription());
      assertFalse(homeLight0.isBackFaceShown());
      assertFalse(homeLight0.isNameVisible());
      assertTrue(homeLight0.isTexturable());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertEquals((-694.0F), homeLight0.getElevation(), 0.01F);
      assertEquals((-694.0F), homeLight0.getGroundElevation(), 0.01F);
      assertEquals(0.28356954F, homeLight0.getDepth(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertNull(homeLight0.getColor());
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertNull(homeLight0.getShininess());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertFalse(homeLight0.isMovable());
      assertNull(homeLight0.getCurrency());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals(0.14178477F, homeLight0.getX(), 0.01F);
      assertEquals((-694.0F), homeLight1.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight1.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeLight1.getNameAngle(), 0.01F);
      assertNull(homeLight1.getStaircaseCutOutShape());
      assertFalse(homeLight1.isModelMirrored());
      assertEquals("h&*+\"", homeLight1.getName());
      assertTrue(homeLight1.isResizable());
      assertFalse(homeLight1.isBackFaceShown());
      assertFalse(homeLight1.isNameVisible());
      assertEquals("h&*+\"", homeLight1.getDescription());
      assertFalse(homeLight1.isDoorOrWindow());
      assertEquals(0.0F, homeLight1.getAngle(), 0.01F);
      assertTrue(homeLight1.isTexturable());
      assertEquals((-694.0F), homeLight1.getElevation(), 0.01F);
      assertEquals(0.28356954F, homeLight1.getWidth(), 0.01F);
      assertTrue(homeLight1.isDeformable());
      assertEquals(0.0F, homeLight1.getNameYOffset(), 0.01F);
      assertEquals((-127.62969F), homeLight1.getY(), 0.01F);
      assertEquals(2965.994F, homeLight1.getHeight(), 0.01F);
      assertNull(homeLight1.getShininess());
      assertTrue(homeLight1.isVisible());
      assertNull(homeLight1.getColor());
      assertEquals(0.14178477F, homeLight1.getX(), 0.01F);
      assertEquals("h&*+\"", homeLight1.getCatalogId());
      assertFalse(homeLight1.isMovable());
      assertNull(homeLight1.getCurrency());
      assertEquals(0.5F, homeLight1.getPower(), 0.01F);
      assertEquals(0.28356954F, homeLight1.getDepth(), 0.01F);
      assertEquals(2, lightSourceArray0.length);
      assertNotSame(homeLight0, homeLight1);
      assertNotSame(homeLight1, homeLight0);
      assertTrue(boolean2);
      
      homeLight1.setModelMirrored(false);
      assertFalse(homeLight0.equals((Object)homeLight1));
      assertFalse(homeLight1.equals((Object)homeLight0));
      assertEquals((byte)0, bigDecimal0.byteValue());
      assertEquals((short)0, bigDecimal0.shortValue());
      assertNull(catalogLight0.getGrade());
      assertNull(catalogLight0.getCurrency());
      assertEquals((-694.0F), catalogLight0.getElevation(), 0.01F);
      assertTrue(catalogLight0.isTexturable());
      assertTrue(catalogLight0.isProportional());
      assertTrue(catalogLight0.isResizable());
      assertEquals("h&*+\"", catalogLight0.getId());
      assertEquals(0.28356954F, catalogLight0.getDepth(), 0.01F);
      assertNull(catalogLight0.getInformation());
      assertTrue(catalogLight0.isDeformable());
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertFalse(catalogLight0.isDoorOrWindow());
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertFalse(catalogLight0.isBackFaceShown());
      assertEquals("h&*+\"", catalogLight0.getName());
      assertNull(catalogLight0.getCreationDate());
      assertNull(catalogLight0.getColor());
      assertFalse(catalogLight0.isModifiable());
      assertEquals(0.28356954F, catalogLight0.getWidth(), 0.01F);
      assertEquals("ELEVATION", catalogLight0.getCreator());
      assertFalse(catalogLight0.isMovable());
      assertEquals(2965.994F, catalogLight0.getHeight(), 0.01F);
      assertEquals("h&*+\"", catalogLight0.getDescription());
      assertEquals(0.28356954F, homeLight0.getWidth(), 0.01F);
      assertTrue(homeLight0.isVisible());
      assertEquals((-127.62969F), homeLight0.getY(), 0.01F);
      assertEquals("h&*+\"", homeLight0.getCatalogId());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertTrue(homeLight0.isResizable());
      assertTrue(homeLight0.isDeformable());
      assertFalse(homeLight0.isModelMirrored());
      assertEquals("h&*+\"", homeLight0.getName());
      assertFalse(homeLight0.isDoorOrWindow());
      assertEquals(2965.994F, homeLight0.getHeight(), 0.01F);
      assertEquals("h&*+\"", homeLight0.getDescription());
      assertFalse(homeLight0.isBackFaceShown());
      assertFalse(homeLight0.isNameVisible());
      assertTrue(homeLight0.isTexturable());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertEquals((-694.0F), homeLight0.getElevation(), 0.01F);
      assertEquals((-694.0F), homeLight0.getGroundElevation(), 0.01F);
      assertEquals(0.28356954F, homeLight0.getDepth(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertNull(homeLight0.getColor());
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertNull(homeLight0.getShininess());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertFalse(homeLight0.isMovable());
      assertNull(homeLight0.getCurrency());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals(0.14178477F, homeLight0.getX(), 0.01F);
      assertEquals((-694.0F), homeLight1.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight1.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeLight1.getNameAngle(), 0.01F);
      assertNull(homeLight1.getStaircaseCutOutShape());
      assertFalse(homeLight1.isModelMirrored());
      assertEquals("h&*+\"", homeLight1.getName());
      assertTrue(homeLight1.isResizable());
      assertFalse(homeLight1.isBackFaceShown());
      assertFalse(homeLight1.isNameVisible());
      assertEquals("h&*+\"", homeLight1.getDescription());
      assertFalse(homeLight1.isDoorOrWindow());
      assertEquals(0.0F, homeLight1.getAngle(), 0.01F);
      assertTrue(homeLight1.isTexturable());
      assertEquals((-694.0F), homeLight1.getElevation(), 0.01F);
      assertEquals(0.28356954F, homeLight1.getWidth(), 0.01F);
      assertTrue(homeLight1.isDeformable());
      assertEquals(0.0F, homeLight1.getNameYOffset(), 0.01F);
      assertEquals((-127.62969F), homeLight1.getY(), 0.01F);
      assertEquals(2965.994F, homeLight1.getHeight(), 0.01F);
      assertNull(homeLight1.getShininess());
      assertTrue(homeLight1.isVisible());
      assertNull(homeLight1.getColor());
      assertEquals(0.14178477F, homeLight1.getX(), 0.01F);
      assertEquals("h&*+\"", homeLight1.getCatalogId());
      assertFalse(homeLight1.isMovable());
      assertNull(homeLight1.getCurrency());
      assertEquals(0.5F, homeLight1.getPower(), 0.01F);
      assertEquals(0.28356954F, homeLight1.getDepth(), 0.01F);
      assertEquals(2, lightSourceArray0.length);
      assertNotSame(homeLight0, homeLight1);
      assertNotSame(homeLight1, homeLight0);
      
      HomeLight homeLight2 = new HomeLight(homeLight1);
      assertFalse(homeLight0.equals((Object)homeLight1));
      assertFalse(homeLight1.equals((Object)homeLight0));
      assertFalse(homeLight2.equals((Object)homeLight1));
      assertFalse(homeLight2.equals((Object)homeLight0));
      assertEquals((byte)0, bigDecimal0.byteValue());
      assertEquals((short)0, bigDecimal0.shortValue());
      assertNull(catalogLight0.getGrade());
      assertNull(catalogLight0.getCurrency());
      assertEquals((-694.0F), catalogLight0.getElevation(), 0.01F);
      assertTrue(catalogLight0.isTexturable());
      assertTrue(catalogLight0.isProportional());
      assertTrue(catalogLight0.isResizable());
      assertEquals("h&*+\"", catalogLight0.getId());
      assertEquals(0.28356954F, catalogLight0.getDepth(), 0.01F);
      assertNull(catalogLight0.getInformation());
      assertTrue(catalogLight0.isDeformable());
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertFalse(catalogLight0.isDoorOrWindow());
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertFalse(catalogLight0.isBackFaceShown());
      assertEquals("h&*+\"", catalogLight0.getName());
      assertNull(catalogLight0.getCreationDate());
      assertNull(catalogLight0.getColor());
      assertFalse(catalogLight0.isModifiable());
      assertEquals(0.28356954F, catalogLight0.getWidth(), 0.01F);
      assertEquals("ELEVATION", catalogLight0.getCreator());
      assertFalse(catalogLight0.isMovable());
      assertEquals(2965.994F, catalogLight0.getHeight(), 0.01F);
      assertEquals("h&*+\"", catalogLight0.getDescription());
      assertEquals(0.28356954F, homeLight0.getWidth(), 0.01F);
      assertTrue(homeLight0.isVisible());
      assertEquals((-127.62969F), homeLight0.getY(), 0.01F);
      assertEquals("h&*+\"", homeLight0.getCatalogId());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertTrue(homeLight0.isResizable());
      assertTrue(homeLight0.isDeformable());
      assertFalse(homeLight0.isModelMirrored());
      assertEquals("h&*+\"", homeLight0.getName());
      assertFalse(homeLight0.isDoorOrWindow());
      assertEquals(2965.994F, homeLight0.getHeight(), 0.01F);
      assertEquals("h&*+\"", homeLight0.getDescription());
      assertFalse(homeLight0.isBackFaceShown());
      assertFalse(homeLight0.isNameVisible());
      assertTrue(homeLight0.isTexturable());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertEquals((-694.0F), homeLight0.getElevation(), 0.01F);
      assertEquals((-694.0F), homeLight0.getGroundElevation(), 0.01F);
      assertEquals(0.28356954F, homeLight0.getDepth(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertNull(homeLight0.getColor());
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertNull(homeLight0.getShininess());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertFalse(homeLight0.isMovable());
      assertNull(homeLight0.getCurrency());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals(0.14178477F, homeLight0.getX(), 0.01F);
      assertEquals((-694.0F), homeLight1.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight1.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeLight1.getNameAngle(), 0.01F);
      assertNull(homeLight1.getStaircaseCutOutShape());
      assertFalse(homeLight1.isModelMirrored());
      assertEquals("h&*+\"", homeLight1.getName());
      assertTrue(homeLight1.isResizable());
      assertFalse(homeLight1.isBackFaceShown());
      assertFalse(homeLight1.isNameVisible());
      assertEquals("h&*+\"", homeLight1.getDescription());
      assertFalse(homeLight1.isDoorOrWindow());
      assertEquals(0.0F, homeLight1.getAngle(), 0.01F);
      assertTrue(homeLight1.isTexturable());
      assertEquals((-694.0F), homeLight1.getElevation(), 0.01F);
      assertEquals(0.28356954F, homeLight1.getWidth(), 0.01F);
      assertTrue(homeLight1.isDeformable());
      assertEquals(0.0F, homeLight1.getNameYOffset(), 0.01F);
      assertEquals((-127.62969F), homeLight1.getY(), 0.01F);
      assertEquals(2965.994F, homeLight1.getHeight(), 0.01F);
      assertNull(homeLight1.getShininess());
      assertTrue(homeLight1.isVisible());
      assertNull(homeLight1.getColor());
      assertEquals(0.14178477F, homeLight1.getX(), 0.01F);
      assertEquals("h&*+\"", homeLight1.getCatalogId());
      assertFalse(homeLight1.isMovable());
      assertNull(homeLight1.getCurrency());
      assertEquals(0.5F, homeLight1.getPower(), 0.01F);
      assertEquals(0.28356954F, homeLight1.getDepth(), 0.01F);
      assertEquals((-694.0F), homeLight2.getGroundElevation(), 0.01F);
      assertFalse(homeLight2.isBackFaceShown());
      assertFalse(homeLight2.isModelMirrored());
      assertEquals(0.0F, homeLight2.getNameXOffset(), 0.01F);
      assertEquals("h&*+\"", homeLight2.getName());
      assertFalse(homeLight2.isNameVisible());
      assertEquals((-694.0F), homeLight2.getElevation(), 0.01F);
      assertFalse(homeLight2.isDoorOrWindow());
      assertTrue(homeLight2.isTexturable());
      assertEquals(0.0F, homeLight2.getAngle(), 0.01F);
      assertEquals("h&*+\"", homeLight2.getDescription());
      assertEquals(0.0F, homeLight2.getNameYOffset(), 0.01F);
      assertEquals(2965.994F, homeLight2.getHeight(), 0.01F);
      assertTrue(homeLight2.isDeformable());
      assertTrue(homeLight2.isResizable());
      assertTrue(homeLight2.isVisible());
      assertNull(homeLight2.getShininess());
      assertEquals(0.28356954F, homeLight2.getWidth(), 0.01F);
      assertNull(homeLight2.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight2.getNameAngle(), 0.01F);
      assertEquals(0.14178477F, homeLight2.getX(), 0.01F);
      assertNull(homeLight2.getColor());
      assertEquals((-127.62969F), homeLight2.getY(), 0.01F);
      assertEquals(0.28356954F, homeLight2.getDepth(), 0.01F);
      assertEquals("h&*+\"", homeLight2.getCatalogId());
      assertNull(homeLight2.getCurrency());
      assertFalse(homeLight2.isMovable());
      assertEquals(0.5F, homeLight2.getPower(), 0.01F);
      assertEquals(2, lightSourceArray0.length);
      assertNotNull(homeLight2);
      
      HomeLight homeLight3 = homeLight2.clone();
      assertFalse(homeLight0.equals((Object)homeLight1));
      assertFalse(homeLight0.equals((Object)homeLight2));
      assertFalse(homeLight1.equals((Object)homeLight2));
      assertFalse(homeLight1.equals((Object)homeLight0));
      assertFalse(homeLight2.equals((Object)homeLight1));
      assertFalse(homeLight2.equals((Object)homeLight0));
      assertFalse(homeLight3.equals((Object)homeLight0));
      assertFalse(homeLight3.equals((Object)homeLight2));
      assertFalse(homeLight3.equals((Object)homeLight1));
      assertEquals((byte)0, bigDecimal0.byteValue());
      assertEquals((short)0, bigDecimal0.shortValue());
      assertNull(catalogLight0.getGrade());
      assertNull(catalogLight0.getCurrency());
      assertEquals((-694.0F), catalogLight0.getElevation(), 0.01F);
      assertTrue(catalogLight0.isTexturable());
      assertTrue(catalogLight0.isProportional());
      assertTrue(catalogLight0.isResizable());
      assertEquals("h&*+\"", catalogLight0.getId());
      assertEquals(0.28356954F, catalogLight0.getDepth(), 0.01F);
      assertNull(catalogLight0.getInformation());
      assertTrue(catalogLight0.isDeformable());
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertFalse(catalogLight0.isDoorOrWindow());
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertFalse(catalogLight0.isBackFaceShown());
      assertEquals("h&*+\"", catalogLight0.getName());
      assertNull(catalogLight0.getCreationDate());
      assertNull(catalogLight0.getColor());
      assertFalse(catalogLight0.isModifiable());
      assertEquals(0.28356954F, catalogLight0.getWidth(), 0.01F);
      assertEquals("ELEVATION", catalogLight0.getCreator());
      assertFalse(catalogLight0.isMovable());
      assertEquals(2965.994F, catalogLight0.getHeight(), 0.01F);
      assertEquals("h&*+\"", catalogLight0.getDescription());
      assertEquals(0.28356954F, homeLight0.getWidth(), 0.01F);
      assertTrue(homeLight0.isVisible());
      assertEquals((-127.62969F), homeLight0.getY(), 0.01F);
      assertEquals("h&*+\"", homeLight0.getCatalogId());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertTrue(homeLight0.isResizable());
      assertTrue(homeLight0.isDeformable());
      assertFalse(homeLight0.isModelMirrored());
      assertEquals("h&*+\"", homeLight0.getName());
      assertFalse(homeLight0.isDoorOrWindow());
      assertEquals(2965.994F, homeLight0.getHeight(), 0.01F);
      assertEquals("h&*+\"", homeLight0.getDescription());
      assertFalse(homeLight0.isBackFaceShown());
      assertFalse(homeLight0.isNameVisible());
      assertTrue(homeLight0.isTexturable());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertEquals((-694.0F), homeLight0.getElevation(), 0.01F);
      assertEquals((-694.0F), homeLight0.getGroundElevation(), 0.01F);
      assertEquals(0.28356954F, homeLight0.getDepth(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertNull(homeLight0.getColor());
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertNull(homeLight0.getShininess());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertFalse(homeLight0.isMovable());
      assertNull(homeLight0.getCurrency());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals(0.14178477F, homeLight0.getX(), 0.01F);
      assertEquals((-694.0F), homeLight1.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight1.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeLight1.getNameAngle(), 0.01F);
      assertNull(homeLight1.getStaircaseCutOutShape());
      assertFalse(homeLight1.isModelMirrored());
      assertEquals("h&*+\"", homeLight1.getName());
      assertTrue(homeLight1.isResizable());
      assertFalse(homeLight1.isBackFaceShown());
      assertFalse(homeLight1.isNameVisible());
      assertEquals("h&*+\"", homeLight1.getDescription());
      assertFalse(homeLight1.isDoorOrWindow());
      assertEquals(0.0F, homeLight1.getAngle(), 0.01F);
      assertTrue(homeLight1.isTexturable());
      assertEquals((-694.0F), homeLight1.getElevation(), 0.01F);
      assertEquals(0.28356954F, homeLight1.getWidth(), 0.01F);
      assertTrue(homeLight1.isDeformable());
      assertEquals(0.0F, homeLight1.getNameYOffset(), 0.01F);
      assertEquals((-127.62969F), homeLight1.getY(), 0.01F);
      assertEquals(2965.994F, homeLight1.getHeight(), 0.01F);
      assertNull(homeLight1.getShininess());
      assertTrue(homeLight1.isVisible());
      assertNull(homeLight1.getColor());
      assertEquals(0.14178477F, homeLight1.getX(), 0.01F);
      assertEquals("h&*+\"", homeLight1.getCatalogId());
      assertFalse(homeLight1.isMovable());
      assertNull(homeLight1.getCurrency());
      assertEquals(0.5F, homeLight1.getPower(), 0.01F);
      assertEquals(0.28356954F, homeLight1.getDepth(), 0.01F);
      assertEquals((-694.0F), homeLight2.getGroundElevation(), 0.01F);
      assertFalse(homeLight2.isBackFaceShown());
      assertFalse(homeLight2.isModelMirrored());
      assertEquals(0.0F, homeLight2.getNameXOffset(), 0.01F);
      assertEquals("h&*+\"", homeLight2.getName());
      assertFalse(homeLight2.isNameVisible());
      assertEquals((-694.0F), homeLight2.getElevation(), 0.01F);
      assertFalse(homeLight2.isDoorOrWindow());
      assertTrue(homeLight2.isTexturable());
      assertEquals(0.0F, homeLight2.getAngle(), 0.01F);
      assertEquals("h&*+\"", homeLight2.getDescription());
      assertEquals(0.0F, homeLight2.getNameYOffset(), 0.01F);
      assertEquals(2965.994F, homeLight2.getHeight(), 0.01F);
      assertTrue(homeLight2.isDeformable());
      assertTrue(homeLight2.isResizable());
      assertTrue(homeLight2.isVisible());
      assertNull(homeLight2.getShininess());
      assertEquals(0.28356954F, homeLight2.getWidth(), 0.01F);
      assertNull(homeLight2.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight2.getNameAngle(), 0.01F);
      assertEquals(0.14178477F, homeLight2.getX(), 0.01F);
      assertNull(homeLight2.getColor());
      assertEquals((-127.62969F), homeLight2.getY(), 0.01F);
      assertEquals(0.28356954F, homeLight2.getDepth(), 0.01F);
      assertEquals("h&*+\"", homeLight2.getCatalogId());
      assertNull(homeLight2.getCurrency());
      assertFalse(homeLight2.isMovable());
      assertEquals(0.5F, homeLight2.getPower(), 0.01F);
      assertFalse(homeLight3.isMovable());
      assertNull(homeLight3.getShininess());
      assertTrue(homeLight3.isResizable());
      assertEquals(0.0F, homeLight3.getNameYOffset(), 0.01F);
      assertEquals("h&*+\"", homeLight3.getCatalogId());
      assertEquals((-127.62969F), homeLight3.getY(), 0.01F);
      assertEquals(0.0F, homeLight3.getNameXOffset(), 0.01F);
      assertEquals(0.5F, homeLight3.getPower(), 0.01F);
      assertTrue(homeLight3.isDeformable());
      assertTrue(homeLight3.isVisible());
      assertNull(homeLight3.getCurrency());
      assertEquals(0.14178477F, homeLight3.getX(), 0.01F);
      assertNull(homeLight3.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight3.getNameAngle(), 0.01F);
      assertEquals(0.28356954F, homeLight3.getWidth(), 0.01F);
      assertTrue(homeLight3.isTexturable());
      assertEquals(0.0F, homeLight3.getAngle(), 0.01F);
      assertNull(homeLight3.getColor());
      assertFalse(homeLight3.isDoorOrWindow());
      assertEquals((-694.0F), homeLight3.getGroundElevation(), 0.01F);
      assertEquals(0.28356954F, homeLight3.getDepth(), 0.01F);
      assertFalse(homeLight3.isNameVisible());
      assertEquals("h&*+\"", homeLight3.getDescription());
      assertEquals((-694.0F), homeLight3.getElevation(), 0.01F);
      assertEquals("h&*+\"", homeLight3.getName());
      assertFalse(homeLight3.isModelMirrored());
      assertEquals(2965.994F, homeLight3.getHeight(), 0.01F);
      assertFalse(homeLight3.isBackFaceShown());
      assertEquals(2, lightSourceArray0.length);
      assertNotSame(homeLight0, homeLight1);
      assertNotSame(homeLight0, homeLight3);
      assertNotSame(homeLight0, homeLight2);
      assertNotSame(homeLight1, homeLight2);
      assertNotSame(homeLight1, homeLight0);
      assertNotSame(homeLight1, homeLight3);
      assertNotSame(homeLight2, homeLight1);
      assertNotSame(homeLight2, homeLight0);
      assertNotSame(homeLight2, homeLight3);
      assertNotSame(homeLight3, homeLight0);
      assertNotSame(homeLight3, homeLight2);
      assertNotSame(homeLight3, homeLight1);
      assertNotNull(homeLight3);
      
      boolean boolean3 = homeLight3.isNameCenterPointAt((-852.8F), (-1179.0F), (-1179.0F));
      assertFalse(homeLight0.equals((Object)homeLight1));
      assertFalse(homeLight0.equals((Object)homeLight3));
      assertFalse(homeLight0.equals((Object)homeLight2));
      assertFalse(homeLight1.equals((Object)homeLight2));
      assertFalse(homeLight1.equals((Object)homeLight0));
      assertFalse(homeLight1.equals((Object)homeLight3));
      assertFalse(homeLight2.equals((Object)homeLight1));
      assertFalse(homeLight2.equals((Object)homeLight0));
      assertFalse(homeLight2.equals((Object)homeLight3));
      assertFalse(homeLight3.equals((Object)homeLight0));
      assertFalse(homeLight3.equals((Object)homeLight2));
      assertFalse(homeLight3.equals((Object)homeLight1));
      assertFalse(boolean3 == boolean1);
      assertFalse(boolean3 == boolean2);
      assertTrue(boolean3 == boolean0);
      assertEquals((byte)0, bigDecimal0.byteValue());
      assertEquals((short)0, bigDecimal0.shortValue());
      assertNull(catalogLight0.getGrade());
      assertNull(catalogLight0.getCurrency());
      assertEquals((-694.0F), catalogLight0.getElevation(), 0.01F);
      assertTrue(catalogLight0.isTexturable());
      assertTrue(catalogLight0.isProportional());
      assertTrue(catalogLight0.isResizable());
      assertEquals("h&*+\"", catalogLight0.getId());
      assertEquals(0.28356954F, catalogLight0.getDepth(), 0.01F);
      assertNull(catalogLight0.getInformation());
      assertTrue(catalogLight0.isDeformable());
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertFalse(catalogLight0.isDoorOrWindow());
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertFalse(catalogLight0.isBackFaceShown());
      assertEquals("h&*+\"", catalogLight0.getName());
      assertNull(catalogLight0.getCreationDate());
      assertNull(catalogLight0.getColor());
      assertFalse(catalogLight0.isModifiable());
      assertEquals(0.28356954F, catalogLight0.getWidth(), 0.01F);
      assertEquals("ELEVATION", catalogLight0.getCreator());
      assertFalse(catalogLight0.isMovable());
      assertEquals(2965.994F, catalogLight0.getHeight(), 0.01F);
      assertEquals("h&*+\"", catalogLight0.getDescription());
      assertEquals(0.28356954F, homeLight0.getWidth(), 0.01F);
      assertTrue(homeLight0.isVisible());
      assertEquals((-127.62969F), homeLight0.getY(), 0.01F);
      assertEquals("h&*+\"", homeLight0.getCatalogId());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertTrue(homeLight0.isResizable());
      assertTrue(homeLight0.isDeformable());
      assertFalse(homeLight0.isModelMirrored());
      assertEquals("h&*+\"", homeLight0.getName());
      assertFalse(homeLight0.isDoorOrWindow());
      assertEquals(2965.994F, homeLight0.getHeight(), 0.01F);
      assertEquals("h&*+\"", homeLight0.getDescription());
      assertFalse(homeLight0.isBackFaceShown());
      assertFalse(homeLight0.isNameVisible());
      assertTrue(homeLight0.isTexturable());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertEquals((-694.0F), homeLight0.getElevation(), 0.01F);
      assertEquals((-694.0F), homeLight0.getGroundElevation(), 0.01F);
      assertEquals(0.28356954F, homeLight0.getDepth(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertNull(homeLight0.getColor());
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertNull(homeLight0.getShininess());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertFalse(homeLight0.isMovable());
      assertNull(homeLight0.getCurrency());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals(0.14178477F, homeLight0.getX(), 0.01F);
      assertEquals((-694.0F), homeLight1.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight1.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeLight1.getNameAngle(), 0.01F);
      assertNull(homeLight1.getStaircaseCutOutShape());
      assertFalse(homeLight1.isModelMirrored());
      assertEquals("h&*+\"", homeLight1.getName());
      assertTrue(homeLight1.isResizable());
      assertFalse(homeLight1.isBackFaceShown());
      assertFalse(homeLight1.isNameVisible());
      assertEquals("h&*+\"", homeLight1.getDescription());
      assertFalse(homeLight1.isDoorOrWindow());
      assertEquals(0.0F, homeLight1.getAngle(), 0.01F);
      assertTrue(homeLight1.isTexturable());
      assertEquals((-694.0F), homeLight1.getElevation(), 0.01F);
      assertEquals(0.28356954F, homeLight1.getWidth(), 0.01F);
      assertTrue(homeLight1.isDeformable());
      assertEquals(0.0F, homeLight1.getNameYOffset(), 0.01F);
      assertEquals((-127.62969F), homeLight1.getY(), 0.01F);
      assertEquals(2965.994F, homeLight1.getHeight(), 0.01F);
      assertNull(homeLight1.getShininess());
      assertTrue(homeLight1.isVisible());
      assertNull(homeLight1.getColor());
      assertEquals(0.14178477F, homeLight1.getX(), 0.01F);
      assertEquals("h&*+\"", homeLight1.getCatalogId());
      assertFalse(homeLight1.isMovable());
      assertNull(homeLight1.getCurrency());
      assertEquals(0.5F, homeLight1.getPower(), 0.01F);
      assertEquals(0.28356954F, homeLight1.getDepth(), 0.01F);
      assertEquals((-694.0F), homeLight2.getGroundElevation(), 0.01F);
      assertFalse(homeLight2.isBackFaceShown());
      assertFalse(homeLight2.isModelMirrored());
      assertEquals(0.0F, homeLight2.getNameXOffset(), 0.01F);
      assertEquals("h&*+\"", homeLight2.getName());
      assertFalse(homeLight2.isNameVisible());
      assertEquals((-694.0F), homeLight2.getElevation(), 0.01F);
      assertFalse(homeLight2.isDoorOrWindow());
      assertTrue(homeLight2.isTexturable());
      assertEquals(0.0F, homeLight2.getAngle(), 0.01F);
      assertEquals("h&*+\"", homeLight2.getDescription());
      assertEquals(0.0F, homeLight2.getNameYOffset(), 0.01F);
      assertEquals(2965.994F, homeLight2.getHeight(), 0.01F);
      assertTrue(homeLight2.isDeformable());
      assertTrue(homeLight2.isResizable());
      assertTrue(homeLight2.isVisible());
      assertNull(homeLight2.getShininess());
      assertEquals(0.28356954F, homeLight2.getWidth(), 0.01F);
      assertNull(homeLight2.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight2.getNameAngle(), 0.01F);
      assertEquals(0.14178477F, homeLight2.getX(), 0.01F);
      assertNull(homeLight2.getColor());
      assertEquals((-127.62969F), homeLight2.getY(), 0.01F);
      assertEquals(0.28356954F, homeLight2.getDepth(), 0.01F);
      assertEquals("h&*+\"", homeLight2.getCatalogId());
      assertNull(homeLight2.getCurrency());
      assertFalse(homeLight2.isMovable());
      assertEquals(0.5F, homeLight2.getPower(), 0.01F);
      assertFalse(homeLight3.isMovable());
      assertNull(homeLight3.getShininess());
      assertTrue(homeLight3.isResizable());
      assertEquals(0.0F, homeLight3.getNameYOffset(), 0.01F);
      assertEquals("h&*+\"", homeLight3.getCatalogId());
      assertEquals((-127.62969F), homeLight3.getY(), 0.01F);
      assertEquals(0.0F, homeLight3.getNameXOffset(), 0.01F);
      assertEquals(0.5F, homeLight3.getPower(), 0.01F);
      assertTrue(homeLight3.isDeformable());
      assertTrue(homeLight3.isVisible());
      assertNull(homeLight3.getCurrency());
      assertEquals(0.14178477F, homeLight3.getX(), 0.01F);
      assertNull(homeLight3.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight3.getNameAngle(), 0.01F);
      assertEquals(0.28356954F, homeLight3.getWidth(), 0.01F);
      assertTrue(homeLight3.isTexturable());
      assertEquals(0.0F, homeLight3.getAngle(), 0.01F);
      assertNull(homeLight3.getColor());
      assertFalse(homeLight3.isDoorOrWindow());
      assertEquals((-694.0F), homeLight3.getGroundElevation(), 0.01F);
      assertEquals(0.28356954F, homeLight3.getDepth(), 0.01F);
      assertFalse(homeLight3.isNameVisible());
      assertEquals("h&*+\"", homeLight3.getDescription());
      assertEquals((-694.0F), homeLight3.getElevation(), 0.01F);
      assertEquals("h&*+\"", homeLight3.getName());
      assertFalse(homeLight3.isModelMirrored());
      assertEquals(2965.994F, homeLight3.getHeight(), 0.01F);
      assertFalse(homeLight3.isBackFaceShown());
      assertEquals(2, lightSourceArray0.length);
      assertNotSame(homeLight0, homeLight1);
      assertNotSame(homeLight0, homeLight3);
      assertNotSame(homeLight0, homeLight2);
      assertNotSame(homeLight1, homeLight2);
      assertNotSame(homeLight1, homeLight0);
      assertNotSame(homeLight1, homeLight3);
      assertNotSame(homeLight2, homeLight1);
      assertNotSame(homeLight2, homeLight0);
      assertNotSame(homeLight2, homeLight3);
      assertNotSame(homeLight3, homeLight0);
      assertNotSame(homeLight3, homeLight2);
      assertNotSame(homeLight3, homeLight1);
      assertFalse(boolean3);
      
      homeLight2.setNameYOffset(1503.4F);
      assertFalse(homeLight0.equals((Object)homeLight1));
      assertFalse(homeLight0.equals((Object)homeLight3));
      assertFalse(homeLight0.equals((Object)homeLight2));
      assertFalse(homeLight1.equals((Object)homeLight2));
      assertFalse(homeLight1.equals((Object)homeLight0));
      assertFalse(homeLight1.equals((Object)homeLight3));
      assertFalse(homeLight2.equals((Object)homeLight1));
      assertFalse(homeLight2.equals((Object)homeLight0));
      assertFalse(homeLight2.equals((Object)homeLight3));
      assertEquals((byte)0, bigDecimal0.byteValue());
      assertEquals((short)0, bigDecimal0.shortValue());
      assertNull(catalogLight0.getGrade());
      assertNull(catalogLight0.getCurrency());
      assertEquals((-694.0F), catalogLight0.getElevation(), 0.01F);
      assertTrue(catalogLight0.isTexturable());
      assertTrue(catalogLight0.isProportional());
      assertTrue(catalogLight0.isResizable());
      assertEquals("h&*+\"", catalogLight0.getId());
      assertEquals(0.28356954F, catalogLight0.getDepth(), 0.01F);
      assertNull(catalogLight0.getInformation());
      assertTrue(catalogLight0.isDeformable());
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertFalse(catalogLight0.isDoorOrWindow());
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertFalse(catalogLight0.isBackFaceShown());
      assertEquals("h&*+\"", catalogLight0.getName());
      assertNull(catalogLight0.getCreationDate());
      assertNull(catalogLight0.getColor());
      assertFalse(catalogLight0.isModifiable());
      assertEquals(0.28356954F, catalogLight0.getWidth(), 0.01F);
      assertEquals("ELEVATION", catalogLight0.getCreator());
      assertFalse(catalogLight0.isMovable());
      assertEquals(2965.994F, catalogLight0.getHeight(), 0.01F);
      assertEquals("h&*+\"", catalogLight0.getDescription());
      assertEquals(0.28356954F, homeLight0.getWidth(), 0.01F);
      assertTrue(homeLight0.isVisible());
      assertEquals((-127.62969F), homeLight0.getY(), 0.01F);
      assertEquals("h&*+\"", homeLight0.getCatalogId());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertTrue(homeLight0.isResizable());
      assertTrue(homeLight0.isDeformable());
      assertFalse(homeLight0.isModelMirrored());
      assertEquals("h&*+\"", homeLight0.getName());
      assertFalse(homeLight0.isDoorOrWindow());
      assertEquals(2965.994F, homeLight0.getHeight(), 0.01F);
      assertEquals("h&*+\"", homeLight0.getDescription());
      assertFalse(homeLight0.isBackFaceShown());
      assertFalse(homeLight0.isNameVisible());
      assertTrue(homeLight0.isTexturable());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertEquals((-694.0F), homeLight0.getElevation(), 0.01F);
      assertEquals((-694.0F), homeLight0.getGroundElevation(), 0.01F);
      assertEquals(0.28356954F, homeLight0.getDepth(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertNull(homeLight0.getColor());
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertNull(homeLight0.getShininess());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertFalse(homeLight0.isMovable());
      assertNull(homeLight0.getCurrency());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals(0.14178477F, homeLight0.getX(), 0.01F);
      assertEquals((-694.0F), homeLight1.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight1.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeLight1.getNameAngle(), 0.01F);
      assertNull(homeLight1.getStaircaseCutOutShape());
      assertFalse(homeLight1.isModelMirrored());
      assertEquals("h&*+\"", homeLight1.getName());
      assertTrue(homeLight1.isResizable());
      assertFalse(homeLight1.isBackFaceShown());
      assertFalse(homeLight1.isNameVisible());
      assertEquals("h&*+\"", homeLight1.getDescription());
      assertFalse(homeLight1.isDoorOrWindow());
      assertEquals(0.0F, homeLight1.getAngle(), 0.01F);
      assertTrue(homeLight1.isTexturable());
      assertEquals((-694.0F), homeLight1.getElevation(), 0.01F);
      assertEquals(0.28356954F, homeLight1.getWidth(), 0.01F);
      assertTrue(homeLight1.isDeformable());
      assertEquals(0.0F, homeLight1.getNameYOffset(), 0.01F);
      assertEquals((-127.62969F), homeLight1.getY(), 0.01F);
      assertEquals(2965.994F, homeLight1.getHeight(), 0.01F);
      assertNull(homeLight1.getShininess());
      assertTrue(homeLight1.isVisible());
      assertNull(homeLight1.getColor());
      assertEquals(0.14178477F, homeLight1.getX(), 0.01F);
      assertEquals("h&*+\"", homeLight1.getCatalogId());
      assertFalse(homeLight1.isMovable());
      assertNull(homeLight1.getCurrency());
      assertEquals(0.5F, homeLight1.getPower(), 0.01F);
      assertEquals(0.28356954F, homeLight1.getDepth(), 0.01F);
      assertEquals((-694.0F), homeLight2.getGroundElevation(), 0.01F);
      assertFalse(homeLight2.isBackFaceShown());
      assertFalse(homeLight2.isModelMirrored());
      assertEquals(0.0F, homeLight2.getNameXOffset(), 0.01F);
      assertEquals("h&*+\"", homeLight2.getName());
      assertFalse(homeLight2.isNameVisible());
      assertEquals((-694.0F), homeLight2.getElevation(), 0.01F);
      assertFalse(homeLight2.isDoorOrWindow());
      assertTrue(homeLight2.isTexturable());
      assertEquals(0.0F, homeLight2.getAngle(), 0.01F);
      assertEquals("h&*+\"", homeLight2.getDescription());
      assertEquals(2965.994F, homeLight2.getHeight(), 0.01F);
      assertEquals(1503.4F, homeLight2.getNameYOffset(), 0.01F);
      assertTrue(homeLight2.isDeformable());
      assertTrue(homeLight2.isResizable());
      assertTrue(homeLight2.isVisible());
      assertNull(homeLight2.getShininess());
      assertEquals(0.28356954F, homeLight2.getWidth(), 0.01F);
      assertNull(homeLight2.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight2.getNameAngle(), 0.01F);
      assertEquals(0.14178477F, homeLight2.getX(), 0.01F);
      assertNull(homeLight2.getColor());
      assertEquals((-127.62969F), homeLight2.getY(), 0.01F);
      assertEquals(0.28356954F, homeLight2.getDepth(), 0.01F);
      assertEquals("h&*+\"", homeLight2.getCatalogId());
      assertNull(homeLight2.getCurrency());
      assertFalse(homeLight2.isMovable());
      assertEquals(0.5F, homeLight2.getPower(), 0.01F);
      assertEquals(2, lightSourceArray0.length);
      assertNotSame(homeLight0, homeLight1);
      assertNotSame(homeLight0, homeLight3);
      assertNotSame(homeLight0, homeLight2);
      assertNotSame(homeLight1, homeLight2);
      assertNotSame(homeLight1, homeLight0);
      assertNotSame(homeLight1, homeLight3);
      assertNotSame(homeLight2, homeLight1);
      assertNotSame(homeLight2, homeLight0);
      assertNotSame(homeLight2, homeLight3);
  }

  @Test(timeout = 4000)
  public void test237()  throws Throwable  {
      LightSource[] lightSourceArray0 = new LightSource[2];
      LightSource lightSource0 = new LightSource((-815.0F), 0.36957806F, 407.5F, 78);
      assertEquals((-815.0F), lightSource0.getX(), 0.01F);
      assertEquals(0.36957806F, lightSource0.getY(), 0.01F);
      assertEquals(407.5F, lightSource0.getZ(), 0.01F);
      assertEquals(78, lightSource0.getColor());
      assertNull(lightSource0.getDiameter());
      assertNotNull(lightSource0);
      
      LightSource lightSource1 = new LightSource(0.0F, 0.36957806F, 0.0F, (-2146823798));
      assertFalse(lightSource1.equals((Object)lightSource0));
      assertEquals((-2146823798), lightSource1.getColor());
      assertEquals(0.36957806F, lightSource1.getY(), 0.01F);
      assertEquals(0.0F, lightSource1.getZ(), 0.01F);
      assertNull(lightSource1.getDiameter());
      assertEquals(0.0F, lightSource1.getX(), 0.01F);
      assertNotNull(lightSource1);
      
      BigDecimal bigDecimal0 = BigDecimal.TEN;
      assertEquals((byte)10, bigDecimal0.byteValue());
      assertEquals((short)10, bigDecimal0.shortValue());
      assertNotNull(bigDecimal0);
      
      CatalogLight catalogLight0 = new CatalogLight("YhyKcH.G", (String) null, (String) null, (Content) null, (Content) null, 0.0F, 407.5F, 1596.925F, 0.0F, true, lightSourceArray0, (float[][]) null, (String) null, true, bigDecimal0, bigDecimal0);
      assertEquals((byte)10, bigDecimal0.byteValue());
      assertEquals((short)10, bigDecimal0.shortValue());
      assertTrue(catalogLight0.isDeformable());
      assertNull(catalogLight0.getInformation());
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertTrue(catalogLight0.isResizable());
      assertNull(catalogLight0.getGrade());
      assertEquals(1596.925F, catalogLight0.getHeight(), 0.01F);
      assertFalse(catalogLight0.isDoorOrWindow());
      assertNull(catalogLight0.getName());
      assertTrue(catalogLight0.isMovable());
      assertNull(catalogLight0.getColor());
      assertEquals("YhyKcH.G", catalogLight0.getId());
      assertFalse(catalogLight0.isBackFaceShown());
      assertEquals(407.5F, catalogLight0.getDepth(), 0.01F);
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertEquals(0.0F, catalogLight0.getElevation(), 0.01F);
      assertTrue(catalogLight0.isTexturable());
      assertEquals(0.0F, catalogLight0.getWidth(), 0.01F);
      assertNull(catalogLight0.getCurrency());
      assertTrue(catalogLight0.isProportional());
      assertNull(catalogLight0.getCreator());
      assertNull(catalogLight0.getDescription());
      assertFalse(catalogLight0.isModifiable());
      assertNull(catalogLight0.getCreationDate());
      assertEquals(2, lightSourceArray0.length);
      assertNotNull(catalogLight0);
      
      HomeLight homeLight0 = new HomeLight(catalogLight0);
      assertEquals((byte)10, bigDecimal0.byteValue());
      assertEquals((short)10, bigDecimal0.shortValue());
      assertTrue(catalogLight0.isDeformable());
      assertNull(catalogLight0.getInformation());
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertTrue(catalogLight0.isResizable());
      assertNull(catalogLight0.getGrade());
      assertEquals(1596.925F, catalogLight0.getHeight(), 0.01F);
      assertFalse(catalogLight0.isDoorOrWindow());
      assertNull(catalogLight0.getName());
      assertTrue(catalogLight0.isMovable());
      assertNull(catalogLight0.getColor());
      assertEquals("YhyKcH.G", catalogLight0.getId());
      assertFalse(catalogLight0.isBackFaceShown());
      assertEquals(407.5F, catalogLight0.getDepth(), 0.01F);
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertEquals(0.0F, catalogLight0.getElevation(), 0.01F);
      assertTrue(catalogLight0.isTexturable());
      assertEquals(0.0F, catalogLight0.getWidth(), 0.01F);
      assertNull(catalogLight0.getCurrency());
      assertTrue(catalogLight0.isProportional());
      assertNull(catalogLight0.getCreator());
      assertNull(catalogLight0.getDescription());
      assertFalse(catalogLight0.isModifiable());
      assertNull(catalogLight0.getCreationDate());
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertEquals(407.5F, homeLight0.getDepth(), 0.01F);
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertFalse(homeLight0.isModelMirrored());
      assertFalse(homeLight0.isBackFaceShown());
      assertNull(homeLight0.getColor());
      assertNull(homeLight0.getName());
      assertFalse(homeLight0.isNameVisible());
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      assertNull(homeLight0.getDescription());
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertTrue(homeLight0.isTexturable());
      assertTrue(homeLight0.isMovable());
      assertTrue(homeLight0.isResizable());
      assertEquals(1596.925F, homeLight0.getHeight(), 0.01F);
      assertTrue(homeLight0.isDeformable());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertTrue(homeLight0.isVisible());
      assertNull(homeLight0.getShininess());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertEquals(203.75F, homeLight0.getY(), 0.01F);
      assertEquals("YhyKcH.G", homeLight0.getCatalogId());
      assertNull(homeLight0.getCurrency());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals(2, lightSourceArray0.length);
      assertNotNull(homeLight0);
      
      HomeLight homeLight1 = homeLight0.clone();
      assertFalse(homeLight1.equals((Object)homeLight0));
      assertEquals((byte)10, bigDecimal0.byteValue());
      assertEquals((short)10, bigDecimal0.shortValue());
      assertTrue(catalogLight0.isDeformable());
      assertNull(catalogLight0.getInformation());
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertTrue(catalogLight0.isResizable());
      assertNull(catalogLight0.getGrade());
      assertEquals(1596.925F, catalogLight0.getHeight(), 0.01F);
      assertFalse(catalogLight0.isDoorOrWindow());
      assertNull(catalogLight0.getName());
      assertTrue(catalogLight0.isMovable());
      assertNull(catalogLight0.getColor());
      assertEquals("YhyKcH.G", catalogLight0.getId());
      assertFalse(catalogLight0.isBackFaceShown());
      assertEquals(407.5F, catalogLight0.getDepth(), 0.01F);
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertEquals(0.0F, catalogLight0.getElevation(), 0.01F);
      assertTrue(catalogLight0.isTexturable());
      assertEquals(0.0F, catalogLight0.getWidth(), 0.01F);
      assertNull(catalogLight0.getCurrency());
      assertTrue(catalogLight0.isProportional());
      assertNull(catalogLight0.getCreator());
      assertNull(catalogLight0.getDescription());
      assertFalse(catalogLight0.isModifiable());
      assertNull(catalogLight0.getCreationDate());
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertEquals(407.5F, homeLight0.getDepth(), 0.01F);
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertFalse(homeLight0.isModelMirrored());
      assertFalse(homeLight0.isBackFaceShown());
      assertNull(homeLight0.getColor());
      assertNull(homeLight0.getName());
      assertFalse(homeLight0.isNameVisible());
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      assertNull(homeLight0.getDescription());
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertTrue(homeLight0.isTexturable());
      assertTrue(homeLight0.isMovable());
      assertTrue(homeLight0.isResizable());
      assertEquals(1596.925F, homeLight0.getHeight(), 0.01F);
      assertTrue(homeLight0.isDeformable());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertTrue(homeLight0.isVisible());
      assertNull(homeLight0.getShininess());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertEquals(203.75F, homeLight0.getY(), 0.01F);
      assertEquals("YhyKcH.G", homeLight0.getCatalogId());
      assertNull(homeLight0.getCurrency());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertFalse(homeLight1.isNameVisible());
      assertNull(homeLight1.getColor());
      assertFalse(homeLight1.isBackFaceShown());
      assertFalse(homeLight1.isDoorOrWindow());
      assertTrue(homeLight1.isTexturable());
      assertEquals(407.5F, homeLight1.getDepth(), 0.01F);
      assertEquals(0.0F, homeLight1.getWidth(), 0.01F);
      assertEquals(203.75F, homeLight1.getY(), 0.01F);
      assertNull(homeLight1.getCurrency());
      assertEquals(0.0F, homeLight1.getAngle(), 0.01F);
      assertEquals(0.0F, homeLight1.getNameYOffset(), 0.01F);
      assertFalse(homeLight1.isModelMirrored());
      assertEquals(0.0F, homeLight1.getNameAngle(), 0.01F);
      assertEquals(0.5F, homeLight1.getPower(), 0.01F);
      assertNull(homeLight1.getStaircaseCutOutShape());
      assertTrue(homeLight1.isMovable());
      assertNull(homeLight1.getName());
      assertEquals("YhyKcH.G", homeLight1.getCatalogId());
      assertEquals(0.0F, homeLight1.getElevation(), 0.01F);
      assertNull(homeLight1.getDescription());
      assertEquals(0.0F, homeLight1.getGroundElevation(), 0.01F);
      assertNull(homeLight1.getShininess());
      assertEquals(0.0F, homeLight1.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeLight1.getX(), 0.01F);
      assertEquals(1596.925F, homeLight1.getHeight(), 0.01F);
      assertTrue(homeLight1.isDeformable());
      assertTrue(homeLight1.isVisible());
      assertTrue(homeLight1.isResizable());
      assertEquals(2, lightSourceArray0.length);
      assertNotSame(homeLight0, homeLight1);
      assertNotSame(homeLight1, homeLight0);
      assertNotNull(homeLight1);
      
      HomeLight homeLight2 = (HomeLight)homeLight0.clone();
      assertFalse(homeLight0.equals((Object)homeLight1));
      assertFalse(homeLight2.equals((Object)homeLight1));
      assertFalse(homeLight2.equals((Object)homeLight0));
      assertEquals((byte)10, bigDecimal0.byteValue());
      assertEquals((short)10, bigDecimal0.shortValue());
      assertTrue(catalogLight0.isDeformable());
      assertNull(catalogLight0.getInformation());
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertTrue(catalogLight0.isResizable());
      assertNull(catalogLight0.getGrade());
      assertEquals(1596.925F, catalogLight0.getHeight(), 0.01F);
      assertFalse(catalogLight0.isDoorOrWindow());
      assertNull(catalogLight0.getName());
      assertTrue(catalogLight0.isMovable());
      assertNull(catalogLight0.getColor());
      assertEquals("YhyKcH.G", catalogLight0.getId());
      assertFalse(catalogLight0.isBackFaceShown());
      assertEquals(407.5F, catalogLight0.getDepth(), 0.01F);
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertEquals(0.0F, catalogLight0.getElevation(), 0.01F);
      assertTrue(catalogLight0.isTexturable());
      assertEquals(0.0F, catalogLight0.getWidth(), 0.01F);
      assertNull(catalogLight0.getCurrency());
      assertTrue(catalogLight0.isProportional());
      assertNull(catalogLight0.getCreator());
      assertNull(catalogLight0.getDescription());
      assertFalse(catalogLight0.isModifiable());
      assertNull(catalogLight0.getCreationDate());
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertEquals(407.5F, homeLight0.getDepth(), 0.01F);
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertFalse(homeLight0.isModelMirrored());
      assertFalse(homeLight0.isBackFaceShown());
      assertNull(homeLight0.getColor());
      assertNull(homeLight0.getName());
      assertFalse(homeLight0.isNameVisible());
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      assertNull(homeLight0.getDescription());
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertTrue(homeLight0.isTexturable());
      assertTrue(homeLight0.isMovable());
      assertTrue(homeLight0.isResizable());
      assertEquals(1596.925F, homeLight0.getHeight(), 0.01F);
      assertTrue(homeLight0.isDeformable());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertTrue(homeLight0.isVisible());
      assertNull(homeLight0.getShininess());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertEquals(203.75F, homeLight0.getY(), 0.01F);
      assertEquals("YhyKcH.G", homeLight0.getCatalogId());
      assertNull(homeLight0.getCurrency());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals(0.0F, homeLight2.getNameYOffset(), 0.01F);
      assertTrue(homeLight2.isDeformable());
      assertFalse(homeLight2.isNameVisible());
      assertEquals(203.75F, homeLight2.getY(), 0.01F);
      assertNull(homeLight2.getCurrency());
      assertEquals(0.0F, homeLight2.getWidth(), 0.01F);
      assertFalse(homeLight2.isDoorOrWindow());
      assertEquals(0.0F, homeLight2.getX(), 0.01F);
      assertEquals(0.0F, homeLight2.getGroundElevation(), 0.01F);
      assertTrue(homeLight2.isMovable());
      assertEquals(0.0F, homeLight2.getNameAngle(), 0.01F);
      assertNull(homeLight2.getStaircaseCutOutShape());
      assertTrue(homeLight2.isResizable());
      assertEquals(1596.925F, homeLight2.getHeight(), 0.01F);
      assertTrue(homeLight2.isVisible());
      assertNull(homeLight2.getShininess());
      assertNull(homeLight2.getDescription());
      assertEquals(0.0F, homeLight2.getElevation(), 0.01F);
      assertEquals(0.0F, homeLight2.getNameXOffset(), 0.01F);
      assertNull(homeLight2.getName());
      assertEquals(0.0F, homeLight2.getAngle(), 0.01F);
      assertTrue(homeLight2.isTexturable());
      assertEquals(0.5F, homeLight2.getPower(), 0.01F);
      assertEquals(407.5F, homeLight2.getDepth(), 0.01F);
      assertEquals("YhyKcH.G", homeLight2.getCatalogId());
      assertFalse(homeLight2.isBackFaceShown());
      assertNull(homeLight2.getColor());
      assertFalse(homeLight2.isModelMirrored());
      assertEquals(2, lightSourceArray0.length);
      assertNotSame(homeLight0, homeLight1);
      assertNotSame(homeLight0, homeLight2);
      assertNotSame(homeLight2, homeLight1);
      assertNotSame(homeLight2, homeLight0);
      assertNotNull(homeLight2);
      
      Content content0 = homeLight1.getIcon();
      assertFalse(homeLight0.equals((Object)homeLight1));
      assertFalse(homeLight0.equals((Object)homeLight2));
      assertFalse(homeLight1.equals((Object)homeLight0));
      assertFalse(homeLight1.equals((Object)homeLight2));
      assertEquals((byte)10, bigDecimal0.byteValue());
      assertEquals((short)10, bigDecimal0.shortValue());
      assertTrue(catalogLight0.isDeformable());
      assertNull(catalogLight0.getInformation());
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertTrue(catalogLight0.isResizable());
      assertNull(catalogLight0.getGrade());
      assertEquals(1596.925F, catalogLight0.getHeight(), 0.01F);
      assertFalse(catalogLight0.isDoorOrWindow());
      assertNull(catalogLight0.getName());
      assertTrue(catalogLight0.isMovable());
      assertNull(catalogLight0.getColor());
      assertEquals("YhyKcH.G", catalogLight0.getId());
      assertFalse(catalogLight0.isBackFaceShown());
      assertEquals(407.5F, catalogLight0.getDepth(), 0.01F);
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertEquals(0.0F, catalogLight0.getElevation(), 0.01F);
      assertTrue(catalogLight0.isTexturable());
      assertEquals(0.0F, catalogLight0.getWidth(), 0.01F);
      assertNull(catalogLight0.getCurrency());
      assertTrue(catalogLight0.isProportional());
      assertNull(catalogLight0.getCreator());
      assertNull(catalogLight0.getDescription());
      assertFalse(catalogLight0.isModifiable());
      assertNull(catalogLight0.getCreationDate());
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertEquals(407.5F, homeLight0.getDepth(), 0.01F);
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertFalse(homeLight0.isModelMirrored());
      assertFalse(homeLight0.isBackFaceShown());
      assertNull(homeLight0.getColor());
      assertNull(homeLight0.getName());
      assertFalse(homeLight0.isNameVisible());
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      assertNull(homeLight0.getDescription());
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertTrue(homeLight0.isTexturable());
      assertTrue(homeLight0.isMovable());
      assertTrue(homeLight0.isResizable());
      assertEquals(1596.925F, homeLight0.getHeight(), 0.01F);
      assertTrue(homeLight0.isDeformable());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertTrue(homeLight0.isVisible());
      assertNull(homeLight0.getShininess());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertEquals(203.75F, homeLight0.getY(), 0.01F);
      assertEquals("YhyKcH.G", homeLight0.getCatalogId());
      assertNull(homeLight0.getCurrency());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertFalse(homeLight1.isNameVisible());
      assertNull(homeLight1.getColor());
      assertFalse(homeLight1.isBackFaceShown());
      assertFalse(homeLight1.isDoorOrWindow());
      assertTrue(homeLight1.isTexturable());
      assertEquals(407.5F, homeLight1.getDepth(), 0.01F);
      assertEquals(0.0F, homeLight1.getWidth(), 0.01F);
      assertEquals(203.75F, homeLight1.getY(), 0.01F);
      assertNull(homeLight1.getCurrency());
      assertEquals(0.0F, homeLight1.getAngle(), 0.01F);
      assertEquals(0.0F, homeLight1.getNameYOffset(), 0.01F);
      assertFalse(homeLight1.isModelMirrored());
      assertEquals(0.0F, homeLight1.getNameAngle(), 0.01F);
      assertEquals(0.5F, homeLight1.getPower(), 0.01F);
      assertNull(homeLight1.getStaircaseCutOutShape());
      assertTrue(homeLight1.isMovable());
      assertNull(homeLight1.getName());
      assertEquals("YhyKcH.G", homeLight1.getCatalogId());
      assertEquals(0.0F, homeLight1.getElevation(), 0.01F);
      assertNull(homeLight1.getDescription());
      assertEquals(0.0F, homeLight1.getGroundElevation(), 0.01F);
      assertNull(homeLight1.getShininess());
      assertEquals(0.0F, homeLight1.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeLight1.getX(), 0.01F);
      assertEquals(1596.925F, homeLight1.getHeight(), 0.01F);
      assertTrue(homeLight1.isDeformable());
      assertTrue(homeLight1.isVisible());
      assertTrue(homeLight1.isResizable());
      assertEquals(2, lightSourceArray0.length);
      assertNotSame(homeLight0, homeLight1);
      assertNotSame(homeLight0, homeLight2);
      assertNotSame(homeLight1, homeLight0);
      assertNotSame(homeLight1, homeLight2);
      assertNull(content0);
      
      homeLight0.setNameVisible(true);
      assertFalse(homeLight0.equals((Object)homeLight1));
      assertFalse(homeLight0.equals((Object)homeLight2));
      assertEquals((byte)10, bigDecimal0.byteValue());
      assertEquals((short)10, bigDecimal0.shortValue());
      assertTrue(catalogLight0.isDeformable());
      assertNull(catalogLight0.getInformation());
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertTrue(catalogLight0.isResizable());
      assertNull(catalogLight0.getGrade());
      assertEquals(1596.925F, catalogLight0.getHeight(), 0.01F);
      assertFalse(catalogLight0.isDoorOrWindow());
      assertNull(catalogLight0.getName());
      assertTrue(catalogLight0.isMovable());
      assertNull(catalogLight0.getColor());
      assertEquals("YhyKcH.G", catalogLight0.getId());
      assertFalse(catalogLight0.isBackFaceShown());
      assertEquals(407.5F, catalogLight0.getDepth(), 0.01F);
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertEquals(0.0F, catalogLight0.getElevation(), 0.01F);
      assertTrue(catalogLight0.isTexturable());
      assertEquals(0.0F, catalogLight0.getWidth(), 0.01F);
      assertNull(catalogLight0.getCurrency());
      assertTrue(catalogLight0.isProportional());
      assertNull(catalogLight0.getCreator());
      assertNull(catalogLight0.getDescription());
      assertFalse(catalogLight0.isModifiable());
      assertNull(catalogLight0.getCreationDate());
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertEquals(407.5F, homeLight0.getDepth(), 0.01F);
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertFalse(homeLight0.isModelMirrored());
      assertFalse(homeLight0.isBackFaceShown());
      assertNull(homeLight0.getColor());
      assertNull(homeLight0.getName());
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      assertNull(homeLight0.getDescription());
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertTrue(homeLight0.isTexturable());
      assertTrue(homeLight0.isMovable());
      assertTrue(homeLight0.isResizable());
      assertEquals(1596.925F, homeLight0.getHeight(), 0.01F);
      assertTrue(homeLight0.isDeformable());
      assertTrue(homeLight0.isNameVisible());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertTrue(homeLight0.isVisible());
      assertNull(homeLight0.getShininess());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertEquals(203.75F, homeLight0.getY(), 0.01F);
      assertEquals("YhyKcH.G", homeLight0.getCatalogId());
      assertNull(homeLight0.getCurrency());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals(2, lightSourceArray0.length);
      assertNotSame(homeLight0, homeLight1);
      assertNotSame(homeLight0, homeLight2);
      
      HomeLight homeLight3 = homeLight1.clone();
      assertFalse(homeLight0.equals((Object)homeLight1));
      assertFalse(homeLight0.equals((Object)homeLight2));
      assertFalse(homeLight1.equals((Object)homeLight0));
      assertFalse(homeLight1.equals((Object)homeLight2));
      assertFalse(homeLight3.equals((Object)homeLight0));
      assertFalse(homeLight3.equals((Object)homeLight2));
      assertFalse(homeLight3.equals((Object)homeLight1));
      assertEquals((byte)10, bigDecimal0.byteValue());
      assertEquals((short)10, bigDecimal0.shortValue());
      assertTrue(catalogLight0.isDeformable());
      assertNull(catalogLight0.getInformation());
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertTrue(catalogLight0.isResizable());
      assertNull(catalogLight0.getGrade());
      assertEquals(1596.925F, catalogLight0.getHeight(), 0.01F);
      assertFalse(catalogLight0.isDoorOrWindow());
      assertNull(catalogLight0.getName());
      assertTrue(catalogLight0.isMovable());
      assertNull(catalogLight0.getColor());
      assertEquals("YhyKcH.G", catalogLight0.getId());
      assertFalse(catalogLight0.isBackFaceShown());
      assertEquals(407.5F, catalogLight0.getDepth(), 0.01F);
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertEquals(0.0F, catalogLight0.getElevation(), 0.01F);
      assertTrue(catalogLight0.isTexturable());
      assertEquals(0.0F, catalogLight0.getWidth(), 0.01F);
      assertNull(catalogLight0.getCurrency());
      assertTrue(catalogLight0.isProportional());
      assertNull(catalogLight0.getCreator());
      assertNull(catalogLight0.getDescription());
      assertFalse(catalogLight0.isModifiable());
      assertNull(catalogLight0.getCreationDate());
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertEquals(407.5F, homeLight0.getDepth(), 0.01F);
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertFalse(homeLight0.isModelMirrored());
      assertFalse(homeLight0.isBackFaceShown());
      assertNull(homeLight0.getColor());
      assertNull(homeLight0.getName());
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      assertNull(homeLight0.getDescription());
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertTrue(homeLight0.isTexturable());
      assertTrue(homeLight0.isMovable());
      assertTrue(homeLight0.isResizable());
      assertEquals(1596.925F, homeLight0.getHeight(), 0.01F);
      assertTrue(homeLight0.isDeformable());
      assertTrue(homeLight0.isNameVisible());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertTrue(homeLight0.isVisible());
      assertNull(homeLight0.getShininess());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertEquals(203.75F, homeLight0.getY(), 0.01F);
      assertEquals("YhyKcH.G", homeLight0.getCatalogId());
      assertNull(homeLight0.getCurrency());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertFalse(homeLight1.isNameVisible());
      assertNull(homeLight1.getColor());
      assertFalse(homeLight1.isBackFaceShown());
      assertFalse(homeLight1.isDoorOrWindow());
      assertTrue(homeLight1.isTexturable());
      assertEquals(407.5F, homeLight1.getDepth(), 0.01F);
      assertEquals(0.0F, homeLight1.getWidth(), 0.01F);
      assertEquals(203.75F, homeLight1.getY(), 0.01F);
      assertNull(homeLight1.getCurrency());
      assertEquals(0.0F, homeLight1.getAngle(), 0.01F);
      assertEquals(0.0F, homeLight1.getNameYOffset(), 0.01F);
      assertFalse(homeLight1.isModelMirrored());
      assertEquals(0.0F, homeLight1.getNameAngle(), 0.01F);
      assertEquals(0.5F, homeLight1.getPower(), 0.01F);
      assertNull(homeLight1.getStaircaseCutOutShape());
      assertTrue(homeLight1.isMovable());
      assertNull(homeLight1.getName());
      assertEquals("YhyKcH.G", homeLight1.getCatalogId());
      assertEquals(0.0F, homeLight1.getElevation(), 0.01F);
      assertNull(homeLight1.getDescription());
      assertEquals(0.0F, homeLight1.getGroundElevation(), 0.01F);
      assertNull(homeLight1.getShininess());
      assertEquals(0.0F, homeLight1.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeLight1.getX(), 0.01F);
      assertEquals(1596.925F, homeLight1.getHeight(), 0.01F);
      assertTrue(homeLight1.isDeformable());
      assertTrue(homeLight1.isVisible());
      assertTrue(homeLight1.isResizable());
      assertFalse(homeLight3.isNameVisible());
      assertNull(homeLight3.getCurrency());
      assertTrue(homeLight3.isDeformable());
      assertEquals(0.0F, homeLight3.getWidth(), 0.01F);
      assertFalse(homeLight3.isDoorOrWindow());
      assertEquals(0.0F, homeLight3.getNameYOffset(), 0.01F);
      assertNull(homeLight3.getColor());
      assertEquals(0.0F, homeLight3.getX(), 0.01F);
      assertEquals(407.5F, homeLight3.getDepth(), 0.01F);
      assertEquals(0.0F, homeLight3.getGroundElevation(), 0.01F);
      assertEquals(1596.925F, homeLight3.getHeight(), 0.01F);
      assertTrue(homeLight3.isVisible());
      assertTrue(homeLight3.isMovable());
      assertEquals(203.75F, homeLight3.getY(), 0.01F);
      assertNull(homeLight3.getShininess());
      assertEquals(0.5F, homeLight3.getPower(), 0.01F);
      assertNull(homeLight3.getName());
      assertEquals(0.0F, homeLight3.getNameAngle(), 0.01F);
      assertNull(homeLight3.getStaircaseCutOutShape());
      assertTrue(homeLight3.isResizable());
      assertEquals("YhyKcH.G", homeLight3.getCatalogId());
      assertEquals(0.0F, homeLight3.getElevation(), 0.01F);
      assertNull(homeLight3.getDescription());
      assertEquals(0.0F, homeLight3.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeLight3.getAngle(), 0.01F);
      assertTrue(homeLight3.isTexturable());
      assertFalse(homeLight3.isModelMirrored());
      assertFalse(homeLight3.isBackFaceShown());
      assertEquals(2, lightSourceArray0.length);
      assertNotSame(homeLight0, homeLight1);
      assertNotSame(homeLight0, homeLight2);
      assertNotSame(homeLight0, homeLight3);
      assertNotSame(homeLight1, homeLight3);
      assertNotSame(homeLight1, homeLight0);
      assertNotSame(homeLight1, homeLight2);
      assertNotSame(homeLight3, homeLight0);
      assertNotSame(homeLight3, homeLight2);
      assertNotSame(homeLight3, homeLight1);
      assertNotNull(homeLight3);
      
      homeLight0.setWidth(407.5F);
      assertFalse(homeLight0.equals((Object)homeLight1));
      assertFalse(homeLight0.equals((Object)homeLight2));
      assertFalse(homeLight0.equals((Object)homeLight3));
      assertEquals((byte)10, bigDecimal0.byteValue());
      assertEquals((short)10, bigDecimal0.shortValue());
      assertTrue(catalogLight0.isDeformable());
      assertNull(catalogLight0.getInformation());
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertTrue(catalogLight0.isResizable());
      assertNull(catalogLight0.getGrade());
      assertEquals(1596.925F, catalogLight0.getHeight(), 0.01F);
      assertFalse(catalogLight0.isDoorOrWindow());
      assertNull(catalogLight0.getName());
      assertTrue(catalogLight0.isMovable());
      assertNull(catalogLight0.getColor());
      assertEquals("YhyKcH.G", catalogLight0.getId());
      assertFalse(catalogLight0.isBackFaceShown());
      assertEquals(407.5F, catalogLight0.getDepth(), 0.01F);
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertEquals(0.0F, catalogLight0.getElevation(), 0.01F);
      assertTrue(catalogLight0.isTexturable());
      assertEquals(0.0F, catalogLight0.getWidth(), 0.01F);
      assertNull(catalogLight0.getCurrency());
      assertTrue(catalogLight0.isProportional());
      assertNull(catalogLight0.getCreator());
      assertNull(catalogLight0.getDescription());
      assertFalse(catalogLight0.isModifiable());
      assertNull(catalogLight0.getCreationDate());
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertEquals(407.5F, homeLight0.getDepth(), 0.01F);
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertFalse(homeLight0.isModelMirrored());
      assertFalse(homeLight0.isBackFaceShown());
      assertNull(homeLight0.getColor());
      assertNull(homeLight0.getName());
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      assertNull(homeLight0.getDescription());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertTrue(homeLight0.isTexturable());
      assertTrue(homeLight0.isMovable());
      assertTrue(homeLight0.isResizable());
      assertEquals(1596.925F, homeLight0.getHeight(), 0.01F);
      assertTrue(homeLight0.isDeformable());
      assertTrue(homeLight0.isNameVisible());
      assertEquals(407.5F, homeLight0.getWidth(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertTrue(homeLight0.isVisible());
      assertNull(homeLight0.getShininess());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertEquals(203.75F, homeLight0.getY(), 0.01F);
      assertEquals("YhyKcH.G", homeLight0.getCatalogId());
      assertNull(homeLight0.getCurrency());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals(2, lightSourceArray0.length);
      assertNotSame(homeLight0, homeLight1);
      assertNotSame(homeLight0, homeLight2);
      assertNotSame(homeLight0, homeLight3);
      
      String string0 = homeLight0.getName();
      assertFalse(homeLight0.equals((Object)homeLight1));
      assertFalse(homeLight0.equals((Object)homeLight2));
      assertFalse(homeLight0.equals((Object)homeLight3));
      assertEquals((byte)10, bigDecimal0.byteValue());
      assertEquals((short)10, bigDecimal0.shortValue());
      assertTrue(catalogLight0.isDeformable());
      assertNull(catalogLight0.getInformation());
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertTrue(catalogLight0.isResizable());
      assertNull(catalogLight0.getGrade());
      assertEquals(1596.925F, catalogLight0.getHeight(), 0.01F);
      assertFalse(catalogLight0.isDoorOrWindow());
      assertNull(catalogLight0.getName());
      assertTrue(catalogLight0.isMovable());
      assertNull(catalogLight0.getColor());
      assertEquals("YhyKcH.G", catalogLight0.getId());
      assertFalse(catalogLight0.isBackFaceShown());
      assertEquals(407.5F, catalogLight0.getDepth(), 0.01F);
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertEquals(0.0F, catalogLight0.getElevation(), 0.01F);
      assertTrue(catalogLight0.isTexturable());
      assertEquals(0.0F, catalogLight0.getWidth(), 0.01F);
      assertNull(catalogLight0.getCurrency());
      assertTrue(catalogLight0.isProportional());
      assertNull(catalogLight0.getCreator());
      assertNull(catalogLight0.getDescription());
      assertFalse(catalogLight0.isModifiable());
      assertNull(catalogLight0.getCreationDate());
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertEquals(407.5F, homeLight0.getDepth(), 0.01F);
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertFalse(homeLight0.isModelMirrored());
      assertFalse(homeLight0.isBackFaceShown());
      assertNull(homeLight0.getColor());
      assertNull(homeLight0.getName());
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      assertNull(homeLight0.getDescription());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertTrue(homeLight0.isTexturable());
      assertTrue(homeLight0.isMovable());
      assertTrue(homeLight0.isResizable());
      assertEquals(1596.925F, homeLight0.getHeight(), 0.01F);
      assertTrue(homeLight0.isDeformable());
      assertTrue(homeLight0.isNameVisible());
      assertEquals(407.5F, homeLight0.getWidth(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertTrue(homeLight0.isVisible());
      assertNull(homeLight0.getShininess());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertEquals(203.75F, homeLight0.getY(), 0.01F);
      assertEquals("YhyKcH.G", homeLight0.getCatalogId());
      assertNull(homeLight0.getCurrency());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals(2, lightSourceArray0.length);
      assertNotSame(homeLight0, homeLight1);
      assertNotSame(homeLight0, homeLight2);
      assertNotSame(homeLight0, homeLight3);
      assertNull(string0);
      
      Float float0 = new Float((double) 0.0F);
      assertNotNull(float0);
      assertEquals(0.0F, (float)float0, 0.01F);
      
      homeLight0.setShininess(float0);
      assertFalse(homeLight0.equals((Object)homeLight1));
      assertFalse(homeLight0.equals((Object)homeLight2));
      assertFalse(homeLight0.equals((Object)homeLight3));
      assertEquals((byte)10, bigDecimal0.byteValue());
      assertEquals((short)10, bigDecimal0.shortValue());
      assertTrue(catalogLight0.isDeformable());
      assertNull(catalogLight0.getInformation());
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertTrue(catalogLight0.isResizable());
      assertNull(catalogLight0.getGrade());
      assertEquals(1596.925F, catalogLight0.getHeight(), 0.01F);
      assertFalse(catalogLight0.isDoorOrWindow());
      assertNull(catalogLight0.getName());
      assertTrue(catalogLight0.isMovable());
      assertNull(catalogLight0.getColor());
      assertEquals("YhyKcH.G", catalogLight0.getId());
      assertFalse(catalogLight0.isBackFaceShown());
      assertEquals(407.5F, catalogLight0.getDepth(), 0.01F);
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertEquals(0.0F, catalogLight0.getElevation(), 0.01F);
      assertTrue(catalogLight0.isTexturable());
      assertEquals(0.0F, catalogLight0.getWidth(), 0.01F);
      assertNull(catalogLight0.getCurrency());
      assertTrue(catalogLight0.isProportional());
      assertNull(catalogLight0.getCreator());
      assertNull(catalogLight0.getDescription());
      assertFalse(catalogLight0.isModifiable());
      assertNull(catalogLight0.getCreationDate());
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertEquals(407.5F, homeLight0.getDepth(), 0.01F);
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertFalse(homeLight0.isModelMirrored());
      assertFalse(homeLight0.isBackFaceShown());
      assertNull(homeLight0.getColor());
      assertNull(homeLight0.getName());
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      assertNull(homeLight0.getDescription());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertTrue(homeLight0.isTexturable());
      assertTrue(homeLight0.isMovable());
      assertTrue(homeLight0.isResizable());
      assertEquals(1596.925F, homeLight0.getHeight(), 0.01F);
      assertTrue(homeLight0.isDeformable());
      assertTrue(homeLight0.isNameVisible());
      assertEquals(407.5F, homeLight0.getWidth(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertTrue(homeLight0.isVisible());
      assertEquals(0.0F, homeLight0.getShininess(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertEquals(203.75F, homeLight0.getY(), 0.01F);
      assertEquals("YhyKcH.G", homeLight0.getCatalogId());
      assertNull(homeLight0.getCurrency());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals(2, lightSourceArray0.length);
      assertNotSame(homeLight0, homeLight1);
      assertNotSame(homeLight0, homeLight2);
      assertNotSame(homeLight0, homeLight3);
  }

  @Test(timeout = 4000)
  public void test238()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      LightSource[] lightSourceArray0 = new LightSource[2];
      LightSource lightSource0 = new LightSource((-815.0F), 0.0F, 0.0F, 114);
      assertEquals(0.0F, lightSource0.getZ(), 0.01F);
      assertEquals(0.0F, lightSource0.getY(), 0.01F);
      assertEquals((-815.0F), lightSource0.getX(), 0.01F);
      assertEquals(114, lightSource0.getColor());
      assertNull(lightSource0.getDiameter());
      assertNotNull(lightSource0);
      
      LightSource lightSource1 = new LightSource((-815.0F), (-1.0F), (-127.62969F), (-174));
      assertFalse(lightSource1.equals((Object)lightSource0));
      assertEquals((-127.62969F), lightSource1.getZ(), 0.01F);
      assertEquals((-1.0F), lightSource1.getY(), 0.01F);
      assertNull(lightSource1.getDiameter());
      assertEquals((-815.0F), lightSource1.getX(), 0.01F);
      assertEquals((-174), lightSource1.getColor());
      assertNotNull(lightSource1);
      
      BigDecimal bigDecimal0 = BigDecimal.ZERO;
      assertEquals((short)0, bigDecimal0.shortValue());
      assertEquals((byte)0, bigDecimal0.byteValue());
      assertNotNull(bigDecimal0);
      
      CatalogLight catalogLight0 = new CatalogLight("h&*+\"", "h&*+\"", "h&*+\"", (Content) null, (Content) null, 0.0F, 0.0F, 2965.994F, (-694.0F), false, lightSourceArray0, (float[][]) null, "ELEVATION", true, bigDecimal0, bigDecimal0);
      assertEquals((short)0, bigDecimal0.shortValue());
      assertEquals((byte)0, bigDecimal0.byteValue());
      assertEquals(2965.994F, catalogLight0.getHeight(), 0.01F);
      assertNull(catalogLight0.getColor());
      assertFalse(catalogLight0.isModifiable());
      assertNull(catalogLight0.getCreationDate());
      assertEquals((-694.0F), catalogLight0.getElevation(), 0.01F);
      assertNull(catalogLight0.getCurrency());
      assertFalse(catalogLight0.isMovable());
      assertEquals("h&*+\"", catalogLight0.getId());
      assertEquals(0.0F, catalogLight0.getDepth(), 0.01F);
      assertEquals(0.0F, catalogLight0.getWidth(), 0.01F);
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertTrue(catalogLight0.isResizable());
      assertEquals("h&*+\"", catalogLight0.getDescription());
      assertNull(catalogLight0.getInformation());
      assertTrue(catalogLight0.isDeformable());
      assertEquals("h&*+\"", catalogLight0.getName());
      assertFalse(catalogLight0.isBackFaceShown());
      assertTrue(catalogLight0.isProportional());
      assertTrue(catalogLight0.isTexturable());
      assertFalse(catalogLight0.isDoorOrWindow());
      assertNull(catalogLight0.getGrade());
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertEquals("ELEVATION", catalogLight0.getCreator());
      assertEquals(2, lightSourceArray0.length);
      assertNotNull(catalogLight0);
      
      HomeLight homeLight0 = new HomeLight(catalogLight0);
      assertEquals((short)0, bigDecimal0.shortValue());
      assertEquals((byte)0, bigDecimal0.byteValue());
      assertEquals(2965.994F, catalogLight0.getHeight(), 0.01F);
      assertNull(catalogLight0.getColor());
      assertFalse(catalogLight0.isModifiable());
      assertNull(catalogLight0.getCreationDate());
      assertEquals((-694.0F), catalogLight0.getElevation(), 0.01F);
      assertNull(catalogLight0.getCurrency());
      assertFalse(catalogLight0.isMovable());
      assertEquals("h&*+\"", catalogLight0.getId());
      assertEquals(0.0F, catalogLight0.getDepth(), 0.01F);
      assertEquals(0.0F, catalogLight0.getWidth(), 0.01F);
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertTrue(catalogLight0.isResizable());
      assertEquals("h&*+\"", catalogLight0.getDescription());
      assertNull(catalogLight0.getInformation());
      assertTrue(catalogLight0.isDeformable());
      assertEquals("h&*+\"", catalogLight0.getName());
      assertFalse(catalogLight0.isBackFaceShown());
      assertTrue(catalogLight0.isProportional());
      assertTrue(catalogLight0.isTexturable());
      assertFalse(catalogLight0.isDoorOrWindow());
      assertNull(catalogLight0.getGrade());
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertEquals("ELEVATION", catalogLight0.getCreator());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals("h&*+\"", homeLight0.getDescription());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals("h&*+\"", homeLight0.getName());
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertEquals(2965.994F, homeLight0.getHeight(), 0.01F);
      assertEquals((-694.0F), homeLight0.getElevation(), 0.01F);
      assertFalse(homeLight0.isMovable());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertEquals((-694.0F), homeLight0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertTrue(homeLight0.isVisible());
      assertNull(homeLight0.getShininess());
      assertTrue(homeLight0.isResizable());
      assertTrue(homeLight0.isDeformable());
      assertFalse(homeLight0.isModelMirrored());
      assertFalse(homeLight0.isBackFaceShown());
      assertFalse(homeLight0.isDoorOrWindow());
      assertNull(homeLight0.getCurrency());
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertTrue(homeLight0.isTexturable());
      assertFalse(homeLight0.isNameVisible());
      assertEquals("h&*+\"", homeLight0.getCatalogId());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertNull(homeLight0.getColor());
      assertEquals(2, lightSourceArray0.length);
      assertNotNull(homeLight0);
      
      homeLight0.setY((-127.62969F));
      assertEquals((short)0, bigDecimal0.shortValue());
      assertEquals((byte)0, bigDecimal0.byteValue());
      assertEquals(2965.994F, catalogLight0.getHeight(), 0.01F);
      assertNull(catalogLight0.getColor());
      assertFalse(catalogLight0.isModifiable());
      assertNull(catalogLight0.getCreationDate());
      assertEquals((-694.0F), catalogLight0.getElevation(), 0.01F);
      assertNull(catalogLight0.getCurrency());
      assertFalse(catalogLight0.isMovable());
      assertEquals("h&*+\"", catalogLight0.getId());
      assertEquals(0.0F, catalogLight0.getDepth(), 0.01F);
      assertEquals(0.0F, catalogLight0.getWidth(), 0.01F);
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertTrue(catalogLight0.isResizable());
      assertEquals("h&*+\"", catalogLight0.getDescription());
      assertNull(catalogLight0.getInformation());
      assertTrue(catalogLight0.isDeformable());
      assertEquals("h&*+\"", catalogLight0.getName());
      assertFalse(catalogLight0.isBackFaceShown());
      assertTrue(catalogLight0.isProportional());
      assertTrue(catalogLight0.isTexturable());
      assertFalse(catalogLight0.isDoorOrWindow());
      assertNull(catalogLight0.getGrade());
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertEquals("ELEVATION", catalogLight0.getCreator());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals("h&*+\"", homeLight0.getDescription());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals("h&*+\"", homeLight0.getName());
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertEquals(2965.994F, homeLight0.getHeight(), 0.01F);
      assertEquals((-694.0F), homeLight0.getElevation(), 0.01F);
      assertFalse(homeLight0.isMovable());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertEquals((-694.0F), homeLight0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertTrue(homeLight0.isVisible());
      assertNull(homeLight0.getShininess());
      assertTrue(homeLight0.isResizable());
      assertTrue(homeLight0.isDeformable());
      assertFalse(homeLight0.isModelMirrored());
      assertFalse(homeLight0.isBackFaceShown());
      assertFalse(homeLight0.isDoorOrWindow());
      assertNull(homeLight0.getCurrency());
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertTrue(homeLight0.isTexturable());
      assertFalse(homeLight0.isNameVisible());
      assertEquals((-127.62969F), homeLight0.getY(), 0.01F);
      assertEquals("h&*+\"", homeLight0.getCatalogId());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertNull(homeLight0.getColor());
      assertEquals(2, lightSourceArray0.length);
      
      HomeLight homeLight1 = homeLight0.clone();
      assertFalse(homeLight1.equals((Object)homeLight0));
      assertEquals((short)0, bigDecimal0.shortValue());
      assertEquals((byte)0, bigDecimal0.byteValue());
      assertEquals(2965.994F, catalogLight0.getHeight(), 0.01F);
      assertNull(catalogLight0.getColor());
      assertFalse(catalogLight0.isModifiable());
      assertNull(catalogLight0.getCreationDate());
      assertEquals((-694.0F), catalogLight0.getElevation(), 0.01F);
      assertNull(catalogLight0.getCurrency());
      assertFalse(catalogLight0.isMovable());
      assertEquals("h&*+\"", catalogLight0.getId());
      assertEquals(0.0F, catalogLight0.getDepth(), 0.01F);
      assertEquals(0.0F, catalogLight0.getWidth(), 0.01F);
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertTrue(catalogLight0.isResizable());
      assertEquals("h&*+\"", catalogLight0.getDescription());
      assertNull(catalogLight0.getInformation());
      assertTrue(catalogLight0.isDeformable());
      assertEquals("h&*+\"", catalogLight0.getName());
      assertFalse(catalogLight0.isBackFaceShown());
      assertTrue(catalogLight0.isProportional());
      assertTrue(catalogLight0.isTexturable());
      assertFalse(catalogLight0.isDoorOrWindow());
      assertNull(catalogLight0.getGrade());
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertEquals("ELEVATION", catalogLight0.getCreator());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals("h&*+\"", homeLight0.getDescription());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals("h&*+\"", homeLight0.getName());
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertEquals(2965.994F, homeLight0.getHeight(), 0.01F);
      assertEquals((-694.0F), homeLight0.getElevation(), 0.01F);
      assertFalse(homeLight0.isMovable());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertEquals((-694.0F), homeLight0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertTrue(homeLight0.isVisible());
      assertNull(homeLight0.getShininess());
      assertTrue(homeLight0.isResizable());
      assertTrue(homeLight0.isDeformable());
      assertFalse(homeLight0.isModelMirrored());
      assertFalse(homeLight0.isBackFaceShown());
      assertFalse(homeLight0.isDoorOrWindow());
      assertNull(homeLight0.getCurrency());
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertTrue(homeLight0.isTexturable());
      assertFalse(homeLight0.isNameVisible());
      assertEquals((-127.62969F), homeLight0.getY(), 0.01F);
      assertEquals("h&*+\"", homeLight0.getCatalogId());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertNull(homeLight0.getColor());
      assertEquals(2965.994F, homeLight1.getHeight(), 0.01F);
      assertNull(homeLight1.getShininess());
      assertTrue(homeLight1.isResizable());
      assertEquals("h&*+\"", homeLight1.getName());
      assertEquals("h&*+\"", homeLight1.getCatalogId());
      assertEquals(0.0F, homeLight1.getNameAngle(), 0.01F);
      assertNull(homeLight1.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight1.getDepth(), 0.01F);
      assertEquals((-127.62969F), homeLight1.getY(), 0.01F);
      assertEquals(0.0F, homeLight1.getNameYOffset(), 0.01F);
      assertEquals(0.5F, homeLight1.getPower(), 0.01F);
      assertFalse(homeLight1.isMovable());
      assertNull(homeLight1.getCurrency());
      assertFalse(homeLight1.isDoorOrWindow());
      assertFalse(homeLight1.isBackFaceShown());
      assertNull(homeLight1.getColor());
      assertEquals(0.0F, homeLight1.getX(), 0.01F);
      assertFalse(homeLight1.isModelMirrored());
      assertEquals(0.0F, homeLight1.getWidth(), 0.01F);
      assertTrue(homeLight1.isVisible());
      assertTrue(homeLight1.isDeformable());
      assertEquals(0.0F, homeLight1.getNameXOffset(), 0.01F);
      assertFalse(homeLight1.isNameVisible());
      assertEquals("h&*+\"", homeLight1.getDescription());
      assertEquals((-694.0F), homeLight1.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight1.getAngle(), 0.01F);
      assertTrue(homeLight1.isTexturable());
      assertEquals((-694.0F), homeLight1.getElevation(), 0.01F);
      assertEquals(2, lightSourceArray0.length);
      assertNotSame(homeLight0, homeLight1);
      assertNotSame(homeLight1, homeLight0);
      assertNotNull(homeLight1);
      
      boolean boolean0 = homeLight1.isTopLeftPointAt((-127.62969F), (-174), 2965.994F);
      assertFalse(homeLight0.equals((Object)homeLight1));
      assertFalse(homeLight1.equals((Object)homeLight0));
      assertEquals((short)0, bigDecimal0.shortValue());
      assertEquals((byte)0, bigDecimal0.byteValue());
      assertEquals(2965.994F, catalogLight0.getHeight(), 0.01F);
      assertNull(catalogLight0.getColor());
      assertFalse(catalogLight0.isModifiable());
      assertNull(catalogLight0.getCreationDate());
      assertEquals((-694.0F), catalogLight0.getElevation(), 0.01F);
      assertNull(catalogLight0.getCurrency());
      assertFalse(catalogLight0.isMovable());
      assertEquals("h&*+\"", catalogLight0.getId());
      assertEquals(0.0F, catalogLight0.getDepth(), 0.01F);
      assertEquals(0.0F, catalogLight0.getWidth(), 0.01F);
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertTrue(catalogLight0.isResizable());
      assertEquals("h&*+\"", catalogLight0.getDescription());
      assertNull(catalogLight0.getInformation());
      assertTrue(catalogLight0.isDeformable());
      assertEquals("h&*+\"", catalogLight0.getName());
      assertFalse(catalogLight0.isBackFaceShown());
      assertTrue(catalogLight0.isProportional());
      assertTrue(catalogLight0.isTexturable());
      assertFalse(catalogLight0.isDoorOrWindow());
      assertNull(catalogLight0.getGrade());
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertEquals("ELEVATION", catalogLight0.getCreator());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals("h&*+\"", homeLight0.getDescription());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals("h&*+\"", homeLight0.getName());
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertEquals(2965.994F, homeLight0.getHeight(), 0.01F);
      assertEquals((-694.0F), homeLight0.getElevation(), 0.01F);
      assertFalse(homeLight0.isMovable());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertEquals((-694.0F), homeLight0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertTrue(homeLight0.isVisible());
      assertNull(homeLight0.getShininess());
      assertTrue(homeLight0.isResizable());
      assertTrue(homeLight0.isDeformable());
      assertFalse(homeLight0.isModelMirrored());
      assertFalse(homeLight0.isBackFaceShown());
      assertFalse(homeLight0.isDoorOrWindow());
      assertNull(homeLight0.getCurrency());
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertTrue(homeLight0.isTexturable());
      assertFalse(homeLight0.isNameVisible());
      assertEquals((-127.62969F), homeLight0.getY(), 0.01F);
      assertEquals("h&*+\"", homeLight0.getCatalogId());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertNull(homeLight0.getColor());
      assertEquals(2965.994F, homeLight1.getHeight(), 0.01F);
      assertNull(homeLight1.getShininess());
      assertTrue(homeLight1.isResizable());
      assertEquals("h&*+\"", homeLight1.getName());
      assertEquals("h&*+\"", homeLight1.getCatalogId());
      assertEquals(0.0F, homeLight1.getNameAngle(), 0.01F);
      assertNull(homeLight1.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight1.getDepth(), 0.01F);
      assertEquals((-127.62969F), homeLight1.getY(), 0.01F);
      assertEquals(0.0F, homeLight1.getNameYOffset(), 0.01F);
      assertEquals(0.5F, homeLight1.getPower(), 0.01F);
      assertFalse(homeLight1.isMovable());
      assertNull(homeLight1.getCurrency());
      assertFalse(homeLight1.isDoorOrWindow());
      assertFalse(homeLight1.isBackFaceShown());
      assertNull(homeLight1.getColor());
      assertEquals(0.0F, homeLight1.getX(), 0.01F);
      assertFalse(homeLight1.isModelMirrored());
      assertEquals(0.0F, homeLight1.getWidth(), 0.01F);
      assertTrue(homeLight1.isVisible());
      assertTrue(homeLight1.isDeformable());
      assertEquals(0.0F, homeLight1.getNameXOffset(), 0.01F);
      assertFalse(homeLight1.isNameVisible());
      assertEquals("h&*+\"", homeLight1.getDescription());
      assertEquals((-694.0F), homeLight1.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight1.getAngle(), 0.01F);
      assertTrue(homeLight1.isTexturable());
      assertEquals((-694.0F), homeLight1.getElevation(), 0.01F);
      assertEquals(2, lightSourceArray0.length);
      assertNotSame(homeLight0, homeLight1);
      assertNotSame(homeLight1, homeLight0);
      assertFalse(boolean0);
      
      boolean boolean1 = homeLight1.intersectsRectangle(1.0F, (-1581.4954F), (-1581.4954F), 3737.9102F);
      assertFalse(homeLight0.equals((Object)homeLight1));
      assertFalse(homeLight1.equals((Object)homeLight0));
      assertFalse(boolean1 == boolean0);
      assertEquals((short)0, bigDecimal0.shortValue());
      assertEquals((byte)0, bigDecimal0.byteValue());
      assertEquals(2965.994F, catalogLight0.getHeight(), 0.01F);
      assertNull(catalogLight0.getColor());
      assertFalse(catalogLight0.isModifiable());
      assertNull(catalogLight0.getCreationDate());
      assertEquals((-694.0F), catalogLight0.getElevation(), 0.01F);
      assertNull(catalogLight0.getCurrency());
      assertFalse(catalogLight0.isMovable());
      assertEquals("h&*+\"", catalogLight0.getId());
      assertEquals(0.0F, catalogLight0.getDepth(), 0.01F);
      assertEquals(0.0F, catalogLight0.getWidth(), 0.01F);
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertTrue(catalogLight0.isResizable());
      assertEquals("h&*+\"", catalogLight0.getDescription());
      assertNull(catalogLight0.getInformation());
      assertTrue(catalogLight0.isDeformable());
      assertEquals("h&*+\"", catalogLight0.getName());
      assertFalse(catalogLight0.isBackFaceShown());
      assertTrue(catalogLight0.isProportional());
      assertTrue(catalogLight0.isTexturable());
      assertFalse(catalogLight0.isDoorOrWindow());
      assertNull(catalogLight0.getGrade());
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertEquals("ELEVATION", catalogLight0.getCreator());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals("h&*+\"", homeLight0.getDescription());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals("h&*+\"", homeLight0.getName());
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertEquals(2965.994F, homeLight0.getHeight(), 0.01F);
      assertEquals((-694.0F), homeLight0.getElevation(), 0.01F);
      assertFalse(homeLight0.isMovable());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertEquals((-694.0F), homeLight0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertTrue(homeLight0.isVisible());
      assertNull(homeLight0.getShininess());
      assertTrue(homeLight0.isResizable());
      assertTrue(homeLight0.isDeformable());
      assertFalse(homeLight0.isModelMirrored());
      assertFalse(homeLight0.isBackFaceShown());
      assertFalse(homeLight0.isDoorOrWindow());
      assertNull(homeLight0.getCurrency());
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertTrue(homeLight0.isTexturable());
      assertFalse(homeLight0.isNameVisible());
      assertEquals((-127.62969F), homeLight0.getY(), 0.01F);
      assertEquals("h&*+\"", homeLight0.getCatalogId());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertNull(homeLight0.getColor());
      assertEquals(2965.994F, homeLight1.getHeight(), 0.01F);
      assertNull(homeLight1.getShininess());
      assertTrue(homeLight1.isResizable());
      assertEquals("h&*+\"", homeLight1.getName());
      assertEquals("h&*+\"", homeLight1.getCatalogId());
      assertEquals(0.0F, homeLight1.getNameAngle(), 0.01F);
      assertNull(homeLight1.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight1.getDepth(), 0.01F);
      assertEquals((-127.62969F), homeLight1.getY(), 0.01F);
      assertEquals(0.0F, homeLight1.getNameYOffset(), 0.01F);
      assertEquals(0.5F, homeLight1.getPower(), 0.01F);
      assertFalse(homeLight1.isMovable());
      assertNull(homeLight1.getCurrency());
      assertFalse(homeLight1.isDoorOrWindow());
      assertFalse(homeLight1.isBackFaceShown());
      assertNull(homeLight1.getColor());
      assertEquals(0.0F, homeLight1.getX(), 0.01F);
      assertFalse(homeLight1.isModelMirrored());
      assertEquals(0.0F, homeLight1.getWidth(), 0.01F);
      assertTrue(homeLight1.isVisible());
      assertTrue(homeLight1.isDeformable());
      assertEquals(0.0F, homeLight1.getNameXOffset(), 0.01F);
      assertFalse(homeLight1.isNameVisible());
      assertEquals("h&*+\"", homeLight1.getDescription());
      assertEquals((-694.0F), homeLight1.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight1.getAngle(), 0.01F);
      assertTrue(homeLight1.isTexturable());
      assertEquals((-694.0F), homeLight1.getElevation(), 0.01F);
      assertEquals(2, lightSourceArray0.length);
      assertNotSame(homeLight0, homeLight1);
      assertNotSame(homeLight1, homeLight0);
      assertTrue(boolean1);
      
      homeLight1.setModelMirrored(false);
      assertFalse(homeLight0.equals((Object)homeLight1));
      assertFalse(homeLight1.equals((Object)homeLight0));
      assertEquals((short)0, bigDecimal0.shortValue());
      assertEquals((byte)0, bigDecimal0.byteValue());
      assertEquals(2965.994F, catalogLight0.getHeight(), 0.01F);
      assertNull(catalogLight0.getColor());
      assertFalse(catalogLight0.isModifiable());
      assertNull(catalogLight0.getCreationDate());
      assertEquals((-694.0F), catalogLight0.getElevation(), 0.01F);
      assertNull(catalogLight0.getCurrency());
      assertFalse(catalogLight0.isMovable());
      assertEquals("h&*+\"", catalogLight0.getId());
      assertEquals(0.0F, catalogLight0.getDepth(), 0.01F);
      assertEquals(0.0F, catalogLight0.getWidth(), 0.01F);
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertTrue(catalogLight0.isResizable());
      assertEquals("h&*+\"", catalogLight0.getDescription());
      assertNull(catalogLight0.getInformation());
      assertTrue(catalogLight0.isDeformable());
      assertEquals("h&*+\"", catalogLight0.getName());
      assertFalse(catalogLight0.isBackFaceShown());
      assertTrue(catalogLight0.isProportional());
      assertTrue(catalogLight0.isTexturable());
      assertFalse(catalogLight0.isDoorOrWindow());
      assertNull(catalogLight0.getGrade());
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertEquals("ELEVATION", catalogLight0.getCreator());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals("h&*+\"", homeLight0.getDescription());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals("h&*+\"", homeLight0.getName());
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertEquals(2965.994F, homeLight0.getHeight(), 0.01F);
      assertEquals((-694.0F), homeLight0.getElevation(), 0.01F);
      assertFalse(homeLight0.isMovable());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertEquals((-694.0F), homeLight0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertTrue(homeLight0.isVisible());
      assertNull(homeLight0.getShininess());
      assertTrue(homeLight0.isResizable());
      assertTrue(homeLight0.isDeformable());
      assertFalse(homeLight0.isModelMirrored());
      assertFalse(homeLight0.isBackFaceShown());
      assertFalse(homeLight0.isDoorOrWindow());
      assertNull(homeLight0.getCurrency());
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertTrue(homeLight0.isTexturable());
      assertFalse(homeLight0.isNameVisible());
      assertEquals((-127.62969F), homeLight0.getY(), 0.01F);
      assertEquals("h&*+\"", homeLight0.getCatalogId());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertNull(homeLight0.getColor());
      assertEquals(2965.994F, homeLight1.getHeight(), 0.01F);
      assertNull(homeLight1.getShininess());
      assertTrue(homeLight1.isResizable());
      assertEquals("h&*+\"", homeLight1.getName());
      assertEquals("h&*+\"", homeLight1.getCatalogId());
      assertEquals(0.0F, homeLight1.getNameAngle(), 0.01F);
      assertNull(homeLight1.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight1.getDepth(), 0.01F);
      assertEquals((-127.62969F), homeLight1.getY(), 0.01F);
      assertEquals(0.0F, homeLight1.getNameYOffset(), 0.01F);
      assertEquals(0.5F, homeLight1.getPower(), 0.01F);
      assertFalse(homeLight1.isMovable());
      assertNull(homeLight1.getCurrency());
      assertFalse(homeLight1.isDoorOrWindow());
      assertFalse(homeLight1.isBackFaceShown());
      assertNull(homeLight1.getColor());
      assertEquals(0.0F, homeLight1.getX(), 0.01F);
      assertFalse(homeLight1.isModelMirrored());
      assertEquals(0.0F, homeLight1.getWidth(), 0.01F);
      assertTrue(homeLight1.isVisible());
      assertTrue(homeLight1.isDeformable());
      assertEquals(0.0F, homeLight1.getNameXOffset(), 0.01F);
      assertFalse(homeLight1.isNameVisible());
      assertEquals("h&*+\"", homeLight1.getDescription());
      assertEquals((-694.0F), homeLight1.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight1.getAngle(), 0.01F);
      assertTrue(homeLight1.isTexturable());
      assertEquals((-694.0F), homeLight1.getElevation(), 0.01F);
      assertEquals(2, lightSourceArray0.length);
      assertNotSame(homeLight0, homeLight1);
      assertNotSame(homeLight1, homeLight0);
      
      HomePieceOfFurniture.SortableProperty[] homePieceOfFurniture_SortablePropertyArray0 = HomePieceOfFurniture.SortableProperty.values();
      assertEquals(19, homePieceOfFurniture_SortablePropertyArray0.length);
      assertNotNull(homePieceOfFurniture_SortablePropertyArray0);
      
      boolean boolean2 = homeLight1.isMovable();
      assertFalse(homeLight0.equals((Object)homeLight1));
      assertFalse(homeLight1.equals((Object)homeLight0));
      assertFalse(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      assertEquals((short)0, bigDecimal0.shortValue());
      assertEquals((byte)0, bigDecimal0.byteValue());
      assertEquals(2965.994F, catalogLight0.getHeight(), 0.01F);
      assertNull(catalogLight0.getColor());
      assertFalse(catalogLight0.isModifiable());
      assertNull(catalogLight0.getCreationDate());
      assertEquals((-694.0F), catalogLight0.getElevation(), 0.01F);
      assertNull(catalogLight0.getCurrency());
      assertFalse(catalogLight0.isMovable());
      assertEquals("h&*+\"", catalogLight0.getId());
      assertEquals(0.0F, catalogLight0.getDepth(), 0.01F);
      assertEquals(0.0F, catalogLight0.getWidth(), 0.01F);
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertTrue(catalogLight0.isResizable());
      assertEquals("h&*+\"", catalogLight0.getDescription());
      assertNull(catalogLight0.getInformation());
      assertTrue(catalogLight0.isDeformable());
      assertEquals("h&*+\"", catalogLight0.getName());
      assertFalse(catalogLight0.isBackFaceShown());
      assertTrue(catalogLight0.isProportional());
      assertTrue(catalogLight0.isTexturable());
      assertFalse(catalogLight0.isDoorOrWindow());
      assertNull(catalogLight0.getGrade());
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertEquals("ELEVATION", catalogLight0.getCreator());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals("h&*+\"", homeLight0.getDescription());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals("h&*+\"", homeLight0.getName());
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertEquals(2965.994F, homeLight0.getHeight(), 0.01F);
      assertEquals((-694.0F), homeLight0.getElevation(), 0.01F);
      assertFalse(homeLight0.isMovable());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertEquals((-694.0F), homeLight0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertTrue(homeLight0.isVisible());
      assertNull(homeLight0.getShininess());
      assertTrue(homeLight0.isResizable());
      assertTrue(homeLight0.isDeformable());
      assertFalse(homeLight0.isModelMirrored());
      assertFalse(homeLight0.isBackFaceShown());
      assertFalse(homeLight0.isDoorOrWindow());
      assertNull(homeLight0.getCurrency());
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertTrue(homeLight0.isTexturable());
      assertFalse(homeLight0.isNameVisible());
      assertEquals((-127.62969F), homeLight0.getY(), 0.01F);
      assertEquals("h&*+\"", homeLight0.getCatalogId());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertNull(homeLight0.getColor());
      assertEquals(2965.994F, homeLight1.getHeight(), 0.01F);
      assertNull(homeLight1.getShininess());
      assertTrue(homeLight1.isResizable());
      assertEquals("h&*+\"", homeLight1.getName());
      assertEquals("h&*+\"", homeLight1.getCatalogId());
      assertEquals(0.0F, homeLight1.getNameAngle(), 0.01F);
      assertNull(homeLight1.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight1.getDepth(), 0.01F);
      assertEquals((-127.62969F), homeLight1.getY(), 0.01F);
      assertEquals(0.0F, homeLight1.getNameYOffset(), 0.01F);
      assertEquals(0.5F, homeLight1.getPower(), 0.01F);
      assertFalse(homeLight1.isMovable());
      assertNull(homeLight1.getCurrency());
      assertFalse(homeLight1.isDoorOrWindow());
      assertFalse(homeLight1.isBackFaceShown());
      assertNull(homeLight1.getColor());
      assertEquals(0.0F, homeLight1.getX(), 0.01F);
      assertFalse(homeLight1.isModelMirrored());
      assertEquals(0.0F, homeLight1.getWidth(), 0.01F);
      assertTrue(homeLight1.isVisible());
      assertTrue(homeLight1.isDeformable());
      assertEquals(0.0F, homeLight1.getNameXOffset(), 0.01F);
      assertFalse(homeLight1.isNameVisible());
      assertEquals("h&*+\"", homeLight1.getDescription());
      assertEquals((-694.0F), homeLight1.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight1.getAngle(), 0.01F);
      assertTrue(homeLight1.isTexturable());
      assertEquals((-694.0F), homeLight1.getElevation(), 0.01F);
      assertEquals(2, lightSourceArray0.length);
      assertNotSame(homeLight0, homeLight1);
      assertNotSame(homeLight1, homeLight0);
      assertFalse(boolean2);
      
      Level level0 = new Level("", (-4843.888F), (-1.0F), (-127.62969F));
      assertEquals((-127.62969F), level0.getHeight(), 0.01F);
      assertTrue(level0.isVisible());
      assertEquals((-4843.888F), level0.getElevation(), 0.01F);
      assertEquals((-1.0F), level0.getFloorThickness(), 0.01F);
      assertEquals("", level0.getName());
      assertNotNull(level0);
      
      boolean boolean3 = homeLight0.isAtLevel(level0);
      assertFalse(homeLight0.equals((Object)homeLight1));
      assertTrue(boolean3 == boolean2);
      assertTrue(boolean3 == boolean0);
      assertFalse(boolean3 == boolean1);
      assertEquals((short)0, bigDecimal0.shortValue());
      assertEquals((byte)0, bigDecimal0.byteValue());
      assertEquals(2965.994F, catalogLight0.getHeight(), 0.01F);
      assertNull(catalogLight0.getColor());
      assertFalse(catalogLight0.isModifiable());
      assertNull(catalogLight0.getCreationDate());
      assertEquals((-694.0F), catalogLight0.getElevation(), 0.01F);
      assertNull(catalogLight0.getCurrency());
      assertFalse(catalogLight0.isMovable());
      assertEquals("h&*+\"", catalogLight0.getId());
      assertEquals(0.0F, catalogLight0.getDepth(), 0.01F);
      assertEquals(0.0F, catalogLight0.getWidth(), 0.01F);
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertTrue(catalogLight0.isResizable());
      assertEquals("h&*+\"", catalogLight0.getDescription());
      assertNull(catalogLight0.getInformation());
      assertTrue(catalogLight0.isDeformable());
      assertEquals("h&*+\"", catalogLight0.getName());
      assertFalse(catalogLight0.isBackFaceShown());
      assertTrue(catalogLight0.isProportional());
      assertTrue(catalogLight0.isTexturable());
      assertFalse(catalogLight0.isDoorOrWindow());
      assertNull(catalogLight0.getGrade());
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertEquals("ELEVATION", catalogLight0.getCreator());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals("h&*+\"", homeLight0.getDescription());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals("h&*+\"", homeLight0.getName());
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertEquals(2965.994F, homeLight0.getHeight(), 0.01F);
      assertEquals((-694.0F), homeLight0.getElevation(), 0.01F);
      assertFalse(homeLight0.isMovable());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertEquals((-694.0F), homeLight0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertTrue(homeLight0.isVisible());
      assertNull(homeLight0.getShininess());
      assertTrue(homeLight0.isResizable());
      assertTrue(homeLight0.isDeformable());
      assertFalse(homeLight0.isModelMirrored());
      assertFalse(homeLight0.isBackFaceShown());
      assertFalse(homeLight0.isDoorOrWindow());
      assertNull(homeLight0.getCurrency());
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertTrue(homeLight0.isTexturable());
      assertFalse(homeLight0.isNameVisible());
      assertEquals((-127.62969F), homeLight0.getY(), 0.01F);
      assertEquals("h&*+\"", homeLight0.getCatalogId());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertNull(homeLight0.getColor());
      assertEquals((-127.62969F), level0.getHeight(), 0.01F);
      assertTrue(level0.isVisible());
      assertEquals((-4843.888F), level0.getElevation(), 0.01F);
      assertEquals((-1.0F), level0.getFloorThickness(), 0.01F);
      assertEquals("", level0.getName());
      assertEquals(2, lightSourceArray0.length);
      assertNotSame(homeLight0, homeLight1);
      assertFalse(boolean3);
  }

  @Test(timeout = 4000)
  public void test239()  throws Throwable  {
      LightSource[] lightSourceArray0 = new LightSource[2];
      LightSource lightSource0 = new LightSource((-815.0F), 0.0F, 0.0F, 114);
      assertEquals(0.0F, lightSource0.getZ(), 0.01F);
      assertEquals((-815.0F), lightSource0.getX(), 0.01F);
      assertEquals(114, lightSource0.getColor());
      assertNull(lightSource0.getDiameter());
      assertEquals(0.0F, lightSource0.getY(), 0.01F);
      assertNotNull(lightSource0);
      
      lightSourceArray0[0] = lightSource0;
      boolean boolean0 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      LightSource lightSource1 = new LightSource((-694.0F), 2965.994F, (-127.62969F), 0);
      assertFalse(lightSource1.equals((Object)lightSource0));
      assertEquals(2965.994F, lightSource1.getY(), 0.01F);
      assertEquals(0, lightSource1.getColor());
      assertNull(lightSource1.getDiameter());
      assertEquals((-694.0F), lightSource1.getX(), 0.01F);
      assertEquals((-127.62969F), lightSource1.getZ(), 0.01F);
      assertNotNull(lightSource1);
      
      BigDecimal bigDecimal0 = BigDecimal.ZERO;
      assertEquals((byte)0, bigDecimal0.byteValue());
      assertEquals((short)0, bigDecimal0.shortValue());
      assertNotNull(bigDecimal0);
      
      CatalogLight catalogLight0 = new CatalogLight("h&*+\"", "h&*+\"", "h&*+\"", (Content) null, (Content) null, (-815.0F), 0.3926991F, (-694.0F), (-694.0F), true, lightSourceArray0, (float[][]) null, "h&*+\"", true, bigDecimal0, bigDecimal0);
      assertEquals((byte)0, bigDecimal0.byteValue());
      assertEquals((short)0, bigDecimal0.shortValue());
      assertNull(catalogLight0.getColor());
      assertFalse(catalogLight0.isModifiable());
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertFalse(catalogLight0.isDoorOrWindow());
      assertEquals((-694.0F), catalogLight0.getElevation(), 0.01F);
      assertEquals("h&*+\"", catalogLight0.getId());
      assertNull(catalogLight0.getCurrency());
      assertFalse(catalogLight0.isBackFaceShown());
      assertNull(catalogLight0.getInformation());
      assertTrue(catalogLight0.isDeformable());
      assertTrue(catalogLight0.isMovable());
      assertEquals("h&*+\"", catalogLight0.getName());
      assertEquals(0.3926991F, catalogLight0.getDepth(), 0.01F);
      assertEquals((-815.0F), catalogLight0.getWidth(), 0.01F);
      assertEquals("h&*+\"", catalogLight0.getCreator());
      assertEquals("h&*+\"", catalogLight0.getDescription());
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertNull(catalogLight0.getGrade());
      assertTrue(catalogLight0.isTexturable());
      assertTrue(catalogLight0.isProportional());
      assertNull(catalogLight0.getCreationDate());
      assertEquals((-694.0F), catalogLight0.getHeight(), 0.01F);
      assertTrue(catalogLight0.isResizable());
      assertEquals(2, lightSourceArray0.length);
      assertNotNull(catalogLight0);
      
      HomeLight homeLight0 = new HomeLight(catalogLight0);
      assertEquals((byte)0, bigDecimal0.byteValue());
      assertEquals((short)0, bigDecimal0.shortValue());
      assertNull(catalogLight0.getColor());
      assertFalse(catalogLight0.isModifiable());
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertFalse(catalogLight0.isDoorOrWindow());
      assertEquals((-694.0F), catalogLight0.getElevation(), 0.01F);
      assertEquals("h&*+\"", catalogLight0.getId());
      assertNull(catalogLight0.getCurrency());
      assertFalse(catalogLight0.isBackFaceShown());
      assertNull(catalogLight0.getInformation());
      assertTrue(catalogLight0.isDeformable());
      assertTrue(catalogLight0.isMovable());
      assertEquals("h&*+\"", catalogLight0.getName());
      assertEquals(0.3926991F, catalogLight0.getDepth(), 0.01F);
      assertEquals((-815.0F), catalogLight0.getWidth(), 0.01F);
      assertEquals("h&*+\"", catalogLight0.getCreator());
      assertEquals("h&*+\"", catalogLight0.getDescription());
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertNull(catalogLight0.getGrade());
      assertTrue(catalogLight0.isTexturable());
      assertTrue(catalogLight0.isProportional());
      assertNull(catalogLight0.getCreationDate());
      assertEquals((-694.0F), catalogLight0.getHeight(), 0.01F);
      assertTrue(catalogLight0.isResizable());
      assertEquals((-694.0F), homeLight0.getElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals(0.19634955F, homeLight0.getY(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertEquals("h&*+\"", homeLight0.getName());
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertTrue(homeLight0.isMovable());
      assertEquals((-815.0F), homeLight0.getWidth(), 0.01F);
      assertEquals("h&*+\"", homeLight0.getCatalogId());
      assertEquals((-694.0F), homeLight0.getHeight(), 0.01F);
      assertNull(homeLight0.getColor());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertNull(homeLight0.getCurrency());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertFalse(homeLight0.isNameVisible());
      assertEquals((-407.5F), homeLight0.getX(), 0.01F);
      assertTrue(homeLight0.isVisible());
      assertTrue(homeLight0.isDeformable());
      assertEquals(0.3926991F, homeLight0.getDepth(), 0.01F);
      assertFalse(homeLight0.isModelMirrored());
      assertFalse(homeLight0.isBackFaceShown());
      assertTrue(homeLight0.isTexturable());
      assertFalse(homeLight0.isDoorOrWindow());
      assertNull(homeLight0.getShininess());
      assertTrue(homeLight0.isResizable());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertEquals((-694.0F), homeLight0.getGroundElevation(), 0.01F);
      assertEquals("h&*+\"", homeLight0.getDescription());
      assertEquals(2, lightSourceArray0.length);
      assertNotNull(homeLight0);
      
      HomeLight homeLight1 = new HomeLight(homeLight0);
      assertFalse(homeLight1.equals((Object)homeLight0));
      assertEquals((byte)0, bigDecimal0.byteValue());
      assertEquals((short)0, bigDecimal0.shortValue());
      assertNull(catalogLight0.getColor());
      assertFalse(catalogLight0.isModifiable());
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertFalse(catalogLight0.isDoorOrWindow());
      assertEquals((-694.0F), catalogLight0.getElevation(), 0.01F);
      assertEquals("h&*+\"", catalogLight0.getId());
      assertNull(catalogLight0.getCurrency());
      assertFalse(catalogLight0.isBackFaceShown());
      assertNull(catalogLight0.getInformation());
      assertTrue(catalogLight0.isDeformable());
      assertTrue(catalogLight0.isMovable());
      assertEquals("h&*+\"", catalogLight0.getName());
      assertEquals(0.3926991F, catalogLight0.getDepth(), 0.01F);
      assertEquals((-815.0F), catalogLight0.getWidth(), 0.01F);
      assertEquals("h&*+\"", catalogLight0.getCreator());
      assertEquals("h&*+\"", catalogLight0.getDescription());
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertNull(catalogLight0.getGrade());
      assertTrue(catalogLight0.isTexturable());
      assertTrue(catalogLight0.isProportional());
      assertNull(catalogLight0.getCreationDate());
      assertEquals((-694.0F), catalogLight0.getHeight(), 0.01F);
      assertTrue(catalogLight0.isResizable());
      assertEquals((-694.0F), homeLight0.getElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals(0.19634955F, homeLight0.getY(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertEquals("h&*+\"", homeLight0.getName());
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertTrue(homeLight0.isMovable());
      assertEquals((-815.0F), homeLight0.getWidth(), 0.01F);
      assertEquals("h&*+\"", homeLight0.getCatalogId());
      assertEquals((-694.0F), homeLight0.getHeight(), 0.01F);
      assertNull(homeLight0.getColor());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertNull(homeLight0.getCurrency());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertFalse(homeLight0.isNameVisible());
      assertEquals((-407.5F), homeLight0.getX(), 0.01F);
      assertTrue(homeLight0.isVisible());
      assertTrue(homeLight0.isDeformable());
      assertEquals(0.3926991F, homeLight0.getDepth(), 0.01F);
      assertFalse(homeLight0.isModelMirrored());
      assertFalse(homeLight0.isBackFaceShown());
      assertTrue(homeLight0.isTexturable());
      assertFalse(homeLight0.isDoorOrWindow());
      assertNull(homeLight0.getShininess());
      assertTrue(homeLight0.isResizable());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertEquals((-694.0F), homeLight0.getGroundElevation(), 0.01F);
      assertEquals("h&*+\"", homeLight0.getDescription());
      assertNull(homeLight1.getColor());
      assertFalse(homeLight1.isNameVisible());
      assertNull(homeLight1.getCurrency());
      assertEquals(0.0F, homeLight1.getNameYOffset(), 0.01F);
      assertTrue(homeLight1.isTexturable());
      assertFalse(homeLight1.isDoorOrWindow());
      assertEquals((-694.0F), homeLight1.getGroundElevation(), 0.01F);
      assertTrue(homeLight1.isDeformable());
      assertTrue(homeLight1.isVisible());
      assertEquals((-407.5F), homeLight1.getX(), 0.01F);
      assertEquals((-694.0F), homeLight1.getHeight(), 0.01F);
      assertNull(homeLight1.getShininess());
      assertEquals(0.0F, homeLight1.getNameAngle(), 0.01F);
      assertEquals((-815.0F), homeLight1.getWidth(), 0.01F);
      assertNull(homeLight1.getStaircaseCutOutShape());
      assertTrue(homeLight1.isMovable());
      assertEquals(0.5F, homeLight1.getPower(), 0.01F);
      assertEquals("h&*+\"", homeLight1.getName());
      assertTrue(homeLight1.isResizable());
      assertEquals(0.19634955F, homeLight1.getY(), 0.01F);
      assertEquals("h&*+\"", homeLight1.getCatalogId());
      assertEquals(0.0F, homeLight1.getNameXOffset(), 0.01F);
      assertEquals((-694.0F), homeLight1.getElevation(), 0.01F);
      assertEquals("h&*+\"", homeLight1.getDescription());
      assertEquals(0.0F, homeLight1.getAngle(), 0.01F);
      assertFalse(homeLight1.isModelMirrored());
      assertFalse(homeLight1.isBackFaceShown());
      assertEquals(0.3926991F, homeLight1.getDepth(), 0.01F);
      assertEquals(2, lightSourceArray0.length);
      assertNotNull(homeLight1);
      
      HomeLight homeLight2 = homeLight1.clone();
      assertFalse(homeLight0.equals((Object)homeLight1));
      assertFalse(homeLight1.equals((Object)homeLight0));
      assertFalse(homeLight2.equals((Object)homeLight0));
      assertFalse(homeLight2.equals((Object)homeLight1));
      assertEquals((byte)0, bigDecimal0.byteValue());
      assertEquals((short)0, bigDecimal0.shortValue());
      assertNull(catalogLight0.getColor());
      assertFalse(catalogLight0.isModifiable());
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertFalse(catalogLight0.isDoorOrWindow());
      assertEquals((-694.0F), catalogLight0.getElevation(), 0.01F);
      assertEquals("h&*+\"", catalogLight0.getId());
      assertNull(catalogLight0.getCurrency());
      assertFalse(catalogLight0.isBackFaceShown());
      assertNull(catalogLight0.getInformation());
      assertTrue(catalogLight0.isDeformable());
      assertTrue(catalogLight0.isMovable());
      assertEquals("h&*+\"", catalogLight0.getName());
      assertEquals(0.3926991F, catalogLight0.getDepth(), 0.01F);
      assertEquals((-815.0F), catalogLight0.getWidth(), 0.01F);
      assertEquals("h&*+\"", catalogLight0.getCreator());
      assertEquals("h&*+\"", catalogLight0.getDescription());
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertNull(catalogLight0.getGrade());
      assertTrue(catalogLight0.isTexturable());
      assertTrue(catalogLight0.isProportional());
      assertNull(catalogLight0.getCreationDate());
      assertEquals((-694.0F), catalogLight0.getHeight(), 0.01F);
      assertTrue(catalogLight0.isResizable());
      assertEquals((-694.0F), homeLight0.getElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals(0.19634955F, homeLight0.getY(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertEquals("h&*+\"", homeLight0.getName());
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertTrue(homeLight0.isMovable());
      assertEquals((-815.0F), homeLight0.getWidth(), 0.01F);
      assertEquals("h&*+\"", homeLight0.getCatalogId());
      assertEquals((-694.0F), homeLight0.getHeight(), 0.01F);
      assertNull(homeLight0.getColor());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertNull(homeLight0.getCurrency());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertFalse(homeLight0.isNameVisible());
      assertEquals((-407.5F), homeLight0.getX(), 0.01F);
      assertTrue(homeLight0.isVisible());
      assertTrue(homeLight0.isDeformable());
      assertEquals(0.3926991F, homeLight0.getDepth(), 0.01F);
      assertFalse(homeLight0.isModelMirrored());
      assertFalse(homeLight0.isBackFaceShown());
      assertTrue(homeLight0.isTexturable());
      assertFalse(homeLight0.isDoorOrWindow());
      assertNull(homeLight0.getShininess());
      assertTrue(homeLight0.isResizable());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertEquals((-694.0F), homeLight0.getGroundElevation(), 0.01F);
      assertEquals("h&*+\"", homeLight0.getDescription());
      assertNull(homeLight1.getColor());
      assertFalse(homeLight1.isNameVisible());
      assertNull(homeLight1.getCurrency());
      assertEquals(0.0F, homeLight1.getNameYOffset(), 0.01F);
      assertTrue(homeLight1.isTexturable());
      assertFalse(homeLight1.isDoorOrWindow());
      assertEquals((-694.0F), homeLight1.getGroundElevation(), 0.01F);
      assertTrue(homeLight1.isDeformable());
      assertTrue(homeLight1.isVisible());
      assertEquals((-407.5F), homeLight1.getX(), 0.01F);
      assertEquals((-694.0F), homeLight1.getHeight(), 0.01F);
      assertNull(homeLight1.getShininess());
      assertEquals(0.0F, homeLight1.getNameAngle(), 0.01F);
      assertEquals((-815.0F), homeLight1.getWidth(), 0.01F);
      assertNull(homeLight1.getStaircaseCutOutShape());
      assertTrue(homeLight1.isMovable());
      assertEquals(0.5F, homeLight1.getPower(), 0.01F);
      assertEquals("h&*+\"", homeLight1.getName());
      assertTrue(homeLight1.isResizable());
      assertEquals(0.19634955F, homeLight1.getY(), 0.01F);
      assertEquals("h&*+\"", homeLight1.getCatalogId());
      assertEquals(0.0F, homeLight1.getNameXOffset(), 0.01F);
      assertEquals((-694.0F), homeLight1.getElevation(), 0.01F);
      assertEquals("h&*+\"", homeLight1.getDescription());
      assertEquals(0.0F, homeLight1.getAngle(), 0.01F);
      assertFalse(homeLight1.isModelMirrored());
      assertFalse(homeLight1.isBackFaceShown());
      assertEquals(0.3926991F, homeLight1.getDepth(), 0.01F);
      assertEquals(0.0F, homeLight2.getNameAngle(), 0.01F);
      assertEquals(0.19634955F, homeLight2.getY(), 0.01F);
      assertTrue(homeLight2.isMovable());
      assertEquals("h&*+\"", homeLight2.getName());
      assertEquals(0.0F, homeLight2.getNameXOffset(), 0.01F);
      assertEquals("h&*+\"", homeLight2.getCatalogId());
      assertEquals((-694.0F), homeLight2.getElevation(), 0.01F);
      assertEquals(0.5F, homeLight2.getPower(), 0.01F);
      assertEquals("h&*+\"", homeLight2.getDescription());
      assertEquals(0.3926991F, homeLight2.getDepth(), 0.01F);
      assertEquals(0.0F, homeLight2.getAngle(), 0.01F);
      assertEquals(0.0F, homeLight2.getNameYOffset(), 0.01F);
      assertFalse(homeLight2.isBackFaceShown());
      assertFalse(homeLight2.isModelMirrored());
      assertNull(homeLight2.getColor());
      assertFalse(homeLight2.isNameVisible());
      assertFalse(homeLight2.isDoorOrWindow());
      assertTrue(homeLight2.isTexturable());
      assertNull(homeLight2.getCurrency());
      assertEquals((-407.5F), homeLight2.getX(), 0.01F);
      assertEquals((-694.0F), homeLight2.getHeight(), 0.01F);
      assertEquals((-694.0F), homeLight2.getGroundElevation(), 0.01F);
      assertNull(homeLight2.getShininess());
      assertTrue(homeLight2.isDeformable());
      assertTrue(homeLight2.isResizable());
      assertTrue(homeLight2.isVisible());
      assertEquals((-815.0F), homeLight2.getWidth(), 0.01F);
      assertNull(homeLight2.getStaircaseCutOutShape());
      assertEquals(2, lightSourceArray0.length);
      assertNotSame(homeLight0, homeLight2);
      assertNotSame(homeLight0, homeLight1);
      assertNotSame(homeLight1, homeLight2);
      assertNotSame(homeLight1, homeLight0);
      assertNotSame(homeLight2, homeLight0);
      assertNotSame(homeLight2, homeLight1);
      assertNotNull(homeLight2);
      
      HomeLight homeLight3 = (HomeLight)homeLight2.clone();
      assertFalse(homeLight0.equals((Object)homeLight2));
      assertFalse(homeLight0.equals((Object)homeLight1));
      assertFalse(homeLight1.equals((Object)homeLight2));
      assertFalse(homeLight1.equals((Object)homeLight0));
      assertFalse(homeLight2.equals((Object)homeLight0));
      assertFalse(homeLight2.equals((Object)homeLight1));
      assertFalse(homeLight3.equals((Object)homeLight0));
      assertFalse(homeLight3.equals((Object)homeLight1));
      assertFalse(homeLight3.equals((Object)homeLight2));
      assertEquals((byte)0, bigDecimal0.byteValue());
      assertEquals((short)0, bigDecimal0.shortValue());
      assertNull(catalogLight0.getColor());
      assertFalse(catalogLight0.isModifiable());
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertFalse(catalogLight0.isDoorOrWindow());
      assertEquals((-694.0F), catalogLight0.getElevation(), 0.01F);
      assertEquals("h&*+\"", catalogLight0.getId());
      assertNull(catalogLight0.getCurrency());
      assertFalse(catalogLight0.isBackFaceShown());
      assertNull(catalogLight0.getInformation());
      assertTrue(catalogLight0.isDeformable());
      assertTrue(catalogLight0.isMovable());
      assertEquals("h&*+\"", catalogLight0.getName());
      assertEquals(0.3926991F, catalogLight0.getDepth(), 0.01F);
      assertEquals((-815.0F), catalogLight0.getWidth(), 0.01F);
      assertEquals("h&*+\"", catalogLight0.getCreator());
      assertEquals("h&*+\"", catalogLight0.getDescription());
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertNull(catalogLight0.getGrade());
      assertTrue(catalogLight0.isTexturable());
      assertTrue(catalogLight0.isProportional());
      assertNull(catalogLight0.getCreationDate());
      assertEquals((-694.0F), catalogLight0.getHeight(), 0.01F);
      assertTrue(catalogLight0.isResizable());
      assertEquals((-694.0F), homeLight0.getElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals(0.19634955F, homeLight0.getY(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertEquals("h&*+\"", homeLight0.getName());
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertTrue(homeLight0.isMovable());
      assertEquals((-815.0F), homeLight0.getWidth(), 0.01F);
      assertEquals("h&*+\"", homeLight0.getCatalogId());
      assertEquals((-694.0F), homeLight0.getHeight(), 0.01F);
      assertNull(homeLight0.getColor());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertNull(homeLight0.getCurrency());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertFalse(homeLight0.isNameVisible());
      assertEquals((-407.5F), homeLight0.getX(), 0.01F);
      assertTrue(homeLight0.isVisible());
      assertTrue(homeLight0.isDeformable());
      assertEquals(0.3926991F, homeLight0.getDepth(), 0.01F);
      assertFalse(homeLight0.isModelMirrored());
      assertFalse(homeLight0.isBackFaceShown());
      assertTrue(homeLight0.isTexturable());
      assertFalse(homeLight0.isDoorOrWindow());
      assertNull(homeLight0.getShininess());
      assertTrue(homeLight0.isResizable());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertEquals((-694.0F), homeLight0.getGroundElevation(), 0.01F);
      assertEquals("h&*+\"", homeLight0.getDescription());
      assertNull(homeLight1.getColor());
      assertFalse(homeLight1.isNameVisible());
      assertNull(homeLight1.getCurrency());
      assertEquals(0.0F, homeLight1.getNameYOffset(), 0.01F);
      assertTrue(homeLight1.isTexturable());
      assertFalse(homeLight1.isDoorOrWindow());
      assertEquals((-694.0F), homeLight1.getGroundElevation(), 0.01F);
      assertTrue(homeLight1.isDeformable());
      assertTrue(homeLight1.isVisible());
      assertEquals((-407.5F), homeLight1.getX(), 0.01F);
      assertEquals((-694.0F), homeLight1.getHeight(), 0.01F);
      assertNull(homeLight1.getShininess());
      assertEquals(0.0F, homeLight1.getNameAngle(), 0.01F);
      assertEquals((-815.0F), homeLight1.getWidth(), 0.01F);
      assertNull(homeLight1.getStaircaseCutOutShape());
      assertTrue(homeLight1.isMovable());
      assertEquals(0.5F, homeLight1.getPower(), 0.01F);
      assertEquals("h&*+\"", homeLight1.getName());
      assertTrue(homeLight1.isResizable());
      assertEquals(0.19634955F, homeLight1.getY(), 0.01F);
      assertEquals("h&*+\"", homeLight1.getCatalogId());
      assertEquals(0.0F, homeLight1.getNameXOffset(), 0.01F);
      assertEquals((-694.0F), homeLight1.getElevation(), 0.01F);
      assertEquals("h&*+\"", homeLight1.getDescription());
      assertEquals(0.0F, homeLight1.getAngle(), 0.01F);
      assertFalse(homeLight1.isModelMirrored());
      assertFalse(homeLight1.isBackFaceShown());
      assertEquals(0.3926991F, homeLight1.getDepth(), 0.01F);
      assertEquals(0.0F, homeLight2.getNameAngle(), 0.01F);
      assertEquals(0.19634955F, homeLight2.getY(), 0.01F);
      assertTrue(homeLight2.isMovable());
      assertEquals("h&*+\"", homeLight2.getName());
      assertEquals(0.0F, homeLight2.getNameXOffset(), 0.01F);
      assertEquals("h&*+\"", homeLight2.getCatalogId());
      assertEquals((-694.0F), homeLight2.getElevation(), 0.01F);
      assertEquals(0.5F, homeLight2.getPower(), 0.01F);
      assertEquals("h&*+\"", homeLight2.getDescription());
      assertEquals(0.3926991F, homeLight2.getDepth(), 0.01F);
      assertEquals(0.0F, homeLight2.getAngle(), 0.01F);
      assertEquals(0.0F, homeLight2.getNameYOffset(), 0.01F);
      assertFalse(homeLight2.isBackFaceShown());
      assertFalse(homeLight2.isModelMirrored());
      assertNull(homeLight2.getColor());
      assertFalse(homeLight2.isNameVisible());
      assertFalse(homeLight2.isDoorOrWindow());
      assertTrue(homeLight2.isTexturable());
      assertNull(homeLight2.getCurrency());
      assertEquals((-407.5F), homeLight2.getX(), 0.01F);
      assertEquals((-694.0F), homeLight2.getHeight(), 0.01F);
      assertEquals((-694.0F), homeLight2.getGroundElevation(), 0.01F);
      assertNull(homeLight2.getShininess());
      assertTrue(homeLight2.isDeformable());
      assertTrue(homeLight2.isResizable());
      assertTrue(homeLight2.isVisible());
      assertEquals((-815.0F), homeLight2.getWidth(), 0.01F);
      assertNull(homeLight2.getStaircaseCutOutShape());
      assertTrue(homeLight3.isDeformable());
      assertNull(homeLight3.getCurrency());
      assertEquals((-407.5F), homeLight3.getX(), 0.01F);
      assertTrue(homeLight3.isVisible());
      assertEquals((-694.0F), homeLight3.getHeight(), 0.01F);
      assertEquals(0.3926991F, homeLight3.getDepth(), 0.01F);
      assertFalse(homeLight3.isNameVisible());
      assertEquals("h&*+\"", homeLight3.getCatalogId());
      assertFalse(homeLight3.isBackFaceShown());
      assertFalse(homeLight3.isModelMirrored());
      assertEquals(0.19634955F, homeLight3.getY(), 0.01F);
      assertNull(homeLight3.getColor());
      assertEquals(0.0F, homeLight3.getNameYOffset(), 0.01F);
      assertEquals((-694.0F), homeLight3.getElevation(), 0.01F);
      assertEquals(0.5F, homeLight3.getPower(), 0.01F);
      assertEquals("h&*+\"", homeLight3.getDescription());
      assertEquals(0.0F, homeLight3.getNameAngle(), 0.01F);
      assertEquals(0.0F, homeLight3.getAngle(), 0.01F);
      assertTrue(homeLight3.isMovable());
      assertEquals("h&*+\"", homeLight3.getName());
      assertFalse(homeLight3.isDoorOrWindow());
      assertTrue(homeLight3.isTexturable());
      assertNull(homeLight3.getShininess());
      assertTrue(homeLight3.isResizable());
      assertEquals((-815.0F), homeLight3.getWidth(), 0.01F);
      assertNull(homeLight3.getStaircaseCutOutShape());
      assertEquals((-694.0F), homeLight3.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight3.getNameXOffset(), 0.01F);
      assertEquals(2, lightSourceArray0.length);
      assertNotSame(homeLight0, homeLight3);
      assertNotSame(homeLight0, homeLight1);
      assertNotSame(homeLight0, homeLight2);
      assertNotSame(homeLight1, homeLight2);
      assertNotSame(homeLight1, homeLight0);
      assertNotSame(homeLight1, homeLight3);
      assertNotSame(homeLight2, homeLight0);
      assertNotSame(homeLight2, homeLight3);
      assertNotSame(homeLight2, homeLight1);
      assertNotSame(homeLight3, homeLight0);
      assertNotSame(homeLight3, homeLight1);
      assertNotSame(homeLight3, homeLight2);
      assertNotNull(homeLight3);
      
      boolean boolean1 = homeLight3.containsPoint(1.0F, 1.0F, (-694.0F));
      assertFalse(homeLight0.equals((Object)homeLight3));
      assertFalse(homeLight0.equals((Object)homeLight1));
      assertFalse(homeLight0.equals((Object)homeLight2));
      assertFalse(homeLight1.equals((Object)homeLight2));
      assertFalse(homeLight1.equals((Object)homeLight0));
      assertFalse(homeLight1.equals((Object)homeLight3));
      assertFalse(homeLight2.equals((Object)homeLight0));
      assertFalse(homeLight2.equals((Object)homeLight3));
      assertFalse(homeLight2.equals((Object)homeLight1));
      assertFalse(homeLight3.equals((Object)homeLight0));
      assertFalse(homeLight3.equals((Object)homeLight1));
      assertFalse(homeLight3.equals((Object)homeLight2));
      assertTrue(boolean1 == boolean0);
      assertEquals((byte)0, bigDecimal0.byteValue());
      assertEquals((short)0, bigDecimal0.shortValue());
      assertNull(catalogLight0.getColor());
      assertFalse(catalogLight0.isModifiable());
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertFalse(catalogLight0.isDoorOrWindow());
      assertEquals((-694.0F), catalogLight0.getElevation(), 0.01F);
      assertEquals("h&*+\"", catalogLight0.getId());
      assertNull(catalogLight0.getCurrency());
      assertFalse(catalogLight0.isBackFaceShown());
      assertNull(catalogLight0.getInformation());
      assertTrue(catalogLight0.isDeformable());
      assertTrue(catalogLight0.isMovable());
      assertEquals("h&*+\"", catalogLight0.getName());
      assertEquals(0.3926991F, catalogLight0.getDepth(), 0.01F);
      assertEquals((-815.0F), catalogLight0.getWidth(), 0.01F);
      assertEquals("h&*+\"", catalogLight0.getCreator());
      assertEquals("h&*+\"", catalogLight0.getDescription());
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertNull(catalogLight0.getGrade());
      assertTrue(catalogLight0.isTexturable());
      assertTrue(catalogLight0.isProportional());
      assertNull(catalogLight0.getCreationDate());
      assertEquals((-694.0F), catalogLight0.getHeight(), 0.01F);
      assertTrue(catalogLight0.isResizable());
      assertEquals((-694.0F), homeLight0.getElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals(0.19634955F, homeLight0.getY(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertEquals("h&*+\"", homeLight0.getName());
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertTrue(homeLight0.isMovable());
      assertEquals((-815.0F), homeLight0.getWidth(), 0.01F);
      assertEquals("h&*+\"", homeLight0.getCatalogId());
      assertEquals((-694.0F), homeLight0.getHeight(), 0.01F);
      assertNull(homeLight0.getColor());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertNull(homeLight0.getCurrency());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertFalse(homeLight0.isNameVisible());
      assertEquals((-407.5F), homeLight0.getX(), 0.01F);
      assertTrue(homeLight0.isVisible());
      assertTrue(homeLight0.isDeformable());
      assertEquals(0.3926991F, homeLight0.getDepth(), 0.01F);
      assertFalse(homeLight0.isModelMirrored());
      assertFalse(homeLight0.isBackFaceShown());
      assertTrue(homeLight0.isTexturable());
      assertFalse(homeLight0.isDoorOrWindow());
      assertNull(homeLight0.getShininess());
      assertTrue(homeLight0.isResizable());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertEquals((-694.0F), homeLight0.getGroundElevation(), 0.01F);
      assertEquals("h&*+\"", homeLight0.getDescription());
      assertNull(homeLight1.getColor());
      assertFalse(homeLight1.isNameVisible());
      assertNull(homeLight1.getCurrency());
      assertEquals(0.0F, homeLight1.getNameYOffset(), 0.01F);
      assertTrue(homeLight1.isTexturable());
      assertFalse(homeLight1.isDoorOrWindow());
      assertEquals((-694.0F), homeLight1.getGroundElevation(), 0.01F);
      assertTrue(homeLight1.isDeformable());
      assertTrue(homeLight1.isVisible());
      assertEquals((-407.5F), homeLight1.getX(), 0.01F);
      assertEquals((-694.0F), homeLight1.getHeight(), 0.01F);
      assertNull(homeLight1.getShininess());
      assertEquals(0.0F, homeLight1.getNameAngle(), 0.01F);
      assertEquals((-815.0F), homeLight1.getWidth(), 0.01F);
      assertNull(homeLight1.getStaircaseCutOutShape());
      assertTrue(homeLight1.isMovable());
      assertEquals(0.5F, homeLight1.getPower(), 0.01F);
      assertEquals("h&*+\"", homeLight1.getName());
      assertTrue(homeLight1.isResizable());
      assertEquals(0.19634955F, homeLight1.getY(), 0.01F);
      assertEquals("h&*+\"", homeLight1.getCatalogId());
      assertEquals(0.0F, homeLight1.getNameXOffset(), 0.01F);
      assertEquals((-694.0F), homeLight1.getElevation(), 0.01F);
      assertEquals("h&*+\"", homeLight1.getDescription());
      assertEquals(0.0F, homeLight1.getAngle(), 0.01F);
      assertFalse(homeLight1.isModelMirrored());
      assertFalse(homeLight1.isBackFaceShown());
      assertEquals(0.3926991F, homeLight1.getDepth(), 0.01F);
      assertEquals(0.0F, homeLight2.getNameAngle(), 0.01F);
      assertEquals(0.19634955F, homeLight2.getY(), 0.01F);
      assertTrue(homeLight2.isMovable());
      assertEquals("h&*+\"", homeLight2.getName());
      assertEquals(0.0F, homeLight2.getNameXOffset(), 0.01F);
      assertEquals("h&*+\"", homeLight2.getCatalogId());
      assertEquals((-694.0F), homeLight2.getElevation(), 0.01F);
      assertEquals(0.5F, homeLight2.getPower(), 0.01F);
      assertEquals("h&*+\"", homeLight2.getDescription());
      assertEquals(0.3926991F, homeLight2.getDepth(), 0.01F);
      assertEquals(0.0F, homeLight2.getAngle(), 0.01F);
      assertEquals(0.0F, homeLight2.getNameYOffset(), 0.01F);
      assertFalse(homeLight2.isBackFaceShown());
      assertFalse(homeLight2.isModelMirrored());
      assertNull(homeLight2.getColor());
      assertFalse(homeLight2.isNameVisible());
      assertFalse(homeLight2.isDoorOrWindow());
      assertTrue(homeLight2.isTexturable());
      assertNull(homeLight2.getCurrency());
      assertEquals((-407.5F), homeLight2.getX(), 0.01F);
      assertEquals((-694.0F), homeLight2.getHeight(), 0.01F);
      assertEquals((-694.0F), homeLight2.getGroundElevation(), 0.01F);
      assertNull(homeLight2.getShininess());
      assertTrue(homeLight2.isDeformable());
      assertTrue(homeLight2.isResizable());
      assertTrue(homeLight2.isVisible());
      assertEquals((-815.0F), homeLight2.getWidth(), 0.01F);
      assertNull(homeLight2.getStaircaseCutOutShape());
      assertTrue(homeLight3.isDeformable());
      assertNull(homeLight3.getCurrency());
      assertEquals((-407.5F), homeLight3.getX(), 0.01F);
      assertTrue(homeLight3.isVisible());
      assertEquals((-694.0F), homeLight3.getHeight(), 0.01F);
      assertEquals(0.3926991F, homeLight3.getDepth(), 0.01F);
      assertFalse(homeLight3.isNameVisible());
      assertEquals("h&*+\"", homeLight3.getCatalogId());
      assertFalse(homeLight3.isBackFaceShown());
      assertFalse(homeLight3.isModelMirrored());
      assertEquals(0.19634955F, homeLight3.getY(), 0.01F);
      assertNull(homeLight3.getColor());
      assertEquals(0.0F, homeLight3.getNameYOffset(), 0.01F);
      assertEquals((-694.0F), homeLight3.getElevation(), 0.01F);
      assertEquals(0.5F, homeLight3.getPower(), 0.01F);
      assertEquals("h&*+\"", homeLight3.getDescription());
      assertEquals(0.0F, homeLight3.getNameAngle(), 0.01F);
      assertEquals(0.0F, homeLight3.getAngle(), 0.01F);
      assertTrue(homeLight3.isMovable());
      assertEquals("h&*+\"", homeLight3.getName());
      assertFalse(homeLight3.isDoorOrWindow());
      assertTrue(homeLight3.isTexturable());
      assertNull(homeLight3.getShininess());
      assertTrue(homeLight3.isResizable());
      assertEquals((-815.0F), homeLight3.getWidth(), 0.01F);
      assertNull(homeLight3.getStaircaseCutOutShape());
      assertEquals((-694.0F), homeLight3.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight3.getNameXOffset(), 0.01F);
      assertEquals(2, lightSourceArray0.length);
      assertNotSame(homeLight0, homeLight3);
      assertNotSame(homeLight0, homeLight1);
      assertNotSame(homeLight0, homeLight2);
      assertNotSame(homeLight1, homeLight2);
      assertNotSame(homeLight1, homeLight0);
      assertNotSame(homeLight1, homeLight3);
      assertNotSame(homeLight2, homeLight0);
      assertNotSame(homeLight2, homeLight3);
      assertNotSame(homeLight2, homeLight1);
      assertNotSame(homeLight3, homeLight0);
      assertNotSame(homeLight3, homeLight1);
      assertNotSame(homeLight3, homeLight2);
      assertFalse(boolean1);
      
      homeLight2.setModelMirrored(true);
      assertFalse(homeLight0.equals((Object)homeLight3));
      assertFalse(homeLight0.equals((Object)homeLight1));
      assertFalse(homeLight0.equals((Object)homeLight2));
      assertFalse(homeLight1.equals((Object)homeLight2));
      assertFalse(homeLight1.equals((Object)homeLight0));
      assertFalse(homeLight1.equals((Object)homeLight3));
      assertFalse(homeLight2.equals((Object)homeLight0));
      assertFalse(homeLight2.equals((Object)homeLight3));
      assertFalse(homeLight2.equals((Object)homeLight1));
      assertEquals((byte)0, bigDecimal0.byteValue());
      assertEquals((short)0, bigDecimal0.shortValue());
      assertNull(catalogLight0.getColor());
      assertFalse(catalogLight0.isModifiable());
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertFalse(catalogLight0.isDoorOrWindow());
      assertEquals((-694.0F), catalogLight0.getElevation(), 0.01F);
      assertEquals("h&*+\"", catalogLight0.getId());
      assertNull(catalogLight0.getCurrency());
      assertFalse(catalogLight0.isBackFaceShown());
      assertNull(catalogLight0.getInformation());
      assertTrue(catalogLight0.isDeformable());
      assertTrue(catalogLight0.isMovable());
      assertEquals("h&*+\"", catalogLight0.getName());
      assertEquals(0.3926991F, catalogLight0.getDepth(), 0.01F);
      assertEquals((-815.0F), catalogLight0.getWidth(), 0.01F);
      assertEquals("h&*+\"", catalogLight0.getCreator());
      assertEquals("h&*+\"", catalogLight0.getDescription());
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertNull(catalogLight0.getGrade());
      assertTrue(catalogLight0.isTexturable());
      assertTrue(catalogLight0.isProportional());
      assertNull(catalogLight0.getCreationDate());
      assertEquals((-694.0F), catalogLight0.getHeight(), 0.01F);
      assertTrue(catalogLight0.isResizable());
      assertEquals((-694.0F), homeLight0.getElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals(0.19634955F, homeLight0.getY(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertEquals("h&*+\"", homeLight0.getName());
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertTrue(homeLight0.isMovable());
      assertEquals((-815.0F), homeLight0.getWidth(), 0.01F);
      assertEquals("h&*+\"", homeLight0.getCatalogId());
      assertEquals((-694.0F), homeLight0.getHeight(), 0.01F);
      assertNull(homeLight0.getColor());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertNull(homeLight0.getCurrency());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertFalse(homeLight0.isNameVisible());
      assertEquals((-407.5F), homeLight0.getX(), 0.01F);
      assertTrue(homeLight0.isVisible());
      assertTrue(homeLight0.isDeformable());
      assertEquals(0.3926991F, homeLight0.getDepth(), 0.01F);
      assertFalse(homeLight0.isModelMirrored());
      assertFalse(homeLight0.isBackFaceShown());
      assertTrue(homeLight0.isTexturable());
      assertFalse(homeLight0.isDoorOrWindow());
      assertNull(homeLight0.getShininess());
      assertTrue(homeLight0.isResizable());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertEquals((-694.0F), homeLight0.getGroundElevation(), 0.01F);
      assertEquals("h&*+\"", homeLight0.getDescription());
      assertNull(homeLight1.getColor());
      assertFalse(homeLight1.isNameVisible());
      assertNull(homeLight1.getCurrency());
      assertEquals(0.0F, homeLight1.getNameYOffset(), 0.01F);
      assertTrue(homeLight1.isTexturable());
      assertFalse(homeLight1.isDoorOrWindow());
      assertEquals((-694.0F), homeLight1.getGroundElevation(), 0.01F);
      assertTrue(homeLight1.isDeformable());
      assertTrue(homeLight1.isVisible());
      assertEquals((-407.5F), homeLight1.getX(), 0.01F);
      assertEquals((-694.0F), homeLight1.getHeight(), 0.01F);
      assertNull(homeLight1.getShininess());
      assertEquals(0.0F, homeLight1.getNameAngle(), 0.01F);
      assertEquals((-815.0F), homeLight1.getWidth(), 0.01F);
      assertNull(homeLight1.getStaircaseCutOutShape());
      assertTrue(homeLight1.isMovable());
      assertEquals(0.5F, homeLight1.getPower(), 0.01F);
      assertEquals("h&*+\"", homeLight1.getName());
      assertTrue(homeLight1.isResizable());
      assertEquals(0.19634955F, homeLight1.getY(), 0.01F);
      assertEquals("h&*+\"", homeLight1.getCatalogId());
      assertEquals(0.0F, homeLight1.getNameXOffset(), 0.01F);
      assertEquals((-694.0F), homeLight1.getElevation(), 0.01F);
      assertEquals("h&*+\"", homeLight1.getDescription());
      assertEquals(0.0F, homeLight1.getAngle(), 0.01F);
      assertFalse(homeLight1.isModelMirrored());
      assertFalse(homeLight1.isBackFaceShown());
      assertEquals(0.3926991F, homeLight1.getDepth(), 0.01F);
      assertEquals(0.0F, homeLight2.getNameAngle(), 0.01F);
      assertEquals(0.19634955F, homeLight2.getY(), 0.01F);
      assertTrue(homeLight2.isMovable());
      assertEquals("h&*+\"", homeLight2.getName());
      assertEquals(0.0F, homeLight2.getNameXOffset(), 0.01F);
      assertEquals("h&*+\"", homeLight2.getCatalogId());
      assertEquals((-694.0F), homeLight2.getElevation(), 0.01F);
      assertEquals(0.5F, homeLight2.getPower(), 0.01F);
      assertEquals("h&*+\"", homeLight2.getDescription());
      assertEquals(0.3926991F, homeLight2.getDepth(), 0.01F);
      assertEquals(0.0F, homeLight2.getAngle(), 0.01F);
      assertEquals(0.0F, homeLight2.getNameYOffset(), 0.01F);
      assertFalse(homeLight2.isBackFaceShown());
      assertTrue(homeLight2.isModelMirrored());
      assertNull(homeLight2.getColor());
      assertFalse(homeLight2.isNameVisible());
      assertFalse(homeLight2.isDoorOrWindow());
      assertTrue(homeLight2.isTexturable());
      assertNull(homeLight2.getCurrency());
      assertEquals((-407.5F), homeLight2.getX(), 0.01F);
      assertEquals((-694.0F), homeLight2.getHeight(), 0.01F);
      assertEquals((-694.0F), homeLight2.getGroundElevation(), 0.01F);
      assertNull(homeLight2.getShininess());
      assertTrue(homeLight2.isDeformable());
      assertTrue(homeLight2.isResizable());
      assertTrue(homeLight2.isVisible());
      assertEquals((-815.0F), homeLight2.getWidth(), 0.01F);
      assertNull(homeLight2.getStaircaseCutOutShape());
      assertEquals(2, lightSourceArray0.length);
      assertNotSame(homeLight0, homeLight3);
      assertNotSame(homeLight0, homeLight1);
      assertNotSame(homeLight0, homeLight2);
      assertNotSame(homeLight1, homeLight2);
      assertNotSame(homeLight1, homeLight0);
      assertNotSame(homeLight1, homeLight3);
      assertNotSame(homeLight2, homeLight0);
      assertNotSame(homeLight2, homeLight3);
      assertNotSame(homeLight2, homeLight1);
      
      boolean boolean2 = homeLight2.isNameCenterPointAt(0, 127.82604F, 527.5414F);
      assertFalse(homeLight0.equals((Object)homeLight3));
      assertFalse(homeLight0.equals((Object)homeLight1));
      assertFalse(homeLight0.equals((Object)homeLight2));
      assertFalse(homeLight1.equals((Object)homeLight2));
      assertFalse(homeLight1.equals((Object)homeLight0));
      assertFalse(homeLight1.equals((Object)homeLight3));
      assertFalse(homeLight2.equals((Object)homeLight0));
      assertFalse(homeLight2.equals((Object)homeLight3));
      assertFalse(homeLight2.equals((Object)homeLight1));
      assertFalse(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      assertEquals((byte)0, bigDecimal0.byteValue());
      assertEquals((short)0, bigDecimal0.shortValue());
      assertNull(catalogLight0.getColor());
      assertFalse(catalogLight0.isModifiable());
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertFalse(catalogLight0.isDoorOrWindow());
      assertEquals((-694.0F), catalogLight0.getElevation(), 0.01F);
      assertEquals("h&*+\"", catalogLight0.getId());
      assertNull(catalogLight0.getCurrency());
      assertFalse(catalogLight0.isBackFaceShown());
      assertNull(catalogLight0.getInformation());
      assertTrue(catalogLight0.isDeformable());
      assertTrue(catalogLight0.isMovable());
      assertEquals("h&*+\"", catalogLight0.getName());
      assertEquals(0.3926991F, catalogLight0.getDepth(), 0.01F);
      assertEquals((-815.0F), catalogLight0.getWidth(), 0.01F);
      assertEquals("h&*+\"", catalogLight0.getCreator());
      assertEquals("h&*+\"", catalogLight0.getDescription());
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertNull(catalogLight0.getGrade());
      assertTrue(catalogLight0.isTexturable());
      assertTrue(catalogLight0.isProportional());
      assertNull(catalogLight0.getCreationDate());
      assertEquals((-694.0F), catalogLight0.getHeight(), 0.01F);
      assertTrue(catalogLight0.isResizable());
      assertEquals((-694.0F), homeLight0.getElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals(0.19634955F, homeLight0.getY(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertEquals("h&*+\"", homeLight0.getName());
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertTrue(homeLight0.isMovable());
      assertEquals((-815.0F), homeLight0.getWidth(), 0.01F);
      assertEquals("h&*+\"", homeLight0.getCatalogId());
      assertEquals((-694.0F), homeLight0.getHeight(), 0.01F);
      assertNull(homeLight0.getColor());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertNull(homeLight0.getCurrency());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertFalse(homeLight0.isNameVisible());
      assertEquals((-407.5F), homeLight0.getX(), 0.01F);
      assertTrue(homeLight0.isVisible());
      assertTrue(homeLight0.isDeformable());
      assertEquals(0.3926991F, homeLight0.getDepth(), 0.01F);
      assertFalse(homeLight0.isModelMirrored());
      assertFalse(homeLight0.isBackFaceShown());
      assertTrue(homeLight0.isTexturable());
      assertFalse(homeLight0.isDoorOrWindow());
      assertNull(homeLight0.getShininess());
      assertTrue(homeLight0.isResizable());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertEquals((-694.0F), homeLight0.getGroundElevation(), 0.01F);
      assertEquals("h&*+\"", homeLight0.getDescription());
      assertNull(homeLight1.getColor());
      assertFalse(homeLight1.isNameVisible());
      assertNull(homeLight1.getCurrency());
      assertEquals(0.0F, homeLight1.getNameYOffset(), 0.01F);
      assertTrue(homeLight1.isTexturable());
      assertFalse(homeLight1.isDoorOrWindow());
      assertEquals((-694.0F), homeLight1.getGroundElevation(), 0.01F);
      assertTrue(homeLight1.isDeformable());
      assertTrue(homeLight1.isVisible());
      assertEquals((-407.5F), homeLight1.getX(), 0.01F);
      assertEquals((-694.0F), homeLight1.getHeight(), 0.01F);
      assertNull(homeLight1.getShininess());
      assertEquals(0.0F, homeLight1.getNameAngle(), 0.01F);
      assertEquals((-815.0F), homeLight1.getWidth(), 0.01F);
      assertNull(homeLight1.getStaircaseCutOutShape());
      assertTrue(homeLight1.isMovable());
      assertEquals(0.5F, homeLight1.getPower(), 0.01F);
      assertEquals("h&*+\"", homeLight1.getName());
      assertTrue(homeLight1.isResizable());
      assertEquals(0.19634955F, homeLight1.getY(), 0.01F);
      assertEquals("h&*+\"", homeLight1.getCatalogId());
      assertEquals(0.0F, homeLight1.getNameXOffset(), 0.01F);
      assertEquals((-694.0F), homeLight1.getElevation(), 0.01F);
      assertEquals("h&*+\"", homeLight1.getDescription());
      assertEquals(0.0F, homeLight1.getAngle(), 0.01F);
      assertFalse(homeLight1.isModelMirrored());
      assertFalse(homeLight1.isBackFaceShown());
      assertEquals(0.3926991F, homeLight1.getDepth(), 0.01F);
      assertEquals(0.0F, homeLight2.getNameAngle(), 0.01F);
      assertEquals(0.19634955F, homeLight2.getY(), 0.01F);
      assertTrue(homeLight2.isMovable());
      assertEquals("h&*+\"", homeLight2.getName());
      assertEquals(0.0F, homeLight2.getNameXOffset(), 0.01F);
      assertEquals("h&*+\"", homeLight2.getCatalogId());
      assertEquals((-694.0F), homeLight2.getElevation(), 0.01F);
      assertEquals(0.5F, homeLight2.getPower(), 0.01F);
      assertEquals("h&*+\"", homeLight2.getDescription());
      assertEquals(0.3926991F, homeLight2.getDepth(), 0.01F);
      assertEquals(0.0F, homeLight2.getAngle(), 0.01F);
      assertEquals(0.0F, homeLight2.getNameYOffset(), 0.01F);
      assertFalse(homeLight2.isBackFaceShown());
      assertTrue(homeLight2.isModelMirrored());
      assertNull(homeLight2.getColor());
      assertFalse(homeLight2.isNameVisible());
      assertFalse(homeLight2.isDoorOrWindow());
      assertTrue(homeLight2.isTexturable());
      assertNull(homeLight2.getCurrency());
      assertEquals((-407.5F), homeLight2.getX(), 0.01F);
      assertEquals((-694.0F), homeLight2.getHeight(), 0.01F);
      assertEquals((-694.0F), homeLight2.getGroundElevation(), 0.01F);
      assertNull(homeLight2.getShininess());
      assertTrue(homeLight2.isDeformable());
      assertTrue(homeLight2.isResizable());
      assertTrue(homeLight2.isVisible());
      assertEquals((-815.0F), homeLight2.getWidth(), 0.01F);
      assertNull(homeLight2.getStaircaseCutOutShape());
      assertEquals(2, lightSourceArray0.length);
      assertNotSame(homeLight0, homeLight3);
      assertNotSame(homeLight0, homeLight1);
      assertNotSame(homeLight0, homeLight2);
      assertNotSame(homeLight1, homeLight2);
      assertNotSame(homeLight1, homeLight0);
      assertNotSame(homeLight1, homeLight3);
      assertNotSame(homeLight2, homeLight0);
      assertNotSame(homeLight2, homeLight3);
      assertNotSame(homeLight2, homeLight1);
      assertTrue(boolean2);
      
      TextStyle textStyle0 = new TextStyle((-3239.72F));
      assertFalse(textStyle0.isBold());
      assertFalse(textStyle0.isItalic());
      assertEquals((-3239.72F), textStyle0.getFontSize(), 0.01F);
      assertNotNull(textStyle0);
      
      homeLight0.setNameStyle(textStyle0);
      assertFalse(homeLight0.equals((Object)homeLight3));
      assertFalse(homeLight0.equals((Object)homeLight1));
      assertFalse(homeLight0.equals((Object)homeLight2));
      assertEquals((byte)0, bigDecimal0.byteValue());
      assertEquals((short)0, bigDecimal0.shortValue());
      assertNull(catalogLight0.getColor());
      assertFalse(catalogLight0.isModifiable());
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertFalse(catalogLight0.isDoorOrWindow());
      assertEquals((-694.0F), catalogLight0.getElevation(), 0.01F);
      assertEquals("h&*+\"", catalogLight0.getId());
      assertNull(catalogLight0.getCurrency());
      assertFalse(catalogLight0.isBackFaceShown());
      assertNull(catalogLight0.getInformation());
      assertTrue(catalogLight0.isDeformable());
      assertTrue(catalogLight0.isMovable());
      assertEquals("h&*+\"", catalogLight0.getName());
      assertEquals(0.3926991F, catalogLight0.getDepth(), 0.01F);
      assertEquals((-815.0F), catalogLight0.getWidth(), 0.01F);
      assertEquals("h&*+\"", catalogLight0.getCreator());
      assertEquals("h&*+\"", catalogLight0.getDescription());
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertNull(catalogLight0.getGrade());
      assertTrue(catalogLight0.isTexturable());
      assertTrue(catalogLight0.isProportional());
      assertNull(catalogLight0.getCreationDate());
      assertEquals((-694.0F), catalogLight0.getHeight(), 0.01F);
      assertTrue(catalogLight0.isResizable());
      assertEquals((-694.0F), homeLight0.getElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals(0.19634955F, homeLight0.getY(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertEquals("h&*+\"", homeLight0.getName());
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertTrue(homeLight0.isMovable());
      assertEquals((-815.0F), homeLight0.getWidth(), 0.01F);
      assertEquals("h&*+\"", homeLight0.getCatalogId());
      assertEquals((-694.0F), homeLight0.getHeight(), 0.01F);
      assertNull(homeLight0.getColor());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertNull(homeLight0.getCurrency());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertFalse(homeLight0.isNameVisible());
      assertEquals((-407.5F), homeLight0.getX(), 0.01F);
      assertTrue(homeLight0.isVisible());
      assertTrue(homeLight0.isDeformable());
      assertEquals(0.3926991F, homeLight0.getDepth(), 0.01F);
      assertFalse(homeLight0.isModelMirrored());
      assertFalse(homeLight0.isBackFaceShown());
      assertTrue(homeLight0.isTexturable());
      assertFalse(homeLight0.isDoorOrWindow());
      assertNull(homeLight0.getShininess());
      assertTrue(homeLight0.isResizable());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertEquals((-694.0F), homeLight0.getGroundElevation(), 0.01F);
      assertEquals("h&*+\"", homeLight0.getDescription());
      assertFalse(textStyle0.isBold());
      assertFalse(textStyle0.isItalic());
      assertEquals((-3239.72F), textStyle0.getFontSize(), 0.01F);
      assertEquals(2, lightSourceArray0.length);
      assertNotSame(homeLight0, homeLight3);
      assertNotSame(homeLight0, homeLight1);
      assertNotSame(homeLight0, homeLight2);
      
      float float0 = homeLight0.getWidth();
      assertFalse(homeLight0.equals((Object)homeLight3));
      assertFalse(homeLight0.equals((Object)homeLight1));
      assertFalse(homeLight0.equals((Object)homeLight2));
      assertEquals((byte)0, bigDecimal0.byteValue());
      assertEquals((short)0, bigDecimal0.shortValue());
      assertNull(catalogLight0.getColor());
      assertFalse(catalogLight0.isModifiable());
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertFalse(catalogLight0.isDoorOrWindow());
      assertEquals((-694.0F), catalogLight0.getElevation(), 0.01F);
      assertEquals("h&*+\"", catalogLight0.getId());
      assertNull(catalogLight0.getCurrency());
      assertFalse(catalogLight0.isBackFaceShown());
      assertNull(catalogLight0.getInformation());
      assertTrue(catalogLight0.isDeformable());
      assertTrue(catalogLight0.isMovable());
      assertEquals("h&*+\"", catalogLight0.getName());
      assertEquals(0.3926991F, catalogLight0.getDepth(), 0.01F);
      assertEquals((-815.0F), catalogLight0.getWidth(), 0.01F);
      assertEquals("h&*+\"", catalogLight0.getCreator());
      assertEquals("h&*+\"", catalogLight0.getDescription());
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertNull(catalogLight0.getGrade());
      assertTrue(catalogLight0.isTexturable());
      assertTrue(catalogLight0.isProportional());
      assertNull(catalogLight0.getCreationDate());
      assertEquals((-694.0F), catalogLight0.getHeight(), 0.01F);
      assertTrue(catalogLight0.isResizable());
      assertEquals((-694.0F), homeLight0.getElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals(0.19634955F, homeLight0.getY(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertEquals("h&*+\"", homeLight0.getName());
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertTrue(homeLight0.isMovable());
      assertEquals((-815.0F), homeLight0.getWidth(), 0.01F);
      assertEquals("h&*+\"", homeLight0.getCatalogId());
      assertEquals((-694.0F), homeLight0.getHeight(), 0.01F);
      assertNull(homeLight0.getColor());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertNull(homeLight0.getCurrency());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertFalse(homeLight0.isNameVisible());
      assertEquals((-407.5F), homeLight0.getX(), 0.01F);
      assertTrue(homeLight0.isVisible());
      assertTrue(homeLight0.isDeformable());
      assertEquals(0.3926991F, homeLight0.getDepth(), 0.01F);
      assertFalse(homeLight0.isModelMirrored());
      assertFalse(homeLight0.isBackFaceShown());
      assertTrue(homeLight0.isTexturable());
      assertFalse(homeLight0.isDoorOrWindow());
      assertNull(homeLight0.getShininess());
      assertTrue(homeLight0.isResizable());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertEquals((-694.0F), homeLight0.getGroundElevation(), 0.01F);
      assertEquals("h&*+\"", homeLight0.getDescription());
      assertEquals(2, lightSourceArray0.length);
      assertNotSame(homeLight0, homeLight3);
      assertNotSame(homeLight0, homeLight1);
      assertNotSame(homeLight0, homeLight2);
      assertEquals((-815.0F), float0, 0.01F);
      
      homeLight3.setMovable(true);
      assertFalse(homeLight0.equals((Object)homeLight3));
      assertFalse(homeLight0.equals((Object)homeLight1));
      assertFalse(homeLight0.equals((Object)homeLight2));
      assertFalse(homeLight1.equals((Object)homeLight2));
      assertFalse(homeLight1.equals((Object)homeLight0));
      assertFalse(homeLight1.equals((Object)homeLight3));
      assertFalse(homeLight2.equals((Object)homeLight0));
      assertFalse(homeLight2.equals((Object)homeLight3));
      assertFalse(homeLight2.equals((Object)homeLight1));
      assertFalse(homeLight3.equals((Object)homeLight0));
      assertFalse(homeLight3.equals((Object)homeLight1));
      assertFalse(homeLight3.equals((Object)homeLight2));
      assertEquals((byte)0, bigDecimal0.byteValue());
      assertEquals((short)0, bigDecimal0.shortValue());
      assertNull(catalogLight0.getColor());
      assertFalse(catalogLight0.isModifiable());
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertFalse(catalogLight0.isDoorOrWindow());
      assertEquals((-694.0F), catalogLight0.getElevation(), 0.01F);
      assertEquals("h&*+\"", catalogLight0.getId());
      assertNull(catalogLight0.getCurrency());
      assertFalse(catalogLight0.isBackFaceShown());
      assertNull(catalogLight0.getInformation());
      assertTrue(catalogLight0.isDeformable());
      assertTrue(catalogLight0.isMovable());
      assertEquals("h&*+\"", catalogLight0.getName());
      assertEquals(0.3926991F, catalogLight0.getDepth(), 0.01F);
      assertEquals((-815.0F), catalogLight0.getWidth(), 0.01F);
      assertEquals("h&*+\"", catalogLight0.getCreator());
      assertEquals("h&*+\"", catalogLight0.getDescription());
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertNull(catalogLight0.getGrade());
      assertTrue(catalogLight0.isTexturable());
      assertTrue(catalogLight0.isProportional());
      assertNull(catalogLight0.getCreationDate());
      assertEquals((-694.0F), catalogLight0.getHeight(), 0.01F);
      assertTrue(catalogLight0.isResizable());
      assertEquals((-694.0F), homeLight0.getElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals(0.19634955F, homeLight0.getY(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertEquals("h&*+\"", homeLight0.getName());
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertTrue(homeLight0.isMovable());
      assertEquals((-815.0F), homeLight0.getWidth(), 0.01F);
      assertEquals("h&*+\"", homeLight0.getCatalogId());
      assertEquals((-694.0F), homeLight0.getHeight(), 0.01F);
      assertNull(homeLight0.getColor());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertNull(homeLight0.getCurrency());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertFalse(homeLight0.isNameVisible());
      assertEquals((-407.5F), homeLight0.getX(), 0.01F);
      assertTrue(homeLight0.isVisible());
      assertTrue(homeLight0.isDeformable());
      assertEquals(0.3926991F, homeLight0.getDepth(), 0.01F);
      assertFalse(homeLight0.isModelMirrored());
      assertFalse(homeLight0.isBackFaceShown());
      assertTrue(homeLight0.isTexturable());
      assertFalse(homeLight0.isDoorOrWindow());
      assertNull(homeLight0.getShininess());
      assertTrue(homeLight0.isResizable());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertEquals((-694.0F), homeLight0.getGroundElevation(), 0.01F);
      assertEquals("h&*+\"", homeLight0.getDescription());
      assertNull(homeLight1.getColor());
      assertFalse(homeLight1.isNameVisible());
      assertNull(homeLight1.getCurrency());
      assertEquals(0.0F, homeLight1.getNameYOffset(), 0.01F);
      assertTrue(homeLight1.isTexturable());
      assertFalse(homeLight1.isDoorOrWindow());
      assertEquals((-694.0F), homeLight1.getGroundElevation(), 0.01F);
      assertTrue(homeLight1.isDeformable());
      assertTrue(homeLight1.isVisible());
      assertEquals((-407.5F), homeLight1.getX(), 0.01F);
      assertEquals((-694.0F), homeLight1.getHeight(), 0.01F);
      assertNull(homeLight1.getShininess());
      assertEquals(0.0F, homeLight1.getNameAngle(), 0.01F);
      assertEquals((-815.0F), homeLight1.getWidth(), 0.01F);
      assertNull(homeLight1.getStaircaseCutOutShape());
      assertTrue(homeLight1.isMovable());
      assertEquals(0.5F, homeLight1.getPower(), 0.01F);
      assertEquals("h&*+\"", homeLight1.getName());
      assertTrue(homeLight1.isResizable());
      assertEquals(0.19634955F, homeLight1.getY(), 0.01F);
      assertEquals("h&*+\"", homeLight1.getCatalogId());
      assertEquals(0.0F, homeLight1.getNameXOffset(), 0.01F);
      assertEquals((-694.0F), homeLight1.getElevation(), 0.01F);
      assertEquals("h&*+\"", homeLight1.getDescription());
      assertEquals(0.0F, homeLight1.getAngle(), 0.01F);
      assertFalse(homeLight1.isModelMirrored());
      assertFalse(homeLight1.isBackFaceShown());
      assertEquals(0.3926991F, homeLight1.getDepth(), 0.01F);
      assertEquals(0.0F, homeLight2.getNameAngle(), 0.01F);
      assertEquals(0.19634955F, homeLight2.getY(), 0.01F);
      assertTrue(homeLight2.isMovable());
      assertEquals("h&*+\"", homeLight2.getName());
      assertEquals(0.0F, homeLight2.getNameXOffset(), 0.01F);
      assertEquals("h&*+\"", homeLight2.getCatalogId());
      assertEquals((-694.0F), homeLight2.getElevation(), 0.01F);
      assertEquals(0.5F, homeLight2.getPower(), 0.01F);
      assertEquals("h&*+\"", homeLight2.getDescription());
      assertEquals(0.3926991F, homeLight2.getDepth(), 0.01F);
      assertEquals(0.0F, homeLight2.getAngle(), 0.01F);
      assertEquals(0.0F, homeLight2.getNameYOffset(), 0.01F);
      assertFalse(homeLight2.isBackFaceShown());
      assertTrue(homeLight2.isModelMirrored());
      assertNull(homeLight2.getColor());
      assertFalse(homeLight2.isNameVisible());
      assertFalse(homeLight2.isDoorOrWindow());
      assertTrue(homeLight2.isTexturable());
      assertNull(homeLight2.getCurrency());
      assertEquals((-407.5F), homeLight2.getX(), 0.01F);
      assertEquals((-694.0F), homeLight2.getHeight(), 0.01F);
      assertEquals((-694.0F), homeLight2.getGroundElevation(), 0.01F);
      assertNull(homeLight2.getShininess());
      assertTrue(homeLight2.isDeformable());
      assertTrue(homeLight2.isResizable());
      assertTrue(homeLight2.isVisible());
      assertEquals((-815.0F), homeLight2.getWidth(), 0.01F);
      assertNull(homeLight2.getStaircaseCutOutShape());
      assertTrue(homeLight3.isDeformable());
      assertNull(homeLight3.getCurrency());
      assertEquals((-407.5F), homeLight3.getX(), 0.01F);
      assertTrue(homeLight3.isVisible());
      assertEquals((-694.0F), homeLight3.getHeight(), 0.01F);
      assertEquals(0.3926991F, homeLight3.getDepth(), 0.01F);
      assertFalse(homeLight3.isNameVisible());
      assertEquals("h&*+\"", homeLight3.getCatalogId());
      assertFalse(homeLight3.isBackFaceShown());
      assertFalse(homeLight3.isModelMirrored());
      assertEquals(0.19634955F, homeLight3.getY(), 0.01F);
      assertNull(homeLight3.getColor());
      assertEquals(0.0F, homeLight3.getNameYOffset(), 0.01F);
      assertEquals((-694.0F), homeLight3.getElevation(), 0.01F);
      assertEquals(0.5F, homeLight3.getPower(), 0.01F);
      assertEquals("h&*+\"", homeLight3.getDescription());
      assertEquals(0.0F, homeLight3.getNameAngle(), 0.01F);
      assertEquals(0.0F, homeLight3.getAngle(), 0.01F);
      assertTrue(homeLight3.isMovable());
      assertEquals("h&*+\"", homeLight3.getName());
      assertFalse(homeLight3.isDoorOrWindow());
      assertTrue(homeLight3.isTexturable());
      assertNull(homeLight3.getShininess());
      assertTrue(homeLight3.isResizable());
      assertEquals((-815.0F), homeLight3.getWidth(), 0.01F);
      assertNull(homeLight3.getStaircaseCutOutShape());
      assertEquals((-694.0F), homeLight3.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight3.getNameXOffset(), 0.01F);
      assertEquals(2, lightSourceArray0.length);
      assertNotSame(homeLight0, homeLight3);
      assertNotSame(homeLight0, homeLight1);
      assertNotSame(homeLight0, homeLight2);
      assertNotSame(homeLight1, homeLight2);
      assertNotSame(homeLight1, homeLight0);
      assertNotSame(homeLight1, homeLight3);
      assertNotSame(homeLight2, homeLight0);
      assertNotSame(homeLight2, homeLight3);
      assertNotSame(homeLight2, homeLight1);
      assertNotSame(homeLight3, homeLight0);
      assertNotSame(homeLight3, homeLight1);
      assertNotSame(homeLight3, homeLight2);
      
      homeLight3.setElevation(0);
      assertFalse(homeLight0.equals((Object)homeLight3));
      assertFalse(homeLight0.equals((Object)homeLight1));
      assertFalse(homeLight0.equals((Object)homeLight2));
      assertFalse(homeLight1.equals((Object)homeLight2));
      assertFalse(homeLight1.equals((Object)homeLight0));
      assertFalse(homeLight1.equals((Object)homeLight3));
      assertFalse(homeLight2.equals((Object)homeLight0));
      assertFalse(homeLight2.equals((Object)homeLight3));
      assertFalse(homeLight2.equals((Object)homeLight1));
      assertFalse(homeLight3.equals((Object)homeLight0));
      assertFalse(homeLight3.equals((Object)homeLight1));
      assertFalse(homeLight3.equals((Object)homeLight2));
      assertEquals((byte)0, bigDecimal0.byteValue());
      assertEquals((short)0, bigDecimal0.shortValue());
      assertNull(catalogLight0.getColor());
      assertFalse(catalogLight0.isModifiable());
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertFalse(catalogLight0.isDoorOrWindow());
      assertEquals((-694.0F), catalogLight0.getElevation(), 0.01F);
      assertEquals("h&*+\"", catalogLight0.getId());
      assertNull(catalogLight0.getCurrency());
      assertFalse(catalogLight0.isBackFaceShown());
      assertNull(catalogLight0.getInformation());
      assertTrue(catalogLight0.isDeformable());
      assertTrue(catalogLight0.isMovable());
      assertEquals("h&*+\"", catalogLight0.getName());
      assertEquals(0.3926991F, catalogLight0.getDepth(), 0.01F);
      assertEquals((-815.0F), catalogLight0.getWidth(), 0.01F);
      assertEquals("h&*+\"", catalogLight0.getCreator());
      assertEquals("h&*+\"", catalogLight0.getDescription());
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertNull(catalogLight0.getGrade());
      assertTrue(catalogLight0.isTexturable());
      assertTrue(catalogLight0.isProportional());
      assertNull(catalogLight0.getCreationDate());
      assertEquals((-694.0F), catalogLight0.getHeight(), 0.01F);
      assertTrue(catalogLight0.isResizable());
      assertEquals((-694.0F), homeLight0.getElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals(0.19634955F, homeLight0.getY(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertEquals("h&*+\"", homeLight0.getName());
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertTrue(homeLight0.isMovable());
      assertEquals((-815.0F), homeLight0.getWidth(), 0.01F);
      assertEquals("h&*+\"", homeLight0.getCatalogId());
      assertEquals((-694.0F), homeLight0.getHeight(), 0.01F);
      assertNull(homeLight0.getColor());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertNull(homeLight0.getCurrency());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertFalse(homeLight0.isNameVisible());
      assertEquals((-407.5F), homeLight0.getX(), 0.01F);
      assertTrue(homeLight0.isVisible());
      assertTrue(homeLight0.isDeformable());
      assertEquals(0.3926991F, homeLight0.getDepth(), 0.01F);
      assertFalse(homeLight0.isModelMirrored());
      assertFalse(homeLight0.isBackFaceShown());
      assertTrue(homeLight0.isTexturable());
      assertFalse(homeLight0.isDoorOrWindow());
      assertNull(homeLight0.getShininess());
      assertTrue(homeLight0.isResizable());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertEquals((-694.0F), homeLight0.getGroundElevation(), 0.01F);
      assertEquals("h&*+\"", homeLight0.getDescription());
      assertNull(homeLight1.getColor());
      assertFalse(homeLight1.isNameVisible());
      assertNull(homeLight1.getCurrency());
      assertEquals(0.0F, homeLight1.getNameYOffset(), 0.01F);
      assertTrue(homeLight1.isTexturable());
      assertFalse(homeLight1.isDoorOrWindow());
      assertEquals((-694.0F), homeLight1.getGroundElevation(), 0.01F);
      assertTrue(homeLight1.isDeformable());
      assertTrue(homeLight1.isVisible());
      assertEquals((-407.5F), homeLight1.getX(), 0.01F);
      assertEquals((-694.0F), homeLight1.getHeight(), 0.01F);
      assertNull(homeLight1.getShininess());
      assertEquals(0.0F, homeLight1.getNameAngle(), 0.01F);
      assertEquals((-815.0F), homeLight1.getWidth(), 0.01F);
      assertNull(homeLight1.getStaircaseCutOutShape());
      assertTrue(homeLight1.isMovable());
      assertEquals(0.5F, homeLight1.getPower(), 0.01F);
      assertEquals("h&*+\"", homeLight1.getName());
      assertTrue(homeLight1.isResizable());
      assertEquals(0.19634955F, homeLight1.getY(), 0.01F);
      assertEquals("h&*+\"", homeLight1.getCatalogId());
      assertEquals(0.0F, homeLight1.getNameXOffset(), 0.01F);
      assertEquals((-694.0F), homeLight1.getElevation(), 0.01F);
      assertEquals("h&*+\"", homeLight1.getDescription());
      assertEquals(0.0F, homeLight1.getAngle(), 0.01F);
      assertFalse(homeLight1.isModelMirrored());
      assertFalse(homeLight1.isBackFaceShown());
      assertEquals(0.3926991F, homeLight1.getDepth(), 0.01F);
      assertEquals(0.0F, homeLight2.getNameAngle(), 0.01F);
      assertEquals(0.19634955F, homeLight2.getY(), 0.01F);
      assertTrue(homeLight2.isMovable());
      assertEquals("h&*+\"", homeLight2.getName());
      assertEquals(0.0F, homeLight2.getNameXOffset(), 0.01F);
      assertEquals("h&*+\"", homeLight2.getCatalogId());
      assertEquals((-694.0F), homeLight2.getElevation(), 0.01F);
      assertEquals(0.5F, homeLight2.getPower(), 0.01F);
      assertEquals("h&*+\"", homeLight2.getDescription());
      assertEquals(0.3926991F, homeLight2.getDepth(), 0.01F);
      assertEquals(0.0F, homeLight2.getAngle(), 0.01F);
      assertEquals(0.0F, homeLight2.getNameYOffset(), 0.01F);
      assertFalse(homeLight2.isBackFaceShown());
      assertTrue(homeLight2.isModelMirrored());
      assertNull(homeLight2.getColor());
      assertFalse(homeLight2.isNameVisible());
      assertFalse(homeLight2.isDoorOrWindow());
      assertTrue(homeLight2.isTexturable());
      assertNull(homeLight2.getCurrency());
      assertEquals((-407.5F), homeLight2.getX(), 0.01F);
      assertEquals((-694.0F), homeLight2.getHeight(), 0.01F);
      assertEquals((-694.0F), homeLight2.getGroundElevation(), 0.01F);
      assertNull(homeLight2.getShininess());
      assertTrue(homeLight2.isDeformable());
      assertTrue(homeLight2.isResizable());
      assertTrue(homeLight2.isVisible());
      assertEquals((-815.0F), homeLight2.getWidth(), 0.01F);
      assertNull(homeLight2.getStaircaseCutOutShape());
      assertTrue(homeLight3.isDeformable());
      assertNull(homeLight3.getCurrency());
      assertEquals((-407.5F), homeLight3.getX(), 0.01F);
      assertTrue(homeLight3.isVisible());
      assertEquals((-694.0F), homeLight3.getHeight(), 0.01F);
      assertEquals(0.3926991F, homeLight3.getDepth(), 0.01F);
      assertFalse(homeLight3.isNameVisible());
      assertEquals("h&*+\"", homeLight3.getCatalogId());
      assertFalse(homeLight3.isBackFaceShown());
      assertFalse(homeLight3.isModelMirrored());
      assertEquals(0.19634955F, homeLight3.getY(), 0.01F);
      assertNull(homeLight3.getColor());
      assertEquals(0.0F, homeLight3.getNameYOffset(), 0.01F);
      assertEquals(0.5F, homeLight3.getPower(), 0.01F);
      assertEquals(0.0F, homeLight3.getElevation(), 0.01F);
      assertEquals("h&*+\"", homeLight3.getDescription());
      assertEquals(0.0F, homeLight3.getNameAngle(), 0.01F);
      assertEquals(0.0F, homeLight3.getAngle(), 0.01F);
      assertTrue(homeLight3.isMovable());
      assertEquals("h&*+\"", homeLight3.getName());
      assertFalse(homeLight3.isDoorOrWindow());
      assertTrue(homeLight3.isTexturable());
      assertNull(homeLight3.getShininess());
      assertTrue(homeLight3.isResizable());
      assertEquals((-815.0F), homeLight3.getWidth(), 0.01F);
      assertNull(homeLight3.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight3.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight3.getNameXOffset(), 0.01F);
      assertEquals(2, lightSourceArray0.length);
      assertNotSame(homeLight0, homeLight3);
      assertNotSame(homeLight0, homeLight1);
      assertNotSame(homeLight0, homeLight2);
      assertNotSame(homeLight1, homeLight2);
      assertNotSame(homeLight1, homeLight0);
      assertNotSame(homeLight1, homeLight3);
      assertNotSame(homeLight2, homeLight0);
      assertNotSame(homeLight2, homeLight3);
      assertNotSame(homeLight2, homeLight1);
      assertNotSame(homeLight3, homeLight0);
      assertNotSame(homeLight3, homeLight1);
      assertNotSame(homeLight3, homeLight2);
      
      HomeLight homeLight4 = (HomeLight)homeLight2.clone();
      assertFalse(homeLight4.equals((Object)homeLight3));
      assertFalse(homeLight4.equals((Object)homeLight1));
      assertFalse(homeLight4.equals((Object)homeLight0));
      assertFalse(homeLight4.equals((Object)homeLight2));
      assertFalse(homeLight0.equals((Object)homeLight3));
      assertFalse(homeLight0.equals((Object)homeLight1));
      assertFalse(homeLight0.equals((Object)homeLight2));
      assertFalse(homeLight1.equals((Object)homeLight2));
      assertFalse(homeLight1.equals((Object)homeLight0));
      assertFalse(homeLight1.equals((Object)homeLight3));
      assertFalse(homeLight2.equals((Object)homeLight0));
      assertFalse(homeLight2.equals((Object)homeLight3));
      assertFalse(homeLight2.equals((Object)homeLight1));
      assertEquals("h&*+\"", homeLight4.getCatalogId());
      assertNull(homeLight4.getShininess());
      assertTrue(homeLight4.isMovable());
      assertEquals((-815.0F), homeLight4.getWidth(), 0.01F);
      assertEquals((-694.0F), homeLight4.getHeight(), 0.01F);
      assertEquals(0.5F, homeLight4.getPower(), 0.01F);
      assertEquals("h&*+\"", homeLight4.getName());
      assertEquals((-407.5F), homeLight4.getX(), 0.01F);
      assertEquals(0.0F, homeLight4.getNameYOffset(), 0.01F);
      assertNull(homeLight4.getCurrency());
      assertEquals(0.3926991F, homeLight4.getDepth(), 0.01F);
      assertEquals(0.19634955F, homeLight4.getY(), 0.01F);
      assertNull(homeLight4.getColor());
      assertTrue(homeLight4.isModelMirrored());
      assertTrue(homeLight4.isTexturable());
      assertFalse(homeLight4.isBackFaceShown());
      assertFalse(homeLight4.isDoorOrWindow());
      assertEquals(0.0F, homeLight4.getAngle(), 0.01F);
      assertFalse(homeLight4.isNameVisible());
      assertEquals((-694.0F), homeLight4.getElevation(), 0.01F);
      assertEquals(0.0F, homeLight4.getNameXOffset(), 0.01F);
      assertTrue(homeLight4.isVisible());
      assertEquals("h&*+\"", homeLight4.getDescription());
      assertEquals(0.0F, homeLight4.getNameAngle(), 0.01F);
      assertNull(homeLight4.getStaircaseCutOutShape());
      assertEquals((-694.0F), homeLight4.getGroundElevation(), 0.01F);
      assertTrue(homeLight4.isResizable());
      assertTrue(homeLight4.isDeformable());
      assertEquals((byte)0, bigDecimal0.byteValue());
      assertEquals((short)0, bigDecimal0.shortValue());
      assertNull(catalogLight0.getColor());
      assertFalse(catalogLight0.isModifiable());
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertFalse(catalogLight0.isDoorOrWindow());
      assertEquals((-694.0F), catalogLight0.getElevation(), 0.01F);
      assertEquals("h&*+\"", catalogLight0.getId());
      assertNull(catalogLight0.getCurrency());
      assertFalse(catalogLight0.isBackFaceShown());
      assertNull(catalogLight0.getInformation());
      assertTrue(catalogLight0.isDeformable());
      assertTrue(catalogLight0.isMovable());
      assertEquals("h&*+\"", catalogLight0.getName());
      assertEquals(0.3926991F, catalogLight0.getDepth(), 0.01F);
      assertEquals((-815.0F), catalogLight0.getWidth(), 0.01F);
      assertEquals("h&*+\"", catalogLight0.getCreator());
      assertEquals("h&*+\"", catalogLight0.getDescription());
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertNull(catalogLight0.getGrade());
      assertTrue(catalogLight0.isTexturable());
      assertTrue(catalogLight0.isProportional());
      assertNull(catalogLight0.getCreationDate());
      assertEquals((-694.0F), catalogLight0.getHeight(), 0.01F);
      assertTrue(catalogLight0.isResizable());
      assertEquals((-694.0F), homeLight0.getElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals(0.19634955F, homeLight0.getY(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertEquals("h&*+\"", homeLight0.getName());
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertTrue(homeLight0.isMovable());
      assertEquals((-815.0F), homeLight0.getWidth(), 0.01F);
      assertEquals("h&*+\"", homeLight0.getCatalogId());
      assertEquals((-694.0F), homeLight0.getHeight(), 0.01F);
      assertNull(homeLight0.getColor());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertNull(homeLight0.getCurrency());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertFalse(homeLight0.isNameVisible());
      assertEquals((-407.5F), homeLight0.getX(), 0.01F);
      assertTrue(homeLight0.isVisible());
      assertTrue(homeLight0.isDeformable());
      assertEquals(0.3926991F, homeLight0.getDepth(), 0.01F);
      assertFalse(homeLight0.isModelMirrored());
      assertFalse(homeLight0.isBackFaceShown());
      assertTrue(homeLight0.isTexturable());
      assertFalse(homeLight0.isDoorOrWindow());
      assertNull(homeLight0.getShininess());
      assertTrue(homeLight0.isResizable());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertEquals((-694.0F), homeLight0.getGroundElevation(), 0.01F);
      assertEquals("h&*+\"", homeLight0.getDescription());
      assertNull(homeLight1.getColor());
      assertFalse(homeLight1.isNameVisible());
      assertNull(homeLight1.getCurrency());
      assertEquals(0.0F, homeLight1.getNameYOffset(), 0.01F);
      assertTrue(homeLight1.isTexturable());
      assertFalse(homeLight1.isDoorOrWindow());
      assertEquals((-694.0F), homeLight1.getGroundElevation(), 0.01F);
      assertTrue(homeLight1.isDeformable());
      assertTrue(homeLight1.isVisible());
      assertEquals((-407.5F), homeLight1.getX(), 0.01F);
      assertEquals((-694.0F), homeLight1.getHeight(), 0.01F);
      assertNull(homeLight1.getShininess());
      assertEquals(0.0F, homeLight1.getNameAngle(), 0.01F);
      assertEquals((-815.0F), homeLight1.getWidth(), 0.01F);
      assertNull(homeLight1.getStaircaseCutOutShape());
      assertTrue(homeLight1.isMovable());
      assertEquals(0.5F, homeLight1.getPower(), 0.01F);
      assertEquals("h&*+\"", homeLight1.getName());
      assertTrue(homeLight1.isResizable());
      assertEquals(0.19634955F, homeLight1.getY(), 0.01F);
      assertEquals("h&*+\"", homeLight1.getCatalogId());
      assertEquals(0.0F, homeLight1.getNameXOffset(), 0.01F);
      assertEquals((-694.0F), homeLight1.getElevation(), 0.01F);
      assertEquals("h&*+\"", homeLight1.getDescription());
      assertEquals(0.0F, homeLight1.getAngle(), 0.01F);
      assertFalse(homeLight1.isModelMirrored());
      assertFalse(homeLight1.isBackFaceShown());
      assertEquals(0.3926991F, homeLight1.getDepth(), 0.01F);
      assertEquals(0.0F, homeLight2.getNameAngle(), 0.01F);
      assertEquals(0.19634955F, homeLight2.getY(), 0.01F);
      assertTrue(homeLight2.isMovable());
      assertEquals("h&*+\"", homeLight2.getName());
      assertEquals(0.0F, homeLight2.getNameXOffset(), 0.01F);
      assertEquals("h&*+\"", homeLight2.getCatalogId());
      assertEquals((-694.0F), homeLight2.getElevation(), 0.01F);
      assertEquals(0.5F, homeLight2.getPower(), 0.01F);
      assertEquals("h&*+\"", homeLight2.getDescription());
      assertEquals(0.3926991F, homeLight2.getDepth(), 0.01F);
      assertEquals(0.0F, homeLight2.getAngle(), 0.01F);
      assertEquals(0.0F, homeLight2.getNameYOffset(), 0.01F);
      assertFalse(homeLight2.isBackFaceShown());
      assertTrue(homeLight2.isModelMirrored());
      assertNull(homeLight2.getColor());
      assertFalse(homeLight2.isNameVisible());
      assertFalse(homeLight2.isDoorOrWindow());
      assertTrue(homeLight2.isTexturable());
      assertNull(homeLight2.getCurrency());
      assertEquals((-407.5F), homeLight2.getX(), 0.01F);
      assertEquals((-694.0F), homeLight2.getHeight(), 0.01F);
      assertEquals((-694.0F), homeLight2.getGroundElevation(), 0.01F);
      assertNull(homeLight2.getShininess());
      assertTrue(homeLight2.isDeformable());
      assertTrue(homeLight2.isResizable());
      assertTrue(homeLight2.isVisible());
      assertEquals((-815.0F), homeLight2.getWidth(), 0.01F);
      assertNull(homeLight2.getStaircaseCutOutShape());
      assertEquals(2, lightSourceArray0.length);
      assertNotSame(homeLight4, homeLight3);
      assertNotSame(homeLight4, homeLight1);
      assertNotSame(homeLight4, homeLight0);
      assertNotSame(homeLight4, homeLight2);
      assertNotSame(homeLight0, homeLight3);
      assertNotSame(homeLight0, homeLight4);
      assertNotSame(homeLight0, homeLight1);
      assertNotSame(homeLight0, homeLight2);
      assertNotSame(homeLight1, homeLight2);
      assertNotSame(homeLight1, homeLight4);
      assertNotSame(homeLight1, homeLight0);
      assertNotSame(homeLight1, homeLight3);
      assertNotSame(homeLight2, homeLight4);
      assertNotSame(homeLight2, homeLight0);
      assertNotSame(homeLight2, homeLight3);
      assertNotSame(homeLight2, homeLight1);
      assertNotNull(homeLight4);
      
      float float1 = homeLight3.getElevation();
      assertNotEquals(float1, float0, 0.01F);
      assertFalse(homeLight0.equals((Object)homeLight3));
      assertFalse(homeLight0.equals((Object)homeLight4));
      assertFalse(homeLight0.equals((Object)homeLight1));
      assertFalse(homeLight0.equals((Object)homeLight2));
      assertFalse(homeLight1.equals((Object)homeLight2));
      assertFalse(homeLight1.equals((Object)homeLight4));
      assertFalse(homeLight1.equals((Object)homeLight0));
      assertFalse(homeLight1.equals((Object)homeLight3));
      assertFalse(homeLight2.equals((Object)homeLight4));
      assertFalse(homeLight2.equals((Object)homeLight0));
      assertFalse(homeLight2.equals((Object)homeLight3));
      assertFalse(homeLight2.equals((Object)homeLight1));
      assertFalse(homeLight3.equals((Object)homeLight0));
      assertFalse(homeLight3.equals((Object)homeLight1));
      assertFalse(homeLight3.equals((Object)homeLight2));
      assertFalse(homeLight3.equals((Object)homeLight4));
      assertEquals((byte)0, bigDecimal0.byteValue());
      assertEquals((short)0, bigDecimal0.shortValue());
      assertNull(catalogLight0.getColor());
      assertFalse(catalogLight0.isModifiable());
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertFalse(catalogLight0.isDoorOrWindow());
      assertEquals((-694.0F), catalogLight0.getElevation(), 0.01F);
      assertEquals("h&*+\"", catalogLight0.getId());
      assertNull(catalogLight0.getCurrency());
      assertFalse(catalogLight0.isBackFaceShown());
      assertNull(catalogLight0.getInformation());
      assertTrue(catalogLight0.isDeformable());
      assertTrue(catalogLight0.isMovable());
      assertEquals("h&*+\"", catalogLight0.getName());
      assertEquals(0.3926991F, catalogLight0.getDepth(), 0.01F);
      assertEquals((-815.0F), catalogLight0.getWidth(), 0.01F);
      assertEquals("h&*+\"", catalogLight0.getCreator());
      assertEquals("h&*+\"", catalogLight0.getDescription());
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertNull(catalogLight0.getGrade());
      assertTrue(catalogLight0.isTexturable());
      assertTrue(catalogLight0.isProportional());
      assertNull(catalogLight0.getCreationDate());
      assertEquals((-694.0F), catalogLight0.getHeight(), 0.01F);
      assertTrue(catalogLight0.isResizable());
      assertEquals((-694.0F), homeLight0.getElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals(0.19634955F, homeLight0.getY(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertEquals("h&*+\"", homeLight0.getName());
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertTrue(homeLight0.isMovable());
      assertEquals((-815.0F), homeLight0.getWidth(), 0.01F);
      assertEquals("h&*+\"", homeLight0.getCatalogId());
      assertEquals((-694.0F), homeLight0.getHeight(), 0.01F);
      assertNull(homeLight0.getColor());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertNull(homeLight0.getCurrency());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertFalse(homeLight0.isNameVisible());
      assertEquals((-407.5F), homeLight0.getX(), 0.01F);
      assertTrue(homeLight0.isVisible());
      assertTrue(homeLight0.isDeformable());
      assertEquals(0.3926991F, homeLight0.getDepth(), 0.01F);
      assertFalse(homeLight0.isModelMirrored());
      assertFalse(homeLight0.isBackFaceShown());
      assertTrue(homeLight0.isTexturable());
      assertFalse(homeLight0.isDoorOrWindow());
      assertNull(homeLight0.getShininess());
      assertTrue(homeLight0.isResizable());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertEquals((-694.0F), homeLight0.getGroundElevation(), 0.01F);
      assertEquals("h&*+\"", homeLight0.getDescription());
      assertNull(homeLight1.getColor());
      assertFalse(homeLight1.isNameVisible());
      assertNull(homeLight1.getCurrency());
      assertEquals(0.0F, homeLight1.getNameYOffset(), 0.01F);
      assertTrue(homeLight1.isTexturable());
      assertFalse(homeLight1.isDoorOrWindow());
      assertEquals((-694.0F), homeLight1.getGroundElevation(), 0.01F);
      assertTrue(homeLight1.isDeformable());
      assertTrue(homeLight1.isVisible());
      assertEquals((-407.5F), homeLight1.getX(), 0.01F);
      assertEquals((-694.0F), homeLight1.getHeight(), 0.01F);
      assertNull(homeLight1.getShininess());
      assertEquals(0.0F, homeLight1.getNameAngle(), 0.01F);
      assertEquals((-815.0F), homeLight1.getWidth(), 0.01F);
      assertNull(homeLight1.getStaircaseCutOutShape());
      assertTrue(homeLight1.isMovable());
      assertEquals(0.5F, homeLight1.getPower(), 0.01F);
      assertEquals("h&*+\"", homeLight1.getName());
      assertTrue(homeLight1.isResizable());
      assertEquals(0.19634955F, homeLight1.getY(), 0.01F);
      assertEquals("h&*+\"", homeLight1.getCatalogId());
      assertEquals(0.0F, homeLight1.getNameXOffset(), 0.01F);
      assertEquals((-694.0F), homeLight1.getElevation(), 0.01F);
      assertEquals("h&*+\"", homeLight1.getDescription());
      assertEquals(0.0F, homeLight1.getAngle(), 0.01F);
      assertFalse(homeLight1.isModelMirrored());
      assertFalse(homeLight1.isBackFaceShown());
      assertEquals(0.3926991F, homeLight1.getDepth(), 0.01F);
      assertEquals(0.0F, homeLight2.getNameAngle(), 0.01F);
      assertEquals(0.19634955F, homeLight2.getY(), 0.01F);
      assertTrue(homeLight2.isMovable());
      assertEquals("h&*+\"", homeLight2.getName());
      assertEquals(0.0F, homeLight2.getNameXOffset(), 0.01F);
      assertEquals("h&*+\"", homeLight2.getCatalogId());
      assertEquals((-694.0F), homeLight2.getElevation(), 0.01F);
      assertEquals(0.5F, homeLight2.getPower(), 0.01F);
      assertEquals("h&*+\"", homeLight2.getDescription());
      assertEquals(0.3926991F, homeLight2.getDepth(), 0.01F);
      assertEquals(0.0F, homeLight2.getAngle(), 0.01F);
      assertEquals(0.0F, homeLight2.getNameYOffset(), 0.01F);
      assertFalse(homeLight2.isBackFaceShown());
      assertTrue(homeLight2.isModelMirrored());
      assertNull(homeLight2.getColor());
      assertFalse(homeLight2.isNameVisible());
      assertFalse(homeLight2.isDoorOrWindow());
      assertTrue(homeLight2.isTexturable());
      assertNull(homeLight2.getCurrency());
      assertEquals((-407.5F), homeLight2.getX(), 0.01F);
      assertEquals((-694.0F), homeLight2.getHeight(), 0.01F);
      assertEquals((-694.0F), homeLight2.getGroundElevation(), 0.01F);
      assertNull(homeLight2.getShininess());
      assertTrue(homeLight2.isDeformable());
      assertTrue(homeLight2.isResizable());
      assertTrue(homeLight2.isVisible());
      assertEquals((-815.0F), homeLight2.getWidth(), 0.01F);
      assertNull(homeLight2.getStaircaseCutOutShape());
      assertTrue(homeLight3.isDeformable());
      assertNull(homeLight3.getCurrency());
      assertEquals((-407.5F), homeLight3.getX(), 0.01F);
      assertTrue(homeLight3.isVisible());
      assertEquals((-694.0F), homeLight3.getHeight(), 0.01F);
      assertEquals(0.3926991F, homeLight3.getDepth(), 0.01F);
      assertFalse(homeLight3.isNameVisible());
      assertEquals("h&*+\"", homeLight3.getCatalogId());
      assertFalse(homeLight3.isBackFaceShown());
      assertFalse(homeLight3.isModelMirrored());
      assertEquals(0.19634955F, homeLight3.getY(), 0.01F);
      assertNull(homeLight3.getColor());
      assertEquals(0.0F, homeLight3.getNameYOffset(), 0.01F);
      assertEquals(0.5F, homeLight3.getPower(), 0.01F);
      assertEquals(0.0F, homeLight3.getElevation(), 0.01F);
      assertEquals("h&*+\"", homeLight3.getDescription());
      assertEquals(0.0F, homeLight3.getNameAngle(), 0.01F);
      assertEquals(0.0F, homeLight3.getAngle(), 0.01F);
      assertTrue(homeLight3.isMovable());
      assertEquals("h&*+\"", homeLight3.getName());
      assertFalse(homeLight3.isDoorOrWindow());
      assertTrue(homeLight3.isTexturable());
      assertNull(homeLight3.getShininess());
      assertTrue(homeLight3.isResizable());
      assertEquals((-815.0F), homeLight3.getWidth(), 0.01F);
      assertNull(homeLight3.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight3.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight3.getNameXOffset(), 0.01F);
      assertEquals(2, lightSourceArray0.length);
      assertNotSame(homeLight0, homeLight3);
      assertNotSame(homeLight0, homeLight4);
      assertNotSame(homeLight0, homeLight1);
      assertNotSame(homeLight0, homeLight2);
      assertNotSame(homeLight1, homeLight2);
      assertNotSame(homeLight1, homeLight4);
      assertNotSame(homeLight1, homeLight0);
      assertNotSame(homeLight1, homeLight3);
      assertNotSame(homeLight2, homeLight4);
      assertNotSame(homeLight2, homeLight0);
      assertNotSame(homeLight2, homeLight3);
      assertNotSame(homeLight2, homeLight1);
      assertNotSame(homeLight3, homeLight0);
      assertNotSame(homeLight3, homeLight1);
      assertNotSame(homeLight3, homeLight2);
      assertNotSame(homeLight3, homeLight4);
      assertEquals(0.0F, float1, 0.01F);
  }

  @Test(timeout = 4000)
  public void test240()  throws Throwable  {
      LightSource[] lightSourceArray0 = new LightSource[2];
      LightSource lightSource0 = new LightSource(0.0F, (-5047.285F), 0.0F, 114);
      assertEquals(114, lightSource0.getColor());
      assertEquals((-5047.285F), lightSource0.getY(), 0.01F);
      assertNull(lightSource0.getDiameter());
      assertEquals(0.0F, lightSource0.getX(), 0.01F);
      assertEquals(0.0F, lightSource0.getZ(), 0.01F);
      assertNotNull(lightSource0);
      
      boolean boolean0 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      LightSource lightSource1 = new LightSource(2965.994F, 0.0F, 1707.7522F, 114);
      assertFalse(lightSource1.equals((Object)lightSource0));
      assertEquals(2965.994F, lightSource1.getX(), 0.01F);
      assertEquals(114, lightSource1.getColor());
      assertEquals(1707.7522F, lightSource1.getZ(), 0.01F);
      assertEquals(0.0F, lightSource1.getY(), 0.01F);
      assertNull(lightSource1.getDiameter());
      assertNotNull(lightSource1);
      
      BigDecimal bigDecimal0 = BigDecimal.TEN;
      assertEquals((short)10, bigDecimal0.shortValue());
      assertEquals((byte)10, bigDecimal0.byteValue());
      assertNotNull(bigDecimal0);
      
      CatalogLight catalogLight0 = new CatalogLight("*K;S$p", "com.eteks.sweethome3d.model.TextStyle", "", (Content) null, (Content) null, 0, 2.0F, (-1061.0F), (-5047.285F), false, lightSourceArray0, (float[][]) null, "VALUE_ADDED_TAX", true, bigDecimal0, bigDecimal0);
      assertEquals((short)10, bigDecimal0.shortValue());
      assertEquals((byte)10, bigDecimal0.byteValue());
      assertNull(catalogLight0.getInformation());
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertTrue(catalogLight0.isDeformable());
      assertTrue(catalogLight0.isResizable());
      assertEquals("*K;S$p", catalogLight0.getId());
      assertNull(catalogLight0.getGrade());
      assertEquals("com.eteks.sweethome3d.model.TextStyle", catalogLight0.getName());
      assertTrue(catalogLight0.isProportional());
      assertNull(catalogLight0.getCurrency());
      assertEquals("", catalogLight0.getDescription());
      assertNull(catalogLight0.getCreationDate());
      assertFalse(catalogLight0.isModifiable());
      assertEquals(0.0F, catalogLight0.getWidth(), 0.01F);
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertEquals(2.0F, catalogLight0.getDepth(), 0.01F);
      assertEquals((-5047.285F), catalogLight0.getElevation(), 0.01F);
      assertEquals((-1061.0F), catalogLight0.getHeight(), 0.01F);
      assertTrue(catalogLight0.isTexturable());
      assertFalse(catalogLight0.isDoorOrWindow());
      assertFalse(catalogLight0.isMovable());
      assertEquals("VALUE_ADDED_TAX", catalogLight0.getCreator());
      assertFalse(catalogLight0.isBackFaceShown());
      assertNull(catalogLight0.getColor());
      assertEquals(2, lightSourceArray0.length);
      assertNotNull(catalogLight0);
      
      HomeLight homeLight0 = new HomeLight(catalogLight0);
      assertEquals((short)10, bigDecimal0.shortValue());
      assertEquals((byte)10, bigDecimal0.byteValue());
      assertNull(catalogLight0.getInformation());
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertTrue(catalogLight0.isDeformable());
      assertTrue(catalogLight0.isResizable());
      assertEquals("*K;S$p", catalogLight0.getId());
      assertNull(catalogLight0.getGrade());
      assertEquals("com.eteks.sweethome3d.model.TextStyle", catalogLight0.getName());
      assertTrue(catalogLight0.isProportional());
      assertNull(catalogLight0.getCurrency());
      assertEquals("", catalogLight0.getDescription());
      assertNull(catalogLight0.getCreationDate());
      assertFalse(catalogLight0.isModifiable());
      assertEquals(0.0F, catalogLight0.getWidth(), 0.01F);
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertEquals(2.0F, catalogLight0.getDepth(), 0.01F);
      assertEquals((-5047.285F), catalogLight0.getElevation(), 0.01F);
      assertEquals((-1061.0F), catalogLight0.getHeight(), 0.01F);
      assertTrue(catalogLight0.isTexturable());
      assertFalse(catalogLight0.isDoorOrWindow());
      assertFalse(catalogLight0.isMovable());
      assertEquals("VALUE_ADDED_TAX", catalogLight0.getCreator());
      assertFalse(catalogLight0.isBackFaceShown());
      assertNull(catalogLight0.getColor());
      assertEquals((-5047.285F), homeLight0.getGroundElevation(), 0.01F);
      assertFalse(homeLight0.isMovable());
      assertNull(homeLight0.getCurrency());
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals(1.0F, homeLight0.getY(), 0.01F);
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertTrue(homeLight0.isDeformable());
      assertEquals("com.eteks.sweethome3d.model.TextStyle", homeLight0.getName());
      assertEquals((-1061.0F), homeLight0.getHeight(), 0.01F);
      assertEquals(2.0F, homeLight0.getDepth(), 0.01F);
      assertTrue(homeLight0.isResizable());
      assertNull(homeLight0.getShininess());
      assertTrue(homeLight0.isVisible());
      assertEquals("*K;S$p", homeLight0.getCatalogId());
      assertEquals("", homeLight0.getDescription());
      assertFalse(homeLight0.isDoorOrWindow());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertTrue(homeLight0.isTexturable());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertNull(homeLight0.getColor());
      assertFalse(homeLight0.isNameVisible());
      assertFalse(homeLight0.isBackFaceShown());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertEquals((-5047.285F), homeLight0.getElevation(), 0.01F);
      assertFalse(homeLight0.isModelMirrored());
      assertEquals(2, lightSourceArray0.length);
      assertNotNull(homeLight0);
      
      HomeLight homeLight1 = homeLight0.clone();
      assertFalse(homeLight1.equals((Object)homeLight0));
      assertEquals((short)10, bigDecimal0.shortValue());
      assertEquals((byte)10, bigDecimal0.byteValue());
      assertNull(catalogLight0.getInformation());
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertTrue(catalogLight0.isDeformable());
      assertTrue(catalogLight0.isResizable());
      assertEquals("*K;S$p", catalogLight0.getId());
      assertNull(catalogLight0.getGrade());
      assertEquals("com.eteks.sweethome3d.model.TextStyle", catalogLight0.getName());
      assertTrue(catalogLight0.isProportional());
      assertNull(catalogLight0.getCurrency());
      assertEquals("", catalogLight0.getDescription());
      assertNull(catalogLight0.getCreationDate());
      assertFalse(catalogLight0.isModifiable());
      assertEquals(0.0F, catalogLight0.getWidth(), 0.01F);
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertEquals(2.0F, catalogLight0.getDepth(), 0.01F);
      assertEquals((-5047.285F), catalogLight0.getElevation(), 0.01F);
      assertEquals((-1061.0F), catalogLight0.getHeight(), 0.01F);
      assertTrue(catalogLight0.isTexturable());
      assertFalse(catalogLight0.isDoorOrWindow());
      assertFalse(catalogLight0.isMovable());
      assertEquals("VALUE_ADDED_TAX", catalogLight0.getCreator());
      assertFalse(catalogLight0.isBackFaceShown());
      assertNull(catalogLight0.getColor());
      assertEquals((-5047.285F), homeLight0.getGroundElevation(), 0.01F);
      assertFalse(homeLight0.isMovable());
      assertNull(homeLight0.getCurrency());
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals(1.0F, homeLight0.getY(), 0.01F);
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertTrue(homeLight0.isDeformable());
      assertEquals("com.eteks.sweethome3d.model.TextStyle", homeLight0.getName());
      assertEquals((-1061.0F), homeLight0.getHeight(), 0.01F);
      assertEquals(2.0F, homeLight0.getDepth(), 0.01F);
      assertTrue(homeLight0.isResizable());
      assertNull(homeLight0.getShininess());
      assertTrue(homeLight0.isVisible());
      assertEquals("*K;S$p", homeLight0.getCatalogId());
      assertEquals("", homeLight0.getDescription());
      assertFalse(homeLight0.isDoorOrWindow());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertTrue(homeLight0.isTexturable());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertNull(homeLight0.getColor());
      assertFalse(homeLight0.isNameVisible());
      assertFalse(homeLight0.isBackFaceShown());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertEquals((-5047.285F), homeLight0.getElevation(), 0.01F);
      assertFalse(homeLight0.isModelMirrored());
      assertNull(homeLight1.getColor());
      assertFalse(homeLight1.isBackFaceShown());
      assertEquals(1.0F, homeLight1.getY(), 0.01F);
      assertEquals(0.0F, homeLight1.getNameYOffset(), 0.01F);
      assertEquals((-5047.285F), homeLight1.getElevation(), 0.01F);
      assertEquals(0.0F, homeLight1.getX(), 0.01F);
      assertTrue(homeLight1.isDeformable());
      assertTrue(homeLight1.isVisible());
      assertFalse(homeLight1.isModelMirrored());
      assertEquals((-1061.0F), homeLight1.getHeight(), 0.01F);
      assertEquals("*K;S$p", homeLight1.getCatalogId());
      assertEquals((-5047.285F), homeLight1.getGroundElevation(), 0.01F);
      assertTrue(homeLight1.isTexturable());
      assertFalse(homeLight1.isDoorOrWindow());
      assertFalse(homeLight1.isNameVisible());
      assertEquals("", homeLight1.getDescription());
      assertEquals(0.0F, homeLight1.getAngle(), 0.01F);
      assertEquals(0.0F, homeLight1.getWidth(), 0.01F);
      assertNull(homeLight1.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight1.getNameAngle(), 0.01F);
      assertEquals(0.0F, homeLight1.getNameXOffset(), 0.01F);
      assertEquals("com.eteks.sweethome3d.model.TextStyle", homeLight1.getName());
      assertEquals(2.0F, homeLight1.getDepth(), 0.01F);
      assertNull(homeLight1.getShininess());
      assertTrue(homeLight1.isResizable());
      assertNull(homeLight1.getCurrency());
      assertEquals(0.5F, homeLight1.getPower(), 0.01F);
      assertFalse(homeLight1.isMovable());
      assertEquals(2, lightSourceArray0.length);
      assertNotSame(homeLight0, homeLight1);
      assertNotSame(homeLight1, homeLight0);
      assertNotNull(homeLight1);
      
      HomeLight homeLight2 = (HomeLight)homeLight0.clone();
      assertFalse(homeLight0.equals((Object)homeLight1));
      assertFalse(homeLight2.equals((Object)homeLight0));
      assertFalse(homeLight2.equals((Object)homeLight1));
      assertEquals((short)10, bigDecimal0.shortValue());
      assertEquals((byte)10, bigDecimal0.byteValue());
      assertNull(catalogLight0.getInformation());
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertTrue(catalogLight0.isDeformable());
      assertTrue(catalogLight0.isResizable());
      assertEquals("*K;S$p", catalogLight0.getId());
      assertNull(catalogLight0.getGrade());
      assertEquals("com.eteks.sweethome3d.model.TextStyle", catalogLight0.getName());
      assertTrue(catalogLight0.isProportional());
      assertNull(catalogLight0.getCurrency());
      assertEquals("", catalogLight0.getDescription());
      assertNull(catalogLight0.getCreationDate());
      assertFalse(catalogLight0.isModifiable());
      assertEquals(0.0F, catalogLight0.getWidth(), 0.01F);
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertEquals(2.0F, catalogLight0.getDepth(), 0.01F);
      assertEquals((-5047.285F), catalogLight0.getElevation(), 0.01F);
      assertEquals((-1061.0F), catalogLight0.getHeight(), 0.01F);
      assertTrue(catalogLight0.isTexturable());
      assertFalse(catalogLight0.isDoorOrWindow());
      assertFalse(catalogLight0.isMovable());
      assertEquals("VALUE_ADDED_TAX", catalogLight0.getCreator());
      assertFalse(catalogLight0.isBackFaceShown());
      assertNull(catalogLight0.getColor());
      assertEquals((-5047.285F), homeLight0.getGroundElevation(), 0.01F);
      assertFalse(homeLight0.isMovable());
      assertNull(homeLight0.getCurrency());
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals(1.0F, homeLight0.getY(), 0.01F);
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertTrue(homeLight0.isDeformable());
      assertEquals("com.eteks.sweethome3d.model.TextStyle", homeLight0.getName());
      assertEquals((-1061.0F), homeLight0.getHeight(), 0.01F);
      assertEquals(2.0F, homeLight0.getDepth(), 0.01F);
      assertTrue(homeLight0.isResizable());
      assertNull(homeLight0.getShininess());
      assertTrue(homeLight0.isVisible());
      assertEquals("*K;S$p", homeLight0.getCatalogId());
      assertEquals("", homeLight0.getDescription());
      assertFalse(homeLight0.isDoorOrWindow());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertTrue(homeLight0.isTexturable());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertNull(homeLight0.getColor());
      assertFalse(homeLight0.isNameVisible());
      assertFalse(homeLight0.isBackFaceShown());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertEquals((-5047.285F), homeLight0.getElevation(), 0.01F);
      assertFalse(homeLight0.isModelMirrored());
      assertNull(homeLight2.getShininess());
      assertFalse(homeLight2.isMovable());
      assertTrue(homeLight2.isResizable());
      assertEquals(0.0F, homeLight2.getNameAngle(), 0.01F);
      assertNull(homeLight2.getStaircaseCutOutShape());
      assertEquals((-5047.285F), homeLight2.getGroundElevation(), 0.01F);
      assertEquals(2.0F, homeLight2.getDepth(), 0.01F);
      assertEquals("com.eteks.sweethome3d.model.TextStyle", homeLight2.getName());
      assertEquals("", homeLight2.getDescription());
      assertEquals(0.0F, homeLight2.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeLight2.getWidth(), 0.01F);
      assertTrue(homeLight2.isVisible());
      assertFalse(homeLight2.isNameVisible());
      assertTrue(homeLight2.isDeformable());
      assertEquals("*K;S$p", homeLight2.getCatalogId());
      assertEquals(0.0F, homeLight2.getAngle(), 0.01F);
      assertFalse(homeLight2.isDoorOrWindow());
      assertEquals(1.0F, homeLight2.getY(), 0.01F);
      assertEquals(0.0F, homeLight2.getX(), 0.01F);
      assertTrue(homeLight2.isTexturable());
      assertNull(homeLight2.getColor());
      assertEquals((-1061.0F), homeLight2.getHeight(), 0.01F);
      assertFalse(homeLight2.isModelMirrored());
      assertFalse(homeLight2.isBackFaceShown());
      assertEquals((-5047.285F), homeLight2.getElevation(), 0.01F);
      assertEquals(0.0F, homeLight2.getNameYOffset(), 0.01F);
      assertNull(homeLight2.getCurrency());
      assertEquals(0.5F, homeLight2.getPower(), 0.01F);
      assertEquals(2, lightSourceArray0.length);
      assertNotSame(homeLight0, homeLight1);
      assertNotSame(homeLight0, homeLight2);
      assertNotSame(homeLight2, homeLight0);
      assertNotSame(homeLight2, homeLight1);
      assertNotNull(homeLight2);
      
      homeLight2.setModelMirrored(true);
      assertFalse(homeLight0.equals((Object)homeLight1));
      assertFalse(homeLight0.equals((Object)homeLight2));
      assertFalse(homeLight2.equals((Object)homeLight0));
      assertFalse(homeLight2.equals((Object)homeLight1));
      assertEquals((short)10, bigDecimal0.shortValue());
      assertEquals((byte)10, bigDecimal0.byteValue());
      assertNull(catalogLight0.getInformation());
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertTrue(catalogLight0.isDeformable());
      assertTrue(catalogLight0.isResizable());
      assertEquals("*K;S$p", catalogLight0.getId());
      assertNull(catalogLight0.getGrade());
      assertEquals("com.eteks.sweethome3d.model.TextStyle", catalogLight0.getName());
      assertTrue(catalogLight0.isProportional());
      assertNull(catalogLight0.getCurrency());
      assertEquals("", catalogLight0.getDescription());
      assertNull(catalogLight0.getCreationDate());
      assertFalse(catalogLight0.isModifiable());
      assertEquals(0.0F, catalogLight0.getWidth(), 0.01F);
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertEquals(2.0F, catalogLight0.getDepth(), 0.01F);
      assertEquals((-5047.285F), catalogLight0.getElevation(), 0.01F);
      assertEquals((-1061.0F), catalogLight0.getHeight(), 0.01F);
      assertTrue(catalogLight0.isTexturable());
      assertFalse(catalogLight0.isDoorOrWindow());
      assertFalse(catalogLight0.isMovable());
      assertEquals("VALUE_ADDED_TAX", catalogLight0.getCreator());
      assertFalse(catalogLight0.isBackFaceShown());
      assertNull(catalogLight0.getColor());
      assertEquals((-5047.285F), homeLight0.getGroundElevation(), 0.01F);
      assertFalse(homeLight0.isMovable());
      assertNull(homeLight0.getCurrency());
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals(1.0F, homeLight0.getY(), 0.01F);
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertTrue(homeLight0.isDeformable());
      assertEquals("com.eteks.sweethome3d.model.TextStyle", homeLight0.getName());
      assertEquals((-1061.0F), homeLight0.getHeight(), 0.01F);
      assertEquals(2.0F, homeLight0.getDepth(), 0.01F);
      assertTrue(homeLight0.isResizable());
      assertNull(homeLight0.getShininess());
      assertTrue(homeLight0.isVisible());
      assertEquals("*K;S$p", homeLight0.getCatalogId());
      assertEquals("", homeLight0.getDescription());
      assertFalse(homeLight0.isDoorOrWindow());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertTrue(homeLight0.isTexturable());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertNull(homeLight0.getColor());
      assertFalse(homeLight0.isNameVisible());
      assertFalse(homeLight0.isBackFaceShown());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertEquals((-5047.285F), homeLight0.getElevation(), 0.01F);
      assertFalse(homeLight0.isModelMirrored());
      assertNull(homeLight2.getShininess());
      assertFalse(homeLight2.isMovable());
      assertTrue(homeLight2.isResizable());
      assertEquals(0.0F, homeLight2.getNameAngle(), 0.01F);
      assertNull(homeLight2.getStaircaseCutOutShape());
      assertEquals((-5047.285F), homeLight2.getGroundElevation(), 0.01F);
      assertEquals(2.0F, homeLight2.getDepth(), 0.01F);
      assertEquals("com.eteks.sweethome3d.model.TextStyle", homeLight2.getName());
      assertEquals("", homeLight2.getDescription());
      assertEquals(0.0F, homeLight2.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeLight2.getWidth(), 0.01F);
      assertTrue(homeLight2.isVisible());
      assertFalse(homeLight2.isNameVisible());
      assertTrue(homeLight2.isDeformable());
      assertEquals("*K;S$p", homeLight2.getCatalogId());
      assertEquals(0.0F, homeLight2.getAngle(), 0.01F);
      assertFalse(homeLight2.isDoorOrWindow());
      assertEquals(1.0F, homeLight2.getY(), 0.01F);
      assertEquals(0.0F, homeLight2.getX(), 0.01F);
      assertTrue(homeLight2.isTexturable());
      assertNull(homeLight2.getColor());
      assertEquals((-1061.0F), homeLight2.getHeight(), 0.01F);
      assertFalse(homeLight2.isBackFaceShown());
      assertEquals((-5047.285F), homeLight2.getElevation(), 0.01F);
      assertEquals(0.0F, homeLight2.getNameYOffset(), 0.01F);
      assertNull(homeLight2.getCurrency());
      assertTrue(homeLight2.isModelMirrored());
      assertEquals(0.5F, homeLight2.getPower(), 0.01F);
      assertEquals(2, lightSourceArray0.length);
      assertNotSame(homeLight0, homeLight1);
      assertNotSame(homeLight0, homeLight2);
      assertNotSame(homeLight2, homeLight0);
      assertNotSame(homeLight2, homeLight1);
      
      boolean boolean1 = homeLight0.isNameCenterPointAt(1707.7522F, (-694.0F), 0.0F);
      assertFalse(homeLight0.equals((Object)homeLight1));
      assertFalse(homeLight0.equals((Object)homeLight2));
      assertTrue(boolean1 == boolean0);
      assertEquals((short)10, bigDecimal0.shortValue());
      assertEquals((byte)10, bigDecimal0.byteValue());
      assertNull(catalogLight0.getInformation());
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertTrue(catalogLight0.isDeformable());
      assertTrue(catalogLight0.isResizable());
      assertEquals("*K;S$p", catalogLight0.getId());
      assertNull(catalogLight0.getGrade());
      assertEquals("com.eteks.sweethome3d.model.TextStyle", catalogLight0.getName());
      assertTrue(catalogLight0.isProportional());
      assertNull(catalogLight0.getCurrency());
      assertEquals("", catalogLight0.getDescription());
      assertNull(catalogLight0.getCreationDate());
      assertFalse(catalogLight0.isModifiable());
      assertEquals(0.0F, catalogLight0.getWidth(), 0.01F);
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertEquals(2.0F, catalogLight0.getDepth(), 0.01F);
      assertEquals((-5047.285F), catalogLight0.getElevation(), 0.01F);
      assertEquals((-1061.0F), catalogLight0.getHeight(), 0.01F);
      assertTrue(catalogLight0.isTexturable());
      assertFalse(catalogLight0.isDoorOrWindow());
      assertFalse(catalogLight0.isMovable());
      assertEquals("VALUE_ADDED_TAX", catalogLight0.getCreator());
      assertFalse(catalogLight0.isBackFaceShown());
      assertNull(catalogLight0.getColor());
      assertEquals((-5047.285F), homeLight0.getGroundElevation(), 0.01F);
      assertFalse(homeLight0.isMovable());
      assertNull(homeLight0.getCurrency());
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals(1.0F, homeLight0.getY(), 0.01F);
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertTrue(homeLight0.isDeformable());
      assertEquals("com.eteks.sweethome3d.model.TextStyle", homeLight0.getName());
      assertEquals((-1061.0F), homeLight0.getHeight(), 0.01F);
      assertEquals(2.0F, homeLight0.getDepth(), 0.01F);
      assertTrue(homeLight0.isResizable());
      assertNull(homeLight0.getShininess());
      assertTrue(homeLight0.isVisible());
      assertEquals("*K;S$p", homeLight0.getCatalogId());
      assertEquals("", homeLight0.getDescription());
      assertFalse(homeLight0.isDoorOrWindow());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertTrue(homeLight0.isTexturable());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertNull(homeLight0.getColor());
      assertFalse(homeLight0.isNameVisible());
      assertFalse(homeLight0.isBackFaceShown());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertEquals((-5047.285F), homeLight0.getElevation(), 0.01F);
      assertFalse(homeLight0.isModelMirrored());
      assertEquals(2, lightSourceArray0.length);
      assertNotSame(homeLight0, homeLight1);
      assertNotSame(homeLight0, homeLight2);
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test241()  throws Throwable  {
      LightSource[] lightSourceArray0 = new LightSource[1];
      BigDecimal bigDecimal0 = BigDecimal.ONE;
      assertEquals((short)1, bigDecimal0.shortValue());
      assertEquals((byte)1, bigDecimal0.byteValue());
      assertNotNull(bigDecimal0);
      
      BigDecimal bigDecimal1 = new BigDecimal((-1949));
      assertFalse(bigDecimal1.equals((Object)bigDecimal0));
      assertEquals((byte)99, bigDecimal1.byteValue());
      assertEquals((short) (-1949), bigDecimal1.shortValue());
      assertNotNull(bigDecimal1);
      
      BigDecimal bigDecimal2 = bigDecimal0.multiply(bigDecimal1);
      assertFalse(bigDecimal0.equals((Object)bigDecimal1));
      assertFalse(bigDecimal1.equals((Object)bigDecimal0));
      assertFalse(bigDecimal2.equals((Object)bigDecimal0));
      assertTrue(bigDecimal2.equals((Object)bigDecimal1));
      assertEquals((short)1, bigDecimal0.shortValue());
      assertEquals((byte)1, bigDecimal0.byteValue());
      assertEquals((byte)99, bigDecimal1.byteValue());
      assertEquals((short) (-1949), bigDecimal1.shortValue());
      assertEquals((byte)99, bigDecimal2.byteValue());
      assertEquals((short) (-1949), bigDecimal2.shortValue());
      assertNotSame(bigDecimal0, bigDecimal1);
      assertNotSame(bigDecimal0, bigDecimal2);
      assertNotSame(bigDecimal1, bigDecimal2);
      assertNotSame(bigDecimal1, bigDecimal0);
      assertNotSame(bigDecimal2, bigDecimal0);
      assertNotSame(bigDecimal2, bigDecimal1);
      assertNotNull(bigDecimal2);
      
      CatalogLight catalogLight0 = new CatalogLight("h&i*+\"", "h&i*+\"", "h&i*+\"", (Content) null, (Content) null, (-2265.2297F), (-2265.2297F), (-2265.2297F), (-2265.2297F), false, lightSourceArray0, (float[][]) null, "h&i*+\"", false, bigDecimal0, bigDecimal0);
      assertFalse(bigDecimal0.equals((Object)bigDecimal1));
      assertFalse(bigDecimal0.equals((Object)bigDecimal2));
      assertEquals((short)1, bigDecimal0.shortValue());
      assertEquals((byte)1, bigDecimal0.byteValue());
      assertEquals((-2265.2297F), catalogLight0.getDepth(), 0.01F);
      assertNull(catalogLight0.getColor());
      assertFalse(catalogLight0.isModifiable());
      assertNull(catalogLight0.getCreationDate());
      assertEquals("h&i*+\"", catalogLight0.getCreator());
      assertEquals("h&i*+\"", catalogLight0.getDescription());
      assertNull(catalogLight0.getCurrency());
      assertEquals((-2265.2297F), catalogLight0.getWidth(), 0.01F);
      assertFalse(catalogLight0.isBackFaceShown());
      assertFalse(catalogLight0.isMovable());
      assertEquals((-2265.2297F), catalogLight0.getElevation(), 0.01F);
      assertNull(catalogLight0.getInformation());
      assertTrue(catalogLight0.isDeformable());
      assertEquals("h&i*+\"", catalogLight0.getId());
      assertNull(catalogLight0.getGrade());
      assertEquals((-2265.2297F), catalogLight0.getHeight(), 0.01F);
      assertFalse(catalogLight0.isDoorOrWindow());
      assertTrue(catalogLight0.isTexturable());
      assertTrue(catalogLight0.isProportional());
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertEquals("h&i*+\"", catalogLight0.getName());
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertFalse(catalogLight0.isResizable());
      assertEquals(1, lightSourceArray0.length);
      assertNotNull(catalogLight0);
      
      HomeLight homeLight0 = new HomeLight(catalogLight0);
      assertFalse(bigDecimal0.equals((Object)bigDecimal1));
      assertFalse(bigDecimal0.equals((Object)bigDecimal2));
      assertEquals((short)1, bigDecimal0.shortValue());
      assertEquals((byte)1, bigDecimal0.byteValue());
      assertEquals((-2265.2297F), catalogLight0.getDepth(), 0.01F);
      assertNull(catalogLight0.getColor());
      assertFalse(catalogLight0.isModifiable());
      assertNull(catalogLight0.getCreationDate());
      assertEquals("h&i*+\"", catalogLight0.getCreator());
      assertEquals("h&i*+\"", catalogLight0.getDescription());
      assertNull(catalogLight0.getCurrency());
      assertEquals((-2265.2297F), catalogLight0.getWidth(), 0.01F);
      assertFalse(catalogLight0.isBackFaceShown());
      assertFalse(catalogLight0.isMovable());
      assertEquals((-2265.2297F), catalogLight0.getElevation(), 0.01F);
      assertNull(catalogLight0.getInformation());
      assertTrue(catalogLight0.isDeformable());
      assertEquals("h&i*+\"", catalogLight0.getId());
      assertNull(catalogLight0.getGrade());
      assertEquals((-2265.2297F), catalogLight0.getHeight(), 0.01F);
      assertFalse(catalogLight0.isDoorOrWindow());
      assertTrue(catalogLight0.isTexturable());
      assertTrue(catalogLight0.isProportional());
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertEquals("h&i*+\"", catalogLight0.getName());
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertFalse(catalogLight0.isResizable());
      assertEquals((-2265.2297F), homeLight0.getHeight(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals((-2265.2297F), homeLight0.getWidth(), 0.01F);
      assertEquals("h&i*+\"", homeLight0.getCatalogId());
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertFalse(homeLight0.isMovable());
      assertTrue(homeLight0.isDeformable());
      assertTrue(homeLight0.isVisible());
      assertNull(homeLight0.getShininess());
      assertFalse(homeLight0.isResizable());
      assertFalse(homeLight0.isNameVisible());
      assertNull(homeLight0.getColor());
      assertEquals((-2265.2297F), homeLight0.getGroundElevation(), 0.01F);
      assertNull(homeLight0.getCurrency());
      assertFalse(homeLight0.isDoorOrWindow());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertEquals((-2265.2297F), homeLight0.getElevation(), 0.01F);
      assertEquals((-2265.2297F), homeLight0.getDepth(), 0.01F);
      assertEquals("h&i*+\"", homeLight0.getName());
      assertTrue(homeLight0.isTexturable());
      assertEquals("h&i*+\"", homeLight0.getDescription());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertEquals((-1132.6149F), homeLight0.getY(), 0.01F);
      assertFalse(homeLight0.isModelMirrored());
      assertEquals((-1132.6149F), homeLight0.getX(), 0.01F);
      assertFalse(homeLight0.isBackFaceShown());
      assertEquals(1, lightSourceArray0.length);
      assertNotNull(homeLight0);
      
      homeLight0.setColor((Integer) null);
      assertFalse(bigDecimal0.equals((Object)bigDecimal1));
      assertFalse(bigDecimal0.equals((Object)bigDecimal2));
      assertEquals((short)1, bigDecimal0.shortValue());
      assertEquals((byte)1, bigDecimal0.byteValue());
      assertEquals((-2265.2297F), catalogLight0.getDepth(), 0.01F);
      assertNull(catalogLight0.getColor());
      assertFalse(catalogLight0.isModifiable());
      assertNull(catalogLight0.getCreationDate());
      assertEquals("h&i*+\"", catalogLight0.getCreator());
      assertEquals("h&i*+\"", catalogLight0.getDescription());
      assertNull(catalogLight0.getCurrency());
      assertEquals((-2265.2297F), catalogLight0.getWidth(), 0.01F);
      assertFalse(catalogLight0.isBackFaceShown());
      assertFalse(catalogLight0.isMovable());
      assertEquals((-2265.2297F), catalogLight0.getElevation(), 0.01F);
      assertNull(catalogLight0.getInformation());
      assertTrue(catalogLight0.isDeformable());
      assertEquals("h&i*+\"", catalogLight0.getId());
      assertNull(catalogLight0.getGrade());
      assertEquals((-2265.2297F), catalogLight0.getHeight(), 0.01F);
      assertFalse(catalogLight0.isDoorOrWindow());
      assertTrue(catalogLight0.isTexturable());
      assertTrue(catalogLight0.isProportional());
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertEquals("h&i*+\"", catalogLight0.getName());
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertFalse(catalogLight0.isResizable());
      assertEquals((-2265.2297F), homeLight0.getHeight(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals((-2265.2297F), homeLight0.getWidth(), 0.01F);
      assertEquals("h&i*+\"", homeLight0.getCatalogId());
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertFalse(homeLight0.isMovable());
      assertTrue(homeLight0.isDeformable());
      assertTrue(homeLight0.isVisible());
      assertNull(homeLight0.getShininess());
      assertFalse(homeLight0.isResizable());
      assertFalse(homeLight0.isNameVisible());
      assertNull(homeLight0.getColor());
      assertEquals((-2265.2297F), homeLight0.getGroundElevation(), 0.01F);
      assertNull(homeLight0.getCurrency());
      assertFalse(homeLight0.isDoorOrWindow());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertEquals((-2265.2297F), homeLight0.getElevation(), 0.01F);
      assertEquals((-2265.2297F), homeLight0.getDepth(), 0.01F);
      assertEquals("h&i*+\"", homeLight0.getName());
      assertTrue(homeLight0.isTexturable());
      assertEquals("h&i*+\"", homeLight0.getDescription());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertEquals((-1132.6149F), homeLight0.getY(), 0.01F);
      assertFalse(homeLight0.isModelMirrored());
      assertEquals((-1132.6149F), homeLight0.getX(), 0.01F);
      assertFalse(homeLight0.isBackFaceShown());
      assertEquals(1, lightSourceArray0.length);
      assertNotSame(bigDecimal0, bigDecimal1);
      assertNotSame(bigDecimal0, bigDecimal2);
      
      CatalogTexture catalogTexture0 = new CatalogTexture("", (Content) null, (-2265.2297F), (-2265.2297F));
      assertEquals("", catalogTexture0.getName());
      assertFalse(catalogTexture0.isModifiable());
      assertEquals((-2265.2297F), catalogTexture0.getHeight(), 0.01F);
      assertEquals((-2265.2297F), catalogTexture0.getWidth(), 0.01F);
      assertNull(catalogTexture0.getId());
      assertNull(catalogTexture0.getCreator());
      assertNotNull(catalogTexture0);
      
      HomeTexture homeTexture0 = new HomeTexture(catalogTexture0);
      assertEquals("", catalogTexture0.getName());
      assertFalse(catalogTexture0.isModifiable());
      assertEquals((-2265.2297F), catalogTexture0.getHeight(), 0.01F);
      assertEquals((-2265.2297F), catalogTexture0.getWidth(), 0.01F);
      assertNull(catalogTexture0.getId());
      assertNull(catalogTexture0.getCreator());
      assertEquals((-2265.2297F), homeTexture0.getWidth(), 0.01F);
      assertEquals((-2265.2297F), homeTexture0.getHeight(), 0.01F);
      assertEquals("", homeTexture0.getName());
      assertTrue(homeTexture0.isLeftToRightOriented());
      assertNotNull(homeTexture0);
      
      homeLight0.setTexture(homeTexture0);
      assertFalse(bigDecimal0.equals((Object)bigDecimal1));
      assertFalse(bigDecimal0.equals((Object)bigDecimal2));
      assertEquals((short)1, bigDecimal0.shortValue());
      assertEquals((byte)1, bigDecimal0.byteValue());
      assertEquals((-2265.2297F), catalogLight0.getDepth(), 0.01F);
      assertNull(catalogLight0.getColor());
      assertFalse(catalogLight0.isModifiable());
      assertNull(catalogLight0.getCreationDate());
      assertEquals("h&i*+\"", catalogLight0.getCreator());
      assertEquals("h&i*+\"", catalogLight0.getDescription());
      assertNull(catalogLight0.getCurrency());
      assertEquals((-2265.2297F), catalogLight0.getWidth(), 0.01F);
      assertFalse(catalogLight0.isBackFaceShown());
      assertFalse(catalogLight0.isMovable());
      assertEquals((-2265.2297F), catalogLight0.getElevation(), 0.01F);
      assertNull(catalogLight0.getInformation());
      assertTrue(catalogLight0.isDeformable());
      assertEquals("h&i*+\"", catalogLight0.getId());
      assertNull(catalogLight0.getGrade());
      assertEquals((-2265.2297F), catalogLight0.getHeight(), 0.01F);
      assertFalse(catalogLight0.isDoorOrWindow());
      assertTrue(catalogLight0.isTexturable());
      assertTrue(catalogLight0.isProportional());
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertEquals("h&i*+\"", catalogLight0.getName());
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertFalse(catalogLight0.isResizable());
      assertEquals((-2265.2297F), homeLight0.getHeight(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals((-2265.2297F), homeLight0.getWidth(), 0.01F);
      assertEquals("h&i*+\"", homeLight0.getCatalogId());
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertFalse(homeLight0.isMovable());
      assertTrue(homeLight0.isDeformable());
      assertTrue(homeLight0.isVisible());
      assertNull(homeLight0.getShininess());
      assertFalse(homeLight0.isResizable());
      assertFalse(homeLight0.isNameVisible());
      assertNull(homeLight0.getColor());
      assertEquals((-2265.2297F), homeLight0.getGroundElevation(), 0.01F);
      assertNull(homeLight0.getCurrency());
      assertFalse(homeLight0.isDoorOrWindow());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertEquals((-2265.2297F), homeLight0.getElevation(), 0.01F);
      assertEquals((-2265.2297F), homeLight0.getDepth(), 0.01F);
      assertEquals("h&i*+\"", homeLight0.getName());
      assertTrue(homeLight0.isTexturable());
      assertEquals("h&i*+\"", homeLight0.getDescription());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertEquals((-1132.6149F), homeLight0.getY(), 0.01F);
      assertFalse(homeLight0.isModelMirrored());
      assertEquals((-1132.6149F), homeLight0.getX(), 0.01F);
      assertFalse(homeLight0.isBackFaceShown());
      assertEquals("", catalogTexture0.getName());
      assertFalse(catalogTexture0.isModifiable());
      assertEquals((-2265.2297F), catalogTexture0.getHeight(), 0.01F);
      assertEquals((-2265.2297F), catalogTexture0.getWidth(), 0.01F);
      assertNull(catalogTexture0.getId());
      assertNull(catalogTexture0.getCreator());
      assertEquals((-2265.2297F), homeTexture0.getWidth(), 0.01F);
      assertEquals((-2265.2297F), homeTexture0.getHeight(), 0.01F);
      assertEquals("", homeTexture0.getName());
      assertTrue(homeTexture0.isLeftToRightOriented());
      assertEquals(1, lightSourceArray0.length);
      assertNotSame(bigDecimal0, bigDecimal1);
      assertNotSame(bigDecimal0, bigDecimal2);
  }

  @Test(timeout = 4000)
  public void test242()  throws Throwable  {
      LightSource[] lightSourceArray0 = new LightSource[2];
      BigDecimal bigDecimal0 = BigDecimal.ONE;
      assertEquals((byte)1, bigDecimal0.byteValue());
      assertEquals((short)1, bigDecimal0.shortValue());
      assertNotNull(bigDecimal0);
      
      CatalogLight catalogLight0 = new CatalogLight("h&i*+\"", "h&i*+\"", "h&i*+\"", (Content) null, (Content) null, (-2263.3643F), (-2263.3643F), (-2263.3643F), (-2263.3643F), true, lightSourceArray0, (float[][]) null, "h&i*+\"", true, bigDecimal0, bigDecimal0);
      assertEquals((byte)1, bigDecimal0.byteValue());
      assertEquals((short)1, bigDecimal0.shortValue());
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertTrue(catalogLight0.isProportional());
      assertNull(catalogLight0.getColor());
      assertEquals((-2263.3643F), catalogLight0.getDepth(), 0.01F);
      assertEquals((-2263.3643F), catalogLight0.getElevation(), 0.01F);
      assertEquals("h&i*+\"", catalogLight0.getName());
      assertTrue(catalogLight0.isMovable());
      assertTrue(catalogLight0.isTexturable());
      assertFalse(catalogLight0.isDoorOrWindow());
      assertNull(catalogLight0.getGrade());
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertEquals((-2263.3643F), catalogLight0.getWidth(), 0.01F);
      assertFalse(catalogLight0.isBackFaceShown());
      assertTrue(catalogLight0.isDeformable());
      assertEquals("h&i*+\"", catalogLight0.getId());
      assertEquals("h&i*+\"", catalogLight0.getCreator());
      assertEquals("h&i*+\"", catalogLight0.getDescription());
      assertNull(catalogLight0.getInformation());
      assertTrue(catalogLight0.isResizable());
      assertFalse(catalogLight0.isModifiable());
      assertEquals((-2263.3643F), catalogLight0.getHeight(), 0.01F);
      assertNull(catalogLight0.getCreationDate());
      assertNull(catalogLight0.getCurrency());
      assertEquals(2, lightSourceArray0.length);
      assertNotNull(catalogLight0);
      
      HomeLight homeLight0 = new HomeLight(catalogLight0);
      assertEquals((byte)1, bigDecimal0.byteValue());
      assertEquals((short)1, bigDecimal0.shortValue());
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertTrue(catalogLight0.isProportional());
      assertNull(catalogLight0.getColor());
      assertEquals((-2263.3643F), catalogLight0.getDepth(), 0.01F);
      assertEquals((-2263.3643F), catalogLight0.getElevation(), 0.01F);
      assertEquals("h&i*+\"", catalogLight0.getName());
      assertTrue(catalogLight0.isMovable());
      assertTrue(catalogLight0.isTexturable());
      assertFalse(catalogLight0.isDoorOrWindow());
      assertNull(catalogLight0.getGrade());
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertEquals((-2263.3643F), catalogLight0.getWidth(), 0.01F);
      assertFalse(catalogLight0.isBackFaceShown());
      assertTrue(catalogLight0.isDeformable());
      assertEquals("h&i*+\"", catalogLight0.getId());
      assertEquals("h&i*+\"", catalogLight0.getCreator());
      assertEquals("h&i*+\"", catalogLight0.getDescription());
      assertNull(catalogLight0.getInformation());
      assertTrue(catalogLight0.isResizable());
      assertFalse(catalogLight0.isModifiable());
      assertEquals((-2263.3643F), catalogLight0.getHeight(), 0.01F);
      assertNull(catalogLight0.getCreationDate());
      assertNull(catalogLight0.getCurrency());
      assertFalse(homeLight0.isDoorOrWindow());
      assertTrue(homeLight0.isTexturable());
      assertFalse(homeLight0.isModelMirrored());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertEquals((-2263.3643F), homeLight0.getGroundElevation(), 0.01F);
      assertEquals("h&i*+\"", homeLight0.getDescription());
      assertEquals((-2263.3643F), homeLight0.getDepth(), 0.01F);
      assertNull(homeLight0.getColor());
      assertEquals("h&i*+\"", homeLight0.getCatalogId());
      assertNull(homeLight0.getCurrency());
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertTrue(homeLight0.isVisible());
      assertTrue(homeLight0.isDeformable());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertEquals((-2263.3643F), homeLight0.getHeight(), 0.01F);
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertTrue(homeLight0.isMovable());
      assertNull(homeLight0.getShininess());
      assertTrue(homeLight0.isResizable());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertEquals((-1131.6821F), homeLight0.getY(), 0.01F);
      assertEquals((-1131.6821F), homeLight0.getX(), 0.01F);
      assertEquals("h&i*+\"", homeLight0.getName());
      assertFalse(homeLight0.isNameVisible());
      assertEquals((-2263.3643F), homeLight0.getWidth(), 0.01F);
      assertEquals((-2263.3643F), homeLight0.getElevation(), 0.01F);
      assertFalse(homeLight0.isBackFaceShown());
      assertEquals(2, lightSourceArray0.length);
      assertNotNull(homeLight0);
      
      Level level0 = new Level("", 0, (-2263.3643F), 0);
      assertEquals("", level0.getName());
      assertEquals((-2263.3643F), level0.getFloorThickness(), 0.01F);
      assertTrue(level0.isVisible());
      assertEquals(0.0F, level0.getHeight(), 0.01F);
      assertEquals(0.0F, level0.getElevation(), 0.01F);
      assertNotNull(level0);
      
      homeLight0.setLevel(level0);
      assertEquals((byte)1, bigDecimal0.byteValue());
      assertEquals((short)1, bigDecimal0.shortValue());
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertTrue(catalogLight0.isProportional());
      assertNull(catalogLight0.getColor());
      assertEquals((-2263.3643F), catalogLight0.getDepth(), 0.01F);
      assertEquals((-2263.3643F), catalogLight0.getElevation(), 0.01F);
      assertEquals("h&i*+\"", catalogLight0.getName());
      assertTrue(catalogLight0.isMovable());
      assertTrue(catalogLight0.isTexturable());
      assertFalse(catalogLight0.isDoorOrWindow());
      assertNull(catalogLight0.getGrade());
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertEquals((-2263.3643F), catalogLight0.getWidth(), 0.01F);
      assertFalse(catalogLight0.isBackFaceShown());
      assertTrue(catalogLight0.isDeformable());
      assertEquals("h&i*+\"", catalogLight0.getId());
      assertEquals("h&i*+\"", catalogLight0.getCreator());
      assertEquals("h&i*+\"", catalogLight0.getDescription());
      assertNull(catalogLight0.getInformation());
      assertTrue(catalogLight0.isResizable());
      assertFalse(catalogLight0.isModifiable());
      assertEquals((-2263.3643F), catalogLight0.getHeight(), 0.01F);
      assertNull(catalogLight0.getCreationDate());
      assertNull(catalogLight0.getCurrency());
      assertFalse(homeLight0.isDoorOrWindow());
      assertTrue(homeLight0.isTexturable());
      assertFalse(homeLight0.isModelMirrored());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertEquals((-2263.3643F), homeLight0.getGroundElevation(), 0.01F);
      assertEquals("h&i*+\"", homeLight0.getDescription());
      assertEquals((-2263.3643F), homeLight0.getDepth(), 0.01F);
      assertNull(homeLight0.getColor());
      assertEquals("h&i*+\"", homeLight0.getCatalogId());
      assertNull(homeLight0.getCurrency());
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertTrue(homeLight0.isVisible());
      assertTrue(homeLight0.isDeformable());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertEquals((-2263.3643F), homeLight0.getHeight(), 0.01F);
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertTrue(homeLight0.isMovable());
      assertNull(homeLight0.getShininess());
      assertTrue(homeLight0.isResizable());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertEquals((-1131.6821F), homeLight0.getY(), 0.01F);
      assertEquals((-1131.6821F), homeLight0.getX(), 0.01F);
      assertEquals("h&i*+\"", homeLight0.getName());
      assertFalse(homeLight0.isNameVisible());
      assertEquals((-2263.3643F), homeLight0.getWidth(), 0.01F);
      assertEquals((-2263.3643F), homeLight0.getElevation(), 0.01F);
      assertFalse(homeLight0.isBackFaceShown());
      assertEquals("", level0.getName());
      assertEquals((-2263.3643F), level0.getFloorThickness(), 0.01F);
      assertTrue(level0.isVisible());
      assertEquals(0.0F, level0.getHeight(), 0.01F);
      assertEquals(0.0F, level0.getElevation(), 0.01F);
      assertEquals(2, lightSourceArray0.length);
      
      boolean boolean0 = homeLight0.isPointAt(0, (-2263.3643F), (-2263.3643F));
      assertEquals((byte)1, bigDecimal0.byteValue());
      assertEquals((short)1, bigDecimal0.shortValue());
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertTrue(catalogLight0.isProportional());
      assertNull(catalogLight0.getColor());
      assertEquals((-2263.3643F), catalogLight0.getDepth(), 0.01F);
      assertEquals((-2263.3643F), catalogLight0.getElevation(), 0.01F);
      assertEquals("h&i*+\"", catalogLight0.getName());
      assertTrue(catalogLight0.isMovable());
      assertTrue(catalogLight0.isTexturable());
      assertFalse(catalogLight0.isDoorOrWindow());
      assertNull(catalogLight0.getGrade());
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertEquals((-2263.3643F), catalogLight0.getWidth(), 0.01F);
      assertFalse(catalogLight0.isBackFaceShown());
      assertTrue(catalogLight0.isDeformable());
      assertEquals("h&i*+\"", catalogLight0.getId());
      assertEquals("h&i*+\"", catalogLight0.getCreator());
      assertEquals("h&i*+\"", catalogLight0.getDescription());
      assertNull(catalogLight0.getInformation());
      assertTrue(catalogLight0.isResizable());
      assertFalse(catalogLight0.isModifiable());
      assertEquals((-2263.3643F), catalogLight0.getHeight(), 0.01F);
      assertNull(catalogLight0.getCreationDate());
      assertNull(catalogLight0.getCurrency());
      assertFalse(homeLight0.isDoorOrWindow());
      assertTrue(homeLight0.isTexturable());
      assertFalse(homeLight0.isModelMirrored());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertEquals((-2263.3643F), homeLight0.getGroundElevation(), 0.01F);
      assertEquals("h&i*+\"", homeLight0.getDescription());
      assertEquals((-2263.3643F), homeLight0.getDepth(), 0.01F);
      assertNull(homeLight0.getColor());
      assertEquals("h&i*+\"", homeLight0.getCatalogId());
      assertNull(homeLight0.getCurrency());
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertTrue(homeLight0.isVisible());
      assertTrue(homeLight0.isDeformable());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertEquals((-2263.3643F), homeLight0.getHeight(), 0.01F);
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertTrue(homeLight0.isMovable());
      assertNull(homeLight0.getShininess());
      assertTrue(homeLight0.isResizable());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertEquals((-1131.6821F), homeLight0.getY(), 0.01F);
      assertEquals((-1131.6821F), homeLight0.getX(), 0.01F);
      assertEquals("h&i*+\"", homeLight0.getName());
      assertFalse(homeLight0.isNameVisible());
      assertEquals((-2263.3643F), homeLight0.getWidth(), 0.01F);
      assertEquals((-2263.3643F), homeLight0.getElevation(), 0.01F);
      assertFalse(homeLight0.isBackFaceShown());
      assertEquals(2, lightSourceArray0.length);
      assertFalse(boolean0);
      
      float[][] floatArray0 = homeLight0.getPoints();
      assertEquals((byte)1, bigDecimal0.byteValue());
      assertEquals((short)1, bigDecimal0.shortValue());
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertTrue(catalogLight0.isProportional());
      assertNull(catalogLight0.getColor());
      assertEquals((-2263.3643F), catalogLight0.getDepth(), 0.01F);
      assertEquals((-2263.3643F), catalogLight0.getElevation(), 0.01F);
      assertEquals("h&i*+\"", catalogLight0.getName());
      assertTrue(catalogLight0.isMovable());
      assertTrue(catalogLight0.isTexturable());
      assertFalse(catalogLight0.isDoorOrWindow());
      assertNull(catalogLight0.getGrade());
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertEquals((-2263.3643F), catalogLight0.getWidth(), 0.01F);
      assertFalse(catalogLight0.isBackFaceShown());
      assertTrue(catalogLight0.isDeformable());
      assertEquals("h&i*+\"", catalogLight0.getId());
      assertEquals("h&i*+\"", catalogLight0.getCreator());
      assertEquals("h&i*+\"", catalogLight0.getDescription());
      assertNull(catalogLight0.getInformation());
      assertTrue(catalogLight0.isResizable());
      assertFalse(catalogLight0.isModifiable());
      assertEquals((-2263.3643F), catalogLight0.getHeight(), 0.01F);
      assertNull(catalogLight0.getCreationDate());
      assertNull(catalogLight0.getCurrency());
      assertFalse(homeLight0.isDoorOrWindow());
      assertTrue(homeLight0.isTexturable());
      assertFalse(homeLight0.isModelMirrored());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertEquals((-2263.3643F), homeLight0.getGroundElevation(), 0.01F);
      assertEquals("h&i*+\"", homeLight0.getDescription());
      assertEquals((-2263.3643F), homeLight0.getDepth(), 0.01F);
      assertNull(homeLight0.getColor());
      assertEquals("h&i*+\"", homeLight0.getCatalogId());
      assertNull(homeLight0.getCurrency());
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertTrue(homeLight0.isVisible());
      assertTrue(homeLight0.isDeformable());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertEquals((-2263.3643F), homeLight0.getHeight(), 0.01F);
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertTrue(homeLight0.isMovable());
      assertNull(homeLight0.getShininess());
      assertTrue(homeLight0.isResizable());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertEquals((-1131.6821F), homeLight0.getY(), 0.01F);
      assertEquals((-1131.6821F), homeLight0.getX(), 0.01F);
      assertEquals("h&i*+\"", homeLight0.getName());
      assertFalse(homeLight0.isNameVisible());
      assertEquals((-2263.3643F), homeLight0.getWidth(), 0.01F);
      assertEquals((-2263.3643F), homeLight0.getElevation(), 0.01F);
      assertFalse(homeLight0.isBackFaceShown());
      assertEquals(2, lightSourceArray0.length);
      assertEquals(4, floatArray0.length);
      assertNotNull(floatArray0);
  }

  @Test(timeout = 4000)
  public void test243()  throws Throwable  {
      LightSource[] lightSourceArray0 = new LightSource[12];
      BigDecimal bigDecimal0 = new BigDecimal(0);
      assertEquals((short)0, bigDecimal0.shortValue());
      assertEquals((byte)0, bigDecimal0.byteValue());
      assertNotNull(bigDecimal0);
      
      CatalogLight catalogLight0 = new CatalogLight("h&*+\"", "h&*+\"", "h&*+\"", (Content) null, (Content) null, (-815.0011F), 1.1803F, (-694.0F), (-694.0F), true, lightSourceArray0, (float[][]) null, "h&*+\"", true, bigDecimal0, bigDecimal0);
      assertEquals((short)0, bigDecimal0.shortValue());
      assertEquals((byte)0, bigDecimal0.byteValue());
      assertNull(catalogLight0.getColor());
      assertFalse(catalogLight0.isModifiable());
      assertNull(catalogLight0.getCreationDate());
      assertEquals((-815.0011F), catalogLight0.getWidth(), 0.01F);
      assertEquals(1.1803F, catalogLight0.getDepth(), 0.01F);
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertTrue(catalogLight0.isResizable());
      assertNull(catalogLight0.getGrade());
      assertEquals((-694.0F), catalogLight0.getHeight(), 0.01F);
      assertEquals("h&*+\"", catalogLight0.getName());
      assertNull(catalogLight0.getCurrency());
      assertTrue(catalogLight0.isProportional());
      assertFalse(catalogLight0.isDoorOrWindow());
      assertEquals((-694.0F), catalogLight0.getElevation(), 0.01F);
      assertTrue(catalogLight0.isMovable());
      assertTrue(catalogLight0.isTexturable());
      assertEquals("h&*+\"", catalogLight0.getDescription());
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertEquals("h&*+\"", catalogLight0.getCreator());
      assertFalse(catalogLight0.isBackFaceShown());
      assertEquals("h&*+\"", catalogLight0.getId());
      assertTrue(catalogLight0.isDeformable());
      assertNull(catalogLight0.getInformation());
      assertEquals(12, lightSourceArray0.length);
      assertNotNull(catalogLight0);
      
      HomeLight homeLight0 = new HomeLight(catalogLight0);
      assertEquals((short)0, bigDecimal0.shortValue());
      assertEquals((byte)0, bigDecimal0.byteValue());
      assertNull(catalogLight0.getColor());
      assertFalse(catalogLight0.isModifiable());
      assertNull(catalogLight0.getCreationDate());
      assertEquals((-815.0011F), catalogLight0.getWidth(), 0.01F);
      assertEquals(1.1803F, catalogLight0.getDepth(), 0.01F);
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertTrue(catalogLight0.isResizable());
      assertNull(catalogLight0.getGrade());
      assertEquals((-694.0F), catalogLight0.getHeight(), 0.01F);
      assertEquals("h&*+\"", catalogLight0.getName());
      assertNull(catalogLight0.getCurrency());
      assertTrue(catalogLight0.isProportional());
      assertFalse(catalogLight0.isDoorOrWindow());
      assertEquals((-694.0F), catalogLight0.getElevation(), 0.01F);
      assertTrue(catalogLight0.isMovable());
      assertTrue(catalogLight0.isTexturable());
      assertEquals("h&*+\"", catalogLight0.getDescription());
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertEquals("h&*+\"", catalogLight0.getCreator());
      assertFalse(catalogLight0.isBackFaceShown());
      assertEquals("h&*+\"", catalogLight0.getId());
      assertTrue(catalogLight0.isDeformable());
      assertNull(catalogLight0.getInformation());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertTrue(homeLight0.isDeformable());
      assertTrue(homeLight0.isVisible());
      assertEquals(1.1803F, homeLight0.getDepth(), 0.01F);
      assertEquals((-815.0011F), homeLight0.getWidth(), 0.01F);
      assertNull(homeLight0.getCurrency());
      assertFalse(homeLight0.isNameVisible());
      assertEquals((-694.0F), homeLight0.getHeight(), 0.01F);
      assertEquals((-407.50055F), homeLight0.getX(), 0.01F);
      assertEquals("h&*+\"", homeLight0.getCatalogId());
      assertTrue(homeLight0.isTexturable());
      assertFalse(homeLight0.isBackFaceShown());
      assertEquals("h&*+\"", homeLight0.getName());
      assertNull(homeLight0.getColor());
      assertFalse(homeLight0.isModelMirrored());
      assertEquals((-694.0F), homeLight0.getElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals((-694.0F), homeLight0.getGroundElevation(), 0.01F);
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      assertEquals("h&*+\"", homeLight0.getDescription());
      assertNull(homeLight0.getShininess());
      assertEquals(0.59015F, homeLight0.getY(), 0.01F);
      assertTrue(homeLight0.isMovable());
      assertTrue(homeLight0.isResizable());
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertEquals(12, lightSourceArray0.length);
      assertNotNull(homeLight0);
      
      HomeLight homeLight1 = homeLight0.clone();
      assertFalse(homeLight1.equals((Object)homeLight0));
      assertEquals((short)0, bigDecimal0.shortValue());
      assertEquals((byte)0, bigDecimal0.byteValue());
      assertNull(catalogLight0.getColor());
      assertFalse(catalogLight0.isModifiable());
      assertNull(catalogLight0.getCreationDate());
      assertEquals((-815.0011F), catalogLight0.getWidth(), 0.01F);
      assertEquals(1.1803F, catalogLight0.getDepth(), 0.01F);
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertTrue(catalogLight0.isResizable());
      assertNull(catalogLight0.getGrade());
      assertEquals((-694.0F), catalogLight0.getHeight(), 0.01F);
      assertEquals("h&*+\"", catalogLight0.getName());
      assertNull(catalogLight0.getCurrency());
      assertTrue(catalogLight0.isProportional());
      assertFalse(catalogLight0.isDoorOrWindow());
      assertEquals((-694.0F), catalogLight0.getElevation(), 0.01F);
      assertTrue(catalogLight0.isMovable());
      assertTrue(catalogLight0.isTexturable());
      assertEquals("h&*+\"", catalogLight0.getDescription());
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertEquals("h&*+\"", catalogLight0.getCreator());
      assertFalse(catalogLight0.isBackFaceShown());
      assertEquals("h&*+\"", catalogLight0.getId());
      assertTrue(catalogLight0.isDeformable());
      assertNull(catalogLight0.getInformation());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertTrue(homeLight0.isDeformable());
      assertTrue(homeLight0.isVisible());
      assertEquals(1.1803F, homeLight0.getDepth(), 0.01F);
      assertEquals((-815.0011F), homeLight0.getWidth(), 0.01F);
      assertNull(homeLight0.getCurrency());
      assertFalse(homeLight0.isNameVisible());
      assertEquals((-694.0F), homeLight0.getHeight(), 0.01F);
      assertEquals((-407.50055F), homeLight0.getX(), 0.01F);
      assertEquals("h&*+\"", homeLight0.getCatalogId());
      assertTrue(homeLight0.isTexturable());
      assertFalse(homeLight0.isBackFaceShown());
      assertEquals("h&*+\"", homeLight0.getName());
      assertNull(homeLight0.getColor());
      assertFalse(homeLight0.isModelMirrored());
      assertEquals((-694.0F), homeLight0.getElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals((-694.0F), homeLight0.getGroundElevation(), 0.01F);
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      assertEquals("h&*+\"", homeLight0.getDescription());
      assertNull(homeLight0.getShininess());
      assertEquals(0.59015F, homeLight0.getY(), 0.01F);
      assertTrue(homeLight0.isMovable());
      assertTrue(homeLight0.isResizable());
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertEquals((-694.0F), homeLight1.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight1.getAngle(), 0.01F);
      assertEquals((-407.50055F), homeLight1.getX(), 0.01F);
      assertFalse(homeLight1.isModelMirrored());
      assertFalse(homeLight1.isBackFaceShown());
      assertEquals("h&*+\"", homeLight1.getDescription());
      assertEquals(0.0F, homeLight1.getNameAngle(), 0.01F);
      assertFalse(homeLight1.isNameVisible());
      assertNull(homeLight1.getStaircaseCutOutShape());
      assertTrue(homeLight1.isResizable());
      assertFalse(homeLight1.isDoorOrWindow());
      assertTrue(homeLight1.isTexturable());
      assertEquals((-694.0F), homeLight1.getElevation(), 0.01F);
      assertEquals(0.0F, homeLight1.getNameXOffset(), 0.01F);
      assertTrue(homeLight1.isDeformable());
      assertEquals((-694.0F), homeLight1.getHeight(), 0.01F);
      assertNull(homeLight1.getShininess());
      assertTrue(homeLight1.isVisible());
      assertEquals(0.59015F, homeLight1.getY(), 0.01F);
      assertTrue(homeLight1.isMovable());
      assertEquals("h&*+\"", homeLight1.getName());
      assertEquals(1.1803F, homeLight1.getDepth(), 0.01F);
      assertEquals(0.5F, homeLight1.getPower(), 0.01F);
      assertNull(homeLight1.getColor());
      assertNull(homeLight1.getCurrency());
      assertEquals(0.0F, homeLight1.getNameYOffset(), 0.01F);
      assertEquals("h&*+\"", homeLight1.getCatalogId());
      assertEquals((-815.0011F), homeLight1.getWidth(), 0.01F);
      assertEquals(12, lightSourceArray0.length);
      assertNotSame(homeLight0, homeLight1);
      assertNotSame(homeLight1, homeLight0);
      assertNotNull(homeLight1);
      
      homeLight1.setY(0.59015F);
      assertFalse(homeLight0.equals((Object)homeLight1));
      assertFalse(homeLight1.equals((Object)homeLight0));
      assertEquals((short)0, bigDecimal0.shortValue());
      assertEquals((byte)0, bigDecimal0.byteValue());
      assertNull(catalogLight0.getColor());
      assertFalse(catalogLight0.isModifiable());
      assertNull(catalogLight0.getCreationDate());
      assertEquals((-815.0011F), catalogLight0.getWidth(), 0.01F);
      assertEquals(1.1803F, catalogLight0.getDepth(), 0.01F);
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertTrue(catalogLight0.isResizable());
      assertNull(catalogLight0.getGrade());
      assertEquals((-694.0F), catalogLight0.getHeight(), 0.01F);
      assertEquals("h&*+\"", catalogLight0.getName());
      assertNull(catalogLight0.getCurrency());
      assertTrue(catalogLight0.isProportional());
      assertFalse(catalogLight0.isDoorOrWindow());
      assertEquals((-694.0F), catalogLight0.getElevation(), 0.01F);
      assertTrue(catalogLight0.isMovable());
      assertTrue(catalogLight0.isTexturable());
      assertEquals("h&*+\"", catalogLight0.getDescription());
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertEquals("h&*+\"", catalogLight0.getCreator());
      assertFalse(catalogLight0.isBackFaceShown());
      assertEquals("h&*+\"", catalogLight0.getId());
      assertTrue(catalogLight0.isDeformable());
      assertNull(catalogLight0.getInformation());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertTrue(homeLight0.isDeformable());
      assertTrue(homeLight0.isVisible());
      assertEquals(1.1803F, homeLight0.getDepth(), 0.01F);
      assertEquals((-815.0011F), homeLight0.getWidth(), 0.01F);
      assertNull(homeLight0.getCurrency());
      assertFalse(homeLight0.isNameVisible());
      assertEquals((-694.0F), homeLight0.getHeight(), 0.01F);
      assertEquals((-407.50055F), homeLight0.getX(), 0.01F);
      assertEquals("h&*+\"", homeLight0.getCatalogId());
      assertTrue(homeLight0.isTexturable());
      assertFalse(homeLight0.isBackFaceShown());
      assertEquals("h&*+\"", homeLight0.getName());
      assertNull(homeLight0.getColor());
      assertFalse(homeLight0.isModelMirrored());
      assertEquals((-694.0F), homeLight0.getElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals((-694.0F), homeLight0.getGroundElevation(), 0.01F);
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      assertEquals("h&*+\"", homeLight0.getDescription());
      assertNull(homeLight0.getShininess());
      assertEquals(0.59015F, homeLight0.getY(), 0.01F);
      assertTrue(homeLight0.isMovable());
      assertTrue(homeLight0.isResizable());
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertEquals((-694.0F), homeLight1.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight1.getAngle(), 0.01F);
      assertEquals((-407.50055F), homeLight1.getX(), 0.01F);
      assertFalse(homeLight1.isModelMirrored());
      assertFalse(homeLight1.isBackFaceShown());
      assertEquals("h&*+\"", homeLight1.getDescription());
      assertEquals(0.0F, homeLight1.getNameAngle(), 0.01F);
      assertFalse(homeLight1.isNameVisible());
      assertNull(homeLight1.getStaircaseCutOutShape());
      assertTrue(homeLight1.isResizable());
      assertFalse(homeLight1.isDoorOrWindow());
      assertTrue(homeLight1.isTexturable());
      assertEquals((-694.0F), homeLight1.getElevation(), 0.01F);
      assertEquals(0.0F, homeLight1.getNameXOffset(), 0.01F);
      assertTrue(homeLight1.isDeformable());
      assertEquals((-694.0F), homeLight1.getHeight(), 0.01F);
      assertNull(homeLight1.getShininess());
      assertTrue(homeLight1.isVisible());
      assertEquals(0.59015F, homeLight1.getY(), 0.01F);
      assertTrue(homeLight1.isMovable());
      assertEquals("h&*+\"", homeLight1.getName());
      assertEquals(1.1803F, homeLight1.getDepth(), 0.01F);
      assertEquals(0.5F, homeLight1.getPower(), 0.01F);
      assertNull(homeLight1.getColor());
      assertNull(homeLight1.getCurrency());
      assertEquals(0.0F, homeLight1.getNameYOffset(), 0.01F);
      assertEquals("h&*+\"", homeLight1.getCatalogId());
      assertEquals((-815.0011F), homeLight1.getWidth(), 0.01F);
      assertEquals(12, lightSourceArray0.length);
      assertNotSame(homeLight0, homeLight1);
      assertNotSame(homeLight1, homeLight0);
      
      boolean boolean0 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      homeLight0.setVisible(false);
      assertFalse(homeLight0.equals((Object)homeLight1));
      assertEquals((short)0, bigDecimal0.shortValue());
      assertEquals((byte)0, bigDecimal0.byteValue());
      assertNull(catalogLight0.getColor());
      assertFalse(catalogLight0.isModifiable());
      assertNull(catalogLight0.getCreationDate());
      assertEquals((-815.0011F), catalogLight0.getWidth(), 0.01F);
      assertEquals(1.1803F, catalogLight0.getDepth(), 0.01F);
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertTrue(catalogLight0.isResizable());
      assertNull(catalogLight0.getGrade());
      assertEquals((-694.0F), catalogLight0.getHeight(), 0.01F);
      assertEquals("h&*+\"", catalogLight0.getName());
      assertNull(catalogLight0.getCurrency());
      assertTrue(catalogLight0.isProportional());
      assertFalse(catalogLight0.isDoorOrWindow());
      assertEquals((-694.0F), catalogLight0.getElevation(), 0.01F);
      assertTrue(catalogLight0.isMovable());
      assertTrue(catalogLight0.isTexturable());
      assertEquals("h&*+\"", catalogLight0.getDescription());
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertEquals("h&*+\"", catalogLight0.getCreator());
      assertFalse(catalogLight0.isBackFaceShown());
      assertEquals("h&*+\"", catalogLight0.getId());
      assertTrue(catalogLight0.isDeformable());
      assertNull(catalogLight0.getInformation());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertTrue(homeLight0.isDeformable());
      assertEquals(1.1803F, homeLight0.getDepth(), 0.01F);
      assertEquals((-815.0011F), homeLight0.getWidth(), 0.01F);
      assertNull(homeLight0.getCurrency());
      assertFalse(homeLight0.isNameVisible());
      assertEquals((-694.0F), homeLight0.getHeight(), 0.01F);
      assertEquals((-407.50055F), homeLight0.getX(), 0.01F);
      assertEquals("h&*+\"", homeLight0.getCatalogId());
      assertTrue(homeLight0.isTexturable());
      assertFalse(homeLight0.isBackFaceShown());
      assertEquals("h&*+\"", homeLight0.getName());
      assertNull(homeLight0.getColor());
      assertFalse(homeLight0.isModelMirrored());
      assertEquals((-694.0F), homeLight0.getElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals((-694.0F), homeLight0.getGroundElevation(), 0.01F);
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      assertEquals("h&*+\"", homeLight0.getDescription());
      assertNull(homeLight0.getShininess());
      assertEquals(0.59015F, homeLight0.getY(), 0.01F);
      assertTrue(homeLight0.isMovable());
      assertTrue(homeLight0.isResizable());
      assertFalse(homeLight0.isVisible());
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertEquals(12, lightSourceArray0.length);
      assertNotSame(homeLight0, homeLight1);
      
      HomeTexture homeTexture0 = homeLight0.getTexture();
      assertFalse(homeLight0.equals((Object)homeLight1));
      assertEquals((short)0, bigDecimal0.shortValue());
      assertEquals((byte)0, bigDecimal0.byteValue());
      assertNull(catalogLight0.getColor());
      assertFalse(catalogLight0.isModifiable());
      assertNull(catalogLight0.getCreationDate());
      assertEquals((-815.0011F), catalogLight0.getWidth(), 0.01F);
      assertEquals(1.1803F, catalogLight0.getDepth(), 0.01F);
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertTrue(catalogLight0.isResizable());
      assertNull(catalogLight0.getGrade());
      assertEquals((-694.0F), catalogLight0.getHeight(), 0.01F);
      assertEquals("h&*+\"", catalogLight0.getName());
      assertNull(catalogLight0.getCurrency());
      assertTrue(catalogLight0.isProportional());
      assertFalse(catalogLight0.isDoorOrWindow());
      assertEquals((-694.0F), catalogLight0.getElevation(), 0.01F);
      assertTrue(catalogLight0.isMovable());
      assertTrue(catalogLight0.isTexturable());
      assertEquals("h&*+\"", catalogLight0.getDescription());
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertEquals("h&*+\"", catalogLight0.getCreator());
      assertFalse(catalogLight0.isBackFaceShown());
      assertEquals("h&*+\"", catalogLight0.getId());
      assertTrue(catalogLight0.isDeformable());
      assertNull(catalogLight0.getInformation());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertTrue(homeLight0.isDeformable());
      assertEquals(1.1803F, homeLight0.getDepth(), 0.01F);
      assertEquals((-815.0011F), homeLight0.getWidth(), 0.01F);
      assertNull(homeLight0.getCurrency());
      assertFalse(homeLight0.isNameVisible());
      assertEquals((-694.0F), homeLight0.getHeight(), 0.01F);
      assertEquals((-407.50055F), homeLight0.getX(), 0.01F);
      assertEquals("h&*+\"", homeLight0.getCatalogId());
      assertTrue(homeLight0.isTexturable());
      assertFalse(homeLight0.isBackFaceShown());
      assertEquals("h&*+\"", homeLight0.getName());
      assertNull(homeLight0.getColor());
      assertFalse(homeLight0.isModelMirrored());
      assertEquals((-694.0F), homeLight0.getElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals((-694.0F), homeLight0.getGroundElevation(), 0.01F);
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      assertEquals("h&*+\"", homeLight0.getDescription());
      assertNull(homeLight0.getShininess());
      assertEquals(0.59015F, homeLight0.getY(), 0.01F);
      assertTrue(homeLight0.isMovable());
      assertTrue(homeLight0.isResizable());
      assertFalse(homeLight0.isVisible());
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertEquals(12, lightSourceArray0.length);
      assertNotSame(homeLight0, homeLight1);
      assertNull(homeTexture0);
      
      HomeLight homeLight2 = (HomeLight)homeLight1.clone();
      assertFalse(homeLight0.equals((Object)homeLight1));
      assertFalse(homeLight1.equals((Object)homeLight0));
      assertFalse(homeLight2.equals((Object)homeLight1));
      assertFalse(homeLight2.equals((Object)homeLight0));
      assertEquals((short)0, bigDecimal0.shortValue());
      assertEquals((byte)0, bigDecimal0.byteValue());
      assertNull(catalogLight0.getColor());
      assertFalse(catalogLight0.isModifiable());
      assertNull(catalogLight0.getCreationDate());
      assertEquals((-815.0011F), catalogLight0.getWidth(), 0.01F);
      assertEquals(1.1803F, catalogLight0.getDepth(), 0.01F);
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertTrue(catalogLight0.isResizable());
      assertNull(catalogLight0.getGrade());
      assertEquals((-694.0F), catalogLight0.getHeight(), 0.01F);
      assertEquals("h&*+\"", catalogLight0.getName());
      assertNull(catalogLight0.getCurrency());
      assertTrue(catalogLight0.isProportional());
      assertFalse(catalogLight0.isDoorOrWindow());
      assertEquals((-694.0F), catalogLight0.getElevation(), 0.01F);
      assertTrue(catalogLight0.isMovable());
      assertTrue(catalogLight0.isTexturable());
      assertEquals("h&*+\"", catalogLight0.getDescription());
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertEquals("h&*+\"", catalogLight0.getCreator());
      assertFalse(catalogLight0.isBackFaceShown());
      assertEquals("h&*+\"", catalogLight0.getId());
      assertTrue(catalogLight0.isDeformable());
      assertNull(catalogLight0.getInformation());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertTrue(homeLight0.isDeformable());
      assertEquals(1.1803F, homeLight0.getDepth(), 0.01F);
      assertEquals((-815.0011F), homeLight0.getWidth(), 0.01F);
      assertNull(homeLight0.getCurrency());
      assertFalse(homeLight0.isNameVisible());
      assertEquals((-694.0F), homeLight0.getHeight(), 0.01F);
      assertEquals((-407.50055F), homeLight0.getX(), 0.01F);
      assertEquals("h&*+\"", homeLight0.getCatalogId());
      assertTrue(homeLight0.isTexturable());
      assertFalse(homeLight0.isBackFaceShown());
      assertEquals("h&*+\"", homeLight0.getName());
      assertNull(homeLight0.getColor());
      assertFalse(homeLight0.isModelMirrored());
      assertEquals((-694.0F), homeLight0.getElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals((-694.0F), homeLight0.getGroundElevation(), 0.01F);
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      assertEquals("h&*+\"", homeLight0.getDescription());
      assertNull(homeLight0.getShininess());
      assertEquals(0.59015F, homeLight0.getY(), 0.01F);
      assertTrue(homeLight0.isMovable());
      assertTrue(homeLight0.isResizable());
      assertFalse(homeLight0.isVisible());
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertEquals((-694.0F), homeLight1.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight1.getAngle(), 0.01F);
      assertEquals((-407.50055F), homeLight1.getX(), 0.01F);
      assertFalse(homeLight1.isModelMirrored());
      assertFalse(homeLight1.isBackFaceShown());
      assertEquals("h&*+\"", homeLight1.getDescription());
      assertEquals(0.0F, homeLight1.getNameAngle(), 0.01F);
      assertFalse(homeLight1.isNameVisible());
      assertNull(homeLight1.getStaircaseCutOutShape());
      assertTrue(homeLight1.isResizable());
      assertFalse(homeLight1.isDoorOrWindow());
      assertTrue(homeLight1.isTexturable());
      assertEquals((-694.0F), homeLight1.getElevation(), 0.01F);
      assertEquals(0.0F, homeLight1.getNameXOffset(), 0.01F);
      assertTrue(homeLight1.isDeformable());
      assertEquals((-694.0F), homeLight1.getHeight(), 0.01F);
      assertNull(homeLight1.getShininess());
      assertTrue(homeLight1.isVisible());
      assertEquals(0.59015F, homeLight1.getY(), 0.01F);
      assertTrue(homeLight1.isMovable());
      assertEquals("h&*+\"", homeLight1.getName());
      assertEquals(1.1803F, homeLight1.getDepth(), 0.01F);
      assertEquals(0.5F, homeLight1.getPower(), 0.01F);
      assertNull(homeLight1.getColor());
      assertNull(homeLight1.getCurrency());
      assertEquals(0.0F, homeLight1.getNameYOffset(), 0.01F);
      assertEquals("h&*+\"", homeLight1.getCatalogId());
      assertEquals((-815.0011F), homeLight1.getWidth(), 0.01F);
      assertEquals(0.0F, homeLight2.getAngle(), 0.01F);
      assertEquals((-694.0F), homeLight2.getElevation(), 0.01F);
      assertFalse(homeLight2.isBackFaceShown());
      assertNull(homeLight2.getColor());
      assertFalse(homeLight2.isModelMirrored());
      assertEquals((-407.50055F), homeLight2.getX(), 0.01F);
      assertEquals(0.5F, homeLight2.getPower(), 0.01F);
      assertEquals((-815.0011F), homeLight2.getWidth(), 0.01F);
      assertEquals(0.0F, homeLight2.getNameYOffset(), 0.01F);
      assertEquals("h&*+\"", homeLight2.getCatalogId());
      assertEquals((-694.0F), homeLight2.getHeight(), 0.01F);
      assertTrue(homeLight2.isDeformable());
      assertTrue(homeLight2.isVisible());
      assertNull(homeLight2.getCurrency());
      assertEquals(1.1803F, homeLight2.getDepth(), 0.01F);
      assertFalse(homeLight2.isNameVisible());
      assertTrue(homeLight2.isMovable());
      assertEquals("h&*+\"", homeLight2.getName());
      assertNull(homeLight2.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight2.getNameAngle(), 0.01F);
      assertEquals(0.59015F, homeLight2.getY(), 0.01F);
      assertTrue(homeLight2.isResizable());
      assertEquals("h&*+\"", homeLight2.getDescription());
      assertTrue(homeLight2.isTexturable());
      assertNull(homeLight2.getShininess());
      assertEquals(0.0F, homeLight2.getNameXOffset(), 0.01F);
      assertFalse(homeLight2.isDoorOrWindow());
      assertEquals((-694.0F), homeLight2.getGroundElevation(), 0.01F);
      assertEquals(12, lightSourceArray0.length);
      assertNotSame(homeLight0, homeLight1);
      assertNotSame(homeLight0, homeLight2);
      assertNotSame(homeLight1, homeLight0);
      assertNotSame(homeLight1, homeLight2);
      assertNotSame(homeLight2, homeLight1);
      assertNotSame(homeLight2, homeLight0);
      assertNotNull(homeLight2);
      
      homeLight1.setNameAngle(0);
      assertFalse(homeLight0.equals((Object)homeLight1));
      assertFalse(homeLight0.equals((Object)homeLight2));
      assertFalse(homeLight1.equals((Object)homeLight0));
      assertFalse(homeLight1.equals((Object)homeLight2));
      assertEquals((short)0, bigDecimal0.shortValue());
      assertEquals((byte)0, bigDecimal0.byteValue());
      assertNull(catalogLight0.getColor());
      assertFalse(catalogLight0.isModifiable());
      assertNull(catalogLight0.getCreationDate());
      assertEquals((-815.0011F), catalogLight0.getWidth(), 0.01F);
      assertEquals(1.1803F, catalogLight0.getDepth(), 0.01F);
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertTrue(catalogLight0.isResizable());
      assertNull(catalogLight0.getGrade());
      assertEquals((-694.0F), catalogLight0.getHeight(), 0.01F);
      assertEquals("h&*+\"", catalogLight0.getName());
      assertNull(catalogLight0.getCurrency());
      assertTrue(catalogLight0.isProportional());
      assertFalse(catalogLight0.isDoorOrWindow());
      assertEquals((-694.0F), catalogLight0.getElevation(), 0.01F);
      assertTrue(catalogLight0.isMovable());
      assertTrue(catalogLight0.isTexturable());
      assertEquals("h&*+\"", catalogLight0.getDescription());
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertEquals("h&*+\"", catalogLight0.getCreator());
      assertFalse(catalogLight0.isBackFaceShown());
      assertEquals("h&*+\"", catalogLight0.getId());
      assertTrue(catalogLight0.isDeformable());
      assertNull(catalogLight0.getInformation());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertTrue(homeLight0.isDeformable());
      assertEquals(1.1803F, homeLight0.getDepth(), 0.01F);
      assertEquals((-815.0011F), homeLight0.getWidth(), 0.01F);
      assertNull(homeLight0.getCurrency());
      assertFalse(homeLight0.isNameVisible());
      assertEquals((-694.0F), homeLight0.getHeight(), 0.01F);
      assertEquals((-407.50055F), homeLight0.getX(), 0.01F);
      assertEquals("h&*+\"", homeLight0.getCatalogId());
      assertTrue(homeLight0.isTexturable());
      assertFalse(homeLight0.isBackFaceShown());
      assertEquals("h&*+\"", homeLight0.getName());
      assertNull(homeLight0.getColor());
      assertFalse(homeLight0.isModelMirrored());
      assertEquals((-694.0F), homeLight0.getElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals((-694.0F), homeLight0.getGroundElevation(), 0.01F);
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      assertEquals("h&*+\"", homeLight0.getDescription());
      assertNull(homeLight0.getShininess());
      assertEquals(0.59015F, homeLight0.getY(), 0.01F);
      assertTrue(homeLight0.isMovable());
      assertTrue(homeLight0.isResizable());
      assertFalse(homeLight0.isVisible());
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertEquals((-694.0F), homeLight1.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight1.getAngle(), 0.01F);
      assertEquals((-407.50055F), homeLight1.getX(), 0.01F);
      assertFalse(homeLight1.isModelMirrored());
      assertFalse(homeLight1.isBackFaceShown());
      assertEquals("h&*+\"", homeLight1.getDescription());
      assertEquals(0.0F, homeLight1.getNameAngle(), 0.01F);
      assertFalse(homeLight1.isNameVisible());
      assertNull(homeLight1.getStaircaseCutOutShape());
      assertTrue(homeLight1.isResizable());
      assertFalse(homeLight1.isDoorOrWindow());
      assertTrue(homeLight1.isTexturable());
      assertEquals((-694.0F), homeLight1.getElevation(), 0.01F);
      assertEquals(0.0F, homeLight1.getNameXOffset(), 0.01F);
      assertTrue(homeLight1.isDeformable());
      assertEquals((-694.0F), homeLight1.getHeight(), 0.01F);
      assertNull(homeLight1.getShininess());
      assertTrue(homeLight1.isVisible());
      assertEquals(0.59015F, homeLight1.getY(), 0.01F);
      assertTrue(homeLight1.isMovable());
      assertEquals("h&*+\"", homeLight1.getName());
      assertEquals(1.1803F, homeLight1.getDepth(), 0.01F);
      assertEquals(0.5F, homeLight1.getPower(), 0.01F);
      assertNull(homeLight1.getColor());
      assertNull(homeLight1.getCurrency());
      assertEquals(0.0F, homeLight1.getNameYOffset(), 0.01F);
      assertEquals("h&*+\"", homeLight1.getCatalogId());
      assertEquals((-815.0011F), homeLight1.getWidth(), 0.01F);
      assertEquals(12, lightSourceArray0.length);
      assertNotSame(homeLight0, homeLight1);
      assertNotSame(homeLight0, homeLight2);
      assertNotSame(homeLight1, homeLight0);
      assertNotSame(homeLight1, homeLight2);
      
      float[][] floatArray0 = homeLight1.getModelRotation();
      assertFalse(homeLight0.equals((Object)homeLight1));
      assertFalse(homeLight0.equals((Object)homeLight2));
      assertFalse(homeLight1.equals((Object)homeLight0));
      assertFalse(homeLight1.equals((Object)homeLight2));
      assertEquals((short)0, bigDecimal0.shortValue());
      assertEquals((byte)0, bigDecimal0.byteValue());
      assertNull(catalogLight0.getColor());
      assertFalse(catalogLight0.isModifiable());
      assertNull(catalogLight0.getCreationDate());
      assertEquals((-815.0011F), catalogLight0.getWidth(), 0.01F);
      assertEquals(1.1803F, catalogLight0.getDepth(), 0.01F);
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertTrue(catalogLight0.isResizable());
      assertNull(catalogLight0.getGrade());
      assertEquals((-694.0F), catalogLight0.getHeight(), 0.01F);
      assertEquals("h&*+\"", catalogLight0.getName());
      assertNull(catalogLight0.getCurrency());
      assertTrue(catalogLight0.isProportional());
      assertFalse(catalogLight0.isDoorOrWindow());
      assertEquals((-694.0F), catalogLight0.getElevation(), 0.01F);
      assertTrue(catalogLight0.isMovable());
      assertTrue(catalogLight0.isTexturable());
      assertEquals("h&*+\"", catalogLight0.getDescription());
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertEquals("h&*+\"", catalogLight0.getCreator());
      assertFalse(catalogLight0.isBackFaceShown());
      assertEquals("h&*+\"", catalogLight0.getId());
      assertTrue(catalogLight0.isDeformable());
      assertNull(catalogLight0.getInformation());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertTrue(homeLight0.isDeformable());
      assertEquals(1.1803F, homeLight0.getDepth(), 0.01F);
      assertEquals((-815.0011F), homeLight0.getWidth(), 0.01F);
      assertNull(homeLight0.getCurrency());
      assertFalse(homeLight0.isNameVisible());
      assertEquals((-694.0F), homeLight0.getHeight(), 0.01F);
      assertEquals((-407.50055F), homeLight0.getX(), 0.01F);
      assertEquals("h&*+\"", homeLight0.getCatalogId());
      assertTrue(homeLight0.isTexturable());
      assertFalse(homeLight0.isBackFaceShown());
      assertEquals("h&*+\"", homeLight0.getName());
      assertNull(homeLight0.getColor());
      assertFalse(homeLight0.isModelMirrored());
      assertEquals((-694.0F), homeLight0.getElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals((-694.0F), homeLight0.getGroundElevation(), 0.01F);
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      assertEquals("h&*+\"", homeLight0.getDescription());
      assertNull(homeLight0.getShininess());
      assertEquals(0.59015F, homeLight0.getY(), 0.01F);
      assertTrue(homeLight0.isMovable());
      assertTrue(homeLight0.isResizable());
      assertFalse(homeLight0.isVisible());
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertEquals((-694.0F), homeLight1.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight1.getAngle(), 0.01F);
      assertEquals((-407.50055F), homeLight1.getX(), 0.01F);
      assertFalse(homeLight1.isModelMirrored());
      assertFalse(homeLight1.isBackFaceShown());
      assertEquals("h&*+\"", homeLight1.getDescription());
      assertEquals(0.0F, homeLight1.getNameAngle(), 0.01F);
      assertFalse(homeLight1.isNameVisible());
      assertNull(homeLight1.getStaircaseCutOutShape());
      assertTrue(homeLight1.isResizable());
      assertFalse(homeLight1.isDoorOrWindow());
      assertTrue(homeLight1.isTexturable());
      assertEquals((-694.0F), homeLight1.getElevation(), 0.01F);
      assertEquals(0.0F, homeLight1.getNameXOffset(), 0.01F);
      assertTrue(homeLight1.isDeformable());
      assertEquals((-694.0F), homeLight1.getHeight(), 0.01F);
      assertNull(homeLight1.getShininess());
      assertTrue(homeLight1.isVisible());
      assertEquals(0.59015F, homeLight1.getY(), 0.01F);
      assertTrue(homeLight1.isMovable());
      assertEquals("h&*+\"", homeLight1.getName());
      assertEquals(1.1803F, homeLight1.getDepth(), 0.01F);
      assertEquals(0.5F, homeLight1.getPower(), 0.01F);
      assertNull(homeLight1.getColor());
      assertNull(homeLight1.getCurrency());
      assertEquals(0.0F, homeLight1.getNameYOffset(), 0.01F);
      assertEquals("h&*+\"", homeLight1.getCatalogId());
      assertEquals((-815.0011F), homeLight1.getWidth(), 0.01F);
      assertEquals(12, lightSourceArray0.length);
      assertEquals(3, floatArray0.length);
      assertNotSame(homeLight0, homeLight1);
      assertNotSame(homeLight0, homeLight2);
      assertNotSame(homeLight1, homeLight0);
      assertNotSame(homeLight1, homeLight2);
      assertNotNull(floatArray0);
      
      Integer integer0 = homeLight1.getColor();
      assertFalse(homeLight0.equals((Object)homeLight1));
      assertFalse(homeLight0.equals((Object)homeLight2));
      assertFalse(homeLight1.equals((Object)homeLight0));
      assertFalse(homeLight1.equals((Object)homeLight2));
      assertEquals((short)0, bigDecimal0.shortValue());
      assertEquals((byte)0, bigDecimal0.byteValue());
      assertNull(catalogLight0.getColor());
      assertFalse(catalogLight0.isModifiable());
      assertNull(catalogLight0.getCreationDate());
      assertEquals((-815.0011F), catalogLight0.getWidth(), 0.01F);
      assertEquals(1.1803F, catalogLight0.getDepth(), 0.01F);
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertTrue(catalogLight0.isResizable());
      assertNull(catalogLight0.getGrade());
      assertEquals((-694.0F), catalogLight0.getHeight(), 0.01F);
      assertEquals("h&*+\"", catalogLight0.getName());
      assertNull(catalogLight0.getCurrency());
      assertTrue(catalogLight0.isProportional());
      assertFalse(catalogLight0.isDoorOrWindow());
      assertEquals((-694.0F), catalogLight0.getElevation(), 0.01F);
      assertTrue(catalogLight0.isMovable());
      assertTrue(catalogLight0.isTexturable());
      assertEquals("h&*+\"", catalogLight0.getDescription());
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertEquals("h&*+\"", catalogLight0.getCreator());
      assertFalse(catalogLight0.isBackFaceShown());
      assertEquals("h&*+\"", catalogLight0.getId());
      assertTrue(catalogLight0.isDeformable());
      assertNull(catalogLight0.getInformation());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertTrue(homeLight0.isDeformable());
      assertEquals(1.1803F, homeLight0.getDepth(), 0.01F);
      assertEquals((-815.0011F), homeLight0.getWidth(), 0.01F);
      assertNull(homeLight0.getCurrency());
      assertFalse(homeLight0.isNameVisible());
      assertEquals((-694.0F), homeLight0.getHeight(), 0.01F);
      assertEquals((-407.50055F), homeLight0.getX(), 0.01F);
      assertEquals("h&*+\"", homeLight0.getCatalogId());
      assertTrue(homeLight0.isTexturable());
      assertFalse(homeLight0.isBackFaceShown());
      assertEquals("h&*+\"", homeLight0.getName());
      assertNull(homeLight0.getColor());
      assertFalse(homeLight0.isModelMirrored());
      assertEquals((-694.0F), homeLight0.getElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals((-694.0F), homeLight0.getGroundElevation(), 0.01F);
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      assertEquals("h&*+\"", homeLight0.getDescription());
      assertNull(homeLight0.getShininess());
      assertEquals(0.59015F, homeLight0.getY(), 0.01F);
      assertTrue(homeLight0.isMovable());
      assertTrue(homeLight0.isResizable());
      assertFalse(homeLight0.isVisible());
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertEquals((-694.0F), homeLight1.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight1.getAngle(), 0.01F);
      assertEquals((-407.50055F), homeLight1.getX(), 0.01F);
      assertFalse(homeLight1.isModelMirrored());
      assertFalse(homeLight1.isBackFaceShown());
      assertEquals("h&*+\"", homeLight1.getDescription());
      assertEquals(0.0F, homeLight1.getNameAngle(), 0.01F);
      assertFalse(homeLight1.isNameVisible());
      assertNull(homeLight1.getStaircaseCutOutShape());
      assertTrue(homeLight1.isResizable());
      assertFalse(homeLight1.isDoorOrWindow());
      assertTrue(homeLight1.isTexturable());
      assertEquals((-694.0F), homeLight1.getElevation(), 0.01F);
      assertEquals(0.0F, homeLight1.getNameXOffset(), 0.01F);
      assertTrue(homeLight1.isDeformable());
      assertEquals((-694.0F), homeLight1.getHeight(), 0.01F);
      assertNull(homeLight1.getShininess());
      assertTrue(homeLight1.isVisible());
      assertEquals(0.59015F, homeLight1.getY(), 0.01F);
      assertTrue(homeLight1.isMovable());
      assertEquals("h&*+\"", homeLight1.getName());
      assertEquals(1.1803F, homeLight1.getDepth(), 0.01F);
      assertEquals(0.5F, homeLight1.getPower(), 0.01F);
      assertNull(homeLight1.getColor());
      assertNull(homeLight1.getCurrency());
      assertEquals(0.0F, homeLight1.getNameYOffset(), 0.01F);
      assertEquals("h&*+\"", homeLight1.getCatalogId());
      assertEquals((-815.0011F), homeLight1.getWidth(), 0.01F);
      assertEquals(12, lightSourceArray0.length);
      assertNotSame(homeLight0, homeLight1);
      assertNotSame(homeLight0, homeLight2);
      assertNotSame(homeLight1, homeLight0);
      assertNotSame(homeLight1, homeLight2);
      assertNull(integer0);
  }

  @Test(timeout = 4000)
  public void test244()  throws Throwable  {
      LightSource[] lightSourceArray0 = new LightSource[2];
      LightSource lightSource0 = new LightSource((-815.0F), 0.0F, 0.0F, 114);
      assertNull(lightSource0.getDiameter());
      assertEquals(0.0F, lightSource0.getZ(), 0.01F);
      assertEquals(114, lightSource0.getColor());
      assertEquals(0.0F, lightSource0.getY(), 0.01F);
      assertEquals((-815.0F), lightSource0.getX(), 0.01F);
      assertNotNull(lightSource0);
      
      lightSourceArray0[0] = lightSource0;
      LightSource lightSource1 = new LightSource((-694.0F), 0.36957806F, (-127.62969F), 0);
      assertFalse(lightSource1.equals((Object)lightSource0));
      assertEquals(0.36957806F, lightSource1.getY(), 0.01F);
      assertEquals((-694.0F), lightSource1.getX(), 0.01F);
      assertEquals((-127.62969F), lightSource1.getZ(), 0.01F);
      assertNull(lightSource1.getDiameter());
      assertEquals(0, lightSource1.getColor());
      assertNotNull(lightSource1);
      
      lightSourceArray0[1] = lightSource1;
      BigDecimal bigDecimal0 = BigDecimal.ONE;
      assertEquals((byte)1, bigDecimal0.byteValue());
      assertEquals((short)1, bigDecimal0.shortValue());
      assertNotNull(bigDecimal0);
      
      CatalogLight catalogLight0 = new CatalogLight("h&9+\"", "h&9+\"", "h&9+\"", (Content) null, (Content) null, (-815.0F), 0.36957806F, (-694.0F), (-694.0F), true, lightSourceArray0, (float[][]) null, "h&9+\"", true, bigDecimal0, bigDecimal0);
      assertEquals((byte)1, bigDecimal0.byteValue());
      assertEquals((short)1, bigDecimal0.shortValue());
      assertFalse(catalogLight0.isBackFaceShown());
      assertTrue(catalogLight0.isDeformable());
      assertNull(catalogLight0.getInformation());
      assertTrue(catalogLight0.isResizable());
      assertNull(catalogLight0.getCreationDate());
      assertEquals(0.36957806F, catalogLight0.getDepth(), 0.01F);
      assertNull(catalogLight0.getColor());
      assertEquals((-815.0F), catalogLight0.getWidth(), 0.01F);
      assertTrue(catalogLight0.isMovable());
      assertTrue(catalogLight0.isProportional());
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertNull(catalogLight0.getGrade());
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertTrue(catalogLight0.isTexturable());
      assertEquals("h&9+\"", catalogLight0.getCreator());
      assertFalse(catalogLight0.isDoorOrWindow());
      assertEquals("h&9+\"", catalogLight0.getName());
      assertEquals("h&9+\"", catalogLight0.getDescription());
      assertEquals((-694.0F), catalogLight0.getHeight(), 0.01F);
      assertFalse(catalogLight0.isModifiable());
      assertEquals("h&9+\"", catalogLight0.getId());
      assertNull(catalogLight0.getCurrency());
      assertEquals((-694.0F), catalogLight0.getElevation(), 0.01F);
      assertEquals(2, lightSourceArray0.length);
      assertNotNull(catalogLight0);
      
      HomeLight homeLight0 = new HomeLight(catalogLight0);
      assertEquals((byte)1, bigDecimal0.byteValue());
      assertEquals((short)1, bigDecimal0.shortValue());
      assertFalse(catalogLight0.isBackFaceShown());
      assertTrue(catalogLight0.isDeformable());
      assertNull(catalogLight0.getInformation());
      assertTrue(catalogLight0.isResizable());
      assertNull(catalogLight0.getCreationDate());
      assertEquals(0.36957806F, catalogLight0.getDepth(), 0.01F);
      assertNull(catalogLight0.getColor());
      assertEquals((-815.0F), catalogLight0.getWidth(), 0.01F);
      assertTrue(catalogLight0.isMovable());
      assertTrue(catalogLight0.isProportional());
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertNull(catalogLight0.getGrade());
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertTrue(catalogLight0.isTexturable());
      assertEquals("h&9+\"", catalogLight0.getCreator());
      assertFalse(catalogLight0.isDoorOrWindow());
      assertEquals("h&9+\"", catalogLight0.getName());
      assertEquals("h&9+\"", catalogLight0.getDescription());
      assertEquals((-694.0F), catalogLight0.getHeight(), 0.01F);
      assertFalse(catalogLight0.isModifiable());
      assertEquals("h&9+\"", catalogLight0.getId());
      assertNull(catalogLight0.getCurrency());
      assertEquals((-694.0F), catalogLight0.getElevation(), 0.01F);
      assertTrue(homeLight0.isMovable());
      assertNull(homeLight0.getShininess());
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertTrue(homeLight0.isResizable());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertTrue(homeLight0.isDeformable());
      assertTrue(homeLight0.isVisible());
      assertNull(homeLight0.getCurrency());
      assertEquals("h&9+\"", homeLight0.getName());
      assertEquals((-694.0F), homeLight0.getHeight(), 0.01F);
      assertEquals((-407.5F), homeLight0.getX(), 0.01F);
      assertEquals("h&9+\"", homeLight0.getCatalogId());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertEquals((-815.0F), homeLight0.getWidth(), 0.01F);
      assertFalse(homeLight0.isBackFaceShown());
      assertFalse(homeLight0.isDoorOrWindow());
      assertNull(homeLight0.getColor());
      assertFalse(homeLight0.isModelMirrored());
      assertTrue(homeLight0.isTexturable());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertEquals((-694.0F), homeLight0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertEquals("h&9+\"", homeLight0.getDescription());
      assertEquals((-694.0F), homeLight0.getElevation(), 0.01F);
      assertEquals(0.36957806F, homeLight0.getDepth(), 0.01F);
      assertFalse(homeLight0.isNameVisible());
      assertEquals(0.18478903F, homeLight0.getY(), 0.01F);
      assertEquals(2, lightSourceArray0.length);
      assertNotNull(homeLight0);
      
      HomeLight homeLight1 = homeLight0.clone();
      assertFalse(homeLight1.equals((Object)homeLight0));
      assertEquals((byte)1, bigDecimal0.byteValue());
      assertEquals((short)1, bigDecimal0.shortValue());
      assertFalse(catalogLight0.isBackFaceShown());
      assertTrue(catalogLight0.isDeformable());
      assertNull(catalogLight0.getInformation());
      assertTrue(catalogLight0.isResizable());
      assertNull(catalogLight0.getCreationDate());
      assertEquals(0.36957806F, catalogLight0.getDepth(), 0.01F);
      assertNull(catalogLight0.getColor());
      assertEquals((-815.0F), catalogLight0.getWidth(), 0.01F);
      assertTrue(catalogLight0.isMovable());
      assertTrue(catalogLight0.isProportional());
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertNull(catalogLight0.getGrade());
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertTrue(catalogLight0.isTexturable());
      assertEquals("h&9+\"", catalogLight0.getCreator());
      assertFalse(catalogLight0.isDoorOrWindow());
      assertEquals("h&9+\"", catalogLight0.getName());
      assertEquals("h&9+\"", catalogLight0.getDescription());
      assertEquals((-694.0F), catalogLight0.getHeight(), 0.01F);
      assertFalse(catalogLight0.isModifiable());
      assertEquals("h&9+\"", catalogLight0.getId());
      assertNull(catalogLight0.getCurrency());
      assertEquals((-694.0F), catalogLight0.getElevation(), 0.01F);
      assertTrue(homeLight0.isMovable());
      assertNull(homeLight0.getShininess());
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertTrue(homeLight0.isResizable());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertTrue(homeLight0.isDeformable());
      assertTrue(homeLight0.isVisible());
      assertNull(homeLight0.getCurrency());
      assertEquals("h&9+\"", homeLight0.getName());
      assertEquals((-694.0F), homeLight0.getHeight(), 0.01F);
      assertEquals((-407.5F), homeLight0.getX(), 0.01F);
      assertEquals("h&9+\"", homeLight0.getCatalogId());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertEquals((-815.0F), homeLight0.getWidth(), 0.01F);
      assertFalse(homeLight0.isBackFaceShown());
      assertFalse(homeLight0.isDoorOrWindow());
      assertNull(homeLight0.getColor());
      assertFalse(homeLight0.isModelMirrored());
      assertTrue(homeLight0.isTexturable());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertEquals((-694.0F), homeLight0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertEquals("h&9+\"", homeLight0.getDescription());
      assertEquals((-694.0F), homeLight0.getElevation(), 0.01F);
      assertEquals(0.36957806F, homeLight0.getDepth(), 0.01F);
      assertFalse(homeLight0.isNameVisible());
      assertEquals(0.18478903F, homeLight0.getY(), 0.01F);
      assertEquals(0.0F, homeLight1.getNameYOffset(), 0.01F);
      assertTrue(homeLight1.isVisible());
      assertTrue(homeLight1.isDeformable());
      assertNull(homeLight1.getCurrency());
      assertEquals((-407.5F), homeLight1.getX(), 0.01F);
      assertEquals((-694.0F), homeLight1.getHeight(), 0.01F);
      assertFalse(homeLight1.isNameVisible());
      assertFalse(homeLight1.isBackFaceShown());
      assertEquals(0.18478903F, homeLight1.getY(), 0.01F);
      assertFalse(homeLight1.isModelMirrored());
      assertNull(homeLight1.getColor());
      assertEquals(0.5F, homeLight1.getPower(), 0.01F);
      assertEquals((-694.0F), homeLight1.getElevation(), 0.01F);
      assertEquals("h&9+\"", homeLight1.getName());
      assertEquals(0.0F, homeLight1.getNameXOffset(), 0.01F);
      assertEquals(0.36957806F, homeLight1.getDepth(), 0.01F);
      assertEquals("h&9+\"", homeLight1.getDescription());
      assertEquals(0.0F, homeLight1.getNameAngle(), 0.01F);
      assertEquals("h&9+\"", homeLight1.getCatalogId());
      assertNull(homeLight1.getStaircaseCutOutShape());
      assertTrue(homeLight1.isMovable());
      assertEquals((-815.0F), homeLight1.getWidth(), 0.01F);
      assertFalse(homeLight1.isDoorOrWindow());
      assertTrue(homeLight1.isTexturable());
      assertNull(homeLight1.getShininess());
      assertEquals(0.0F, homeLight1.getAngle(), 0.01F);
      assertTrue(homeLight1.isResizable());
      assertEquals((-694.0F), homeLight1.getGroundElevation(), 0.01F);
      assertEquals(2, lightSourceArray0.length);
      assertNotSame(homeLight0, homeLight1);
      assertNotSame(homeLight1, homeLight0);
      assertNotNull(homeLight1);
      
      HomeLight homeLight2 = (HomeLight)homeLight1.clone();
      assertFalse(homeLight0.equals((Object)homeLight1));
      assertFalse(homeLight1.equals((Object)homeLight0));
      assertFalse(homeLight2.equals((Object)homeLight0));
      assertFalse(homeLight2.equals((Object)homeLight1));
      assertEquals((byte)1, bigDecimal0.byteValue());
      assertEquals((short)1, bigDecimal0.shortValue());
      assertFalse(catalogLight0.isBackFaceShown());
      assertTrue(catalogLight0.isDeformable());
      assertNull(catalogLight0.getInformation());
      assertTrue(catalogLight0.isResizable());
      assertNull(catalogLight0.getCreationDate());
      assertEquals(0.36957806F, catalogLight0.getDepth(), 0.01F);
      assertNull(catalogLight0.getColor());
      assertEquals((-815.0F), catalogLight0.getWidth(), 0.01F);
      assertTrue(catalogLight0.isMovable());
      assertTrue(catalogLight0.isProportional());
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertNull(catalogLight0.getGrade());
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertTrue(catalogLight0.isTexturable());
      assertEquals("h&9+\"", catalogLight0.getCreator());
      assertFalse(catalogLight0.isDoorOrWindow());
      assertEquals("h&9+\"", catalogLight0.getName());
      assertEquals("h&9+\"", catalogLight0.getDescription());
      assertEquals((-694.0F), catalogLight0.getHeight(), 0.01F);
      assertFalse(catalogLight0.isModifiable());
      assertEquals("h&9+\"", catalogLight0.getId());
      assertNull(catalogLight0.getCurrency());
      assertEquals((-694.0F), catalogLight0.getElevation(), 0.01F);
      assertTrue(homeLight0.isMovable());
      assertNull(homeLight0.getShininess());
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertTrue(homeLight0.isResizable());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertTrue(homeLight0.isDeformable());
      assertTrue(homeLight0.isVisible());
      assertNull(homeLight0.getCurrency());
      assertEquals("h&9+\"", homeLight0.getName());
      assertEquals((-694.0F), homeLight0.getHeight(), 0.01F);
      assertEquals((-407.5F), homeLight0.getX(), 0.01F);
      assertEquals("h&9+\"", homeLight0.getCatalogId());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertEquals((-815.0F), homeLight0.getWidth(), 0.01F);
      assertFalse(homeLight0.isBackFaceShown());
      assertFalse(homeLight0.isDoorOrWindow());
      assertNull(homeLight0.getColor());
      assertFalse(homeLight0.isModelMirrored());
      assertTrue(homeLight0.isTexturable());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertEquals((-694.0F), homeLight0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertEquals("h&9+\"", homeLight0.getDescription());
      assertEquals((-694.0F), homeLight0.getElevation(), 0.01F);
      assertEquals(0.36957806F, homeLight0.getDepth(), 0.01F);
      assertFalse(homeLight0.isNameVisible());
      assertEquals(0.18478903F, homeLight0.getY(), 0.01F);
      assertEquals(0.0F, homeLight1.getNameYOffset(), 0.01F);
      assertTrue(homeLight1.isVisible());
      assertTrue(homeLight1.isDeformable());
      assertNull(homeLight1.getCurrency());
      assertEquals((-407.5F), homeLight1.getX(), 0.01F);
      assertEquals((-694.0F), homeLight1.getHeight(), 0.01F);
      assertFalse(homeLight1.isNameVisible());
      assertFalse(homeLight1.isBackFaceShown());
      assertEquals(0.18478903F, homeLight1.getY(), 0.01F);
      assertFalse(homeLight1.isModelMirrored());
      assertNull(homeLight1.getColor());
      assertEquals(0.5F, homeLight1.getPower(), 0.01F);
      assertEquals((-694.0F), homeLight1.getElevation(), 0.01F);
      assertEquals("h&9+\"", homeLight1.getName());
      assertEquals(0.0F, homeLight1.getNameXOffset(), 0.01F);
      assertEquals(0.36957806F, homeLight1.getDepth(), 0.01F);
      assertEquals("h&9+\"", homeLight1.getDescription());
      assertEquals(0.0F, homeLight1.getNameAngle(), 0.01F);
      assertEquals("h&9+\"", homeLight1.getCatalogId());
      assertNull(homeLight1.getStaircaseCutOutShape());
      assertTrue(homeLight1.isMovable());
      assertEquals((-815.0F), homeLight1.getWidth(), 0.01F);
      assertFalse(homeLight1.isDoorOrWindow());
      assertTrue(homeLight1.isTexturable());
      assertNull(homeLight1.getShininess());
      assertEquals(0.0F, homeLight1.getAngle(), 0.01F);
      assertTrue(homeLight1.isResizable());
      assertEquals((-694.0F), homeLight1.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight2.getNameYOffset(), 0.01F);
      assertTrue(homeLight2.isDeformable());
      assertTrue(homeLight2.isVisible());
      assertNull(homeLight2.getShininess());
      assertTrue(homeLight2.isResizable());
      assertNull(homeLight2.getStaircaseCutOutShape());
      assertEquals((-815.0F), homeLight2.getWidth(), 0.01F);
      assertEquals(0.0F, homeLight2.getNameAngle(), 0.01F);
      assertNull(homeLight2.getColor());
      assertTrue(homeLight2.isMovable());
      assertNull(homeLight2.getCurrency());
      assertEquals("h&9+\"", homeLight2.getName());
      assertEquals((-407.5F), homeLight2.getX(), 0.01F);
      assertEquals(0.5F, homeLight2.getPower(), 0.01F);
      assertEquals((-694.0F), homeLight2.getHeight(), 0.01F);
      assertEquals("h&9+\"", homeLight2.getDescription());
      assertEquals((-694.0F), homeLight2.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight2.getNameXOffset(), 0.01F);
      assertEquals("h&9+\"", homeLight2.getCatalogId());
      assertFalse(homeLight2.isModelMirrored());
      assertFalse(homeLight2.isBackFaceShown());
      assertEquals(0.18478903F, homeLight2.getY(), 0.01F);
      assertTrue(homeLight2.isTexturable());
      assertEquals((-694.0F), homeLight2.getElevation(), 0.01F);
      assertFalse(homeLight2.isDoorOrWindow());
      assertFalse(homeLight2.isNameVisible());
      assertEquals(0.0F, homeLight2.getAngle(), 0.01F);
      assertEquals(0.36957806F, homeLight2.getDepth(), 0.01F);
      assertEquals(2, lightSourceArray0.length);
      assertNotSame(homeLight0, homeLight2);
      assertNotSame(homeLight0, homeLight1);
      assertNotSame(homeLight1, homeLight0);
      assertNotSame(homeLight1, homeLight2);
      assertNotSame(homeLight2, homeLight0);
      assertNotSame(homeLight2, homeLight1);
      assertNotNull(homeLight2);
      
      boolean boolean0 = homeLight1.isPointAt(114, (-815.0F), 114);
      assertFalse(homeLight0.equals((Object)homeLight2));
      assertFalse(homeLight0.equals((Object)homeLight1));
      assertFalse(homeLight1.equals((Object)homeLight0));
      assertFalse(homeLight1.equals((Object)homeLight2));
      assertEquals((byte)1, bigDecimal0.byteValue());
      assertEquals((short)1, bigDecimal0.shortValue());
      assertFalse(catalogLight0.isBackFaceShown());
      assertTrue(catalogLight0.isDeformable());
      assertNull(catalogLight0.getInformation());
      assertTrue(catalogLight0.isResizable());
      assertNull(catalogLight0.getCreationDate());
      assertEquals(0.36957806F, catalogLight0.getDepth(), 0.01F);
      assertNull(catalogLight0.getColor());
      assertEquals((-815.0F), catalogLight0.getWidth(), 0.01F);
      assertTrue(catalogLight0.isMovable());
      assertTrue(catalogLight0.isProportional());
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertNull(catalogLight0.getGrade());
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertTrue(catalogLight0.isTexturable());
      assertEquals("h&9+\"", catalogLight0.getCreator());
      assertFalse(catalogLight0.isDoorOrWindow());
      assertEquals("h&9+\"", catalogLight0.getName());
      assertEquals("h&9+\"", catalogLight0.getDescription());
      assertEquals((-694.0F), catalogLight0.getHeight(), 0.01F);
      assertFalse(catalogLight0.isModifiable());
      assertEquals("h&9+\"", catalogLight0.getId());
      assertNull(catalogLight0.getCurrency());
      assertEquals((-694.0F), catalogLight0.getElevation(), 0.01F);
      assertTrue(homeLight0.isMovable());
      assertNull(homeLight0.getShininess());
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertTrue(homeLight0.isResizable());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertTrue(homeLight0.isDeformable());
      assertTrue(homeLight0.isVisible());
      assertNull(homeLight0.getCurrency());
      assertEquals("h&9+\"", homeLight0.getName());
      assertEquals((-694.0F), homeLight0.getHeight(), 0.01F);
      assertEquals((-407.5F), homeLight0.getX(), 0.01F);
      assertEquals("h&9+\"", homeLight0.getCatalogId());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertEquals((-815.0F), homeLight0.getWidth(), 0.01F);
      assertFalse(homeLight0.isBackFaceShown());
      assertFalse(homeLight0.isDoorOrWindow());
      assertNull(homeLight0.getColor());
      assertFalse(homeLight0.isModelMirrored());
      assertTrue(homeLight0.isTexturable());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertEquals((-694.0F), homeLight0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertEquals("h&9+\"", homeLight0.getDescription());
      assertEquals((-694.0F), homeLight0.getElevation(), 0.01F);
      assertEquals(0.36957806F, homeLight0.getDepth(), 0.01F);
      assertFalse(homeLight0.isNameVisible());
      assertEquals(0.18478903F, homeLight0.getY(), 0.01F);
      assertEquals(0.0F, homeLight1.getNameYOffset(), 0.01F);
      assertTrue(homeLight1.isVisible());
      assertTrue(homeLight1.isDeformable());
      assertNull(homeLight1.getCurrency());
      assertEquals((-407.5F), homeLight1.getX(), 0.01F);
      assertEquals((-694.0F), homeLight1.getHeight(), 0.01F);
      assertFalse(homeLight1.isNameVisible());
      assertFalse(homeLight1.isBackFaceShown());
      assertEquals(0.18478903F, homeLight1.getY(), 0.01F);
      assertFalse(homeLight1.isModelMirrored());
      assertNull(homeLight1.getColor());
      assertEquals(0.5F, homeLight1.getPower(), 0.01F);
      assertEquals((-694.0F), homeLight1.getElevation(), 0.01F);
      assertEquals("h&9+\"", homeLight1.getName());
      assertEquals(0.0F, homeLight1.getNameXOffset(), 0.01F);
      assertEquals(0.36957806F, homeLight1.getDepth(), 0.01F);
      assertEquals("h&9+\"", homeLight1.getDescription());
      assertEquals(0.0F, homeLight1.getNameAngle(), 0.01F);
      assertEquals("h&9+\"", homeLight1.getCatalogId());
      assertNull(homeLight1.getStaircaseCutOutShape());
      assertTrue(homeLight1.isMovable());
      assertEquals((-815.0F), homeLight1.getWidth(), 0.01F);
      assertFalse(homeLight1.isDoorOrWindow());
      assertTrue(homeLight1.isTexturable());
      assertNull(homeLight1.getShininess());
      assertEquals(0.0F, homeLight1.getAngle(), 0.01F);
      assertTrue(homeLight1.isResizable());
      assertEquals((-694.0F), homeLight1.getGroundElevation(), 0.01F);
      assertEquals(2, lightSourceArray0.length);
      assertNotSame(homeLight0, homeLight2);
      assertNotSame(homeLight0, homeLight1);
      assertNotSame(homeLight1, homeLight0);
      assertNotSame(homeLight1, homeLight2);
      assertFalse(boolean0);
      
      homeLight1.setName("h&9+\"");
      assertFalse(homeLight0.equals((Object)homeLight2));
      assertFalse(homeLight0.equals((Object)homeLight1));
      assertFalse(homeLight1.equals((Object)homeLight0));
      assertFalse(homeLight1.equals((Object)homeLight2));
      assertEquals((byte)1, bigDecimal0.byteValue());
      assertEquals((short)1, bigDecimal0.shortValue());
      assertFalse(catalogLight0.isBackFaceShown());
      assertTrue(catalogLight0.isDeformable());
      assertNull(catalogLight0.getInformation());
      assertTrue(catalogLight0.isResizable());
      assertNull(catalogLight0.getCreationDate());
      assertEquals(0.36957806F, catalogLight0.getDepth(), 0.01F);
      assertNull(catalogLight0.getColor());
      assertEquals((-815.0F), catalogLight0.getWidth(), 0.01F);
      assertTrue(catalogLight0.isMovable());
      assertTrue(catalogLight0.isProportional());
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertNull(catalogLight0.getGrade());
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertTrue(catalogLight0.isTexturable());
      assertEquals("h&9+\"", catalogLight0.getCreator());
      assertFalse(catalogLight0.isDoorOrWindow());
      assertEquals("h&9+\"", catalogLight0.getName());
      assertEquals("h&9+\"", catalogLight0.getDescription());
      assertEquals((-694.0F), catalogLight0.getHeight(), 0.01F);
      assertFalse(catalogLight0.isModifiable());
      assertEquals("h&9+\"", catalogLight0.getId());
      assertNull(catalogLight0.getCurrency());
      assertEquals((-694.0F), catalogLight0.getElevation(), 0.01F);
      assertTrue(homeLight0.isMovable());
      assertNull(homeLight0.getShininess());
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertTrue(homeLight0.isResizable());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertTrue(homeLight0.isDeformable());
      assertTrue(homeLight0.isVisible());
      assertNull(homeLight0.getCurrency());
      assertEquals("h&9+\"", homeLight0.getName());
      assertEquals((-694.0F), homeLight0.getHeight(), 0.01F);
      assertEquals((-407.5F), homeLight0.getX(), 0.01F);
      assertEquals("h&9+\"", homeLight0.getCatalogId());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertEquals((-815.0F), homeLight0.getWidth(), 0.01F);
      assertFalse(homeLight0.isBackFaceShown());
      assertFalse(homeLight0.isDoorOrWindow());
      assertNull(homeLight0.getColor());
      assertFalse(homeLight0.isModelMirrored());
      assertTrue(homeLight0.isTexturable());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertEquals((-694.0F), homeLight0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertEquals("h&9+\"", homeLight0.getDescription());
      assertEquals((-694.0F), homeLight0.getElevation(), 0.01F);
      assertEquals(0.36957806F, homeLight0.getDepth(), 0.01F);
      assertFalse(homeLight0.isNameVisible());
      assertEquals(0.18478903F, homeLight0.getY(), 0.01F);
      assertEquals(0.0F, homeLight1.getNameYOffset(), 0.01F);
      assertTrue(homeLight1.isVisible());
      assertTrue(homeLight1.isDeformable());
      assertNull(homeLight1.getCurrency());
      assertEquals((-407.5F), homeLight1.getX(), 0.01F);
      assertEquals((-694.0F), homeLight1.getHeight(), 0.01F);
      assertFalse(homeLight1.isNameVisible());
      assertFalse(homeLight1.isBackFaceShown());
      assertEquals(0.18478903F, homeLight1.getY(), 0.01F);
      assertFalse(homeLight1.isModelMirrored());
      assertNull(homeLight1.getColor());
      assertEquals(0.5F, homeLight1.getPower(), 0.01F);
      assertEquals((-694.0F), homeLight1.getElevation(), 0.01F);
      assertEquals("h&9+\"", homeLight1.getName());
      assertEquals(0.0F, homeLight1.getNameXOffset(), 0.01F);
      assertEquals(0.36957806F, homeLight1.getDepth(), 0.01F);
      assertEquals("h&9+\"", homeLight1.getDescription());
      assertEquals(0.0F, homeLight1.getNameAngle(), 0.01F);
      assertEquals("h&9+\"", homeLight1.getCatalogId());
      assertNull(homeLight1.getStaircaseCutOutShape());
      assertTrue(homeLight1.isMovable());
      assertEquals((-815.0F), homeLight1.getWidth(), 0.01F);
      assertFalse(homeLight1.isDoorOrWindow());
      assertTrue(homeLight1.isTexturable());
      assertNull(homeLight1.getShininess());
      assertEquals(0.0F, homeLight1.getAngle(), 0.01F);
      assertTrue(homeLight1.isResizable());
      assertEquals((-694.0F), homeLight1.getGroundElevation(), 0.01F);
      assertEquals(2, lightSourceArray0.length);
      assertNotSame(homeLight0, homeLight2);
      assertNotSame(homeLight0, homeLight1);
      assertNotSame(homeLight1, homeLight0);
      assertNotSame(homeLight1, homeLight2);
      
      homeLight2.setModelMirrored(true);
      assertFalse(homeLight0.equals((Object)homeLight2));
      assertFalse(homeLight0.equals((Object)homeLight1));
      assertFalse(homeLight1.equals((Object)homeLight0));
      assertFalse(homeLight1.equals((Object)homeLight2));
      assertFalse(homeLight2.equals((Object)homeLight0));
      assertFalse(homeLight2.equals((Object)homeLight1));
      assertEquals((byte)1, bigDecimal0.byteValue());
      assertEquals((short)1, bigDecimal0.shortValue());
      assertFalse(catalogLight0.isBackFaceShown());
      assertTrue(catalogLight0.isDeformable());
      assertNull(catalogLight0.getInformation());
      assertTrue(catalogLight0.isResizable());
      assertNull(catalogLight0.getCreationDate());
      assertEquals(0.36957806F, catalogLight0.getDepth(), 0.01F);
      assertNull(catalogLight0.getColor());
      assertEquals((-815.0F), catalogLight0.getWidth(), 0.01F);
      assertTrue(catalogLight0.isMovable());
      assertTrue(catalogLight0.isProportional());
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertNull(catalogLight0.getGrade());
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertTrue(catalogLight0.isTexturable());
      assertEquals("h&9+\"", catalogLight0.getCreator());
      assertFalse(catalogLight0.isDoorOrWindow());
      assertEquals("h&9+\"", catalogLight0.getName());
      assertEquals("h&9+\"", catalogLight0.getDescription());
      assertEquals((-694.0F), catalogLight0.getHeight(), 0.01F);
      assertFalse(catalogLight0.isModifiable());
      assertEquals("h&9+\"", catalogLight0.getId());
      assertNull(catalogLight0.getCurrency());
      assertEquals((-694.0F), catalogLight0.getElevation(), 0.01F);
      assertTrue(homeLight0.isMovable());
      assertNull(homeLight0.getShininess());
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertTrue(homeLight0.isResizable());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertTrue(homeLight0.isDeformable());
      assertTrue(homeLight0.isVisible());
      assertNull(homeLight0.getCurrency());
      assertEquals("h&9+\"", homeLight0.getName());
      assertEquals((-694.0F), homeLight0.getHeight(), 0.01F);
      assertEquals((-407.5F), homeLight0.getX(), 0.01F);
      assertEquals("h&9+\"", homeLight0.getCatalogId());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertEquals((-815.0F), homeLight0.getWidth(), 0.01F);
      assertFalse(homeLight0.isBackFaceShown());
      assertFalse(homeLight0.isDoorOrWindow());
      assertNull(homeLight0.getColor());
      assertFalse(homeLight0.isModelMirrored());
      assertTrue(homeLight0.isTexturable());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertEquals((-694.0F), homeLight0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertEquals("h&9+\"", homeLight0.getDescription());
      assertEquals((-694.0F), homeLight0.getElevation(), 0.01F);
      assertEquals(0.36957806F, homeLight0.getDepth(), 0.01F);
      assertFalse(homeLight0.isNameVisible());
      assertEquals(0.18478903F, homeLight0.getY(), 0.01F);
      assertEquals(0.0F, homeLight1.getNameYOffset(), 0.01F);
      assertTrue(homeLight1.isVisible());
      assertTrue(homeLight1.isDeformable());
      assertNull(homeLight1.getCurrency());
      assertEquals((-407.5F), homeLight1.getX(), 0.01F);
      assertEquals((-694.0F), homeLight1.getHeight(), 0.01F);
      assertFalse(homeLight1.isNameVisible());
      assertFalse(homeLight1.isBackFaceShown());
      assertEquals(0.18478903F, homeLight1.getY(), 0.01F);
      assertFalse(homeLight1.isModelMirrored());
      assertNull(homeLight1.getColor());
      assertEquals(0.5F, homeLight1.getPower(), 0.01F);
      assertEquals((-694.0F), homeLight1.getElevation(), 0.01F);
      assertEquals("h&9+\"", homeLight1.getName());
      assertEquals(0.0F, homeLight1.getNameXOffset(), 0.01F);
      assertEquals(0.36957806F, homeLight1.getDepth(), 0.01F);
      assertEquals("h&9+\"", homeLight1.getDescription());
      assertEquals(0.0F, homeLight1.getNameAngle(), 0.01F);
      assertEquals("h&9+\"", homeLight1.getCatalogId());
      assertNull(homeLight1.getStaircaseCutOutShape());
      assertTrue(homeLight1.isMovable());
      assertEquals((-815.0F), homeLight1.getWidth(), 0.01F);
      assertFalse(homeLight1.isDoorOrWindow());
      assertTrue(homeLight1.isTexturable());
      assertNull(homeLight1.getShininess());
      assertEquals(0.0F, homeLight1.getAngle(), 0.01F);
      assertTrue(homeLight1.isResizable());
      assertEquals((-694.0F), homeLight1.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight2.getNameYOffset(), 0.01F);
      assertTrue(homeLight2.isDeformable());
      assertTrue(homeLight2.isVisible());
      assertNull(homeLight2.getShininess());
      assertTrue(homeLight2.isResizable());
      assertNull(homeLight2.getStaircaseCutOutShape());
      assertEquals((-815.0F), homeLight2.getWidth(), 0.01F);
      assertEquals(0.0F, homeLight2.getNameAngle(), 0.01F);
      assertTrue(homeLight2.isModelMirrored());
      assertNull(homeLight2.getColor());
      assertTrue(homeLight2.isMovable());
      assertNull(homeLight2.getCurrency());
      assertEquals("h&9+\"", homeLight2.getName());
      assertEquals((-407.5F), homeLight2.getX(), 0.01F);
      assertEquals(0.5F, homeLight2.getPower(), 0.01F);
      assertEquals((-694.0F), homeLight2.getHeight(), 0.01F);
      assertEquals("h&9+\"", homeLight2.getDescription());
      assertEquals((-694.0F), homeLight2.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight2.getNameXOffset(), 0.01F);
      assertEquals("h&9+\"", homeLight2.getCatalogId());
      assertFalse(homeLight2.isBackFaceShown());
      assertEquals(0.18478903F, homeLight2.getY(), 0.01F);
      assertTrue(homeLight2.isTexturable());
      assertEquals((-694.0F), homeLight2.getElevation(), 0.01F);
      assertFalse(homeLight2.isDoorOrWindow());
      assertFalse(homeLight2.isNameVisible());
      assertEquals(0.0F, homeLight2.getAngle(), 0.01F);
      assertEquals(0.36957806F, homeLight2.getDepth(), 0.01F);
      assertEquals(2, lightSourceArray0.length);
      assertNotSame(homeLight0, homeLight2);
      assertNotSame(homeLight0, homeLight1);
      assertNotSame(homeLight1, homeLight0);
      assertNotSame(homeLight1, homeLight2);
      assertNotSame(homeLight2, homeLight0);
      assertNotSame(homeLight2, homeLight1);
      
      boolean boolean1 = homeLight0.isBottomLeftPointAt(0, 407.5F, (-694.0F));
      assertFalse(homeLight0.equals((Object)homeLight2));
      assertFalse(homeLight0.equals((Object)homeLight1));
      assertTrue(boolean1 == boolean0);
      assertEquals((byte)1, bigDecimal0.byteValue());
      assertEquals((short)1, bigDecimal0.shortValue());
      assertFalse(catalogLight0.isBackFaceShown());
      assertTrue(catalogLight0.isDeformable());
      assertNull(catalogLight0.getInformation());
      assertTrue(catalogLight0.isResizable());
      assertNull(catalogLight0.getCreationDate());
      assertEquals(0.36957806F, catalogLight0.getDepth(), 0.01F);
      assertNull(catalogLight0.getColor());
      assertEquals((-815.0F), catalogLight0.getWidth(), 0.01F);
      assertTrue(catalogLight0.isMovable());
      assertTrue(catalogLight0.isProportional());
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertNull(catalogLight0.getGrade());
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertTrue(catalogLight0.isTexturable());
      assertEquals("h&9+\"", catalogLight0.getCreator());
      assertFalse(catalogLight0.isDoorOrWindow());
      assertEquals("h&9+\"", catalogLight0.getName());
      assertEquals("h&9+\"", catalogLight0.getDescription());
      assertEquals((-694.0F), catalogLight0.getHeight(), 0.01F);
      assertFalse(catalogLight0.isModifiable());
      assertEquals("h&9+\"", catalogLight0.getId());
      assertNull(catalogLight0.getCurrency());
      assertEquals((-694.0F), catalogLight0.getElevation(), 0.01F);
      assertTrue(homeLight0.isMovable());
      assertNull(homeLight0.getShininess());
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertTrue(homeLight0.isResizable());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertTrue(homeLight0.isDeformable());
      assertTrue(homeLight0.isVisible());
      assertNull(homeLight0.getCurrency());
      assertEquals("h&9+\"", homeLight0.getName());
      assertEquals((-694.0F), homeLight0.getHeight(), 0.01F);
      assertEquals((-407.5F), homeLight0.getX(), 0.01F);
      assertEquals("h&9+\"", homeLight0.getCatalogId());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertEquals((-815.0F), homeLight0.getWidth(), 0.01F);
      assertFalse(homeLight0.isBackFaceShown());
      assertFalse(homeLight0.isDoorOrWindow());
      assertNull(homeLight0.getColor());
      assertFalse(homeLight0.isModelMirrored());
      assertTrue(homeLight0.isTexturable());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertEquals((-694.0F), homeLight0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertEquals("h&9+\"", homeLight0.getDescription());
      assertEquals((-694.0F), homeLight0.getElevation(), 0.01F);
      assertEquals(0.36957806F, homeLight0.getDepth(), 0.01F);
      assertFalse(homeLight0.isNameVisible());
      assertEquals(0.18478903F, homeLight0.getY(), 0.01F);
      assertEquals(2, lightSourceArray0.length);
      assertNotSame(homeLight0, homeLight2);
      assertNotSame(homeLight0, homeLight1);
      assertFalse(boolean1);
      
      Integer integer0 = new Integer(2146617363);
      assertNotNull(integer0);
      assertEquals(2146617363, (int)integer0);
      
      homeLight2.setColor(integer0);
      assertFalse(homeLight0.equals((Object)homeLight2));
      assertFalse(homeLight0.equals((Object)homeLight1));
      assertFalse(homeLight1.equals((Object)homeLight0));
      assertFalse(homeLight1.equals((Object)homeLight2));
      assertFalse(homeLight2.equals((Object)homeLight0));
      assertFalse(homeLight2.equals((Object)homeLight1));
      assertEquals((byte)1, bigDecimal0.byteValue());
      assertEquals((short)1, bigDecimal0.shortValue());
      assertFalse(catalogLight0.isBackFaceShown());
      assertTrue(catalogLight0.isDeformable());
      assertNull(catalogLight0.getInformation());
      assertTrue(catalogLight0.isResizable());
      assertNull(catalogLight0.getCreationDate());
      assertEquals(0.36957806F, catalogLight0.getDepth(), 0.01F);
      assertNull(catalogLight0.getColor());
      assertEquals((-815.0F), catalogLight0.getWidth(), 0.01F);
      assertTrue(catalogLight0.isMovable());
      assertTrue(catalogLight0.isProportional());
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertNull(catalogLight0.getGrade());
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertTrue(catalogLight0.isTexturable());
      assertEquals("h&9+\"", catalogLight0.getCreator());
      assertFalse(catalogLight0.isDoorOrWindow());
      assertEquals("h&9+\"", catalogLight0.getName());
      assertEquals("h&9+\"", catalogLight0.getDescription());
      assertEquals((-694.0F), catalogLight0.getHeight(), 0.01F);
      assertFalse(catalogLight0.isModifiable());
      assertEquals("h&9+\"", catalogLight0.getId());
      assertNull(catalogLight0.getCurrency());
      assertEquals((-694.0F), catalogLight0.getElevation(), 0.01F);
      assertTrue(homeLight0.isMovable());
      assertNull(homeLight0.getShininess());
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertTrue(homeLight0.isResizable());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertTrue(homeLight0.isDeformable());
      assertTrue(homeLight0.isVisible());
      assertNull(homeLight0.getCurrency());
      assertEquals("h&9+\"", homeLight0.getName());
      assertEquals((-694.0F), homeLight0.getHeight(), 0.01F);
      assertEquals((-407.5F), homeLight0.getX(), 0.01F);
      assertEquals("h&9+\"", homeLight0.getCatalogId());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertEquals((-815.0F), homeLight0.getWidth(), 0.01F);
      assertFalse(homeLight0.isBackFaceShown());
      assertFalse(homeLight0.isDoorOrWindow());
      assertNull(homeLight0.getColor());
      assertFalse(homeLight0.isModelMirrored());
      assertTrue(homeLight0.isTexturable());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertEquals((-694.0F), homeLight0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertEquals("h&9+\"", homeLight0.getDescription());
      assertEquals((-694.0F), homeLight0.getElevation(), 0.01F);
      assertEquals(0.36957806F, homeLight0.getDepth(), 0.01F);
      assertFalse(homeLight0.isNameVisible());
      assertEquals(0.18478903F, homeLight0.getY(), 0.01F);
      assertEquals(0.0F, homeLight1.getNameYOffset(), 0.01F);
      assertTrue(homeLight1.isVisible());
      assertTrue(homeLight1.isDeformable());
      assertNull(homeLight1.getCurrency());
      assertEquals((-407.5F), homeLight1.getX(), 0.01F);
      assertEquals((-694.0F), homeLight1.getHeight(), 0.01F);
      assertFalse(homeLight1.isNameVisible());
      assertFalse(homeLight1.isBackFaceShown());
      assertEquals(0.18478903F, homeLight1.getY(), 0.01F);
      assertFalse(homeLight1.isModelMirrored());
      assertNull(homeLight1.getColor());
      assertEquals(0.5F, homeLight1.getPower(), 0.01F);
      assertEquals((-694.0F), homeLight1.getElevation(), 0.01F);
      assertEquals("h&9+\"", homeLight1.getName());
      assertEquals(0.0F, homeLight1.getNameXOffset(), 0.01F);
      assertEquals(0.36957806F, homeLight1.getDepth(), 0.01F);
      assertEquals("h&9+\"", homeLight1.getDescription());
      assertEquals(0.0F, homeLight1.getNameAngle(), 0.01F);
      assertEquals("h&9+\"", homeLight1.getCatalogId());
      assertNull(homeLight1.getStaircaseCutOutShape());
      assertTrue(homeLight1.isMovable());
      assertEquals((-815.0F), homeLight1.getWidth(), 0.01F);
      assertFalse(homeLight1.isDoorOrWindow());
      assertTrue(homeLight1.isTexturable());
      assertNull(homeLight1.getShininess());
      assertEquals(0.0F, homeLight1.getAngle(), 0.01F);
      assertTrue(homeLight1.isResizable());
      assertEquals((-694.0F), homeLight1.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight2.getNameYOffset(), 0.01F);
      assertTrue(homeLight2.isDeformable());
      assertTrue(homeLight2.isVisible());
      assertNull(homeLight2.getShininess());
      assertTrue(homeLight2.isResizable());
      assertNull(homeLight2.getStaircaseCutOutShape());
      assertEquals((-815.0F), homeLight2.getWidth(), 0.01F);
      assertEquals(0.0F, homeLight2.getNameAngle(), 0.01F);
      assertTrue(homeLight2.isModelMirrored());
      assertTrue(homeLight2.isMovable());
      assertNull(homeLight2.getCurrency());
      assertEquals("h&9+\"", homeLight2.getName());
      assertEquals((-407.5F), homeLight2.getX(), 0.01F);
      assertEquals(0.5F, homeLight2.getPower(), 0.01F);
      assertEquals((-694.0F), homeLight2.getHeight(), 0.01F);
      assertEquals("h&9+\"", homeLight2.getDescription());
      assertEquals((-694.0F), homeLight2.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight2.getNameXOffset(), 0.01F);
      assertEquals("h&9+\"", homeLight2.getCatalogId());
      assertFalse(homeLight2.isBackFaceShown());
      assertEquals(0.18478903F, homeLight2.getY(), 0.01F);
      assertEquals(2146617363, (int)homeLight2.getColor());
      assertTrue(homeLight2.isTexturable());
      assertEquals((-694.0F), homeLight2.getElevation(), 0.01F);
      assertFalse(homeLight2.isDoorOrWindow());
      assertFalse(homeLight2.isNameVisible());
      assertEquals(0.0F, homeLight2.getAngle(), 0.01F);
      assertEquals(0.36957806F, homeLight2.getDepth(), 0.01F);
      assertEquals(2, lightSourceArray0.length);
      assertNotSame(homeLight0, homeLight2);
      assertNotSame(homeLight0, homeLight1);
      assertNotSame(homeLight1, homeLight0);
      assertNotSame(homeLight1, homeLight2);
      assertNotSame(homeLight2, homeLight0);
      assertNotSame(homeLight2, homeLight1);
      
      Content content0 = homeLight0.getIcon();
      assertFalse(homeLight0.equals((Object)homeLight2));
      assertFalse(homeLight0.equals((Object)homeLight1));
      assertEquals((byte)1, bigDecimal0.byteValue());
      assertEquals((short)1, bigDecimal0.shortValue());
      assertFalse(catalogLight0.isBackFaceShown());
      assertTrue(catalogLight0.isDeformable());
      assertNull(catalogLight0.getInformation());
      assertTrue(catalogLight0.isResizable());
      assertNull(catalogLight0.getCreationDate());
      assertEquals(0.36957806F, catalogLight0.getDepth(), 0.01F);
      assertNull(catalogLight0.getColor());
      assertEquals((-815.0F), catalogLight0.getWidth(), 0.01F);
      assertTrue(catalogLight0.isMovable());
      assertTrue(catalogLight0.isProportional());
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertNull(catalogLight0.getGrade());
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertTrue(catalogLight0.isTexturable());
      assertEquals("h&9+\"", catalogLight0.getCreator());
      assertFalse(catalogLight0.isDoorOrWindow());
      assertEquals("h&9+\"", catalogLight0.getName());
      assertEquals("h&9+\"", catalogLight0.getDescription());
      assertEquals((-694.0F), catalogLight0.getHeight(), 0.01F);
      assertFalse(catalogLight0.isModifiable());
      assertEquals("h&9+\"", catalogLight0.getId());
      assertNull(catalogLight0.getCurrency());
      assertEquals((-694.0F), catalogLight0.getElevation(), 0.01F);
      assertTrue(homeLight0.isMovable());
      assertNull(homeLight0.getShininess());
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertTrue(homeLight0.isResizable());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertTrue(homeLight0.isDeformable());
      assertTrue(homeLight0.isVisible());
      assertNull(homeLight0.getCurrency());
      assertEquals("h&9+\"", homeLight0.getName());
      assertEquals((-694.0F), homeLight0.getHeight(), 0.01F);
      assertEquals((-407.5F), homeLight0.getX(), 0.01F);
      assertEquals("h&9+\"", homeLight0.getCatalogId());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertEquals((-815.0F), homeLight0.getWidth(), 0.01F);
      assertFalse(homeLight0.isBackFaceShown());
      assertFalse(homeLight0.isDoorOrWindow());
      assertNull(homeLight0.getColor());
      assertFalse(homeLight0.isModelMirrored());
      assertTrue(homeLight0.isTexturable());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertEquals((-694.0F), homeLight0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertEquals("h&9+\"", homeLight0.getDescription());
      assertEquals((-694.0F), homeLight0.getElevation(), 0.01F);
      assertEquals(0.36957806F, homeLight0.getDepth(), 0.01F);
      assertFalse(homeLight0.isNameVisible());
      assertEquals(0.18478903F, homeLight0.getY(), 0.01F);
      assertEquals(2, lightSourceArray0.length);
      assertNotSame(homeLight0, homeLight2);
      assertNotSame(homeLight0, homeLight1);
      assertNull(content0);
      
      BigDecimal bigDecimal1 = homeLight2.getValueAddedTax();
      assertFalse(homeLight0.equals((Object)homeLight2));
      assertFalse(homeLight0.equals((Object)homeLight1));
      assertFalse(homeLight1.equals((Object)homeLight0));
      assertFalse(homeLight1.equals((Object)homeLight2));
      assertFalse(homeLight2.equals((Object)homeLight0));
      assertFalse(homeLight2.equals((Object)homeLight1));
      assertEquals((short)1, bigDecimal1.shortValue());
      assertEquals((byte)1, bigDecimal1.byteValue());
      assertEquals((byte)1, bigDecimal0.byteValue());
      assertEquals((short)1, bigDecimal0.shortValue());
      assertFalse(catalogLight0.isBackFaceShown());
      assertTrue(catalogLight0.isDeformable());
      assertNull(catalogLight0.getInformation());
      assertTrue(catalogLight0.isResizable());
      assertNull(catalogLight0.getCreationDate());
      assertEquals(0.36957806F, catalogLight0.getDepth(), 0.01F);
      assertNull(catalogLight0.getColor());
      assertEquals((-815.0F), catalogLight0.getWidth(), 0.01F);
      assertTrue(catalogLight0.isMovable());
      assertTrue(catalogLight0.isProportional());
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertNull(catalogLight0.getGrade());
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertTrue(catalogLight0.isTexturable());
      assertEquals("h&9+\"", catalogLight0.getCreator());
      assertFalse(catalogLight0.isDoorOrWindow());
      assertEquals("h&9+\"", catalogLight0.getName());
      assertEquals("h&9+\"", catalogLight0.getDescription());
      assertEquals((-694.0F), catalogLight0.getHeight(), 0.01F);
      assertFalse(catalogLight0.isModifiable());
      assertEquals("h&9+\"", catalogLight0.getId());
      assertNull(catalogLight0.getCurrency());
      assertEquals((-694.0F), catalogLight0.getElevation(), 0.01F);
      assertTrue(homeLight0.isMovable());
      assertNull(homeLight0.getShininess());
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertTrue(homeLight0.isResizable());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertTrue(homeLight0.isDeformable());
      assertTrue(homeLight0.isVisible());
      assertNull(homeLight0.getCurrency());
      assertEquals("h&9+\"", homeLight0.getName());
      assertEquals((-694.0F), homeLight0.getHeight(), 0.01F);
      assertEquals((-407.5F), homeLight0.getX(), 0.01F);
      assertEquals("h&9+\"", homeLight0.getCatalogId());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertEquals((-815.0F), homeLight0.getWidth(), 0.01F);
      assertFalse(homeLight0.isBackFaceShown());
      assertFalse(homeLight0.isDoorOrWindow());
      assertNull(homeLight0.getColor());
      assertFalse(homeLight0.isModelMirrored());
      assertTrue(homeLight0.isTexturable());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertEquals((-694.0F), homeLight0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertEquals("h&9+\"", homeLight0.getDescription());
      assertEquals((-694.0F), homeLight0.getElevation(), 0.01F);
      assertEquals(0.36957806F, homeLight0.getDepth(), 0.01F);
      assertFalse(homeLight0.isNameVisible());
      assertEquals(0.18478903F, homeLight0.getY(), 0.01F);
      assertEquals(0.0F, homeLight1.getNameYOffset(), 0.01F);
      assertTrue(homeLight1.isVisible());
      assertTrue(homeLight1.isDeformable());
      assertNull(homeLight1.getCurrency());
      assertEquals((-407.5F), homeLight1.getX(), 0.01F);
      assertEquals((-694.0F), homeLight1.getHeight(), 0.01F);
      assertFalse(homeLight1.isNameVisible());
      assertFalse(homeLight1.isBackFaceShown());
      assertEquals(0.18478903F, homeLight1.getY(), 0.01F);
      assertFalse(homeLight1.isModelMirrored());
      assertNull(homeLight1.getColor());
      assertEquals(0.5F, homeLight1.getPower(), 0.01F);
      assertEquals((-694.0F), homeLight1.getElevation(), 0.01F);
      assertEquals("h&9+\"", homeLight1.getName());
      assertEquals(0.0F, homeLight1.getNameXOffset(), 0.01F);
      assertEquals(0.36957806F, homeLight1.getDepth(), 0.01F);
      assertEquals("h&9+\"", homeLight1.getDescription());
      assertEquals(0.0F, homeLight1.getNameAngle(), 0.01F);
      assertEquals("h&9+\"", homeLight1.getCatalogId());
      assertNull(homeLight1.getStaircaseCutOutShape());
      assertTrue(homeLight1.isMovable());
      assertEquals((-815.0F), homeLight1.getWidth(), 0.01F);
      assertFalse(homeLight1.isDoorOrWindow());
      assertTrue(homeLight1.isTexturable());
      assertNull(homeLight1.getShininess());
      assertEquals(0.0F, homeLight1.getAngle(), 0.01F);
      assertTrue(homeLight1.isResizable());
      assertEquals((-694.0F), homeLight1.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight2.getNameYOffset(), 0.01F);
      assertTrue(homeLight2.isDeformable());
      assertTrue(homeLight2.isVisible());
      assertNull(homeLight2.getShininess());
      assertTrue(homeLight2.isResizable());
      assertNull(homeLight2.getStaircaseCutOutShape());
      assertEquals((-815.0F), homeLight2.getWidth(), 0.01F);
      assertEquals(0.0F, homeLight2.getNameAngle(), 0.01F);
      assertTrue(homeLight2.isModelMirrored());
      assertTrue(homeLight2.isMovable());
      assertNull(homeLight2.getCurrency());
      assertEquals("h&9+\"", homeLight2.getName());
      assertEquals((-407.5F), homeLight2.getX(), 0.01F);
      assertEquals(0.5F, homeLight2.getPower(), 0.01F);
      assertEquals((-694.0F), homeLight2.getHeight(), 0.01F);
      assertEquals("h&9+\"", homeLight2.getDescription());
      assertEquals((-694.0F), homeLight2.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight2.getNameXOffset(), 0.01F);
      assertEquals("h&9+\"", homeLight2.getCatalogId());
      assertFalse(homeLight2.isBackFaceShown());
      assertEquals(0.18478903F, homeLight2.getY(), 0.01F);
      assertEquals(2146617363, (int)homeLight2.getColor());
      assertTrue(homeLight2.isTexturable());
      assertEquals((-694.0F), homeLight2.getElevation(), 0.01F);
      assertFalse(homeLight2.isDoorOrWindow());
      assertFalse(homeLight2.isNameVisible());
      assertEquals(0.0F, homeLight2.getAngle(), 0.01F);
      assertEquals(0.36957806F, homeLight2.getDepth(), 0.01F);
      assertEquals(2, lightSourceArray0.length);
      assertSame(bigDecimal1, bigDecimal0);
      assertSame(bigDecimal0, bigDecimal1);
      assertNotSame(homeLight0, homeLight2);
      assertNotSame(homeLight0, homeLight1);
      assertNotSame(homeLight1, homeLight0);
      assertNotSame(homeLight1, homeLight2);
      assertNotSame(homeLight2, homeLight0);
      assertNotSame(homeLight2, homeLight1);
      assertNotNull(bigDecimal1);
  }

  @Test(timeout = 4000)
  public void test245()  throws Throwable  {
      LightSource[] lightSourceArray0 = new LightSource[2];
      LightSource lightSource0 = new LightSource((-815.0F), 0.0F, 0.0F, 114);
      assertEquals(0.0F, lightSource0.getY(), 0.01F);
      assertEquals(0.0F, lightSource0.getZ(), 0.01F);
      assertEquals((-815.0F), lightSource0.getX(), 0.01F);
      assertEquals(114, lightSource0.getColor());
      assertNull(lightSource0.getDiameter());
      assertNotNull(lightSource0);
      
      lightSourceArray0[0] = lightSource0;
      boolean boolean0 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      LightSource lightSource1 = new LightSource((-694.0F), 2965.994F, (-127.62969F), 0);
      assertFalse(lightSource1.equals((Object)lightSource0));
      assertEquals((-694.0F), lightSource1.getX(), 0.01F);
      assertEquals(2965.994F, lightSource1.getY(), 0.01F);
      assertEquals(0, lightSource1.getColor());
      assertEquals((-127.62969F), lightSource1.getZ(), 0.01F);
      assertNull(lightSource1.getDiameter());
      assertNotNull(lightSource1);
      
      BigDecimal bigDecimal0 = BigDecimal.TEN;
      assertEquals((byte)10, bigDecimal0.byteValue());
      assertEquals((short)10, bigDecimal0.shortValue());
      assertNotNull(bigDecimal0);
      
      CatalogLight catalogLight0 = new CatalogLight("h&*+\"", "h&*+\"", "h&*+\"", (Content) null, (Content) null, (-815.0F), 0.3926991F, (-694.0F), (-694.0F), true, lightSourceArray0, (float[][]) null, "h&*+\"", true, bigDecimal0, bigDecimal0);
      assertEquals((byte)10, bigDecimal0.byteValue());
      assertEquals((short)10, bigDecimal0.shortValue());
      assertNull(catalogLight0.getCreationDate());
      assertTrue(catalogLight0.isMovable());
      assertFalse(catalogLight0.isBackFaceShown());
      assertEquals("h&*+\"", catalogLight0.getId());
      assertNull(catalogLight0.getColor());
      assertNull(catalogLight0.getInformation());
      assertTrue(catalogLight0.isDeformable());
      assertEquals(0.3926991F, catalogLight0.getDepth(), 0.01F);
      assertNull(catalogLight0.getCurrency());
      assertTrue(catalogLight0.isProportional());
      assertEquals("h&*+\"", catalogLight0.getName());
      assertEquals("h&*+\"", catalogLight0.getCreator());
      assertFalse(catalogLight0.isDoorOrWindow());
      assertEquals("h&*+\"", catalogLight0.getDescription());
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertEquals((-694.0F), catalogLight0.getElevation(), 0.01F);
      assertTrue(catalogLight0.isTexturable());
      assertNull(catalogLight0.getGrade());
      assertEquals((-815.0F), catalogLight0.getWidth(), 0.01F);
      assertFalse(catalogLight0.isModifiable());
      assertTrue(catalogLight0.isResizable());
      assertEquals((-694.0F), catalogLight0.getHeight(), 0.01F);
      assertEquals(2, lightSourceArray0.length);
      assertNotNull(catalogLight0);
      
      HomeLight homeLight0 = new HomeLight(catalogLight0);
      assertEquals((byte)10, bigDecimal0.byteValue());
      assertEquals((short)10, bigDecimal0.shortValue());
      assertNull(catalogLight0.getCreationDate());
      assertTrue(catalogLight0.isMovable());
      assertFalse(catalogLight0.isBackFaceShown());
      assertEquals("h&*+\"", catalogLight0.getId());
      assertNull(catalogLight0.getColor());
      assertNull(catalogLight0.getInformation());
      assertTrue(catalogLight0.isDeformable());
      assertEquals(0.3926991F, catalogLight0.getDepth(), 0.01F);
      assertNull(catalogLight0.getCurrency());
      assertTrue(catalogLight0.isProportional());
      assertEquals("h&*+\"", catalogLight0.getName());
      assertEquals("h&*+\"", catalogLight0.getCreator());
      assertFalse(catalogLight0.isDoorOrWindow());
      assertEquals("h&*+\"", catalogLight0.getDescription());
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertEquals((-694.0F), catalogLight0.getElevation(), 0.01F);
      assertTrue(catalogLight0.isTexturable());
      assertNull(catalogLight0.getGrade());
      assertEquals((-815.0F), catalogLight0.getWidth(), 0.01F);
      assertFalse(catalogLight0.isModifiable());
      assertTrue(catalogLight0.isResizable());
      assertEquals((-694.0F), catalogLight0.getHeight(), 0.01F);
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals((-694.0F), homeLight0.getElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals((-815.0F), homeLight0.getWidth(), 0.01F);
      assertTrue(homeLight0.isMovable());
      assertEquals("h&*+\"", homeLight0.getName());
      assertEquals("h&*+\"", homeLight0.getCatalogId());
      assertFalse(homeLight0.isModelMirrored());
      assertNull(homeLight0.getColor());
      assertEquals(0.19634955F, homeLight0.getY(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertTrue(homeLight0.isDeformable());
      assertEquals((-407.5F), homeLight0.getX(), 0.01F);
      assertNull(homeLight0.getCurrency());
      assertTrue(homeLight0.isVisible());
      assertEquals((-694.0F), homeLight0.getHeight(), 0.01F);
      assertEquals(0.3926991F, homeLight0.getDepth(), 0.01F);
      assertFalse(homeLight0.isNameVisible());
      assertFalse(homeLight0.isBackFaceShown());
      assertFalse(homeLight0.isDoorOrWindow());
      assertTrue(homeLight0.isResizable());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertTrue(homeLight0.isTexturable());
      assertNull(homeLight0.getShininess());
      assertEquals("h&*+\"", homeLight0.getDescription());
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals((-694.0F), homeLight0.getGroundElevation(), 0.01F);
      assertEquals(2, lightSourceArray0.length);
      assertNotNull(homeLight0);
      
      HomeLight homeLight1 = homeLight0.clone();
      assertFalse(homeLight1.equals((Object)homeLight0));
      assertEquals((byte)10, bigDecimal0.byteValue());
      assertEquals((short)10, bigDecimal0.shortValue());
      assertNull(catalogLight0.getCreationDate());
      assertTrue(catalogLight0.isMovable());
      assertFalse(catalogLight0.isBackFaceShown());
      assertEquals("h&*+\"", catalogLight0.getId());
      assertNull(catalogLight0.getColor());
      assertNull(catalogLight0.getInformation());
      assertTrue(catalogLight0.isDeformable());
      assertEquals(0.3926991F, catalogLight0.getDepth(), 0.01F);
      assertNull(catalogLight0.getCurrency());
      assertTrue(catalogLight0.isProportional());
      assertEquals("h&*+\"", catalogLight0.getName());
      assertEquals("h&*+\"", catalogLight0.getCreator());
      assertFalse(catalogLight0.isDoorOrWindow());
      assertEquals("h&*+\"", catalogLight0.getDescription());
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertEquals((-694.0F), catalogLight0.getElevation(), 0.01F);
      assertTrue(catalogLight0.isTexturable());
      assertNull(catalogLight0.getGrade());
      assertEquals((-815.0F), catalogLight0.getWidth(), 0.01F);
      assertFalse(catalogLight0.isModifiable());
      assertTrue(catalogLight0.isResizable());
      assertEquals((-694.0F), catalogLight0.getHeight(), 0.01F);
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals((-694.0F), homeLight0.getElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals((-815.0F), homeLight0.getWidth(), 0.01F);
      assertTrue(homeLight0.isMovable());
      assertEquals("h&*+\"", homeLight0.getName());
      assertEquals("h&*+\"", homeLight0.getCatalogId());
      assertFalse(homeLight0.isModelMirrored());
      assertNull(homeLight0.getColor());
      assertEquals(0.19634955F, homeLight0.getY(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertTrue(homeLight0.isDeformable());
      assertEquals((-407.5F), homeLight0.getX(), 0.01F);
      assertNull(homeLight0.getCurrency());
      assertTrue(homeLight0.isVisible());
      assertEquals((-694.0F), homeLight0.getHeight(), 0.01F);
      assertEquals(0.3926991F, homeLight0.getDepth(), 0.01F);
      assertFalse(homeLight0.isNameVisible());
      assertFalse(homeLight0.isBackFaceShown());
      assertFalse(homeLight0.isDoorOrWindow());
      assertTrue(homeLight0.isResizable());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertTrue(homeLight0.isTexturable());
      assertNull(homeLight0.getShininess());
      assertEquals("h&*+\"", homeLight0.getDescription());
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals((-694.0F), homeLight0.getGroundElevation(), 0.01F);
      assertEquals("h&*+\"", homeLight1.getCatalogId());
      assertTrue(homeLight1.isMovable());
      assertEquals("h&*+\"", homeLight1.getName());
      assertNull(homeLight1.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight1.getNameAngle(), 0.01F);
      assertEquals(0.3926991F, homeLight1.getDepth(), 0.01F);
      assertEquals((-815.0F), homeLight1.getWidth(), 0.01F);
      assertTrue(homeLight1.isDeformable());
      assertTrue(homeLight1.isResizable());
      assertTrue(homeLight1.isVisible());
      assertNull(homeLight1.getShininess());
      assertNull(homeLight1.getCurrency());
      assertEquals(0.19634955F, homeLight1.getY(), 0.01F);
      assertEquals(0.0F, homeLight1.getNameYOffset(), 0.01F);
      assertEquals((-694.0F), homeLight1.getHeight(), 0.01F);
      assertEquals(0.5F, homeLight1.getPower(), 0.01F);
      assertEquals((-407.5F), homeLight1.getX(), 0.01F);
      assertFalse(homeLight1.isDoorOrWindow());
      assertFalse(homeLight1.isBackFaceShown());
      assertEquals((-694.0F), homeLight1.getGroundElevation(), 0.01F);
      assertNull(homeLight1.getColor());
      assertFalse(homeLight1.isModelMirrored());
      assertEquals(0.0F, homeLight1.getNameXOffset(), 0.01F);
      assertFalse(homeLight1.isNameVisible());
      assertEquals(0.0F, homeLight1.getAngle(), 0.01F);
      assertEquals("h&*+\"", homeLight1.getDescription());
      assertTrue(homeLight1.isTexturable());
      assertEquals((-694.0F), homeLight1.getElevation(), 0.01F);
      assertEquals(2, lightSourceArray0.length);
      assertNotSame(homeLight0, homeLight1);
      assertNotSame(homeLight1, homeLight0);
      assertNotNull(homeLight1);
      
      HomeLight homeLight2 = (HomeLight)homeLight1.clone();
      assertFalse(homeLight0.equals((Object)homeLight1));
      assertFalse(homeLight1.equals((Object)homeLight0));
      assertFalse(homeLight2.equals((Object)homeLight0));
      assertFalse(homeLight2.equals((Object)homeLight1));
      assertEquals((byte)10, bigDecimal0.byteValue());
      assertEquals((short)10, bigDecimal0.shortValue());
      assertNull(catalogLight0.getCreationDate());
      assertTrue(catalogLight0.isMovable());
      assertFalse(catalogLight0.isBackFaceShown());
      assertEquals("h&*+\"", catalogLight0.getId());
      assertNull(catalogLight0.getColor());
      assertNull(catalogLight0.getInformation());
      assertTrue(catalogLight0.isDeformable());
      assertEquals(0.3926991F, catalogLight0.getDepth(), 0.01F);
      assertNull(catalogLight0.getCurrency());
      assertTrue(catalogLight0.isProportional());
      assertEquals("h&*+\"", catalogLight0.getName());
      assertEquals("h&*+\"", catalogLight0.getCreator());
      assertFalse(catalogLight0.isDoorOrWindow());
      assertEquals("h&*+\"", catalogLight0.getDescription());
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertEquals((-694.0F), catalogLight0.getElevation(), 0.01F);
      assertTrue(catalogLight0.isTexturable());
      assertNull(catalogLight0.getGrade());
      assertEquals((-815.0F), catalogLight0.getWidth(), 0.01F);
      assertFalse(catalogLight0.isModifiable());
      assertTrue(catalogLight0.isResizable());
      assertEquals((-694.0F), catalogLight0.getHeight(), 0.01F);
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals((-694.0F), homeLight0.getElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals((-815.0F), homeLight0.getWidth(), 0.01F);
      assertTrue(homeLight0.isMovable());
      assertEquals("h&*+\"", homeLight0.getName());
      assertEquals("h&*+\"", homeLight0.getCatalogId());
      assertFalse(homeLight0.isModelMirrored());
      assertNull(homeLight0.getColor());
      assertEquals(0.19634955F, homeLight0.getY(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertTrue(homeLight0.isDeformable());
      assertEquals((-407.5F), homeLight0.getX(), 0.01F);
      assertNull(homeLight0.getCurrency());
      assertTrue(homeLight0.isVisible());
      assertEquals((-694.0F), homeLight0.getHeight(), 0.01F);
      assertEquals(0.3926991F, homeLight0.getDepth(), 0.01F);
      assertFalse(homeLight0.isNameVisible());
      assertFalse(homeLight0.isBackFaceShown());
      assertFalse(homeLight0.isDoorOrWindow());
      assertTrue(homeLight0.isResizable());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertTrue(homeLight0.isTexturable());
      assertNull(homeLight0.getShininess());
      assertEquals("h&*+\"", homeLight0.getDescription());
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals((-694.0F), homeLight0.getGroundElevation(), 0.01F);
      assertEquals("h&*+\"", homeLight1.getCatalogId());
      assertTrue(homeLight1.isMovable());
      assertEquals("h&*+\"", homeLight1.getName());
      assertNull(homeLight1.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight1.getNameAngle(), 0.01F);
      assertEquals(0.3926991F, homeLight1.getDepth(), 0.01F);
      assertEquals((-815.0F), homeLight1.getWidth(), 0.01F);
      assertTrue(homeLight1.isDeformable());
      assertTrue(homeLight1.isResizable());
      assertTrue(homeLight1.isVisible());
      assertNull(homeLight1.getShininess());
      assertNull(homeLight1.getCurrency());
      assertEquals(0.19634955F, homeLight1.getY(), 0.01F);
      assertEquals(0.0F, homeLight1.getNameYOffset(), 0.01F);
      assertEquals((-694.0F), homeLight1.getHeight(), 0.01F);
      assertEquals(0.5F, homeLight1.getPower(), 0.01F);
      assertEquals((-407.5F), homeLight1.getX(), 0.01F);
      assertFalse(homeLight1.isDoorOrWindow());
      assertFalse(homeLight1.isBackFaceShown());
      assertEquals((-694.0F), homeLight1.getGroundElevation(), 0.01F);
      assertNull(homeLight1.getColor());
      assertFalse(homeLight1.isModelMirrored());
      assertEquals(0.0F, homeLight1.getNameXOffset(), 0.01F);
      assertFalse(homeLight1.isNameVisible());
      assertEquals(0.0F, homeLight1.getAngle(), 0.01F);
      assertEquals("h&*+\"", homeLight1.getDescription());
      assertTrue(homeLight1.isTexturable());
      assertEquals((-694.0F), homeLight1.getElevation(), 0.01F);
      assertEquals(0.19634955F, homeLight2.getY(), 0.01F);
      assertEquals(0.0F, homeLight2.getNameXOffset(), 0.01F);
      assertEquals(0.5F, homeLight2.getPower(), 0.01F);
      assertEquals((-694.0F), homeLight2.getElevation(), 0.01F);
      assertEquals("h&*+\"", homeLight2.getDescription());
      assertEquals((-694.0F), homeLight2.getGroundElevation(), 0.01F);
      assertEquals((-694.0F), homeLight2.getHeight(), 0.01F);
      assertTrue(homeLight2.isMovable());
      assertEquals((-815.0F), homeLight2.getWidth(), 0.01F);
      assertTrue(homeLight2.isDeformable());
      assertTrue(homeLight2.isVisible());
      assertTrue(homeLight2.isResizable());
      assertEquals(0.0F, homeLight2.getNameAngle(), 0.01F);
      assertNull(homeLight2.getShininess());
      assertNull(homeLight2.getStaircaseCutOutShape());
      assertNull(homeLight2.getCurrency());
      assertEquals(0.0F, homeLight2.getNameYOffset(), 0.01F);
      assertFalse(homeLight2.isNameVisible());
      assertNull(homeLight2.getColor());
      assertEquals((-407.5F), homeLight2.getX(), 0.01F);
      assertFalse(homeLight2.isDoorOrWindow());
      assertTrue(homeLight2.isTexturable());
      assertEquals(0.0F, homeLight2.getAngle(), 0.01F);
      assertEquals("h&*+\"", homeLight2.getCatalogId());
      assertEquals("h&*+\"", homeLight2.getName());
      assertFalse(homeLight2.isBackFaceShown());
      assertEquals(0.3926991F, homeLight2.getDepth(), 0.01F);
      assertFalse(homeLight2.isModelMirrored());
      assertEquals(2, lightSourceArray0.length);
      assertNotSame(homeLight0, homeLight2);
      assertNotSame(homeLight0, homeLight1);
      assertNotSame(homeLight1, homeLight2);
      assertNotSame(homeLight1, homeLight0);
      assertNotSame(homeLight2, homeLight0);
      assertNotSame(homeLight2, homeLight1);
      assertNotNull(homeLight2);
      
      homeLight2.setModelMirrored(true);
      assertFalse(homeLight0.equals((Object)homeLight2));
      assertFalse(homeLight0.equals((Object)homeLight1));
      assertFalse(homeLight1.equals((Object)homeLight2));
      assertFalse(homeLight1.equals((Object)homeLight0));
      assertFalse(homeLight2.equals((Object)homeLight0));
      assertFalse(homeLight2.equals((Object)homeLight1));
      assertEquals((byte)10, bigDecimal0.byteValue());
      assertEquals((short)10, bigDecimal0.shortValue());
      assertNull(catalogLight0.getCreationDate());
      assertTrue(catalogLight0.isMovable());
      assertFalse(catalogLight0.isBackFaceShown());
      assertEquals("h&*+\"", catalogLight0.getId());
      assertNull(catalogLight0.getColor());
      assertNull(catalogLight0.getInformation());
      assertTrue(catalogLight0.isDeformable());
      assertEquals(0.3926991F, catalogLight0.getDepth(), 0.01F);
      assertNull(catalogLight0.getCurrency());
      assertTrue(catalogLight0.isProportional());
      assertEquals("h&*+\"", catalogLight0.getName());
      assertEquals("h&*+\"", catalogLight0.getCreator());
      assertFalse(catalogLight0.isDoorOrWindow());
      assertEquals("h&*+\"", catalogLight0.getDescription());
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertEquals((-694.0F), catalogLight0.getElevation(), 0.01F);
      assertTrue(catalogLight0.isTexturable());
      assertNull(catalogLight0.getGrade());
      assertEquals((-815.0F), catalogLight0.getWidth(), 0.01F);
      assertFalse(catalogLight0.isModifiable());
      assertTrue(catalogLight0.isResizable());
      assertEquals((-694.0F), catalogLight0.getHeight(), 0.01F);
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals((-694.0F), homeLight0.getElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals((-815.0F), homeLight0.getWidth(), 0.01F);
      assertTrue(homeLight0.isMovable());
      assertEquals("h&*+\"", homeLight0.getName());
      assertEquals("h&*+\"", homeLight0.getCatalogId());
      assertFalse(homeLight0.isModelMirrored());
      assertNull(homeLight0.getColor());
      assertEquals(0.19634955F, homeLight0.getY(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertTrue(homeLight0.isDeformable());
      assertEquals((-407.5F), homeLight0.getX(), 0.01F);
      assertNull(homeLight0.getCurrency());
      assertTrue(homeLight0.isVisible());
      assertEquals((-694.0F), homeLight0.getHeight(), 0.01F);
      assertEquals(0.3926991F, homeLight0.getDepth(), 0.01F);
      assertFalse(homeLight0.isNameVisible());
      assertFalse(homeLight0.isBackFaceShown());
      assertFalse(homeLight0.isDoorOrWindow());
      assertTrue(homeLight0.isResizable());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertTrue(homeLight0.isTexturable());
      assertNull(homeLight0.getShininess());
      assertEquals("h&*+\"", homeLight0.getDescription());
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals((-694.0F), homeLight0.getGroundElevation(), 0.01F);
      assertEquals("h&*+\"", homeLight1.getCatalogId());
      assertTrue(homeLight1.isMovable());
      assertEquals("h&*+\"", homeLight1.getName());
      assertNull(homeLight1.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight1.getNameAngle(), 0.01F);
      assertEquals(0.3926991F, homeLight1.getDepth(), 0.01F);
      assertEquals((-815.0F), homeLight1.getWidth(), 0.01F);
      assertTrue(homeLight1.isDeformable());
      assertTrue(homeLight1.isResizable());
      assertTrue(homeLight1.isVisible());
      assertNull(homeLight1.getShininess());
      assertNull(homeLight1.getCurrency());
      assertEquals(0.19634955F, homeLight1.getY(), 0.01F);
      assertEquals(0.0F, homeLight1.getNameYOffset(), 0.01F);
      assertEquals((-694.0F), homeLight1.getHeight(), 0.01F);
      assertEquals(0.5F, homeLight1.getPower(), 0.01F);
      assertEquals((-407.5F), homeLight1.getX(), 0.01F);
      assertFalse(homeLight1.isDoorOrWindow());
      assertFalse(homeLight1.isBackFaceShown());
      assertEquals((-694.0F), homeLight1.getGroundElevation(), 0.01F);
      assertNull(homeLight1.getColor());
      assertFalse(homeLight1.isModelMirrored());
      assertEquals(0.0F, homeLight1.getNameXOffset(), 0.01F);
      assertFalse(homeLight1.isNameVisible());
      assertEquals(0.0F, homeLight1.getAngle(), 0.01F);
      assertEquals("h&*+\"", homeLight1.getDescription());
      assertTrue(homeLight1.isTexturable());
      assertEquals((-694.0F), homeLight1.getElevation(), 0.01F);
      assertEquals(0.19634955F, homeLight2.getY(), 0.01F);
      assertEquals(0.0F, homeLight2.getNameXOffset(), 0.01F);
      assertEquals(0.5F, homeLight2.getPower(), 0.01F);
      assertEquals((-694.0F), homeLight2.getElevation(), 0.01F);
      assertEquals("h&*+\"", homeLight2.getDescription());
      assertEquals((-694.0F), homeLight2.getGroundElevation(), 0.01F);
      assertEquals((-694.0F), homeLight2.getHeight(), 0.01F);
      assertTrue(homeLight2.isMovable());
      assertEquals((-815.0F), homeLight2.getWidth(), 0.01F);
      assertTrue(homeLight2.isDeformable());
      assertTrue(homeLight2.isVisible());
      assertTrue(homeLight2.isResizable());
      assertEquals(0.0F, homeLight2.getNameAngle(), 0.01F);
      assertNull(homeLight2.getShininess());
      assertNull(homeLight2.getStaircaseCutOutShape());
      assertNull(homeLight2.getCurrency());
      assertEquals(0.0F, homeLight2.getNameYOffset(), 0.01F);
      assertTrue(homeLight2.isModelMirrored());
      assertFalse(homeLight2.isNameVisible());
      assertNull(homeLight2.getColor());
      assertEquals((-407.5F), homeLight2.getX(), 0.01F);
      assertFalse(homeLight2.isDoorOrWindow());
      assertTrue(homeLight2.isTexturable());
      assertEquals(0.0F, homeLight2.getAngle(), 0.01F);
      assertEquals("h&*+\"", homeLight2.getCatalogId());
      assertEquals("h&*+\"", homeLight2.getName());
      assertFalse(homeLight2.isBackFaceShown());
      assertEquals(0.3926991F, homeLight2.getDepth(), 0.01F);
      assertEquals(2, lightSourceArray0.length);
      assertNotSame(homeLight0, homeLight2);
      assertNotSame(homeLight0, homeLight1);
      assertNotSame(homeLight1, homeLight2);
      assertNotSame(homeLight1, homeLight0);
      assertNotSame(homeLight2, homeLight0);
      assertNotSame(homeLight2, homeLight1);
      
      boolean boolean1 = homeLight2.isNameCenterPointAt(1002.0F, (-127.62969F), 1707.7522F);
      assertFalse(homeLight0.equals((Object)homeLight2));
      assertFalse(homeLight0.equals((Object)homeLight1));
      assertFalse(homeLight1.equals((Object)homeLight2));
      assertFalse(homeLight1.equals((Object)homeLight0));
      assertFalse(homeLight2.equals((Object)homeLight0));
      assertFalse(homeLight2.equals((Object)homeLight1));
      assertFalse(boolean1 == boolean0);
      assertEquals((byte)10, bigDecimal0.byteValue());
      assertEquals((short)10, bigDecimal0.shortValue());
      assertNull(catalogLight0.getCreationDate());
      assertTrue(catalogLight0.isMovable());
      assertFalse(catalogLight0.isBackFaceShown());
      assertEquals("h&*+\"", catalogLight0.getId());
      assertNull(catalogLight0.getColor());
      assertNull(catalogLight0.getInformation());
      assertTrue(catalogLight0.isDeformable());
      assertEquals(0.3926991F, catalogLight0.getDepth(), 0.01F);
      assertNull(catalogLight0.getCurrency());
      assertTrue(catalogLight0.isProportional());
      assertEquals("h&*+\"", catalogLight0.getName());
      assertEquals("h&*+\"", catalogLight0.getCreator());
      assertFalse(catalogLight0.isDoorOrWindow());
      assertEquals("h&*+\"", catalogLight0.getDescription());
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertEquals((-694.0F), catalogLight0.getElevation(), 0.01F);
      assertTrue(catalogLight0.isTexturable());
      assertNull(catalogLight0.getGrade());
      assertEquals((-815.0F), catalogLight0.getWidth(), 0.01F);
      assertFalse(catalogLight0.isModifiable());
      assertTrue(catalogLight0.isResizable());
      assertEquals((-694.0F), catalogLight0.getHeight(), 0.01F);
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals((-694.0F), homeLight0.getElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals((-815.0F), homeLight0.getWidth(), 0.01F);
      assertTrue(homeLight0.isMovable());
      assertEquals("h&*+\"", homeLight0.getName());
      assertEquals("h&*+\"", homeLight0.getCatalogId());
      assertFalse(homeLight0.isModelMirrored());
      assertNull(homeLight0.getColor());
      assertEquals(0.19634955F, homeLight0.getY(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertTrue(homeLight0.isDeformable());
      assertEquals((-407.5F), homeLight0.getX(), 0.01F);
      assertNull(homeLight0.getCurrency());
      assertTrue(homeLight0.isVisible());
      assertEquals((-694.0F), homeLight0.getHeight(), 0.01F);
      assertEquals(0.3926991F, homeLight0.getDepth(), 0.01F);
      assertFalse(homeLight0.isNameVisible());
      assertFalse(homeLight0.isBackFaceShown());
      assertFalse(homeLight0.isDoorOrWindow());
      assertTrue(homeLight0.isResizable());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertTrue(homeLight0.isTexturable());
      assertNull(homeLight0.getShininess());
      assertEquals("h&*+\"", homeLight0.getDescription());
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals((-694.0F), homeLight0.getGroundElevation(), 0.01F);
      assertEquals("h&*+\"", homeLight1.getCatalogId());
      assertTrue(homeLight1.isMovable());
      assertEquals("h&*+\"", homeLight1.getName());
      assertNull(homeLight1.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight1.getNameAngle(), 0.01F);
      assertEquals(0.3926991F, homeLight1.getDepth(), 0.01F);
      assertEquals((-815.0F), homeLight1.getWidth(), 0.01F);
      assertTrue(homeLight1.isDeformable());
      assertTrue(homeLight1.isResizable());
      assertTrue(homeLight1.isVisible());
      assertNull(homeLight1.getShininess());
      assertNull(homeLight1.getCurrency());
      assertEquals(0.19634955F, homeLight1.getY(), 0.01F);
      assertEquals(0.0F, homeLight1.getNameYOffset(), 0.01F);
      assertEquals((-694.0F), homeLight1.getHeight(), 0.01F);
      assertEquals(0.5F, homeLight1.getPower(), 0.01F);
      assertEquals((-407.5F), homeLight1.getX(), 0.01F);
      assertFalse(homeLight1.isDoorOrWindow());
      assertFalse(homeLight1.isBackFaceShown());
      assertEquals((-694.0F), homeLight1.getGroundElevation(), 0.01F);
      assertNull(homeLight1.getColor());
      assertFalse(homeLight1.isModelMirrored());
      assertEquals(0.0F, homeLight1.getNameXOffset(), 0.01F);
      assertFalse(homeLight1.isNameVisible());
      assertEquals(0.0F, homeLight1.getAngle(), 0.01F);
      assertEquals("h&*+\"", homeLight1.getDescription());
      assertTrue(homeLight1.isTexturable());
      assertEquals((-694.0F), homeLight1.getElevation(), 0.01F);
      assertEquals(0.19634955F, homeLight2.getY(), 0.01F);
      assertEquals(0.0F, homeLight2.getNameXOffset(), 0.01F);
      assertEquals(0.5F, homeLight2.getPower(), 0.01F);
      assertEquals((-694.0F), homeLight2.getElevation(), 0.01F);
      assertEquals("h&*+\"", homeLight2.getDescription());
      assertEquals((-694.0F), homeLight2.getGroundElevation(), 0.01F);
      assertEquals((-694.0F), homeLight2.getHeight(), 0.01F);
      assertTrue(homeLight2.isMovable());
      assertEquals((-815.0F), homeLight2.getWidth(), 0.01F);
      assertTrue(homeLight2.isDeformable());
      assertTrue(homeLight2.isVisible());
      assertTrue(homeLight2.isResizable());
      assertEquals(0.0F, homeLight2.getNameAngle(), 0.01F);
      assertNull(homeLight2.getShininess());
      assertNull(homeLight2.getStaircaseCutOutShape());
      assertNull(homeLight2.getCurrency());
      assertEquals(0.0F, homeLight2.getNameYOffset(), 0.01F);
      assertTrue(homeLight2.isModelMirrored());
      assertFalse(homeLight2.isNameVisible());
      assertNull(homeLight2.getColor());
      assertEquals((-407.5F), homeLight2.getX(), 0.01F);
      assertFalse(homeLight2.isDoorOrWindow());
      assertTrue(homeLight2.isTexturable());
      assertEquals(0.0F, homeLight2.getAngle(), 0.01F);
      assertEquals("h&*+\"", homeLight2.getCatalogId());
      assertEquals("h&*+\"", homeLight2.getName());
      assertFalse(homeLight2.isBackFaceShown());
      assertEquals(0.3926991F, homeLight2.getDepth(), 0.01F);
      assertEquals(2, lightSourceArray0.length);
      assertNotSame(homeLight0, homeLight2);
      assertNotSame(homeLight0, homeLight1);
      assertNotSame(homeLight1, homeLight2);
      assertNotSame(homeLight1, homeLight0);
      assertNotSame(homeLight2, homeLight0);
      assertNotSame(homeLight2, homeLight1);
      assertTrue(boolean1);
      
      homeLight2.setY((-694.0F));
      assertFalse(homeLight0.equals((Object)homeLight2));
      assertFalse(homeLight0.equals((Object)homeLight1));
      assertFalse(homeLight1.equals((Object)homeLight2));
      assertFalse(homeLight1.equals((Object)homeLight0));
      assertFalse(homeLight2.equals((Object)homeLight0));
      assertFalse(homeLight2.equals((Object)homeLight1));
      assertEquals((byte)10, bigDecimal0.byteValue());
      assertEquals((short)10, bigDecimal0.shortValue());
      assertNull(catalogLight0.getCreationDate());
      assertTrue(catalogLight0.isMovable());
      assertFalse(catalogLight0.isBackFaceShown());
      assertEquals("h&*+\"", catalogLight0.getId());
      assertNull(catalogLight0.getColor());
      assertNull(catalogLight0.getInformation());
      assertTrue(catalogLight0.isDeformable());
      assertEquals(0.3926991F, catalogLight0.getDepth(), 0.01F);
      assertNull(catalogLight0.getCurrency());
      assertTrue(catalogLight0.isProportional());
      assertEquals("h&*+\"", catalogLight0.getName());
      assertEquals("h&*+\"", catalogLight0.getCreator());
      assertFalse(catalogLight0.isDoorOrWindow());
      assertEquals("h&*+\"", catalogLight0.getDescription());
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertEquals((-694.0F), catalogLight0.getElevation(), 0.01F);
      assertTrue(catalogLight0.isTexturable());
      assertNull(catalogLight0.getGrade());
      assertEquals((-815.0F), catalogLight0.getWidth(), 0.01F);
      assertFalse(catalogLight0.isModifiable());
      assertTrue(catalogLight0.isResizable());
      assertEquals((-694.0F), catalogLight0.getHeight(), 0.01F);
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals((-694.0F), homeLight0.getElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals((-815.0F), homeLight0.getWidth(), 0.01F);
      assertTrue(homeLight0.isMovable());
      assertEquals("h&*+\"", homeLight0.getName());
      assertEquals("h&*+\"", homeLight0.getCatalogId());
      assertFalse(homeLight0.isModelMirrored());
      assertNull(homeLight0.getColor());
      assertEquals(0.19634955F, homeLight0.getY(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertTrue(homeLight0.isDeformable());
      assertEquals((-407.5F), homeLight0.getX(), 0.01F);
      assertNull(homeLight0.getCurrency());
      assertTrue(homeLight0.isVisible());
      assertEquals((-694.0F), homeLight0.getHeight(), 0.01F);
      assertEquals(0.3926991F, homeLight0.getDepth(), 0.01F);
      assertFalse(homeLight0.isNameVisible());
      assertFalse(homeLight0.isBackFaceShown());
      assertFalse(homeLight0.isDoorOrWindow());
      assertTrue(homeLight0.isResizable());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertTrue(homeLight0.isTexturable());
      assertNull(homeLight0.getShininess());
      assertEquals("h&*+\"", homeLight0.getDescription());
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals((-694.0F), homeLight0.getGroundElevation(), 0.01F);
      assertEquals("h&*+\"", homeLight1.getCatalogId());
      assertTrue(homeLight1.isMovable());
      assertEquals("h&*+\"", homeLight1.getName());
      assertNull(homeLight1.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight1.getNameAngle(), 0.01F);
      assertEquals(0.3926991F, homeLight1.getDepth(), 0.01F);
      assertEquals((-815.0F), homeLight1.getWidth(), 0.01F);
      assertTrue(homeLight1.isDeformable());
      assertTrue(homeLight1.isResizable());
      assertTrue(homeLight1.isVisible());
      assertNull(homeLight1.getShininess());
      assertNull(homeLight1.getCurrency());
      assertEquals(0.19634955F, homeLight1.getY(), 0.01F);
      assertEquals(0.0F, homeLight1.getNameYOffset(), 0.01F);
      assertEquals((-694.0F), homeLight1.getHeight(), 0.01F);
      assertEquals(0.5F, homeLight1.getPower(), 0.01F);
      assertEquals((-407.5F), homeLight1.getX(), 0.01F);
      assertFalse(homeLight1.isDoorOrWindow());
      assertFalse(homeLight1.isBackFaceShown());
      assertEquals((-694.0F), homeLight1.getGroundElevation(), 0.01F);
      assertNull(homeLight1.getColor());
      assertFalse(homeLight1.isModelMirrored());
      assertEquals(0.0F, homeLight1.getNameXOffset(), 0.01F);
      assertFalse(homeLight1.isNameVisible());
      assertEquals(0.0F, homeLight1.getAngle(), 0.01F);
      assertEquals("h&*+\"", homeLight1.getDescription());
      assertTrue(homeLight1.isTexturable());
      assertEquals((-694.0F), homeLight1.getElevation(), 0.01F);
      assertEquals(0.0F, homeLight2.getNameXOffset(), 0.01F);
      assertEquals(0.5F, homeLight2.getPower(), 0.01F);
      assertEquals((-694.0F), homeLight2.getElevation(), 0.01F);
      assertEquals("h&*+\"", homeLight2.getDescription());
      assertEquals((-694.0F), homeLight2.getY(), 0.01F);
      assertEquals((-694.0F), homeLight2.getGroundElevation(), 0.01F);
      assertEquals((-694.0F), homeLight2.getHeight(), 0.01F);
      assertTrue(homeLight2.isMovable());
      assertEquals((-815.0F), homeLight2.getWidth(), 0.01F);
      assertTrue(homeLight2.isDeformable());
      assertTrue(homeLight2.isVisible());
      assertTrue(homeLight2.isResizable());
      assertEquals(0.0F, homeLight2.getNameAngle(), 0.01F);
      assertNull(homeLight2.getShininess());
      assertNull(homeLight2.getStaircaseCutOutShape());
      assertNull(homeLight2.getCurrency());
      assertEquals(0.0F, homeLight2.getNameYOffset(), 0.01F);
      assertTrue(homeLight2.isModelMirrored());
      assertFalse(homeLight2.isNameVisible());
      assertNull(homeLight2.getColor());
      assertEquals((-407.5F), homeLight2.getX(), 0.01F);
      assertFalse(homeLight2.isDoorOrWindow());
      assertTrue(homeLight2.isTexturable());
      assertEquals(0.0F, homeLight2.getAngle(), 0.01F);
      assertEquals("h&*+\"", homeLight2.getCatalogId());
      assertEquals("h&*+\"", homeLight2.getName());
      assertFalse(homeLight2.isBackFaceShown());
      assertEquals(0.3926991F, homeLight2.getDepth(), 0.01F);
      assertEquals(2, lightSourceArray0.length);
      assertNotSame(homeLight0, homeLight2);
      assertNotSame(homeLight0, homeLight1);
      assertNotSame(homeLight1, homeLight2);
      assertNotSame(homeLight1, homeLight0);
      assertNotSame(homeLight2, homeLight0);
      assertNotSame(homeLight2, homeLight1);
      
      Integer integer0 = new Integer(0);
      assertNotNull(integer0);
      assertEquals(0, (int)integer0);
      
      homeLight2.setElevation(0.0F);
      assertFalse(homeLight0.equals((Object)homeLight2));
      assertFalse(homeLight0.equals((Object)homeLight1));
      assertFalse(homeLight1.equals((Object)homeLight2));
      assertFalse(homeLight1.equals((Object)homeLight0));
      assertFalse(homeLight2.equals((Object)homeLight0));
      assertFalse(homeLight2.equals((Object)homeLight1));
      assertEquals((byte)10, bigDecimal0.byteValue());
      assertEquals((short)10, bigDecimal0.shortValue());
      assertNull(catalogLight0.getCreationDate());
      assertTrue(catalogLight0.isMovable());
      assertFalse(catalogLight0.isBackFaceShown());
      assertEquals("h&*+\"", catalogLight0.getId());
      assertNull(catalogLight0.getColor());
      assertNull(catalogLight0.getInformation());
      assertTrue(catalogLight0.isDeformable());
      assertEquals(0.3926991F, catalogLight0.getDepth(), 0.01F);
      assertNull(catalogLight0.getCurrency());
      assertTrue(catalogLight0.isProportional());
      assertEquals("h&*+\"", catalogLight0.getName());
      assertEquals("h&*+\"", catalogLight0.getCreator());
      assertFalse(catalogLight0.isDoorOrWindow());
      assertEquals("h&*+\"", catalogLight0.getDescription());
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertEquals((-694.0F), catalogLight0.getElevation(), 0.01F);
      assertTrue(catalogLight0.isTexturable());
      assertNull(catalogLight0.getGrade());
      assertEquals((-815.0F), catalogLight0.getWidth(), 0.01F);
      assertFalse(catalogLight0.isModifiable());
      assertTrue(catalogLight0.isResizable());
      assertEquals((-694.0F), catalogLight0.getHeight(), 0.01F);
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals((-694.0F), homeLight0.getElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals((-815.0F), homeLight0.getWidth(), 0.01F);
      assertTrue(homeLight0.isMovable());
      assertEquals("h&*+\"", homeLight0.getName());
      assertEquals("h&*+\"", homeLight0.getCatalogId());
      assertFalse(homeLight0.isModelMirrored());
      assertNull(homeLight0.getColor());
      assertEquals(0.19634955F, homeLight0.getY(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertTrue(homeLight0.isDeformable());
      assertEquals((-407.5F), homeLight0.getX(), 0.01F);
      assertNull(homeLight0.getCurrency());
      assertTrue(homeLight0.isVisible());
      assertEquals((-694.0F), homeLight0.getHeight(), 0.01F);
      assertEquals(0.3926991F, homeLight0.getDepth(), 0.01F);
      assertFalse(homeLight0.isNameVisible());
      assertFalse(homeLight0.isBackFaceShown());
      assertFalse(homeLight0.isDoorOrWindow());
      assertTrue(homeLight0.isResizable());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertTrue(homeLight0.isTexturable());
      assertNull(homeLight0.getShininess());
      assertEquals("h&*+\"", homeLight0.getDescription());
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals((-694.0F), homeLight0.getGroundElevation(), 0.01F);
      assertEquals("h&*+\"", homeLight1.getCatalogId());
      assertTrue(homeLight1.isMovable());
      assertEquals("h&*+\"", homeLight1.getName());
      assertNull(homeLight1.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight1.getNameAngle(), 0.01F);
      assertEquals(0.3926991F, homeLight1.getDepth(), 0.01F);
      assertEquals((-815.0F), homeLight1.getWidth(), 0.01F);
      assertTrue(homeLight1.isDeformable());
      assertTrue(homeLight1.isResizable());
      assertTrue(homeLight1.isVisible());
      assertNull(homeLight1.getShininess());
      assertNull(homeLight1.getCurrency());
      assertEquals(0.19634955F, homeLight1.getY(), 0.01F);
      assertEquals(0.0F, homeLight1.getNameYOffset(), 0.01F);
      assertEquals((-694.0F), homeLight1.getHeight(), 0.01F);
      assertEquals(0.5F, homeLight1.getPower(), 0.01F);
      assertEquals((-407.5F), homeLight1.getX(), 0.01F);
      assertFalse(homeLight1.isDoorOrWindow());
      assertFalse(homeLight1.isBackFaceShown());
      assertEquals((-694.0F), homeLight1.getGroundElevation(), 0.01F);
      assertNull(homeLight1.getColor());
      assertFalse(homeLight1.isModelMirrored());
      assertEquals(0.0F, homeLight1.getNameXOffset(), 0.01F);
      assertFalse(homeLight1.isNameVisible());
      assertEquals(0.0F, homeLight1.getAngle(), 0.01F);
      assertEquals("h&*+\"", homeLight1.getDescription());
      assertTrue(homeLight1.isTexturable());
      assertEquals((-694.0F), homeLight1.getElevation(), 0.01F);
      assertEquals(0.0F, homeLight2.getNameXOffset(), 0.01F);
      assertEquals(0.5F, homeLight2.getPower(), 0.01F);
      assertEquals(0.0F, homeLight2.getElevation(), 0.01F);
      assertEquals("h&*+\"", homeLight2.getDescription());
      assertEquals((-694.0F), homeLight2.getY(), 0.01F);
      assertEquals((-694.0F), homeLight2.getHeight(), 0.01F);
      assertEquals(0.0F, homeLight2.getGroundElevation(), 0.01F);
      assertTrue(homeLight2.isMovable());
      assertEquals((-815.0F), homeLight2.getWidth(), 0.01F);
      assertTrue(homeLight2.isDeformable());
      assertTrue(homeLight2.isVisible());
      assertTrue(homeLight2.isResizable());
      assertEquals(0.0F, homeLight2.getNameAngle(), 0.01F);
      assertNull(homeLight2.getShininess());
      assertNull(homeLight2.getStaircaseCutOutShape());
      assertNull(homeLight2.getCurrency());
      assertEquals(0.0F, homeLight2.getNameYOffset(), 0.01F);
      assertTrue(homeLight2.isModelMirrored());
      assertFalse(homeLight2.isNameVisible());
      assertNull(homeLight2.getColor());
      assertEquals((-407.5F), homeLight2.getX(), 0.01F);
      assertFalse(homeLight2.isDoorOrWindow());
      assertTrue(homeLight2.isTexturable());
      assertEquals(0.0F, homeLight2.getAngle(), 0.01F);
      assertEquals("h&*+\"", homeLight2.getCatalogId());
      assertEquals("h&*+\"", homeLight2.getName());
      assertFalse(homeLight2.isBackFaceShown());
      assertEquals(0.3926991F, homeLight2.getDepth(), 0.01F);
      assertEquals(2, lightSourceArray0.length);
      assertNotSame(homeLight0, homeLight2);
      assertNotSame(homeLight0, homeLight1);
      assertNotSame(homeLight1, homeLight2);
      assertNotSame(homeLight1, homeLight0);
      assertNotSame(homeLight2, homeLight0);
      assertNotSame(homeLight2, homeLight1);
      
      System.setCurrentTimeMillis(114);
      float float0 = homeLight1.getElevation();
      assertFalse(homeLight0.equals((Object)homeLight2));
      assertFalse(homeLight0.equals((Object)homeLight1));
      assertFalse(homeLight1.equals((Object)homeLight2));
      assertFalse(homeLight1.equals((Object)homeLight0));
      assertEquals((byte)10, bigDecimal0.byteValue());
      assertEquals((short)10, bigDecimal0.shortValue());
      assertNull(catalogLight0.getCreationDate());
      assertTrue(catalogLight0.isMovable());
      assertFalse(catalogLight0.isBackFaceShown());
      assertEquals("h&*+\"", catalogLight0.getId());
      assertNull(catalogLight0.getColor());
      assertNull(catalogLight0.getInformation());
      assertTrue(catalogLight0.isDeformable());
      assertEquals(0.3926991F, catalogLight0.getDepth(), 0.01F);
      assertNull(catalogLight0.getCurrency());
      assertTrue(catalogLight0.isProportional());
      assertEquals("h&*+\"", catalogLight0.getName());
      assertEquals("h&*+\"", catalogLight0.getCreator());
      assertFalse(catalogLight0.isDoorOrWindow());
      assertEquals("h&*+\"", catalogLight0.getDescription());
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertEquals((-694.0F), catalogLight0.getElevation(), 0.01F);
      assertTrue(catalogLight0.isTexturable());
      assertNull(catalogLight0.getGrade());
      assertEquals((-815.0F), catalogLight0.getWidth(), 0.01F);
      assertFalse(catalogLight0.isModifiable());
      assertTrue(catalogLight0.isResizable());
      assertEquals((-694.0F), catalogLight0.getHeight(), 0.01F);
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals((-694.0F), homeLight0.getElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals((-815.0F), homeLight0.getWidth(), 0.01F);
      assertTrue(homeLight0.isMovable());
      assertEquals("h&*+\"", homeLight0.getName());
      assertEquals("h&*+\"", homeLight0.getCatalogId());
      assertFalse(homeLight0.isModelMirrored());
      assertNull(homeLight0.getColor());
      assertEquals(0.19634955F, homeLight0.getY(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertTrue(homeLight0.isDeformable());
      assertEquals((-407.5F), homeLight0.getX(), 0.01F);
      assertNull(homeLight0.getCurrency());
      assertTrue(homeLight0.isVisible());
      assertEquals((-694.0F), homeLight0.getHeight(), 0.01F);
      assertEquals(0.3926991F, homeLight0.getDepth(), 0.01F);
      assertFalse(homeLight0.isNameVisible());
      assertFalse(homeLight0.isBackFaceShown());
      assertFalse(homeLight0.isDoorOrWindow());
      assertTrue(homeLight0.isResizable());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertTrue(homeLight0.isTexturable());
      assertNull(homeLight0.getShininess());
      assertEquals("h&*+\"", homeLight0.getDescription());
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals((-694.0F), homeLight0.getGroundElevation(), 0.01F);
      assertEquals("h&*+\"", homeLight1.getCatalogId());
      assertTrue(homeLight1.isMovable());
      assertEquals("h&*+\"", homeLight1.getName());
      assertNull(homeLight1.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight1.getNameAngle(), 0.01F);
      assertEquals(0.3926991F, homeLight1.getDepth(), 0.01F);
      assertEquals((-815.0F), homeLight1.getWidth(), 0.01F);
      assertTrue(homeLight1.isDeformable());
      assertTrue(homeLight1.isResizable());
      assertTrue(homeLight1.isVisible());
      assertNull(homeLight1.getShininess());
      assertNull(homeLight1.getCurrency());
      assertEquals(0.19634955F, homeLight1.getY(), 0.01F);
      assertEquals(0.0F, homeLight1.getNameYOffset(), 0.01F);
      assertEquals((-694.0F), homeLight1.getHeight(), 0.01F);
      assertEquals(0.5F, homeLight1.getPower(), 0.01F);
      assertEquals((-407.5F), homeLight1.getX(), 0.01F);
      assertFalse(homeLight1.isDoorOrWindow());
      assertFalse(homeLight1.isBackFaceShown());
      assertEquals((-694.0F), homeLight1.getGroundElevation(), 0.01F);
      assertNull(homeLight1.getColor());
      assertFalse(homeLight1.isModelMirrored());
      assertEquals(0.0F, homeLight1.getNameXOffset(), 0.01F);
      assertFalse(homeLight1.isNameVisible());
      assertEquals(0.0F, homeLight1.getAngle(), 0.01F);
      assertEquals("h&*+\"", homeLight1.getDescription());
      assertTrue(homeLight1.isTexturable());
      assertEquals((-694.0F), homeLight1.getElevation(), 0.01F);
      assertEquals(2, lightSourceArray0.length);
      assertNotSame(homeLight0, homeLight2);
      assertNotSame(homeLight0, homeLight1);
      assertNotSame(homeLight1, homeLight2);
      assertNotSame(homeLight1, homeLight0);
      assertEquals((-694.0F), float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test246()  throws Throwable  {
      LightSource[] lightSourceArray0 = new LightSource[2];
      LightSource lightSource0 = new LightSource((-815.0F), 0.0F, 0.0F, 114);
      assertEquals(0.0F, lightSource0.getZ(), 0.01F);
      assertEquals(114, lightSource0.getColor());
      assertEquals((-815.0F), lightSource0.getX(), 0.01F);
      assertEquals(0.0F, lightSource0.getY(), 0.01F);
      assertNull(lightSource0.getDiameter());
      assertNotNull(lightSource0);
      
      lightSourceArray0[0] = lightSource0;
      boolean boolean0 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      LightSource lightSource1 = new LightSource((-694.0F), 2965.994F, (-127.62969F), 0);
      assertFalse(lightSource1.equals((Object)lightSource0));
      assertEquals((-694.0F), lightSource1.getX(), 0.01F);
      assertNull(lightSource1.getDiameter());
      assertEquals(0, lightSource1.getColor());
      assertEquals(2965.994F, lightSource1.getY(), 0.01F);
      assertEquals((-127.62969F), lightSource1.getZ(), 0.01F);
      assertNotNull(lightSource1);
      
      BigDecimal bigDecimal0 = BigDecimal.TEN;
      assertEquals((short)10, bigDecimal0.shortValue());
      assertEquals((byte)10, bigDecimal0.byteValue());
      assertNotNull(bigDecimal0);
      
      CatalogLight catalogLight0 = new CatalogLight("h&*+\"", "h&*+\"", "h&*+\"", (Content) null, (Content) null, (-815.0F), 0.3926991F, (-694.0F), (-694.0F), true, lightSourceArray0, (float[][]) null, "h&*+\"", true, bigDecimal0, bigDecimal0);
      assertEquals((short)10, bigDecimal0.shortValue());
      assertEquals((byte)10, bigDecimal0.byteValue());
      assertNull(catalogLight0.getColor());
      assertFalse(catalogLight0.isModifiable());
      assertNull(catalogLight0.getCreationDate());
      assertEquals("h&*+\"", catalogLight0.getId());
      assertNull(catalogLight0.getCurrency());
      assertEquals(0.3926991F, catalogLight0.getDepth(), 0.01F);
      assertEquals((-694.0F), catalogLight0.getElevation(), 0.01F);
      assertEquals("h&*+\"", catalogLight0.getName());
      assertEquals((-815.0F), catalogLight0.getWidth(), 0.01F);
      assertEquals("h&*+\"", catalogLight0.getCreator());
      assertEquals("h&*+\"", catalogLight0.getDescription());
      assertNull(catalogLight0.getGrade());
      assertEquals((-694.0F), catalogLight0.getHeight(), 0.01F);
      assertNull(catalogLight0.getInformation());
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertTrue(catalogLight0.isResizable());
      assertTrue(catalogLight0.isDeformable());
      assertTrue(catalogLight0.isMovable());
      assertFalse(catalogLight0.isBackFaceShown());
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertFalse(catalogLight0.isDoorOrWindow());
      assertTrue(catalogLight0.isTexturable());
      assertTrue(catalogLight0.isProportional());
      assertEquals(2, lightSourceArray0.length);
      assertNotNull(catalogLight0);
      
      HomeLight homeLight0 = new HomeLight(catalogLight0);
      assertEquals((short)10, bigDecimal0.shortValue());
      assertEquals((byte)10, bigDecimal0.byteValue());
      assertNull(catalogLight0.getColor());
      assertFalse(catalogLight0.isModifiable());
      assertNull(catalogLight0.getCreationDate());
      assertEquals("h&*+\"", catalogLight0.getId());
      assertNull(catalogLight0.getCurrency());
      assertEquals(0.3926991F, catalogLight0.getDepth(), 0.01F);
      assertEquals((-694.0F), catalogLight0.getElevation(), 0.01F);
      assertEquals("h&*+\"", catalogLight0.getName());
      assertEquals((-815.0F), catalogLight0.getWidth(), 0.01F);
      assertEquals("h&*+\"", catalogLight0.getCreator());
      assertEquals("h&*+\"", catalogLight0.getDescription());
      assertNull(catalogLight0.getGrade());
      assertEquals((-694.0F), catalogLight0.getHeight(), 0.01F);
      assertNull(catalogLight0.getInformation());
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertTrue(catalogLight0.isResizable());
      assertTrue(catalogLight0.isDeformable());
      assertTrue(catalogLight0.isMovable());
      assertFalse(catalogLight0.isBackFaceShown());
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertFalse(catalogLight0.isDoorOrWindow());
      assertTrue(catalogLight0.isTexturable());
      assertTrue(catalogLight0.isProportional());
      assertNull(homeLight0.getColor());
      assertFalse(homeLight0.isBackFaceShown());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertTrue(homeLight0.isDeformable());
      assertTrue(homeLight0.isVisible());
      assertFalse(homeLight0.isModelMirrored());
      assertEquals(0.3926991F, homeLight0.getDepth(), 0.01F);
      assertEquals((-694.0F), homeLight0.getGroundElevation(), 0.01F);
      assertTrue(homeLight0.isTexturable());
      assertEquals((-694.0F), homeLight0.getElevation(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      assertFalse(homeLight0.isNameVisible());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals((-815.0F), homeLight0.getWidth(), 0.01F);
      assertEquals("h&*+\"", homeLight0.getName());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertEquals("h&*+\"", homeLight0.getDescription());
      assertTrue(homeLight0.isMovable());
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals("h&*+\"", homeLight0.getCatalogId());
      assertEquals(0.19634955F, homeLight0.getY(), 0.01F);
      assertNull(homeLight0.getShininess());
      assertTrue(homeLight0.isResizable());
      assertNull(homeLight0.getCurrency());
      assertEquals((-407.5F), homeLight0.getX(), 0.01F);
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals((-694.0F), homeLight0.getHeight(), 0.01F);
      assertEquals(2, lightSourceArray0.length);
      assertNotNull(homeLight0);
      
      HomeLight homeLight1 = new HomeLight(homeLight0);
      assertFalse(homeLight1.equals((Object)homeLight0));
      assertEquals((short)10, bigDecimal0.shortValue());
      assertEquals((byte)10, bigDecimal0.byteValue());
      assertNull(catalogLight0.getColor());
      assertFalse(catalogLight0.isModifiable());
      assertNull(catalogLight0.getCreationDate());
      assertEquals("h&*+\"", catalogLight0.getId());
      assertNull(catalogLight0.getCurrency());
      assertEquals(0.3926991F, catalogLight0.getDepth(), 0.01F);
      assertEquals((-694.0F), catalogLight0.getElevation(), 0.01F);
      assertEquals("h&*+\"", catalogLight0.getName());
      assertEquals((-815.0F), catalogLight0.getWidth(), 0.01F);
      assertEquals("h&*+\"", catalogLight0.getCreator());
      assertEquals("h&*+\"", catalogLight0.getDescription());
      assertNull(catalogLight0.getGrade());
      assertEquals((-694.0F), catalogLight0.getHeight(), 0.01F);
      assertNull(catalogLight0.getInformation());
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertTrue(catalogLight0.isResizable());
      assertTrue(catalogLight0.isDeformable());
      assertTrue(catalogLight0.isMovable());
      assertFalse(catalogLight0.isBackFaceShown());
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertFalse(catalogLight0.isDoorOrWindow());
      assertTrue(catalogLight0.isTexturable());
      assertTrue(catalogLight0.isProportional());
      assertNull(homeLight0.getColor());
      assertFalse(homeLight0.isBackFaceShown());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertTrue(homeLight0.isDeformable());
      assertTrue(homeLight0.isVisible());
      assertFalse(homeLight0.isModelMirrored());
      assertEquals(0.3926991F, homeLight0.getDepth(), 0.01F);
      assertEquals((-694.0F), homeLight0.getGroundElevation(), 0.01F);
      assertTrue(homeLight0.isTexturable());
      assertEquals((-694.0F), homeLight0.getElevation(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      assertFalse(homeLight0.isNameVisible());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals((-815.0F), homeLight0.getWidth(), 0.01F);
      assertEquals("h&*+\"", homeLight0.getName());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertEquals("h&*+\"", homeLight0.getDescription());
      assertTrue(homeLight0.isMovable());
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals("h&*+\"", homeLight0.getCatalogId());
      assertEquals(0.19634955F, homeLight0.getY(), 0.01F);
      assertNull(homeLight0.getShininess());
      assertTrue(homeLight0.isResizable());
      assertNull(homeLight0.getCurrency());
      assertEquals((-407.5F), homeLight0.getX(), 0.01F);
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals((-694.0F), homeLight0.getHeight(), 0.01F);
      assertNull(homeLight1.getColor());
      assertFalse(homeLight1.isModelMirrored());
      assertFalse(homeLight1.isBackFaceShown());
      assertFalse(homeLight1.isDoorOrWindow());
      assertNull(homeLight1.getCurrency());
      assertTrue(homeLight1.isTexturable());
      assertEquals(0.0F, homeLight1.getAngle(), 0.01F);
      assertFalse(homeLight1.isNameVisible());
      assertEquals((-407.5F), homeLight1.getX(), 0.01F);
      assertEquals(0.3926991F, homeLight1.getDepth(), 0.01F);
      assertEquals("h&*+\"", homeLight1.getCatalogId());
      assertEquals(0.0F, homeLight1.getNameYOffset(), 0.01F);
      assertEquals(0.19634955F, homeLight1.getY(), 0.01F);
      assertEquals((-815.0F), homeLight1.getWidth(), 0.01F);
      assertEquals("h&*+\"", homeLight1.getName());
      assertNull(homeLight1.getStaircaseCutOutShape());
      assertTrue(homeLight1.isMovable());
      assertEquals(0.5F, homeLight1.getPower(), 0.01F);
      assertNull(homeLight1.getShininess());
      assertEquals("h&*+\"", homeLight1.getDescription());
      assertEquals(0.0F, homeLight1.getNameAngle(), 0.01F);
      assertEquals((-694.0F), homeLight1.getElevation(), 0.01F);
      assertEquals((-694.0F), homeLight1.getHeight(), 0.01F);
      assertTrue(homeLight1.isVisible());
      assertEquals((-694.0F), homeLight1.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight1.getNameXOffset(), 0.01F);
      assertTrue(homeLight1.isDeformable());
      assertTrue(homeLight1.isResizable());
      assertEquals(2, lightSourceArray0.length);
      assertNotNull(homeLight1);
      
      HomeLight homeLight2 = homeLight1.clone();
      assertFalse(homeLight0.equals((Object)homeLight1));
      assertFalse(homeLight1.equals((Object)homeLight0));
      assertFalse(homeLight2.equals((Object)homeLight0));
      assertFalse(homeLight2.equals((Object)homeLight1));
      assertEquals((short)10, bigDecimal0.shortValue());
      assertEquals((byte)10, bigDecimal0.byteValue());
      assertNull(catalogLight0.getColor());
      assertFalse(catalogLight0.isModifiable());
      assertNull(catalogLight0.getCreationDate());
      assertEquals("h&*+\"", catalogLight0.getId());
      assertNull(catalogLight0.getCurrency());
      assertEquals(0.3926991F, catalogLight0.getDepth(), 0.01F);
      assertEquals((-694.0F), catalogLight0.getElevation(), 0.01F);
      assertEquals("h&*+\"", catalogLight0.getName());
      assertEquals((-815.0F), catalogLight0.getWidth(), 0.01F);
      assertEquals("h&*+\"", catalogLight0.getCreator());
      assertEquals("h&*+\"", catalogLight0.getDescription());
      assertNull(catalogLight0.getGrade());
      assertEquals((-694.0F), catalogLight0.getHeight(), 0.01F);
      assertNull(catalogLight0.getInformation());
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertTrue(catalogLight0.isResizable());
      assertTrue(catalogLight0.isDeformable());
      assertTrue(catalogLight0.isMovable());
      assertFalse(catalogLight0.isBackFaceShown());
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertFalse(catalogLight0.isDoorOrWindow());
      assertTrue(catalogLight0.isTexturable());
      assertTrue(catalogLight0.isProportional());
      assertNull(homeLight0.getColor());
      assertFalse(homeLight0.isBackFaceShown());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertTrue(homeLight0.isDeformable());
      assertTrue(homeLight0.isVisible());
      assertFalse(homeLight0.isModelMirrored());
      assertEquals(0.3926991F, homeLight0.getDepth(), 0.01F);
      assertEquals((-694.0F), homeLight0.getGroundElevation(), 0.01F);
      assertTrue(homeLight0.isTexturable());
      assertEquals((-694.0F), homeLight0.getElevation(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      assertFalse(homeLight0.isNameVisible());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals((-815.0F), homeLight0.getWidth(), 0.01F);
      assertEquals("h&*+\"", homeLight0.getName());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertEquals("h&*+\"", homeLight0.getDescription());
      assertTrue(homeLight0.isMovable());
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals("h&*+\"", homeLight0.getCatalogId());
      assertEquals(0.19634955F, homeLight0.getY(), 0.01F);
      assertNull(homeLight0.getShininess());
      assertTrue(homeLight0.isResizable());
      assertNull(homeLight0.getCurrency());
      assertEquals((-407.5F), homeLight0.getX(), 0.01F);
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals((-694.0F), homeLight0.getHeight(), 0.01F);
      assertNull(homeLight1.getColor());
      assertFalse(homeLight1.isModelMirrored());
      assertFalse(homeLight1.isBackFaceShown());
      assertFalse(homeLight1.isDoorOrWindow());
      assertNull(homeLight1.getCurrency());
      assertTrue(homeLight1.isTexturable());
      assertEquals(0.0F, homeLight1.getAngle(), 0.01F);
      assertFalse(homeLight1.isNameVisible());
      assertEquals((-407.5F), homeLight1.getX(), 0.01F);
      assertEquals(0.3926991F, homeLight1.getDepth(), 0.01F);
      assertEquals("h&*+\"", homeLight1.getCatalogId());
      assertEquals(0.0F, homeLight1.getNameYOffset(), 0.01F);
      assertEquals(0.19634955F, homeLight1.getY(), 0.01F);
      assertEquals((-815.0F), homeLight1.getWidth(), 0.01F);
      assertEquals("h&*+\"", homeLight1.getName());
      assertNull(homeLight1.getStaircaseCutOutShape());
      assertTrue(homeLight1.isMovable());
      assertEquals(0.5F, homeLight1.getPower(), 0.01F);
      assertNull(homeLight1.getShininess());
      assertEquals("h&*+\"", homeLight1.getDescription());
      assertEquals(0.0F, homeLight1.getNameAngle(), 0.01F);
      assertEquals((-694.0F), homeLight1.getElevation(), 0.01F);
      assertEquals((-694.0F), homeLight1.getHeight(), 0.01F);
      assertTrue(homeLight1.isVisible());
      assertEquals((-694.0F), homeLight1.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight1.getNameXOffset(), 0.01F);
      assertTrue(homeLight1.isDeformable());
      assertTrue(homeLight1.isResizable());
      assertEquals("h&*+\"", homeLight2.getCatalogId());
      assertNull(homeLight2.getShininess());
      assertTrue(homeLight2.isResizable());
      assertEquals((-694.0F), homeLight2.getHeight(), 0.01F);
      assertEquals((-815.0F), homeLight2.getWidth(), 0.01F);
      assertEquals("h&*+\"", homeLight2.getName());
      assertTrue(homeLight2.isVisible());
      assertTrue(homeLight2.isMovable());
      assertNull(homeLight2.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight2.getNameAngle(), 0.01F);
      assertEquals(0.3926991F, homeLight2.getDepth(), 0.01F);
      assertEquals(0.19634955F, homeLight2.getY(), 0.01F);
      assertNull(homeLight2.getCurrency());
      assertEquals(0.0F, homeLight2.getNameYOffset(), 0.01F);
      assertEquals(0.5F, homeLight2.getPower(), 0.01F);
      assertEquals((-407.5F), homeLight2.getX(), 0.01F);
      assertNull(homeLight2.getColor());
      assertTrue(homeLight2.isTexturable());
      assertEquals(0.0F, homeLight2.getAngle(), 0.01F);
      assertFalse(homeLight2.isModelMirrored());
      assertFalse(homeLight2.isBackFaceShown());
      assertFalse(homeLight2.isNameVisible());
      assertEquals((-694.0F), homeLight2.getElevation(), 0.01F);
      assertEquals(0.0F, homeLight2.getNameXOffset(), 0.01F);
      assertTrue(homeLight2.isDeformable());
      assertEquals((-694.0F), homeLight2.getGroundElevation(), 0.01F);
      assertEquals("h&*+\"", homeLight2.getDescription());
      assertFalse(homeLight2.isDoorOrWindow());
      assertEquals(2, lightSourceArray0.length);
      assertNotSame(homeLight0, homeLight1);
      assertNotSame(homeLight0, homeLight2);
      assertNotSame(homeLight1, homeLight2);
      assertNotSame(homeLight1, homeLight0);
      assertNotSame(homeLight2, homeLight0);
      assertNotSame(homeLight2, homeLight1);
      assertNotNull(homeLight2);
      
      HomeLight homeLight3 = (HomeLight)homeLight2.clone();
      assertFalse(homeLight0.equals((Object)homeLight1));
      assertFalse(homeLight0.equals((Object)homeLight2));
      assertFalse(homeLight1.equals((Object)homeLight2));
      assertFalse(homeLight1.equals((Object)homeLight0));
      assertFalse(homeLight2.equals((Object)homeLight0));
      assertFalse(homeLight2.equals((Object)homeLight1));
      assertFalse(homeLight3.equals((Object)homeLight1));
      assertFalse(homeLight3.equals((Object)homeLight2));
      assertFalse(homeLight3.equals((Object)homeLight0));
      assertEquals((short)10, bigDecimal0.shortValue());
      assertEquals((byte)10, bigDecimal0.byteValue());
      assertNull(catalogLight0.getColor());
      assertFalse(catalogLight0.isModifiable());
      assertNull(catalogLight0.getCreationDate());
      assertEquals("h&*+\"", catalogLight0.getId());
      assertNull(catalogLight0.getCurrency());
      assertEquals(0.3926991F, catalogLight0.getDepth(), 0.01F);
      assertEquals((-694.0F), catalogLight0.getElevation(), 0.01F);
      assertEquals("h&*+\"", catalogLight0.getName());
      assertEquals((-815.0F), catalogLight0.getWidth(), 0.01F);
      assertEquals("h&*+\"", catalogLight0.getCreator());
      assertEquals("h&*+\"", catalogLight0.getDescription());
      assertNull(catalogLight0.getGrade());
      assertEquals((-694.0F), catalogLight0.getHeight(), 0.01F);
      assertNull(catalogLight0.getInformation());
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertTrue(catalogLight0.isResizable());
      assertTrue(catalogLight0.isDeformable());
      assertTrue(catalogLight0.isMovable());
      assertFalse(catalogLight0.isBackFaceShown());
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertFalse(catalogLight0.isDoorOrWindow());
      assertTrue(catalogLight0.isTexturable());
      assertTrue(catalogLight0.isProportional());
      assertNull(homeLight0.getColor());
      assertFalse(homeLight0.isBackFaceShown());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertTrue(homeLight0.isDeformable());
      assertTrue(homeLight0.isVisible());
      assertFalse(homeLight0.isModelMirrored());
      assertEquals(0.3926991F, homeLight0.getDepth(), 0.01F);
      assertEquals((-694.0F), homeLight0.getGroundElevation(), 0.01F);
      assertTrue(homeLight0.isTexturable());
      assertEquals((-694.0F), homeLight0.getElevation(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      assertFalse(homeLight0.isNameVisible());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals((-815.0F), homeLight0.getWidth(), 0.01F);
      assertEquals("h&*+\"", homeLight0.getName());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertEquals("h&*+\"", homeLight0.getDescription());
      assertTrue(homeLight0.isMovable());
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals("h&*+\"", homeLight0.getCatalogId());
      assertEquals(0.19634955F, homeLight0.getY(), 0.01F);
      assertNull(homeLight0.getShininess());
      assertTrue(homeLight0.isResizable());
      assertNull(homeLight0.getCurrency());
      assertEquals((-407.5F), homeLight0.getX(), 0.01F);
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals((-694.0F), homeLight0.getHeight(), 0.01F);
      assertNull(homeLight1.getColor());
      assertFalse(homeLight1.isModelMirrored());
      assertFalse(homeLight1.isBackFaceShown());
      assertFalse(homeLight1.isDoorOrWindow());
      assertNull(homeLight1.getCurrency());
      assertTrue(homeLight1.isTexturable());
      assertEquals(0.0F, homeLight1.getAngle(), 0.01F);
      assertFalse(homeLight1.isNameVisible());
      assertEquals((-407.5F), homeLight1.getX(), 0.01F);
      assertEquals(0.3926991F, homeLight1.getDepth(), 0.01F);
      assertEquals("h&*+\"", homeLight1.getCatalogId());
      assertEquals(0.0F, homeLight1.getNameYOffset(), 0.01F);
      assertEquals(0.19634955F, homeLight1.getY(), 0.01F);
      assertEquals((-815.0F), homeLight1.getWidth(), 0.01F);
      assertEquals("h&*+\"", homeLight1.getName());
      assertNull(homeLight1.getStaircaseCutOutShape());
      assertTrue(homeLight1.isMovable());
      assertEquals(0.5F, homeLight1.getPower(), 0.01F);
      assertNull(homeLight1.getShininess());
      assertEquals("h&*+\"", homeLight1.getDescription());
      assertEquals(0.0F, homeLight1.getNameAngle(), 0.01F);
      assertEquals((-694.0F), homeLight1.getElevation(), 0.01F);
      assertEquals((-694.0F), homeLight1.getHeight(), 0.01F);
      assertTrue(homeLight1.isVisible());
      assertEquals((-694.0F), homeLight1.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight1.getNameXOffset(), 0.01F);
      assertTrue(homeLight1.isDeformable());
      assertTrue(homeLight1.isResizable());
      assertEquals("h&*+\"", homeLight2.getCatalogId());
      assertNull(homeLight2.getShininess());
      assertTrue(homeLight2.isResizable());
      assertEquals((-694.0F), homeLight2.getHeight(), 0.01F);
      assertEquals((-815.0F), homeLight2.getWidth(), 0.01F);
      assertEquals("h&*+\"", homeLight2.getName());
      assertTrue(homeLight2.isVisible());
      assertTrue(homeLight2.isMovable());
      assertNull(homeLight2.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight2.getNameAngle(), 0.01F);
      assertEquals(0.3926991F, homeLight2.getDepth(), 0.01F);
      assertEquals(0.19634955F, homeLight2.getY(), 0.01F);
      assertNull(homeLight2.getCurrency());
      assertEquals(0.0F, homeLight2.getNameYOffset(), 0.01F);
      assertEquals(0.5F, homeLight2.getPower(), 0.01F);
      assertEquals((-407.5F), homeLight2.getX(), 0.01F);
      assertNull(homeLight2.getColor());
      assertTrue(homeLight2.isTexturable());
      assertEquals(0.0F, homeLight2.getAngle(), 0.01F);
      assertFalse(homeLight2.isModelMirrored());
      assertFalse(homeLight2.isBackFaceShown());
      assertFalse(homeLight2.isNameVisible());
      assertEquals((-694.0F), homeLight2.getElevation(), 0.01F);
      assertEquals(0.0F, homeLight2.getNameXOffset(), 0.01F);
      assertTrue(homeLight2.isDeformable());
      assertEquals((-694.0F), homeLight2.getGroundElevation(), 0.01F);
      assertEquals("h&*+\"", homeLight2.getDescription());
      assertFalse(homeLight2.isDoorOrWindow());
      assertEquals(0.0F, homeLight3.getAngle(), 0.01F);
      assertEquals((-694.0F), homeLight3.getElevation(), 0.01F);
      assertEquals(0.0F, homeLight3.getNameXOffset(), 0.01F);
      assertEquals((-694.0F), homeLight3.getGroundElevation(), 0.01F);
      assertEquals(0.19634955F, homeLight3.getY(), 0.01F);
      assertEquals((-815.0F), homeLight3.getWidth(), 0.01F);
      assertTrue(homeLight3.isResizable());
      assertEquals(0.5F, homeLight3.getPower(), 0.01F);
      assertNull(homeLight3.getShininess());
      assertEquals(0.0F, homeLight3.getNameAngle(), 0.01F);
      assertNull(homeLight3.getStaircaseCutOutShape());
      assertNull(homeLight3.getCurrency());
      assertTrue(homeLight3.isMovable());
      assertTrue(homeLight3.isDeformable());
      assertEquals((-407.5F), homeLight3.getX(), 0.01F);
      assertEquals((-694.0F), homeLight3.getHeight(), 0.01F);
      assertTrue(homeLight3.isVisible());
      assertEquals(0.3926991F, homeLight3.getDepth(), 0.01F);
      assertEquals("h&*+\"", homeLight3.getCatalogId());
      assertEquals(0.0F, homeLight3.getNameYOffset(), 0.01F);
      assertNull(homeLight3.getColor());
      assertEquals("h&*+\"", homeLight3.getName());
      assertFalse(homeLight3.isBackFaceShown());
      assertEquals("h&*+\"", homeLight3.getDescription());
      assertFalse(homeLight3.isDoorOrWindow());
      assertFalse(homeLight3.isModelMirrored());
      assertTrue(homeLight3.isTexturable());
      assertFalse(homeLight3.isNameVisible());
      assertEquals(2, lightSourceArray0.length);
      assertNotSame(homeLight0, homeLight1);
      assertNotSame(homeLight0, homeLight3);
      assertNotSame(homeLight0, homeLight2);
      assertNotSame(homeLight1, homeLight2);
      assertNotSame(homeLight1, homeLight3);
      assertNotSame(homeLight1, homeLight0);
      assertNotSame(homeLight2, homeLight0);
      assertNotSame(homeLight2, homeLight1);
      assertNotSame(homeLight2, homeLight3);
      assertNotSame(homeLight3, homeLight1);
      assertNotSame(homeLight3, homeLight2);
      assertNotSame(homeLight3, homeLight0);
      assertNotNull(homeLight3);
      
      homeLight2.setModelMirrored(true);
      assertFalse(homeLight0.equals((Object)homeLight1));
      assertFalse(homeLight0.equals((Object)homeLight3));
      assertFalse(homeLight0.equals((Object)homeLight2));
      assertFalse(homeLight1.equals((Object)homeLight2));
      assertFalse(homeLight1.equals((Object)homeLight3));
      assertFalse(homeLight1.equals((Object)homeLight0));
      assertFalse(homeLight2.equals((Object)homeLight0));
      assertFalse(homeLight2.equals((Object)homeLight1));
      assertFalse(homeLight2.equals((Object)homeLight3));
      assertEquals((short)10, bigDecimal0.shortValue());
      assertEquals((byte)10, bigDecimal0.byteValue());
      assertNull(catalogLight0.getColor());
      assertFalse(catalogLight0.isModifiable());
      assertNull(catalogLight0.getCreationDate());
      assertEquals("h&*+\"", catalogLight0.getId());
      assertNull(catalogLight0.getCurrency());
      assertEquals(0.3926991F, catalogLight0.getDepth(), 0.01F);
      assertEquals((-694.0F), catalogLight0.getElevation(), 0.01F);
      assertEquals("h&*+\"", catalogLight0.getName());
      assertEquals((-815.0F), catalogLight0.getWidth(), 0.01F);
      assertEquals("h&*+\"", catalogLight0.getCreator());
      assertEquals("h&*+\"", catalogLight0.getDescription());
      assertNull(catalogLight0.getGrade());
      assertEquals((-694.0F), catalogLight0.getHeight(), 0.01F);
      assertNull(catalogLight0.getInformation());
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertTrue(catalogLight0.isResizable());
      assertTrue(catalogLight0.isDeformable());
      assertTrue(catalogLight0.isMovable());
      assertFalse(catalogLight0.isBackFaceShown());
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertFalse(catalogLight0.isDoorOrWindow());
      assertTrue(catalogLight0.isTexturable());
      assertTrue(catalogLight0.isProportional());
      assertNull(homeLight0.getColor());
      assertFalse(homeLight0.isBackFaceShown());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertTrue(homeLight0.isDeformable());
      assertTrue(homeLight0.isVisible());
      assertFalse(homeLight0.isModelMirrored());
      assertEquals(0.3926991F, homeLight0.getDepth(), 0.01F);
      assertEquals((-694.0F), homeLight0.getGroundElevation(), 0.01F);
      assertTrue(homeLight0.isTexturable());
      assertEquals((-694.0F), homeLight0.getElevation(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      assertFalse(homeLight0.isNameVisible());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals((-815.0F), homeLight0.getWidth(), 0.01F);
      assertEquals("h&*+\"", homeLight0.getName());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertEquals("h&*+\"", homeLight0.getDescription());
      assertTrue(homeLight0.isMovable());
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals("h&*+\"", homeLight0.getCatalogId());
      assertEquals(0.19634955F, homeLight0.getY(), 0.01F);
      assertNull(homeLight0.getShininess());
      assertTrue(homeLight0.isResizable());
      assertNull(homeLight0.getCurrency());
      assertEquals((-407.5F), homeLight0.getX(), 0.01F);
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals((-694.0F), homeLight0.getHeight(), 0.01F);
      assertNull(homeLight1.getColor());
      assertFalse(homeLight1.isModelMirrored());
      assertFalse(homeLight1.isBackFaceShown());
      assertFalse(homeLight1.isDoorOrWindow());
      assertNull(homeLight1.getCurrency());
      assertTrue(homeLight1.isTexturable());
      assertEquals(0.0F, homeLight1.getAngle(), 0.01F);
      assertFalse(homeLight1.isNameVisible());
      assertEquals((-407.5F), homeLight1.getX(), 0.01F);
      assertEquals(0.3926991F, homeLight1.getDepth(), 0.01F);
      assertEquals("h&*+\"", homeLight1.getCatalogId());
      assertEquals(0.0F, homeLight1.getNameYOffset(), 0.01F);
      assertEquals(0.19634955F, homeLight1.getY(), 0.01F);
      assertEquals((-815.0F), homeLight1.getWidth(), 0.01F);
      assertEquals("h&*+\"", homeLight1.getName());
      assertNull(homeLight1.getStaircaseCutOutShape());
      assertTrue(homeLight1.isMovable());
      assertEquals(0.5F, homeLight1.getPower(), 0.01F);
      assertNull(homeLight1.getShininess());
      assertEquals("h&*+\"", homeLight1.getDescription());
      assertEquals(0.0F, homeLight1.getNameAngle(), 0.01F);
      assertEquals((-694.0F), homeLight1.getElevation(), 0.01F);
      assertEquals((-694.0F), homeLight1.getHeight(), 0.01F);
      assertTrue(homeLight1.isVisible());
      assertEquals((-694.0F), homeLight1.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight1.getNameXOffset(), 0.01F);
      assertTrue(homeLight1.isDeformable());
      assertTrue(homeLight1.isResizable());
      assertEquals("h&*+\"", homeLight2.getCatalogId());
      assertNull(homeLight2.getShininess());
      assertTrue(homeLight2.isResizable());
      assertEquals((-694.0F), homeLight2.getHeight(), 0.01F);
      assertEquals((-815.0F), homeLight2.getWidth(), 0.01F);
      assertEquals("h&*+\"", homeLight2.getName());
      assertTrue(homeLight2.isVisible());
      assertTrue(homeLight2.isMovable());
      assertNull(homeLight2.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight2.getNameAngle(), 0.01F);
      assertEquals(0.3926991F, homeLight2.getDepth(), 0.01F);
      assertEquals(0.19634955F, homeLight2.getY(), 0.01F);
      assertNull(homeLight2.getCurrency());
      assertEquals(0.0F, homeLight2.getNameYOffset(), 0.01F);
      assertEquals(0.5F, homeLight2.getPower(), 0.01F);
      assertTrue(homeLight2.isModelMirrored());
      assertEquals((-407.5F), homeLight2.getX(), 0.01F);
      assertNull(homeLight2.getColor());
      assertTrue(homeLight2.isTexturable());
      assertEquals(0.0F, homeLight2.getAngle(), 0.01F);
      assertFalse(homeLight2.isBackFaceShown());
      assertFalse(homeLight2.isNameVisible());
      assertEquals((-694.0F), homeLight2.getElevation(), 0.01F);
      assertEquals(0.0F, homeLight2.getNameXOffset(), 0.01F);
      assertTrue(homeLight2.isDeformable());
      assertEquals((-694.0F), homeLight2.getGroundElevation(), 0.01F);
      assertEquals("h&*+\"", homeLight2.getDescription());
      assertFalse(homeLight2.isDoorOrWindow());
      assertEquals(2, lightSourceArray0.length);
      assertNotSame(homeLight0, homeLight1);
      assertNotSame(homeLight0, homeLight3);
      assertNotSame(homeLight0, homeLight2);
      assertNotSame(homeLight1, homeLight2);
      assertNotSame(homeLight1, homeLight3);
      assertNotSame(homeLight1, homeLight0);
      assertNotSame(homeLight2, homeLight0);
      assertNotSame(homeLight2, homeLight1);
      assertNotSame(homeLight2, homeLight3);
      
      boolean boolean1 = homeLight2.isNameCenterPointAt(0, 127.82604F, 528.0F);
      assertFalse(homeLight0.equals((Object)homeLight1));
      assertFalse(homeLight0.equals((Object)homeLight3));
      assertFalse(homeLight0.equals((Object)homeLight2));
      assertFalse(homeLight1.equals((Object)homeLight2));
      assertFalse(homeLight1.equals((Object)homeLight3));
      assertFalse(homeLight1.equals((Object)homeLight0));
      assertFalse(homeLight2.equals((Object)homeLight0));
      assertFalse(homeLight2.equals((Object)homeLight1));
      assertFalse(homeLight2.equals((Object)homeLight3));
      assertFalse(boolean1 == boolean0);
      assertEquals((short)10, bigDecimal0.shortValue());
      assertEquals((byte)10, bigDecimal0.byteValue());
      assertNull(catalogLight0.getColor());
      assertFalse(catalogLight0.isModifiable());
      assertNull(catalogLight0.getCreationDate());
      assertEquals("h&*+\"", catalogLight0.getId());
      assertNull(catalogLight0.getCurrency());
      assertEquals(0.3926991F, catalogLight0.getDepth(), 0.01F);
      assertEquals((-694.0F), catalogLight0.getElevation(), 0.01F);
      assertEquals("h&*+\"", catalogLight0.getName());
      assertEquals((-815.0F), catalogLight0.getWidth(), 0.01F);
      assertEquals("h&*+\"", catalogLight0.getCreator());
      assertEquals("h&*+\"", catalogLight0.getDescription());
      assertNull(catalogLight0.getGrade());
      assertEquals((-694.0F), catalogLight0.getHeight(), 0.01F);
      assertNull(catalogLight0.getInformation());
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertTrue(catalogLight0.isResizable());
      assertTrue(catalogLight0.isDeformable());
      assertTrue(catalogLight0.isMovable());
      assertFalse(catalogLight0.isBackFaceShown());
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertFalse(catalogLight0.isDoorOrWindow());
      assertTrue(catalogLight0.isTexturable());
      assertTrue(catalogLight0.isProportional());
      assertNull(homeLight0.getColor());
      assertFalse(homeLight0.isBackFaceShown());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertTrue(homeLight0.isDeformable());
      assertTrue(homeLight0.isVisible());
      assertFalse(homeLight0.isModelMirrored());
      assertEquals(0.3926991F, homeLight0.getDepth(), 0.01F);
      assertEquals((-694.0F), homeLight0.getGroundElevation(), 0.01F);
      assertTrue(homeLight0.isTexturable());
      assertEquals((-694.0F), homeLight0.getElevation(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      assertFalse(homeLight0.isNameVisible());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals((-815.0F), homeLight0.getWidth(), 0.01F);
      assertEquals("h&*+\"", homeLight0.getName());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertEquals("h&*+\"", homeLight0.getDescription());
      assertTrue(homeLight0.isMovable());
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals("h&*+\"", homeLight0.getCatalogId());
      assertEquals(0.19634955F, homeLight0.getY(), 0.01F);
      assertNull(homeLight0.getShininess());
      assertTrue(homeLight0.isResizable());
      assertNull(homeLight0.getCurrency());
      assertEquals((-407.5F), homeLight0.getX(), 0.01F);
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals((-694.0F), homeLight0.getHeight(), 0.01F);
      assertNull(homeLight1.getColor());
      assertFalse(homeLight1.isModelMirrored());
      assertFalse(homeLight1.isBackFaceShown());
      assertFalse(homeLight1.isDoorOrWindow());
      assertNull(homeLight1.getCurrency());
      assertTrue(homeLight1.isTexturable());
      assertEquals(0.0F, homeLight1.getAngle(), 0.01F);
      assertFalse(homeLight1.isNameVisible());
      assertEquals((-407.5F), homeLight1.getX(), 0.01F);
      assertEquals(0.3926991F, homeLight1.getDepth(), 0.01F);
      assertEquals("h&*+\"", homeLight1.getCatalogId());
      assertEquals(0.0F, homeLight1.getNameYOffset(), 0.01F);
      assertEquals(0.19634955F, homeLight1.getY(), 0.01F);
      assertEquals((-815.0F), homeLight1.getWidth(), 0.01F);
      assertEquals("h&*+\"", homeLight1.getName());
      assertNull(homeLight1.getStaircaseCutOutShape());
      assertTrue(homeLight1.isMovable());
      assertEquals(0.5F, homeLight1.getPower(), 0.01F);
      assertNull(homeLight1.getShininess());
      assertEquals("h&*+\"", homeLight1.getDescription());
      assertEquals(0.0F, homeLight1.getNameAngle(), 0.01F);
      assertEquals((-694.0F), homeLight1.getElevation(), 0.01F);
      assertEquals((-694.0F), homeLight1.getHeight(), 0.01F);
      assertTrue(homeLight1.isVisible());
      assertEquals((-694.0F), homeLight1.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight1.getNameXOffset(), 0.01F);
      assertTrue(homeLight1.isDeformable());
      assertTrue(homeLight1.isResizable());
      assertEquals("h&*+\"", homeLight2.getCatalogId());
      assertNull(homeLight2.getShininess());
      assertTrue(homeLight2.isResizable());
      assertEquals((-694.0F), homeLight2.getHeight(), 0.01F);
      assertEquals((-815.0F), homeLight2.getWidth(), 0.01F);
      assertEquals("h&*+\"", homeLight2.getName());
      assertTrue(homeLight2.isVisible());
      assertTrue(homeLight2.isMovable());
      assertNull(homeLight2.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight2.getNameAngle(), 0.01F);
      assertEquals(0.3926991F, homeLight2.getDepth(), 0.01F);
      assertEquals(0.19634955F, homeLight2.getY(), 0.01F);
      assertNull(homeLight2.getCurrency());
      assertEquals(0.0F, homeLight2.getNameYOffset(), 0.01F);
      assertEquals(0.5F, homeLight2.getPower(), 0.01F);
      assertTrue(homeLight2.isModelMirrored());
      assertEquals((-407.5F), homeLight2.getX(), 0.01F);
      assertNull(homeLight2.getColor());
      assertTrue(homeLight2.isTexturable());
      assertEquals(0.0F, homeLight2.getAngle(), 0.01F);
      assertFalse(homeLight2.isBackFaceShown());
      assertFalse(homeLight2.isNameVisible());
      assertEquals((-694.0F), homeLight2.getElevation(), 0.01F);
      assertEquals(0.0F, homeLight2.getNameXOffset(), 0.01F);
      assertTrue(homeLight2.isDeformable());
      assertEquals((-694.0F), homeLight2.getGroundElevation(), 0.01F);
      assertEquals("h&*+\"", homeLight2.getDescription());
      assertFalse(homeLight2.isDoorOrWindow());
      assertEquals(2, lightSourceArray0.length);
      assertNotSame(homeLight0, homeLight1);
      assertNotSame(homeLight0, homeLight3);
      assertNotSame(homeLight0, homeLight2);
      assertNotSame(homeLight1, homeLight2);
      assertNotSame(homeLight1, homeLight3);
      assertNotSame(homeLight1, homeLight0);
      assertNotSame(homeLight2, homeLight0);
      assertNotSame(homeLight2, homeLight1);
      assertNotSame(homeLight2, homeLight3);
      assertTrue(boolean1);
      
      TextStyle textStyle0 = new TextStyle((-3239.72F));
      assertFalse(textStyle0.isBold());
      assertEquals((-3239.72F), textStyle0.getFontSize(), 0.01F);
      assertFalse(textStyle0.isItalic());
      assertNotNull(textStyle0);
      
      homeLight0.setNameStyle(textStyle0);
      assertFalse(homeLight0.equals((Object)homeLight1));
      assertFalse(homeLight0.equals((Object)homeLight3));
      assertFalse(homeLight0.equals((Object)homeLight2));
      assertEquals((short)10, bigDecimal0.shortValue());
      assertEquals((byte)10, bigDecimal0.byteValue());
      assertNull(catalogLight0.getColor());
      assertFalse(catalogLight0.isModifiable());
      assertNull(catalogLight0.getCreationDate());
      assertEquals("h&*+\"", catalogLight0.getId());
      assertNull(catalogLight0.getCurrency());
      assertEquals(0.3926991F, catalogLight0.getDepth(), 0.01F);
      assertEquals((-694.0F), catalogLight0.getElevation(), 0.01F);
      assertEquals("h&*+\"", catalogLight0.getName());
      assertEquals((-815.0F), catalogLight0.getWidth(), 0.01F);
      assertEquals("h&*+\"", catalogLight0.getCreator());
      assertEquals("h&*+\"", catalogLight0.getDescription());
      assertNull(catalogLight0.getGrade());
      assertEquals((-694.0F), catalogLight0.getHeight(), 0.01F);
      assertNull(catalogLight0.getInformation());
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertTrue(catalogLight0.isResizable());
      assertTrue(catalogLight0.isDeformable());
      assertTrue(catalogLight0.isMovable());
      assertFalse(catalogLight0.isBackFaceShown());
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertFalse(catalogLight0.isDoorOrWindow());
      assertTrue(catalogLight0.isTexturable());
      assertTrue(catalogLight0.isProportional());
      assertNull(homeLight0.getColor());
      assertFalse(homeLight0.isBackFaceShown());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertTrue(homeLight0.isDeformable());
      assertTrue(homeLight0.isVisible());
      assertFalse(homeLight0.isModelMirrored());
      assertEquals(0.3926991F, homeLight0.getDepth(), 0.01F);
      assertEquals((-694.0F), homeLight0.getGroundElevation(), 0.01F);
      assertTrue(homeLight0.isTexturable());
      assertEquals((-694.0F), homeLight0.getElevation(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      assertFalse(homeLight0.isNameVisible());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals((-815.0F), homeLight0.getWidth(), 0.01F);
      assertEquals("h&*+\"", homeLight0.getName());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertEquals("h&*+\"", homeLight0.getDescription());
      assertTrue(homeLight0.isMovable());
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals("h&*+\"", homeLight0.getCatalogId());
      assertEquals(0.19634955F, homeLight0.getY(), 0.01F);
      assertNull(homeLight0.getShininess());
      assertTrue(homeLight0.isResizable());
      assertNull(homeLight0.getCurrency());
      assertEquals((-407.5F), homeLight0.getX(), 0.01F);
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals((-694.0F), homeLight0.getHeight(), 0.01F);
      assertFalse(textStyle0.isBold());
      assertEquals((-3239.72F), textStyle0.getFontSize(), 0.01F);
      assertFalse(textStyle0.isItalic());
      assertEquals(2, lightSourceArray0.length);
      assertNotSame(homeLight0, homeLight1);
      assertNotSame(homeLight0, homeLight3);
      assertNotSame(homeLight0, homeLight2);
      
      float float0 = homeLight0.getWidth();
      assertFalse(homeLight0.equals((Object)homeLight1));
      assertFalse(homeLight0.equals((Object)homeLight3));
      assertFalse(homeLight0.equals((Object)homeLight2));
      assertEquals((short)10, bigDecimal0.shortValue());
      assertEquals((byte)10, bigDecimal0.byteValue());
      assertNull(catalogLight0.getColor());
      assertFalse(catalogLight0.isModifiable());
      assertNull(catalogLight0.getCreationDate());
      assertEquals("h&*+\"", catalogLight0.getId());
      assertNull(catalogLight0.getCurrency());
      assertEquals(0.3926991F, catalogLight0.getDepth(), 0.01F);
      assertEquals((-694.0F), catalogLight0.getElevation(), 0.01F);
      assertEquals("h&*+\"", catalogLight0.getName());
      assertEquals((-815.0F), catalogLight0.getWidth(), 0.01F);
      assertEquals("h&*+\"", catalogLight0.getCreator());
      assertEquals("h&*+\"", catalogLight0.getDescription());
      assertNull(catalogLight0.getGrade());
      assertEquals((-694.0F), catalogLight0.getHeight(), 0.01F);
      assertNull(catalogLight0.getInformation());
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertTrue(catalogLight0.isResizable());
      assertTrue(catalogLight0.isDeformable());
      assertTrue(catalogLight0.isMovable());
      assertFalse(catalogLight0.isBackFaceShown());
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertFalse(catalogLight0.isDoorOrWindow());
      assertTrue(catalogLight0.isTexturable());
      assertTrue(catalogLight0.isProportional());
      assertNull(homeLight0.getColor());
      assertFalse(homeLight0.isBackFaceShown());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertTrue(homeLight0.isDeformable());
      assertTrue(homeLight0.isVisible());
      assertFalse(homeLight0.isModelMirrored());
      assertEquals(0.3926991F, homeLight0.getDepth(), 0.01F);
      assertEquals((-694.0F), homeLight0.getGroundElevation(), 0.01F);
      assertTrue(homeLight0.isTexturable());
      assertEquals((-694.0F), homeLight0.getElevation(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      assertFalse(homeLight0.isNameVisible());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals((-815.0F), homeLight0.getWidth(), 0.01F);
      assertEquals("h&*+\"", homeLight0.getName());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertEquals("h&*+\"", homeLight0.getDescription());
      assertTrue(homeLight0.isMovable());
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals("h&*+\"", homeLight0.getCatalogId());
      assertEquals(0.19634955F, homeLight0.getY(), 0.01F);
      assertNull(homeLight0.getShininess());
      assertTrue(homeLight0.isResizable());
      assertNull(homeLight0.getCurrency());
      assertEquals((-407.5F), homeLight0.getX(), 0.01F);
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals((-694.0F), homeLight0.getHeight(), 0.01F);
      assertEquals(2, lightSourceArray0.length);
      assertNotSame(homeLight0, homeLight1);
      assertNotSame(homeLight0, homeLight3);
      assertNotSame(homeLight0, homeLight2);
      assertEquals((-815.0F), float0, 0.01F);
      
      homeLight3.setMovable(true);
      assertFalse(homeLight0.equals((Object)homeLight1));
      assertFalse(homeLight0.equals((Object)homeLight3));
      assertFalse(homeLight0.equals((Object)homeLight2));
      assertFalse(homeLight1.equals((Object)homeLight2));
      assertFalse(homeLight1.equals((Object)homeLight3));
      assertFalse(homeLight1.equals((Object)homeLight0));
      assertFalse(homeLight2.equals((Object)homeLight0));
      assertFalse(homeLight2.equals((Object)homeLight1));
      assertFalse(homeLight2.equals((Object)homeLight3));
      assertFalse(homeLight3.equals((Object)homeLight1));
      assertFalse(homeLight3.equals((Object)homeLight2));
      assertFalse(homeLight3.equals((Object)homeLight0));
      assertEquals((short)10, bigDecimal0.shortValue());
      assertEquals((byte)10, bigDecimal0.byteValue());
      assertNull(catalogLight0.getColor());
      assertFalse(catalogLight0.isModifiable());
      assertNull(catalogLight0.getCreationDate());
      assertEquals("h&*+\"", catalogLight0.getId());
      assertNull(catalogLight0.getCurrency());
      assertEquals(0.3926991F, catalogLight0.getDepth(), 0.01F);
      assertEquals((-694.0F), catalogLight0.getElevation(), 0.01F);
      assertEquals("h&*+\"", catalogLight0.getName());
      assertEquals((-815.0F), catalogLight0.getWidth(), 0.01F);
      assertEquals("h&*+\"", catalogLight0.getCreator());
      assertEquals("h&*+\"", catalogLight0.getDescription());
      assertNull(catalogLight0.getGrade());
      assertEquals((-694.0F), catalogLight0.getHeight(), 0.01F);
      assertNull(catalogLight0.getInformation());
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertTrue(catalogLight0.isResizable());
      assertTrue(catalogLight0.isDeformable());
      assertTrue(catalogLight0.isMovable());
      assertFalse(catalogLight0.isBackFaceShown());
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertFalse(catalogLight0.isDoorOrWindow());
      assertTrue(catalogLight0.isTexturable());
      assertTrue(catalogLight0.isProportional());
      assertNull(homeLight0.getColor());
      assertFalse(homeLight0.isBackFaceShown());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertTrue(homeLight0.isDeformable());
      assertTrue(homeLight0.isVisible());
      assertFalse(homeLight0.isModelMirrored());
      assertEquals(0.3926991F, homeLight0.getDepth(), 0.01F);
      assertEquals((-694.0F), homeLight0.getGroundElevation(), 0.01F);
      assertTrue(homeLight0.isTexturable());
      assertEquals((-694.0F), homeLight0.getElevation(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      assertFalse(homeLight0.isNameVisible());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals((-815.0F), homeLight0.getWidth(), 0.01F);
      assertEquals("h&*+\"", homeLight0.getName());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertEquals("h&*+\"", homeLight0.getDescription());
      assertTrue(homeLight0.isMovable());
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals("h&*+\"", homeLight0.getCatalogId());
      assertEquals(0.19634955F, homeLight0.getY(), 0.01F);
      assertNull(homeLight0.getShininess());
      assertTrue(homeLight0.isResizable());
      assertNull(homeLight0.getCurrency());
      assertEquals((-407.5F), homeLight0.getX(), 0.01F);
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals((-694.0F), homeLight0.getHeight(), 0.01F);
      assertNull(homeLight1.getColor());
      assertFalse(homeLight1.isModelMirrored());
      assertFalse(homeLight1.isBackFaceShown());
      assertFalse(homeLight1.isDoorOrWindow());
      assertNull(homeLight1.getCurrency());
      assertTrue(homeLight1.isTexturable());
      assertEquals(0.0F, homeLight1.getAngle(), 0.01F);
      assertFalse(homeLight1.isNameVisible());
      assertEquals((-407.5F), homeLight1.getX(), 0.01F);
      assertEquals(0.3926991F, homeLight1.getDepth(), 0.01F);
      assertEquals("h&*+\"", homeLight1.getCatalogId());
      assertEquals(0.0F, homeLight1.getNameYOffset(), 0.01F);
      assertEquals(0.19634955F, homeLight1.getY(), 0.01F);
      assertEquals((-815.0F), homeLight1.getWidth(), 0.01F);
      assertEquals("h&*+\"", homeLight1.getName());
      assertNull(homeLight1.getStaircaseCutOutShape());
      assertTrue(homeLight1.isMovable());
      assertEquals(0.5F, homeLight1.getPower(), 0.01F);
      assertNull(homeLight1.getShininess());
      assertEquals("h&*+\"", homeLight1.getDescription());
      assertEquals(0.0F, homeLight1.getNameAngle(), 0.01F);
      assertEquals((-694.0F), homeLight1.getElevation(), 0.01F);
      assertEquals((-694.0F), homeLight1.getHeight(), 0.01F);
      assertTrue(homeLight1.isVisible());
      assertEquals((-694.0F), homeLight1.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight1.getNameXOffset(), 0.01F);
      assertTrue(homeLight1.isDeformable());
      assertTrue(homeLight1.isResizable());
      assertEquals("h&*+\"", homeLight2.getCatalogId());
      assertNull(homeLight2.getShininess());
      assertTrue(homeLight2.isResizable());
      assertEquals((-694.0F), homeLight2.getHeight(), 0.01F);
      assertEquals((-815.0F), homeLight2.getWidth(), 0.01F);
      assertEquals("h&*+\"", homeLight2.getName());
      assertTrue(homeLight2.isVisible());
      assertTrue(homeLight2.isMovable());
      assertNull(homeLight2.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight2.getNameAngle(), 0.01F);
      assertEquals(0.3926991F, homeLight2.getDepth(), 0.01F);
      assertEquals(0.19634955F, homeLight2.getY(), 0.01F);
      assertNull(homeLight2.getCurrency());
      assertEquals(0.0F, homeLight2.getNameYOffset(), 0.01F);
      assertEquals(0.5F, homeLight2.getPower(), 0.01F);
      assertTrue(homeLight2.isModelMirrored());
      assertEquals((-407.5F), homeLight2.getX(), 0.01F);
      assertNull(homeLight2.getColor());
      assertTrue(homeLight2.isTexturable());
      assertEquals(0.0F, homeLight2.getAngle(), 0.01F);
      assertFalse(homeLight2.isBackFaceShown());
      assertFalse(homeLight2.isNameVisible());
      assertEquals((-694.0F), homeLight2.getElevation(), 0.01F);
      assertEquals(0.0F, homeLight2.getNameXOffset(), 0.01F);
      assertTrue(homeLight2.isDeformable());
      assertEquals((-694.0F), homeLight2.getGroundElevation(), 0.01F);
      assertEquals("h&*+\"", homeLight2.getDescription());
      assertFalse(homeLight2.isDoorOrWindow());
      assertEquals(0.0F, homeLight3.getAngle(), 0.01F);
      assertEquals((-694.0F), homeLight3.getElevation(), 0.01F);
      assertEquals(0.0F, homeLight3.getNameXOffset(), 0.01F);
      assertEquals((-694.0F), homeLight3.getGroundElevation(), 0.01F);
      assertEquals(0.19634955F, homeLight3.getY(), 0.01F);
      assertEquals((-815.0F), homeLight3.getWidth(), 0.01F);
      assertTrue(homeLight3.isResizable());
      assertEquals(0.5F, homeLight3.getPower(), 0.01F);
      assertNull(homeLight3.getShininess());
      assertEquals(0.0F, homeLight3.getNameAngle(), 0.01F);
      assertNull(homeLight3.getStaircaseCutOutShape());
      assertNull(homeLight3.getCurrency());
      assertTrue(homeLight3.isMovable());
      assertTrue(homeLight3.isDeformable());
      assertEquals((-407.5F), homeLight3.getX(), 0.01F);
      assertEquals((-694.0F), homeLight3.getHeight(), 0.01F);
      assertTrue(homeLight3.isVisible());
      assertEquals(0.3926991F, homeLight3.getDepth(), 0.01F);
      assertEquals("h&*+\"", homeLight3.getCatalogId());
      assertEquals(0.0F, homeLight3.getNameYOffset(), 0.01F);
      assertNull(homeLight3.getColor());
      assertEquals("h&*+\"", homeLight3.getName());
      assertFalse(homeLight3.isBackFaceShown());
      assertEquals("h&*+\"", homeLight3.getDescription());
      assertFalse(homeLight3.isDoorOrWindow());
      assertFalse(homeLight3.isModelMirrored());
      assertTrue(homeLight3.isTexturable());
      assertFalse(homeLight3.isNameVisible());
      assertEquals(2, lightSourceArray0.length);
      assertNotSame(homeLight0, homeLight1);
      assertNotSame(homeLight0, homeLight3);
      assertNotSame(homeLight0, homeLight2);
      assertNotSame(homeLight1, homeLight2);
      assertNotSame(homeLight1, homeLight3);
      assertNotSame(homeLight1, homeLight0);
      assertNotSame(homeLight2, homeLight0);
      assertNotSame(homeLight2, homeLight1);
      assertNotSame(homeLight2, homeLight3);
      assertNotSame(homeLight3, homeLight1);
      assertNotSame(homeLight3, homeLight2);
      assertNotSame(homeLight3, homeLight0);
      
      homeLight3.setElevation(0);
      assertFalse(homeLight0.equals((Object)homeLight1));
      assertFalse(homeLight0.equals((Object)homeLight3));
      assertFalse(homeLight0.equals((Object)homeLight2));
      assertFalse(homeLight1.equals((Object)homeLight2));
      assertFalse(homeLight1.equals((Object)homeLight3));
      assertFalse(homeLight1.equals((Object)homeLight0));
      assertFalse(homeLight2.equals((Object)homeLight0));
      assertFalse(homeLight2.equals((Object)homeLight1));
      assertFalse(homeLight2.equals((Object)homeLight3));
      assertFalse(homeLight3.equals((Object)homeLight1));
      assertFalse(homeLight3.equals((Object)homeLight2));
      assertFalse(homeLight3.equals((Object)homeLight0));
      assertEquals((short)10, bigDecimal0.shortValue());
      assertEquals((byte)10, bigDecimal0.byteValue());
      assertNull(catalogLight0.getColor());
      assertFalse(catalogLight0.isModifiable());
      assertNull(catalogLight0.getCreationDate());
      assertEquals("h&*+\"", catalogLight0.getId());
      assertNull(catalogLight0.getCurrency());
      assertEquals(0.3926991F, catalogLight0.getDepth(), 0.01F);
      assertEquals((-694.0F), catalogLight0.getElevation(), 0.01F);
      assertEquals("h&*+\"", catalogLight0.getName());
      assertEquals((-815.0F), catalogLight0.getWidth(), 0.01F);
      assertEquals("h&*+\"", catalogLight0.getCreator());
      assertEquals("h&*+\"", catalogLight0.getDescription());
      assertNull(catalogLight0.getGrade());
      assertEquals((-694.0F), catalogLight0.getHeight(), 0.01F);
      assertNull(catalogLight0.getInformation());
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertTrue(catalogLight0.isResizable());
      assertTrue(catalogLight0.isDeformable());
      assertTrue(catalogLight0.isMovable());
      assertFalse(catalogLight0.isBackFaceShown());
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertFalse(catalogLight0.isDoorOrWindow());
      assertTrue(catalogLight0.isTexturable());
      assertTrue(catalogLight0.isProportional());
      assertNull(homeLight0.getColor());
      assertFalse(homeLight0.isBackFaceShown());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertTrue(homeLight0.isDeformable());
      assertTrue(homeLight0.isVisible());
      assertFalse(homeLight0.isModelMirrored());
      assertEquals(0.3926991F, homeLight0.getDepth(), 0.01F);
      assertEquals((-694.0F), homeLight0.getGroundElevation(), 0.01F);
      assertTrue(homeLight0.isTexturable());
      assertEquals((-694.0F), homeLight0.getElevation(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      assertFalse(homeLight0.isNameVisible());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals((-815.0F), homeLight0.getWidth(), 0.01F);
      assertEquals("h&*+\"", homeLight0.getName());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertEquals("h&*+\"", homeLight0.getDescription());
      assertTrue(homeLight0.isMovable());
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals("h&*+\"", homeLight0.getCatalogId());
      assertEquals(0.19634955F, homeLight0.getY(), 0.01F);
      assertNull(homeLight0.getShininess());
      assertTrue(homeLight0.isResizable());
      assertNull(homeLight0.getCurrency());
      assertEquals((-407.5F), homeLight0.getX(), 0.01F);
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals((-694.0F), homeLight0.getHeight(), 0.01F);
      assertNull(homeLight1.getColor());
      assertFalse(homeLight1.isModelMirrored());
      assertFalse(homeLight1.isBackFaceShown());
      assertFalse(homeLight1.isDoorOrWindow());
      assertNull(homeLight1.getCurrency());
      assertTrue(homeLight1.isTexturable());
      assertEquals(0.0F, homeLight1.getAngle(), 0.01F);
      assertFalse(homeLight1.isNameVisible());
      assertEquals((-407.5F), homeLight1.getX(), 0.01F);
      assertEquals(0.3926991F, homeLight1.getDepth(), 0.01F);
      assertEquals("h&*+\"", homeLight1.getCatalogId());
      assertEquals(0.0F, homeLight1.getNameYOffset(), 0.01F);
      assertEquals(0.19634955F, homeLight1.getY(), 0.01F);
      assertEquals((-815.0F), homeLight1.getWidth(), 0.01F);
      assertEquals("h&*+\"", homeLight1.getName());
      assertNull(homeLight1.getStaircaseCutOutShape());
      assertTrue(homeLight1.isMovable());
      assertEquals(0.5F, homeLight1.getPower(), 0.01F);
      assertNull(homeLight1.getShininess());
      assertEquals("h&*+\"", homeLight1.getDescription());
      assertEquals(0.0F, homeLight1.getNameAngle(), 0.01F);
      assertEquals((-694.0F), homeLight1.getElevation(), 0.01F);
      assertEquals((-694.0F), homeLight1.getHeight(), 0.01F);
      assertTrue(homeLight1.isVisible());
      assertEquals((-694.0F), homeLight1.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight1.getNameXOffset(), 0.01F);
      assertTrue(homeLight1.isDeformable());
      assertTrue(homeLight1.isResizable());
      assertEquals("h&*+\"", homeLight2.getCatalogId());
      assertNull(homeLight2.getShininess());
      assertTrue(homeLight2.isResizable());
      assertEquals((-694.0F), homeLight2.getHeight(), 0.01F);
      assertEquals((-815.0F), homeLight2.getWidth(), 0.01F);
      assertEquals("h&*+\"", homeLight2.getName());
      assertTrue(homeLight2.isVisible());
      assertTrue(homeLight2.isMovable());
      assertNull(homeLight2.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight2.getNameAngle(), 0.01F);
      assertEquals(0.3926991F, homeLight2.getDepth(), 0.01F);
      assertEquals(0.19634955F, homeLight2.getY(), 0.01F);
      assertNull(homeLight2.getCurrency());
      assertEquals(0.0F, homeLight2.getNameYOffset(), 0.01F);
      assertEquals(0.5F, homeLight2.getPower(), 0.01F);
      assertTrue(homeLight2.isModelMirrored());
      assertEquals((-407.5F), homeLight2.getX(), 0.01F);
      assertNull(homeLight2.getColor());
      assertTrue(homeLight2.isTexturable());
      assertEquals(0.0F, homeLight2.getAngle(), 0.01F);
      assertFalse(homeLight2.isBackFaceShown());
      assertFalse(homeLight2.isNameVisible());
      assertEquals((-694.0F), homeLight2.getElevation(), 0.01F);
      assertEquals(0.0F, homeLight2.getNameXOffset(), 0.01F);
      assertTrue(homeLight2.isDeformable());
      assertEquals((-694.0F), homeLight2.getGroundElevation(), 0.01F);
      assertEquals("h&*+\"", homeLight2.getDescription());
      assertFalse(homeLight2.isDoorOrWindow());
      assertEquals(0.0F, homeLight3.getElevation(), 0.01F);
      assertEquals(0.0F, homeLight3.getAngle(), 0.01F);
      assertEquals(0.0F, homeLight3.getNameXOffset(), 0.01F);
      assertEquals(0.19634955F, homeLight3.getY(), 0.01F);
      assertEquals(0.0F, homeLight3.getGroundElevation(), 0.01F);
      assertEquals((-815.0F), homeLight3.getWidth(), 0.01F);
      assertTrue(homeLight3.isResizable());
      assertEquals(0.5F, homeLight3.getPower(), 0.01F);
      assertNull(homeLight3.getShininess());
      assertEquals(0.0F, homeLight3.getNameAngle(), 0.01F);
      assertNull(homeLight3.getStaircaseCutOutShape());
      assertNull(homeLight3.getCurrency());
      assertTrue(homeLight3.isMovable());
      assertTrue(homeLight3.isDeformable());
      assertEquals((-407.5F), homeLight3.getX(), 0.01F);
      assertEquals((-694.0F), homeLight3.getHeight(), 0.01F);
      assertTrue(homeLight3.isVisible());
      assertEquals(0.3926991F, homeLight3.getDepth(), 0.01F);
      assertEquals("h&*+\"", homeLight3.getCatalogId());
      assertEquals(0.0F, homeLight3.getNameYOffset(), 0.01F);
      assertNull(homeLight3.getColor());
      assertEquals("h&*+\"", homeLight3.getName());
      assertFalse(homeLight3.isBackFaceShown());
      assertEquals("h&*+\"", homeLight3.getDescription());
      assertFalse(homeLight3.isDoorOrWindow());
      assertFalse(homeLight3.isModelMirrored());
      assertTrue(homeLight3.isTexturable());
      assertFalse(homeLight3.isNameVisible());
      assertEquals(2, lightSourceArray0.length);
      assertNotSame(homeLight0, homeLight1);
      assertNotSame(homeLight0, homeLight3);
      assertNotSame(homeLight0, homeLight2);
      assertNotSame(homeLight1, homeLight2);
      assertNotSame(homeLight1, homeLight3);
      assertNotSame(homeLight1, homeLight0);
      assertNotSame(homeLight2, homeLight0);
      assertNotSame(homeLight2, homeLight1);
      assertNotSame(homeLight2, homeLight3);
      assertNotSame(homeLight3, homeLight1);
      assertNotSame(homeLight3, homeLight2);
      assertNotSame(homeLight3, homeLight0);
  }

  @Test(timeout = 4000)
  public void test247()  throws Throwable  {
      LightSource[] lightSourceArray0 = new LightSource[1];
      Float float0 = new Float(0.18279628170184137);
      assertNotNull(float0);
      assertEquals(0.18279628F, (float)float0, 0.01F);
      
      Float float1 = new Float(4.8656383F);
      assertNotEquals((float)float1, (float)float0, 0.01F);
      assertNotNull(float1);
      assertEquals(4.8656383F, (float)float1, 0.01F);
      
      String[] stringArray0 = new String[7];
      stringArray0[0] = "(%";
      stringArray0[1] = "(%";
      stringArray0[2] = "(%";
      stringArray0[3] = "(%";
      stringArray0[4] = "(%";
      stringArray0[5] = "Content isn't a JAR entry";
      stringArray0[6] = "(%";
      Long long0 = new Long((-1L));
      assertNotNull(long0);
      assertEquals((-1L), (long)long0);
      
      BigDecimal bigDecimal0 = BigDecimal.ONE;
      assertEquals((short)1, bigDecimal0.shortValue());
      assertEquals((byte)1, bigDecimal0.byteValue());
      assertNotNull(bigDecimal0);
      
      BigDecimal bigDecimal1 = BigDecimal.TEN;
      assertFalse(bigDecimal1.equals((Object)bigDecimal0));
      assertEquals((short)10, bigDecimal1.shortValue());
      assertEquals((byte)10, bigDecimal1.byteValue());
      assertNotSame(bigDecimal1, bigDecimal0);
      assertNotNull(bigDecimal1);
      
      CatalogLight catalogLight0 = new CatalogLight("(%", "Content isn't a JAR entry", "Content isn't a JAR entry", "x7", stringArray0, long0, float1, (Content) null, (Content) null, (Content) null, 4.8656383F, 2233.23F, 883.0F, 1561.2765F, true, lightSourceArray0, "(%", (float[][]) null, "jjM[&wC4@Itbda4", false, true, false, bigDecimal0, bigDecimal1, "xSL$6exP/BgtRGBf");
      assertNotEquals((float)float1, (float)float0, 0.01F);
      assertFalse(bigDecimal0.equals((Object)bigDecimal1));
      assertFalse(bigDecimal1.equals((Object)bigDecimal0));
      assertEquals((short)1, bigDecimal0.shortValue());
      assertEquals((byte)1, bigDecimal0.byteValue());
      assertEquals((short)10, bigDecimal1.shortValue());
      assertEquals((byte)10, bigDecimal1.byteValue());
      assertEquals(2233.23F, catalogLight0.getDepth(), 0.01F);
      assertEquals("(%", catalogLight0.getStaircaseCutOutShape());
      assertFalse(catalogLight0.isTexturable());
      assertEquals("x7", catalogLight0.getInformation());
      assertTrue(catalogLight0.isDeformable());
      assertEquals("xSL$6exP/BgtRGBf", catalogLight0.getCurrency());
      assertFalse(catalogLight0.isBackFaceShown());
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertEquals(883.0F, catalogLight0.getHeight(), 0.01F);
      assertFalse(catalogLight0.isResizable());
      assertTrue(catalogLight0.isProportional());
      assertTrue(catalogLight0.isMovable());
      assertFalse(catalogLight0.isDoorOrWindow());
      assertEquals(4.8656383F, catalogLight0.getWidth(), 0.01F);
      assertEquals("Content isn't a JAR entry", catalogLight0.getName());
      assertNull(catalogLight0.getColor());
      assertFalse(catalogLight0.isModifiable());
      assertEquals("(%", catalogLight0.getId());
      assertEquals((-1L), (long)catalogLight0.getCreationDate());
      assertEquals(1561.2765F, catalogLight0.getElevation(), 0.01F);
      assertEquals("jjM[&wC4@Itbda4", catalogLight0.getCreator());
      assertEquals(4.8656383F, catalogLight0.getGrade(), 0.01F);
      assertEquals("Content isn't a JAR entry", catalogLight0.getDescription());
      assertEquals(1, lightSourceArray0.length);
      assertEquals(7, stringArray0.length);
      assertNotNull(catalogLight0);
      
      HomeLight homeLight0 = new HomeLight(catalogLight0);
      assertNotEquals((float)float1, (float)float0, 0.01F);
      assertFalse(bigDecimal0.equals((Object)bigDecimal1));
      assertFalse(bigDecimal1.equals((Object)bigDecimal0));
      assertEquals((short)1, bigDecimal0.shortValue());
      assertEquals((byte)1, bigDecimal0.byteValue());
      assertEquals((short)10, bigDecimal1.shortValue());
      assertEquals((byte)10, bigDecimal1.byteValue());
      assertEquals(2233.23F, catalogLight0.getDepth(), 0.01F);
      assertEquals("(%", catalogLight0.getStaircaseCutOutShape());
      assertFalse(catalogLight0.isTexturable());
      assertEquals("x7", catalogLight0.getInformation());
      assertTrue(catalogLight0.isDeformable());
      assertEquals("xSL$6exP/BgtRGBf", catalogLight0.getCurrency());
      assertFalse(catalogLight0.isBackFaceShown());
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertEquals(883.0F, catalogLight0.getHeight(), 0.01F);
      assertFalse(catalogLight0.isResizable());
      assertTrue(catalogLight0.isProportional());
      assertTrue(catalogLight0.isMovable());
      assertFalse(catalogLight0.isDoorOrWindow());
      assertEquals(4.8656383F, catalogLight0.getWidth(), 0.01F);
      assertEquals("Content isn't a JAR entry", catalogLight0.getName());
      assertNull(catalogLight0.getColor());
      assertFalse(catalogLight0.isModifiable());
      assertEquals("(%", catalogLight0.getId());
      assertEquals((-1L), (long)catalogLight0.getCreationDate());
      assertEquals(1561.2765F, catalogLight0.getElevation(), 0.01F);
      assertEquals("jjM[&wC4@Itbda4", catalogLight0.getCreator());
      assertEquals(4.8656383F, catalogLight0.getGrade(), 0.01F);
      assertEquals("Content isn't a JAR entry", catalogLight0.getDescription());
      assertFalse(homeLight0.isDoorOrWindow());
      assertFalse(homeLight0.isBackFaceShown());
      assertFalse(homeLight0.isModelMirrored());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertEquals(2.4328191F, homeLight0.getX(), 0.01F);
      assertEquals("xSL$6exP/BgtRGBf", homeLight0.getCurrency());
      assertEquals(4.8656383F, homeLight0.getWidth(), 0.01F);
      assertFalse(homeLight0.isNameVisible());
      assertTrue(homeLight0.isDeformable());
      assertEquals(1116.615F, homeLight0.getY(), 0.01F);
      assertTrue(homeLight0.isVisible());
      assertFalse(homeLight0.isTexturable());
      assertEquals("(%", homeLight0.getCatalogId());
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals(883.0F, homeLight0.getHeight(), 0.01F);
      assertFalse(homeLight0.isResizable());
      assertNull(homeLight0.getShininess());
      assertEquals("Content isn't a JAR entry", homeLight0.getDescription());
      assertEquals(1561.2765F, homeLight0.getGroundElevation(), 0.01F);
      assertEquals(2233.23F, homeLight0.getDepth(), 0.01F);
      assertEquals(1561.2765F, homeLight0.getElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertEquals("Content isn't a JAR entry", homeLight0.getName());
      assertTrue(homeLight0.isMovable());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals("(%", homeLight0.getStaircaseCutOutShape());
      assertNull(homeLight0.getColor());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertEquals(1, lightSourceArray0.length);
      assertEquals(7, stringArray0.length);
      assertNotNull(homeLight0);
      
      // Undeclared exception!
      try { 
        homeLight0.setShininess(float1);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Piece isn't texturable
         //
         verifyException("com.eteks.sweethome3d.model.HomePieceOfFurniture", e);
      }
  }

  @Test(timeout = 4000)
  public void test248()  throws Throwable  {
      LightSource[] lightSourceArray0 = new LightSource[14];
      BigDecimal bigDecimal0 = BigDecimal.ONE;
      assertEquals((byte)1, bigDecimal0.byteValue());
      assertEquals((short)1, bigDecimal0.shortValue());
      assertNotNull(bigDecimal0);
      
      CatalogLight catalogLight0 = new CatalogLight("(%", "(%", "(%", (Content) null, (Content) null, (-815.0011F), (-815.0011F), (-815.0011F), (-815.0011F), false, lightSourceArray0, (float[][]) null, "(%", false, bigDecimal0, bigDecimal0);
      assertEquals((byte)1, bigDecimal0.byteValue());
      assertEquals((short)1, bigDecimal0.shortValue());
      assertNull(catalogLight0.getInformation());
      assertTrue(catalogLight0.isDeformable());
      assertFalse(catalogLight0.isMovable());
      assertEquals((-815.0011F), catalogLight0.getHeight(), 0.01F);
      assertFalse(catalogLight0.isResizable());
      assertTrue(catalogLight0.isTexturable());
      assertTrue(catalogLight0.isProportional());
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertFalse(catalogLight0.isBackFaceShown());
      assertNull(catalogLight0.getGrade());
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertEquals("(%", catalogLight0.getName());
      assertFalse(catalogLight0.isDoorOrWindow());
      assertEquals("(%", catalogLight0.getId());
      assertNull(catalogLight0.getColor());
      assertFalse(catalogLight0.isModifiable());
      assertEquals((-815.0011F), catalogLight0.getElevation(), 0.01F);
      assertEquals("(%", catalogLight0.getDescription());
      assertNull(catalogLight0.getCurrency());
      assertEquals("(%", catalogLight0.getCreator());
      assertNull(catalogLight0.getCreationDate());
      assertEquals((-815.0011F), catalogLight0.getDepth(), 0.01F);
      assertEquals((-815.0011F), catalogLight0.getWidth(), 0.01F);
      assertEquals(14, lightSourceArray0.length);
      assertNotNull(catalogLight0);
      
      Float float0 = new Float((-815.0011F));
      assertNotNull(float0);
      assertEquals((-815.0011F), (float)float0, 0.01F);
      
      HomeLight homeLight0 = new HomeLight(catalogLight0);
      assertEquals((byte)1, bigDecimal0.byteValue());
      assertEquals((short)1, bigDecimal0.shortValue());
      assertNull(catalogLight0.getInformation());
      assertTrue(catalogLight0.isDeformable());
      assertFalse(catalogLight0.isMovable());
      assertEquals((-815.0011F), catalogLight0.getHeight(), 0.01F);
      assertFalse(catalogLight0.isResizable());
      assertTrue(catalogLight0.isTexturable());
      assertTrue(catalogLight0.isProportional());
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertFalse(catalogLight0.isBackFaceShown());
      assertNull(catalogLight0.getGrade());
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertEquals("(%", catalogLight0.getName());
      assertFalse(catalogLight0.isDoorOrWindow());
      assertEquals("(%", catalogLight0.getId());
      assertNull(catalogLight0.getColor());
      assertFalse(catalogLight0.isModifiable());
      assertEquals((-815.0011F), catalogLight0.getElevation(), 0.01F);
      assertEquals("(%", catalogLight0.getDescription());
      assertNull(catalogLight0.getCurrency());
      assertEquals("(%", catalogLight0.getCreator());
      assertNull(catalogLight0.getCreationDate());
      assertEquals((-815.0011F), catalogLight0.getDepth(), 0.01F);
      assertEquals((-815.0011F), catalogLight0.getWidth(), 0.01F);
      assertEquals((-815.0011F), homeLight0.getGroundElevation(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      assertEquals((-407.50055F), homeLight0.getX(), 0.01F);
      assertEquals((-407.50055F), homeLight0.getY(), 0.01F);
      assertTrue(homeLight0.isTexturable());
      assertFalse(homeLight0.isModelMirrored());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertFalse(homeLight0.isBackFaceShown());
      assertFalse(homeLight0.isNameVisible());
      assertEquals((-815.0011F), homeLight0.getDepth(), 0.01F);
      assertEquals("(%", homeLight0.getDescription());
      assertNull(homeLight0.getCurrency());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertNull(homeLight0.getColor());
      assertEquals((-815.0011F), homeLight0.getWidth(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertEquals((-815.0011F), homeLight0.getElevation(), 0.01F);
      assertFalse(homeLight0.isMovable());
      assertEquals((-815.0011F), homeLight0.getHeight(), 0.01F);
      assertFalse(homeLight0.isResizable());
      assertNull(homeLight0.getShininess());
      assertEquals("(%", homeLight0.getName());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertTrue(homeLight0.isVisible());
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertTrue(homeLight0.isDeformable());
      assertEquals("(%", homeLight0.getCatalogId());
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals(14, lightSourceArray0.length);
      assertNotNull(homeLight0);
      
      homeLight0.setShininess(float0);
      assertEquals((byte)1, bigDecimal0.byteValue());
      assertEquals((short)1, bigDecimal0.shortValue());
      assertNull(catalogLight0.getInformation());
      assertTrue(catalogLight0.isDeformable());
      assertFalse(catalogLight0.isMovable());
      assertEquals((-815.0011F), catalogLight0.getHeight(), 0.01F);
      assertFalse(catalogLight0.isResizable());
      assertTrue(catalogLight0.isTexturable());
      assertTrue(catalogLight0.isProportional());
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertFalse(catalogLight0.isBackFaceShown());
      assertNull(catalogLight0.getGrade());
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertEquals("(%", catalogLight0.getName());
      assertFalse(catalogLight0.isDoorOrWindow());
      assertEquals("(%", catalogLight0.getId());
      assertNull(catalogLight0.getColor());
      assertFalse(catalogLight0.isModifiable());
      assertEquals((-815.0011F), catalogLight0.getElevation(), 0.01F);
      assertEquals("(%", catalogLight0.getDescription());
      assertNull(catalogLight0.getCurrency());
      assertEquals("(%", catalogLight0.getCreator());
      assertNull(catalogLight0.getCreationDate());
      assertEquals((-815.0011F), catalogLight0.getDepth(), 0.01F);
      assertEquals((-815.0011F), catalogLight0.getWidth(), 0.01F);
      assertEquals((-815.0011F), homeLight0.getGroundElevation(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      assertEquals((-407.50055F), homeLight0.getX(), 0.01F);
      assertEquals((-407.50055F), homeLight0.getY(), 0.01F);
      assertTrue(homeLight0.isTexturable());
      assertFalse(homeLight0.isModelMirrored());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertFalse(homeLight0.isBackFaceShown());
      assertFalse(homeLight0.isNameVisible());
      assertEquals((-815.0011F), homeLight0.getDepth(), 0.01F);
      assertEquals("(%", homeLight0.getDescription());
      assertNull(homeLight0.getCurrency());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertNull(homeLight0.getColor());
      assertEquals((-815.0011F), homeLight0.getWidth(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertEquals((-815.0011F), homeLight0.getElevation(), 0.01F);
      assertFalse(homeLight0.isMovable());
      assertEquals((-815.0011F), homeLight0.getHeight(), 0.01F);
      assertFalse(homeLight0.isResizable());
      assertEquals((-815.0011F), homeLight0.getShininess(), 0.01F);
      assertEquals("(%", homeLight0.getName());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertTrue(homeLight0.isVisible());
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertTrue(homeLight0.isDeformable());
      assertEquals("(%", homeLight0.getCatalogId());
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals(14, lightSourceArray0.length);
      
      homeLight0.setDescription("npMnicV%Kd((/a|pf");
      assertEquals((byte)1, bigDecimal0.byteValue());
      assertEquals((short)1, bigDecimal0.shortValue());
      assertNull(catalogLight0.getInformation());
      assertTrue(catalogLight0.isDeformable());
      assertFalse(catalogLight0.isMovable());
      assertEquals((-815.0011F), catalogLight0.getHeight(), 0.01F);
      assertFalse(catalogLight0.isResizable());
      assertTrue(catalogLight0.isTexturable());
      assertTrue(catalogLight0.isProportional());
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertFalse(catalogLight0.isBackFaceShown());
      assertNull(catalogLight0.getGrade());
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertEquals("(%", catalogLight0.getName());
      assertFalse(catalogLight0.isDoorOrWindow());
      assertEquals("(%", catalogLight0.getId());
      assertNull(catalogLight0.getColor());
      assertFalse(catalogLight0.isModifiable());
      assertEquals((-815.0011F), catalogLight0.getElevation(), 0.01F);
      assertEquals("(%", catalogLight0.getDescription());
      assertNull(catalogLight0.getCurrency());
      assertEquals("(%", catalogLight0.getCreator());
      assertNull(catalogLight0.getCreationDate());
      assertEquals((-815.0011F), catalogLight0.getDepth(), 0.01F);
      assertEquals((-815.0011F), catalogLight0.getWidth(), 0.01F);
      assertEquals((-815.0011F), homeLight0.getGroundElevation(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      assertEquals((-407.50055F), homeLight0.getX(), 0.01F);
      assertEquals((-407.50055F), homeLight0.getY(), 0.01F);
      assertEquals("npMnicV%Kd((/a|pf", homeLight0.getDescription());
      assertTrue(homeLight0.isTexturable());
      assertFalse(homeLight0.isModelMirrored());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertFalse(homeLight0.isBackFaceShown());
      assertFalse(homeLight0.isNameVisible());
      assertEquals((-815.0011F), homeLight0.getDepth(), 0.01F);
      assertNull(homeLight0.getCurrency());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertNull(homeLight0.getColor());
      assertEquals((-815.0011F), homeLight0.getWidth(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertEquals((-815.0011F), homeLight0.getElevation(), 0.01F);
      assertFalse(homeLight0.isMovable());
      assertEquals((-815.0011F), homeLight0.getHeight(), 0.01F);
      assertFalse(homeLight0.isResizable());
      assertEquals((-815.0011F), homeLight0.getShininess(), 0.01F);
      assertEquals("(%", homeLight0.getName());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertTrue(homeLight0.isVisible());
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertTrue(homeLight0.isDeformable());
      assertEquals("(%", homeLight0.getCatalogId());
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals(14, lightSourceArray0.length);
  }

  @Test(timeout = 4000)
  public void test249()  throws Throwable  {
      LightSource[] lightSourceArray0 = new LightSource[2];
      LightSource lightSource0 = new LightSource((-815.0F), 0.0F, 0.0F, 114);
      assertEquals(0.0F, lightSource0.getZ(), 0.01F);
      assertEquals(114, lightSource0.getColor());
      assertEquals((-815.0F), lightSource0.getX(), 0.01F);
      assertEquals(0.0F, lightSource0.getY(), 0.01F);
      assertNull(lightSource0.getDiameter());
      assertNotNull(lightSource0);
      
      lightSourceArray0[0] = lightSource0;
      LightSource lightSource1 = new LightSource((-815.0F), (-1.0F), (-127.62969F), (-174));
      assertFalse(lightSource1.equals((Object)lightSource0));
      assertEquals((-815.0F), lightSource1.getX(), 0.01F);
      assertEquals((-174), lightSource1.getColor());
      assertEquals((-127.62969F), lightSource1.getZ(), 0.01F);
      assertEquals((-1.0F), lightSource1.getY(), 0.01F);
      assertNull(lightSource1.getDiameter());
      assertNotNull(lightSource1);
      
      BigDecimal bigDecimal0 = BigDecimal.ZERO;
      assertEquals((short)0, bigDecimal0.shortValue());
      assertEquals((byte)0, bigDecimal0.byteValue());
      assertNotNull(bigDecimal0);
      
      CatalogLight catalogLight0 = new CatalogLight("h&*+\"", "h&*+\"", "h&*+\"", (Content) null, (Content) null, 0.0F, 0.0F, 2965.994F, (-694.0F), false, lightSourceArray0, (float[][]) null, "ELEVATION", true, bigDecimal0, bigDecimal0);
      assertEquals((short)0, bigDecimal0.shortValue());
      assertEquals((byte)0, bigDecimal0.byteValue());
      assertFalse(catalogLight0.isBackFaceShown());
      assertEquals("h&*+\"", catalogLight0.getName());
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertEquals("h&*+\"", catalogLight0.getDescription());
      assertNull(catalogLight0.getColor());
      assertNull(catalogLight0.getCurrency());
      assertEquals(0.0F, catalogLight0.getDepth(), 0.01F);
      assertEquals("h&*+\"", catalogLight0.getId());
      assertNull(catalogLight0.getInformation());
      assertTrue(catalogLight0.isDeformable());
      assertFalse(catalogLight0.isMovable());
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertEquals(2965.994F, catalogLight0.getHeight(), 0.01F);
      assertEquals(0.0F, catalogLight0.getWidth(), 0.01F);
      assertFalse(catalogLight0.isDoorOrWindow());
      assertEquals((-694.0F), catalogLight0.getElevation(), 0.01F);
      assertTrue(catalogLight0.isTexturable());
      assertNull(catalogLight0.getGrade());
      assertFalse(catalogLight0.isModifiable());
      assertTrue(catalogLight0.isProportional());
      assertNull(catalogLight0.getCreationDate());
      assertEquals("ELEVATION", catalogLight0.getCreator());
      assertTrue(catalogLight0.isResizable());
      assertEquals(2, lightSourceArray0.length);
      assertNotNull(catalogLight0);
      
      HomeLight homeLight0 = new HomeLight(catalogLight0);
      assertEquals((short)0, bigDecimal0.shortValue());
      assertEquals((byte)0, bigDecimal0.byteValue());
      assertFalse(catalogLight0.isBackFaceShown());
      assertEquals("h&*+\"", catalogLight0.getName());
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertEquals("h&*+\"", catalogLight0.getDescription());
      assertNull(catalogLight0.getColor());
      assertNull(catalogLight0.getCurrency());
      assertEquals(0.0F, catalogLight0.getDepth(), 0.01F);
      assertEquals("h&*+\"", catalogLight0.getId());
      assertNull(catalogLight0.getInformation());
      assertTrue(catalogLight0.isDeformable());
      assertFalse(catalogLight0.isMovable());
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertEquals(2965.994F, catalogLight0.getHeight(), 0.01F);
      assertEquals(0.0F, catalogLight0.getWidth(), 0.01F);
      assertFalse(catalogLight0.isDoorOrWindow());
      assertEquals((-694.0F), catalogLight0.getElevation(), 0.01F);
      assertTrue(catalogLight0.isTexturable());
      assertNull(catalogLight0.getGrade());
      assertFalse(catalogLight0.isModifiable());
      assertTrue(catalogLight0.isProportional());
      assertNull(catalogLight0.getCreationDate());
      assertEquals("ELEVATION", catalogLight0.getCreator());
      assertTrue(catalogLight0.isResizable());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertEquals((-694.0F), homeLight0.getGroundElevation(), 0.01F);
      assertFalse(homeLight0.isModelMirrored());
      assertFalse(homeLight0.isBackFaceShown());
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertNull(homeLight0.getColor());
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertNull(homeLight0.getCurrency());
      assertFalse(homeLight0.isMovable());
      assertEquals("h&*+\"", homeLight0.getCatalogId());
      assertTrue(homeLight0.isDeformable());
      assertTrue(homeLight0.isVisible());
      assertEquals(2965.994F, homeLight0.getHeight(), 0.01F);
      assertNull(homeLight0.getShininess());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertTrue(homeLight0.isResizable());
      assertFalse(homeLight0.isNameVisible());
      assertEquals("h&*+\"", homeLight0.getDescription());
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals("h&*+\"", homeLight0.getName());
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      assertTrue(homeLight0.isTexturable());
      assertEquals((-694.0F), homeLight0.getElevation(), 0.01F);
      assertEquals(2, lightSourceArray0.length);
      assertNotNull(homeLight0);
      
      homeLight0.setY((-127.62969F));
      assertEquals((short)0, bigDecimal0.shortValue());
      assertEquals((byte)0, bigDecimal0.byteValue());
      assertFalse(catalogLight0.isBackFaceShown());
      assertEquals("h&*+\"", catalogLight0.getName());
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertEquals("h&*+\"", catalogLight0.getDescription());
      assertNull(catalogLight0.getColor());
      assertNull(catalogLight0.getCurrency());
      assertEquals(0.0F, catalogLight0.getDepth(), 0.01F);
      assertEquals("h&*+\"", catalogLight0.getId());
      assertNull(catalogLight0.getInformation());
      assertTrue(catalogLight0.isDeformable());
      assertFalse(catalogLight0.isMovable());
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertEquals(2965.994F, catalogLight0.getHeight(), 0.01F);
      assertEquals(0.0F, catalogLight0.getWidth(), 0.01F);
      assertFalse(catalogLight0.isDoorOrWindow());
      assertEquals((-694.0F), catalogLight0.getElevation(), 0.01F);
      assertTrue(catalogLight0.isTexturable());
      assertNull(catalogLight0.getGrade());
      assertFalse(catalogLight0.isModifiable());
      assertTrue(catalogLight0.isProportional());
      assertNull(catalogLight0.getCreationDate());
      assertEquals("ELEVATION", catalogLight0.getCreator());
      assertTrue(catalogLight0.isResizable());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertEquals((-694.0F), homeLight0.getGroundElevation(), 0.01F);
      assertFalse(homeLight0.isModelMirrored());
      assertFalse(homeLight0.isBackFaceShown());
      assertNull(homeLight0.getColor());
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertEquals((-127.62969F), homeLight0.getY(), 0.01F);
      assertNull(homeLight0.getCurrency());
      assertFalse(homeLight0.isMovable());
      assertEquals("h&*+\"", homeLight0.getCatalogId());
      assertTrue(homeLight0.isDeformable());
      assertTrue(homeLight0.isVisible());
      assertEquals(2965.994F, homeLight0.getHeight(), 0.01F);
      assertNull(homeLight0.getShininess());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertTrue(homeLight0.isResizable());
      assertFalse(homeLight0.isNameVisible());
      assertEquals("h&*+\"", homeLight0.getDescription());
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals("h&*+\"", homeLight0.getName());
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      assertTrue(homeLight0.isTexturable());
      assertEquals((-694.0F), homeLight0.getElevation(), 0.01F);
      assertEquals(2, lightSourceArray0.length);
      
      HomeLight homeLight1 = homeLight0.clone();
      assertFalse(homeLight1.equals((Object)homeLight0));
      assertEquals((short)0, bigDecimal0.shortValue());
      assertEquals((byte)0, bigDecimal0.byteValue());
      assertFalse(catalogLight0.isBackFaceShown());
      assertEquals("h&*+\"", catalogLight0.getName());
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertEquals("h&*+\"", catalogLight0.getDescription());
      assertNull(catalogLight0.getColor());
      assertNull(catalogLight0.getCurrency());
      assertEquals(0.0F, catalogLight0.getDepth(), 0.01F);
      assertEquals("h&*+\"", catalogLight0.getId());
      assertNull(catalogLight0.getInformation());
      assertTrue(catalogLight0.isDeformable());
      assertFalse(catalogLight0.isMovable());
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertEquals(2965.994F, catalogLight0.getHeight(), 0.01F);
      assertEquals(0.0F, catalogLight0.getWidth(), 0.01F);
      assertFalse(catalogLight0.isDoorOrWindow());
      assertEquals((-694.0F), catalogLight0.getElevation(), 0.01F);
      assertTrue(catalogLight0.isTexturable());
      assertNull(catalogLight0.getGrade());
      assertFalse(catalogLight0.isModifiable());
      assertTrue(catalogLight0.isProportional());
      assertNull(catalogLight0.getCreationDate());
      assertEquals("ELEVATION", catalogLight0.getCreator());
      assertTrue(catalogLight0.isResizable());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertEquals((-694.0F), homeLight0.getGroundElevation(), 0.01F);
      assertFalse(homeLight0.isModelMirrored());
      assertFalse(homeLight0.isBackFaceShown());
      assertNull(homeLight0.getColor());
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertEquals((-127.62969F), homeLight0.getY(), 0.01F);
      assertNull(homeLight0.getCurrency());
      assertFalse(homeLight0.isMovable());
      assertEquals("h&*+\"", homeLight0.getCatalogId());
      assertTrue(homeLight0.isDeformable());
      assertTrue(homeLight0.isVisible());
      assertEquals(2965.994F, homeLight0.getHeight(), 0.01F);
      assertNull(homeLight0.getShininess());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertTrue(homeLight0.isResizable());
      assertFalse(homeLight0.isNameVisible());
      assertEquals("h&*+\"", homeLight0.getDescription());
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals("h&*+\"", homeLight0.getName());
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      assertTrue(homeLight0.isTexturable());
      assertEquals((-694.0F), homeLight0.getElevation(), 0.01F);
      assertFalse(homeLight1.isNameVisible());
      assertEquals((-127.62969F), homeLight1.getY(), 0.01F);
      assertTrue(homeLight1.isVisible());
      assertNull(homeLight1.getColor());
      assertEquals(0.0F, homeLight1.getNameYOffset(), 0.01F);
      assertFalse(homeLight1.isModelMirrored());
      assertTrue(homeLight1.isDeformable());
      assertEquals("h&*+\"", homeLight1.getCatalogId());
      assertEquals(0.5F, homeLight1.getPower(), 0.01F);
      assertNull(homeLight1.getCurrency());
      assertFalse(homeLight1.isMovable());
      assertEquals(0.0F, homeLight1.getDepth(), 0.01F);
      assertEquals(0.0F, homeLight1.getNameXOffset(), 0.01F);
      assertEquals("h&*+\"", homeLight1.getDescription());
      assertEquals(0.0F, homeLight1.getNameAngle(), 0.01F);
      assertNull(homeLight1.getStaircaseCutOutShape());
      assertNull(homeLight1.getShininess());
      assertTrue(homeLight1.isResizable());
      assertEquals(0.0F, homeLight1.getX(), 0.01F);
      assertFalse(homeLight1.isDoorOrWindow());
      assertEquals((-694.0F), homeLight1.getGroundElevation(), 0.01F);
      assertEquals(2965.994F, homeLight1.getHeight(), 0.01F);
      assertFalse(homeLight1.isBackFaceShown());
      assertEquals("h&*+\"", homeLight1.getName());
      assertEquals(0.0F, homeLight1.getWidth(), 0.01F);
      assertTrue(homeLight1.isTexturable());
      assertEquals((-694.0F), homeLight1.getElevation(), 0.01F);
      assertEquals(0.0F, homeLight1.getAngle(), 0.01F);
      assertEquals(2, lightSourceArray0.length);
      assertNotSame(homeLight0, homeLight1);
      assertNotSame(homeLight1, homeLight0);
      assertNotNull(homeLight1);
      
      HomeLight homeLight2 = (HomeLight)homeLight0.clone();
      assertFalse(homeLight0.equals((Object)homeLight1));
      assertFalse(homeLight2.equals((Object)homeLight0));
      assertFalse(homeLight2.equals((Object)homeLight1));
      assertEquals((short)0, bigDecimal0.shortValue());
      assertEquals((byte)0, bigDecimal0.byteValue());
      assertFalse(catalogLight0.isBackFaceShown());
      assertEquals("h&*+\"", catalogLight0.getName());
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertEquals("h&*+\"", catalogLight0.getDescription());
      assertNull(catalogLight0.getColor());
      assertNull(catalogLight0.getCurrency());
      assertEquals(0.0F, catalogLight0.getDepth(), 0.01F);
      assertEquals("h&*+\"", catalogLight0.getId());
      assertNull(catalogLight0.getInformation());
      assertTrue(catalogLight0.isDeformable());
      assertFalse(catalogLight0.isMovable());
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertEquals(2965.994F, catalogLight0.getHeight(), 0.01F);
      assertEquals(0.0F, catalogLight0.getWidth(), 0.01F);
      assertFalse(catalogLight0.isDoorOrWindow());
      assertEquals((-694.0F), catalogLight0.getElevation(), 0.01F);
      assertTrue(catalogLight0.isTexturable());
      assertNull(catalogLight0.getGrade());
      assertFalse(catalogLight0.isModifiable());
      assertTrue(catalogLight0.isProportional());
      assertNull(catalogLight0.getCreationDate());
      assertEquals("ELEVATION", catalogLight0.getCreator());
      assertTrue(catalogLight0.isResizable());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertEquals((-694.0F), homeLight0.getGroundElevation(), 0.01F);
      assertFalse(homeLight0.isModelMirrored());
      assertFalse(homeLight0.isBackFaceShown());
      assertNull(homeLight0.getColor());
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertEquals((-127.62969F), homeLight0.getY(), 0.01F);
      assertNull(homeLight0.getCurrency());
      assertFalse(homeLight0.isMovable());
      assertEquals("h&*+\"", homeLight0.getCatalogId());
      assertTrue(homeLight0.isDeformable());
      assertTrue(homeLight0.isVisible());
      assertEquals(2965.994F, homeLight0.getHeight(), 0.01F);
      assertNull(homeLight0.getShininess());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertTrue(homeLight0.isResizable());
      assertFalse(homeLight0.isNameVisible());
      assertEquals("h&*+\"", homeLight0.getDescription());
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals("h&*+\"", homeLight0.getName());
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      assertTrue(homeLight0.isTexturable());
      assertEquals((-694.0F), homeLight0.getElevation(), 0.01F);
      assertEquals((-694.0F), homeLight2.getElevation(), 0.01F);
      assertEquals(0.0F, homeLight2.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeLight2.getNameAngle(), 0.01F);
      assertEquals(0.0F, homeLight2.getDepth(), 0.01F);
      assertNull(homeLight2.getStaircaseCutOutShape());
      assertFalse(homeLight2.isDoorOrWindow());
      assertTrue(homeLight2.isTexturable());
      assertEquals(2965.994F, homeLight2.getHeight(), 0.01F);
      assertNull(homeLight2.getShininess());
      assertTrue(homeLight2.isResizable());
      assertFalse(homeLight2.isBackFaceShown());
      assertEquals("h&*+\"", homeLight2.getName());
      assertEquals(0.0F, homeLight2.getX(), 0.01F);
      assertEquals((-694.0F), homeLight2.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight2.getAngle(), 0.01F);
      assertEquals(0.0F, homeLight2.getWidth(), 0.01F);
      assertEquals("h&*+\"", homeLight2.getDescription());
      assertEquals((-127.62969F), homeLight2.getY(), 0.01F);
      assertTrue(homeLight2.isDeformable());
      assertNull(homeLight2.getCurrency());
      assertFalse(homeLight2.isNameVisible());
      assertEquals(0.0F, homeLight2.getNameYOffset(), 0.01F);
      assertTrue(homeLight2.isVisible());
      assertFalse(homeLight2.isModelMirrored());
      assertEquals("h&*+\"", homeLight2.getCatalogId());
      assertFalse(homeLight2.isMovable());
      assertNull(homeLight2.getColor());
      assertEquals(0.5F, homeLight2.getPower(), 0.01F);
      assertEquals(2, lightSourceArray0.length);
      assertNotSame(homeLight0, homeLight1);
      assertNotSame(homeLight0, homeLight2);
      assertNotSame(homeLight2, homeLight0);
      assertNotSame(homeLight2, homeLight1);
      assertNotNull(homeLight2);
      
      homeLight1.setModelMirrored(false);
      assertFalse(homeLight0.equals((Object)homeLight1));
      assertFalse(homeLight0.equals((Object)homeLight2));
      assertFalse(homeLight1.equals((Object)homeLight2));
      assertFalse(homeLight1.equals((Object)homeLight0));
      assertEquals((short)0, bigDecimal0.shortValue());
      assertEquals((byte)0, bigDecimal0.byteValue());
      assertFalse(catalogLight0.isBackFaceShown());
      assertEquals("h&*+\"", catalogLight0.getName());
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertEquals("h&*+\"", catalogLight0.getDescription());
      assertNull(catalogLight0.getColor());
      assertNull(catalogLight0.getCurrency());
      assertEquals(0.0F, catalogLight0.getDepth(), 0.01F);
      assertEquals("h&*+\"", catalogLight0.getId());
      assertNull(catalogLight0.getInformation());
      assertTrue(catalogLight0.isDeformable());
      assertFalse(catalogLight0.isMovable());
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertEquals(2965.994F, catalogLight0.getHeight(), 0.01F);
      assertEquals(0.0F, catalogLight0.getWidth(), 0.01F);
      assertFalse(catalogLight0.isDoorOrWindow());
      assertEquals((-694.0F), catalogLight0.getElevation(), 0.01F);
      assertTrue(catalogLight0.isTexturable());
      assertNull(catalogLight0.getGrade());
      assertFalse(catalogLight0.isModifiable());
      assertTrue(catalogLight0.isProportional());
      assertNull(catalogLight0.getCreationDate());
      assertEquals("ELEVATION", catalogLight0.getCreator());
      assertTrue(catalogLight0.isResizable());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertEquals((-694.0F), homeLight0.getGroundElevation(), 0.01F);
      assertFalse(homeLight0.isModelMirrored());
      assertFalse(homeLight0.isBackFaceShown());
      assertNull(homeLight0.getColor());
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertEquals((-127.62969F), homeLight0.getY(), 0.01F);
      assertNull(homeLight0.getCurrency());
      assertFalse(homeLight0.isMovable());
      assertEquals("h&*+\"", homeLight0.getCatalogId());
      assertTrue(homeLight0.isDeformable());
      assertTrue(homeLight0.isVisible());
      assertEquals(2965.994F, homeLight0.getHeight(), 0.01F);
      assertNull(homeLight0.getShininess());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertTrue(homeLight0.isResizable());
      assertFalse(homeLight0.isNameVisible());
      assertEquals("h&*+\"", homeLight0.getDescription());
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals("h&*+\"", homeLight0.getName());
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      assertTrue(homeLight0.isTexturable());
      assertEquals((-694.0F), homeLight0.getElevation(), 0.01F);
      assertFalse(homeLight1.isNameVisible());
      assertEquals((-127.62969F), homeLight1.getY(), 0.01F);
      assertTrue(homeLight1.isVisible());
      assertNull(homeLight1.getColor());
      assertEquals(0.0F, homeLight1.getNameYOffset(), 0.01F);
      assertFalse(homeLight1.isModelMirrored());
      assertTrue(homeLight1.isDeformable());
      assertEquals("h&*+\"", homeLight1.getCatalogId());
      assertEquals(0.5F, homeLight1.getPower(), 0.01F);
      assertNull(homeLight1.getCurrency());
      assertFalse(homeLight1.isMovable());
      assertEquals(0.0F, homeLight1.getDepth(), 0.01F);
      assertEquals(0.0F, homeLight1.getNameXOffset(), 0.01F);
      assertEquals("h&*+\"", homeLight1.getDescription());
      assertEquals(0.0F, homeLight1.getNameAngle(), 0.01F);
      assertNull(homeLight1.getStaircaseCutOutShape());
      assertNull(homeLight1.getShininess());
      assertTrue(homeLight1.isResizable());
      assertEquals(0.0F, homeLight1.getX(), 0.01F);
      assertFalse(homeLight1.isDoorOrWindow());
      assertEquals((-694.0F), homeLight1.getGroundElevation(), 0.01F);
      assertEquals(2965.994F, homeLight1.getHeight(), 0.01F);
      assertFalse(homeLight1.isBackFaceShown());
      assertEquals("h&*+\"", homeLight1.getName());
      assertEquals(0.0F, homeLight1.getWidth(), 0.01F);
      assertTrue(homeLight1.isTexturable());
      assertEquals((-694.0F), homeLight1.getElevation(), 0.01F);
      assertEquals(0.0F, homeLight1.getAngle(), 0.01F);
      assertEquals(2, lightSourceArray0.length);
      assertNotSame(homeLight0, homeLight1);
      assertNotSame(homeLight0, homeLight2);
      assertNotSame(homeLight1, homeLight2);
      assertNotSame(homeLight1, homeLight0);
      
      HomePieceOfFurniture.SortableProperty[] homePieceOfFurniture_SortablePropertyArray0 = HomePieceOfFurniture.SortableProperty.values();
      assertEquals(19, homePieceOfFurniture_SortablePropertyArray0.length);
      assertNotNull(homePieceOfFurniture_SortablePropertyArray0);
      
      boolean boolean0 = homeLight1.isMovable();
      assertFalse(homeLight0.equals((Object)homeLight1));
      assertFalse(homeLight0.equals((Object)homeLight2));
      assertFalse(homeLight1.equals((Object)homeLight2));
      assertFalse(homeLight1.equals((Object)homeLight0));
      assertEquals((short)0, bigDecimal0.shortValue());
      assertEquals((byte)0, bigDecimal0.byteValue());
      assertFalse(catalogLight0.isBackFaceShown());
      assertEquals("h&*+\"", catalogLight0.getName());
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertEquals("h&*+\"", catalogLight0.getDescription());
      assertNull(catalogLight0.getColor());
      assertNull(catalogLight0.getCurrency());
      assertEquals(0.0F, catalogLight0.getDepth(), 0.01F);
      assertEquals("h&*+\"", catalogLight0.getId());
      assertNull(catalogLight0.getInformation());
      assertTrue(catalogLight0.isDeformable());
      assertFalse(catalogLight0.isMovable());
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertEquals(2965.994F, catalogLight0.getHeight(), 0.01F);
      assertEquals(0.0F, catalogLight0.getWidth(), 0.01F);
      assertFalse(catalogLight0.isDoorOrWindow());
      assertEquals((-694.0F), catalogLight0.getElevation(), 0.01F);
      assertTrue(catalogLight0.isTexturable());
      assertNull(catalogLight0.getGrade());
      assertFalse(catalogLight0.isModifiable());
      assertTrue(catalogLight0.isProportional());
      assertNull(catalogLight0.getCreationDate());
      assertEquals("ELEVATION", catalogLight0.getCreator());
      assertTrue(catalogLight0.isResizable());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertEquals((-694.0F), homeLight0.getGroundElevation(), 0.01F);
      assertFalse(homeLight0.isModelMirrored());
      assertFalse(homeLight0.isBackFaceShown());
      assertNull(homeLight0.getColor());
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertEquals((-127.62969F), homeLight0.getY(), 0.01F);
      assertNull(homeLight0.getCurrency());
      assertFalse(homeLight0.isMovable());
      assertEquals("h&*+\"", homeLight0.getCatalogId());
      assertTrue(homeLight0.isDeformable());
      assertTrue(homeLight0.isVisible());
      assertEquals(2965.994F, homeLight0.getHeight(), 0.01F);
      assertNull(homeLight0.getShininess());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertTrue(homeLight0.isResizable());
      assertFalse(homeLight0.isNameVisible());
      assertEquals("h&*+\"", homeLight0.getDescription());
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals("h&*+\"", homeLight0.getName());
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      assertTrue(homeLight0.isTexturable());
      assertEquals((-694.0F), homeLight0.getElevation(), 0.01F);
      assertFalse(homeLight1.isNameVisible());
      assertEquals((-127.62969F), homeLight1.getY(), 0.01F);
      assertTrue(homeLight1.isVisible());
      assertNull(homeLight1.getColor());
      assertEquals(0.0F, homeLight1.getNameYOffset(), 0.01F);
      assertFalse(homeLight1.isModelMirrored());
      assertTrue(homeLight1.isDeformable());
      assertEquals("h&*+\"", homeLight1.getCatalogId());
      assertEquals(0.5F, homeLight1.getPower(), 0.01F);
      assertNull(homeLight1.getCurrency());
      assertFalse(homeLight1.isMovable());
      assertEquals(0.0F, homeLight1.getDepth(), 0.01F);
      assertEquals(0.0F, homeLight1.getNameXOffset(), 0.01F);
      assertEquals("h&*+\"", homeLight1.getDescription());
      assertEquals(0.0F, homeLight1.getNameAngle(), 0.01F);
      assertNull(homeLight1.getStaircaseCutOutShape());
      assertNull(homeLight1.getShininess());
      assertTrue(homeLight1.isResizable());
      assertEquals(0.0F, homeLight1.getX(), 0.01F);
      assertFalse(homeLight1.isDoorOrWindow());
      assertEquals((-694.0F), homeLight1.getGroundElevation(), 0.01F);
      assertEquals(2965.994F, homeLight1.getHeight(), 0.01F);
      assertFalse(homeLight1.isBackFaceShown());
      assertEquals("h&*+\"", homeLight1.getName());
      assertEquals(0.0F, homeLight1.getWidth(), 0.01F);
      assertTrue(homeLight1.isTexturable());
      assertEquals((-694.0F), homeLight1.getElevation(), 0.01F);
      assertEquals(0.0F, homeLight1.getAngle(), 0.01F);
      assertEquals(2, lightSourceArray0.length);
      assertNotSame(homeLight0, homeLight1);
      assertNotSame(homeLight0, homeLight2);
      assertNotSame(homeLight1, homeLight2);
      assertNotSame(homeLight1, homeLight0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test250()  throws Throwable  {
      URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      URL uRL0 = MockURL.URL("NAME_STYLE", "5s^fO~Ze9'QDA<c)r", 2142226650, "com.eteks.sweethome3d.model.HomePieceOfFurniture$3", uRLStreamHandler0);
      assertNull(uRL0.getQuery());
      assertNull(uRL0.getUserInfo());
      assertEquals("5s^fO~Ze9'QDA<c)r", uRL0.getHost());
      assertNull(uRL0.toString());
      assertEquals("5s^fO~Ze9'QDA<c)r:2142226650", uRL0.getAuthority());
      assertEquals(2142226650, uRL0.getPort());
      assertNull(uRL0.getRef());
      assertEquals("com.eteks.sweethome3d.model.HomePieceOfFurniture$3", uRL0.getPath());
      assertEquals(0, uRL0.getDefaultPort());
      assertEquals("name_style", uRL0.getProtocol());
      assertEquals("com.eteks.sweethome3d.model.HomePieceOfFurniture$3", uRL0.getFile());
      assertNull(uRL0.toExternalForm());
      assertNotNull(uRL0);
      
      URLContent uRLContent0 = new URLContent(uRL0);
      assertNull(uRL0.getQuery());
      assertNull(uRL0.getUserInfo());
      assertEquals("5s^fO~Ze9'QDA<c)r", uRL0.getHost());
      assertNull(uRL0.toString());
      assertEquals("5s^fO~Ze9'QDA<c)r:2142226650", uRL0.getAuthority());
      assertEquals(2142226650, uRL0.getPort());
      assertNull(uRL0.getRef());
      assertEquals("com.eteks.sweethome3d.model.HomePieceOfFurniture$3", uRL0.getPath());
      assertEquals(0, uRL0.getDefaultPort());
      assertEquals("name_style", uRL0.getProtocol());
      assertEquals("com.eteks.sweethome3d.model.HomePieceOfFurniture$3", uRL0.getFile());
      assertNull(uRL0.toExternalForm());
      assertFalse(uRLContent0.isJAREntry());
      assertNotNull(uRLContent0);
      
      Sash[] sashArray0 = new Sash[4];
      Sash sash0 = new Sash((-15.6620655F), 1.0F, 1.0F, 1.0F, 3.4335692F);
      assertEquals(1.0F, sash0.getStartAngle(), 0.01F);
      assertEquals(1.0F, sash0.getYAxis(), 0.01F);
      assertEquals(3.4335692F, sash0.getEndAngle(), 0.01F);
      assertEquals(1.0F, sash0.getWidth(), 0.01F);
      assertEquals((-15.6620655F), sash0.getXAxis(), 0.01F);
      assertNotNull(sash0);
      
      sashArray0[0] = sash0;
      Sash sash1 = new Sash(2142226650, (-561.5F), 2089.3367F, 1707.7522F, (-1.0F));
      assertFalse(sash1.equals((Object)sash0));
      assertEquals(1707.7522F, sash1.getStartAngle(), 0.01F);
      assertEquals((-561.5F), sash1.getYAxis(), 0.01F);
      assertEquals((-1.0F), sash1.getEndAngle(), 0.01F);
      assertEquals(2089.3367F, sash1.getWidth(), 0.01F);
      assertEquals(2.14222669E9F, sash1.getXAxis(), 0.01F);
      assertNotNull(sash1);
      
      sashArray0[1] = sash1;
      Sash sash2 = new Sash(1.0F, 1.0F, 2089.3367F, 2.0F, 1.0F);
      assertFalse(sash2.equals((Object)sash0));
      assertFalse(sash2.equals((Object)sash1));
      assertEquals(1.0F, sash2.getXAxis(), 0.01F);
      assertEquals(2.0F, sash2.getStartAngle(), 0.01F);
      assertEquals(1.0F, sash2.getEndAngle(), 0.01F);
      assertEquals(1.0F, sash2.getYAxis(), 0.01F);
      assertEquals(2089.3367F, sash2.getWidth(), 0.01F);
      assertNotNull(sash2);
      
      sashArray0[2] = sash2;
      Sash sash3 = new Sash((-15.6620655F), 2142226650, 1707.7522F, 789.1539F, 3.4028235E38F);
      assertFalse(sash3.equals((Object)sash2));
      assertFalse(sash3.equals((Object)sash1));
      assertFalse(sash3.equals((Object)sash0));
      assertEquals(1707.7522F, sash3.getWidth(), 0.01F);
      assertEquals(789.1539F, sash3.getStartAngle(), 0.01F);
      assertEquals((-15.6620655F), sash3.getXAxis(), 0.01F);
      assertEquals(3.4028235E38F, sash3.getEndAngle(), 0.01F);
      assertEquals(2.14222669E9F, sash3.getYAxis(), 0.01F);
      assertNotNull(sash3);
      
      sashArray0[3] = sash3;
      CatalogDoorOrWindow catalogDoorOrWindow0 = new CatalogDoorOrWindow("com.eteks.sweethome3d.model.HomePieceOfFurniture$3", "com.eteks.sweethome3d.model.HomePieceOfFurniture$3", "com.eteks.sweethome3d.model.HomePieceOfFurniture$3", uRLContent0, uRLContent0, uRLContent0, (-561.5F), 1707.7522F, 1707.7522F, (-561.5F), false, 2142226650, (-15.6620655F), sashArray0, (float[][]) null, "5s^fO~Ze9'QDA<c)r", false, (BigDecimal) null, (BigDecimal) null);
      assertNull(uRL0.getQuery());
      assertNull(uRL0.getUserInfo());
      assertEquals("5s^fO~Ze9'QDA<c)r", uRL0.getHost());
      assertNull(uRL0.toString());
      assertEquals("5s^fO~Ze9'QDA<c)r:2142226650", uRL0.getAuthority());
      assertEquals(2142226650, uRL0.getPort());
      assertNull(uRL0.getRef());
      assertEquals("com.eteks.sweethome3d.model.HomePieceOfFurniture$3", uRL0.getPath());
      assertEquals(0, uRL0.getDefaultPort());
      assertEquals("name_style", uRL0.getProtocol());
      assertEquals("com.eteks.sweethome3d.model.HomePieceOfFurniture$3", uRL0.getFile());
      assertNull(uRL0.toExternalForm());
      assertFalse(uRLContent0.isJAREntry());
      assertEquals(0.3926991F, catalogDoorOrWindow0.getIconYaw(), 0.01F);
      assertNull(catalogDoorOrWindow0.getStaircaseCutOutShape());
      assertNull(catalogDoorOrWindow0.getGrade());
      assertEquals(2.14222669E9F, catalogDoorOrWindow0.getWallThickness(), 0.01F);
      assertFalse(catalogDoorOrWindow0.isBackFaceShown());
      assertFalse(catalogDoorOrWindow0.isResizable());
      assertTrue(catalogDoorOrWindow0.isDeformable());
      assertEquals(1707.7522F, catalogDoorOrWindow0.getHeight(), 0.01F);
      assertEquals((-561.5F), catalogDoorOrWindow0.getElevation(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isTexturable());
      assertNull(catalogDoorOrWindow0.getCurrency());
      assertTrue(catalogDoorOrWindow0.isProportional());
      assertEquals((-561.5F), catalogDoorOrWindow0.getWidth(), 0.01F);
      assertEquals((-15.6620655F), catalogDoorOrWindow0.getWallDistance(), 0.01F);
      assertNull(catalogDoorOrWindow0.getColor());
      assertEquals(1707.7522F, catalogDoorOrWindow0.getDepth(), 0.01F);
      assertFalse(catalogDoorOrWindow0.isMovable());
      assertEquals("com.eteks.sweethome3d.model.HomePieceOfFurniture$3", catalogDoorOrWindow0.getDescription());
      assertEquals("5s^fO~Ze9'QDA<c)r", catalogDoorOrWindow0.getCreator());
      assertNull(catalogDoorOrWindow0.getInformation());
      assertEquals("com.eteks.sweethome3d.model.HomePieceOfFurniture$3", catalogDoorOrWindow0.getName());
      assertFalse(catalogDoorOrWindow0.isModifiable());
      assertNull(catalogDoorOrWindow0.getCreationDate());
      assertEquals("com.eteks.sweethome3d.model.HomePieceOfFurniture$3", catalogDoorOrWindow0.getId());
      assertTrue(catalogDoorOrWindow0.isDoorOrWindow());
      assertEquals(4, sashArray0.length);
      assertNotNull(catalogDoorOrWindow0);
      
      HomeDoorOrWindow homeDoorOrWindow0 = new HomeDoorOrWindow(catalogDoorOrWindow0);
      assertNull(uRL0.getQuery());
      assertNull(uRL0.getUserInfo());
      assertEquals("5s^fO~Ze9'QDA<c)r", uRL0.getHost());
      assertNull(uRL0.toString());
      assertEquals("5s^fO~Ze9'QDA<c)r:2142226650", uRL0.getAuthority());
      assertEquals(2142226650, uRL0.getPort());
      assertNull(uRL0.getRef());
      assertEquals("com.eteks.sweethome3d.model.HomePieceOfFurniture$3", uRL0.getPath());
      assertEquals(0, uRL0.getDefaultPort());
      assertEquals("name_style", uRL0.getProtocol());
      assertEquals("com.eteks.sweethome3d.model.HomePieceOfFurniture$3", uRL0.getFile());
      assertNull(uRL0.toExternalForm());
      assertFalse(uRLContent0.isJAREntry());
      assertEquals(0.3926991F, catalogDoorOrWindow0.getIconYaw(), 0.01F);
      assertNull(catalogDoorOrWindow0.getStaircaseCutOutShape());
      assertNull(catalogDoorOrWindow0.getGrade());
      assertEquals(2.14222669E9F, catalogDoorOrWindow0.getWallThickness(), 0.01F);
      assertFalse(catalogDoorOrWindow0.isBackFaceShown());
      assertFalse(catalogDoorOrWindow0.isResizable());
      assertTrue(catalogDoorOrWindow0.isDeformable());
      assertEquals(1707.7522F, catalogDoorOrWindow0.getHeight(), 0.01F);
      assertEquals((-561.5F), catalogDoorOrWindow0.getElevation(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isTexturable());
      assertNull(catalogDoorOrWindow0.getCurrency());
      assertTrue(catalogDoorOrWindow0.isProportional());
      assertEquals((-561.5F), catalogDoorOrWindow0.getWidth(), 0.01F);
      assertEquals((-15.6620655F), catalogDoorOrWindow0.getWallDistance(), 0.01F);
      assertNull(catalogDoorOrWindow0.getColor());
      assertEquals(1707.7522F, catalogDoorOrWindow0.getDepth(), 0.01F);
      assertFalse(catalogDoorOrWindow0.isMovable());
      assertEquals("com.eteks.sweethome3d.model.HomePieceOfFurniture$3", catalogDoorOrWindow0.getDescription());
      assertEquals("5s^fO~Ze9'QDA<c)r", catalogDoorOrWindow0.getCreator());
      assertNull(catalogDoorOrWindow0.getInformation());
      assertEquals("com.eteks.sweethome3d.model.HomePieceOfFurniture$3", catalogDoorOrWindow0.getName());
      assertFalse(catalogDoorOrWindow0.isModifiable());
      assertNull(catalogDoorOrWindow0.getCreationDate());
      assertEquals("com.eteks.sweethome3d.model.HomePieceOfFurniture$3", catalogDoorOrWindow0.getId());
      assertTrue(catalogDoorOrWindow0.isDoorOrWindow());
      assertNull(homeDoorOrWindow0.getCurrency());
      assertFalse(homeDoorOrWindow0.isNameVisible());
      assertEquals(0.0F, homeDoorOrWindow0.getNameYOffset(), 0.01F);
      assertTrue(homeDoorOrWindow0.isTexturable());
      assertEquals(853.8761F, homeDoorOrWindow0.getY(), 0.01F);
      assertEquals((-561.5F), homeDoorOrWindow0.getWidth(), 0.01F);
      assertEquals(2.14222669E9F, homeDoorOrWindow0.getWallThickness(), 0.01F);
      assertFalse(homeDoorOrWindow0.isMovable());
      assertFalse(homeDoorOrWindow0.isResizable());
      assertEquals("com.eteks.sweethome3d.model.HomePieceOfFurniture$3", homeDoorOrWindow0.getName());
      assertEquals((-280.75F), homeDoorOrWindow0.getX(), 0.01F);
      assertEquals((-561.5F), homeDoorOrWindow0.getGroundElevation(), 0.01F);
      assertEquals(1707.7522F, homeDoorOrWindow0.getDepth(), 0.01F);
      assertEquals((-15.6620655F), homeDoorOrWindow0.getWallDistance(), 0.01F);
      assertTrue(homeDoorOrWindow0.isDeformable());
      assertNull(homeDoorOrWindow0.getShininess());
      assertTrue(homeDoorOrWindow0.isVisible());
      assertEquals(0.0F, homeDoorOrWindow0.getNameAngle(), 0.01F);
      assertEquals("com.eteks.sweethome3d.model.HomePieceOfFurniture$3", homeDoorOrWindow0.getCatalogId());
      assertTrue(homeDoorOrWindow0.isDoorOrWindow());
      assertNull(homeDoorOrWindow0.getStaircaseCutOutShape());
      assertEquals(1707.7522F, homeDoorOrWindow0.getHeight(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getAngle(), 0.01F);
      assertEquals((-561.5F), homeDoorOrWindow0.getElevation(), 0.01F);
      assertEquals("com.eteks.sweethome3d.model.HomePieceOfFurniture$3", homeDoorOrWindow0.getDescription());
      assertNull(homeDoorOrWindow0.getColor());
      assertFalse(homeDoorOrWindow0.isBoundToWall());
      assertFalse(homeDoorOrWindow0.isBackFaceShown());
      assertFalse(homeDoorOrWindow0.isModelMirrored());
      assertEquals(4, sashArray0.length);
      assertNotNull(homeDoorOrWindow0);
      
      HomeDoorOrWindow homeDoorOrWindow1 = homeDoorOrWindow0.clone();
      assertFalse(homeDoorOrWindow1.equals((Object)homeDoorOrWindow0));
      assertNull(uRL0.getQuery());
      assertNull(uRL0.getUserInfo());
      assertEquals("5s^fO~Ze9'QDA<c)r", uRL0.getHost());
      assertNull(uRL0.toString());
      assertEquals("5s^fO~Ze9'QDA<c)r:2142226650", uRL0.getAuthority());
      assertEquals(2142226650, uRL0.getPort());
      assertNull(uRL0.getRef());
      assertEquals("com.eteks.sweethome3d.model.HomePieceOfFurniture$3", uRL0.getPath());
      assertEquals(0, uRL0.getDefaultPort());
      assertEquals("name_style", uRL0.getProtocol());
      assertEquals("com.eteks.sweethome3d.model.HomePieceOfFurniture$3", uRL0.getFile());
      assertNull(uRL0.toExternalForm());
      assertFalse(uRLContent0.isJAREntry());
      assertEquals(0.3926991F, catalogDoorOrWindow0.getIconYaw(), 0.01F);
      assertNull(catalogDoorOrWindow0.getStaircaseCutOutShape());
      assertNull(catalogDoorOrWindow0.getGrade());
      assertEquals(2.14222669E9F, catalogDoorOrWindow0.getWallThickness(), 0.01F);
      assertFalse(catalogDoorOrWindow0.isBackFaceShown());
      assertFalse(catalogDoorOrWindow0.isResizable());
      assertTrue(catalogDoorOrWindow0.isDeformable());
      assertEquals(1707.7522F, catalogDoorOrWindow0.getHeight(), 0.01F);
      assertEquals((-561.5F), catalogDoorOrWindow0.getElevation(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isTexturable());
      assertNull(catalogDoorOrWindow0.getCurrency());
      assertTrue(catalogDoorOrWindow0.isProportional());
      assertEquals((-561.5F), catalogDoorOrWindow0.getWidth(), 0.01F);
      assertEquals((-15.6620655F), catalogDoorOrWindow0.getWallDistance(), 0.01F);
      assertNull(catalogDoorOrWindow0.getColor());
      assertEquals(1707.7522F, catalogDoorOrWindow0.getDepth(), 0.01F);
      assertFalse(catalogDoorOrWindow0.isMovable());
      assertEquals("com.eteks.sweethome3d.model.HomePieceOfFurniture$3", catalogDoorOrWindow0.getDescription());
      assertEquals("5s^fO~Ze9'QDA<c)r", catalogDoorOrWindow0.getCreator());
      assertNull(catalogDoorOrWindow0.getInformation());
      assertEquals("com.eteks.sweethome3d.model.HomePieceOfFurniture$3", catalogDoorOrWindow0.getName());
      assertFalse(catalogDoorOrWindow0.isModifiable());
      assertNull(catalogDoorOrWindow0.getCreationDate());
      assertEquals("com.eteks.sweethome3d.model.HomePieceOfFurniture$3", catalogDoorOrWindow0.getId());
      assertTrue(catalogDoorOrWindow0.isDoorOrWindow());
      assertNull(homeDoorOrWindow0.getCurrency());
      assertFalse(homeDoorOrWindow0.isNameVisible());
      assertEquals(0.0F, homeDoorOrWindow0.getNameYOffset(), 0.01F);
      assertTrue(homeDoorOrWindow0.isTexturable());
      assertEquals(853.8761F, homeDoorOrWindow0.getY(), 0.01F);
      assertEquals((-561.5F), homeDoorOrWindow0.getWidth(), 0.01F);
      assertEquals(2.14222669E9F, homeDoorOrWindow0.getWallThickness(), 0.01F);
      assertFalse(homeDoorOrWindow0.isMovable());
      assertFalse(homeDoorOrWindow0.isResizable());
      assertEquals("com.eteks.sweethome3d.model.HomePieceOfFurniture$3", homeDoorOrWindow0.getName());
      assertEquals((-280.75F), homeDoorOrWindow0.getX(), 0.01F);
      assertEquals((-561.5F), homeDoorOrWindow0.getGroundElevation(), 0.01F);
      assertEquals(1707.7522F, homeDoorOrWindow0.getDepth(), 0.01F);
      assertEquals((-15.6620655F), homeDoorOrWindow0.getWallDistance(), 0.01F);
      assertTrue(homeDoorOrWindow0.isDeformable());
      assertNull(homeDoorOrWindow0.getShininess());
      assertTrue(homeDoorOrWindow0.isVisible());
      assertEquals(0.0F, homeDoorOrWindow0.getNameAngle(), 0.01F);
      assertEquals("com.eteks.sweethome3d.model.HomePieceOfFurniture$3", homeDoorOrWindow0.getCatalogId());
      assertTrue(homeDoorOrWindow0.isDoorOrWindow());
      assertNull(homeDoorOrWindow0.getStaircaseCutOutShape());
      assertEquals(1707.7522F, homeDoorOrWindow0.getHeight(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getAngle(), 0.01F);
      assertEquals((-561.5F), homeDoorOrWindow0.getElevation(), 0.01F);
      assertEquals("com.eteks.sweethome3d.model.HomePieceOfFurniture$3", homeDoorOrWindow0.getDescription());
      assertNull(homeDoorOrWindow0.getColor());
      assertFalse(homeDoorOrWindow0.isBoundToWall());
      assertFalse(homeDoorOrWindow0.isBackFaceShown());
      assertFalse(homeDoorOrWindow0.isModelMirrored());
      assertNull(homeDoorOrWindow1.getStaircaseCutOutShape());
      assertEquals(1707.7522F, homeDoorOrWindow1.getHeight(), 0.01F);
      assertFalse(homeDoorOrWindow1.isResizable());
      assertNull(homeDoorOrWindow1.getShininess());
      assertTrue(homeDoorOrWindow1.isDoorOrWindow());
      assertEquals(0.0F, homeDoorOrWindow1.getNameAngle(), 0.01F);
      assertFalse(homeDoorOrWindow1.isBoundToWall());
      assertEquals("com.eteks.sweethome3d.model.HomePieceOfFurniture$3", homeDoorOrWindow1.getCatalogId());
      assertTrue(homeDoorOrWindow1.isDeformable());
      assertEquals((-561.5F), homeDoorOrWindow1.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow1.getNameXOffset(), 0.01F);
      assertTrue(homeDoorOrWindow1.isTexturable());
      assertEquals(0.0F, homeDoorOrWindow1.getAngle(), 0.01F);
      assertEquals((-561.5F), homeDoorOrWindow1.getElevation(), 0.01F);
      assertEquals((-561.5F), homeDoorOrWindow1.getWidth(), 0.01F);
      assertEquals(853.8761F, homeDoorOrWindow1.getY(), 0.01F);
      assertEquals("com.eteks.sweethome3d.model.HomePieceOfFurniture$3", homeDoorOrWindow1.getDescription());
      assertEquals(1707.7522F, homeDoorOrWindow1.getDepth(), 0.01F);
      assertEquals((-280.75F), homeDoorOrWindow1.getX(), 0.01F);
      assertNull(homeDoorOrWindow1.getColor());
      assertFalse(homeDoorOrWindow1.isNameVisible());
      assertFalse(homeDoorOrWindow1.isBackFaceShown());
      assertTrue(homeDoorOrWindow1.isVisible());
      assertFalse(homeDoorOrWindow1.isModelMirrored());
      assertEquals((-15.6620655F), homeDoorOrWindow1.getWallDistance(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow1.getNameYOffset(), 0.01F);
      assertNull(homeDoorOrWindow1.getCurrency());
      assertEquals(2.14222669E9F, homeDoorOrWindow1.getWallThickness(), 0.01F);
      assertEquals("com.eteks.sweethome3d.model.HomePieceOfFurniture$3", homeDoorOrWindow1.getName());
      assertFalse(homeDoorOrWindow1.isMovable());
      assertEquals(4, sashArray0.length);
      assertNotSame(homeDoorOrWindow0, homeDoorOrWindow1);
      assertNotSame(homeDoorOrWindow1, homeDoorOrWindow0);
      assertNotNull(homeDoorOrWindow1);
      
      BigDecimal bigDecimal0 = homeDoorOrWindow1.getValueAddedTax();
      assertFalse(homeDoorOrWindow0.equals((Object)homeDoorOrWindow1));
      assertFalse(homeDoorOrWindow1.equals((Object)homeDoorOrWindow0));
      assertNull(uRL0.getQuery());
      assertNull(uRL0.getUserInfo());
      assertEquals("5s^fO~Ze9'QDA<c)r", uRL0.getHost());
      assertNull(uRL0.toString());
      assertEquals("5s^fO~Ze9'QDA<c)r:2142226650", uRL0.getAuthority());
      assertEquals(2142226650, uRL0.getPort());
      assertNull(uRL0.getRef());
      assertEquals("com.eteks.sweethome3d.model.HomePieceOfFurniture$3", uRL0.getPath());
      assertEquals(0, uRL0.getDefaultPort());
      assertEquals("name_style", uRL0.getProtocol());
      assertEquals("com.eteks.sweethome3d.model.HomePieceOfFurniture$3", uRL0.getFile());
      assertNull(uRL0.toExternalForm());
      assertFalse(uRLContent0.isJAREntry());
      assertEquals(0.3926991F, catalogDoorOrWindow0.getIconYaw(), 0.01F);
      assertNull(catalogDoorOrWindow0.getStaircaseCutOutShape());
      assertNull(catalogDoorOrWindow0.getGrade());
      assertEquals(2.14222669E9F, catalogDoorOrWindow0.getWallThickness(), 0.01F);
      assertFalse(catalogDoorOrWindow0.isBackFaceShown());
      assertFalse(catalogDoorOrWindow0.isResizable());
      assertTrue(catalogDoorOrWindow0.isDeformable());
      assertEquals(1707.7522F, catalogDoorOrWindow0.getHeight(), 0.01F);
      assertEquals((-561.5F), catalogDoorOrWindow0.getElevation(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isTexturable());
      assertNull(catalogDoorOrWindow0.getCurrency());
      assertTrue(catalogDoorOrWindow0.isProportional());
      assertEquals((-561.5F), catalogDoorOrWindow0.getWidth(), 0.01F);
      assertEquals((-15.6620655F), catalogDoorOrWindow0.getWallDistance(), 0.01F);
      assertNull(catalogDoorOrWindow0.getColor());
      assertEquals(1707.7522F, catalogDoorOrWindow0.getDepth(), 0.01F);
      assertFalse(catalogDoorOrWindow0.isMovable());
      assertEquals("com.eteks.sweethome3d.model.HomePieceOfFurniture$3", catalogDoorOrWindow0.getDescription());
      assertEquals("5s^fO~Ze9'QDA<c)r", catalogDoorOrWindow0.getCreator());
      assertNull(catalogDoorOrWindow0.getInformation());
      assertEquals("com.eteks.sweethome3d.model.HomePieceOfFurniture$3", catalogDoorOrWindow0.getName());
      assertFalse(catalogDoorOrWindow0.isModifiable());
      assertNull(catalogDoorOrWindow0.getCreationDate());
      assertEquals("com.eteks.sweethome3d.model.HomePieceOfFurniture$3", catalogDoorOrWindow0.getId());
      assertTrue(catalogDoorOrWindow0.isDoorOrWindow());
      assertNull(homeDoorOrWindow0.getCurrency());
      assertFalse(homeDoorOrWindow0.isNameVisible());
      assertEquals(0.0F, homeDoorOrWindow0.getNameYOffset(), 0.01F);
      assertTrue(homeDoorOrWindow0.isTexturable());
      assertEquals(853.8761F, homeDoorOrWindow0.getY(), 0.01F);
      assertEquals((-561.5F), homeDoorOrWindow0.getWidth(), 0.01F);
      assertEquals(2.14222669E9F, homeDoorOrWindow0.getWallThickness(), 0.01F);
      assertFalse(homeDoorOrWindow0.isMovable());
      assertFalse(homeDoorOrWindow0.isResizable());
      assertEquals("com.eteks.sweethome3d.model.HomePieceOfFurniture$3", homeDoorOrWindow0.getName());
      assertEquals((-280.75F), homeDoorOrWindow0.getX(), 0.01F);
      assertEquals((-561.5F), homeDoorOrWindow0.getGroundElevation(), 0.01F);
      assertEquals(1707.7522F, homeDoorOrWindow0.getDepth(), 0.01F);
      assertEquals((-15.6620655F), homeDoorOrWindow0.getWallDistance(), 0.01F);
      assertTrue(homeDoorOrWindow0.isDeformable());
      assertNull(homeDoorOrWindow0.getShininess());
      assertTrue(homeDoorOrWindow0.isVisible());
      assertEquals(0.0F, homeDoorOrWindow0.getNameAngle(), 0.01F);
      assertEquals("com.eteks.sweethome3d.model.HomePieceOfFurniture$3", homeDoorOrWindow0.getCatalogId());
      assertTrue(homeDoorOrWindow0.isDoorOrWindow());
      assertNull(homeDoorOrWindow0.getStaircaseCutOutShape());
      assertEquals(1707.7522F, homeDoorOrWindow0.getHeight(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getAngle(), 0.01F);
      assertEquals((-561.5F), homeDoorOrWindow0.getElevation(), 0.01F);
      assertEquals("com.eteks.sweethome3d.model.HomePieceOfFurniture$3", homeDoorOrWindow0.getDescription());
      assertNull(homeDoorOrWindow0.getColor());
      assertFalse(homeDoorOrWindow0.isBoundToWall());
      assertFalse(homeDoorOrWindow0.isBackFaceShown());
      assertFalse(homeDoorOrWindow0.isModelMirrored());
      assertNull(homeDoorOrWindow1.getStaircaseCutOutShape());
      assertEquals(1707.7522F, homeDoorOrWindow1.getHeight(), 0.01F);
      assertFalse(homeDoorOrWindow1.isResizable());
      assertNull(homeDoorOrWindow1.getShininess());
      assertTrue(homeDoorOrWindow1.isDoorOrWindow());
      assertEquals(0.0F, homeDoorOrWindow1.getNameAngle(), 0.01F);
      assertFalse(homeDoorOrWindow1.isBoundToWall());
      assertEquals("com.eteks.sweethome3d.model.HomePieceOfFurniture$3", homeDoorOrWindow1.getCatalogId());
      assertTrue(homeDoorOrWindow1.isDeformable());
      assertEquals((-561.5F), homeDoorOrWindow1.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow1.getNameXOffset(), 0.01F);
      assertTrue(homeDoorOrWindow1.isTexturable());
      assertEquals(0.0F, homeDoorOrWindow1.getAngle(), 0.01F);
      assertEquals((-561.5F), homeDoorOrWindow1.getElevation(), 0.01F);
      assertEquals((-561.5F), homeDoorOrWindow1.getWidth(), 0.01F);
      assertEquals(853.8761F, homeDoorOrWindow1.getY(), 0.01F);
      assertEquals("com.eteks.sweethome3d.model.HomePieceOfFurniture$3", homeDoorOrWindow1.getDescription());
      assertEquals(1707.7522F, homeDoorOrWindow1.getDepth(), 0.01F);
      assertEquals((-280.75F), homeDoorOrWindow1.getX(), 0.01F);
      assertNull(homeDoorOrWindow1.getColor());
      assertFalse(homeDoorOrWindow1.isNameVisible());
      assertFalse(homeDoorOrWindow1.isBackFaceShown());
      assertTrue(homeDoorOrWindow1.isVisible());
      assertFalse(homeDoorOrWindow1.isModelMirrored());
      assertEquals((-15.6620655F), homeDoorOrWindow1.getWallDistance(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow1.getNameYOffset(), 0.01F);
      assertNull(homeDoorOrWindow1.getCurrency());
      assertEquals(2.14222669E9F, homeDoorOrWindow1.getWallThickness(), 0.01F);
      assertEquals("com.eteks.sweethome3d.model.HomePieceOfFurniture$3", homeDoorOrWindow1.getName());
      assertFalse(homeDoorOrWindow1.isMovable());
      assertEquals(4, sashArray0.length);
      assertNotSame(homeDoorOrWindow0, homeDoorOrWindow1);
      assertNotSame(homeDoorOrWindow1, homeDoorOrWindow0);
      assertNull(bigDecimal0);
  }

  @Test(timeout = 4000)
  public void test251()  throws Throwable  {
      LightSource[] lightSourceArray0 = new LightSource[2];
      LightSource lightSource0 = new LightSource((-815.0F), 0.0F, 0.0F, 114);
      assertNull(lightSource0.getDiameter());
      assertEquals(114, lightSource0.getColor());
      assertEquals(0.0F, lightSource0.getY(), 0.01F);
      assertEquals((-815.0F), lightSource0.getX(), 0.01F);
      assertEquals(0.0F, lightSource0.getZ(), 0.01F);
      assertNotNull(lightSource0);
      
      lightSourceArray0[0] = lightSource0;
      LightSource lightSource1 = new LightSource((-694.0F), 2965.994F, (-127.62969F), 0);
      assertFalse(lightSource1.equals((Object)lightSource0));
      assertEquals(0, lightSource1.getColor());
      assertEquals(2965.994F, lightSource1.getY(), 0.01F);
      assertEquals((-127.62969F), lightSource1.getZ(), 0.01F);
      assertNull(lightSource1.getDiameter());
      assertEquals((-694.0F), lightSource1.getX(), 0.01F);
      assertNotNull(lightSource1);
      
      lightSourceArray0[1] = lightSource1;
      BigDecimal bigDecimal0 = BigDecimal.TEN;
      assertEquals((short)10, bigDecimal0.shortValue());
      assertEquals((byte)10, bigDecimal0.byteValue());
      assertNotNull(bigDecimal0);
      
      CatalogLight catalogLight0 = new CatalogLight("h&*+\"", "h&*+\"", "h&*+\"", (Content) null, (Content) null, (-815.0F), 0.3926991F, (-694.0F), (-694.0F), true, lightSourceArray0, (float[][]) null, "h&*+\"", true, bigDecimal0, bigDecimal0);
      assertEquals((short)10, bigDecimal0.shortValue());
      assertEquals((byte)10, bigDecimal0.byteValue());
      assertEquals("h&*+\"", catalogLight0.getId());
      assertFalse(catalogLight0.isDoorOrWindow());
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertEquals((-694.0F), catalogLight0.getElevation(), 0.01F);
      assertTrue(catalogLight0.isTexturable());
      assertEquals(0.3926991F, catalogLight0.getDepth(), 0.01F);
      assertNull(catalogLight0.getCurrency());
      assertTrue(catalogLight0.isProportional());
      assertFalse(catalogLight0.isModifiable());
      assertEquals("h&*+\"", catalogLight0.getCreator());
      assertEquals("h&*+\"", catalogLight0.getDescription());
      assertTrue(catalogLight0.isResizable());
      assertEquals((-694.0F), catalogLight0.getHeight(), 0.01F);
      assertNull(catalogLight0.getCreationDate());
      assertEquals("h&*+\"", catalogLight0.getName());
      assertEquals((-815.0F), catalogLight0.getWidth(), 0.01F);
      assertNull(catalogLight0.getColor());
      assertNull(catalogLight0.getInformation());
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertNull(catalogLight0.getGrade());
      assertTrue(catalogLight0.isDeformable());
      assertTrue(catalogLight0.isMovable());
      assertFalse(catalogLight0.isBackFaceShown());
      assertEquals(2, lightSourceArray0.length);
      assertNotNull(catalogLight0);
      
      HomeLight homeLight0 = new HomeLight(catalogLight0);
      assertEquals((short)10, bigDecimal0.shortValue());
      assertEquals((byte)10, bigDecimal0.byteValue());
      assertEquals("h&*+\"", catalogLight0.getId());
      assertFalse(catalogLight0.isDoorOrWindow());
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertEquals((-694.0F), catalogLight0.getElevation(), 0.01F);
      assertTrue(catalogLight0.isTexturable());
      assertEquals(0.3926991F, catalogLight0.getDepth(), 0.01F);
      assertNull(catalogLight0.getCurrency());
      assertTrue(catalogLight0.isProportional());
      assertFalse(catalogLight0.isModifiable());
      assertEquals("h&*+\"", catalogLight0.getCreator());
      assertEquals("h&*+\"", catalogLight0.getDescription());
      assertTrue(catalogLight0.isResizable());
      assertEquals((-694.0F), catalogLight0.getHeight(), 0.01F);
      assertNull(catalogLight0.getCreationDate());
      assertEquals("h&*+\"", catalogLight0.getName());
      assertEquals((-815.0F), catalogLight0.getWidth(), 0.01F);
      assertNull(catalogLight0.getColor());
      assertNull(catalogLight0.getInformation());
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertNull(catalogLight0.getGrade());
      assertTrue(catalogLight0.isDeformable());
      assertTrue(catalogLight0.isMovable());
      assertFalse(catalogLight0.isBackFaceShown());
      assertFalse(homeLight0.isDoorOrWindow());
      assertFalse(homeLight0.isBackFaceShown());
      assertNull(homeLight0.getColor());
      assertFalse(homeLight0.isModelMirrored());
      assertTrue(homeLight0.isDeformable());
      assertFalse(homeLight0.isNameVisible());
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals((-694.0F), homeLight0.getGroundElevation(), 0.01F);
      assertEquals("h&*+\"", homeLight0.getDescription());
      assertTrue(homeLight0.isTexturable());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertEquals((-694.0F), homeLight0.getElevation(), 0.01F);
      assertTrue(homeLight0.isMovable());
      assertEquals("h&*+\"", homeLight0.getCatalogId());
      assertEquals("h&*+\"", homeLight0.getName());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertEquals(0.3926991F, homeLight0.getDepth(), 0.01F);
      assertEquals((-815.0F), homeLight0.getWidth(), 0.01F);
      assertTrue(homeLight0.isResizable());
      assertTrue(homeLight0.isVisible());
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertNull(homeLight0.getShininess());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertEquals((-407.5F), homeLight0.getX(), 0.01F);
      assertEquals(0.19634955F, homeLight0.getY(), 0.01F);
      assertEquals((-694.0F), homeLight0.getHeight(), 0.01F);
      assertNull(homeLight0.getCurrency());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals(2, lightSourceArray0.length);
      assertNotNull(homeLight0);
      
      HomeLight homeLight1 = homeLight0.clone();
      assertFalse(homeLight1.equals((Object)homeLight0));
      assertEquals((short)10, bigDecimal0.shortValue());
      assertEquals((byte)10, bigDecimal0.byteValue());
      assertEquals("h&*+\"", catalogLight0.getId());
      assertFalse(catalogLight0.isDoorOrWindow());
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertEquals((-694.0F), catalogLight0.getElevation(), 0.01F);
      assertTrue(catalogLight0.isTexturable());
      assertEquals(0.3926991F, catalogLight0.getDepth(), 0.01F);
      assertNull(catalogLight0.getCurrency());
      assertTrue(catalogLight0.isProportional());
      assertFalse(catalogLight0.isModifiable());
      assertEquals("h&*+\"", catalogLight0.getCreator());
      assertEquals("h&*+\"", catalogLight0.getDescription());
      assertTrue(catalogLight0.isResizable());
      assertEquals((-694.0F), catalogLight0.getHeight(), 0.01F);
      assertNull(catalogLight0.getCreationDate());
      assertEquals("h&*+\"", catalogLight0.getName());
      assertEquals((-815.0F), catalogLight0.getWidth(), 0.01F);
      assertNull(catalogLight0.getColor());
      assertNull(catalogLight0.getInformation());
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertNull(catalogLight0.getGrade());
      assertTrue(catalogLight0.isDeformable());
      assertTrue(catalogLight0.isMovable());
      assertFalse(catalogLight0.isBackFaceShown());
      assertFalse(homeLight0.isDoorOrWindow());
      assertFalse(homeLight0.isBackFaceShown());
      assertNull(homeLight0.getColor());
      assertFalse(homeLight0.isModelMirrored());
      assertTrue(homeLight0.isDeformable());
      assertFalse(homeLight0.isNameVisible());
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals((-694.0F), homeLight0.getGroundElevation(), 0.01F);
      assertEquals("h&*+\"", homeLight0.getDescription());
      assertTrue(homeLight0.isTexturable());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertEquals((-694.0F), homeLight0.getElevation(), 0.01F);
      assertTrue(homeLight0.isMovable());
      assertEquals("h&*+\"", homeLight0.getCatalogId());
      assertEquals("h&*+\"", homeLight0.getName());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertEquals(0.3926991F, homeLight0.getDepth(), 0.01F);
      assertEquals((-815.0F), homeLight0.getWidth(), 0.01F);
      assertTrue(homeLight0.isResizable());
      assertTrue(homeLight0.isVisible());
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertNull(homeLight0.getShininess());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertEquals((-407.5F), homeLight0.getX(), 0.01F);
      assertEquals(0.19634955F, homeLight0.getY(), 0.01F);
      assertEquals((-694.0F), homeLight0.getHeight(), 0.01F);
      assertNull(homeLight0.getCurrency());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals(0.0F, homeLight1.getNameXOffset(), 0.01F);
      assertEquals((-694.0F), homeLight1.getElevation(), 0.01F);
      assertEquals(0.19634955F, homeLight1.getY(), 0.01F);
      assertEquals("h&*+\"", homeLight1.getDescription());
      assertEquals(0.0F, homeLight1.getAngle(), 0.01F);
      assertEquals((-694.0F), homeLight1.getGroundElevation(), 0.01F);
      assertEquals(0.5F, homeLight1.getPower(), 0.01F);
      assertTrue(homeLight1.isMovable());
      assertNull(homeLight1.getShininess());
      assertTrue(homeLight1.isResizable());
      assertEquals(0.0F, homeLight1.getNameAngle(), 0.01F);
      assertNull(homeLight1.getStaircaseCutOutShape());
      assertEquals((-815.0F), homeLight1.getWidth(), 0.01F);
      assertEquals(0.0F, homeLight1.getNameYOffset(), 0.01F);
      assertTrue(homeLight1.isVisible());
      assertNull(homeLight1.getCurrency());
      assertFalse(homeLight1.isNameVisible());
      assertEquals((-407.5F), homeLight1.getX(), 0.01F);
      assertTrue(homeLight1.isDeformable());
      assertEquals((-694.0F), homeLight1.getHeight(), 0.01F);
      assertFalse(homeLight1.isDoorOrWindow());
      assertEquals("h&*+\"", homeLight1.getCatalogId());
      assertTrue(homeLight1.isTexturable());
      assertNull(homeLight1.getColor());
      assertEquals(0.3926991F, homeLight1.getDepth(), 0.01F);
      assertEquals("h&*+\"", homeLight1.getName());
      assertFalse(homeLight1.isModelMirrored());
      assertFalse(homeLight1.isBackFaceShown());
      assertEquals(2, lightSourceArray0.length);
      assertNotSame(homeLight0, homeLight1);
      assertNotSame(homeLight1, homeLight0);
      assertNotNull(homeLight1);
      
      HomeLight homeLight2 = (HomeLight)homeLight1.clone();
      assertFalse(homeLight0.equals((Object)homeLight1));
      assertFalse(homeLight1.equals((Object)homeLight0));
      assertFalse(homeLight2.equals((Object)homeLight0));
      assertFalse(homeLight2.equals((Object)homeLight1));
      assertEquals((short)10, bigDecimal0.shortValue());
      assertEquals((byte)10, bigDecimal0.byteValue());
      assertEquals("h&*+\"", catalogLight0.getId());
      assertFalse(catalogLight0.isDoorOrWindow());
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertEquals((-694.0F), catalogLight0.getElevation(), 0.01F);
      assertTrue(catalogLight0.isTexturable());
      assertEquals(0.3926991F, catalogLight0.getDepth(), 0.01F);
      assertNull(catalogLight0.getCurrency());
      assertTrue(catalogLight0.isProportional());
      assertFalse(catalogLight0.isModifiable());
      assertEquals("h&*+\"", catalogLight0.getCreator());
      assertEquals("h&*+\"", catalogLight0.getDescription());
      assertTrue(catalogLight0.isResizable());
      assertEquals((-694.0F), catalogLight0.getHeight(), 0.01F);
      assertNull(catalogLight0.getCreationDate());
      assertEquals("h&*+\"", catalogLight0.getName());
      assertEquals((-815.0F), catalogLight0.getWidth(), 0.01F);
      assertNull(catalogLight0.getColor());
      assertNull(catalogLight0.getInformation());
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertNull(catalogLight0.getGrade());
      assertTrue(catalogLight0.isDeformable());
      assertTrue(catalogLight0.isMovable());
      assertFalse(catalogLight0.isBackFaceShown());
      assertFalse(homeLight0.isDoorOrWindow());
      assertFalse(homeLight0.isBackFaceShown());
      assertNull(homeLight0.getColor());
      assertFalse(homeLight0.isModelMirrored());
      assertTrue(homeLight0.isDeformable());
      assertFalse(homeLight0.isNameVisible());
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals((-694.0F), homeLight0.getGroundElevation(), 0.01F);
      assertEquals("h&*+\"", homeLight0.getDescription());
      assertTrue(homeLight0.isTexturable());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertEquals((-694.0F), homeLight0.getElevation(), 0.01F);
      assertTrue(homeLight0.isMovable());
      assertEquals("h&*+\"", homeLight0.getCatalogId());
      assertEquals("h&*+\"", homeLight0.getName());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertEquals(0.3926991F, homeLight0.getDepth(), 0.01F);
      assertEquals((-815.0F), homeLight0.getWidth(), 0.01F);
      assertTrue(homeLight0.isResizable());
      assertTrue(homeLight0.isVisible());
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertNull(homeLight0.getShininess());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertEquals((-407.5F), homeLight0.getX(), 0.01F);
      assertEquals(0.19634955F, homeLight0.getY(), 0.01F);
      assertEquals((-694.0F), homeLight0.getHeight(), 0.01F);
      assertNull(homeLight0.getCurrency());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals(0.0F, homeLight1.getNameXOffset(), 0.01F);
      assertEquals((-694.0F), homeLight1.getElevation(), 0.01F);
      assertEquals(0.19634955F, homeLight1.getY(), 0.01F);
      assertEquals("h&*+\"", homeLight1.getDescription());
      assertEquals(0.0F, homeLight1.getAngle(), 0.01F);
      assertEquals((-694.0F), homeLight1.getGroundElevation(), 0.01F);
      assertEquals(0.5F, homeLight1.getPower(), 0.01F);
      assertTrue(homeLight1.isMovable());
      assertNull(homeLight1.getShininess());
      assertTrue(homeLight1.isResizable());
      assertEquals(0.0F, homeLight1.getNameAngle(), 0.01F);
      assertNull(homeLight1.getStaircaseCutOutShape());
      assertEquals((-815.0F), homeLight1.getWidth(), 0.01F);
      assertEquals(0.0F, homeLight1.getNameYOffset(), 0.01F);
      assertTrue(homeLight1.isVisible());
      assertNull(homeLight1.getCurrency());
      assertFalse(homeLight1.isNameVisible());
      assertEquals((-407.5F), homeLight1.getX(), 0.01F);
      assertTrue(homeLight1.isDeformable());
      assertEquals((-694.0F), homeLight1.getHeight(), 0.01F);
      assertFalse(homeLight1.isDoorOrWindow());
      assertEquals("h&*+\"", homeLight1.getCatalogId());
      assertTrue(homeLight1.isTexturable());
      assertNull(homeLight1.getColor());
      assertEquals(0.3926991F, homeLight1.getDepth(), 0.01F);
      assertEquals("h&*+\"", homeLight1.getName());
      assertFalse(homeLight1.isModelMirrored());
      assertFalse(homeLight1.isBackFaceShown());
      assertEquals((-694.0F), homeLight2.getElevation(), 0.01F);
      assertEquals(0.0F, homeLight2.getNameXOffset(), 0.01F);
      assertEquals(0.19634955F, homeLight2.getY(), 0.01F);
      assertEquals(0.0F, homeLight2.getNameAngle(), 0.01F);
      assertEquals("h&*+\"", homeLight2.getName());
      assertNull(homeLight2.getStaircaseCutOutShape());
      assertTrue(homeLight2.isMovable());
      assertEquals((-815.0F), homeLight2.getWidth(), 0.01F);
      assertFalse(homeLight2.isDoorOrWindow());
      assertTrue(homeLight2.isTexturable());
      assertNull(homeLight2.getShininess());
      assertTrue(homeLight2.isResizable());
      assertEquals(0.0F, homeLight2.getAngle(), 0.01F);
      assertEquals((-694.0F), homeLight2.getGroundElevation(), 0.01F);
      assertEquals("h&*+\"", homeLight2.getDescription());
      assertNull(homeLight2.getCurrency());
      assertEquals(0.0F, homeLight2.getNameYOffset(), 0.01F);
      assertFalse(homeLight2.isNameVisible());
      assertTrue(homeLight2.isVisible());
      assertTrue(homeLight2.isDeformable());
      assertEquals((-407.5F), homeLight2.getX(), 0.01F);
      assertEquals(0.3926991F, homeLight2.getDepth(), 0.01F);
      assertFalse(homeLight2.isBackFaceShown());
      assertEquals("h&*+\"", homeLight2.getCatalogId());
      assertFalse(homeLight2.isModelMirrored());
      assertEquals((-694.0F), homeLight2.getHeight(), 0.01F);
      assertNull(homeLight2.getColor());
      assertEquals(0.5F, homeLight2.getPower(), 0.01F);
      assertEquals(2, lightSourceArray0.length);
      assertNotSame(homeLight0, homeLight1);
      assertNotSame(homeLight0, homeLight2);
      assertNotSame(homeLight1, homeLight0);
      assertNotSame(homeLight1, homeLight2);
      assertNotSame(homeLight2, homeLight0);
      assertNotSame(homeLight2, homeLight1);
      assertNotNull(homeLight2);
      
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-62);
      boolean boolean0 = FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      assertArrayEquals(new byte[] {(byte) (-62)}, byteArray0);
      assertEquals(1, byteArray0.length);
      assertFalse(boolean0);
      
      homeLight0.setDescription("");
      assertFalse(homeLight0.equals((Object)homeLight1));
      assertFalse(homeLight0.equals((Object)homeLight2));
      assertEquals((short)10, bigDecimal0.shortValue());
      assertEquals((byte)10, bigDecimal0.byteValue());
      assertEquals("h&*+\"", catalogLight0.getId());
      assertFalse(catalogLight0.isDoorOrWindow());
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertEquals((-694.0F), catalogLight0.getElevation(), 0.01F);
      assertTrue(catalogLight0.isTexturable());
      assertEquals(0.3926991F, catalogLight0.getDepth(), 0.01F);
      assertNull(catalogLight0.getCurrency());
      assertTrue(catalogLight0.isProportional());
      assertFalse(catalogLight0.isModifiable());
      assertEquals("h&*+\"", catalogLight0.getCreator());
      assertEquals("h&*+\"", catalogLight0.getDescription());
      assertTrue(catalogLight0.isResizable());
      assertEquals((-694.0F), catalogLight0.getHeight(), 0.01F);
      assertNull(catalogLight0.getCreationDate());
      assertEquals("h&*+\"", catalogLight0.getName());
      assertEquals((-815.0F), catalogLight0.getWidth(), 0.01F);
      assertNull(catalogLight0.getColor());
      assertNull(catalogLight0.getInformation());
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertNull(catalogLight0.getGrade());
      assertTrue(catalogLight0.isDeformable());
      assertTrue(catalogLight0.isMovable());
      assertFalse(catalogLight0.isBackFaceShown());
      assertFalse(homeLight0.isDoorOrWindow());
      assertFalse(homeLight0.isBackFaceShown());
      assertNull(homeLight0.getColor());
      assertFalse(homeLight0.isModelMirrored());
      assertEquals("", homeLight0.getDescription());
      assertTrue(homeLight0.isDeformable());
      assertFalse(homeLight0.isNameVisible());
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals((-694.0F), homeLight0.getGroundElevation(), 0.01F);
      assertTrue(homeLight0.isTexturable());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertEquals((-694.0F), homeLight0.getElevation(), 0.01F);
      assertTrue(homeLight0.isMovable());
      assertEquals("h&*+\"", homeLight0.getCatalogId());
      assertEquals("h&*+\"", homeLight0.getName());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertEquals(0.3926991F, homeLight0.getDepth(), 0.01F);
      assertEquals((-815.0F), homeLight0.getWidth(), 0.01F);
      assertTrue(homeLight0.isResizable());
      assertTrue(homeLight0.isVisible());
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertNull(homeLight0.getShininess());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertEquals((-407.5F), homeLight0.getX(), 0.01F);
      assertEquals(0.19634955F, homeLight0.getY(), 0.01F);
      assertEquals((-694.0F), homeLight0.getHeight(), 0.01F);
      assertNull(homeLight0.getCurrency());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals(2, lightSourceArray0.length);
      assertNotSame(homeLight0, homeLight1);
      assertNotSame(homeLight0, homeLight2);
      
      boolean boolean1 = homeLight0.containsPoint((-328.122F), 1.0F, 0.0F);
      assertFalse(homeLight0.equals((Object)homeLight1));
      assertFalse(homeLight0.equals((Object)homeLight2));
      assertTrue(boolean1 == boolean0);
      assertEquals((short)10, bigDecimal0.shortValue());
      assertEquals((byte)10, bigDecimal0.byteValue());
      assertEquals("h&*+\"", catalogLight0.getId());
      assertFalse(catalogLight0.isDoorOrWindow());
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertEquals((-694.0F), catalogLight0.getElevation(), 0.01F);
      assertTrue(catalogLight0.isTexturable());
      assertEquals(0.3926991F, catalogLight0.getDepth(), 0.01F);
      assertNull(catalogLight0.getCurrency());
      assertTrue(catalogLight0.isProportional());
      assertFalse(catalogLight0.isModifiable());
      assertEquals("h&*+\"", catalogLight0.getCreator());
      assertEquals("h&*+\"", catalogLight0.getDescription());
      assertTrue(catalogLight0.isResizable());
      assertEquals((-694.0F), catalogLight0.getHeight(), 0.01F);
      assertNull(catalogLight0.getCreationDate());
      assertEquals("h&*+\"", catalogLight0.getName());
      assertEquals((-815.0F), catalogLight0.getWidth(), 0.01F);
      assertNull(catalogLight0.getColor());
      assertNull(catalogLight0.getInformation());
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertNull(catalogLight0.getGrade());
      assertTrue(catalogLight0.isDeformable());
      assertTrue(catalogLight0.isMovable());
      assertFalse(catalogLight0.isBackFaceShown());
      assertFalse(homeLight0.isDoorOrWindow());
      assertFalse(homeLight0.isBackFaceShown());
      assertNull(homeLight0.getColor());
      assertFalse(homeLight0.isModelMirrored());
      assertEquals("", homeLight0.getDescription());
      assertTrue(homeLight0.isDeformable());
      assertFalse(homeLight0.isNameVisible());
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals((-694.0F), homeLight0.getGroundElevation(), 0.01F);
      assertTrue(homeLight0.isTexturable());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertEquals((-694.0F), homeLight0.getElevation(), 0.01F);
      assertTrue(homeLight0.isMovable());
      assertEquals("h&*+\"", homeLight0.getCatalogId());
      assertEquals("h&*+\"", homeLight0.getName());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertEquals(0.3926991F, homeLight0.getDepth(), 0.01F);
      assertEquals((-815.0F), homeLight0.getWidth(), 0.01F);
      assertTrue(homeLight0.isResizable());
      assertTrue(homeLight0.isVisible());
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertNull(homeLight0.getShininess());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertEquals((-407.5F), homeLight0.getX(), 0.01F);
      assertEquals(0.19634955F, homeLight0.getY(), 0.01F);
      assertEquals((-694.0F), homeLight0.getHeight(), 0.01F);
      assertNull(homeLight0.getCurrency());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals(2, lightSourceArray0.length);
      assertNotSame(homeLight0, homeLight1);
      assertNotSame(homeLight0, homeLight2);
      assertFalse(boolean1);
      
      float float0 = homeLight1.getX();
      assertFalse(homeLight0.equals((Object)homeLight1));
      assertFalse(homeLight0.equals((Object)homeLight2));
      assertFalse(homeLight1.equals((Object)homeLight0));
      assertFalse(homeLight1.equals((Object)homeLight2));
      assertEquals((short)10, bigDecimal0.shortValue());
      assertEquals((byte)10, bigDecimal0.byteValue());
      assertEquals("h&*+\"", catalogLight0.getId());
      assertFalse(catalogLight0.isDoorOrWindow());
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertEquals((-694.0F), catalogLight0.getElevation(), 0.01F);
      assertTrue(catalogLight0.isTexturable());
      assertEquals(0.3926991F, catalogLight0.getDepth(), 0.01F);
      assertNull(catalogLight0.getCurrency());
      assertTrue(catalogLight0.isProportional());
      assertFalse(catalogLight0.isModifiable());
      assertEquals("h&*+\"", catalogLight0.getCreator());
      assertEquals("h&*+\"", catalogLight0.getDescription());
      assertTrue(catalogLight0.isResizable());
      assertEquals((-694.0F), catalogLight0.getHeight(), 0.01F);
      assertNull(catalogLight0.getCreationDate());
      assertEquals("h&*+\"", catalogLight0.getName());
      assertEquals((-815.0F), catalogLight0.getWidth(), 0.01F);
      assertNull(catalogLight0.getColor());
      assertNull(catalogLight0.getInformation());
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertNull(catalogLight0.getGrade());
      assertTrue(catalogLight0.isDeformable());
      assertTrue(catalogLight0.isMovable());
      assertFalse(catalogLight0.isBackFaceShown());
      assertFalse(homeLight0.isDoorOrWindow());
      assertFalse(homeLight0.isBackFaceShown());
      assertNull(homeLight0.getColor());
      assertFalse(homeLight0.isModelMirrored());
      assertEquals("", homeLight0.getDescription());
      assertTrue(homeLight0.isDeformable());
      assertFalse(homeLight0.isNameVisible());
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals((-694.0F), homeLight0.getGroundElevation(), 0.01F);
      assertTrue(homeLight0.isTexturable());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertEquals((-694.0F), homeLight0.getElevation(), 0.01F);
      assertTrue(homeLight0.isMovable());
      assertEquals("h&*+\"", homeLight0.getCatalogId());
      assertEquals("h&*+\"", homeLight0.getName());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertEquals(0.3926991F, homeLight0.getDepth(), 0.01F);
      assertEquals((-815.0F), homeLight0.getWidth(), 0.01F);
      assertTrue(homeLight0.isResizable());
      assertTrue(homeLight0.isVisible());
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertNull(homeLight0.getShininess());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertEquals((-407.5F), homeLight0.getX(), 0.01F);
      assertEquals(0.19634955F, homeLight0.getY(), 0.01F);
      assertEquals((-694.0F), homeLight0.getHeight(), 0.01F);
      assertNull(homeLight0.getCurrency());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals(0.0F, homeLight1.getNameXOffset(), 0.01F);
      assertEquals((-694.0F), homeLight1.getElevation(), 0.01F);
      assertEquals(0.19634955F, homeLight1.getY(), 0.01F);
      assertEquals("h&*+\"", homeLight1.getDescription());
      assertEquals(0.0F, homeLight1.getAngle(), 0.01F);
      assertEquals((-694.0F), homeLight1.getGroundElevation(), 0.01F);
      assertEquals(0.5F, homeLight1.getPower(), 0.01F);
      assertTrue(homeLight1.isMovable());
      assertNull(homeLight1.getShininess());
      assertTrue(homeLight1.isResizable());
      assertEquals(0.0F, homeLight1.getNameAngle(), 0.01F);
      assertNull(homeLight1.getStaircaseCutOutShape());
      assertEquals((-815.0F), homeLight1.getWidth(), 0.01F);
      assertEquals(0.0F, homeLight1.getNameYOffset(), 0.01F);
      assertTrue(homeLight1.isVisible());
      assertNull(homeLight1.getCurrency());
      assertFalse(homeLight1.isNameVisible());
      assertEquals((-407.5F), homeLight1.getX(), 0.01F);
      assertTrue(homeLight1.isDeformable());
      assertEquals((-694.0F), homeLight1.getHeight(), 0.01F);
      assertFalse(homeLight1.isDoorOrWindow());
      assertEquals("h&*+\"", homeLight1.getCatalogId());
      assertTrue(homeLight1.isTexturable());
      assertNull(homeLight1.getColor());
      assertEquals(0.3926991F, homeLight1.getDepth(), 0.01F);
      assertEquals("h&*+\"", homeLight1.getName());
      assertFalse(homeLight1.isModelMirrored());
      assertFalse(homeLight1.isBackFaceShown());
      assertEquals(2, lightSourceArray0.length);
      assertNotSame(homeLight0, homeLight1);
      assertNotSame(homeLight0, homeLight2);
      assertNotSame(homeLight1, homeLight0);
      assertNotSame(homeLight1, homeLight2);
      assertEquals((-407.5F), float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test252()  throws Throwable  {
      LightSource[] lightSourceArray0 = new LightSource[2];
      BigDecimal bigDecimal0 = BigDecimal.ONE;
      assertEquals((byte)1, bigDecimal0.byteValue());
      assertEquals((short)1, bigDecimal0.shortValue());
      assertNotNull(bigDecimal0);
      
      CatalogLight catalogLight0 = new CatalogLight("h&i*+\"", "h&i*+\"", "h&i*+\"", (Content) null, (Content) null, (-2263.3643F), (-2263.3643F), (-2263.3643F), (-2263.3643F), true, lightSourceArray0, (float[][]) null, "h&i*+\"", true, bigDecimal0, bigDecimal0);
      assertEquals((byte)1, bigDecimal0.byteValue());
      assertEquals((short)1, bigDecimal0.shortValue());
      assertFalse(catalogLight0.isBackFaceShown());
      assertNull(catalogLight0.getInformation());
      assertTrue(catalogLight0.isResizable());
      assertEquals("h&i*+\"", catalogLight0.getId());
      assertTrue(catalogLight0.isDeformable());
      assertEquals((-2263.3643F), catalogLight0.getDepth(), 0.01F);
      assertNull(catalogLight0.getColor());
      assertEquals((-2263.3643F), catalogLight0.getElevation(), 0.01F);
      assertTrue(catalogLight0.isMovable());
      assertTrue(catalogLight0.isProportional());
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertFalse(catalogLight0.isDoorOrWindow());
      assertEquals("h&i*+\"", catalogLight0.getName());
      assertNull(catalogLight0.getGrade());
      assertEquals((-2263.3643F), catalogLight0.getWidth(), 0.01F);
      assertTrue(catalogLight0.isTexturable());
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertFalse(catalogLight0.isModifiable());
      assertEquals((-2263.3643F), catalogLight0.getHeight(), 0.01F);
      assertNull(catalogLight0.getCreationDate());
      assertEquals("h&i*+\"", catalogLight0.getCreator());
      assertEquals("h&i*+\"", catalogLight0.getDescription());
      assertNull(catalogLight0.getCurrency());
      assertEquals(2, lightSourceArray0.length);
      assertNotNull(catalogLight0);
      
      FurnitureCategory furnitureCategory0 = catalogLight0.getCategory();
      assertEquals((byte)1, bigDecimal0.byteValue());
      assertEquals((short)1, bigDecimal0.shortValue());
      assertFalse(catalogLight0.isBackFaceShown());
      assertNull(catalogLight0.getInformation());
      assertTrue(catalogLight0.isResizable());
      assertEquals("h&i*+\"", catalogLight0.getId());
      assertTrue(catalogLight0.isDeformable());
      assertEquals((-2263.3643F), catalogLight0.getDepth(), 0.01F);
      assertNull(catalogLight0.getColor());
      assertEquals((-2263.3643F), catalogLight0.getElevation(), 0.01F);
      assertTrue(catalogLight0.isMovable());
      assertTrue(catalogLight0.isProportional());
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertFalse(catalogLight0.isDoorOrWindow());
      assertEquals("h&i*+\"", catalogLight0.getName());
      assertNull(catalogLight0.getGrade());
      assertEquals((-2263.3643F), catalogLight0.getWidth(), 0.01F);
      assertTrue(catalogLight0.isTexturable());
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertFalse(catalogLight0.isModifiable());
      assertEquals((-2263.3643F), catalogLight0.getHeight(), 0.01F);
      assertNull(catalogLight0.getCreationDate());
      assertEquals("h&i*+\"", catalogLight0.getCreator());
      assertEquals("h&i*+\"", catalogLight0.getDescription());
      assertNull(catalogLight0.getCurrency());
      assertEquals(2, lightSourceArray0.length);
      assertNull(furnitureCategory0);
      
      catalogLight0.setCategory((FurnitureCategory) null);
      assertEquals((byte)1, bigDecimal0.byteValue());
      assertEquals((short)1, bigDecimal0.shortValue());
      assertFalse(catalogLight0.isBackFaceShown());
      assertNull(catalogLight0.getInformation());
      assertTrue(catalogLight0.isResizable());
      assertEquals("h&i*+\"", catalogLight0.getId());
      assertTrue(catalogLight0.isDeformable());
      assertEquals((-2263.3643F), catalogLight0.getDepth(), 0.01F);
      assertNull(catalogLight0.getColor());
      assertEquals((-2263.3643F), catalogLight0.getElevation(), 0.01F);
      assertTrue(catalogLight0.isMovable());
      assertTrue(catalogLight0.isProportional());
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertFalse(catalogLight0.isDoorOrWindow());
      assertEquals("h&i*+\"", catalogLight0.getName());
      assertNull(catalogLight0.getGrade());
      assertEquals((-2263.3643F), catalogLight0.getWidth(), 0.01F);
      assertTrue(catalogLight0.isTexturable());
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertFalse(catalogLight0.isModifiable());
      assertEquals((-2263.3643F), catalogLight0.getHeight(), 0.01F);
      assertNull(catalogLight0.getCreationDate());
      assertEquals("h&i*+\"", catalogLight0.getCreator());
      assertEquals("h&i*+\"", catalogLight0.getDescription());
      assertNull(catalogLight0.getCurrency());
      assertEquals(2, lightSourceArray0.length);
      
      HomeLight homeLight0 = new HomeLight(catalogLight0);
      assertEquals((byte)1, bigDecimal0.byteValue());
      assertEquals((short)1, bigDecimal0.shortValue());
      assertFalse(catalogLight0.isBackFaceShown());
      assertNull(catalogLight0.getInformation());
      assertTrue(catalogLight0.isResizable());
      assertEquals("h&i*+\"", catalogLight0.getId());
      assertTrue(catalogLight0.isDeformable());
      assertEquals((-2263.3643F), catalogLight0.getDepth(), 0.01F);
      assertNull(catalogLight0.getColor());
      assertEquals((-2263.3643F), catalogLight0.getElevation(), 0.01F);
      assertTrue(catalogLight0.isMovable());
      assertTrue(catalogLight0.isProportional());
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertFalse(catalogLight0.isDoorOrWindow());
      assertEquals("h&i*+\"", catalogLight0.getName());
      assertNull(catalogLight0.getGrade());
      assertEquals((-2263.3643F), catalogLight0.getWidth(), 0.01F);
      assertTrue(catalogLight0.isTexturable());
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertFalse(catalogLight0.isModifiable());
      assertEquals((-2263.3643F), catalogLight0.getHeight(), 0.01F);
      assertNull(catalogLight0.getCreationDate());
      assertEquals("h&i*+\"", catalogLight0.getCreator());
      assertEquals("h&i*+\"", catalogLight0.getDescription());
      assertNull(catalogLight0.getCurrency());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals((-2263.3643F), homeLight0.getDepth(), 0.01F);
      assertEquals("h&i*+\"", homeLight0.getCatalogId());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertEquals("h&i*+\"", homeLight0.getName());
      assertTrue(homeLight0.isTexturable());
      assertEquals("h&i*+\"", homeLight0.getDescription());
      assertFalse(homeLight0.isModelMirrored());
      assertFalse(homeLight0.isBackFaceShown());
      assertEquals((-2263.3643F), homeLight0.getElevation(), 0.01F);
      assertEquals((-2263.3643F), homeLight0.getWidth(), 0.01F);
      assertEquals((-1131.6821F), homeLight0.getY(), 0.01F);
      assertFalse(homeLight0.isNameVisible());
      assertEquals((-2263.3643F), homeLight0.getGroundElevation(), 0.01F);
      assertNull(homeLight0.getCurrency());
      assertNull(homeLight0.getColor());
      assertEquals((-1131.6821F), homeLight0.getX(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      assertTrue(homeLight0.isDeformable());
      assertTrue(homeLight0.isVisible());
      assertTrue(homeLight0.isResizable());
      assertTrue(homeLight0.isMovable());
      assertNull(homeLight0.getShininess());
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals((-2263.3643F), homeLight0.getHeight(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertEquals(2, lightSourceArray0.length);
      assertNotNull(homeLight0);
      
      homeLight0.setMovable(false);
      assertEquals((byte)1, bigDecimal0.byteValue());
      assertEquals((short)1, bigDecimal0.shortValue());
      assertFalse(catalogLight0.isBackFaceShown());
      assertNull(catalogLight0.getInformation());
      assertTrue(catalogLight0.isResizable());
      assertEquals("h&i*+\"", catalogLight0.getId());
      assertTrue(catalogLight0.isDeformable());
      assertEquals((-2263.3643F), catalogLight0.getDepth(), 0.01F);
      assertNull(catalogLight0.getColor());
      assertEquals((-2263.3643F), catalogLight0.getElevation(), 0.01F);
      assertTrue(catalogLight0.isMovable());
      assertTrue(catalogLight0.isProportional());
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertFalse(catalogLight0.isDoorOrWindow());
      assertEquals("h&i*+\"", catalogLight0.getName());
      assertNull(catalogLight0.getGrade());
      assertEquals((-2263.3643F), catalogLight0.getWidth(), 0.01F);
      assertTrue(catalogLight0.isTexturable());
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertFalse(catalogLight0.isModifiable());
      assertEquals((-2263.3643F), catalogLight0.getHeight(), 0.01F);
      assertNull(catalogLight0.getCreationDate());
      assertEquals("h&i*+\"", catalogLight0.getCreator());
      assertEquals("h&i*+\"", catalogLight0.getDescription());
      assertNull(catalogLight0.getCurrency());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals((-2263.3643F), homeLight0.getDepth(), 0.01F);
      assertEquals("h&i*+\"", homeLight0.getCatalogId());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertEquals("h&i*+\"", homeLight0.getName());
      assertTrue(homeLight0.isTexturable());
      assertEquals("h&i*+\"", homeLight0.getDescription());
      assertFalse(homeLight0.isModelMirrored());
      assertFalse(homeLight0.isBackFaceShown());
      assertEquals((-2263.3643F), homeLight0.getElevation(), 0.01F);
      assertEquals((-2263.3643F), homeLight0.getWidth(), 0.01F);
      assertEquals((-1131.6821F), homeLight0.getY(), 0.01F);
      assertFalse(homeLight0.isNameVisible());
      assertEquals((-2263.3643F), homeLight0.getGroundElevation(), 0.01F);
      assertNull(homeLight0.getCurrency());
      assertNull(homeLight0.getColor());
      assertEquals((-1131.6821F), homeLight0.getX(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      assertFalse(homeLight0.isMovable());
      assertTrue(homeLight0.isDeformable());
      assertTrue(homeLight0.isVisible());
      assertTrue(homeLight0.isResizable());
      assertNull(homeLight0.getShininess());
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals((-2263.3643F), homeLight0.getHeight(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertEquals(2, lightSourceArray0.length);
      
      float[][] floatArray0 = homeLight0.getPoints();
      assertEquals((byte)1, bigDecimal0.byteValue());
      assertEquals((short)1, bigDecimal0.shortValue());
      assertFalse(catalogLight0.isBackFaceShown());
      assertNull(catalogLight0.getInformation());
      assertTrue(catalogLight0.isResizable());
      assertEquals("h&i*+\"", catalogLight0.getId());
      assertTrue(catalogLight0.isDeformable());
      assertEquals((-2263.3643F), catalogLight0.getDepth(), 0.01F);
      assertNull(catalogLight0.getColor());
      assertEquals((-2263.3643F), catalogLight0.getElevation(), 0.01F);
      assertTrue(catalogLight0.isMovable());
      assertTrue(catalogLight0.isProportional());
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertFalse(catalogLight0.isDoorOrWindow());
      assertEquals("h&i*+\"", catalogLight0.getName());
      assertNull(catalogLight0.getGrade());
      assertEquals((-2263.3643F), catalogLight0.getWidth(), 0.01F);
      assertTrue(catalogLight0.isTexturable());
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertFalse(catalogLight0.isModifiable());
      assertEquals((-2263.3643F), catalogLight0.getHeight(), 0.01F);
      assertNull(catalogLight0.getCreationDate());
      assertEquals("h&i*+\"", catalogLight0.getCreator());
      assertEquals("h&i*+\"", catalogLight0.getDescription());
      assertNull(catalogLight0.getCurrency());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals((-2263.3643F), homeLight0.getDepth(), 0.01F);
      assertEquals("h&i*+\"", homeLight0.getCatalogId());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertEquals("h&i*+\"", homeLight0.getName());
      assertTrue(homeLight0.isTexturable());
      assertEquals("h&i*+\"", homeLight0.getDescription());
      assertFalse(homeLight0.isModelMirrored());
      assertFalse(homeLight0.isBackFaceShown());
      assertEquals((-2263.3643F), homeLight0.getElevation(), 0.01F);
      assertEquals((-2263.3643F), homeLight0.getWidth(), 0.01F);
      assertEquals((-1131.6821F), homeLight0.getY(), 0.01F);
      assertFalse(homeLight0.isNameVisible());
      assertEquals((-2263.3643F), homeLight0.getGroundElevation(), 0.01F);
      assertNull(homeLight0.getCurrency());
      assertNull(homeLight0.getColor());
      assertEquals((-1131.6821F), homeLight0.getX(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      assertFalse(homeLight0.isMovable());
      assertTrue(homeLight0.isDeformable());
      assertTrue(homeLight0.isVisible());
      assertTrue(homeLight0.isResizable());
      assertNull(homeLight0.getShininess());
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals((-2263.3643F), homeLight0.getHeight(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertEquals(2, lightSourceArray0.length);
      assertEquals(4, floatArray0.length);
      assertNotNull(floatArray0);
  }

  @Test(timeout = 4000)
  public void test253()  throws Throwable  {
      LightSource[] lightSourceArray0 = new LightSource[2];
      LightSource lightSource0 = new LightSource((-815.0F), 0.0F, 0.0F, 128);
      assertEquals(0.0F, lightSource0.getZ(), 0.01F);
      assertEquals((-815.0F), lightSource0.getX(), 0.01F);
      assertNull(lightSource0.getDiameter());
      assertEquals(128, lightSource0.getColor());
      assertEquals(0.0F, lightSource0.getY(), 0.01F);
      assertNotNull(lightSource0);
      
      lightSourceArray0[0] = lightSource0;
      LightSource lightSource1 = new LightSource(0.0F, 128, 0.0F, 128);
      assertFalse(lightSource1.equals((Object)lightSource0));
      assertEquals(128.0F, lightSource1.getY(), 0.01F);
      assertEquals(0.0F, lightSource1.getX(), 0.01F);
      assertEquals(0.0F, lightSource1.getZ(), 0.01F);
      assertNull(lightSource1.getDiameter());
      assertEquals(128, lightSource1.getColor());
      assertNotNull(lightSource1);
      
      LightSource lightSource2 = new LightSource((-1.0F), 0.0F, 233.10785F, 128);
      assertFalse(lightSource2.equals((Object)lightSource1));
      assertFalse(lightSource2.equals((Object)lightSource0));
      assertEquals(233.10785F, lightSource2.getZ(), 0.01F);
      assertEquals(0.0F, lightSource2.getY(), 0.01F);
      assertEquals(128, lightSource2.getColor());
      assertEquals((-1.0F), lightSource2.getX(), 0.01F);
      assertNull(lightSource2.getDiameter());
      assertNotNull(lightSource2);
      
      BigDecimal bigDecimal0 = BigDecimal.TEN;
      assertEquals((short)10, bigDecimal0.shortValue());
      assertEquals((byte)10, bigDecimal0.byteValue());
      assertNotNull(bigDecimal0);
      
      CatalogLight catalogLight0 = new CatalogLight("", (String) null, "", (Content) null, (Content) null, (Content) null, (-815.0F), 3.4028235E38F, (-815.0F), (-2166.6F), false, lightSourceArray0, (float[][]) null, "", false, bigDecimal0, bigDecimal0);
      assertEquals((short)10, bigDecimal0.shortValue());
      assertEquals((byte)10, bigDecimal0.byteValue());
      assertEquals(3.4028235E38F, catalogLight0.getDepth(), 0.01F);
      assertFalse(catalogLight0.isResizable());
      assertFalse(catalogLight0.isMovable());
      assertFalse(catalogLight0.isBackFaceShown());
      assertEquals((-815.0F), catalogLight0.getHeight(), 0.01F);
      assertTrue(catalogLight0.isDeformable());
      assertNull(catalogLight0.getInformation());
      assertEquals((-815.0F), catalogLight0.getWidth(), 0.01F);
      assertNull(catalogLight0.getColor());
      assertNull(catalogLight0.getGrade());
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertFalse(catalogLight0.isDoorOrWindow());
      assertNull(catalogLight0.getName());
      assertTrue(catalogLight0.isProportional());
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertTrue(catalogLight0.isTexturable());
      assertEquals((-2166.6F), catalogLight0.getElevation(), 0.01F);
      assertNull(catalogLight0.getCurrency());
      assertEquals("", catalogLight0.getId());
      assertFalse(catalogLight0.isModifiable());
      assertNull(catalogLight0.getCreationDate());
      assertEquals("", catalogLight0.getCreator());
      assertEquals("", catalogLight0.getDescription());
      assertEquals(2, lightSourceArray0.length);
      assertNotNull(catalogLight0);
      
      HomeLight homeLight0 = new HomeLight(catalogLight0);
      assertEquals((short)10, bigDecimal0.shortValue());
      assertEquals((byte)10, bigDecimal0.byteValue());
      assertEquals(3.4028235E38F, catalogLight0.getDepth(), 0.01F);
      assertFalse(catalogLight0.isResizable());
      assertFalse(catalogLight0.isMovable());
      assertFalse(catalogLight0.isBackFaceShown());
      assertEquals((-815.0F), catalogLight0.getHeight(), 0.01F);
      assertTrue(catalogLight0.isDeformable());
      assertNull(catalogLight0.getInformation());
      assertEquals((-815.0F), catalogLight0.getWidth(), 0.01F);
      assertNull(catalogLight0.getColor());
      assertNull(catalogLight0.getGrade());
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertFalse(catalogLight0.isDoorOrWindow());
      assertNull(catalogLight0.getName());
      assertTrue(catalogLight0.isProportional());
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertTrue(catalogLight0.isTexturable());
      assertEquals((-2166.6F), catalogLight0.getElevation(), 0.01F);
      assertNull(catalogLight0.getCurrency());
      assertEquals("", catalogLight0.getId());
      assertFalse(catalogLight0.isModifiable());
      assertNull(catalogLight0.getCreationDate());
      assertEquals("", catalogLight0.getCreator());
      assertEquals("", catalogLight0.getDescription());
      assertTrue(homeLight0.isVisible());
      assertEquals((-407.5F), homeLight0.getX(), 0.01F);
      assertTrue(homeLight0.isDeformable());
      assertFalse(homeLight0.isMovable());
      assertFalse(homeLight0.isResizable());
      assertFalse(homeLight0.isNameVisible());
      assertEquals("", homeLight0.getCatalogId());
      assertNull(homeLight0.getColor());
      assertFalse(homeLight0.isModelMirrored());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals(3.4028235E38F, homeLight0.getDepth(), 0.01F);
      assertNull(homeLight0.getCurrency());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertEquals(1.7014117E38F, homeLight0.getY(), 0.01F);
      assertEquals((-2166.6F), homeLight0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertEquals((-815.0F), homeLight0.getHeight(), 0.01F);
      assertFalse(homeLight0.isBackFaceShown());
      assertNull(homeLight0.getName());
      assertEquals((-2166.6F), homeLight0.getElevation(), 0.01F);
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals((-815.0F), homeLight0.getWidth(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertNull(homeLight0.getShininess());
      assertTrue(homeLight0.isTexturable());
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      assertEquals("", homeLight0.getDescription());
      assertEquals(2, lightSourceArray0.length);
      assertNotNull(homeLight0);
      
      HomeLight homeLight1 = homeLight0.clone();
      assertFalse(homeLight1.equals((Object)homeLight0));
      assertEquals((short)10, bigDecimal0.shortValue());
      assertEquals((byte)10, bigDecimal0.byteValue());
      assertEquals(3.4028235E38F, catalogLight0.getDepth(), 0.01F);
      assertFalse(catalogLight0.isResizable());
      assertFalse(catalogLight0.isMovable());
      assertFalse(catalogLight0.isBackFaceShown());
      assertEquals((-815.0F), catalogLight0.getHeight(), 0.01F);
      assertTrue(catalogLight0.isDeformable());
      assertNull(catalogLight0.getInformation());
      assertEquals((-815.0F), catalogLight0.getWidth(), 0.01F);
      assertNull(catalogLight0.getColor());
      assertNull(catalogLight0.getGrade());
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertFalse(catalogLight0.isDoorOrWindow());
      assertNull(catalogLight0.getName());
      assertTrue(catalogLight0.isProportional());
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertTrue(catalogLight0.isTexturable());
      assertEquals((-2166.6F), catalogLight0.getElevation(), 0.01F);
      assertNull(catalogLight0.getCurrency());
      assertEquals("", catalogLight0.getId());
      assertFalse(catalogLight0.isModifiable());
      assertNull(catalogLight0.getCreationDate());
      assertEquals("", catalogLight0.getCreator());
      assertEquals("", catalogLight0.getDescription());
      assertTrue(homeLight0.isVisible());
      assertEquals((-407.5F), homeLight0.getX(), 0.01F);
      assertTrue(homeLight0.isDeformable());
      assertFalse(homeLight0.isMovable());
      assertFalse(homeLight0.isResizable());
      assertFalse(homeLight0.isNameVisible());
      assertEquals("", homeLight0.getCatalogId());
      assertNull(homeLight0.getColor());
      assertFalse(homeLight0.isModelMirrored());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals(3.4028235E38F, homeLight0.getDepth(), 0.01F);
      assertNull(homeLight0.getCurrency());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertEquals(1.7014117E38F, homeLight0.getY(), 0.01F);
      assertEquals((-2166.6F), homeLight0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertEquals((-815.0F), homeLight0.getHeight(), 0.01F);
      assertFalse(homeLight0.isBackFaceShown());
      assertNull(homeLight0.getName());
      assertEquals((-2166.6F), homeLight0.getElevation(), 0.01F);
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals((-815.0F), homeLight0.getWidth(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertNull(homeLight0.getShininess());
      assertTrue(homeLight0.isTexturable());
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      assertEquals("", homeLight0.getDescription());
      assertEquals(3.4028235E38F, homeLight1.getDepth(), 0.01F);
      assertNull(homeLight1.getCurrency());
      assertNull(homeLight1.getColor());
      assertFalse(homeLight1.isNameVisible());
      assertEquals(0.0F, homeLight1.getNameYOffset(), 0.01F);
      assertEquals((-407.5F), homeLight1.getX(), 0.01F);
      assertFalse(homeLight1.isDoorOrWindow());
      assertTrue(homeLight1.isTexturable());
      assertEquals((-2166.6F), homeLight1.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight1.getAngle(), 0.01F);
      assertEquals(1.7014117E38F, homeLight1.getY(), 0.01F);
      assertEquals((-2166.6F), homeLight1.getElevation(), 0.01F);
      assertFalse(homeLight1.isBackFaceShown());
      assertEquals((-815.0F), homeLight1.getHeight(), 0.01F);
      assertFalse(homeLight1.isModelMirrored());
      assertNull(homeLight1.getName());
      assertEquals(0.0F, homeLight1.getNameXOffset(), 0.01F);
      assertEquals("", homeLight1.getCatalogId());
      assertEquals("", homeLight1.getDescription());
      assertEquals(0.5F, homeLight1.getPower(), 0.01F);
      assertFalse(homeLight1.isResizable());
      assertFalse(homeLight1.isMovable());
      assertTrue(homeLight1.isVisible());
      assertEquals((-815.0F), homeLight1.getWidth(), 0.01F);
      assertTrue(homeLight1.isDeformable());
      assertEquals(0.0F, homeLight1.getNameAngle(), 0.01F);
      assertNull(homeLight1.getShininess());
      assertNull(homeLight1.getStaircaseCutOutShape());
      assertEquals(2, lightSourceArray0.length);
      assertNotSame(homeLight0, homeLight1);
      assertNotSame(homeLight1, homeLight0);
      assertNotNull(homeLight1);
      
      HomeLight homeLight2 = (HomeLight)homeLight0.clone();
      assertFalse(homeLight0.equals((Object)homeLight1));
      assertFalse(homeLight2.equals((Object)homeLight1));
      assertFalse(homeLight2.equals((Object)homeLight0));
      assertEquals((short)10, bigDecimal0.shortValue());
      assertEquals((byte)10, bigDecimal0.byteValue());
      assertEquals(3.4028235E38F, catalogLight0.getDepth(), 0.01F);
      assertFalse(catalogLight0.isResizable());
      assertFalse(catalogLight0.isMovable());
      assertFalse(catalogLight0.isBackFaceShown());
      assertEquals((-815.0F), catalogLight0.getHeight(), 0.01F);
      assertTrue(catalogLight0.isDeformable());
      assertNull(catalogLight0.getInformation());
      assertEquals((-815.0F), catalogLight0.getWidth(), 0.01F);
      assertNull(catalogLight0.getColor());
      assertNull(catalogLight0.getGrade());
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertFalse(catalogLight0.isDoorOrWindow());
      assertNull(catalogLight0.getName());
      assertTrue(catalogLight0.isProportional());
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertTrue(catalogLight0.isTexturable());
      assertEquals((-2166.6F), catalogLight0.getElevation(), 0.01F);
      assertNull(catalogLight0.getCurrency());
      assertEquals("", catalogLight0.getId());
      assertFalse(catalogLight0.isModifiable());
      assertNull(catalogLight0.getCreationDate());
      assertEquals("", catalogLight0.getCreator());
      assertEquals("", catalogLight0.getDescription());
      assertTrue(homeLight0.isVisible());
      assertEquals((-407.5F), homeLight0.getX(), 0.01F);
      assertTrue(homeLight0.isDeformable());
      assertFalse(homeLight0.isMovable());
      assertFalse(homeLight0.isResizable());
      assertFalse(homeLight0.isNameVisible());
      assertEquals("", homeLight0.getCatalogId());
      assertNull(homeLight0.getColor());
      assertFalse(homeLight0.isModelMirrored());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals(3.4028235E38F, homeLight0.getDepth(), 0.01F);
      assertNull(homeLight0.getCurrency());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertEquals(1.7014117E38F, homeLight0.getY(), 0.01F);
      assertEquals((-2166.6F), homeLight0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertEquals((-815.0F), homeLight0.getHeight(), 0.01F);
      assertFalse(homeLight0.isBackFaceShown());
      assertNull(homeLight0.getName());
      assertEquals((-2166.6F), homeLight0.getElevation(), 0.01F);
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals((-815.0F), homeLight0.getWidth(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertNull(homeLight0.getShininess());
      assertTrue(homeLight0.isTexturable());
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      assertEquals("", homeLight0.getDescription());
      assertFalse(homeLight2.isDoorOrWindow());
      assertTrue(homeLight2.isTexturable());
      assertFalse(homeLight2.isBackFaceShown());
      assertFalse(homeLight2.isModelMirrored());
      assertNull(homeLight2.getColor());
      assertEquals(0.0F, homeLight2.getNameYOffset(), 0.01F);
      assertTrue(homeLight2.isDeformable());
      assertTrue(homeLight2.isVisible());
      assertEquals((-407.5F), homeLight2.getX(), 0.01F);
      assertNull(homeLight2.getCurrency());
      assertEquals(0.0F, homeLight2.getNameAngle(), 0.01F);
      assertEquals(0.5F, homeLight2.getPower(), 0.01F);
      assertFalse(homeLight2.isMovable());
      assertEquals(1.7014117E38F, homeLight2.getY(), 0.01F);
      assertNull(homeLight2.getShininess());
      assertFalse(homeLight2.isResizable());
      assertEquals((-815.0F), homeLight2.getWidth(), 0.01F);
      assertNull(homeLight2.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight2.getNameXOffset(), 0.01F);
      assertEquals("", homeLight2.getCatalogId());
      assertEquals((-2166.6F), homeLight2.getElevation(), 0.01F);
      assertEquals(3.4028235E38F, homeLight2.getDepth(), 0.01F);
      assertEquals((-815.0F), homeLight2.getHeight(), 0.01F);
      assertEquals("", homeLight2.getDescription());
      assertEquals(0.0F, homeLight2.getAngle(), 0.01F);
      assertEquals((-2166.6F), homeLight2.getGroundElevation(), 0.01F);
      assertNull(homeLight2.getName());
      assertFalse(homeLight2.isNameVisible());
      assertEquals(2, lightSourceArray0.length);
      assertNotSame(homeLight0, homeLight2);
      assertNotSame(homeLight0, homeLight1);
      assertNotSame(homeLight2, homeLight1);
      assertNotSame(homeLight2, homeLight0);
      assertNotNull(homeLight2);
      
      Content content0 = homeLight1.getIcon();
      assertFalse(homeLight0.equals((Object)homeLight2));
      assertFalse(homeLight0.equals((Object)homeLight1));
      assertFalse(homeLight1.equals((Object)homeLight2));
      assertFalse(homeLight1.equals((Object)homeLight0));
      assertEquals((short)10, bigDecimal0.shortValue());
      assertEquals((byte)10, bigDecimal0.byteValue());
      assertEquals(3.4028235E38F, catalogLight0.getDepth(), 0.01F);
      assertFalse(catalogLight0.isResizable());
      assertFalse(catalogLight0.isMovable());
      assertFalse(catalogLight0.isBackFaceShown());
      assertEquals((-815.0F), catalogLight0.getHeight(), 0.01F);
      assertTrue(catalogLight0.isDeformable());
      assertNull(catalogLight0.getInformation());
      assertEquals((-815.0F), catalogLight0.getWidth(), 0.01F);
      assertNull(catalogLight0.getColor());
      assertNull(catalogLight0.getGrade());
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertFalse(catalogLight0.isDoorOrWindow());
      assertNull(catalogLight0.getName());
      assertTrue(catalogLight0.isProportional());
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertTrue(catalogLight0.isTexturable());
      assertEquals((-2166.6F), catalogLight0.getElevation(), 0.01F);
      assertNull(catalogLight0.getCurrency());
      assertEquals("", catalogLight0.getId());
      assertFalse(catalogLight0.isModifiable());
      assertNull(catalogLight0.getCreationDate());
      assertEquals("", catalogLight0.getCreator());
      assertEquals("", catalogLight0.getDescription());
      assertTrue(homeLight0.isVisible());
      assertEquals((-407.5F), homeLight0.getX(), 0.01F);
      assertTrue(homeLight0.isDeformable());
      assertFalse(homeLight0.isMovable());
      assertFalse(homeLight0.isResizable());
      assertFalse(homeLight0.isNameVisible());
      assertEquals("", homeLight0.getCatalogId());
      assertNull(homeLight0.getColor());
      assertFalse(homeLight0.isModelMirrored());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals(3.4028235E38F, homeLight0.getDepth(), 0.01F);
      assertNull(homeLight0.getCurrency());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertEquals(1.7014117E38F, homeLight0.getY(), 0.01F);
      assertEquals((-2166.6F), homeLight0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertEquals((-815.0F), homeLight0.getHeight(), 0.01F);
      assertFalse(homeLight0.isBackFaceShown());
      assertNull(homeLight0.getName());
      assertEquals((-2166.6F), homeLight0.getElevation(), 0.01F);
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals((-815.0F), homeLight0.getWidth(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertNull(homeLight0.getShininess());
      assertTrue(homeLight0.isTexturable());
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      assertEquals("", homeLight0.getDescription());
      assertEquals(3.4028235E38F, homeLight1.getDepth(), 0.01F);
      assertNull(homeLight1.getCurrency());
      assertNull(homeLight1.getColor());
      assertFalse(homeLight1.isNameVisible());
      assertEquals(0.0F, homeLight1.getNameYOffset(), 0.01F);
      assertEquals((-407.5F), homeLight1.getX(), 0.01F);
      assertFalse(homeLight1.isDoorOrWindow());
      assertTrue(homeLight1.isTexturable());
      assertEquals((-2166.6F), homeLight1.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight1.getAngle(), 0.01F);
      assertEquals(1.7014117E38F, homeLight1.getY(), 0.01F);
      assertEquals((-2166.6F), homeLight1.getElevation(), 0.01F);
      assertFalse(homeLight1.isBackFaceShown());
      assertEquals((-815.0F), homeLight1.getHeight(), 0.01F);
      assertFalse(homeLight1.isModelMirrored());
      assertNull(homeLight1.getName());
      assertEquals(0.0F, homeLight1.getNameXOffset(), 0.01F);
      assertEquals("", homeLight1.getCatalogId());
      assertEquals("", homeLight1.getDescription());
      assertEquals(0.5F, homeLight1.getPower(), 0.01F);
      assertFalse(homeLight1.isResizable());
      assertFalse(homeLight1.isMovable());
      assertTrue(homeLight1.isVisible());
      assertEquals((-815.0F), homeLight1.getWidth(), 0.01F);
      assertTrue(homeLight1.isDeformable());
      assertEquals(0.0F, homeLight1.getNameAngle(), 0.01F);
      assertNull(homeLight1.getShininess());
      assertNull(homeLight1.getStaircaseCutOutShape());
      assertEquals(2, lightSourceArray0.length);
      assertNotSame(homeLight0, homeLight2);
      assertNotSame(homeLight0, homeLight1);
      assertNotSame(homeLight1, homeLight2);
      assertNotSame(homeLight1, homeLight0);
      assertNull(content0);
      
      homeLight0.setNameVisible(true);
      assertFalse(homeLight0.equals((Object)homeLight2));
      assertFalse(homeLight0.equals((Object)homeLight1));
      assertEquals((short)10, bigDecimal0.shortValue());
      assertEquals((byte)10, bigDecimal0.byteValue());
      assertEquals(3.4028235E38F, catalogLight0.getDepth(), 0.01F);
      assertFalse(catalogLight0.isResizable());
      assertFalse(catalogLight0.isMovable());
      assertFalse(catalogLight0.isBackFaceShown());
      assertEquals((-815.0F), catalogLight0.getHeight(), 0.01F);
      assertTrue(catalogLight0.isDeformable());
      assertNull(catalogLight0.getInformation());
      assertEquals((-815.0F), catalogLight0.getWidth(), 0.01F);
      assertNull(catalogLight0.getColor());
      assertNull(catalogLight0.getGrade());
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertFalse(catalogLight0.isDoorOrWindow());
      assertNull(catalogLight0.getName());
      assertTrue(catalogLight0.isProportional());
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertTrue(catalogLight0.isTexturable());
      assertEquals((-2166.6F), catalogLight0.getElevation(), 0.01F);
      assertNull(catalogLight0.getCurrency());
      assertEquals("", catalogLight0.getId());
      assertFalse(catalogLight0.isModifiable());
      assertNull(catalogLight0.getCreationDate());
      assertEquals("", catalogLight0.getCreator());
      assertEquals("", catalogLight0.getDescription());
      assertTrue(homeLight0.isVisible());
      assertEquals((-407.5F), homeLight0.getX(), 0.01F);
      assertTrue(homeLight0.isDeformable());
      assertFalse(homeLight0.isMovable());
      assertTrue(homeLight0.isNameVisible());
      assertFalse(homeLight0.isResizable());
      assertEquals("", homeLight0.getCatalogId());
      assertNull(homeLight0.getColor());
      assertFalse(homeLight0.isModelMirrored());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals(3.4028235E38F, homeLight0.getDepth(), 0.01F);
      assertNull(homeLight0.getCurrency());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertEquals(1.7014117E38F, homeLight0.getY(), 0.01F);
      assertEquals((-2166.6F), homeLight0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertEquals((-815.0F), homeLight0.getHeight(), 0.01F);
      assertFalse(homeLight0.isBackFaceShown());
      assertNull(homeLight0.getName());
      assertEquals((-2166.6F), homeLight0.getElevation(), 0.01F);
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals((-815.0F), homeLight0.getWidth(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertNull(homeLight0.getShininess());
      assertTrue(homeLight0.isTexturable());
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      assertEquals("", homeLight0.getDescription());
      assertEquals(2, lightSourceArray0.length);
      assertNotSame(homeLight0, homeLight2);
      assertNotSame(homeLight0, homeLight1);
      
      // Undeclared exception!
      try { 
        homeLight1.setWidth((-1.0F));
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Piece isn't resizable
         //
         verifyException("com.eteks.sweethome3d.model.HomePieceOfFurniture", e);
      }
  }

  @Test(timeout = 4000)
  public void test254()  throws Throwable  {
      LightSource[] lightSourceArray0 = new LightSource[12];
      BigDecimal bigDecimal0 = BigDecimal.TEN;
      assertEquals((short)10, bigDecimal0.shortValue());
      assertEquals((byte)10, bigDecimal0.byteValue());
      assertNotNull(bigDecimal0);
      
      CatalogLight catalogLight0 = new CatalogLight("h&*+\"", "h&*+\"", "h&*+\"", (Content) null, (Content) null, 587.23944F, 587.23944F, (-694.0F), (-694.0F), true, lightSourceArray0, (float[][]) null, "h&*+\"", true, bigDecimal0, bigDecimal0);
      assertEquals((short)10, bigDecimal0.shortValue());
      assertEquals((byte)10, bigDecimal0.byteValue());
      assertEquals("h&*+\"", catalogLight0.getName());
      assertTrue(catalogLight0.isMovable());
      assertEquals(587.23944F, catalogLight0.getDepth(), 0.01F);
      assertNull(catalogLight0.getInformation());
      assertTrue(catalogLight0.isDeformable());
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertTrue(catalogLight0.isResizable());
      assertEquals("h&*+\"", catalogLight0.getCreator());
      assertEquals("h&*+\"", catalogLight0.getDescription());
      assertEquals((-694.0F), catalogLight0.getHeight(), 0.01F);
      assertFalse(catalogLight0.isBackFaceShown());
      assertFalse(catalogLight0.isDoorOrWindow());
      assertTrue(catalogLight0.isTexturable());
      assertNull(catalogLight0.getGrade());
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertTrue(catalogLight0.isProportional());
      assertEquals(587.23944F, catalogLight0.getWidth(), 0.01F);
      assertNull(catalogLight0.getColor());
      assertFalse(catalogLight0.isModifiable());
      assertNull(catalogLight0.getCreationDate());
      assertEquals((-694.0F), catalogLight0.getElevation(), 0.01F);
      assertEquals("h&*+\"", catalogLight0.getId());
      assertNull(catalogLight0.getCurrency());
      assertEquals(12, lightSourceArray0.length);
      assertNotNull(catalogLight0);
      
      HomeLight homeLight0 = new HomeLight(catalogLight0);
      assertEquals((short)10, bigDecimal0.shortValue());
      assertEquals((byte)10, bigDecimal0.byteValue());
      assertEquals("h&*+\"", catalogLight0.getName());
      assertTrue(catalogLight0.isMovable());
      assertEquals(587.23944F, catalogLight0.getDepth(), 0.01F);
      assertNull(catalogLight0.getInformation());
      assertTrue(catalogLight0.isDeformable());
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertTrue(catalogLight0.isResizable());
      assertEquals("h&*+\"", catalogLight0.getCreator());
      assertEquals("h&*+\"", catalogLight0.getDescription());
      assertEquals((-694.0F), catalogLight0.getHeight(), 0.01F);
      assertFalse(catalogLight0.isBackFaceShown());
      assertFalse(catalogLight0.isDoorOrWindow());
      assertTrue(catalogLight0.isTexturable());
      assertNull(catalogLight0.getGrade());
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertTrue(catalogLight0.isProportional());
      assertEquals(587.23944F, catalogLight0.getWidth(), 0.01F);
      assertNull(catalogLight0.getColor());
      assertFalse(catalogLight0.isModifiable());
      assertNull(catalogLight0.getCreationDate());
      assertEquals((-694.0F), catalogLight0.getElevation(), 0.01F);
      assertEquals("h&*+\"", catalogLight0.getId());
      assertNull(catalogLight0.getCurrency());
      assertEquals("h&*+\"", homeLight0.getCatalogId());
      assertTrue(homeLight0.isMovable());
      assertEquals("h&*+\"", homeLight0.getName());
      assertEquals("h&*+\"", homeLight0.getDescription());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals((-694.0F), homeLight0.getHeight(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals((-694.0F), homeLight0.getElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertTrue(homeLight0.isDeformable());
      assertTrue(homeLight0.isVisible());
      assertNull(homeLight0.getShininess());
      assertTrue(homeLight0.isResizable());
      assertTrue(homeLight0.isTexturable());
      assertFalse(homeLight0.isDoorOrWindow());
      assertEquals((-694.0F), homeLight0.getGroundElevation(), 0.01F);
      assertEquals(293.61972F, homeLight0.getX(), 0.01F);
      assertFalse(homeLight0.isBackFaceShown());
      assertEquals(587.23944F, homeLight0.getDepth(), 0.01F);
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertNull(homeLight0.getCurrency());
      assertFalse(homeLight0.isNameVisible());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertEquals(293.61972F, homeLight0.getY(), 0.01F);
      assertNull(homeLight0.getColor());
      assertEquals(587.23944F, homeLight0.getWidth(), 0.01F);
      assertFalse(homeLight0.isModelMirrored());
      assertEquals(12, lightSourceArray0.length);
      assertNotNull(homeLight0);
      
      HomeLight homeLight1 = new HomeLight(homeLight0);
      assertFalse(homeLight1.equals((Object)homeLight0));
      assertEquals((short)10, bigDecimal0.shortValue());
      assertEquals((byte)10, bigDecimal0.byteValue());
      assertEquals("h&*+\"", catalogLight0.getName());
      assertTrue(catalogLight0.isMovable());
      assertEquals(587.23944F, catalogLight0.getDepth(), 0.01F);
      assertNull(catalogLight0.getInformation());
      assertTrue(catalogLight0.isDeformable());
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertTrue(catalogLight0.isResizable());
      assertEquals("h&*+\"", catalogLight0.getCreator());
      assertEquals("h&*+\"", catalogLight0.getDescription());
      assertEquals((-694.0F), catalogLight0.getHeight(), 0.01F);
      assertFalse(catalogLight0.isBackFaceShown());
      assertFalse(catalogLight0.isDoorOrWindow());
      assertTrue(catalogLight0.isTexturable());
      assertNull(catalogLight0.getGrade());
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertTrue(catalogLight0.isProportional());
      assertEquals(587.23944F, catalogLight0.getWidth(), 0.01F);
      assertNull(catalogLight0.getColor());
      assertFalse(catalogLight0.isModifiable());
      assertNull(catalogLight0.getCreationDate());
      assertEquals((-694.0F), catalogLight0.getElevation(), 0.01F);
      assertEquals("h&*+\"", catalogLight0.getId());
      assertNull(catalogLight0.getCurrency());
      assertEquals("h&*+\"", homeLight0.getCatalogId());
      assertTrue(homeLight0.isMovable());
      assertEquals("h&*+\"", homeLight0.getName());
      assertEquals("h&*+\"", homeLight0.getDescription());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals((-694.0F), homeLight0.getHeight(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals((-694.0F), homeLight0.getElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertTrue(homeLight0.isDeformable());
      assertTrue(homeLight0.isVisible());
      assertNull(homeLight0.getShininess());
      assertTrue(homeLight0.isResizable());
      assertTrue(homeLight0.isTexturable());
      assertFalse(homeLight0.isDoorOrWindow());
      assertEquals((-694.0F), homeLight0.getGroundElevation(), 0.01F);
      assertEquals(293.61972F, homeLight0.getX(), 0.01F);
      assertFalse(homeLight0.isBackFaceShown());
      assertEquals(587.23944F, homeLight0.getDepth(), 0.01F);
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertNull(homeLight0.getCurrency());
      assertFalse(homeLight0.isNameVisible());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertEquals(293.61972F, homeLight0.getY(), 0.01F);
      assertNull(homeLight0.getColor());
      assertEquals(587.23944F, homeLight0.getWidth(), 0.01F);
      assertFalse(homeLight0.isModelMirrored());
      assertTrue(homeLight1.isVisible());
      assertTrue(homeLight1.isDeformable());
      assertEquals(587.23944F, homeLight1.getWidth(), 0.01F);
      assertEquals("h&*+\"", homeLight1.getCatalogId());
      assertEquals(0.0F, homeLight1.getNameYOffset(), 0.01F);
      assertNull(homeLight1.getColor());
      assertFalse(homeLight1.isModelMirrored());
      assertFalse(homeLight1.isBackFaceShown());
      assertEquals(293.61972F, homeLight1.getX(), 0.01F);
      assertEquals("h&*+\"", homeLight1.getName());
      assertTrue(homeLight1.isTexturable());
      assertEquals(293.61972F, homeLight1.getY(), 0.01F);
      assertEquals("h&*+\"", homeLight1.getDescription());
      assertFalse(homeLight1.isDoorOrWindow());
      assertFalse(homeLight1.isNameVisible());
      assertEquals(0.0F, homeLight1.getAngle(), 0.01F);
      assertEquals(587.23944F, homeLight1.getDepth(), 0.01F);
      assertEquals((-694.0F), homeLight1.getElevation(), 0.01F);
      assertEquals((-694.0F), homeLight1.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight1.getNameXOffset(), 0.01F);
      assertTrue(homeLight1.isMovable());
      assertTrue(homeLight1.isResizable());
      assertNull(homeLight1.getShininess());
      assertNull(homeLight1.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight1.getNameAngle(), 0.01F);
      assertEquals(0.5F, homeLight1.getPower(), 0.01F);
      assertNull(homeLight1.getCurrency());
      assertEquals((-694.0F), homeLight1.getHeight(), 0.01F);
      assertEquals(12, lightSourceArray0.length);
      assertNotNull(homeLight1);
      
      homeLight0.setNameStyle((TextStyle) null);
      assertFalse(homeLight0.equals((Object)homeLight1));
      assertEquals((short)10, bigDecimal0.shortValue());
      assertEquals((byte)10, bigDecimal0.byteValue());
      assertEquals("h&*+\"", catalogLight0.getName());
      assertTrue(catalogLight0.isMovable());
      assertEquals(587.23944F, catalogLight0.getDepth(), 0.01F);
      assertNull(catalogLight0.getInformation());
      assertTrue(catalogLight0.isDeformable());
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertTrue(catalogLight0.isResizable());
      assertEquals("h&*+\"", catalogLight0.getCreator());
      assertEquals("h&*+\"", catalogLight0.getDescription());
      assertEquals((-694.0F), catalogLight0.getHeight(), 0.01F);
      assertFalse(catalogLight0.isBackFaceShown());
      assertFalse(catalogLight0.isDoorOrWindow());
      assertTrue(catalogLight0.isTexturable());
      assertNull(catalogLight0.getGrade());
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertTrue(catalogLight0.isProportional());
      assertEquals(587.23944F, catalogLight0.getWidth(), 0.01F);
      assertNull(catalogLight0.getColor());
      assertFalse(catalogLight0.isModifiable());
      assertNull(catalogLight0.getCreationDate());
      assertEquals((-694.0F), catalogLight0.getElevation(), 0.01F);
      assertEquals("h&*+\"", catalogLight0.getId());
      assertNull(catalogLight0.getCurrency());
      assertEquals("h&*+\"", homeLight0.getCatalogId());
      assertTrue(homeLight0.isMovable());
      assertEquals("h&*+\"", homeLight0.getName());
      assertEquals("h&*+\"", homeLight0.getDescription());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals((-694.0F), homeLight0.getHeight(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals((-694.0F), homeLight0.getElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertTrue(homeLight0.isDeformable());
      assertTrue(homeLight0.isVisible());
      assertNull(homeLight0.getShininess());
      assertTrue(homeLight0.isResizable());
      assertTrue(homeLight0.isTexturable());
      assertFalse(homeLight0.isDoorOrWindow());
      assertEquals((-694.0F), homeLight0.getGroundElevation(), 0.01F);
      assertEquals(293.61972F, homeLight0.getX(), 0.01F);
      assertFalse(homeLight0.isBackFaceShown());
      assertEquals(587.23944F, homeLight0.getDepth(), 0.01F);
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertNull(homeLight0.getCurrency());
      assertFalse(homeLight0.isNameVisible());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertEquals(293.61972F, homeLight0.getY(), 0.01F);
      assertNull(homeLight0.getColor());
      assertEquals(587.23944F, homeLight0.getWidth(), 0.01F);
      assertFalse(homeLight0.isModelMirrored());
      assertEquals(12, lightSourceArray0.length);
      assertNotSame(homeLight0, homeLight1);
      
      BigDecimal bigDecimal1 = homeLight0.getValueAddedTax();
      assertFalse(homeLight0.equals((Object)homeLight1));
      assertFalse(bigDecimal1.equals((Object)bigDecimal0));
      assertEquals((short)10, bigDecimal0.shortValue());
      assertEquals((byte)10, bigDecimal0.byteValue());
      assertEquals("h&*+\"", catalogLight0.getName());
      assertTrue(catalogLight0.isMovable());
      assertEquals(587.23944F, catalogLight0.getDepth(), 0.01F);
      assertNull(catalogLight0.getInformation());
      assertTrue(catalogLight0.isDeformable());
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertTrue(catalogLight0.isResizable());
      assertEquals("h&*+\"", catalogLight0.getCreator());
      assertEquals("h&*+\"", catalogLight0.getDescription());
      assertEquals((-694.0F), catalogLight0.getHeight(), 0.01F);
      assertFalse(catalogLight0.isBackFaceShown());
      assertFalse(catalogLight0.isDoorOrWindow());
      assertTrue(catalogLight0.isTexturable());
      assertNull(catalogLight0.getGrade());
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertTrue(catalogLight0.isProportional());
      assertEquals(587.23944F, catalogLight0.getWidth(), 0.01F);
      assertNull(catalogLight0.getColor());
      assertFalse(catalogLight0.isModifiable());
      assertNull(catalogLight0.getCreationDate());
      assertEquals((-694.0F), catalogLight0.getElevation(), 0.01F);
      assertEquals("h&*+\"", catalogLight0.getId());
      assertNull(catalogLight0.getCurrency());
      assertEquals("h&*+\"", homeLight0.getCatalogId());
      assertTrue(homeLight0.isMovable());
      assertEquals("h&*+\"", homeLight0.getName());
      assertEquals("h&*+\"", homeLight0.getDescription());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals((-694.0F), homeLight0.getHeight(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals((-694.0F), homeLight0.getElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertTrue(homeLight0.isDeformable());
      assertTrue(homeLight0.isVisible());
      assertNull(homeLight0.getShininess());
      assertTrue(homeLight0.isResizable());
      assertTrue(homeLight0.isTexturable());
      assertFalse(homeLight0.isDoorOrWindow());
      assertEquals((-694.0F), homeLight0.getGroundElevation(), 0.01F);
      assertEquals(293.61972F, homeLight0.getX(), 0.01F);
      assertFalse(homeLight0.isBackFaceShown());
      assertEquals(587.23944F, homeLight0.getDepth(), 0.01F);
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertNull(homeLight0.getCurrency());
      assertFalse(homeLight0.isNameVisible());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertEquals(293.61972F, homeLight0.getY(), 0.01F);
      assertNull(homeLight0.getColor());
      assertEquals(587.23944F, homeLight0.getWidth(), 0.01F);
      assertFalse(homeLight0.isModelMirrored());
      assertEquals((short)100, bigDecimal1.shortValue());
      assertEquals((byte)100, bigDecimal1.byteValue());
      assertEquals(12, lightSourceArray0.length);
      assertNotSame(bigDecimal0, bigDecimal1);
      assertNotSame(homeLight0, homeLight1);
      assertNotSame(bigDecimal1, bigDecimal0);
      assertNotNull(bigDecimal1);
      
      catalogLight0.setCategory((FurnitureCategory) null);
      assertFalse(bigDecimal0.equals((Object)bigDecimal1));
      assertEquals((short)10, bigDecimal0.shortValue());
      assertEquals((byte)10, bigDecimal0.byteValue());
      assertEquals("h&*+\"", catalogLight0.getName());
      assertTrue(catalogLight0.isMovable());
      assertEquals(587.23944F, catalogLight0.getDepth(), 0.01F);
      assertNull(catalogLight0.getInformation());
      assertTrue(catalogLight0.isDeformable());
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertTrue(catalogLight0.isResizable());
      assertEquals("h&*+\"", catalogLight0.getCreator());
      assertEquals("h&*+\"", catalogLight0.getDescription());
      assertEquals((-694.0F), catalogLight0.getHeight(), 0.01F);
      assertFalse(catalogLight0.isBackFaceShown());
      assertFalse(catalogLight0.isDoorOrWindow());
      assertTrue(catalogLight0.isTexturable());
      assertNull(catalogLight0.getGrade());
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertTrue(catalogLight0.isProportional());
      assertEquals(587.23944F, catalogLight0.getWidth(), 0.01F);
      assertNull(catalogLight0.getColor());
      assertFalse(catalogLight0.isModifiable());
      assertNull(catalogLight0.getCreationDate());
      assertEquals((-694.0F), catalogLight0.getElevation(), 0.01F);
      assertEquals("h&*+\"", catalogLight0.getId());
      assertNull(catalogLight0.getCurrency());
      assertEquals(12, lightSourceArray0.length);
      assertNotSame(bigDecimal0, bigDecimal1);
      
      homeLight0.setDescription("com.eteks.sweethome3d.model.HomePieceOfFurniture$11");
      assertFalse(bigDecimal0.equals((Object)bigDecimal1));
      assertFalse(homeLight0.equals((Object)homeLight1));
      assertEquals((short)10, bigDecimal0.shortValue());
      assertEquals((byte)10, bigDecimal0.byteValue());
      assertEquals("h&*+\"", catalogLight0.getName());
      assertTrue(catalogLight0.isMovable());
      assertEquals(587.23944F, catalogLight0.getDepth(), 0.01F);
      assertNull(catalogLight0.getInformation());
      assertTrue(catalogLight0.isDeformable());
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertTrue(catalogLight0.isResizable());
      assertEquals("h&*+\"", catalogLight0.getCreator());
      assertEquals("h&*+\"", catalogLight0.getDescription());
      assertEquals((-694.0F), catalogLight0.getHeight(), 0.01F);
      assertFalse(catalogLight0.isBackFaceShown());
      assertFalse(catalogLight0.isDoorOrWindow());
      assertTrue(catalogLight0.isTexturable());
      assertNull(catalogLight0.getGrade());
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertTrue(catalogLight0.isProportional());
      assertEquals(587.23944F, catalogLight0.getWidth(), 0.01F);
      assertNull(catalogLight0.getColor());
      assertFalse(catalogLight0.isModifiable());
      assertNull(catalogLight0.getCreationDate());
      assertEquals((-694.0F), catalogLight0.getElevation(), 0.01F);
      assertEquals("h&*+\"", catalogLight0.getId());
      assertNull(catalogLight0.getCurrency());
      assertEquals("h&*+\"", homeLight0.getCatalogId());
      assertTrue(homeLight0.isMovable());
      assertEquals("h&*+\"", homeLight0.getName());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals((-694.0F), homeLight0.getHeight(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals((-694.0F), homeLight0.getElevation(), 0.01F);
      assertEquals("com.eteks.sweethome3d.model.HomePieceOfFurniture$11", homeLight0.getDescription());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertTrue(homeLight0.isDeformable());
      assertTrue(homeLight0.isVisible());
      assertNull(homeLight0.getShininess());
      assertTrue(homeLight0.isResizable());
      assertTrue(homeLight0.isTexturable());
      assertFalse(homeLight0.isDoorOrWindow());
      assertEquals((-694.0F), homeLight0.getGroundElevation(), 0.01F);
      assertEquals(293.61972F, homeLight0.getX(), 0.01F);
      assertFalse(homeLight0.isBackFaceShown());
      assertEquals(587.23944F, homeLight0.getDepth(), 0.01F);
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertNull(homeLight0.getCurrency());
      assertFalse(homeLight0.isNameVisible());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertEquals(293.61972F, homeLight0.getY(), 0.01F);
      assertNull(homeLight0.getColor());
      assertEquals(587.23944F, homeLight0.getWidth(), 0.01F);
      assertFalse(homeLight0.isModelMirrored());
      assertEquals(12, lightSourceArray0.length);
      assertNotSame(bigDecimal0, bigDecimal1);
      assertNotSame(homeLight0, homeLight1);
      
      homeLight0.setDescription("h&*+\"");
      assertFalse(bigDecimal0.equals((Object)bigDecimal1));
      assertFalse(homeLight0.equals((Object)homeLight1));
      assertEquals((short)10, bigDecimal0.shortValue());
      assertEquals((byte)10, bigDecimal0.byteValue());
      assertEquals("h&*+\"", catalogLight0.getName());
      assertTrue(catalogLight0.isMovable());
      assertEquals(587.23944F, catalogLight0.getDepth(), 0.01F);
      assertNull(catalogLight0.getInformation());
      assertTrue(catalogLight0.isDeformable());
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertTrue(catalogLight0.isResizable());
      assertEquals("h&*+\"", catalogLight0.getCreator());
      assertEquals("h&*+\"", catalogLight0.getDescription());
      assertEquals((-694.0F), catalogLight0.getHeight(), 0.01F);
      assertFalse(catalogLight0.isBackFaceShown());
      assertFalse(catalogLight0.isDoorOrWindow());
      assertTrue(catalogLight0.isTexturable());
      assertNull(catalogLight0.getGrade());
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertTrue(catalogLight0.isProportional());
      assertEquals(587.23944F, catalogLight0.getWidth(), 0.01F);
      assertNull(catalogLight0.getColor());
      assertFalse(catalogLight0.isModifiable());
      assertNull(catalogLight0.getCreationDate());
      assertEquals((-694.0F), catalogLight0.getElevation(), 0.01F);
      assertEquals("h&*+\"", catalogLight0.getId());
      assertNull(catalogLight0.getCurrency());
      assertEquals("h&*+\"", homeLight0.getCatalogId());
      assertTrue(homeLight0.isMovable());
      assertEquals("h&*+\"", homeLight0.getName());
      assertEquals("h&*+\"", homeLight0.getDescription());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals((-694.0F), homeLight0.getHeight(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals((-694.0F), homeLight0.getElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertTrue(homeLight0.isDeformable());
      assertTrue(homeLight0.isVisible());
      assertNull(homeLight0.getShininess());
      assertTrue(homeLight0.isResizable());
      assertTrue(homeLight0.isTexturable());
      assertFalse(homeLight0.isDoorOrWindow());
      assertEquals((-694.0F), homeLight0.getGroundElevation(), 0.01F);
      assertEquals(293.61972F, homeLight0.getX(), 0.01F);
      assertFalse(homeLight0.isBackFaceShown());
      assertEquals(587.23944F, homeLight0.getDepth(), 0.01F);
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertNull(homeLight0.getCurrency());
      assertFalse(homeLight0.isNameVisible());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertEquals(293.61972F, homeLight0.getY(), 0.01F);
      assertNull(homeLight0.getColor());
      assertEquals(587.23944F, homeLight0.getWidth(), 0.01F);
      assertFalse(homeLight0.isModelMirrored());
      assertEquals(12, lightSourceArray0.length);
      assertNotSame(bigDecimal0, bigDecimal1);
      assertNotSame(homeLight0, homeLight1);
      
      // Undeclared exception!
      try { 
        HomePieceOfFurniture.SortableProperty.valueOf("h&*+\"");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant com.eteks.sweethome3d.model.HomePieceOfFurniture.SortableProperty.h&*+\"
         //
         verifyException("java.lang.Enum", e);
      }
  }

  @Test(timeout = 4000)
  public void test255()  throws Throwable  {
      LightSource[] lightSourceArray0 = new LightSource[2];
      LightSource lightSource0 = new LightSource((-815.0011F), 0.0F, 0.0F, (-1541));
      assertEquals(0.0F, lightSource0.getZ(), 0.01F);
      assertEquals(0.0F, lightSource0.getY(), 0.01F);
      assertEquals((-815.0011F), lightSource0.getX(), 0.01F);
      assertNull(lightSource0.getDiameter());
      assertEquals((-1541), lightSource0.getColor());
      assertNotNull(lightSource0);
      
      lightSourceArray0[0] = lightSource0;
      LightSource lightSource1 = new LightSource((-1541), (-2278.261F), (-727.8896F), 8192);
      assertFalse(lightSource1.equals((Object)lightSource0));
      assertEquals(8192, lightSource1.getColor());
      assertEquals((-2278.261F), lightSource1.getY(), 0.01F);
      assertEquals((-1541.0F), lightSource1.getX(), 0.01F);
      assertNull(lightSource1.getDiameter());
      assertEquals((-727.8896F), lightSource1.getZ(), 0.01F);
      assertNotNull(lightSource1);
      
      BigDecimal bigDecimal0 = BigDecimal.ZERO;
      assertEquals((byte)0, bigDecimal0.byteValue());
      assertEquals((short)0, bigDecimal0.shortValue());
      assertNotNull(bigDecimal0);
      
      CatalogLight catalogLight0 = new CatalogLight("/", "PRICE_VALUE_ADDED_TAX_INCLUDED", "PRICE_VALUE_ADDED_TAX_INCLUDED", (Content) null, (Content) null, 0.3926991F, 92.121765F, 233.10785F, (-727.8896F), true, lightSourceArray0, (float[][]) null, "{L", true, bigDecimal0, bigDecimal0);
      assertEquals((byte)0, bigDecimal0.byteValue());
      assertEquals((short)0, bigDecimal0.shortValue());
      assertEquals("PRICE_VALUE_ADDED_TAX_INCLUDED", catalogLight0.getName());
      assertEquals("/", catalogLight0.getId());
      assertTrue(catalogLight0.isMovable());
      assertEquals("PRICE_VALUE_ADDED_TAX_INCLUDED", catalogLight0.getDescription());
      assertNull(catalogLight0.getCurrency());
      assertTrue(catalogLight0.isProportional());
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertNull(catalogLight0.getGrade());
      assertTrue(catalogLight0.isTexturable());
      assertEquals(0.3926991F, catalogLight0.getWidth(), 0.01F);
      assertFalse(catalogLight0.isBackFaceShown());
      assertFalse(catalogLight0.isDoorOrWindow());
      assertTrue(catalogLight0.isDeformable());
      assertNull(catalogLight0.getInformation());
      assertNull(catalogLight0.getColor());
      assertFalse(catalogLight0.isModifiable());
      assertEquals(92.121765F, catalogLight0.getDepth(), 0.01F);
      assertEquals(233.10785F, catalogLight0.getHeight(), 0.01F);
      assertEquals("{L", catalogLight0.getCreator());
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertTrue(catalogLight0.isResizable());
      assertNull(catalogLight0.getCreationDate());
      assertEquals((-727.8896F), catalogLight0.getElevation(), 0.01F);
      assertEquals(2, lightSourceArray0.length);
      assertNotNull(catalogLight0);
      
      HomeLight homeLight0 = new HomeLight(catalogLight0);
      assertEquals((byte)0, bigDecimal0.byteValue());
      assertEquals((short)0, bigDecimal0.shortValue());
      assertEquals("PRICE_VALUE_ADDED_TAX_INCLUDED", catalogLight0.getName());
      assertEquals("/", catalogLight0.getId());
      assertTrue(catalogLight0.isMovable());
      assertEquals("PRICE_VALUE_ADDED_TAX_INCLUDED", catalogLight0.getDescription());
      assertNull(catalogLight0.getCurrency());
      assertTrue(catalogLight0.isProportional());
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertNull(catalogLight0.getGrade());
      assertTrue(catalogLight0.isTexturable());
      assertEquals(0.3926991F, catalogLight0.getWidth(), 0.01F);
      assertFalse(catalogLight0.isBackFaceShown());
      assertFalse(catalogLight0.isDoorOrWindow());
      assertTrue(catalogLight0.isDeformable());
      assertNull(catalogLight0.getInformation());
      assertNull(catalogLight0.getColor());
      assertFalse(catalogLight0.isModifiable());
      assertEquals(92.121765F, catalogLight0.getDepth(), 0.01F);
      assertEquals(233.10785F, catalogLight0.getHeight(), 0.01F);
      assertEquals("{L", catalogLight0.getCreator());
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertTrue(catalogLight0.isResizable());
      assertNull(catalogLight0.getCreationDate());
      assertEquals((-727.8896F), catalogLight0.getElevation(), 0.01F);
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals("PRICE_VALUE_ADDED_TAX_INCLUDED", homeLight0.getName());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertTrue(homeLight0.isMovable());
      assertEquals("PRICE_VALUE_ADDED_TAX_INCLUDED", homeLight0.getDescription());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertEquals("/", homeLight0.getCatalogId());
      assertEquals(0.19634955F, homeLight0.getX(), 0.01F);
      assertFalse(homeLight0.isModelMirrored());
      assertNull(homeLight0.getColor());
      assertEquals(233.10785F, homeLight0.getHeight(), 0.01F);
      assertEquals(92.121765F, homeLight0.getDepth(), 0.01F);
      assertFalse(homeLight0.isNameVisible());
      assertFalse(homeLight0.isBackFaceShown());
      assertEquals(0.3926991F, homeLight0.getWidth(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      assertNull(homeLight0.getCurrency());
      assertTrue(homeLight0.isTexturable());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertEquals((-727.8896F), homeLight0.getElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertNull(homeLight0.getShininess());
      assertTrue(homeLight0.isDeformable());
      assertEquals(46.060883F, homeLight0.getY(), 0.01F);
      assertEquals((-727.8896F), homeLight0.getGroundElevation(), 0.01F);
      assertTrue(homeLight0.isResizable());
      assertTrue(homeLight0.isVisible());
      assertEquals(2, lightSourceArray0.length);
      assertNotNull(homeLight0);
      
      FurnitureCategory furnitureCategory0 = catalogLight0.getCategory();
      assertEquals((byte)0, bigDecimal0.byteValue());
      assertEquals((short)0, bigDecimal0.shortValue());
      assertEquals("PRICE_VALUE_ADDED_TAX_INCLUDED", catalogLight0.getName());
      assertEquals("/", catalogLight0.getId());
      assertTrue(catalogLight0.isMovable());
      assertEquals("PRICE_VALUE_ADDED_TAX_INCLUDED", catalogLight0.getDescription());
      assertNull(catalogLight0.getCurrency());
      assertTrue(catalogLight0.isProportional());
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertNull(catalogLight0.getGrade());
      assertTrue(catalogLight0.isTexturable());
      assertEquals(0.3926991F, catalogLight0.getWidth(), 0.01F);
      assertFalse(catalogLight0.isBackFaceShown());
      assertFalse(catalogLight0.isDoorOrWindow());
      assertTrue(catalogLight0.isDeformable());
      assertNull(catalogLight0.getInformation());
      assertNull(catalogLight0.getColor());
      assertFalse(catalogLight0.isModifiable());
      assertEquals(92.121765F, catalogLight0.getDepth(), 0.01F);
      assertEquals(233.10785F, catalogLight0.getHeight(), 0.01F);
      assertEquals("{L", catalogLight0.getCreator());
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertTrue(catalogLight0.isResizable());
      assertNull(catalogLight0.getCreationDate());
      assertEquals((-727.8896F), catalogLight0.getElevation(), 0.01F);
      assertEquals(2, lightSourceArray0.length);
      assertNull(furnitureCategory0);
      
      catalogLight0.setCategory((FurnitureCategory) null);
      assertEquals((byte)0, bigDecimal0.byteValue());
      assertEquals((short)0, bigDecimal0.shortValue());
      assertEquals("PRICE_VALUE_ADDED_TAX_INCLUDED", catalogLight0.getName());
      assertEquals("/", catalogLight0.getId());
      assertTrue(catalogLight0.isMovable());
      assertEquals("PRICE_VALUE_ADDED_TAX_INCLUDED", catalogLight0.getDescription());
      assertNull(catalogLight0.getCurrency());
      assertTrue(catalogLight0.isProportional());
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertNull(catalogLight0.getGrade());
      assertTrue(catalogLight0.isTexturable());
      assertEquals(0.3926991F, catalogLight0.getWidth(), 0.01F);
      assertFalse(catalogLight0.isBackFaceShown());
      assertFalse(catalogLight0.isDoorOrWindow());
      assertTrue(catalogLight0.isDeformable());
      assertNull(catalogLight0.getInformation());
      assertNull(catalogLight0.getColor());
      assertFalse(catalogLight0.isModifiable());
      assertEquals(92.121765F, catalogLight0.getDepth(), 0.01F);
      assertEquals(233.10785F, catalogLight0.getHeight(), 0.01F);
      assertEquals("{L", catalogLight0.getCreator());
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertTrue(catalogLight0.isResizable());
      assertNull(catalogLight0.getCreationDate());
      assertEquals((-727.8896F), catalogLight0.getElevation(), 0.01F);
      assertEquals(2, lightSourceArray0.length);
      
      boolean boolean0 = homeLight0.isPointAt((-2278.261F), 92.121765F, 0.18478903F);
      assertEquals((byte)0, bigDecimal0.byteValue());
      assertEquals((short)0, bigDecimal0.shortValue());
      assertEquals("PRICE_VALUE_ADDED_TAX_INCLUDED", catalogLight0.getName());
      assertEquals("/", catalogLight0.getId());
      assertTrue(catalogLight0.isMovable());
      assertEquals("PRICE_VALUE_ADDED_TAX_INCLUDED", catalogLight0.getDescription());
      assertNull(catalogLight0.getCurrency());
      assertTrue(catalogLight0.isProportional());
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertNull(catalogLight0.getGrade());
      assertTrue(catalogLight0.isTexturable());
      assertEquals(0.3926991F, catalogLight0.getWidth(), 0.01F);
      assertFalse(catalogLight0.isBackFaceShown());
      assertFalse(catalogLight0.isDoorOrWindow());
      assertTrue(catalogLight0.isDeformable());
      assertNull(catalogLight0.getInformation());
      assertNull(catalogLight0.getColor());
      assertFalse(catalogLight0.isModifiable());
      assertEquals(92.121765F, catalogLight0.getDepth(), 0.01F);
      assertEquals(233.10785F, catalogLight0.getHeight(), 0.01F);
      assertEquals("{L", catalogLight0.getCreator());
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertTrue(catalogLight0.isResizable());
      assertNull(catalogLight0.getCreationDate());
      assertEquals((-727.8896F), catalogLight0.getElevation(), 0.01F);
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals("PRICE_VALUE_ADDED_TAX_INCLUDED", homeLight0.getName());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertTrue(homeLight0.isMovable());
      assertEquals("PRICE_VALUE_ADDED_TAX_INCLUDED", homeLight0.getDescription());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertEquals("/", homeLight0.getCatalogId());
      assertEquals(0.19634955F, homeLight0.getX(), 0.01F);
      assertFalse(homeLight0.isModelMirrored());
      assertNull(homeLight0.getColor());
      assertEquals(233.10785F, homeLight0.getHeight(), 0.01F);
      assertEquals(92.121765F, homeLight0.getDepth(), 0.01F);
      assertFalse(homeLight0.isNameVisible());
      assertFalse(homeLight0.isBackFaceShown());
      assertEquals(0.3926991F, homeLight0.getWidth(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      assertNull(homeLight0.getCurrency());
      assertTrue(homeLight0.isTexturable());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertEquals((-727.8896F), homeLight0.getElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertNull(homeLight0.getShininess());
      assertTrue(homeLight0.isDeformable());
      assertEquals(46.060883F, homeLight0.getY(), 0.01F);
      assertEquals((-727.8896F), homeLight0.getGroundElevation(), 0.01F);
      assertTrue(homeLight0.isResizable());
      assertTrue(homeLight0.isVisible());
      assertEquals(2, lightSourceArray0.length);
      assertFalse(boolean0);
      
      homeLight0.setName("PRICE_VALUE_ADDED_TAX_INCLUDED");
      assertEquals((byte)0, bigDecimal0.byteValue());
      assertEquals((short)0, bigDecimal0.shortValue());
      assertEquals("PRICE_VALUE_ADDED_TAX_INCLUDED", catalogLight0.getName());
      assertEquals("/", catalogLight0.getId());
      assertTrue(catalogLight0.isMovable());
      assertEquals("PRICE_VALUE_ADDED_TAX_INCLUDED", catalogLight0.getDescription());
      assertNull(catalogLight0.getCurrency());
      assertTrue(catalogLight0.isProportional());
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertNull(catalogLight0.getGrade());
      assertTrue(catalogLight0.isTexturable());
      assertEquals(0.3926991F, catalogLight0.getWidth(), 0.01F);
      assertFalse(catalogLight0.isBackFaceShown());
      assertFalse(catalogLight0.isDoorOrWindow());
      assertTrue(catalogLight0.isDeformable());
      assertNull(catalogLight0.getInformation());
      assertNull(catalogLight0.getColor());
      assertFalse(catalogLight0.isModifiable());
      assertEquals(92.121765F, catalogLight0.getDepth(), 0.01F);
      assertEquals(233.10785F, catalogLight0.getHeight(), 0.01F);
      assertEquals("{L", catalogLight0.getCreator());
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertTrue(catalogLight0.isResizable());
      assertNull(catalogLight0.getCreationDate());
      assertEquals((-727.8896F), catalogLight0.getElevation(), 0.01F);
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals("PRICE_VALUE_ADDED_TAX_INCLUDED", homeLight0.getName());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertTrue(homeLight0.isMovable());
      assertEquals("PRICE_VALUE_ADDED_TAX_INCLUDED", homeLight0.getDescription());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertEquals("/", homeLight0.getCatalogId());
      assertEquals(0.19634955F, homeLight0.getX(), 0.01F);
      assertFalse(homeLight0.isModelMirrored());
      assertNull(homeLight0.getColor());
      assertEquals(233.10785F, homeLight0.getHeight(), 0.01F);
      assertEquals(92.121765F, homeLight0.getDepth(), 0.01F);
      assertFalse(homeLight0.isNameVisible());
      assertFalse(homeLight0.isBackFaceShown());
      assertEquals(0.3926991F, homeLight0.getWidth(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      assertNull(homeLight0.getCurrency());
      assertTrue(homeLight0.isTexturable());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertEquals((-727.8896F), homeLight0.getElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertNull(homeLight0.getShininess());
      assertTrue(homeLight0.isDeformable());
      assertEquals(46.060883F, homeLight0.getY(), 0.01F);
      assertEquals((-727.8896F), homeLight0.getGroundElevation(), 0.01F);
      assertTrue(homeLight0.isResizable());
      assertTrue(homeLight0.isVisible());
      assertEquals(2, lightSourceArray0.length);
      
      homeLight0.setModelMirrored(true);
      assertEquals((byte)0, bigDecimal0.byteValue());
      assertEquals((short)0, bigDecimal0.shortValue());
      assertEquals("PRICE_VALUE_ADDED_TAX_INCLUDED", catalogLight0.getName());
      assertEquals("/", catalogLight0.getId());
      assertTrue(catalogLight0.isMovable());
      assertEquals("PRICE_VALUE_ADDED_TAX_INCLUDED", catalogLight0.getDescription());
      assertNull(catalogLight0.getCurrency());
      assertTrue(catalogLight0.isProportional());
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertNull(catalogLight0.getGrade());
      assertTrue(catalogLight0.isTexturable());
      assertEquals(0.3926991F, catalogLight0.getWidth(), 0.01F);
      assertFalse(catalogLight0.isBackFaceShown());
      assertFalse(catalogLight0.isDoorOrWindow());
      assertTrue(catalogLight0.isDeformable());
      assertNull(catalogLight0.getInformation());
      assertNull(catalogLight0.getColor());
      assertFalse(catalogLight0.isModifiable());
      assertEquals(92.121765F, catalogLight0.getDepth(), 0.01F);
      assertEquals(233.10785F, catalogLight0.getHeight(), 0.01F);
      assertEquals("{L", catalogLight0.getCreator());
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertTrue(catalogLight0.isResizable());
      assertNull(catalogLight0.getCreationDate());
      assertEquals((-727.8896F), catalogLight0.getElevation(), 0.01F);
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals("PRICE_VALUE_ADDED_TAX_INCLUDED", homeLight0.getName());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertTrue(homeLight0.isMovable());
      assertEquals("PRICE_VALUE_ADDED_TAX_INCLUDED", homeLight0.getDescription());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertEquals("/", homeLight0.getCatalogId());
      assertEquals(0.19634955F, homeLight0.getX(), 0.01F);
      assertNull(homeLight0.getColor());
      assertEquals(233.10785F, homeLight0.getHeight(), 0.01F);
      assertEquals(92.121765F, homeLight0.getDepth(), 0.01F);
      assertTrue(homeLight0.isModelMirrored());
      assertFalse(homeLight0.isNameVisible());
      assertFalse(homeLight0.isBackFaceShown());
      assertEquals(0.3926991F, homeLight0.getWidth(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      assertNull(homeLight0.getCurrency());
      assertTrue(homeLight0.isTexturable());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertEquals((-727.8896F), homeLight0.getElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertNull(homeLight0.getShininess());
      assertTrue(homeLight0.isDeformable());
      assertEquals(46.060883F, homeLight0.getY(), 0.01F);
      assertEquals((-727.8896F), homeLight0.getGroundElevation(), 0.01F);
      assertTrue(homeLight0.isResizable());
      assertTrue(homeLight0.isVisible());
      assertEquals(2, lightSourceArray0.length);
      
      homeLight0.setModelMirrored(true);
      assertEquals((byte)0, bigDecimal0.byteValue());
      assertEquals((short)0, bigDecimal0.shortValue());
      assertEquals("PRICE_VALUE_ADDED_TAX_INCLUDED", catalogLight0.getName());
      assertEquals("/", catalogLight0.getId());
      assertTrue(catalogLight0.isMovable());
      assertEquals("PRICE_VALUE_ADDED_TAX_INCLUDED", catalogLight0.getDescription());
      assertNull(catalogLight0.getCurrency());
      assertTrue(catalogLight0.isProportional());
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertNull(catalogLight0.getGrade());
      assertTrue(catalogLight0.isTexturable());
      assertEquals(0.3926991F, catalogLight0.getWidth(), 0.01F);
      assertFalse(catalogLight0.isBackFaceShown());
      assertFalse(catalogLight0.isDoorOrWindow());
      assertTrue(catalogLight0.isDeformable());
      assertNull(catalogLight0.getInformation());
      assertNull(catalogLight0.getColor());
      assertFalse(catalogLight0.isModifiable());
      assertEquals(92.121765F, catalogLight0.getDepth(), 0.01F);
      assertEquals(233.10785F, catalogLight0.getHeight(), 0.01F);
      assertEquals("{L", catalogLight0.getCreator());
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertTrue(catalogLight0.isResizable());
      assertNull(catalogLight0.getCreationDate());
      assertEquals((-727.8896F), catalogLight0.getElevation(), 0.01F);
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals("PRICE_VALUE_ADDED_TAX_INCLUDED", homeLight0.getName());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertTrue(homeLight0.isMovable());
      assertEquals("PRICE_VALUE_ADDED_TAX_INCLUDED", homeLight0.getDescription());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertEquals("/", homeLight0.getCatalogId());
      assertEquals(0.19634955F, homeLight0.getX(), 0.01F);
      assertNull(homeLight0.getColor());
      assertEquals(233.10785F, homeLight0.getHeight(), 0.01F);
      assertEquals(92.121765F, homeLight0.getDepth(), 0.01F);
      assertTrue(homeLight0.isModelMirrored());
      assertFalse(homeLight0.isNameVisible());
      assertFalse(homeLight0.isBackFaceShown());
      assertEquals(0.3926991F, homeLight0.getWidth(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      assertNull(homeLight0.getCurrency());
      assertTrue(homeLight0.isTexturable());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertEquals((-727.8896F), homeLight0.getElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertNull(homeLight0.getShininess());
      assertTrue(homeLight0.isDeformable());
      assertEquals(46.060883F, homeLight0.getY(), 0.01F);
      assertEquals((-727.8896F), homeLight0.getGroundElevation(), 0.01F);
      assertTrue(homeLight0.isResizable());
      assertTrue(homeLight0.isVisible());
      assertEquals(2, lightSourceArray0.length);
      
      boolean boolean1 = homeLight0.isBottomLeftPointAt(0.3926991F, 92.121765F, (-815.0011F));
      assertTrue(boolean1 == boolean0);
      assertEquals((byte)0, bigDecimal0.byteValue());
      assertEquals((short)0, bigDecimal0.shortValue());
      assertEquals("PRICE_VALUE_ADDED_TAX_INCLUDED", catalogLight0.getName());
      assertEquals("/", catalogLight0.getId());
      assertTrue(catalogLight0.isMovable());
      assertEquals("PRICE_VALUE_ADDED_TAX_INCLUDED", catalogLight0.getDescription());
      assertNull(catalogLight0.getCurrency());
      assertTrue(catalogLight0.isProportional());
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertNull(catalogLight0.getGrade());
      assertTrue(catalogLight0.isTexturable());
      assertEquals(0.3926991F, catalogLight0.getWidth(), 0.01F);
      assertFalse(catalogLight0.isBackFaceShown());
      assertFalse(catalogLight0.isDoorOrWindow());
      assertTrue(catalogLight0.isDeformable());
      assertNull(catalogLight0.getInformation());
      assertNull(catalogLight0.getColor());
      assertFalse(catalogLight0.isModifiable());
      assertEquals(92.121765F, catalogLight0.getDepth(), 0.01F);
      assertEquals(233.10785F, catalogLight0.getHeight(), 0.01F);
      assertEquals("{L", catalogLight0.getCreator());
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertTrue(catalogLight0.isResizable());
      assertNull(catalogLight0.getCreationDate());
      assertEquals((-727.8896F), catalogLight0.getElevation(), 0.01F);
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals("PRICE_VALUE_ADDED_TAX_INCLUDED", homeLight0.getName());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertTrue(homeLight0.isMovable());
      assertEquals("PRICE_VALUE_ADDED_TAX_INCLUDED", homeLight0.getDescription());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertEquals("/", homeLight0.getCatalogId());
      assertEquals(0.19634955F, homeLight0.getX(), 0.01F);
      assertNull(homeLight0.getColor());
      assertEquals(233.10785F, homeLight0.getHeight(), 0.01F);
      assertEquals(92.121765F, homeLight0.getDepth(), 0.01F);
      assertTrue(homeLight0.isModelMirrored());
      assertFalse(homeLight0.isNameVisible());
      assertFalse(homeLight0.isBackFaceShown());
      assertEquals(0.3926991F, homeLight0.getWidth(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      assertNull(homeLight0.getCurrency());
      assertTrue(homeLight0.isTexturable());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertEquals((-727.8896F), homeLight0.getElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertNull(homeLight0.getShininess());
      assertTrue(homeLight0.isDeformable());
      assertEquals(46.060883F, homeLight0.getY(), 0.01F);
      assertEquals((-727.8896F), homeLight0.getGroundElevation(), 0.01F);
      assertTrue(homeLight0.isResizable());
      assertTrue(homeLight0.isVisible());
      assertEquals(2, lightSourceArray0.length);
      assertFalse(boolean1);
      
      Integer integer0 = new Integer(8192);
      assertNotNull(integer0);
      assertEquals(8192, (int)integer0);
      
      Integer integer1 = new Integer(3037);
      assertFalse(integer1.equals((Object)integer0));
      assertNotNull(integer1);
      assertEquals(3037, (int)integer1);
      
      Integer integer2 = new Integer(46);
      assertFalse(integer2.equals((Object)integer1));
      assertFalse(integer2.equals((Object)integer0));
      assertNotNull(integer2);
      assertEquals(46, (int)integer2);
      
      homeLight0.setColor(integer2);
      assertFalse(integer2.equals((Object)integer1));
      assertFalse(integer2.equals((Object)integer0));
      assertEquals((byte)0, bigDecimal0.byteValue());
      assertEquals((short)0, bigDecimal0.shortValue());
      assertEquals("PRICE_VALUE_ADDED_TAX_INCLUDED", catalogLight0.getName());
      assertEquals("/", catalogLight0.getId());
      assertTrue(catalogLight0.isMovable());
      assertEquals("PRICE_VALUE_ADDED_TAX_INCLUDED", catalogLight0.getDescription());
      assertNull(catalogLight0.getCurrency());
      assertTrue(catalogLight0.isProportional());
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertNull(catalogLight0.getGrade());
      assertTrue(catalogLight0.isTexturable());
      assertEquals(0.3926991F, catalogLight0.getWidth(), 0.01F);
      assertFalse(catalogLight0.isBackFaceShown());
      assertFalse(catalogLight0.isDoorOrWindow());
      assertTrue(catalogLight0.isDeformable());
      assertNull(catalogLight0.getInformation());
      assertNull(catalogLight0.getColor());
      assertFalse(catalogLight0.isModifiable());
      assertEquals(92.121765F, catalogLight0.getDepth(), 0.01F);
      assertEquals(233.10785F, catalogLight0.getHeight(), 0.01F);
      assertEquals("{L", catalogLight0.getCreator());
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertTrue(catalogLight0.isResizable());
      assertNull(catalogLight0.getCreationDate());
      assertEquals((-727.8896F), catalogLight0.getElevation(), 0.01F);
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals("PRICE_VALUE_ADDED_TAX_INCLUDED", homeLight0.getName());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertTrue(homeLight0.isMovable());
      assertEquals("PRICE_VALUE_ADDED_TAX_INCLUDED", homeLight0.getDescription());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertEquals("/", homeLight0.getCatalogId());
      assertEquals(0.19634955F, homeLight0.getX(), 0.01F);
      assertEquals(233.10785F, homeLight0.getHeight(), 0.01F);
      assertEquals(92.121765F, homeLight0.getDepth(), 0.01F);
      assertTrue(homeLight0.isModelMirrored());
      assertFalse(homeLight0.isNameVisible());
      assertFalse(homeLight0.isBackFaceShown());
      assertEquals(0.3926991F, homeLight0.getWidth(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      assertNull(homeLight0.getCurrency());
      assertTrue(homeLight0.isTexturable());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertEquals((-727.8896F), homeLight0.getElevation(), 0.01F);
      assertEquals(46, (int)homeLight0.getColor());
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertNull(homeLight0.getShininess());
      assertTrue(homeLight0.isDeformable());
      assertEquals(46.060883F, homeLight0.getY(), 0.01F);
      assertEquals((-727.8896F), homeLight0.getGroundElevation(), 0.01F);
      assertTrue(homeLight0.isResizable());
      assertTrue(homeLight0.isVisible());
      assertEquals(2, lightSourceArray0.length);
      
      Content content0 = homeLight0.getIcon();
      assertEquals((byte)0, bigDecimal0.byteValue());
      assertEquals((short)0, bigDecimal0.shortValue());
      assertEquals("PRICE_VALUE_ADDED_TAX_INCLUDED", catalogLight0.getName());
      assertEquals("/", catalogLight0.getId());
      assertTrue(catalogLight0.isMovable());
      assertEquals("PRICE_VALUE_ADDED_TAX_INCLUDED", catalogLight0.getDescription());
      assertNull(catalogLight0.getCurrency());
      assertTrue(catalogLight0.isProportional());
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertNull(catalogLight0.getGrade());
      assertTrue(catalogLight0.isTexturable());
      assertEquals(0.3926991F, catalogLight0.getWidth(), 0.01F);
      assertFalse(catalogLight0.isBackFaceShown());
      assertFalse(catalogLight0.isDoorOrWindow());
      assertTrue(catalogLight0.isDeformable());
      assertNull(catalogLight0.getInformation());
      assertNull(catalogLight0.getColor());
      assertFalse(catalogLight0.isModifiable());
      assertEquals(92.121765F, catalogLight0.getDepth(), 0.01F);
      assertEquals(233.10785F, catalogLight0.getHeight(), 0.01F);
      assertEquals("{L", catalogLight0.getCreator());
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertTrue(catalogLight0.isResizable());
      assertNull(catalogLight0.getCreationDate());
      assertEquals((-727.8896F), catalogLight0.getElevation(), 0.01F);
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals("PRICE_VALUE_ADDED_TAX_INCLUDED", homeLight0.getName());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertTrue(homeLight0.isMovable());
      assertEquals("PRICE_VALUE_ADDED_TAX_INCLUDED", homeLight0.getDescription());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertEquals("/", homeLight0.getCatalogId());
      assertEquals(0.19634955F, homeLight0.getX(), 0.01F);
      assertEquals(233.10785F, homeLight0.getHeight(), 0.01F);
      assertEquals(92.121765F, homeLight0.getDepth(), 0.01F);
      assertTrue(homeLight0.isModelMirrored());
      assertFalse(homeLight0.isNameVisible());
      assertFalse(homeLight0.isBackFaceShown());
      assertEquals(0.3926991F, homeLight0.getWidth(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      assertNull(homeLight0.getCurrency());
      assertTrue(homeLight0.isTexturable());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertEquals((-727.8896F), homeLight0.getElevation(), 0.01F);
      assertEquals(46, (int)homeLight0.getColor());
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertNull(homeLight0.getShininess());
      assertTrue(homeLight0.isDeformable());
      assertEquals(46.060883F, homeLight0.getY(), 0.01F);
      assertEquals((-727.8896F), homeLight0.getGroundElevation(), 0.01F);
      assertTrue(homeLight0.isResizable());
      assertTrue(homeLight0.isVisible());
      assertEquals(2, lightSourceArray0.length);
      assertNull(content0);
  }

  @Test(timeout = 4000)
  public void test256()  throws Throwable  {
      String[] stringArray0 = new String[1];
      stringArray0[0] = ",p4l^R";
      Long long0 = new Long((-3470L));
      assertNotNull(long0);
      assertEquals((-3470L), (long)long0);
      
      Float float0 = new Float((-1036.37985185));
      assertNotNull(float0);
      assertEquals((-1036.3799F), (float)float0, 0.01F);
      
      URL uRL0 = MockURL.getHttpExample();
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals((-1), uRL0.getDefaultPort());
      assertNull(uRL0.getRef());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertNull(uRL0.getQuery());
      assertEquals((-1), uRL0.getPort());
      assertEquals("http", uRL0.getProtocol());
      assertNull(uRL0.getUserInfo());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertNotNull(uRL0);
      
      TemporaryURLContent temporaryURLContent0 = new TemporaryURLContent(uRL0);
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals((-1), uRL0.getDefaultPort());
      assertNull(uRL0.getRef());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertNull(uRL0.getQuery());
      assertEquals((-1), uRL0.getPort());
      assertEquals("http", uRL0.getProtocol());
      assertNull(uRL0.getUserInfo());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertFalse(temporaryURLContent0.isJAREntry());
      assertNotNull(temporaryURLContent0);
      
      ResourceURLContent resourceURLContent0 = new ResourceURLContent(uRL0, false);
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals((-1), uRL0.getDefaultPort());
      assertNull(uRL0.getRef());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertNull(uRL0.getQuery());
      assertEquals((-1), uRL0.getPort());
      assertEquals("http", uRL0.getProtocol());
      assertNull(uRL0.getUserInfo());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertFalse(resourceURLContent0.isMultiPartResource());
      assertFalse(resourceURLContent0.isJAREntry());
      assertNotNull(resourceURLContent0);
      
      LightSource[] lightSourceArray0 = new LightSource[4];
      LightSource lightSource0 = new LightSource(639.27F, 0.0F, 0.0F, (-2144537407));
      assertEquals(0.0F, lightSource0.getZ(), 0.01F);
      assertEquals((-2144537407), lightSource0.getColor());
      assertNull(lightSource0.getDiameter());
      assertEquals(639.27F, lightSource0.getX(), 0.01F);
      assertEquals(0.0F, lightSource0.getY(), 0.01F);
      assertNotNull(lightSource0);
      
      lightSourceArray0[0] = lightSource0;
      LightSource lightSource1 = new LightSource((-3470L), 233.10785F, (-3470L), 2144848698, float0);
      assertFalse(lightSource1.equals((Object)lightSource0));
      assertEquals((-3470.0F), lightSource1.getZ(), 0.01F);
      assertEquals((-3470.0F), lightSource1.getX(), 0.01F);
      assertEquals((-1036.3799F), lightSource1.getDiameter(), 0.01F);
      assertEquals(2144848698, lightSource1.getColor());
      assertEquals(233.10785F, lightSource1.getY(), 0.01F);
      assertNotNull(lightSource1);
      
      lightSourceArray0[1] = lightSource1;
      Float float1 = new Float((float) (-3470L));
      assertNotEquals((float)float1, (float)float0, 0.01F);
      assertNotNull(float1);
      assertEquals((-3470.0F), (float)float1, 0.01F);
      
      LightSource lightSource2 = new LightSource(0.0F, 0.0F, 0.0F, (-2145456776), float1);
      assertNotEquals((float)float1, (float)float0, 0.01F);
      assertFalse(lightSource2.equals((Object)lightSource1));
      assertFalse(lightSource2.equals((Object)lightSource0));
      assertEquals(0.0F, lightSource2.getZ(), 0.01F);
      assertEquals(0.0F, lightSource2.getY(), 0.01F);
      assertEquals(0.0F, lightSource2.getX(), 0.01F);
      assertEquals((-2145456776), lightSource2.getColor());
      assertEquals((-3470.0F), lightSource2.getDiameter(), 0.01F);
      assertNotNull(lightSource2);
      
      lightSourceArray0[2] = lightSource2;
      LightSource lightSource3 = new LightSource((-991.624F), 2.0F, 0.0F, (-2144537407));
      assertFalse(lightSource3.equals((Object)lightSource0));
      assertFalse(lightSource3.equals((Object)lightSource1));
      assertFalse(lightSource3.equals((Object)lightSource2));
      assertNull(lightSource3.getDiameter());
      assertEquals((-991.624F), lightSource3.getX(), 0.01F);
      assertEquals(2.0F, lightSource3.getY(), 0.01F);
      assertEquals(0.0F, lightSource3.getZ(), 0.01F);
      assertEquals((-2144537407), lightSource3.getColor());
      assertNotNull(lightSource3);
      
      lightSourceArray0[3] = lightSource3;
      float[][] floatArray0 = new float[3][7];
      float[] floatArray1 = new float[8];
      floatArray1[0] = 639.27F;
      floatArray1[1] = 2.0F;
      floatArray1[2] = 233.10785F;
      floatArray1[3] = 2.0F;
      floatArray1[4] = 0.0F;
      floatArray1[5] = (float) (-2144537407);
      floatArray1[6] = 92.299255F;
      floatArray1[7] = (float) (-2144537407);
      floatArray0[0] = floatArray1;
      float[] floatArray2 = new float[7];
      assertFalse(floatArray2.equals((Object)floatArray1));
      
      floatArray2[0] = (-991.624F);
      floatArray2[1] = (-1.0F);
      floatArray2[2] = (-2636.1487F);
      floatArray2[3] = 233.10785F;
      floatArray2[4] = (float) (-3470L);
      floatArray2[5] = 2.0F;
      floatArray2[6] = 92.299255F;
      floatArray0[1] = floatArray2;
      float[] floatArray3 = new float[3];
      assertFalse(floatArray3.equals((Object)floatArray2));
      assertFalse(floatArray3.equals((Object)floatArray1));
      
      floatArray3[0] = (float) 2144848698;
      floatArray3[1] = 0.0F;
      floatArray3[2] = (-2636.1487F);
      floatArray0[2] = floatArray3;
      BigDecimal bigDecimal0 = BigDecimal.TEN;
      assertEquals((byte)10, bigDecimal0.byteValue());
      assertEquals((short)10, bigDecimal0.shortValue());
      assertNotNull(bigDecimal0);
      
      CatalogLight catalogLight0 = new CatalogLight(",p4l^R", ",p4l^R", ",p4l^R", ",p4l^R", stringArray0, long0, float0, temporaryURLContent0, temporaryURLContent0, resourceURLContent0, 639.27F, (-3470L), 639.27F, (-991.624F), false, lightSourceArray0, ",p4l^R", floatArray0, "j]mY]<ca@3YdX/ d+$d", false, false, false, bigDecimal0, bigDecimal0, ",p4l^R");
      assertNotEquals((float)float0, (float)float1, 0.01F);
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals((-1), uRL0.getDefaultPort());
      assertNull(uRL0.getRef());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertNull(uRL0.getQuery());
      assertEquals((-1), uRL0.getPort());
      assertEquals("http", uRL0.getProtocol());
      assertNull(uRL0.getUserInfo());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertFalse(temporaryURLContent0.isJAREntry());
      assertFalse(resourceURLContent0.isMultiPartResource());
      assertFalse(resourceURLContent0.isJAREntry());
      assertEquals((byte)10, bigDecimal0.byteValue());
      assertEquals((short)10, bigDecimal0.shortValue());
      assertFalse(catalogLight0.isResizable());
      assertFalse(catalogLight0.isMovable());
      assertFalse(catalogLight0.isDeformable());
      assertEquals(",p4l^R", catalogLight0.getId());
      assertFalse(catalogLight0.isModifiable());
      assertEquals(",p4l^R", catalogLight0.getName());
      assertEquals(639.27F, catalogLight0.getWidth(), 0.01F);
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertEquals(",p4l^R", catalogLight0.getStaircaseCutOutShape());
      assertEquals(",p4l^R", catalogLight0.getInformation());
      assertEquals((-1036.3799F), catalogLight0.getGrade(), 0.01F);
      assertTrue(catalogLight0.isProportional());
      assertEquals((-3470.0F), catalogLight0.getDepth(), 0.01F);
      assertEquals((-991.624F), catalogLight0.getElevation(), 0.01F);
      assertEquals(",p4l^R", catalogLight0.getCurrency());
      assertEquals(639.27F, catalogLight0.getHeight(), 0.01F);
      assertEquals((-3470L), (long)catalogLight0.getCreationDate());
      assertFalse(catalogLight0.isTexturable());
      assertFalse(catalogLight0.isDoorOrWindow());
      assertNull(catalogLight0.getColor());
      assertEquals(",p4l^R", catalogLight0.getDescription());
      assertFalse(catalogLight0.isBackFaceShown());
      assertEquals(1, stringArray0.length);
      assertEquals(3, floatArray0.length);
      assertEquals(4, lightSourceArray0.length);
      assertNotNull(catalogLight0);
      
      HomeLight homeLight0 = new HomeLight(catalogLight0);
      assertNotEquals((float)float0, (float)float1, 0.01F);
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals((-1), uRL0.getDefaultPort());
      assertNull(uRL0.getRef());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertNull(uRL0.getQuery());
      assertEquals((-1), uRL0.getPort());
      assertEquals("http", uRL0.getProtocol());
      assertNull(uRL0.getUserInfo());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertFalse(temporaryURLContent0.isJAREntry());
      assertFalse(resourceURLContent0.isMultiPartResource());
      assertFalse(resourceURLContent0.isJAREntry());
      assertEquals((byte)10, bigDecimal0.byteValue());
      assertEquals((short)10, bigDecimal0.shortValue());
      assertFalse(catalogLight0.isResizable());
      assertFalse(catalogLight0.isMovable());
      assertFalse(catalogLight0.isDeformable());
      assertEquals(",p4l^R", catalogLight0.getId());
      assertFalse(catalogLight0.isModifiable());
      assertEquals(",p4l^R", catalogLight0.getName());
      assertEquals(639.27F, catalogLight0.getWidth(), 0.01F);
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertEquals(",p4l^R", catalogLight0.getStaircaseCutOutShape());
      assertEquals(",p4l^R", catalogLight0.getInformation());
      assertEquals((-1036.3799F), catalogLight0.getGrade(), 0.01F);
      assertTrue(catalogLight0.isProportional());
      assertEquals((-3470.0F), catalogLight0.getDepth(), 0.01F);
      assertEquals((-991.624F), catalogLight0.getElevation(), 0.01F);
      assertEquals(",p4l^R", catalogLight0.getCurrency());
      assertEquals(639.27F, catalogLight0.getHeight(), 0.01F);
      assertEquals((-3470L), (long)catalogLight0.getCreationDate());
      assertFalse(catalogLight0.isTexturable());
      assertFalse(catalogLight0.isDoorOrWindow());
      assertNull(catalogLight0.getColor());
      assertEquals(",p4l^R", catalogLight0.getDescription());
      assertFalse(catalogLight0.isBackFaceShown());
      assertTrue(homeLight0.isVisible());
      assertFalse(homeLight0.isDeformable());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertNull(homeLight0.getColor());
      assertEquals((-1735.0F), homeLight0.getY(), 0.01F);
      assertEquals(319.635F, homeLight0.getX(), 0.01F);
      assertEquals((-991.624F), homeLight0.getElevation(), 0.01F);
      assertFalse(homeLight0.isModelMirrored());
      assertFalse(homeLight0.isBackFaceShown());
      assertFalse(homeLight0.isDoorOrWindow());
      assertEquals(",p4l^R", homeLight0.getDescription());
      assertEquals(",p4l^R", homeLight0.getStaircaseCutOutShape());
      assertEquals((-991.624F), homeLight0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertFalse(homeLight0.isNameVisible());
      assertEquals(639.27F, homeLight0.getWidth(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertFalse(homeLight0.isTexturable());
      assertEquals(639.27F, homeLight0.getHeight(), 0.01F);
      assertEquals((-3470.0F), homeLight0.getDepth(), 0.01F);
      assertEquals(",p4l^R", homeLight0.getName());
      assertFalse(homeLight0.isMovable());
      assertNull(homeLight0.getShininess());
      assertEquals(",p4l^R", homeLight0.getCurrency());
      assertFalse(homeLight0.isResizable());
      assertEquals(",p4l^R", homeLight0.getCatalogId());
      assertEquals(1, stringArray0.length);
      assertEquals(3, floatArray0.length);
      assertEquals(4, lightSourceArray0.length);
      assertNotNull(homeLight0);
      
      HomeLight homeLight1 = (HomeLight)homeLight0.clone();
      assertNotEquals((float)float0, (float)float1, 0.01F);
      assertFalse(homeLight1.equals((Object)homeLight0));
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals((-1), uRL0.getDefaultPort());
      assertNull(uRL0.getRef());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertNull(uRL0.getQuery());
      assertEquals((-1), uRL0.getPort());
      assertEquals("http", uRL0.getProtocol());
      assertNull(uRL0.getUserInfo());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertFalse(temporaryURLContent0.isJAREntry());
      assertFalse(resourceURLContent0.isMultiPartResource());
      assertFalse(resourceURLContent0.isJAREntry());
      assertEquals((byte)10, bigDecimal0.byteValue());
      assertEquals((short)10, bigDecimal0.shortValue());
      assertFalse(catalogLight0.isResizable());
      assertFalse(catalogLight0.isMovable());
      assertFalse(catalogLight0.isDeformable());
      assertEquals(",p4l^R", catalogLight0.getId());
      assertFalse(catalogLight0.isModifiable());
      assertEquals(",p4l^R", catalogLight0.getName());
      assertEquals(639.27F, catalogLight0.getWidth(), 0.01F);
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertEquals(",p4l^R", catalogLight0.getStaircaseCutOutShape());
      assertEquals(",p4l^R", catalogLight0.getInformation());
      assertEquals((-1036.3799F), catalogLight0.getGrade(), 0.01F);
      assertTrue(catalogLight0.isProportional());
      assertEquals((-3470.0F), catalogLight0.getDepth(), 0.01F);
      assertEquals((-991.624F), catalogLight0.getElevation(), 0.01F);
      assertEquals(",p4l^R", catalogLight0.getCurrency());
      assertEquals(639.27F, catalogLight0.getHeight(), 0.01F);
      assertEquals((-3470L), (long)catalogLight0.getCreationDate());
      assertFalse(catalogLight0.isTexturable());
      assertFalse(catalogLight0.isDoorOrWindow());
      assertNull(catalogLight0.getColor());
      assertEquals(",p4l^R", catalogLight0.getDescription());
      assertFalse(catalogLight0.isBackFaceShown());
      assertTrue(homeLight0.isVisible());
      assertFalse(homeLight0.isDeformable());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertNull(homeLight0.getColor());
      assertEquals((-1735.0F), homeLight0.getY(), 0.01F);
      assertEquals(319.635F, homeLight0.getX(), 0.01F);
      assertEquals((-991.624F), homeLight0.getElevation(), 0.01F);
      assertFalse(homeLight0.isModelMirrored());
      assertFalse(homeLight0.isBackFaceShown());
      assertFalse(homeLight0.isDoorOrWindow());
      assertEquals(",p4l^R", homeLight0.getDescription());
      assertEquals(",p4l^R", homeLight0.getStaircaseCutOutShape());
      assertEquals((-991.624F), homeLight0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertFalse(homeLight0.isNameVisible());
      assertEquals(639.27F, homeLight0.getWidth(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertFalse(homeLight0.isTexturable());
      assertEquals(639.27F, homeLight0.getHeight(), 0.01F);
      assertEquals((-3470.0F), homeLight0.getDepth(), 0.01F);
      assertEquals(",p4l^R", homeLight0.getName());
      assertFalse(homeLight0.isMovable());
      assertNull(homeLight0.getShininess());
      assertEquals(",p4l^R", homeLight0.getCurrency());
      assertFalse(homeLight0.isResizable());
      assertEquals(",p4l^R", homeLight0.getCatalogId());
      assertEquals((-991.624F), homeLight1.getGroundElevation(), 0.01F);
      assertFalse(homeLight1.isDeformable());
      assertFalse(homeLight1.isModelMirrored());
      assertFalse(homeLight1.isBackFaceShown());
      assertFalse(homeLight1.isNameVisible());
      assertFalse(homeLight1.isMovable());
      assertEquals((-991.624F), homeLight1.getElevation(), 0.01F);
      assertEquals(",p4l^R", homeLight1.getDescription());
      assertEquals(639.27F, homeLight1.getWidth(), 0.01F);
      assertNull(homeLight1.getColor());
      assertEquals(",p4l^R", homeLight1.getName());
      assertEquals(0.0F, homeLight1.getNameYOffset(), 0.01F);
      assertEquals(0.5F, homeLight1.getPower(), 0.01F);
      assertEquals((-3470.0F), homeLight1.getDepth(), 0.01F);
      assertEquals(0.0F, homeLight1.getNameAngle(), 0.01F);
      assertEquals(",p4l^R", homeLight1.getCatalogId());
      assertEquals(319.635F, homeLight1.getX(), 0.01F);
      assertEquals(0.0F, homeLight1.getAngle(), 0.01F);
      assertEquals((-1735.0F), homeLight1.getY(), 0.01F);
      assertFalse(homeLight1.isTexturable());
      assertEquals(639.27F, homeLight1.getHeight(), 0.01F);
      assertFalse(homeLight1.isResizable());
      assertEquals(",p4l^R", homeLight1.getCurrency());
      assertEquals(",p4l^R", homeLight1.getStaircaseCutOutShape());
      assertNull(homeLight1.getShininess());
      assertTrue(homeLight1.isVisible());
      assertFalse(homeLight1.isDoorOrWindow());
      assertEquals(0.0F, homeLight1.getNameXOffset(), 0.01F);
      assertEquals(1, stringArray0.length);
      assertEquals(3, floatArray0.length);
      assertEquals(4, lightSourceArray0.length);
      assertNotSame(homeLight0, homeLight1);
      assertNotSame(homeLight1, homeLight0);
      assertNotNull(homeLight1);
      
      BigDecimal bigDecimal1 = homeLight1.getPrice();
      assertNotEquals((float)float0, (float)float1, 0.01F);
      assertFalse(homeLight0.equals((Object)homeLight1));
      assertFalse(homeLight1.equals((Object)homeLight0));
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals((-1), uRL0.getDefaultPort());
      assertNull(uRL0.getRef());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertNull(uRL0.getQuery());
      assertEquals((-1), uRL0.getPort());
      assertEquals("http", uRL0.getProtocol());
      assertNull(uRL0.getUserInfo());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertFalse(temporaryURLContent0.isJAREntry());
      assertFalse(resourceURLContent0.isMultiPartResource());
      assertFalse(resourceURLContent0.isJAREntry());
      assertEquals((byte)10, bigDecimal0.byteValue());
      assertEquals((short)10, bigDecimal0.shortValue());
      assertFalse(catalogLight0.isResizable());
      assertFalse(catalogLight0.isMovable());
      assertFalse(catalogLight0.isDeformable());
      assertEquals(",p4l^R", catalogLight0.getId());
      assertFalse(catalogLight0.isModifiable());
      assertEquals(",p4l^R", catalogLight0.getName());
      assertEquals(639.27F, catalogLight0.getWidth(), 0.01F);
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertEquals(",p4l^R", catalogLight0.getStaircaseCutOutShape());
      assertEquals(",p4l^R", catalogLight0.getInformation());
      assertEquals((-1036.3799F), catalogLight0.getGrade(), 0.01F);
      assertTrue(catalogLight0.isProportional());
      assertEquals((-3470.0F), catalogLight0.getDepth(), 0.01F);
      assertEquals((-991.624F), catalogLight0.getElevation(), 0.01F);
      assertEquals(",p4l^R", catalogLight0.getCurrency());
      assertEquals(639.27F, catalogLight0.getHeight(), 0.01F);
      assertEquals((-3470L), (long)catalogLight0.getCreationDate());
      assertFalse(catalogLight0.isTexturable());
      assertFalse(catalogLight0.isDoorOrWindow());
      assertNull(catalogLight0.getColor());
      assertEquals(",p4l^R", catalogLight0.getDescription());
      assertFalse(catalogLight0.isBackFaceShown());
      assertTrue(homeLight0.isVisible());
      assertFalse(homeLight0.isDeformable());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertNull(homeLight0.getColor());
      assertEquals((-1735.0F), homeLight0.getY(), 0.01F);
      assertEquals(319.635F, homeLight0.getX(), 0.01F);
      assertEquals((-991.624F), homeLight0.getElevation(), 0.01F);
      assertFalse(homeLight0.isModelMirrored());
      assertFalse(homeLight0.isBackFaceShown());
      assertFalse(homeLight0.isDoorOrWindow());
      assertEquals(",p4l^R", homeLight0.getDescription());
      assertEquals(",p4l^R", homeLight0.getStaircaseCutOutShape());
      assertEquals((-991.624F), homeLight0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertFalse(homeLight0.isNameVisible());
      assertEquals(639.27F, homeLight0.getWidth(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertFalse(homeLight0.isTexturable());
      assertEquals(639.27F, homeLight0.getHeight(), 0.01F);
      assertEquals((-3470.0F), homeLight0.getDepth(), 0.01F);
      assertEquals(",p4l^R", homeLight0.getName());
      assertFalse(homeLight0.isMovable());
      assertNull(homeLight0.getShininess());
      assertEquals(",p4l^R", homeLight0.getCurrency());
      assertFalse(homeLight0.isResizable());
      assertEquals(",p4l^R", homeLight0.getCatalogId());
      assertEquals((-991.624F), homeLight1.getGroundElevation(), 0.01F);
      assertFalse(homeLight1.isDeformable());
      assertFalse(homeLight1.isModelMirrored());
      assertFalse(homeLight1.isBackFaceShown());
      assertFalse(homeLight1.isNameVisible());
      assertFalse(homeLight1.isMovable());
      assertEquals((-991.624F), homeLight1.getElevation(), 0.01F);
      assertEquals(",p4l^R", homeLight1.getDescription());
      assertEquals(639.27F, homeLight1.getWidth(), 0.01F);
      assertNull(homeLight1.getColor());
      assertEquals(",p4l^R", homeLight1.getName());
      assertEquals(0.0F, homeLight1.getNameYOffset(), 0.01F);
      assertEquals(0.5F, homeLight1.getPower(), 0.01F);
      assertEquals((-3470.0F), homeLight1.getDepth(), 0.01F);
      assertEquals(0.0F, homeLight1.getNameAngle(), 0.01F);
      assertEquals(",p4l^R", homeLight1.getCatalogId());
      assertEquals(319.635F, homeLight1.getX(), 0.01F);
      assertEquals(0.0F, homeLight1.getAngle(), 0.01F);
      assertEquals((-1735.0F), homeLight1.getY(), 0.01F);
      assertFalse(homeLight1.isTexturable());
      assertEquals(639.27F, homeLight1.getHeight(), 0.01F);
      assertFalse(homeLight1.isResizable());
      assertEquals(",p4l^R", homeLight1.getCurrency());
      assertEquals(",p4l^R", homeLight1.getStaircaseCutOutShape());
      assertNull(homeLight1.getShininess());
      assertTrue(homeLight1.isVisible());
      assertFalse(homeLight1.isDoorOrWindow());
      assertEquals(0.0F, homeLight1.getNameXOffset(), 0.01F);
      assertEquals((byte)10, bigDecimal1.byteValue());
      assertEquals((short)10, bigDecimal1.shortValue());
      assertEquals(1, stringArray0.length);
      assertEquals(3, floatArray0.length);
      assertEquals(4, lightSourceArray0.length);
      assertSame(bigDecimal0, bigDecimal1);
      assertNotSame(homeLight0, homeLight1);
      assertNotSame(homeLight1, homeLight0);
      assertSame(bigDecimal1, bigDecimal0);
      assertNotNull(bigDecimal1);
  }

  @Test(timeout = 4000)
  public void test257()  throws Throwable  {
      LightSource[] lightSourceArray0 = new LightSource[3];
      BigDecimal bigDecimal0 = BigDecimal.TEN;
      assertEquals((byte)10, bigDecimal0.byteValue());
      assertEquals((short)10, bigDecimal0.shortValue());
      assertNotNull(bigDecimal0);
      
      CatalogLight catalogLight0 = new CatalogLight("h&i*+8", "h&i*+8", "h&i*+8", (Content) null, (Content) null, (-2263.3643F), (-2263.3643F), (-2263.3643F), (-2263.3643F), false, lightSourceArray0, (float[][]) null, "h&i*+8", false, bigDecimal0, bigDecimal0);
      assertEquals((byte)10, bigDecimal0.byteValue());
      assertEquals((short)10, bigDecimal0.shortValue());
      assertFalse(catalogLight0.isBackFaceShown());
      assertFalse(catalogLight0.isMovable());
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertEquals((-2263.3643F), catalogLight0.getWidth(), 0.01F);
      assertFalse(catalogLight0.isResizable());
      assertFalse(catalogLight0.isModifiable());
      assertEquals("h&i*+8", catalogLight0.getName());
      assertNull(catalogLight0.getCreationDate());
      assertFalse(catalogLight0.isDoorOrWindow());
      assertEquals("h&i*+8", catalogLight0.getId());
      assertTrue(catalogLight0.isProportional());
      assertNull(catalogLight0.getCurrency());
      assertNull(catalogLight0.getGrade());
      assertEquals((-2263.3643F), catalogLight0.getDepth(), 0.01F);
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertTrue(catalogLight0.isTexturable());
      assertNull(catalogLight0.getColor());
      assertEquals((-2263.3643F), catalogLight0.getHeight(), 0.01F);
      assertEquals((-2263.3643F), catalogLight0.getElevation(), 0.01F);
      assertEquals("h&i*+8", catalogLight0.getCreator());
      assertEquals("h&i*+8", catalogLight0.getDescription());
      assertNull(catalogLight0.getInformation());
      assertTrue(catalogLight0.isDeformable());
      assertEquals(3, lightSourceArray0.length);
      assertNotNull(catalogLight0);
      
      HomeLight homeLight0 = new HomeLight(catalogLight0);
      assertEquals((byte)10, bigDecimal0.byteValue());
      assertEquals((short)10, bigDecimal0.shortValue());
      assertFalse(catalogLight0.isBackFaceShown());
      assertFalse(catalogLight0.isMovable());
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertEquals((-2263.3643F), catalogLight0.getWidth(), 0.01F);
      assertFalse(catalogLight0.isResizable());
      assertFalse(catalogLight0.isModifiable());
      assertEquals("h&i*+8", catalogLight0.getName());
      assertNull(catalogLight0.getCreationDate());
      assertFalse(catalogLight0.isDoorOrWindow());
      assertEquals("h&i*+8", catalogLight0.getId());
      assertTrue(catalogLight0.isProportional());
      assertNull(catalogLight0.getCurrency());
      assertNull(catalogLight0.getGrade());
      assertEquals((-2263.3643F), catalogLight0.getDepth(), 0.01F);
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertTrue(catalogLight0.isTexturable());
      assertNull(catalogLight0.getColor());
      assertEquals((-2263.3643F), catalogLight0.getHeight(), 0.01F);
      assertEquals((-2263.3643F), catalogLight0.getElevation(), 0.01F);
      assertEquals("h&i*+8", catalogLight0.getCreator());
      assertEquals("h&i*+8", catalogLight0.getDescription());
      assertNull(catalogLight0.getInformation());
      assertTrue(catalogLight0.isDeformable());
      assertNull(homeLight0.getShininess());
      assertEquals("h&i*+8", homeLight0.getName());
      assertEquals("h&i*+8", homeLight0.getCatalogId());
      assertFalse(homeLight0.isMovable());
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals((-2263.3643F), homeLight0.getHeight(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertEquals("h&i*+8", homeLight0.getDescription());
      assertFalse(homeLight0.isResizable());
      assertEquals((-2263.3643F), homeLight0.getWidth(), 0.01F);
      assertTrue(homeLight0.isDeformable());
      assertTrue(homeLight0.isVisible());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals((-2263.3643F), homeLight0.getDepth(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      assertFalse(homeLight0.isModelMirrored());
      assertFalse(homeLight0.isBackFaceShown());
      assertTrue(homeLight0.isTexturable());
      assertNull(homeLight0.getColor());
      assertEquals((-1131.6821F), homeLight0.getX(), 0.01F);
      assertEquals((-2263.3643F), homeLight0.getGroundElevation(), 0.01F);
      assertFalse(homeLight0.isNameVisible());
      assertEquals((-1131.6821F), homeLight0.getY(), 0.01F);
      assertEquals((-2263.3643F), homeLight0.getElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertNull(homeLight0.getCurrency());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals(3, lightSourceArray0.length);
      assertNotNull(homeLight0);
      
      boolean boolean0 = homeLight0.isPointAt(0, 0, 697.2301F);
      assertEquals((byte)10, bigDecimal0.byteValue());
      assertEquals((short)10, bigDecimal0.shortValue());
      assertFalse(catalogLight0.isBackFaceShown());
      assertFalse(catalogLight0.isMovable());
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertEquals((-2263.3643F), catalogLight0.getWidth(), 0.01F);
      assertFalse(catalogLight0.isResizable());
      assertFalse(catalogLight0.isModifiable());
      assertEquals("h&i*+8", catalogLight0.getName());
      assertNull(catalogLight0.getCreationDate());
      assertFalse(catalogLight0.isDoorOrWindow());
      assertEquals("h&i*+8", catalogLight0.getId());
      assertTrue(catalogLight0.isProportional());
      assertNull(catalogLight0.getCurrency());
      assertNull(catalogLight0.getGrade());
      assertEquals((-2263.3643F), catalogLight0.getDepth(), 0.01F);
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertTrue(catalogLight0.isTexturable());
      assertNull(catalogLight0.getColor());
      assertEquals((-2263.3643F), catalogLight0.getHeight(), 0.01F);
      assertEquals((-2263.3643F), catalogLight0.getElevation(), 0.01F);
      assertEquals("h&i*+8", catalogLight0.getCreator());
      assertEquals("h&i*+8", catalogLight0.getDescription());
      assertNull(catalogLight0.getInformation());
      assertTrue(catalogLight0.isDeformable());
      assertNull(homeLight0.getShininess());
      assertEquals("h&i*+8", homeLight0.getName());
      assertEquals("h&i*+8", homeLight0.getCatalogId());
      assertFalse(homeLight0.isMovable());
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals((-2263.3643F), homeLight0.getHeight(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertEquals("h&i*+8", homeLight0.getDescription());
      assertFalse(homeLight0.isResizable());
      assertEquals((-2263.3643F), homeLight0.getWidth(), 0.01F);
      assertTrue(homeLight0.isDeformable());
      assertTrue(homeLight0.isVisible());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals((-2263.3643F), homeLight0.getDepth(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      assertFalse(homeLight0.isModelMirrored());
      assertFalse(homeLight0.isBackFaceShown());
      assertTrue(homeLight0.isTexturable());
      assertNull(homeLight0.getColor());
      assertEquals((-1131.6821F), homeLight0.getX(), 0.01F);
      assertEquals((-2263.3643F), homeLight0.getGroundElevation(), 0.01F);
      assertFalse(homeLight0.isNameVisible());
      assertEquals((-1131.6821F), homeLight0.getY(), 0.01F);
      assertEquals((-2263.3643F), homeLight0.getElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertNull(homeLight0.getCurrency());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals(3, lightSourceArray0.length);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test258()  throws Throwable  {
      Content content0 = null;
      LightSource[] lightSourceArray0 = new LightSource[2];
      boolean boolean0 = true;
      LightSource lightSource0 = new LightSource(114, (-694.0F), 989.14F, 114);
      assertEquals(114.0F, lightSource0.getX(), 0.01F);
      assertEquals(114, lightSource0.getColor());
      assertNull(lightSource0.getDiameter());
      assertEquals(989.14F, lightSource0.getZ(), 0.01F);
      assertEquals((-694.0F), lightSource0.getY(), 0.01F);
      assertNotNull(lightSource0);
      
      float[][] floatArrayArray0 = null;
      BigDecimal bigDecimal0 = BigDecimal.TEN;
      assertEquals((byte)10, bigDecimal0.byteValue());
      assertEquals((short)10, bigDecimal0.shortValue());
      assertNotNull(bigDecimal0);
      
      String string0 = "kLo6%uE|@a95IJJ]";
      CatalogLight catalogLight0 = new CatalogLight("kLo6%uE|@a95IJJ]", "kLo6%uE|@a95IJJ]", "", (Content) null, (Content) null, 2.0F, 0.0F, (-3641.031F), (-127.62969F), false, lightSourceArray0, (float[][]) null, "", true, bigDecimal0, (BigDecimal) null);
      assertEquals((byte)10, bigDecimal0.byteValue());
      assertEquals((short)10, bigDecimal0.shortValue());
      assertEquals("kLo6%uE|@a95IJJ]", catalogLight0.getName());
      assertEquals(2.0F, catalogLight0.getWidth(), 0.01F);
      assertNull(catalogLight0.getColor());
      assertFalse(catalogLight0.isModifiable());
      assertEquals("", catalogLight0.getCreator());
      assertNull(catalogLight0.getCurrency());
      assertEquals("", catalogLight0.getDescription());
      assertEquals((-3641.031F), catalogLight0.getHeight(), 0.01F);
      assertNull(catalogLight0.getCreationDate());
      assertEquals(0.0F, catalogLight0.getDepth(), 0.01F);
      assertEquals("kLo6%uE|@a95IJJ]", catalogLight0.getId());
      assertEquals((-127.62969F), catalogLight0.getElevation(), 0.01F);
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertTrue(catalogLight0.isResizable());
      assertFalse(catalogLight0.isMovable());
      assertNull(catalogLight0.getInformation());
      assertTrue(catalogLight0.isDeformable());
      assertTrue(catalogLight0.isProportional());
      assertTrue(catalogLight0.isTexturable());
      assertFalse(catalogLight0.isDoorOrWindow());
      assertFalse(catalogLight0.isBackFaceShown());
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertNull(catalogLight0.getGrade());
      assertEquals(2, lightSourceArray0.length);
      assertNotNull(catalogLight0);
      
      HomeLight homeLight0 = new HomeLight(catalogLight0);
      assertEquals((byte)10, bigDecimal0.byteValue());
      assertEquals((short)10, bigDecimal0.shortValue());
      assertEquals("kLo6%uE|@a95IJJ]", catalogLight0.getName());
      assertEquals(2.0F, catalogLight0.getWidth(), 0.01F);
      assertNull(catalogLight0.getColor());
      assertFalse(catalogLight0.isModifiable());
      assertEquals("", catalogLight0.getCreator());
      assertNull(catalogLight0.getCurrency());
      assertEquals("", catalogLight0.getDescription());
      assertEquals((-3641.031F), catalogLight0.getHeight(), 0.01F);
      assertNull(catalogLight0.getCreationDate());
      assertEquals(0.0F, catalogLight0.getDepth(), 0.01F);
      assertEquals("kLo6%uE|@a95IJJ]", catalogLight0.getId());
      assertEquals((-127.62969F), catalogLight0.getElevation(), 0.01F);
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertTrue(catalogLight0.isResizable());
      assertFalse(catalogLight0.isMovable());
      assertNull(catalogLight0.getInformation());
      assertTrue(catalogLight0.isDeformable());
      assertTrue(catalogLight0.isProportional());
      assertTrue(catalogLight0.isTexturable());
      assertFalse(catalogLight0.isDoorOrWindow());
      assertFalse(catalogLight0.isBackFaceShown());
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertNull(catalogLight0.getGrade());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertEquals("kLo6%uE|@a95IJJ]", homeLight0.getCatalogId());
      assertTrue(homeLight0.isResizable());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals((-3641.031F), homeLight0.getHeight(), 0.01F);
      assertNull(homeLight0.getShininess());
      assertFalse(homeLight0.isMovable());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertEquals((-127.62969F), homeLight0.getGroundElevation(), 0.01F);
      assertNull(homeLight0.getColor());
      assertFalse(homeLight0.isModelMirrored());
      assertNull(homeLight0.getCurrency());
      assertEquals((-127.62969F), homeLight0.getElevation(), 0.01F);
      assertFalse(homeLight0.isNameVisible());
      assertFalse(homeLight0.isBackFaceShown());
      assertEquals(2.0F, homeLight0.getWidth(), 0.01F);
      assertEquals("kLo6%uE|@a95IJJ]", homeLight0.getName());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertTrue(homeLight0.isVisible());
      assertTrue(homeLight0.isTexturable());
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      assertEquals("", homeLight0.getDescription());
      assertEquals(1.0F, homeLight0.getX(), 0.01F);
      assertTrue(homeLight0.isDeformable());
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals(2, lightSourceArray0.length);
      assertNotNull(homeLight0);
      
      HomeLight homeLight1 = homeLight0.clone();
      assertFalse(homeLight1.equals((Object)homeLight0));
      assertEquals((byte)10, bigDecimal0.byteValue());
      assertEquals((short)10, bigDecimal0.shortValue());
      assertEquals("kLo6%uE|@a95IJJ]", catalogLight0.getName());
      assertEquals(2.0F, catalogLight0.getWidth(), 0.01F);
      assertNull(catalogLight0.getColor());
      assertFalse(catalogLight0.isModifiable());
      assertEquals("", catalogLight0.getCreator());
      assertNull(catalogLight0.getCurrency());
      assertEquals("", catalogLight0.getDescription());
      assertEquals((-3641.031F), catalogLight0.getHeight(), 0.01F);
      assertNull(catalogLight0.getCreationDate());
      assertEquals(0.0F, catalogLight0.getDepth(), 0.01F);
      assertEquals("kLo6%uE|@a95IJJ]", catalogLight0.getId());
      assertEquals((-127.62969F), catalogLight0.getElevation(), 0.01F);
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertTrue(catalogLight0.isResizable());
      assertFalse(catalogLight0.isMovable());
      assertNull(catalogLight0.getInformation());
      assertTrue(catalogLight0.isDeformable());
      assertTrue(catalogLight0.isProportional());
      assertTrue(catalogLight0.isTexturable());
      assertFalse(catalogLight0.isDoorOrWindow());
      assertFalse(catalogLight0.isBackFaceShown());
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertNull(catalogLight0.getGrade());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertEquals("kLo6%uE|@a95IJJ]", homeLight0.getCatalogId());
      assertTrue(homeLight0.isResizable());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals((-3641.031F), homeLight0.getHeight(), 0.01F);
      assertNull(homeLight0.getShininess());
      assertFalse(homeLight0.isMovable());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertEquals((-127.62969F), homeLight0.getGroundElevation(), 0.01F);
      assertNull(homeLight0.getColor());
      assertFalse(homeLight0.isModelMirrored());
      assertNull(homeLight0.getCurrency());
      assertEquals((-127.62969F), homeLight0.getElevation(), 0.01F);
      assertFalse(homeLight0.isNameVisible());
      assertFalse(homeLight0.isBackFaceShown());
      assertEquals(2.0F, homeLight0.getWidth(), 0.01F);
      assertEquals("kLo6%uE|@a95IJJ]", homeLight0.getName());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertTrue(homeLight0.isVisible());
      assertTrue(homeLight0.isTexturable());
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      assertEquals("", homeLight0.getDescription());
      assertEquals(1.0F, homeLight0.getX(), 0.01F);
      assertTrue(homeLight0.isDeformable());
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertNull(homeLight1.getShininess());
      assertNull(homeLight1.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight1.getNameAngle(), 0.01F);
      assertTrue(homeLight1.isVisible());
      assertTrue(homeLight1.isResizable());
      assertEquals("kLo6%uE|@a95IJJ]", homeLight1.getCatalogId());
      assertTrue(homeLight1.isDeformable());
      assertEquals("", homeLight1.getDescription());
      assertEquals((-3641.031F), homeLight1.getHeight(), 0.01F);
      assertEquals(0.0F, homeLight1.getNameXOffset(), 0.01F);
      assertEquals(2.0F, homeLight1.getWidth(), 0.01F);
      assertFalse(homeLight1.isNameVisible());
      assertEquals("kLo6%uE|@a95IJJ]", homeLight1.getName());
      assertEquals(0.0F, homeLight1.getAngle(), 0.01F);
      assertEquals(1.0F, homeLight1.getX(), 0.01F);
      assertTrue(homeLight1.isTexturable());
      assertFalse(homeLight1.isDoorOrWindow());
      assertEquals(0.0F, homeLight1.getY(), 0.01F);
      assertEquals((-127.62969F), homeLight1.getElevation(), 0.01F);
      assertFalse(homeLight1.isModelMirrored());
      assertFalse(homeLight1.isBackFaceShown());
      assertNull(homeLight1.getColor());
      assertNull(homeLight1.getCurrency());
      assertEquals(0.0F, homeLight1.getNameYOffset(), 0.01F);
      assertEquals(0.0F, homeLight1.getDepth(), 0.01F);
      assertEquals((-127.62969F), homeLight1.getGroundElevation(), 0.01F);
      assertEquals(0.5F, homeLight1.getPower(), 0.01F);
      assertFalse(homeLight1.isMovable());
      assertEquals(2, lightSourceArray0.length);
      assertNotSame(homeLight0, homeLight1);
      assertNotSame(homeLight1, homeLight0);
      assertNotNull(homeLight1);
      
      HomeLight homeLight2 = (HomeLight)homeLight0.clone();
      assertFalse(homeLight0.equals((Object)homeLight1));
      assertFalse(homeLight2.equals((Object)homeLight0));
      assertFalse(homeLight2.equals((Object)homeLight1));
      assertEquals((byte)10, bigDecimal0.byteValue());
      assertEquals((short)10, bigDecimal0.shortValue());
      assertEquals("kLo6%uE|@a95IJJ]", catalogLight0.getName());
      assertEquals(2.0F, catalogLight0.getWidth(), 0.01F);
      assertNull(catalogLight0.getColor());
      assertFalse(catalogLight0.isModifiable());
      assertEquals("", catalogLight0.getCreator());
      assertNull(catalogLight0.getCurrency());
      assertEquals("", catalogLight0.getDescription());
      assertEquals((-3641.031F), catalogLight0.getHeight(), 0.01F);
      assertNull(catalogLight0.getCreationDate());
      assertEquals(0.0F, catalogLight0.getDepth(), 0.01F);
      assertEquals("kLo6%uE|@a95IJJ]", catalogLight0.getId());
      assertEquals((-127.62969F), catalogLight0.getElevation(), 0.01F);
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertTrue(catalogLight0.isResizable());
      assertFalse(catalogLight0.isMovable());
      assertNull(catalogLight0.getInformation());
      assertTrue(catalogLight0.isDeformable());
      assertTrue(catalogLight0.isProportional());
      assertTrue(catalogLight0.isTexturable());
      assertFalse(catalogLight0.isDoorOrWindow());
      assertFalse(catalogLight0.isBackFaceShown());
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertNull(catalogLight0.getGrade());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertEquals("kLo6%uE|@a95IJJ]", homeLight0.getCatalogId());
      assertTrue(homeLight0.isResizable());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals((-3641.031F), homeLight0.getHeight(), 0.01F);
      assertNull(homeLight0.getShininess());
      assertFalse(homeLight0.isMovable());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertEquals((-127.62969F), homeLight0.getGroundElevation(), 0.01F);
      assertNull(homeLight0.getColor());
      assertFalse(homeLight0.isModelMirrored());
      assertNull(homeLight0.getCurrency());
      assertEquals((-127.62969F), homeLight0.getElevation(), 0.01F);
      assertFalse(homeLight0.isNameVisible());
      assertFalse(homeLight0.isBackFaceShown());
      assertEquals(2.0F, homeLight0.getWidth(), 0.01F);
      assertEquals("kLo6%uE|@a95IJJ]", homeLight0.getName());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertTrue(homeLight0.isVisible());
      assertTrue(homeLight0.isTexturable());
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      assertEquals("", homeLight0.getDescription());
      assertEquals(1.0F, homeLight0.getX(), 0.01F);
      assertTrue(homeLight0.isDeformable());
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeLight2.getAngle(), 0.01F);
      assertEquals(1.0F, homeLight2.getX(), 0.01F);
      assertTrue(homeLight2.isTexturable());
      assertFalse(homeLight2.isModelMirrored());
      assertFalse(homeLight2.isBackFaceShown());
      assertEquals((-127.62969F), homeLight2.getGroundElevation(), 0.01F);
      assertEquals("kLo6%uE|@a95IJJ]", homeLight2.getCatalogId());
      assertEquals(0.5F, homeLight2.getPower(), 0.01F);
      assertEquals((-3641.031F), homeLight2.getHeight(), 0.01F);
      assertNull(homeLight2.getCurrency());
      assertNull(homeLight2.getColor());
      assertEquals((-127.62969F), homeLight2.getElevation(), 0.01F);
      assertEquals(0.0F, homeLight2.getNameYOffset(), 0.01F);
      assertFalse(homeLight2.isMovable());
      assertTrue(homeLight2.isResizable());
      assertTrue(homeLight2.isVisible());
      assertNull(homeLight2.getShininess());
      assertNull(homeLight2.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight2.getNameAngle(), 0.01F);
      assertFalse(homeLight2.isNameVisible());
      assertEquals(0.0F, homeLight2.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeLight2.getDepth(), 0.01F);
      assertEquals("kLo6%uE|@a95IJJ]", homeLight2.getName());
      assertTrue(homeLight2.isDeformable());
      assertEquals(2.0F, homeLight2.getWidth(), 0.01F);
      assertEquals(0.0F, homeLight2.getY(), 0.01F);
      assertEquals("", homeLight2.getDescription());
      assertFalse(homeLight2.isDoorOrWindow());
      assertEquals(2, lightSourceArray0.length);
      assertNotSame(homeLight0, homeLight2);
      assertNotSame(homeLight0, homeLight1);
      assertNotSame(homeLight2, homeLight0);
      assertNotSame(homeLight2, homeLight1);
      assertNotNull(homeLight2);
      
      BigDecimal bigDecimal1 = homeLight2.getValueAddedTax();
      assertFalse(homeLight0.equals((Object)homeLight2));
      assertFalse(homeLight0.equals((Object)homeLight1));
      assertFalse(homeLight2.equals((Object)homeLight0));
      assertFalse(homeLight2.equals((Object)homeLight1));
      assertEquals((byte)10, bigDecimal0.byteValue());
      assertEquals((short)10, bigDecimal0.shortValue());
      assertEquals("kLo6%uE|@a95IJJ]", catalogLight0.getName());
      assertEquals(2.0F, catalogLight0.getWidth(), 0.01F);
      assertNull(catalogLight0.getColor());
      assertFalse(catalogLight0.isModifiable());
      assertEquals("", catalogLight0.getCreator());
      assertNull(catalogLight0.getCurrency());
      assertEquals("", catalogLight0.getDescription());
      assertEquals((-3641.031F), catalogLight0.getHeight(), 0.01F);
      assertNull(catalogLight0.getCreationDate());
      assertEquals(0.0F, catalogLight0.getDepth(), 0.01F);
      assertEquals("kLo6%uE|@a95IJJ]", catalogLight0.getId());
      assertEquals((-127.62969F), catalogLight0.getElevation(), 0.01F);
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertTrue(catalogLight0.isResizable());
      assertFalse(catalogLight0.isMovable());
      assertNull(catalogLight0.getInformation());
      assertTrue(catalogLight0.isDeformable());
      assertTrue(catalogLight0.isProportional());
      assertTrue(catalogLight0.isTexturable());
      assertFalse(catalogLight0.isDoorOrWindow());
      assertFalse(catalogLight0.isBackFaceShown());
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertNull(catalogLight0.getGrade());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertEquals("kLo6%uE|@a95IJJ]", homeLight0.getCatalogId());
      assertTrue(homeLight0.isResizable());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals((-3641.031F), homeLight0.getHeight(), 0.01F);
      assertNull(homeLight0.getShininess());
      assertFalse(homeLight0.isMovable());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertEquals((-127.62969F), homeLight0.getGroundElevation(), 0.01F);
      assertNull(homeLight0.getColor());
      assertFalse(homeLight0.isModelMirrored());
      assertNull(homeLight0.getCurrency());
      assertEquals((-127.62969F), homeLight0.getElevation(), 0.01F);
      assertFalse(homeLight0.isNameVisible());
      assertFalse(homeLight0.isBackFaceShown());
      assertEquals(2.0F, homeLight0.getWidth(), 0.01F);
      assertEquals("kLo6%uE|@a95IJJ]", homeLight0.getName());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertTrue(homeLight0.isVisible());
      assertTrue(homeLight0.isTexturable());
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      assertEquals("", homeLight0.getDescription());
      assertEquals(1.0F, homeLight0.getX(), 0.01F);
      assertTrue(homeLight0.isDeformable());
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeLight2.getAngle(), 0.01F);
      assertEquals(1.0F, homeLight2.getX(), 0.01F);
      assertTrue(homeLight2.isTexturable());
      assertFalse(homeLight2.isModelMirrored());
      assertFalse(homeLight2.isBackFaceShown());
      assertEquals((-127.62969F), homeLight2.getGroundElevation(), 0.01F);
      assertEquals("kLo6%uE|@a95IJJ]", homeLight2.getCatalogId());
      assertEquals(0.5F, homeLight2.getPower(), 0.01F);
      assertEquals((-3641.031F), homeLight2.getHeight(), 0.01F);
      assertNull(homeLight2.getCurrency());
      assertNull(homeLight2.getColor());
      assertEquals((-127.62969F), homeLight2.getElevation(), 0.01F);
      assertEquals(0.0F, homeLight2.getNameYOffset(), 0.01F);
      assertFalse(homeLight2.isMovable());
      assertTrue(homeLight2.isResizable());
      assertTrue(homeLight2.isVisible());
      assertNull(homeLight2.getShininess());
      assertNull(homeLight2.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight2.getNameAngle(), 0.01F);
      assertFalse(homeLight2.isNameVisible());
      assertEquals(0.0F, homeLight2.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeLight2.getDepth(), 0.01F);
      assertEquals("kLo6%uE|@a95IJJ]", homeLight2.getName());
      assertTrue(homeLight2.isDeformable());
      assertEquals(2.0F, homeLight2.getWidth(), 0.01F);
      assertEquals(0.0F, homeLight2.getY(), 0.01F);
      assertEquals("", homeLight2.getDescription());
      assertFalse(homeLight2.isDoorOrWindow());
      assertEquals(2, lightSourceArray0.length);
      assertNotSame(homeLight0, homeLight2);
      assertNotSame(homeLight0, homeLight1);
      assertNotSame(homeLight2, homeLight0);
      assertNotSame(homeLight2, homeLight1);
      assertNull(bigDecimal1);
      
      HomeLight homeLight3 = homeLight1.clone();
      assertFalse(homeLight0.equals((Object)homeLight2));
      assertFalse(homeLight0.equals((Object)homeLight1));
      assertFalse(homeLight1.equals((Object)homeLight0));
      assertFalse(homeLight1.equals((Object)homeLight2));
      assertFalse(homeLight3.equals((Object)homeLight2));
      assertFalse(homeLight3.equals((Object)homeLight1));
      assertFalse(homeLight3.equals((Object)homeLight0));
      assertEquals((byte)10, bigDecimal0.byteValue());
      assertEquals((short)10, bigDecimal0.shortValue());
      assertEquals("kLo6%uE|@a95IJJ]", catalogLight0.getName());
      assertEquals(2.0F, catalogLight0.getWidth(), 0.01F);
      assertNull(catalogLight0.getColor());
      assertFalse(catalogLight0.isModifiable());
      assertEquals("", catalogLight0.getCreator());
      assertNull(catalogLight0.getCurrency());
      assertEquals("", catalogLight0.getDescription());
      assertEquals((-3641.031F), catalogLight0.getHeight(), 0.01F);
      assertNull(catalogLight0.getCreationDate());
      assertEquals(0.0F, catalogLight0.getDepth(), 0.01F);
      assertEquals("kLo6%uE|@a95IJJ]", catalogLight0.getId());
      assertEquals((-127.62969F), catalogLight0.getElevation(), 0.01F);
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertTrue(catalogLight0.isResizable());
      assertFalse(catalogLight0.isMovable());
      assertNull(catalogLight0.getInformation());
      assertTrue(catalogLight0.isDeformable());
      assertTrue(catalogLight0.isProportional());
      assertTrue(catalogLight0.isTexturable());
      assertFalse(catalogLight0.isDoorOrWindow());
      assertFalse(catalogLight0.isBackFaceShown());
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertNull(catalogLight0.getGrade());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertEquals("kLo6%uE|@a95IJJ]", homeLight0.getCatalogId());
      assertTrue(homeLight0.isResizable());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals((-3641.031F), homeLight0.getHeight(), 0.01F);
      assertNull(homeLight0.getShininess());
      assertFalse(homeLight0.isMovable());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertEquals((-127.62969F), homeLight0.getGroundElevation(), 0.01F);
      assertNull(homeLight0.getColor());
      assertFalse(homeLight0.isModelMirrored());
      assertNull(homeLight0.getCurrency());
      assertEquals((-127.62969F), homeLight0.getElevation(), 0.01F);
      assertFalse(homeLight0.isNameVisible());
      assertFalse(homeLight0.isBackFaceShown());
      assertEquals(2.0F, homeLight0.getWidth(), 0.01F);
      assertEquals("kLo6%uE|@a95IJJ]", homeLight0.getName());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertTrue(homeLight0.isVisible());
      assertTrue(homeLight0.isTexturable());
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      assertEquals("", homeLight0.getDescription());
      assertEquals(1.0F, homeLight0.getX(), 0.01F);
      assertTrue(homeLight0.isDeformable());
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertNull(homeLight1.getShininess());
      assertNull(homeLight1.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight1.getNameAngle(), 0.01F);
      assertTrue(homeLight1.isVisible());
      assertTrue(homeLight1.isResizable());
      assertEquals("kLo6%uE|@a95IJJ]", homeLight1.getCatalogId());
      assertTrue(homeLight1.isDeformable());
      assertEquals("", homeLight1.getDescription());
      assertEquals((-3641.031F), homeLight1.getHeight(), 0.01F);
      assertEquals(0.0F, homeLight1.getNameXOffset(), 0.01F);
      assertEquals(2.0F, homeLight1.getWidth(), 0.01F);
      assertFalse(homeLight1.isNameVisible());
      assertEquals("kLo6%uE|@a95IJJ]", homeLight1.getName());
      assertEquals(0.0F, homeLight1.getAngle(), 0.01F);
      assertEquals(1.0F, homeLight1.getX(), 0.01F);
      assertTrue(homeLight1.isTexturable());
      assertFalse(homeLight1.isDoorOrWindow());
      assertEquals(0.0F, homeLight1.getY(), 0.01F);
      assertEquals((-127.62969F), homeLight1.getElevation(), 0.01F);
      assertFalse(homeLight1.isModelMirrored());
      assertFalse(homeLight1.isBackFaceShown());
      assertNull(homeLight1.getColor());
      assertNull(homeLight1.getCurrency());
      assertEquals(0.0F, homeLight1.getNameYOffset(), 0.01F);
      assertEquals(0.0F, homeLight1.getDepth(), 0.01F);
      assertEquals((-127.62969F), homeLight1.getGroundElevation(), 0.01F);
      assertEquals(0.5F, homeLight1.getPower(), 0.01F);
      assertFalse(homeLight1.isMovable());
      assertEquals("kLo6%uE|@a95IJJ]", homeLight3.getName());
      assertEquals(0.0F, homeLight3.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeLight3.getDepth(), 0.01F);
      assertEquals((-3641.031F), homeLight3.getHeight(), 0.01F);
      assertEquals("kLo6%uE|@a95IJJ]", homeLight3.getCatalogId());
      assertNull(homeLight3.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight3.getNameAngle(), 0.01F);
      assertTrue(homeLight3.isResizable());
      assertFalse(homeLight3.isBackFaceShown());
      assertNull(homeLight3.getShininess());
      assertEquals(1.0F, homeLight3.getX(), 0.01F);
      assertEquals(0.0F, homeLight3.getY(), 0.01F);
      assertEquals(0.0F, homeLight3.getAngle(), 0.01F);
      assertTrue(homeLight3.isTexturable());
      assertEquals("", homeLight3.getDescription());
      assertFalse(homeLight3.isDoorOrWindow());
      assertTrue(homeLight3.isDeformable());
      assertEquals(2.0F, homeLight3.getWidth(), 0.01F);
      assertTrue(homeLight3.isVisible());
      assertEquals(0.0F, homeLight3.getNameYOffset(), 0.01F);
      assertFalse(homeLight3.isNameVisible());
      assertFalse(homeLight3.isModelMirrored());
      assertEquals((-127.62969F), homeLight3.getElevation(), 0.01F);
      assertNull(homeLight3.getColor());
      assertEquals((-127.62969F), homeLight3.getGroundElevation(), 0.01F);
      assertFalse(homeLight3.isMovable());
      assertEquals(0.5F, homeLight3.getPower(), 0.01F);
      assertNull(homeLight3.getCurrency());
      assertEquals(2, lightSourceArray0.length);
      assertNotSame(homeLight0, homeLight2);
      assertNotSame(homeLight0, homeLight1);
      assertNotSame(homeLight0, homeLight3);
      assertNotSame(homeLight1, homeLight0);
      assertNotSame(homeLight1, homeLight2);
      assertNotSame(homeLight1, homeLight3);
      assertNotSame(homeLight3, homeLight2);
      assertNotSame(homeLight3, homeLight1);
      assertNotSame(homeLight3, homeLight0);
      assertNotNull(homeLight3);
      
      boolean boolean1 = homeLight3.isNameCenterPointAt((-727.8896F), (-2075.21F), 995.8F);
      assertFalse(homeLight0.equals((Object)homeLight2));
      assertFalse(homeLight0.equals((Object)homeLight1));
      assertFalse(homeLight0.equals((Object)homeLight3));
      assertFalse(homeLight1.equals((Object)homeLight0));
      assertFalse(homeLight1.equals((Object)homeLight2));
      assertFalse(homeLight1.equals((Object)homeLight3));
      assertFalse(homeLight3.equals((Object)homeLight2));
      assertFalse(homeLight3.equals((Object)homeLight1));
      assertFalse(homeLight3.equals((Object)homeLight0));
      assertFalse(boolean1 == boolean0);
      assertEquals((byte)10, bigDecimal0.byteValue());
      assertEquals((short)10, bigDecimal0.shortValue());
      assertEquals("kLo6%uE|@a95IJJ]", catalogLight0.getName());
      assertEquals(2.0F, catalogLight0.getWidth(), 0.01F);
      assertNull(catalogLight0.getColor());
      assertFalse(catalogLight0.isModifiable());
      assertEquals("", catalogLight0.getCreator());
      assertNull(catalogLight0.getCurrency());
      assertEquals("", catalogLight0.getDescription());
      assertEquals((-3641.031F), catalogLight0.getHeight(), 0.01F);
      assertNull(catalogLight0.getCreationDate());
      assertEquals(0.0F, catalogLight0.getDepth(), 0.01F);
      assertEquals("kLo6%uE|@a95IJJ]", catalogLight0.getId());
      assertEquals((-127.62969F), catalogLight0.getElevation(), 0.01F);
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertTrue(catalogLight0.isResizable());
      assertFalse(catalogLight0.isMovable());
      assertNull(catalogLight0.getInformation());
      assertTrue(catalogLight0.isDeformable());
      assertTrue(catalogLight0.isProportional());
      assertTrue(catalogLight0.isTexturable());
      assertFalse(catalogLight0.isDoorOrWindow());
      assertFalse(catalogLight0.isBackFaceShown());
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertNull(catalogLight0.getGrade());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertEquals("kLo6%uE|@a95IJJ]", homeLight0.getCatalogId());
      assertTrue(homeLight0.isResizable());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals((-3641.031F), homeLight0.getHeight(), 0.01F);
      assertNull(homeLight0.getShininess());
      assertFalse(homeLight0.isMovable());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertEquals((-127.62969F), homeLight0.getGroundElevation(), 0.01F);
      assertNull(homeLight0.getColor());
      assertFalse(homeLight0.isModelMirrored());
      assertNull(homeLight0.getCurrency());
      assertEquals((-127.62969F), homeLight0.getElevation(), 0.01F);
      assertFalse(homeLight0.isNameVisible());
      assertFalse(homeLight0.isBackFaceShown());
      assertEquals(2.0F, homeLight0.getWidth(), 0.01F);
      assertEquals("kLo6%uE|@a95IJJ]", homeLight0.getName());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertTrue(homeLight0.isVisible());
      assertTrue(homeLight0.isTexturable());
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      assertEquals("", homeLight0.getDescription());
      assertEquals(1.0F, homeLight0.getX(), 0.01F);
      assertTrue(homeLight0.isDeformable());
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertNull(homeLight1.getShininess());
      assertNull(homeLight1.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight1.getNameAngle(), 0.01F);
      assertTrue(homeLight1.isVisible());
      assertTrue(homeLight1.isResizable());
      assertEquals("kLo6%uE|@a95IJJ]", homeLight1.getCatalogId());
      assertTrue(homeLight1.isDeformable());
      assertEquals("", homeLight1.getDescription());
      assertEquals((-3641.031F), homeLight1.getHeight(), 0.01F);
      assertEquals(0.0F, homeLight1.getNameXOffset(), 0.01F);
      assertEquals(2.0F, homeLight1.getWidth(), 0.01F);
      assertFalse(homeLight1.isNameVisible());
      assertEquals("kLo6%uE|@a95IJJ]", homeLight1.getName());
      assertEquals(0.0F, homeLight1.getAngle(), 0.01F);
      assertEquals(1.0F, homeLight1.getX(), 0.01F);
      assertTrue(homeLight1.isTexturable());
      assertFalse(homeLight1.isDoorOrWindow());
      assertEquals(0.0F, homeLight1.getY(), 0.01F);
      assertEquals((-127.62969F), homeLight1.getElevation(), 0.01F);
      assertFalse(homeLight1.isModelMirrored());
      assertFalse(homeLight1.isBackFaceShown());
      assertNull(homeLight1.getColor());
      assertNull(homeLight1.getCurrency());
      assertEquals(0.0F, homeLight1.getNameYOffset(), 0.01F);
      assertEquals(0.0F, homeLight1.getDepth(), 0.01F);
      assertEquals((-127.62969F), homeLight1.getGroundElevation(), 0.01F);
      assertEquals(0.5F, homeLight1.getPower(), 0.01F);
      assertFalse(homeLight1.isMovable());
      assertEquals("kLo6%uE|@a95IJJ]", homeLight3.getName());
      assertEquals(0.0F, homeLight3.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeLight3.getDepth(), 0.01F);
      assertEquals((-3641.031F), homeLight3.getHeight(), 0.01F);
      assertEquals("kLo6%uE|@a95IJJ]", homeLight3.getCatalogId());
      assertNull(homeLight3.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight3.getNameAngle(), 0.01F);
      assertTrue(homeLight3.isResizable());
      assertFalse(homeLight3.isBackFaceShown());
      assertNull(homeLight3.getShininess());
      assertEquals(1.0F, homeLight3.getX(), 0.01F);
      assertEquals(0.0F, homeLight3.getY(), 0.01F);
      assertEquals(0.0F, homeLight3.getAngle(), 0.01F);
      assertTrue(homeLight3.isTexturable());
      assertEquals("", homeLight3.getDescription());
      assertFalse(homeLight3.isDoorOrWindow());
      assertTrue(homeLight3.isDeformable());
      assertEquals(2.0F, homeLight3.getWidth(), 0.01F);
      assertTrue(homeLight3.isVisible());
      assertEquals(0.0F, homeLight3.getNameYOffset(), 0.01F);
      assertFalse(homeLight3.isNameVisible());
      assertFalse(homeLight3.isModelMirrored());
      assertEquals((-127.62969F), homeLight3.getElevation(), 0.01F);
      assertNull(homeLight3.getColor());
      assertEquals((-127.62969F), homeLight3.getGroundElevation(), 0.01F);
      assertFalse(homeLight3.isMovable());
      assertEquals(0.5F, homeLight3.getPower(), 0.01F);
      assertNull(homeLight3.getCurrency());
      assertEquals(2, lightSourceArray0.length);
      assertNotSame(homeLight0, homeLight2);
      assertNotSame(homeLight0, homeLight1);
      assertNotSame(homeLight0, homeLight3);
      assertNotSame(homeLight1, homeLight0);
      assertNotSame(homeLight1, homeLight2);
      assertNotSame(homeLight1, homeLight3);
      assertNotSame(homeLight3, homeLight2);
      assertNotSame(homeLight3, homeLight1);
      assertNotSame(homeLight3, homeLight0);
      assertFalse(boolean1);
      
      homeLight3.setY(2.0F);
      assertFalse(homeLight0.equals((Object)homeLight2));
      assertFalse(homeLight0.equals((Object)homeLight1));
      assertFalse(homeLight0.equals((Object)homeLight3));
      assertFalse(homeLight1.equals((Object)homeLight0));
      assertFalse(homeLight1.equals((Object)homeLight2));
      assertFalse(homeLight1.equals((Object)homeLight3));
      assertFalse(homeLight3.equals((Object)homeLight2));
      assertFalse(homeLight3.equals((Object)homeLight1));
      assertFalse(homeLight3.equals((Object)homeLight0));
      assertEquals((byte)10, bigDecimal0.byteValue());
      assertEquals((short)10, bigDecimal0.shortValue());
      assertEquals("kLo6%uE|@a95IJJ]", catalogLight0.getName());
      assertEquals(2.0F, catalogLight0.getWidth(), 0.01F);
      assertNull(catalogLight0.getColor());
      assertFalse(catalogLight0.isModifiable());
      assertEquals("", catalogLight0.getCreator());
      assertNull(catalogLight0.getCurrency());
      assertEquals("", catalogLight0.getDescription());
      assertEquals((-3641.031F), catalogLight0.getHeight(), 0.01F);
      assertNull(catalogLight0.getCreationDate());
      assertEquals(0.0F, catalogLight0.getDepth(), 0.01F);
      assertEquals("kLo6%uE|@a95IJJ]", catalogLight0.getId());
      assertEquals((-127.62969F), catalogLight0.getElevation(), 0.01F);
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertTrue(catalogLight0.isResizable());
      assertFalse(catalogLight0.isMovable());
      assertNull(catalogLight0.getInformation());
      assertTrue(catalogLight0.isDeformable());
      assertTrue(catalogLight0.isProportional());
      assertTrue(catalogLight0.isTexturable());
      assertFalse(catalogLight0.isDoorOrWindow());
      assertFalse(catalogLight0.isBackFaceShown());
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertNull(catalogLight0.getGrade());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertEquals("kLo6%uE|@a95IJJ]", homeLight0.getCatalogId());
      assertTrue(homeLight0.isResizable());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals((-3641.031F), homeLight0.getHeight(), 0.01F);
      assertNull(homeLight0.getShininess());
      assertFalse(homeLight0.isMovable());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertEquals((-127.62969F), homeLight0.getGroundElevation(), 0.01F);
      assertNull(homeLight0.getColor());
      assertFalse(homeLight0.isModelMirrored());
      assertNull(homeLight0.getCurrency());
      assertEquals((-127.62969F), homeLight0.getElevation(), 0.01F);
      assertFalse(homeLight0.isNameVisible());
      assertFalse(homeLight0.isBackFaceShown());
      assertEquals(2.0F, homeLight0.getWidth(), 0.01F);
      assertEquals("kLo6%uE|@a95IJJ]", homeLight0.getName());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertTrue(homeLight0.isVisible());
      assertTrue(homeLight0.isTexturable());
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      assertEquals("", homeLight0.getDescription());
      assertEquals(1.0F, homeLight0.getX(), 0.01F);
      assertTrue(homeLight0.isDeformable());
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertNull(homeLight1.getShininess());
      assertNull(homeLight1.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight1.getNameAngle(), 0.01F);
      assertTrue(homeLight1.isVisible());
      assertTrue(homeLight1.isResizable());
      assertEquals("kLo6%uE|@a95IJJ]", homeLight1.getCatalogId());
      assertTrue(homeLight1.isDeformable());
      assertEquals("", homeLight1.getDescription());
      assertEquals((-3641.031F), homeLight1.getHeight(), 0.01F);
      assertEquals(0.0F, homeLight1.getNameXOffset(), 0.01F);
      assertEquals(2.0F, homeLight1.getWidth(), 0.01F);
      assertFalse(homeLight1.isNameVisible());
      assertEquals("kLo6%uE|@a95IJJ]", homeLight1.getName());
      assertEquals(0.0F, homeLight1.getAngle(), 0.01F);
      assertEquals(1.0F, homeLight1.getX(), 0.01F);
      assertTrue(homeLight1.isTexturable());
      assertFalse(homeLight1.isDoorOrWindow());
      assertEquals(0.0F, homeLight1.getY(), 0.01F);
      assertEquals((-127.62969F), homeLight1.getElevation(), 0.01F);
      assertFalse(homeLight1.isModelMirrored());
      assertFalse(homeLight1.isBackFaceShown());
      assertNull(homeLight1.getColor());
      assertNull(homeLight1.getCurrency());
      assertEquals(0.0F, homeLight1.getNameYOffset(), 0.01F);
      assertEquals(0.0F, homeLight1.getDepth(), 0.01F);
      assertEquals((-127.62969F), homeLight1.getGroundElevation(), 0.01F);
      assertEquals(0.5F, homeLight1.getPower(), 0.01F);
      assertFalse(homeLight1.isMovable());
      assertEquals("kLo6%uE|@a95IJJ]", homeLight3.getName());
      assertEquals(0.0F, homeLight3.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeLight3.getDepth(), 0.01F);
      assertEquals((-3641.031F), homeLight3.getHeight(), 0.01F);
      assertEquals("kLo6%uE|@a95IJJ]", homeLight3.getCatalogId());
      assertNull(homeLight3.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight3.getNameAngle(), 0.01F);
      assertTrue(homeLight3.isResizable());
      assertFalse(homeLight3.isBackFaceShown());
      assertNull(homeLight3.getShininess());
      assertEquals(1.0F, homeLight3.getX(), 0.01F);
      assertEquals(2.0F, homeLight3.getY(), 0.01F);
      assertEquals(0.0F, homeLight3.getAngle(), 0.01F);
      assertTrue(homeLight3.isTexturable());
      assertEquals("", homeLight3.getDescription());
      assertFalse(homeLight3.isDoorOrWindow());
      assertTrue(homeLight3.isDeformable());
      assertEquals(2.0F, homeLight3.getWidth(), 0.01F);
      assertTrue(homeLight3.isVisible());
      assertEquals(0.0F, homeLight3.getNameYOffset(), 0.01F);
      assertFalse(homeLight3.isNameVisible());
      assertFalse(homeLight3.isModelMirrored());
      assertEquals((-127.62969F), homeLight3.getElevation(), 0.01F);
      assertNull(homeLight3.getColor());
      assertEquals((-127.62969F), homeLight3.getGroundElevation(), 0.01F);
      assertFalse(homeLight3.isMovable());
      assertEquals(0.5F, homeLight3.getPower(), 0.01F);
      assertNull(homeLight3.getCurrency());
      assertEquals(2, lightSourceArray0.length);
      assertNotSame(homeLight0, homeLight2);
      assertNotSame(homeLight0, homeLight1);
      assertNotSame(homeLight0, homeLight3);
      assertNotSame(homeLight1, homeLight0);
      assertNotSame(homeLight1, homeLight2);
      assertNotSame(homeLight1, homeLight3);
      assertNotSame(homeLight3, homeLight2);
      assertNotSame(homeLight3, homeLight1);
      assertNotSame(homeLight3, homeLight0);
      
      String string1 = "com.eteks.sweethome3d.model.HomePieceOfFurniture$9";
      String string2 = "Z!p#O-%:X";
      String string3 = "qFuP-JC^eF}ekR#/7Es";
      String[] stringArray0 = new String[8];
      stringArray0[0] = "Z!p#O-%:X";
      stringArray0[1] = "kLo6%uE|@a95IJJ]";
      stringArray0[2] = "";
      stringArray0[3] = "";
      stringArray0[4] = "";
      stringArray0[5] = "Z!p#O-%:X";
      stringArray0[6] = "W";
      stringArray0[7] = "Z!p#O-%:X";
      Long long0 = new Long(962L);
      assertNotNull(long0);
      assertEquals(962L, (long)long0);
      
      Float float0 = new Float((double) (-3641.031F));
      assertNotNull(float0);
      assertEquals((-3641.031F), (float)float0, 0.01F);
      
      float float1 = 0.3926991F;
      float float2 = (-2684.0F);
      float float3 = 1566.2004F;
      boolean boolean2 = false;
      String string4 = "JZcQK#cV\"2NMqwXHXIn";
      String string5 = "com.eteks.sweethome3d.tools.OperatingSystem$2";
      boolean boolean3 = true;
      boolean boolean4 = false;
      BigDecimal bigDecimal2 = null;
      try {
        bigDecimal2 = new BigDecimal((BigInteger) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.math.BigDecimal", e);
      }
  }

  @Test(timeout = 4000)
  public void test259()  throws Throwable  {
      LightSource[] lightSourceArray0 = new LightSource[2];
      LightSource lightSource0 = new LightSource((-815.0F), 0.0F, 0.0F, 114);
      assertNull(lightSource0.getDiameter());
      assertEquals(0.0F, lightSource0.getZ(), 0.01F);
      assertEquals(0.0F, lightSource0.getY(), 0.01F);
      assertEquals((-815.0F), lightSource0.getX(), 0.01F);
      assertEquals(114, lightSource0.getColor());
      assertNotNull(lightSource0);
      
      lightSourceArray0[0] = lightSource0;
      LightSource lightSource1 = new LightSource((-694.0F), 0.36957806F, (-127.62969F), 0);
      assertFalse(lightSource1.equals((Object)lightSource0));
      assertEquals((-127.62969F), lightSource1.getZ(), 0.01F);
      assertEquals(0, lightSource1.getColor());
      assertNull(lightSource1.getDiameter());
      assertEquals((-694.0F), lightSource1.getX(), 0.01F);
      assertEquals(0.36957806F, lightSource1.getY(), 0.01F);
      assertNotNull(lightSource1);
      
      lightSourceArray0[1] = lightSource1;
      BigDecimal bigDecimal0 = BigDecimal.TEN;
      assertEquals((byte)10, bigDecimal0.byteValue());
      assertEquals((short)10, bigDecimal0.shortValue());
      assertNotNull(bigDecimal0);
      
      CatalogLight catalogLight0 = new CatalogLight("h&9+\"", "h&9+\"", "h&9+\"", (Content) null, (Content) null, (-815.0F), 0.36957806F, (-694.0F), (-694.0F), true, lightSourceArray0, (float[][]) null, "h&9+\"", true, bigDecimal0, bigDecimal0);
      assertEquals((byte)10, bigDecimal0.byteValue());
      assertEquals((short)10, bigDecimal0.shortValue());
      assertEquals(0.36957806F, catalogLight0.getDepth(), 0.01F);
      assertNull(catalogLight0.getCreationDate());
      assertEquals("h&9+\"", catalogLight0.getId());
      assertFalse(catalogLight0.isBackFaceShown());
      assertTrue(catalogLight0.isMovable());
      assertFalse(catalogLight0.isModifiable());
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertTrue(catalogLight0.isResizable());
      assertEquals((-815.0F), catalogLight0.getWidth(), 0.01F);
      assertEquals((-694.0F), catalogLight0.getHeight(), 0.01F);
      assertEquals("h&9+\"", catalogLight0.getCreator());
      assertEquals("h&9+\"", catalogLight0.getDescription());
      assertTrue(catalogLight0.isProportional());
      assertFalse(catalogLight0.isDoorOrWindow());
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertEquals((-694.0F), catalogLight0.getElevation(), 0.01F);
      assertTrue(catalogLight0.isTexturable());
      assertNull(catalogLight0.getGrade());
      assertNull(catalogLight0.getColor());
      assertNull(catalogLight0.getInformation());
      assertTrue(catalogLight0.isDeformable());
      assertNull(catalogLight0.getCurrency());
      assertEquals("h&9+\"", catalogLight0.getName());
      assertEquals(2, lightSourceArray0.length);
      assertNotNull(catalogLight0);
      
      HomeLight homeLight0 = new HomeLight(catalogLight0);
      assertEquals((byte)10, bigDecimal0.byteValue());
      assertEquals((short)10, bigDecimal0.shortValue());
      assertEquals(0.36957806F, catalogLight0.getDepth(), 0.01F);
      assertNull(catalogLight0.getCreationDate());
      assertEquals("h&9+\"", catalogLight0.getId());
      assertFalse(catalogLight0.isBackFaceShown());
      assertTrue(catalogLight0.isMovable());
      assertFalse(catalogLight0.isModifiable());
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertTrue(catalogLight0.isResizable());
      assertEquals((-815.0F), catalogLight0.getWidth(), 0.01F);
      assertEquals((-694.0F), catalogLight0.getHeight(), 0.01F);
      assertEquals("h&9+\"", catalogLight0.getCreator());
      assertEquals("h&9+\"", catalogLight0.getDescription());
      assertTrue(catalogLight0.isProportional());
      assertFalse(catalogLight0.isDoorOrWindow());
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertEquals((-694.0F), catalogLight0.getElevation(), 0.01F);
      assertTrue(catalogLight0.isTexturable());
      assertNull(catalogLight0.getGrade());
      assertNull(catalogLight0.getColor());
      assertNull(catalogLight0.getInformation());
      assertTrue(catalogLight0.isDeformable());
      assertNull(catalogLight0.getCurrency());
      assertEquals("h&9+\"", catalogLight0.getName());
      assertEquals((-407.5F), homeLight0.getX(), 0.01F);
      assertTrue(homeLight0.isVisible());
      assertTrue(homeLight0.isDeformable());
      assertEquals((-694.0F), homeLight0.getHeight(), 0.01F);
      assertNull(homeLight0.getCurrency());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertNull(homeLight0.getColor());
      assertFalse(homeLight0.isNameVisible());
      assertEquals(0.36957806F, homeLight0.getDepth(), 0.01F);
      assertFalse(homeLight0.isModelMirrored());
      assertEquals(0.18478903F, homeLight0.getY(), 0.01F);
      assertFalse(homeLight0.isBackFaceShown());
      assertEquals((-694.0F), homeLight0.getGroundElevation(), 0.01F);
      assertEquals("h&9+\"", homeLight0.getDescription());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertTrue(homeLight0.isTexturable());
      assertEquals((-694.0F), homeLight0.getElevation(), 0.01F);
      assertEquals("h&9+\"", homeLight0.getName());
      assertFalse(homeLight0.isDoorOrWindow());
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals("h&9+\"", homeLight0.getCatalogId());
      assertTrue(homeLight0.isResizable());
      assertNull(homeLight0.getShininess());
      assertTrue(homeLight0.isMovable());
      assertEquals((-815.0F), homeLight0.getWidth(), 0.01F);
      assertEquals(2, lightSourceArray0.length);
      assertNotNull(homeLight0);
      
      HomeLight homeLight1 = homeLight0.clone();
      assertFalse(homeLight1.equals((Object)homeLight0));
      assertEquals((byte)10, bigDecimal0.byteValue());
      assertEquals((short)10, bigDecimal0.shortValue());
      assertEquals(0.36957806F, catalogLight0.getDepth(), 0.01F);
      assertNull(catalogLight0.getCreationDate());
      assertEquals("h&9+\"", catalogLight0.getId());
      assertFalse(catalogLight0.isBackFaceShown());
      assertTrue(catalogLight0.isMovable());
      assertFalse(catalogLight0.isModifiable());
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertTrue(catalogLight0.isResizable());
      assertEquals((-815.0F), catalogLight0.getWidth(), 0.01F);
      assertEquals((-694.0F), catalogLight0.getHeight(), 0.01F);
      assertEquals("h&9+\"", catalogLight0.getCreator());
      assertEquals("h&9+\"", catalogLight0.getDescription());
      assertTrue(catalogLight0.isProportional());
      assertFalse(catalogLight0.isDoorOrWindow());
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertEquals((-694.0F), catalogLight0.getElevation(), 0.01F);
      assertTrue(catalogLight0.isTexturable());
      assertNull(catalogLight0.getGrade());
      assertNull(catalogLight0.getColor());
      assertNull(catalogLight0.getInformation());
      assertTrue(catalogLight0.isDeformable());
      assertNull(catalogLight0.getCurrency());
      assertEquals("h&9+\"", catalogLight0.getName());
      assertEquals((-407.5F), homeLight0.getX(), 0.01F);
      assertTrue(homeLight0.isVisible());
      assertTrue(homeLight0.isDeformable());
      assertEquals((-694.0F), homeLight0.getHeight(), 0.01F);
      assertNull(homeLight0.getCurrency());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertNull(homeLight0.getColor());
      assertFalse(homeLight0.isNameVisible());
      assertEquals(0.36957806F, homeLight0.getDepth(), 0.01F);
      assertFalse(homeLight0.isModelMirrored());
      assertEquals(0.18478903F, homeLight0.getY(), 0.01F);
      assertFalse(homeLight0.isBackFaceShown());
      assertEquals((-694.0F), homeLight0.getGroundElevation(), 0.01F);
      assertEquals("h&9+\"", homeLight0.getDescription());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertTrue(homeLight0.isTexturable());
      assertEquals((-694.0F), homeLight0.getElevation(), 0.01F);
      assertEquals("h&9+\"", homeLight0.getName());
      assertFalse(homeLight0.isDoorOrWindow());
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals("h&9+\"", homeLight0.getCatalogId());
      assertTrue(homeLight0.isResizable());
      assertNull(homeLight0.getShininess());
      assertTrue(homeLight0.isMovable());
      assertEquals((-815.0F), homeLight0.getWidth(), 0.01F);
      assertEquals(0.36957806F, homeLight1.getDepth(), 0.01F);
      assertEquals(0.0F, homeLight1.getNameXOffset(), 0.01F);
      assertEquals("h&9+\"", homeLight1.getDescription());
      assertTrue(homeLight1.isMovable());
      assertEquals((-815.0F), homeLight1.getWidth(), 0.01F);
      assertTrue(homeLight1.isResizable());
      assertEquals(0.0F, homeLight1.getNameAngle(), 0.01F);
      assertNull(homeLight1.getShininess());
      assertNull(homeLight1.getStaircaseCutOutShape());
      assertEquals("h&9+\"", homeLight1.getCatalogId());
      assertEquals(0.0F, homeLight1.getAngle(), 0.01F);
      assertEquals((-694.0F), homeLight1.getGroundElevation(), 0.01F);
      assertFalse(homeLight1.isDoorOrWindow());
      assertTrue(homeLight1.isTexturable());
      assertEquals((-694.0F), homeLight1.getElevation(), 0.01F);
      assertNull(homeLight1.getCurrency());
      assertEquals(0.0F, homeLight1.getNameYOffset(), 0.01F);
      assertFalse(homeLight1.isNameVisible());
      assertNull(homeLight1.getColor());
      assertTrue(homeLight1.isDeformable());
      assertTrue(homeLight1.isVisible());
      assertFalse(homeLight1.isBackFaceShown());
      assertEquals(0.18478903F, homeLight1.getY(), 0.01F);
      assertFalse(homeLight1.isModelMirrored());
      assertEquals((-694.0F), homeLight1.getHeight(), 0.01F);
      assertEquals((-407.5F), homeLight1.getX(), 0.01F);
      assertEquals(0.5F, homeLight1.getPower(), 0.01F);
      assertEquals("h&9+\"", homeLight1.getName());
      assertEquals(2, lightSourceArray0.length);
      assertNotSame(homeLight0, homeLight1);
      assertNotSame(homeLight1, homeLight0);
      assertNotNull(homeLight1);
      
      HomeLight homeLight2 = (HomeLight)homeLight1.clone();
      assertFalse(homeLight0.equals((Object)homeLight1));
      assertFalse(homeLight1.equals((Object)homeLight0));
      assertFalse(homeLight2.equals((Object)homeLight1));
      assertFalse(homeLight2.equals((Object)homeLight0));
      assertEquals((byte)10, bigDecimal0.byteValue());
      assertEquals((short)10, bigDecimal0.shortValue());
      assertEquals(0.36957806F, catalogLight0.getDepth(), 0.01F);
      assertNull(catalogLight0.getCreationDate());
      assertEquals("h&9+\"", catalogLight0.getId());
      assertFalse(catalogLight0.isBackFaceShown());
      assertTrue(catalogLight0.isMovable());
      assertFalse(catalogLight0.isModifiable());
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertTrue(catalogLight0.isResizable());
      assertEquals((-815.0F), catalogLight0.getWidth(), 0.01F);
      assertEquals((-694.0F), catalogLight0.getHeight(), 0.01F);
      assertEquals("h&9+\"", catalogLight0.getCreator());
      assertEquals("h&9+\"", catalogLight0.getDescription());
      assertTrue(catalogLight0.isProportional());
      assertFalse(catalogLight0.isDoorOrWindow());
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertEquals((-694.0F), catalogLight0.getElevation(), 0.01F);
      assertTrue(catalogLight0.isTexturable());
      assertNull(catalogLight0.getGrade());
      assertNull(catalogLight0.getColor());
      assertNull(catalogLight0.getInformation());
      assertTrue(catalogLight0.isDeformable());
      assertNull(catalogLight0.getCurrency());
      assertEquals("h&9+\"", catalogLight0.getName());
      assertEquals((-407.5F), homeLight0.getX(), 0.01F);
      assertTrue(homeLight0.isVisible());
      assertTrue(homeLight0.isDeformable());
      assertEquals((-694.0F), homeLight0.getHeight(), 0.01F);
      assertNull(homeLight0.getCurrency());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertNull(homeLight0.getColor());
      assertFalse(homeLight0.isNameVisible());
      assertEquals(0.36957806F, homeLight0.getDepth(), 0.01F);
      assertFalse(homeLight0.isModelMirrored());
      assertEquals(0.18478903F, homeLight0.getY(), 0.01F);
      assertFalse(homeLight0.isBackFaceShown());
      assertEquals((-694.0F), homeLight0.getGroundElevation(), 0.01F);
      assertEquals("h&9+\"", homeLight0.getDescription());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertTrue(homeLight0.isTexturable());
      assertEquals((-694.0F), homeLight0.getElevation(), 0.01F);
      assertEquals("h&9+\"", homeLight0.getName());
      assertFalse(homeLight0.isDoorOrWindow());
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals("h&9+\"", homeLight0.getCatalogId());
      assertTrue(homeLight0.isResizable());
      assertNull(homeLight0.getShininess());
      assertTrue(homeLight0.isMovable());
      assertEquals((-815.0F), homeLight0.getWidth(), 0.01F);
      assertEquals(0.36957806F, homeLight1.getDepth(), 0.01F);
      assertEquals(0.0F, homeLight1.getNameXOffset(), 0.01F);
      assertEquals("h&9+\"", homeLight1.getDescription());
      assertTrue(homeLight1.isMovable());
      assertEquals((-815.0F), homeLight1.getWidth(), 0.01F);
      assertTrue(homeLight1.isResizable());
      assertEquals(0.0F, homeLight1.getNameAngle(), 0.01F);
      assertNull(homeLight1.getShininess());
      assertNull(homeLight1.getStaircaseCutOutShape());
      assertEquals("h&9+\"", homeLight1.getCatalogId());
      assertEquals(0.0F, homeLight1.getAngle(), 0.01F);
      assertEquals((-694.0F), homeLight1.getGroundElevation(), 0.01F);
      assertFalse(homeLight1.isDoorOrWindow());
      assertTrue(homeLight1.isTexturable());
      assertEquals((-694.0F), homeLight1.getElevation(), 0.01F);
      assertNull(homeLight1.getCurrency());
      assertEquals(0.0F, homeLight1.getNameYOffset(), 0.01F);
      assertFalse(homeLight1.isNameVisible());
      assertNull(homeLight1.getColor());
      assertTrue(homeLight1.isDeformable());
      assertTrue(homeLight1.isVisible());
      assertFalse(homeLight1.isBackFaceShown());
      assertEquals(0.18478903F, homeLight1.getY(), 0.01F);
      assertFalse(homeLight1.isModelMirrored());
      assertEquals((-694.0F), homeLight1.getHeight(), 0.01F);
      assertEquals((-407.5F), homeLight1.getX(), 0.01F);
      assertEquals(0.5F, homeLight1.getPower(), 0.01F);
      assertEquals("h&9+\"", homeLight1.getName());
      assertNull(homeLight2.getShininess());
      assertTrue(homeLight2.isMovable());
      assertEquals((-815.0F), homeLight2.getWidth(), 0.01F);
      assertEquals(0.5F, homeLight2.getPower(), 0.01F);
      assertEquals(0.36957806F, homeLight2.getDepth(), 0.01F);
      assertEquals((-407.5F), homeLight2.getX(), 0.01F);
      assertEquals((-694.0F), homeLight2.getHeight(), 0.01F);
      assertTrue(homeLight2.isVisible());
      assertEquals((-694.0F), homeLight2.getElevation(), 0.01F);
      assertEquals(0.0F, homeLight2.getNameXOffset(), 0.01F);
      assertEquals("h&9+\"", homeLight2.getCatalogId());
      assertEquals((-694.0F), homeLight2.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight2.getNameAngle(), 0.01F);
      assertNull(homeLight2.getStaircaseCutOutShape());
      assertTrue(homeLight2.isResizable());
      assertTrue(homeLight2.isDeformable());
      assertFalse(homeLight2.isDoorOrWindow());
      assertFalse(homeLight2.isModelMirrored());
      assertEquals(0.18478903F, homeLight2.getY(), 0.01F);
      assertFalse(homeLight2.isBackFaceShown());
      assertEquals(0.0F, homeLight2.getAngle(), 0.01F);
      assertFalse(homeLight2.isNameVisible());
      assertNull(homeLight2.getCurrency());
      assertTrue(homeLight2.isTexturable());
      assertEquals("h&9+\"", homeLight2.getDescription());
      assertEquals("h&9+\"", homeLight2.getName());
      assertEquals(0.0F, homeLight2.getNameYOffset(), 0.01F);
      assertNull(homeLight2.getColor());
      assertEquals(2, lightSourceArray0.length);
      assertNotSame(homeLight0, homeLight1);
      assertNotSame(homeLight0, homeLight2);
      assertNotSame(homeLight1, homeLight0);
      assertNotSame(homeLight1, homeLight2);
      assertNotSame(homeLight2, homeLight1);
      assertNotSame(homeLight2, homeLight0);
      assertNotNull(homeLight2);
      
      boolean boolean0 = homeLight1.isPointAt(114, (-815.0F), 114);
      assertFalse(homeLight0.equals((Object)homeLight1));
      assertFalse(homeLight0.equals((Object)homeLight2));
      assertFalse(homeLight1.equals((Object)homeLight0));
      assertFalse(homeLight1.equals((Object)homeLight2));
      assertEquals((byte)10, bigDecimal0.byteValue());
      assertEquals((short)10, bigDecimal0.shortValue());
      assertEquals(0.36957806F, catalogLight0.getDepth(), 0.01F);
      assertNull(catalogLight0.getCreationDate());
      assertEquals("h&9+\"", catalogLight0.getId());
      assertFalse(catalogLight0.isBackFaceShown());
      assertTrue(catalogLight0.isMovable());
      assertFalse(catalogLight0.isModifiable());
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertTrue(catalogLight0.isResizable());
      assertEquals((-815.0F), catalogLight0.getWidth(), 0.01F);
      assertEquals((-694.0F), catalogLight0.getHeight(), 0.01F);
      assertEquals("h&9+\"", catalogLight0.getCreator());
      assertEquals("h&9+\"", catalogLight0.getDescription());
      assertTrue(catalogLight0.isProportional());
      assertFalse(catalogLight0.isDoorOrWindow());
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertEquals((-694.0F), catalogLight0.getElevation(), 0.01F);
      assertTrue(catalogLight0.isTexturable());
      assertNull(catalogLight0.getGrade());
      assertNull(catalogLight0.getColor());
      assertNull(catalogLight0.getInformation());
      assertTrue(catalogLight0.isDeformable());
      assertNull(catalogLight0.getCurrency());
      assertEquals("h&9+\"", catalogLight0.getName());
      assertEquals((-407.5F), homeLight0.getX(), 0.01F);
      assertTrue(homeLight0.isVisible());
      assertTrue(homeLight0.isDeformable());
      assertEquals((-694.0F), homeLight0.getHeight(), 0.01F);
      assertNull(homeLight0.getCurrency());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertNull(homeLight0.getColor());
      assertFalse(homeLight0.isNameVisible());
      assertEquals(0.36957806F, homeLight0.getDepth(), 0.01F);
      assertFalse(homeLight0.isModelMirrored());
      assertEquals(0.18478903F, homeLight0.getY(), 0.01F);
      assertFalse(homeLight0.isBackFaceShown());
      assertEquals((-694.0F), homeLight0.getGroundElevation(), 0.01F);
      assertEquals("h&9+\"", homeLight0.getDescription());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertTrue(homeLight0.isTexturable());
      assertEquals((-694.0F), homeLight0.getElevation(), 0.01F);
      assertEquals("h&9+\"", homeLight0.getName());
      assertFalse(homeLight0.isDoorOrWindow());
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals("h&9+\"", homeLight0.getCatalogId());
      assertTrue(homeLight0.isResizable());
      assertNull(homeLight0.getShininess());
      assertTrue(homeLight0.isMovable());
      assertEquals((-815.0F), homeLight0.getWidth(), 0.01F);
      assertEquals(0.36957806F, homeLight1.getDepth(), 0.01F);
      assertEquals(0.0F, homeLight1.getNameXOffset(), 0.01F);
      assertEquals("h&9+\"", homeLight1.getDescription());
      assertTrue(homeLight1.isMovable());
      assertEquals((-815.0F), homeLight1.getWidth(), 0.01F);
      assertTrue(homeLight1.isResizable());
      assertEquals(0.0F, homeLight1.getNameAngle(), 0.01F);
      assertNull(homeLight1.getShininess());
      assertNull(homeLight1.getStaircaseCutOutShape());
      assertEquals("h&9+\"", homeLight1.getCatalogId());
      assertEquals(0.0F, homeLight1.getAngle(), 0.01F);
      assertEquals((-694.0F), homeLight1.getGroundElevation(), 0.01F);
      assertFalse(homeLight1.isDoorOrWindow());
      assertTrue(homeLight1.isTexturable());
      assertEquals((-694.0F), homeLight1.getElevation(), 0.01F);
      assertNull(homeLight1.getCurrency());
      assertEquals(0.0F, homeLight1.getNameYOffset(), 0.01F);
      assertFalse(homeLight1.isNameVisible());
      assertNull(homeLight1.getColor());
      assertTrue(homeLight1.isDeformable());
      assertTrue(homeLight1.isVisible());
      assertFalse(homeLight1.isBackFaceShown());
      assertEquals(0.18478903F, homeLight1.getY(), 0.01F);
      assertFalse(homeLight1.isModelMirrored());
      assertEquals((-694.0F), homeLight1.getHeight(), 0.01F);
      assertEquals((-407.5F), homeLight1.getX(), 0.01F);
      assertEquals(0.5F, homeLight1.getPower(), 0.01F);
      assertEquals("h&9+\"", homeLight1.getName());
      assertEquals(2, lightSourceArray0.length);
      assertNotSame(homeLight0, homeLight1);
      assertNotSame(homeLight0, homeLight2);
      assertNotSame(homeLight1, homeLight0);
      assertNotSame(homeLight1, homeLight2);
      assertFalse(boolean0);
      
      homeLight1.setName("h&9+\"");
      assertFalse(homeLight0.equals((Object)homeLight1));
      assertFalse(homeLight0.equals((Object)homeLight2));
      assertFalse(homeLight1.equals((Object)homeLight0));
      assertFalse(homeLight1.equals((Object)homeLight2));
      assertEquals((byte)10, bigDecimal0.byteValue());
      assertEquals((short)10, bigDecimal0.shortValue());
      assertEquals(0.36957806F, catalogLight0.getDepth(), 0.01F);
      assertNull(catalogLight0.getCreationDate());
      assertEquals("h&9+\"", catalogLight0.getId());
      assertFalse(catalogLight0.isBackFaceShown());
      assertTrue(catalogLight0.isMovable());
      assertFalse(catalogLight0.isModifiable());
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertTrue(catalogLight0.isResizable());
      assertEquals((-815.0F), catalogLight0.getWidth(), 0.01F);
      assertEquals((-694.0F), catalogLight0.getHeight(), 0.01F);
      assertEquals("h&9+\"", catalogLight0.getCreator());
      assertEquals("h&9+\"", catalogLight0.getDescription());
      assertTrue(catalogLight0.isProportional());
      assertFalse(catalogLight0.isDoorOrWindow());
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertEquals((-694.0F), catalogLight0.getElevation(), 0.01F);
      assertTrue(catalogLight0.isTexturable());
      assertNull(catalogLight0.getGrade());
      assertNull(catalogLight0.getColor());
      assertNull(catalogLight0.getInformation());
      assertTrue(catalogLight0.isDeformable());
      assertNull(catalogLight0.getCurrency());
      assertEquals("h&9+\"", catalogLight0.getName());
      assertEquals((-407.5F), homeLight0.getX(), 0.01F);
      assertTrue(homeLight0.isVisible());
      assertTrue(homeLight0.isDeformable());
      assertEquals((-694.0F), homeLight0.getHeight(), 0.01F);
      assertNull(homeLight0.getCurrency());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertNull(homeLight0.getColor());
      assertFalse(homeLight0.isNameVisible());
      assertEquals(0.36957806F, homeLight0.getDepth(), 0.01F);
      assertFalse(homeLight0.isModelMirrored());
      assertEquals(0.18478903F, homeLight0.getY(), 0.01F);
      assertFalse(homeLight0.isBackFaceShown());
      assertEquals((-694.0F), homeLight0.getGroundElevation(), 0.01F);
      assertEquals("h&9+\"", homeLight0.getDescription());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertTrue(homeLight0.isTexturable());
      assertEquals((-694.0F), homeLight0.getElevation(), 0.01F);
      assertEquals("h&9+\"", homeLight0.getName());
      assertFalse(homeLight0.isDoorOrWindow());
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals("h&9+\"", homeLight0.getCatalogId());
      assertTrue(homeLight0.isResizable());
      assertNull(homeLight0.getShininess());
      assertTrue(homeLight0.isMovable());
      assertEquals((-815.0F), homeLight0.getWidth(), 0.01F);
      assertEquals(0.36957806F, homeLight1.getDepth(), 0.01F);
      assertEquals(0.0F, homeLight1.getNameXOffset(), 0.01F);
      assertEquals("h&9+\"", homeLight1.getDescription());
      assertTrue(homeLight1.isMovable());
      assertEquals((-815.0F), homeLight1.getWidth(), 0.01F);
      assertTrue(homeLight1.isResizable());
      assertEquals(0.0F, homeLight1.getNameAngle(), 0.01F);
      assertNull(homeLight1.getShininess());
      assertNull(homeLight1.getStaircaseCutOutShape());
      assertEquals("h&9+\"", homeLight1.getCatalogId());
      assertEquals(0.0F, homeLight1.getAngle(), 0.01F);
      assertEquals((-694.0F), homeLight1.getGroundElevation(), 0.01F);
      assertFalse(homeLight1.isDoorOrWindow());
      assertTrue(homeLight1.isTexturable());
      assertEquals((-694.0F), homeLight1.getElevation(), 0.01F);
      assertNull(homeLight1.getCurrency());
      assertEquals(0.0F, homeLight1.getNameYOffset(), 0.01F);
      assertFalse(homeLight1.isNameVisible());
      assertNull(homeLight1.getColor());
      assertTrue(homeLight1.isDeformable());
      assertTrue(homeLight1.isVisible());
      assertFalse(homeLight1.isBackFaceShown());
      assertEquals(0.18478903F, homeLight1.getY(), 0.01F);
      assertFalse(homeLight1.isModelMirrored());
      assertEquals((-694.0F), homeLight1.getHeight(), 0.01F);
      assertEquals((-407.5F), homeLight1.getX(), 0.01F);
      assertEquals(0.5F, homeLight1.getPower(), 0.01F);
      assertEquals("h&9+\"", homeLight1.getName());
      assertEquals(2, lightSourceArray0.length);
      assertNotSame(homeLight0, homeLight1);
      assertNotSame(homeLight0, homeLight2);
      assertNotSame(homeLight1, homeLight0);
      assertNotSame(homeLight1, homeLight2);
      
      Level level0 = homeLight1.getLevel();
      assertFalse(homeLight0.equals((Object)homeLight1));
      assertFalse(homeLight0.equals((Object)homeLight2));
      assertFalse(homeLight1.equals((Object)homeLight0));
      assertFalse(homeLight1.equals((Object)homeLight2));
      assertEquals((byte)10, bigDecimal0.byteValue());
      assertEquals((short)10, bigDecimal0.shortValue());
      assertEquals(0.36957806F, catalogLight0.getDepth(), 0.01F);
      assertNull(catalogLight0.getCreationDate());
      assertEquals("h&9+\"", catalogLight0.getId());
      assertFalse(catalogLight0.isBackFaceShown());
      assertTrue(catalogLight0.isMovable());
      assertFalse(catalogLight0.isModifiable());
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertTrue(catalogLight0.isResizable());
      assertEquals((-815.0F), catalogLight0.getWidth(), 0.01F);
      assertEquals((-694.0F), catalogLight0.getHeight(), 0.01F);
      assertEquals("h&9+\"", catalogLight0.getCreator());
      assertEquals("h&9+\"", catalogLight0.getDescription());
      assertTrue(catalogLight0.isProportional());
      assertFalse(catalogLight0.isDoorOrWindow());
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertEquals((-694.0F), catalogLight0.getElevation(), 0.01F);
      assertTrue(catalogLight0.isTexturable());
      assertNull(catalogLight0.getGrade());
      assertNull(catalogLight0.getColor());
      assertNull(catalogLight0.getInformation());
      assertTrue(catalogLight0.isDeformable());
      assertNull(catalogLight0.getCurrency());
      assertEquals("h&9+\"", catalogLight0.getName());
      assertEquals((-407.5F), homeLight0.getX(), 0.01F);
      assertTrue(homeLight0.isVisible());
      assertTrue(homeLight0.isDeformable());
      assertEquals((-694.0F), homeLight0.getHeight(), 0.01F);
      assertNull(homeLight0.getCurrency());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertNull(homeLight0.getColor());
      assertFalse(homeLight0.isNameVisible());
      assertEquals(0.36957806F, homeLight0.getDepth(), 0.01F);
      assertFalse(homeLight0.isModelMirrored());
      assertEquals(0.18478903F, homeLight0.getY(), 0.01F);
      assertFalse(homeLight0.isBackFaceShown());
      assertEquals((-694.0F), homeLight0.getGroundElevation(), 0.01F);
      assertEquals("h&9+\"", homeLight0.getDescription());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertTrue(homeLight0.isTexturable());
      assertEquals((-694.0F), homeLight0.getElevation(), 0.01F);
      assertEquals("h&9+\"", homeLight0.getName());
      assertFalse(homeLight0.isDoorOrWindow());
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals("h&9+\"", homeLight0.getCatalogId());
      assertTrue(homeLight0.isResizable());
      assertNull(homeLight0.getShininess());
      assertTrue(homeLight0.isMovable());
      assertEquals((-815.0F), homeLight0.getWidth(), 0.01F);
      assertEquals(0.36957806F, homeLight1.getDepth(), 0.01F);
      assertEquals(0.0F, homeLight1.getNameXOffset(), 0.01F);
      assertEquals("h&9+\"", homeLight1.getDescription());
      assertTrue(homeLight1.isMovable());
      assertEquals((-815.0F), homeLight1.getWidth(), 0.01F);
      assertTrue(homeLight1.isResizable());
      assertEquals(0.0F, homeLight1.getNameAngle(), 0.01F);
      assertNull(homeLight1.getShininess());
      assertNull(homeLight1.getStaircaseCutOutShape());
      assertEquals("h&9+\"", homeLight1.getCatalogId());
      assertEquals(0.0F, homeLight1.getAngle(), 0.01F);
      assertEquals((-694.0F), homeLight1.getGroundElevation(), 0.01F);
      assertFalse(homeLight1.isDoorOrWindow());
      assertTrue(homeLight1.isTexturable());
      assertEquals((-694.0F), homeLight1.getElevation(), 0.01F);
      assertNull(homeLight1.getCurrency());
      assertEquals(0.0F, homeLight1.getNameYOffset(), 0.01F);
      assertFalse(homeLight1.isNameVisible());
      assertNull(homeLight1.getColor());
      assertTrue(homeLight1.isDeformable());
      assertTrue(homeLight1.isVisible());
      assertFalse(homeLight1.isBackFaceShown());
      assertEquals(0.18478903F, homeLight1.getY(), 0.01F);
      assertFalse(homeLight1.isModelMirrored());
      assertEquals((-694.0F), homeLight1.getHeight(), 0.01F);
      assertEquals((-407.5F), homeLight1.getX(), 0.01F);
      assertEquals(0.5F, homeLight1.getPower(), 0.01F);
      assertEquals("h&9+\"", homeLight1.getName());
      assertEquals(2, lightSourceArray0.length);
      assertNotSame(homeLight0, homeLight1);
      assertNotSame(homeLight0, homeLight2);
      assertNotSame(homeLight1, homeLight0);
      assertNotSame(homeLight1, homeLight2);
      assertNull(level0);
      
      homeLight0.setLevel((Level) null);
      assertFalse(homeLight0.equals((Object)homeLight1));
      assertFalse(homeLight0.equals((Object)homeLight2));
      assertEquals((byte)10, bigDecimal0.byteValue());
      assertEquals((short)10, bigDecimal0.shortValue());
      assertEquals(0.36957806F, catalogLight0.getDepth(), 0.01F);
      assertNull(catalogLight0.getCreationDate());
      assertEquals("h&9+\"", catalogLight0.getId());
      assertFalse(catalogLight0.isBackFaceShown());
      assertTrue(catalogLight0.isMovable());
      assertFalse(catalogLight0.isModifiable());
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertTrue(catalogLight0.isResizable());
      assertEquals((-815.0F), catalogLight0.getWidth(), 0.01F);
      assertEquals((-694.0F), catalogLight0.getHeight(), 0.01F);
      assertEquals("h&9+\"", catalogLight0.getCreator());
      assertEquals("h&9+\"", catalogLight0.getDescription());
      assertTrue(catalogLight0.isProportional());
      assertFalse(catalogLight0.isDoorOrWindow());
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertEquals((-694.0F), catalogLight0.getElevation(), 0.01F);
      assertTrue(catalogLight0.isTexturable());
      assertNull(catalogLight0.getGrade());
      assertNull(catalogLight0.getColor());
      assertNull(catalogLight0.getInformation());
      assertTrue(catalogLight0.isDeformable());
      assertNull(catalogLight0.getCurrency());
      assertEquals("h&9+\"", catalogLight0.getName());
      assertEquals((-407.5F), homeLight0.getX(), 0.01F);
      assertTrue(homeLight0.isVisible());
      assertTrue(homeLight0.isDeformable());
      assertEquals((-694.0F), homeLight0.getHeight(), 0.01F);
      assertNull(homeLight0.getCurrency());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertNull(homeLight0.getColor());
      assertFalse(homeLight0.isNameVisible());
      assertEquals(0.36957806F, homeLight0.getDepth(), 0.01F);
      assertFalse(homeLight0.isModelMirrored());
      assertEquals(0.18478903F, homeLight0.getY(), 0.01F);
      assertFalse(homeLight0.isBackFaceShown());
      assertEquals((-694.0F), homeLight0.getGroundElevation(), 0.01F);
      assertEquals("h&9+\"", homeLight0.getDescription());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertTrue(homeLight0.isTexturable());
      assertEquals((-694.0F), homeLight0.getElevation(), 0.01F);
      assertEquals("h&9+\"", homeLight0.getName());
      assertFalse(homeLight0.isDoorOrWindow());
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals("h&9+\"", homeLight0.getCatalogId());
      assertTrue(homeLight0.isResizable());
      assertNull(homeLight0.getShininess());
      assertTrue(homeLight0.isMovable());
      assertEquals((-815.0F), homeLight0.getWidth(), 0.01F);
      assertEquals(2, lightSourceArray0.length);
      assertNotSame(homeLight0, homeLight1);
      assertNotSame(homeLight0, homeLight2);
      
      homeLight0.setModelMirrored(false);
      assertFalse(homeLight0.equals((Object)homeLight1));
      assertFalse(homeLight0.equals((Object)homeLight2));
      assertEquals((byte)10, bigDecimal0.byteValue());
      assertEquals((short)10, bigDecimal0.shortValue());
      assertEquals(0.36957806F, catalogLight0.getDepth(), 0.01F);
      assertNull(catalogLight0.getCreationDate());
      assertEquals("h&9+\"", catalogLight0.getId());
      assertFalse(catalogLight0.isBackFaceShown());
      assertTrue(catalogLight0.isMovable());
      assertFalse(catalogLight0.isModifiable());
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertTrue(catalogLight0.isResizable());
      assertEquals((-815.0F), catalogLight0.getWidth(), 0.01F);
      assertEquals((-694.0F), catalogLight0.getHeight(), 0.01F);
      assertEquals("h&9+\"", catalogLight0.getCreator());
      assertEquals("h&9+\"", catalogLight0.getDescription());
      assertTrue(catalogLight0.isProportional());
      assertFalse(catalogLight0.isDoorOrWindow());
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertEquals((-694.0F), catalogLight0.getElevation(), 0.01F);
      assertTrue(catalogLight0.isTexturable());
      assertNull(catalogLight0.getGrade());
      assertNull(catalogLight0.getColor());
      assertNull(catalogLight0.getInformation());
      assertTrue(catalogLight0.isDeformable());
      assertNull(catalogLight0.getCurrency());
      assertEquals("h&9+\"", catalogLight0.getName());
      assertEquals((-407.5F), homeLight0.getX(), 0.01F);
      assertTrue(homeLight0.isVisible());
      assertTrue(homeLight0.isDeformable());
      assertEquals((-694.0F), homeLight0.getHeight(), 0.01F);
      assertNull(homeLight0.getCurrency());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertNull(homeLight0.getColor());
      assertFalse(homeLight0.isNameVisible());
      assertEquals(0.36957806F, homeLight0.getDepth(), 0.01F);
      assertFalse(homeLight0.isModelMirrored());
      assertEquals(0.18478903F, homeLight0.getY(), 0.01F);
      assertFalse(homeLight0.isBackFaceShown());
      assertEquals((-694.0F), homeLight0.getGroundElevation(), 0.01F);
      assertEquals("h&9+\"", homeLight0.getDescription());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertTrue(homeLight0.isTexturable());
      assertEquals((-694.0F), homeLight0.getElevation(), 0.01F);
      assertEquals("h&9+\"", homeLight0.getName());
      assertFalse(homeLight0.isDoorOrWindow());
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals("h&9+\"", homeLight0.getCatalogId());
      assertTrue(homeLight0.isResizable());
      assertNull(homeLight0.getShininess());
      assertTrue(homeLight0.isMovable());
      assertEquals((-815.0F), homeLight0.getWidth(), 0.01F);
      assertEquals(2, lightSourceArray0.length);
      assertNotSame(homeLight0, homeLight1);
      assertNotSame(homeLight0, homeLight2);
      
      boolean boolean1 = homeLight0.isBottomLeftPointAt(0, 407.5F, (-694.0F));
      assertFalse(homeLight0.equals((Object)homeLight1));
      assertFalse(homeLight0.equals((Object)homeLight2));
      assertTrue(boolean1 == boolean0);
      assertEquals((byte)10, bigDecimal0.byteValue());
      assertEquals((short)10, bigDecimal0.shortValue());
      assertEquals(0.36957806F, catalogLight0.getDepth(), 0.01F);
      assertNull(catalogLight0.getCreationDate());
      assertEquals("h&9+\"", catalogLight0.getId());
      assertFalse(catalogLight0.isBackFaceShown());
      assertTrue(catalogLight0.isMovable());
      assertFalse(catalogLight0.isModifiable());
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertTrue(catalogLight0.isResizable());
      assertEquals((-815.0F), catalogLight0.getWidth(), 0.01F);
      assertEquals((-694.0F), catalogLight0.getHeight(), 0.01F);
      assertEquals("h&9+\"", catalogLight0.getCreator());
      assertEquals("h&9+\"", catalogLight0.getDescription());
      assertTrue(catalogLight0.isProportional());
      assertFalse(catalogLight0.isDoorOrWindow());
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertEquals((-694.0F), catalogLight0.getElevation(), 0.01F);
      assertTrue(catalogLight0.isTexturable());
      assertNull(catalogLight0.getGrade());
      assertNull(catalogLight0.getColor());
      assertNull(catalogLight0.getInformation());
      assertTrue(catalogLight0.isDeformable());
      assertNull(catalogLight0.getCurrency());
      assertEquals("h&9+\"", catalogLight0.getName());
      assertEquals((-407.5F), homeLight0.getX(), 0.01F);
      assertTrue(homeLight0.isVisible());
      assertTrue(homeLight0.isDeformable());
      assertEquals((-694.0F), homeLight0.getHeight(), 0.01F);
      assertNull(homeLight0.getCurrency());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertNull(homeLight0.getColor());
      assertFalse(homeLight0.isNameVisible());
      assertEquals(0.36957806F, homeLight0.getDepth(), 0.01F);
      assertFalse(homeLight0.isModelMirrored());
      assertEquals(0.18478903F, homeLight0.getY(), 0.01F);
      assertFalse(homeLight0.isBackFaceShown());
      assertEquals((-694.0F), homeLight0.getGroundElevation(), 0.01F);
      assertEquals("h&9+\"", homeLight0.getDescription());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertTrue(homeLight0.isTexturable());
      assertEquals((-694.0F), homeLight0.getElevation(), 0.01F);
      assertEquals("h&9+\"", homeLight0.getName());
      assertFalse(homeLight0.isDoorOrWindow());
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals("h&9+\"", homeLight0.getCatalogId());
      assertTrue(homeLight0.isResizable());
      assertNull(homeLight0.getShininess());
      assertTrue(homeLight0.isMovable());
      assertEquals((-815.0F), homeLight0.getWidth(), 0.01F);
      assertEquals(2, lightSourceArray0.length);
      assertNotSame(homeLight0, homeLight1);
      assertNotSame(homeLight0, homeLight2);
      assertFalse(boolean1);
      
      boolean boolean2 = homeLight0.isTexturable();
      assertFalse(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      assertFalse(homeLight0.equals((Object)homeLight1));
      assertFalse(homeLight0.equals((Object)homeLight2));
      assertEquals((byte)10, bigDecimal0.byteValue());
      assertEquals((short)10, bigDecimal0.shortValue());
      assertEquals(0.36957806F, catalogLight0.getDepth(), 0.01F);
      assertNull(catalogLight0.getCreationDate());
      assertEquals("h&9+\"", catalogLight0.getId());
      assertFalse(catalogLight0.isBackFaceShown());
      assertTrue(catalogLight0.isMovable());
      assertFalse(catalogLight0.isModifiable());
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertTrue(catalogLight0.isResizable());
      assertEquals((-815.0F), catalogLight0.getWidth(), 0.01F);
      assertEquals((-694.0F), catalogLight0.getHeight(), 0.01F);
      assertEquals("h&9+\"", catalogLight0.getCreator());
      assertEquals("h&9+\"", catalogLight0.getDescription());
      assertTrue(catalogLight0.isProportional());
      assertFalse(catalogLight0.isDoorOrWindow());
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertEquals((-694.0F), catalogLight0.getElevation(), 0.01F);
      assertTrue(catalogLight0.isTexturable());
      assertNull(catalogLight0.getGrade());
      assertNull(catalogLight0.getColor());
      assertNull(catalogLight0.getInformation());
      assertTrue(catalogLight0.isDeformable());
      assertNull(catalogLight0.getCurrency());
      assertEquals("h&9+\"", catalogLight0.getName());
      assertEquals((-407.5F), homeLight0.getX(), 0.01F);
      assertTrue(homeLight0.isVisible());
      assertTrue(homeLight0.isDeformable());
      assertEquals((-694.0F), homeLight0.getHeight(), 0.01F);
      assertNull(homeLight0.getCurrency());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertNull(homeLight0.getColor());
      assertFalse(homeLight0.isNameVisible());
      assertEquals(0.36957806F, homeLight0.getDepth(), 0.01F);
      assertFalse(homeLight0.isModelMirrored());
      assertEquals(0.18478903F, homeLight0.getY(), 0.01F);
      assertFalse(homeLight0.isBackFaceShown());
      assertEquals((-694.0F), homeLight0.getGroundElevation(), 0.01F);
      assertEquals("h&9+\"", homeLight0.getDescription());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertTrue(homeLight0.isTexturable());
      assertEquals((-694.0F), homeLight0.getElevation(), 0.01F);
      assertEquals("h&9+\"", homeLight0.getName());
      assertFalse(homeLight0.isDoorOrWindow());
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals("h&9+\"", homeLight0.getCatalogId());
      assertTrue(homeLight0.isResizable());
      assertNull(homeLight0.getShininess());
      assertTrue(homeLight0.isMovable());
      assertEquals((-815.0F), homeLight0.getWidth(), 0.01F);
      assertEquals(2, lightSourceArray0.length);
      assertNotSame(homeLight0, homeLight1);
      assertNotSame(homeLight0, homeLight2);
      assertTrue(boolean2);
      
      boolean boolean3 = homeLight2.isVisible();
      assertFalse(boolean3 == boolean1);
      assertTrue(boolean3 == boolean2);
      assertFalse(boolean3 == boolean0);
      assertFalse(homeLight0.equals((Object)homeLight1));
      assertFalse(homeLight0.equals((Object)homeLight2));
      assertFalse(homeLight1.equals((Object)homeLight0));
      assertFalse(homeLight1.equals((Object)homeLight2));
      assertFalse(homeLight2.equals((Object)homeLight1));
      assertFalse(homeLight2.equals((Object)homeLight0));
      assertEquals((byte)10, bigDecimal0.byteValue());
      assertEquals((short)10, bigDecimal0.shortValue());
      assertEquals(0.36957806F, catalogLight0.getDepth(), 0.01F);
      assertNull(catalogLight0.getCreationDate());
      assertEquals("h&9+\"", catalogLight0.getId());
      assertFalse(catalogLight0.isBackFaceShown());
      assertTrue(catalogLight0.isMovable());
      assertFalse(catalogLight0.isModifiable());
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertTrue(catalogLight0.isResizable());
      assertEquals((-815.0F), catalogLight0.getWidth(), 0.01F);
      assertEquals((-694.0F), catalogLight0.getHeight(), 0.01F);
      assertEquals("h&9+\"", catalogLight0.getCreator());
      assertEquals("h&9+\"", catalogLight0.getDescription());
      assertTrue(catalogLight0.isProportional());
      assertFalse(catalogLight0.isDoorOrWindow());
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertEquals((-694.0F), catalogLight0.getElevation(), 0.01F);
      assertTrue(catalogLight0.isTexturable());
      assertNull(catalogLight0.getGrade());
      assertNull(catalogLight0.getColor());
      assertNull(catalogLight0.getInformation());
      assertTrue(catalogLight0.isDeformable());
      assertNull(catalogLight0.getCurrency());
      assertEquals("h&9+\"", catalogLight0.getName());
      assertEquals((-407.5F), homeLight0.getX(), 0.01F);
      assertTrue(homeLight0.isVisible());
      assertTrue(homeLight0.isDeformable());
      assertEquals((-694.0F), homeLight0.getHeight(), 0.01F);
      assertNull(homeLight0.getCurrency());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertNull(homeLight0.getColor());
      assertFalse(homeLight0.isNameVisible());
      assertEquals(0.36957806F, homeLight0.getDepth(), 0.01F);
      assertFalse(homeLight0.isModelMirrored());
      assertEquals(0.18478903F, homeLight0.getY(), 0.01F);
      assertFalse(homeLight0.isBackFaceShown());
      assertEquals((-694.0F), homeLight0.getGroundElevation(), 0.01F);
      assertEquals("h&9+\"", homeLight0.getDescription());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertTrue(homeLight0.isTexturable());
      assertEquals((-694.0F), homeLight0.getElevation(), 0.01F);
      assertEquals("h&9+\"", homeLight0.getName());
      assertFalse(homeLight0.isDoorOrWindow());
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals("h&9+\"", homeLight0.getCatalogId());
      assertTrue(homeLight0.isResizable());
      assertNull(homeLight0.getShininess());
      assertTrue(homeLight0.isMovable());
      assertEquals((-815.0F), homeLight0.getWidth(), 0.01F);
      assertEquals(0.36957806F, homeLight1.getDepth(), 0.01F);
      assertEquals(0.0F, homeLight1.getNameXOffset(), 0.01F);
      assertEquals("h&9+\"", homeLight1.getDescription());
      assertTrue(homeLight1.isMovable());
      assertEquals((-815.0F), homeLight1.getWidth(), 0.01F);
      assertTrue(homeLight1.isResizable());
      assertEquals(0.0F, homeLight1.getNameAngle(), 0.01F);
      assertNull(homeLight1.getShininess());
      assertNull(homeLight1.getStaircaseCutOutShape());
      assertEquals("h&9+\"", homeLight1.getCatalogId());
      assertEquals(0.0F, homeLight1.getAngle(), 0.01F);
      assertEquals((-694.0F), homeLight1.getGroundElevation(), 0.01F);
      assertFalse(homeLight1.isDoorOrWindow());
      assertTrue(homeLight1.isTexturable());
      assertEquals((-694.0F), homeLight1.getElevation(), 0.01F);
      assertNull(homeLight1.getCurrency());
      assertEquals(0.0F, homeLight1.getNameYOffset(), 0.01F);
      assertFalse(homeLight1.isNameVisible());
      assertNull(homeLight1.getColor());
      assertTrue(homeLight1.isDeformable());
      assertTrue(homeLight1.isVisible());
      assertFalse(homeLight1.isBackFaceShown());
      assertEquals(0.18478903F, homeLight1.getY(), 0.01F);
      assertFalse(homeLight1.isModelMirrored());
      assertEquals((-694.0F), homeLight1.getHeight(), 0.01F);
      assertEquals((-407.5F), homeLight1.getX(), 0.01F);
      assertEquals(0.5F, homeLight1.getPower(), 0.01F);
      assertEquals("h&9+\"", homeLight1.getName());
      assertNull(homeLight2.getShininess());
      assertTrue(homeLight2.isMovable());
      assertEquals((-815.0F), homeLight2.getWidth(), 0.01F);
      assertEquals(0.5F, homeLight2.getPower(), 0.01F);
      assertEquals(0.36957806F, homeLight2.getDepth(), 0.01F);
      assertEquals((-407.5F), homeLight2.getX(), 0.01F);
      assertEquals((-694.0F), homeLight2.getHeight(), 0.01F);
      assertTrue(homeLight2.isVisible());
      assertEquals((-694.0F), homeLight2.getElevation(), 0.01F);
      assertEquals(0.0F, homeLight2.getNameXOffset(), 0.01F);
      assertEquals("h&9+\"", homeLight2.getCatalogId());
      assertEquals((-694.0F), homeLight2.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight2.getNameAngle(), 0.01F);
      assertNull(homeLight2.getStaircaseCutOutShape());
      assertTrue(homeLight2.isResizable());
      assertTrue(homeLight2.isDeformable());
      assertFalse(homeLight2.isDoorOrWindow());
      assertFalse(homeLight2.isModelMirrored());
      assertEquals(0.18478903F, homeLight2.getY(), 0.01F);
      assertFalse(homeLight2.isBackFaceShown());
      assertEquals(0.0F, homeLight2.getAngle(), 0.01F);
      assertFalse(homeLight2.isNameVisible());
      assertNull(homeLight2.getCurrency());
      assertTrue(homeLight2.isTexturable());
      assertEquals("h&9+\"", homeLight2.getDescription());
      assertEquals("h&9+\"", homeLight2.getName());
      assertEquals(0.0F, homeLight2.getNameYOffset(), 0.01F);
      assertNull(homeLight2.getColor());
      assertEquals(2, lightSourceArray0.length);
      assertNotSame(homeLight0, homeLight1);
      assertNotSame(homeLight0, homeLight2);
      assertNotSame(homeLight1, homeLight0);
      assertNotSame(homeLight1, homeLight2);
      assertNotSame(homeLight2, homeLight1);
      assertNotSame(homeLight2, homeLight0);
      assertTrue(boolean3);
  }

  @Test(timeout = 4000)
  public void test260()  throws Throwable  {
      LightSource[] lightSourceArray0 = new LightSource[2];
      BigDecimal bigDecimal0 = BigDecimal.TEN;
      assertEquals((byte)10, bigDecimal0.byteValue());
      assertEquals((short)10, bigDecimal0.shortValue());
      assertNotNull(bigDecimal0);
      
      CatalogLight catalogLight0 = new CatalogLight("h&i*+\"", "h&i*+\"", "h&i*+\"", (Content) null, (Content) null, (-2263.3643F), (-2263.3643F), (-2263.3643F), (-2263.3643F), false, lightSourceArray0, (float[][]) null, "h&i*+\"", false, bigDecimal0, bigDecimal0);
      assertEquals((byte)10, bigDecimal0.byteValue());
      assertEquals((short)10, bigDecimal0.shortValue());
      assertNull(catalogLight0.getCurrency());
      assertEquals((-2263.3643F), catalogLight0.getDepth(), 0.01F);
      assertTrue(catalogLight0.isTexturable());
      assertNull(catalogLight0.getGrade());
      assertTrue(catalogLight0.isProportional());
      assertFalse(catalogLight0.isModifiable());
      assertEquals((-2263.3643F), catalogLight0.getElevation(), 0.01F);
      assertNull(catalogLight0.getCreationDate());
      assertEquals("h&i*+\"", catalogLight0.getName());
      assertEquals((-2263.3643F), catalogLight0.getWidth(), 0.01F);
      assertFalse(catalogLight0.isResizable());
      assertEquals((-2263.3643F), catalogLight0.getHeight(), 0.01F);
      assertFalse(catalogLight0.isMovable());
      assertEquals("h&i*+\"", catalogLight0.getCreator());
      assertEquals("h&i*+\"", catalogLight0.getDescription());
      assertEquals("h&i*+\"", catalogLight0.getId());
      assertNull(catalogLight0.getInformation());
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertTrue(catalogLight0.isDeformable());
      assertFalse(catalogLight0.isDoorOrWindow());
      assertNull(catalogLight0.getColor());
      assertFalse(catalogLight0.isBackFaceShown());
      assertEquals(2, lightSourceArray0.length);
      assertNotNull(catalogLight0);
      
      HomeLight homeLight0 = new HomeLight(catalogLight0);
      assertEquals((byte)10, bigDecimal0.byteValue());
      assertEquals((short)10, bigDecimal0.shortValue());
      assertNull(catalogLight0.getCurrency());
      assertEquals((-2263.3643F), catalogLight0.getDepth(), 0.01F);
      assertTrue(catalogLight0.isTexturable());
      assertNull(catalogLight0.getGrade());
      assertTrue(catalogLight0.isProportional());
      assertFalse(catalogLight0.isModifiable());
      assertEquals((-2263.3643F), catalogLight0.getElevation(), 0.01F);
      assertNull(catalogLight0.getCreationDate());
      assertEquals("h&i*+\"", catalogLight0.getName());
      assertEquals((-2263.3643F), catalogLight0.getWidth(), 0.01F);
      assertFalse(catalogLight0.isResizable());
      assertEquals((-2263.3643F), catalogLight0.getHeight(), 0.01F);
      assertFalse(catalogLight0.isMovable());
      assertEquals("h&i*+\"", catalogLight0.getCreator());
      assertEquals("h&i*+\"", catalogLight0.getDescription());
      assertEquals("h&i*+\"", catalogLight0.getId());
      assertNull(catalogLight0.getInformation());
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertTrue(catalogLight0.isDeformable());
      assertFalse(catalogLight0.isDoorOrWindow());
      assertNull(catalogLight0.getColor());
      assertFalse(catalogLight0.isBackFaceShown());
      assertEquals((-1131.6821F), homeLight0.getY(), 0.01F);
      assertFalse(homeLight0.isNameVisible());
      assertTrue(homeLight0.isDeformable());
      assertEquals((-1131.6821F), homeLight0.getX(), 0.01F);
      assertEquals((-2263.3643F), homeLight0.getGroundElevation(), 0.01F);
      assertNull(homeLight0.getCurrency());
      assertNull(homeLight0.getColor());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      assertEquals((-2263.3643F), homeLight0.getWidth(), 0.01F);
      assertEquals("h&i*+\"", homeLight0.getName());
      assertTrue(homeLight0.isTexturable());
      assertEquals("h&i*+\"", homeLight0.getDescription());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertFalse(homeLight0.isModelMirrored());
      assertEquals((-2263.3643F), homeLight0.getElevation(), 0.01F);
      assertFalse(homeLight0.isBackFaceShown());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals("h&i*+\"", homeLight0.getCatalogId());
      assertEquals((-2263.3643F), homeLight0.getDepth(), 0.01F);
      assertFalse(homeLight0.isResizable());
      assertNull(homeLight0.getShininess());
      assertFalse(homeLight0.isMovable());
      assertTrue(homeLight0.isVisible());
      assertEquals((-2263.3643F), homeLight0.getHeight(), 0.01F);
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertEquals(2, lightSourceArray0.length);
      assertNotNull(homeLight0);
      
      Level level0 = new Level("h&i*+\"", 0, 0, 0);
      assertEquals(0.0F, level0.getFloorThickness(), 0.01F);
      assertEquals("h&i*+\"", level0.getName());
      assertEquals(0.0F, level0.getElevation(), 0.01F);
      assertEquals(0.0F, level0.getHeight(), 0.01F);
      assertTrue(level0.isVisible());
      assertNotNull(level0);
      
      boolean boolean0 = homeLight0.isAtLevel(level0);
      assertEquals((byte)10, bigDecimal0.byteValue());
      assertEquals((short)10, bigDecimal0.shortValue());
      assertNull(catalogLight0.getCurrency());
      assertEquals((-2263.3643F), catalogLight0.getDepth(), 0.01F);
      assertTrue(catalogLight0.isTexturable());
      assertNull(catalogLight0.getGrade());
      assertTrue(catalogLight0.isProportional());
      assertFalse(catalogLight0.isModifiable());
      assertEquals((-2263.3643F), catalogLight0.getElevation(), 0.01F);
      assertNull(catalogLight0.getCreationDate());
      assertEquals("h&i*+\"", catalogLight0.getName());
      assertEquals((-2263.3643F), catalogLight0.getWidth(), 0.01F);
      assertFalse(catalogLight0.isResizable());
      assertEquals((-2263.3643F), catalogLight0.getHeight(), 0.01F);
      assertFalse(catalogLight0.isMovable());
      assertEquals("h&i*+\"", catalogLight0.getCreator());
      assertEquals("h&i*+\"", catalogLight0.getDescription());
      assertEquals("h&i*+\"", catalogLight0.getId());
      assertNull(catalogLight0.getInformation());
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertTrue(catalogLight0.isDeformable());
      assertFalse(catalogLight0.isDoorOrWindow());
      assertNull(catalogLight0.getColor());
      assertFalse(catalogLight0.isBackFaceShown());
      assertEquals((-1131.6821F), homeLight0.getY(), 0.01F);
      assertFalse(homeLight0.isNameVisible());
      assertTrue(homeLight0.isDeformable());
      assertEquals((-1131.6821F), homeLight0.getX(), 0.01F);
      assertEquals((-2263.3643F), homeLight0.getGroundElevation(), 0.01F);
      assertNull(homeLight0.getCurrency());
      assertNull(homeLight0.getColor());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      assertEquals((-2263.3643F), homeLight0.getWidth(), 0.01F);
      assertEquals("h&i*+\"", homeLight0.getName());
      assertTrue(homeLight0.isTexturable());
      assertEquals("h&i*+\"", homeLight0.getDescription());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertFalse(homeLight0.isModelMirrored());
      assertEquals((-2263.3643F), homeLight0.getElevation(), 0.01F);
      assertFalse(homeLight0.isBackFaceShown());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals("h&i*+\"", homeLight0.getCatalogId());
      assertEquals((-2263.3643F), homeLight0.getDepth(), 0.01F);
      assertFalse(homeLight0.isResizable());
      assertNull(homeLight0.getShininess());
      assertFalse(homeLight0.isMovable());
      assertTrue(homeLight0.isVisible());
      assertEquals((-2263.3643F), homeLight0.getHeight(), 0.01F);
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertEquals(0.0F, level0.getFloorThickness(), 0.01F);
      assertEquals("h&i*+\"", level0.getName());
      assertEquals(0.0F, level0.getElevation(), 0.01F);
      assertEquals(0.0F, level0.getHeight(), 0.01F);
      assertTrue(level0.isVisible());
      assertEquals(2, lightSourceArray0.length);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test261()  throws Throwable  {
      LightSource[] lightSourceArray0 = new LightSource[10];
      BigDecimal bigDecimal0 = BigDecimal.ZERO;
      assertEquals((short)0, bigDecimal0.shortValue());
      assertEquals((byte)0, bigDecimal0.byteValue());
      assertNotNull(bigDecimal0);
      
      CatalogLight catalogLight0 = new CatalogLight("h&+)`\"", "h&+)`\"", "h&+)`\"", (Content) null, (Content) null, (-2263.0F), (-2263.0F), (-2263.0F), (-2263.0F), false, lightSourceArray0, (float[][]) null, "h&+)`\"", false, bigDecimal0, bigDecimal0);
      assertEquals((short)0, bigDecimal0.shortValue());
      assertEquals((byte)0, bigDecimal0.byteValue());
      assertNull(catalogLight0.getColor());
      assertFalse(catalogLight0.isModifiable());
      assertFalse(catalogLight0.isBackFaceShown());
      assertNull(catalogLight0.getCreationDate());
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertEquals("h&+)`\"", catalogLight0.getDescription());
      assertFalse(catalogLight0.isResizable());
      assertTrue(catalogLight0.isTexturable());
      assertTrue(catalogLight0.isProportional());
      assertEquals("h&+)`\"", catalogLight0.getCreator());
      assertNull(catalogLight0.getGrade());
      assertEquals((-2263.0F), catalogLight0.getHeight(), 0.01F);
      assertFalse(catalogLight0.isDoorOrWindow());
      assertEquals("h&+)`\"", catalogLight0.getId());
      assertEquals((-2263.0F), catalogLight0.getWidth(), 0.01F);
      assertTrue(catalogLight0.isDeformable());
      assertNull(catalogLight0.getInformation());
      assertEquals((-2263.0F), catalogLight0.getElevation(), 0.01F);
      assertFalse(catalogLight0.isMovable());
      assertEquals((-2263.0F), catalogLight0.getDepth(), 0.01F);
      assertEquals("h&+)`\"", catalogLight0.getName());
      assertNull(catalogLight0.getCurrency());
      assertEquals(10, lightSourceArray0.length);
      assertNotNull(catalogLight0);
      
      HomeLight homeLight0 = new HomeLight(catalogLight0);
      assertEquals((short)0, bigDecimal0.shortValue());
      assertEquals((byte)0, bigDecimal0.byteValue());
      assertNull(catalogLight0.getColor());
      assertFalse(catalogLight0.isModifiable());
      assertFalse(catalogLight0.isBackFaceShown());
      assertNull(catalogLight0.getCreationDate());
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertEquals("h&+)`\"", catalogLight0.getDescription());
      assertFalse(catalogLight0.isResizable());
      assertTrue(catalogLight0.isTexturable());
      assertTrue(catalogLight0.isProportional());
      assertEquals("h&+)`\"", catalogLight0.getCreator());
      assertNull(catalogLight0.getGrade());
      assertEquals((-2263.0F), catalogLight0.getHeight(), 0.01F);
      assertFalse(catalogLight0.isDoorOrWindow());
      assertEquals("h&+)`\"", catalogLight0.getId());
      assertEquals((-2263.0F), catalogLight0.getWidth(), 0.01F);
      assertTrue(catalogLight0.isDeformable());
      assertNull(catalogLight0.getInformation());
      assertEquals((-2263.0F), catalogLight0.getElevation(), 0.01F);
      assertFalse(catalogLight0.isMovable());
      assertEquals((-2263.0F), catalogLight0.getDepth(), 0.01F);
      assertEquals("h&+)`\"", catalogLight0.getName());
      assertNull(catalogLight0.getCurrency());
      assertFalse(homeLight0.isBackFaceShown());
      assertFalse(homeLight0.isDoorOrWindow());
      assertNull(homeLight0.getColor());
      assertFalse(homeLight0.isModelMirrored());
      assertTrue(homeLight0.isTexturable());
      assertEquals("h&+)`\"", homeLight0.getDescription());
      assertEquals((-2263.0F), homeLight0.getDepth(), 0.01F);
      assertFalse(homeLight0.isNameVisible());
      assertEquals("h&+)`\"", homeLight0.getCatalogId());
      assertEquals((-2263.0F), homeLight0.getWidth(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertEquals((-2263.0F), homeLight0.getElevation(), 0.01F);
      assertNull(homeLight0.getCurrency());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals((-2263.0F), homeLight0.getGroundElevation(), 0.01F);
      assertEquals((-1131.5F), homeLight0.getX(), 0.01F);
      assertEquals((-1131.5F), homeLight0.getY(), 0.01F);
      assertNull(homeLight0.getShininess());
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertFalse(homeLight0.isMovable());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertFalse(homeLight0.isResizable());
      assertTrue(homeLight0.isDeformable());
      assertTrue(homeLight0.isVisible());
      assertEquals((-2263.0F), homeLight0.getHeight(), 0.01F);
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertEquals("h&+)`\"", homeLight0.getName());
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals(10, lightSourceArray0.length);
      assertNotNull(homeLight0);
      
      boolean boolean0 = homeLight0.isPointAt((-2263.0F), (-2263.0F), (-2263.0F));
      assertEquals((short)0, bigDecimal0.shortValue());
      assertEquals((byte)0, bigDecimal0.byteValue());
      assertNull(catalogLight0.getColor());
      assertFalse(catalogLight0.isModifiable());
      assertFalse(catalogLight0.isBackFaceShown());
      assertNull(catalogLight0.getCreationDate());
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertEquals("h&+)`\"", catalogLight0.getDescription());
      assertFalse(catalogLight0.isResizable());
      assertTrue(catalogLight0.isTexturable());
      assertTrue(catalogLight0.isProportional());
      assertEquals("h&+)`\"", catalogLight0.getCreator());
      assertNull(catalogLight0.getGrade());
      assertEquals((-2263.0F), catalogLight0.getHeight(), 0.01F);
      assertFalse(catalogLight0.isDoorOrWindow());
      assertEquals("h&+)`\"", catalogLight0.getId());
      assertEquals((-2263.0F), catalogLight0.getWidth(), 0.01F);
      assertTrue(catalogLight0.isDeformable());
      assertNull(catalogLight0.getInformation());
      assertEquals((-2263.0F), catalogLight0.getElevation(), 0.01F);
      assertFalse(catalogLight0.isMovable());
      assertEquals((-2263.0F), catalogLight0.getDepth(), 0.01F);
      assertEquals("h&+)`\"", catalogLight0.getName());
      assertNull(catalogLight0.getCurrency());
      assertFalse(homeLight0.isBackFaceShown());
      assertFalse(homeLight0.isDoorOrWindow());
      assertNull(homeLight0.getColor());
      assertFalse(homeLight0.isModelMirrored());
      assertTrue(homeLight0.isTexturable());
      assertEquals("h&+)`\"", homeLight0.getDescription());
      assertEquals((-2263.0F), homeLight0.getDepth(), 0.01F);
      assertFalse(homeLight0.isNameVisible());
      assertEquals("h&+)`\"", homeLight0.getCatalogId());
      assertEquals((-2263.0F), homeLight0.getWidth(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertEquals((-2263.0F), homeLight0.getElevation(), 0.01F);
      assertNull(homeLight0.getCurrency());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals((-2263.0F), homeLight0.getGroundElevation(), 0.01F);
      assertEquals((-1131.5F), homeLight0.getX(), 0.01F);
      assertEquals((-1131.5F), homeLight0.getY(), 0.01F);
      assertNull(homeLight0.getShininess());
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertFalse(homeLight0.isMovable());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertFalse(homeLight0.isResizable());
      assertTrue(homeLight0.isDeformable());
      assertTrue(homeLight0.isVisible());
      assertEquals((-2263.0F), homeLight0.getHeight(), 0.01F);
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertEquals("h&+)`\"", homeLight0.getName());
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals(10, lightSourceArray0.length);
      assertFalse(boolean0);
      
      float[][] floatArray0 = homeLight0.getPoints();
      assertEquals((short)0, bigDecimal0.shortValue());
      assertEquals((byte)0, bigDecimal0.byteValue());
      assertNull(catalogLight0.getColor());
      assertFalse(catalogLight0.isModifiable());
      assertFalse(catalogLight0.isBackFaceShown());
      assertNull(catalogLight0.getCreationDate());
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertEquals("h&+)`\"", catalogLight0.getDescription());
      assertFalse(catalogLight0.isResizable());
      assertTrue(catalogLight0.isTexturable());
      assertTrue(catalogLight0.isProportional());
      assertEquals("h&+)`\"", catalogLight0.getCreator());
      assertNull(catalogLight0.getGrade());
      assertEquals((-2263.0F), catalogLight0.getHeight(), 0.01F);
      assertFalse(catalogLight0.isDoorOrWindow());
      assertEquals("h&+)`\"", catalogLight0.getId());
      assertEquals((-2263.0F), catalogLight0.getWidth(), 0.01F);
      assertTrue(catalogLight0.isDeformable());
      assertNull(catalogLight0.getInformation());
      assertEquals((-2263.0F), catalogLight0.getElevation(), 0.01F);
      assertFalse(catalogLight0.isMovable());
      assertEquals((-2263.0F), catalogLight0.getDepth(), 0.01F);
      assertEquals("h&+)`\"", catalogLight0.getName());
      assertNull(catalogLight0.getCurrency());
      assertFalse(homeLight0.isBackFaceShown());
      assertFalse(homeLight0.isDoorOrWindow());
      assertNull(homeLight0.getColor());
      assertFalse(homeLight0.isModelMirrored());
      assertTrue(homeLight0.isTexturable());
      assertEquals("h&+)`\"", homeLight0.getDescription());
      assertEquals((-2263.0F), homeLight0.getDepth(), 0.01F);
      assertFalse(homeLight0.isNameVisible());
      assertEquals("h&+)`\"", homeLight0.getCatalogId());
      assertEquals((-2263.0F), homeLight0.getWidth(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertEquals((-2263.0F), homeLight0.getElevation(), 0.01F);
      assertNull(homeLight0.getCurrency());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals((-2263.0F), homeLight0.getGroundElevation(), 0.01F);
      assertEquals((-1131.5F), homeLight0.getX(), 0.01F);
      assertEquals((-1131.5F), homeLight0.getY(), 0.01F);
      assertNull(homeLight0.getShininess());
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertFalse(homeLight0.isMovable());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertFalse(homeLight0.isResizable());
      assertTrue(homeLight0.isDeformable());
      assertTrue(homeLight0.isVisible());
      assertEquals((-2263.0F), homeLight0.getHeight(), 0.01F);
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertEquals("h&+)`\"", homeLight0.getName());
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals(10, lightSourceArray0.length);
      assertEquals(4, floatArray0.length);
      assertNotNull(floatArray0);
  }

  @Test(timeout = 4000)
  public void test262()  throws Throwable  {
      LightSource[] lightSourceArray0 = new LightSource[4];
      BigDecimal bigDecimal0 = BigDecimal.TEN;
      assertEquals((short)10, bigDecimal0.shortValue());
      assertEquals((byte)10, bigDecimal0.byteValue());
      assertNotNull(bigDecimal0);
      
      CatalogLight catalogLight0 = new CatalogLight("jP", "jP", "jP", (Content) null, (Content) null, 0.3926991F, 92.121765F, 233.10785F, (-727.8896F), true, lightSourceArray0, (float[][]) null, "jP", true, bigDecimal0, bigDecimal0);
      assertEquals((short)10, bigDecimal0.shortValue());
      assertEquals((byte)10, bigDecimal0.byteValue());
      assertEquals(92.121765F, catalogLight0.getDepth(), 0.01F);
      assertEquals((-727.8896F), catalogLight0.getElevation(), 0.01F);
      assertNull(catalogLight0.getColor());
      assertFalse(catalogLight0.isModifiable());
      assertEquals(233.10785F, catalogLight0.getHeight(), 0.01F);
      assertFalse(catalogLight0.isDoorOrWindow());
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertTrue(catalogLight0.isTexturable());
      assertTrue(catalogLight0.isMovable());
      assertFalse(catalogLight0.isBackFaceShown());
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertTrue(catalogLight0.isResizable());
      assertNull(catalogLight0.getInformation());
      assertNull(catalogLight0.getGrade());
      assertTrue(catalogLight0.isDeformable());
      assertEquals("jP", catalogLight0.getName());
      assertEquals("jP", catalogLight0.getCreator());
      assertEquals("jP", catalogLight0.getDescription());
      assertNull(catalogLight0.getCurrency());
      assertTrue(catalogLight0.isProportional());
      assertEquals(0.3926991F, catalogLight0.getWidth(), 0.01F);
      assertNull(catalogLight0.getCreationDate());
      assertEquals("jP", catalogLight0.getId());
      assertEquals(4, lightSourceArray0.length);
      assertNotNull(catalogLight0);
      
      HomeLight homeLight0 = new HomeLight(catalogLight0);
      assertEquals((short)10, bigDecimal0.shortValue());
      assertEquals((byte)10, bigDecimal0.byteValue());
      assertEquals(92.121765F, catalogLight0.getDepth(), 0.01F);
      assertEquals((-727.8896F), catalogLight0.getElevation(), 0.01F);
      assertNull(catalogLight0.getColor());
      assertFalse(catalogLight0.isModifiable());
      assertEquals(233.10785F, catalogLight0.getHeight(), 0.01F);
      assertFalse(catalogLight0.isDoorOrWindow());
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertTrue(catalogLight0.isTexturable());
      assertTrue(catalogLight0.isMovable());
      assertFalse(catalogLight0.isBackFaceShown());
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertTrue(catalogLight0.isResizable());
      assertNull(catalogLight0.getInformation());
      assertNull(catalogLight0.getGrade());
      assertTrue(catalogLight0.isDeformable());
      assertEquals("jP", catalogLight0.getName());
      assertEquals("jP", catalogLight0.getCreator());
      assertEquals("jP", catalogLight0.getDescription());
      assertNull(catalogLight0.getCurrency());
      assertTrue(catalogLight0.isProportional());
      assertEquals(0.3926991F, catalogLight0.getWidth(), 0.01F);
      assertNull(catalogLight0.getCreationDate());
      assertEquals("jP", catalogLight0.getId());
      assertNull(homeLight0.getShininess());
      assertEquals((-727.8896F), homeLight0.getGroundElevation(), 0.01F);
      assertTrue(homeLight0.isResizable());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals((-727.8896F), homeLight0.getElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertFalse(homeLight0.isNameVisible());
      assertEquals(0.19634955F, homeLight0.getX(), 0.01F);
      assertFalse(homeLight0.isBackFaceShown());
      assertTrue(homeLight0.isTexturable());
      assertFalse(homeLight0.isDoorOrWindow());
      assertEquals(0.3926991F, homeLight0.getWidth(), 0.01F);
      assertEquals("jP", homeLight0.getName());
      assertFalse(homeLight0.isModelMirrored());
      assertEquals("jP", homeLight0.getCatalogId());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertNull(homeLight0.getColor());
      assertEquals("jP", homeLight0.getDescription());
      assertEquals(233.10785F, homeLight0.getHeight(), 0.01F);
      assertNull(homeLight0.getCurrency());
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertTrue(homeLight0.isVisible());
      assertTrue(homeLight0.isDeformable());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertEquals(46.060883F, homeLight0.getY(), 0.01F);
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals(92.121765F, homeLight0.getDepth(), 0.01F);
      assertTrue(homeLight0.isMovable());
      assertEquals(4, lightSourceArray0.length);
      assertNotNull(homeLight0);
      
      FurnitureCategory furnitureCategory0 = catalogLight0.getCategory();
      assertEquals((short)10, bigDecimal0.shortValue());
      assertEquals((byte)10, bigDecimal0.byteValue());
      assertEquals(92.121765F, catalogLight0.getDepth(), 0.01F);
      assertEquals((-727.8896F), catalogLight0.getElevation(), 0.01F);
      assertNull(catalogLight0.getColor());
      assertFalse(catalogLight0.isModifiable());
      assertEquals(233.10785F, catalogLight0.getHeight(), 0.01F);
      assertFalse(catalogLight0.isDoorOrWindow());
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertTrue(catalogLight0.isTexturable());
      assertTrue(catalogLight0.isMovable());
      assertFalse(catalogLight0.isBackFaceShown());
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertTrue(catalogLight0.isResizable());
      assertNull(catalogLight0.getInformation());
      assertNull(catalogLight0.getGrade());
      assertTrue(catalogLight0.isDeformable());
      assertEquals("jP", catalogLight0.getName());
      assertEquals("jP", catalogLight0.getCreator());
      assertEquals("jP", catalogLight0.getDescription());
      assertNull(catalogLight0.getCurrency());
      assertTrue(catalogLight0.isProportional());
      assertEquals(0.3926991F, catalogLight0.getWidth(), 0.01F);
      assertNull(catalogLight0.getCreationDate());
      assertEquals("jP", catalogLight0.getId());
      assertEquals(4, lightSourceArray0.length);
      assertNull(furnitureCategory0);
      
      catalogLight0.setCategory((FurnitureCategory) null);
      assertEquals((short)10, bigDecimal0.shortValue());
      assertEquals((byte)10, bigDecimal0.byteValue());
      assertEquals(92.121765F, catalogLight0.getDepth(), 0.01F);
      assertEquals((-727.8896F), catalogLight0.getElevation(), 0.01F);
      assertNull(catalogLight0.getColor());
      assertFalse(catalogLight0.isModifiable());
      assertEquals(233.10785F, catalogLight0.getHeight(), 0.01F);
      assertFalse(catalogLight0.isDoorOrWindow());
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertTrue(catalogLight0.isTexturable());
      assertTrue(catalogLight0.isMovable());
      assertFalse(catalogLight0.isBackFaceShown());
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertTrue(catalogLight0.isResizable());
      assertNull(catalogLight0.getInformation());
      assertNull(catalogLight0.getGrade());
      assertTrue(catalogLight0.isDeformable());
      assertEquals("jP", catalogLight0.getName());
      assertEquals("jP", catalogLight0.getCreator());
      assertEquals("jP", catalogLight0.getDescription());
      assertNull(catalogLight0.getCurrency());
      assertTrue(catalogLight0.isProportional());
      assertEquals(0.3926991F, catalogLight0.getWidth(), 0.01F);
      assertNull(catalogLight0.getCreationDate());
      assertEquals("jP", catalogLight0.getId());
      assertEquals(4, lightSourceArray0.length);
      
      HomeLight homeLight1 = new HomeLight(catalogLight0);
      assertFalse(homeLight1.equals((Object)homeLight0));
      assertEquals((short)10, bigDecimal0.shortValue());
      assertEquals((byte)10, bigDecimal0.byteValue());
      assertEquals(92.121765F, catalogLight0.getDepth(), 0.01F);
      assertEquals((-727.8896F), catalogLight0.getElevation(), 0.01F);
      assertNull(catalogLight0.getColor());
      assertFalse(catalogLight0.isModifiable());
      assertEquals(233.10785F, catalogLight0.getHeight(), 0.01F);
      assertFalse(catalogLight0.isDoorOrWindow());
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertTrue(catalogLight0.isTexturable());
      assertTrue(catalogLight0.isMovable());
      assertFalse(catalogLight0.isBackFaceShown());
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertTrue(catalogLight0.isResizable());
      assertNull(catalogLight0.getInformation());
      assertNull(catalogLight0.getGrade());
      assertTrue(catalogLight0.isDeformable());
      assertEquals("jP", catalogLight0.getName());
      assertEquals("jP", catalogLight0.getCreator());
      assertEquals("jP", catalogLight0.getDescription());
      assertNull(catalogLight0.getCurrency());
      assertTrue(catalogLight0.isProportional());
      assertEquals(0.3926991F, catalogLight0.getWidth(), 0.01F);
      assertNull(catalogLight0.getCreationDate());
      assertEquals("jP", catalogLight0.getId());
      assertTrue(homeLight1.isMovable());
      assertEquals((-727.8896F), homeLight1.getElevation(), 0.01F);
      assertEquals(0.0F, homeLight1.getNameAngle(), 0.01F);
      assertEquals((-727.8896F), homeLight1.getGroundElevation(), 0.01F);
      assertTrue(homeLight1.isResizable());
      assertTrue(homeLight1.isVisible());
      assertNull(homeLight1.getShininess());
      assertEquals(46.060883F, homeLight1.getY(), 0.01F);
      assertNull(homeLight1.getStaircaseCutOutShape());
      assertNull(homeLight1.getCurrency());
      assertEquals(0.19634955F, homeLight1.getX(), 0.01F);
      assertEquals(0.0F, homeLight1.getNameYOffset(), 0.01F);
      assertEquals(0.5F, homeLight1.getPower(), 0.01F);
      assertEquals(0.3926991F, homeLight1.getWidth(), 0.01F);
      assertFalse(homeLight1.isDoorOrWindow());
      assertTrue(homeLight1.isTexturable());
      assertFalse(homeLight1.isBackFaceShown());
      assertNull(homeLight1.getColor());
      assertEquals("jP", homeLight1.getDescription());
      assertEquals(92.121765F, homeLight1.getDepth(), 0.01F);
      assertEquals("jP", homeLight1.getCatalogId());
      assertFalse(homeLight1.isModelMirrored());
      assertTrue(homeLight1.isDeformable());
      assertFalse(homeLight1.isNameVisible());
      assertEquals(0.0F, homeLight1.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeLight1.getAngle(), 0.01F);
      assertEquals("jP", homeLight1.getName());
      assertEquals(233.10785F, homeLight1.getHeight(), 0.01F);
      assertEquals(4, lightSourceArray0.length);
      assertNotNull(homeLight1);
      
      Content content0 = homeLight1.getIcon();
      assertFalse(homeLight1.equals((Object)homeLight0));
      assertEquals((short)10, bigDecimal0.shortValue());
      assertEquals((byte)10, bigDecimal0.byteValue());
      assertEquals(92.121765F, catalogLight0.getDepth(), 0.01F);
      assertEquals((-727.8896F), catalogLight0.getElevation(), 0.01F);
      assertNull(catalogLight0.getColor());
      assertFalse(catalogLight0.isModifiable());
      assertEquals(233.10785F, catalogLight0.getHeight(), 0.01F);
      assertFalse(catalogLight0.isDoorOrWindow());
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertTrue(catalogLight0.isTexturable());
      assertTrue(catalogLight0.isMovable());
      assertFalse(catalogLight0.isBackFaceShown());
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertTrue(catalogLight0.isResizable());
      assertNull(catalogLight0.getInformation());
      assertNull(catalogLight0.getGrade());
      assertTrue(catalogLight0.isDeformable());
      assertEquals("jP", catalogLight0.getName());
      assertEquals("jP", catalogLight0.getCreator());
      assertEquals("jP", catalogLight0.getDescription());
      assertNull(catalogLight0.getCurrency());
      assertTrue(catalogLight0.isProportional());
      assertEquals(0.3926991F, catalogLight0.getWidth(), 0.01F);
      assertNull(catalogLight0.getCreationDate());
      assertEquals("jP", catalogLight0.getId());
      assertTrue(homeLight1.isMovable());
      assertEquals((-727.8896F), homeLight1.getElevation(), 0.01F);
      assertEquals(0.0F, homeLight1.getNameAngle(), 0.01F);
      assertEquals((-727.8896F), homeLight1.getGroundElevation(), 0.01F);
      assertTrue(homeLight1.isResizable());
      assertTrue(homeLight1.isVisible());
      assertNull(homeLight1.getShininess());
      assertEquals(46.060883F, homeLight1.getY(), 0.01F);
      assertNull(homeLight1.getStaircaseCutOutShape());
      assertNull(homeLight1.getCurrency());
      assertEquals(0.19634955F, homeLight1.getX(), 0.01F);
      assertEquals(0.0F, homeLight1.getNameYOffset(), 0.01F);
      assertEquals(0.5F, homeLight1.getPower(), 0.01F);
      assertEquals(0.3926991F, homeLight1.getWidth(), 0.01F);
      assertFalse(homeLight1.isDoorOrWindow());
      assertTrue(homeLight1.isTexturable());
      assertFalse(homeLight1.isBackFaceShown());
      assertNull(homeLight1.getColor());
      assertEquals("jP", homeLight1.getDescription());
      assertEquals(92.121765F, homeLight1.getDepth(), 0.01F);
      assertEquals("jP", homeLight1.getCatalogId());
      assertFalse(homeLight1.isModelMirrored());
      assertTrue(homeLight1.isDeformable());
      assertFalse(homeLight1.isNameVisible());
      assertEquals(0.0F, homeLight1.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeLight1.getAngle(), 0.01F);
      assertEquals("jP", homeLight1.getName());
      assertEquals(233.10785F, homeLight1.getHeight(), 0.01F);
      assertEquals(4, lightSourceArray0.length);
      assertNotSame(homeLight1, homeLight0);
      assertNull(content0);
      
      Integer integer0 = new Integer((-1204));
      assertNotNull(integer0);
      assertEquals((-1204), (int)integer0);
      
      boolean boolean0 = homeLight1.containsPoint(92.121765F, 0.054564774F, 940.988F);
      assertFalse(homeLight1.equals((Object)homeLight0));
      assertEquals((short)10, bigDecimal0.shortValue());
      assertEquals((byte)10, bigDecimal0.byteValue());
      assertEquals(92.121765F, catalogLight0.getDepth(), 0.01F);
      assertEquals((-727.8896F), catalogLight0.getElevation(), 0.01F);
      assertNull(catalogLight0.getColor());
      assertFalse(catalogLight0.isModifiable());
      assertEquals(233.10785F, catalogLight0.getHeight(), 0.01F);
      assertFalse(catalogLight0.isDoorOrWindow());
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertTrue(catalogLight0.isTexturable());
      assertTrue(catalogLight0.isMovable());
      assertFalse(catalogLight0.isBackFaceShown());
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertTrue(catalogLight0.isResizable());
      assertNull(catalogLight0.getInformation());
      assertNull(catalogLight0.getGrade());
      assertTrue(catalogLight0.isDeformable());
      assertEquals("jP", catalogLight0.getName());
      assertEquals("jP", catalogLight0.getCreator());
      assertEquals("jP", catalogLight0.getDescription());
      assertNull(catalogLight0.getCurrency());
      assertTrue(catalogLight0.isProportional());
      assertEquals(0.3926991F, catalogLight0.getWidth(), 0.01F);
      assertNull(catalogLight0.getCreationDate());
      assertEquals("jP", catalogLight0.getId());
      assertTrue(homeLight1.isMovable());
      assertEquals((-727.8896F), homeLight1.getElevation(), 0.01F);
      assertEquals(0.0F, homeLight1.getNameAngle(), 0.01F);
      assertEquals((-727.8896F), homeLight1.getGroundElevation(), 0.01F);
      assertTrue(homeLight1.isResizable());
      assertTrue(homeLight1.isVisible());
      assertNull(homeLight1.getShininess());
      assertEquals(46.060883F, homeLight1.getY(), 0.01F);
      assertNull(homeLight1.getStaircaseCutOutShape());
      assertNull(homeLight1.getCurrency());
      assertEquals(0.19634955F, homeLight1.getX(), 0.01F);
      assertEquals(0.0F, homeLight1.getNameYOffset(), 0.01F);
      assertEquals(0.5F, homeLight1.getPower(), 0.01F);
      assertEquals(0.3926991F, homeLight1.getWidth(), 0.01F);
      assertFalse(homeLight1.isDoorOrWindow());
      assertTrue(homeLight1.isTexturable());
      assertFalse(homeLight1.isBackFaceShown());
      assertNull(homeLight1.getColor());
      assertEquals("jP", homeLight1.getDescription());
      assertEquals(92.121765F, homeLight1.getDepth(), 0.01F);
      assertEquals("jP", homeLight1.getCatalogId());
      assertFalse(homeLight1.isModelMirrored());
      assertTrue(homeLight1.isDeformable());
      assertFalse(homeLight1.isNameVisible());
      assertEquals(0.0F, homeLight1.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeLight1.getAngle(), 0.01F);
      assertEquals("jP", homeLight1.getName());
      assertEquals(233.10785F, homeLight1.getHeight(), 0.01F);
      assertEquals(4, lightSourceArray0.length);
      assertNotSame(homeLight1, homeLight0);
      assertTrue(boolean0);
      
      boolean boolean1 = homeLight1.isBottomRightPointAt(0.3926991F, 301.6161F, 3709.4194F);
      assertFalse(homeLight1.equals((Object)homeLight0));
      assertTrue(boolean1 == boolean0);
      assertEquals((short)10, bigDecimal0.shortValue());
      assertEquals((byte)10, bigDecimal0.byteValue());
      assertEquals(92.121765F, catalogLight0.getDepth(), 0.01F);
      assertEquals((-727.8896F), catalogLight0.getElevation(), 0.01F);
      assertNull(catalogLight0.getColor());
      assertFalse(catalogLight0.isModifiable());
      assertEquals(233.10785F, catalogLight0.getHeight(), 0.01F);
      assertFalse(catalogLight0.isDoorOrWindow());
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertTrue(catalogLight0.isTexturable());
      assertTrue(catalogLight0.isMovable());
      assertFalse(catalogLight0.isBackFaceShown());
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertTrue(catalogLight0.isResizable());
      assertNull(catalogLight0.getInformation());
      assertNull(catalogLight0.getGrade());
      assertTrue(catalogLight0.isDeformable());
      assertEquals("jP", catalogLight0.getName());
      assertEquals("jP", catalogLight0.getCreator());
      assertEquals("jP", catalogLight0.getDescription());
      assertNull(catalogLight0.getCurrency());
      assertTrue(catalogLight0.isProportional());
      assertEquals(0.3926991F, catalogLight0.getWidth(), 0.01F);
      assertNull(catalogLight0.getCreationDate());
      assertEquals("jP", catalogLight0.getId());
      assertTrue(homeLight1.isMovable());
      assertEquals((-727.8896F), homeLight1.getElevation(), 0.01F);
      assertEquals(0.0F, homeLight1.getNameAngle(), 0.01F);
      assertEquals((-727.8896F), homeLight1.getGroundElevation(), 0.01F);
      assertTrue(homeLight1.isResizable());
      assertTrue(homeLight1.isVisible());
      assertNull(homeLight1.getShininess());
      assertEquals(46.060883F, homeLight1.getY(), 0.01F);
      assertNull(homeLight1.getStaircaseCutOutShape());
      assertNull(homeLight1.getCurrency());
      assertEquals(0.19634955F, homeLight1.getX(), 0.01F);
      assertEquals(0.0F, homeLight1.getNameYOffset(), 0.01F);
      assertEquals(0.5F, homeLight1.getPower(), 0.01F);
      assertEquals(0.3926991F, homeLight1.getWidth(), 0.01F);
      assertFalse(homeLight1.isDoorOrWindow());
      assertTrue(homeLight1.isTexturable());
      assertFalse(homeLight1.isBackFaceShown());
      assertNull(homeLight1.getColor());
      assertEquals("jP", homeLight1.getDescription());
      assertEquals(92.121765F, homeLight1.getDepth(), 0.01F);
      assertEquals("jP", homeLight1.getCatalogId());
      assertFalse(homeLight1.isModelMirrored());
      assertTrue(homeLight1.isDeformable());
      assertFalse(homeLight1.isNameVisible());
      assertEquals(0.0F, homeLight1.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeLight1.getAngle(), 0.01F);
      assertEquals("jP", homeLight1.getName());
      assertEquals(233.10785F, homeLight1.getHeight(), 0.01F);
      assertEquals(4, lightSourceArray0.length);
      assertNotSame(homeLight1, homeLight0);
      assertTrue(boolean1);
      
      HomeLight homeLight2 = homeLight1.clone();
      assertFalse(homeLight1.equals((Object)homeLight0));
      assertFalse(homeLight2.equals((Object)homeLight0));
      assertFalse(homeLight2.equals((Object)homeLight1));
      assertEquals((short)10, bigDecimal0.shortValue());
      assertEquals((byte)10, bigDecimal0.byteValue());
      assertEquals(92.121765F, catalogLight0.getDepth(), 0.01F);
      assertEquals((-727.8896F), catalogLight0.getElevation(), 0.01F);
      assertNull(catalogLight0.getColor());
      assertFalse(catalogLight0.isModifiable());
      assertEquals(233.10785F, catalogLight0.getHeight(), 0.01F);
      assertFalse(catalogLight0.isDoorOrWindow());
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertTrue(catalogLight0.isTexturable());
      assertTrue(catalogLight0.isMovable());
      assertFalse(catalogLight0.isBackFaceShown());
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertTrue(catalogLight0.isResizable());
      assertNull(catalogLight0.getInformation());
      assertNull(catalogLight0.getGrade());
      assertTrue(catalogLight0.isDeformable());
      assertEquals("jP", catalogLight0.getName());
      assertEquals("jP", catalogLight0.getCreator());
      assertEquals("jP", catalogLight0.getDescription());
      assertNull(catalogLight0.getCurrency());
      assertTrue(catalogLight0.isProportional());
      assertEquals(0.3926991F, catalogLight0.getWidth(), 0.01F);
      assertNull(catalogLight0.getCreationDate());
      assertEquals("jP", catalogLight0.getId());
      assertTrue(homeLight1.isMovable());
      assertEquals((-727.8896F), homeLight1.getElevation(), 0.01F);
      assertEquals(0.0F, homeLight1.getNameAngle(), 0.01F);
      assertEquals((-727.8896F), homeLight1.getGroundElevation(), 0.01F);
      assertTrue(homeLight1.isResizable());
      assertTrue(homeLight1.isVisible());
      assertNull(homeLight1.getShininess());
      assertEquals(46.060883F, homeLight1.getY(), 0.01F);
      assertNull(homeLight1.getStaircaseCutOutShape());
      assertNull(homeLight1.getCurrency());
      assertEquals(0.19634955F, homeLight1.getX(), 0.01F);
      assertEquals(0.0F, homeLight1.getNameYOffset(), 0.01F);
      assertEquals(0.5F, homeLight1.getPower(), 0.01F);
      assertEquals(0.3926991F, homeLight1.getWidth(), 0.01F);
      assertFalse(homeLight1.isDoorOrWindow());
      assertTrue(homeLight1.isTexturable());
      assertFalse(homeLight1.isBackFaceShown());
      assertNull(homeLight1.getColor());
      assertEquals("jP", homeLight1.getDescription());
      assertEquals(92.121765F, homeLight1.getDepth(), 0.01F);
      assertEquals("jP", homeLight1.getCatalogId());
      assertFalse(homeLight1.isModelMirrored());
      assertTrue(homeLight1.isDeformable());
      assertFalse(homeLight1.isNameVisible());
      assertEquals(0.0F, homeLight1.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeLight1.getAngle(), 0.01F);
      assertEquals("jP", homeLight1.getName());
      assertEquals(233.10785F, homeLight1.getHeight(), 0.01F);
      assertEquals((-727.8896F), homeLight2.getElevation(), 0.01F);
      assertEquals(0.0F, homeLight2.getNameYOffset(), 0.01F);
      assertNull(homeLight2.getCurrency());
      assertNull(homeLight2.getColor());
      assertFalse(homeLight2.isNameVisible());
      assertFalse(homeLight2.isBackFaceShown());
      assertEquals(0.19634955F, homeLight2.getX(), 0.01F);
      assertFalse(homeLight2.isModelMirrored());
      assertEquals("jP", homeLight2.getCatalogId());
      assertEquals(0.3926991F, homeLight2.getWidth(), 0.01F);
      assertFalse(homeLight2.isDoorOrWindow());
      assertEquals(0.5F, homeLight2.getPower(), 0.01F);
      assertTrue(homeLight2.isTexturable());
      assertEquals("jP", homeLight2.getName());
      assertEquals(0.0F, homeLight2.getAngle(), 0.01F);
      assertEquals("jP", homeLight2.getDescription());
      assertEquals(233.10785F, homeLight2.getHeight(), 0.01F);
      assertNull(homeLight2.getStaircaseCutOutShape());
      assertEquals(92.121765F, homeLight2.getDepth(), 0.01F);
      assertEquals(0.0F, homeLight2.getNameAngle(), 0.01F);
      assertTrue(homeLight2.isMovable());
      assertEquals(0.0F, homeLight2.getNameXOffset(), 0.01F);
      assertNull(homeLight2.getShininess());
      assertTrue(homeLight2.isDeformable());
      assertEquals(46.060883F, homeLight2.getY(), 0.01F);
      assertEquals((-727.8896F), homeLight2.getGroundElevation(), 0.01F);
      assertTrue(homeLight2.isResizable());
      assertTrue(homeLight2.isVisible());
      assertEquals(4, lightSourceArray0.length);
      assertNotSame(homeLight1, homeLight2);
      assertNotSame(homeLight1, homeLight0);
      assertNotSame(homeLight2, homeLight0);
      assertNotSame(homeLight2, homeLight1);
      assertNotNull(homeLight2);
      
      float float0 = homeLight2.getHeight();
      assertFalse(homeLight1.equals((Object)homeLight2));
      assertFalse(homeLight1.equals((Object)homeLight0));
      assertFalse(homeLight2.equals((Object)homeLight0));
      assertFalse(homeLight2.equals((Object)homeLight1));
      assertEquals((short)10, bigDecimal0.shortValue());
      assertEquals((byte)10, bigDecimal0.byteValue());
      assertEquals(92.121765F, catalogLight0.getDepth(), 0.01F);
      assertEquals((-727.8896F), catalogLight0.getElevation(), 0.01F);
      assertNull(catalogLight0.getColor());
      assertFalse(catalogLight0.isModifiable());
      assertEquals(233.10785F, catalogLight0.getHeight(), 0.01F);
      assertFalse(catalogLight0.isDoorOrWindow());
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertTrue(catalogLight0.isTexturable());
      assertTrue(catalogLight0.isMovable());
      assertFalse(catalogLight0.isBackFaceShown());
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertTrue(catalogLight0.isResizable());
      assertNull(catalogLight0.getInformation());
      assertNull(catalogLight0.getGrade());
      assertTrue(catalogLight0.isDeformable());
      assertEquals("jP", catalogLight0.getName());
      assertEquals("jP", catalogLight0.getCreator());
      assertEquals("jP", catalogLight0.getDescription());
      assertNull(catalogLight0.getCurrency());
      assertTrue(catalogLight0.isProportional());
      assertEquals(0.3926991F, catalogLight0.getWidth(), 0.01F);
      assertNull(catalogLight0.getCreationDate());
      assertEquals("jP", catalogLight0.getId());
      assertTrue(homeLight1.isMovable());
      assertEquals((-727.8896F), homeLight1.getElevation(), 0.01F);
      assertEquals(0.0F, homeLight1.getNameAngle(), 0.01F);
      assertEquals((-727.8896F), homeLight1.getGroundElevation(), 0.01F);
      assertTrue(homeLight1.isResizable());
      assertTrue(homeLight1.isVisible());
      assertNull(homeLight1.getShininess());
      assertEquals(46.060883F, homeLight1.getY(), 0.01F);
      assertNull(homeLight1.getStaircaseCutOutShape());
      assertNull(homeLight1.getCurrency());
      assertEquals(0.19634955F, homeLight1.getX(), 0.01F);
      assertEquals(0.0F, homeLight1.getNameYOffset(), 0.01F);
      assertEquals(0.5F, homeLight1.getPower(), 0.01F);
      assertEquals(0.3926991F, homeLight1.getWidth(), 0.01F);
      assertFalse(homeLight1.isDoorOrWindow());
      assertTrue(homeLight1.isTexturable());
      assertFalse(homeLight1.isBackFaceShown());
      assertNull(homeLight1.getColor());
      assertEquals("jP", homeLight1.getDescription());
      assertEquals(92.121765F, homeLight1.getDepth(), 0.01F);
      assertEquals("jP", homeLight1.getCatalogId());
      assertFalse(homeLight1.isModelMirrored());
      assertTrue(homeLight1.isDeformable());
      assertFalse(homeLight1.isNameVisible());
      assertEquals(0.0F, homeLight1.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeLight1.getAngle(), 0.01F);
      assertEquals("jP", homeLight1.getName());
      assertEquals(233.10785F, homeLight1.getHeight(), 0.01F);
      assertEquals((-727.8896F), homeLight2.getElevation(), 0.01F);
      assertEquals(0.0F, homeLight2.getNameYOffset(), 0.01F);
      assertNull(homeLight2.getCurrency());
      assertNull(homeLight2.getColor());
      assertFalse(homeLight2.isNameVisible());
      assertFalse(homeLight2.isBackFaceShown());
      assertEquals(0.19634955F, homeLight2.getX(), 0.01F);
      assertFalse(homeLight2.isModelMirrored());
      assertEquals("jP", homeLight2.getCatalogId());
      assertEquals(0.3926991F, homeLight2.getWidth(), 0.01F);
      assertFalse(homeLight2.isDoorOrWindow());
      assertEquals(0.5F, homeLight2.getPower(), 0.01F);
      assertTrue(homeLight2.isTexturable());
      assertEquals("jP", homeLight2.getName());
      assertEquals(0.0F, homeLight2.getAngle(), 0.01F);
      assertEquals("jP", homeLight2.getDescription());
      assertEquals(233.10785F, homeLight2.getHeight(), 0.01F);
      assertNull(homeLight2.getStaircaseCutOutShape());
      assertEquals(92.121765F, homeLight2.getDepth(), 0.01F);
      assertEquals(0.0F, homeLight2.getNameAngle(), 0.01F);
      assertTrue(homeLight2.isMovable());
      assertEquals(0.0F, homeLight2.getNameXOffset(), 0.01F);
      assertNull(homeLight2.getShininess());
      assertTrue(homeLight2.isDeformable());
      assertEquals(46.060883F, homeLight2.getY(), 0.01F);
      assertEquals((-727.8896F), homeLight2.getGroundElevation(), 0.01F);
      assertTrue(homeLight2.isResizable());
      assertTrue(homeLight2.isVisible());
      assertEquals(4, lightSourceArray0.length);
      assertNotSame(homeLight1, homeLight2);
      assertNotSame(homeLight1, homeLight0);
      assertNotSame(homeLight2, homeLight0);
      assertNotSame(homeLight2, homeLight1);
      assertEquals(233.10785F, float0, 0.01F);
      
      BigDecimal bigDecimal1 = homeLight2.getPriceValueAddedTaxIncluded();
      assertFalse(homeLight1.equals((Object)homeLight2));
      assertFalse(homeLight1.equals((Object)homeLight0));
      assertFalse(homeLight2.equals((Object)homeLight0));
      assertFalse(homeLight2.equals((Object)homeLight1));
      assertFalse(bigDecimal1.equals((Object)bigDecimal0));
      assertEquals((short)10, bigDecimal0.shortValue());
      assertEquals((byte)10, bigDecimal0.byteValue());
      assertEquals(92.121765F, catalogLight0.getDepth(), 0.01F);
      assertEquals((-727.8896F), catalogLight0.getElevation(), 0.01F);
      assertNull(catalogLight0.getColor());
      assertFalse(catalogLight0.isModifiable());
      assertEquals(233.10785F, catalogLight0.getHeight(), 0.01F);
      assertFalse(catalogLight0.isDoorOrWindow());
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertTrue(catalogLight0.isTexturable());
      assertTrue(catalogLight0.isMovable());
      assertFalse(catalogLight0.isBackFaceShown());
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertTrue(catalogLight0.isResizable());
      assertNull(catalogLight0.getInformation());
      assertNull(catalogLight0.getGrade());
      assertTrue(catalogLight0.isDeformable());
      assertEquals("jP", catalogLight0.getName());
      assertEquals("jP", catalogLight0.getCreator());
      assertEquals("jP", catalogLight0.getDescription());
      assertNull(catalogLight0.getCurrency());
      assertTrue(catalogLight0.isProportional());
      assertEquals(0.3926991F, catalogLight0.getWidth(), 0.01F);
      assertNull(catalogLight0.getCreationDate());
      assertEquals("jP", catalogLight0.getId());
      assertTrue(homeLight1.isMovable());
      assertEquals((-727.8896F), homeLight1.getElevation(), 0.01F);
      assertEquals(0.0F, homeLight1.getNameAngle(), 0.01F);
      assertEquals((-727.8896F), homeLight1.getGroundElevation(), 0.01F);
      assertTrue(homeLight1.isResizable());
      assertTrue(homeLight1.isVisible());
      assertNull(homeLight1.getShininess());
      assertEquals(46.060883F, homeLight1.getY(), 0.01F);
      assertNull(homeLight1.getStaircaseCutOutShape());
      assertNull(homeLight1.getCurrency());
      assertEquals(0.19634955F, homeLight1.getX(), 0.01F);
      assertEquals(0.0F, homeLight1.getNameYOffset(), 0.01F);
      assertEquals(0.5F, homeLight1.getPower(), 0.01F);
      assertEquals(0.3926991F, homeLight1.getWidth(), 0.01F);
      assertFalse(homeLight1.isDoorOrWindow());
      assertTrue(homeLight1.isTexturable());
      assertFalse(homeLight1.isBackFaceShown());
      assertNull(homeLight1.getColor());
      assertEquals("jP", homeLight1.getDescription());
      assertEquals(92.121765F, homeLight1.getDepth(), 0.01F);
      assertEquals("jP", homeLight1.getCatalogId());
      assertFalse(homeLight1.isModelMirrored());
      assertTrue(homeLight1.isDeformable());
      assertFalse(homeLight1.isNameVisible());
      assertEquals(0.0F, homeLight1.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeLight1.getAngle(), 0.01F);
      assertEquals("jP", homeLight1.getName());
      assertEquals(233.10785F, homeLight1.getHeight(), 0.01F);
      assertEquals((-727.8896F), homeLight2.getElevation(), 0.01F);
      assertEquals(0.0F, homeLight2.getNameYOffset(), 0.01F);
      assertNull(homeLight2.getCurrency());
      assertNull(homeLight2.getColor());
      assertFalse(homeLight2.isNameVisible());
      assertFalse(homeLight2.isBackFaceShown());
      assertEquals(0.19634955F, homeLight2.getX(), 0.01F);
      assertFalse(homeLight2.isModelMirrored());
      assertEquals("jP", homeLight2.getCatalogId());
      assertEquals(0.3926991F, homeLight2.getWidth(), 0.01F);
      assertFalse(homeLight2.isDoorOrWindow());
      assertEquals(0.5F, homeLight2.getPower(), 0.01F);
      assertTrue(homeLight2.isTexturable());
      assertEquals("jP", homeLight2.getName());
      assertEquals(0.0F, homeLight2.getAngle(), 0.01F);
      assertEquals("jP", homeLight2.getDescription());
      assertEquals(233.10785F, homeLight2.getHeight(), 0.01F);
      assertNull(homeLight2.getStaircaseCutOutShape());
      assertEquals(92.121765F, homeLight2.getDepth(), 0.01F);
      assertEquals(0.0F, homeLight2.getNameAngle(), 0.01F);
      assertTrue(homeLight2.isMovable());
      assertEquals(0.0F, homeLight2.getNameXOffset(), 0.01F);
      assertNull(homeLight2.getShininess());
      assertTrue(homeLight2.isDeformable());
      assertEquals(46.060883F, homeLight2.getY(), 0.01F);
      assertEquals((-727.8896F), homeLight2.getGroundElevation(), 0.01F);
      assertTrue(homeLight2.isResizable());
      assertTrue(homeLight2.isVisible());
      assertEquals((byte)110, bigDecimal1.byteValue());
      assertEquals((short)110, bigDecimal1.shortValue());
      assertEquals(4, lightSourceArray0.length);
      assertNotSame(bigDecimal0, bigDecimal1);
      assertNotSame(homeLight1, homeLight2);
      assertNotSame(homeLight1, homeLight0);
      assertNotSame(homeLight2, homeLight0);
      assertNotSame(homeLight2, homeLight1);
      assertNotSame(bigDecimal1, bigDecimal0);
      assertNotNull(bigDecimal1);
      
      BigDecimal bigDecimal2 = homeLight2.getValueAddedTax();
      assertFalse(bigDecimal0.equals((Object)bigDecimal1));
      assertFalse(homeLight1.equals((Object)homeLight2));
      assertFalse(homeLight1.equals((Object)homeLight0));
      assertFalse(homeLight2.equals((Object)homeLight0));
      assertFalse(homeLight2.equals((Object)homeLight1));
      assertFalse(bigDecimal2.equals((Object)bigDecimal0));
      assertFalse(bigDecimal2.equals((Object)bigDecimal1));
      assertEquals((short)10, bigDecimal0.shortValue());
      assertEquals((byte)10, bigDecimal0.byteValue());
      assertEquals(92.121765F, catalogLight0.getDepth(), 0.01F);
      assertEquals((-727.8896F), catalogLight0.getElevation(), 0.01F);
      assertNull(catalogLight0.getColor());
      assertFalse(catalogLight0.isModifiable());
      assertEquals(233.10785F, catalogLight0.getHeight(), 0.01F);
      assertFalse(catalogLight0.isDoorOrWindow());
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertTrue(catalogLight0.isTexturable());
      assertTrue(catalogLight0.isMovable());
      assertFalse(catalogLight0.isBackFaceShown());
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertTrue(catalogLight0.isResizable());
      assertNull(catalogLight0.getInformation());
      assertNull(catalogLight0.getGrade());
      assertTrue(catalogLight0.isDeformable());
      assertEquals("jP", catalogLight0.getName());
      assertEquals("jP", catalogLight0.getCreator());
      assertEquals("jP", catalogLight0.getDescription());
      assertNull(catalogLight0.getCurrency());
      assertTrue(catalogLight0.isProportional());
      assertEquals(0.3926991F, catalogLight0.getWidth(), 0.01F);
      assertNull(catalogLight0.getCreationDate());
      assertEquals("jP", catalogLight0.getId());
      assertTrue(homeLight1.isMovable());
      assertEquals((-727.8896F), homeLight1.getElevation(), 0.01F);
      assertEquals(0.0F, homeLight1.getNameAngle(), 0.01F);
      assertEquals((-727.8896F), homeLight1.getGroundElevation(), 0.01F);
      assertTrue(homeLight1.isResizable());
      assertTrue(homeLight1.isVisible());
      assertNull(homeLight1.getShininess());
      assertEquals(46.060883F, homeLight1.getY(), 0.01F);
      assertNull(homeLight1.getStaircaseCutOutShape());
      assertNull(homeLight1.getCurrency());
      assertEquals(0.19634955F, homeLight1.getX(), 0.01F);
      assertEquals(0.0F, homeLight1.getNameYOffset(), 0.01F);
      assertEquals(0.5F, homeLight1.getPower(), 0.01F);
      assertEquals(0.3926991F, homeLight1.getWidth(), 0.01F);
      assertFalse(homeLight1.isDoorOrWindow());
      assertTrue(homeLight1.isTexturable());
      assertFalse(homeLight1.isBackFaceShown());
      assertNull(homeLight1.getColor());
      assertEquals("jP", homeLight1.getDescription());
      assertEquals(92.121765F, homeLight1.getDepth(), 0.01F);
      assertEquals("jP", homeLight1.getCatalogId());
      assertFalse(homeLight1.isModelMirrored());
      assertTrue(homeLight1.isDeformable());
      assertFalse(homeLight1.isNameVisible());
      assertEquals(0.0F, homeLight1.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeLight1.getAngle(), 0.01F);
      assertEquals("jP", homeLight1.getName());
      assertEquals(233.10785F, homeLight1.getHeight(), 0.01F);
      assertEquals((-727.8896F), homeLight2.getElevation(), 0.01F);
      assertEquals(0.0F, homeLight2.getNameYOffset(), 0.01F);
      assertNull(homeLight2.getCurrency());
      assertNull(homeLight2.getColor());
      assertFalse(homeLight2.isNameVisible());
      assertFalse(homeLight2.isBackFaceShown());
      assertEquals(0.19634955F, homeLight2.getX(), 0.01F);
      assertFalse(homeLight2.isModelMirrored());
      assertEquals("jP", homeLight2.getCatalogId());
      assertEquals(0.3926991F, homeLight2.getWidth(), 0.01F);
      assertFalse(homeLight2.isDoorOrWindow());
      assertEquals(0.5F, homeLight2.getPower(), 0.01F);
      assertTrue(homeLight2.isTexturable());
      assertEquals("jP", homeLight2.getName());
      assertEquals(0.0F, homeLight2.getAngle(), 0.01F);
      assertEquals("jP", homeLight2.getDescription());
      assertEquals(233.10785F, homeLight2.getHeight(), 0.01F);
      assertNull(homeLight2.getStaircaseCutOutShape());
      assertEquals(92.121765F, homeLight2.getDepth(), 0.01F);
      assertEquals(0.0F, homeLight2.getNameAngle(), 0.01F);
      assertTrue(homeLight2.isMovable());
      assertEquals(0.0F, homeLight2.getNameXOffset(), 0.01F);
      assertNull(homeLight2.getShininess());
      assertTrue(homeLight2.isDeformable());
      assertEquals(46.060883F, homeLight2.getY(), 0.01F);
      assertEquals((-727.8896F), homeLight2.getGroundElevation(), 0.01F);
      assertTrue(homeLight2.isResizable());
      assertTrue(homeLight2.isVisible());
      assertEquals((byte)100, bigDecimal2.byteValue());
      assertEquals((short)100, bigDecimal2.shortValue());
      assertEquals(4, lightSourceArray0.length);
      assertNotSame(bigDecimal0, bigDecimal2);
      assertNotSame(bigDecimal0, bigDecimal1);
      assertNotSame(homeLight1, homeLight2);
      assertNotSame(homeLight1, homeLight0);
      assertNotSame(homeLight2, homeLight0);
      assertNotSame(homeLight2, homeLight1);
      assertNotSame(bigDecimal2, bigDecimal0);
      assertNotSame(bigDecimal2, bigDecimal1);
      assertNotNull(bigDecimal2);
      
      float float1 = homeLight2.getNameAngle();
      assertFalse(bigDecimal0.equals((Object)bigDecimal2));
      assertFalse(bigDecimal0.equals((Object)bigDecimal1));
      assertFalse(homeLight1.equals((Object)homeLight2));
      assertFalse(homeLight1.equals((Object)homeLight0));
      assertFalse(homeLight2.equals((Object)homeLight0));
      assertFalse(homeLight2.equals((Object)homeLight1));
      assertNotEquals(float1, float0, 0.01F);
      assertEquals((short)10, bigDecimal0.shortValue());
      assertEquals((byte)10, bigDecimal0.byteValue());
      assertEquals(92.121765F, catalogLight0.getDepth(), 0.01F);
      assertEquals((-727.8896F), catalogLight0.getElevation(), 0.01F);
      assertNull(catalogLight0.getColor());
      assertFalse(catalogLight0.isModifiable());
      assertEquals(233.10785F, catalogLight0.getHeight(), 0.01F);
      assertFalse(catalogLight0.isDoorOrWindow());
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertTrue(catalogLight0.isTexturable());
      assertTrue(catalogLight0.isMovable());
      assertFalse(catalogLight0.isBackFaceShown());
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertTrue(catalogLight0.isResizable());
      assertNull(catalogLight0.getInformation());
      assertNull(catalogLight0.getGrade());
      assertTrue(catalogLight0.isDeformable());
      assertEquals("jP", catalogLight0.getName());
      assertEquals("jP", catalogLight0.getCreator());
      assertEquals("jP", catalogLight0.getDescription());
      assertNull(catalogLight0.getCurrency());
      assertTrue(catalogLight0.isProportional());
      assertEquals(0.3926991F, catalogLight0.getWidth(), 0.01F);
      assertNull(catalogLight0.getCreationDate());
      assertEquals("jP", catalogLight0.getId());
      assertTrue(homeLight1.isMovable());
      assertEquals((-727.8896F), homeLight1.getElevation(), 0.01F);
      assertEquals(0.0F, homeLight1.getNameAngle(), 0.01F);
      assertEquals((-727.8896F), homeLight1.getGroundElevation(), 0.01F);
      assertTrue(homeLight1.isResizable());
      assertTrue(homeLight1.isVisible());
      assertNull(homeLight1.getShininess());
      assertEquals(46.060883F, homeLight1.getY(), 0.01F);
      assertNull(homeLight1.getStaircaseCutOutShape());
      assertNull(homeLight1.getCurrency());
      assertEquals(0.19634955F, homeLight1.getX(), 0.01F);
      assertEquals(0.0F, homeLight1.getNameYOffset(), 0.01F);
      assertEquals(0.5F, homeLight1.getPower(), 0.01F);
      assertEquals(0.3926991F, homeLight1.getWidth(), 0.01F);
      assertFalse(homeLight1.isDoorOrWindow());
      assertTrue(homeLight1.isTexturable());
      assertFalse(homeLight1.isBackFaceShown());
      assertNull(homeLight1.getColor());
      assertEquals("jP", homeLight1.getDescription());
      assertEquals(92.121765F, homeLight1.getDepth(), 0.01F);
      assertEquals("jP", homeLight1.getCatalogId());
      assertFalse(homeLight1.isModelMirrored());
      assertTrue(homeLight1.isDeformable());
      assertFalse(homeLight1.isNameVisible());
      assertEquals(0.0F, homeLight1.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeLight1.getAngle(), 0.01F);
      assertEquals("jP", homeLight1.getName());
      assertEquals(233.10785F, homeLight1.getHeight(), 0.01F);
      assertEquals((-727.8896F), homeLight2.getElevation(), 0.01F);
      assertEquals(0.0F, homeLight2.getNameYOffset(), 0.01F);
      assertNull(homeLight2.getCurrency());
      assertNull(homeLight2.getColor());
      assertFalse(homeLight2.isNameVisible());
      assertFalse(homeLight2.isBackFaceShown());
      assertEquals(0.19634955F, homeLight2.getX(), 0.01F);
      assertFalse(homeLight2.isModelMirrored());
      assertEquals("jP", homeLight2.getCatalogId());
      assertEquals(0.3926991F, homeLight2.getWidth(), 0.01F);
      assertFalse(homeLight2.isDoorOrWindow());
      assertEquals(0.5F, homeLight2.getPower(), 0.01F);
      assertTrue(homeLight2.isTexturable());
      assertEquals("jP", homeLight2.getName());
      assertEquals(0.0F, homeLight2.getAngle(), 0.01F);
      assertEquals("jP", homeLight2.getDescription());
      assertEquals(233.10785F, homeLight2.getHeight(), 0.01F);
      assertNull(homeLight2.getStaircaseCutOutShape());
      assertEquals(92.121765F, homeLight2.getDepth(), 0.01F);
      assertEquals(0.0F, homeLight2.getNameAngle(), 0.01F);
      assertTrue(homeLight2.isMovable());
      assertEquals(0.0F, homeLight2.getNameXOffset(), 0.01F);
      assertNull(homeLight2.getShininess());
      assertTrue(homeLight2.isDeformable());
      assertEquals(46.060883F, homeLight2.getY(), 0.01F);
      assertEquals((-727.8896F), homeLight2.getGroundElevation(), 0.01F);
      assertTrue(homeLight2.isResizable());
      assertTrue(homeLight2.isVisible());
      assertEquals(4, lightSourceArray0.length);
      assertNotSame(bigDecimal0, bigDecimal2);
      assertNotSame(bigDecimal0, bigDecimal1);
      assertNotSame(homeLight1, homeLight2);
      assertNotSame(homeLight1, homeLight0);
      assertNotSame(homeLight2, homeLight0);
      assertNotSame(homeLight2, homeLight1);
      assertEquals(0.0F, float1, 0.01F);
  }

  @Test(timeout = 4000)
  public void test263()  throws Throwable  {
      LightSource[] lightSourceArray0 = new LightSource[5];
      BigDecimal bigDecimal0 = BigDecimal.TEN;
      assertEquals((byte)10, bigDecimal0.byteValue());
      assertEquals((short)10, bigDecimal0.shortValue());
      assertNotNull(bigDecimal0);
      
      CatalogLight catalogLight0 = new CatalogLight("/", "/", "/", (Content) null, (Content) null, 0.3926991F, 0.3926991F, 0.3926991F, (-815.0011F), true, lightSourceArray0, (float[][]) null, "{L", true, bigDecimal0, bigDecimal0);
      assertEquals((byte)10, bigDecimal0.byteValue());
      assertEquals((short)10, bigDecimal0.shortValue());
      assertEquals((-815.0011F), catalogLight0.getElevation(), 0.01F);
      assertNull(catalogLight0.getCreationDate());
      assertNull(catalogLight0.getColor());
      assertFalse(catalogLight0.isModifiable());
      assertEquals("/", catalogLight0.getName());
      assertEquals(0.3926991F, catalogLight0.getWidth(), 0.01F);
      assertNull(catalogLight0.getCurrency());
      assertEquals(0.3926991F, catalogLight0.getDepth(), 0.01F);
      assertEquals("/", catalogLight0.getId());
      assertNull(catalogLight0.getInformation());
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertTrue(catalogLight0.isResizable());
      assertTrue(catalogLight0.isMovable());
      assertFalse(catalogLight0.isBackFaceShown());
      assertTrue(catalogLight0.isDeformable());
      assertFalse(catalogLight0.isDoorOrWindow());
      assertTrue(catalogLight0.isProportional());
      assertEquals("/", catalogLight0.getDescription());
      assertNull(catalogLight0.getGrade());
      assertEquals(0.3926991F, catalogLight0.getHeight(), 0.01F);
      assertEquals("{L", catalogLight0.getCreator());
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertTrue(catalogLight0.isTexturable());
      assertEquals(5, lightSourceArray0.length);
      assertNotNull(catalogLight0);
      
      HomeLight homeLight0 = new HomeLight(catalogLight0);
      assertEquals((byte)10, bigDecimal0.byteValue());
      assertEquals((short)10, bigDecimal0.shortValue());
      assertEquals((-815.0011F), catalogLight0.getElevation(), 0.01F);
      assertNull(catalogLight0.getCreationDate());
      assertNull(catalogLight0.getColor());
      assertFalse(catalogLight0.isModifiable());
      assertEquals("/", catalogLight0.getName());
      assertEquals(0.3926991F, catalogLight0.getWidth(), 0.01F);
      assertNull(catalogLight0.getCurrency());
      assertEquals(0.3926991F, catalogLight0.getDepth(), 0.01F);
      assertEquals("/", catalogLight0.getId());
      assertNull(catalogLight0.getInformation());
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertTrue(catalogLight0.isResizable());
      assertTrue(catalogLight0.isMovable());
      assertFalse(catalogLight0.isBackFaceShown());
      assertTrue(catalogLight0.isDeformable());
      assertFalse(catalogLight0.isDoorOrWindow());
      assertTrue(catalogLight0.isProportional());
      assertEquals("/", catalogLight0.getDescription());
      assertNull(catalogLight0.getGrade());
      assertEquals(0.3926991F, catalogLight0.getHeight(), 0.01F);
      assertEquals("{L", catalogLight0.getCreator());
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertTrue(catalogLight0.isTexturable());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertEquals(0.3926991F, homeLight0.getWidth(), 0.01F);
      assertTrue(homeLight0.isTexturable());
      assertEquals((-815.0011F), homeLight0.getGroundElevation(), 0.01F);
      assertEquals((-815.0011F), homeLight0.getElevation(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      assertNull(homeLight0.getColor());
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertFalse(homeLight0.isNameVisible());
      assertEquals(0.19634955F, homeLight0.getX(), 0.01F);
      assertEquals(0.19634955F, homeLight0.getY(), 0.01F);
      assertEquals(0.3926991F, homeLight0.getHeight(), 0.01F);
      assertFalse(homeLight0.isModelMirrored());
      assertFalse(homeLight0.isBackFaceShown());
      assertEquals("/", homeLight0.getCatalogId());
      assertEquals(0.3926991F, homeLight0.getDepth(), 0.01F);
      assertTrue(homeLight0.isDeformable());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertEquals("/", homeLight0.getName());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertNull(homeLight0.getCurrency());
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertTrue(homeLight0.isResizable());
      assertTrue(homeLight0.isVisible());
      assertTrue(homeLight0.isMovable());
      assertNull(homeLight0.getShininess());
      assertEquals("/", homeLight0.getDescription());
      assertEquals(5, lightSourceArray0.length);
      assertNotNull(homeLight0);
      
      homeLight0.setWidth(0.3926991F);
      assertEquals((byte)10, bigDecimal0.byteValue());
      assertEquals((short)10, bigDecimal0.shortValue());
      assertEquals((-815.0011F), catalogLight0.getElevation(), 0.01F);
      assertNull(catalogLight0.getCreationDate());
      assertNull(catalogLight0.getColor());
      assertFalse(catalogLight0.isModifiable());
      assertEquals("/", catalogLight0.getName());
      assertEquals(0.3926991F, catalogLight0.getWidth(), 0.01F);
      assertNull(catalogLight0.getCurrency());
      assertEquals(0.3926991F, catalogLight0.getDepth(), 0.01F);
      assertEquals("/", catalogLight0.getId());
      assertNull(catalogLight0.getInformation());
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertTrue(catalogLight0.isResizable());
      assertTrue(catalogLight0.isMovable());
      assertFalse(catalogLight0.isBackFaceShown());
      assertTrue(catalogLight0.isDeformable());
      assertFalse(catalogLight0.isDoorOrWindow());
      assertTrue(catalogLight0.isProportional());
      assertEquals("/", catalogLight0.getDescription());
      assertNull(catalogLight0.getGrade());
      assertEquals(0.3926991F, catalogLight0.getHeight(), 0.01F);
      assertEquals("{L", catalogLight0.getCreator());
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertTrue(catalogLight0.isTexturable());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertEquals(0.3926991F, homeLight0.getWidth(), 0.01F);
      assertTrue(homeLight0.isTexturable());
      assertEquals((-815.0011F), homeLight0.getGroundElevation(), 0.01F);
      assertEquals((-815.0011F), homeLight0.getElevation(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      assertNull(homeLight0.getColor());
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertFalse(homeLight0.isNameVisible());
      assertEquals(0.19634955F, homeLight0.getX(), 0.01F);
      assertEquals(0.19634955F, homeLight0.getY(), 0.01F);
      assertEquals(0.3926991F, homeLight0.getHeight(), 0.01F);
      assertFalse(homeLight0.isModelMirrored());
      assertFalse(homeLight0.isBackFaceShown());
      assertEquals("/", homeLight0.getCatalogId());
      assertEquals(0.3926991F, homeLight0.getDepth(), 0.01F);
      assertTrue(homeLight0.isDeformable());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertEquals("/", homeLight0.getName());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertNull(homeLight0.getCurrency());
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertTrue(homeLight0.isResizable());
      assertTrue(homeLight0.isVisible());
      assertTrue(homeLight0.isMovable());
      assertNull(homeLight0.getShininess());
      assertEquals("/", homeLight0.getDescription());
      assertEquals(5, lightSourceArray0.length);
      
      homeLight0.setHeight((-815.0011F));
      assertEquals((byte)10, bigDecimal0.byteValue());
      assertEquals((short)10, bigDecimal0.shortValue());
      assertEquals((-815.0011F), catalogLight0.getElevation(), 0.01F);
      assertNull(catalogLight0.getCreationDate());
      assertNull(catalogLight0.getColor());
      assertFalse(catalogLight0.isModifiable());
      assertEquals("/", catalogLight0.getName());
      assertEquals(0.3926991F, catalogLight0.getWidth(), 0.01F);
      assertNull(catalogLight0.getCurrency());
      assertEquals(0.3926991F, catalogLight0.getDepth(), 0.01F);
      assertEquals("/", catalogLight0.getId());
      assertNull(catalogLight0.getInformation());
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertTrue(catalogLight0.isResizable());
      assertTrue(catalogLight0.isMovable());
      assertFalse(catalogLight0.isBackFaceShown());
      assertTrue(catalogLight0.isDeformable());
      assertFalse(catalogLight0.isDoorOrWindow());
      assertTrue(catalogLight0.isProportional());
      assertEquals("/", catalogLight0.getDescription());
      assertNull(catalogLight0.getGrade());
      assertEquals(0.3926991F, catalogLight0.getHeight(), 0.01F);
      assertEquals("{L", catalogLight0.getCreator());
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertTrue(catalogLight0.isTexturable());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertEquals(0.3926991F, homeLight0.getWidth(), 0.01F);
      assertTrue(homeLight0.isTexturable());
      assertEquals((-815.0011F), homeLight0.getGroundElevation(), 0.01F);
      assertEquals((-815.0011F), homeLight0.getElevation(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      assertNull(homeLight0.getColor());
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertFalse(homeLight0.isNameVisible());
      assertEquals(0.19634955F, homeLight0.getX(), 0.01F);
      assertEquals(0.19634955F, homeLight0.getY(), 0.01F);
      assertFalse(homeLight0.isModelMirrored());
      assertFalse(homeLight0.isBackFaceShown());
      assertEquals("/", homeLight0.getCatalogId());
      assertEquals(0.3926991F, homeLight0.getDepth(), 0.01F);
      assertTrue(homeLight0.isDeformable());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertEquals((-815.0011F), homeLight0.getHeight(), 0.01F);
      assertEquals("/", homeLight0.getName());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertNull(homeLight0.getCurrency());
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertTrue(homeLight0.isResizable());
      assertTrue(homeLight0.isVisible());
      assertTrue(homeLight0.isMovable());
      assertNull(homeLight0.getShininess());
      assertEquals("/", homeLight0.getDescription());
      assertEquals(5, lightSourceArray0.length);
      
      boolean boolean0 = homeLight0.isBottomRightPointAt(0.3926991F, 456.764F, 3090.8286F);
      assertEquals((byte)10, bigDecimal0.byteValue());
      assertEquals((short)10, bigDecimal0.shortValue());
      assertEquals((-815.0011F), catalogLight0.getElevation(), 0.01F);
      assertNull(catalogLight0.getCreationDate());
      assertNull(catalogLight0.getColor());
      assertFalse(catalogLight0.isModifiable());
      assertEquals("/", catalogLight0.getName());
      assertEquals(0.3926991F, catalogLight0.getWidth(), 0.01F);
      assertNull(catalogLight0.getCurrency());
      assertEquals(0.3926991F, catalogLight0.getDepth(), 0.01F);
      assertEquals("/", catalogLight0.getId());
      assertNull(catalogLight0.getInformation());
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertTrue(catalogLight0.isResizable());
      assertTrue(catalogLight0.isMovable());
      assertFalse(catalogLight0.isBackFaceShown());
      assertTrue(catalogLight0.isDeformable());
      assertFalse(catalogLight0.isDoorOrWindow());
      assertTrue(catalogLight0.isProportional());
      assertEquals("/", catalogLight0.getDescription());
      assertNull(catalogLight0.getGrade());
      assertEquals(0.3926991F, catalogLight0.getHeight(), 0.01F);
      assertEquals("{L", catalogLight0.getCreator());
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertTrue(catalogLight0.isTexturable());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertEquals(0.3926991F, homeLight0.getWidth(), 0.01F);
      assertTrue(homeLight0.isTexturable());
      assertEquals((-815.0011F), homeLight0.getGroundElevation(), 0.01F);
      assertEquals((-815.0011F), homeLight0.getElevation(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      assertNull(homeLight0.getColor());
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertFalse(homeLight0.isNameVisible());
      assertEquals(0.19634955F, homeLight0.getX(), 0.01F);
      assertEquals(0.19634955F, homeLight0.getY(), 0.01F);
      assertFalse(homeLight0.isModelMirrored());
      assertFalse(homeLight0.isBackFaceShown());
      assertEquals("/", homeLight0.getCatalogId());
      assertEquals(0.3926991F, homeLight0.getDepth(), 0.01F);
      assertTrue(homeLight0.isDeformable());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertEquals((-815.0011F), homeLight0.getHeight(), 0.01F);
      assertEquals("/", homeLight0.getName());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertNull(homeLight0.getCurrency());
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertTrue(homeLight0.isResizable());
      assertTrue(homeLight0.isVisible());
      assertTrue(homeLight0.isMovable());
      assertNull(homeLight0.getShininess());
      assertEquals("/", homeLight0.getDescription());
      assertEquals(5, lightSourceArray0.length);
      assertTrue(boolean0);
      
      HomeLight homeLight1 = homeLight0.clone();
      assertFalse(homeLight1.equals((Object)homeLight0));
      assertEquals((byte)10, bigDecimal0.byteValue());
      assertEquals((short)10, bigDecimal0.shortValue());
      assertEquals((-815.0011F), catalogLight0.getElevation(), 0.01F);
      assertNull(catalogLight0.getCreationDate());
      assertNull(catalogLight0.getColor());
      assertFalse(catalogLight0.isModifiable());
      assertEquals("/", catalogLight0.getName());
      assertEquals(0.3926991F, catalogLight0.getWidth(), 0.01F);
      assertNull(catalogLight0.getCurrency());
      assertEquals(0.3926991F, catalogLight0.getDepth(), 0.01F);
      assertEquals("/", catalogLight0.getId());
      assertNull(catalogLight0.getInformation());
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertTrue(catalogLight0.isResizable());
      assertTrue(catalogLight0.isMovable());
      assertFalse(catalogLight0.isBackFaceShown());
      assertTrue(catalogLight0.isDeformable());
      assertFalse(catalogLight0.isDoorOrWindow());
      assertTrue(catalogLight0.isProportional());
      assertEquals("/", catalogLight0.getDescription());
      assertNull(catalogLight0.getGrade());
      assertEquals(0.3926991F, catalogLight0.getHeight(), 0.01F);
      assertEquals("{L", catalogLight0.getCreator());
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertTrue(catalogLight0.isTexturable());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertEquals(0.3926991F, homeLight0.getWidth(), 0.01F);
      assertTrue(homeLight0.isTexturable());
      assertEquals((-815.0011F), homeLight0.getGroundElevation(), 0.01F);
      assertEquals((-815.0011F), homeLight0.getElevation(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      assertNull(homeLight0.getColor());
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertFalse(homeLight0.isNameVisible());
      assertEquals(0.19634955F, homeLight0.getX(), 0.01F);
      assertEquals(0.19634955F, homeLight0.getY(), 0.01F);
      assertFalse(homeLight0.isModelMirrored());
      assertFalse(homeLight0.isBackFaceShown());
      assertEquals("/", homeLight0.getCatalogId());
      assertEquals(0.3926991F, homeLight0.getDepth(), 0.01F);
      assertTrue(homeLight0.isDeformable());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertEquals((-815.0011F), homeLight0.getHeight(), 0.01F);
      assertEquals("/", homeLight0.getName());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertNull(homeLight0.getCurrency());
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertTrue(homeLight0.isResizable());
      assertTrue(homeLight0.isVisible());
      assertTrue(homeLight0.isMovable());
      assertNull(homeLight0.getShininess());
      assertEquals("/", homeLight0.getDescription());
      assertEquals(0.0F, homeLight1.getNameYOffset(), 0.01F);
      assertTrue(homeLight1.isDeformable());
      assertFalse(homeLight1.isNameVisible());
      assertEquals("/", homeLight1.getCatalogId());
      assertEquals(0.3926991F, homeLight1.getDepth(), 0.01F);
      assertTrue(homeLight1.isVisible());
      assertFalse(homeLight1.isModelMirrored());
      assertEquals("/", homeLight1.getDescription());
      assertNull(homeLight1.getColor());
      assertTrue(homeLight1.isMovable());
      assertEquals(0.3926991F, homeLight1.getWidth(), 0.01F);
      assertNull(homeLight1.getCurrency());
      assertEquals(0.5F, homeLight1.getPower(), 0.01F);
      assertEquals(0.19634955F, homeLight1.getY(), 0.01F);
      assertEquals(0.0F, homeLight1.getNameXOffset(), 0.01F);
      assertEquals((-815.0011F), homeLight1.getElevation(), 0.01F);
      assertEquals(0.0F, homeLight1.getNameAngle(), 0.01F);
      assertEquals(0.19634955F, homeLight1.getX(), 0.01F);
      assertTrue(homeLight1.isResizable());
      assertNull(homeLight1.getStaircaseCutOutShape());
      assertEquals((-815.0011F), homeLight1.getGroundElevation(), 0.01F);
      assertNull(homeLight1.getShininess());
      assertFalse(homeLight1.isDoorOrWindow());
      assertFalse(homeLight1.isBackFaceShown());
      assertEquals((-815.0011F), homeLight1.getHeight(), 0.01F);
      assertEquals("/", homeLight1.getName());
      assertTrue(homeLight1.isTexturable());
      assertEquals(0.0F, homeLight1.getAngle(), 0.01F);
      assertEquals(5, lightSourceArray0.length);
      assertNotSame(homeLight0, homeLight1);
      assertNotSame(homeLight1, homeLight0);
      assertNotNull(homeLight1);
      
      HomeLight homeLight2 = homeLight1.clone();
      assertFalse(homeLight0.equals((Object)homeLight1));
      assertFalse(homeLight1.equals((Object)homeLight0));
      assertFalse(homeLight2.equals((Object)homeLight1));
      assertFalse(homeLight2.equals((Object)homeLight0));
      assertEquals((byte)10, bigDecimal0.byteValue());
      assertEquals((short)10, bigDecimal0.shortValue());
      assertEquals((-815.0011F), catalogLight0.getElevation(), 0.01F);
      assertNull(catalogLight0.getCreationDate());
      assertNull(catalogLight0.getColor());
      assertFalse(catalogLight0.isModifiable());
      assertEquals("/", catalogLight0.getName());
      assertEquals(0.3926991F, catalogLight0.getWidth(), 0.01F);
      assertNull(catalogLight0.getCurrency());
      assertEquals(0.3926991F, catalogLight0.getDepth(), 0.01F);
      assertEquals("/", catalogLight0.getId());
      assertNull(catalogLight0.getInformation());
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertTrue(catalogLight0.isResizable());
      assertTrue(catalogLight0.isMovable());
      assertFalse(catalogLight0.isBackFaceShown());
      assertTrue(catalogLight0.isDeformable());
      assertFalse(catalogLight0.isDoorOrWindow());
      assertTrue(catalogLight0.isProportional());
      assertEquals("/", catalogLight0.getDescription());
      assertNull(catalogLight0.getGrade());
      assertEquals(0.3926991F, catalogLight0.getHeight(), 0.01F);
      assertEquals("{L", catalogLight0.getCreator());
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertTrue(catalogLight0.isTexturable());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertEquals(0.3926991F, homeLight0.getWidth(), 0.01F);
      assertTrue(homeLight0.isTexturable());
      assertEquals((-815.0011F), homeLight0.getGroundElevation(), 0.01F);
      assertEquals((-815.0011F), homeLight0.getElevation(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      assertNull(homeLight0.getColor());
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertFalse(homeLight0.isNameVisible());
      assertEquals(0.19634955F, homeLight0.getX(), 0.01F);
      assertEquals(0.19634955F, homeLight0.getY(), 0.01F);
      assertFalse(homeLight0.isModelMirrored());
      assertFalse(homeLight0.isBackFaceShown());
      assertEquals("/", homeLight0.getCatalogId());
      assertEquals(0.3926991F, homeLight0.getDepth(), 0.01F);
      assertTrue(homeLight0.isDeformable());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertEquals((-815.0011F), homeLight0.getHeight(), 0.01F);
      assertEquals("/", homeLight0.getName());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertNull(homeLight0.getCurrency());
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertTrue(homeLight0.isResizable());
      assertTrue(homeLight0.isVisible());
      assertTrue(homeLight0.isMovable());
      assertNull(homeLight0.getShininess());
      assertEquals("/", homeLight0.getDescription());
      assertEquals(0.0F, homeLight1.getNameYOffset(), 0.01F);
      assertTrue(homeLight1.isDeformable());
      assertFalse(homeLight1.isNameVisible());
      assertEquals("/", homeLight1.getCatalogId());
      assertEquals(0.3926991F, homeLight1.getDepth(), 0.01F);
      assertTrue(homeLight1.isVisible());
      assertFalse(homeLight1.isModelMirrored());
      assertEquals("/", homeLight1.getDescription());
      assertNull(homeLight1.getColor());
      assertTrue(homeLight1.isMovable());
      assertEquals(0.3926991F, homeLight1.getWidth(), 0.01F);
      assertNull(homeLight1.getCurrency());
      assertEquals(0.5F, homeLight1.getPower(), 0.01F);
      assertEquals(0.19634955F, homeLight1.getY(), 0.01F);
      assertEquals(0.0F, homeLight1.getNameXOffset(), 0.01F);
      assertEquals((-815.0011F), homeLight1.getElevation(), 0.01F);
      assertEquals(0.0F, homeLight1.getNameAngle(), 0.01F);
      assertEquals(0.19634955F, homeLight1.getX(), 0.01F);
      assertTrue(homeLight1.isResizable());
      assertNull(homeLight1.getStaircaseCutOutShape());
      assertEquals((-815.0011F), homeLight1.getGroundElevation(), 0.01F);
      assertNull(homeLight1.getShininess());
      assertFalse(homeLight1.isDoorOrWindow());
      assertFalse(homeLight1.isBackFaceShown());
      assertEquals((-815.0011F), homeLight1.getHeight(), 0.01F);
      assertEquals("/", homeLight1.getName());
      assertTrue(homeLight1.isTexturable());
      assertEquals(0.0F, homeLight1.getAngle(), 0.01F);
      assertTrue(homeLight2.isVisible());
      assertEquals(0.0F, homeLight2.getNameYOffset(), 0.01F);
      assertNull(homeLight2.getCurrency());
      assertTrue(homeLight2.isDeformable());
      assertFalse(homeLight2.isNameVisible());
      assertEquals("/", homeLight2.getCatalogId());
      assertEquals(0.3926991F, homeLight2.getDepth(), 0.01F);
      assertTrue(homeLight2.isResizable());
      assertNull(homeLight2.getShininess());
      assertNull(homeLight2.getStaircaseCutOutShape());
      assertEquals("/", homeLight2.getDescription());
      assertTrue(homeLight2.isTexturable());
      assertEquals("/", homeLight2.getName());
      assertEquals(0.0F, homeLight2.getAngle(), 0.01F);
      assertEquals(0.0F, homeLight2.getNameXOffset(), 0.01F);
      assertFalse(homeLight2.isDoorOrWindow());
      assertEquals((-815.0011F), homeLight2.getHeight(), 0.01F);
      assertEquals((-815.0011F), homeLight2.getElevation(), 0.01F);
      assertEquals((-815.0011F), homeLight2.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight2.getNameAngle(), 0.01F);
      assertFalse(homeLight2.isBackFaceShown());
      assertTrue(homeLight2.isMovable());
      assertFalse(homeLight2.isModelMirrored());
      assertNull(homeLight2.getColor());
      assertEquals(0.19634955F, homeLight2.getX(), 0.01F);
      assertEquals(0.19634955F, homeLight2.getY(), 0.01F);
      assertEquals(0.5F, homeLight2.getPower(), 0.01F);
      assertEquals(0.3926991F, homeLight2.getWidth(), 0.01F);
      assertEquals(5, lightSourceArray0.length);
      assertNotSame(homeLight0, homeLight1);
      assertNotSame(homeLight0, homeLight2);
      assertNotSame(homeLight1, homeLight0);
      assertNotSame(homeLight1, homeLight2);
      assertNotSame(homeLight2, homeLight1);
      assertNotSame(homeLight2, homeLight0);
      assertNotNull(homeLight2);
      
      float[][] floatArray0 = homeLight1.getModelRotation();
      assertFalse(homeLight0.equals((Object)homeLight1));
      assertFalse(homeLight0.equals((Object)homeLight2));
      assertFalse(homeLight1.equals((Object)homeLight0));
      assertFalse(homeLight1.equals((Object)homeLight2));
      assertEquals((byte)10, bigDecimal0.byteValue());
      assertEquals((short)10, bigDecimal0.shortValue());
      assertEquals((-815.0011F), catalogLight0.getElevation(), 0.01F);
      assertNull(catalogLight0.getCreationDate());
      assertNull(catalogLight0.getColor());
      assertFalse(catalogLight0.isModifiable());
      assertEquals("/", catalogLight0.getName());
      assertEquals(0.3926991F, catalogLight0.getWidth(), 0.01F);
      assertNull(catalogLight0.getCurrency());
      assertEquals(0.3926991F, catalogLight0.getDepth(), 0.01F);
      assertEquals("/", catalogLight0.getId());
      assertNull(catalogLight0.getInformation());
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertTrue(catalogLight0.isResizable());
      assertTrue(catalogLight0.isMovable());
      assertFalse(catalogLight0.isBackFaceShown());
      assertTrue(catalogLight0.isDeformable());
      assertFalse(catalogLight0.isDoorOrWindow());
      assertTrue(catalogLight0.isProportional());
      assertEquals("/", catalogLight0.getDescription());
      assertNull(catalogLight0.getGrade());
      assertEquals(0.3926991F, catalogLight0.getHeight(), 0.01F);
      assertEquals("{L", catalogLight0.getCreator());
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertTrue(catalogLight0.isTexturable());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertEquals(0.3926991F, homeLight0.getWidth(), 0.01F);
      assertTrue(homeLight0.isTexturable());
      assertEquals((-815.0011F), homeLight0.getGroundElevation(), 0.01F);
      assertEquals((-815.0011F), homeLight0.getElevation(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      assertNull(homeLight0.getColor());
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertFalse(homeLight0.isNameVisible());
      assertEquals(0.19634955F, homeLight0.getX(), 0.01F);
      assertEquals(0.19634955F, homeLight0.getY(), 0.01F);
      assertFalse(homeLight0.isModelMirrored());
      assertFalse(homeLight0.isBackFaceShown());
      assertEquals("/", homeLight0.getCatalogId());
      assertEquals(0.3926991F, homeLight0.getDepth(), 0.01F);
      assertTrue(homeLight0.isDeformable());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertEquals((-815.0011F), homeLight0.getHeight(), 0.01F);
      assertEquals("/", homeLight0.getName());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertNull(homeLight0.getCurrency());
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertTrue(homeLight0.isResizable());
      assertTrue(homeLight0.isVisible());
      assertTrue(homeLight0.isMovable());
      assertNull(homeLight0.getShininess());
      assertEquals("/", homeLight0.getDescription());
      assertEquals(0.0F, homeLight1.getNameYOffset(), 0.01F);
      assertTrue(homeLight1.isDeformable());
      assertFalse(homeLight1.isNameVisible());
      assertEquals("/", homeLight1.getCatalogId());
      assertEquals(0.3926991F, homeLight1.getDepth(), 0.01F);
      assertTrue(homeLight1.isVisible());
      assertFalse(homeLight1.isModelMirrored());
      assertEquals("/", homeLight1.getDescription());
      assertNull(homeLight1.getColor());
      assertTrue(homeLight1.isMovable());
      assertEquals(0.3926991F, homeLight1.getWidth(), 0.01F);
      assertNull(homeLight1.getCurrency());
      assertEquals(0.5F, homeLight1.getPower(), 0.01F);
      assertEquals(0.19634955F, homeLight1.getY(), 0.01F);
      assertEquals(0.0F, homeLight1.getNameXOffset(), 0.01F);
      assertEquals((-815.0011F), homeLight1.getElevation(), 0.01F);
      assertEquals(0.0F, homeLight1.getNameAngle(), 0.01F);
      assertEquals(0.19634955F, homeLight1.getX(), 0.01F);
      assertTrue(homeLight1.isResizable());
      assertNull(homeLight1.getStaircaseCutOutShape());
      assertEquals((-815.0011F), homeLight1.getGroundElevation(), 0.01F);
      assertNull(homeLight1.getShininess());
      assertFalse(homeLight1.isDoorOrWindow());
      assertFalse(homeLight1.isBackFaceShown());
      assertEquals((-815.0011F), homeLight1.getHeight(), 0.01F);
      assertEquals("/", homeLight1.getName());
      assertTrue(homeLight1.isTexturable());
      assertEquals(0.0F, homeLight1.getAngle(), 0.01F);
      assertEquals(5, lightSourceArray0.length);
      assertEquals(3, floatArray0.length);
      assertNotSame(homeLight0, homeLight1);
      assertNotSame(homeLight0, homeLight2);
      assertNotSame(homeLight1, homeLight0);
      assertNotSame(homeLight1, homeLight2);
      assertNotNull(floatArray0);
  }

  @Test(timeout = 4000)
  public void test264()  throws Throwable  {
      LightSource[] lightSourceArray0 = new LightSource[5];
      BigDecimal bigDecimal0 = BigDecimal.ZERO;
      CatalogLight catalogLight0 = new CatalogLight("h&*+\"", "h&*+\"", "h&*+\"", (Content) null, (Content) null, (-815.0011F), 1.1802855F, (-689.75726F), (-689.75726F), false, lightSourceArray0, (float[][]) null, "h&*+\"", false, bigDecimal0, bigDecimal0);
      HomeLight homeLight0 = new HomeLight(catalogLight0);
      HomeLight homeLight1 = homeLight0.clone();
      HomeLight homeLight2 = homeLight0.clone();
      homeLight1.setAngle(1.1802855F);
      homeLight0.isTopRightPointAt(3.4028235E38F, (-427.82852F), 3.4028235E38F);
      homeLight1.setNameAngle((-815.0011F));
      homeLight2.getCurrency();
      homeLight1.setAngle((-2431.058F));
      assertEquals(1.8129913F, homeLight1.getNameAngle(), 0.01F);
      
      homeLight0.isTexturable();
      assertEquals((-407.50055F), homeLight0.getX(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test265()  throws Throwable  {
      CatalogTexture catalogTexture0 = new CatalogTexture("DOOR_OR_WINDOW", (Content) null, 1.0F, 1419.8978F, true);
      HomeTexture homeTexture0 = new HomeTexture(catalogTexture0);
      homeTexture0.getImage();
      float[][] floatArray0 = new float[5][2];
      float[] floatArray1 = new float[4];
      floatArray1[0] = 2.7168148F;
      floatArray1[1] = 2.7168148F;
      floatArray1[2] = 1.0F;
      floatArray1[3] = 2.7168148F;
      floatArray0[0] = floatArray1;
      float[] floatArray2 = new float[3];
      floatArray2[0] = (-322.4F);
      floatArray2[1] = 2.7168148F;
      floatArray2[2] = 1419.8978F;
      floatArray0[1] = floatArray2;
      float[] floatArray3 = new float[7];
      floatArray3[0] = 1419.8978F;
      floatArray3[1] = (-322.4F);
      floatArray3[2] = 1419.8978F;
      floatArray3[3] = 1.0F;
      floatArray3[4] = (-322.4F);
      floatArray3[5] = 2.7168148F;
      floatArray3[6] = 1.0F;
      floatArray0[2] = floatArray3;
      float[] floatArray4 = new float[5];
      floatArray4[0] = 1.0F;
      floatArray4[1] = 1419.8978F;
      floatArray4[2] = 1419.8978F;
      floatArray4[3] = 2.7168148F;
      floatArray4[4] = 1.0F;
      floatArray0[3] = floatArray4;
      float[] floatArray5 = new float[9];
      floatArray5[0] = 1.849556F;
      floatArray5[1] = 1.0F;
      floatArray5[2] = 2.7168148F;
      floatArray5[3] = (-322.4F);
      floatArray5[4] = 1.0F;
      floatArray5[5] = 1419.8978F;
      floatArray5[6] = 2.7168148F;
      floatArray5[7] = 1419.8978F;
      floatArray5[8] = 2.7168148F;
      floatArray0[4] = floatArray5;
      BigDecimal bigDecimal0 = new BigDecimal(1569708378);
      CatalogPieceOfFurniture catalogPieceOfFurniture0 = new CatalogPieceOfFurniture("", "jar:", "", (Content) null, (Content) null, 1.0F, 1.0F, (-322.4F), 2.7168148F, true, floatArray0, "", true, bigDecimal0, bigDecimal0);
      HomePieceOfFurniture homePieceOfFurniture0 = new HomePieceOfFurniture(catalogPieceOfFurniture0);
      BigDecimal bigDecimal1 = homePieceOfFurniture0.getValueAddedTax();
      assertFalse(bigDecimal1.equals((Object)bigDecimal0));
  }

  @Test(timeout = 4000)
  public void test266()  throws Throwable  {
      LightSource[] lightSourceArray0 = new LightSource[2];
      LightSource lightSource0 = new LightSource((-815.0F), 0.0F, 0.0F, 114);
      lightSourceArray0[0] = lightSource0;
      LightSource lightSource1 = new LightSource((-694.0F), 0.36957806F, (-127.62969F), 114);
      lightSourceArray0[1] = lightSource1;
      BigDecimal bigDecimal0 = BigDecimal.TEN;
      CatalogLight catalogLight0 = new CatalogLight("h&9+\"", "h&9+\"", "h&9+\"", (Content) null, (Content) null, (-815.0F), 0.36957806F, (-694.0F), (-694.0F), true, lightSourceArray0, (float[][]) null, "h&9+\"", true, bigDecimal0, bigDecimal0);
      HomeLight homeLight0 = new HomeLight(catalogLight0);
      HomeLight homeLight1 = homeLight0.clone();
      HomeLight homeLight2 = (HomeLight)homeLight1.clone();
      boolean boolean0 = homeLight1.isPointAt(114, (-815.0F), 114);
      homeLight1.setName("h&9+\"");
      HomeLight homeLight3 = new HomeLight(homeLight2);
      HomeLight homeLight4 = homeLight3.clone();
      HomePieceOfFurniture.SortableProperty.values();
      homeLight1.isMovable();
      Level level0 = new Level("h&9+\"", (-1469.0F), 0.0F, 0.36957806F);
      boolean boolean1 = homeLight4.isAtLevel((Level) null);
      assertFalse(boolean1 == boolean0);
      
      homeLight0.setName("");
      assertEquals((-694.0F), homeLight0.getElevation(), 0.01F);
      assertEquals(0.36957806F, homeLight0.getDepth(), 0.01F);
      assertEquals(0.18478903F, homeLight0.getY(), 0.01F);
      assertEquals((-815.0F), homeLight0.getWidth(), 0.01F);
      assertEquals((-694.0F), homeLight0.getHeight(), 0.01F);
      assertEquals((-407.5F), homeLight0.getX(), 0.01F);
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
  }
}
